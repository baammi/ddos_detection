source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1d6d8.5 = global i32 0
@global_var_1d6e8.6 = global i32* @global_var_1d6d8.5
@global_var_1d848.12 = global i32 0
@global_var_daa4.18 = constant i32 -382906384
@global_var_12f40.20 = constant i32 -481296384
@global_var_1d864.24 = global i32 0
@global_var_85dc.25 = constant i32 -352321555
@global_var_b9bc.31 = constant i32 -382906384
@global_var_beb8.33 = constant i32 -382906384
@global_var_b000.35 = constant i32 -382906384
@global_var_a880.37 = constant i32 -382906384
@global_var_a0c0.39 = constant i32 -382906384
@global_var_97b0.41 = constant i32 -382906384
@global_var_9078.43 = constant i32 -382906384
@global_var_88d0.45 = constant i32 -382906384
@global_var_1d900.47 = global i32 0
@global_var_1d908.58 = global i32 0
@global_var_14b84.60 = constant i32 47
@global_var_1d868.63 = global i32 0
@global_var_1d904.65 = global i32 0
@global_var_d928.67 = constant i32 -382910352
@global_var_1d6f4.69 = global i32 72852
@global_var_1d6ec.71 = global i32 -1
@global_var_1d910.77 = local_unnamed_addr global i32 0
@global_var_1d90f.78 = local_unnamed_addr global i32 0
@global_var_1d90e.79 = local_unnamed_addr global i32 0
@global_var_1d86c.81 = global i32 0
@global_var_d7a0.83 = constant i32 -442556408
@global_var_1d90d.87 = local_unnamed_addr global i32 0
@global_var_14b88.91 = constant i32 10
@global_var_1d6f0.93 = global i32 -1
@global_var_122e0.97 = constant i32 -382910448
@global_var_11c94.98 = constant i32 -382910224
@global_var_14b8c.100 = constant i32 16777216
@global_var_1d874.102 = global i32 0
@global_var_1d880.104 = global i32 0
@global_var_1d878.106 = global i32 0
@global_var_1d87c.108 = global i32 0
@global_var_e83c.117 = constant i32 -442695668
@global_var_1d924.119 = global i32 0
@global_var_1d8b8.121 = global i32 0
@global_var_1d884.123 = global i32 0
@global_var_1d8b0.125 = global i32 0
@global_var_1d91c.133 = global i32 0
@global_var_1d920.135 = global i32 0
@global_var_1d88b.138 = local_unnamed_addr global i32 0
@global_var_1d88a.139 = local_unnamed_addr global i32 0
@global_var_1d89c.141 = global i32 0
@global_var_1d890.143 = local_unnamed_addr global i32 0
@global_var_1d88d.144 = local_unnamed_addr global i32 0
@global_var_1d89d.145 = local_unnamed_addr global i32 0
@global_var_1d89f.146 = local_unnamed_addr global i32 0
@global_var_1d891.147 = local_unnamed_addr global i32 0
@global_var_1d88c.148 = local_unnamed_addr global i32 0
@global_var_1d89e.149 = local_unnamed_addr global i32 0
@global_var_1d8ab.151 = local_unnamed_addr global i32 0
@global_var_1d8aa.152 = local_unnamed_addr global i32 0
@global_var_14f08.154 = constant [5 x i8] c"PMMV\00"
@global_var_15064.156 = constant i32 0
@global_var_150ac.158 = constant [6 x i8] c"CFOKL\00"
@global_var_14b94.160 = constant i32 387006810
@global_var_14b9c.162 = constant [6 x i8] c"TKXZT\00"
@global_var_14ba4.164 = constant i32 437918234
@global_var_14bac.166 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_14bb4.168 = constant [8 x i8] c"FGDCWNV\00"
@global_var_14bbc.170 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_14bc8.172 = constant i32 370216979
@global_var_14bd0.174 = constant i32 269555223
@global_var_14bd8.176 = constant [8 x i8] c"QWRRMPV\00"
@global_var_15130.178 = constant i32 370216979
@global_var_14be0.180 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_14bec.182 = constant i32 370216979
@global_var_14bf4.184 = constant [5 x i8] c"WQGP\00"
@global_var_14bfc.186 = constant [5 x i8] c"RCQQ\00"
@global_var_14c04.188 = constant i32 1263486531
@global_var_14d58.190 = constant i32 320017171
@global_var_14c10.192 = constant [9 x i8] c"QOACFOKL\00"
@global_var_14c1c.194 = constant i32 336860180
@global_var_14c24.196 = constant i32 324292169
@global_var_14c2c.198 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_14c3c.200 = constant [7 x i8] c"OGKLQO\00"
@global_var_14c44.202 = constant [4 x i8] c"@WJ\00"
@global_var_14c48.204 = constant [7 x i8] c"RW@NKA\00"
@global_var_14c50.206 = constant [8 x i8] c"QGPTKAG\00"
@global_var_14c58.208 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_14c64.210 = constant [6 x i8] c"EWGQV\00"
@global_var_14c6c.212 = constant i32 1263486531
@global_var_14c74.214 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_14c84.216 = constant [5 x i8] c"W@LV\00"
@global_var_14c8c.218 = constant i32 324292169
@global_var_14c94.220 = constant i32 390551160
@global_var_14c9c.222 = constant i32 387009354
@global_var_14ca4.224 = constant [6 x i8] c"HT@XF\00"
@global_var_14cac.226 = constant [5 x i8] c"CLIM\00"
@global_var_14cb4.228 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_14cbc.230 = constant [9 x i8] c"AJCLEGOG\00"
@global_var_14cc8.232 = constant i32 1867011861
@global_var_14cd8.234 = constant i32 1867011861
@global_var_14ce8.236 = constant [7 x i8] c"Q[QVGO\00"
@global_var_14cf0.238 = constant [5 x i8] c"KIU@\00"
@global_var_14cf8.240 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_14d04.242 = constant [8 x i8] c"PGCNVGI\00"
@global_var_14d0c.244 = constant i32 303174162
@global_var_14d18.246 = constant i32 303174162
@global_var_14d20.248 = constant i32 320017171
@global_var_14d28.250 = constant i32 1263486531
@global_var_14bc0.252 = constant [5 x i8] c"VGAJ\00"
@global_var_14d34.254 = constant i32 454761243
@global_var_14d40.256 = constant [6 x i8] c"oGKLQ\00"
@global_var_14d48.258 = constant [4 x i8] c"hta\00"
@global_var_14d4c.260 = constant i32 319820054
@global_var_14d54.262 = constant i32 320017171
@global_var_14d60.264 = constant [7 x i8] c"WVQVCP\00"
@global_var_14d68.266 = constant [9 x i8] c"XMMOCFQN\00"
@global_var_14d74.268 = constant i32 1263486531
@global_var_14d7c.270 = constant i32 303059531
@global_var_14d84.272 = constant i32 303125067
@global_var_14d8c.274 = constant i32 303452747
@global_var_14d94.276 = constant [7 x i8] c"@KLVGA\00"
@global_var_14d9c.278 = constant [8 x i8] c"VQWLCOK\00"
@global_var_14da4.280 = constant i32 323043395
@global_var_14dac.282 = constant i32 319951888
@global_var_14db4.284 = constant [7 x i8] c"Q[LLGV\00"
@global_var_14dbc.286 = constant [9 x i8] c"@C[CLFQN\00"
@global_var_14dc8.288 = constant [6 x i8] c"SWQGP\00"
@global_var_14ec0.290 = constant i32 1118227
@global_var_14dd0.292 = constant i32 370216979
@global_var_14dd8.294 = constant [8 x i8] c"oCLCEGP\00"
@global_var_14de0.296 = constant [4 x i8] c"CFO\00"
@global_var_14de4.298 = constant [8 x i8] c"OCLCEGP\00"
@global_var_14dec.300 = constant [7 x i8] c"DPKGLF\00"
@global_var_14df4.302 = constant [4 x i8] c"CRA\00"
@global_var_14df8.304 = constant i32 1263421261
@global_var_14e04.306 = constant [5 x i8] c"VKLK\00"
@global_var_14e0c.308 = constant [7 x i8] c"CQAGLF\00"
@global_var_14e14.310 = constant i32 1265504102
@global_var_14e1c.312 = constant [6 x i8] c"FNKLI\00"
@global_var_14e24.314 = constant [6 x i8] c"NMEKL\00"
@global_var_14e2c.316 = constant i32 1296912387
@global_var_14e34.318 = constant [9 x i8] c"AC@NGAMO\00"
@global_var_14e40.320 = constant [7 x i8] c"PMWVGP\00"
@global_var_14e48.322 = constant [8 x i8] c"LGVMRKC\00"
@global_var_14e50.324 = constant [7 x i8] c"Q[QCFO\00"
@global_var_14e58.326 = constant [8 x i8] c"CLKAWQV\00"
@global_var_14e60.328 = constant [6 x i8] c"FG@WE\00"
@global_var_14e68.330 = constant [10 x i8] c"F\0CG\0C@\0CW\0CE\00"
@global_var_14e74.332 = constant [5 x i8] c"GAJM\00"
@global_var_14e7c.334 = constant [5 x i8] c"FKCE\00"
@global_var_14e84.336 = constant [7 x i8] c"QUKVAJ\00"
@global_var_14e54.338 = constant [3 x i8] c"FO\00"
@global_var_14e8c.340 = constant [7 x i8] c"VGNLGV\00"
@global_var_14e94.342 = constant i32 370216979
@global_var_14ea0.344 = constant [5 x i8] c"VMMP\00"
@global_var_14ea8.346 = constant [7 x i8] c"ACNTKL\00"
@global_var_14eb0.348 = constant i32 370216979
@global_var_14ebc.350 = constant i32 1447906640
@global_var_14ec4.352 = constant i32 1447512643
@global_var_14ed0.354 = constant i32 454302484
@global_var_14ed8.356 = constant i32 387400530
@global_var_14ee4.358 = constant i32 319885331
@global_var_14eec.360 = constant i32 1986882928
@global_var_14ef4.362 = constant [7 x i8] c"CNRKLG\00"
@global_var_14efc.364 = constant i32 457659992
@global_var_14f04.366 = constant i32 303043392
@global_var_14f10.368 = constant [9 x i8] c"rcqqumpf\00"
@global_var_14f1c.370 = constant [6 x i8] c"cfokl\00"
@global_var_14f24.372 = constant [8 x i8] c"LGVEGCP\00"
@global_var_14f2c.374 = constant i32 303257172
@global_var_14f34.376 = constant [4 x i8] c"K@O\00"
@global_var_14f38.378 = constant [7 x i8] c"T[CVVC\00"
@global_var_14f40.380 = constant [6 x i8] c"cFOKL\00"
@global_var_14f48.382 = constant i32 373380675
@global_var_14f50.384 = constant [7 x i8] c"OKAPMQ\00"
@global_var_14f58.386 = constant [6 x i8] c"QGVWR\00"
@global_var_14f60.388 = constant [8 x i8] c"AMOACQV\00"
@global_var_14f68.390 = constant [4 x i8] c"RMQ\00"
@global_var_14f6c.392 = constant [4 x i8] c"UUU\00"
@global_var_14f70.394 = constant i32 303176208
@global_var_14f78.396 = constant [5 x i8] c"w`lv\00"
@global_var_14f80.398 = constant [7 x i8] c"LGVOCL\00"
@global_var_14f88.400 = constant [6 x i8] c"Cfokl\00"
@global_var_14f90.402 = constant [7 x i8] c"FCGOML\00"
@global_var_14f98.404 = constant [5 x i8] c"FGOM\00"
@global_var_14fa0.406 = constant [6 x i8] c"CPPKQ\00"
@global_var_14fa8.408 = constant [8 x i8] c"nKLIQ[Q\00"
@global_var_14fb0.410 = constant [7 x i8] c"ANKGLV\00"
@global_var_14fb8.412 = constant [6 x i8] c"AKQAM\00"
@global_var_14fc0.414 = constant [6 x i8] c"akqam\00"
@global_var_14fc8.416 = constant [6 x i8] c"QWRGP\00"
@global_var_14fd0.418 = constant [5 x i8] c"QWPV\00"
@global_var_14fd8.420 = constant i32 370611221
@global_var_14d6c.422 = constant [5 x i8] c"CFQN\00"
@global_var_14fe0.424 = constant i32 1313949251
@global_var_14fec.426 = constant [7 x i8] c"RCVPMN\00"
@global_var_14ff4.428 = constant i32 387007823
@global_var_14ffc.430 = constant [7 x i8] c"OGPNKL\00"
@global_var_15004.432 = constant [9 x i8] c"LGVCFOKL\00"
@global_var_15010.434 = constant [9 x i8] c"JGUNRCAI\00"
@global_var_1501c.436 = constant [7 x i8] c"lGVkaQ\00"
@global_var_15024.438 = constant i32 1179729984
@global_var_15030.440 = constant [5 x i8] c"lwnn\00"
@global_var_15038.442 = constant [9 x i8] c"CFOKLVVF\00"
@global_var_15044.444 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_15050.446 = constant [9 x i8] c"rNAOqRkR\00"
@global_var_1505c.448 = constant i32 269488144
@global_var_15068.450 = constant [9 x i8] c"QGAWPKV[\00"
@global_var_15074.452 = constant [9 x i8] c"OMWLVQ[Q\00"
@global_var_15080.454 = constant [8 x i8] c"OGOMVGA\00"
@global_var_15088.456 = constant i32 1464562030
@global_var_15098.458 = constant i32 2003334929
@global_var_150a8.460 = constant [10 x i8] c"OWQGCFOKL\00"
@global_var_150b4.462 = constant i32 1196513135
@global_var_150c0.464 = constant [10 x i8] c"QVMPUCVAJ\00"
@global_var_150cc.466 = constant [11 x i8] c"QRGAKCNKQV\00"
@global_var_150d8.468 = constant [10 x i8] c"CFOKLRNFV\00"
@global_var_150e4.470 = constant [10 x i8] c"RNFVCFOKL\00"
@global_var_150f0.472 = constant i32 1279478337
@global_var_150fc.474 = constant [13 x i8] c"VGNGAMOCFOKL\00"
@global_var_1510c.476 = constant [13 x i8] c"CFOKLVGNGAMO\00"
@global_var_1511c.478 = constant i32 336675162
@global_var_15124.480 = constant [7 x i8] c"CLVQNS\00"
@global_var_1512c.482 = constant i32 1178819416
@global_var_1d894.483 = local_unnamed_addr global i32 0
@global_var_1d892.485 = local_unnamed_addr global i32 0
@global_var_1d893.486 = local_unnamed_addr global i32 0
@global_var_1d8ac.489 = local_unnamed_addr global i32 0
@global_var_1d8ad.490 = local_unnamed_addr global i32 0
@global_var_15138.501 = constant [3 x i8] c"\0D\0A\00"
@global_var_15144.503 = constant i32 2096127
@global_var_1513b.505 = constant i32 2095871
@global_var_1d92c.507 = global i32 0
@global_var_1d6fc.510 = global i32 -559038737
@global_var_15148.514 = constant [10 x i8] c"XOCR\0CZ[X\22\00"
@global_var_1d948.516 = local_unnamed_addr global i32 0
@global_var_1d944.517 = local_unnamed_addr global i32 0
@global_var_1d949.518 = local_unnamed_addr global i32 0
@global_var_15154.520 = constant [3 x i8] c"\225\00"
@global_var_1d94c.521 = local_unnamed_addr global i32 0
@global_var_1d950.522 = local_unnamed_addr global i32 0
@global_var_1d951.523 = local_unnamed_addr global i32 0
@global_var_1d9c0.524 = local_unnamed_addr global i32 0
@global_var_1d9bc.525 = local_unnamed_addr global i32 0
@global_var_1d9c1.526 = local_unnamed_addr global i32 0
@global_var_15158.528 = constant i32 51097
@global_var_1d9c4.529 = local_unnamed_addr global i32 0
@global_var_1d9c8.530 = local_unnamed_addr global i32 0
@global_var_1d9c9.531 = local_unnamed_addr global i32 0
@global_var_1515c.533 = constant i32 1448168270
@global_var_1d93c.534 = local_unnamed_addr global i32 0
@global_var_1d940.535 = local_unnamed_addr global i32 0
@global_var_1d941.536 = local_unnamed_addr global i32 0
@global_var_1516c.538 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1d95c.539 = local_unnamed_addr global i32 0
@global_var_1d960.540 = local_unnamed_addr global i32 0
@global_var_1d961.541 = local_unnamed_addr global i32 0
@global_var_15174.543 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1d968.544 = local_unnamed_addr global i32 0
@global_var_1d964.545 = local_unnamed_addr global i32 0
@global_var_1d969.546 = local_unnamed_addr global i32 0
@global_var_1517c.548 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1d970.549 = local_unnamed_addr global i32 0
@global_var_1d96c.550 = local_unnamed_addr global i32 0
@global_var_1d971.551 = local_unnamed_addr global i32 0
@global_var_15184.553 = constant [15 x i8] c"\0DRPMA\0DLGV\0DVAR\22\00"
@global_var_1d974.554 = local_unnamed_addr global i32 0
@global_var_1d978.555 = local_unnamed_addr global i32 0
@global_var_1d979.556 = local_unnamed_addr global i32 0
@global_var_15194.558 = constant [7 x i8] c"\0DOCRQ\22\00"
@global_var_1d980.559 = local_unnamed_addr global i32 0
@global_var_1d97c.560 = local_unnamed_addr global i32 0
@global_var_1d981.561 = local_unnamed_addr global i32 0
@global_var_1519c.563 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1d984.564 = local_unnamed_addr global i32 0
@global_var_1d988.565 = local_unnamed_addr global i32 0
@global_var_1d989.566 = local_unnamed_addr global i32 0
@global_var_151a8.568 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1d98c.569 = local_unnamed_addr global i32 0
@global_var_1d990.570 = local_unnamed_addr global i32 0
@global_var_1d991.571 = local_unnamed_addr global i32 0
@global_var_151b0.573 = constant [17 x i8] c"\0DRPMA\0DLGV\0DPMWVG\22\00"
@global_var_1d998.574 = local_unnamed_addr global i32 0
@global_var_1d994.575 = local_unnamed_addr global i32 0
@global_var_1d999.576 = local_unnamed_addr global i32 0
@global_var_151c4.578 = constant [15 x i8] c"\0DRPMA\0DARWKLDM\22\00"
@global_var_1d99c.579 = local_unnamed_addr global i32 0
@global_var_1d9a0.580 = local_unnamed_addr global i32 0
@global_var_1d9a1.581 = local_unnamed_addr global i32 0
@global_var_151d4.583 = constant [10 x i8] c"`memokrq\22\00"
@global_var_1d9a8.584 = local_unnamed_addr global i32 0
@global_var_1d9a4.585 = local_unnamed_addr global i32 0
@global_var_1d9a9.586 = local_unnamed_addr global i32 0
@global_var_151e0.588 = constant [20 x i8] c"\0DGVA\0DPA\0CF\0DPA\0CNMACN\22\00"
@global_var_1d9ac.589 = local_unnamed_addr global i32 0
@global_var_1d9b0.590 = local_unnamed_addr global i32 0
@global_var_1d9b1.591 = local_unnamed_addr global i32 0
@global_var_151f4.593 = constant i32 1078137669
@global_var_1d9b8.594 = local_unnamed_addr global i32 0
@global_var_1d9b4.595 = local_unnamed_addr global i32 0
@global_var_1d9b9.596 = local_unnamed_addr global i32 0
@global_var_1520c.598 = constant [9 x i8] c"CQQUMPF\22\00"
@global_var_15218.600 = constant [15 x i8] c"\0DFGT\0DUCVAJFME\22\00"
@global_var_15228.602 = constant [20 x i8] c"\0DFGT\0DOKQA\0DUCVAJFME\22\00"
@global_var_1d9cc.603 = local_unnamed_addr global i32 0
@global_var_1d9d0.604 = local_unnamed_addr global i32 0
@global_var_1d9d1.605 = local_unnamed_addr global i32 0
@global_var_1523c.607 = constant i32 1413957133
@global_var_1d9d8.608 = local_unnamed_addr global i32 0
@global_var_1d9d4.609 = local_unnamed_addr global i32 0
@global_var_1d9d9.610 = local_unnamed_addr global i32 0
@global_var_15254.612 = constant i32 1413957133
@global_var_1d9e0.613 = local_unnamed_addr global i32 0
@global_var_1d9dc.614 = local_unnamed_addr global i32 0
@global_var_1d9e1.615 = local_unnamed_addr global i32 0
@global_var_1526c.617 = constant [15 x i8] c"\0DFGT\0DLGVQNKLI\22\00"
@global_var_1d9e4.618 = local_unnamed_addr global i32 0
@global_var_1d9e8.619 = local_unnamed_addr global i32 0
@global_var_1d9e9.620 = local_unnamed_addr global i32 0
@global_var_1527c.622 = constant i32 1836214128
@global_var_1528c.624 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_15298.626 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_152a4.628 = constant i32 437738110
@global_var_152c8.630 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_152d4.632 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_152e0.634 = constant [11 x i8] c"FTPjGNRGP\22\00"
@global_var_152ec.636 = constant [7 x i8] c"QJGNN\22\00"
@global_var_152f4.638 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_152fc.640 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_15304.642 = constant [4 x i8] c"QJ\22\00"
@global_var_15308.644 = constant i32 1280000013
@global_var_1d9ec.645 = local_unnamed_addr global i32 0
@global_var_1d9f0.646 = local_unnamed_addr global i32 0
@global_var_1d9f1.647 = local_unnamed_addr global i32 0
@global_var_1531c.649 = constant i32 1668311919
@global_var_1d9f8.650 = local_unnamed_addr global i32 0
@global_var_1d9f4.651 = local_unnamed_addr global i32 0
@global_var_1d9f9.652 = local_unnamed_addr global i32 0
@global_var_15338.654 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1da00.655 = local_unnamed_addr global i32 0
@global_var_1d9fc.656 = local_unnamed_addr global i32 0
@global_var_1da01.657 = local_unnamed_addr global i32 0
@global_var_15344.659 = constant i32 1280000013
@global_var_1da08.660 = local_unnamed_addr global i32 0
@global_var_1da04.661 = local_unnamed_addr global i32 0
@global_var_1da09.662 = local_unnamed_addr global i32 0
@global_var_15358.664 = constant i32 1280000013
@global_var_1da10.665 = local_unnamed_addr global i32 0
@global_var_1da0c.666 = local_unnamed_addr global i32 0
@global_var_1da11.667 = local_unnamed_addr global i32 0
@global_var_1da24.668 = local_unnamed_addr global i32 0
@global_var_1da28.669 = local_unnamed_addr global i32 0
@global_var_1da29.670 = local_unnamed_addr global i32 0
@global_var_15370.672 = constant [6 x i8] c"MEKL\22\00"
@global_var_1da30.673 = local_unnamed_addr global i32 0
@global_var_1da2c.674 = local_unnamed_addr global i32 0
@global_var_1da31.675 = local_unnamed_addr global i32 0
@global_var_15378.677 = constant [7 x i8] c"GLVGP\22\00"
@global_var_1da38.678 = local_unnamed_addr global i32 0
@global_var_1da34.679 = local_unnamed_addr global i32 0
@global_var_1da39.680 = local_unnamed_addr global i32 0
@global_var_15380.682 = constant i32 1464693110
@global_var_1da18.683 = local_unnamed_addr global i32 0
@global_var_1da14.684 = local_unnamed_addr global i32 0
@global_var_1da19.685 = local_unnamed_addr global i32 0
@global_var_15398.687 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1da20.688 = local_unnamed_addr global i32 0
@global_var_1da1c.689 = local_unnamed_addr global i32 0
@global_var_1da21.690 = local_unnamed_addr global i32 0
@global_var_153ac.692 = constant i32 1196376908
@global_var_1da74.693 = local_unnamed_addr global i32 0
@global_var_1da78.694 = local_unnamed_addr global i32 0
@global_var_1da79.695 = local_unnamed_addr global i32 0
@global_var_13928.698 = constant i32 -476053504
@global_var_126b0.702 = constant i32 -443219956
@global_var_1281c.707 = constant i32 -376111092
@global_var_1d8f4.710 = global i32 0
@global_var_1299c.712 = constant i32 -456978431
@global_var_1dacc.714 = global i32 0
@global_var_1d8bc.716 = global i32 0
@global_var_1d7fc.719 = global i32 256
@global_var_1d700.720 = global i32* @global_var_1d7fc.719
@global_var_1d8e4.723 = global i32 0
@global_var_1db4c.725 = global i32 0
@global_var_140dc.726 = constant i32 -382910416
@global_var_12920.727 = constant i32 -509595648
@global_var_12fc0.734 = constant i32 -442564520
@global_var_1d808.740 = global i32 0
@global_var_1255c.742 = constant i32 -481230848
@global_var_1d8d4.744 = global i32 0
@global_var_13d2c.746 = constant i32 -509587456
@global_var_154c8.748 = constant i32 33554944
@global_var_1d840.749 = global i32* @global_var_154c8.748
@global_var_1d820.752 = global i32 0
@global_var_1d8d8.756 = local_unnamed_addr global i32 0
@global_var_136e0.758 = constant i32 -352321419
@global_var_1d6cc.762 = global i32 -1
@global_var_1d8e8.765 = global i32 0
@global_var_1d8ec.767 = local_unnamed_addr global i32 0
@global_var_13914.768 = constant i32 -390234096
@global_var_153bc.770 = constant [10 x i8] c"/dev/null\00"
@global_var_1d8f0.772 = global i32 0
@global_var_1d8dc.777 = local_unnamed_addr global i32 0
@global_var_1d8e0.779 = global i32 0
@global_var_12900.781 = constant i32 -369096946
@global_var_1d838 = external local_unnamed_addr global i32
@global_var_128b4.791 = constant i32 -442564608
@global_var_13bdc.793 = constant i32 -335544664
@global_var_13cf8.796 = constant i32 -275775369
@global_var_14470.797 = constant i32 -382910352
@global_var_1d8fc.799 = global i32 0
@global_var_1db64.802 = global i32 0
@global_var_1db68.804 = global i32 0
@global_var_1d6d0.807 = global i32 0
@global_var_1d844.3 = external global i8*
@global_var_1d860.22 = external global i8*
@global_var_1d861.29 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1d6f8.73 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1d90c.76 = external global i8*
@global_var_1d870.96 = external global i8*
@global_var_1d8b4.127 = external global i8*
@global_var_1d8b5.128 = local_unnamed_addr global i8 0
@global_var_1d888.137 = external global i8*
@global_var_1d8a8.142 = local_unnamed_addr global i8 0
@global_var_1d8a9.150 = local_unnamed_addr global i8 0
@global_var_1d898.484 = local_unnamed_addr global i8 0
@global_var_1d8a0.488 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  %v1_80a4 = call i32 @function_14b34(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1d844.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1d844.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1d6e8.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1d6e8.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1d6e8.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1d6e8.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1d844.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1d6e8.6, { 1, 0 }
  uselistorder i8** @global_var_1d844.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 120540 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 120540

bb2:                                              ; preds = %.thread
  ret i32 120540

; uselistorder directives
  uselistorder i32 120540, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_139c8(i32 ptrtoint (i32* @global_var_daa4.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 84848, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_13390()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8230:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8230 = urem i32 %arg1, 256
  %v2_8234 = icmp eq i32 %v1_8230, 0
  %v3_8238 = load i32, i32* @r4, align 4
  br i1 %v2_8234, label %dec_label_pc_8280, label %dec_label_pc_8244

dec_label_pc_8244:                                ; preds = %dec_label_pc_8230
  %v0_8244 = load i32, i32* %r1.global-to-local, align 4
  %v1_8244 = add i32 %v0_8244, 4
  %v2_8244 = inttoptr i32 %v1_8244 to i8*
  %v3_8244 = load i8, i8* %v2_8244, align 1
  %v4_8244 = zext i8 %v3_8244 to i32
  %v1_8248 = urem i32 %arg3, 256
  %v9_824c = icmp eq i32 %v4_8244, %v1_8248
  br i1 %v9_824c, label %dec_label_pc_8288, label %dec_label_pc_8270.preheader

dec_label_pc_8270.preheader:                      ; preds = %dec_label_pc_8244
  br label %dec_label_pc_8270

dec_label_pc_8260:                                ; preds = %dec_label_pc_8270
  %v1_8260 = add i32 %v0_8268.in, 12
  %v2_8260 = inttoptr i32 %v1_8260 to i8*
  %v3_8260 = load i8, i8* %v2_8260, align 1
  %v4_8260 = zext i8 %v3_8260 to i32
  %v9_8264 = icmp eq i32 %v1_8248, %v4_8260
  br i1 %v9_8264, label %dec_label_pc_8288, label %dec_label_pc_8270

dec_label_pc_8270:                                ; preds = %dec_label_pc_8270.preheader, %dec_label_pc_8260
  %v0_8268.in = phi i32 [ %v0_8244, %dec_label_pc_8270.preheader ], [ %v0_8268, %dec_label_pc_8260 ]
  %v0_8270 = phi i32 [ 0, %dec_label_pc_8270.preheader ], [ %v1_8270, %dec_label_pc_8260 ]
  %v0_8268 = add i32 %v0_8268.in, 8
  %v1_8270 = add i32 %v0_8270, 1
  %v9_8274 = icmp eq i32 %v1_8230, %v1_8270
  store i32 %v0_8268, i32* %r1.global-to-local, align 4
  br i1 %v9_8274, label %dec_label_pc_8280, label %dec_label_pc_8260

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288, %dec_label_pc_8230
  store i32 %v3_8238, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8288:                                ; preds = %dec_label_pc_8260, %dec_label_pc_8244
  %v0_8288 = phi i32 [ %v0_8244, %dec_label_pc_8244 ], [ %v0_8268, %dec_label_pc_8260 ]
  %v1_8288 = inttoptr i32 %v0_8288 to i32*
  %v2_8288 = load i32, i32* %v1_8288, align 4
  store i32 %v2_8288, i32* @r0, align 4
  %v2_828c = icmp eq i32 %v2_8288, 0
  br i1 %v2_828c, label %dec_label_pc_8280, label %dec_label_pc_8294

dec_label_pc_8294:                                ; preds = %dec_label_pc_8288
  store i32 %v3_8238, i32* @r4, align 4
  %v1_8298 = call i32 @function_129dc(i32 %v2_8288)
  ret i32 %v1_8298

; uselistorder directives
  uselistorder i32 %v1_8270, { 1, 0 }
  uselistorder i32 %v0_8268, { 1, 0, 2 }
  uselistorder i32 %v0_8268.in, { 1, 0 }
  uselistorder i32 %v1_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 1, 0, 2 }
  uselistorder i32 %v3_8238, { 1, 0 }
  uselistorder i32 %v1_8230, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8280, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8270, { 1, 0 }
}

define i32 @function_829c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_829c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_829c = urem i32 %arg1, 256
  %v2_82a0 = icmp eq i32 %v1_829c, 0
  %v3_82a4 = load i32, i32* @r4, align 4
  %v6_82a4 = load i32, i32* @lr, align 4
  br i1 %v2_82a0, label %dec_label_pc_82ec, label %dec_label_pc_82b0

dec_label_pc_82b0:                                ; preds = %dec_label_pc_829c
  %v0_82b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_82b0 = add i32 %v0_82b0, 4
  %v2_82b0 = inttoptr i32 %v1_82b0 to i8*
  %v3_82b0 = load i8, i8* %v2_82b0, align 1
  %v4_82b0 = zext i8 %v3_82b0 to i32
  %v1_82b4 = urem i32 %arg3, 256
  %v9_82b8 = icmp eq i32 %v4_82b0, %v1_82b4
  br i1 %v9_82b8, label %dec_label_pc_82f4, label %dec_label_pc_82dc.preheader

dec_label_pc_82dc.preheader:                      ; preds = %dec_label_pc_82b0
  br label %dec_label_pc_82dc

dec_label_pc_82cc:                                ; preds = %dec_label_pc_82dc
  %v1_82cc = add i32 %v0_82d4.in, 12
  %v2_82cc = inttoptr i32 %v1_82cc to i8*
  %v3_82cc = load i8, i8* %v2_82cc, align 1
  %v4_82cc = zext i8 %v3_82cc to i32
  %v9_82d0 = icmp eq i32 %v1_82b4, %v4_82cc
  br i1 %v9_82d0, label %dec_label_pc_82f4, label %dec_label_pc_82dc

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82dc.preheader, %dec_label_pc_82cc
  %v0_82d4.in = phi i32 [ %v0_82b0, %dec_label_pc_82dc.preheader ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v0_82dc = phi i32 [ 0, %dec_label_pc_82dc.preheader ], [ %v1_82dc, %dec_label_pc_82cc ]
  %v0_82d4 = add i32 %v0_82d4.in, 8
  %v1_82dc = add i32 %v0_82dc, 1
  store i32 %v1_82dc, i32* @lr, align 4
  %v9_82e0 = icmp eq i32 %v1_829c, %v1_82dc
  store i32 %v0_82d4, i32* %r1.global-to-local, align 4
  br i1 %v9_82e0, label %dec_label_pc_82ec, label %dec_label_pc_82cc

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82f4, %dec_label_pc_829c
  store i32 %v3_82a4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82cc, %dec_label_pc_82b0
  %v0_82f4 = phi i32 [ %v0_82b0, %dec_label_pc_82b0 ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v1_82f4 = inttoptr i32 %v0_82f4 to i32*
  %v2_82f4 = load i32, i32* %v1_82f4, align 4
  %v2_82f8 = icmp eq i32 %v2_82f4, 0
  br i1 %v2_82f8, label %dec_label_pc_82ec, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82f4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_82a4, i32* @r4, align 4
  store i32 %v6_82a4, i32* @lr, align 4
  %v2_8308 = inttoptr i32 %v2_82f4 to i8*
  %v3_8308 = call i32 @function_11b08(i8* %v2_8308, i32 10)
  ret i32 %v3_8308

; uselistorder directives
  uselistorder i32 %v1_82dc, { 1, 2, 0 }
  uselistorder i32 %v0_82d4, { 1, 0, 2 }
  uselistorder i32 %v0_82d4.in, { 1, 0 }
  uselistorder i32 %v1_82b4, { 1, 0 }
  uselistorder i32 %v0_82b0, { 1, 0, 2 }
  uselistorder i32 %v3_82a4, { 1, 0 }
  uselistorder i32 %v1_829c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_82dc, { 1, 0 }
}

define i32 @function_830c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_830c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_830c = load i32, i32* @r4, align 4
  %v6_830c = load i32, i32* @r5, align 4
  %v9_830c = load i32, i32* @r6, align 4
  %v12_830c = load i32, i32* @r7, align 4
  %v15_830c = load i32, i32* @r8, align 4
  %v18_830c = load i32, i32* @sb, align 4
  %v21_830c = load i32, i32* @sl, align 4
  %v24_830c = load i32, i32* @fp, align 4
  %v27_830c = load i32, i32* @lr, align 4
  %v7_8310 = icmp eq i32 %arg2, 3
  store i1 %v7_8310, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_831c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_831c, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_8330, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_830c
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v1_8328 = inttoptr i32 %v0_831c to i32*
  %v2_8328 = load i32, i32* %v1_8328, align 4
  store i32 %v2_8328, i32* %sl.global-to-local, align 4
  br i1 %v7_8324, label %dec_label_pc_8330, label %dec_label_pc_8338

dec_label_pc_8330:                                ; preds = %dec_label_pc_8354, %.dec_label_pc_8330_crit_edge, %dec_label_pc_8324, %dec_label_pc_8348, %dec_label_pc_8338, %dec_label_pc_830c
  %v29_8334 = phi i32 [ %v29_8334.pre, %.dec_label_pc_8330_crit_edge ], [ %v0_831c, %dec_label_pc_8354 ], [ %v0_831c, %dec_label_pc_8324 ], [ %v0_831c, %dec_label_pc_8348 ], [ %v0_831c, %dec_label_pc_8338 ], [ %v0_831c, %dec_label_pc_830c ]
  store i32 %v3_830c, i32* %r4.global-to-local, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v18_830c, i32* @sb, align 4
  store i32 %v21_830c, i32* @sl, align 4
  store i32 %v24_830c, i32* @fp, align 4
  ret i32 %v29_8334

dec_label_pc_8338:                                ; preds = %dec_label_pc_8324
  %v7_8338 = icmp eq i32 %arg2, 5
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = add i32 %v0_831c, 4
  %v2_833c = inttoptr i32 %v1_833c to i8*
  %v3_833c = load i8, i8* %v2_833c, align 1
  %v4_833c = zext i8 %v3_833c to i32
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  br i1 %v7_8338, label %dec_label_pc_8330, label %dec_label_pc_8348

dec_label_pc_8348:                                ; preds = %dec_label_pc_8338
  %v1_8348 = add i32 %v0_831c, 5
  %v2_8348 = inttoptr i32 %v1_8348 to i8*
  %v3_8348 = load i8, i8* %v2_8348, align 1
  %v4_8348 = zext i8 %v3_8348 to i32
  store i32 %v4_8348, i32* @r8, align 4
  %v2_834c = icmp eq i8 %v3_8348, 0
  store i1 %v2_834c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_834c, label %dec_label_pc_8330, label %dec_label_pc_8354

dec_label_pc_8354:                                ; preds = %dec_label_pc_8348
  %v3_8354 = mul nuw nsw i32 %v4_8348, 4
  store i32 %v3_8354, i32* %sb.global-to-local, align 4
  %v1_8358 = add i32 %arg2, -6
  store i32 %v1_8358, i32* @r6, align 4
  %v2_835c = mul nuw nsw i32 %v4_8348, 5
  store i32 %v2_835c, i32* @r7, align 4
  %v3_8360 = icmp ult i32 %v1_8358, %v2_835c
  %v9_8360 = icmp eq i32 %v1_8358, %v2_835c
  store i1 %v9_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8360, label %dec_label_pc_8330, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_8354
  store i32 %v4_8348, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8370 = call i32 @function_12ee8(i32 %v4_8348, i32 24)
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  %v0_8374 = load i32, i32* @r8, align 4
  %v2_8374 = icmp eq i32 %v0_8374, 0
  store i1 %v2_8374, i1* %cpsr_z.global-to-local, align 1
  %v0_837c = load i32, i32* @r4, align 4
  %v1_837c = add i32 %v0_837c, 6
  store i32 %v1_837c, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_8374, 1
  br i1 %tmp36, label %dec_label_pc_83d4thread-pre-split, label %dec_label_pc_8384

dec_label_pc_8384:                                ; preds = %dec_label_pc_8368
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v1_8388 = load i32, i32* @r7, align 4
  %v2_8388 = add i32 %v1_8388, %v0_837c
  store i32 %v2_8388, i32* @ip, align 4
  store i32 %v0_837c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_8398.dec_label_pc_8398_crit_edge, %dec_label_pc_8384
  %v2_83a8 = phi i32 [ %v1_83bc, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8370, %dec_label_pc_8384 ]
  %v0_83a4 = phi i32 [ %v0_83a4.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8388, %dec_label_pc_8384 ]
  %v0_83a0 = phi i32 [ %v0_8398.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v0_837c, %dec_label_pc_8384 ]
  %v1_8398 = add i32 %v0_83a0, 10
  %v2_8398 = inttoptr i32 %v1_8398 to i8*
  %v3_8398 = load i8, i8* %v2_8398, align 1
  %v1_839c = add i32 %v0_83a0, 6
  %v2_839c = inttoptr i32 %v1_839c to i32*
  %v3_839c = load i32, i32* %v2_839c, align 4
  store i32 %v3_839c, i32* @r2, align 4
  %v1_83a0 = add i32 %v0_83a0, 5
  store i32 %v1_83a0, i32* %r0.global-to-local, align 4
  %v9_83a4 = icmp eq i32 %v0_83a4, %v1_83a0
  store i1 %v9_83a4, i1* %cpsr_z.global-to-local, align 1
  %v3_83a8 = add i32 %v2_83a8, 20
  %v4_83a8 = inttoptr i32 %v3_83a8 to i8*
  store i8 %v3_8398, i8* %v4_83a8, align 1
  %v0_83ac = load i32, i32* @r2, align 4
  %v1_83ac = load i32, i32* %r1.global-to-local, align 4
  %v2_83ac = add i32 %v1_83ac, 4
  %v3_83ac = inttoptr i32 %v2_83ac to i32*
  store i32 %v0_83ac, i32* %v3_83ac, align 4
  %v0_83b0 = load i32, i32* @r2, align 4
  %v1_83b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83b0 = add i32 %v1_83b0, 16
  %v3_83b0 = inttoptr i32 %v2_83b0 to i32*
  store i32 %v0_83b0, i32* %v3_83b0, align 4
  %v0_83b4 = load i32, i32* @r4, align 4
  %v1_83b4 = trunc i32 %v0_83b4 to i8
  %v2_83b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b4 = inttoptr i32 %v2_83b4 to i8*
  store i8 %v1_83b4, i8* %v3_83b4, align 1
  %v0_83b8 = load i32, i32* @lr, align 4
  %v1_83b8 = trunc i32 %v0_83b8 to i8
  %v2_83b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b8 = add i32 %v2_83b8, 1
  %v4_83b8 = inttoptr i32 %v3_83b8 to i8*
  store i8 %v1_83b8, i8* %v4_83b8, align 1
  %v0_83bc = load i32, i32* %r1.global-to-local, align 4
  %v1_83bc = add i32 %v0_83bc, 24
  store i32 %v1_83bc, i32* %r1.global-to-local, align 4
  %v0_83c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83c0, label %dec_label_pc_83c4, label %dec_label_pc_8398.dec_label_pc_8398_crit_edge

dec_label_pc_8398.dec_label_pc_8398_crit_edge:    ; preds = %dec_label_pc_8398
  %v0_8398.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_83a4.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8398

dec_label_pc_83c4:                                ; preds = %dec_label_pc_8398
  %v0_83c4 = load i32, i32* %sb.global-to-local, align 4
  %v1_83c4 = load i32, i32* @r8, align 4
  %v1_83c8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83c4, %v0_83c4
  %v2_83c8 = sub i32 %v1_83c8, %sum
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, 6
  store i32 %v1_83cc, i32* %fp.global-to-local, align 4
  %v1_83d0 = add i32 %v2_83c8, -6
  store i32 %v1_83d0, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4thread-pre-split:                ; preds = %dec_label_pc_8368
  %v0_83d4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83d4thread-pre-split, %dec_label_pc_83c4
  %v0_83e0 = phi i32 [ %v1_837c, %dec_label_pc_83d4thread-pre-split ], [ %v1_83cc, %dec_label_pc_83c4 ]
  %v1_83d8 = phi i32 [ %v0_83d4.pr, %dec_label_pc_83d4thread-pre-split ], [ %v1_83d0, %dec_label_pc_83c4 ]
  %v2_83d4 = icmp eq i32 %v1_83d8, 0
  store i1 %v2_83d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83d4, label %dec_label_pc_84f4, label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_83d4
  %v1_83e0 = inttoptr i32 %v0_83e0 to i8*
  %v2_83e0 = load i8, i8* %v1_83e0, align 1
  %v3_83e0 = zext i8 %v2_83e0 to i32
  store i32 %v3_83e0, i32* %sb.global-to-local, align 4
  %v2_83e4 = icmp eq i8 %v2_83e0, 0
  store i1 %v2_83e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e4, label %dec_label_pc_84c4, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e0
  store i32 %v3_83e0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83fc = call i32 @function_12ee8(i32 %v3_83e0, i32 8)
  store i32 %v2_83fc, i32* %r0.global-to-local, align 4
  %v0_8400 = load i32, i32* %sb.global-to-local, align 4
  %v2_8400 = icmp eq i32 %v0_8400, 0
  store i1 %v2_8400, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_8400, 1
  br i1 %tmp37, label %dec_label_pc_84c4, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_83f4
  %v0_8410 = load i32, i32* @r6, align 4
  %v1_8410 = add i32 %v0_8410, -1
  store i32 %v1_8410, i32* @r2, align 4
  %v7_8410 = icmp eq i32 %v0_8410, 1
  store i1 %v7_8410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8410, label %dec_label_pc_84f4, label %dec_label_pc_8418

dec_label_pc_8418:                                ; preds = %dec_label_pc_8410
  %v0_8418 = load i32, i32* %fp.global-to-local, align 4
  %v1_8418 = add i32 %v0_8418, 1
  %v2_8418 = inttoptr i32 %v1_8418 to i8*
  %v3_8418 = load i8, i8* %v2_8418, align 1
  %v1_841c = add i32 %v0_8410, -2
  store i32 %v1_841c, i32* @r2, align 4
  %v7_841c = icmp eq i32 %v1_8410, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_83fc, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v3_8418, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* %fp.global-to-local, align 4
  %v1_8424 = add i32 %v0_8424, 1
  store i32 %v1_8424, i32* %r0.global-to-local, align 4
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_84f4, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8418
  %v1_842c = add i32 %v0_8424, 2
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* @r2, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_842c, i32* %r0.global-to-local, align 4
  %v5_843c = icmp slt i32 %v1_8430, %v4_842c
  br i1 %v5_843c, label %dec_label_pc_84f4, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  store i32 %v2_83fc, i32* @r5, align 4
  %v1_8448 = add i32 %v2_83fc, 8
  %v1_844c = add i32 %v0_8424, 3
  store i32 %v1_844c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_849c

dec_label_pc_845c:                                ; preds = %dec_label_pc_849c
  %v0_845c = load i32, i32* @r7, align 4
  %v1_845c = load i32, i32* @r4, align 4
  %v2_845c = sub i32 %v0_845c, %v1_845c
  store i32 %v2_845c, i32* @r2, align 4
  %v9_845c = icmp eq i32 %v0_845c, %v1_845c
  store i1 %v9_845c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_845c, label %dec_label_pc_84f4, label %dec_label_pc_8464

dec_label_pc_8464:                                ; preds = %dec_label_pc_845c
  %v1_8464 = load i32, i32* @r6, align 4
  %v2_8464 = add i32 %v1_8464, %v1_845c
  %v3_8464 = inttoptr i32 %v2_8464 to i8*
  %v4_8464 = load i8, i8* %v3_8464, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_846c = add i32 %v2_845c, -1
  store i32 %v1_846c, i32* @r2, align 4
  %v7_846c = icmp eq i32 %v2_845c, 1
  store i1 %v7_846c, i1* %cpsr_z.global-to-local, align 1
  %v3_8470 = add i32 %stack_var_-44.0, 4
  %v4_8470 = inttoptr i32 %v3_8470 to i8*
  store i8 %v4_8464, i8* %v4_8470, align 1
  %v0_8474 = load i32, i32* @r4, align 4
  %v1_8474 = load i32, i32* @r6, align 4
  %v2_8474 = add i32 %v1_8474, %v0_8474
  store i32 %v2_8474, i32* %r0.global-to-local, align 4
  %v0_8478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8478, label %dec_label_pc_84f4, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8464
  %v1_847c = add i32 %v2_8474, 1
  %v2_847c = inttoptr i32 %v1_847c to i8*
  %v3_847c = load i8, i8* %v2_847c, align 1
  %v4_847c = zext i8 %v3_847c to i32
  store i32 %v4_847c, i32* @r4, align 4
  %v0_8480 = load i32, i32* @r2, align 4
  %v1_8480 = add i32 %v0_8480, -1
  store i32 %v1_8480, i32* @r7, align 4
  %v0_8484 = load i32, i32* @r5, align 4
  %v1_8484 = add i32 %v0_8484, 8
  store i32 %v1_8484, i32* %r1.global-to-local, align 4
  %v2_8488 = sub i32 %v1_8480, %v4_847c
  %tmp39 = sub i32 0, %v2_8488
  %v6_8488 = and i32 %v1_8480, %tmp39
  %v7_8488 = icmp slt i32 %v6_8488, 0
  %v8_8488 = icmp slt i32 %v2_8488, 0
  %v9_8488 = icmp eq i32 %v1_8480, %v4_847c
  store i1 %v9_8488, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_847c, i32* %r0.global-to-local, align 4
  %v2_8494 = xor i1 %v8_8488, %v7_8488
  br i1 %v2_8494, label %dec_label_pc_84f4, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_847c
  %v1_8498 = add i32 %v2_8474, 2
  store i32 %v1_8498, i32* @r6, align 4
  br label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_8440, %dec_label_pc_8498
  %v0_84a0 = phi i32 [ %v4_842c, %dec_label_pc_8440 ], [ %v4_847c, %dec_label_pc_8498 ]
  %stack_var_-44.0 = phi i32 [ %v1_8448, %dec_label_pc_8440 ], [ %v1_8484, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v2_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @function_12ee8(i32 %v2_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  %v0_84a8 = load i32, i32* %fp.global-to-local, align 4
  %v1_84a8 = add i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %fp.global-to-local, align 4
  %v1_84ac = load i32, i32* @r5, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  %v3_84b8 = call i32 @function_11a58(i32 %v2_84a4, i32 %v0_84b0, i32 %v0_84b4)
  store i32 %v3_84b8, i32* %r0.global-to-local, align 4
  %v0_84bc = load i32, i32* %sb.global-to-local, align 4
  %v1_84bc = load i32, i32* %fp.global-to-local, align 4
  %v9_84bc = icmp eq i32 %v0_84bc, %v1_84bc
  store i1 %v9_84bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84bc, label %dec_label_pc_84c4, label %dec_label_pc_845c

dec_label_pc_84c4:                                ; preds = %dec_label_pc_849c, %dec_label_pc_83f4, %dec_label_pc_83e0
  %stack_var_-52.2 = phi i32 [ %v3_83e0, %dec_label_pc_83e0 ], [ %v2_83fc, %dec_label_pc_83f4 ], [ %v2_83fc, %dec_label_pc_849c ]
  %v0_84c4 = call i32 @function_128b4()
  store i32 %v0_84c4, i32* %r0.global-to-local, align 4
  %v2_84cc = inttoptr i32 %v0_84c4 to i32*
  store i32 0, i32* %v2_84cc, align 4
  %v0_84d0 = call i32 @function_1230c()
  store i32 %v0_84d0, i32* %r0.global-to-local, align 4
  %v7_84d4 = icmp eq i32 %v0_84d0, -1
  %v2_84e0 = icmp eq i32 %v0_84d0, 0
  store i1 %v2_84e0, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_84d0, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_84c4
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_84f4

bb42:                                             ; preds = %dec_label_pc_84c4
  %. = zext i1 %v7_84d4 to i32
  store i32 %., i32* @r2, align 4
  %v2_84ec = icmp eq i1 %v7_84d4, false
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8548, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_847c, %dec_label_pc_8464, %dec_label_pc_845c, %.thread1, %bb42, %dec_label_pc_842c, %dec_label_pc_8418, %dec_label_pc_8410, %dec_label_pc_83d4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83d4 ], [ %stack_var_-52.2, %bb42 ], [ %v2_83fc, %dec_label_pc_8410 ], [ %v2_83fc, %dec_label_pc_8418 ], [ %v2_83fc, %dec_label_pc_842c ], [ %stack_var_-52.2, %.thread1 ], [ %v2_83fc, %dec_label_pc_845c ], [ %v2_83fc, %dec_label_pc_8464 ], [ %v2_83fc, %dec_label_pc_847c ]
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v2_84f8 = icmp eq i32 %v2_8370, 0
  store i1 %v2_84f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84f8, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_84f4
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_84f4, %bb43
  %v1_8500 = xor i1 %v2_84f8, true
  call void @__pseudo_cond_branch(i1 %v1_8500, i32 ptrtoint (i32* @global_var_12f40.20 to i32))
  %v2_8508 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8508, label %.dec_label_pc_8330_crit_edge, label %dec_label_pc_8510

.dec_label_pc_8330_crit_edge:                     ; preds = %bb44
  %v29_8334.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8330

dec_label_pc_8510:                                ; preds = %bb44
  %v0_8510 = load i32, i32* %sb.global-to-local, align 4
  %v2_8510 = icmp eq i32 %v0_8510, 0
  store i1 %v2_8510, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_8510, 1
  br i1 %tmp45, label %dec_label_pc_8538, label %dec_label_pc_8518

dec_label_pc_8518:                                ; preds = %dec_label_pc_8510
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8518
  %v1_8520 = phi i32 [ %v1_852c, %dec_label_pc_851c ], [ 0, %dec_label_pc_8518 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_8520 = mul i32 %v1_8520, 8
  %v5_8520 = add i32 %v4_8520, %stack_var_-52.3
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_8528, i32 ptrtoint (i32* @global_var_12f40.20 to i32))
  %v0_852c = load i32, i32* %r4.global-to-local, align 4
  %v1_852c = add i32 %v0_852c, 1
  store i32 %v1_852c, i32* %r4.global-to-local, align 4
  %v0_8530 = load i32, i32* %sb.global-to-local, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_852c
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_8538:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8510
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_830c, i32* @r4, align 4
  store i32 %v6_830c, i32* @r5, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v15_830c, i32* @r8, align 4
  store i32 %v18_830c, i32* %sb.global-to-local, align 4
  store i32 %v21_830c, i32* %sl.global-to-local, align 4
  store i32 %v24_830c, i32* %fp.global-to-local, align 4
  store i32 %v27_830c, i32* @lr, align 4
  %v0_8544 = call i32 @function_12f40()
  store i32 %v0_8544, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %bb42, %dec_label_pc_8538
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_8538 ], [ %stack_var_-52.2, %bb42 ]
  %v2_854c = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_854c = zext i8 %v2_854c to i32
  %v2_8550 = icmp eq i8 %v2_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8550, label %dec_label_pc_8598, label %dec_label_pc_8558

dec_label_pc_8558:                                ; preds = %dec_label_pc_8548
  %v2_855c = load i32, i32* @global_var_1d864.24, align 4
  store i32 %v2_855c, i32* %r0.global-to-local, align 4
  %v1_8560 = inttoptr i32 %v2_855c to i32*
  %v2_8560 = load i32, i32* %v1_8560, align 4
  store i32 %v2_8560, i32* @ip, align 4
  store i32 %v4_833c, i32* %r4.global-to-local, align 4
  %v1_8568 = add i32 %v2_8560, 4
  %v2_8568 = inttoptr i32 %v1_8568 to i8*
  %v3_8568 = load i8, i8* %v2_8568, align 1
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  %v9_8570 = icmp eq i8 %v3_8568, %v3_833c
  store i1 %v9_8570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8570, label %dec_label_pc_85a0, label %dec_label_pc_858c.preheader

dec_label_pc_858c.preheader:                      ; preds = %dec_label_pc_8558
  %v0_858c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_858c

dec_label_pc_857c:                                ; preds = %dec_label_pc_858c
  %v4_857c = mul i32 %v1_858c, 4
  %v5_857c = add i32 %v4_857c, %v2_855c
  %v6_857c = inttoptr i32 %v5_857c to i32*
  %v7_857c = load i32, i32* %v6_857c, align 4
  store i32 %v7_857c, i32* @ip, align 4
  %v1_8580 = add i32 %v7_857c, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v9_8584 = icmp eq i8 %v3_8580, %v3_833c
  store i1 %v9_8584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8584, label %dec_label_pc_85a0, label %dec_label_pc_858c

dec_label_pc_858c:                                ; preds = %dec_label_pc_858c.preheader, %dec_label_pc_857c
  %v0_858c = phi i32 [ %v0_858c.pre, %dec_label_pc_858c.preheader ], [ %v1_858c, %dec_label_pc_857c ]
  %v1_858c = add i32 %v0_858c, 1
  %v9_8590 = icmp eq i32 %v1_858c, %v3_854c
  store i1 %v9_8590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8590, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_8598:                                ; preds = %dec_label_pc_858c, %dec_label_pc_8548, %dec_label_pc_85a0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_859c = call i32 @function_13684(i32 0)
  store i32 %v1_859c, i32* %r0.global-to-local, align 4
  %v0_85d8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_85a0

dec_label_pc_85a0:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8558, %dec_label_pc_8598
  %v0_85d8 = phi i32 [ %v2_8560, %dec_label_pc_8558 ], [ %v0_85d8.pre, %dec_label_pc_8598 ], [ %v7_857c, %dec_label_pc_857c ]
  %v0_85a0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v2_85c4 = call i32 @llvm.bswap.i32(i32 %v0_85a0)
  store i32 %v2_85c4, i32* %r0.global-to-local, align 4
  %v0_85cc = load i32, i32* @r8, align 4
  store i32 %v0_85cc, i32* %r1.global-to-local, align 4
  %v1_85d8 = inttoptr i32 %v0_85d8 to i32*
  %v2_85d8 = load i32, i32* %v1_85d8, align 4
  call void @__pseudo_branch(i32 %v2_85d8)
  br label %dec_label_pc_8598

; uselistorder directives
  uselistorder i32 %v1_858c, { 2, 0, 1 }
  uselistorder i1 %v9_8584, { 1, 0 }
  uselistorder i1 %v9_8570, { 1, 0 }
  uselistorder i32 %v1_852c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_84ec, { 1, 0 }
  uselistorder i1 %v7_84d4, { 1, 0 }
  uselistorder i32 %v0_84d0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_8488, { 1, 0 }
  uselistorder i32 %v1_8480, { 2, 0, 1, 3 }
  uselistorder i32 %v4_847c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8410, { 0, 2, 1 }
  uselistorder i32 %v2_83fc, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_83e0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_83bc, { 1, 0 }
  uselistorder i32 %v0_83a0, { 0, 2, 1 }
  uselistorder i32 %v0_837c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8370, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_835c, { 2, 1, 0 }
  uselistorder i32 %v4_8348, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_831c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_830c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 9, 5, 6, 3, 7, 25, 8, 2, 12, 13, 17, 14, 10, 11, 15, 16, 23, 18, 20, 19, 21, 22, 26, 24, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 2, 3, 0, 5, 4, 6 }
  uselistorder label %dec_label_pc_85a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8598, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 1, 0 }
  uselistorder label %dec_label_pc_8548, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_84f4, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8330, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_85e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e8:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e8 = load i32, i32* @r4, align 4
  store i32 %v3_85e8, i32* %stack_var_-24, align 4
  %v6_85e8 = load i32, i32* @r5, align 4
  %v9_85e8 = load i32, i32* @r6, align 4
  %v12_85e8 = load i32, i32* @r7, align 4
  %v15_85e8 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85f4 = call i32 @function_12ee8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1d860.22 to i32), i32* @r4, align 4
  %v2_85fc = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_85fc = zext i8 %v2_85fc to i32
  store i32 ptrtoint (i32* @global_var_1d864.24 to i32), i32* @r6, align 4
  store i32 45852, i32* %r2.global-to-local, align 4
  store i32 %v2_85f4, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8610 = mul nuw nsw i32 %v3_85fc, 4
  store i32 %v3_8610, i32* %r1.global-to-local, align 4
  %v2_8614 = load i32, i32* @global_var_1d864.24, align 4
  %v2_8618 = inttoptr i32 %v2_85f4 to i32*
  store i32 45852, i32* %v2_8618, align 4
  %v3_861c = load i32, i32* @r5, align 4
  %v4_861c = add i32 %v3_861c, 4
  %v5_861c = inttoptr i32 %v4_861c to i8*
  store i8 0, i8* %v5_861c, align 1
  %v0_8620 = load i32, i32* %r1.global-to-local, align 4
  %v1_8620 = add i32 %v0_8620, 4
  store i32 %v1_8620, i32* %r1.global-to-local, align 4
  %v5_8624 = call i32 @function_13030(i32 %v2_8614, i32 %v1_8620, i32 45852, i32 0)
  %v2_8628 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_8628 = zext i8 %v2_8628 to i32
  store i32 %v3_8628, i32* %r3.global-to-local, align 4
  store i32 %v5_8624, i32* %ip.global-to-local, align 4
  %v0_8630 = load i32, i32* @r5, align 4
  %v5_8630 = mul nuw nsw i32 %v3_8628, 4
  %v6_8630 = add i32 %v5_8630, %v5_8624
  %v7_8630 = inttoptr i32 %v6_8630 to i32*
  store i32 %v0_8630, i32* %v7_8630, align 4
  store i32 ptrtoint (i8* @global_var_1d861.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_8640 = load i32, i32* @r4, align 4
  %v4_8640 = inttoptr i32 %v3_8640 to i8*
  store i8 ptrtoint (i8* @global_var_1d861.29 to i8), i8* %v4_8640, align 1
  %v0_8644 = load i32, i32* %ip.global-to-local, align 4
  %v1_8644 = load i32, i32* @r6, align 4
  %v2_8644 = inttoptr i32 %v1_8644 to i32*
  store i32 %v0_8644, i32* %v2_8644, align 4
  %v2_8648 = call i32 @function_12ee8(i32 1, i32 8)
  %v2_864c = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_864c = zext i8 %v2_864c to i32
  store i32 ptrtoint (i32* @global_var_b9bc.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_8648, i32* @r5, align 4
  %v3_865c = mul nuw nsw i32 %v3_864c, 4
  store i32 %v3_865c, i32* %r1.global-to-local, align 4
  %v2_8660 = load i32, i32* @global_var_1d864.24, align 4
  %v2_8664 = inttoptr i32 %v2_8648 to i32*
  store i32 ptrtoint (i32* @global_var_b9bc.31 to i32), i32* %v2_8664, align 4
  %v0_8668 = load i32, i32* @r7, align 4
  %v1_8668 = trunc i32 %v0_8668 to i8
  %v2_8668 = load i32, i32* @r5, align 4
  %v3_8668 = add i32 %v2_8668, 4
  %v4_8668 = inttoptr i32 %v3_8668 to i8*
  store i8 %v1_8668, i8* %v4_8668, align 1
  %v0_866c = load i32, i32* %r1.global-to-local, align 4
  %v1_866c = add i32 %v0_866c, 4
  store i32 %v1_866c, i32* %r1.global-to-local, align 4
  %v5_8670 = call i32 @function_13030(i32 %v2_8660, i32 %v1_866c, i32 sext (i8 ptrtoint (i8* @global_var_1d861.29 to i8) to i32), i32 ptrtoint (i32* @global_var_b9bc.31 to i32))
  %v2_8674 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_8674 = zext i8 %v2_8674 to i32
  store i32 %v3_8674, i32* %r3.global-to-local, align 4
  store i32 %v5_8670, i32* %ip.global-to-local, align 4
  %v0_867c = load i32, i32* @r5, align 4
  %v5_867c = mul nuw nsw i32 %v3_8674, 4
  %v6_867c = add i32 %v5_867c, %v5_8670
  %v7_867c = inttoptr i32 %v6_867c to i32*
  store i32 %v0_867c, i32* %v7_867c, align 4
  %v0_8680 = load i32, i32* %r3.global-to-local, align 4
  %v1_8680 = load i32, i32* @r7, align 4
  %v2_8680 = add i32 %v1_8680, %v0_8680
  store i32 %v2_8680, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_868c = load i32, i32* %ip.global-to-local, align 4
  %v1_868c = load i32, i32* @r6, align 4
  %v2_868c = inttoptr i32 %v1_868c to i32*
  store i32 %v0_868c, i32* %v2_868c, align 4
  %v0_8690 = load i32, i32* %r2.global-to-local, align 4
  %v1_8690 = trunc i32 %v0_8690 to i8
  %v2_8690 = load i32, i32* @r4, align 4
  %v3_8690 = inttoptr i32 %v2_8690 to i8*
  store i8 %v1_8690, i8* %v3_8690, align 1
  %v2_8694 = call i32 @function_12ee8(i32 %v1_8680, i32 8)
  %v2_8698 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_8698 = zext i8 %v2_8698 to i32
  store i32 ptrtoint (i32* @global_var_beb8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8694, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_86a8 = mul nuw nsw i32 %v3_8698, 4
  store i32 %v3_86a8, i32* %r1.global-to-local, align 4
  %v2_86ac = load i32, i32* @global_var_1d864.24, align 4
  %v2_86b0 = inttoptr i32 %v2_8694 to i32*
  store i32 ptrtoint (i32* @global_var_beb8.33 to i32), i32* %v2_86b0, align 4
  %v3_86b4 = load i32, i32* @r5, align 4
  %v4_86b4 = add i32 %v3_86b4, 4
  %v5_86b4 = inttoptr i32 %v4_86b4 to i8*
  store i8 2, i8* %v5_86b4, align 1
  %v0_86b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_86b8 = add i32 %v0_86b8, 4
  store i32 %v1_86b8, i32* %r1.global-to-local, align 4
  %v5_86bc = call i32 @function_13030(i32 %v2_86ac, i32 %v1_86b8, i32 ptrtoint (i32* @global_var_beb8.33 to i32), i32 2)
  %v2_86c0 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_86c0 = zext i8 %v2_86c0 to i32
  store i32 %v3_86c0, i32* %r3.global-to-local, align 4
  store i32 %v5_86bc, i32* %ip.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r7, align 4
  %v2_86c8 = add i32 %v1_86c8, %v3_86c0
  %v3_86c8 = trunc i32 %v2_86c8 to i8
  store i32 %v2_86c8, i32* %r2.global-to-local, align 4
  %v0_86cc = load i32, i32* @r5, align 4
  %v5_86cc = mul nuw nsw i32 %v3_86c0, 4
  %v6_86cc = add i32 %v5_86cc, %v5_86bc
  %v7_86cc = inttoptr i32 %v6_86cc to i32*
  store i32 %v0_86cc, i32* %v7_86cc, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r7, align 4
  %v3_86d8 = load i32, i32* @r4, align 4
  %v4_86d8 = inttoptr i32 %v3_86d8 to i8*
  store i8 %v3_86c8, i8* %v4_86d8, align 1
  %v0_86dc = load i32, i32* %ip.global-to-local, align 4
  %v1_86dc = load i32, i32* @r6, align 4
  %v2_86dc = inttoptr i32 %v1_86dc to i32*
  store i32 %v0_86dc, i32* %v2_86dc, align 4
  %v2_86e0 = call i32 @function_12ee8(i32 %v0_86d4, i32 8)
  %v2_86e4 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_86e4 = zext i8 %v2_86e4 to i32
  store i32 ptrtoint (i32* @global_var_b000.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_86e0, i32* @r5, align 4
  %v3_86f4 = mul nuw nsw i32 %v3_86e4, 4
  store i32 %v3_86f4, i32* %r1.global-to-local, align 4
  %v2_86f8 = load i32, i32* @global_var_1d864.24, align 4
  %v2_86fc = inttoptr i32 %v2_86e0 to i32*
  store i32 ptrtoint (i32* @global_var_b000.35 to i32), i32* %v2_86fc, align 4
  %v0_8700 = load i32, i32* @r8, align 4
  %v1_8700 = trunc i32 %v0_8700 to i8
  %v2_8700 = load i32, i32* @r5, align 4
  %v3_8700 = add i32 %v2_8700, 4
  %v4_8700 = inttoptr i32 %v3_8700 to i8*
  store i8 %v1_8700, i8* %v4_8700, align 1
  %v0_8704 = load i32, i32* %r1.global-to-local, align 4
  %v1_8704 = add i32 %v0_8704, 4
  store i32 %v1_8704, i32* %r1.global-to-local, align 4
  %v5_8708 = call i32 @function_13030(i32 %v2_86f8, i32 %v1_8704, i32 %v2_86c8, i32 ptrtoint (i32* @global_var_b000.35 to i32))
  %v2_870c = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_870c = zext i8 %v2_870c to i32
  store i32 %v3_870c, i32* %r3.global-to-local, align 4
  store i32 %v5_8708, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* @r5, align 4
  %v5_8714 = mul nuw nsw i32 %v3_870c, 4
  %v6_8714 = add i32 %v5_8714, %v5_8708
  %v7_8714 = inttoptr i32 %v6_8714 to i32*
  store i32 %v0_8714, i32* %v7_8714, align 4
  %v0_8718 = load i32, i32* %r3.global-to-local, align 4
  %v1_8718 = load i32, i32* @r7, align 4
  %v2_8718 = add i32 %v1_8718, %v0_8718
  store i32 %v2_8718, i32* %r2.global-to-local, align 4
  %v0_871c = load i32, i32* @r8, align 4
  store i32 %v0_871c, i32* %r1.global-to-local, align 4
  %v0_8724 = load i32, i32* %ip.global-to-local, align 4
  %v1_8724 = load i32, i32* @r6, align 4
  %v2_8724 = inttoptr i32 %v1_8724 to i32*
  store i32 %v0_8724, i32* %v2_8724, align 4
  %v0_8728 = load i32, i32* %r2.global-to-local, align 4
  %v1_8728 = trunc i32 %v0_8728 to i8
  %v2_8728 = load i32, i32* @r4, align 4
  %v3_8728 = inttoptr i32 %v2_8728 to i8*
  store i8 %v1_8728, i8* %v3_8728, align 1
  %v2_872c = call i32 @function_12ee8(i32 %v1_8718, i32 %v0_871c)
  %v2_8730 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_8730 = zext i8 %v2_8730 to i32
  store i32 ptrtoint (i32* @global_var_a880.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_872c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_8740 = mul nuw nsw i32 %v3_8730, 4
  store i32 %v3_8740, i32* %r1.global-to-local, align 4
  %v2_8744 = load i32, i32* @global_var_1d864.24, align 4
  %v2_8748 = inttoptr i32 %v2_872c to i32*
  store i32 ptrtoint (i32* @global_var_a880.37 to i32), i32* %v2_8748, align 4
  %v3_874c = load i32, i32* @r5, align 4
  %v4_874c = add i32 %v3_874c, 4
  %v5_874c = inttoptr i32 %v4_874c to i8*
  store i8 3, i8* %v5_874c, align 1
  %v0_8750 = load i32, i32* %r1.global-to-local, align 4
  %v1_8750 = add i32 %v0_8750, 4
  store i32 %v1_8750, i32* %r1.global-to-local, align 4
  %v5_8754 = call i32 @function_13030(i32 %v2_8744, i32 %v1_8750, i32 ptrtoint (i32* @global_var_a880.37 to i32), i32 3)
  %v2_8758 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_8758 = zext i8 %v2_8758 to i32
  store i32 %v3_8758, i32* %r3.global-to-local, align 4
  store i32 %v5_8754, i32* %ip.global-to-local, align 4
  %v0_8760 = load i32, i32* @r5, align 4
  %v5_8760 = mul nuw nsw i32 %v3_8758, 4
  %v6_8760 = add i32 %v5_8760, %v5_8754
  %v7_8760 = inttoptr i32 %v6_8760 to i32*
  store i32 %v0_8760, i32* %v7_8760, align 4
  %v0_8764 = load i32, i32* %r3.global-to-local, align 4
  %v1_8764 = load i32, i32* @r7, align 4
  %v2_8764 = add i32 %v1_8764, %v0_8764
  store i32 %v2_8764, i32* %r2.global-to-local, align 4
  %v0_8768 = load i32, i32* @r8, align 4
  store i32 %v0_8768, i32* %r1.global-to-local, align 4
  %v0_8770 = load i32, i32* %ip.global-to-local, align 4
  %v1_8770 = load i32, i32* @r6, align 4
  %v2_8770 = inttoptr i32 %v1_8770 to i32*
  store i32 %v0_8770, i32* %v2_8770, align 4
  %v0_8774 = load i32, i32* %r2.global-to-local, align 4
  %v1_8774 = trunc i32 %v0_8774 to i8
  %v2_8774 = load i32, i32* @r4, align 4
  %v3_8774 = inttoptr i32 %v2_8774 to i8*
  store i8 %v1_8774, i8* %v3_8774, align 1
  %v2_8778 = call i32 @function_12ee8(i32 %v1_8764, i32 %v0_8768)
  %v2_877c = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_877c = zext i8 %v2_877c to i32
  store i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8778, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_878c = mul nuw nsw i32 %v3_877c, 4
  store i32 %v3_878c, i32* %r1.global-to-local, align 4
  %v2_8790 = load i32, i32* @global_var_1d864.24, align 4
  %v2_8794 = inttoptr i32 %v2_8778 to i32*
  store i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32* %v2_8794, align 4
  %v3_8798 = load i32, i32* @r5, align 4
  %v4_8798 = add i32 %v3_8798, 4
  %v5_8798 = inttoptr i32 %v4_8798 to i8*
  store i8 4, i8* %v5_8798, align 1
  %v0_879c = load i32, i32* %r1.global-to-local, align 4
  %v1_879c = add i32 %v0_879c, 4
  store i32 %v1_879c, i32* %r1.global-to-local, align 4
  %v5_87a0 = call i32 @function_13030(i32 %v2_8790, i32 %v1_879c, i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32 4)
  %v2_87a4 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_87a4 = zext i8 %v2_87a4 to i32
  store i32 %v3_87a4, i32* %r3.global-to-local, align 4
  store i32 %v5_87a0, i32* %ip.global-to-local, align 4
  %v0_87ac = load i32, i32* @r5, align 4
  %v5_87ac = mul nuw nsw i32 %v3_87a4, 4
  %v6_87ac = add i32 %v5_87ac, %v5_87a0
  %v7_87ac = inttoptr i32 %v6_87ac to i32*
  store i32 %v0_87ac, i32* %v7_87ac, align 4
  %v0_87b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87b0 = load i32, i32* @r7, align 4
  %v2_87b0 = add i32 %v1_87b0, %v0_87b0
  store i32 %v2_87b0, i32* %r2.global-to-local, align 4
  %v0_87b4 = load i32, i32* @r8, align 4
  store i32 %v0_87b4, i32* %r1.global-to-local, align 4
  %v0_87bc = load i32, i32* %ip.global-to-local, align 4
  %v1_87bc = load i32, i32* @r6, align 4
  %v2_87bc = inttoptr i32 %v1_87bc to i32*
  store i32 %v0_87bc, i32* %v2_87bc, align 4
  %v0_87c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87c0 = trunc i32 %v0_87c0 to i8
  %v2_87c0 = load i32, i32* @r4, align 4
  %v3_87c0 = inttoptr i32 %v2_87c0 to i8*
  store i8 %v1_87c0, i8* %v3_87c0, align 1
  %v2_87c4 = call i32 @function_12ee8(i32 %v1_87b0, i32 %v0_87b4)
  %v2_87c8 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_87c8 = zext i8 %v2_87c8 to i32
  store i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87c4, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_87d8 = mul nuw nsw i32 %v3_87c8, 4
  store i32 %v3_87d8, i32* %r1.global-to-local, align 4
  %v2_87dc = load i32, i32* @global_var_1d864.24, align 4
  %v2_87e0 = inttoptr i32 %v2_87c4 to i32*
  store i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32* %v2_87e0, align 4
  %v3_87e4 = load i32, i32* @r5, align 4
  %v4_87e4 = add i32 %v3_87e4, 4
  %v5_87e4 = inttoptr i32 %v4_87e4 to i8*
  store i8 5, i8* %v5_87e4, align 1
  %v0_87e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87e8 = add i32 %v0_87e8, 4
  store i32 %v1_87e8, i32* %r1.global-to-local, align 4
  %v5_87ec = call i32 @function_13030(i32 %v2_87dc, i32 %v1_87e8, i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32 5)
  %v2_87f0 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_87f0 = zext i8 %v2_87f0 to i32
  store i32 %v3_87f0, i32* %r3.global-to-local, align 4
  store i32 %v5_87ec, i32* %ip.global-to-local, align 4
  %v0_87f8 = load i32, i32* @r5, align 4
  %v5_87f8 = mul nuw nsw i32 %v3_87f0, 4
  %v6_87f8 = add i32 %v5_87f8, %v5_87ec
  %v7_87f8 = inttoptr i32 %v6_87f8 to i32*
  store i32 %v0_87f8, i32* %v7_87f8, align 4
  %v0_87fc = load i32, i32* %r3.global-to-local, align 4
  %v1_87fc = load i32, i32* @r7, align 4
  %v2_87fc = add i32 %v1_87fc, %v0_87fc
  store i32 %v2_87fc, i32* %r2.global-to-local, align 4
  %v0_8800 = load i32, i32* @r8, align 4
  store i32 %v0_8800, i32* %r1.global-to-local, align 4
  %v0_8808 = load i32, i32* %ip.global-to-local, align 4
  %v1_8808 = load i32, i32* @r6, align 4
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  store i32 %v0_8808, i32* %v2_8808, align 4
  %v0_880c = load i32, i32* %r2.global-to-local, align 4
  %v1_880c = trunc i32 %v0_880c to i8
  %v2_880c = load i32, i32* @r4, align 4
  %v3_880c = inttoptr i32 %v2_880c to i8*
  store i8 %v1_880c, i8* %v3_880c, align 1
  %v2_8810 = call i32 @function_12ee8(i32 %v1_87fc, i32 %v0_8800)
  %v2_8814 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_8814 = zext i8 %v2_8814 to i32
  store i32 ptrtoint (i32* @global_var_9078.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8810, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_8824 = mul nuw nsw i32 %v3_8814, 4
  store i32 %v3_8824, i32* %r1.global-to-local, align 4
  %v2_8828 = load i32, i32* @global_var_1d864.24, align 4
  %v2_882c = inttoptr i32 %v2_8810 to i32*
  store i32 ptrtoint (i32* @global_var_9078.43 to i32), i32* %v2_882c, align 4
  %v3_8830 = load i32, i32* @r5, align 4
  %v4_8830 = add i32 %v3_8830, 4
  %v5_8830 = inttoptr i32 %v4_8830 to i8*
  store i8 6, i8* %v5_8830, align 1
  %v0_8834 = load i32, i32* %r1.global-to-local, align 4
  %v1_8834 = add i32 %v0_8834, 4
  store i32 %v1_8834, i32* %r1.global-to-local, align 4
  %v5_8838 = call i32 @function_13030(i32 %v2_8828, i32 %v1_8834, i32 ptrtoint (i32* @global_var_9078.43 to i32), i32 6)
  %v2_883c = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_883c = zext i8 %v2_883c to i32
  store i32 %v3_883c, i32* %r3.global-to-local, align 4
  store i32 %v5_8838, i32* %ip.global-to-local, align 4
  %v0_8844 = load i32, i32* @r5, align 4
  %v5_8844 = mul nuw nsw i32 %v3_883c, 4
  %v6_8844 = add i32 %v5_8844, %v5_8838
  %v7_8844 = inttoptr i32 %v6_8844 to i32*
  store i32 %v0_8844, i32* %v7_8844, align 4
  %v0_8848 = load i32, i32* %r3.global-to-local, align 4
  %v1_8848 = load i32, i32* @r7, align 4
  %v2_8848 = add i32 %v1_8848, %v0_8848
  store i32 %v2_8848, i32* %r2.global-to-local, align 4
  %v0_884c = load i32, i32* @r8, align 4
  store i32 %v0_884c, i32* %r1.global-to-local, align 4
  %v1_8854 = trunc i32 %v2_8848 to i8
  %v2_8854 = load i32, i32* @r4, align 4
  %v3_8854 = inttoptr i32 %v2_8854 to i8*
  store i8 %v1_8854, i8* %v3_8854, align 1
  %v0_8858 = load i32, i32* %ip.global-to-local, align 4
  %v1_8858 = load i32, i32* @r6, align 4
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  store i32 %v0_8858, i32* %v2_8858, align 4
  %v2_885c = call i32 @function_12ee8(i32 %v1_8848, i32 %v0_884c)
  %v2_8860 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_8860 = zext i8 %v2_8860 to i32
  store i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_885c, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8870 = mul nuw nsw i32 %v3_8860, 4
  store i32 %v3_8870, i32* %r1.global-to-local, align 4
  %v2_8874 = load i32, i32* @global_var_1d864.24, align 4
  %v2_8878 = inttoptr i32 %v2_885c to i32*
  store i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32* %v2_8878, align 4
  %v3_887c = load i32, i32* @r5, align 4
  %v4_887c = add i32 %v3_887c, 4
  %v5_887c = inttoptr i32 %v4_887c to i8*
  store i8 7, i8* %v5_887c, align 1
  %v0_8880 = load i32, i32* %r1.global-to-local, align 4
  %v1_8880 = add i32 %v0_8880, 4
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v5_8884 = call i32 @function_13030(i32 %v2_8874, i32 %v1_8880, i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32 7)
  %v2_8888 = load i8, i8* bitcast (i8** @global_var_1d860.22 to i8*), align 4
  %v3_8888 = zext i8 %v2_8888 to i32
  store i32 %v3_8888, i32* %r3.global-to-local, align 4
  %v1_888c = load i32, i32* @r6, align 4
  %v2_888c = inttoptr i32 %v1_888c to i32*
  store i32 %v5_8884, i32* %v2_888c, align 4
  %v0_8890 = load i32, i32* @r5, align 4
  %v2_8890 = load i32, i32* %r3.global-to-local, align 4
  %v5_8890 = mul i32 %v2_8890, 4
  %v6_8890 = add i32 %v5_8890, %v5_8884
  %v7_8890 = inttoptr i32 %v6_8890 to i32*
  store i32 %v0_8890, i32* %v7_8890, align 4
  %v0_8894 = load i32, i32* %r3.global-to-local, align 4
  %v1_8894 = load i32, i32* @r7, align 4
  %v2_8894 = add i32 %v1_8894, %v0_8894
  store i32 %v2_8894, i32* %r2.global-to-local, align 4
  %v1_889c = trunc i32 %v2_8894 to i8
  %v2_889c = load i32, i32* @r4, align 4
  %v3_889c = inttoptr i32 %v2_889c to i8*
  store i8 %v1_889c, i8* %v3_889c, align 1
  %v2_88a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_88a0, i32* @r4, align 4
  store i32 %v6_85e8, i32* @r5, align 4
  store i32 %v9_85e8, i32* @r6, align 4
  store i32 %v12_85e8, i32* @r7, align 4
  store i32 %v15_85e8, i32* @r8, align 4
  ret i32 %v1_8894

; uselistorder directives
  uselistorder i32 %v1_8894, { 1, 0 }
  uselistorder i32 %v1_8848, { 1, 0 }
  uselistorder i32 %v1_87fc, { 1, 0 }
  uselistorder i32 %v1_87b0, { 1, 0 }
  uselistorder i32 %v1_8764, { 1, 0 }
  uselistorder i32 %v1_8718, { 1, 0 }
  uselistorder i32 %v2_86c8, { 0, 2, 1 }
  uselistorder i32 %v3_86c0, { 1, 0, 2 }
  uselistorder i32 %v1_8680, { 1, 0 }
  uselistorder i32* @global_var_1d864.24, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i8* bitcast (i8** @global_var_1d860.22 to i8*), { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_88d0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_88d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_88d0 = load i32, i32* @r4, align 4
  %v15_88d0 = load i32, i32* @r8, align 4
  %v21_88d0 = load i32, i32* @sl, align 4
  %v24_88d0 = load i32, i32* @fp, align 4
  %v1_88d4 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_88d4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_88f0 = urem i32 %arg4, 256
  store i32 %v1_88f0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_8900 = call i32 @function_12ee8(i32 %v1_88d4, i32 4)
  %v0_8904 = load i32, i32* @r5, align 4
  store i32 %v0_8904, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8910 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8910, i32* %r3.global-to-local, align 4
  %v0_8914 = load i32, i32* @r4, align 4
  store i32 %v0_8914, i32* %r0.global-to-local, align 4
  %v5_8918 = inttoptr i32 %v0_8904 to i32*
  %v6_8918 = call i32 @function_829c(i32 %v0_8914, i32* %v5_8918, i32 2, i32 %v0_8910, i32 %v2_8900)
  %v1_8924 = urem i32 %v6_8918, 256
  store i32 %v1_8924, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8930 = load i32, i32* @r5, align 4
  store i32 %v0_8930, i32* %r1.global-to-local, align 4
  %v0_8934 = load i32, i32* @r4, align 4
  store i32 %v0_8934, i32* %r0.global-to-local, align 4
  %v5_8938 = trunc i32 %v6_8918 to i8
  %v6_893c = inttoptr i32 %v0_8930 to i32*
  %v7_893c = call i32 @function_829c(i32 %v0_8934, i32* %v6_893c, i32 3, i32 65535, i32 %v6_8918)
  %v0_8940 = load i32, i32* @r5, align 4
  store i32 %v0_8940, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_893c, i32* @r7, align 4
  %v0_8950 = load i32, i32* @r4, align 4
  store i32 %v0_8950, i32* %r0.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v0_8940 to i32*
  %v6_8954 = call i32 @function_829c(i32 %v0_8950, i32* %v5_8954, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_895c = urem i32 %v6_8954, 256
  store i32 %v1_895c, i32* %ip.global-to-local, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  store i32 %v0_8960, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_896c = load i32, i32* @r4, align 4
  store i32 %v0_896c, i32* %r0.global-to-local, align 4
  %v5_8970 = trunc i32 %v6_8954 to i8
  %v6_8974 = inttoptr i32 %v0_8960 to i32*
  %v7_8974 = call i32 @function_829c(i32 %v0_896c, i32* %v6_8974, i32 5, i32 1, i32 %v6_8954)
  %v1_8980 = urem i32 %v7_8974, 256
  store i32 %v1_8980, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_898c = load i32, i32* @r5, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  %v0_8990 = load i32, i32* @r4, align 4
  store i32 %v0_8990, i32* %r0.global-to-local, align 4
  %v5_8998 = inttoptr i32 %v0_898c to i32*
  %v6_8998 = call i32 @function_829c(i32 %v0_8990, i32* %v5_8998, i32 6, i32 65535, i32 %v1_8980)
  %v0_89a4 = load i32, i32* @r5, align 4
  store i32 %v0_89a4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_89b0 = load i32, i32* @r4, align 4
  store i32 %v0_89b0, i32* %r0.global-to-local, align 4
  %v5_89b4 = inttoptr i32 %v0_89a4 to i32*
  %v6_89b4 = call i32 @function_829c(i32 %v0_89b0, i32* %v5_89b4, i32 7, i32 65535, i32 %v6_8998)
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  %v0_89bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89bc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_89b4, i32* @sl, align 4
  %v0_89c8 = load i32, i32* @r4, align 4
  store i32 %v0_89c8, i32* %r0.global-to-local, align 4
  %v5_89cc = inttoptr i32 %v0_89b8 to i32*
  %v6_89cc = call i32 @function_829c(i32 %v0_89c8, i32* %v5_89cc, i32 %v0_89bc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r5, align 4
  store i32 %v0_89dc, i32* %r1.global-to-local, align 4
  %v0_89e0 = load i32, i32* @r4, align 4
  store i32 %v0_89e0, i32* %r0.global-to-local, align 4
  %v5_89e4 = inttoptr i32 %v0_89dc to i32*
  %v6_89e4 = call i32 @function_829c(i32 %v0_89e0, i32* %v5_89e4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_89ec = urem i32 %v6_89e4, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  %v0_89f0 = load i32, i32* @r5, align 4
  store i32 %v0_89f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89f8, i32* %r3.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a04 = inttoptr i32 %v0_89f0 to i32*
  %v6_8a04 = call i32 @function_829c(i32 %v0_89fc, i32* %v5_8a04, i32 18, i32 %v0_89f8, i32 %v1_89ec)
  %v0_8a0c = load i32, i32* @r5, align 4
  store i32 %v0_8a0c, i32* %r1.global-to-local, align 4
  %v2_8a10 = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_8a10, i32* %r3.global-to-local, align 4
  store i32 %v6_8a04, i32* @r8, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8a1c = load i32, i32* @r4, align 4
  store i32 %v0_8a1c, i32* %r0.global-to-local, align 4
  %v5_8a20 = inttoptr i32 %v0_8a0c to i32*
  %v6_8a20 = call i32 @function_829c(i32 %v0_8a1c, i32* %v5_8a20, i32 19, i32 %v2_8a10, i32 ptrtoint (i32* @0 to i32))
  %v0_8a28 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a28, i32* %r0.global-to-local, align 4
  %v1_8a2c = inttoptr i32 %v0_8a28 to i32*
  %v2_8a2c = call i32 @function_125b0(i32* %v1_8a2c)
  %v1_8a30 = load i32, i32* @r6, align 4
  %v2_8a30 = add i32 %v1_8a30, %v2_8a2c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_8a44 = call i32 @function_12bfc(i32 2, i32 3, i32 6)
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v7_8a48 = icmp eq i32 %v3_8a44, -1
  store i1 %v7_8a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a48, label %dec_label_pc_9060, label %dec_label_pc_8a54

dec_label_pc_8a54:                                ; preds = %dec_label_pc_88d0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8a5c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8a5c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_8a64 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a64, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8a70 = call i32 @function_12bcc(i32 %v3_8a44, i32 %v0_8a64, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8a70, i32* %r0.global-to-local, align 4
  %v7_8a74 = icmp eq i32 %v6_8a70, -1
  store i1 %v7_8a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a74, label %dec_label_pc_9068, label %dec_label_pc_8a7c

dec_label_pc_8a7c:                                ; preds = %dec_label_pc_8a54
  %v0_8a88 = load i32, i32* @sl, align 4
  %v3_8a88 = mul i32 %v0_8a88, 65536
  store i32 %v3_8a88, i32* %sl.global-to-local, align 4
  %v0_8a8c = load i32, i32* @r7, align 4
  %v2_8a94 = icmp eq i32 %v1_88d4, 0
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  %v0_8a98 = load i32, i32* @r8, align 4
  %v1_8a98 = urem i32 %v0_8a98, 256
  store i32 %v1_8a98, i32* %r8.global-to-local, align 4
  %v3_8a9c = urem i32 %v0_8a8c, 65536
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  %v3_8aa0 = urem i32 %v6_8998, 65536
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v3_8aa4 = urem i32 %v0_8a88, 65536
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v0_8ab0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ab0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_8d44.preheader, label %dec_label_pc_8ac4

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8a7c
  %v3_8acc = mul i32 %v6_89cc, 65536
  %v1_8ad4 = urem i32 %v6_8998, 256
  %v1_8adc = add i32 %v3_8acc, 524288
  %v1_8ae0 = add i32 %v3_8acc, 4325376
  %v1_8ae4 = urem i32 %v0_8a88, 256
  %v1_8ae8 = add i32 %v3_8acc, 1835008
  %v0_8a8c.not = or i32 %v0_8a8c, -65536
  %v1_8af0 = xor i32 %v0_8a8c.not, 65535
  %v3_8af4 = udiv i32 %v1_8ae8, 256
  %tmp82 = udiv i32 %v0_8a8c, 256
  %v1_8b08 = and i32 %v3_8af4, 65280
  store i32 %v1_8b08, i32* %r0.global-to-local, align 4
  %v3_8b2c = mul nuw nsw i32 %v1_8ad4, 256
  %tmp83 = udiv i32 %v6_8998, 256
  %v4_8b34 = urem i32 %tmp83, 256
  %v5_8b34 = or i32 %v4_8b34, %v3_8b2c
  store i32 %v5_8b34, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_8af0, 256
  %v3_8b3c = mul nuw nsw i32 %v1_8ae4, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_8b44 = sdiv i32 %sext23, 16777216
  %v4_8b0c = sdiv i32 %v1_8ae0, 16777216
  %tmp85 = udiv i32 %v0_8a88, 256
  %v4_8b4c = urem i32 %tmp85, 256
  %v5_8b4c = or i32 %v4_8b4c, %v3_8b3c
  store i32 %v5_8b4c, i32* @r7, align 4
  %v1_8b50 = and i32 %tmp84, 65280
  store i32 %v1_8b50, i32* %ip.global-to-local, align 4
  %v4_8b54 = sdiv i32 %v1_8ae8, 16777216
  %v3_8b58 = udiv i32 %v1_8adc, 256
  %tmp86 = udiv i32 %v1_8af0, 256
  %v4_8b5c = urem i32 %tmp86, 256
  %v5_8b5c = or i32 %v4_8b5c, %v1_8b50
  store i32 %v5_8b5c, i32* @r6, align 4
  %v3_8b60 = ashr i32 %v1_8ae0, 31
  %v3_8b64 = ashr i32 %sext23, 31
  %v1_8b68 = and i32 %v3_8b58, 65280
  store i32 %v1_8b68, i32* @r5, align 4
  %v3_8b74 = ashr i32 %v1_8ae8, 31
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v3_8b7832 = udiv i32 %v1_8b50, 256
  store i32 %v3_8b7832, i32* %r3.global-to-local, align 4
  store i32 %v1_8ad4, i32* %r1.global-to-local, align 4
  %v4_8b80 = udiv i32 %v1_8adc, 16777216
  %v5_8b80 = or i32 %v4_8b80, %v1_8b68
  store i32 %v5_8b80, i32* %r8.global-to-local, align 4
  %v5_8b84 = trunc i32 %tmp86 to i8
  store i32 %v0_8ab0, i32* @r4, align 4
  %v3_8b9c33 = udiv i32 %v1_8b68, 256
  store i32 %v3_8b9c33, i32* %sl.global-to-local, align 4
  store i32 %v1_8ae4, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_8af0, 16777216
  %v4_8cc0 = sdiv i32 %sext15, 16777216
  %v2_8cf0 = icmp eq i32 %v1_8a98, 0
  %sext16 = mul i32 %v6_8998, 16777216
  %v4_8d04 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_8d20 = sdiv i32 %sext17, 16777216
  %v1_8c08 = trunc i32 %v4_8b44 to i8
  br label %dec_label_pc_8ba4

dec_label_pc_8ba4:                                ; preds = %bb97, %dec_label_pc_8ac4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8bb0 = call i32 @function_12ee8(i32 1510, i32 4)
  store i32 %v2_8bb0, i32* %r0.global-to-local, align 4
  store i32 %v2_8900, i32* %r2.global-to-local, align 4
  %v3_8bb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8bb8, i32* %r3.global-to-local, align 4
  %v2_8bbc = load i32, i32* @r4, align 4
  %v5_8bbc = mul i32 %v2_8bbc, 4
  %v6_8bbc = add i32 %v5_8bbc, %v2_8900
  %v7_8bbc = inttoptr i32 %v6_8bbc to i32*
  store i32 %v2_8bb0, i32* %v7_8bbc, align 4
  %v0_8bc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8bc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_8bc0 = mul i32 %v1_8bc0, 4
  %v5_8bc0 = add i32 %v4_8bc0, %v0_8bc0
  %v6_8bc0 = inttoptr i32 %v5_8bc0 to i32*
  %v7_8bc0 = load i32, i32* %v6_8bc0, align 4
  store i32 %v7_8bc0, i32* %r4.global-to-local, align 4
  %v1_8bc4 = inttoptr i32 %v7_8bc0 to i8*
  %v2_8bc4 = load i8, i8* %v1_8bc4, align 1
  %tmp = urem i8 %v2_8bc4, 16
  %v1_8bc8 = zext i8 %tmp to i32
  %v1_8bcc = or i32 %v1_8bc8, 64
  store i32 %v1_8bcc, i32* %r2.global-to-local, align 4
  %v1_8bd0 = trunc i32 %v1_8bcc to i8
  store i8 %v1_8bd0, i8* %v1_8bc4, align 1
  %v0_8bd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bd4 = inttoptr i32 %v0_8bd4 to i8*
  %v2_8bd4 = load i8, i8* %v1_8bd4, align 1
  %v1_8bd8 = and i8 %v2_8bd4, -16
  %v1_8bdc = or i8 %v1_8bd8, 5
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  store i8 %v1_8bdc, i8* %v1_8bd4, align 1
  %v2_8bec = load i32, i32* %r4.global-to-local, align 4
  %v3_8bec = add i32 %v2_8bec, 1
  %v4_8bec = inttoptr i32 %v3_8bec to i8*
  store i8 %v5_8938, i8* %v4_8bec, align 1
  %v2_8bf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8bf4 = add i32 %v2_8bf4, 8
  %v4_8bf4 = inttoptr i32 %v3_8bf4 to i8*
  store i8 %v5_8970, i8* %v4_8bf4, align 1
  store i32 %v4_8b44, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_8c00 = load i32, i32* %r1.global-to-local, align 4
  %v9_8c00 = icmp eq i32 %v0_8c00, 0
  store i1 %v9_8c00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8b60, i32* %r2.global-to-local, align 4
  %v2_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c08 = add i32 %v2_8c08, 4
  %v4_8c08 = inttoptr i32 %v3_8c08 to i8*
  store i8 %v1_8c08, i8* %v4_8c08, align 1
  store i32 %v4_8b0c, i32* %r1.global-to-local, align 4
  %v0_8c10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_8ba4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_8c14 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c14 = add i32 %v3_8c14, 6
  %v5_8c14 = inttoptr i32 %v4_8c14 to i8*
  store i8 64, i8* %v5_8c14, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8ba4, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_8c1c = load i32, i32* %r2.global-to-local, align 4
  %v1_8c1c = trunc i32 %v0_8c1c to i8
  %v2_8c1c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c1c = add i32 %v2_8c1c, 3
  %v4_8c1c = inttoptr i32 %v3_8c1c to i8*
  store i8 %v1_8c1c, i8* %v4_8c1c, align 1
  %v0_8c20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c20 = trunc i32 %v0_8c20 to i8
  %v2_8c20 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c20 = add i32 %v2_8c20, 2
  %v4_8c20 = inttoptr i32 %v3_8c20 to i8*
  store i8 %v1_8c20, i8* %v4_8c20, align 1
  %v0_8c24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c24, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  %v1_8c24 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8c24, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_8b64, i32* %r1.global-to-local, align 4
  %v0_8c2c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c2c = trunc i32 %v0_8c2c to i8
  %v2_8c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c2c = add i32 %v2_8c2c, 9
  %v4_8c2c = inttoptr i32 %v3_8c2c to i8*
  store i8 %v1_8c2c, i8* %v4_8c2c, align 1
  %v0_8c30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c30, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_8c30 = load i32, i32* %r2.global-to-local, align 4
  %v2_8c30 = trunc i32 %v1_8c30 to i8
  %v3_8c30 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c30 = add i32 %v3_8c30, 7
  %v5_8c30 = inttoptr i32 %v4_8c30 to i8*
  store i8 %v2_8c30, i8* %v5_8c30, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_8c34 = load i32, i32* %stack_var_-40, align 4
  %v5_8c3c = mul i32 %v3_8c34, 24
  store i32 %v5_8c3c, i32* %r3.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v1_8c44 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c44 = add i32 %v1_8c44, 12
  %v3_8c44 = inttoptr i32 %v2_8c44 to i32*
  store i32 %v6_8a20, i32* %v3_8c44, align 4
  %v0_8c48 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c48 = load i32, i32* @sb, align 4
  %v2_8c48 = add i32 %v1_8c48, %v0_8c48
  store i32 %v2_8c48, i32* %r3.global-to-local, align 4
  %v1_8c4c = add i32 %v2_8c48, 16
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v0_8c50 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c50 = trunc i32 %v0_8c50 to i8
  %v2_8c50 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c50 = add i32 %v2_8c50, 5
  %v4_8c50 = inttoptr i32 %v3_8c50 to i8*
  store i8 %v1_8c50, i8* %v4_8c50, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8c58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c58 = add i32 %v0_8c58, 20
  store i32 %v1_8c58, i32* %r1.global-to-local, align 4
  %v3_8c5c = add i32 %v0_8c58, 22
  %v4_8c5c = inttoptr i32 %v3_8c5c to i8*
  store i8 101, i8* %v4_8c5c, align 1
  %v0_8c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c60 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c60 = add i32 %v1_8c60, 16
  %v3_8c60 = inttoptr i32 %v2_8c60 to i32*
  store i32 %v0_8c60, i32* %v3_8c60, align 4
  %v0_8c64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c64 = add i32 %v0_8c64, 24
  store i32 %v1_8c64, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8c6c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c6c = add i32 %v0_8c6c, -93
  store i32 %v1_8c6c, i32* %r3.global-to-local, align 4
  %v2_8c70 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c70 = add i32 %v2_8c70, 3
  %v4_8c70 = inttoptr i32 %v3_8c70 to i8*
  store i8 88, i8* %v4_8c70, align 1
  %v0_8c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c74 = trunc i32 %v0_8c74 to i8
  %v2_8c74 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 12
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v0_8c78 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c78 = trunc i32 %v0_8c78 to i8
  %v2_8c78 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c78 = add i32 %v2_8c78, 13
  %v4_8c78 = inttoptr i32 %v3_8c78 to i8*
  store i8 %v1_8c78, i8* %v4_8c78, align 1
  %v0_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c7c = add i32 %v0_8c7c, 38
  %v2_8c7c = inttoptr i32 %v1_8c7c to i8*
  %v3_8c7c = load i8, i8* %v2_8c7c, align 1
  %tmp103 = urem i8 %v3_8c7c, 16
  %v1_8c80 = zext i8 %tmp103 to i32
  %v1_8c84 = or i32 %v1_8c80, 64
  store i32 %v1_8c84, i32* %r3.global-to-local, align 4
  %v1_8c88 = trunc i32 %v1_8c84 to i8
  store i8 %v1_8c88, i8* %v2_8c7c, align 1
  %v0_8c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c8c = add i32 %v0_8c8c, 38
  %v2_8c8c = inttoptr i32 %v1_8c8c to i8*
  %v3_8c8c = load i8, i8* %v2_8c8c, align 1
  %v1_8c90 = and i8 %v3_8c8c, -16
  %v1_8c94 = or i8 %v1_8c90, 5
  store i8 %v1_8c94, i8* %v2_8c8c, align 1
  %v0_8ca0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca0 = add i32 %v0_8ca0, 38
  store i32 %v1_8ca0, i32* @r5, align 4
  %v3_8ca4 = add i32 %v0_8ca0, 39
  %v4_8ca4 = inttoptr i32 %v3_8ca4 to i8*
  store i8 %v5_8938, i8* %v4_8ca4, align 1
  store i32 %v4_8b54, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v2_8cb4 = load i32, i32* @r5, align 4
  %v3_8cb4 = add i32 %v2_8cb4, 4
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i8*
  store i8 %v5_8b84, i8* %v4_8cb4, align 1
  %v0_8cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v0_8cb8 to i8
  %v2_8cb8 = load i32, i32* @r5, align 4
  %v3_8cb8 = add i32 %v2_8cb8, 2
  %v4_8cb8 = inttoptr i32 %v3_8cb8 to i8*
  store i8 %v1_8cb8, i8* %v4_8cb8, align 1
  %v0_8cbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cbc, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_8cc0, i32* %r1.global-to-local, align 4
  %v0_8cc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* @r5, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 3
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  store i32 %v6_8954, i32* %r2.global-to-local, align 4
  %v0_8ccc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ccc, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_8ccc = load i32, i32* %r3.global-to-local, align 4
  %v2_8ccc = trunc i32 %v1_8ccc to i8
  %v3_8ccc = load i32, i32* @r5, align 4
  %v4_8ccc = add i32 %v3_8ccc, 6
  %v5_8ccc = inttoptr i32 %v4_8ccc to i8*
  store i8 %v2_8ccc, i8* %v5_8ccc, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8cd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cd4 = trunc i32 %v0_8cd4 to i8
  %v2_8cd4 = load i32, i32* @r5, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 5
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v1_8cd4, i8* %v4_8cd4, align 1
  %v0_8cd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v0_8cd8 to i8
  %v2_8cd8 = load i32, i32* @r5, align 4
  %v3_8cd8 = add i32 %v2_8cd8, 8
  %v4_8cd8 = inttoptr i32 %v3_8cd8 to i8*
  store i8 %v1_8cd8, i8* %v4_8cd8, align 1
  %v0_8cdc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cdc, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8cdc = load i32, i32* %ip.global-to-local, align 4
  %v2_8cdc = trunc i32 %v1_8cdc to i8
  %v3_8cdc = load i32, i32* @r5, align 4
  %v4_8cdc = add i32 %v3_8cdc, 7
  %v5_8cdc = inttoptr i32 %v4_8cdc to i8*
  store i8 %v2_8cdc, i8* %v5_8cdc, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8ce0 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ce0 = trunc i32 %v0_8ce0 to i8
  %v2_8ce0 = load i32, i32* @r5, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 9
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v1_8ce0, i8* %v4_8ce0, align 1
  %v0_8ce4 = call i32 @function_e240()
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  store i32 %v1_8a98, i32* %r1.global-to-local, align 4
  store i1 %v2_8cf0, i1* %cpsr_z.global-to-local, align 1
  %v1_8cf4 = sub i32 1023, %v0_8ce4
  store i32 %v1_8cf4, i32* %r3.global-to-local, align 4
  br i1 %v2_8cf0, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 16
  %v4_8cfc = inttoptr i32 %v3_8cfc to i32*
  store i32 %v1_8cf4, i32* %v4_8cfc, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_8cf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_8cf8 = add i32 %v1_8cf8, 16
  %v3_8cf8 = inttoptr i32 %v2_8cf8 to i32*
  %v4_8cf8 = load i32, i32* %v3_8cf8, align 4
  store i32 %v4_8cf8, i32* %r3.global-to-local, align 4
  %v2_8d00 = load i32, i32* @r5, align 4
  %v3_8d00 = add i32 %v2_8d00, 16
  %v4_8d00 = inttoptr i32 %v3_8d00 to i32*
  store i32 %v4_8cf8, i32* %v4_8d00, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_8d04, i32* %r3.global-to-local, align 4
  %v0_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d08 = add i32 %v0_8d08, 58
  store i32 %v1_8d08, i32* @r6, align 4
  %v1_8d0c = load i32, i32* @r5, align 4
  %v2_8d0c = add i32 %v1_8d0c, 12
  %v3_8d0c = inttoptr i32 %v2_8d0c to i32*
  store i32 %v0_8ce4, i32* %v3_8d0c, align 4
  %v0_8d10 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d10 = trunc i32 %v0_8d10 to i8
  %v2_8d10 = load i32, i32* @r6, align 4
  %v3_8d10 = add i32 %v2_8d10, 1
  %v4_8d10 = inttoptr i32 %v3_8d10 to i8*
  store i8 %v1_8d10, i8* %v4_8d10, align 1
  %v3_8d14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8d14, i32* %r3.global-to-local, align 4
  store i32 %v1_88d4, i32* %r1.global-to-local, align 4
  %v1_8d1c = add i32 %v3_8d14, 1
  store i32 %v1_8d1c, i32* @r4, align 4
  store i32 %v4_8d20, i32* %r2.global-to-local, align 4
  %v9_8d24 = icmp eq i32 %v1_8d1c, %v1_88d4
  store i1 %v9_8d24, i1* %cpsr_z.global-to-local, align 1
  %v0_8d28 = load i32, i32* %sl.global-to-local, align 4
  %v1_8d28 = trunc i32 %v0_8d28 to i8
  %v2_8d28 = load i32, i32* @r6, align 4
  %v3_8d28 = add i32 %v2_8d28, 5
  %v4_8d28 = inttoptr i32 %v3_8d28 to i8*
  store i8 %v1_8d28, i8* %v4_8d28, align 1
  %v0_8d2c = load i32, i32* %r2.global-to-local, align 4
  %v1_8d2c = trunc i32 %v0_8d2c to i8
  %v2_8d2c = load i32, i32* @r6, align 4
  %v3_8d2c = inttoptr i32 %v2_8d2c to i8*
  store i8 %v1_8d2c, i8* %v3_8d2c, align 1
  %v0_8d30 = load i32, i32* @r7, align 4
  %v1_8d30 = trunc i32 %v0_8d30 to i8
  %v2_8d30 = load i32, i32* @r6, align 4
  %v3_8d30 = add i32 %v2_8d30, 2
  %v4_8d30 = inttoptr i32 %v3_8d30 to i8*
  store i8 %v1_8d30, i8* %v4_8d30, align 1
  %v0_8d34 = load i32, i32* %fp.global-to-local, align 4
  %v1_8d34 = trunc i32 %v0_8d34 to i8
  %v2_8d34 = load i32, i32* @r6, align 4
  %v3_8d34 = add i32 %v2_8d34, 3
  %v4_8d34 = inttoptr i32 %v3_8d34 to i8*
  store i8 %v1_8d34, i8* %v4_8d34, align 1
  %v0_8d38 = load i32, i32* %r8.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* @r6, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  %v0_8d3c = load i32, i32* @r4, align 4
  store i32 %v0_8d3c, i32* %stack_var_-40, align 4
  %v5_8d40 = icmp slt i32 %v1_8d1c, %v1_88d4
  br i1 %v5_8d40, label %dec_label_pc_8ba4, label %dec_label_pc_8d44.preheader

dec_label_pc_8d44.preheader:                      ; preds = %bb97, %dec_label_pc_8a7c
  %v1_8d64 = add i32 %v6_89cc, 66
  %v1_8d68 = add i32 %v6_89cc, 8
  %v2_8d7c = icmp eq i32 %v6_8a20, -1
  %v7_8d7c = icmp eq i32 %v6_8a20, -1
  %v3_8fa0 = icmp eq i32 %v3_8a9c, 65535
  %v2_9010 = icmp eq i32 %v1_8a98, 0
  %v2_8dd8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8df0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e00 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e0c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8e20 = icmp eq i32 %v1_89ec, 0
  br label %dec_label_pc_8d44

dec_label_pc_8d44:                                ; preds = %dec_label_pc_8d44.preheader, %dec_label_pc_904c
  store i32 %v1_88d4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_904c, label %dec_label_pc_8d58

dec_label_pc_8d58:                                ; preds = %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  store i32 %v1_8d64, i32* @fp, align 4
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8efc

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8efc
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8d84:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8fa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge, %dec_label_pc_8d84
  %v1_8d9c = phi i32 [ %v1_8d9c.pre, %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge ], [ 65535, %dec_label_pc_8d84 ]
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v9_8d9c = icmp eq i32 %v3_8aa0, %v1_8d9c
  store i1 %v9_8d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8d9c, label %dec_label_pc_8fe4, label %dec_label_pc_8da4

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge, %dec_label_pc_8d98
  %v1_8da8 = phi i32 [ %v1_8da8.pre, %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge ], [ %v1_8d9c, %dec_label_pc_8d98 ]
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v9_8da8 = icmp eq i32 %v3_8aa4, %v1_8da8
  store i1 %v9_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8da8, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %dec_label_pc_9024, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_8db0
  %v1_8db8 = load i32, i32* @r5, align 4
  %v2_8db8 = add i32 %v1_8db8, 16
  %v3_8db8 = inttoptr i32 %v2_8db8 to i32*
  %v4_8db8 = load i32, i32* %v3_8db8, align 4
  store i32 %v4_8db8, i32* %r3.global-to-local, align 4
  %v2_8dbc = load i32, i32* @r6, align 4
  %v3_8dbc = add i32 %v2_8dbc, 16
  %v4_8dbc = inttoptr i32 %v3_8dbc to i32*
  store i32 %v4_8db8, i32* %v4_8dbc, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_8dc4:                                ; preds = %bb102, %.thread20, %dec_label_pc_9024
  %v0_8dc4 = call i32 @function_e240()
  store i32 %v0_8dc4, i32* %r0.global-to-local, align 4
  store i32 %v0_8dc4, i32* %stack_var_-44, align 4
  %v0_8dcc = call i32 @function_e240()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v0_8dcc, i32* %stack_var_-48, align 4
  %v0_8dd4 = call i32 @function_e240()
  store i32 %v2_8dd8, i32* %r1.global-to-local, align 4
  store i32 %v0_8dd4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  store i32 %v0_8de4, i32* %r0.global-to-local, align 4
  %v3_8de8 = call i32 @function_11a58(i32 %v0_8de4, i32 %v2_8dd8, i32 4)
  %v0_8dec = load i32, i32* @r8, align 4
  %v1_8dec = add i32 %v0_8dec, 6
  store i32 %v1_8dec, i32* %r0.global-to-local, align 4
  store i32 %v2_8df0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8df8 = call i32 @function_11a58(i32 %v1_8dec, i32 %v2_8df0, i32 4)
  %v0_8dfc = load i32, i32* @r8, align 4
  %v1_8dfc = add i32 %v0_8dfc, 4
  store i32 %v1_8dfc, i32* %r0.global-to-local, align 4
  store i32 %v2_8e00, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e08 = call i32 @function_11a58(i32 %v1_8dfc, i32 %v2_8e00, i32 2)
  store i32 %v2_8e0c, i32* %r1.global-to-local, align 4
  %v0_8e10 = load i32, i32* @r8, align 4
  %v1_8e10 = add i32 %v0_8e10, 10
  store i32 %v1_8e10, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e18 = call i32 @function_11a58(i32 %v1_8e10, i32 %v2_8e0c, i32 2)
  store i32 %v3_8e18, i32* %r0.global-to-local, align 4
  store i32 %v1_89ec, i32* %r1.global-to-local, align 4
  store i1 %v2_8e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e20, label %dec_label_pc_8e28, label %dec_label_pc_9030

dec_label_pc_8e28:                                ; preds = %dec_label_pc_8dc4, %dec_label_pc_9030
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e2c = load i32, i32* @sl, align 4
  %v1_8e2c = trunc i32 %v0_8e2c to i8
  %v2_8e2c = load i32, i32* @r5, align 4
  %v3_8e2c = add i32 %v2_8e2c, 10
  %v4_8e2c = inttoptr i32 %v3_8e2c to i8*
  store i8 %v1_8e2c, i8* %v4_8e2c, align 1
  %v0_8e30 = load i32, i32* @sl, align 4
  %v1_8e30 = trunc i32 %v0_8e30 to i8
  %v2_8e30 = load i32, i32* @r5, align 4
  %v3_8e30 = add i32 %v2_8e30, 11
  %v4_8e30 = inttoptr i32 %v3_8e30 to i8*
  store i8 %v1_8e30, i8* %v4_8e30, align 1
  %v0_8e34 = load i32, i32* @r5, align 4
  store i32 %v0_8e34, i32* @r0, align 4
  %v2_8e38 = call i32 @function_c688(i32 %v0_8e34, i32 20)
  %v3_8e38 = trunc i32 %v2_8e38 to i8
  %v4_8e3c = sdiv i32 %v2_8e38, 256
  store i32 %v4_8e3c, i32* %r3.global-to-local, align 4
  %v1_8e40 = trunc i32 %v4_8e3c to i8
  %v2_8e40 = load i32, i32* @r5, align 4
  %v3_8e40 = add i32 %v2_8e40, 11
  %v4_8e40 = inttoptr i32 %v3_8e40 to i8*
  store i8 %v1_8e40, i8* %v4_8e40, align 1
  %v3_8e44 = load i32, i32* @r5, align 4
  %v4_8e44 = add i32 %v3_8e44, 10
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 %v3_8e38, i8* %v5_8e44, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e4c = load i32, i32* @sl, align 4
  %v1_8e4c = trunc i32 %v0_8e4c to i8
  %v2_8e4c = load i32, i32* @r6, align 4
  %v3_8e4c = add i32 %v2_8e4c, 10
  %v4_8e4c = inttoptr i32 %v3_8e4c to i8*
  store i8 %v1_8e4c, i8* %v4_8e4c, align 1
  %v0_8e50 = load i32, i32* @sl, align 4
  %v1_8e50 = trunc i32 %v0_8e50 to i8
  %v2_8e50 = load i32, i32* @r6, align 4
  %v3_8e50 = add i32 %v2_8e50, 11
  %v4_8e50 = inttoptr i32 %v3_8e50 to i8*
  store i8 %v1_8e50, i8* %v4_8e50, align 1
  %v0_8e54 = load i32, i32* @r6, align 4
  store i32 %v0_8e54, i32* @r0, align 4
  %v2_8e58 = call i32 @function_c688(i32 %v0_8e54, i32 20)
  %v3_8e58 = trunc i32 %v2_8e58 to i8
  store i32 %v2_8e58, i32* %r0.global-to-local, align 4
  %v4_8e5c = sdiv i32 %v2_8e58, 256
  store i32 %v4_8e5c, i32* %r3.global-to-local, align 4
  %v3_8e60 = load i32, i32* @r6, align 4
  %v4_8e60 = add i32 %v3_8e60, 10
  %v5_8e60 = inttoptr i32 %v4_8e60 to i8*
  store i8 %v3_8e58, i8* %v5_8e60, align 1
  %v0_8e64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e64 = trunc i32 %v0_8e64 to i8
  %v2_8e64 = load i32, i32* @r6, align 4
  %v3_8e64 = add i32 %v2_8e64, 11
  %v4_8e64 = inttoptr i32 %v3_8e64 to i8*
  store i8 %v1_8e64, i8* %v4_8e64, align 1
  %v0_8e68 = load i32, i32* @r7, align 4
  %v1_8e68 = add i32 %v0_8e68, 4
  %v2_8e68 = inttoptr i32 %v1_8e68 to i8*
  %v3_8e68 = load i8, i8* %v2_8e68, align 1
  %v4_8e68 = zext i8 %v3_8e68 to i32
  store i32 %v4_8e68, i32* %r3.global-to-local, align 4
  %v1_8e6c = add i32 %v0_8e68, 5
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v0_8e68, i32* @r1, align 4
  %v4_8e74 = mul nuw nsw i32 %v4_8e6c, 256
  %v5_8e74 = or i32 %v4_8e74, %v4_8e68
  store i32 %v5_8e74, i32* %r2.global-to-local, align 4
  %v0_8e78 = load i32, i32* @sl, align 4
  %v1_8e78 = trunc i32 %v0_8e78 to i8
  %v3_8e78 = add i32 %v0_8e68, 6
  %v4_8e78 = inttoptr i32 %v3_8e78 to i8*
  store i8 %v1_8e78, i8* %v4_8e78, align 1
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  %v0_8e80 = load i32, i32* @sl, align 4
  %v1_8e80 = trunc i32 %v0_8e80 to i8
  %v2_8e80 = load i32, i32* @r7, align 4
  %v3_8e80 = add i32 %v2_8e80, 7
  %v4_8e80 = inttoptr i32 %v3_8e80 to i8*
  store i8 %v1_8e80, i8* %v4_8e80, align 1
  %v0_8e84 = load i32, i32* @r6, align 4
  store i32 %v0_8e84, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_c6e4(i32 %v0_8e84, i32 %v0_8e68, i32 %v5_8e74, i32 %v1_8d68)
  %v5_8e88 = trunc i32 %v4_8e88 to i8
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v3_8e8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8e8c, i32* %r3.global-to-local, align 4
  %v3_8e90 = mul i32 %v3_8e8c, 32
  store i32 %v3_8e90, i32* %r2.global-to-local, align 4
  %v0_8e94 = load i32, i32* @r5, align 4
  %v1_8e94 = add i32 %v0_8e94, 16
  %v2_8e94 = inttoptr i32 %v1_8e94 to i32*
  %v3_8e94 = load i32, i32* %v2_8e94, align 4
  store i32 %v3_8e94, i32* %r1.global-to-local, align 4
  %v5_8e98 = mul i32 %v3_8e8c, 24
  store i32 %v5_8e98, i32* %r2.global-to-local, align 4
  %v4_8e9c35 = udiv i32 %v4_8e88, 256
  %v1_8ea0 = trunc i32 %v4_8e9c35 to i8
  %v2_8ea0 = load i32, i32* @r7, align 4
  %v3_8ea0 = add i32 %v2_8ea0, 7
  %v4_8ea0 = inttoptr i32 %v3_8ea0 to i8*
  store i8 %v1_8ea0, i8* %v4_8ea0, align 1
  %v0_8ea4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ea4 = load i32, i32* @sb, align 4
  %v2_8ea4 = add i32 %v1_8ea4, %v0_8ea4
  store i32 %v2_8ea4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8eac = load i32, i32* @r7, align 4
  %v4_8eac = add i32 %v3_8eac, 6
  %v5_8eac = inttoptr i32 %v4_8eac to i8*
  store i8 %v5_8e88, i8* %v5_8eac, align 1
  %v0_8eb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8eb0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8eb0 = add i32 %v1_8eb0, 4
  %v3_8eb0 = inttoptr i32 %v2_8eb0 to i32*
  store i32 %v0_8eb0, i32* %v3_8eb0, align 4
  %v0_8eb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8eb4 = trunc i32 %v0_8eb4 to i8
  %v2_8eb4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8eb4 = load i32, i32* @sb, align 4
  %v4_8eb4 = add i32 %v3_8eb4, %v2_8eb4
  %v5_8eb4 = inttoptr i32 %v4_8eb4 to i8*
  store i8 %v1_8eb4, i8* %v5_8eb4, align 1
  %v0_8eb8 = load i32, i32* @sl, align 4
  %v1_8eb8 = trunc i32 %v0_8eb8 to i8
  %v2_8eb8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8eb8 = add i32 %v2_8eb8, 2
  %v4_8eb8 = inttoptr i32 %v3_8eb8 to i8*
  store i8 %v1_8eb8, i8* %v4_8eb8, align 1
  %v0_8ebc = load i32, i32* @sl, align 4
  %v1_8ebc = trunc i32 %v0_8ebc to i8
  %v2_8ebc = load i32, i32* %lr.global-to-local, align 4
  %v3_8ebc = add i32 %v2_8ebc, 1
  %v4_8ebc = inttoptr i32 %v3_8ebc to i8*
  store i8 %v1_8ebc, i8* %v4_8ebc, align 1
  %v0_8ec0 = load i32, i32* @sl, align 4
  %v1_8ec0 = trunc i32 %v0_8ec0 to i8
  %v2_8ec0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8ec0 = add i32 %v2_8ec0, 3
  %v4_8ec0 = inttoptr i32 %v3_8ec0 to i8*
  store i8 %v1_8ec0, i8* %v4_8ec0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v0_8ed4 = load i32, i32* @fp, align 4
  store i32 %v0_8ed4, i32* %r2.global-to-local, align 4
  %v0_8ed8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v7_8ee0 = call i32 @function_12b98(i32 %v3_8a44, i32* %v6_8ee0, i32 %v0_8ed4, i32 16384, i32 %v0_8ed8, i32 16)
  %v3_8ee4 = load i32, i32* %stack_var_-40, align 4
  %v1_8ee8 = add i32 %v3_8ee4, 1
  store i32 %v1_8ee8, i32* %r0.global-to-local, align 4
  store i32 %v1_88d4, i32* %r3.global-to-local, align 4
  %v9_8ef0 = icmp eq i32 %v1_8ee8, %v1_88d4
  store i1 %v9_8ef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ee8, i32* %stack_var_-40, align 4
  %v6_8ef8 = icmp slt i32 %v1_8ee8, %v1_88d4
  br i1 %v6_8ef8, label %dec_label_pc_8efc, label %dec_label_pc_904c

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d58
  %v1_8f10 = phi i32 [ %v1_8ee8, %dec_label_pc_8e28 ], [ 0, %dec_label_pc_8d58 ]
  %v5_8f00 = mul i32 %v1_8f10, 24
  %v1_8f04 = load i32, i32* @sb, align 4
  %v2_8f04 = add i32 %v1_8f04, %v5_8f00
  store i32 %v2_8f04, i32* %r3.global-to-local, align 4
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v1_8f0c = add i32 %v2_8f04, 20
  %v2_8f0c = inttoptr i32 %v1_8f0c to i8*
  %v3_8f0c = load i8, i8* %v2_8f0c, align 1
  %v4_8f0c = zext i8 %v3_8f0c to i32
  store i32 %v4_8f0c, i32* %r2.global-to-local, align 4
  %v4_8f10 = mul i32 %v1_8f10, 4
  %v5_8f10 = add i32 %v4_8f10, %v2_8900
  %v6_8f10 = inttoptr i32 %v5_8f10 to i32*
  %v7_8f10 = load i32, i32* %v6_8f10, align 4
  store i32 %v7_8f10, i32* @r5, align 4
  %v2_8f14 = icmp ugt i8 %v3_8f0c, 30
  %v7_8f14 = icmp eq i8 %v3_8f0c, 31
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  %v1_8f18 = add i32 %v7_8f10, 24
  store i32 %v1_8f18, i32* @r8, align 4
  %v1_8f1c = add i32 %v7_8f10, 38
  store i32 %v1_8f1c, i32* @r6, align 4
  %v1_8f20 = add i32 %v7_8f10, 58
  store i32 %v1_8f20, i32* @r7, align 4
  %v2_8f24 = xor i1 %v7_8f14, true
  %v3_8f24 = and i1 %v2_8f14, %v2_8f24
  br i1 %v3_8f24, label %dec_label_pc_8d78, label %dec_label_pc_8f28

dec_label_pc_8f28:                                ; preds = %dec_label_pc_8efc
  %v1_8f28 = add i32 %v2_8f04, 16
  %v2_8f28 = inttoptr i32 %v1_8f28 to i32*
  %v3_8f28 = load i32, i32* %v2_8f28, align 4
  store i32 %v3_8f28, i32* %r4.global-to-local, align 4
  %v0_8f2c = call i32 @function_e240()
  store i32 %v0_8f2c, i32* %r0.global-to-local, align 4
  %v3_8f30 = load i32, i32* %stack_var_-40, align 4
  %v5_8f38 = mul i32 %v3_8f30, 24
  %v0_8f3c = load i32, i32* %r4.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f38
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f3c, 65280
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f3c = udiv i32 %v0_8f3c, 256
  %v3_8f48 = and i32 %v1_8f3c, 65280
  store i32 %v3_8f48, i32* %r2.global-to-local, align 4
  %v3_8f4c = mul i32 %v0_8f3c, 16777216
  store i32 %v3_8f4c, i32* %ip.global-to-local, align 4
  %v1_8f50 = add i32 %v2_8f40, 20
  %v2_8f50 = inttoptr i32 %v1_8f50 to i8*
  %v3_8f50 = load i8, i8* %v2_8f50, align 1
  %v4_8f50 = zext i8 %v3_8f50 to i32
  store i32 %v4_8f50, i32* %lr.global-to-local, align 4
  %v4_8f54 = mul nuw nsw i32 %v1_8f44, 256
  %v5_8f54 = or i32 %v4_8f54, %v3_8f4c
  store i32 %v5_8f54, i32* %ip.global-to-local, align 4
  %v2_8f5c = call i32 @llvm.bswap.i32(i32 %v0_8f3c)
  %v7_8f60 = lshr i32 %v0_8f2c, %v4_8f50
  %v8_8f60 = add i32 %v7_8f60, %v2_8f5c
  %v3_8f6c = mul i32 %v8_8f60, 16777216
  %v1_8f70 = and i32 %v8_8f60, 65280
  store i32 %v1_8f70, i32* %r0.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v4_8f7c = mul nuw nsw i32 %v1_8f70, 256
  %v5_8f7c = or i32 %v4_8f7c, %v3_8f6c
  store i32 %v5_8f7c, i32* %r1.global-to-local, align 4
  %v2_8f80 = call i32 @llvm.bswap.i32(i32 %v8_8f60)
  store i32 %v2_8f80, i32* %r3.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f88 = load i32, i32* @r5, align 4
  %v2_8f88 = add i32 %v1_8f88, 16
  %v3_8f88 = inttoptr i32 %v2_8f88 to i32*
  store i32 %v2_8f80, i32* %v3_8f88, align 4
  br i1 %v2_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8f90:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  %v0_8f90 = call i32 @function_e240()
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8fa0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fa4 = load i32, i32* @r5, align 4
  %v2_8fa4 = add i32 %v1_8fa4, 12
  %v3_8fa4 = inttoptr i32 %v2_8fa4 to i32*
  store i32 %v0_8f90, i32* %v3_8fa4, align 4
  br i1 %v3_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge

dec_label_pc_8f90.dec_label_pc_8d98_crit_edge:    ; preds = %dec_label_pc_8f90
  %v1_8d9c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8d98

dec_label_pc_8fac:                                ; preds = %dec_label_pc_8f90, %dec_label_pc_8d84
  %v0_8fac = call i32 @function_e240()
  %v3_8fb4 = urem i32 %v0_8fac, 65536
  store i32 %v3_8fb4, i32* %r0.global-to-local, align 4
  %v1_8fbc = sub nsw i32 999, %v3_8fb4
  store i32 %v1_8fbc, i32* %r2.global-to-local, align 4
  %v3_8fc0 = sdiv i32 %v1_8fbc, 256
  store i32 %v3_8fc0, i32* %r1.global-to-local, align 4
  %v3_8fc434 = udiv i32 %v3_8fb4, 256
  store i32 %v3_8fc434, i32* %r3.global-to-local, align 4
  %v1_8fc8 = trunc i32 %v3_8fc434 to i8
  %v2_8fc8 = load i32, i32* @r5, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 5
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* %r0.global-to-local, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* @r5, align 4
  %v3_8fcc = add i32 %v2_8fcc, 4
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* @r6, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 5
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v1_8fd8 = load i32, i32* @r4, align 4
  %v9_8fd8 = icmp eq i32 %v3_8aa0, %v1_8fd8
  store i1 %v9_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v0_8fdc = load i32, i32* %r2.global-to-local, align 4
  %v1_8fdc = trunc i32 %v0_8fdc to i8
  %v2_8fdc = load i32, i32* @r6, align 4
  %v3_8fdc = add i32 %v2_8fdc, 4
  %v4_8fdc = inttoptr i32 %v3_8fdc to i8*
  store i8 %v1_8fdc, i8* %v4_8fdc, align 1
  %v0_8fe0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8fe0, label %dec_label_pc_8fe4, label %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge

dec_label_pc_8fac.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8fac
  %v1_8da8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fac, %dec_label_pc_8d98
  %v0_8fe4 = call i32 @function_e240()
  %v1_8fe4 = trunc i32 %v0_8fe4 to i8
  store i32 %v0_8fe4, i32* %r0.global-to-local, align 4
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v4_8fec = sdiv i32 %v0_8fe4, 256
  store i32 %v4_8fec, i32* %r3.global-to-local, align 4
  %v1_8ff0 = load i32, i32* @r4, align 4
  %v9_8ff0 = icmp eq i32 %v3_8aa4, %v1_8ff0
  store i1 %v9_8ff0, i1* %cpsr_z.global-to-local, align 1
  %v3_8ff4 = load i32, i32* @r5, align 4
  %v4_8ff4 = add i32 %v3_8ff4, 58
  %v5_8ff4 = inttoptr i32 %v4_8ff4 to i8*
  store i8 %v1_8fe4, i8* %v5_8ff4, align 1
  %v0_8ff8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ff8 = trunc i32 %v0_8ff8 to i8
  %v2_8ff8 = load i32, i32* @r7, align 4
  %v3_8ff8 = add i32 %v2_8ff8, 1
  %v4_8ff8 = inttoptr i32 %v3_8ff8 to i8*
  store i8 %v1_8ff8, i8* %v4_8ff8, align 1
  %v0_8ffc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ffc, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_9000:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  %v0_9000 = call i32 @function_e240()
  %v1_9000 = trunc i32 %v0_9000 to i8
  store i32 %v0_9000, i32* %r0.global-to-local, align 4
  %v4_900436 = udiv i32 %v0_9000, 256
  %v1_9008 = trunc i32 %v4_900436 to i8
  %v2_9008 = load i32, i32* @r7, align 4
  %v3_9008 = add i32 %v2_9008, 3
  %v4_9008 = inttoptr i32 %v3_9008 to i8*
  store i8 %v1_9008, i8* %v4_9008, align 1
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9000
  %v1_9014 = load i32, i32* @r5, align 4
  %v2_9014 = add i32 %v1_9014, 16
  %v3_9014 = inttoptr i32 %v2_9014 to i32*
  %v4_9014 = load i32, i32* %v3_9014, align 4
  store i32 %v4_9014, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9000, %bb100
  %v3_9018 = load i32, i32* @r7, align 4
  %v4_9018 = add i32 %v3_9018, 2
  %v5_9018 = inttoptr i32 %v4_9018 to i8*
  store i8 %v1_9000, i8* %v5_9018, align 1
  %v0_901c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_901c, label %dec_label_pc_9024, label %bb102

bb102:                                            ; preds = %bb101
  %v1_901c = load i32, i32* %r3.global-to-local, align 4
  %v2_901c = load i32, i32* @r6, align 4
  %v3_901c = add i32 %v2_901c, 16
  %v4_901c = inttoptr i32 %v3_901c to i32*
  store i32 %v1_901c, i32* %v4_901c, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9024:                                ; preds = %dec_label_pc_8db0, %bb101
  %v0_9024 = call i32 @function_e240()
  store i32 %v0_9024, i32* %r0.global-to-local, align 4
  %v1_9028 = load i32, i32* @r6, align 4
  %v2_9028 = add i32 %v1_9028, 16
  %v3_9028 = inttoptr i32 %v2_9028 to i32*
  store i32 %v0_9024, i32* %v3_9028, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9030:                                ; preds = %dec_label_pc_8dc4
  %v0_9030 = load i32, i32* @r7, align 4
  %v1_9030 = add i32 %v0_9030, 8
  store i32 %v1_9030, i32* @r4, align 4
  store i32 %v1_9030, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  %v2_903c = call i32 @function_e2f4(i32 %v1_9030, i32 %v6_89cc)
  store i32 %v2_903c, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r2.global-to-local, align 4
  %v0_9044 = load i32, i32* @sl, align 4
  %v1_9044 = trunc i32 %v0_9044 to i8
  %v2_9044 = load i32, i32* @r4, align 4
  %v4_9044 = add i32 %v2_9044, %v6_89cc
  %v5_9044 = inttoptr i32 %v4_9044 to i8*
  store i8 %v1_9044, i8* %v5_9044, align 1
  br label %dec_label_pc_8e28

dec_label_pc_904c:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9050 = call i32 @function_125b0(i32* null)
  store i32 %v2_9050, i32* %r0.global-to-local, align 4
  store i32 %v2_8a30, i32* %r1.global-to-local, align 4
  %v9_9058 = icmp eq i32 %v2_8a30, %v2_9050
  store i1 %v9_9058, i1* %cpsr_z.global-to-local, align 1
  %v6_905c = icmp slt i32 %v2_8a30, %v2_9050
  br i1 %v6_905c, label %dec_label_pc_9060, label %dec_label_pc_8d44

dec_label_pc_9060:                                ; preds = %dec_label_pc_904c, %dec_label_pc_88d0, %dec_label_pc_9068
  %v29_9064 = phi i32 [ %v3_8a44, %dec_label_pc_88d0 ], [ %v1_906c, %dec_label_pc_9068 ], [ %v2_9050, %dec_label_pc_904c ]
  store i32 %v3_88d0, i32* %r4.global-to-local, align 4
  store i32 %v15_88d0, i32* %r8.global-to-local, align 4
  store i32 %v21_88d0, i32* %sl.global-to-local, align 4
  store i32 %v24_88d0, i32* %fp.global-to-local, align 4
  ret i32 %v29_9064

dec_label_pc_9068:                                ; preds = %dec_label_pc_8a54
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v1_906c = call i32 @function_122e0(i32 %v3_8a44)
  store i32 %v1_906c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9060

; uselistorder directives
  uselistorder i32 %v1_906c, { 1, 0 }
  uselistorder i32 %v0_9000, { 0, 2, 1 }
  uselistorder i32 %v0_8fe4, { 0, 2, 1 }
  uselistorder i32 %v3_8fb4, { 0, 2, 1 }
  uselistorder i32 %v2_8f80, { 1, 0 }
  uselistorder i32 %v8_8f60, { 1, 2, 0 }
  uselistorder i32 %v3_8f4c, { 1, 0 }
  uselistorder i32 %v0_8f3c, { 2, 0, 1, 3 }
  uselistorder i32 %v7_8f10, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8ee8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8e8c, { 1, 0, 2 }
  uselistorder i32 %v4_8e88, { 0, 2, 1 }
  uselistorder i32 %v0_8e68, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8e58, { 0, 2, 1 }
  uselistorder i32 %v4_8e3c, { 1, 0 }
  uselistorder i1 %v2_9010, { 2, 3, 1, 0 }
  uselistorder i1 %v3_8fa0, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8d7c, { 2, 1, 0 }
  uselistorder i32 %v1_8d68, { 1, 0, 2 }
  uselistorder i32 %v0_8ce4, { 1, 0, 2 }
  uselistorder i32 %v3_8b74, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_8af0, { 0, 2, 1 }
  uselistorder i32 %v1_8ae8, { 2, 1, 0 }
  uselistorder i32 %v1_8ae4, { 1, 0 }
  uselistorder i32 %v1_8ae0, { 1, 0 }
  uselistorder i32 %v1_8ad4, { 1, 0 }
  uselistorder i32 %v3_8acc, { 2, 0, 1 }
  uselistorder i32 %v3_8a9c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8a98, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_8a94, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8a8c, { 0, 2, 1 }
  uselistorder i32 %v0_8a88, { 0, 1, 3, 2 }
  uselistorder i1 %v7_8a74, { 1, 0 }
  uselistorder i1 %v7_8a48, { 1, 0 }
  uselistorder i32 %v3_8a44, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_8a30, { 2, 1, 0 }
  uselistorder i32 %v6_8a20, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_89ec, { 1, 2, 3, 0 }
  uselistorder i32 %v6_89cc, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_8980, { 1, 2, 0 }
  uselistorder i32 %v6_8954, { 2, 1, 3, 0 }
  uselistorder i32 %v6_8918, { 1, 2, 0 }
  uselistorder i32 %v2_8900, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_88d4, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 8, 7, 4, 9, 10, 13, 14, 11, 12, 16, 15, 18, 17, 19, 3, 20, 21, 23, 22, 24, 25, 26, 27, 29, 28, 1, 30, 31, 32, 35, 33, 34, 49, 2, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_9060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9024, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_8e28, { 1, 0 }
  uselistorder label %dec_label_pc_8dc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d44, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_9078(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9078:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9078 = load i32, i32* @r4, align 4
  %v15_9078 = load i32, i32* @r8, align 4
  %v21_9078 = load i32, i32* @sl, align 4
  %v24_9078 = load i32, i32* @fp, align 4
  %v1_907c = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_907c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9098 = urem i32 %arg4, 256
  store i32 %v1_9098, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_90a8 = call i32 @function_12ee8(i32 %v1_907c, i32 4)
  %v0_90ac = load i32, i32* @r5, align 4
  store i32 %v0_90ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_90b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90b8, i32* %r3.global-to-local, align 4
  %v0_90bc = load i32, i32* @r4, align 4
  store i32 %v0_90bc, i32* %r0.global-to-local, align 4
  %v5_90c0 = inttoptr i32 %v0_90ac to i32*
  %v6_90c0 = call i32 @function_829c(i32 %v0_90bc, i32* %v5_90c0, i32 2, i32 %v0_90b8, i32 %v2_90a8)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_90d8 = load i32, i32* @r5, align 4
  store i32 %v0_90d8, i32* %r1.global-to-local, align 4
  %v0_90dc = load i32, i32* @r4, align 4
  store i32 %v0_90dc, i32* %r0.global-to-local, align 4
  %v5_90e0 = trunc i32 %v6_90c0 to i8
  %v6_90e4 = inttoptr i32 %v0_90d8 to i32*
  %v7_90e4 = call i32 @function_829c(i32 %v0_90dc, i32* %v6_90e4, i32 3, i32 65535, i32 %v6_90c0)
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_90e4, i32* @r7, align 4
  %v0_90f8 = load i32, i32* @r4, align 4
  store i32 %v0_90f8, i32* %r0.global-to-local, align 4
  %v5_90fc = inttoptr i32 %v0_90e8 to i32*
  %v6_90fc = call i32 @function_829c(i32 %v0_90f8, i32* %v5_90fc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_9108 = load i32, i32* @r5, align 4
  store i32 %v0_9108, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9114 = load i32, i32* @r4, align 4
  store i32 %v0_9114, i32* %r0.global-to-local, align 4
  %v5_9118 = trunc i32 %v6_90fc to i8
  %v6_911c = inttoptr i32 %v0_9108 to i32*
  %v7_911c = call i32 @function_829c(i32 %v0_9114, i32* %v6_911c, i32 5, i32 1, i32 %v6_90fc)
  %v1_9128 = urem i32 %v7_911c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9134 = load i32, i32* @r5, align 4
  store i32 %v0_9134, i32* %r1.global-to-local, align 4
  %v0_9138 = load i32, i32* @r4, align 4
  store i32 %v0_9138, i32* %r0.global-to-local, align 4
  %v5_9140 = inttoptr i32 %v0_9134 to i32*
  %v6_9140 = call i32 @function_829c(i32 %v0_9138, i32* %v5_9140, i32 6, i32 65535, i32 %v1_9128)
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  store i32 %v0_9158, i32* %r0.global-to-local, align 4
  %v5_915c = inttoptr i32 %v0_914c to i32*
  %v6_915c = call i32 @function_829c(i32 %v0_9158, i32* %v5_915c, i32 7, i32 65535, i32 %v6_9140)
  %v0_9160 = load i32, i32* @r5, align 4
  store i32 %v0_9160, i32* %r1.global-to-local, align 4
  %v0_9164 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9164, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_915c, i32* @sl, align 4
  %v0_9170 = load i32, i32* @r4, align 4
  store i32 %v0_9170, i32* %r0.global-to-local, align 4
  %v5_9174 = inttoptr i32 %v0_9160 to i32*
  %v6_9174 = call i32 @function_829c(i32 %v0_9170, i32* %v5_9174, i32 %v0_9164, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9184 = load i32, i32* @r5, align 4
  store i32 %v0_9184, i32* %r1.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9184 to i32*
  %v6_918c = call i32 @function_829c(i32 %v0_9188, i32* %v5_918c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9194 = urem i32 %v6_918c, 256
  %v0_9198 = load i32, i32* @r5, align 4
  store i32 %v0_9198, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_91a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91a0, i32* %r3.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r4, align 4
  store i32 %v0_91a4, i32* %r0.global-to-local, align 4
  %v5_91ac = inttoptr i32 %v0_9198 to i32*
  %v6_91ac = call i32 @function_829c(i32 %v0_91a4, i32* %v5_91ac, i32 18, i32 %v0_91a0, i32 %v1_9194)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  %v2_91b8 = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_91b8, i32* %r3.global-to-local, align 4
  store i32 %v6_91ac, i32* @r8, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_829c(i32 %v0_91c4, i32* %v5_91c8, i32 19, i32 %v2_91b8, i32 ptrtoint (i32* @0 to i32))
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91d0, i32* %r0.global-to-local, align 4
  %v1_91d4 = inttoptr i32 %v0_91d0 to i32*
  %v2_91d4 = call i32 @function_125b0(i32* %v1_91d4)
  %v1_91d8 = load i32, i32* @r6, align 4
  %v2_91d8 = add i32 %v1_91d8, %v2_91d4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_91ec = call i32 @function_12bfc(i32 2, i32 3, i32 6)
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v7_91f0 = icmp eq i32 %v3_91ec, -1
  store i1 %v7_91f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91f0, label %dec_label_pc_9798, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9078
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9204 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9204, i32* %r3.global-to-local, align 4
  %v0_920c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_920c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9218 = call i32 @function_12bcc(i32 %v3_91ec, i32 %v0_920c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9218, i32* %r0.global-to-local, align 4
  %v7_921c = icmp eq i32 %v6_9218, -1
  store i1 %v7_921c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_921c, label %dec_label_pc_97a0, label %dec_label_pc_9224

dec_label_pc_9224:                                ; preds = %dec_label_pc_91fc
  %v0_9230 = load i32, i32* @sl, align 4
  %v3_9230 = mul i32 %v0_9230, 65536
  store i32 %v3_9230, i32* %sl.global-to-local, align 4
  %v0_9234 = load i32, i32* @r7, align 4
  %v2_923c = icmp eq i32 %v1_907c, 0
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  %v0_9240 = load i32, i32* @r8, align 4
  %v1_9240 = urem i32 %v0_9240, 256
  store i32 %v1_9240, i32* %r8.global-to-local, align 4
  %v3_9244 = urem i32 %v0_9234, 65536
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  %v3_9248 = urem i32 %v6_9140, 65536
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v3_924c = urem i32 %v0_9230, 65536
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v0_9258 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9258, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_94d8.preheader, label %dec_label_pc_926c

dec_label_pc_926c:                                ; preds = %dec_label_pc_9224
  %v3_9274 = mul i32 %v6_9174, 65536
  %v1_927c = urem i32 %v6_9140, 256
  %v1_9284 = add i32 %v3_9274, 524288
  %v1_9288 = add i32 %v3_9274, 3407872
  %v1_928c = urem i32 %v0_9230, 256
  %v1_9290 = add i32 %v3_9274, 1835008
  %v0_9234.not = or i32 %v0_9234, -65536
  %v1_9298 = xor i32 %v0_9234.not, 65535
  %v3_929c = udiv i32 %v1_9290, 256
  %tmp77 = udiv i32 %v0_9234, 256
  %v1_92b0 = and i32 %v3_929c, 65280
  store i32 %v1_92b0, i32* %r0.global-to-local, align 4
  %v3_92d4 = mul nuw nsw i32 %v1_927c, 256
  %tmp78 = udiv i32 %v6_9140, 256
  %v4_92dc = urem i32 %tmp78, 256
  %v5_92dc = or i32 %v4_92dc, %v3_92d4
  store i32 %v5_92dc, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_9298, 256
  %v3_92e4 = mul nuw nsw i32 %v1_928c, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_92ec = sdiv i32 %sext23, 16777216
  %v4_92b4 = sdiv i32 %v1_9288, 16777216
  %tmp80 = udiv i32 %v0_9230, 256
  %v4_92f4 = urem i32 %tmp80, 256
  %v5_92f4 = or i32 %v4_92f4, %v3_92e4
  store i32 %v5_92f4, i32* @r7, align 4
  %v1_92f8 = and i32 %tmp79, 65280
  %v4_92fc = sdiv i32 %v1_9290, 16777216
  %v3_9300 = udiv i32 %v1_9284, 256
  %tmp81 = udiv i32 %v1_9298, 256
  %v4_9304 = urem i32 %tmp81, 256
  %v5_9304 = or i32 %v4_9304, %v1_92f8
  store i32 %v5_9304, i32* @r6, align 4
  %v3_9308 = ashr i32 %v1_9288, 31
  %v3_930c = ashr i32 %sext23, 31
  %v1_9310 = and i32 %v3_9300, 65280
  store i32 %v1_9310, i32* @r5, align 4
  %v3_931c = ashr i32 %v1_9290, 31
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v3_932032 = udiv i32 %v1_92f8, 256
  store i32 %v3_932032, i32* %r3.global-to-local, align 4
  store i32 %v1_927c, i32* %r1.global-to-local, align 4
  %v4_9328 = udiv i32 %v1_9284, 16777216
  %v5_9328 = or i32 %v4_9328, %v1_9310
  store i32 %v5_9328, i32* %r8.global-to-local, align 4
  %v5_932c = trunc i32 %tmp81 to i8
  store i32 %v0_9258, i32* @r4, align 4
  %v3_934433 = udiv i32 %v1_9310, 256
  store i32 %v3_934433, i32* %sl.global-to-local, align 4
  store i32 %v1_928c, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_9298, 16777216
  %v4_9454 = sdiv i32 %sext15, 16777216
  %v2_9484 = icmp eq i32 %v1_9240, 0
  %sext16 = mul i32 %v6_9140, 16777216
  %v4_9498 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_94b4 = sdiv i32 %sext17, 16777216
  %v1_93b0 = trunc i32 %v4_92ec to i8
  br label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %bb92, %dec_label_pc_926c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9358 = call i32 @function_12ee8(i32 1510, i32 4)
  store i32 %v2_9358, i32* %r0.global-to-local, align 4
  store i32 %v2_90a8, i32* %r2.global-to-local, align 4
  %v3_9360 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9360, i32* %r3.global-to-local, align 4
  %v2_9364 = load i32, i32* @r4, align 4
  %v5_9364 = mul i32 %v2_9364, 4
  %v6_9364 = add i32 %v5_9364, %v2_90a8
  %v7_9364 = inttoptr i32 %v6_9364 to i32*
  store i32 %v2_9358, i32* %v7_9364, align 4
  %v0_9368 = load i32, i32* %r2.global-to-local, align 4
  %v1_9368 = load i32, i32* %r3.global-to-local, align 4
  %v4_9368 = mul i32 %v1_9368, 4
  %v5_9368 = add i32 %v4_9368, %v0_9368
  %v6_9368 = inttoptr i32 %v5_9368 to i32*
  %v7_9368 = load i32, i32* %v6_9368, align 4
  store i32 %v7_9368, i32* %r4.global-to-local, align 4
  %v1_936c = inttoptr i32 %v7_9368 to i8*
  %v2_936c = load i8, i8* %v1_936c, align 1
  %tmp = urem i8 %v2_936c, 16
  %v1_9370 = zext i8 %tmp to i32
  %v1_9374 = or i32 %v1_9370, 64
  store i32 %v1_9374, i32* %r2.global-to-local, align 4
  %v1_9378 = trunc i32 %v1_9374 to i8
  store i8 %v1_9378, i8* %v1_936c, align 1
  %v0_937c = load i32, i32* %r4.global-to-local, align 4
  %v1_937c = inttoptr i32 %v0_937c to i8*
  %v2_937c = load i8, i8* %v1_937c, align 1
  %v1_9380 = and i8 %v2_937c, -16
  %v1_9384 = or i8 %v1_9380, 5
  store i32 %v1_9128, i32* %r1.global-to-local, align 4
  store i8 %v1_9384, i8* %v1_937c, align 1
  %v2_9394 = load i32, i32* %r4.global-to-local, align 4
  %v3_9394 = add i32 %v2_9394, 1
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v5_90e0, i8* %v4_9394, align 1
  %v2_939c = load i32, i32* %r4.global-to-local, align 4
  %v3_939c = add i32 %v2_939c, 8
  %v4_939c = inttoptr i32 %v3_939c to i8*
  store i8 %v5_9118, i8* %v4_939c, align 1
  store i32 %v4_92ec, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_93a8 = load i32, i32* %r1.global-to-local, align 4
  %v9_93a8 = icmp eq i32 %v0_93a8, 0
  store i1 %v9_93a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9308, i32* %r2.global-to-local, align 4
  %v2_93b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_93b0 = add i32 %v2_93b0, 4
  %v4_93b0 = inttoptr i32 %v3_93b0 to i8*
  store i8 %v1_93b0, i8* %v4_93b0, align 1
  store i32 %v4_92b4, i32* %r1.global-to-local, align 4
  %v0_93b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93b8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_934c
  %v1_93b8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_93b8, i32* %r3.global-to-local, align 4
  %v2_93bc = trunc i32 %v1_93b8 to i8
  %v3_93bc = load i32, i32* %r4.global-to-local, align 4
  %v4_93bc = add i32 %v3_93bc, 7
  %v5_93bc = inttoptr i32 %v4_93bc to i8*
  store i8 %v2_93bc, i8* %v5_93bc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_934c, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_93c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93c4 = trunc i32 %v0_93c4 to i8
  %v2_93c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c4 = add i32 %v2_93c4, 3
  %v4_93c4 = inttoptr i32 %v3_93c4 to i8*
  store i8 %v1_93c4, i8* %v4_93c4, align 1
  %v0_93c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_93c8 = trunc i32 %v0_93c8 to i8
  %v2_93c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c8 = add i32 %v2_93c8, 2
  %v4_93c8 = inttoptr i32 %v3_93c8 to i8*
  store i8 %v1_93c8, i8* %v4_93c8, align 1
  %v0_93cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93cc, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_930c, i32* %r1.global-to-local, align 4
  %v0_93d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i8
  %v2_93d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93d4 = add i32 %v2_93d4, 9
  %v4_93d4 = inttoptr i32 %v3_93d4 to i8*
  store i8 %v1_93d4, i8* %v4_93d4, align 1
  %v0_93d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93d8, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_93d8 = trunc i32 %v1_93d8 to i8
  %v3_93d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_93d8 = add i32 %v3_93d8, 6
  %v5_93d8 = inttoptr i32 %v4_93d8 to i8*
  store i8 %v2_93d8, i8* %v5_93d8, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_93dc = load i32, i32* %stack_var_-40, align 4
  %v5_93e4 = mul i32 %v3_93dc, 24
  store i32 %v5_93e4, i32* %r3.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v1_93ec = load i32, i32* %r4.global-to-local, align 4
  %v2_93ec = add i32 %v1_93ec, 12
  %v3_93ec = inttoptr i32 %v2_93ec to i32*
  store i32 %v6_91c8, i32* %v3_93ec, align 4
  %v0_93f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f0 = load i32, i32* @sb, align 4
  %v2_93f0 = add i32 %v1_93f0, %v0_93f0
  store i32 %v2_93f0, i32* %r3.global-to-local, align 4
  %v0_93f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_93f4 = trunc i32 %v0_93f4 to i8
  %v2_93f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93f4 = add i32 %v2_93f4, 5
  %v4_93f4 = inttoptr i32 %v3_93f4 to i8*
  store i8 %v1_93f4, i8* %v4_93f4, align 1
  %v0_93f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f8 = add i32 %v0_93f8, 16
  %v2_93f8 = inttoptr i32 %v1_93f8 to i32*
  %v3_93f8 = load i32, i32* %v2_93f8, align 4
  store i32 %v3_93f8, i32* %r2.global-to-local, align 4
  %v0_93fc = load i32, i32* %r4.global-to-local, align 4
  %v1_93fc = add i32 %v0_93fc, 20
  store i32 %v1_93fc, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9404 = load i32, i32* %r0.global-to-local, align 4
  %v1_9404 = trunc i32 %v0_9404 to i8
  %v3_9404 = add i32 %v0_93fc, 23
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 %v1_9404, i8* %v4_9404, align 1
  %v0_9408 = load i32, i32* %r3.global-to-local, align 4
  %v1_9408 = trunc i32 %v0_9408 to i8
  %v2_9408 = load i32, i32* %r1.global-to-local, align 4
  %v3_9408 = add i32 %v2_9408, 2
  %v4_9408 = inttoptr i32 %v3_9408 to i8*
  store i8 %v1_9408, i8* %v4_9408, align 1
  %v0_940c = load i32, i32* %r4.global-to-local, align 4
  %v1_940c = add i32 %v0_940c, 24
  %v2_940c = inttoptr i32 %v1_940c to i8*
  %v3_940c = load i8, i8* %v2_940c, align 1
  %tmp98 = urem i8 %v3_940c, 16
  %v1_9410 = zext i8 %tmp98 to i32
  %v1_9414 = or i32 %v1_9410, 64
  store i32 %v1_9414, i32* %r3.global-to-local, align 4
  %v1_9418 = trunc i32 %v1_9414 to i8
  store i8 %v1_9418, i8* %v2_940c, align 1
  %v0_941c = load i32, i32* %r2.global-to-local, align 4
  %v1_941c = load i32, i32* %r4.global-to-local, align 4
  %v2_941c = add i32 %v1_941c, 16
  %v3_941c = inttoptr i32 %v2_941c to i32*
  store i32 %v0_941c, i32* %v3_941c, align 4
  %v0_9420 = load i32, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v0_9420, 24
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v1_9424 = and i8 %v3_9420, -16
  %v1_9428 = or i8 %v1_9424, 5
  store i8 %v1_9428, i8* %v2_9420, align 1
  %v0_9434 = load i32, i32* %r4.global-to-local, align 4
  %v1_9434 = add i32 %v0_9434, 24
  store i32 %v1_9434, i32* @r5, align 4
  %v3_9438 = add i32 %v0_9434, 25
  %v4_9438 = inttoptr i32 %v3_9438 to i8*
  store i8 %v5_90e0, i8* %v4_9438, align 1
  store i32 %v4_92fc, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v2_9448 = load i32, i32* @r5, align 4
  %v3_9448 = add i32 %v2_9448, 4
  %v4_9448 = inttoptr i32 %v3_9448 to i8*
  store i8 %v5_932c, i8* %v4_9448, align 1
  %v0_944c = load i32, i32* %r1.global-to-local, align 4
  %v1_944c = trunc i32 %v0_944c to i8
  %v2_944c = load i32, i32* @r5, align 4
  %v3_944c = add i32 %v2_944c, 2
  %v4_944c = inttoptr i32 %v3_944c to i8*
  store i8 %v1_944c, i8* %v4_944c, align 1
  %v0_9450 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9450, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_9454, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* %r2.global-to-local, align 4
  %v1_9458 = trunc i32 %v0_9458 to i8
  %v2_9458 = load i32, i32* @r5, align 4
  %v3_9458 = add i32 %v2_9458, 3
  %v4_9458 = inttoptr i32 %v3_9458 to i8*
  store i8 %v1_9458, i8* %v4_9458, align 1
  store i32 %v6_90fc, i32* %r2.global-to-local, align 4
  %v0_9460 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9460, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_9460 = load i32, i32* %r3.global-to-local, align 4
  %v2_9460 = trunc i32 %v1_9460 to i8
  %v3_9460 = load i32, i32* @r5, align 4
  %v4_9460 = add i32 %v3_9460, 6
  %v5_9460 = inttoptr i32 %v4_9460 to i8*
  store i8 %v2_9460, i8* %v5_9460, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9468 = load i32, i32* %r1.global-to-local, align 4
  %v1_9468 = trunc i32 %v0_9468 to i8
  %v2_9468 = load i32, i32* @r5, align 4
  %v3_9468 = add i32 %v2_9468, 5
  %v4_9468 = inttoptr i32 %v3_9468 to i8*
  store i8 %v1_9468, i8* %v4_9468, align 1
  %v0_946c = load i32, i32* %r2.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i8
  %v2_946c = load i32, i32* @r5, align 4
  %v3_946c = add i32 %v2_946c, 8
  %v4_946c = inttoptr i32 %v3_946c to i8*
  store i8 %v1_946c, i8* %v4_946c, align 1
  %v0_9470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9470, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_9470 = load i32, i32* %r0.global-to-local, align 4
  %v2_9470 = trunc i32 %v1_9470 to i8
  %v3_9470 = load i32, i32* @r5, align 4
  %v4_9470 = add i32 %v3_9470, 7
  %v5_9470 = inttoptr i32 %v4_9470 to i8*
  store i8 %v2_9470, i8* %v5_9470, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_9474 = load i32, i32* %r3.global-to-local, align 4
  %v1_9474 = trunc i32 %v0_9474 to i8
  %v2_9474 = load i32, i32* @r5, align 4
  %v3_9474 = add i32 %v2_9474, 9
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  %v0_9478 = call i32 @function_e240()
  store i32 %v0_9478, i32* %r0.global-to-local, align 4
  store i32 %v1_9240, i32* %r1.global-to-local, align 4
  store i1 %v2_9484, i1* %cpsr_z.global-to-local, align 1
  %v1_9488 = sub i32 1023, %v0_9478
  store i32 %v1_9488, i32* %r3.global-to-local, align 4
  br i1 %v2_9484, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 16
  %v4_9490 = inttoptr i32 %v3_9490 to i32*
  store i32 %v1_9488, i32* %v4_9490, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_948c = load i32, i32* %r4.global-to-local, align 4
  %v2_948c = add i32 %v1_948c, 16
  %v3_948c = inttoptr i32 %v2_948c to i32*
  %v4_948c = load i32, i32* %v3_948c, align 4
  store i32 %v4_948c, i32* %r3.global-to-local, align 4
  %v2_9494 = load i32, i32* @r5, align 4
  %v3_9494 = add i32 %v2_9494, 16
  %v4_9494 = inttoptr i32 %v3_9494 to i32*
  store i32 %v4_948c, i32* %v4_9494, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_9498, i32* %r3.global-to-local, align 4
  %v0_949c = load i32, i32* %r4.global-to-local, align 4
  %v1_949c = add i32 %v0_949c, 44
  store i32 %v1_949c, i32* @r6, align 4
  %v1_94a0 = load i32, i32* @r5, align 4
  %v2_94a0 = add i32 %v1_94a0, 12
  %v3_94a0 = inttoptr i32 %v2_94a0 to i32*
  store i32 %v0_9478, i32* %v3_94a0, align 4
  %v0_94a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94a4 = trunc i32 %v0_94a4 to i8
  %v2_94a4 = load i32, i32* @r6, align 4
  %v3_94a4 = add i32 %v2_94a4, 1
  %v4_94a4 = inttoptr i32 %v3_94a4 to i8*
  store i8 %v1_94a4, i8* %v4_94a4, align 1
  %v3_94a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_94a8, i32* %r3.global-to-local, align 4
  store i32 %v1_907c, i32* %r1.global-to-local, align 4
  %v1_94b0 = add i32 %v3_94a8, 1
  store i32 %v1_94b0, i32* @r4, align 4
  store i32 %v4_94b4, i32* %r2.global-to-local, align 4
  %v9_94b8 = icmp eq i32 %v1_94b0, %v1_907c
  store i1 %v9_94b8, i1* %cpsr_z.global-to-local, align 1
  %v0_94bc = load i32, i32* %sl.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* @r6, align 4
  %v3_94bc = add i32 %v2_94bc, 5
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94c0 = trunc i32 %v0_94c0 to i8
  %v2_94c0 = load i32, i32* @r6, align 4
  %v3_94c0 = inttoptr i32 %v2_94c0 to i8*
  store i8 %v1_94c0, i8* %v3_94c0, align 1
  %v0_94c4 = load i32, i32* @r7, align 4
  %v1_94c4 = trunc i32 %v0_94c4 to i8
  %v2_94c4 = load i32, i32* @r6, align 4
  %v3_94c4 = add i32 %v2_94c4, 2
  %v4_94c4 = inttoptr i32 %v3_94c4 to i8*
  store i8 %v1_94c4, i8* %v4_94c4, align 1
  %v0_94c8 = load i32, i32* %fp.global-to-local, align 4
  %v1_94c8 = trunc i32 %v0_94c8 to i8
  %v2_94c8 = load i32, i32* @r6, align 4
  %v3_94c8 = add i32 %v2_94c8, 3
  %v4_94c8 = inttoptr i32 %v3_94c8 to i8*
  store i8 %v1_94c8, i8* %v4_94c8, align 1
  %v0_94cc = load i32, i32* %r8.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v2_94cc = load i32, i32* @r6, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %stack_var_-40, align 4
  %v5_94d4 = icmp slt i32 %v1_94b0, %v1_907c
  br i1 %v5_94d4, label %dec_label_pc_934c, label %dec_label_pc_94d8.preheader

dec_label_pc_94d8.preheader:                      ; preds = %bb92, %dec_label_pc_9224
  %v1_94f8 = add i32 %v6_9174, 8
  %v1_94fc = add i32 %v6_9174, 52
  %v2_9508 = icmp eq i32 %v6_91c8, -1
  %v7_9508 = icmp eq i32 %v6_91c8, -1
  %v3_96d0 = icmp eq i32 %v3_9244, 65535
  %v2_9740 = icmp eq i32 %v1_9240, 0
  %v2_975c = icmp eq i32 %v1_9194, 0
  br label %dec_label_pc_94d8

dec_label_pc_94d8:                                ; preds = %dec_label_pc_94d8.preheader, %dec_label_pc_9784
  store i32 %v1_907c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_9784, label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_94f8, i32* @fp, align 4
  store i32 %v1_94fc, i32* @sl, align 4
  br label %dec_label_pc_9630

dec_label_pc_9504:                                ; preds = %dec_label_pc_9630
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_9510:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_96d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_96d0, label %dec_label_pc_96dc, label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_96c0.dec_label_pc_9524_crit_edge, %dec_label_pc_9510
  %v1_9528 = phi i32 [ %v1_9528.pre, %dec_label_pc_96c0.dec_label_pc_9524_crit_edge ], [ 65535, %dec_label_pc_9510 ]
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v9_9528 = icmp eq i32 %v3_9248, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9528, label %dec_label_pc_9714, label %dec_label_pc_9530

dec_label_pc_9530:                                ; preds = %dec_label_pc_96dc.dec_label_pc_9530_crit_edge, %dec_label_pc_9524
  %v1_9534 = phi i32 [ %v1_9534.pre, %dec_label_pc_96dc.dec_label_pc_9530_crit_edge ], [ %v1_9528, %dec_label_pc_9524 ]
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v9_9534 = icmp eq i32 %v3_924c, %v1_9534
  store i1 %v9_9534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9534, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_953c:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %dec_label_pc_9754, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_953c
  %v1_9544 = load i32, i32* @r5, align 4
  %v2_9544 = add i32 %v1_9544, 16
  %v3_9544 = inttoptr i32 %v2_9544 to i32*
  %v4_9544 = load i32, i32* %v3_9544, align 4
  store i32 %v4_9544, i32* %r3.global-to-local, align 4
  %v2_9548 = load i32, i32* @r6, align 4
  %v3_9548 = add i32 %v2_9548, 16
  %v4_9548 = inttoptr i32 %v3_9548 to i32*
  store i32 %v4_9544, i32* %v4_9548, align 4
  br label %dec_label_pc_9550

dec_label_pc_9550:                                ; preds = %bb97, %.thread20
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_955c:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754, %dec_label_pc_9768
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9560 = load i32, i32* @r8, align 4
  %v1_9560 = trunc i32 %v0_9560 to i8
  %v2_9560 = load i32, i32* @r5, align 4
  %v3_9560 = add i32 %v2_9560, 10
  %v4_9560 = inttoptr i32 %v3_9560 to i8*
  store i8 %v1_9560, i8* %v4_9560, align 1
  %v0_9564 = load i32, i32* @r8, align 4
  %v1_9564 = trunc i32 %v0_9564 to i8
  %v2_9564 = load i32, i32* @r5, align 4
  %v3_9564 = add i32 %v2_9564, 11
  %v4_9564 = inttoptr i32 %v3_9564 to i8*
  store i8 %v1_9564, i8* %v4_9564, align 1
  %v0_9568 = load i32, i32* @r5, align 4
  store i32 %v0_9568, i32* @r0, align 4
  %v2_956c = call i32 @function_c688(i32 %v0_9568, i32 20)
  %v3_956c = trunc i32 %v2_956c to i8
  %v4_9570 = sdiv i32 %v2_956c, 256
  store i32 %v4_9570, i32* %r3.global-to-local, align 4
  %v1_9574 = trunc i32 %v4_9570 to i8
  %v2_9574 = load i32, i32* @r5, align 4
  %v3_9574 = add i32 %v2_9574, 11
  %v4_9574 = inttoptr i32 %v3_9574 to i8*
  store i8 %v1_9574, i8* %v4_9574, align 1
  %v3_9578 = load i32, i32* @r5, align 4
  %v4_9578 = add i32 %v3_9578, 10
  %v5_9578 = inttoptr i32 %v4_9578 to i8*
  store i8 %v3_956c, i8* %v5_9578, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9580 = load i32, i32* @r8, align 4
  %v1_9580 = trunc i32 %v0_9580 to i8
  %v2_9580 = load i32, i32* @r6, align 4
  %v3_9580 = add i32 %v2_9580, 10
  %v4_9580 = inttoptr i32 %v3_9580 to i8*
  store i8 %v1_9580, i8* %v4_9580, align 1
  %v0_9584 = load i32, i32* @r8, align 4
  %v1_9584 = trunc i32 %v0_9584 to i8
  %v2_9584 = load i32, i32* @r6, align 4
  %v3_9584 = add i32 %v2_9584, 11
  %v4_9584 = inttoptr i32 %v3_9584 to i8*
  store i8 %v1_9584, i8* %v4_9584, align 1
  %v0_9588 = load i32, i32* @r6, align 4
  store i32 %v0_9588, i32* @r0, align 4
  %v2_958c = call i32 @function_c688(i32 %v0_9588, i32 20)
  %v3_958c = trunc i32 %v2_958c to i8
  store i32 %v2_958c, i32* %r0.global-to-local, align 4
  %v4_9590 = sdiv i32 %v2_958c, 256
  store i32 %v4_9590, i32* %r3.global-to-local, align 4
  %v3_9594 = load i32, i32* @r6, align 4
  %v4_9594 = add i32 %v3_9594, 10
  %v5_9594 = inttoptr i32 %v4_9594 to i8*
  store i8 %v3_958c, i8* %v5_9594, align 1
  %v0_9598 = load i32, i32* %r3.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 11
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r7, align 4
  %v1_959c = add i32 %v0_959c, 4
  %v2_959c = inttoptr i32 %v1_959c to i8*
  %v3_959c = load i8, i8* %v2_959c, align 1
  %v4_959c = zext i8 %v3_959c to i32
  store i32 %v4_959c, i32* %r3.global-to-local, align 4
  %v1_95a0 = add i32 %v0_959c, 5
  %v2_95a0 = inttoptr i32 %v1_95a0 to i8*
  %v3_95a0 = load i8, i8* %v2_95a0, align 1
  %v4_95a0 = zext i8 %v3_95a0 to i32
  store i32 %v0_959c, i32* @r1, align 4
  %v4_95a8 = mul nuw nsw i32 %v4_95a0, 256
  %v5_95a8 = or i32 %v4_95a8, %v4_959c
  store i32 %v5_95a8, i32* %r2.global-to-local, align 4
  %v0_95ac = load i32, i32* @r8, align 4
  %v1_95ac = trunc i32 %v0_95ac to i8
  %v3_95ac = add i32 %v0_959c, 6
  %v4_95ac = inttoptr i32 %v3_95ac to i8*
  store i8 %v1_95ac, i8* %v4_95ac, align 1
  %v0_95b0 = load i32, i32* @fp, align 4
  store i32 %v0_95b0, i32* %r3.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r8, align 4
  %v1_95b4 = trunc i32 %v0_95b4 to i8
  %v2_95b4 = load i32, i32* @r7, align 4
  %v3_95b4 = add i32 %v2_95b4, 7
  %v4_95b4 = inttoptr i32 %v3_95b4 to i8*
  store i8 %v1_95b4, i8* %v4_95b4, align 1
  %v0_95b8 = load i32, i32* @r6, align 4
  store i32 %v0_95b8, i32* %r0.global-to-local, align 4
  %v4_95bc = call i32 @function_c6e4(i32 %v0_95b8, i32 %v0_959c, i32 %v5_95a8, i32 %v0_95b0)
  %v5_95bc = trunc i32 %v4_95bc to i8
  store i32 %v4_95bc, i32* %r0.global-to-local, align 4
  %v3_95c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_95c0, i32* %r3.global-to-local, align 4
  %v3_95c4 = mul i32 %v3_95c0, 32
  store i32 %v3_95c4, i32* %r2.global-to-local, align 4
  %v0_95c8 = load i32, i32* @r5, align 4
  %v1_95c8 = add i32 %v0_95c8, 16
  %v2_95c8 = inttoptr i32 %v1_95c8 to i32*
  %v3_95c8 = load i32, i32* %v2_95c8, align 4
  store i32 %v3_95c8, i32* %r1.global-to-local, align 4
  %v5_95cc = mul i32 %v3_95c0, 24
  store i32 %v5_95cc, i32* %r2.global-to-local, align 4
  %v4_95d035 = udiv i32 %v4_95bc, 256
  %v1_95d4 = trunc i32 %v4_95d035 to i8
  %v2_95d4 = load i32, i32* @r7, align 4
  %v3_95d4 = add i32 %v2_95d4, 7
  %v4_95d4 = inttoptr i32 %v3_95d4 to i8*
  store i8 %v1_95d4, i8* %v4_95d4, align 1
  %v0_95d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95d8 = load i32, i32* @sb, align 4
  %v2_95d8 = add i32 %v1_95d8, %v0_95d8
  store i32 %v2_95d8, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_95e0 = load i32, i32* @r7, align 4
  %v4_95e0 = add i32 %v3_95e0, 6
  %v5_95e0 = inttoptr i32 %v4_95e0 to i8*
  store i8 %v5_95bc, i8* %v5_95e0, align 1
  %v0_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95e4 = load i32, i32* %lr.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, 4
  %v3_95e4 = inttoptr i32 %v2_95e4 to i32*
  store i32 %v0_95e4, i32* %v3_95e4, align 4
  %v0_95e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v2_95e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_95e8 = load i32, i32* @sb, align 4
  %v4_95e8 = add i32 %v3_95e8, %v2_95e8
  %v5_95e8 = inttoptr i32 %v4_95e8 to i8*
  store i8 %v1_95e8, i8* %v5_95e8, align 1
  %v0_95ec = load i32, i32* @r8, align 4
  %v1_95ec = trunc i32 %v0_95ec to i8
  %v2_95ec = load i32, i32* %lr.global-to-local, align 4
  %v3_95ec = add i32 %v2_95ec, 2
  %v4_95ec = inttoptr i32 %v3_95ec to i8*
  store i8 %v1_95ec, i8* %v4_95ec, align 1
  %v0_95f0 = load i32, i32* @r8, align 4
  %v1_95f0 = trunc i32 %v0_95f0 to i8
  %v2_95f0 = load i32, i32* %lr.global-to-local, align 4
  %v3_95f0 = add i32 %v2_95f0, 1
  %v4_95f0 = inttoptr i32 %v3_95f0 to i8*
  store i8 %v1_95f0, i8* %v4_95f0, align 1
  %v0_95f4 = load i32, i32* @r8, align 4
  %v1_95f4 = trunc i32 %v0_95f4 to i8
  %v2_95f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_95f4 = add i32 %v2_95f4, 3
  %v4_95f4 = inttoptr i32 %v3_95f4 to i8*
  store i8 %v1_95f4, i8* %v4_95f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  store i32 %v0_9600, i32* %r1.global-to-local, align 4
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v0_9608 = load i32, i32* @sl, align 4
  store i32 %v0_9608, i32* %r2.global-to-local, align 4
  %v0_960c = load i32, i32* %lr.global-to-local, align 4
  %v6_9614 = inttoptr i32 %v0_9600 to i32*
  %v7_9614 = call i32 @function_12b98(i32 %v3_91ec, i32* %v6_9614, i32 %v0_9608, i32 16384, i32 %v0_960c, i32 16)
  %v3_9618 = load i32, i32* %stack_var_-40, align 4
  %v1_961c = add i32 %v3_9618, 1
  store i32 %v1_961c, i32* %r0.global-to-local, align 4
  store i32 %v1_907c, i32* %r3.global-to-local, align 4
  %v9_9624 = icmp eq i32 %v1_961c, %v1_907c
  store i1 %v9_9624, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_961c, i32* %stack_var_-40, align 4
  %v6_962c = icmp slt i32 %v1_961c, %v1_907c
  br i1 %v6_962c, label %dec_label_pc_9630, label %dec_label_pc_9784

dec_label_pc_9630:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94ec
  %v1_9644 = phi i32 [ %v1_961c, %dec_label_pc_955c ], [ 0, %dec_label_pc_94ec ]
  %v5_9634 = mul i32 %v1_9644, 24
  %v1_9638 = load i32, i32* @sb, align 4
  %v2_9638 = add i32 %v1_9638, %v5_9634
  store i32 %v2_9638, i32* %r3.global-to-local, align 4
  store i32 %v2_90a8, i32* %r1.global-to-local, align 4
  %v1_9640 = add i32 %v2_9638, 20
  %v2_9640 = inttoptr i32 %v1_9640 to i8*
  %v3_9640 = load i8, i8* %v2_9640, align 1
  %v4_9640 = zext i8 %v3_9640 to i32
  store i32 %v4_9640, i32* %r2.global-to-local, align 4
  %v4_9644 = mul i32 %v1_9644, 4
  %v5_9644 = add i32 %v4_9644, %v2_90a8
  %v6_9644 = inttoptr i32 %v5_9644 to i32*
  %v7_9644 = load i32, i32* %v6_9644, align 4
  store i32 %v7_9644, i32* @r5, align 4
  %v2_9648 = icmp ugt i8 %v3_9640, 30
  %v7_9648 = icmp eq i8 %v3_9640, 31
  store i1 %v7_9648, i1* %cpsr_z.global-to-local, align 1
  %v1_964c = add i32 %v7_9644, 24
  store i32 %v1_964c, i32* @r6, align 4
  %v1_9650 = add i32 %v7_9644, 44
  store i32 %v1_9650, i32* @r7, align 4
  %v2_9654 = xor i1 %v7_9648, true
  %v3_9654 = and i1 %v2_9648, %v2_9654
  br i1 %v3_9654, label %dec_label_pc_9504, label %dec_label_pc_9658

dec_label_pc_9658:                                ; preds = %dec_label_pc_9630
  %v1_9658 = add i32 %v2_9638, 16
  %v2_9658 = inttoptr i32 %v1_9658 to i32*
  %v3_9658 = load i32, i32* %v2_9658, align 4
  store i32 %v3_9658, i32* %r4.global-to-local, align 4
  %v0_965c = call i32 @function_e240()
  store i32 %v0_965c, i32* %r0.global-to-local, align 4
  %v3_9660 = load i32, i32* %stack_var_-40, align 4
  %v5_9668 = mul i32 %v3_9660, 24
  %v0_966c = load i32, i32* %r4.global-to-local, align 4
  %v1_9670 = load i32, i32* @sb, align 4
  %v2_9670 = add i32 %v1_9670, %v5_9668
  store i32 %v2_9670, i32* %r1.global-to-local, align 4
  %v1_9674 = and i32 %v0_966c, 65280
  store i32 %v1_9674, i32* %r3.global-to-local, align 4
  %v1_966c = udiv i32 %v0_966c, 256
  %v3_9678 = and i32 %v1_966c, 65280
  store i32 %v3_9678, i32* %r2.global-to-local, align 4
  %v1_9680 = add i32 %v2_9670, 20
  %v2_9680 = inttoptr i32 %v1_9680 to i8*
  %v3_9680 = load i8, i8* %v2_9680, align 1
  %v4_9680 = zext i8 %v3_9680 to i32
  store i32 %v4_9680, i32* %lr.global-to-local, align 4
  %v2_968c = call i32 @llvm.bswap.i32(i32 %v0_966c)
  %v7_9690 = lshr i32 %v0_965c, %v4_9680
  %v8_9690 = add i32 %v7_9690, %v2_968c
  %v3_969c = mul i32 %v8_9690, 16777216
  %v1_96a0 = and i32 %v8_9690, 65280
  store i32 %v1_96a0, i32* %r0.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v4_96ac = mul nuw nsw i32 %v1_96a0, 256
  %v5_96ac = or i32 %v4_96ac, %v3_969c
  store i32 %v5_96ac, i32* %r1.global-to-local, align 4
  %v2_96b0 = call i32 @llvm.bswap.i32(i32 %v8_9690)
  store i32 %v2_96b0, i32* %r3.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  %v1_96b8 = load i32, i32* @r5, align 4
  %v2_96b8 = add i32 %v1_96b8, 16
  %v3_96b8 = inttoptr i32 %v2_96b8 to i32*
  store i32 %v2_96b0, i32* %v3_96b8, align 4
  br i1 %v2_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_96c0:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  %v0_96c0 = call i32 @function_e240()
  store i32 %v0_96c0, i32* %r0.global-to-local, align 4
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_96d0, i1* %cpsr_z.global-to-local, align 1
  %v1_96d4 = load i32, i32* @r5, align 4
  %v2_96d4 = add i32 %v1_96d4, 12
  %v3_96d4 = inttoptr i32 %v2_96d4 to i32*
  store i32 %v0_96c0, i32* %v3_96d4, align 4
  br i1 %v3_96d0, label %dec_label_pc_96dc, label %dec_label_pc_96c0.dec_label_pc_9524_crit_edge

dec_label_pc_96c0.dec_label_pc_9524_crit_edge:    ; preds = %dec_label_pc_96c0
  %v1_9528.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9524

dec_label_pc_96dc:                                ; preds = %dec_label_pc_96c0, %dec_label_pc_9510
  %v0_96dc = call i32 @function_e240()
  %v3_96e4 = urem i32 %v0_96dc, 65536
  store i32 %v3_96e4, i32* %r0.global-to-local, align 4
  %v1_96ec = sub nsw i32 999, %v3_96e4
  store i32 %v1_96ec, i32* %r2.global-to-local, align 4
  %v3_96f0 = sdiv i32 %v1_96ec, 256
  store i32 %v3_96f0, i32* %r1.global-to-local, align 4
  %v3_96f434 = udiv i32 %v3_96e4, 256
  store i32 %v3_96f434, i32* %r3.global-to-local, align 4
  %v1_96f8 = trunc i32 %v3_96f434 to i8
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 5
  %v4_96f8 = inttoptr i32 %v3_96f8 to i8*
  store i8 %v1_96f8, i8* %v4_96f8, align 1
  %v0_96fc = load i32, i32* %r0.global-to-local, align 4
  %v1_96fc = trunc i32 %v0_96fc to i8
  %v2_96fc = load i32, i32* @r5, align 4
  %v3_96fc = add i32 %v2_96fc, 4
  %v4_96fc = inttoptr i32 %v3_96fc to i8*
  store i8 %v1_96fc, i8* %v4_96fc, align 1
  %v0_9700 = load i32, i32* %r1.global-to-local, align 4
  %v1_9700 = trunc i32 %v0_9700 to i8
  %v2_9700 = load i32, i32* @r6, align 4
  %v3_9700 = add i32 %v2_9700, 5
  %v4_9700 = inttoptr i32 %v3_9700 to i8*
  store i8 %v1_9700, i8* %v4_9700, align 1
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9248, %v1_9708
  store i1 %v9_9708, i1* %cpsr_z.global-to-local, align 1
  %v0_970c = load i32, i32* %r2.global-to-local, align 4
  %v1_970c = trunc i32 %v0_970c to i8
  %v2_970c = load i32, i32* @r6, align 4
  %v3_970c = add i32 %v2_970c, 4
  %v4_970c = inttoptr i32 %v3_970c to i8*
  store i8 %v1_970c, i8* %v4_970c, align 1
  %v0_9710 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9710, label %dec_label_pc_9714, label %dec_label_pc_96dc.dec_label_pc_9530_crit_edge

dec_label_pc_96dc.dec_label_pc_9530_crit_edge:    ; preds = %dec_label_pc_96dc
  %v1_9534.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9530

dec_label_pc_9714:                                ; preds = %dec_label_pc_96dc, %dec_label_pc_9524
  %v0_9714 = call i32 @function_e240()
  %v1_9714 = trunc i32 %v0_9714 to i8
  store i32 %v0_9714, i32* %r0.global-to-local, align 4
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v4_971c = sdiv i32 %v0_9714, 256
  store i32 %v4_971c, i32* %r3.global-to-local, align 4
  %v1_9720 = load i32, i32* @r4, align 4
  %v9_9720 = icmp eq i32 %v3_924c, %v1_9720
  store i1 %v9_9720, i1* %cpsr_z.global-to-local, align 1
  %v3_9724 = load i32, i32* @r5, align 4
  %v4_9724 = add i32 %v3_9724, 44
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 %v1_9714, i8* %v5_9724, align 1
  %v0_9728 = load i32, i32* %r3.global-to-local, align 4
  %v1_9728 = trunc i32 %v0_9728 to i8
  %v2_9728 = load i32, i32* @r7, align 4
  %v3_9728 = add i32 %v2_9728, 1
  %v4_9728 = inttoptr i32 %v3_9728 to i8*
  store i8 %v1_9728, i8* %v4_9728, align 1
  %v0_972c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_972c, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_9730:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  %v0_9730 = call i32 @function_e240()
  %v1_9730 = trunc i32 %v0_9730 to i8
  store i32 %v0_9730, i32* %r0.global-to-local, align 4
  %v4_973436 = udiv i32 %v0_9730, 256
  %v1_9738 = trunc i32 %v4_973436 to i8
  %v2_9738 = load i32, i32* @r7, align 4
  %v3_9738 = add i32 %v2_9738, 3
  %v4_9738 = inttoptr i32 %v3_9738 to i8*
  store i8 %v1_9738, i8* %v4_9738, align 1
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_9730
  %v1_9744 = load i32, i32* @r5, align 4
  %v2_9744 = add i32 %v1_9744, 16
  %v3_9744 = inttoptr i32 %v2_9744 to i32*
  %v4_9744 = load i32, i32* %v3_9744, align 4
  store i32 %v4_9744, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_9730, %bb95
  %v3_9748 = load i32, i32* @r7, align 4
  %v4_9748 = add i32 %v3_9748, 2
  %v5_9748 = inttoptr i32 %v4_9748 to i8*
  store i8 %v1_9730, i8* %v5_9748, align 1
  %v0_974c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_974c, label %dec_label_pc_9754, label %bb97

bb97:                                             ; preds = %bb96
  %v1_974c = load i32, i32* %r3.global-to-local, align 4
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = add i32 %v2_974c, 16
  %v4_974c = inttoptr i32 %v3_974c to i32*
  store i32 %v1_974c, i32* %v4_974c, align 4
  br label %dec_label_pc_9550

dec_label_pc_9754:                                ; preds = %dec_label_pc_953c, %bb96
  %v0_9754 = call i32 @function_e240()
  store i32 %v0_9754, i32* %r0.global-to-local, align 4
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  %v1_9760 = load i32, i32* @r6, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  store i32 %v0_9754, i32* %v3_9760, align 4
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_9768:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754
  %v0_9768 = load i32, i32* @r7, align 4
  %v1_9768 = add i32 %v0_9768, 8
  store i32 %v1_9768, i32* @r4, align 4
  store i32 %v1_9768, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r1.global-to-local, align 4
  %v2_9774 = call i32 @function_e2f4(i32 %v1_9768, i32 %v6_9174)
  store i32 %v2_9774, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r2.global-to-local, align 4
  %v0_977c = load i32, i32* @r8, align 4
  %v1_977c = trunc i32 %v0_977c to i8
  %v2_977c = load i32, i32* @r4, align 4
  %v4_977c = add i32 %v2_977c, %v6_9174
  %v5_977c = inttoptr i32 %v4_977c to i8*
  store i8 %v1_977c, i8* %v5_977c, align 1
  br label %dec_label_pc_955c

dec_label_pc_9784:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9788 = call i32 @function_125b0(i32* null)
  store i32 %v2_9788, i32* %r0.global-to-local, align 4
  store i32 %v2_91d8, i32* %r1.global-to-local, align 4
  %v9_9790 = icmp eq i32 %v2_91d8, %v2_9788
  store i1 %v9_9790, i1* %cpsr_z.global-to-local, align 1
  %v6_9794 = icmp slt i32 %v2_91d8, %v2_9788
  br i1 %v6_9794, label %dec_label_pc_9798, label %dec_label_pc_94d8

dec_label_pc_9798:                                ; preds = %dec_label_pc_9784, %dec_label_pc_9078, %dec_label_pc_97a0
  %v29_979c = phi i32 [ %v3_91ec, %dec_label_pc_9078 ], [ %v1_97a4, %dec_label_pc_97a0 ], [ %v2_9788, %dec_label_pc_9784 ]
  store i32 %v3_9078, i32* %r4.global-to-local, align 4
  store i32 %v15_9078, i32* %r8.global-to-local, align 4
  store i32 %v21_9078, i32* %sl.global-to-local, align 4
  store i32 %v24_9078, i32* %fp.global-to-local, align 4
  ret i32 %v29_979c

dec_label_pc_97a0:                                ; preds = %dec_label_pc_91fc
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v1_97a4 = call i32 @function_122e0(i32 %v3_91ec)
  store i32 %v1_97a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9798

; uselistorder directives
  uselistorder i32 %v1_97a4, { 1, 0 }
  uselistorder i32 %v0_9730, { 0, 2, 1 }
  uselistorder i32 %v0_9714, { 0, 2, 1 }
  uselistorder i32 %v3_96e4, { 0, 2, 1 }
  uselistorder i32 %v2_96b0, { 1, 0 }
  uselistorder i32 %v8_9690, { 1, 2, 0 }
  uselistorder i32 %v0_966c, { 1, 0, 2 }
  uselistorder i32 %v7_9644, { 1, 0, 2 }
  uselistorder i32 %v1_961c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_95c0, { 1, 0, 2 }
  uselistorder i32 %v4_95bc, { 0, 2, 1 }
  uselistorder i32 %v0_959c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_958c, { 0, 2, 1 }
  uselistorder i32 %v4_9570, { 1, 0 }
  uselistorder i1 %v2_975c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9740, { 2, 3, 1, 0 }
  uselistorder i1 %v3_96d0, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9508, { 2, 1, 0 }
  uselistorder i32 %v0_9478, { 1, 0, 2 }
  uselistorder i32 %v3_931c, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_9298, { 0, 2, 1 }
  uselistorder i32 %v1_9290, { 2, 1, 0 }
  uselistorder i32 %v1_928c, { 1, 0 }
  uselistorder i32 %v1_9288, { 1, 0 }
  uselistorder i32 %v1_927c, { 1, 0 }
  uselistorder i32 %v3_9274, { 2, 0, 1 }
  uselistorder i32 %v3_9244, { 0, 1, 3, 2 }
  uselistorder i32 %v1_9240, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_923c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9234, { 0, 2, 1 }
  uselistorder i32 %v0_9230, { 0, 1, 3, 2 }
  uselistorder i1 %v7_921c, { 1, 0 }
  uselistorder i1 %v7_91f0, { 1, 0 }
  uselistorder i32 %v3_91ec, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_91d8, { 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_9194, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9174, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_90fc, { 1, 0, 2 }
  uselistorder i32 %v2_90a8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_907c, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 20, 21, 1, 2, 3, 4, 5, 6, 18, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19 }
  uselistorder i32* %r3.global-to-local, { 48, 47, 49, 50, 51, 52, 53, 54, 55, 8, 56, 57, 58, 59, 60, 61, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 36, 37, 38, 39, 40, 41, 4, 42, 43, 44, 45, 46, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 43, 5, 44, 45, 46, 1, 3, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 29, 28, 31, 30, 32, 35, 36, 33, 34, 38, 37, 40, 39, 41, 43, 42, 3, 4, 9, 5, 6, 7, 8, 12, 10, 11, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 6, 30, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder label %dec_label_pc_9798, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9768, { 1, 0 }
  uselistorder label %dec_label_pc_9754, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_955c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_94d8, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_97b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_97b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i8 @__decompiler_undefined_function_1()
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_97b4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v1_97d0 = urem i32 %arg4, 256
  store i32 %v1_97d0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_97e0 = call i32 @function_12ee8(i32 %v1_97b4, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v2_97f0 = call i32 @function_12ee8(i32 %v1_97b4, i32 4)
  %v0_97f4 = load i32, i32* @r5, align 4
  store i32 %v0_97f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9800 = load i32, i32* @r7, align 4
  store i32 %v0_9800, i32* %r3.global-to-local, align 4
  %v0_9804 = load i32, i32* @r4, align 4
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  %v5_9808 = inttoptr i32 %v0_97f4 to i32*
  %v6_9808 = call i32 @function_829c(i32 %v0_9804, i32* %v5_9808, i32 2, i32 %v0_9800, i32 %v2_97f0)
  %v1_9814 = urem i32 %v6_9808, 256
  store i32 %v1_9814, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9820 = load i32, i32* @r5, align 4
  store i32 %v0_9820, i32* %r1.global-to-local, align 4
  %v0_9824 = load i32, i32* @r4, align 4
  store i32 %v0_9824, i32* %r0.global-to-local, align 4
  %v5_9828 = trunc i32 %v6_9808 to i8
  %v6_982c = inttoptr i32 %v0_9820 to i32*
  %v7_982c = call i32 @function_829c(i32 %v0_9824, i32* %v6_982c, i32 3, i32 65535, i32 %v6_9808)
  %v0_9830 = load i32, i32* @r5, align 4
  store i32 %v0_9830, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_982c, i32* @sl, align 4
  %v0_9840 = load i32, i32* @r4, align 4
  store i32 %v0_9840, i32* %r0.global-to-local, align 4
  %v5_9844 = inttoptr i32 %v0_9830 to i32*
  %v6_9844 = call i32 @function_829c(i32 %v0_9840, i32* %v5_9844, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_984c = urem i32 %v6_9844, 256
  store i32 %v1_984c, i32* %ip.global-to-local, align 4
  %v0_9850 = load i32, i32* @r5, align 4
  store i32 %v0_9850, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_985c = load i32, i32* @r4, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %sext8 = mul i32 %v6_9844, 16777216
  %v5_9864 = sdiv i32 %sext8, 16777216
  %v6_9864 = inttoptr i32 %v0_9850 to i32*
  %v7_9864 = call i32 @function_829c(i32 %v0_985c, i32* %v6_9864, i32 5, i32 1, i32 %v5_9864)
  %v1_9870 = urem i32 %v7_9864, 256
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9878 = load i32, i32* @r5, align 4
  store i32 %v0_9878, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9880 = load i32, i32* @r4, align 4
  store i32 %v0_9880, i32* %r0.global-to-local, align 4
  %v5_9888 = inttoptr i32 %v0_9878 to i32*
  %v6_9888 = call i32 @function_829c(i32 %v0_9880, i32* %v5_9888, i32 7, i32 65535, i32 %v1_9870)
  %v0_988c = load i32, i32* @r5, align 4
  store i32 %v0_988c, i32* %r1.global-to-local, align 4
  %v3_9890 = mul i32 %v6_9888, 65536
  store i32 %v3_9890, i32* @r8, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9898 = load i32, i32* @r7, align 4
  store i32 %v0_9898, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r4, align 4
  store i32 %v0_989c, i32* %r0.global-to-local, align 4
  %v5_98a0 = inttoptr i32 %v0_988c to i32*
  %v6_98a0 = call i32 @function_829c(i32 %v0_989c, i32* %v5_98a0, i32 10, i32 %v0_9898, i32 ptrtoint (i32* @0 to i32))
  %v1_98a8 = urem i32 %v6_98a0, 256
  store i32 %v1_98a8, i32* %ip.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98b8 = load i32, i32* @r4, align 4
  store i32 %v0_98b8, i32* %r0.global-to-local, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_829c(i32 %v0_98b8, i32* %v5_98c0, i32 11, i32 1, i32 %v1_98a8)
  %v1_98c8 = urem i32 %v6_98c0, 256
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_98cc = load i32, i32* @r5, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  store i32 %v0_98d8, i32* %r0.global-to-local, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_829c(i32 %v0_98d8, i32* %v5_98e0, i32 12, i32 1, i32 %v1_98c8)
  %v1_98e8 = urem i32 %v6_98e0, 256
  store i32 %v1_98e8, i32* %ip.global-to-local, align 4
  %v0_98ec = load i32, i32* @r5, align 4
  store i32 %v0_98ec, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r7, align 4
  store i32 %v0_98f4, i32* %r3.global-to-local, align 4
  %v0_98f8 = load i32, i32* @r4, align 4
  store i32 %v0_98f8, i32* %r0.global-to-local, align 4
  %v5_9900 = inttoptr i32 %v0_98ec to i32*
  %v6_9900 = call i32 @function_829c(i32 %v0_98f8, i32* %v5_9900, i32 13, i32 %v0_98f4, i32 %v1_98e8)
  %v1_9908 = urem i32 %v6_9900, 256
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_990c = load i32, i32* @r5, align 4
  store i32 %v0_990c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9914 = load i32, i32* @r7, align 4
  store i32 %v0_9914, i32* %r3.global-to-local, align 4
  %v0_9918 = load i32, i32* @r4, align 4
  store i32 %v0_9918, i32* %r0.global-to-local, align 4
  %v5_9920 = inttoptr i32 %v0_990c to i32*
  %v6_9920 = call i32 @function_829c(i32 %v0_9918, i32* %v5_9920, i32 14, i32 %v0_9914, i32 %v1_9908)
  %v1_9928 = urem i32 %v6_9920, 256
  store i32 %v1_9928, i32* %ip.global-to-local, align 4
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9934 = load i32, i32* @r7, align 4
  store i32 %v0_9934, i32* %r3.global-to-local, align 4
  %v0_9938 = load i32, i32* @r4, align 4
  store i32 %v0_9938, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @function_829c(i32 %v0_9938, i32* %v5_9940, i32 15, i32 %v0_9934, i32 %v1_9928)
  %v1_9948 = urem i32 %v6_9940, 256
  store i32 %v1_9948, i32* %ip.global-to-local, align 4
  %v0_994c = load i32, i32* @r7, align 4
  store i32 %v0_994c, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9954 = load i32, i32* @r5, align 4
  store i32 %v0_9954, i32* %r1.global-to-local, align 4
  %v0_9958 = load i32, i32* @r4, align 4
  store i32 %v0_9958, i32* %r0.global-to-local, align 4
  %v5_9960 = inttoptr i32 %v0_9954 to i32*
  %v6_9960 = call i32 @function_829c(i32 %v0_9958, i32* %v5_9960, i32 %v0_994c, i32 768, i32 %v1_9948)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_996c = load i32, i32* @r5, align 4
  store i32 %v0_996c, i32* %r1.global-to-local, align 4
  %v0_9974 = load i32, i32* @r4, align 4
  store i32 %v0_9974, i32* %r0.global-to-local, align 4
  %v5_9978 = inttoptr i32 %v0_996c to i32*
  %v6_9978 = call i32 @function_829c(i32 %v0_9974, i32* %v5_9978, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9980 = urem i32 %v6_9978, 256
  store i32 %v1_9980, i32* %r3.global-to-local, align 4
  %v0_9984 = load i32, i32* @r7, align 4
  store i32 %v0_9984, i32* %r0.global-to-local, align 4
  %v1_998c = inttoptr i32 %v0_9984 to i32*
  %v2_998c = call i32 @function_125b0(i32* %v1_998c)
  %v1_9990 = load i32, i32* @r6, align 4
  %v2_9990 = add i32 %v1_9990, %v2_998c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_99a4 = call i32 @function_12bfc(i32 2, i32 3, i32 6)
  store i32 %v3_99a4, i32* %r0.global-to-local, align 4
  %v0_99a8 = load i32, i32* @r8, align 4
  %v3_99a8 = udiv i32 %v0_99a8, 65536
  store i32 %v3_99a8, i32* %r1.global-to-local, align 4
  %v7_99ac = icmp eq i32 %v3_99a4, -1
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_99a4, i32* @sb, align 4
  br i1 %v7_99ac, label %dec_label_pc_9d60, label %dec_label_pc_99bc

dec_label_pc_99bc:                                ; preds = %dec_label_pc_97b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_99c4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_99c4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_99cc = load i32, i32* @r7, align 4
  store i32 %v0_99cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_99d8 = call i32 @function_12bcc(i32 %v3_99a4, i32 %v0_99cc, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_99d8, i32* %r0.global-to-local, align 4
  %v7_99dc = icmp eq i32 %v6_99d8, -1
  store i1 %v7_99dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99dc, label %dec_label_pc_9d58, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99bc
  store i32 %v1_97b4, i32* %r2.global-to-local, align 4
  %v0_99e8 = load i32, i32* @sl, align 4
  %v3_99e8 = mul i32 %v0_99e8, 65536
  store i32 %v3_99e8, i32* %r0.global-to-local, align 4
  %v3_99ec = urem i32 %v0_99e8, 65536
  store i32 %v3_99ec, i32* %r3.global-to-local, align 4
  %v2_99f0 = icmp eq i32 %v1_97b4, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %v0_99f4 = load i32, i32* @r7, align 4
  store i32 %v0_99f4, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge, label %dec_label_pc_9a00

dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge: ; preds = %dec_label_pc_99e4
  %.pre = add i32 %v6_9960, 40
  br label %dec_label_pc_9be0.preheader

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99e4
  %v0_9a04 = load i32, i32* @r8, align 4
  %v3_9a04 = udiv i32 %v0_9a04, 16777216
  %tmp77 = udiv i32 %v0_99e8, 256
  %v3_9a08 = urem i32 %tmp77, 256
  store i32 %v3_9a08, i32* %r0.global-to-local, align 4
  %v1_9a0c = add i32 %v6_9960, 40
  store i32 %v1_9a0c, i32* %ip.global-to-local, align 4
  %v3_9dd4 = icmp ugt i32 %v0_99a8, -65537
  %v2_9ab8 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9ac4 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_9adc = urem i32 %v1_9a0c, 256
  %tmp78 = udiv i32 %v1_9a0c, 256
  %v3_9ae0 = urem i32 %tmp78, 256
  %v2_9af0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_9af4 = ptrtoint i32* %stack_var_-332 to i32
  %v2_9af8 = ptrtoint i32* %stack_var_-44 to i32
  %v4_9b6c = zext i8 %tmp32 to i32
  %v4_9b70 = zext i8 %tmp31 to i32
  %v4_9b7c = mul nuw nsw i32 %v4_9b70, 256
  %v4_9b8c = zext i8 %tmp30 to i32
  %v1_9b90 = and i32 %v4_9b8c, 18
  %v2_9b94 = icmp eq i32 %v1_9b90, 18
  %v1_9fec = urem i32 %v6_98a0, 2
  %tmp101 = sub nsw i32 0, %v1_9fec
  %v4_9ff4 = and i32 %tmp101, 32
  %v1_a020 = urem i32 %v6_98e0, 2
  %tmp102 = sub nsw i32 0, %v1_a020
  %v4_a028 = and i32 %tmp102, 8
  %v1_a06c = urem i32 %v6_9940, 2
  %v4_9ae4 = mul nuw nsw i32 %v1_9adc, 256
  %v5_9ae4 = or i32 %v4_9ae4, %v3_9ae0
  %v5_9b7c = or i32 %v4_9b6c, %v4_9b7c
  %v1_9b9c = and i32 %v4_9b8c, 5
  %v2_9b9c = icmp eq i32 %v1_9b9c, 0
  %v1_9aa4 = urem i32 %v3_99a8, 256
  %v4_9aa8 = mul nuw nsw i32 %v1_9aa4, 256
  %v5_9aa8 = or i32 %v3_9a04, %v4_9aa8
  %v1_9ab0 = trunc i32 %v3_99a8 to i8
  %v1_9ab4 = trunc i32 %v3_9a04 to i8
  %v1_9edc = urem i32 %v0_99e8, 256
  %v4_9ee4 = mul nuw nsw i32 %v1_9edc, 256
  %v5_9ee4 = or i32 %v4_9ee4, %v3_9a08
  %sext = mul i32 %v1_9a0c, 16777216
  %v4_9f00 = sdiv i32 %sext, 16777216
  %v1_a004 = urem i32 %v6_98c0, 2
  %tmp103 = sub nsw i32 0, %v1_a004
  %v4_a00c = and i32 %tmp103, 16
  %v1_a038 = urem i32 %v6_9900, 2
  %tmp104 = sub nsw i32 0, %v1_a038
  %v4_a040 = and i32 %tmp104, 4
  %v1_a050 = urem i32 %v6_9920, 2
  %tmp105 = sub nsw i32 0, %v1_a050
  %v3_a058 = and i32 %tmp105, 2
  br label %dec_label_pc_9a1c.outer

dec_label_pc_9a1c.outer:                          ; preds = %bb93, %dec_label_pc_9a00
  %stack_var_-336.0.ph = phi i32 [ %v0_9f1c, %bb93 ], [ %tmp, %dec_label_pc_9a00 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_9e28, %bb93 ], [ %tmp38, %dec_label_pc_9a00 ]
  br label %dec_label_pc_9a1c

dec_label_pc_9a1c:                                ; preds = %dec_label_pc_9a1c.outer, %dec_label_pc_9bc8
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.5, %dec_label_pc_9bc8 ], [ %stack_var_-56.0.ph, %dec_label_pc_9a1c.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9a28 = call i32 @function_12bfc(i32 2, i32 1, i32 0)
  store i32 %v3_9a28, i32* %r0.global-to-local, align 4
  %v7_9a2c = icmp eq i32 %v3_9a28, -1
  store i1 %v7_9a2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9a28, i32* @sl, align 4
  br i1 %v7_9a2c, label %dec_label_pc_9bc8, label %dec_label_pc_9a38

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9a1c, %dec_label_pc_9ba4
  %v0_9a40 = phi i32 [ %v3_9bb8, %dec_label_pc_9ba4 ], [ %v3_9a28, %dec_label_pc_9a1c ]
  %stack_var_-56.1 = phi i32 [ %v0_9e28, %dec_label_pc_9ba4 ], [ %stack_var_-56.0, %dec_label_pc_9a1c ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9a40 = call i32 @function_1221c(i32 %v0_9a40, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9a48 = or i32 %v2_9a40, 2048
  store i32 %v1_9a48, i32* @r2, align 4
  %v0_9a4c = load i32, i32* @sl, align 4
  store i32 %v0_9a4c, i32* %r0.global-to-local, align 4
  %v2_9a50 = call i32 @function_1221c(i32 %v0_9a4c, i32 4)
  store i32 %v2_9a50, i32* %r0.global-to-local, align 4
  %v3_9a54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9a54, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %lr.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_9a70 = mul i32 %v3_9a54, 24
  store i32 %v5_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = add i32 %v5_9a70, %arg3
  store i32 %v2_9a74, i32* %r2.global-to-local, align 4
  %v1_9a78 = add i32 %v2_9a74, 20
  %v2_9a78 = inttoptr i32 %v1_9a78 to i8*
  %v3_9a78 = load i8, i8* %v2_9a78, align 1
  %v4_9a78 = zext i8 %v3_9a78 to i32
  store i32 %v4_9a78, i32* %r3.global-to-local, align 4
  %v2_9a7c = icmp ugt i8 %v3_9a78, 30
  %v7_9a7c = icmp eq i8 %v3_9a78, 31
  store i1 %v7_9a7c, i1* %cpsr_z.global-to-local, align 1
  %v2_9a80 = xor i1 %v7_9a7c, true
  %v3_9a80 = and i1 %v2_9a7c, %v2_9a80
  br i1 %v3_9a80, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_9a38
  %v5_9a80 = add i32 %v2_9a74, 16
  %v6_9a80 = inttoptr i32 %v5_9a80 to i32*
  %v7_9a80 = load i32, i32* %v6_9a80, align 4
  store i32 %v7_9a80, i32* %r3.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_9a38, %bb
  %v4_9a84 = phi i32 [ %v4_9a78, %dec_label_pc_9a38 ], [ %v7_9a80, %bb ]
  %v4_9a84.stack_var_-56.1 = select i1 %v3_9a80, i32 %v4_9a84, i32 %stack_var_-56.1
  %v2_9a88 = xor i1 %v2_9a7c, true
  %v3_9a88 = or i1 %v7_9a7c, %v2_9a88
  br i1 %v3_9a88, label %dec_label_pc_9d68, label %dec_label_pc_9a8c

dec_label_pc_9a8c:                                ; preds = %bb79
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dd4, label %dec_label_pc_9ddc, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9d68, %dec_label_pc_9a8c
  %stack_var_-56.3 = phi i32 [ %v2_9dc0, %dec_label_pc_9d68 ], [ %v4_9a84.stack_var_-56.1, %dec_label_pc_9a8c ]
  store i32 %v3_9a04, i32* %r0.global-to-local, align 4
  store i32 %v5_9aa8, i32* %r3.global-to-local, align 4
  store i32 %v1_9aa4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ab8

dec_label_pc_9ab8:                                ; preds = %dec_label_pc_9ddc, %dec_label_pc_9aa0
  %stack_var_-57.0 = phi i8 [ %v1_9de4, %dec_label_pc_9ddc ], [ %v1_9ab0, %dec_label_pc_9aa0 ]
  %v0_9e28 = phi i32 [ %stack_var_-56.6, %dec_label_pc_9ddc ], [ %stack_var_-56.3, %dec_label_pc_9aa0 ]
  %storemerge = phi i8 [ %v1_9ddc, %dec_label_pc_9ddc ], [ %v1_9ab4, %dec_label_pc_9aa0 ]
  store i32 %v2_9ab8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ac0 = load i32, i32* @sl, align 4
  store i32 %v0_9ac0, i32* %r0.global-to-local, align 4
  %v4_9ac4 = call i32 @function_12a58(i32 %v0_9ac0, %sockaddr* %v3_9ac4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9acc = call i32 @function_125b0(i32* null)
  store i32 %v2_9acc, i32* %r0.global-to-local, align 4
  store i32 %v1_9a0c, i32* %r1.global-to-local, align 4
  store i32 %v1_9adc, i32* %r3.global-to-local, align 4
  store i32 %v5_9ae4, i32* @fp, align 4
  store i32 %v1_9adc, i32* %r2.global-to-local, align 4
  store i32 %v2_9acc, i32* @r4, align 4
  store i32 %v2_9af4, i32* @r7, align 4
  store i32 %v2_9af8, i32* @r6, align 4
  %v9_9b50 = icmp eq i32 %tmp33, %v0_9e28
  %v4_9b74 = zext i8 %storemerge to i32
  %v4_9b78 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9b50 to i32
  %v9_9b64 = icmp eq i1 %v9_9b50, false
  %v4_9b80 = mul nuw nsw i32 %v4_9b78, 256
  %v5_9b80 = or i32 %v4_9b74, %v4_9b80
  %v9_9b84 = icmp eq i32 %v5_9b80, %v5_9b7c
  br label %dec_label_pc_9b14

dec_label_pc_9b04:                                ; preds = %.thread25, %dec_label_pc_9b6c, %dec_label_pc_9b9c, %bb82
  %v2_9b04 = call i32 @function_125b0(i32* null)
  %v0_9b08 = load i32, i32* @r4, align 4
  %v2_9b08 = sub i32 %v2_9b04, %v0_9b08
  store i32 %v2_9b08, i32* %r0.global-to-local, align 4
  %v7_9b0c = icmp eq i32 %v2_9b08, 10
  store i1 %v7_9b0c, i1* %cpsr_z.global-to-local, align 1
  %v8_9b10 = icmp sgt i32 %v2_9b08, 10
  br i1 %v8_9b10, label %dec_label_pc_9ba4, label %dec_label_pc_9b14

dec_label_pc_9b14:                                ; preds = %dec_label_pc_9b04, %dec_label_pc_9ab8
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_9af4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9b24 = load i32, i32* @sb, align 4
  store i32 %v0_9b24, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_9b34 = call i32 @function_12b38(i32 %v0_9b24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9af0, i32 %v2_9af8)
  store i32 %v7_9b34, i32* %r2.global-to-local, align 4
  %v7_9b3c = icmp eq i32 %v7_9b34, -1
  store i1 %v7_9b3c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9b3c, label %dec_label_pc_9d60, label %dec_label_pc_9b48

dec_label_pc_9b48:                                ; preds = %dec_label_pc_9b14
  store i32 %tmp33, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9b5c = icmp eq i32 %v7_9b34, 40
  store i1 %v7_9b5c, i1* %cpsr_z.global-to-local, align 1
  %tmp106 = icmp ult i32 %v7_9b34, 41
  br i1 %tmp106, label %.thread25, label %bb82

.thread25:                                        ; preds = %dec_label_pc_9b48
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9b04

bb82:                                             ; preds = %dec_label_pc_9b48
  store i1 %v9_9b64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b64, label %dec_label_pc_9b04, label %dec_label_pc_9b6c

dec_label_pc_9b6c:                                ; preds = %bb82
  store i32 %v4_9b70, i32* %r1.global-to-local, align 4
  store i32 %v4_9b74, i32* %ip.global-to-local, align 4
  store i32 %v4_9b78, i32* %r2.global-to-local, align 4
  store i32 %v5_9b7c, i32* %r3.global-to-local, align 4
  store i32 %v5_9b80, i32* @r5, align 4
  store i1 %v9_9b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b84, label %dec_label_pc_9b8c, label %dec_label_pc_9b04

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9b6c
  store i32 %v4_9b8c, i32* %r2.global-to-local, align 4
  store i32 %v1_9b90, i32* %r3.global-to-local, align 4
  store i1 %v2_9b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b94, label %dec_label_pc_9e1c, label %dec_label_pc_9b9c

dec_label_pc_9b9c:                                ; preds = %dec_label_pc_9b8c
  store i1 %v2_9b9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b9c, label %dec_label_pc_9b04, label %dec_label_pc_9ba4

dec_label_pc_9ba4:                                ; preds = %dec_label_pc_9b9c, %dec_label_pc_9b04
  %v0_9ba4 = load i32, i32* @sl, align 4
  store i32 %v0_9ba4, i32* %r0.global-to-local, align 4
  %v1_9ba8 = call i32 @function_122e0(i32 %v0_9ba4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9bb8 = call i32 @function_12bfc(i32 2, i32 1, i32 0)
  store i32 %v3_9bb8, i32* %r0.global-to-local, align 4
  %v3_9bbc = icmp eq i32 %v3_9bb8, -1
  %v8_9bbc = icmp eq i32 %v3_9bb8, -1
  store i1 %v8_9bbc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9bb8, i32* @sl, align 4
  br i1 %v3_9bbc, label %dec_label_pc_9bc8, label %dec_label_pc_9a38

dec_label_pc_9bc8:                                ; preds = %dec_label_pc_9ba4, %dec_label_pc_9a1c
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_9a1c ], [ %v0_9e28, %dec_label_pc_9ba4 ]
  %v3_9bc8 = load i32, i32* %stack_var_-40, align 4
  %v1_9bd0 = add i32 %v3_9bc8, 1
  store i32 %v1_9bd0, i32* %r3.global-to-local, align 4
  %v9_9bd4 = icmp eq i32 %v1_9bd0, %v1_97b4
  store i1 %v9_9bd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9bd0, i32* %stack_var_-40, align 4
  %v5_9bdc = icmp slt i32 %v1_9bd0, %v1_97b4
  br i1 %v5_9bdc, label %dec_label_pc_9a1c, label %dec_label_pc_9be0.preheader

dec_label_pc_9be0.preheader:                      ; preds = %bb93, %dec_label_pc_9bc8, %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge
  %v1_9c14.pre-phi = phi i32 [ %.pre, %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge ], [ %v1_9a0c, %dec_label_pc_9bc8 ], [ %v1_9a0c, %bb93 ]
  %v1_9bf8 = add i32 %v6_9960, 20
  %v3_9bfc = mul i32 %v1_9bf8, 65536
  %tmp84 = mul i32 %v1_9bf8, 256
  %v1_9c04 = and i32 %tmp84, 65280
  %tmp85 = udiv i32 %v1_9bf8, 256
  %v4_9c08 = urem i32 %tmp85, 256
  %v5_9c08 = or i32 %v4_9c08, %v1_9c04
  %v2_9d38 = icmp eq i32 %v1_9980, 0
  %v3_9d24 = icmp eq i32 %v3_99ec, 65535
  br label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9be0.preheader, %dec_label_pc_9e04
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_9e04, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9be0
  store i32 %v1_9bf8, i32* @r8, align 4
  store i32 %v3_9bfc, i32* %r2.global-to-local, align 4
  store i32 %v5_9c08, i32* @fp, align 4
  store i32 %v6_9960, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_9c14.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_9d10

dec_label_pc_9c20:                                ; preds = %dec_label_pc_9d34, %dec_label_pc_9d48
  %v0_9c20 = load i32, i32* @r7, align 4
  %v1_9c20 = trunc i32 %v0_9c20 to i8
  %v2_9c20 = load i32, i32* @r4, align 4
  %v3_9c20 = add i32 %v2_9c20, 10
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v1_9c20, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* @r7, align 4
  %v1_9c24 = trunc i32 %v0_9c24 to i8
  %v2_9c24 = load i32, i32* @r4, align 4
  %v3_9c24 = add i32 %v2_9c24, 11
  %v4_9c24 = inttoptr i32 %v3_9c24 to i8*
  store i8 %v1_9c24, i8* %v4_9c24, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9c2c = load i32, i32* @r4, align 4
  store i32 %v0_9c2c, i32* @r0, align 4
  %v2_9c30 = call i32 @function_c688(i32 %v0_9c2c, i32 20)
  %v3_9c30 = trunc i32 %v2_9c30 to i8
  store i32 %v2_9c30, i32* %r0.global-to-local, align 4
  %v3_9c34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v3_9c3c = mul i32 %v3_9c34, 16
  %v2_9c40 = add i32 %v3_9c3c, %v2_97e0
  store i32 %v2_9c40, i32* %r1.global-to-local, align 4
  %v1_9c44 = add i32 %v2_9c40, 4
  %v2_9c44 = inttoptr i32 %v1_9c44 to i32*
  %v3_9c44 = load i32, i32* %v2_9c44, align 4
  %v3_9c48 = mul i32 %v3_9c44, 65536
  store i32 %v3_9c48, i32* %ip.global-to-local, align 4
  %tmp86 = mul i32 %v3_9c44, 256
  %v1_9c50 = and i32 %tmp86, 65280
  %tmp87 = udiv i32 %v3_9c44, 256
  %v4_9c54 = urem i32 %tmp87, 256
  %v5_9c54 = or i32 %v4_9c54, %v1_9c50
  store i32 %v5_9c54, i32* %r2.global-to-local, align 4
  %v1_9c58 = add i32 %v3_9c44, 1
  store i32 %v1_9c58, i32* %r3.global-to-local, align 4
  store i32 %v1_9c58, i32* %v2_9c44, align 4
  %v0_9c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c60 = load i32, i32* @r5, align 4
  %v2_9c60 = add i32 %v1_9c60, 4
  %v3_9c60 = inttoptr i32 %v2_9c60 to i32*
  store i32 %v0_9c60, i32* %v3_9c60, align 4
  %v0_9c64 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c64 = add i32 %v0_9c64, 8
  %v2_9c64 = inttoptr i32 %v1_9c64 to i32*
  %v3_9c64 = load i32, i32* %v2_9c64, align 4
  %tmp88 = mul i32 %v3_9c64, 256
  %v1_9c70 = and i32 %tmp88, 65280
  %tmp89 = udiv i32 %v3_9c64, 256
  %v4_9c74 = urem i32 %tmp89, 256
  %v5_9c74 = or i32 %v4_9c74, %v1_9c70
  store i32 %v5_9c74, i32* %r2.global-to-local, align 4
  %v4_9c7828 = udiv i32 %v2_9c30, 256
  %v1_9c7c = trunc i32 %v4_9c7828 to i8
  %v2_9c7c = load i32, i32* @r4, align 4
  %v3_9c7c = add i32 %v2_9c7c, 11
  %v4_9c7c = inttoptr i32 %v3_9c7c to i8*
  store i8 %v1_9c7c, i8* %v4_9c7c, align 1
  %v3_9c80 = load i32, i32* @r4, align 4
  %v4_9c80 = add i32 %v3_9c80, 10
  %v5_9c80 = inttoptr i32 %v4_9c80 to i8*
  store i8 %v3_9c30, i8* %v5_9c80, align 1
  %v0_9c84 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c84 = load i32, i32* @r5, align 4
  %v2_9c84 = add i32 %v1_9c84, 8
  %v3_9c84 = inttoptr i32 %v2_9c84 to i32*
  store i32 %v0_9c84, i32* %v3_9c84, align 4
  %v0_9c88 = load i32, i32* @r5, align 4
  store i32 %v0_9c88, i32* @r1, align 4
  %v0_9c8c = load i32, i32* @fp, align 4
  store i32 %v0_9c8c, i32* %r2.global-to-local, align 4
  %v0_9c90 = load i32, i32* @r8, align 4
  store i32 %v0_9c90, i32* %r3.global-to-local, align 4
  %v0_9c94 = load i32, i32* @r4, align 4
  store i32 %v0_9c94, i32* %r0.global-to-local, align 4
  %v0_9c98 = load i32, i32* @r7, align 4
  %v1_9c98 = trunc i32 %v0_9c98 to i8
  %v3_9c98 = add i32 %v0_9c88, 16
  %v4_9c98 = inttoptr i32 %v3_9c98 to i8*
  store i8 %v1_9c98, i8* %v4_9c98, align 1
  %v0_9c9c = load i32, i32* @r7, align 4
  %v1_9c9c = trunc i32 %v0_9c9c to i8
  %v2_9c9c = load i32, i32* @r5, align 4
  %v3_9c9c = add i32 %v2_9c9c, 17
  %v4_9c9c = inttoptr i32 %v3_9c9c to i8*
  store i8 %v1_9c9c, i8* %v4_9c9c, align 1
  %v4_9ca0 = call i32 @function_c6e4(i32 %v0_9c94, i32 %v0_9c88, i32 %v0_9c8c, i32 %v0_9c90)
  %v5_9ca0 = trunc i32 %v4_9ca0 to i8
  store i32 %v4_9ca0, i32* %r0.global-to-local, align 4
  %v4_9ca429 = udiv i32 %v4_9ca0, 256
  %v1_9ca8 = trunc i32 %v4_9ca429 to i8
  %v2_9ca8 = load i32, i32* @r5, align 4
  %v3_9ca8 = add i32 %v2_9ca8, 17
  %v4_9ca8 = inttoptr i32 %v3_9ca8 to i8*
  store i8 %v1_9ca8, i8* %v4_9ca8, align 1
  %v3_9cac = load i32, i32* @r5, align 4
  %v4_9cac = add i32 %v3_9cac, 16
  %v5_9cac = inttoptr i32 %v4_9cac to i8*
  store i8 %v5_9ca0, i8* %v5_9cac, align 1
  %v3_9cb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cb0, i32* %r3.global-to-local, align 4
  %v0_9cb4 = load i32, i32* @r4, align 4
  %v1_9cb4 = add i32 %v0_9cb4, 20
  %v2_9cb4 = inttoptr i32 %v1_9cb4 to i32*
  %v3_9cb4 = load i32, i32* %v2_9cb4, align 4
  %v5_9cbc = mul i32 %v3_9cb0, 24
  %v3_9cc4 = udiv i32 %v3_9cb4, 65536
  store i32 %v3_9cc4, i32* %r2.global-to-local, align 4
  %v2_9cc8 = add i32 %v5_9cbc, %arg3
  store i32 %v2_9cc8, i32* %ip.global-to-local, align 4
  %v3_9ccc4 = udiv i32 %v3_9cb4, 16777216
  %v1_9cd0 = trunc i32 %v3_9ccc4 to i8
  %v3_9cd0 = add i32 %v2_9cc8, 3
  %v4_9cd0 = inttoptr i32 %v3_9cd0 to i8*
  store i8 %v1_9cd0, i8* %v4_9cd0, align 1
  %v0_9cd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cd4 = trunc i32 %v0_9cd4 to i8
  %v2_9cd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9cd4 = add i32 %v2_9cd4, 2
  %v4_9cd4 = inttoptr i32 %v3_9cd4 to i8*
  store i8 %v1_9cd4, i8* %v4_9cd4, align 1
  %v0_9cd8 = load i32, i32* @r4, align 4
  store i32 %v0_9cd8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9ce0 = load i32, i32* @sb, align 4
  store i32 %v0_9ce0, i32* %r0.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @sl, align 4
  store i32 %v0_9ce4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_9cec = load i32, i32* %ip.global-to-local, align 4
  %v6_9cf4 = inttoptr i32 %v0_9cd8 to i32*
  %v7_9cf4 = call i32 @function_12b98(i32 %v0_9ce0, i32* %v6_9cf4, i32 %v0_9ce4, i32 16384, i32 %v0_9cec, i32 16)
  %v3_9cf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cf8, i32* %r3.global-to-local, align 4
  store i32 %v1_97b4, i32* %ip.global-to-local, align 4
  %v1_9d00 = add i32 %v3_9cf8, 1
  store i32 %v1_9d00, i32* %r0.global-to-local, align 4
  %v9_9d04 = icmp eq i32 %v1_9d00, %v1_97b4
  store i1 %v9_9d04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9d00, i32* %stack_var_-40, align 4
  %v6_9d0c = icmp slt i32 %v1_9d00, %v1_97b4
  br i1 %v6_9d0c, label %dec_label_pc_9d10, label %dec_label_pc_9e04

dec_label_pc_9d10:                                ; preds = %dec_label_pc_9c20, %dec_label_pc_9bf4
  %v1_9d1c = phi i32 [ %v1_9d00, %dec_label_pc_9c20 ], [ 0, %dec_label_pc_9bf4 ]
  store i32 %v2_97f0, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_99ec, i32* %lr.global-to-local, align 4
  %v4_9d1c = mul i32 %v1_9d1c, 4
  %v5_9d1c = add i32 %v4_9d1c, %v2_97f0
  %v6_9d1c = inttoptr i32 %v5_9d1c to i32*
  %v7_9d1c = load i32, i32* %v6_9d1c, align 4
  store i32 %v7_9d1c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9d24, i1* %cpsr_z.global-to-local, align 1
  %v1_9d28 = add i32 %v7_9d1c, 40
  store i32 %v1_9d28, i32* @r6, align 4
  %v1_9d2c = add i32 %v7_9d1c, 20
  store i32 %v1_9d2c, i32* @r5, align 4
  br i1 %v3_9d24, label %dec_label_pc_9df0, label %dec_label_pc_9d34

dec_label_pc_9d34:                                ; preds = %dec_label_pc_9d10, %dec_label_pc_9df0
  %v0_9d40 = phi i32 [ %v1_9d28, %dec_label_pc_9d10 ], [ %v0_9d40.pre, %dec_label_pc_9df0 ]
  store i1 %v2_9d38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  store i32 %v0_9d40, i32* %r0.global-to-local, align 4
  br i1 %v2_9d38, label %dec_label_pc_9c20, label %dec_label_pc_9d48

dec_label_pc_9d48:                                ; preds = %dec_label_pc_9d34
  %v2_9d48 = call i32 @function_e2f4(i32 %v0_9d40, i32 %v6_9960)
  store i32 %v2_9d48, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_9d50 = load i32, i32* @r7, align 4
  %v1_9d50 = trunc i32 %v0_9d50 to i8
  %v2_9d50 = load i32, i32* @r6, align 4
  %v4_9d50 = add i32 %v2_9d50, %v6_9960
  %v5_9d50 = inttoptr i32 %v4_9d50 to i8*
  store i8 %v1_9d50, i8* %v5_9d50, align 1
  br label %dec_label_pc_9c20

dec_label_pc_9d58:                                ; preds = %dec_label_pc_99bc
  %v0_9d58 = load i32, i32* @sb, align 4
  store i32 %v0_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = call i32 @function_122e0(i32 %v0_9d58)
  store i32 %v1_9d5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d60

dec_label_pc_9d60:                                ; preds = %dec_label_pc_9b14, %dec_label_pc_9e04, %dec_label_pc_97b0, %dec_label_pc_9d58
  %v29_9d64 = phi i32 [ %v3_99a4, %dec_label_pc_97b0 ], [ %v1_9d5c, %dec_label_pc_9d58 ], [ %v2_9e08, %dec_label_pc_9e04 ], [ 0, %dec_label_pc_9b14 ]
  ret i32 %v29_9d64

dec_label_pc_9d68:                                ; preds = %bb79
  %v1_9d68 = add i32 %v2_9a74, 16
  %v2_9d68 = inttoptr i32 %v1_9d68 to i32*
  %v3_9d68 = load i32, i32* %v2_9d68, align 4
  store i32 %v3_9d68, i32* @r4, align 4
  %v0_9d6c = call i32 @function_e240()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v3_9d70 = load i32, i32* %stack_var_-40, align 4
  %v5_9d78 = mul i32 %v3_9d70, 24
  %v0_9d80 = load i32, i32* @r4, align 4
  %v2_9d84 = add i32 %v5_9d78, %arg3
  store i32 %v2_9d84, i32* %r1.global-to-local, align 4
  %v1_9d80 = udiv i32 %v0_9d80, 256
  %v3_9d88 = and i32 %v1_9d80, 65280
  store i32 %v3_9d88, i32* %r2.global-to-local, align 4
  %v1_9d8c = and i32 %v0_9d80, 65280
  store i32 %v1_9d8c, i32* %r3.global-to-local, align 4
  %v3_9d90 = mul i32 %v0_9d80, 16777216
  %v4_9d94 = mul nuw nsw i32 %v1_9d8c, 256
  %v5_9d94 = or i32 %v4_9d94, %v3_9d90
  store i32 %v5_9d94, i32* %ip.global-to-local, align 4
  %v1_9d98 = add i32 %v2_9d84, 20
  %v2_9d98 = inttoptr i32 %v1_9d98 to i8*
  %v3_9d98 = load i8, i8* %v2_9d98, align 1
  %v4_9d98 = zext i8 %v3_9d98 to i32
  store i32 %v4_9d98, i32* %lr.global-to-local, align 4
  %v2_9da0 = call i32 @llvm.bswap.i32(i32 %v0_9d80)
  %v7_9da4 = lshr i32 %v0_9d6c, %v4_9d98
  %v8_9da4 = add i32 %v7_9da4, %v2_9da0
  store i32 %v8_9da4, i32* %r2.global-to-local, align 4
  %v3_9db0 = mul i32 %v8_9da4, 16777216
  %v1_9db4 = and i32 %v8_9da4, 65280
  store i32 %v1_9db4, i32* %r0.global-to-local, align 4
  %v4_9db8 = mul nuw nsw i32 %v1_9db4, 256
  %v5_9db8 = or i32 %v4_9db8, %v3_9db0
  store i32 %v5_9db8, i32* %r1.global-to-local, align 4
  %v2_9dc0 = call i32 @llvm.bswap.i32(i32 %v8_9da4)
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dd4, label %dec_label_pc_9ddc, label %dec_label_pc_9aa0

dec_label_pc_9ddc:                                ; preds = %dec_label_pc_9d68, %dec_label_pc_9a8c
  %stack_var_-56.6 = phi i32 [ %v2_9dc0, %dec_label_pc_9d68 ], [ %v4_9a84.stack_var_-56.1, %dec_label_pc_9a8c ]
  %v0_9ddc = call i32 @function_e240()
  %v1_9ddc = trunc i32 %v0_9ddc to i8
  store i32 %v0_9ddc, i32* %r0.global-to-local, align 4
  %v4_9de0 = sdiv i32 %v0_9ddc, 256
  store i32 %v4_9de0, i32* %r3.global-to-local, align 4
  %v1_9de4 = trunc i32 %v4_9de0 to i8
  br label %dec_label_pc_9ab8

dec_label_pc_9df0:                                ; preds = %dec_label_pc_9d10
  %v0_9df0 = call i32 @function_e240()
  %v1_9df0 = trunc i32 %v0_9df0 to i8
  store i32 %v0_9df0, i32* %r0.global-to-local, align 4
  %v4_9df4 = sdiv i32 %v0_9df0, 256
  store i32 %v4_9df4, i32* %r3.global-to-local, align 4
  %v1_9df8 = trunc i32 %v4_9df4 to i8
  %v2_9df8 = load i32, i32* @r4, align 4
  %v3_9df8 = add i32 %v2_9df8, 5
  %v4_9df8 = inttoptr i32 %v3_9df8 to i8*
  store i8 %v1_9df8, i8* %v4_9df8, align 1
  %v3_9dfc = load i32, i32* @r4, align 4
  %v4_9dfc = add i32 %v3_9dfc, 4
  %v5_9dfc = inttoptr i32 %v4_9dfc to i8*
  store i8 %v1_9df0, i8* %v5_9dfc, align 1
  %v0_9d40.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9d34

dec_label_pc_9e04:                                ; preds = %dec_label_pc_9c20, %dec_label_pc_9be0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9e08 = call i32 @function_125b0(i32* null)
  store i32 %v2_9e08, i32* %r0.global-to-local, align 4
  store i32 %v2_9990, i32* %lr.global-to-local, align 4
  %v9_9e10 = icmp eq i32 %v2_9990, %v2_9e08
  store i1 %v9_9e10, i1* %cpsr_z.global-to-local, align 1
  %v6_9e14 = icmp slt i32 %v2_9990, %v2_9e08
  br i1 %v6_9e14, label %dec_label_pc_9d60, label %dec_label_pc_9be0

dec_label_pc_9e1c:                                ; preds = %dec_label_pc_9b8c
  %v3_9e1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9e1c, i32* @r4, align 4
  store i32 %v2_97e0, i32* %r0.global-to-local, align 4
  %v3_9e24 = mul i32 %v3_9e1c, 16
  store i32 %v3_9e24, i32* %ip.global-to-local, align 4
  %v3_9e28 = add i32 %v3_9e24, %v2_97e0
  %v4_9e28 = inttoptr i32 %v3_9e28 to i32*
  store i32 %v0_9e28, i32* %v4_9e28, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_9e30 = add i32 %stack_var_-336.0.ph, 4
  %v2_9e30 = inttoptr i32 %v1_9e30 to i32*
  %v3_9e30 = load i32, i32* %v2_9e30, align 4
  store i32 %v3_9e30, i32* %r0.global-to-local, align 4
  %v1_9e38 = and i32 %v3_9e30, 65280
  store i32 %v1_9e38, i32* %r1.global-to-local, align 4
  %v2_9e4c = call i32 @llvm.bswap.i32(i32 %v3_9e30)
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v1_9e54 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e54 = add i32 %v1_9e54, %v2_97e0
  store i32 %v2_9e54, i32* %ip.global-to-local, align 4
  %v2_9e58 = add i32 %v2_9e54, 4
  %v3_9e58 = inttoptr i32 %v2_9e58 to i32*
  store i32 %v2_9e4c, i32* %v3_9e58, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_9e60 = add i32 %stack_var_-336.0.ph, 8
  %v2_9e60 = inttoptr i32 %v1_9e60 to i32*
  %v3_9e60 = load i32, i32* %v2_9e60, align 4
  store i32 %v3_9e60, i32* %r0.global-to-local, align 4
  %v1_9e68 = and i32 %v3_9e60, 65280
  store i32 %v1_9e68, i32* %r1.global-to-local, align 4
  %v3_9e6c = mul i32 %v3_9e60, 16777216
  %v4_9e74 = mul nuw nsw i32 %v1_9e68, 256
  %v5_9e74 = or i32 %v4_9e74, %v3_9e6c
  store i32 %v5_9e74, i32* %r2.global-to-local, align 4
  %v2_9e7c = call i32 @llvm.bswap.i32(i32 %v3_9e60)
  store i32 %v2_9e7c, i32* %r3.global-to-local, align 4
  %v1_9e80 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e80 = add i32 %v1_9e80, 8
  %v3_9e80 = inttoptr i32 %v2_9e80 to i32*
  store i32 %v2_9e7c, i32* %v3_9e80, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_9e88 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_9e88 = load i32, i32* %v1_9e88, align 4
  %v3_9e8c = udiv i32 %v2_9e88, 65536
  store i32 %v3_9e8c, i32* %r2.global-to-local, align 4
  %v3_9e905 = udiv i32 %v2_9e88, 16777216
  store i32 %v3_9e905, i32* %r1.global-to-local, align 4
  %v0_9e94 = load i32, i32* @r5, align 4
  %v3_9e94 = sdiv i32 %v0_9e94, 256
  store i32 %v3_9e94, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v3_9e94 to i8
  %v2_9e98 = load i32, i32* %ip.global-to-local, align 4
  %v3_9e98 = add i32 %v2_9e98, 15
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9e9c = trunc i32 %v0_9e9c to i8
  %v2_9e9c = load i32, i32* %ip.global-to-local, align 4
  %v3_9e9c = add i32 %v2_9e9c, 13
  %v4_9e9c = inttoptr i32 %v3_9e9c to i8*
  store i8 %v1_9e9c, i8* %v4_9e9c, align 1
  %v0_9ea0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ea0 = trunc i32 %v0_9ea0 to i8
  %v2_9ea0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ea0 = add i32 %v2_9ea0, 12
  %v4_9ea0 = inttoptr i32 %v3_9ea0 to i8*
  store i8 %v1_9ea0, i8* %v4_9ea0, align 1
  %v0_9ea4 = load i32, i32* @r5, align 4
  %v1_9ea4 = trunc i32 %v0_9ea4 to i8
  %v2_9ea4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 14
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i8*
  store i8 %v1_9ea4, i8* %v4_9ea4, align 1
  store i32 %v1_9a0c, i32* %r0.global-to-local, align 4
  %v1_9eac = call i32 @function_12d94(i32 %v1_9a0c)
  store i32 %v1_9eac, i32* %r0.global-to-local, align 4
  store i32 %v2_97f0, i32* %r1.global-to-local, align 4
  %v3_9eb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9eb4, i32* %r2.global-to-local, align 4
  %v2_9eb8 = load i32, i32* @r4, align 4
  %v5_9eb8 = mul i32 %v2_9eb8, 4
  %v6_9eb8 = add i32 %v5_9eb8, %v2_97f0
  %v7_9eb8 = inttoptr i32 %v6_9eb8 to i32*
  store i32 %v1_9eac, i32* %v7_9eb8, align 4
  %v0_9ebc = load i32, i32* %r1.global-to-local, align 4
  %v1_9ebc = load i32, i32* %r2.global-to-local, align 4
  %v4_9ebc = mul i32 %v1_9ebc, 4
  %v5_9ebc = add i32 %v4_9ebc, %v0_9ebc
  %v6_9ebc = inttoptr i32 %v5_9ebc to i32*
  %v7_9ebc = load i32, i32* %v6_9ebc, align 4
  store i32 %v7_9ebc, i32* %r0.global-to-local, align 4
  %v1_9ec0 = inttoptr i32 %v7_9ebc to i8*
  %v2_9ec0 = load i8, i8* %v1_9ec0, align 1
  %tmp107 = urem i8 %v2_9ec0, 16
  %v1_9ec4 = zext i8 %tmp107 to i32
  %v1_9ec8 = or i32 %v1_9ec4, 64
  store i32 %v1_9ec8, i32* %r3.global-to-local, align 4
  %v1_9ecc = trunc i32 %v1_9ec8 to i8
  store i8 %v1_9ecc, i8* %v1_9ec0, align 1
  store i32 %v3_99ec, i32* %ip.global-to-local, align 4
  %v0_9ed4 = load i32, i32* %r0.global-to-local, align 4
  %v1_9ed4 = inttoptr i32 %v0_9ed4 to i8*
  %v2_9ed4 = load i8, i8* %v1_9ed4, align 1
  %v1_9ee0 = and i8 %v2_9ed4, -16
  store i32 %v5_9ee4, i32* %r3.global-to-local, align 4
  %v1_9ee8 = or i8 %v1_9ee0, 5
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 %v1_9edc, i32* %r1.global-to-local, align 4
  store i8 %v1_9ee8, i8* %v1_9ed4, align 1
  %v0_9ef8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ef8 = trunc i32 %v0_9ef8 to i8
  %v2_9ef8 = load i32, i32* %r0.global-to-local, align 4
  %v3_9ef8 = add i32 %v2_9ef8, 5
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i8*
  store i8 %v1_9ef8, i8* %v4_9ef8, align 1
  store i32 %v6_9808, i32* %r1.global-to-local, align 4
  store i32 %v4_9f00, i32* %lr.global-to-local, align 4
  %v2_9f04 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f04 = add i32 %v2_9f04, 1
  %v4_9f04 = inttoptr i32 %v3_9f04 to i8*
  store i8 %v5_9828, i8* %v4_9f04, align 1
  store i32 %v5_9864, i32* %r2.global-to-local, align 4
  %v0_9f0c = load i32, i32* %ip.global-to-local, align 4
  %v2_9f0c = icmp eq i32 %v0_9f0c, 0
  store i1 %v2_9f0c, i1* %cpsr_z.global-to-local, align 1
  %v0_9f10 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f10 = trunc i32 %v0_9f10 to i8
  %v2_9f10 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f10 = add i32 %v2_9f10, 4
  %v4_9f10 = inttoptr i32 %v3_9f10 to i8*
  store i8 %v1_9f10, i8* %v4_9f10, align 1
  %v0_9f14 = load i32, i32* %r0.global-to-local, align 4
  %v1_9f14 = add i32 %v0_9f14, 20
  store i32 %v1_9f14, i32* %r3.global-to-local, align 4
  %v0_9f18 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f18 = trunc i32 %v0_9f18 to i8
  %v3_9f18 = add i32 %v0_9f14, 8
  %v4_9f18 = inttoptr i32 %v3_9f18 to i8*
  store i8 %v1_9f18, i8* %v4_9f18, align 1
  %v0_9f1c = load i32, i32* %r3.global-to-local, align 4
  %v0_9f20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f20, label %.thread7, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_9e1c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9f24 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f24 = add i32 %v3_9f24, 6
  %v5_9f24 = inttoptr i32 %v4_9f24 to i8*
  store i8 64, i8* %v5_9f24, align 1
  %v0_9f28.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f28.pr.pr, label %.thread7, label %bb91

bb91:                                             ; preds = %.thread6
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_9e1c, %.thread6, %bb91
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_9f30 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f30 = add i32 %v2_9f30, 9
  %v4_9f30 = inttoptr i32 %v3_9f30 to i8*
  store i8 6, i8* %v4_9f30, align 1
  %v0_9f34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f34, label %bb93, label %bb92

bb92:                                             ; preds = %.thread7
  %v1_9f34 = load i32, i32* %r2.global-to-local, align 4
  %v2_9f34 = trunc i32 %v1_9f34 to i8
  %v3_9f34 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f34 = add i32 %v3_9f34, 7
  %v5_9f34 = inttoptr i32 %v4_9f34 to i8*
  store i8 %v2_9f34, i8* %v5_9f34, align 1
  br label %bb93

bb93:                                             ; preds = %.thread7, %bb92
  %v2_9f3c = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_9f3c, i32* %r3.global-to-local, align 4
  %v1_9f40 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f40 = add i32 %v1_9f40, 12
  %v3_9f40 = inttoptr i32 %v2_9f40 to i32*
  store i32 %v2_9f3c, i32* %v3_9f40, align 4
  %v3_9f44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f44, i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* %ip.global-to-local, align 4
  %v4_9f4c = mul i32 %v3_9f44, 16
  %v5_9f4c = add i32 %v4_9f4c, %v2_97e0
  %v6_9f4c = inttoptr i32 %v5_9f4c to i32*
  %v7_9f4c = load i32, i32* %v6_9f4c, align 4
  store i32 %v7_9f4c, i32* %r3.global-to-local, align 4
  %v0_9f50 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f50 = trunc i32 %v0_9f50 to i8
  %v2_9f50 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f50 = add i32 %v2_9f50, 3
  %v4_9f50 = inttoptr i32 %v3_9f50 to i8*
  store i8 %v1_9f50, i8* %v4_9f50, align 1
  %v0_9f54 = load i32, i32* @fp, align 4
  %v1_9f54 = trunc i32 %v0_9f54 to i8
  %v2_9f54 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f54 = add i32 %v2_9f54, 2
  %v4_9f54 = inttoptr i32 %v3_9f54 to i8*
  store i8 %v1_9f54, i8* %v4_9f54, align 1
  %v0_9f58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f58 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f58 = add i32 %v1_9f58, 16
  %v3_9f58 = inttoptr i32 %v2_9f58 to i32*
  store i32 %v0_9f58, i32* %v3_9f58, align 4
  %v0_9f5c = load i32, i32* %r2.global-to-local, align 4
  %v3_9f5c = mul i32 %v0_9f5c, 16
  %v1_9f60 = load i32, i32* %ip.global-to-local, align 4
  %v2_9f60 = add i32 %v1_9f60, %v3_9f5c
  store i32 %v2_9f60, i32* %r2.global-to-local, align 4
  %v1_9f64 = add i32 %v2_9f60, 13
  %v2_9f64 = inttoptr i32 %v1_9f64 to i8*
  %v3_9f64 = load i8, i8* %v2_9f64, align 1
  %v4_9f64 = zext i8 %v3_9f64 to i32
  store i32 %v4_9f64, i32* %r1.global-to-local, align 4
  %v1_9f68 = add i32 %v2_9f60, 12
  %v2_9f68 = inttoptr i32 %v1_9f68 to i8*
  %v3_9f68 = load i8, i8* %v2_9f68, align 1
  %v4_9f68 = zext i8 %v3_9f68 to i32
  store i32 %v0_9f1c, i32* %lr.global-to-local, align 4
  %v4_9f70 = mul nuw nsw i32 %v4_9f64, 256
  %v5_9f70 = or i32 %v4_9f68, %v4_9f70
  store i32 %v5_9f70, i32* %r3.global-to-local, align 4
  %v2_9f74 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f74 = add i32 %v2_9f74, 20
  %v4_9f74 = inttoptr i32 %v3_9f74 to i8*
  store i8 %v3_9f68, i8* %v4_9f74, align 1
  %v0_9f78 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f78 = sdiv i32 %v0_9f78, 256
  store i32 %v3_9f78, i32* %r3.global-to-local, align 4
  %v1_9f7c = trunc i32 %v3_9f78 to i8
  %v2_9f7c = load i32, i32* %lr.global-to-local, align 4
  %v3_9f7c = add i32 %v2_9f7c, 1
  %v4_9f7c = inttoptr i32 %v3_9f7c to i8*
  store i8 %v1_9f7c, i8* %v4_9f7c, align 1
  %v0_9f80 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f80 = add i32 %v0_9f80, 8
  %v2_9f80 = inttoptr i32 %v1_9f80 to i32*
  %v3_9f80 = load i32, i32* %v2_9f80, align 4
  store i32 %v3_9f80, i32* %r1.global-to-local, align 4
  %v0_9f84 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f84 = add i32 %v0_9f84, 13
  %v2_9f84 = inttoptr i32 %v1_9f84 to i8*
  %v3_9f84 = load i8, i8* %v2_9f84, align 1
  %v4_9f84 = zext i8 %v3_9f84 to i32
  store i32 %v4_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = add i32 %v0_9f80, 15
  %v2_9f88 = inttoptr i32 %v1_9f88 to i8*
  %v3_9f88 = load i8, i8* %v2_9f88, align 1
  %v4_9f88 = zext i8 %v3_9f88 to i32
  store i32 %v4_9f88, i32* %ip.global-to-local, align 4
  %v0_9f8c = load i32, i32* %r0.global-to-local, align 4
  %v1_9f8c = add i32 %v0_9f8c, 40
  store i32 %v1_9f8c, i32* @r4, align 4
  %v1_9f90 = add i32 %v0_9f80, 14
  %v2_9f90 = inttoptr i32 %v1_9f90 to i8*
  %v3_9f90 = load i8, i8* %v2_9f90, align 1
  %v4_9f90 = zext i8 %v3_9f90 to i32
  store i32 %v4_9f90, i32* %r0.global-to-local, align 4
  %v2_9f94 = add i32 %v0_9f84, 4
  %v3_9f94 = inttoptr i32 %v2_9f94 to i32*
  store i32 %v3_9f80, i32* %v3_9f94, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  %v0_9f9c = load i32, i32* %r3.global-to-local, align 4
  %v1_9f9c = or i32 %v0_9f9c, 1
  store i32 %v1_9f9c, i32* %r3.global-to-local, align 4
  %v0_9fa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fa0 = add i32 %v0_9fa0, 4
  %v2_9fa0 = inttoptr i32 %v1_9fa0 to i32*
  %v3_9fa0 = load i32, i32* %v2_9fa0, align 4
  store i32 %v3_9fa0, i32* %lr.global-to-local, align 4
  %v1_9fa4 = trunc i32 %v1_9f9c to i8
  %v3_9fa4 = add i32 %v0_9f1c, 13
  %v4_9fa4 = inttoptr i32 %v3_9fa4 to i8*
  store i8 %v1_9fa4, i8* %v4_9fa4, align 1
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 12
  %v2_9fa8 = inttoptr i32 %v1_9fa8 to i8*
  %v3_9fa8 = load i8, i8* %v2_9fa8, align 1
  %v4_9fa8 = zext i8 %v3_9fa8 to i32
  store i32 %v4_9fa8, i32* %r2.global-to-local, align 4
  %v1_9fac = add i32 %v0_9fa8, 13
  %v2_9fac = inttoptr i32 %v1_9fac to i8*
  %v3_9fac = load i8, i8* %v2_9fac, align 1
  %v4_9fac = zext i8 %v3_9fac to i32
  %v0_9fb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fb0 = load i32, i32* %ip.global-to-local, align 4
  %v4_9fb0 = mul i32 %v1_9fb0, 256
  %v5_9fb0 = or i32 %v4_9fb0, %v0_9fb0
  store i32 %v5_9fb0, i32* %r0.global-to-local, align 4
  %tmp108 = urem i8 %v3_9fa8, 16
  %v1_9fb4 = zext i8 %tmp108 to i32
  store i32 %v0_9f1c, i32* %ip.global-to-local, align 4
  %v3_9fbc = sdiv i32 %v5_9fb0, 256
  store i32 %v3_9fbc, i32* %r1.global-to-local, align 4
  %v1_9fc0 = or i32 %v1_9fb4, 128
  store i32 %v1_9fc0, i32* %r2.global-to-local, align 4
  %v1_9fc4 = or i32 %v4_9fac, 16
  store i32 %v1_9fc4, i32* %r3.global-to-local, align 4
  %v1_9fc8 = trunc i32 %v3_9fbc to i8
  %v3_9fc8 = add i32 %v0_9f1c, 3
  %v4_9fc8 = inttoptr i32 %v3_9fc8 to i8*
  store i8 %v1_9fc8, i8* %v4_9fc8, align 1
  %v0_9fcc = load i32, i32* %lr.global-to-local, align 4
  %v1_9fcc = load i32, i32* %ip.global-to-local, align 4
  %v2_9fcc = add i32 %v1_9fcc, 8
  %v3_9fcc = inttoptr i32 %v2_9fcc to i32*
  store i32 %v0_9fcc, i32* %v3_9fcc, align 4
  %v0_9fd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fd0 = trunc i32 %v0_9fd0 to i8
  %v2_9fd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd0 = add i32 %v2_9fd0, 12
  %v4_9fd0 = inttoptr i32 %v3_9fd0 to i8*
  store i8 %v1_9fd0, i8* %v4_9fd0, align 1
  %v0_9fd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fd4 = trunc i32 %v0_9fd4 to i8
  %v2_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd4 = add i32 %v2_9fd4, 13
  %v4_9fd4 = inttoptr i32 %v3_9fd4 to i8*
  store i8 %v1_9fd4, i8* %v4_9fd4, align 1
  %v0_9fd8 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fd8 = trunc i32 %v0_9fd8 to i8
  %v2_9fd8 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd8 = add i32 %v2_9fd8, 2
  %v4_9fd8 = inttoptr i32 %v3_9fd8 to i8*
  store i8 %v1_9fd8, i8* %v4_9fd8, align 1
  %v0_9fdc = call i32 @function_e240()
  %v1_9fdc = trunc i32 %v0_9fdc to i8
  store i32 %v0_9fdc, i32* %r0.global-to-local, align 4
  store i32 %v0_9f1c, i32* %lr.global-to-local, align 4
  store i32 %v1_98a8, i32* %r1.global-to-local, align 4
  %v3_9fe8 = load i8, i8* %v4_9fa4, align 1
  %v4_9fe8 = zext i8 %v3_9fe8 to i32
  store i32 %v1_9fec, i32* %r2.global-to-local, align 4
  %v1_9ff0 = and i32 %v4_9fe8, 223
  %v5_9ff4 = or i32 %v1_9ff0, %v4_9ff4
  store i32 %v5_9ff4, i32* %r3.global-to-local, align 4
  %v1_9ff8 = trunc i32 %v5_9ff4 to i8
  store i8 %v1_9ff8, i8* %v4_9fa4, align 1
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_a000 = load i32, i32* %lr.global-to-local, align 4
  %v1_a000 = add i32 %v0_a000, 13
  %v2_a000 = inttoptr i32 %v1_a000 to i8*
  %v3_a000 = load i8, i8* %v2_a000, align 1
  %v4_a000 = zext i8 %v3_a000 to i32
  store i32 %v1_a004, i32* %r3.global-to-local, align 4
  %v1_a008 = and i32 %v4_a000, 239
  %v5_a00c = or i32 %v1_a008, %v4_a00c
  store i32 %v5_a00c, i32* %r2.global-to-local, align 4
  %v1_a010 = trunc i32 %v5_a00c to i8
  store i8 %v1_a010, i8* %v2_a000, align 1
  %v0_a014 = load i32, i32* %lr.global-to-local, align 4
  %v1_a014 = add i32 %v0_a014, 13
  %v2_a014 = inttoptr i32 %v1_a014 to i8*
  %v3_a014 = load i8, i8* %v2_a014, align 1
  %v4_a014 = zext i8 %v3_a014 to i32
  store i32 %v1_98e8, i32* %lr.global-to-local, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  store i32 %v1_a020, i32* %r2.global-to-local, align 4
  %v1_a024 = and i32 %v4_a014, 247
  %v5_a028 = or i32 %v1_a024, %v4_a028
  store i32 %v5_a028, i32* %r3.global-to-local, align 4
  %v1_a02c = trunc i32 %v5_a028 to i8
  store i8 %v1_a02c, i8* %v4_9fa4, align 1
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_a034 = load i32, i32* %r1.global-to-local, align 4
  %v1_a034 = add i32 %v0_a034, 13
  %v2_a034 = inttoptr i32 %v1_a034 to i8*
  %v3_a034 = load i8, i8* %v2_a034, align 1
  %v4_a034 = zext i8 %v3_a034 to i32
  store i32 %v1_a038, i32* %r3.global-to-local, align 4
  %v1_a03c = and i32 %v4_a034, 251
  %v5_a040 = or i32 %v1_a03c, %v4_a040
  store i32 %v5_a040, i32* %r2.global-to-local, align 4
  %v1_a044 = trunc i32 %v5_a040 to i8
  store i8 %v1_a044, i8* %v2_a034, align 1
  store i32 %v1_9928, i32* %lr.global-to-local, align 4
  %v0_a04c = load i32, i32* %r1.global-to-local, align 4
  %v1_a04c = add i32 %v0_a04c, 13
  %v2_a04c = inttoptr i32 %v1_a04c to i8*
  %v3_a04c = load i8, i8* %v2_a04c, align 1
  %v4_a04c = zext i8 %v3_a04c to i32
  store i32 %v1_a050, i32* %r2.global-to-local, align 4
  %v1_a054 = and i32 %v4_a04c, 253
  %v4_a058 = or i32 %v1_a054, %v3_a058
  store i32 %v4_a058, i32* %r3.global-to-local, align 4
  %v1_a05c = trunc i32 %v4_a058 to i8
  store i8 %v1_a05c, i8* %v2_a04c, align 1
  %v0_a060 = load i32, i32* %r1.global-to-local, align 4
  %v1_a060 = add i32 %v0_a060, 13
  %v2_a060 = inttoptr i32 %v1_a060 to i8*
  %v3_a060 = load i8, i8* %v2_a060, align 1
  %v4_a060 = zext i8 %v3_a060 to i32
  %v1_a068 = and i32 %v4_a060, 254
  %v2_a070 = or i32 %v1_a068, %v1_a06c
  store i32 %v2_a070, i32* %r3.global-to-local, align 4
  store i32 %v0_9f1c, i32* %r2.global-to-local, align 4
  %v4_a078 = sdiv i32 %v0_9fdc, 256
  store i32 %v4_a078, i32* %r1.global-to-local, align 4
  %v1_a07c = trunc i32 %v2_a070 to i8
  store i8 %v1_a07c, i8* %v4_9fa4, align 1
  %v0_a080 = load i32, i32* %r1.global-to-local, align 4
  %v1_a080 = trunc i32 %v0_a080 to i8
  %v2_a080 = load i32, i32* %r2.global-to-local, align 4
  %v3_a080 = add i32 %v2_a080, 15
  %v4_a080 = inttoptr i32 %v3_a080 to i8*
  store i8 %v1_a080, i8* %v4_a080, align 1
  %v3_a084 = load i32, i32* %r2.global-to-local, align 4
  %v4_a084 = add i32 %v3_a084, 14
  %v5_a084 = inttoptr i32 %v4_a084 to i8*
  store i8 %v1_9fdc, i8* %v5_a084, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_a08c = load i32, i32* @r4, align 4
  store i32 %v0_a08c, i32* %r0.global-to-local, align 4
  %v2_a090 = call i32 @function_e2f4(i32 %v0_a08c, i32 %v6_9960)
  store i32 %v2_a090, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %ip.global-to-local, align 4
  %v2_a09c = load i32, i32* @r4, align 4
  %v4_a09c = add i32 %v2_a09c, %v6_9960
  %v5_a09c = inttoptr i32 %v4_a09c to i8*
  store i8 0, i8* %v5_a09c, align 1
  %v3_a0a0 = load i32, i32* %stack_var_-40, align 4
  %v1_a0a8 = add i32 %v3_a0a0, 1
  store i32 %v1_a0a8, i32* %r3.global-to-local, align 4
  %v9_a0ac = icmp eq i32 %v1_a0a8, %v1_97b4
  store i1 %v9_a0ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0a8, i32* %stack_var_-40, align 4
  %v5_a0b4 = icmp slt i32 %v1_a0a8, %v1_97b4
  br i1 %v5_a0b4, label %dec_label_pc_9a1c.outer, label %dec_label_pc_9be0.preheader

; uselistorder directives
  uselistorder i32 %v1_a0a8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9fdc, { 0, 2, 1 }
  uselistorder i32 %v3_9fbc, { 1, 0 }
  uselistorder i32 %v3_9f78, { 1, 0 }
  uselistorder i32 %v0_9f1c, { 3, 4, 5, 0, 6, 1, 7, 8, 2 }
  uselistorder i32 %v3_9e94, { 1, 0 }
  uselistorder i32 %v2_9e7c, { 1, 0 }
  uselistorder i32 %v3_9e60, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9e24, { 1, 0 }
  uselistorder i32 %v2_9e08, { 1, 2, 3, 0 }
  uselistorder i32 %v4_9df4, { 1, 0 }
  uselistorder i32 %v0_9df0, { 0, 2, 1 }
  uselistorder i32 %v4_9de0, { 1, 0 }
  uselistorder i32 %v0_9ddc, { 0, 2, 1 }
  uselistorder i32 %v8_9da4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_9d80, { 2, 0, 3, 1 }
  uselistorder i32 %v0_9d40, { 1, 0 }
  uselistorder i32 %v7_9d1c, { 1, 0, 2 }
  uselistorder i32 %v1_9d00, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_9ca0, { 0, 2, 1 }
  uselistorder i32 %v0_9c88, { 1, 0, 2 }
  uselistorder i32 %v3_9c64, { 1, 0 }
  uselistorder i32 %v3_9c44, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9c30, { 0, 2, 1 }
  uselistorder i1 %v3_9d24, { 1, 0 }
  uselistorder i32 %v1_9bf8, { 3, 2, 0, 1 }
  uselistorder i32 %v1_9bd0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9bb8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9b3c, { 1, 0 }
  uselistorder i32 %v7_9b34, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9b80, { 1, 0 }
  uselistorder i1 %v9_9b64, { 1, 0 }
  uselistorder i32 %v4_9b78, { 1, 0 }
  uselistorder i32 %v4_9b74, { 1, 0 }
  uselistorder i32 %v0_9e28, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_9a7c, { 1, 0, 2 }
  uselistorder i1 %v7_9a2c, { 1, 0 }
  uselistorder i32 %v3_9a28, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_a050, { 1, 0 }
  uselistorder i32 %v1_a038, { 1, 0 }
  uselistorder i32 %v1_a004, { 1, 0 }
  uselistorder i32 %v1_9edc, { 1, 0 }
  uselistorder i32 %v1_9aa4, { 1, 0 }
  uselistorder i32 %v5_9b7c, { 1, 0 }
  uselistorder i32 %v1_a020, { 1, 0 }
  uselistorder i32 %v1_9fec, { 1, 0 }
  uselistorder i1 %v2_9b94, { 1, 0 }
  uselistorder i32 %v1_9b90, { 1, 0 }
  uselistorder i32 %v4_9b8c, { 2, 0, 1 }
  uselistorder i32 %v4_9b70, { 1, 0 }
  uselistorder i32 %v1_9adc, { 2, 1, 0 }
  uselistorder i1 %v3_9dd4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9a0c, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_9a04, { 1, 0, 2 }
  uselistorder i1 %v2_99f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_99ec, { 1, 2, 3, 0 }
  uselistorder i32 %v0_99e8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99dc, { 1, 0 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v3_99a8, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_99a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_9990, { 2, 1, 0 }
  uselistorder i32 %v1_9980, { 1, 0 }
  uselistorder i32 %v6_9960, { 0, 6, 5, 4, 1, 7, 9, 8, 10, 11, 3, 2 }
  uselistorder i32 %v1_9948, { 1, 0 }
  uselistorder i32 %v1_9928, { 1, 2, 0 }
  uselistorder i32 %v1_9908, { 1, 2, 0 }
  uselistorder i32 %v1_98e8, { 1, 2, 0 }
  uselistorder i32 %v1_98c8, { 1, 2, 0 }
  uselistorder i32 %v1_98a8, { 1, 2, 0 }
  uselistorder i32 %v1_9870, { 1, 2, 0 }
  uselistorder i32 %v6_9808, { 2, 1, 3, 0 }
  uselistorder i32 %v2_97f0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_97e0, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_97b4, { 11, 12, 6, 7, 8, 5, 9, 10, 13, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 56, 55, 57, 59, 58, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 22, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 23, 24, 25, 26, 29, 28, 30, 32, 31, 33, 35, 34, 37, 41, 36, 38, 40, 39, 44, 42, 43, 45, 46, 47, 49, 50, 48, 51, 54, 52, 53, 56, 55, 60, 57, 58, 59, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 26, 27, 28, 29, 30, 32, 33, 0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 9, 10, 8, 11, 12, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9d60, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9d34, { 1, 0 }
  uselistorder label %dec_label_pc_9c20, { 1, 0 }
  uselistorder label %dec_label_pc_9be0, { 1, 0 }
  uselistorder label %dec_label_pc_9b04, { 2, 1, 3, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_9a38, { 1, 0 }
  uselistorder label %dec_label_pc_9a1c, { 1, 0 }
}

define i32 @function_a0c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a0c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_a0c0 = load i32, i32* @sb, align 4
  %v24_a0c0 = load i32, i32* @fp, align 4
  %v1_a0c4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a0e0 = urem i32 %arg4, 256
  store i32 %v1_a0e0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a0f0 = call i32 @function_12ee8(i32 %v1_a0c4, i32 4)
  %v0_a0f4 = load i32, i32* @r5, align 4
  store i32 %v0_a0f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a100 = load i32, i32* @r7, align 4
  store i32 %v0_a100, i32* %r3.global-to-local, align 4
  %v0_a104 = load i32, i32* @r4, align 4
  %v5_a108 = inttoptr i32 %v0_a0f4 to i32*
  %v6_a108 = call i32 @function_829c(i32 %v0_a104, i32* %v5_a108, i32 2, i32 %v0_a100, i32 %v2_a0f0)
  %v1_a114 = urem i32 %v6_a108, 256
  store i32 %v1_a114, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a120 = load i32, i32* @r5, align 4
  store i32 %v0_a120, i32* %r1.global-to-local, align 4
  %v0_a124 = load i32, i32* @r4, align 4
  %v5_a128 = trunc i32 %v6_a108 to i8
  %v6_a12c = inttoptr i32 %v0_a120 to i32*
  %v7_a12c = call i32 @function_829c(i32 %v0_a124, i32* %v6_a12c, i32 3, i32 65535, i32 %v6_a108)
  %v0_a130 = load i32, i32* @r5, align 4
  store i32 %v0_a130, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a140 = load i32, i32* @r4, align 4
  %v5_a144 = inttoptr i32 %v0_a130 to i32*
  %v6_a144 = call i32 @function_829c(i32 %v0_a140, i32* %v5_a144, i32 4, i32 64, i32 %v7_a12c)
  %v1_a14c = urem i32 %v6_a144, 256
  store i32 %v1_a14c, i32* %ip.global-to-local, align 4
  %v0_a150 = load i32, i32* @r5, align 4
  store i32 %v0_a150, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_a158 = load i32, i32* @r7, align 4
  store i32 %v0_a158, i32* %r3.global-to-local, align 4
  %v0_a15c = load i32, i32* @r4, align 4
  %v5_a160 = trunc i32 %v6_a144 to i8
  %v6_a164 = inttoptr i32 %v0_a150 to i32*
  %v7_a164 = call i32 @function_829c(i32 %v0_a15c, i32* %v6_a164, i32 5, i32 %v0_a158, i32 %v6_a144)
  %v1_a170 = urem i32 %v7_a164, 256
  store i32 %v1_a170, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a17c = load i32, i32* @r5, align 4
  store i32 %v0_a17c, i32* %r1.global-to-local, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v5_a188 = inttoptr i32 %v0_a17c to i32*
  %v6_a188 = call i32 @function_829c(i32 %v0_a180, i32* %v5_a188, i32 6, i32 65535, i32 %v1_a170)
  %v0_a190 = load i32, i32* @r5, align 4
  store i32 %v0_a190, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a188, i32* %sb.global-to-local, align 4
  %v0_a1a0 = load i32, i32* @r4, align 4
  %v5_a1a4 = inttoptr i32 %v0_a190 to i32*
  %v6_a1a4 = call i32 @function_829c(i32 %v0_a1a0, i32* %v5_a1a4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a1b0 = load i32, i32* @r5, align 4
  store i32 %v0_a1b0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r4, align 4
  %v5_a1c0 = inttoptr i32 %v0_a1b0 to i32*
  %v6_a1c0 = call i32 @function_829c(i32 %v0_a1bc, i32* %v5_a1c0, i32 16, i32 65535, i32 %v6_a1a4)
  %v0_a1cc = load i32, i32* @r5, align 4
  store i32 %v0_a1cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r4, align 4
  %v5_a1dc = inttoptr i32 %v0_a1cc to i32*
  %v6_a1dc = call i32 @function_829c(i32 %v0_a1d8, i32* %v5_a1dc, i32 17, i32 65535, i32 %v6_a1c0)
  %v0_a1e0 = load i32, i32* @r5, align 4
  store i32 %v0_a1e0, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a1ec = load i32, i32* @r7, align 4
  store i32 %v0_a1ec, i32* %r3.global-to-local, align 4
  %v0_a1f0 = load i32, i32* @r4, align 4
  %v5_a1f4 = inttoptr i32 %v0_a1e0 to i32*
  %v6_a1f4 = call i32 @function_829c(i32 %v0_a1f0, i32* %v5_a1f4, i32 10, i32 %v0_a1ec, i32 %v6_a1dc)
  %v0_a1f8 = load i32, i32* @r5, align 4
  store i32 %v0_a1f8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  %v5_a20c = inttoptr i32 %v0_a1f8 to i32*
  %v6_a20c = call i32 @function_829c(i32 %v0_a208, i32* %v5_a20c, i32 11, i32 1, i32 %v6_a1f4)
  %v0_a210 = load i32, i32* @r5, align 4
  store i32 %v0_a210, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a21c = load i32, i32* @r7, align 4
  store i32 %v0_a21c, i32* %r3.global-to-local, align 4
  %v0_a220 = load i32, i32* @r4, align 4
  %v5_a224 = inttoptr i32 %v0_a210 to i32*
  %v6_a224 = call i32 @function_829c(i32 %v0_a220, i32* %v5_a224, i32 12, i32 %v0_a21c, i32 %v6_a20c)
  %v0_a228 = load i32, i32* @r5, align 4
  store i32 %v0_a228, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a234 = load i32, i32* @r7, align 4
  store i32 %v0_a234, i32* %r3.global-to-local, align 4
  %v0_a238 = load i32, i32* @r4, align 4
  %v5_a23c = inttoptr i32 %v0_a228 to i32*
  %v6_a23c = call i32 @function_829c(i32 %v0_a238, i32* %v5_a23c, i32 13, i32 %v0_a234, i32 %v6_a224)
  %v0_a240 = load i32, i32* @r5, align 4
  store i32 %v0_a240, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_a24c = load i32, i32* @r7, align 4
  store i32 %v0_a24c, i32* %r3.global-to-local, align 4
  %v0_a250 = load i32, i32* @r4, align 4
  %v5_a254 = inttoptr i32 %v0_a240 to i32*
  %v6_a254 = call i32 @function_829c(i32 %v0_a250, i32* %v5_a254, i32 14, i32 %v0_a24c, i32 %v6_a23c)
  %v0_a258 = load i32, i32* @r5, align 4
  store i32 %v0_a258, i32* %r1.global-to-local, align 4
  %v0_a260 = load i32, i32* @r7, align 4
  store i32 %v0_a260, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_a268 = load i32, i32* @r4, align 4
  %v5_a26c = inttoptr i32 %v0_a258 to i32*
  %v6_a26c = call i32 @function_829c(i32 %v0_a268, i32* %v5_a26c, i32 15, i32 %v0_a260, i32 %v6_a254)
  %v0_a270 = load i32, i32* @r5, align 4
  store i32 %v0_a270, i32* %r1.global-to-local, align 4
  %v0_a274 = load i32, i32* @r7, align 4
  store i32 %v0_a274, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a26c, i32* %fp.global-to-local, align 4
  %v0_a280 = load i32, i32* @r4, align 4
  %v5_a284 = inttoptr i32 %v0_a270 to i32*
  %v6_a284 = call i32 @function_829c(i32 %v0_a280, i32* %v5_a284, i32 %v0_a274, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a290 = load i32, i32* @r5, align 4
  store i32 %v0_a290, i32* %r1.global-to-local, align 4
  store i32 %v6_a284, i32* @sl, align 4
  %v0_a298 = load i32, i32* @r4, align 4
  %v5_a29c = inttoptr i32 %v0_a290 to i32*
  %v6_a29c = call i32 @function_829c(i32 %v0_a298, i32* %v5_a29c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_a2a8 = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_a2a8, i32* %r3.global-to-local, align 4
  %v1_a2ac = urem i32 %v6_a29c, 256
  store i32 %v1_a2ac, i32* %ip.global-to-local, align 4
  %v0_a2b0 = load i32, i32* @r5, align 4
  store i32 %v0_a2b0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_a2b8 = load i32, i32* @r4, align 4
  %v5_a2c0 = inttoptr i32 %v0_a2b0 to i32*
  %v6_a2c0 = call i32 @function_8230(i32 %v0_a2b8, i32* %v5_a2c0, i32 19, i32 %v2_a2a8, i32 %v1_a2ac)
  %v0_a2c8 = load i32, i32* @r7, align 4
  %v1_a2cc = inttoptr i32 %v0_a2c8 to i32*
  %v2_a2cc = call i32 @function_125b0(i32* %v1_a2cc)
  %v1_a2d0 = load i32, i32* @r6, align 4
  %v2_a2d0 = add i32 %v1_a2d0, %v2_a2cc
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a2e4 = call i32 @function_12bfc(i32 2, i32 3, i32 6)
  %v7_a2e8 = icmp eq i32 %v3_a2e4, -1
  store i1 %v7_a2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2e8, label %dec_label_pc_a868, label %dec_label_pc_a2f4

dec_label_pc_a2f4:                                ; preds = %dec_label_pc_a0c0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a2fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a2fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a304 = load i32, i32* @r7, align 4
  store i32 %v0_a304, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a310 = call i32 @function_12bcc(i32 %v3_a2e4, i32 %v0_a304, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_a314 = icmp eq i32 %v6_a310, -1
  store i1 %v7_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a314, label %dec_label_pc_a870, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a2f4
  store i32 %v1_a0c4, i32* %r3.global-to-local, align 4
  %v3_a328 = mul i32 %v7_a12c, 65536
  store i32 %v3_a328, i32* @r4, align 4
  %v0_a32c = load i32, i32* %sb.global-to-local, align 4
  %v3_a32c = mul i32 %v0_a32c, 65536
  store i32 %v3_a32c, i32* %sb.global-to-local, align 4
  %v3_a334 = urem i32 %v7_a12c, 65536
  store i32 %v3_a334, i32* %ip.global-to-local, align 4
  %v3_a338 = urem i32 %v0_a32c, 65536
  store i32 %v3_a338, i32* %r1.global-to-local, align 4
  %v3_a33c = urem i32 %v6_a1a4, 65536
  store i32 %v3_a33c, i32* %r2.global-to-local, align 4
  %v2_a340 = icmp eq i32 %v1_a0c4, 0
  store i1 %v2_a340, i1* %cpsr_z.global-to-local, align 1
  %v0_a344 = load i32, i32* @r7, align 4
  store i32 %v0_a344, i32* %stack_var_-40, align 4
  br i1 %v2_a340, label %dec_label_pc_a5dc.preheader, label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a31c
  %v0_a368 = load i32, i32* @sl, align 4
  %v1_a370 = urem i32 %v0_a32c, 256
  %tmp73 = udiv i32 %v7_a12c, 256
  %v1_a388 = urem i32 %v6_a1a4, 256
  store i32 %v1_a388, i32* @lr, align 4
  %tmp74 = mul i32 %v6_a1c0, 256
  %v1_a398 = and i32 %tmp74, 65280
  %tmp76 = udiv i32 %v6_a1c0, 256
  %v4_a39c = urem i32 %tmp76, 256
  %v5_a39c = or i32 %v4_a39c, %v1_a398
  %v1_a3b8 = urem i32 %v6_a1f4, 2
  %v1_a3bc = urem i32 %v6_a20c, 2
  %v1_a3c0 = urem i32 %v6_a224, 2
  %v1_a3c4 = urem i32 %v6_a23c, 2
  %v1_a368 = mul i32 %v0_a368, 65536
  %tmp93 = add i32 %v1_a368, 2621440
  %v3_a3e4 = sdiv i32 %tmp93, 16777216
  %sext12 = mul i32 %tmp73, 16777216
  %v7_a3e4 = sdiv i32 %sext12, 16777216
  %v3_a3e8 = mul nuw nsw i32 %v1_a370, 256
  %tmp77 = udiv i32 %v6_a1a4, 256
  %v3_a3ec = urem i32 %tmp77, 256
  %v1_a3f0 = urem i32 %v6_a254, 2
  store i32 %v1_a3f0, i32* %ip.global-to-local, align 4
  %v1_a3f4 = urem i32 %v6_a224, 256
  store i32 %v1_a3f4, i32* %r1.global-to-local, align 4
  %v3_a3f8 = ashr i32 %tmp93, 31
  store i32 %v3_a3f8, i32* %r2.global-to-local, align 4
  %v3_a3fc = ashr i32 %sext12, 31
  store i32 %v3_a3fc, i32* %r3.global-to-local, align 4
  %tmp94 = udiv i32 %v0_a32c, 256
  %v4_a400 = urem i32 %tmp94, 256
  %v5_a400 = or i32 %v4_a400, %v3_a3e8
  store i32 %v5_a400, i32* @r4, align 4
  %v0_a404 = load i32, i32* %fp.global-to-local, align 4
  %v1_a404 = urem i32 %v0_a404, 2
  %v4_a408 = mul nuw nsw i32 %v1_a388, 256
  %v5_a408 = or i32 %v4_a408, %v3_a3ec
  store i32 %v5_a408, i32* @r5, align 4
  %v5_a414 = trunc i32 %v3_a3f8 to i8
  store i32 %v0_a344, i32* @r6, align 4
  store i32 %v1_a370, i32* @fp, align 4
  store i32 %v1_a388, i32* @sb, align 4
  %tmp = sub nsw i32 0, %v1_a3b8
  %v4_a4f8 = and i32 %tmp, 32
  %tmp95 = sub nsw i32 0, %v1_a3bc
  %v4_a50c = and i32 %tmp95, 16
  %tmp96 = sub nsw i32 0, %v1_a3c0
  %v4_a520 = and i32 %tmp96, 8
  %tmp97 = sub nsw i32 0, %v1_a3c4
  %v4_a534 = and i32 %tmp97, 4
  %tmp98 = sub nsw i32 0, %v1_a3f0
  %v3_a548 = and i32 %tmp98, 2
  %v2_a598 = icmp eq i32 %v1_a3f4, 0
  br label %dec_label_pc_a430

dec_label_pc_a430:                                ; preds = %.thread11, %dec_label_pc_a358
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a43c = call i32 @function_12ee8(i32 1510, i32 1)
  store i32 %v2_a0f0, i32* %ip.global-to-local, align 4
  %v3_a444 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a444, i32* %r3.global-to-local, align 4
  %v2_a448 = load i32, i32* @r6, align 4
  %v5_a448 = mul i32 %v2_a448, 4
  %v6_a448 = add i32 %v5_a448, %v2_a0f0
  %v7_a448 = inttoptr i32 %v6_a448 to i32*
  store i32 %v2_a43c, i32* %v7_a448, align 4
  %v0_a44c = load i32, i32* %ip.global-to-local, align 4
  %v1_a44c = load i32, i32* %r3.global-to-local, align 4
  %v4_a44c = mul i32 %v1_a44c, 4
  %v5_a44c = add i32 %v4_a44c, %v0_a44c
  %v6_a44c = inttoptr i32 %v5_a44c to i32*
  %v7_a44c = load i32, i32* %v6_a44c, align 4
  store i32 %v7_a44c, i32* %r1.global-to-local, align 4
  %v1_a450 = inttoptr i32 %v7_a44c to i8*
  %v2_a450 = load i8, i8* %v1_a450, align 1
  %tmp99 = urem i8 %v2_a450, 16
  %v1_a454 = zext i8 %tmp99 to i32
  %v1_a458 = or i32 %v1_a454, 64
  store i32 %v1_a458, i32* %r2.global-to-local, align 4
  %v1_a45c = trunc i32 %v1_a458 to i8
  store i8 %v1_a45c, i8* %v1_a450, align 1
  %v0_a460 = load i32, i32* %r1.global-to-local, align 4
  %v1_a460 = inttoptr i32 %v0_a460 to i8*
  %v2_a460 = load i8, i8* %v1_a460, align 1
  %v1_a464 = and i8 %v2_a460, -16
  %v1_a468 = or i8 %v1_a464, 5
  store i32 %v1_a170, i32* %r2.global-to-local, align 4
  store i8 %v1_a468, i8* %v1_a460, align 1
  %v2_a478 = load i32, i32* %r1.global-to-local, align 4
  %v3_a478 = add i32 %v2_a478, 1
  %v4_a478 = inttoptr i32 %v3_a478 to i8*
  store i8 %v5_a128, i8* %v4_a478, align 1
  store i32 %v6_a144, i32* %ip.global-to-local, align 4
  %v2_a480 = load i32, i32* %r1.global-to-local, align 4
  %v3_a480 = add i32 %v2_a480, 8
  %v4_a480 = inttoptr i32 %v3_a480 to i8*
  store i8 %v5_a160, i8* %v4_a480, align 1
  %v0_a484 = load i32, i32* %r2.global-to-local, align 4
  %v2_a484 = icmp eq i32 %v0_a484, 0
  store i1 %v2_a484, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a3f8, i32* %r3.global-to-local, align 4
  store i32 %v3_a3e4, i32* %r2.global-to-local, align 4
  %v2_a490 = load i32, i32* %r1.global-to-local, align 4
  %v3_a490 = add i32 %v2_a490, 3
  %v4_a490 = inttoptr i32 %v3_a490 to i8*
  store i8 %v5_a414, i8* %v4_a490, align 1
  %v0_a494 = load i32, i32* %r2.global-to-local, align 4
  %v1_a494 = trunc i32 %v0_a494 to i8
  %v2_a494 = load i32, i32* %r1.global-to-local, align 4
  %v3_a494 = add i32 %v2_a494, 2
  %v4_a494 = inttoptr i32 %v3_a494 to i8*
  store i8 %v1_a494, i8* %v4_a494, align 1
  %v0_a498 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a498, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_a430
  store i32 %v3_a3fc, i32* %r2.global-to-local, align 4
  %extract.t91 = trunc i32 %v3_a3fc to i8
  br label %bb78

bb:                                               ; preds = %dec_label_pc_a430
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_a3fc, i32* %r2.global-to-local, align 4
  %v3_a4a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 6
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i8*
  store i8 64, i8* %v5_a4a0, align 1
  %v0_a4a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t92 = trunc i32 %v0_a4a8.pre to i8
  br label %bb78

bb78:                                             ; preds = %.thread, %bb
  %v3_a3fc.sink.off0 = phi i8 [ %extract.t91, %.thread ], [ %extract.t92, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a4a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4a8 = add i32 %v2_a4a8, 5
  %v4_a4a8 = inttoptr i32 %v3_a4a8 to i8*
  store i8 %v3_a3fc.sink.off0, i8* %v4_a4a8, align 1
  store i32 %v7_a3e4, i32* %ip.global-to-local, align 4
  %v0_a4b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4b0, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v0_a4b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4b4 = trunc i32 %v0_a4b4 to i8
  %v2_a4b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4b4 = add i32 %v2_a4b4, 9
  %v4_a4b4 = inttoptr i32 %v3_a4b4 to i8*
  store i8 %v1_a4b4, i8* %v4_a4b4, align 1
  %v0_a4b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4b8, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a4b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a4b8 = trunc i32 %v1_a4b8 to i8
  %v3_a4b8 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4b8 = add i32 %v3_a4b8, 7
  %v5_a4b8 = inttoptr i32 %v4_a4b8 to i8*
  store i8 %v2_a4b8, i8* %v5_a4b8, align 1
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  %v3_a4bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a4bc, i32* %r2.global-to-local, align 4
  %v0_a4c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a4c0 = trunc i32 %v0_a4c0 to i8
  %v2_a4c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4c0 = add i32 %v2_a4c0, 4
  %v4_a4c0 = inttoptr i32 %v3_a4c0 to i8*
  store i8 %v1_a4c0, i8* %v4_a4c0, align 1
  store i32 %v6_a2c0, i32* %ip.global-to-local, align 4
  %v0_a4c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a4c8 = mul i32 %v0_a4c8, 32
  store i32 %v3_a4c8, i32* %r3.global-to-local, align 4
  %v1_a4cc = load i32, i32* %r1.global-to-local, align 4
  %v2_a4cc = add i32 %v1_a4cc, 12
  %v3_a4cc = inttoptr i32 %v2_a4cc to i32*
  store i32 %v6_a2c0, i32* %v3_a4cc, align 4
  %v0_a4d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d0 = load i32, i32* %r2.global-to-local, align 4
  %tmp100 = mul i32 %v1_a4d0, -8
  %v5_a4d0 = add i32 %v0_a4d0, %tmp100
  %v1_a4d4 = load i32, i32* @r8, align 4
  %v2_a4d4 = add i32 %v1_a4d4, %v5_a4d0
  store i32 %v2_a4d4, i32* %r3.global-to-local, align 4
  %v1_a4d8 = add i32 %v2_a4d4, 16
  %v2_a4d8 = inttoptr i32 %v1_a4d8 to i32*
  %v3_a4d8 = load i32, i32* %v2_a4d8, align 4
  store i32 %v3_a4d8, i32* %r2.global-to-local, align 4
  %v0_a4dc = load i32, i32* @r4, align 4
  %v1_a4dc = trunc i32 %v0_a4dc to i8
  %v2_a4dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a4dc = add i32 %v2_a4dc, 20
  %v4_a4dc = inttoptr i32 %v3_a4dc to i8*
  store i8 %v1_a4dc, i8* %v4_a4dc, align 1
  %v0_a4e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a4e0 = add i32 %v1_a4e0, 16
  %v3_a4e0 = inttoptr i32 %v2_a4e0 to i32*
  store i32 %v0_a4e0, i32* %v3_a4e0, align 4
  %v0_a4e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a4e4 = add i32 %v0_a4e4, 20
  store i32 %v1_a4e4, i32* @r6, align 4
  %v1_a4e8 = add i32 %v0_a4e4, 33
  %v2_a4e8 = inttoptr i32 %v1_a4e8 to i8*
  %v3_a4e8 = load i8, i8* %v2_a4e8, align 1
  %v4_a4e8 = zext i8 %v3_a4e8 to i32
  %v1_a4ec = add i32 %v0_a4e4, 40
  store i32 %v1_a4ec, i32* @r7, align 4
  store i32 %v1_a3b8, i32* %r1.global-to-local, align 4
  %v1_a4f4 = and i32 %v4_a4e8, 223
  %v5_a4f8 = or i32 %v1_a4f4, %v4_a4f8
  store i32 %v5_a4f8, i32* %r3.global-to-local, align 4
  %v1_a4fc = trunc i32 %v5_a4f8 to i8
  store i8 %v1_a4fc, i8* %v2_a4e8, align 1
  %v0_a500 = load i32, i32* @r6, align 4
  %v1_a500 = add i32 %v0_a500, 13
  %v2_a500 = inttoptr i32 %v1_a500 to i8*
  %v3_a500 = load i8, i8* %v2_a500, align 1
  %v4_a500 = zext i8 %v3_a500 to i32
  store i32 %v1_a3bc, i32* %r3.global-to-local, align 4
  %v1_a508 = and i32 %v4_a500, 239
  %v5_a50c = or i32 %v1_a508, %v4_a50c
  store i32 %v5_a50c, i32* %r2.global-to-local, align 4
  %v1_a510 = trunc i32 %v5_a50c to i8
  store i8 %v1_a510, i8* %v2_a500, align 1
  %v0_a514 = load i32, i32* @r6, align 4
  %v1_a514 = add i32 %v0_a514, 13
  %v2_a514 = inttoptr i32 %v1_a514 to i8*
  %v3_a514 = load i8, i8* %v2_a514, align 1
  %v4_a514 = zext i8 %v3_a514 to i32
  store i32 %v1_a3c0, i32* %ip.global-to-local, align 4
  %v1_a51c = and i32 %v4_a514, 247
  %v5_a520 = or i32 %v1_a51c, %v4_a520
  store i32 %v5_a520, i32* %r3.global-to-local, align 4
  %v1_a524 = trunc i32 %v5_a520 to i8
  store i8 %v1_a524, i8* %v2_a514, align 1
  %v0_a528 = load i32, i32* @r6, align 4
  %v1_a528 = add i32 %v0_a528, 13
  %v2_a528 = inttoptr i32 %v1_a528 to i8*
  %v3_a528 = load i8, i8* %v2_a528, align 1
  %v4_a528 = zext i8 %v3_a528 to i32
  store i32 %v1_a3c4, i32* %r1.global-to-local, align 4
  %v1_a530 = and i32 %v4_a528, 251
  %v5_a534 = or i32 %v1_a530, %v4_a534
  store i32 %v5_a534, i32* %r2.global-to-local, align 4
  %v1_a538 = trunc i32 %v5_a534 to i8
  store i8 %v1_a538, i8* %v2_a528, align 1
  %v0_a53c = load i32, i32* @r6, align 4
  %v1_a53c = add i32 %v0_a53c, 13
  %v2_a53c = inttoptr i32 %v1_a53c to i8*
  %v3_a53c = load i8, i8* %v2_a53c, align 1
  %v4_a53c = zext i8 %v3_a53c to i32
  store i32 %v1_a3f0, i32* %r2.global-to-local, align 4
  %v1_a544 = and i32 %v4_a53c, 253
  %v4_a548 = or i32 %v1_a544, %v3_a548
  store i32 %v4_a548, i32* %r3.global-to-local, align 4
  %v1_a54c = trunc i32 %v4_a548 to i8
  store i8 %v1_a54c, i8* %v2_a53c, align 1
  %v0_a550 = load i32, i32* @r6, align 4
  %v1_a550 = add i32 %v0_a550, 12
  %v2_a550 = inttoptr i32 %v1_a550 to i8*
  %v3_a550 = load i8, i8* %v2_a550, align 1
  %v4_a550 = zext i8 %v3_a550 to i32
  store i32 %v4_a550, i32* %r2.global-to-local, align 4
  %v1_a554 = add i32 %v0_a550, 13
  %v2_a554 = inttoptr i32 %v1_a554 to i8*
  %v3_a554 = load i8, i8* %v2_a554, align 1
  %v4_a554 = zext i8 %v3_a554 to i32
  store i32 %v1_a404, i32* %ip.global-to-local, align 4
  %tmp101 = urem i8 %v3_a550, 16
  %v1_a55c = zext i8 %tmp101 to i32
  %v1_a560 = and i32 %v4_a554, 254
  %v2_a564 = or i32 %v1_a560, %v1_a404
  store i32 %v2_a564, i32* %r3.global-to-local, align 4
  %v1_a568 = or i32 %v1_a55c, 80
  store i32 %v1_a568, i32* %r2.global-to-local, align 4
  %v1_a56c = trunc i32 %v1_a568 to i8
  store i8 %v1_a56c, i8* %v2_a550, align 1
  %v0_a570 = load i32, i32* %r3.global-to-local, align 4
  %v1_a570 = trunc i32 %v0_a570 to i8
  %v2_a570 = load i32, i32* @r6, align 4
  %v3_a570 = add i32 %v2_a570, 13
  %v4_a570 = inttoptr i32 %v3_a570 to i8*
  store i8 %v1_a570, i8* %v4_a570, align 1
  store i32 %v5_a39c, i32* %r1.global-to-local, align 4
  %v0_a578 = load i32, i32* @fp, align 4
  %v1_a578 = trunc i32 %v0_a578 to i8
  %v2_a578 = load i32, i32* @r6, align 4
  %v3_a578 = add i32 %v2_a578, 1
  %v4_a578 = inttoptr i32 %v3_a578 to i8*
  store i8 %v1_a578, i8* %v4_a578, align 1
  %v0_a57c = load i32, i32* %r1.global-to-local, align 4
  %v1_a57c = load i32, i32* @r6, align 4
  %v2_a57c = add i32 %v1_a57c, 4
  %v3_a57c = inttoptr i32 %v2_a57c to i32*
  store i32 %v0_a57c, i32* %v3_a57c, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  %v1_a580 = trunc i32 %v0_a580 to i8
  %v2_a580 = load i32, i32* @r6, align 4
  %v3_a580 = add i32 %v2_a580, 2
  %v4_a580 = inttoptr i32 %v3_a580 to i8*
  store i8 %v1_a580, i8* %v4_a580, align 1
  %v0_a584 = load i32, i32* @sb, align 4
  %v1_a584 = trunc i32 %v0_a584 to i8
  %v2_a584 = load i32, i32* @r6, align 4
  %v3_a584 = add i32 %v2_a584, 3
  %v4_a584 = inttoptr i32 %v3_a584 to i8*
  store i8 %v1_a584, i8* %v4_a584, align 1
  %v0_a588 = call i32 @function_e240()
  store i32 %v1_a3f4, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_a588, 16777216
  %v1_a590 = sdiv i32 %sext, 16777216
  store i32 %v1_a590, i32* %r2.global-to-local, align 4
  %v3_a594 = ashr i32 %sext, 31
  store i32 %v3_a594, i32* %r3.global-to-local, align 4
  store i1 %v2_a598, i1* %cpsr_z.global-to-local, align 1
  %v1_a59c = trunc i32 %v3_a594 to i8
  %v2_a59c = load i32, i32* @r6, align 4
  %v3_a59c = add i32 %v2_a59c, 15
  %v4_a59c = inttoptr i32 %v3_a59c to i8*
  store i8 %v1_a59c, i8* %v4_a59c, align 1
  %v0_a5a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5a0, label %.thread11, label %bb83

bb83:                                             ; preds = %bb82
  %v1_a5a0 = load i32, i32* @r6, align 4
  %v2_a5a0 = add i32 %v1_a5a0, 13
  %v3_a5a0 = inttoptr i32 %v2_a5a0 to i8*
  %v4_a5a0 = load i8, i8* %v3_a5a0, align 1
  %v5_a5a0 = zext i8 %v4_a5a0 to i32
  %v2_a5a4 = or i32 %v5_a5a0, 8
  store i32 %v2_a5a4, i32* %r3.global-to-local, align 4
  %v2_a5a8 = trunc i32 %v2_a5a4 to i8
  store i8 %v2_a5a8, i8* %v3_a5a0, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb82, %bb83
  %v0_a5ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a5ac = trunc i32 %v0_a5ac to i8
  %v2_a5ac = load i32, i32* @r6, align 4
  %v3_a5ac = add i32 %v2_a5ac, 14
  %v4_a5ac = inttoptr i32 %v3_a5ac to i8*
  store i8 %v1_a5ac, i8* %v4_a5ac, align 1
  %v0_a5b0 = load i32, i32* @sl, align 4
  store i32 %v0_a5b0, i32* %r1.global-to-local, align 4
  %v0_a5b4 = load i32, i32* @r7, align 4
  %v2_a5b8 = call i32 @function_e2f4(i32 %v0_a5b4, i32 %v0_a5b0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a5c0 = load i32, i32* @r7, align 4
  %v3_a5c0 = load i32, i32* @sl, align 4
  %v4_a5c0 = add i32 %v3_a5c0, %v2_a5c0
  %v5_a5c0 = inttoptr i32 %v4_a5c0 to i8*
  store i8 0, i8* %v5_a5c0, align 1
  %v3_a5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5c4, i32* %r2.global-to-local, align 4
  store i32 %v1_a0c4, i32* %r1.global-to-local, align 4
  %v1_a5cc = add i32 %v3_a5c4, 1
  store i32 %v1_a5cc, i32* @r6, align 4
  %v9_a5d0 = icmp eq i32 %v1_a0c4, %v1_a5cc
  store i1 %v9_a5d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a5cc, i32* %stack_var_-40, align 4
  %v8_a5d8 = icmp sgt i32 %v1_a0c4, %v1_a5cc
  br i1 %v8_a5d8, label %dec_label_pc_a430, label %dec_label_pc_a5dc.preheader

dec_label_pc_a5dc.preheader:                      ; preds = %.thread11, %dec_label_pc_a31c
  %v2_a61c = icmp eq i32 %v6_a2c0, -1
  %v7_a61c = icmp eq i32 %v6_a2c0, -1
  %v3_a7b4 = icmp eq i32 %v3_a334, 65535
  %v2_a830 = icmp eq i32 %v1_a2ac, 0
  br label %dec_label_pc_a5dc

dec_label_pc_a5dc:                                ; preds = %dec_label_pc_a5dc.preheader, %dec_label_pc_a854
  store i32 %v1_a0c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_a340, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a340, label %dec_label_pc_a854, label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_a5dc
  %v0_a5f0 = load i32, i32* @sl, align 4
  %v1_a5f0 = add i32 %v0_a5f0, 20
  store i32 %v1_a5f0, i32* @sb, align 4
  %tmp84 = mul i32 %v1_a5f0, 256
  %v1_a5fc = and i32 %tmp84, 65280
  store i32 %v1_a5fc, i32* %r3.global-to-local, align 4
  %tmp85 = udiv i32 %v1_a5f0, 256
  %v4_a600 = urem i32 %tmp85, 256
  %v5_a600 = or i32 %v4_a600, %v1_a5fc
  store i32 %v5_a600, i32* %r2.global-to-local, align 4
  %v1_a608 = add i32 %v0_a5f0, 40
  store i32 %v1_a608, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_a718

dec_label_pc_a618:                                ; preds = %dec_label_pc_a718
  store i32 %v6_a2c0, i32* %r1.global-to-local, align 4
  store i1 %v7_a61c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a61c, label %dec_label_pc_a7a4, label %dec_label_pc_a624

dec_label_pc_a624:                                ; preds = %dec_label_pc_a73c, %dec_label_pc_a618
  store i32 %v3_a334, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a7b4, label %dec_label_pc_a7c0, label %dec_label_pc_a638

dec_label_pc_a638:                                ; preds = %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge, %dec_label_pc_a624
  %v1_a63c = phi i32 [ %v1_a63c.pre, %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge ], [ 65535, %dec_label_pc_a624 ]
  store i32 %v3_a338, i32* %r3.global-to-local, align 4
  %v9_a63c = icmp eq i32 %v3_a338, %v1_a63c
  store i1 %v9_a63c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a63c, label %dec_label_pc_a7dc, label %dec_label_pc_a644

dec_label_pc_a644:                                ; preds = %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge, %dec_label_pc_a638
  %v1_a648 = phi i32 [ %v1_a648.pre, %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge ], [ %v1_a63c, %dec_label_pc_a638 ]
  store i32 %v3_a33c, i32* %ip.global-to-local, align 4
  %v9_a648 = icmp eq i32 %v3_a33c, %v1_a648
  store i1 %v9_a648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a648, label %dec_label_pc_a7f8, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge, %dec_label_pc_a644
  %v1_a654 = phi i32 [ %v1_a654.pre, %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge ], [ %v1_a648, %dec_label_pc_a644 ]
  store i32 %v6_a1c0, i32* %r1.global-to-local, align 4
  %v9_a654 = icmp eq i32 %v6_a1c0, %v1_a654
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_a814, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge, %dec_label_pc_a650
  %v1_a660 = phi i32 [ %v1_a660.pre, %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge ], [ %v1_a654, %dec_label_pc_a650 ]
  store i32 %v6_a1dc, i32* %r2.global-to-local, align 4
  %v9_a660 = icmp eq i32 %v6_a1dc, %v1_a660
  store i1 %v9_a660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a660, label %dec_label_pc_a828, label %dec_label_pc_a668

dec_label_pc_a668:                                ; preds = %dec_label_pc_a814, %dec_label_pc_a65c
  store i32 %v1_a2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a830, label %dec_label_pc_a674, label %dec_label_pc_a83c

dec_label_pc_a674:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a828, %dec_label_pc_a83c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a678 = load i32, i32* @r7, align 4
  %v1_a678 = trunc i32 %v0_a678 to i8
  %v2_a678 = load i32, i32* @r5, align 4
  %v3_a678 = add i32 %v2_a678, 10
  %v4_a678 = inttoptr i32 %v3_a678 to i8*
  store i8 %v1_a678, i8* %v4_a678, align 1
  %v0_a67c = load i32, i32* @r7, align 4
  %v1_a67c = trunc i32 %v0_a67c to i8
  %v2_a67c = load i32, i32* @r5, align 4
  %v3_a67c = add i32 %v2_a67c, 11
  %v4_a67c = inttoptr i32 %v3_a67c to i8*
  store i8 %v1_a67c, i8* %v4_a67c, align 1
  %v0_a680 = load i32, i32* @r5, align 4
  store i32 %v0_a680, i32* @r0, align 4
  %v2_a684 = call i32 @function_c688(i32 %v0_a680, i32 20)
  %v3_a684 = trunc i32 %v2_a684 to i8
  %v4_a68824 = udiv i32 %v2_a684, 256
  %v1_a68c = trunc i32 %v4_a68824 to i8
  %v2_a68c = load i32, i32* @r5, align 4
  %v3_a68c = add i32 %v2_a68c, 11
  %v4_a68c = inttoptr i32 %v3_a68c to i8*
  store i8 %v1_a68c, i8* %v4_a68c, align 1
  %v3_a690 = load i32, i32* @r5, align 4
  %v4_a690 = add i32 %v3_a690, 10
  %v5_a690 = inttoptr i32 %v4_a690 to i8*
  store i8 %v3_a684, i8* %v5_a690, align 1
  %v0_a694 = load i32, i32* @r6, align 4
  store i32 %v0_a694, i32* @r1, align 4
  store i32 %v5_a600, i32* %r2.global-to-local, align 4
  %v0_a69c = load i32, i32* @sb, align 4
  store i32 %v0_a69c, i32* %r3.global-to-local, align 4
  %v0_a6a0 = load i32, i32* @r7, align 4
  %v1_a6a0 = trunc i32 %v0_a6a0 to i8
  %v3_a6a0 = add i32 %v0_a694, 16
  %v4_a6a0 = inttoptr i32 %v3_a6a0 to i8*
  store i8 %v1_a6a0, i8* %v4_a6a0, align 1
  %v0_a6a4 = load i32, i32* @r7, align 4
  %v1_a6a4 = trunc i32 %v0_a6a4 to i8
  %v2_a6a4 = load i32, i32* @r6, align 4
  %v3_a6a4 = add i32 %v2_a6a4, 17
  %v4_a6a4 = inttoptr i32 %v3_a6a4 to i8*
  store i8 %v1_a6a4, i8* %v4_a6a4, align 1
  %v0_a6a8 = load i32, i32* @r5, align 4
  %v4_a6ac = call i32 @function_c6e4(i32 %v0_a6a8, i32 %v0_a694, i32 %v5_a600, i32 %v0_a69c)
  %v5_a6ac = trunc i32 %v4_a6ac to i8
  %v4_a6b025 = udiv i32 %v4_a6ac, 256
  %v1_a6b4 = trunc i32 %v4_a6b025 to i8
  %v2_a6b4 = load i32, i32* @r6, align 4
  %v3_a6b4 = add i32 %v2_a6b4, 17
  %v4_a6b4 = inttoptr i32 %v3_a6b4 to i8*
  store i8 %v1_a6b4, i8* %v4_a6b4, align 1
  %v3_a6b8 = load i32, i32* @r6, align 4
  %v4_a6b8 = add i32 %v3_a6b8, 16
  %v5_a6b8 = inttoptr i32 %v4_a6b8 to i8*
  store i8 %v5_a6ac, i8* %v5_a6b8, align 1
  %v3_a6bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a6bc, i32* %r3.global-to-local, align 4
  %v0_a6c0 = load i32, i32* @r5, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 20
  %v2_a6c0 = inttoptr i32 %v1_a6c0 to i32*
  %v3_a6c0 = load i32, i32* %v2_a6c0, align 4
  %v3_a6c8 = udiv i32 %v3_a6c0, 65536
  store i32 %v3_a6c8, i32* %r2.global-to-local, align 4
  %v5_a6cc = mul i32 %v3_a6bc, 24
  %v1_a6d0 = load i32, i32* @r8, align 4
  %v2_a6d0 = add i32 %v1_a6d0, %v5_a6cc
  store i32 %v2_a6d0, i32* %ip.global-to-local, align 4
  %v3_a6d421 = udiv i32 %v3_a6c0, 16777216
  %v1_a6d8 = trunc i32 %v3_a6d421 to i8
  %v3_a6d8 = add i32 %v2_a6d0, 3
  %v4_a6d8 = inttoptr i32 %v3_a6d8 to i8*
  store i8 %v1_a6d8, i8* %v4_a6d8, align 1
  %v0_a6dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a6dc = trunc i32 %v0_a6dc to i8
  %v2_a6dc = load i32, i32* %ip.global-to-local, align 4
  %v3_a6dc = add i32 %v2_a6dc, 2
  %v4_a6dc = inttoptr i32 %v3_a6dc to i8*
  store i8 %v1_a6dc, i8* %v4_a6dc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a6e4 = load i32, i32* @r5, align 4
  store i32 %v0_a6e4, i32* %r1.global-to-local, align 4
  %v0_a6ec = load i32, i32* @fp, align 4
  store i32 %v0_a6ec, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a6f4 = load i32, i32* %ip.global-to-local, align 4
  %v6_a6fc = inttoptr i32 %v0_a6e4 to i32*
  %v7_a6fc = call i32 @function_12b98(i32 %v3_a2e4, i32* %v6_a6fc, i32 %v0_a6ec, i32 16384, i32 %v0_a6f4, i32 16)
  %v3_a700 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a700, i32* %r3.global-to-local, align 4
  store i32 %v1_a0c4, i32* %ip.global-to-local, align 4
  %v1_a708 = add i32 %v3_a700, 1
  %v9_a70c = icmp eq i32 %v1_a0c4, %v1_a708
  store i1 %v9_a70c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a708, i32* %stack_var_-40, align 4
  %v7_a714 = icmp sgt i32 %v1_a0c4, %v1_a708
  br i1 %v7_a714, label %dec_label_pc_a718, label %dec_label_pc_a854

dec_label_pc_a718:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a5f0
  %v1_a72c = phi i32 [ %v1_a708, %dec_label_pc_a674 ], [ 0, %dec_label_pc_a5f0 ]
  %v5_a71c = mul i32 %v1_a72c, 24
  %v1_a720 = load i32, i32* @r8, align 4
  %v2_a720 = add i32 %v1_a720, %v5_a71c
  store i32 %v2_a720, i32* %r3.global-to-local, align 4
  store i32 %v2_a0f0, i32* %ip.global-to-local, align 4
  %v1_a728 = add i32 %v2_a720, 20
  %v2_a728 = inttoptr i32 %v1_a728 to i8*
  %v3_a728 = load i8, i8* %v2_a728, align 1
  %v4_a728 = zext i8 %v3_a728 to i32
  store i32 %v4_a728, i32* %r2.global-to-local, align 4
  %v4_a72c = mul i32 %v1_a72c, 4
  %v5_a72c = add i32 %v4_a72c, %v2_a0f0
  %v6_a72c = inttoptr i32 %v5_a72c to i32*
  %v7_a72c = load i32, i32* %v6_a72c, align 4
  store i32 %v7_a72c, i32* @r5, align 4
  %v2_a730 = icmp ugt i8 %v3_a728, 30
  %v7_a730 = icmp eq i8 %v3_a728, 31
  store i1 %v7_a730, i1* %cpsr_z.global-to-local, align 1
  %v1_a734 = add i32 %v7_a72c, 20
  store i32 %v1_a734, i32* @r6, align 4
  %v2_a738 = xor i1 %v7_a730, true
  %v3_a738 = and i1 %v2_a730, %v2_a738
  br i1 %v3_a738, label %dec_label_pc_a618, label %dec_label_pc_a73c

dec_label_pc_a73c:                                ; preds = %dec_label_pc_a718
  %v1_a73c = add i32 %v2_a720, 16
  %v2_a73c = inttoptr i32 %v1_a73c to i32*
  %v3_a73c = load i32, i32* %v2_a73c, align 4
  %v0_a740 = call i32 @function_e240()
  %v3_a744 = load i32, i32* %stack_var_-40, align 4
  %v5_a74c = mul i32 %v3_a744, 24
  %v1_a754 = load i32, i32* @r8, align 4
  %v2_a754 = add i32 %v1_a754, %v5_a74c
  store i32 %v2_a754, i32* %r1.global-to-local, align 4
  %v1_a758 = and i32 %v3_a73c, 65280
  store i32 %v1_a758, i32* %r3.global-to-local, align 4
  %v1_a750 = udiv i32 %v3_a73c, 256
  %v3_a75c = and i32 %v1_a750, 65280
  store i32 %v3_a75c, i32* %r2.global-to-local, align 4
  %v3_a760 = mul i32 %v3_a73c, 16777216
  store i32 %v3_a760, i32* %ip.global-to-local, align 4
  %v1_a764 = add i32 %v2_a754, 20
  %v2_a764 = inttoptr i32 %v1_a764 to i8*
  %v3_a764 = load i8, i8* %v2_a764, align 1
  %v4_a764 = zext i8 %v3_a764 to i32
  %v4_a768 = mul nuw nsw i32 %v1_a758, 256
  %v5_a768 = or i32 %v4_a768, %v3_a760
  store i32 %v5_a768, i32* %ip.global-to-local, align 4
  %v2_a770 = call i32 @llvm.bswap.i32(i32 %v3_a73c)
  %v7_a774 = lshr i32 %v0_a740, %v4_a764
  %v8_a774 = add i32 %v7_a774, %v2_a770
  store i32 %v8_a774, i32* %r2.global-to-local, align 4
  %v2_a790 = call i32 @llvm.bswap.i32(i32 %v8_a774)
  store i32 %v2_a790, i32* %r3.global-to-local, align 4
  store i32 %v6_a2c0, i32* %r1.global-to-local, align 4
  store i1 %v7_a61c, i1* %cpsr_z.global-to-local, align 1
  %v1_a79c = load i32, i32* @r5, align 4
  %v2_a79c = add i32 %v1_a79c, 16
  %v3_a79c = inttoptr i32 %v2_a79c to i32*
  store i32 %v2_a790, i32* %v3_a79c, align 4
  br i1 %v2_a61c, label %dec_label_pc_a7a4, label %dec_label_pc_a624

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a73c, %dec_label_pc_a618
  %v0_a7a4 = call i32 @function_e240()
  store i32 %v3_a334, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a7b4, i1* %cpsr_z.global-to-local, align 1
  %v1_a7b8 = load i32, i32* @r5, align 4
  %v2_a7b8 = add i32 %v1_a7b8, 12
  %v3_a7b8 = inttoptr i32 %v2_a7b8 to i32*
  store i32 %v0_a7a4, i32* %v3_a7b8, align 4
  br i1 %v3_a7b4, label %dec_label_pc_a7c0, label %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge

dec_label_pc_a7a4.dec_label_pc_a638_crit_edge:    ; preds = %dec_label_pc_a7a4
  %v1_a63c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a638

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7a4, %dec_label_pc_a624
  %v0_a7c0 = call i32 @function_e240()
  %v1_a7c0 = trunc i32 %v0_a7c0 to i8
  %v4_a7c426 = udiv i32 %v0_a7c0, 256
  %v1_a7c8 = trunc i32 %v4_a7c426 to i8
  %v2_a7c8 = load i32, i32* @r5, align 4
  %v3_a7c8 = add i32 %v2_a7c8, 5
  %v4_a7c8 = inttoptr i32 %v3_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v4_a7c8, align 1
  store i32 %v3_a338, i32* %r3.global-to-local, align 4
  %v1_a7d0 = load i32, i32* @r4, align 4
  %v9_a7d0 = icmp eq i32 %v3_a338, %v1_a7d0
  store i1 %v9_a7d0, i1* %cpsr_z.global-to-local, align 1
  %v3_a7d4 = load i32, i32* @r5, align 4
  %v4_a7d4 = add i32 %v3_a7d4, 4
  %v5_a7d4 = inttoptr i32 %v4_a7d4 to i8*
  store i8 %v1_a7c0, i8* %v5_a7d4, align 1
  %v0_a7d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7d8, label %dec_label_pc_a7dc, label %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge

dec_label_pc_a7c0.dec_label_pc_a644_crit_edge:    ; preds = %dec_label_pc_a7c0
  %v1_a648.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a644

dec_label_pc_a7dc:                                ; preds = %dec_label_pc_a7c0, %dec_label_pc_a638
  %v0_a7dc = call i32 @function_e240()
  %v1_a7dc = trunc i32 %v0_a7dc to i8
  store i32 %v3_a33c, i32* %ip.global-to-local, align 4
  %v4_a7e4 = sdiv i32 %v0_a7dc, 256
  store i32 %v4_a7e4, i32* %r3.global-to-local, align 4
  %v1_a7e8 = load i32, i32* @r4, align 4
  %v9_a7e8 = icmp eq i32 %v3_a33c, %v1_a7e8
  store i1 %v9_a7e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 20
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 %v1_a7dc, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  %v2_a7f0 = load i32, i32* @r6, align 4
  %v3_a7f0 = add i32 %v2_a7f0, 1
  %v4_a7f0 = inttoptr i32 %v3_a7f0 to i8*
  store i8 %v1_a7f0, i8* %v4_a7f0, align 1
  %v0_a7f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7f4, label %dec_label_pc_a7f8, label %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge

dec_label_pc_a7dc.dec_label_pc_a650_crit_edge:    ; preds = %dec_label_pc_a7dc
  %v1_a654.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a650

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a7dc, %dec_label_pc_a644
  %v0_a7f8 = call i32 @function_e240()
  %v1_a7f8 = trunc i32 %v0_a7f8 to i8
  store i32 %v6_a1c0, i32* %r1.global-to-local, align 4
  %v4_a800 = sdiv i32 %v0_a7f8, 256
  store i32 %v4_a800, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r4, align 4
  %v9_a804 = icmp eq i32 %v6_a1c0, %v1_a804
  store i1 %v9_a804, i1* %cpsr_z.global-to-local, align 1
  %v1_a808 = trunc i32 %v4_a800 to i8
  %v2_a808 = load i32, i32* @r6, align 4
  %v3_a808 = add i32 %v2_a808, 3
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v3_a80c = load i32, i32* @r6, align 4
  %v4_a80c = add i32 %v3_a80c, 2
  %v5_a80c = inttoptr i32 %v4_a80c to i8*
  store i8 %v1_a7f8, i8* %v5_a80c, align 1
  %v0_a810 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a810, label %dec_label_pc_a814, label %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge

dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge:    ; preds = %dec_label_pc_a7f8
  %v1_a660.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a65c

dec_label_pc_a814:                                ; preds = %dec_label_pc_a7f8, %dec_label_pc_a650
  %v0_a814 = call i32 @function_e240()
  store i32 %v6_a1dc, i32* %r2.global-to-local, align 4
  %v1_a81c = load i32, i32* @r4, align 4
  %v9_a81c = icmp eq i32 %v6_a1dc, %v1_a81c
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  %v1_a820 = load i32, i32* @r6, align 4
  %v2_a820 = add i32 %v1_a820, 4
  %v3_a820 = inttoptr i32 %v2_a820 to i32*
  store i32 %v0_a814, i32* %v3_a820, align 4
  br i1 %v9_a81c, label %dec_label_pc_a828, label %dec_label_pc_a668

dec_label_pc_a828:                                ; preds = %dec_label_pc_a814, %dec_label_pc_a65c
  %v0_a828 = call i32 @function_e240()
  store i32 %v1_a2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a830, i1* %cpsr_z.global-to-local, align 1
  %v1_a834 = load i32, i32* @r6, align 4
  %v2_a834 = add i32 %v1_a834, 8
  %v3_a834 = inttoptr i32 %v2_a834 to i32*
  store i32 %v0_a828, i32* %v3_a834, align 4
  br i1 %v2_a830, label %dec_label_pc_a674, label %dec_label_pc_a83c

dec_label_pc_a83c:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a828
  %v0_a83c = load i32, i32* @r5, align 4
  %v1_a83c = add i32 %v0_a83c, 40
  store i32 %v1_a83c, i32* @r4, align 4
  %v0_a844 = load i32, i32* @sl, align 4
  store i32 %v0_a844, i32* %r1.global-to-local, align 4
  %v2_a848 = call i32 @function_e2f4(i32 %v1_a83c, i32 %v0_a844)
  %v0_a84c = load i32, i32* @r7, align 4
  %v1_a84c = trunc i32 %v0_a84c to i8
  %v2_a84c = load i32, i32* @r4, align 4
  %v3_a84c = load i32, i32* @sl, align 4
  %v4_a84c = add i32 %v3_a84c, %v2_a84c
  %v5_a84c = inttoptr i32 %v4_a84c to i8*
  store i8 %v1_a84c, i8* %v5_a84c, align 1
  br label %dec_label_pc_a674

dec_label_pc_a854:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a5dc
  %v2_a858 = call i32 @function_125b0(i32* null)
  store i32 %v2_a2d0, i32* %r1.global-to-local, align 4
  %v9_a860 = icmp eq i32 %v2_a2d0, %v2_a858
  store i1 %v9_a860, i1* %cpsr_z.global-to-local, align 1
  %v6_a864 = icmp slt i32 %v2_a2d0, %v2_a858
  br i1 %v6_a864, label %dec_label_pc_a868, label %dec_label_pc_a5dc

dec_label_pc_a868:                                ; preds = %dec_label_pc_a854, %dec_label_pc_a0c0, %dec_label_pc_a870
  %v29_a86c = phi i32 [ %v3_a2e4, %dec_label_pc_a0c0 ], [ %v1_a874, %dec_label_pc_a870 ], [ %v2_a858, %dec_label_pc_a854 ]
  store i32 %v18_a0c0, i32* %sb.global-to-local, align 4
  store i32 %v24_a0c0, i32* %fp.global-to-local, align 4
  ret i32 %v29_a86c

dec_label_pc_a870:                                ; preds = %dec_label_pc_a2f4
  %v1_a874 = call i32 @function_122e0(i32 %v3_a2e4)
  br label %dec_label_pc_a868

; uselistorder directives
  uselistorder i32 %v4_a800, { 1, 0 }
  uselistorder i32 %v2_a790, { 1, 0 }
  uselistorder i32 %v3_a760, { 1, 0 }
  uselistorder i32 %v3_a73c, { 1, 3, 2, 0 }
  uselistorder i32 %v1_a708, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a694, { 1, 0, 2 }
  uselistorder i32 %v1_a5f0, { 1, 0, 2 }
  uselistorder i1 %v2_a830, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a7b4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a61c, { 2, 1, 0 }
  uselistorder i32 %v1_a5cc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a404, { 1, 0 }
  uselistorder i32 %v3_a3fc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a3f8, { 0, 2, 1 }
  uselistorder i32 %v1_a3f4, { 1, 2, 0 }
  uselistorder i32 %v1_a3f0, { 2, 0, 1 }
  uselistorder i32 %tmp93, { 1, 0 }
  uselistorder i32 %v1_a3c4, { 1, 0 }
  uselistorder i32 %v1_a3c0, { 1, 0 }
  uselistorder i32 %v1_a3bc, { 1, 0 }
  uselistorder i32 %v1_a3b8, { 1, 0 }
  uselistorder i32 %v1_a388, { 2, 0, 1 }
  uselistorder i32 %v1_a370, { 1, 0 }
  uselistorder i1 %v2_a340, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a334, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a32c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a314, { 1, 0 }
  uselistorder i1 %v7_a2e8, { 1, 0 }
  uselistorder i32 %v3_a2e4, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_a2d0, { 2, 1, 0 }
  uselistorder i32 %v6_a2c0, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_a2ac, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_a1dc, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a1c0, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_a170, { 1, 2, 0 }
  uselistorder i32 %v6_a144, { 2, 1, 3, 0 }
  uselistorder i32 %v7_a12c, { 0, 2, 1, 3 }
  uselistorder i32 %v6_a108, { 1, 2, 0 }
  uselistorder i32 %v2_a0f0, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_a0c4, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 18, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 28, 29, 31, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_a868, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a83c, { 1, 0 }
  uselistorder label %dec_label_pc_a674, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a5dc, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
}

define i32 @function_a880(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a880:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a880 = load i32, i32* @r4, align 4
  %v12_a880 = load i32, i32* @r7, align 4
  %v1_a884 = urem i32 %arg2, 256
  store i32 %v1_a884, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_a884, i32* %r0.global-to-local, align 4
  %v1_a89c = urem i32 %arg4, 256
  store i32 %v1_a89c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a8ac = call i32 @function_12ee8(i32 %v1_a884, i32 4)
  %v0_a8b0 = load i32, i32* @r5, align 4
  store i32 %v0_a8b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a8b8 = load i32, i32* @r7, align 4
  store i32 %v0_a8b8, i32* %r3.global-to-local, align 4
  store i32 %v2_a8ac, i32* %sb.global-to-local, align 4
  %v0_a8c0 = load i32, i32* @r4, align 4
  store i32 %v0_a8c0, i32* %r0.global-to-local, align 4
  %v5_a8c4 = inttoptr i32 %v0_a8b0 to i32*
  %v6_a8c4 = call i32 @function_829c(i32 %v0_a8c0, i32* %v5_a8c4, i32 2, i32 %v0_a8b8, i32 ptrtoint (i32* @0 to i32))
  %v1_a8d0 = urem i32 %v6_a8c4, 256
  store i32 %v1_a8d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8dc = load i32, i32* @r5, align 4
  store i32 %v0_a8dc, i32* %r1.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r4, align 4
  store i32 %v0_a8e0, i32* %r0.global-to-local, align 4
  %v5_a8e4 = trunc i32 %v6_a8c4 to i8
  %v6_a8e8 = inttoptr i32 %v0_a8dc to i32*
  %v7_a8e8 = call i32 @function_829c(i32 %v0_a8e0, i32* %v6_a8e8, i32 3, i32 65535, i32 %v6_a8c4)
  %v0_a8ec = load i32, i32* @r5, align 4
  store i32 %v0_a8ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a8fc = load i32, i32* @r4, align 4
  store i32 %v0_a8fc, i32* %r0.global-to-local, align 4
  %v5_a900 = inttoptr i32 %v0_a8ec to i32*
  %v6_a900 = call i32 @function_829c(i32 %v0_a8fc, i32* %v5_a900, i32 4, i32 64, i32 %v7_a8e8)
  %v1_a908 = urem i32 %v6_a900, 256
  store i32 %v1_a908, i32* %ip.global-to-local, align 4
  %v0_a90c = load i32, i32* @r5, align 4
  store i32 %v0_a90c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a918 = load i32, i32* @r4, align 4
  store i32 %v0_a918, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_a900, 16777216
  %v5_a920 = sdiv i32 %sext9, 16777216
  %v6_a920 = inttoptr i32 %v0_a90c to i32*
  %v7_a920 = call i32 @function_829c(i32 %v0_a918, i32* %v6_a920, i32 5, i32 1, i32 %v5_a920)
  %v1_a92c = urem i32 %v7_a920, 256
  store i32 %v1_a92c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a938 = load i32, i32* @r5, align 4
  store i32 %v0_a938, i32* %r1.global-to-local, align 4
  %v0_a93c = load i32, i32* @r4, align 4
  store i32 %v0_a93c, i32* %r0.global-to-local, align 4
  %v5_a944 = inttoptr i32 %v0_a938 to i32*
  %v6_a944 = call i32 @function_829c(i32 %v0_a93c, i32* %v5_a944, i32 6, i32 65535, i32 %v1_a92c)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a95c = load i32, i32* @r4, align 4
  store i32 %v0_a95c, i32* %r0.global-to-local, align 4
  %v5_a960 = inttoptr i32 %v0_a950 to i32*
  %v6_a960 = call i32 @function_829c(i32 %v0_a95c, i32* %v5_a960, i32 7, i32 65535, i32 %v6_a944)
  %v0_a96c = load i32, i32* @r5, align 4
  store i32 %v0_a96c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v5_a97c = inttoptr i32 %v0_a96c to i32*
  %v6_a97c = call i32 @function_829c(i32 %v0_a978, i32* %v5_a97c, i32 16, i32 65535, i32 %v6_a960)
  %v0_a980 = load i32, i32* @r5, align 4
  store i32 %v0_a980, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a98c = load i32, i32* @r7, align 4
  store i32 %v0_a98c, i32* %r3.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v5_a994 = inttoptr i32 %v0_a980 to i32*
  %v6_a994 = call i32 @function_829c(i32 %v0_a990, i32* %v5_a994, i32 17, i32 %v0_a98c, i32 %v6_a97c)
  %v0_a998 = load i32, i32* @r5, align 4
  store i32 %v0_a998, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a9a4 = load i32, i32* @r7, align 4
  store i32 %v0_a9a4, i32* %r3.global-to-local, align 4
  %v0_a9a8 = load i32, i32* @r4, align 4
  store i32 %v0_a9a8, i32* %r0.global-to-local, align 4
  %v5_a9ac = inttoptr i32 %v0_a998 to i32*
  %v6_a9ac = call i32 @function_829c(i32 %v0_a9a8, i32* %v5_a9ac, i32 10, i32 %v0_a9a4, i32 %v6_a994)
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r7, align 4
  store i32 %v0_a9bc, i32* %r3.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r4, align 4
  store i32 %v0_a9c0, i32* %r0.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_829c(i32 %v0_a9c0, i32* %v5_a9c4, i32 11, i32 %v0_a9bc, i32 %v6_a9ac)
  %v0_a9c8 = load i32, i32* @r5, align 4
  store i32 %v0_a9c8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a9d4 = load i32, i32* @r7, align 4
  store i32 %v0_a9d4, i32* %r3.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r4, align 4
  store i32 %v0_a9d8, i32* %r0.global-to-local, align 4
  %v5_a9dc = inttoptr i32 %v0_a9c8 to i32*
  %v6_a9dc = call i32 @function_829c(i32 %v0_a9d8, i32* %v5_a9dc, i32 12, i32 %v0_a9d4, i32 %v6_a9c4)
  %v0_a9e0 = load i32, i32* @r5, align 4
  store i32 %v0_a9e0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a9ec = load i32, i32* @r7, align 4
  store i32 %v0_a9ec, i32* %r3.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r4, align 4
  store i32 %v0_a9f0, i32* %r0.global-to-local, align 4
  %v5_a9f4 = inttoptr i32 %v0_a9e0 to i32*
  %v6_a9f4 = call i32 @function_829c(i32 %v0_a9f0, i32* %v5_a9f4, i32 13, i32 %v0_a9ec, i32 %v6_a9dc)
  %v0_a9f8 = load i32, i32* @r5, align 4
  store i32 %v0_a9f8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v5_aa0c = inttoptr i32 %v0_a9f8 to i32*
  %v6_aa0c = call i32 @function_829c(i32 %v0_aa08, i32* %v5_aa0c, i32 14, i32 1, i32 %v6_a9f4)
  %v0_aa10 = load i32, i32* @r5, align 4
  store i32 %v0_aa10, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_aa1c = load i32, i32* @r7, align 4
  store i32 %v0_aa1c, i32* %r3.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r4, align 4
  store i32 %v0_aa20, i32* %r0.global-to-local, align 4
  %v5_aa24 = inttoptr i32 %v0_aa10 to i32*
  %v6_aa24 = call i32 @function_829c(i32 %v0_aa20, i32* %v5_aa24, i32 15, i32 %v0_aa1c, i32 %v6_aa0c)
  %v0_aa2c = load i32, i32* @r5, align 4
  store i32 %v0_aa2c, i32* %r1.global-to-local, align 4
  %v2_aa30 = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_aa30, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r4, align 4
  store i32 %v0_aa3c, i32* %r0.global-to-local, align 4
  %v5_aa40 = inttoptr i32 %v0_aa2c to i32*
  %v6_aa40 = call i32 @function_8230(i32 %v0_aa3c, i32* %v5_aa40, i32 19, i32 %v2_aa30, i32 %v6_aa24)
  %v0_aa48 = load i32, i32* @r7, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v1_aa4c = inttoptr i32 %v0_aa48 to i32*
  %v2_aa4c = call i32 @function_125b0(i32* %v1_aa4c)
  %v1_aa50 = load i32, i32* @r6, align 4
  %v2_aa50 = add i32 %v1_aa50, %v2_aa4c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aa64 = call i32 @function_12bfc(i32 2, i32 3, i32 6)
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v7_aa68 = icmp eq i32 %v3_aa64, -1
  store i1 %v7_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aa64, i32* %sl.global-to-local, align 4
  br i1 %v7_aa68, label %dec_label_pc_afe8, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_a880
  store i32 1, i32* %stack_var_-40, align 4
  %v6_aa7c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_aa7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_aa84 = load i32, i32* @r7, align 4
  store i32 %v0_aa84, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa90 = call i32 @function_12bcc(i32 %v3_aa64, i32 %v0_aa84, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_aa90, i32* %r0.global-to-local, align 4
  %v7_aa94 = icmp eq i32 %v6_aa90, -1
  store i1 %v7_aa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa94, label %dec_label_pc_aff0, label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa74
  %v3_aaa0 = mul i32 %v7_a8e8, 65536
  store i32 %v3_aaa0, i32* @r4, align 4
  %v3_aaac = urem i32 %v7_a8e8, 65536
  %v3_aab8 = mul i32 %v6_a944, 65536
  store i32 %v3_aab8, i32* %r0.global-to-local, align 4
  %v3_aac0 = urem i32 %v6_a944, 65536
  store i32 %v3_aac0, i32* %r2.global-to-local, align 4
  %v3_aac4 = urem i32 %v6_a960, 65536
  store i32 %v3_aac4, i32* %r3.global-to-local, align 4
  %v1_aac8 = urem i32 %v6_a9ac, 256
  store i32 %v1_aac8, i32* %ip.global-to-local, align 4
  %v0_aacc = load i32, i32* %fp.global-to-local, align 4
  %v2_aacc = icmp eq i32 %v0_aacc, 0
  store i1 %v2_aacc, i1* %cpsr_z.global-to-local, align 1
  %v0_aad0 = load i32, i32* @r7, align 4
  store i32 %v0_aad0, i32* %stack_var_-40, align 4
  %tmp68 = icmp slt i32 %v0_aacc, 1
  br i1 %tmp68, label %dec_label_pc_ad88.preheader, label %dec_label_pc_aae4

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aa9c
  %v1_aafc = urem i32 %v6_a960, 256
  %tmp69 = udiv i32 %v6_a944, 256
  %tmp70 = mul i32 %v6_a97c, 256
  %v1_ab14 = and i32 %tmp70, 65280
  %tmp72 = udiv i32 %v6_a97c, 256
  %v4_ab24 = urem i32 %tmp72, 256
  %v5_ab24 = or i32 %v4_ab24, %v1_ab14
  store i32 %v5_ab24, i32* @lr, align 4
  %v1_ab30 = urem i32 %v6_a9ac, 2
  %v1_ab38 = urem i32 %v6_a9c4, 2
  %v1_ab3c = urem i32 %v6_a9dc, 2
  %v1_ab40 = urem i32 %v6_a9f4, 2
  %v3_ab4c = mul nuw nsw i32 %v1_aafc, 256
  store i32 %v3_ab4c, i32* %r1.global-to-local, align 4
  %v3_ab64 = sdiv i32 %v3_aaa0, 16777216
  %sext10 = mul i32 %tmp69, 16777216
  %v7_ab64 = sdiv i32 %sext10, 16777216
  %tmp73 = udiv i32 %v6_a960, 256
  %v4_ab68 = urem i32 %tmp73, 256
  %v5_ab68 = or i32 %v4_ab68, %v3_ab4c
  store i32 %v5_ab68, i32* @r6, align 4
  %v1_ab6c = urem i32 %v6_aa0c, 2
  %v1_ab74 = urem i32 %v6_aa24, 2
  store i32 %v1_ab74, i32* %r0.global-to-local, align 4
  %v3_ab78 = ashr i32 %v3_aaa0, 31
  store i32 %v3_ab78, i32* %r2.global-to-local, align 4
  %v3_ab7c = ashr i32 %sext10, 31
  store i32 %v3_ab7c, i32* %r3.global-to-local, align 4
  store i32 %v1_aafc, i32* %ip.global-to-local, align 4
  %v5_ab90 = trunc i32 %v3_ab7c to i8
  store i32 %v0_aad0, i32* @r4, align 4
  store i32 %v0_aad0, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %tmp = sub nsw i32 0, %v1_ab30
  %v4_ac58 = and i32 %tmp, 32
  %tmp77 = sub nsw i32 0, %v1_ab38
  %v4_ac6c = and i32 %tmp77, 16
  %tmp78 = sub nsw i32 0, %v1_ab3c
  %v4_ac80 = and i32 %tmp78, 8
  %tmp79 = sub nsw i32 0, %v1_ab40
  %v4_ac94 = and i32 %tmp79, 4
  %tmp80 = sub nsw i32 0, %v1_ab6c
  %v3_aca8 = and i32 %tmp80, 2
  %sext8 = mul i32 %v6_a960, 16777216
  %v7_acd8 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_aba4

dec_label_pc_aba4:                                ; preds = %bb75, %dec_label_pc_aae4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_abac = call i32 @function_12ee8(i32 128, i32 1)
  store i32 %v2_abac, i32* %r0.global-to-local, align 4
  %v3_abb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abb0, i32* %r2.global-to-local, align 4
  %v1_abb4 = load i32, i32* %sb.global-to-local, align 4
  %v2_abb4 = load i32, i32* @r4, align 4
  %v5_abb4 = mul i32 %v2_abb4, 4
  %v6_abb4 = add i32 %v5_abb4, %v1_abb4
  %v7_abb4 = inttoptr i32 %v6_abb4 to i32*
  store i32 %v2_abac, i32* %v7_abb4, align 4
  %v0_abb8 = load i32, i32* %sb.global-to-local, align 4
  %v1_abb8 = load i32, i32* %r2.global-to-local, align 4
  %v4_abb8 = mul i32 %v1_abb8, 4
  %v5_abb8 = add i32 %v4_abb8, %v0_abb8
  %v6_abb8 = inttoptr i32 %v5_abb8 to i32*
  %v7_abb8 = load i32, i32* %v6_abb8, align 4
  store i32 %v7_abb8, i32* %r4.global-to-local, align 4
  %v1_abbc = inttoptr i32 %v7_abb8 to i8*
  %v2_abbc = load i8, i8* %v1_abbc, align 1
  %tmp81 = urem i8 %v2_abbc, 16
  %v1_abc0 = zext i8 %tmp81 to i32
  %v1_abc4 = or i32 %v1_abc0, 64
  store i32 %v1_abc4, i32* %r3.global-to-local, align 4
  %v1_abc8 = trunc i32 %v1_abc4 to i8
  store i8 %v1_abc8, i8* %v1_abbc, align 1
  %v0_abcc = load i32, i32* %r4.global-to-local, align 4
  %v1_abcc = inttoptr i32 %v0_abcc to i8*
  %v2_abcc = load i8, i8* %v1_abcc, align 1
  %v1_abd0 = and i8 %v2_abcc, -16
  %v1_abd4 = or i8 %v1_abd0, 5
  store i32 %v1_a92c, i32* %r0.global-to-local, align 4
  store i8 %v1_abd4, i8* %v1_abcc, align 1
  %v2_abe4 = load i32, i32* %r4.global-to-local, align 4
  %v3_abe4 = add i32 %v2_abe4, 1
  %v4_abe4 = inttoptr i32 %v3_abe4 to i8*
  store i8 %v5_a8e4, i8* %v4_abe4, align 1
  %v0_abe8 = load i32, i32* %r0.global-to-local, align 4
  %v2_abe8 = icmp eq i32 %v0_abe8, 0
  store i1 %v2_abe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a920, i32* %r0.global-to-local, align 4
  %v2_abf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf4 = add i32 %v2_abf4, 3
  %v4_abf4 = inttoptr i32 %v3_abf4 to i8*
  store i8 60, i8* %v4_abf4, align 1
  store i32 %v3_ab78, i32* %ip.global-to-local, align 4
  store i32 %v3_ab64, i32* %r3.global-to-local, align 4
  %v0_ac00 = load i32, i32* %r0.global-to-local, align 4
  %v1_ac00 = trunc i32 %v0_ac00 to i8
  %v2_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac00 = add i32 %v2_ac00, 8
  %v4_ac00 = inttoptr i32 %v3_ac00 to i8*
  store i8 %v1_ac00, i8* %v4_ac00, align 1
  %v0_ac04 = load i32, i32* @r7, align 4
  %v1_ac04 = trunc i32 %v0_ac04 to i8
  %v2_ac04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac04 = add i32 %v2_ac04, 9
  %v4_ac04 = inttoptr i32 %v3_ac04 to i8*
  store i8 %v1_ac04, i8* %v4_ac04, align 1
  %v3_ac08 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac08, i32* %r2.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac0c = trunc i32 %v0_ac0c to i8
  %v2_ac0c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac0c = add i32 %v2_ac0c, 4
  %v4_ac0c = inttoptr i32 %v3_ac0c to i8*
  store i8 %v1_ac0c, i8* %v4_ac0c, align 1
  %v0_ac10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_aba4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ac14 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac14 = add i32 %v3_ac14, 6
  %v5_ac14 = inttoptr i32 %v4_ac14 to i8*
  store i8 64, i8* %v5_ac14, align 1
  %v0_ac34.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_aba4, %bb
  %v0_ac34 = phi i1 [ true, %dec_label_pc_aba4 ], [ %v0_ac34.pre, %bb ]
  %v0_ac18 = load i32, i32* %r2.global-to-local, align 4
  %v5_ac1c = mul i32 %v0_ac18, 24
  store i32 %v5_ac1c, i32* %r3.global-to-local, align 4
  store i32 %v6_aa40, i32* %r2.global-to-local, align 4
  %v1_ac24 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac24 = add i32 %v1_ac24, 12
  %v3_ac24 = inttoptr i32 %v2_ac24 to i32*
  store i32 %v6_aa40, i32* %v3_ac24, align 4
  %v0_ac28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac28 = load i32, i32* @r8, align 4
  %v2_ac28 = add i32 %v1_ac28, %v0_ac28
  store i32 %v2_ac28, i32* %r3.global-to-local, align 4
  %v1_ac2c = add i32 %v2_ac28, 16
  %v2_ac2c = inttoptr i32 %v1_ac2c to i32*
  %v3_ac2c = load i32, i32* %v2_ac2c, align 4
  store i32 %v3_ac2c, i32* %r2.global-to-local, align 4
  store i32 %v7_ab64, i32* %r3.global-to-local, align 4
  br i1 %v0_ac34, label %bb75, label %bb74

bb74:                                             ; preds = %.thread
  %v1_ac34 = load i32, i32* @r5, align 4
  %v2_ac34 = trunc i32 %v1_ac34 to i8
  %v3_ac34 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac34 = add i32 %v3_ac34, 7
  %v5_ac34 = inttoptr i32 %v4_ac34 to i8*
  store i8 %v2_ac34, i8* %v5_ac34, align 1
  br label %bb75

bb75:                                             ; preds = %.thread, %bb74
  %v0_ac38 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac38 = trunc i32 %v0_ac38 to i8
  %v2_ac38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac38 = add i32 %v2_ac38, 5
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v1_ac38, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* @r5, align 4
  %v1_ac3c = trunc i32 %v0_ac3c to i8
  %v2_ac3c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac3c = add i32 %v2_ac3c, 2
  %v4_ac3c = inttoptr i32 %v3_ac3c to i8*
  store i8 %v1_ac3c, i8* %v4_ac3c, align 1
  %v0_ac40 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac40 = add i32 %v1_ac40, 16
  %v3_ac40 = inttoptr i32 %v2_ac40 to i32*
  store i32 %v0_ac40, i32* %v3_ac40, align 4
  %v0_ac44 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac44 = trunc i32 %v0_ac44 to i8
  %v2_ac44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac44 = add i32 %v2_ac44, 20
  %v4_ac44 = inttoptr i32 %v3_ac44 to i8*
  store i8 %v1_ac44, i8* %v4_ac44, align 1
  %v0_ac48 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac48 = add i32 %v0_ac48, 20
  store i32 %v1_ac48, i32* %r1.global-to-local, align 4
  %v1_ac4c = add i32 %v0_ac48, 33
  %v2_ac4c = inttoptr i32 %v1_ac4c to i8*
  %v3_ac4c = load i8, i8* %v2_ac4c, align 1
  %v4_ac4c = zext i8 %v3_ac4c to i32
  store i32 %v1_ab30, i32* %ip.global-to-local, align 4
  %v1_ac54 = and i32 %v4_ac4c, 223
  %v5_ac58 = or i32 %v1_ac54, %v4_ac58
  store i32 %v5_ac58, i32* %r3.global-to-local, align 4
  %v1_ac5c = trunc i32 %v5_ac58 to i8
  store i8 %v1_ac5c, i8* %v2_ac4c, align 1
  %v0_ac60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac60 = add i32 %v0_ac60, 13
  %v2_ac60 = inttoptr i32 %v1_ac60 to i8*
  %v3_ac60 = load i8, i8* %v2_ac60, align 1
  %v4_ac60 = zext i8 %v3_ac60 to i32
  store i32 %v1_ab38, i32* %r0.global-to-local, align 4
  %v1_ac68 = and i32 %v4_ac60, 239
  %v5_ac6c = or i32 %v1_ac68, %v4_ac6c
  store i32 %v5_ac6c, i32* %r2.global-to-local, align 4
  %v1_ac70 = trunc i32 %v5_ac6c to i8
  store i8 %v1_ac70, i8* %v2_ac60, align 1
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac74, 13
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v1_ab3c, i32* %r2.global-to-local, align 4
  %v1_ac7c = and i32 %v4_ac74, 247
  %v5_ac80 = or i32 %v1_ac7c, %v4_ac80
  store i32 %v5_ac80, i32* %r3.global-to-local, align 4
  %v1_ac84 = trunc i32 %v5_ac80 to i8
  store i8 %v1_ac84, i8* %v2_ac74, align 1
  %v0_ac88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac88 = add i32 %v0_ac88, 13
  %v2_ac88 = inttoptr i32 %v1_ac88 to i8*
  %v3_ac88 = load i8, i8* %v2_ac88, align 1
  %v4_ac88 = zext i8 %v3_ac88 to i32
  store i32 %v1_ab40, i32* %r3.global-to-local, align 4
  %v1_ac90 = and i32 %v4_ac88, 251
  %v5_ac94 = or i32 %v1_ac90, %v4_ac94
  store i32 %v5_ac94, i32* %r2.global-to-local, align 4
  %v1_ac98 = trunc i32 %v5_ac94 to i8
  store i8 %v1_ac98, i8* %v2_ac88, align 1
  %v0_ac9c = load i32, i32* %r1.global-to-local, align 4
  %v1_ac9c = add i32 %v0_ac9c, 13
  %v2_ac9c = inttoptr i32 %v1_ac9c to i8*
  %v3_ac9c = load i8, i8* %v2_ac9c, align 1
  %v4_ac9c = zext i8 %v3_ac9c to i32
  store i32 %v1_ab6c, i32* %ip.global-to-local, align 4
  %v1_aca4 = and i32 %v4_ac9c, 253
  %v4_aca8 = or i32 %v1_aca4, %v3_aca8
  store i32 %v4_aca8, i32* %r3.global-to-local, align 4
  %v1_acac = trunc i32 %v4_aca8 to i8
  store i8 %v1_acac, i8* %v2_ac9c, align 1
  %v0_acb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_acb0 = add i32 %v0_acb0, 12
  %v2_acb0 = inttoptr i32 %v1_acb0 to i8*
  %v3_acb0 = load i8, i8* %v2_acb0, align 1
  %v4_acb0 = zext i8 %v3_acb0 to i32
  store i32 %v4_acb0, i32* %r2.global-to-local, align 4
  %v1_acb4 = add i32 %v0_acb0, 13
  %v2_acb4 = inttoptr i32 %v1_acb4 to i8*
  %v3_acb4 = load i8, i8* %v2_acb4, align 1
  %v4_acb4 = zext i8 %v3_acb4 to i32
  %tmp82 = urem i8 %v3_acb0, 16
  %v1_acbc = zext i8 %tmp82 to i32
  %v1_acc0 = and i32 %v4_acb4, 254
  %v2_acc4 = or i32 %v1_acc0, %v1_ab74
  %v1_acc8 = or i32 %v1_acbc, 160
  store i32 %v1_acc8, i32* %r2.global-to-local, align 4
  %v1_accc = trunc i32 %v2_acc4 to i8
  store i8 %v1_accc, i8* %v2_acb4, align 1
  %v0_acd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_acd0 = trunc i32 %v0_acd0 to i8
  %v2_acd0 = load i32, i32* %r1.global-to-local, align 4
  %v3_acd0 = add i32 %v2_acd0, 12
  %v4_acd0 = inttoptr i32 %v3_acd0 to i8*
  store i8 %v1_acd0, i8* %v4_acd0, align 1
  store i32 %v7_acd8, i32* %r3.global-to-local, align 4
  store i32 %v5_ab24, i32* %ip.global-to-local, align 4
  %v2_ace0 = load i32, i32* %r1.global-to-local, align 4
  %v3_ace0 = add i32 %v2_ace0, 1
  %v4_ace0 = inttoptr i32 %v3_ace0 to i8*
  store i8 %v5_ab90, i8* %v4_ace0, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_acec = load i32, i32* %r3.global-to-local, align 4
  %v1_acec = trunc i32 %v0_acec to i8
  %v2_acec = load i32, i32* %r1.global-to-local, align 4
  %v3_acec = add i32 %v2_acec, 3
  %v4_acec = inttoptr i32 %v3_acec to i8*
  store i8 %v1_acec, i8* %v4_acec, align 1
  %v0_acf0 = load i32, i32* %ip.global-to-local, align 4
  %v1_acf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_acf0 = add i32 %v1_acf0, 4
  %v3_acf0 = inttoptr i32 %v2_acf0 to i32*
  store i32 %v0_acf0, i32* %v3_acf0, align 4
  %v0_acf4 = load i32, i32* @r6, align 4
  %v1_acf4 = trunc i32 %v0_acf4 to i8
  %v2_acf4 = load i32, i32* %r1.global-to-local, align 4
  %v3_acf4 = add i32 %v2_acf4, 2
  %v4_acf4 = inttoptr i32 %v3_acf4 to i8*
  store i8 %v1_acf4, i8* %v4_acf4, align 1
  %v0_acf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_acf8 = trunc i32 %v0_acf8 to i8
  %v2_acf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_acf8 = add i32 %v2_acf8, 41
  %v4_acf8 = inttoptr i32 %v3_acf8 to i8*
  store i8 %v1_acf8, i8* %v4_acf8, align 1
  %v0_acfc = load i32, i32* %r0.global-to-local, align 4
  %v1_acfc = trunc i32 %v0_acfc to i8
  %v2_acfc = load i32, i32* %r4.global-to-local, align 4
  %v3_acfc = add i32 %v2_acfc, 40
  %v4_acfc = inttoptr i32 %v3_acfc to i8*
  store i8 %v1_acfc, i8* %v4_acfc, align 1
  %v0_ad00 = call i32 @function_e240()
  %v1_ad04 = urem i32 %v0_ad00, 16
  %v1_ad08 = or i32 %v1_ad04, 1392
  %v1_ad0c = add nuw nsw i32 %v1_ad08, 8
  %v3_ad10 = mul nuw nsw i32 %v1_ad0c, 65536
  store i32 %v3_ad10, i32* %r0.global-to-local, align 4
  %v3_ad14 = mul nuw nsw i32 %v1_ad0c, 256
  %v1_ad18 = and i32 %v3_ad14, 65280
  %v5_ad1c = or i32 %v1_ad18, 5
  store i32 %v5_ad1c, i32* %r3.global-to-local, align 4
  %v2_ad20 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad20 = add i32 %v2_ad20, 42
  %v4_ad20 = inttoptr i32 %v3_ad20 to i8*
  store i8 5, i8* %v4_ad20, align 1
  %v0_ad24 = load i32, i32* %r3.global-to-local, align 4
  %v3_ad24 = sdiv i32 %v0_ad24, 256
  store i32 %v3_ad24, i32* %r1.global-to-local, align 4
  %v0_ad28 = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_ad30 = trunc i32 %v3_ad24 to i8
  %v3_ad30 = add i32 %v0_ad28, 43
  %v4_ad30 = inttoptr i32 %v3_ad30 to i8*
  store i8 %v1_ad30, i8* %v4_ad30, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_ad38 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad38 = trunc i32 %v0_ad38 to i8
  %v2_ad38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad38 = add i32 %v2_ad38, 46
  %v4_ad38 = inttoptr i32 %v3_ad38 to i8*
  store i8 %v1_ad38, i8* %v4_ad38, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_ad44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad44 = add i32 %v2_ad44, 47
  %v4_ad44 = inttoptr i32 %v3_ad44 to i8*
  store i8 10, i8* %v4_ad44, align 1
  %v0_ad48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad48 = trunc i32 %v0_ad48 to i8
  %v2_ad48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad48 = add i32 %v2_ad48, 44
  %v4_ad48 = inttoptr i32 %v3_ad48 to i8*
  store i8 %v1_ad48, i8* %v4_ad48, align 1
  %v0_ad4c = load i32, i32* %ip.global-to-local, align 4
  %v1_ad4c = trunc i32 %v0_ad4c to i8
  %v2_ad4c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad4c = add i32 %v2_ad4c, 45
  %v4_ad4c = inttoptr i32 %v3_ad4c to i8*
  store i8 %v1_ad4c, i8* %v4_ad4c, align 1
  %v0_ad50 = call i32 @function_e240()
  store i32 %v0_ad50, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_ad5c = load i32, i32* %r4.global-to-local, align 4
  %v2_ad5c = add i32 %v1_ad5c, 48
  %v3_ad5c = inttoptr i32 %v2_ad5c to i32*
  store i32 %v0_ad50, i32* %v3_ad5c, align 4
  %v0_ad60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad60 = trunc i32 %v0_ad60 to i8
  %v2_ad60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad60 = add i32 %v2_ad60, 56
  %v4_ad60 = inttoptr i32 %v3_ad60 to i8*
  store i8 %v1_ad60, i8* %v4_ad60, align 1
  %v0_ad64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad64 = trunc i32 %v0_ad64 to i8
  %v2_ad64 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad64 = add i32 %v2_ad64, 58
  %v4_ad64 = inttoptr i32 %v3_ad64 to i8*
  store i8 %v1_ad64, i8* %v4_ad64, align 1
  %v0_ad68 = load i32, i32* @r7, align 4
  %v1_ad68 = trunc i32 %v0_ad68 to i8
  %v2_ad68 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad68 = add i32 %v2_ad68, 59
  %v4_ad68 = inttoptr i32 %v3_ad68 to i8*
  store i8 %v1_ad68, i8* %v4_ad68, align 1
  %v0_ad6c = load i32, i32* @r5, align 4
  %v1_ad6c = load i32, i32* %r4.global-to-local, align 4
  %v2_ad6c = add i32 %v1_ad6c, 52
  %v3_ad6c = inttoptr i32 %v2_ad6c to i32*
  store i32 %v0_ad6c, i32* %v3_ad6c, align 4
  %v0_ad70 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad70 = trunc i32 %v0_ad70 to i8
  %v2_ad70 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad70 = add i32 %v2_ad70, 57
  %v4_ad70 = inttoptr i32 %v3_ad70 to i8*
  store i8 %v1_ad70, i8* %v4_ad70, align 1
  %v3_ad74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad74, i32* %r3.global-to-local, align 4
  %v1_ad78 = add i32 %v3_ad74, 1
  store i32 %v1_ad78, i32* @r4, align 4
  %v0_ad7c = load i32, i32* %fp.global-to-local, align 4
  %v9_ad7c = icmp eq i32 %v0_ad7c, %v1_ad78
  store i1 %v9_ad7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ad78, i32* %stack_var_-40, align 4
  %v8_ad84 = icmp sgt i32 %v0_ad7c, %v1_ad78
  br i1 %v8_ad84, label %dec_label_pc_aba4, label %dec_label_pc_ad88.preheader

dec_label_pc_ad88.preheader:                      ; preds = %bb75, %dec_label_pc_aa9c
  %v0_ad8c13 = phi i32 [ %v0_aacc, %dec_label_pc_aa9c ], [ %v0_ad7c, %bb75 ]
  %v2_ada8 = icmp eq i32 %v6_aa40, -1
  %v7_ada8 = icmp eq i32 %v6_aa40, -1
  %v3_af38 = icmp eq i32 %v3_aaac, 65535
  %v2_afb4 = icmp eq i32 %v1_aac8, 0
  br label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge, %dec_label_pc_ad88.preheader
  %v0_ad8c = phi i32 [ %v0_ad8c.pre, %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge ], [ %v0_ad8c13, %dec_label_pc_ad88.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ad8c = icmp eq i32 %v0_ad8c, 0
  store i1 %v2_ad8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp76 = icmp slt i32 %v0_ad8c, 1
  br i1 %tmp76, label %dec_label_pc_afd4, label %dec_label_pc_ad98

dec_label_pc_ad98:                                ; preds = %dec_label_pc_ad88
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_aea0

dec_label_pc_ada4:                                ; preds = %dec_label_pc_aea0
  store i32 %v6_aa40, i32* %r0.global-to-local, align 4
  store i1 %v7_ada8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ada8, label %dec_label_pc_af28, label %dec_label_pc_adb0

dec_label_pc_adb0:                                ; preds = %dec_label_pc_aec0, %dec_label_pc_ada4
  store i32 %v3_aaac, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_af38, label %dec_label_pc_af44, label %dec_label_pc_adc4

dec_label_pc_adc4:                                ; preds = %dec_label_pc_af28.dec_label_pc_adc4_crit_edge, %dec_label_pc_adb0
  %v1_adc8 = phi i32 [ %v1_adc8.pre, %dec_label_pc_af28.dec_label_pc_adc4_crit_edge ], [ 65535, %dec_label_pc_adb0 ]
  store i32 %v3_aac0, i32* %r3.global-to-local, align 4
  %v9_adc8 = icmp eq i32 %v3_aac0, %v1_adc8
  store i1 %v9_adc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_adc8, label %dec_label_pc_af60, label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %dec_label_pc_af44.dec_label_pc_add0_crit_edge, %dec_label_pc_adc4
  %v1_add4 = phi i32 [ %v1_add4.pre, %dec_label_pc_af44.dec_label_pc_add0_crit_edge ], [ %v1_adc8, %dec_label_pc_adc4 ]
  store i32 %v3_aac4, i32* %ip.global-to-local, align 4
  %v9_add4 = icmp eq i32 %v3_aac4, %v1_add4
  store i1 %v9_add4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_add4, label %dec_label_pc_af7c, label %dec_label_pc_addc

dec_label_pc_addc:                                ; preds = %dec_label_pc_af60.dec_label_pc_addc_crit_edge, %dec_label_pc_add0
  %v1_ade0 = phi i32 [ %v1_ade0.pre, %dec_label_pc_af60.dec_label_pc_addc_crit_edge ], [ %v1_add4, %dec_label_pc_add0 ]
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  %v9_ade0 = icmp eq i32 %v6_a97c, %v1_ade0
  store i1 %v9_ade0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ade0, label %dec_label_pc_af98, label %dec_label_pc_ade8

dec_label_pc_ade8:                                ; preds = %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge, %dec_label_pc_addc
  %v1_adec = phi i32 [ %v1_adec.pre, %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge ], [ %v1_ade0, %dec_label_pc_addc ]
  store i32 %v6_a994, i32* %r2.global-to-local, align 4
  %v9_adec = icmp eq i32 %v6_a994, %v1_adec
  store i1 %v9_adec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_adec, label %dec_label_pc_afac, label %dec_label_pc_adf4

dec_label_pc_adf4:                                ; preds = %dec_label_pc_af98, %dec_label_pc_ade8
  store i32 %v1_aac8, i32* %r3.global-to-local, align 4
  store i1 %v2_afb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afb4, label %dec_label_pc_ae00, label %dec_label_pc_afc0

dec_label_pc_ae00:                                ; preds = %dec_label_pc_adf4, %dec_label_pc_afac, %dec_label_pc_afc0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae04 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae04 = trunc i32 %v0_ae04 to i8
  %v2_ae04 = load i32, i32* @r5, align 4
  %v3_ae04 = add i32 %v2_ae04, 10
  %v4_ae04 = inttoptr i32 %v3_ae04 to i8*
  store i8 %v1_ae04, i8* %v4_ae04, align 1
  %v0_ae08 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  %v2_ae08 = load i32, i32* @r5, align 4
  %v3_ae08 = add i32 %v2_ae08, 11
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v0_ae0c = load i32, i32* @r5, align 4
  store i32 %v0_ae0c, i32* @r0, align 4
  %v2_ae10 = call i32 @function_c688(i32 %v0_ae0c, i32 20)
  %v3_ae10 = trunc i32 %v2_ae10 to i8
  %v4_ae1421 = udiv i32 %v2_ae10, 256
  %v1_ae18 = trunc i32 %v4_ae1421 to i8
  %v2_ae18 = load i32, i32* @r5, align 4
  %v3_ae18 = add i32 %v2_ae18, 11
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v3_ae1c = load i32, i32* @r5, align 4
  %v4_ae1c = add i32 %v3_ae1c, 10
  %v5_ae1c = inttoptr i32 %v4_ae1c to i8*
  store i8 %v3_ae10, i8* %v5_ae1c, align 1
  %v0_ae20 = load i32, i32* @r6, align 4
  store i32 %v0_ae20, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_ae2c = load i32, i32* %r7.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v3_ae2c = add i32 %v0_ae20, 16
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae30 = trunc i32 %v0_ae30 to i8
  %v2_ae30 = load i32, i32* @r6, align 4
  %v3_ae30 = add i32 %v2_ae30, 17
  %v4_ae30 = inttoptr i32 %v3_ae30 to i8*
  store i8 %v1_ae30, i8* %v4_ae30, align 1
  %v0_ae34 = load i32, i32* @r5, align 4
  store i32 %v0_ae34, i32* %r0.global-to-local, align 4
  %v4_ae38 = call i32 @function_c6e4(i32 %v0_ae34, i32 %v0_ae20, i32 10240, i32 40)
  %v5_ae38 = trunc i32 %v4_ae38 to i8
  store i32 %v4_ae38, i32* %r0.global-to-local, align 4
  %v4_ae3c22 = udiv i32 %v4_ae38, 256
  %v1_ae40 = trunc i32 %v4_ae3c22 to i8
  %v2_ae40 = load i32, i32* @r6, align 4
  %v3_ae40 = add i32 %v2_ae40, 17
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  %v3_ae44 = load i32, i32* @r6, align 4
  %v4_ae44 = add i32 %v3_ae44, 16
  %v5_ae44 = inttoptr i32 %v4_ae44 to i8*
  store i8 %v5_ae38, i8* %v5_ae44, align 1
  %v3_ae48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae48, i32* %r3.global-to-local, align 4
  %v0_ae4c = load i32, i32* @r5, align 4
  %v1_ae4c = add i32 %v0_ae4c, 20
  %v2_ae4c = inttoptr i32 %v1_ae4c to i32*
  %v3_ae4c = load i32, i32* %v2_ae4c, align 4
  %v3_ae54 = udiv i32 %v3_ae4c, 65536
  store i32 %v3_ae54, i32* %r2.global-to-local, align 4
  %v5_ae58 = mul i32 %v3_ae48, 24
  %v1_ae5c = load i32, i32* @r8, align 4
  %v2_ae5c = add i32 %v1_ae5c, %v5_ae58
  store i32 %v2_ae5c, i32* %ip.global-to-local, align 4
  %v3_ae6020 = udiv i32 %v3_ae4c, 16777216
  %v1_ae64 = trunc i32 %v3_ae6020 to i8
  %v3_ae64 = add i32 %v2_ae5c, 3
  %v4_ae64 = inttoptr i32 %v3_ae64 to i8*
  store i8 %v1_ae64, i8* %v4_ae64, align 1
  %v0_ae68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae68 = trunc i32 %v0_ae68 to i8
  %v2_ae68 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae68 = add i32 %v2_ae68, 2
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v1_ae68, i8* %v4_ae68, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae70 = load i32, i32* @r5, align 4
  store i32 %v0_ae70, i32* %r1.global-to-local, align 4
  %v0_ae74 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ae74, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ae80 = load i32, i32* %ip.global-to-local, align 4
  %v6_ae88 = inttoptr i32 %v0_ae70 to i32*
  %v7_ae88 = call i32 @function_12b98(i32 %v0_ae74, i32* %v6_ae88, i32 60, i32 16384, i32 %v0_ae80, i32 16)
  %v3_ae8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae8c, i32* %r3.global-to-local, align 4
  %v1_ae90 = add i32 %v3_ae8c, 1
  store i32 %v1_ae90, i32* %r0.global-to-local, align 4
  %v1_ae94 = load i32, i32* %fp.global-to-local, align 4
  %v9_ae94 = icmp eq i32 %v1_ae90, %v1_ae94
  store i1 %v9_ae94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ae90, i32* %stack_var_-40, align 4
  %v6_ae9c = icmp slt i32 %v1_ae90, %v1_ae94
  br i1 %v6_ae9c, label %dec_label_pc_aea0, label %dec_label_pc_afd4

dec_label_pc_aea0:                                ; preds = %dec_label_pc_ae00, %dec_label_pc_ad98
  %v1_aeb0 = phi i32 [ %v1_ae90, %dec_label_pc_ae00 ], [ 0, %dec_label_pc_ad98 ]
  %v5_aea4 = mul i32 %v1_aeb0, 24
  %v1_aea8 = load i32, i32* @r8, align 4
  %v2_aea8 = add i32 %v1_aea8, %v5_aea4
  store i32 %v2_aea8, i32* %r3.global-to-local, align 4
  %v1_aeac = add i32 %v2_aea8, 20
  %v2_aeac = inttoptr i32 %v1_aeac to i8*
  %v3_aeac = load i8, i8* %v2_aeac, align 1
  %v4_aeac = zext i8 %v3_aeac to i32
  store i32 %v4_aeac, i32* %r2.global-to-local, align 4
  %v0_aeb0 = load i32, i32* %sb.global-to-local, align 4
  %v4_aeb0 = mul i32 %v1_aeb0, 4
  %v5_aeb0 = add i32 %v0_aeb0, %v4_aeb0
  %v6_aeb0 = inttoptr i32 %v5_aeb0 to i32*
  %v7_aeb0 = load i32, i32* %v6_aeb0, align 4
  store i32 %v7_aeb0, i32* @r5, align 4
  %v2_aeb4 = icmp ugt i8 %v3_aeac, 30
  %v7_aeb4 = icmp eq i8 %v3_aeac, 31
  store i1 %v7_aeb4, i1* %cpsr_z.global-to-local, align 1
  %v1_aeb8 = add i32 %v7_aeb0, 20
  store i32 %v1_aeb8, i32* @r6, align 4
  %v2_aebc = xor i1 %v7_aeb4, true
  %v3_aebc = and i1 %v2_aeb4, %v2_aebc
  br i1 %v3_aebc, label %dec_label_pc_ada4, label %dec_label_pc_aec0

dec_label_pc_aec0:                                ; preds = %dec_label_pc_aea0
  %v1_aec0 = add i32 %v2_aea8, 16
  %v2_aec0 = inttoptr i32 %v1_aec0 to i32*
  %v3_aec0 = load i32, i32* %v2_aec0, align 4
  store i32 %v3_aec0, i32* %r4.global-to-local, align 4
  %v0_aec4 = call i32 @function_e240()
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  %v3_aec8 = load i32, i32* %stack_var_-40, align 4
  %v5_aed0 = mul i32 %v3_aec8, 24
  %v0_aed4 = load i32, i32* %r4.global-to-local, align 4
  %v1_aed8 = load i32, i32* @r8, align 4
  %v2_aed8 = add i32 %v1_aed8, %v5_aed0
  store i32 %v2_aed8, i32* %r1.global-to-local, align 4
  %v1_aedc = and i32 %v0_aed4, 65280
  store i32 %v1_aedc, i32* %r3.global-to-local, align 4
  %v1_aed4 = udiv i32 %v0_aed4, 256
  %v3_aee0 = and i32 %v1_aed4, 65280
  store i32 %v3_aee0, i32* %r2.global-to-local, align 4
  %v3_aee4 = mul i32 %v0_aed4, 16777216
  store i32 %v3_aee4, i32* %ip.global-to-local, align 4
  %v1_aee8 = add i32 %v2_aed8, 20
  %v2_aee8 = inttoptr i32 %v1_aee8 to i8*
  %v3_aee8 = load i8, i8* %v2_aee8, align 1
  %v4_aee8 = zext i8 %v3_aee8 to i32
  %v4_aeec = mul nuw nsw i32 %v1_aedc, 256
  %v5_aeec = or i32 %v4_aeec, %v3_aee4
  store i32 %v5_aeec, i32* %ip.global-to-local, align 4
  %v2_aef4 = call i32 @llvm.bswap.i32(i32 %v0_aed4)
  %v7_aef8 = lshr i32 %v0_aec4, %v4_aee8
  %v8_aef8 = add i32 %v7_aef8, %v2_aef4
  store i32 %v8_aef8, i32* %r2.global-to-local, align 4
  %v3_af04 = mul i32 %v8_aef8, 16777216
  %v1_aefc = mul i32 %v8_aef8, 256
  %v4_af08 = and i32 %v1_aefc, 16711680
  %v5_af08 = or i32 %v4_af08, %v3_af04
  store i32 %v5_af08, i32* %r1.global-to-local, align 4
  store i32 %v6_aa40, i32* %r0.global-to-local, align 4
  %v2_af18 = call i32 @llvm.bswap.i32(i32 %v8_aef8)
  store i32 %v2_af18, i32* %r3.global-to-local, align 4
  store i1 %v7_ada8, i1* %cpsr_z.global-to-local, align 1
  %v1_af20 = load i32, i32* @r5, align 4
  %v2_af20 = add i32 %v1_af20, 16
  %v3_af20 = inttoptr i32 %v2_af20 to i32*
  store i32 %v2_af18, i32* %v3_af20, align 4
  br i1 %v2_ada8, label %dec_label_pc_af28, label %dec_label_pc_adb0

dec_label_pc_af28:                                ; preds = %dec_label_pc_aec0, %dec_label_pc_ada4
  %v0_af28 = call i32 @function_e240()
  store i32 %v0_af28, i32* %r0.global-to-local, align 4
  store i32 %v3_aaac, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af38, i1* %cpsr_z.global-to-local, align 1
  %v1_af3c = load i32, i32* @r5, align 4
  %v2_af3c = add i32 %v1_af3c, 12
  %v3_af3c = inttoptr i32 %v2_af3c to i32*
  store i32 %v0_af28, i32* %v3_af3c, align 4
  br i1 %v3_af38, label %dec_label_pc_af44, label %dec_label_pc_af28.dec_label_pc_adc4_crit_edge

dec_label_pc_af28.dec_label_pc_adc4_crit_edge:    ; preds = %dec_label_pc_af28
  %v1_adc8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_adc4

dec_label_pc_af44:                                ; preds = %dec_label_pc_af28, %dec_label_pc_adb0
  %v0_af44 = call i32 @function_e240()
  %v1_af44 = trunc i32 %v0_af44 to i8
  store i32 %v0_af44, i32* %r0.global-to-local, align 4
  %v4_af4823 = udiv i32 %v0_af44, 256
  %v1_af4c = trunc i32 %v4_af4823 to i8
  %v2_af4c = load i32, i32* @r5, align 4
  %v3_af4c = add i32 %v2_af4c, 5
  %v4_af4c = inttoptr i32 %v3_af4c to i8*
  store i8 %v1_af4c, i8* %v4_af4c, align 1
  store i32 %v3_aac0, i32* %r3.global-to-local, align 4
  %v1_af54 = load i32, i32* @r4, align 4
  %v9_af54 = icmp eq i32 %v3_aac0, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  %v3_af58 = load i32, i32* @r5, align 4
  %v4_af58 = add i32 %v3_af58, 4
  %v5_af58 = inttoptr i32 %v4_af58 to i8*
  store i8 %v1_af44, i8* %v5_af58, align 1
  %v0_af5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af5c, label %dec_label_pc_af60, label %dec_label_pc_af44.dec_label_pc_add0_crit_edge

dec_label_pc_af44.dec_label_pc_add0_crit_edge:    ; preds = %dec_label_pc_af44
  %v1_add4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_add0

dec_label_pc_af60:                                ; preds = %dec_label_pc_af44, %dec_label_pc_adc4
  %v0_af60 = call i32 @function_e240()
  %v1_af60 = trunc i32 %v0_af60 to i8
  store i32 %v0_af60, i32* %r0.global-to-local, align 4
  store i32 %v3_aac4, i32* %ip.global-to-local, align 4
  %v4_af68 = sdiv i32 %v0_af60, 256
  store i32 %v4_af68, i32* %r3.global-to-local, align 4
  %v1_af6c = load i32, i32* @r4, align 4
  %v9_af6c = icmp eq i32 %v3_aac4, %v1_af6c
  store i1 %v9_af6c, i1* %cpsr_z.global-to-local, align 1
  %v3_af70 = load i32, i32* @r5, align 4
  %v4_af70 = add i32 %v3_af70, 20
  %v5_af70 = inttoptr i32 %v4_af70 to i8*
  store i8 %v1_af60, i8* %v5_af70, align 1
  %v0_af74 = load i32, i32* %r3.global-to-local, align 4
  %v1_af74 = trunc i32 %v0_af74 to i8
  %v2_af74 = load i32, i32* @r6, align 4
  %v3_af74 = add i32 %v2_af74, 1
  %v4_af74 = inttoptr i32 %v3_af74 to i8*
  store i8 %v1_af74, i8* %v4_af74, align 1
  %v0_af78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af78, label %dec_label_pc_af7c, label %dec_label_pc_af60.dec_label_pc_addc_crit_edge

dec_label_pc_af60.dec_label_pc_addc_crit_edge:    ; preds = %dec_label_pc_af60
  %v1_ade0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_addc

dec_label_pc_af7c:                                ; preds = %dec_label_pc_af60, %dec_label_pc_add0
  %v0_af7c = call i32 @function_e240()
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v4_af80 = sdiv i32 %v0_af7c, 256
  store i32 %v4_af80, i32* %r3.global-to-local, align 4
  %v3_af84 = load i32, i32* @r6, align 4
  %v4_af84 = add i32 %v3_af84, 2
  %v5_af84 = inttoptr i32 %v4_af84 to i8*
  store i8 %v1_af7c, i8* %v5_af84, align 1
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  %v1_af8c = load i32, i32* @r4, align 4
  %v9_af8c = icmp eq i32 %v6_a97c, %v1_af8c
  store i1 %v9_af8c, i1* %cpsr_z.global-to-local, align 1
  %v0_af90 = load i32, i32* %r3.global-to-local, align 4
  %v1_af90 = trunc i32 %v0_af90 to i8
  %v2_af90 = load i32, i32* @r6, align 4
  %v3_af90 = add i32 %v2_af90, 3
  %v4_af90 = inttoptr i32 %v3_af90 to i8*
  store i8 %v1_af90, i8* %v4_af90, align 1
  %v0_af94 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af94, label %dec_label_pc_af98, label %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge

dec_label_pc_af7c.dec_label_pc_ade8_crit_edge:    ; preds = %dec_label_pc_af7c
  %v1_adec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ade8

dec_label_pc_af98:                                ; preds = %dec_label_pc_af7c, %dec_label_pc_addc
  %v0_af98 = call i32 @function_e240()
  store i32 %v0_af98, i32* %r0.global-to-local, align 4
  store i32 %v6_a994, i32* %r2.global-to-local, align 4
  %v1_afa0 = load i32, i32* @r4, align 4
  %v9_afa0 = icmp eq i32 %v6_a994, %v1_afa0
  store i1 %v9_afa0, i1* %cpsr_z.global-to-local, align 1
  %v1_afa4 = load i32, i32* @r6, align 4
  %v2_afa4 = add i32 %v1_afa4, 4
  %v3_afa4 = inttoptr i32 %v2_afa4 to i32*
  store i32 %v0_af98, i32* %v3_afa4, align 4
  br i1 %v9_afa0, label %dec_label_pc_afac, label %dec_label_pc_adf4

dec_label_pc_afac:                                ; preds = %dec_label_pc_af98, %dec_label_pc_ade8
  %v0_afac = call i32 @function_e240()
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  store i32 %v1_aac8, i32* %r3.global-to-local, align 4
  store i1 %v2_afb4, i1* %cpsr_z.global-to-local, align 1
  %v1_afb8 = load i32, i32* @r6, align 4
  %v2_afb8 = add i32 %v1_afb8, 8
  %v3_afb8 = inttoptr i32 %v2_afb8 to i32*
  store i32 %v0_afac, i32* %v3_afb8, align 4
  br i1 %v2_afb4, label %dec_label_pc_ae00, label %dec_label_pc_afc0

dec_label_pc_afc0:                                ; preds = %dec_label_pc_adf4, %dec_label_pc_afac
  %v0_afc0 = call i32 @function_e240()
  %v1_afc0 = trunc i32 %v0_afc0 to i8
  store i32 %v0_afc0, i32* %r0.global-to-local, align 4
  %v4_afc4 = sdiv i32 %v0_afc0, 256
  store i32 %v4_afc4, i32* %r3.global-to-local, align 4
  %v1_afc8 = trunc i32 %v4_afc4 to i8
  %v2_afc8 = load i32, i32* @r6, align 4
  %v3_afc8 = add i32 %v2_afc8, 19
  %v4_afc8 = inttoptr i32 %v3_afc8 to i8*
  store i8 %v1_afc8, i8* %v4_afc8, align 1
  %v3_afcc = load i32, i32* @r6, align 4
  %v4_afcc = add i32 %v3_afcc, 18
  %v5_afcc = inttoptr i32 %v4_afcc to i8*
  store i8 %v1_afc0, i8* %v5_afcc, align 1
  br label %dec_label_pc_ae00

dec_label_pc_afd4:                                ; preds = %dec_label_pc_ae00, %dec_label_pc_ad88
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_afd8 = call i32 @function_125b0(i32* null)
  store i32 %v2_afd8, i32* %r0.global-to-local, align 4
  store i32 %v2_aa50, i32* %ip.global-to-local, align 4
  %v9_afe0 = icmp eq i32 %v2_aa50, %v2_afd8
  store i1 %v9_afe0, i1* %cpsr_z.global-to-local, align 1
  %v6_afe4 = icmp slt i32 %v2_aa50, %v2_afd8
  br i1 %v6_afe4, label %dec_label_pc_afe8, label %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge

dec_label_pc_afd4.dec_label_pc_ad88_crit_edge:    ; preds = %dec_label_pc_afd4
  %v0_ad8c.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_ad88

dec_label_pc_afe8:                                ; preds = %dec_label_pc_afd4, %dec_label_pc_a880, %dec_label_pc_aff0
  %v29_afec = phi i32 [ %v3_aa64, %dec_label_pc_a880 ], [ %v1_aff4, %dec_label_pc_aff0 ], [ %v2_afd8, %dec_label_pc_afd4 ]
  store i32 %v3_a880, i32* %r4.global-to-local, align 4
  store i32 %v12_a880, i32* %r7.global-to-local, align 4
  ret i32 %v29_afec

dec_label_pc_aff0:                                ; preds = %dec_label_pc_aa74
  %v0_aff0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_aff0, i32* %r0.global-to-local, align 4
  %v1_aff4 = call i32 @function_122e0(i32 %v0_aff0)
  store i32 %v1_aff4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_afe8

; uselistorder directives
  uselistorder i32 %v1_aff4, { 1, 0 }
  uselistorder i32 %v4_afc4, { 1, 0 }
  uselistorder i32 %v0_afc0, { 0, 2, 1 }
  uselistorder i32 %v0_af60, { 0, 2, 1 }
  uselistorder i32 %v0_af44, { 0, 2, 1 }
  uselistorder i32 %v2_af18, { 1, 0 }
  uselistorder i32 %v8_aef8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_aee4, { 1, 0 }
  uselistorder i32 %v0_aed4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_ae90, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_ae38, { 0, 2, 1 }
  uselistorder i32 %v0_ae20, { 1, 0, 2 }
  uselistorder i1 %v2_afb4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_af38, { 3, 2, 0, 1 }
  uselistorder i1 %v7_ada8, { 2, 1, 0 }
  uselistorder i32 %v1_ad78, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ad24, { 1, 0 }
  uselistorder i32 %v3_ab7c, { 1, 0 }
  uselistorder i32 %v3_ab78, { 1, 0 }
  uselistorder i32 %v1_ab74, { 1, 0 }
  uselistorder i32 %v1_ab6c, { 1, 0 }
  uselistorder i32 %v3_ab4c, { 1, 0 }
  uselistorder i32 %v1_ab40, { 1, 0 }
  uselistorder i32 %v1_ab3c, { 1, 0 }
  uselistorder i32 %v1_ab38, { 1, 0 }
  uselistorder i32 %v1_ab30, { 1, 0 }
  uselistorder i32 %v1_aafc, { 1, 0 }
  uselistorder i32 %v0_aad0, { 1, 0, 2 }
  uselistorder i32 %v1_aac8, { 2, 1, 3, 0 }
  uselistorder i32 %v3_aaac, { 1, 0, 2 }
  uselistorder i32 %v3_aaa0, { 2, 0, 1 }
  uselistorder i1 %v7_aa94, { 1, 0 }
  uselistorder i1 %v7_aa68, { 1, 0 }
  uselistorder i32 %v3_aa64, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_aa50, { 2, 1, 0 }
  uselistorder i32 %v6_aa40, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_a994, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a97c, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v6_a944, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a92c, { 1, 2, 0 }
  uselistorder i32 %v7_a8e8, { 1, 0, 2 }
  uselistorder i32 %v6_a8c4, { 1, 2, 0 }
  uselistorder i32 %v1_a884, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_afe8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_afc0, { 1, 0 }
  uselistorder label %dec_label_pc_ae00, { 2, 1, 0 }
  uselistorder label %bb75, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b000(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b000:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_b004 = urem i32 %arg2, 256
  store i32 %v1_b004, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_b004, i32* %r0.global-to-local, align 4
  %v1_b018 = urem i32 %arg4, 256
  store i32 %v1_b018, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_b024 = call i32 @function_12ee8(i32 %v1_b004, i32 4)
  %v0_b030 = load i32, i32* @sl, align 4
  store i32 %v0_b030, i32* %r0.global-to-local, align 4
  %v2_b034 = call i32 @function_12ee8(i32 %v0_b030, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_b040 = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b034, i32* @sb, align 4
  %v0_b050 = load i32, i32* @r4, align 4
  store i32 %v0_b050, i32* %r0.global-to-local, align 4
  %v5_b054 = inttoptr i32 %v0_b040 to i32*
  %v6_b054 = call i32 @function_829c(i32 %v0_b050, i32* %v5_b054, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b058 = load i32, i32* @r5, align 4
  %v0_b064 = load i32, i32* @r6, align 4
  store i32 %v0_b064, i32* %r3.global-to-local, align 4
  %v0_b068 = load i32, i32* @r4, align 4
  store i32 %v0_b068, i32* %r0.global-to-local, align 4
  %v3_b06c = urem i32 %v6_b054, 65536
  store i32 %v3_b06c, i32* @fp, align 4
  %v5_b070 = inttoptr i32 %v0_b058 to i32*
  %v6_b070 = call i32 @function_829c(i32 %v0_b068, i32* %v5_b070, i32 6, i32 %v0_b064, i32 ptrtoint (i32* @0 to i32))
  %v0_b074 = load i32, i32* @r5, align 4
  %v3_b078 = mul i32 %v6_b070, 65536
  store i32 %v3_b078, i32* @r8, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b084 = load i32, i32* @r4, align 4
  store i32 %v0_b084, i32* %r0.global-to-local, align 4
  %v5_b088 = inttoptr i32 %v0_b074 to i32*
  %v6_b088 = call i32 @function_829c(i32 %v0_b084, i32* %v5_b088, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_b098 = urem i32 %v6_b088, 65536
  %v0_b09c = load i32, i32* @r5, align 4
  %v0_b0a0 = load i32, i32* @r4, align 4
  store i32 %v0_b0a0, i32* %r0.global-to-local, align 4
  %v5_b0a8 = inttoptr i32 %v0_b09c to i32*
  %v6_b0a8 = call i32 @function_829c(i32 %v0_b0a0, i32* %v5_b0a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b0b4 = urem i32 %v6_b0a8, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_b0d0 = call i32 @function_125b0(i32* null)
  %v0_b0d4 = load i32, i32* @r8, align 4
  %v3_b0d4 = udiv i32 %v0_b0d4, 65536
  store i32 %v3_b0d4, i32* %r3.global-to-local, align 4
  %v1_b0d8 = load i32, i32* @r6, align 4
  %v9_b0d8 = icmp eq i32 %v3_b0d4, %v1_b0d8
  %v1_b0e04 = load i32, i32* @r7, align 4
  %v2_b0e05 = add i32 %v1_b0e04, %v2_b0d0
  store i32 %v2_b0e05, i32* %r0.global-to-local, align 4
  br i1 %v9_b0d8, label %dec_label_pc_b2bc, label %bb

bb:                                               ; preds = %dec_label_pc_b000
  %v2_b0dc = mul nuw nsw i32 %v3_b0d4, 256
  %v4_b0e4 = and i32 %v2_b0dc, 65280
  store i32 %v4_b0e4, i32* %r3.global-to-local, align 4
  %v5_b0ec = udiv i32 %v0_b0d4, 16777216
  %v6_b0ec = or i32 %v4_b0e4, %v5_b0ec
  br label %dec_label_pc_b0f4

dec_label_pc_b0f4:                                ; preds = %bb, %dec_label_pc_b2bc
  %storemerge = phi i32 [ %v6_b0ec, %bb ], [ %v3_b2c4, %dec_label_pc_b2bc ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_b0f4 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_b0f4, 1
  br i1 %tmp47, label %dec_label_pc_b28c, label %dec_label_pc_b0fc

dec_label_pc_b0fc:                                ; preds = %dec_label_pc_b0f4
  %v0_b0fc = load i32, i32* @fp, align 4
  %v3_b0fc = udiv i32 %v0_b0fc, 256
  %v1_b100 = mul i32 %v0_b0fc, 256
  %v4_b104 = and i32 %v1_b100, 65280
  %v5_b104 = or i32 %v4_b104, %v3_b0fc
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v5_b114 = trunc i32 %v3_b0fc to i8
  %v3_b11c3 = udiv i32 %v5_b104, 256
  store i32 %v3_b11c3, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_b128 = trunc i32 %v3_b11c3 to i8
  store i8 %v4_b128, i8* %stack_var_-84, align 1
  %v3_b1cc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_b150

dec_label_pc_b130:                                ; preds = %dec_label_pc_b1b4
  %v0_b130 = load i32, i32* @r6, align 4
  %v1_b130 = load i32, i32* @sb, align 4
  %v2_b130 = add i32 %v1_b130, %v0_b130
  %v3_b130 = inttoptr i32 %v2_b130 to i32*
  %v4_b130 = load i32, i32* %v3_b130, align 4
  store i32 %v4_b130, i32* %r0.global-to-local, align 4
  %v3_b13c = inttoptr i32 %v0_b1d0 to %sockaddr*
  %v4_b13c = call i32 @function_12a58(i32 %v4_b130, %sockaddr* %v3_b13c, i32 16)
  store i32 %v4_b13c, i32* %r0.global-to-local, align 4
  %v0_b140 = load i32, i32* @r8, align 4
  %v1_b140 = load i32, i32* @sl, align 4
  %v9_b140 = icmp eq i32 %v0_b140, %v1_b140
  %v0_b144 = load i32, i32* @r6, align 4
  %v1_b144 = add i32 %v0_b144, 4
  store i32 %v1_b144, i32* @r6, align 4
  %v0_b148 = load i32, i32* @r5, align 4
  %v1_b148 = add i32 %v0_b148, 24
  store i32 %v1_b148, i32* @r5, align 4
  br i1 %v9_b140, label %dec_label_pc_b248, label %dec_label_pc_b150

dec_label_pc_b150:                                ; preds = %dec_label_pc_b1dc, %dec_label_pc_b130, %dec_label_pc_b0fc
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_b15c = call i32 @function_12ee8(i32 65535, i32 1)
  store i32 %v2_b15c, i32* %r0.global-to-local, align 4
  store i32 %v2_b024, i32* %r3.global-to-local, align 4
  %v0_b168 = load i32, i32* @fp, align 4
  %v9_b168 = icmp eq i32 %v0_b168, 65535
  %v1_b16c = load i32, i32* @r6, align 4
  %v3_b16c = add i32 %v1_b16c, %v2_b024
  %v4_b16c = inttoptr i32 %v3_b16c to i32*
  store i32 %v2_b15c, i32* %v4_b16c, align 4
  br i1 %v9_b168, label %dec_label_pc_b2a8, label %dec_label_pc_b174

dec_label_pc_b174:                                ; preds = %dec_label_pc_b150
  %v2_b178 = load i8, i8* %stack_var_-84, align 1
  %v3_b178 = sext i8 %v2_b178 to i32
  store i32 %v3_b178, i32* %r3.global-to-local, align 4
  %v2_b17c = load i32, i32* @r5, align 4
  %v3_b17c = add i32 %v2_b17c, 2
  %v4_b17c = inttoptr i32 %v3_b17c to i8*
  store i8 %v5_b114, i8* %v4_b17c, align 1
  %v0_b180 = load i32, i32* %r3.global-to-local, align 4
  %v1_b180 = trunc i32 %v0_b180 to i8
  %v2_b180 = load i32, i32* @r5, align 4
  %v3_b180 = add i32 %v2_b180, 3
  %v4_b180 = inttoptr i32 %v3_b180 to i8*
  store i8 %v1_b180, i8* %v4_b180, align 1
  br label %dec_label_pc_b184

dec_label_pc_b184:                                ; preds = %dec_label_pc_b2a8, %dec_label_pc_b174
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b190 = call i32 @function_12bfc(i32 2, i32 2, i32 17)
  store i32 %v3_b190, i32* %r0.global-to-local, align 4
  %v7_b194 = icmp eq i32 %v3_b190, -1
  %v0_b198 = load i32, i32* @r8, align 4
  %v1_b198 = add i32 %v0_b198, 1
  store i32 %v1_b198, i32* @r8, align 4
  store i32 0, i32* @lr, align 4
  %v1_b1ac = load i32, i32* @r6, align 4
  %v2_b1ac = load i32, i32* @sb, align 4
  %v3_b1ac = add i32 %v2_b1ac, %v1_b1ac
  %v4_b1ac = inttoptr i32 %v3_b1ac to i32*
  store i32 %v3_b190, i32* %v4_b1ac, align 4
  br i1 %v7_b194, label %dec_label_pc_b2a0.loopexit, label %dec_label_pc_b1b4

dec_label_pc_b1b4:                                ; preds = %dec_label_pc_b184
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v0_b1cc = load i32, i32* %r0.global-to-local, align 4
  %v4_b1cc = call i32 @function_12a2c(i32 %v0_b1cc, %sockaddr* %v3_b1cc, i32 16)
  store i32 %v4_b1cc, i32* %r0.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r5, align 4
  %v1_b1d0 = add i32 %v0_b1d0, 20
  %v2_b1d0 = inttoptr i32 %v1_b1d0 to i8*
  %v3_b1d0 = load i8, i8* %v2_b1d0, align 1
  %v4_b1d0 = zext i8 %v3_b1d0 to i32
  store i32 %v4_b1d0, i32* %r3.global-to-local, align 4
  %tmp51 = icmp ugt i8 %v3_b1d0, 31
  br i1 %tmp51, label %dec_label_pc_b130, label %dec_label_pc_b1dc

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b1b4
  %v1_b1dc = add i32 %v0_b1d0, 16
  %v2_b1dc = inttoptr i32 %v1_b1dc to i32*
  %v3_b1dc = load i32, i32* %v2_b1dc, align 4
  store i32 %v3_b1dc, i32* @r4, align 4
  %v0_b1e0 = call i32 @function_e240()
  store i32 %v0_b1e0, i32* %r0.global-to-local, align 4
  %v0_b1e4 = load i32, i32* @r4, align 4
  %v1_b1e8 = and i32 %v0_b1e4, 65280
  store i32 %v1_b1e8, i32* %r3.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r5, align 4
  %v1_b1f8 = add i32 %v0_b1f8, 20
  %v2_b1f8 = inttoptr i32 %v1_b1f8 to i8*
  %v3_b1f8 = load i8, i8* %v2_b1f8, align 1
  %v4_b1f8 = zext i8 %v3_b1f8 to i32
  %v2_b200 = call i32 @llvm.bswap.i32(i32 %v0_b1e4)
  %v7_b204 = lshr i32 %v0_b1e0, %v4_b1f8
  %v8_b204 = add i32 %v7_b204, %v2_b200
  %v1_b20c = and i32 %v8_b204, 65280
  store i32 %v1_b20c, i32* %r0.global-to-local, align 4
  %v2_b220 = call i32 @llvm.bswap.i32(i32 %v8_b204)
  store i32 %v2_b220, i32* %r3.global-to-local, align 4
  %v2_b224 = add i32 %v0_b1f8, 4
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v2_b220, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* @r5, align 4
  %v0_b22c = load i32, i32* @r6, align 4
  %v1_b22c = load i32, i32* @sb, align 4
  %v2_b22c = add i32 %v1_b22c, %v0_b22c
  %v3_b22c = inttoptr i32 %v2_b22c to i32*
  %v4_b22c = load i32, i32* %v3_b22c, align 4
  store i32 %v4_b22c, i32* %r0.global-to-local, align 4
  %v3_b234 = inttoptr i32 %v0_b228 to %sockaddr*
  %v4_b234 = call i32 @function_12a58(i32 %v4_b22c, %sockaddr* %v3_b234, i32 16)
  store i32 %v4_b234, i32* %r0.global-to-local, align 4
  %v0_b238 = load i32, i32* @r8, align 4
  %v1_b238 = load i32, i32* @sl, align 4
  %v9_b238 = icmp eq i32 %v0_b238, %v1_b238
  %v0_b23c = load i32, i32* @r6, align 4
  %v1_b23c = add i32 %v0_b23c, 4
  store i32 %v1_b23c, i32* @r6, align 4
  %v0_b240 = load i32, i32* @r5, align 4
  %v1_b240 = add i32 %v0_b240, 24
  store i32 %v1_b240, i32* @r5, align 4
  br i1 %v9_b238, label %dec_label_pc_b248, label %dec_label_pc_b150

dec_label_pc_b248:                                ; preds = %dec_label_pc_b1dc, %dec_label_pc_b130, %dec_label_pc_b28c.dec_label_pc_b248_crit_edge
  %v0_b248 = phi i32 [ %v0_b248.pre, %dec_label_pc_b28c.dec_label_pc_b248_crit_edge ], [ %v0_b238, %dec_label_pc_b1dc ], [ %v0_b140, %dec_label_pc_b130 ]
  %tmp48 = icmp slt i32 %v0_b248, 1
  br i1 %tmp48, label %dec_label_pc_b28c, label %dec_label_pc_b250

dec_label_pc_b250:                                ; preds = %dec_label_pc_b248
  %v2_b254 = icmp eq i32 %v1_b0b4, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_b254, label %dec_label_pc_b25c, label %dec_label_pc_b2cc

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b250
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b264

dec_label_pc_b264:                                ; preds = %dec_label_pc_b264, %dec_label_pc_b25c
  %v0_b270 = phi i32 [ %v1_b270, %dec_label_pc_b264 ], [ 0, %dec_label_pc_b25c ]
  %v0_b268 = phi i32 [ %v1_b284, %dec_label_pc_b264 ], [ 0, %dec_label_pc_b25c ]
  store i32 %v2_b024, i32* %r3.global-to-local, align 4
  %v1_b268 = load i32, i32* @sb, align 4
  %v2_b268 = add i32 %v1_b268, %v0_b268
  %v3_b268 = inttoptr i32 %v2_b268 to i32*
  %v4_b268 = load i32, i32* %v3_b268, align 4
  store i32 %v4_b268, i32* %r0.global-to-local, align 4
  %v2_b26c = add i32 %v0_b268, %v2_b024
  %v3_b26c = inttoptr i32 %v2_b26c to i32*
  %v4_b26c = load i32, i32* %v3_b26c, align 4
  %v1_b270 = add i32 %v0_b270, 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b27c = inttoptr i32 %v4_b26c to i32*
  %v5_b27c = call i32 @function_12b6c(i32 %v4_b268, i32* %v4_b27c, i32 %v3_b098, i32 16384)
  store i32 %v5_b27c, i32* %r0.global-to-local, align 4
  %v1_b280 = load i32, i32* @sl, align 4
  %v9_b280 = icmp eq i32 %v1_b270, %v1_b280
  %v0_b284 = load i32, i32* @r4, align 4
  %v1_b284 = add i32 %v0_b284, 4
  store i32 %v1_b284, i32* @r4, align 4
  br i1 %v9_b280, label %dec_label_pc_b28c, label %dec_label_pc_b264

dec_label_pc_b28c:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b264, %dec_label_pc_b248, %dec_label_pc_b0f4
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b290 = call i32 @function_125b0(i32* null)
  store i32 %v2_b290, i32* %r0.global-to-local, align 4
  store i32 %v2_b0e05, i32* %r3.global-to-local, align 4
  %v6_b29c = icmp slt i32 %v2_b0e05, %v2_b290
  br i1 %v6_b29c, label %dec_label_pc_b2a0, label %dec_label_pc_b28c.dec_label_pc_b248_crit_edge

dec_label_pc_b28c.dec_label_pc_b248_crit_edge:    ; preds = %dec_label_pc_b28c
  %v0_b248.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_b248

dec_label_pc_b2a0.loopexit:                       ; preds = %dec_label_pc_b184
  %v29_b2a4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b2a0

dec_label_pc_b2a0:                                ; preds = %dec_label_pc_b2a0.loopexit, %dec_label_pc_b28c
  %v29_b2a4 = phi i32 [ %v29_b2a4.pre, %dec_label_pc_b2a0.loopexit ], [ %v2_b290, %dec_label_pc_b28c ]
  ret i32 %v29_b2a4

dec_label_pc_b2a8:                                ; preds = %dec_label_pc_b150
  %v0_b2a8 = call i32 @function_e240()
  %v1_b2a8 = trunc i32 %v0_b2a8 to i8
  store i32 %v0_b2a8, i32* %r0.global-to-local, align 4
  %v4_b2ac = sdiv i32 %v0_b2a8, 256
  store i32 %v4_b2ac, i32* %r3.global-to-local, align 4
  %v1_b2b0 = trunc i32 %v4_b2ac to i8
  %v2_b2b0 = load i32, i32* @r5, align 4
  %v3_b2b0 = add i32 %v2_b2b0, 3
  %v4_b2b0 = inttoptr i32 %v3_b2b0 to i8*
  store i8 %v1_b2b0, i8* %v4_b2b0, align 1
  %v3_b2b4 = load i32, i32* @r5, align 4
  %v4_b2b4 = add i32 %v3_b2b4, 2
  %v5_b2b4 = inttoptr i32 %v4_b2b4 to i8*
  store i8 %v1_b2a8, i8* %v5_b2b4, align 1
  br label %dec_label_pc_b184

dec_label_pc_b2bc:                                ; preds = %dec_label_pc_b000
  %v0_b2bc = call i32 @function_e240()
  %v3_b2c0 = mul i32 %v0_b2bc, 65536
  store i32 %v3_b2c0, i32* %r0.global-to-local, align 4
  %v3_b2c4 = urem i32 %v0_b2bc, 65536
  br label %dec_label_pc_b0f4

dec_label_pc_b2cc:                                ; preds = %dec_label_pc_b250
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_b2d4

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b2cc
  %v0_b2d8 = phi i32 [ %v1_b310, %dec_label_pc_b2d4 ], [ 0, %dec_label_pc_b2cc ]
  %v2_b2d8 = add i32 %v0_b2d8, %v2_b024
  %v3_b2d8 = inttoptr i32 %v2_b2d8 to i32*
  %v4_b2d8 = load i32, i32* %v3_b2d8, align 4
  store i32 %v4_b2d8, i32* @r4, align 4
  store i32 %v4_b2d8, i32* %r0.global-to-local, align 4
  %v2_b2e4 = call i32 @function_e2f4(i32 %v4_b2d8, i32 %v3_b098)
  store i32 %v2_b2e4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2f0 = load i32, i32* @r4, align 4
  %v4_b2f0 = add i32 %v2_b2f0, %v3_b098
  %v5_b2f0 = inttoptr i32 %v4_b2f0 to i8*
  store i8 0, i8* %v5_b2f0, align 1
  %v0_b2f4 = load i32, i32* @r4, align 4
  %v0_b2f8 = load i32, i32* @r6, align 4
  %v1_b2f8 = load i32, i32* @sb, align 4
  %v2_b2f8 = add i32 %v1_b2f8, %v0_b2f8
  %v3_b2f8 = inttoptr i32 %v2_b2f8 to i32*
  %v4_b2f8 = load i32, i32* %v3_b2f8, align 4
  store i32 %v4_b2f8, i32* %r0.global-to-local, align 4
  %v0_b2fc = load i32, i32* @r5, align 4
  %v1_b2fc = add i32 %v0_b2fc, 1
  store i32 %v1_b2fc, i32* @r5, align 4
  %v0_b304 = load i32, i32* %r3.global-to-local, align 4
  %v1_b304 = add i32 %v0_b304, 16384
  store i32 %v1_b304, i32* %r3.global-to-local, align 4
  %v4_b308 = inttoptr i32 %v0_b2f4 to i32*
  %v5_b308 = call i32 @function_12b6c(i32 %v4_b2f8, i32* %v4_b308, i32 %v3_b098, i32 %v1_b304)
  store i32 %v5_b308, i32* %r0.global-to-local, align 4
  %v0_b30c = load i32, i32* @r5, align 4
  %v1_b30c = load i32, i32* @sl, align 4
  %v9_b30c = icmp eq i32 %v0_b30c, %v1_b30c
  %v0_b310 = load i32, i32* @r6, align 4
  %v1_b310 = add i32 %v0_b310, 4
  store i32 %v1_b310, i32* @r6, align 4
  br i1 %v9_b30c, label %dec_label_pc_b28c, label %dec_label_pc_b2d4

; uselistorder directives
  uselistorder i32 %v1_b310, { 1, 0 }
  uselistorder i32 %v0_b2bc, { 1, 0 }
  uselistorder i32 %v4_b2ac, { 1, 0 }
  uselistorder i32 %v0_b2a8, { 0, 2, 1 }
  uselistorder i32 %v1_b284, { 1, 0 }
  uselistorder i32 %v2_b220, { 1, 0 }
  uselistorder i32 %v0_b1d0, { 1, 2, 0 }
  uselistorder i32 %v3_b190, { 1, 0, 2 }
  uselistorder i32 %v3_b0d4, { 0, 2, 1 }
  uselistorder i32 %v3_b098, { 2, 3, 1, 0 }
  uselistorder i32 %v2_b024, { 0, 1, 4, 2, 3 }
  uselistorder i32 %v1_b004, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 20, 9, 8, 31, 10, 13, 11, 12, 14, 17, 19, 21, 18, 23, 22, 16, 15, 1, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder label %dec_label_pc_b248, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b0f4, { 1, 0 }
}

define i32 @function_b31c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b31c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_b31c = load i32, i32* @sb, align 4
  %v21_b31c = load i32, i32* @sl, align 4
  %v1_b320 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_b320, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b33c = urem i32 %arg4, 256
  store i32 %v1_b33c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b34c = call i32 @function_12ee8(i32 %v1_b320, i32 4)
  %v0_b350 = load i32, i32* @r5, align 4
  store i32 %v0_b350, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b35c = load i32, i32* @r7, align 4
  store i32 %v0_b35c, i32* %r3.global-to-local, align 4
  %v0_b360 = load i32, i32* @r4, align 4
  store i32 %v0_b360, i32* %r0.global-to-local, align 4
  %v5_b364 = inttoptr i32 %v0_b350 to i32*
  %v6_b364 = call i32 @function_829c(i32 %v0_b360, i32* %v5_b364, i32 2, i32 %v0_b35c, i32 %v2_b34c)
  %v1_b370 = urem i32 %v6_b364, 256
  store i32 %v1_b370, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b37c = load i32, i32* @r5, align 4
  store i32 %v0_b37c, i32* %r1.global-to-local, align 4
  %v0_b380 = load i32, i32* @r4, align 4
  store i32 %v0_b380, i32* %r0.global-to-local, align 4
  %v5_b384 = trunc i32 %v6_b364 to i8
  %v6_b388 = inttoptr i32 %v0_b37c to i32*
  %v7_b388 = call i32 @function_829c(i32 %v0_b380, i32* %v6_b388, i32 3, i32 65535, i32 %v6_b364)
  %v0_b38c = load i32, i32* @r5, align 4
  store i32 %v0_b38c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b39c = load i32, i32* @r4, align 4
  store i32 %v0_b39c, i32* %r0.global-to-local, align 4
  %v5_b3a0 = inttoptr i32 %v0_b38c to i32*
  %v6_b3a0 = call i32 @function_829c(i32 %v0_b39c, i32* %v5_b3a0, i32 4, i32 64, i32 %v7_b388)
  %v1_b3a8 = urem i32 %v6_b3a0, 256
  store i32 %v1_b3a8, i32* %ip.global-to-local, align 4
  %v0_b3ac = load i32, i32* @r5, align 4
  store i32 %v0_b3ac, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r7, align 4
  store i32 %v0_b3b4, i32* %r3.global-to-local, align 4
  %v0_b3b8 = load i32, i32* @r4, align 4
  store i32 %v0_b3b8, i32* %r0.global-to-local, align 4
  %v5_b3bc = trunc i32 %v6_b3a0 to i8
  %v6_b3c0 = inttoptr i32 %v0_b3ac to i32*
  %v7_b3c0 = call i32 @function_829c(i32 %v0_b3b8, i32* %v6_b3c0, i32 5, i32 %v0_b3b4, i32 %v6_b3a0)
  %v1_b3cc = urem i32 %v7_b3c0, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r5, align 4
  store i32 %v0_b3d8, i32* %r1.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e4 = inttoptr i32 %v0_b3d8 to i32*
  %v6_b3e4 = call i32 @function_829c(i32 %v0_b3dc, i32* %v5_b3e4, i32 6, i32 65535, i32 %v1_b3cc)
  %v0_b3f0 = load i32, i32* @r5, align 4
  store i32 %v0_b3f0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r4, align 4
  store i32 %v0_b3fc, i32* %r0.global-to-local, align 4
  %v5_b400 = inttoptr i32 %v0_b3f0 to i32*
  %v6_b400 = call i32 @function_829c(i32 %v0_b3fc, i32* %v5_b400, i32 7, i32 65535, i32 %v6_b3e4)
  %v0_b404 = load i32, i32* @r5, align 4
  store i32 %v0_b404, i32* %r1.global-to-local, align 4
  %v0_b408 = load i32, i32* @r7, align 4
  store i32 %v0_b408, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b400, i32* %sb.global-to-local, align 4
  %v0_b414 = load i32, i32* @r4, align 4
  store i32 %v0_b414, i32* %r0.global-to-local, align 4
  %v5_b418 = inttoptr i32 %v0_b404 to i32*
  %v6_b418 = call i32 @function_829c(i32 %v0_b414, i32* %v5_b418, i32 %v0_b408, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b424 = load i32, i32* @r5, align 4
  store i32 %v0_b424, i32* %r1.global-to-local, align 4
  store i32 %v6_b418, i32* @sl, align 4
  %v0_b42c = load i32, i32* @r4, align 4
  store i32 %v0_b42c, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b424 to i32*
  %v6_b430 = call i32 @function_829c(i32 %v0_b42c, i32* %v5_b430, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b43c = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_b43c, i32* %r3.global-to-local, align 4
  %v1_b440 = urem i32 %v6_b430, 256
  store i32 %v1_b440, i32* %ip.global-to-local, align 4
  %v0_b444 = load i32, i32* @r5, align 4
  store i32 %v0_b444, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_b44c = load i32, i32* @r4, align 4
  store i32 %v0_b44c, i32* %r0.global-to-local, align 4
  %v5_b454 = inttoptr i32 %v0_b444 to i32*
  %v6_b454 = call i32 @function_829c(i32 %v0_b44c, i32* %v5_b454, i32 19, i32 %v2_b43c, i32 %v1_b440)
  store i32 %v6_b454, i32* @fp, align 4
  %v0_b45c = load i32, i32* @r7, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v1_b460 = inttoptr i32 %v0_b45c to i32*
  %v2_b460 = call i32 @function_125b0(i32* %v1_b460)
  %v1_b464 = load i32, i32* @r6, align 4
  %v2_b464 = add i32 %v1_b464, %v2_b460
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b478 = call i32 @function_12bfc(i32 2, i32 3, i32 17)
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v7_b47c = icmp eq i32 %v3_b478, -1
  store i1 %v7_b47c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b47c, label %dec_label_pc_b89c, label %dec_label_pc_b488

dec_label_pc_b488:                                ; preds = %dec_label_pc_b31c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b490 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b490, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b498 = load i32, i32* @r7, align 4
  store i32 %v0_b498, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b4a4 = call i32 @function_12bcc(i32 %v3_b478, i32 %v0_b498, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b4a4, i32* %r0.global-to-local, align 4
  %v7_b4a8 = icmp eq i32 %v6_b4a4, -1
  store i1 %v7_b4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4a8, label %dec_label_pc_b8a4, label %dec_label_pc_b4b0

dec_label_pc_b4b0:                                ; preds = %dec_label_pc_b488
  %v0_b4b0 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_b4bc = urem i32 %v0_b4b0, 65536
  store i32 %v3_b4bc, i32* %r2.global-to-local, align 4
  %v3_b4c0 = icmp ugt i32 %v3_b4bc, 1459
  %v9_b4c0 = icmp eq i32 %v3_b4bc, 1460
  store i1 %v9_b4c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4c0, label %bb, label %bb54

bb:                                               ; preds = %dec_label_pc_b4b0
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_b4b0, %bb
  %v0_b4c8 = phi i32 [ %v3_b4bc, %dec_label_pc_b4b0 ], [ 1460, %bb ]
  store i32 %v7_b388, i32* %r1.global-to-local, align 4
  store i32 %v6_b3e4, i32* %r2.global-to-local, align 4
  store i32 %v1_b320, i32* %r3.global-to-local, align 4
  %v0_b4d8 = load i32, i32* %sb.global-to-local, align 4
  %v3_b4e0 = mul i32 %v6_b3e4, 65536
  store i32 %v3_b4e0, i32* %sl.global-to-local, align 4
  %v3_b4e4 = urem i32 %v7_b388, 65536
  store i32 %v3_b4e4, i32* @r4, align 4
  %v3_b4e8 = urem i32 %v6_b3e4, 65536
  store i32 %v3_b4e8, i32* %sb.global-to-local, align 4
  %v3_b4ec = urem i32 %v0_b4d8, 65536
  store i32 %v3_b4ec, i32* %ip.global-to-local, align 4
  %v2_b4f0 = icmp eq i32 %v1_b320, 0
  store i1 %v2_b4f0, i1* %cpsr_z.global-to-local, align 1
  %v0_b4f4 = load i32, i32* @r7, align 4
  store i32 %v0_b4f4, i32* %stack_var_-40, align 4
  br i1 %v2_b4f0, label %.dec_label_pc_b65c.preheader_crit_edge, label %dec_label_pc_b508

.dec_label_pc_b65c.preheader_crit_edge:           ; preds = %bb54
  %.pre = add nuw nsw i32 %v0_b4c8, 8
  %.pre16 = add nuw nsw i32 %v0_b4c8, 28
  br label %dec_label_pc_b65c.preheader

dec_label_pc_b508:                                ; preds = %bb54
  %v1_b50c = add nuw nsw i32 %v0_b4c8, 28
  %v1_b510 = add nuw nsw i32 %v0_b4c8, 8
  %v3_b518 = mul i32 %v1_b510, 65536
  store i32 %v3_b518, i32* @lr, align 4
  %tmp55 = mul nuw nsw i32 %v1_b50c, 256
  %v1_b520 = urem i32 %v7_b388, 256
  %v1_b524 = urem i32 %v6_b3e4, 256
  %tmp56 = mul nuw nsw i32 %v1_b510, 256
  %v1_b534 = and i32 %tmp55, 65280
  store i32 %v1_b534, i32* %r3.global-to-local, align 4
  %v3_b538 = mul nuw nsw i32 %v1_b520, 256
  store i32 %v3_b538, i32* %r2.global-to-local, align 4
  %v3_b53c = mul nuw nsw i32 %v1_b524, 256
  store i32 %v3_b53c, i32* %r1.global-to-local, align 4
  %tmp57 = udiv i32 %v0_b4d8, 256
  %v3_b540 = urem i32 %tmp57, 256
  %v1_b544 = and i32 %tmp56, 65280
  store i32 %v1_b544, i32* %ip.global-to-local, align 4
  %v2_b548 = icmp eq i32 %v1_b3cc, 0
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  %tmp58 = udiv i32 %v1_b50c, 256
  %v4_b54c = urem i32 %tmp58, 256
  %v5_b54c = or i32 %v4_b54c, %v1_b534
  store i32 %v5_b54c, i32* %r0.global-to-local, align 4
  %v1_b550 = urem i32 %v0_b4d8, 256
  %tmp59 = udiv i32 %v7_b388, 256
  %tmp60 = udiv i32 %v6_b3e4, 256
  %v4_b558 = urem i32 %tmp60, 256
  %v5_b558 = or i32 %v4_b558, %v3_b53c
  store i32 %v5_b558, i32* %sb.global-to-local, align 4
  %v5_b55c = trunc i32 %tmp58 to i8
  %v5_b560 = trunc i32 %tmp59 to i8
  %v4_b564 = mul nuw nsw i32 %v1_b550, 256
  %v5_b564 = or i32 %v4_b564, %v3_b540
  store i32 %v5_b564, i32* @r5, align 4
  %tmp61 = udiv i32 %v1_b510, 256
  %v4_b568 = urem i32 %tmp61, 256
  %v5_b568 = or i32 %v4_b568, %v1_b544
  store i32 %v5_b568, i32* %sl.global-to-local, align 4
  br i1 %v2_b548, label %dec_label_pc_b570, label %dec_label_pc_b8b0

dec_label_pc_b570:                                ; preds = %dec_label_pc_b508
  store i32 %v1_b520, i32* %r1.global-to-local, align 4
  %v3_b57419 = udiv i32 %v1_b534, 256
  store i32 %v3_b57419, i32* %ip.global-to-local, align 4
  store i32 %v1_b524, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v5_b580 = trunc i32 %v3_b57419 to i8
  %v5_b584 = trunc i32 %v7_b388 to i8
  store i32 %v1_b550, i32* @r7, align 4
  %v3_b59020 = udiv i32 %v1_b544, 256
  store i32 %v3_b59020, i32* @r6, align 4
  %v4_b60c = sext i8 %v5_b560 to i32
  %sext9 = mul i32 %v6_b3e4, 16777216
  %v7_b62c = sdiv i32 %sext9, 16777216
  %v3_b62c = sext i8 %v5_b584 to i32
  br label %dec_label_pc_b594

dec_label_pc_b594:                                ; preds = %dec_label_pc_b594, %dec_label_pc_b570
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b5a0 = call i32 @function_12ee8(i32 1510, i32 1)
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b34c, i32* %r3.global-to-local, align 4
  %v3_b5a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5a8, i32* %r2.global-to-local, align 4
  %v2_b5ac = load i32, i32* @r4, align 4
  %v5_b5ac = mul i32 %v2_b5ac, 4
  %v6_b5ac = add i32 %v5_b5ac, %v2_b34c
  %v7_b5ac = inttoptr i32 %v6_b5ac to i32*
  store i32 %v2_b5a0, i32* %v7_b5ac, align 4
  %v0_b5b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b5b0 = load i32, i32* %r2.global-to-local, align 4
  %v4_b5b0 = mul i32 %v1_b5b0, 4
  %v5_b5b0 = add i32 %v4_b5b0, %v0_b5b0
  %v6_b5b0 = inttoptr i32 %v5_b5b0 to i32*
  %v7_b5b0 = load i32, i32* %v6_b5b0, align 4
  store i32 %v7_b5b0, i32* %r1.global-to-local, align 4
  %v1_b5b4 = inttoptr i32 %v7_b5b0 to i8*
  %v2_b5b4 = load i8, i8* %v1_b5b4, align 1
  %tmp = urem i8 %v2_b5b4, 16
  %v1_b5b8 = zext i8 %tmp to i32
  %v1_b5bc = or i32 %v1_b5b8, 64
  store i32 %v1_b5bc, i32* %r3.global-to-local, align 4
  %v1_b5c0 = trunc i32 %v1_b5bc to i8
  store i8 %v1_b5c0, i8* %v1_b5b4, align 1
  %v0_b5c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b5c4 = inttoptr i32 %v0_b5c4 to i8*
  %v2_b5c4 = load i8, i8* %v1_b5c4, align 1
  %v3_b5c4 = zext i8 %v2_b5c4 to i32
  %v1_b5c8 = and i32 %v3_b5c4, 240
  %v1_b5cc = or i32 %v1_b5c8, 5
  store i32 %v1_b5cc, i32* %r2.global-to-local, align 4
  %v3_b5d4 = add i32 %v0_b5c4, 9
  %v4_b5d4 = inttoptr i32 %v3_b5d4 to i8*
  store i8 17, i8* %v4_b5d4, align 1
  %v0_b5d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b5d8 = trunc i32 %v0_b5d8 to i8
  %v2_b5d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5d8 = inttoptr i32 %v2_b5d8 to i8*
  store i8 %v1_b5d8, i8* %v3_b5d8, align 1
  %v2_b5e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5e0 = add i32 %v2_b5e0, 1
  %v4_b5e0 = inttoptr i32 %v3_b5e0 to i8*
  store i8 %v5_b384, i8* %v4_b5e0, align 1
  %v2_b5e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5e8 = add i32 %v2_b5e8, 8
  %v4_b5e8 = inttoptr i32 %v3_b5e8 to i8*
  store i8 %v5_b3bc, i8* %v4_b5e8, align 1
  %v3_b5ec = load i32, i32* %stack_var_-40, align 4
  %v1_b5f4 = add i32 %v3_b5ec, 1
  store i32 %v1_b5f4, i32* @r4, align 4
  %v5_b5fc = mul i32 %v3_b5ec, 24
  store i32 %v5_b5fc, i32* %r3.global-to-local, align 4
  store i32 %v1_b320, i32* %r2.global-to-local, align 4
  %v2_b604 = load i32, i32* %r1.global-to-local, align 4
  %v3_b604 = add i32 %v2_b604, 2
  %v4_b604 = inttoptr i32 %v3_b604 to i8*
  store i8 %v5_b55c, i8* %v4_b604, align 1
  %v0_b608 = load i32, i32* @fp, align 4
  %v1_b608 = load i32, i32* %r1.global-to-local, align 4
  %v2_b608 = add i32 %v1_b608, 12
  %v3_b608 = inttoptr i32 %v2_b608 to i32*
  store i32 %v0_b608, i32* %v3_b608, align 4
  store i32 %v4_b60c, i32* %ip.global-to-local, align 4
  %v0_b610 = load i32, i32* @r4, align 4
  %v1_b610 = load i32, i32* %r2.global-to-local, align 4
  %v9_b610 = icmp eq i32 %v0_b610, %v1_b610
  store i1 %v9_b610, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b57419, i32* %r2.global-to-local, align 4
  %v0_b618 = load i32, i32* %r3.global-to-local, align 4
  %v1_b618 = load i32, i32* @r8, align 4
  %v2_b618 = add i32 %v1_b618, %v0_b618
  store i32 %v2_b618, i32* %r3.global-to-local, align 4
  %v2_b61c = load i32, i32* %r1.global-to-local, align 4
  %v3_b61c = add i32 %v2_b61c, 3
  %v4_b61c = inttoptr i32 %v3_b61c to i8*
  store i8 %v5_b580, i8* %v4_b61c, align 1
  %v0_b620 = load i32, i32* %ip.global-to-local, align 4
  %v1_b620 = trunc i32 %v0_b620 to i8
  %v2_b620 = load i32, i32* %r1.global-to-local, align 4
  %v3_b620 = add i32 %v2_b620, 4
  %v4_b620 = inttoptr i32 %v3_b620 to i8*
  store i8 %v1_b620, i8* %v4_b620, align 1
  %v0_b624 = load i32, i32* %r3.global-to-local, align 4
  %v1_b624 = add i32 %v0_b624, 16
  %v2_b624 = inttoptr i32 %v1_b624 to i32*
  %v3_b624 = load i32, i32* %v2_b624, align 4
  store i32 %v3_b624, i32* %r0.global-to-local, align 4
  store i32 %v3_b62c, i32* %r2.global-to-local, align 4
  store i32 %v7_b62c, i32* %ip.global-to-local, align 4
  %v0_b630 = load i32, i32* %r1.global-to-local, align 4
  %v1_b630 = add i32 %v0_b630, 20
  store i32 %v1_b630, i32* %r3.global-to-local, align 4
  %v3_b634 = add i32 %v0_b630, 5
  %v4_b634 = inttoptr i32 %v3_b634 to i8*
  store i8 %v5_b584, i8* %v4_b634, align 1
  %v0_b638 = load i32, i32* %sb.global-to-local, align 4
  %v1_b638 = trunc i32 %v0_b638 to i8
  %v2_b638 = load i32, i32* %r1.global-to-local, align 4
  %v3_b638 = add i32 %v2_b638, 20
  %v4_b638 = inttoptr i32 %v3_b638 to i8*
  store i8 %v1_b638, i8* %v4_b638, align 1
  %v0_b63c = load i32, i32* %r0.global-to-local, align 4
  %v1_b63c = load i32, i32* %r1.global-to-local, align 4
  %v2_b63c = add i32 %v1_b63c, 16
  %v3_b63c = inttoptr i32 %v2_b63c to i32*
  store i32 %v0_b63c, i32* %v3_b63c, align 4
  %v0_b640 = load i32, i32* @r6, align 4
  %v1_b640 = trunc i32 %v0_b640 to i8
  %v2_b640 = load i32, i32* %r3.global-to-local, align 4
  %v3_b640 = add i32 %v2_b640, 5
  %v4_b640 = inttoptr i32 %v3_b640 to i8*
  store i8 %v1_b640, i8* %v4_b640, align 1
  %v0_b644 = load i32, i32* %ip.global-to-local, align 4
  %v1_b644 = trunc i32 %v0_b644 to i8
  %v2_b644 = load i32, i32* %r3.global-to-local, align 4
  %v3_b644 = add i32 %v2_b644, 1
  %v4_b644 = inttoptr i32 %v3_b644 to i8*
  store i8 %v1_b644, i8* %v4_b644, align 1
  %v0_b648 = load i32, i32* @r5, align 4
  %v1_b648 = trunc i32 %v0_b648 to i8
  %v2_b648 = load i32, i32* %r3.global-to-local, align 4
  %v3_b648 = add i32 %v2_b648, 2
  %v4_b648 = inttoptr i32 %v3_b648 to i8*
  store i8 %v1_b648, i8* %v4_b648, align 1
  %v0_b64c = load i32, i32* @r7, align 4
  %v1_b64c = trunc i32 %v0_b64c to i8
  %v2_b64c = load i32, i32* %r3.global-to-local, align 4
  %v3_b64c = add i32 %v2_b64c, 3
  %v4_b64c = inttoptr i32 %v3_b64c to i8*
  store i8 %v1_b64c, i8* %v4_b64c, align 1
  %v0_b650 = load i32, i32* %sl.global-to-local, align 4
  %v1_b650 = trunc i32 %v0_b650 to i8
  %v2_b650 = load i32, i32* %r3.global-to-local, align 4
  %v3_b650 = add i32 %v2_b650, 4
  %v4_b650 = inttoptr i32 %v3_b650 to i8*
  store i8 %v1_b650, i8* %v4_b650, align 1
  %v0_b654 = load i32, i32* @r4, align 4
  store i32 %v0_b654, i32* %stack_var_-40, align 4
  %v5_b658 = icmp slt i32 %v0_b610, %v1_b610
  br i1 %v5_b658, label %dec_label_pc_b594, label %dec_label_pc_b65c.preheader

dec_label_pc_b65c.preheader:                      ; preds = %dec_label_pc_b8dc, %dec_label_pc_b594, %.dec_label_pc_b65c.preheader_crit_edge
  %v1_b67c.pre-phi = phi i32 [ %.pre16, %.dec_label_pc_b65c.preheader_crit_edge ], [ %v1_b50c, %dec_label_pc_b594 ], [ %v1_b50c, %dec_label_pc_b8dc ]
  %v1_b678.pre-phi = phi i32 [ %.pre, %.dec_label_pc_b65c.preheader_crit_edge ], [ %v1_b510, %dec_label_pc_b594 ], [ %v1_b510, %dec_label_pc_b8dc ]
  %v3_b80c = icmp eq i32 %v3_b4e4, 65535
  %v2_b860 = icmp eq i32 %v1_b440, 0
  br label %dec_label_pc_b65c

dec_label_pc_b65c:                                ; preds = %dec_label_pc_b65c.preheader, %dec_label_pc_b888
  store i32 %v1_b320, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b4f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b4f0, label %dec_label_pc_b888, label %dec_label_pc_b670

dec_label_pc_b670:                                ; preds = %dec_label_pc_b65c
  store i32 %v0_b4c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_b678.pre-phi, i32* @sb, align 4
  store i32 %v1_b67c.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_b774

dec_label_pc_b688:                                ; preds = %dec_label_pc_b774
  %v0_b688 = load i32, i32* @fp, align 4
  %v7_b688 = icmp eq i32 %v0_b688, -1
  store i1 %v7_b688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b688, label %dec_label_pc_b7fc, label %dec_label_pc_b690

dec_label_pc_b690:                                ; preds = %dec_label_pc_b798, %dec_label_pc_b688
  store i32 %v3_b4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b80c, label %dec_label_pc_b818, label %dec_label_pc_b6a4

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b7fc.dec_label_pc_b6a4_crit_edge, %dec_label_pc_b690
  %v1_b6a8 = phi i32 [ %v1_b6a8.pre, %dec_label_pc_b7fc.dec_label_pc_b6a4_crit_edge ], [ 65535, %dec_label_pc_b690 ]
  store i32 %v3_b4e8, i32* %r1.global-to-local, align 4
  %v9_b6a8 = icmp eq i32 %v3_b4e8, %v1_b6a8
  store i1 %v9_b6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6a8, label %dec_label_pc_b834, label %dec_label_pc_b6b0

dec_label_pc_b6b0:                                ; preds = %dec_label_pc_b818.dec_label_pc_b6b0_crit_edge, %dec_label_pc_b6a4
  %v1_b6b4 = phi i32 [ %v1_b6b4.pre, %dec_label_pc_b818.dec_label_pc_b6b0_crit_edge ], [ %v1_b6a8, %dec_label_pc_b6a4 ]
  store i32 %v3_b4ec, i32* %r2.global-to-local, align 4
  %v9_b6b4 = icmp eq i32 %v3_b4ec, %v1_b6b4
  store i1 %v9_b6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6b4, label %dec_label_pc_b850, label %dec_label_pc_b6bc

dec_label_pc_b6bc:                                ; preds = %dec_label_pc_b834, %dec_label_pc_b6b0
  store i32 %v1_b440, i32* %r3.global-to-local, align 4
  store i1 %v2_b860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b860, label %dec_label_pc_b6c8, label %dec_label_pc_b86c

dec_label_pc_b6c8:                                ; preds = %dec_label_pc_b6bc, %dec_label_pc_b850, %dec_label_pc_b86c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b6cc = load i32, i32* @r7, align 4
  %v1_b6cc = trunc i32 %v0_b6cc to i8
  %v2_b6cc = load i32, i32* @r5, align 4
  %v3_b6cc = add i32 %v2_b6cc, 10
  %v4_b6cc = inttoptr i32 %v3_b6cc to i8*
  store i8 %v1_b6cc, i8* %v4_b6cc, align 1
  %v0_b6d0 = load i32, i32* @r7, align 4
  %v1_b6d0 = trunc i32 %v0_b6d0 to i8
  %v2_b6d0 = load i32, i32* @r5, align 4
  %v3_b6d0 = add i32 %v2_b6d0, 11
  %v4_b6d0 = inttoptr i32 %v3_b6d0 to i8*
  store i8 %v1_b6d0, i8* %v4_b6d0, align 1
  %v0_b6d4 = load i32, i32* @r5, align 4
  store i32 %v0_b6d4, i32* @r0, align 4
  %v2_b6d8 = call i32 @function_c688(i32 %v0_b6d4, i32 20)
  %v3_b6d8 = trunc i32 %v2_b6d8 to i8
  store i32 %v2_b6d8, i32* %r0.global-to-local, align 4
  %v4_b6dc = sdiv i32 %v2_b6d8, 256
  store i32 %v4_b6dc, i32* %r3.global-to-local, align 4
  %v1_b6e0 = trunc i32 %v4_b6dc to i8
  %v2_b6e0 = load i32, i32* @r5, align 4
  %v3_b6e0 = add i32 %v2_b6e0, 11
  %v4_b6e0 = inttoptr i32 %v3_b6e0 to i8*
  store i8 %v1_b6e0, i8* %v4_b6e0, align 1
  %v3_b6e4 = load i32, i32* @r5, align 4
  %v4_b6e4 = add i32 %v3_b6e4, 10
  %v5_b6e4 = inttoptr i32 %v4_b6e4 to i8*
  store i8 %v3_b6d8, i8* %v5_b6e4, align 1
  %v0_b6e8 = load i32, i32* @r7, align 4
  %v1_b6e8 = trunc i32 %v0_b6e8 to i8
  %v2_b6e8 = load i32, i32* @r6, align 4
  %v3_b6e8 = add i32 %v2_b6e8, 6
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* @r7, align 4
  %v1_b6ec = trunc i32 %v0_b6ec to i8
  %v2_b6ec = load i32, i32* @r6, align 4
  %v3_b6ec = add i32 %v2_b6ec, 7
  %v4_b6ec = inttoptr i32 %v3_b6ec to i8*
  store i8 %v1_b6ec, i8* %v4_b6ec, align 1
  %v0_b6f0 = load i32, i32* @r5, align 4
  %v1_b6f0 = add i32 %v0_b6f0, 24
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i8*
  %v3_b6f0 = load i8, i8* %v2_b6f0, align 1
  %v4_b6f0 = zext i8 %v3_b6f0 to i32
  store i32 %v4_b6f0, i32* %r3.global-to-local, align 4
  %v1_b6f4 = add i32 %v0_b6f0, 25
  %v2_b6f4 = inttoptr i32 %v1_b6f4 to i8*
  %v3_b6f4 = load i8, i8* %v2_b6f4, align 1
  %v4_b6f4 = zext i8 %v3_b6f4 to i32
  %v0_b6f8 = load i32, i32* @r6, align 4
  store i32 %v0_b6f8, i32* @r1, align 4
  %v4_b6fc = mul nuw nsw i32 %v4_b6f4, 256
  %v5_b6fc = or i32 %v4_b6fc, %v4_b6f0
  store i32 %v5_b6fc, i32* %r2.global-to-local, align 4
  store i32 %v0_b6f0, i32* %r0.global-to-local, align 4
  %v0_b704 = load i32, i32* @sb, align 4
  store i32 %v0_b704, i32* %r3.global-to-local, align 4
  %v4_b708 = call i32 @function_c6e4(i32 %v0_b6f0, i32 %v0_b6f8, i32 %v5_b6fc, i32 %v0_b704)
  %v5_b708 = trunc i32 %v4_b708 to i8
  store i32 %v4_b708, i32* %r0.global-to-local, align 4
  %v4_b70c21 = udiv i32 %v4_b708, 256
  %v1_b710 = trunc i32 %v4_b70c21 to i8
  %v2_b710 = load i32, i32* @r6, align 4
  %v3_b710 = add i32 %v2_b710, 7
  %v4_b710 = inttoptr i32 %v3_b710 to i8*
  store i8 %v1_b710, i8* %v4_b710, align 1
  %v3_b714 = load i32, i32* @r6, align 4
  %v4_b714 = add i32 %v3_b714, 6
  %v5_b714 = inttoptr i32 %v4_b714 to i8*
  store i8 %v5_b708, i8* %v5_b714, align 1
  %v3_b718 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b718, i32* %r3.global-to-local, align 4
  %v0_b71c = load i32, i32* @r5, align 4
  %v1_b71c = add i32 %v0_b71c, 20
  %v2_b71c = inttoptr i32 %v1_b71c to i32*
  %v3_b71c = load i32, i32* %v2_b71c, align 4
  %v3_b724 = udiv i32 %v3_b71c, 65536
  store i32 %v3_b724, i32* %r2.global-to-local, align 4
  %v5_b728 = mul i32 %v3_b718, 24
  %v1_b72c = load i32, i32* @r8, align 4
  %v2_b72c = add i32 %v1_b72c, %v5_b728
  store i32 %v2_b72c, i32* %ip.global-to-local, align 4
  %v3_b73018 = udiv i32 %v3_b71c, 16777216
  %v1_b734 = trunc i32 %v3_b73018 to i8
  %v3_b734 = add i32 %v2_b72c, 3
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 %v1_b734, i8* %v4_b734, align 1
  %v0_b738 = load i32, i32* %r2.global-to-local, align 4
  %v1_b738 = trunc i32 %v0_b738 to i8
  %v2_b738 = load i32, i32* %ip.global-to-local, align 4
  %v3_b738 = add i32 %v2_b738, 2
  %v4_b738 = inttoptr i32 %v3_b738 to i8*
  store i8 %v1_b738, i8* %v4_b738, align 1
  %v0_b73c = load i32, i32* @r5, align 4
  store i32 %v0_b73c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v0_b748 = load i32, i32* @sl, align 4
  store i32 %v0_b748, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b750 = load i32, i32* %ip.global-to-local, align 4
  %v6_b758 = inttoptr i32 %v0_b73c to i32*
  %v7_b758 = call i32 @function_12b98(i32 %v3_b478, i32* %v6_b758, i32 %v0_b748, i32 16384, i32 %v0_b750, i32 16)
  %v3_b75c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b75c, i32* %r3.global-to-local, align 4
  store i32 %v1_b320, i32* %r1.global-to-local, align 4
  %v1_b764 = add i32 %v3_b75c, 1
  store i32 %v1_b764, i32* %r0.global-to-local, align 4
  %v9_b768 = icmp eq i32 %v1_b764, %v1_b320
  store i1 %v9_b768, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b764, i32* %stack_var_-40, align 4
  %v6_b770 = icmp slt i32 %v1_b764, %v1_b320
  br i1 %v6_b770, label %dec_label_pc_b774, label %dec_label_pc_b888

dec_label_pc_b774:                                ; preds = %dec_label_pc_b6c8, %dec_label_pc_b670
  %v1_b788 = phi i32 [ %v1_b764, %dec_label_pc_b6c8 ], [ 0, %dec_label_pc_b670 ]
  %v5_b778 = mul i32 %v1_b788, 24
  %v1_b77c = load i32, i32* @r8, align 4
  %v2_b77c = add i32 %v1_b77c, %v5_b778
  store i32 %v2_b77c, i32* %r3.global-to-local, align 4
  %v1_b784 = add i32 %v2_b77c, 20
  %v2_b784 = inttoptr i32 %v1_b784 to i8*
  %v3_b784 = load i8, i8* %v2_b784, align 1
  %v4_b784 = zext i8 %v3_b784 to i32
  store i32 %v4_b784, i32* %r2.global-to-local, align 4
  %v4_b788 = mul i32 %v1_b788, 4
  %v5_b788 = add i32 %v4_b788, %v2_b34c
  %v6_b788 = inttoptr i32 %v5_b788 to i32*
  %v7_b788 = load i32, i32* %v6_b788, align 4
  store i32 %v7_b788, i32* @r5, align 4
  %v2_b78c = icmp ugt i8 %v3_b784, 30
  %v7_b78c = icmp eq i8 %v3_b784, 31
  store i1 %v7_b78c, i1* %cpsr_z.global-to-local, align 1
  %v1_b790 = add i32 %v7_b788, 20
  store i32 %v1_b790, i32* @r6, align 4
  %v2_b794 = xor i1 %v7_b78c, true
  %v3_b794 = and i1 %v2_b78c, %v2_b794
  br i1 %v3_b794, label %dec_label_pc_b688, label %dec_label_pc_b798

dec_label_pc_b798:                                ; preds = %dec_label_pc_b774
  %v1_b798 = add i32 %v2_b77c, 16
  %v2_b798 = inttoptr i32 %v1_b798 to i32*
  %v3_b798 = load i32, i32* %v2_b798, align 4
  %v0_b79c = call i32 @function_e240()
  store i32 %v0_b79c, i32* %r0.global-to-local, align 4
  %v3_b7a0 = load i32, i32* %stack_var_-40, align 4
  %v5_b7a8 = mul i32 %v3_b7a0, 24
  %v1_b7b0 = load i32, i32* @r8, align 4
  %v2_b7b0 = add i32 %v1_b7b0, %v5_b7a8
  store i32 %v2_b7b0, i32* %r1.global-to-local, align 4
  %v1_b7b4 = and i32 %v3_b798, 65280
  store i32 %v1_b7b4, i32* %r3.global-to-local, align 4
  %v1_b7ac = udiv i32 %v3_b798, 256
  %v3_b7b8 = and i32 %v1_b7ac, 65280
  store i32 %v3_b7b8, i32* %r2.global-to-local, align 4
  %v3_b7bc = mul i32 %v3_b798, 16777216
  store i32 %v3_b7bc, i32* %ip.global-to-local, align 4
  %v1_b7c0 = add i32 %v2_b7b0, 20
  %v2_b7c0 = inttoptr i32 %v1_b7c0 to i8*
  %v3_b7c0 = load i8, i8* %v2_b7c0, align 1
  %v4_b7c0 = zext i8 %v3_b7c0 to i32
  %v4_b7c4 = mul nuw nsw i32 %v1_b7b4, 256
  %v5_b7c4 = or i32 %v4_b7c4, %v3_b7bc
  store i32 %v5_b7c4, i32* %ip.global-to-local, align 4
  %v2_b7cc = call i32 @llvm.bswap.i32(i32 %v3_b798)
  %v7_b7d0 = lshr i32 %v0_b79c, %v4_b7c0
  %v8_b7d0 = add i32 %v7_b7d0, %v2_b7cc
  store i32 %v8_b7d0, i32* %r2.global-to-local, align 4
  %v3_b7dc = mul i32 %v8_b7d0, 16777216
  %v1_b7e0 = and i32 %v8_b7d0, 65280
  store i32 %v1_b7e0, i32* %r0.global-to-local, align 4
  %v4_b7e4 = mul nuw nsw i32 %v1_b7e0, 256
  %v5_b7e4 = or i32 %v4_b7e4, %v3_b7dc
  store i32 %v5_b7e4, i32* %r1.global-to-local, align 4
  %v2_b7ec = call i32 @llvm.bswap.i32(i32 %v8_b7d0)
  store i32 %v2_b7ec, i32* %r3.global-to-local, align 4
  %v0_b7f0 = load i32, i32* @fp, align 4
  %v3_b7f0 = icmp eq i32 %v0_b7f0, -1
  %v8_b7f0 = icmp eq i32 %v0_b7f0, -1
  store i1 %v8_b7f0, i1* %cpsr_z.global-to-local, align 1
  %v1_b7f4 = load i32, i32* @r5, align 4
  %v2_b7f4 = add i32 %v1_b7f4, 16
  %v3_b7f4 = inttoptr i32 %v2_b7f4 to i32*
  store i32 %v2_b7ec, i32* %v3_b7f4, align 4
  br i1 %v3_b7f0, label %dec_label_pc_b7fc, label %dec_label_pc_b690

dec_label_pc_b7fc:                                ; preds = %dec_label_pc_b798, %dec_label_pc_b688
  %v0_b7fc = call i32 @function_e240()
  store i32 %v0_b7fc, i32* %r0.global-to-local, align 4
  store i32 %v3_b4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b80c, i1* %cpsr_z.global-to-local, align 1
  %v1_b810 = load i32, i32* @r5, align 4
  %v2_b810 = add i32 %v1_b810, 12
  %v3_b810 = inttoptr i32 %v2_b810 to i32*
  store i32 %v0_b7fc, i32* %v3_b810, align 4
  br i1 %v3_b80c, label %dec_label_pc_b818, label %dec_label_pc_b7fc.dec_label_pc_b6a4_crit_edge

dec_label_pc_b7fc.dec_label_pc_b6a4_crit_edge:    ; preds = %dec_label_pc_b7fc
  %v1_b6a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6a4

dec_label_pc_b818:                                ; preds = %dec_label_pc_b7fc, %dec_label_pc_b690
  %v0_b818 = call i32 @function_e240()
  %v1_b818 = trunc i32 %v0_b818 to i8
  store i32 %v0_b818, i32* %r0.global-to-local, align 4
  store i32 %v3_b4e8, i32* %r1.global-to-local, align 4
  %v4_b820 = sdiv i32 %v0_b818, 256
  store i32 %v4_b820, i32* %r3.global-to-local, align 4
  %v1_b824 = load i32, i32* @r4, align 4
  %v9_b824 = icmp eq i32 %v3_b4e8, %v1_b824
  store i1 %v9_b824, i1* %cpsr_z.global-to-local, align 1
  %v1_b828 = trunc i32 %v4_b820 to i8
  %v2_b828 = load i32, i32* @r5, align 4
  %v3_b828 = add i32 %v2_b828, 5
  %v4_b828 = inttoptr i32 %v3_b828 to i8*
  store i8 %v1_b828, i8* %v4_b828, align 1
  %v3_b82c = load i32, i32* @r5, align 4
  %v4_b82c = add i32 %v3_b82c, 4
  %v5_b82c = inttoptr i32 %v4_b82c to i8*
  store i8 %v1_b818, i8* %v5_b82c, align 1
  %v0_b830 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b830, label %dec_label_pc_b834, label %dec_label_pc_b818.dec_label_pc_b6b0_crit_edge

dec_label_pc_b818.dec_label_pc_b6b0_crit_edge:    ; preds = %dec_label_pc_b818
  %v1_b6b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6b0

dec_label_pc_b834:                                ; preds = %dec_label_pc_b818, %dec_label_pc_b6a4
  %v0_b834 = call i32 @function_e240()
  %v1_b834 = trunc i32 %v0_b834 to i8
  store i32 %v0_b834, i32* %r0.global-to-local, align 4
  store i32 %v3_b4ec, i32* %r2.global-to-local, align 4
  %v4_b83c = sdiv i32 %v0_b834, 256
  store i32 %v4_b83c, i32* %r3.global-to-local, align 4
  %v1_b840 = load i32, i32* @r4, align 4
  %v9_b840 = icmp eq i32 %v3_b4ec, %v1_b840
  store i1 %v9_b840, i1* %cpsr_z.global-to-local, align 1
  %v3_b844 = load i32, i32* @r5, align 4
  %v4_b844 = add i32 %v3_b844, 20
  %v5_b844 = inttoptr i32 %v4_b844 to i8*
  store i8 %v1_b834, i8* %v5_b844, align 1
  %v0_b848 = load i32, i32* %r3.global-to-local, align 4
  %v1_b848 = trunc i32 %v0_b848 to i8
  %v2_b848 = load i32, i32* @r6, align 4
  %v3_b848 = add i32 %v2_b848, 1
  %v4_b848 = inttoptr i32 %v3_b848 to i8*
  store i8 %v1_b848, i8* %v4_b848, align 1
  %v0_b84c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b84c, label %dec_label_pc_b850, label %dec_label_pc_b6bc

dec_label_pc_b850:                                ; preds = %dec_label_pc_b834, %dec_label_pc_b6b0
  %v0_b850 = call i32 @function_e240()
  %v1_b850 = trunc i32 %v0_b850 to i8
  store i32 %v0_b850, i32* %r0.global-to-local, align 4
  %v4_b85422 = udiv i32 %v0_b850, 256
  %v1_b858 = trunc i32 %v4_b85422 to i8
  %v2_b858 = load i32, i32* @r6, align 4
  %v3_b858 = add i32 %v2_b858, 3
  %v4_b858 = inttoptr i32 %v3_b858 to i8*
  store i8 %v1_b858, i8* %v4_b858, align 1
  store i32 %v1_b440, i32* %r3.global-to-local, align 4
  store i1 %v2_b860, i1* %cpsr_z.global-to-local, align 1
  %v3_b864 = load i32, i32* @r6, align 4
  %v4_b864 = add i32 %v3_b864, 2
  %v5_b864 = inttoptr i32 %v4_b864 to i8*
  store i8 %v1_b850, i8* %v5_b864, align 1
  %v0_b868 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b868, label %dec_label_pc_b6c8, label %dec_label_pc_b86c

dec_label_pc_b86c:                                ; preds = %dec_label_pc_b6bc, %dec_label_pc_b850
  %v0_b86c = load i32, i32* @r5, align 4
  %v1_b86c = add i32 %v0_b86c, 28
  store i32 %v1_b86c, i32* @r4, align 4
  store i32 %v1_b86c, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  %v2_b878 = call i32 @function_e2f4(i32 %v1_b86c, i32 %v0_b4c8)
  store i32 %v2_b878, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c8, i32* %ip.global-to-local, align 4
  %v0_b880 = load i32, i32* @r7, align 4
  %v1_b880 = trunc i32 %v0_b880 to i8
  %v2_b880 = load i32, i32* @r4, align 4
  %v4_b880 = add i32 %v2_b880, %v0_b4c8
  %v5_b880 = inttoptr i32 %v4_b880 to i8*
  store i8 %v1_b880, i8* %v5_b880, align 1
  br label %dec_label_pc_b6c8

dec_label_pc_b888:                                ; preds = %dec_label_pc_b6c8, %dec_label_pc_b65c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b88c = call i32 @function_125b0(i32* null)
  store i32 %v2_b88c, i32* %r0.global-to-local, align 4
  store i32 %v2_b464, i32* %r2.global-to-local, align 4
  %v9_b894 = icmp eq i32 %v2_b464, %v2_b88c
  store i1 %v9_b894, i1* %cpsr_z.global-to-local, align 1
  %v6_b898 = icmp slt i32 %v2_b464, %v2_b88c
  br i1 %v6_b898, label %dec_label_pc_b89c, label %dec_label_pc_b65c

dec_label_pc_b89c:                                ; preds = %dec_label_pc_b888, %dec_label_pc_b31c, %dec_label_pc_b8a4
  %v29_b8a0 = phi i32 [ %v3_b478, %dec_label_pc_b31c ], [ %v1_b8a8, %dec_label_pc_b8a4 ], [ %v2_b88c, %dec_label_pc_b888 ]
  store i32 %v18_b31c, i32* %sb.global-to-local, align 4
  store i32 %v21_b31c, i32* %sl.global-to-local, align 4
  ret i32 %v29_b8a0

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b488
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v1_b8a8 = call i32 @function_122e0(i32 %v3_b478)
  store i32 %v1_b8a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b89c

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_b508
  %v3_b8b4 = sext i8 %v5_b55c to i32
  %v7_b8b4 = sext i8 %v5_b560 to i32
  %v3_b8b8 = sdiv i32 %v3_b8b4, 256
  store i32 %v3_b8b8, i32* %r1.global-to-local, align 4
  %v3_b8bc = sdiv i32 %v7_b8b4, 256
  store i32 %v3_b8bc, i32* %r2.global-to-local, align 4
  store i32 %v1_b524, i32* %r3.global-to-local, align 4
  store i32 %v0_b4f4, i32* @r4, align 4
  %v3_b8d417 = udiv i32 %v1_b544, 256
  store i32 %v3_b8d417, i32* @r6, align 4
  store i32 %v1_b550, i32* @r7, align 4
  %sext8 = mul i32 %v6_b3e4, 16777216
  %v7_b984 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_b8dc

dec_label_pc_b8dc:                                ; preds = %dec_label_pc_b8dc, %dec_label_pc_b8b0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b8e8 = call i32 @function_12ee8(i32 1510, i32 1)
  store i32 %v2_b8e8, i32* %r0.global-to-local, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v3_b8f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8f0, i32* %r2.global-to-local, align 4
  %v2_b8f4 = load i32, i32* @r4, align 4
  %v5_b8f4 = mul i32 %v2_b8f4, 4
  %v6_b8f4 = add i32 %v5_b8f4, %v2_b34c
  %v7_b8f4 = inttoptr i32 %v6_b8f4 to i32*
  store i32 %v2_b8e8, i32* %v7_b8f4, align 4
  %v0_b8f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b8f8 = load i32, i32* %r2.global-to-local, align 4
  %v4_b8f8 = mul i32 %v1_b8f8, 4
  %v5_b8f8 = add i32 %v4_b8f8, %v0_b8f8
  %v6_b8f8 = inttoptr i32 %v5_b8f8 to i32*
  %v7_b8f8 = load i32, i32* %v6_b8f8, align 4
  store i32 %v7_b8f8, i32* %r1.global-to-local, align 4
  %v1_b8fc = inttoptr i32 %v7_b8f8 to i8*
  %v2_b8fc = load i8, i8* %v1_b8fc, align 1
  %tmp64 = urem i8 %v2_b8fc, 16
  %v1_b900 = zext i8 %tmp64 to i32
  %v1_b904 = or i32 %v1_b900, 64
  store i32 %v1_b904, i32* %r3.global-to-local, align 4
  %v1_b908 = trunc i32 %v1_b904 to i8
  store i8 %v1_b908, i8* %v1_b8fc, align 1
  %v0_b90c = load i32, i32* %r1.global-to-local, align 4
  %v1_b90c = inttoptr i32 %v0_b90c to i8*
  %v2_b90c = load i8, i8* %v1_b90c, align 1
  %v1_b910 = and i8 %v2_b90c, -16
  %v1_b914 = or i8 %v1_b910, 5
  store i32 17, i32* %r3.global-to-local, align 4
  store i8 %v1_b914, i8* %v1_b90c, align 1
  %v0_b920 = load i32, i32* %r3.global-to-local, align 4
  %v1_b920 = trunc i32 %v0_b920 to i8
  %v2_b920 = load i32, i32* %r1.global-to-local, align 4
  %v3_b920 = add i32 %v2_b920, 9
  %v4_b920 = inttoptr i32 %v3_b920 to i8*
  store i8 %v1_b920, i8* %v4_b920, align 1
  %v2_b928 = load i32, i32* %r1.global-to-local, align 4
  %v3_b928 = add i32 %v2_b928, 1
  %v4_b928 = inttoptr i32 %v3_b928 to i8*
  store i8 %v5_b384, i8* %v4_b928, align 1
  %v2_b930 = load i32, i32* %r1.global-to-local, align 4
  %v3_b930 = add i32 %v2_b930, 8
  %v4_b930 = inttoptr i32 %v3_b930 to i8*
  store i8 %v5_b3bc, i8* %v4_b930, align 1
  %v3_b934 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b934, i32* %r2.global-to-local, align 4
  %v3_b938 = mul i32 %v3_b934, 32
  store i32 %v3_b938, i32* %r3.global-to-local, align 4
  %v0_b93c = load i32, i32* @fp, align 4
  %v1_b93c = load i32, i32* %r1.global-to-local, align 4
  %v2_b93c = add i32 %v1_b93c, 12
  %v3_b93c = inttoptr i32 %v2_b93c to i32*
  store i32 %v0_b93c, i32* %v3_b93c, align 4
  %v0_b940 = load i32, i32* %r3.global-to-local, align 4
  %v1_b940 = load i32, i32* %r2.global-to-local, align 4
  %tmp65 = mul i32 %v1_b940, -8
  %v5_b940 = add i32 %v0_b940, %tmp65
  %v1_b944 = load i32, i32* @r8, align 4
  %v2_b944 = add i32 %v5_b940, %v1_b944
  store i32 %v2_b944, i32* %r3.global-to-local, align 4
  %v1_b948 = add i32 %v2_b944, 16
  %v2_b948 = inttoptr i32 %v1_b948 to i32*
  %v3_b948 = load i32, i32* %v2_b948, align 4
  store i32 %v3_b948, i32* %ip.global-to-local, align 4
  %v1_b94c = add i32 %v1_b940, 1
  store i32 %v1_b94c, i32* @r4, align 4
  store i32 %v1_b320, i32* %r2.global-to-local, align 4
  %v2_b958 = load i32, i32* %r1.global-to-local, align 4
  %v3_b958 = add i32 %v2_b958, 6
  %v4_b958 = inttoptr i32 %v3_b958 to i8*
  store i8 64, i8* %v4_b958, align 1
  %v0_b95c = load i32, i32* %ip.global-to-local, align 4
  %v1_b95c = load i32, i32* %r1.global-to-local, align 4
  %v2_b95c = add i32 %v1_b95c, 16
  %v3_b95c = inttoptr i32 %v2_b95c to i32*
  store i32 %v0_b95c, i32* %v3_b95c, align 4
  store i32 %v3_b8b4, i32* %r3.global-to-local, align 4
  store i32 %v3_b8b8, i32* %ip.global-to-local, align 4
  %v0_b968 = load i32, i32* @r4, align 4
  %v1_b968 = load i32, i32* %r2.global-to-local, align 4
  %v9_b968 = icmp eq i32 %v0_b968, %v1_b968
  store i1 %v9_b968, i1* %cpsr_z.global-to-local, align 1
  %v2_b970 = load i32, i32* %r1.global-to-local, align 4
  %v3_b970 = add i32 %v2_b970, 7
  %v4_b970 = inttoptr i32 %v3_b970 to i8*
  store i8 0, i8* %v4_b970, align 1
  %v0_b974 = load i32, i32* %r3.global-to-local, align 4
  %v1_b974 = trunc i32 %v0_b974 to i8
  %v2_b974 = load i32, i32* %r1.global-to-local, align 4
  %v3_b974 = add i32 %v2_b974, 2
  %v4_b974 = inttoptr i32 %v3_b974 to i8*
  store i8 %v1_b974, i8* %v4_b974, align 1
  %v0_b978 = load i32, i32* %ip.global-to-local, align 4
  %v1_b978 = trunc i32 %v0_b978 to i8
  %v2_b978 = load i32, i32* %r1.global-to-local, align 4
  %v3_b978 = add i32 %v2_b978, 3
  %v4_b978 = inttoptr i32 %v3_b978 to i8*
  store i8 %v1_b978, i8* %v4_b978, align 1
  store i32 %v7_b8b4, i32* %r2.global-to-local, align 4
  store i32 %v3_b8bc, i32* %r3.global-to-local, align 4
  store i32 %v7_b984, i32* %ip.global-to-local, align 4
  %v0_b988 = load i32, i32* %r1.global-to-local, align 4
  %v1_b988 = add i32 %v0_b988, 20
  store i32 %v1_b988, i32* %r0.global-to-local, align 4
  %v3_b98c = add i32 %v0_b988, 4
  %v4_b98c = inttoptr i32 %v3_b98c to i8*
  store i8 %v5_b560, i8* %v4_b98c, align 1
  %v0_b990 = load i32, i32* %r3.global-to-local, align 4
  %v1_b990 = trunc i32 %v0_b990 to i8
  %v2_b990 = load i32, i32* %r1.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 5
  %v4_b990 = inttoptr i32 %v3_b990 to i8*
  store i8 %v1_b990, i8* %v4_b990, align 1
  %v0_b994 = load i32, i32* %sb.global-to-local, align 4
  %v1_b994 = trunc i32 %v0_b994 to i8
  %v2_b994 = load i32, i32* %r1.global-to-local, align 4
  %v3_b994 = add i32 %v2_b994, 20
  %v4_b994 = inttoptr i32 %v3_b994 to i8*
  store i8 %v1_b994, i8* %v4_b994, align 1
  %v0_b998 = load i32, i32* @r6, align 4
  %v1_b998 = trunc i32 %v0_b998 to i8
  %v2_b998 = load i32, i32* %r0.global-to-local, align 4
  %v3_b998 = add i32 %v2_b998, 5
  %v4_b998 = inttoptr i32 %v3_b998 to i8*
  store i8 %v1_b998, i8* %v4_b998, align 1
  %v0_b99c = load i32, i32* %ip.global-to-local, align 4
  %v1_b99c = trunc i32 %v0_b99c to i8
  %v2_b99c = load i32, i32* %r0.global-to-local, align 4
  %v3_b99c = add i32 %v2_b99c, 1
  %v4_b99c = inttoptr i32 %v3_b99c to i8*
  store i8 %v1_b99c, i8* %v4_b99c, align 1
  %v0_b9a0 = load i32, i32* @r5, align 4
  %v1_b9a0 = trunc i32 %v0_b9a0 to i8
  %v2_b9a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a0 = add i32 %v2_b9a0, 2
  %v4_b9a0 = inttoptr i32 %v3_b9a0 to i8*
  store i8 %v1_b9a0, i8* %v4_b9a0, align 1
  %v0_b9a4 = load i32, i32* @r7, align 4
  %v1_b9a4 = trunc i32 %v0_b9a4 to i8
  %v2_b9a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a4 = add i32 %v2_b9a4, 3
  %v4_b9a4 = inttoptr i32 %v3_b9a4 to i8*
  store i8 %v1_b9a4, i8* %v4_b9a4, align 1
  %v0_b9a8 = load i32, i32* %sl.global-to-local, align 4
  %v1_b9a8 = trunc i32 %v0_b9a8 to i8
  %v2_b9a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a8 = add i32 %v2_b9a8, 4
  %v4_b9a8 = inttoptr i32 %v3_b9a8 to i8*
  store i8 %v1_b9a8, i8* %v4_b9a8, align 1
  %v0_b9ac = load i32, i32* @r4, align 4
  store i32 %v0_b9ac, i32* %stack_var_-40, align 4
  %v5_b9b0 = icmp slt i32 %v0_b968, %v1_b968
  br i1 %v5_b9b0, label %dec_label_pc_b8dc, label %dec_label_pc_b65c.preheader

; uselistorder directives
  uselistorder i32 %v1_b940, { 1, 0 }
  uselistorder i32 %v3_b8bc, { 1, 0 }
  uselistorder i32 %v3_b8b8, { 1, 0 }
  uselistorder i32 %v7_b8b4, { 1, 0 }
  uselistorder i32 %v3_b8b4, { 1, 0 }
  uselistorder i32 %v1_b8a8, { 1, 0 }
  uselistorder i32 %v0_b850, { 0, 2, 1 }
  uselistorder i32 %v0_b834, { 0, 2, 1 }
  uselistorder i32 %v4_b820, { 1, 0 }
  uselistorder i32 %v0_b818, { 0, 2, 1 }
  uselistorder i32 %v2_b7ec, { 1, 0 }
  uselistorder i32 %v8_b7d0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b7bc, { 1, 0 }
  uselistorder i32 %v3_b798, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b764, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_b708, { 0, 2, 1 }
  uselistorder i32 %v0_b6f0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b6dc, { 1, 0 }
  uselistorder i32 %v2_b6d8, { 0, 2, 1 }
  uselistorder i1 %v7_b688, { 1, 0 }
  uselistorder i1 %v2_b860, { 2, 1, 0 }
  uselistorder i1 %v3_b80c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_b584, { 1, 0 }
  uselistorder i32 %v3_b57419, { 2, 0, 1 }
  uselistorder i8 %v5_b55c, { 1, 0 }
  uselistorder i32 %v1_b550, { 1, 2, 0 }
  uselistorder i32 %v3_b53c, { 1, 0 }
  uselistorder i32 %v1_b524, { 1, 2, 0 }
  uselistorder i32 %v1_b520, { 1, 0 }
  uselistorder i32 %v1_b510, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_b50c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b4f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b4e4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b4d8, { 1, 0, 2 }
  uselistorder i32 %v0_b4c8, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_b4bc, { 3, 1, 2, 0 }
  uselistorder i1 %v7_b4a8, { 1, 0 }
  uselistorder i1 %v7_b47c, { 1, 0 }
  uselistorder i32 %v3_b478, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_b464, { 2, 1, 0 }
  uselistorder i32 %v1_b440, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_b3e4, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %v1_b3cc, { 2, 1, 0 }
  uselistorder i32 %v6_b3a0, { 1, 2, 0 }
  uselistorder i32 %v7_b388, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v6_b364, { 1, 2, 0 }
  uselistorder i32 %v2_b34c, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v1_b320, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 25, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 10, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 28, 25, 26, 27, 31, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder label %dec_label_pc_b89c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b86c, { 1, 0 }
  uselistorder label %dec_label_pc_b6c8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b65c, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
}

define i32 @function_b9bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b9bc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b9bc = load i32, i32* @r4, align 4
  %v12_b9bc = load i32, i32* @r7, align 4
  %v15_b9bc = load i32, i32* @r8, align 4
  %v1_b9c0 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_b9dc = urem i32 %arg4, 256
  store i32 %v1_b9dc, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b9ec = call i32 @function_12ee8(i32 %v1_b9c0, i32 4)
  %v0_b9f0 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b9f8 = load i32, i32* @r7, align 4
  store i32 %v0_b9f8, i32* %r3.global-to-local, align 4
  store i32 %v2_b9ec, i32* %fp.global-to-local, align 4
  %v0_ba00 = load i32, i32* @r4, align 4
  %v5_ba04 = inttoptr i32 %v0_b9f0 to i32*
  %v6_ba04 = call i32 @function_829c(i32 %v0_ba00, i32* %v5_ba04, i32 2, i32 %v0_b9f8, i32 ptrtoint (i32* @0 to i32))
  %v1_ba10 = urem i32 %v6_ba04, 256
  store i32 %v1_ba10, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ba1c = load i32, i32* @r4, align 4
  %v0_ba20 = load i32, i32* @r5, align 4
  %v5_ba24 = trunc i32 %v6_ba04 to i8
  %v6_ba28 = inttoptr i32 %v0_ba20 to i32*
  %v7_ba28 = call i32 @function_829c(i32 %v0_ba1c, i32* %v6_ba28, i32 3, i32 65535, i32 %v6_ba04)
  %v0_ba2c = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ba38 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_ba40 = inttoptr i32 %v0_ba2c to i32*
  %v6_ba40 = call i32 @function_829c(i32 %v0_ba38, i32* %v5_ba40, i32 4, i32 64, i32 %v7_ba28)
  %v1_ba48 = urem i32 %v6_ba40, 256
  store i32 %v1_ba48, i32* %ip.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ba54 = load i32, i32* @r7, align 4
  store i32 %v0_ba54, i32* %r3.global-to-local, align 4
  %v0_ba58 = load i32, i32* @r4, align 4
  %sext8 = mul i32 %v6_ba40, 16777216
  %v5_ba60 = sdiv i32 %sext8, 16777216
  %v6_ba60 = inttoptr i32 %v0_ba4c to i32*
  %v7_ba60 = call i32 @function_829c(i32 %v0_ba58, i32* %v6_ba60, i32 5, i32 %v0_ba54, i32 %v5_ba60)
  %v1_ba6c = urem i32 %v7_ba60, 256
  store i32 %v1_ba6c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ba78 = load i32, i32* @r4, align 4
  %v0_ba7c = load i32, i32* @r5, align 4
  %v5_ba84 = inttoptr i32 %v0_ba7c to i32*
  %v6_ba84 = call i32 @function_829c(i32 %v0_ba78, i32* %v5_ba84, i32 6, i32 65535, i32 %v1_ba6c)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ba94 = load i32, i32* @r5, align 4
  store i32 %v6_ba84, i32* @r8, align 4
  %v0_ba9c = load i32, i32* @r4, align 4
  %v5_baa0 = inttoptr i32 %v0_ba94 to i32*
  %v6_baa0 = call i32 @function_829c(i32 %v0_ba9c, i32* %v5_baa0, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_baa0, i32* @r4, align 4
  %v0_baa8 = load i32, i32* @r7, align 4
  store i32 %v0_baa8, i32* %stack_var_-44, align 4
  %v1_bab0 = inttoptr i32 %v0_baa8 to i32*
  %v2_bab0 = call i32 @function_125b0(i32* %v1_bab0)
  %v1_bab4 = load i32, i32* @r6, align 4
  %v2_bab4 = add i32 %v1_bab4, %v2_bab0
  %v1_bac0 = call i32 @function_110fc(i32 29)
  %v3_bacc = call i32 @function_11018(i32 29, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_bae0 = call i32 @function_12bfc(i32 2, i32 3, i32 17)
  %v7_bae4 = icmp eq i32 %v3_bae0, -1
  store i1 %v7_bae4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bae0, i32* %sb.global-to-local, align 4
  br i1 %v7_bae4, label %dec_label_pc_bea0, label %dec_label_pc_baf0

dec_label_pc_baf0:                                ; preds = %dec_label_pc_b9bc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_baf8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_baf8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_bb00 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bb0c = call i32 @function_12bcc(i32 %v3_bae0, i32 %v0_bb00, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_bb10 = icmp eq i32 %v6_bb0c, -1
  store i1 %v7_bb10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb10, label %dec_label_pc_bea8, label %dec_label_pc_bb18

dec_label_pc_bb18:                                ; preds = %dec_label_pc_baf0
  %v0_bb1c = load i32, i32* @r4, align 4
  %v3_bb1c = mul i32 %v0_bb1c, 65536
  store i32 %v3_bb1c, i32* @lr, align 4
  %v3_bb28 = urem i32 %v7_ba28, 65536
  %v0_bb2c = load i32, i32* @r8, align 4
  %v3_bb2c = mul i32 %v0_bb2c, 65536
  store i32 %v3_bb2c, i32* %ip.global-to-local, align 4
  %v2_bb30 = icmp eq i32 %v1_b9c0, 0
  store i1 %v2_bb30, i1* %cpsr_z.global-to-local, align 1
  %v3_bb38 = urem i32 %v0_bb2c, 65536
  store i32 %v3_bb38, i32* %r4.global-to-local, align 4
  %v3_bb3c = urem i32 %v0_bb1c, 65536
  store i32 %v3_bb3c, i32* %r3.global-to-local, align 4
  %v0_bb40 = load i32, i32* @r7, align 4
  store i32 %v0_bb40, i32* %stack_var_-40, align 4
  br i1 %v2_bb30, label %dec_label_pc_be8c.critedge, label %dec_label_pc_bb50

dec_label_pc_bb50:                                ; preds = %dec_label_pc_bb18
  %v1_bb50 = urem i32 %v0_bb2c, 256
  %v1_bb58 = urem i32 %v0_bb1c, 256
  %tmp41 = udiv i32 %v7_ba28, 256
  %v3_bb5c = urem i32 %tmp41, 256
  %v3_bb64 = mul nuw nsw i32 %v1_bb58, 256
  %v1_bb60 = mul i32 %v7_ba28, 256
  %v4_bb68 = and i32 %v1_bb60, 65280
  %v5_bb68 = or i32 %v4_bb68, %v3_bb5c
  store i32 %v5_bb68, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_bb1c, 256
  %v4_bb70 = urem i32 %tmp42, 256
  %v5_bb70 = or i32 %v4_bb70, %v3_bb64
  store i32 %v5_bb70, i32* @r5, align 4
  %v3_bb74 = mul nuw nsw i32 %v1_bb50, 256
  store i32 %v3_bb74, i32* %r2.global-to-local, align 4
  %v5_bb78 = trunc i32 %v7_ba28 to i8
  store i32 %v1_bb58, i32* %r3.global-to-local, align 4
  %tmp43 = udiv i32 %v0_bb2c, 256
  %v4_bb80 = urem i32 %tmp43, 256
  %v5_bb80 = or i32 %v4_bb80, %v3_bb74
  store i32 %v5_bb80, i32* @r6, align 4
  store i32 %v0_bb40, i32* @r4, align 4
  store i32 %v1_bb50, i32* @r7, align 4
  %v4_bbfc = sext i8 %v5_bb78 to i32
  %sext = mul i32 %v0_bb1c, 16777216
  %v4_bc74 = sdiv i32 %sext, 16777216
  %v1_bbf4 = trunc i32 %v5_ba60 to i8
  br label %dec_label_pc_bb90

dec_label_pc_bb90:                                ; preds = %bb47, %dec_label_pc_bb50
  %v2_bb98 = call i32 @function_12ee8(i32 128, i32 1)
  %v3_bb9c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb9c, i32* %r3.global-to-local, align 4
  %v1_bba0 = load i32, i32* %fp.global-to-local, align 4
  %v2_bba0 = load i32, i32* @r4, align 4
  %v5_bba0 = mul i32 %v2_bba0, 4
  %v6_bba0 = add i32 %v5_bba0, %v1_bba0
  %v7_bba0 = inttoptr i32 %v6_bba0 to i32*
  store i32 %v2_bb98, i32* %v7_bba0, align 4
  %v0_bba4 = load i32, i32* %fp.global-to-local, align 4
  %v1_bba4 = load i32, i32* %r3.global-to-local, align 4
  %v4_bba4 = mul i32 %v1_bba4, 4
  %v5_bba4 = add i32 %v4_bba4, %v0_bba4
  %v6_bba4 = inttoptr i32 %v5_bba4 to i32*
  %v7_bba4 = load i32, i32* %v6_bba4, align 4
  store i32 %v7_bba4, i32* @lr, align 4
  %v1_bba8 = inttoptr i32 %v7_bba4 to i8*
  %v2_bba8 = load i8, i8* %v1_bba8, align 1
  %tmp = urem i8 %v2_bba8, 16
  %v1_bbac = zext i8 %tmp to i32
  %v1_bbb0 = or i32 %v1_bbac, 64
  store i32 %v1_bbb0, i32* %r3.global-to-local, align 4
  %v1_bbb8 = trunc i32 %v1_bbb0 to i8
  store i8 %v1_bbb8, i8* %v1_bba8, align 1
  %v0_bbbc = load i32, i32* @lr, align 4
  %v1_bbbc = inttoptr i32 %v0_bbbc to i8*
  %v2_bbbc = load i8, i8* %v1_bbbc, align 1
  %v1_bbc0 = and i8 %v2_bbbc, -16
  %v1_bbc4 = or i8 %v1_bbc0, 5
  store i8 %v1_bbc4, i8* %v1_bbbc, align 1
  %v2_bbd0 = load i32, i32* @lr, align 4
  %v3_bbd0 = add i32 %v2_bbd0, 1
  %v4_bbd0 = inttoptr i32 %v3_bbd0 to i8*
  store i8 %v5_ba24, i8* %v4_bbd0, align 1
  %v3_bbd4 = load i32, i32* %stack_var_-44, align 4
  %v1_bbd8 = add i32 %v3_bbd4, 32
  %tmp44 = mul i32 %v1_bbd8, 256
  store i32 %v5_ba60, i32* %r4.global-to-local, align 4
  %v1_bbe8 = and i32 %tmp44, 65280
  %tmp45 = udiv i32 %v1_bbd8, 256
  %v4_bbec = urem i32 %tmp45, 256
  %v5_bbec = or i32 %v4_bbec, %v1_bbe8
  store i32 %v5_bbec, i32* %r2.global-to-local, align 4
  store i32 %v1_ba6c, i32* %r3.global-to-local, align 4
  %v2_bbf4 = load i32, i32* @lr, align 4
  %v3_bbf4 = add i32 %v2_bbf4, 8
  %v4_bbf4 = inttoptr i32 %v3_bbf4 to i8*
  store i8 %v1_bbf4, i8* %v4_bbf4, align 1
  %v0_bbf8 = load i32, i32* %r3.global-to-local, align 4
  %v2_bbf8 = icmp eq i32 %v0_bbf8, 0
  store i1 %v2_bbf8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_bbfc, i32* %r3.global-to-local, align 4
  %v2_bc00 = load i32, i32* @lr, align 4
  %v3_bc00 = add i32 %v2_bc00, 5
  %v4_bc00 = inttoptr i32 %v3_bc00 to i8*
  store i8 %v5_bb78, i8* %v4_bc00, align 1
  %v0_bc04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc04, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bb90
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bc08 = load i32, i32* @lr, align 4
  %v4_bc08 = add i32 %v3_bc08, 6
  %v5_bc08 = inttoptr i32 %v4_bc08 to i8*
  store i8 64, i8* %v5_bc08, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bb90, %bb
  %v2_bc10 = load i32, i32* @lr, align 4
  %v3_bc10 = add i32 %v2_bc10, 9
  %v4_bc10 = inttoptr i32 %v3_bc10 to i8*
  store i8 17, i8* %v4_bc10, align 1
  %v0_bc14 = load i32, i32* %r2.global-to-local, align 4
  %v3_bc14 = sdiv i32 %v0_bc14, 256
  store i32 %v3_bc14, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d900.47 to i32), i32* %r3.global-to-local, align 4
  %v1_bc1c = trunc i32 %v0_bc14 to i8
  %v2_bc1c = load i32, i32* @lr, align 4
  %v3_bc1c = add i32 %v2_bc1c, 2
  %v4_bc1c = inttoptr i32 %v3_bc1c to i8*
  store i8 %v1_bc1c, i8* %v4_bc1c, align 1
  %v0_bc20 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc20 = trunc i32 %v0_bc20 to i8
  %v2_bc20 = load i32, i32* @lr, align 4
  %v3_bc20 = add i32 %v2_bc20, 3
  %v4_bc20 = inttoptr i32 %v3_bc20 to i8*
  store i8 %v1_bc20, i8* %v4_bc20, align 1
  %v0_bc24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc24, label %.thread6, label %bb46

.thread6:                                         ; preds = %.thread
  %v3_bc287 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc287, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_bc28 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc28, i32* %ip.global-to-local, align 4
  %v3_bc2c = load i32, i32* @lr, align 4
  %v4_bc2c = add i32 %v3_bc2c, 7
  %v5_bc2c = inttoptr i32 %v4_bc2c to i8*
  store i8 0, i8* %v5_bc2c, align 1
  %v0_bc34.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread6, %bb46
  %v0_bc34 = phi i32 [ %v3_bc287, %.thread6 ], [ %v0_bc34.pre, %bb46 ]
  %v2_bc30 = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_bc30, i32* %r2.global-to-local, align 4
  %v3_bc34 = mul i32 %v0_bc34, 32
  store i32 %v3_bc34, i32* %r3.global-to-local, align 4
  %v1_bc38 = load i32, i32* @lr, align 4
  %v2_bc38 = add i32 %v1_bc38, 12
  %v3_bc38 = inttoptr i32 %v2_bc38 to i32*
  store i32 %v2_bc30, i32* %v3_bc38, align 4
  %v0_bc3c = load i32, i32* %r3.global-to-local, align 4
  %v1_bc3c = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_bc3c, -8
  %v5_bc3c = add i32 %v0_bc3c, %tmp52
  %v1_bc40 = load i32, i32* @sl, align 4
  %v2_bc40 = add i32 %v5_bc3c, %v1_bc40
  store i32 %v2_bc40, i32* %r3.global-to-local, align 4
  %v1_bc44 = add i32 %v2_bc40, 16
  %v2_bc44 = inttoptr i32 %v1_bc44 to i32*
  %v3_bc44 = load i32, i32* %v2_bc44, align 4
  %v1_bc48 = load i32, i32* @lr, align 4
  %v2_bc48 = add i32 %v1_bc48, 16
  %v3_bc48 = inttoptr i32 %v2_bc48 to i32*
  store i32 %v3_bc44, i32* %v3_bc48, align 4
  %v3_bc4c = load i32, i32* %stack_var_-44, align 4
  %v1_bc50 = add i32 %v3_bc4c, 12
  %tmp48 = mul i32 %v1_bc50, 256
  %v1_bc5c = and i32 %tmp48, 65280
  %tmp49 = udiv i32 %v1_bc50, 256
  %v4_bc60 = urem i32 %tmp49, 256
  %v5_bc60 = or i32 %v4_bc60, %v1_bc5c
  store i32 %v5_bc60, i32* %ip.global-to-local, align 4
  %v0_bc64 = load i32, i32* @lr, align 4
  %v1_bc64 = add i32 %v0_bc64, 20
  store i32 %v1_bc64, i32* %r4.global-to-local, align 4
  %v3_bc685 = udiv i32 %v1_bc5c, 256
  store i32 %v3_bc685, i32* %r3.global-to-local, align 4
  %v0_bc6c = load i32, i32* %r8.global-to-local, align 4
  %v1_bc6c = trunc i32 %v0_bc6c to i8
  %v3_bc6c = add i32 %v0_bc64, 4
  %v4_bc6c = inttoptr i32 %v3_bc6c to i8*
  store i8 %v1_bc6c, i8* %v4_bc6c, align 1
  %v0_bc70 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc70 = trunc i32 %v0_bc70 to i8
  %v2_bc70 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc70 = add i32 %v2_bc70, 5
  %v4_bc70 = inttoptr i32 %v3_bc70 to i8*
  store i8 %v1_bc70, i8* %v4_bc70, align 1
  store i32 %v4_bc74, i32* %r3.global-to-local, align 4
  %v1_bc7c = load i32, i32* @lr, align 4
  %v2_bc7c = add i32 %v1_bc7c, 28
  %v3_bc7c = inttoptr i32 %v2_bc7c to i32*
  store i32 -1, i32* %v3_bc7c, align 4
  %v0_bc80 = load i32, i32* @r6, align 4
  %v1_bc80 = trunc i32 %v0_bc80 to i8
  %v2_bc80 = load i32, i32* @lr, align 4
  %v3_bc80 = add i32 %v2_bc80, 20
  %v4_bc80 = inttoptr i32 %v3_bc80 to i8*
  store i8 %v1_bc80, i8* %v4_bc80, align 1
  %v0_bc84 = load i32, i32* @r5, align 4
  %v1_bc84 = trunc i32 %v0_bc84 to i8
  %v2_bc84 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc84 = add i32 %v2_bc84, 2
  %v4_bc84 = inttoptr i32 %v3_bc84 to i8*
  store i8 %v1_bc84, i8* %v4_bc84, align 1
  %v0_bc88 = load i32, i32* @r7, align 4
  %v1_bc88 = trunc i32 %v0_bc88 to i8
  %v2_bc88 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc88 = add i32 %v2_bc88, 1
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 %v1_bc88, i8* %v4_bc88, align 1
  %v0_bc8c = load i32, i32* @lr, align 4
  %v1_bc8c = add i32 %v0_bc8c, 32
  %v0_bc90 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc90 = trunc i32 %v0_bc90 to i8
  %v2_bc90 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc90 = add i32 %v2_bc90, 3
  %v4_bc90 = inttoptr i32 %v3_bc90 to i8*
  store i8 %v1_bc90, i8* %v4_bc90, align 1
  %v0_bc94 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc94 = trunc i32 %v0_bc94 to i8
  %v2_bc94 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc94 = add i32 %v2_bc94, 4
  %v4_bc94 = inttoptr i32 %v3_bc94 to i8*
  store i8 %v1_bc94, i8* %v4_bc94, align 1
  %v3_bc98 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc98, i32* %r2.global-to-local, align 4
  %v3_bc9c = call i32 @function_11a58(i32 %v1_bc8c, i32 %v3_bacc, i32 %v3_bc98)
  %v3_bca0 = load i32, i32* %stack_var_-40, align 4
  %v1_bca4 = add i32 %v3_bca0, 1
  store i32 %v1_bca4, i32* @r4, align 4
  store i32 %v1_b9c0, i32* %r3.global-to-local, align 4
  %v9_bcac = icmp eq i32 %v1_bca4, %v1_b9c0
  store i1 %v9_bcac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bca4, i32* %stack_var_-40, align 4
  %v5_bcb4 = icmp slt i32 %v1_bca4, %v1_b9c0
  br i1 %v5_bcb4, label %dec_label_pc_bb90, label %dec_label_pc_bcb8

dec_label_pc_bcb8:                                ; preds = %bb47, %dec_label_pc_be8c
  store i32 %v1_b9c0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_bb30, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_bb30, label %dec_label_pc_be8c, label %dec_label_pc_bccc

dec_label_pc_bccc:                                ; preds = %dec_label_pc_bcb8
  store i32 0, i32* %r8.global-to-local, align 4
  %v3_bcdc = icmp eq i32 %v3_bb28, 65535
  br label %dec_label_pc_bdb0

dec_label_pc_bcd8:                                ; preds = %dec_label_pc_bdb0
  store i32 %v3_bb28, i32* %r3.global-to-local, align 4
  store i1 %v3_bcdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bcdc, label %dec_label_pc_be40, label %dec_label_pc_bce4

dec_label_pc_bce4:                                ; preds = %dec_label_pc_bdd8, %dec_label_pc_bcd8
  %v1_bce8 = phi i32 [ %v1_be38, %dec_label_pc_bdd8 ], [ 65535, %dec_label_pc_bcd8 ]
  %v9_bce8 = icmp eq i32 %v3_bb38, %v1_bce8
  store i1 %v9_bce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bce8, label %dec_label_pc_be5c, label %dec_label_pc_bcf0

dec_label_pc_bcf0:                                ; preds = %dec_label_pc_be40.dec_label_pc_bcf0_crit_edge, %dec_label_pc_bce4
  %v1_bcf4 = phi i32 [ %v1_bcf4.pre, %dec_label_pc_be40.dec_label_pc_bcf0_crit_edge ], [ %v1_bce8, %dec_label_pc_bce4 ]
  store i32 %v3_bb3c, i32* %r3.global-to-local, align 4
  %v9_bcf4 = icmp eq i32 %v3_bb3c, %v1_bcf4
  store i1 %v9_bcf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcf4, label %dec_label_pc_be78, label %dec_label_pc_bcfc

dec_label_pc_bcfc:                                ; preds = %dec_label_pc_be5c, %dec_label_pc_bcf0, %dec_label_pc_be78
  %v0_bd00 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd00 = trunc i32 %v0_bd00 to i8
  %v2_bd00 = load i32, i32* @r5, align 4
  %v3_bd00 = add i32 %v2_bd00, 10
  %v4_bd00 = inttoptr i32 %v3_bd00 to i8*
  store i8 %v1_bd00, i8* %v4_bd00, align 1
  %v0_bd04 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd04 = trunc i32 %v0_bd04 to i8
  %v2_bd04 = load i32, i32* @r5, align 4
  %v3_bd04 = add i32 %v2_bd04, 11
  %v4_bd04 = inttoptr i32 %v3_bd04 to i8*
  store i8 %v1_bd04, i8* %v4_bd04, align 1
  %v0_bd08 = load i32, i32* @r5, align 4
  store i32 %v0_bd08, i32* @r0, align 4
  %v2_bd0c = call i32 @function_c688(i32 %v0_bd08, i32 20)
  %v3_bd0c = trunc i32 %v2_bd0c to i8
  %v4_bd10 = sdiv i32 %v2_bd0c, 256
  store i32 %v4_bd10, i32* %r3.global-to-local, align 4
  %v1_bd14 = trunc i32 %v4_bd10 to i8
  %v2_bd14 = load i32, i32* @r5, align 4
  %v3_bd14 = add i32 %v2_bd14, 11
  %v4_bd14 = inttoptr i32 %v3_bd14 to i8*
  store i8 %v1_bd14, i8* %v4_bd14, align 1
  %v3_bd18 = load i32, i32* @r5, align 4
  %v4_bd18 = add i32 %v3_bd18, 10
  %v5_bd18 = inttoptr i32 %v4_bd18 to i8*
  store i8 %v3_bd0c, i8* %v5_bd18, align 1
  %v0_bd1c = load i32, i32* %r8.global-to-local, align 4
  %v1_bd1c = trunc i32 %v0_bd1c to i8
  %v2_bd1c = load i32, i32* @r6, align 4
  %v3_bd1c = add i32 %v2_bd1c, 6
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v0_bd20 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd20 = trunc i32 %v0_bd20 to i8
  %v2_bd20 = load i32, i32* @r6, align 4
  %v3_bd20 = add i32 %v2_bd20, 7
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v0_bd24 = load i32, i32* @r5, align 4
  %v1_bd24 = add i32 %v0_bd24, 24
  %v2_bd24 = inttoptr i32 %v1_bd24 to i8*
  %v3_bd24 = load i8, i8* %v2_bd24, align 1
  %v4_bd24 = zext i8 %v3_bd24 to i32
  store i32 %v4_bd24, i32* %r3.global-to-local, align 4
  %v1_bd28 = add i32 %v0_bd24, 25
  %v2_bd28 = inttoptr i32 %v1_bd28 to i8*
  %v3_bd28 = load i8, i8* %v2_bd28, align 1
  %v4_bd28 = zext i8 %v3_bd28 to i32
  %v4_bd2c = mul nuw nsw i32 %v4_bd28, 256
  %v5_bd2c = or i32 %v4_bd2c, %v4_bd24
  store i32 %v5_bd2c, i32* %r2.global-to-local, align 4
  %v3_bd30 = load i32, i32* %stack_var_-44, align 4
  %v0_bd34 = load i32, i32* @r6, align 4
  store i32 %v0_bd34, i32* @r1, align 4
  %v1_bd38 = add i32 %v3_bd30, 12
  store i32 %v1_bd38, i32* %r3.global-to-local, align 4
  %v4_bd40 = call i32 @function_c6e4(i32 %v0_bd24, i32 %v0_bd34, i32 %v5_bd2c, i32 %v1_bd38)
  %v5_bd40 = trunc i32 %v4_bd40 to i8
  %v4_bd4414 = udiv i32 %v4_bd40, 256
  %v1_bd48 = trunc i32 %v4_bd4414 to i8
  %v2_bd48 = load i32, i32* @r6, align 4
  %v3_bd48 = add i32 %v2_bd48, 7
  %v4_bd48 = inttoptr i32 %v3_bd48 to i8*
  store i8 %v1_bd48, i8* %v4_bd48, align 1
  %v3_bd4c = load i32, i32* @r6, align 4
  %v4_bd4c = add i32 %v3_bd4c, 6
  %v5_bd4c = inttoptr i32 %v4_bd4c to i8*
  store i8 %v5_bd40, i8* %v5_bd4c, align 1
  %v3_bd50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd50, i32* %r3.global-to-local, align 4
  %v0_bd54 = load i32, i32* @r5, align 4
  %v1_bd54 = add i32 %v0_bd54, 20
  %v2_bd54 = inttoptr i32 %v1_bd54 to i32*
  %v3_bd54 = load i32, i32* %v2_bd54, align 4
  %v5_bd5c = mul i32 %v3_bd50, 24
  %v1_bd60 = load i32, i32* @sl, align 4
  %v2_bd60 = add i32 %v1_bd60, %v5_bd5c
  store i32 %v2_bd60, i32* %ip.global-to-local, align 4
  %v3_bd64 = udiv i32 %v3_bd54, 65536
  store i32 %v3_bd64, i32* %r2.global-to-local, align 4
  %v1_bd68 = trunc i32 %v3_bd64 to i8
  %v3_bd68 = add i32 %v2_bd60, 2
  %v4_bd68 = inttoptr i32 %v3_bd68 to i8*
  store i8 %v1_bd68, i8* %v4_bd68, align 1
  %v0_bd6c = load i32, i32* %r2.global-to-local, align 4
  %v3_bd6c15 = udiv i32 %v0_bd6c, 256
  %v3_bd70 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bd70, i32* %r2.global-to-local, align 4
  %v1_bd74 = trunc i32 %v3_bd6c15 to i8
  %v2_bd74 = load i32, i32* %ip.global-to-local, align 4
  %v3_bd74 = add i32 %v2_bd74, 3
  %v4_bd74 = inttoptr i32 %v3_bd74 to i8*
  store i8 %v1_bd74, i8* %v4_bd74, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bd80 = load i32, i32* @r5, align 4
  %v0_bd84 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd84 = add i32 %v0_bd84, 32
  store i32 %v1_bd84, i32* %r2.global-to-local, align 4
  %v0_bd88 = load i32, i32* %sb.global-to-local, align 4
  %v0_bd90 = load i32, i32* %ip.global-to-local, align 4
  %v6_bd94 = inttoptr i32 %v0_bd80 to i32*
  %v7_bd94 = call i32 @function_12b98(i32 %v0_bd88, i32* %v6_bd94, i32 %v1_bd84, i32 16384, i32 %v0_bd90, i32 16)
  %v3_bd98 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd98, i32* %r3.global-to-local, align 4
  store i32 %v1_b9c0, i32* @r4, align 4
  %v1_bda0 = add i32 %v3_bd98, 1
  %v9_bda4 = icmp eq i32 %v1_bda0, %v1_b9c0
  store i1 %v9_bda4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bda0, i32* %stack_var_-40, align 4
  %v6_bdac = icmp slt i32 %v1_bda0, %v1_b9c0
  br i1 %v6_bdac, label %dec_label_pc_bdb0, label %dec_label_pc_be8c

dec_label_pc_bdb0:                                ; preds = %dec_label_pc_bcfc, %dec_label_pc_bccc
  %v1_bdc0 = phi i32 [ %v1_bda0, %dec_label_pc_bcfc ], [ 0, %dec_label_pc_bccc ]
  %v5_bdb4 = mul i32 %v1_bdc0, 24
  %v1_bdb8 = load i32, i32* @sl, align 4
  %v2_bdb8 = add i32 %v1_bdb8, %v5_bdb4
  store i32 %v2_bdb8, i32* %r3.global-to-local, align 4
  %v1_bdbc = add i32 %v2_bdb8, 20
  %v2_bdbc = inttoptr i32 %v1_bdbc to i8*
  %v3_bdbc = load i8, i8* %v2_bdbc, align 1
  %v4_bdbc = zext i8 %v3_bdbc to i32
  store i32 %v4_bdbc, i32* %r2.global-to-local, align 4
  %v0_bdc0 = load i32, i32* %fp.global-to-local, align 4
  %v4_bdc0 = mul i32 %v1_bdc0, 4
  %v5_bdc0 = add i32 %v0_bdc0, %v4_bdc0
  %v6_bdc0 = inttoptr i32 %v5_bdc0 to i32*
  %v7_bdc0 = load i32, i32* %v6_bdc0, align 4
  store i32 %v7_bdc0, i32* @r5, align 4
  %v2_bdc8 = icmp ugt i8 %v3_bdbc, 30
  %v7_bdc8 = icmp eq i8 %v3_bdbc, 31
  store i1 %v7_bdc8, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_bdd0 = add i32 %v7_bdc0, 20
  store i32 %v1_bdd0, i32* @r6, align 4
  %v2_bdd4 = xor i1 %v7_bdc8, true
  %v3_bdd4 = and i1 %v2_bdc8, %v2_bdd4
  br i1 %v3_bdd4, label %dec_label_pc_bcd8, label %dec_label_pc_bdd8

dec_label_pc_bdd8:                                ; preds = %dec_label_pc_bdb0
  %v1_bdd8 = add i32 %v2_bdb8, 16
  %v2_bdd8 = inttoptr i32 %v1_bdd8 to i32*
  %v3_bdd8 = load i32, i32* %v2_bdd8, align 4
  store i32 %v3_bdd8, i32* %r4.global-to-local, align 4
  %v0_bddc = call i32 @function_e240()
  %v3_bde0 = load i32, i32* %stack_var_-40, align 4
  %v5_bde8 = mul i32 %v3_bde0, 24
  %v1_bdf0 = and i32 %v3_bdd8, 65280
  store i32 %v1_bdf0, i32* %r3.global-to-local, align 4
  %v1_bdec = udiv i32 %v3_bdd8, 256
  %v3_bdf4 = and i32 %v1_bdec, 65280
  store i32 %v3_bdf4, i32* %r2.global-to-local, align 4
  %v1_bdf8 = load i32, i32* @sl, align 4
  %v2_bdf8 = add i32 %v1_bdf8, %v5_bde8
  store i32 %v2_bdf8, i32* %ip.global-to-local, align 4
  %v1_be04 = add i32 %v2_bdf8, 20
  %v2_be04 = inttoptr i32 %v1_be04 to i8*
  %v3_be04 = load i8, i8* %v2_be04, align 1
  %v4_be04 = zext i8 %v3_be04 to i32
  %v2_be0c = call i32 @llvm.bswap.i32(i32 %v3_bdd8)
  %v7_be10 = lshr i32 %v0_bddc, %v4_be04
  %v8_be10 = add i32 %v7_be10, %v2_be0c
  store i32 %v8_be10, i32* %r2.global-to-local, align 4
  %v2_be2c = call i32 @llvm.bswap.i32(i32 %v8_be10)
  %v1_be30 = load i32, i32* @r5, align 4
  %v2_be30 = add i32 %v1_be30, 16
  %v3_be30 = inttoptr i32 %v2_be30 to i32*
  store i32 %v2_be2c, i32* %v3_be30, align 4
  store i32 %v3_bb28, i32* %r3.global-to-local, align 4
  %v1_be38 = load i32, i32* %r7.global-to-local, align 4
  %v9_be38 = icmp eq i32 %v3_bb28, %v1_be38
  store i1 %v9_be38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_be38, label %dec_label_pc_be40, label %dec_label_pc_bce4

dec_label_pc_be40:                                ; preds = %dec_label_pc_bdd8, %dec_label_pc_bcd8
  %v0_be40 = call i32 @function_e240()
  %v1_be40 = trunc i32 %v0_be40 to i8
  %v4_be48 = sdiv i32 %v0_be40, 256
  store i32 %v4_be48, i32* %r3.global-to-local, align 4
  %v1_be4c = load i32, i32* %r7.global-to-local, align 4
  %v9_be4c = icmp eq i32 %v3_bb38, %v1_be4c
  store i1 %v9_be4c, i1* %cpsr_z.global-to-local, align 1
  %v1_be50 = trunc i32 %v4_be48 to i8
  %v2_be50 = load i32, i32* @r5, align 4
  %v3_be50 = add i32 %v2_be50, 5
  %v4_be50 = inttoptr i32 %v3_be50 to i8*
  store i8 %v1_be50, i8* %v4_be50, align 1
  %v3_be54 = load i32, i32* @r5, align 4
  %v4_be54 = add i32 %v3_be54, 4
  %v5_be54 = inttoptr i32 %v4_be54 to i8*
  store i8 %v1_be40, i8* %v5_be54, align 1
  %v0_be58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be58, label %dec_label_pc_be5c, label %dec_label_pc_be40.dec_label_pc_bcf0_crit_edge

dec_label_pc_be40.dec_label_pc_bcf0_crit_edge:    ; preds = %dec_label_pc_be40
  %v1_bcf4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bcf0

dec_label_pc_be5c:                                ; preds = %dec_label_pc_be40, %dec_label_pc_bce4
  %v0_be5c = call i32 @function_e240()
  %v1_be5c = trunc i32 %v0_be5c to i8
  %v4_be60 = sdiv i32 %v0_be5c, 256
  store i32 %v4_be60, i32* %r3.global-to-local, align 4
  %v3_be64 = load i32, i32* @r5, align 4
  %v4_be64 = add i32 %v3_be64, 20
  %v5_be64 = inttoptr i32 %v4_be64 to i8*
  store i8 %v1_be5c, i8* %v5_be64, align 1
  %v0_be68 = load i32, i32* %r3.global-to-local, align 4
  %v1_be68 = trunc i32 %v0_be68 to i8
  %v2_be68 = load i32, i32* @r6, align 4
  %v3_be68 = add i32 %v2_be68, 1
  %v4_be68 = inttoptr i32 %v3_be68 to i8*
  store i8 %v1_be68, i8* %v4_be68, align 1
  store i32 %v3_bb3c, i32* %r3.global-to-local, align 4
  %v1_be70 = load i32, i32* %r7.global-to-local, align 4
  %v9_be70 = icmp eq i32 %v3_bb3c, %v1_be70
  store i1 %v9_be70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_be70, label %dec_label_pc_be78, label %dec_label_pc_bcfc

dec_label_pc_be78:                                ; preds = %dec_label_pc_be5c, %dec_label_pc_bcf0
  %v0_be78 = call i32 @function_e240()
  %v1_be78 = trunc i32 %v0_be78 to i8
  %v4_be7c = sdiv i32 %v0_be78, 256
  store i32 %v4_be7c, i32* %r3.global-to-local, align 4
  %v1_be80 = trunc i32 %v4_be7c to i8
  %v2_be80 = load i32, i32* @r6, align 4
  %v3_be80 = add i32 %v2_be80, 3
  %v4_be80 = inttoptr i32 %v3_be80 to i8*
  store i8 %v1_be80, i8* %v4_be80, align 1
  %v3_be84 = load i32, i32* @r6, align 4
  %v4_be84 = add i32 %v3_be84, 2
  %v5_be84 = inttoptr i32 %v4_be84 to i8*
  store i8 %v1_be78, i8* %v5_be84, align 1
  br label %dec_label_pc_bcfc

dec_label_pc_be8c.critedge:                       ; preds = %dec_label_pc_bb18
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_be8c

dec_label_pc_be8c:                                ; preds = %dec_label_pc_bcfc, %dec_label_pc_be8c.critedge, %dec_label_pc_bcb8
  %v2_be90 = call i32 @function_125b0(i32* null)
  store i32 %v2_bab4, i32* %r3.global-to-local, align 4
  %v9_be98 = icmp eq i32 %v2_bab4, %v2_be90
  store i1 %v9_be98, i1* %cpsr_z.global-to-local, align 1
  %v6_be9c = icmp slt i32 %v2_bab4, %v2_be90
  br i1 %v6_be9c, label %dec_label_pc_bea0, label %dec_label_pc_bcb8

dec_label_pc_bea0:                                ; preds = %dec_label_pc_be8c, %dec_label_pc_b9bc, %dec_label_pc_bea8
  %v29_bea4 = phi i32 [ %v3_bae0, %dec_label_pc_b9bc ], [ %v1_beac, %dec_label_pc_bea8 ], [ %v2_be90, %dec_label_pc_be8c ]
  store i32 %v3_b9bc, i32* %r4.global-to-local, align 4
  store i32 %v12_b9bc, i32* %r7.global-to-local, align 4
  store i32 %v15_b9bc, i32* %r8.global-to-local, align 4
  ret i32 %v29_bea4

dec_label_pc_bea8:                                ; preds = %dec_label_pc_baf0
  %v0_bea8 = load i32, i32* %sb.global-to-local, align 4
  %v1_beac = call i32 @function_122e0(i32 %v0_bea8)
  br label %dec_label_pc_bea0

; uselistorder directives
  uselistorder i32 %v4_be7c, { 1, 0 }
  uselistorder i32 %v4_be48, { 1, 0 }
  uselistorder i32 %v1_be38, { 1, 0 }
  uselistorder i32 %v3_bdd8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_bda0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_bd64, { 1, 0 }
  uselistorder i32 %v4_bd10, { 1, 0 }
  uselistorder i1 %v3_bcdc, { 1, 0 }
  uselistorder i32 %v1_bca4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bc50, { 1, 0 }
  uselistorder i32 %v0_bc14, { 1, 0 }
  uselistorder i32 %v1_bbd8, { 1, 0 }
  uselistorder i8 %v5_bb78, { 1, 0 }
  uselistorder i32 %v3_bb74, { 1, 0 }
  uselistorder i32 %v1_bb58, { 1, 0 }
  uselistorder i32 %v1_bb50, { 1, 0 }
  uselistorder i32 %v3_bb3c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_bb2c, { 0, 1, 3, 2 }
  uselistorder i32 %v3_bb28, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bb1c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bb10, { 1, 0 }
  uselistorder i1 %v7_bae4, { 1, 0 }
  uselistorder i32 %v3_bae0, { 1, 2, 3, 0 }
  uselistorder i32 %v2_bab4, { 2, 1, 0 }
  uselistorder i32 %v1_ba6c, { 1, 2, 0 }
  uselistorder i32 %v5_ba60, { 0, 2, 1 }
  uselistorder i32 %v7_ba28, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v6_ba04, { 1, 2, 0 }
  uselistorder i32 %v1_b9c0, { 1, 2, 3, 0, 4, 5, 6, 8, 7 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 41, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 9, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 9, 0, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 18, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_bea0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_be8c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bcfc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bcb8, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_beb8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_beb8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_beb8 = load i32, i32* @r4, align 4
  %v15_beb8 = load i32, i32* @r8, align 4
  %v21_beb8 = load i32, i32* @sl, align 4
  %v24_beb8 = load i32, i32* @fp, align 4
  %v1_bec4 = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_bec4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bedc = urem i32 %arg4, 256
  store i32 %v1_bedc, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_beec = call i32 @function_12ee8(i32 %v1_bec4, i32 4)
  %v0_bef0 = load i32, i32* @r5, align 4
  store i32 %v0_bef0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_befc = load i32, i32* @r4, align 4
  store i32 %v0_befc, i32* %r0.global-to-local, align 4
  %v0_bf00 = load i32, i32* @r6, align 4
  store i32 %v0_bf00, i32* %r3.global-to-local, align 4
  %v5_bf04 = inttoptr i32 %v0_bef0 to i32*
  %v6_bf04 = call i32 @function_829c(i32 %v0_befc, i32* %v5_bf04, i32 2, i32 %v0_bf00, i32 %v2_beec)
  %v1_bf10 = urem i32 %v6_bf04, 256
  store i32 %v1_bf10, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf1c = load i32, i32* @r4, align 4
  store i32 %v0_bf1c, i32* %r0.global-to-local, align 4
  %v0_bf20 = load i32, i32* @r5, align 4
  store i32 %v0_bf20, i32* %r1.global-to-local, align 4
  %v5_bf24 = trunc i32 %v6_bf04 to i8
  %v6_bf28 = inttoptr i32 %v0_bf20 to i32*
  %v7_bf28 = call i32 @function_829c(i32 %v0_bf1c, i32* %v6_bf28, i32 3, i32 65535, i32 %v6_bf04)
  %v0_bf2c = load i32, i32* @r5, align 4
  store i32 %v0_bf2c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_bf38 = load i32, i32* @r4, align 4
  store i32 %v0_bf38, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_bf40 = inttoptr i32 %v0_bf2c to i32*
  %v6_bf40 = call i32 @function_829c(i32 %v0_bf38, i32* %v5_bf40, i32 4, i32 64, i32 %v7_bf28)
  %v1_bf48 = urem i32 %v6_bf40, 256
  store i32 %v1_bf48, i32* %ip.global-to-local, align 4
  %v0_bf4c = load i32, i32* @r5, align 4
  store i32 %v0_bf4c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf54 = load i32, i32* @r6, align 4
  store i32 %v0_bf54, i32* %r3.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r4, align 4
  store i32 %v0_bf58, i32* %r0.global-to-local, align 4
  %sext38 = mul i32 %v6_bf40, 16777216
  %v5_bf60 = sdiv i32 %sext38, 16777216
  %v6_bf60 = inttoptr i32 %v0_bf4c to i32*
  %v7_bf60 = call i32 @function_829c(i32 %v0_bf58, i32* %v6_bf60, i32 5, i32 %v0_bf54, i32 %v5_bf60)
  %v1_bf6c = urem i32 %v7_bf60, 256
  store i32 %v1_bf6c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bf78 = load i32, i32* @r4, align 4
  store i32 %v0_bf78, i32* %r0.global-to-local, align 4
  %v0_bf7c = load i32, i32* @r5, align 4
  store i32 %v0_bf7c, i32* %r1.global-to-local, align 4
  %v5_bf84 = inttoptr i32 %v0_bf7c to i32*
  %v6_bf84 = call i32 @function_829c(i32 %v0_bf78, i32* %v5_bf84, i32 6, i32 65535, i32 %v1_bf6c)
  %v0_bf88 = load i32, i32* @r5, align 4
  store i32 %v0_bf88, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_bf94 = load i32, i32* @r4, align 4
  store i32 %v0_bf94, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_bf9c = inttoptr i32 %v0_bf88 to i32*
  %v6_bf9c = call i32 @function_829c(i32 %v0_bf94, i32* %v5_bf9c, i32 7, i32 53, i32 %v6_bf84)
  %v0_bfa8 = load i32, i32* @r5, align 4
  store i32 %v0_bfa8, i32* %r1.global-to-local, align 4
  %v0_bfac = load i32, i32* @r4, align 4
  store i32 %v0_bfac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_bfb8 = inttoptr i32 %v0_bfa8 to i32*
  %v6_bfb8 = call i32 @function_829c(i32 %v0_bfac, i32* %v5_bfb8, i32 9, i32 65535, i32 %v6_bf9c)
  %v0_bfbc = load i32, i32* @r5, align 4
  store i32 %v0_bfbc, i32* %r1.global-to-local, align 4
  %v0_bfc4 = load i32, i32* @r6, align 4
  store i32 %v0_bfc4, i32* %r2.global-to-local, align 4
  %v0_bfc8 = load i32, i32* @r4, align 4
  store i32 %v0_bfc8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_bfd0 = inttoptr i32 %v0_bfbc to i32*
  %v6_bfd0 = call i32 @function_829c(i32 %v0_bfc8, i32* %v5_bfd0, i32 %v0_bfc4, i32 12, i32 %v6_bfb8)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_bfd8 = load i32, i32* @r6, align 4
  store i32 %v0_bfd8, i32* %r3.global-to-local, align 4
  %v0_bfdc = load i32, i32* @r5, align 4
  store i32 %v0_bfdc, i32* %r1.global-to-local, align 4
  %v0_bfe4 = load i32, i32* @r4, align 4
  store i32 %v0_bfe4, i32* %r0.global-to-local, align 4
  %v5_bfe8 = inttoptr i32 %v0_bfdc to i32*
  %v6_bfe8 = call i32 @function_81cc(i32 %v0_bfe4, i32* %v5_bfe8, i32 8, i32 %v0_bfd8, i32 %v6_bfd0)
  store i32 %v6_bfe8, i32* @r7, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_bff4 = call i32 @function_110fc(i32 30)
  %v0_bff8 = load i32, i32* @r6, align 4
  store i32 %v0_bff8, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v2_c000 = inttoptr i32 %v0_bff8 to i32*
  %v3_c000 = call i32 @function_11018(i32 30, i32* %v2_c000)
  store i32 %v3_c000, i32* %r0.global-to-local, align 4
  %v0_c004 = load i32, i32* @r6, align 4
  store i32 %v0_c004, i32* %r1.global-to-local, align 4
  %v2_c008 = inttoptr i32 %v3_c000 to i8*
  %v3_c008 = call i32 @function_1240c(i8* %v2_c008, i32 %v0_c004)
  store i32 %v3_c008, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_c014 = call i32 @function_11044(i32 30)
  store i32 %v1_c014, i32* %r0.global-to-local, align 4
  %v0_c018 = load i32, i32* @r4, align 4
  %v1_c018 = load i32, i32* @r6, align 4
  %v9_c018 = icmp eq i32 %v0_c018, %v1_c018
  store i1 %v9_c018, i1* %cpsr_z.global-to-local, align 1
  %v5_c01c = icmp slt i32 %v0_c018, %v1_c018
  br i1 %v5_c01c, label %dec_label_pc_c0f0, label %dec_label_pc_c020

dec_label_pc_c020:                                ; preds = %dec_label_pc_beb8
  %v2_c024 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_c024, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_c024, i32* %r1.global-to-local, align 4
  store i32 %v0_c018, i32* %r0.global-to-local, align 4
  %v4_c034 = call i32 @function_124a8(i32 %v0_c018, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_c034, i32* @r5, align 4
  %v0_c03c = load i32, i32* @r4, align 4
  store i32 %v0_c03c, i32* %r0.global-to-local, align 4
  %v1_c040 = call i32 @function_122e0(i32 %v0_c03c)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_c048 = call i32 @function_110fc(i32 31)
  %v0_c04c = load i32, i32* @r6, align 4
  store i32 %v0_c04c, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v2_c054 = inttoptr i32 %v0_c04c to i32*
  %v3_c054 = call i32 @function_11018(i32 31, i32* %v2_c054)
  %v0_c058 = load i32, i32* @r5, align 4
  store i32 %v0_c058, i32* @r1, align 4
  store i32 %v3_c054, i32* %r2.global-to-local, align 4
  store i32 %v2_c024, i32* %r0.global-to-local, align 4
  %v3_c064 = bitcast i32* %stack_var_-2120 to i8*
  %v4_c064 = call i32 @function_11d30(i8* %v3_c064, i32 %v0_c058, i32 %v3_c054)
  store i32 %v4_c064, i32* %r8.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_c070 = call i32 @function_11044(i32 31)
  store i32 %v1_c070, i32* %r0.global-to-local, align 4
  %v7_c074 = icmp eq i32 %v4_c064, -1
  store i1 %v7_c074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c074, label %dec_label_pc_c0f0, label %dec_label_pc_c07c

dec_label_pc_c07c:                                ; preds = %dec_label_pc_c020
  %v0_c07c = load i32, i32* @r5, align 4
  %v9_c07c = icmp eq i32 %v0_c07c, %v4_c064
  store i1 %v9_c07c, i1* %cpsr_z.global-to-local, align 1
  %v7_c080 = icmp sgt i32 %v0_c07c, %v4_c064
  br i1 %v7_c080, label %dec_label_pc_c084, label %dec_label_pc_c0f0

dec_label_pc_c084:                                ; preds = %dec_label_pc_c07c
  %v2_c07c = sub i32 %v0_c07c, %v4_c064
  store i32 %v2_c07c, i32* %r3.global-to-local, align 4
  %v2_c08c = ptrtoint i32* %stack_var_-72 to i32
  %v0_c090 = load i32, i32* @r6, align 4
  store i32 %v0_c090, i32* %r1.global-to-local, align 4
  store i32 %v4_c064, i32* %r2.global-to-local, align 4
  %v0_c09c = load i32, i32* %sl.global-to-local, align 4
  %v2_c09c = add i32 %v0_c09c, %v4_c064
  store i32 %v2_c09c, i32* %r0.global-to-local, align 4
  store i32 %v2_c08c, i32* @r4, align 4
  %v1_c0ac = add i32 %v0_c07c, -1
  br label %dec_label_pc_c0a4

dec_label_pc_c0a4:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c084
  %v0_c0e8 = phi i32 [ %v1_c0e8, %dec_label_pc_c0e0 ], [ %v2_c08c, %dec_label_pc_c084 ]
  %v0_c0e0 = phi i32 [ %v1_c0e0, %dec_label_pc_c0e0 ], [ %v4_c064, %dec_label_pc_c084 ]
  %v0_c0c8 = phi i32 [ %v0_c0c845, %dec_label_pc_c0e0 ], [ %v0_c090, %dec_label_pc_c084 ]
  %v0_c0a8 = phi i32 [ %v0_c0a841, %dec_label_pc_c0e0 ], [ %v0_c090, %dec_label_pc_c084 ]
  %v0_c0b0 = phi i32 [ %v1_c0b0, %dec_label_pc_c0e0 ], [ %v2_c09c, %dec_label_pc_c084 ]
  %v1_c0a4 = inttoptr i32 %v0_c0b0 to i8*
  %v2_c0a4 = load i8, i8* %v1_c0a4, align 1
  %v3_c0a4 = zext i8 %v2_c0a4 to i32
  store i32 %v3_c0a4, i32* %r3.global-to-local, align 4
  %v2_c0a8 = icmp eq i32 %v0_c0a8, 0
  store i1 %v2_c0a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0ac, i32* %lr.global-to-local, align 4
  %v1_c0b0 = add i32 %v0_c0b0, 1
  store i32 %v1_c0b0, i32* %r0.global-to-local, align 4
  %v1_c0b4 = add nsw i32 %v3_c0a4, -48
  store i32 %v1_c0b4, i32* %ip.global-to-local, align 4
  br i1 %v2_c0a8, label %dec_label_pc_c0bc, label %dec_label_pc_c0cc

dec_label_pc_c0bc:                                ; preds = %dec_label_pc_c0a4
  %v7_c0bc = icmp eq i8 %v2_c0a4, 9
  store i1 %v7_c0bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0bc, label %dec_label_pc_c0e0, label %bb

bb:                                               ; preds = %dec_label_pc_c0bc
  %v8_c0c0 = icmp eq i8 %v2_c0a4, 32
  store i1 %v8_c0c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c0c0, label %dec_label_pc_c0e0, label %dec_label_pc_c0c8

dec_label_pc_c0c8:                                ; preds = %bb
  %v1_c0c8 = add i32 %v0_c0c8, 1
  store i32 %v1_c0c8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c0cc

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c0a4, %dec_label_pc_c0c8
  %v0_c0c846 = phi i32 [ %v0_c0c8, %dec_label_pc_c0a4 ], [ %v1_c0c8, %dec_label_pc_c0c8 ]
  %v0_c0a842 = phi i32 [ %v0_c0a8, %dec_label_pc_c0a4 ], [ %v1_c0c8, %dec_label_pc_c0c8 ]
  %v7_c0cc = icmp eq i8 %v2_c0a4, 46
  store i1 %v7_c0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0cc, label %dec_label_pc_c0d8, label %bb128

bb128:                                            ; preds = %dec_label_pc_c0cc
  %v3_c0d0 = icmp ugt i32 %v1_c0b4, 8
  %v8_c0d0 = icmp eq i32 %v1_c0b4, 9
  store i1 %v8_c0d0, i1* %cpsr_z.global-to-local, align 1
  %v2_c0d4 = xor i1 %v8_c0d0, true
  %v3_c0d4 = and i1 %v3_c0d0, %v2_c0d4
  br i1 %v3_c0d4, label %dec_label_pc_c620, label %dec_label_pc_c0d8

dec_label_pc_c0d8:                                ; preds = %dec_label_pc_c0cc, %bb128
  %v9_c0d8 = icmp eq i32 %v0_c0e0, %v1_c0ac
  store i1 %v9_c0d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0d8, label %dec_label_pc_c620, label %dec_label_pc_c0e0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_c0bc, %dec_label_pc_c0d8, %bb
  %v0_c0c845 = phi i32 [ %v0_c0c8, %dec_label_pc_c0bc ], [ %v0_c0c846, %dec_label_pc_c0d8 ], [ %v0_c0c8, %bb ]
  %v0_c0a841 = phi i32 [ 0, %dec_label_pc_c0bc ], [ %v0_c0a842, %dec_label_pc_c0d8 ], [ 0, %bb ]
  %v1_c0e0 = add i32 %v0_c0e0, 1
  store i32 %v1_c0e0, i32* %r2.global-to-local, align 4
  %v9_c0e4 = icmp eq i32 %v0_c07c, %v1_c0e0
  store i1 %v9_c0e4, i1* %cpsr_z.global-to-local, align 1
  %v1_c0e8 = add i32 %v0_c0e8, 1
  store i32 %v1_c0e8, i32* @r4, align 4
  br i1 %v9_c0e4, label %dec_label_pc_c0f0, label %dec_label_pc_c0a4

dec_label_pc_c0f0:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c07c, %dec_label_pc_c020, %dec_label_pc_beb8
  %v0_c0f0 = call i32 @function_e240()
  %v1_c0f4 = urem i32 %v0_c0f0, 4
  store i32 %v1_c0f4, i32* %r0.global-to-local, align 4
  %v2_c0f8 = icmp eq i32 %v1_c0f4, 3
  store i1 %v2_c0f8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c0f0 to i2
  switch i2 %trunc, label %dec_label_pc_c11c24 [
    i2 0, label %dec_label_pc_c658
    i2 1, label %dec_label_pc_c114
    i2 -2, label %dec_label_pc_c648
    i2 -1, label %dec_label_pc_c66c
  ]

dec_label_pc_c114:                                ; preds = %dec_label_pc_c0f0
  store i32 707416650, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c11c

dec_label_pc_c11c24:                              ; preds = %dec_label_pc_c0f0
  unreachable

dec_label_pc_c11c:                                ; preds = %dec_label_pc_c66c, %dec_label_pc_c658, %dec_label_pc_c648, %dec_label_pc_c620, %dec_label_pc_c114
  %stack_var_-2188.0 = phi i8* [ inttoptr (i32 33686020 to i8*), %dec_label_pc_c66c ], [ inttoptr (i32 104859200 to i8*), %dec_label_pc_c648 ], [ inttoptr (i32 707416650 to i8*), %dec_label_pc_c114 ], [ inttoptr (i32 134744072 to i8*), %dec_label_pc_c658 ], [ %v5_c640, %dec_label_pc_c620 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c120 = call i32 @function_125b0(i32* null)
  %v0_c124 = load i32, i32* @r7, align 4
  %v2_c124 = icmp eq i32 %v0_c124, 0
  store i1 %v2_c124, i1* %cpsr_z.global-to-local, align 1
  %v1_c128 = load i32, i32* %fp.global-to-local, align 4
  %v2_c128 = add i32 %v1_c128, %v2_c120
  store i32 %v2_c128, i32* %r0.global-to-local, align 4
  br i1 %v2_c124, label %dec_label_pc_c5fc, label %dec_label_pc_c134

dec_label_pc_c134:                                ; preds = %dec_label_pc_c11c
  store i32 %v0_c124, i32* %r0.global-to-local, align 4
  %v1_c138 = inttoptr i32 %v0_c124 to i8*
  %v2_c138 = call i32 @function_119dc(i8* %v1_c138)
  %v3_c138 = inttoptr i32 %v2_c138 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c14c = call i32 @function_12bfc(i32 2, i32 3, i32 17)
  store i32 %v3_c14c, i32* %r0.global-to-local, align 4
  %v7_c150 = icmp eq i32 %v3_c14c, -1
  store i1 %v7_c150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c150, label %dec_label_pc_c5fc, label %dec_label_pc_c15c

dec_label_pc_c15c:                                ; preds = %dec_label_pc_c134
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c168 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c168, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c17c = call i32 @function_12bcc(i32 %v3_c14c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_c17c, i32* %r0.global-to-local, align 4
  %v7_c180 = icmp eq i32 %v6_c17c, -1
  store i1 %v7_c180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c180, label %dec_label_pc_c5f4, label %dec_label_pc_c188

dec_label_pc_c188:                                ; preds = %dec_label_pc_c15c
  %v3_c190 = mul i32 %v7_bf28, 65536
  store i32 %v3_c190, i32* %r8.global-to-local, align 4
  %v3_c19c = mul i32 %v6_bf84, 65536
  store i32 %v3_c19c, i32* %r0.global-to-local, align 4
  %v3_c1a0 = mul i32 %v6_bf9c, 65536
  store i32 %v3_c1a0, i32* %sl.global-to-local, align 4
  %v3_c1a4 = mul i32 %v6_bfb8, 65536
  store i32 %v3_c1a4, i32* %fp.global-to-local, align 4
  %v2_c1a8 = icmp eq i32 %v1_bec4, 0
  store i1 %v2_c1a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c1ac = urem i32 %v6_bfd0, 256
  store i32 %v1_c1ac, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c1b4 = urem i32 %v7_bf28, 65536
  %v3_c1b8 = urem i32 %v6_bf84, 65536
  store i32 %v3_c1b8, i32* %ip.global-to-local, align 4
  %v3_c1bc = urem i32 %v6_bf9c, 65536
  store i32 %v3_c1bc, i32* %lr.global-to-local, align 4
  %v3_c1c0 = urem i32 %v6_bfb8, 65536
  store i32 %v3_c1c0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1a8, label %dec_label_pc_c188.dec_label_pc_c444.preheader_crit_edge, label %dec_label_pc_c1dc

dec_label_pc_c188.dec_label_pc_c444.preheader_crit_edge: ; preds = %dec_label_pc_c188
  %.pre = ptrtoint i8* %stack_var_-2188.0 to i32
  br label %dec_label_pc_c444.preheader

dec_label_pc_c1dc:                                ; preds = %dec_label_pc_c188
  %v2_c1e4 = add i32 %v2_c138, %v1_c1ac
  %v3_c1e8 = mul i32 %v2_c1e4, 65536
  %v1_c1ec = add i32 %v3_c1e8, 1769472
  %v1_c1f0 = add i32 %v3_c1e8, 3080192
  %v1_c20c = urem i32 %v6_bfb8, 256
  %tmp129 = udiv i32 %v6_bf84, 256
  %v3_c210 = urem i32 %tmp129, 256
  %v1_c214 = urem i32 %v6_bf84, 256
  %v1_c208 = mul i32 %v7_bf28, 256
  %v3_c21c = and i32 %v1_c208, 65280
  store i32 %v3_c21c, i32* %r1.global-to-local, align 4
  %v1_c224 = urem i32 %v6_bf9c, 256
  %tmp130 = udiv i32 %v7_bf28, 256
  %v3_c22c = udiv i32 %v1_c1ec, 256
  %v1_c234 = and i32 %v3_c22c, 65280
  %tmp131 = udiv i32 %v6_bf9c, 256
  %v4_c244 = udiv i32 %v1_c1ec, 16777216
  %v5_c244 = or i32 %v1_c234, %v4_c244
  store i32 %v5_c244, i32* @r6, align 4
  %v3_c24c = sdiv i32 %v1_c1f0, 16777216
  %sext39 = mul i32 %tmp130, 16777216
  %v7_c24c = sdiv i32 %sext39, 16777216
  %v3_c250 = mul nuw nsw i32 %v1_c20c, 256
  %v4_c258 = mul nuw nsw i32 %v1_c214, 256
  %v5_c258 = or i32 %v4_c258, %v3_c210
  store i32 %v5_c258, i32* %r0.global-to-local, align 4
  %v3_c25c = ashr i32 %v1_c1f0, 31
  %tmp132 = udiv i32 %v6_bfb8, 256
  %v4_c260 = urem i32 %tmp132, 256
  %v5_c260 = or i32 %v4_c260, %v3_c250
  store i32 %v5_c260, i32* @r5, align 4
  %v3_c264 = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_c26c = add i32 %v2_c138, 1
  store i32 %v2_c26c, i32* %fp.global-to-local, align 4
  store i32 %v1_c224, i32* %r3.global-to-local, align 4
  store i32 %v1_c214, i32* %r2.global-to-local, align 4
  %v3_c28068 = udiv i32 %v1_c234, 256
  store i32 %v3_c28068, i32* %ip.global-to-local, align 4
  store i32 %v1_c20c, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_c28c = trunc i32 %tmp129 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v1_c1ec, 256
  %v4_c33c = sdiv i32 %sext18, 16777216
  %sext20 = mul i32 %v6_bf9c, 16777216
  %v4_c358 = sdiv i32 %sext20, 16777216
  %sext21 = mul nuw i32 %v4_c244, 16777216
  %v4_c35c = sdiv i32 %sext21, 16777216
  %v4_c370 = ptrtoint i8* %stack_var_-2188.0 to i32
  %sext23 = mul i32 %v6_bfb8, 16777216
  %v4_c37c = sdiv i32 %sext23, 16777216
  %v1_c300 = trunc i32 %v3_c25c to i8
  %extract.t = trunc i32 %v3_c264 to i8
  %v1_c360 = trunc i32 %tmp131 to i8
  %v1_c388 = trunc i32 %v6_bf84 to i8
  br label %dec_label_pc_c2ac

dec_label_pc_c2ac:                                ; preds = %dec_label_pc_c40c, %dec_label_pc_c1dc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c2b4 = call i32 @function_12ee8(i32 600, i32 1)
  store i32 %v2_c2b4, i32* %r0.global-to-local, align 4
  store i32 %v2_beec, i32* %r2.global-to-local, align 4
  %v3_c2bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2bc, i32* %r3.global-to-local, align 4
  %v2_c2c0 = load i32, i32* @r4, align 4
  %v5_c2c0 = mul i32 %v2_c2c0, 4
  %v6_c2c0 = add i32 %v5_c2c0, %v2_beec
  %v7_c2c0 = inttoptr i32 %v6_c2c0 to i32*
  store i32 %v2_c2b4, i32* %v7_c2c0, align 4
  %v0_c2c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c2c4 = load i32, i32* %r3.global-to-local, align 4
  %v4_c2c4 = mul i32 %v1_c2c4, 4
  %v5_c2c4 = add i32 %v4_c2c4, %v0_c2c4
  %v6_c2c4 = inttoptr i32 %v5_c2c4 to i32*
  %v7_c2c4 = load i32, i32* %v6_c2c4, align 4
  store i32 %v7_c2c4, i32* %r1.global-to-local, align 4
  %v1_c2c8 = inttoptr i32 %v7_c2c4 to i8*
  %v2_c2c8 = load i8, i8* %v1_c2c8, align 1
  %tmp = urem i8 %v2_c2c8, 16
  %v1_c2cc = zext i8 %tmp to i32
  %v1_c2d0 = or i32 %v1_c2cc, 64
  store i32 %v1_c2d0, i32* %r2.global-to-local, align 4
  %v1_c2d4 = trunc i32 %v1_c2d0 to i8
  store i8 %v1_c2d4, i8* %v1_c2c8, align 1
  %v0_c2d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c2d8 = inttoptr i32 %v0_c2d8 to i8*
  %v2_c2d8 = load i8, i8* %v1_c2d8, align 1
  %v1_c2dc = and i8 %v2_c2d8, -16
  %v1_c2e0 = or i8 %v1_c2dc, 5
  store i32 %v1_bf6c, i32* %ip.global-to-local, align 4
  store i8 %v1_c2e0, i8* %v1_c2d8, align 1
  %v2_c2f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2f0 = add i32 %v2_c2f0, 1
  %v4_c2f0 = inttoptr i32 %v3_c2f0 to i8*
  store i8 %v5_bf24, i8* %v4_c2f0, align 1
  store i32 %v3_c25c, i32* %r3.global-to-local, align 4
  store i32 %v3_c24c, i32* %r2.global-to-local, align 4
  %v0_c2fc = load i32, i32* %ip.global-to-local, align 4
  %v2_c2fc = icmp eq i32 %v0_c2fc, 0
  store i1 %v2_c2fc, i1* %cpsr_z.global-to-local, align 1
  %v2_c300 = load i32, i32* %r1.global-to-local, align 4
  %v3_c300 = add i32 %v2_c300, 3
  %v4_c300 = inttoptr i32 %v3_c300 to i8*
  store i8 %v1_c300, i8* %v4_c300, align 1
  %v0_c304 = load i32, i32* %r2.global-to-local, align 4
  %v1_c304 = trunc i32 %v0_c304 to i8
  %v2_c304 = load i32, i32* %r1.global-to-local, align 4
  %v3_c304 = add i32 %v2_c304, 2
  %v4_c304 = inttoptr i32 %v3_c304 to i8*
  store i8 %v1_c304, i8* %v4_c304, align 1
  store i32 %v3_c264, i32* %lr.global-to-local, align 4
  store i32 %v5_bf60, i32* %r2.global-to-local, align 4
  %v0_c310 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c310, label %.thread25, label %bb133

bb133:                                            ; preds = %dec_label_pc_c2ac
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c314 = load i32, i32* %r1.global-to-local, align 4
  %v4_c314 = add i32 %v3_c314, 6
  %v5_c314 = inttoptr i32 %v4_c314 to i8*
  store i8 64, i8* %v5_c314, align 1
  %v0_c31c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t69 = trunc i32 %v0_c31c.pre to i8
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_c2ac, %bb133
  %v0_c31c.off0 = phi i8 [ %extract.t, %dec_label_pc_c2ac ], [ %extract.t69, %bb133 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c31c = load i32, i32* %r1.global-to-local, align 4
  %v3_c31c = add i32 %v2_c31c, 5
  %v4_c31c = inttoptr i32 %v3_c31c to i8*
  store i8 %v0_c31c.off0, i8* %v4_c31c, align 1
  store i32 %v7_c24c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d900.47 to i32), i32* %lr.global-to-local, align 4
  %v0_c328 = load i32, i32* %r2.global-to-local, align 4
  %v1_c328 = trunc i32 %v0_c328 to i8
  %v2_c328 = load i32, i32* %r1.global-to-local, align 4
  %v3_c328 = add i32 %v2_c328, 8
  %v4_c328 = inttoptr i32 %v3_c328 to i8*
  store i8 %v1_c328, i8* %v4_c328, align 1
  %v0_c32c = load i32, i32* %r3.global-to-local, align 4
  %v1_c32c = trunc i32 %v0_c32c to i8
  %v2_c32c = load i32, i32* %r1.global-to-local, align 4
  %v3_c32c = add i32 %v2_c32c, 9
  %v4_c32c = inttoptr i32 %v3_c32c to i8*
  store i8 %v1_c32c, i8* %v4_c32c, align 1
  %v0_c330 = load i32, i32* %r1.global-to-local, align 4
  %v1_c330 = add i32 %v0_c330, 41
  %v2_c334 = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_c334, i32* %r3.global-to-local, align 4
  %v0_c338 = load i32, i32* @sb, align 4
  %v2_c338 = add i32 %v1_c330, %v0_c338
  store i32 %v2_c338, i32* %r4.global-to-local, align 4
  store i32 %v4_c33c, i32* %r2.global-to-local, align 4
  %v1_c340 = add i32 %v0_c330, 20
  store i32 %v1_c340, i32* %r0.global-to-local, align 4
  %v0_c344 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c344, label %bb135, label %bb134

bb134:                                            ; preds = %.thread25
  %v1_c344 = load i32, i32* %sl.global-to-local, align 4
  %v2_c344 = trunc i32 %v1_c344 to i8
  %v4_c344 = add i32 %v0_c330, 7
  %v5_c344 = inttoptr i32 %v4_c344 to i8*
  store i8 %v2_c344, i8* %v5_c344, align 1
  %v2_c348.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb135

bb135:                                            ; preds = %.thread25, %bb134
  %v2_c348 = phi i32 [ %v0_c330, %.thread25 ], [ %v2_c348.pre, %bb134 ]
  %v0_c348 = load i32, i32* %ip.global-to-local, align 4
  %v1_c348 = trunc i32 %v0_c348 to i8
  %v3_c348 = add i32 %v2_c348, 4
  %v4_c348 = inttoptr i32 %v3_c348 to i8*
  store i8 %v1_c348, i8* %v4_c348, align 1
  %v0_c34c = load i32, i32* %r3.global-to-local, align 4
  %v1_c34c = load i32, i32* %r1.global-to-local, align 4
  %v2_c34c = add i32 %v1_c34c, 12
  %v3_c34c = inttoptr i32 %v2_c34c to i32*
  store i32 %v0_c34c, i32* %v3_c34c, align 4
  %v0_c350 = load i32, i32* %r2.global-to-local, align 4
  %v1_c350 = trunc i32 %v0_c350 to i8
  %v2_c350 = load i32, i32* %r0.global-to-local, align 4
  %v3_c350 = add i32 %v2_c350, 5
  %v4_c350 = inttoptr i32 %v3_c350 to i8*
  store i8 %v1_c350, i8* %v4_c350, align 1
  store i32 %v4_c358, i32* %lr.global-to-local, align 4
  store i32 %v4_c35c, i32* %r2.global-to-local, align 4
  %v2_c360 = load i32, i32* %r0.global-to-local, align 4
  %v3_c360 = add i32 %v2_c360, 2
  %v4_c360 = inttoptr i32 %v3_c360 to i8*
  store i8 %v1_c360, i8* %v4_c360, align 1
  %v0_c364 = load i32, i32* %lr.global-to-local, align 4
  %v1_c364 = trunc i32 %v0_c364 to i8
  %v2_c364 = load i32, i32* %r0.global-to-local, align 4
  %v3_c364 = add i32 %v2_c364, 3
  %v4_c364 = inttoptr i32 %v3_c364 to i8*
  store i8 %v1_c364, i8* %v4_c364, align 1
  %v0_c368 = load i32, i32* %r2.global-to-local, align 4
  %v1_c368 = trunc i32 %v0_c368 to i8
  %v2_c368 = load i32, i32* %r0.global-to-local, align 4
  %v3_c368 = add i32 %v2_c368, 4
  %v4_c368 = inttoptr i32 %v3_c368 to i8*
  store i8 %v1_c368, i8* %v4_c368, align 1
  store i32 %v4_c370, i32* %lr.global-to-local, align 4
  %v2_c374 = load i32, i32* %r1.global-to-local, align 4
  %v3_c374 = add i32 %v2_c374, 20
  %v4_c374 = inttoptr i32 %v3_c374 to i8*
  store i8 %v5_c28c, i8* %v4_c374, align 1
  store i32 %v4_c37c, i32* %r3.global-to-local, align 4
  %v0_c380 = load i32, i32* %r1.global-to-local, align 4
  %v1_c380 = add i32 %v0_c380, 28
  store i32 %v1_c380, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_c388 = load i32, i32* %r0.global-to-local, align 4
  %v3_c388 = add i32 %v2_c388, 1
  %v4_c388 = inttoptr i32 %v3_c388 to i8*
  store i8 %v1_c388, i8* %v4_c388, align 1
  %v0_c38c = load i32, i32* %lr.global-to-local, align 4
  %v1_c38c = load i32, i32* %r1.global-to-local, align 4
  %v2_c38c = add i32 %v1_c38c, 16
  %v3_c38c = inttoptr i32 %v2_c38c to i32*
  store i32 %v0_c38c, i32* %v3_c38c, align 4
  %v0_c390 = load i32, i32* %r8.global-to-local, align 4
  %v1_c390 = trunc i32 %v0_c390 to i8
  %v2_c390 = load i32, i32* %ip.global-to-local, align 4
  %v3_c390 = add i32 %v2_c390, 5
  %v4_c390 = inttoptr i32 %v3_c390 to i8*
  store i8 %v1_c390, i8* %v4_c390, align 1
  %v0_c394 = load i32, i32* @r5, align 4
  %v1_c394 = trunc i32 %v0_c394 to i8
  %v2_c394 = load i32, i32* %r1.global-to-local, align 4
  %v3_c394 = add i32 %v2_c394, 28
  %v4_c394 = inttoptr i32 %v3_c394 to i8*
  store i8 %v1_c394, i8* %v4_c394, align 1
  %v0_c398 = load i32, i32* %r8.global-to-local, align 4
  %v1_c398 = trunc i32 %v0_c398 to i8
  %v2_c398 = load i32, i32* %ip.global-to-local, align 4
  %v3_c398 = add i32 %v2_c398, 2
  %v4_c398 = inttoptr i32 %v3_c398 to i8*
  store i8 %v1_c398, i8* %v4_c398, align 1
  %v0_c39c = load i32, i32* %r3.global-to-local, align 4
  %v1_c39c = trunc i32 %v0_c39c to i8
  %v2_c39c = load i32, i32* %ip.global-to-local, align 4
  %v3_c39c = add i32 %v2_c39c, 1
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 %v1_c39c, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* @r6, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a0 = add i32 %v2_c3a0, 3
  %v4_c3a0 = inttoptr i32 %v3_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v4_c3a0, align 1
  %v0_c3a4 = load i32, i32* @r6, align 4
  %v1_c3a4 = trunc i32 %v0_c3a4 to i8
  %v2_c3a4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a4 = add i32 %v2_c3a4, 4
  %v4_c3a4 = inttoptr i32 %v3_c3a4 to i8*
  store i8 %v1_c3a4, i8* %v4_c3a4, align 1
  %v0_c3a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c3a8 = add i32 %v0_c3a8, 1
  store i32 %v1_c3a8, i32* %r0.global-to-local, align 4
  %v0_c3ac = load i32, i32* @sb, align 4
  %v1_c3ac = trunc i32 %v0_c3ac to i8
  %v2_c3ac = load i32, i32* %r1.global-to-local, align 4
  %v3_c3ac = add i32 %v2_c3ac, 40
  %v4_c3ac = inttoptr i32 %v3_c3ac to i8*
  store i8 %v1_c3ac, i8* %v4_c3ac, align 1
  %v0_c3b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c3b0, i32* %r2.global-to-local, align 4
  %v0_c3b4 = load i32, i32* @r7, align 4
  store i32 %v0_c3b4, i32* %r1.global-to-local, align 4
  %v3_c3b8 = call i32 @function_11a58(i32 %v1_c3a8, i32 %v0_c3b4, i32 %v0_c3b0)
  store i32 %v3_c3b8, i32* %r0.global-to-local, align 4
  %v1_c3c0 = load i32, i32* @r6, align 4
  %v10_c3c0 = inttoptr i32 %v1_c3c0 to i8*
  %v15_c3c0 = icmp eq i32 %v2_c138, %v1_c3c0
  store i1 %v15_c3c0, i1* %cpsr_z.global-to-local, align 1
  %v9_c3c4 = icmp sgt i8* %v3_c138, %v10_c3c0
  store i32 %v1_c3c0, i32* %lr.global-to-local, align 4
  %v0_c3d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c3d4, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_c3c0 to i8
  br i1 %v9_c3c4, label %dec_label_pc_c3d0, label %dec_label_pc_c40c

dec_label_pc_c3d0:                                ; preds = %bb135
  store i32 %v1_c3c0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c3dc

dec_label_pc_c3dc:                                ; preds = %.thread37, %dec_label_pc_c3d0
  %v1_c3e4 = phi i32 [ %v1_c3e457, %.thread37 ], [ %v1_c3c0, %dec_label_pc_c3d0 ]
  %v0_c3dc = phi i32 [ %v1_c3f8, %.thread37 ], [ %v1_c3c0, %dec_label_pc_c3d0 ]
  %v1_c3dc = load i32, i32* @r7, align 4
  %v2_c3dc = add i32 %v1_c3dc, %v0_c3dc
  %v3_c3dc = inttoptr i32 %v2_c3dc to i8*
  %v4_c3dc = load i8, i8* %v3_c3dc, align 1
  %v6_c3dc = zext i8 %v4_c3dc to i32
  store i32 %v6_c3dc, i32* %r3.global-to-local, align 4
  %v7_c3e0 = icmp eq i8 %v4_c3dc, 46
  store i1 %v7_c3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3e0, label %bb136, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_c3dc
  %v1_c3e835 = add i32 %v1_c3e4, 1
  store i32 %v1_c3e835, i32* %r2.global-to-local, align 4
  br label %bb137

bb136:                                            ; preds = %dec_label_pc_c3dc
  %v2_c3e4 = trunc i32 %v1_c3e4 to i8
  %v3_c3e4 = load i32, i32* %ip.global-to-local, align 4
  %v4_c3e4 = inttoptr i32 %v3_c3e4 to i8*
  store i8 %v2_c3e4, i8* %v4_c3e4, align 1
  %v0_c3ec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_c3e8 = load i32, i32* %lr.global-to-local, align 4
  %v1_c3e8 = add i32 %v0_c3e8, 1
  store i32 %v1_c3e8, i32* %r2.global-to-local, align 4
  br i1 %v0_c3ec.pr, label %bb138, label %bb137

bb137:                                            ; preds = %.thread33, %bb136
  %v1_c3e836 = phi i32 [ %v1_c3e835, %.thread33 ], [ %v1_c3e8, %bb136 ]
  %v2_c3ec = urem i32 %v1_c3e836, 256
  store i32 %v2_c3ec, i32* %lr.global-to-local, align 4
  br label %bb138

bb138:                                            ; preds = %bb136, %bb137
  %v1_c3e458 = phi i32 [ %v0_c3e8, %bb136 ], [ %v2_c3ec, %bb137 ]
  %v0_c400.pr = phi i1 [ true, %bb136 ], [ false, %bb137 ]
  store i32 %v2_c138, i32* %r2.global-to-local, align 4
  %v0_c3f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c3f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3f4 = add i32 %v1_c3f4, %v0_c3f4
  store i32 %v2_c3f4, i32* %r0.global-to-local, align 4
  %v1_c3f8 = add i32 %v1_c3f4, 1
  store i32 %v1_c3f8, i32* %r1.global-to-local, align 4
  br i1 %v0_c400.pr, label %bb139, label %.thread37

bb139:                                            ; preds = %bb138
  %v2_c3fc = add i32 %v2_c3f4, 1
  store i32 %v2_c3fc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread37

.thread37:                                        ; preds = %bb138, %bb139
  %v1_c3e457 = phi i32 [ %v1_c3e458, %bb138 ], [ 0, %bb139 ]
  %v9_c404 = icmp eq i32 %v2_c138, %v1_c3f8
  store i1 %v9_c404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c404, label %dec_label_pc_c40c.loopexit, label %dec_label_pc_c3dc

dec_label_pc_c40c.loopexit:                       ; preds = %.thread37
  %v2_c40c.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t70 = trunc i32 %v1_c3e457 to i8
  br label %dec_label_pc_c40c

dec_label_pc_c40c:                                ; preds = %dec_label_pc_c40c.loopexit, %bb135
  %v2_c40c = phi i32 [ %v2_c40c.pre, %dec_label_pc_c40c.loopexit ], [ %v0_c3d4, %bb135 ]
  %v0_c40c.off0 = phi i8 [ %extract.t70, %dec_label_pc_c40c.loopexit ], [ %extract.t71, %bb135 ]
  %v3_c40c = inttoptr i32 %v2_c40c to i8*
  store i8 %v0_c40c.off0, i8* %v3_c40c, align 1
  %v3_c410 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_c138, i32* %ip.global-to-local, align 4
  store i32 %v1_bec4, i32* @lr, align 4
  %v0_c41c = load i32, i32* %r4.global-to-local, align 4
  %v2_c41c = add i32 %v0_c41c, %v2_c138
  store i32 %v2_c41c, i32* %r3.global-to-local, align 4
  %v1_c420 = add i32 %v3_c410, 1
  store i32 %v1_c420, i32* @r4, align 4
  %v9_c424 = icmp eq i32 %v1_bec4, %v1_c420
  store i1 %v9_c424, i1* %cpsr_z.global-to-local, align 1
  %v1_c428 = add i32 %v2_c41c, 2
  store i32 %v1_c428, i32* %r2.global-to-local, align 4
  %v0_c42c = load i32, i32* %sl.global-to-local, align 4
  %v1_c42c = trunc i32 %v0_c42c to i8
  %v4_c42c = inttoptr i32 %v1_c428 to i8*
  store i8 %v1_c42c, i8* %v4_c42c, align 1
  %v0_c430 = load i32, i32* %r8.global-to-local, align 4
  %v1_c430 = trunc i32 %v0_c430 to i8
  %v2_c430 = load i32, i32* %r2.global-to-local, align 4
  %v3_c430 = add i32 %v2_c430, 3
  %v4_c430 = inttoptr i32 %v3_c430 to i8*
  store i8 %v1_c430, i8* %v4_c430, align 1
  %v0_c434 = load i32, i32* %r8.global-to-local, align 4
  %v1_c434 = trunc i32 %v0_c434 to i8
  %v2_c434 = load i32, i32* %r2.global-to-local, align 4
  %v3_c434 = add i32 %v2_c434, 1
  %v4_c434 = inttoptr i32 %v3_c434 to i8*
  store i8 %v1_c434, i8* %v4_c434, align 1
  %v0_c438 = load i32, i32* %sl.global-to-local, align 4
  %v1_c438 = trunc i32 %v0_c438 to i8
  %v2_c438 = load i32, i32* %r2.global-to-local, align 4
  %v3_c438 = add i32 %v2_c438, 2
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i32, i32* @r4, align 4
  store i32 %v0_c43c, i32* %stack_var_-40, align 4
  %v8_c440 = icmp sgt i32 %v1_bec4, %v1_c420
  br i1 %v8_c440, label %dec_label_pc_c2ac, label %dec_label_pc_c444.preheader

dec_label_pc_c444.preheader:                      ; preds = %dec_label_pc_c40c, %dec_label_pc_c188.dec_label_pc_c444.preheader_crit_edge
  %v4_c510.pre-phi = phi i32 [ %.pre, %dec_label_pc_c188.dec_label_pc_c444.preheader_crit_edge ], [ %v4_c370, %dec_label_pc_c40c ]
  br label %dec_label_pc_c444

dec_label_pc_c444:                                ; preds = %dec_label_pc_c444.preheader, %dec_label_pc_c608
  store i32 %v1_bec4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_c1a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1a8, label %dec_label_pc_c608, label %dec_label_pc_c458

dec_label_pc_c458:                                ; preds = %dec_label_pc_c444
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c464 = load i32, i32* @sb, align 4
  %v2_c464 = add i32 %v0_c464, %v2_c138
  store i32 %v2_c464, i32* %r3.global-to-local, align 4
  %v1_c468 = add i32 %v2_c464, 47
  store i32 %v1_c468, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r8, align 4
  %v1_c470 = add i32 %v2_c464, 27
  store i32 %v1_c470, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c56c

dec_label_pc_c480:                                ; preds = %dec_label_pc_c56c
  store i32 %v3_c1b8, i32* %r3.global-to-local, align 4
  %v9_c484 = icmp eq i32 %v3_c1b8, %v1_c484
  store i1 %v9_c484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c484, label %dec_label_pc_c5a8, label %dec_label_pc_c48c

dec_label_pc_c48c:                                ; preds = %dec_label_pc_c58c.dec_label_pc_c48c_crit_edge, %dec_label_pc_c480
  %v1_c490 = phi i32 [ %v1_c490.pre, %dec_label_pc_c58c.dec_label_pc_c48c_crit_edge ], [ %v1_c484, %dec_label_pc_c480 ]
  store i32 %v3_c1bc, i32* %ip.global-to-local, align 4
  %v9_c490 = icmp eq i32 %v3_c1bc, %v1_c490
  store i1 %v9_c490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c490, label %dec_label_pc_c5c4, label %dec_label_pc_c498

dec_label_pc_c498:                                ; preds = %dec_label_pc_c5a8.dec_label_pc_c498_crit_edge, %dec_label_pc_c48c
  %v1_c49c = phi i32 [ %v1_c49c.pre, %dec_label_pc_c5a8.dec_label_pc_c498_crit_edge ], [ %v1_c490, %dec_label_pc_c48c ]
  store i32 %v3_c1c0, i32* %lr.global-to-local, align 4
  %v9_c49c = icmp eq i32 %v3_c1c0, %v1_c49c
  store i1 %v9_c49c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c49c, label %dec_label_pc_c5e0, label %dec_label_pc_c4a4

dec_label_pc_c4a4:                                ; preds = %dec_label_pc_c5c4, %dec_label_pc_c498, %dec_label_pc_c5e0
  %v0_c4a4 = load i32, i32* @r6, align 4
  store i32 %v0_c4a4, i32* %r0.global-to-local, align 4
  %v0_c4a8 = load i32, i32* @sb, align 4
  store i32 %v0_c4a8, i32* %r1.global-to-local, align 4
  %v2_c4ac = call i32 @function_e2f4(i32 %v0_c4a4, i32 %v0_c4a8)
  %v0_c4b0 = load i32, i32* @r7, align 4
  %v1_c4b0 = trunc i32 %v0_c4b0 to i8
  %v2_c4b0 = load i32, i32* @r6, align 4
  %v3_c4b0 = load i32, i32* @sb, align 4
  %v4_c4b0 = add i32 %v3_c4b0, %v2_c4b0
  %v5_c4b0 = inttoptr i32 %v4_c4b0 to i8*
  store i8 %v1_c4b0, i8* %v5_c4b0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c4b8 = load i32, i32* @r7, align 4
  %v1_c4b8 = trunc i32 %v0_c4b8 to i8
  %v2_c4b8 = load i32, i32* @r4, align 4
  %v3_c4b8 = add i32 %v2_c4b8, 10
  %v4_c4b8 = inttoptr i32 %v3_c4b8 to i8*
  store i8 %v1_c4b8, i8* %v4_c4b8, align 1
  %v0_c4bc = load i32, i32* @r7, align 4
  %v1_c4bc = trunc i32 %v0_c4bc to i8
  %v2_c4bc = load i32, i32* @r4, align 4
  %v3_c4bc = add i32 %v2_c4bc, 11
  %v4_c4bc = inttoptr i32 %v3_c4bc to i8*
  store i8 %v1_c4bc, i8* %v4_c4bc, align 1
  %v0_c4c0 = load i32, i32* @r4, align 4
  store i32 %v0_c4c0, i32* @r0, align 4
  %v2_c4c4 = call i32 @function_c688(i32 %v0_c4c0, i32 20)
  %v3_c4c4 = trunc i32 %v2_c4c4 to i8
  store i32 %v2_c4c4, i32* %r0.global-to-local, align 4
  %v4_c4c8 = sdiv i32 %v2_c4c4, 256
  store i32 %v4_c4c8, i32* %r3.global-to-local, align 4
  %v1_c4cc = trunc i32 %v4_c4c8 to i8
  %v2_c4cc = load i32, i32* @r4, align 4
  %v3_c4cc = add i32 %v2_c4cc, 11
  %v4_c4cc = inttoptr i32 %v3_c4cc to i8*
  store i8 %v1_c4cc, i8* %v4_c4cc, align 1
  %v3_c4d0 = load i32, i32* @r4, align 4
  %v4_c4d0 = add i32 %v3_c4d0, 10
  %v5_c4d0 = inttoptr i32 %v4_c4d0 to i8*
  store i8 %v3_c4c4, i8* %v5_c4d0, align 1
  %v0_c4d4 = load i32, i32* @r7, align 4
  %v1_c4d4 = trunc i32 %v0_c4d4 to i8
  %v2_c4d4 = load i32, i32* @r5, align 4
  %v3_c4d4 = add i32 %v2_c4d4, 6
  %v4_c4d4 = inttoptr i32 %v3_c4d4 to i8*
  store i8 %v1_c4d4, i8* %v4_c4d4, align 1
  %v0_c4d8 = load i32, i32* @r7, align 4
  %v1_c4d8 = trunc i32 %v0_c4d8 to i8
  %v2_c4d8 = load i32, i32* @r5, align 4
  %v3_c4d8 = add i32 %v2_c4d8, 7
  %v4_c4d8 = inttoptr i32 %v3_c4d8 to i8*
  store i8 %v1_c4d8, i8* %v4_c4d8, align 1
  %v0_c4dc = load i32, i32* @r4, align 4
  %v1_c4dc = add i32 %v0_c4dc, 24
  %v2_c4dc = inttoptr i32 %v1_c4dc to i8*
  %v3_c4dc = load i8, i8* %v2_c4dc, align 1
  %v4_c4dc = zext i8 %v3_c4dc to i32
  store i32 %v4_c4dc, i32* %r3.global-to-local, align 4
  %v1_c4e0 = add i32 %v0_c4dc, 25
  %v2_c4e0 = inttoptr i32 %v1_c4e0 to i8*
  %v3_c4e0 = load i8, i8* %v2_c4e0, align 1
  %v4_c4e0 = zext i8 %v3_c4e0 to i32
  %v0_c4e4 = load i32, i32* @r5, align 4
  store i32 %v0_c4e4, i32* @r1, align 4
  %v4_c4e8 = mul nuw nsw i32 %v4_c4e0, 256
  %v5_c4e8 = or i32 %v4_c4e8, %v4_c4dc
  store i32 %v5_c4e8, i32* %r2.global-to-local, align 4
  store i32 %v0_c4dc, i32* %r0.global-to-local, align 4
  %v0_c4f0 = load i32, i32* @fp, align 4
  store i32 %v0_c4f0, i32* %r3.global-to-local, align 4
  %v4_c4f4 = call i32 @function_c6e4(i32 %v0_c4dc, i32 %v0_c4e4, i32 %v5_c4e8, i32 %v0_c4f0)
  %v5_c4f4 = trunc i32 %v4_c4f4 to i8
  store i32 %v4_c4f4, i32* %r0.global-to-local, align 4
  %v3_c4f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_c504 = mul i32 %v3_c4f8, 24
  store i32 %v5_c504, i32* %lr.global-to-local, align 4
  %v4_c50876 = udiv i32 %v4_c4f4, 256
  %v1_c50c = trunc i32 %v4_c50876 to i8
  %v2_c50c = load i32, i32* @r5, align 4
  %v3_c50c = add i32 %v2_c50c, 7
  %v4_c50c = inttoptr i32 %v3_c50c to i8*
  store i8 %v1_c50c, i8* %v4_c50c, align 1
  store i32 %v4_c510.pre-phi, i32* %r3.global-to-local, align 4
  %v0_c514 = load i32, i32* %lr.global-to-local, align 4
  %v1_c514 = load i32, i32* %r2.global-to-local, align 4
  %v2_c514 = add i32 %v1_c514, %v0_c514
  store i32 %v2_c514, i32* %lr.global-to-local, align 4
  %v3_c518 = load i32, i32* @r5, align 4
  %v4_c518 = add i32 %v3_c518, 6
  %v5_c518 = inttoptr i32 %v4_c518 to i8*
  store i8 %v5_c4f4, i8* %v5_c518, align 1
  %v0_c51c = load i32, i32* %r3.global-to-local, align 4
  %v1_c51c = load i32, i32* %lr.global-to-local, align 4
  %v2_c51c = add i32 %v1_c51c, 4
  %v3_c51c = inttoptr i32 %v2_c51c to i32*
  store i32 %v0_c51c, i32* %v3_c51c, align 4
  %v0_c520 = load i32, i32* @r4, align 4
  %v1_c520 = add i32 %v0_c520, 20
  %v2_c520 = inttoptr i32 %v1_c520 to i32*
  %v3_c520 = load i32, i32* %v2_c520, align 4
  %v3_c524 = udiv i32 %v3_c520, 65536
  store i32 %v3_c524, i32* %r3.global-to-local, align 4
  %v3_c52816 = udiv i32 %v3_c520, 16777216
  %v1_c52c = trunc i32 %v3_c52816 to i8
  %v2_c52c = load i32, i32* %lr.global-to-local, align 4
  %v3_c52c = add i32 %v2_c52c, 3
  %v4_c52c = inttoptr i32 %v3_c52c to i8*
  store i8 %v1_c52c, i8* %v4_c52c, align 1
  %v0_c530 = load i32, i32* %r3.global-to-local, align 4
  %v1_c530 = trunc i32 %v0_c530 to i8
  %v2_c530 = load i32, i32* %lr.global-to-local, align 4
  %v3_c530 = add i32 %v2_c530, 2
  %v4_c530 = inttoptr i32 %v3_c530 to i8*
  store i8 %v1_c530, i8* %v4_c530, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c53c = load i32, i32* @r4, align 4
  store i32 %v0_c53c, i32* %r1.global-to-local, align 4
  store i32 %v3_c14c, i32* %r0.global-to-local, align 4
  store i32 %v1_c468, i32* %r2.global-to-local, align 4
  %v0_c548 = load i32, i32* %lr.global-to-local, align 4
  %v6_c550 = inttoptr i32 %v0_c53c to i32*
  %v7_c550 = call i32 @function_12b98(i32 %v3_c14c, i32* %v6_c550, i32 %v1_c468, i32 16384, i32 %v0_c548, i32 16)
  %v3_c554 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c554, i32* %r3.global-to-local, align 4
  %v1_c55c = add i32 %v3_c554, 1
  store i32 %v1_c55c, i32* %r0.global-to-local, align 4
  %v9_c560 = icmp eq i32 %v1_bec4, %v1_c55c
  store i1 %v9_c560, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c55c, i32* %stack_var_-40, align 4
  %v7_c568 = icmp sgt i32 %v1_bec4, %v1_c55c
  br i1 %v7_c568, label %dec_label_pc_c4a4.dec_label_pc_c56c_crit_edge, label %dec_label_pc_c608

dec_label_pc_c4a4.dec_label_pc_c56c_crit_edge:    ; preds = %dec_label_pc_c4a4
  %v1_c578.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c56c

dec_label_pc_c56c:                                ; preds = %dec_label_pc_c4a4.dec_label_pc_c56c_crit_edge, %dec_label_pc_c458
  %v1_c484 = phi i32 [ %v1_c578.pre, %dec_label_pc_c4a4.dec_label_pc_c56c_crit_edge ], [ 65535, %dec_label_pc_c458 ]
  %v1_c574 = phi i32 [ %v1_c55c, %dec_label_pc_c4a4.dec_label_pc_c56c_crit_edge ], [ 0, %dec_label_pc_c458 ]
  store i32 %v2_beec, i32* %lr.global-to-local, align 4
  store i32 %v3_c1b4, i32* %r2.global-to-local, align 4
  %v4_c574 = mul i32 %v1_c574, 4
  %v5_c574 = add i32 %v4_c574, %v2_beec
  %v6_c574 = inttoptr i32 %v5_c574 to i32*
  %v7_c574 = load i32, i32* %v6_c574, align 4
  store i32 %v7_c574, i32* @r4, align 4
  %v9_c578 = icmp eq i32 %v3_c1b4, %v1_c484
  store i1 %v9_c578, i1* %cpsr_z.global-to-local, align 1
  %v1_c57c = add i32 %v7_c574, 20
  store i32 %v1_c57c, i32* @r5, align 4
  %v1_c580 = add i32 %v7_c574, 41
  store i32 %v1_c580, i32* @r6, align 4
  %v1_c584 = add i32 %v7_c574, 28
  store i32 %v1_c584, i32* @sl, align 4
  br i1 %v9_c578, label %dec_label_pc_c58c, label %dec_label_pc_c480

dec_label_pc_c58c:                                ; preds = %dec_label_pc_c56c
  %v0_c58c = call i32 @function_e240()
  %v1_c58c = trunc i32 %v0_c58c to i8
  store i32 %v0_c58c, i32* %r0.global-to-local, align 4
  %v4_c59077 = udiv i32 %v0_c58c, 256
  %v1_c594 = trunc i32 %v4_c59077 to i8
  %v2_c594 = load i32, i32* @r4, align 4
  %v3_c594 = add i32 %v2_c594, 5
  %v4_c594 = inttoptr i32 %v3_c594 to i8*
  store i8 %v1_c594, i8* %v4_c594, align 1
  store i32 %v3_c1b8, i32* %r3.global-to-local, align 4
  %v1_c59c = load i32, i32* @r8, align 4
  %v9_c59c = icmp eq i32 %v3_c1b8, %v1_c59c
  store i1 %v9_c59c, i1* %cpsr_z.global-to-local, align 1
  %v3_c5a0 = load i32, i32* @r4, align 4
  %v4_c5a0 = add i32 %v3_c5a0, 4
  %v5_c5a0 = inttoptr i32 %v4_c5a0 to i8*
  store i8 %v1_c58c, i8* %v5_c5a0, align 1
  %v0_c5a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5a4, label %dec_label_pc_c5a8, label %dec_label_pc_c58c.dec_label_pc_c48c_crit_edge

dec_label_pc_c58c.dec_label_pc_c48c_crit_edge:    ; preds = %dec_label_pc_c58c
  %v1_c490.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c48c

dec_label_pc_c5a8:                                ; preds = %dec_label_pc_c58c, %dec_label_pc_c480
  %v0_c5a8 = call i32 @function_e240()
  %v1_c5a8 = trunc i32 %v0_c5a8 to i8
  store i32 %v0_c5a8, i32* %r0.global-to-local, align 4
  store i32 %v3_c1bc, i32* %ip.global-to-local, align 4
  %v4_c5b0 = sdiv i32 %v0_c5a8, 256
  store i32 %v4_c5b0, i32* %r3.global-to-local, align 4
  %v1_c5b4 = load i32, i32* @r8, align 4
  %v9_c5b4 = icmp eq i32 %v3_c1bc, %v1_c5b4
  store i1 %v9_c5b4, i1* %cpsr_z.global-to-local, align 1
  %v3_c5b8 = load i32, i32* @r4, align 4
  %v4_c5b8 = add i32 %v3_c5b8, 20
  %v5_c5b8 = inttoptr i32 %v4_c5b8 to i8*
  store i8 %v1_c5a8, i8* %v5_c5b8, align 1
  %v0_c5bc = load i32, i32* %r3.global-to-local, align 4
  %v1_c5bc = trunc i32 %v0_c5bc to i8
  %v2_c5bc = load i32, i32* @r5, align 4
  %v3_c5bc = add i32 %v2_c5bc, 1
  %v4_c5bc = inttoptr i32 %v3_c5bc to i8*
  store i8 %v1_c5bc, i8* %v4_c5bc, align 1
  %v0_c5c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5c0, label %dec_label_pc_c5c4, label %dec_label_pc_c5a8.dec_label_pc_c498_crit_edge

dec_label_pc_c5a8.dec_label_pc_c498_crit_edge:    ; preds = %dec_label_pc_c5a8
  %v1_c49c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c498

dec_label_pc_c5c4:                                ; preds = %dec_label_pc_c5a8, %dec_label_pc_c48c
  %v0_c5c4 = call i32 @function_e240()
  %v1_c5c4 = trunc i32 %v0_c5c4 to i8
  store i32 %v0_c5c4, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c0, i32* %lr.global-to-local, align 4
  %v4_c5cc = sdiv i32 %v0_c5c4, 256
  store i32 %v4_c5cc, i32* %r3.global-to-local, align 4
  %v1_c5d0 = load i32, i32* @r8, align 4
  %v9_c5d0 = icmp eq i32 %v3_c1c0, %v1_c5d0
  store i1 %v9_c5d0, i1* %cpsr_z.global-to-local, align 1
  %v1_c5d4 = trunc i32 %v4_c5cc to i8
  %v2_c5d4 = load i32, i32* @r5, align 4
  %v3_c5d4 = add i32 %v2_c5d4, 3
  %v4_c5d4 = inttoptr i32 %v3_c5d4 to i8*
  store i8 %v1_c5d4, i8* %v4_c5d4, align 1
  %v3_c5d8 = load i32, i32* @r5, align 4
  %v4_c5d8 = add i32 %v3_c5d8, 2
  %v5_c5d8 = inttoptr i32 %v4_c5d8 to i8*
  store i8 %v1_c5c4, i8* %v5_c5d8, align 1
  %v0_c5dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5dc, label %dec_label_pc_c5e0, label %dec_label_pc_c4a4

dec_label_pc_c5e0:                                ; preds = %dec_label_pc_c5c4, %dec_label_pc_c498
  %v0_c5e0 = call i32 @function_e240()
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  store i32 %v0_c5e0, i32* %r0.global-to-local, align 4
  %v4_c5e4 = sdiv i32 %v0_c5e0, 256
  store i32 %v4_c5e4, i32* %r3.global-to-local, align 4
  %v3_c5e8 = load i32, i32* @r4, align 4
  %v4_c5e8 = add i32 %v3_c5e8, 28
  %v5_c5e8 = inttoptr i32 %v4_c5e8 to i8*
  store i8 %v1_c5e0, i8* %v5_c5e8, align 1
  %v0_c5ec = load i32, i32* %r3.global-to-local, align 4
  %v1_c5ec = trunc i32 %v0_c5ec to i8
  %v2_c5ec = load i32, i32* @sl, align 4
  %v3_c5ec = add i32 %v2_c5ec, 1
  %v4_c5ec = inttoptr i32 %v3_c5ec to i8*
  store i8 %v1_c5ec, i8* %v4_c5ec, align 1
  br label %dec_label_pc_c4a4

dec_label_pc_c5f4:                                ; preds = %dec_label_pc_c15c
  store i32 %v3_c14c, i32* %r0.global-to-local, align 4
  %v1_c5f8 = call i32 @function_122e0(i32 %v3_c14c)
  store i32 %v1_c5f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c5fc

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c608, %dec_label_pc_c134, %dec_label_pc_c11c, %dec_label_pc_c5f4
  %v29_c604 = phi i32 [ %v3_c14c, %dec_label_pc_c134 ], [ %v2_c128, %dec_label_pc_c11c ], [ %v1_c5f8, %dec_label_pc_c5f4 ], [ %v2_c60c, %dec_label_pc_c608 ]
  store i32 %v3_beb8, i32* %r4.global-to-local, align 4
  store i32 %v15_beb8, i32* %r8.global-to-local, align 4
  store i32 %v21_beb8, i32* %sl.global-to-local, align 4
  store i32 %v24_beb8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c604

dec_label_pc_c608:                                ; preds = %dec_label_pc_c4a4, %dec_label_pc_c444
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c60c = call i32 @function_125b0(i32* null)
  store i32 %v2_c60c, i32* %r0.global-to-local, align 4
  store i32 %v2_c128, i32* %ip.global-to-local, align 4
  %v9_c614 = icmp eq i32 %v2_c128, %v2_c60c
  store i1 %v9_c614, i1* %cpsr_z.global-to-local, align 1
  %v6_c618 = icmp slt i32 %v2_c128, %v2_c60c
  br i1 %v6_c618, label %dec_label_pc_c5fc, label %dec_label_pc_c444

dec_label_pc_c620:                                ; preds = %dec_label_pc_c0d8, %bb128
  %v0_c0e0.lcssa = phi i32 [ %v1_c0ac, %dec_label_pc_c0d8 ], [ %v0_c0e0, %bb128 ]
  %v2_c620 = sub i32 %v0_c0e0.lcssa, %v4_c064
  store i32 %v2_c620, i32* %r2.global-to-local, align 4
  store i32 %v2_c09c, i32* %r1.global-to-local, align 4
  store i32 %v2_c08c, i32* %r0.global-to-local, align 4
  %v3_c62c = call i32 @function_11a58(i32 %v2_c08c, i32 %v2_c09c, i32 %v2_c620)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c08c, i32* @r0, align 4
  %v2_c638 = load i32, i32* @r4, align 4
  %v3_c638 = inttoptr i32 %v2_c638 to i8*
  store i8 0, i8* %v3_c638, align 1
  %v1_c63c = call i32 @function_129dc(i32 %v2_c08c)
  store i32 %v1_c63c, i32* %r0.global-to-local, align 4
  %v5_c640 = inttoptr i32 %v1_c63c to i8*
  br label %dec_label_pc_c11c

dec_label_pc_c648:                                ; preds = %dec_label_pc_c0f0
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c11c

dec_label_pc_c658:                                ; preds = %dec_label_pc_c0f0
  br label %dec_label_pc_c11c

dec_label_pc_c66c:                                ; preds = %dec_label_pc_c0f0
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c11c

; uselistorder directives
  uselistorder i32 %v2_c60c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c5e0, { 0, 2, 1 }
  uselistorder i32 %v4_c5cc, { 1, 0 }
  uselistorder i32 %v0_c5c4, { 0, 2, 1 }
  uselistorder i32 %v0_c5a8, { 0, 2, 1 }
  uselistorder i32 %v0_c58c, { 0, 2, 1 }
  uselistorder i32 %v7_c574, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c484, { 2, 1, 0 }
  uselistorder i32 %v1_c55c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_c4f4, { 0, 2, 1 }
  uselistorder i32 %v0_c4dc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c4c8, { 1, 0 }
  uselistorder i32 %v2_c4c4, { 0, 2, 1 }
  uselistorder i32 %v1_c468, { 1, 0, 2 }
  uselistorder i32 %v1_c3f8, { 0, 2, 1 }
  uselistorder i32 %v1_c3f4, { 1, 0 }
  uselistorder i32 %v2_c3ec, { 1, 0 }
  uselistorder i32 %v1_c3c0, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_c264, { 1, 0 }
  uselistorder i32 %v3_c25c, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 0 }
  uselistorder i32 %v1_c20c, { 1, 0 }
  uselistorder i32 %v1_c1f0, { 1, 0 }
  uselistorder i32 %v3_c1e8, { 1, 0 }
  uselistorder i32 %v1_c1ac, { 1, 0 }
  uselistorder i1 %v2_c1a8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c180, { 1, 0 }
  uselistorder i1 %v7_c150, { 1, 0 }
  uselistorder i32 %v3_c14c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_c138, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_c128, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_c124, { 1, 0, 2 }
  uselistorder i8* %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_c0f4, { 1, 0 }
  uselistorder i32 %v0_c0f0, { 1, 0 }
  uselistorder i32 %v1_c0e8, { 1, 0 }
  uselistorder i32 %v1_c0e0, { 1, 2, 0 }
  uselistorder i1 %v7_c0cc, { 1, 0 }
  uselistorder i32 %v1_c0c8, { 1, 0, 2 }
  uselistorder i1 %v8_c0c0, { 1, 0 }
  uselistorder i1 %v7_c0bc, { 1, 0 }
  uselistorder i32 %v1_c0b0, { 1, 0 }
  uselistorder i8 %v2_c0a4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c0a8, { 1, 0 }
  uselistorder i32 %v0_c0c8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_c09c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c090, { 1, 0, 2 }
  uselistorder i32 %v2_c08c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_c07c, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_c074, { 1, 0 }
  uselistorder i32 %v4_c064, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_c018, { 1, 0, 2, 3 }
  uselistorder i32 %v6_bfb8, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bf9c, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bf84, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32 %v1_bf6c, { 1, 2, 0 }
  uselistorder i32 %v7_bf28, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v6_bf04, { 1, 2, 0 }
  uselistorder i32 %v2_beec, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_bec4, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 11, 9, 10 }
  uselistorder i32* %sl.global-to-local, { 7, 1, 2, 0, 3, 4, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 5, 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 29, 34, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 1, 42, 43, 44, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %r1.global-to-local, { 38, 39, 40, 41, 42, 43, 44, 45, 12, 13, 14, 15, 16, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 32, 31, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 43, 45, 44, 47, 46, 48, 49, 50, 52, 51, 53, 55, 54, 56, 57, 58, 59, 61, 60, 3, 4, 5, 6, 2, 7, 11, 8, 9, 10, 12, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %lr.global-to-local, { 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %ip.global-to-local, { 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11 }
  uselistorder i32* %fp.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 18, 19, 20, 21, 22, 23, 24, 29, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder label %dec_label_pc_c5fc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_c4a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c444, { 1, 0 }
  uselistorder label %.thread37, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %bb135, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
  uselistorder label %dec_label_pc_c0e0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c0d8, { 1, 0 }
  uselistorder label %dec_label_pc_c0cc, { 1, 0 }
}

define i32 @function_c688(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c688:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c6b8, label %dec_label_pc_c694

dec_label_pc_c694:                                ; preds = %dec_label_pc_c688
  %v0_c698.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c698

dec_label_pc_c698:                                ; preds = %dec_label_pc_c698, %dec_label_pc_c694
  %v0_c6ac = phi i32 [ %v2_c6ac, %dec_label_pc_c698 ], [ 0, %dec_label_pc_c694 ]
  %v0_c6a0 = phi i32 [ %v1_c6a0, %dec_label_pc_c698 ], [ %arg1, %dec_label_pc_c694 ]
  %v0_c6b0 = phi i32 [ %v1_c6b0, %dec_label_pc_c698 ], [ %v0_c698.pre, %dec_label_pc_c694 ]
  %v1_c698 = inttoptr i32 %v0_c6b0 to i8*
  %v2_c698 = load i8, i8* %v1_c698, align 1
  %v3_c698 = zext i8 %v2_c698 to i32
  %v1_c69c = add i32 %v0_c6b0, 1
  %v2_c69c = inttoptr i32 %v1_c69c to i8*
  %v3_c69c = load i8, i8* %v2_c69c, align 1
  %v4_c69c = zext i8 %v3_c69c to i32
  %v1_c6a0 = add i32 %v0_c6a0, -2
  %v4_c6a4 = mul nuw nsw i32 %v4_c69c, 256
  %v5_c6a4 = or i32 %v4_c6a4, %v3_c698
  %v2_c6ac = add i32 %v5_c6a4, %v0_c6ac
  %v1_c6b0 = add i32 %v0_c6b0, 2
  store i32 %v1_c6b0, i32* @r0, align 4
  %v1_c6a0.cmp = icmp ugt i32 %v1_c6a0, 1
  br i1 %v1_c6a0.cmp, label %dec_label_pc_c698, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c698, %dec_label_pc_c688
  %v1_c6c0 = phi i32 [ 0, %dec_label_pc_c688 ], [ %v2_c6ac, %dec_label_pc_c698 ]
  %v0_c6b8 = phi i32 [ %arg1, %dec_label_pc_c688 ], [ %v1_c6a0, %dec_label_pc_c698 ]
  %v7_c6b8 = icmp eq i32 %v0_c6b8, 1
  br i1 %v7_c6b8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c6b8
  %v1_c6bc = load i32, i32* @r0, align 4
  %v2_c6bc = inttoptr i32 %v1_c6bc to i8*
  %v3_c6bc = load i8, i8* %v2_c6bc, align 1
  %v4_c6bc = zext i8 %v3_c6bc to i32
  %v3_c6c0 = add i32 %v1_c6c0, %v4_c6bc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c6b8, %bb
  %v0_c6c4 = phi i32 [ %v1_c6c0, %dec_label_pc_c6b8 ], [ %v3_c6c0, %bb ]
  %v3_c6c8 = urem i32 %v0_c6c4, 65536
  %v4_c6cc = udiv i32 %v0_c6c4, 65536
  %v5_c6cc = add nuw nsw i32 %v4_c6cc, %v3_c6c8
  %v4_c6d0 = udiv i32 %v5_c6cc, 65536
  %v5_c6d0 = add nuw nsw i32 %v4_c6d0, %v5_c6cc
  %v1_c6d4 = urem i32 %v5_c6d0, 65536
  %v3_c6dc = xor i32 %v1_c6d4, 65535
  ret i32 %v3_c6dc

; uselistorder directives
  uselistorder i32 %v5_c6cc, { 1, 0 }
  uselistorder i32 %v1_c6b0, { 1, 0 }
  uselistorder i32 %v1_c6a0, { 1, 0, 2 }
  uselistorder i32 %v0_c6b0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6e4:
  %v3_c6f4 = urem i32 %arg2, 65536
  %v1_c6f8 = add i32 %arg1, 12
  %v1_c6fc = inttoptr i32 %v1_c6f8 to i32*
  %v2_c6fc = load i32, i32* %v1_c6fc, align 4
  %v3_c6fc = add i32 %arg1, 16
  %v4_c6fc = inttoptr i32 %v3_c6fc to i32*
  %v5_c6fc = load i32, i32* %v4_c6fc, align 4
  %v7_c700 = icmp sgt i32 %arg3, 1
  br i1 %v7_c700, label %dec_label_pc_c70c.preheader, label %dec_label_pc_c72c

dec_label_pc_c70c.preheader:                      ; preds = %dec_label_pc_c6e4
  %v0_c70c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c70c

dec_label_pc_c70c:                                ; preds = %dec_label_pc_c70c.preheader, %dec_label_pc_c70c
  %v0_c720 = phi i32 [ 0, %dec_label_pc_c70c.preheader ], [ %v2_c720, %dec_label_pc_c70c ]
  %v0_c714 = phi i32 [ %arg3, %dec_label_pc_c70c.preheader ], [ %v1_c714, %dec_label_pc_c70c ]
  %v0_c724 = phi i32 [ %v0_c70c.pre, %dec_label_pc_c70c.preheader ], [ %v1_c724, %dec_label_pc_c70c ]
  %v1_c70c = inttoptr i32 %v0_c724 to i8*
  %v2_c70c = load i8, i8* %v1_c70c, align 1
  %v3_c70c = zext i8 %v2_c70c to i32
  %v1_c710 = add i32 %v0_c724, 1
  %v2_c710 = inttoptr i32 %v1_c710 to i8*
  %v3_c710 = load i8, i8* %v2_c710, align 1
  %v4_c710 = zext i8 %v3_c710 to i32
  %v1_c714 = add nsw i32 %v0_c714, -2
  %v4_c718 = mul nuw nsw i32 %v4_c710, 256
  %v5_c718 = or i32 %v4_c718, %v3_c70c
  %v2_c720 = add i32 %v5_c718, %v0_c720
  %v1_c724 = add i32 %v0_c724, 2
  store i32 %v1_c724, i32* @r1, align 4
  %v8_c728 = icmp sgt i32 %v1_c714, 1
  br i1 %v8_c728, label %dec_label_pc_c70c, label %dec_label_pc_c72c

dec_label_pc_c72c:                                ; preds = %dec_label_pc_c70c, %dec_label_pc_c6e4
  %v1_c734 = phi i32 [ 0, %dec_label_pc_c6e4 ], [ %v2_c720, %dec_label_pc_c70c ]
  %v0_c72c = phi i32 [ %arg3, %dec_label_pc_c6e4 ], [ %v1_c714, %dec_label_pc_c70c ]
  %v7_c72c = icmp eq i32 %v0_c72c, 1
  br i1 %v7_c72c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c72c
  %v1_c730 = load i32, i32* @r1, align 4
  %v2_c730 = inttoptr i32 %v1_c730 to i8*
  %v3_c730 = load i8, i8* %v2_c730, align 1
  %v4_c730 = zext i8 %v3_c730 to i32
  %v3_c734 = add i32 %v4_c730, %v1_c734
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c72c, %bb
  %v0_c758 = phi i32 [ %v1_c734, %dec_label_pc_c72c ], [ %v3_c734, %bb ]
  %v3_c73c = urem i32 %v2_c6fc, 65536
  %v1_c744 = add i32 %arg1, 9
  %v2_c744 = inttoptr i32 %v1_c744 to i8*
  %v3_c744 = load i8, i8* %v2_c744, align 1
  %v4_c744 = zext i8 %v3_c744 to i32
  %v3_c748 = urem i32 %v5_c6fc, 65536
  %v4_c74c = udiv i32 %v2_c6fc, 65536
  %v3_c754 = mul nuw nsw i32 %v4_c744, 256
  %v4_c758 = udiv i32 %v5_c6fc, 65536
  %v5_c758 = add i32 %v0_c758, %v4_c758
  %v2_c75c = add i32 %v5_c758, %v3_c754
  %v5_c74c = add nuw nsw i32 %v3_c73c, %v3_c6f4
  %v2_c750 = add nuw nsw i32 %v5_c74c, %v4_c74c
  %v2_c760 = add nuw nsw i32 %v2_c750, %v3_c748
  %v2_c764 = add i32 %v2_c75c, %v2_c760
  %tmp = icmp ult i32 %v2_c764, 65536
  br i1 %tmp, label %dec_label_pc_c784, label %dec_label_pc_c770

dec_label_pc_c770:                                ; preds = %.thread, %dec_label_pc_c770
  %v2_c7781 = phi i32 [ %v2_c778, %dec_label_pc_c770 ], [ %v2_c764, %.thread ]
  %v3_c77c2.in = phi i32 [ %v2_c778, %dec_label_pc_c770 ], [ %v2_c764, %.thread ]
  %v3_c77c2 = udiv i32 %v3_c77c2.in, 65536
  %v3_c774 = urem i32 %v2_c7781, 65536
  %v2_c778 = add nuw nsw i32 %v3_c774, %v3_c77c2
  %tmp14 = icmp ult i32 %v2_c778, 65536
  br i1 %tmp14, label %dec_label_pc_c784.loopexit, label %dec_label_pc_c770

dec_label_pc_c784.loopexit:                       ; preds = %dec_label_pc_c770
  br label %dec_label_pc_c784

dec_label_pc_c784:                                ; preds = %dec_label_pc_c784.loopexit, %.thread
  %v0_c784 = phi i32 [ %v2_c778, %dec_label_pc_c784.loopexit ], [ %v2_c764, %.thread ]
  %v1_c784 = urem i32 %v0_c784, 65536
  %v3_c78c = xor i32 %v1_c784, 65535
  ret i32 %v3_c78c

; uselistorder directives
  uselistorder i32 %v2_c778, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c764, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c734, { 1, 0 }
  uselistorder i32 %v1_c724, { 1, 0 }
  uselistorder i32 %v1_c714, { 0, 2, 1 }
  uselistorder i32 %v0_c724, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c770, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c70c, { 1, 0 }
}

define i32 @function_c794(i32 %arg1) local_unnamed_addr {
dec_label_pc_c794:
  %v2_c798 = load i32, i32* @global_var_1d908.58, align 4
  %v2_c7a0 = call i32 @function_123e0(i32 %v2_c798, i32 9)
  %v0_c7a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c7a4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_c794
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_c794, %bb
  ret i32 %v2_c7a0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_c7a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_c7a8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_c7a8 = load i32, i32* @r4, align 4
  store i32 %v3_c7a8, i32* %stack_var_-36, align 4
  %v6_c7a8 = load i32, i32* @r5, align 4
  %v9_c7a8 = load i32, i32* @r6, align 4
  %v12_c7a8 = load i32, i32* @r7, align 4
  %v15_c7a8 = load i32, i32* @r8, align 4
  %v18_c7a8 = load i32, i32* @sb, align 4
  %v21_c7a8 = load i32, i32* @sl, align 4
  %v24_c7a8 = load i32, i32* @fp, align 4
  %v2_c7bc = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_c7bc, i32* @sl, align 4
  %v3_c7c4 = mul i32 %arg1, 65536
  store i32 %v3_c7c4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c7d0 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_c7dc = bitcast i32* %stack_var_-4677 to i8*
  %v3_c7dc = call i32 @function_12920(i8* %v2_c7dc, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_c7f4 = bitcast i32* %stack_var_-8773 to i8*
  %v3_c7f4 = call i32 @function_12920(i8* %v2_c7f4, i32 0)
  %v2_c7f8 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_c7f8, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_c818 = call i32 @function_12920(i8* nonnull %stack_var_-581, i32 0)
  %v2_c81c = ptrtoint i8* %stack_var_-68 to i32
  %v1_c824 = load i32, i32* @r5, align 4
  %v4_c824 = udiv i32 %v1_c824, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_c844 = trunc i32 %v4_c824 to i8
  %v4_c844 = call i32 @function_11e40(i8 %v3_c844, i32 16, i32 %v2_c81c)
  %v2_c84c = call i32 @function_119dc(i8* nonnull %stack_var_-68)
  %v7_c850 = icmp eq i32 %v2_c84c, 2
  br i1 %v7_c850, label %dec_label_pc_ccec, label %dec_label_pc_c858

dec_label_pc_c858:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_ccec
  %v1_c85c = call i32 @function_110fc(i32 6)
  %v1_c864 = call i32 @function_110fc(i32 7)
  %v1_c86c = call i32 @function_110fc(i32 8)
  %v0_c870 = load i32, i32* @r4, align 4
  %v2_c878 = inttoptr i32 %v0_c870 to i32*
  %v3_c878 = call i32 @function_11018(i32 6, i32* %v2_c878)
  %v0_c87c = load i32, i32* @r4, align 4
  %v2_c880 = inttoptr i32 %v3_c878 to i8*
  %v3_c880 = call i32 @function_1240c(i8* %v2_c880, i32 %v0_c87c)
  %v7_c884 = icmp eq i32 %v3_c880, -1
  store i32 %v3_c880, i32* @r8, align 4
  br i1 %v7_c884, label %dec_label_pc_ccac, label %dec_label_pc_c890.preheader

dec_label_pc_c890.preheader:                      ; preds = %dec_label_pc_c858
  %v4_c89c58 = call i32 @function_11c34(i8* nonnull %stack_var_-581, i32 512, i32 %v3_c880)
  %v2_c8a060 = icmp eq i32 %v4_c89c58, 0
  br i1 %v2_c8a060, label %dec_label_pc_ca30.loopexit, label %dec_label_pc_c8a8.lr.ph

dec_label_pc_c8a8.lr.ph:                          ; preds = %dec_label_pc_c890.preheader
  %v2_c8f0 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_c8a8

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c8a8.lr.ph, %dec_label_pc_c890.backedge
  %v3_c8ac = load i8, i8* %stack_var_-581, align 1
  %v4_c8ac = sext i8 %v3_c8ac to i32
  %v2_c8b0 = icmp eq i8 %v3_c8ac, 0
  br i1 %v2_c8b0, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_c8a8
  %v8_c8b4 = icmp eq i8 %v3_c8ac, 58
  br i1 %v8_c8b4, label %.thread6, label %dec_label_pc_c8c8

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_c8e0

bb126:                                            ; preds = %dec_label_pc_c8a8
  br label %dec_label_pc_c8e0

dec_label_pc_c8c8:                                ; preds = %bb
  %v1_c8d0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c8cc

dec_label_pc_c8cc:                                ; preds = %bb127, %dec_label_pc_c8c8
  %v0_c8cc = phi i32 [ %v1_c8cc, %bb127 ], [ 0, %dec_label_pc_c8c8 ]
  %v1_c8cc = add i32 %v0_c8cc, 1
  %v2_c8d0 = add i32 %v1_c8cc, %v1_c8d0.pre
  %v3_c8d0 = inttoptr i32 %v2_c8d0 to i8*
  %v4_c8d0 = load i8, i8* %v3_c8d0, align 1
  %v6_c8d0 = zext i8 %v4_c8d0 to i32
  %v2_c8d4 = icmp eq i8 %v4_c8d0, 0
  br i1 %v2_c8d4, label %dec_label_pc_c8e0, label %bb127

bb127:                                            ; preds = %dec_label_pc_c8cc
  %v8_c8d8 = icmp eq i8 %v4_c8d0, 58
  br i1 %v8_c8d8, label %dec_label_pc_c8e0, label %dec_label_pc_c8cc

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8cc, %bb127, %bb126, %.thread6
  %v1_c90c = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_c8cc, %bb127 ], [ %v1_c8cc, %dec_label_pc_c8cc ]
  %v0_c8e0 = phi i32 [ %v4_c8ac, %.thread6 ], [ %v4_c8ac, %bb126 ], [ %v6_c8d0, %bb127 ], [ %v6_c8d0, %dec_label_pc_c8cc ]
  %v2_c8e0 = icmp eq i32 %v0_c8e0, 0
  br i1 %v2_c8e0, label %dec_label_pc_c890.backedge, label %dec_label_pc_c8e8

dec_label_pc_c890.backedge:                       ; preds = %dec_label_pc_c8e0, %dec_label_pc_c9b8, %dec_label_pc_ca04, %dec_label_pc_c92c
  %v0_c898 = load i32, i32* @r8, align 4
  %v4_c89c = call i32 @function_11c34(i8* nonnull %stack_var_-581, i32 512, i32 %v0_c898)
  %v2_c8a0 = icmp eq i32 %v4_c89c, 0
  br i1 %v2_c8a0, label %dec_label_pc_ca30.loopexit, label %dec_label_pc_c8a8

dec_label_pc_c8e8:                                ; preds = %dec_label_pc_c8e0
  %v1_c8ec = add i32 %v1_c90c, 2
  %v2_c8f4 = add i32 %v1_c8ec, %v2_c8f0
  %v1_c8f8 = add i32 %v2_c8f4, -545
  %v2_c8f8 = inttoptr i32 %v1_c8f8 to i8*
  %v3_c8f8 = load i8, i8* %v2_c8f8, align 1
  %v2_c8fc = icmp eq i8 %v3_c8f8, 0
  br i1 %v2_c8fc, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_c8e8
  %v8_c900 = icmp eq i8 %v3_c8f8, 32
  br i1 %v8_c900, label %.thread10, label %dec_label_pc_c90c

.thread10:                                        ; preds = %bb128
  store i32 %v1_c8ec, i32* @r5, align 4
  br label %dec_label_pc_c92c

bb129:                                            ; preds = %dec_label_pc_c8e8
  store i32 %v1_c8ec, i32* @r5, align 4
  br label %dec_label_pc_c92c

dec_label_pc_c90c:                                ; preds = %bb128
  %v0_c90c = load i32, i32* @r6, align 4
  %v2_c90c = add i32 %v0_c90c, %v1_c90c
  br label %dec_label_pc_c910

dec_label_pc_c910:                                ; preds = %bb130, %dec_label_pc_c90c
  %v0_c91c13 = phi i32 [ %v1_c91c, %bb130 ], [ %v2_c90c, %dec_label_pc_c90c ]
  %v1_c910 = add i32 %v0_c91c13, 3
  %v2_c910 = inttoptr i32 %v1_c910 to i8*
  %v3_c910 = load i8, i8* %v2_c910, align 1
  %v2_c914 = icmp eq i8 %v3_c910, 0
  br i1 %v2_c914, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_c910
  %v1_c91c14 = add i32 %v0_c91c13, 1
  br label %dec_label_pc_c924

bb130:                                            ; preds = %dec_label_pc_c910
  %v8_c918 = icmp eq i8 %v3_c910, 32
  %v1_c91c = add i32 %v0_c91c13, 1
  br i1 %v8_c918, label %dec_label_pc_c924, label %dec_label_pc_c910

dec_label_pc_c924:                                ; preds = %bb130, %.thread12
  %v1_c91c15 = phi i32 [ %v1_c91c14, %.thread12 ], [ %v1_c91c, %bb130 ]
  %v2_c924 = sub i32 %v1_c91c15, %v0_c90c
  %v1_c928 = add i32 %v2_c924, 2
  store i32 %v1_c928, i32* @r5, align 4
  br label %dec_label_pc_c92c

dec_label_pc_c92c:                                ; preds = %bb129, %.thread10, %dec_label_pc_c924
  %v1_c938 = phi i32 [ %v1_c8ec, %.thread10 ], [ %v1_c8ec, %bb129 ], [ %v1_c928, %dec_label_pc_c924 ]
  %v0_c92c = load i32, i32* @r6, align 4
  %v2_c92c = add i32 %v0_c92c, %v1_c8ec
  store i32 %v2_c92c, i32* @r4, align 4
  %v2_c938 = add i32 %v1_c938, %v2_c8f0
  store i32 0, i32* @r7, align 4
  %v3_c944 = add i32 %v2_c938, -545
  %v4_c944 = inttoptr i32 %v3_c944 to i8*
  store i8 0, i8* %v4_c944, align 1
  %v1_c948 = inttoptr i32 %v2_c92c to i8*
  %v2_c948 = call i32 @function_119dc(i8* %v1_c948)
  store i32 %v2_c948, i32* @r1, align 4
  %v0_c954 = load i32, i32* @r4, align 4
  %v3_c958 = inttoptr i32 %v0_c954 to i8*
  %v4_c958 = call i32 @function_11d30(i8* %v3_c958, i32 %v2_c948, i32 %v2_c81c)
  %v7_c95c = icmp eq i32 %v4_c958, -1
  br i1 %v7_c95c, label %dec_label_pc_c890.backedge, label %dec_label_pc_c978.preheader

dec_label_pc_c978.preheader:                      ; preds = %dec_label_pc_c92c
  %v1_c960 = load i32, i32* @r7, align 4
  %v1_c964 = load i32, i32* @r6, align 4
  %v2_c964 = load i32, i32* @r5, align 4
  %v3_c964 = add i32 %v2_c964, %v1_c964
  store i32 %v1_c960, i32* @lr, align 4
  store i32 %v1_c960, i32* @r4, align 4
  %v1_c97850 = add i32 %v3_c964, 2
  %v2_c97851 = inttoptr i32 %v1_c97850 to i8*
  %v3_c97852 = load i8, i8* %v2_c97851, align 1
  %v2_c97c54 = icmp eq i8 %v3_c97852, 0
  %v1_c98056 = add i32 %v2_c964, 2
  br i1 %v2_c97c54, label %dec_label_pc_c9b8, label %dec_label_pc_c988

dec_label_pc_c988:                                ; preds = %dec_label_pc_c978.preheader, %dec_label_pc_c978.backedge
  %v0_c9b886 = phi i32 [ %v0_c9b885, %dec_label_pc_c978.backedge ], [ %v1_c960, %dec_label_pc_c978.preheader ]
  %v0_c9a0.pr = phi i32 [ %v0_c9a0.pr71, %dec_label_pc_c978.backedge ], [ %v1_c960, %dec_label_pc_c978.preheader ]
  %v0_ccbc = phi i32 [ %v0_ccbc74, %dec_label_pc_c978.backedge ], [ %v1_c960, %dec_label_pc_c978.preheader ]
  %v0_c98082 = phi i32 [ %v1_c980, %dec_label_pc_c978.backedge ], [ %v1_c98056, %dec_label_pc_c978.preheader ]
  %v0_c9b0 = phi i32 [ %v0_c978, %dec_label_pc_c978.backedge ], [ %v3_c964, %dec_label_pc_c978.preheader ]
  %v1_c98c.in = phi i8 [ %v3_c978, %dec_label_pc_c978.backedge ], [ %v3_c97852, %dec_label_pc_c978.preheader ]
  %v7_c988 = icmp eq i8 %v1_c98c.in, 9
  br i1 %v7_c988, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_c988
  %v8_c98c = icmp eq i8 %v1_c98c.in, 32
  br i1 %v8_c98c, label %.thread23.thread35, label %dec_label_pc_c9a0

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_c9ac

.thread23:                                        ; preds = %dec_label_pc_c988
  br label %dec_label_pc_c9ac

dec_label_pc_c9a0:                                ; preds = %bb131
  %v7_c9a0 = icmp eq i32 %v0_c9a0.pr, 1
  br i1 %v7_c9a0, label %dec_label_pc_ccbc, label %dec_label_pc_c9a8

dec_label_pc_c9a8:                                ; preds = %dec_label_pc_ccbc, %dec_label_pc_c9a0
  %v0_c9ac79 = phi i32 [ %v1_ccbc, %dec_label_pc_ccbc ], [ %v0_ccbc, %dec_label_pc_c9a0 ]
  br label %dec_label_pc_c9ac

dec_label_pc_c9ac:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_c9a8
  %v0_c9ac = phi i32 [ %v0_ccbc, %.thread23.thread35 ], [ %v0_ccbc, %.thread23 ], [ %v0_c9ac79, %dec_label_pc_c9a8 ]
  %v0_c9a0.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_c9a8 ]
  %v7_c9b4 = icmp sgt i32 %v0_c9ac, 6
  br i1 %v7_c9b4, label %dec_label_pc_c9b8, label %dec_label_pc_c978.backedge

dec_label_pc_c9b8:                                ; preds = %dec_label_pc_c978.backedge, %dec_label_pc_c9ac, %dec_label_pc_c978.preheader
  %v1_ca08 = phi i32 [ %v1_c98056, %dec_label_pc_c978.preheader ], [ %v1_c980, %dec_label_pc_c978.backedge ], [ %v0_c98082, %dec_label_pc_c9ac ]
  %v0_c9b8 = phi i32 [ %v1_c960, %dec_label_pc_c978.preheader ], [ %v0_c9b885, %dec_label_pc_c978.backedge ], [ %v0_c9b886, %dec_label_pc_c9ac ]
  %v2_c9b8 = icmp eq i32 %v0_c9b8, 0
  br i1 %v2_c9b8, label %dec_label_pc_c890.backedge, label %dec_label_pc_c9c4

dec_label_pc_c9c4:                                ; preds = %dec_label_pc_c9b8
  %v2_c9cc = add i32 %v1_ca08, %v2_c8f0
  %v1_c9d0 = add i32 %v2_c9cc, -545
  %v2_c9d0 = inttoptr i32 %v1_c9d0 to i8*
  %v3_c9d0 = load i8, i8* %v2_c9d0, align 1
  %v2_c9d4 = icmp eq i8 %v3_c9d0, 0
  br i1 %v2_c9d4, label %dec_label_pc_ca04, label %bb132

bb132:                                            ; preds = %dec_label_pc_c9c4
  %v8_c9d8 = icmp eq i8 %v3_c9d0, 32
  br i1 %v8_c9d8, label %dec_label_pc_ca04, label %dec_label_pc_c9e0

dec_label_pc_c9e0:                                ; preds = %bb132
  %v2_c9e0 = add i32 %v1_ca08, %v1_c964
  br label %dec_label_pc_c9e4

dec_label_pc_c9e4:                                ; preds = %bb133, %dec_label_pc_c9e0
  %v0_c9f028 = phi i32 [ %v1_c9f0, %bb133 ], [ %v1_ca08, %dec_label_pc_c9e0 ]
  %v0_c9e4 = phi i32 [ %v1_c9e4, %bb133 ], [ %v2_c9e0, %dec_label_pc_c9e0 ]
  %v1_c9e4 = add i32 %v0_c9e4, 1
  %v2_c9e4 = inttoptr i32 %v1_c9e4 to i8*
  %v3_c9e4 = load i8, i8* %v2_c9e4, align 1
  %v2_c9e8 = icmp eq i8 %v3_c9e4, 0
  br i1 %v2_c9e8, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_c9e4
  %v1_c9f029 = add i32 %v0_c9f028, 1
  br label %dec_label_pc_c9f8

bb133:                                            ; preds = %dec_label_pc_c9e4
  %v8_c9ec = icmp eq i8 %v3_c9e4, 32
  %v1_c9f0 = add i32 %v0_c9f028, 1
  br i1 %v8_c9ec, label %dec_label_pc_c9f8, label %dec_label_pc_c9e4

dec_label_pc_c9f8:                                ; preds = %bb133, %.thread27
  %v1_ca00 = phi i32 [ %v1_c9f029, %.thread27 ], [ %v1_c9f0, %bb133 ]
  %v2_ca00 = add i32 %v1_ca00, %v2_c8f0
  br label %dec_label_pc_ca04

dec_label_pc_ca04:                                ; preds = %dec_label_pc_c9c4, %bb132, %dec_label_pc_c9f8
  %v2_ca10 = phi i32 [ %v2_c9cc, %dec_label_pc_c9c4 ], [ %v2_c9cc, %bb132 ], [ %v2_ca00, %dec_label_pc_c9f8 ]
  %v2_ca08 = add i32 %v1_ca08, %v1_c964
  store i32 %v2_ca08, i32* @r4, align 4
  %v3_ca10 = add i32 %v2_ca10, -545
  %v4_ca10 = inttoptr i32 %v3_ca10 to i8*
  store i8 0, i8* %v4_ca10, align 1
  %v1_ca14 = inttoptr i32 %v2_ca08 to i8*
  %v2_ca14 = call i32 @function_119dc(i8* %v1_ca14)
  %v8_ca1c = icmp sgt i32 %v2_ca14, 15
  br i1 %v8_ca1c, label %dec_label_pc_c890.backedge, label %dec_label_pc_ca20

dec_label_pc_ca20:                                ; preds = %dec_label_pc_ca04
  %v0_ca24 = load i32, i32* @r4, align 4
  %v2_ca28 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ca28, i32* @r0, align 4
  %v2_ca2c = bitcast i32* %stack_var_-52 to i8*
  %v3_ca2c = call i32 @function_11a04(i8* %v2_ca2c, i32 %v0_ca24)
  br label %dec_label_pc_ca30

dec_label_pc_ca30.loopexit:                       ; preds = %dec_label_pc_c890.backedge, %dec_label_pc_c890.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_ca30

dec_label_pc_ca30:                                ; preds = %dec_label_pc_ca30.loopexit, %dec_label_pc_ca20
  %v1_ca40.pre-phi = phi i8* [ %.pre95, %dec_label_pc_ca30.loopexit ], [ %v2_ca2c, %dec_label_pc_ca20 ]
  %v2_ca3c.pre-phi = phi i32 [ %.pre, %dec_label_pc_ca30.loopexit ], [ %v2_ca28, %dec_label_pc_ca20 ]
  %v0_ca30 = load i32, i32* @r8, align 4
  %v1_ca34 = call i32 @function_122e0(i32 %v0_ca30)
  %v2_ca40 = call i32 @function_119dc(i8* %v1_ca40.pre-phi)
  store i32 %v2_ca40, i32* @r4, align 4
  %v2_ca44 = icmp eq i32 %v2_ca40, 0
  br i1 %v2_ca44, label %dec_label_pc_cc94, label %dec_label_pc_ca4c

dec_label_pc_ca4c:                                ; preds = %dec_label_pc_ca30
  %v3_ca54 = call i32 @function_11018(i32 6, i32* null)
  store i32 %v3_ca54, i32* @r0, align 4
  %v1_ca58 = call i32 @function_126e8(i32 %v3_ca54)
  store i32 %v1_ca58, i32* @r8, align 4
  %v2_ca5c = icmp eq i32 %v1_ca58, 0
  br i1 %v2_ca5c, label %dec_label_pc_cc8c, label %dec_label_pc_ca6c.preheader

dec_label_pc_ca6c.preheader:                      ; preds = %dec_label_pc_ca4c
  store i32 0, i32* @r5, align 4
  %v1_ca7045 = inttoptr i32 %v1_ca58 to i32*
  %v2_ca7046 = call i32 @function_127e4(i32* %v1_ca7045)
  %v2_ca7448 = icmp eq i32 %v2_ca7046, 0
  br i1 %v2_ca7448, label %dec_label_pc_cc80, label %dec_label_pc_ca7c.preheader

dec_label_pc_ca6c.loopexit:                       ; preds = %dec_label_pc_ca84, %dec_label_pc_ca98, %dec_label_pc_cb00
  %v0_ca6c = load i32, i32* @r8, align 4
  %v1_ca70 = inttoptr i32 %v0_ca6c to i32*
  %v2_ca70 = call i32 @function_127e4(i32* %v1_ca70)
  %v2_ca74 = icmp eq i32 %v2_ca70, 0
  br i1 %v2_ca74, label %dec_label_pc_cc80, label %dec_label_pc_ca7c.preheader

dec_label_pc_ca7c.preheader:                      ; preds = %dec_label_pc_ca6c.preheader, %dec_label_pc_ca6c.loopexit
  %v0_ca8494 = phi i32 [ %v2_ca70, %dec_label_pc_ca6c.loopexit ], [ %v2_ca7046, %dec_label_pc_ca6c.preheader ]
  br label %dec_label_pc_ca7c

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_ca7c.preheader, %dec_label_pc_cc68
  %v0_ca90 = phi i32 [ %v0_ca8494, %dec_label_pc_ca7c.preheader ], [ %v2_cc74, %dec_label_pc_cc68 ]
  %v0_ca7c = load i32, i32* @r5, align 4
  %v2_ca7c = icmp eq i32 %v0_ca7c, 0
  br i1 %v2_ca7c, label %dec_label_pc_ca84, label %dec_label_pc_cc80

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca7c
  %v1_ca84 = add i32 %v0_ca90, 11
  %v2_ca84 = inttoptr i32 %v1_ca84 to i8*
  %v3_ca84 = load i8, i8* %v2_ca84, align 1
  %v4_ca84 = zext i8 %v3_ca84 to i32
  %v1_ca88 = add nsw i32 %v4_ca84, -48
  store i32 %v1_ca84, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_ca88, 9
  br i1 %tmp, label %dec_label_pc_ca6c.loopexit, label %dec_label_pc_ca98

dec_label_pc_ca98:                                ; preds = %dec_label_pc_ca84
  %v3_caa0 = call i32 @function_11018(i32 6, i32* null)
  store i32 %v2_c7bc, i32* @r0, align 4
  %v3_caac = call i32 @function_11a04(i8* %v2_c7dc, i32 %v3_caa0)
  %v2_cab4 = call i32 @function_119dc(i8* %v2_c7dc)
  %v0_cab8 = load i32, i32* @r7, align 4
  %v0_cabc = load i32, i32* @sl, align 4
  %v2_cabc = add i32 %v0_cabc, %v2_cab4
  store i32 %v2_cabc, i32* @r0, align 4
  %v2_cac0 = inttoptr i32 %v2_cabc to i8*
  %v3_cac0 = call i32 @function_11a04(i8* %v2_cac0, i32 %v0_cab8)
  %v2_cac8 = call i32 @function_119dc(i8* %v2_c7dc)
  %v0_cacc = load i32, i32* @r5, align 4
  store i32 %v2_cac8, i32* @r4, align 4
  %v2_cad8 = inttoptr i32 %v0_cacc to i32*
  %v3_cad8 = call i32 @function_11018(i32 7, i32* %v2_cad8)
  %v0_cae0 = load i32, i32* @sl, align 4
  %v1_cae0 = load i32, i32* @r4, align 4
  %v2_cae0 = add i32 %v1_cae0, %v0_cae0
  store i32 %v2_cae0, i32* @r0, align 4
  %v2_cae4 = inttoptr i32 %v2_cae0 to i8*
  %v3_cae4 = call i32 @function_11a04(i8* %v2_cae4, i32 %v3_cad8)
  %v4_caf4 = call i32 @function_124d4(i8* %v2_c7dc, i32 %v2_c7d0, i32 4096)
  %v7_caf8 = icmp eq i32 %v4_caf4, -1
  br i1 %v7_caf8, label %dec_label_pc_ca6c.loopexit, label %dec_label_pc_cb00

dec_label_pc_cb00:                                ; preds = %dec_label_pc_ca98
  %v0_cb00 = load i32, i32* @r5, align 4
  %v2_cb08 = inttoptr i32 %v0_cb00 to i32*
  %v3_cb08 = call i32 @function_11018(i32 6, i32* %v2_cb08)
  store i32 %v2_c7bc, i32* @r0, align 4
  %v3_cb14 = call i32 @function_11a04(i8* %v2_c7dc, i32 %v3_cb08)
  %v2_cb1c = call i32 @function_119dc(i8* %v2_c7dc)
  %v0_cb20 = load i32, i32* @r7, align 4
  %v0_cb24 = load i32, i32* @sl, align 4
  %v2_cb24 = add i32 %v0_cb24, %v2_cb1c
  store i32 %v2_cb24, i32* @r0, align 4
  %v2_cb28 = inttoptr i32 %v2_cb24 to i8*
  %v3_cb28 = call i32 @function_11a04(i8* %v2_cb28, i32 %v0_cb20)
  %v2_cb30 = call i32 @function_119dc(i8* %v2_c7dc)
  %v0_cb34 = load i32, i32* @r5, align 4
  store i32 %v2_cb30, i32* @r4, align 4
  %v2_cb40 = inttoptr i32 %v0_cb34 to i32*
  %v3_cb40 = call i32 @function_11018(i32 8, i32* %v2_cb40)
  %v0_cb48 = load i32, i32* @sl, align 4
  %v1_cb48 = load i32, i32* @r4, align 4
  %v2_cb48 = add i32 %v1_cb48, %v0_cb48
  store i32 %v2_cb48, i32* @r0, align 4
  %v2_cb4c = inttoptr i32 %v2_cb48 to i8*
  %v3_cb4c = call i32 @function_11a04(i8* %v2_cb4c, i32 %v3_cb40)
  store i32 %v2_c7bc, i32* @r0, align 4
  %v1_cb54 = call i32 @function_126e8(i32 %v2_c7bc)
  store i32 %v1_cb54, i32* @sb, align 4
  %v2_cb58 = icmp eq i32 %v1_cb54, 0
  br i1 %v2_cb58, label %dec_label_pc_ca6c.loopexit, label %dec_label_pc_cb60.preheader

dec_label_pc_cb60.preheader:                      ; preds = %dec_label_pc_cb00
  %v1_cb6440 = inttoptr i32 %v1_cb54 to i32*
  %v2_cb6441 = call i32 @function_127e4(i32* %v1_cb6440)
  store i32 %v2_cb6441, i32* @r6, align 4
  %v2_cb6843 = icmp eq i32 %v2_cb6441, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d0, i32* @r0, align 4
  br i1 %v2_cb6843, label %dec_label_pc_cc68, label %dec_label_pc_cb78thread-pre-split

dec_label_pc_cb60.loopexit:                       ; preds = %dec_label_pc_cb80, %dec_label_pc_cc18
  %v0_cb60 = load i32, i32* @sb, align 4
  %v1_cb64 = inttoptr i32 %v0_cb60 to i32*
  %v2_cb64 = call i32 @function_127e4(i32* %v1_cb64)
  store i32 %v2_cb64, i32* @r6, align 4
  %v2_cb68 = icmp eq i32 %v2_cb64, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d0, i32* @r0, align 4
  br i1 %v2_cb68, label %dec_label_pc_cc68, label %dec_label_pc_cb78thread-pre-split

dec_label_pc_cb78thread-pre-split:                ; preds = %dec_label_pc_cb60.preheader, %dec_label_pc_cb60.loopexit
  %v0_cb78.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cb78

dec_label_pc_cb78:                                ; preds = %dec_label_pc_cb78thread-pre-split, %dec_label_pc_cc40
  %v0_cb78 = phi i32 [ %v0_cb78.pr, %dec_label_pc_cb78thread-pre-split ], [ 1, %dec_label_pc_cc40 ]
  %v2_cb78 = icmp eq i32 %v0_cb78, 0
  br i1 %v2_cb78, label %dec_label_pc_cb80, label %dec_label_pc_cc68

dec_label_pc_cb80:                                ; preds = %dec_label_pc_cb78
  %v0_cb80 = call i32 @function_11a7c()
  %v0_cb84 = load i32, i32* @r5, align 4
  %v2_cb8c = inttoptr i32 %v0_cb84 to i32*
  %v3_cb8c = call i32 @function_11018(i32 6, i32* %v2_cb8c)
  store i32 %v2_c7bc, i32* @r0, align 4
  %v3_cb98 = call i32 @function_11a04(i8* %v2_c7dc, i32 %v3_cb8c)
  %v2_cba0 = call i32 @function_119dc(i8* %v2_c7dc)
  %v0_cba4 = load i32, i32* @r7, align 4
  %v0_cba8 = load i32, i32* @sl, align 4
  %v2_cba8 = add i32 %v0_cba8, %v2_cba0
  store i32 %v2_cba8, i32* @r0, align 4
  %v2_cbac = inttoptr i32 %v2_cba8 to i8*
  %v3_cbac = call i32 @function_11a04(i8* %v2_cbac, i32 %v0_cba4)
  %v2_cbb4 = call i32 @function_119dc(i8* %v2_c7dc)
  %v0_cbb8 = load i32, i32* @r5, align 4
  store i32 %v2_cbb4, i32* @r4, align 4
  %v2_cbc4 = inttoptr i32 %v0_cbb8 to i32*
  %v3_cbc4 = call i32 @function_11018(i32 8, i32* %v2_cbc4)
  %v0_cbcc = load i32, i32* @sl, align 4
  %v1_cbcc = load i32, i32* @r4, align 4
  %v2_cbcc = add i32 %v1_cbcc, %v0_cbcc
  store i32 %v2_cbcc, i32* @r0, align 4
  %v2_cbd0 = inttoptr i32 %v2_cbcc to i8*
  %v3_cbd0 = call i32 @function_11a04(i8* %v2_cbd0, i32 %v3_cbc4)
  %v2_cbd8 = call i32 @function_119dc(i8* %v2_c7dc)
  %v0_cbe0 = load i32, i32* @sl, align 4
  %v2_cbe0 = add i32 %v0_cbe0, %v2_cbd8
  store i32 %v2_cbe0, i32* @r0, align 4
  %v2_cbe4 = inttoptr i32 %v2_cbe0 to i8*
  %v3_cbe4 = call i32 @function_11a04(i8* %v2_cbe4, i32 ptrtoint (i32* @global_var_14b84.60 to i32))
  %v2_cbec = call i32 @function_119dc(i8* %v2_c7dc)
  %v0_cbf0 = load i32, i32* @r6, align 4
  %v1_cbf0 = add i32 %v0_cbf0, 11
  %v0_cbf4 = load i32, i32* @sl, align 4
  %v2_cbf4 = add i32 %v0_cbf4, %v2_cbec
  store i32 %v2_cbf4, i32* @r0, align 4
  %v2_cbf8 = inttoptr i32 %v2_cbf4 to i8*
  %v3_cbf8 = call i32 @function_11a04(i8* %v2_cbf8, i32 %v1_cbf0)
  %v4_cc08 = call i32 @function_124d4(i8* %v2_c7dc, i32 %v2_c7d0, i32 4096)
  %v7_cc0c = icmp eq i32 %v4_cc08, -1
  br i1 %v7_cc0c, label %dec_label_pc_cb60.loopexit, label %dec_label_pc_cc18

dec_label_pc_cc18:                                ; preds = %dec_label_pc_cb80
  %v2_cc18 = call i32 @function_119dc(i8* %v2_c7f4)
  store i32 %v2_cc18, i32* @r1, align 4
  %v4_cc2c = call i32 @function_11d30(i8* %v2_c7f4, i32 %v2_cc18, i32 %v2_ca3c.pre-phi)
  %v7_cc30 = icmp eq i32 %v4_cc2c, -1
  br i1 %v7_cc30, label %dec_label_pc_cb60.loopexit, label %dec_label_pc_cc40

dec_label_pc_cc40:                                ; preds = %dec_label_pc_cc18
  %v0_cc38 = load i32, i32* @r7, align 4
  %v2_cc40 = inttoptr i32 %v0_cc38 to i8*
  %v3_cc40 = call i32 @function_11b08(i8* %v2_cc40, i32 10)
  %v2_cc48 = call i32 @function_123e0(i32 %v3_cc40, i32 9)
  %v0_cc4c = load i32, i32* @sb, align 4
  %v1_cc50 = inttoptr i32 %v0_cc4c to i32*
  %v2_cc50 = call i32 @function_127e4(i32* %v1_cc50)
  store i32 %v2_cc50, i32* @r6, align 4
  %v2_cc54 = icmp eq i32 %v2_cc50, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d0, i32* @r0, align 4
  br i1 %v2_cc54, label %dec_label_pc_cc68, label %dec_label_pc_cb78

dec_label_pc_cc68:                                ; preds = %dec_label_pc_cb60.loopexit, %dec_label_pc_cc40, %dec_label_pc_cb78, %dec_label_pc_cb60.preheader
  %v0_cc68 = load i32, i32* @sb, align 4
  %v1_cc6c = inttoptr i32 %v0_cc68 to i32*
  %v2_cc6c = call i32 @function_12634(i32* %v1_cc6c)
  %v0_cc70 = load i32, i32* @r8, align 4
  %v1_cc74 = inttoptr i32 %v0_cc70 to i32*
  %v2_cc74 = call i32 @function_127e4(i32* %v1_cc74)
  %v2_cc78 = icmp eq i32 %v2_cc74, 0
  br i1 %v2_cc78, label %dec_label_pc_cc80, label %dec_label_pc_ca7c

dec_label_pc_cc80:                                ; preds = %dec_label_pc_ca6c.loopexit, %dec_label_pc_cc68, %dec_label_pc_ca7c, %dec_label_pc_ca6c.preheader
  %v0_cc80 = load i32, i32* @r8, align 4
  %v1_cc84 = inttoptr i32 %v0_cc80 to i32*
  %v2_cc84 = call i32 @function_12634(i32* %v1_cc84)
  %v0_cc88 = load i32, i32* @r5, align 4
  %v1_cc88 = urem i32 %v0_cc88, 256
  br label %dec_label_pc_cc8c

dec_label_pc_cc8c:                                ; preds = %dec_label_pc_ca4c, %dec_label_pc_cc80
  %storemerge = phi i32 [ %v1_cc88, %dec_label_pc_cc80 ], [ 0, %dec_label_pc_ca4c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_cc90 = call i32 @function_13718(i32 1)
  br label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_ca30, %dec_label_pc_cc8c
  %v1_cc98 = call i32 @function_11044(i32 6)
  %v1_cca0 = call i32 @function_11044(i32 7)
  %v1_cca8 = call i32 @function_11044(i32 8)
  br label %dec_label_pc_ccac

dec_label_pc_ccac:                                ; preds = %dec_label_pc_c858, %dec_label_pc_cc94
  %v0_ccac = load i32, i32* @r4, align 4
  %v2_ccb8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ccb8, i32* @r4, align 4
  store i32 %v6_c7a8, i32* @r5, align 4
  store i32 %v9_c7a8, i32* @r6, align 4
  store i32 %v12_c7a8, i32* @r7, align 4
  store i32 %v15_c7a8, i32* @r8, align 4
  store i32 %v18_c7a8, i32* @sb, align 4
  store i32 %v21_c7a8, i32* @sl, align 4
  store i32 %v24_c7a8, i32* @fp, align 4
  ret i32 %v0_ccac

dec_label_pc_ccbc:                                ; preds = %dec_label_pc_c9a0
  %v1_ccbc = add i32 %v0_ccbc, 1
  store i32 %v1_ccbc, i32* @lr, align 4
  %v7_ccc0 = icmp eq i32 %v0_ccbc, 0
  br i1 %v7_ccc0, label %dec_label_pc_ccc8, label %dec_label_pc_c9a8

dec_label_pc_ccc8:                                ; preds = %dec_label_pc_ccbc
  %v1_ccc8 = add i32 %v0_c9b0, 3
  %v2_ccc8 = inttoptr i32 %v1_ccc8 to i8*
  %v3_ccc8 = load i8, i8* %v2_ccc8, align 1
  %v7_cccc = icmp eq i8 %v3_ccc8, 65
  br i1 %v7_cccc, label %dec_label_pc_ccdc, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_ccc8
  br label %dec_label_pc_c978.backedge

dec_label_pc_ccdc:                                ; preds = %dec_label_pc_ccc8
  store i32 %v1_ccbc, i32* @r4, align 4
  br label %dec_label_pc_c978.backedge

dec_label_pc_c978.backedge:                       ; preds = %.thread33, %dec_label_pc_ccdc, %dec_label_pc_c9ac
  %v0_c9b885 = phi i32 [ %v1_ccbc, %dec_label_pc_ccdc ], [ %v0_c9b886, %dec_label_pc_c9ac ], [ %v0_c9b886, %.thread33 ]
  %v0_ccbc74 = phi i32 [ %v1_ccbc, %dec_label_pc_ccdc ], [ %v0_c9ac, %dec_label_pc_c9ac ], [ %v1_ccbc, %.thread33 ]
  %v0_c9a0.pr71 = phi i32 [ 0, %dec_label_pc_ccdc ], [ %v0_c9a0.pr72, %dec_label_pc_c9ac ], [ 0, %.thread33 ]
  %v0_c978 = add i32 %v0_c9b0, 1
  %v1_c978 = add i32 %v0_c9b0, 3
  %v2_c978 = inttoptr i32 %v1_c978 to i8*
  %v3_c978 = load i8, i8* %v2_c978, align 1
  %v2_c97c = icmp eq i8 %v3_c978, 0
  %v1_c980 = add i32 %v0_c98082, 1
  br i1 %v2_c97c, label %dec_label_pc_c9b8, label %dec_label_pc_c988

dec_label_pc_ccec:                                ; preds = %dec_label_pc_c7a8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_c858

; uselistorder directives
  uselistorder i32 %v1_c980, { 1, 0 }
  uselistorder i8 %v3_c978, { 1, 0 }
  uselistorder i32 %v0_c9b885, { 1, 0 }
  uselistorder i32 %v1_ccbc, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_cc74, { 1, 0 }
  uselistorder i32 %v1_c9e4, { 1, 0 }
  uselistorder i32 %v0_c9f028, { 1, 0 }
  uselistorder i32 %v1_ca08, { 0, 3, 1, 2 }
  uselistorder i32 %v0_c9ac, { 1, 0 }
  uselistorder i32 %v0_c98082, { 1, 0 }
  uselistorder i32 %v0_ccbc, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_c9b886, { 1, 2, 0 }
  uselistorder i32 %v1_c98056, { 1, 0 }
  uselistorder i32 %v2_c964, { 1, 0 }
  uselistorder i32 %v1_c960, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_c91c13, { 1, 0, 2 }
  uselistorder i32 %v0_c90c, { 1, 0 }
  uselistorder i32 %v1_c8ec, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_c880, { 1, 2, 0 }
  uselistorder i32 %v2_c7d0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_c7bc, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_11b08, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_11c34, { 1, 0 }
  uselistorder label %dec_label_pc_c978.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ccac, { 1, 0 }
  uselistorder label %dec_label_pc_cc94, { 1, 0 }
  uselistorder label %dec_label_pc_cc8c, { 1, 0 }
  uselistorder label %dec_label_pc_cc80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cc68, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cb78, { 1, 0 }
  uselistorder label %dec_label_pc_cb78thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cb60.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_ca7c, { 1, 0 }
  uselistorder label %dec_label_pc_ca7c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ca6c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ca04, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c9ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c988, { 1, 0 }
  uselistorder label %dec_label_pc_c92c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c890.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c8e0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_c8a8, { 1, 0 }
  uselistorder label %dec_label_pc_c858, { 1, 0 }
}

define i32 @function_cd18(i32 %arg1) local_unnamed_addr {
dec_label_pc_cd18:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-244 = alloca i32, align 4
  %stack_var_-4340 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-8436 = alloca i32, align 4
  %stack_var_-100 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-8484 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_cd18 = load i32, i32* @r4, align 4
  store i32 %v3_cd18, i32* %stack_var_-36, align 4
  %v6_cd18 = load i32, i32* @r5, align 4
  %v9_cd18 = load i32, i32* @r6, align 4
  %v12_cd18 = load i32, i32* @r7, align 4
  %v15_cd18 = load i32, i32* @r8, align 4
  %v18_cd18 = load i32, i32* @sb, align 4
  %v21_cd18 = load i32, i32* @sl, align 4
  %v24_cd18 = load i32, i32* @fp, align 4
  %v28_cd18 = ptrtoint i32* %stack_var_-36 to i32
  %v2_cd24 = call i32 @function_125b0(i32* null)
  store i32 %v2_cd24, i32* @r8, align 4
  %v0_cd2c = call i32 @function_1230c()
  %v7_cd30 = icmp eq i32 %v0_cd2c, -1
  %. = zext i1 %v7_cd30 to i32
  %tmp364 = icmp slt i32 %v0_cd2c, 1
  %storemerge314 = select i1 %tmp364, i32 %., i32 1
  store i32 %storemerge314, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1d908.58 to i32), i32* %r3.global-to-local, align 4
  %v2_cd4c = icmp eq i32 %storemerge314, 0
  store i32 %v0_cd2c, i32* @global_var_1d908.58, align 4
  br i1 %v2_cd4c, label %dec_label_pc_cd60, label %dec_label_pc_cd58

dec_label_pc_cd58:                                ; preds = %dec_label_pc_ced0, %dec_label_pc_cdc0, %dec_label_pc_cd18
  %v29_cd5c = phi i32 [ %v3_ce64, %dec_label_pc_cdc0 ], [ %v0_cd2c, %dec_label_pc_cd18 ], [ 0, %dec_label_pc_ced0 ]
  %v2_cd5c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_cd5c, i32* @r4, align 4
  store i32 %v6_cd18, i32* @r5, align 4
  store i32 %v9_cd18, i32* @r6, align 4
  store i32 %v12_cd18, i32* @r7, align 4
  store i32 %v15_cd18, i32* @r8, align 4
  store i32 %v18_cd18, i32* @sb, align 4
  store i32 %v21_cd18, i32* @sl, align 4
  store i32 %v24_cd18, i32* @fp, align 4
  ret i32 %v29_cd5c

dec_label_pc_cd60:                                ; preds = %dec_label_pc_cd18
  %v2_cd60 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v2_cd60, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  store i32 2, i32* %stack_var_-100, align 4
  %v1_cd78 = call i32 @function_c7a8(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_cd84 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cd8c = load i32, i32* @r5, align 4
  store i32 %v0_cd8c, i32* %r2.global-to-local, align 4
  %v3_cd98 = call i32 @function_12bfc(i32 %v0_cd84, i32 1, i32 %v0_cd8c)
  %v7_cd9c = icmp eq i32 %v3_cd98, -1
  store i32 %v3_cd98, i32* @r4, align 4
  br i1 %v7_cd9c, label %dec_label_pc_cdc0, label %dec_label_pc_cda8

dec_label_pc_cda8:                                ; preds = %dec_label_pc_cd60
  %v2_cda8 = ptrtoint i32* %stack_var_-100 to i32
  store i32 %v2_cda8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cdb0 = bitcast i32* %stack_var_-100 to %sockaddr*
  %v4_cdb0 = call i32 @function_12a2c(i32 %v3_cd98, %sockaddr* %v3_cdb0, i32 16)
  %v0_cdb4 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cdbc = call i32 @function_12ae0(i32 %v0_cdb4, i32 1)
  br label %dec_label_pc_cdc0

dec_label_pc_cdc0:                                ; preds = %dec_label_pc_cd60, %dec_label_pc_cda8
  %v1_cdc4 = call i32 @function_13718(i32 5)
  %v1_cdcc = call i32 @function_12d94(i32 4096)
  store i32 ptrtoint (i32* @global_var_1d868.63 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d904.65 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_cdcc, i32* %r2.global-to-local, align 4
  %v0_cddc = load i32, i32* @r5, align 4
  %v1_cddc = trunc i32 %v0_cddc to i8
  %v3_cddc = inttoptr i32 %v1_cdcc to i8*
  store i8 %v1_cddc, i8* %v3_cddc, align 1
  %v0_cde4 = load i32, i32* @r5, align 4
  %v1_cde4 = load i32, i32* %r3.global-to-local, align 4
  %v2_cde4 = inttoptr i32 %v1_cde4 to i32*
  store i32 %v0_cde4, i32* %v2_cde4, align 4
  %v0_cde8 = load i32, i32* %r2.global-to-local, align 4
  %v1_cde8 = load i32, i32* %r1.global-to-local, align 4
  %v2_cde8 = inttoptr i32 %v1_cde8 to i32*
  store i32 %v0_cde8, i32* %v2_cde8, align 4
  %v1_cdec = call i32 @function_110fc(i32 6)
  %v1_cdf4 = call i32 @function_110fc(i32 7)
  %v0_cdf8 = load i32, i32* @r5, align 4
  store i32 %v0_cdf8, i32* %r1.global-to-local, align 4
  %v2_ce00 = inttoptr i32 %v0_cdf8 to i32*
  %v3_ce00 = call i32 @function_11018(i32 6, i32* %v2_ce00)
  %v2_ce08 = ptrtoint i32* %stack_var_-8436 to i32
  store i32 %v2_ce08, i32* @r7, align 4
  store i32 %v3_ce00, i32* %r1.global-to-local, align 4
  store i32 %v2_ce08, i32* @r0, align 4
  %v2_ce14 = bitcast i32* %stack_var_-8436 to i8*
  %v3_ce14 = call i32 @function_11a04(i8* %v2_ce14, i32 %v3_ce00)
  %v0_ce18 = load i32, i32* @r7, align 4
  %v2_ce18 = add i32 %v0_ce18, %v3_ce14
  store i32 %v2_ce18, i32* @r4, align 4
  %v0_ce1c = call i32 @function_12338()
  %v2_ce24 = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_ce24, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_ce2c = trunc i32 %v0_ce1c to i8
  %v4_ce2c = call i32 @function_11e40(i8 %v3_ce2c, i32 10, i32 %v2_ce24)
  store i32 %v4_ce2c, i32* %r1.global-to-local, align 4
  %v0_ce34 = load i32, i32* @r4, align 4
  store i32 %v0_ce34, i32* @r0, align 4
  %v2_ce38 = inttoptr i32 %v0_ce34 to i8*
  %v3_ce38 = call i32 @function_11a04(i8* %v2_ce38, i32 %v4_ce2c)
  %v0_ce3c = load i32, i32* @r5, align 4
  store i32 %v0_ce3c, i32* %r1.global-to-local, align 4
  %v0_ce40 = load i32, i32* @r4, align 4
  %v2_ce40 = add i32 %v0_ce40, %v3_ce38
  store i32 %v2_ce40, i32* @r4, align 4
  %v2_ce48 = inttoptr i32 %v0_ce3c to i32*
  %v3_ce48 = call i32 @function_11018(i32 7, i32* %v2_ce48)
  store i32 %v3_ce48, i32* %r1.global-to-local, align 4
  %v0_ce50 = load i32, i32* @r4, align 4
  store i32 %v0_ce50, i32* @r0, align 4
  %v2_ce54 = inttoptr i32 %v0_ce50 to i8*
  %v3_ce54 = call i32 @function_11a04(i8* %v2_ce54, i32 %v3_ce48)
  %v0_ce58 = load i32, i32* @r5, align 4
  store i32 %v0_ce58, i32* %r1.global-to-local, align 4
  store i32 %v3_ce54, i32* @r6, align 4
  %v3_ce64 = call i32 @function_1240c(i8* %v2_ce14, i32 %v0_ce58)
  %v7_ce68 = icmp eq i32 %v3_ce64, -1
  br i1 %v7_ce68, label %dec_label_pc_cd58, label %dec_label_pc_ce70

dec_label_pc_ce70:                                ; preds = %dec_label_pc_cdc0
  %v1_ce70 = call i32 @function_122e0(i32 %v3_ce64)
  %v1_ce78 = call i32 @function_11044(i32 6)
  %v1_ce80 = call i32 @function_11044(i32 7)
  store i32 ptrtoint (i32* @global_var_1d904.65 to i32), i32* %r3.global-to-local, align 4
  %v2_ce8c = load i32, i32* @global_var_1d904.65, align 4
  store i32 %v2_ce8c, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_ce98 = call i32 @function_124d4(i8* %v2_ce14, i32 %v2_ce8c, i32 4095)
  %v7_ce9c = icmp eq i32 %v4_ce98, -1
  br i1 %v7_ce9c, label %.thread16.thread, label %bb367

.thread16.thread:                                 ; preds = %dec_label_pc_ce70
  %v0_cea8128 = load i32, i32* @r4, align 4
  %v1_cea8129 = load i32, i32* @r6, align 4
  %v2_cea8130 = add i32 %v1_cea8129, %v0_cea8128
  store i32 %v2_cea8130, i32* %r1.global-to-local, align 4
  br label %bb368

bb367:                                            ; preds = %dec_label_pc_ce70
  %v3_cea4 = load i32, i32* @global_var_1d904.65, align 4
  store i32 %v3_cea4, i32* %r3.global-to-local, align 4
  %v0_cea8 = load i32, i32* @r4, align 4
  %v1_cea8 = load i32, i32* @r6, align 4
  %v2_cea8 = add i32 %v1_cea8, %v0_cea8
  store i32 %v2_cea8, i32* %r1.global-to-local, align 4
  %v1_ceac = load i32, i32* @r5, align 4
  %v2_ceac = trunc i32 %v1_ceac to i8
  %v5_ceac = add i32 %v3_cea4, %v4_ce98
  %v6_ceac = inttoptr i32 %v5_ceac to i8*
  store i8 %v2_ceac, i8* %v6_ceac, align 1
  %v1_ceb0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb368

bb368:                                            ; preds = %.thread16.thread, %bb367
  %v1_ceb0 = phi i32 [ %v2_cea8130, %.thread16.thread ], [ %v1_ceb0.pre, %bb367 ]
  %v0_ceb0 = load i32, i32* @r7, align 4
  %v2_ceb0 = sub i32 %v1_ceb0, %v0_ceb0
  store i32 %v2_ceb0, i32* @r1, align 4
  store i32 %v2_ce08, i32* @r0, align 4
  %v0_ceb8 = call i32 @function_11a7c()
  %v0_cec0 = load i32, i32* @r5, align 4
  store i32 %v0_cec0, i32* @sb, align 4
  %v0_cec4 = load i32, i32* @r8, align 4
  store i32 %v0_cec4, i32* @r4, align 4
  %v2_cec8 = ptrtoint i32* %stack_var_-4340 to i32
  store i32 400, i32* @r5, align 4
  %v2_cfbc = ptrtoint i32* %stack_var_-244 to i32
  %v2_cfc0 = bitcast i32* %stack_var_-244 to i8*
  %v2_d00c = ptrtoint i32* %stack_var_-180 to i32
  %v2_d010 = bitcast i32* %stack_var_-180 to i8*
  %v2_d1b8 = ptrtoint i32* %stack_var_-60 to i32
  %v2_d1c8 = ptrtoint i32* %stack_var_-64 to i32
  %v2_d1e0 = ptrtoint i32* %stack_var_-68 to i32
  %v2_d1f4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_d208 = ptrtoint i32* %stack_var_-76 to i32
  %v2_d21c = ptrtoint i32* %stack_var_-80 to i32
  %v2_d230 = ptrtoint i32* %stack_var_-84 to i32
  %v2_d244 = ptrtoint i32* %stack_var_-72 to i32
  %v2_d258 = ptrtoint i32* %stack_var_-40 to i32
  %v2_d26c = ptrtoint i32* %stack_var_-44 to i32
  %v2_d280 = ptrtoint i32* %stack_var_-48 to i32
  %v2_d294 = ptrtoint i32* %stack_var_-52 to i32
  %v3_d0b4 = bitcast i32* %stack_var_-4340 to i8*
  br label %dec_label_pc_ced0

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cf80, %bb368
  %v1_ced4 = call i32 @function_110fc(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cee0 = call i32 @function_11018(i32 6, i32* null)
  store i32 %v3_cee0, i32* @r0, align 4
  %v1_cee4 = call i32 @function_126e8(i32 %v3_cee0)
  store i32 %v1_cee4, i32* @sl, align 4
  %v2_cee8 = icmp eq i32 %v1_cee4, 0
  br i1 %v2_cee8, label %dec_label_pc_cd58, label %dec_label_pc_cef0

dec_label_pc_cef0:                                ; preds = %dec_label_pc_ced0
  %v1_cef4 = call i32 @function_11044(i32 6)
  %v0_cef8218 = load i32, i32* @sl, align 4
  %v1_cefc219 = inttoptr i32 %v0_cef8218 to i32*
  %v2_cefc220 = call i32 @function_127e4(i32* %v1_cefc219)
  %v2_cf00222 = icmp eq i32 %v2_cefc220, 0
  br i1 %v2_cf00222, label %dec_label_pc_cf80, label %dec_label_pc_cf08.preheader

dec_label_pc_cf08.preheader:                      ; preds = %dec_label_pc_cef0, %dec_label_pc_cef8.backedge
  %v0_cf08235 = phi i32 [ %v2_cefc, %dec_label_pc_cef8.backedge ], [ %v2_cefc220, %dec_label_pc_cef0 ]
  br label %dec_label_pc_cf08

dec_label_pc_cf08:                                ; preds = %dec_label_pc_cf08.preheader, %dec_label_pc_cf68
  %v0_cf18 = phi i32 [ %v0_cf08235, %dec_label_pc_cf08.preheader ], [ %v2_cf74, %dec_label_pc_cf68 ]
  %v1_cf08 = add i32 %v0_cf18, 11
  %v2_cf08 = inttoptr i32 %v1_cf08 to i8*
  %v3_cf08 = load i8, i8* %v2_cf08, align 1
  %v4_cf08 = zext i8 %v3_cf08 to i32
  %v1_cf0c = add nsw i32 %v4_cf08, -48
  store i32 %v1_cf0c, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_cf0c, 9
  br i1 %tmp, label %dec_label_pc_cef8.backedge, label %dec_label_pc_cf18

dec_label_pc_cf18:                                ; preds = %dec_label_pc_cf08
  store i32 %v1_cf08, i32* @r6, align 4
  %v2_cf20 = call i32 @function_134d8(i8* %v2_cf08)
  %v0_cf24 = load i32, i32* @r5, align 4
  store i32 %v2_cf20, i32* @r8, align 4
  %v0_cf2c = load i32, i32* @sb, align 4
  %v1_cf2c = add i32 %v0_cf2c, 1
  store i32 %v1_cf2c, i32* @sb, align 4
  %v5_cf30 = icmp slt i32 %v0_cf24, %v2_cf20
  %v2_cf90 = call i32 @function_125b0(i32* null)
  br i1 %v5_cf30, label %dec_label_pc_cf8c, label %dec_label_pc_cf34

dec_label_pc_cf34:                                ; preds = %dec_label_pc_cf18
  %v0_cf3c = load i32, i32* @r4, align 4
  %v2_cf3c = sub i32 %v2_cf90, %v0_cf3c
  %v7_cf44 = icmp slt i32 %v2_cf3c, 601
  br i1 %v7_cf44, label %dec_label_pc_cf4c, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_cf34
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_cef8.backedge

dec_label_pc_cf4c:                                ; preds = %dec_label_pc_cf34
  %v0_cf4c = load i32, i32* @r8, align 4
  %v7_cf50 = icmp slt i32 %v0_cf4c, 401
  br i1 %v7_cf50, label %dec_label_pc_cef8.backedge, label %dec_label_pc_cf54

dec_label_pc_cf54:                                ; preds = %dec_label_pc_cf4c
  %v0_cf54 = load i32, i32* @sb, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_cf5c = call i32 @function_12068(i32 %v0_cf54, i32 10)
  %v2_cf60 = icmp eq i32 %v2_cf5c, 0
  br i1 %v2_cf60, label %dec_label_pc_cf68, label %dec_label_pc_cef8.backedge

dec_label_pc_cf68:                                ; preds = %dec_label_pc_cf54
  %v1_cf6c = call i32 @function_13718(i32 1)
  %v0_cf70 = load i32, i32* @sl, align 4
  %v1_cf74 = inttoptr i32 %v0_cf70 to i32*
  %v2_cf74 = call i32 @function_127e4(i32* %v1_cf74)
  %v2_cf78 = icmp eq i32 %v2_cf74, 0
  br i1 %v2_cf78, label %dec_label_pc_cf80, label %dec_label_pc_cf08

dec_label_pc_cf80:                                ; preds = %dec_label_pc_cef8.backedge, %dec_label_pc_cf68, %dec_label_pc_cef0
  %v0_cf80 = load i32, i32* @sl, align 4
  %v1_cf84 = inttoptr i32 %v0_cf80 to i32*
  %v2_cf84 = call i32 @function_12634(i32* %v1_cf84)
  br label %dec_label_pc_ced0

dec_label_pc_cf8c:                                ; preds = %dec_label_pc_cf18
  store i32 %v2_cf90, i32* %stack_var_-8484, align 4
  %v1_cf9c = call i32 @function_110fc(i32 6)
  %v1_cfa4 = call i32 @function_110fc(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cfb0 = call i32 @function_11018(i32 6, i32* null)
  store i32 %v3_cfb0, i32* %r1.global-to-local, align 4
  store i32 %v2_cfbc, i32* @r0, align 4
  %v3_cfc0 = call i32 @function_11a04(i8* %v2_cfc0, i32 %v3_cfb0)
  %v2_cfcc = add i32 %v3_cfc0, %v2_cfbc
  store i32 %v2_cfcc, i32* %r5.global-to-local, align 4
  store i32 %v2_cfcc, i32* @r0, align 4
  %v0_cfd4 = load i32, i32* @r6, align 4
  store i32 %v0_cfd4, i32* %r1.global-to-local, align 4
  %v2_cfd8 = inttoptr i32 %v2_cfcc to i8*
  %v3_cfd8 = call i32 @function_11a04(i8* %v2_cfd8, i32 %v0_cfd4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cfe8 = call i32 @function_11018(i32 7, i32* null)
  store i32 %v3_cfe8, i32* %r1.global-to-local, align 4
  %v0_cff0 = load i32, i32* %r5.global-to-local, align 4
  %v2_cff0 = add i32 %v3_cfd8, %v0_cff0
  store i32 %v2_cff0, i32* @r0, align 4
  %v2_cff4 = inttoptr i32 %v2_cff0 to i8*
  %v3_cff4 = call i32 @function_11a04(i8* %v2_cff4, i32 %v3_cfe8)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d000 = call i32 @function_11018(i32 6, i32* null)
  store i32 %v3_d000, i32* %r1.global-to-local, align 4
  store i32 %v2_d00c, i32* @r0, align 4
  %v3_d010 = call i32 @function_11a04(i8* %v2_d010, i32 %v3_d000)
  store i32 %v2_d00c, i32* %r2.global-to-local, align 4
  %v2_d01c = add i32 %v3_d010, %v2_d00c
  store i32 %v2_d01c, i32* @r5, align 4
  %v0_d020 = load i32, i32* @r6, align 4
  store i32 %v0_d020, i32* %r1.global-to-local, align 4
  store i32 %v2_d01c, i32* @r0, align 4
  %v2_d028 = inttoptr i32 %v2_d01c to i8*
  %v3_d028 = call i32 @function_11a04(i8* %v2_d028, i32 %v0_d020)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d028, i32* @r4, align 4
  %v3_d038 = call i32 @function_11018(i32 11, i32* null)
  store i32 %v3_d038, i32* %r1.global-to-local, align 4
  %v0_d040 = load i32, i32* @r5, align 4
  %v1_d040 = load i32, i32* @r4, align 4
  %v2_d040 = add i32 %v1_d040, %v0_d040
  store i32 %v2_d040, i32* @r0, align 4
  %v2_d044 = inttoptr i32 %v2_d040 to i8*
  %v3_d044 = call i32 @function_11a04(i8* %v2_d044, i32 %v3_d038)
  %v1_d04c = call i32 @function_11044(i32 6)
  %v1_d054 = call i32 @function_11044(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  store i32 %v2_cec8, i32* %r1.global-to-local, align 4
  %v4_d06c = call i32 @function_124d4(i8* %v2_cfc0, i32 %v2_cec8, i32 4095)
  %v7_d074 = icmp eq i32 %v4_d06c, -1
  store i32 %v4_d06c, i32* @r5, align 4
  store i32 -4304, i32* @r2, align 4
  br i1 %v7_d074, label %dec_label_pc_d138, label %dec_label_pc_d084

dec_label_pc_d084:                                ; preds = %dec_label_pc_cf8c
  %v2_d088 = add i32 %v4_d06c, %v28_cd18
  store i32 %v2_d088, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d090 = add i32 %v2_d088, -4304
  %v5_d090 = inttoptr i32 %v4_d090 to i8*
  store i8 0, i8* %v5_d090, align 1
  %v1_d098 = call i32 @function_110fc(i32 12)
  %v0_d09c = load i32, i32* @r4, align 4
  store i32 %v0_d09c, i32* %r1.global-to-local, align 4
  %v2_d0a4 = inttoptr i32 %v0_d09c to i32*
  %v3_d0a4 = call i32 @function_11018(i32 12, i32* %v2_d0a4)
  %v0_d0a8 = load i32, i32* @r5, align 4
  %v1_d0a8 = add i32 %v0_d0a8, -1
  store i32 %v1_d0a8, i32* @r1, align 4
  store i32 %v3_d0a4, i32* %r2.global-to-local, align 4
  %v4_d0b4 = call i32 @function_11d30(i8* %v3_d0b4, i32 %v1_d0a8, i32 %v3_d0a4)
  %v7_d0b8 = icmp eq i32 %v4_d0b4, -1
  br i1 %v7_d0b8, label %dec_label_pc_d0d4, label %dec_label_pc_d0c0

dec_label_pc_d0c0:                                ; preds = %dec_label_pc_d084
  %v2_d0c4 = call i32 @function_125dc(i8* %v3_d0b4)
  %v0_d0c8 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d0d0 = call i32 @function_123e0(i32 %v0_d0c8, i32 9)
  br label %dec_label_pc_d0d4

dec_label_pc_d0d4:                                ; preds = %dec_label_pc_d084, %dec_label_pc_d0c0
  %v1_d0d8 = call i32 @function_11044(i32 12)
  %v0_d0dc = call i32 @function_12338()
  %v0_d0e0 = load i32, i32* @r8, align 4
  %v9_d0e0 = icmp eq i32 %v0_d0e0, %v0_d0dc
  br i1 %v9_d0e0, label %dec_label_pc_d10c, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0d4
  %v0_d0e8 = call i32 @function_12364()
  %v0_d0ec = load i32, i32* @r8, align 4
  %v9_d0ec = icmp eq i32 %v0_d0ec, %v0_d0e8
  br i1 %v9_d0ec, label %dec_label_pc_d10c, label %dec_label_pc_d0f4

dec_label_pc_d0f4:                                ; preds = %dec_label_pc_d0e8
  store i32 ptrtoint (i32* @global_var_1d904.65 to i32), i32* %r2.global-to-local, align 4
  %v2_d0fc = load i32, i32* @global_var_1d904.65, align 4
  store i32 %v2_d0fc, i32* %r1.global-to-local, align 4
  %v4_d100 = call i32 @function_11dbc(i8* %v3_d0b4, i32 %v2_d0fc, i32 ptrtoint (i32* @global_var_1d904.65 to i32))
  %v2_d104 = icmp eq i32 %v4_d100, 0
  br i1 %v2_d104, label %dec_label_pc_d118, label %dec_label_pc_d0f4.dec_label_pc_d10c_crit_edge

dec_label_pc_d0f4.dec_label_pc_d10c_crit_edge:    ; preds = %dec_label_pc_d0f4
  %v0_d110.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d10c

dec_label_pc_d10c:                                ; preds = %dec_label_pc_d0f4.dec_label_pc_d10c_crit_edge, %dec_label_pc_d0e8, %dec_label_pc_d0d4
  %v0_d110 = phi i32 [ %v0_d110.pre, %dec_label_pc_d0f4.dec_label_pc_d10c_crit_edge ], [ %v0_d0e8, %dec_label_pc_d0e8 ], [ %v0_d0dc, %dec_label_pc_d0d4 ]
  %v2_d10c = load i32, i32* %stack_var_-8484, align 4
  store i32 %v2_d10c, i32* @r4, align 4
  store i32 %v0_d110, i32* @r5, align 4
  br label %dec_label_pc_cef8.backedge

dec_label_pc_cef8.backedge:                       ; preds = %dec_label_pc_cf54, %dec_label_pc_cf4c, %dec_label_pc_cf08, %dec_label_pc_d10c, %dec_label_pc_d650, %.thread22
  %v0_cef8 = load i32, i32* @sl, align 4
  %v1_cefc = inttoptr i32 %v0_cef8 to i32*
  %v2_cefc = call i32 @function_127e4(i32* %v1_cefc)
  %v2_cf00 = icmp eq i32 %v2_cefc, 0
  br i1 %v2_cf00, label %dec_label_pc_cf80, label %dec_label_pc_cf08.preheader

dec_label_pc_d118:                                ; preds = %dec_label_pc_d0f4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d120 = call i32 @function_1240c(i8* %v3_d0b4, i32 0)
  %v7_d124 = icmp eq i32 %v3_d120, -1
  store i32 %v3_d120, i32* @r4, align 4
  br i1 %v7_d124, label %dec_label_pc_d77c, label %dec_label_pc_d130

dec_label_pc_d130:                                ; preds = %dec_label_pc_d118, %dec_label_pc_d77c
  %v0_d130 = phi i32 [ %v3_d120, %dec_label_pc_d118 ], [ %v0_d130.pre, %dec_label_pc_d77c ]
  %v1_d134 = call i32 @function_122e0(i32 %v0_d130)
  br label %dec_label_pc_d138

dec_label_pc_d138:                                ; preds = %dec_label_pc_cf8c, %dec_label_pc_d130
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d144 = call i32 @function_1240c(i8* %v2_cfc0, i32 0)
  %v7_d148 = icmp eq i32 %v3_d144, -1
  store i32 %v3_d144, i32* @r5, align 4
  br i1 %v7_d148, label %dec_label_pc_d650, label %dec_label_pc_d154

dec_label_pc_d154:                                ; preds = %dec_label_pc_d138
  %v1_d158 = call i32 @function_110fc(i32 13)
  %v1_d160 = call i32 @function_110fc(i32 14)
  %v1_d168 = call i32 @function_110fc(i32 15)
  %v1_d170 = call i32 @function_110fc(i32 16)
  %v1_d178 = call i32 @function_110fc(i32 17)
  %v1_d180 = call i32 @function_110fc(i32 18)
  %v1_d188 = call i32 @function_110fc(i32 19)
  %v1_d190 = call i32 @function_110fc(i32 20)
  %v1_d198 = call i32 @function_110fc(i32 21)
  %v1_d1a0 = call i32 @function_110fc(i32 22)
  %v1_d1a8 = call i32 @function_110fc(i32 23)
  %v1_d1b0 = call i32 @function_110fc(i32 42)
  store i32 %v2_d1b8, i32* %r1.global-to-local, align 4
  %v3_d1c0 = call i32 @function_11018(i32 13, i32* nonnull %stack_var_-60)
  store i32 %v2_d1c8, i32* %r1.global-to-local, align 4
  store i32 %v3_d1c0, i32* @r6, align 4
  %v3_d1d4 = call i32 @function_11018(i32 14, i32* nonnull %stack_var_-64)
  store i32 %v2_d1e0, i32* %r1.global-to-local, align 4
  %v3_d1e8 = call i32 @function_11018(i32 15, i32* nonnull %stack_var_-68)
  store i32 %v2_d1f4, i32* %r1.global-to-local, align 4
  %v3_d1fc = call i32 @function_11018(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_d208, i32* %r1.global-to-local, align 4
  %v3_d210 = call i32 @function_11018(i32 17, i32* nonnull %stack_var_-76)
  store i32 %v2_d21c, i32* %r1.global-to-local, align 4
  %v3_d224 = call i32 @function_11018(i32 18, i32* nonnull %stack_var_-80)
  store i32 %v2_d230, i32* %r1.global-to-local, align 4
  %v3_d238 = call i32 @function_11018(i32 19, i32* nonnull %stack_var_-84)
  store i32 %v2_d244, i32* %r1.global-to-local, align 4
  %v3_d24c = call i32 @function_11018(i32 20, i32* nonnull %stack_var_-72)
  store i32 %v2_d258, i32* %r1.global-to-local, align 4
  %v3_d260 = call i32 @function_11018(i32 21, i32* nonnull %stack_var_-40)
  store i32 %v2_d26c, i32* %r1.global-to-local, align 4
  %v3_d274 = call i32 @function_11018(i32 22, i32* nonnull %stack_var_-44)
  store i32 %v2_d280, i32* %r1.global-to-local, align 4
  %v3_d288 = call i32 @function_11018(i32 23, i32* nonnull %stack_var_-48)
  store i32 %v2_d294, i32* %r1.global-to-local, align 4
  %v3_d29c = call i32 @function_11018(i32 42, i32* nonnull %stack_var_-52)
  br label %dec_label_pc_d2a4

dec_label_pc_d2a4:                                ; preds = %dec_label_pc_d6f8.backedge, %.thread126, %dec_label_pc_d6e0, %dec_label_pc_d154
  %v0_d2a4 = load i32, i32* @r5, align 4
  store i32 %v2_ce08, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_d2b0 = call i32 @function_124a8(i32 %v0_d2a4, i32* nonnull %stack_var_-8436, i32 4096)
  %tmp369 = icmp slt i32 %v4_d2b0, 1
  br i1 %tmp369, label %dec_label_pc_d5e0, label %dec_label_pc_d2bc

dec_label_pc_d2bc:                                ; preds = %dec_label_pc_d2a4
  store i32 %v2_cd60, i32* %r3.global-to-local, align 4
  %v3_d2c0 = load i32, i32* %stack_var_-60, align 4
  %v5_d2c8 = icmp slt i32 %v4_d2b0, %v3_d2c0
  br i1 %v5_d2c8, label %dec_label_pc_d2d8, label %dec_label_pc_d4d4.lr.ph

dec_label_pc_d4d4.lr.ph:                          ; preds = %dec_label_pc_d2bc
  %v1_d4cc147 = add i32 %v4_d2b0, -1
  store i32 %v1_d4cc147, i32* %r1.global-to-local, align 4
  %v0_d4d4.pre = load i32, i32* @r6, align 4
  %v1_d4d8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d4d4

dec_label_pc_d2d8:                                ; preds = %dec_label_pc_d4cc.backedge, %dec_label_pc_d2bc
  %v3_d2dc = load i32, i32* %stack_var_-64, align 4
  %v5_d2e4 = icmp slt i32 %v4_d2b0, %v3_d2dc
  br i1 %v5_d2e4, label %dec_label_pc_d2f4, label %.thread39

.thread39:                                        ; preds = %dec_label_pc_d2d8
  %v1_d500156 = add i32 %v4_d2b0, -1
  store i32 %v1_d500156, i32* %r1.global-to-local, align 4
  %v2_d500157 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d500157, label %dec_label_pc_d2f4, label %dec_label_pc_d508.lr.ph

dec_label_pc_d508.lr.ph:                          ; preds = %.thread39
  %v1_d510.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d508

dec_label_pc_d2f4:                                ; preds = %dec_label_pc_d500.backedge, %.thread39, %dec_label_pc_d2d8
  %v3_d2f8 = load i32, i32* %stack_var_-68, align 4
  %v5_d300 = icmp slt i32 %v4_d2b0, %v3_d2f8
  br i1 %v5_d300, label %dec_label_pc_d310, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_d2f4
  %v1_d538165 = add i32 %v4_d2b0, -1
  store i32 %v1_d538165, i32* %r1.global-to-local, align 4
  %v2_d538166 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d538166, label %dec_label_pc_d310, label %dec_label_pc_d540.lr.ph

dec_label_pc_d540.lr.ph:                          ; preds = %.thread48
  %v1_d548.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d540

dec_label_pc_d310:                                ; preds = %dec_label_pc_d538.backedge, %.thread48, %dec_label_pc_d2f4
  %v3_d314 = load i32, i32* %stack_var_-56, align 4
  %v5_d31c = icmp slt i32 %v4_d2b0, %v3_d314
  br i1 %v5_d31c, label %dec_label_pc_d32c, label %.thread57

.thread57:                                        ; preds = %dec_label_pc_d310
  %v1_d570174 = add i32 %v4_d2b0, -1
  store i32 %v1_d570174, i32* %r1.global-to-local, align 4
  %v2_d570175 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d570175, label %dec_label_pc_d32c, label %dec_label_pc_d578.lr.ph

dec_label_pc_d578.lr.ph:                          ; preds = %.thread57
  %v1_d580.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d578

dec_label_pc_d32c:                                ; preds = %dec_label_pc_d570.backedge, %.thread57, %dec_label_pc_d310
  %v3_d330 = load i32, i32* %stack_var_-76, align 4
  %v5_d338 = icmp slt i32 %v4_d2b0, %v3_d330
  br i1 %v5_d338, label %dec_label_pc_d348, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_d32c
  %v1_d5a8183 = add i32 %v4_d2b0, -1
  store i32 %v1_d5a8183, i32* %r1.global-to-local, align 4
  %v2_d5a8184 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d5a8184, label %dec_label_pc_d348, label %dec_label_pc_d5b0.lr.ph

dec_label_pc_d5b0.lr.ph:                          ; preds = %.thread66
  %v1_d5b8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d5b0

dec_label_pc_d348:                                ; preds = %dec_label_pc_d5a8.backedge, %.thread66, %dec_label_pc_d32c
  %v3_d34c = load i32, i32* %stack_var_-80, align 4
  %v5_d354 = icmp slt i32 %v4_d2b0, %v3_d34c
  br i1 %v5_d354, label %dec_label_pc_d394, label %dec_label_pc_d364

dec_label_pc_d364:                                ; preds = %dec_label_pc_d348
  %v1_d364 = add i32 %v4_d2b0, -1
  store i32 %v1_d364, i32* %r1.global-to-local, align 4
  %v2_d364 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d364, label %dec_label_pc_d394, label %dec_label_pc_d36c.preheader

dec_label_pc_d36c.preheader:                      ; preds = %dec_label_pc_d364
  %v1_d374.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d36c

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d388, %dec_label_pc_d36c.preheader
  %v0_d388 = phi i32 [ %v1_d364, %dec_label_pc_d36c.preheader ], [ %v1_d388, %dec_label_pc_d388 ]
  %v0_d38c = phi i32 [ 0, %dec_label_pc_d36c.preheader ], [ %v1_d38c, %dec_label_pc_d388 ]
  %v0_d37c = phi i32 [ 0, %dec_label_pc_d36c.preheader ], [ %v1_d37c., %dec_label_pc_d388 ]
  store i32 %v3_d224, i32* %r3.global-to-local, align 4
  %v2_d370 = add i32 %v0_d37c, %v3_d224
  %v3_d370 = inttoptr i32 %v2_d370 to i8*
  %v4_d370 = load i8, i8* %v3_d370, align 1
  %v6_d370 = zext i8 %v4_d370 to i32
  store i32 %v6_d370, i32* %r2.global-to-local, align 4
  %v2_d374 = add i32 %v0_d38c, %v1_d374.pre
  %v3_d374 = inttoptr i32 %v2_d374 to i8*
  %v4_d374 = load i8, i8* %v3_d374, align 1
  %v6_d374 = zext i8 %v4_d374 to i32
  store i32 %v6_d374, i32* %r3.global-to-local, align 4
  %v9_d378 = icmp eq i8 %v4_d374, %v4_d370
  %v1_d37c = add i32 %v0_d37c, 1
  %v1_d37c. = select i1 %v9_d378, i32 %v1_d37c, i32 0
  br i1 %v9_d378, label %dec_label_pc_d5d4, label %dec_label_pc_d388

dec_label_pc_d388:                                ; preds = %dec_label_pc_d5d4, %dec_label_pc_d36c
  %v1_d388 = add i32 %v0_d388, -1
  store i32 %v1_d388, i32* %r1.global-to-local, align 4
  %v2_d388 = icmp eq i32 %v0_d388, 0
  %v1_d38c = add i32 %v0_d38c, 1
  br i1 %v2_d388, label %dec_label_pc_d394, label %dec_label_pc_d36c

dec_label_pc_d394:                                ; preds = %dec_label_pc_d388, %dec_label_pc_d364, %dec_label_pc_d348
  %v3_d398 = load i32, i32* %stack_var_-84, align 4
  %v5_d3a0 = icmp slt i32 %v4_d2b0, %v3_d398
  br i1 %v5_d3a0, label %dec_label_pc_d3e0, label %dec_label_pc_d3b0

dec_label_pc_d3b0:                                ; preds = %dec_label_pc_d394
  %v1_d3b0 = add i32 %v4_d2b0, -1
  store i32 %v1_d3b0, i32* %r1.global-to-local, align 4
  %v2_d3b0 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d3b0, label %dec_label_pc_d3e0, label %dec_label_pc_d3b8.preheader

dec_label_pc_d3b8.preheader:                      ; preds = %dec_label_pc_d3b0
  %v1_d3c0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d3b8

dec_label_pc_d3b8:                                ; preds = %dec_label_pc_d3d8, %dec_label_pc_d3b8.preheader
  %v0_d3d8 = phi i32 [ %v1_d3b0, %dec_label_pc_d3b8.preheader ], [ %v1_d3d8, %dec_label_pc_d3d8 ]
  %storemerge2.in = phi i32 [ 0, %dec_label_pc_d3b8.preheader ], [ %storemerge2, %dec_label_pc_d3d8 ]
  %v0_d3c8 = phi i32 [ 0, %dec_label_pc_d3b8.preheader ], [ %v1_d3c8., %dec_label_pc_d3d8 ]
  store i32 %v3_d238, i32* %r3.global-to-local, align 4
  %v2_d3bc = add i32 %v0_d3c8, %v3_d238
  %v3_d3bc = inttoptr i32 %v2_d3bc to i8*
  %v4_d3bc = load i8, i8* %v3_d3bc, align 1
  %v6_d3bc = zext i8 %v4_d3bc to i32
  store i32 %v6_d3bc, i32* %r2.global-to-local, align 4
  %v2_d3c0 = add i32 %storemerge2.in, %v1_d3c0.pre
  %v3_d3c0 = inttoptr i32 %v2_d3c0 to i8*
  %v4_d3c0 = load i8, i8* %v3_d3c0, align 1
  %v6_d3c0 = zext i8 %v4_d3c0 to i32
  store i32 %v6_d3c0, i32* %r3.global-to-local, align 4
  %v9_d3c4 = icmp eq i8 %v4_d3c0, %v4_d3bc
  %v1_d3c8 = add i32 %v0_d3c8, 1
  %v1_d3c8. = select i1 %v9_d3c4, i32 %v1_d3c8, i32 0
  br i1 %v9_d3c4, label %dec_label_pc_d684, label %dec_label_pc_d3d8

dec_label_pc_d3d8:                                ; preds = %dec_label_pc_d684, %dec_label_pc_d3b8
  %storemerge2 = add i32 %storemerge2.in, 1
  %v1_d3d8 = add i32 %v0_d3d8, -1
  store i32 %v1_d3d8, i32* %r1.global-to-local, align 4
  %v2_d3d8 = icmp eq i32 %v0_d3d8, 0
  br i1 %v2_d3d8, label %dec_label_pc_d3e0, label %dec_label_pc_d3b8

dec_label_pc_d3e0:                                ; preds = %dec_label_pc_d3d8, %dec_label_pc_d3b0, %dec_label_pc_d394
  %v3_d3e4 = load i32, i32* %stack_var_-72, align 4
  %v5_d3ec = icmp slt i32 %v4_d2b0, %v3_d3e4
  br i1 %v5_d3ec, label %dec_label_pc_d42c, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3e0
  %v1_d3fc = add i32 %v4_d2b0, -1
  store i32 %v1_d3fc, i32* %r1.global-to-local, align 4
  %v2_d3fc = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d3fc, label %dec_label_pc_d42c, label %dec_label_pc_d404.preheader

dec_label_pc_d404.preheader:                      ; preds = %dec_label_pc_d3fc
  %v1_d40c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d404

dec_label_pc_d404:                                ; preds = %dec_label_pc_d424, %dec_label_pc_d404.preheader
  %v0_d424 = phi i32 [ %v1_d3fc, %dec_label_pc_d404.preheader ], [ %v1_d424, %dec_label_pc_d424 ]
  %storemerge4.in = phi i32 [ 0, %dec_label_pc_d404.preheader ], [ %storemerge4, %dec_label_pc_d424 ]
  %v0_d414 = phi i32 [ 0, %dec_label_pc_d404.preheader ], [ %v1_d414., %dec_label_pc_d424 ]
  store i32 %v3_d24c, i32* %r3.global-to-local, align 4
  %v2_d408 = add i32 %v0_d414, %v3_d24c
  %v3_d408 = inttoptr i32 %v2_d408 to i8*
  %v4_d408 = load i8, i8* %v3_d408, align 1
  %v6_d408 = zext i8 %v4_d408 to i32
  store i32 %v6_d408, i32* %r2.global-to-local, align 4
  %v2_d40c = add i32 %storemerge4.in, %v1_d40c.pre
  %v3_d40c = inttoptr i32 %v2_d40c to i8*
  %v4_d40c = load i8, i8* %v3_d40c, align 1
  %v6_d40c = zext i8 %v4_d40c to i32
  store i32 %v6_d40c, i32* %r3.global-to-local, align 4
  %v9_d410 = icmp eq i8 %v4_d40c, %v4_d408
  %v1_d414 = add i32 %v0_d414, 1
  %v1_d414. = select i1 %v9_d410, i32 %v1_d414, i32 0
  br i1 %v9_d410, label %dec_label_pc_d694, label %dec_label_pc_d424

dec_label_pc_d424:                                ; preds = %dec_label_pc_d694, %dec_label_pc_d404
  %storemerge4 = add i32 %storemerge4.in, 1
  %v1_d424 = add i32 %v0_d424, -1
  store i32 %v1_d424, i32* %r1.global-to-local, align 4
  %v2_d424 = icmp eq i32 %v0_d424, 0
  br i1 %v2_d424, label %dec_label_pc_d42c, label %dec_label_pc_d404

dec_label_pc_d42c:                                ; preds = %dec_label_pc_d424, %dec_label_pc_d3fc, %dec_label_pc_d3e0
  %v3_d430 = load i32, i32* %stack_var_-40, align 4
  %v5_d438 = icmp slt i32 %v4_d2b0, %v3_d430
  br i1 %v5_d438, label %dec_label_pc_d478, label %dec_label_pc_d448

dec_label_pc_d448:                                ; preds = %dec_label_pc_d42c
  %v1_d448 = add i32 %v4_d2b0, -1
  store i32 %v1_d448, i32* %r1.global-to-local, align 4
  %v2_d448 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d448, label %dec_label_pc_d478, label %dec_label_pc_d450.preheader

dec_label_pc_d450.preheader:                      ; preds = %dec_label_pc_d448
  %v1_d458.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d450

dec_label_pc_d450:                                ; preds = %dec_label_pc_d470, %dec_label_pc_d450.preheader
  %v0_d470 = phi i32 [ %v1_d448, %dec_label_pc_d450.preheader ], [ %v1_d470, %dec_label_pc_d470 ]
  %storemerge6.in = phi i32 [ 0, %dec_label_pc_d450.preheader ], [ %storemerge6, %dec_label_pc_d470 ]
  %v0_d460 = phi i32 [ 0, %dec_label_pc_d450.preheader ], [ %v1_d460., %dec_label_pc_d470 ]
  store i32 %v3_d260, i32* %r3.global-to-local, align 4
  %v2_d454 = add i32 %v0_d460, %v3_d260
  %v3_d454 = inttoptr i32 %v2_d454 to i8*
  %v4_d454 = load i8, i8* %v3_d454, align 1
  %v6_d454 = zext i8 %v4_d454 to i32
  store i32 %v6_d454, i32* %r2.global-to-local, align 4
  %v2_d458 = add i32 %storemerge6.in, %v1_d458.pre
  %v3_d458 = inttoptr i32 %v2_d458 to i8*
  %v4_d458 = load i8, i8* %v3_d458, align 1
  %v6_d458 = zext i8 %v4_d458 to i32
  store i32 %v6_d458, i32* %r3.global-to-local, align 4
  %v9_d45c = icmp eq i8 %v4_d458, %v4_d454
  %v1_d460 = add i32 %v0_d460, 1
  %v1_d460. = select i1 %v9_d45c, i32 %v1_d460, i32 0
  br i1 %v9_d45c, label %dec_label_pc_d6a4, label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d6a4, %dec_label_pc_d450
  %storemerge6 = add i32 %storemerge6.in, 1
  %v1_d470 = add i32 %v0_d470, -1
  store i32 %v1_d470, i32* %r1.global-to-local, align 4
  %v2_d470 = icmp eq i32 %v0_d470, 0
  br i1 %v2_d470, label %dec_label_pc_d478, label %dec_label_pc_d450

dec_label_pc_d478:                                ; preds = %dec_label_pc_d470, %dec_label_pc_d448, %dec_label_pc_d42c
  %v3_d47c = load i32, i32* %stack_var_-44, align 4
  %v5_d484 = icmp slt i32 %v4_d2b0, %v3_d47c
  br i1 %v5_d484, label %dec_label_pc_d6c4, label %.thread111

.thread111:                                       ; preds = %dec_label_pc_d478
  %v1_d494192 = add i32 %v4_d2b0, -1
  store i32 %v1_d494192, i32* %r1.global-to-local, align 4
  %v2_d494193 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d494193, label %dec_label_pc_d6c4, label %dec_label_pc_d49c.lr.ph

dec_label_pc_d49c.lr.ph:                          ; preds = %.thread111
  %v1_d4a4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d494.backedge, %dec_label_pc_d49c.lr.ph
  %v0_d494 = phi i32 [ %v1_d494192, %dec_label_pc_d49c.lr.ph ], [ %v1_d494, %dec_label_pc_d494.backedge ]
  %storemerge224.in = phi i32 [ 0, %dec_label_pc_d49c.lr.ph ], [ %storemerge224, %dec_label_pc_d494.backedge ]
  %v0_d4ac = phi i32 [ 0, %dec_label_pc_d49c.lr.ph ], [ %v1_d4ac., %dec_label_pc_d494.backedge ]
  store i32 %v3_d274, i32* %r3.global-to-local, align 4
  %v2_d4a0 = add i32 %v0_d4ac, %v3_d274
  %v3_d4a0 = inttoptr i32 %v2_d4a0 to i8*
  %v4_d4a0 = load i8, i8* %v3_d4a0, align 1
  %v6_d4a0 = zext i8 %v4_d4a0 to i32
  store i32 %v6_d4a0, i32* %r2.global-to-local, align 4
  %v2_d4a4 = add i32 %storemerge224.in, %v1_d4a4.pre
  %v3_d4a4 = inttoptr i32 %v2_d4a4 to i8*
  %v4_d4a4 = load i8, i8* %v3_d4a4, align 1
  %v6_d4a4 = zext i8 %v4_d4a4 to i32
  store i32 %v6_d4a4, i32* %r3.global-to-local, align 4
  %v9_d4a8 = icmp eq i8 %v4_d4a4, %v4_d4a0
  %v1_d4ac = add i32 %v0_d4ac, 1
  %v1_d4ac. = select i1 %v9_d4a8, i32 %v1_d4ac, i32 0
  br i1 %v9_d4a8, label %dec_label_pc_d6b4, label %dec_label_pc_d494.backedge

dec_label_pc_d494.backedge:                       ; preds = %dec_label_pc_d6b4, %dec_label_pc_d49c
  %storemerge224 = add i32 %storemerge224.in, 1
  %v1_d494 = add i32 %v0_d494, -1
  store i32 %v1_d494, i32* %r1.global-to-local, align 4
  %v2_d494 = icmp eq i32 %v0_d494, 0
  br i1 %v2_d494, label %dec_label_pc_d6c4, label %dec_label_pc_d49c

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d4d4
  %v9_d4c0 = icmp eq i32 %v3_d2c0, %v1_d4e0.
  br i1 %v9_d4c0, label %dec_label_pc_d5e0, label %dec_label_pc_d4cc.backedge

dec_label_pc_d4cc.backedge:                       ; preds = %dec_label_pc_d4d4, %dec_label_pc_d4c0
  %storemerge229 = add i32 %storemerge229.in, 1
  %v1_d4cc = add i32 %v0_d4cc, -1
  store i32 %v1_d4cc, i32* %r1.global-to-local, align 4
  %v2_d4cc = icmp eq i32 %v0_d4cc, 0
  br i1 %v2_d4cc, label %dec_label_pc_d2d8, label %dec_label_pc_d4d4

dec_label_pc_d4d4:                                ; preds = %dec_label_pc_d4cc.backedge, %dec_label_pc_d4d4.lr.ph
  %v0_d4cc = phi i32 [ %v1_d4cc147, %dec_label_pc_d4d4.lr.ph ], [ %v1_d4cc, %dec_label_pc_d4cc.backedge ]
  %storemerge229.in = phi i32 [ 0, %dec_label_pc_d4d4.lr.ph ], [ %storemerge229, %dec_label_pc_d4cc.backedge ]
  %v0_d4e0 = phi i32 [ 0, %dec_label_pc_d4d4.lr.ph ], [ %v1_d4e0., %dec_label_pc_d4cc.backedge ]
  %v2_d4d4 = add i32 %v0_d4e0, %v0_d4d4.pre
  %v3_d4d4 = inttoptr i32 %v2_d4d4 to i8*
  %v4_d4d4 = load i8, i8* %v3_d4d4, align 1
  %v6_d4d4 = zext i8 %v4_d4d4 to i32
  store i32 %v6_d4d4, i32* %r2.global-to-local, align 4
  %v2_d4d8 = add i32 %storemerge229.in, %v1_d4d8.pre
  %v3_d4d8 = inttoptr i32 %v2_d4d8 to i8*
  %v4_d4d8 = load i8, i8* %v3_d4d8, align 1
  %v6_d4d8 = zext i8 %v4_d4d8 to i32
  store i32 %v6_d4d8, i32* %r3.global-to-local, align 4
  %v9_d4dc = icmp eq i8 %v4_d4d8, %v4_d4d4
  %v1_d4e0 = add i32 %v0_d4e0, 1
  %v1_d4e0. = select i1 %v9_d4dc, i32 %v1_d4e0, i32 0
  br i1 %v9_d4dc, label %dec_label_pc_d4c0, label %dec_label_pc_d4cc.backedge

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d508
  %v9_d4f4 = icmp eq i32 %v3_d2dc, %v1_d518.
  br i1 %v9_d4f4, label %dec_label_pc_d5e0, label %dec_label_pc_d500.backedge

dec_label_pc_d500.backedge:                       ; preds = %dec_label_pc_d508, %dec_label_pc_d4f4
  %storemerge228 = add i32 %storemerge228.in, 1
  %v1_d500 = add i32 %v0_d500, -1
  store i32 %v1_d500, i32* %r1.global-to-local, align 4
  %v2_d500 = icmp eq i32 %v0_d500, 0
  br i1 %v2_d500, label %dec_label_pc_d2f4, label %dec_label_pc_d508

dec_label_pc_d508:                                ; preds = %dec_label_pc_d500.backedge, %dec_label_pc_d508.lr.ph
  %v0_d500 = phi i32 [ %v1_d500156, %dec_label_pc_d508.lr.ph ], [ %v1_d500, %dec_label_pc_d500.backedge ]
  %storemerge228.in = phi i32 [ 0, %dec_label_pc_d508.lr.ph ], [ %storemerge228, %dec_label_pc_d500.backedge ]
  %v0_d518 = phi i32 [ 0, %dec_label_pc_d508.lr.ph ], [ %v1_d518., %dec_label_pc_d500.backedge ]
  store i32 %v3_d1d4, i32* %r3.global-to-local, align 4
  %v2_d50c = add i32 %v0_d518, %v3_d1d4
  %v3_d50c = inttoptr i32 %v2_d50c to i8*
  %v4_d50c = load i8, i8* %v3_d50c, align 1
  %v6_d50c = zext i8 %v4_d50c to i32
  store i32 %v6_d50c, i32* %r2.global-to-local, align 4
  %v2_d510 = add i32 %storemerge228.in, %v1_d510.pre
  %v3_d510 = inttoptr i32 %v2_d510 to i8*
  %v4_d510 = load i8, i8* %v3_d510, align 1
  %v6_d510 = zext i8 %v4_d510 to i32
  store i32 %v6_d510, i32* %r3.global-to-local, align 4
  %v9_d514 = icmp eq i8 %v4_d510, %v4_d50c
  %v1_d518 = add i32 %v0_d518, 1
  %v1_d518. = select i1 %v9_d514, i32 %v1_d518, i32 0
  br i1 %v9_d514, label %dec_label_pc_d4f4, label %dec_label_pc_d500.backedge

dec_label_pc_d52c:                                ; preds = %dec_label_pc_d540
  %v9_d52c = icmp eq i32 %v3_d2f8, %v1_d550.
  br i1 %v9_d52c, label %dec_label_pc_d5e0, label %dec_label_pc_d538.backedge

dec_label_pc_d538.backedge:                       ; preds = %dec_label_pc_d540, %dec_label_pc_d52c
  %storemerge227 = add i32 %storemerge227.in, 1
  %v1_d538 = add i32 %v0_d538, -1
  store i32 %v1_d538, i32* %r1.global-to-local, align 4
  %v2_d538 = icmp eq i32 %v0_d538, 0
  br i1 %v2_d538, label %dec_label_pc_d310, label %dec_label_pc_d540

dec_label_pc_d540:                                ; preds = %dec_label_pc_d538.backedge, %dec_label_pc_d540.lr.ph
  %v0_d538 = phi i32 [ %v1_d538165, %dec_label_pc_d540.lr.ph ], [ %v1_d538, %dec_label_pc_d538.backedge ]
  %storemerge227.in = phi i32 [ 0, %dec_label_pc_d540.lr.ph ], [ %storemerge227, %dec_label_pc_d538.backedge ]
  %v0_d550 = phi i32 [ 0, %dec_label_pc_d540.lr.ph ], [ %v1_d550., %dec_label_pc_d538.backedge ]
  store i32 %v3_d1e8, i32* %r3.global-to-local, align 4
  %v2_d544 = add i32 %v0_d550, %v3_d1e8
  %v3_d544 = inttoptr i32 %v2_d544 to i8*
  %v4_d544 = load i8, i8* %v3_d544, align 1
  %v6_d544 = zext i8 %v4_d544 to i32
  store i32 %v6_d544, i32* %r2.global-to-local, align 4
  %v2_d548 = add i32 %storemerge227.in, %v1_d548.pre
  %v3_d548 = inttoptr i32 %v2_d548 to i8*
  %v4_d548 = load i8, i8* %v3_d548, align 1
  %v6_d548 = zext i8 %v4_d548 to i32
  store i32 %v6_d548, i32* %r3.global-to-local, align 4
  %v9_d54c = icmp eq i8 %v4_d548, %v4_d544
  %v1_d550 = add i32 %v0_d550, 1
  %v1_d550. = select i1 %v9_d54c, i32 %v1_d550, i32 0
  br i1 %v9_d54c, label %dec_label_pc_d52c, label %dec_label_pc_d538.backedge

dec_label_pc_d564:                                ; preds = %dec_label_pc_d578
  %v9_d564 = icmp eq i32 %v3_d314, %v1_d588.
  br i1 %v9_d564, label %dec_label_pc_d5e0, label %dec_label_pc_d570.backedge

dec_label_pc_d570.backedge:                       ; preds = %dec_label_pc_d578, %dec_label_pc_d564
  %storemerge226 = add i32 %storemerge226.in, 1
  %v1_d570 = add i32 %v0_d570, -1
  store i32 %v1_d570, i32* %r1.global-to-local, align 4
  %v2_d570 = icmp eq i32 %v0_d570, 0
  br i1 %v2_d570, label %dec_label_pc_d32c, label %dec_label_pc_d578

dec_label_pc_d578:                                ; preds = %dec_label_pc_d570.backedge, %dec_label_pc_d578.lr.ph
  %v0_d570 = phi i32 [ %v1_d570174, %dec_label_pc_d578.lr.ph ], [ %v1_d570, %dec_label_pc_d570.backedge ]
  %storemerge226.in = phi i32 [ 0, %dec_label_pc_d578.lr.ph ], [ %storemerge226, %dec_label_pc_d570.backedge ]
  %v0_d588 = phi i32 [ 0, %dec_label_pc_d578.lr.ph ], [ %v1_d588., %dec_label_pc_d570.backedge ]
  store i32 %v3_d1fc, i32* %r3.global-to-local, align 4
  %v2_d57c = add i32 %v0_d588, %v3_d1fc
  %v3_d57c = inttoptr i32 %v2_d57c to i8*
  %v4_d57c = load i8, i8* %v3_d57c, align 1
  %v6_d57c = zext i8 %v4_d57c to i32
  store i32 %v6_d57c, i32* %r2.global-to-local, align 4
  %v2_d580 = add i32 %storemerge226.in, %v1_d580.pre
  %v3_d580 = inttoptr i32 %v2_d580 to i8*
  %v4_d580 = load i8, i8* %v3_d580, align 1
  %v6_d580 = zext i8 %v4_d580 to i32
  store i32 %v6_d580, i32* %r3.global-to-local, align 4
  %v9_d584 = icmp eq i8 %v4_d580, %v4_d57c
  %v1_d588 = add i32 %v0_d588, 1
  %v1_d588. = select i1 %v9_d584, i32 %v1_d588, i32 0
  br i1 %v9_d584, label %dec_label_pc_d564, label %dec_label_pc_d570.backedge

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d5b0
  %v9_d59c = icmp eq i32 %v3_d330, %v1_d5c0.
  br i1 %v9_d59c, label %dec_label_pc_d5e0, label %dec_label_pc_d5a8.backedge

dec_label_pc_d5a8.backedge:                       ; preds = %dec_label_pc_d5b0, %dec_label_pc_d59c
  %storemerge225 = add i32 %storemerge225.in, 1
  %v1_d5a8 = add i32 %v0_d5a8, -1
  store i32 %v1_d5a8, i32* %r1.global-to-local, align 4
  %v2_d5a8 = icmp eq i32 %v0_d5a8, 0
  br i1 %v2_d5a8, label %dec_label_pc_d348, label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d5a8.backedge, %dec_label_pc_d5b0.lr.ph
  %v0_d5a8 = phi i32 [ %v1_d5a8183, %dec_label_pc_d5b0.lr.ph ], [ %v1_d5a8, %dec_label_pc_d5a8.backedge ]
  %storemerge225.in = phi i32 [ 0, %dec_label_pc_d5b0.lr.ph ], [ %storemerge225, %dec_label_pc_d5a8.backedge ]
  %v0_d5c0 = phi i32 [ 0, %dec_label_pc_d5b0.lr.ph ], [ %v1_d5c0., %dec_label_pc_d5a8.backedge ]
  store i32 %v3_d210, i32* %r3.global-to-local, align 4
  %v2_d5b4 = add i32 %v0_d5c0, %v3_d210
  %v3_d5b4 = inttoptr i32 %v2_d5b4 to i8*
  %v4_d5b4 = load i8, i8* %v3_d5b4, align 1
  %v6_d5b4 = zext i8 %v4_d5b4 to i32
  store i32 %v6_d5b4, i32* %r2.global-to-local, align 4
  %v2_d5b8 = add i32 %storemerge225.in, %v1_d5b8.pre
  %v3_d5b8 = inttoptr i32 %v2_d5b8 to i8*
  %v4_d5b8 = load i8, i8* %v3_d5b8, align 1
  %v6_d5b8 = zext i8 %v4_d5b8 to i32
  store i32 %v6_d5b8, i32* %r3.global-to-local, align 4
  %v9_d5bc = icmp eq i8 %v4_d5b8, %v4_d5b4
  %v1_d5c0 = add i32 %v0_d5c0, 1
  %v1_d5c0. = select i1 %v9_d5bc, i32 %v1_d5c0, i32 0
  br i1 %v9_d5bc, label %dec_label_pc_d59c, label %dec_label_pc_d5a8.backedge

dec_label_pc_d5d4:                                ; preds = %dec_label_pc_d36c
  %v9_d5d4 = icmp eq i32 %v3_d34c, %v1_d37c.
  br i1 %v9_d5d4, label %dec_label_pc_d5e0, label %dec_label_pc_d388

dec_label_pc_d5e0:                                ; preds = %dec_label_pc_d2a4, %dec_label_pc_d4c0, %dec_label_pc_d4f4, %dec_label_pc_d52c, %dec_label_pc_d564, %dec_label_pc_d59c, %dec_label_pc_d5d4, %dec_label_pc_d684, %dec_label_pc_d694, %dec_label_pc_d6a4, %dec_label_pc_d6b4, %dec_label_pc_d724, %dec_label_pc_d75c
  %storemerge8 = phi i32 [ 1, %dec_label_pc_d75c ], [ 1, %dec_label_pc_d724 ], [ 1, %dec_label_pc_d6b4 ], [ 1, %dec_label_pc_d6a4 ], [ 1, %dec_label_pc_d694 ], [ 1, %dec_label_pc_d684 ], [ 1, %dec_label_pc_d5d4 ], [ 1, %dec_label_pc_d59c ], [ 1, %dec_label_pc_d564 ], [ 1, %dec_label_pc_d52c ], [ 1, %dec_label_pc_d4f4 ], [ 1, %dec_label_pc_d4c0 ], [ 0, %dec_label_pc_d2a4 ]
  store i32 %storemerge8, i32* @r4, align 4
  %v1_d5e4 = call i32 @function_11044(i32 13)
  %v1_d5ec = call i32 @function_11044(i32 14)
  %v1_d5f4 = call i32 @function_11044(i32 15)
  %v1_d5fc = call i32 @function_11044(i32 16)
  %v1_d604 = call i32 @function_11044(i32 17)
  %v1_d60c = call i32 @function_11044(i32 18)
  %v1_d614 = call i32 @function_11044(i32 19)
  %v1_d61c = call i32 @function_11044(i32 20)
  %v1_d624 = call i32 @function_11044(i32 21)
  %v1_d62c = call i32 @function_11044(i32 22)
  %v1_d634 = call i32 @function_11044(i32 23)
  %v1_d63c = call i32 @function_11044(i32 42)
  %v0_d640 = load i32, i32* @r5, align 4
  %v1_d644 = call i32 @function_122e0(i32 %v0_d640)
  %v0_d648 = load i32, i32* @r4, align 4
  %v2_d648 = icmp eq i32 %v0_d648, 0
  br i1 %v2_d648, label %dec_label_pc_d650, label %dec_label_pc_d76c

dec_label_pc_d650:                                ; preds = %dec_label_pc_d5e0, %dec_label_pc_d138, %dec_label_pc_d76c
  store i32 64, i32* @r1, align 4
  store i32 %v2_cfbc, i32* @r0, align 4
  %v0_d65c = call i32 @function_11a7c()
  store i32 %v2_d00c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d66c = call i32 @function_11a7c()
  %v1_d674 = call i32 @function_13718(i32 1)
  %v2_d678 = load i32, i32* %stack_var_-8484, align 4
  store i32 %v2_d678, i32* @r4, align 4
  %v0_d67c = load i32, i32* @r8, align 4
  store i32 %v0_d67c, i32* @r5, align 4
  br label %dec_label_pc_cef8.backedge

dec_label_pc_d684:                                ; preds = %dec_label_pc_d3b8
  %v9_d684 = icmp eq i32 %v3_d398, %v1_d3c8.
  br i1 %v9_d684, label %dec_label_pc_d5e0, label %dec_label_pc_d3d8

dec_label_pc_d694:                                ; preds = %dec_label_pc_d404
  %v9_d694 = icmp eq i32 %v3_d3e4, %v1_d414.
  br i1 %v9_d694, label %dec_label_pc_d5e0, label %dec_label_pc_d424

dec_label_pc_d6a4:                                ; preds = %dec_label_pc_d450
  %v9_d6a4 = icmp eq i32 %v3_d430, %v1_d460.
  br i1 %v9_d6a4, label %dec_label_pc_d5e0, label %dec_label_pc_d470

dec_label_pc_d6b4:                                ; preds = %dec_label_pc_d49c
  %v9_d6b4 = icmp eq i32 %v3_d47c, %v1_d4ac.
  br i1 %v9_d6b4, label %dec_label_pc_d5e0, label %dec_label_pc_d494.backedge

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d494.backedge, %.thread111, %dec_label_pc_d478
  %v3_d6c8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d6c8, i32* @r4, align 4
  %v5_d6d0 = icmp slt i32 %v4_d2b0, %v3_d6c8
  br i1 %v5_d6d0, label %dec_label_pc_d6e0, label %.thread120

.thread120:                                       ; preds = %dec_label_pc_d6c4
  %v1_d730201 = add i32 %v4_d2b0, -1
  store i32 %v1_d730201, i32* %r1.global-to-local, align 4
  %v2_d730202 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d730202, label %dec_label_pc_d6e0, label %dec_label_pc_d738.lr.ph

dec_label_pc_d738.lr.ph:                          ; preds = %.thread120
  %v1_d740.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d738

dec_label_pc_d6e0:                                ; preds = %dec_label_pc_d730.backedge, %.thread120, %dec_label_pc_d6c4
  %v3_d6e4 = load i32, i32* %stack_var_-52, align 4
  %v5_d6ec = icmp slt i32 %v4_d2b0, %v3_d6e4
  br i1 %v5_d6ec, label %dec_label_pc_d2a4, label %.thread126

.thread126:                                       ; preds = %dec_label_pc_d6e0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d6f8211 = icmp eq i32 %v4_d2b0, 0
  br i1 %v2_d6f8211, label %dec_label_pc_d2a4, label %dec_label_pc_d700.lr.ph

dec_label_pc_d700.lr.ph:                          ; preds = %.thread126
  %v1_d708.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d700

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6f8.backedge, %dec_label_pc_d700.lr.ph
  %v0_d6f8.in = phi i32 [ %v4_d2b0, %dec_label_pc_d700.lr.ph ], [ %v0_d6f8, %dec_label_pc_d6f8.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d700.lr.ph ], [ %storemerge, %dec_label_pc_d6f8.backedge ]
  %v0_d710 = phi i32 [ 0, %dec_label_pc_d700.lr.ph ], [ %v1_d710., %dec_label_pc_d6f8.backedge ]
  %v0_d6f8 = add i32 %v0_d6f8.in, -1
  store i32 %v3_d29c, i32* %r3.global-to-local, align 4
  %v2_d704 = add i32 %v0_d710, %v3_d29c
  %v3_d704 = inttoptr i32 %v2_d704 to i8*
  %v4_d704 = load i8, i8* %v3_d704, align 1
  %v6_d704 = zext i8 %v4_d704 to i32
  store i32 %v6_d704, i32* %r2.global-to-local, align 4
  %v2_d708 = add i32 %storemerge.in, %v1_d708.pre
  %v3_d708 = inttoptr i32 %v2_d708 to i8*
  %v4_d708 = load i8, i8* %v3_d708, align 1
  %v6_d708 = zext i8 %v4_d708 to i32
  store i32 %v6_d708, i32* %r3.global-to-local, align 4
  %v9_d70c = icmp eq i8 %v4_d708, %v4_d704
  %v1_d710 = add i32 %v0_d710, 1
  %v1_d710. = select i1 %v9_d70c, i32 %v1_d710, i32 0
  store i32 %v1_d710., i32* %r1.global-to-local, align 4
  br i1 %v9_d70c, label %dec_label_pc_d75c, label %dec_label_pc_d6f8.backedge

dec_label_pc_d6f8.backedge:                       ; preds = %dec_label_pc_d75c, %dec_label_pc_d700
  %storemerge = add i32 %storemerge.in, 1
  %v2_d6f8 = icmp eq i32 %v0_d6f8, 0
  br i1 %v2_d6f8, label %dec_label_pc_d2a4, label %dec_label_pc_d700

dec_label_pc_d724:                                ; preds = %dec_label_pc_d738
  %v9_d724 = icmp eq i32 %v3_d6c8, %v1_d748.
  br i1 %v9_d724, label %dec_label_pc_d5e0, label %dec_label_pc_d730.backedge

dec_label_pc_d730.backedge:                       ; preds = %dec_label_pc_d738, %dec_label_pc_d724
  %storemerge223 = add i32 %storemerge223.in, 1
  %v1_d730 = add i32 %v0_d730, -1
  store i32 %v1_d730, i32* %r1.global-to-local, align 4
  %v2_d730 = icmp eq i32 %v0_d730, 0
  br i1 %v2_d730, label %dec_label_pc_d6e0, label %dec_label_pc_d738

dec_label_pc_d738:                                ; preds = %dec_label_pc_d730.backedge, %dec_label_pc_d738.lr.ph
  %v0_d730 = phi i32 [ %v1_d730201, %dec_label_pc_d738.lr.ph ], [ %v1_d730, %dec_label_pc_d730.backedge ]
  %storemerge223.in = phi i32 [ 0, %dec_label_pc_d738.lr.ph ], [ %storemerge223, %dec_label_pc_d730.backedge ]
  %v0_d748 = phi i32 [ 0, %dec_label_pc_d738.lr.ph ], [ %v1_d748., %dec_label_pc_d730.backedge ]
  store i32 %v3_d288, i32* %r3.global-to-local, align 4
  %v2_d73c = add i32 %v0_d748, %v3_d288
  %v3_d73c = inttoptr i32 %v2_d73c to i8*
  %v4_d73c = load i8, i8* %v3_d73c, align 1
  %v6_d73c = zext i8 %v4_d73c to i32
  store i32 %v6_d73c, i32* %r2.global-to-local, align 4
  %v2_d740 = add i32 %storemerge223.in, %v1_d740.pre
  %v3_d740 = inttoptr i32 %v2_d740 to i8*
  %v4_d740 = load i8, i8* %v3_d740, align 1
  %v6_d740 = zext i8 %v4_d740 to i32
  store i32 %v6_d740, i32* %r3.global-to-local, align 4
  %v9_d744 = icmp eq i8 %v4_d740, %v4_d73c
  %v1_d748 = add i32 %v0_d748, 1
  %v1_d748. = select i1 %v9_d744, i32 %v1_d748, i32 0
  br i1 %v9_d744, label %dec_label_pc_d724, label %dec_label_pc_d730.backedge

dec_label_pc_d75c:                                ; preds = %dec_label_pc_d700
  %v9_d75c = icmp eq i32 %v3_d6e4, %v1_d710.
  br i1 %v9_d75c, label %dec_label_pc_d5e0, label %dec_label_pc_d6f8.backedge

dec_label_pc_d76c:                                ; preds = %dec_label_pc_d5e0
  %v0_d76c = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d774 = call i32 @function_123e0(i32 %v0_d76c, i32 9)
  br label %dec_label_pc_d650

dec_label_pc_d77c:                                ; preds = %dec_label_pc_d118
  %v0_d77c = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d784 = call i32 @function_123e0(i32 %v0_d77c, i32 9)
  %v0_d130.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d130

; uselistorder directives
  uselistorder i32 %v1_d748., { 1, 0 }
  uselistorder i1 %v9_d744, { 1, 0 }
  uselistorder i32 %v0_d748, { 1, 0 }
  uselistorder i32 %v1_d710., { 1, 2, 0 }
  uselistorder i1 %v9_d70c, { 1, 0 }
  uselistorder i32 %v0_d710, { 1, 0 }
  uselistorder i32 %storemerge.in, { 1, 0 }
  uselistorder i32 %v1_d5c0., { 1, 0 }
  uselistorder i1 %v9_d5bc, { 1, 0 }
  uselistorder i32 %v0_d5c0, { 1, 0 }
  uselistorder i32 %v1_d588., { 1, 0 }
  uselistorder i1 %v9_d584, { 1, 0 }
  uselistorder i32 %v0_d588, { 1, 0 }
  uselistorder i32 %v1_d550., { 1, 0 }
  uselistorder i1 %v9_d54c, { 1, 0 }
  uselistorder i32 %v0_d550, { 1, 0 }
  uselistorder i32 %v1_d518., { 1, 0 }
  uselistorder i1 %v9_d514, { 1, 0 }
  uselistorder i32 %v0_d518, { 1, 0 }
  uselistorder i32 %v1_d4e0., { 1, 0 }
  uselistorder i1 %v9_d4dc, { 1, 0 }
  uselistorder i32 %v0_d4e0, { 1, 0 }
  uselistorder i32 %v1_d494, { 1, 0 }
  uselistorder i32 %v1_d4ac., { 1, 0 }
  uselistorder i1 %v9_d4a8, { 1, 0 }
  uselistorder i32 %v0_d4ac, { 1, 0 }
  uselistorder i32 %storemerge224.in, { 1, 0 }
  uselistorder i32 %v0_d494, { 1, 0 }
  uselistorder i32 %v1_d470, { 1, 0 }
  uselistorder i32 %v1_d460., { 1, 0 }
  uselistorder i1 %v9_d45c, { 1, 0 }
  uselistorder i32 %v0_d460, { 1, 0 }
  uselistorder i32 %storemerge6.in, { 1, 0 }
  uselistorder i32 %v0_d470, { 1, 0 }
  uselistorder i32 %v1_d424, { 1, 0 }
  uselistorder i32 %v1_d414., { 1, 0 }
  uselistorder i1 %v9_d410, { 1, 0 }
  uselistorder i32 %v0_d414, { 1, 0 }
  uselistorder i32 %storemerge4.in, { 1, 0 }
  uselistorder i32 %v0_d424, { 1, 0 }
  uselistorder i32 %v1_d3d8, { 1, 0 }
  uselistorder i32 %v1_d3c8., { 1, 0 }
  uselistorder i1 %v9_d3c4, { 1, 0 }
  uselistorder i32 %v0_d3c8, { 1, 0 }
  uselistorder i32 %storemerge2.in, { 1, 0 }
  uselistorder i32 %v0_d3d8, { 1, 0 }
  uselistorder i32 %v1_d388, { 1, 0 }
  uselistorder i32 %v1_d37c., { 1, 0 }
  uselistorder i1 %v9_d378, { 1, 0 }
  uselistorder i32 %v0_d37c, { 1, 0 }
  uselistorder i32 %v0_d38c, { 1, 0 }
  uselistorder i32 %v0_d388, { 1, 0 }
  uselistorder i32 %v3_d144, { 1, 0 }
  uselistorder i32 %v3_d120, { 1, 2, 0 }
  uselistorder i32 %v2_cefc, { 1, 0 }
  uselistorder i32 %v4_d06c, { 1, 2, 0 }
  uselistorder i32 %v2_cf74, { 1, 0 }
  uselistorder i8* %v3_d0b4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_d00c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_cfbc, { 1, 0, 2 }
  uselistorder i32 %v2_cec8, { 1, 0 }
  uselistorder i32 %v4_ce98, { 1, 0 }
  uselistorder i32 %v3_ce64, { 2, 0, 1 }
  uselistorder i32 %v3_cd98, { 2, 1, 0 }
  uselistorder i32 %storemerge314, { 1, 0 }
  uselistorder i32 %v0_cd2c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-100, { 0, 2, 1 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-68, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2 }
  uselistorder i32* %stack_var_-80, { 1, 0, 2 }
  uselistorder i32* %stack_var_-84, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 0, 48, 6, 7, 8, 9, 10, 11, 44, 12, 13, 14, 15, 16, 17, 18, 19, 41, 37, 34, 30, 26, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 45, 47, 46, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 1, 60, 61, 62, 63, 65, 64, 66, 67, 68, 69, 70, 71, 72, 73 }
  uselistorder i32 (i32*)* @function_127e4, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_126e8, { 2, 1, 0 }
  uselistorder i32* @global_var_1d904.65, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1d908.58, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d650, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d5e0, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_d138, { 1, 0 }
  uselistorder label %dec_label_pc_d130, { 1, 0 }
  uselistorder label %dec_label_pc_cef8.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d0d4, { 1, 0 }
  uselistorder label %dec_label_pc_cf08, { 1, 0 }
  uselistorder label %dec_label_pc_cf08.preheader, { 1, 0 }
  uselistorder label %bb368, { 1, 0 }
  uselistorder label %dec_label_pc_cdc0, { 1, 0 }
}

define i32 @function_d7a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d7a0:
  store i32 ptrtoint (i32* @global_var_d928.67 to i32), i32* @global_var_1d6f4.69, align 4
  ret i32 %arg1
}

define i32 @function_d7b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_d7b8:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_d7b8 = load i32, i32* @r4, align 4
  %v9_d7b8 = load i32, i32* @r6, align 4
  %v12_d7b8 = load i32, i32* @r7, align 4
  %v15_d7b8 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d7d4 = call i32 @function_12bfc(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1d6ec.71 to i32), i32* @r6, align 4
  %v7_d7dc = icmp eq i32 %v3_d7d4, -1
  store i32 %v3_d7d4, i32* @global_var_1d6ec.71, align 4
  br i1 %v7_d7dc, label %dec_label_pc_d89c, label %dec_label_pc_d7e8

dec_label_pc_d7e8:                                ; preds = %dec_label_pc_d7b8
  %v0_d7ec = load i32, i32* @r4, align 4
  %v6_d7fc = call i32 @function_12bcc(i32 %v3_d7d4, i32 %v0_d7ec, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_d800 = load i32, i32* @global_var_1d6ec.71, align 4
  store i32 %v2_d800, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d810 = call i32 @function_1221c(i32 %v2_d800, i32 3)
  %v1_d818 = or i32 %v2_d810, 2048
  store i32 %v1_d818, i32* @r2, align 4
  %v0_d81c = load i32, i32* @r4, align 4
  %v2_d820 = call i32 @function_1221c(i32 %v0_d81c, i32 4)
  store i32 ptrtoint (i8** @global_var_1d6f8.73 to i32), i32* @r8, align 4
  %v2_d828 = load i8, i8* bitcast (i8** @global_var_1d6f8.73 to i8*), align 4
  %v2_d82c = icmp eq i8 %v2_d828, 0
  br i1 %v2_d82c, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_d7e8
  br label %bb

.thread:                                          ; preds = %dec_label_pc_d7e8
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_d864 = call i32 @function_128b4()
  %v0_d868 = load i32, i32* @r5, align 4
  %v2_d868 = inttoptr i32 %v0_d864 to i32*
  store i32 %v0_d868, i32* %v2_d868, align 4
  %v2_d86c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d86c, i32* @r7, align 4
  store i32 %v0_d864, i32* @r4, align 4
  %v2_d878 = load i32, i32* @global_var_1d6ec.71, align 4
  %v3_d880 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_d880 = call i32 @function_12a2c(i32 %v2_d878, %sockaddr* %v3_d880, i32 16)
  %v7_d884 = icmp eq i32 %v4_d880, -1
  br i1 %v7_d884, label %dec_label_pc_d8a4, label %dec_label_pc_d88c

dec_label_pc_d88c:                                ; preds = %bb
  %v2_d894 = load i32, i32* @global_var_1d6ec.71, align 4
  %v2_d898 = call i32 @function_12ae0(i32 %v2_d894, i32 1)
  br label %dec_label_pc_d89c

dec_label_pc_d89c:                                ; preds = %dec_label_pc_d7b8, %dec_label_pc_d8b0, %dec_label_pc_d88c
  %v20_d8a0 = phi i32 [ %v3_d7d4, %dec_label_pc_d7b8 ], [ %v1_d900, %dec_label_pc_d8b0 ], [ %v2_d898, %dec_label_pc_d88c ]
  store i32 %v3_d7b8, i32* @r4, align 4
  store i32 %v9_d7b8, i32* @r6, align 4
  store i32 %v12_d7b8, i32* @r7, align 4
  store i32 %v15_d7b8, i32* @r8, align 4
  ret i32 %v20_d8a0

dec_label_pc_d8a4:                                ; preds = %bb
  %v0_d8a4 = load i32, i32* @r4, align 4
  %v1_d8a4 = inttoptr i32 %v0_d8a4 to i32*
  %v2_d8a4 = load i32, i32* %v1_d8a4, align 4
  %v7_d8a8 = icmp eq i32 %v2_d8a4, 99
  br i1 %v7_d8a8, label %dec_label_pc_d908, label %dec_label_pc_d8b0

dec_label_pc_d8b0:                                ; preds = %dec_label_pc_d908, %bb21, %dec_label_pc_d8a4
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_d8c8 = load i32, i32* @global_var_1d6ec.71, align 4
  %v4_d8e0 = call i32 @function_12a58(i32 %v2_d8c8, %sockaddr* %v3_d880, i32 16)
  %v1_d8e8 = call i32 @function_13718(i32 5)
  %v2_d8ec = load i32, i32* @global_var_1d6ec.71, align 4
  %v1_d8f0 = call i32 @function_122e0(i32 %v2_d8ec)
  %v1_d8fc = call i32 @function_c7a8(i32 58811)
  %v1_d900 = call i32 @function_d7b8(i32 %v1_d8fc)
  br label %dec_label_pc_d89c

dec_label_pc_d908:                                ; preds = %dec_label_pc_d8a4
  %v2_d908 = load i8, i8* bitcast (i8** @global_var_1d6f8.73 to i8*), align 4
  %v3_d908 = zext i8 %v2_d908 to i32
  %v1_d90c = load i32, i32* @r5, align 4
  %v9_d90c = icmp eq i32 %v3_d908, %v1_d90c
  br i1 %v9_d90c, label %dec_label_pc_d8b0, label %bb21

bb21:                                             ; preds = %dec_label_pc_d908
  %v2_d914 = trunc i32 %v1_d90c to i8
  store i8 %v2_d914, i8* bitcast (i8** @global_var_1d6f8.73 to i8*), align 4
  br label %dec_label_pc_d8b0

; uselistorder directives
  uselistorder i32 %v3_d7d4, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_c7a8, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_12a2c, { 2, 0, 1 }
  uselistorder i8* bitcast (i8** @global_var_1d6f8.73 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1d6f8.73, { 1, 0 }
  uselistorder label %dec_label_pc_d8b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d89c, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_d928() local_unnamed_addr {
dec_label_pc_d928:
  %stack_var_-16 = alloca i32, align 4
  %v3_d928 = load i32, i32* @r4, align 4
  store i32 %v3_d928, i32* %stack_var_-16, align 4
  %v1_d930 = call i32 @function_110fc(i32 3)
  %v3_d93c = call i32 @function_11018(i32 3, i32* null)
  %v1_d940 = inttoptr i32 %v3_d93c to i8*
  %v2_d940 = call i32 @function_e3e4(i8* %v1_d940)
  store i32 %v2_d940, i32* @r5, align 4
  %v1_d94c = call i32 @function_11044(i32 3)
  %v0_d950 = load i32, i32* @r5, align 4
  %v2_d950 = icmp eq i32 %v0_d950, 0
  store i32 ptrtoint (i8** @global_var_1d90c.76 to i32), i32* @r6, align 4
  br i1 %v2_d950, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_d928
  ret i32 %v1_d94c

bb5:                                              ; preds = %dec_label_pc_d928
  %v1_d95c = add i32 %v0_d950, 4
  %v2_d95c = inttoptr i32 %v1_d95c to i32*
  %v3_d95c = load i32, i32* %v2_d95c, align 4
  store i32 %v3_d95c, i32* @r4, align 4
  %v0_d960 = call i32 @function_e240()
  %v0_d964 = load i32, i32* @r5, align 4
  %v1_d964 = inttoptr i32 %v0_d964 to i8*
  %v2_d964 = load i8, i8* %v1_d964, align 1
  %v3_d964 = zext i8 %v2_d964 to i32
  %v2_d968 = call i32 @function_12068(i32 %v0_d960, i32 %v3_d964)
  %v0_d96c = load i32, i32* @r4, align 4
  %v4_d96c = mul i32 %v2_d968, 4
  %v5_d96c = add i32 %v0_d96c, %v4_d96c
  %v6_d96c = inttoptr i32 %v5_d96c to i32*
  %v7_d96c = load i32, i32* %v6_d96c, align 4
  %v0_d970 = load i32, i32* @r5, align 4
  store i32 %v7_d96c, i32* @global_var_1d910.77, align 4
  %v1_d978 = call i32 @function_e3c0(i32 %v0_d970)
  %v1_d980 = call i32 @function_110fc(i32 4)
  %v3_d98c = call i32 @function_11018(i32 4, i32* null)
  %v4_d98c = inttoptr i32 %v3_d98c to i8*
  %v2_d990 = add i32 %v3_d98c, 1
  %v3_d990 = inttoptr i32 %v2_d990 to i8*
  %v4_d990 = load i8, i8* %v3_d990, align 1
  %v3_d994 = load i8, i8* %v4_d98c, align 1
  store i8 %v4_d990, i8* bitcast (i32* @global_var_1d90f.78 to i8*), align 4
  store i8 %v3_d994, i8* bitcast (i32* @global_var_1d90e.79 to i8*), align 4
  %v2_d9ac = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d9ac, i32* @r4, align 4
  %v1_d9b0 = call i32 @function_11044(i32 4)
  %v0_d9b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d9b4, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_d9b0

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_d9b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_d9b8:
  %stack_var_-16 = alloca i32, align 4
  %v3_d9b8 = load i32, i32* @r4, align 4
  %v6_d9b8 = load i32, i32* @r5, align 4
  %v2_d9bc = ptrtoint i32* %stack_var_-16 to i32
  %v0_d9c0 = call i32 @function_1230c()
  %v7_d9c4 = icmp eq i32 %v0_d9c0, -1
  %. = zext i1 %v7_d9c4 to i32
  %tmp10 = icmp slt i32 %v0_d9c0, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d9e0 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d9c0, i32* @global_var_1d86c.81, align 4
  br i1 %v2_d9e0, label %dec_label_pc_d9f4, label %dec_label_pc_d9ec

dec_label_pc_d9ec:                                ; preds = %dec_label_pc_d9b8
  store i32 %v3_d9b8, i32* @r4, align 4
  store i32 %v6_d9b8, i32* @r5, align 4
  ret i32 %v0_d9c0

dec_label_pc_d9f4:                                ; preds = %dec_label_pc_d9b8
  store i32 1, i32* %stack_var_-16, align 4
  %v1_da00 = call i32 @function_110fc(i32 13)
  %v1_da08 = call i32 @function_110fc(i32 14)
  %v0_da0c = load i32, i32* @r5, align 4
  %v2_da14 = inttoptr i32 %v0_da0c to i32*
  %v3_da14 = call i32 @function_11018(i32 13, i32* %v2_da14)
  %v2_da1c = inttoptr i32 %v3_da14 to i8*
  %v3_da1c = call i32 @function_1240c(i8* %v2_da1c, i32 2)
  %v7_da20 = icmp eq i32 %v3_da1c, -1
  store i32 %v3_da1c, i32* @r4, align 4
  br i1 %v7_da20, label %dec_label_pc_da68, label %dec_label_pc_da2c

dec_label_pc_da2c:                                ; preds = %dec_label_pc_da68, %dec_label_pc_d9f4
  %v0_da38 = phi i32 [ %v3_da78, %dec_label_pc_da68 ], [ %v3_da1c, %dec_label_pc_d9f4 ]
  %v3_da40 = call i32 @function_12390(i32 %v0_da38, i32 -2147199228, i32 %v2_d9bc)
  br label %dec_label_pc_da44

dec_label_pc_da44:                                ; preds = %dec_label_pc_da44, %dec_label_pc_da2c
  %v0_da50 = load i32, i32* @r4, align 4
  %v3_da58 = call i32 @function_12390(i32 %v0_da50, i32 -2147199227, i32 0)
  %v1_da60 = call i32 @function_13718(i32 10)
  br label %dec_label_pc_da44

dec_label_pc_da68:                                ; preds = %dec_label_pc_d9f4
  %v0_da68 = load i32, i32* @r5, align 4
  %v2_da70 = inttoptr i32 %v0_da68 to i32*
  %v3_da70 = call i32 @function_11018(i32 14, i32* %v2_da70)
  %v2_da78 = inttoptr i32 %v3_da70 to i8*
  %v3_da78 = call i32 @function_1240c(i8* %v2_da78, i32 2)
  %v3_da7c = icmp eq i32 %v3_da78, -1
  store i32 %v3_da78, i32* @r4, align 4
  br i1 %v3_da7c, label %dec_label_pc_da88, label %dec_label_pc_da2c

dec_label_pc_da88:                                ; preds = %dec_label_pc_da68
  %v1_da8c = call i32 @function_11044(i32 13)
  %v1_da94 = call i32 @function_11044(i32 14)
  %v0_da98 = load i32, i32* @r5, align 4
  %v1_da9c = call i32 @function_13684(i32 %v0_da98)
  %v0_daa0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_daa0, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_da88
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_da88, %bb13
  ret i32 %v1_da9c

; uselistorder directives
  uselistorder i32 %v3_da78, { 1, 2, 0 }
  uselistorder i32 %v3_da1c, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d9c0, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12390, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_daa4(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_daa4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp10 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_daa4 = load i32, i32* @r4, align 4
  store i32 %v3_daa4, i32* %stack_var_-36, align 4
  %v6_daa4 = load i32, i32* @r5, align 4
  %v9_daa4 = load i32, i32* @r6, align 4
  %v2_dab0 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_dab0, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_dab0, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_dac8 = call i32 @function_12c58(i32 %v2_dab0)
  store i32 %v2_dab0, i32* @r0, align 4
  %v2_dad4 = call i32 @function_12c28(i32 %v2_dab0, i32 2)
  %v0_dad8 = load i32, i32* @r5, align 4
  store i32 %v0_dad8, i32* %r2.global-to-local, align 4
  %v3_dae4 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_dae4 = call i32 @function_1255c(i32 %v0_dad8, %_TYPEDEF_sigset_t* %v3_dae4, i32 %v0_dad8)
  %v2_daf0 = call i32 @function_12c70(i32 17, i32 1)
  %v2_dafc = call i32 @function_12c70(i32 5, i32 ptrtoint (i32* @global_var_d7a0.83 to i32))
  %v0_db00 = call i32 @function_11c94()
  store i32 %v0_db00, i32* @global_var_1d900.47, align 4
  store i32 902487617, i32* %r2.global-to-local, align 4
  store i8 80, i8* bitcast (i32* @global_var_1d90f.78 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1d90c.76 to i8*), align 4
  store i32 902487617, i32* @global_var_1d910.77, align 4
  %v0_db28 = load i32, i32* @r5, align 4
  %v1_db28 = trunc i32 %v0_db28 to i8
  store i8 %v1_db28, i8* bitcast (i32* @global_var_1d90e.79 to i8*), align 4
  store i8 %v1_db28, i8* bitcast (i32* @global_var_1d90d.87 to i8*), align 4
  %v6_db30 = call i32 @function_111b4(i32 %v0_db00, i32 ptrtoint (i8** @global_var_1d90c.76 to i32), i32 902487617, i32 2)
  store i32 ptrtoint (i32* @global_var_d928.67 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_d928.67 to i32), i32* @global_var_1d6f4.69, align 4
  %v2_db44 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_db44, i32* @sb, align 4
  %v1_db48 = call i32 @function_d7b8(i32 %v6_db30)
  %v1_db4c = call i32 @function_e298(i32 %v1_db48)
  store i32 %v2_db44, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_db58 = call i32 @function_11a7c()
  %v0_db5c = load i32, i32* @r6, align 4
  %v7_db5c = icmp eq i32 %v0_db5c, 2
  br i1 %v7_db5c, label %dec_label_pc_dc88, label %dec_label_pc_db64

dec_label_pc_db64:                                ; preds = %dec_label_pc_dc88, %dec_label_pc_daa4, %dec_label_pc_dc98
  %v0_db64 = call i32 @function_e240()
  store i32 %v0_db64, i32* %r6.global-to-local, align 4
  %v0_db6c = load i32, i32* @r8, align 4
  %v1_db6c = inttoptr i32 %v0_db6c to i32*
  %v2_db6c = load i32, i32* %v1_db6c, align 4
  %v1_db70 = inttoptr i32 %v2_db6c to i8*
  %v2_db70 = call i32 @function_119dc(i8* %v1_db70)
  %v0_db78 = load i32, i32* @r8, align 4
  %v1_db78 = inttoptr i32 %v0_db78 to i32*
  %v2_db78 = load i32, i32* %v1_db78, align 4
  %v1_db7c = inttoptr i32 %v2_db78 to i8*
  %v2_db7c = call i32 @function_119dc(i8* %v1_db7c)
  %v1_db80 = sub i32 20, %v2_db70
  store i32 %v2_db7c, i32* @r5, align 4
  %v0_db88 = load i32, i32* %r6.global-to-local, align 4
  %v2_db8c = call i32 @function_12068(i32 %v0_db88, i32 %v1_db80)
  %v1_db94 = load i32, i32* @r5, align 4
  %v2_db94 = add i32 %v1_db94, %v2_db8c
  store i32 %v2_db94, i32* @r4, align 4
  %v2_db98 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_db98, i32* @r6, align 4
  %v2_dba4 = call i32 @function_e2f4(i32 %v2_db98, i32 %v2_db94)
  %v2_dba8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_dba8, i32* %r2.global-to-local, align 4
  %v1_dbac = load i32, i32* @r4, align 4
  %v2_dbac = add i32 %v1_dbac, %v2_dba8
  store i32 %v2_dbac, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_dbb8 = load i32, i32* @r8, align 4
  %v1_dbb8 = inttoptr i32 %v0_dbb8 to i32*
  %v2_dbb8 = load i32, i32* %v1_dbb8, align 4
  store i32 %v2_dbb8, i32* @r0, align 4
  %v3_dbbc = add i32 %v2_dbac, -72
  %v4_dbbc = inttoptr i32 %v3_dbbc to i8*
  store i8 0, i8* %v4_dbbc, align 1
  %v2_dbc0 = inttoptr i32 %v2_dbb8 to i8*
  %v3_dbc0 = call i32 @function_11a04(i8* %v2_dbc0, i32 %v2_db98)
  store i32 32, i32* @r1, align 4
  store i32 %v2_db98, i32* @r0, align 4
  %v0_dbcc = call i32 @function_11a7c()
  %v0_dbd0 = call i32 @function_e240()
  store i32 %v0_dbd0, i32* @r7, align 4
  %v0_dbd8 = load i32, i32* @r8, align 4
  %v1_dbd8 = inttoptr i32 %v0_dbd8 to i32*
  %v2_dbd8 = load i32, i32* %v1_dbd8, align 4
  %v1_dbdc = inttoptr i32 %v2_dbd8 to i8*
  %v2_dbdc = call i32 @function_119dc(i8* %v1_dbdc)
  %v0_dbe4 = load i32, i32* @r8, align 4
  %v1_dbe4 = inttoptr i32 %v0_dbe4 to i32*
  %v2_dbe4 = load i32, i32* %v1_dbe4, align 4
  %v1_dbe8 = inttoptr i32 %v2_dbe4 to i8*
  %v2_dbe8 = call i32 @function_119dc(i8* %v1_dbe8)
  %v1_dbec = sub i32 20, %v2_dbdc
  store i32 %v2_dbe8, i32* @r5, align 4
  %v0_dbf4 = load i32, i32* @r7, align 4
  %v2_dbf8 = call i32 @function_12068(i32 %v0_dbf4, i32 %v1_dbec)
  %v1_dbfc = load i32, i32* @r5, align 4
  %v2_dbfc = add i32 %v1_dbfc, %v2_dbf8
  store i32 %v2_dbfc, i32* @r4, align 4
  %v2_dc08 = call i32 @function_e2f4(i32 %v2_db98, i32 %v2_dbfc)
  %v1_dc10 = load i32, i32* @r4, align 4
  %v2_dc10 = add i32 %v1_dc10, %v2_dba8
  store i32 %v2_dc10, i32* @r3, align 4
  %v0_dc14 = load i32, i32* @sl, align 4
  %v1_dc14 = trunc i32 %v0_dc14 to i8
  %v3_dc14 = add i32 %v2_dc10, -72
  %v4_dc14 = inttoptr i32 %v3_dc14 to i8*
  store i8 %v1_dc14, i8* %v4_dc14, align 1
  %v2_dc20 = call i32 @function_12478(i32 15, i32 %v2_db98)
  %v1_dc28 = call i32 @function_110fc(i32 2)
  %v3_dc38 = call i32 @function_11018(i32 2, i32* nonnull %stack_var_-44)
  %v3_dc3c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_dc3c, i32* %r2.global-to-local, align 4
  %v3_dc48 = inttoptr i32 %v3_dc38 to i32*
  %v4_dc48 = call i32 @function_12608(i32 1, i32* %v3_dc48, i32 %v3_dc3c)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_dc58 = call i32 @function_12608(i32 1, i32* nonnull @global_var_14b88.91, i32 1)
  %v1_dc60 = call i32 @function_11044(i32 2)
  %v1_dc64 = call i32 @function_85e8(i32 %v1_dc60)
  %v1_dc68 = call i32 @function_cd18(i32 %v1_dc64)
  %v1_dc6c = call i32 @function_d9b8(i32 %v1_dc68)
  %v0_dc70 = call i32 @function_1230c()
  %v1_dc74 = load i32, i32* @sl, align 4
  %v7_dc78 = icmp sgt i32 %v0_dc70, %v1_dc74
  br i1 %v7_dc78, label %dec_label_pc_dc7c, label %dec_label_pc_dcc0

dec_label_pc_dc7c:                                ; preds = %dec_label_pc_db64
  store i32 %v6_daa4, i32* %r5.global-to-local, align 4
  store i32 %v9_daa4, i32* %r6.global-to-local, align 4
  ret i32 0

dec_label_pc_dc88:                                ; preds = %dec_label_pc_daa4
  %v0_dc88 = load i32, i32* @r8, align 4
  %v1_dc88 = add i32 %v0_dc88, 4
  %v2_dc88 = inttoptr i32 %v1_dc88 to i32*
  %v3_dc88 = load i32, i32* %v2_dc88, align 4
  %v1_dc8c = inttoptr i32 %v3_dc88 to i8*
  %v2_dc8c = call i32 @function_119dc(i8* %v1_dc8c)
  %v8_dc94 = icmp sgt i32 %v2_dc8c, 31
  br i1 %v8_dc94, label %dec_label_pc_db64, label %dec_label_pc_dc98

dec_label_pc_dc98:                                ; preds = %dec_label_pc_dc88
  %v0_dc98 = load i32, i32* @r8, align 4
  %v1_dc98 = add i32 %v0_dc98, 4
  %v2_dc98 = inttoptr i32 %v1_dc98 to i32*
  %v3_dc98 = load i32, i32* %v2_dc98, align 4
  store i32 %v2_db44, i32* @r0, align 4
  %v2_dca0 = bitcast i32* %stack_var_-140 to i8*
  %v3_dca0 = call i32 @function_11a04(i8* %v2_dca0, i32 %v3_dc98)
  %v0_dca4 = load i32, i32* @r8, align 4
  %v1_dca4 = add i32 %v0_dca4, 4
  %v2_dca4 = inttoptr i32 %v1_dca4 to i32*
  %v3_dca4 = load i32, i32* %v2_dca4, align 4
  %v1_dcac = inttoptr i32 %v3_dca4 to i8*
  %v2_dcac = call i32 @function_119dc(i8* %v1_dcac)
  store i32 %v2_dcac, i32* @r1, align 4
  store i32 %v3_dca4, i32* @r0, align 4
  %v0_dcb8 = call i32 @function_11a7c()
  br label %dec_label_pc_db64

dec_label_pc_dcc0:                                ; preds = %dec_label_pc_db64
  %v1_dcc0 = call i32 @function_12530(i32 %v0_dc70)
  %v0_dcc8 = load i32, i32* @sl, align 4
  %v1_dccc = call i32 @function_122e0(i32 %v0_dcc8)
  %v1_dcd4 = call i32 @function_122e0(i32 1)
  %v1_dcdc = call i32 @function_122e0(i32 2)
  %v1_dce0 = call i32 @function_85e8(i32 %v1_dcdc)
  %v1_dce4 = call i32 @function_cd18(i32 %v1_dce0)
  %v1_dce8 = call i32 @function_d9b8(i32 %v1_dce4)
  %v1_dcec = call i32 @function_ebbc(i32 %v1_dce8)
  store i32 ptrtoint (i32* @global_var_1d6f0.93 to i32), i32* @fp, align 4
  %v2_dcfc = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_dcfc, i32* @r6, align 4
  %v2_dd00 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_dd00, i32* @r7, align 4
  %v2_ddd8 = ptrtoint i32* %stack_var_-60 to i32
  %v2_e06c = ptrtoint i32* %stack_var_-52 to i32
  %v4_e080 = bitcast i8* %stack_var_-38 to i32*
  %v2_dfa8 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_e090 = ptrtoint i32* %stack_var_-48 to i32
  %v1_e124 = bitcast i32* %stack_var_-140 to i8*
  %v5_e0fc = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_e110 = sub i32 0, %v1_dcc0
  br label %dec_label_pc_dd04

dec_label_pc_dd04:                                ; preds = %dec_label_pc_dd04.backedge, %dec_label_pc_dcc0
  %v2_dd0c47 = phi i32 [ %v2_dcfc, %dec_label_pc_dcc0 ], [ %v2_dd0c47.pre, %dec_label_pc_dd04.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp10, %dec_label_pc_dcc0 ], [ %stack_var_-37.0.be, %dec_label_pc_dd04.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_dd0c49 = inttoptr i32 %v2_dd0c47 to i32*
  store i32 0, i32* %v4_dd0c49, align 4
  %v0_dd1050 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd1051 = add i32 %v0_dd1050, 4
  store i32 %v1_dd1051, i32* %r3.global-to-local, align 4
  %v7_dd1452 = icmp eq i32 %v1_dd1051, 128
  br i1 %v7_dd1452, label %dec_label_pc_dd1c, label %dec_label_pc_dd0c.dec_label_pc_dd0c_crit_edge

dec_label_pc_dd0c.dec_label_pc_dd0c_crit_edge:    ; preds = %dec_label_pc_dd04, %dec_label_pc_dd0c.dec_label_pc_dd0c_crit_edge
  %v1_dd1053 = phi i32 [ %v1_dd10, %dec_label_pc_dd0c.dec_label_pc_dd0c_crit_edge ], [ %v1_dd1051, %dec_label_pc_dd04 ]
  %v0_dd0c.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_dd0c = load i32, i32* @r6, align 4
  %v3_dd0c = add i32 %v2_dd0c, %v1_dd1053
  %v4_dd0c = inttoptr i32 %v3_dd0c to i32*
  store i32 %v0_dd0c.pre, i32* %v4_dd0c, align 4
  %v0_dd10 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd10 = add i32 %v0_dd10, 4
  store i32 %v1_dd10, i32* %r3.global-to-local, align 4
  %v7_dd14 = icmp eq i32 %v1_dd10, 128
  br i1 %v7_dd14, label %dec_label_pc_dd1c, label %dec_label_pc_dd0c.dec_label_pc_dd0c_crit_edge

dec_label_pc_dd1c:                                ; preds = %dec_label_pc_dd0c.dec_label_pc_dd0c_crit_edge, %dec_label_pc_dd04
  %v0_dd1c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dd1c, i32* %r3.global-to-local, align 4
  store i32 %v0_dd1c, i32* @r4, align 4
  %v2_dd2454 = load i32, i32* @r7, align 4
  %v3_dd2455 = add i32 %v2_dd2454, %v0_dd1c
  %v4_dd2456 = inttoptr i32 %v3_dd2455 to i32*
  store i32 %v0_dd1c, i32* %v4_dd2456, align 4
  %v0_dd2857 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd2858 = add i32 %v0_dd2857, 4
  store i32 %v1_dd2858, i32* %r3.global-to-local, align 4
  %v7_dd2c59 = icmp eq i32 %v1_dd2858, 128
  br i1 %v7_dd2c59, label %dec_label_pc_dd34, label %dec_label_pc_dd24.dec_label_pc_dd24_crit_edge

dec_label_pc_dd24.dec_label_pc_dd24_crit_edge:    ; preds = %dec_label_pc_dd1c, %dec_label_pc_dd24.dec_label_pc_dd24_crit_edge
  %v1_dd2860 = phi i32 [ %v1_dd28, %dec_label_pc_dd24.dec_label_pc_dd24_crit_edge ], [ %v1_dd2858, %dec_label_pc_dd1c ]
  %v0_dd24.pre = load i32, i32* @r4, align 4
  %v2_dd24 = load i32, i32* @r7, align 4
  %v3_dd24 = add i32 %v2_dd24, %v1_dd2860
  %v4_dd24 = inttoptr i32 %v3_dd24 to i32*
  store i32 %v0_dd24.pre, i32* %v4_dd24, align 4
  %v0_dd28 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd28 = add i32 %v0_dd28, 4
  store i32 %v1_dd28, i32* %r3.global-to-local, align 4
  %v7_dd2c = icmp eq i32 %v1_dd28, 128
  br i1 %v7_dd2c, label %dec_label_pc_dd34, label %dec_label_pc_dd24.dec_label_pc_dd24_crit_edge

dec_label_pc_dd34:                                ; preds = %dec_label_pc_dd24.dec_label_pc_dd24_crit_edge, %dec_label_pc_dd1c
  store i32 ptrtoint (i32* @global_var_1d6ec.71 to i32), i32* %r2.global-to-local, align 4
  %v2_dd38 = load i32, i32* @global_var_1d6ec.71, align 4
  %v7_dd3c = icmp eq i32 %v2_dd38, -1
  br i1 %v7_dd3c, label %dec_label_pc_dd68, label %dec_label_pc_dd44

dec_label_pc_dd44:                                ; preds = %dec_label_pc_dd34
  %v3_dd44 = udiv i32 %v2_dd38, 32
  %v3_dd48 = mul nuw nsw i32 %v3_dd44, 4
  %v2_dd50 = add i32 %v3_dd48, %v2_dba8
  store i32 %v2_dd50, i32* %r3.global-to-local, align 4
  %v1_dd54 = add i32 %v2_dd50, -360
  %v2_dd54 = inttoptr i32 %v1_dd54 to i32*
  %v3_dd54 = load i32, i32* %v2_dd54, align 4
  %v1_dd58 = urem i32 %v2_dd38, 32
  %v7_dd60 = shl i32 1, %v1_dd58
  %v8_dd60 = or i32 %v3_dd54, %v7_dd60
  store i32 %v8_dd60, i32* %r2.global-to-local, align 4
  store i32 %v8_dd60, i32* %v2_dd54, align 4
  br label %dec_label_pc_dd68

dec_label_pc_dd68:                                ; preds = %dec_label_pc_dd34, %dec_label_pc_dd44
  %v2_dd68 = load i32, i32* @global_var_1d6f0.93, align 4
  store i32 %v2_dd68, i32* %r3.global-to-local, align 4
  %v7_dd6c = icmp eq i32 %v2_dd68, -1
  store i32 ptrtoint (i32* @global_var_1d6f0.93 to i32), i32* @r8, align 4
  br i1 %v7_dd6c, label %dec_label_pc_dff8, label %dec_label_pc_dd78

dec_label_pc_dd78:                                ; preds = %dec_label_pc_dff8, %dec_label_pc_dd68, %.thread
  store i32 ptrtoint (i8** @global_var_1d870.96 to i32), i32* %r2.global-to-local, align 4
  %v2_dd7c = load i8, i8* bitcast (i8** @global_var_1d870.96 to i8*), align 4
  %v2_dd80 = icmp eq i8 %v2_dd7c, 0
  %v2_dec0 = load i32, i32* @global_var_1d6f0.93, align 4
  %v3_dec4 = udiv i32 %v2_dec0, 32
  store i32 %v3_dec4, i32* %r3.global-to-local, align 4
  br i1 %v2_dd80, label %dec_label_pc_dec0, label %dec_label_pc_dd88

dec_label_pc_dd88:                                ; preds = %dec_label_pc_dd78
  %v3_dd90 = mul nuw nsw i32 %v3_dec4, 4
  %v2_dd98 = add i32 %v3_dd90, %v2_dba8
  store i32 %v2_dd98, i32* %r3.global-to-local, align 4
  %v1_dd9c = add i32 %v2_dd98, -488
  %v2_dd9c = inttoptr i32 %v1_dd9c to i32*
  %v3_dd9c = load i32, i32* %v2_dd9c, align 4
  %v1_dda0 = urem i32 %v2_dec0, 32
  %v7_dda8 = shl i32 1, %v1_dda0
  %v8_dda8 = or i32 %v3_dd9c, %v7_dda8
  store i32 %v8_dda8, i32* %r2.global-to-local, align 4
  store i32 %v8_dda8, i32* %v2_dd9c, align 4
  br label %dec_label_pc_ddb0

dec_label_pc_ddb0:                                ; preds = %dec_label_pc_dec0, %dec_label_pc_dd88
  %v2_ddb4 = load i32, i32* @global_var_1d6ec.71, align 4
  %v2_ddb8 = load i32, i32* @global_var_1d6f0.93, align 4
  store i32 %v2_ddb8, i32* %r3.global-to-local, align 4
  %v5_ddc4 = icmp slt i32 %v2_ddb4, %v2_ddb8
  br i1 %v5_ddc4, label %bb, label %bb44

bb:                                               ; preds = %dec_label_pc_ddb0
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_ddb0, %bb
  %v0_dddc = phi i32 [ %v2_ddb4, %dec_label_pc_ddb0 ], [ %v2_ddb8, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_dddc = add i32 %v0_dddc, 1
  store i32 %v2_dd00, i32* %r2.global-to-local, align 4
  %v5_ddf0 = call i32 @function_12500(i32 %v1_dddc, i32 %v2_dcfc, i32 %v2_dd00, i32 0, i32 %v2_ddd8)
  %v8_ddf4 = icmp eq i32 %v5_ddf0, -1
  store i32 %v5_ddf0, i32* %r3.global-to-local, align 4
  br i1 %v8_ddf4, label %dec_label_pc_dd04.backedge, label %dec_label_pc_de00

dec_label_pc_de00:                                ; preds = %bb44
  %v6_ddf0 = trunc i32 %v5_ddf0 to i8
  %v3_de00 = icmp eq i8 %v6_ddf0, 0
  br i1 %v3_de00, label %dec_label_pc_de08, label %dec_label_pc_de28

dec_label_pc_de08:                                ; preds = %dec_label_pc_de00
  %v0_de08 = load i32, i32* @sl, align 4
  store i8 0, i8* %stack_var_-38, align 1
  %v2_de18 = call i32 @function_12134(i32 %v0_de08, i32 6)
  %v2_de1c = icmp eq i32 %v2_de18, 0
  %v0_de20 = load i32, i32* @sl, align 4
  %v1_de20 = add i32 %v0_de20, 1
  store i32 %v1_de20, i32* @sl, align 4
  br i1 %v2_de1c, label %dec_label_pc_e068, label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %dec_label_pc_de00, %dec_label_pc_de08, %dec_label_pc_e068
  %stack_var_-37.1 = phi i8 [ 0, %dec_label_pc_e068 ], [ 0, %dec_label_pc_de08 ], [ %stack_var_-37.0, %dec_label_pc_de00 ]
  store i32 ptrtoint (i32* @global_var_1d6ec.71 to i32), i32* %r2.global-to-local, align 4
  %v2_de2c = load i32, i32* @global_var_1d6ec.71, align 4
  %v7_de30 = icmp eq i32 %v2_de2c, -1
  br i1 %v7_de30, label %dec_label_pc_de5c, label %dec_label_pc_de38

dec_label_pc_de38:                                ; preds = %dec_label_pc_de28
  %v3_de38 = udiv i32 %v2_de2c, 32
  %v3_de3c = mul nuw nsw i32 %v3_de38, 4
  %v2_de44 = add i32 %v3_de3c, %v2_dba8
  store i32 %v2_de44, i32* %r3.global-to-local, align 4
  %v1_de48 = add i32 %v2_de44, -360
  %v2_de48 = inttoptr i32 %v1_de48 to i32*
  %v3_de48 = load i32, i32* %v2_de48, align 4
  %v1_de4c = urem i32 %v2_de2c, 32
  %v6_de50 = lshr i32 %v3_de48, %v1_de4c
  store i32 %v6_de50, i32* %r2.global-to-local, align 4
  %v1_de54 = urem i32 %v6_de50, 2
  %v2_de54 = icmp eq i32 %v1_de54, 0
  br i1 %v2_de54, label %dec_label_pc_de5c, label %dec_label_pc_e0e4

dec_label_pc_de5c:                                ; preds = %dec_label_pc_de38, %dec_label_pc_de28
  store i32 ptrtoint (i8** @global_var_1d870.96 to i32), i32* %r3.global-to-local, align 4
  %v2_de60 = load i8, i8* bitcast (i8** @global_var_1d870.96 to i8*), align 4
  %v3_de60 = zext i8 %v2_de60 to i32
  store i32 %v3_de60, i32* @r4, align 4
  %v2_de64 = icmp eq i8 %v2_de60, 0
  %v2_deec = load i32, i32* @global_var_1d6f0.93, align 4
  br i1 %v2_de64, label %dec_label_pc_deec, label %dec_label_pc_de6c

dec_label_pc_de6c:                                ; preds = %dec_label_pc_de5c
  %v3_de70 = udiv i32 %v2_deec, 32
  %v3_de78 = mul nuw nsw i32 %v3_de70, 4
  %v2_de7c = add i32 %v3_de78, %v2_dba8
  store i32 %v2_de7c, i32* %r3.global-to-local, align 4
  %v1_de80 = add i32 %v2_de7c, -488
  %v2_de80 = inttoptr i32 %v1_de80 to i32*
  %v3_de80 = load i32, i32* %v2_de80, align 4
  %v1_de84 = urem i32 %v2_deec, 32
  %v6_de88 = lshr i32 %v3_de80, %v1_de84
  store i32 %v6_de88, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d870.96 to i32), i32* %r3.global-to-local, align 4
  %v1_de94 = urem i32 %v6_de88, 2
  %v2_de94 = icmp eq i32 %v1_de94, 0
  store i8 0, i8* bitcast (i8** @global_var_1d870.96 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1d6f0.93 to i32), i32* @r5, align 4
  br i1 %v2_de94, label %dec_label_pc_dea4, label %dec_label_pc_e088

dec_label_pc_dea4:                                ; preds = %dec_label_pc_de6c
  store i32 57004, i32* @lr, align 4
  %v1_dea8 = icmp ne i32 %v2_deec, -1
  call void @__pseudo_cond_branch(i1 %v1_dea8, i32 ptrtoint (i32* @global_var_122e0.97 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_deb0 = load i32, i32* @r5, align 4
  %v2_deb0 = inttoptr i32 %v1_deb0 to i32*
  store i32 -1, i32* %v2_deb0, align 4
  %v1_deb8 = call i32 @function_13718(i32 1)
  br label %dec_label_pc_dd04.backedge

dec_label_pc_dd04.backedge:                       ; preds = %dec_label_pc_dea4, %dec_label_pc_dfd4, %dec_label_pc_e0bc, %dec_label_pc_e170, %dec_label_pc_e198, %dec_label_pc_e208, %bb44, %dec_label_pc_deec, %dec_label_pc_defc, %dec_label_pc_e120, %bb46, %dec_label_pc_e1b4, %dec_label_pc_e184
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb44 ], [ %stack_var_-37.1, %dec_label_pc_deec ], [ %stack_var_-37.1, %dec_label_pc_defc ], [ %stack_var_-37.3, %bb46 ], [ %stack_var_-37.2, %dec_label_pc_dfd4 ], [ %stack_var_-37.1, %dec_label_pc_e198 ], [ %v3_e1cc, %dec_label_pc_e1b4 ], [ %v3_e1cc, %dec_label_pc_e208 ], [ %stack_var_-37.1, %dec_label_pc_dea4 ], [ %stack_var_-37.1, %dec_label_pc_e120 ], [ %stack_var_-37.1, %dec_label_pc_e170 ], [ %stack_var_-37.1, %dec_label_pc_e0bc ], [ %stack_var_-37.3, %dec_label_pc_e184 ]
  %v2_dd0c47.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dd04

dec_label_pc_dec0:                                ; preds = %dec_label_pc_dd78
  store i32 %v2_dba8, i32* %r2.global-to-local, align 4
  %v3_decc = mul nuw nsw i32 %v3_dec4, 4
  %v2_ded0 = add i32 %v3_decc, %v2_dba8
  store i32 %v2_ded0, i32* %r3.global-to-local, align 4
  %v1_ded4 = add i32 %v2_ded0, -360
  %v2_ded4 = inttoptr i32 %v1_ded4 to i32*
  %v3_ded4 = load i32, i32* %v2_ded4, align 4
  %v1_ded8 = urem i32 %v2_dec0, 32
  %v7_dee0 = shl i32 1, %v1_ded8
  %v8_dee0 = or i32 %v3_ded4, %v7_dee0
  store i32 %v8_dee0, i32* %r2.global-to-local, align 4
  store i32 %v8_dee0, i32* %v2_ded4, align 4
  br label %dec_label_pc_ddb0

dec_label_pc_deec:                                ; preds = %dec_label_pc_de5c
  %v7_def0 = icmp eq i32 %v2_deec, -1
  store i32 ptrtoint (i32* @global_var_1d6f0.93 to i32), i32* @r5, align 4
  br i1 %v7_def0, label %dec_label_pc_dd04.backedge, label %dec_label_pc_defc

dec_label_pc_defc:                                ; preds = %dec_label_pc_deec
  %v3_defc = udiv i32 %v2_deec, 32
  %v3_df00 = mul nuw nsw i32 %v3_defc, 4
  %v2_df08 = add i32 %v3_df00, %v2_dba8
  store i32 %v2_df08, i32* %r3.global-to-local, align 4
  %v1_df0c = add i32 %v2_df08, -360
  %v2_df0c = inttoptr i32 %v1_df0c to i32*
  %v3_df0c = load i32, i32* %v2_df0c, align 4
  %v1_df10 = urem i32 %v2_deec, 32
  %v6_df14 = lshr i32 %v3_df0c, %v1_df10
  store i32 %v6_df14, i32* %r2.global-to-local, align 4
  %v1_df18 = urem i32 %v6_df14, 2
  %v2_df18 = icmp eq i32 %v1_df18, 0
  br i1 %v2_df18, label %dec_label_pc_dd04.backedge, label %dec_label_pc_df20

dec_label_pc_df20:                                ; preds = %dec_label_pc_defc
  %v0_df20 = call i32 @function_128b4()
  %v0_df24 = load i32, i32* @r4, align 4
  %v2_df24 = inttoptr i32 %v0_df20 to i32*
  store i32 %v0_df24, i32* %v2_df24, align 4
  store i32 %v0_df20, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_df38 = load i32, i32* @global_var_1d6f0.93, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_df44 = call i32 @function_12b0c(i32 %v2_df38, i32* %v4_e080, i32 2, i32 16386)
  %v7_df48 = icmp eq i32 %v5_df44, -1
  br i1 %v7_df48, label %dec_label_pc_e184, label %dec_label_pc_df50

dec_label_pc_df50:                                ; preds = %dec_label_pc_df20
  %v2_df50 = icmp eq i32 %v5_df44, 0
  br i1 %v2_df50, label %dec_label_pc_dfd4, label %dec_label_pc_df58

dec_label_pc_df58:                                ; preds = %dec_label_pc_df50
  %v3_df58 = load i8, i8* %stack_var_-38, align 1
  %v4_df58 = sext i8 %v3_df58 to i32
  %v4_df5c = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_df5c, i32* %r3.global-to-local, align 4
  %v4_df60 = mul nuw nsw i32 %v4_df5c, 256
  %v5_df60 = or i32 %v4_df58, %v4_df60
  store i32 %v5_df60, i32* %r2.global-to-local, align 4
  %v7_df60 = icmp eq i32 %v5_df60, 0
  br i1 %v7_df60, label %dec_label_pc_e198, label %dec_label_pc_df68

dec_label_pc_df68:                                ; preds = %dec_label_pc_df58
  %v1_df68 = mul nsw i32 %v4_df58, 256
  %v3_df6c = and i32 %v1_df68, 65280
  %v4_df70 = udiv i32 %v5_df60, 256
  %v5_df70 = or i32 %v3_df6c, %v4_df70
  store i32 %v5_df70, i32* %r3.global-to-local, align 4
  %v3_df742 = udiv i32 %v5_df70, 256
  store i32 %v3_df742, i32* %r2.global-to-local, align 4
  %v1_df7c = trunc i32 %v3_df742 to i8
  %v6_df80 = trunc i32 %v4_df70 to i8
  store i8 %v6_df80, i8* %stack_var_-38, align 1
  %tmp63 = icmp ult i32 %v5_df70, 1025
  br i1 %tmp63, label %dec_label_pc_df98, label %dec_label_pc_df88

dec_label_pc_df88:                                ; preds = %dec_label_pc_df68
  %v2_df88 = load i32, i32* @global_var_1d6f0.93, align 4
  %v1_df8c = call i32 @function_122e0(i32 %v2_df88)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_df94 = load i32, i32* @r5, align 4
  %v2_df94 = inttoptr i32 %v1_df94 to i32*
  store i32 -1, i32* %v2_df94, align 4
  %v3_dfa0.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_df98

dec_label_pc_df98:                                ; preds = %dec_label_pc_df68, %dec_label_pc_df88
  %v3_dfa0 = phi i8 [ %v6_df80, %dec_label_pc_df68 ], [ %v3_dfa0.pre, %dec_label_pc_df88 ]
  %v0_df98 = load i32, i32* @r4, align 4
  %v1_df98 = load i32, i32* @r8, align 4
  %v2_df98 = inttoptr i32 %v1_df98 to i32*
  store i32 %v0_df98, i32* %v2_df98, align 4
  %v4_df9c = urem i32 %v3_df742, 256
  %v4_dfa0 = sext i8 %v3_dfa0 to i32
  store i32 %v2_dfa8, i32* @r4, align 4
  %v4_dfb0 = mul nuw nsw i32 %v4_df9c, 256
  %v5_dfb0 = or i32 %v4_dfa0, %v4_dfb0
  store i32 %v5_dfb0, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_dfb8 = load i32, i32* @global_var_1d6f0.93, align 4
  %v5_dfc0 = call i32 @function_12b0c(i32 %v2_dfb8, i32* nonnull %stack_var_-1548, i32 %v5_dfb0, i32 16386)
  %v7_dfc4 = icmp eq i32 %v5_dfc0, -1
  br i1 %v7_dfc4, label %dec_label_pc_e184, label %dec_label_pc_dfcc

dec_label_pc_dfcc:                                ; preds = %dec_label_pc_df98
  %v2_dfcc = icmp eq i32 %v5_dfc0, 0
  br i1 %v2_dfcc, label %dec_label_pc_dfd4, label %dec_label_pc_e1b4

dec_label_pc_dfd4:                                ; preds = %bb46, %dec_label_pc_dfcc, %dec_label_pc_df50
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb46 ], [ %stack_var_-37.1, %dec_label_pc_df50 ], [ %v1_df7c, %dec_label_pc_dfcc ]
  %v2_dfd4 = load i32, i32* @global_var_1d6f0.93, align 4
  store i32 57312, i32* @lr, align 4
  %v1_dfdc = icmp ne i32 %v2_dfd4, -1
  call void @__pseudo_cond_branch(i1 %v1_dfdc, i32 ptrtoint (i32* @global_var_122e0.97 to i32))
  store i32 ptrtoint (i32* @global_var_1d6f0.93 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1d6f0.93, align 4
  %v1_dff0 = call i32 @function_13718(i32 1)
  br label %dec_label_pc_dd04.backedge

dec_label_pc_dff8:                                ; preds = %dec_label_pc_dd68
  %v0_e000 = load i32, i32* @r4, align 4
  store i32 %v0_e000, i32* %r2.global-to-local, align 4
  %v3_e004 = call i32 @function_12bfc(i32 2, i32 1, i32 %v0_e000)
  %v7_e008 = icmp eq i32 %v3_e004, -1
  store i32 %v3_e004, i32* %r5.global-to-local, align 4
  %v1_e010 = load i32, i32* @r8, align 4
  %v2_e010 = inttoptr i32 %v1_e010 to i32*
  store i32 %v3_e004, i32* %v2_e010, align 4
  br i1 %v7_e008, label %dec_label_pc_dd78, label %dec_label_pc_e018

dec_label_pc_e018:                                ; preds = %dec_label_pc_dff8
  %v0_e018 = load i32, i32* @r4, align 4
  store i32 %v0_e018, i32* @r2, align 4
  %v2_e020 = call i32 @function_1221c(i32 %v3_e004, i32 3)
  %v1_e028 = or i32 %v2_e020, 2048
  store i32 %v1_e028, i32* @r2, align 4
  %v0_e02c = load i32, i32* %r5.global-to-local, align 4
  %v2_e030 = call i32 @function_1221c(i32 %v0_e02c, i32 4)
  store i32 ptrtoint (i32* @global_var_1d6f4.69 to i32), i32* %r2.global-to-local, align 4
  %v2_e038 = load i32, i32* @global_var_1d6f4.69, align 4
  store i32 %v2_e038, i32* %r3.global-to-local, align 4
  %v2_e03c = icmp eq i32 %v2_e038, 0
  br i1 %v2_e03c, label %.thread, label %bb45

bb45:                                             ; preds = %dec_label_pc_e018
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_11c94.98 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e018, %bb45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e050 = load i32, i32* @global_var_1d6f0.93, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1d870.96 to i8*), align 4
  %v5_e060 = call i32 @function_12a58(i32 %v2_e050, %sockaddr* bitcast (i8** @global_var_1d90c.76 to %sockaddr*), i32 16)
  br label %dec_label_pc_dd78

dec_label_pc_e068:                                ; preds = %dec_label_pc_de08
  %v2_e070 = load i32, i32* @global_var_1d6f0.93, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e080 = call i32 @function_12b6c(i32 %v2_e070, i32* nonnull %v4_e080, i32 2, i32 16384)
  br label %dec_label_pc_de28

dec_label_pc_e088:                                ; preds = %dec_label_pc_de6c
  store i32 4, i32* @r4, align 4
  store i32 %v2_e090, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_e0ac = call i32 @function_12ab0(i32 %v2_deec, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_e06c)
  %v3_e0b0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e0b0, i32* %r3.global-to-local, align 4
  %v2_e0b4 = icmp eq i32 %v3_e0b0, 0
  br i1 %v2_e0b4, label %dec_label_pc_e120, label %dec_label_pc_e0bc

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e088
  %v2_e0bc = load i32, i32* @global_var_1d6f0.93, align 4
  %v1_e0c0 = call i32 @function_122e0(i32 %v2_e0bc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e0c8 = load i32, i32* @r5, align 4
  %v2_e0c8 = inttoptr i32 %v1_e0c8 to i32*
  store i32 -1, i32* %v2_e0c8, align 4
  %v0_e0cc = call i32 @function_e240()
  %v2_e0d4 = call i32 @function_12068(i32 %v0_e0cc, i32 10)
  %v1_e0d8 = add i32 %v2_e0d4, 1
  %v1_e0dc = call i32 @function_13718(i32 %v1_e0d8)
  br label %dec_label_pc_dd04.backedge

dec_label_pc_e0e4:                                ; preds = %dec_label_pc_de38
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e090, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_e0fc = call i32 @function_12a00(i32 %v2_de2c, %sockaddr* %v5_e0fc, i32 %v2_e090, i32 16, i32 16)
  %v1_e100 = call i32 @function_e930(i32 %v6_e0fc)
  %v1_e104 = call i32 @function_c794(i32 %v1_e100)
  store i32 %v1_dcc0, i32* %r2.global-to-local, align 4
  %v2_e114 = call i32 @function_123e0(i32 %v1_e110, i32 9)
  %v1_e11c = call i32 @function_13684(i32 0)
  br label %dec_label_pc_e120

dec_label_pc_e120:                                ; preds = %dec_label_pc_e088, %dec_label_pc_e0e4
  %v2_e124 = call i32 @function_119dc(i8* %v1_e124)
  %v3_e124 = trunc i32 %v2_e124 to i8
  store i8 %v3_e124, i8* %stack_var_-38, align 1
  %v0_e12c = call i32 @function_11c94()
  store i32 %v0_e12c, i32* @global_var_1d900.47, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e140 = load i32, i32* @r4, align 4
  store i32 %v0_e140, i32* %r2.global-to-local, align 4
  %v0_e144 = load i32, i32* @r5, align 4
  %v1_e144 = inttoptr i32 %v0_e144 to i32*
  %v2_e144 = load i32, i32* %v1_e144, align 4
  %v5_e148 = call i32 @function_12b6c(i32 %v2_e144, i32* nonnull @global_var_14b8c.100, i32 %v0_e140, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_e154 = load i32, i32* @r5, align 4
  %v1_e154 = inttoptr i32 %v0_e154 to i32*
  %v2_e154 = load i32, i32* %v1_e154, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e160 = call i32 @function_12b6c(i32 %v2_e154, i32* %v4_e080, i32 1, i32 16384)
  %v3_e164 = load i8, i8* %stack_var_-38, align 1
  %v4_e164 = sext i8 %v3_e164 to i32
  store i32 %v4_e164, i32* %r2.global-to-local, align 4
  %v2_e168 = icmp eq i8 %v3_e164, 0
  br i1 %v2_e168, label %dec_label_pc_dd04.backedge, label %dec_label_pc_e170

dec_label_pc_e170:                                ; preds = %dec_label_pc_e120
  %v0_e170 = load i32, i32* @r5, align 4
  %v1_e170 = inttoptr i32 %v0_e170 to i32*
  %v2_e170 = load i32, i32* %v1_e170, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e17c = call i32 @function_12b6c(i32 %v2_e170, i32* nonnull %stack_var_-140, i32 %v4_e164, i32 16384)
  br label %dec_label_pc_dd04.backedge

dec_label_pc_e184:                                ; preds = %dec_label_pc_df98, %dec_label_pc_df20
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_df20 ], [ %v1_df7c, %dec_label_pc_df98 ]
  %v0_e184 = load i32, i32* @r8, align 4
  %v1_e184 = inttoptr i32 %v0_e184 to i32*
  %v2_e184 = load i32, i32* %v1_e184, align 4
  store i32 %v2_e184, i32* %r3.global-to-local, align 4
  %v7_e188 = icmp eq i32 %v2_e184, 4
  br i1 %v7_e188, label %dec_label_pc_dd04.backedge, label %bb46

bb46:                                             ; preds = %dec_label_pc_e184
  %v8_e18c = icmp eq i32 %v2_e184, 11
  br i1 %v8_e18c, label %dec_label_pc_dd04.backedge, label %dec_label_pc_dfd4

dec_label_pc_e198:                                ; preds = %dec_label_pc_df58
  %v2_e19c = load i32, i32* @global_var_1d6f0.93, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e1ac = call i32 @function_12b0c(i32 %v2_e19c, i32* nonnull %v4_e080, i32 2, i32 16384)
  br label %dec_label_pc_dd04.backedge

dec_label_pc_e1b4:                                ; preds = %dec_label_pc_dfcc
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e1c4 = load i32, i32* @global_var_1d6f0.93, align 4
  %v5_e1c8 = call i32 @function_12b0c(i32 %v2_e1c4, i32* nonnull %v4_e080, i32 2, i32 16384)
  %v3_e1cc = load i8, i8* %stack_var_-38, align 1
  %v4_e1cc = sext i8 %v3_e1cc to i32
  %v4_e1d4 = mul nsw i32 %v4_e1cc, 256
  %v5_e1d4 = or i32 %v4_e1d4, %v4_df9c
  store i32 %v5_e1d4, i32* @ip, align 4
  store i32 %v5_e1d4, i32* %r2.global-to-local, align 4
  store i32 %v4_e1cc, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e1e8 = load i32, i32* @global_var_1d6f0.93, align 4
  store i8 %v1_df7c, i8* %stack_var_-38, align 1
  %v8_e1f4 = call i32 @function_12b0c(i32 %v2_e1e8, i32* nonnull %stack_var_-1548, i32 %v5_e1d4, i32 16384)
  %v3_e1f8 = load i8, i8* %stack_var_-38, align 1
  %v4_e1f8 = sext i8 %v3_e1f8 to i32
  store i32 %v4_e1f8, i32* %r2.global-to-local, align 4
  %v4_e1fc = zext i8 %v3_e1cc to i32
  store i32 %v4_e1fc, i32* %r3.global-to-local, align 4
  %v4_e200 = mul nuw nsw i32 %v4_e1fc, 256
  %v5_e200 = or i32 %v4_e1f8, %v4_e200
  %v7_e200 = icmp eq i32 %v5_e200, 0
  br i1 %v7_e200, label %dec_label_pc_dd04.backedge, label %dec_label_pc_e208

dec_label_pc_e208:                                ; preds = %dec_label_pc_e1b4
  %v5_e20c = call i32 @function_830c(i32* nonnull %stack_var_-1548, i32 %v5_e200, i32 %v4_e1f8, i32 %v4_e1fc)
  br label %dec_label_pc_dd04.backedge

; uselistorder directives
  uselistorder i32 %v4_e1fc, { 1, 0, 2 }
  uselistorder i32 %v4_e1f8, { 1, 0, 2 }
  uselistorder i32 %v4_e1cc, { 1, 0 }
  uselistorder i8 %v3_e1cc, { 2, 3, 1, 0 }
  uselistorder i8 %stack_var_-37.3, { 1, 0, 2 }
  uselistorder i32 %v3_e004, { 3, 2, 1, 0 }
  uselistorder i32 %v5_dfc0, { 1, 0 }
  uselistorder i32 %v4_df9c, { 1, 0 }
  uselistorder i8 %v1_df7c, { 0, 2, 1 }
  uselistorder i32 %v3_df742, { 0, 2, 1 }
  uselistorder i32 %v4_df70, { 1, 0 }
  uselistorder i32 %v5_df44, { 1, 0 }
  uselistorder i32 %v2_deec, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_de2c, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 9, 8, 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %v5_ddf0, { 2, 1, 0 }
  uselistorder i32 %v2_dd38, { 2, 1, 0 }
  uselistorder i32 %v1_dd28, { 1, 2, 0 }
  uselistorder i32 %v1_dd10, { 1, 2, 0 }
  uselistorder i32 %v2_e090, { 1, 0, 2 }
  uselistorder i32* %v4_e080, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_dd00, { 1, 0, 2 }
  uselistorder i32 %v2_dcfc, { 1, 0, 2 }
  uselistorder i32 %v2_dba8, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder i32 %v2_db98, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_dab0, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 27, 29, 30, 31, 32, 23, 33, 34, 35, 46, 47, 39, 40, 36, 44, 45, 37, 38, 41, 42, 43 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37 }
  uselistorder i32 16386, { 1, 0, 2, 3 }
  uselistorder i8* bitcast (i8** @global_var_1d870.96 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1d870.96, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1d870.96 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1d6ec.71, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1d6f0.93, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_d9b8, { 1, 0 }
  uselistorder i32 (i32)* @function_cd18, { 1, 0 }
  uselistorder i32 (i32)* @function_85e8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_e2f4, { 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32)* @function_d7b8, { 1, 0 }
  uselistorder i32* @global_var_1d6f4.69, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d928.67 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_12c70, { 1, 0 }
  uselistorder label %dec_label_pc_e120, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_df98, { 1, 0 }
  uselistorder label %dec_label_pc_dd04.backedge, { 5, 11, 4, 10, 12, 3, 9, 2, 1, 8, 7, 0, 6 }
  uselistorder label %dec_label_pc_de28, { 2, 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_dd78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dd68, { 1, 0 }
  uselistorder label %dec_label_pc_dd24.dec_label_pc_dd24_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_dd0c.dec_label_pc_dd0c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_db64, { 2, 0, 1 }
}

define i32 @function_e240() local_unnamed_addr {
dec_label_pc_e240:
  %v2_e24c = load i32, i32* @global_var_1d874.102, align 4
  %v2_e250 = load i32, i32* @global_var_1d880.104, align 4
  store i32 ptrtoint (i32* @global_var_1d878.106 to i32), i32* @lr, align 4
  %v4_e25c = mul i32 %v2_e24c, 2048
  %v5_e25c = xor i32 %v4_e25c, %v2_e24c
  %v4_e260 = udiv i32 %v2_e250, 524288
  %v5_e260 = xor i32 %v4_e260, %v2_e250
  %v2_e264 = load i32, i32* @global_var_1d878.106, align 4
  %v2_e268 = load i32, i32* @global_var_1d87c.108, align 4
  %v2_e26c = xor i32 %v5_e260, %v5_e25c
  %v4_e270 = udiv i32 %v5_e25c, 256
  %v5_e270 = xor i32 %v2_e26c, %v4_e270
  store i32 %v2_e264, i32* @global_var_1d874.102, align 4
  store i32 %v2_e268, i32* @global_var_1d878.106, align 4
  store i32 %v2_e250, i32* @global_var_1d87c.108, align 4
  store i32 %v5_e270, i32* @global_var_1d880.104, align 4
  ret i32 %v5_e270

; uselistorder directives
  uselistorder i32 %v2_e250, { 2, 1, 0 }
  uselistorder i32 %v2_e24c, { 1, 0 }
}

define i32 @function_e298(i32 %arg1) local_unnamed_addr {
dec_label_pc_e298:
  %stack_var_-12 = alloca i32, align 4
  %v3_e298 = load i32, i32* @r4, align 4
  store i32 %v3_e298, i32* %stack_var_-12, align 4
  %v2_e2a0 = call i32 @function_125b0(i32* null)
  store i32 %v2_e2a0, i32* @global_var_1d874.102, align 4
  %v0_e2ac = call i32 @function_12338()
  store i32 %v0_e2ac, i32* @r4, align 4
  %v0_e2b4 = call i32 @function_12364()
  %v0_e2bc = load i32, i32* @r4, align 4
  %v2_e2bc = xor i32 %v0_e2bc, %v0_e2b4
  store i32 %v2_e2bc, i32* @r4, align 4
  store i32 %v2_e2bc, i32* @global_var_1d878.106, align 4
  %v1_e2c4 = call i32 @function_128c0(i32 %v0_e2b4)
  %v2_e2c8 = load i32, i32* @global_var_1d878.106, align 4
  %v2_e2d4 = xor i32 %v2_e2c8, %v1_e2c4
  store i32 %v2_e2d4, i32* @global_var_1d880.104, align 4
  store i32 %v1_e2c4, i32* @global_var_1d87c.108, align 4
  %v2_e2e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_e2e0, i32* @r4, align 4
  ret i32 %v1_e2c4

; uselistorder directives
  uselistorder i32 %v1_e2c4, { 1, 2, 0 }
  uselistorder i32 %v0_e2b4, { 1, 0 }
  uselistorder i32 ()* @function_12364, { 1, 0 }
}

define i32 @function_e2f4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e2f4:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-59 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e2f4 = load i32, i32* @r4, align 4
  store i32 %v3_e2f4, i32* %stack_var_-36, align 4
  %v6_e2f4 = load i32, i32* @r5, align 4
  %v9_e2f4 = load i32, i32* @r6, align 4
  %v12_e2f4 = load i32, i32* @r7, align 4
  %v28_e2f4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e308 = call i32 @function_110fc(i32 41)
  %v3_e314 = call i32 @function_11018(i32 41, i32* null)
  %v2_e31c = ptrtoint i32* %stack_var_-59 to i32
  %v2_e320 = inttoptr i32 %v3_e314 to i8*
  %v3_e320 = call i32 @function_129c0(i32 %v2_e31c, i8* %v2_e320)
  %v2_e324 = icmp eq i32 %arg2, 0
  br i1 %v2_e324, label %dec_label_pc_e3a0, label %dec_label_pc_e32c

dec_label_pc_e32c:                                ; preds = %dec_label_pc_e2f4
  store i32 ptrtoint (i32* @global_var_1d874.102 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d878.106 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d87c.108 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1d880.104 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_e374 = bitcast i32* %stack_var_-59 to i8*
  br label %dec_label_pc_e340

dec_label_pc_e340:                                ; preds = %dec_label_pc_e340.dec_label_pc_e340_crit_edge, %dec_label_pc_e32c
  %v1_e364 = phi i32 [ %v1_e364.pre, %dec_label_pc_e340.dec_label_pc_e340_crit_edge ], [ ptrtoint (i32* @global_var_1d874.102 to i32), %dec_label_pc_e32c ]
  %v2_e340 = load i32, i32* @global_var_1d880.104, align 4
  store i32 %v2_e340, i32* %r2.global-to-local, align 4
  %v2_e344 = load i32, i32* @global_var_1d874.102, align 4
  %v4_e348 = udiv i32 %v2_e340, 524288
  %v5_e348 = xor i32 %v4_e348, %v2_e340
  %v4_e34c = mul i32 %v2_e344, 2048
  %v5_e34c = xor i32 %v4_e34c, %v2_e344
  %v2_e350 = xor i32 %v5_e348, %v5_e34c
  %v2_e354 = load i32, i32* @global_var_1d878.106, align 4
  %v2_e358 = load i32, i32* @global_var_1d87c.108, align 4
  store i32 %v2_e358, i32* %ip.global-to-local, align 4
  %v4_e35c = udiv i32 %v5_e34c, 256
  %v5_e35c = xor i32 %v2_e350, %v4_e35c
  store i32 %v5_e35c, i32* @r4, align 4
  %v2_e364 = inttoptr i32 %v1_e364 to i32*
  store i32 %v2_e354, i32* %v2_e364, align 4
  %v0_e368 = load i32, i32* %ip.global-to-local, align 4
  %v1_e368 = load i32, i32* %r8.global-to-local, align 4
  %v2_e368 = inttoptr i32 %v1_e368 to i32*
  store i32 %v0_e368, i32* %v2_e368, align 4
  %v0_e36c = load i32, i32* %r2.global-to-local, align 4
  %v1_e36c = load i32, i32* @r7, align 4
  %v2_e36c = inttoptr i32 %v1_e36c to i32*
  store i32 %v0_e36c, i32* %v2_e36c, align 4
  %v0_e370 = load i32, i32* @r4, align 4
  %v1_e370 = load i32, i32* @r6, align 4
  %v2_e370 = inttoptr i32 %v1_e370 to i32*
  store i32 %v0_e370, i32* %v2_e370, align 4
  %v2_e374 = call i32 @function_119dc(i8* %v1_e374)
  %v0_e37c = load i32, i32* @r4, align 4
  %v2_e380 = call i32 @function_12068(i32 %v0_e37c, i32 %v2_e374)
  %v2_e388 = add i32 %v2_e380, %v28_e2f4
  %v1_e38c = add i32 %v2_e388, -23
  %v2_e38c = inttoptr i32 %v1_e38c to i8*
  %v3_e38c = load i8, i8* %v2_e38c, align 1
  %v2_e390 = load i32, i32* @r5, align 4
  %v3_e390 = load i32, i32* %fp.global-to-local, align 4
  %v4_e390 = add i32 %v3_e390, %v2_e390
  %v5_e390 = inttoptr i32 %v4_e390 to i8*
  store i8 %v3_e38c, i8* %v5_e390, align 1
  %v0_e394 = load i32, i32* @r5, align 4
  %v1_e394 = add i32 %v0_e394, 1
  store i32 %v1_e394, i32* @r5, align 4
  %v1_e398 = load i32, i32* %sb.global-to-local, align 4
  %v9_e398 = icmp eq i32 %v1_e394, %v1_e398
  br i1 %v9_e398, label %dec_label_pc_e3a0, label %dec_label_pc_e340.dec_label_pc_e340_crit_edge

dec_label_pc_e340.dec_label_pc_e340_crit_edge:    ; preds = %dec_label_pc_e340
  %v1_e364.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e340

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_e340, %dec_label_pc_e2f4
  %v1_e3a4 = call i32 @function_11044(i32 41)
  %v2_e3ac = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e3ac, i32* @r4, align 4
  store i32 %v6_e2f4, i32* @r5, align 4
  store i32 %v9_e2f4, i32* @r6, align 4
  store i32 %v12_e2f4, i32* @r7, align 4
  ret i32 %v1_e3a4

; uselistorder directives
  uselistorder i32 %v2_e344, { 1, 0 }
  uselistorder i32 %v2_e340, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* @global_var_1d880.104, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1d87c.108, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1d878.106, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1d874.102, { 2, 4, 1, 0, 3 }
  uselistorder i32 41, { 1, 2, 3, 4, 5, 6, 0 }
}

define i32 @function_e3c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e3c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e3c0 = load i32, i32* @r4, align 4
  store i32 %v3_e3c0, i32* %stack_var_-8, align 4
  %v6_e3c0 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_e3c4 = icmp eq i32 %arg1, 0
  br i1 %v2_e3c4, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_e3c0
  store i32 %v3_e3c0, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_e3c0
  %v1_e3cc = add i32 %arg1, 4
  %v2_e3cc = inttoptr i32 %v1_e3cc to i32*
  %v3_e3cc = load i32, i32* %v2_e3cc, align 4
  %v1_e3d4 = icmp ne i32 %v3_e3cc, 0
  call void @__pseudo_cond_branch(i1 %v1_e3d4, i32 ptrtoint (i32* @global_var_12f40.20 to i32))
  %v0_e3d8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e3d8, i32* @r0, align 4
  %v2_e3dc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e3dc, i32* @r4, align 4
  store i32 %v6_e3c0, i32* @lr, align 4
  %v0_e3e0 = call i32 @function_12f40()
  ret i32 %v0_e3e0
}

define i32 @function_e3e4(i8* %arg1) local_unnamed_addr {
dec_label_pc_e3e4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e3e4 = load i32, i32* @r4, align 4
  store i32 %v3_e3e4, i32* %stack_var_-36, align 4
  %v6_e3e4 = load i32, i32* @r5, align 4
  %v9_e3e4 = load i32, i32* @r6, align 4
  %v12_e3e4 = load i32, i32* @r7, align 4
  %v15_e3e4 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_e3fc = call i32 @function_12ee8(i32 1, i32 8)
  %v0_e404 = load i32, i32* @r4, align 4
  %v1_e404 = inttoptr i32 %v0_e404 to i8*
  store i32 %v0_e404, i32* %r0.global-to-local, align 4
  %v3_e408 = call i32 @function_119dc(i8* %v1_e404)
  %v2_e410 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_e410, i32* %fp.global-to-local, align 4
  %v2_e414 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_e418 = add i32 %v3_e408, 1
  store i32 %v1_e418, i32* %r0.global-to-local, align 4
  %v2_e41c = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_e41c, i32* %r2.global-to-local, align 4
  store i32 %v2_e410, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_e45c162 = icmp eq i32 %v1_e418, 0
  store i1 %v2_e45c162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_e464163 = or i32 %v2_e41c, 1
  store i32 %v1_e464163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_e418, 1
  br i1 %tmp124164, label %dec_label_pc_e46c, label %dec_label_pc_e42c.lr.ph

dec_label_pc_e42c.lr.ph:                          ; preds = %dec_label_pc_e3e4
  %v0_e42c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e42c

dec_label_pc_e42c:                                ; preds = %dec_label_pc_e42c.lr.ph, %.thread12
  %v1_e440176.off0 = phi i8 [ 0, %dec_label_pc_e42c.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_e42c = phi i32 [ %v0_e42c.pre, %dec_label_pc_e42c.lr.ph ], [ %v1_e450, %.thread12 ]
  %v2_e470165 = phi i32 [ %v2_e41c, %dec_label_pc_e42c.lr.ph ], [ %v0_e458, %.thread12 ]
  %v1_e42c = inttoptr i32 %v0_e42c to i8*
  %v2_e42c = load i8, i8* %v1_e42c, align 1
  %v3_e42c = zext i8 %v2_e42c to i32
  store i32 %v3_e42c, i32* %r3.global-to-local, align 4
  %v2_e430 = icmp eq i8 %v2_e42c, 0
  store i1 %v2_e430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e430, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_e42c
  %v8_e434 = icmp eq i8 %v2_e42c, 46
  store i1 %v8_e434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e434, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_e438 = inttoptr i32 %v2_e470165 to i8*
  store i8 %v2_e42c, i8* %v4_e438, align 1
  %v5_e438 = load i32, i32* %r2.global-to-local, align 4
  %v6_e438 = add i32 %v5_e438, 1
  store i32 %v6_e438, i32* %r2.global-to-local, align 4
  %v0_e43c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e43c.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_e440.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_e440.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_e42c
  %v1_e440.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_e440176.off0, %bb ], [ %v1_e440176.off0, %dec_label_pc_e42c ]
  %v3_e440 = load i32, i32* %r5.global-to-local, align 4
  %v4_e440 = inttoptr i32 %v3_e440 to i8*
  store i8 %v1_e440.off0, i8* %v4_e440, align 1
  %v0_e444.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e444.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_e438, i32* %r1.global-to-local, align 4
  %v1_e444 = load i32, i32* %ip.global-to-local, align 4
  %v2_e444 = urem i32 %v1_e444, 256
  store i32 %v2_e444, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_e44410 = load i32, i32* %ip.global-to-local, align 4
  %v2_e44411 = urem i32 %v1_e44410, 256
  store i32 %v2_e44411, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_e448.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_e448.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_e460.pre = phi i32 [ %v2_e44411, %..thread12_crit_edge ], [ %v2_e444, %bb122 ], [ 0, %bb123 ]
  %v0_e450 = load i32, i32* @r4, align 4
  %v1_e450 = add i32 %v0_e450, 1
  store i32 %v1_e450, i32* @r4, align 4
  %v0_e454 = load i32, i32* %r0.global-to-local, align 4
  %v1_e454 = add i32 %v0_e454, -1
  store i32 %v1_e454, i32* %r0.global-to-local, align 4
  %v0_e458 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_e458, i32* %r2.global-to-local, align 4
  %v2_e45c = icmp eq i32 %v1_e454, 0
  store i1 %v2_e45c, i1* %cpsr_z.global-to-local, align 1
  %v1_e460 = add nuw nsw i32 %v0_e460.pre, 1
  store i32 %v1_e460, i32* %ip.global-to-local, align 4
  %v1_e464 = add i32 %v0_e458, 1
  store i32 %v1_e464, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_e454, 1
  %extract.t179 = trunc i32 %v0_e460.pre to i8
  br i1 %tmp124, label %dec_label_pc_e46c, label %dec_label_pc_e42c

dec_label_pc_e46c:                                ; preds = %.thread12, %dec_label_pc_e3e4
  %v2_e470.lcssa = phi i32 [ %v2_e41c, %dec_label_pc_e3e4 ], [ %v0_e458, %.thread12 ]
  %v3_e3fc = inttoptr i32 %v2_e3fc to i8*
  store i32 0, i32* @r4, align 4
  %v3_e470 = inttoptr i32 %v2_e470.lcssa to i8*
  store i8 0, i8* %v3_e470, align 1
  store i32 %v2_e410, i32* %r0.global-to-local, align 4
  %v1_e478 = bitcast i32* %stack_var_-2228 to i8*
  %v2_e478 = call i32 @function_119dc(i8* %v1_e478)
  %v2_e47c = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_e47c, i32* %r1.global-to-local, align 4
  %v0_e480 = load i32, i32* %fp.global-to-local, align 4
  %v2_e480 = add i32 %v0_e480, %v2_e478
  store i32 %v2_e480, i32* @r5, align 4
  %v0_e484 = load i32, i32* @r4, align 4
  store i32 %v0_e484, i32* %stack_var_-64, align 4
  store i32 %v2_e410, i32* %r0.global-to-local, align 4
  %v2_e498 = call i32 @function_119dc(i8* %v1_e478)
  %v1_e49c = add i32 %v2_e498, 17
  store i32 %v1_e49c, i32* %r0.global-to-local, align 4
  %v0_e4a4 = call i32 @function_e240()
  store i32 %v0_e4a4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_e4b0 = call i32 @function_12068(i32 %v0_e4a4, i32 65535)
  store i32 16, i32* @r1, align 4
  %v6_e4bc = urem i32 %v2_e4b0, 65536
  store i32 %v6_e4bc, i32* %r3.global-to-local, align 4
  %v2_e4c4 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_e4c4, i32* @r0, align 4
  %v0_e4cc = call i32 @function_11a7c()
  %sext = mul i32 %v2_e4b0, 16777216
  %v4_e4d0 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_e47c, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_e4d0, i32* %lr.global-to-local, align 4
  %v0_e518 = load i32, i32* @r5, align 4
  %v2_e518 = add i32 %v0_e518, 1
  store i32 %v2_e518, i32* %ip.global-to-local, align 4
  %v2_e51c = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_e51c, i32* %r1.global-to-local, align 4
  %v5_e520 = trunc i32 %v4_e4d0 to i8
  store i8 %v5_e520, i8* %stack_var_-2240, align 1
  %v0_e538 = load i32, i32* @r4, align 4
  %v1_e538 = trunc i32 %v0_e538 to i8
  %v4_e538 = inttoptr i32 %v2_e518 to i8*
  store i8 %v1_e538, i8* %v4_e538, align 1
  %v0_e53c = load i32, i32* @r4, align 4
  %v1_e53c = trunc i32 %v0_e53c to i8
  %v2_e53c = load i32, i32* %ip.global-to-local, align 4
  %v3_e53c = add i32 %v2_e53c, 2
  %v4_e53c = inttoptr i32 %v3_e53c to i8*
  store i8 %v1_e53c, i8* %v4_e53c, align 1
  %v0_e540 = load i32, i32* %r0.global-to-local, align 4
  %v1_e540 = trunc i32 %v0_e540 to i8
  %v2_e540 = load i32, i32* %ip.global-to-local, align 4
  %v3_e540 = add i32 %v2_e540, 3
  %v4_e540 = inttoptr i32 %v3_e540 to i8*
  store i8 %v1_e540, i8* %v4_e540, align 1
  %v0_e544 = load i32, i32* %r0.global-to-local, align 4
  %v1_e544 = trunc i32 %v0_e544 to i8
  %v2_e544 = load i32, i32* %ip.global-to-local, align 4
  %v3_e544 = add i32 %v2_e544, 1
  %v4_e544 = inttoptr i32 %v3_e544 to i8*
  store i8 %v1_e544, i8* %v4_e544, align 1
  %v0_e54c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e54c, i32* %sl.global-to-local, align 4
  %v2_e554 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_e554, i32* @r6, align 4
  %v3_e58c = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_e5a8 = bitcast i8* %stack_var_-2240 to i32*
  %v2_e5f8 = ptrtoint i32* %stack_var_-36 to i32
  %v2_e624 = ptrtoint i32* %stack_var_-48 to i32
  %v6_e680 = bitcast i8* %stack_var_-4288 to i32*
  %v1_e6fc = add i32 %v2_e51c, 12
  %v1_e704 = inttoptr i32 %v1_e6fc to i8*
  %v1_e718 = add i32 %v2_e51c, 1
  %v2_e718 = inttoptr i32 %v1_e718 to i8*
  %v1_e734 = add i32 %v2_e51c, 6
  %v2_e734 = inttoptr i32 %v1_e734 to i8*
  %v1_e738 = add i32 %v2_e51c, 7
  %v2_e738 = inttoptr i32 %v1_e738 to i8*
  br label %dec_label_pc_e558

dec_label_pc_e558:                                ; preds = %dec_label_pc_e6ac, %dec_label_pc_e46c
  %v1_e55c = phi i32 [ %v0_e558.pre, %dec_label_pc_e6ac ], [ -1, %dec_label_pc_e46c ]
  %v7_e558 = icmp eq i32 %v1_e55c, -1
  store i1 %v7_e558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e558, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_e558
  store i32 %v1_e55c, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_e558, %bb125
  store i32 58724, i32* @lr, align 4
  %v1_e560 = xor i1 %v7_e558, true
  call void @__pseudo_cond_branch(i1 %v1_e560, i32 ptrtoint (i32* @global_var_122e0.97 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e570 = call i32 @function_12bfc(i32 2, i32 2, i32 0)
  store i32 %v3_e570, i32* %r0.global-to-local, align 4
  %v7_e574 = icmp eq i32 %v3_e570, -1
  store i1 %v7_e574, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e570, i32* @r7, align 4
  br i1 %v7_e574, label %dec_label_pc_e6ec, label %dec_label_pc_e580

dec_label_pc_e580:                                ; preds = %bb126
  store i32 %v2_e4c4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_e58c = call i32 @function_12a58(i32 %v3_e570, %sockaddr* %v3_e58c, i32 16)
  store i32 %v4_e58c, i32* %r0.global-to-local, align 4
  %v7_e590 = icmp eq i32 %v4_e58c, -1
  store i1 %v7_e590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e590, label %dec_label_pc_e6b4, label %dec_label_pc_e598

dec_label_pc_e598:                                ; preds = %dec_label_pc_e580
  %v0_e598 = load i32, i32* @r7, align 4
  store i32 %v0_e598, i32* %r0.global-to-local, align 4
  store i32 %v2_e414, i32* %r1.global-to-local, align 4
  store i32 %v1_e49c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e5a8 = call i32 @function_12b6c(i32 %v0_e598, i32* %v4_e5a8, i32 %v1_e49c, i32 16384)
  store i32 %v5_e5a8, i32* %r0.global-to-local, align 4
  %v7_e5ac = icmp eq i32 %v5_e5a8, -1
  store i1 %v7_e5ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5ac, label %dec_label_pc_e6b4, label %dec_label_pc_e5b4

dec_label_pc_e5b4:                                ; preds = %dec_label_pc_e598
  %v0_e5b4 = load i32, i32* @r7, align 4
  store i32 %v0_e5b4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e5c0 = call i32 @function_1221c(i32 3, i32 %v0_e5b4)
  store i32 0, i32* @r4, align 4
  %v1_e5c8 = or i32 %v2_e5c0, 2048
  store i32 %v1_e5c8, i32* @r2, align 4
  %v0_e5cc = load i32, i32* @r7, align 4
  store i32 %v0_e5cc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_e5d4 = call i32 @function_1221c(i32 4, i32 %v0_e5cc)
  store i32 %v2_e5d4, i32* %r0.global-to-local, align 4
  %v0_e5d8 = load i32, i32* @r4, align 4
  store i32 %v0_e5d8, i32* %r3.global-to-local, align 4
  %v2_e5dc154 = load i32, i32* @r6, align 4
  %v3_e5dc155 = add i32 %v2_e5dc154, %v0_e5d8
  %v4_e5dc156 = inttoptr i32 %v3_e5dc155 to i32*
  store i32 %v0_e5d8, i32* %v4_e5dc156, align 4
  %v0_e5e0157 = load i32, i32* %r3.global-to-local, align 4
  %v1_e5e0158 = add i32 %v0_e5e0157, 4
  store i32 %v1_e5e0158, i32* %r3.global-to-local, align 4
  %v7_e5e4159 = icmp eq i32 %v1_e5e0158, 128
  br i1 %v7_e5e4159, label %dec_label_pc_e5ec, label %dec_label_pc_e5dc.dec_label_pc_e5dc_crit_edge

dec_label_pc_e5dc.dec_label_pc_e5dc_crit_edge:    ; preds = %dec_label_pc_e5b4, %dec_label_pc_e5dc.dec_label_pc_e5dc_crit_edge
  %v1_e5e0160 = phi i32 [ %v1_e5e0, %dec_label_pc_e5dc.dec_label_pc_e5dc_crit_edge ], [ %v1_e5e0158, %dec_label_pc_e5b4 ]
  %v0_e5dc.pre = load i32, i32* @r4, align 4
  %v2_e5dc = load i32, i32* @r6, align 4
  %v3_e5dc = add i32 %v2_e5dc, %v1_e5e0160
  %v4_e5dc = inttoptr i32 %v3_e5dc to i32*
  store i32 %v0_e5dc.pre, i32* %v4_e5dc, align 4
  %v0_e5e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e5e0 = add i32 %v0_e5e0, 4
  store i32 %v1_e5e0, i32* %r3.global-to-local, align 4
  %v7_e5e4 = icmp eq i32 %v1_e5e0, 128
  br i1 %v7_e5e4, label %dec_label_pc_e5ec, label %dec_label_pc_e5dc.dec_label_pc_e5dc_crit_edge

dec_label_pc_e5ec:                                ; preds = %dec_label_pc_e5dc.dec_label_pc_e5dc_crit_edge, %dec_label_pc_e5b4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e5ec = load i32, i32* @r7, align 4
  %v3_e5ec = udiv i32 %v0_e5ec, 32
  %v3_e5f4 = mul nuw nsw i32 %v3_e5ec, 4
  store i32 %v3_e5f4, i32* %r3.global-to-local, align 4
  store i32 %v2_e5f8, i32* %r2.global-to-local, align 4
  %v2_e5fc = add i32 %v3_e5f4, %v2_e5f8
  store i32 %v2_e5fc, i32* @r5, align 4
  %v1_e600 = add i32 %v2_e5fc, -156
  %v2_e600 = inttoptr i32 %v1_e600 to i32*
  %v3_e600 = load i32, i32* %v2_e600, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_e608 = urem i32 %v0_e5ec, 32
  store i32 %v1_e608, i32* @r8, align 4
  %v7_e60c = shl i32 1, %v1_e608
  %v8_e60c = or i32 %v3_e600, %v7_e60c
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_e60c, i32* %v2_e600, align 4
  %v0_e61c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e61c, i32* %stack_var_-48, align 4
  store i32 %v2_e624, i32* @lr, align 4
  store i32 %v2_e47c, i32* %ip.global-to-local, align 4
  %v0_e62c = load i32, i32* @r7, align 4
  %v1_e62c = load i32, i32* %r3.global-to-local, align 4
  %v2_e62c = add i32 %v1_e62c, %v0_e62c
  store i32 %v2_e62c, i32* %r0.global-to-local, align 4
  store i32 %v2_e554, i32* %r1.global-to-local, align 4
  %v0_e638 = load i32, i32* @r4, align 4
  store i32 %v0_e638, i32* %r2.global-to-local, align 4
  store i32 %v0_e638, i32* %r3.global-to-local, align 4
  %v5_e644 = call i32 @function_12500(i32 %v2_e62c, i32 %v2_e554, i32 %v0_e638, i32 %v0_e638, i32 %v2_e624)
  store i32 %v5_e644, i32* %r0.global-to-local, align 4
  %v7_e648 = icmp eq i32 %v5_e644, -1
  store i1 %v7_e648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e648, label %dec_label_pc_e6c4, label %dec_label_pc_e650

dec_label_pc_e650:                                ; preds = %dec_label_pc_e5ec
  %v2_e650 = icmp eq i32 %v5_e644, 0
  store i1 %v2_e650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e650, label %dec_label_pc_e6a4, label %dec_label_pc_e658

dec_label_pc_e658:                                ; preds = %dec_label_pc_e650
  %v0_e658 = load i32, i32* @r5, align 4
  %v1_e658 = add i32 %v0_e658, -156
  %v2_e658 = inttoptr i32 %v1_e658 to i32*
  %v3_e658 = load i32, i32* %v2_e658, align 4
  %v1_e65c = load i32, i32* @r8, align 4
  %v6_e65c = ashr i32 %v3_e658, %v1_e65c
  store i32 %v6_e65c, i32* %r3.global-to-local, align 4
  %v1_e660 = urem i32 %v6_e65c, 2
  %v2_e660 = icmp eq i32 %v1_e660, 0
  store i1 %v2_e660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e660, label %dec_label_pc_e6c4, label %dec_label_pc_e668

dec_label_pc_e668:                                ; preds = %dec_label_pc_e658
  store i32 %v2_e51c, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e674 = load i32, i32* @r7, align 4
  store i32 %v0_e674, i32* %r0.global-to-local, align 4
  %v0_e678 = load i32, i32* @r4, align 4
  %v7_e680 = call i32 @function_12b38(i32 %v0_e674, i32* %v6_e680, i32 2048, i32 16384, i32 %v0_e678, i32 %v0_e678)
  store i32 %v7_e680, i32* %r4.global-to-local, align 4
  %v0_e688 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_e688, i32* %r0.global-to-local, align 4
  %v1_e68c = inttoptr i32 %v0_e688 to i8*
  %v2_e68c = call i32 @function_119dc(i8* %v1_e68c)
  %v1_e690 = add i32 %v2_e68c, 17
  store i32 %v1_e690, i32* %r0.global-to-local, align 4
  %v0_e694 = load i32, i32* %r4.global-to-local, align 4
  %v3_e694 = icmp ult i32 %v0_e694, %v1_e690
  %v9_e694 = icmp eq i32 %v0_e694, %v1_e690
  store i1 %v9_e694, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_e694, label %dec_label_pc_e6a4, label %dec_label_pc_e6f8

dec_label_pc_e6a4:                                ; preds = %dec_label_pc_e668, %dec_label_pc_e6f8, %dec_label_pc_e734, %dec_label_pc_e650, %dec_label_pc_e6ec
  %v0_e6a4 = load i32, i32* %sl.global-to-local, align 4
  %v7_e6a4 = icmp eq i32 %v0_e6a4, 5
  store i1 %v7_e6a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6a4, label %dec_label_pc_e6c4, label %dec_label_pc_e6ac

dec_label_pc_e6ac:                                ; preds = %dec_label_pc_e6b4, %dec_label_pc_e6a4
  %v0_e6ac = phi i32 [ %v0_e6bc, %dec_label_pc_e6b4 ], [ %v0_e6a4, %dec_label_pc_e6a4 ]
  %v1_e6ac = add i32 %v0_e6ac, 1
  store i32 %v1_e6ac, i32* %sl.global-to-local, align 4
  %v0_e558.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_e558

dec_label_pc_e6b4:                                ; preds = %dec_label_pc_e598, %dec_label_pc_e580
  %v0_e6b4 = phi i32 [ %v5_e5a8, %dec_label_pc_e598 ], [ %v4_e58c, %dec_label_pc_e580 ]
  %v1_e6b4 = add i32 %v0_e6b4, 2
  store i32 %v1_e6b4, i32* %r0.global-to-local, align 4
  %v1_e6b8 = call i32 @function_13718(i32 %v1_e6b4)
  store i32 %v1_e6b8, i32* %r0.global-to-local, align 4
  %v0_e6bc = load i32, i32* %sl.global-to-local, align 4
  %v7_e6bc = icmp eq i32 %v0_e6bc, 5
  store i1 %v7_e6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6bc, label %dec_label_pc_e6c4, label %dec_label_pc_e6ac

dec_label_pc_e6c4:                                ; preds = %dec_label_pc_e6b4, %dec_label_pc_e6a4, %dec_label_pc_e658, %dec_label_pc_e5ec, %dec_label_pc_e744, %dec_label_pc_e750.backedge
  %v0_e6c4 = load i32, i32* @r7, align 4
  store i32 %v0_e6c4, i32* %r0.global-to-local, align 4
  %v1_e6c8 = call i32 @function_122e0(i32 %v0_e6c4)
  store i32 %v1_e6c8, i32* %r0.global-to-local, align 4
  store i32 %v2_e3fc, i32* %r2.global-to-local, align 4
  %v2_e6d0 = load i8, i8* %v3_e3fc, align 1
  %v3_e6d0 = zext i8 %v2_e6d0 to i32
  store i32 %v3_e6d0, i32* @r4, align 4
  %v2_e6d4 = icmp eq i8 %v2_e6d0, 0
  store i1 %v2_e6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e6d4, label %dec_label_pc_e830, label %dec_label_pc_e6dc

dec_label_pc_e6dc:                                ; preds = %dec_label_pc_e6c4, %dec_label_pc_e830
  %stack_var_-4300.0 = phi i8* [ %v5_e844, %dec_label_pc_e830 ], [ %v3_e3fc, %dec_label_pc_e6c4 ]
  %v4_e6dc = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_e6dc, i32* %r0.global-to-local, align 4
  %v2_e6e8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e6e8, i32* @r4, align 4
  store i32 %v6_e3e4, i32* @r5, align 4
  store i32 %v9_e3e4, i32* @r6, align 4
  store i32 %v12_e3e4, i32* @r7, align 4
  store i32 %v15_e3e4, i32* @r8, align 4
  ret i32 %v4_e6dc

dec_label_pc_e6ec:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e6f0 = call i32 @function_13718(i32 1)
  store i32 %v1_e6f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e6a4

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e668
  store i32 %v2_e51c, i32* %lr.global-to-local, align 4
  store i32 %v1_e6fc, i32* %fp.global-to-local, align 4
  store i32 %v1_e6fc, i32* %r0.global-to-local, align 4
  %v2_e704 = call i32 @function_119dc(i8* %v1_e704)
  store i32 %v2_e704, i32* %r0.global-to-local, align 4
  store i32 %v2_e51c, i32* %ip.global-to-local, align 4
  store i32 %v2_e5f8, i32* %r1.global-to-local, align 4
  %v4_e714 = load i8, i8* %stack_var_-4288, align 1
  %v5_e714 = sext i8 %v4_e714 to i32
  store i32 %v5_e714, i32* %r3.global-to-local, align 4
  %v3_e718 = load i8, i8* %v2_e718, align 1
  %v4_e718 = zext i8 %v3_e718 to i32
  store i32 %v4_e718, i32* %r2.global-to-local, align 4
  store i32 %v4_e4d0, i32* @lr, align 4
  %v4_e720 = mul nuw nsw i32 %v4_e718, 256
  %v5_e720 = or i32 %v4_e720, %v5_e714
  store i32 %v5_e720, i32* %r3.global-to-local, align 4
  %v0_e724 = load i32, i32* %fp.global-to-local, align 4
  %v9_e728 = icmp eq i32 %v5_e720, %v4_e4d0
  store i1 %v9_e728, i1* %cpsr_z.global-to-local, align 1
  %v2_e724 = add i32 %v2_e704, 5
  %v1_e72c = add i32 %v2_e724, %v0_e724
  store i32 %v1_e72c, i32* %r0.global-to-local, align 4
  br i1 %v9_e728, label %dec_label_pc_e734, label %dec_label_pc_e6a4

dec_label_pc_e734:                                ; preds = %dec_label_pc_e6f8
  %v3_e734 = load i8, i8* %v2_e734, align 1
  %v4_e734 = zext i8 %v3_e734 to i32
  store i32 %v4_e734, i32* %r2.global-to-local, align 4
  %v3_e738 = load i8, i8* %v2_e738, align 1
  %v4_e738 = zext i8 %v3_e738 to i32
  store i32 %v4_e738, i32* %r3.global-to-local, align 4
  %v4_e73c = mul nuw nsw i32 %v4_e738, 256
  %v5_e73c = or i32 %v4_e73c, %v4_e734
  store i32 %v5_e73c, i32* %r2.global-to-local, align 4
  %v7_e73c = icmp eq i32 %v5_e73c, 0
  store i1 %v7_e73c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e73c, label %dec_label_pc_e6a4, label %dec_label_pc_e744

dec_label_pc_e744:                                ; preds = %dec_label_pc_e734
  %v3_e748 = mul nuw nsw i32 %v4_e734, 256
  %v5_e74c = or i32 %v4_e738, %v3_e748
  %v1_e804 = add i32 %v2_e51c, -49152
  %v1_e750143 = add nsw i32 %v5_e74c, -1
  %v3_e754144 = mul i32 %v1_e750143, 65536
  store i32 %v3_e754144, i32* %r3.global-to-local, align 4
  %v7_e758150 = icmp eq i32 %v3_e754144, -65536
  store i1 %v7_e758150, i1* %cpsr_z.global-to-local, align 1
  %v3_e75c151 = urem i32 %v1_e750143, 65536
  store i32 %v3_e75c151, i32* @r6, align 4
  br i1 %v7_e758150, label %dec_label_pc_e6c4, label %dec_label_pc_e764.lr.ph

dec_label_pc_e764.lr.ph:                          ; preds = %dec_label_pc_e744
  %v1_e8e0 = add i32 %v2_e3fc, 4
  %v2_e8e0 = inttoptr i32 %v1_e8e0 to i32*
  br label %dec_label_pc_e764

dec_label_pc_e764:                                ; preds = %dec_label_pc_e764.lr.ph, %dec_label_pc_e750.backedge
  %v3_e75c153 = phi i32 [ %v3_e75c151, %dec_label_pc_e764.lr.ph ], [ %v3_e75c, %dec_label_pc_e750.backedge ]
  %v0_e7b8152 = phi i32 [ %v1_e72c, %dec_label_pc_e764.lr.ph ], [ %storemerge, %dec_label_pc_e750.backedge ]
  store i32 %v0_e7b8152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_e77017 = inttoptr i32 %v0_e7b8152 to i8*
  %v2_e77018 = load i8, i8* %v1_e77017, align 1
  %v3_e77019 = zext i8 %v2_e77018 to i32
  store i32 %v3_e77019, i32* %r2.global-to-local, align 4
  %v2_e77420 = icmp eq i8 %v2_e77018, 0
  store i1 %v2_e77420, i1* %cpsr_z.global-to-local, align 1
  %v3_e77821 = mul nuw nsw i32 %v3_e77019, 256
  store i32 %v3_e77821, i32* %r1.global-to-local, align 4
  br i1 %v2_e77420, label %dec_label_pc_e7b0, label %dec_label_pc_e780.preheader

dec_label_pc_e780.preheader:                      ; preds = %dec_label_pc_e764, %dec_label_pc_e770.backedge
  %v1_e854 = phi i32 [ %v1_e85449, %dec_label_pc_e770.backedge ], [ 1, %dec_label_pc_e764 ]
  %v0_e84c47 = phi i32 [ %v0_e84c, %dec_label_pc_e770.backedge ], [ 0, %dec_label_pc_e764 ]
  %v0_e78c45 = phi i32 [ %v3_e778, %dec_label_pc_e770.backedge ], [ %v3_e77821, %dec_label_pc_e764 ]
  %v0_e78843 = phi i32 [ %v1_e850, %dec_label_pc_e770.backedge ], [ %v0_e7b8152, %dec_label_pc_e764 ]
  %v0_e78041 = phi i32 [ %v3_e770, %dec_label_pc_e770.backedge ], [ %v3_e77019, %dec_label_pc_e764 ]
  br label %dec_label_pc_e780

dec_label_pc_e780:                                ; preds = %dec_label_pc_e780.preheader, %dec_label_pc_e788
  %v0_e84c = phi i32 [ %v0_e84c47, %dec_label_pc_e780.preheader ], [ 1, %dec_label_pc_e788 ]
  %v0_e78c = phi i32 [ %v0_e78c45, %dec_label_pc_e780.preheader ], [ %v3_e7a8, %dec_label_pc_e788 ]
  %v0_e850 = phi i32 [ %v0_e78843, %dec_label_pc_e780.preheader ], [ %v2_e798, %dec_label_pc_e788 ]
  %v0_e780 = phi i32 [ %v0_e78041, %dec_label_pc_e780.preheader ], [ %v3_e79c, %dec_label_pc_e788 ]
  %v7_e780 = icmp eq i32 %v0_e780, 191
  store i1 %v7_e780, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_e780, 192
  br i1 %tmp180, label %dec_label_pc_e84c, label %dec_label_pc_e788

dec_label_pc_e788:                                ; preds = %dec_label_pc_e780
  %v1_e788 = add i32 %v0_e850, 1
  %v2_e788 = inttoptr i32 %v1_e788 to i8*
  %v3_e788 = load i8, i8* %v2_e788, align 1
  %v4_e788 = zext i8 %v3_e788 to i32
  store i32 %v2_e51c, i32* %r1.global-to-local, align 4
  %v2_e78c = add i32 %v0_e78c, %v1_e804
  %v2_e798 = add i32 %v2_e78c, %v4_e788
  store i32 %v2_e798, i32* %r3.global-to-local, align 4
  %v1_e79c = inttoptr i32 %v2_e798 to i8*
  %v2_e79c = load i8, i8* %v1_e79c, align 1
  %v3_e79c = zext i8 %v2_e79c to i32
  store i32 %v3_e79c, i32* %r2.global-to-local, align 4
  %v2_e7a0 = icmp eq i8 %v2_e79c, 0
  store i1 %v2_e7a0, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_e7a8 = mul nuw nsw i32 %v3_e79c, 256
  store i32 %v3_e7a8, i32* %r1.global-to-local, align 4
  br i1 %v2_e7a0, label %dec_label_pc_e7b0, label %dec_label_pc_e780

dec_label_pc_e7b0:                                ; preds = %dec_label_pc_e770.backedge, %dec_label_pc_e788, %dec_label_pc_e764
  %v1_e7b4 = phi i32 [ 1, %dec_label_pc_e764 ], [ %v1_e854, %dec_label_pc_e788 ], [ %v1_e85449, %dec_label_pc_e770.backedge ]
  %v0_e7b0 = phi i32 [ 0, %dec_label_pc_e764 ], [ 1, %dec_label_pc_e788 ], [ %v0_e84c, %dec_label_pc_e770.backedge ]
  %v7_e7b0 = icmp eq i32 %v0_e7b0, 1
  store i1 %v7_e7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7b0, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_e7b0
  %v2_e7b4 = add i32 %v1_e7b4, 1
  store i32 %v2_e7b4, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_e7b0, %bb127
  %v1_e7b8 = phi i32 [ %v1_e7b4, %dec_label_pc_e7b0 ], [ %v2_e7b4, %bb127 ]
  %v2_e7b8 = add i32 %v1_e7b8, %v0_e7b8152
  store i32 %v2_e7b8, i32* @r4, align 4
  %v3_e7bc = inttoptr i32 %v2_e7b8 to i8*
  %v4_e7bc = load i8, i8* %v3_e7bc, align 1
  %v6_e7bc = zext i8 %v4_e7bc to i32
  store i32 %v6_e7bc, i32* %r3.global-to-local, align 4
  %v1_e7c0 = add i32 %v2_e7b8, 1
  %v2_e7c0 = inttoptr i32 %v1_e7c0 to i8*
  %v3_e7c0 = load i8, i8* %v2_e7c0, align 1
  %v4_e7c0 = zext i8 %v3_e7c0 to i32
  store i32 %v4_e7c0, i32* %r2.global-to-local, align 4
  %v4_e7c4 = mul nuw nsw i32 %v4_e7c0, 256
  %v5_e7c4 = or i32 %v4_e7c4, %v6_e7bc
  store i32 %v5_e7c4, i32* %r3.global-to-local, align 4
  %v7_e7c8 = icmp eq i32 %v5_e7c4, 256
  store i1 %v7_e7c8, i1* %cpsr_z.global-to-local, align 1
  %v1_e7cc = add i32 %v2_e7b8, 10
  store i32 %v1_e7cc, i32* @r5, align 4
  br i1 %v7_e7c8, label %dec_label_pc_e86c, label %dec_label_pc_e7d4

dec_label_pc_e7d4:                                ; preds = %dec_label_pc_e86c, %bb128
  store i32 %v1_e7cc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e7e023 = inttoptr i32 %v1_e7cc to i8*
  %v2_e7e024 = load i8, i8* %v1_e7e023, align 1
  %v3_e7e025 = zext i8 %v2_e7e024 to i32
  store i32 %v3_e7e025, i32* %r2.global-to-local, align 4
  %v2_e7e426 = icmp eq i8 %v2_e7e024, 0
  store i1 %v2_e7e426, i1* %cpsr_z.global-to-local, align 1
  %v3_e7e827 = mul nuw nsw i32 %v3_e7e025, 256
  store i32 %v3_e7e827, i32* %r1.global-to-local, align 4
  br i1 %v2_e7e426, label %dec_label_pc_e820, label %dec_label_pc_e7f0.preheader

dec_label_pc_e7f0.preheader:                      ; preds = %dec_label_pc_e7d4, %dec_label_pc_e7e0.backedge
  %v1_e864 = phi i32 [ %v1_e86464, %dec_label_pc_e7e0.backedge ], [ 1, %dec_label_pc_e7d4 ]
  %v0_e85c62 = phi i32 [ %v0_e85c, %dec_label_pc_e7e0.backedge ], [ 0, %dec_label_pc_e7d4 ]
  %v0_e7fc60 = phi i32 [ %v3_e7e8, %dec_label_pc_e7e0.backedge ], [ %v3_e7e827, %dec_label_pc_e7d4 ]
  %v0_e7f858 = phi i32 [ %v1_e860, %dec_label_pc_e7e0.backedge ], [ %v1_e7cc, %dec_label_pc_e7d4 ]
  %v0_e7f056 = phi i32 [ %v3_e7e0, %dec_label_pc_e7e0.backedge ], [ %v3_e7e025, %dec_label_pc_e7d4 ]
  br label %dec_label_pc_e7f0

dec_label_pc_e7f0:                                ; preds = %dec_label_pc_e7f0.preheader, %dec_label_pc_e7f8
  %v0_e85c = phi i32 [ %v0_e85c62, %dec_label_pc_e7f0.preheader ], [ 1, %dec_label_pc_e7f8 ]
  %v0_e7fc = phi i32 [ %v0_e7fc60, %dec_label_pc_e7f0.preheader ], [ %v3_e818, %dec_label_pc_e7f8 ]
  %v0_e860 = phi i32 [ %v0_e7f858, %dec_label_pc_e7f0.preheader ], [ %v2_e808, %dec_label_pc_e7f8 ]
  %v0_e7f0 = phi i32 [ %v0_e7f056, %dec_label_pc_e7f0.preheader ], [ %v3_e80c, %dec_label_pc_e7f8 ]
  %v7_e7f0 = icmp eq i32 %v0_e7f0, 191
  store i1 %v7_e7f0, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_e7f0, 192
  br i1 %tmp181, label %dec_label_pc_e85c, label %dec_label_pc_e7f8

dec_label_pc_e7f8:                                ; preds = %dec_label_pc_e7f0
  %v1_e7f8 = add i32 %v0_e860, 1
  %v2_e7f8 = inttoptr i32 %v1_e7f8 to i8*
  %v3_e7f8 = load i8, i8* %v2_e7f8, align 1
  %v4_e7f8 = zext i8 %v3_e7f8 to i32
  store i32 %v2_e51c, i32* %r1.global-to-local, align 4
  %v2_e7fc = add i32 %v0_e7fc, %v1_e804
  %v2_e808 = add i32 %v2_e7fc, %v4_e7f8
  store i32 %v2_e808, i32* %r3.global-to-local, align 4
  %v1_e80c = inttoptr i32 %v2_e808 to i8*
  %v2_e80c = load i8, i8* %v1_e80c, align 1
  %v3_e80c = zext i8 %v2_e80c to i32
  store i32 %v3_e80c, i32* %r2.global-to-local, align 4
  %v2_e810 = icmp eq i8 %v2_e80c, 0
  store i1 %v2_e810, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_e818 = mul nuw nsw i32 %v3_e80c, 256
  store i32 %v3_e818, i32* %r1.global-to-local, align 4
  br i1 %v2_e810, label %dec_label_pc_e820, label %dec_label_pc_e7f0

dec_label_pc_e820:                                ; preds = %dec_label_pc_e7e0.backedge, %dec_label_pc_e7f8, %dec_label_pc_e7d4
  %v1_e824 = phi i32 [ 1, %dec_label_pc_e7d4 ], [ %v1_e864, %dec_label_pc_e7f8 ], [ %v1_e86464, %dec_label_pc_e7e0.backedge ]
  %v0_e820 = phi i32 [ 0, %dec_label_pc_e7d4 ], [ 1, %dec_label_pc_e7f8 ], [ %v0_e85c, %dec_label_pc_e7e0.backedge ]
  %v7_e820 = icmp eq i32 %v0_e820, 1
  store i1 %v7_e820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e820, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_e820
  %v2_e824 = add i32 %v1_e824, 1
  store i32 %v2_e824, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_e820, %bb129
  %v1_e828 = phi i32 [ %v1_e824, %dec_label_pc_e820 ], [ %v2_e824, %bb129 ]
  %v2_e828 = add i32 %v1_e828, %v1_e7cc
  br label %dec_label_pc_e750.backedge

dec_label_pc_e750.backedge:                       ; preds = %bb130, %dec_label_pc_e914
  %v0_e750.pre = phi i32 [ %v3_e75c153, %bb130 ], [ %v0_e750.pre.pre, %dec_label_pc_e914 ]
  %storemerge = phi i32 [ %v2_e828, %bb130 ], [ %v2_e928, %dec_label_pc_e914 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_e750 = add i32 %v0_e750.pre, -1
  %v3_e754 = mul i32 %v1_e750, 65536
  store i32 %v3_e754, i32* %r3.global-to-local, align 4
  %v7_e758 = icmp eq i32 %v3_e754, -65536
  store i1 %v7_e758, i1* %cpsr_z.global-to-local, align 1
  %v3_e75c = urem i32 %v1_e750, 65536
  store i32 %v3_e75c, i32* @r6, align 4
  br i1 %v7_e758, label %dec_label_pc_e6c4, label %dec_label_pc_e764

dec_label_pc_e830:                                ; preds = %dec_label_pc_e6c4
  %v1_e830 = add i32 %v2_e3fc, 4
  %v2_e830 = inttoptr i32 %v1_e830 to i32*
  %v3_e830 = load i32, i32* %v2_e830, align 4
  store i32 %v3_e830, i32* %r0.global-to-local, align 4
  %v2_e834 = icmp eq i32 %v3_e830, 0
  store i1 %v2_e834, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_e83c.117 to i32), i32* @lr, align 4
  %v1_e838 = xor i1 %v2_e834, true
  call void @__pseudo_cond_branch(i1 %v1_e838, i32 ptrtoint (i32* @global_var_12f40.20 to i32))
  store i32 %v2_e3fc, i32* @r0, align 4
  %v0_e840 = call i32 @function_12f40()
  store i32 %v0_e840, i32* %r0.global-to-local, align 4
  %v0_e844 = load i32, i32* @r4, align 4
  %v5_e844 = inttoptr i32 %v0_e844 to i8*
  br label %dec_label_pc_e6dc

dec_label_pc_e84c:                                ; preds = %dec_label_pc_e780
  %v2_e84c = icmp eq i32 %v0_e84c, 0
  store i1 %v2_e84c, i1* %cpsr_z.global-to-local, align 1
  %v1_e850 = add i32 %v0_e850, 1
  store i32 %v1_e850, i32* %r3.global-to-local, align 4
  br i1 %v2_e84c, label %bb131, label %dec_label_pc_e770.backedge

dec_label_pc_e770.backedge:                       ; preds = %dec_label_pc_e84c, %bb131
  %v1_e85449 = phi i32 [ %v1_e854, %dec_label_pc_e84c ], [ %v2_e854, %bb131 ]
  %v1_e770 = inttoptr i32 %v1_e850 to i8*
  %v2_e770 = load i8, i8* %v1_e770, align 1
  %v3_e770 = zext i8 %v2_e770 to i32
  store i32 %v3_e770, i32* %r2.global-to-local, align 4
  %v2_e774 = icmp eq i8 %v2_e770, 0
  store i1 %v2_e774, i1* %cpsr_z.global-to-local, align 1
  %v3_e778 = mul nuw nsw i32 %v3_e770, 256
  store i32 %v3_e778, i32* %r1.global-to-local, align 4
  br i1 %v2_e774, label %dec_label_pc_e7b0, label %dec_label_pc_e780.preheader

bb131:                                            ; preds = %dec_label_pc_e84c
  %v2_e854 = add i32 %v1_e854, 1
  store i32 %v2_e854, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_e770.backedge

dec_label_pc_e85c:                                ; preds = %dec_label_pc_e7f0
  %v2_e85c = icmp eq i32 %v0_e85c, 0
  store i1 %v2_e85c, i1* %cpsr_z.global-to-local, align 1
  %v1_e860 = add i32 %v0_e860, 1
  store i32 %v1_e860, i32* %r3.global-to-local, align 4
  br i1 %v2_e85c, label %bb132, label %dec_label_pc_e7e0.backedge

dec_label_pc_e7e0.backedge:                       ; preds = %dec_label_pc_e85c, %bb132
  %v1_e86464 = phi i32 [ %v1_e864, %dec_label_pc_e85c ], [ %v2_e864, %bb132 ]
  %v1_e7e0 = inttoptr i32 %v1_e860 to i8*
  %v2_e7e0 = load i8, i8* %v1_e7e0, align 1
  %v3_e7e0 = zext i8 %v2_e7e0 to i32
  store i32 %v3_e7e0, i32* %r2.global-to-local, align 4
  %v2_e7e4 = icmp eq i8 %v2_e7e0, 0
  store i1 %v2_e7e4, i1* %cpsr_z.global-to-local, align 1
  %v3_e7e8 = mul nuw nsw i32 %v3_e7e0, 256
  store i32 %v3_e7e8, i32* %r1.global-to-local, align 4
  br i1 %v2_e7e4, label %dec_label_pc_e820, label %dec_label_pc_e7f0.preheader

bb132:                                            ; preds = %dec_label_pc_e85c
  %v2_e864 = add i32 %v1_e864, 1
  store i32 %v2_e864, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e7e0.backedge

dec_label_pc_e86c:                                ; preds = %bb128
  %v1_e86c = add i32 %v2_e7b8, 2
  %v2_e86c = inttoptr i32 %v1_e86c to i8*
  %v3_e86c = load i8, i8* %v2_e86c, align 1
  %v4_e86c = zext i8 %v3_e86c to i32
  store i32 %v4_e86c, i32* %r3.global-to-local, align 4
  %v1_e870 = add i32 %v2_e7b8, 3
  %v2_e870 = inttoptr i32 %v1_e870 to i8*
  %v3_e870 = load i8, i8* %v2_e870, align 1
  %v4_e870 = zext i8 %v3_e870 to i32
  store i32 %v4_e870, i32* %r2.global-to-local, align 4
  %v4_e874 = mul nuw nsw i32 %v4_e870, 256
  %v5_e874 = or i32 %v4_e874, %v4_e86c
  store i32 %v5_e874, i32* %r3.global-to-local, align 4
  %v7_e878 = icmp eq i32 %v5_e874, 256
  store i1 %v7_e878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e878, label %dec_label_pc_e880, label %dec_label_pc_e7d4

dec_label_pc_e880:                                ; preds = %dec_label_pc_e86c
  %v1_e880 = add i32 %v2_e7b8, 8
  %v2_e880 = inttoptr i32 %v1_e880 to i8*
  %v3_e880 = load i8, i8* %v2_e880, align 1
  %v4_e880 = zext i8 %v3_e880 to i32
  store i32 %v4_e880, i32* %r1.global-to-local, align 4
  %v1_e884 = add i32 %v2_e7b8, 9
  %v2_e884 = inttoptr i32 %v1_e884 to i8*
  %v3_e884 = load i8, i8* %v2_e884, align 1
  %v4_e884 = zext i8 %v3_e884 to i32
  store i32 %v4_e884, i32* %r0.global-to-local, align 4
  %v4_e888 = mul nuw nsw i32 %v4_e884, 256
  %v5_e888 = or i32 %v4_e888, %v4_e880
  %v3_e88c = mul i32 %v5_e888, 65536
  store i32 %v3_e88c, i32* %r2.global-to-local, align 4
  %v3_e890 = mul nuw nsw i32 %v4_e880, 256
  %v5_e898 = or i32 %v4_e884, %v3_e890
  store i32 %v5_e898, i32* %r3.global-to-local, align 4
  %v7_e89c = icmp eq i32 %v5_e898, 4
  store i1 %v7_e89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e89c, label %dec_label_pc_e8a4, label %dec_label_pc_e914

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e880
  %v2_e8a4 = inttoptr i32 %v1_e7cc to i8*
  %v3_e8a4 = load i8, i8* %v2_e8a4, align 1
  %v4_e8a4 = zext i8 %v3_e8a4 to i32
  store i32 %v4_e8a4, i32* %r3.global-to-local, align 4
  store i32 %v2_e47c, i32* %r2.global-to-local, align 4
  %v1_e8b0 = add i32 %v2_e7b8, 11
  %v2_e8b0 = inttoptr i32 %v1_e8b0 to i8*
  %v3_e8b0 = load i8, i8* %v2_e8b0, align 1
  %v4_e8b0 = zext i8 %v3_e8b0 to i32
  store i32 %v4_e8b0, i32* %r2.global-to-local, align 4
  store i32 %v2_e47c, i32* %r3.global-to-local, align 4
  %v1_e8bc = add i32 %v2_e7b8, 12
  %v2_e8bc = inttoptr i32 %v1_e8bc to i8*
  %v3_e8bc = load i8, i8* %v2_e8bc, align 1
  %v4_e8bc = zext i8 %v3_e8bc to i32
  store i32 %v4_e8bc, i32* %r3.global-to-local, align 4
  store i32 %v2_e47c, i32* %ip.global-to-local, align 4
  %v1_e8c8 = add i32 %v2_e7b8, 13
  %v2_e8c8 = inttoptr i32 %v1_e8c8 to i8*
  %v3_e8c8 = load i8, i8* %v2_e8c8, align 1
  %v4_e8c8 = zext i8 %v3_e8c8 to i32
  store i32 %v4_e8c8, i32* %r2.global-to-local, align 4
  store i32 %v2_e3fc, i32* @lr, align 4
  %v2_e8d4 = load i8, i8* %v3_e3fc, align 1
  %v3_e8d4 = zext i8 %v2_e8d4 to i32
  %v3_e8d8 = mul nuw nsw i32 %v3_e8d4, 4
  %v1_e8dc = add nuw nsw i32 %v3_e8d8, 4
  store i32 %v1_e8dc, i32* %r1.global-to-local, align 4
  %v3_e8e0 = load i32, i32* %v2_e8e0, align 4
  store i32 %v3_e8e0, i32* %r0.global-to-local, align 4
  %v3_e8e4 = sext i8 %v3_e8c8 to i32
  %v5_e8e4 = sext i8 %v3_e8bc to i32
  %v10_e8e4 = call i32 @function_13030(i32 %v3_e8e0, i32 %v1_e8dc, i32 %v3_e8e4, i32 %v5_e8e4)
  store i32 %v10_e8e4, i32* %r0.global-to-local, align 4
  store i32 %v2_e3fc, i32* %r1.global-to-local, align 4
  store i32 %v2_e47c, i32* %ip.global-to-local, align 4
  %v2_e8f0 = load i8, i8* %v3_e3fc, align 1
  %v3_e8f0 = zext i8 %v2_e8f0 to i32
  store i32 %v3_e8f0, i32* %r2.global-to-local, align 4
  %v4_e8f4 = sext i8 %v3_e8a4 to i32
  store i32 %v4_e8f4, i32* %r3.global-to-local, align 4
  store i32 %v2_e3fc, i32* @lr, align 4
  %v1_e8fc = add nuw nsw i32 %v3_e8f0, 1
  store i32 %v1_e8fc, i32* %r1.global-to-local, align 4
  %v5_e900 = mul nuw nsw i32 %v3_e8f0, 4
  %v6_e900 = add i32 %v5_e900, %v10_e8e4
  %v7_e900 = inttoptr i32 %v6_e900 to i32*
  store i32 %v4_e8f4, i32* %v7_e900, align 4
  %v1_e904 = load i32, i32* @lr, align 4
  %v2_e904 = add i32 %v1_e904, 4
  %v3_e904 = inttoptr i32 %v2_e904 to i32*
  store i32 %v10_e8e4, i32* %v3_e904, align 4
  %v0_e908 = load i32, i32* %r1.global-to-local, align 4
  %v1_e908 = trunc i32 %v0_e908 to i8
  %v2_e908 = load i32, i32* @lr, align 4
  %v3_e908 = inttoptr i32 %v2_e908 to i8*
  store i8 %v1_e908, i8* %v3_e908, align 1
  %v0_e90c = load i32, i32* @r4, align 4
  %v1_e90c = add i32 %v0_e90c, 9
  %v2_e90c = inttoptr i32 %v1_e90c to i8*
  %v3_e90c = load i8, i8* %v2_e90c, align 1
  %v4_e90c = zext i8 %v3_e90c to i32
  store i32 %v4_e90c, i32* %r0.global-to-local, align 4
  %v1_e910 = add i32 %v0_e90c, 8
  %v2_e910 = inttoptr i32 %v1_e910 to i8*
  %v3_e910 = load i8, i8* %v2_e910, align 1
  %v4_e910 = zext i8 %v3_e910 to i32
  store i32 %v4_e910, i32* %r1.global-to-local, align 4
  %v0_e928.pre = load i32, i32* @r5, align 4
  %v0_e750.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e914

dec_label_pc_e914:                                ; preds = %dec_label_pc_e880, %dec_label_pc_e8a4
  %v0_e750.pre.pre = phi i32 [ %v3_e75c153, %dec_label_pc_e880 ], [ %v0_e750.pre.pre.pre, %dec_label_pc_e8a4 ]
  %v0_e928 = phi i32 [ %v1_e7cc, %dec_label_pc_e880 ], [ %v0_e928.pre, %dec_label_pc_e8a4 ]
  %v1_e914 = phi i32 [ %v4_e884, %dec_label_pc_e880 ], [ %v4_e90c, %dec_label_pc_e8a4 ]
  %v0_e914 = phi i32 [ %v4_e880, %dec_label_pc_e880 ], [ %v4_e910, %dec_label_pc_e8a4 ]
  %v4_e914 = mul nuw nsw i32 %v1_e914, 256
  %v5_e914 = or i32 %v4_e914, %v0_e914
  %v3_e918 = mul i32 %v5_e914, 65536
  store i32 %v3_e918, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_e914, 256
  %v5_e924 = or i32 %tmp133, %v1_e914
  store i32 %v5_e924, i32* %r3.global-to-local, align 4
  %v2_e928 = add i32 %v5_e924, %v0_e928
  br label %dec_label_pc_e750.backedge

; uselistorder directives
  uselistorder i32 %v1_e914, { 1, 0 }
  uselistorder i32 %v3_e8f0, { 1, 0, 2 }
  uselistorder i32 %v10_e8e4, { 1, 0, 2 }
  uselistorder i32 %v4_e884, { 2, 1, 0, 3 }
  uselistorder i32 %v4_e880, { 2, 0, 1, 3 }
  uselistorder i32 %v2_e864, { 1, 0 }
  uselistorder i32 %v3_e7e0, { 0, 2, 1 }
  uselistorder i32 %v1_e86464, { 1, 0 }
  uselistorder i32 %v1_e860, { 1, 2, 0 }
  uselistorder i32 %v2_e854, { 1, 0 }
  uselistorder i32 %v3_e770, { 0, 2, 1 }
  uselistorder i32 %v1_e85449, { 1, 0 }
  uselistorder i32 %v1_e850, { 1, 2, 0 }
  uselistorder i1 %v7_e758, { 1, 0 }
  uselistorder i32 %v1_e750, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_e80c, { 0, 2, 1 }
  uselistorder i32 %v2_e808, { 1, 2, 0 }
  uselistorder i32 %v0_e85c, { 2, 0, 1 }
  uselistorder i32 %v1_e864, { 1, 2, 0 }
  uselistorder i32 %v3_e7e827, { 1, 0 }
  uselistorder i32 %v3_e7e025, { 1, 0, 2 }
  uselistorder i32 %v1_e7cc, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_e7b8, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_e79c, { 0, 2, 1 }
  uselistorder i32 %v2_e798, { 1, 2, 0 }
  uselistorder i32 %v0_e84c, { 2, 0, 1 }
  uselistorder i32 %v1_e854, { 1, 2, 0 }
  uselistorder i32 %v3_e77821, { 1, 0 }
  uselistorder i32 %v3_e77019, { 1, 0, 2 }
  uselistorder i32 %v0_e7b8152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_e75c151, { 1, 0 }
  uselistorder i1 %v7_e758150, { 1, 0 }
  uselistorder i32 %v1_e750143, { 1, 0 }
  uselistorder i32 %v4_e738, { 1, 0, 2 }
  uselistorder i32 %v0_e6bc, { 1, 0 }
  uselistorder i32 %v0_e694, { 1, 0 }
  uselistorder i1 %v7_e648, { 1, 0 }
  uselistorder i32 %v5_e644, { 1, 0, 2 }
  uselistorder i32 %v1_e608, { 1, 0 }
  uselistorder i32 %v3_e5f4, { 1, 0 }
  uselistorder i32 %v0_e5ec, { 1, 0 }
  uselistorder i32 %v1_e5e0, { 1, 2, 0 }
  uselistorder i1 %v7_e5ac, { 1, 0 }
  uselistorder i32 %v5_e5a8, { 1, 0, 2 }
  uselistorder i1 %v7_e590, { 1, 0 }
  uselistorder i32 %v4_e58c, { 1, 0, 2 }
  uselistorder i1 %v7_e574, { 1, 0 }
  uselistorder i32 %v3_e570, { 2, 1, 0, 3 }
  uselistorder i1 %v7_e558, { 2, 1, 0 }
  uselistorder i32 %v1_e55c, { 1, 0 }
  uselistorder i32 %v1_e6fc, { 1, 2, 0 }
  uselistorder i32 %v2_e5f8, { 1, 0, 2 }
  uselistorder i32 %v2_e554, { 1, 0, 2 }
  uselistorder i32 %v2_e51c, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_e4d0, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e49c, { 1, 0, 2 }
  uselistorder i32 %v0_e458, { 0, 1, 3, 2 }
  uselistorder i32 %v1_e454, { 1, 0, 2 }
  uselistorder i32 %v1_e450, { 1, 0 }
  uselistorder i32 %v2_e44411, { 1, 0 }
  uselistorder i32 %v2_e444, { 1, 0 }
  uselistorder i1 %v8_e434, { 1, 0 }
  uselistorder i32 %v2_e41c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_e404, { 1, 0 }
  uselistorder i32 %v2_e3fc, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 29, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 27, 9, 10, 26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 23, 29, 25 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 47, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 39, 38, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 6, 7, 34, 9, 10, 11, 12, 33, 36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 35, 24, 25, 26, 27, 32, 30, 28, 29, 31, 37 }
  uselistorder i32 (i32)* @function_13718, { 6, 5, 10, 9, 8, 7, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e914, { 1, 0 }
  uselistorder label %dec_label_pc_e7e0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e770.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e750.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_e7f0, { 1, 0 }
  uselistorder label %dec_label_pc_e7f0.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_e780, { 1, 0 }
  uselistorder label %dec_label_pc_e780.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e764, { 1, 0 }
  uselistorder label %dec_label_pc_e6dc, { 1, 0 }
  uselistorder label %dec_label_pc_e6c4, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e6a4, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_e5dc.dec_label_pc_e5dc_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e42c, { 1, 0 }
}

define i32 @function_e930(i32 %arg1) local_unnamed_addr {
dec_label_pc_e930:
  %v2_e934 = load i32, i32* @global_var_1d924.119, align 4
  %v2_e93c = call i32 @function_123e0(i32 %v2_e934, i32 9)
  %v0_e940 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e940, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e930
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e930, %bb
  ret i32 %v2_e93c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e944() local_unnamed_addr {
dec_label_pc_e944:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e944 = load i32, i32* @r4, align 4
  store i32 %v3_e944, i32* %stack_var_-16, align 4
  %v0_e948 = load i32, i32* @r0, align 4
  store i32 %v0_e948, i32* %r5.global-to-local, align 4
  %v1_e94c = add i32 %v0_e948, 4
  %v2_e94c = inttoptr i32 %v1_e94c to i32*
  %v3_e94c = load i32, i32* %v2_e94c, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 59760, i32* @lr, align 4
  %v1_e96c = icmp ne i32 %v3_e94c, -1
  call void @__pseudo_cond_branch(i1 %v1_e96c, i32 ptrtoint (i32* @global_var_122e0.97 to i32))
  %v3_e97c = call i32 @function_12bfc(i32 2, i32 1, i32 0)
  store i32 %v3_e97c, i32* %r3.global-to-local, align 4
  %v7_e984 = icmp eq i32 %v3_e97c, -1
  store i32 256, i32* @r1, align 4
  %v0_e98c = load i32, i32* %r5.global-to-local, align 4
  %v1_e98c = add i32 %v0_e98c, 28
  store i32 %v1_e98c, i32* @r0, align 4
  %v2_e990 = add i32 %v0_e98c, 4
  %v3_e990 = inttoptr i32 %v2_e990 to i32*
  store i32 %v3_e97c, i32* %v3_e990, align 4
  br i1 %v7_e984, label %dec_label_pc_e944.dec_label_pc_ea0c_crit_edge, label %dec_label_pc_e998

dec_label_pc_e944.dec_label_pc_ea0c_crit_edge:    ; preds = %dec_label_pc_e944
  %v14_ea10.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_ea0c

dec_label_pc_e998:                                ; preds = %dec_label_pc_e944
  %v0_e998 = load i32, i32* %r6.global-to-local, align 4
  %v1_e998 = load i32, i32* %r5.global-to-local, align 4
  %v2_e998 = add i32 %v1_e998, 24
  %v3_e998 = inttoptr i32 %v2_e998 to i32*
  store i32 %v0_e998, i32* %v3_e998, align 4
  %v0_e99c = call i32 @function_11a7c()
  %v0_e9a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_e9a0 = add i32 %v0_e9a0, 4
  %v2_e9a0 = inttoptr i32 %v1_e9a0 to i32*
  %v3_e9a0 = load i32, i32* %v2_e9a0, align 4
  store i32 %v3_e9a0, i32* @r4, align 4
  %v0_e9a8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e9a8, i32* @r2, align 4
  %v2_e9b0 = call i32 @function_1221c(i32 %v3_e9a0, i32 3)
  %v1_e9b8 = or i32 %v2_e9b0, 2048
  store i32 %v1_e9b8, i32* @r2, align 4
  %v0_e9bc = load i32, i32* @r4, align 4
  %v2_e9c0 = call i32 @function_1221c(i32 %v0_e9bc, i32 4)
  store i32 ptrtoint (i32* @global_var_1d8b8.121 to i32), i32* %r3.global-to-local, align 4
  %v0_e9c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_e9c8 = add i32 %v0_e9c8, 20
  %v2_e9c8 = inttoptr i32 %v1_e9c8 to i32*
  %v3_e9c8 = load i32, i32* %v2_e9c8, align 4
  store i32 %v3_e9c8, i32* @r4, align 4
  %v2_e9cc = load i32, i32* @global_var_1d8b8.121, align 4
  %v1_e9d0 = add i32 %v0_e9c8, 16
  %v2_e9d0 = inttoptr i32 %v1_e9d0 to i32*
  %v3_e9d0 = load i32, i32* %v2_e9d0, align 4
  store i32 %v3_e9d0, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e9d8 = add i32 %v0_e9c8, 8
  %v3_e9d8 = inttoptr i32 %v2_e9d8 to i32*
  store i32 %v2_e9cc, i32* %v3_e9d8, align 4
  %v0_e9dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e9dc = load i32, i32* %r5.global-to-local, align 4
  %v2_e9dc = add i32 %v1_e9dc, 12
  %v3_e9dc = inttoptr i32 %v2_e9dc to i32*
  store i32 %v0_e9dc, i32* %v3_e9dc, align 4
  %v0_e9e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_e9e4 = add i32 %v0_e9e4, 4
  %v2_e9e4 = inttoptr i32 %v1_e9e4 to i32*
  %v3_e9e4 = load i32, i32* %v2_e9e4, align 4
  %v0_e9e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_e9e8 = mul i32 %v0_e9e8, 2
  store i32 %v2_e9e8, i32* %r3.global-to-local, align 4
  store i32 %v2_e9e8, i32* %stack_var_-32, align 4
  %v3_ea08 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_ea08 = call i32 @function_12a58(i32 %v3_e9e4, %sockaddr* %v3_ea08, i32 16)
  br label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %dec_label_pc_e944.dec_label_pc_ea0c_crit_edge, %dec_label_pc_e998
  %v14_ea10 = phi i32 [ %v14_ea10.pre, %dec_label_pc_e944.dec_label_pc_ea0c_crit_edge ], [ %v4_ea08, %dec_label_pc_e998 ]
  %v2_ea10 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_ea10, i32* @r4, align 4
  ret i32 %v14_ea10

; uselistorder directives
  uselistorder i32 %v2_e9e8, { 1, 0 }
  uselistorder i32 %v3_e97c, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_11a7c, { 8, 4, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_ea0c, { 1, 0 }
}

define i32 @function_ea18(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ea18:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_ea18 = load i32, i32* @r4, align 4
  %v6_ea18 = load i32, i32* @r5, align 4
  %v9_ea18 = load i32, i32* @r6, align 4
  %v12_ea18 = load i32, i32* @r7, align 4
  %v15_ea18 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1d884.123 to i32), i32* @r8, align 4
  %v2_ea20 = load i32, i32* @global_var_1d884.123, align 4
  store i32 ptrtoint (i32* @global_var_1d8b0.125 to i32), i32* %sb.global-to-local, align 4
  %v3_ea2c = mul i32 %v2_ea20, 16
  store i32 %v3_ea2c, i32* %r3.global-to-local, align 4
  %v3_ea34 = urem i32 %arg3, 65536
  store i32 %v3_ea34, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_ea40 = load i32, i32* @global_var_1d8b0.125, align 4
  %v1_ea44 = add i32 %v3_ea2c, 16
  store i32 %v1_ea44, i32* %r1.global-to-local, align 4
  store i32 %v3_ea34, i32* %stack_var_-44, align 4
  %v8_ea4c = call i32 @function_13030(i32 %v2_ea40, i32 %v1_ea44, i32 %v3_ea34, i32 %v3_ea2c)
  store i32 %v8_ea4c, i32* %sl.global-to-local, align 4
  %v0_ea54 = load i32, i32* @r5, align 4
  %v1_ea58 = load i32, i32* %sb.global-to-local, align 4
  %v2_ea58 = inttoptr i32 %v1_ea58 to i32*
  store i32 %v8_ea4c, i32* %v2_ea58, align 4
  %v2_ea5c = load i32, i32* @global_var_1d884.123, align 4
  store i32 %v2_ea5c, i32* %fp.global-to-local, align 4
  %v1_ea60 = inttoptr i32 %v0_ea54 to i8*
  %v2_ea60 = call i32 @function_119dc(i8* %v1_ea60)
  %sext = mul i32 %v2_ea60, 16777216
  %v1_ea64 = sdiv i32 %sext, 16777216
  %v2_ea64 = add nsw i32 %v1_ea64, 1
  store i32 %v2_ea64, i32* @r4, align 4
  store i32 %v1_ea64, i32* @r7, align 4
  %v1_ea70 = call i32 @function_12d94(i32 %v2_ea64)
  %v0_ea74 = load i32, i32* @r5, align 4
  store i32 %v0_ea74, i32* %r1.global-to-local, align 4
  %v0_ea78 = load i32, i32* @r4, align 4
  store i32 %v0_ea78, i32* %r2.global-to-local, align 4
  store i32 %v1_ea70, i32* @r6, align 4
  %v3_ea80 = call i32 @function_11a58(i32 %v1_ea70, i32 %v0_ea74, i32 %v0_ea78)
  %v0_ea84 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_ea84, 1
  %extract.t6 = trunc i32 %v0_ea84 to i8
  br i1 %tmp21, label %dec_label_pc_eaa8, label %dec_label_pc_ea8c

dec_label_pc_ea8c:                                ; preds = %dec_label_pc_ea18
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ea90

dec_label_pc_ea90:                                ; preds = %dec_label_pc_ea90, %dec_label_pc_ea8c
  %v2_ea98 = phi i32 [ %v1_ea9c, %dec_label_pc_ea90 ], [ 0, %dec_label_pc_ea8c ]
  %v1_ea90 = load i32, i32* @r6, align 4
  %v2_ea90 = add i32 %v1_ea90, %v2_ea98
  %v3_ea90 = inttoptr i32 %v2_ea90 to i8*
  %v4_ea90 = load i8, i8* %v3_ea90, align 1
  %v6_ea90 = zext i8 %v4_ea90 to i32
  %v1_ea94 = xor i32 %v6_ea90, 34
  store i32 %v1_ea94, i32* %r3.global-to-local, align 4
  %v1_ea98 = trunc i32 %v1_ea94 to i8
  store i8 %v1_ea98, i8* %v3_ea90, align 1
  %v0_ea9c = load i32, i32* %r2.global-to-local, align 4
  %v1_ea9c = add i32 %v0_ea9c, 1
  store i32 %v1_ea9c, i32* %r2.global-to-local, align 4
  %v0_eaa0 = load i32, i32* @r7, align 4
  %v9_eaa0 = icmp eq i32 %v0_eaa0, %v1_ea9c
  br i1 %v9_eaa0, label %dec_label_pc_eaa8.loopexit, label %dec_label_pc_ea90

dec_label_pc_eaa8.loopexit:                       ; preds = %dec_label_pc_ea90
  %extract.t = trunc i32 %v1_ea9c to i8
  br label %dec_label_pc_eaa8

dec_label_pc_eaa8:                                ; preds = %dec_label_pc_eaa8.loopexit, %dec_label_pc_ea18
  %v0_eab8.off0 = phi i8 [ %extract.t, %dec_label_pc_eaa8.loopexit ], [ %extract.t6, %dec_label_pc_ea18 ]
  %v2_eaa8 = load i32, i32* @global_var_1d884.123, align 4
  %v2_eaac = load i32, i32* @global_var_1d8b0.125, align 4
  store i32 %v2_eaac, i32* %r2.global-to-local, align 4
  %v3_eab0 = mul i32 %v2_eaa8, 16
  %v2_eab4 = add i32 %v2_eaac, %v3_eab0
  store i32 %v2_eab4, i32* %r3.global-to-local, align 4
  %v3_eab8 = add i32 %v2_eab4, 12
  %v4_eab8 = inttoptr i32 %v3_eab8 to i8*
  store i8 %v0_eab8.off0, i8* %v4_eab8, align 1
  %v0_eabc = load i32, i32* @r6, align 4
  %v1_eabc = load i32, i32* %sl.global-to-local, align 4
  %v2_eabc = load i32, i32* %fp.global-to-local, align 4
  %v5_eabc = mul i32 %v2_eabc, 16
  %v6_eabc = add i32 %v5_eabc, %v1_eabc
  %v7_eabc = inttoptr i32 %v6_eabc to i32*
  store i32 %v0_eabc, i32* %v7_eabc, align 4
  %v2_eac4 = load i32, i32* @global_var_1d884.123, align 4
  store i32 %v2_eac4, i32* @r7, align 4
  %v2_eac8 = load i32, i32* @global_var_1d8b0.125, align 4
  store i32 %v2_eac8, i32* %sl.global-to-local, align 4
  %v1_eacc = inttoptr i32 %arg2 to i8*
  %v2_eacc = call i32 @function_119dc(i8* %v1_eacc)
  %sext1 = mul i32 %v2_eacc, 16777216
  %v1_ead0 = sdiv i32 %sext1, 16777216
  %v2_ead0 = add nsw i32 %v1_ead0, 1
  store i32 %v2_ead0, i32* @r4, align 4
  store i32 %v1_ead0, i32* @r5, align 4
  %v1_eadc = call i32 @function_12d94(i32 %v2_ead0)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_eae4 = load i32, i32* @r4, align 4
  store i32 %v0_eae4, i32* %r2.global-to-local, align 4
  store i32 %v1_eadc, i32* %r6.global-to-local, align 4
  %v3_eaec = call i32 @function_11a58(i32 %v1_eadc, i32 %arg2, i32 %v0_eae4)
  %v0_eaf0 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_eaf0, 1
  %extract.t8 = trunc i32 %v0_eaf0 to i8
  br i1 %tmp22, label %dec_label_pc_eb14, label %dec_label_pc_eaf8

dec_label_pc_eaf8:                                ; preds = %dec_label_pc_eaa8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eafc

dec_label_pc_eafc:                                ; preds = %dec_label_pc_eafc, %dec_label_pc_eaf8
  %v2_eb04 = phi i32 [ %v1_eb08, %dec_label_pc_eafc ], [ 0, %dec_label_pc_eaf8 ]
  %v1_eafc = load i32, i32* %r6.global-to-local, align 4
  %v2_eafc = add i32 %v1_eafc, %v2_eb04
  %v3_eafc = inttoptr i32 %v2_eafc to i8*
  %v4_eafc = load i8, i8* %v3_eafc, align 1
  %v6_eafc = zext i8 %v4_eafc to i32
  %v1_eb00 = xor i32 %v6_eafc, 34
  store i32 %v1_eb00, i32* %r3.global-to-local, align 4
  %v1_eb04 = trunc i32 %v1_eb00 to i8
  store i8 %v1_eb04, i8* %v3_eafc, align 1
  %v0_eb08 = load i32, i32* %r2.global-to-local, align 4
  %v1_eb08 = add i32 %v0_eb08, 1
  store i32 %v1_eb08, i32* %r2.global-to-local, align 4
  %v0_eb0c = load i32, i32* @r5, align 4
  %v9_eb0c = icmp eq i32 %v0_eb0c, %v1_eb08
  br i1 %v9_eb0c, label %dec_label_pc_eb14.loopexit, label %dec_label_pc_eafc

dec_label_pc_eb14.loopexit:                       ; preds = %dec_label_pc_eafc
  %extract.t7 = trunc i32 %v1_eb08 to i8
  br label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_eb14.loopexit, %dec_label_pc_eaa8
  %v0_eb24.off0 = phi i8 [ %extract.t7, %dec_label_pc_eb14.loopexit ], [ %extract.t8, %dec_label_pc_eaa8 ]
  %v2_eb14 = load i32, i32* @global_var_1d884.123, align 4
  %v2_eb18 = load i32, i32* @global_var_1d8b0.125, align 4
  %v3_eb1c = mul i32 %v2_eb14, 16
  %v2_eb20 = or i32 %v3_eb1c, 13
  %v3_eb24 = add i32 %v2_eb20, %v2_eb18
  %v4_eb24 = inttoptr i32 %v3_eb24 to i8*
  store i8 %v0_eb24.off0, i8* %v4_eb24, align 1
  %v2_eb2c = load i32, i32* @global_var_1d884.123, align 4
  store i32 %v2_eb2c, i32* %lr.global-to-local, align 4
  %v4_eb30 = load i8, i8* @global_var_1d8b5.128, align 1
  %v5_eb30 = zext i8 %v4_eb30 to i32
  %v3_eb34 = load i8, i8* bitcast (i8** @global_var_1d8b4.127 to i8*), align 4
  %v4_eb34 = zext i8 %v3_eb34 to i32
  %v2_eb38 = load i32, i32* @global_var_1d8b0.125, align 4
  %v4_eb3c = mul nuw nsw i32 %v5_eb30, 256
  %v5_eb3c = or i32 %v4_eb34, %v4_eb3c
  store i32 %v5_eb3c, i32* %r2.global-to-local, align 4
  %v3_eb40 = mul i32 %v2_eb2c, 16
  %v2_eb44 = add i32 %v2_eb38, %v3_eb40
  store i32 %v2_eb44, i32* %r1.global-to-local, align 4
  %v3_eb4c = add i32 %v2_eb44, 9
  %v4_eb4c = inttoptr i32 %v3_eb4c to i8*
  store i8 %v4_eb30, i8* %v4_eb4c, align 1
  %v0_eb50 = load i32, i32* %r2.global-to-local, align 4
  %v1_eb50 = trunc i32 %v0_eb50 to i8
  %v2_eb50 = load i32, i32* %r1.global-to-local, align 4
  %v3_eb50 = add i32 %v2_eb50, 8
  %v4_eb50 = inttoptr i32 %v3_eb50 to i8*
  store i8 %v1_eb50, i8* %v4_eb50, align 1
  %v4_eb54 = load i8, i8* @global_var_1d8b5.128, align 1
  %v5_eb54 = zext i8 %v4_eb54 to i32
  %v3_eb58 = load i8, i8* bitcast (i8** @global_var_1d8b4.127 to i8*), align 4
  %v4_eb58 = zext i8 %v3_eb58 to i32
  %v4_eb5c = mul nuw nsw i32 %v5_eb54, 256
  %v5_eb5c = or i32 %v4_eb58, %v4_eb5c
  %v2_eb60 = load i32, i32* %stack_var_-44, align 4
  %v2_eb64 = add i32 %v5_eb5c, %v2_eb60
  store i32 %v2_eb64, i32* %r3.global-to-local, align 4
  %v3_eb689 = udiv i32 %v2_eb64, 256
  %v1_eb6c = trunc i32 %v3_eb689 to i8
  %v2_eb6c = load i32, i32* %r1.global-to-local, align 4
  %v3_eb6c = add i32 %v2_eb6c, 11
  %v4_eb6c = inttoptr i32 %v3_eb6c to i8*
  store i8 %v1_eb6c, i8* %v4_eb6c, align 1
  %v0_eb70 = load i32, i32* %r3.global-to-local, align 4
  %v1_eb70 = trunc i32 %v0_eb70 to i8
  %v2_eb70 = load i32, i32* %r1.global-to-local, align 4
  %v3_eb70 = add i32 %v2_eb70, 10
  %v4_eb70 = inttoptr i32 %v3_eb70 to i8*
  store i8 %v1_eb70, i8* %v4_eb70, align 1
  %v4_eb74 = load i8, i8* @global_var_1d8b5.128, align 1
  %v5_eb74 = zext i8 %v4_eb74 to i32
  %v3_eb78 = load i8, i8* bitcast (i8** @global_var_1d8b4.127 to i8*), align 4
  %v4_eb78 = zext i8 %v3_eb78 to i32
  %v4_eb7c = mul nuw nsw i32 %v5_eb74, 256
  %v5_eb7c = or i32 %v4_eb78, %v4_eb7c
  %v2_eb80 = load i32, i32* %stack_var_-44, align 4
  %v2_eb84 = add i32 %v5_eb7c, %v2_eb80
  store i32 %v2_eb84, i32* %r2.global-to-local, align 4
  %v0_eb88 = load i32, i32* @r7, align 4
  %v3_eb88 = mul i32 %v0_eb88, 16
  %v1_eb8c = load i32, i32* %sl.global-to-local, align 4
  %v2_eb8c = add i32 %v1_eb8c, %v3_eb88
  store i32 %v2_eb8c, i32* %r3.global-to-local, align 4
  %v0_eb90 = load i32, i32* %lr.global-to-local, align 4
  %v1_eb90 = add i32 %v0_eb90, 1
  store i32 %v1_eb90, i32* @lr, align 4
  %v3_eb94 = sdiv i32 %v2_eb84, 256
  store i32 %v3_eb94, i32* %r1.global-to-local, align 4
  %v0_eb98 = load i32, i32* %r6.global-to-local, align 4
  %v2_eb98 = add i32 %v2_eb8c, 4
  %v3_eb98 = inttoptr i32 %v2_eb98 to i32*
  store i32 %v0_eb98, i32* %v3_eb98, align 4
  %v0_eb9c = load i32, i32* @lr, align 4
  %v1_eb9c = load i32, i32* @r8, align 4
  %v2_eb9c = inttoptr i32 %v1_eb9c to i32*
  store i32 %v0_eb9c, i32* %v2_eb9c, align 4
  %v0_eba0 = load i32, i32* %r1.global-to-local, align 4
  %v1_eba0 = trunc i32 %v0_eba0 to i8
  store i8 %v1_eba0, i8* @global_var_1d8b5.128, align 1
  %v0_eba4 = load i32, i32* %r2.global-to-local, align 4
  %v1_eba4 = trunc i32 %v0_eba4 to i8
  store i8 %v1_eba4, i8* bitcast (i8** @global_var_1d8b4.127 to i8*), align 4
  store i32 %v3_ea18, i32* @r4, align 4
  store i32 %v6_ea18, i32* @r5, align 4
  store i32 %v9_ea18, i32* @r6, align 4
  store i32 %v12_ea18, i32* @r7, align 4
  store i32 %v15_ea18, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1d8b4.127 to i32)

; uselistorder directives
  uselistorder i32 %v1_eb08, { 0, 2, 3, 1 }
  uselistorder i32 %v1_eadc, { 1, 0 }
  uselistorder i32 %v1_ea9c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_ea70, { 1, 0 }
  uselistorder i32 %v3_ea34, { 1, 2, 0 }
  uselistorder i32 %v3_ea2c, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_119dc, { 0, 1, 9, 10, 11, 12, 13, 28, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13030, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_ebbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_ebbc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp246 = call i32 @__decompiler_undefined_function_0()
  %tmp253 = call i32 @__decompiler_undefined_function_0()
  %tmp254 = call i8* @__decompiler_undefined_function_2()
  %tmp255 = call i32 @__decompiler_undefined_function_0()
  %tmp256 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ebbc = load i32, i32* @r4, align 4
  store i32 %v3_ebbc, i32* %stack_var_-36, align 4
  %v6_ebbc = load i32, i32* @r5, align 4
  %v18_ebbc = load i32, i32* @sb, align 4
  %v21_ebbc = load i32, i32* @sl, align 4
  %v0_ebc4 = call i32 @function_1230c()
  store i32 %v0_ebc4, i32* %r0.global-to-local, align 4
  %v7_ebc8 = icmp eq i32 %v0_ebc4, -1
  %. = zext i1 %v7_ebc8 to i32
  %tmp287 = icmp slt i32 %v0_ebc4, 1
  %storemerge243 = select i1 %tmp287, i32 %., i32 1
  store i32 %storemerge243, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d924.119 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebe4 = icmp eq i32 %storemerge243, 0
  store i1 %v2_ebe4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_ebc4, i32* @global_var_1d924.119, align 4
  br i1 %v2_ebe4, label %dec_label_pc_eea8, label %dec_label_pc_ebf0

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebbc
  store i32 %v3_ebbc, i32* %r4.global-to-local, align 4
  store i32 %v6_ebbc, i32* %r5.global-to-local, align 4
  store i32 %v18_ebbc, i32* @sb, align 4
  store i32 %v21_ebbc, i32* @sl, align 4
  ret i32 %v0_ebc4

dec_label_pc_eea8:                                ; preds = %dec_label_pc_ebbc
  %v0_eea8 = call i32 @function_11c94()
  store i32 %v0_eea8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d900.47 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_eea8, i32* @global_var_1d900.47, align 4
  %v1_eeb4 = call i32 @function_e298(i32 %v0_eea8)
  %v0_eeb8 = load i32, i32* @r4, align 4
  store i32 %v0_eeb8, i32* %r0.global-to-local, align 4
  %v1_eebc = inttoptr i32 %v0_eeb8 to i32*
  %v2_eebc = call i32 @function_125b0(i32* %v1_eebc)
  store i32 ptrtoint (i32* @global_var_1d8b8.121 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_eebc, i32* @global_var_1d8b8.121, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_eed0 = call i32 @function_12ee8(i32 256, i32 288)
  store i32 %v2_eed0, i32* %lr.global-to-local, align 4
  %v0_eedc = load i32, i32* @r4, align 4
  store i32 %v0_eedc, i32* %stack_var_-52, align 4
  store i32 %v2_eed0, i32* @global_var_1d91c.133, align 4
  store i32 %v0_eedc, i32* %r3.global-to-local, align 4
  store i32 %v0_eedc, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_eedc, i32* %ip.global-to-local, align 4
  %v1_eef4 = add i32 %v2_eed0, 4
  store i32 %v1_eef4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eef8

dec_label_pc_eef8:                                ; preds = %dec_label_pc_eef8.dec_label_pc_eef8_crit_edge, %dec_label_pc_eea8
  %v0_ef10 = phi i32 [ %v0_ef10.pre, %dec_label_pc_eef8.dec_label_pc_eef8_crit_edge ], [ %v0_eedc, %dec_label_pc_eea8 ]
  %v0_ef00 = phi i32 [ %v0_ef18, %dec_label_pc_eef8.dec_label_pc_eef8_crit_edge ], [ %v0_eedc, %dec_label_pc_eea8 ]
  %v1_ef08 = phi i32 [ %v1_ef08.pre, %dec_label_pc_eef8.dec_label_pc_eef8_crit_edge ], [ %v2_eed0, %dec_label_pc_eea8 ]
  %v3_eef8 = mul i32 %v0_ef00, 256
  store i32 %v3_eef8, i32* %r2.global-to-local, align 4
  %v1_ef00 = add i32 %v0_ef00, 1
  store i32 %v1_ef00, i32* %ip.global-to-local, align 4
  %v2_ef04 = mul i32 %v0_ef00, 288
  %v2_ef08 = add i32 %v1_ef08, 12
  %v2_ef10 = add i32 %v2_ef08, %v2_ef04
  %v3_ef10 = inttoptr i32 %v2_ef10 to i32*
  store i32 %v0_ef10, i32* %v3_ef10, align 4
  %v0_ef14 = load i32, i32* %r0.global-to-local, align 4
  %v1_ef14 = load i32, i32* %r1.global-to-local, align 4
  %v2_ef14 = inttoptr i32 %v1_ef14 to i32*
  store i32 %v0_ef14, i32* %v2_ef14, align 4
  %v3_ef14 = load i32, i32* %r1.global-to-local, align 4
  %v4_ef14 = add i32 %v3_ef14, 288
  store i32 %v4_ef14, i32* %r1.global-to-local, align 4
  %v0_ef18 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_ef18, i32* %r3.global-to-local, align 4
  %v7_ef1c = icmp sgt i32 %v1_ef00, 255
  br i1 %v7_ef1c, label %dec_label_pc_ef20, label %dec_label_pc_eef8.dec_label_pc_eef8_crit_edge

dec_label_pc_eef8.dec_label_pc_eef8_crit_edge:    ; preds = %dec_label_pc_eef8
  %v1_ef08.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ef10.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_eef8

dec_label_pc_ef20:                                ; preds = %dec_label_pc_eef8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_ef18, i32* %stack_var_-52, align 4
  %v3_ef30 = call i32 @function_12bfc(i32 2, i32 3, i32 6)
  store i32 %v3_ef30, i32* %r0.global-to-local, align 4
  %v2_ef38 = icmp eq i32 %v3_ef30, -1
  store i1 %v2_ef38, i1* %cpsr_c.global-to-local, align 1
  %v7_ef38 = icmp eq i32 %v3_ef30, -1
  store i1 %v7_ef38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ef30, i32* @r4, align 4
  store i32 %v3_ef30, i32* @global_var_1d920.135, align 4
  br i1 %v7_ef38, label %dec_label_pc_10110, label %dec_label_pc_ef48

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef20
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_ef4c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ef4c, i32* @r2, align 4
  %v2_ef50 = call i32 @function_1221c(i32 %v3_ef30, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ef58 = or i32 %v2_ef50, 2048
  store i32 %v1_ef58, i32* @r2, align 4
  %v0_ef5c = load i32, i32* @r4, align 4
  store i32 %v0_ef5c, i32* %r0.global-to-local, align 4
  %v2_ef60 = call i32 @function_1221c(i32 %v0_ef5c, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_ef6c = load i32, i32* @global_var_1d920.135, align 4
  store i32 %v2_ef6c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ef74 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ef74, i32* %r1.global-to-local, align 4
  %v2_ef78 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ef78, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_ef88 = call i32 @function_12bcc(i32 %v2_ef6c, i32 %v0_ef74, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_ef88, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef8c = icmp eq i32 %v6_ef88, 0
  store i1 %v2_ef8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef8c, label %dec_label_pc_ef94, label %dec_label_pc_10104

dec_label_pc_ef94:                                ; preds = %dec_label_pc_ef48, %dec_label_pc_ef94
  %v0_ef94 = call i32 @function_e240()
  %v3_ef98 = mul i32 %v0_ef94, 65536
  store i32 %v3_ef98, i32* %r0.global-to-local, align 4
  %v1_efa4 = mul i32 %v0_ef94, 256
  %v3_efa8 = and i32 %v1_efa4, 65280
  %tmp290 = udiv i32 %v0_ef94, 256
  %v4_efac = urem i32 %tmp290, 256
  %v5_efac = or i32 %v4_efac, %v3_efa8
  store i32 %v5_efac, i32* %r3.global-to-local, align 4
  %v2_efb0 = icmp ugt i32 %v5_efac, 1023
  store i1 %v2_efb0, i1* %cpsr_c.global-to-local, align 1
  %v7_efb0 = icmp eq i32 %v5_efac, 1024
  store i1 %v7_efb0, i1* %cpsr_z.global-to-local, align 1
  %v3_efb4 = icmp ult i32 %v5_efac, 1022
  br i1 %v3_efb4, label %dec_label_pc_ef94, label %dec_label_pc_efb8

dec_label_pc_efb8:                                ; preds = %dec_label_pc_ef94
  %v5_efa0.le = trunc i32 %v0_ef94 to i8
  store i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i8 69, i8* bitcast (i8** @global_var_1d888.137 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1d88b.138 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1d88a.139 to i8*), align 4
  %v0_efec = call i32 @function_e240()
  %v1_efec = trunc i32 %v0_efec to i8
  store i32 %v0_efec, i32* %r0.global-to-local, align 4
  %v4_eff4 = sext i8 %v5_efa0.le to i32
  %v3_eff8 = load i8, i8* @global_var_1d8a8.142, align 1
  store i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32* %lr.global-to-local, align 4
  %v3_f000242 = udiv i32 %v4_eff4, 256
  store i8 64, i8* bitcast (i32* @global_var_1d890.143 to i8*), align 4
  %v2_f00c = and i32 %v0_efec, 128
  %v3_f00c = icmp ne i32 %v2_f00c, 0
  store i1 %v3_f00c, i1* %cpsr_c.global-to-local, align 1
  %v4_f00c241 = udiv i32 %v0_efec, 256
  store i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_eff8, 16
  %v1_f014 = zext i8 %tmp to i32
  store i32 6, i32* @r4, align 4
  %v1_f01c = trunc i32 %v4_f00c241 to i8
  store i8 %v1_f01c, i8* bitcast (i32* @global_var_1d88d.144 to i8*), align 4
  %v1_f020 = or i32 %v1_f014, 80
  store i32 %v1_f020, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v1_f028 = trunc i32 %v1_f020 to i8
  store i8 %v1_f028, i8* @global_var_1d8a8.142, align 1
  %v1_f02c = trunc i32 %v3_f000242 to i8
  store i8 %v1_f02c, i8* bitcast (i32* @global_var_1d89d.145 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1d89f.146 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1d891.147 to i8*), align 4
  store i32 %v4_eff4, i32* %ip.global-to-local, align 4
  store i8 %v1_efec, i8* bitcast (i32* @global_var_1d88c.148 to i8*), align 4
  store i8 %v5_efa0.le, i8* bitcast (i32* @global_var_1d89c.141 to i8*), align 4
  %v0_f044 = load i32, i32* @r6, align 4
  %v1_f044 = trunc i32 %v0_f044 to i8
  store i8 %v1_f044, i8* bitcast (i32* @global_var_1d89e.149 to i8*), align 4
  %v0_f048 = call i32 @function_e240()
  %v1_f048 = trunc i32 %v0_f048 to i8
  store i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32* @lr, align 4
  %v3_f050 = load i8, i8* @global_var_1d8a9.150, align 1
  %v4_f050 = zext i8 %v3_f050 to i32
  %v2_f054 = and i32 %v0_f048, 128
  %v3_f054 = icmp ne i32 %v2_f054, 0
  store i1 %v3_f054, i1* %cpsr_c.global-to-local, align 1
  %v4_f054 = sdiv i32 %v0_f048, 256
  store i32 %v4_f054, i32* %ip.global-to-local, align 4
  %v1_f058 = or i32 %v4_f050, 2
  store i32 %v1_f058, i32* %r3.global-to-local, align 4
  store i32 %v0_f048, i32* @r5, align 4
  %v1_f060 = trunc i32 %v4_f054 to i8
  store i8 %v1_f060, i8* bitcast (i32* @global_var_1d8ab.151 to i8*), align 4
  %v1_f064 = trunc i32 %v1_f058 to i8
  store i8 %v1_f064, i8* @global_var_1d8a9.150, align 1
  store i8 %v1_f048, i8* bitcast (i32* @global_var_1d8aa.152 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f078 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f088 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14b94.160 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_f098 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14b94.160 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14b9c.162 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f0a8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([6 x i8]* @global_var_14b9c.162 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f0b8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r1.global-to-local, align 4
  %v5_f0c8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ba4.164 to i32), i32* %r1.global-to-local, align 4
  %v0_f0d4 = load i32, i32* @r4, align 4
  store i32 %v0_f0d4, i32* %r2.global-to-local, align 4
  %v4_f0d8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14ba4.164 to i32), i32 %v0_f0d4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14bac.166 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f0e8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([8 x i8]* @global_var_14bac.166 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f0f8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14bbc.170 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f108 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([9 x i8]* @global_var_14bbc.170 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f118 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bd0.174 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f128 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14bd0.174 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32* %r1.global-to-local, align 4
  %v5_f138 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f148 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32* %r1.global-to-local, align 4
  %v5_f158 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f168 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15130.178 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f178 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32 ptrtoint (i32* @global_var_15130.178 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f188 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f198 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_f1a8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r1.global-to-local, align 4
  %v5_f1b8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bec.182 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f1c8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14bec.182 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f1d8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32* %r1.global-to-local, align 4
  %v5_f1e8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32* %r1.global-to-local, align 4
  %v0_f1f4 = load i32, i32* @r4, align 4
  store i32 %v0_f1f4, i32* %r2.global-to-local, align 4
  %v4_f1f8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32 %v0_f1f4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14bfc.186 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_f208 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([5 x i8]* @global_var_14bfc.186 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14c04.188 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_f218 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14c04.188 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d58.190 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f228 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14d58.190 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14c10.192 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f238 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([9 x i8]* @global_var_14c10.192 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d58.190 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f248 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d58.190 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14c1c.194 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f258 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14c1c.194 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f268 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15130.178 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f278 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_15130.178 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14c24.196 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f288 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14c24.196 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_f298 = call i32 @function_ea18(i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14c3c.200 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_f2a8 = call i32 @function_ea18(i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), i32 ptrtoint ([7 x i8]* @global_var_14c3c.200 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_14c44.202 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_f2b8 = call i32 @function_ea18(i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), i32 ptrtoint ([4 x i8]* @global_var_14c44.202 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14c48.204 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_f2c8 = call i32 @function_ea18(i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), i32 ptrtoint ([7 x i8]* @global_var_14c48.204 to i32), i32 13)
  store i32 ptrtoint ([8 x i8]* @global_var_14c50.206 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14c50.206 to i32), i32* %r1.global-to-local, align 4
  %v5_f2d8 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14c50.206 to i32), i32 ptrtoint ([8 x i8]* @global_var_14c50.206 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14c50.206 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f2e8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([8 x i8]* @global_var_14c50.206 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), i32* %r1.global-to-local, align 4
  %v5_f2f8 = call i32 @function_ea18(i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f308 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32* %r1.global-to-local, align 4
  %v5_f318 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bec.182 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f328 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32 ptrtoint (i32* @global_var_14bec.182 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32* %r1.global-to-local, align 4
  %v0_f334 = load i32, i32* @r4, align 4
  store i32 %v0_f334, i32* %r2.global-to-local, align 4
  %v4_f338 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32 %v0_f334)
  store i32 ptrtoint (i32* @global_var_14c6c.212 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f348 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14c6c.212 to i32), i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_14c74.214 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15130.178 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_f358 = call i32 @function_ea18(i32 ptrtoint ([14 x i8]* @global_var_14c74.214 to i32), i32 ptrtoint (i32* @global_var_15130.178 to i32), i32 13)
  store i32 ptrtoint (i32* @global_var_14c1c.194 to i32), i32* %r0.global-to-local, align 4
  %v0_f360 = load i32, i32* @r4, align 4
  store i32 %v0_f360, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14c1c.194 to i32), i32* %r1.global-to-local, align 4
  %v3_f368 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14c1c.194 to i32), i32 ptrtoint (i32* @global_var_14c1c.194 to i32), i32 %v0_f360)
  store i32 ptrtoint (i32* @global_var_14ba4.164 to i32), i32* %r0.global-to-local, align 4
  %v0_f370 = load i32, i32* @r4, align 4
  store i32 %v0_f370, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ba4.164 to i32), i32* %r1.global-to-local, align 4
  %v3_f378 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14ba4.164 to i32), i32 ptrtoint (i32* @global_var_14ba4.164 to i32), i32 %v0_f370)
  store i32 ptrtoint ([5 x i8]* @global_var_14c84.216 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14c84.216 to i32), i32* %r1.global-to-local, align 4
  %v5_f388 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14c84.216 to i32), i32 ptrtoint ([5 x i8]* @global_var_14c84.216 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14c84.216 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_f398 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([5 x i8]* @global_var_14c84.216 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14c8c.218 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_f3a8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14c8c.218 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14c94.220 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_f3b8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14c94.220 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14c9c.222 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_f3c8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14c9c.222 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14ca4.224 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f3d8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([6 x i8]* @global_var_14ca4.224 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14cac.226 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f3e8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([5 x i8]* @global_var_14cac.226 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14cb4.228 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f3f8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([6 x i8]* @global_var_14cb4.228 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14cbc.230 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f408 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([9 x i8]* @global_var_14cbc.230 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14cc8.232 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f418 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14cc8.232 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14cd8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f428 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14cd8.234 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14ce8.236 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_f438 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([7 x i8]* @global_var_14ce8.236 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14cf0.238 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_f448 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([5 x i8]* @global_var_14cf0.238 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14cf8.240 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_f458 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([9 x i8]* @global_var_14cf8.240 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_f468 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14d04.242 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_f478 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([8 x i8]* @global_var_14d04.242 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d0c.244 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_f488 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14d0c.244 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d18.246 to i32), i32* %r1.global-to-local, align 4
  %v0_f494 = load i32, i32* @r4, align 4
  store i32 %v0_f494, i32* %r2.global-to-local, align 4
  %v4_f498 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14d18.246 to i32), i32 %v0_f494)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d20.248 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f4a8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d20.248 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15130.178 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f4b8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_15130.178 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bec.182 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f4c8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14bec.182 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bd0.174 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f4d8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14bd0.174 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f4e8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14cd8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f4f8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14cd8.234 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d28.250 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_f508 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d28.250 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14bfc.186 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_f518 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([5 x i8]* @global_var_14bfc.186 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14c3c.200 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_f528 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_14c3c.200 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f538 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d34.254 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_f548 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d34.254 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14d40.256 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f558 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_14d40.256 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_14d48.258 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f568 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([4 x i8]* @global_var_14d48.258 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d4c.260 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f578 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d4c.260 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d54.262 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_f588 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d54.262 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14d60.264 to i32), i32* %r1.global-to-local, align 4
  %v0_f594 = load i32, i32* @r4, align 4
  store i32 %v0_f594, i32* %r2.global-to-local, align 4
  %v5_f598 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_14d60.264 to i32), i32 %v0_f594)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14d68.266 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f5a8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([9 x i8]* @global_var_14d68.266 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d74.268 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f5b8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d74.268 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d7c.270 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f5c8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d7c.270 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d84.272 to i32), i32* %r1.global-to-local, align 4
  %v0_f5d4 = load i32, i32* @r4, align 4
  store i32 %v0_f5d4, i32* %r2.global-to-local, align 4
  %v4_f5d8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d84.272 to i32), i32 %v0_f5d4)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d8c.274 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f5e8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14d8c.274 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14d94.276 to i32), i32* %r1.global-to-local, align 4
  %v0_f5f4 = load i32, i32* @r4, align 4
  store i32 %v0_f5f4, i32* %r2.global-to-local, align 4
  %v5_f5f8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_14d94.276 to i32), i32 %v0_f5f4)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14d9c.278 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f608 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([8 x i8]* @global_var_14d9c.278 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14da4.280 to i32), i32* %r1.global-to-local, align 4
  %v0_f614 = load i32, i32* @r4, align 4
  store i32 %v0_f614, i32* %r2.global-to-local, align 4
  %v4_f618 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14da4.280 to i32), i32 %v0_f614)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14c48.204 to i32), i32* %r1.global-to-local, align 4
  %v0_f624 = load i32, i32* @r4, align 4
  store i32 %v0_f624, i32* %r2.global-to-local, align 4
  %v5_f628 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_14c48.204 to i32), i32 %v0_f624)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14dac.282 to i32), i32* %r1.global-to-local, align 4
  %v0_f634 = load i32, i32* @r4, align 4
  store i32 %v0_f634, i32* %r2.global-to-local, align 4
  %v4_f638 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14dac.282 to i32), i32 %v0_f634)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14db4.284 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f648 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_14db4.284 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14dbc.286 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f658 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([9 x i8]* @global_var_14dbc.286 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_14dc8.288 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14dc8.288 to i32), i32* %r1.global-to-local, align 4
  %v5_f668 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14dc8.288 to i32), i32 ptrtoint ([6 x i8]* @global_var_14dc8.288 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), i32* %r1.global-to-local, align 4
  %v5_f678 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f688 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ec0.290 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f698 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14ec0.290 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14dd0.292 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f6a8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14dd0.292 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_14dd8.294 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f6b8 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14dd8.294 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_14dd8.294 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14dd8.294 to i32), i32* %r1.global-to-local, align 4
  %v5_f6c8 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14dd8.294 to i32), i32 ptrtoint ([8 x i8]* @global_var_14dd8.294 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_14de0.296 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_f6d8 = call i32 @function_ea18(i32 ptrtoint ([4 x i8]* @global_var_14de0.296 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_14de4.298 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14dec.300 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f6e8 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14de4.298 to i32), i32 ptrtoint ([7 x i8]* @global_var_14dec.300 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_14df4.302 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_14df4.302 to i32), i32* %r1.global-to-local, align 4
  %v5_f6f8 = call i32 @function_ea18(i32 ptrtoint ([4 x i8]* @global_var_14df4.302 to i32), i32 ptrtoint ([4 x i8]* @global_var_14df4.302 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14df8.304 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_f708 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14df8.304 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14e04.306 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_f718 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([5 x i8]* @global_var_14e04.306 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_14e0c.308 to i32), i32* %r0.global-to-local, align 4
  %v0_f720 = load i32, i32* @r4, align 4
  store i32 %v0_f720, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14e0c.308 to i32), i32* %r1.global-to-local, align 4
  %v5_f728 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14e0c.308 to i32), i32 ptrtoint ([7 x i8]* @global_var_14e0c.308 to i32), i32 %v0_f720)
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14e0c.308 to i32), i32* %r1.global-to-local, align 4
  %v0_f734 = load i32, i32* @r4, align 4
  store i32 %v0_f734, i32* %r2.global-to-local, align 4
  %v4_f738 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 ptrtoint ([7 x i8]* @global_var_14e0c.308 to i32), i32 %v0_f734)
  store i32 ptrtoint (i32* @global_var_14e14.310 to i32), i32* %r0.global-to-local, align 4
  %v0_f740 = load i32, i32* @r4, align 4
  store i32 %v0_f740, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14e14.310 to i32), i32* %r1.global-to-local, align 4
  %v3_f748 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14e14.310 to i32), i32 ptrtoint (i32* @global_var_14e14.310 to i32), i32 %v0_f740)
  store i32 ptrtoint ([6 x i8]* @global_var_14e1c.312 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f758 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14e1c.312 to i32), i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_14e24.314 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f768 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14e24.314 to i32), i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14e24.314 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14bfc.186 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f778 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14e24.314 to i32), i32 ptrtoint ([5 x i8]* @global_var_14bfc.186 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14e24.314 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f788 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14e24.314 to i32), i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_14e2c.316 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v3_f798 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14e2c.316 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_14e34.318 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14e40.320 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f7a8 = call i32 @function_ea18(i32 ptrtoint ([9 x i8]* @global_var_14e34.318 to i32), i32 ptrtoint ([7 x i8]* @global_var_14e40.320 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_14e48.322 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14e48.322 to i32), i32* %r1.global-to-local, align 4
  %v5_f7b8 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14e48.322 to i32), i32 ptrtoint ([8 x i8]* @global_var_14e48.322 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_14e50.324 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14e50.324 to i32), i32* %r1.global-to-local, align 4
  %v5_f7c8 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14e50.324 to i32), i32 ptrtoint ([7 x i8]* @global_var_14e50.324 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_14e50.324 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14e58.326 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f7d8 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14e50.324 to i32), i32 ptrtoint ([8 x i8]* @global_var_14e58.326 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_14e60.328 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_14e68.330 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f7e8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14e60.328 to i32), i32 ptrtoint ([10 x i8]* @global_var_14e68.330 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_14e60.328 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14db4.284 to i32), i32* %r1.global-to-local, align 4
  %v0_f7f4 = load i32, i32* @r4, align 4
  store i32 %v0_f7f4, i32* %r2.global-to-local, align 4
  %v5_f7f8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14e60.328 to i32), i32 ptrtoint ([7 x i8]* @global_var_14db4.284 to i32), i32 %v0_f7f4)
  store i32 ptrtoint ([5 x i8]* @global_var_14e74.332 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14e74.332 to i32), i32* %r1.global-to-local, align 4
  %v5_f808 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14e74.332 to i32), i32 ptrtoint ([5 x i8]* @global_var_14e74.332 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14e7c.334 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14e84.336 to i32), i32* %r1.global-to-local, align 4
  %v0_f814 = load i32, i32* @r4, align 4
  store i32 %v0_f814, i32* %r2.global-to-local, align 4
  %v5_f818 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14e7c.334 to i32), i32 ptrtoint ([7 x i8]* @global_var_14e84.336 to i32), i32 %v0_f814)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14e84.336 to i32), i32* %r1.global-to-local, align 4
  %v0_f824 = load i32, i32* @r4, align 4
  store i32 %v0_f824, i32* %r2.global-to-local, align 4
  %v5_f828 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_14e84.336 to i32), i32 %v0_f824)
  store i32 ptrtoint ([3 x i8]* @global_var_14e54.338 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14e8c.340 to i32), i32* %r1.global-to-local, align 4
  %v0_f834 = load i32, i32* @r4, align 4
  store i32 %v0_f834, i32* %r2.global-to-local, align 4
  %v5_f838 = call i32 @function_ea18(i32 ptrtoint ([3 x i8]* @global_var_14e54.338 to i32), i32 ptrtoint ([7 x i8]* @global_var_14e8c.340 to i32), i32 %v0_f834)
  store i32 ptrtoint ([7 x i8]* @global_var_14e8c.340 to i32), i32* %r0.global-to-local, align 4
  %v0_f840 = load i32, i32* @r4, align 4
  store i32 %v0_f840, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14e8c.340 to i32), i32* %r1.global-to-local, align 4
  %v5_f848 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14e8c.340 to i32), i32 ptrtoint ([7 x i8]* @global_var_14e8c.340 to i32), i32 %v0_f840)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14e94.342 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_f858 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint (i32* @global_var_14e94.342 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14e94.342 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_f868 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14e94.342 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14ea0.344 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_f878 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([5 x i8]* @global_var_14ea0.344 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14ea8.346 to i32), i32* %r1.global-to-local, align 4
  %v0_f884 = load i32, i32* @r4, align 4
  store i32 %v0_f884, i32* %r2.global-to-local, align 4
  %v5_f888 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([7 x i8]* @global_var_14ea8.346 to i32), i32 %v0_f884)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14eb0.348 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_f898 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14eb0.348 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ebc.350 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f8a8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14ebc.350 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ec4.352 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_f8b8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14ec4.352 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ed0.354 to i32), i32* %r1.global-to-local, align 4
  %v0_f8c4 = load i32, i32* @r4, align 4
  store i32 %v0_f8c4, i32* %r2.global-to-local, align 4
  %v4_f8c8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14ed0.354 to i32), i32 %v0_f8c4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ed8.356 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_f8d8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14ed8.356 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ee4.358 to i32), i32* %r1.global-to-local, align 4
  %v0_f8e4 = load i32, i32* @r4, align 4
  store i32 %v0_f8e4, i32* %r2.global-to-local, align 4
  %v4_f8e8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14ee4.358 to i32), i32 %v0_f8e4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14eec.360 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f8f8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14eec.360 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14ef4.362 to i32), i32* %r1.global-to-local, align 4
  %v0_f904 = load i32, i32* @r4, align 4
  store i32 %v0_f904, i32* %r2.global-to-local, align 4
  %v5_f908 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([7 x i8]* @global_var_14ef4.362 to i32), i32 %v0_f904)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14efc.364 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f918 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14efc.364 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14f04.366 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_f928 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_14f04.366 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14f10.368 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f938 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint ([9 x i8]* @global_var_14f10.368 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14f1c.370 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_f948 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_14f1c.370 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14f1c.370 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14f1c.370 to i32), i32* %r1.global-to-local, align 4
  %v5_f958 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14f1c.370 to i32), i32 ptrtoint ([6 x i8]* @global_var_14f1c.370 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_14f24.372 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14f24.372 to i32), i32* %r1.global-to-local, align 4
  %v5_f968 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14f24.372 to i32), i32 ptrtoint ([8 x i8]* @global_var_14f24.372 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_14f2c.374 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14c48.204 to i32), i32* %r1.global-to-local, align 4
  %v0_f974 = load i32, i32* @r4, align 4
  store i32 %v0_f974, i32* %r2.global-to-local, align 4
  %v4_f978 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14f2c.374 to i32), i32 ptrtoint ([7 x i8]* @global_var_14c48.204 to i32), i32 %v0_f974)
  store i32 ptrtoint ([4 x i8]* @global_var_14f34.376 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f988 = call i32 @function_ea18(i32 ptrtoint ([4 x i8]* @global_var_14f34.376 to i32), i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_14f38.378 to i32), i32* %r0.global-to-local, align 4
  %v0_f990 = load i32, i32* @r4, align 4
  store i32 %v0_f990, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14f38.378 to i32), i32* %r1.global-to-local, align 4
  %v5_f998 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14f38.378 to i32), i32 ptrtoint ([7 x i8]* @global_var_14f38.378 to i32), i32 %v0_f990)
  store i32 ptrtoint ([6 x i8]* @global_var_14f40.380 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14f48.382 to i32), i32* %r1.global-to-local, align 4
  %v0_f9a4 = load i32, i32* @r4, align 4
  store i32 %v0_f9a4, i32* %r2.global-to-local, align 4
  %v4_f9a8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14f40.380 to i32), i32 ptrtoint (i32* @global_var_14f48.382 to i32), i32 %v0_f9a4)
  store i32 ptrtoint ([7 x i8]* @global_var_14f50.384 to i32), i32* %r0.global-to-local, align 4
  %v0_f9b0 = load i32, i32* @r4, align 4
  store i32 %v0_f9b0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14f50.384 to i32), i32* %r1.global-to-local, align 4
  %v5_f9b8 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14f50.384 to i32), i32 ptrtoint ([7 x i8]* @global_var_14f50.384 to i32), i32 %v0_f9b0)
  store i32 ptrtoint ([6 x i8]* @global_var_14f58.386 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14f58.386 to i32), i32* %r1.global-to-local, align 4
  %v5_f9c8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14f58.386 to i32), i32 ptrtoint ([6 x i8]* @global_var_14f58.386 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_14f60.388 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14f60.388 to i32), i32* %r1.global-to-local, align 4
  %v5_f9d8 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14f60.388 to i32), i32 ptrtoint ([8 x i8]* @global_var_14f60.388 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_14f68.390 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_14f68.390 to i32), i32* %r1.global-to-local, align 4
  %v5_f9e8 = call i32 @function_ea18(i32 ptrtoint ([4 x i8]* @global_var_14f68.390 to i32), i32 ptrtoint ([4 x i8]* @global_var_14f68.390 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_14f6c.392 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_14f6c.392 to i32), i32* %r1.global-to-local, align 4
  %v5_f9f8 = call i32 @function_ea18(i32 ptrtoint ([4 x i8]* @global_var_14f6c.392 to i32), i32 ptrtoint ([4 x i8]* @global_var_14f6c.392 to i32), i32 3)
  store i32 ptrtoint (i32* @global_var_14f70.394 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14f70.394 to i32), i32* %r1.global-to-local, align 4
  %v3_fa08 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14f70.394 to i32), i32 ptrtoint (i32* @global_var_14f70.394 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14f78.396 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14f78.396 to i32), i32* %r1.global-to-local, align 4
  %v5_fa18 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f78.396 to i32), i32 ptrtoint ([5 x i8]* @global_var_14f78.396 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_14f80.398 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  %v0_fa24 = load i32, i32* @r4, align 4
  store i32 %v0_fa24, i32* %r2.global-to-local, align 4
  %v4_fa28 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14f80.398 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 %v0_fa24)
  store i32 ptrtoint ([6 x i8]* @global_var_14f88.400 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d58.190 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_fa38 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14f88.400 to i32), i32 ptrtoint (i32* @global_var_14d58.190 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14f88.400 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32* %r1.global-to-local, align 4
  %v0_fa44 = load i32, i32* @r4, align 4
  store i32 %v0_fa44, i32* %r2.global-to-local, align 4
  %v4_fa48 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14f88.400 to i32), i32 ptrtoint (i32* @global_var_14bc8.172 to i32), i32 %v0_fa44)
  store i32 ptrtoint ([7 x i8]* @global_var_14f90.402 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r1.global-to-local, align 4
  %v0_fa54 = load i32, i32* @r4, align 4
  store i32 %v0_fa54, i32* %r2.global-to-local, align 4
  %v4_fa58 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14f90.402 to i32), i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 %v0_fa54)
  store i32 ptrtoint ([7 x i8]* @global_var_14f90.402 to i32), i32* %r0.global-to-local, align 4
  %v0_fa60 = load i32, i32* @r4, align 4
  store i32 %v0_fa60, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14f90.402 to i32), i32* %r1.global-to-local, align 4
  %v5_fa68 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14f90.402 to i32), i32 ptrtoint ([7 x i8]* @global_var_14f90.402 to i32), i32 %v0_fa60)
  store i32 ptrtoint ([5 x i8]* @global_var_14f98.404 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14f98.404 to i32), i32* %r1.global-to-local, align 4
  %v5_fa78 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f98.404 to i32), i32 ptrtoint ([5 x i8]* @global_var_14f98.404 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_14fa0.406 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_fa88 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14fa0.406 to i32), i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_14fa8.408 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_fa98 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14fa8.408 to i32), i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_14fb0.410 to i32), i32* %r0.global-to-local, align 4
  %v0_faa0 = load i32, i32* @r4, align 4
  store i32 %v0_faa0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14fb0.410 to i32), i32* %r1.global-to-local, align 4
  %v5_faa8 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14fb0.410 to i32), i32 ptrtoint ([7 x i8]* @global_var_14fb0.410 to i32), i32 %v0_faa0)
  store i32 ptrtoint ([6 x i8]* @global_var_14fb8.412 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14fc0.414 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_fab8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14fb8.412 to i32), i32 ptrtoint ([6 x i8]* @global_var_14fc0.414 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14fc8.416 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14fd0.418 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_fac8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14fc8.416 to i32), i32 ptrtoint ([5 x i8]* @global_var_14fd0.418 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_14fd8.420 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14fd8.420 to i32), i32* %r1.global-to-local, align 4
  %v3_fad8 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14fd8.420 to i32), i32 ptrtoint (i32* @global_var_14fd8.420 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_14d6c.422 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14fe0.424 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_fae8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14d6c.422 to i32), i32 ptrtoint (i32* @global_var_14fe0.424 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_14fec.426 to i32), i32* %r0.global-to-local, align 4
  %v0_faf0 = load i32, i32* @r4, align 4
  store i32 %v0_faf0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14fec.426 to i32), i32* %r1.global-to-local, align 4
  %v5_faf8 = call i32 @function_ea18(i32 ptrtoint ([7 x i8]* @global_var_14fec.426 to i32), i32 ptrtoint ([7 x i8]* @global_var_14fec.426 to i32), i32 %v0_faf0)
  store i32 ptrtoint (i32* @global_var_14ff4.428 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14ffc.430 to i32), i32* %r1.global-to-local, align 4
  %v0_fb04 = load i32, i32* @r4, align 4
  store i32 %v0_fb04, i32* %r2.global-to-local, align 4
  %v4_fb08 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14ff4.428 to i32), i32 ptrtoint ([7 x i8]* @global_var_14ffc.430 to i32), i32 %v0_fb04)
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15004.432 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_fb18 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 ptrtoint ([9 x i8]* @global_var_15004.432 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15010.434 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_fb28 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 ptrtoint ([9 x i8]* @global_var_15010.434 to i32), i32 8)
  %v0_fb2c = load i32, i32* @r4, align 4
  store i32 %v0_fb2c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.156 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1501c.436 to i32), i32* %r1.global-to-local, align 4
  %v4_fb38 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_15064.156 to i32), i32 ptrtoint ([7 x i8]* @global_var_1501c.436 to i32), i32 %v0_fb2c)
  store i32 ptrtoint (i32* @global_var_15024.438 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15030.440 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_fb48 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_15024.438 to i32), i32 ptrtoint ([5 x i8]* @global_var_15030.440 to i32), i32 11)
  store i32 ptrtoint ([9 x i8]* @global_var_15038.442 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15038.442 to i32), i32* %r1.global-to-local, align 4
  %v5_fb58 = call i32 @function_ea18(i32 ptrtoint ([9 x i8]* @global_var_15038.442 to i32), i32 ptrtoint ([9 x i8]* @global_var_15038.442 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_15044.444 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15044.444 to i32), i32* %r1.global-to-local, align 4
  %v5_fb68 = call i32 @function_ea18(i32 ptrtoint ([9 x i8]* @global_var_15044.444 to i32), i32 ptrtoint ([9 x i8]* @global_var_15044.444 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_15050.446 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15050.446 to i32), i32* %r1.global-to-local, align 4
  %v5_fb78 = call i32 @function_ea18(i32 ptrtoint ([9 x i8]* @global_var_15050.446 to i32), i32 ptrtoint ([9 x i8]* @global_var_15050.446 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_14d54.262 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14d54.262 to i32), i32* %r1.global-to-local, align 4
  %v3_fb88 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_14d54.262 to i32), i32 ptrtoint (i32* @global_var_14d54.262 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_1505c.448 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1505c.448 to i32), i32* %r1.global-to-local, align 4
  %v3_fb98 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_1505c.448 to i32), i32 ptrtoint (i32* @global_var_1505c.448 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_15068.450 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15068.450 to i32), i32* %r1.global-to-local, align 4
  %v5_fba8 = call i32 @function_ea18(i32 ptrtoint ([9 x i8]* @global_var_15068.450 to i32), i32 ptrtoint ([9 x i8]* @global_var_15068.450 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_15074.452 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15074.452 to i32), i32* %r1.global-to-local, align 4
  %v5_fbb8 = call i32 @function_ea18(i32 ptrtoint ([9 x i8]* @global_var_15074.452 to i32), i32 ptrtoint ([9 x i8]* @global_var_15074.452 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_15080.454 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_fbc8 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_15080.454 to i32), i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15088.456 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_fbd8 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_15088.456 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_14f40.380 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15098.458 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_fbe8 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14f40.380 to i32), i32 ptrtoint (i32* @global_var_15098.458 to i32), i32 14)
  store i32 ptrtoint ([10 x i8]* @global_var_150a8.460 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150b4.462 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_fbf8 = call i32 @function_ea18(i32 ptrtoint ([10 x i8]* @global_var_150a8.460 to i32), i32 ptrtoint (i32* @global_var_150b4.462 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_150c0.464 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_150cc.466 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_fc08 = call i32 @function_ea18(i32 ptrtoint ([10 x i8]* @global_var_150c0.464 to i32), i32 ptrtoint ([11 x i8]* @global_var_150cc.466 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_150d8.468 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14e94.342 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_fc18 = call i32 @function_ea18(i32 ptrtoint ([10 x i8]* @global_var_150d8.468 to i32), i32 ptrtoint (i32* @global_var_14e94.342 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_150e4.470 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14e94.342 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_fc28 = call i32 @function_ea18(i32 ptrtoint ([10 x i8]* @global_var_150e4.470 to i32), i32 ptrtoint (i32* @global_var_14e94.342 to i32), i32 10)
  store i32 ptrtoint (i32* @global_var_15024.438 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f0.472 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v3_fc38 = call i32 @function_ea18(i32 ptrtoint (i32* @global_var_15024.438 to i32), i32 ptrtoint (i32* @global_var_150f0.472 to i32), i32 11)
  store i32 ptrtoint ([13 x i8]* @global_var_150fc.474 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_1510c.476 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fc48 = call i32 @function_ea18(i32 ptrtoint ([13 x i8]* @global_var_150fc.474 to i32), i32 ptrtoint ([13 x i8]* @global_var_1510c.476 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1511c.478 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_fc58 = call i32 @function_ea18(i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), i32 ptrtoint (i32* @global_var_1511c.478 to i32), i32 13)
  store i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15124.480 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_fc68 = call i32 @function_ea18(i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), i32 ptrtoint ([7 x i8]* @global_var_15124.480 to i32), i32 15)
  store i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1512c.482 to i32), i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_fc78 = call i32 @function_ea18(i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), i32 ptrtoint (i32* @global_var_1512c.482 to i32), i32 20)
  store i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1512c.482 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_fc88 = call i32 @function_ea18(i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), i32 ptrtoint (i32* @global_var_1512c.482 to i32), i32 14)
  %v2_fc90 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_fc90, i32* %r0.global-to-local, align 4
  %v2_fc94 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_fc94, i32* %r1.global-to-local, align 4
  %tmp291 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_fca0

dec_label_pc_fca0:                                ; preds = %dec_label_pc_102f8, %dec_label_pc_efb8
  %stack_var_-1872.0 = phi i32 [ %tmp253, %dec_label_pc_efb8 ], [ %stack_var_-1872.2, %dec_label_pc_102f8 ]
  %stack_var_-1884.0 = phi i8* [ %tmp291, %dec_label_pc_efb8 ], [ %stack_var_-1884.1, %dec_label_pc_102f8 ]
  %v0_ffd0 = phi i32 [ %v2_fc90, %dec_label_pc_efb8 ], [ %stack_var_-1880.1, %dec_label_pc_102f8 ]
  %stack_var_-1876.0 = phi i8 [ %v5_efa0.le, %dec_label_pc_efb8 ], [ %stack_var_-1876.1, %dec_label_pc_102f8 ]
  store i32 ptrtoint (i32* @global_var_1d8b8.121 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_fca8 = load i32, i32* @global_var_1d8b8.121, align 4
  store i32 %v2_fca8, i32* @r8, align 4
  %v3_fcac = icmp uge i32 %stack_var_-1872.0, %v2_fca8
  store i1 %v3_fcac, i1* %cpsr_c.global-to-local, align 1
  %v9_fcac = icmp eq i32 %stack_var_-1872.0, %v2_fca8
  store i1 %v9_fcac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fcac, label %dec_label_pc_ff58, label %dec_label_pc_fcb4

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fca0
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_ff28 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_fcc0

dec_label_pc_fcc0:                                ; preds = %.thread47.dec_label_pc_fcc0_crit_edge, %dec_label_pc_fcb4
  %v0_fcc0 = phi i32 [ %v0_fcc0.pre, %.thread47.dec_label_pc_fcc0_crit_edge ], [ 0, %dec_label_pc_fcb4 ]
  store i32 %v0_fcc0, i32* %stack_var_-92, align 4
  store i32 %v0_fcc0, i32* %stack_var_-84, align 4
  %v0_fcd0 = call i32 @function_e240()
  %v1_fcd0 = trunc i32 %v0_fcd0 to i8
  store i32 %v0_fcd0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d900.47 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32* %r1.global-to-local, align 4
  %v2_fcdc = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_fcdc, i32* %r2.global-to-local, align 4
  %v2_fce0 = and i32 %v0_fcd0, 128
  %v3_fce0 = icmp ne i32 %v2_fce0, 0
  store i1 %v3_fce0, i1* %cpsr_c.global-to-local, align 1
  %v4_fce0 = sdiv i32 %v0_fcd0, 256
  store i32 %v4_fce0, i32* %r3.global-to-local, align 4
  %v1_fce4 = trunc i32 %v4_fce0 to i8
  store i8 %v1_fce4, i8* bitcast (i32* @global_var_1d88d.144 to i8*), align 4
  store i32 %v2_fcdc, i32* @global_var_1d894.483, align 4
  store i8 %v1_fcd0, i8* bitcast (i32* @global_var_1d88c.148 to i8*), align 4
  br label %dec_label_pc_fcf0

dec_label_pc_fcf0:                                ; preds = %dec_label_pc_fdc4, %dec_label_pc_fd20, %dec_label_pc_fdf8, %dec_label_pc_fdec, %dec_label_pc_fde0, %dec_label_pc_fdd4, %.thread32, %bb310, %bb309, %bb308, %bb307, %bb306, %dec_label_pc_fdbc, %dec_label_pc_fdb4, %bb302, %dec_label_pc_fd84, %dec_label_pc_fd60, %bb295, %dec_label_pc_fd30, %bb294, %dec_label_pc_fd18, %bb293, %bb312, %dec_label_pc_fcc0
  %v0_fcf0 = call i32 @function_e240()
  store i32 %v0_fcf0, i32* %r0.global-to-local, align 4
  %v1_fcf4 = urem i32 %v0_fcf0, 256
  store i32 %v1_fcf4, i32* %r1.global-to-local, align 4
  %v3_fcf8 = udiv i32 %v0_fcf0, 256
  store i32 %v3_fcf8, i32* %r3.global-to-local, align 4
  %v3_fcfc = udiv i32 %v0_fcf0, 65536
  store i32 %v3_fcfc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd00 = icmp eq i32 %v1_fcf4, 0
  store i1 %v2_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd00, label %bb293, label %bb292

bb292:                                            ; preds = %dec_label_pc_fcf0
  %v3_fd04 = icmp ugt i32 %v1_fcf4, 126
  store i1 %v3_fd04, i1* %cpsr_c.global-to-local, align 1
  %v8_fd04 = icmp eq i32 %v1_fcf4, 127
  store i1 %v8_fd04, i1* %cpsr_z.global-to-local, align 1
  br label %bb293

bb293:                                            ; preds = %dec_label_pc_fcf0, %bb292
  %v0_fd14 = phi i1 [ true, %dec_label_pc_fcf0 ], [ %v8_fd04, %bb292 ]
  %v1_fd08 = urem i32 %v3_fcf8, 256
  store i32 %v1_fd08, i32* %ip.global-to-local, align 4
  %v1_fd0c = urem i32 %v3_fcfc, 256
  store i32 %v1_fd0c, i32* %r2.global-to-local, align 4
  %v1_fd10 = and i32 %v0_fcf0, 8388608
  %v2_fd10 = icmp ne i32 %v1_fd10, 0
  store i1 %v2_fd10, i1* %cpsr_c.global-to-local, align 1
  %v3_fd10 = udiv i32 %v0_fcf0, 16777216
  store i32 %v3_fd10, i32* %r0.global-to-local, align 4
  br i1 %v0_fd14, label %dec_label_pc_fcf0, label %dec_label_pc_fd18

dec_label_pc_fd18:                                ; preds = %bb293
  %v2_fd18 = icmp ugt i32 %v1_fcf4, 2
  store i1 %v2_fd18, i1* %cpsr_c.global-to-local, align 1
  %v7_fd18 = icmp eq i32 %v1_fcf4, 3
  store i1 %v7_fd18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd18, label %dec_label_pc_fcf0, label %dec_label_pc_fd20

dec_label_pc_fd20:                                ; preds = %dec_label_pc_fd18
  %v1_fd20 = add nsw i32 %v1_fcf4, -15
  store i32 %v1_fd20, i32* %r3.global-to-local, align 4
  %v2_fd24 = icmp ugt i32 %v1_fcf4, 55
  store i1 %v2_fd24, i1* %cpsr_c.global-to-local, align 1
  %v7_fd24 = icmp eq i32 %v1_fcf4, 56
  store i1 %v7_fd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd24, label %dec_label_pc_fcf0, label %bb294

bb294:                                            ; preds = %dec_label_pc_fd20
  %v3_fd28 = icmp ne i32 %v1_fd20, 0
  store i1 %v3_fd28, i1* %cpsr_c.global-to-local, align 1
  %v8_fd28 = icmp eq i32 %v1_fd20, 1
  store i1 %v8_fd28, i1* %cpsr_z.global-to-local, align 1
  %v2_fd2c = xor i1 %v3_fd28, true
  %v3_fd2c = or i1 %v8_fd28, %v2_fd2c
  br i1 %v3_fd2c, label %dec_label_pc_fcf0, label %dec_label_pc_fd30

dec_label_pc_fd30:                                ; preds = %bb294
  %v2_fd30 = icmp ugt i32 %v1_fcf4, 9
  store i1 %v2_fd30, i1* %cpsr_c.global-to-local, align 1
  %v7_fd30 = icmp eq i32 %v1_fcf4, 10
  store i1 %v7_fd30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd30, label %dec_label_pc_fcf0, label %dec_label_pc_fd38

dec_label_pc_fd38:                                ; preds = %dec_label_pc_fd30
  %v2_fd38 = icmp ugt i32 %v1_fcf4, 191
  store i1 %v2_fd38, i1* %cpsr_c.global-to-local, align 1
  %v7_fd38 = icmp eq i32 %v1_fcf4, 192
  store i1 %v7_fd38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd38, label %bb295, label %dec_label_pc_fd44

bb295:                                            ; preds = %dec_label_pc_fd38
  %v3_fd3c = icmp ugt i32 %v1_fd08, 167
  store i1 %v3_fd3c, i1* %cpsr_c.global-to-local, align 1
  %v8_fd3c = icmp eq i32 %v1_fd08, 168
  store i1 %v8_fd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd3c, label %dec_label_pc_fcf0, label %dec_label_pc_fd44

dec_label_pc_fd44:                                ; preds = %dec_label_pc_fd38, %bb295
  %v7_fd44 = icmp eq i32 %v1_fcf4, 172
  %.361 = zext i1 %v7_fd44 to i32
  store i32 %.361, i32* %r3.global-to-local, align 4
  %v2_fd50 = icmp ugt i32 %v1_fd08, 14
  store i1 %v2_fd50, i1* %cpsr_c.global-to-local, align 1
  %v7_fd50 = icmp eq i32 %v1_fd08, 15
  store i1 %v7_fd50, i1* %cpsr_z.global-to-local, align 1
  %v2_fd54 = xor i1 %v2_fd50, true
  %v3_fd54 = or i1 %v7_fd50, %v2_fd54
  br i1 %v3_fd54, label %.thread10, label %bb298

.thread10:                                        ; preds = %dec_label_pc_fd44
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fd68

bb298:                                            ; preds = %dec_label_pc_fd44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd58 = icmp eq i1 %v7_fd44, false
  store i1 %v2_fd58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd58, label %dec_label_pc_fd68, label %dec_label_pc_fd60

dec_label_pc_fd60:                                ; preds = %bb298
  %v2_fd60 = icmp ugt i32 %v1_fd08, 30
  store i1 %v2_fd60, i1* %cpsr_c.global-to-local, align 1
  %v7_fd60 = icmp eq i32 %v1_fd08, 31
  store i1 %v7_fd60, i1* %cpsr_z.global-to-local, align 1
  %v2_fd64 = xor i1 %v2_fd60, true
  %v3_fd64 = or i1 %v7_fd60, %v2_fd64
  br i1 %v3_fd64, label %dec_label_pc_fcf0, label %dec_label_pc_fd68

dec_label_pc_fd68:                                ; preds = %.thread10, %dec_label_pc_fd60, %bb298
  %v7_fd68 = icmp eq i32 %v1_fcf4, 100
  %.362 = zext i1 %v7_fd68 to i32
  store i32 %.362, i32* %r3.global-to-local, align 4
  %v2_fd74 = icmp ugt i32 %v1_fd08, 62
  store i1 %v2_fd74, i1* %cpsr_c.global-to-local, align 1
  %v7_fd74 = icmp eq i32 %v1_fd08, 63
  store i1 %v7_fd74, i1* %cpsr_z.global-to-local, align 1
  %v2_fd78 = xor i1 %v2_fd74, true
  %v3_fd78 = or i1 %v7_fd74, %v2_fd78
  br i1 %v3_fd78, label %.thread15, label %bb301

.thread15:                                        ; preds = %dec_label_pc_fd68
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fd8c

bb301:                                            ; preds = %dec_label_pc_fd68
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd7c = icmp eq i1 %v7_fd68, false
  store i1 %v2_fd7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd7c, label %dec_label_pc_fd8c, label %dec_label_pc_fd84

dec_label_pc_fd84:                                ; preds = %bb301
  %v2_fd84 = icmp ugt i32 %v1_fd08, 125
  store i1 %v2_fd84, i1* %cpsr_c.global-to-local, align 1
  %v7_fd84 = icmp eq i32 %v1_fd08, 126
  store i1 %v7_fd84, i1* %cpsr_z.global-to-local, align 1
  %v2_fd88 = xor i1 %v2_fd84, true
  %v3_fd88 = or i1 %v7_fd84, %v2_fd88
  br i1 %v3_fd88, label %dec_label_pc_fcf0, label %dec_label_pc_fd8c

dec_label_pc_fd8c:                                ; preds = %.thread15, %dec_label_pc_fd84, %bb301
  %v2_fd8c = icmp ugt i32 %v1_fcf4, 168
  store i1 %v2_fd8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd8c = icmp eq i32 %v1_fcf4, 169
  store i1 %v7_fd8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd8c, label %bb302, label %dec_label_pc_fd98

bb302:                                            ; preds = %dec_label_pc_fd8c
  %v3_fd90 = icmp eq i32 %v1_fd08, 255
  store i1 %v3_fd90, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fd90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fd90, label %dec_label_pc_fcf0, label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd8c, %bb302
  %v7_fd98 = icmp eq i32 %v1_fcf4, 198
  %.363 = zext i1 %v7_fd98 to i32
  store i32 %.363, i32* %r3.global-to-local, align 4
  %v2_fda4 = icmp ugt i32 %v1_fd08, 16
  store i1 %v2_fda4, i1* %cpsr_c.global-to-local, align 1
  %v7_fda4 = icmp eq i32 %v1_fd08, 17
  store i1 %v7_fda4, i1* %cpsr_z.global-to-local, align 1
  %v2_fda8 = xor i1 %v2_fda4, true
  %v3_fda8 = or i1 %v7_fda4, %v2_fda8
  br i1 %v3_fda8, label %.thread21, label %bb305

.thread21:                                        ; preds = %dec_label_pc_fd98
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdbc

bb305:                                            ; preds = %dec_label_pc_fd98
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdac = icmp eq i1 %v7_fd98, false
  store i1 %v2_fdac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fdac, label %dec_label_pc_fdbc, label %dec_label_pc_fdb4

dec_label_pc_fdb4:                                ; preds = %bb305
  %v2_fdb4 = icmp ugt i32 %v1_fd08, 18
  store i1 %v2_fdb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdb4 = icmp eq i32 %v1_fd08, 19
  store i1 %v7_fdb4, i1* %cpsr_z.global-to-local, align 1
  %v2_fdb8 = xor i1 %v2_fdb4, true
  %v3_fdb8 = or i1 %v7_fdb4, %v2_fdb8
  br i1 %v3_fdb8, label %dec_label_pc_fcf0, label %dec_label_pc_fdbc

dec_label_pc_fdbc:                                ; preds = %.thread21, %dec_label_pc_fdb4, %bb305
  %v2_fdbc = icmp ugt i32 %v1_fcf4, 222
  store i1 %v2_fdbc, i1* %cpsr_c.global-to-local, align 1
  %v7_fdbc = icmp eq i32 %v1_fcf4, 223
  store i1 %v7_fdbc, i1* %cpsr_z.global-to-local, align 1
  %v2_fdc0 = xor i1 %v7_fdbc, true
  %v3_fdc0 = and i1 %v2_fdbc, %v2_fdc0
  br i1 %v3_fdc0, label %dec_label_pc_fcf0, label %dec_label_pc_fdc4

dec_label_pc_fdc4:                                ; preds = %dec_label_pc_fdbc
  %v1_fdc4 = add nsw i32 %v1_fcf4, -6
  store i32 %v1_fdc4, i32* %r3.global-to-local, align 4
  %v2_fdc8 = icmp ugt i32 %v1_fcf4, 10
  store i1 %v2_fdc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdc8 = icmp eq i32 %v1_fcf4, 11
  store i1 %v7_fdc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdc8, label %dec_label_pc_fcf0, label %bb306

bb306:                                            ; preds = %dec_label_pc_fdc4
  %v3_fdcc = icmp ne i32 %v1_fdc4, 0
  store i1 %v3_fdcc, i1* %cpsr_c.global-to-local, align 1
  %v8_fdcc = icmp eq i32 %v1_fdc4, 1
  store i1 %v8_fdcc, i1* %cpsr_z.global-to-local, align 1
  %v2_fdd0 = xor i1 %v3_fdcc, true
  %v3_fdd0 = or i1 %v8_fdcc, %v2_fdd0
  br i1 %v3_fdd0, label %dec_label_pc_fcf0, label %dec_label_pc_fdd4

dec_label_pc_fdd4:                                ; preds = %bb306
  %v2_fdd4 = icmp ugt i32 %v1_fcf4, 21
  store i1 %v2_fdd4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdd4 = icmp eq i32 %v1_fcf4, 22
  store i1 %v7_fdd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdd4, label %dec_label_pc_fcf0, label %bb307

bb307:                                            ; preds = %dec_label_pc_fdd4
  %v3_fdd8 = icmp ugt i32 %v1_fcf4, 20
  store i1 %v3_fdd8, i1* %cpsr_c.global-to-local, align 1
  %v8_fdd8 = icmp eq i32 %v1_fcf4, 21
  store i1 %v8_fdd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdd8, label %dec_label_pc_fcf0, label %dec_label_pc_fde0

dec_label_pc_fde0:                                ; preds = %bb307
  %v2_fde0 = icmp ugt i32 %v1_fcf4, 27
  store i1 %v2_fde0, i1* %cpsr_c.global-to-local, align 1
  %v7_fde0 = icmp eq i32 %v1_fcf4, 28
  store i1 %v7_fde0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fde0, label %dec_label_pc_fcf0, label %bb308

bb308:                                            ; preds = %dec_label_pc_fde0
  %v3_fde4 = icmp ugt i32 %v1_fcf4, 25
  store i1 %v3_fde4, i1* %cpsr_c.global-to-local, align 1
  %v8_fde4 = icmp eq i32 %v1_fcf4, 26
  store i1 %v8_fde4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fde4, label %dec_label_pc_fcf0, label %dec_label_pc_fdec

dec_label_pc_fdec:                                ; preds = %bb308
  %v2_fdec = icmp ugt i32 %v1_fcf4, 29
  store i1 %v2_fdec, i1* %cpsr_c.global-to-local, align 1
  %v7_fdec = icmp eq i32 %v1_fcf4, 30
  store i1 %v7_fdec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdec, label %dec_label_pc_fcf0, label %bb309

bb309:                                            ; preds = %dec_label_pc_fdec
  %v3_fdf0 = icmp ugt i32 %v1_fcf4, 28
  store i1 %v3_fdf0, i1* %cpsr_c.global-to-local, align 1
  %v8_fdf0 = icmp eq i32 %v1_fcf4, 29
  store i1 %v8_fdf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdf0, label %dec_label_pc_fcf0, label %dec_label_pc_fdf8

dec_label_pc_fdf8:                                ; preds = %bb309
  %v2_fdf8 = icmp ugt i32 %v1_fcf4, 54
  store i1 %v2_fdf8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdf8 = icmp eq i32 %v1_fcf4, 55
  store i1 %v7_fdf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdf8, label %dec_label_pc_fcf0, label %bb310

bb310:                                            ; preds = %dec_label_pc_fdf8
  %v3_fdfc = icmp ugt i32 %v1_fcf4, 32
  store i1 %v3_fdfc, i1* %cpsr_c.global-to-local, align 1
  %v8_fdfc = icmp eq i32 %v1_fcf4, 33
  store i1 %v8_fdfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdfc, label %dec_label_pc_fcf0, label %dec_label_pc_fe04

dec_label_pc_fe04:                                ; preds = %bb310
  %v2_fe04 = icmp ugt i32 %v1_fcf4, 214
  store i1 %v2_fe04, i1* %cpsr_c.global-to-local, align 1
  %v7_fe04 = icmp eq i32 %v1_fcf4, 215
  store i1 %v7_fe04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe04, label %.thread32, label %bb311

bb311:                                            ; preds = %dec_label_pc_fe04
  %v3_fe08 = icmp ugt i32 %v1_fcf4, 213
  store i1 %v3_fe08, i1* %cpsr_c.global-to-local, align 1
  %v8_fe08 = icmp eq i32 %v1_fcf4, 214
  store i1 %v8_fe08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe08, label %bb312, label %dec_label_pc_fe18

.thread32:                                        ; preds = %dec_label_pc_fe04
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fcf0

bb312:                                            ; preds = %bb311
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fcf0

dec_label_pc_fe18:                                ; preds = %bb311
  store i32 0, i32* @r4, align 4
  %v5_fe24 = call i32 @llvm.bswap.i32(i32 %v0_fcf0)
  store i32 %v5_fe24, i32* %r3.global-to-local, align 4
  %tmp313 = and i32 %v0_fcf0, 65280
  %tmp314 = call i32 @llvm.bswap.i32(i32 %tmp313)
  %tmp315 = and i32 %v0_fcf0, 16711680
  %tmp316 = call i32 @llvm.bswap.i32(i32 %tmp315)
  %v3_fe30 = mul nuw i32 %v3_fd10, 16777216
  %v3_fe34 = udiv i32 %tmp314, 256
  %v4_fe38 = mul nuw nsw i32 %tmp316, 256
  %tmp317 = and i32 %v0_fcf0, 32768
  %v3_fe3c = icmp ne i32 %tmp317, 0
  store i1 %v3_fe3c, i1* %cpsr_c.global-to-local, align 1
  %v4_fe3c = udiv i32 %v5_fe24, 16777216
  store i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32* @r0, align 4
  %v5_fe3c = or i32 %v4_fe3c, %v3_fe30
  %v5_fe38 = or i32 %v5_fe3c, %v4_fe38
  %v2_fe44 = or i32 %v5_fe38, %v3_fe34
  store i32 %v2_fe44, i32* %r2.global-to-local, align 4
  %v5_fe48 = trunc i32 %v4_fe3c to i8
  store i8 %v5_fe48, i8* @global_var_1d898.484, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1d892.485 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1d893.486 to i8*), align 4
  %v3_fe58 = call i32 @function_c688(i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_fe58, 16777216
  %v1_fe60 = sdiv i32 %sext6, 16777216
  store i32 %v1_fe60, i32* %r3.global-to-local, align 4
  %v2_fe64 = and i32 %v1_fe60, 128
  %v3_fe64 = icmp ne i32 %v2_fe64, 0
  store i1 %v3_fe64, i1* %cpsr_c.global-to-local, align 1
  %v4_fe64 = ashr i32 %sext6, 31
  store i32 %v4_fe64, i32* %r2.global-to-local, align 4
  %v1_fe68 = trunc i32 %v1_fe60 to i8
  store i8 %v1_fe68, i8* bitcast (i32* @global_var_1d892.485 to i8*), align 4
  %v1_fe6c = trunc i32 %v4_fe64 to i8
  store i8 %v1_fe6c, i8* bitcast (i32* @global_var_1d893.486 to i8*), align 4
  %v3_fe70 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fe70, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_fe78 = call i32 @function_12134(i32 %v3_fe70, i32 10)
  store i32 %v4_fe78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe7c = icmp eq i32 %v4_fe78, 0
  store i1 %v2_fe7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe7c, label %.thread212, label %bb318

.thread212:                                       ; preds = %dec_label_pc_fe18
  store i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32* @lr, align 4
  br label %.thread42.thread85

bb318:                                            ; preds = %dec_label_pc_fe18
  store i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_fe8c = load i32, i32* @r4, align 4
  %v2_fe8c = trunc i32 %v1_fe8c to i8
  store i8 %v2_fe8c, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32 2) to i8*), align 2
  %v0_fe90.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fe90.pr.pre, label %.thread42.thread85, label %.thread39

.thread39:                                        ; preds = %bb318
  %v1_fe90 = load i32, i32* %r3.global-to-local, align 4
  %v2_fe90 = trunc i32 %v1_fe90 to i8
  %v3_fe90 = load i32, i32* %r0.global-to-local, align 4
  %v4_fe90 = add i32 %v3_fe90, 3
  %v5_fe90 = inttoptr i32 %v4_fe90 to i8*
  store i8 %v2_fe90, i8* %v5_fe90, align 1
  %v0_fe98.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_fe98.pr.pr, label %.thread45, label %.thread47

.thread42.thread85:                               ; preds = %bb318, %.thread212
  store i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32* %r0.global-to-local, align 4
  br label %.thread45

.thread45:                                        ; preds = %.thread39, %.thread42.thread85
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_fea0 = load i32, i32* @lr, align 4
  %v4_fea0 = add i32 %v3_fea0, 2
  %v5_fea0 = inttoptr i32 %v4_fea0 to i8*
  store i8 9, i8* %v5_fea0, align 1
  %v0_fea4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fea4.pr.pr, label %bb319, label %.thread47

bb319:                                            ; preds = %.thread45
  %v1_fea4 = load i32, i32* %r2.global-to-local, align 4
  %v2_fea4 = trunc i32 %v1_fea4 to i8
  %v3_fea4 = load i32, i32* @lr, align 4
  %v4_fea4 = add i32 %v3_fea4, 3
  %v5_fea4 = inttoptr i32 %v4_fea4 to i8*
  store i8 %v2_fea4, i8* %v5_fea4, align 1
  br label %.thread47

.thread47:                                        ; preds = %.thread39, %.thread45, %bb319
  %v4_fea8 = load i8, i8* @global_var_1d898.484, align 1
  %v5_fea8 = sext i8 %v4_fea8 to i32
  store i32 %v5_fea8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32* @r1, align 4
  store i8 %v4_fea8, i8* @global_var_1d8a0.488, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_fec0 = load i32, i32* %sl.global-to-local, align 4
  %v1_fec0 = trunc i32 %v0_fec0 to i8
  store i8 %v1_fec0, i8* bitcast (i32* @global_var_1d8ac.489 to i8*), align 4
  store i8 %v1_fec0, i8* bitcast (i32* @global_var_1d8ad.490 to i8*), align 4
  %v5_fec8 = call i32 @function_c6e4(i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_fec8, 16777216
  %v1_fed0 = sdiv i32 %sext, 16777216
  %v3_fed8 = ashr i32 %sext, 31
  %v2_fedc = load i32, i32* @global_var_1d89c.141, align 4
  %v1_fee4 = trunc i32 %v3_fed8 to i8
  store i8 %v1_fee4, i8* bitcast (i32* @global_var_1d8ad.490 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_fef8 = load i8, i8* @global_var_1d898.484, align 1
  %v4_fef8 = sext i8 %v3_fef8 to i32
  store i32 %v4_fef8, i32* @r4, align 4
  %v2_fefc = load i32, i32* @global_var_1d920.135, align 4
  store i32 %v2_fefc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d89c.141 to i32), i32* %ip.global-to-local, align 4
  %v1_ff0c = and i32 %v2_fedc, 8388608
  %v2_ff0c = icmp ne i32 %v1_ff0c, 0
  store i1 %v2_ff0c, i1* %cpsr_c.global-to-local, align 1
  %v1_ff14 = trunc i32 %v1_fed0 to i8
  store i8 %v1_ff14, i8* bitcast (i32* @global_var_1d8ac.489 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1d888.137 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_ff28, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_ff3c = call i32 @function_12b98(i32 %v2_fefc, i32* bitcast (i8** @global_var_1d888.137 to i32*), i32 40, i32 16384, i32 %v2_ff28, i32 16)
  store i32 %v8_ff3c, i32* %r0.global-to-local, align 4
  %v3_ff40 = load i32, i32* %stack_var_-52, align 4
  %v1_ff44 = add i32 %v3_ff40, 1
  store i32 %v1_ff44, i32* %r3.global-to-local, align 4
  %v3_ff48 = icmp ugt i32 %v1_ff44, 383
  store i1 %v3_ff48, i1* %cpsr_c.global-to-local, align 1
  %v8_ff48 = icmp eq i32 %v1_ff44, 384
  store i1 %v8_ff48, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ff44, i32* %stack_var_-52, align 4
  %v5_ff50 = icmp slt i32 %v1_ff44, 384
  br i1 %v5_ff50, label %.thread47.dec_label_pc_fcc0_crit_edge, label %dec_label_pc_ff54

.thread47.dec_label_pc_fcc0_crit_edge:            ; preds = %.thread47
  %v0_fcc0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_fcc0

dec_label_pc_ff54:                                ; preds = %.thread47
  %v0_ff54 = load i32, i32* @r8, align 4
  br label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_fca0, %dec_label_pc_ff54
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_fca0 ], [ %v0_ff54, %dec_label_pc_ff54 ]
  %v0_ff58 = call i32 @function_128b4()
  store i32 %v0_ff58, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_ff6c = inttoptr i32 %v0_ff58 to i32*
  %v6_ff94 = inttoptr i32 %v0_ffd0 to i32*
  %v1_ffc0 = add i32 %v0_ffd0, 16
  %v2_ffc0 = inttoptr i32 %v1_ffc0 to i32*
  %v4_ffdc = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_ffe4 = add i32 %v4_ffdc, 1
  %v2_ffe4 = inttoptr i32 %v1_ffe4 to i8*
  %v1_10008 = add i32 %v4_ffdc, 2
  %v2_10008 = inttoptr i32 %v1_10008 to i8*
  %v1_1000c = add i32 %v4_ffdc, 3
  %v2_1000c = inttoptr i32 %v1_1000c to i8*
  %v4_10010 = sext i8 %stack_var_-1876.0 to i32
  %v1_100ec = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_ffd0 = add i32 %v0_ffd0, 9
  %v2_ffd0 = inttoptr i32 %v1_ffd0 to i8*
  %v1_10020 = add i32 %v4_ffdc, 13
  %v2_10020 = inttoptr i32 %v1_10020 to i8*
  %v1_10044 = add i32 %v4_ffdc, 8
  %v2_10044 = inttoptr i32 %v1_10044 to i32*
  %v1_10084 = add i32 %v0_ffd0, 12
  %v2_10084 = inttoptr i32 %v1_10084 to i32*
  br label %dec_label_pc_ff64

dec_label_pc_ff64:                                ; preds = %dec_label_pc_10044, %dec_label_pc_1003c, %dec_label_pc_10034, %dec_label_pc_10004, %dec_label_pc_fff4, %dec_label_pc_ffd0, %dec_label_pc_ffb8, %dec_label_pc_1002c, %dec_label_pc_10020, %dec_label_pc_ffb0, %dec_label_pc_100e4, %dec_label_pc_ff58
  store i32 0, i32* %v2_ff6c, align 4
  %v2_ff74 = load i32, i32* @global_var_1d920.135, align 4
  store i32 %v2_ff74, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_ffd0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_ff94 = call i32 @function_12b38(i32 %v2_ff74, i32* %v6_ff94, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_ff94, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff98 = icmp eq i32 %v7_ff94, 0
  store i1 %v2_ff98, i1* %cpsr_z.global-to-local, align 1
  %tmp320 = icmp slt i32 %v7_ff94, 1
  br i1 %tmp320, label %dec_label_pc_10118, label %dec_label_pc_ffa0

dec_label_pc_ffa0:                                ; preds = %dec_label_pc_ff64
  store i32 %v0_ff58, i32* %lr.global-to-local, align 4
  %v2_ffa4 = load i32, i32* %v2_ff6c, align 4
  store i32 %v2_ffa4, i32* %r3.global-to-local, align 4
  %v2_ffa8 = icmp ugt i32 %v2_ffa4, 10
  store i1 %v2_ffa8, i1* %cpsr_c.global-to-local, align 1
  %v7_ffa8 = icmp eq i32 %v2_ffa4, 11
  store i1 %v7_ffa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffa8, label %dec_label_pc_10118, label %dec_label_pc_ffb0

dec_label_pc_ffb0:                                ; preds = %dec_label_pc_ffa0
  %v2_ffb0 = icmp ugt i32 %v7_ff94, 38
  store i1 %v2_ffb0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffb0 = icmp eq i32 %v7_ff94, 39
  store i1 %v7_ffb0, i1* %cpsr_z.global-to-local, align 1
  %v2_ffb4 = xor i1 %v2_ffb0, true
  %v3_ffb4 = or i1 %v7_ffb0, %v2_ffb4
  br i1 %v3_ffb4, label %dec_label_pc_ff64, label %dec_label_pc_ffb8

dec_label_pc_ffb8:                                ; preds = %dec_label_pc_ffb0
  store i32 %v0_ffd0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d900.47 to i32), i32* %r1.global-to-local, align 4
  %v3_ffc0 = load i32, i32* %v2_ffc0, align 4
  store i32 %v3_ffc0, i32* %r2.global-to-local, align 4
  %v2_ffc4 = load i32, i32* @global_var_1d900.47, align 4
  store i32 %v2_ffc4, i32* %r3.global-to-local, align 4
  %v3_ffc8 = icmp uge i32 %v3_ffc0, %v2_ffc4
  store i1 %v3_ffc8, i1* %cpsr_c.global-to-local, align 1
  %v9_ffc8 = icmp eq i32 %v3_ffc0, %v2_ffc4
  store i1 %v9_ffc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ffc8, label %dec_label_pc_ffd0, label %dec_label_pc_ff64

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ffb8
  %v3_ffd0 = load i8, i8* %v2_ffd0, align 1
  %v4_ffd0 = zext i8 %v3_ffd0 to i32
  store i32 %v4_ffd0, i32* %r3.global-to-local, align 4
  %v2_ffd4 = icmp ugt i8 %v3_ffd0, 5
  store i1 %v2_ffd4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffd4 = icmp eq i8 %v3_ffd0, 6
  store i1 %v7_ffd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffd4, label %dec_label_pc_ffdc, label %dec_label_pc_ff64

dec_label_pc_ffdc:                                ; preds = %dec_label_pc_ffd0
  store i32 %v4_ffdc, i32* %r3.global-to-local, align 4
  %v2_ffe0 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_ffe0 = zext i8 %v2_ffe0 to i32
  store i32 %v3_ffe0, i32* %r2.global-to-local, align 4
  %v3_ffe4 = load i8, i8* %v2_ffe4, align 1
  %v4_ffe4 = zext i8 %v3_ffe4 to i32
  store i32 %v4_ffe4, i32* %r3.global-to-local, align 4
  %v4_ffe8 = mul nuw nsw i32 %v4_ffe4, 256
  %v5_ffe8 = or i32 %v4_ffe8, %v3_ffe0
  store i32 %v5_ffe8, i32* %r2.global-to-local, align 4
  %v2_ffec = icmp ugt i32 %v5_ffe8, 5887
  store i1 %v2_ffec, i1* %cpsr_c.global-to-local, align 1
  %v7_ffec = icmp eq i32 %v5_ffe8, 5888
  store i1 %v7_ffec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffec, label %dec_label_pc_10004, label %dec_label_pc_fff4

dec_label_pc_fff4:                                ; preds = %dec_label_pc_ffdc
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_fffc = icmp ugt i32 %v5_ffe8, 4872
  store i1 %v3_fffc, i1* %cpsr_c.global-to-local, align 1
  %v9_fffc = icmp eq i32 %v5_ffe8, 4873
  store i1 %v9_fffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fffc, label %dec_label_pc_10004, label %dec_label_pc_ff64

dec_label_pc_10004:                               ; preds = %dec_label_pc_fff4, %dec_label_pc_ffdc
  store i32 %v4_ffdc, i32* %ip.global-to-local, align 4
  %v3_10008 = load i8, i8* %v2_10008, align 1
  %v4_10008 = zext i8 %v3_10008 to i32
  store i32 %v4_10008, i32* %r3.global-to-local, align 4
  %v3_1000c = load i8, i8* %v2_1000c, align 1
  %v4_1000c = zext i8 %v3_1000c to i32
  store i32 %v4_1000c, i32* %r2.global-to-local, align 4
  store i32 %v4_10010, i32* %lr.global-to-local, align 4
  %v4_10014 = mul nuw nsw i32 %v4_1000c, 256
  %v5_10014 = or i32 %v4_10014, %v4_10008
  store i32 %v5_10014, i32* %r3.global-to-local, align 4
  %v3_10018 = icmp uge i32 %v5_10014, %v4_10010
  store i1 %v3_10018, i1* %cpsr_c.global-to-local, align 1
  %v9_10018 = icmp eq i32 %v5_10014, %v4_10010
  store i1 %v9_10018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10018, label %dec_label_pc_10020, label %dec_label_pc_ff64

dec_label_pc_10020:                               ; preds = %dec_label_pc_10004
  %v3_10020 = load i8, i8* %v2_10020, align 1
  %v4_10020 = zext i8 %v3_10020 to i32
  store i32 %v4_10020, i32* %r3.global-to-local, align 4
  %v1_10024 = and i32 %v4_10020, 2
  %v2_10024 = icmp eq i32 %v1_10024, 0
  store i1 %v2_10024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10024, label %dec_label_pc_ff64, label %dec_label_pc_1002c

dec_label_pc_1002c:                               ; preds = %dec_label_pc_10020
  %v1_1002c = and i32 %v4_10020, 16
  %v2_1002c = icmp eq i32 %v1_1002c, 0
  store i1 %v2_1002c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1002c, label %dec_label_pc_ff64, label %dec_label_pc_10034

dec_label_pc_10034:                               ; preds = %dec_label_pc_1002c
  %v1_10034 = and i32 %v4_10020, 4
  %v2_10034 = icmp eq i32 %v1_10034, 0
  store i1 %v2_10034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10034, label %dec_label_pc_1003c, label %dec_label_pc_ff64

dec_label_pc_1003c:                               ; preds = %dec_label_pc_10034
  %tmp470 = urem i8 %v3_10020, 2
  %v2_1003c = icmp eq i8 %tmp470, 0
  store i1 %v2_1003c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1003c, label %dec_label_pc_10044, label %dec_label_pc_ff64

dec_label_pc_10044:                               ; preds = %dec_label_pc_1003c
  %v3_10044 = load i32, i32* %v2_10044, align 4
  %v2_10060 = call i32 @llvm.bswap.i32(i32 %v3_10044)
  %v1_10064 = add i32 %v2_10060, -1
  %v1_10068 = udiv i32 %v1_10064, 256
  %v3_1006c = and i32 %v1_10068, 65280
  %v1_10070 = and i32 %v1_10064, 65280
  store i32 %v1_10070, i32* %r2.global-to-local, align 4
  %v3_10074 = mul i32 %v1_10064, 16777216
  %v4_10078 = udiv i32 %v1_10064, 16777216
  %v5_10078 = or i32 %v3_1006c, %v4_10078
  store i32 %v5_10078, i32* %r1.global-to-local, align 4
  store i32 %v0_ffd0, i32* %r3.global-to-local, align 4
  %v4_10080 = mul nuw nsw i32 %v1_10070, 256
  %v5_10080 = or i32 %v4_10080, %v3_10074
  store i32 %v5_10080, i32* %r0.global-to-local, align 4
  %v3_10084 = load i32, i32* %v2_10084, align 4
  store i32 %v3_10084, i32* %r2.global-to-local, align 4
  %v2_10088 = call i32 @llvm.bswap.i32(i32 %v1_10064)
  store i32 %v2_10088, i32* %ip.global-to-local, align 4
  %v3_1008c = icmp uge i32 %v2_10088, %v3_10084
  store i1 %v3_1008c, i1* %cpsr_c.global-to-local, align 1
  %v9_1008c = icmp eq i32 %v2_10088, %v3_10084
  store i1 %v9_1008c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1008c, label %dec_label_pc_10094, label %dec_label_pc_ff64

dec_label_pc_10094:                               ; preds = %dec_label_pc_10044
  %v0_10094 = load i32, i32* @r4, align 4
  %v2_10094 = icmp ugt i32 %v0_10094, 254
  store i1 %v2_10094, i1* %cpsr_c.global-to-local, align 1
  %v7_10094 = icmp eq i32 %v0_10094, 255
  store i1 %v7_10094, i1* %cpsr_z.global-to-local, align 1
  %v8_10098 = icmp sgt i32 %v0_10094, 255
  br i1 %v8_10098, label %dec_label_pc_10118, label %dec_label_pc_1009c

dec_label_pc_1009c:                               ; preds = %dec_label_pc_10094
  store i32 ptrtoint (i32* @global_var_1d91c.133 to i32), i32* %lr.global-to-local, align 4
  %v3_100a0 = mul i32 %v0_10094, 256
  store i32 %v3_100a0, i32* %r2.global-to-local, align 4
  %v2_100a4 = load i32, i32* @global_var_1d91c.133, align 4
  store i32 %v2_100a4, i32* %r1.global-to-local, align 4
  %v2_100ac = mul i32 %v0_10094, 288
  store i32 %v2_100ac, i32* %r3.global-to-local, align 4
  %v2_100b0 = add i32 %v2_100a4, %v2_100ac
  store i32 %v2_100b0, i32* @r0, align 4
  %v1_100b4 = add i32 %v2_100b0, 12
  %v2_100b4 = inttoptr i32 %v1_100b4 to i32*
  %v3_100b4 = load i32, i32* %v2_100b4, align 4
  store i32 %v3_100b4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100b8 = icmp eq i32 %v3_100b4, 0
  store i1 %v2_100b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100b8, label %dec_label_pc_100e4, label %dec_label_pc_100c4.preheader

dec_label_pc_100c4.preheader:                     ; preds = %dec_label_pc_1009c
  %v2_100bc = add i32 %v2_100b0, 288
  store i32 %v2_100bc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_100c4

dec_label_pc_100c4:                               ; preds = %dec_label_pc_100c4.preheader, %dec_label_pc_100d0
  %v0_100d0 = phi i32 [ %v2_100bc, %dec_label_pc_100c4.preheader ], [ %v1_100dc, %dec_label_pc_100d0 ]
  %v0_100c4 = phi i32 [ %v0_10094, %dec_label_pc_100c4.preheader ], [ %v1_100c4, %dec_label_pc_100d0 ]
  %v1_100c4 = add i32 %v0_100c4, 1
  store i32 %v1_100c4, i32* @r4, align 4
  %v7_100c8 = icmp eq i32 %v1_100c4, 256
  br i1 %v7_100c8, label %dec_label_pc_10118.loopexit, label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %dec_label_pc_100c4
  store i32 %v0_100d0, i32* @r0, align 4
  %v1_100d4 = add i32 %v0_100d0, 12
  %v2_100d4 = inttoptr i32 %v1_100d4 to i32*
  %v3_100d4 = load i32, i32* %v2_100d4, align 4
  %v2_100d8 = icmp eq i32 %v3_100d4, 0
  %v1_100dc = add i32 %v0_100d0, 288
  store i32 %v1_100dc, i32* %r3.global-to-local, align 4
  br i1 %v2_100d8, label %dec_label_pc_100e4.loopexit, label %dec_label_pc_100c4

dec_label_pc_100e4.loopexit:                      ; preds = %dec_label_pc_100d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_100e4

dec_label_pc_100e4:                               ; preds = %dec_label_pc_100e4.loopexit, %dec_label_pc_1009c
  %v1_100e4 = phi i32 [ %v0_100d0, %dec_label_pc_100e4.loopexit ], [ %v2_100b0, %dec_label_pc_1009c ]
  %v2_100e4 = add i32 %v1_100e4, 16
  %v3_100e4 = inttoptr i32 %v2_100e4 to i32*
  store i32 %v3_10084, i32* %v3_100e4, align 4
  store i32 %v4_ffdc, i32* %r1.global-to-local, align 4
  %v2_100ec = load i32, i32* %v1_100ec, align 4
  store i32 %v2_100ec, i32* %r2.global-to-local, align 4
  %v1_100f0 = and i32 %v2_100ec, 128
  %v2_100f0 = icmp ne i32 %v1_100f0, 0
  store i1 %v2_100f0, i1* %cpsr_c.global-to-local, align 1
  %v3_100f0 = sdiv i32 %v2_100ec, 256
  store i32 %v3_100f0, i32* %r3.global-to-local, align 4
  %v1_100f4 = trunc i32 %v3_100f0 to i8
  %v2_100f4 = load i32, i32* @r0, align 4
  %v3_100f4 = add i32 %v2_100f4, 21
  %v4_100f4 = inttoptr i32 %v3_100f4 to i8*
  store i8 %v1_100f4, i8* %v4_100f4, align 1
  %v0_100f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_100f8 = trunc i32 %v0_100f8 to i8
  %v2_100f8 = load i32, i32* @r0, align 4
  %v3_100f8 = add i32 %v2_100f8, 20
  %v4_100f8 = inttoptr i32 %v3_100f8 to i8*
  store i8 %v1_100f8, i8* %v4_100f8, align 1
  %v0_100fc = call i32 @function_e944()
  store i32 %v0_100fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff64

dec_label_pc_10104:                               ; preds = %dec_label_pc_ef48
  store i32 ptrtoint (i32* @global_var_1d920.135 to i32), i32* %r2.global-to-local, align 4
  %v2_10108 = load i32, i32* @global_var_1d920.135, align 4
  store i32 %v2_10108, i32* %r0.global-to-local, align 4
  %v1_1010c = call i32 @function_122e0(i32 %v2_10108)
  store i32 %v1_1010c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10110

dec_label_pc_10110:                               ; preds = %dec_label_pc_ef20, %dec_label_pc_10104
  %v0_10110 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10110, i32* %r0.global-to-local, align 4
  %v1_10114 = call i32 @function_13684(i32 %v0_10110)
  store i32 %v1_10114, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10118

dec_label_pc_10118.loopexit:                      ; preds = %dec_label_pc_100c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10118

dec_label_pc_10118:                               ; preds = %dec_label_pc_10094, %dec_label_pc_ffa0, %dec_label_pc_ff64, %dec_label_pc_10118.loopexit, %dec_label_pc_10110
  %stack_var_-1868.0 = phi i32 [ %tmp246, %dec_label_pc_10110 ], [ %v0_ff58, %dec_label_pc_10118.loopexit ], [ %v0_ff58, %dec_label_pc_ff64 ], [ %v0_ff58, %dec_label_pc_ffa0 ], [ %v0_ff58, %dec_label_pc_10094 ]
  %stack_var_-1872.2 = phi i32 [ %tmp253, %dec_label_pc_10110 ], [ %stack_var_-1872.1, %dec_label_pc_10118.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_ff64 ], [ %stack_var_-1872.1, %dec_label_pc_ffa0 ], [ %stack_var_-1872.1, %dec_label_pc_10094 ]
  %stack_var_-1884.1 = phi i8* [ %tmp254, %dec_label_pc_10110 ], [ %stack_var_-1884.0, %dec_label_pc_10118.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_ff64 ], [ %stack_var_-1884.0, %dec_label_pc_ffa0 ], [ %stack_var_-1884.0, %dec_label_pc_10094 ]
  %stack_var_-1880.1 = phi i32 [ %tmp255, %dec_label_pc_10110 ], [ %v0_ffd0, %dec_label_pc_10118.loopexit ], [ %v0_ffd0, %dec_label_pc_ff64 ], [ %v0_ffd0, %dec_label_pc_ffa0 ], [ %v0_ffd0, %dec_label_pc_10094 ]
  %stack_var_-1876.1 = phi i8 [ %tmp256, %dec_label_pc_10110 ], [ %stack_var_-1876.0, %dec_label_pc_10118.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_ff64 ], [ %stack_var_-1876.0, %dec_label_pc_ffa0 ], [ %stack_var_-1876.0, %dec_label_pc_10094 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_10130421 = load i32, i32* @sp, align 4
  %v3_10130422 = add i32 %v2_10130421, 1672
  %v4_10130423 = inttoptr i32 %v3_10130422 to i32*
  store i32 0, i32* %v4_10130423, align 4
  br label %dec_label_pc_10120.dec_label_pc_10120_crit_edge

dec_label_pc_10120.dec_label_pc_10120_crit_edge:  ; preds = %dec_label_pc_10118, %dec_label_pc_10120.dec_label_pc_10120_crit_edge
  %v0_10120.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10130.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10124 = add i32 %v0_10120.pre, 4
  store i32 %v1_10124, i32* %r3.global-to-local, align 4
  %v1_10128 = add i32 %v0_10120.pre, 1672
  store i32 %v1_10128, i32* %ip.global-to-local, align 4
  %v7_1012c = icmp eq i32 %v1_10124, 128
  %v2_10130 = load i32, i32* @sp, align 4
  %v3_10130 = add i32 %v2_10130, %v1_10128
  %v4_10130 = inttoptr i32 %v3_10130 to i32*
  store i32 %v0_10130.pre, i32* %v4_10130, align 4
  br i1 %v7_1012c, label %dec_label_pc_10138, label %dec_label_pc_10120.dec_label_pc_10120_crit_edge

dec_label_pc_10138:                               ; preds = %dec_label_pc_10120.dec_label_pc_10120_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10138 = load i32, i32* %r2.global-to-local, align 4
  %v1_10140415 = add i32 %v0_10138, 4
  store i32 %v1_10140415, i32* %r3.global-to-local, align 4
  %v1_10144416 = add i32 %v0_10138, 1544
  store i32 %v1_10144416, i32* %lr.global-to-local, align 4
  %v7_10148417 = icmp eq i32 %v1_10140415, 128
  %v2_1014c418 = load i32, i32* @sp, align 4
  %v3_1014c419 = add i32 %v2_1014c418, %v1_10144416
  %v4_1014c420 = inttoptr i32 %v3_1014c419 to i32*
  store i32 %v0_10138, i32* %v4_1014c420, align 4
  br i1 %v7_10148417, label %dec_label_pc_10154, label %dec_label_pc_1013c.dec_label_pc_1013c_crit_edge

dec_label_pc_1013c.dec_label_pc_1013c_crit_edge:  ; preds = %dec_label_pc_10138, %dec_label_pc_1013c.dec_label_pc_1013c_crit_edge
  %v0_1013c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_1014c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10140 = add i32 %v0_1013c.pre, 4
  store i32 %v1_10140, i32* %r3.global-to-local, align 4
  %v1_10144 = add i32 %v0_1013c.pre, 1544
  store i32 %v1_10144, i32* %lr.global-to-local, align 4
  %v7_10148 = icmp eq i32 %v1_10140, 128
  %v2_1014c = load i32, i32* @sp, align 4
  %v3_1014c = add i32 %v2_1014c, %v1_10144
  %v4_1014c = inttoptr i32 %v3_1014c to i32*
  store i32 %v0_1014c.pre, i32* %v4_1014c, align 4
  br i1 %v7_10148, label %dec_label_pc_10154, label %dec_label_pc_1013c.dec_label_pc_1013c_crit_edge

dec_label_pc_10154:                               ; preds = %dec_label_pc_1013c.dec_label_pc_1013c_crit_edge, %dec_label_pc_10138
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10154 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10154, i32* @r6, align 4
  store i32 %v0_10154, i32* @r5, align 4
  store i32 %v0_10154, i32* @r7, align 4
  store i32 %v0_10154, i32* %stack_var_-52, align 4
  %v2_10210 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_101cc

dec_label_pc_10168:                               ; preds = %dec_label_pc_101f4, %dec_label_pc_101cc
  %storemerge236 = phi i32 [ 30, %dec_label_pc_101cc ], [ 5, %dec_label_pc_101f4 ]
  store i32 %storemerge236, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d8b8.121 to i32), i32* %r2.global-to-local, align 4
  %v2_1016c = load i32, i32* @global_var_1d8b8.121, align 4
  store i32 %v2_1016c, i32* %r3.global-to-local, align 4
  %v1_10170 = add i32 %v2_101e0, 8
  %v2_10170 = inttoptr i32 %v1_10170 to i32*
  %v3_10170 = load i32, i32* %v2_10170, align 4
  store i32 %v3_10170, i32* %r2.global-to-local, align 4
  %v2_10174 = sub i32 %v2_1016c, %v3_10170
  store i32 %v2_10174, i32* %r3.global-to-local, align 4
  %v3_10178 = icmp uge i32 %v2_10174, %storemerge236
  store i1 %v3_10178, i1* %cpsr_c.global-to-local, align 1
  %v9_10178 = icmp eq i32 %v2_10174, %storemerge236
  store i1 %v9_10178, i1* %cpsr_z.global-to-local, align 1
  %v2_1017c = xor i1 %v9_10178, true
  %v3_1017c = and i1 %v3_10178, %v2_1017c
  br i1 %v3_1017c, label %dec_label_pc_10234, label %dec_label_pc_10180

dec_label_pc_10180:                               ; preds = %dec_label_pc_10168
  store i1 %v2_101e8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_101e8, i1* %cpsr_z.global-to-local, align 1
  %v1_10204 = add i32 %v2_101e0, 4
  %v2_10204 = inttoptr i32 %v1_10204 to i32*
  %v3_10204 = load i32, i32* %v2_10204, align 4
  br i1 %v7_101e8, label %dec_label_pc_10204, label %dec_label_pc_10188

dec_label_pc_10188:                               ; preds = %dec_label_pc_10180
  store i32 %v3_10204, i32* %ip.global-to-local, align 4
  %v3_1018c = udiv i32 %v3_10204, 32
  store i32 %v2_10210, i32* %r0.global-to-local, align 4
  %v3_10194 = mul nuw nsw i32 %v3_1018c, 4
  %v2_10198 = add i32 %v3_10194, %v2_10210
  store i32 %v2_10198, i32* %r3.global-to-local, align 4
  %v1_1019c = add i32 %v2_10198, -184
  %v2_1019c = inttoptr i32 %v1_1019c to i32*
  %v3_1019c = load i32, i32* %v2_1019c, align 4
  %v1_101a0 = urem i32 %v3_10204, 32
  store i32 %v1_101a0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_101a8 = shl i32 1, %v1_101a0
  %v8_101a8 = or i32 %v3_1019c, %v7_101a8
  store i32 %v8_101a8, i32* %r2.global-to-local, align 4
  store i32 %v8_101a8, i32* %v2_1019c, align 4
  %v0_101b0 = load i32, i32* @r6, align 4
  %v1_101b0 = load i32, i32* %ip.global-to-local, align 4
  %v3_101b0 = icmp uge i32 %v0_101b0, %v1_101b0
  store i1 %v3_101b0, i1* %cpsr_c.global-to-local, align 1
  %v9_101b0 = icmp eq i32 %v0_101b0, %v1_101b0
  store i1 %v9_101b0, i1* %cpsr_z.global-to-local, align 1
  %v5_101b4 = icmp slt i32 %v0_101b0, %v1_101b0
  br i1 %v5_101b4, label %bb322, label %bb323

bb322:                                            ; preds = %dec_label_pc_10188
  store i32 %v1_101b0, i32* @r6, align 4
  br label %bb323

bb323:                                            ; preds = %dec_label_pc_101f4, %dec_label_pc_10fdc, %dec_label_pc_10268, %bb325, %dec_label_pc_10188, %bb322
  %v3_101b8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_101b8, i32* %r3.global-to-local, align 4
  %v1_101bc = add i32 %v3_101b8, 1
  store i32 %v1_101bc, i32* %r2.global-to-local, align 4
  %v2_101c0 = icmp ugt i32 %v1_101bc, 254
  store i1 %v2_101c0, i1* %cpsr_c.global-to-local, align 1
  %v7_101c0 = icmp eq i32 %v1_101bc, 255
  store i1 %v7_101c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_101bc, i32* %stack_var_-52, align 4
  %v8_101c8 = icmp sgt i32 %v1_101bc, 255
  br i1 %v8_101c8, label %dec_label_pc_10274, label %dec_label_pc_101cc

dec_label_pc_101cc:                               ; preds = %bb323, %dec_label_pc_10154
  %v0_101d8 = phi i32 [ %v1_101bc, %bb323 ], [ %v0_10154, %dec_label_pc_10154 ]
  store i32 ptrtoint (i32* @global_var_1d91c.133 to i32), i32* %r0.global-to-local, align 4
  %v3_101d0 = mul i32 %v0_101d8, 256
  store i32 %v3_101d0, i32* %r3.global-to-local, align 4
  %v2_101d4 = load i32, i32* @global_var_1d91c.133, align 4
  store i32 %v2_101d4, i32* %r1.global-to-local, align 4
  %v2_101dc = mul i32 %v0_101d8, 288
  store i32 %v2_101dc, i32* %r2.global-to-local, align 4
  %v2_101e0 = add i32 %v2_101d4, %v2_101dc
  store i32 %v2_101e0, i32* @r4, align 4
  %v1_101e4 = add i32 %v2_101e0, 12
  %v2_101e4 = inttoptr i32 %v1_101e4 to i32*
  %v3_101e4 = load i32, i32* %v2_101e4, align 4
  store i32 %v3_101e4, i32* %ip.global-to-local, align 4
  %v2_101e8 = icmp ne i32 %v3_101e4, 0
  store i1 %v2_101e8, i1* %cpsr_c.global-to-local, align 1
  %v7_101e8 = icmp eq i32 %v3_101e4, 1
  store i1 %v7_101e8, i1* %cpsr_z.global-to-local, align 1
  %v2_101ec = xor i1 %v7_101e8, true
  %v3_101ec = and i1 %v2_101e8, %v2_101ec
  br i1 %v3_101ec, label %dec_label_pc_10168, label %dec_label_pc_101f4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_101cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101f4 = icmp eq i32 %v3_101e4, 0
  store i1 %v2_101f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101f4, label %bb323, label %dec_label_pc_10168

dec_label_pc_10204:                               ; preds = %dec_label_pc_10180
  store i32 %v3_10204, i32* %r0.global-to-local, align 4
  %v3_10208 = udiv i32 %v3_10204, 32
  %v3_1020c = mul nuw nsw i32 %v3_10208, 4
  store i32 %v2_10210, i32* %lr.global-to-local, align 4
  %v2_10214 = add i32 %v3_1020c, %v2_10210
  store i32 %v2_10214, i32* %r3.global-to-local, align 4
  %v1_10218 = add i32 %v2_10214, -312
  %v2_10218 = inttoptr i32 %v1_10218 to i32*
  %v3_10218 = load i32, i32* %v2_10218, align 4
  %v1_1021c = urem i32 %v3_10204, 32
  store i32 %v1_1021c, i32* %r1.global-to-local, align 4
  %v7_10220 = shl i32 1, %v1_1021c
  %v8_10220 = or i32 %v3_10218, %v7_10220
  store i32 %v8_10220, i32* %r2.global-to-local, align 4
  %v0_10224 = load i32, i32* @r5, align 4
  %v3_10224 = icmp uge i32 %v0_10224, %v3_10204
  store i1 %v3_10224, i1* %cpsr_c.global-to-local, align 1
  %v9_10224 = icmp eq i32 %v0_10224, %v3_10204
  store i1 %v9_10224, i1* %cpsr_z.global-to-local, align 1
  %v5_10228 = icmp slt i32 %v0_10224, %v3_10204
  br i1 %v5_10228, label %bb324, label %bb325

bb324:                                            ; preds = %dec_label_pc_10204
  store i32 %v3_10204, i32* @r5, align 4
  br label %bb325

bb325:                                            ; preds = %dec_label_pc_10204, %bb324
  store i32 %v8_10220, i32* %v2_10218, align 4
  br label %bb323

dec_label_pc_10234:                               ; preds = %dec_label_pc_10168
  %v1_10234 = add i32 %v2_101e0, 4
  %v2_10234 = inttoptr i32 %v1_10234 to i32*
  %v3_10234 = load i32, i32* %v2_10234, align 4
  store i32 %v3_10234, i32* %r0.global-to-local, align 4
  %v1_10238 = call i32 @function_122e0(i32 %v3_10234)
  store i32 %v1_10238, i32* %r0.global-to-local, align 4
  %v0_1023c = load i32, i32* @r4, align 4
  %v1_1023c = add i32 %v0_1023c, 12
  %v2_1023c = inttoptr i32 %v1_1023c to i32*
  %v3_1023c = load i32, i32* %v2_1023c, align 4
  store i32 %v3_1023c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10244 = icmp ugt i32 %v3_1023c, 1
  store i1 %v2_10244, i1* %cpsr_c.global-to-local, align 1
  %v7_10244 = icmp eq i32 %v3_1023c, 2
  store i1 %v7_10244, i1* %cpsr_z.global-to-local, align 1
  %v2_10248 = add i32 %v0_1023c, 4
  %v3_10248 = inttoptr i32 %v2_10248 to i32*
  store i32 -1, i32* %v3_10248, align 4
  %v2_1024c = xor i1 %v2_10244, true
  %v3_1024c = or i1 %v7_10244, %v2_1024c
  br i1 %v3_1024c, label %dec_label_pc_10fdc, label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %dec_label_pc_10234
  %v0_10250 = load i32, i32* @r4, align 4
  %v1_10250 = add i32 %v0_10250, 284
  %v2_10250 = inttoptr i32 %v1_10250 to i8*
  %v3_10250 = load i8, i8* %v2_10250, align 1
  %v4_10250 = zext i8 %v3_10250 to i32
  %v1_10254 = add nuw nsw i32 %v4_10250, 1
  %v1_10258 = urem i32 %v1_10254, 256
  store i32 %v1_10258, i32* %r3.global-to-local, align 4
  %v2_1025c = icmp ugt i32 %v1_10258, 9
  store i1 %v2_1025c, i1* %cpsr_c.global-to-local, align 1
  %v7_1025c = icmp eq i32 %v1_10258, 10
  store i1 %v7_1025c, i1* %cpsr_z.global-to-local, align 1
  %v1_10260 = trunc i32 %v1_10254 to i8
  store i8 %v1_10260, i8* %v2_10250, align 1
  %v0_10264 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10264, label %dec_label_pc_10fdc, label %dec_label_pc_10268

dec_label_pc_10268:                               ; preds = %dec_label_pc_10250
  %v0_10268 = load i32, i32* @r4, align 4
  store i32 %v0_10268, i32* @r0, align 4
  %v0_1026c = call i32 @function_e944()
  store i32 %v0_1026c, i32* %r0.global-to-local, align 4
  br label %bb323

dec_label_pc_10274:                               ; preds = %bb323
  store i32 1, i32* %stack_var_-64, align 4
  %v0_1027c = load i32, i32* @r6, align 4
  %v1_1027c = load i32, i32* @r5, align 4
  %v3_1027c = icmp uge i32 %v0_1027c, %v1_1027c
  store i1 %v3_1027c, i1* %cpsr_c.global-to-local, align 1
  %v9_1027c = icmp eq i32 %v0_1027c, %v1_1027c
  store i1 %v9_1027c, i1* %cpsr_z.global-to-local, align 1
  %v5_10280 = icmp slt i32 %v0_1027c, %v1_1027c
  %storemerge87 = select i1 %v5_10280, i32 %v1_1027c, i32 %v0_1027c
  %v2_10294 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_10294, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1029c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_1029c, i32* %ip.global-to-local, align 4
  %v2_102a0 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_102a0, i32* %r1.global-to-local, align 4
  %v1_102a4 = add i32 %storemerge87, 1
  store i32 %v1_102a4, i32* %r0.global-to-local, align 4
  %v5_102b0 = call i32 @function_12500(i32 %v1_102a4, i32 %v2_102a0, i32 %v2_10294, i32 0, i32 %v2_1029c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_102b8 = call i32 @function_125b0(i32* null)
  store i32 ptrtoint (i32* @global_var_1d8b8.121 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_102b8, i32* @global_var_1d8b8.121, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_104f0 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_10598 = ptrtoint i32* %stack_var_-41 to i32
  %v2_10c9c = ptrtoint i32* %stack_var_-84 to i32
  %v2_10ca4 = ptrtoint i32* %stack_var_-73 to i32
  %v2_10440 = ptrtoint i32* %stack_var_-56 to i32
  %v2_108cc = ptrtoint i32* %stack_var_-48 to i32
  %v2_10efc = ptrtoint i32* %stack_var_-92 to i32
  %v3_10f04 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v2_10f5c = ptrtoint i32* %stack_var_-38 to i32
  br label %dec_label_pc_1030c

dec_label_pc_102d4:                               ; preds = %dec_label_pc_10330, %dec_label_pc_10418
  %v0_102e8 = phi i32 [ %v3_10324, %dec_label_pc_10330 ], [ %v0_102d4.pre, %dec_label_pc_10418 ]
  %v3_102d4 = udiv i32 %v0_102e8, 32
  %v3_102d8 = mul nuw nsw i32 %v3_102d4, 4
  store i32 %v2_10210, i32* @lr, align 4
  %v2_102e0 = add i32 %v3_102d8, %v2_10210
  store i32 %v2_102e0, i32* %r3.global-to-local, align 4
  %v1_102e4 = add i32 %v2_102e0, -184
  %v2_102e4 = inttoptr i32 %v1_102e4 to i32*
  %v3_102e4 = load i32, i32* %v2_102e4, align 4
  %v1_102e8 = urem i32 %v0_102e8, 32
  store i32 %v1_102e8, i32* %r1.global-to-local, align 4
  %v2_102ec = add nsw i32 %v1_102e8, -1
  %v3_102ec = shl i32 1, %v2_102ec
  %v4_102ec = and i32 %v3_102ec, %v3_102e4
  %v5_102ec = icmp ne i32 %v4_102ec, 0
  store i1 %v5_102ec, i1* %cpsr_c.global-to-local, align 1
  %v6_102ec = lshr i32 %v3_102e4, %v1_102e8
  store i32 %v6_102ec, i32* %r2.global-to-local, align 4
  %v1_102f0 = urem i32 %v6_102ec, 2
  %v2_102f0 = icmp eq i32 %v1_102f0, 0
  store i1 %v2_102f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102f0, label %dec_label_pc_102f8, label %dec_label_pc_104cc.preheader

dec_label_pc_104cc.preheader:                     ; preds = %dec_label_pc_102d4
  %v0_104cc111 = load i32, i32* @r5, align 4
  %v1_104cc112 = add i32 %v0_104cc111, 12
  %v2_104cc113 = inttoptr i32 %v1_104cc112 to i32*
  %v3_104cc114 = load i32, i32* %v2_104cc113, align 4
  store i32 %v3_104cc114, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104d0110116 = icmp eq i32 %v3_104cc114, 0
  store i1 %v2_104d0110116, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104d0110116, label %dec_label_pc_102f8, label %dec_label_pc_104d8.lr.ph

dec_label_pc_102f8:                               ; preds = %dec_label_pc_104cc.loopexit, %dec_label_pc_104d0.backedge, %dec_label_pc_104cc.preheader, %dec_label_pc_102d4, %bb360, %dec_label_pc_10d98, %dec_label_pc_1030c, %dec_label_pc_10e48, %dec_label_pc_10ddc
  %v3_102f8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_102f8, i32* %r3.global-to-local, align 4
  %v1_102fc = add i32 %v3_102f8, 1
  store i32 %v1_102fc, i32* %r2.global-to-local, align 4
  %v2_10300 = icmp ugt i32 %v1_102fc, 254
  store i1 %v2_10300, i1* %cpsr_c.global-to-local, align 1
  %v7_10300 = icmp eq i32 %v1_102fc, 255
  store i1 %v7_10300, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_102fc, i32* %stack_var_-52, align 4
  %v8_10308 = icmp sgt i32 %v1_102fc, 255
  br i1 %v8_10308, label %dec_label_pc_fca0, label %dec_label_pc_1030c

dec_label_pc_1030c:                               ; preds = %dec_label_pc_102f8, %dec_label_pc_10274
  %v0_10318 = phi i32 [ %v1_102fc, %dec_label_pc_102f8 ], [ 0, %dec_label_pc_10274 ]
  store i32 ptrtoint (i32* @global_var_1d91c.133 to i32), i32* %ip.global-to-local, align 4
  %v3_10310 = mul i32 %v0_10318, 256
  store i32 %v3_10310, i32* %r3.global-to-local, align 4
  %v2_10314 = load i32, i32* @global_var_1d91c.133, align 4
  store i32 %v2_10314, i32* %r1.global-to-local, align 4
  %v2_1031c = mul i32 %v0_10318, 288
  store i32 %v2_1031c, i32* %r2.global-to-local, align 4
  %v2_10320 = add i32 %v2_10314, %v2_1031c
  store i32 %v2_10320, i32* @r5, align 4
  %v1_10324 = add i32 %v2_10320, 4
  %v2_10324 = inttoptr i32 %v1_10324 to i32*
  %v3_10324 = load i32, i32* %v2_10324, align 4
  store i32 %v3_10324, i32* @r4, align 4
  %v2_10328 = icmp eq i32 %v3_10324, -1
  store i1 %v2_10328, i1* %cpsr_c.global-to-local, align 1
  %v7_10328 = icmp eq i32 %v3_10324, -1
  store i1 %v7_10328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10328, label %dec_label_pc_102f8, label %dec_label_pc_10330

dec_label_pc_10330:                               ; preds = %dec_label_pc_1030c
  %v3_10330 = udiv i32 %v3_10324, 32
  %v3_10334 = mul nuw nsw i32 %v3_10330, 4
  store i32 %v2_10210, i32* %lr.global-to-local, align 4
  %v2_1033c = add i32 %v3_10334, %v2_10210
  store i32 %v2_1033c, i32* %r3.global-to-local, align 4
  %v1_10340 = add i32 %v2_1033c, -312
  %v2_10340 = inttoptr i32 %v1_10340 to i32*
  %v3_10340 = load i32, i32* %v2_10340, align 4
  %v1_10344 = urem i32 %v3_10324, 32
  store i32 %v1_10344, i32* %r1.global-to-local, align 4
  %v2_10348 = add nsw i32 %v1_10344, -1
  %v3_10348 = shl i32 1, %v2_10348
  %v4_10348 = and i32 %v3_10340, %v3_10348
  %v5_10348 = icmp ne i32 %v4_10348, 0
  store i1 %v5_10348, i1* %cpsr_c.global-to-local, align 1
  %v6_10348 = lshr i32 %v3_10340, %v1_10344
  store i32 %v6_10348, i32* %r2.global-to-local, align 4
  %v1_1034c = urem i32 %v6_10348, 2
  %v2_1034c = icmp eq i32 %v1_1034c, 0
  store i1 %v2_1034c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1034c, label %dec_label_pc_102d4, label %dec_label_pc_10354

dec_label_pc_10354:                               ; preds = %dec_label_pc_10330
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_108cc, i32* %r3.global-to-local, align 4
  store i32 %v2_10440, i32* %ip.global-to-local, align 4
  store i32 %v3_10324, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_10384 = call i32 @function_12ab0(i32 %v3_10324, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_10440)
  %v3_10388 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10388, i32* %r3.global-to-local, align 4
  %v2_1038c = or i32 %v3_10388, %v6_10384
  store i32 %v2_1038c, i32* %r0.global-to-local, align 4
  %v4_1038c = icmp eq i32 %v2_1038c, 0
  store i1 %v4_1038c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_1038c, label %dec_label_pc_10394, label %dec_label_pc_10e48

dec_label_pc_10394:                               ; preds = %dec_label_pc_10354
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_10398 = load i32, i32* @r5, align 4
  %v2_10398 = add i32 %v1_10398, 12
  %v3_10398 = inttoptr i32 %v2_10398 to i32*
  store i32 2, i32* %v3_10398, align 4
  %v0_1039c = call i32 @function_e240()
  store i32 %v0_1039c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d8b4.127 to i32), i32* %r3.global-to-local, align 4
  %v3_103a4 = load i8, i8* @global_var_1d8b5.128, align 1
  %v4_103a4 = zext i8 %v3_103a4 to i32
  store i32 %v4_103a4, i32* %r2.global-to-local, align 4
  %v2_103a8 = load i8, i8* bitcast (i8** @global_var_1d8b4.127 to i8*), align 4
  %v3_103a8 = zext i8 %v2_103a8 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_103ac = mul nuw nsw i32 %v4_103a4, 256
  %v5_103ac = or i32 %v3_103a8, %v4_103ac
  store i32 %v5_103ac, i32* %r1.global-to-local, align 4
  %v2_103b0 = call i32 @function_12068(i32 %v0_1039c, i32 %v5_103ac)
  store i32 ptrtoint (i32* @global_var_1d884.123 to i32), i32* %r3.global-to-local, align 4
  %v2_103b8 = load i32, i32* @global_var_1d884.123, align 4
  store i32 %v2_103b8, i32* %lr.global-to-local, align 4
  %v1_103c0 = load i32, i32* @r6, align 4
  %v9_103c0 = icmp eq i32 %v2_103b8, %v1_103c0
  store i1 %v9_103c0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_103c4 = urem i32 %v2_103b0, 65536
  store i32 %v3_103c4, i32* %r0.global-to-local, align 4
  %v7_103c8 = icmp sgt i32 %v2_103b8, %v1_103c0
  br i1 %v7_103c8, label %dec_label_pc_103cc, label %dec_label_pc_10fe8

dec_label_pc_103cc:                               ; preds = %dec_label_pc_10394
  %v2_103d0 = load i32, i32* @global_var_1d8b0.125, align 4
  store i32 %v2_103d0, i32* %r3.global-to-local, align 4
  store i32 %v1_103c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_103ec

dec_label_pc_103dc:                               ; preds = %dec_label_pc_10404, %dec_label_pc_103ec
  %v1_103dc = add i32 %v0_103dc, 1
  store i32 %v1_103dc, i32* %ip.global-to-local, align 4
  %v3_103e0 = icmp uge i32 %v1_103dc, %v2_103b8
  store i1 %v3_103e0, i1* %cpsr_c.global-to-local, align 1
  %v9_103e0 = icmp eq i32 %v1_103dc, %v2_103b8
  store i1 %v9_103e0, i1* %cpsr_z.global-to-local, align 1
  %v1_103e4 = add i32 %v0_103e4, 16
  store i32 %v1_103e4, i32* %r3.global-to-local, align 4
  br i1 %v9_103e0, label %dec_label_pc_10fe8, label %dec_label_pc_103ec

dec_label_pc_103ec:                               ; preds = %dec_label_pc_103dc, %dec_label_pc_103cc
  %v0_103dc = phi i32 [ %v1_103dc, %dec_label_pc_103dc ], [ %v1_103c0, %dec_label_pc_103cc ]
  %v0_103e4 = phi i32 [ %v1_103e4, %dec_label_pc_103dc ], [ %v2_103d0, %dec_label_pc_103cc ]
  store i32 %v0_103e4, i32* %r1.global-to-local, align 4
  %v1_103f0 = add i32 %v0_103e4, 9
  %v2_103f0 = inttoptr i32 %v1_103f0 to i8*
  %v3_103f0 = load i8, i8* %v2_103f0, align 1
  %v4_103f0 = zext i8 %v3_103f0 to i32
  store i32 %v4_103f0, i32* %r2.global-to-local, align 4
  %v1_103f4 = add i32 %v0_103e4, 8
  %v2_103f4 = inttoptr i32 %v1_103f4 to i8*
  %v3_103f4 = load i8, i8* %v2_103f4, align 1
  %v4_103f4 = zext i8 %v3_103f4 to i32
  %v4_103f8 = mul nuw nsw i32 %v4_103f0, 256
  %v5_103f8 = or i32 %v4_103f4, %v4_103f8
  store i32 %v5_103f8, i32* %r3.global-to-local, align 4
  %v3_103fc = icmp uge i32 %v5_103f8, %v3_103c4
  store i1 %v3_103fc, i1* %cpsr_c.global-to-local, align 1
  %v9_103fc = icmp eq i32 %v5_103f8, %v3_103c4
  store i1 %v9_103fc, i1* %cpsr_z.global-to-local, align 1
  %v2_10400 = xor i1 %v9_103fc, true
  %v3_10400 = and i1 %v3_103fc, %v2_10400
  br i1 %v3_10400, label %dec_label_pc_103dc, label %dec_label_pc_10404

dec_label_pc_10404:                               ; preds = %dec_label_pc_103ec
  %v1_10404 = add i32 %v0_103e4, 10
  %v2_10404 = inttoptr i32 %v1_10404 to i8*
  %v3_10404 = load i8, i8* %v2_10404, align 1
  %v4_10404 = zext i8 %v3_10404 to i32
  store i32 %v4_10404, i32* %r3.global-to-local, align 4
  %v1_10408 = add i32 %v0_103e4, 11
  %v2_10408 = inttoptr i32 %v1_10408 to i8*
  %v3_10408 = load i8, i8* %v2_10408, align 1
  %v4_10408 = zext i8 %v3_10408 to i32
  store i32 %v4_10408, i32* %r2.global-to-local, align 4
  %v4_1040c = mul nuw nsw i32 %v4_10408, 256
  %v5_1040c = or i32 %v4_1040c, %v4_10404
  store i32 %v5_1040c, i32* %r3.global-to-local, align 4
  %v3_10410 = icmp uge i32 %v5_1040c, %v3_103c4
  store i1 %v3_10410, i1* %cpsr_c.global-to-local, align 1
  %v9_10410 = icmp eq i32 %v5_1040c, %v3_103c4
  store i1 %v9_10410, i1* %cpsr_z.global-to-local, align 1
  %v2_10414 = xor i1 %v3_10410, true
  %v3_10414 = or i1 %v9_10410, %v2_10414
  br i1 %v3_10414, label %dec_label_pc_103dc, label %dec_label_pc_10418

dec_label_pc_10418:                               ; preds = %dec_label_pc_10404, %dec_label_pc_10fe8
  %v0_10420 = phi i32 [ 0, %dec_label_pc_10fe8 ], [ %v0_103e4, %dec_label_pc_10404 ]
  %v0_10418 = load i32, i32* @r5, align 4
  %v1_10418 = add i32 %v0_10418, 4
  %v2_10418 = inttoptr i32 %v1_10418 to i32*
  %v3_10418 = load i32, i32* %v2_10418, align 4
  store i32 %v3_10418, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10420 = inttoptr i32 %v0_10418 to i32*
  store i32 %v0_10420, i32* %v2_10420, align 4
  %v0_10424 = load i32, i32* %ip.global-to-local, align 4
  %v1_10424 = load i32, i32* @r5, align 4
  %v2_10424 = add i32 %v1_10424, 24
  %v3_10424 = inttoptr i32 %v2_10424 to i32*
  store i32 %v0_10424, i32* %v3_10424, align 4
  %v0_102d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_102d4

dec_label_pc_1042c:                               ; preds = %dec_label_pc_1069c, %dec_label_pc_10670, %dec_label_pc_106b8
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10430 = call i32 @function_110fc(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_10438 = call i32 @function_110fc(i32 33)
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_10448 = call i32 @function_11018(i32 32, i32* nonnull %stack_var_-56)
  store i32 %v3_10448, i32* @r4, align 4
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v3_1045c = call i32 @function_11018(i32 33, i32* nonnull %stack_var_-56)
  %v3_10460 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1045c, i32* @r6, align 4
  %v0_10468 = load i32, i32* @r4, align 4
  store i32 %v0_10468, i32* %r2.global-to-local, align 4
  %v1_1046c = add i32 %v3_10460, -1
  store i32 %v1_1046c, i32* %r3.global-to-local, align 4
  %v0_10470 = load i32, i32* @sb, align 4
  store i32 %v0_10470, i32* %r0.global-to-local, align 4
  %v0_10474 = load i32, i32* @r5, align 4
  %v1_10474 = add i32 %v0_10474, 24
  %v2_10474 = inttoptr i32 %v1_10474 to i32*
  %v3_10474 = load i32, i32* %v2_10474, align 4
  store i32 %v3_10474, i32* %r1.global-to-local, align 4
  %v4_10478 = call i32 @function_11aa0(i32 %v0_10470, i32 %v3_10474, i32 %v0_10468, i32 %v1_1046c)
  store i32 %v4_10478, i32* %r0.global-to-local, align 4
  %v2_1047c = icmp eq i32 %v4_10478, -1
  store i1 %v2_1047c, i1* %cpsr_c.global-to-local, align 1
  %v7_1047c = icmp eq i32 %v4_10478, -1
  store i1 %v7_1047c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1047c, label %dec_label_pc_1048c, label %dec_label_pc_104b4

dec_label_pc_1048c:                               ; preds = %dec_label_pc_1042c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_1048c = load i32, i32* %stack_var_-56, align 4
  %v0_10490 = load i32, i32* @r6, align 4
  store i32 %v0_10490, i32* %r2.global-to-local, align 4
  %v1_10494 = add i32 %v3_1048c, -1
  store i32 %v1_10494, i32* %r3.global-to-local, align 4
  %v0_10498 = load i32, i32* @sb, align 4
  store i32 %v0_10498, i32* %r0.global-to-local, align 4
  %v0_1049c = load i32, i32* @r5, align 4
  %v1_1049c = add i32 %v0_1049c, 24
  %v2_1049c = inttoptr i32 %v1_1049c to i32*
  %v3_1049c = load i32, i32* %v2_1049c, align 4
  store i32 %v3_1049c, i32* %r1.global-to-local, align 4
  %v4_104a0 = call i32 @function_11aa0(i32 %v0_10498, i32 %v3_1049c, i32 %v0_10490, i32 %v1_10494)
  store i32 %v4_104a0, i32* %r0.global-to-local, align 4
  %v2_104a4 = icmp eq i32 %v4_104a0, -1
  store i1 %v2_104a4, i1* %cpsr_c.global-to-local, align 1
  %v7_104a4 = icmp eq i32 %v4_104a0, -1
  store i1 %v7_104a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104a4, label %dec_label_pc_10ff0, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %dec_label_pc_1048c, %dec_label_pc_1042c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_104b8 = call i32 @function_11044(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_104c0 = call i32 @function_11044(i32 33)
  store i32 %v1_104c0, i32* %r0.global-to-local, align 4
  %v0_104c4 = load i32, i32* @r7, align 4
  %v3_104c4 = icmp eq i32 %v0_104c4, -1
  store i1 %v3_104c4, i1* %cpsr_c.global-to-local, align 1
  %v8_104c4 = icmp eq i32 %v0_104c4, -1
  store i1 %v8_104c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_104c4, label %dec_label_pc_104cc.loopexit, label %dec_label_pc_106d4

dec_label_pc_104cc.loopexit:                      ; preds = %dec_label_pc_10660, %dec_label_pc_10ab8, %dec_label_pc_10550, %dec_label_pc_104b4, %dec_label_pc_10d2c
  %v0_104cc = load i32, i32* @r5, align 4
  %v1_104cc = add i32 %v0_104cc, 12
  %v2_104cc = inttoptr i32 %v1_104cc to i32*
  %v3_104cc = load i32, i32* %v2_104cc, align 4
  store i32 %v3_104cc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104d0110 = icmp eq i32 %v3_104cc, 0
  store i1 %v2_104d0110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104d0110, label %dec_label_pc_102f8, label %dec_label_pc_104d8.lr.ph

dec_label_pc_104d8.lr.ph:                         ; preds = %dec_label_pc_104cc.preheader, %dec_label_pc_104cc.loopexit
  %v0_104d8143 = phi i32 [ %v0_104cc, %dec_label_pc_104cc.loopexit ], [ %v0_104cc111, %dec_label_pc_104cc.preheader ]
  br label %dec_label_pc_104d8

dec_label_pc_104d8:                               ; preds = %dec_label_pc_104d0.backedge.thread, %dec_label_pc_104d0.backedge, %dec_label_pc_104d0.backedge.thread466, %dec_label_pc_104d8.lr.ph
  %v0_10e10 = phi i32 [ %v0_104d8143, %dec_label_pc_104d8.lr.ph ], [ %v0_104d8140, %dec_label_pc_104d0.backedge ], [ %v0_10550, %dec_label_pc_104d0.backedge.thread ], [ %v0_10550, %dec_label_pc_104d0.backedge.thread466 ]
  %v1_104d8 = add i32 %v0_10e10, 24
  %v2_104d8 = inttoptr i32 %v1_104d8 to i32*
  %v3_104d8 = load i32, i32* %v2_104d8, align 4
  store i32 %v3_104d8, i32* %r3.global-to-local, align 4
  %v2_104dc = icmp ugt i32 %v3_104d8, 255
  store i1 %v2_104dc, i1* %cpsr_c.global-to-local, align 1
  %v7_104dc = icmp eq i32 %v3_104d8, 256
  store i1 %v7_104dc, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10e10, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_104dc, label %dec_label_pc_10e10, label %dec_label_pc_104e8

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104d8, %dec_label_pc_10e10
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_104f0, align 4
  %v0_104f4 = load i32, i32* @r5, align 4
  %v1_104f4 = add i32 %v0_104f4, 24
  %v2_104f4 = inttoptr i32 %v1_104f4 to i32*
  %v3_104f4 = load i32, i32* %v2_104f4, align 4
  store i32 %v3_104f4, i32* %r2.global-to-local, align 4
  %v0_104f8 = load i32, i32* @sb, align 4
  %v2_104f8 = add i32 %v0_104f8, %v3_104f4
  store i32 %v2_104f8, i32* @r4, align 4
  %v1_104fc = add i32 %v0_104f4, 4
  %v2_104fc = inttoptr i32 %v1_104fc to i32*
  %v3_104fc = load i32, i32* %v2_104fc, align 4
  store i32 %v3_104fc, i32* %r0.global-to-local, align 4
  %v1_10500 = sub i32 256, %v3_104f4
  store i32 %v1_10500, i32* %r2.global-to-local, align 4
  store i32 %v2_104f8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1050c = inttoptr i32 %v2_104f8 to i32*
  %v5_1050c = call i32 @function_12b0c(i32 %v3_104fc, i32* %v4_1050c, i32 %v1_10500, i32 16384)
  store i32 %v5_1050c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10510 = icmp eq i32 %v5_1050c, 0
  store i1 %v2_10510, i1* %cpsr_z.global-to-local, align 1
  %tmp326 = icmp slt i32 %v5_1050c, 1
  br i1 %tmp326, label %dec_label_pc_10d8c, label %dec_label_pc_10518

dec_label_pc_10518:                               ; preds = %dec_label_pc_104e8
  %v0_10518 = load i32, i32* @r6, align 4
  store i32 %v0_10518, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10520

dec_label_pc_10520:                               ; preds = %bb328, %dec_label_pc_10518
  %v3_10528 = phi i32 [ %v1_1052c, %bb328 ], [ %v0_10518, %dec_label_pc_10518 ]
  %v1_10520 = load i32, i32* @r4, align 4
  %v2_10520 = add i32 %v1_10520, %v3_10528
  %v3_10520 = inttoptr i32 %v2_10520 to i8*
  %v4_10520 = load i8, i8* %v3_10520, align 1
  %v6_10520 = zext i8 %v4_10520 to i32
  store i32 %v6_10520, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10524 = icmp eq i8 %v4_10520, 0
  store i1 %v2_10524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10524, label %bb327, label %bb328

bb327:                                            ; preds = %dec_label_pc_10520
  %v1_10528 = load i32, i32* %r1.global-to-local, align 4
  %v2_10528 = trunc i32 %v1_10528 to i8
  store i8 %v2_10528, i8* %v3_10520, align 1
  %v0_1052c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb328

bb328:                                            ; preds = %dec_label_pc_10520, %bb327
  %v0_1052c = phi i32 [ %v3_10528, %dec_label_pc_10520 ], [ %v0_1052c.pre, %bb327 ]
  %v1_1052c = add i32 %v0_1052c, 1
  store i32 %v1_1052c, i32* %r2.global-to-local, align 4
  %v3_10530 = icmp uge i32 %v5_1050c, %v1_1052c
  store i1 %v3_10530, i1* %cpsr_c.global-to-local, align 1
  %v9_10530 = icmp eq i32 %v5_1050c, %v1_1052c
  store i1 %v9_10530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10530, label %dec_label_pc_10538, label %dec_label_pc_10520

dec_label_pc_10538:                               ; preds = %bb328, %dec_label_pc_10d90
  store i32 ptrtoint (i32* @global_var_1d8b8.121 to i32), i32* @lr, align 4
  %v0_1053c = load i32, i32* @r5, align 4
  %v1_1053c = add i32 %v0_1053c, 24
  %v2_1053c = inttoptr i32 %v1_1053c to i32*
  %v3_1053c = load i32, i32* %v2_1053c, align 4
  %v2_10540 = load i32, i32* @global_var_1d8b8.121, align 4
  store i32 %v2_10540, i32* %r3.global-to-local, align 4
  %v2_10544 = add i32 %v3_1053c, %v5_1050c
  store i32 %v2_10544, i32* %ip.global-to-local, align 4
  store i32 %v2_10544, i32* %v2_1053c, align 4
  %v0_1054c = load i32, i32* %r3.global-to-local, align 4
  %v1_1054c = load i32, i32* @r5, align 4
  %v2_1054c = add i32 %v1_1054c, 8
  %v3_1054c = inttoptr i32 %v2_1054c to i32*
  store i32 %v0_1054c, i32* %v3_1054c, align 4
  br label %dec_label_pc_10550

dec_label_pc_10550:                               ; preds = %dec_label_pc_10bb4, %dec_label_pc_10538
  %v0_10550 = load i32, i32* @r5, align 4
  %v1_10550 = add i32 %v0_10550, 12
  %v2_10550 = inttoptr i32 %v1_10550 to i32*
  %v3_10550 = load i32, i32* %v2_10550, align 4
  store i32 %v3_10550, i32* %r2.global-to-local, align 4
  %v1_10554 = add i32 %v3_10550, -2
  store i32 %v1_10554, i32* %r3.global-to-local, align 4
  %v7_10558 = icmp eq i32 %v1_10554, 8
  store i1 %v7_10558, i1* %cpsr_z.global-to-local, align 1
  %v5_1055c = and i32 %v1_10554, 1073741824
  %v6_1055c = icmp ne i32 %v5_1055c, 0
  store i1 %v6_1055c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10550, label %dec_label_pc_104cc.loopexit [
    i32 2, label %dec_label_pc_10588
    i32 3, label %dec_label_pc_10670
    i32 4, label %dec_label_pc_10718
    i32 5, label %dec_label_pc_107b0
    i32 6, label %dec_label_pc_10864
    i32 7, label %dec_label_pc_109cc
    i32 8, label %dec_label_pc_10918
    i32 9, label %dec_label_pc_10bd8
    i32 10, label %dec_label_pc_10a80
  ]

dec_label_pc_10588:                               ; preds = %dec_label_pc_10550
  %v1_1058c = add i32 %v0_10550, 24
  %v2_1058c = inttoptr i32 %v1_1058c to i32*
  %v3_1058c = load i32, i32* %v2_1058c, align 4
  store i32 %v3_1058c, i32* %ip.global-to-local, align 4
  %v0_10590 = load i32, i32* @sb, align 4
  store i32 %v0_10590, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_1059c = add i32 %v0_10550, 29
  store i32 %v1_1059c, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_105a8101 = icmp eq i32 %v3_1058c, 0
  store i1 %v3_105a8101, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_105a8101, i1* %cpsr_z.global-to-local, align 1
  %v6_105ac108 = icmp sgt i32 %v3_1058c, 0
  br i1 %v6_105ac108, label %dec_label_pc_105b0.preheader, label %dec_label_pc_10650

dec_label_pc_105a8.loopexit:                      ; preds = %dec_label_pc_105c8
  %v2_105d0 = add i32 %v1_105d0, 2
  store i32 %v2_105d0, i32* @r6, align 4
  %v2_105d4 = add i32 %v1_105d4, 2
  store i32 %v2_105d4, i32* @r4, align 4
  %v2_105d8 = add i32 %v1_105d8, 2
  store i32 %v2_105d8, i32* @r7, align 4
  %v3_105a8 = icmp uge i32 %v2_105d8, %v1_105a8
  store i1 %v3_105a8, i1* %cpsr_c.global-to-local, align 1
  %v9_105a8 = icmp eq i32 %v2_105d8, %v1_105a8
  store i1 %v9_105a8, i1* %cpsr_z.global-to-local, align 1
  %v6_105ac = icmp slt i32 %v2_105d8, %v1_105a8
  br i1 %v6_105ac, label %dec_label_pc_105b0.preheader, label %dec_label_pc_10650

dec_label_pc_105b0.preheader:                     ; preds = %dec_label_pc_10588, %dec_label_pc_105a8.loopexit
  %v6_10658182 = phi i32 [ %v6_10658183, %dec_label_pc_105a8.loopexit ], [ %v0_10550, %dec_label_pc_10588 ]
  %v1_105d8171 = phi i32 [ %v2_105d8, %dec_label_pc_105a8.loopexit ], [ 0, %dec_label_pc_10588 ]
  %v1_105d0169 = phi i32 [ %v2_105d0, %dec_label_pc_105a8.loopexit ], [ %v0_10590, %dec_label_pc_10588 ]
  %v1_105bc167 = phi i32 [ %v1_105a8, %dec_label_pc_105a8.loopexit ], [ %v3_1058c, %dec_label_pc_10588 ]
  %v0_105b0165 = phi i32 [ %v2_105d4, %dec_label_pc_105a8.loopexit ], [ %v1_1059c, %dec_label_pc_10588 ]
  br label %dec_label_pc_105b0

dec_label_pc_105b0:                               ; preds = %dec_label_pc_105b0.preheader, %dec_label_pc_10630
  %v6_10658183 = phi i32 [ %v6_10658182, %dec_label_pc_105b0.preheader ], [ %v0_10638, %dec_label_pc_10630 ]
  %v1_105d8 = phi i32 [ %v1_105d8171, %dec_label_pc_105b0.preheader ], [ %v1_1063c, %dec_label_pc_10630 ]
  %v1_105d0 = phi i32 [ %v1_105d0169, %dec_label_pc_105b0.preheader ], [ %v1_10644, %dec_label_pc_10630 ]
  %v1_105a8 = phi i32 [ %v1_105bc167, %dec_label_pc_105b0.preheader ], [ %v3_10638, %dec_label_pc_10630 ]
  %v1_105d4 = phi i32 [ %v0_105b0165, %dec_label_pc_105b0.preheader ], [ %v1_10648, %dec_label_pc_10630 ]
  %v1_105b0 = add i32 %v1_105d4, -1
  %v2_105b0 = inttoptr i32 %v1_105b0 to i8*
  %v3_105b0 = load i8, i8* %v2_105b0, align 1
  %v4_105b0 = zext i8 %v3_105b0 to i32
  store i32 %v4_105b0, i32* %r3.global-to-local, align 4
  %v2_105b4 = icmp eq i8 %v3_105b0, -1
  store i1 %v2_105b4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_105b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105b4, label %dec_label_pc_105bc, label %dec_label_pc_10650

dec_label_pc_105bc:                               ; preds = %dec_label_pc_105b0
  %v0_105bc = load i32, i32* @sb, align 4
  %v2_105bc = add i32 %v0_105bc, %v1_105a8
  store i32 %v2_105bc, i32* %r2.global-to-local, align 4
  %v3_105c0 = icmp uge i32 %v2_105bc, %v1_105d4
  store i1 %v3_105c0, i1* %cpsr_c.global-to-local, align 1
  %v9_105c0 = icmp eq i32 %v2_105bc, %v1_105d4
  store i1 %v9_105c0, i1* %cpsr_z.global-to-local, align 1
  %v2_105c4 = xor i1 %v3_105c0, true
  %v3_105c4 = or i1 %v9_105c0, %v2_105c4
  br i1 %v3_105c4, label %dec_label_pc_10650, label %dec_label_pc_105c8

dec_label_pc_105c8:                               ; preds = %dec_label_pc_105bc
  %v1_105c8 = inttoptr i32 %v1_105d4 to i8*
  %v2_105c8 = load i8, i8* %v1_105c8, align 1
  %v3_105c8 = zext i8 %v2_105c8 to i32
  store i32 %v3_105c8, i32* %r3.global-to-local, align 4
  %v2_105cc = icmp eq i8 %v2_105c8, -1
  store i1 %v2_105cc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_105cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105cc, label %dec_label_pc_105a8.loopexit, label %dec_label_pc_105e0

dec_label_pc_105e0:                               ; preds = %dec_label_pc_105c8
  %v2_105e0 = icmp ugt i8 %v2_105c8, -4
  store i1 %v2_105e0, i1* %cpsr_c.global-to-local, align 1
  %v7_105e0 = icmp eq i8 %v2_105c8, -3
  store i1 %v7_105e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105e0, label %dec_label_pc_10c8c, label %dec_label_pc_105e8

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105e0
  %v1_105e8 = add i32 %v1_105d0, 2
  store i32 %v1_105e8, i32* %r3.global-to-local, align 4
  %v3_105ec = icmp uge i32 %v2_105bc, %v1_105e8
  store i1 %v3_105ec, i1* %cpsr_c.global-to-local, align 1
  %v9_105ec = icmp eq i32 %v2_105bc, %v1_105e8
  store i1 %v9_105ec, i1* %cpsr_z.global-to-local, align 1
  %v2_105f0 = xor i1 %v3_105ec, true
  %v3_105f0 = or i1 %v9_105ec, %v2_105f0
  br i1 %v3_105f0, label %dec_label_pc_10650, label %dec_label_pc_105f4

dec_label_pc_105f4:                               ; preds = %bb358, %dec_label_pc_10ce0, %bb357, %dec_label_pc_105e8
  %v0_105f4 = load i32, i32* @r4, align 4
  %v1_105f4 = inttoptr i32 %v0_105f4 to i8*
  %v2_105f4 = load i8, i8* %v1_105f4, align 1
  %v3_105f4 = zext i8 %v2_105f4 to i32
  store i32 %v3_105f4, i32* %r3.global-to-local, align 4
  %v2_105f8 = icmp ugt i8 %v2_105f4, -4
  store i1 %v2_105f8, i1* %cpsr_c.global-to-local, align 1
  %v7_105f8 = icmp eq i8 %v2_105f4, -3
  store i1 %v7_105f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105f8, label %bb329, label %dec_label_pc_10604

bb329:                                            ; preds = %dec_label_pc_105f4
  %v1_105fc = load i32, i32* @r8, align 4
  %v2_105fc = trunc i32 %v1_105fc to i8
  store i8 %v2_105fc, i8* %v1_105f4, align 1
  %v0_10600.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10600.pr, label %bb331, label %.dec_label_pc_10604_crit_edge

.dec_label_pc_10604_crit_edge:                    ; preds = %bb329
  %v0_10604.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10604

dec_label_pc_10604:                               ; preds = %.dec_label_pc_10604_crit_edge, %dec_label_pc_105f4
  %v0_10604 = phi i32 [ %v0_10604.pre, %.dec_label_pc_10604_crit_edge ], [ %v3_105f4, %dec_label_pc_105f4 ]
  %v2_10604 = icmp ugt i32 %v0_10604, 250
  store i1 %v2_10604, i1* %cpsr_c.global-to-local, align 1
  %v7_10604 = icmp eq i32 %v0_10604, 251
  store i1 %v7_10604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10604, label %bb330, label %bb331

bb330:                                            ; preds = %dec_label_pc_10604
  %v1_10608 = load i32, i32* %sl.global-to-local, align 4
  %v2_10608 = trunc i32 %v1_10608 to i8
  %v3_10608 = load i32, i32* @r4, align 4
  %v4_10608 = inttoptr i32 %v3_10608 to i8*
  store i8 %v2_10608, i8* %v4_10608, align 1
  br label %bb331

bb331:                                            ; preds = %bb329, %dec_label_pc_10604, %bb330
  %v0_1060c = load i32, i32* @r4, align 4
  %v1_1060c = add i32 %v0_1060c, 1
  %v2_1060c = inttoptr i32 %v1_1060c to i8*
  %v3_1060c = load i8, i8* %v2_1060c, align 1
  %v4_1060c = zext i8 %v3_1060c to i32
  store i32 %v4_1060c, i32* %r3.global-to-local, align 4
  %v2_10610 = icmp ugt i8 %v3_1060c, -4
  store i1 %v2_10610, i1* %cpsr_c.global-to-local, align 1
  %v7_10610 = icmp eq i8 %v3_1060c, -3
  store i1 %v7_10610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10610, label %bb332, label %dec_label_pc_1061c

bb332:                                            ; preds = %bb331
  %v1_10614 = load i32, i32* @r8, align 4
  %v2_10614 = trunc i32 %v1_10614 to i8
  store i8 %v2_10614, i8* %v2_1060c, align 1
  %v0_10618.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10618.pr, label %bb334, label %.dec_label_pc_1061c_crit_edge

.dec_label_pc_1061c_crit_edge:                    ; preds = %bb332
  %v0_1061c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1061c

dec_label_pc_1061c:                               ; preds = %.dec_label_pc_1061c_crit_edge, %bb331
  %v0_1061c = phi i32 [ %v0_1061c.pre, %.dec_label_pc_1061c_crit_edge ], [ %v4_1060c, %bb331 ]
  %v2_1061c = icmp ugt i32 %v0_1061c, 250
  store i1 %v2_1061c, i1* %cpsr_c.global-to-local, align 1
  %v7_1061c = icmp eq i32 %v0_1061c, 251
  store i1 %v7_1061c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1061c, label %bb333, label %bb334

bb333:                                            ; preds = %dec_label_pc_1061c
  %v1_10620 = load i32, i32* %sl.global-to-local, align 4
  %v2_10620 = trunc i32 %v1_10620 to i8
  %v3_10620 = load i32, i32* @r4, align 4
  %v4_10620 = add i32 %v3_10620, 1
  %v5_10620 = inttoptr i32 %v4_10620 to i8*
  store i8 %v2_10620, i8* %v5_10620, align 1
  br label %bb334

bb334:                                            ; preds = %bb332, %dec_label_pc_1061c, %bb333
  %v0_10624 = load i32, i32* @r5, align 4
  %v1_10624 = add i32 %v0_10624, 4
  %v2_10624 = inttoptr i32 %v1_10624 to i32*
  %v3_10624 = load i32, i32* %v2_10624, align 4
  store i32 %v3_10624, i32* %r0.global-to-local, align 4
  %v0_10628 = load i32, i32* @r6, align 4
  br label %dec_label_pc_10630

dec_label_pc_10630:                               ; preds = %dec_label_pc_10de8, %bb334
  %v0_10634 = phi i32 [ %v3_10e00, %dec_label_pc_10de8 ], [ %v3_10624, %bb334 ]
  %storemerge5 = phi i32 [ %v2_10ca4, %dec_label_pc_10de8 ], [ %v0_10628, %bb334 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10de8 ], [ 3, %bb334 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10634 = inttoptr i32 %storemerge5 to i32*
  %v5_10634 = call i32 @function_12b6c(i32 %v0_10634, i32* %v4_10634, i32 %storemerge, i32 16384)
  store i32 %v5_10634, i32* %r0.global-to-local, align 4
  %v0_10638 = load i32, i32* @r5, align 4
  %v1_10638 = add i32 %v0_10638, 24
  %v2_10638 = inttoptr i32 %v1_10638 to i32*
  %v3_10638 = load i32, i32* %v2_10638, align 4
  store i32 %v3_10638, i32* %ip.global-to-local, align 4
  %v0_1063c = load i32, i32* @r7, align 4
  %v1_1063c = add i32 %v0_1063c, 3
  store i32 %v1_1063c, i32* @r7, align 4
  %v3_10640 = icmp uge i32 %v1_1063c, %v3_10638
  store i1 %v3_10640, i1* %cpsr_c.global-to-local, align 1
  %v9_10640 = icmp eq i32 %v1_1063c, %v3_10638
  store i1 %v9_10640, i1* %cpsr_z.global-to-local, align 1
  %v0_10644 = load i32, i32* @r6, align 4
  %v1_10644 = add i32 %v0_10644, 3
  store i32 %v1_10644, i32* @r6, align 4
  %v0_10648 = load i32, i32* @r4, align 4
  %v1_10648 = add i32 %v0_10648, 3
  store i32 %v1_10648, i32* @r4, align 4
  %v5_1064c = icmp slt i32 %v1_1063c, %v3_10638
  br i1 %v5_1064c, label %dec_label_pc_105b0, label %dec_label_pc_10650

dec_label_pc_10650:                               ; preds = %dec_label_pc_105a8.loopexit, %dec_label_pc_105b0, %dec_label_pc_10630, %dec_label_pc_105e8, %dec_label_pc_105bc, %dec_label_pc_10588, %dec_label_pc_10c8c.dec_label_pc_10650.loopexit_crit_edge
  %v6_10658 = phi i32 [ %v0_10cb0, %dec_label_pc_10c8c.dec_label_pc_10650.loopexit_crit_edge ], [ %v0_10550, %dec_label_pc_10588 ], [ %v6_10658183, %dec_label_pc_105b0 ], [ %v0_10638, %dec_label_pc_10630 ], [ %v6_10658183, %dec_label_pc_105e8 ], [ %v6_10658183, %dec_label_pc_105bc ], [ %v6_10658183, %dec_label_pc_105a8.loopexit ]
  %v0_10660.pre = phi i32 [ %v0_10650.pre.pre, %dec_label_pc_10c8c.dec_label_pc_10650.loopexit_crit_edge ], [ 0, %dec_label_pc_10588 ], [ %v1_105d8, %dec_label_pc_105b0 ], [ %v1_1063c, %dec_label_pc_10630 ], [ %v1_105d8, %dec_label_pc_105e8 ], [ %v1_105d8, %dec_label_pc_105bc ], [ %v2_105d8, %dec_label_pc_105a8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10650 = icmp eq i32 %v0_10660.pre, 0
  store i1 %v2_10650, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v0_10660.pre, 1
  br i1 %tmp335, label %dec_label_pc_10660, label %.thread216

.thread216:                                       ; preds = %dec_label_pc_10650
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10658 = add i32 %v6_10658, 12
  %v8_10658 = inttoptr i32 %v7_10658 to i32*
  store i32 3, i32* %v8_10658, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10660:                               ; preds = %dec_label_pc_10650, %dec_label_pc_10b04, %dec_label_pc_10a20, %dec_label_pc_1096c, %dec_label_pc_108b8, %dec_label_pc_10804, %dec_label_pc_1076c, %dec_label_pc_106d4, %dec_label_pc_10c2c
  %v0_10660 = phi i32 [ %v0_10afc, %dec_label_pc_10b04 ], [ %v1_10a14, %dec_label_pc_10a20 ], [ %v1_10960, %dec_label_pc_1096c ], [ %v1_108ac, %dec_label_pc_108b8 ], [ %v1_107f8, %dec_label_pc_10804 ], [ %v0_1076c, %dec_label_pc_1076c ], [ %v0_106d4, %dec_label_pc_106d4 ], [ %v1_10c20, %dec_label_pc_10c2c ], [ %v0_10660.pre, %dec_label_pc_10650 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10660 = icmp eq i32 %v0_10660, 0
  store i1 %v2_10660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10660, label %dec_label_pc_104cc.loopexit, label %dec_label_pc_10668

dec_label_pc_10668:                               ; preds = %dec_label_pc_10660
  %v0_10668 = load i32, i32* @r5, align 4
  %v1_10668 = add i32 %v0_10668, 24
  %v2_10668 = inttoptr i32 %v1_10668 to i32*
  %v3_10668 = load i32, i32* %v2_10668, align 4
  store i32 %v3_10668, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10670:                               ; preds = %dec_label_pc_10550
  %v1_10670 = add i32 %v0_10550, 24
  %v2_10670 = inttoptr i32 %v1_10670 to i32*
  %v3_10670 = load i32, i32* %v2_10670, align 4
  store i32 %v3_10670, i32* %r3.global-to-local, align 4
  %v1_10674 = add i32 %v3_10670, -1
  store i32 %v1_10674, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10678 = icmp eq i32 %v1_10674, 0
  store i1 %v2_10678, i1* %cpsr_z.global-to-local, align 1
  %v5_1067c = icmp sgt i32 %v1_10674, 0
  br i1 %v5_1067c, label %dec_label_pc_106a4, label %dec_label_pc_1042c

dec_label_pc_10684:                               ; preds = %bb336
  %v2_10684 = icmp ugt i8 %v3_106a8, 35
  store i1 %v2_10684, i1* %cpsr_c.global-to-local, align 1
  %v7_10684 = icmp eq i8 %v3_106a8, 36
  store i1 %v7_10684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10684, label %dec_label_pc_106b8, label %dec_label_pc_1068c

dec_label_pc_1068c:                               ; preds = %dec_label_pc_10684
  %v2_1068c = icmp ugt i8 %v3_106a8, 34
  store i1 %v2_1068c, i1* %cpsr_c.global-to-local, align 1
  %v7_1068c = icmp eq i8 %v3_106a8, 35
  store i1 %v7_1068c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1068c, label %dec_label_pc_106b8, label %dec_label_pc_10694

dec_label_pc_10694:                               ; preds = %dec_label_pc_1068c
  %v2_10694 = icmp ugt i8 %v3_106a8, 36
  store i1 %v2_10694, i1* %cpsr_c.global-to-local, align 1
  %v7_10694 = icmp eq i8 %v3_106a8, 37
  store i1 %v7_10694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10694, label %dec_label_pc_106b8, label %dec_label_pc_1069c

dec_label_pc_1069c:                               ; preds = %dec_label_pc_10694
  %v1_1069c = add i32 %v0_106b8, -1
  store i32 %v1_1069c, i32* %r0.global-to-local, align 4
  %v2_1069c = icmp ne i32 %v0_106b8, 0
  store i1 %v2_1069c, i1* %cpsr_c.global-to-local, align 1
  %v7_1069c = icmp eq i32 %v0_106b8, 1
  store i1 %v7_1069c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1069c, label %dec_label_pc_1042c, label %dec_label_pc_106a4

dec_label_pc_106a4:                               ; preds = %dec_label_pc_10670, %dec_label_pc_1069c
  %v0_106b8 = phi i32 [ %v1_1069c, %dec_label_pc_1069c ], [ %v1_10674, %dec_label_pc_10670 ]
  %v2_106a4 = add i32 %v0_106b8, %v0_10550
  store i32 %v2_106a4, i32* %r3.global-to-local, align 4
  %v1_106a8 = add i32 %v2_106a4, 28
  %v2_106a8 = inttoptr i32 %v1_106a8 to i8*
  %v3_106a8 = load i8, i8* %v2_106a8, align 1
  %v4_106a8 = zext i8 %v3_106a8 to i32
  store i32 %v4_106a8, i32* %r3.global-to-local, align 4
  %v2_106ac = icmp ugt i8 %v3_106a8, 61
  store i1 %v2_106ac, i1* %cpsr_c.global-to-local, align 1
  %v7_106ac = icmp eq i8 %v3_106a8, 62
  store i1 %v7_106ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106ac, label %dec_label_pc_106b8, label %bb336

bb336:                                            ; preds = %dec_label_pc_106a4
  %v3_106b0 = icmp ugt i8 %v3_106a8, 57
  store i1 %v3_106b0, i1* %cpsr_c.global-to-local, align 1
  %v8_106b0 = icmp eq i8 %v3_106a8, 58
  store i1 %v8_106b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_106b0, label %dec_label_pc_106b8, label %dec_label_pc_10684

dec_label_pc_106b8:                               ; preds = %dec_label_pc_106a4, %bb336, %dec_label_pc_10694, %dec_label_pc_1068c, %dec_label_pc_10684
  %v1_106b8 = add i32 %v0_106b8, 1
  store i32 %v1_106b8, i32* @r7, align 4
  %v2_106bc = icmp eq i32 %v1_106b8, -1
  store i1 %v2_106bc, i1* %cpsr_c.global-to-local, align 1
  %v7_106bc = icmp eq i32 %v0_106b8, -2
  store i1 %v7_106bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106bc, label %dec_label_pc_1042c, label %dec_label_pc_106c4

dec_label_pc_106c4:                               ; preds = %dec_label_pc_106b8
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_106c8 = call i32 @function_11044(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_106d0 = call i32 @function_11044(i32 33)
  store i32 %v1_106d0, i32* %r0.global-to-local, align 4
  %v0_106d4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_106d4

dec_label_pc_106d4:                               ; preds = %dec_label_pc_104b4, %dec_label_pc_106c4
  %v0_106d4 = phi i32 [ %v0_104c4, %dec_label_pc_104b4 ], [ %v0_106d4.pre, %dec_label_pc_106c4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106d4 = icmp eq i32 %v0_106d4, 0
  store i1 %v2_106d4, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v0_106d4, 1
  br i1 %tmp337, label %dec_label_pc_10660, label %dec_label_pc_106dc

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106d4
  %v0_106dc = load i32, i32* @r5, align 4
  %v1_106dc = inttoptr i32 %v0_106dc to i32*
  %v2_106dc = load i32, i32* %v1_106dc, align 4
  store i32 %v2_106dc, i32* %r3.global-to-local, align 4
  %v1_106e0 = add i32 %v0_106dc, 4
  %v2_106e0 = inttoptr i32 %v1_106e0 to i32*
  %v3_106e0 = load i32, i32* %v2_106e0, align 4
  store i32 %v3_106e0, i32* %r0.global-to-local, align 4
  %v1_106e4 = add i32 %v2_106dc, 12
  %v2_106e4 = inttoptr i32 %v1_106e4 to i8*
  %v3_106e4 = load i8, i8* %v2_106e4, align 1
  %v4_106e4 = zext i8 %v3_106e4 to i32
  store i32 %v4_106e4, i32* %r2.global-to-local, align 4
  %v1_106e8 = inttoptr i32 %v2_106dc to i32*
  %v2_106e8 = load i32, i32* %v1_106e8, align 4
  store i32 %v2_106e8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_106f0 = inttoptr i32 %v2_106e8 to i32*
  %v5_106f0 = call i32 @function_12b6c(i32 %v3_106e0, i32* %v4_106f0, i32 %v4_106e4, i32 16384)
  store i32 %v5_106f0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_106f8 = load i32, i32* @r5, align 4
  %v1_106f8 = add i32 %v0_106f8, 4
  %v2_106f8 = inttoptr i32 %v1_106f8 to i32*
  %v3_106f8 = load i32, i32* %v2_106f8, align 4
  store i32 %v3_106f8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15138.501 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10704 = call i32 @function_12b6c(i32 %v3_106f8, i32* bitcast ([3 x i8]* @global_var_15138.501 to i32*), i32 2, i32 16384)
  store i32 %v5_10704, i32* %r0.global-to-local, align 4
  %v0_10708 = load i32, i32* @r5, align 4
  %v1_10708 = add i32 %v0_10708, 24
  %v2_10708 = inttoptr i32 %v1_10708 to i32*
  %v3_10708 = load i32, i32* %v2_10708, align 4
  store i32 %v3_10708, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_10710 = add i32 %v0_10708, 12
  %v3_10710 = inttoptr i32 %v2_10710 to i32*
  store i32 4, i32* %v3_10710, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10718:                               ; preds = %dec_label_pc_10550
  %v1_10718 = add i32 %v0_10550, 24
  %v2_10718 = inttoptr i32 %v1_10718 to i32*
  %v3_10718 = load i32, i32* %v2_10718, align 4
  store i32 %v3_10718, i32* %r3.global-to-local, align 4
  %v1_1071c = add i32 %v3_10718, -1
  store i32 %v1_1071c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10720 = icmp eq i32 %v1_1071c, 0
  store i1 %v2_10720, i1* %cpsr_z.global-to-local, align 1
  %v5_10724 = icmp sgt i32 %v1_1071c, 0
  br i1 %v5_10724, label %dec_label_pc_10744, label %dec_label_pc_10cec

dec_label_pc_1072c:                               ; preds = %bb338
  %v2_1072c = icmp ugt i8 %v3_10748, 35
  store i1 %v2_1072c, i1* %cpsr_c.global-to-local, align 1
  %v7_1072c = icmp eq i8 %v3_10748, 36
  store i1 %v7_1072c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1072c, label %dec_label_pc_10758, label %dec_label_pc_10734

dec_label_pc_10734:                               ; preds = %dec_label_pc_1072c
  %v2_10734 = icmp ugt i8 %v3_10748, 34
  store i1 %v2_10734, i1* %cpsr_c.global-to-local, align 1
  %v7_10734 = icmp eq i8 %v3_10748, 35
  store i1 %v7_10734, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10734, label %dec_label_pc_10758, label %dec_label_pc_1073c

dec_label_pc_1073c:                               ; preds = %dec_label_pc_10734
  %v1_1073c = add i32 %v0_10758, -1
  store i32 %v1_1073c, i32* %r0.global-to-local, align 4
  %v2_1073c = icmp ne i32 %v0_10758, 0
  store i1 %v2_1073c, i1* %cpsr_c.global-to-local, align 1
  %v7_1073c = icmp eq i32 %v0_10758, 1
  store i1 %v7_1073c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1073c, label %dec_label_pc_10cec, label %dec_label_pc_10744

dec_label_pc_10744:                               ; preds = %dec_label_pc_10718, %dec_label_pc_1073c
  %v0_10758 = phi i32 [ %v1_1073c, %dec_label_pc_1073c ], [ %v1_1071c, %dec_label_pc_10718 ]
  %v2_10744 = add i32 %v0_10758, %v0_10550
  store i32 %v2_10744, i32* %r3.global-to-local, align 4
  %v1_10748 = add i32 %v2_10744, 28
  %v2_10748 = inttoptr i32 %v1_10748 to i8*
  %v3_10748 = load i8, i8* %v2_10748, align 1
  %v4_10748 = zext i8 %v3_10748 to i32
  store i32 %v4_10748, i32* %r3.global-to-local, align 4
  %v2_1074c = icmp ugt i8 %v3_10748, 61
  store i1 %v2_1074c, i1* %cpsr_c.global-to-local, align 1
  %v7_1074c = icmp eq i8 %v3_10748, 62
  store i1 %v7_1074c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1074c, label %dec_label_pc_10758, label %bb338

bb338:                                            ; preds = %dec_label_pc_10744
  %v3_10750 = icmp ugt i8 %v3_10748, 57
  store i1 %v3_10750, i1* %cpsr_c.global-to-local, align 1
  %v8_10750 = icmp eq i8 %v3_10748, 58
  store i1 %v8_10750, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10750, label %dec_label_pc_10758, label %dec_label_pc_1072c

dec_label_pc_10758:                               ; preds = %dec_label_pc_10744, %bb338, %dec_label_pc_10734, %dec_label_pc_1072c
  %v1_10758 = add i32 %v0_10758, 1
  store i32 %v1_10758, i32* @r7, align 4
  %v2_1075c = icmp eq i32 %v1_10758, -1
  store i1 %v2_1075c, i1* %cpsr_c.global-to-local, align 1
  %v7_1075c = icmp eq i32 %v0_10758, -2
  store i1 %v7_1075c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1075c, label %dec_label_pc_10cec, label %dec_label_pc_10764

dec_label_pc_10764:                               ; preds = %dec_label_pc_10758
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10768 = call i32 @function_11044(i32 31)
  store i32 %v1_10768, i32* %r0.global-to-local, align 4
  %v0_1076c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1076c

dec_label_pc_1076c:                               ; preds = %dec_label_pc_10d2c, %dec_label_pc_10764
  %v0_1076c = phi i32 [ %v0_10d34, %dec_label_pc_10d2c ], [ %v0_1076c.pre, %dec_label_pc_10764 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1076c = icmp eq i32 %v0_1076c, 0
  store i1 %v2_1076c, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v0_1076c, 1
  br i1 %tmp339, label %dec_label_pc_10660, label %dec_label_pc_10774

dec_label_pc_10774:                               ; preds = %dec_label_pc_1076c
  %v0_10774 = load i32, i32* @r5, align 4
  %v1_10774 = inttoptr i32 %v0_10774 to i32*
  %v2_10774 = load i32, i32* %v1_10774, align 4
  store i32 %v2_10774, i32* %r3.global-to-local, align 4
  %v1_10778 = add i32 %v0_10774, 4
  %v2_10778 = inttoptr i32 %v1_10778 to i32*
  %v3_10778 = load i32, i32* %v2_10778, align 4
  store i32 %v3_10778, i32* %r0.global-to-local, align 4
  %v1_1077c = add i32 %v2_10774, 13
  %v2_1077c = inttoptr i32 %v1_1077c to i8*
  %v3_1077c = load i8, i8* %v2_1077c, align 1
  %v4_1077c = zext i8 %v3_1077c to i32
  store i32 %v4_1077c, i32* %r2.global-to-local, align 4
  %v1_10780 = add i32 %v2_10774, 4
  %v2_10780 = inttoptr i32 %v1_10780 to i32*
  %v3_10780 = load i32, i32* %v2_10780, align 4
  store i32 %v3_10780, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10788 = inttoptr i32 %v3_10780 to i32*
  %v5_10788 = call i32 @function_12b6c(i32 %v3_10778, i32* %v4_10788, i32 %v4_1077c, i32 16384)
  store i32 %v5_10788, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10790 = load i32, i32* @r5, align 4
  %v1_10790 = add i32 %v0_10790, 4
  %v2_10790 = inttoptr i32 %v1_10790 to i32*
  %v3_10790 = load i32, i32* %v2_10790, align 4
  store i32 %v3_10790, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15138.501 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1079c = call i32 @function_12b6c(i32 %v3_10790, i32* bitcast ([3 x i8]* @global_var_15138.501 to i32*), i32 2, i32 16384)
  store i32 %v5_1079c, i32* %r0.global-to-local, align 4
  %v0_107a0 = load i32, i32* @r5, align 4
  %v1_107a0 = add i32 %v0_107a0, 24
  %v2_107a0 = inttoptr i32 %v1_107a0 to i32*
  %v3_107a0 = load i32, i32* %v2_107a0, align 4
  store i32 %v3_107a0, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_107a8 = add i32 %v0_107a0, 12
  %v3_107a8 = inttoptr i32 %v2_107a8 to i32*
  store i32 5, i32* %v3_107a8, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_107b0:                               ; preds = %dec_label_pc_10550
  %v1_107b0 = add i32 %v0_10550, 24
  %v2_107b0 = inttoptr i32 %v1_107b0 to i32*
  %v3_107b0 = load i32, i32* %v2_107b0, align 4
  store i32 %v3_107b0, i32* %ip.global-to-local, align 4
  %v1_107b4 = add i32 %v3_107b0, -1
  store i32 %v1_107b4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107b8 = icmp eq i32 %v1_107b4, 0
  store i1 %v2_107b8, i1* %cpsr_z.global-to-local, align 1
  %v5_107bc = icmp sgt i32 %v1_107b4, 0
  br i1 %v5_107bc, label %dec_label_pc_107e4, label %dec_label_pc_104d0.backedge.thread

dec_label_pc_107c4:                               ; preds = %bb340
  %v2_107c4 = icmp ugt i8 %v3_107e8, 35
  store i1 %v2_107c4, i1* %cpsr_c.global-to-local, align 1
  %v7_107c4 = icmp eq i8 %v3_107e8, 36
  store i1 %v7_107c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107c4, label %dec_label_pc_107f8, label %dec_label_pc_107cc

dec_label_pc_107cc:                               ; preds = %dec_label_pc_107c4
  %v2_107cc = icmp ugt i8 %v3_107e8, 34
  store i1 %v2_107cc, i1* %cpsr_c.global-to-local, align 1
  %v7_107cc = icmp eq i8 %v3_107e8, 35
  store i1 %v7_107cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107cc, label %dec_label_pc_107f8, label %dec_label_pc_107d4

dec_label_pc_107d4:                               ; preds = %dec_label_pc_107cc
  %v2_107d4 = icmp ugt i8 %v3_107e8, 36
  store i1 %v2_107d4, i1* %cpsr_c.global-to-local, align 1
  %v7_107d4 = icmp eq i8 %v3_107e8, 37
  store i1 %v7_107d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107d4, label %dec_label_pc_107f8, label %dec_label_pc_107dc

dec_label_pc_107dc:                               ; preds = %dec_label_pc_107d4
  %v1_107dc = add i32 %v0_107f8, -1
  store i32 %v1_107dc, i32* %r0.global-to-local, align 4
  %v2_107dc = icmp ne i32 %v0_107f8, 0
  store i1 %v2_107dc, i1* %cpsr_c.global-to-local, align 1
  %v7_107dc = icmp eq i32 %v0_107f8, 1
  store i1 %v7_107dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107dc, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_107e4

dec_label_pc_107e4:                               ; preds = %dec_label_pc_107b0, %dec_label_pc_107dc
  %v0_107f8 = phi i32 [ %v1_107dc, %dec_label_pc_107dc ], [ %v1_107b4, %dec_label_pc_107b0 ]
  %v2_107e4 = add i32 %v0_107f8, %v0_10550
  store i32 %v2_107e4, i32* %r3.global-to-local, align 4
  %v1_107e8 = add i32 %v2_107e4, 28
  %v2_107e8 = inttoptr i32 %v1_107e8 to i8*
  %v3_107e8 = load i8, i8* %v2_107e8, align 1
  %v4_107e8 = zext i8 %v3_107e8 to i32
  store i32 %v4_107e8, i32* %r3.global-to-local, align 4
  %v2_107ec = icmp ugt i8 %v3_107e8, 61
  store i1 %v2_107ec, i1* %cpsr_c.global-to-local, align 1
  %v7_107ec = icmp eq i8 %v3_107e8, 62
  store i1 %v7_107ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107ec, label %dec_label_pc_107f8, label %bb340

bb340:                                            ; preds = %dec_label_pc_107e4
  %v3_107f0 = icmp ugt i8 %v3_107e8, 57
  store i1 %v3_107f0, i1* %cpsr_c.global-to-local, align 1
  %v8_107f0 = icmp eq i8 %v3_107e8, 58
  store i1 %v8_107f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_107f0, label %dec_label_pc_107f8, label %dec_label_pc_107c4

dec_label_pc_107f8:                               ; preds = %dec_label_pc_107e4, %bb340, %dec_label_pc_107d4, %dec_label_pc_107cc, %dec_label_pc_107c4
  %v1_107f8 = add i32 %v0_107f8, 1
  store i32 %v1_107f8, i32* @r7, align 4
  %v2_107fc = icmp eq i32 %v1_107f8, -1
  store i1 %v2_107fc, i1* %cpsr_c.global-to-local, align 1
  %v7_107fc = icmp eq i32 %v0_107f8, -2
  store i1 %v7_107fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107fc, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_10804

dec_label_pc_10804:                               ; preds = %dec_label_pc_107f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10804 = icmp eq i32 %v1_107f8, 0
  store i1 %v2_10804, i1* %cpsr_z.global-to-local, align 1
  %tmp341 = icmp slt i32 %v1_107f8, 1
  br i1 %tmp341, label %dec_label_pc_10660, label %dec_label_pc_1080c

dec_label_pc_1080c:                               ; preds = %dec_label_pc_10804
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_10810 = call i32 @function_110fc(i32 21)
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_10820 = call i32 @function_11018(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_10820, i32* %r0.global-to-local, align 4
  %v3_10824 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10824, i32* %r2.global-to-local, align 4
  store i32 %v3_10820, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10830 = load i32, i32* @r5, align 4
  %v1_10830 = add i32 %v0_10830, 4
  %v2_10830 = inttoptr i32 %v1_10830 to i32*
  %v3_10830 = load i32, i32* %v2_10830, align 4
  store i32 %v3_10830, i32* %r0.global-to-local, align 4
  %v4_10834 = inttoptr i32 %v3_10820 to i32*
  %v5_10834 = call i32 @function_12b6c(i32 %v3_10830, i32* %v4_10834, i32 %v3_10824, i32 16384)
  store i32 %v5_10834, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15138.501 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10844 = load i32, i32* @r5, align 4
  %v1_10844 = add i32 %v0_10844, 4
  %v2_10844 = inttoptr i32 %v1_10844 to i32*
  %v3_10844 = load i32, i32* %v2_10844, align 4
  store i32 %v3_10844, i32* %r0.global-to-local, align 4
  %v5_10848 = call i32 @function_12b6c(i32 %v3_10844, i32* bitcast ([3 x i8]* @global_var_15138.501 to i32*), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_10850 = call i32 @function_11044(i32 21)
  store i32 %v1_10850, i32* %r0.global-to-local, align 4
  %v0_10854 = load i32, i32* @r5, align 4
  %v1_10854 = add i32 %v0_10854, 24
  %v2_10854 = inttoptr i32 %v1_10854 to i32*
  %v3_10854 = load i32, i32* %v2_10854, align 4
  store i32 %v3_10854, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_1085c = add i32 %v0_10854, 12
  %v3_1085c = inttoptr i32 %v2_1085c to i32*
  store i32 6, i32* %v3_1085c, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10864:                               ; preds = %dec_label_pc_10550
  %v1_10864 = add i32 %v0_10550, 24
  %v2_10864 = inttoptr i32 %v1_10864 to i32*
  %v3_10864 = load i32, i32* %v2_10864, align 4
  store i32 %v3_10864, i32* %ip.global-to-local, align 4
  %v1_10868 = add i32 %v3_10864, -1
  store i32 %v1_10868, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1086c = icmp eq i32 %v1_10868, 0
  store i1 %v2_1086c, i1* %cpsr_z.global-to-local, align 1
  %v5_10870 = icmp sgt i32 %v1_10868, 0
  br i1 %v5_10870, label %dec_label_pc_10898, label %dec_label_pc_104d0.backedge.thread

dec_label_pc_10878:                               ; preds = %bb342
  %v2_10878 = icmp ugt i8 %v3_1089c, 35
  store i1 %v2_10878, i1* %cpsr_c.global-to-local, align 1
  %v7_10878 = icmp eq i8 %v3_1089c, 36
  store i1 %v7_10878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10878, label %dec_label_pc_108ac, label %dec_label_pc_10880

dec_label_pc_10880:                               ; preds = %dec_label_pc_10878
  %v2_10880 = icmp ugt i8 %v3_1089c, 34
  store i1 %v2_10880, i1* %cpsr_c.global-to-local, align 1
  %v7_10880 = icmp eq i8 %v3_1089c, 35
  store i1 %v7_10880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10880, label %dec_label_pc_108ac, label %dec_label_pc_10888

dec_label_pc_10888:                               ; preds = %dec_label_pc_10880
  %v2_10888 = icmp ugt i8 %v3_1089c, 36
  store i1 %v2_10888, i1* %cpsr_c.global-to-local, align 1
  %v7_10888 = icmp eq i8 %v3_1089c, 37
  store i1 %v7_10888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10888, label %dec_label_pc_108ac, label %dec_label_pc_10890

dec_label_pc_10890:                               ; preds = %dec_label_pc_10888
  %v1_10890 = add i32 %v0_108ac, -1
  store i32 %v1_10890, i32* %r0.global-to-local, align 4
  %v2_10890 = icmp ne i32 %v0_108ac, 0
  store i1 %v2_10890, i1* %cpsr_c.global-to-local, align 1
  %v7_10890 = icmp eq i32 %v0_108ac, 1
  store i1 %v7_10890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10890, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_10898

dec_label_pc_10898:                               ; preds = %dec_label_pc_10864, %dec_label_pc_10890
  %v0_108ac = phi i32 [ %v1_10890, %dec_label_pc_10890 ], [ %v1_10868, %dec_label_pc_10864 ]
  %v2_10898 = add i32 %v0_108ac, %v0_10550
  store i32 %v2_10898, i32* %r3.global-to-local, align 4
  %v1_1089c = add i32 %v2_10898, 28
  %v2_1089c = inttoptr i32 %v1_1089c to i8*
  %v3_1089c = load i8, i8* %v2_1089c, align 1
  %v4_1089c = zext i8 %v3_1089c to i32
  store i32 %v4_1089c, i32* %r3.global-to-local, align 4
  %v2_108a0 = icmp ugt i8 %v3_1089c, 61
  store i1 %v2_108a0, i1* %cpsr_c.global-to-local, align 1
  %v7_108a0 = icmp eq i8 %v3_1089c, 62
  store i1 %v7_108a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108a0, label %dec_label_pc_108ac, label %bb342

bb342:                                            ; preds = %dec_label_pc_10898
  %v3_108a4 = icmp ugt i8 %v3_1089c, 57
  store i1 %v3_108a4, i1* %cpsr_c.global-to-local, align 1
  %v8_108a4 = icmp eq i8 %v3_1089c, 58
  store i1 %v8_108a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_108a4, label %dec_label_pc_108ac, label %dec_label_pc_10878

dec_label_pc_108ac:                               ; preds = %dec_label_pc_10898, %bb342, %dec_label_pc_10888, %dec_label_pc_10880, %dec_label_pc_10878
  %v1_108ac = add i32 %v0_108ac, 1
  store i32 %v1_108ac, i32* @r7, align 4
  %v2_108b0 = icmp eq i32 %v1_108ac, -1
  store i1 %v2_108b0, i1* %cpsr_c.global-to-local, align 1
  %v7_108b0 = icmp eq i32 %v0_108ac, -2
  store i1 %v7_108b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108b0, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_108b8

dec_label_pc_108b8:                               ; preds = %dec_label_pc_108ac
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_108b8 = icmp eq i32 %v1_108ac, 0
  store i1 %v2_108b8, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v1_108ac, 1
  br i1 %tmp343, label %dec_label_pc_10660, label %dec_label_pc_108c0

dec_label_pc_108c0:                               ; preds = %dec_label_pc_108b8
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_108c4 = call i32 @function_110fc(i32 22)
  store i32 %v2_108cc, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_108d4 = call i32 @function_11018(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_108d4, i32* %r0.global-to-local, align 4
  %v3_108d8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_108d8, i32* %r2.global-to-local, align 4
  store i32 %v3_108d4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_108e4 = load i32, i32* @r5, align 4
  %v1_108e4 = add i32 %v0_108e4, 4
  %v2_108e4 = inttoptr i32 %v1_108e4 to i32*
  %v3_108e4 = load i32, i32* %v2_108e4, align 4
  store i32 %v3_108e4, i32* %r0.global-to-local, align 4
  %v4_108e8 = inttoptr i32 %v3_108d4 to i32*
  %v5_108e8 = call i32 @function_12b6c(i32 %v3_108e4, i32* %v4_108e8, i32 %v3_108d8, i32 16384)
  store i32 %v5_108e8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15138.501 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_108f8 = load i32, i32* @r5, align 4
  %v1_108f8 = add i32 %v0_108f8, 4
  %v2_108f8 = inttoptr i32 %v1_108f8 to i32*
  %v3_108f8 = load i32, i32* %v2_108f8, align 4
  store i32 %v3_108f8, i32* %r0.global-to-local, align 4
  %v5_108fc = call i32 @function_12b6c(i32 %v3_108f8, i32* bitcast ([3 x i8]* @global_var_15138.501 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_10904 = call i32 @function_11044(i32 22)
  store i32 %v1_10904, i32* %r0.global-to-local, align 4
  %v0_10908 = load i32, i32* @r5, align 4
  %v1_10908 = add i32 %v0_10908, 24
  %v2_10908 = inttoptr i32 %v1_10908 to i32*
  %v3_10908 = load i32, i32* %v2_10908, align 4
  store i32 %v3_10908, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10910 = add i32 %v0_10908, 12
  %v3_10910 = inttoptr i32 %v2_10910 to i32*
  store i32 7, i32* %v3_10910, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10918:                               ; preds = %dec_label_pc_10550
  %v1_10918 = add i32 %v0_10550, 24
  %v2_10918 = inttoptr i32 %v1_10918 to i32*
  %v3_10918 = load i32, i32* %v2_10918, align 4
  store i32 %v3_10918, i32* %ip.global-to-local, align 4
  %v1_1091c = add i32 %v3_10918, -1
  store i32 %v1_1091c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10920 = icmp eq i32 %v1_1091c, 0
  store i1 %v2_10920, i1* %cpsr_z.global-to-local, align 1
  %v5_10924 = icmp sgt i32 %v1_1091c, 0
  br i1 %v5_10924, label %dec_label_pc_1094c, label %dec_label_pc_104d0.backedge.thread

dec_label_pc_1092c:                               ; preds = %bb344
  %v2_1092c = icmp ugt i8 %v3_10950, 35
  store i1 %v2_1092c, i1* %cpsr_c.global-to-local, align 1
  %v7_1092c = icmp eq i8 %v3_10950, 36
  store i1 %v7_1092c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1092c, label %dec_label_pc_10960, label %dec_label_pc_10934

dec_label_pc_10934:                               ; preds = %dec_label_pc_1092c
  %v2_10934 = icmp ugt i8 %v3_10950, 34
  store i1 %v2_10934, i1* %cpsr_c.global-to-local, align 1
  %v7_10934 = icmp eq i8 %v3_10950, 35
  store i1 %v7_10934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10934, label %dec_label_pc_10960, label %dec_label_pc_1093c

dec_label_pc_1093c:                               ; preds = %dec_label_pc_10934
  %v2_1093c = icmp ugt i8 %v3_10950, 36
  store i1 %v2_1093c, i1* %cpsr_c.global-to-local, align 1
  %v7_1093c = icmp eq i8 %v3_10950, 37
  store i1 %v7_1093c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1093c, label %dec_label_pc_10960, label %dec_label_pc_10944

dec_label_pc_10944:                               ; preds = %dec_label_pc_1093c
  %v1_10944 = add i32 %v0_10960, -1
  store i32 %v1_10944, i32* %r0.global-to-local, align 4
  %v2_10944 = icmp ne i32 %v0_10960, 0
  store i1 %v2_10944, i1* %cpsr_c.global-to-local, align 1
  %v7_10944 = icmp eq i32 %v0_10960, 1
  store i1 %v7_10944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10944, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_1094c

dec_label_pc_1094c:                               ; preds = %dec_label_pc_10918, %dec_label_pc_10944
  %v0_10960 = phi i32 [ %v1_10944, %dec_label_pc_10944 ], [ %v1_1091c, %dec_label_pc_10918 ]
  %v2_1094c = add i32 %v0_10960, %v0_10550
  store i32 %v2_1094c, i32* %r3.global-to-local, align 4
  %v1_10950 = add i32 %v2_1094c, 28
  %v2_10950 = inttoptr i32 %v1_10950 to i8*
  %v3_10950 = load i8, i8* %v2_10950, align 1
  %v4_10950 = zext i8 %v3_10950 to i32
  store i32 %v4_10950, i32* %r3.global-to-local, align 4
  %v2_10954 = icmp ugt i8 %v3_10950, 61
  store i1 %v2_10954, i1* %cpsr_c.global-to-local, align 1
  %v7_10954 = icmp eq i8 %v3_10950, 62
  store i1 %v7_10954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10954, label %dec_label_pc_10960, label %bb344

bb344:                                            ; preds = %dec_label_pc_1094c
  %v3_10958 = icmp ugt i8 %v3_10950, 57
  store i1 %v3_10958, i1* %cpsr_c.global-to-local, align 1
  %v8_10958 = icmp eq i8 %v3_10950, 58
  store i1 %v8_10958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10958, label %dec_label_pc_10960, label %dec_label_pc_1092c

dec_label_pc_10960:                               ; preds = %dec_label_pc_1094c, %bb344, %dec_label_pc_1093c, %dec_label_pc_10934, %dec_label_pc_1092c
  %v1_10960 = add i32 %v0_10960, 1
  store i32 %v1_10960, i32* @r7, align 4
  %v2_10964 = icmp eq i32 %v1_10960, -1
  store i1 %v2_10964, i1* %cpsr_c.global-to-local, align 1
  %v7_10964 = icmp eq i32 %v0_10960, -2
  store i1 %v7_10964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10964, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_1096c

dec_label_pc_1096c:                               ; preds = %dec_label_pc_10960
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1096c = icmp eq i32 %v1_10960, 0
  store i1 %v2_1096c, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v1_10960, 1
  br i1 %tmp345, label %dec_label_pc_10660, label %dec_label_pc_10974

dec_label_pc_10974:                               ; preds = %dec_label_pc_1096c
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_10978 = call i32 @function_110fc(i32 23)
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_10988 = call i32 @function_11018(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_10988, i32* %r0.global-to-local, align 4
  %v3_1098c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1098c, i32* %r2.global-to-local, align 4
  store i32 %v3_10988, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10998 = load i32, i32* @r5, align 4
  %v1_10998 = add i32 %v0_10998, 4
  %v2_10998 = inttoptr i32 %v1_10998 to i32*
  %v3_10998 = load i32, i32* %v2_10998, align 4
  store i32 %v3_10998, i32* %r0.global-to-local, align 4
  %v4_1099c = inttoptr i32 %v3_10988 to i32*
  %v5_1099c = call i32 @function_12b6c(i32 %v3_10998, i32* %v4_1099c, i32 %v3_1098c, i32 16384)
  store i32 %v5_1099c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15138.501 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109ac = load i32, i32* @r5, align 4
  %v1_109ac = add i32 %v0_109ac, 4
  %v2_109ac = inttoptr i32 %v1_109ac to i32*
  %v3_109ac = load i32, i32* %v2_109ac, align 4
  store i32 %v3_109ac, i32* %r0.global-to-local, align 4
  %v5_109b0 = call i32 @function_12b6c(i32 %v3_109ac, i32* bitcast ([3 x i8]* @global_var_15138.501 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_109b8 = call i32 @function_11044(i32 23)
  store i32 %v1_109b8, i32* %r0.global-to-local, align 4
  %v0_109bc = load i32, i32* @r5, align 4
  %v1_109bc = add i32 %v0_109bc, 24
  %v2_109bc = inttoptr i32 %v1_109bc to i32*
  %v3_109bc = load i32, i32* %v2_109bc, align 4
  store i32 %v3_109bc, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_109c4 = add i32 %v0_109bc, 12
  %v3_109c4 = inttoptr i32 %v2_109c4 to i32*
  store i32 9, i32* %v3_109c4, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_109cc:                               ; preds = %dec_label_pc_10550
  %v1_109cc = add i32 %v0_10550, 24
  %v2_109cc = inttoptr i32 %v1_109cc to i32*
  %v3_109cc = load i32, i32* %v2_109cc, align 4
  store i32 %v3_109cc, i32* %ip.global-to-local, align 4
  %v1_109d0 = add i32 %v3_109cc, -1
  store i32 %v1_109d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109d4 = icmp eq i32 %v1_109d0, 0
  store i1 %v2_109d4, i1* %cpsr_z.global-to-local, align 1
  %v5_109d8 = icmp sgt i32 %v1_109d0, 0
  br i1 %v5_109d8, label %dec_label_pc_10a00, label %dec_label_pc_104d0.backedge.thread

dec_label_pc_109e0:                               ; preds = %bb346
  %v2_109e0 = icmp ugt i8 %v3_10a04, 35
  store i1 %v2_109e0, i1* %cpsr_c.global-to-local, align 1
  %v7_109e0 = icmp eq i8 %v3_10a04, 36
  store i1 %v7_109e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109e0, label %dec_label_pc_10a14, label %dec_label_pc_109e8

dec_label_pc_109e8:                               ; preds = %dec_label_pc_109e0
  %v2_109e8 = icmp ugt i8 %v3_10a04, 34
  store i1 %v2_109e8, i1* %cpsr_c.global-to-local, align 1
  %v7_109e8 = icmp eq i8 %v3_10a04, 35
  store i1 %v7_109e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109e8, label %dec_label_pc_10a14, label %dec_label_pc_109f0

dec_label_pc_109f0:                               ; preds = %dec_label_pc_109e8
  %v2_109f0 = icmp ugt i8 %v3_10a04, 36
  store i1 %v2_109f0, i1* %cpsr_c.global-to-local, align 1
  %v7_109f0 = icmp eq i8 %v3_10a04, 37
  store i1 %v7_109f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109f0, label %dec_label_pc_10a14, label %dec_label_pc_109f8

dec_label_pc_109f8:                               ; preds = %dec_label_pc_109f0
  %v1_109f8 = add i32 %v0_10a14, -1
  store i32 %v1_109f8, i32* %r0.global-to-local, align 4
  %v2_109f8 = icmp ne i32 %v0_10a14, 0
  store i1 %v2_109f8, i1* %cpsr_c.global-to-local, align 1
  %v7_109f8 = icmp eq i32 %v0_10a14, 1
  store i1 %v7_109f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109f8, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_10a00

dec_label_pc_10a00:                               ; preds = %dec_label_pc_109cc, %dec_label_pc_109f8
  %v0_10a14 = phi i32 [ %v1_109f8, %dec_label_pc_109f8 ], [ %v1_109d0, %dec_label_pc_109cc ]
  %v2_10a00 = add i32 %v0_10a14, %v0_10550
  store i32 %v2_10a00, i32* %r3.global-to-local, align 4
  %v1_10a04 = add i32 %v2_10a00, 28
  %v2_10a04 = inttoptr i32 %v1_10a04 to i8*
  %v3_10a04 = load i8, i8* %v2_10a04, align 1
  %v4_10a04 = zext i8 %v3_10a04 to i32
  store i32 %v4_10a04, i32* %r3.global-to-local, align 4
  %v2_10a08 = icmp ugt i8 %v3_10a04, 61
  store i1 %v2_10a08, i1* %cpsr_c.global-to-local, align 1
  %v7_10a08 = icmp eq i8 %v3_10a04, 62
  store i1 %v7_10a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a08, label %dec_label_pc_10a14, label %bb346

bb346:                                            ; preds = %dec_label_pc_10a00
  %v3_10a0c = icmp ugt i8 %v3_10a04, 57
  store i1 %v3_10a0c, i1* %cpsr_c.global-to-local, align 1
  %v8_10a0c = icmp eq i8 %v3_10a04, 58
  store i1 %v8_10a0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10a0c, label %dec_label_pc_10a14, label %dec_label_pc_109e0

dec_label_pc_10a14:                               ; preds = %dec_label_pc_10a00, %bb346, %dec_label_pc_109f0, %dec_label_pc_109e8, %dec_label_pc_109e0
  %v1_10a14 = add i32 %v0_10a14, 1
  store i32 %v1_10a14, i32* @r7, align 4
  %v2_10a18 = icmp eq i32 %v1_10a14, -1
  store i1 %v2_10a18, i1* %cpsr_c.global-to-local, align 1
  %v7_10a18 = icmp eq i32 %v0_10a14, -2
  store i1 %v7_10a18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a18, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_10a20

dec_label_pc_10a20:                               ; preds = %dec_label_pc_10a14
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a20 = icmp eq i32 %v1_10a14, 0
  store i1 %v2_10a20, i1* %cpsr_z.global-to-local, align 1
  %tmp347 = icmp slt i32 %v1_10a14, 1
  br i1 %tmp347, label %dec_label_pc_10660, label %dec_label_pc_10a28

dec_label_pc_10a28:                               ; preds = %dec_label_pc_10a20
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_10a2c = call i32 @function_110fc(i32 20)
  store i32 %v2_108cc, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_10a3c = call i32 @function_11018(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_10a3c, i32* %r0.global-to-local, align 4
  %v3_10a40 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10a40, i32* %r2.global-to-local, align 4
  store i32 %v3_10a3c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10a4c = load i32, i32* @r5, align 4
  %v1_10a4c = add i32 %v0_10a4c, 4
  %v2_10a4c = inttoptr i32 %v1_10a4c to i32*
  %v3_10a4c = load i32, i32* %v2_10a4c, align 4
  store i32 %v3_10a4c, i32* %r0.global-to-local, align 4
  %v4_10a50 = inttoptr i32 %v3_10a3c to i32*
  %v5_10a50 = call i32 @function_12b6c(i32 %v3_10a4c, i32* %v4_10a50, i32 %v3_10a40, i32 16384)
  store i32 %v5_10a50, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15138.501 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10a60 = load i32, i32* @r5, align 4
  %v1_10a60 = add i32 %v0_10a60, 4
  %v2_10a60 = inttoptr i32 %v1_10a60 to i32*
  %v3_10a60 = load i32, i32* %v2_10a60, align 4
  store i32 %v3_10a60, i32* %r0.global-to-local, align 4
  %v5_10a64 = call i32 @function_12b6c(i32 %v3_10a60, i32* bitcast ([3 x i8]* @global_var_15138.501 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_10a6c = call i32 @function_11044(i32 20)
  store i32 %v1_10a6c, i32* %r0.global-to-local, align 4
  %v0_10a70 = load i32, i32* @r5, align 4
  %v1_10a70 = add i32 %v0_10a70, 24
  %v2_10a70 = inttoptr i32 %v1_10a70 to i32*
  %v3_10a70 = load i32, i32* %v2_10a70, align 4
  store i32 %v3_10a70, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10a78 = add i32 %v0_10a70, 12
  %v3_10a78 = inttoptr i32 %v2_10a78 to i32*
  store i32 8, i32* %v3_10a78, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10a80:                               ; preds = %dec_label_pc_10550
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10a84 = call i32 @function_110fc(i32 26)
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_10a94 = call i32 @function_11018(i32 26, i32* nonnull %stack_var_-56)
  %v3_10a98 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10a94, i32* %r2.global-to-local, align 4
  %v1_10aa0 = add i32 %v3_10a98, -1
  store i32 %v1_10aa0, i32* %r3.global-to-local, align 4
  %v0_10aa4 = load i32, i32* @sb, align 4
  store i32 %v0_10aa4, i32* %r0.global-to-local, align 4
  %v0_10aa8 = load i32, i32* @r5, align 4
  %v1_10aa8 = add i32 %v0_10aa8, 24
  %v2_10aa8 = inttoptr i32 %v1_10aa8 to i32*
  %v3_10aa8 = load i32, i32* %v2_10aa8, align 4
  store i32 %v3_10aa8, i32* %r1.global-to-local, align 4
  %v4_10aac = call i32 @function_11aa0(i32 %v0_10aa4, i32 %v3_10aa8, i32 %v3_10a94, i32 %v1_10aa0)
  %v3_10ab0 = icmp eq i32 %v4_10aac, -1
  store i1 %v3_10ab0, i1* %cpsr_c.global-to-local, align 1
  %v8_10ab0 = icmp eq i32 %v4_10aac, -1
  store i1 %v8_10ab0, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10abc = call i32 @function_11044(i32 26)
  br i1 %v3_10ab0, label %dec_label_pc_10ab8, label %dec_label_pc_10d40

dec_label_pc_10ab8:                               ; preds = %dec_label_pc_10a80
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10ac4 = call i32 @function_110fc(i32 25)
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_10ad4 = call i32 @function_11018(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_10ad4, i32* %r0.global-to-local, align 4
  %v3_10ad8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10ad4, i32* %r2.global-to-local, align 4
  %v1_10ae0 = add i32 %v3_10ad8, -1
  store i32 %v1_10ae0, i32* %r3.global-to-local, align 4
  %v0_10ae4 = load i32, i32* @r5, align 4
  %v1_10ae4 = add i32 %v0_10ae4, 24
  %v2_10ae4 = inttoptr i32 %v1_10ae4 to i32*
  %v3_10ae4 = load i32, i32* %v2_10ae4, align 4
  store i32 %v3_10ae4, i32* %r1.global-to-local, align 4
  %v0_10ae8 = load i32, i32* @sb, align 4
  store i32 %v0_10ae8, i32* %r0.global-to-local, align 4
  %v4_10aec = call i32 @function_11aa0(i32 %v0_10ae8, i32 %v3_10ae4, i32 %v3_10ad4, i32 %v1_10ae0)
  store i32 %v4_10aec, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10af8 = call i32 @function_11044(i32 25)
  store i32 %v1_10af8, i32* %r0.global-to-local, align 4
  %v0_10afc = load i32, i32* @r7, align 4
  %v2_10afc = icmp eq i32 %v0_10afc, -1
  store i1 %v2_10afc, i1* %cpsr_c.global-to-local, align 1
  %v7_10afc = icmp eq i32 %v0_10afc, -1
  store i1 %v7_10afc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10afc, label %dec_label_pc_104cc.loopexit, label %dec_label_pc_10b04

dec_label_pc_10b04:                               ; preds = %dec_label_pc_10ab8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b04 = icmp eq i32 %v0_10afc, 0
  store i1 %v2_10b04, i1* %cpsr_z.global-to-local, align 1
  %tmp348 = icmp slt i32 %v0_10afc, 1
  br i1 %tmp348, label %dec_label_pc_10660, label %dec_label_pc_10b0c

dec_label_pc_10b0c:                               ; preds = %dec_label_pc_10b04
  %v0_10b0c = load i32, i32* @r5, align 4
  %v1_10b0c = add i32 %v0_10b0c, 21
  %v2_10b0c = inttoptr i32 %v1_10b0c to i8*
  %v3_10b0c = load i8, i8* %v2_10b0c, align 1
  %v4_10b0c = zext i8 %v3_10b0c to i32
  store i32 %v4_10b0c, i32* %r3.global-to-local, align 4
  %v1_10b10 = add i32 %v0_10b0c, 20
  %v2_10b10 = inttoptr i32 %v1_10b10 to i8*
  %v3_10b10 = load i8, i8* %v2_10b10, align 1
  %v4_10b10 = zext i8 %v3_10b10 to i32
  store i32 %v4_10b10, i32* %r2.global-to-local, align 4
  %v1_10b14 = add i32 %v0_10b0c, 16
  %v2_10b14 = inttoptr i32 %v1_10b14 to i32*
  %v3_10b14 = load i32, i32* %v2_10b14, align 4
  store i32 %v3_10b14, i32* %r1.global-to-local, align 4
  %v4_10b18 = mul nuw nsw i32 %v4_10b0c, 256
  %v5_10b18 = or i32 %v4_10b10, %v4_10b18
  store i32 %v5_10b18, i32* %r2.global-to-local, align 4
  %v1_10b1c = and i32 %v4_10b10, 128
  %v2_10b1c = icmp ne i32 %v1_10b1c, 0
  store i1 %v2_10b1c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_10b0c, i32* %r3.global-to-local, align 4
  store i32 %v3_10b14, i32* %stack_var_-48, align 4
  store i32 %v5_10b18, i32* %stack_var_-38, align 4
  %v1_10b2c = inttoptr i32 %v0_10b0c to i32*
  %v2_10b2c = load i32, i32* %v1_10b2c, align 4
  store i32 %v2_10b2c, i32* @fp, align 4
  %v0_10b30 = call i32 @function_1230c()
  store i32 %v0_10b30, i32* %r0.global-to-local, align 4
  %v7_10b34 = icmp eq i32 %v0_10b30, -1
  %.364 = zext i1 %v7_10b34 to i32
  store i32 %.364, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b40 = icmp eq i32 %v0_10b30, 0
  store i1 %v2_10b40, i1* %cpsr_z.global-to-local, align 1
  %tmp351 = icmp slt i32 %v0_10b30, 1
  br i1 %tmp351, label %bb352, label %.thread76

.thread76:                                        ; preds = %dec_label_pc_10b0c
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10b98

bb352:                                            ; preds = %dec_label_pc_10b0c
  store i32 %.364, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b4c = icmp eq i1 %v7_10b34, false
  store i1 %v2_10b4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10b4c, label %dec_label_pc_10b54, label %dec_label_pc_10b98

dec_label_pc_10b54:                               ; preds = %bb352
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10b60 = call i32 @function_12bfc(i32 2, i32 1, i32 0)
  store i32 %v3_10b60, i32* %r0.global-to-local, align 4
  %v2_10b64 = icmp eq i32 %v3_10b60, -1
  store i1 %v2_10b64, i1* %cpsr_c.global-to-local, align 1
  %v7_10b64 = icmp eq i32 %v3_10b60, -1
  store i1 %v7_10b64, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10b60, i32* @r6, align 4
  br i1 %v7_10b64, label %dec_label_pc_10fc4, label %dec_label_pc_10b70

dec_label_pc_10b70:                               ; preds = %dec_label_pc_10b54
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_10b74 = call i32 @function_110fc(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_10b7c = call i32 @function_110fc(i32 19)
  %v0_10b80 = load i32, i32* @sl, align 4
  store i32 %v0_10b80, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v2_10b88 = inttoptr i32 %v0_10b80 to i32*
  %v3_10b88 = call i32 @function_11018(i32 18, i32* %v2_10b88)
  store i32 %v3_10b88, i32* %r0.global-to-local, align 4
  %v1_10b8c = inttoptr i32 %v3_10b88 to i8*
  %v2_10b8c = call i32 @function_e3e4(i8* %v1_10b8c)
  store i32 %v2_10b8c, i32* %r0.global-to-local, align 4
  store i32 %v2_10b8c, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_10b90 = icmp eq i32 %v2_10b8c, 0
  store i1 %v3_10b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10b90, label %dec_label_pc_10b98, label %dec_label_pc_10e94

dec_label_pc_10b98:                               ; preds = %.thread76, %dec_label_pc_10b70, %bb352
  %v0_10b98 = load i32, i32* @r5, align 4
  %v1_10b98 = add i32 %v0_10b98, 4
  %v2_10b98 = inttoptr i32 %v1_10b98 to i32*
  %v3_10b98 = load i32, i32* %v2_10b98, align 4
  store i32 %v3_10b98, i32* %r0.global-to-local, align 4
  %v1_10b9c = call i32 @function_122e0(i32 %v3_10b98)
  store i32 %v1_10b9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_10ba8 = load i32, i32* @r5, align 4
  %v1_10ba8 = add i32 %v0_10ba8, 24
  %v2_10ba8 = inttoptr i32 %v1_10ba8 to i32*
  %v3_10ba8 = load i32, i32* %v2_10ba8, align 4
  store i32 %v3_10ba8, i32* %ip.global-to-local, align 4
  %v2_10bac = add i32 %v0_10ba8, 4
  %v3_10bac = inttoptr i32 %v2_10bac to i32*
  store i32 -1, i32* %v3_10bac, align 4
  %v0_10bb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_10bb0 = load i32, i32* @r5, align 4
  %v2_10bb0 = add i32 %v1_10bb0, 12
  %v3_10bb0 = inttoptr i32 %v2_10bb0 to i32*
  store i32 %v0_10bb0, i32* %v3_10bb0, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10bb4:                               ; preds = %.thread216, %dec_label_pc_10e34, %dec_label_pc_10d70, %dec_label_pc_10a28, %dec_label_pc_10974, %dec_label_pc_108c0, %dec_label_pc_1080c, %dec_label_pc_10774, %dec_label_pc_106dc, %dec_label_pc_10668, %dec_label_pc_10c34, %dec_label_pc_10b98
  %v0_10bb4 = load i32, i32* %ip.global-to-local, align 4
  %v1_10bb4 = load i32, i32* @r7, align 4
  %v2_10bb4 = sub i32 %v0_10bb4, %v1_10bb4
  %v3_10bb4 = icmp uge i32 %v0_10bb4, %v1_10bb4
  store i1 %v3_10bb4, i1* %cpsr_c.global-to-local, align 1
  %v4_10bb4 = xor i32 %v1_10bb4, %v0_10bb4
  %v5_10bb4 = xor i32 %v2_10bb4, %v0_10bb4
  %v6_10bb4 = and i32 %v5_10bb4, %v4_10bb4
  %v7_10bb4 = icmp slt i32 %v6_10bb4, 0
  %v8_10bb4 = icmp slt i32 %v2_10bb4, 0
  %v9_10bb4 = icmp eq i32 %v0_10bb4, %v1_10bb4
  store i1 %v9_10bb4, i1* %cpsr_z.global-to-local, align 1
  %v2_10bb8 = xor i1 %v8_10bb4, %v7_10bb4
  %v0_10bb4.v1_10bb4 = select i1 %v2_10bb8, i32 %v0_10bb4, i32 %v1_10bb4
  store i32 %v0_10bb4.v1_10bb4, i32* %r1.global-to-local, align 4
  %v2_10bc0 = sub i32 %v0_10bb4, %v0_10bb4.v1_10bb4
  store i32 %v2_10bc0, i32* @r2, align 4
  %v1_10bc4 = load i32, i32* @r5, align 4
  %v2_10bc4 = add i32 %v1_10bc4, 24
  %v3_10bc4 = inttoptr i32 %v2_10bc4 to i32*
  store i32 %v2_10bc0, i32* %v3_10bc4, align 4
  %v0_10bc8 = load i32, i32* @sb, align 4
  %v1_10bc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_10bc8 = add i32 %v1_10bc8, %v0_10bc8
  store i32 %v2_10bc8, i32* @r1, align 4
  store i32 %v0_10bc8, i32* @r0, align 4
  %v3_10bd0 = call i32 @function_12910(i32 %v0_10bc8, i32 %v2_10bc8, i32 %v2_10bc0)
  store i32 %v3_10bd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10550

dec_label_pc_10bd8:                               ; preds = %dec_label_pc_10550
  %v1_10bd8 = add i32 %v0_10550, 24
  %v2_10bd8 = inttoptr i32 %v1_10bd8 to i32*
  %v3_10bd8 = load i32, i32* %v2_10bd8, align 4
  store i32 %v3_10bd8, i32* %ip.global-to-local, align 4
  %v1_10bdc = add i32 %v3_10bd8, -1
  store i32 %v1_10bdc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10be0 = icmp eq i32 %v1_10bdc, 0
  store i1 %v2_10be0, i1* %cpsr_z.global-to-local, align 1
  %v5_10be4 = icmp sgt i32 %v1_10bdc, 0
  br i1 %v5_10be4, label %dec_label_pc_10c0c, label %dec_label_pc_104d0.backedge.thread

dec_label_pc_10bec:                               ; preds = %bb355
  %v2_10bec = icmp ugt i8 %v3_10c10, 35
  store i1 %v2_10bec, i1* %cpsr_c.global-to-local, align 1
  %v7_10bec = icmp eq i8 %v3_10c10, 36
  store i1 %v7_10bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bec, label %dec_label_pc_10c20, label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bec
  %v2_10bf4 = icmp ugt i8 %v3_10c10, 34
  store i1 %v2_10bf4, i1* %cpsr_c.global-to-local, align 1
  %v7_10bf4 = icmp eq i8 %v3_10c10, 35
  store i1 %v7_10bf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bf4, label %dec_label_pc_10c20, label %dec_label_pc_10bfc

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10bf4
  %v2_10bfc = icmp ugt i8 %v3_10c10, 36
  store i1 %v2_10bfc, i1* %cpsr_c.global-to-local, align 1
  %v7_10bfc = icmp eq i8 %v3_10c10, 37
  store i1 %v7_10bfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bfc, label %dec_label_pc_10c20, label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10bfc
  %v1_10c04 = add i32 %v0_10c20, -1
  store i32 %v1_10c04, i32* %r0.global-to-local, align 4
  %v2_10c04 = icmp ne i32 %v0_10c20, 0
  store i1 %v2_10c04, i1* %cpsr_c.global-to-local, align 1
  %v7_10c04 = icmp eq i32 %v0_10c20, 1
  store i1 %v7_10c04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c04, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_10c0c

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10bd8, %dec_label_pc_10c04
  %v0_10c20 = phi i32 [ %v1_10c04, %dec_label_pc_10c04 ], [ %v1_10bdc, %dec_label_pc_10bd8 ]
  %v2_10c0c = add i32 %v0_10c20, %v0_10550
  store i32 %v2_10c0c, i32* %r3.global-to-local, align 4
  %v1_10c10 = add i32 %v2_10c0c, 28
  %v2_10c10 = inttoptr i32 %v1_10c10 to i8*
  %v3_10c10 = load i8, i8* %v2_10c10, align 1
  %v4_10c10 = zext i8 %v3_10c10 to i32
  store i32 %v4_10c10, i32* %r3.global-to-local, align 4
  %v2_10c14 = icmp ugt i8 %v3_10c10, 61
  store i1 %v2_10c14, i1* %cpsr_c.global-to-local, align 1
  %v7_10c14 = icmp eq i8 %v3_10c10, 62
  store i1 %v7_10c14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c14, label %dec_label_pc_10c20, label %bb355

bb355:                                            ; preds = %dec_label_pc_10c0c
  %v3_10c18 = icmp ugt i8 %v3_10c10, 57
  store i1 %v3_10c18, i1* %cpsr_c.global-to-local, align 1
  %v8_10c18 = icmp eq i8 %v3_10c10, 58
  store i1 %v8_10c18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10c18, label %dec_label_pc_10c20, label %dec_label_pc_10bec

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10c0c, %bb355, %dec_label_pc_10bfc, %dec_label_pc_10bf4, %dec_label_pc_10bec
  %v1_10c20 = add i32 %v0_10c20, 1
  store i32 %v1_10c20, i32* @r7, align 4
  %v2_10c24 = icmp eq i32 %v1_10c20, -1
  store i1 %v2_10c24, i1* %cpsr_c.global-to-local, align 1
  %v7_10c24 = icmp eq i32 %v0_10c20, -2
  store i1 %v7_10c24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c24, label %dec_label_pc_104d0.backedge.thread466, label %dec_label_pc_10c2c

dec_label_pc_10c2c:                               ; preds = %dec_label_pc_10c20
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c2c = icmp eq i32 %v1_10c20, 0
  store i1 %v2_10c2c, i1* %cpsr_z.global-to-local, align 1
  %tmp356 = icmp slt i32 %v1_10c20, 1
  br i1 %tmp356, label %dec_label_pc_10660, label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c2c
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_10c38 = call i32 @function_110fc(i32 24)
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_10c48 = call i32 @function_11018(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_10c48, i32* %r0.global-to-local, align 4
  %v3_10c4c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10c4c, i32* %r2.global-to-local, align 4
  store i32 %v3_10c48, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c58 = load i32, i32* @r5, align 4
  %v1_10c58 = add i32 %v0_10c58, 4
  %v2_10c58 = inttoptr i32 %v1_10c58 to i32*
  %v3_10c58 = load i32, i32* %v2_10c58, align 4
  store i32 %v3_10c58, i32* %r0.global-to-local, align 4
  %v4_10c5c = inttoptr i32 %v3_10c48 to i32*
  %v5_10c5c = call i32 @function_12b6c(i32 %v3_10c58, i32* %v4_10c5c, i32 %v3_10c4c, i32 16384)
  store i32 %v5_10c5c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15138.501 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c6c = load i32, i32* @r5, align 4
  %v1_10c6c = add i32 %v0_10c6c, 4
  %v2_10c6c = inttoptr i32 %v1_10c6c to i32*
  %v3_10c6c = load i32, i32* %v2_10c6c, align 4
  store i32 %v3_10c6c, i32* %r0.global-to-local, align 4
  %v5_10c70 = call i32 @function_12b6c(i32 %v3_10c6c, i32* bitcast ([3 x i8]* @global_var_15138.501 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_10c78 = call i32 @function_11044(i32 24)
  store i32 %v1_10c78, i32* %r0.global-to-local, align 4
  %v0_10c7c = load i32, i32* @r5, align 4
  %v1_10c7c = add i32 %v0_10c7c, 24
  %v2_10c7c = inttoptr i32 %v1_10c7c to i32*
  %v3_10c7c = load i32, i32* %v2_10c7c, align 4
  store i32 %v3_10c7c, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10c84 = add i32 %v0_10c7c, 12
  %v3_10c84 = inttoptr i32 %v2_10c84 to i32*
  store i32 10, i32* %v3_10c84, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10c8c:                               ; preds = %dec_label_pc_105e0
  store i32 ptrtoint (i32* @global_var_15144.503 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_10598, i32* @r0, align 4
  %v3_10c98 = call i32 @function_12900(i32 %v2_10598, i32 ptrtoint (i32* @global_var_15144.503 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_10ca4, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1513b.505 to i32), i32* @r1, align 4
  %v3_10cac = call i32 @function_12900(i32 %v2_10ca4, i32 ptrtoint (i32* @global_var_1513b.505 to i32), i32 9)
  store i32 %v3_10cac, i32* %r0.global-to-local, align 4
  %v0_10cb0 = load i32, i32* @r5, align 4
  %v1_10cb0 = add i32 %v0_10cb0, 24
  %v2_10cb0 = inttoptr i32 %v1_10cb0 to i32*
  %v3_10cb0 = load i32, i32* %v2_10cb0, align 4
  store i32 %v3_10cb0, i32* %ip.global-to-local, align 4
  %v0_10cb4 = load i32, i32* @r6, align 4
  %v1_10cb4 = add i32 %v0_10cb4, 2
  store i32 %v1_10cb4, i32* %r2.global-to-local, align 4
  %v0_10cb8 = load i32, i32* @sb, align 4
  %v2_10cb8 = add i32 %v0_10cb8, %v3_10cb0
  store i32 %v2_10cb8, i32* %r3.global-to-local, align 4
  %v3_10cbc = icmp uge i32 %v2_10cb8, %v1_10cb4
  store i1 %v3_10cbc, i1* %cpsr_c.global-to-local, align 1
  %v9_10cbc = icmp eq i32 %v2_10cb8, %v1_10cb4
  store i1 %v9_10cbc, i1* %cpsr_z.global-to-local, align 1
  %v2_10cc0 = xor i1 %v3_10cbc, true
  %v3_10cc0 = or i1 %v9_10cbc, %v2_10cc0
  br i1 %v3_10cc0, label %dec_label_pc_10c8c.dec_label_pc_10650.loopexit_crit_edge, label %dec_label_pc_10cc4

dec_label_pc_10c8c.dec_label_pc_10650.loopexit_crit_edge: ; preds = %dec_label_pc_10c8c
  %v0_10650.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10650

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_10c8c
  %v0_10cc4 = load i32, i32* @r4, align 4
  %v1_10cc4 = add i32 %v0_10cc4, 1
  %v2_10cc4 = inttoptr i32 %v1_10cc4 to i8*
  %v3_10cc4 = load i8, i8* %v2_10cc4, align 1
  %v4_10cc4 = zext i8 %v3_10cc4 to i32
  store i32 %v4_10cc4, i32* %r3.global-to-local, align 4
  %v2_10cc8 = icmp ugt i8 %v3_10cc4, 30
  store i1 %v2_10cc8, i1* %cpsr_c.global-to-local, align 1
  %v7_10cc8 = icmp eq i8 %v3_10cc4, 31
  store i1 %v7_10cc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cc8, label %dec_label_pc_10de8, label %dec_label_pc_10cd0

dec_label_pc_10cd0:                               ; preds = %dec_label_pc_10cc4
  %v1_10cd0 = add i32 %v0_10cc4, -1
  %v2_10cd0 = inttoptr i32 %v1_10cd0 to i8*
  %v3_10cd0 = load i8, i8* %v2_10cd0, align 1
  %v4_10cd0 = zext i8 %v3_10cd0 to i32
  store i32 %v4_10cd0, i32* %r3.global-to-local, align 4
  %v2_10cd4 = icmp ugt i8 %v3_10cd0, -4
  store i1 %v2_10cd4, i1* %cpsr_c.global-to-local, align 1
  %v7_10cd4 = icmp eq i8 %v3_10cd0, -3
  store i1 %v7_10cd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cd4, label %bb357, label %dec_label_pc_10ce0

bb357:                                            ; preds = %dec_label_pc_10cd0
  %v1_10cd8 = load i32, i32* @r8, align 4
  %v2_10cd8 = trunc i32 %v1_10cd8 to i8
  store i8 %v2_10cd8, i8* %v2_10cd0, align 1
  %v0_10cdc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10cdc.pr, label %dec_label_pc_105f4, label %.dec_label_pc_10ce0_crit_edge

.dec_label_pc_10ce0_crit_edge:                    ; preds = %bb357
  %v0_10ce0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10ce0

dec_label_pc_10ce0:                               ; preds = %.dec_label_pc_10ce0_crit_edge, %dec_label_pc_10cd0
  %v0_10ce0 = phi i32 [ %v0_10ce0.pre, %.dec_label_pc_10ce0_crit_edge ], [ %v4_10cd0, %dec_label_pc_10cd0 ]
  %v2_10ce0 = icmp ugt i32 %v0_10ce0, 250
  store i1 %v2_10ce0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ce0 = icmp eq i32 %v0_10ce0, 251
  store i1 %v7_10ce0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ce0, label %bb358, label %dec_label_pc_105f4

bb358:                                            ; preds = %dec_label_pc_10ce0
  %v1_10ce4 = load i32, i32* %sl.global-to-local, align 4
  %v2_10ce4 = trunc i32 %v1_10ce4 to i8
  %v3_10ce4 = load i32, i32* @r4, align 4
  %v4_10ce4 = add i32 %v3_10ce4, -1
  %v5_10ce4 = inttoptr i32 %v4_10ce4 to i8*
  store i8 %v2_10ce4, i8* %v5_10ce4, align 1
  br label %dec_label_pc_105f4

dec_label_pc_10cec:                               ; preds = %dec_label_pc_1073c, %dec_label_pc_10718, %dec_label_pc_10758
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10cf0 = call i32 @function_110fc(i32 31)
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_10d00 = call i32 @function_11018(i32 31, i32* nonnull %stack_var_-56)
  %v3_10d04 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10d00, i32* %r2.global-to-local, align 4
  %v1_10d0c = add i32 %v3_10d04, -1
  store i32 %v1_10d0c, i32* %r3.global-to-local, align 4
  %v0_10d10 = load i32, i32* @sb, align 4
  store i32 %v0_10d10, i32* %r0.global-to-local, align 4
  %v0_10d14 = load i32, i32* @r5, align 4
  %v1_10d14 = add i32 %v0_10d14, 24
  %v2_10d14 = inttoptr i32 %v1_10d14 to i32*
  %v3_10d14 = load i32, i32* %v2_10d14, align 4
  store i32 %v3_10d14, i32* %r1.global-to-local, align 4
  %v4_10d18 = call i32 @function_11aa0(i32 %v0_10d10, i32 %v3_10d14, i32 %v3_10d00, i32 %v1_10d0c)
  store i32 %v4_10d18, i32* %r0.global-to-local, align 4
  %v2_10d1c = icmp eq i32 %v4_10d18, -1
  store i1 %v2_10d1c, i1* %cpsr_c.global-to-local, align 1
  %v7_10d1c = icmp eq i32 %v4_10d18, -1
  store i1 %v7_10d1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d1c, label %dec_label_pc_10fcc.loopexit, label %dec_label_pc_10d2c

dec_label_pc_10d2c:                               ; preds = %dec_label_pc_10cec
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10d30 = call i32 @function_11044(i32 31)
  store i32 %v1_10d30, i32* %r0.global-to-local, align 4
  %v0_10d34 = load i32, i32* @r7, align 4
  %v3_10d34 = icmp eq i32 %v0_10d34, -1
  store i1 %v3_10d34, i1* %cpsr_c.global-to-local, align 1
  %v8_10d34 = icmp eq i32 %v0_10d34, -1
  store i1 %v8_10d34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10d34, label %dec_label_pc_104cc.loopexit, label %dec_label_pc_1076c

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10a80
  store i32 %v1_10abc, i32* %r0.global-to-local, align 4
  %v0_10d48 = load i32, i32* @r5, align 4
  %v1_10d48 = add i32 %v0_10d48, 4
  %v2_10d48 = inttoptr i32 %v1_10d48 to i32*
  %v3_10d48 = load i32, i32* %v2_10d48, align 4
  store i32 %v3_10d48, i32* %r0.global-to-local, align 4
  %v1_10d4c = call i32 @function_122e0(i32 %v3_10d48)
  store i32 %v1_10d4c, i32* %r0.global-to-local, align 4
  %v0_10d50 = load i32, i32* @r5, align 4
  %v1_10d50 = add i32 %v0_10d50, 284
  %v2_10d50 = inttoptr i32 %v1_10d50 to i8*
  %v3_10d50 = load i8, i8* %v2_10d50, align 1
  %v4_10d50 = zext i8 %v3_10d50 to i32
  %v1_10d54 = add nuw nsw i32 %v4_10d50, 1
  %v1_10d58 = urem i32 %v1_10d54, 256
  store i32 %v1_10d58, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10d60 = icmp ugt i32 %v1_10d58, 9
  store i1 %v2_10d60, i1* %cpsr_c.global-to-local, align 1
  %v7_10d60 = icmp eq i32 %v1_10d58, 10
  store i1 %v7_10d60, i1* %cpsr_z.global-to-local, align 1
  %v2_10d64 = add i32 %v0_10d50, 4
  %v3_10d64 = inttoptr i32 %v2_10d64 to i32*
  store i32 -1, i32* %v3_10d64, align 4
  %v0_10d68 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d68 = trunc i32 %v0_10d68 to i8
  %v2_10d68 = load i32, i32* @r5, align 4
  %v3_10d68 = add i32 %v2_10d68, 284
  %v4_10d68 = inttoptr i32 %v3_10d68 to i8*
  store i8 %v1_10d68, i8* %v4_10d68, align 1
  %v0_10d6c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10d70 = load i32, i32* @r5, align 4
  br i1 %v0_10d6c, label %dec_label_pc_10d70, label %dec_label_pc_10e34

dec_label_pc_10d70:                               ; preds = %dec_label_pc_10d40
  %v1_10d70 = add i32 %v0_10d70, 24
  %v2_10d70 = inttoptr i32 %v1_10d70 to i32*
  %v3_10d70 = load i32, i32* %v2_10d70, align 4
  store i32 %v3_10d70, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_10d80 = add i32 %v0_10d70, 284
  %v4_10d80 = inttoptr i32 %v3_10d80 to i8*
  store i8 0, i8* %v4_10d80, align 1
  %v0_10d84 = load i32, i32* %r1.global-to-local, align 4
  %v1_10d84 = load i32, i32* @r5, align 4
  %v2_10d84 = add i32 %v1_10d84, 12
  %v3_10d84 = inttoptr i32 %v2_10d84 to i32*
  store i32 %v0_10d84, i32* %v3_10d84, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10d8c:                               ; preds = %dec_label_pc_104e8
  br i1 %v2_10510, label %dec_label_pc_11008, label %dec_label_pc_10d90

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d8c
  %v3_10d90 = icmp eq i32 %v5_1050c, -1
  store i1 %v3_10d90, i1* %cpsr_c.global-to-local, align 1
  %v8_10d90 = icmp eq i32 %v5_1050c, -1
  store i1 %v8_10d90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10d90, label %dec_label_pc_10d98, label %dec_label_pc_10538

dec_label_pc_10d98:                               ; preds = %dec_label_pc_10d90
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_10d9c = load i32, i32* %v2_104f0, align 4
  store i32 %v2_10d9c, i32* %r3.global-to-local, align 4
  %v2_10da0 = icmp ugt i32 %v2_10d9c, 10
  store i1 %v2_10da0, i1* %cpsr_c.global-to-local, align 1
  %v7_10da0 = icmp eq i32 %v2_10d9c, 11
  store i1 %v7_10da0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10da0, label %dec_label_pc_102f8, label %dec_label_pc_10da8

dec_label_pc_10da8:                               ; preds = %dec_label_pc_10d98, %dec_label_pc_11008
  %v0_10da8 = load i32, i32* @r5, align 4
  %v1_10da8 = add i32 %v0_10da8, 4
  %v2_10da8 = inttoptr i32 %v1_10da8 to i32*
  %v3_10da8 = load i32, i32* %v2_10da8, align 4
  store i32 %v3_10da8, i32* %r0.global-to-local, align 4
  %v1_10dac = call i32 @function_122e0(i32 %v3_10da8)
  store i32 %v1_10dac, i32* %r0.global-to-local, align 4
  %v0_10db0 = load i32, i32* @r5, align 4
  %v1_10db0 = add i32 %v0_10db0, 284
  %v2_10db0 = inttoptr i32 %v1_10db0 to i8*
  %v3_10db0 = load i8, i8* %v2_10db0, align 1
  %v4_10db0 = zext i8 %v3_10db0 to i32
  %v1_10db4 = add nuw nsw i32 %v4_10db0, 1
  %v1_10db8 = urem i32 %v1_10db4, 256
  store i32 %v1_10db8, i32* %r3.global-to-local, align 4
  %v2_10dbc = icmp ugt i32 %v1_10db8, 8
  store i1 %v2_10dbc, i1* %cpsr_c.global-to-local, align 1
  %v7_10dbc = icmp eq i32 %v1_10db8, 9
  store i1 %v7_10dbc, i1* %cpsr_z.global-to-local, align 1
  %v1_10dc0 = trunc i32 %v1_10db4 to i8
  store i8 %v1_10dc0, i8* %v2_10db0, align 1
  store i32 -1, i32* @r4, align 4
  %v0_10dc8 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10dc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_10dc8 = xor i1 %v1_10dc8, true
  %v3_10dc8 = and i1 %v0_10dc8, %v2_10dc8
  br i1 %v3_10dc8, label %bb359, label %.thread229

.thread229:                                       ; preds = %dec_label_pc_10da8
  %v1_10dcc225230 = load i32, i32* @r5, align 4
  %v2_10dcc226231 = add i32 %v1_10dcc225230, 4
  %v3_10dcc227232 = inttoptr i32 %v2_10dcc226231 to i32*
  store i32 -1, i32* %v3_10dcc227232, align 4
  br label %bb360

bb359:                                            ; preds = %dec_label_pc_10da8
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10dcc221 = load i32, i32* @r5, align 4
  %v2_10dcc222 = add i32 %v1_10dcc221, 4
  %v3_10dcc223 = inttoptr i32 %v2_10dcc222 to i32*
  store i32 -1, i32* %v3_10dcc223, align 4
  %v4_10dd0 = load i32, i32* %r3.global-to-local, align 4
  %v5_10dd0 = load i32, i32* @r5, align 4
  %v6_10dd0 = add i32 %v5_10dd0, 12
  %v7_10dd0 = inttoptr i32 %v6_10dd0 to i32*
  store i32 %v4_10dd0, i32* %v7_10dd0, align 4
  %v4_10dd4 = load i32, i32* %r3.global-to-local, align 4
  %v5_10dd4 = trunc i32 %v4_10dd4 to i8
  %v6_10dd4 = load i32, i32* @r5, align 4
  %v7_10dd4 = add i32 %v6_10dd4, 284
  %v8_10dd4 = inttoptr i32 %v7_10dd4 to i8*
  store i8 %v5_10dd4, i8* %v8_10dd4, align 1
  %v0_10dd8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10dd8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb360

bb360:                                            ; preds = %.thread229, %bb359
  %v1_10dd8 = phi i1 [ %v1_10dd8.pre, %bb359 ], [ %v1_10dc8, %.thread229 ]
  %v0_10dd8 = phi i1 [ %v0_10dd8.pre, %bb359 ], [ %v0_10dc8, %.thread229 ]
  %v2_10dd8 = xor i1 %v1_10dd8, true
  %v3_10dd8 = and i1 %v0_10dd8, %v2_10dd8
  br i1 %v3_10dd8, label %dec_label_pc_102f8, label %dec_label_pc_10ddc

dec_label_pc_10ddc:                               ; preds = %bb360
  %v0_10ddc = load i32, i32* @r5, align 4
  store i32 %v0_10ddc, i32* @r0, align 4
  %v0_10de0 = call i32 @function_e944()
  store i32 %v0_10de0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_102f8

dec_label_pc_10de8:                               ; preds = %dec_label_pc_10cc4
  store i32 %v2_10598, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10df4 = add i32 %v0_10cb0, 4
  %v2_10df4 = inttoptr i32 %v1_10df4 to i32*
  %v3_10df4 = load i32, i32* %v2_10df4, align 4
  store i32 %v3_10df4, i32* %r0.global-to-local, align 4
  %v5_10df8 = call i32 @function_12b6c(i32 %v3_10df4, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10df8, i32* %r0.global-to-local, align 4
  store i32 %v2_10c9c, i32* %r1.global-to-local, align 4
  %v0_10e00 = load i32, i32* @r5, align 4
  %v1_10e00 = add i32 %v0_10e00, 4
  %v2_10e00 = inttoptr i32 %v1_10e00 to i32*
  %v3_10e00 = load i32, i32* %v2_10e00, align 4
  store i32 %v3_10e00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10630

dec_label_pc_10e10:                               ; preds = %dec_label_pc_104d8
  store i32 %.pre, i32* @r0, align 4
  %v1_10e18 = add i32 %v0_10e10, 92
  store i32 %v1_10e18, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_10e20 = call i32 @function_12910(i32 %.pre, i32 %v1_10e18, i32 192)
  store i32 %v3_10e20, i32* %r0.global-to-local, align 4
  %v0_10e24 = load i32, i32* @r5, align 4
  %v1_10e24 = add i32 %v0_10e24, 24
  %v2_10e24 = inttoptr i32 %v1_10e24 to i32*
  %v3_10e24 = load i32, i32* %v2_10e24, align 4
  store i32 %v3_10e24, i32* %r3.global-to-local, align 4
  %v1_10e28 = add i32 %v3_10e24, -64
  store i32 %v1_10e28, i32* %ip.global-to-local, align 4
  store i32 %v1_10e28, i32* %v2_10e24, align 4
  br label %dec_label_pc_104e8

dec_label_pc_10e34:                               ; preds = %dec_label_pc_10d40
  store i32 %v0_10d70, i32* @r0, align 4
  %v0_10e38 = call i32 @function_e944()
  store i32 %v0_10e38, i32* %r0.global-to-local, align 4
  %v0_10e3c = load i32, i32* @r5, align 4
  %v1_10e3c = add i32 %v0_10e3c, 24
  %v2_10e3c = inttoptr i32 %v1_10e3c to i32*
  %v3_10e3c = load i32, i32* %v2_10e3c, align 4
  store i32 %v3_10e3c, i32* %ip.global-to-local, align 4
  %v0_10e40 = load i32, i32* @r4, align 4
  store i32 %v0_10e40, i32* @r7, align 4
  br label %dec_label_pc_10bb4

dec_label_pc_10e48:                               ; preds = %dec_label_pc_10354
  %v0_10e48 = load i32, i32* @r5, align 4
  %v1_10e48 = add i32 %v0_10e48, 4
  %v2_10e48 = inttoptr i32 %v1_10e48 to i32*
  %v3_10e48 = load i32, i32* %v2_10e48, align 4
  store i32 %v3_10e48, i32* %r0.global-to-local, align 4
  %v1_10e4c = call i32 @function_122e0(i32 %v3_10e48)
  store i32 %v1_10e4c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_10e54 = load i32, i32* @r6, align 4
  %v1_10e54 = load i32, i32* @r5, align 4
  %v2_10e54 = add i32 %v1_10e54, 12
  %v3_10e54 = inttoptr i32 %v2_10e54 to i32*
  store i32 %v0_10e54, i32* %v3_10e54, align 4
  %v0_10e58 = load i32, i32* %r4.global-to-local, align 4
  %v1_10e58 = load i32, i32* @r5, align 4
  %v2_10e58 = add i32 %v1_10e58, 4
  %v3_10e58 = inttoptr i32 %v2_10e58 to i32*
  store i32 %v0_10e58, i32* %v3_10e58, align 4
  %v0_10e5c = load i32, i32* @r6, align 4
  %v1_10e5c = trunc i32 %v0_10e5c to i8
  %v2_10e5c = load i32, i32* @r5, align 4
  %v3_10e5c = add i32 %v2_10e5c, 284
  %v4_10e5c = inttoptr i32 %v3_10e5c to i8*
  store i8 %v1_10e5c, i8* %v4_10e5c, align 1
  br label %dec_label_pc_102f8

dec_label_pc_10e94:                               ; preds = %dec_label_pc_10b70
  store i32 2, i32* @r5, align 4
  %v1_10e98 = add i32 %v2_10b8c, 4
  %v2_10e98 = inttoptr i32 %v1_10e98 to i32*
  %v3_10e98 = load i32, i32* %v2_10e98, align 4
  store i32 %v3_10e98, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_10ea4 = call i32 @function_e240()
  store i32 %v0_10ea4, i32* %r0.global-to-local, align 4
  %v0_10ea8 = load i32, i32* @r8, align 4
  %v1_10ea8 = inttoptr i32 %v0_10ea8 to i8*
  %v2_10ea8 = load i8, i8* %v1_10ea8, align 1
  %v3_10ea8 = zext i8 %v2_10ea8 to i32
  store i32 %v3_10ea8, i32* %r1.global-to-local, align 4
  %v2_10eac = call i32 @function_12068(i32 %v0_10ea4, i32 %v3_10ea8)
  store i32 %v2_10eac, i32* %r0.global-to-local, align 4
  %v0_10eb0 = load i32, i32* @r4, align 4
  %v2_10eb0 = and i32 %v2_10eac, 1073741824
  %v3_10eb0 = icmp ne i32 %v2_10eb0, 0
  store i1 %v3_10eb0, i1* %cpsr_c.global-to-local, align 1
  %v4_10eb0 = mul i32 %v2_10eac, 4
  %v5_10eb0 = add i32 %v0_10eb0, %v4_10eb0
  %v6_10eb0 = inttoptr i32 %v5_10eb0 to i32*
  %v7_10eb0 = load i32, i32* %v6_10eb0, align 4
  store i32 %v7_10eb0, i32* %r3.global-to-local, align 4
  %v0_10eb4 = load i32, i32* @sl, align 4
  store i32 %v0_10eb4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_10ec0 = inttoptr i32 %v0_10eb4 to i32*
  %v3_10ec0 = call i32 @function_11018(i32 19, i32* %v2_10ec0)
  %v4_10ec0 = inttoptr i32 %v3_10ec0 to i8*
  store i32 %v3_10ec0, i32* %r0.global-to-local, align 4
  %v2_10ec4 = add i32 %v3_10ec0, 1
  %v3_10ec4 = inttoptr i32 %v2_10ec4 to i8*
  %v4_10ec4 = load i8, i8* %v3_10ec4, align 1
  %v5_10ec4 = zext i8 %v4_10ec4 to i32
  store i32 %v5_10ec4, i32* %r2.global-to-local, align 4
  %v3_10ec8 = load i8, i8* %v4_10ec0, align 1
  %v4_10ec8 = zext i8 %v3_10ec8 to i32
  %v4_10ecc = mul nuw nsw i32 %v5_10ec4, 256
  %v5_10ecc = or i32 %v4_10ec8, %v4_10ecc
  store i32 %v5_10ecc, i32* %r3.global-to-local, align 4
  %v1_10ed0 = and i32 %v4_10ec8, 128
  %v2_10ed0 = icmp ne i32 %v1_10ed0, 0
  store i1 %v2_10ed0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_10ec4, i32* %r1.global-to-local, align 4
  %v0_10ed4 = load i32, i32* @r8, align 4
  store i32 %v0_10ed4, i32* %r0.global-to-local, align 4
  %v6_10ee0 = call i32 @function_e3c0(i32 %v0_10ed4)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_10ee8 = call i32 @function_11044(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_10ef0 = call i32 @function_11044(i32 19)
  %v0_10ef8 = load i32, i32* @r6, align 4
  store i32 %v0_10ef8, i32* %r0.global-to-local, align 4
  store i32 %v2_10efc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10f04 = call i32 @function_12a58(i32 %v0_10ef8, %sockaddr* %v3_10f04, i32 16)
  store i32 %v4_10f04, i32* %r0.global-to-local, align 4
  %v3_10f08 = icmp eq i32 %v4_10f04, -1
  store i1 %v3_10f08, i1* %cpsr_c.global-to-local, align 1
  %v8_10f08 = icmp eq i32 %v4_10f04, -1
  store i1 %v8_10f08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10f08, label %dec_label_pc_10f10, label %dec_label_pc_10f20

dec_label_pc_10f10:                               ; preds = %dec_label_pc_10e94
  %v0_10f10 = load i32, i32* @r6, align 4
  store i32 %v0_10f10, i32* %r0.global-to-local, align 4
  %v1_10f14 = call i32 @function_122e0(i32 %v0_10f10)
  %v0_10f18 = load i32, i32* @sl, align 4
  store i32 %v0_10f18, i32* %r0.global-to-local, align 4
  %v1_10f1c = call i32 @function_13684(i32 %v0_10f18)
  store i32 %v1_10f1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10f20

dec_label_pc_10f20:                               ; preds = %dec_label_pc_10e94, %dec_label_pc_10f10
  store i32 %v2_10440, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f30 = load i32, i32* @r6, align 4
  store i32 %v0_10f30, i32* %r0.global-to-local, align 4
  %v0_10f34 = load i32, i32* @sl, align 4
  store i32 %v0_10f34, i32* %stack_var_-56, align 4
  %v6_10f38 = call i32 @function_12b6c(i32 %v0_10f30, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_108cc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f4c = load i32, i32* @r6, align 4
  store i32 %v0_10f4c, i32* %r0.global-to-local, align 4
  %v5_10f50 = call i32 @function_12b6c(i32 %v0_10f4c, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_10f58 = load i32, i32* @r5, align 4
  store i32 %v0_10f58, i32* %r2.global-to-local, align 4
  store i32 %v2_10f5c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f64 = load i32, i32* @r6, align 4
  store i32 %v0_10f64, i32* %r0.global-to-local, align 4
  %v5_10f68 = call i32 @function_12b6c(i32 %v0_10f64, i32* nonnull %stack_var_-38, i32 %v0_10f58, i32 16384)
  %v0_10f6c = load i32, i32* @fp, align 4
  %v1_10f6c = add i32 %v0_10f6c, 12
  store i32 %v1_10f6c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f78 = load i32, i32* @r6, align 4
  store i32 %v0_10f78, i32* %r0.global-to-local, align 4
  %v4_10f7c = inttoptr i32 %v1_10f6c to i32*
  %v5_10f7c = call i32 @function_12b6c(i32 %v0_10f78, i32* %v4_10f7c, i32 1, i32 16384)
  store i32 %v5_10f7c, i32* %r0.global-to-local, align 4
  %v0_10f80 = load i32, i32* @fp, align 4
  %v1_10f80 = inttoptr i32 %v0_10f80 to i32*
  %v2_10f80 = load i32, i32* %v1_10f80, align 4
  store i32 %v2_10f80, i32* %r1.global-to-local, align 4
  %v1_10f84 = add i32 %v0_10f80, 12
  %v2_10f84 = inttoptr i32 %v1_10f84 to i8*
  %v3_10f84 = load i8, i8* %v2_10f84, align 1
  %v4_10f84 = zext i8 %v3_10f84 to i32
  store i32 %v4_10f84, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f8c = load i32, i32* @r6, align 4
  store i32 %v0_10f8c, i32* %r0.global-to-local, align 4
  %v4_10f90 = inttoptr i32 %v2_10f80 to i32*
  %v5_10f90 = call i32 @function_12b6c(i32 %v0_10f8c, i32* %v4_10f90, i32 %v4_10f84, i32 16384)
  %v0_10f94 = load i32, i32* @fp, align 4
  %v1_10f94 = add i32 %v0_10f94, 13
  store i32 %v1_10f94, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10fa0 = load i32, i32* @r6, align 4
  store i32 %v0_10fa0, i32* %r0.global-to-local, align 4
  %v4_10fa4 = inttoptr i32 %v1_10f94 to i32*
  %v5_10fa4 = call i32 @function_12b6c(i32 %v0_10fa0, i32* %v4_10fa4, i32 1, i32 16384)
  %v0_10fa8 = load i32, i32* @r6, align 4
  store i32 %v0_10fa8, i32* %r0.global-to-local, align 4
  %v0_10fac = load i32, i32* @fp, align 4
  %v1_10fac = add i32 %v0_10fac, 13
  %v2_10fac = inttoptr i32 %v1_10fac to i8*
  %v3_10fac = load i8, i8* %v2_10fac, align 1
  %v4_10fac = zext i8 %v3_10fac to i32
  store i32 %v4_10fac, i32* %r2.global-to-local, align 4
  %v1_10fb0 = add i32 %v0_10fac, 4
  %v2_10fb0 = inttoptr i32 %v1_10fb0 to i32*
  %v3_10fb0 = load i32, i32* %v2_10fb0, align 4
  store i32 %v3_10fb0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10fb8 = inttoptr i32 %v3_10fb0 to i32*
  %v5_10fb8 = call i32 @function_12b6c(i32 %v0_10fa8, i32* %v4_10fb8, i32 %v4_10fac, i32 16384)
  %v0_10fbc = load i32, i32* @r6, align 4
  store i32 %v0_10fbc, i32* %r0.global-to-local, align 4
  %v1_10fc0 = call i32 @function_122e0(i32 %v0_10fbc)
  store i32 %v1_10fc0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10fc4

dec_label_pc_10fc4:                               ; preds = %dec_label_pc_10b54, %dec_label_pc_10f20
  %v0_10fc4 = load i32, i32* @sl, align 4
  store i32 %v0_10fc4, i32* %r0.global-to-local, align 4
  %v1_10fc8 = call i32 @function_13684(i32 %v0_10fc4)
  store i32 %v1_10fc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10fcc

dec_label_pc_10fcc.loopexit:                      ; preds = %dec_label_pc_10cec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10fcc

dec_label_pc_10fcc:                               ; preds = %dec_label_pc_10fcc.loopexit, %dec_label_pc_10fc4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10fd0 = call i32 @function_11044(i32 31)
  store i32 %v1_10fd0, i32* %r0.global-to-local, align 4
  %v0_10fd4 = load i32, i32* @r5, align 4
  %v1_10fd4 = add i32 %v0_10fd4, 12
  %v2_10fd4 = inttoptr i32 %v1_10fd4 to i32*
  %v3_10fd4 = load i32, i32* %v2_10fd4, align 4
  br label %dec_label_pc_104d0.backedge

dec_label_pc_10fdc:                               ; preds = %dec_label_pc_10250, %dec_label_pc_10234
  %v0_10fdc = load i32, i32* @r7, align 4
  %v1_10fdc = load i32, i32* @r4, align 4
  %v2_10fdc = add i32 %v1_10fdc, 12
  %v3_10fdc = inttoptr i32 %v2_10fdc to i32*
  store i32 %v0_10fdc, i32* %v3_10fdc, align 4
  %v0_10fe0 = load i32, i32* @r7, align 4
  %v1_10fe0 = trunc i32 %v0_10fe0 to i8
  %v2_10fe0 = load i32, i32* @r4, align 4
  %v3_10fe0 = add i32 %v2_10fe0, 284
  %v4_10fe0 = inttoptr i32 %v3_10fe0 to i8*
  store i8 %v1_10fe0, i8* %v4_10fe0, align 1
  br label %bb323

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_103dc, %dec_label_pc_10394
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10418

dec_label_pc_10ff0:                               ; preds = %dec_label_pc_1048c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10ff4 = call i32 @function_11044(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_10ffc = call i32 @function_11044(i32 33)
  store i32 %v1_10ffc, i32* %r0.global-to-local, align 4
  %v0_11000 = load i32, i32* @r5, align 4
  %v1_11000 = add i32 %v0_11000, 12
  %v2_11000 = inttoptr i32 %v1_11000 to i32*
  %v3_11000 = load i32, i32* %v2_11000, align 4
  br label %dec_label_pc_104d0.backedge

dec_label_pc_104d0.backedge.thread:               ; preds = %dec_label_pc_107b0, %dec_label_pc_10864, %dec_label_pc_10918, %dec_label_pc_109cc, %dec_label_pc_10bd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_104d8

dec_label_pc_104d0.backedge.thread466:            ; preds = %dec_label_pc_107dc, %dec_label_pc_10890, %dec_label_pc_109f8, %dec_label_pc_10944, %dec_label_pc_10c04, %dec_label_pc_10c20, %dec_label_pc_107f8, %dec_label_pc_108ac, %dec_label_pc_10960, %dec_label_pc_10a14
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_104d8

dec_label_pc_104d0.backedge:                      ; preds = %dec_label_pc_10ff0, %dec_label_pc_10fcc
  %storemerge469 = phi i32 [ %v3_10fd4, %dec_label_pc_10fcc ], [ %v3_11000, %dec_label_pc_10ff0 ]
  %v0_104d0.be = phi i32 [ %v3_10fd4, %dec_label_pc_10fcc ], [ %v3_11000, %dec_label_pc_10ff0 ]
  %v0_104d8140 = phi i32 [ %v0_10fd4, %dec_label_pc_10fcc ], [ %v0_11000, %dec_label_pc_10ff0 ]
  store i32 %storemerge469, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104d0 = icmp eq i32 %v0_104d0.be, 0
  store i1 %v2_104d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104d0, label %dec_label_pc_102f8, label %dec_label_pc_104d8

dec_label_pc_11008:                               ; preds = %dec_label_pc_10d8c
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_104f0, align 4
  br label %dec_label_pc_10da8

; uselistorder directives
  uselistorder i32 %v3_11000, { 1, 0 }
  uselistorder i32 %v3_10fd4, { 1, 0 }
  uselistorder i32 %v4_10ec8, { 1, 0 }
  uselistorder i32 %v5_10ec4, { 1, 0, 2 }
  uselistorder i32 %v2_10eac, { 1, 0, 2 }
  uselistorder i32 %v3_10e00, { 1, 0 }
  uselistorder i1 %v1_10dc8, { 1, 0 }
  uselistorder i32 %v1_10db8, { 2, 1, 0 }
  uselistorder i32 %v1_10db4, { 1, 0 }
  uselistorder i32 %v0_10d70, { 1, 0, 2 }
  uselistorder i32 %v1_10d58, { 2, 1, 0 }
  uselistorder i32 %v0_10d34, { 0, 2, 1 }
  uselistorder i1 %v7_10d1c, { 1, 0 }
  uselistorder i32 %v0_10cb0, { 1, 2, 0 }
  uselistorder i1 %v7_10c24, { 1, 0 }
  uselistorder i32 %v1_10c20, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10c18, { 1, 0 }
  uselistorder i8 %v3_10c10, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10c20, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10bfc, { 1, 0 }
  uselistorder i1 %v7_10bf4, { 1, 0 }
  uselistorder i1 %v7_10bec, { 1, 0 }
  uselistorder i32 %v0_10bc8, { 1, 2, 0 }
  uselistorder i32 %v2_10bb4, { 1, 0 }
  uselistorder i32 %v1_10bb4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10bb4, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_10b64, { 1, 0 }
  uselistorder i32 %v3_10b60, { 1, 0, 2, 3 }
  uselistorder i1 %v2_10b4c, { 1, 0 }
  uselistorder i32 %.364, { 1, 0 }
  uselistorder i1 %v7_10b34, { 1, 0 }
  uselistorder i32 %v0_10b30, { 2, 1, 0, 3 }
  uselistorder i32 %v4_10b10, { 1, 0, 2 }
  uselistorder i32 %v4_10b0c, { 1, 0, 2 }
  uselistorder i1 %v7_10afc, { 1, 0 }
  uselistorder i32 %v0_10afc, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_10a18, { 1, 0 }
  uselistorder i32 %v1_10a14, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10a0c, { 1, 0 }
  uselistorder i8 %v3_10a04, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10a14, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_109f0, { 1, 0 }
  uselistorder i1 %v7_109e8, { 1, 0 }
  uselistorder i1 %v7_109e0, { 1, 0 }
  uselistorder i1 %v7_10964, { 1, 0 }
  uselistorder i32 %v1_10960, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10958, { 1, 0 }
  uselistorder i8 %v3_10950, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10960, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1093c, { 1, 0 }
  uselistorder i1 %v7_10934, { 1, 0 }
  uselistorder i1 %v7_1092c, { 1, 0 }
  uselistorder i1 %v7_108b0, { 1, 0 }
  uselistorder i32 %v1_108ac, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_108a4, { 1, 0 }
  uselistorder i8 %v3_1089c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_108ac, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10888, { 1, 0 }
  uselistorder i1 %v7_10880, { 1, 0 }
  uselistorder i1 %v7_10878, { 1, 0 }
  uselistorder i1 %v7_107fc, { 1, 0 }
  uselistorder i32 %v1_107f8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_107f0, { 1, 0 }
  uselistorder i8 %v3_107e8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_107f8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_107d4, { 1, 0 }
  uselistorder i1 %v7_107cc, { 1, 0 }
  uselistorder i1 %v7_107c4, { 1, 0 }
  uselistorder i32 %v0_1076c, { 2, 1, 0 }
  uselistorder i1 %v7_1075c, { 1, 0 }
  uselistorder i1 %v8_10750, { 1, 0 }
  uselistorder i8 %v3_10748, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10758, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10734, { 1, 0 }
  uselistorder i1 %v7_1072c, { 1, 0 }
  uselistorder i32 %v0_106d4, { 2, 1, 0 }
  uselistorder i1 %v7_106bc, { 1, 0 }
  uselistorder i1 %v8_106b0, { 1, 0 }
  uselistorder i8 %v3_106a8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_106b8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10694, { 1, 0 }
  uselistorder i1 %v7_1068c, { 1, 0 }
  uselistorder i1 %v7_10684, { 1, 0 }
  uselistorder i32 %v0_10660.pre, { 0, 2, 1 }
  uselistorder i32 %v1_10648, { 1, 0 }
  uselistorder i32 %v1_10644, { 1, 0 }
  uselistorder i32 %v1_1063c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10638, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10638, { 0, 2, 1 }
  uselistorder i1 %v7_105e0, { 1, 0 }
  uselistorder i1 %v2_105cc, { 1, 0, 2 }
  uselistorder i1 %v2_105b4, { 1, 0, 2 }
  uselistorder i32 %v1_105d4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_105a8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_105d0, { 1, 0 }
  uselistorder i32 %v2_105d8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_10550, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_1052c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10528, { 1, 0 }
  uselistorder i32 %v5_1050c, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_104f8, { 1, 0, 2 }
  uselistorder i32 %v3_104f4, { 1, 0, 2 }
  uselistorder i32 %v0_10e10, { 1, 0, 2 }
  uselistorder i32 %v0_104c4, { 1, 0, 2 }
  uselistorder i1 %v7_104a4, { 1, 0 }
  uselistorder i1 %v7_1047c, { 1, 0 }
  uselistorder i32 %v0_103e4, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_103c4, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_103b8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_10344, { 2, 1, 0 }
  uselistorder i32 %v3_10340, { 1, 0 }
  uselistorder i1 %v7_10328, { 1, 0 }
  uselistorder i32 %v3_10324, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_10318, { 1, 0 }
  uselistorder i32 %v1_102fc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_102e8, { 2, 1, 0 }
  uselistorder i32 %v3_102e4, { 1, 0 }
  uselistorder i32 %v0_102e8, { 1, 0 }
  uselistorder i32 %v2_108cc, { 1, 2, 3, 0 }
  uselistorder i32 %v2_10440, { 4, 8, 5, 3, 2, 6, 7, 9, 10, 1, 0 }
  uselistorder i32 %v2_10ca4, { 1, 2, 0 }
  uselistorder i32 %v2_10598, { 0, 2, 1 }
  uselistorder i32 %v1_1027c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1027c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10258, { 2, 1, 0 }
  uselistorder i32 %v1_10254, { 1, 0 }
  uselistorder i32 %v0_10224, { 0, 2, 1 }
  uselistorder i32 %v1_1021c, { 1, 0 }
  uselistorder i1 %v7_101e8, { 0, 3, 1, 2 }
  uselistorder i1 %v2_101e8, { 1, 2, 0 }
  uselistorder i32 %v2_101e0, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_101d8, { 1, 0 }
  uselistorder i32 %v1_101bc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_101b0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_101b0, { 0, 2, 1 }
  uselistorder i32 %v1_101a0, { 1, 0 }
  uselistorder i32 %v3_10204, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge236, { 1, 0, 2 }
  uselistorder i32 %v2_10210, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_100f0, { 1, 0 }
  uselistorder i32 %v1_100dc, { 1, 0 }
  uselistorder i32 %v1_100c4, { 1, 2, 0 }
  uselistorder i32 %v0_100d0, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10094, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_10088, { 2, 1, 0 }
  uselistorder i32 %v1_10064, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_1003c, { 1, 0 }
  uselistorder i32 %v4_ffdc, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_ff44, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_fe64, { 1, 0 }
  uselistorder i32 %v1_fe60, { 2, 0, 1 }
  uselistorder i32 %v4_fe3c, { 1, 0 }
  uselistorder i1 %v2_fdac, { 1, 0 }
  uselistorder i1 %v3_fd90, { 1, 0, 2 }
  uselistorder i1 %v2_fd7c, { 1, 0 }
  uselistorder i1 %v2_fd58, { 1, 0 }
  uselistorder i32 %v1_fd08, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fcf4, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fcf0, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_fce0, { 1, 0 }
  uselistorder i32 %v0_fcd0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fcc0, { 1, 0 }
  uselistorder i32 %v0_ffd0, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_f054, { 1, 0 }
  uselistorder i32 %v0_f048, { 2, 0, 1, 3 }
  uselistorder i32 %v4_eff4, { 1, 0 }
  uselistorder i32 %v0_efec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ef94, { 3, 2, 0, 1 }
  uselistorder i1 %v7_ef38, { 1, 0 }
  uselistorder i32 %v3_ef30, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_ef18, { 0, 2, 1 }
  uselistorder i32 %v0_ef00, { 2, 1, 0 }
  uselistorder i32 %v0_eedc, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge243, { 1, 0 }
  uselistorder i32 %v0_ebc4, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 0, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 9, 10, 3, 11, 6, 12, 7, 13, 8, 14, 5, 15, 4, 16, 17, 1, 2, 18, 19 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32 %tmp253, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 6, 5, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 4, 3 }
  uselistorder i32* %r3.global-to-local, { 58, 142, 143, 0, 1, 2, 3, 4, 5, 6, 59, 40, 60, 61, 62, 63, 64, 7, 8, 30, 41, 42, 43, 44, 138, 139, 140, 141, 9, 137, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 53, 54, 55, 37, 38, 39, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 56, 57, 71, 72, 74, 73, 75, 76, 77, 78, 79, 81, 83, 82, 80, 84, 85, 86, 87, 93, 88, 89, 90, 91, 94, 144, 145, 95, 146, 147, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 136, 114, 115, 116, 117, 118, 119, 121, 120, 123, 122, 92, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135 }
  uselistorder i32* %r2.global-to-local, { 12, 297, 298, 0, 1, 2, 3, 4, 5, 6, 31, 41, 27, 32, 294, 295, 296, 7, 8, 9, 10, 11, 13, 14, 15, 17, 16, 18, 20, 19, 21, 23, 22, 24, 26, 25, 28, 30, 29, 36, 38, 37, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 39, 40, 49, 50, 51, 52, 53, 55, 57, 56, 293, 54, 58, 59, 60, 61, 66, 62, 63, 64, 65, 68, 70, 69, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 299, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292 }
  uselistorder i32* %r1.global-to-local, { 44, 45, 278, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 36, 37, 11, 12, 32, 33, 275, 276, 277, 279, 280, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 38, 39, 0, 46, 47, 48, 40, 41, 42, 43, 49, 50, 51, 53, 54, 52, 55, 56, 58, 57, 274, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 281, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273 }
  uselistorder i32* %r0.global-to-local, { 111, 110, 112, 84, 83, 392, 391, 394, 393, 395, 396, 0, 2, 1, 3, 4, 5, 6, 7, 8, 10, 9, 11, 13, 12, 15, 14, 16, 17, 129, 128, 19, 130, 104, 106, 105, 131, 133, 132, 18, 21, 20, 22, 86, 85, 88, 87, 89, 90, 107, 382, 381, 383, 385, 384, 387, 386, 388, 389, 390, 113, 24, 23, 25, 27, 26, 28, 29, 31, 30, 32, 34, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 45, 44, 47, 46, 49, 48, 50, 51, 52, 53, 55, 54, 57, 56, 59, 58, 60, 61, 62, 63, 65, 64, 67, 66, 69, 68, 70, 71, 72, 73, 75, 74, 77, 76, 79, 78, 80, 81, 82, 92, 91, 94, 93, 98, 95, 96, 97, 115, 114, 117, 116, 100, 99, 101, 102, 103, 109, 108, 137, 134, 135, 119, 118, 120, 122, 121, 124, 123, 125, 126, 127, 379, 136, 139, 138, 140, 141, 143, 142, 144, 150, 145, 146, 149, 147, 148, 151, 153, 154, 152, 157, 155, 156, 159, 158, 160, 162, 161, 380, 163, 164, 165, 167, 166, 168, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 366, 369, 368, 370, 374, 373, 371, 372, 375, 376, 377, 378 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 0, 17, 1, 12, 46, 47, 45, 2, 3, 5, 4, 7, 6, 9, 8, 10, 11, 15, 16, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 26, 27, 29, 48, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_z.global-to-local, { 103, 204, 203, 89, 48, 0, 94, 93, 95, 96, 97, 1, 2, 47, 185, 49, 66, 67, 68, 69, 70, 194, 195, 200, 201, 196, 197, 198, 199, 202, 85, 3, 4, 5, 184, 7, 8, 9, 10, 11, 12, 17, 18, 13, 14, 15, 16, 19, 20, 21, 26, 27, 22, 23, 24, 25, 28, 29, 30, 35, 36, 31, 32, 33, 34, 37, 38, 39, 44, 45, 40, 41, 42, 43, 46, 50, 51, 55, 56, 52, 53, 54, 57, 87, 58, 63, 64, 59, 60, 61, 62, 65, 86, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 186, 98, 99, 100, 101, 102, 187, 88, 6, 90, 91, 92, 104, 106, 105, 107, 108, 110, 112, 111, 188, 109, 113, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 191, 192, 189, 190, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 183, 159, 160, 161, 162, 163, 182, 164, 165, 166, 181, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 180 }
  uselistorder i1* %cpsr_c.global-to-local, { 101, 203, 202, 87, 49, 0, 1, 2, 92, 91, 93, 94, 95, 3, 48, 184, 50, 67, 68, 69, 70, 193, 194, 199, 200, 195, 196, 197, 198, 201, 83, 4, 5, 6, 183, 7, 8, 9, 10, 11, 12, 13, 18, 19, 14, 15, 16, 17, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 51, 52, 56, 57, 53, 54, 55, 58, 85, 59, 64, 65, 60, 61, 62, 63, 66, 84, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 185, 96, 97, 98, 99, 100, 186, 86, 182, 88, 89, 90, 102, 104, 103, 105, 106, 108, 110, 109, 187, 107, 111, 112, 113, 114, 115, 120, 116, 117, 118, 119, 190, 191, 188, 121, 189, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 181, 153, 154, 155, 156, 157, 180, 158, 159, 160, 179, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 192, 178 }
  uselistorder i32 (i32)* @function_e3c0, { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i32* @fp, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 33, 34 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_15138.501 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_15138.501, { 1, 0 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_12b6c, { 26, 27, 0, 1, 2, 3, 4, 15, 24, 25, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 16, 23, 19, 20, 21, 22, 28, 29 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32)* @function_11044, { 32, 31, 37, 45, 44, 36, 3, 43, 42, 41, 40, 39, 38, 35, 34, 33, 30, 29, 0, 28, 27, 26, 46, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11aa0, { 2, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_11018, { 0, 8, 44, 1, 2, 3, 4, 5, 6, 7, 9, 10, 48, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47 }
  uselistorder i32 (i32)* @function_110fc, { 33, 4, 41, 40, 39, 38, 37, 36, 35, 34, 32, 31, 0, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1d8b4.127 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1d8b5.128, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1d8b4.127 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_12500, { 2, 0, 1 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_e944, { 3, 2, 1, 0 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_12b98, { 0, 6, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 16384, { 31, 47, 32, 48, 33, 49, 34, 50, 35, 51, 36, 52, 13, 53, 12, 64, 0, 45, 1, 46, 2, 54, 3, 55, 4, 56, 5, 57, 6, 58, 7, 59, 8, 60, 9, 61, 29, 62, 30, 63, 27, 66, 28, 67, 26, 65, 37, 68, 10, 69, 11, 70, 14, 78, 38, 79, 16, 71, 41, 72, 40, 73, 42, 74, 43, 75, 15, 76, 39, 77, 17, 80, 18, 81, 19, 82, 83, 44, 84, 20, 85, 21, 86, 23, 87, 22, 88, 24, 89, 25, 90 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c6e4, { 8, 2, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32)* @function_12134, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c688, { 10, 4, 9, 8, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder i8* @global_var_1d898.484, { 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1512c.482 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15024.438 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14fec.426 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14fb0.410 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14f90.402 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_14f88.400 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14f50.384 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_14f40.380 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14f38.378 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_14f1c.370 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_14e94.342 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14e8c.340 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14e84.336 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_14e60.328 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14e50.324 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_14e24.314 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_14e14.310 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14e0c.308 to i32), { 1, 4, 2, 0, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_14dd8.294 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14db4.284 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_14d54.262 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14bc0.252 to i32), { 0, 5, 1, 2, 3, 6, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_14cd8.234 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14c84.216 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_14c64.210 to i32), { 1, 7, 0, 8, 2, 9, 3, 4, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint ([11 x i8]* @global_var_14c58.208 to i32), { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_14c50.206 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14c48.204 to i32), { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_14c3c.200 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_14c2c.198 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_14c1c.194 to i32), { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_14d58.190 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14bfc.186 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14bf4.184 to i32), { 1, 7, 2, 8, 0, 9, 3, 4, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_14bec.182 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_14be0.180 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15130.178 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_14bd8.176 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 5, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_14bd0.174 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_14bc8.172 to i32), { 0, 6, 3, 7, 1, 8, 2, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_14bb4.168 to i32), { 0, 7, 1, 8, 2, 9, 3, 4, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_14ba4.164 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_150ac.158 to i32), { 7, 46, 8, 47, 9, 48, 10, 49, 0, 50, 11, 51, 12, 52, 13, 53, 1, 54, 2, 55, 3, 56, 14, 57, 4, 58, 15, 59, 5, 60, 16, 61, 17, 62, 18, 63, 6, 64, 19, 65, 20, 66, 21, 67, 22, 68, 23, 69, 24, 70, 25, 71, 26, 72, 27, 73, 28, 74, 29, 75, 30, 76, 31, 77, 32, 78, 33, 79, 34, 80, 35, 81, 36, 82, 37, 83, 38, 84, 39, 85, 40, 86, 41, 42, 43, 87, 44, 88, 45, 89 }
  uselistorder i32 (i32, i32, i32)* @function_ea18, { 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_15064.156 to i32), { 3, 16, 4, 17, 5, 18, 0, 19, 1, 20, 6, 21, 2, 22, 7, 23, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14f08.154 to i32), { 6, 57, 7, 58, 8, 59, 9, 60, 10, 61, 0, 62, 11, 63, 1, 64, 12, 65, 2, 66, 13, 67, 14, 68, 15, 69, 3, 70, 16, 71, 17, 72, 18, 73, 19, 74, 20, 75, 21, 76, 4, 77, 22, 78, 23, 79, 24, 80, 25, 81, 26, 82, 27, 83, 28, 84, 29, 85, 30, 86, 31, 87, 32, 88, 33, 89, 34, 90, 35, 91, 36, 92, 37, 93, 38, 94, 39, 95, 40, 96, 41, 97, 42, 98, 43, 99, 44, 100, 45, 46, 47, 101, 48, 102, 49, 103, 50, 104, 51, 105, 52, 106, 5, 107, 53, 108, 54, 109, 55, 110, 56, 111 }
  uselistorder i8* @global_var_1d8a9.150, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1d89c.141 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1d8a8.142, { 1, 0 }
  uselistorder i8** @global_var_1d888.137, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1d888.137 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 27, 1, 14, 0, 2, 28, 3, 4, 29, 21, 22, 5, 30, 6, 31, 15, 16, 32, 33, 7, 8, 9, 34, 35, 17, 10, 36, 23, 18, 37, 38, 39, 40, 11, 24, 25, 26, 41, 12, 42, 43, 19, 44, 45, 13, 46, 47, 20, 48 }
  uselistorder i32 ()* @function_e240, { 67, 66, 65, 64, 63, 62, 61, 57, 60, 59, 58, 56, 20, 19, 18, 17, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 15, 14, 13, 12, 11, 10, 16, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_12bcc, { 0, 8, 1, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder i32 2048, { 5, 4, 2, 7, 8, 0, 1, 6, 9, 3, 10, 11 }
  uselistorder i32* @global_var_1d920.135, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1d91c.133, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1d8b8.121, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_125b0, { 0, 1, 2, 3, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 21, 23, 24 }
  uselistorder i32 (i32)* @function_e298, { 1, 0 }
  uselistorder i32* @global_var_1d900.47, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_11c94, { 2, 1, 0 }
  uselistorder i32* @global_var_1d924.119, { 0, 2, 1 }
  uselistorder i32 ()* @function_1230c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 17, 18, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 75, 76 }
  uselistorder i32* @sb, { 2, 3, 6, 0, 1, 4, 5, 10, 9, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 51, 52, 54, 55, 58, 61, 59, 60, 62, 63, 56, 57 }
  uselistorder label %dec_label_pc_104d0.backedge.thread466, { 5, 4, 9, 2, 8, 3, 7, 1, 6, 0 }
  uselistorder label %dec_label_pc_104d0.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10fc4, { 1, 0 }
  uselistorder label %dec_label_pc_10f20, { 1, 0 }
  uselistorder label %bb360, { 1, 0 }
  uselistorder label %dec_label_pc_10da8, { 1, 0 }
  uselistorder label %dec_label_pc_10cec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c20, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10c0c, { 1, 0 }
  uselistorder label %dec_label_pc_10bb4, { 1, 2, 10, 11, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder label %dec_label_pc_10b98, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10a14, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10a00, { 1, 0 }
  uselistorder label %dec_label_pc_10960, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1094c, { 1, 0 }
  uselistorder label %dec_label_pc_108ac, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10898, { 1, 0 }
  uselistorder label %dec_label_pc_107f8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_107e4, { 1, 0 }
  uselistorder label %dec_label_pc_10758, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10744, { 1, 0 }
  uselistorder label %dec_label_pc_106d4, { 1, 0 }
  uselistorder label %dec_label_pc_106b8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_106a4, { 1, 0 }
  uselistorder label %dec_label_pc_10660, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder label %dec_label_pc_10650, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb334, { 2, 1, 0 }
  uselistorder label %bb331, { 2, 1, 0 }
  uselistorder label %dec_label_pc_105b0, { 1, 0 }
  uselistorder label %dec_label_pc_105b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10538, { 1, 0 }
  uselistorder label %bb328, { 1, 0 }
  uselistorder label %dec_label_pc_104e8, { 1, 0 }
  uselistorder label %dec_label_pc_104d8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_104d8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_104cc.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1042c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10418, { 1, 0 }
  uselistorder label %dec_label_pc_102f8, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_102d4, { 1, 0 }
  uselistorder label %bb325, { 1, 0 }
  uselistorder label %bb323, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_1013c.dec_label_pc_1013c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10120.dec_label_pc_10120_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10118, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_10110, { 1, 0 }
  uselistorder label %dec_label_pc_100c4, { 1, 0 }
  uselistorder label %dec_label_pc_ff64, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_ff58, { 1, 0 }
  uselistorder label %.thread47, { 2, 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_fdbc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fd98, { 1, 0 }
  uselistorder label %dec_label_pc_fd8c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fd68, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fd44, { 1, 0 }
  uselistorder label %bb293, { 1, 0 }
  uselistorder label %dec_label_pc_fcf0, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_ef94, { 1, 0 }
}

define i32 @function_11018(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11018:
  store i32 ptrtoint (i32* @global_var_1d92c.507 to i32), i32* @ip, align 4
  %v3_1101c = mul i32 %arg1, 8
  %v2_11020 = add i32 %v3_1101c, ptrtoint (i32* @global_var_1d92c.507 to i32)
  %v2_11024 = icmp eq i32* %arg2, null
  br i1 %v2_11024, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11018
  %v3_1103011 = inttoptr i32 %v2_11020 to i32*
  %v4_1103012 = load i32, i32* %v3_1103011, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_11018
  %v2_11028 = add i32 %v3_1101c, add (i32 ptrtoint (i32* @global_var_1d92c.507 to i32), i32 5)
  %v3_11028 = inttoptr i32 %v2_11028 to i8*
  %v4_11028 = load i8, i8* %v3_11028, align 1
  %v5_11028 = zext i8 %v4_11028 to i32
  store i32 %v5_11028, i32* @r2, align 4
  %v2_1102c = add i32 %v3_1101c, add (i32 ptrtoint (i32* @global_var_1d92c.507 to i32), i32 4)
  %v3_1102c = inttoptr i32 %v2_1102c to i8*
  %v4_1102c = load i8, i8* %v3_1102c, align 4
  %v5_1102c = zext i8 %v4_1102c to i32
  %v3_11030 = inttoptr i32 %v2_11020 to i32*
  %v4_11030 = load i32, i32* %v3_11030, align 4
  %v5_11034 = mul nuw nsw i32 %v5_11028, 256
  %v6_11034 = or i32 %v5_1102c, %v5_11034
  store i32 %v6_11034, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_11030714 = phi i32 [ %v4_1103012, %.thread ], [ %v4_11030, %bb ]
  ret i32 %v4_11030714

; uselistorder directives
  uselistorder i32 %v2_11020, { 1, 0 }
  uselistorder i32 %v3_1101c, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_11044(i32 %arg1) local_unnamed_addr {
dec_label_pc_11044:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11044 = mul i32 %arg1, 8
  %v3_11048 = load i32, i32* @r4, align 4
  store i32 %v3_11048, i32* %stack_var_-20, align 4
  %v3_11058 = and i32 %v3_11044, 2040
  %v2_1105c = add i32 %v3_11058, ptrtoint (i32* @global_var_1d92c.507 to i32)
  store i32 %v2_1105c, i32* @lr, align 4
  %v1_11064 = add i32 %v3_11058, add (i32 ptrtoint (i32* @global_var_1d92c.507 to i32), i32 4)
  store i32 %v1_11064, i32* %r7.global-to-local, align 4
  %v2_11068 = load i32, i32* @global_var_1d6fc.510, align 4
  store i32 %v2_11068, i32* @r2, align 4
  %v2_1106c = inttoptr i32 %v1_11064 to i8*
  %v3_1106c = load i8, i8* %v2_1106c, align 4
  %v4_1106c = zext i8 %v3_1106c to i32
  %v1_11070 = add i32 %v3_11058, add (i32 ptrtoint (i32* @global_var_1d92c.507 to i32), i32 5)
  %v2_11070 = inttoptr i32 %v1_11070 to i8*
  %v3_11070 = load i8, i8* %v2_11070, align 1
  %v4_11070 = zext i8 %v3_11070 to i32
  %v3_11074 = udiv i32 %v2_11068, 256
  %v4_11078 = mul nuw nsw i32 %v4_11070, 256
  %v5_11078 = or i32 %v4_11078, %v4_1106c
  %v7_11078 = icmp eq i32 %v5_11078, 0
  store i1 %v7_11078, i1* @cpsr_z, align 1
  %v3_1107c = udiv i32 %v2_11068, 65536
  %v1_11080 = urem i32 %v3_11074, 256
  store i32 %v1_11080, i32* %r6.global-to-local, align 4
  %v1_11084 = urem i32 %v3_1107c, 256
  store i32 %v1_11084, i32* %r5.global-to-local, align 4
  %v3_11088 = udiv i32 %v2_11068, 16777216
  store i32 %v3_11088, i32* %r4.global-to-local, align 4
  %v1_1108c = urem i32 %v2_11068, 256
  br i1 %v7_11078, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11044
  store i32 %v3_11048, i32* @r4, align 4
  ret i32 %v1_1108c

bb8:                                              ; preds = %dec_label_pc_11044
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_11098

dec_label_pc_11098:                               ; preds = %dec_label_pc_11098, %bb8
  %v2_110a4 = phi i32 [ %v1_110e0, %dec_label_pc_11098 ], [ 0, %bb8 ]
  %v0_11098 = phi i32 [ %v0_110d8, %dec_label_pc_11098 ], [ %v2_1105c, %bb8 ]
  %v1_11098 = inttoptr i32 %v0_11098 to i32*
  %v2_11098 = load i32, i32* %v1_11098, align 4
  %v2_1109c = add i32 %v2_11098, %v2_110a4
  %v3_1109c = inttoptr i32 %v2_1109c to i8*
  %v4_1109c = load i8, i8* %v3_1109c, align 1
  %v6_1109c = zext i8 %v4_1109c to i32
  %v2_110a0 = xor i32 %v6_1109c, %v1_1108c
  %v1_110a4 = trunc i32 %v2_110a0 to i8
  store i8 %v1_110a4, i8* %v3_1109c, align 1
  %v0_110a8 = load i32, i32* @lr, align 4
  %v1_110a8 = inttoptr i32 %v0_110a8 to i32*
  %v2_110a8 = load i32, i32* %v1_110a8, align 4
  %v0_110ac = load i32, i32* @ip, align 4
  %v2_110ac = add i32 %v0_110ac, %v2_110a8
  %v3_110ac = inttoptr i32 %v2_110ac to i8*
  %v4_110ac = load i8, i8* %v3_110ac, align 1
  %v6_110ac = zext i8 %v4_110ac to i32
  %v0_110b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_110b0 = xor i32 %v0_110b0, %v6_110ac
  %v1_110b4 = trunc i32 %v2_110b0 to i8
  store i8 %v1_110b4, i8* %v3_110ac, align 1
  %v0_110b8 = load i32, i32* @lr, align 4
  %v1_110b8 = inttoptr i32 %v0_110b8 to i32*
  %v2_110b8 = load i32, i32* %v1_110b8, align 4
  %v0_110bc = load i32, i32* @ip, align 4
  %v2_110bc = add i32 %v0_110bc, %v2_110b8
  %v3_110bc = inttoptr i32 %v2_110bc to i8*
  %v4_110bc = load i8, i8* %v3_110bc, align 1
  %v6_110bc = zext i8 %v4_110bc to i32
  %v0_110c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_110c0 = xor i32 %v0_110c0, %v6_110bc
  %v1_110c4 = trunc i32 %v2_110c0 to i8
  store i8 %v1_110c4, i8* %v3_110bc, align 1
  %v0_110c8 = load i32, i32* @lr, align 4
  %v1_110c8 = inttoptr i32 %v0_110c8 to i32*
  %v2_110c8 = load i32, i32* %v1_110c8, align 4
  %v0_110cc = load i32, i32* @ip, align 4
  %v2_110cc = add i32 %v0_110cc, %v2_110c8
  %v3_110cc = inttoptr i32 %v2_110cc to i8*
  %v4_110cc = load i8, i8* %v3_110cc, align 1
  %v6_110cc = zext i8 %v4_110cc to i32
  %v0_110d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_110d0 = xor i32 %v0_110d0, %v6_110cc
  %v1_110d4 = trunc i32 %v2_110d0 to i8
  store i8 %v1_110d4, i8* %v3_110cc, align 1
  %v0_110d8 = load i32, i32* @lr, align 4
  %v1_110d8 = add i32 %v0_110d8, 4
  %v2_110d8 = inttoptr i32 %v1_110d8 to i8*
  %v3_110d8 = load i8, i8* %v2_110d8, align 1
  %v4_110d8 = zext i8 %v3_110d8 to i32
  %v0_110dc = load i32, i32* %r7.global-to-local, align 4
  %v1_110dc = add i32 %v0_110dc, 1
  %v2_110dc = inttoptr i32 %v1_110dc to i8*
  %v3_110dc = load i8, i8* %v2_110dc, align 1
  %v4_110dc = zext i8 %v3_110dc to i32
  %v0_110e0 = load i32, i32* @ip, align 4
  %v1_110e0 = add i32 %v0_110e0, 1
  store i32 %v1_110e0, i32* @ip, align 4
  %v4_110e4 = mul nuw nsw i32 %v4_110dc, 256
  %v5_110e4 = or i32 %v4_110e4, %v4_110d8
  store i32 %v5_110e4, i32* @r2, align 4
  %v9_110e8 = icmp eq i32 %v5_110e4, %v1_110e0
  store i1 %v9_110e8, i1* @cpsr_z, align 1
  %v8_110ec = icmp sgt i32 %v5_110e4, %v1_110e0
  br i1 %v8_110ec, label %dec_label_pc_11098, label %dec_label_pc_110f0

dec_label_pc_110f0:                               ; preds = %dec_label_pc_11098
  %v2_110f0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_110f0, i32* @r4, align 4
  ret i32 %v1_1108c

; uselistorder directives
  uselistorder i32 %v1_110e0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_110d8, { 1, 0 }
  uselistorder i32 %v1_1108c, { 1, 2, 0 }
  uselistorder i32 %v2_11068, { 3, 0, 1, 2, 4 }
}

define i32 @function_110fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_110fc:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_110fc = mul i32 %arg1, 8
  %v3_11100 = load i32, i32* @r4, align 4
  store i32 %v3_11100, i32* %stack_var_-20, align 4
  %v3_11110 = and i32 %v3_110fc, 2040
  %v2_11114 = add i32 %v3_11110, ptrtoint (i32* @global_var_1d92c.507 to i32)
  store i32 %v2_11114, i32* @lr, align 4
  %v1_1111c = add i32 %v3_11110, add (i32 ptrtoint (i32* @global_var_1d92c.507 to i32), i32 4)
  store i32 %v1_1111c, i32* %r7.global-to-local, align 4
  %v2_11120 = load i32, i32* @global_var_1d6fc.510, align 4
  store i32 %v2_11120, i32* @r2, align 4
  %v2_11124 = inttoptr i32 %v1_1111c to i8*
  %v3_11124 = load i8, i8* %v2_11124, align 4
  %v4_11124 = zext i8 %v3_11124 to i32
  %v1_11128 = add i32 %v3_11110, add (i32 ptrtoint (i32* @global_var_1d92c.507 to i32), i32 5)
  %v2_11128 = inttoptr i32 %v1_11128 to i8*
  %v3_11128 = load i8, i8* %v2_11128, align 1
  %v4_11128 = zext i8 %v3_11128 to i32
  %v3_1112c = udiv i32 %v2_11120, 256
  %v4_11130 = mul nuw nsw i32 %v4_11128, 256
  %v5_11130 = or i32 %v4_11130, %v4_11124
  %v7_11130 = icmp eq i32 %v5_11130, 0
  %v3_11134 = udiv i32 %v2_11120, 65536
  %v1_11138 = urem i32 %v3_1112c, 256
  store i32 %v1_11138, i32* %r6.global-to-local, align 4
  %v1_1113c = urem i32 %v3_11134, 256
  store i32 %v1_1113c, i32* %r5.global-to-local, align 4
  %v3_11140 = udiv i32 %v2_11120, 16777216
  store i32 %v3_11140, i32* %r4.global-to-local, align 4
  %v1_11144 = urem i32 %v2_11120, 256
  br i1 %v7_11130, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_110fc
  store i32 %v3_11100, i32* @r4, align 4
  ret i32 %v1_11144

bb8:                                              ; preds = %dec_label_pc_110fc
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11150

dec_label_pc_11150:                               ; preds = %dec_label_pc_11150, %bb8
  %v2_1115c = phi i32 [ %v1_11198, %dec_label_pc_11150 ], [ 0, %bb8 ]
  %v0_11150 = phi i32 [ %v0_11190, %dec_label_pc_11150 ], [ %v2_11114, %bb8 ]
  %v1_11150 = inttoptr i32 %v0_11150 to i32*
  %v2_11150 = load i32, i32* %v1_11150, align 4
  %v2_11154 = add i32 %v2_11150, %v2_1115c
  %v3_11154 = inttoptr i32 %v2_11154 to i8*
  %v4_11154 = load i8, i8* %v3_11154, align 1
  %v6_11154 = zext i8 %v4_11154 to i32
  %v2_11158 = xor i32 %v6_11154, %v1_11144
  %v1_1115c = trunc i32 %v2_11158 to i8
  store i8 %v1_1115c, i8* %v3_11154, align 1
  %v0_11160 = load i32, i32* @lr, align 4
  %v1_11160 = inttoptr i32 %v0_11160 to i32*
  %v2_11160 = load i32, i32* %v1_11160, align 4
  %v0_11164 = load i32, i32* %ip.global-to-local, align 4
  %v2_11164 = add i32 %v0_11164, %v2_11160
  %v3_11164 = inttoptr i32 %v2_11164 to i8*
  %v4_11164 = load i8, i8* %v3_11164, align 1
  %v6_11164 = zext i8 %v4_11164 to i32
  %v0_11168 = load i32, i32* %r6.global-to-local, align 4
  %v2_11168 = xor i32 %v0_11168, %v6_11164
  %v1_1116c = trunc i32 %v2_11168 to i8
  store i8 %v1_1116c, i8* %v3_11164, align 1
  %v0_11170 = load i32, i32* @lr, align 4
  %v1_11170 = inttoptr i32 %v0_11170 to i32*
  %v2_11170 = load i32, i32* %v1_11170, align 4
  %v0_11174 = load i32, i32* %ip.global-to-local, align 4
  %v2_11174 = add i32 %v0_11174, %v2_11170
  %v3_11174 = inttoptr i32 %v2_11174 to i8*
  %v4_11174 = load i8, i8* %v3_11174, align 1
  %v6_11174 = zext i8 %v4_11174 to i32
  %v0_11178 = load i32, i32* %r5.global-to-local, align 4
  %v2_11178 = xor i32 %v0_11178, %v6_11174
  %v1_1117c = trunc i32 %v2_11178 to i8
  store i8 %v1_1117c, i8* %v3_11174, align 1
  %v0_11180 = load i32, i32* @lr, align 4
  %v1_11180 = inttoptr i32 %v0_11180 to i32*
  %v2_11180 = load i32, i32* %v1_11180, align 4
  %v0_11184 = load i32, i32* %ip.global-to-local, align 4
  %v2_11184 = add i32 %v0_11184, %v2_11180
  %v3_11184 = inttoptr i32 %v2_11184 to i8*
  %v4_11184 = load i8, i8* %v3_11184, align 1
  %v6_11184 = zext i8 %v4_11184 to i32
  %v0_11188 = load i32, i32* %r4.global-to-local, align 4
  %v2_11188 = xor i32 %v0_11188, %v6_11184
  %v1_1118c = trunc i32 %v2_11188 to i8
  store i8 %v1_1118c, i8* %v3_11184, align 1
  %v0_11190 = load i32, i32* @lr, align 4
  %v1_11190 = add i32 %v0_11190, 4
  %v2_11190 = inttoptr i32 %v1_11190 to i8*
  %v3_11190 = load i8, i8* %v2_11190, align 1
  %v4_11190 = zext i8 %v3_11190 to i32
  %v0_11194 = load i32, i32* %r7.global-to-local, align 4
  %v1_11194 = add i32 %v0_11194, 1
  %v2_11194 = inttoptr i32 %v1_11194 to i8*
  %v3_11194 = load i8, i8* %v2_11194, align 1
  %v4_11194 = zext i8 %v3_11194 to i32
  %v0_11198 = load i32, i32* %ip.global-to-local, align 4
  %v1_11198 = add i32 %v0_11198, 1
  store i32 %v1_11198, i32* %ip.global-to-local, align 4
  %v4_1119c = mul nuw nsw i32 %v4_11194, 256
  %v5_1119c = or i32 %v4_1119c, %v4_11190
  store i32 %v5_1119c, i32* @r2, align 4
  %v8_111a4 = icmp sgt i32 %v5_1119c, %v1_11198
  br i1 %v8_111a4, label %dec_label_pc_11150, label %dec_label_pc_111a8

dec_label_pc_111a8:                               ; preds = %dec_label_pc_11150
  %v2_111a8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_111a8, i32* @r4, align 4
  ret i32 %v1_11144

; uselistorder directives
  uselistorder i32 %v1_11198, { 1, 2, 0 }
  uselistorder i32 %v0_11190, { 1, 0 }
  uselistorder i32 %v1_11144, { 1, 2, 0 }
  uselistorder i32 %v2_11120, { 3, 0, 1, 2, 4 }
}

define i32 @function_111b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_111b4:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_111b4 = load i32, i32* @r4, align 4
  store i32 %v3_111b4, i32* %stack_var_-36, align 4
  %v6_111b4 = load i32, i32* @r5, align 4
  %v9_111b4 = load i32, i32* @r6, align 4
  %v12_111b4 = load i32, i32* @r7, align 4
  %v1_111bc = call i32 @function_12d94(i32 9)
  store i32 ptrtoint ([10 x i8]* @global_var_15148.514 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d92c.507 to i32), i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_111bc, i32* @r6, align 4
  %v4_111d8 = call i32 @function_11a58(i32 %v1_111bc, i32 ptrtoint ([10 x i8]* @global_var_15148.514 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1d948.516 to i8*), align 4
  %v0_111e8 = load i32, i32* @r6, align 4
  store i32 %v0_111e8, i32* @global_var_1d944.517, align 4
  %v0_111ec = load i32, i32* @r5, align 4
  %v1_111ec = trunc i32 %v0_111ec to i8
  store i8 %v1_111ec, i8* bitcast (i32* @global_var_1d949.518 to i8*), align 4
  %v1_111f0 = call i32 @function_12d94(i32 2)
  store i32 2, i32* @r6, align 4
  store i32 %v1_111f0, i32* @r7, align 4
  %v4_11204 = call i32 @function_11a58(i32 %v1_111f0, i32 ptrtoint ([3 x i8]* @global_var_15154.520 to i32), i32 2)
  %v0_1120c = load i32, i32* @r7, align 4
  store i32 %v0_1120c, i32* @global_var_1d94c.521, align 4
  %v0_11210 = load i32, i32* @r6, align 4
  %v1_11210 = trunc i32 %v0_11210 to i8
  store i8 %v1_11210, i8* bitcast (i32* @global_var_1d950.522 to i8*), align 4
  %v0_11214 = load i32, i32* @r5, align 4
  %v1_11214 = trunc i32 %v0_11214 to i8
  store i8 %v1_11214, i8* bitcast (i32* @global_var_1d951.523 to i8*), align 4
  %v1_11218 = call i32 @function_12d94(i32 9)
  %v0_1121c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11218, i32* @r7, align 4
  %v4_11228 = call i32 @function_11a58(i32 %v1_11218, i32 %v0_1121c, i32 9)
  %v0_11230 = load i32, i32* @r6, align 4
  store i8 9, i8* bitcast (i32* @global_var_1d9c0.524 to i8*), align 4
  %v0_11238 = load i32, i32* @r7, align 4
  store i32 %v0_11238, i32* @global_var_1d9bc.525, align 4
  %v0_1123c = load i32, i32* @r5, align 4
  %v1_1123c = trunc i32 %v0_1123c to i8
  store i8 %v1_1123c, i8* bitcast (i32* @global_var_1d9c1.526 to i8*), align 4
  %v1_11240 = call i32 @function_12d94(i32 %v0_11230)
  %v0_11244 = load i32, i32* @r6, align 4
  store i32 %v1_11240, i32* @r7, align 4
  %v3_11250 = call i32 @function_11a58(i32 %v1_11240, i32 ptrtoint (i32* @global_var_15158.528 to i32), i32 %v0_11244)
  %v0_11258 = load i32, i32* @r7, align 4
  store i32 %v0_11258, i32* @global_var_1d9c4.529, align 4
  %v0_1125c = load i32, i32* @r6, align 4
  %v1_1125c = trunc i32 %v0_1125c to i8
  store i8 %v1_1125c, i8* bitcast (i32* @global_var_1d9c8.530 to i8*), align 4
  %v0_11260 = load i32, i32* @r5, align 4
  %v1_11260 = trunc i32 %v0_11260 to i8
  store i8 %v1_11260, i8* bitcast (i32* @global_var_1d9c9.531 to i8*), align 4
  %v1_11264 = call i32 @function_12d94(i32 15)
  store i32 15, i32* @r7, align 4
  store i32 %v1_11264, i32* @r6, align 4
  %v3_11278 = call i32 @function_11a58(i32 %v1_11264, i32 ptrtoint (i32* @global_var_1515c.533 to i32), i32 15)
  %v0_11280 = load i32, i32* @r6, align 4
  store i32 %v0_11280, i32* @global_var_1d93c.534, align 4
  %v0_11284 = load i32, i32* @r7, align 4
  %v1_11284 = trunc i32 %v0_11284 to i8
  store i8 %v1_11284, i8* bitcast (i32* @global_var_1d940.535 to i8*), align 4
  %v0_11288 = load i32, i32* @r5, align 4
  %v1_11288 = trunc i32 %v0_11288 to i8
  store i8 %v1_11288, i8* bitcast (i32* @global_var_1d941.536 to i8*), align 4
  %v1_1128c = call i32 @function_12d94(i32 7)
  store i32 7, i32* %r8.global-to-local, align 4
  store i32 %v1_1128c, i32* @r6, align 4
  %v4_112a0 = call i32 @function_11a58(i32 %v1_1128c, i32 ptrtoint ([8 x i8]* @global_var_1516c.538 to i32), i32 7)
  %v0_112a8 = load i32, i32* @r6, align 4
  store i32 %v0_112a8, i32* @global_var_1d95c.539, align 4
  store i8 7, i8* bitcast (i32* @global_var_1d960.540 to i8*), align 4
  %v0_112b0 = load i32, i32* @r5, align 4
  %v1_112b0 = trunc i32 %v0_112b0 to i8
  store i8 %v1_112b0, i8* bitcast (i32* @global_var_1d961.541 to i8*), align 4
  %v1_112b4 = call i32 @function_12d94(i32 5)
  store i32 %v1_112b4, i32* @r6, align 4
  %v4_112c4 = call i32 @function_11a58(i32 %v1_112b4, i32 ptrtoint ([6 x i8]* @global_var_15174.543 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1d968.544 to i8*), align 4
  %v0_112d4 = load i32, i32* @r6, align 4
  store i32 %v0_112d4, i32* @global_var_1d964.545, align 4
  %v0_112d8 = load i32, i32* @r5, align 4
  %v1_112d8 = trunc i32 %v0_112d8 to i8
  store i8 %v1_112d8, i8* bitcast (i32* @global_var_1d969.546 to i8*), align 4
  %v1_112dc = call i32 @function_12d94(i32 4)
  store i32 %v1_112dc, i32* @r6, align 4
  %v4_112ec = call i32 @function_11a58(i32 %v1_112dc, i32 ptrtoint ([5 x i8]* @global_var_1517c.548 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1d970.549 to i8*), align 4
  %v0_112fc = load i32, i32* @r6, align 4
  store i32 %v0_112fc, i32* @global_var_1d96c.550, align 4
  %v0_11300 = load i32, i32* @r5, align 4
  %v1_11300 = trunc i32 %v0_11300 to i8
  store i8 %v1_11300, i8* bitcast (i32* @global_var_1d971.551 to i8*), align 4
  %v1_11304 = call i32 @function_12d94(i32 14)
  store i32 14, i32* %sl.global-to-local, align 4
  store i32 %v1_11304, i32* @r6, align 4
  %v4_11318 = call i32 @function_11a58(i32 %v1_11304, i32 ptrtoint ([15 x i8]* @global_var_15184.553 to i32), i32 14)
  %v0_11320 = load i32, i32* @r6, align 4
  store i32 %v0_11320, i32* @global_var_1d974.554, align 4
  store i8 14, i8* bitcast (i32* @global_var_1d978.555 to i8*), align 4
  %v0_11328 = load i32, i32* @r5, align 4
  %v1_11328 = trunc i32 %v0_11328 to i8
  store i8 %v1_11328, i8* bitcast (i32* @global_var_1d979.556 to i8*), align 4
  %v1_1132c = call i32 @function_12d94(i32 6)
  store i32 %v1_1132c, i32* @r6, align 4
  %v4_1133c = call i32 @function_11a58(i32 %v1_1132c, i32 ptrtoint ([7 x i8]* @global_var_15194.558 to i32), i32 6)
  store i8 6, i8* bitcast (i32* @global_var_1d980.559 to i8*), align 4
  %v0_1134c = load i32, i32* @r6, align 4
  store i32 %v0_1134c, i32* @global_var_1d97c.560, align 4
  %v0_11350 = load i32, i32* @r5, align 4
  %v1_11350 = trunc i32 %v0_11350 to i8
  store i8 %v1_11350, i8* bitcast (i32* @global_var_1d981.561 to i8*), align 4
  %v1_11354 = call i32 @function_12d94(i32 8)
  store i32 8, i32* %sb.global-to-local, align 4
  store i32 %v1_11354, i32* @r6, align 4
  %v4_11368 = call i32 @function_11a58(i32 %v1_11354, i32 ptrtoint ([9 x i8]* @global_var_1519c.563 to i32), i32 8)
  %v0_1136c = load i32, i32* %r8.global-to-local, align 4
  %v0_11370 = load i32, i32* @r6, align 4
  store i32 %v0_11370, i32* @global_var_1d984.564, align 4
  store i8 8, i8* bitcast (i32* @global_var_1d988.565 to i8*), align 4
  %v0_11378 = load i32, i32* @r5, align 4
  %v1_11378 = trunc i32 %v0_11378 to i8
  store i8 %v1_11378, i8* bitcast (i32* @global_var_1d989.566 to i8*), align 4
  %v1_1137c = call i32 @function_12d94(i32 %v0_1136c)
  %v0_11384 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_1137c, i32* @r6, align 4
  %v4_1138c = call i32 @function_11a58(i32 %v1_1137c, i32 ptrtoint ([8 x i8]* @global_var_151a8.568 to i32), i32 %v0_11384)
  %v0_11394 = load i32, i32* @r6, align 4
  store i32 %v0_11394, i32* @global_var_1d98c.569, align 4
  %v1_11398 = trunc i32 %v0_11384 to i8
  store i8 %v1_11398, i8* bitcast (i32* @global_var_1d990.570 to i8*), align 4
  %v0_1139c = load i32, i32* @r5, align 4
  %v1_1139c = trunc i32 %v0_1139c to i8
  store i8 %v1_1139c, i8* bitcast (i32* @global_var_1d991.571 to i8*), align 4
  %v1_113a0 = call i32 @function_12d94(i32 16)
  store i32 %v1_113a0, i32* @r6, align 4
  %v4_113b0 = call i32 @function_11a58(i32 %v1_113a0, i32 ptrtoint ([17 x i8]* @global_var_151b0.573 to i32), i32 16)
  %v0_113b8 = load i32, i32* %sl.global-to-local, align 4
  store i8 16, i8* bitcast (i32* @global_var_1d998.574 to i8*), align 4
  %v0_113c0 = load i32, i32* @r6, align 4
  store i32 %v0_113c0, i32* @global_var_1d994.575, align 4
  %v0_113c4 = load i32, i32* @r5, align 4
  %v1_113c4 = trunc i32 %v0_113c4 to i8
  store i8 %v1_113c4, i8* bitcast (i32* @global_var_1d999.576 to i8*), align 4
  %v1_113c8 = call i32 @function_12d94(i32 %v0_113b8)
  %v0_113d0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_113c8, i32* @r6, align 4
  %v4_113d8 = call i32 @function_11a58(i32 %v1_113c8, i32 ptrtoint ([15 x i8]* @global_var_151c4.578 to i32), i32 %v0_113d0)
  %v0_113e0 = load i32, i32* @r6, align 4
  store i32 %v0_113e0, i32* @global_var_1d99c.579, align 4
  %v1_113e4 = trunc i32 %v0_113d0 to i8
  store i8 %v1_113e4, i8* bitcast (i32* @global_var_1d9a0.580 to i8*), align 4
  %v0_113e8 = load i32, i32* @r5, align 4
  %v1_113e8 = trunc i32 %v0_113e8 to i8
  store i8 %v1_113e8, i8* bitcast (i32* @global_var_1d9a1.581 to i8*), align 4
  %v1_113ec = call i32 @function_12d94(i32 9)
  store i32 %v1_113ec, i32* @r6, align 4
  %v4_113fc = call i32 @function_11a58(i32 %v1_113ec, i32 ptrtoint ([10 x i8]* @global_var_151d4.583 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1d9a8.584 to i8*), align 4
  %v0_1140c = load i32, i32* @r6, align 4
  store i32 %v0_1140c, i32* @global_var_1d9a4.585, align 4
  %v0_11410 = load i32, i32* @r5, align 4
  %v1_11410 = trunc i32 %v0_11410 to i8
  store i8 %v1_11410, i8* bitcast (i32* @global_var_1d9a9.586 to i8*), align 4
  %v1_11414 = call i32 @function_12d94(i32 19)
  store i32 19, i32* %fp.global-to-local, align 4
  store i32 %v1_11414, i32* @r6, align 4
  %v4_11428 = call i32 @function_11a58(i32 %v1_11414, i32 ptrtoint ([20 x i8]* @global_var_151e0.588 to i32), i32 19)
  %v0_11430 = load i32, i32* @r6, align 4
  store i32 %v0_11430, i32* @global_var_1d9ac.589, align 4
  store i8 19, i8* bitcast (i32* @global_var_1d9b0.590 to i8*), align 4
  %v0_11438 = load i32, i32* @r5, align 4
  %v1_11438 = trunc i32 %v0_11438 to i8
  store i8 %v1_11438, i8* bitcast (i32* @global_var_1d9b1.591 to i8*), align 4
  %v1_1143c = call i32 @function_12d94(i32 23)
  store i32 %v1_1143c, i32* @r6, align 4
  %v3_1144c = call i32 @function_11a58(i32 %v1_1143c, i32 ptrtoint (i32* @global_var_151f4.593 to i32), i32 23)
  %v0_11454 = load i32, i32* %sb.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1d9b8.594 to i8*), align 4
  %v0_1145c = load i32, i32* @r6, align 4
  store i32 %v0_1145c, i32* @global_var_1d9b4.595, align 4
  %v0_11460 = load i32, i32* @r5, align 4
  %v1_11460 = trunc i32 %v0_11460 to i8
  store i8 %v1_11460, i8* bitcast (i32* @global_var_1d9b9.596 to i8*), align 4
  %v1_11464 = call i32 @function_12d94(i32 %v0_11454)
  %v0_1146c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_11464, i32* @r6, align 4
  %v4_11474 = call i32 @function_11a58(i32 %v1_11464, i32 ptrtoint ([9 x i8]* @global_var_1520c.598 to i32), i32 %v0_1146c)
  %v0_11478 = load i32, i32* %sl.global-to-local, align 4
  %v0_1147c = load i32, i32* @r6, align 4
  store i32 %v0_1147c, i32* @global_var_1d9bc.525, align 4
  %v1_11480 = trunc i32 %v0_1146c to i8
  store i8 %v1_11480, i8* bitcast (i32* @global_var_1d9c0.524 to i8*), align 4
  %v0_11484 = load i32, i32* @r5, align 4
  %v1_11484 = trunc i32 %v0_11484 to i8
  store i8 %v1_11484, i8* bitcast (i32* @global_var_1d9c1.526 to i8*), align 4
  %v1_11488 = call i32 @function_12d94(i32 %v0_11478)
  %v0_11490 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11488, i32* @r6, align 4
  %v4_11498 = call i32 @function_11a58(i32 %v1_11488, i32 ptrtoint ([15 x i8]* @global_var_15218.600 to i32), i32 %v0_11490)
  %v0_1149c = load i32, i32* %fp.global-to-local, align 4
  %v0_114a0 = load i32, i32* @r6, align 4
  store i32 %v0_114a0, i32* @global_var_1d9c4.529, align 4
  %v1_114a4 = trunc i32 %v0_11490 to i8
  store i8 %v1_114a4, i8* bitcast (i32* @global_var_1d9c8.530 to i8*), align 4
  %v0_114a8 = load i32, i32* @r5, align 4
  %v1_114a8 = trunc i32 %v0_114a8 to i8
  store i8 %v1_114a8, i8* bitcast (i32* @global_var_1d9c9.531 to i8*), align 4
  %v1_114ac = call i32 @function_12d94(i32 %v0_1149c)
  %v0_114b4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_114ac, i32* @r6, align 4
  %v4_114bc = call i32 @function_11a58(i32 %v1_114ac, i32 ptrtoint ([20 x i8]* @global_var_15228.602 to i32), i32 %v0_114b4)
  %v0_114c4 = load i32, i32* @r6, align 4
  store i32 %v0_114c4, i32* @global_var_1d9cc.603, align 4
  %v1_114c8 = trunc i32 %v0_114b4 to i8
  store i8 %v1_114c8, i8* bitcast (i32* @global_var_1d9d0.604 to i8*), align 4
  %v0_114cc = load i32, i32* @r5, align 4
  %v1_114cc = trunc i32 %v0_114cc to i8
  store i8 %v1_114cc, i8* bitcast (i32* @global_var_1d9d1.605 to i8*), align 4
  %v1_114d0 = call i32 @function_12d94(i32 23)
  store i32 %v1_114d0, i32* @r6, align 4
  %v3_114e0 = call i32 @function_11a58(i32 %v1_114d0, i32 ptrtoint (i32* @global_var_1523c.607 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1d9d8.608 to i8*), align 4
  %v0_114f0 = load i32, i32* @r6, align 4
  store i32 %v0_114f0, i32* @global_var_1d9d4.609, align 4
  %v0_114f4 = load i32, i32* @r5, align 4
  %v1_114f4 = trunc i32 %v0_114f4 to i8
  store i8 %v1_114f4, i8* bitcast (i32* @global_var_1d9d9.610 to i8*), align 4
  %v1_114f8 = call i32 @function_12d94(i32 24)
  store i32 %v1_114f8, i32* @r6, align 4
  %v3_11508 = call i32 @function_11a58(i32 %v1_114f8, i32 ptrtoint (i32* @global_var_15254.612 to i32), i32 24)
  %v0_11510 = load i32, i32* @r7, align 4
  store i8 24, i8* bitcast (i32* @global_var_1d9e0.613 to i8*), align 4
  %v0_11518 = load i32, i32* @r6, align 4
  store i32 %v0_11518, i32* @global_var_1d9dc.614, align 4
  %v0_1151c = load i32, i32* @r5, align 4
  %v1_1151c = trunc i32 %v0_1151c to i8
  store i8 %v1_1151c, i8* bitcast (i32* @global_var_1d9e1.615 to i8*), align 4
  %v1_11520 = call i32 @function_12d94(i32 %v0_11510)
  %v0_11524 = load i32, i32* @r7, align 4
  store i32 %v1_11520, i32* @r6, align 4
  %v4_11530 = call i32 @function_11a58(i32 %v1_11520, i32 ptrtoint ([15 x i8]* @global_var_1526c.617 to i32), i32 %v0_11524)
  %v0_11538 = load i32, i32* @r6, align 4
  store i32 %v0_11538, i32* @global_var_1d9e4.618, align 4
  %v0_1153c = load i32, i32* @r7, align 4
  %v1_1153c = trunc i32 %v0_1153c to i8
  store i8 %v1_1153c, i8* bitcast (i32* @global_var_1d9e8.619 to i8*), align 4
  %v0_11540 = load i32, i32* @r5, align 4
  %v1_11540 = trunc i32 %v0_11540 to i8
  store i8 %v1_11540, i8* bitcast (i32* @global_var_1d9e9.620 to i8*), align 4
  %v1_11544 = call i32 @function_12d94(i32 13)
  store i32 %v1_11544, i32* @r6, align 4
  %v3_11554 = call i32 @function_11a58(i32 %v1_11544, i32 ptrtoint (i32* @global_var_1527c.622 to i32), i32 13)
  store i8 13, i8* bitcast (i32* @global_var_1d990.570 to i8*), align 4
  %v0_11564 = load i32, i32* @r6, align 4
  store i32 %v0_11564, i32* @global_var_1d98c.569, align 4
  %v0_11568 = load i32, i32* @r5, align 4
  %v1_11568 = trunc i32 %v0_11568 to i8
  store i8 %v1_11568, i8* bitcast (i32* @global_var_1d991.571 to i8*), align 4
  %v1_1156c = call i32 @function_12d94(i32 10)
  %v0_11570 = load i32, i32* @r7, align 4
  %v1_11570 = add i32 %v0_11570, -5
  store i32 %v1_11570, i32* @r7, align 4
  store i32 %v1_1156c, i32* @r6, align 4
  %v4_11580 = call i32 @function_11a58(i32 %v1_1156c, i32 ptrtoint ([11 x i8]* @global_var_1528c.624 to i32), i32 %v1_11570)
  %v0_11584 = load i32, i32* @r7, align 4
  %v0_11588 = load i32, i32* @r6, align 4
  store i32 %v0_11588, i32* @global_var_1d994.575, align 4
  %v1_1158c = trunc i32 %v0_11584 to i8
  store i8 %v1_1158c, i8* bitcast (i32* @global_var_1d998.574 to i8*), align 4
  %v0_11590 = load i32, i32* @r5, align 4
  %v1_11590 = trunc i32 %v0_11590 to i8
  store i8 %v1_11590, i8* bitcast (i32* @global_var_1d999.576 to i8*), align 4
  %v1_11594 = call i32 @function_12d94(i32 %v0_11584)
  %v0_1159c = load i32, i32* @r7, align 4
  store i32 %v1_11594, i32* @r6, align 4
  %v4_115a4 = call i32 @function_11a58(i32 %v1_11594, i32 ptrtoint ([11 x i8]* @global_var_15298.626 to i32), i32 %v0_1159c)
  %v0_115ac = load i32, i32* @r6, align 4
  store i32 %v0_115ac, i32* @global_var_1d99c.579, align 4
  %v0_115b0 = load i32, i32* @r7, align 4
  %v1_115b0 = trunc i32 %v0_115b0 to i8
  store i8 %v1_115b0, i8* bitcast (i32* @global_var_1d9a0.580 to i8*), align 4
  %v0_115b4 = load i32, i32* @r5, align 4
  %v1_115b4 = trunc i32 %v0_115b4 to i8
  store i8 %v1_115b4, i8* bitcast (i32* @global_var_1d9a1.581 to i8*), align 4
  %v1_115b8 = call i32 @function_12d94(i32 33)
  store i32 %v1_115b8, i32* @r6, align 4
  %v3_115c8 = call i32 @function_11a58(i32 %v1_115b8, i32 ptrtoint (i32* @global_var_152a4.628 to i32), i32 33)
  %v0_115d0 = load i32, i32* %sb.global-to-local, align 4
  store i8 33, i8* bitcast (i32* @global_var_1d9a8.584 to i8*), align 4
  %v0_115d8 = load i32, i32* @r6, align 4
  store i32 %v0_115d8, i32* @global_var_1d9a4.585, align 4
  %v0_115dc = load i32, i32* @r5, align 4
  %v1_115dc = trunc i32 %v0_115dc to i8
  store i8 %v1_115dc, i8* bitcast (i32* @global_var_1d9a9.586 to i8*), align 4
  %v1_115e0 = call i32 @function_12d94(i32 %v0_115d0)
  %v0_115e8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_115e0, i32* @r6, align 4
  %v4_115f0 = call i32 @function_11a58(i32 %v1_115e0, i32 ptrtoint ([9 x i8]* @global_var_152c8.630 to i32), i32 %v0_115e8)
  %v0_115f8 = load i32, i32* @r6, align 4
  store i32 %v0_115f8, i32* @global_var_1d9ac.589, align 4
  %v1_115fc = trunc i32 %v0_115e8 to i8
  store i8 %v1_115fc, i8* bitcast (i32* @global_var_1d9b0.590 to i8*), align 4
  %v0_11600 = load i32, i32* @r5, align 4
  %v1_11600 = trunc i32 %v0_11600 to i8
  store i8 %v1_11600, i8* bitcast (i32* @global_var_1d9b1.591 to i8*), align 4
  %v1_11604 = call i32 @function_12d94(i32 11)
  store i32 %v1_11604, i32* @r6, align 4
  %v4_11614 = call i32 @function_11a58(i32 %v1_11604, i32 ptrtoint ([12 x i8]* @global_var_152d4.632 to i32), i32 11)
  %v0_1161c = load i32, i32* %sl.global-to-local, align 4
  store i8 11, i8* bitcast (i32* @global_var_1d9b8.594 to i8*), align 4
  %v0_11624 = load i32, i32* @r6, align 4
  store i32 %v0_11624, i32* @global_var_1d9b4.595, align 4
  %v0_11628 = load i32, i32* @r5, align 4
  %v1_11628 = trunc i32 %v0_11628 to i8
  store i8 %v1_11628, i8* bitcast (i32* @global_var_1d9b9.596 to i8*), align 4
  %v1_1162c = call i32 @function_12d94(i32 %v0_1161c)
  %v0_11634 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_1162c, i32* @r6, align 4
  %v4_1163c = call i32 @function_11a58(i32 %v1_1162c, i32 ptrtoint ([15 x i8]* @global_var_15184.553 to i32), i32 %v0_11634)
  %v0_11640 = load i32, i32* @r7, align 4
  %v0_11644 = load i32, i32* @r6, align 4
  store i32 %v0_11644, i32* @global_var_1d974.554, align 4
  %v1_11648 = trunc i32 %v0_11634 to i8
  store i8 %v1_11648, i8* bitcast (i32* @global_var_1d978.555 to i8*), align 4
  %v0_1164c = load i32, i32* @r5, align 4
  %v1_1164c = trunc i32 %v0_1164c to i8
  store i8 %v1_1164c, i8* bitcast (i32* @global_var_1d979.556 to i8*), align 4
  %v1_11650 = call i32 @function_12d94(i32 %v0_11640)
  %v0_11658 = load i32, i32* @r7, align 4
  store i32 %v1_11650, i32* @r6, align 4
  %v4_11660 = call i32 @function_11a58(i32 %v1_11650, i32 ptrtoint ([11 x i8]* @global_var_152e0.634 to i32), i32 %v0_11658)
  %v0_11668 = load i32, i32* @r6, align 4
  store i32 %v0_11668, i32* @global_var_1d974.554, align 4
  %v0_1166c = load i32, i32* @r7, align 4
  %v1_1166c = trunc i32 %v0_1166c to i8
  store i8 %v1_1166c, i8* bitcast (i32* @global_var_1d978.555 to i8*), align 4
  %v0_11670 = load i32, i32* @r5, align 4
  %v1_11670 = trunc i32 %v0_11670 to i8
  store i8 %v1_11670, i8* bitcast (i32* @global_var_1d979.556 to i8*), align 4
  %v1_11674 = call i32 @function_12d94(i32 6)
  store i32 %v1_11674, i32* @r6, align 4
  %v4_11684 = call i32 @function_11a58(i32 %v1_11674, i32 ptrtoint ([7 x i8]* @global_var_152ec.636 to i32), i32 6)
  %v0_1168c = load i32, i32* %r8.global-to-local, align 4
  store i8 6, i8* bitcast (i32* @global_var_1d9d0.604 to i8*), align 4
  %v0_11694 = load i32, i32* @r6, align 4
  store i32 %v0_11694, i32* @global_var_1d9cc.603, align 4
  %v0_11698 = load i32, i32* @r5, align 4
  %v1_11698 = trunc i32 %v0_11698 to i8
  store i8 %v1_11698, i8* bitcast (i32* @global_var_1d9d1.605 to i8*), align 4
  %v1_1169c = call i32 @function_12d94(i32 %v0_1168c)
  %v0_116a4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_1169c, i32* @r6, align 4
  %v4_116ac = call i32 @function_11a58(i32 %v1_1169c, i32 ptrtoint ([8 x i8]* @global_var_152f4.638 to i32), i32 %v0_116a4)
  %v0_116b4 = load i32, i32* @r6, align 4
  store i32 %v0_116b4, i32* @global_var_1d9d4.609, align 4
  %v1_116b8 = trunc i32 %v0_116a4 to i8
  store i8 %v1_116b8, i8* bitcast (i32* @global_var_1d9d8.608 to i8*), align 4
  %v0_116bc = load i32, i32* @r5, align 4
  %v1_116bc = trunc i32 %v0_116bc to i8
  store i8 %v1_116bc, i8* bitcast (i32* @global_var_1d9d9.610 to i8*), align 4
  %v1_116c0 = call i32 @function_12d94(i32 %v0_116a4)
  %v0_116c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_116c0, i32* @r6, align 4
  %v4_116d0 = call i32 @function_11a58(i32 %v1_116c0, i32 ptrtoint ([8 x i8]* @global_var_152fc.640 to i32), i32 %v0_116c8)
  %v0_116d8 = load i32, i32* @r6, align 4
  store i32 %v0_116d8, i32* @global_var_1d9dc.614, align 4
  %v1_116dc = trunc i32 %v0_116c8 to i8
  store i8 %v1_116dc, i8* bitcast (i32* @global_var_1d9e0.613 to i8*), align 4
  %v0_116e0 = load i32, i32* @r5, align 4
  %v1_116e0 = trunc i32 %v0_116e0 to i8
  store i8 %v1_116e0, i8* bitcast (i32* @global_var_1d9e1.615 to i8*), align 4
  %v1_116e4 = call i32 @function_12d94(i32 3)
  store i32 %v1_116e4, i32* @r6, align 4
  %v4_116f4 = call i32 @function_11a58(i32 %v1_116e4, i32 ptrtoint ([4 x i8]* @global_var_15304.642 to i32), i32 3)
  %v0_116fc = load i32, i32* %fp.global-to-local, align 4
  store i8 3, i8* bitcast (i32* @global_var_1d9e8.619 to i8*), align 4
  %v0_11704 = load i32, i32* @r6, align 4
  store i32 %v0_11704, i32* @global_var_1d9e4.618, align 4
  %v0_11708 = load i32, i32* @r5, align 4
  %v1_11708 = trunc i32 %v0_11708 to i8
  store i8 %v1_11708, i8* bitcast (i32* @global_var_1d9e9.620 to i8*), align 4
  %v1_1170c = call i32 @function_12d94(i32 %v0_116fc)
  %v0_11714 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1170c, i32* @r6, align 4
  %v3_1171c = call i32 @function_11a58(i32 %v1_1170c, i32 ptrtoint (i32* @global_var_15308.644 to i32), i32 %v0_11714)
  %v0_11724 = load i32, i32* @r6, align 4
  store i32 %v0_11724, i32* @global_var_1d9ec.645, align 4
  %v1_11728 = trunc i32 %v0_11714 to i8
  store i8 %v1_11728, i8* bitcast (i32* @global_var_1d9f0.646 to i8*), align 4
  %v0_1172c = load i32, i32* @r5, align 4
  %v1_1172c = trunc i32 %v0_1172c to i8
  store i8 %v1_1172c, i8* bitcast (i32* @global_var_1d9f1.647 to i8*), align 4
  %v1_11730 = call i32 @function_12d94(i32 24)
  store i32 %v1_11730, i32* @r6, align 4
  %v3_11740 = call i32 @function_11a58(i32 %v1_11730, i32 ptrtoint (i32* @global_var_1531c.649 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1d9f8.650 to i8*), align 4
  %v0_11750 = load i32, i32* @r6, align 4
  store i32 %v0_11750, i32* @global_var_1d9f4.651, align 4
  %v0_11754 = load i32, i32* @r5, align 4
  %v1_11754 = trunc i32 %v0_11754 to i8
  store i8 %v1_11754, i8* bitcast (i32* @global_var_1d9f9.652 to i8*), align 4
  %v1_11758 = call i32 @function_12d94(i32 9)
  store i32 %v1_11758, i32* @r6, align 4
  %v4_11768 = call i32 @function_11a58(i32 %v1_11758, i32 ptrtoint ([10 x i8]* @global_var_15338.654 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1da00.655 to i8*), align 4
  %v0_11778 = load i32, i32* @r6, align 4
  store i32 %v0_11778, i32* @global_var_1d9fc.656, align 4
  %v0_1177c = load i32, i32* @r5, align 4
  %v1_1177c = trunc i32 %v0_1177c to i8
  store i8 %v1_1177c, i8* bitcast (i32* @global_var_1da01.657 to i8*), align 4
  %v1_11780 = call i32 @function_12d94(i32 16)
  store i32 %v1_11780, i32* @r6, align 4
  %v3_11790 = call i32 @function_11a58(i32 %v1_11780, i32 ptrtoint (i32* @global_var_15344.659 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1da08.660 to i8*), align 4
  %v0_117a0 = load i32, i32* @r6, align 4
  store i32 %v0_117a0, i32* @global_var_1da04.661, align 4
  %v0_117a4 = load i32, i32* @r5, align 4
  %v1_117a4 = trunc i32 %v0_117a4 to i8
  store i8 %v1_117a4, i8* bitcast (i32* @global_var_1da09.662 to i8*), align 4
  %v1_117a8 = call i32 @function_12d94(i32 22)
  store i32 %v1_117a8, i32* @r6, align 4
  %v3_117b8 = call i32 @function_11a58(i32 %v1_117a8, i32 ptrtoint (i32* @global_var_15358.664 to i32), i32 22)
  %v0_117c0 = load i32, i32* %sb.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1da10.665 to i8*), align 4
  %v0_117c8 = load i32, i32* @r6, align 4
  store i32 %v0_117c8, i32* @global_var_1da0c.666, align 4
  %v0_117cc = load i32, i32* @r5, align 4
  %v1_117cc = trunc i32 %v0_117cc to i8
  store i8 %v1_117cc, i8* bitcast (i32* @global_var_1da11.667 to i8*), align 4
  %v1_117d0 = call i32 @function_12d94(i32 %v0_117c0)
  %v0_117d8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_117d0, i32* @r6, align 4
  %v4_117e0 = call i32 @function_11a58(i32 %v1_117d0, i32 ptrtoint ([9 x i8]* @global_var_1520c.598 to i32), i32 %v0_117d8)
  %v0_117e8 = load i32, i32* @r6, align 4
  store i32 %v0_117e8, i32* @global_var_1da24.668, align 4
  %v1_117ec = trunc i32 %v0_117d8 to i8
  store i8 %v1_117ec, i8* bitcast (i32* @global_var_1da28.669 to i8*), align 4
  %v0_117f0 = load i32, i32* @r5, align 4
  %v1_117f0 = trunc i32 %v0_117f0 to i8
  store i8 %v1_117f0, i8* bitcast (i32* @global_var_1da29.670 to i8*), align 4
  %v1_117f4 = call i32 @function_12d94(i32 5)
  store i32 %v1_117f4, i32* @r6, align 4
  %v4_11804 = call i32 @function_11a58(i32 %v1_117f4, i32 ptrtoint ([6 x i8]* @global_var_15370.672 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1da30.673 to i8*), align 4
  %v0_11814 = load i32, i32* @r6, align 4
  store i32 %v0_11814, i32* @global_var_1da2c.674, align 4
  %v0_11818 = load i32, i32* @r5, align 4
  %v1_11818 = trunc i32 %v0_11818 to i8
  store i8 %v1_11818, i8* bitcast (i32* @global_var_1da31.675 to i8*), align 4
  %v1_1181c = call i32 @function_12d94(i32 6)
  store i32 %v1_1181c, i32* @r6, align 4
  %v4_1182c = call i32 @function_11a58(i32 %v1_1181c, i32 ptrtoint ([7 x i8]* @global_var_15378.677 to i32), i32 6)
  store i8 6, i8* bitcast (i32* @global_var_1da38.678 to i8*), align 4
  %v0_1183c = load i32, i32* @r6, align 4
  store i32 %v0_1183c, i32* @global_var_1da34.679, align 4
  %v0_11840 = load i32, i32* @r5, align 4
  %v1_11840 = trunc i32 %v0_11840 to i8
  store i8 %v1_11840, i8* bitcast (i32* @global_var_1da39.680 to i8*), align 4
  %v1_11844 = call i32 @function_12d94(i32 21)
  store i32 %v1_11844, i32* @r6, align 4
  %v3_11854 = call i32 @function_11a58(i32 %v1_11844, i32 ptrtoint (i32* @global_var_15380.682 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1da18.683 to i8*), align 4
  %v0_11864 = load i32, i32* @r6, align 4
  store i32 %v0_11864, i32* @global_var_1da14.684, align 4
  %v0_11868 = load i32, i32* @r5, align 4
  %v1_11868 = trunc i32 %v0_11868 to i8
  store i8 %v1_11868, i8* bitcast (i32* @global_var_1da19.685 to i8*), align 4
  %v1_1186c = call i32 @function_12d94(i32 17)
  store i32 %v1_1186c, i32* @r6, align 4
  %v4_1187c = call i32 @function_11a58(i32 %v1_1186c, i32 ptrtoint ([18 x i8]* @global_var_15398.687 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1da20.688 to i8*), align 4
  %v0_1188c = load i32, i32* @r6, align 4
  store i32 %v0_1188c, i32* @global_var_1da1c.689, align 4
  %v0_11890 = load i32, i32* @r5, align 4
  %v1_11890 = trunc i32 %v0_11890 to i8
  store i8 %v1_11890, i8* bitcast (i32* @global_var_1da21.690 to i8*), align 4
  %v1_11894 = call i32 @function_12d94(i32 12)
  store i32 %v1_11894, i32* @r6, align 4
  %v3_118a4 = call i32 @function_11a58(i32 %v1_11894, i32 ptrtoint (i32* @global_var_153ac.692 to i32), i32 12)
  %v0_118ac = load i32, i32* %sl.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1da28.669 to i8*), align 4
  %v0_118b4 = load i32, i32* @r6, align 4
  store i32 %v0_118b4, i32* @global_var_1da24.668, align 4
  %v0_118b8 = load i32, i32* @r5, align 4
  %v1_118b8 = trunc i32 %v0_118b8 to i8
  store i8 %v1_118b8, i8* bitcast (i32* @global_var_1da29.670 to i8*), align 4
  %v1_118bc = call i32 @function_12d94(i32 %v0_118ac)
  %v0_118c4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_118bc, i32* @r6, align 4
  %v4_118cc = call i32 @function_11a58(i32 %v1_118bc, i32 ptrtoint ([15 x i8]* @global_var_15218.600 to i32), i32 %v0_118c4)
  %v0_118d4 = load i32, i32* @r6, align 4
  store i32 %v0_118d4, i32* @global_var_1d994.575, align 4
  %v1_118d8 = trunc i32 %v0_118c4 to i8
  store i8 %v1_118d8, i8* bitcast (i32* @global_var_1d998.574 to i8*), align 4
  %v0_118dc = load i32, i32* @r5, align 4
  %v1_118dc = trunc i32 %v0_118dc to i8
  store i8 %v1_118dc, i8* bitcast (i32* @global_var_1d999.576 to i8*), align 4
  %v1_118e0 = call i32 @function_12d94(i32 23)
  store i32 %v1_118e0, i32* @r6, align 4
  %v3_118f0 = call i32 @function_11a58(i32 %v1_118e0, i32 ptrtoint (i32* @global_var_151f4.593 to i32), i32 23)
  %v0_118f8 = load i32, i32* %fp.global-to-local, align 4
  %v0_118fc = load i32, i32* @r6, align 4
  store i32 %v0_118fc, i32* @global_var_1da74.693, align 4
  store i8 23, i8* bitcast (i32* @global_var_1da78.694 to i8*), align 4
  %v0_11904 = load i32, i32* @r5, align 4
  %v1_11904 = trunc i32 %v0_11904 to i8
  store i8 %v1_11904, i8* bitcast (i32* @global_var_1da79.695 to i8*), align 4
  %v1_11908 = call i32 @function_12d94(i32 %v0_118f8)
  %v0_11910 = load i32, i32* %fp.global-to-local, align 4
  %v4_11918 = call i32 @function_11a58(i32 %v1_11908, i32 ptrtoint ([20 x i8]* @global_var_15228.602 to i32), i32 %v0_11910)
  %v0_1191c = load i32, i32* @r5, align 4
  %v1_1191c = trunc i32 %v0_1191c to i8
  store i8 %v1_1191c, i8* bitcast (i32* @global_var_1d9a1.581 to i8*), align 4
  store i32 %v1_11908, i32* @global_var_1d99c.579, align 4
  %v1_11924 = trunc i32 %v0_11910 to i8
  store i8 %v1_11924, i8* bitcast (i32* @global_var_1d9a0.580 to i8*), align 4
  %v2_11928 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11928, i32* @r4, align 4
  store i32 %v6_111b4, i32* @r5, align 4
  store i32 %v9_111b4, i32* @r6, align 4
  store i32 %v12_111b4, i32* @r7, align 4
  ret i32 %v4_11918

; uselistorder directives
  uselistorder i32 %v1_118bc, { 1, 0 }
  uselistorder i32 %v1_117d0, { 1, 0 }
  uselistorder i32 %v1_1170c, { 1, 0 }
  uselistorder i32 %v1_116c0, { 1, 0 }
  uselistorder i32 %v0_116a4, { 1, 0, 2 }
  uselistorder i32 %v1_1169c, { 1, 0 }
  uselistorder i32 %v1_11650, { 1, 0 }
  uselistorder i32 %v1_1162c, { 1, 0 }
  uselistorder i32 %v1_115e0, { 1, 0 }
  uselistorder i32 %v1_11594, { 1, 0 }
  uselistorder i32 %v1_1156c, { 1, 0 }
  uselistorder i32 %v1_11520, { 1, 0 }
  uselistorder i32 %v1_114ac, { 1, 0 }
  uselistorder i32 %v1_11488, { 1, 0 }
  uselistorder i32 %v1_11464, { 1, 0 }
  uselistorder i32 %v1_11414, { 1, 0 }
  uselistorder i32 %v1_113c8, { 1, 0 }
  uselistorder i32 %v1_1137c, { 1, 0 }
  uselistorder i32 %v1_11354, { 1, 0 }
  uselistorder i32 %v1_11304, { 1, 0 }
  uselistorder i32 %v1_1128c, { 1, 0 }
  uselistorder i32 %v1_11264, { 1, 0 }
  uselistorder i32 %v1_11240, { 1, 0 }
  uselistorder i32 %v1_11218, { 1, 0 }
  uselistorder i32 %v1_111f0, { 1, 0 }
  uselistorder i32 %v1_111bc, { 1, 0 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 16, { 15, 16, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 6, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_15184.553 to i32), { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 11, 12, 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 (i32, i32, i32)* @function_11a58, { 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 7, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1d92c.507 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_119dc(i8* %arg1) local_unnamed_addr {
dec_label_pc_119dc:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_119e0 = load i8, i8* %arg1, align 1
  %v4_119e0 = zext i8 %v3_119e0 to i32
  %v2_119e4 = icmp eq i8 %v3_119e0, 0
  br i1 %v2_119e4, label %dec_label_pc_11a00, label %bb

dec_label_pc_11a00:                               ; preds = %dec_label_pc_119f0, %dec_label_pc_119dc
  %merge = phi i32 [ %v4_119e0, %dec_label_pc_119dc ], [ %v1_119f0, %dec_label_pc_119f0 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_119dc
  br label %dec_label_pc_119f0

dec_label_pc_119f0:                               ; preds = %dec_label_pc_119f0, %bb
  %v0_119f0 = phi i32 [ %v1_119f0, %dec_label_pc_119f0 ], [ 0, %bb ]
  %v1_119f0 = add i32 %v0_119f0, 1
  %v2_119f4 = add i32 %v1_119f0, %tmp
  %v3_119f4 = inttoptr i32 %v2_119f4 to i8*
  %v4_119f4 = load i8, i8* %v3_119f4, align 1
  %v2_119f8 = icmp eq i8 %v4_119f4, 0
  br i1 %v2_119f8, label %dec_label_pc_11a00, label %dec_label_pc_119f0

; uselistorder directives
  uselistorder i32 %v1_119f0, { 1, 0, 2 }
}

define i32 @function_11a04(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a04:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11a04 = load i8, i8* %arg1, align 1
  %v3_11a04 = zext i8 %v2_11a04 to i32
  %v2_11a08 = icmp eq i8 %v2_11a04, 0
  br i1 %v2_11a08, label %dec_label_pc_11a4c, label %dec_label_pc_11a10

dec_label_pc_11a10:                               ; preds = %dec_label_pc_11a04
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a14

dec_label_pc_11a14:                               ; preds = %dec_label_pc_11a14, %dec_label_pc_11a10
  %v0_11a14 = phi i32 [ %v1_11a14, %dec_label_pc_11a14 ], [ 0, %dec_label_pc_11a10 ]
  %v1_11a14 = add i32 %v0_11a14, 1
  store i32 %v1_11a14, i32* %ip.global-to-local, align 4
  %v2_11a18 = add i32 %v1_11a14, %tmp
  %v3_11a18 = inttoptr i32 %v2_11a18 to i8*
  %v4_11a18 = load i8, i8* %v3_11a18, align 1
  %v2_11a1c = icmp eq i8 %v4_11a18, 0
  br i1 %v2_11a1c, label %dec_label_pc_11a24, label %dec_label_pc_11a14

dec_label_pc_11a24:                               ; preds = %dec_label_pc_11a14
  %v7_11a24 = icmp eq i32 %v0_11a14, -2
  br i1 %v7_11a24, label %dec_label_pc_11a44, label %dec_label_pc_11a30.preheader

dec_label_pc_11a30.preheader:                     ; preds = %dec_label_pc_11a24, %dec_label_pc_11a4c
  %storemerge = phi i32 [ %v3_11a04, %dec_label_pc_11a4c ], [ %v1_11a14, %dec_label_pc_11a24 ]
  %v2_11a3c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_11a30

dec_label_pc_11a30:                               ; preds = %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge, %dec_label_pc_11a30.preheader
  %v2_11a3c = phi i32 [ %v5_11a3c, %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge ], [ %v2_11a3c.pre, %dec_label_pc_11a30.preheader ]
  %v0_11a34 = phi i32 [ %v0_11a34.pre, %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge ], [ %tmp, %dec_label_pc_11a30.preheader ]
  %v0_11a30 = phi i32 [ %v0_11a30.pre, %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge ], [ %storemerge, %dec_label_pc_11a30.preheader ]
  %v1_11a30 = add i32 %v0_11a30, -1
  store i32 %v1_11a30, i32* @r2, align 4
  %v1_11a34 = inttoptr i32 %v0_11a34 to i8*
  %v2_11a34 = load i8, i8* %v1_11a34, align 1
  %v5_11a34 = add i32 %v0_11a34, 1
  store i32 %v5_11a34, i32* %r1.global-to-local, align 4
  %v3_11a38 = icmp eq i32 %v0_11a30, 0
  %v3_11a3c = inttoptr i32 %v2_11a3c to i8*
  store i8 %v2_11a34, i8* %v3_11a3c, align 1
  %v4_11a3c = load i32, i32* @r0, align 4
  %v5_11a3c = add i32 %v4_11a3c, 1
  store i32 %v5_11a3c, i32* @r0, align 4
  br i1 %v3_11a38, label %dec_label_pc_11a44.loopexit, label %dec_label_pc_11a30.dec_label_pc_11a30_crit_edge

dec_label_pc_11a30.dec_label_pc_11a30_crit_edge:  ; preds = %dec_label_pc_11a30
  %v0_11a30.pre = load i32, i32* @r2, align 4
  %v0_11a34.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a30

dec_label_pc_11a44.loopexit:                      ; preds = %dec_label_pc_11a30
  %v0_11a44.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a44

dec_label_pc_11a44:                               ; preds = %dec_label_pc_11a44.loopexit, %dec_label_pc_11a24
  %v0_11a44 = phi i32 [ %v0_11a44.pre, %dec_label_pc_11a44.loopexit ], [ %v1_11a14, %dec_label_pc_11a24 ]
  ret i32 %v0_11a44

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_11a04
  store i32 %v3_11a04, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a30.preheader

; uselistorder directives
  uselistorder i32 %v5_11a3c, { 1, 0 }
  uselistorder i32 %v0_11a34, { 1, 0 }
  uselistorder i32 %v1_11a14, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_11a04, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11a30.preheader, { 1, 0 }
}

define i32 @function_11a58(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a58:
  %v2_11a58 = icmp eq i32 %arg3, 0
  br i1 %v2_11a58, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_11a64, %dec_label_pc_11a58
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_11a58
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a64, %bb
  %v0_11a64 = phi i32 [ %v1_11a6c, %dec_label_pc_11a64 ], [ 0, %bb ]
  %v2_11a64 = add i32 %v0_11a64, %arg2
  %v3_11a64 = inttoptr i32 %v2_11a64 to i8*
  %v4_11a64 = load i8, i8* %v3_11a64, align 1
  %v4_11a68 = add i32 %v0_11a64, %arg1
  %v5_11a68 = inttoptr i32 %v4_11a68 to i8*
  store i8 %v4_11a64, i8* %v5_11a68, align 1
  %v0_11a6c = load i32, i32* @ip, align 4
  %v1_11a6c = add i32 %v0_11a6c, 1
  store i32 %v1_11a6c, i32* @ip, align 4
  %v9_11a70 = icmp eq i32 %v1_11a6c, %arg3
  br i1 %v9_11a70, label %.loopexit, label %dec_label_pc_11a64

; uselistorder directives
  uselistorder i32 %v1_11a6c, { 1, 2, 0 }
}

define i32 @function_11a7c() local_unnamed_addr {
dec_label_pc_11a7c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_11a7c = load i32, i32* @r1, align 4
  %v2_11a7c = icmp eq i32 %v0_11a7c, 0
  br i1 %v2_11a7c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_11a7c
  %v2_11a80 = load i32, i32* @r0, align 4
  ret i32 %v2_11a80

bb3:                                              ; preds = %dec_label_pc_11a7c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge, %bb3
  %v2_11a8c = phi i32 [ %v1_11a90, %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge ], [ 0, %bb3 ]
  %v0_11a8c.off0 = phi i8 [ %extract.t, %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge ], [ 0, %bb3 ]
  %v3_11a8c = load i32, i32* @r0, align 4
  %v4_11a8c = add i32 %v3_11a8c, %v2_11a8c
  %v5_11a8c = inttoptr i32 %v4_11a8c to i8*
  store i8 %v0_11a8c.off0, i8* %v5_11a8c, align 1
  %v0_11a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a90 = add i32 %v0_11a90, 1
  store i32 %v1_11a90, i32* %r3.global-to-local, align 4
  %v1_11a94 = load i32, i32* @r1, align 4
  %v9_11a94 = icmp eq i32 %v1_11a90, %v1_11a94
  br i1 %v9_11a94, label %dec_label_pc_11a9c, label %dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge

dec_label_pc_11a8c.dec_label_pc_11a8c_crit_edge:  ; preds = %dec_label_pc_11a8c
  %v0_11a8c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_11a8c.pre to i8
  br label %dec_label_pc_11a8c

dec_label_pc_11a9c:                               ; preds = %dec_label_pc_11a8c
  %v1_11a9c = load i32, i32* @r0, align 4
  ret i32 %v1_11a9c

; uselistorder directives
  uselistorder i32 %v1_11a90, { 1, 2, 0 }
}

define i32 @function_11aa0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11aa0:
  %v7_11ab4 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_11ab4, label %dec_label_pc_11ab8, label %dec_label_pc_11ac0

dec_label_pc_11ab8:                               ; preds = %dec_label_pc_11ad4, %dec_label_pc_11aa0, %dec_label_pc_11ac0
  ret i32 -1

dec_label_pc_11ac0:                               ; preds = %dec_label_pc_11aa0
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_11ab8, label %dec_label_pc_11ac8

dec_label_pc_11ac8:                               ; preds = %dec_label_pc_11ac0
  br label %dec_label_pc_11ae0

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11af8, %dec_label_pc_11ae0
  %v1_11ad4 = add i32 %v0_11b00, 1
  %v9_11ad8 = icmp eq i32 %v1_11ad4, %arg2
  br i1 %v9_11ad8, label %dec_label_pc_11ab8, label %dec_label_pc_11ae0

dec_label_pc_11ae0:                               ; preds = %dec_label_pc_11ad4, %dec_label_pc_11ac8
  %v0_11b00 = phi i32 [ %v1_11ad4, %dec_label_pc_11ad4 ], [ 0, %dec_label_pc_11ac8 ]
  %v0_11aec = phi i32 [ %v1_11aec., %dec_label_pc_11ad4 ], [ 0, %dec_label_pc_11ac8 ]
  %v2_11ae0 = add i32 %v0_11aec, %arg3
  %v3_11ae0 = inttoptr i32 %v2_11ae0 to i8*
  %v4_11ae0 = load i8, i8* %v3_11ae0, align 1
  %v2_11ae4 = add i32 %v0_11b00, %arg1
  %v3_11ae4 = inttoptr i32 %v2_11ae4 to i8*
  %v4_11ae4 = load i8, i8* %v3_11ae4, align 1
  %v9_11ae8 = icmp eq i8 %v4_11ae4, %v4_11ae0
  %v1_11aec = add i32 %v0_11aec, 1
  %v1_11aec. = select i1 %v9_11ae8, i32 %v1_11aec, i32 0
  br i1 %v9_11ae8, label %dec_label_pc_11af8, label %dec_label_pc_11ad4

dec_label_pc_11af8:                               ; preds = %dec_label_pc_11ae0
  %v9_11af8 = icmp eq i32 %v1_11aec., %arg4
  br i1 %v9_11af8, label %dec_label_pc_11b00, label %dec_label_pc_11ad4

dec_label_pc_11b00:                               ; preds = %dec_label_pc_11af8
  %v1_11b00 = add i32 %v0_11b00, 1
  ret i32 %v1_11b00

; uselistorder directives
  uselistorder i1 %v9_11ae8, { 1, 0 }
  uselistorder i32 %v0_11aec, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11ab8, { 0, 2, 1 }
}

define i32 @function_11b08(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b08:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_11b08 = load i32, i32* @r4, align 4
  store i32 %v3_11b08, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11b14

dec_label_pc_11b14:                               ; preds = %.thread, %dec_label_pc_11b2c, %bb, %dec_label_pc_11b08
  %v0_11b14 = phi i32 [ %tmp, %dec_label_pc_11b08 ], [ %v5_11b14, %bb ], [ %v5_11b14, %dec_label_pc_11b2c ], [ %v5_11b14, %.thread ]
  %v1_11b14 = inttoptr i32 %v0_11b14 to i8*
  %v2_11b14 = load i8, i8* %v1_11b14, align 1
  %v3_11b14 = zext i8 %v2_11b14 to i32
  %v5_11b14 = add i32 %v0_11b14, 1
  store i32 %v5_11b14, i32* %r5.global-to-local, align 4
  %v7_11b1c = icmp eq i8 %v2_11b14, 9
  br i1 %v7_11b1c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11b14
  store i32 %v3_11b14, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b14

bb:                                               ; preds = %dec_label_pc_11b14
  %v8_11b20 = icmp eq i8 %v2_11b14, 32
  store i32 %v3_11b14, i32* %r4.global-to-local, align 4
  br i1 %v8_11b20, label %dec_label_pc_11b14, label %dec_label_pc_11b2c

dec_label_pc_11b2c:                               ; preds = %bb
  %v7_11b2c = icmp eq i8 %v2_11b14, 10
  br i1 %v7_11b2c, label %dec_label_pc_11b14, label %dec_label_pc_11b34

dec_label_pc_11b34:                               ; preds = %dec_label_pc_11b2c
  %v7_11b34 = icmp eq i8 %v2_11b14, 45
  br i1 %v7_11b34, label %dec_label_pc_11c14, label %dec_label_pc_11b3c

dec_label_pc_11b3c:                               ; preds = %dec_label_pc_11b34
  %v7_11b3c = icmp eq i8 %v2_11b14, 43
  br i1 %v7_11b3c, label %bb48, label %dec_label_pc_11b4c

bb48:                                             ; preds = %dec_label_pc_11b3c
  %v2_11b40 = inttoptr i32 %v5_11b14 to i8*
  %v3_11b40 = load i8, i8* %v2_11b40, align 1
  %v4_11b40 = zext i8 %v3_11b40 to i32
  store i32 %v4_11b40, i32* %r4.global-to-local, align 4
  %v6_11b40 = add i32 %v0_11b14, 2
  store i32 %v6_11b40, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11b4c

dec_label_pc_11b4c:                               ; preds = %bb48, %dec_label_pc_11b3c, %dec_label_pc_11c14
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_11c14 ], [ 2147483647, %dec_label_pc_11b3c ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_11c14 ], [ 0, %dec_label_pc_11b3c ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_11b54 = call i32 @function_12068(i32 %storemerge1, i32 %arg2)
  %v0_11b58 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11b58, i32* @r1, align 4
  store i32 %v2_11b54, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_11b64 = call i32 @function_11f58()
  store i32 %v0_11b64, i32* @lr, align 4
  %v0_11b74.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11b74:                               ; preds = %.thread8, %dec_label_pc_11b4c
  %v2_11bf011 = phi i32 [ %v1_11c0c26, %.thread8 ], [ 0, %dec_label_pc_11b4c ]
  %v1_11bcc = phi i32 [ %v0_11c0024, %.thread8 ], [ 0, %dec_label_pc_11b4c ]
  %v1_11bb4 = phi i32 [ %v3_11bf8, %.thread8 ], [ %v0_11b74.pre, %dec_label_pc_11b4c ]
  %v1_11b74 = urem i32 %v1_11bb4, 256
  %v1_11b78 = add nsw i32 %v1_11b74, -48
  %v1_11b80 = add nsw i32 %v1_11b74, -97
  %v1_11b84 = add i32 %v1_11bb4, -48
  %v1_11b88 = add nsw i32 %v1_11b74, -65
  %tmp71 = icmp ult i32 %v1_11b78, 10
  br i1 %tmp71, label %dec_label_pc_11bb8, label %dec_label_pc_11b90

dec_label_pc_11b90:                               ; preds = %dec_label_pc_11b74
  %v2_11b90 = icmp ugt i32 %v1_11b88, 24
  %v7_11b90 = icmp eq i32 %v1_11b88, 25
  %v2_11b94 = xor i1 %v7_11b90, true
  %v3_11b94 = and i1 %v2_11b90, %v2_11b94
  br i1 %v3_11b94, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_11b90
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_11b90, %bb49
  %v0_11ba820 = phi i32 [ %v1_11b84, %dec_label_pc_11b90 ], [ 0, %bb49 ]
  %v2_11b98 = xor i1 %v2_11b90, true
  %v3_11b98 = or i1 %v7_11b90, %v2_11b98
  br i1 %v3_11b98, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_11ba8 = phi i32 [ %v0_11ba820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_11b94, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_11ba0 = icmp ugt i32 %v1_11b80, 24
  %v11_11ba0 = icmp eq i32 %v1_11b80, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_11ba4 = phi i1 [ %v7_11b90, %bb52 ], [ %v11_11ba0, %bb53 ]
  %v0_11ba4 = phi i1 [ %v2_11b90, %bb52 ], [ %v6_11ba0, %bb53 ]
  %v2_11ba4 = xor i1 %v1_11ba4, true
  %v3_11ba4 = and i1 %v0_11ba4, %v2_11ba4
  br i1 %v3_11ba4, label %dec_label_pc_11c00, label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %bb54
  %v2_11ba8 = icmp eq i32 %v0_11ba8, 0
  %. = select i1 %v2_11ba8, i32 87, i32 55
  %v2_11bb4 = sub i32 %v1_11bb4, %.
  br label %dec_label_pc_11bb8

dec_label_pc_11bb8:                               ; preds = %dec_label_pc_11b74, %dec_label_pc_11ba8
  %v0_11bcc34 = phi i32 [ %v1_11b88, %dec_label_pc_11b74 ], [ %., %dec_label_pc_11ba8 ]
  %v3_11bf012 = phi i32 [ %v1_11b84, %dec_label_pc_11b74 ], [ %v2_11bb4, %dec_label_pc_11ba8 ]
  %v1_11bb8 = load i32, i32* %r6.global-to-local, align 4
  %v6_11bbc = icmp slt i32 %v3_11bf012, %v1_11bb8
  br i1 %v6_11bbc, label %dec_label_pc_11bc0, label %dec_label_pc_11c00

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11bb8
  %v3_11bc0 = icmp uge i32 %v2_11bf011, %v0_11b64
  %v9_11bc0 = icmp eq i32 %v2_11bf011, %v0_11b64
  %v2_11bc4 = xor i1 %v3_11bc0, true
  %v3_11bc4 = or i1 %v9_11bc0, %v2_11bc4
  br i1 %v3_11bc4, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_11bc0
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_11bc0, %bb57
  %v0_11bcc33 = phi i32 [ %v0_11bcc34, %dec_label_pc_11bc0 ], [ 0, %bb57 ]
  %v2_11bc8 = xor i1 %v9_11bc0, true
  %v3_11bc8 = and i1 %v3_11bc0, %v2_11bc8
  br i1 %v3_11bc8, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_11bcc = phi i32 [ %v0_11bcc33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_11bcc, 0
  %v4_11bcc = zext i1 %tmp72 to i32
  %v5_11bcc = or i32 %v0_11bcc, %v4_11bcc
  %v7_11bcc = icmp eq i32 %v5_11bcc, 0
  br i1 %v7_11bcc, label %dec_label_pc_11bd8, label %.thread8

dec_label_pc_11bd8:                               ; preds = %bb60
  %v1_11be4 = load i32, i32* %r8.global-to-local, align 4
  %v7_11be8 = icmp sgt i32 %v3_11bf012, %v1_11be4
  br i1 %v7_11be8, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_11bd8
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_11bd8
  %v2_11bec = icmp eq i1 %v9_11bc0, false
  br i1 %v2_11bec, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_11bf013 = mul i32 %v1_11bb8, %v2_11bf011
  %v5_11bf014 = add i32 %v4_11bf013, %v3_11bf012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_11c0c26 = phi i32 [ %v2_11bf011, %bb63 ], [ %v2_11bf011, %bb60 ], [ %v5_11bf014, %bb64 ]
  %v0_11c0024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_11bf8 = load i32, i32* %r5.global-to-local, align 4
  %v1_11bf8 = inttoptr i32 %v0_11bf8 to i8*
  %v2_11bf8 = load i8, i8* %v1_11bf8, align 1
  %v3_11bf8 = zext i8 %v2_11bf8 to i32
  store i32 %v3_11bf8, i32* %r4.global-to-local, align 4
  %v5_11bf8 = add i32 %v0_11bf8, 1
  store i32 %v5_11bf8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11c00:                               ; preds = %dec_label_pc_11bb8, %bb54
  %v1_11c00 = icmp slt i32 %v1_11bcc, 0
  %v0_11c24 = load i32, i32* %sl.global-to-local, align 4
  %v2_11c24 = icmp eq i32 %v0_11c24, 0
  br i1 %v1_11c00, label %dec_label_pc_11c24, label %dec_label_pc_11c08

dec_label_pc_11c08:                               ; preds = %dec_label_pc_11c00
  br i1 %v2_11c24, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_11c08
  %v2_11c0c = sub i32 0, %v2_11bf011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_11c08, %bb65
  %v23_11c10 = phi i32 [ %v2_11bf011, %dec_label_pc_11c08 ], [ %v2_11c0c, %bb65 ]
  %v2_11c10 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11c10, i32* @r4, align 4
  ret i32 %v23_11c10

dec_label_pc_11c14:                               ; preds = %dec_label_pc_11b34
  %v1_11c14 = inttoptr i32 %v5_11b14 to i8*
  %v2_11c14 = load i8, i8* %v1_11c14, align 1
  %v3_11c14 = zext i8 %v2_11c14 to i32
  store i32 %v3_11c14, i32* %r4.global-to-local, align 4
  %v5_11c14 = add i32 %v0_11b14, 2
  store i32 %v5_11c14, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11b4c

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c00
  %.70 = select i1 %v2_11c24, i32 2147483647, i32 -2147483648
  %v2_11c30 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11c30, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_11bf8, { 1, 0 }
  uselistorder i1 %v9_11bc0, { 1, 0, 2 }
  uselistorder i1 %v3_11bc0, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_11b90, { 1, 2, 0 }
  uselistorder i1 %v2_11b90, { 1, 0, 2 }
  uselistorder i32 %v1_11b74, { 1, 2, 0 }
  uselistorder i32 %v1_11bb4, { 1, 2, 0 }
  uselistorder i32 %v1_11bcc, { 1, 0 }
  uselistorder i32 %v2_11bf011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_11b64, { 1, 0, 2 }
  uselistorder i32 %v5_11b14, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_11b14, { 1, 0 }
  uselistorder i32 %v0_11b14, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_11bb8, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_11b4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11b14, { 1, 2, 0, 3 }
}

define i32 @function_11c34(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11c34:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11c34 = load i32, i32* @r4, align 4
  store i32 %v3_11c34, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge, %dec_label_pc_11c34
  %v0_11c50 = phi i32 [ %v0_11c50.pre, %dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge ], [ %arg3, %dec_label_pc_11c34 ]
  %v0_11c4c = phi i32 [ %v1_11c64, %dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge ], [ %tmp, %dec_label_pc_11c34 ]
  %tmp12 = inttoptr i32 %v0_11c4c to i32*
  %v5_11c58 = call i32 @function_124a8(i32 %v0_11c50, i32* %tmp12, i32 1)
  %v7_11c5c = icmp eq i32 %v5_11c58, 1
  %v0_11c60 = load i32, i32* @r4, align 4
  %v1_11c64 = add i32 %v0_11c60, 1
  store i32 %v1_11c64, i32* @r4, align 4
  %v0_11c6c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11c5c, label %dec_label_pc_11c6c, label %dec_label_pc_11c84

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c4c
  %v1_11c6c = add i32 %v0_11c6c, 1
  store i32 %v1_11c6c, i32* %r5.global-to-local, align 4
  %v0_11c70 = load i32, i32* %r7.global-to-local, align 4
  %v7_11c74 = icmp sgt i32 %v0_11c70, %v1_11c6c
  br i1 %v7_11c74, label %dec_label_pc_11c78, label %dec_label_pc_11c84

dec_label_pc_11c78:                               ; preds = %dec_label_pc_11c6c
  %v1_11c78 = inttoptr i32 %v0_11c60 to i8*
  %v2_11c78 = load i8, i8* %v1_11c78, align 1
  %v7_11c7c = icmp eq i8 %v2_11c78, 10
  br i1 %v7_11c7c, label %dec_label_pc_11c84, label %dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge

dec_label_pc_11c78.dec_label_pc_11c4c_crit_edge:  ; preds = %dec_label_pc_11c78
  %v0_11c50.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11c4c

dec_label_pc_11c84:                               ; preds = %dec_label_pc_11c4c, %dec_label_pc_11c78, %dec_label_pc_11c6c
  %v0_11c84 = phi i32 [ %v1_11c6c, %dec_label_pc_11c78 ], [ %v1_11c6c, %dec_label_pc_11c6c ], [ %v0_11c6c, %dec_label_pc_11c4c ]
  %v2_11c84 = icmp eq i32 %v0_11c84, 0
  %v1_11c88 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_11c84, i32 0, i32 %v1_11c88
  %v2_11c90 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11c90, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11c64, { 1, 0 }
  uselistorder i8 10, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32)* @function_124a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c84, { 1, 2, 0 }
}

define i32 @function_11c94() local_unnamed_addr {
dec_label_pc_11c94:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_11c94 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_11ca4 = call i32 @function_128b4()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_11cac = inttoptr i32 %v0_11ca4 to i32*
  store i32 0, i32* %v2_11cac, align 4
  %v0_11cb8 = load i32, i32* %r6.global-to-local, align 4
  %v3_11cbc = call i32 @function_12bfc(i32 2, i32 2, i32 %v0_11cb8)
  %v7_11cc8 = icmp eq i32 %v3_11cbc, -1
  store i32 %v3_11cbc, i32* %r5.global-to-local, align 4
  %v2_11cd4 = load i32, i32* @r4, align 4
  br i1 %v7_11cc8, label %dec_label_pc_11d24, label %dec_label_pc_11ce8

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11c94
  %v7_11cd4 = shl i32 2056, %v2_11cd4
  %v8_11cd4 = or i32 %v7_11cd4, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_11d04 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_11d04 = call i32 @function_12a58(i32 %v3_11cbc, %sockaddr* %v3_11d04, i32 %v2_11cd4)
  %v2_11d0c = ptrtoint i32* %stack_var_-24 to i32
  %v0_11d10 = load i32, i32* %r5.global-to-local, align 4
  %v4_11d14 = call i32 @function_12a84(i32 %v0_11d10, %sockaddr* %v3_11d04, i32 %v2_11d0c)
  %v1_11d1c = call i32 @function_122e0(i32 %v0_11d10)
  br label %dec_label_pc_11d24

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11c94, %dec_label_pc_11ce8
  %v0_11d24 = phi i32 [ %v0_11cb8, %dec_label_pc_11c94 ], [ %v8_11cd4, %dec_label_pc_11ce8 ]
  store i32 %v3_11c94, i32* @r4, align 4
  ret i32 %v0_11d24

; uselistorder directives
  uselistorder i32 %v3_11cbc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_12a58, { 1, 0, 2, 4, 3, 5, 6, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12bfc, { 17, 18, 15, 16, 13, 14, 1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_11d24, { 1, 0 }
}

define i32 @function_11d30(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11d30:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_11d34 = load i8, i8* %tmp, align 1
  %v2_11d38 = icmp eq i8 %v3_11d34, 0
  br i1 %v2_11d38, label %bb, label %dec_label_pc_11d4c

bb:                                               ; preds = %dec_label_pc_11d30
  %v4_11d34 = zext i8 %v3_11d34 to i32
  br label %dec_label_pc_11d60

dec_label_pc_11d4c:                               ; preds = %dec_label_pc_11d30
  br label %dec_label_pc_11d50

dec_label_pc_11d50:                               ; preds = %dec_label_pc_11d50, %dec_label_pc_11d4c
  %v0_11d50 = phi i32 [ %v1_11d50, %dec_label_pc_11d50 ], [ 0, %dec_label_pc_11d4c ]
  %v1_11d50 = add i32 %v0_11d50, 1
  %v2_11d54 = add i32 %v1_11d50, %arg2
  %v3_11d54 = inttoptr i32 %v2_11d54 to i8*
  %v4_11d54 = load i8, i8* %v3_11d54, align 1
  %v2_11d58 = icmp eq i8 %v4_11d54, 0
  br i1 %v2_11d58, label %dec_label_pc_11d60, label %dec_label_pc_11d50

dec_label_pc_11d60:                               ; preds = %dec_label_pc_11d50, %bb
  %v0_11da418 = phi i32 [ %v4_11d34, %bb ], [ %v1_11d50, %dec_label_pc_11d50 ]
  %v0_11d681 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_11d681, 1
  br i1 %tmp27, label %dec_label_pc_11db4, label %dec_label_pc_11d74

dec_label_pc_11d74:                               ; preds = %dec_label_pc_11d60, %dec_label_pc_11d68.backedge
  %v0_11d6c.in = phi i32 [ %v0_11d6c, %dec_label_pc_11d68.backedge ], [ %v0_11d681, %dec_label_pc_11d60 ]
  %v0_11d98 = phi i32 [ %v1_11d98., %dec_label_pc_11d68.backedge ], [ 0, %dec_label_pc_11d60 ]
  %v0_11d74 = phi i32 [ %v5_11d74, %dec_label_pc_11d68.backedge ], [ %tmp20, %dec_label_pc_11d60 ]
  %v0_11d6c = add i32 %v0_11d6c.in, -1
  %v1_11d74 = inttoptr i32 %v0_11d74 to i8*
  %v2_11d74 = load i8, i8* %v1_11d74, align 1
  %v3_11d74 = zext i8 %v2_11d74 to i32
  store i32 %v3_11d74, i32* @lr, align 4
  %v5_11d74 = add i32 %v0_11d74, 1
  %v2_11d78 = add i32 %v0_11d98, %arg2
  %v3_11d78 = inttoptr i32 %v2_11d78 to i8*
  %v4_11d78 = load i8, i8* %v3_11d78, align 1
  %v6_11d78 = zext i8 %v4_11d78 to i32
  %v1_11d7c = add nsw i32 %v3_11d74, -65
  %v1_11d80 = add nsw i32 %v6_11d78, -65
  %tmp35 = icmp ult i32 %v1_11d7c, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11d74
  %v5_11d88 = or i32 %v3_11d74, 96
  store i32 %v5_11d88, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11d74, %bb28
  %v0_11d94 = phi i32 [ %v3_11d74, %dec_label_pc_11d74 ], [ %v5_11d88, %bb28 ]
  %tmp36 = icmp ult i32 %v1_11d80, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_11d90 = or i32 %v6_11d78, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_11d94 = phi i32 [ %v6_11d78, %bb29 ], [ %v5_11d90, %bb30 ]
  %v9_11d94 = icmp eq i32 %v0_11d94, %v1_11d94
  %v1_11d98 = add i32 %v0_11d98, 1
  %v1_11d98. = select i1 %v9_11d94, i32 %v1_11d98, i32 0
  br i1 %v9_11d94, label %dec_label_pc_11da4, label %dec_label_pc_11d68.backedge

dec_label_pc_11d68.backedge:                      ; preds = %bb31, %dec_label_pc_11da4
  %tmp32 = icmp slt i32 %v0_11d6c, 1
  br i1 %tmp32, label %dec_label_pc_11db4, label %dec_label_pc_11d74

dec_label_pc_11da4:                               ; preds = %bb31
  %v9_11da4 = icmp eq i32 %v0_11da418, %v1_11d98.
  br i1 %v9_11da4, label %dec_label_pc_11dac, label %dec_label_pc_11d68.backedge

dec_label_pc_11dac:                               ; preds = %dec_label_pc_11da4
  %v2_11dac = sub i32 %v5_11d74, %tmp20
  ret i32 %v2_11dac

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11d68.backedge, %dec_label_pc_11d60
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_11d98., { 1, 0 }
  uselistorder i32 %v0_11d74, { 1, 0 }
  uselistorder i32 %v0_11d98, { 1, 0 }
  uselistorder i8 %v3_11d34, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_11d68.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11d74, { 1, 0 }
}

define i32 @function_11dbc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11dbc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11dbc = load i8, i8* %arg1, align 1
  %v2_11dc0 = icmp eq i8 %v2_11dbc, 0
  br i1 %v2_11dc0, label %bb, label %dec_label_pc_11dcc

bb:                                               ; preds = %dec_label_pc_11dbc
  %v3_11dbc = zext i8 %v2_11dbc to i32
  br label %dec_label_pc_11de0

dec_label_pc_11dcc:                               ; preds = %dec_label_pc_11dbc
  br label %dec_label_pc_11dd0

dec_label_pc_11dd0:                               ; preds = %dec_label_pc_11dd0, %dec_label_pc_11dcc
  %v0_11dd0 = phi i32 [ %v1_11dd0, %dec_label_pc_11dd0 ], [ 0, %dec_label_pc_11dcc ]
  %v1_11dd0 = add i32 %v0_11dd0, 1
  %v2_11dd4 = add i32 %v1_11dd0, %tmp
  %v3_11dd4 = inttoptr i32 %v2_11dd4 to i8*
  %v4_11dd4 = load i8, i8* %v3_11dd4, align 1
  %v2_11dd8 = icmp eq i8 %v4_11dd4, 0
  br i1 %v2_11dd8, label %dec_label_pc_11de0, label %dec_label_pc_11dd0

dec_label_pc_11de0:                               ; preds = %dec_label_pc_11dd0, %bb
  %v1_11e04 = phi i32 [ %v3_11dbc, %bb ], [ %v1_11dd0, %dec_label_pc_11dd0 ]
  %v1_11de0 = inttoptr i32 %arg2 to i8*
  %v2_11de0 = load i8, i8* %v1_11de0, align 1
  %v3_11de0 = zext i8 %v2_11de0 to i32
  %v2_11de4 = icmp eq i8 %v2_11de0, 0
  br i1 %v2_11de4, label %bb22, label %dec_label_pc_11df0

bb22:                                             ; preds = %dec_label_pc_11de0
  store i32 %v3_11de0, i32* @r2, align 4
  br label %dec_label_pc_11e04

dec_label_pc_11df0:                               ; preds = %dec_label_pc_11de0
  br label %dec_label_pc_11df4

dec_label_pc_11df4:                               ; preds = %dec_label_pc_11df4, %dec_label_pc_11df0
  %v0_11df4 = phi i32 [ %v1_11df4, %dec_label_pc_11df4 ], [ 0, %dec_label_pc_11df0 ]
  %v1_11df4 = add i32 %v0_11df4, 1
  store i32 %v1_11df4, i32* @r2, align 4
  %v2_11df8 = add i32 %v1_11df4, %arg2
  %v3_11df8 = inttoptr i32 %v2_11df8 to i8*
  %v4_11df8 = load i8, i8* %v3_11df8, align 1
  %v2_11dfc = icmp eq i8 %v4_11df8, 0
  br i1 %v2_11dfc, label %dec_label_pc_11e04, label %dec_label_pc_11df4

dec_label_pc_11e04:                               ; preds = %dec_label_pc_11df4, %bb22
  %v0_11e304 = phi i32 [ %v3_11de0, %bb22 ], [ %v1_11df4, %dec_label_pc_11df4 ]
  %v9_11e04 = icmp eq i32 %v0_11e304, %v1_11e04
  br i1 %v9_11e04, label %dec_label_pc_11e30.preheader, label %dec_label_pc_11e10

dec_label_pc_11e30.preheader:                     ; preds = %dec_label_pc_11e04
  %v2_11e306 = icmp eq i32 %v1_11e04, 0
  br i1 %v2_11e306, label %dec_label_pc_11e38, label %dec_label_pc_11e18

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11e18, %dec_label_pc_11e04
  ret i32 0

dec_label_pc_11e18:                               ; preds = %dec_label_pc_11e28, %dec_label_pc_11e30.preheader
  %v0_11e30.in = phi i32 [ %v0_11e30, %dec_label_pc_11e28 ], [ %v1_11e04, %dec_label_pc_11e30.preheader ]
  %v0_11e2c = phi i32 [ %v1_11e2c, %dec_label_pc_11e28 ], [ %arg2, %dec_label_pc_11e30.preheader ]
  %v0_11e28 = phi i32 [ %v1_11e28, %dec_label_pc_11e28 ], [ %tmp, %dec_label_pc_11e30.preheader ]
  %v0_11e30 = add i32 %v0_11e30.in, -1
  %v1_11e18 = inttoptr i32 %v0_11e28 to i8*
  %v2_11e18 = load i8, i8* %v1_11e18, align 1
  %v3_11e18 = zext i8 %v2_11e18 to i32
  store i32 %v3_11e18, i32* @r2, align 4
  %v1_11e1c = inttoptr i32 %v0_11e2c to i8*
  %v2_11e1c = load i8, i8* %v1_11e1c, align 1
  %v9_11e20 = icmp eq i8 %v2_11e18, %v2_11e1c
  br i1 %v9_11e20, label %dec_label_pc_11e28, label %dec_label_pc_11e10

dec_label_pc_11e28:                               ; preds = %dec_label_pc_11e18
  %v1_11e28 = add i32 %v0_11e28, 1
  %v1_11e2c = add i32 %v0_11e2c, 1
  %v2_11e30 = icmp eq i32 %v0_11e30, 0
  br i1 %v2_11e30, label %dec_label_pc_11e38, label %dec_label_pc_11e18

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11e28, %dec_label_pc_11e30.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_11df4, { 0, 1, 3, 2 }
  uselistorder i8 %v2_11dbc, { 1, 0 }
}

define i32 @function_11e40(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11e40:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11e40 = load i32, i32* @r4, align 4
  store i32 %v3_11e40, i32* %stack_var_-28, align 4
  %v22_11e40 = ptrtoint i32* %stack_var_-28 to i32
  %v0_11e44 = load i32, i32* @r2, align 4
  store i32 %v0_11e44, i32* %r8.global-to-local, align 4
  %v2_11e44 = icmp eq i32 %v0_11e44, 0
  store i1 %v2_11e44, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_11e44, label %dec_label_pc_11f34, label %dec_label_pc_11e54

dec_label_pc_11e54:                               ; preds = %dec_label_pc_11e40
  %v3_11e54 = icmp eq i8 %arg1, 0
  store i1 %v3_11e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e54, label %.thread, label %dec_label_pc_11e68

.thread:                                          ; preds = %dec_label_pc_11e54
  %v4_11e5c = inttoptr i32 %v0_11e44 to i8*
  store i8 48, i8* %v4_11e5c, align 1
  %v0_11e60.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11e60.pr.pr, label %.thread1, label %dec_label_pc_11e68

.thread1:                                         ; preds = %.thread
  %v4_11e60 = load i32, i32* %r8.global-to-local, align 4
  %v5_11e60 = add i32 %v4_11e60, 1
  %v6_11e60 = inttoptr i32 %v5_11e60 to i8*
  store i8 0, i8* %v6_11e60, align 1
  %v0_11e64.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11e64.pr.pr, label %dec_label_pc_11f34, label %dec_label_pc_11e68

dec_label_pc_11e68:                               ; preds = %dec_label_pc_11e54, %.thread, %.thread1
  %v7_11e6c = icmp eq i32 %arg2, 10
  store i1 %v7_11e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e6c, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_11e68
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_11e68
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_11e90

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ea0

dec_label_pc_11e90:                               ; preds = %bb
  %v2_11e90 = sub nsw i32 0, %tmp
  store i32 %v2_11e90, i32* %r4.global-to-local, align 4
  store i1 %v3_11e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e54, label %dec_label_pc_11f40, label %dec_label_pc_11ea0

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11e90, %.thread4
  %v0_11ea810 = phi i32 [ %tmp, %.thread4 ], [ %v2_11e90, %dec_label_pc_11e90 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_11e90 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_11ea4 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_11ea4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11ea8

dec_label_pc_11ea8:                               ; preds = %bb37, %dec_label_pc_11ea0
  %v0_11ea8 = phi i32 [ %v0_11ecc, %bb37 ], [ %v0_11ea810, %dec_label_pc_11ea0 ]
  store i32 %v0_11ea8, i32* %r0.global-to-local, align 4
  %v0_11eac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11eac, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_11ea8, 16777216
  %v1_11eb0 = sdiv i32 %sext, 16777216
  %v3_11eb0 = call i32 @function_12068(i32 %v1_11eb0, i32 %v0_11eac)
  store i32 %v3_11eb0, i32* %r0.global-to-local, align 4
  %v7_11eb4 = icmp eq i32 %v3_11eb0, 9
  store i1 %v7_11eb4, i1* %cpsr_z.global-to-local, align 1
  %v1_11eb8 = add i32 %v3_11eb0, 48
  %v0_11ebc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11ebc, i32* @r1, align 4
  %v7_11ec0 = icmp sgt i32 %v3_11eb0, 9
  %extract.t = trunc i32 %v1_11eb8 to i8
  br i1 %v7_11ec0, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_11ea8
  %v9_11ec0 = add i32 %v3_11eb0, 55
  %extract.t20 = trunc i32 %v9_11ec0 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_11ea8, %bb36
  %v0_11ec8.off0 = phi i8 [ %extract.t, %dec_label_pc_11ea8 ], [ %extract.t20, %bb36 ]
  %v0_11ec4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11ec4, i32* @r0, align 4
  %v2_11ec8 = load i32, i32* %r7.global-to-local, align 4
  %v3_11ec8 = inttoptr i32 %v2_11ec8 to i8*
  store i8 %v0_11ec8.off0, i8* %v3_11ec8, align 1
  %v4_11ec8 = load i32, i32* %r7.global-to-local, align 4
  %v5_11ec8 = add i32 %v4_11ec8, -1
  store i32 %v5_11ec8, i32* %r7.global-to-local, align 4
  %v0_11ecc = call i32 @function_11f58()
  store i32 %v0_11ecc, i32* %r0.global-to-local, align 4
  store i32 %v0_11ecc, i32* %r4.global-to-local, align 4
  %v2_11ed0 = icmp eq i32 %v0_11ecc, 0
  store i1 %v2_11ed0, i1* %cpsr_z.global-to-local, align 1
  %v0_11ed4 = load i32, i32* %r6.global-to-local, align 4
  %v1_11ed4 = add i32 %v0_11ed4, -1
  store i32 %v1_11ed4, i32* %r6.global-to-local, align 4
  br i1 %v2_11ed0, label %dec_label_pc_11edc, label %dec_label_pc_11ea8

dec_label_pc_11edc:                               ; preds = %bb37
  %v0_11edc = load i32, i32* %sl.global-to-local, align 4
  %v2_11edc = icmp eq i32 %v0_11edc, 0
  store i1 %v2_11edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11edc, label %bb38, label %dec_label_pc_11f44

bb38:                                             ; preds = %dec_label_pc_11edc
  store i32 %v0_11ed4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11ee8

dec_label_pc_11ee8:                               ; preds = %bb38, %dec_label_pc_11f44
  %v1_11ef4 = phi i32 [ %v0_11ed4, %bb38 ], [ %v1_11eec.pre, %dec_label_pc_11f44 ]
  %v2_11ee8 = ptrtoint i32* %stack_var_-62 to i32
  %v2_11eec = add i32 %v1_11ef4, %v2_11ee8
  %v3_11eec = inttoptr i32 %v2_11eec to i8*
  %v4_11eec = load i8, i8* %v3_11eec, align 1
  %v6_11eec = zext i8 %v4_11eec to i32
  %v2_11ef0 = icmp eq i8 %v4_11eec, 0
  store i1 %v2_11ef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11eec, i32* %r1.global-to-local, align 4
  br i1 %v2_11ef0, label %dec_label_pc_11f18, label %dec_label_pc_11efc

dec_label_pc_11efc:                               ; preds = %dec_label_pc_11ee8
  br label %dec_label_pc_11f00

dec_label_pc_11f00:                               ; preds = %dec_label_pc_11f00, %dec_label_pc_11efc
  %v0_11f00 = phi i32 [ %v1_11f00, %dec_label_pc_11f00 ], [ 0, %dec_label_pc_11efc ]
  %v1_11f00 = add i32 %v0_11f00, 1
  store i32 %v1_11f00, i32* @r2, align 4
  %v2_11f04 = add i32 %v1_11f00, %v2_11eec
  %v3_11f04 = inttoptr i32 %v2_11f04 to i8*
  %v4_11f04 = load i8, i8* %v3_11f04, align 1
  %v2_11f08 = icmp eq i8 %v4_11f04, 0
  store i1 %v2_11f08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f08, label %dec_label_pc_11f10, label %dec_label_pc_11f00

dec_label_pc_11f10:                               ; preds = %dec_label_pc_11f00
  %v7_11f10 = icmp eq i32 %v0_11f00, -2
  store i1 %v7_11f10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f10, label %dec_label_pc_11f34, label %dec_label_pc_11f18

dec_label_pc_11f18:                               ; preds = %dec_label_pc_11f10, %dec_label_pc_11ee8
  %v0_11f2017 = phi i32 [ %v1_11f00, %dec_label_pc_11f10 ], [ %v6_11eec, %dec_label_pc_11ee8 ]
  store i32 %v2_11eec, i32* %r0.global-to-local, align 4
  %v0_11f1c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11f1c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f20

dec_label_pc_11f20:                               ; preds = %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge, %dec_label_pc_11f18
  %v2_11f2c = phi i32 [ %v5_11f2c, %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge ], [ %v0_11f1c, %dec_label_pc_11f18 ]
  %v0_11f24 = phi i32 [ %v0_11f24.pre, %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge ], [ %v2_11eec, %dec_label_pc_11f18 ]
  %v0_11f20 = phi i32 [ %v0_11f20.pre, %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge ], [ %v0_11f2017, %dec_label_pc_11f18 ]
  %v1_11f20 = add i32 %v0_11f20, -1
  store i32 %v1_11f20, i32* @r2, align 4
  %v1_11f24 = inttoptr i32 %v0_11f24 to i8*
  %v2_11f24 = load i8, i8* %v1_11f24, align 1
  %v5_11f24 = add i32 %v0_11f24, 1
  store i32 %v5_11f24, i32* %r0.global-to-local, align 4
  %v3_11f28 = icmp eq i32 %v0_11f20, 0
  store i1 %v3_11f28, i1* %cpsr_z.global-to-local, align 1
  %v3_11f2c = inttoptr i32 %v2_11f2c to i8*
  store i8 %v2_11f24, i8* %v3_11f2c, align 1
  %v4_11f2c = load i32, i32* %r1.global-to-local, align 4
  %v5_11f2c = add i32 %v4_11f2c, 1
  store i32 %v5_11f2c, i32* %r1.global-to-local, align 4
  br i1 %v3_11f28, label %dec_label_pc_11f34, label %dec_label_pc_11f20.dec_label_pc_11f20_crit_edge

dec_label_pc_11f20.dec_label_pc_11f20_crit_edge:  ; preds = %dec_label_pc_11f20
  %v0_11f20.pre = load i32, i32* @r2, align 4
  %v0_11f24.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f20

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11f20, %dec_label_pc_11f10, %.thread1, %dec_label_pc_11e40
  %v0_11f34 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11f34, i32* %r0.global-to-local, align 4
  %v2_11f3c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11f3c, i32* @r4, align 4
  ret i32 %v0_11f34

dec_label_pc_11f40:                               ; preds = %dec_label_pc_11e90
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11f44

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11edc, %dec_label_pc_11f40
  %v1_11f48 = phi i32 [ %v1_11ed4, %dec_label_pc_11edc ], [ 32, %dec_label_pc_11f40 ]
  %v2_11f48 = add i32 %v1_11f48, %v22_11e40
  %v3_11f50 = add i32 %v2_11f48, -34
  %v4_11f50 = inttoptr i32 %v3_11f50 to i8*
  store i8 45, i8* %v4_11f50, align 1
  %v1_11eec.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11ee8

; uselistorder directives
  uselistorder i32 %v5_11f2c, { 1, 0 }
  uselistorder i1 %v3_11f28, { 1, 0 }
  uselistorder i32 %v0_11f24, { 1, 0 }
  uselistorder i1 %v7_11f10, { 1, 0 }
  uselistorder i32 %v1_11f00, { 0, 1, 3, 2 }
  uselistorder i32 %v2_11eec, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11ecc, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11eb0, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_11e54, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11e44, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder label %dec_label_pc_11f44, { 1, 0 }
  uselistorder label %dec_label_pc_11ee8, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_11e68, { 2, 1, 0 }
}

define i32 @function_11f58() local_unnamed_addr {
dec_label_pc_11f58:
  %v0_11f58 = load i32, i32* @r1, align 4
  %v1_11f58 = add i32 %v0_11f58, -1
  store i32 %v1_11f58, i32* @r2, align 4
  %v7_11f58 = icmp eq i32 %v0_11f58, 1
  br i1 %v7_11f58, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_11f58
  %v2_11f5c = load i32, i32* @r0, align 4
  ret i32 %v2_11f5c

bb82:                                             ; preds = %dec_label_pc_11f58
  %v2_11f58 = icmp eq i32 %v0_11f58, 0
  br i1 %v2_11f58, label %dec_label_pc_12040, label %dec_label_pc_11f64

dec_label_pc_11f64:                               ; preds = %bb82
  %v0_11f64 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11f64, %v0_11f58
  br i1 %tmp, label %dec_label_pc_11f6c, label %dec_label_pc_11ff8

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11f64
  %v2_11f6c = and i32 %v1_11f58, %v0_11f58
  %v4_11f6c = icmp eq i32 %v2_11f6c, 0
  br i1 %v4_11f6c, label %dec_label_pc_12004, label %dec_label_pc_11f74

dec_label_pc_11f74:                               ; preds = %dec_label_pc_11f6c
  %v3_11f74 = icmp ult i32 %v0_11f58, 536870912
  br i1 %v3_11f74, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11f74
  %v4_11f78 = mul i32 %v0_11f58, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11f74, %.thread
  %v0_11f98.pr36.ph = phi i32 [ %v4_11f78, %.thread ], [ %v0_11f58, %dec_label_pc_11f74 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11f74 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_11f98.pr36 = phi i32 [ %v4_11f8c, %bb85 ], [ %v0_11f98.pr36.ph, %.preheader.preheader ]
  %v1_11f90 = phi i32 [ %v4_11f90, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_11f84 = icmp ugt i32 %v0_11f98.pr36, 268435455
  br i1 %v2_11f84, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11f98thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_11f88 = icmp ult i32 %v0_11f98.pr36, %v0_11f64
  br i1 %v4_11f88, label %bb84, label %dec_label_pc_11f98thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_11f8c = and i32 %v0_11f98.pr36, 268435456
  %v3_11f8c = icmp eq i32 %v2_11f8c, 0
  %v4_11f8c = mul i32 %v0_11f98.pr36, 16
  br i1 %v3_11f8c, label %bb85, label %dec_label_pc_11f98.loopexit

bb85:                                             ; preds = %bb84
  %v2_11f90 = and i32 %v1_11f90, 268435456
  %v3_11f90 = icmp eq i32 %v2_11f90, 0
  %v4_11f90 = mul i32 %v1_11f90, 16
  br i1 %v3_11f90, label %.preheader, label %dec_label_pc_11f98thread-pre-split.loopexit.loopexit

dec_label_pc_11f98thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_11fa448.ph = phi i32 [ %v1_11f90, %bb83 ], [ %v4_11f90, %bb85 ]
  %v0_11f98.pr38.ph = phi i32 [ %v0_11f98.pr36, %bb83 ], [ %v4_11f8c, %bb85 ]
  br label %dec_label_pc_11f98thread-pre-split.loopexit

dec_label_pc_11f98thread-pre-split.loopexit:      ; preds = %dec_label_pc_11f98thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11fa448 = phi i32 [ %v1_11f90, %.thread2 ], [ %v1_11fa448.ph, %dec_label_pc_11f98thread-pre-split.loopexit.loopexit ]
  %v0_11f98.pr38 = phi i32 [ %v0_11f98.pr36, %.thread2 ], [ %v0_11f98.pr38.ph, %dec_label_pc_11f98thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11f98thread-pre-split

dec_label_pc_11f98thread-pre-split:               ; preds = %dec_label_pc_11f98thread-pre-split.loopexit, %bb87
  %v1_11fa446 = phi i32 [ %v1_11fa448, %dec_label_pc_11f98thread-pre-split.loopexit ], [ %v3_11fa4, %bb87 ]
  %v0_11f98.pr = phi i32 [ %v0_11f98.pr38, %dec_label_pc_11f98thread-pre-split.loopexit ], [ %v3_11fa0, %bb87 ]
  br label %dec_label_pc_11f98

dec_label_pc_11f98.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_11f98

dec_label_pc_11f98:                               ; preds = %dec_label_pc_11f98.loopexit, %dec_label_pc_11f98thread-pre-split
  %v1_11fa4 = phi i32 [ %v1_11fa446, %dec_label_pc_11f98thread-pre-split ], [ %v1_11f90, %dec_label_pc_11f98.loopexit ]
  %v1_11fa0 = phi i32 [ %v0_11f98.pr, %dec_label_pc_11f98thread-pre-split ], [ %v4_11f8c, %dec_label_pc_11f98.loopexit ]
  %v2_11f98 = icmp slt i32 %v1_11fa0, 0
  br i1 %v2_11f98, label %dec_label_pc_11fac, label %bb86

bb86:                                             ; preds = %dec_label_pc_11f98
  %v4_11f9c = icmp ult i32 %v1_11fa0, %v0_11f64
  br i1 %v4_11f9c, label %bb87, label %dec_label_pc_11fac

bb87:                                             ; preds = %bb86
  %v3_11fa0 = mul i32 %v1_11fa0, 2
  %v2_11fa4 = icmp slt i32 %v1_11fa4, 0
  %v3_11fa4 = mul i32 %v1_11fa4, 2
  br i1 %v2_11fa4, label %dec_label_pc_11fac, label %dec_label_pc_11f98thread-pre-split

dec_label_pc_11fac:                               ; preds = %bb86, %dec_label_pc_11f98, %bb87
  %v2_11fb859 = phi i32 [ %v3_11fa4, %bb87 ], [ %v1_11fa4, %bb86 ], [ %v1_11fa4, %dec_label_pc_11f98 ]
  %v1_11fb051 = phi i32 [ %v3_11fa0, %bb87 ], [ %v1_11fa0, %bb86 ], [ %v1_11fa0, %dec_label_pc_11f98 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_11fb0

dec_label_pc_11fb0:                               ; preds = %.thread11, %dec_label_pc_11fac
  %v1_11fe4 = phi i32 [ %v4_11fe4, %.thread11 ], [ %v2_11fb859, %dec_label_pc_11fac ]
  %v1_11fb8 = phi i32 [ %v0_11ff0, %.thread11 ], [ 0, %dec_label_pc_11fac ]
  %v1_11fe8 = phi i32 [ %v4_11fe8, %.thread11 ], [ %v1_11fb051, %dec_label_pc_11fac ]
  %v1_11fb4 = phi i32 [ %v0_11fe0, %.thread11 ], [ %v0_11f64, %dec_label_pc_11fac ]
  %v3_11fb0 = icmp ult i32 %v1_11fb4, %v1_11fe8
  br i1 %v3_11fb0, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_11fb0
  %v3_11fb4 = sub i32 %v1_11fb4, %v1_11fe8
  %v3_11fb8 = or i32 %v1_11fb8, %v1_11fe4
  store i32 %v3_11fb8, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11fb0, %bb88
  %v1_11fc0 = phi i32 [ %v1_11fb4, %dec_label_pc_11fb0 ], [ %v3_11fb4, %bb88 ]
  %v1_11fc4 = phi i32 [ %v1_11fb8, %dec_label_pc_11fb0 ], [ %v3_11fb8, %bb88 ]
  %v4_11fbc = udiv i32 %v1_11fe8, 2
  %v6_11fbc = icmp ult i32 %v1_11fc0, %v4_11fbc
  br i1 %v6_11fbc, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_11fc0 = urem i32 %v1_11fe8, 2
  %v4_11fc0 = icmp eq i32 %v3_11fc0, 0
  %v6_11fc0 = sub i32 %v1_11fc0, %v4_11fbc
  br i1 %v4_11fc0, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11fc4 = udiv i32 %v1_11fe4, 2
  %v6_11fc4 = or i32 %v1_11fc4, %v5_11fc4
  store i32 %v6_11fc4, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_11fcc = phi i32 [ %v6_11fc0, %bb89 ], [ %v1_11fc0, %.thread7 ], [ %v6_11fc0, %bb90 ]
  %v1_11fd0 = phi i32 [ %v1_11fc4, %bb89 ], [ %v1_11fc4, %.thread7 ], [ %v6_11fc4, %bb90 ]
  %v4_11fc8 = udiv i32 %v1_11fe8, 4
  %v6_11fc8 = icmp ult i32 %v1_11fcc, %v4_11fc8
  br i1 %v6_11fc8, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_11fcc = and i32 %v1_11fe8, 2
  %v4_11fcc = icmp eq i32 %v3_11fcc, 0
  %v6_11fcc = sub i32 %v1_11fcc, %v4_11fc8
  br i1 %v4_11fcc, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11fd0 = udiv i32 %v1_11fe4, 4
  %v6_11fd0 = or i32 %v1_11fd0, %v5_11fd0
  store i32 %v6_11fd0, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_11fd8 = phi i32 [ %v6_11fcc, %bb91 ], [ %v1_11fcc, %.thread8 ], [ %v6_11fcc, %bb92 ]
  %v1_11fdc = phi i32 [ %v1_11fd0, %bb91 ], [ %v1_11fd0, %.thread8 ], [ %v6_11fd0, %bb92 ]
  %v4_11fd4 = udiv i32 %v1_11fe8, 8
  %v6_11fd4 = icmp ult i32 %v1_11fd8, %v4_11fd4
  br i1 %v6_11fd4, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_11fd8 = and i32 %v1_11fe8, 4
  %v4_11fd8 = icmp eq i32 %v3_11fd8, 0
  %v6_11fd8 = sub i32 %v1_11fd8, %v4_11fd4
  br i1 %v4_11fd8, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_11fdc = udiv i32 %v1_11fe4, 8
  %v6_11fdc = or i32 %v1_11fdc, %v5_11fdc
  store i32 %v6_11fdc, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_11ff0 = phi i32 [ %v1_11fdc, %bb93 ], [ %v1_11fdc, %.thread9 ], [ %v6_11fdc, %bb94 ]
  %v0_11fe0 = phi i32 [ %v6_11fd8, %bb93 ], [ %v1_11fd8, %.thread9 ], [ %v6_11fd8, %bb94 ]
  %v2_11fe0 = icmp eq i32 %v0_11fe0, 0
  br i1 %v2_11fe0, label %dec_label_pc_11ff0, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_11fe4, 16
  br i1 %tmp142, label %dec_label_pc_11ff0, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_11fe4 = udiv i32 %v1_11fe4, 16
  %v4_11fe8 = udiv i32 %v1_11fe8, 16
  br label %dec_label_pc_11fb0

dec_label_pc_11ff0:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_11ff0

dec_label_pc_11ff8:                               ; preds = %dec_label_pc_11f64
  %v9_11f64 = icmp eq i32 %v0_11f64, %v0_11f58
  %. = zext i1 %v9_11f64 to i32
  ret i32 %.

dec_label_pc_12004:                               ; preds = %dec_label_pc_11f6c
  %v2_12004 = icmp ugt i32 %v0_11f58, 65535
  br i1 %v2_12004, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_12004
  %v2_12008 = and i32 %v0_11f58, 32768
  %v3_12008 = icmp eq i32 %v2_12008, 0
  %v4_12008 = udiv i32 %v0_11f58, 65536
  br i1 %v3_12008, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_12004
  %v0_1201465 = phi i32 [ %v0_11f58, %dec_label_pc_12004 ], [ %v4_12008, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_12018 = phi i32 [ %v0_1201465, %.thread16 ], [ %v4_12008, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_12014 = icmp ugt i32 %v1_12018, 255
  br i1 %v2_12014, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_12018 = and i32 %v1_12018, 128
  %v3_12018 = icmp eq i32 %v2_12018, 0
  %v4_12018 = udiv i32 %v1_12018, 256
  br i1 %v3_12018, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1201c = or i32 %storemerge, 8
  store i32 %v2_1201c, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_12028 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_1201c, %bb102 ]
  %v1_12024 = phi i32 [ %v1_12018, %bb100 ], [ %v4_12018, %bb101 ], [ %v4_12018, %bb102 ]
  %v2_12020 = icmp ugt i32 %v1_12024, 15
  br i1 %v2_12020, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_12024 = and i32 %v1_12024, 8
  %v3_12024 = icmp eq i32 %v2_12024, 0
  %v4_12024 = udiv i32 %v1_12024, 16
  br i1 %v3_12024, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_12028 = add nsw i32 %v1_12028, 4
  store i32 %v2_12028, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_12030 = phi i32 [ %v1_12028, %.thread17 ], [ %v1_12028, %bb103 ], [ %v2_12028, %bb104 ]
  %v5_12034 = phi i32 [ %v1_12024, %.thread17 ], [ %v4_12024, %bb103 ], [ %v4_12024, %bb104 ]
  %v2_1202c = icmp ugt i32 %v5_12034, 3
  %v7_1202c = icmp eq i32 %v5_12034, 4
  %v2_12030 = xor i1 %v7_1202c, true
  %v3_12030 = and i1 %v2_1202c, %v2_12030
  br i1 %v3_12030, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_12030 = add nsw i32 %v4_12030, 3
  store i32 %v5_12030, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_12034 = phi i32 [ %v4_12030, %.thread18 ], [ %v5_12030, %bb105 ]
  %v2_12034 = xor i1 %v2_1202c, true
  %v3_12034 = or i1 %v7_1202c, %v2_12034
  br i1 %v3_12034, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_12034 = udiv i32 %v5_12034, 2
  %v9_12034 = add i32 %v4_12034, %v8_12034
  store i32 %v9_12034, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_12038 = phi i32 [ %v4_12034, %bb106 ], [ %v9_12034, %bb107 ]
  %v6_12038 = lshr i32 %v0_11f64, %v1_12038
  ret i32 %v6_12038

dec_label_pc_12040:                               ; preds = %bb82
  %v0_12040 = load i32, i32* @lr, align 4
  %v0_12044 = call i32 @function_12218()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_12040)
  %v6_12050 = load i32, i32* @r1, align 4
  %v9_12050 = load i32, i32* @lr, align 4
  %v0_12054 = call i32 @function_11f58()
  store i32 %v6_12050, i32* @r2, align 4
  store i32 %v9_12050, i32* @lr, align 4
  ret i32 %v0_12054

; uselistorder directives
  uselistorder i32 %v4_12034, { 1, 0 }
  uselistorder i1 %v7_1202c, { 1, 0 }
  uselistorder i32 %v4_12024, { 1, 0 }
  uselistorder i32 %v1_12024, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1201c, { 1, 0 }
  uselistorder i32 %v4_12018, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12018, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12008, { 1, 0 }
  uselistorder i32 %v0_11fe0, { 1, 0 }
  uselistorder i32 %v4_11fd4, { 1, 0 }
  uselistorder i32 %v1_11fdc, { 1, 2, 0 }
  uselistorder i32 %v4_11fc8, { 1, 0 }
  uselistorder i32 %v1_11fd0, { 1, 2, 0 }
  uselistorder i32 %v4_11fbc, { 1, 0 }
  uselistorder i32 %v1_11fc4, { 1, 2, 0 }
  uselistorder i32 %v1_11fe8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11fb8, { 1, 0 }
  uselistorder i32 %v1_11fe4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11fa4, { 1, 0 }
  uselistorder i32 %v3_11fa0, { 1, 0 }
  uselistorder i32 %v1_11fa0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11fa4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11f90, { 1, 0 }
  uselistorder i32 %v4_11f8c, { 2, 1, 0 }
  uselistorder i32 %v1_11f90, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11f98.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11f64, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_11f58, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 91, 41, 42, 1, 2, 11, 43, 21, 20, 24, 44, 23, 45, 13, 12, 3, 26, 46, 25, 47, 49, 14, 48, 4, 50, 51, 27, 52, 28, 53, 0, 54, 55, 29, 56, 57, 59, 15, 58, 22, 60, 61, 62, 63, 30, 64, 31, 65, 67, 16, 66, 5, 68, 69, 70, 71, 32, 72, 33, 73, 34, 74, 75, 17, 6, 76, 35, 77, 36, 78, 80, 18, 79, 7, 8, 81, 82, 38, 83, 37, 84, 86, 19, 85, 9, 10, 87, 88, 40, 89, 39, 90 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_11ff0, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11fac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11f98thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_12068(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12068:
  store i32 %arg1, i32* @r0, align 4
  %v1_12068 = add i32 %arg2, -1
  %v2_12068 = icmp eq i32 %arg2, 0
  br i1 %v2_12068, label %dec_label_pc_12124, label %dec_label_pc_12070

dec_label_pc_12070:                               ; preds = %dec_label_pc_12068
  %v7_12068 = icmp eq i32 %arg2, 1
  br i1 %v7_12068, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_12070
  %v1_12070 = load i32, i32* @r0, align 4
  %v10_12070 = icmp eq i32 %v1_12070, %arg2
  br i1 %v10_12070, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_12070, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_12070 = icmp ult i32 %v1_12070, %arg2
  br i1 %v4_12070, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_12078 = and i32 %v1_12068, %arg2
  %v8_12078 = icmp eq i32 %v6_12078, 0
  br i1 %v8_12078, label %.thread67, label %dec_label_pc_12088.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_1207c = phi i32 [ %v1_12070, %bb75 ], [ 0, %.thread65 ]
  %v3_1207c = and i32 %v1_1207c, %v1_12068
  br label %bb76

dec_label_pc_12088.preheader:                     ; preds = %bb75
  %v2_1208899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1208899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_12118, %bb74, %bb89, %bb84, %dec_label_pc_120e8, %.thread67
  %v5_12080 = phi i32 [ %v1_12070, %bb74 ], [ %v3_1207c, %.thread67 ], [ %v1_120c4.v6_120c4.v6_120cc.v6_120d4, %dec_label_pc_120e8 ], [ 0, %bb84 ], [ %v1_1211c, %dec_label_pc_12118 ], [ %v2_12118, %bb89 ]
  ret i32 %v5_12080

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_12088.preheader
  %v0_1209c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_12088.preheader ], [ %v4_12090, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12088.preheader ], [ %v2_1209411, %.thread1.thread9 ]
  br label %dec_label_pc_1209cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_12088.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1209411, %.thread1.thread9 ], [ 0, %dec_label_pc_12088.preheader ]
  %v0_1209c.pr33100 = phi i32 [ %v4_12090, %.thread1.thread9 ], [ %arg2, %dec_label_pc_12088.preheader ]
  %v4_1208c = icmp ult i32 %v0_1209c.pr33100, %v1_12070
  br i1 %v4_1208c, label %bb78, label %dec_label_pc_1209cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_12090 = and i32 %v0_1209c.pr33100, 268435456
  %v3_12090 = icmp eq i32 %v2_12090, 0
  %v4_12090 = mul i32 %v0_1209c.pr33100, 16
  br i1 %v3_12090, label %.thread1.thread9, label %dec_label_pc_1209c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1209411 = add i32 %storemerge101, 4
  %v2_12088 = icmp ugt i32 %v4_12090, 268435455
  br i1 %v2_12088, label %.thread, label %bb77

dec_label_pc_1209cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_1209cthread-pre-split.loopexit

dec_label_pc_1209cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1209cthread-pre-split.loopexit.loopexit, %.thread
  %v0_1209c.pr3398 = phi i32 [ %v0_1209c.pr33.lcssa, %.thread ], [ %v0_1209c.pr33100, %dec_label_pc_1209cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_1209cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1209cthread-pre-split

dec_label_pc_1209cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1209cthread-pre-split.loopexit
  %v1_120a839 = phi i32 [ %storemerge95, %dec_label_pc_1209cthread-pre-split.loopexit ], [ %v2_120a8, %.thread4 ]
  %v0_1209c.pr = phi i32 [ %v0_1209c.pr3398, %dec_label_pc_1209cthread-pre-split.loopexit ], [ %v3_120a4, %.thread4 ]
  br label %dec_label_pc_1209c

dec_label_pc_1209c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_1209c

dec_label_pc_1209c:                               ; preds = %dec_label_pc_1209c.loopexit, %dec_label_pc_1209cthread-pre-split
  %v0_120b0.pr = phi i32 [ %v1_120a839, %dec_label_pc_1209cthread-pre-split ], [ %storemerge101, %dec_label_pc_1209c.loopexit ]
  %v1_120a4 = phi i32 [ %v0_1209c.pr, %dec_label_pc_1209cthread-pre-split ], [ %v4_12090, %dec_label_pc_1209c.loopexit ]
  %v2_1209c = icmp slt i32 %v1_120a4, 0
  br i1 %v2_1209c, label %dec_label_pc_120b0, label %bb79

bb79:                                             ; preds = %dec_label_pc_1209c
  %v4_120a0 = icmp ult i32 %v1_120a4, %v1_12070
  br i1 %v4_120a0, label %.thread4, label %dec_label_pc_120b0

.thread4:                                         ; preds = %bb79
  %v3_120a4 = mul i32 %v1_120a4, 2
  %v2_120a8 = add i32 %v0_120b0.pr, 1
  br label %dec_label_pc_1209cthread-pre-split

dec_label_pc_120b0:                               ; preds = %bb79, %dec_label_pc_1209c
  %v2_120b0 = add i32 %v0_120b0.pr, -3
  %v5_120b4 = icmp slt i32 %v0_120b0.pr, 3
  br i1 %v5_120b4, label %dec_label_pc_120f4, label %dec_label_pc_120b8

dec_label_pc_120b8:                               ; preds = %dec_label_pc_120b0, %bb83
  %v6_120e0 = phi i32 [ %v0_120e8, %bb83 ], [ %v2_120b0, %dec_label_pc_120b0 ]
  %v1_120bc = phi i32 [ %v1_120c4.v6_120c4.v6_120cc.v6_120d4, %bb83 ], [ %v1_12070, %dec_label_pc_120b0 ]
  %v3_120dc12 = phi i32 [ %v3_120dc, %bb83 ], [ %v1_120a4, %dec_label_pc_120b0 ]
  %v3_120b8 = icmp ult i32 %v1_120bc, %v3_120dc12
  %v3_120bc = select i1 %v3_120b8, i32 0, i32 %v3_120dc12
  %v1_120c4 = sub i32 %v1_120bc, %v3_120bc
  %v4_120c0 = udiv i32 %v3_120dc12, 2
  %v6_120c0 = icmp ult i32 %v1_120c4, %v4_120c0
  %v6_120c4 = select i1 %v6_120c0, i32 0, i32 %v4_120c0
  %v1_120c4.v6_120c4 = sub i32 %v1_120c4, %v6_120c4
  %.demorgan = and i1 %v3_120b8, %v6_120c0
  %v4_120c8 = udiv i32 %v3_120dc12, 4
  %v6_120c8 = icmp ult i32 %v1_120c4.v6_120c4, %v4_120c8
  %v6_120cc = select i1 %v6_120c8, i32 0, i32 %v4_120c8
  %v1_120c4.v6_120c4.v6_120cc = sub i32 %v1_120c4.v6_120c4, %v6_120cc
  %.demorgan71 = and i1 %.demorgan, %v6_120c8
  %v4_120d0 = udiv i32 %v3_120dc12, 8
  %v6_120d0 = icmp ult i32 %v1_120c4.v6_120c4.v6_120cc, %v4_120d0
  %v6_120d4 = select i1 %v6_120d0, i32 0, i32 %v4_120d0
  %v1_120c4.v6_120c4.v6_120cc.v6_120d4 = sub i32 %v1_120c4.v6_120c4.v6_120cc, %v6_120d4
  %.demorgan72 = and i1 %.demorgan71, %v6_120d0
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_120b8
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_120b8, %bb80
  %v2_120d8 = add i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, -1
  %v4_120d8 = sub i32 0, %v1_120c4.v6_120c4.v6_120cc.v6_120d4
  %v5_120d8 = and i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, %v4_120d8
  %v3_120dc = udiv i32 %v3_120dc12, 16
  %v5_120e0 = icmp slt i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, 1
  br i1 %v5_120e0, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_120e0 = add i32 %v6_120e0, -4
  %v9_120e0 = sub i32 3, %v6_120e0
  %v10_120e0 = and i32 %v9_120e0, %v6_120e0
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_120e8 = phi i32 [ %v6_120e0, %bb81 ], [ %v7_120e0, %bb82 ]
  %v0_120e415.in = phi i32 [ %v2_120d8, %bb81 ], [ %v7_120e0, %bb82 ]
  %v1_120e414.in = phi i32 [ %v5_120d8, %bb81 ], [ %v10_120e0, %bb82 ]
  %v1_120e414 = icmp slt i32 %v1_120e414.in, 0
  %v0_120e415 = icmp slt i32 %v0_120e415.in, 0
  %v2_120e4 = xor i1 %v0_120e415, %v1_120e414
  br i1 %v2_120e4, label %dec_label_pc_120e8, label %dec_label_pc_120b8

dec_label_pc_120e8:                               ; preds = %bb83
  %v1_120e8 = urem i32 %v0_120e8, 4
  %v2_120e8 = icmp eq i32 %v1_120e8, 0
  br i1 %v2_120e8, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_120e8
  %v3_120ec = icmp eq i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, 0
  br i1 %v3_120ec, label %bb76, label %dec_label_pc_120f4

dec_label_pc_120f4:                               ; preds = %bb84, %dec_label_pc_120b0
  %v0_12108 = phi i32 [ %v3_120dc, %bb84 ], [ %v1_120a4, %dec_label_pc_120b0 ]
  %v1_12104 = phi i32 [ %v1_120c4.v6_120c4.v6_120cc.v6_120d4, %bb84 ], [ %v1_12070, %dec_label_pc_120b0 ]
  %v0_120f4 = phi i32 [ %v0_120e8, %bb84 ], [ %v2_120b0, %dec_label_pc_120b0 ]
  %v5_120f8 = icmp slt i32 %v0_120f4, -2
  br i1 %v5_120f8, label %dec_label_pc_12118, label %dec_label_pc_120fc

dec_label_pc_120fc:                               ; preds = %dec_label_pc_120f4
  %v8_120f4 = icmp eq i32 %v0_120f4, -2
  br i1 %v8_120f4, label %dec_label_pc_1210c, label %dec_label_pc_12100

dec_label_pc_12100:                               ; preds = %dec_label_pc_120fc
  %v3_12100 = icmp ult i32 %v1_12104, %v0_12108
  br i1 %v3_12100, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_12100
  %v2_12100 = sub i32 %v1_12104, %v0_12108
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_12100, %bb85
  %v0_1210c52 = phi i32 [ %v1_12104, %dec_label_pc_12100 ], [ %v2_12100, %bb85 ]
  %v3_12108 = udiv i32 %v0_12108, 2
  br label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_120fc, %bb86
  %v0_12114 = phi i32 [ %v0_12108, %dec_label_pc_120fc ], [ %v3_12108, %bb86 ]
  %v1_12110 = phi i32 [ %v1_12104, %dec_label_pc_120fc ], [ %v0_1210c52, %bb86 ]
  %v3_1210c = icmp ult i32 %v1_12110, %v0_12114
  br i1 %v3_1210c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1210c
  %v2_1210c = sub i32 %v1_12110, %v0_12114
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1210c, %bb87
  %v0_1211855 = phi i32 [ %v1_12110, %dec_label_pc_1210c ], [ %v2_1210c, %bb87 ]
  %v3_12114 = udiv i32 %v0_12114, 2
  br label %dec_label_pc_12118

dec_label_pc_12118:                               ; preds = %dec_label_pc_120f4, %bb88
  %v2_1211c = phi i32 [ %v0_12108, %dec_label_pc_120f4 ], [ %v3_12114, %bb88 ]
  %v1_1211c = phi i32 [ %v1_12104, %dec_label_pc_120f4 ], [ %v0_1211855, %bb88 ]
  %v3_12118 = icmp ult i32 %v1_1211c, %v2_1211c
  br i1 %v3_12118, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_12118
  %v2_12118 = sub i32 %v1_1211c, %v2_1211c
  br label %bb76

dec_label_pc_12124:                               ; preds = %dec_label_pc_12068
  %v0_12124 = load i32, i32* @lr, align 4
  %v0_12128 = call i32 @function_12218()
  call void @__pseudo_branch(i32 %v0_12124)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1211c, { 1, 2, 0 }
  uselistorder i32 %v0_12108, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_120e8, { 1, 0, 2 }
  uselistorder i32 %v7_120e0, { 1, 0 }
  uselistorder i32 %v3_120dc, { 1, 0 }
  uselistorder i32 %v1_120c4.v6_120c4.v6_120cc.v6_120d4, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_120d0, { 1, 0 }
  uselistorder i32 %v4_120c8, { 1, 0 }
  uselistorder i32 %v4_120c0, { 1, 0 }
  uselistorder i32 %v6_120e0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_120b0, { 1, 0 }
  uselistorder i32 %v1_120a4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_12090, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1209c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12070, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_12118, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1210c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_120b8, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_12134(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12134:
  store i32 %arg1, i32* @r0, align 4
  %v2_12134 = icmp eq i32 %arg2, 0
  br i1 %v2_12134, label %dec_label_pc_12208, label %dec_label_pc_1213c

dec_label_pc_1213c:                               ; preds = %dec_label_pc_12134
  %v1_12134 = icmp slt i32 %arg2, 0
  br i1 %v1_12134, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_1213c
  %v2_1213c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_1213c, %bb
  %v4_12154 = phi i32 [ %arg2, %dec_label_pc_1213c ], [ %v2_1213c, %bb ]
  %v0_12140 = load i32, i32* @r0, align 4
  %v1_12140 = icmp slt i32 %v0_12140, 0
  br i1 %v1_12140, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_12144 = sub i32 0, %v0_12140
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_1214c = phi i32 [ %v0_12140, %bb79 ], [ %v2_12144, %bb80 ]
  %v1_12148 = add i32 %v4_12154, -1
  %v7_12148 = icmp eq i32 %v4_12154, 1
  br i1 %v7_12148, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_1214c = icmp eq i32 %v1_1214c, %v4_12154
  br i1 %v10_1214c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_1214c = icmp ult i32 %v1_1214c, %v4_12154
  br i1 %v4_1214c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_12154 = and i32 %v1_12148, %v4_12154
  %v8_12154 = icmp eq i32 %v6_12154, 0
  br i1 %v8_12154, label %.thread72, label %dec_label_pc_12164.preheader

dec_label_pc_12164.preheader:                     ; preds = %bb84
  %v2_12164109 = icmp ugt i32 %v4_12154, 268435455
  br i1 %v2_12164109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1215864 = phi i32 [ %v1_1214c, %bb84 ], [ 0, %.thread70 ]
  %v3_12158 = and i32 %v1_1215864, %v1_12148
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_12164.preheader
  %v0_12178.pr35.lcssa = phi i32 [ %v4_12154, %dec_label_pc_12164.preheader ], [ %v4_1216c, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12164.preheader ], [ %v2_121709, %.thread2.thread7 ]
  br label %dec_label_pc_12178thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_12164.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_121709, %.thread2.thread7 ], [ 0, %dec_label_pc_12164.preheader ]
  %v0_12178.pr35110 = phi i32 [ %v4_1216c, %.thread2.thread7 ], [ %v4_12154, %dec_label_pc_12164.preheader ]
  %v4_12168 = icmp ult i32 %v0_12178.pr35110, %v1_1214c
  br i1 %v4_12168, label %bb86, label %dec_label_pc_12178thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_1216c = and i32 %v0_12178.pr35110, 268435456
  %v3_1216c = icmp eq i32 %v2_1216c, 0
  %v4_1216c = mul i32 %v0_12178.pr35110, 16
  br i1 %v3_1216c, label %.thread2.thread7, label %dec_label_pc_12178.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_121709 = add i32 %storemerge111, 4
  %v2_12164 = icmp ugt i32 %v4_1216c, 268435455
  br i1 %v2_12164, label %.thread1, label %bb85

dec_label_pc_12178thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_12178thread-pre-split.loopexit

dec_label_pc_12178thread-pre-split.loopexit:      ; preds = %dec_label_pc_12178thread-pre-split.loopexit.loopexit, %.thread1
  %v0_12178.pr35108 = phi i32 [ %v0_12178.pr35.lcssa, %.thread1 ], [ %v0_12178.pr35110, %dec_label_pc_12178thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_12178thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12178thread-pre-split

dec_label_pc_12178thread-pre-split:               ; preds = %.thread4, %dec_label_pc_12178thread-pre-split.loopexit
  %v1_1218441 = phi i32 [ %storemerge105, %dec_label_pc_12178thread-pre-split.loopexit ], [ %v2_12184, %.thread4 ]
  %v2_1217c36 = phi i32 [ %v1_1214c, %dec_label_pc_12178thread-pre-split.loopexit ], [ %v2_1217c, %.thread4 ]
  %v0_12178.pr = phi i32 [ %v0_12178.pr35108, %dec_label_pc_12178thread-pre-split.loopexit ], [ %v3_12180, %.thread4 ]
  br label %dec_label_pc_12178

dec_label_pc_12178.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_12178

dec_label_pc_12178:                               ; preds = %dec_label_pc_12178.loopexit, %dec_label_pc_12178thread-pre-split
  %v0_1218c.pr = phi i32 [ %v1_1218441, %dec_label_pc_12178thread-pre-split ], [ %storemerge111, %dec_label_pc_12178.loopexit ]
  %v2_1217c = phi i32 [ %v2_1217c36, %dec_label_pc_12178thread-pre-split ], [ %v1_1214c, %dec_label_pc_12178.loopexit ]
  %v1_12180 = phi i32 [ %v0_12178.pr, %dec_label_pc_12178thread-pre-split ], [ %v4_1216c, %dec_label_pc_12178.loopexit ]
  %v2_12178 = icmp slt i32 %v1_12180, 0
  br i1 %v2_12178, label %dec_label_pc_1218c, label %bb87

bb87:                                             ; preds = %dec_label_pc_12178
  %v4_1217c = icmp ult i32 %v1_12180, %v2_1217c
  br i1 %v4_1217c, label %.thread4, label %dec_label_pc_1218c

.thread4:                                         ; preds = %bb87
  %v3_12180 = mul i32 %v1_12180, 2
  %v2_12184 = add i32 %v0_1218c.pr, 1
  br label %dec_label_pc_12178thread-pre-split

dec_label_pc_1218c:                               ; preds = %bb87, %dec_label_pc_12178
  %v2_1218c = add i32 %v0_1218c.pr, -3
  %v5_12190 = icmp slt i32 %v0_1218c.pr, 3
  br i1 %v5_12190, label %dec_label_pc_121d0, label %dec_label_pc_12194

dec_label_pc_12194:                               ; preds = %dec_label_pc_1218c, %bb91
  %v6_121bc = phi i32 [ %v0_121c4, %bb91 ], [ %v2_1218c, %dec_label_pc_1218c ]
  %v1_12198 = phi i32 [ %v1_121a0.v6_121a0.v6_121a8.v6_121b0, %bb91 ], [ %v2_1217c, %dec_label_pc_1218c ]
  %v3_121b810 = phi i32 [ %v3_121b8, %bb91 ], [ %v1_12180, %dec_label_pc_1218c ]
  %v3_12194 = icmp ult i32 %v1_12198, %v3_121b810
  %v3_12198 = select i1 %v3_12194, i32 0, i32 %v3_121b810
  %v1_121a0 = sub i32 %v1_12198, %v3_12198
  %v4_1219c = udiv i32 %v3_121b810, 2
  %v6_1219c = icmp ult i32 %v1_121a0, %v4_1219c
  %v6_121a0 = select i1 %v6_1219c, i32 0, i32 %v4_1219c
  %v1_121a0.v6_121a0 = sub i32 %v1_121a0, %v6_121a0
  %.demorgan = and i1 %v3_12194, %v6_1219c
  %v4_121a4 = udiv i32 %v3_121b810, 4
  %v6_121a4 = icmp ult i32 %v1_121a0.v6_121a0, %v4_121a4
  %v6_121a8 = select i1 %v6_121a4, i32 0, i32 %v4_121a4
  %v1_121a0.v6_121a0.v6_121a8 = sub i32 %v1_121a0.v6_121a0, %v6_121a8
  %.demorgan76 = and i1 %.demorgan, %v6_121a4
  %v4_121ac = udiv i32 %v3_121b810, 8
  %v6_121ac = icmp ult i32 %v1_121a0.v6_121a0.v6_121a8, %v4_121ac
  %v6_121b0 = select i1 %v6_121ac, i32 0, i32 %v4_121ac
  %v1_121a0.v6_121a0.v6_121a8.v6_121b0 = sub i32 %v1_121a0.v6_121a0.v6_121a8, %v6_121b0
  %.demorgan77 = and i1 %.demorgan76, %v6_121ac
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_12194
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_12194, %bb88
  %v2_121b4 = add i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, -1
  %v4_121b4 = sub i32 0, %v1_121a0.v6_121a0.v6_121a8.v6_121b0
  %v5_121b4 = and i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, %v4_121b4
  %v3_121b8 = udiv i32 %v3_121b810, 16
  %v5_121bc = icmp slt i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, 1
  br i1 %v5_121bc, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_121bc = add i32 %v6_121bc, -4
  %v9_121bc = sub i32 3, %v6_121bc
  %v10_121bc = and i32 %v9_121bc, %v6_121bc
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_121c4 = phi i32 [ %v6_121bc, %bb89 ], [ %v7_121bc, %bb90 ]
  %v0_121c013.in = phi i32 [ %v2_121b4, %bb89 ], [ %v7_121bc, %bb90 ]
  %v1_121c012.in = phi i32 [ %v5_121b4, %bb89 ], [ %v10_121bc, %bb90 ]
  %v1_121c012 = icmp slt i32 %v1_121c012.in, 0
  %v0_121c013 = icmp slt i32 %v0_121c013.in, 0
  %v2_121c0 = xor i1 %v0_121c013, %v1_121c012
  br i1 %v2_121c0, label %dec_label_pc_121c4, label %dec_label_pc_12194

dec_label_pc_121c4:                               ; preds = %bb91
  %v1_121c4 = urem i32 %v0_121c4, 4
  %v2_121c4 = icmp eq i32 %v1_121c4, 0
  br i1 %v2_121c4, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_121c4
  %v3_121c8 = icmp eq i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, 0
  br i1 %v3_121c8, label %.thread6, label %dec_label_pc_121d0

dec_label_pc_121d0:                               ; preds = %bb92, %dec_label_pc_1218c
  %v0_121e4 = phi i32 [ %v3_121b8, %bb92 ], [ %v1_12180, %dec_label_pc_1218c ]
  %v1_121e0 = phi i32 [ %v1_121a0.v6_121a0.v6_121a8.v6_121b0, %bb92 ], [ %v2_1217c, %dec_label_pc_1218c ]
  %v0_121d0 = phi i32 [ %v0_121c4, %bb92 ], [ %v2_1218c, %dec_label_pc_1218c ]
  %v5_121d4 = icmp slt i32 %v0_121d0, -2
  br i1 %v5_121d4, label %dec_label_pc_121f4, label %dec_label_pc_121d8

dec_label_pc_121d8:                               ; preds = %dec_label_pc_121d0
  %v8_121d0 = icmp eq i32 %v0_121d0, -2
  br i1 %v8_121d0, label %dec_label_pc_121e8, label %dec_label_pc_121dc

dec_label_pc_121dc:                               ; preds = %dec_label_pc_121d8
  %v3_121dc = icmp ult i32 %v1_121e0, %v0_121e4
  br i1 %v3_121dc, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_121dc
  %v2_121dc = sub i32 %v1_121e0, %v0_121e4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_121dc, %bb93
  %v0_121e854 = phi i32 [ %v1_121e0, %dec_label_pc_121dc ], [ %v2_121dc, %bb93 ]
  %v3_121e4 = udiv i32 %v0_121e4, 2
  br label %dec_label_pc_121e8

dec_label_pc_121e8:                               ; preds = %dec_label_pc_121d8, %bb94
  %v0_121f0 = phi i32 [ %v0_121e4, %dec_label_pc_121d8 ], [ %v3_121e4, %bb94 ]
  %v1_121ec = phi i32 [ %v1_121e0, %dec_label_pc_121d8 ], [ %v0_121e854, %bb94 ]
  %v3_121e8 = icmp ult i32 %v1_121ec, %v0_121f0
  br i1 %v3_121e8, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_121e8
  %v2_121e8 = sub i32 %v1_121ec, %v0_121f0
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_121e8, %bb95
  %v0_121f457 = phi i32 [ %v1_121ec, %dec_label_pc_121e8 ], [ %v2_121e8, %bb95 ]
  %v3_121f0 = udiv i32 %v0_121f0, 2
  br label %dec_label_pc_121f4

dec_label_pc_121f4:                               ; preds = %dec_label_pc_121d0, %bb96
  %v2_121f8 = phi i32 [ %v0_121e4, %dec_label_pc_121d0 ], [ %v3_121f0, %bb96 ]
  %v1_121f8 = phi i32 [ %v1_121e0, %dec_label_pc_121d0 ], [ %v0_121f457, %bb96 ]
  %v3_121f4 = icmp ult i32 %v1_121f8, %v2_121f8
  br i1 %v3_121f4, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_121f4
  %v2_121f4 = sub i32 %v1_121f8, %v2_121f8
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_121f4, %bb83, %.thread72, %dec_label_pc_121c4, %bb92, %bb97
  %v1_12200 = phi i32 [ %v1_121a0.v6_121a0.v6_121a8.v6_121b0, %dec_label_pc_121c4 ], [ 0, %bb92 ], [ %v1_121f8, %dec_label_pc_121f4 ], [ %v2_121f4, %bb97 ], [ %v3_12158, %.thread72 ], [ %v1_1214c, %bb83 ]
  br i1 %v1_12140, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_12200 = sub i32 0, %v1_12200
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_12204 = phi i32 [ %v1_12200, %.thread6 ], [ %v2_12200, %bb98 ]
  ret i32 %v1_12204

dec_label_pc_12208:                               ; preds = %dec_label_pc_12134
  %v0_12208 = load i32, i32* @lr, align 4
  %v0_1220c = call i32 @function_12218()
  call void @__pseudo_branch(i32 %v0_12208)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_121e4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_121c4, { 1, 0, 2 }
  uselistorder i32 %v7_121bc, { 1, 0 }
  uselistorder i32 %v3_121b8, { 1, 0 }
  uselistorder i32 %v1_121a0.v6_121a0.v6_121a8.v6_121b0, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_121ac, { 1, 0 }
  uselistorder i32 %v4_121a4, { 1, 0 }
  uselistorder i32 %v4_1219c, { 1, 0 }
  uselistorder i32 %v6_121bc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1218c, { 1, 0 }
  uselistorder i32 %v1_12180, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_1217c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_1216c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_12178.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1214c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_12154, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_12218, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_121f4, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_121e8, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_12194, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_12218() local_unnamed_addr {
dec_label_pc_12218:
  %v1_12218 = load i32, i32* @r0, align 4
  ret i32 %v1_12218
}

define i32 @function_1221c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1221c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_1221c = load i32, i32* @r2, align 4
  %v1_1222c = add i32 %arg2, -12
  store i32 %v6_1221c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_1222c, 2
  br i1 %tmp, label %dec_label_pc_12254, label %dec_label_pc_1224c

dec_label_pc_1224c:                               ; preds = %dec_label_pc_1221c
  %v0_1224c = call i32 @function_12290()
  br label %dec_label_pc_12280

dec_label_pc_12254:                               ; preds = %dec_label_pc_1221c
  %v2_1225c = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_1225c, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_1225c, -4095
  br i1 %tmp8, label %dec_label_pc_12280, label %dec_label_pc_1226c

dec_label_pc_1226c:                               ; preds = %dec_label_pc_12254
  %v0_1226c = call i32 @function_128b4()
  %v0_12270 = load i32, i32* %r4.global-to-local, align 4
  %v1_12270 = sub i32 0, %v0_12270
  %v2_12274 = inttoptr i32 %v0_1226c to i32*
  store i32 %v1_12270, i32* %v2_12274, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12280

dec_label_pc_12280:                               ; preds = %dec_label_pc_1226c, %dec_label_pc_12254, %dec_label_pc_1224c
  %storemerge = phi i32 [ %v0_1224c, %dec_label_pc_1224c ], [ %v2_1225c, %dec_label_pc_12254 ], [ -1, %dec_label_pc_1226c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_1225c, { 1, 0, 2 }
}

define i32 @function_12290() local_unnamed_addr {
dec_label_pc_12290:
  %r4.global-to-local = alloca i32, align 4
  %v0_122b0 = load i32, i32* @r0, align 4
  store i32 %v0_122b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_122b0, -4095
  br i1 %tmp, label %dec_label_pc_122cc, label %dec_label_pc_122bc

dec_label_pc_122bc:                               ; preds = %dec_label_pc_12290
  %v0_122bc = call i32 @function_128b4()
  %v0_122c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_122c0 = sub i32 0, %v0_122c0
  %v2_122c4 = inttoptr i32 %v0_122bc to i32*
  store i32 %v1_122c0, i32* %v2_122c4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_122cc

dec_label_pc_122cc:                               ; preds = %dec_label_pc_12290, %dec_label_pc_122bc
  %v0_122cc = phi i32 [ %v0_122b0, %dec_label_pc_12290 ], [ -1, %dec_label_pc_122bc ]
  ret i32 %v0_122cc

; uselistorder directives
  uselistorder i32 %v0_122b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_122cc, { 1, 0 }
}

define i32 @function_122e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_122e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_122e0 = load i32, i32* @r4, align 4
  store i32 %v3_122e0, i32* %stack_var_-8, align 4
  %v1_122e4 = call i32 @close(i32 %arg1)
  store i32 %v1_122e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_122e4, -4095
  br i1 %tmp, label %dec_label_pc_12304, label %dec_label_pc_122f4

dec_label_pc_122f4:                               ; preds = %dec_label_pc_122e0
  %v0_122f4 = call i32 @function_128b4()
  %v0_122f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_122f8 = sub i32 0, %v0_122f8
  %v2_122fc = inttoptr i32 %v0_122f4 to i32*
  store i32 %v1_122f8, i32* %v2_122fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12304

dec_label_pc_12304:                               ; preds = %dec_label_pc_122e0, %dec_label_pc_122f4
  %v0_12304 = phi i32 [ %v1_122e4, %dec_label_pc_122e0 ], [ -1, %dec_label_pc_122f4 ]
  %v2_12308 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12308, i32* @r4, align 4
  ret i32 %v0_12304

; uselistorder directives
  uselistorder i32 %v1_122e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12304, { 1, 0 }
}

define i32 @function_1230c() local_unnamed_addr {
dec_label_pc_1230c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1230c = load i32, i32* @r4, align 4
  store i32 %v3_1230c, i32* %stack_var_-8, align 4
  %v0_12310 = call i32 @fork()
  store i32 %v0_12310, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12310, -4095
  br i1 %tmp, label %dec_label_pc_12330, label %dec_label_pc_12320

dec_label_pc_12320:                               ; preds = %dec_label_pc_1230c
  %v0_12320 = call i32 @function_128b4()
  %v0_12324 = load i32, i32* %r4.global-to-local, align 4
  %v1_12324 = sub i32 0, %v0_12324
  %v2_12328 = inttoptr i32 %v0_12320 to i32*
  store i32 %v1_12324, i32* %v2_12328, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12330

dec_label_pc_12330:                               ; preds = %dec_label_pc_1230c, %dec_label_pc_12320
  %v0_12330 = phi i32 [ %v0_12310, %dec_label_pc_1230c ], [ -1, %dec_label_pc_12320 ]
  %v2_12334 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12334, i32* @r4, align 4
  ret i32 %v0_12330

; uselistorder directives
  uselistorder i32 %v0_12310, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12330, { 1, 0 }
}

define i32 @function_12338() local_unnamed_addr {
dec_label_pc_12338:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12338 = load i32, i32* @r4, align 4
  store i32 %v3_12338, i32* %stack_var_-8, align 4
  %v0_1233c = call i32 @getpid()
  store i32 %v0_1233c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1233c, -4095
  br i1 %tmp, label %dec_label_pc_1235c, label %dec_label_pc_1234c

dec_label_pc_1234c:                               ; preds = %dec_label_pc_12338
  %v0_1234c = call i32 @function_128b4()
  %v0_12350 = load i32, i32* %r4.global-to-local, align 4
  %v1_12350 = sub i32 0, %v0_12350
  %v2_12354 = inttoptr i32 %v0_1234c to i32*
  store i32 %v1_12350, i32* %v2_12354, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1235c

dec_label_pc_1235c:                               ; preds = %dec_label_pc_12338, %dec_label_pc_1234c
  %v0_1235c = phi i32 [ %v0_1233c, %dec_label_pc_12338 ], [ -1, %dec_label_pc_1234c ]
  %v2_12360 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12360, i32* @r4, align 4
  ret i32 %v0_1235c

; uselistorder directives
  uselistorder i32 %v0_1233c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1235c, { 1, 0 }
}

define i32 @function_12364() local_unnamed_addr {
dec_label_pc_12364:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12364 = load i32, i32* @r4, align 4
  store i32 %v3_12364, i32* %stack_var_-8, align 4
  %v0_12368 = call i32 @getppid()
  store i32 %v0_12368, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12368, -4095
  br i1 %tmp, label %dec_label_pc_12388, label %dec_label_pc_12378

dec_label_pc_12378:                               ; preds = %dec_label_pc_12364
  %v0_12378 = call i32 @function_128b4()
  %v0_1237c = load i32, i32* %r4.global-to-local, align 4
  %v1_1237c = sub i32 0, %v0_1237c
  %v2_12380 = inttoptr i32 %v0_12378 to i32*
  store i32 %v1_1237c, i32* %v2_12380, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12388

dec_label_pc_12388:                               ; preds = %dec_label_pc_12364, %dec_label_pc_12378
  %v0_12388 = phi i32 [ %v0_12368, %dec_label_pc_12364 ], [ -1, %dec_label_pc_12378 ]
  %v2_1238c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1238c, i32* @r4, align 4
  ret i32 %v0_12388

; uselistorder directives
  uselistorder i32 %v0_12368, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12388, { 1, 0 }
}

define i32 @function_12390(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12390:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_12390 = load i32, i32* @r3, align 4
  store i32 %v9_12390, i32* %stack_var_-4, align 4
  %v2_1239c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1239c, i32* @r3, align 4
  %v2_123ac = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_123ac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_123ac, -4095
  br i1 %tmp, label %dec_label_pc_123cc, label %dec_label_pc_123bc

dec_label_pc_123bc:                               ; preds = %dec_label_pc_12390
  %v0_123bc = call i32 @function_128b4()
  %v0_123c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_123c0 = sub i32 0, %v0_123c0
  store i32 %v1_123c0, i32* @r3, align 4
  %v2_123c4 = inttoptr i32 %v0_123bc to i32*
  store i32 %v1_123c0, i32* %v2_123c4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_123cc

dec_label_pc_123cc:                               ; preds = %dec_label_pc_12390, %dec_label_pc_123bc
  %v0_123cc = phi i32 [ %v2_123ac, %dec_label_pc_12390 ], [ -1, %dec_label_pc_123bc ]
  ret i32 %v0_123cc

; uselistorder directives
  uselistorder i32 %v2_123ac, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_123cc, { 1, 0 }
}

define i32 @function_123e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_123e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_123e0 = load i32, i32* @r4, align 4
  store i32 %v3_123e0, i32* %stack_var_-8, align 4
  %v2_123e4 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_123e8 = icmp eq i32 %v2_123e4, -4096
  store i1 %v7_123e8, i1* @cpsr_z, align 1
  store i32 %v2_123e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_123e4, -4095
  br i1 %tmp, label %dec_label_pc_12404, label %dec_label_pc_123f4

dec_label_pc_123f4:                               ; preds = %dec_label_pc_123e0
  %v0_123f4 = call i32 @function_128b4()
  %v0_123f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_123f8 = sub i32 0, %v0_123f8
  %v2_123fc = inttoptr i32 %v0_123f4 to i32*
  store i32 %v1_123f8, i32* %v2_123fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12404

dec_label_pc_12404:                               ; preds = %dec_label_pc_123e0, %dec_label_pc_123f4
  %v0_12404 = phi i32 [ %v2_123e4, %dec_label_pc_123e0 ], [ -1, %dec_label_pc_123f4 ]
  %v2_12408 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12408, i32* @r4, align 4
  ret i32 %v0_12404

; uselistorder directives
  uselistorder i32 %v2_123e4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_12404, { 1, 0 }
}

define i32 @function_1240c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1240c:
  %r4.global-to-local = alloca i32, align 4
  %v6_1240c = load i32, i32* @r2, align 4
  %v1_1241c = and i32 %arg2, 64
  store i32 %v1_1241c, i32* @r3, align 4
  %v2_1241c = icmp eq i32 %v1_1241c, 0
  br i1 %v2_1241c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_1240c
  store i32 %v6_1240c, i32* @r3, align 4
  %phitmp = urem i32 %v6_1240c, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1240c, %bb
  %v0_1242c = phi i32 [ 0, %dec_label_pc_1240c ], [ %phitmp, %bb ]
  store i32 %v0_1242c, i32* @r2, align 4
  %v4_12434 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_12438 = icmp eq i32 %v4_12434, -4096
  store i1 %v7_12438, i1* @cpsr_z, align 1
  store i32 %v4_12434, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12434, -4095
  br i1 %tmp, label %dec_label_pc_12454, label %dec_label_pc_12444

dec_label_pc_12444:                               ; preds = %.thread1
  %v0_12444 = call i32 @function_128b4()
  %v0_12448 = load i32, i32* %r4.global-to-local, align 4
  %v1_12448 = sub i32 0, %v0_12448
  store i32 %v1_12448, i32* @r3, align 4
  %v2_1244c = inttoptr i32 %v0_12444 to i32*
  store i32 %v1_12448, i32* %v2_1244c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12454

dec_label_pc_12454:                               ; preds = %.thread1, %dec_label_pc_12444
  %v0_12454 = phi i32 [ %v4_12434, %.thread1 ], [ -1, %dec_label_pc_12444 ]
  ret i32 %v0_12454

; uselistorder directives
  uselistorder i32 %v4_12434, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12454, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_12468(i32 %arg1) local_unnamed_addr {
dec_label_pc_12468:
  store i32 %arg1, i32* @r2, align 4
  %v0_12470 = load i32, i32* @r0, align 4
  %v2_12470 = inttoptr i32 %v0_12470 to i8*
  %v3_12470 = call i32 @function_1240c(i8* %v2_12470, i32 577)
  %v0_12474 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12474, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_12468
  %v6_12474 = and i32 %v3_12470, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_12468, %bb
  %v7_12474 = phi i32 [ %v3_12470, %dec_label_pc_12468 ], [ %v6_12474, %bb ]
  ret i32 %v7_12474

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12478(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12478:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12478 = load i32, i32* @r4, align 4
  store i32 %v3_12478, i32* %stack_var_-8, align 4
  %v2_12480 = load i32, i32* @r2, align 4
  %v3_12480 = load i32, i32* @r3, align 4
  %v4_12480 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_12480, i32 %v3_12480, i32 0)
  store i32 %v4_12480, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12480, -4095
  br i1 %tmp, label %dec_label_pc_124a0, label %dec_label_pc_12490

dec_label_pc_12490:                               ; preds = %dec_label_pc_12478
  %v0_12490 = call i32 @function_128b4()
  %v0_12494 = load i32, i32* %r4.global-to-local, align 4
  %v1_12494 = sub i32 0, %v0_12494
  %v2_12498 = inttoptr i32 %v0_12490 to i32*
  store i32 %v1_12494, i32* %v2_12498, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_124a0

dec_label_pc_124a0:                               ; preds = %dec_label_pc_12478, %dec_label_pc_12490
  %v0_124a0 = phi i32 [ %v4_12480, %dec_label_pc_12478 ], [ -1, %dec_label_pc_12490 ]
  %v2_124a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_124a4, i32* @r4, align 4
  ret i32 %v0_124a0

; uselistorder directives
  uselistorder i32 %v4_12480, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124a0, { 1, 0 }
}

define i32 @function_124a8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_124a8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_124a8 = load i32, i32* @r4, align 4
  store i32 %v3_124a8, i32* %stack_var_-8, align 4
  %v4_124ac = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_124ac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_124ac, -4095
  br i1 %tmp, label %dec_label_pc_124cc, label %dec_label_pc_124bc

dec_label_pc_124bc:                               ; preds = %dec_label_pc_124a8
  %v0_124bc = call i32 @function_128b4()
  %v0_124c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_124c0 = sub i32 0, %v0_124c0
  %v2_124c4 = inttoptr i32 %v0_124bc to i32*
  store i32 %v1_124c0, i32* %v2_124c4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_124cc

dec_label_pc_124cc:                               ; preds = %dec_label_pc_124a8, %dec_label_pc_124bc
  %v0_124cc = phi i32 [ %v4_124ac, %dec_label_pc_124a8 ], [ -1, %dec_label_pc_124bc ]
  %v2_124d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_124d0, i32* @r4, align 4
  ret i32 %v0_124cc

; uselistorder directives
  uselistorder i32 %v4_124ac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124cc, { 1, 0 }
}

define i32 @function_124d4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_124d4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_124d4 = load i32, i32* @r4, align 4
  store i32 %v3_124d4, i32* %stack_var_-8, align 4
  %v7_124d8 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_124d8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_124d8, -4095
  br i1 %tmp6, label %dec_label_pc_124f8, label %dec_label_pc_124e8

dec_label_pc_124e8:                               ; preds = %dec_label_pc_124d4
  %v0_124e8 = call i32 @function_128b4()
  %v0_124ec = load i32, i32* %r4.global-to-local, align 4
  %v1_124ec = sub i32 0, %v0_124ec
  %v2_124f0 = inttoptr i32 %v0_124e8 to i32*
  store i32 %v1_124ec, i32* %v2_124f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_124f8

dec_label_pc_124f8:                               ; preds = %dec_label_pc_124d4, %dec_label_pc_124e8
  %v0_124f8 = phi i32 [ %v7_124d8, %dec_label_pc_124d4 ], [ -1, %dec_label_pc_124e8 ]
  %v2_124fc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_124fc, i32* @r4, align 4
  ret i32 %v0_124f8

; uselistorder directives
  uselistorder i32 %v7_124d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124f8, { 1, 0 }
}

define i32 @function_12500(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12500:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12500 = load i32, i32* @r4, align 4
  store i32 %v3_12500, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12528, label %dec_label_pc_12518

dec_label_pc_12518:                               ; preds = %dec_label_pc_12500
  %v0_12518 = call i32 @function_128b4()
  %v0_1251c = load i32, i32* %r4.global-to-local, align 4
  %v1_1251c = sub i32 0, %v0_1251c
  %v2_12520 = inttoptr i32 %v0_12518 to i32*
  store i32 %v1_1251c, i32* %v2_12520, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1252c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12528

dec_label_pc_12528:                               ; preds = %dec_label_pc_12500, %dec_label_pc_12518
  %v2_1252c = phi i32 [ %v3_12500, %dec_label_pc_12500 ], [ %v2_1252c.pre, %dec_label_pc_12518 ]
  %v0_12528 = phi i32 [ %arg1, %dec_label_pc_12500 ], [ -1, %dec_label_pc_12518 ]
  store i32 %v2_1252c, i32* @r4, align 4
  ret i32 %v0_12528

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12528, { 1, 0 }
}

define i32 @function_12530(i32 %arg1) local_unnamed_addr {
dec_label_pc_12530:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12530 = load i32, i32* @r4, align 4
  store i32 %v3_12530, i32* %stack_var_-8, align 4
  %v0_12534 = call i32 @setsid()
  store i32 %v0_12534, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12534, -4095
  br i1 %tmp, label %dec_label_pc_12554, label %dec_label_pc_12544

dec_label_pc_12544:                               ; preds = %dec_label_pc_12530
  %v0_12544 = call i32 @function_128b4()
  %v0_12548 = load i32, i32* %r4.global-to-local, align 4
  %v1_12548 = sub i32 0, %v0_12548
  %v2_1254c = inttoptr i32 %v0_12544 to i32*
  store i32 %v1_12548, i32* %v2_1254c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12554

dec_label_pc_12554:                               ; preds = %dec_label_pc_12530, %dec_label_pc_12544
  %v0_12554 = phi i32 [ %v0_12534, %dec_label_pc_12530 ], [ -1, %dec_label_pc_12544 ]
  %v2_12558 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12558, i32* @r4, align 4
  ret i32 %v0_12554

; uselistorder directives
  uselistorder i32 %v0_12534, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12554, { 1, 0 }
}

define i32 @function_1255c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1255c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1255c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_1255c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1255c
  %v3_125645 = load i32, i32* @r4, align 4
  store i32 %v3_125645, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12584

bb:                                               ; preds = %dec_label_pc_1255c
  %v3_12564 = load i32, i32* @r4, align 4
  store i32 %v3_12564, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_12584, label %dec_label_pc_12570

dec_label_pc_12570:                               ; preds = %bb
  %v0_12570 = call i32 @function_128b4()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1257c = inttoptr i32 %v0_12570 to i32*
  store i32 22, i32* %v2_1257c, align 4
  %v0_125a8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_125a8

dec_label_pc_12584:                               ; preds = %.thread, %bb
  %v7_12584 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_12584, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_12584, -4095
  br i1 %tmp13, label %dec_label_pc_125a4, label %dec_label_pc_12594

dec_label_pc_12594:                               ; preds = %dec_label_pc_12584
  %v0_12594 = call i32 @function_128b4()
  %v0_12598 = load i32, i32* %r4.global-to-local, align 4
  %v1_12598 = sub i32 0, %v0_12598
  %v2_1259c = inttoptr i32 %v0_12594 to i32*
  store i32 %v1_12598, i32* %v2_1259c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125a4

dec_label_pc_125a4:                               ; preds = %dec_label_pc_12584, %dec_label_pc_12594
  %v0_125a4 = phi i32 [ %v7_12584, %dec_label_pc_12584 ], [ -1, %dec_label_pc_12594 ]
  store i32 %v0_125a4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_125a8

dec_label_pc_125a8:                               ; preds = %dec_label_pc_12570, %dec_label_pc_125a4
  %v0_125a8 = phi i32 [ %v0_125a8.pre, %dec_label_pc_12570 ], [ %v0_125a4, %dec_label_pc_125a4 ]
  %v2_125ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125ac, i32* @r4, align 4
  ret i32 %v0_125a8

; uselistorder directives
  uselistorder i32 %v7_12584, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_125a8, { 1, 0 }
  uselistorder label %dec_label_pc_125a4, { 1, 0 }
  uselistorder label %dec_label_pc_12584, { 1, 0 }
}

define i32 @function_125b0(i32* %arg1) local_unnamed_addr {
dec_label_pc_125b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125b0 = load i32, i32* @r4, align 4
  store i32 %v3_125b0, i32* %stack_var_-8, align 4
  %v2_125b4 = call i32 @time(i32* %arg1)
  store i32 %v2_125b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_125b4, -4095
  br i1 %tmp, label %dec_label_pc_125d4, label %dec_label_pc_125c4

dec_label_pc_125c4:                               ; preds = %dec_label_pc_125b0
  %v0_125c4 = call i32 @function_128b4()
  %v0_125c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_125c8 = sub i32 0, %v0_125c8
  %v2_125cc = inttoptr i32 %v0_125c4 to i32*
  store i32 %v1_125c8, i32* %v2_125cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125d4

dec_label_pc_125d4:                               ; preds = %dec_label_pc_125b0, %dec_label_pc_125c4
  %v0_125d4 = phi i32 [ %v2_125b4, %dec_label_pc_125b0 ], [ -1, %dec_label_pc_125c4 ]
  %v2_125d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125d8, i32* @r4, align 4
  ret i32 %v0_125d4

; uselistorder directives
  uselistorder i32 %v2_125b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125d4, { 1, 0 }
}

define i32 @function_125dc(i8* %arg1) local_unnamed_addr {
dec_label_pc_125dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125dc = load i32, i32* @r4, align 4
  store i32 %v3_125dc, i32* %stack_var_-8, align 4
  %v3_125e0 = call i32 @unlink(i8* %arg1)
  store i32 %v3_125e0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_125e0, -4095
  br i1 %tmp, label %dec_label_pc_12600, label %dec_label_pc_125f0

dec_label_pc_125f0:                               ; preds = %dec_label_pc_125dc
  %v0_125f0 = call i32 @function_128b4()
  %v0_125f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_125f4 = sub i32 0, %v0_125f4
  %v2_125f8 = inttoptr i32 %v0_125f0 to i32*
  store i32 %v1_125f4, i32* %v2_125f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12600

dec_label_pc_12600:                               ; preds = %dec_label_pc_125dc, %dec_label_pc_125f0
  %v0_12600 = phi i32 [ %v3_125e0, %dec_label_pc_125dc ], [ -1, %dec_label_pc_125f0 ]
  %v2_12604 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12604, i32* @r4, align 4
  ret i32 %v0_12600

; uselistorder directives
  uselistorder i32 %v3_125e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12600, { 1, 0 }
}

define i32 @function_12608(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12608:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12608 = load i32, i32* @r4, align 4
  store i32 %v3_12608, i32* %stack_var_-8, align 4
  %v4_1260c = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_1260c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1260c, -4095
  br i1 %tmp, label %dec_label_pc_1262c, label %dec_label_pc_1261c

dec_label_pc_1261c:                               ; preds = %dec_label_pc_12608
  %v0_1261c = call i32 @function_128b4()
  %v0_12620 = load i32, i32* %r4.global-to-local, align 4
  %v1_12620 = sub i32 0, %v0_12620
  %v2_12624 = inttoptr i32 %v0_1261c to i32*
  store i32 %v1_12620, i32* %v2_12624, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1262c

dec_label_pc_1262c:                               ; preds = %dec_label_pc_12608, %dec_label_pc_1261c
  %v0_1262c = phi i32 [ %v4_1260c, %dec_label_pc_12608 ], [ -1, %dec_label_pc_1261c ]
  %v2_12630 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12630, i32* @r4, align 4
  ret i32 %v0_1262c

; uselistorder directives
  uselistorder i32 %v4_1260c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1262c, { 1, 0 }
}

define i32 @function_12634(i32* %arg1) local_unnamed_addr {
dec_label_pc_12634:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12634 = load i32, i32* @r4, align 4
  store i32 %v3_12634, i32* %stack_var_-20, align 4
  %v6_12634 = load i32, i32* @r5, align 4
  %v9_12634 = load i32, i32* @r6, align 4
  %v12_12634 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1263c = load i32, i32* %arg1, align 4
  store i32 %v2_1263c, i32* %r4.global-to-local, align 4
  %v2_12640 = ptrtoint i32* %stack_var_-36 to i32
  %v1_12644 = add i32 %tmp, 24
  store i32 %v1_12644, i32* @r6, align 4
  %v3_12648 = icmp eq i32 %v2_1263c, -1
  store i32 %v2_12640, i32* @r7, align 4
  store i32 %v1_12644, i32* %r2.global-to-local, align 4
  store i32 %v2_12640, i32* @r0, align 4
  br i1 %v3_12648, label %dec_label_pc_12660, label %dec_label_pc_12674

dec_label_pc_12660:                               ; preds = %dec_label_pc_12634
  %v0_12660 = call i32 @function_128b4()
  %v0_12668 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12668, i32* %r2.global-to-local, align 4
  %v2_1266c = inttoptr i32 %v0_12660 to i32*
  store i32 9, i32* %v2_1266c, align 4
  %v0_126cc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_126cc

dec_label_pc_12674:                               ; preds = %dec_label_pc_12634
  %v8_1267c = call i32 @function_13930(i32 %v2_12640, i32 ptrtoint (i32* @global_var_13928.698 to i32), i32 %v1_12644, i32 80176, i32 %v3_12634, i32 %v6_12634, i32 %v9_12634)
  %v1_1268c = call i32 @function_13928()
  %v0_12698 = load i32, i32* @r5, align 4
  %v1_12698 = inttoptr i32 %v0_12698 to i32*
  %v2_12698 = load i32, i32* %v1_12698, align 4
  store i32 %v2_12698, i32* @r4, align 4
  store i32 %v2_12640, i32* @r0, align 4
  store i32 -1, i32* %v1_12698, align 4
  store i32 ptrtoint (i32* @global_var_126b0.702 to i32), i32* @lr, align 4
  %v8_126ac = call i32 @function_13930(i32 %v2_12640, i32 1, i32 %v1_12644, i32 80176, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_126b0 = load i32, i32* @r5, align 4
  %v1_126b0 = add i32 %v0_126b0, 12
  %v2_126b0 = inttoptr i32 %v1_126b0 to i32*
  %v3_126b0 = load i32, i32* %v2_126b0, align 4
  store i32 %v3_126b0, i32* @r0, align 4
  %v0_126b4 = call i32 @function_12f40()
  %v0_126b8 = load i32, i32* @r5, align 4
  store i32 %v0_126b8, i32* @r0, align 4
  %v0_126bc = call i32 @function_12f40()
  %v0_126c0 = load i32, i32* @r4, align 4
  %v1_126c4 = call i32 @function_122e0(i32 %v0_126c0)
  store i32 %v1_126c4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_126cc

dec_label_pc_126cc:                               ; preds = %dec_label_pc_12660, %dec_label_pc_12674
  %v0_126cc = phi i32 [ %v0_126cc.pre, %dec_label_pc_12660 ], [ %v1_126c4, %dec_label_pc_12674 ]
  %v2_126d4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_126d4, i32* @r4, align 4
  store i32 %v6_12634, i32* @r5, align 4
  store i32 %v9_12634, i32* @r6, align 4
  store i32 %v12_12634, i32* @r7, align 4
  ret i32 %v0_126cc

; uselistorder directives
  uselistorder i32 %v1_12644, { 2, 1, 0, 3 }
  uselistorder i32 %v2_12640, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_12634, { 1, 0 }
  uselistorder i32 %v6_12634, { 1, 0 }
  uselistorder label %dec_label_pc_126cc, { 1, 0 }
}

define i32 @function_126e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_126e8:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_126e8 = load i32, i32* @r4, align 4
  %v9_126e8 = load i32, i32* @r6, align 4
  %v12_126e8 = load i32, i32* @r7, align 4
  %v0_126f4 = load i32, i32* @r0, align 4
  %v2_126f4 = inttoptr i32 %v0_126f4 to i8*
  %v3_126f4 = call i32 @function_1240c(i8* %v2_126f4, i32 18432)
  store i32 %v3_126f4, i32* @r0, align 4
  store i32 %v3_126f4, i32* @r7, align 4
  %v1_126f8 = icmp slt i32 %v3_126f4, 0
  br i1 %v1_126f8, label %.thread1, label %dec_label_pc_12704

.thread1:                                         ; preds = %dec_label_pc_126e8
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_127d4

dec_label_pc_12704:                               ; preds = %dec_label_pc_126e8
  %v2_126f0 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_126f0, i32* @r1, align 4
  %v0_12708 = call i32 @function_13d54()
  %v1_1270c = icmp slt i32 %v0_12708, 0
  br i1 %v1_1270c, label %dec_label_pc_1272c, label %dec_label_pc_12714

dec_label_pc_12714:                               ; preds = %dec_label_pc_12704
  %v0_12714 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_12720 = call i32 @function_1221c(i32 %v0_12714, i32 2)
  %v1_12724 = icmp slt i32 %v2_12720, 0
  br i1 %v1_12724, label %dec_label_pc_1272c, label %dec_label_pc_1274c

dec_label_pc_1272c:                               ; preds = %dec_label_pc_12714, %dec_label_pc_12704
  %v0_1272c = call i32 @function_128b4()
  store i32 %v0_1272c, i32* %r5.global-to-local, align 4
  %v0_12734 = load i32, i32* @r7, align 4
  %v1_12738 = inttoptr i32 %v0_1272c to i32*
  %v2_12738 = load i32, i32* %v1_12738, align 4
  store i32 %v2_12738, i32* @r4, align 4
  %v1_1273c = call i32 @function_122e0(i32 %v0_12734)
  store i32 0, i32* @r6, align 4
  %v0_12744 = load i32, i32* @r4, align 4
  %v1_12744 = load i32, i32* %r5.global-to-local, align 4
  %v2_12744 = inttoptr i32 %v1_12744 to i32*
  store i32 %v0_12744, i32* %v2_12744, align 4
  br label %dec_label_pc_127d4

dec_label_pc_1274c:                               ; preds = %dec_label_pc_12714
  %v1_12750 = call i32 @function_12d94(i32 48)
  store i32 %v1_12750, i32* @r6, align 4
  %v2_12754 = icmp eq i32 %v1_12750, 0
  br i1 %v2_12754, label %dec_label_pc_127a4, label %dec_label_pc_1275c

dec_label_pc_1275c:                               ; preds = %dec_label_pc_1274c
  store i32 0, i32* @r4, align 4
  %v2_12760 = add i32 %v1_12750, 16
  %v3_12760 = inttoptr i32 %v2_12760 to i32*
  store i32 0, i32* %v3_12760, align 4
  %v2_12768 = icmp ugt i32 %tmp, 511
  %v1_1276c = load i32, i32* @r6, align 4
  %v2_1276c = add i32 %v1_1276c, 20
  %v3_1276c = inttoptr i32 %v2_1276c to i32*
  store i32 %tmp, i32* %v3_1276c, align 4
  br i1 %v2_12768, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1275c
  %v2_12774 = load i32, i32* @r6, align 4
  %v3_12774 = add i32 %v2_12774, 20
  %v4_12774 = inttoptr i32 %v3_12774 to i32*
  store i32 512, i32* %v4_12774, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1275c, %bb
  %v0_12778 = load i32, i32* @r7, align 4
  %v1_12778 = load i32, i32* @r6, align 4
  %v2_12778 = inttoptr i32 %v1_12778 to i32*
  store i32 %v0_12778, i32* %v2_12778, align 4
  %v0_1277c = load i32, i32* @r4, align 4
  %v1_1277c = load i32, i32* @r6, align 4
  %v2_1277c = add i32 %v1_1277c, 8
  %v3_1277c = inttoptr i32 %v2_1277c to i32*
  store i32 %v0_1277c, i32* %v3_1277c, align 4
  %v0_12780 = load i32, i32* @r4, align 4
  %v1_12780 = load i32, i32* @r6, align 4
  %v2_12780 = add i32 %v1_12780, 4
  %v3_12780 = inttoptr i32 %v2_12780 to i32*
  store i32 %v0_12780, i32* %v3_12780, align 4
  %v0_12788 = load i32, i32* @r6, align 4
  %v1_12788 = add i32 %v0_12788, 20
  %v2_12788 = inttoptr i32 %v1_12788 to i32*
  %v3_12788 = load i32, i32* %v2_12788, align 4
  %v2_1278c = call i32 @function_12ee8(i32 1, i32 %v3_12788)
  %v2_12790 = icmp eq i32 %v2_1278c, 0
  %v1_12794 = load i32, i32* @r6, align 4
  %v2_12794 = add i32 %v1_12794, 12
  %v3_12794 = inttoptr i32 %v2_12794 to i32*
  store i32 %v2_1278c, i32* %v3_12794, align 4
  br i1 %v2_12790, label %dec_label_pc_1279c, label %dec_label_pc_127c0

dec_label_pc_1279c:                               ; preds = %.thread
  %v0_1279c = load i32, i32* @r6, align 4
  store i32 %v0_1279c, i32* @r0, align 4
  %v0_127a0 = call i32 @function_12f40()
  br label %dec_label_pc_127a4

dec_label_pc_127a4:                               ; preds = %dec_label_pc_1274c, %dec_label_pc_1279c
  %v0_127a4 = load i32, i32* @r7, align 4
  %v1_127a8 = call i32 @function_122e0(i32 %v0_127a4)
  %v0_127ac = call i32 @function_128b4()
  store i32 0, i32* @r6, align 4
  %v2_127b8 = inttoptr i32 %v0_127ac to i32*
  store i32 12, i32* %v2_127b8, align 4
  br label %dec_label_pc_127d4

dec_label_pc_127c0:                               ; preds = %.thread
  store i32 75732, i32* @lr, align 4
  %v1_127d0 = call i32 @function_13928()
  br label %dec_label_pc_127d4

dec_label_pc_127d4:                               ; preds = %.thread1, %dec_label_pc_127a4, %dec_label_pc_1272c, %dec_label_pc_127c0
  %v0_127d4 = load i32, i32* @r6, align 4
  store i32 %v3_126e8, i32* @r4, align 4
  store i32 %v9_126e8, i32* @r6, align 4
  store i32 %v12_126e8, i32* @r7, align 4
  ret i32 %v0_127d4

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_12ee8, { 32, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 7, 6, 13, 12, 11, 5, 4, 3, 2, 1, 0, 10, 9, 8 }
  uselistorder i32 512, { 0, 6, 1, 2, 8, 7, 9, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 (i32)* @function_122e0, { 14, 13, 12, 29, 10, 32, 28, 27, 31, 30, 26, 25, 19, 24, 23, 22, 21, 20, 18, 17, 16, 15, 11, 1, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_127d4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_127a4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_127e4(i32* %arg1) local_unnamed_addr {
dec_label_pc_127e4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_127e4 = load i32, i32* @r4, align 4
  %v6_127e4 = load i32, i32* @r5, align 4
  %v9_127e4 = load i32, i32* @lr, align 4
  %v1_127e8 = add i32 %tmp, 24
  store i32 %v1_127e8, i32* @r4, align 4
  %v2_127ec = ptrtoint i32* %stack_var_-28 to i32
  store i32 80176, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_127ec, i32* @r0, align 4
  store i32 %v1_127e8, i32* %r2.global-to-local, align 4
  %v8_12808 = call i32 @function_13930(i32 %v2_127ec, i32 ptrtoint (i32* @global_var_13928.698 to i32), i32 %v1_127e8, i32 80176, i32 %v3_127e4, i32 %v6_127e4, i32 %v9_127e4)
  %v0_1280c = load i32, i32* @r4, align 4
  store i32 %v0_1280c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13928.698 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1281c.707 to i32), i32* @lr, align 4
  %v1_12818 = call i32 @function_13928()
  store i32 %v1_12818, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1281c

dec_label_pc_1281c:                               ; preds = %dec_label_pc_12850, %dec_label_pc_127e4
  %v0_1281c = load i32, i32* @r5, align 4
  %v1_1281c = add i32 %v0_1281c, 4
  %v2_1281c = inttoptr i32 %v1_1281c to i32*
  %v3_1281c = load i32, i32* %v2_1281c, align 4
  store i32 %v3_1281c, i32* %r2.global-to-local, align 4
  %v4_1281c = add i32 %v0_1281c, 8
  %v5_1281c = inttoptr i32 %v4_1281c to i32*
  %v6_1281c = load i32, i32* %v5_1281c, align 4
  store i32 %v6_1281c, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_1281c, %v3_1281c
  br i1 %tmp8, label %dec_label_pc_12850, label %dec_label_pc_12828

dec_label_pc_12828:                               ; preds = %dec_label_pc_1281c
  %v1_12828 = inttoptr i32 %v0_1281c to i32*
  %v2_12828 = load i32, i32* %v1_12828, align 4
  store i32 %v2_12828, i32* @r0, align 4
  %v1_1282c = add i32 %v0_1281c, 12
  %v2_1282c = inttoptr i32 %v1_1282c to i32*
  %v3_1282c = load i32, i32* %v2_1282c, align 4
  %v1_12830 = add i32 %v0_1281c, 20
  %v2_12830 = inttoptr i32 %v1_12830 to i32*
  %v3_12830 = load i32, i32* %v2_12830, align 4
  store i32 %v3_12830, i32* @r2, align 4
  %v4_12834 = call i32 @function_13da4(i32 %v2_12828, i32 %v3_1282c, i32 %v3_12830, i32 %v6_1281c)
  store i32 %v4_12834, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_12834, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_12844

.thread:                                          ; preds = %dec_label_pc_12828
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12884

dec_label_pc_12844:                               ; preds = %dec_label_pc_12828
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12848 = load i32, i32* @r5, align 4
  %v2_12848 = add i32 %v1_12848, 4
  %v3_12848 = inttoptr i32 %v2_12848 to i32*
  store i32 0, i32* %v3_12848, align 4
  %v1_1284c = load i32, i32* @r5, align 4
  %v2_1284c = add i32 %v1_1284c, 8
  %v3_1284c = inttoptr i32 %v2_1284c to i32*
  store i32 %v4_12834, i32* %v3_1284c, align 4
  %v0_12850.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12850

dec_label_pc_12850:                               ; preds = %dec_label_pc_1281c, %dec_label_pc_12844
  %v1_12868 = phi i32 [ %v0_1281c, %dec_label_pc_1281c ], [ %v0_12850.pre, %dec_label_pc_12844 ]
  %v1_12850 = add i32 %v1_12868, 4
  %v2_12850 = inttoptr i32 %v1_12850 to i32*
  %v3_12850 = load i32, i32* %v2_12850, align 4
  store i32 %v3_12850, i32* %r2.global-to-local, align 4
  %v1_12854 = add i32 %v1_12868, 12
  %v2_12854 = inttoptr i32 %v1_12854 to i32*
  %v3_12854 = load i32, i32* %v2_12854, align 4
  store i32 %v3_12854, i32* %ip.global-to-local, align 4
  %v2_12858 = add i32 %v3_12854, %v3_12850
  store i32 %v2_12858, i32* @r4, align 4
  %v1_1285c = add i32 %v2_12858, 4
  %v2_1285c = inttoptr i32 %v1_1285c to i32*
  %v3_1285c = load i32, i32* %v2_1285c, align 4
  %v1_12860 = add i32 %v2_12858, 8
  %v2_12860 = inttoptr i32 %v1_12860 to i8*
  %v3_12860 = load i8, i8* %v2_12860, align 1
  %v4_12860 = zext i8 %v3_12860 to i32
  store i32 %v4_12860, i32* %r3.global-to-local, align 4
  %v1_12864 = add i32 %v2_12858, 9
  %v2_12864 = inttoptr i32 %v1_12864 to i8*
  %v3_12864 = load i8, i8* %v2_12864, align 1
  %v4_12864 = zext i8 %v3_12864 to i32
  store i32 %v4_12864, i32* %r0.global-to-local, align 4
  %v2_12868 = add i32 %v1_12868, 16
  %v3_12868 = inttoptr i32 %v2_12868 to i32*
  store i32 %v3_1285c, i32* %v3_12868, align 4
  %v0_1286c = load i32, i32* %r2.global-to-local, align 4
  %v1_1286c = load i32, i32* %ip.global-to-local, align 4
  %v2_1286c = add i32 %v1_1286c, %v0_1286c
  %v3_1286c = inttoptr i32 %v2_1286c to i32*
  %v4_1286c = load i32, i32* %v3_1286c, align 4
  %v0_12870 = load i32, i32* %r3.global-to-local, align 4
  %v1_12870 = load i32, i32* %r0.global-to-local, align 4
  %v4_12870 = mul i32 %v1_12870, 256
  %v5_12870 = or i32 %v4_12870, %v0_12870
  store i32 %v5_12870, i32* %r3.global-to-local, align 4
  %v2_12874 = add i32 %v5_12870, %v0_1286c
  store i32 %v2_12874, i32* @r2, align 4
  %v2_12878 = icmp eq i32 %v4_1286c, 0
  %v1_1287c = load i32, i32* @r5, align 4
  %v2_1287c = add i32 %v1_1287c, 4
  %v3_1287c = inttoptr i32 %v2_1287c to i32*
  store i32 %v2_12874, i32* %v3_1287c, align 4
  br i1 %v2_12878, label %dec_label_pc_1281c, label %dec_label_pc_12884

dec_label_pc_12884:                               ; preds = %dec_label_pc_12850, %.thread
  store i32 %v2_127ec, i32* @r0, align 4
  store i32 80176, i32* %r3.global-to-local, align 4
  store i32 75928, i32* @lr, align 4
  %v3_12894 = load i32, i32* @r2, align 4
  %v8_12894 = call i32 @function_13930(i32 %v2_127ec, i32 1, i32 %v3_12894, i32 80176, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_12898 = load i32, i32* @r4, align 4
  store i32 %v0_12898, i32* %r0.global-to-local, align 4
  store i32 %v3_127e4, i32* @r4, align 4
  store i32 %v6_127e4, i32* @r5, align 4
  ret i32 %v0_12898

; uselistorder directives
  uselistorder i32 %v1_12868, { 0, 2, 1 }
  uselistorder i32 %v6_1281c, { 1, 0, 2 }
  uselistorder i32 %v0_1281c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_127ec, { 1, 0, 3, 2 }
  uselistorder i32 %v1_127e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 2, 1, 6, 0 }
  uselistorder label %dec_label_pc_12850, { 1, 0 }
}

define i32 @function_128b4() local_unnamed_addr {
dec_label_pc_128b4:
  ret i32 ptrtoint (i32* @global_var_1d8f4.710 to i32)
}

define i32 @function_128c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_128c0:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_128cc = bitcast i32* %stack_var_-20 to %tms*
  %v2_128cc = call i32 @function_14134(%tms* %v1_128cc)
  %v2_128d4 = load i32, i32* %stack_var_-20, align 4
  %v2_128d8 = add i32 %v2_128d4, %tmp
  %v2_128e0 = mul i32 %v2_128d8, 10000
  %v1_128e4 = and i32 %v2_128e0, 2147483632
  ret i32 %v1_128e4

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_12900(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12900:
  %v0_12900 = call i32 @function_14540()
  ret i32 %v0_12900
}

define i32 @function_12910(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12910:
  %v0_12910 = call i32 @function_14540()
  ret i32 %v0_12910

; uselistorder directives
  uselistorder i32 ()* @function_14540, { 1, 0 }
}

define i32 @function_12920(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12920:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_12924 = load i32, i32* @r2, align 4
  %v8_12924 = icmp eq i32 %v0_12924, 8
  store i1 %v8_12924, i1* %cpsr_z.global-to-local, align 1
  %v5_12928 = icmp slt i32 %v0_12924, 8
  br i1 %v5_12928, label %dec_label_pc_12988, label %dec_label_pc_1292c

dec_label_pc_1292c:                               ; preds = %dec_label_pc_12920
  %v4_1292c = mul i32 %arg2, 256
  %v5_1292c = or i32 %v4_1292c, %arg2
  %v4_12930 = mul i32 %v5_1292c, 65536
  %v5_12930 = or i32 %v4_12930, %v5_1292c
  store i32 %v5_12930, i32* %r1.global-to-local, align 4
  %v1_1293457 = urem i32 %tmp, 4
  %v2_1293458 = icmp eq i32 %v1_1293457, 0
  store i1 %v2_1293458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1293458, label %dec_label_pc_12944, label %bb

bb:                                               ; preds = %dec_label_pc_1292c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1292c ]
  %v3_1293859 = phi i32 [ %v6_12938, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1292c ]
  %v4_12938 = inttoptr i32 %v3_1293859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_12938, align 1
  %v5_12938 = load i32, i32* %r3.global-to-local, align 4
  %v6_12938 = add i32 %v5_12938, 1
  store i32 %v6_12938, i32* %r3.global-to-local, align 4
  %v0_1293c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12948.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1293c.pr, label %dec_label_pc_12944, label %.thread

.thread:                                          ; preds = %bb
  %v2_1293c = add i32 %v0_12948.pr.pre, -1
  store i32 %v2_1293c, i32* @r2, align 4
  %v1_12934 = urem i32 %v6_12938, 4
  %v2_12934 = icmp eq i32 %v1_12934, 0
  store i1 %v2_12934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12934, label %dec_label_pc_12944, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_12938.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_12938.pre to i8
  br label %bb

dec_label_pc_12944:                               ; preds = %.thread, %bb, %dec_label_pc_1292c
  %v0_1295028 = phi i32 [ %tmp, %dec_label_pc_1292c ], [ %v6_12938, %bb ], [ %v6_12938, %.thread ]
  %v0_12948.pr = phi i32 [ %v0_12924, %dec_label_pc_1292c ], [ %v0_12948.pr.pre, %bb ], [ %v2_1293c, %.thread ]
  %v0_12944 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12944, i32* %ip.global-to-local, align 4
  %v8_1294810 = icmp eq i32 %v0_12948.pr, 8
  store i1 %v8_1294810, i1* %cpsr_z.global-to-local, align 1
  %v5_1294c11 = icmp slt i32 %v0_12948.pr, 8
  br i1 %v5_1294c11, label %dec_label_pc_12988, label %dec_label_pc_12950.preheader

dec_label_pc_12950.preheader:                     ; preds = %dec_label_pc_12944
  %v1_1295046 = inttoptr i32 %v0_1295028 to i32*
  store i32 %v0_12944, i32* %v1_1295046, align 4
  %v3_1295047 = add i32 %v0_1295028, 4
  %v4_1295048 = inttoptr i32 %v3_1295047 to i32*
  %v5_1295049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1295049, i32* %v4_1295048, align 4
  %v6_1295050 = add i32 %v0_1295028, 8
  store i32 %v6_1295050, i32* %r3.global-to-local, align 4
  %v0_1295451 = load i32, i32* @r2, align 4
  %v1_1295452 = add i32 %v0_1295451, -8
  store i32 %v1_1295452, i32* %r2.global-to-local, align 4
  %v5_1295c53 = icmp slt i32 %v1_1295452, 8
  br i1 %v5_1295c53, label %dec_label_pc_12950.dec_label_pc_12988.loopexit_crit_edge, label %dec_label_pc_12960

dec_label_pc_12960:                               ; preds = %dec_label_pc_12950.preheader, %dec_label_pc_12948.dec_label_pc_12950_crit_edge
  %v6_1295055 = phi i32 [ %v6_12950, %dec_label_pc_12948.dec_label_pc_12950_crit_edge ], [ %v6_1295050, %dec_label_pc_12950.preheader ]
  %v0_1295054 = phi i32 [ %v12_1297c, %dec_label_pc_12948.dec_label_pc_12950_crit_edge ], [ %v0_1295028, %dec_label_pc_12950.preheader ]
  %v1_12960 = inttoptr i32 %v6_1295055 to i32*
  %v2_12960 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12960, i32* %v1_12960, align 4
  %v3_12960 = add i32 %v0_1295054, 12
  %v4_12960 = inttoptr i32 %v3_12960 to i32*
  %v5_12960 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12960, i32* %v4_12960, align 4
  %v6_12960 = add i32 %v0_1295054, 16
  store i32 %v6_12960, i32* %r3.global-to-local, align 4
  %v0_12964 = load i32, i32* %r2.global-to-local, align 4
  %v1_12964 = add i32 %v0_12964, -8
  store i32 %v1_12964, i32* %r2.global-to-local, align 4
  %v5_1296c = icmp slt i32 %v1_12964, 8
  br i1 %v5_1296c, label %dec_label_pc_12960.dec_label_pc_12988.loopexit_crit_edge, label %dec_label_pc_12970

dec_label_pc_12970:                               ; preds = %dec_label_pc_12960
  %v1_12970 = inttoptr i32 %v6_12960 to i32*
  %v2_12970 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12970, i32* %v1_12970, align 4
  %v3_12970 = add i32 %v0_1295054, 20
  %v4_12970 = inttoptr i32 %v3_12970 to i32*
  %v5_12970 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12970, i32* %v4_12970, align 4
  %v6_12970 = add i32 %v0_1295054, 24
  store i32 %v6_12970, i32* %r3.global-to-local, align 4
  %v0_12974 = load i32, i32* %r2.global-to-local, align 4
  %v1_12974 = add i32 %v0_12974, -8
  store i32 %v1_12974, i32* %r2.global-to-local, align 4
  %v5_1297c = icmp slt i32 %v1_12974, 8
  br i1 %v5_1297c, label %dec_label_pc_12970.dec_label_pc_12988.loopexit_crit_edge, label %dec_label_pc_12948

dec_label_pc_12948:                               ; preds = %dec_label_pc_12970
  %v7_1297c = inttoptr i32 %v6_12970 to i32*
  %v8_1297c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1297c, i32* %v7_1297c, align 4
  %v9_1297c = add i32 %v0_1295054, 28
  %v10_1297c = inttoptr i32 %v9_1297c to i32*
  %v11_1297c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1297c, i32* %v10_1297c, align 4
  %v12_1297c = add i32 %v0_1295054, 32
  store i32 %v12_1297c, i32* %r3.global-to-local, align 4
  %v6_12980 = load i32, i32* %r2.global-to-local, align 4
  %v7_12980 = add i32 %v6_12980, -8
  store i32 %v7_12980, i32* %r2.global-to-local, align 4
  %v5_1294c = icmp slt i32 %v7_12980, 8
  br i1 %v5_1294c, label %dec_label_pc_12948.dec_label_pc_12988.loopexit_crit_edge, label %dec_label_pc_12948.dec_label_pc_12950_crit_edge

dec_label_pc_12948.dec_label_pc_12950_crit_edge:  ; preds = %dec_label_pc_12948
  %v2_12950.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12950 = inttoptr i32 %v12_1297c to i32*
  store i32 %v2_12950.pre, i32* %v1_12950, align 4
  %v3_12950 = add i32 %v0_1295054, 36
  %v4_12950 = inttoptr i32 %v3_12950 to i32*
  %v5_12950 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12950, i32* %v4_12950, align 4
  %v6_12950 = add i32 %v0_1295054, 40
  store i32 %v6_12950, i32* %r3.global-to-local, align 4
  %v0_12954 = load i32, i32* %r2.global-to-local, align 4
  %v1_12954 = add i32 %v0_12954, -8
  store i32 %v1_12954, i32* %r2.global-to-local, align 4
  %v5_1295c = icmp slt i32 %v1_12954, 8
  br i1 %v5_1295c, label %dec_label_pc_12950.dec_label_pc_12988.loopexit_crit_edge, label %dec_label_pc_12960

dec_label_pc_12950.dec_label_pc_12988.loopexit_crit_edge: ; preds = %dec_label_pc_12948.dec_label_pc_12950_crit_edge, %dec_label_pc_12950.preheader
  %v1_12954.lcssa = phi i32 [ %v1_1295452, %dec_label_pc_12950.preheader ], [ %v1_12954, %dec_label_pc_12948.dec_label_pc_12950_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12988

dec_label_pc_12948.dec_label_pc_12988.loopexit_crit_edge: ; preds = %dec_label_pc_12948
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12988

dec_label_pc_12960.dec_label_pc_12988.loopexit_crit_edge: ; preds = %dec_label_pc_12960
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12988

dec_label_pc_12970.dec_label_pc_12988.loopexit_crit_edge: ; preds = %dec_label_pc_12970
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12988

dec_label_pc_12988:                               ; preds = %dec_label_pc_12944, %dec_label_pc_12950.dec_label_pc_12988.loopexit_crit_edge, %dec_label_pc_12948.dec_label_pc_12988.loopexit_crit_edge, %dec_label_pc_12960.dec_label_pc_12988.loopexit_crit_edge, %dec_label_pc_12970.dec_label_pc_12988.loopexit_crit_edge, %dec_label_pc_12920
  %v0_12990 = phi i32 [ %v0_12924, %dec_label_pc_12920 ], [ %v1_12974, %dec_label_pc_12970.dec_label_pc_12988.loopexit_crit_edge ], [ %v1_12964, %dec_label_pc_12960.dec_label_pc_12988.loopexit_crit_edge ], [ %v7_12980, %dec_label_pc_12948.dec_label_pc_12988.loopexit_crit_edge ], [ %v1_12954.lcssa, %dec_label_pc_12950.dec_label_pc_12988.loopexit_crit_edge ], [ %v0_12948.pr, %dec_label_pc_12944 ]
  %v2_12988 = icmp eq i32 %v0_12990, 0
  store i1 %v2_12988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12988, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_12988
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_12988
  %v1_12990 = sub i32 7, %v0_12990
  store i32 %v1_12990, i32* %r2.global-to-local, align 4
  %v3_12994 = mul i32 %v1_12990, 4
  %v4_12994 = add i32 %v3_12994, ptrtoint (i32* @global_var_1299c.712 to i32)
  call void @__pseudo_branch(i32 %v4_12994)
  %v0_1299c = load i32, i32* %r1.global-to-local, align 4
  %v1_1299c = trunc i32 %v0_1299c to i8
  %v2_1299c = load i32, i32* %r3.global-to-local, align 4
  %v3_1299c = inttoptr i32 %v2_1299c to i8*
  store i8 %v1_1299c, i8* %v3_1299c, align 1
  %v4_1299c = load i32, i32* %r3.global-to-local, align 4
  %v5_1299c = add i32 %v4_1299c, 1
  store i32 %v5_1299c, i32* %r3.global-to-local, align 4
  %v0_129a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_129a0 = trunc i32 %v0_129a0 to i8
  %v3_129a0 = inttoptr i32 %v5_1299c to i8*
  store i8 %v1_129a0, i8* %v3_129a0, align 1
  %v4_129a0 = load i32, i32* %r3.global-to-local, align 4
  %v5_129a0 = add i32 %v4_129a0, 1
  store i32 %v5_129a0, i32* %r3.global-to-local, align 4
  %v0_129a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_129a4 = trunc i32 %v0_129a4 to i8
  %v3_129a4 = inttoptr i32 %v5_129a0 to i8*
  store i8 %v1_129a4, i8* %v3_129a4, align 1
  %v4_129a4 = load i32, i32* %r3.global-to-local, align 4
  %v5_129a4 = add i32 %v4_129a4, 1
  store i32 %v5_129a4, i32* %r3.global-to-local, align 4
  %v0_129a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_129a8 = trunc i32 %v0_129a8 to i8
  %v3_129a8 = inttoptr i32 %v5_129a4 to i8*
  store i8 %v1_129a8, i8* %v3_129a8, align 1
  %v4_129a8 = load i32, i32* %r3.global-to-local, align 4
  %v5_129a8 = add i32 %v4_129a8, 1
  store i32 %v5_129a8, i32* %r3.global-to-local, align 4
  %v0_129ac = load i32, i32* %r1.global-to-local, align 4
  %v1_129ac = trunc i32 %v0_129ac to i8
  %v3_129ac = inttoptr i32 %v5_129a8 to i8*
  store i8 %v1_129ac, i8* %v3_129ac, align 1
  %v4_129ac = load i32, i32* %r3.global-to-local, align 4
  %v5_129ac = add i32 %v4_129ac, 1
  store i32 %v5_129ac, i32* %r3.global-to-local, align 4
  %v0_129b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_129b0 = trunc i32 %v0_129b0 to i8
  %v3_129b0 = inttoptr i32 %v5_129ac to i8*
  store i8 %v1_129b0, i8* %v3_129b0, align 1
  %v4_129b0 = load i32, i32* %r3.global-to-local, align 4
  %v5_129b0 = add i32 %v4_129b0, 1
  store i32 %v5_129b0, i32* %r3.global-to-local, align 4
  %v0_129b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_129b4 = trunc i32 %v0_129b4 to i8
  %v3_129b4 = inttoptr i32 %v5_129b0 to i8*
  store i8 %v1_129b4, i8* %v3_129b4, align 1
  %v4_129b4 = load i32, i32* %r3.global-to-local, align 4
  %v5_129b4 = add i32 %v4_129b4, 1
  store i32 %v5_129b4, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_12950, { 1, 0 }
  uselistorder i32 %v12_1297c, { 1, 2, 0 }
  uselistorder i32 %v0_1295054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_12948.pr, { 0, 2, 1 }
  uselistorder i32 %v6_12938, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1292c, { 1, 0 }
  uselistorder i32 %v0_12924, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 3, 2, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_12988, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_12960, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_129c0(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_129c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_129c0 = sub i32 %arg1, %tmp
  %v1_129c4 = add i32 %v2_129c0, -1
  store i32 %v1_129c4, i32* %r2.global-to-local, align 4
  %v2_129c84 = load i8, i8* %arg2, align 1
  %v5_129c86 = add i32 %tmp, 1
  store i32 %v5_129c86, i32* %r1.global-to-local, align 4
  %v2_129cc7 = icmp eq i8 %v2_129c84, 0
  store i1 %v2_129cc7, i1* %cpsr_z.global-to-local, align 1
  %v5_129d08 = inttoptr i32 %arg1 to i8*
  store i8 %v2_129c84, i8* %v5_129d08, align 1
  %v0_129d49 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_129d49, label %dec_label_pc_129d8, label %dec_label_pc_129c8.dec_label_pc_129c8_crit_edge

dec_label_pc_129c8.dec_label_pc_129c8_crit_edge:  ; preds = %dec_label_pc_129c0, %dec_label_pc_129c8.dec_label_pc_129c8_crit_edge
  %v0_129c8.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_129d0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_129c8 = inttoptr i32 %v0_129c8.pre to i8*
  %v2_129c8 = load i8, i8* %v1_129c8, align 1
  %v5_129c8 = add i32 %v0_129c8.pre, 1
  store i32 %v5_129c8, i32* %r1.global-to-local, align 4
  %v2_129cc = icmp eq i8 %v2_129c8, 0
  store i1 %v2_129cc, i1* %cpsr_z.global-to-local, align 1
  %v4_129d0 = add i32 %v5_129c8, %v3_129d0.pre
  %v5_129d0 = inttoptr i32 %v4_129d0 to i8*
  store i8 %v2_129c8, i8* %v5_129d0, align 1
  %v0_129d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_129d4, label %dec_label_pc_129d8, label %dec_label_pc_129c8.dec_label_pc_129c8_crit_edge

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129c8.dec_label_pc_129c8_crit_edge, %dec_label_pc_129c0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_129c8.dec_label_pc_129c8_crit_edge, { 1, 0 }
}

define i32 @function_129dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_129dc:
  %stack_var_-8 = alloca i32, align 4
  %v2_129e0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_129e0, i32* @r1, align 4
  %v0_129e8 = call i32 @function_149d0()
  %v2_129ec = icmp eq i32 %v0_129e8, 0
  br i1 %v2_129ec, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_129dc
  %v3_129f4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_129dc, %bb
  %v5_129fc = phi i32 [ -1, %dec_label_pc_129dc ], [ %v3_129f4, %bb ]
  ret i32 %v5_129fc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_12a00(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12a00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a00 = load i32, i32* @r4, align 4
  store i32 %v3_12a00, i32* %stack_var_-8, align 4
  %v5_12a04 = inttoptr i32 %arg3 to i32*
  %v6_12a04 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_12a04)
  store i32 %v6_12a04, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_12a04, -4095
  br i1 %tmp, label %dec_label_pc_12a24, label %dec_label_pc_12a14

dec_label_pc_12a14:                               ; preds = %dec_label_pc_12a00
  %v0_12a14 = call i32 @function_128b4()
  %v0_12a18 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a18 = sub i32 0, %v0_12a18
  %v2_12a1c = inttoptr i32 %v0_12a14 to i32*
  store i32 %v1_12a18, i32* %v2_12a1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a24

dec_label_pc_12a24:                               ; preds = %dec_label_pc_12a00, %dec_label_pc_12a14
  %v0_12a24 = phi i32 [ %v6_12a04, %dec_label_pc_12a00 ], [ -1, %dec_label_pc_12a14 ]
  %v2_12a28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a28, i32* @r4, align 4
  ret i32 %v0_12a24

; uselistorder directives
  uselistorder i32 %v6_12a04, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a24, { 1, 0 }
}

define i32 @function_12a2c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12a2c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a2c = load i32, i32* @r4, align 4
  store i32 %v3_12a2c, i32* %stack_var_-8, align 4
  %v5_12a30 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_12a30, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12a30, -4095
  br i1 %tmp, label %dec_label_pc_12a50, label %dec_label_pc_12a40

dec_label_pc_12a40:                               ; preds = %dec_label_pc_12a2c
  %v0_12a40 = call i32 @function_128b4()
  %v0_12a44 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a44 = sub i32 0, %v0_12a44
  %v2_12a48 = inttoptr i32 %v0_12a40 to i32*
  store i32 %v1_12a44, i32* %v2_12a48, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a50

dec_label_pc_12a50:                               ; preds = %dec_label_pc_12a2c, %dec_label_pc_12a40
  %v0_12a50 = phi i32 [ %v5_12a30, %dec_label_pc_12a2c ], [ -1, %dec_label_pc_12a40 ]
  %v2_12a54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a54, i32* @r4, align 4
  ret i32 %v0_12a50

; uselistorder directives
  uselistorder i32 %v5_12a30, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a50, { 1, 0 }
}

define i32 @function_12a58(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12a58:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a58 = load i32, i32* @r4, align 4
  store i32 %v3_12a58, i32* %stack_var_-8, align 4
  %v5_12a5c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_12a5c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12a5c, -4095
  br i1 %tmp, label %dec_label_pc_12a7c, label %dec_label_pc_12a6c

dec_label_pc_12a6c:                               ; preds = %dec_label_pc_12a58
  %v0_12a6c = call i32 @function_128b4()
  %v0_12a70 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a70 = sub i32 0, %v0_12a70
  %v2_12a74 = inttoptr i32 %v0_12a6c to i32*
  store i32 %v1_12a70, i32* %v2_12a74, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a7c

dec_label_pc_12a7c:                               ; preds = %dec_label_pc_12a58, %dec_label_pc_12a6c
  %v0_12a7c = phi i32 [ %v5_12a5c, %dec_label_pc_12a58 ], [ -1, %dec_label_pc_12a6c ]
  %v2_12a80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a80, i32* @r4, align 4
  ret i32 %v0_12a7c

; uselistorder directives
  uselistorder i32 %v5_12a5c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a7c, { 1, 0 }
}

define i32 @function_12a84(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12a84:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a84 = load i32, i32* @r4, align 4
  store i32 %v3_12a84, i32* %stack_var_-8, align 4
  %v5_12a88 = inttoptr i32 %arg3 to i32*
  %v6_12a88 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_12a88)
  store i32 %v6_12a88, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_12a88, -4095
  br i1 %tmp, label %dec_label_pc_12aa8, label %dec_label_pc_12a98

dec_label_pc_12a98:                               ; preds = %dec_label_pc_12a84
  %v0_12a98 = call i32 @function_128b4()
  %v0_12a9c = load i32, i32* %r4.global-to-local, align 4
  %v1_12a9c = sub i32 0, %v0_12a9c
  %v2_12aa0 = inttoptr i32 %v0_12a98 to i32*
  store i32 %v1_12a9c, i32* %v2_12aa0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12aa8

dec_label_pc_12aa8:                               ; preds = %dec_label_pc_12a84, %dec_label_pc_12a98
  %v0_12aa8 = phi i32 [ %v6_12a88, %dec_label_pc_12a84 ], [ -1, %dec_label_pc_12a98 ]
  %v2_12aac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12aac, i32* @r4, align 4
  ret i32 %v0_12aa8

; uselistorder directives
  uselistorder i32 %v6_12a88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12aa8, { 1, 0 }
}

define i32 @function_12ab0(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12ab0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ab0 = load i32, i32* @r4, align 4
  store i32 %v3_12ab0, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12ab8 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_12ab8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12ab8, -4095
  br i1 %tmp, label %dec_label_pc_12ad8, label %dec_label_pc_12ac8

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12ab0
  %v0_12ac8 = call i32 @function_128b4()
  %v0_12acc = load i32, i32* %r4.global-to-local, align 4
  %v1_12acc = sub i32 0, %v0_12acc
  %v2_12ad0 = inttoptr i32 %v0_12ac8 to i32*
  store i32 %v1_12acc, i32* %v2_12ad0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ad8

dec_label_pc_12ad8:                               ; preds = %dec_label_pc_12ab0, %dec_label_pc_12ac8
  %v0_12ad8 = phi i32 [ %v5_12ab8, %dec_label_pc_12ab0 ], [ -1, %dec_label_pc_12ac8 ]
  %v2_12adc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12adc, i32* @r4, align 4
  ret i32 %v0_12ad8

; uselistorder directives
  uselistorder i32 %v5_12ab8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ad8, { 1, 0 }
}

define i32 @function_12ae0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12ae0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ae0 = load i32, i32* @r4, align 4
  store i32 %v3_12ae0, i32* %stack_var_-8, align 4
  %v2_12ae4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_12ae4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12ae4, -4095
  br i1 %tmp, label %dec_label_pc_12b04, label %dec_label_pc_12af4

dec_label_pc_12af4:                               ; preds = %dec_label_pc_12ae0
  %v0_12af4 = call i32 @function_128b4()
  %v0_12af8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12af8 = sub i32 0, %v0_12af8
  %v2_12afc = inttoptr i32 %v0_12af4 to i32*
  store i32 %v1_12af8, i32* %v2_12afc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b04

dec_label_pc_12b04:                               ; preds = %dec_label_pc_12ae0, %dec_label_pc_12af4
  %v0_12b04 = phi i32 [ %v2_12ae4, %dec_label_pc_12ae0 ], [ -1, %dec_label_pc_12af4 ]
  %v2_12b08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12b08, i32* @r4, align 4
  ret i32 %v0_12b04

; uselistorder directives
  uselistorder i32 %v2_12ae4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b04, { 1, 0 }
}

define i32 @function_12b0c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12b0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12b0c = load i32, i32* @r4, align 4
  store i32 %v3_12b0c, i32* %stack_var_-8, align 4
  %v5_12b10 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_12b10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12b10, -4095
  br i1 %tmp, label %dec_label_pc_12b30, label %dec_label_pc_12b20

dec_label_pc_12b20:                               ; preds = %dec_label_pc_12b0c
  %v0_12b20 = call i32 @function_128b4()
  %v0_12b24 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b24 = sub i32 0, %v0_12b24
  %v2_12b28 = inttoptr i32 %v0_12b20 to i32*
  store i32 %v1_12b24, i32* %v2_12b28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b30

dec_label_pc_12b30:                               ; preds = %dec_label_pc_12b0c, %dec_label_pc_12b20
  %v0_12b30 = phi i32 [ %v5_12b10, %dec_label_pc_12b0c ], [ -1, %dec_label_pc_12b20 ]
  %v2_12b34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12b34, i32* @r4, align 4
  ret i32 %v0_12b30

; uselistorder directives
  uselistorder i32 %v5_12b10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b30, { 1, 0 }
}

define i32 @function_12b38(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12b38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12b38 = load i32, i32* @r4, align 4
  store i32 %v3_12b38, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12b44 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_12b44, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12b44, -4095
  br i1 %tmp, label %dec_label_pc_12b64, label %dec_label_pc_12b54

dec_label_pc_12b54:                               ; preds = %dec_label_pc_12b38
  %v0_12b54 = call i32 @function_128b4()
  %v0_12b58 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b58 = sub i32 0, %v0_12b58
  %v2_12b5c = inttoptr i32 %v0_12b54 to i32*
  store i32 %v1_12b58, i32* %v2_12b5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b64

dec_label_pc_12b64:                               ; preds = %dec_label_pc_12b38, %dec_label_pc_12b54
  %v0_12b64 = phi i32 [ %v5_12b44, %dec_label_pc_12b38 ], [ -1, %dec_label_pc_12b54 ]
  %v2_12b68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12b68, i32* @r4, align 4
  ret i32 %v0_12b64

; uselistorder directives
  uselistorder i32 %v5_12b44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b64, { 1, 0 }
}

define i32 @function_12b6c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12b6c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12b6c = load i32, i32* @r4, align 4
  store i32 %v3_12b6c, i32* %stack_var_-8, align 4
  %v5_12b70 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_12b70, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12b70, -4095
  br i1 %tmp, label %dec_label_pc_12b90, label %dec_label_pc_12b80

dec_label_pc_12b80:                               ; preds = %dec_label_pc_12b6c
  %v0_12b80 = call i32 @function_128b4()
  %v0_12b84 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b84 = sub i32 0, %v0_12b84
  %v2_12b88 = inttoptr i32 %v0_12b80 to i32*
  store i32 %v1_12b84, i32* %v2_12b88, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b90

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b6c, %dec_label_pc_12b80
  %v0_12b90 = phi i32 [ %v5_12b70, %dec_label_pc_12b6c ], [ -1, %dec_label_pc_12b80 ]
  %v2_12b94 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12b94, i32* @r4, align 4
  ret i32 %v0_12b90

; uselistorder directives
  uselistorder i32 %v5_12b70, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b90, { 1, 0 }
}

define i32 @function_12b98(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12b98:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12b98 = load i32, i32* @r4, align 4
  store i32 %v3_12b98, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12ba4 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_12ba4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12ba4, -4095
  br i1 %tmp, label %dec_label_pc_12bc4, label %dec_label_pc_12bb4

dec_label_pc_12bb4:                               ; preds = %dec_label_pc_12b98
  %v0_12bb4 = call i32 @function_128b4()
  %v0_12bb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12bb8 = sub i32 0, %v0_12bb8
  %v2_12bbc = inttoptr i32 %v0_12bb4 to i32*
  store i32 %v1_12bb8, i32* %v2_12bbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12bc4

dec_label_pc_12bc4:                               ; preds = %dec_label_pc_12b98, %dec_label_pc_12bb4
  %v0_12bc4 = phi i32 [ %v5_12ba4, %dec_label_pc_12b98 ], [ -1, %dec_label_pc_12bb4 ]
  %v2_12bc8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12bc8, i32* @r4, align 4
  ret i32 %v0_12bc4

; uselistorder directives
  uselistorder i32 %v5_12ba4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bc4, { 1, 0 }
}

define i32 @function_12bcc(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12bcc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12bcc = load i32, i32* @r4, align 4
  store i32 %v3_12bcc, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12bd4 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_12bd4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12bd4, -4095
  br i1 %tmp, label %dec_label_pc_12bf4, label %dec_label_pc_12be4

dec_label_pc_12be4:                               ; preds = %dec_label_pc_12bcc
  %v0_12be4 = call i32 @function_128b4()
  %v0_12be8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12be8 = sub i32 0, %v0_12be8
  %v2_12bec = inttoptr i32 %v0_12be4 to i32*
  store i32 %v1_12be8, i32* %v2_12bec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12bf4

dec_label_pc_12bf4:                               ; preds = %dec_label_pc_12bcc, %dec_label_pc_12be4
  %v0_12bf4 = phi i32 [ %v5_12bd4, %dec_label_pc_12bcc ], [ -1, %dec_label_pc_12be4 ]
  %v2_12bf8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12bf8, i32* @r4, align 4
  ret i32 %v0_12bf4

; uselistorder directives
  uselistorder i32 %v5_12bd4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bf4, { 1, 0 }
}

define i32 @function_12bfc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12bfc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12bfc = load i32, i32* @r4, align 4
  store i32 %v3_12bfc, i32* %stack_var_-8, align 4
  %v3_12c00 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_12c00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12c00, -4095
  br i1 %tmp, label %dec_label_pc_12c20, label %dec_label_pc_12c10

dec_label_pc_12c10:                               ; preds = %dec_label_pc_12bfc
  %v0_12c10 = call i32 @function_128b4()
  %v0_12c14 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c14 = sub i32 0, %v0_12c14
  %v2_12c18 = inttoptr i32 %v0_12c10 to i32*
  store i32 %v1_12c14, i32* %v2_12c18, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12bfc, %dec_label_pc_12c10
  %v0_12c20 = phi i32 [ %v3_12c00, %dec_label_pc_12bfc ], [ -1, %dec_label_pc_12c10 ]
  %v2_12c24 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12c24, i32* @r4, align 4
  ret i32 %v0_12c20

; uselistorder directives
  uselistorder i32 %v3_12c00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c20, { 1, 0 }
}

define i32 @function_12c28(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c28:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_12c44, label %dec_label_pc_12c34

dec_label_pc_12c34:                               ; preds = %dec_label_pc_12c28
  %v8_12c38 = icmp sgt i32 %arg1, 64
  br i1 %v8_12c38, label %dec_label_pc_12c44, label %dec_label_pc_12c3c

dec_label_pc_12c3c:                               ; preds = %dec_label_pc_12c34
  %v0_12c40 = call i32 @function_12d4c()
  br label %dec_label_pc_12c44

dec_label_pc_12c44:                               ; preds = %dec_label_pc_12c34, %dec_label_pc_12c28, %dec_label_pc_12c3c
  %v0_12c44 = call i32 @function_128b4()
  %v2_12c4c = inttoptr i32 %v0_12c44 to i32*
  store i32 22, i32* %v2_12c4c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c44, { 2, 0, 1 }
}

define i32 @function_12c58(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c58:
  store i32 128, i32* @r2, align 4
  %v0_12c64 = load i32, i32* @r0, align 4
  %v2_12c64 = inttoptr i32 %v0_12c64 to i8*
  %v3_12c64 = call i32 @function_12920(i8* %v2_12c64, i32 0)
  ret i32 0
}

define i32 @function_12c70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c70:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12c70 = load i32, i32* @r4, align 4
  store i32 %v3_12c70, i32* %stack_var_-12, align 4
  %v6_12c70 = load i32, i32* @r5, align 4
  %v10_12c70 = ptrtoint i32* %stack_var_-12 to i32
  %v7_12c74 = icmp eq i32 %arg2, -1
  %v0_12c80.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_12c74, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12c70
  br label %dec_label_pc_12c98

bb:                                               ; preds = %dec_label_pc_12c70
  %v2_12c7c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_12c80.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_12c80.pre, 1
  br i1 %tmp19, label %dec_label_pc_12c98, label %dec_label_pc_12c88

dec_label_pc_12c88:                               ; preds = %bb
  %v7_12c8c = icmp sgt i32 %v0_12c80.pre, 64
  br i1 %v7_12c8c, label %dec_label_pc_12c98, label %bb20

bb20:                                             ; preds = %dec_label_pc_12c88
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_12cbc24 = add i32 %v10_12c70, 124
  store i32 %v5_12cbc24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12cac

dec_label_pc_12c98:                               ; preds = %.thread, %dec_label_pc_12c88, %bb
  %v0_12c98 = call i32 @function_128b4()
  store i32 %v0_12c98, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12ca4 = inttoptr i32 %v0_12c98 to i32*
  store i32 22, i32* %v2_12ca4, align 4
  %v0_12d18.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d18

dec_label_pc_12cac:                               ; preds = %bb20, %dec_label_pc_12cac
  %v5_12cbc25 = phi i32 [ %v5_12cbc24, %bb20 ], [ %v5_12cbc, %dec_label_pc_12cac ]
  %v2_12cb0 = add i32 %v5_12cbc25, -136
  %v3_12cb0 = inttoptr i32 %v2_12cb0 to i32*
  store i32 0, i32* %v3_12cb0, align 4
  %v0_12cb4.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_12cb4 = add i32 %v0_12cb4.pre, -1
  store i32 %v1_12cb4, i32* %r0.global-to-local, align 4
  %v6_12cb4 = icmp slt i32 %v1_12cb4, 0
  %v4_12cbc = mul i32 %v1_12cb4, 4
  %v5_12cbc = add i32 %v4_12cbc, %v10_12c70
  store i32 %v5_12cbc, i32* %r2.global-to-local, align 4
  br i1 %v6_12cb4, label %dec_label_pc_12cc4, label %dec_label_pc_12cac

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cac
  %v2_12cc4 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_12cc4, i32* @r5, align 4
  %v2_12cc8 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_12cc8, i32* @r0, align 4
  %v0_12ccc = load i32, i32* @r4, align 4
  store i32 %v0_12ccc, i32* @r1, align 4
  %v0_12cd0 = call i32 @function_12d4c()
  store i32 %v0_12cd0, i32* %r0.global-to-local, align 4
  %v1_12cd4 = icmp slt i32 %v0_12cd0, 0
  br i1 %v1_12cd4, label %dec_label_pc_12d14, label %dec_label_pc_12cdc

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12cc4
  %v0_12cdc = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1dacc.714 to i32), i32* %r0.global-to-local, align 4
  %v2_12ce4 = call i32 @function_12d28(i32 ptrtoint (i32* @global_var_1dacc.714 to i32), i32 %v0_12cdc)
  store i32 %v2_12c7c, i32* %r2.global-to-local, align 4
  %v0_12cfc = load i32, i32* @r4, align 4
  store i32 %v0_12cfc, i32* %r0.global-to-local, align 4
  %v4_12d04 = call i32 @function_13c14(i32 %v0_12cfc, i32* nonnull %stack_var_-152, i32 %v2_12c7c)
  store i32 %v4_12d04, i32* %r0.global-to-local, align 4
  %v1_12d08 = icmp slt i32 %v4_12d04, 0
  br i1 %v1_12d08, label %dec_label_pc_12d14, label %bb23

bb23:                                             ; preds = %dec_label_pc_12cdc
  %v5_12d0c = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_12d0c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d18

dec_label_pc_12d14:                               ; preds = %dec_label_pc_12cdc, %dec_label_pc_12cc4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d18

dec_label_pc_12d18:                               ; preds = %bb23, %dec_label_pc_12c98, %dec_label_pc_12d14
  %v0_12d18 = phi i32 [ %v5_12d0c, %bb23 ], [ %v0_12d18.pre, %dec_label_pc_12c98 ], [ -1, %dec_label_pc_12d14 ]
  store i32 %v0_12d18, i32* %r0.global-to-local, align 4
  %v2_12d20 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12d20, i32* @r4, align 4
  store i32 %v6_12c70, i32* @r5, align 4
  ret i32 %v0_12d18

; uselistorder directives
  uselistorder i32 %v0_12d18, { 1, 0 }
  uselistorder i32 %v5_12cbc, { 1, 0 }
  uselistorder i32 %v1_12cb4, { 0, 2, 1 }
  uselistorder i32 %v2_12c7c, { 1, 0 }
  uselistorder i32 %v0_12c80.pre, { 1, 0, 2 }
  uselistorder i32 %v10_12c70, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12d18, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12cac, { 1, 0 }
  uselistorder label %dec_label_pc_12c98, { 1, 2, 0 }
}

define i32 @function_12d28(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d28:
  %v1_12d28 = add i32 %arg2, -1
  %v3_12d2c = udiv i32 %v1_12d28, 32
  %v4_12d30 = mul nuw nsw i32 %v3_12d2c, 4
  %v5_12d30 = add i32 %v4_12d30, %arg1
  %v6_12d30 = inttoptr i32 %v5_12d30 to i32*
  %v7_12d30 = load i32, i32* %v6_12d30, align 4
  %v1_12d34 = urem i32 %v1_12d28, 32
  %v7_12d3c = shl i32 1, %v1_12d34
  %v8_12d3c = and i32 %v7_12d30, %v7_12d3c
  %v10_12d3c = icmp ne i32 %v8_12d3c, 0
  %. = zext i1 %v10_12d3c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_12d28, { 1, 0 }
}

define i32 @function_12d4c() local_unnamed_addr {
dec_label_pc_12d4c:
  %v0_12d4c = load i32, i32* @r1, align 4
  %v1_12d4c = add i32 %v0_12d4c, -1
  %v3_12d50 = udiv i32 %v1_12d4c, 32
  %v0_12d54 = load i32, i32* @r0, align 4
  %v4_12d54 = mul nuw nsw i32 %v3_12d50, 4
  %v5_12d54 = add i32 %v0_12d54, %v4_12d54
  %v6_12d54 = inttoptr i32 %v5_12d54 to i32*
  %v7_12d54 = load i32, i32* %v6_12d54, align 4
  %v1_12d58 = urem i32 %v1_12d4c, 32
  %v7_12d60 = shl i32 1, %v1_12d58
  %v8_12d60 = or i32 %v7_12d54, %v7_12d60
  store i32 %v8_12d60, i32* %v6_12d54, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12d4c, { 1, 0 }
}

define i32 @function_12d70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d70:
  %v1_12d70 = add i32 %arg2, -1
  %v3_12d74 = udiv i32 %v1_12d70, 32
  %v4_12d78 = mul nuw nsw i32 %v3_12d74, 4
  %v5_12d78 = add i32 %v4_12d78, %arg1
  %v6_12d78 = inttoptr i32 %v5_12d78 to i32*
  %v7_12d78 = load i32, i32* %v6_12d78, align 4
  %v1_12d7c = urem i32 %v1_12d70, 32
  %tmp = shl i32 -1, %v1_12d7c
  %v8_12d84 = add i32 %tmp, -1
  %v9_12d84 = and i32 %v7_12d78, %v8_12d84
  store i32 %v9_12d84, i32* %v6_12d78, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12d70, { 1, 0 }
}

define i32 @function_12d94(i32 %arg1) local_unnamed_addr {
dec_label_pc_12d94:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12d94 = load i32, i32* @r4, align 4
  %v6_12d94 = load i32, i32* @r5, align 4
  %v9_12d94 = load i32, i32* @r6, align 4
  %v0_12d98 = load i32, i32* %r0.global-to-local, align 4
  %v2_12d98 = icmp eq i32 %v0_12d98, 0
  %v2_12d9c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_12d98, label %bb, label %dec_label_pc_12da8

bb:                                               ; preds = %dec_label_pc_12d94
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12db0

dec_label_pc_12da8:                               ; preds = %dec_label_pc_12d94
  %tmp = icmp ugt i32 %v0_12d98, -8
  br i1 %tmp, label %dec_label_pc_12eb4, label %dec_label_pc_12db0

dec_label_pc_12db0:                               ; preds = %bb, %dec_label_pc_12da8
  %v0_12db0 = phi i32 [ %v0_12d98, %dec_label_pc_12da8 ], [ 1, %bb ]
  %v1_12db0 = add i32 %v0_12db0, 4
  store i32 %v1_12db0, i32* %stack_var_-20, align 4
  store i32 %v2_12d9c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d8bc.716 to i32), i32* %r0.global-to-local, align 4
  %v1_12dc8 = call i32 @function_13928()
  store i32 ptrtoint (i32** @global_var_1d700.720 to i32), i32* %r0.global-to-local, align 4
  %v3_12dd4 = call i32 @function_13148(i32* bitcast (i32** @global_var_1d700.720 to i32*), i32 %v2_12d9c)
  store i32 %v3_12dd4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d8bc.716 to i32), i32* %r0.global-to-local, align 4
  store i32 77292, i32* @lr, align 4
  %v1_12de8 = call i32 @function_13928()
  store i32 %v1_12de8, i32* %r0.global-to-local, align 4
  %v2_12dec = icmp eq i32 %v3_12dd4, 0
  br i1 %v2_12dec, label %dec_label_pc_12df4, label %dec_label_pc_12ea4

dec_label_pc_12df4:                               ; preds = %dec_label_pc_12db0
  %v2_12df8 = load i32, i32* @global_var_1d8e4.723, align 4
  store i32 %v2_12df8, i32* @r4, align 4
  %v2_12dfc = load i32, i32* %stack_var_-20, align 4
  %v3_12e00 = icmp ult i32 %v2_12dfc, %v2_12df8
  br i1 %v3_12e00, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_12df4
  %v3_12e04 = add i32 %v2_12df8, -1
  %v2_12e08 = add i32 %v3_12e04, %v2_12dfc
  %v2_12e0c = sub i32 0, %v2_12df8
  %v3_12e10 = and i32 %v2_12e08, %v2_12e0c
  store i32 %v3_12e10, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12df4, %bb14
  store i32 ptrtoint (i32* @global_var_1db4c.725 to i32), i32* %r0.global-to-local, align 4
  %v1_12e1c = call i32 @function_13928()
  %v0_12e20 = load i32, i32* @r4, align 4
  store i32 %v0_12e20, i32* %r0.global-to-local, align 4
  %v1_12e24 = call i32 @function_140dc(i32 %v0_12e20)
  store i32 %v1_12e24, i32* %r0.global-to-local, align 4
  %v7_12e28 = icmp eq i32 %v1_12e24, -1
  br i1 %v7_12e28, label %bb15, label %dec_label_pc_12e34

bb15:                                             ; preds = %.thread3
  store i32 %v1_12e24, i32* @r5, align 4
  br label %dec_label_pc_12e48

dec_label_pc_12e34:                               ; preds = %.thread3
  %v1_12e34 = add i32 %v1_12e24, 3
  %v1_12e38 = and i32 %v1_12e34, -4
  store i32 %v1_12e38, i32* @r5, align 4
  %v9_12e3c = icmp eq i32 %v1_12e38, %v1_12e24
  br i1 %v9_12e3c, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_12e34
  %v3_12e40 = sub i32 %v1_12e38, %v1_12e24
  store i32 %v3_12e40, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_12e34, %bb16
  %v1_12e44 = xor i1 %v9_12e3c, true
  call void @__pseudo_cond_branch(i1 %v1_12e44, i32 ptrtoint (i32* @global_var_140dc.726 to i32))
  br label %dec_label_pc_12e48

dec_label_pc_12e48:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1db4c.725 to i32), i32* %r0.global-to-local, align 4
  store i32 77400, i32* @lr, align 4
  %v1_12e54 = call i32 @function_13928()
  store i32 %v1_12e54, i32* %r0.global-to-local, align 4
  %v0_12e58 = load i32, i32* @r5, align 4
  %v7_12e58 = icmp eq i32 %v0_12e58, -1
  br i1 %v7_12e58, label %dec_label_pc_12eb4, label %dec_label_pc_12e60

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e48
  store i32 ptrtoint (i32* @global_var_1d8bc.716 to i32), i32* %r0.global-to-local, align 4
  %v1_12e6c = call i32 @function_13928()
  %v0_12e70 = load i32, i32* @r4, align 4
  %v0_12e74 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1d700.720 to i32), i32* %r0.global-to-local, align 4
  %v4_12e7c = call i32 @function_1329c(i32* bitcast (i32** @global_var_1d700.720 to i32*), i32 %v0_12e74, i32 %v0_12e70)
  store i32 ptrtoint (i32** @global_var_1d700.720 to i32), i32* %r0.global-to-local, align 4
  %v3_12e88 = call i32 @function_13148(i32* bitcast (i32** @global_var_1d700.720 to i32*), i32 %v2_12d9c)
  store i32 %v3_12e88, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d8bc.716 to i32), i32* %r0.global-to-local, align 4
  store i32 77468, i32* @lr, align 4
  %v1_12e98 = call i32 @function_13928()
  store i32 %v1_12e98, i32* %r0.global-to-local, align 4
  %v2_12e9c = icmp eq i32 %v3_12e88, 0
  br i1 %v2_12e9c, label %dec_label_pc_12eb4, label %dec_label_pc_12ea4

dec_label_pc_12ea4:                               ; preds = %dec_label_pc_12db0, %dec_label_pc_12e60
  %v1_12ea8 = phi i32 [ %v3_12dd4, %dec_label_pc_12db0 ], [ %v3_12e88, %dec_label_pc_12e60 ]
  %v2_12ea4 = load i32, i32* %stack_var_-20, align 4
  %v2_12ea8 = inttoptr i32 %v1_12ea8 to i32*
  store i32 %v2_12ea4, i32* %v2_12ea8, align 4
  %v3_12ea8 = load i32, i32* %r4.global-to-local, align 4
  %v4_12ea8 = add i32 %v3_12ea8, 4
  store i32 %v4_12ea8, i32* %r4.global-to-local, align 4
  %v2_12eac = icmp eq i32 %v4_12ea8, 0
  br i1 %v2_12eac, label %dec_label_pc_12eb4, label %dec_label_pc_12ec4

dec_label_pc_12eb4:                               ; preds = %dec_label_pc_12ea4, %dec_label_pc_12e60, %dec_label_pc_12e48, %dec_label_pc_12da8
  %v0_12eb4 = call i32 @function_128b4()
  store i32 %v0_12eb4, i32* %r0.global-to-local, align 4
  %v2_12ebc = inttoptr i32 %v0_12eb4 to i32*
  store i32 12, i32* %v2_12ebc, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ec4

dec_label_pc_12ec4:                               ; preds = %dec_label_pc_12ea4, %dec_label_pc_12eb4
  %v0_12ec4 = phi i32 [ %v4_12ea8, %dec_label_pc_12ea4 ], [ 0, %dec_label_pc_12eb4 ]
  store i32 %v0_12ec4, i32* %r0.global-to-local, align 4
  store i32 %v3_12d94, i32* @r4, align 4
  store i32 %v6_12d94, i32* @r5, align 4
  store i32 %v9_12d94, i32* @r6, align 4
  ret i32 %v0_12ec4

; uselistorder directives
  uselistorder i32 %v0_12ec4, { 1, 0 }
  uselistorder i32 %v3_12e88, { 1, 0, 2 }
  uselistorder i32 %v1_12e38, { 1, 0, 2 }
  uselistorder i32 %v1_12e24, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_12dd4, { 1, 0, 2 }
  uselistorder i32 %v0_12d98, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 4, 6, 8, 9, 10, 3, 12, 11, 16, 14, 13, 2, 15, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_12ec4, { 1, 0 }
  uselistorder label %dec_label_pc_12ea4, { 1, 0 }
  uselistorder label %dec_label_pc_12e48, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12db0, { 1, 0 }
}

define i32 @function_12ee8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12ee8:
  %stack_var_-12 = alloca i32, align 4
  %v3_12ee8 = load i32, i32* @r4, align 4
  store i32 %v3_12ee8, i32* %stack_var_-12, align 4
  %v6_12ee8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_12ef0 = mul i32 %arg2, %arg1
  store i32 %v2_12ef0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12ef4 = icmp eq i32 %arg1, 0
  store i32 %v2_12ef0, i32* @r0, align 4
  br i1 %v2_12ef4, label %dec_label_pc_12f20, label %dec_label_pc_12f00

dec_label_pc_12f00:                               ; preds = %dec_label_pc_12ee8
  %v0_12f00 = call i32 @function_11f58()
  %v0_12f04 = load i32, i32* @r5, align 4
  %v9_12f04 = icmp eq i32 %v0_12f04, %v0_12f00
  store i32 0, i32* @r5, align 4
  br i1 %v9_12f04, label %dec_label_pc_12f00.dec_label_pc_12f20_crit_edge, label %dec_label_pc_12f10

dec_label_pc_12f00.dec_label_pc_12f20_crit_edge:  ; preds = %dec_label_pc_12f00
  %v0_12f20.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12f20

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12f00
  %v0_12f10 = call i32 @function_128b4()
  %v2_12f18 = inttoptr i32 %v0_12f10 to i32*
  store i32 12, i32* %v2_12f18, align 4
  br label %dec_label_pc_12f38

dec_label_pc_12f20:                               ; preds = %dec_label_pc_12f00.dec_label_pc_12f20_crit_edge, %dec_label_pc_12ee8
  %v0_12f20 = phi i32 [ %v0_12f20.pre, %dec_label_pc_12f00.dec_label_pc_12f20_crit_edge ], [ %v2_12ef0, %dec_label_pc_12ee8 ]
  %v1_12f24 = call i32 @function_12d94(i32 %v0_12f20)
  store i32 %v1_12f24, i32* @r5, align 4
  %v0_12f2c = load i32, i32* @r4, align 4
  store i32 %v0_12f2c, i32* @r2, align 4
  store i32 77624, i32* @lr, align 4
  %v1_12f34 = icmp ne i32 %v1_12f24, 0
  call void @__pseudo_cond_branch(i1 %v1_12f34, i32 ptrtoint (i32* @global_var_12920.727 to i32))
  br label %dec_label_pc_12f38

dec_label_pc_12f38:                               ; preds = %dec_label_pc_12f10, %dec_label_pc_12f20
  %v0_12f38 = load i32, i32* @r5, align 4
  %v2_12f3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12f3c, i32* @r4, align 4
  store i32 %v6_12ee8, i32* @r5, align 4
  ret i32 %v0_12f38

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12f38, { 1, 0 }
}

define i32 @function_12f40() local_unnamed_addr {
dec_label_pc_12f40:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_12f40 = load i32, i32* @r0, align 4
  %v2_12f40 = icmp eq i32 %v0_12f40, 0
  %v3_12f44 = load i32, i32* @r4, align 4
  store i32 %v3_12f44, i32* %stack_var_-24, align 4
  %v6_12f44 = load i32, i32* @r5, align 4
  %v9_12f44 = load i32, i32* @r6, align 4
  %v15_12f44 = load i32, i32* @r8, align 4
  br i1 %v2_12f40, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_12f40
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_12f40
  %v1_12f4c = add i32 %v0_12f40, -4
  %v2_12f4c = inttoptr i32 %v1_12f4c to i32*
  %v3_12f4c = load i32, i32* %v2_12f4c, align 4
  store i32 %v3_12f4c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1d700.720 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_12f4c, i32* @r4, align 4
  %v1_12f64 = call i32 @function_13928()
  %v0_12f68 = load i32, i32* @r4, align 4
  %v0_12f6c = load i32, i32* @r5, align 4
  %v4_12f74 = call i32 @function_1329c(i32* bitcast (i32** @global_var_1d700.720 to i32*), i32 %v0_12f68, i32 %v0_12f6c)
  %v1_12f7c = inttoptr i32 %v4_12f74 to i32*
  %v2_12f7c = load i32, i32* %v1_12f7c, align 4
  store i32 %v2_12f7c, i32* %r6.global-to-local, align 4
  %v2_12f80 = load i32, i32* @global_var_1d8e4.723, align 4
  %v4_12f84 = mul i32 %v2_12f80, 8
  %v6_12f84 = icmp ult i32 %v2_12f7c, %v4_12f84
  store i32 %v4_12f74, i32* @r4, align 4
  br i1 %v6_12f84, label %dec_label_pc_12fc4, label %dec_label_pc_12f90

dec_label_pc_12f90:                               ; preds = %bb11
  %v1_12f98 = call i32 @function_13928()
  %v1_12fa0 = call i32 @function_140dc(i32 0)
  %v0_12fa4 = load i32, i32* @r4, align 4
  %v1_12fa4 = add i32 %v0_12fa4, 12
  store i32 %v1_12fa4, i32* @r5, align 4
  %v9_12fa8 = icmp eq i32 %v1_12fa4, %v1_12fa0
  br i1 %v9_12fa8, label %dec_label_pc_12fcc, label %dec_label_pc_12fb0

dec_label_pc_12fb0:                               ; preds = %dec_label_pc_12f90
  %v1_12fbc = call i32 @function_13928()
  br label %dec_label_pc_12fc4

dec_label_pc_12fc4:                               ; preds = %bb11, %dec_label_pc_12fb0, %bb14
  %v2_12fc4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12fc4, i32* @r4, align 4
  store i32 %v6_12f44, i32* @r5, align 4
  store i32 %v9_12f44, i32* %r6.global-to-local, align 4
  store i32 %v15_12f44, i32* %r8.global-to-local, align 4
  %v0_12fc8 = call i32 @function_13928()
  %v0_12fcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12fcc

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12f90, %dec_label_pc_12fc4
  %v1_12fd4 = phi i32 [ %v0_12fa4, %dec_label_pc_12f90 ], [ %v0_12fcc.pre, %dec_label_pc_12fc4 ]
  %v1_12fcc = add i32 %v1_12fd4, 4
  %v2_12fcc = inttoptr i32 %v1_12fcc to i32*
  %v3_12fcc = load i32, i32* %v2_12fcc, align 4
  %v2_12fd0 = icmp eq i32 %v3_12fcc, 0
  br i1 %v2_12fd0, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_12fcc
  %v2_12fd4 = add i32 %v1_12fd4, 8
  %v3_12fd4 = inttoptr i32 %v2_12fd4 to i32*
  %v4_12fd4 = load i32, i32* %v3_12fd4, align 4
  %v3_12fd8 = add i32 %v3_12fcc, 8
  %v4_12fd8 = inttoptr i32 %v3_12fd8 to i32*
  store i32 %v4_12fd4, i32* %v4_12fd8, align 4
  %v0_12fdc.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12fcc, %bb12
  %v0_12fdc = phi i32 [ %v1_12fd4, %dec_label_pc_12fcc ], [ %v0_12fdc.pre, %bb12 ]
  %v1_12fdc = add i32 %v0_12fdc, 8
  %v2_12fdc = inttoptr i32 %v1_12fdc to i32*
  %v3_12fdc = load i32, i32* %v2_12fdc, align 4
  %v1_12fe0 = add i32 %v0_12fdc, 4
  %v2_12fe0 = inttoptr i32 %v1_12fe0 to i32*
  %v3_12fe0 = load i32, i32* %v2_12fe0, align 4
  %v2_12fe4 = icmp eq i32 %v3_12fdc, 0
  br i1 %v2_12fe4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_12fe8 = add i32 %v3_12fdc, 4
  %v4_12fe8 = inttoptr i32 %v3_12fe8 to i32*
  store i32 %v3_12fe0, i32* %v4_12fe8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_12fec = load i32, i32* %r8.global-to-local, align 4
  %v3_12fec = inttoptr i32 %v2_12fec to i32*
  store i32 %v3_12fe0, i32* %v3_12fec, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_12ffc = call i32 @function_13928()
  %v0_13000 = load i32, i32* %r6.global-to-local, align 4
  %v1_13000 = load i32, i32* @r4, align 4
  %v0_13008 = load i32, i32* @r5, align 4
  %v2_13000 = sub i32 12, %v0_13000
  %v1_13004 = add i32 %v2_13000, %v1_13000
  %v2_13008 = sub i32 %v1_13004, %v0_13008
  %v1_1300c = call i32 @function_140dc(i32 %v2_13008)
  br label %dec_label_pc_12fc4

; uselistorder directives
  uselistorder i32 %v0_12fdc, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_140dc, { 0, 2, 1 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_12fcc, { 1, 0 }
  uselistorder label %dec_label_pc_12fc4, { 2, 1, 0 }
}

define i32 @function_13030(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13030:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_13030 = load i32, i32* @r4, align 4
  store i32 %v3_13030, i32* %stack_var_-24, align 4
  %v6_13030 = load i32, i32* @r5, align 4
  %v9_13030 = load i32, i32* @r6, align 4
  %v12_13030 = load i32, i32* @r7, align 4
  %v15_13030 = load i32, i32* @r8, align 4
  %v18_13030 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_13034 = icmp eq i32 %arg2, 0
  %v0_13038 = load i32, i32* @r0, align 4
  store i32 %v0_13038, i32* @r7, align 4
  br i1 %v2_13034, label %dec_label_pc_13040, label %dec_label_pc_13048

dec_label_pc_13040:                               ; preds = %dec_label_pc_13030
  %v0_13040 = call i32 @function_12f40()
  %v0_13050.pre = load i32, i32* @r4, align 4
  %v2_13054.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_13050

dec_label_pc_13048:                               ; preds = %dec_label_pc_13030
  %v2_13048 = icmp eq i32 %v0_13038, 0
  br i1 %v2_13048, label %dec_label_pc_13050, label %dec_label_pc_1305c

dec_label_pc_13050:                               ; preds = %dec_label_pc_13048, %dec_label_pc_13040
  %v2_13054 = phi i32 [ %v3_13030, %dec_label_pc_13048 ], [ %v2_13054.pre, %dec_label_pc_13040 ]
  %v0_13050 = phi i32 [ %arg2, %dec_label_pc_13048 ], [ %v0_13050.pre, %dec_label_pc_13040 ]
  store i32 %v2_13054, i32* @r4, align 4
  store i32 %v6_13030, i32* @r5, align 4
  store i32 %v9_13030, i32* @r6, align 4
  store i32 %v12_13030, i32* @r7, align 4
  store i32 %v18_13030, i32* @lr, align 4
  %v1_13058 = call i32 @function_12d94(i32 %v0_13050)
  %v0_1305c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1305c

dec_label_pc_1305c:                               ; preds = %dec_label_pc_13048, %dec_label_pc_13050
  %v0_13074 = phi i32 [ %v0_13038, %dec_label_pc_13048 ], [ %v1_13058, %dec_label_pc_13050 ]
  %v0_1305c = phi i32 [ %arg2, %dec_label_pc_13048 ], [ %v0_1305c.pre, %dec_label_pc_13050 ]
  %v1_1305c = add i32 %v0_1305c, 7
  %v1_13060 = and i32 %v1_1305c, -4
  store i32 %v1_13060, i32* @r5, align 4
  %v2_13064 = icmp ugt i32 %v1_13060, 10
  %v1_13068 = add i32 %v0_13074, -4
  %v2_13068 = inttoptr i32 %v1_13068 to i32*
  %v3_13068 = load i32, i32* %v2_13068, align 4
  store i32 %v3_13068, i32* @r6, align 4
  br i1 %v2_13064, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_1305c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_1305c, %bb
  %v0_130f0 = phi i32 [ %v1_13060, %dec_label_pc_1305c ], [ 12, %bb ]
  store i32 %v1_13068, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_130f0, %v3_13068
  br i1 %tmp, label %dec_label_pc_1307c, label %dec_label_pc_130f0

dec_label_pc_1307c:                               ; preds = %bb14
  %v2_13070 = sub i32 %v0_130f0, %v3_13068
  %v1_1308c = call i32 @function_13928()
  %v0_13094 = load i32, i32* @r8, align 4
  %v1_13094 = load i32, i32* @r6, align 4
  %v2_13094 = add i32 %v1_13094, %v0_13094
  %v4_1309c = call i32 @function_131dc(i32* bitcast (i32** @global_var_1d700.720 to i32*), i32 %v2_13094, i32 %v2_13070)
  store i32 %v4_1309c, i32* @r4, align 4
  store i32 78004, i32* @lr, align 4
  %v1_130b0 = call i32 @function_13928()
  %v0_130b4 = load i32, i32* @r4, align 4
  %v2_130b4 = icmp eq i32 %v0_130b4, 0
  br i1 %v2_130b4, label %dec_label_pc_130c4, label %.thread

.thread:                                          ; preds = %dec_label_pc_1307c
  %v1_130b8 = load i32, i32* @r6, align 4
  %v3_130b8 = add i32 %v1_130b8, %v0_130b4
  %v2_130bc = load i32, i32* @r7, align 4
  %v3_130bc = add i32 %v2_130bc, -4
  %v4_130bc = inttoptr i32 %v3_130bc to i32*
  store i32 %v3_130b8, i32* %v4_130bc, align 4
  br label %dec_label_pc_13130

dec_label_pc_130c4:                               ; preds = %dec_label_pc_1307c
  %v0_130c4 = load i32, i32* @r5, align 4
  %v1_130c4 = add i32 %v0_130c4, -4
  %v1_130c8 = call i32 @function_12d94(i32 %v1_130c4)
  store i32 %v1_130c8, i32* @r0, align 4
  store i32 %v1_130c8, i32* @r4, align 4
  %v2_130cc = icmp eq i32 %v1_130c8, 0
  br i1 %v2_130cc, label %dec_label_pc_130e8, label %dec_label_pc_130d4

dec_label_pc_130d4:                               ; preds = %dec_label_pc_130c4
  %v0_130d4 = load i32, i32* @r6, align 4
  %v1_130d4 = add i32 %v0_130d4, -4
  store i32 %v1_130d4, i32* @r2, align 4
  %v0_130d8 = load i32, i32* @r7, align 4
  store i32 %v0_130d8, i32* @r1, align 4
  %v3_130dc = call i32 @function_12900(i32 %v1_130c8, i32 %v0_130d8, i32 %v1_130d4)
  %v0_130e0 = load i32, i32* @r7, align 4
  store i32 %v0_130e0, i32* @r0, align 4
  %v0_130e4 = call i32 @function_12f40()
  %v0_130e8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_130e8

dec_label_pc_130e8:                               ; preds = %dec_label_pc_130c4, %dec_label_pc_130d4
  %v0_130e8 = phi i32 [ 0, %dec_label_pc_130c4 ], [ %v0_130e8.pre, %dec_label_pc_130d4 ]
  store i32 %v0_130e8, i32* @r7, align 4
  br label %dec_label_pc_13130

dec_label_pc_130f0:                               ; preds = %bb14
  %v1_130f0 = add i32 %v0_130f0, 28
  %tmp15 = icmp ugt i32 %v1_130f0, %v3_13068
  br i1 %tmp15, label %dec_label_pc_13130, label %dec_label_pc_130fc

dec_label_pc_130fc:                               ; preds = %dec_label_pc_130f0
  %v1_13108 = call i32 @function_13928()
  %v0_1310c = load i32, i32* @r8, align 4
  %v1_1310c = load i32, i32* @r5, align 4
  %v2_1310c = add i32 %v1_1310c, %v0_1310c
  %v1_13110 = load i32, i32* @r6, align 4
  %v2_13110 = sub i32 %v1_13110, %v1_1310c
  %v4_13118 = call i32 @function_1329c(i32* bitcast (i32** @global_var_1d700.720 to i32*), i32 %v2_1310c, i32 %v2_13110)
  store i32 78124, i32* @lr, align 4
  %v1_13128 = call i32 @function_13928()
  %v0_1312c = load i32, i32* @r5, align 4
  %v1_1312c = load i32, i32* @r7, align 4
  %v2_1312c = add i32 %v1_1312c, -4
  %v3_1312c = inttoptr i32 %v2_1312c to i32*
  store i32 %v0_1312c, i32* %v3_1312c, align 4
  br label %dec_label_pc_13130

dec_label_pc_13130:                               ; preds = %.thread, %dec_label_pc_130f0, %dec_label_pc_130e8, %dec_label_pc_130fc
  %v0_13130 = load i32, i32* @r7, align 4
  %v2_13134 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13134, i32* @r4, align 4
  store i32 %v6_13030, i32* @r5, align 4
  store i32 %v9_13030, i32* @r6, align 4
  store i32 %v12_13030, i32* @r7, align 4
  store i32 %v15_13030, i32* @r8, align 4
  ret i32 %v0_13130

; uselistorder directives
  uselistorder i32 %v1_1310c, { 1, 0 }
  uselistorder i32 %v0_130f0, { 1, 2, 0 }
  uselistorder i32 %v3_13068, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1d700.720, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1d700.720 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_12d94, { 1, 56, 0, 3, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2 }
  uselistorder i32 ()* @function_12f40, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 109, 110, 111, 112, 113, 123, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 31, 32, 33, 34, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 0, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 60, 2, 61, 3, 62, 63, 64, 65, 66, 67, 68, 70, 69, 71, 72, 73, 75, 76, 74, 77, 78, 79, 80, 82, 81, 83, 84, 85, 87, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 134, 130, 131, 132, 133, 135, 136, 137, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129 }
  uselistorder i32* @r7, { 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 21, 22, 29, 30, 3, 20, 37, 23, 24, 25, 26, 27, 28, 5, 31, 4, 32, 33, 34, 35, 36, 38, 1, 62, 63, 64, 65, 66, 67, 68, 69, 74, 75, 6, 76, 77, 78, 79, 80, 81, 82, 83, 245, 246, 247, 248, 70, 0, 71, 72, 73, 84, 85, 86, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 87, 88, 89, 90, 91, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 2, 19, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 205, 206, 207, 208, 210, 211, 212, 213, 249, 250, 251, 252, 257, 253, 254, 255, 256, 258, 259, 260, 261, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244 }
  uselistorder label %dec_label_pc_13130, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_130e8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_1305c, { 1, 0 }
}

define i32 @function_13148(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13148:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_13148 = inttoptr i32 %arg2 to i32*
  %v2_13148 = load i32, i32* %v1_13148, align 4
  %v3_1314c = load i32, i32* @r4, align 4
  store i32 %v3_1314c, i32* %stack_var_-8, align 4
  %v1_13150 = add i32 %v2_13148, 3
  %v1_13154 = and i32 %v1_13150, -4
  store i32 %v1_13154, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_1315c = icmp ugt i32 %v1_13154, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13164 = load i32, i32* %arg1, align 4
  store i32 %v2_13164, i32* %r0.global-to-local, align 4
  br i1 %v2_1315c, label %dec_label_pc_131d0.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_13148
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_131d0.preheader

dec_label_pc_131d0.preheader:                     ; preds = %dec_label_pc_13148, %bb
  %v1_13184 = phi i32 [ %v1_13154, %dec_label_pc_13148 ], [ 12, %bb ]
  %v2_131d09 = icmp eq i32 %v2_13164, 0
  br i1 %v2_131d09, label %dec_label_pc_131d8, label %dec_label_pc_13170

dec_label_pc_13170:                               ; preds = %dec_label_pc_131d0.preheader, %dec_label_pc_131cc
  %v2_13188 = phi i32 [ %v3_131cc, %dec_label_pc_131cc ], [ %v2_13164, %dec_label_pc_131d0.preheader ]
  %v1_13170 = inttoptr i32 %v2_13188 to i32*
  %v2_13170 = load i32, i32* %v1_13170, align 4
  store i32 %v2_13170, i32* @ip, align 4
  %v3_13174 = icmp ult i32 %v2_13170, %v1_13184
  br i1 %v3_13174, label %dec_label_pc_131cc, label %dec_label_pc_1317c

dec_label_pc_1317c:                               ; preds = %dec_label_pc_13170
  %v1_1317c = add i32 %v1_13184, 44
  %v3_13180 = icmp ult i32 %v2_13170, %v1_1317c
  br i1 %v3_13180, label %dec_label_pc_13190, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_1317c
  %v2_13174.le = sub i32 %v2_13170, %v1_13184
  store i32 %v2_13174.le, i32* %v1_13170, align 4
  %v0_131bc.pre = load i32, i32* @ip, align 4
  %v0_131c4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_13190:                               ; preds = %dec_label_pc_1317c
  %v1_13190 = add i32 %v2_13188, 4
  %v2_13190 = inttoptr i32 %v1_13190 to i32*
  %v3_13190 = load i32, i32* %v2_13190, align 4
  store i32 %v3_13190, i32* %r2.global-to-local, align 4
  %v2_13194 = icmp eq i32 %v3_13190, 0
  br i1 %v2_13194, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_13190
  %v2_13198 = add i32 %v2_13188, 8
  %v3_13198 = inttoptr i32 %v2_13198 to i32*
  %v4_13198 = load i32, i32* %v3_13198, align 4
  %v3_1319c = add i32 %v3_13190, 8
  %v4_1319c = inttoptr i32 %v3_1319c to i32*
  store i32 %v4_13198, i32* %v4_1319c, align 4
  %v0_131a0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13190, %bb27
  %v0_131a0 = phi i32 [ %v2_13188, %dec_label_pc_13190 ], [ %v0_131a0.pre, %bb27 ]
  %v1_131a0 = add i32 %v0_131a0, 8
  %v2_131a0 = inttoptr i32 %v1_131a0 to i32*
  %v3_131a0 = load i32, i32* %v2_131a0, align 4
  %v1_131a4 = add i32 %v0_131a0, 4
  %v2_131a4 = inttoptr i32 %v1_131a4 to i32*
  %v3_131a4 = load i32, i32* %v2_131a4, align 4
  %v2_131a8 = icmp eq i32 %v3_131a0, 0
  br i1 %v2_131a8, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_131ac = add i32 %v3_131a0, 4
  %v4_131ac = inttoptr i32 %v3_131ac to i32*
  store i32 %v3_131a4, i32* %v4_131ac, align 4
  %v1_131b4 = load i32, i32* @ip, align 4
  store i32 %v1_131b4, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_131b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_131b0 = inttoptr i32 %v2_131b0 to i32*
  store i32 %v3_131a4, i32* %v3_131b0, align 4
  %v1_131b8.pre = load i32, i32* @ip, align 4
  store i32 %v1_131b8.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_131c4 = phi i32 [ %v0_131c4.pre, %.thread._crit_edge ], [ %v1_131b4, %bb28 ], [ %v1_131b8.pre, %.thread5 ]
  %v0_131bc = phi i32 [ %v0_131bc.pre, %.thread._crit_edge ], [ %v1_131b4, %bb28 ], [ %v1_131b8.pre, %.thread5 ]
  %v1_131bc = load i32, i32* %r0.global-to-local, align 4
  %v2_131bc = sub i32 %v1_131bc, %v0_131bc
  %v1_131c0 = add i32 %v2_131bc, 12
  store i32 %v1_131c0, i32* %r0.global-to-local, align 4
  %v1_131c4 = load i32, i32* %r4.global-to-local, align 4
  %v2_131c4 = inttoptr i32 %v1_131c4 to i32*
  store i32 %v0_131c4, i32* %v2_131c4, align 4
  %v2_131c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_131c8, i32* %r4.global-to-local, align 4
  ret i32 %v1_131c0

dec_label_pc_131cc:                               ; preds = %dec_label_pc_13170
  %v1_131cc = add i32 %v2_13188, 4
  %v2_131cc = inttoptr i32 %v1_131cc to i32*
  %v3_131cc = load i32, i32* %v2_131cc, align 4
  store i32 %v3_131cc, i32* %r0.global-to-local, align 4
  %v2_131d0 = icmp eq i32 %v3_131cc, 0
  br i1 %v2_131d0, label %dec_label_pc_131d0.dec_label_pc_131d8_crit_edge, label %dec_label_pc_13170

dec_label_pc_131d0.dec_label_pc_131d8_crit_edge:  ; preds = %dec_label_pc_131cc
  br label %dec_label_pc_131d8

dec_label_pc_131d8:                               ; preds = %dec_label_pc_131d0.dec_label_pc_131d8_crit_edge, %dec_label_pc_131d0.preheader
  store i32 %v3_1314c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_131cc, { 1, 2, 0 }
  uselistorder i32 %v0_131a0, { 1, 0 }
  uselistorder i32 %v2_13170, { 1, 0, 2, 3 }
  uselistorder i32 %v2_13188, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_13184, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_13170, { 1, 0 }
  uselistorder label %dec_label_pc_131d0.preheader, { 1, 0 }
}

define i32 @function_131dc(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_131dc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_131e0 = load i32, i32* %arg1, align 4
  store i32 %v2_131e0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_132586 = icmp eq i32 %v2_131e0, 0
  br i1 %v2_132586, label %dec_label_pc_13260, label %dec_label_pc_131ec

dec_label_pc_131ec:                               ; preds = %dec_label_pc_131dc, %dec_label_pc_13254
  %v0_1322c = phi i32 [ %v3_13254, %dec_label_pc_13254 ], [ %v2_131e0, %dec_label_pc_131dc ]
  %v1_131ec = inttoptr i32 %v0_1322c to i32*
  %v2_131ec = load i32, i32* %v1_131ec, align 4
  store i32 %v2_131ec, i32* %r0.global-to-local, align 4
  %v2_131f0 = sub i32 %v0_1322c, %v2_131ec
  %v1_131f4 = add i32 %v2_131f0, 12
  %v3_131f8 = icmp uge i32 %v1_131f4, %arg2
  %v9_131f8 = icmp eq i32 %v1_131f4, %arg2
  %v2_131fc = xor i1 %v9_131f8, true
  %v3_131fc = and i1 %v3_131f8, %v2_131fc
  br i1 %v3_131fc, label %dec_label_pc_13254, label %dec_label_pc_13200

dec_label_pc_13200:                               ; preds = %dec_label_pc_131ec
  br i1 %v9_131f8, label %dec_label_pc_13204, label %dec_label_pc_13260

dec_label_pc_13204:                               ; preds = %dec_label_pc_13200
  %v1_13204 = add i32 %arg3, 3
  %v1_13208 = and i32 %v1_13204, -4
  store i32 %v1_13208, i32* %r2.global-to-local, align 4
  %v2_1320c = sub i32 %v2_131ec, %v1_13208
  %v3_1320c = icmp ult i32 %v2_131ec, %v1_13208
  br i1 %v3_1320c, label %dec_label_pc_13260, label %dec_label_pc_13214

dec_label_pc_13214:                               ; preds = %dec_label_pc_13204
  %v1_13214 = add i32 %v1_13208, 44
  %v3_13218 = icmp ult i32 %v2_131ec, %v1_13214
  br i1 %v3_13218, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_13214
  store i32 %v2_1320c, i32* %v1_131ec, align 4
  %v1_13224 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_13224, i32* %r0.global-to-local, align 4
  ret i32 %v1_13224

.thread2:                                         ; preds = %dec_label_pc_13214
  %v1_1322c = add i32 %v0_1322c, 4
  %v2_1322c = inttoptr i32 %v1_1322c to i32*
  %v3_1322c = load i32, i32* %v2_1322c, align 4
  store i32 %v3_1322c, i32* %r2.global-to-local, align 4
  %v2_13230 = icmp eq i32 %v3_1322c, 0
  br i1 %v2_13230, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_13234 = add i32 %v0_1322c, 8
  %v3_13234 = inttoptr i32 %v2_13234 to i32*
  %v4_13234 = load i32, i32* %v3_13234, align 4
  %v3_13238 = add i32 %v3_1322c, 8
  %v4_13238 = inttoptr i32 %v3_13238 to i32*
  store i32 %v4_13234, i32* %v4_13238, align 4
  %v0_1323c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_1323c = phi i32 [ %v0_1322c, %.thread2 ], [ %v0_1323c.pre, %bb17 ]
  %v1_1323c = add i32 %v0_1323c, 8
  %v2_1323c = inttoptr i32 %v1_1323c to i32*
  %v3_1323c = load i32, i32* %v2_1323c, align 4
  store i32 %v3_1323c, i32* %r2.global-to-local, align 4
  %v1_13240 = add i32 %v0_1323c, 4
  %v2_13240 = inttoptr i32 %v1_13240 to i32*
  %v3_13240 = load i32, i32* %v2_13240, align 4
  %v2_13244 = icmp eq i32 %v3_1323c, 0
  br i1 %v2_13244, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_13248 = add i32 %v3_1323c, 4
  %v4_13248 = inttoptr i32 %v3_13248 to i32*
  store i32 %v3_13240, i32* %v4_13248, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_1324c = load i32, i32* %lr.global-to-local, align 4
  %v3_1324c = inttoptr i32 %v2_1324c to i32*
  store i32 %v3_13240, i32* %v3_1324c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_13250 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_13250

dec_label_pc_13254:                               ; preds = %dec_label_pc_131ec
  %v1_13254 = add i32 %v0_1322c, 4
  %v2_13254 = inttoptr i32 %v1_13254 to i32*
  %v3_13254 = load i32, i32* %v2_13254, align 4
  store i32 %v3_13254, i32* %ip.global-to-local, align 4
  %v2_13258 = icmp eq i32 %v3_13254, 0
  br i1 %v2_13258, label %dec_label_pc_13258.dec_label_pc_13260.loopexit_crit_edge, label %dec_label_pc_131ec

dec_label_pc_13258.dec_label_pc_13260.loopexit_crit_edge: ; preds = %dec_label_pc_13254
  br label %dec_label_pc_13260

dec_label_pc_13260:                               ; preds = %dec_label_pc_13204, %dec_label_pc_131dc, %dec_label_pc_13258.dec_label_pc_13260.loopexit_crit_edge, %dec_label_pc_13200
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_13254, { 1, 2, 0 }
  uselistorder i32 %v0_1323c, { 1, 0 }
  uselistorder i32 %v1_13208, { 0, 2, 1, 3 }
  uselistorder i1 %v9_131f8, { 1, 0 }
  uselistorder i32 %v2_131ec, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_1322c, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_13260, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_131ec, { 1, 0 }
}

define i32 @function_13268() local_unnamed_addr {
dec_label_pc_13268:
  %v0_13268 = load i32, i32* @r2, align 4
  %v2_13268 = icmp eq i32 %v0_13268, 0
  %v0_1326c = load i32, i32* @r3, align 4
  %v1_1326c = load i32, i32* @r1, align 4
  %v2_1326c = add i32 %v1_1326c, 4
  %v3_1326c = inttoptr i32 %v2_1326c to i32*
  store i32 %v0_1326c, i32* %v3_1326c, align 4
  %v0_13270 = load i32, i32* @r2, align 4
  %v1_13270 = load i32, i32* @r1, align 4
  %v2_13270 = add i32 %v1_13270, 8
  %v3_13270 = inttoptr i32 %v2_13270 to i32*
  store i32 %v0_13270, i32* %v3_13270, align 4
  %v1_13278 = load i32, i32* @r1, align 4
  br i1 %v2_13268, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13268
  %v2_13274 = load i32, i32* @r2, align 4
  %v3_13274 = add i32 %v2_13274, 4
  %v4_13274 = inttoptr i32 %v3_13274 to i32*
  store i32 %v1_13278, i32* %v4_13274, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_13268
  %v2_13278 = load i32, i32* @r0, align 4
  %v3_13278 = inttoptr i32 %v2_13278 to i32*
  store i32 %v1_13278, i32* %v3_13278, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_1327c = load i32, i32* @r3, align 4
  %v2_1327c = icmp eq i32 %v0_1327c, 0
  br i1 %v2_1327c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_13280 = load i32, i32* @r1, align 4
  %v3_13280 = add i32 %v0_1327c, 8
  %v4_13280 = inttoptr i32 %v3_13280 to i32*
  store i32 %v1_13280, i32* %v4_13280, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_13284 = load i32, i32* @r0, align 4
  ret i32 %v1_13284

; uselistorder directives
  uselistorder i32 %v1_13278, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_13288() local_unnamed_addr {
dec_label_pc_13288:
  %v0_13288 = load i32, i32* @r2, align 4
  %v2_13288 = icmp eq i32 %v0_13288, 0
  %v1_1328c = load i32, i32* @r1, align 4
  br i1 %v2_13288, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13288
  %v2_1328c = load i32, i32* @r0, align 4
  %v3_1328c = inttoptr i32 %v2_1328c to i32*
  store i32 %v1_1328c, i32* %v3_1328c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_13288
  %v3_13290 = add i32 %v0_13288, 4
  %v4_13290 = inttoptr i32 %v3_13290 to i32*
  store i32 %v1_1328c, i32* %v4_13290, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_13294 = load i32, i32* @r2, align 4
  %v1_13294 = load i32, i32* @r1, align 4
  %v2_13294 = add i32 %v1_13294, 8
  %v3_13294 = inttoptr i32 %v2_13294 to i32*
  store i32 %v0_13294, i32* %v3_13294, align 4
  %v1_13298 = load i32, i32* @r0, align 4
  ret i32 %v1_13298

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1329c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1329c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1329c = load i32, i32* @r4, align 4
  store i32 %v3_1329c, i32* %stack_var_-20, align 4
  %v2_132a0 = load i32, i32* %arg1, align 4
  store i32 %v2_132a0, i32* %r4.global-to-local, align 4
  %v2_132a4 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_132c02 = icmp eq i32 %v2_132a0, 0
  br i1 %v2_132c02, label %dec_label_pc_13370, label %dec_label_pc_132b0

dec_label_pc_132b0:                               ; preds = %dec_label_pc_1329c, %dec_label_pc_132b8
  %v0_13300 = phi i32 [ %v0_13308, %dec_label_pc_132b8 ], [ 0, %dec_label_pc_1329c ]
  %v0_13308 = phi i32 [ %v3_132bc, %dec_label_pc_132b8 ], [ %v2_132a0, %dec_label_pc_1329c ]
  %v1_132c45.in = phi i32 [ %v3_132bc, %dec_label_pc_132b8 ], [ %v2_132a0, %dec_label_pc_1329c ]
  %v1_132c45 = add i32 %v1_132c45.in, 12
  %v3_132b0 = icmp ult i32 %v1_132c45, %arg2
  br i1 %v3_132b0, label %dec_label_pc_132b8, label %dec_label_pc_132d0

dec_label_pc_132b8:                               ; preds = %dec_label_pc_132b0
  store i32 %v0_13308, i32* %r6.global-to-local, align 4
  %v1_132bc = add i32 %v0_13308, 4
  %v2_132bc = inttoptr i32 %v1_132bc to i32*
  %v3_132bc = load i32, i32* %v2_132bc, align 4
  store i32 %v3_132bc, i32* %r4.global-to-local, align 4
  %v2_132c0 = icmp eq i32 %v3_132bc, 0
  br i1 %v2_132c0, label %dec_label_pc_132c0.dec_label_pc_13370.loopexit_crit_edge, label %dec_label_pc_132b0

dec_label_pc_132d0:                               ; preds = %dec_label_pc_132b0
  %v1_132d0 = inttoptr i32 %v0_13308 to i32*
  %v2_132d0 = load i32, i32* %v1_132d0, align 4
  store i32 %v2_132d0, i32* @ip, align 4
  %v2_132d4 = sub i32 %v0_13308, %v2_132d0
  %v1_132d8 = add i32 %v2_132d4, 12
  %v3_132dc = icmp uge i32 %v1_132d8, %v2_132a4
  %v9_132dc = icmp eq i32 %v1_132d8, %v2_132a4
  %v2_132e0 = xor i1 %v9_132dc, true
  %v3_132e0 = and i1 %v3_132dc, %v2_132e0
  br i1 %v3_132e0, label %dec_label_pc_13370, label %dec_label_pc_132e4

dec_label_pc_132e4:                               ; preds = %dec_label_pc_132d0
  %v2_132e4 = add i32 %v2_132d0, %arg3
  store i32 %v2_132e4, i32* %r7.global-to-local, align 4
  br i1 %v9_132dc, label %dec_label_pc_132ec, label %dec_label_pc_13318

dec_label_pc_132ec:                               ; preds = %dec_label_pc_132e4
  %v2_132ec = icmp eq i32 %v0_13300, 0
  br i1 %v2_132ec, label %dec_label_pc_13364, label %dec_label_pc_132f4

dec_label_pc_132f4:                               ; preds = %dec_label_pc_132ec
  %v1_132f4 = add i32 %v0_13300, 12
  %v9_132f8 = icmp eq i32 %v1_132f4, %arg2
  br i1 %v9_132f8, label %dec_label_pc_13300, label %dec_label_pc_13364

dec_label_pc_13300:                               ; preds = %dec_label_pc_132f4
  %v1_13300 = inttoptr i32 %v0_13300 to i32*
  %v2_13300 = load i32, i32* %v1_13300, align 4
  %v1_13304 = add i32 %v0_13300, 8
  %v2_13304 = inttoptr i32 %v1_13304 to i32*
  %v3_13304 = load i32, i32* %v2_13304, align 4
  store i32 %v3_13304, i32* @r2, align 4
  store i32 %v0_13308, i32* @r1, align 4
  %v2_1330c = add i32 %v2_13300, %v2_132e4
  store i32 %v2_1330c, i32* %r7.global-to-local, align 4
  %v0_13310 = call i32 @function_13288()
  br label %dec_label_pc_13364

dec_label_pc_13318:                               ; preds = %dec_label_pc_132e4
  %v1_13318 = add i32 %v0_13308, 4
  %v2_13318 = inttoptr i32 %v1_13318 to i32*
  %v3_13318 = load i32, i32* %v2_13318, align 4
  store i32 %v3_13318, i32* %r5.global-to-local, align 4
  %v2_1331c = icmp eq i32 %v3_13318, 0
  br i1 %v2_1331c, label %dec_label_pc_13350, label %dec_label_pc_13324

dec_label_pc_13324:                               ; preds = %dec_label_pc_13318
  %v1_13324 = inttoptr i32 %v3_13318 to i32*
  %v2_13324 = load i32, i32* %v1_13324, align 4
  store i32 %v2_13324, i32* @ip, align 4
  %v2_13328 = sub i32 %v3_13318, %v2_13324
  %v1_1332c = add i32 %v2_13328, 12
  %v9_13330 = icmp eq i32 %v2_132a4, %v1_1332c
  br i1 %v9_13330, label %dec_label_pc_13338, label %dec_label_pc_13350

dec_label_pc_13338:                               ; preds = %dec_label_pc_13324
  store i32 %v0_13300, i32* @r2, align 4
  store i32 %v3_13318, i32* @r1, align 4
  %v2_13340 = add i32 %v2_13324, %v2_132e4
  store i32 %v2_13340, i32* %r7.global-to-local, align 4
  %v0_13344 = call i32 @function_13288()
  %v0_13348 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13348, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13364

dec_label_pc_13350:                               ; preds = %dec_label_pc_13324, %dec_label_pc_13318
  %v2_13350 = add i32 %v0_13308, %arg3
  store i32 %v2_13350, i32* %r4.global-to-local, align 4
  store i32 %v3_13318, i32* @r3, align 4
  store i32 %v0_13300, i32* @r2, align 4
  store i32 %v2_13350, i32* @r1, align 4
  %v0_13360 = call i32 @function_13268()
  br label %dec_label_pc_13364

dec_label_pc_13364:                               ; preds = %dec_label_pc_132f4, %dec_label_pc_132ec, %dec_label_pc_13338, %dec_label_pc_13300, %dec_label_pc_13350
  %v0_13364 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13364, i32* %r5.global-to-local, align 4
  %v0_13368 = load i32, i32* %r7.global-to-local, align 4
  %v2_13368 = inttoptr i32 %v0_13364 to i32*
  store i32 %v0_13368, i32* %v2_13368, align 4
  br label %dec_label_pc_13388

dec_label_pc_132c0.dec_label_pc_13370.loopexit_crit_edge: ; preds = %dec_label_pc_132b8
  br label %dec_label_pc_13370

dec_label_pc_13370:                               ; preds = %dec_label_pc_1329c, %dec_label_pc_132c0.dec_label_pc_13370.loopexit_crit_edge, %dec_label_pc_132d0
  %v1_13370 = add i32 %v2_132a4, -12
  store i32 %v1_13370, i32* %r5.global-to-local, align 4
  %v3_13374 = inttoptr i32 %v1_13370 to i32*
  store i32 %arg3, i32* %v3_13374, align 4
  %v0_13378 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13378, i32* @r3, align 4
  %v0_1337c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1337c, i32* @r2, align 4
  %v0_13380 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13380, i32* @r1, align 4
  %v0_13384 = call i32 @function_13268()
  br label %dec_label_pc_13388

dec_label_pc_13388:                               ; preds = %dec_label_pc_13364, %dec_label_pc_13370
  %v0_13388 = load i32, i32* %r5.global-to-local, align 4
  %v2_1338c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1338c, i32* @r4, align 4
  ret i32 %v0_13388

; uselistorder directives
  uselistorder i32 %v3_13318, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_132dc, { 1, 0 }
  uselistorder i32 %v3_132bc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_13308, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_13300, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_13268, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_13288, { 1, 0 }
  uselistorder i32* @ip, { 8, 9, 1, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 4, 2, 5, 6, 3, 7 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13388, { 1, 0 }
  uselistorder label %dec_label_pc_13370, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13364, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_132b0, { 1, 0 }
}

define i32 @function_13390() local_unnamed_addr {
dec_label_pc_133ac.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_13390 = ptrtoint i32* %stack_var_-268 to i32
  %v1_133a0 = call i32 @function_13928()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_133ac = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_133ac

dec_label_pc_133ac:                               ; preds = %dec_label_pc_133ac.lr.ph, %dec_label_pc_133ac
  %v1_133b0 = phi i32 [ 31, %dec_label_pc_133ac.lr.ph ], [ %v1_133bc, %dec_label_pc_133ac ]
  %v4_133b0 = mul i32 %v1_133b0, 4
  %v5_133b0 = add i32 %v4_133b0, %v2_133ac
  %v2_133b8 = add i32 %v5_133b0, -128
  %v3_133b8 = inttoptr i32 %v2_133b8 to i32*
  store i32 0, i32* %v3_133b8, align 4
  %v0_133bc = load i32, i32* %r1.global-to-local, align 4
  %v1_133bc = add i32 %v0_133bc, -1
  store i32 %v1_133bc, i32* %r1.global-to-local, align 4
  %v6_133bc = icmp slt i32 %v1_133bc, 0
  br i1 %v6_133bc, label %dec_label_pc_133c4, label %dec_label_pc_133ac

dec_label_pc_133c4:                               ; preds = %dec_label_pc_133ac
  %v2_133c4 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_133c4, i32* @r4, align 4
  store i32 %v2_133c4, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_133d0 = call i32 @function_12d4c()
  %v2_133d4 = icmp eq i32 %v0_133d0, 0
  br i1 %v2_133d4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_133c4
  store i32 %v2_133c4, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_133c4, %bb
  store i32 78824, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_133d4, i32 ptrtoint (i32* @global_var_1255c.742 to i32))
  %v2_133ec = load i32, i32* @global_var_1d8d4.744, align 4
  %v2_133f0 = icmp eq i32 %v2_133ec, 0
  br i1 %v2_133f0, label %dec_label_pc_133f8, label %dec_label_pc_13428

dec_label_pc_133f8:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1d8d4.744, align 4
  br label %dec_label_pc_13400

dec_label_pc_13400:                               ; preds = %dec_label_pc_13478, %dec_label_pc_133f8
  %v1_1340c = call i32 @function_13928()
  %v1_13414 = call i32 @function_14abc(i32 6)
  store i32 78888, i32* @lr, align 4
  %v1_13424 = call i32 @function_13928()
  %v2_1342c.pre = load i32, i32* @global_var_1d8d4.744, align 4
  br label %dec_label_pc_13428

dec_label_pc_13428:                               ; preds = %.thread1, %dec_label_pc_13400
  %v0_1349c = phi i32 [ %v2_133ec, %.thread1 ], [ %v2_1342c.pre, %dec_label_pc_13400 ]
  store i32 ptrtoint (i32* @global_var_1d8d4.744 to i32), i32* %ip.global-to-local, align 4
  %v7_13430 = icmp eq i32 %v0_1349c, 1
  br i1 %v7_13430, label %dec_label_pc_13460.lr.ph, label %dec_label_pc_13494

dec_label_pc_13460.lr.ph:                         ; preds = %dec_label_pc_13428
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1d8d4.744, align 4
  %v2_1344c = bitcast i32* %stack_var_-268 to i8*
  %v3_1344c = call i32 @function_12920(i8* %v2_1344c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13460

dec_label_pc_13460:                               ; preds = %dec_label_pc_13460.lr.ph, %dec_label_pc_13460
  %v1_13464 = phi i32 [ 31, %dec_label_pc_13460.lr.ph ], [ %v1_13470, %dec_label_pc_13460 ]
  %v4_13464 = mul i32 %v1_13464, 4
  %v5_13464 = add i32 %v4_13464, %v2_133ac
  %v2_1346c = add i32 %v5_13464, -264
  %v3_1346c = inttoptr i32 %v2_1346c to i32*
  store i32 -1, i32* %v3_1346c, align 4
  %v0_13470 = load i32, i32* %r1.global-to-local, align 4
  %v1_13470 = add i32 %v0_13470, -1
  store i32 %v1_13470, i32* %r1.global-to-local, align 4
  %v6_13470 = icmp slt i32 %v1_13470, 0
  br i1 %v6_13470, label %dec_label_pc_13478, label %dec_label_pc_13460

dec_label_pc_13478:                               ; preds = %dec_label_pc_13460
  store i32 %v2_13390, i32* %r1.global-to-local, align 4
  %v4_1348c = call i32 @function_13c14(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_13400

dec_label_pc_13494:                               ; preds = %dec_label_pc_13428
  %v7_13494 = icmp eq i32 %v0_1349c, 2
  br i1 %v7_13494, label %dec_label_pc_1349c, label %dec_label_pc_134a8

dec_label_pc_1349c:                               ; preds = %dec_label_pc_13494
  store i32 3, i32* @global_var_1d8d4.744, align 4
  %v0_134a4 = call i32 @function_13390()
  %v2_134a8.pre = load i32, i32* @global_var_1d8d4.744, align 4
  br label %dec_label_pc_134a8

dec_label_pc_134a8:                               ; preds = %dec_label_pc_13494, %dec_label_pc_1349c
  %v1_134b0 = phi i32 [ %v0_1349c, %dec_label_pc_13494 ], [ %v2_134a8.pre, %dec_label_pc_1349c ]
  %v7_134ac = icmp eq i32 %v1_134b0, 3
  br i1 %v7_134ac, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_134a8
  %v2_134b8 = load i32, i32* %ip.global-to-local, align 4
  %v3_134b8 = inttoptr i32 %v2_134b8 to i32*
  store i32 4, i32* %v3_134b8, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_134a8, %bb27
  call void @__pseudo_cond_branch(i1 %v7_134ac, i32 ptrtoint (i32* @global_var_13d2c.746 to i32))
  br label %dec_label_pc_134c0

dec_label_pc_134c0:                               ; preds = %dec_label_pc_134c0, %.thread3
  %v0_134c0 = call i32 @function_13390()
  br label %dec_label_pc_134c0

; uselistorder directives
  uselistorder i32 %v1_13470, { 2, 1, 0 }
  uselistorder i32 %v1_133bc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1d8d4.744, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_134a8, { 1, 0 }
  uselistorder label %dec_label_pc_13460, { 1, 0 }
  uselistorder label %dec_label_pc_13428, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_133ac, { 1, 0 }
}

define i32 @function_134d8(i8* %arg1) local_unnamed_addr {
dec_label_pc_134d8:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_134ec = load i32, i32* @r4, align 4
  store i32 %v3_134ec, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_13510.pre = load i32, i32* bitcast (i32** @global_var_1d840.749 to i32*), align 4
  br label %dec_label_pc_13508

dec_label_pc_13508:                               ; preds = %dec_label_pc_13508, %dec_label_pc_134d8
  %v0_13540 = phi i32 [ %tmp, %dec_label_pc_134d8 ], [ %v1_13504, %dec_label_pc_13508 ]
  store i32 %v0_13540, i32* %r4.global-to-local, align 4
  %v1_1350c = inttoptr i32 %v0_13540 to i8*
  %v2_1350c = load i8, i8* %v1_1350c, align 1
  %v3_1350c = zext i8 %v2_1350c to i32
  %v3_13514 = mul nuw nsw i32 %v3_1350c, 2
  %v4_13514 = add i32 %v3_13514, %v2_13510.pre
  %v5_13514 = inttoptr i32 %v4_13514 to i8*
  %v6_13514 = load i8, i8* %v5_13514, align 1
  %v1_13518 = and i8 %v6_13514, 32
  %v2_13518 = icmp eq i8 %v1_13518, 0
  %v1_13504 = add i32 %v0_13540, 1
  br i1 %v2_13518, label %dec_label_pc_13520, label %dec_label_pc_13508

dec_label_pc_13520:                               ; preds = %dec_label_pc_13508
  %v7_13520 = icmp eq i8 %v2_1350c, 43
  br i1 %v7_13520, label %dec_label_pc_13540, label %dec_label_pc_13528

dec_label_pc_13528:                               ; preds = %dec_label_pc_13520
  %v7_13528 = icmp eq i8 %v2_1350c, 45
  br i1 %v7_13528, label %dec_label_pc_13540, label %bb

bb:                                               ; preds = %dec_label_pc_13528
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1359c

dec_label_pc_13540:                               ; preds = %dec_label_pc_13520, %dec_label_pc_13528
  %storemerge30 = phi i32 [ 1, %dec_label_pc_13528 ], [ 0, %dec_label_pc_13520 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_13504, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1359c

dec_label_pc_1359c:                               ; preds = %bb, %dec_label_pc_13540
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_135a4 = call i32 @function_12068(i32 -1, i32 10)
  %v0_135a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_135a8, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_135b4 = urem i32 %v2_135a4, 256
  store i32 %v1_135b4, i32* %sl.global-to-local, align 4
  %v0_135b8 = call i32 @function_11f58()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_135b8, i32* %r8.global-to-local, align 4
  %v0_135cc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135cc

dec_label_pc_135c8:                               ; preds = %bb48, %dec_label_pc_13628
  %v0_135c8 = phi i32 [ %v1_135f8, %bb48 ], [ %v0_135c8.pre, %dec_label_pc_13628 ]
  store i32 %v0_135c8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_135cc

dec_label_pc_135cc:                               ; preds = %dec_label_pc_1359c, %dec_label_pc_135c8
  %v0_135f8 = phi i32 [ %v0_135cc.pre, %dec_label_pc_1359c ], [ %v0_135c8, %dec_label_pc_135c8 ]
  %v1_135cc = inttoptr i32 %v0_135f8 to i8*
  %v2_135cc = load i8, i8* %v1_135cc, align 1
  %v3_135cc = zext i8 %v2_135cc to i32
  %v1_135d0 = add nsw i32 %v3_135cc, -48
  %v1_135d4 = urem i32 %v1_135d0, 256
  %v1_135dc = or i32 %v3_135cc, 32
  %tmp56 = icmp ult i32 %v1_135d4, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_135e4

dec_label_pc_135e4:                               ; preds = %dec_label_pc_135cc
  %tmp57 = icmp ugt i32 %v1_135dc, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_135e4
  %v1_135e8 = add nsw i32 %v1_135dc, -87
  %v5_135f0 = urem i32 %v1_135e8, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_135cc, %dec_label_pc_135e4, %bb42
  %v3_13620 = phi i32 [ %v1_135d4, %dec_label_pc_135cc ], [ 40, %dec_label_pc_135e4 ], [ %v5_135f0, %bb42 ]
  %v1_135f4 = load i32, i32* %r5.global-to-local, align 4
  %v1_135f8 = add i32 %v0_135f8, 1
  store i32 %v1_135f8, i32* %r4.global-to-local, align 4
  %v6_135fc = icmp slt i32 %v3_13620, %v1_135f4
  br i1 %v6_135fc, label %dec_label_pc_13600, label %dec_label_pc_13640

dec_label_pc_13600:                               ; preds = %bb43
  %v0_13600 = load i32, i32* %ip.global-to-local, align 4
  %v1_13600 = load i32, i32* %r8.global-to-local, align 4
  %v9_13600 = icmp eq i32 %v0_13600, %v1_13600
  br i1 %v9_13600, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_13600
  br label %dec_label_pc_13610

bb44:                                             ; preds = %dec_label_pc_13600
  %v3_13600 = icmp ult i32 %v0_13600, %v1_13600
  br i1 %v3_13600, label %dec_label_pc_13610, label %dec_label_pc_13628

dec_label_pc_13610:                               ; preds = %bb44, %.thread
  %v4_136181727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_13610 = load i32, i32* %sl.global-to-local, align 4
  %v3_13610 = icmp uge i32 %v3_13620, %v1_13610
  %v9_13610 = icmp eq i32 %v3_13620, %v1_13610
  %v2_13614 = xor i1 %v3_13610, true
  %v3_13614 = or i1 %v9_13610, %v2_13614
  br i1 %v3_13614, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13610
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13610, %bb45
  %v4_13618 = phi i32 [ %v4_136181727, %dec_label_pc_13610 ], [ 0, %bb45 ]
  %v2_13618 = xor i1 %v9_13610, true
  %v3_13618 = and i1 %v3_13610, %v2_13618
  br i1 %v3_13618, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_13618 = urem i32 %v4_13618, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_1361c = phi i32 [ %v5_13618, %bb47 ], [ %v4_13618, %bb46 ]
  %v2_1361c = icmp eq i32 %v0_1361c, 0
  br i1 %v2_1361c, label %bb48, label %dec_label_pc_13628

bb48:                                             ; preds = %thread-pre-split
  %v4_13620 = mul i32 %v0_13600, %v1_135f4
  %v5_13620 = add i32 %v4_13620, %v3_13620
  store i32 %v5_13620, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_135c8

dec_label_pc_13628:                               ; preds = %bb44, %thread-pre-split
  %v0_13628 = call i32 @function_128b4()
  %v0_1362c = load i32, i32* %r7.global-to-local, align 4
  %v1_1362c = load i32, i32* %fp.global-to-local, align 4
  %v2_1362c = and i32 %v1_1362c, %v0_1362c
  store i32 %v2_1362c, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_13638 = inttoptr i32 %v0_13628 to i32*
  store i32 34, i32* %v2_13638, align 4
  %v0_135c8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135c8

dec_label_pc_13640:                               ; preds = %bb43
  %v0_13640.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_13640 = icmp eq i32 %v0_13640.pre, 0
  br i1 %v2_13640, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_13640
  %v1_13644 = load i32, i32* %r6.global-to-local, align 4
  %v3_13644 = inttoptr i32 %v0_13640.pre to i32*
  store i32 %v1_13644, i32* %v3_13644, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_13640, %bb49
  %v0_13648 = load i32, i32* %r7.global-to-local, align 4
  %v2_13648 = icmp eq i32 %v0_13648, 0
  %. = select i1 %v2_13648, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_13654 = load i32, i32* %fp.global-to-local, align 4
  %v2_13654 = icmp eq i32 %v0_13654, 0
  %v0_13678.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13654, label %dec_label_pc_13670, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_13678.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_13660, label %dec_label_pc_13670

dec_label_pc_13660:                               ; preds = %bb53
  %v0_13660 = call i32 @function_128b4()
  %v2_13668 = inttoptr i32 %v0_13660 to i32*
  store i32 34, i32* %v2_13668, align 4
  %v0_1366c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1366c, i32* %ip.global-to-local, align 4
  %v0_13670.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13670

dec_label_pc_13670:                               ; preds = %bb53, %bb50, %dec_label_pc_13660
  %v0_13678.pre = phi i32 [ %v0_13678.pre.pre, %bb53 ], [ %v0_1366c, %dec_label_pc_13660 ], [ %v0_13678.pre.pre, %bb50 ]
  %v0_13670 = phi i32 [ %v0_13648, %bb53 ], [ %v0_13670.pre, %dec_label_pc_13660 ], [ %v0_13648, %bb50 ]
  %v2_13670 = icmp eq i32 %v0_13670, 0
  br i1 %v2_13670, label %dec_label_pc_13670._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_13670
  %v2_13674 = sub i32 0, %v0_13678.pre
  store i32 %v2_13674, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13670._crit_edge

dec_label_pc_13670._crit_edge:                    ; preds = %dec_label_pc_13670, %bb54
  %v0_13678 = phi i32 [ %v2_13674, %bb54 ], [ %v0_13678.pre, %dec_label_pc_13670 ]
  %v2_1367c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1367c, i32* @r4, align 4
  ret i32 %v0_13678

; uselistorder directives
  uselistorder i32 %v0_13678.pre, { 1, 0 }
  uselistorder i32 %v0_13678.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_13640.pre, { 1, 0 }
  uselistorder i32 %v4_13618, { 1, 0 }
  uselistorder i1 %v3_13610, { 1, 0 }
  uselistorder i32 %v1_13610, { 1, 0 }
  uselistorder i32 %v1_135f8, { 1, 0 }
  uselistorder i32 %v1_135dc, { 1, 0 }
  uselistorder i32 %v1_135d4, { 1, 0 }
  uselistorder i32 %v0_135c8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 ()* @function_11f58, { 2, 1, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @function_12068, { 2, 3, 1, 11, 10, 6, 0, 9, 8, 7, 5, 4 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder label %dec_label_pc_13670._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13670, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_13628, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_135cc, { 1, 0 }
  uselistorder label %dec_label_pc_135c8, { 1, 0 }
  uselistorder label %dec_label_pc_1359c, { 1, 0 }
  uselistorder label %dec_label_pc_13540, { 1, 0 }
}

define i32 @function_13684(i32 %arg1) local_unnamed_addr {
dec_label_pc_13684:
  %stack_var_-16 = alloca i32, align 4
  %v2_13684 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_13684, i32* @r0, align 4
  %v8_136a0 = call i32 @function_13930(i32 %v2_13684, i32 ptrtoint (i32* @global_var_13928.698 to i32), i32 ptrtoint (i32* @global_var_1d820.752 to i32), i32 80176, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_136b0 = call i32 @function_13928()
  %v2_136b8 = load i32, i32* @global_var_1d8d8.756, align 4
  %v2_136bc = icmp eq i32 %v2_136b8, 0
  br i1 %v2_136bc, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_13684
  call void @__pseudo_branch(i32 %v2_136b8)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13684, %bb
  store i32 %v2_13684, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_136e0.758 to i32), i32* @lr, align 4
  %v8_136dc = call i32 @function_13930(i32 %v2_13684, i32 1, i32 ptrtoint (i32* @global_var_1d820.752 to i32), i32 80176, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_136dc, i32* @r0, align 4
  %v1_136e0 = call i32 @function_138bc(i32 %v8_136dc)
  store i1 true, i1* @cpsr_z, align 1
  %v0_136f4 = load i32, i32* @r4, align 4
  %v1_136f8 = call i32 @function_13d2c(i32 %v0_136f4)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_13684, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_13928, { 5, 4, 3, 2, 18, 17, 16, 15, 1, 0, 14, 13, 12, 11, 10, 9, 8, 7, 6, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_13930, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 80176, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1d820.752 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13928.698 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13718(i32 %arg1) local_unnamed_addr {
dec_label_pc_13718:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13718 = load i32, i32* @r4, align 4
  store i32 %v3_13718, i32* %stack_var_-20, align 4
  %v6_13718 = load i32, i32* @r5, align 4
  %v9_13718 = load i32, i32* @r6, align 4
  %v16_13718 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_1371c = icmp eq i32 %arg1, 0
  %v2_13720 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_1371c, label %dec_label_pc_138a4, label %dec_label_pc_13738.preheader

dec_label_pc_13738.preheader:                     ; preds = %dec_label_pc_13718
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1374017 = add i32 %v16_13718, 124
  br label %dec_label_pc_13730

dec_label_pc_13730:                               ; preds = %dec_label_pc_13738.preheader, %dec_label_pc_13730
  %v5_1374018 = phi i32 [ %v5_1374017, %dec_label_pc_13738.preheader ], [ %v5_13740, %dec_label_pc_13730 ]
  %v2_13734 = add i32 %v5_1374018, -136
  %v3_13734 = inttoptr i32 %v2_13734 to i32*
  store i32 0, i32* %v3_13734, align 4
  %v0_13738.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13738 = add i32 %v0_13738.pre, -1
  store i32 %v1_13738, i32* %r1.global-to-local, align 4
  %v6_13738 = icmp slt i32 %v1_13738, 0
  %v4_13740 = mul i32 %v1_13738, 4
  %v5_13740 = add i32 %v4_13740, %v16_13718
  br i1 %v6_13738, label %dec_label_pc_13748, label %dec_label_pc_13730

dec_label_pc_13748:                               ; preds = %dec_label_pc_13730
  %v2_13748 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_13748, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13758 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_13758, i32* %stack_var_-28, align 4
  %v0_13760 = call i32 @function_12d4c()
  store i32 %v0_13760, i32* %r0.global-to-local, align 4
  %v1_13764 = load i32, i32* @r5, align 4
  %v5_13768 = icmp slt i32 %v0_13760, %v1_13764
  br i1 %v5_13768, label %dec_label_pc_138ac, label %dec_label_pc_1376c

dec_label_pc_1376c:                               ; preds = %dec_label_pc_13748
  %v2_1376c = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_1376c, i32* @r4, align 4
  store i32 %v1_13764, i32* %r0.global-to-local, align 4
  store i32 %v2_13748, i32* %r1.global-to-local, align 4
  %v3_1377c = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_1377c = call i32 @function_1255c(i32 %v1_13764, %_TYPEDEF_sigset_t* %v3_1377c, i32 %v2_1376c)
  store i32 %v4_1377c, i32* %r0.global-to-local, align 4
  %v1_13780 = load i32, i32* @r5, align 4
  %v9_13780 = icmp eq i32 %v4_1377c, %v1_13780
  br i1 %v9_13780, label %dec_label_pc_13788, label %dec_label_pc_138ac

dec_label_pc_13788:                               ; preds = %dec_label_pc_1376c
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_1376c, i32* %r0.global-to-local, align 4
  %v2_13790 = call i32 @function_12d28(i32 %v2_1376c, i32 17)
  store i32 %v2_13790, i32* %r0.global-to-local, align 4
  %v1_13794 = load i32, i32* @r5, align 4
  %v9_13794 = icmp eq i32 %v2_13790, %v1_13794
  br i1 %v9_13794, label %dec_label_pc_137ac.preheader, label %dec_label_pc_13788.dec_label_pc_13874_crit_edge

dec_label_pc_13788.dec_label_pc_13874_crit_edge:  ; preds = %dec_label_pc_13788
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_13874

dec_label_pc_137ac.preheader:                     ; preds = %dec_label_pc_13788
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_137a4

dec_label_pc_137a4:                               ; preds = %dec_label_pc_137ac.preheader, %dec_label_pc_137a4
  %v5_137b416 = phi i32 [ %v5_1374017, %dec_label_pc_137ac.preheader ], [ %v5_137b4, %dec_label_pc_137a4 ]
  %v2_137a8 = add i32 %v5_137b416, -136
  %v3_137a8 = inttoptr i32 %v2_137a8 to i32*
  store i32 0, i32* %v3_137a8, align 4
  %v0_137ac.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_137ac = add i32 %v0_137ac.pre, -1
  store i32 %v1_137ac, i32* %r1.global-to-local, align 4
  %v6_137ac = icmp slt i32 %v1_137ac, 0
  %v4_137b4 = mul i32 %v1_137ac, 4
  %v5_137b4 = add i32 %v4_137b4, %v16_13718
  br i1 %v6_137ac, label %dec_label_pc_137bc, label %dec_label_pc_137a4

dec_label_pc_137bc:                               ; preds = %dec_label_pc_137a4
  store i32 %v2_13748, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_137c4 = call i32 @function_12d4c()
  store i32 %v0_137c4, i32* %r0.global-to-local, align 4
  %v1_137c8 = icmp slt i32 %v0_137c4, 0
  br i1 %v1_137c8, label %dec_label_pc_138ac, label %dec_label_pc_137d0

dec_label_pc_137d0:                               ; preds = %dec_label_pc_137bc
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_137dc = call i32 @function_13c14(i32 17, i32* null, i32 %v2_13720)
  store i32 %v4_137dc, i32* %r0.global-to-local, align 4
  %v1_137e0 = icmp slt i32 %v4_137dc, 0
  br i1 %v1_137e0, label %dec_label_pc_137e8, label %dec_label_pc_13810

dec_label_pc_137e8:                               ; preds = %dec_label_pc_137d0
  %v0_137e8 = call i32 @function_128b4()
  store i32 %v2_1376c, i32* %r1.global-to-local, align 4
  store i32 %v0_137e8, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_137fc = inttoptr i32 %v0_137e8 to i32*
  %v2_137fc = load i32, i32* %v1_137fc, align 4
  store i32 %v2_137fc, i32* @r4, align 4
  %v3_13800 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13800 = call i32 @function_1255c(i32 2, %_TYPEDEF_sigset_t* %v3_13800, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_13808 = load i32, i32* @r4, align 4
  %v1_13808 = load i32, i32* %r5.global-to-local, align 4
  %v2_13808 = inttoptr i32 %v1_13808 to i32*
  store i32 %v0_13808, i32* %v2_13808, align 4
  %v17_138b4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_138b0

dec_label_pc_13810:                               ; preds = %dec_label_pc_137d0
  %v2_13810 = load i32, i32* %stack_var_-424, align 4
  %v7_13814 = icmp eq i32 %v2_13810, 1
  %v2_1381c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_1381c, i32* @r4, align 4
  br i1 %v7_13814, label %dec_label_pc_13824, label %dec_label_pc_13858

dec_label_pc_13824:                               ; preds = %dec_label_pc_13810
  store i32 %v2_1381c, i32* %r1.global-to-local, align 4
  store i32 %v2_1381c, i32* %r0.global-to-local, align 4
  %v2_1382c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_1382c = call i32 @function_140b0(%timespec* %v2_1382c, i32 %v2_1381c)
  store i32 %v3_1382c, i32* %r0.global-to-local, align 4
  store i32 %v3_1382c, i32* %r6.global-to-local, align 4
  %v0_13834 = call i32 @function_128b4()
  store i32 %v2_1376c, i32* %r1.global-to-local, align 4
  store i32 %v0_13834, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_13848 = inttoptr i32 %v0_13834 to i32*
  %v2_13848 = load i32, i32* %v1_13848, align 4
  store i32 %v2_13848, i32* @r4, align 4
  %v3_1384c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_1384c = call i32 @function_1255c(i32 2, %_TYPEDEF_sigset_t* %v3_1384c, i32 0)
  store i32 %v4_1384c, i32* %r0.global-to-local, align 4
  %v0_13850 = load i32, i32* @r4, align 4
  %v1_13850 = load i32, i32* %r5.global-to-local, align 4
  %v2_13850 = inttoptr i32 %v1_13850 to i32*
  store i32 %v0_13850, i32* %v2_13850, align 4
  %v0_13880.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13880

dec_label_pc_13858:                               ; preds = %dec_label_pc_13810
  store i32 %v2_1376c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_13864 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13864 = call i32 @function_1255c(i32 2, %_TYPEDEF_sigset_t* %v3_13864, i32 0)
  store i32 %v4_13864, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13874

dec_label_pc_13874:                               ; preds = %dec_label_pc_13788.dec_label_pc_13874_crit_edge, %dec_label_pc_13858
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_13788.dec_label_pc_13874_crit_edge ], [ %v2_1381c, %dec_label_pc_13858 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_13878 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_13878 = call i32 @function_140b0(%timespec* %v2_13878, i32 %storemerge.pre-phi)
  store i32 %v3_13878, i32* %r0.global-to-local, align 4
  store i32 %v3_13878, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13880

dec_label_pc_13880:                               ; preds = %dec_label_pc_13824, %dec_label_pc_13874
  %v0_13880 = phi i32 [ %v0_13880.pr, %dec_label_pc_13824 ], [ %v3_13878, %dec_label_pc_13874 ]
  %v2_13880 = icmp eq i32 %v0_13880, 0
  br i1 %v2_13880, label %dec_label_pc_138a4, label %dec_label_pc_13888

dec_label_pc_13888:                               ; preds = %dec_label_pc_13880
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_13890 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_13890, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_138b0

dec_label_pc_138a4:                               ; preds = %dec_label_pc_13718, %dec_label_pc_13880
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_138b0

dec_label_pc_138ac:                               ; preds = %dec_label_pc_1376c, %dec_label_pc_137bc, %dec_label_pc_13748
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_138b0

dec_label_pc_138b0:                               ; preds = %dec_label_pc_13888, %dec_label_pc_138a4, %dec_label_pc_137e8, %dec_label_pc_138ac
  %v17_138b4 = phi i32 [ %v3_13890, %dec_label_pc_13888 ], [ 0, %dec_label_pc_138a4 ], [ %v17_138b4.pre, %dec_label_pc_137e8 ], [ -1, %dec_label_pc_138ac ]
  %v2_138b4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_138b4, i32* @r4, align 4
  store i32 %v6_13718, i32* @r5, align 4
  store i32 %v9_13718, i32* @r6, align 4
  ret i32 %v17_138b4

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_1381c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_137ac, { 0, 2, 1 }
  uselistorder i32 %v2_1376c, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_13764, { 1, 0, 2 }
  uselistorder i32 %v1_13738, { 0, 2, 1 }
  uselistorder i32 %v16_13718, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 22, 10, 12, 13, 11, 15, 14, 16, 20, 17, 21, 18, 19, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_13c14, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_1255c, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_12d4c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_138b0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_138ac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138a4, { 1, 0 }
  uselistorder label %dec_label_pc_13880, { 1, 0 }
  uselistorder label %dec_label_pc_13874, { 1, 0 }
  uselistorder label %dec_label_pc_137a4, { 1, 0 }
  uselistorder label %dec_label_pc_13730, { 1, 0 }
}

define i32 @function_138bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_138e8:
  %stack_var_-8 = alloca i32, align 4
  %v3_138bc = load i32, i32* @r4, align 4
  store i32 %v3_138bc, i32* %stack_var_-8, align 4
  %v2_138ec = load i32, i32* @global_var_1d8e8.765, align 4
  %v2_138f0 = icmp eq i32 %v2_138ec, 0
  br i1 %v2_138f0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_138e8
  store i32 80124, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_138ec)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_138e8, %bb
  %v2_13900 = load i32, i32* @global_var_1d8ec.767, align 4
  %v2_13904 = icmp eq i32 %v2_13900, 0
  br i1 %v2_13904, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_13908 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13908, i32* @r4, align 4
  %v9_13908 = load i32, i32* @r0, align 4
  ret i32 %v9_13908

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_13914.768 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_13900)
  %v2_13914 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13914, i32* @r4, align 4
  %v8_13914 = load i32, i32* @r0, align 4
  ret i32 %v8_13914

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13928() local_unnamed_addr {
dec_label_pc_13928:
  ret i32 0
}

define i32 @function_13930(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13930:
  %v1_13930 = load i32, i32* @r0, align 4
  ret i32 %v1_13930
}

define i32 @function_13934(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13934:
  %r5.global-to-local = alloca i32, align 4
  %tmp = sext i16 %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_13934 = load i32, i32* @r4, align 4
  store i32 %v3_13934, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_13944 = call i32 @function_1221c(i32 %tmp, i32 1)
  %v7_13948 = icmp eq i32 %v3_13944, -1
  br i1 %v7_13948, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_13934
  %v3_1394c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1394c, i32* @r4, align 4
  ret i32 %v3_13944

bb5:                                              ; preds = %dec_label_pc_13934
  %v0_13950 = load i32, i32* @r4, align 4
  %v1_13950 = inttoptr i32 %v0_13950 to i16*
  %v5_13958 = call i32 @function_1240c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_153bc.770, i32 0, i32 0), i32 %v0_13950)
  %v1_1395c = load i32, i32* %r5.global-to-local, align 4
  %v9_1395c = icmp eq i32 %v5_13958, %v1_1395c
  br i1 %v9_1395c, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_13960 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13960, i32* @r4, align 4
  ret i32 %v5_13958

bb7:                                              ; preds = %bb5
  %v0_13964 = call i32 @function_13390()
  %v0_13968 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13968, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v1_13968 = load i32, i32* @r5, align 4
  %v2_13968 = trunc i32 %v1_13968 to i16
  store i16 %v2_13968, i16* %v1_13950, align 2
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_13964

; uselistorder directives
  uselistorder i32 %v3_13944, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* @cpsr_z, { 10, 9, 0, 11, 8, 5, 6, 1, 2, 3, 4, 7 }
  uselistorder i32 ()* @function_13390, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_1240c, { 9, 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_1221c, { 0, 5, 11, 10, 13, 12, 7, 6, 9, 8, 2, 1, 4, 3 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @function_1396c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1396c:
  %v2_13970 = load i32, i32* @global_var_1d8f0.772, align 4
  %v2_13974 = icmp eq i32 %v2_13970, 0
  br i1 %v2_13974, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_1396c
  %v6_13980 = load i32, i32* @r0, align 4
  ret i32 %v6_13980

bb2:                                              ; preds = %dec_label_pc_1396c
  store i32 1, i32* @global_var_1d8f0.772, align 4
  store i32 4096, i32* @global_var_1d8e4.723, align 4
  ret i32 undef
}

define i32 @function_139c8(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_139c8:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_139cc = mul i32 %arg2, 4
  %v5_139cc = add i32 %tmp, %v4_139cc
  %v2_139d0 = load i32, i32* %arg3, align 4
  %v2_139d4 = ptrtoint i32* %stack_var_-120 to i32
  %v1_139d8 = add i32 %v5_139cc, 4
  %v9_139dc = icmp eq i32 %v1_139d8, %v2_139d0
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1d8dc.777, align 4
  store i32 %v1_139d8, i32* @global_var_1d8e0.779, align 4
  store i32 %arg6, i32* @global_var_1d8ec.767, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_139dc, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_139c8
  store i32 %v5_139cc, i32* @global_var_1d8e0.779, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_139c8, %bb
  %v2_13a1c = bitcast i32* %stack_var_-120 to i8*
  %v3_13a1c = call i32 @function_12920(i8* %v2_13a1c, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1d8e0.779, align 4
  br label %dec_label_pc_13a2c

dec_label_pc_13a2c:                               ; preds = %dec_label_pc_13a2c, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_13a2c, %dec_label_pc_13a2c ]
  %v1_13a2c = inttoptr i32 %storemerge to i32*
  %v2_13a2c = load i32, i32* %v1_13a2c, align 4
  %v4_13a2c = add i32 %storemerge, 4
  %v2_13a30 = icmp eq i32 %v2_13a2c, 0
  br i1 %v2_13a30, label %dec_label_pc_13a3c, label %dec_label_pc_13a2c

dec_label_pc_13a3c:                               ; preds = %dec_label_pc_13a2c
  store i32 %v4_13a2c, i32* @r4, align 4
  %v1_13a5c22 = inttoptr i32 %v4_13a2c to i32*
  %v2_13a5c23 = load i32, i32* %v1_13a5c22, align 4
  %v2_13a6025 = icmp eq i32 %v2_13a5c23, 0
  br i1 %v2_13a6025, label %dec_label_pc_13a68, label %dec_label_pc_13a44

dec_label_pc_13a44:                               ; preds = %dec_label_pc_13a3c, %dec_label_pc_13a5c
  %v5_13a48 = phi i32 [ %v2_13a5c, %dec_label_pc_13a5c ], [ %v2_13a5c23, %dec_label_pc_13a3c ]
  %v2_13a44 = icmp ugt i32 %v5_13a48, 13
  %v7_13a44 = icmp eq i32 %v5_13a48, 14
  %v2_13a48 = xor i1 %v2_13a44, true
  %v3_13a48 = or i1 %v7_13a44, %v2_13a48
  br i1 %v3_13a48, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13a44
  %v6_13a48 = and i32 %v5_13a48, 536870912
  %v7_13a48 = icmp ne i32 %v6_13a48, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_13a44, %bb42
  %v1_13a54 = phi i1 [ %v2_13a44, %dec_label_pc_13a44 ], [ %v7_13a48, %bb42 ]
  %v2_13a4c = xor i1 %v1_13a54, true
  %v3_13a4c = or i1 %v7_13a44, %v2_13a4c
  br i1 %v3_13a4c, label %bb44, label %dec_label_pc_13a5c

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_13a5c

dec_label_pc_13a5c:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_13a4c, i32 ptrtoint (i32* @global_var_12900.781 to i32))
  %v0_13a58 = load i32, i32* @r4, align 4
  %v1_13a58 = add i32 %v0_13a58, 8
  store i32 %v1_13a58, i32* @r4, align 4
  %v1_13a5c = inttoptr i32 %v1_13a58 to i32*
  %v2_13a5c = load i32, i32* %v1_13a5c, align 4
  %v2_13a60 = icmp eq i32 %v2_13a5c, 0
  br i1 %v2_13a60, label %dec_label_pc_13a68, label %dec_label_pc_13a44

dec_label_pc_13a68:                               ; preds = %dec_label_pc_13a5c, %dec_label_pc_13a3c
  %v1_13a6c = call i32 @function_14ad4(i32 %v2_139d4)
  store i32 %v1_13a6c, i32* @r0, align 4
  %v1_13a70 = call i32 @function_1396c(i32 %v1_13a6c)
  store i32 %v1_13a70, i32* @r0, align 4
  %v2_13a7c = icmp eq i32 %tmp37, 0
  br i1 %v2_13a7c, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13a68
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13a68, %bb45
  %v0_13a8c = phi i32 [ %tmp37, %dec_label_pc_13a68 ], [ 4096, %bb45 ]
  %v3_13a84 = icmp eq i32 %tmp36, -1
  %v8_13a84 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1d8e4.723 to i32), i32* @r2, align 4
  store i32 %v0_13a8c, i32* @global_var_1d8e4.723, align 4
  br i1 %v3_13a84, label %dec_label_pc_13a94, label %dec_label_pc_13abc

dec_label_pc_13a94:                               ; preds = %bb46
  %v0_13a94 = call i32 @function_14020()
  store i32 %v0_13a94, i32* @r0, align 4
  store i32 %v0_13a94, i32* @r4, align 4
  %v0_13a9c = call i32 @function_13fc8()
  %v0_13aa0 = load i32, i32* @r4, align 4
  %v9_13aa0 = icmp eq i32 %v0_13aa0, %v0_13a9c
  br i1 %v9_13aa0, label %dec_label_pc_13aa8, label %dec_label_pc_13ae4

dec_label_pc_13aa8:                               ; preds = %dec_label_pc_13a94
  %v1_13aa8 = call i32 @function_13ff4(i32 %v0_13a9c)
  store i32 %v1_13aa8, i32* @r0, align 4
  store i32 %v1_13aa8, i32* @r4, align 4
  %v0_13ab0 = call i32 @function_13f9c()
  %v0_13ab4 = load i32, i32* @r4, align 4
  %v9_13ab4 = icmp eq i32 %v0_13ab4, %v0_13ab0
  br i1 %v9_13ab4, label %dec_label_pc_13abc, label %dec_label_pc_13ae4

dec_label_pc_13abc:                               ; preds = %dec_label_pc_13aa8, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_13a84, label %dec_label_pc_13b50, label %dec_label_pc_13ac8

dec_label_pc_13ac8:                               ; preds = %dec_label_pc_13abc
  %v9_13acc = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_13acc, label %dec_label_pc_13ad4, label %dec_label_pc_13ae4

dec_label_pc_13ad4:                               ; preds = %dec_label_pc_13ac8
  br label %dec_label_pc_13ae4

dec_label_pc_13ae4:                               ; preds = %dec_label_pc_13ad4, %dec_label_pc_13ac8, %dec_label_pc_13aa8, %dec_label_pc_13a94
  %v3_13aec = call i32 @function_13934(i16 0, i32 32768)
  %v3_13af8 = call i32 @function_13934(i16 1, i32 32770)
  %v3_13b04 = call i32 @function_13934(i16 2, i32 32770)
  br label %dec_label_pc_13b50

dec_label_pc_13b50:                               ; preds = %dec_label_pc_13ae4, %dec_label_pc_13abc
  %v0_13b14 = load i32, i32* %r6.global-to-local, align 4
  %v1_13b14 = inttoptr i32 %v0_13b14 to i32*
  %v2_13b14 = load i32, i32* %v1_13b14, align 4
  store i32 %v2_13b14, i32* @global_var_1d838, align 4
  store i32 %arg5, i32* @global_var_1d8e8.765, align 4
  %v2_13b50 = icmp eq i32 %arg4, 0
  br i1 %v2_13b50, label %dec_label_pc_13b8c, label %bb47

bb47:                                             ; preds = %dec_label_pc_13b50
  br label %dec_label_pc_13b8c

dec_label_pc_13b8c:                               ; preds = %dec_label_pc_13b50, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_13b9c = call i32 @function_128b4()
  %v2_13ba4 = inttoptr i32 %v1_13b9c to i32*
  store i32 0, i32* %v2_13ba4, align 4
  %v0_13bd0 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_13bdc = call i32 @function_13684(i32 %v0_13bd0)
  ret i32 %v1_13bdc

; uselistorder directives
  uselistorder i32 %v2_13a5c, { 1, 0 }
  uselistorder i32 %v1_13a58, { 1, 0 }
  uselistorder i1 %v2_13a44, { 1, 0 }
  uselistorder i32 %v4_13a2c, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_13684, { 0, 2, 6, 5, 4, 3, 1 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1d8e4.723, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 7, 4, 8, 5, 9, 2, 6, 10, 11 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 79, 2, 3, 4, 5, 6, 7, 8, 50, 9, 10, 11, 12, 13, 103, 47, 51, 56, 104, 58, 80, 17, 18, 71, 19, 81, 82, 83, 84, 72, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 20, 21, 101, 102, 70, 49, 57, 105, 15, 16, 69, 14, 106, 33, 32, 59, 65, 60, 66, 54, 64, 55, 68, 107, 22, 108, 109, 23, 24, 25, 110, 73, 74, 26, 27, 111, 75, 76, 28, 29, 112, 77, 78, 30, 31, 53, 113, 114, 67, 115, 34, 61, 35, 62, 36, 48, 37, 38, 39, 63, 40, 52, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_13b8c, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_13a5c, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_13a44, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_13c14(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13c14:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_13c14 = load i32, i32* @r4, align 4
  %v6_13c14 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_13c18 = icmp eq i32* %arg2, null
  %v2_13c1c = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_13c18, label %dec_label_pc_13c88, label %dec_label_pc_13c2c

dec_label_pc_13c2c:                               ; preds = %dec_label_pc_13c14
  %v2_13c30 = load i32, i32* %arg2, align 4
  %v4_13c30 = add i32 %tmp, 4
  store i32 %v4_13c30, i32* @r1, align 4
  %v2_13c34 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_13c34, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_13c30, i32* %stack_var_-156, align 4
  %v3_13c40 = call i32 @function_12900(i32 %v2_13c34, i32 %v4_13c30, i32 128)
  store i32 %v3_13c40, i32* %r0.global-to-local, align 4
  %v0_13c44 = load i32, i32* @r4, align 4
  %v1_13c44 = add i32 %v0_13c44, 132
  %v2_13c44 = inttoptr i32 %v1_13c44 to i32*
  %v3_13c44 = load i32, i32* %v2_13c44, align 4
  %v1_13c48 = and i32 %v3_13c44, 67108864
  %v2_13c48 = icmp eq i32 %v1_13c48, 0
  br i1 %v2_13c48, label %dec_label_pc_13c5c, label %bb

bb:                                               ; preds = %dec_label_pc_13c2c
  br label %dec_label_pc_13c78

dec_label_pc_13c5c:                               ; preds = %dec_label_pc_13c2c
  %v1_13c64 = and i32 %v3_13c44, 4
  %v2_13c64 = icmp eq i32 %v1_13c64, 0
  br i1 %v2_13c64, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_13c5c
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_13c5c, %bb20
  br label %dec_label_pc_13c78

dec_label_pc_13c78:                               ; preds = %bb, %bb21
  %v2_13c78 = icmp eq i32 %v0_13c44, 0
  %v3_13c7c = ptrtoint i32* %stack_var_-156 to i32
  %.v3_13c7c = select i1 %v2_13c78, i32 0, i32 %v3_13c7c
  %v0_13c88.pre = load i32, i32* @r5, align 4
  %v0_13c98.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13c88

dec_label_pc_13c88:                               ; preds = %dec_label_pc_13c78, %dec_label_pc_13c14
  %v0_13c98 = phi i32 [ %arg1, %dec_label_pc_13c14 ], [ %v0_13c98.pre, %dec_label_pc_13c78 ]
  %v0_13c88 = phi i32 [ %arg3, %dec_label_pc_13c14 ], [ %v0_13c88.pre, %dec_label_pc_13c78 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_13c14 ], [ %.v3_13c7c, %dec_label_pc_13c78 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_13c88 = icmp eq i32 %v0_13c88, 0
  %.v2_13c1c = select i1 %v2_13c88, i32 0, i32 %v2_13c1c
  store i32 %.v2_13c1c, i32* @r2, align 4
  store i32 %v0_13c98, i32* %r0.global-to-local, align 4
  %v1_13c9c = call i32 @function_13d00(i32 %v0_13c98)
  store i32 %v1_13c9c, i32* %r0.global-to-local, align 4
  %v0_13ca0 = load i32, i32* @r5, align 4
  %v2_13ca0 = icmp eq i32 %v0_13ca0, 0
  br i1 %v2_13ca0, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_13c88
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_13c88, %bb25
  %v0_13cb0.pr = phi i32 [ 0, %dec_label_pc_13c88 ], [ 1, %bb25 ]
  %v1_13ca8 = icmp slt i32 %v1_13c9c, 0
  br i1 %v1_13ca8, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_13ce4

thread-pre-split:                                 ; preds = %bb26
  %v2_13cb0 = icmp eq i32 %v0_13cb0.pr, 0
  store i32 %v1_13c9c, i32* @r4, align 4
  br i1 %v2_13cb0, label %dec_label_pc_13ce4, label %dec_label_pc_13cbc

dec_label_pc_13cbc:                               ; preds = %thread-pre-split
  %v2_13cbc = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_13ca0, i32* %r0.global-to-local, align 4
  %v2_13cc4 = inttoptr i32 %v0_13ca0 to i32*
  store i32 %v2_13cbc, i32* %v2_13cc4, align 4
  %v3_13cc4 = load i32, i32* %r0.global-to-local, align 4
  %v4_13cc4 = add i32 %v3_13cc4, 4
  store i32 %v4_13cc4, i32* @r0, align 4
  %v2_13cc8 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_13cc8, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_13cd0 = call i32 @function_12900(i32 %v4_13cc4, i32 %v2_13cc8, i32 128)
  store i32 %v3_13cd0, i32* %r0.global-to-local, align 4
  %v1_13cd8 = load i32, i32* @r5, align 4
  %v2_13cd8 = add i32 %v1_13cd8, 136
  %v3_13cd8 = inttoptr i32 %v2_13cd8 to i32*
  %v1_13ce0 = load i32, i32* @r5, align 4
  %v2_13ce0 = add i32 %v1_13ce0, 132
  %v3_13ce0 = inttoptr i32 %v2_13ce0 to i32*
  %v0_13ce4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13ce4

dec_label_pc_13ce4:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_13cbc
  %v0_13ce4 = phi i32 [ %v1_13c9c, %thread-pre-split ], [ %v0_13ce4.pre, %dec_label_pc_13cbc ], [ %v1_13c9c, %thread-pre-split.thread ]
  store i32 %v0_13ce4, i32* %r0.global-to-local, align 4
  store i32 %v3_13c14, i32* @r4, align 4
  store i32 %v6_13c14, i32* @r5, align 4
  ret i32 %v0_13ce4

; uselistorder directives
  uselistorder i32 %v0_13ce4, { 1, 0 }
  uselistorder i32 %v0_13ca0, { 1, 0, 2 }
  uselistorder i32 %v0_13c98, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 1, 7, 2, 0 }
  uselistorder label %dec_label_pc_13ce4, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_13c78, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_13d00(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d00 = load i32, i32* @r4, align 4
  store i32 %v3_13d00, i32* %stack_var_-8, align 4
  %v1_13d04 = load i32, i32* @r1, align 4
  %v2_13d04 = inttoptr i32 %v1_13d04 to %sigaction*
  %v3_13d04 = load i32, i32* @r2, align 4
  %v4_13d04 = inttoptr i32 %v3_13d04 to %sigaction*
  %v5_13d04 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_13d04, %sigaction* %v4_13d04)
  store i32 %v5_13d04, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d04, -4095
  br i1 %tmp, label %dec_label_pc_13d24, label %dec_label_pc_13d14

dec_label_pc_13d14:                               ; preds = %dec_label_pc_13d00
  %v0_13d14 = call i32 @function_128b4()
  %v0_13d18 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d18 = sub i32 0, %v0_13d18
  %v2_13d1c = inttoptr i32 %v0_13d14 to i32*
  store i32 %v1_13d18, i32* %v2_13d1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d24

dec_label_pc_13d24:                               ; preds = %dec_label_pc_13d00, %dec_label_pc_13d14
  %v0_13d24 = phi i32 [ %v5_13d04, %dec_label_pc_13d00 ], [ -1, %dec_label_pc_13d14 ]
  %v2_13d28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d28, i32* %r4.global-to-local, align 4
  ret i32 %v0_13d24

; uselistorder directives
  uselistorder i32 %v5_13d04, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d24, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_13d2c(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_13d2c:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_13d54() local_unnamed_addr {
dec_label_pc_13d54:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_13d64 = load i32, i32* @r0, align 4
  %v4_13d64 = call i32 @fstat(i32 %v0_13d64, %stat* %tmp4)
  store i32 %v4_13d64, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13d64, -4095
  br i1 %tmp, label %dec_label_pc_13d88, label %dec_label_pc_13d74

dec_label_pc_13d74:                               ; preds = %dec_label_pc_13d54
  %v0_13d74 = call i32 @function_128b4()
  %v0_13d78 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d78 = sub i32 0, %v0_13d78
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13d80 = inttoptr i32 %v0_13d74 to i32*
  store i32 %v1_13d78, i32* %v2_13d80, align 4
  br label %dec_label_pc_13d98

dec_label_pc_13d88:                               ; preds = %dec_label_pc_13d54
  %v2_13d88 = icmp eq i32 %v4_13d64, 0
  store i32 81304, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_13d88, i32 ptrtoint (i32* @global_var_14470.797 to i32))
  br label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d74, %dec_label_pc_13d88
  %v0_13d98 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_13d98

; uselistorder directives
  uselistorder i32 %v4_13d64, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 6, 13, 11, 12, 9, 10, 0, 3, 4, 5, 1, 2, 7, 8 }
  uselistorder label %dec_label_pc_13d98, { 1, 0 }
}

define i32 @function_13da4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13da4:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_13da4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13dac = call i32 @function_13e38()
  store i32 %v0_13dac, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_13dac, 1
  br i1 %tmp8, label %dec_label_pc_13e30, label %dec_label_pc_13e1c.preheader

dec_label_pc_13e1c.preheader:                     ; preds = %dec_label_pc_13da4
  %v5_13db4 = load i32, i32* @r4, align 4
  %v7_13db4 = add i32 %v5_13db4, %v0_13dac
  store i32 %v7_13db4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13e1c

dec_label_pc_13dc0:                               ; preds = %dec_label_pc_13e1c
  %v1_13dc0 = add i32 %v2_13dd0, 16
  %v2_13dc0 = inttoptr i32 %v1_13dc0 to i32*
  %v3_13dc0 = load i32, i32* %v2_13dc0, align 4
  store i32 %v3_13dc0, i32* @lr, align 4
  %v2_13dc4 = inttoptr i32 %v1_13e20 to i32*
  %v3_13dc4 = load i32, i32* %v2_13dc4, align 4
  store i32 %v3_13dc4, i32* %r2.global-to-local, align 4
  %v1_13dc8 = add i32 %v2_13dd0, 18
  %v2_13dc8 = inttoptr i32 %v1_13dc8 to i8*
  %v3_13dc8 = load i8, i8* %v2_13dc8, align 1
  %v4_13dc8 = zext i8 %v3_13dc8 to i32
  store i32 %v4_13dc8, i32* %ip.global-to-local, align 4
  %v3_13dcc = sdiv i32 %v3_13dc0, 256
  store i32 %v3_13dcc, i32* %r3.global-to-local, align 4
  %v1_13dd0 = trunc i32 %v3_13dc0 to i8
  %v4_13dd0 = inttoptr i32 %v1_13e20 to i8*
  store i8 %v1_13dd0, i8* %v4_13dd0, align 1
  %v0_13dd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_13dd4 = load i32, i32* @r4, align 4
  %v2_13dd4 = add i32 %v1_13dd4, 4
  %v3_13dd4 = inttoptr i32 %v2_13dd4 to i32*
  store i32 %v0_13dd4, i32* %v3_13dd4, align 4
  %v0_13dd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_13dd8 = trunc i32 %v0_13dd8 to i8
  %v2_13dd8 = load i32, i32* @r4, align 4
  %v3_13dd8 = add i32 %v2_13dd8, 10
  %v4_13dd8 = inttoptr i32 %v3_13dd8 to i8*
  store i8 %v1_13dd8, i8* %v4_13dd8, align 1
  %v0_13ddc = load i32, i32* %r3.global-to-local, align 4
  %v1_13ddc = trunc i32 %v0_13ddc to i8
  %v2_13ddc = load i32, i32* @r4, align 4
  %v3_13ddc = add i32 %v2_13ddc, 9
  %v4_13ddc = inttoptr i32 %v3_13ddc to i8*
  store i8 %v1_13ddc, i8* %v4_13ddc, align 1
  %v0_13de0 = load i32, i32* @r4, align 4
  %v1_13de0 = add i32 %v0_13de0, 8
  %v2_13de0 = inttoptr i32 %v1_13de0 to i8*
  %v3_13de0 = load i8, i8* %v2_13de0, align 1
  %v4_13de0 = zext i8 %v3_13de0 to i32
  store i32 %v4_13de0, i32* %r2.global-to-local, align 4
  %v0_13de4 = load i32, i32* @r5, align 4
  %v1_13de4 = add i32 %v0_13de4, 1
  %v2_13de4 = inttoptr i32 %v1_13de4 to i8*
  %v3_13de4 = load i8, i8* %v2_13de4, align 1
  %v4_13de4 = zext i8 %v3_13de4 to i32
  store i32 %v4_13de4, i32* %r3.global-to-local, align 4
  %v4_13de8 = mul nuw nsw i32 %v4_13de4, 256
  %v5_13de8 = or i32 %v4_13de8, %v4_13de0
  %v1_13dec = add nsw i32 %v5_13de8, -19
  store i32 %v1_13dec, i32* @r2, align 4
  %v3_13df0 = call i32 @function_12910(i32 %v1_13e28, i32 %v1_13e24, i32 %v1_13dec)
  %v0_13df4 = load i32, i32* @r4, align 4
  %v1_13df4 = add i32 %v0_13df4, 8
  %v2_13df4 = inttoptr i32 %v1_13df4 to i8*
  %v3_13df4 = load i8, i8* %v2_13df4, align 1
  %v4_13df4 = zext i8 %v3_13df4 to i32
  store i32 %v4_13df4, i32* %r3.global-to-local, align 4
  %v0_13df8 = load i32, i32* @r5, align 4
  %v1_13df8 = add i32 %v0_13df8, 1
  %v2_13df8 = inttoptr i32 %v1_13df8 to i8*
  %v3_13df8 = load i8, i8* %v2_13df8, align 1
  %v4_13df8 = zext i8 %v3_13df8 to i32
  store i32 %v0_13df4, i32* @r0, align 4
  %v4_13e00 = mul nuw nsw i32 %v4_13df8, 256
  %v5_13e00 = or i32 %v4_13e00, %v4_13df4
  store i32 %v5_13e00, i32* @r2, align 4
  store i32 %v0_13df4, i32* @r1, align 4
  %v3_13e08 = call i32 @function_12910(i32 %v0_13df4, i32 %v0_13df4, i32 %v5_13e00)
  %v0_13e0c = load i32, i32* @r4, align 4
  %v1_13e0c = add i32 %v0_13e0c, 8
  %v2_13e0c = inttoptr i32 %v1_13e0c to i8*
  %v3_13e0c = load i8, i8* %v2_13e0c, align 1
  %v4_13e0c = zext i8 %v3_13e0c to i32
  store i32 %v4_13e0c, i32* %r3.global-to-local, align 4
  %v0_13e10 = load i32, i32* @r5, align 4
  %v1_13e10 = add i32 %v0_13e10, 1
  %v2_13e10 = inttoptr i32 %v1_13e10 to i8*
  %v3_13e10 = load i8, i8* %v2_13e10, align 1
  %v4_13e10 = zext i8 %v3_13e10 to i32
  store i32 %v4_13e10, i32* @r2, align 4
  %v4_13e14 = mul nuw nsw i32 %v4_13e10, 256
  %v5_13e14 = or i32 %v4_13e14, %v4_13e0c
  store i32 %v5_13e14, i32* %r3.global-to-local, align 4
  %v2_13e18 = add i32 %v5_13e14, %v0_13e0c
  store i32 %v2_13e18, i32* @r4, align 4
  %v1_13e1c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13e1c

dec_label_pc_13e1c:                               ; preds = %dec_label_pc_13e1c.preheader, %dec_label_pc_13dc0
  %v1_13e1c = phi i32 [ %v7_13db4, %dec_label_pc_13e1c.preheader ], [ %v1_13e1c.pre, %dec_label_pc_13dc0 ]
  %v2_13dd0 = phi i32 [ %v5_13db4, %dec_label_pc_13e1c.preheader ], [ %v2_13e18, %dec_label_pc_13dc0 ]
  %v3_13e1c = icmp ult i32 %v2_13dd0, %v1_13e1c
  %v1_13e20 = add i32 %v2_13dd0, 8
  store i32 %v1_13e20, i32* @r5, align 4
  %v1_13e24 = add i32 %v2_13dd0, 19
  store i32 %v1_13e24, i32* @r1, align 4
  %v1_13e28 = add i32 %v2_13dd0, 11
  store i32 %v1_13e28, i32* @r0, align 4
  br i1 %v3_13e1c, label %dec_label_pc_13dc0, label %dec_label_pc_13e30.loopexit

dec_label_pc_13e30.loopexit:                      ; preds = %dec_label_pc_13e1c
  %v0_13e30.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e30

dec_label_pc_13e30:                               ; preds = %dec_label_pc_13da4, %dec_label_pc_13e30.loopexit
  %v0_13e30 = phi i32 [ %v0_13e30.pre, %dec_label_pc_13e30.loopexit ], [ %v0_13dac, %dec_label_pc_13da4 ]
  store i32 %v6_13da4, i32* @r5, align 4
  ret i32 %v0_13e30

; uselistorder directives
  uselistorder i32 %v1_13e28, { 1, 0 }
  uselistorder i32 %v1_13e24, { 1, 0 }
  uselistorder i32 %v1_13e20, { 2, 1, 0 }
  uselistorder i32 %v2_13dd0, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_13df4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_13dc0, { 1, 0, 2 }
  uselistorder i32 %v5_13db4, { 1, 0 }
  uselistorder i32 %v0_13dac, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_12910, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13e30, { 1, 0 }
  uselistorder label %dec_label_pc_13e1c, { 1, 0 }
}

define i32 @function_13e38() local_unnamed_addr {
dec_label_pc_13e38:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_13e3c = load i32, i32* @r4, align 4
  %v9_13e3c = load i32, i32* @r6, align 4
  %v0_13e40 = load i32, i32* @r2, align 4
  %v1_13e40 = add i32 %v0_13e40, 6
  %v2_13e48 = ptrtoint i32* %stack_var_-60 to i32
  %v1_13e4c = and i32 %v1_13e40, -4
  store i32 %v1_13e4c, i32* %r3.global-to-local, align 4
  %v2_13e50 = sub i32 %v2_13e48, %v1_13e4c
  %v0_13e54 = load i32, i32* @r1, align 4
  store i32 %v0_13e54, i32* %r8.global-to-local, align 4
  store i32 %v0_13e40, i32* %stack_var_-60, align 4
  store i32 %v2_13e50, i32* %sl.global-to-local, align 4
  %v0_13e60 = load i32, i32* @r0, align 4
  %v1_13e64 = inttoptr i32 %v2_13e50 to %linux_dirent64*
  store i32 %v2_13e50, i32* %r1.global-to-local, align 4
  %v5_13e68 = call i32 @getdents64(i32 %v0_13e60, %linux_dirent64* %v1_13e64, i32 %v0_13e40)
  store i32 %v5_13e68, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_13e68, -4095
  br i1 %tmp, label %dec_label_pc_13e8c, label %dec_label_pc_13e78

dec_label_pc_13e78:                               ; preds = %dec_label_pc_13e38
  %v0_13e78 = call i32 @function_128b4()
  %v0_13e7c = load i32, i32* @r6, align 4
  %v1_13e7c = sub i32 0, %v0_13e7c
  store i32 %v1_13e7c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_13e84 = inttoptr i32 %v0_13e78 to i32*
  store i32 %v1_13e7c, i32* %v2_13e84, align 4
  %v0_13e94.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e94

dec_label_pc_13e8c:                               ; preds = %dec_label_pc_13e38
  br i1 false, label %dec_label_pc_13e94, label %dec_label_pc_13e9c

dec_label_pc_13e94:                               ; preds = %dec_label_pc_13e8c, %dec_label_pc_13e78
  %v0_13e94 = phi i32 [ -1, %dec_label_pc_13e8c ], [ %v0_13e94.pre, %dec_label_pc_13e78 ]
  store i32 %v0_13e94, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13f90

dec_label_pc_13e9c:                               ; preds = %dec_label_pc_13e8c
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_13ea4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13ea4, i32* @r5, align 4
  %v0_13ea8 = load i32, i32* @sp, align 4
  store i32 %v0_13ea8, i32* @r4, align 4
  br label %dec_label_pc_13f6c

dec_label_pc_13eb8:                               ; preds = %dec_label_pc_13f6c
  %v2_13f84 = add i32 %v3_13f70, %v0_13f84
  %v1_13eb8 = add i32 %v0_13ebc, 17
  %v2_13eb8 = inttoptr i32 %v1_13eb8 to i8*
  %v3_13eb8 = load i8, i8* %v2_13eb8, align 1
  %v4_13eb8 = zext i8 %v3_13eb8 to i32
  %v2_13ebc = inttoptr i32 %v1_13f78 to i8*
  %v3_13ebc = load i8, i8* %v2_13ebc, align 1
  %v4_13ebc = zext i8 %v3_13ebc to i32
  %v4_13ec0 = mul nuw nsw i32 %v4_13eb8, 256
  %v5_13ec0 = or i32 %v4_13ebc, %v4_13ec0
  %v1_13ec4 = add nuw nsw i32 %v5_13ec0, 3
  %v1_13ec8 = and i32 %v1_13ec4, 131068
  store i32 %v1_13ec8, i32* %r3.global-to-local, align 4
  %v2_13ecc = add i32 %v1_13ec8, %v2_13f0c
  store i32 %v2_13ecc, i32* %sb.global-to-local, align 4
  %v9_13ed0 = icmp eq i32 %v2_13ecc, %v2_13f84
  %v1_13ed4 = and i32 %v1_13ec4, 128
  %v2_13ed8 = icmp eq i32 %v1_13ed4, 0
  %v3_13ed8 = or i1 %v9_13ed0, %v2_13ed8
  br i1 %v3_13ed8, label %dec_label_pc_13f0c, label %dec_label_pc_13edc

dec_label_pc_13edc:                               ; preds = %dec_label_pc_13eb8
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_13eec = call i32 @function_1404c(i32 %v0_13e60, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_13ef0 = load i32, i32* @r5, align 4
  %v1_13ef0 = load i32, i32* %r8.global-to-local, align 4
  %v9_13ef0 = icmp eq i32 %v0_13ef0, %v1_13ef0
  br i1 %v9_13ef0, label %dec_label_pc_13ef8, label %dec_label_pc_13f8c

dec_label_pc_13ef8:                               ; preds = %dec_label_pc_13edc
  %v0_13ef8 = call i32 @function_128b4()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_13f04 = inttoptr i32 %v0_13ef8 to i32*
  store i32 22, i32* %v2_13f04, align 4
  %v0_13f90.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13f90

dec_label_pc_13f0c:                               ; preds = %dec_label_pc_13eb8
  %v3_13ed411 = udiv i32 %v1_13ec4, 256
  %v1_13f0c = trunc i32 %v3_13ed411 to i8
  %v3_13f0c = add i32 %v2_13f0c, 17
  %v4_13f0c = inttoptr i32 %v3_13f0c to i8*
  store i8 %v1_13f0c, i8* %v4_13f0c, align 1
  %v0_13f10 = load i32, i32* %r3.global-to-local, align 4
  %v1_13f10 = trunc i32 %v0_13f10 to i8
  %v2_13f10 = load i32, i32* @r5, align 4
  %v3_13f10 = add i32 %v2_13f10, 16
  %v4_13f10 = inttoptr i32 %v3_13f10 to i8*
  store i8 %v1_13f10, i8* %v4_13f10, align 1
  %v0_13f14 = load i32, i32* @r4, align 4
  %v1_13f14 = add i32 %v0_13f14, 8
  %v1_13f18 = inttoptr i32 %v1_13f14 to i32*
  %v2_13f18 = load i32, i32* %v1_13f18, align 4
  %v3_13f18 = add i32 %v0_13f14, 12
  %v4_13f18 = inttoptr i32 %v3_13f18 to i32*
  %v5_13f18 = load i32, i32* %v4_13f18, align 4
  store i32 %v5_13f18, i32* %r3.global-to-local, align 4
  %v1_13f24 = inttoptr i32 %v0_13f14 to i32*
  %v2_13f24 = load i32, i32* %v1_13f24, align 4
  %v3_13f24 = add i32 %v0_13f14, 4
  %v4_13f24 = inttoptr i32 %v3_13f24 to i32*
  %v5_13f24 = load i32, i32* %v4_13f24, align 4
  store i32 %v5_13f24, i32* %r3.global-to-local, align 4
  %v0_13f28 = load i32, i32* @r5, align 4
  %v1_13f28 = inttoptr i32 %v0_13f28 to i32*
  store i32 %v2_13f24, i32* %v1_13f28, align 4
  %v3_13f28 = add i32 %v0_13f28, 4
  %v4_13f28 = inttoptr i32 %v3_13f28 to i32*
  %v5_13f28 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13f28, i32* %v4_13f28, align 4
  %v0_13f2c = load i32, i32* @r4, align 4
  %v1_13f2c = add i32 %v0_13f2c, 8
  %v1_13f30 = inttoptr i32 %v1_13f2c to i32*
  %v2_13f30 = load i32, i32* %v1_13f30, align 4
  %v3_13f30 = add i32 %v0_13f2c, 12
  %v4_13f30 = inttoptr i32 %v3_13f30 to i32*
  %v5_13f30 = load i32, i32* %v4_13f30, align 4
  store i32 %v5_13f30, i32* %r3.global-to-local, align 4
  %v1_13f34 = load i32, i32* @r5, align 4
  %v2_13f34 = add i32 %v1_13f34, 8
  %v3_13f34 = inttoptr i32 %v2_13f34 to i32*
  store i32 %v2_13f30, i32* %v3_13f34, align 4
  %v0_13f38 = load i32, i32* %r3.global-to-local, align 4
  %v1_13f38 = load i32, i32* @r5, align 4
  %v2_13f38 = add i32 %v1_13f38, 12
  %v3_13f38 = inttoptr i32 %v2_13f38 to i32*
  store i32 %v0_13f38, i32* %v3_13f38, align 4
  %v0_13f3c = load i32, i32* @r4, align 4
  %v1_13f3c = add i32 %v0_13f3c, 18
  %v2_13f3c = inttoptr i32 %v1_13f3c to i8*
  %v3_13f3c = load i8, i8* %v2_13f3c, align 1
  %v4_13f3c = zext i8 %v3_13f3c to i32
  store i32 %v4_13f3c, i32* %r3.global-to-local, align 4
  %v2_13f40 = load i32, i32* @r5, align 4
  %v3_13f40 = add i32 %v2_13f40, 18
  %v4_13f40 = inttoptr i32 %v3_13f40 to i8*
  store i8 %v3_13f3c, i8* %v4_13f40, align 1
  %v0_13f44 = load i32, i32* @r4, align 4
  %v1_13f44 = add i32 %v0_13f44, 16
  %v2_13f44 = inttoptr i32 %v1_13f44 to i8*
  %v3_13f44 = load i8, i8* %v2_13f44, align 1
  %v4_13f44 = zext i8 %v3_13f44 to i32
  %v0_13f48 = load i32, i32* %r7.global-to-local, align 4
  %v1_13f48 = add i32 %v0_13f48, 1
  %v2_13f48 = inttoptr i32 %v1_13f48 to i8*
  %v3_13f48 = load i8, i8* %v2_13f48, align 1
  %v4_13f48 = zext i8 %v3_13f48 to i32
  store i32 %v4_13f48, i32* %r3.global-to-local, align 4
  %v4_13f4c = mul nuw nsw i32 %v4_13f48, 256
  %v5_13f4c = or i32 %v4_13f4c, %v4_13f44
  %v1_13f50 = add nsw i32 %v5_13f4c, -19
  store i32 %v1_13f50, i32* @r2, align 4
  %v3_13f54 = call i32 @function_12900(i32 %v1_13f7c, i32 %v1_13f80, i32 %v1_13f50)
  %v0_13f58 = load i32, i32* @r4, align 4
  %v1_13f58 = add i32 %v0_13f58, 16
  %v2_13f58 = inttoptr i32 %v1_13f58 to i8*
  %v3_13f58 = load i8, i8* %v2_13f58, align 1
  %v4_13f58 = zext i8 %v3_13f58 to i32
  store i32 %v4_13f58, i32* %r3.global-to-local, align 4
  %v0_13f5c = load i32, i32* %r7.global-to-local, align 4
  %v1_13f5c = add i32 %v0_13f5c, 1
  %v2_13f5c = inttoptr i32 %v1_13f5c to i8*
  %v3_13f5c = load i8, i8* %v2_13f5c, align 1
  %v4_13f5c = zext i8 %v3_13f5c to i32
  %v4_13f60 = mul nuw nsw i32 %v4_13f5c, 256
  %v5_13f60 = or i32 %v4_13f60, %v4_13f58
  store i32 %v5_13f60, i32* %r3.global-to-local, align 4
  %v2_13f64 = add i32 %v5_13f60, %v0_13f58
  store i32 %v2_13f64, i32* @r4, align 4
  %v0_13f68 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13f68, i32* @r5, align 4
  %v1_13f6c.pre = load i32, i32* @r6, align 4
  %v0_13f84.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13f6c

dec_label_pc_13f6c:                               ; preds = %dec_label_pc_13e9c, %dec_label_pc_13f0c
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_13e9c ], [ %v2_13f18, %dec_label_pc_13f0c ]
  %v0_13f84 = phi i32 [ %v0_13ea4, %dec_label_pc_13e9c ], [ %v0_13f84.pre, %dec_label_pc_13f0c ]
  %v2_13f0c = phi i32 [ %v0_13ea4, %dec_label_pc_13e9c ], [ %v0_13f68, %dec_label_pc_13f0c ]
  %v0_13ebc = phi i32 [ %v0_13ea8, %dec_label_pc_13e9c ], [ %v2_13f64, %dec_label_pc_13f0c ]
  %v1_13f6c = phi i32 [ %v5_13e68, %dec_label_pc_13e9c ], [ %v1_13f6c.pre, %dec_label_pc_13f0c ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_13e9c ], [ %v5_13f18, %dec_label_pc_13f0c ]
  %v0_13f6c = load i32, i32* %sl.global-to-local, align 4
  %v2_13f6c = add i32 %v0_13f6c, %v1_13f6c
  store i32 %v2_13f6c, i32* %r3.global-to-local, align 4
  %v3_13f70 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_13f70, i32* @r2, align 4
  %v3_13f74 = icmp ult i32 %v0_13ebc, %v2_13f6c
  %v1_13f78 = add i32 %v0_13ebc, 16
  store i32 %v1_13f78, i32* %r7.global-to-local, align 4
  %v1_13f7c = add i32 %v2_13f0c, 19
  store i32 %v1_13f7c, i32* @r0, align 4
  %v1_13f80 = add i32 %v0_13ebc, 19
  store i32 %v1_13f80, i32* @r1, align 4
  br i1 %v3_13f74, label %dec_label_pc_13eb8, label %dec_label_pc_13f8c

dec_label_pc_13f8c:                               ; preds = %dec_label_pc_13f6c, %dec_label_pc_13edc
  %v1_13f8c = phi i32 [ %v0_13ef0, %dec_label_pc_13edc ], [ %v2_13f0c, %dec_label_pc_13f6c ]
  %v0_13f8c = phi i32 [ %v1_13ef0, %dec_label_pc_13edc ], [ %v0_13f84, %dec_label_pc_13f6c ]
  %v2_13f8c = sub i32 %v1_13f8c, %v0_13f8c
  store i32 %v2_13f8c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13f90

dec_label_pc_13f90:                               ; preds = %dec_label_pc_13ef8, %dec_label_pc_13e94, %dec_label_pc_13f8c
  %v0_13f90 = phi i32 [ %v0_13f90.pre, %dec_label_pc_13ef8 ], [ %v0_13e94, %dec_label_pc_13e94 ], [ %v2_13f8c, %dec_label_pc_13f8c ]
  store i32 %v3_13e3c, i32* @r4, align 4
  store i32 %v9_13e3c, i32* %r6.global-to-local, align 4
  ret i32 %v0_13f90

; uselistorder directives
  uselistorder i32 %v1_13f80, { 1, 0 }
  uselistorder i32 %v1_13f7c, { 1, 0 }
  uselistorder i32 %v1_13f78, { 1, 0 }
  uselistorder i32 %v3_13f70, { 1, 0 }
  uselistorder i32 %v0_13ebc, { 2, 1, 3, 0 }
  uselistorder i32 %v2_13f0c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_13f14, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13ea4, { 1, 0, 2 }
  uselistorder i32 %v5_13e68, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_12900, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 4, 5, 25, 6, 26, 17, 9, 10, 11, 18, 0, 19, 12, 13, 14, 15, 16, 22, 1, 20, 2, 21, 3, 7, 8, 23, 24 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 3, 167, 168, 169, 170, 171, 333, 334, 335, 336, 337, 338, 339, 340, 353, 365, 366, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 127, 128, 22, 21, 23, 24, 25, 26, 27, 129, 130, 28, 29, 131, 132, 133, 134, 135, 136, 142, 143, 137, 138, 139, 140, 141, 4, 150, 2, 151, 152, 1, 153, 154, 367, 368, 369, 370, 0, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 5, 159, 160, 161, 162, 163, 9, 164, 165, 166, 190, 191, 192, 193, 8, 194, 195, 196, 6, 197, 198, 201, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 225, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 272, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 286, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 7, 306, 307, 308, 309, 310, 311, 312, 313, 314, 322, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 371, 372, 373, 374, 382, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 358, 355, 356, 357, 359, 360, 10, 361, 362, 363, 364 }
  uselistorder label %dec_label_pc_13f90, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13f6c, { 1, 0 }
}

define i32 @function_13f9c() local_unnamed_addr {
dec_label_pc_13f9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f9c = load i32, i32* @r4, align 4
  store i32 %v3_13f9c, i32* %stack_var_-8, align 4
  %v0_13fa4 = load i32, i32* @r0, align 4
  store i32 %v0_13fa4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13fa4, -4095
  br i1 %tmp, label %dec_label_pc_13fc0, label %dec_label_pc_13fb0

dec_label_pc_13fb0:                               ; preds = %dec_label_pc_13f9c
  %v0_13fb0 = call i32 @function_128b4()
  %v0_13fb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fb4 = sub i32 0, %v0_13fb4
  %v2_13fb8 = inttoptr i32 %v0_13fb0 to i32*
  store i32 %v1_13fb4, i32* %v2_13fb8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13fc4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13fc0

dec_label_pc_13fc0:                               ; preds = %dec_label_pc_13f9c, %dec_label_pc_13fb0
  %v2_13fc4 = phi i32 [ %v3_13f9c, %dec_label_pc_13f9c ], [ %v2_13fc4.pre, %dec_label_pc_13fb0 ]
  %v0_13fc0 = phi i32 [ %v0_13fa4, %dec_label_pc_13f9c ], [ -1, %dec_label_pc_13fb0 ]
  store i32 %v2_13fc4, i32* @r4, align 4
  ret i32 %v0_13fc0

; uselistorder directives
  uselistorder i32 %v0_13fa4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13fc0, { 1, 0 }
}

define i32 @function_13fc8() local_unnamed_addr {
dec_label_pc_13fc8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13fc8 = load i32, i32* @r4, align 4
  store i32 %v3_13fc8, i32* %stack_var_-8, align 4
  %v0_13fd0 = load i32, i32* @r0, align 4
  store i32 %v0_13fd0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13fd0, -4095
  br i1 %tmp, label %dec_label_pc_13fec, label %dec_label_pc_13fdc

dec_label_pc_13fdc:                               ; preds = %dec_label_pc_13fc8
  %v0_13fdc = call i32 @function_128b4()
  %v0_13fe0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fe0 = sub i32 0, %v0_13fe0
  %v2_13fe4 = inttoptr i32 %v0_13fdc to i32*
  store i32 %v1_13fe0, i32* %v2_13fe4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13ff0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13fec

dec_label_pc_13fec:                               ; preds = %dec_label_pc_13fc8, %dec_label_pc_13fdc
  %v2_13ff0 = phi i32 [ %v3_13fc8, %dec_label_pc_13fc8 ], [ %v2_13ff0.pre, %dec_label_pc_13fdc ]
  %v0_13fec = phi i32 [ %v0_13fd0, %dec_label_pc_13fc8 ], [ -1, %dec_label_pc_13fdc ]
  store i32 %v2_13ff0, i32* @r4, align 4
  ret i32 %v0_13fec

; uselistorder directives
  uselistorder i32 %v0_13fd0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13fec, { 1, 0 }
}

define i32 @function_13ff4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ff4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ff4 = load i32, i32* @r4, align 4
  store i32 %v3_13ff4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14018, label %dec_label_pc_14008

dec_label_pc_14008:                               ; preds = %dec_label_pc_13ff4
  %v0_14008 = call i32 @function_128b4()
  %v0_1400c = load i32, i32* %r4.global-to-local, align 4
  %v1_1400c = sub i32 0, %v0_1400c
  %v2_14010 = inttoptr i32 %v0_14008 to i32*
  store i32 %v1_1400c, i32* %v2_14010, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1401c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14018

dec_label_pc_14018:                               ; preds = %dec_label_pc_13ff4, %dec_label_pc_14008
  %v2_1401c = phi i32 [ %v3_13ff4, %dec_label_pc_13ff4 ], [ %v2_1401c.pre, %dec_label_pc_14008 ]
  %v0_14018 = phi i32 [ %arg1, %dec_label_pc_13ff4 ], [ -1, %dec_label_pc_14008 ]
  store i32 %v2_1401c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14018

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14018, { 1, 0 }
}

define i32 @function_14020() local_unnamed_addr {
dec_label_pc_14020:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14020 = load i32, i32* @r4, align 4
  store i32 %v3_14020, i32* %stack_var_-8, align 4
  %v0_14028 = load i32, i32* @r0, align 4
  store i32 %v0_14028, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14028, -4095
  br i1 %tmp, label %dec_label_pc_14044, label %dec_label_pc_14034

dec_label_pc_14034:                               ; preds = %dec_label_pc_14020
  %v0_14034 = call i32 @function_128b4()
  %v0_14038 = load i32, i32* %r4.global-to-local, align 4
  %v1_14038 = sub i32 0, %v0_14038
  %v2_1403c = inttoptr i32 %v0_14034 to i32*
  store i32 %v1_14038, i32* %v2_1403c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14048.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14044

dec_label_pc_14044:                               ; preds = %dec_label_pc_14020, %dec_label_pc_14034
  %v2_14048 = phi i32 [ %v3_14020, %dec_label_pc_14020 ], [ %v2_14048.pre, %dec_label_pc_14034 ]
  %v0_14044 = phi i32 [ %v0_14028, %dec_label_pc_14020 ], [ -1, %dec_label_pc_14034 ]
  store i32 %v2_14048, i32* %r4.global-to-local, align 4
  ret i32 %v0_14044

; uselistorder directives
  uselistorder i32 %v0_14028, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14044, { 1, 0 }
}

define i32 @function_1404c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1404c:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14090, label %dec_label_pc_1407c

dec_label_pc_1407c:                               ; preds = %dec_label_pc_1404c
  %v0_1407c = call i32 @function_128b4()
  %v0_14080 = load i32, i32* %r4.global-to-local, align 4
  %v1_14080 = sub i32 0, %v0_14080
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14088 = inttoptr i32 %v0_1407c to i32*
  store i32 %v1_14080, i32* %v2_14088, align 4
  %v0_14098.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14098

dec_label_pc_14090:                               ; preds = %dec_label_pc_1404c
  %v2_14090 = icmp eq i32 %arg1, 0
  br i1 %v2_14090, label %dec_label_pc_140a4, label %dec_label_pc_14098

dec_label_pc_14098:                               ; preds = %dec_label_pc_14090, %dec_label_pc_1407c
  %v0_14098 = phi i32 [ %arg1, %dec_label_pc_14090 ], [ %v0_14098.pre, %dec_label_pc_1407c ]
  br label %dec_label_pc_140a8

dec_label_pc_140a4:                               ; preds = %dec_label_pc_14090
  br label %dec_label_pc_140a8

dec_label_pc_140a8:                               ; preds = %dec_label_pc_14098, %dec_label_pc_140a4
  %v14_140ac = phi i32 [ %v0_14098, %dec_label_pc_14098 ], [ %tmp9, %dec_label_pc_140a4 ]
  ret i32 %v14_140ac

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_140a8, { 1, 0 }
}

define i32 @function_140b0(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140b0:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_140b0 = load i32, i32* @r4, align 4
  store i32 %v3_140b0, i32* %stack_var_-8, align 4
  %v6_140b4 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_140b4, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_140b4, -4095
  br i1 %tmp6, label %dec_label_pc_140d4, label %dec_label_pc_140c4

dec_label_pc_140c4:                               ; preds = %dec_label_pc_140b0
  %v0_140c4 = call i32 @function_128b4()
  %v0_140c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_140c8 = sub i32 0, %v0_140c8
  %v2_140cc = inttoptr i32 %v0_140c4 to i32*
  store i32 %v1_140c8, i32* %v2_140cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_140d4

dec_label_pc_140d4:                               ; preds = %dec_label_pc_140b0, %dec_label_pc_140c4
  %v0_140d4 = phi i32 [ %v6_140b4, %dec_label_pc_140b0 ], [ -1, %dec_label_pc_140c4 ]
  %v2_140d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_140d8, i32* %r4.global-to-local, align 4
  ret i32 %v0_140d4

; uselistorder directives
  uselistorder i32 %v6_140b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_140d4, { 1, 0 }
}

define i32 @function_140dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_140dc:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_140dc = load i32, i32* @r4, align 4
  store i32 %v3_140dc, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1d8fc.799 to i32), i32* %r4.global-to-local, align 4
  %v2_140e4 = load i32, i32* @global_var_1d8fc.799, align 4
  %v2_140e8 = icmp eq i32 %v2_140e4, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_140e8, label %dec_label_pc_140f8, label %dec_label_pc_14104

dec_label_pc_140f8:                               ; preds = %dec_label_pc_140dc
  %v2_140f8 = call i32 @function_14af8(i32* null)
  %v1_140fc = icmp slt i32 %v2_140f8, 0
  br i1 %v1_140fc, label %dec_label_pc_14124, label %dec_label_pc_14104thread-pre-split

dec_label_pc_14104thread-pre-split:               ; preds = %dec_label_pc_140f8
  %v0_14108.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_14104.pre = load i32, i32* @global_var_1d8fc.799, align 4
  br label %dec_label_pc_14104

dec_label_pc_14104:                               ; preds = %dec_label_pc_14104thread-pre-split, %dec_label_pc_140dc
  %v2_14104 = phi i32 [ %v2_14104.pre, %dec_label_pc_14104thread-pre-split ], [ %v2_140e4, %dec_label_pc_140dc ]
  %v1_14110 = phi i32 [ %v0_14108.pr, %dec_label_pc_14104thread-pre-split ], [ %arg1, %dec_label_pc_140dc ]
  %v2_14108 = icmp eq i32 %v1_14110, 0
  store i32 %v2_14104, i32* %r4.global-to-local, align 4
  br i1 %v2_14108, label %dec_label_pc_14128, label %dec_label_pc_14118

dec_label_pc_14118:                               ; preds = %dec_label_pc_14104
  %v2_14110 = add i32 %v1_14110, %v2_14104
  %v1_14118 = inttoptr i32 %v2_14110 to i32*
  %v2_14118 = call i32 @function_14af8(i32* %v1_14118)
  %v1_1411c = icmp slt i32 %v2_14118, 0
  br i1 %v1_1411c, label %dec_label_pc_14124, label %dec_label_pc_14118.dec_label_pc_14128_crit_edge

dec_label_pc_14118.dec_label_pc_14128_crit_edge:  ; preds = %dec_label_pc_14118
  %v0_14128.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14128

dec_label_pc_14124:                               ; preds = %dec_label_pc_14118, %dec_label_pc_140f8
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14128

dec_label_pc_14128:                               ; preds = %dec_label_pc_14118.dec_label_pc_14128_crit_edge, %dec_label_pc_14104, %dec_label_pc_14124
  %v0_14128 = phi i32 [ %v0_14128.pre, %dec_label_pc_14118.dec_label_pc_14128_crit_edge ], [ %v2_14104, %dec_label_pc_14104 ], [ -1, %dec_label_pc_14124 ]
  %v2_1412c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1412c, i32* @r4, align 4
  ret i32 %v0_14128

; uselistorder directives
  uselistorder i32 %v2_14104, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 5, 31, 32, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 2, 28, 29, 30 }
  uselistorder label %dec_label_pc_14128, { 2, 0, 1 }
}

define i32 @function_14134(%tms* %arg1) local_unnamed_addr {
dec_label_pc_14134:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14134 = load i32, i32* @r4, align 4
  store i32 %v3_14134, i32* %stack_var_-8, align 4
  %v3_14138 = call i32 @times(%tms* %arg1)
  store i32 %v3_14138, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_14138, -4095
  br i1 %tmp, label %dec_label_pc_14158, label %dec_label_pc_14148

dec_label_pc_14148:                               ; preds = %dec_label_pc_14134
  %v0_14148 = call i32 @function_128b4()
  %v0_1414c = load i32, i32* %r4.global-to-local, align 4
  %v1_1414c = sub i32 0, %v0_1414c
  %v2_14150 = inttoptr i32 %v0_14148 to i32*
  store i32 %v1_1414c, i32* %v2_14150, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14158

dec_label_pc_14158:                               ; preds = %dec_label_pc_14134, %dec_label_pc_14148
  %v0_14158 = phi i32 [ %v3_14138, %dec_label_pc_14134 ], [ -1, %dec_label_pc_14148 ]
  %v2_1415c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1415c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14158

; uselistorder directives
  uselistorder i32 %v3_14138, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14158, { 1, 0 }
}

define i32 @function_14160(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14160:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_1417c = inttoptr i32 %arg2 to i8*
  %v3_1417c = call i32 @function_12920(i8* %v2_1417c, i32 0)
  %v1_14180 = add i32 %tmp, 1
  %v2_14180 = inttoptr i32 %v1_14180 to i8*
  %v3_14180 = load i8, i8* %v2_14180, align 1
  %v4_14180 = zext i8 %v3_14180 to i32
  %v1_14184 = add i32 %tmp, 5
  %v2_14184 = inttoptr i32 %v1_14184 to i8*
  %v3_14184 = load i8, i8* %v2_14184, align 1
  %v4_14184 = zext i8 %v3_14184 to i32
  %v2_14188 = load i8, i8* %arg1, align 1
  %v3_14188 = zext i8 %v2_14188 to i32
  %v1_1418c = add i32 %tmp, 4
  %v2_1418c = inttoptr i32 %v1_1418c to i8*
  %v3_1418c = load i8, i8* %v2_1418c, align 1
  %v4_1418c = zext i8 %v3_1418c to i32
  %v1_14190 = add i32 %tmp, 2
  %v2_14190 = inttoptr i32 %v1_14190 to i8*
  %v3_14190 = load i8, i8* %v2_14190, align 1
  %v4_14190 = zext i8 %v3_14190 to i32
  %v1_14194 = add i32 %tmp, 6
  %v2_14194 = inttoptr i32 %v1_14194 to i8*
  %v3_14194 = load i8, i8* %v2_14194, align 1
  %v4_14194 = zext i8 %v3_14194 to i32
  %v1_14198 = add i32 %tmp, 3
  %v2_14198 = inttoptr i32 %v1_14198 to i8*
  %v3_14198 = load i8, i8* %v2_14198, align 1
  %v4_14198 = zext i8 %v3_14198 to i32
  %v4_1419c = mul nuw nsw i32 %v4_14180, 256
  %v5_1419c = or i32 %v3_14188, %v4_1419c
  %v4_141a0 = mul nuw nsw i32 %v4_14184, 256
  %v5_141a0 = or i32 %v4_1418c, %v4_141a0
  %v1_141a4 = add i32 %tmp, 7
  %v2_141a4 = inttoptr i32 %v1_141a4 to i8*
  %v3_141a4 = load i8, i8* %v2_141a4, align 1
  %v4_141a4 = zext i8 %v3_141a4 to i32
  %v4_141a8 = mul nuw nsw i32 %v4_14190, 65536
  %v5_141a8 = or i32 %v4_141a8, %v5_1419c
  %v4_141ac = mul nuw nsw i32 %v4_14194, 65536
  %v5_141ac = or i32 %v4_141ac, %v5_141a0
  %v4_141b0 = mul nuw i32 %v4_14198, 16777216
  %v5_141b0 = or i32 %v4_141b0, %v5_141a8
  %v4_141b4 = mul nuw i32 %v4_141a4, 16777216
  %v5_141b4 = or i32 %v4_141b4, %v5_141ac
  store i32 %v5_141b4, i32* %r3.global-to-local, align 4
  %v0_141b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_141b8 = inttoptr i32 %v0_141b8 to i32*
  store i32 %v5_141b0, i32* %v1_141b8, align 4
  %v3_141b8 = add i32 %v0_141b8, 4
  %v4_141b8 = inttoptr i32 %v3_141b8 to i32*
  %v5_141b8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_141b8, i32* %v4_141b8, align 4
  %v0_141bc = load i32, i32* %r4.global-to-local, align 4
  %v1_141bc = add i32 %v0_141bc, 89
  %v2_141bc = inttoptr i32 %v1_141bc to i8*
  %v3_141bc = load i8, i8* %v2_141bc, align 1
  %v4_141bc = zext i8 %v3_141bc to i32
  %v1_141c0 = add i32 %v0_141bc, 93
  %v2_141c0 = inttoptr i32 %v1_141c0 to i8*
  %v3_141c0 = load i8, i8* %v2_141c0, align 1
  %v4_141c0 = zext i8 %v3_141c0 to i32
  %v1_141c4 = add i32 %v0_141bc, 88
  %v2_141c4 = inttoptr i32 %v1_141c4 to i8*
  %v3_141c4 = load i8, i8* %v2_141c4, align 1
  %v4_141c4 = zext i8 %v3_141c4 to i32
  %v1_141c8 = add i32 %v0_141bc, 92
  %v2_141c8 = inttoptr i32 %v1_141c8 to i8*
  %v3_141c8 = load i8, i8* %v2_141c8, align 1
  %v4_141c8 = zext i8 %v3_141c8 to i32
  store i32 %v4_141c8, i32* %r3.global-to-local, align 4
  %v1_141cc = add i32 %v0_141bc, 94
  %v2_141cc = inttoptr i32 %v1_141cc to i8*
  %v3_141cc = load i8, i8* %v2_141cc, align 1
  %v4_141cc = zext i8 %v3_141cc to i32
  %v1_141d0 = add i32 %v0_141bc, 90
  %v2_141d0 = inttoptr i32 %v1_141d0 to i8*
  %v3_141d0 = load i8, i8* %v2_141d0, align 1
  %v4_141d0 = zext i8 %v3_141d0 to i32
  %v1_141d4 = add i32 %v0_141bc, 91
  %v2_141d4 = inttoptr i32 %v1_141d4 to i8*
  %v3_141d4 = load i8, i8* %v2_141d4, align 1
  %v4_141d4 = zext i8 %v3_141d4 to i32
  %v4_141d8 = mul nuw nsw i32 %v4_141bc, 256
  %v5_141d8 = or i32 %v4_141c4, %v4_141d8
  %v4_141dc = mul nuw nsw i32 %v4_141c0, 256
  %v5_141dc = or i32 %v4_141c8, %v4_141dc
  store i32 %v5_141dc, i32* %r3.global-to-local, align 4
  %v1_141e0 = add i32 %v0_141bc, 95
  %v2_141e0 = inttoptr i32 %v1_141e0 to i8*
  %v3_141e0 = load i8, i8* %v2_141e0, align 1
  %v4_141e0 = zext i8 %v3_141e0 to i32
  %v4_141e4 = mul nuw nsw i32 %v4_141cc, 65536
  %v5_141e4 = or i32 %v4_141e4, %v5_141dc
  store i32 %v5_141e4, i32* %r3.global-to-local, align 4
  %v4_141e8 = mul nuw nsw i32 %v4_141d0, 65536
  %v5_141e8 = or i32 %v4_141e8, %v5_141d8
  %v4_141ec = mul nuw i32 %v4_141d4, 16777216
  %v5_141ec = or i32 %v4_141ec, %v5_141e8
  %v4_141f0 = mul nuw i32 %v4_141e0, 16777216
  %v5_141f0 = or i32 %v4_141f0, %v5_141e4
  store i32 %v5_141f0, i32* %r6.global-to-local, align 4
  %v1_141f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_141f4 = add i32 %v1_141f4, 88
  %v3_141f4 = inttoptr i32 %v2_141f4 to i32*
  store i32 %v5_141ec, i32* %v3_141f4, align 4
  %v0_141f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_141f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_141f8 = add i32 %v1_141f8, 92
  %v3_141f8 = inttoptr i32 %v2_141f8 to i32*
  store i32 %v0_141f8, i32* %v3_141f8, align 4
  %v0_141fc = load i32, i32* %r4.global-to-local, align 4
  %v1_141fc = add i32 %v0_141fc, 13
  %v2_141fc = inttoptr i32 %v1_141fc to i8*
  %v3_141fc = load i8, i8* %v2_141fc, align 1
  %v4_141fc = zext i8 %v3_141fc to i32
  %v1_14200 = add i32 %v0_141fc, 12
  %v2_14200 = inttoptr i32 %v1_14200 to i8*
  %v3_14200 = load i8, i8* %v2_14200, align 1
  %v4_14200 = zext i8 %v3_14200 to i32
  store i32 %v4_14200, i32* %r3.global-to-local, align 4
  %v1_14204 = add i32 %v0_141fc, 14
  %v2_14204 = inttoptr i32 %v1_14204 to i8*
  %v3_14204 = load i8, i8* %v2_14204, align 1
  %v4_14204 = zext i8 %v3_14204 to i32
  %v4_14208 = mul nuw nsw i32 %v4_141fc, 256
  %v5_14208 = or i32 %v4_14200, %v4_14208
  store i32 %v5_14208, i32* %r3.global-to-local, align 4
  %v1_1420c = add i32 %v0_141fc, 15
  %v2_1420c = inttoptr i32 %v1_1420c to i8*
  %v3_1420c = load i8, i8* %v2_1420c, align 1
  %v4_1420c = zext i8 %v3_1420c to i32
  %v4_14210 = mul nuw nsw i32 %v4_14204, 65536
  %v5_14210 = or i32 %v4_14210, %v5_14208
  %v4_14214 = mul nuw i32 %v4_1420c, 16777216
  %v5_14214 = or i32 %v5_14210, %v4_14214
  store i32 %v5_14214, i32* %r3.global-to-local, align 4
  %v1_14218 = load i32, i32* %r7.global-to-local, align 4
  %v2_14218 = add i32 %v1_14218, 12
  %v3_14218 = inttoptr i32 %v2_14218 to i32*
  store i32 %v5_14214, i32* %v3_14218, align 4
  %v0_1421c = load i32, i32* %r4.global-to-local, align 4
  %v1_1421c = add i32 %v0_1421c, 17
  %v2_1421c = inttoptr i32 %v1_1421c to i8*
  %v3_1421c = load i8, i8* %v2_1421c, align 1
  %v4_1421c = zext i8 %v3_1421c to i32
  %v1_14220 = add i32 %v0_1421c, 16
  %v2_14220 = inttoptr i32 %v1_14220 to i8*
  %v3_14220 = load i8, i8* %v2_14220, align 1
  %v4_14220 = zext i8 %v3_14220 to i32
  store i32 %v4_14220, i32* %r3.global-to-local, align 4
  %v1_14224 = add i32 %v0_1421c, 18
  %v2_14224 = inttoptr i32 %v1_14224 to i8*
  %v3_14224 = load i8, i8* %v2_14224, align 1
  %v4_14224 = zext i8 %v3_14224 to i32
  %v4_14228 = mul nuw nsw i32 %v4_1421c, 256
  %v5_14228 = or i32 %v4_14220, %v4_14228
  store i32 %v5_14228, i32* %r3.global-to-local, align 4
  %v1_1422c = add i32 %v0_1421c, 19
  %v2_1422c = inttoptr i32 %v1_1422c to i8*
  %v3_1422c = load i8, i8* %v2_1422c, align 1
  %v4_1422c = zext i8 %v3_1422c to i32
  %v4_14230 = mul nuw nsw i32 %v4_14224, 65536
  %v5_14230 = or i32 %v4_14230, %v5_14228
  %v4_14234 = mul nuw i32 %v4_1422c, 16777216
  %v5_14234 = or i32 %v5_14230, %v4_14234
  store i32 %v5_14234, i32* %r3.global-to-local, align 4
  %v1_14238 = load i32, i32* %r7.global-to-local, align 4
  %v2_14238 = add i32 %v1_14238, 16
  %v3_14238 = inttoptr i32 %v2_14238 to i32*
  store i32 %v5_14234, i32* %v3_14238, align 4
  %v0_1423c = load i32, i32* %r4.global-to-local, align 4
  %v1_1423c = add i32 %v0_1423c, 21
  %v2_1423c = inttoptr i32 %v1_1423c to i8*
  %v3_1423c = load i8, i8* %v2_1423c, align 1
  %v4_1423c = zext i8 %v3_1423c to i32
  %v1_14240 = add i32 %v0_1423c, 20
  %v2_14240 = inttoptr i32 %v1_14240 to i8*
  %v3_14240 = load i8, i8* %v2_14240, align 1
  %v4_14240 = zext i8 %v3_14240 to i32
  store i32 %v4_14240, i32* %r3.global-to-local, align 4
  %v1_14244 = add i32 %v0_1423c, 22
  %v2_14244 = inttoptr i32 %v1_14244 to i8*
  %v3_14244 = load i8, i8* %v2_14244, align 1
  %v4_14244 = zext i8 %v3_14244 to i32
  %v4_14248 = mul nuw nsw i32 %v4_1423c, 256
  %v5_14248 = or i32 %v4_14240, %v4_14248
  store i32 %v5_14248, i32* %r3.global-to-local, align 4
  %v1_1424c = add i32 %v0_1423c, 23
  %v2_1424c = inttoptr i32 %v1_1424c to i8*
  %v3_1424c = load i8, i8* %v2_1424c, align 1
  %v4_1424c = zext i8 %v3_1424c to i32
  %v4_14250 = mul nuw nsw i32 %v4_14244, 65536
  %v5_14250 = or i32 %v4_14250, %v5_14248
  %v4_14254 = mul nuw i32 %v4_1424c, 16777216
  %v5_14254 = or i32 %v5_14250, %v4_14254
  store i32 %v5_14254, i32* %r3.global-to-local, align 4
  %v1_14258 = load i32, i32* %r7.global-to-local, align 4
  %v2_14258 = add i32 %v1_14258, 20
  %v3_14258 = inttoptr i32 %v2_14258 to i32*
  store i32 %v5_14254, i32* %v3_14258, align 4
  %v0_1425c = load i32, i32* %r4.global-to-local, align 4
  %v1_1425c = add i32 %v0_1425c, 25
  %v2_1425c = inttoptr i32 %v1_1425c to i8*
  %v3_1425c = load i8, i8* %v2_1425c, align 1
  %v4_1425c = zext i8 %v3_1425c to i32
  %v1_14260 = add i32 %v0_1425c, 24
  %v2_14260 = inttoptr i32 %v1_14260 to i8*
  %v3_14260 = load i8, i8* %v2_14260, align 1
  %v4_14260 = zext i8 %v3_14260 to i32
  store i32 %v4_14260, i32* %r3.global-to-local, align 4
  %v1_14264 = add i32 %v0_1425c, 26
  %v2_14264 = inttoptr i32 %v1_14264 to i8*
  %v3_14264 = load i8, i8* %v2_14264, align 1
  %v4_14264 = zext i8 %v3_14264 to i32
  %v4_14268 = mul nuw nsw i32 %v4_1425c, 256
  %v5_14268 = or i32 %v4_14260, %v4_14268
  store i32 %v5_14268, i32* %r3.global-to-local, align 4
  %v1_1426c = add i32 %v0_1425c, 27
  %v2_1426c = inttoptr i32 %v1_1426c to i8*
  %v3_1426c = load i8, i8* %v2_1426c, align 1
  %v4_1426c = zext i8 %v3_1426c to i32
  %v4_14270 = mul nuw nsw i32 %v4_14264, 65536
  %v5_14270 = or i32 %v4_14270, %v5_14268
  %v4_14274 = mul nuw i32 %v4_1426c, 16777216
  %v5_14274 = or i32 %v5_14270, %v4_14274
  store i32 %v5_14274, i32* %r3.global-to-local, align 4
  %v1_14278 = load i32, i32* %r7.global-to-local, align 4
  %v2_14278 = add i32 %v1_14278, 24
  %v3_14278 = inttoptr i32 %v2_14278 to i32*
  store i32 %v5_14274, i32* %v3_14278, align 4
  %v0_1427c = load i32, i32* %r4.global-to-local, align 4
  %v1_1427c = add i32 %v0_1427c, 29
  %v2_1427c = inttoptr i32 %v1_1427c to i8*
  %v3_1427c = load i8, i8* %v2_1427c, align 1
  %v4_1427c = zext i8 %v3_1427c to i32
  %v1_14280 = add i32 %v0_1427c, 28
  %v2_14280 = inttoptr i32 %v1_14280 to i8*
  %v3_14280 = load i8, i8* %v2_14280, align 1
  %v4_14280 = zext i8 %v3_14280 to i32
  store i32 %v4_14280, i32* %r3.global-to-local, align 4
  %v1_14284 = add i32 %v0_1427c, 30
  %v2_14284 = inttoptr i32 %v1_14284 to i8*
  %v3_14284 = load i8, i8* %v2_14284, align 1
  %v4_14284 = zext i8 %v3_14284 to i32
  %v4_14288 = mul nuw nsw i32 %v4_1427c, 256
  %v5_14288 = or i32 %v4_14280, %v4_14288
  store i32 %v5_14288, i32* %r3.global-to-local, align 4
  %v1_1428c = add i32 %v0_1427c, 31
  %v2_1428c = inttoptr i32 %v1_1428c to i8*
  %v3_1428c = load i8, i8* %v2_1428c, align 1
  %v4_1428c = zext i8 %v3_1428c to i32
  %v4_14290 = mul nuw nsw i32 %v4_14284, 65536
  %v5_14290 = or i32 %v4_14290, %v5_14288
  %v4_14294 = mul nuw i32 %v4_1428c, 16777216
  %v5_14294 = or i32 %v5_14290, %v4_14294
  store i32 %v5_14294, i32* %r3.global-to-local, align 4
  %v1_14298 = load i32, i32* %r7.global-to-local, align 4
  %v2_14298 = add i32 %v1_14298, 28
  %v3_14298 = inttoptr i32 %v2_14298 to i32*
  store i32 %v5_14294, i32* %v3_14298, align 4
  %v0_1429c = load i32, i32* %r4.global-to-local, align 4
  %v1_1429c = add i32 %v0_1429c, 33
  %v2_1429c = inttoptr i32 %v1_1429c to i8*
  %v3_1429c = load i8, i8* %v2_1429c, align 1
  %v4_1429c = zext i8 %v3_1429c to i32
  %v1_142a0 = add i32 %v0_1429c, 37
  %v2_142a0 = inttoptr i32 %v1_142a0 to i8*
  %v3_142a0 = load i8, i8* %v2_142a0, align 1
  %v4_142a0 = zext i8 %v3_142a0 to i32
  %v1_142a4 = add i32 %v0_1429c, 32
  %v2_142a4 = inttoptr i32 %v1_142a4 to i8*
  %v3_142a4 = load i8, i8* %v2_142a4, align 1
  %v4_142a4 = zext i8 %v3_142a4 to i32
  %v1_142a8 = add i32 %v0_1429c, 36
  %v2_142a8 = inttoptr i32 %v1_142a8 to i8*
  %v3_142a8 = load i8, i8* %v2_142a8, align 1
  %v4_142a8 = zext i8 %v3_142a8 to i32
  store i32 %v4_142a8, i32* %r3.global-to-local, align 4
  %v1_142ac = add i32 %v0_1429c, 34
  %v2_142ac = inttoptr i32 %v1_142ac to i8*
  %v3_142ac = load i8, i8* %v2_142ac, align 1
  %v4_142ac = zext i8 %v3_142ac to i32
  %v1_142b0 = add i32 %v0_1429c, 38
  %v2_142b0 = inttoptr i32 %v1_142b0 to i8*
  %v3_142b0 = load i8, i8* %v2_142b0, align 1
  %v4_142b0 = zext i8 %v3_142b0 to i32
  %v1_142b4 = add i32 %v0_1429c, 35
  %v2_142b4 = inttoptr i32 %v1_142b4 to i8*
  %v3_142b4 = load i8, i8* %v2_142b4, align 1
  %v4_142b4 = zext i8 %v3_142b4 to i32
  %v4_142b8 = mul nuw nsw i32 %v4_1429c, 256
  %v5_142b8 = or i32 %v4_142a4, %v4_142b8
  %v4_142bc = mul nuw nsw i32 %v4_142a0, 256
  %v5_142bc = or i32 %v4_142a8, %v4_142bc
  store i32 %v5_142bc, i32* %r3.global-to-local, align 4
  %v1_142c0 = add i32 %v0_1429c, 39
  %v2_142c0 = inttoptr i32 %v1_142c0 to i8*
  %v3_142c0 = load i8, i8* %v2_142c0, align 1
  %v4_142c0 = zext i8 %v3_142c0 to i32
  %v4_142c4 = mul nuw nsw i32 %v4_142ac, 65536
  %v5_142c4 = or i32 %v4_142c4, %v5_142b8
  %v4_142c8 = mul nuw nsw i32 %v4_142b0, 65536
  %v5_142c8 = or i32 %v4_142c8, %v5_142bc
  %v4_142cc = mul nuw i32 %v4_142b4, 16777216
  %v5_142cc = or i32 %v5_142c4, %v4_142cc
  %v4_142d0 = mul nuw i32 %v4_142c0, 16777216
  %v5_142d0 = or i32 %v5_142c8, %v4_142d0
  store i32 %v5_142d0, i32* %r3.global-to-local, align 4
  %v1_142e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_142e4 = add i32 %v1_142e4, 32
  %v3_142e4 = inttoptr i32 %v2_142e4 to i32*
  store i32 %v5_142cc, i32* %v3_142e4, align 4
  %v0_142e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_142e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_142e8 = add i32 %v1_142e8, 36
  %v3_142e8 = inttoptr i32 %v2_142e8 to i32*
  store i32 %v0_142e8, i32* %v3_142e8, align 4
  %v0_142ec = load i32, i32* %r4.global-to-local, align 4
  %v1_142ec = add i32 %v0_142ec, 45
  %v2_142ec = inttoptr i32 %v1_142ec to i8*
  %v3_142ec = load i8, i8* %v2_142ec, align 1
  %v4_142ec = zext i8 %v3_142ec to i32
  %v1_142f0 = add i32 %v0_142ec, 49
  %v2_142f0 = inttoptr i32 %v1_142f0 to i8*
  %v3_142f0 = load i8, i8* %v2_142f0, align 1
  %v4_142f0 = zext i8 %v3_142f0 to i32
  %v1_142f4 = add i32 %v0_142ec, 44
  %v2_142f4 = inttoptr i32 %v1_142f4 to i8*
  %v3_142f4 = load i8, i8* %v2_142f4, align 1
  %v4_142f4 = zext i8 %v3_142f4 to i32
  %v1_142f8 = add i32 %v0_142ec, 48
  %v2_142f8 = inttoptr i32 %v1_142f8 to i8*
  %v3_142f8 = load i8, i8* %v2_142f8, align 1
  %v4_142f8 = zext i8 %v3_142f8 to i32
  store i32 %v4_142f8, i32* %r3.global-to-local, align 4
  %v1_142fc = add i32 %v0_142ec, 46
  %v2_142fc = inttoptr i32 %v1_142fc to i8*
  %v3_142fc = load i8, i8* %v2_142fc, align 1
  %v4_142fc = zext i8 %v3_142fc to i32
  %v1_14300 = add i32 %v0_142ec, 50
  %v2_14300 = inttoptr i32 %v1_14300 to i8*
  %v3_14300 = load i8, i8* %v2_14300, align 1
  %v4_14300 = zext i8 %v3_14300 to i32
  %v1_14304 = add i32 %v0_142ec, 47
  %v2_14304 = inttoptr i32 %v1_14304 to i8*
  %v3_14304 = load i8, i8* %v2_14304, align 1
  %v4_14304 = zext i8 %v3_14304 to i32
  %v4_14308 = mul nuw nsw i32 %v4_142ec, 256
  %v5_14308 = or i32 %v4_142f4, %v4_14308
  %v4_1430c = mul nuw nsw i32 %v4_142f0, 256
  %v5_1430c = or i32 %v4_142f8, %v4_1430c
  store i32 %v5_1430c, i32* %r3.global-to-local, align 4
  %v1_14310 = add i32 %v0_142ec, 51
  %v2_14310 = inttoptr i32 %v1_14310 to i8*
  %v3_14310 = load i8, i8* %v2_14310, align 1
  %v4_14310 = zext i8 %v3_14310 to i32
  %v4_14314 = mul nuw nsw i32 %v4_142fc, 65536
  %v5_14314 = or i32 %v4_14314, %v5_14308
  %v4_14318 = mul nuw nsw i32 %v4_14300, 65536
  %v5_14318 = or i32 %v4_14318, %v5_1430c
  %v4_1431c = mul nuw i32 %v4_14304, 16777216
  %v5_1431c = or i32 %v5_14314, %v4_1431c
  %v4_14320 = mul nuw i32 %v4_14310, 16777216
  %v5_14320 = or i32 %v5_14318, %v4_14320
  store i32 %v5_14320, i32* %r3.global-to-local, align 4
  %v1_14334 = load i32, i32* %r7.global-to-local, align 4
  %v2_14334 = add i32 %v1_14334, 44
  %v3_14334 = inttoptr i32 %v2_14334 to i32*
  store i32 %v5_1431c, i32* %v3_14334, align 4
  %v0_14338 = load i32, i32* %r3.global-to-local, align 4
  %v1_14338 = load i32, i32* %r7.global-to-local, align 4
  %v2_14338 = add i32 %v1_14338, 48
  %v3_14338 = inttoptr i32 %v2_14338 to i32*
  store i32 %v0_14338, i32* %v3_14338, align 4
  %v0_1433c = load i32, i32* %r4.global-to-local, align 4
  %v1_1433c = add i32 %v0_1433c, 53
  %v2_1433c = inttoptr i32 %v1_1433c to i8*
  %v3_1433c = load i8, i8* %v2_1433c, align 1
  %v4_1433c = zext i8 %v3_1433c to i32
  %v1_14340 = add i32 %v0_1433c, 52
  %v2_14340 = inttoptr i32 %v1_14340 to i8*
  %v3_14340 = load i8, i8* %v2_14340, align 1
  %v4_14340 = zext i8 %v3_14340 to i32
  store i32 %v4_14340, i32* %r3.global-to-local, align 4
  %v1_14344 = add i32 %v0_1433c, 54
  %v2_14344 = inttoptr i32 %v1_14344 to i8*
  %v3_14344 = load i8, i8* %v2_14344, align 1
  %v4_14344 = zext i8 %v3_14344 to i32
  %v4_14348 = mul nuw nsw i32 %v4_1433c, 256
  %v5_14348 = or i32 %v4_14340, %v4_14348
  store i32 %v5_14348, i32* %r3.global-to-local, align 4
  %v1_1434c = add i32 %v0_1433c, 55
  %v2_1434c = inttoptr i32 %v1_1434c to i8*
  %v3_1434c = load i8, i8* %v2_1434c, align 1
  %v4_1434c = zext i8 %v3_1434c to i32
  %v4_14350 = mul nuw nsw i32 %v4_14344, 65536
  %v5_14350 = or i32 %v4_14350, %v5_14348
  %v4_14354 = mul nuw i32 %v4_1434c, 16777216
  %v5_14354 = or i32 %v5_14350, %v4_14354
  store i32 %v5_14354, i32* %r3.global-to-local, align 4
  %v1_14358 = load i32, i32* %r7.global-to-local, align 4
  %v2_14358 = add i32 %v1_14358, 52
  %v3_14358 = inttoptr i32 %v2_14358 to i32*
  store i32 %v5_14354, i32* %v3_14358, align 4
  %v0_1435c = load i32, i32* %r4.global-to-local, align 4
  %v1_1435c = add i32 %v0_1435c, 57
  %v2_1435c = inttoptr i32 %v1_1435c to i8*
  %v3_1435c = load i8, i8* %v2_1435c, align 1
  %v4_1435c = zext i8 %v3_1435c to i32
  %v1_14360 = add i32 %v0_1435c, 56
  %v2_14360 = inttoptr i32 %v1_14360 to i8*
  %v3_14360 = load i8, i8* %v2_14360, align 1
  %v4_14360 = zext i8 %v3_14360 to i32
  %v1_14364 = add i32 %v0_1435c, 60
  %v2_14364 = inttoptr i32 %v1_14364 to i8*
  %v3_14364 = load i8, i8* %v2_14364, align 1
  %v4_14364 = zext i8 %v3_14364 to i32
  store i32 %v4_14364, i32* %r3.global-to-local, align 4
  %v1_14368 = add i32 %v0_1435c, 61
  %v2_14368 = inttoptr i32 %v1_14368 to i8*
  %v3_14368 = load i8, i8* %v2_14368, align 1
  %v4_14368 = zext i8 %v3_14368 to i32
  %v1_1436c = add i32 %v0_1435c, 58
  %v2_1436c = inttoptr i32 %v1_1436c to i8*
  %v3_1436c = load i8, i8* %v2_1436c, align 1
  %v4_1436c = zext i8 %v3_1436c to i32
  %v1_14370 = add i32 %v0_1435c, 62
  %v2_14370 = inttoptr i32 %v1_14370 to i8*
  %v3_14370 = load i8, i8* %v2_14370, align 1
  %v4_14370 = zext i8 %v3_14370 to i32
  %v1_14374 = add i32 %v0_1435c, 59
  %v2_14374 = inttoptr i32 %v1_14374 to i8*
  %v3_14374 = load i8, i8* %v2_14374, align 1
  %v4_14374 = zext i8 %v3_14374 to i32
  %v4_14378 = mul nuw nsw i32 %v4_1435c, 256
  %v5_14378 = or i32 %v4_14360, %v4_14378
  %v4_1437c = mul nuw nsw i32 %v4_14368, 256
  %v5_1437c = or i32 %v4_1437c, %v4_14364
  store i32 %v5_1437c, i32* %r3.global-to-local, align 4
  %v1_14380 = add i32 %v0_1435c, 63
  %v2_14380 = inttoptr i32 %v1_14380 to i8*
  %v3_14380 = load i8, i8* %v2_14380, align 1
  %v4_14380 = zext i8 %v3_14380 to i32
  %v4_14384 = mul nuw nsw i32 %v4_1436c, 65536
  %v5_14384 = or i32 %v4_14384, %v5_14378
  %v4_14388 = mul nuw nsw i32 %v4_14370, 65536
  %v5_14388 = or i32 %v4_14388, %v5_1437c
  %v4_1438c = mul nuw i32 %v4_14380, 16777216
  %v5_1438c = or i32 %v5_14388, %v4_1438c
  %v4_14390 = mul nuw i32 %v4_14374, 16777216
  %v5_14390 = or i32 %v5_14384, %v4_14390
  store i32 %v5_1438c, i32* %r3.global-to-local, align 4
  %v1_143a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_143a0 = add i32 %v1_143a0, 56
  %v3_143a0 = inttoptr i32 %v2_143a0 to i32*
  store i32 %v5_14390, i32* %v3_143a0, align 4
  %v0_143a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_143a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_143a4 = add i32 %v1_143a4, 60
  %v3_143a4 = inttoptr i32 %v2_143a4 to i32*
  store i32 %v0_143a4, i32* %v3_143a4, align 4
  %v0_143a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_143a8 = add i32 %v0_143a8, 65
  %v2_143a8 = inttoptr i32 %v1_143a8 to i8*
  %v3_143a8 = load i8, i8* %v2_143a8, align 1
  %v4_143a8 = zext i8 %v3_143a8 to i32
  %v1_143ac = add i32 %v0_143a8, 64
  %v2_143ac = inttoptr i32 %v1_143ac to i8*
  %v3_143ac = load i8, i8* %v2_143ac, align 1
  %v4_143ac = zext i8 %v3_143ac to i32
  store i32 %v4_143ac, i32* %r3.global-to-local, align 4
  %v1_143b0 = add i32 %v0_143a8, 66
  %v2_143b0 = inttoptr i32 %v1_143b0 to i8*
  %v3_143b0 = load i8, i8* %v2_143b0, align 1
  %v4_143b0 = zext i8 %v3_143b0 to i32
  %v4_143b4 = mul nuw nsw i32 %v4_143a8, 256
  %v5_143b4 = or i32 %v4_143ac, %v4_143b4
  store i32 %v5_143b4, i32* %r3.global-to-local, align 4
  %v1_143b8 = add i32 %v0_143a8, 67
  %v2_143b8 = inttoptr i32 %v1_143b8 to i8*
  %v3_143b8 = load i8, i8* %v2_143b8, align 1
  %v4_143b8 = zext i8 %v3_143b8 to i32
  %v4_143bc = mul nuw nsw i32 %v4_143b0, 65536
  %v5_143bc = or i32 %v4_143bc, %v5_143b4
  %v4_143c0 = mul nuw i32 %v4_143b8, 16777216
  %v5_143c0 = or i32 %v5_143bc, %v4_143c0
  store i32 %v5_143c0, i32* %r3.global-to-local, align 4
  %v1_143c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_143c4 = add i32 %v1_143c4, 64
  %v3_143c4 = inttoptr i32 %v2_143c4 to i32*
  store i32 %v5_143c0, i32* %v3_143c4, align 4
  %v0_143c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_143c8 = add i32 %v0_143c8, 73
  %v2_143c8 = inttoptr i32 %v1_143c8 to i8*
  %v3_143c8 = load i8, i8* %v2_143c8, align 1
  %v4_143c8 = zext i8 %v3_143c8 to i32
  %v1_143cc = add i32 %v0_143c8, 72
  %v2_143cc = inttoptr i32 %v1_143cc to i8*
  %v3_143cc = load i8, i8* %v2_143cc, align 1
  %v4_143cc = zext i8 %v3_143cc to i32
  store i32 %v4_143cc, i32* %r3.global-to-local, align 4
  %v1_143d0 = add i32 %v0_143c8, 74
  %v2_143d0 = inttoptr i32 %v1_143d0 to i8*
  %v3_143d0 = load i8, i8* %v2_143d0, align 1
  %v4_143d0 = zext i8 %v3_143d0 to i32
  %v4_143d4 = mul nuw nsw i32 %v4_143c8, 256
  %v5_143d4 = or i32 %v4_143cc, %v4_143d4
  store i32 %v5_143d4, i32* %r3.global-to-local, align 4
  %v1_143d8 = add i32 %v0_143c8, 75
  %v2_143d8 = inttoptr i32 %v1_143d8 to i8*
  %v3_143d8 = load i8, i8* %v2_143d8, align 1
  %v4_143d8 = zext i8 %v3_143d8 to i32
  %v4_143dc = mul nuw nsw i32 %v4_143d0, 65536
  %v5_143dc = or i32 %v4_143dc, %v5_143d4
  %v4_143e0 = mul nuw i32 %v4_143d8, 16777216
  %v5_143e0 = or i32 %v5_143dc, %v4_143e0
  store i32 %v5_143e0, i32* %r3.global-to-local, align 4
  %v1_143e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_143e4 = add i32 %v1_143e4, 72
  %v3_143e4 = inttoptr i32 %v2_143e4 to i32*
  store i32 %v5_143e0, i32* %v3_143e4, align 4
  %v0_143e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_143e8 = add i32 %v0_143e8, 81
  %v2_143e8 = inttoptr i32 %v1_143e8 to i8*
  %v3_143e8 = load i8, i8* %v2_143e8, align 1
  %v4_143e8 = zext i8 %v3_143e8 to i32
  %v1_143ec = add i32 %v0_143e8, 80
  %v2_143ec = inttoptr i32 %v1_143ec to i8*
  %v3_143ec = load i8, i8* %v2_143ec, align 1
  %v4_143ec = zext i8 %v3_143ec to i32
  store i32 %v4_143ec, i32* %r3.global-to-local, align 4
  %v1_143f0 = add i32 %v0_143e8, 82
  %v2_143f0 = inttoptr i32 %v1_143f0 to i8*
  %v3_143f0 = load i8, i8* %v2_143f0, align 1
  %v4_143f0 = zext i8 %v3_143f0 to i32
  %v4_143f4 = mul nuw nsw i32 %v4_143e8, 256
  %v5_143f4 = or i32 %v4_143ec, %v4_143f4
  store i32 %v5_143f4, i32* %r3.global-to-local, align 4
  %v1_143f8 = add i32 %v0_143e8, 83
  %v2_143f8 = inttoptr i32 %v1_143f8 to i8*
  %v3_143f8 = load i8, i8* %v2_143f8, align 1
  %v4_143f8 = zext i8 %v3_143f8 to i32
  %v4_143fc = mul nuw nsw i32 %v4_143f0, 65536
  %v5_143fc = or i32 %v4_143fc, %v5_143f4
  %v4_14400 = mul nuw i32 %v4_143f8, 16777216
  %v5_14400 = or i32 %v5_143fc, %v4_14400
  store i32 %v5_14400, i32* %r3.global-to-local, align 4
  %v1_14404 = load i32, i32* %r7.global-to-local, align 4
  %v2_14404 = add i32 %v1_14404, 80
  %v3_14404 = inttoptr i32 %v2_14404 to i32*
  store i32 %v5_14400, i32* %v3_14404, align 4
  %v0_14408 = load i32, i32* %r4.global-to-local, align 4
  %v1_14408 = add i32 %v0_14408, 69
  %v2_14408 = inttoptr i32 %v1_14408 to i8*
  %v3_14408 = load i8, i8* %v2_14408, align 1
  %v4_14408 = zext i8 %v3_14408 to i32
  %v1_1440c = add i32 %v0_14408, 68
  %v2_1440c = inttoptr i32 %v1_1440c to i8*
  %v3_1440c = load i8, i8* %v2_1440c, align 1
  %v4_1440c = zext i8 %v3_1440c to i32
  store i32 %v4_1440c, i32* %r3.global-to-local, align 4
  %v1_14410 = add i32 %v0_14408, 70
  %v2_14410 = inttoptr i32 %v1_14410 to i8*
  %v3_14410 = load i8, i8* %v2_14410, align 1
  %v4_14410 = zext i8 %v3_14410 to i32
  %v4_14414 = mul nuw nsw i32 %v4_14408, 256
  %v5_14414 = or i32 %v4_1440c, %v4_14414
  store i32 %v5_14414, i32* %r3.global-to-local, align 4
  %v1_14418 = add i32 %v0_14408, 71
  %v2_14418 = inttoptr i32 %v1_14418 to i8*
  %v3_14418 = load i8, i8* %v2_14418, align 1
  %v4_14418 = zext i8 %v3_14418 to i32
  %v4_1441c = mul nuw nsw i32 %v4_14410, 65536
  %v5_1441c = or i32 %v4_1441c, %v5_14414
  %v4_14420 = mul nuw i32 %v4_14418, 16777216
  %v5_14420 = or i32 %v5_1441c, %v4_14420
  store i32 %v5_14420, i32* %r3.global-to-local, align 4
  %v1_14424 = load i32, i32* %r7.global-to-local, align 4
  %v2_14424 = add i32 %v1_14424, 68
  %v3_14424 = inttoptr i32 %v2_14424 to i32*
  store i32 %v5_14420, i32* %v3_14424, align 4
  %v0_14428 = load i32, i32* %r4.global-to-local, align 4
  %v1_14428 = add i32 %v0_14428, 77
  %v2_14428 = inttoptr i32 %v1_14428 to i8*
  %v3_14428 = load i8, i8* %v2_14428, align 1
  %v4_14428 = zext i8 %v3_14428 to i32
  %v1_1442c = add i32 %v0_14428, 76
  %v2_1442c = inttoptr i32 %v1_1442c to i8*
  %v3_1442c = load i8, i8* %v2_1442c, align 1
  %v4_1442c = zext i8 %v3_1442c to i32
  store i32 %v4_1442c, i32* %r3.global-to-local, align 4
  %v1_14430 = add i32 %v0_14428, 78
  %v2_14430 = inttoptr i32 %v1_14430 to i8*
  %v3_14430 = load i8, i8* %v2_14430, align 1
  %v4_14430 = zext i8 %v3_14430 to i32
  %v4_14434 = mul nuw nsw i32 %v4_14428, 256
  %v5_14434 = or i32 %v4_1442c, %v4_14434
  store i32 %v5_14434, i32* %r3.global-to-local, align 4
  %v1_14438 = add i32 %v0_14428, 79
  %v2_14438 = inttoptr i32 %v1_14438 to i8*
  %v3_14438 = load i8, i8* %v2_14438, align 1
  %v4_14438 = zext i8 %v3_14438 to i32
  %v4_1443c = mul nuw nsw i32 %v4_14430, 65536
  %v5_1443c = or i32 %v4_1443c, %v5_14434
  %v4_14440 = mul nuw i32 %v4_14438, 16777216
  %v5_14440 = or i32 %v5_1443c, %v4_14440
  store i32 %v5_14440, i32* %r3.global-to-local, align 4
  %v1_14444 = load i32, i32* %r7.global-to-local, align 4
  %v2_14444 = add i32 %v1_14444, 76
  %v3_14444 = inttoptr i32 %v2_14444 to i32*
  store i32 %v5_14440, i32* %v3_14444, align 4
  %v0_14448 = load i32, i32* %r4.global-to-local, align 4
  %v1_14448 = add i32 %v0_14448, 85
  %v2_14448 = inttoptr i32 %v1_14448 to i8*
  %v3_14448 = load i8, i8* %v2_14448, align 1
  %v4_14448 = zext i8 %v3_14448 to i32
  %v1_1444c = add i32 %v0_14448, 84
  %v2_1444c = inttoptr i32 %v1_1444c to i8*
  %v3_1444c = load i8, i8* %v2_1444c, align 1
  %v4_1444c = zext i8 %v3_1444c to i32
  store i32 %v4_1444c, i32* %r3.global-to-local, align 4
  %v1_14450 = add i32 %v0_14448, 86
  %v2_14450 = inttoptr i32 %v1_14450 to i8*
  %v3_14450 = load i8, i8* %v2_14450, align 1
  %v4_14450 = zext i8 %v3_14450 to i32
  %v4_14454 = mul nuw nsw i32 %v4_14448, 256
  %v5_14454 = or i32 %v4_1444c, %v4_14454
  store i32 %v5_14454, i32* %r3.global-to-local, align 4
  %v1_14458 = add i32 %v0_14448, 87
  %v2_14458 = inttoptr i32 %v1_14458 to i8*
  %v3_14458 = load i8, i8* %v2_14458, align 1
  %v4_14458 = zext i8 %v3_14458 to i32
  %v4_1445c = mul nuw nsw i32 %v4_14450, 65536
  %v5_1445c = or i32 %v4_1445c, %v5_14454
  %v4_14460 = mul nuw i32 %v4_14458, 16777216
  %v5_14460 = or i32 %v5_1445c, %v4_14460
  store i32 %v5_14460, i32* %r3.global-to-local, align 4
  %v1_14464 = load i32, i32* %r7.global-to-local, align 4
  %v2_14464 = add i32 %v1_14464, 84
  %v3_14464 = inttoptr i32 %v2_14464 to i32*
  store i32 %v5_14460, i32* %v3_14464, align 4
  ret i32 %v4_14368

; uselistorder directives
  uselistorder i32 %v4_14368, { 1, 0 }
  uselistorder i32 %v0_1435c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_142ec, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_1429c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_141bc, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 47, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 2, 0, 1, 3, 4 }
  uselistorder i32 33, { 9, 1, 0, 3, 11, 2, 10, 4, 12, 5, 13, 6, 14, 15, 7, 8 }
  uselistorder i32 30, { 5, 0, 6, 4, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 29, { 3, 4, 5, 2, 0, 1 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 5, 12, 13, 0, 6, 1, 7, 2, 8, 4, 9, 10, 11, 3 }
  uselistorder i32 23, { 13, 3, 0, 4, 1, 5, 2, 6, 14, 7, 15, 8, 16, 17, 18, 9, 10, 11, 12 }
  uselistorder i32 22, { 13, 1, 19, 2, 3, 4, 5, 0, 6, 14, 7, 15, 8, 16, 17, 9, 10, 11, 18, 12 }
  uselistorder i32 21, { 9, 1, 0, 10, 2, 11, 3, 12, 4, 13, 14, 15, 8, 5, 6, 7 }
  uselistorder i32 19, { 14, 20, 21, 22, 1, 18, 2, 5, 15, 6, 16, 7, 17, 0, 19, 8, 9, 10, 3, 23, 24, 11, 25, 4, 26, 12, 27, 13, 28 }
  uselistorder i32 18, { 10, 14, 15, 16, 2, 11, 3, 12, 4, 13, 9, 5, 6, 7, 17, 8, 18, 0, 19, 1, 20 }
  uselistorder i32 17, { 15, 19, 0, 3, 20, 21, 4, 22, 23, 5, 1, 16, 17, 18, 6, 7, 8, 9, 24, 10, 25, 11, 26, 27, 12, 28, 13, 29, 30, 2, 31, 32, 33, 14, 34, 35, 36, 37, 38 }
  uselistorder i32 6, { 44, 49, 16, 17, 90, 18, 2, 19, 3, 20, 4, 21, 45, 0, 46, 22, 47, 48, 5, 23, 24, 25, 26, 27, 28, 29, 30, 31, 6, 32, 33, 34, 35, 36, 7, 37, 38, 50, 51, 52, 8, 53, 54, 55, 56, 9, 57, 58, 59, 60, 10, 61, 11, 62, 63, 39, 64, 12, 65, 66, 67, 40, 68, 13, 69, 70, 71, 41, 72, 73, 74, 75, 76, 42, 77, 14, 78, 83, 84, 85, 86, 87, 43, 88, 15, 89, 1, 79, 80, 81, 82 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_14470(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14470:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14470 = load i32, i32* @r4, align 4
  store i32 %v3_14470, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_14488 = inttoptr i32 %arg2 to i8*
  %v3_14488 = call i32 @function_12920(i8* %v2_14488, i32 0)
  store i32 %v3_14488, i32* %r0.global-to-local, align 4
  %v0_1448c = load i32, i32* %r5.global-to-local, align 4
  %v1_1448c = inttoptr i32 %v0_1448c to i32*
  %v2_1448c = load i32, i32* %v1_1448c, align 4
  store i32 %v2_1448c, i32* %r3.global-to-local, align 4
  %v1_14490 = add i32 %v0_1448c, 4
  %v2_14490 = inttoptr i32 %v1_14490 to i32*
  %v3_14490 = load i32, i32* %v2_14490, align 4
  store i32 %v3_14490, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_14498 = load i32, i32* %r6.global-to-local, align 4
  %v1_14498 = inttoptr i32 %v0_14498 to i32*
  store i32 %v2_1448c, i32* %v1_14498, align 4
  %v3_14498 = add i32 %v0_14498, 4
  %v4_14498 = inttoptr i32 %v3_14498 to i32*
  %v5_14498 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14498, i32* %v4_14498, align 4
  %v0_1449c = load i32, i32* %r2.global-to-local, align 4
  %v1_1449c = load i32, i32* %r6.global-to-local, align 4
  %v2_1449c = add i32 %v1_1449c, 12
  %v3_1449c = inttoptr i32 %v2_1449c to i32*
  store i32 %v0_1449c, i32* %v3_1449c, align 4
  %v0_144a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_144a0 = add i32 %v0_144a0, 9
  %v2_144a0 = inttoptr i32 %v1_144a0 to i8*
  %v3_144a0 = load i8, i8* %v2_144a0, align 1
  %v4_144a0 = zext i8 %v3_144a0 to i32
  store i32 %v4_144a0, i32* %r2.global-to-local, align 4
  %v1_144a4 = add i32 %v0_144a0, 8
  %v2_144a4 = inttoptr i32 %v1_144a4 to i8*
  %v3_144a4 = load i8, i8* %v2_144a4, align 1
  %v4_144a4 = zext i8 %v3_144a4 to i32
  %v4_144a8 = mul nuw nsw i32 %v4_144a0, 256
  %v5_144a8 = or i32 %v4_144a4, %v4_144a8
  store i32 %v5_144a8, i32* %r3.global-to-local, align 4
  %v1_144ac = load i32, i32* %r6.global-to-local, align 4
  %v2_144ac = add i32 %v1_144ac, 16
  %v3_144ac = inttoptr i32 %v2_144ac to i32*
  store i32 %v5_144a8, i32* %v3_144ac, align 4
  %v0_144b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_144b0 = add i32 %v0_144b0, 11
  %v2_144b0 = inttoptr i32 %v1_144b0 to i8*
  %v3_144b0 = load i8, i8* %v2_144b0, align 1
  %v4_144b0 = zext i8 %v3_144b0 to i32
  store i32 %v4_144b0, i32* %r2.global-to-local, align 4
  %v1_144b4 = add i32 %v0_144b0, 10
  %v2_144b4 = inttoptr i32 %v1_144b4 to i8*
  %v3_144b4 = load i8, i8* %v2_144b4, align 1
  %v4_144b4 = zext i8 %v3_144b4 to i32
  %v4_144b8 = mul nuw nsw i32 %v4_144b0, 256
  %v5_144b8 = or i32 %v4_144b4, %v4_144b8
  store i32 %v5_144b8, i32* %r3.global-to-local, align 4
  %v1_144bc = load i32, i32* %r6.global-to-local, align 4
  %v2_144bc = add i32 %v1_144bc, 20
  %v3_144bc = inttoptr i32 %v2_144bc to i32*
  store i32 %v5_144b8, i32* %v3_144bc, align 4
  %v0_144c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_144c0 = add i32 %v0_144c0, 13
  %v2_144c0 = inttoptr i32 %v1_144c0 to i8*
  %v3_144c0 = load i8, i8* %v2_144c0, align 1
  %v4_144c0 = zext i8 %v3_144c0 to i32
  store i32 %v4_144c0, i32* %r2.global-to-local, align 4
  %v1_144c4 = add i32 %v0_144c0, 12
  %v2_144c4 = inttoptr i32 %v1_144c4 to i8*
  %v3_144c4 = load i8, i8* %v2_144c4, align 1
  %v4_144c4 = zext i8 %v3_144c4 to i32
  %v4_144c8 = mul nuw nsw i32 %v4_144c0, 256
  %v5_144c8 = or i32 %v4_144c4, %v4_144c8
  store i32 %v5_144c8, i32* %r3.global-to-local, align 4
  %v1_144cc = load i32, i32* %r6.global-to-local, align 4
  %v2_144cc = add i32 %v1_144cc, 24
  %v3_144cc = inttoptr i32 %v2_144cc to i32*
  store i32 %v5_144c8, i32* %v3_144cc, align 4
  %v0_144d0 = load i32, i32* %r5.global-to-local, align 4
  %v1_144d0 = add i32 %v0_144d0, 20
  %v2_144d0 = inttoptr i32 %v1_144d0 to i32*
  %v3_144d0 = load i32, i32* %v2_144d0, align 4
  store i32 %v3_144d0, i32* %r3.global-to-local, align 4
  %v1_144d4 = add i32 %v0_144d0, 14
  %v2_144d4 = inttoptr i32 %v1_144d4 to i8*
  %v3_144d4 = load i8, i8* %v2_144d4, align 1
  %v4_144d4 = zext i8 %v3_144d4 to i32
  store i32 %v4_144d4, i32* %r0.global-to-local, align 4
  %v1_144d8 = add i32 %v0_144d0, 15
  %v2_144d8 = inttoptr i32 %v1_144d8 to i8*
  %v3_144d8 = load i8, i8* %v2_144d8, align 1
  %v4_144d8 = zext i8 %v3_144d8 to i32
  store i32 %v4_144d8, i32* %ip.global-to-local, align 4
  %v1_144dc = add i32 %v0_144d0, 16
  %v2_144dc = inttoptr i32 %v1_144dc to i32*
  %v3_144dc = load i32, i32* %v2_144dc, align 4
  store i32 %v3_144dc, i32* %r1.global-to-local, align 4
  %v1_144e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_144e0 = add i32 %v1_144e0, 44
  %v3_144e0 = inttoptr i32 %v2_144e0 to i32*
  store i32 %v3_144d0, i32* %v3_144e0, align 4
  %v0_144e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_144e4 = add i32 %v0_144e4, 24
  %v2_144e4 = inttoptr i32 %v1_144e4 to i32*
  %v3_144e4 = load i32, i32* %v2_144e4, align 4
  store i32 %v3_144e4, i32* %r3.global-to-local, align 4
  %v1_144e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_144e8 = add i32 %v1_144e8, 48
  %v3_144e8 = inttoptr i32 %v2_144e8 to i32*
  store i32 %v3_144e4, i32* %v3_144e8, align 4
  %v0_144ec = load i32, i32* %r5.global-to-local, align 4
  %v1_144ec = add i32 %v0_144ec, 28
  %v2_144ec = inttoptr i32 %v1_144ec to i32*
  %v3_144ec = load i32, i32* %v2_144ec, align 4
  store i32 %v3_144ec, i32* %r3.global-to-local, align 4
  %v1_144f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_144f0 = add i32 %v1_144f0, 52
  %v3_144f0 = inttoptr i32 %v2_144f0 to i32*
  store i32 %v3_144ec, i32* %v3_144f0, align 4
  %v0_144f4 = load i32, i32* %r5.global-to-local, align 4
  %v1_144f4 = add i32 %v0_144f4, 32
  %v2_144f4 = inttoptr i32 %v1_144f4 to i32*
  %v3_144f4 = load i32, i32* %v2_144f4, align 4
  store i32 %v3_144f4, i32* %r3.global-to-local, align 4
  %v1_144f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_144f8 = add i32 %v1_144f8, 56
  %v3_144f8 = inttoptr i32 %v2_144f8 to i32*
  store i32 %v3_144f4, i32* %v3_144f8, align 4
  %v0_144fc = load i32, i32* %r5.global-to-local, align 4
  %v1_144fc = add i32 %v0_144fc, 40
  %v2_144fc = inttoptr i32 %v1_144fc to i32*
  %v3_144fc = load i32, i32* %v2_144fc, align 4
  store i32 %v3_144fc, i32* %r3.global-to-local, align 4
  %v1_14500 = load i32, i32* %r6.global-to-local, align 4
  %v2_14500 = add i32 %v1_14500, 64
  %v3_14500 = inttoptr i32 %v2_14500 to i32*
  store i32 %v3_144fc, i32* %v3_14500, align 4
  %v0_14504 = load i32, i32* %r5.global-to-local, align 4
  %v1_14504 = add i32 %v0_14504, 48
  %v2_14504 = inttoptr i32 %v1_14504 to i32*
  %v3_14504 = load i32, i32* %v2_14504, align 4
  store i32 %v3_14504, i32* %r3.global-to-local, align 4
  %v1_14508 = load i32, i32* %r6.global-to-local, align 4
  %v2_14508 = add i32 %v1_14508, 72
  %v3_14508 = inttoptr i32 %v2_14508 to i32*
  store i32 %v3_14504, i32* %v3_14508, align 4
  %v0_1450c = load i32, i32* %r5.global-to-local, align 4
  %v1_1450c = add i32 %v0_1450c, 36
  %v2_1450c = inttoptr i32 %v1_1450c to i32*
  %v3_1450c = load i32, i32* %v2_1450c, align 4
  store i32 %v3_1450c, i32* %r3.global-to-local, align 4
  %v1_14510 = load i32, i32* %r6.global-to-local, align 4
  %v2_14510 = add i32 %v1_14510, 60
  %v3_14510 = inttoptr i32 %v2_14510 to i32*
  store i32 %v3_1450c, i32* %v3_14510, align 4
  %v0_14514 = load i32, i32* %r5.global-to-local, align 4
  %v1_14514 = add i32 %v0_14514, 44
  %v2_14514 = inttoptr i32 %v1_14514 to i32*
  %v3_14514 = load i32, i32* %v2_14514, align 4
  store i32 %v3_14514, i32* %r3.global-to-local, align 4
  %v0_14518 = load i32, i32* %r0.global-to-local, align 4
  %v1_14518 = load i32, i32* %ip.global-to-local, align 4
  %v4_14518 = mul i32 %v1_14518, 256
  %v5_14518 = or i32 %v4_14518, %v0_14518
  store i32 %v5_14518, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_14520 = load i32, i32* %r6.global-to-local, align 4
  %v2_14520 = add i32 %v1_14520, 28
  %v3_14520 = inttoptr i32 %v2_14520 to i32*
  store i32 %v5_14518, i32* %v3_14520, align 4
  %v0_14524 = load i32, i32* %r1.global-to-local, align 4
  %v1_14524 = load i32, i32* %r6.global-to-local, align 4
  %v2_14524 = add i32 %v1_14524, 32
  %v3_14524 = inttoptr i32 %v2_14524 to i32*
  store i32 %v0_14524, i32* %v3_14524, align 4
  %v0_14528 = load i32, i32* %r2.global-to-local, align 4
  %v1_14528 = load i32, i32* %r6.global-to-local, align 4
  %v2_14528 = add i32 %v1_14528, 36
  %v3_14528 = inttoptr i32 %v2_14528 to i32*
  store i32 %v0_14528, i32* %v3_14528, align 4
  %v0_1452c = load i32, i32* %r3.global-to-local, align 4
  %v1_1452c = load i32, i32* %r6.global-to-local, align 4
  %v2_1452c = add i32 %v1_1452c, 68
  %v3_1452c = inttoptr i32 %v2_1452c to i32*
  store i32 %v0_1452c, i32* %v3_1452c, align 4
  %v0_14530 = load i32, i32* %r5.global-to-local, align 4
  %v1_14530 = add i32 %v0_14530, 52
  %v2_14530 = inttoptr i32 %v1_14530 to i32*
  %v3_14530 = load i32, i32* %v2_14530, align 4
  store i32 %v3_14530, i32* %r3.global-to-local, align 4
  %v1_14534 = load i32, i32* %r6.global-to-local, align 4
  %v2_14534 = add i32 %v1_14534, 76
  %v3_14534 = inttoptr i32 %v2_14534 to i32*
  store i32 %v3_14530, i32* %v3_14534, align 4
  %v2_14538 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14538, i32* %r4.global-to-local, align 4
  ret i32 %v5_14518

; uselistorder directives
  uselistorder i32 %v0_144d0, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 14, 10, 11, 0, 4, 43, 12, 13, 15, 16, 5, 17, 18, 19, 6, 20, 21, 22, 7, 23, 24, 25, 8, 26, 27, 28, 9, 29, 30, 31, 1, 32, 33, 34, 35, 36, 2, 37, 38, 39, 40, 41, 3, 42 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 15, { 16, 12, 11, 3, 13, 0, 14, 4, 15, 5, 6, 7, 8, 9, 1, 17, 18, 10, 19, 20, 21, 22, 2, 23 }
  uselistorder i32 14, { 18, 14, 26, 0, 15, 1, 13, 4, 16, 5, 17, 6, 7, 8, 9, 10, 11, 12, 19, 20, 2, 21, 22, 23, 24, 3, 25 }
  uselistorder i32 13, { 33, 21, 20, 6, 2, 22, 23, 24, 25, 7, 26, 8, 27, 9, 28, 10, 29, 11, 30, 12, 31, 13, 32, 0, 1, 14, 15, 16, 17, 18, 19, 34, 35, 36, 37, 38, 3, 39, 40, 41, 42, 43, 44, 45, 46, 4, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 5, 59, 60 }
  uselistorder i32 9, { 47, 48, 49, 9, 4, 50, 10, 5, 11, 6, 12, 7, 8, 13, 34, 29, 15, 33, 16, 32, 14, 3, 35, 30, 36, 2, 31, 17, 37, 18, 38, 19, 39, 20, 40, 41, 21, 42, 43, 22, 23, 44, 24, 45, 25, 46, 0, 26, 1, 27, 62, 51, 52, 28, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64 }
  uselistorder i32 (i8*, i32)* @function_12920, { 1, 5, 7, 6, 0, 2, 3, 4 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_14540() local_unnamed_addr {
dec_label_pc_14540:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_14540 = load i32, i32* @r1, align 4
  %v1_14540 = load i32, i32* @r0, align 4
  %v2_14540 = sub i32 %v0_14540, %v1_14540
  %v3_14540 = icmp ult i32 %v0_14540, %v1_14540
  %v4_14540 = xor i32 %v1_14540, %v0_14540
  %v5_14540 = xor i32 %v2_14540, %v0_14540
  %v6_14540 = and i32 %v5_14540, %v4_14540
  %v7_14540 = icmp slt i32 %v6_14540, 0
  store i1 %v7_14540, i1* %cpsr_v.global-to-local, align 1
  %v8_14540 = icmp slt i32 %v2_14540, 0
  store i1 %v8_14540, i1* %cpsr_n.global-to-local, align 1
  %v9_14540 = icmp eq i32 %v0_14540, %v1_14540
  store i1 %v9_14540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14540, label %dec_label_pc_1478c, label %dec_label_pc_14548

dec_label_pc_14548:                               ; preds = %dec_label_pc_14540
  br i1 %v9_14540, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_14548
  %merge = phi i32 [ %v0_14540, %dec_label_pc_14548 ], [ %v2_14820, %bb141 ], [ %v11_1483c, %bb144 ], [ %v7_1483c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14548
  store i32 %v1_14540, i32* %stack_var_-8, align 4
  %v0_14550 = load i32, i32* @r2, align 4
  %v2_14550 = add i32 %v0_14550, -4
  store i32 %v2_14550, i32* %r2.global-to-local, align 4
  %v4_14550 = sub i32 3, %v0_14550
  %v5_14550 = and i32 %v4_14550, %v0_14550
  %v6_14550 = icmp slt i32 %v5_14550, 0
  store i1 %v6_14550, i1* %cpsr_v.global-to-local, align 1
  %v7_14550 = icmp slt i32 %v2_14550, 0
  store i1 %v7_14550, i1* %cpsr_n.global-to-local, align 1
  %v8_14550 = icmp eq i32 %v0_14550, 4
  store i1 %v8_14550, i1* %cpsr_z.global-to-local, align 1
  %v5_14554 = icmp slt i32 %v0_14550, 4
  br i1 %v5_14554, label %bb131, label %dec_label_pc_14558

dec_label_pc_14558:                               ; preds = %bb
  %v1_14558 = urem i32 %v1_14540, 4
  store i32 %v1_14558, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14558 = icmp eq i32 %v1_14558, 0
  store i1 %v2_14558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14558, label %dec_label_pc_14560, label %dec_label_pc_14604

dec_label_pc_14560:                               ; preds = %dec_label_pc_14558
  %v1_14560 = urem i32 %v0_14540, 4
  store i32 %v1_14560, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14560 = icmp eq i32 %v1_14560, 0
  store i1 %v2_14560, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14540 to i2
  br i1 %v2_14560, label %dec_label_pc_14568, label %dec_label_pc_14634

dec_label_pc_14568:                               ; preds = %dec_label_pc_14560, %dec_label_pc_1462c
  %v0_1458092 = phi i32 [ %v1_14540, %dec_label_pc_14560 ], [ %v0_1467c75, %dec_label_pc_1462c ]
  %v0_1457c91 = phi i32 [ %v0_14540, %dec_label_pc_14560 ], [ %v0_1462c, %dec_label_pc_1462c ]
  %v0_14568 = phi i32 [ %v2_14550, %dec_label_pc_14560 ], [ %v2_14624, %dec_label_pc_1462c ]
  %v2_14568 = add i32 %v0_14568, -8
  store i32 %v2_14568, i32* %r2.global-to-local, align 4
  %v4_14568 = sub i32 7, %v0_14568
  %v5_14568 = and i32 %v4_14568, %v0_14568
  %v6_14568 = icmp slt i32 %v5_14568, 0
  store i1 %v6_14568, i1* %cpsr_v.global-to-local, align 1
  %v7_14568 = icmp slt i32 %v2_14568, 0
  store i1 %v7_14568, i1* %cpsr_n.global-to-local, align 1
  %v8_14568 = icmp eq i32 %v0_14568, 8
  store i1 %v8_14568, i1* %cpsr_z.global-to-local, align 1
  %v5_1456c = icmp slt i32 %v0_14568, 8
  br i1 %v5_1456c, label %dec_label_pc_145bc, label %dec_label_pc_14570

dec_label_pc_14570:                               ; preds = %dec_label_pc_14568
  %v2_14570 = add i32 %v0_14568, -28
  store i32 %v2_14570, i32* %r2.global-to-local, align 4
  %v4_14570 = sub i32 27, %v0_14568
  %v5_14570 = and i32 %v4_14570, %v2_14568
  %v6_14570 = icmp slt i32 %v5_14570, 0
  store i1 %v6_14570, i1* %cpsr_v.global-to-local, align 1
  %v7_14570 = icmp slt i32 %v2_14570, 0
  store i1 %v7_14570, i1* %cpsr_n.global-to-local, align 1
  %v8_14570 = icmp eq i32 %v2_14568, 20
  store i1 %v8_14570, i1* %cpsr_z.global-to-local, align 1
  %v5_14574 = icmp slt i32 %v2_14568, 20
  br i1 %v5_14574, label %dec_label_pc_145a8, label %dec_label_pc_14578

dec_label_pc_14578:                               ; preds = %dec_label_pc_14570
  %v0_14578 = load i32, i32* @r4, align 4
  store i32 %v0_14578, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1457c

dec_label_pc_1457c:                               ; preds = %dec_label_pc_1457c.dec_label_pc_1457c_crit_edge, %dec_label_pc_14578
  %v0_14580 = phi i32 [ %v12_14588, %dec_label_pc_1457c.dec_label_pc_1457c_crit_edge ], [ %v0_1458092, %dec_label_pc_14578 ]
  %v0_1457c = phi i32 [ %v0_1457c.pre, %dec_label_pc_1457c.dec_label_pc_1457c_crit_edge ], [ %v0_1457c91, %dec_label_pc_14578 ]
  %v1_1457c = inttoptr i32 %v0_1457c to i32*
  %v2_1457c = load i32, i32* %v1_1457c, align 4
  store i32 %v2_1457c, i32* %r3.global-to-local, align 4
  %v3_1457c = add i32 %v0_1457c, 4
  %v4_1457c = inttoptr i32 %v3_1457c to i32*
  %v5_1457c = load i32, i32* %v4_1457c, align 4
  store i32 %v5_1457c, i32* %r4.global-to-local, align 4
  %v6_1457c = add i32 %v0_1457c, 8
  %v7_1457c = inttoptr i32 %v6_1457c to i32*
  %v8_1457c = load i32, i32* %v7_1457c, align 4
  store i32 %v8_1457c, i32* %ip.global-to-local, align 4
  %v9_1457c = add i32 %v0_1457c, 12
  %v10_1457c = inttoptr i32 %v9_1457c to i32*
  %v11_1457c = load i32, i32* %v10_1457c, align 4
  store i32 %v11_1457c, i32* %lr.global-to-local, align 4
  %v12_1457c = add i32 %v0_1457c, 16
  store i32 %v12_1457c, i32* %r1.global-to-local, align 4
  %v1_14580 = inttoptr i32 %v0_14580 to i32*
  store i32 %v2_1457c, i32* %v1_14580, align 4
  %v3_14580 = add i32 %v0_14580, 4
  %v4_14580 = inttoptr i32 %v3_14580 to i32*
  %v5_14580 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14580, i32* %v4_14580, align 4
  %v6_14580 = add i32 %v0_14580, 8
  %v7_14580 = inttoptr i32 %v6_14580 to i32*
  %v8_14580 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14580, i32* %v7_14580, align 4
  %v9_14580 = add i32 %v0_14580, 12
  %v10_14580 = inttoptr i32 %v9_14580 to i32*
  %v11_14580 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14580, i32* %v10_14580, align 4
  %v12_14580 = add i32 %v0_14580, 16
  store i32 %v12_14580, i32* %r0.global-to-local, align 4
  %v0_14584 = load i32, i32* %r1.global-to-local, align 4
  %v1_14584 = inttoptr i32 %v0_14584 to i32*
  %v2_14584 = load i32, i32* %v1_14584, align 4
  store i32 %v2_14584, i32* %r3.global-to-local, align 4
  %v3_14584 = add i32 %v0_14584, 4
  %v4_14584 = inttoptr i32 %v3_14584 to i32*
  %v5_14584 = load i32, i32* %v4_14584, align 4
  store i32 %v5_14584, i32* %r4.global-to-local, align 4
  %v6_14584 = add i32 %v0_14584, 8
  %v7_14584 = inttoptr i32 %v6_14584 to i32*
  %v8_14584 = load i32, i32* %v7_14584, align 4
  store i32 %v8_14584, i32* %ip.global-to-local, align 4
  %v9_14584 = add i32 %v0_14584, 12
  %v10_14584 = inttoptr i32 %v9_14584 to i32*
  %v11_14584 = load i32, i32* %v10_14584, align 4
  store i32 %v11_14584, i32* @lr, align 4
  %v12_14584 = add i32 %v0_14584, 16
  store i32 %v12_14584, i32* @r1, align 4
  %v1_14588 = inttoptr i32 %v12_14580 to i32*
  store i32 %v2_14584, i32* %v1_14588, align 4
  %v3_14588 = add i32 %v0_14580, 20
  %v4_14588 = inttoptr i32 %v3_14588 to i32*
  %v5_14588 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14588, i32* %v4_14588, align 4
  %v6_14588 = add i32 %v0_14580, 24
  %v7_14588 = inttoptr i32 %v6_14588 to i32*
  %v8_14588 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14588, i32* %v7_14588, align 4
  %v9_14588 = add i32 %v0_14580, 28
  %v10_14588 = inttoptr i32 %v9_14588 to i32*
  %v11_14588 = load i32, i32* @lr, align 4
  store i32 %v11_14588, i32* %v10_14588, align 4
  %v12_14588 = add i32 %v0_14580, 32
  store i32 %v12_14588, i32* @r0, align 4
  %v0_1458c = load i32, i32* %r2.global-to-local, align 4
  %v2_1458c = add i32 %v0_1458c, -32
  store i32 %v2_1458c, i32* %r2.global-to-local, align 4
  %v6_14590 = icmp slt i32 %v0_1458c, 32
  br i1 %v6_14590, label %dec_label_pc_14594, label %dec_label_pc_1457c.dec_label_pc_1457c_crit_edge

dec_label_pc_1457c.dec_label_pc_1457c_crit_edge:  ; preds = %dec_label_pc_1457c
  %v0_1457c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1457c

dec_label_pc_14594:                               ; preds = %dec_label_pc_1457c
  %v4_14594 = add i32 %v0_1458c, -16
  %v6_14594 = add i32 %v0_1458c, 2147483616
  %v7_14594 = and i32 %v4_14594, %v6_14594
  %v8_14594 = icmp slt i32 %v7_14594, 0
  store i1 %v8_14594, i1* %cpsr_v.global-to-local, align 1
  %v9_14594 = icmp slt i32 %v4_14594, 0
  store i1 %v9_14594, i1* %cpsr_n.global-to-local, align 1
  %v10_14594 = icmp eq i32 %v4_14594, 0
  store i1 %v10_14594, i1* %cpsr_z.global-to-local, align 1
  %v5_14598 = icmp slt i32 %v2_1458c, -16
  br i1 %v5_14598, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_14594
  %v6_14598 = load i32, i32* @r1, align 4
  %v7_14598 = inttoptr i32 %v6_14598 to i32*
  %v8_14598 = load i32, i32* %v7_14598, align 4
  store i32 %v8_14598, i32* %r3.global-to-local, align 4
  %v9_14598 = add i32 %v6_14598, 4
  %v10_14598 = inttoptr i32 %v9_14598 to i32*
  %v11_14598 = load i32, i32* %v10_14598, align 4
  store i32 %v11_14598, i32* %r4.global-to-local, align 4
  %v12_14598 = add i32 %v6_14598, 8
  %v13_14598 = inttoptr i32 %v12_14598 to i32*
  %v14_14598 = load i32, i32* %v13_14598, align 4
  store i32 %v14_14598, i32* %ip.global-to-local, align 4
  %v15_14598 = add i32 %v6_14598, 12
  %v16_14598 = inttoptr i32 %v15_14598 to i32*
  %v17_14598 = load i32, i32* %v16_14598, align 4
  store i32 %v17_14598, i32* @lr, align 4
  %v18_14598 = add i32 %v6_14598, 16
  store i32 %v18_14598, i32* @r1, align 4
  %v7_1459c = inttoptr i32 %v12_14588 to i32*
  store i32 %v8_14598, i32* %v7_1459c, align 4
  %v9_1459c = add i32 %v0_14580, 36
  %v10_1459c = inttoptr i32 %v9_1459c to i32*
  %v11_1459c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1459c, i32* %v10_1459c, align 4
  %v12_1459c = add i32 %v0_14580, 40
  %v13_1459c = inttoptr i32 %v12_1459c to i32*
  %v14_1459c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_1459c, i32* %v13_1459c, align 4
  %v15_1459c = add i32 %v0_14580, 44
  %v16_1459c = inttoptr i32 %v15_1459c to i32*
  %v17_1459c = load i32, i32* @lr, align 4
  store i32 %v17_1459c, i32* %v16_1459c, align 4
  %v18_1459c = add i32 %v0_14580, 48
  store i32 %v18_1459c, i32* @r0, align 4
  %v6_145a0 = load i32, i32* %r2.global-to-local, align 4
  %v7_145a0 = add i32 %v6_145a0, -16
  store i32 %v7_145a0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14594, %bb128
  %v3_145b0101 = phi i32 [ %v12_14588, %dec_label_pc_14594 ], [ %v18_1459c, %bb128 ]
  %v0_145a895 = phi i32 [ %v2_1458c, %dec_label_pc_14594 ], [ %v7_145a0, %bb128 ]
  %v2_145a4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_145a4, i32* @r4, align 4
  br label %dec_label_pc_145a8

dec_label_pc_145a8:                               ; preds = %dec_label_pc_14570, %.thread1
  %v3_145b0100 = phi i32 [ %v0_1458092, %dec_label_pc_14570 ], [ %v3_145b0101, %.thread1 ]
  %v0_145a8 = phi i32 [ %v2_14570, %dec_label_pc_14570 ], [ %v0_145a895, %.thread1 ]
  %v1_145a8 = add i32 %v0_145a8, 20
  store i32 %v1_145a8, i32* %r2.global-to-local, align 4
  %v3_145a8 = sub i32 0, %v0_145a8
  %v4_145a8 = and i32 %v1_145a8, %v3_145a8
  %v5_145a8 = icmp slt i32 %v4_145a8, 0
  store i1 %v5_145a8, i1* %cpsr_v.global-to-local, align 1
  %v6_145a8 = icmp slt i32 %v1_145a8, 0
  store i1 %v6_145a8, i1* %cpsr_n.global-to-local, align 1
  %v7_145a8 = icmp eq i32 %v1_145a8, 0
  store i1 %v7_145a8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_145ac

dec_label_pc_145ac:                               ; preds = %.thread117, %dec_label_pc_145a8
  %v0_145bc.pre147 = phi i32 [ %v0_145bc.pre, %.thread117 ], [ %v1_145a8, %dec_label_pc_145a8 ]
  %v3_145b0 = phi i32 [ %v3_145b098118, %.thread117 ], [ %v3_145b0100, %dec_label_pc_145a8 ]
  %v1_145b4 = phi i1 [ %v1_145b8, %.thread117 ], [ %v5_145a8, %dec_label_pc_145a8 ]
  %v0_145b4 = phi i1 [ %v0_145b8, %.thread117 ], [ %v6_145a8, %dec_label_pc_145a8 ]
  %v2_145ac = xor i1 %v1_145b4, %v0_145b4
  br i1 %v2_145ac, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_145ac
  %v3_145ac = load i32, i32* @r1, align 4
  %v4_145ac = inttoptr i32 %v3_145ac to i32*
  %v5_145ac = load i32, i32* %v4_145ac, align 4
  store i32 %v5_145ac, i32* %r3.global-to-local, align 4
  %v6_145ac = add i32 %v3_145ac, 4
  %v7_145ac = inttoptr i32 %v6_145ac to i32*
  %v8_145ac = load i32, i32* %v7_145ac, align 4
  store i32 %v8_145ac, i32* %ip.global-to-local, align 4
  %v9_145ac = add i32 %v3_145ac, 8
  %v10_145ac = inttoptr i32 %v9_145ac to i32*
  %v11_145ac = load i32, i32* %v10_145ac, align 4
  store i32 %v11_145ac, i32* @lr, align 4
  %v12_145ac = add i32 %v3_145ac, 12
  store i32 %v12_145ac, i32* @r1, align 4
  %v4_145b0 = inttoptr i32 %v3_145b0 to i32*
  store i32 %v5_145ac, i32* %v4_145b0, align 4
  %v6_145b0 = add i32 %v3_145b0, 4
  %v7_145b0 = inttoptr i32 %v6_145b0 to i32*
  %v8_145b0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_145b0, i32* %v7_145b0, align 4
  %v9_145b0 = add i32 %v3_145b0, 8
  %v10_145b0 = inttoptr i32 %v9_145b0 to i32*
  %v11_145b0 = load i32, i32* @lr, align 4
  store i32 %v11_145b0, i32* %v10_145b0, align 4
  %v12_145b0 = add i32 %v3_145b0, 12
  store i32 %v12_145b0, i32* @r0, align 4
  %v3_145b4 = load i32, i32* %r2.global-to-local, align 4
  %v4_145b4 = add i32 %v3_145b4, -12
  store i32 %v4_145b4, i32* %r2.global-to-local, align 4
  %v6_145b4 = sub i32 11, %v3_145b4
  %v7_145b4 = and i32 %v6_145b4, %v3_145b4
  %v8_145b4 = icmp slt i32 %v7_145b4, 0
  store i1 %v8_145b4, i1* %cpsr_v.global-to-local, align 1
  %v9_145b4 = icmp slt i32 %v4_145b4, 0
  store i1 %v9_145b4, i1* %cpsr_n.global-to-local, align 1
  %v10_145b4 = icmp eq i32 %v3_145b4, 12
  store i1 %v10_145b4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_145ac, %bb129
  %v0_145bc.pre = phi i32 [ %v4_145b4, %bb129 ], [ %v0_145bc.pre147, %dec_label_pc_145ac ]
  %v3_145b098118 = phi i32 [ %v12_145b0, %bb129 ], [ %v3_145b0, %dec_label_pc_145ac ]
  %v1_145b8 = phi i1 [ %v8_145b4, %bb129 ], [ %v1_145b4, %dec_label_pc_145ac ]
  %v0_145b8 = phi i1 [ %v9_145b4, %bb129 ], [ %v0_145b4, %dec_label_pc_145ac ]
  %v2_145b8 = xor i1 %v1_145b8, %v0_145b8
  br i1 %v2_145b8, label %dec_label_pc_145bc, label %dec_label_pc_145ac

dec_label_pc_145bc:                               ; preds = %.thread117, %dec_label_pc_14568
  %v7_145cc = phi i32 [ %v0_1458092, %dec_label_pc_14568 ], [ %v3_145b098118, %.thread117 ]
  %v0_145bc = phi i32 [ %v2_14568, %dec_label_pc_14568 ], [ %v0_145bc.pre, %.thread117 ]
  %v2_145bc = add i32 %v0_145bc, 8
  store i32 %v2_145bc, i32* %r2.global-to-local, align 4
  %v4_145bc = sub i32 0, %v0_145bc
  %v5_145bc = and i32 %v2_145bc, %v4_145bc
  %v6_145bc = icmp slt i32 %v5_145bc, 0
  store i1 %v6_145bc, i1* %cpsr_v.global-to-local, align 1
  %v7_145bc = icmp slt i32 %v2_145bc, 0
  store i1 %v7_145bc, i1* %cpsr_n.global-to-local, align 1
  %v8_145bc = icmp eq i32 %v2_145bc, 0
  store i1 %v8_145bc, i1* %cpsr_z.global-to-local, align 1
  %v5_145c0 = icmp slt i32 %v0_145bc, -8
  br i1 %v5_145c0, label %bb131, label %dec_label_pc_145c4

dec_label_pc_145c4:                               ; preds = %dec_label_pc_145bc
  %v6_145c4 = add i32 %v0_145bc, 4
  store i32 %v6_145c4, i32* %r2.global-to-local, align 4
  %v8_145c4 = sub i32 -5, %v0_145bc
  %v9_145c4 = and i32 %v8_145c4, %v2_145bc
  %v10_145c4 = icmp slt i32 %v9_145c4, 0
  store i1 %v10_145c4, i1* %cpsr_v.global-to-local, align 1
  %v11_145c4 = icmp slt i32 %v6_145c4, 0
  store i1 %v11_145c4, i1* %cpsr_n.global-to-local, align 1
  %v12_145c4 = icmp eq i32 %v2_145bc, 4
  store i1 %v12_145c4, i1* %cpsr_z.global-to-local, align 1
  %v5_145c8 = icmp slt i32 %v2_145bc, 4
  %v6_145c8 = load i32, i32* @r1, align 4
  %v7_145c8 = inttoptr i32 %v6_145c8 to i32*
  %v8_145c8 = load i32, i32* %v7_145c8, align 4
  store i32 %v8_145c8, i32* %r3.global-to-local, align 4
  %v10_145c8 = add i32 %v6_145c8, 4
  br i1 %v5_145c8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_145c4
  store i32 %v10_145c8, i32* @r1, align 4
  %v8_145cc = inttoptr i32 %v7_145cc to i32*
  store i32 %v8_145c8, i32* %v8_145cc, align 4
  %v9_145cc = load i32, i32* @r0, align 4
  %v10_145cc = add i32 %v9_145cc, 4
  store i32 %v10_145cc, i32* @r0, align 4
  %v0_145dc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_145c4
  %v10_145d0 = inttoptr i32 %v10_145c8 to i32*
  %v11_145d0 = load i32, i32* %v10_145d0, align 4
  store i32 %v11_145d0, i32* %ip.global-to-local, align 4
  %v12_145d0 = add i32 %v6_145c8, 8
  store i32 %v12_145d0, i32* @r1, align 4
  %v7_145d4 = inttoptr i32 %v7_145cc to i32*
  store i32 %v8_145c8, i32* %v7_145d4, align 4
  %v9_145d4 = add i32 %v7_145cc, 4
  %v10_145d4 = inttoptr i32 %v9_145d4 to i32*
  %v11_145d4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_145d4, i32* %v10_145d4, align 4
  %v12_145d4 = add i32 %v7_145cc, 8
  store i32 %v12_145d4, i32* @r0, align 4
  %v6_145d8 = load i32, i32* %r2.global-to-local, align 4
  %v7_145d8 = add i32 %v6_145d8, -4
  store i32 %v7_145d8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_145bc, %bb, %dec_label_pc_14784, %dec_label_pc_14718, %dec_label_pc_146ac, %bb130
  %v2_145ec = phi i32 [ %v10_145cc, %.thread5 ], [ %v0_1467c75, %.thread11 ], [ %v7_145cc, %dec_label_pc_145bc ], [ %v1_14540, %bb ], [ %v2_145ec113, %dec_label_pc_14784 ], [ %v2_145ec112, %dec_label_pc_14718 ], [ %v2_145ec111, %dec_label_pc_146ac ], [ %v12_145d4, %bb130 ]
  %v0_145dc = phi i32 [ %v0_145dc.pre, %.thread5 ], [ %v2_14624, %.thread11 ], [ %v2_145bc, %dec_label_pc_145bc ], [ %v2_14550, %bb ], [ %v0_145dc109, %dec_label_pc_14784 ], [ %v0_145dc108, %dec_label_pc_14718 ], [ %v0_145dc107, %dec_label_pc_146ac ], [ %v7_145d8, %bb130 ]
  %v1_145dc = add i32 %v0_145dc, 4
  store i32 %v1_145dc, i32* %r2.global-to-local, align 4
  %v3_145dc = sub i32 0, %v0_145dc
  %v4_145dc = and i32 %v1_145dc, %v3_145dc
  %v5_145dc = icmp slt i32 %v4_145dc, 0
  store i1 %v5_145dc, i1* %cpsr_v.global-to-local, align 1
  %v6_145dc = icmp slt i32 %v1_145dc, 0
  store i1 %v6_145dc, i1* %cpsr_n.global-to-local, align 1
  %v7_145dc = icmp eq i32 %v1_145dc, 0
  store i1 %v7_145dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_145dc, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_145e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_145e0, i32* %r0.global-to-local, align 4
  ret i32 %v3_145e0

bb133:                                            ; preds = %bb131
  %v1_145e4 = add i32 %v0_145dc, 2
  %v3_145e4 = sub i32 -3, %v0_145dc
  %v4_145e4 = and i32 %v3_145e4, %v1_145dc
  %v5_145e4 = icmp slt i32 %v4_145e4, 0
  store i1 %v5_145e4, i1* %cpsr_v.global-to-local, align 1
  %v6_145e4 = icmp slt i32 %v1_145e4, 0
  store i1 %v6_145e4, i1* %cpsr_n.global-to-local, align 1
  %v7_145e4 = icmp eq i32 %v1_145dc, 2
  store i1 %v7_145e4, i1* %cpsr_z.global-to-local, align 1
  %v0_145e8 = load i32, i32* @r1, align 4
  %v1_145e8 = inttoptr i32 %v0_145e8 to i8*
  %v2_145e8 = load i8, i8* %v1_145e8, align 1
  %v3_145e8 = zext i8 %v2_145e8 to i32
  store i32 %v3_145e8, i32* %r3.global-to-local, align 4
  %v5_145e8 = add i32 %v0_145e8, 1
  store i32 %v5_145e8, i32* %r1.global-to-local, align 4
  %v3_145ec = inttoptr i32 %v2_145ec to i8*
  store i8 %v2_145e8, i8* %v3_145ec, align 1
  %v4_145ec = load i32, i32* @r0, align 4
  %v5_145ec = add i32 %v4_145ec, 1
  store i32 %v5_145ec, i32* %r0.global-to-local, align 4
  %v0_145f0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_145f0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_145f0 = xor i1 %v0_145f0, %v1_145f0
  br i1 %v2_145f0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_145f0 = load i32, i32* %r1.global-to-local, align 4
  %v4_145f0 = inttoptr i32 %v3_145f0 to i8*
  %v5_145f0 = load i8, i8* %v4_145f0, align 1
  %v6_145f0 = zext i8 %v5_145f0 to i32
  store i32 %v6_145f0, i32* %r3.global-to-local, align 4
  %v8_145f0 = add i32 %v3_145f0, 1
  store i32 %v8_145f0, i32* %r1.global-to-local, align 4
  %v6_145f4 = inttoptr i32 %v5_145ec to i8*
  store i8 %v5_145f0, i8* %v6_145f4, align 1
  %v7_145f4 = load i32, i32* %r0.global-to-local, align 4
  %v8_145f4 = add i32 %v7_145f4, 1
  store i32 %v8_145f4, i32* %r0.global-to-local, align 4
  %v1_145f8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_145f8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_145fc = phi i32 [ %v8_145f4, %bb134 ], [ %v5_145ec, %bb133 ]
  %v2_145fc = phi i1 [ %v2_145f8.pre, %bb134 ], [ %v1_145f0, %bb133 ]
  %v1_145fc = phi i1 [ %v1_145f8.pre, %bb134 ], [ %v0_145f0, %bb133 ]
  %v0_145f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_145f8 = xor i1 %v2_145fc, %v1_145fc
  %v4_145f8 = or i1 %v0_145f8, %v3_145f8
  br i1 %v4_145f8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_145f8 = load i32, i32* %r1.global-to-local, align 4
  %v6_145f8 = inttoptr i32 %v5_145f8 to i8*
  %v7_145f8 = load i8, i8* %v6_145f8, align 1
  %v8_145f8 = zext i8 %v7_145f8 to i32
  store i32 %v8_145f8, i32* %r3.global-to-local, align 4
  %v10_145f8 = add i32 %v5_145f8, 1
  store i32 %v10_145f8, i32* %r1.global-to-local, align 4
  %v8_145fc = inttoptr i32 %v7_145fc to i8*
  store i8 %v7_145f8, i8* %v8_145fc, align 1
  %v9_145fc = load i32, i32* %r0.global-to-local, align 4
  %v10_145fc = add i32 %v9_145fc, 1
  store i32 %v10_145fc, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_14600 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14600, i32* %r0.global-to-local, align 4
  ret i32 %v2_14600

dec_label_pc_14604:                               ; preds = %dec_label_pc_14558
  %v1_14604 = sub nsw i32 4, %v1_14558
  store i32 %v1_14604, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14608 = icmp ult i32 %v1_14604, 2
  store i1 %v8_14608, i1* %cpsr_n.global-to-local, align 1
  %v9_14608 = icmp eq i32 %v1_14604, 2
  store i1 %v9_14608, i1* %cpsr_z.global-to-local, align 1
  %v1_1460c = inttoptr i32 %v0_14540 to i8*
  %v2_1460c = load i8, i8* %v1_1460c, align 1
  %v3_1460c = zext i8 %v2_1460c to i32
  store i32 %v3_1460c, i32* %r3.global-to-local, align 4
  %v5_1460c = add i32 %v0_14540, 1
  store i32 %v5_1460c, i32* @r1, align 4
  %v3_14610 = inttoptr i32 %v1_14540 to i8*
  store i8 %v2_1460c, i8* %v3_14610, align 1
  %v4_14610 = load i32, i32* @r0, align 4
  %v5_14610 = add i32 %v4_14610, 1
  store i32 %v5_14610, i32* @r0, align 4
  br i1 %v8_14608, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_14604
  %v6_14614 = load i32, i32* @r1, align 4
  %v7_14614 = inttoptr i32 %v6_14614 to i8*
  %v8_14614 = load i8, i8* %v7_14614, align 1
  %v9_14614 = zext i8 %v8_14614 to i32
  store i32 %v9_14614, i32* %r3.global-to-local, align 4
  %v11_14614 = add i32 %v6_14614, 1
  store i32 %v11_14614, i32* @r1, align 4
  %v9_14618 = inttoptr i32 %v5_14610 to i8*
  store i8 %v8_14614, i8* %v9_14618, align 1
  %v10_14618 = load i32, i32* @r0, align 4
  %v11_14618 = add i32 %v10_14618, 1
  store i32 %v11_14618, i32* @r0, align 4
  br i1 %v9_14608, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_1461c = load i32, i32* @r1, align 4
  %v9_1461c = inttoptr i32 %v8_1461c to i8*
  %v10_1461c = load i8, i8* %v9_1461c, align 1
  %v11_1461c = zext i8 %v10_1461c to i32
  store i32 %v11_1461c, i32* %r3.global-to-local, align 4
  %v13_1461c = add i32 %v8_1461c, 1
  store i32 %v13_1461c, i32* @r1, align 4
  %v11_14620 = inttoptr i32 %v11_14618 to i8*
  store i8 %v10_1461c, i8* %v11_14620, align 1
  %v12_14620 = load i32, i32* @r0, align 4
  %v13_14620 = add i32 %v12_14620, 1
  store i32 %v13_14620, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_14604, %bb137
  %v0_1467c75 = phi i32 [ %v11_14618, %bb136 ], [ %v5_14610, %dec_label_pc_14604 ], [ %v13_14620, %bb137 ]
  %v0_14624 = load i32, i32* %r2.global-to-local, align 4
  %v1_14624 = load i32, i32* %ip.global-to-local, align 4
  %v2_14624 = sub i32 %v0_14624, %v1_14624
  store i32 %v2_14624, i32* %r2.global-to-local, align 4
  %v4_14624 = xor i32 %v1_14624, %v0_14624
  %v5_14624 = xor i32 %v2_14624, %v0_14624
  %v6_14624 = and i32 %v5_14624, %v4_14624
  %v7_14624 = icmp slt i32 %v6_14624, 0
  store i1 %v7_14624, i1* %cpsr_v.global-to-local, align 1
  %v8_14624 = icmp slt i32 %v2_14624, 0
  store i1 %v8_14624, i1* %cpsr_n.global-to-local, align 1
  %v9_14624 = icmp eq i32 %v0_14624, %v1_14624
  store i1 %v9_14624, i1* %cpsr_z.global-to-local, align 1
  %v5_14628 = icmp slt i32 %v0_14624, %v1_14624
  br i1 %v5_14628, label %bb131, label %dec_label_pc_1462c

dec_label_pc_1462c:                               ; preds = %.thread11
  %v0_1462c = load i32, i32* @r1, align 4
  %v1_1462c = urem i32 %v0_1462c, 4
  store i32 %v1_1462c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1462c = icmp eq i32 %v1_1462c, 0
  store i1 %v2_1462c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_1462c to i2
  br i1 %v2_1462c, label %dec_label_pc_14568, label %dec_label_pc_14634

dec_label_pc_14634:                               ; preds = %dec_label_pc_14560, %dec_label_pc_1462c
  %v0_1467c74 = phi i32 [ %v1_14540, %dec_label_pc_14560 ], [ %v0_1467c75, %dec_label_pc_1462c ]
  %v0_14728 = phi i32 [ %v2_14550, %dec_label_pc_14560 ], [ %v2_14624, %dec_label_pc_1462c ]
  %v0_1463c.off0 = phi i2 [ %extract.t, %dec_label_pc_14560 ], [ %extract.t123, %dec_label_pc_1462c ]
  %v0_14634 = phi i32 [ %v0_14540, %dec_label_pc_14560 ], [ %v0_1462c, %dec_label_pc_1462c ]
  %v1_14634 = and i32 %v0_14634, -4
  store i32 %v1_14634, i32* %r1.global-to-local, align 4
  %v1_14638 = inttoptr i32 %v1_14634 to i32*
  %v2_14638 = load i32, i32* %v1_14638, align 4
  store i32 %v2_14638, i32* @lr, align 4
  %v4_14638 = add i32 %v1_14634, 4
  store i32 %v4_14638, i32* %r1.global-to-local, align 4
  %v2_14720 = add i32 %v0_14728, -12
  %v4_14720 = sub i32 11, %v0_14728
  %v5_14720 = and i32 %v4_14720, %v0_14728
  %v6_14720 = icmp slt i32 %v5_14720, 0
  store i1 %v6_14720, i1* %cpsr_v.global-to-local, align 1
  %v7_14720 = icmp slt i32 %v2_14720, 0
  store i1 %v7_14720, i1* %cpsr_n.global-to-local, align 1
  %v8_14720 = icmp eq i32 %v0_14728, 12
  store i1 %v8_14720, i1* %cpsr_z.global-to-local, align 1
  %v5_14724 = icmp slt i32 %v0_14728, 12
  switch i2 %v0_1463c.off0, label %dec_label_pc_14648 [
    i2 -1, label %dec_label_pc_14720
    i2 -2, label %dec_label_pc_146b4
  ]

dec_label_pc_14648:                               ; preds = %dec_label_pc_14634
  br i1 %v5_14724, label %dec_label_pc_14694, label %dec_label_pc_14650

dec_label_pc_14650:                               ; preds = %dec_label_pc_14648
  store i32 %v2_14720, i32* %r2.global-to-local, align 4
  %v3_14654 = load i32, i32* @r4, align 4
  store i32 %v3_14654, i32* %stack_var_-16, align 4
  %v6_14654 = load i32, i32* @r5, align 4
  store i32 %v6_14654, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14658

dec_label_pc_14658:                               ; preds = %dec_label_pc_14658.dec_label_pc_14658_crit_edge, %dec_label_pc_14650
  %v0_1467c = phi i32 [ %v12_1467c, %dec_label_pc_14658.dec_label_pc_14658_crit_edge ], [ %v0_1467c74, %dec_label_pc_14650 ]
  %v0_1465c = phi i32 [ %v0_1465c.pre, %dec_label_pc_14658.dec_label_pc_14658_crit_edge ], [ %v4_14638, %dec_label_pc_14650 ]
  %v0_14658 = phi i32 [ %v0_14658.pre, %dec_label_pc_14658.dec_label_pc_14658_crit_edge ], [ %v2_14638, %dec_label_pc_14650 ]
  %v3_14658 = udiv i32 %v0_14658, 256
  store i32 %v3_14658, i32* %r3.global-to-local, align 4
  %v1_1465c = inttoptr i32 %v0_1465c to i32*
  %v2_1465c = load i32, i32* %v1_1465c, align 4
  store i32 %v2_1465c, i32* %r4.global-to-local, align 4
  %v3_1465c = add i32 %v0_1465c, 4
  %v4_1465c = inttoptr i32 %v3_1465c to i32*
  %v5_1465c = load i32, i32* %v4_1465c, align 4
  store i32 %v5_1465c, i32* %r5.global-to-local, align 4
  %v6_1465c = add i32 %v0_1465c, 8
  %v7_1465c = inttoptr i32 %v6_1465c to i32*
  %v8_1465c = load i32, i32* %v7_1465c, align 4
  store i32 %v8_1465c, i32* %ip.global-to-local, align 4
  %v9_1465c = add i32 %v0_1465c, 12
  %v10_1465c = inttoptr i32 %v9_1465c to i32*
  %v11_1465c = load i32, i32* %v10_1465c, align 4
  store i32 %v11_1465c, i32* @lr, align 4
  %v12_1465c = add i32 %v0_1465c, 16
  store i32 %v12_1465c, i32* %r1.global-to-local, align 4
  %v4_14660 = mul i32 %v2_1465c, 16777216
  %v5_14660 = or i32 %v4_14660, %v3_14658
  store i32 %v5_14660, i32* %r3.global-to-local, align 4
  %v3_14664 = udiv i32 %v2_1465c, 256
  %v4_14668 = mul i32 %v5_1465c, 16777216
  %v5_14668 = or i32 %v4_14668, %v3_14664
  store i32 %v5_14668, i32* %r4.global-to-local, align 4
  %v3_1466c = udiv i32 %v5_1465c, 256
  %v4_14670 = mul i32 %v8_1465c, 16777216
  %v5_14670 = or i32 %v4_14670, %v3_1466c
  store i32 %v5_14670, i32* %r5.global-to-local, align 4
  %v3_14674 = udiv i32 %v8_1465c, 256
  %v4_14678 = mul i32 %v11_1465c, 16777216
  %v5_14678 = or i32 %v4_14678, %v3_14674
  store i32 %v5_14678, i32* %ip.global-to-local, align 4
  %v1_1467c = inttoptr i32 %v0_1467c to i32*
  store i32 %v5_14660, i32* %v1_1467c, align 4
  %v3_1467c = add i32 %v0_1467c, 4
  %v4_1467c = inttoptr i32 %v3_1467c to i32*
  %v5_1467c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1467c, i32* %v4_1467c, align 4
  %v6_1467c = add i32 %v0_1467c, 8
  %v7_1467c = inttoptr i32 %v6_1467c to i32*
  %v8_1467c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1467c, i32* %v7_1467c, align 4
  %v9_1467c = add i32 %v0_1467c, 12
  %v10_1467c = inttoptr i32 %v9_1467c to i32*
  %v11_1467c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1467c, i32* %v10_1467c, align 4
  %v12_1467c = add i32 %v0_1467c, 16
  store i32 %v12_1467c, i32* @r0, align 4
  %v0_14680 = load i32, i32* %r2.global-to-local, align 4
  %v2_14680 = add i32 %v0_14680, -16
  store i32 %v2_14680, i32* %r2.global-to-local, align 4
  %v6_14684 = icmp slt i32 %v0_14680, 16
  br i1 %v6_14684, label %dec_label_pc_14688, label %dec_label_pc_14658.dec_label_pc_14658_crit_edge

dec_label_pc_14658.dec_label_pc_14658_crit_edge:  ; preds = %dec_label_pc_14658
  %v0_14658.pre = load i32, i32* @lr, align 4
  %v0_1465c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14658

dec_label_pc_14688:                               ; preds = %dec_label_pc_14658
  %v2_14688 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14688, i32* @r4, align 4
  %v5_14688 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14688, i32* @r5, align 4
  %v2_1468c = add i32 %v0_14680, -4
  store i32 %v2_1468c, i32* %r2.global-to-local, align 4
  %v4_1468c = add i32 %v0_14680, 2147483632
  %v5_1468c = and i32 %v2_1468c, %v4_1468c
  %v6_1468c = icmp slt i32 %v5_1468c, 0
  store i1 %v6_1468c, i1* %cpsr_v.global-to-local, align 1
  %v7_1468c = icmp slt i32 %v2_1468c, 0
  store i1 %v7_1468c, i1* %cpsr_n.global-to-local, align 1
  %v8_1468c = icmp eq i32 %v2_1468c, 0
  store i1 %v8_1468c, i1* %cpsr_z.global-to-local, align 1
  %v5_14690 = icmp slt i32 %v2_14680, -12
  br i1 %v5_14690, label %dec_label_pc_146ac, label %dec_label_pc_14694

dec_label_pc_14694:                               ; preds = %dec_label_pc_14688, %dec_label_pc_14648, %dec_label_pc_14694
  %v1_146a0 = phi i32 [ %v4_146a0, %dec_label_pc_14694 ], [ %v12_1467c, %dec_label_pc_14688 ], [ %v0_1467c74, %dec_label_pc_14648 ]
  %v0_14694 = load i32, i32* @lr, align 4
  %v3_14694 = udiv i32 %v0_14694, 256
  store i32 %v3_14694, i32* %ip.global-to-local, align 4
  %v0_14698 = load i32, i32* %r1.global-to-local, align 4
  %v1_14698 = inttoptr i32 %v0_14698 to i32*
  %v2_14698 = load i32, i32* %v1_14698, align 4
  store i32 %v2_14698, i32* @lr, align 4
  %v4_14698 = add i32 %v0_14698, 4
  store i32 %v4_14698, i32* %r1.global-to-local, align 4
  %v4_1469c = mul i32 %v2_14698, 16777216
  %v5_1469c = or i32 %v4_1469c, %v3_14694
  store i32 %v5_1469c, i32* %ip.global-to-local, align 4
  %v2_146a0 = inttoptr i32 %v1_146a0 to i32*
  store i32 %v5_1469c, i32* %v2_146a0, align 4
  %v3_146a0 = load i32, i32* @r0, align 4
  %v4_146a0 = add i32 %v3_146a0, 4
  store i32 %v4_146a0, i32* @r0, align 4
  %v0_146a4 = load i32, i32* %r2.global-to-local, align 4
  %v2_146a4 = add i32 %v0_146a4, -4
  store i32 %v2_146a4, i32* %r2.global-to-local, align 4
  %v6_146a8 = icmp slt i32 %v0_146a4, 4
  br i1 %v6_146a8, label %dec_label_pc_146ac.loopexit, label %dec_label_pc_14694

dec_label_pc_146ac.loopexit:                      ; preds = %dec_label_pc_14694
  %v4_146a4 = sub i32 3, %v0_146a4
  %v5_146a4 = and i32 %v4_146a4, %v0_146a4
  %v6_146a4 = icmp slt i32 %v5_146a4, 0
  %v7_146a4 = icmp slt i32 %v2_146a4, 0
  store i1 %v6_146a4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_146a4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_146ac

dec_label_pc_146ac:                               ; preds = %dec_label_pc_146ac.loopexit, %dec_label_pc_14688
  %v2_145ec111 = phi i32 [ %v4_146a0, %dec_label_pc_146ac.loopexit ], [ %v12_1467c, %dec_label_pc_14688 ]
  %v0_145dc107 = phi i32 [ %v2_146a4, %dec_label_pc_146ac.loopexit ], [ %v2_1468c, %dec_label_pc_14688 ]
  %v0_146ac = load i32, i32* %r1.global-to-local, align 4
  %v1_146ac = add i32 %v0_146ac, -3
  store i32 %v1_146ac, i32* @r1, align 4
  br label %bb131

dec_label_pc_146b4:                               ; preds = %dec_label_pc_14634
  br i1 %v5_14724, label %dec_label_pc_14700, label %dec_label_pc_146bc

dec_label_pc_146bc:                               ; preds = %dec_label_pc_146b4
  store i32 %v2_14720, i32* %r2.global-to-local, align 4
  %v3_146c0 = load i32, i32* @r4, align 4
  store i32 %v3_146c0, i32* %stack_var_-16, align 4
  %v6_146c0 = load i32, i32* @r5, align 4
  store i32 %v6_146c0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_146c4

dec_label_pc_146c4:                               ; preds = %dec_label_pc_146c4.dec_label_pc_146c4_crit_edge, %dec_label_pc_146bc
  %v0_146e8 = phi i32 [ %v12_146e8, %dec_label_pc_146c4.dec_label_pc_146c4_crit_edge ], [ %v0_1467c74, %dec_label_pc_146bc ]
  %v0_146c8 = phi i32 [ %v0_146c8.pre, %dec_label_pc_146c4.dec_label_pc_146c4_crit_edge ], [ %v4_14638, %dec_label_pc_146bc ]
  %v0_146c4 = phi i32 [ %v0_146c4.pre, %dec_label_pc_146c4.dec_label_pc_146c4_crit_edge ], [ %v2_14638, %dec_label_pc_146bc ]
  %v3_146c4 = udiv i32 %v0_146c4, 65536
  store i32 %v3_146c4, i32* %r3.global-to-local, align 4
  %v1_146c8 = inttoptr i32 %v0_146c8 to i32*
  %v2_146c8 = load i32, i32* %v1_146c8, align 4
  store i32 %v2_146c8, i32* %r4.global-to-local, align 4
  %v3_146c8 = add i32 %v0_146c8, 4
  %v4_146c8 = inttoptr i32 %v3_146c8 to i32*
  %v5_146c8 = load i32, i32* %v4_146c8, align 4
  store i32 %v5_146c8, i32* %r5.global-to-local, align 4
  %v6_146c8 = add i32 %v0_146c8, 8
  %v7_146c8 = inttoptr i32 %v6_146c8 to i32*
  %v8_146c8 = load i32, i32* %v7_146c8, align 4
  store i32 %v8_146c8, i32* %ip.global-to-local, align 4
  %v9_146c8 = add i32 %v0_146c8, 12
  %v10_146c8 = inttoptr i32 %v9_146c8 to i32*
  %v11_146c8 = load i32, i32* %v10_146c8, align 4
  store i32 %v11_146c8, i32* @lr, align 4
  %v12_146c8 = add i32 %v0_146c8, 16
  store i32 %v12_146c8, i32* %r1.global-to-local, align 4
  %v4_146cc = mul i32 %v2_146c8, 65536
  %v5_146cc = or i32 %v4_146cc, %v3_146c4
  store i32 %v5_146cc, i32* %r3.global-to-local, align 4
  %v3_146d0 = udiv i32 %v2_146c8, 65536
  %v4_146d4 = mul i32 %v5_146c8, 65536
  %v5_146d4 = or i32 %v4_146d4, %v3_146d0
  store i32 %v5_146d4, i32* %r4.global-to-local, align 4
  %v3_146d8 = udiv i32 %v5_146c8, 65536
  %v4_146dc = mul i32 %v8_146c8, 65536
  %v5_146dc = or i32 %v4_146dc, %v3_146d8
  store i32 %v5_146dc, i32* %r5.global-to-local, align 4
  %v3_146e0 = udiv i32 %v8_146c8, 65536
  %v4_146e4 = mul i32 %v11_146c8, 65536
  %v5_146e4 = or i32 %v4_146e4, %v3_146e0
  store i32 %v5_146e4, i32* %ip.global-to-local, align 4
  %v1_146e8 = inttoptr i32 %v0_146e8 to i32*
  store i32 %v5_146cc, i32* %v1_146e8, align 4
  %v3_146e8 = add i32 %v0_146e8, 4
  %v4_146e8 = inttoptr i32 %v3_146e8 to i32*
  %v5_146e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_146e8, i32* %v4_146e8, align 4
  %v6_146e8 = add i32 %v0_146e8, 8
  %v7_146e8 = inttoptr i32 %v6_146e8 to i32*
  %v8_146e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_146e8, i32* %v7_146e8, align 4
  %v9_146e8 = add i32 %v0_146e8, 12
  %v10_146e8 = inttoptr i32 %v9_146e8 to i32*
  %v11_146e8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_146e8, i32* %v10_146e8, align 4
  %v12_146e8 = add i32 %v0_146e8, 16
  store i32 %v12_146e8, i32* @r0, align 4
  %v0_146ec = load i32, i32* %r2.global-to-local, align 4
  %v2_146ec = add i32 %v0_146ec, -16
  store i32 %v2_146ec, i32* %r2.global-to-local, align 4
  %v6_146f0 = icmp slt i32 %v0_146ec, 16
  br i1 %v6_146f0, label %dec_label_pc_146f4, label %dec_label_pc_146c4.dec_label_pc_146c4_crit_edge

dec_label_pc_146c4.dec_label_pc_146c4_crit_edge:  ; preds = %dec_label_pc_146c4
  %v0_146c4.pre = load i32, i32* @lr, align 4
  %v0_146c8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_146c4

dec_label_pc_146f4:                               ; preds = %dec_label_pc_146c4
  %v2_146f4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_146f4, i32* @r4, align 4
  %v5_146f4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_146f4, i32* @r5, align 4
  %v2_146f8 = add i32 %v0_146ec, -4
  store i32 %v2_146f8, i32* %r2.global-to-local, align 4
  %v4_146f8 = add i32 %v0_146ec, 2147483632
  %v5_146f8 = and i32 %v2_146f8, %v4_146f8
  %v6_146f8 = icmp slt i32 %v5_146f8, 0
  store i1 %v6_146f8, i1* %cpsr_v.global-to-local, align 1
  %v7_146f8 = icmp slt i32 %v2_146f8, 0
  store i1 %v7_146f8, i1* %cpsr_n.global-to-local, align 1
  %v8_146f8 = icmp eq i32 %v2_146f8, 0
  store i1 %v8_146f8, i1* %cpsr_z.global-to-local, align 1
  %v5_146fc = icmp slt i32 %v2_146ec, -12
  br i1 %v5_146fc, label %dec_label_pc_14718, label %dec_label_pc_14700

dec_label_pc_14700:                               ; preds = %dec_label_pc_146f4, %dec_label_pc_146b4, %dec_label_pc_14700
  %v1_1470c = phi i32 [ %v4_1470c, %dec_label_pc_14700 ], [ %v12_146e8, %dec_label_pc_146f4 ], [ %v0_1467c74, %dec_label_pc_146b4 ]
  %v0_14700 = load i32, i32* @lr, align 4
  %v3_14700 = udiv i32 %v0_14700, 65536
  store i32 %v3_14700, i32* %ip.global-to-local, align 4
  %v0_14704 = load i32, i32* %r1.global-to-local, align 4
  %v1_14704 = inttoptr i32 %v0_14704 to i32*
  %v2_14704 = load i32, i32* %v1_14704, align 4
  store i32 %v2_14704, i32* @lr, align 4
  %v4_14704 = add i32 %v0_14704, 4
  store i32 %v4_14704, i32* %r1.global-to-local, align 4
  %v4_14708 = mul i32 %v2_14704, 65536
  %v5_14708 = or i32 %v4_14708, %v3_14700
  store i32 %v5_14708, i32* %ip.global-to-local, align 4
  %v2_1470c = inttoptr i32 %v1_1470c to i32*
  store i32 %v5_14708, i32* %v2_1470c, align 4
  %v3_1470c = load i32, i32* @r0, align 4
  %v4_1470c = add i32 %v3_1470c, 4
  store i32 %v4_1470c, i32* @r0, align 4
  %v0_14710 = load i32, i32* %r2.global-to-local, align 4
  %v2_14710 = add i32 %v0_14710, -4
  store i32 %v2_14710, i32* %r2.global-to-local, align 4
  %v6_14714 = icmp slt i32 %v0_14710, 4
  br i1 %v6_14714, label %dec_label_pc_14718.loopexit, label %dec_label_pc_14700

dec_label_pc_14718.loopexit:                      ; preds = %dec_label_pc_14700
  %v4_14710 = sub i32 3, %v0_14710
  %v5_14710 = and i32 %v4_14710, %v0_14710
  %v6_14710 = icmp slt i32 %v5_14710, 0
  %v7_14710 = icmp slt i32 %v2_14710, 0
  store i1 %v6_14710, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14710, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14718

dec_label_pc_14718:                               ; preds = %dec_label_pc_14718.loopexit, %dec_label_pc_146f4
  %v2_145ec112 = phi i32 [ %v4_1470c, %dec_label_pc_14718.loopexit ], [ %v12_146e8, %dec_label_pc_146f4 ]
  %v0_145dc108 = phi i32 [ %v2_14710, %dec_label_pc_14718.loopexit ], [ %v2_146f8, %dec_label_pc_146f4 ]
  %v0_14718 = load i32, i32* %r1.global-to-local, align 4
  %v1_14718 = add i32 %v0_14718, -2
  store i32 %v1_14718, i32* @r1, align 4
  br label %bb131

dec_label_pc_14720:                               ; preds = %dec_label_pc_14634
  br i1 %v5_14724, label %dec_label_pc_1476c, label %dec_label_pc_14728

dec_label_pc_14728:                               ; preds = %dec_label_pc_14720
  store i32 %v2_14720, i32* %r2.global-to-local, align 4
  %v3_1472c = load i32, i32* @r4, align 4
  store i32 %v3_1472c, i32* %stack_var_-16, align 4
  %v6_1472c = load i32, i32* @r5, align 4
  store i32 %v6_1472c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14730

dec_label_pc_14730:                               ; preds = %dec_label_pc_14730.dec_label_pc_14730_crit_edge, %dec_label_pc_14728
  %v0_14754 = phi i32 [ %v12_14754, %dec_label_pc_14730.dec_label_pc_14730_crit_edge ], [ %v0_1467c74, %dec_label_pc_14728 ]
  %v0_14734 = phi i32 [ %v0_14734.pre, %dec_label_pc_14730.dec_label_pc_14730_crit_edge ], [ %v4_14638, %dec_label_pc_14728 ]
  %v0_14730 = phi i32 [ %v0_14730.pre, %dec_label_pc_14730.dec_label_pc_14730_crit_edge ], [ %v2_14638, %dec_label_pc_14728 ]
  %v3_14730 = udiv i32 %v0_14730, 16777216
  store i32 %v3_14730, i32* %r3.global-to-local, align 4
  %v1_14734 = inttoptr i32 %v0_14734 to i32*
  %v2_14734 = load i32, i32* %v1_14734, align 4
  store i32 %v2_14734, i32* %r4.global-to-local, align 4
  %v3_14734 = add i32 %v0_14734, 4
  %v4_14734 = inttoptr i32 %v3_14734 to i32*
  %v5_14734 = load i32, i32* %v4_14734, align 4
  store i32 %v5_14734, i32* %r5.global-to-local, align 4
  %v6_14734 = add i32 %v0_14734, 8
  %v7_14734 = inttoptr i32 %v6_14734 to i32*
  %v8_14734 = load i32, i32* %v7_14734, align 4
  store i32 %v8_14734, i32* %ip.global-to-local, align 4
  %v9_14734 = add i32 %v0_14734, 12
  %v10_14734 = inttoptr i32 %v9_14734 to i32*
  %v11_14734 = load i32, i32* %v10_14734, align 4
  store i32 %v11_14734, i32* @lr, align 4
  %v12_14734 = add i32 %v0_14734, 16
  store i32 %v12_14734, i32* %r1.global-to-local, align 4
  %v4_14738 = mul i32 %v2_14734, 256
  %v5_14738 = or i32 %v4_14738, %v3_14730
  store i32 %v5_14738, i32* %r3.global-to-local, align 4
  %v3_1473c = udiv i32 %v2_14734, 16777216
  %v4_14740 = mul i32 %v5_14734, 256
  %v5_14740 = or i32 %v4_14740, %v3_1473c
  store i32 %v5_14740, i32* %r4.global-to-local, align 4
  %v3_14744 = udiv i32 %v5_14734, 16777216
  %v4_14748 = mul i32 %v8_14734, 256
  %v5_14748 = or i32 %v4_14748, %v3_14744
  store i32 %v5_14748, i32* %r5.global-to-local, align 4
  %v3_1474c = udiv i32 %v8_14734, 16777216
  %v4_14750 = mul i32 %v11_14734, 256
  %v5_14750 = or i32 %v4_14750, %v3_1474c
  store i32 %v5_14750, i32* %ip.global-to-local, align 4
  %v1_14754 = inttoptr i32 %v0_14754 to i32*
  store i32 %v5_14738, i32* %v1_14754, align 4
  %v3_14754 = add i32 %v0_14754, 4
  %v4_14754 = inttoptr i32 %v3_14754 to i32*
  %v5_14754 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14754, i32* %v4_14754, align 4
  %v6_14754 = add i32 %v0_14754, 8
  %v7_14754 = inttoptr i32 %v6_14754 to i32*
  %v8_14754 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14754, i32* %v7_14754, align 4
  %v9_14754 = add i32 %v0_14754, 12
  %v10_14754 = inttoptr i32 %v9_14754 to i32*
  %v11_14754 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14754, i32* %v10_14754, align 4
  %v12_14754 = add i32 %v0_14754, 16
  store i32 %v12_14754, i32* @r0, align 4
  %v0_14758 = load i32, i32* %r2.global-to-local, align 4
  %v2_14758 = add i32 %v0_14758, -16
  store i32 %v2_14758, i32* %r2.global-to-local, align 4
  %v6_1475c = icmp slt i32 %v0_14758, 16
  br i1 %v6_1475c, label %dec_label_pc_14760, label %dec_label_pc_14730.dec_label_pc_14730_crit_edge

dec_label_pc_14730.dec_label_pc_14730_crit_edge:  ; preds = %dec_label_pc_14730
  %v0_14730.pre = load i32, i32* @lr, align 4
  %v0_14734.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14730

dec_label_pc_14760:                               ; preds = %dec_label_pc_14730
  %v2_14760 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14760, i32* @r4, align 4
  %v5_14760 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14760, i32* @r5, align 4
  %v2_14764 = add i32 %v0_14758, -4
  store i32 %v2_14764, i32* %r2.global-to-local, align 4
  %v4_14764 = add i32 %v0_14758, 2147483632
  %v5_14764 = and i32 %v2_14764, %v4_14764
  %v6_14764 = icmp slt i32 %v5_14764, 0
  store i1 %v6_14764, i1* %cpsr_v.global-to-local, align 1
  %v7_14764 = icmp slt i32 %v2_14764, 0
  store i1 %v7_14764, i1* %cpsr_n.global-to-local, align 1
  %v8_14764 = icmp eq i32 %v2_14764, 0
  store i1 %v8_14764, i1* %cpsr_z.global-to-local, align 1
  %v5_14768 = icmp slt i32 %v2_14758, -12
  br i1 %v5_14768, label %dec_label_pc_14784, label %dec_label_pc_1476c

dec_label_pc_1476c:                               ; preds = %dec_label_pc_14760, %dec_label_pc_14720, %dec_label_pc_1476c
  %v1_14778 = phi i32 [ %v4_14778, %dec_label_pc_1476c ], [ %v12_14754, %dec_label_pc_14760 ], [ %v0_1467c74, %dec_label_pc_14720 ]
  %v0_1476c = load i32, i32* @lr, align 4
  %v3_1476c = udiv i32 %v0_1476c, 16777216
  store i32 %v3_1476c, i32* %ip.global-to-local, align 4
  %v0_14770 = load i32, i32* %r1.global-to-local, align 4
  %v1_14770 = inttoptr i32 %v0_14770 to i32*
  %v2_14770 = load i32, i32* %v1_14770, align 4
  store i32 %v2_14770, i32* @lr, align 4
  %v4_14770 = add i32 %v0_14770, 4
  store i32 %v4_14770, i32* %r1.global-to-local, align 4
  %v4_14774 = mul i32 %v2_14770, 256
  %v5_14774 = or i32 %v4_14774, %v3_1476c
  store i32 %v5_14774, i32* %ip.global-to-local, align 4
  %v2_14778 = inttoptr i32 %v1_14778 to i32*
  store i32 %v5_14774, i32* %v2_14778, align 4
  %v3_14778 = load i32, i32* @r0, align 4
  %v4_14778 = add i32 %v3_14778, 4
  store i32 %v4_14778, i32* @r0, align 4
  %v0_1477c = load i32, i32* %r2.global-to-local, align 4
  %v2_1477c = add i32 %v0_1477c, -4
  store i32 %v2_1477c, i32* %r2.global-to-local, align 4
  %v6_14780 = icmp slt i32 %v0_1477c, 4
  br i1 %v6_14780, label %dec_label_pc_14784.loopexit, label %dec_label_pc_1476c

dec_label_pc_14784.loopexit:                      ; preds = %dec_label_pc_1476c
  %v4_1477c = sub i32 3, %v0_1477c
  %v5_1477c = and i32 %v4_1477c, %v0_1477c
  %v6_1477c = icmp slt i32 %v5_1477c, 0
  %v7_1477c = icmp slt i32 %v2_1477c, 0
  store i1 %v6_1477c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1477c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14784

dec_label_pc_14784:                               ; preds = %dec_label_pc_14784.loopexit, %dec_label_pc_14760
  %v2_145ec113 = phi i32 [ %v4_14778, %dec_label_pc_14784.loopexit ], [ %v12_14754, %dec_label_pc_14760 ]
  %v0_145dc109 = phi i32 [ %v2_1477c, %dec_label_pc_14784.loopexit ], [ %v2_14764, %dec_label_pc_14760 ]
  %v0_14784 = load i32, i32* %r1.global-to-local, align 4
  %v1_14784 = add i32 %v0_14784, -1
  store i32 %v1_14784, i32* @r1, align 4
  br label %bb131

dec_label_pc_1478c:                               ; preds = %dec_label_pc_14540
  %v1_1478c = load i32, i32* @r2, align 4
  %v2_1478c = add i32 %v1_1478c, %v0_14540
  store i32 %v2_1478c, i32* %r1.global-to-local, align 4
  %v2_14790 = add i32 %v1_1478c, %v1_14540
  store i32 %v2_14790, i32* %r0.global-to-local, align 4
  %v2_14794 = add i32 %v1_1478c, -4
  store i32 %v2_14794, i32* %r2.global-to-local, align 4
  %v4_14794 = sub i32 3, %v1_1478c
  %v5_14794 = and i32 %v4_14794, %v1_1478c
  %v6_14794 = icmp slt i32 %v5_14794, 0
  store i1 %v6_14794, i1* %cpsr_v.global-to-local, align 1
  %v7_14794 = icmp slt i32 %v2_14794, 0
  store i1 %v7_14794, i1* %cpsr_n.global-to-local, align 1
  %v8_14794 = icmp eq i32 %v1_1478c, 4
  store i1 %v8_14794, i1* %cpsr_z.global-to-local, align 1
  %v5_14798 = icmp slt i32 %v1_1478c, 4
  br i1 %v5_14798, label %bb141, label %dec_label_pc_1479c

dec_label_pc_1479c:                               ; preds = %dec_label_pc_1478c
  %v1_1479c = urem i32 %v2_14790, 4
  store i32 %v1_1479c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1479c = icmp eq i32 %v1_1479c, 0
  store i1 %v2_1479c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1479c, label %dec_label_pc_147a4, label %dec_label_pc_14844

dec_label_pc_147a4:                               ; preds = %dec_label_pc_1479c
  %v1_147a4 = urem i32 %v2_1478c, 4
  store i32 %v1_147a4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_147a4 = icmp eq i32 %v1_147a4, 0
  store i1 %v2_147a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_147a4, label %dec_label_pc_147ac, label %dec_label_pc_14870

dec_label_pc_147ac:                               ; preds = %dec_label_pc_147a4, %dec_label_pc_14868
  %v0_147c448 = phi i32 [ %v2_14790, %dec_label_pc_147a4 ], [ %v0_148b831, %dec_label_pc_14868 ]
  %v0_147c047 = phi i32 [ %v2_1478c, %dec_label_pc_147a4 ], [ %v0_14868, %dec_label_pc_14868 ]
  %v0_147ac = phi i32 [ %v2_14794, %dec_label_pc_147a4 ], [ %v2_14860, %dec_label_pc_14868 ]
  %v2_147ac = add i32 %v0_147ac, -8
  store i32 %v2_147ac, i32* %r2.global-to-local, align 4
  %v4_147ac = sub i32 7, %v0_147ac
  %v5_147ac = and i32 %v4_147ac, %v0_147ac
  %v6_147ac = icmp slt i32 %v5_147ac, 0
  store i1 %v6_147ac, i1* %cpsr_v.global-to-local, align 1
  %v7_147ac = icmp slt i32 %v2_147ac, 0
  store i1 %v7_147ac, i1* %cpsr_n.global-to-local, align 1
  %v8_147ac = icmp eq i32 %v0_147ac, 8
  store i1 %v8_147ac, i1* %cpsr_z.global-to-local, align 1
  %v5_147b0 = icmp slt i32 %v0_147ac, 8
  br i1 %v5_147b0, label %dec_label_pc_147fc, label %dec_label_pc_147b4

dec_label_pc_147b4:                               ; preds = %dec_label_pc_147ac
  %v3_147b4 = load i32, i32* @r4, align 4
  store i32 %v3_147b4, i32* %stack_var_-8, align 4
  %v6_147b4 = load i32, i32* @lr, align 4
  %v2_147b8 = add i32 %v0_147ac, -28
  store i32 %v2_147b8, i32* %r2.global-to-local, align 4
  %v4_147b8 = sub i32 27, %v0_147ac
  %v5_147b8 = and i32 %v4_147b8, %v2_147ac
  %v6_147b8 = icmp slt i32 %v5_147b8, 0
  store i1 %v6_147b8, i1* %cpsr_v.global-to-local, align 1
  %v7_147b8 = icmp slt i32 %v2_147b8, 0
  store i1 %v7_147b8, i1* %cpsr_n.global-to-local, align 1
  %v8_147b8 = icmp eq i32 %v2_147ac, 20
  store i1 %v8_147b8, i1* %cpsr_z.global-to-local, align 1
  %v5_147bc = icmp slt i32 %v2_147ac, 20
  br i1 %v5_147bc, label %dec_label_pc_147d8, label %dec_label_pc_147c0

dec_label_pc_147c0:                               ; preds = %dec_label_pc_147b4, %dec_label_pc_147c0.dec_label_pc_147c0_crit_edge
  %v0_147c4 = phi i32 [ %v1_147cc, %dec_label_pc_147c0.dec_label_pc_147c0_crit_edge ], [ %v0_147c448, %dec_label_pc_147b4 ]
  %v0_147c0 = phi i32 [ %v0_147c0.pre, %dec_label_pc_147c0.dec_label_pc_147c0_crit_edge ], [ %v0_147c047, %dec_label_pc_147b4 ]
  %v1_147c0 = add i32 %v0_147c0, -4
  %v2_147c0 = inttoptr i32 %v1_147c0 to i32*
  %v3_147c0 = load i32, i32* %v2_147c0, align 4
  store i32 %v3_147c0, i32* %r3.global-to-local, align 4
  %v4_147c0 = add i32 %v0_147c0, -8
  %v5_147c0 = inttoptr i32 %v4_147c0 to i32*
  %v6_147c0 = load i32, i32* %v5_147c0, align 4
  store i32 %v6_147c0, i32* %r4.global-to-local, align 4
  %v7_147c0 = add i32 %v0_147c0, -12
  %v8_147c0 = inttoptr i32 %v7_147c0 to i32*
  %v9_147c0 = load i32, i32* %v8_147c0, align 4
  store i32 %v9_147c0, i32* %ip.global-to-local, align 4
  %v10_147c0 = add i32 %v0_147c0, -16
  %v11_147c0 = inttoptr i32 %v10_147c0 to i32*
  %v12_147c0 = load i32, i32* %v11_147c0, align 4
  store i32 %v12_147c0, i32* %lr.global-to-local, align 4
  store i32 %v10_147c0, i32* %r1.global-to-local, align 4
  %v1_147c4 = add i32 %v0_147c4, -16
  %v2_147c4 = inttoptr i32 %v1_147c4 to i32*
  store i32 %v3_147c0, i32* %v2_147c4, align 4
  %v4_147c4 = add i32 %v0_147c4, -12
  %v5_147c4 = inttoptr i32 %v4_147c4 to i32*
  %v6_147c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_147c4, i32* %v5_147c4, align 4
  %v7_147c4 = add i32 %v0_147c4, -8
  %v8_147c4 = inttoptr i32 %v7_147c4 to i32*
  %v9_147c4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_147c4, i32* %v8_147c4, align 4
  %v10_147c4 = add i32 %v0_147c4, -4
  %v11_147c4 = inttoptr i32 %v10_147c4 to i32*
  %v12_147c4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_147c4, i32* %v11_147c4, align 4
  store i32 %v1_147c4, i32* %r0.global-to-local, align 4
  %v0_147c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_147c8 = add i32 %v0_147c8, -4
  %v2_147c8 = inttoptr i32 %v1_147c8 to i32*
  %v3_147c8 = load i32, i32* %v2_147c8, align 4
  store i32 %v3_147c8, i32* %r3.global-to-local, align 4
  %v4_147c8 = add i32 %v0_147c8, -8
  %v5_147c8 = inttoptr i32 %v4_147c8 to i32*
  %v6_147c8 = load i32, i32* %v5_147c8, align 4
  store i32 %v6_147c8, i32* %r4.global-to-local, align 4
  %v7_147c8 = add i32 %v0_147c8, -12
  %v8_147c8 = inttoptr i32 %v7_147c8 to i32*
  %v9_147c8 = load i32, i32* %v8_147c8, align 4
  store i32 %v9_147c8, i32* %ip.global-to-local, align 4
  %v10_147c8 = add i32 %v0_147c8, -16
  %v11_147c8 = inttoptr i32 %v10_147c8 to i32*
  %v12_147c8 = load i32, i32* %v11_147c8, align 4
  store i32 %v12_147c8, i32* %lr.global-to-local, align 4
  store i32 %v10_147c8, i32* %r1.global-to-local, align 4
  %v1_147cc = add i32 %v0_147c4, -32
  %v2_147cc = inttoptr i32 %v1_147cc to i32*
  store i32 %v3_147c8, i32* %v2_147cc, align 4
  %v4_147cc = add i32 %v0_147c4, -28
  %v5_147cc = inttoptr i32 %v4_147cc to i32*
  %v6_147cc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_147cc, i32* %v5_147cc, align 4
  %v7_147cc = add i32 %v0_147c4, -24
  %v8_147cc = inttoptr i32 %v7_147cc to i32*
  %v9_147cc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_147cc, i32* %v8_147cc, align 4
  %v10_147cc = add i32 %v0_147c4, -20
  %v11_147cc = inttoptr i32 %v10_147cc to i32*
  %v12_147cc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_147cc, i32* %v11_147cc, align 4
  store i32 %v1_147cc, i32* %r0.global-to-local, align 4
  %v0_147d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_147d0 = add i32 %v0_147d0, -32
  store i32 %v2_147d0, i32* %r2.global-to-local, align 4
  %v6_147d4 = icmp slt i32 %v0_147d0, 32
  br i1 %v6_147d4, label %dec_label_pc_147d8.loopexit, label %dec_label_pc_147c0.dec_label_pc_147c0_crit_edge

dec_label_pc_147c0.dec_label_pc_147c0_crit_edge:  ; preds = %dec_label_pc_147c0
  %v0_147c0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_147c0

dec_label_pc_147d8.loopexit:                      ; preds = %dec_label_pc_147c0
  %v4_147d0 = sub i32 31, %v0_147d0
  %v5_147d0 = and i32 %v4_147d0, %v0_147d0
  %v6_147d0 = icmp slt i32 %v5_147d0, 0
  %v7_147d0 = icmp slt i32 %v2_147d0, 0
  store i1 %v6_147d0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_147d0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_147d8

dec_label_pc_147d8:                               ; preds = %dec_label_pc_147d8.loopexit, %dec_label_pc_147b4
  %v6_147e0 = phi i32 [ %v1_147cc, %dec_label_pc_147d8.loopexit ], [ %v0_147c448, %dec_label_pc_147b4 ]
  %v0_147e8.pr = phi i32 [ %v2_147d0, %dec_label_pc_147d8.loopexit ], [ %v2_147b8, %dec_label_pc_147b4 ]
  %v4_147d8 = add i32 %v0_147e8.pr, 16
  %v6_147d8 = sub i32 0, %v0_147e8.pr
  %v7_147d8 = and i32 %v4_147d8, %v6_147d8
  %v8_147d8 = icmp slt i32 %v7_147d8, 0
  store i1 %v8_147d8, i1* %cpsr_v.global-to-local, align 1
  %v9_147d8 = icmp slt i32 %v4_147d8, 0
  store i1 %v9_147d8, i1* %cpsr_n.global-to-local, align 1
  %v10_147d8 = icmp eq i32 %v4_147d8, 0
  store i1 %v10_147d8, i1* %cpsr_z.global-to-local, align 1
  %v5_147dc = icmp slt i32 %v0_147e8.pr, -16
  br i1 %v5_147dc, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_147d8
  %v6_147dc = load i32, i32* %r1.global-to-local, align 4
  %v7_147dc = add i32 %v6_147dc, -4
  %v8_147dc = inttoptr i32 %v7_147dc to i32*
  %v9_147dc = load i32, i32* %v8_147dc, align 4
  store i32 %v9_147dc, i32* %r3.global-to-local, align 4
  %v10_147dc = add i32 %v6_147dc, -8
  %v11_147dc = inttoptr i32 %v10_147dc to i32*
  %v12_147dc = load i32, i32* %v11_147dc, align 4
  store i32 %v12_147dc, i32* %r4.global-to-local, align 4
  %v13_147dc = add i32 %v6_147dc, -12
  %v14_147dc = inttoptr i32 %v13_147dc to i32*
  %v15_147dc = load i32, i32* %v14_147dc, align 4
  store i32 %v15_147dc, i32* %ip.global-to-local, align 4
  %v16_147dc = add i32 %v6_147dc, -16
  %v17_147dc = inttoptr i32 %v16_147dc to i32*
  %v18_147dc = load i32, i32* %v17_147dc, align 4
  store i32 %v18_147dc, i32* %lr.global-to-local, align 4
  store i32 %v16_147dc, i32* %r1.global-to-local, align 4
  %v7_147e0 = add i32 %v6_147e0, -16
  %v8_147e0 = inttoptr i32 %v7_147e0 to i32*
  store i32 %v9_147dc, i32* %v8_147e0, align 4
  %v10_147e0 = add i32 %v6_147e0, -12
  %v11_147e0 = inttoptr i32 %v10_147e0 to i32*
  %v12_147e0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_147e0, i32* %v11_147e0, align 4
  %v13_147e0 = add i32 %v6_147e0, -8
  %v14_147e0 = inttoptr i32 %v13_147e0 to i32*
  %v15_147e0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_147e0, i32* %v14_147e0, align 4
  %v16_147e0 = add i32 %v6_147e0, -4
  %v17_147e0 = inttoptr i32 %v16_147e0 to i32*
  %v18_147e0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_147e0, i32* %v17_147e0, align 4
  store i32 %v7_147e0, i32* %r0.global-to-local, align 4
  %v6_147e4 = load i32, i32* %r2.global-to-local, align 4
  %v7_147e4 = add i32 %v6_147e4, -16
  store i32 %v7_147e4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_147d8, %bb138
  %v6_147f0 = phi i32 [ %v7_147e0, %bb138 ], [ %v6_147e0, %dec_label_pc_147d8 ]
  %v0_147e8 = phi i32 [ %v7_147e4, %bb138 ], [ %v0_147e8.pr, %dec_label_pc_147d8 ]
  %v4_147e8 = add i32 %v0_147e8, 20
  store i32 %v4_147e8, i32* %r2.global-to-local, align 4
  %v6_147e8 = sub i32 0, %v0_147e8
  %v7_147e8 = and i32 %v4_147e8, %v6_147e8
  %v8_147e8 = icmp slt i32 %v7_147e8, 0
  store i1 %v8_147e8, i1* %cpsr_v.global-to-local, align 1
  %v9_147e8 = icmp slt i32 %v4_147e8, 0
  store i1 %v9_147e8, i1* %cpsr_n.global-to-local, align 1
  %v10_147e8 = icmp eq i32 %v4_147e8, 0
  store i1 %v10_147e8, i1* %cpsr_z.global-to-local, align 1
  %v5_147ec = icmp slt i32 %v0_147e8, -20
  br i1 %v5_147ec, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_147ec = load i32, i32* %r1.global-to-local, align 4
  %v7_147ec = add i32 %v6_147ec, -4
  %v8_147ec = inttoptr i32 %v7_147ec to i32*
  %v9_147ec = load i32, i32* %v8_147ec, align 4
  store i32 %v9_147ec, i32* %r3.global-to-local, align 4
  %v10_147ec = add i32 %v6_147ec, -8
  %v11_147ec = inttoptr i32 %v10_147ec to i32*
  %v12_147ec = load i32, i32* %v11_147ec, align 4
  store i32 %v12_147ec, i32* %ip.global-to-local, align 4
  %v13_147ec = add i32 %v6_147ec, -12
  %v14_147ec = inttoptr i32 %v13_147ec to i32*
  %v15_147ec = load i32, i32* %v14_147ec, align 4
  store i32 %v15_147ec, i32* %lr.global-to-local, align 4
  store i32 %v13_147ec, i32* %r1.global-to-local, align 4
  %v7_147f0 = add i32 %v6_147f0, -12
  %v8_147f0 = inttoptr i32 %v7_147f0 to i32*
  store i32 %v9_147ec, i32* %v8_147f0, align 4
  %v10_147f0 = add i32 %v6_147f0, -8
  %v11_147f0 = inttoptr i32 %v10_147f0 to i32*
  %v12_147f0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_147f0, i32* %v11_147f0, align 4
  %v13_147f0 = add i32 %v6_147f0, -4
  %v14_147f0 = inttoptr i32 %v13_147f0 to i32*
  %v15_147f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_147f0, i32* %v14_147f0, align 4
  store i32 %v7_147f0, i32* %r0.global-to-local, align 4
  %v6_147f4 = load i32, i32* %r2.global-to-local, align 4
  %v7_147f4 = add i32 %v6_147f4, -12
  store i32 %v7_147f4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_1481456 = phi i32 [ %v6_147f0, %.thread13 ], [ %v7_147f0, %bb139 ]
  %v0_147fc54 = phi i32 [ %v4_147e8, %.thread13 ], [ %v7_147f4, %bb139 ]
  %v2_147f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_147f8, i32* @r4, align 4
  store i32 %v6_147b4, i32* @lr, align 4
  br label %dec_label_pc_147fc

dec_label_pc_147fc:                               ; preds = %dec_label_pc_147ac, %.thread15
  %v7_1480c = phi i32 [ %v0_147c448, %dec_label_pc_147ac ], [ %v6_1481456, %.thread15 ]
  %v0_147fc = phi i32 [ %v2_147ac, %dec_label_pc_147ac ], [ %v0_147fc54, %.thread15 ]
  %v2_147fc = add i32 %v0_147fc, 8
  store i32 %v2_147fc, i32* %r2.global-to-local, align 4
  %v4_147fc = sub i32 0, %v0_147fc
  %v5_147fc = and i32 %v2_147fc, %v4_147fc
  %v6_147fc = icmp slt i32 %v5_147fc, 0
  store i1 %v6_147fc, i1* %cpsr_v.global-to-local, align 1
  %v7_147fc = icmp slt i32 %v2_147fc, 0
  store i1 %v7_147fc, i1* %cpsr_n.global-to-local, align 1
  %v8_147fc = icmp eq i32 %v2_147fc, 0
  store i1 %v8_147fc, i1* %cpsr_z.global-to-local, align 1
  %v5_14800 = icmp slt i32 %v0_147fc, -8
  br i1 %v5_14800, label %bb141, label %dec_label_pc_14804

dec_label_pc_14804:                               ; preds = %dec_label_pc_147fc
  %v6_14804 = add i32 %v0_147fc, 4
  store i32 %v6_14804, i32* %r2.global-to-local, align 4
  %v8_14804 = sub i32 -5, %v0_147fc
  %v9_14804 = and i32 %v8_14804, %v2_147fc
  %v10_14804 = icmp slt i32 %v9_14804, 0
  store i1 %v10_14804, i1* %cpsr_v.global-to-local, align 1
  %v11_14804 = icmp slt i32 %v6_14804, 0
  store i1 %v11_14804, i1* %cpsr_n.global-to-local, align 1
  %v12_14804 = icmp eq i32 %v2_147fc, 4
  store i1 %v12_14804, i1* %cpsr_z.global-to-local, align 1
  %v5_14808 = icmp slt i32 %v2_147fc, 4
  %v6_14808 = load i32, i32* %r1.global-to-local, align 4
  %v7_14808 = add i32 %v6_14808, -4
  %v8_14808 = inttoptr i32 %v7_14808 to i32*
  %v9_14808 = load i32, i32* %v8_14808, align 4
  store i32 %v9_14808, i32* %r3.global-to-local, align 4
  br i1 %v5_14808, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_14804
  store i32 %v7_14808, i32* %r1.global-to-local, align 4
  %v8_1480c = add i32 %v7_1480c, -4
  %v9_1480c = inttoptr i32 %v8_1480c to i32*
  store i32 %v9_14808, i32* %v9_1480c, align 4
  %v10_1480c = load i32, i32* %r0.global-to-local, align 4
  %v11_1480c = add i32 %v10_1480c, -4
  store i32 %v11_1480c, i32* %r0.global-to-local, align 4
  %v0_1481c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_14804
  %v10_14810 = add i32 %v6_14808, -8
  %v11_14810 = inttoptr i32 %v10_14810 to i32*
  %v12_14810 = load i32, i32* %v11_14810, align 4
  store i32 %v12_14810, i32* %ip.global-to-local, align 4
  store i32 %v10_14810, i32* %r1.global-to-local, align 4
  %v7_14814 = add i32 %v7_1480c, -8
  %v8_14814 = inttoptr i32 %v7_14814 to i32*
  store i32 %v9_14808, i32* %v8_14814, align 4
  %v10_14814 = add i32 %v7_1480c, -4
  %v11_14814 = inttoptr i32 %v10_14814 to i32*
  %v12_14814 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_14814, i32* %v11_14814, align 4
  store i32 %v7_14814, i32* %r0.global-to-local, align 4
  %v6_14818 = load i32, i32* %r2.global-to-local, align 4
  %v7_14818 = add i32 %v6_14818, -4
  store i32 %v7_14818, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_147fc, %dec_label_pc_1478c, %dec_label_pc_149c0, %dec_label_pc_14954, %dec_label_pc_148e8, %bb140
  %v2_14820 = phi i32 [ %v11_1480c, %.thread19 ], [ %v0_148b831, %.thread25 ], [ %v7_1480c, %dec_label_pc_147fc ], [ %v2_14790, %dec_label_pc_1478c ], [ %v2_1482c64, %dec_label_pc_149c0 ], [ %v2_1482c63, %dec_label_pc_14954 ], [ %v2_1482c62, %dec_label_pc_148e8 ], [ %v7_14814, %bb140 ]
  %v0_1481c = phi i32 [ %v0_1481c.pre, %.thread19 ], [ %v2_14860, %.thread25 ], [ %v2_147fc, %dec_label_pc_147fc ], [ %v2_14794, %dec_label_pc_1478c ], [ %v0_1481c60, %dec_label_pc_149c0 ], [ %v0_1481c59, %dec_label_pc_14954 ], [ %v0_1481c58, %dec_label_pc_148e8 ], [ %v7_14818, %bb140 ]
  %v1_1481c = add i32 %v0_1481c, 4
  store i32 %v1_1481c, i32* %r2.global-to-local, align 4
  %v3_1481c = sub i32 0, %v0_1481c
  %v4_1481c = and i32 %v1_1481c, %v3_1481c
  %v5_1481c = icmp slt i32 %v4_1481c, 0
  store i1 %v5_1481c, i1* %cpsr_v.global-to-local, align 1
  %v6_1481c = icmp slt i32 %v1_1481c, 0
  store i1 %v6_1481c, i1* %cpsr_n.global-to-local, align 1
  %v7_1481c = icmp eq i32 %v1_1481c, 0
  store i1 %v7_1481c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1481c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_14824 = add i32 %v0_1481c, 2
  %v3_14824 = sub i32 -3, %v0_1481c
  %v4_14824 = and i32 %v3_14824, %v1_1481c
  %v5_14824 = icmp slt i32 %v4_14824, 0
  store i1 %v5_14824, i1* %cpsr_v.global-to-local, align 1
  %v6_14824 = icmp slt i32 %v1_14824, 0
  store i1 %v6_14824, i1* %cpsr_n.global-to-local, align 1
  %v7_14824 = icmp eq i32 %v1_1481c, 2
  store i1 %v7_14824, i1* %cpsr_z.global-to-local, align 1
  %v0_14828 = load i32, i32* %r1.global-to-local, align 4
  %v1_14828 = add i32 %v0_14828, -1
  %v2_14828 = inttoptr i32 %v1_14828 to i8*
  %v3_14828 = load i8, i8* %v2_14828, align 1
  %v4_14828 = zext i8 %v3_14828 to i32
  store i32 %v4_14828, i32* %r3.global-to-local, align 4
  store i32 %v1_14828, i32* %r1.global-to-local, align 4
  %v3_1482c = add i32 %v2_14820, -1
  %v4_1482c = inttoptr i32 %v3_1482c to i8*
  store i8 %v3_14828, i8* %v4_1482c, align 1
  %v5_1482c = load i32, i32* %r0.global-to-local, align 4
  %v6_1482c = add i32 %v5_1482c, -1
  store i32 %v6_1482c, i32* %r0.global-to-local, align 4
  %v0_14830 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14830 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14830 = xor i1 %v0_14830, %v1_14830
  br i1 %v2_14830, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14830 = load i32, i32* %r1.global-to-local, align 4
  %v4_14830 = add i32 %v3_14830, -1
  %v5_14830 = inttoptr i32 %v4_14830 to i8*
  %v6_14830 = load i8, i8* %v5_14830, align 1
  %v7_14830 = zext i8 %v6_14830 to i32
  store i32 %v7_14830, i32* %r3.global-to-local, align 4
  store i32 %v4_14830, i32* %r1.global-to-local, align 4
  %v6_14834 = add i32 %v5_1482c, -2
  %v7_14834 = inttoptr i32 %v6_14834 to i8*
  store i8 %v6_14830, i8* %v7_14834, align 1
  %v8_14834 = load i32, i32* %r0.global-to-local, align 4
  %v9_14834 = add i32 %v8_14834, -1
  store i32 %v9_14834, i32* %r0.global-to-local, align 4
  %v1_14838.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14838.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1483c = phi i32 [ %v9_14834, %bb143 ], [ %v6_1482c, %bb142 ]
  %v2_1483c = phi i1 [ %v2_14838.pre, %bb143 ], [ %v1_14830, %bb142 ]
  %v1_1483c = phi i1 [ %v1_14838.pre, %bb143 ], [ %v0_14830, %bb142 ]
  %v0_14838 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14838 = xor i1 %v2_1483c, %v1_1483c
  %v4_14838 = or i1 %v0_14838, %v3_14838
  br i1 %v4_14838, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_14838 = load i32, i32* %r1.global-to-local, align 4
  %v6_14838 = add i32 %v5_14838, -1
  %v7_14838 = inttoptr i32 %v6_14838 to i8*
  %v8_14838 = load i8, i8* %v7_14838, align 1
  %v9_14838 = zext i8 %v8_14838 to i32
  store i32 %v9_14838, i32* %r3.global-to-local, align 4
  store i32 %v6_14838, i32* %r1.global-to-local, align 4
  %v8_1483c = add i32 %v7_1483c, -1
  %v9_1483c = inttoptr i32 %v8_1483c to i8*
  store i8 %v8_14838, i8* %v9_1483c, align 1
  %v10_1483c = load i32, i32* %r0.global-to-local, align 4
  %v11_1483c = add i32 %v10_1483c, -1
  store i32 %v11_1483c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_14844:                               ; preds = %dec_label_pc_1479c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14844 = icmp eq i32 %v1_1479c, 1
  store i1 %v8_14844, i1* %cpsr_n.global-to-local, align 1
  %v9_14844 = icmp eq i32 %v1_1479c, 2
  store i1 %v9_14844, i1* %cpsr_z.global-to-local, align 1
  %v1_14848 = add i32 %v2_1478c, -1
  %v2_14848 = inttoptr i32 %v1_14848 to i8*
  %v3_14848 = load i8, i8* %v2_14848, align 1
  %v4_14848 = zext i8 %v3_14848 to i32
  store i32 %v4_14848, i32* %r3.global-to-local, align 4
  store i32 %v1_14848, i32* %r1.global-to-local, align 4
  %v3_1484c = add i32 %v2_14790, -1
  %v4_1484c = inttoptr i32 %v3_1484c to i8*
  store i8 %v3_14848, i8* %v4_1484c, align 1
  %v5_1484c = load i32, i32* %r0.global-to-local, align 4
  %v6_1484c = add i32 %v5_1484c, -1
  store i32 %v6_1484c, i32* %r0.global-to-local, align 4
  br i1 %v8_14844, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_14844
  %v6_14850 = load i32, i32* %r1.global-to-local, align 4
  %v7_14850 = add i32 %v6_14850, -1
  %v8_14850 = inttoptr i32 %v7_14850 to i8*
  %v9_14850 = load i8, i8* %v8_14850, align 1
  %v10_14850 = zext i8 %v9_14850 to i32
  store i32 %v10_14850, i32* %r3.global-to-local, align 4
  store i32 %v7_14850, i32* %r1.global-to-local, align 4
  %v9_14854 = add i32 %v5_1484c, -2
  %v10_14854 = inttoptr i32 %v9_14854 to i8*
  store i8 %v9_14850, i8* %v10_14854, align 1
  %v11_14854 = load i32, i32* %r0.global-to-local, align 4
  %v12_14854 = add i32 %v11_14854, -1
  store i32 %v12_14854, i32* %r0.global-to-local, align 4
  br i1 %v9_14844, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_14858 = load i32, i32* %r1.global-to-local, align 4
  %v9_14858 = add i32 %v8_14858, -1
  %v10_14858 = inttoptr i32 %v9_14858 to i8*
  %v11_14858 = load i8, i8* %v10_14858, align 1
  %v12_14858 = zext i8 %v11_14858 to i32
  store i32 %v12_14858, i32* %r3.global-to-local, align 4
  store i32 %v9_14858, i32* %r1.global-to-local, align 4
  %v11_1485c = add i32 %v11_14854, -2
  %v12_1485c = inttoptr i32 %v11_1485c to i8*
  store i8 %v11_14858, i8* %v12_1485c, align 1
  %v13_1485c = load i32, i32* %r0.global-to-local, align 4
  %v14_1485c = add i32 %v13_1485c, -1
  store i32 %v14_1485c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_14844, %bb146
  %v0_148b831 = phi i32 [ %v12_14854, %bb145 ], [ %v6_1484c, %dec_label_pc_14844 ], [ %v14_1485c, %bb146 ]
  %v0_14860 = load i32, i32* %r2.global-to-local, align 4
  %v1_14860 = load i32, i32* %ip.global-to-local, align 4
  %v2_14860 = sub i32 %v0_14860, %v1_14860
  store i32 %v2_14860, i32* %r2.global-to-local, align 4
  %v4_14860 = xor i32 %v1_14860, %v0_14860
  %v5_14860 = xor i32 %v2_14860, %v0_14860
  %v6_14860 = and i32 %v5_14860, %v4_14860
  %v7_14860 = icmp slt i32 %v6_14860, 0
  store i1 %v7_14860, i1* %cpsr_v.global-to-local, align 1
  %v8_14860 = icmp slt i32 %v2_14860, 0
  store i1 %v8_14860, i1* %cpsr_n.global-to-local, align 1
  %v9_14860 = icmp eq i32 %v0_14860, %v1_14860
  store i1 %v9_14860, i1* %cpsr_z.global-to-local, align 1
  %v5_14864 = icmp slt i32 %v0_14860, %v1_14860
  br i1 %v5_14864, label %bb141, label %dec_label_pc_14868

dec_label_pc_14868:                               ; preds = %.thread25
  %v0_14868 = load i32, i32* %r1.global-to-local, align 4
  %v1_14868 = urem i32 %v0_14868, 4
  store i32 %v1_14868, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14868 = icmp eq i32 %v1_14868, 0
  store i1 %v2_14868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14868, label %dec_label_pc_147ac, label %dec_label_pc_14870

dec_label_pc_14870:                               ; preds = %dec_label_pc_147a4, %dec_label_pc_14868
  %v0_148b830 = phi i32 [ %v2_14790, %dec_label_pc_147a4 ], [ %v0_148b831, %dec_label_pc_14868 ]
  %v0_14964 = phi i32 [ %v2_14794, %dec_label_pc_147a4 ], [ %v2_14860, %dec_label_pc_14868 ]
  %v0_14870 = phi i32 [ %v2_1478c, %dec_label_pc_147a4 ], [ %v0_14868, %dec_label_pc_14868 ]
  %v0_14878 = phi i32 [ %v1_147a4, %dec_label_pc_147a4 ], [ %v1_14868, %dec_label_pc_14868 ]
  %v1_14870 = and i32 %v0_14870, -4
  store i32 %v1_14870, i32* %r1.global-to-local, align 4
  %v1_14874 = inttoptr i32 %v1_14870 to i32*
  %v2_14874 = load i32, i32* %v1_14874, align 4
  store i32 %v2_14874, i32* %r3.global-to-local, align 4
  %v7_14878 = icmp ult i32 %v0_14878, 2
  %v2_1495c = add i32 %v0_14964, -12
  %v4_1495c = sub i32 11, %v0_14964
  %v5_1495c = and i32 %v4_1495c, %v0_14964
  %v6_1495c = icmp slt i32 %v5_1495c, 0
  store i1 %v6_1495c, i1* %cpsr_v.global-to-local, align 1
  %v7_1495c = icmp slt i32 %v2_1495c, 0
  store i1 %v7_1495c, i1* %cpsr_n.global-to-local, align 1
  %v8_1495c = icmp eq i32 %v0_14964, 12
  store i1 %v8_1495c, i1* %cpsr_z.global-to-local, align 1
  %v5_14960 = icmp slt i32 %v0_14964, 12
  br i1 %v7_14878, label %dec_label_pc_1495c, label %dec_label_pc_14880

dec_label_pc_14880:                               ; preds = %dec_label_pc_14870
  %v8_14878 = icmp eq i32 %v0_14878, 2
  br i1 %v8_14878, label %dec_label_pc_148f0, label %dec_label_pc_14884

dec_label_pc_14884:                               ; preds = %dec_label_pc_14880
  br i1 %v5_14960, label %dec_label_pc_148d0, label %dec_label_pc_1488c

dec_label_pc_1488c:                               ; preds = %dec_label_pc_14884
  store i32 %v2_1495c, i32* %r2.global-to-local, align 4
  %v3_14890 = load i32, i32* @r4, align 4
  store i32 %v3_14890, i32* %stack_var_-12, align 4
  %v6_14890 = load i32, i32* @r5, align 4
  store i32 %v6_14890, i32* %stack_var_-8, align 4
  %v9_14890 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14894

dec_label_pc_14894:                               ; preds = %dec_label_pc_14894.dec_label_pc_14894_crit_edge, %dec_label_pc_1488c
  %v0_148b8 = phi i32 [ %v1_148b8, %dec_label_pc_14894.dec_label_pc_14894_crit_edge ], [ %v0_148b830, %dec_label_pc_1488c ]
  %v0_14898 = phi i32 [ %v0_14898.pre, %dec_label_pc_14894.dec_label_pc_14894_crit_edge ], [ %v1_14870, %dec_label_pc_1488c ]
  %v0_14894 = phi i32 [ %v0_14894.pre, %dec_label_pc_14894.dec_label_pc_14894_crit_edge ], [ %v2_14874, %dec_label_pc_1488c ]
  %v3_14894 = mul i32 %v0_14894, 256
  store i32 %v3_14894, i32* %lr.global-to-local, align 4
  %v1_14898 = add i32 %v0_14898, -4
  %v2_14898 = inttoptr i32 %v1_14898 to i32*
  %v3_14898 = load i32, i32* %v2_14898, align 4
  store i32 %v3_14898, i32* %r3.global-to-local, align 4
  %v4_14898 = add i32 %v0_14898, -8
  %v5_14898 = inttoptr i32 %v4_14898 to i32*
  %v6_14898 = load i32, i32* %v5_14898, align 4
  store i32 %v6_14898, i32* %r4.global-to-local, align 4
  %v7_14898 = add i32 %v0_14898, -12
  %v8_14898 = inttoptr i32 %v7_14898 to i32*
  %v9_14898 = load i32, i32* %v8_14898, align 4
  store i32 %v9_14898, i32* %r5.global-to-local, align 4
  %v10_14898 = add i32 %v0_14898, -16
  %v11_14898 = inttoptr i32 %v10_14898 to i32*
  %v12_14898 = load i32, i32* %v11_14898, align 4
  store i32 %v10_14898, i32* %r1.global-to-local, align 4
  %v4_1489c = udiv i32 %v12_14898, 16777216
  %v5_1489c = or i32 %v4_1489c, %v3_14894
  store i32 %v5_1489c, i32* %lr.global-to-local, align 4
  %v3_148a0 = mul i32 %v12_14898, 256
  %v4_148a4 = udiv i32 %v9_14898, 16777216
  %v5_148a4 = or i32 %v3_148a0, %v4_148a4
  store i32 %v5_148a4, i32* %ip.global-to-local, align 4
  %v3_148a8 = mul i32 %v9_14898, 256
  %v4_148ac = udiv i32 %v6_14898, 16777216
  %v5_148ac = or i32 %v3_148a8, %v4_148ac
  store i32 %v5_148ac, i32* %r5.global-to-local, align 4
  %v3_148b0 = mul i32 %v6_14898, 256
  %v4_148b4 = udiv i32 %v3_14898, 16777216
  %v5_148b4 = or i32 %v3_148b0, %v4_148b4
  store i32 %v5_148b4, i32* %r4.global-to-local, align 4
  %v1_148b8 = add i32 %v0_148b8, -16
  %v2_148b8 = inttoptr i32 %v1_148b8 to i32*
  store i32 %v5_148b4, i32* %v2_148b8, align 4
  %v4_148b8 = add i32 %v0_148b8, -12
  %v5_148b8 = inttoptr i32 %v4_148b8 to i32*
  %v6_148b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_148b8, i32* %v5_148b8, align 4
  %v7_148b8 = add i32 %v0_148b8, -8
  %v8_148b8 = inttoptr i32 %v7_148b8 to i32*
  %v9_148b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_148b8, i32* %v8_148b8, align 4
  %v10_148b8 = add i32 %v0_148b8, -4
  %v11_148b8 = inttoptr i32 %v10_148b8 to i32*
  %v12_148b8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_148b8, i32* %v11_148b8, align 4
  store i32 %v1_148b8, i32* %r0.global-to-local, align 4
  %v0_148bc = load i32, i32* %r2.global-to-local, align 4
  %v2_148bc = add i32 %v0_148bc, -16
  store i32 %v2_148bc, i32* %r2.global-to-local, align 4
  %v6_148c0 = icmp slt i32 %v0_148bc, 16
  br i1 %v6_148c0, label %dec_label_pc_148c4, label %dec_label_pc_14894.dec_label_pc_14894_crit_edge

dec_label_pc_14894.dec_label_pc_14894_crit_edge:  ; preds = %dec_label_pc_14894
  %v0_14894.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14898.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14894

dec_label_pc_148c4:                               ; preds = %dec_label_pc_14894
  %v2_148c4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_148c4, i32* @r4, align 4
  %v5_148c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_148c4, i32* @r5, align 4
  store i32 %v9_14890, i32* @lr, align 4
  %v2_148c8 = add i32 %v0_148bc, -4
  store i32 %v2_148c8, i32* %r2.global-to-local, align 4
  %v4_148c8 = add i32 %v0_148bc, 2147483632
  %v5_148c8 = and i32 %v2_148c8, %v4_148c8
  %v6_148c8 = icmp slt i32 %v5_148c8, 0
  store i1 %v6_148c8, i1* %cpsr_v.global-to-local, align 1
  %v7_148c8 = icmp slt i32 %v2_148c8, 0
  store i1 %v7_148c8, i1* %cpsr_n.global-to-local, align 1
  %v8_148c8 = icmp eq i32 %v2_148c8, 0
  store i1 %v8_148c8, i1* %cpsr_z.global-to-local, align 1
  %v5_148cc = icmp slt i32 %v2_148bc, -12
  br i1 %v5_148cc, label %dec_label_pc_148e8, label %dec_label_pc_148d0

dec_label_pc_148d0:                               ; preds = %dec_label_pc_148c4, %dec_label_pc_14884, %dec_label_pc_148d0
  %v1_148dc = phi i32 [ %v5_148dc, %dec_label_pc_148d0 ], [ %v1_148b8, %dec_label_pc_148c4 ], [ %v0_148b830, %dec_label_pc_14884 ]
  %v0_148d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_148d0 = mul i32 %v0_148d0, 256
  store i32 %v3_148d0, i32* %ip.global-to-local, align 4
  %v0_148d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_148d4 = add i32 %v0_148d4, -4
  %v2_148d4 = inttoptr i32 %v1_148d4 to i32*
  %v3_148d4 = load i32, i32* %v2_148d4, align 4
  store i32 %v3_148d4, i32* %r3.global-to-local, align 4
  store i32 %v1_148d4, i32* %r1.global-to-local, align 4
  %v4_148d8 = udiv i32 %v3_148d4, 16777216
  %v5_148d8 = or i32 %v4_148d8, %v3_148d0
  store i32 %v5_148d8, i32* %ip.global-to-local, align 4
  %v2_148dc = add i32 %v1_148dc, -4
  %v3_148dc = inttoptr i32 %v2_148dc to i32*
  store i32 %v5_148d8, i32* %v3_148dc, align 4
  %v4_148dc = load i32, i32* %r0.global-to-local, align 4
  %v5_148dc = add i32 %v4_148dc, -4
  store i32 %v5_148dc, i32* %r0.global-to-local, align 4
  %v0_148e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_148e0 = add i32 %v0_148e0, -4
  store i32 %v2_148e0, i32* %r2.global-to-local, align 4
  %v6_148e4 = icmp slt i32 %v0_148e0, 4
  br i1 %v6_148e4, label %dec_label_pc_148e8.loopexit, label %dec_label_pc_148d0

dec_label_pc_148e8.loopexit:                      ; preds = %dec_label_pc_148d0
  %v4_148e0 = sub i32 3, %v0_148e0
  %v5_148e0 = and i32 %v4_148e0, %v0_148e0
  %v6_148e0 = icmp slt i32 %v5_148e0, 0
  %v7_148e0 = icmp slt i32 %v2_148e0, 0
  store i1 %v6_148e0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_148e0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_148e8

dec_label_pc_148e8:                               ; preds = %dec_label_pc_148e8.loopexit, %dec_label_pc_148c4
  %v2_1482c62 = phi i32 [ %v5_148dc, %dec_label_pc_148e8.loopexit ], [ %v1_148b8, %dec_label_pc_148c4 ]
  %v0_1481c58 = phi i32 [ %v2_148e0, %dec_label_pc_148e8.loopexit ], [ %v2_148c8, %dec_label_pc_148c4 ]
  %v0_148e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_148e8 = add i32 %v0_148e8, 3
  store i32 %v1_148e8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_148f0:                               ; preds = %dec_label_pc_14880
  br i1 %v5_14960, label %dec_label_pc_1493c, label %dec_label_pc_148f8

dec_label_pc_148f8:                               ; preds = %dec_label_pc_148f0
  store i32 %v2_1495c, i32* %r2.global-to-local, align 4
  %v3_148fc = load i32, i32* @r4, align 4
  store i32 %v3_148fc, i32* %stack_var_-12, align 4
  %v6_148fc = load i32, i32* @r5, align 4
  store i32 %v6_148fc, i32* %stack_var_-8, align 4
  %v9_148fc = load i32, i32* @lr, align 4
  br label %dec_label_pc_14900

dec_label_pc_14900:                               ; preds = %dec_label_pc_14900.dec_label_pc_14900_crit_edge, %dec_label_pc_148f8
  %v0_14924 = phi i32 [ %v1_14924, %dec_label_pc_14900.dec_label_pc_14900_crit_edge ], [ %v0_148b830, %dec_label_pc_148f8 ]
  %v0_14904 = phi i32 [ %v0_14904.pre, %dec_label_pc_14900.dec_label_pc_14900_crit_edge ], [ %v1_14870, %dec_label_pc_148f8 ]
  %v0_14900 = phi i32 [ %v0_14900.pre, %dec_label_pc_14900.dec_label_pc_14900_crit_edge ], [ %v2_14874, %dec_label_pc_148f8 ]
  %v3_14900 = mul i32 %v0_14900, 65536
  store i32 %v3_14900, i32* %lr.global-to-local, align 4
  %v1_14904 = add i32 %v0_14904, -4
  %v2_14904 = inttoptr i32 %v1_14904 to i32*
  %v3_14904 = load i32, i32* %v2_14904, align 4
  store i32 %v3_14904, i32* %r3.global-to-local, align 4
  %v4_14904 = add i32 %v0_14904, -8
  %v5_14904 = inttoptr i32 %v4_14904 to i32*
  %v6_14904 = load i32, i32* %v5_14904, align 4
  store i32 %v6_14904, i32* %r4.global-to-local, align 4
  %v7_14904 = add i32 %v0_14904, -12
  %v8_14904 = inttoptr i32 %v7_14904 to i32*
  %v9_14904 = load i32, i32* %v8_14904, align 4
  store i32 %v9_14904, i32* %r5.global-to-local, align 4
  %v10_14904 = add i32 %v0_14904, -16
  %v11_14904 = inttoptr i32 %v10_14904 to i32*
  %v12_14904 = load i32, i32* %v11_14904, align 4
  store i32 %v10_14904, i32* %r1.global-to-local, align 4
  %v4_14908 = udiv i32 %v12_14904, 65536
  %v5_14908 = or i32 %v4_14908, %v3_14900
  store i32 %v5_14908, i32* %lr.global-to-local, align 4
  %v3_1490c = mul i32 %v12_14904, 65536
  %v4_14910 = udiv i32 %v9_14904, 65536
  %v5_14910 = or i32 %v3_1490c, %v4_14910
  store i32 %v5_14910, i32* %ip.global-to-local, align 4
  %v3_14914 = mul i32 %v9_14904, 65536
  %v4_14918 = udiv i32 %v6_14904, 65536
  %v5_14918 = or i32 %v3_14914, %v4_14918
  store i32 %v5_14918, i32* %r5.global-to-local, align 4
  %v3_1491c = mul i32 %v6_14904, 65536
  %v4_14920 = udiv i32 %v3_14904, 65536
  %v5_14920 = or i32 %v3_1491c, %v4_14920
  store i32 %v5_14920, i32* %r4.global-to-local, align 4
  %v1_14924 = add i32 %v0_14924, -16
  %v2_14924 = inttoptr i32 %v1_14924 to i32*
  store i32 %v5_14920, i32* %v2_14924, align 4
  %v4_14924 = add i32 %v0_14924, -12
  %v5_14924 = inttoptr i32 %v4_14924 to i32*
  %v6_14924 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14924, i32* %v5_14924, align 4
  %v7_14924 = add i32 %v0_14924, -8
  %v8_14924 = inttoptr i32 %v7_14924 to i32*
  %v9_14924 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14924, i32* %v8_14924, align 4
  %v10_14924 = add i32 %v0_14924, -4
  %v11_14924 = inttoptr i32 %v10_14924 to i32*
  %v12_14924 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14924, i32* %v11_14924, align 4
  store i32 %v1_14924, i32* %r0.global-to-local, align 4
  %v0_14928 = load i32, i32* %r2.global-to-local, align 4
  %v2_14928 = add i32 %v0_14928, -16
  store i32 %v2_14928, i32* %r2.global-to-local, align 4
  %v6_1492c = icmp slt i32 %v0_14928, 16
  br i1 %v6_1492c, label %dec_label_pc_14930, label %dec_label_pc_14900.dec_label_pc_14900_crit_edge

dec_label_pc_14900.dec_label_pc_14900_crit_edge:  ; preds = %dec_label_pc_14900
  %v0_14900.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14904.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14900

dec_label_pc_14930:                               ; preds = %dec_label_pc_14900
  %v2_14930 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14930, i32* @r4, align 4
  %v5_14930 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14930, i32* @r5, align 4
  store i32 %v9_148fc, i32* @lr, align 4
  %v2_14934 = add i32 %v0_14928, -4
  store i32 %v2_14934, i32* %r2.global-to-local, align 4
  %v4_14934 = add i32 %v0_14928, 2147483632
  %v5_14934 = and i32 %v2_14934, %v4_14934
  %v6_14934 = icmp slt i32 %v5_14934, 0
  store i1 %v6_14934, i1* %cpsr_v.global-to-local, align 1
  %v7_14934 = icmp slt i32 %v2_14934, 0
  store i1 %v7_14934, i1* %cpsr_n.global-to-local, align 1
  %v8_14934 = icmp eq i32 %v2_14934, 0
  store i1 %v8_14934, i1* %cpsr_z.global-to-local, align 1
  %v5_14938 = icmp slt i32 %v2_14928, -12
  br i1 %v5_14938, label %dec_label_pc_14954, label %dec_label_pc_1493c

dec_label_pc_1493c:                               ; preds = %dec_label_pc_14930, %dec_label_pc_148f0, %dec_label_pc_1493c
  %v1_14948 = phi i32 [ %v5_14948, %dec_label_pc_1493c ], [ %v1_14924, %dec_label_pc_14930 ], [ %v0_148b830, %dec_label_pc_148f0 ]
  %v0_1493c = load i32, i32* %r3.global-to-local, align 4
  %v3_1493c = mul i32 %v0_1493c, 65536
  store i32 %v3_1493c, i32* %ip.global-to-local, align 4
  %v0_14940 = load i32, i32* %r1.global-to-local, align 4
  %v1_14940 = add i32 %v0_14940, -4
  %v2_14940 = inttoptr i32 %v1_14940 to i32*
  %v3_14940 = load i32, i32* %v2_14940, align 4
  store i32 %v3_14940, i32* %r3.global-to-local, align 4
  store i32 %v1_14940, i32* %r1.global-to-local, align 4
  %v4_14944 = udiv i32 %v3_14940, 65536
  %v5_14944 = or i32 %v4_14944, %v3_1493c
  store i32 %v5_14944, i32* %ip.global-to-local, align 4
  %v2_14948 = add i32 %v1_14948, -4
  %v3_14948 = inttoptr i32 %v2_14948 to i32*
  store i32 %v5_14944, i32* %v3_14948, align 4
  %v4_14948 = load i32, i32* %r0.global-to-local, align 4
  %v5_14948 = add i32 %v4_14948, -4
  store i32 %v5_14948, i32* %r0.global-to-local, align 4
  %v0_1494c = load i32, i32* %r2.global-to-local, align 4
  %v2_1494c = add i32 %v0_1494c, -4
  store i32 %v2_1494c, i32* %r2.global-to-local, align 4
  %v6_14950 = icmp slt i32 %v0_1494c, 4
  br i1 %v6_14950, label %dec_label_pc_14954.loopexit, label %dec_label_pc_1493c

dec_label_pc_14954.loopexit:                      ; preds = %dec_label_pc_1493c
  %v4_1494c = sub i32 3, %v0_1494c
  %v5_1494c = and i32 %v4_1494c, %v0_1494c
  %v6_1494c = icmp slt i32 %v5_1494c, 0
  %v7_1494c = icmp slt i32 %v2_1494c, 0
  store i1 %v6_1494c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1494c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14954

dec_label_pc_14954:                               ; preds = %dec_label_pc_14954.loopexit, %dec_label_pc_14930
  %v2_1482c63 = phi i32 [ %v5_14948, %dec_label_pc_14954.loopexit ], [ %v1_14924, %dec_label_pc_14930 ]
  %v0_1481c59 = phi i32 [ %v2_1494c, %dec_label_pc_14954.loopexit ], [ %v2_14934, %dec_label_pc_14930 ]
  %v0_14954 = load i32, i32* %r1.global-to-local, align 4
  %v1_14954 = add i32 %v0_14954, 2
  store i32 %v1_14954, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1495c:                               ; preds = %dec_label_pc_14870
  br i1 %v5_14960, label %dec_label_pc_149a8, label %dec_label_pc_14964

dec_label_pc_14964:                               ; preds = %dec_label_pc_1495c
  store i32 %v2_1495c, i32* %r2.global-to-local, align 4
  %v3_14968 = load i32, i32* @r4, align 4
  store i32 %v3_14968, i32* %stack_var_-12, align 4
  %v6_14968 = load i32, i32* @r5, align 4
  store i32 %v6_14968, i32* %stack_var_-8, align 4
  %v9_14968 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1496c

dec_label_pc_1496c:                               ; preds = %dec_label_pc_1496c.dec_label_pc_1496c_crit_edge, %dec_label_pc_14964
  %v0_14990 = phi i32 [ %v1_14990, %dec_label_pc_1496c.dec_label_pc_1496c_crit_edge ], [ %v0_148b830, %dec_label_pc_14964 ]
  %v0_14970 = phi i32 [ %v0_14970.pre, %dec_label_pc_1496c.dec_label_pc_1496c_crit_edge ], [ %v1_14870, %dec_label_pc_14964 ]
  %v0_1496c = phi i32 [ %v0_1496c.pre, %dec_label_pc_1496c.dec_label_pc_1496c_crit_edge ], [ %v2_14874, %dec_label_pc_14964 ]
  %v3_1496c = mul i32 %v0_1496c, 16777216
  store i32 %v3_1496c, i32* %lr.global-to-local, align 4
  %v1_14970 = add i32 %v0_14970, -4
  %v2_14970 = inttoptr i32 %v1_14970 to i32*
  %v3_14970 = load i32, i32* %v2_14970, align 4
  store i32 %v3_14970, i32* %r3.global-to-local, align 4
  %v4_14970 = add i32 %v0_14970, -8
  %v5_14970 = inttoptr i32 %v4_14970 to i32*
  %v6_14970 = load i32, i32* %v5_14970, align 4
  store i32 %v6_14970, i32* %r4.global-to-local, align 4
  %v7_14970 = add i32 %v0_14970, -12
  %v8_14970 = inttoptr i32 %v7_14970 to i32*
  %v9_14970 = load i32, i32* %v8_14970, align 4
  store i32 %v9_14970, i32* %r5.global-to-local, align 4
  %v10_14970 = add i32 %v0_14970, -16
  %v11_14970 = inttoptr i32 %v10_14970 to i32*
  %v12_14970 = load i32, i32* %v11_14970, align 4
  store i32 %v10_14970, i32* %r1.global-to-local, align 4
  %v4_14974 = udiv i32 %v12_14970, 256
  %v5_14974 = or i32 %v4_14974, %v3_1496c
  store i32 %v5_14974, i32* %lr.global-to-local, align 4
  %v3_14978 = mul i32 %v12_14970, 16777216
  %v4_1497c = udiv i32 %v9_14970, 256
  %v5_1497c = or i32 %v3_14978, %v4_1497c
  store i32 %v5_1497c, i32* %ip.global-to-local, align 4
  %v3_14980 = mul i32 %v9_14970, 16777216
  %v4_14984 = udiv i32 %v6_14970, 256
  %v5_14984 = or i32 %v3_14980, %v4_14984
  store i32 %v5_14984, i32* %r5.global-to-local, align 4
  %v3_14988 = mul i32 %v6_14970, 16777216
  %v4_1498c = udiv i32 %v3_14970, 256
  %v5_1498c = or i32 %v3_14988, %v4_1498c
  store i32 %v5_1498c, i32* %r4.global-to-local, align 4
  %v1_14990 = add i32 %v0_14990, -16
  %v2_14990 = inttoptr i32 %v1_14990 to i32*
  store i32 %v5_1498c, i32* %v2_14990, align 4
  %v4_14990 = add i32 %v0_14990, -12
  %v5_14990 = inttoptr i32 %v4_14990 to i32*
  %v6_14990 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14990, i32* %v5_14990, align 4
  %v7_14990 = add i32 %v0_14990, -8
  %v8_14990 = inttoptr i32 %v7_14990 to i32*
  %v9_14990 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14990, i32* %v8_14990, align 4
  %v10_14990 = add i32 %v0_14990, -4
  %v11_14990 = inttoptr i32 %v10_14990 to i32*
  %v12_14990 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14990, i32* %v11_14990, align 4
  store i32 %v1_14990, i32* %r0.global-to-local, align 4
  %v0_14994 = load i32, i32* %r2.global-to-local, align 4
  %v2_14994 = add i32 %v0_14994, -16
  store i32 %v2_14994, i32* %r2.global-to-local, align 4
  %v6_14998 = icmp slt i32 %v0_14994, 16
  br i1 %v6_14998, label %dec_label_pc_1499c, label %dec_label_pc_1496c.dec_label_pc_1496c_crit_edge

dec_label_pc_1496c.dec_label_pc_1496c_crit_edge:  ; preds = %dec_label_pc_1496c
  %v0_1496c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14970.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1496c

dec_label_pc_1499c:                               ; preds = %dec_label_pc_1496c
  %v2_1499c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1499c, i32* @r4, align 4
  %v5_1499c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1499c, i32* @r5, align 4
  store i32 %v9_14968, i32* @lr, align 4
  %v2_149a0 = add i32 %v0_14994, -4
  store i32 %v2_149a0, i32* %r2.global-to-local, align 4
  %v4_149a0 = add i32 %v0_14994, 2147483632
  %v5_149a0 = and i32 %v2_149a0, %v4_149a0
  %v6_149a0 = icmp slt i32 %v5_149a0, 0
  store i1 %v6_149a0, i1* %cpsr_v.global-to-local, align 1
  %v7_149a0 = icmp slt i32 %v2_149a0, 0
  store i1 %v7_149a0, i1* %cpsr_n.global-to-local, align 1
  %v8_149a0 = icmp eq i32 %v2_149a0, 0
  store i1 %v8_149a0, i1* %cpsr_z.global-to-local, align 1
  %v5_149a4 = icmp slt i32 %v2_14994, -12
  br i1 %v5_149a4, label %dec_label_pc_149c0, label %dec_label_pc_149a8

dec_label_pc_149a8:                               ; preds = %dec_label_pc_1499c, %dec_label_pc_1495c, %dec_label_pc_149a8
  %v1_149b4 = phi i32 [ %v5_149b4, %dec_label_pc_149a8 ], [ %v1_14990, %dec_label_pc_1499c ], [ %v0_148b830, %dec_label_pc_1495c ]
  %v0_149a8 = load i32, i32* %r3.global-to-local, align 4
  %v3_149a8 = mul i32 %v0_149a8, 16777216
  store i32 %v3_149a8, i32* %ip.global-to-local, align 4
  %v0_149ac = load i32, i32* %r1.global-to-local, align 4
  %v1_149ac = add i32 %v0_149ac, -4
  %v2_149ac = inttoptr i32 %v1_149ac to i32*
  %v3_149ac = load i32, i32* %v2_149ac, align 4
  store i32 %v3_149ac, i32* %r3.global-to-local, align 4
  store i32 %v1_149ac, i32* %r1.global-to-local, align 4
  %v4_149b0 = udiv i32 %v3_149ac, 256
  %v5_149b0 = or i32 %v4_149b0, %v3_149a8
  store i32 %v5_149b0, i32* %ip.global-to-local, align 4
  %v2_149b4 = add i32 %v1_149b4, -4
  %v3_149b4 = inttoptr i32 %v2_149b4 to i32*
  store i32 %v5_149b0, i32* %v3_149b4, align 4
  %v4_149b4 = load i32, i32* %r0.global-to-local, align 4
  %v5_149b4 = add i32 %v4_149b4, -4
  store i32 %v5_149b4, i32* %r0.global-to-local, align 4
  %v0_149b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_149b8 = add i32 %v0_149b8, -4
  store i32 %v2_149b8, i32* %r2.global-to-local, align 4
  %v6_149bc = icmp slt i32 %v0_149b8, 4
  br i1 %v6_149bc, label %dec_label_pc_149c0.loopexit, label %dec_label_pc_149a8

dec_label_pc_149c0.loopexit:                      ; preds = %dec_label_pc_149a8
  %v4_149b8 = sub i32 3, %v0_149b8
  %v5_149b8 = and i32 %v4_149b8, %v0_149b8
  %v6_149b8 = icmp slt i32 %v5_149b8, 0
  %v7_149b8 = icmp slt i32 %v2_149b8, 0
  store i1 %v6_149b8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_149b8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_149c0

dec_label_pc_149c0:                               ; preds = %dec_label_pc_149c0.loopexit, %dec_label_pc_1499c
  %v2_1482c64 = phi i32 [ %v5_149b4, %dec_label_pc_149c0.loopexit ], [ %v1_14990, %dec_label_pc_1499c ]
  %v0_1481c60 = phi i32 [ %v2_149b8, %dec_label_pc_149c0.loopexit ], [ %v2_149a0, %dec_label_pc_1499c ]
  %v0_149c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_149c0 = add i32 %v0_149c0, 1
  store i32 %v1_149c0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_149b4, { 0, 2, 1 }
  uselistorder i32 %v3_149a8, { 1, 0 }
  uselistorder i32 %v2_149a0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14990, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14970, { 1, 0 }
  uselistorder i32 %v3_1496c, { 1, 0 }
  uselistorder i32 %v0_14970, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14990, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14948, { 0, 2, 1 }
  uselistorder i32 %v3_1493c, { 1, 0 }
  uselistorder i32 %v2_14934, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14924, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14904, { 1, 0 }
  uselistorder i32 %v3_14900, { 1, 0 }
  uselistorder i32 %v0_14904, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14924, { 3, 2, 1, 0 }
  uselistorder i32 %v5_148dc, { 0, 2, 1 }
  uselistorder i32 %v3_148d0, { 1, 0 }
  uselistorder i32 %v2_148c8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_148b8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14898, { 1, 0 }
  uselistorder i32 %v3_14894, { 1, 0 }
  uselistorder i32 %v0_14898, { 3, 2, 1, 0 }
  uselistorder i32 %v0_148b8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14960, { 2, 0, 1 }
  uselistorder i32 %v0_14878, { 1, 0 }
  uselistorder i32 %v0_14964, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_148b830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14868, { 2, 1, 0 }
  uselistorder i32 %v0_14868, { 2, 0, 1 }
  uselistorder i32 %v2_14860, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14860, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14860, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_148b831, { 2, 1, 0 }
  uselistorder i32 %v11_1483c, { 1, 0 }
  uselistorder i32 %v7_1483c, { 1, 0 }
  uselistorder i32 %v1_1481c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1481c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14820, { 1, 0 }
  uselistorder i32 %v7_14814, { 0, 2, 1 }
  uselistorder i32 %v10_14810, { 1, 0 }
  uselistorder i32 %v9_14808, { 1, 0, 2 }
  uselistorder i32 %v6_14804, { 1, 0 }
  uselistorder i32 %v2_147fc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_147fc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1480c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_147f0, { 0, 2, 1 }
  uselistorder i32 %v13_147ec, { 1, 0 }
  uselistorder i32 %v4_147e8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_147e8, { 2, 0, 1 }
  uselistorder i32 %v6_147f0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_147e0, { 0, 2, 1 }
  uselistorder i32 %v16_147dc, { 1, 0 }
  uselistorder i32 %v4_147d8, { 1, 2, 0 }
  uselistorder i32 %v0_147e8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_147e0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_147cc, { 0, 3, 2, 1 }
  uselistorder i32 %v10_147c8, { 1, 0 }
  uselistorder i32 %v1_147c4, { 1, 0 }
  uselistorder i32 %v10_147c0, { 1, 0 }
  uselistorder i32 %v0_147c0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_147c4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_147b8, { 0, 2, 1 }
  uselistorder i32 %v2_147ac, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_147ac, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_147c448, { 1, 2, 0 }
  uselistorder i32 %v1_147a4, { 2, 1, 0 }
  uselistorder i32 %v1_1479c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14794, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_14790, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1478c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1478c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_14778, { 0, 2, 1 }
  uselistorder i32 %v3_1476c, { 1, 0 }
  uselistorder i32 %v2_14764, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14754, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14734, { 1, 0, 2 }
  uselistorder i32 %v5_14734, { 1, 0, 2 }
  uselistorder i32 %v2_14734, { 1, 0, 2 }
  uselistorder i32 %v3_14730, { 1, 0 }
  uselistorder i32 %v0_14734, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14754, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_1470c, { 0, 2, 1 }
  uselistorder i32 %v3_14700, { 1, 0 }
  uselistorder i32 %v2_146f8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_146e8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_146c8, { 1, 0, 2 }
  uselistorder i32 %v5_146c8, { 1, 0, 2 }
  uselistorder i32 %v2_146c8, { 1, 0, 2 }
  uselistorder i32 %v3_146c4, { 1, 0 }
  uselistorder i32 %v0_146c8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_146e8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_146a0, { 0, 2, 1 }
  uselistorder i32 %v3_14694, { 1, 0 }
  uselistorder i32 %v2_1468c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1467c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1465c, { 1, 0, 2 }
  uselistorder i32 %v5_1465c, { 1, 0, 2 }
  uselistorder i32 %v2_1465c, { 1, 0, 2 }
  uselistorder i32 %v3_14658, { 1, 0 }
  uselistorder i32 %v0_1465c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1467c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_14724, { 2, 0, 1 }
  uselistorder i32 %v0_14728, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1467c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_1462c, { 1, 0 }
  uselistorder i32 %v0_1462c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_14624, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14624, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14624, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1467c75, { 2, 1, 0 }
  uselistorder i32 %v1_14604, { 1, 0, 2 }
  uselistorder i32 %v1_145dc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_145dc, { 1, 2, 0, 3 }
  uselistorder i32 %v8_145c8, { 1, 0, 2 }
  uselistorder i32 %v6_145c4, { 1, 0 }
  uselistorder i32 %v2_145bc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_145bc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_145cc, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_145b4, { 0, 2, 1 }
  uselistorder i32 %v3_145b4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_145b4, { 1, 0 }
  uselistorder i1 %v1_145b4, { 1, 0 }
  uselistorder i32 %v3_145b0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_145a8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_14594, { 1, 2, 0 }
  uselistorder i32 %v12_14588, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1457c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14580, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_14570, { 0, 2, 1 }
  uselistorder i32 %v2_14568, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14568, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_14560, { 1, 0 }
  uselistorder i32 %v1_14558, { 2, 1, 0 }
  uselistorder i32 %v2_14550, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_14550, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_14540, { 1, 0 }
  uselistorder i32 %v1_14540, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_14540, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 53, 54, 55, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 6, 1, 8, 2, 44, 7, 45, 9, 10, 11, 12, 13, 14, 15, 16, 17, 46, 18, 19, 20, 21, 22, 3, 23, 4, 25, 5, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 7, 2, 9, 3, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 4, 23, 5, 25, 6, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 48, 6, 1, 8, 2, 46, 7, 47, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 19, 20, 21, 22, 23, 3, 24, 4, 26, 5, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32 31, { 31, 32, 1, 0, 15, 17, 16, 18, 2, 24, 33, 21, 34, 22, 35, 23, 36, 20, 37, 25, 19, 38, 26, 8, 3, 27, 39, 28, 40, 29, 41, 9, 4, 30, 10, 5, 6, 11, 12, 7, 13, 14 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 18, 19, 20, 14 }
  uselistorder i32 65536, { 4, 3, 9, 5, 10, 6, 11, 7, 12, 8, 13, 14, 15, 19, 16, 20, 17, 21, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 56, 59, 58, 60, 61, 62, 1, 63, 0, 2, 64, 65, 66, 67, 68, 71, 69, 70, 72, 73, 74, 79, 80, 81, 82, 75, 76, 77, 78, 83, 86, 87, 84, 88, 85, 89, 90, 92, 93, 94, 91, 95, 97, 96, 99, 100, 98, 101, 102, 103, 106, 107, 104, 108, 105, 109, 110, 113, 114, 115, 111, 112, 116, 136, 118, 117, 119, 121, 120, 123, 122, 124, 125, 127, 128, 129, 126, 130, 131, 133, 134, 135, 132 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 61, 62, 68, 63, 69, 64, 70, 65, 71, 72, 66, 73, 67, 75, 74, 77, 76, 79, 78, 81, 80, 82, 83, 84, 86, 85, 87, 88, 89, 90, 93, 91, 94, 92, 95, 97, 96, 98, 99, 101, 100, 103, 102, 104, 106, 105, 107, 108, 109, 112, 110, 111, 114, 113, 115, 121, 116, 122, 117, 123, 118, 120, 124, 125, 126, 119, 127, 128, 134, 129, 135, 130, 136, 131, 133, 137, 138, 139, 132, 140 }
  uselistorder i32* @r5, { 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 210, 211, 212, 214, 598, 599, 600, 601, 602, 0, 603, 604, 605, 215, 216, 217, 218, 219, 220, 477, 478, 479, 480, 481, 482, 483, 484, 514, 515, 516, 517, 518, 519, 528, 529, 530, 537, 538, 539, 540, 531, 532, 533, 534, 535, 536, 56, 57, 58, 221, 222, 5, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 48, 39, 13, 14, 111, 112, 113, 114, 15, 115, 44, 116, 117, 118, 4, 3, 119, 120, 16, 17, 18, 19, 20, 40, 45, 10, 11, 12, 49, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 50, 51, 52, 53, 46, 47, 121, 122, 123, 124, 125, 54, 55, 126, 127, 128, 129, 7, 130, 131, 132, 133, 142, 143, 134, 135, 136, 137, 138, 139, 140, 141, 6, 165, 166, 167, 168, 169, 170, 171, 541, 542, 543, 544, 545, 546, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 1, 164, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 2, 200, 234, 235, 236, 237, 238, 8, 239, 240, 241, 242, 243, 244, 245, 246, 9, 247, 248, 249, 250, 251, 252, 258, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 286, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 311, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 358, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 393, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 422, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 452, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 547, 548, 549, 550, 551, 552, 561, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 520, 523, 521, 522, 524, 525, 526, 527 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0, 2 }
  uselistorder i32 11, { 10, 11, 12, 23, 24, 4, 1, 13, 14, 15, 16, 5, 17, 6, 18, 7, 19, 20, 0, 21, 8, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 2, 35, 36, 37, 9, 38, 39, 40, 3, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 4, 5, 2, 3, 1, 6, 7 }
  uselistorder i32 40, { 1, 8, 2, 0, 5, 6, 7, 9, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3 }
  uselistorder i32 36, { 1, 5, 6, 3, 4, 0, 2 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2 }
  uselistorder i32 24, { 0, 76, 77, 38, 39, 1, 78, 79, 36, 37, 14, 12, 15, 13, 45, 70, 46, 58, 62, 40, 16, 41, 17, 42, 18, 43, 44, 65, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 66, 61, 67, 63, 64, 71, 72, 73, 68, 69, 74, 75, 2, 80, 19, 20, 3, 81, 21, 22, 5, 82, 4, 83, 84, 23, 24, 6, 25, 26, 27, 7, 28, 8, 9, 29, 85, 30, 10, 86, 87, 88, 31, 32, 91, 33, 11, 92, 34, 89, 35, 90 }
  uselistorder i32* @lr, { 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 0, 107, 108, 109, 1, 110, 111, 112, 2, 113, 114, 115, 116, 117, 118, 119, 120, 32, 33, 121, 122, 123, 124, 125, 67, 68, 69, 70, 75, 76, 77, 78, 34, 35, 36, 37, 38, 6, 79, 4, 5, 80, 41, 42, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 7, 8, 11, 12, 3, 15, 13, 14, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 92, 16, 17, 18, 19, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 93, 71, 72, 73, 74, 94, 95, 96 }
  uselistorder i32 16, { 30, 31, 32, 164, 33, 165, 166, 34, 167, 168, 35, 169, 170, 171, 172, 173, 174, 86, 87, 70, 71, 91, 88, 89, 90, 92, 23, 93, 94, 4, 5, 6, 7, 8, 22, 9, 10, 0, 11, 12, 45, 74, 46, 36, 47, 37, 48, 72, 73, 75, 77, 78, 79, 24, 69, 13, 14, 21, 67, 15, 80, 16, 49, 76, 50, 83, 84, 40, 39, 38, 81, 41, 82, 42, 51, 52, 53, 54, 55, 85, 56, 57, 25, 95, 96, 97, 98, 26, 99, 100, 101, 102, 103, 104, 105, 58, 106, 107, 108, 60, 109, 43, 59, 110, 111, 61, 112, 113, 114, 17, 115, 116, 1, 62, 117, 118, 119, 63, 120, 121, 122, 123, 124, 2, 64, 125, 126, 18, 127, 68, 19, 128, 65, 129, 130, 131, 20, 29, 132, 66, 133, 134, 3, 44, 135, 136, 137, 138, 139, 140, 27, 141, 142, 143, 144, 146, 145, 147, 148, 150, 151, 152, 153, 154, 28, 155, 156, 157, 158, 159, 161, 160, 162, 163, 149 }
  uselistorder i32 20, { 104, 2, 105, 106, 0, 3, 107, 37, 38, 24, 25, 1, 39, 40, 41, 42, 26, 15, 27, 16, 28, 17, 29, 31, 4, 32, 5, 33, 23, 18, 34, 30, 35, 36, 19, 20, 21, 43, 46, 44, 6, 45, 47, 48, 49, 50, 52, 53, 51, 7, 54, 55, 56, 57, 58, 59, 62, 63, 60, 8, 61, 64, 65, 66, 67, 68, 69, 72, 73, 70, 9, 71, 74, 75, 76, 77, 80, 81, 78, 10, 79, 82, 83, 84, 85, 86, 87, 90, 88, 22, 89, 91, 92, 93, 96, 12, 94, 11, 95, 97, 99, 102, 14, 100, 13, 101, 103, 98 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 49, 50, 51, 104, 111, 2, 53, 3, 8, 52, 0, 9, 54, 10, 55, 11, 56, 12, 57, 13, 58, 14, 59, 15, 60, 16, 61, 17, 62, 18, 63, 19, 64, 20, 65, 21, 66, 22, 67, 23, 68, 24, 69, 25, 70, 26, 71, 27, 72, 28, 73, 29, 74, 30, 75, 31, 76, 32, 77, 33, 78, 34, 79, 80, 35, 36, 37, 38, 39, 40, 41, 42, 43, 81, 82, 83, 44, 84, 85, 86, 87, 4, 88, 89, 90, 91, 45, 92, 5, 93, 46, 94, 95, 6, 96, 97, 7, 98, 99, 100, 101, 102, 47, 103, 106, 107, 108, 109, 48, 110, 1, 105 }
  uselistorder i32 -8, { 14, 15, 16, 17, 18, 19, 13, 12, 5, 11, 10, 9, 8, 20, 21, 22, 23, 6, 24, 0, 27, 7, 25, 26, 4, 1, 2, 3 }
  uselistorder i1 false, { 20, 21, 22, 32, 13, 19, 33, 34, 16, 17, 18, 35, 12, 36, 37, 0, 25, 24, 26, 23, 1, 3, 2, 11, 28, 4, 29, 10, 14, 31, 5, 6, 7, 27, 15, 8, 9, 30, 38 }
  uselistorder i32 4, { 74, 65, 66, 5, 404, 67, 405, 51, 6, 7, 68, 406, 69, 407, 408, 409, 410, 70, 411, 412, 413, 414, 71, 415, 416, 417, 418, 419, 8, 420, 421, 422, 423, 424, 72, 425, 50, 426, 427, 428, 429, 430, 431, 9, 10, 73, 432, 264, 265, 183, 184, 266, 267, 268, 433, 434, 435, 436, 437, 132, 133, 134, 52, 135, 136, 376, 378, 377, 374, 375, 341, 342, 343, 344, 379, 380, 381, 382, 364, 365, 366, 383, 384, 137, 138, 139, 140, 141, 42, 11, 12, 269, 270, 271, 272, 273, 274, 13, 14, 57, 15, 16, 58, 385, 386, 181, 17, 18, 89, 75, 387, 388, 53, 187, 90, 188, 142, 189, 211, 212, 205, 206, 49, 48, 213, 190, 191, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 91, 208, 209, 210, 207, 59, 214, 215, 76, 92, 93, 19, 216, 20, 217, 218, 21, 22, 219, 220, 44, 221, 43, 226, 94, 227, 95, 228, 96, 229, 97, 230, 98, 231, 99, 232, 100, 233, 101, 234, 102, 235, 103, 236, 104, 237, 105, 238, 106, 239, 107, 240, 108, 241, 109, 242, 110, 244, 111, 245, 112, 246, 247, 243, 222, 113, 223, 224, 225, 255, 143, 257, 23, 258, 259, 256, 24, 260, 45, 114, 261, 262, 248, 56, 55, 54, 249, 115, 25, 26, 27, 28, 29, 30, 250, 46, 251, 47, 252, 253, 254, 77, 116, 117, 144, 263, 0, 118, 275, 145, 276, 277, 278, 279, 146, 147, 120, 280, 31, 119, 282, 78, 283, 284, 148, 285, 286, 149, 150, 287, 121, 288, 79, 289, 290, 151, 152, 291, 153, 292, 293, 154, 155, 60, 294, 122, 295, 80, 296, 297, 298, 299, 300, 301, 123, 81, 302, 303, 156, 304, 305, 306, 307, 157, 158, 2, 308, 124, 309, 82, 310, 311, 312, 159, 313, 314, 160, 161, 3, 61, 315, 125, 317, 83, 318, 319, 320, 321, 162, 163, 322, 323, 324, 164, 325, 326, 126, 327, 4, 328, 84, 329, 127, 330, 331, 332, 165, 333, 334, 335, 336, 337, 166, 167, 128, 338, 62, 85, 339, 86, 340, 389, 390, 168, 391, 392, 393, 129, 394, 130, 395, 396, 397, 398, 169, 170, 131, 399, 63, 400, 87, 401, 88, 403, 171, 345, 346, 32, 172, 347, 348, 33, 173, 349, 350, 34, 174, 64, 351, 352, 35, 353, 175, 354, 355, 36, 176, 356, 357, 37, 177, 358, 359, 38, 178, 360, 361, 39, 179, 362, 363, 40, 367, 180, 368, 369, 370, 371, 41, 372, 373, 1, 402, 316, 281, 182 }
  uselistorder i32* @r2, { 91, 92, 33, 11, 34, 36, 35, 37, 38, 39, 40, 9, 93, 1, 94, 99, 100, 103, 95, 65, 69, 70, 73, 71, 72, 66, 67, 68, 53, 74, 17, 0, 101, 3, 102, 7, 41, 42, 43, 10, 12, 96, 97, 98, 13, 75, 76, 77, 78, 2, 79, 80, 81, 82, 83, 84, 4, 44, 45, 46, 8, 29, 30, 31, 5, 47, 85, 86, 87, 88, 89, 90, 18, 14, 15, 16, 21, 22, 19, 20, 25, 26, 23, 24, 27, 28, 32, 48, 49, 50, 51, 52, 6, 55, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64 }
  uselistorder label %dec_label_pc_149a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1493c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_148d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14870, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_147fc, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_147c0, { 1, 0 }
  uselistorder label %dec_label_pc_147ac, { 1, 0 }
  uselistorder label %dec_label_pc_1476c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14700, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14694, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14634, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_145a8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14568, { 1, 0 }
}

define i32 @function_149c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_149c8:
  ret i32 %arg1
}

define i32 @function_149d0() local_unnamed_addr {
dec_label_pc_149d0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_149d0 = load i32, i32* @r0, align 4
  %v2_149d0 = icmp eq i32 %v0_149d0, 0
  %v3_149d4 = load i32, i32* @r4, align 4
  store i32 %v3_149d4, i32* %stack_var_-20, align 4
  %v0_149d8 = load i32, i32* @r1, align 4
  br i1 %v2_149d0, label %dec_label_pc_14ab0, label %dec_label_pc_149ec.lr.ph

dec_label_pc_149ec:                               ; preds = %dec_label_pc_149ec.lr.ph, %dec_label_pc_14a70
  %v1_14a70 = phi i32 [ 0, %dec_label_pc_149ec.lr.ph ], [ %v5_14a70, %dec_label_pc_14a70 ]
  %v0_14a74 = phi i32 [ 1, %dec_label_pc_149ec.lr.ph ], [ %v1_14a74, %dec_label_pc_14a70 ]
  %v0_149f4 = phi i32 [ %v0_149d0, %dec_label_pc_149ec.lr.ph ], [ %v0_149f425, %dec_label_pc_14a70 ]
  %v1_149f4 = inttoptr i32 %v0_149f4 to i8*
  %v2_149f4 = load i8, i8* %v1_149f4, align 1
  %v3_149f4 = zext i8 %v2_149f4 to i32
  %v3_149f8 = mul nuw nsw i32 %v3_149f4, 2
  %v4_149f8 = add i32 %v3_149f8, %v2_149f0.pre
  %v5_149f8 = inttoptr i32 %v4_149f8 to i8*
  %v6_149f8 = load i8, i8* %v5_149f8, align 1
  %v1_149fc = and i8 %v6_149f8, 8
  %v2_149fc = icmp eq i8 %v1_149fc, 0
  br i1 %v2_149fc, label %dec_label_pc_14ab0, label %dec_label_pc_14a04

dec_label_pc_14a04:                               ; preds = %dec_label_pc_149ec
  br label %dec_label_pc_14a24

dec_label_pc_14a0c:                               ; preds = %dec_label_pc_14a24
  %v3_14a10 = mul i32 %v0_14a70, 10
  %v4_14a10 = add i32 %v3_14a24, %v3_14a10
  %v1_14a14 = add i32 %v4_14a10, -48
  %v8_14a1c = icmp sgt i32 %v1_14a14, 255
  br i1 %v8_14a1c, label %dec_label_pc_14ab0, label %dec_label_pc_14a20

dec_label_pc_14a20:                               ; preds = %dec_label_pc_14a0c
  %v1_14a20 = add i32 %v0_14a60, 1
  store i32 %v1_14a20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a24

dec_label_pc_14a24:                               ; preds = %dec_label_pc_14a04, %dec_label_pc_14a20
  %v0_14a70 = phi i32 [ 0, %dec_label_pc_14a04 ], [ %v1_14a14, %dec_label_pc_14a20 ]
  %v0_14a60 = phi i32 [ %v0_149f4, %dec_label_pc_14a04 ], [ %v1_14a20, %dec_label_pc_14a20 ]
  %v1_14a24 = inttoptr i32 %v0_14a60 to i8*
  %v2_14a24 = load i8, i8* %v1_14a24, align 1
  %v3_14a24 = zext i8 %v2_14a24 to i32
  %v2_14a28 = mul nuw nsw i32 %v3_14a24, 2
  %v2_14a2c = add i32 %v2_14a28, %v2_149f0.pre
  %v3_14a30 = inttoptr i32 %v2_14a2c to i8*
  %v4_14a30 = load i8, i8* %v3_14a30, align 1
  %v6_14a30 = zext i8 %v4_14a30 to i32
  %v1_14a3c = and i32 %v6_14a30, 8
  %v2_14a3c = icmp eq i32 %v1_14a3c, 0
  br i1 %v2_14a3c, label %dec_label_pc_14a44, label %dec_label_pc_14a0c

dec_label_pc_14a44:                               ; preds = %dec_label_pc_14a24
  %v8_14a48 = icmp sgt i32 %v0_14a74, 3
  br i1 %v8_14a48, label %dec_label_pc_14a5c, label %dec_label_pc_14a4c

dec_label_pc_14a4c:                               ; preds = %dec_label_pc_14a44
  %v7_14a4c = icmp eq i8 %v2_14a24, 46
  br i1 %v7_14a4c, label %dec_label_pc_14a54, label %dec_label_pc_14ab0

dec_label_pc_14a54:                               ; preds = %dec_label_pc_14a4c
  %v1_14a54 = add i32 %v0_14a60, 1
  store i32 %v1_14a54, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a70

dec_label_pc_14a5c:                               ; preds = %dec_label_pc_14a44
  %v2_14a5c = icmp eq i8 %v2_14a24, 0
  %v1_14a60 = add i32 %v0_14a60, 1
  store i32 %v1_14a60, i32* %r0.global-to-local, align 4
  br i1 %v2_14a5c, label %dec_label_pc_14a70, label %dec_label_pc_14a68

dec_label_pc_14a68:                               ; preds = %dec_label_pc_14a5c
  %v1_14a68 = and i32 %v6_14a30, 32
  %v2_14a68 = icmp eq i32 %v1_14a68, 0
  br i1 %v2_14a68, label %dec_label_pc_14ab0, label %dec_label_pc_14a70

dec_label_pc_14a70:                               ; preds = %dec_label_pc_14a68, %dec_label_pc_14a5c, %dec_label_pc_14a54
  %v0_149f425 = phi i32 [ %v1_14a60, %dec_label_pc_14a68 ], [ %v1_14a60, %dec_label_pc_14a5c ], [ %v1_14a54, %dec_label_pc_14a54 ]
  %v4_14a70 = mul i32 %v1_14a70, 256
  %v5_14a70 = or i32 %v0_14a70, %v4_14a70
  %v1_14a74 = add nuw nsw i32 %v0_14a74, 1
  %v7_14a7c = icmp slt i32 %v1_14a74, 5
  br i1 %v7_14a7c, label %dec_label_pc_149ec, label %dec_label_pc_14a80

dec_label_pc_149ec.lr.ph:                         ; preds = %dec_label_pc_149d0
  %v2_149f0.pre = load i32, i32* bitcast (i32** @global_var_1d840.749 to i32*), align 4
  br label %dec_label_pc_149ec

dec_label_pc_14a80:                               ; preds = %dec_label_pc_14a70
  %v2_14a80 = icmp eq i32 %v0_149d8, 0
  br i1 %v2_14a80, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_14a80
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_14a80
  %v3_14a9c = call i32 @llvm.bswap.i32(i32 %v5_14a70)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_14aa8 = inttoptr i32 %v0_149d8 to i32*
  store i32 %v3_14a9c, i32* %v3_14aa8, align 4
  %v2_14aac.pre = load i32, i32* %stack_var_-20, align 4
  %v17_14aac.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_14aac = phi i32 [ 1, %bb ], [ %v17_14aac.pre, %bb40 ]
  %v2_14aac = phi i32 [ %v3_149d4, %bb ], [ %v2_14aac.pre, %bb40 ]
  store i32 %v2_14aac, i32* @r4, align 4
  ret i32 %v17_14aac

dec_label_pc_14ab0:                               ; preds = %dec_label_pc_14a4c, %dec_label_pc_14a68, %dec_label_pc_149ec, %dec_label_pc_14a0c, %dec_label_pc_149d0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_149d4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_149f0.pre, { 1, 0 }
  uselistorder i32 %v1_14a74, { 1, 0 }
  uselistorder i32 %v0_14a60, { 0, 1, 3, 2 }
  uselistorder i32 %v3_149d4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 16, 17, 20, 21, 22, 23, 24 }
  uselistorder i32 5, { 16, 53, 17, 6, 18, 7, 3, 19, 54, 4, 1, 20, 55, 21, 56, 22, 57, 23, 58, 24, 59, 25, 60, 26, 61, 27, 62, 28, 63, 29, 64, 30, 65, 31, 66, 32, 67, 33, 68, 34, 69, 35, 70, 36, 71, 37, 72, 38, 73, 39, 74, 40, 75, 41, 76, 42, 77, 43, 78, 44, 79, 45, 80, 46, 81, 47, 82, 48, 83, 0, 84, 85, 86, 49, 50, 51, 87, 88, 89, 90, 8, 91, 92, 93, 94, 9, 95, 96, 97, 98, 99, 100, 101, 10, 102, 103, 52, 104, 11, 105, 106, 107, 12, 108, 109, 110, 111, 13, 112, 113, 114, 115, 116, 117, 118, 14, 119, 124, 125, 126, 127, 128, 129, 15, 130, 5, 120, 121, 2, 122, 123 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 422, 423, 79, 80, 81, 82, 83, 84, 85, 425, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 98, 99, 103, 102, 101, 104, 420, 426, 109, 105, 108, 106, 107, 424, 110, 111, 112, 113, 427, 114, 115, 116, 117, 118, 428, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 145, 147, 148, 149, 153, 159, 154, 150, 151, 155, 156, 157, 160, 152, 161, 162, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 174, 177, 179, 181, 180, 178, 182, 185, 184, 183, 192, 189, 186, 193, 190, 187, 188, 194, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 211, 213, 214, 215, 226, 221, 216, 227, 222, 223, 228, 229, 224, 230, 225, 217, 218, 219, 231, 232, 220, 233, 234, 235, 236, 237, 238, 239, 241, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 256, 263, 260, 258, 264, 261, 259, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 280, 279, 282, 289, 285, 290, 291, 286, 283, 292, 287, 284, 293, 288, 294, 295, 296, 297, 298, 299, 300, 303, 304, 301, 305, 302, 307, 306, 308, 309, 310, 311, 312, 315, 316, 319, 317, 313, 320, 318, 314, 323, 322, 321, 419, 429, 324, 325, 331, 326, 332, 327, 328, 333, 329, 334, 335, 330, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 354, 356, 357, 361, 362, 369, 363, 364, 370, 365, 358, 359, 371, 366, 360, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 386, 388, 389, 393, 394, 401, 395, 396, 402, 397, 390, 391, 403, 398, 392, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421 }
  uselistorder i32 32, { 63, 38, 39, 36, 56, 57, 46, 47, 55, 4, 3, 6, 5, 8, 7, 37, 35, 58, 59, 41, 49, 40, 48, 42, 50, 43, 51, 44, 52, 10, 9, 12, 11, 14, 13, 16, 15, 45, 18, 17, 20, 19, 21, 23, 22, 25, 24, 26, 27, 29, 28, 53, 54, 60, 61, 30, 62, 31, 0, 32, 1, 2, 33, 34 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 3, { 34, 64, 65, 165, 66, 67, 68, 69, 70, 71, 75, 98, 166, 4, 151, 154, 155, 0, 72, 21, 73, 22, 156, 74, 35, 23, 25, 76, 38, 77, 2, 78, 79, 80, 81, 36, 19, 82, 83, 84, 85, 39, 86, 40, 87, 41, 88, 42, 89, 43, 90, 44, 91, 24, 92, 45, 93, 37, 94, 46, 95, 47, 96, 97, 48, 49, 50, 51, 52, 1, 99, 100, 101, 102, 103, 104, 105, 106, 53, 107, 54, 108, 55, 26, 109, 110, 111, 112, 113, 6, 5, 56, 27, 114, 115, 116, 117, 118, 119, 120, 8, 7, 57, 121, 28, 122, 123, 124, 125, 126, 127, 128, 129, 10, 9, 58, 130, 29, 131, 132, 133, 134, 135, 12, 11, 59, 136, 30, 137, 138, 139, 140, 60, 141, 14, 13, 61, 142, 31, 143, 144, 145, 146, 147, 148, 16, 15, 62, 149, 32, 150, 157, 158, 159, 160, 161, 162, 18, 17, 63, 163, 33, 164, 20, 152, 3, 153 }
  uselistorder i32 8, { 134, 175, 23, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 24, 192, 112, 113, 114, 115, 119, 116, 117, 118, 193, 167, 166, 164, 165, 150, 151, 152, 168, 169, 170, 158, 159, 160, 6, 27, 28, 25, 26, 16, 17, 20, 21, 29, 194, 120, 121, 122, 123, 7, 8, 72, 18, 9, 10, 15, 11, 30, 75, 31, 12, 13, 14, 73, 36, 74, 22, 76, 77, 78, 79, 81, 37, 82, 38, 83, 39, 84, 40, 85, 41, 86, 42, 87, 43, 88, 44, 89, 45, 90, 46, 91, 47, 92, 48, 93, 49, 94, 50, 95, 51, 96, 52, 97, 53, 98, 54, 99, 55, 100, 56, 101, 57, 102, 58, 103, 59, 104, 60, 105, 61, 106, 62, 107, 108, 80, 109, 110, 63, 111, 64, 65, 66, 67, 124, 71, 32, 125, 126, 127, 128, 129, 19, 130, 131, 132, 133, 3, 135, 136, 137, 4, 138, 139, 140, 141, 142, 143, 144, 5, 145, 146, 147, 148, 149, 171, 172, 173, 174, 153, 33, 154, 34, 155, 35, 156, 68, 157, 70, 161, 162, 69, 163, 0, 1, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 12, 60, 61, 0, 2, 3, 33, 34, 62, 1, 6, 35, 39, 13, 38, 5, 40, 41, 36, 14, 42, 37, 43, 15, 44, 16, 45, 17, 46, 18, 47, 19, 48, 20, 49, 21, 50, 22, 51, 23, 52, 24, 53, 25, 54, 26, 55, 56, 57, 27, 4, 28, 29, 58, 30, 59, 7, 63, 64, 65, 66, 67, 68, 69, 70, 71, 8, 72, 73, 74, 9, 75, 76, 77, 31, 78, 10, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 84, 11, 90, 32 }
  uselistorder i8 0, { 9, 0, 1, 22, 6, 23, 24, 2, 11, 25, 26, 27, 28, 29, 30, 31, 10, 32, 33, 34, 35, 36, 37, 3, 13, 12, 14, 40, 42, 39, 16, 41, 17, 43, 44, 38, 4, 45, 46, 47, 7, 8, 5, 48, 49, 19, 50, 51, 54, 20, 52, 53, 18, 55, 56, 57, 58, 59, 60, 15, 61, 62, 63, 64, 21, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74 }
  uselistorder i32 2, { 4, 131, 247, 248, 55, 249, 250, 47, 251, 46, 252, 45, 135, 79, 171, 80, 172, 81, 173, 5, 132, 253, 51, 82, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 133, 15, 16, 17, 18, 19, 84, 85, 83, 48, 49, 62, 150, 63, 88, 137, 144, 64, 136, 87, 138, 65, 139, 66, 140, 67, 141, 68, 142, 69, 143, 70, 149, 145, 146, 147, 148, 57, 89, 151, 20, 21, 152, 153, 154, 90, 155, 52, 134, 91, 156, 92, 157, 93, 158, 159, 86, 160, 22, 94, 166, 167, 23, 95, 96, 97, 168, 169, 98, 100, 161, 102, 162, 101, 163, 99, 103, 164, 24, 25, 26, 104, 105, 106, 107, 165, 58, 108, 109, 110, 111, 59, 113, 114, 112, 115, 170, 50, 54, 174, 175, 176, 235, 236, 177, 178, 179, 180, 181, 182, 183, 116, 184, 71, 185, 186, 187, 188, 189, 117, 72, 190, 191, 192, 193, 194, 195, 196, 118, 197, 73, 198, 199, 119, 200, 120, 121, 201, 202, 203, 204, 205, 206, 207, 208, 1, 27, 28, 29, 30, 31, 32, 122, 209, 74, 210, 211, 212, 213, 214, 2, 33, 34, 35, 36, 37, 38, 123, 75, 215, 216, 217, 218, 124, 219, 53, 220, 125, 221, 3, 39, 40, 41, 42, 43, 44, 126, 222, 76, 223, 224, 225, 226, 227, 228, 229, 230, 127, 231, 77, 232, 237, 238, 239, 128, 240, 129, 241, 242, 243, 244, 130, 245, 78, 246, 60, 233, 56, 61, 234 }
  uselistorder i32* @r1, { 44, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 1, 83, 84, 25, 26, 28, 27, 5, 7, 85, 0, 86, 29, 30, 20, 88, 50, 55, 56, 59, 57, 58, 51, 52, 53, 54, 49, 60, 87, 12, 6, 45, 31, 8, 61, 32, 3, 62, 33, 34, 13, 9, 10, 11, 15, 14, 19, 16, 17, 18, 21, 22, 23, 24, 35, 36, 37, 4, 38, 63, 64, 2, 39, 40, 41, 42, 43, 46, 47, 48, 65 }
  uselistorder label %dec_label_pc_14ab0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_14a24, { 1, 0 }
}

define i32 @function_14abc(i32 %arg1) local_unnamed_addr {
dec_label_pc_14abc:
  %v3_14abc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14ac4 = call i32 @function_12338()
  %v0_14ac8 = load i32, i32* @r4, align 4
  store i32 %v3_14abc, i32* @r4, align 4
  %v2_14ad0 = call i32 @function_123e0(i32 %v0_14ac4, i32 %v0_14ac8)
  ret i32 %v2_14ad0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_123e0, { 5, 7, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 ()* @function_12338, { 0, 3, 2, 1 }
}

define i32 @function_14ad4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ad4:
  %v1_14ad4 = add i32 %arg1, 28
  %v2_14ad4 = inttoptr i32 %v1_14ad4 to i32*
  %v3_14ad4 = load i32, i32* %v2_14ad4, align 4
  %v1_14adc = add i32 %arg1, 44
  %v2_14adc = inttoptr i32 %v1_14adc to i32*
  %v3_14adc = load i32, i32* %v2_14adc, align 4
  store i32 %v3_14ad4, i32* @global_var_1db64.802, align 4
  store i32 %v3_14adc, i32* @global_var_1db68.804, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 26, 0, 16, 17, 5, 6, 25, 1, 7, 8, 9, 10, 11, 12, 13, 2, 4, 15, 14, 18, 19, 20, 21, 22, 23, 24, 3 }
}

define i32 @function_14af8(i32* %arg1) local_unnamed_addr {
dec_label_pc_14af8:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_14b00 = call i32 @brk(i32* %arg1)
  %v3_14b04 = icmp ult i32 %v2_14b00, %tmp
  store i32 %v2_14b00, i32* @global_var_1d8fc.799, align 4
  br i1 %v3_14b04, label %dec_label_pc_14b18, label %dec_label_pc_14b28

dec_label_pc_14b18:                               ; preds = %dec_label_pc_14af8
  %v0_14b18 = call i32 @function_128b4()
  %v2_14b20 = inttoptr i32 %v0_14b18 to i32*
  store i32 12, i32* %v2_14b20, align 4
  br label %dec_label_pc_14b28

dec_label_pc_14b28:                               ; preds = %dec_label_pc_14af8, %dec_label_pc_14b18
  %v0_14b28 = phi i32 [ 0, %dec_label_pc_14af8 ], [ -1, %dec_label_pc_14b18 ]
  ret i32 %v0_14b28

; uselistorder directives
  uselistorder i32 12, { 17, 11, 109, 110, 111, 113, 114, 115, 116, 12, 112, 117, 118, 119, 120, 121, 122, 123, 63, 64, 30, 31, 65, 18, 19, 99, 100, 101, 0, 96, 102, 8, 103, 9, 97, 4, 98, 20, 21, 6, 66, 67, 22, 68, 69, 23, 13, 44, 47, 41, 33, 34, 48, 49, 35, 32, 36, 37, 38, 39, 40, 42, 45, 46, 43, 50, 51, 52, 10, 53, 54, 56, 57, 58, 24, 59, 25, 60, 5, 61, 55, 7, 62, 26, 27, 28, 104, 70, 29, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 14, 82, 83, 84, 85, 15, 86, 87, 88, 89, 90, 91, 16, 92, 93, 94, 95, 105, 106, 107, 108, 1, 2, 3 }
  uselistorder i32 ()* @function_128b4, { 19, 58, 43, 42, 9, 8, 7, 6, 41, 40, 39, 5, 59, 38, 37, 26, 25, 17, 18, 57, 56, 16, 15, 14, 31, 29, 55, 24, 54, 53, 28, 30, 52, 36, 35, 34, 51, 23, 13, 4, 3, 50, 44, 33, 32, 49, 2, 11, 48, 22, 10, 21, 12, 1, 0, 47, 46, 45, 27, 20 }
  uselistorder i32* @global_var_1d8fc.799, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14b28, { 1, 0 }
}

define i32 @function_14b34(i32 %arg1) local_unnamed_addr {
dec_label_pc_14b34:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b38 = load i32, i32* @global_var_1d6cc.762, align 4
  %v7_14b3c = icmp eq i32 %v3_14b38, -1
  %v3_14b40 = load i32, i32* @r4, align 4
  store i32 %v3_14b40, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1d6cc.762 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_14b3c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_14b34
  store i32 %v3_14b40, i32* %r4.global-to-local, align 4
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_14b34, %.preheader
  %v0_14b50 = phi i32 [ %v3_14b54, %.preheader ], [ %v3_14b38, %dec_label_pc_14b34 ]
  call void @__pseudo_branch(i32 %v0_14b50)
  %v0_14b54 = load i32, i32* %r4.global-to-local, align 4
  %v1_14b54 = add i32 %v0_14b54, -4
  %v2_14b54 = inttoptr i32 %v1_14b54 to i32*
  %v3_14b54 = load i32, i32* %v2_14b54, align 4
  store i32 %v1_14b54, i32* %r4.global-to-local, align 4
  %v3_14b58 = icmp eq i32 %v3_14b54, -1
  br i1 %v3_14b58, label %dec_label_pc_14b60, label %.preheader

dec_label_pc_14b60:                               ; preds = %.preheader
  %v2_14b60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b60, i32* %r4.global-to-local, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v3_14b54, { 1, 0 }
  uselistorder i32 %v3_14b38, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 44, 15, 45, 46, 47, 3, 16, 17, 18, 48, 49, 50, 4, 19, 20, 21, 51, 52, 53, 5, 22, 23, 54, 14, 13, 55, 56, 57, 12, 11, 10, 9, 24, 25, 26, 27, 28, 0, 29, 1, 30, 2, 58, 8, 31, 35, 36, 42, 37, 32, 33, 38, 39, 40, 41, 43, 7, 6, 34 }
  uselistorder i32 -1, { 165, 0, 98, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 166, 99, 264, 100, 304, 101, 289, 290, 102, 327, 103, 328, 104, 329, 105, 330, 152, 94, 291, 292, 106, 293, 294, 107, 331, 1, 167, 2, 108, 295, 296, 168, 169, 284, 285, 153, 170, 154, 171, 3, 4, 93, 84, 85, 172, 173, 174, 91, 265, 175, 266, 5, 6, 109, 305, 110, 306, 111, 307, 112, 299, 113, 301, 114, 267, 115, 286, 116, 268, 117, 269, 118, 302, 119, 300, 120, 270, 121, 176, 164, 122, 177, 123, 271, 124, 287, 125, 308, 126, 332, 333, 127, 272, 128, 283, 129, 297, 130, 298, 131, 273, 132, 334, 133, 310, 134, 274, 135, 288, 136, 311, 137, 303, 138, 309, 139, 335, 95, 336, 178, 179, 180, 181, 182, 183, 184, 185, 7, 8, 9, 10, 140, 141, 11, 186, 18, 187, 275, 97, 96, 276, 12, 188, 258, 142, 259, 16, 189, 17, 190, 191, 261, 262, 192, 193, 194, 155, 260, 19, 195, 86, 20, 196, 197, 21, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 263, 14, 218, 13, 219, 220, 15, 221, 222, 223, 22, 224, 225, 143, 277, 226, 23, 227, 278, 87, 24, 25, 228, 92, 26, 27, 28, 29, 30, 144, 229, 158, 279, 31, 156, 280, 32, 33, 157, 281, 34, 35, 159, 282, 36, 37, 38, 39, 40, 230, 41, 88, 42, 43, 231, 44, 145, 232, 233, 234, 235, 236, 237, 146, 238, 239, 240, 241, 242, 243, 244, 245, 147, 148, 149, 150, 151, 45, 46, 47, 246, 48, 49, 50, 51, 89, 52, 53, 54, 55, 56, 57, 58, 247, 59, 160, 60, 61, 63, 248, 62, 64, 65, 66, 67, 249, 68, 69, 70, 250, 71, 72, 73, 251, 74, 75, 76, 77, 78, 252, 79, 80, 81, 253, 82, 83, 90, 254, 255, 256, 257, 161, 162, 163 }
  uselistorder i32* @global_var_1d6cc.762, { 1, 0 }
  uselistorder i32 1, { 537, 276, 349, 384, 932, 933, 934, 935, 936, 362, 538, 282, 1006, 353, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 541, 540, 539, 308, 309, 312, 311, 307, 306, 310, 313, 315, 305, 314, 542, 61, 60, 56, 58, 57, 59, 62, 55, 716, 66, 63, 65, 64, 543, 22, 544, 251, 252, 545, 34, 206, 546, 279, 547, 74, 548, 287, 549, 293, 855, 856, 550, 302, 298, 303, 299, 300, 304, 301, 857, 858, 859, 420, 164, 165, 161, 163, 162, 551, 278, 552, 144, 0, 556, 555, 554, 553, 275, 274, 557, 23, 24, 363, 421, 558, 68, 559, 860, 564, 563, 562, 561, 560, 111, 112, 114, 115, 113, 422, 565, 350, 833, 342, 834, 364, 566, 26, 32, 25, 29, 28, 31, 33, 27, 30, 1019, 365, 569, 568, 567, 281, 280, 570, 88, 89, 87, 90, 46, 47, 48, 49, 571, 261, 262, 260, 259, 572, 573, 284, 283, 574, 366, 979, 575, 122, 123, 423, 424, 347, 579, 578, 577, 576, 190, 189, 354, 580, 188, 581, 191, 582, 160, 583, 142, 584, 187, 585, 141, 586, 151, 587, 69, 588, 67, 589, 19, 590, 20, 591, 21, 592, 980, 337, 179, 180, 181, 717, 718, 719, 720, 721, 722, 723, 1020, 185, 186, 182, 183, 184, 593, 425, 426, 594, 93, 92, 94, 91, 390, 861, 595, 207, 391, 597, 596, 258, 257, 598, 53, 599, 54, 600, 108, 601, 8, 9, 602, 143, 603, 124, 604, 109, 605, 110, 606, 86, 50, 607, 107, 608, 277, 609, 292, 610, 288, 611, 294, 612, 150, 295, 210, 392, 751, 752, 393, 981, 982, 319, 983, 862, 863, 864, 343, 865, 615, 614, 613, 18, 15, 11, 12, 14, 13, 10, 16, 17, 1, 835, 836, 837, 838, 355, 881, 882, 356, 883, 617, 616, 297, 296, 866, 867, 868, 427, 618, 73, 72, 71, 70, 984, 367, 368, 2, 419, 985, 619, 194, 192, 195, 196, 193, 748, 750, 749, 428, 869, 286, 285, 986, 870, 871, 872, 51, 52, 987, 620, 84, 83, 85, 82, 988, 989, 621, 148, 147, 146, 145, 149, 990, 991, 622, 256, 255, 254, 253, 429, 726, 430, 727, 394, 728, 729, 753, 730, 740, 745, 438, 724, 725, 439, 731, 370, 440, 441, 436, 732, 733, 437, 734, 735, 435, 736, 737, 434, 738, 739, 433, 741, 742, 432, 743, 744, 431, 746, 747, 754, 442, 348, 755, 443, 756, 758, 759, 757, 760, 444, 761, 715, 369, 764, 762, 445, 763, 766, 446, 767, 768, 769, 385, 770, 771, 447, 772, 448, 773, 449, 774, 450, 775, 451, 776, 452, 777, 453, 778, 454, 779, 455, 780, 456, 781, 457, 782, 458, 783, 459, 784, 460, 785, 461, 786, 462, 787, 463, 788, 464, 789, 465, 790, 371, 796, 797, 344, 466, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 233, 234, 235, 242, 237, 238, 236, 241, 243, 240, 239, 791, 792, 467, 793, 794, 468, 795, 637, 106, 105, 100, 104, 103, 102, 99, 101, 765, 469, 639, 638, 290, 291, 289, 803, 804, 805, 806, 807, 808, 809, 320, 341, 810, 811, 372, 321, 812, 813, 814, 815, 322, 340, 816, 817, 373, 323, 818, 470, 820, 821, 471, 822, 819, 823, 389, 824, 357, 827, 828, 825, 826, 338, 336, 339, 829, 472, 830, 646, 645, 532, 644, 643, 642, 531, 641, 640, 36, 38, 35, 42, 40, 45, 41, 37, 44, 39, 43, 647, 263, 992, 649, 648, 120, 121, 119, 118, 117, 116, 650, 396, 798, 799, 395, 800, 473, 475, 474, 476, 801, 802, 477, 478, 479, 480, 481, 482, 483, 484, 662, 661, 660, 659, 658, 657, 656, 655, 654, 533, 653, 652, 651, 96, 95, 98, 97, 485, 345, 486, 663, 831, 664, 489, 488, 487, 832, 666, 665, 839, 382, 383, 840, 490, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 841, 380, 842, 379, 843, 378, 844, 377, 845, 376, 381, 846, 491, 847, 492, 848, 493, 849, 850, 851, 494, 374, 852, 495, 853, 496, 854, 346, 497, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 137, 140, 138, 139, 878, 4, 873, 498, 874, 3, 875, 386, 876, 351, 352, 877, 879, 387, 880, 691, 690, 689, 534, 535, 688, 993, 397, 994, 398, 995, 5, 996, 6, 7, 884, 885, 886, 887, 888, 889, 890, 891, 388, 892, 893, 894, 895, 499, 896, 500, 897, 501, 898, 899, 900, 901, 902, 694, 693, 692, 212, 213, 214, 218, 220, 216, 221, 219, 217, 211, 215, 904, 905, 906, 907, 908, 502, 503, 696, 695, 200, 198, 197, 199, 204, 205, 202, 203, 201, 909, 910, 911, 504, 912, 913, 914, 915, 916, 917, 505, 918, 506, 400, 399, 507, 919, 697, 152, 154, 156, 157, 159, 158, 155, 153, 920, 921, 508, 922, 509, 510, 403, 401, 402, 536, 698, 177, 178, 923, 924, 358, 925, 926, 927, 928, 511, 929, 359, 512, 513, 930, 404, 931, 699, 224, 227, 222, 223, 228, 229, 232, 230, 226, 231, 225, 937, 938, 939, 940, 941, 514, 942, 515, 406, 405, 516, 944, 517, 945, 700, 132, 134, 135, 136, 133, 131, 130, 946, 947, 948, 949, 950, 951, 952, 518, 953, 519, 954, 520, 411, 410, 521, 955, 407, 956, 408, 957, 409, 958, 705, 704, 703, 702, 701, 78, 79, 81, 80, 75, 77, 76, 959, 960, 961, 962, 963, 964, 522, 414, 413, 523, 965, 412, 966, 706, 265, 264, 267, 272, 271, 270, 273, 269, 266, 268, 997, 998, 999, 1000, 1001, 1002, 524, 417, 416, 525, 1003, 415, 1004, 711, 710, 709, 708, 707, 169, 168, 167, 172, 173, 175, 176, 166, 171, 174, 170, 967, 418, 526, 712, 127, 128, 129, 126, 968, 969, 527, 375, 528, 972, 529, 530, 973, 970, 971, 974, 975, 976, 977, 360, 978, 361, 248, 245, 247, 246, 250, 244, 249, 1005, 208, 943, 125, 903, 209, 713, 714, 318, 317, 316 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_14b68() local_unnamed_addr {
dec_label_pc_14b68:
  %v5_14b6c = load i32, i32* @r0, align 4
  ret i32 %v5_14b6c

; uselistorder directives
  uselistorder i32* @r0, { 4, 114, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 76, 77, 79, 78, 27, 161, 162, 33, 34, 35, 36, 18, 5, 14, 15, 80, 81, 28, 163, 164, 63, 166, 23, 13, 125, 9, 124, 120, 32, 121, 20, 122, 126, 165, 41, 8, 82, 83, 84, 85, 30, 22, 86, 87, 88, 89, 21, 167, 24, 19, 42, 10, 127, 17, 128, 129, 16, 90, 130, 11, 91, 12, 92, 93, 0, 37, 43, 44, 38, 39, 40, 45, 48, 49, 50, 51, 52, 1, 46, 47, 60, 61, 62, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 29, 72, 73, 74, 75, 94, 95, 96, 97, 98, 99, 100, 3, 101, 102, 103, 104, 105, 106, 107, 31, 108, 131, 132, 2, 109, 110, 111, 112, 113, 115, 117, 118, 119, 133, 134, 123, 116, 6, 7, 25, 26 }
}

define i32 @function_14b70() local_unnamed_addr {
entry:
  %v3_14b74 = load i32, i32* @r4, align 4
  %v0_14b7c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_14b74)
  ret i32 %v0_14b7c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 98, 0, 783, 784, 785, 786, 100, 99, 787, 916, 917, 918, 919, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 921, 922, 933, 934, 935, 936, 937, 938, 939, 940, 32, 941, 942, 943, 944, 945, 33, 946, 947, 948, 34, 949, 950, 951, 35, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 967, 968, 979, 980, 981, 982, 983, 984, 985, 986, 36, 987, 988, 989, 990, 991, 37, 992, 993, 994, 995, 996, 38, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 684, 685, 271, 686, 272, 557, 850, 851, 852, 853, 687, 688, 689, 1010, 1011, 1012, 1013, 273, 690, 1, 691, 692, 693, 1014, 1015, 1016, 101, 1017, 66, 1018, 64, 65, 1019, 1020, 1021, 274, 1025, 1036, 1038, 487, 215, 1039, 275, 1037, 276, 277, 2, 1022, 1023, 102, 694, 246, 695, 280, 248, 247, 696, 697, 698, 699, 279, 701, 702, 278, 703, 1024, 660, 661, 662, 663, 664, 665, 104, 84, 666, 67, 103, 105, 282, 1026, 283, 249, 1027, 1028, 1030, 1031, 281, 856, 858, 859, 42, 216, 860, 857, 854, 855, 3, 823, 826, 824, 825, 217, 4, 863, 861, 862, 218, 106, 827, 828, 829, 830, 832, 833, 284, 5, 834, 6, 870, 871, 107, 864, 865, 866, 867, 868, 869, 7, 8, 700, 558, 559, 560, 285, 9, 286, 872, 873, 483, 874, 484, 768, 799, 561, 667, 562, 563, 800, 769, 564, 788, 1040, 1041, 57, 704, 287, 705, 706, 707, 708, 288, 709, 710, 711, 712, 713, 714, 715, 565, 668, 875, 1029, 566, 639, 716, 741, 567, 485, 1032, 70, 1033, 914, 568, 669, 915, 835, 876, 1034, 1035, 10, 569, 85, 570, 571, 212, 211, 488, 71, 72, 73, 74, 498, 489, 44, 43, 86, 572, 573, 574, 575, 577, 576, 11, 877, 878, 214, 213, 490, 75, 76, 77, 78, 499, 491, 46, 45, 41, 54, 879, 500, 880, 881, 882, 79, 883, 884, 885, 886, 887, 108, 888, 492, 501, 493, 494, 889, 502, 93, 109, 717, 718, 80, 719, 720, 503, 12, 219, 110, 111, 255, 47, 112, 289, 578, 68, 721, 722, 891, 890, 892, 893, 39, 113, 894, 116, 115, 114, 256, 257, 258, 118, 117, 119, 290, 723, 724, 120, 895, 896, 94, 121, 725, 122, 579, 123, 897, 898, 124, 899, 900, 584, 580, 532, 495, 581, 533, 534, 530, 504, 297, 531, 553, 554, 535, 536, 125, 126, 537, 538, 539, 540, 505, 295, 541, 542, 506, 296, 543, 544, 507, 294, 545, 546, 508, 293, 547, 548, 509, 292, 549, 556, 510, 291, 550, 555, 551, 61, 48, 95, 96, 552, 486, 582, 298, 583, 221, 585, 87, 586, 299, 587, 590, 591, 128, 220, 588, 589, 300, 301, 592, 593, 250, 594, 595, 511, 58, 302, 597, 598, 599, 600, 601, 602, 603, 236, 235, 604, 303, 605, 81, 606, 607, 97, 608, 497, 609, 610, 611, 496, 612, 613, 614, 127, 304, 305, 615, 618, 619, 620, 621, 622, 129, 616, 130, 617, 13, 131, 596, 640, 641, 642, 63, 49, 643, 62, 50, 644, 645, 646, 647, 648, 649, 306, 650, 651, 653, 132, 652, 59, 654, 15, 14, 655, 901, 902, 623, 307, 625, 133, 626, 627, 628, 629, 630, 631, 632, 633, 251, 308, 634, 60, 309, 635, 624, 16, 636, 237, 637, 310, 638, 656, 657, 658, 659, 311, 259, 137, 136, 512, 513, 260, 135, 134, 223, 233, 224, 670, 51, 261, 149, 148, 514, 262, 151, 150, 515, 263, 153, 152, 516, 264, 155, 154, 517, 265, 157, 156, 518, 519, 266, 139, 138, 225, 520, 267, 141, 140, 521, 522, 268, 143, 142, 523, 524, 269, 145, 144, 525, 526, 270, 147, 146, 527, 226, 227, 228, 229, 312, 671, 158, 159, 680, 672, 673, 674, 675, 676, 677, 678, 679, 222, 681, 682, 52, 683, 160, 161, 313, 69, 726, 727, 728, 729, 232, 730, 731, 732, 231, 733, 734, 735, 736, 90, 737, 739, 738, 88, 89, 162, 230, 314, 740, 254, 252, 253, 91, 163, 55, 164, 742, 743, 165, 166, 167, 238, 744, 92, 745, 746, 747, 234, 748, 168, 749, 750, 315, 751, 752, 753, 169, 170, 754, 171, 756, 82, 83, 56, 172, 173, 239, 757, 758, 759, 760, 174, 761, 762, 175, 177, 176, 240, 764, 763, 178, 765, 766, 179, 767, 770, 184, 317, 771, 182, 183, 180, 181, 772, 773, 185, 774, 318, 319, 775, 316, 776, 186, 188, 187, 189, 778, 779, 777, 780, 17, 18, 19, 20, 21, 781, 190, 782, 191, 192, 241, 790, 789, 791, 793, 794, 792, 22, 23, 24, 25, 26, 795, 193, 798, 801, 802, 803, 53, 194, 196, 195, 242, 805, 804, 320, 806, 808, 809, 810, 811, 321, 812, 27, 28, 29, 807, 30, 31, 813, 197, 814, 815, 198, 200, 199, 243, 818, 816, 817, 322, 820, 819, 821, 201, 822, 903, 202, 204, 203, 244, 906, 905, 904, 323, 908, 907, 909, 205, 912, 245, 831, 324, 836, 837, 206, 838, 839, 840, 841, 207, 842, 325, 843, 844, 40, 845, 846, 847, 848, 849, 910, 208, 911, 796, 209, 797, 210, 755, 913, 528, 529, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056 }
  uselistorder i32* @r4, { 35, 644, 648, 649, 652, 653, 443, 444, 445, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 244, 52, 579, 580, 245, 670, 671, 672, 673, 674, 675, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 676, 677, 5, 678, 679, 680, 681, 695, 696, 697, 698, 32, 699, 30, 690, 691, 692, 693, 694, 682, 683, 684, 264, 265, 266, 267, 268, 269, 270, 271, 685, 686, 213, 214, 689, 581, 582, 583, 540, 6, 541, 542, 543, 7, 544, 8, 545, 546, 559, 9, 10, 560, 561, 562, 563, 564, 565, 584, 585, 11, 593, 594, 586, 587, 588, 589, 590, 591, 592, 53, 54, 55, 56, 57, 58, 595, 596, 597, 598, 599, 600, 398, 399, 479, 480, 59, 60, 215, 216, 61, 62, 63, 64, 481, 482, 400, 401, 65, 66, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 67, 68, 217, 218, 601, 602, 687, 688, 4, 69, 70, 176, 177, 290, 291, 318, 319, 71, 72, 646, 647, 219, 220, 650, 651, 566, 567, 603, 604, 292, 293, 73, 74, 75, 76, 294, 295, 296, 297, 298, 605, 606, 607, 77, 78, 79, 608, 609, 610, 611, 612, 613, 80, 81, 36, 37, 38, 82, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 83, 84, 50, 51, 12, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 1, 150, 138, 139, 140, 141, 142, 143, 91, 92, 93, 94, 95, 178, 179, 180, 181, 182, 183, 184, 185, 13, 186, 187, 188, 189, 190, 191, 192, 193, 0, 194, 195, 196, 197, 198, 199, 614, 615, 616, 617, 618, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 14, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 15, 221, 222, 223, 33, 224, 225, 226, 227, 228, 229, 230, 231, 232, 31, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 299, 300, 301, 2, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 333, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 3, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 16, 378, 17, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 18, 416, 19, 417, 20, 418, 21, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 447, 448, 22, 449, 23, 450, 24, 451, 25, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 501, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 26, 521, 27, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 619, 620, 621, 28, 622, 29, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 568, 572, 569, 570, 571, 573, 574, 575, 576, 577, 578, 638, 639, 640, 458, 459, 460, 34, 645 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
